./ ADD NAME=$DOC     0100-20096-20096-0111-00435-00435-00000-BIXSMAC 30
{@#}
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
Coding conventions for macro's:

- All global variables start with &BXA; these are documented in this
  member. See below.
- Macro-generated labels always start with an underscore
- All local variables, when derived from a parameter, are named after
  the parameter-name, prefixed with an underscore. E.g. if &REG is
  defined as a parameter, &_REG is the associated local variable.
- For generated code, the same rules apply as for open code, except for
  labels. Within macro's these do not need to appear on an EQU
  statement.
- All macro's - except mapping macro's (MAPxxxxx) - have a &LABEL
  parameter, which is expanded using the LABEL macro.
- All mapping macro's contain a label with the acronym of the control
  block they map. This name is for use with USING statements.
- All DSECTs contain a length value: the control block acronym with
  _LEN appendended. The length EQU is preceded by an ORG instruction
  to ensure proper evaluation. If this name conflicts with an existing
  field definition in the control block, that field is renamed to
  the acronym with _SIZE appended.
- All private control blocks end with alignment on a doubleword
  because internal save areas are allocated adjacent to it.
- If a macro needs expansion of a DSECT, this is done through the
  GENMAPS macro.
=======================================================================
The following global macro-variables are used in the Bixoft-macro's.

Name               Defined  Used     Purpose
------------------ -------- -------- ----------------------------------
&BXA_ABND          ABND     END      Target addresses used by ABND
&BXA_ABND_DFT      ABND     .        Default label for ABND macro
&BXA_ABNDPGM       ABNDPGM  END      Dest. addresses for use by ABND
&BXA_AMODE         PGM      .        Indicate current AMODE: 31 or 24
&BXA_BITF_...      DCL      IF       Field name containing
.                  .        IFx            specified bit name
.                  .        SET            or specified value location
.                  .        SETOF
.                  .        SETON
&BXA_CB_...        MAP...   DCL      Link control block to map-macro
&BXA_DBG_EP        DBG      .        Name of DBG-routine
&BXA_DBG_SKIP      DBG      END      Nr of DBG-operations skipped
&BXA_DBG_PLIST     DBG      .        Name of field containing plist
&BXA_DBG_PTR       DBG      .        Name of ptr field to DBG-routine
&BXA_DROP          DROP     .        Prevent multiple expansion
&BXA_DC_LASTLAB    DC       .        Original label of last labeled DC
&BXA_DC_OFFSET     DC       .        Nr of unlabeled DCs after LASTLAB
&BXA_DCOVR         DCOVR    DC       Nr of valid entries in DCOVR_xxx
&BXA_DCOVR_LAB     DCOVR    DC       Labels of DCOVR entries
&BXA_DCOVR_PRM     DCOVR    DC       Parm strings for DCOVR entries
&BXA_DCOVR_NAM     DCOVR    DC       New names (DCOVR *NEWNAME entries)
&BXA_DS_LASTLAB    DS       .        Original label of last labeled DS
&BXA_DS_OFFSET     DS       .        Nr of unlabeled DS-s after LASTLAB
&BXA_DSOVR         DSOVR    DS       Nr of valid entries in DSOVR_xxx
&BXA_DSOVR_LAB     DSOVR    DS       Labels of DSOVR entries
&BXA_DSOVR_PRM     DSOVR    DS       Parm strings for DSOVR entries
&BXA_DSOVR_NAM     DSOVR    DS       New names (DSOVR *NEWNAME entries)
&BXA_EJECTOVR      EJECTOVR EJECT    Ptr to first and last valid in ...
&BXA_EJECTOVR_OPT  EJECTOVR EJECT    Stack of override options
&BXA_ENTRY         PGM      RETRN    Entry parameter of PGM q.v.
.                  .        EXSR
&BXA_EQUOVR        EQUOVR   EQU      Nr of valid entries in EQUOVR_xxx
&BXA_EQUOVR_LAB    EQUOVR   EQU      Labels of EQUOVR entries
&BXA_EQUOVR_LEN    EQUOVR   EQU      Lengths of EQUOVR entries
&BXA_EQUOVR_LOC    EQUOVR   EQU      Locations of EQUOVR for bitfields
&BXA_EQUOVR_TYP    EQUOVR   EQU      Types of EQUOVR entries
&BXA_EQUOVR_VAL    EQUOVR   EQU      Values of EQUOVR entries
&BXA_EXQ_I         EXQ      LTORG    Define instructions for EXecute
&BXA_EXQ_LAST      LTORG    .        Pointer to last expanded EXQ-instr
&BXA_EXQ_OPS       EXQ      LTORG    Define operands for BXA_EXQ_I
&BXA_EXSR          EXSR     .        Prevent multiple expansion
&BXA_EXTRNOVR      EXTRNOVR EXTRN    Nr of valid entries EXTRNOVR_xxx
&BXA_EXTRNOVR_LAB  EXTRNOVR EXTRN    EXTRNs to be overridden
&BXA_EXTRNOVR_NAM  EXTRNOVR EXTRN    New name or *SUPPRESS for EXTRN
&BXA_MAC_xxxxxxxx  xxxxxxxx .        Prevent multiple expansion
&BXA_MAPS_LST      GENMAPS  .        List-option on highest level
&BXA_NEST_fldname  NESTCB   CPY      Control block defined in field
&BXA_NUMVAL        CHKDIG   CLEAR    A-value of operand, if valid
.                  .        ENDSR
.                  .        PGM
.                  CHKREG   USE      Register number plus 1, if valid
.                  .        USING
&BXA_PGM           PGM      EXSR     Prevent multiple expansion
&BXA_PGM_LABEL     PGM      BEGSR    Label used by PGM-expansion
&BXA_PGM_TITLE     PGM      MAPPRMLB Title for listing
&BXA_PRM(3)        SPLIT    .        Split string into parameters
.                  DISSECT  .
&BXA_RC            CHKMAP   MAP...   Returncode
&BXA_RD_ALG        RDATA    RLTORG   Define remote data alignment
&BXA_RD_ARG        RDATA    RLTORG   Define remote data arguments
&BXA_RD_KEY        RDATA    RLTORG   Define remote data keywords
&BXA_RD_LAB        RDATA    RLTORG   Define remote data labels
&BXA_RD_NDX        RDATA    RLTORG   Define remote data indexes
&BXA_RD_OPC        RDATA    RLTORG   Define remote data opcodes
&BXA_RD_RETVAL     RDATA    RLTORG   RD_MODE=COND: label of dup. data
&BXA_RD_VAL        RDATA    RLTORG   Define remote data keyword values
&BXA_REGN_...      EQU      .        Register numbers
&BXA_REGT_...      EQU      .        Register types
&BXA_RETRN_LBL     RETRN    END      Labels for out-of-line routine
&BXA_RETRN_RC      RETRN    END      Returncodes
&BXA_RETRN_RP      RETRN    END      Return pointers
&BXA_RETRN_RS      RETRN    END      Reasoncodes
&BXA_RETRN_WA      RETRN    END      WORKAREA=FREE/NOFREE
&BXA_SAVES         PGM      END      Nr of internal save-areas
&BXA_SETMODE       SETMODE  .        Prevent multiple expansion
&BXA_SETMODE_SAVE  SETMODE  .        Register with saved PSW key
&BXA_SHOWALL       PGM      PGM      Do not suppress any listing lines
.                  .        GENMAPS  Do not suppress any listing lines
&BXA_SR_CALLER     EXSR     END      Array of calling subr-names
&BXA_SR_CALLED     EXSR     END      Array of called subr-names
&BXA_SRDNAM        BEGSR    END      Array of defined subroutines
&BXA_SRDDUP        BEGSR    END      Array of 'multiply defined' indic.
&BXA_SRDTYP        BEGSR    EXSR     Array of defined subroutine types
.                  .        ENDSR
&BXA_SRNAML        BEGSR    END      Max length of subroutine name
.                  EXSR
&BXA_SRUASC        EXSR     BEGSR    Array of used subroutines ASCmode
&BXA_SRUCT         EXSR     END      Array of subr invocation count
&BXA_SRUNAM        EXSR     END      Array of used subroutines
&BXA_SRUSVC        EXSR     BEGSR    Array of used subroutines SVCmode
&BXA_STK           IF       ELSE     Ptr to last valid in &BXA_STK_...
.                  .        ENDIF
.                  CASE     ENDCASE
.                  DO       ENDDO
.                  LOOP     LEAVE
.                  .        PGM0
&BXA_STK_CND       DO       ENDDO    Stack of UNTIL condition/count reg
&BXA_STK_CLB       LOOP     ENDDO    Stack of UNTIL condition labels
&BXA_STK_DO        DO       ENDDO    Stack of DO labels
.                  .        LEAVE
&BXA_STK_OP        IF       ELSE     Stack of open structure opcodes
.                  CASE     ENDCASE
.                  DO       ENDIF
.                  .        LEAVE
&BXA_STK_LBL       IF       ELSE     Stack of labels to be generated
.                  CASE     ENDCASE   (End-of-block labels)
.                  DO       ENDIF
&BXA_STK_LVL       CASE     ENDCASE  Nesting levels
&BXA_STK_USE       DO       ENDDO    USEd register for loop counter
&BXA_SUBR          BEGSR    ENDSR    Current subroutine name or *MAIN
.                  PGM      EXSR
&BXA_SUBRTP        BEGSR    ENDSR    Type of current subroutine
.                  PGM      EXSR
&BXA_SVCMODE       PGM      SETMODE  On when in supervisor mode
&BXA_USE_DS        DCL      USE      Names of enclosing DSECTs
&BXA_USE_FLD       DCL      USE      Names of DeCLared complex fields
&BXA_USE_LBL       DCL      USE      Labels for the dependent USINGs
&BXA_USE_R12       PGM      BEGSR    Label for USING R12
&BXA_USE_SDS       DCL      USE      Names of enclosed DSECTs
&BXA_USEC_ROUT     USE      BEGSR    Routine names for USE SCOPE=CALLED
&BXA_USEC_ARGL     USE      BEGSR    Labels on USE SCOPE=CALLED
&BXA_USEC_ARG1     USE      BEGSR    Control-block on USE SCOPE=CALLED
&BXA_USEC_ARG2     USE      BEGSR    Base on USE SCOPE=CALLED
&BXA_USED_REGS     USING    .        Registers available/unavailable
.                  USE
&BXA_USEFLD        USING    DROP     Fields used with &BXA_USELBL
.                  PUSH     POP
&BXA_USENDX        USING    DROP     Current valid in &BXA_USENDX0
.                  PUSH     POP        and &BXA_USENDX1
&BXA_USENDX0       USING    DROP     Stack of low indexes for
.                  PUSH     POP         &BXA_USELBL and &BXA_USEREG
&BXA_USENDX1       USING    DROP     Stack of high indexes for
.                  PUSH     POP         &BXA_USELBL and &BXA_USEREG
&BXA_USELBL        USING    DROP     Labels of ordinary usings
.                  PUSH     POP
&BXA_USEREG        USING    DROP     Registers used with &BXA_USELBL
.                  PUSH     POP
&BXA_WALAB         PGM      BEGSR    Using label for obtained storage
&BXA_WALEN         PGM      RETRN    Length of obtained storage
&BXA_WORKPTR(3)    PGM      RETRN    Pointer to obtained storage
&IEC024I           MAP$AMQS .        Prototype message text
------------------ -------- -------- ----------------------------------
&SP_DBG            SYSPARM  DBG      On if debugging requested
.                  .        END
.                  .        GENMAPS
.                  .        MAP$DBG
&SP_LICENSE        SYSPARM  CHKLIC   License name
&SP_LICSTAT        SYSPARM  CHKLIC   License status
&SP_LICOK          SYSPARM  --       On if valid license accespted
&SP_OPT            SYSPARM  PGM      On if optimization requested
&SP_SHOWALL        SYSPARM  PGM      On if nothing to be suppressed
.                  .        END
.                  .        GENMAPS
.                  .        LTORG
&SP_SRLIST         SYSPARM  END      On if subroutine listing requested
&SP_SRXREF         SYSPARM  END      On for subroutine cross-reference
=======================================================================
The following control blocks are available for DCL

Control block name Mapmacro Description
------------------ -------- -------------------------------------------
                   MAPBITS  BIT equateS
                   MAPEQU   EQUates of registers, bits, and masks
                   MAPLMASM Latch Management equates for ASseMbler
                   MAPREGS  REGister equateS
ABEP               MAPABEP  ABend Exit Parameter list
ACB                MAPACB   Access Control Block
ACEE               MAPACEE  ACcessor Environment Element
ACT                MAPJCT   Accounting Control Table
ADSR               MAPADSR  Symptom Record sections 1 and 2
ADSRCMPS           MAPADSR  Symptom Record section 2.1
ADSRDBST           MAPADSR  Symptom Record primary symptom string
ADSRROSD           MAPADSR  Symptom Record secondary symptom string
ADSR5ST            MAPADSR  Symptom Record section 5
ADYENF             MAPADYEN DAE Event NotiFication parameter list
AE                 MAPAE    VSM Allocated Element
ASCB               MAPASCB  Address Space Control Block
ASEO               MAPASEO  Address Space crEation Output area
ASMPOOLS           MAPASMVT ASM cell POOL controller
ASMVT              MAPASMVT Auxiliary Storage Manager Vector Table
ASSB               MAPASSB  Address Space Secondary Block
ASVT               MAPASVT  Address Space Vector Table
ASXB               MAPASXB  Address Space eXtension Block
BASEA              MAPBASEA Master Scheduler Resident Data Area
BASEX              MAPBASEA Master Scheduler Resident Data Area eXtens.
BDW                MAPDCB   Block Descriptor Word
BXASAVE            MAPSAVE  Extended SAVE area
CAMLOC             MAPCAM   CAMlst LOCate results
CAMLOCVOL          MAPCAM   CAMlst LOCate VOLume entry
CAMLST             MAPCAM   CAMLST parameter list
CDE                MAPCDE   Contents Directory Entry
CIBHDR             MAPCIB   Command Input Buffer HeaDeR
CIBX               MAPCIB   Command Input Buffer eXtension
COM                MAPCOM   COMmunication area
CQE                MAPCQE   Console Queue Element
CSCB               MAPCSCB  Command Scheduling Control Block
CSCX               MAPCSCB  Command Scheduling Control block eXtension
CVT                MAPCVT   Communications Vector Table
CVTFIX             MAPCVT   Communications Vector Table preFIX
CVTVSTGX           MAPCVT   CVT Virtual SToraGe eXtension
CVTXTNT1           MAPCVT   CVT os-os/vs common eXTension
CVTXTNT2           MAPCVT   CVT os/vs1-os/vs2 common eXTension
DCB                MAPDCB   Data Control Block
DCBE               MAPDCBE  Data Control Block Extension
DDRCOM             MAPDDRCO IOS Dynamic Device Reconfiguration         *
                                COMmunication area
DECB               MAPDECB  Data Event Control Block
DESB               MAPDES   DirEntry Services Buffer header
DESD               MAPDES   DirEntry Services member Data descriptor
DESL               MAPDES   DirEntry Services name List
DESN               MAPDES   DirEntry Services Name record
DESP               MAPDES   DirEntry Services Parmlist
DESR               MAPDES   DirEntry Services Reason codes
DESRCS             MAPDES   DirEntry Services Return CodeS
DESX               MAPDES   DirEntry Services eXit plist
DOCNTFLD           MAPDOTU  Dynamic Output length/parameter FieLD
DOCNTLST           MAPDOTU  Dynamic Output LiST of text unit pointers
DOCNUNIT           MAPDOTU  Dynamic Output text UNIT
DSAB               MAPDSAB  Data Set Association Block
DSABANMI           MAPDSAB  DSAB Alternate NaMe Information block
DSABQDB            MAPDSABQ DSAB Queue Descriptor Block
DSCB1              MAPDSCB1 Data Set Control Block - format 1
DSCB2              MAPDSCB2 Data Set Control Block - format 2
DSCB3              MAPDSCB3 Data Set Control Block - format 3
DSCB4              MAPDSCB4 Data Set Control Block - format 4
DSCB5              MAPDSCB5 Data Set Control Block - format 5
DST                MAPDES   Direntry Services Screen Table
ECB                MAPECB   Event Control Block
ECBE               MAPECB   Event Control Block Extension
ECVT               MAPECVT  Extended Communications Vector Table
EMDSECT1           MAPS99   Dynalloc parameter list to IEFDB476
EMDSECT2           MAPS99   Dynalloc message buffer area
EMDSECT3           MAPS99   Dynalloc message buffer area array
EPAL               MAPEPAL  External Parameter Area for Locate SWA mgr
EPAX               MAPEPAL  eXtended EPAL
EVNT               MAPEVNT  EVeNTs control block
EVNTENTRY          MAPEVNT  EVeNTs table ENTRY
FRRPL              MAPFRRPL Function Recovery Routine Parameter area
FRRS               MAPFRRS  Function Recovery Routine Stack
FRRSENTR           MAPFRRS  FRR ENTRy
FRRSXENT           MAPFRRS  FRR ENTry eXtension
FRRSXSTK           MAPFRRS  FRR STacK eXtension
GVT                MAPGVT   GRS Vector Table
GVTX               MAPGVTX  GRS Vector Table eXtension
IHSA               MAPIHSA  Interrupt Handler Save Area
IOB                MAPIOB   Input/Output Block
IOQ                MAPIOQ   IOS Queue element
IOQE               MAPIOQ   IOS Queue element Extension
IOSB               MAPIOSB  I/O Supervisor Block
IOSX               MAPIOSX  I/O Supervisor block eXtension
JCT                MAPJCT   Job Control Table
JCTX               MAPJCTX  Job Control Table eXtension
JESCT              MAPJESCT JES Communication Table
JESMNTBL           MAPJESCT JES MouNTaBLe device class table
JESPEXT            MAPJESCT JESCT Pageable EXTension
JFCB               MAPJFCB  Job File Control Block
JFCBE              MAPJFCBE Job File Control Block Extension for 3800
JFCBX              MAPJFCBX Job File Control Block eXtension
JSCB               MAPJSCB  Job Step Control BLock
LCT                MAPLCT   Linkage Control Table
LDA                MAPLDA   VSM Local Data Area
LLE                MAPLLE   Load List Element
LPDE               MAPLPDE  Link Pack Directory Entry
NTCRPL             MAPIEANT Named Token CReate Parameter List
NTDLPL             MAPIEANT Named Token DeLete Parameter List
NTRTPL             MAPIEANT Named Token ReTrieve Parameter List
OC24               MAPOCPL  Open/Close parameter list (24-bit mode)
OC31               MAPOCPL  Open/Close parameter list (31-bit mode)
ORE                MAPORE   Operator Reply Element
OUCB               MAPOUCB  ResOurces manager User Control Block
PCCA               MAPPCCA  Physical Configuration Communication Area
PCCAVT             MAPPCCAV PCCA Vector Table
PDAB               MAPPDAB  Parallel Data Access Block
PDS                MAPPDS   Partitioned DataSet directory entry
PDS2               MAPPDS   Partitioned DataSet (extended) direntry
PEL                MAPPEL   Parameter Element List (ENQ/DEQ/RESERVE)
PMAR               MAPPMAP  Program Management Attribute Record
PMARA              MAPPMAP  PMAR - load module extension
PMARL              MAPPMAP  PMAR - program object extension
PMARR              MAPPMAP  PMAR - internal extension
PRB                MAPPRB   Program Request Block
PRM_LIST_BUFFER    MAPPRMLB PaRMlib services LIST BUFFER
PRM_MESSAGE_BUFFER MAPPRMLB PaRMlib services MESSAGE BUFFER
PRM_READ_BUFFER    MAPPRMLB PaRMlib services BUFFER for member READ
PSA                MAPPSA   Prefixed Storage Area
PSL                MAPPSL   Page Service List entry
PVT                MAPPVT   RSM Page Vector Table
PVTEXT             MAPPVT   RSM Page Vector Table EXTension
PVTVVTAB           MAPPVT   RSM Page Vector VDAC TABle
QCB                MAPQCB   GRS Queue Control Block
QEL                MAPQEL   GRS Queue ELement
QHT                MAPQHT   GRS Queue Hash Table header
QHTENT             MAPQHT   GRS Queue Hash Table ENTry
RB                 MAPRB    Request Block
RCTD               MAPRCTD  Region Control Task Data area
RDW                MAPDCB   Record Descriptor Word
RMCT               MAPRMCT  System Resources Manager Control Table
RMPL               MAPRMPL  Resource Manager Parameter List
RMPLPT             MAPRMPL  PoinTer to RMPL
RMPLP2             MAPRMPL  Pointer to userparm for resmgr routine
RPL                MAPRPL   Request Parameter List
RPL6               MAPRPL   RPL extension for LU 6.2
RQE                MAPRQE   EXCP Request Queue Element
RTMW               MAPRT1W  RTM1 save/Work area
RT1TRACK           MAPRT1W  RTM1 TRACKing area
RT1TRECC           MAPRT1W  RTM1 RECursion Control data
RT1W               MAPRT1W  RTM1 Work area
SAVEAREA           MAPSAVE  Standard SAVE AREA
SCCB               MAPSCCB  Service Call Control Block
SCCBCP             MAPSCCB  SCCB CPu information entry
SCCBHSA            MAPSCCB  SCCB HSA information entry
SCCBMPF            MAPSCCB  SCCB MPF information entry
SCT                MAPSCT   Step Control Table
SCTX               MAPSCTX  Step Control Table eXtension
SCVT               MAPSCVT  Secondary Communications Vector Table
SCW                MAPDCB   Segment Control Word
SDW                MAPDCB   Segment Descriptor Word
SDWA               MAPSDWA  System Diagnostic Work Area
SDWANRC1           MAPSDWA  SDWA Non-ReCordable extension 1
SDWANRC2           MAPSDWA  SDWA Non-ReCordable extension 2
SDWANRC3           MAPSDWA  SDWA Non-ReCordable extension 3
SDWAPTRS           MAPSDWA  SDWA PoinTeRS extension block
SDWARC1            MAPSDWA  SDWA ReCordable extension 1
SDWARC2            MAPSDWA  SDWA ReCordable extension 2
SDWARC3            MAPSDWA  SDWA ReCordable extension 3
SIOT               MAPSIOT  Step Input/Output Table
SMCA               MAPSMCA  SMf Control tAble
SMDE               MAPSMDA  System Managed Directory Entry basic sect.
SMDE_FD            MAPSMDA  SMDE hfs File Descriptor section
SMDE_NAME          MAPSMDA  SMDE NAME section
SMDE_NLST          MAPSMDA  SMDE NoteLiST section
SMDE_PNAME         MAPSMDA  SMDE Primary NAME section
SMDE_TOKEN         MAPSMDA  SMDE TOKEN section
SNAPDLIST          MAPSNAP  SNAP Dataspace LIST entry
SNAPHLIST          MAPSNAP  SNAP Header LIST entry
SNAPLIST           MAPSNAP  SNAP storage LIST entry
SRB                MAPSRB   Service Request Block
SSDR               MAPSSDR  SSOB ext.for Dynamic device Reconfiguration
SSL                MAPSSL   Short page Service List
SSOB               MAPSSOB  SubSystem Options Block
SSRB               MAPSSRB  Suspended Service Request Block
STCB               MAPSTCB  Seconary Task Control Block
SVCENTRY           MAPSVCE  SVC table ENTRY
SVCURT             MAPSVCE  SVC Update Recording Table entry
SVRB               MAPSVRB  SuperVisor Request Block
SVT                MAPSVT   Supervisor Vector Table
SWAREQPL           MAPEPAL  SWAREQ Parameter List
S99RB              MAPS99   Dynalloc Request Block
S99RBP             MAPS99   Dynalloc Request Block Pointer
S99RBX             MAPS99   Dynalloc Request Block eXtension
S99TUFLD           MAPS99   Dynalloc request Text Unit FieLD
S99TUNIT           MAPS99   Dynalloc request Text UNIT
S99TUPL            MAPS99   Dynalloc request Text Unit Pointer List
TAXE               MAPTAXE  TSO Terminal Attention eXit Element
TCB                MAPTCB   Task Control Block
TCBFIX             MAPTCB   TCB preFIX
TCBXTNT2           MAPTCB   TCB eXTension
TCCW               MAPTCCW  EXCP Translation Control Block
TCT                MAPTCT   SMF Timing Control Table
TIOENTRY           MAPTIOT  Task I/O Table Entry
TIOTHDR            MAPTIOT  Task I/O Table header
TIOTPOOL           MAPTIOT  Task I/O Table Pool entry
TQE                MAPTQE   Timer Queue Element
TTRN               MAPPDS   Track, Record, iNdicator field
TTRX               MAPPDS   Track, Record, available field
UCB                MAPUCB   Unit Control Block
UCBOCR             MAPUCB   UCB extension - Optical Character Reader
UCBPDCTA           MAPUCB   UCB extension - Channel to channel Adapter
UCBUCS             MAPUCB   UCB extension - Universal Character Set
UCB3540X           MAPUCB   UCB extension - 3540
UCB3800X           MAPUCB   UCB extension - 3800 printer
UCM                MAPUCM   Unit Controle Module definition
UCMEFEXT           MAPUCM   UCM individual device Entry Fixed EXTension
UCMEIL             MAPUCM   UCM Event Indication List
UCMEPEXT           MAPUCM   UCM indiv. device Entry Pageable EXTension
UCMFEXTA           MAPUCM   UCM Fixed EXTension bAse
UCMFSAVE           MAPUCM   UCM Fixed extension SAVE area
UCMLIST            MAPUCM   UCM List of individual device entries
UCMPEXTA           MAPUCM   UCM Pageable EXTension bAse
UCMPRFX            MAPUCM   UCM MCS PReFiX area
UCM2EXT            MAPUCM   UCM OS/VS2 EXTension
VRA                MAPVRA   Variable Recording Area in SDWA
VSL                MAPVSL   Virtual Subarea List entry
WQE                MAPWQE   WTO Queue Element
WQEMAJ             MAPWQE   Major WQE
WQEMIN             MAPWQE   Minor WQE
WQESYAR            MAPWQE   WQE saved SYstem id-ARray
WTOPL              MAPWTOPL Write To Operator Parameter List
XSB                MAPXSB   eXtended Status Block
XSRB               MAPSRB   eXtended Service Request Block
./ ADD NAME=$INDEX   0100-20096-20096-0111-00306-00306-00000-BIXSMAC 30
*
* The macros in this maclib are divided into the
* following categories:
* - Structrured programming
* - Register management
* - Data definitions, overrides and their usage
* - Extended branching
* - Other instruction set extensions
* - Various
* - Mappings and overrides
*

*
*** Structured programming
*
BEGSR     BEGin SubRoutine (start of subroutine definition)
CASE      Multi-branch if statement
DO        Start of a loop
ELSE      ELSE for an IF-THEN-ELSE-ENDIF construct
END       END of program, generates subroutine cross reference
ENDCASE   End of a case construct
ENDDO     End of a DO loop
ENDIF     End of an IF-THEN-ELSE-EDIF construct
ENDSR     End of a subroutine definition
EXSR      EXecute SubRoutine (subroutine invocation)
EXSR0     (helper macro for EXSR)
GLUE      Call module in a different Amode/Rmode
GOTO      Branch with IF-like condition coded as parameters
IF$       (helper macro for IF/CASE/DO)
IF$ALC    (helper macro for IF/CASE/DO)
IF$LS     (helper macro for IF/CASE/DO)
IF$LU     (helper macro for IF/CASE/DO)
IF        Start of IF-THEN-ELSE-ENDIF construct
LEAVE     Exit from IF/CASE/LOOP construct
LOOP      Repeat DO-ENDDO loop
PGM       ProGraM start
PGM0      (helper macro with PGM)
RETRN     RETuRN from subroutine

*
*** Register management
*
DROP      Replaces DROP statement
DROP0     (helper macro with DROP)
EQUREG    Allocate available register using EQU
USE       Declare register usage
USEDREGS  Show overview of registers in use
USING     Replaces USING statement

*
*** Data defintions, overrides and their usage
*
DC        Replaces DC statement
DCL       DeCLare a field, bit, or register
DCOVR     Define an OVerRide for a later DC statement
CPY       CoPY a field, register, etc. intelligently
DEC       DECrement field or register
DS        Replaces DS statement
DSOVR     Define an OVerRide for a later DS statement
EQU       Replaces EQU statement
EQUOVR    Define an OVerRide for a later EQU statement
EXTRN     Replaces EXTRN statement
EXTRNOVR  Define an OVerRide for a later EXTRN statement
GEN       Generate a replaced machine instruction
GENMAPS   GENerate MAP definitionS
INC       INCrement a field or register
LABEL     Define a Label
LTORG     Replaces LTORG statement
NESTCB    Define a NESTed Control Block
RDATA     Remote DATA definition
RLTORG    Remote LTORG
RWTO      Remote WTO
SET       Set a coded-value field to a specific value
SETOF     Turn off a named bit
SETON     Turn on a named bit
TRTAB     Define TRT table data

*
*** Extended branching
*
BALC      BAL Conditionally
BALE      BAL on Equal
BALH      BAL on High
BALL      BAL on Low
BALM      BAL on Mixed/Minus
BALNE     BAL on Not Equal
BALNH     BAL on Not High
BALNL     BAL on Not Low
BALNM     BAL on Not Mixed/Minus
BALNO     BAL on Not Ones/Overflow
BALNP     BAL on Not Plus
BALNZ     BAL on Not Zero
BALO      BAL on Ones/Overflow
BALP      BAL on Plus
BALZ      BAL on Zero
BASC      BAS Conditionally
BASE      BAS on Equal
BASH      BAS on High
BASL      BAS on Low
BASM      BAS on Mixed/Minus
BASNE     BAS on Not Equal
BASNH     BAS on Not High
BASNL     BAS on Not Low
BASNM     BAS on Not Mixed/Minus
BASNO     BAS on Not Ones/Overflow
BASNP     BAS on Not Plus
BASNZ     BAS on Not Zero
BASO      BAS on Ones/Overflow
BASP      BAS on Plus
BASZ      BAS on Zero
BHE       Branch on High or Equal
BHER      Branch on High or Equal Register
BLE       Branch on Low or Equal
BLER      Branch on Low or Equal Register
BLH       Branch on Low or High
BLHR      Branch on Low or High Register
BNHE      Branch on Not High or Equal
BNHER     Branch on Not High or Equal Register
BNLE      Branch on Not Low or Equal
BNLER     Branch on Not Low or Equal Register
BNLH      Branch on Not Low or High
BNLHR     Branch on Not Low or High Register

*
*** Other instruction set extensions
*
EPSW      Extract PSW (for machines not having the instruction)
EXCLC     EXecute CLC
EXMVC     EXecute MVC
EXQ       EXeQute instruction
EXSVC     EXecute SVC
EXTR      EXecute TR
EXTRT     EXecute TRT
EXXC      EXecute XC
IPK       Replaces IPK instruction
LA        Replaces LA instruction
LC        Load Character (for machines not having the instruction)
LR        Replaces LR instruction
LT        Load and Test (for machines not having the instruction)
LTA24     Load and Test 24-bit address
LTC       Load and Test Character (for machines not having the instruction)
LTH       Load and Test Halfword (for machines not having the instruction)
LTHU      Load and Test Halfword Unsigned (for machines not having the instructi
MVPL      MoVe ParmList
STA24     STore 24-bit address
TRT       Replaces TRT instruction

*
*** Various
*
ABND     Branch to routine that issues abend (ABNDPGM)
ABNDPGM  Generates an out-of-line routine that abends the program
BXAEPSW  Extract PSW
CHKLIC   Check license (assembly-time)
CHKLIT   Check whether argument is a valid numeric literal
CHKMAP   Check parameters entered on a MAPxxx macro
CHKNUM   Check whether argument is a valid number
CHKREG   Check whether argument is a valid register
CLEAR    Clear an area of storage or a register
CMDTXT   Define a command-text for use with MGCRE
DBG      Debugging logic
DISSECT  Dissect a parameter into its constituent parts
EJECT    Replaces EJECT statement
EJECTOVR Manage overrides for EJECT
NTCR     Create a name/token pair
NTDL     Delete a name/token pair
NTRT     Retrieve a name/token pair
OPSYNS   Generate OPSYN statements for a list of instructions
POP      Replaces POP statement
PUSH     Replaces PUSH statement
SETMODE  Call SETMODE function
SETMODE0 Define internal subroutine for SETMODE
SNAPHDR  Define header-text for use with STRHDR operand of SNAP
SNAPNTRY Define entries in the STORAGE and STRHDR lists of SNAP
         --> SNAPNTRY is intended for use with BXADBG00 only
SPACE    Replaces SPACE statement
SPLIT    Split a parameter string in its constituent parts
SYSPARM  Analyze SYSPARM content

*
*** Mappings and overrides
*
MAPABEP
MAPACB
MAPACEE
MAPADSR
MAPADYEN
MAPAE
MAPASCB
MAPASEO
MAPASMVT
MAPASSB
MAPASVT
MAPASXB
MAPBASEA
MAPBITS
MAPCAM
MAPCDE
MAPCIB
MAPCOM
MAPCQE
MAPCSCB
MAPCVT
MAPDCB
MAPDCBE
MAPDDRCO
MAPDEB
MAPDECB
MAPDES
MAPDFA
MAPDOTU
MAPDSAB
MAPDSABQ
MAPDSCB
MAPDSCB1
MAPDSCB2
MAPDSCB3
MAPDSCB4
MAPDSCB5
MAPECB
MAPECVT
MAPEPAL
MAPEQU
MAPEVNT
MAPFRRPL
MAPFRRS
MAPGVT
MAPGVTX
MAPIEANT
MAPIECEQ
MAPIHSA
MAPIOB
MAPIOQ
MAPIOSB
MAPJCT
MAPJCTX
MAPJESCT
MAPJFCB
MAPJFCBE
MAPJFCBX
MAPJSCB
MAPLCT
MAPLDA
MAPLLE
MAPLMASM
MAPLPDE
MAPOCPL
MAPORE
MAPOUCB
MAPPCCA
MAPPCCAV
MAPPDAB
MAPPDS
MAPPEL
MAPPMAR
MAPPRB
MAPPRMLB
MAPPSA
MAPPSL
MAPPVT
MAPQCB
MAPQEL
MAPQHT
MAPQMIDS
MAPRB
MAPRCTD
MAPREGS
MAPRMCT
MAPRMPL
MAPRPL
MAPRQE
MAPRT1W
MAPS99
MAPSAVE
MAPSCCB
MAPSCT
MAPSCTX
MAPSCVT
MAPSDWA
MAPSIOT
MAPSMCA
MAPSMDE
MAPSNAP
MAPSRB
MAPSSDR
MAPSSL
MAPSSOB
MAPSSRB
MAPSTCB
MAPSVCE
MAPSVRB
MAPSVT
MAPSWAPX
MAPTAXE
MAPTCB
MAPTCCW
MAPTCT
MAPTIOT
MAPTQE
MAPUCB
MAPUCM
MAPVRA
MAPVSL
MAPWQE
MAPWTOPL
MAPXSB
./ ADD NAME=$README  0100-20096-20096-0111-00091-00091-00000-BIXSMAC 30
.*
.* This maclib is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This maclib is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This maclib can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
.*
.* How to get started
.*
.* this maclib constitutes a programming environment. It's most
.* important elements are teh structured programming macros.
.* You should start your program with the PGM macro, it builds the
.* environment that all the other macros need to function properly.
.* To indicate you agree with the license conditions, you have to
.* include in your sysparm (on the assembler invocation)
.*   LICENSE=GPL2.0,LICSTAT=IAGREE
.* in addition to any other assembly-time parms you may want to pass.
.*
.* Use The PGM macro is paired with the END macro, which not only
.* ends your program and assembly, but also produces a cross reference
.* of all subroutine invocations.
.*
.* Subroutines are defined using the BEGSR / ENDSR macros
.* and invoked using the EXSR macro.
.* This is an RPG-like style. If you prefer another style,
.* you should change or encapsulate the macros according to your taste.
.*
.* The DCL macro allows you to declare bit fields explicitly.
.* It also supports coded-value fields.
.* Use the SETON/SETOF macros to turn bit field on/off using only
.* the name of the bit. The byte location of the bit need not be
.* mentioned explicitly.
.* Use the SET macro to set a code by its value name.
.* Again, the location of the value field need not be specified
.* DCL can also be used to embed control blocks in a nested structure
.*
.* If you want the named-bit and named-value facilities for fields
.* defined in a macro external to the BXA environment (e.g. IBM-supplied)
.* macros, the use the DCOVR/DSOVR macros. Examples are in the MAPxxxxx
.* macros supplied in this librarry.
.*
.* Another feature of the Bixoft eXtended Assembly language is its
.* support for dynamically (at assembly-time, that is) allocating
.* registers. You can use the EQUREG macro to have an available
.* register assigned. You can indicate whether you need a single reg
.* or a register pair. The macro uses info from prior USING/DROP
.* and POP/PUSH invocations to determine which register(s) are eligible
.* You can use the USE macro to declare a register in use, even when
.* it is not addressing any specific area in your program.
.*
.* Every macro has a short commentary section explaining its purpose
.* and the syntactical details of how to invoke the macro.
.*
.* The library can be used with any assembler product:
.* HLASM, Dignus, Tachyon, z390
.*
.* I hope you'll enjoy this library and wish you happy programming.
./ ADD NAME=$WISHES  0100-20096-20096-0111-00028-00028-00000-BIXSMAC 30
*
* Wish list for asmplus maclib
* -           Add License terms to each member
* -           Add License=BXAPL/GPL and IAGREE=YES as req'd parms
* -           Change type 'g' for GPR to 'r' for Register (Right half)
* -           Add type 'l' for Register (Left half)
* -           Add type 'g' for Register (Grande)
* -           Support for SHOWALL option should be removed from
*               all macros and inserted into SPACE/EJECT/TITLE etc.
* - CLEAR     Allow other types of operands
* - DEC       Allow other types of operands
* - EPSW      Not (yet) compatible with EPSW instruction
* -           --> rename BXAEPSW to EPSW and allow 2nd operand!
* -           --> remove the BXAEPSW macro (temporary solution)
* - EQU       Generate instruction labels as follows:
         DS    0H
&LABEL   EQU   *,2,C'I'
* - INC       Allow other types of operands
* - MAPREGS   Change type 'g' to type 'r'
*             --> All other macros must change accordingly
*             --> See EQU macro for other registertypes to add
* - MAPREGS   Add equates for 64-bit registers type 'g'
* - MAPxxxxx  Make overrides dependent upon current OS level
* - MAPxxxxx  Some mapping macros still have a different structure
* - RDATA     use locator name in stead of RLTORG macro
* - RLTORG    discard after changing RDATA to use locator name
*
*
./ ADD NAME=ABND     0100-20096-20096-0111-00313-00313-00000-BIXSMAC 30
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro forces an abend by branching to the predetermined
.* entry point of an Abend-routine.
.*
&LABEL   ABND  &COND,                  * Condition for abending        *
               &ABEND,                 * Label of BXABEND routine      *
               &FAIL=R14,              * Reg for failed address        *
               &TSTREG=,               * Registers for LTR-instruction *
               &RCD=                   * 1 or 2 registers or IGNORE
.*
.* &COND can be one of the following:
.*       - SETDFT: spedifies abend entry point, generates no code
.*       - TSTRC : abend-routine will be taken if R15<>0
.*       - E     : abend-routine will be taken on cond.code = E
.*       - H     : abend-routine will be taken on cond.code = H
.*       - L     : abend-routine will be taken on cond.code = L
.*       - M     : abend-routine will be taken on cond.code = M
.*       - O     : abend-routine will be taken on cond.code = O
.*       - P     : abend-routine will be taken on cond.code = P
.*       - Z     : abend-routine will be taken on cond.code = Z
.*       - NE    : abend-routine will be taken on cond.code = NE
.*       - NH    : abend-routine will be taken on cond.code = NH
.*       - NL    : abend-routine will be taken on cond.code = NL
.*       - NM    : abend-routine will be taken on cond.code = NM
.*       - NO    : abend-routine will be taken on cond.code = NO
.*       - NP    : abend-routine will be taken on cond.code = NP
.*       - NZ    : abend-routine will be taken on cond.code = NZ
.* &LABEL specifies label of abend routine. If not specified the
.*        default supplied with TYPE=SETDFT will be used.
.* &FAIL  specifies the register that passes the reasoncode for
.*        the abend, usually the failing address. If not specified
.*        defaults to R14.
.* &TSTREG specifies a a register or a set of two registers,
.*        to be used in an LTR instruction. The resulting condition
.*        code will be tested as specified in the COND parameter.
.* &RCD   valid only with TSTRC. Specifies 1 or 2 registers or IGNORE.
.*        If IGNORE is specified, the return- and reasoncodes will be
.*        lost before the abend is issued. If 1 register is specified
.*        it will be used to save the returncode, the reasoncode will
.*        be lost before the abend is issued. If two registers are
.*        specified, the first will contain the returncode, the
.*        reasoncode will be put into the second one before the abend
.*        is issued. Only registers 2-11 can be specified.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Retcode from CHKLIC
         CHKLIC ABND                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_ABND_DFT           * Default user-abend label
         GBLC  &BXA_ABND(50)           * Used targets
         GBLA  &BXA_NUMVAL             * Result from CHKREG
         LCLC  &_ABEND                 *
         LCLC  &_RCD1,&_RCD2           * RCD subparameters
         LCLA  &_RCD1N,&_RCD2N         * RCD subparameter reg.nrs
         LCLC  &_TSTREG1,&_TSTREG2     *
         LCLA  &I                      * Index into BXA_ABND
         LCLA  &_FAIL                  * Register number for FAIL=
         LCLC  &OPCD                   * Generated opcode mnemonic
.*
.* Check validity of first parameter: extended condition code
         AIF   ('&COND' EQ 'TSTRC').NOERR1
         AIF   ('&COND' EQ 'SETDFT').NOERR1
         AIF   (K'&COND EQ 0).NOERR1
         AIF   ('&COND' EQ 'E').NOERR1
         AIF   ('&COND' EQ 'H').NOERR1
         AIF   ('&COND' EQ 'L').NOERR1
         AIF   ('&COND' EQ 'M').NOERR1
         AIF   ('&COND' EQ 'O').NOERR1
         AIF   ('&COND' EQ 'P').NOERR1
         AIF   ('&COND' EQ 'Z').NOERR1
         AIF   ('&COND' EQ 'NE').NOERR1
         AIF   ('&COND' EQ 'NH').NOERR1
         AIF   ('&COND' EQ 'NL').NOERR1
         AIF   ('&COND' EQ 'NM').NOERR1
         AIF   ('&COND' EQ 'NO').NOERR1
         AIF   ('&COND' EQ 'NP').NOERR1
         AIF   ('&COND' EQ 'NZ').NOERR1
.ERR1    MNOTE 8,'Incorrect condition mnemonic in first parameter'
.NOERR1  ANOP
.*
.* Check validity of second parameter: label of BXABEND macro
         AIF   (K'&ABEND NE 0).NOERR2
.* ABEND-parm is empty: check if &LABEL can be defaulted
         AIF   ('&COND' EQ 'SETDFT').ERR2
         AIF   (K'&BXA_ABND_DFT NE 0).NOERR2
.ERR2    MNOTE 8,'Label of BXABEND-macro not specified on second parame*
               ter'
.NOERR2  ANOP  ,
.*
.* Check validity of FAIL= parameter: register for failing address
         AIF   (K'&FAIL EQ 0).NOERR3
         AIF   ('&FAIL'(1,1) EQ '(').ERR3A
         CHKREG &FAIL,g                * Valid general purpose reg?
         AIF   (&BXA_RC GT 4).ERR3B    * Invalid register
&_FAIL   SETA  &BXA_NUMVAL             * Set register number
         AIF   (&_FAIL EQ 15).ERR3C    * R15 is invalid
         AGO   .NOERR3
.ERR3A   MNOTE 8,'FAIL= must not specify a sublist'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'FAIL= must specify a valid general purpose register'
         AGO   .NOERR3
.ERR3C   MNOTE 8,'FAIL= must not specify register 15'
.NOERR3  ANOP
.*
.* Check validity of TSTREG parameter: registers for testing
         AIF   (K'&TSTREG EQ 0).NOERR4
         AIF   ('&TSTREG'(1,1) EQ '(').ERR4TST
&_TSTREG1 SETC '&TSTREG'               * Use the register specified
&_TSTREG2 SETC '&TSTREG'               * as source and destination
         AGO   .NOERR4A
.ERR4TST ANOP
         AIF   (N'&TSTREG EQ 0).ERR4A
&_TSTREG1 SETC '&TSTREG(1)'            * At least 1 reg in the list
&_TSTREG2 SETC '&TSTREG(1)'            * Use it for src and dest.
         AIF   (N'&TSTREG EQ 1).NOERR4A * 1 register: all done
&_TSTREG2 SETC '&TSTREG(2)'            * More than 1 reg: pick up 2nd
         AIF   (N'&TSTREG EQ 2).NOERR4A * 2 registers: all is well
.ERR4A   MNOTE 8,'TSTREG parameter must specify one or two registers'
         AGO   .NOERR4
.NOERR4A ANOP  ,
         CHKREG &_TSTREG1,g            * Valid register?
         AIF   (&BXA_RC GT 4).ERR4B
         AIF   ('&_TSTREG1' EQ '&_TSTREG2').NOERR4
         CHKREG &_TSTREG2,g            * Valid register?
         AIF   (&BXA_RC GT 4).ERR4C
         AGO   .NOERR4
.ERR4B   MNOTE 8,'&_TSTREG1 is not a valid general purpose register'
         AGO   .NOERR4
.ERR4C   MNOTE 8,'&_TSTREG2 is not a valid general purpose register'
.NOERR4  ANOP
.*
.* Check validity of COND=TSTRC parameter
         AIF   ('&COND' NE 'TSTRC').NOERR5
         AIF   (K'&TSTREG EQ 0).ERROR5B
.ERR5A   MNOTE 8,'TSTRC and TSTREG= both specified: invalid'
.ERROR5B ANOP
         AIF   ('&_FAIL' EQ '12').ERR5B
         AGO   .NOERR5
.ERR5B   MNOTE 8,'TSTRC cannot be combined with R12 for FAILed address'
.NOERR5  ANOP
.*
.* Check validity of COND=SETDFT parameter
         AIF   ('&COND' NE 'SETDFT').NOERR6
         AIF   (K'&TSTREG EQ 0).NOERR6
.ERR6    MNOTE 8,'SETDFT and TSTREG= both specified: invalid'
.NOERR6  ANOP
.*
.* Check validity of the RCD parameter
         AIF   (K'&RCD EQ 0 AND '&COND' NE 'TSTRC').NOERR7
         AIF   (K'&RCD EQ 0 AND '&COND' EQ 'TSTRC').ERR7A
         AIF   (K'&RCD NE 0 AND '&COND' NE 'TSTRC').ERR7B
         AIF   ('&RCD' EQ 'IGNORE').NOERR7
         AIF   ('&RCD'(1,1) EQ '(').ERR7LST
&_RCD1   SETC  '&RCD'
         AGO   .NOERR7E
.ERR7LST ANOP
         AIF   (N'&RCD EQ 0).ERR7C
&_RCD1   SETC  '&RCD(1)'
         AIF   (N'&RCD EQ 1).ERR7D
&_RCD2   SETC  '&RCD(2)'
         AIF   (N'&RCD GT 2).ERR7E
.NOERR7E ANOP
         CHKREG &_RCD1,g               * Valid register?
         AIF   (&BXA_RC GT 4).ERR7F    *
&_RCD1N  SETA  &BXA_NUMVAL             * Save register number
         AIF   (&_RCD1N LT 2).ERR7F    *
         AIF   (&_RCD1N GT 11).ERR7F   *
         AIF   ('&_RCD2' EQ '').NOERR7G *
         CHKREG &_RCD2,g               * Valid register?
         AIF   (&BXA_RC GT 4).ERR7G    *
&_RCD2N  SETA  &BXA_NUMVAL             * Save register number
         AIF   (&_RCD2N LT 2).ERR7G    *
         AIF   (&_RCD2N GT 11).ERR7G   *
.NOERR7G ANOP
         AIF   (&_RCD1N EQ &_RCD2N).ERR7H
         AGO   .NOERR7
.ERR7A   MNOTE 4,'RCD parameter defaults to IGNORE'
         AGO   .NOERR7
.ERR7B   MNOTE 4,'RCD parameter ignored, valid only for ABND TSTRC'
         AGO   .NOERR7
.ERR7C   MNOTE 4,'RCD parameter defaults to IGNORE: sublist is empty'
         AGO   .NOERR7
.ERR7D   MNOTE 8,'RCD sublist contains only 1 parameter'
         AGO   .NOERR7
.ERR7E   MNOTE 4,'RCD sublist contains more than 2 parameters; remainde*
               r ignored'
         AGO   .NOERR7
.ERR7F   MNOTE 8,'First RCD subparm specifies invalid reg. Use R2-R11'
         AGO   .NOERR7
.ERR7G   MNOTE 8,'Second RCD subparm specifies invalid reg. Use R2-R11'
         AGO   .NOERR7
.ERR7H   MNOTE 8,'First and second RCD subparms specify same register'
.NOERR7  ANOP
.*
.* Generate label
&LABEL   LABEL ,                       * User abend routine
.*
.* Handling of COND=SETDFT
         AIF   ('&COND' NE 'SETDFT').NODFT
&BXA_ABND_DFT SETC '&ABEND'
         MEXIT
.NODFT   ANOP
.*
.* Apply default if abend-label omitted
&_ABEND  SETC  '&BXA_ABND_DFT'
         AIF   (K'&ABEND EQ 0).USEDFT
&_ABEND  SETC  '&ABEND'
.USEDFT  ANOP
.*
.* Add &_ABEND to BXA_ABND table
&I       SETA  0
.LOOP1   ANOP
&I       SETA  &I+1                    * Point to next element
         AIF   (&I GT N'&BXA_ABND).LOOP1AD * Not in table: Add element
         AIF   ('&_ABEND' EQ '&BXA_ABND(&I)').LOOP1OK * Found: done
         AGO   .LOOP1                  * Go search remainder of table
.LOOP1AD ANOP  ,                       * &I points beyond last used elm
&BXA_ABND(&I) SETC '&_ABEND'           * Put label into next element
.LOOP1OK ANOP
.*
.* Generate code for COND=TSTRC
         AIF   ('&COND' NE 'TSTRC').NORC
         AIF   ('&_RCD1' EQ '').RCDIGNR
         LTR   &_RCD1,R15              * Test returncode & Save in reg
         AGO   .RCDTSTD
.RCDIGNR ANOP  ,                       * Returncode can be ignored
         LTR   R15,R15                 * Test returncode
.RCDTSTD ANOP  ,                       * Returncode has been tested
         BZ    _ABND&SYSNDX            * Retcd=0: skip abend
         AIF   ('&_RCD2' EQ '').RSNIGNR
         LR    &_RCD2,R0               * Copy reasoncode
.RSNIGNR ANOP
         L     R15,=AL4(&_ABEND)       * Retrieve ABEND-routine address
         BASR  &FAIL,R15               * And branch to it
_ABND&SYSNDX LABEL
         MEXIT
.NORC    ANOP
.*
.* Generate test for TSTREG=(reg1,reg2)
         AIF   (K'&TSTREG EQ 0).NOTEST
         LTR   &_TSTREG1,&_TSTREG2     * Test value (return value?)
.NOTEST  ANOP
.*
.* In-line code for generating a user abend
         AIF   (K'&COND EQ 0).BAS
&OPCD    SETC  'BAS&COND'              * Generate conditional BAS
         &OPCD &FAIL,&_ABEND,          * Conditional branch to abend   *
               TYPE=REMOTE             * which is a remote routine
         AGO   .MEND
.*
.BAS     ANOP
         L     R15,=AL4(&_ABEND)       * Retrieve ABEND-routine address
         BASR  &FAIL,R15               * And branch to it
.*
.MEND    MEND
./ ADD NAME=ABNDPGM  0100-20096-20096-0111-00148-00148-00000-BIXSMAC 30
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates an out-of-line routine that abends the program
.*   with a specified return code, normally the failing address
.* The generated routine will normally be called thru the ABND-macro.
.*
&LABEL   ABNDPGM &CODE=,               * User Abend code               *
               &REASON=R14             * Reasoncode (dft: reg 14)
.*
.* &CODE specifies the user abend code to generate on the ABEND macro.
.* &REASON specifies the register that contains the reason code,
.*         normally the failing address. When omitted defaults to R14.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Return code from CHKLIC
         CHKLIC ABNDPGM                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Define variables
         GBLC  &SYSASCE                * Current ASC environment
         GBLC  &BXA_SUBR               * Current subroutine name
         GBLC  &BXA_ABNDPGM(50)        * Usable targets
         GBLB  &SP_SHOWALL             * SYSPARM option
         LCLA  &I                      * Index into BXA_ABNDPGM
         LCLC  &SAV_ASCE               * Saved ASC environment value
.*
.* Check the LABEL parameter
         AIF   (K'&LABEL NE 0).NOERR0
.ERR0    MNOTE 8,'LABEL parameter not specified'
.NOERR0  ANOP
.*
.* Check the CODE parameter
         AIF   (K'&CODE NE 0).NOERR1
.ERR1    MNOTE 8,'CODE parameter not specified'
.NOERR1  ANOP
.*
.* Check the Subroutine name
         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR2
.ERR2    MNOTE 8,'ABNDPGM must not be issued within a subroutine'
.NOERR2  ANOP
.*
.* Check the reason parameter
         AIF   ('&REASON' EQ 'R15').ERR3
         AIF   ('&REASON' EQ 'RF').ERR3
         AIF   ('&REASON' EQ '15').ERR3
         AGO   .NOERR3
.ERR3    MNOTE 8,'Reasoncode cannot be passed in register 15'
.NOERR3  ANOP
.*
.* Add &LABEL (if specified) to BXA_ABNDPGM table
         AIF   (K'&LABEL EQ 0).LOOP1OK * If empty skip loop
&I       SETA  0
.LOOP1   ANOP
&I       SETA  &I+1                    * Point to next element
         AIF   (&I GT N'&BXA_ABNDPGM).LOOP1AD * Not in table: Add elm
         AIF   ('&ABEND' EQ '&BXA_ABNDPGM(&I)').LOOP1OK * Found: done
         AGO   .LOOP1                  * Go search remainder of table
.LOOP1AD ANOP  ,                       * &I points beyond last used elm
&BXA_ABNDPGM(&I) SETC '&LABEL'         * Put label into next element
.LOOP1OK ANOP
.*
* Out-of-line code for generating a user abend
&LABEL   LABEL ,                       * User abend routine
         PUSH  USING                   * Save USNIG status
         DROP  ,                       * No valid USINGs anymore
         LR    R12,R15                 * Copy entry point address
         USE   &LABEL,R12              * R12 contains routine address
.*
.* Switch to primary mode
&SAV_ASCE SETC '&SYSASCE'              * Save ASC-environment
         SAC   0                       * Switch to primary mode
         SYSSTATE ASCENV=P             * Indicate primary mode
*
         LA    &REASON,0(,&REASON)     * Remove garbage bit(s)
         ABEND &CODE,                  * Internal error                *
               REASON=(&REASON),       *   reasoncode=failing address  *
               DUMP,                   *   create a dump               *
               DUMPOPT=_&LABEL._OPT    *   as specified
*
_&LABEL._OPT LABEL F                   * Re-align on fullword
         SNAP  DCB=0,                  * Use standard DCB              *
               PDATA=(PSW,REGS),       * Just PSW and Registers        *
               SDATA=SUM,              * And a summary dump            *
               MF=L
*
         POP   USING                   * Restore using status
         EJECT ,                       * Force heading with USINGs
.*
.* Reset to original ASC mode
         AIF   ('&SAV_ASCE' EQ 'P').MEND
         SYSSTATE ASCENV=&SAV_ASCE
.*
.MEND    MEND
./ ADD NAME=BALC     0100-20096-20096-0111-00163-00163-00000-BIXSMAC 30
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on condition
.*
&LABEL   BALC  &COND,                  * Condition                     *
               &REG,                   * Register for return address   *
               &DEST,                  * Destination address or (reg)  *
               &TYPE=LOCAL             * BAL/BALR
.*
.* &COND specifies on which condition the BAL is to be executed
.*       valid values are:  E,  H,  L,  M,  O,  P,  Z, and
.*                         NE, NH, NL, NM, NO, NP, NZ
.* &REG  Specifies the register to contain the return address
.* &DEST Specifies the address to branch to. If specified as a
.*       (register) a BALR will be generated in stead of a BAL.
.* &TYPE Specifies whether the designated routine is reached thru
.*       a local (BAL) branch or a remote (BALR) branch
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALC                   * Check license acceptance
         AIF    (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Check the condition parameter
         AIF   ('&COND' EQ 'E').NOERR1
         AIF   ('&COND' EQ 'NE').NOERR1
         AIF   ('&COND' EQ 'Z').NOERR1
         AIF   ('&COND' EQ 'NZ').NOERR1
         AIF   ('&COND' EQ 'H').NOERR1
         AIF   ('&COND' EQ 'NH').NOERR1
         AIF   ('&COND' EQ 'L').NOERR1
         AIF   ('&COND' EQ 'NL').NOERR1
         AIF   ('&COND' EQ 'M').NOERR1
         AIF   ('&COND' EQ 'NM').NOERR1
         AIF   ('&COND' EQ 'O').NOERR1
         AIF   ('&COND' EQ 'NO').NOERR1
         AIF   ('&COND' EQ 'P').NOERR1
         AIF   ('&COND' EQ 'NP').NOERR1
.ERR1    MNOTE 8,'First parameter specified unknown condition mnemonic'
.NOERR1  ANOP
.*
.* Check the register value specified
         AIF   ('&REG'(1,1) NE '(').NOERR2
         AIF   (N'&REG EQ 0).ERR2A
         AIF   (N'&REG GT 1).ERR2B
         AGO   .NOERR2
.ERR2A   MNOTE 8,'Second parm specifies no registers in sublist'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Second parm specifies more than 1 register in sublist*
               '
.NOERR2  ANOP
.*
.* Check the destination parameter
         AIF   ('&DEST'(1,1) NE '(').NOERR3
         AIF   (N'&DEST EQ 0).ERR3A
         AIF   (N'&DEST GT 1).ERR3B
         AGO   .NOERR3
.ERR3A   MNOTE 8,'Third parm specifies no registers in sublist'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'Third parm specifies more than 1 register in sublist'
.NOERR3  ANOP
.*
.* Check the TYPE parameter
         AIF   ('&TYPE' EQ 'LOCAL').NOERR4
         AIF   ('&TYPE' EQ 'REMOTE').NOERR4
.ERR4    MNOTE 8,'TYPE parameter must be LOCAL or REMOTE'
.NOERR4  ANOP
.*
.* Extract register to use from REG-parameter
         LCLC  &_REG
&_REG    SETC  '&REG'
         AIF   ('&REG'(1,1) NE '(').REGOK
&_REG    SETC  '&REG(1)'
.REGOK   ANOP
.*
.* Create Bx opcode to use if condition not met
         LCLC  &OPCD
         AIF   (K'&COND EQ 1).OPCD1
.* Condition is Nx --> create a Bx opcode
&OPCD    SETC  'B'.'&COND'(2,1)
         AGO   .OPCDOK
.OPCD1   ANOP
.* Condition is x --> create a BNx opcode
&OPCD    SETC  'BN'.'&COND'
.OPCDOK  ANOP
.*
.* Generate branch over BAL in case condition not met
&LABEL   &OPCD _BAL&SYSNDX             * Condition not met: skip branch
.*
.* Generate BAL or BALR depending on DEST parameter
         AIF   ('&DEST'(1,1) EQ '(').BALR
         AIF   ('&TYPE' EQ 'REMOTE').REMOTE
.* Must be a local branch: generate a BAL
         BAL   &REG,&DEST              * Condition OK: branch
         AGO   .EXIT
.*
.REMOTE  ANOP
         L     R15,=AL4(&DEST)         * Condition OK: load terget addr
         BALR  &REG,R15                * and branch to routine
         AGO   .EXIT
.*
.BALR    ANOP
         BALR  &REG,&DEST(1)           * Condition OK: branch
.*
.EXIT    ANOP
_BAL&SYSNDX LABEL
.*
.MEND    MEND  ,
./ ADD NAME=BALE     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 30
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Equal condition
.*
&LABEL   BALE  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  E,&REG,&LOC,            * BAL on Equal condition        *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALH     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 30
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on High condition
.*
&LABEL   BALH  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALH                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  H,&REG,&LOC,            * BAL on High condition         *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALL     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Low condition
.*
&LABEL   BALL  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALL                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  L,&REG,&LOC,            * BAL on Low condition          *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALM     0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Mixed condition
.* Branch and Link on Minus condition
.*
&LABEL   BALM  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALM                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  M,&REG,&LOC,            * BAL on Mixed/Minus condition  *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALNE    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Not-Equal condition
.*
&LABEL   BALNE &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALNE                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  NE,&REG,&LOC,           * BAL on Not Equal condition    *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALNH    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Not-High condition
.*
&LABEL   BALNH &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALNH                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  NH,&REG,&LOC,           * BAL on Not High condition     *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALNL    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Not-Low condition
.*
&LABEL   BALNL &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALNL                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  NL,&REG,&LOC,           * BAL on Not Low condition      *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALNM    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Not-Mixed condition
.* Branch and Link on Not-Minus condition
.*
&LABEL   BALNM &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALNM                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  NM,&REG,&LOC,           * BAL on Not Mixed/Minus cond.  *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALNO    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Not-Ones condition
.* Branch and Link on No-Overflow condition
.*
&LABEL   BALNO &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALNO                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  NO,&REG,&LOC,           * BAL on Not Ones/Overflow cond.*
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALNP    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Not-Plus condition
.*
&LABEL   BALNP &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALNP                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  NP,&REG,&LOC,           * BAL on Not Plus condition     *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALNZ    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Non-Zero condition
.*
&LABEL   BALNZ &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALNZ                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  NZ,&REG,&LOC,           * BAL on Not Zero condition     *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALO     0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Ones condition
.* Branch and Link on Overflow condition
.*
&LABEL   BALO  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALO                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  O,&REG,&LOC,            * BAL on Ones/Overflow condition*
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALP     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Plus condition
.*
&LABEL   BALP  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALP                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  P,&REG,&LOC,            * BAL on Plus condition         *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BALZ     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Link on Zero condition
.*
&LABEL   BALZ  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BALZ                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BALC  Z,&REG,&LOC,            * BAL on Zero condition         *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASC     0100-20096-20096-0111-00166-00166-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on condition
.*
&LABEL   BASC  &COND,                  * Condition                     *
               &REG,                   * Register for return address   *
               &DEST,                  * Destination address or (reg)  *
               &TYPE=LOCAL             * BAS/BASR
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASC                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &_REG                   *
         LCLC  &OPCD                   * Opcode
         LCLC  &ENDLAB                 * Skip label
.*
.* &COND specifies on which condition the BAS is to be executed
.*       valid values are:  E,  H,  L,  M,  O,  P,  Z, and
.*                         NE, NH, NL, NM, NO, NP, NZ
.* &REG  Specifies the register to contain the return address
.* &DEST Specifies the address to branch to. If specified as a
.*       (register) a BASR will be generated in stead of a BAS.
.* &TYPE Specifies whether the designated routine is reached thru
.*       a local (BAS) branch or a remote (BASR) branch
.*
.* Check the condition parameter
         AIF   ('&COND' EQ 'E').NOERR1
         AIF   ('&COND' EQ 'NE').NOERR1
         AIF   ('&COND' EQ 'Z').NOERR1
         AIF   ('&COND' EQ 'NZ').NOERR1
         AIF   ('&COND' EQ 'H').NOERR1
         AIF   ('&COND' EQ 'NH').NOERR1
         AIF   ('&COND' EQ 'L').NOERR1
         AIF   ('&COND' EQ 'NL').NOERR1
         AIF   ('&COND' EQ 'M').NOERR1
         AIF   ('&COND' EQ 'NM').NOERR1
         AIF   ('&COND' EQ 'O').NOERR1
         AIF   ('&COND' EQ 'NO').NOERR1
         AIF   ('&COND' EQ 'P').NOERR1
         AIF   ('&COND' EQ 'NP').NOERR1
.ERR1    MNOTE 8,'First parameter specified unknown condition mnemonic'
.NOERR1  ANOP
.*
.* Check the register value specified
         AIF   ('&REG'(1,1) NE '(').NOERR2
         AIF   (N'&REG EQ 0).ERR2A
         AIF   (N'&REG GT 1).ERR2B
         AGO   .NOERR2
.ERR2A   MNOTE 8,'Second parm specifies no registers in sublist'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Second parm specifies more than 1 register in sublist*
               '
.NOERR2  ANOP
.*
.* Check the destination parameter
         AIF   ('&DEST'(1,1) NE '(').NOERR3
         AIF   (N'&DEST EQ 0).ERR3A
         AIF   (N'&DEST GT 1).ERR3B
         AGO   .NOERR3
.ERR3A   MNOTE 8,'Third parm specifies no registers in sublist'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'Third parm specifies more than 1 register in sublist'
.NOERR3  ANOP
.*
.* Check the TYPE parameter
         AIF   ('&TYPE' EQ 'LOCAL').NOERR4
         AIF   ('&TYPE' EQ 'REMOTE').NOERR4
.ERR4    MNOTE 8,'TYPE parameter must be LOCAL or REMOTE'
.NOERR4  ANOP
.*
.* Extract register to use from REG-parameter
&_REG    SETC  '&REG'
         AIF   ('&REG'(1,1) NE '(').REGOK
&_REG    SETC  '&REG(1)'
.REGOK   ANOP
.*
.* Create Bx opcode to use if condition not met
         AIF   (K'&COND EQ 1).OPCD1
.* Condition is Nx --> create a Bx opcode
&OPCD    SETC  'B'.'&COND'(2,1)
         AGO   .OPCDOK
.OPCD1   ANOP
.* Condition is x --> create a BNx opcode
&OPCD    SETC  'BN'.'&COND'
.OPCDOK  ANOP
.*
.* Generate branch over BAS in case condition not met
&ENDLAB  SETC  '_BAS&SYSNDX'
&LABEL   &OPCD &ENDLAB                 * Condition not met: skip branch
.*
.* Generate BAS or BASR depending on DEST parameter
         AIF   ('&DEST'(1,1) EQ '(').BASR
         AIF   ('&TYPE' EQ 'REMOTE').REMOTE
.* Must be a local branch: generate a BAS
         BAS   &REG,&DEST              * Condition OK: branch
         AGO   .EXIT
.*
.REMOTE  ANOP  ,
         L     R15,=AL4(&DEST)         * Condition OK: load terget addr
         BASR  &REG,R15                * and branch to routine
         AGO   .EXIT
.*
.BASR    ANOP  ,
         BASR  &REG,&DEST(1)           * Condition OK: branch
.*
.EXIT    ANOP  ,
&ENDLAB  LABEL ,
.*
.MEND    MEND
./ ADD NAME=BASE     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Equal condition
.*
&LABEL   BASE  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  E,&REG,&LOC,            * BAS on Equal condition        *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASH     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on High condition
.*
&LABEL   BASH  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASH                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  H,&REG,&LOC,            * BAS on High condition         *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASL     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Low condition
.*
&LABEL   BASL  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASL                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  L,&REG,&LOC,            * BAS on Low condition          *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASM     0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Mixed condition
.* Branch and Save on Minus condition
.*
&LABEL   BASM  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASM                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  M,&REG,&LOC,            * BAS on Mixed/Minus condition  *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASNE    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Not-Equal condition
.*
&LABEL   BASNE &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASNE                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  NE,&REG,&LOC,           * BAS on Not Equal condition    *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASNH    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Not-High condition
.*
&LABEL   BASNH &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASNH                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  NH,&REG,&LOC,           * BAS on Not High condition     *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASNL    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Not-Low condition
.*
&LABEL   BASNL &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASNL                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  NL,&REG,&LOC,           * BAS on Not Low condition      *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASNM    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Not-Mixed condition
.* Branch and Save on Not-Minus condition
.*
&LABEL   BASNM &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASNM                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  NM,&REG,&LOC,           * BAS on Not Mixed/Minus cond.  *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASNO    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Not-Ones condition
.* Branch and Save on No-Overflow condition
.*
&LABEL   BASNO &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASNO                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  NO,&REG,&LOC,           * BAS on Not Ones/Overflow cond.*
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASNP    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Not-Plus condition
.*
&LABEL   BASNP &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASNP                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  NP,&REG,&LOC,           * BAS on Not Plus condition     *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASNZ    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Non-Zero condition
.*
&LABEL   BASNZ &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASNZ                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  NZ,&REG,&LOC,           * BAS on Not Zero condition     *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASO     0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Ones condition
.* Branch and Save on Overflow condition
.*
&LABEL   BASO  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASO                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  O,&REG,&LOC,            * BAS on Ones/Overflow condition*
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASP     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Plus condition
.*
&LABEL   BASP  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASP                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  P,&REG,&LOC,            * BAS on Plus condition         *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BASZ     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Branch and Save on Zero condition
.*
&LABEL   BASZ  &REG,                   * Register for return address   *
               &LOC,                   * Branch target or (reg)        *
               &TYPE=LOCAL             *
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASZ                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BASC  Z,&REG,&LOC,            * BAS on Zero condition         *
               TYPE=&TYPE              *
.*
.MEND    MEND
./ ADD NAME=BEGSR    0100-20096-20096-0111-00370-00370-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates entry logic for subroutines
.*
&LABEL   BEGSR &TYPE=,                 * Nothing, ESTAE, or RETRY      *
               &LVL=                   * ESTAE level
.*
.* &TYPE - if omitted or defaulted to INT, specifies a normal
.*         (ie: INTernal) subroutine
.*       - if ESTAE, specifies an ESTAE-type recovery routine
.*         The ESTAE is required to specify as the user parameter the
.*         external savearea (=R13) as set up by the PGM-macro.
.*       - if RETRY, specifies a dedicated retry routine. For these
.*         routines no save-area is needed, and no exit code is gen'd
.* &LVL  - Nesting level of active ESTAE routines. Normally value
.*         should be one, except for ESTAE's that are to protect
.*         another (active) ESTAE.
.*
.* Remark: Save area usage for ESTAE-type subroutines differs somewhat
.*         from the normal SA standards. It takes two inteernal SA's:
.*         the first is used to store regsters R14-R12 from the
.*         external SA, the second is used to store registers R14-R2,
.*         R3 with the contents of R13, R4-R6 with the contents of the
.*         first three fullwords of the external SA, and R7-R12 with
.*         garbage. The external SA is then available for reuse and
.*         can be addressed thru R13 in the usual way.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BEGSR                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_PGM                * PGM macro included?
         GBLB  &BXA_MAC_MAPPSA         * PSA mapping included?
         GBLC  &BXA_ENTRY              * Entry parm of PGM-macro
         GBLC  &BXA_USE_R12            * USING label for R12
         GBLC  &BXA_WALAB              * USING label for workarea
         GBLC  &BXA_SUBR               * Current subroutine name
         GBLC  &BXA_SUBRTP             * Current subroutine type
         GBLC  &BXA_SRUNAM(50)         * Array with used subr names
         GBLB  &BXA_SRUSVC(50)         * Array with used subr SVC-modes
         GBLC  &BXA_SRUASC(50)         * Array with used subr ASC-modes
         GBLC  &BXA_SRDNAM(50)         * Array with defined subroutines
         GBLB  &BXA_SRDDUP(50)         * Multiple def.subr. indicators
         GBLC  &BXA_SRDTYP(50)         * Types of defined subroutines
         GBLA  &BXA_SRNAML             * Max subr name length
         GBLC  &BXA_SR_CALLER(50)      * Array with callers of subrs
         GBLC  &BXA_SR_CALLED(50)      * Array with called subrs
         GBLC  &BXA_USEC_ROUT(50)      * Routines with SCOPE=CALLED
         GBLC  &BXA_USEC_ARGL(50)      * Labels for SCOPE=CALLED
         GBLC  &BXA_USEC_ARG1(50)      * DSECTs for SCOPE=CALLED
         GBLC  &BXA_USEC_ARG2(50)      * Bases for SCOPE=CALLED
         GBLC  &BXA_PGM_LABEL          * Label used by PGM macro
         GBLB  &BXA_SVCMODE            * Current SVC-mode
         GBLC  &SYSASCE                * Current ASC-mode
         LCLA  &I                      * Index into BXA_SRDNAM
         LCLB  &SRDDUP                 * On if &LABEL is a duplicate
         LCLC  &_TYPE                  * Type of subroutine
         LCLC  &_LABEL                 * New label if LABEL not unique
         LCLC  &_REG                   * Workreg to find internal SA
         LCLB  &BYMAIN                 * On if &LABEL called by *MAIN
         LCLB  &PASS2                  * On when doing 2nd SA (ESTAE)
.*
.* PGM must have been included
         AIF   (&BXA_PGM).NOERR0A
         MNOTE 8,'PGM macro must be coded before using BEGSR/ENDSR'
         MEXIT
.NOERR0A ANOP
.*
.* Check that the structured programming stack is empty
         CHK_STACK RESET=YES           *
.*
.* BEGSR may not be issued within another subroutine
         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR1
.ERR1    MNOTE 8,'Nested subroutine definition or missing ENDSR'
.NOERR1  ANOP
.*
.* Check the LABEL parameter
         AIF   (K'&LABEL EQ 0).ERR2A
         AIF   ('&LABEL' EQ '*MAIN').ERR2B
         AGO   .NOERR2
.ERR2A   MNOTE 8,'Required label parameter is missing'
         MEXIT
.ERR2B   MNOTE 8,'Subroutine name ''*MAIN'' is invalid'
         MEXIT
.NOERR2  ANOP
.*
.* Check the TYPE parameter
&_TYPE   SETC  '&TYPE'
         AIF   ('&TYPE' EQ 'INT').NOERR3
         AIF   ('&TYPE' EQ 'ESTAE').NOERR3
         AIF   ('&TYPE' EQ 'RETRY').NOERR3
         AIF   (K'&TYPE NE 0).ERR3
&_TYPE   SETC  'INT'
         AGO   .NOERR3
.ERR3    MNOTE 8,'TYPE parameter must be INT, ESTAE, RETRY, or omitted'
.NOERR3  ANOP
.*
.* Check the LVL parameter
         AIF   ('&TYPE' EQ 'ESTAE' AND K'&LVL EQ 0).ERR4A
         AIF   ('&TYPE' EQ 'ESTAE' AND K'&LVL NE 0).NOERR4B
         AIF   (K'&LVL EQ 0).NOERR4
         AGO   .ERR4B
.ERR4A   MNOTE 8,'LVL parameter missing on ESTAE-type subroutine'
         AGO   .NOERR4
.ERR4B   MNOTE 4,'LVL parameter ignored: valid only with ESTAE-type sub*
               routines'
.NOERR4B ANOP
         AIF   (K'&LVL NE 1).ERR4C     * Max 1 char
         AIF   ('&LVL' LT '0' OR '&LVL' GT '9').ERR4D * Numeric?
         AIF   ('&LVL' EQ '0').ERR4E   * 0 is invalid
         AIF   ('&LVL' GT '4').ERR4F   * Too many levels
         AGO   .NOERR4
.ERR4C   MNOTE 8,'LVL parameter contains more than 1 character'
         AGO   .NOERR4
.ERR4D   MNOTE 8,'LVL parameter not a valid digit'
         AGO   .NOERR4
.ERR4E   MNOTE 8,'LVL parameter must not be 0'
         AGO   .NOERR4
.ERR4F   MNOTE 8,'LVL parameter should not exceed 4'
.NOERR4  ANOP
.*
.* Check that the subroutine name does not occur in array BXA_SRDNAM
&_LABEL  SETC  '&LABEL'                *
&I       SETA  0                       * Start loop
.LOOP0   ANOP
&I       SETA  &I+1                    * Point to next entry
         AIF   ('&BXA_SRDNAM(&I)' EQ '').LOOP0OK * End of table
         AIF   ('&BXA_SRDNAM(&I)' EQ '&LABEL').LOOP0F * Found
         AGO   .LOOP0                  * Go process next entry
.LOOP0F  ANOP  ,                       * Matching entry found
&SRDDUP  SETB  1                       * Signal this is a duplicate
&_LABEL  SETC  '&LABEL._&SYSNDX'       * Create unique label
&I       SETA  1+N'&BXA_SRDNAM         * Point beyond last entry
.LOOP0OK ANOP  ,                       * &I now points to empty entry
.*
.* Add subroutine name to array
&BXA_SRDNAM(&I) SETC '&LABEL'          * Add entry,
&BXA_SRDDUP(&I) SETB (&SRDDUP)         *   copy duplicate status
&BXA_SRDTYP(&I) SETC '&_TYPE'.'&LVL'   *   and subroutine type
         AIF   (K'&LABEL LE &BXA_SRNAML).NAMLOK * Check name length
&BXA_SRNAML SETA K'&LABEL              * Increase max. name length
         AIF   (K'&LABEL GE 5).NAMLOK  * Max. name length must at least
&BXA_SRNAML SETA 5                     *   equal 5 (for *MaIN)
.NAMLOK  ANOP
.*
.* Check the arrays BXA_SR_CALLED / BXA_SR_CALLER to see if this
.* subroutine is ever invoked from *MAIN. If it is, include logic
.* to test whether we must use the first internal save area. If it is
.* never called by *MAIN code, simply use the next available save area
.* on the chain of internal SA's.
.*
         AIF   ('&BXA_ENTRY' EQ 'SUBR').LOOP1OK * &BYMAIN defaults to 0
&I       SETA  0                       * I indexes BXA_SR_CALLED/CALLER
.LOOP1   ANOP  ,                       * Loop thru SR XREF tables
&I       SETA  &I+1                    * Point to next entry
         AIF   (&I GT N'&BXA_SR_CALLED).LOOP1OK * End of table: endloop
         AIF   ('&BXA_SR_CALLED(&I)' NE '&LABEL').LOOP1 * Wrong subr
         AIF   ('&BXA_SR_CALLER(&I)' NE '*MAIN').LOOP1 * Not by *MAIN
.LOOP1F  ANOP  ,                       * Found
&BYMAIN  SETB  1                       * Flag by *MAIN & quit loop
.LOOP1OK ANOP
.*
.* If this is an ESTAE or RETRY type subroutine, we must
.* check the arrays BXA_SR_CALLED / BXA_SR_CALLER again to see if
.* this subroutine has been called by any other routine (including
.* *MAIN). These calls must now be flagged as errors.
.*
         AIF   ('&TYPE' EQ '').LOOP2OK
&BYMAIN  SETB  1                       * ESTAE may be invoked by *MAIN
&I       SETA  0                       * I indexes BXA_SR_CALLED/CALLER
.LOOP2   ANOP  ,                       * Loop thru SR XREF tables
&I       SETA  &I+1                    * Point to next entry
         AIF   (&I GT N'&BXA_SR_CALLED).LOOP2OK * End of table: endloop
         AIF   ('&BXA_SR_CALLED(&I)' NE '&LABEL').LOOP2 * Wrong subr
         MNOTE 8,'Illegal EXSR of &TYPE type subroutine found in &BXA_S*
               R_CALLER(&I)'
         AGO   .LOOP2
.LOOP2OK ANOP
.*
.* Set current subroutine name
&BXA_SUBR SETC '&LABEL'
&BXA_SUBRTP SETC '&TYPE'
.*
.* Generate code
         DROP  ,                       * No valid registers
&_LABEL  DS    0H                      * Begin SubRoutine
&_REG    SETC  'R14'                   * Use R14 to locate int.SA
.*
.* For ESTAE-routines we first establish correct addressability
         AIF   ('&TYPE' NE 'ESTAE').NOESTAE
.* Establish correct addressability
         LR    R12,R15                 * Copy entry-point address
         USE   &LABEL,R12              * R12 contains routine address
.* R13 may or may not point to a save-area: don't use!
         SH    R2,=AL2(SAVEPRFX_LEN)   * Adjust R2 from ptr to ext.SA
         USE   BXASAVE,R2              *   to ptr to BXASAVE area
         L     R10,=AL4(_&BXA_PGM_LABEL._ID) * Get ptr to workarea ID
         CLC   SAVEID,0(R10)           * Compare workarea ID
         ABND  NE                      * Must be equal!
*                                      * Ok: R2 is valid workarea-ptr
         LR    R3,R13                  * Save original R13
         LA    R13,SAVEAREA            * Point to savearea (=workarea)
         DROP  R2                      * BXASAVE no longer needed
*
         USE   &BXA_WALAB,R13,         * Set workarea addressable      *
               START=&BXA_WALAB+SAVEPRFX_LEN * upward from savearea
         LM    R4,R6,SAVEPTRS          * Copy data from external SA
.*
&_REG    SETC  'R7'                    * Use R7 to locate int.SA
&BYMAIN  SETB  1                       * *MAIN might invoke ESTAE
         AGO   .USEOK
.NOESTAE ANOP
.*
.* Set up USINGs for non-ESTAE routines
         USE   &BXA_USE_R12,R12        * Set program addressable
         USE   &BXA_WALAB,R13,         * Set workarea addressable      *
               START=&BXA_WALAB+SAVEPRFX_LEN * upward from savearea
         AIF   ('&TYPE' EQ 'RETRY').USEC
.*
.* Set correct SVCmode and ASC-mode for this subroutine
&I       SETA  0                       * I indexes BXA_SRUxxx
.LOOP4   ANOP  ,                       * Loop thru SRU... tables
&I       SETA  &I+1                    * Point to next entry
         AIF   (&I GT N'&BXA_SRUNAM).LOOP4NF * End of table: not found
         AIF   ('&BXA_SRUNAM(&I)' NE '&LABEL').LOOP4 * Skip mismatch
&BXA_SVCMODE SETB (&BXA_SRUSVC(&I))    * Copy invoker's SVC/prob. mode
&SYSASCE SETC  '&BXA_SRUASC(&I)'       * Copy invoker's ASC mode
         AGO   .LOOP4OK                * And done
.LOOP4NF ANOP
         MNOTE 1,'Subroutine defined before it is called, state may be *
               ambiguous'
.LOOP4OK ANOP
.USEOK   ANOP
*
* Find first available internal save-area
         AIF   ('&TYPE' EQ 'ESTAE').NOSAVR
         ST    &_REG,SAVED&_REG        * Save Ret.addr. in current SA
.NOSAVR  ANOP
         AIF   (&BYMAIN).BYMAIN        * May be called by *MAIN?
.*                                     * No: don't check for first SA
         L     &_REG,SAVEINTU          * Point to last-used save-area
         AGO   .CONTIN
.BYMAIN  ANOP  ,                       * May be called by *MAIN
         LT    &_REG,SAVEINTU          * Point to last-used save-area
         BZ    _SUBR1ST_&SYSNDX        * If zero: use first
.CONTIN  ANOP  ,
INT      USE   SAVEAREA,&_REG          * Address save-area
.PASS2   ANOP
         LT    &_REG,INT.SAVENEXT      * Point to next internal SA
         ABND  Z                       * No save-area: Abend
         AIF   (NOT &BYMAIN).NBYMAIN   * May be called by *MAIN?
.*                                     * Yes: insert code for first SA
         B     _SUBR_OK_&SYSNDX        * If valid: go use it
_SUBR1ST_&SYSNDX EQU *                 * Use first save-area
         L     &_REG,SAVEINTF          * Point to first save-area
_SUBR_OK_&SYSNDX EQU *                 * REG now a valid SA pointer
.*
.NBYMAIN ANOP  ,
.*
.* For ESTAE routines: copy external SA regs 14-12, then go allocate
.*                     second internal SA
.* For normal routines: Save regs 14-12 in allocated SA
.*
         AIF   ('&TYPE' NE 'ESTAE').SAVREGS
         AIF   (&PASS2).SAVREGS        * Second pass completed?
&PASS2   SETB  1                       * Start second pass
         MVC   INT.SAVEDR14(15*L'SAVEDR14),SAVEDR14 * Copy R14-R12
         LA    R15,&LABEL              * Point to routine EPA
         ST    R15,INT.SAVEHDR         * Set ptr to routine
*
* R14-R2 still contain original values, R3 contains original R13,
* R4-R6 contain remaining info from SAVEAREA.
* Allocate second SA where all this stuff can be stored.
&BYMAIN  SETB  0                       * Cannot allocate 1st SA
         AGO   .PASS2
.*
.SAVREGS ANOP
         ST    &_REG,SAVEINTU          * Save pointer to last used SA
*
* Save registers: REG now points to an available internal SA
.* Register 13 is not saved because this would disrupt the chain of
.* internal save-areas. R13 must retain its value thru all subr's.
         AIF   ('&TYPE' EQ 'ESTAE').STMR14
         STM   R15,R12,INT.SAVEDR15    * Save unchanged registers
         MVC   INT.SAVED&_REG,SAVED&_REG * Copy org. value of REG
         AGO   .DROPINT
.*
.STMR14  ANOP  ,                       * Save to second int.SA (ESTAE)
         STM   R14,R12,INT.SAVEDR14    * Save original & changed regs
.*
.DROPINT ANOP  ,                       *
         LA    R0,&LABEL               * Point to routine EPA
         ST    R0,INT.SAVEHDR          * Set ptr to routine
         DROP  INT                     * SAVEAREA (internal)
.*
.* USEs with SCOPE=CALLED must now be included from BXA_USEC_... tables
.USEC    ANOP
&I       SETA  0                       * I indexes BXA_USEC_...
.LOOP3   ANOP  ,                       * Check all entries
&I       SETA  &I+1                    * Point nexy entry
         AIF   (&I GT N'&BXA_USEC_ROUT).LOOP3OK * At end: quit loop
         AIF   ('&BXA_USEC_ROUT(&I)' NE '&LABEL').LOOP3 * Skip mismatch
&_LABEL  SETC  '&BXA_USEC_ARGL(&I)'    * Copy label parameter
&_LABEL  USE   &BXA_USEC_ARG1(&I),&BXA_USEC_ARG2(&I)
         AGO   .LOOP3                  *
.LOOP3OK ANOP  ,                       *
.*
.* Add USE for PSA, if PSA mapped in this program
         AIF   (NOT &BXA_MAC_MAPPSA).NOPSA
         USE   PSA,R0                  * PSA always valid at 0
.NOPSA   ANOP  ,                       *
.*
.MEND    MEND
./ ADD NAME=BHE      0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on High or Equal
.*
&LABEL   BHE   &ADR                    * Branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BC    B'1010',&ADR            * B on High or Equal condition
.*
.MEND    MEND
./ ADD NAME=BHER     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on High or Equal Register
.*
&LABEL   BHER  &REG                    * Register for branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BCR   B'1010',&REG            * BR on High or Equal condition
.*
.MEND    MEND
./ ADD NAME=BLE      0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Low or Equal
.*
&LABEL   BLE   &ADR                    * Branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BC    B'1100',&ADR            * B on Low or Equal condition
.*
.MEND    MEND
./ ADD NAME=BLER     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Low or Equal Register
.*
&LABEL   BLER  &REG                    * Register for branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BCR   B'1100',&REG            * BR on Low or Equal condition
.*
.MEND    MEND
./ ADD NAME=BLH      0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Low or High
.*
&LABEL   BLH   &ADR                    * Branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BC    B'0110',&ADR            * B on Low or High condition
.*
.MEND    MEND
./ ADD NAME=BLHR     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Low or High Register
.*
&LABEL   BLHR  &REG                    * Register for branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BCR   B'0110',&REG            * BR on Low or High condition
.*
.MEND    MEND
./ ADD NAME=BNHE     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Not High or Equal
.*
&LABEL   BNHE  &ADR                    * Branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BC    B'0101',&ADR            * B on Not High or Equal cond.
.*
.MEND    MEND
./ ADD NAME=BNHER    0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Not High or Equal Register
.*
&LABEL   BNHER &REG                    * Register for branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BCR   B'0101',&REG            * BR on Not High or Equal cond.
.*
.MEND    MEND
./ ADD NAME=BNLE     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Not Low or Equal
.*
&LABEL   BNLE  &ADR                    * Branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BC    B'0011',&ADR            * B on Not Low or Equal cond.
.*
.MEND    MEND
./ ADD NAME=BNLER    0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Not Low or Equal Register
.*
&LABEL   BNLER &REG                    * Register for branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BCR   B'0011',&REG            * BR on Not Low or Equal cond.
.*
.MEND    MEND
./ ADD NAME=BNLH     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Not Low or High
.*
&LABEL   BNLH  &ADR                    * Branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BC    B'1001',&ADR            * B on Not Low or High cond.
.*
.MEND    MEND
./ ADD NAME=BNLHR    0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 2004
.**********************************************************************
         MACRO
.*
.* Branch on Not Low or High Register
.*
&LABEL   BNLHR &REG                    * Register for branch address
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   BCR   B'1001',&REG            * BR on Not Low or High cond.
.*
.MEND    MEND
./ ADD NAME=BXAEPSW  0100-20096-20096-0111-00118-00118-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Extract current PSW
.*
&LABEL   BXAEPSW &REG                  * Register set to be used
.*
.* &REG  specifies an even register. The PSW will be placed in register
.*       &REG and &REG+1.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC BXAEPSW                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &_REG
         LCLC  &_REG1,&_REG2
         LCLA  &REGN
.*
.* Check the REG parameter
         AIF   (K'&REG EQ 0).ERR1A
&_REG    SETC  '&REG'
         AIF   ('&_REG'(1,1) NE '(').LAB1A * If enclosed in parentheses
&_REG    SETC  '&REG(1)'               * Remove parentheses
.LAB1A   ANOP
         AIF   ('&_REG'(1,1) NE 'R').LAB1B * If R...
&_REG    SETC  '&_REG'(2,*)            * Remove leading R
&_REG1   SETC  'R'
&_REG2   SETC  'R'
.LAB1B   ANOP
         AIF   ('&_REG' EQ '0').LAB1C
         AIF   ('&_REG' EQ '00').LAB1C
         AIF   ('&_REG' EQ '14').LAB1C
         AGO   .ERR1B
.LAB1C   ANOP
&_REG1   SETC  '&_REG1'.'&_REG'
&REGN    SETA  &_REG
&REGN    SETA  &REGN+1
&_REG2   SETC  '&_REG2'.'&REGN'
         AGO   .NOERR1
.ERR1A   MNOTE 8,'You should specify an even general purpose register'
         MEXIT
.ERR1B   MNOTE 8,'You can use only R0/R1 or R14/R15'
.NOERR1  ANOP
.*
.* Check the number of parameters
         AIF   (N'&SYSLIST GT 1).ERR2
         AGO   .NOERR2
.ERR2    MNOTE 4,'Too many parameters specified: ignored'
.NOERR2  ANOP
.*
.* Generate code
&LABEL   LA    &_REG2,_EPSW&SYSNDX     * Load internal return address
         LA    &_REG1,1                * Amode bit
         SLL   &_REG1,31               *   into bit 0
         OR    &_REG2,&_REG1           *   of the return address
         BAKR  &_REG2,R0               * Create stack entry (nobranch)
         LA    &_REG2,1                * Specifies PSW for ESTA
         ESTA  &_REG1,&_REG2           * Put PSW into registers
         PR    ,                       * Remove stack entry
_EPSW&SYSNDX LABEL ,                   *
.*
.MEND    MEND
./ ADD NAME=CASE     0100-20096-20096-0111-00143-00143-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: CASE
.* Combines with ELSE and ENDCASE to conditionally execute code-blocks
.*
&LABEL   CASE  &NEST=NO                * YES to force nesting
.*                                     * Condition in &SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC CASE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_LBL(5)         * Labels
         GBLA  &BXA_STK_LVL(5)         * Levels
         LCLC  &OP                     * Last opcode on stack
         LCLC  &LBL                    * Last label on stack
         LCLA  &LVL                    * Next level on stack
         LCLC  &LAB                    * End-of-else label
         LCLC  &ARGS                   * SYSLIST as a string
         LCLA  &I                      * Stack pointer
.*
.* Check number of parameters
         AIF   (N'&SYSLIST EQ 0).ERR1
         AIF   (K'&SYSLIST(1) EQ 0).ERR1
         AGO   .NOERR1
.ERR1    MNOTE 8,'No condition specified'
         MEXIT
.NOERR1  ANOP
.*
.* Check NEST parameter
         AIF   ('&NEST' EQ 'NO').NOERR2
         AIF   ('&NEST' EQ 'YES').NOERR2
.ERR2    MNOTE 8,'NEST parameter must be either YES or NO'
         MEXIT
.NOERR2  ANOP
.*
.* If this is not the first CASE of the current level, then we
.* must first generate a branch to the ENDCASE-statement to
.* terminate the currently running CASE.
         AIF   ('&NEST' EQ 'YES').NOBRANCH * Nesting a new level
&I       SETA  &BXA_STK                * Point current stack entry
         AIF   (&I EQ 0).NOBRANCH      * Stack is empty: we're first
         AIF   ('&BXA_STK_OP(&I)' NE 'CASE').NOBRANCH
.* Ok: preceding structure is another CASE at the same level
         B     _EC_&SYSNDX             * Terminate: branch to ENDCASE
*
&BXA_STK_LBL(&I) LABEL ,               * Preceding CASEs all false
&BXA_STK_LBL(&I) SETC '_EC_&SYSNDX'    * Label for ENDCASE
.NOBRANCH ANOP
.*
.* Build ARGS from &SYSLIST
&I       SETA  0                       * I indexes &SYSLIST
.LOOP1   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AGO   .LOOP1                  * And go process next entry
.LOOP1OK ANOP
&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,
.*
.* Generate embedded IF statement
&I       SETA  &BXA_STK                * Copy current stack pointer
&LABEL   IF    &ARGS
         AIF   (&I EQ &BXA_STK).MEND   * No new stack entry!
.*
.* Determine nesting level for this CASE statement
&I       SETA  &BXA_STK-1              * Point to previous stack entry
         AIF   (&I EQ 0).LVL1          * Stack empty?
&LVL     SETA  &BXA_STK_LVL(&I)        * Copy existing level
         AIF   ('&BXA_STK_OP(&I)' NE 'CASE').LVLUP
.* Preceding entry was a case: nest if NEST=YES
         AIF   ('&NEST' EQ 'NO').LVLOK * No: no change in level
.LVLUP   ANOP  ,
&LVL     SETA  &LVL+1                  * Increase nesting level
         AGO   .LVLOK
.LVL1    ANOP  ,
&LVL     SETA  1                       * First level
.LVLOK   ANOP  ,
.*
.* Modify stack to reflect CASE in stead of IF
&I       SETA  &BXA_STK                * Point to current stack entry
&BXA_STK_OP(&I) SETC 'CASE'            * Change IF into CASE
&BXA_STK_LVL(&I) SETA &LVL             * Modify nesting level
.*
.MEND    MEND
./ ADD NAME=CHKLIC   0100-20096-20096-0111-00101-00101-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999-2004
.**********************************************************************
         MACRO
.*
.* The assembler program accepts as a JCL-parameter a specification
.* for the variable SYSPARM. The value entered in the JCL will be
.* passed to a global set symbol named &SYSPARM. The value specified
.* in the JCL is decomposed by the SYSPARM macro, which translates the
.* specified values into settings for global SETx variables.
.* This macro checks the validity and acceptance (by the user)
.* of the license for the BXA macro library
.*
         CHKLIC &MACRO
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
.* Upon return:
.* &BXA_RC     will contain 0 if a valid license was accepted
.*                          4 if license (version) is not valid
.*                          8 if license was not accepted
.*                         12 for internal errors
.*
         GBLC  &SP_LICENSE             * License name / version
         GBLC  &SP_LICSTAT             * License status
         GBLA  &BXA_RC                 * Return code
&BXA_RC  SETA  12                      * Assume internal error
.*
.* Check whether the license was accepted
         AIF   ('&SP_LICSTAT' EQ 'IAGREE').AGREED
&BXA_RC  SETA  8                       * Indicate not accepted
         AGO   .LICERR
.AGREED  ANOP  ,
.*
.* Check that a valid license id was entered
         AIF   ('&SP_LICENSE' EQ 'GPL2.0').LICOK
         AIF   ('&SP_LICENSE' EQ 'GPL3.0').LICOK
&BXA_RC  SETA  4                       * Indicate invalid license
         AGO   .LICERR
.LICOK   ANOP  ,
.*
.* A valid license was specified and accepted
&BXA_RC  SETA  0                       * Indicate license ok
         AGO   .MEND
.*
.* Issue error message
.LICERR  ANOP  ,
         MNOTE &BXA_RC,'BXA macro &MACRO will not expand: no valid lice*
               nce accepted'
         AGO   .MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.MEND    MEND
./ ADD NAME=CHKLIT   0100-20096-20096-0111-00290-00290-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Macro for testing whether an argument contains a valid numeric
.*       literal value.
.*
.* Returns the value of the specified literal in &BXA_NUMVAL
.* And a returncode in &BXA_RC as follows:
.* 0 - valid literal, value is in &BXA_NUMVAL
.* 4 - empty literal, value 0 in &BXA_NUMVAL
.*   - or valid alternate form literal, value is in &BXA_NUMVAL
.* 8 - invalid literal, value 0 in &BXA_NUMVAL
.*
         CHKLIT &VAL,                  * Value to be tested            *
               &HEX=OK,                * Any other value disallows HEX *
               &BIN=OK,                * Any other value disallows Bin *
               &ALT=NOK,               * Alternate form not allowed    *
               &MSG=NO                 * Suppress message for oversized
.*
.* &VAL   Specifies the value to be tested.
.* &HEX   Specifies whether or not the supplied value may be specified
.*        as a hexadecimal literal. Defaults to OK.
.* &BIN   Specifies whether or not the supplied value may be specified
.*        as a binary literal. Defaults to OK.
.* &ALT   Specifies whether of not alternate form literals
.*        may be specified. Defaults to NOK.
.*        Allows the following literals:
.*        =X'....' if HEX=OK
.*        =B'....' if BIN=OK
.*        =F'...' or F'...'
.*        =H'...' or H'...'
.* &MSG   YES/NO display message if literal is valid, but too large
.*        to be used.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC CHKLIT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Define variables
         GBLA  &BXA_NUMVAL             * Value of literal
         LCLA  &I                      * Char index in VAL
         LCLA  &J                      * temp var
         LCLC  &C                      * A single character
         LCLC  &_VAL                   * Text value from &VAL
         LCLA  &VAL1,&VAL2             * Numeric value from &VAL
         LCLA  &MAX1,MAX2              * Maximum value allowed
         LCLA  &MIN1,MIN2              * Minimum value allowed
         LCLA  &BASE                   * Base nr for VAL1 and VAL2
         LCLB  &NEG                    * On if number is negative
.*
.* Set BASE to 1 million
&BASE    SETA  1000000                 * VAL2/MAX2/MIN2 count millions
&MAX1    SETA  2147                    * Max in millions
&MAX2    SETA  483647                  * Max in units if VAL1=MAX1
&MIN1    SETA  2147                    * Min in millions
&MIN2    SETA  483648                  * Min in units if VAL1=MIN1
.*
.* Check number of parameters
          AIF   (N'&SYSLIST LE 1).NOERR1
.ERR1A    MNOTE 4,'More than 1 argument found: remainder ignored'
.NOERR1   ANOP  ,                      *
.*
.* Empty string specified?
         AIF   (K'&VAL NE 0).NOERR2    *
         AGO   .RET4                   * Return with RC=4
.NOERR2  ANOP  ,                       *
.*
.* Remove leading = sign if ALT=OK
&_VAL    SETC  '&VAL'                  *
         AIF   ('&_VAL'(1,1) NE '=').VALOK
         AIF   ('&ALT' EQ 'NOK').RET8  * ALT=NOK: invalid
         AIF   (K'&_VAL LT 2).RET8     * Just an =sign: invalid
&_VAL    SETC  '&_VAL'(2,*)            * Remove leading =sign
.VALOK   ANOP  ,                       *
.*
.* Check for leading minus-sign
         AIF   ('&_VAL'(1,1) NE '-').NODASH
&NEG     SETB  1                       * Indicate negative number
         AIF   (K'&_VAL LT 2).RET8     * Just a -sign: invalid
&_VAL    SETC  '&_VAL'(2,*)            * Remove leading dash
.NODASH  ANOP  ,                       *
.*
.* Check whether the value is in decimal, HEX, or BIN notation
         AIF   (K'&_VAL LT 2).DIG
         AIF   ('&_VAL'(1,2) EQ 'X''').HEX
         AIF   ('&_VAL'(1,2) EQ 'x''').HEX
         AIF   ('&_VAL'(1,2) EQ 'B''').BIN
         AIF   ('&_VAL'(1,2) EQ 'b''').BIN
         AIF   ('&_VAL'(1,2) EQ 'F''').ALTDIG
         AIF   ('&_VAL'(1,2) EQ 'f''').ALTDIG
         AIF   ('&_VAL'(1,2) EQ 'H''').ALTDIG
         AIF   ('&_VAL'(1,2) EQ 'h''').ALTDIG
.*
.* Digital number: Check whether each position is in the range 0-9
.DIG     ANOP  ,                       *
&I       SETA  0                       * Scan &_VAL for characters
.LOOPD   ANOP  ,                       *
&I       SETA  &I+1                    * Point previous char in VAL
         AIF   (&I GT K'&_VAL).CHKVAL  * At end: return ok
&C       SETC  '&_VAL'(&I,1)           * Extract next character
&J       SETA  ('0123456789' FIND '&C') * Valid digit?
         AIF   (&J EQ 0).RET8          * Invalid character found
&C       SETC  '.00010203040506070809'(2*&J,2)
&J       SETA  &C                      * Turn into numeric value
&VAL1    SETA  10*&VAL1                * 'Shift' to make room
&VAL2    SETA  10*&VAL2+&J             *   and add new digit at end
         AIF   (&VAL2 LT &BASE).LOOPD  * No need to normalize
&J       SETA  &VAL2/&BASE             * Carry over to VAL1
&VAL1    SETA  &VAL1+&J                * Add carry over
&VAL2    SETA  &VAL2-(&BASE*&J)        * And remove carry over
         AIF   (&VAL1 GT &MAX1).RET8MSG * Nr is too big
         AGO   .LOOPD                  * Invalid character found
.*
.* Digital number in alternate form: H'...' or F'...'
.* Check whether properly enclosed in quotes and validity of all digits
.ALTDIG  ANOP  ,                       *
         AIF   ('&ALT' EQ 'NOK').RET8  * Not valid now
&I       SETA  K'&_VAL                 *
         AIF   (&I LT 4).RET8          * Too short to be valid!
         AIF   ('&_VAL'(2,1) NE '''').RET8 * Opening quote is ok?
         AIF   ('&_VAL'(&I,1) NE '''').RET8 * Closing quote is ok?
&_VAL    SETC  '&_VAL'(3,&I-3)         * Extract value string, which
         AIF   ('&_VAL'(1,1) NE '-').DIG * Not negative: go process
         AIF   (K'&_VAL LT 2).RET8     * Just a -sign: invalid
&_VAL    SETC  '&_VAL'(2,*)            * Remove leading dash
         AIF   (&NEG).RET8             * Double minus not allowed
&NEG     SETB  1                       * Indicate negative number
         AGO   .DIG                    * Go check remainder of nr
.*
.* Hexadecimal number: Check whether properly enclosed in quotes
.*                     and validity of all digits
.HEX     ANOP  ,                       *
         AIF   ('&HEX' NE 'OK').RET8   * Not valid now
         AIF   (&NEG).RET8             * Negative unsigned: impossible!
&I       SETA  K'&_VAL                 *
         AIF   (&I LT 4).RET8          * Too short to be valid!
         AIF   ('&_VAL'(2,1) NE '''').RET8 * Opening quote is ok?
         AIF   ('&_VAL'(&I,1) NE '''').RET8 * Closing quote is ok?
&_VAL    SETC  '&_VAL'(3,&I-3)         * Extract string of digits
.*
.* Scan left to right and create result value
&I       SETA  0                       * I indexes &_VAL
.LOOPH   ANOP  ,                       *
&I       SETA  &I+1                    * Point previous char in VAL
         AIF   (&I GT K'&_VAL).CHKVAL  * At end: check value
&C       SETC  '&_VAL'(&I,1)           * Extract next character
&J       SETA  ('0123456789ABCDEFabcdef' FIND '&C')
         AIF   (&J EQ 0).RET8          * Invalid digit found
&C       SETC  '.00010203040506070809101112131415101112131415'(2*&J,2)
&J       SETA  &C                      * Turn into numeric value
&VAL1    SETA  16*&VAL1                * 'Shift' to make room
&VAL2    SETA  16*&VAL2+&J             *   and add new digit at end
         AIF   (&VAL2 LT &BASE).LOOPH  * No need to normalize
&J       SETA  &VAL2/&BASE             * Carry over to VAL1
&VAL1    SETA  &VAL1+&J                * Add carry over
&VAL2    SETA  &VAL2-(&BASE*&J)        * And remove carry over
         AIF   (&VAL1 GT &MAX1).RET8MSG * Nr is too big
         AGO   .LOOPH                  * Invalid character found
.*
.* Binary number: Check whether properly enclosed in quotes
.*                and validity of all digits
.BIN     ANOP  ,                       *
         AIF   ('&BIN' NE 'OK').RET8   * Not valid now
         AIF   (&NEG).RET8             * Negative unsigned: impossible!
&I       SETA  K'&_VAL                 *
         AIF   (&I LT 4).RET8          * Too short to be valid!
         AIF   ('&_VAL'(2,1) NE '''').RET8 * Opening quote is ok?
         AIF   ('&_VAL'(&I,1) NE '''').RET8 * Closing quote is ok?
&_VAL    SETC  '&_VAL'(3,&I-3)         * Extract string of digits
.*
.* Scan left to right and create result value
&I       SETA  0                       * I indexes &_VAL
.LOOPB   ANOP  ,                       *
&I       SETA  &I+1                    * Point previous char in VAL
         AIF   (&I GT K'&_VAL).CHKVAL  * At end: check value
&C       SETC  '&_VAL'(&I,1)           * Extract next character
&J       SETA  ('01' FIND '&C')        *
         AIF   (&J EQ 0).RET8          * Invalid digit found
&C       SETC  '.0001'(2*&J,2)
&J       SETA  &C                      * Turn into numeric value
&VAL1    SETA  2*&VAL1                 * 'Shift' to make room
&VAL2    SETA  2*&VAL2+&J              *   and add new digit at end
         AIF   (&VAL2 LT &BASE).LOOPB  * No need to normalize
&J       SETA  &VAL2/&BASE             * Carry over to VAL1
&VAL1    SETA  &VAL1+&J                * Add carry over
&VAL2    SETA  &VAL2-(&BASE*&J)        * And remove carry over
         AIF   (&VAL1 GT &MAX1).RET8MSG * Nr is too big
         AGO   .LOOPB                  * Invalid character found
.*
.* Number seems to be ok: Value within range?
.CHKVAL  ANOP  ,                       *
         AIF   (&NEG).CHKVALN          *
         AIF   (&VAL1 LT &MAX1).RET0   * Small enough
         AIF   (&VAL1 GT &MAX1).RET8MSG * Too large
         AIF   (&VAL2 LE &MAX2).RET0   * Will fit snugly
         AGO   .RET8MSG                * Too large after all
.CHKVALN ANOP  ,                       * Check negative literal size
         AIF   (&VAL1 LT &MIN1).RET0   * Small enough
         AIF   (&VAL1 GT &MIN1).RET8MSG * Too large
         AIF   (&VAL2 LE &MIN2).RET0   * Will fit snugly
         AGO   .RET8MSG                * Too large after all
.*
.* Literal was ok: return RC=0 and value of literal
.RET0    ANOP  ,                       *
         AIF   (&NEG).RET0N            *
&BXA_NUMVAL SETA (&VAL1*&BASE)+&VAL2   *
&BXA_RC  SETA  0                       *
         MEXIT ,                       *
.RET0N   ANOP  ,                       * Return negative number
&BXA_NUMVAL SETA 0-(&VAL1*&BASE)       *
&BXA_NUMVAL SETA &BXA_NUMVAL-&VAL2     *
&BXA_RC  SETA  0                       *
         MEXIT ,                       *
.*
.* Literal was empty: return RC=4 and value of 0
.RET4    ANOP  ,                       *
&BXA_NUMVAL SETA 0                     *
&BXA_RC  SETA  4                       *
         MEXIT ,                       *
.*
.* Literal was invalid: return RC=8 and value of 0
.RET8    ANOP  ,                       *
&BXA_NUMVAL SETA 0                     *
&BXA_RC  SETA  8                       *
         MEXIT ,                       *
.*
.* Literal was valid but too large: return RC=8 and value of 0
.RET8MSG ANOP  ,                       *
         AIF   ('&MSG' EQ 'NO').RET8   * Suppress message
&_VAL    SETC  (DOUBLE '&VAL')         *
         MNOTE 4,'&_VAL is a valid literal, but it exceeds &MAX1.&MAX2'
&BXA_NUMVAL SETA 0                     *
&BXA_RC  SETA  8                       *
.*
.MEND    MEND
./ ADD NAME=CHKMAP   0100-20096-20096-0111-00112-00112-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Checking function for parameters of MAP-macro's
.*
&LABEL   CHKMAP &DSECT=,               * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC CHKMAP                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Initialize variables
&BXA_RC  SETA  0                       * Init to no error
.*
.* Check the LABEL parameter
         AIF   ('&DSECT' EQ 'YES' AND K'&LABEL NE 0).ERR1
         AGO   .NOERR1
.ERR1    MNOTE 4,'LABEL should not be specified with DSECT=YES'
         AIF   (&BXA_RC GE 4).NOERR1
&BXA_RC  SETA  4
.NOERR1  ANOP
.*
.* Check the DSECT parameter
         AIF   ('&DSECT' EQ 'YES').NOERR2
         AIF   ('&DSECT' EQ 'NO').NOERR2
.ERR2    MNOTE 8,'DSECT parameter not YES or NO'
         AIF   (&BXA_RC GE 8).NOERR2
&BXA_RC  SETA  8
.NOERR2  ANOP
.*
.* Check PRFX parameter
         AIF   ('&DSECT' EQ 'YES' AND K'&PRFX NE 0).ERR3A
         AGO   .NOERR3
.ERR3A   MNOTE 4,'PRFX parameter specified with DSECT=YES: ignored'
         AIF   (&BXA_RC GE 4).NOERR3
&BXA_RC  SETA  4
.NOERR3  ANOP
.*
.* For DSECT=NO either LABEL or PRFX must be specified
         AIF   ('&DSECT' EQ 'YES').NOERR4
         AIF   (K'&LABEL EQ 0 AND K'&PRFX EQ 0).ERR4A
         AGO   .NOERR4
.ERR4A   MNOTE 8,'Either LABEL or PRFX must be specified with DSECT=NO'
         AIF   (&BXA_RC GE 8).NOERR4
&BXA_RC  SETA  8
.NOERR4  ANOP
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES' AND K'&CB NE 0).ERR5A
         AGO   .NOERR5
.ERR5A   MNOTE 4,'CB parameter specified with DSECT=YES: ignored'
         AIF   (&BXA_RC GE 4).NOERR5
&BXA_RC  SETA  4
.NOERR5  ANOP
.*
.MEND    MEND
./ ADD NAME=CHKNUM   0100-20096-20096-0111-00173-00173-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Macro for testing whether an argument contains a valid numeric
.*       literal value.
.*
&LABEL   CHKNUM &MACRO=,               * Name of invoking macro        *
               &NAME=,                 * Name of variable being tested *
               &VAL=,                  * Value of variable to be tested*
               &MSGLVL=8,              * Msglvl in case of error       *
               &HEX=OK                 * Any other value disallows HEX
.*
.* &MACRO specifies the name of the invoking macro. This name will
.*        be used on any MNOTEs generated.
.* &NAME  Specifies the name of the variable being tested. This name
.*        will be used on any MNOTEs generated.
.* &VAL   Specifies the value to be tested.
.* &MSGLVL Specifies the MSGLVL to use when generating an MNOTE.
.*        Value can be 0-255, * or **. Defaults to 8. If specified as
.*        ** messages will be suppressed.
.* &HEX   Specifies whether or not the supplied value may be specified
.*        as a hexadecimal literal. Defaults to OK.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC CHKNUM                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Define global to return SETA-value if VAL is found valid
          GBLA  &BXA_NUMVAL
&BXA_NUMVAL SETA 0                     * Reset to default 0
.*
.* Define index field to loop through &VAL field
         LCLA  &I
.*
.* Check the MACRO parameter
         AIF   (K'&MACRO NE 0).NOERR1
         AIF   ('&MSGLVL' EQ '**').NOERR1
.ERR1    MNOTE 8,'MACRO parameter not specified'
.NOERR1  ANOP
.*
.* Check the NAME parameter
         AIF   (K'&NAME NE 0).NOERR2
         AIF   ('&MSGLVL' EQ '**').NOERR2
.ERR2    MNOTE 8,'NAME parameter not specified'
.NOERR2  ANOP
.*
.* Check the VAL parameter
         AIF   (K'&VAL NE 0).NOERR3
.ERR3    MNOTE 8,'VAL parameter not specified'
.NOERR3  ANOP
.*
&LABEL   LABEL ,
.*
.* If argument is empty: issue error
         AIF   (K'&VAL NE 0).NOTEMPTY
         AIF   ('&MSGLVL' EQ '**').MEND
         MNOTE &MSGLVL,'&NAME in &MACRO contains no value'
         MEXIT
.NOTEMPTY ANOP
.*
.* Check whether the value is in HEX notation
         AIF   ('&VAL'(1,1) EQ 'X').HEX
         AIF   ('&VAL'(1,1) EQ 'x').INVALID_HEX1
.*
.* Digital number: Check whether each position is in the range 0-9
&I       SETA  K'&VAL
.LOOP_D  ANOP
         AIF   ('&VAL'(&I,1) LT '0').INVALID_DEC1
         AIF   ('&VAL'(&I,1) GT '9').INVALID_DEC1
&I       SETA  &I-1
         AIF   (&I GT 0).LOOP_D
.* VAL is valid: put value into return field and exit
&BXA_NUMVAL SETA &VAL
         MEXIT
.*
.* Hexadecimal number: Check whether quotes have been in the range 0-9
.*                     or A-F.
.HEX     ANOP
&I       SETA  K'&VAL
         AIF   (&I LT 4).INVALID_HEX1
         AIF   ('&VAL'(2,1) NE '''').INVALID_HEX1
         AIF   ('&VAL'(&I,1) NE '''').INVALID_HEX1
&I       SETA  &I-1
.*
.LOOP_H  ANOP
         AIF   ('&VAL'(&I,1) LT 'A').INVALID_HEX2
         AIF   ('&VAL'(&I,1) LE 'F').VALID_HEX
         AIF   ('&VAL'(&I,1) LT '0').INVALID_HEX2
         AIF   ('&VAL'(&I,1) GT '9').INVALID_HEX2
.VALID_HEX ANOP
&I       SETA  &I-1
         AIF   (&I GT 2).LOOP_H
.* VAL is valid: put value into return field and exit
&BXA_NUMVAL SETA &VAL
         MEXIT
.*
.* Invalid character detected: issue error
.INVALID_DEC1 ANOP
         AIF   ('&MSGLVL' EQ '**').MEND
         MNOTE &MSGLVL,'&NAME in &MACRO contains invalid decimal digit(*
               s)'
         MEXIT
.*
.* Invalid hex-specification detected: issue error
.INVALID_HEX1 ANOP
         AIF   ('&MSGLVL' EQ '**').MEND
         MNOTE &MSGLVL,'&NAME in &MACRO contains invalidly specified he*
               xadecimal number'
         MEXIT
.*
.* Invalid hex character detected: issue error
.INVALID_HEX2 ANOP
         AIF   ('&MSGLVL' EQ '**').MEND
         MNOTE &MSGLVL,'&NAME in &MACRO contains invalid hexadecimal di*
               git(s)'
         MEXIT
.*
.MEND    MEND
./ ADD NAME=CHKREG   0100-20096-20096-0111-00138-00138-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro checks if the argument given is a register
.*
.* &BXA_RC will contain 0 if &REG is an EQUated register
.* &BXA_RC will contain 4 if &REG is a valid number 0-15
.* &BXA_RC will contain 8 if &REG is not a valid register
.* &BXA_NUMVAL will contain the register number if &BXA_RC is 0 or 4
.*
         CHKREG &REG,                  * Value to be tested            *
               &TYPE                   * Type of register required
.*
.* &REG   Name or number to be tested for valid register number
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC CHKREG                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_NUMVAL             * Register number
         LCLA  &I
.*
.* Check the TYPE parameter
         AIF   (K'&TYPE EQ 0).NOERR1
         AIF   ('&TYPE' EQ 'g').NOERR1
         AIF   ('&TYPE' EQ 'a').NOERR1
         AIF   ('&TYPE' EQ 'f').NOERR1
         AIF   ('&TYPE' EQ 'c').NOERR1
.ERR1A   MNOTE 8,'TYPE of register must be g, a, f, or c'
.NOERR1  ANOP
.*
.* To be a valid register, &REG must either be a literal number
.* or an EQUated register. The former must be tested explicitly,
.* the latter can be tested against the register type tables.
         AIF   (K'&REG EQ 0).RETURN8   * No register: invalid
&I       SETA  ('&REG' FIND '+-*/(.,)') * Complex or simple expression?
         AIF   (&I GT 0).RETURN8       * Not a simple expression
&I       SETA  ('&REG' FIND '''')      * Contains a quote?
         AIF   (&I GT 0).LITERAL       * Yes, must be a literal
&I       SETA  ('0123456789' FIND '&REG'(1,1)) * Decimal constant?
         AIF   (&I GT 0).LITERAL       * Yes, must be a literal
.*
.* REG is a valid EQU-name. Check its type.
         GBLC  &(BXA_REGT_&REG)        * Declare type field of &REG
         AIF   ('&(BXA_REGT_&REG)' EQ '').RETURN8 * Not a register
         AIF   (K'&TYPE EQ 0).RETURN0  * No explicit type: return ok
         AIF   ('&(BXA_REGT_&REG)' EQ '&TYPE').RETURN0 * Type ok
         AGO   .RETURN8                * Register is of wrong type
.*
.* &reg appears to be a literal. Check whether it designates a valid
.* register between 0 and 15. (0, 2, 4, or 6 for floating point reg.)
.LITERAL ANOP  ,                       *
         CHKLIT &REG                   * Valid literal?
         AIF   (&BXA_RC NE 0).RETURN8  * No invalid
         AIF   (&BXA_NUMVAL LT 0).RETURN8 * Negative regs dont exist
         AIF   (&BXA_NUMVAL GT 15).RETURN8 * 15 is max register number
         AIF   ('&TYPE' NE 'f').RETURN4 * This is a valid register
         AIF   (&BXA_NUMVAL EQ 0).RETURN4 * Check that this is an
         AIF   (&BXA_NUMVAL EQ 2).RETURN4 *   existing floating point
         AIF   (&BXA_NUMVAL EQ 4).RETURN4 *   register number.
         AIF   (&BXA_NUMVAL EQ 6).RETURN4 *
         AGO   .RETURN8                * Return invalid
.*
.* Register specified is not a valid register
.RETURN8 ANOP
&BXA_NUMVAL SETA 0                     * No valid register
&BXA_RC  SETA 8                        * Return error
         MEXIT
.*
.* Register specified is a numeric literal number 0-15
.* &BXA_NUMVAL already contains the register number
.RETURN4 ANOP
&BXA_RC  SETA 4                        * Return warning
         MEXIT
.*
.* Register specified is a declared register (of any type)
.RETURN0 ANOP
         GBLA  &(BXA_REGN_&REG)        * Declare type field of &REG
&BXA_NUMVAL SETA &(BXA_REGN_&REG)      * Return register number
&BXA_RC  SETA 0
.*
.MEND    MEND
./ ADD NAME=CLEAR    0100-20096-20096-0111-00434-00434-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Clear an area of storage
.*
.* For TYPE=LONG, registers R0, R1, and R15 will be used
.* For TYPE=SHORT, all registers retain their values
.*
&LABEL   CLEAR &AREA,                  * Area to be cleared            *
               &FILL,                  * Filler to use for clearing    *
               &TYPE                   * LONG, SHORT, XC
.*
.* &AREA  specifies the area of storage to be cleared
.*        can be specified as a label, or as (label,length).
.*            label and/or length may be specified as (reg)
.*        May also be specified as (gpr,*ADDR) to clear high-order bit
.*            in specified general purpose register.
.*        If area specifies R0-R15 or AR0-AR15 and &FILL and &TYPE are
.*        both omitted, then the designated register will be cleared
.*        to hex zeroes.
.* &FILL  specifies the filler value to use, defaults to blanks for
.*        character fields, otherwise to binary zeros.
.* &TYPE  SHORT for areas up to 257 bytes in length, LONG for all other
.*        defaults to SHORT. XC for short areas to be cleared using XC.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC CLEAR                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_NUMVAL             * Result from CHKREG/CHKNUM
         GBLC  &SYSASCE                * ASC mode
         LCLC  &_AREA                  * Area designation
         LCLC  &_AREG                  * Register used as area pointer
         LCLC  &_LEN                   * Length of area
         LCLC  &_LREG                  * Register used as length ptr
         LCLC  &_FILL                  * Filler to use
         LCLC  &_TYPE                  * Type indication: SHORT/LONG
         LCLC  &EREG                   * Even register of a pair
         LCLC  &OREG                   * Odd register of a pair
         LCLC  &R0                     * YES/NO allow use of R0
         LCLA  &I                      *
         LCLB  &BIT0                   * BIT0 option specified
.*
.* Check Area parameter
&_AREA   SETC  '&AREA'                 * Assume a single operand
         AIF   (K'&AREA NE 0).NOERR1A
.ERR1A   MNOTE 8,'First operand must specify area to clear'
.NOERR1A ANOP
         AIF   ('&AREA'(1,1) NE '(').DFTLEN
.* Sublist notation: must specify location and length
         AIF   (N'&AREA EQ 0).ERR1B
         AIF   (N'&AREA EQ 1).ERR1C
         AIF   (N'&AREA GT 2).ERR1D
&_AREA   SETC  '&AREA(1)'              * Extract area designation
&_LEN    SETC  '&AREA(2)'              * Extract length designation
         AGO   .NOERR1D
.ERR1B   MNOTE 8,'First parameter invalid: empty sublist'
         AGO   .NOERR1D
.ERR1C   MNOTE 8,'First parameter invalid: length missing'
         AGO   .NOERR1D
.ERR1D   MNOTE 4,'First parameter invalid: too many sub-parameters'
.NOERR1D ANOP
.* If Area specified as a register: extract register
         AIF   ('&_AREA'(1,1) NE '(').NOERR1F
         AIF   (N'&AREA(1) EQ 0).ERR1E
         AIF   (N'&AREA(1) GT 1).ERR1F
&_AREG   SETC  '&AREA(1,1)'            * Extract area register
         AGO   .NOERR1F
.ERR1E   MNOTE 8,'First parameter invalid: missing register designation*
               '
         AGO   .NOERR1F
.ERR1F   MNOTE 8,'First parameter invalid: more than 1 register specifi*
               ed as pointer'
.NOERR1F ANOP
.* If Area-length specified as a register: extract register
         AIF   ('&_LEN'(1,1) NE '(').NOERR1H
         AIF   (N'&AREA(2) EQ 0).ERR1G
         AIF   (N'&AREA(2) GT 1).ERR1H
&_LREG   SETC  '&AREA(2,1)'            * Extract length register
         AGO   .NOERR1H
.ERR1G   MNOTE 8,'First parameter invalid: missing length designation'
         AGO   .NOERR1F
.ERR1H   MNOTE 8,'First parameter invalid: more than 1 register specifi*
               ed as length'
.NOERR1H ANOP
.* If length specifies *ADDR area must be a general purpose register
         AIF   ('&_LEN' NE '*ADDR').NOERR1
&BIT0    SETB  1                       * Indicate BIT0 was specified
         CHKREG &_AREA,g               * Is it a valid gpr?
         AIF   (&BXA_RC GT 4).ERR1I    * No: issue error
         AGO   .DFTLEN                 * Ok: set length by default
.ERR1I   ANOP  ,                       *
&_AREA   SETC  (DOUBLE '&_AREA')       *
         MNOTE 8,'&_AREA is not a valid general purpose register'
.DFTLEN  ANOP  ,                       *
&I       SETA  L'&AREA                 * Default to length of field
&_LEN    SETC  '&I'                    *   and insert into length var.
.NOERR1  ANOP  ,
.*
.* Check the Fill parameter
&_FILL   SETC  '&FILL'                 * First default to spec'd value
         AIF   (K'&FILL EQ 0).DFT2
         AIF   (&BIT0).ERR2E
         AIF   (K'&FILL LT 4).ERR2A
         AIF   ('&FILL'(1,1) EQ '(').ERR2B
         AIF   ('&FILL'(2,1) NE '''').ERR2C
         AIF   ('&FILL'(K'&FILL,1) NE '''').ERR2C
         AIF   ('&FILL'(1,1) EQ 'B').NOERR2
         AIF   ('&FILL'(1,1) EQ 'C').NOERR2
         AIF   ('&FILL'(1,1) EQ 'X').NOERR2
         AGO   .ERR2D
.ERR2A   MNOTE 8,'Specified filler is not a valid literal'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Filler cannot be specified as a register'
         AGO   .NOERR2
.ERR2C   MNOTE 8,'Insufficient or missing quotes in literal for filler'
         AGO   .NOERR2
.ERR2D   MNOTE 8,'Filler must be specified as B, C, or X constant'
         AGO   .NOERR2
.ERR2E   MNOTE 8,'Filler must not be specified with *ADDR option'
         AGO   .NOERR2
.DFT2    ANOP
&_FILL   SETC  'X''00'''               * Second default: zeroes
         AIF   ('&_AREA'(1,1) EQ '(').NOERR2 * Ok for register
         AIF   ('&TYPE' EQ 'XC').NOERR2 * Ok for TYPE=XC
         AIF   (T'&_AREA NE 'C').NOERR2 * Ok for non-char data
&_FILL   SETC  'C'' '''                * Third default: blanks
.NOERR2  ANOP
.*
.* Check the TYPE parameter
         AIF   (K'&TYPE EQ 0).NOERR3
         AIF   (&BIT0).ERR3B
         AIF   ('&TYPE' EQ 'SHORT').SETSHORT
         AIF   ('&TYPE' EQ 'LONG').SETLONG
         AIF   ('&TYPE' EQ 'XC').SETXC
.ERR3A   MNOTE 8,'Third parameter must specify LONG, SHORT, or XC'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'Type parameter must not be specified with *ADDR optio*
               n'
.NOERR3  ANOP
.*
.* Type not given: determine value from other operands as follows:
.* - If &AREA specifies a valid register (R0-R15), and
.*   &FILL and &TYPE are both omitted, default to XR
.* - If &AREA specifies a valid access register (AR0-AR15), and
.*   &FILL and &TYPE are both omitted, default to LAE
.* - If &AREA specifies a valid register (R0-R15), and
.*   length specifies a valid access register default to LAE too
.* - If length is in a register, default to LONG
.* - if length is a valid literal, check its value
.*   up to 257: use SHORT, beyond: use LONG
.* - All others: default to SHORT
.*
         AIF   (&BIT0).SETBIT0         *
         AIF   (K'&FILL NE 0).NOREG    * Fill specified: not a reg
         AIF   (K'&TYPE NE 0).NOREG    * Type specified: not a reg
         AIF   ('&AREA'(1,1) EQ '(').SLIST * Sublist may be a register
         CHKREG &AREA,g                * Valid GPR?
         AIF   (&BXA_RC EQ 0).SETXR    * Yes
         CHKREG &AREA,a                * Valid AR?
         AIF   (&BXA_RC EQ 0).SETLAE   * Yes
         AGO   .NOREG                  * Apparently not a register
.SLIST   ANOP  ,                       * Sublist: (reg,areg) ??
         CHKREG &_AREA,g               * First is a GPR?
         AIF   (&BXA_RC NE 0).NOREG    * No: not a register
&I       SETA  &BXA_NUMVAL             * Keep register number
         CHKREG &_LEN,a                * Second is an AR?
         AIF   (&BXA_RC NE 0).NOREG    * No: not a register
         AIF   (&BXA_NUMVAL EQ &I).SETLAE * Clear both GPR and AR
         MNOTE 8,'Cannot clear &_AREA and &_LEN at the same time'
         MEXIT ,                       *
.* Ok: Area is definitely not a valid register
.NOREG   ANOP  ,                       *
         AIF   (K'&_LREG GT 0).SETLONG * Register defaults to LONG
         CHKNUM MACRO=CLEAR,           * &_LEN a valid number?         *
               NAME=LENGTH,            *                               *
               VAL=&_LEN,              *                               *
               MSGLVL=**               * No error messages
         AIF   (&BXA_NUMVAL EQ 0).SETSHORT  * Not a num: assume SHORT
         AIF   (&BXA_NUMVAL GT 257).SETLONG * Too long for MVC or XC
         AIF   (&BXA_NUMVAL GT 64).SETSHORT * Too long for XC
         AIF   ('&_FILL' EQ 'X''00''').SETXC * Use XC to clear
         AIF   ('&_FILL' EQ 'B''00000000''').SETXC
         AGO   .SETSHORT               * Default to SHORT
.*
.SETBIT0 ANOP
&_TYPE   SETC  'BIT0'                  * BIT0: will use LA
         AGO   .TYPEOK
.SETXC   ANOP
&_TYPE   SETC  'XC'                    * SHORT: will use XC
         AGO   .TYPEOK
.SETSHORT ANOP
&_TYPE   SETC  'SHORT'                 * SHORT: will use MVC
         AGO   .TYPEOK
.SETLONG ANOP
&_TYPE   SETC  'LONG'                  * LONG: will use MVCL
         AGO   .TYPEOK
.SETXR   ANOP
&_TYPE   SETC  'XR'                    * XR: clear a register
         AGO   .TYPEOK
.SETLAE  ANOP
&_TYPE   SETC  'LAE'                   * LAE: Clear an access register
.TYPEOK  ANOP
.*
.* Generate code
         AIF   ('&_TYPE' EQ 'LONG').LONG
         AIF   ('&_TYPE' EQ 'SHORT').SHORT
         AIF   ('&_TYPE' EQ 'XC').XC
         AIF   ('&_TYPE' EQ 'XR').XR
         AIF   ('&_TYPE' EQ 'LAE').LAE
         AIF   ('&_TYPE' EQ 'BIT0').LA
         MNOTE 12,'Internal error in CLEAR'
         MEXIT
.*
.* Generate logic for TYPE=XC
.XC      ANOP
.* Determine which work register to use
         AIF   (K'&_AREG NE 0 AND K'&_LREG NE 0).XCRR
         AIF   (K'&_AREG NE 0 AND K'&_LREG EQ 0).XCRL
         AIF   (K'&_AREG EQ 0 AND K'&_LREG NE 0).XCLR
         AIF   (K'&_AREG EQ 0 AND K'&_LREG EQ 0).XCLL
.*
.XCLL    ANOP  ,                       * Area and length are literal
         CHKLIT &_LEN                  *
         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 1).XCLL1
&LABEL   XC    &_AREA.(&_LEN),&_AREA   * Set whole field to zeroes
         MEXIT ,                       *
.XCLL1   ANOP  ,                       *
&LABEL   MVI   &_AREA,X'00'            * Set whole field to zeroes
         MEXIT ,                       *
.*
.XCLR    ANOP  ,                       * Area literal, length in reg
&LABEL   EXXC  &_AREA.(_LREG),&_AREA   * Set area to zeroes
         B     _CLRMVD&SYSNDX          * Branch over MVC-instruction
         MEXIT
.*
.XCRL    ANOP  ,                       * Area in reg, length literal
         CHKLIT &_LEN                  *
         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 1).XCRL1
&LABEL   XC    0(&_LEN,&_AREG),0(&_AREG) * Set to all zeroes
         MEXIT ,                       *
.XCRL1   ANOP  ,                       *
&LABEL   MVI   0(&_AREG),X'00'         * Set to all zeroes
         MEXIT ,                       *
.*
.XCRR    ANOP  ,                       * Area in reg, length in reg
&LABEL   EXXC  0(&_LREG,&_AREG),0(&_AREG) * Set area to zeroes
         MEXIT
.*
.* Generate logic for TYPE=SHORT
.SHORT   ANOP
.* Determine which work register to use
         AIF   (K'&_AREG NE 0 AND K'&_LREG NE 0).SHORTRR
         AIF   (K'&_AREG NE 0 AND K'&_LREG EQ 0).SHORTRL
         AIF   (K'&_AREG EQ 0 AND K'&_LREG NE 0).SHORTLR
         AIF   (K'&_AREG EQ 0 AND K'&_LREG EQ 0).SHORTLL
.*
.SHORTLL ANOP  ,                       * Area and length are literal
&LABEL   MVI   &_AREA,&_FILL           * Move first filler byte
         CHKLIT &_LEN                  *
         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 1).MEND
         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 2).SHORTLL2
         MVC   1+&_AREA.(&_LEN-1),&_AREA * Propagate filler byte
         MEXIT
.SHORTLL2 ANOP ,                       * Length of area is 2
         MVI   1+&_AREA,&_FILL         * Move first filler byte
         MEXIT
.*
.SHORTLR ANOP  ,                       * Area literal, length in reg
&LABEL   MVI   &_AREA,&_FILL           * Move first filler byte
         DEC   &_LREG                  * Decrement for 1st filler byte
         DEC   &_LREG                  * Decrement for EX
         EXMVC 1+&_AREA.(&_LREG),&_AREA,NODEC * Length modified by EX
         INC   &_LREG,2                * Reset length register
         MEXIT
.*
.SHORTRL ANOP  ,                       * Area in reg, length literal
&LABEL   MVI   0(&_AREG),&_FILL        * Move first filler byte
         CHKLIT &_LEN                  *
         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 1).MEND
         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 2).SHORTRL2
         MVC   1(&_LEN-1,&_AREG),0(&_AREG) * Propagate filler byte
         MEXIT ,                       *
.SHORTRL2 ANOP ,                       * Length of area is 2
         MVI   1(&_AREG),&_FILL        * Move first filler byte
         MEXIT ,                       *
.*
.SHORTRR ANOP  ,                       * Area in reg, length in reg
&LABEL   MVI   0(&_AREG),&_FILL        * Move first filler byte
         DEC   &_LREG                  * Decrement for 1st filler byte
         DEC   &_LREG                  * Decrement for EX
         EXMVC 1(&_LREG,&_AREG),0(&_AREG),NODEC * Length modified by EX
         INC   &_LREG,2                * Reset length register
         MEXIT
.*
.* Generate logic for TYPE=LONG
.LONG    ANOP
.* Common code for type=long
         CHKLIT &_FILL                 * Determine value of literal
         AIF   (&BXA_RC NE 0).LOADR15  * Valid literal in &_FILL ?
         AIF   (&BXA_NUMVAL NE 0).LOADR15 * Literal of X'00'?
&LABEL   CLEAR R15                     * Set filler/src length to zero
         AGO   .LENOK
.LOADR15 ANOP  ,
&LABEL   LA    R15,&_FILL              * Set up filler byte
         SLL   R15,24                  *  and length of source to zero
.LENOK   ANOP  ,
.*
.* Determine which work registers to use
&R0      SETC  'YES'                   * Normally R0/R1 will do fine
         AIF   ('&SYSASCE' EQ 'P').EQUREG
&R0      SETC  'NO'                    * AR-mode: cannot use R0!
.*
.EQUREG  ANOP  ,
         EQUREG PAIR=YES,R0=&R0        * Try to allocate a pair of regs
         AIF   (&BXA_RC NE 0).ERR4A    * Alloc failed
&EREG    SETC  'R&BXA_NUMVAL'          * Assigned even register name
&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Increment to odd register
&OREG    SETC  'R&BXA_NUMVAL'          * Assigned odd register name
         MNOTE *,'CLEAR - Using &EREG and &OREG'
         AGO   .NOERR4
.ERR4A   MNOTE 8,'No register pair available for MVCL'
         AGO   .MEND
.NOERR4  ANOP  ,
.*
.* Load even and odd registers with destination ptr and length
         AIF   (K'&_AREG NE 0).LONGDR  * Load dest ptr from register?
         AIF   ('&SYSASCE' EQ 'P').LONGDL_LA * Primary or AR mode?
         LAE   &EREG,&_AREA            * Load destination address
         AGO   .LONGD_OK               * Destination ptr loaded
.LONGDL_LA ANOP ,
         LA    &EREG,&_AREA            * Load destination address
         AGO   .LONGD_OK               * Destination ptr loaded
.LONGDR  ANOP  ,
         AIF   ('&SYSASCE' EQ 'P').LONGDR_LR * Primary or AR mode?
         LAE   &EREG,0(,&_AREG)        * Load destination address
         AGO   .LONGD_OK               * Destination ptr loaded
.LONGDR_LR ANOP ,
         LR    &EREG,&_AREG            * Load destination address
.LONGD_OK ANOP ,                       * &EREG now loaded with dest.ptr
.*
         AIF   (K'&_LREG NE 0).LONGLR  * Length in register?
         L     &OREG,=A(&_LEN)         * Load length of dest. area
         AGO   .LONGL_OK               * Length is now ok
.LONGLR  ANOP  ,                       *
         LR    &OREG,&_LREG            * Load length of dest. from reg.
.LONGL_OK ANOP ,                       * Length now in &OREG
.*
         MVCL  &EREG,R14               * Fill entire area
         MEXIT
.*
.* Generate logic for type XR
.XR      ANOP  ,                       * Area in reg, length in reg
&LABEL   XR    &AREA,&AREA             * Wipe register
         MEXIT
.*
.* Generate logic for type LAE
.LAE     ANOP  ,                       * Wipe an access register
         AIF   (T'&_AREA EQ 'g').LAE3  * Clearing a GPR/AR pair?
         CHKREG &_AREA                 * Determine register number
&I       SETA  &BXA_NUMVAL             * Save AR number
&_AREA   SETC  '&_AREA'(2,*)           * Create Rnn from ARnn
         CHKREG &_AREA,g               * Valid GPR with same nr?
         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ &I).LAE2
&_AREA   SETC  'R&I'                   * Use default register name
.LAE2    ANOP  ,                       *
&LABEL   LAE   &_AREA,0(&_AREA,0)      * Wipe access register
         MEXIT ,                       *
.LAE3    ANOP  ,                       *
&LABEL   LAE   &_AREA,0                * Wipe register and access reg.
         MEXIT ,                       *
.*
.* Generate logic for type BIT0
.LA      ANOP  ,                       * Area in reg, length in reg
&LABEL   LA    &_AREA,0(&_AREA,0)      * Wipe hi-order bit
         MEXIT ,                       *
.*
.MEND    MEND
./ ADD NAME=CMDTXT   0100-20096-20096-0111-00093-00093-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates a command-text for use with MGCRE macro
.*
&LABEL   CMDTXT &TXT                   * Text for the command
.*
.* &LABEL Specifies the label for the text-parameter
.* &TXT   Specifies the text to be used, enclosed in single quotation
.*        marks
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC CMDTXT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Check the LABEL parameter
         AIF   (K'&LABEL EQ 0).ERR1A
         AGO   .NOERR1
.ERR1A   MNOTE 8,'Label parameter not specified'
.NOERR1  ANOP
.*
.* Check the TXT parameter
         AIF   (K'&TXT EQ 0).ERR2A
         AIF   (K'&TXT LT 3).ERR2B
         AIF   ('&TXT'(1,1) NE '''').ERR2B
         AIF   ('&TXT'(N'&TXT,1) NE '''').ERR2B
         AGO   .NOERR2
.ERR2A   MNOTE 8,'TXT parameter not specified'
         MEXIT
.ERR2B   MNOTE 8,'TXT parameter not properly enclosed in quotes'
.NOERR2  ANOP
.*
.* Generate header text constant
&LABEL   DC    AL2(_CMD&SYSNDX-2)      * Length of command text
         DC    C&TXT                   * Text for command
_CMD&SYSNDX EQU *-&LABEL
.*
.MEND    MEND
./ ADD NAME=CPY      0100-20096-20096-0111-02832-02832-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Copy a field - register or storage
.*
.* For oversized packed fields unpacking may be done by processing
.*     left to right in clusters of several bytes at a time.
.* For oversized zoned fields packing may be done by processing
.*     right to left in a loop.
.* For every EQUREG a check must be made whether the source and/or
.*     destination registers are in USE. Change EQUREG with a
.*     NO=(...) keyword.
.*
&LABEL   CPY   &TO,                    * Destination field             *
               &FROM,                  * Source field                  *
               &WARN                   * NOWARN or nothing
.*
.* &TO    specifies the field or register to be filled,
.*     or (field,length)     to override the length of the field
.*     or (reg,end_reg_name) to copy to a set of registers
.*     or (reg,nr_of_regs)   to copy to a set of registers
.*     or (gpr_name,ar_name) to copy to 1 or more GPR/AR pairs
.*     or ((gpr),len)        to copy to a register-designated area
.*     or ((gpr),(gpr))      to copy to a register-designated area
.* &FROM  specifies the field or register to be copied,
.*     or (field,length)     to override the length of the field
.*     or (reg,nr_of_regs)   to copy from a set of registers
.*     or (reg,end_reg_name) to copy from a set of registers
.*     or (gpr_name,ar_name) to copy from 1 or more GPR/AR pairs
.*     or ((gpr),len)        to copy from a register-designated area
.*     or ((gpr),(gpr))      to copy from a register-designated area
.*     or *STACK             to retrieve registers from the stack
.* &WARN  specifies whether or not a warning is to be issued if
.*        &TO and &FROM designate the same field/register
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC CPY                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &SYSASCE                * Current ASC mode: P or AR
         GBLA  &BXA_NUMVAL             * Register nr from CHKREG
         LCLC  &_LABEL                 * LABEL parameter
         LCLC  &_TO1                   * TO field designation
         LCLC  &_TO2                   * TO length
         LCLC  &TO_TP                  * Type of TO location
         LCLA  &TO_LEN                 * Length of TO location
         LCLA  &TO_REG                 * TO register number
         LCLB  &TO_EREG                * TO end register specified?
         LCLC  &_FROM1                 * FROM field designation
         LCLC  &_FROM2                 * FROM length
         LCLC  &FROM_TP                * Type of FROM location
         LCLA  &FROM_LEN               * Length of FROM location
         LCLA  &FROM_REG               * FROM register number
         LCLB  &FROM_EREG              * FROM end register specified?
         LCLA  &FROM_VAL               * Value of FROM literal
         LCLC  &SIGN                   * Sign of FROM literal value
         LCLB  &EQULIT                 * Source is an equated literal
         LCLA  &I,&J                   *
         LCLA  &LEN                    * Length value
         LCLC  &LENC                   * Length value (character)
         LCLA  &PAD_LEN                * Length of pad area
         LCLC  &PAD_ADR                * Length of pad area
         LCLB  &PAD0                   * On for pad with zeros         *
                                       * Off for pad with blanks
         LCLC  &MASK                   * Byte mask
         LCLC  &REG                    * A register name
         LCLC  &ODDREG                 * Associated odd reg name
         LCLA  &REG_CT                 * Count of registers
         LCLC  &REG_SRCP               * Source ptr reg for MVCL
         LCLC  &REG_SRCL               * Source length reg for MVCL
         LCLC  &REG_DSTP               * Destination ptr reg for MVCL
         LCLC  &REG_DSTL               * Destination leng reg for MVCL
.*
.* Copy the LABEL parameter
&_LABEL  SETC  '&LABEL'                *
.*
.* Check TO parameter
         AIF   (K'&TO EQ 0).ERR1A      *
&_TO1    SETC  '&TO'                   * Copy destination field
         AIF   ('&TO'(1,1) NE '(').NOERR1 * No length specified
         AIF   (N'&TO EQ 0).ERR1B      * Must have
         AIF   (N'&TO EQ 1).ERR1C      *   exactly two
         AIF   (N'&TO GT 2).ERR1D      *   sub-operands
.NOERR1D ANOP  ,                       *
&_TO1    SETC  '&TO(1)'                * Extract field designation
&_TO2    SETC  '&TO(2)'                *     and field length
         AIF   (K'&_TO1 EQ 0).ERR1B    *
         AIF   (K'&_TO2 EQ 0).ERR1C    *
         AGO   .NOERR1                 *
.ERR1A   MNOTE 8,'Missing first operand - destination of copy'
         MEXIT ,                       *
.ERR1B   MNOTE 8,'Destination in parentheses: missing field name'
         MEXIT ,                       *
.ERR1C   MNOTE 8,'Destination in parentheses: missing length'
         MEXIT ,                       *
.ERR1D   MNOTE 4,'Destination in parentheses: too many subparameters'
         AGO   .NOERR1D                *
.NOERR1  ANOP  ,                       *
.*
.* Check FROM parameter
         AIF   (K'&FROM EQ 0).ERR2A    *
&_FROM1  SETC  '&FROM'                 * Copy source field
         AIF   ('&FROM' EQ '*STACK').NOERR2
         AIF   ('&FROM'(1,1) NE '(').NOERR2 * No length specified
         AIF   (N'&FROM EQ 0).ERR2B    * Must have
         AIF   (N'&FROM EQ 1).ERR2C    *   exactly two
         AIF   (N'&FROM GT 2).ERR2D    *   sub-operands
.NOERR2D ANOP  ,                       *
&_FROM1  SETC  '&FROM(1)'              * Extract field designation
&_FROM2  SETC  '&FROM(2)'              *     and field length
         AIF   (K'&_FROM1 EQ 0).ERR2B  *
         AIF   (K'&_FROM2 EQ 0).ERR2C  *
         AGO   .NOERR2                 *
.ERR2A   MNOTE 8,'Missing second operand - source of copy'
         MEXIT ,                       *
.ERR2B   MNOTE 8,'Source in parentheses: missing field name'
         MEXIT ,                       *
.ERR2C   MNOTE 8,'Source in parentheses: missing length'
         MEXIT ,                       *
.ERR2D   MNOTE 4,'Source in parentheses: too many subparameters'
         AGO   .NOERR2D                *
.NOERR2  ANOP  ,                       *
.*
.* Check the WARN parameter
         AIF   (K'&WARN EQ 0).NOERR3   *
         AIF   ('&WARN' EQ 'NOWARN').NOERR3
.ERR3A   MNOTE 4,'If specified, third parameter must be ''NOWARN'''
.NOERR3  ANOP  ,                       *
.*
.* Check nr of parameters
         AIF   (N'&SYSLIST LE 3).NOERR4
.ERR4A   MNOTE 4,'More than 3 parameters: remainder ignored'
.NOERR4  ANOP  ,                       *
.*
.* Determine type of the TO field
         AIF   ('&_TO1'(1,1) EQ '(').TO_PTR * Destination is pointered?
         CHKLIT &_TO1,ALT=YES          * A literal nr was specified?
         AIF   (&BXA_RC LT 8).ERR5A    * Valid literal: won't do!
&I       SETA  ('&_TO1' FIND '+-*/(=),''') * Check for invalid chars
         AIF   (&I NE 0).ERR5B         * Invalid field name
&TO_TP   SETC  T'&_TO1                 * Extract field type
&I       SETA  ('&TO_TP' FIND 'ABCDEFGHKLPQRSVXYZ')
         AIF   (&I EQ 1).NOERR5        * Valid field type
         CHKREG &_TO1                  * Valid register type?
         AIF   (&BXA_RC NE 0).ERR5C    * Invalid field type
&TO_REG  SETA  &BXA_NUMVAL             * Save register number
         AGO   .NOERR5                 *
.TO_PTR  ANOP  ,                       *
&TO_TP   SETC  'p'                     * Field type is pointer
&_TO1    SETC  '&TO(1,1)'              * Extract register designation
         CHKREG &_TO1,g                * Must be a gpr!
         AIF   (&BXA_RC GT 4).ERR5D    * Not a valid pointer register
         AGO   .NOERR5                 *
.ERR5A   MNOTE 8,'Literal number cannot serve as destination'
         MEXIT ,                       *
.ERR5B   MNOTE 8,'Destination field not a valid field name'
         MEXIT ,                       *
.ERR5C   MNOTE 8,'&TO_TP is an invalid destination field type'
         MEXIT ,                       *
.ERR5D   MNOTE 8,'&_TO1 is an invalid destination pointer register'
         MEXIT ,                       *
.NOERR5  ANOP  ,                       *
.*
.* Determine type of the FROM field
         AIF   ('&_FROM1'(1,1) EQ '(').FROM_PTR * Source is pointered?
         AIF   ('&FROM' EQ '*STACK').NOERR6
         CHKLIT &_FROM1,ALT=YES        * A literal nr was specified?
         AIF   (&BXA_RC LT 8).ERR6A    * Valid literal nr: ok
         AIF   ('&_FROM1'(1,1) EQ '=').FROMLIT * A literal was spec'd
&I       SETA  ('&_FROM1' FIND '+-*/(=),''') * Check for invalid chars
         AIF   (&I EQ 0).FROMFLD       * Valid field name
         AIF   (K'&_FROM1 LT 3).FROMTP0 * Cannot be a length reference
         AIF   ('&_FROM1'(1,2) NE 'L''').FROMTP0 * Is not a length ref.
&LENC    SETC  '&_FROM1'(3,*)          * Length of what?
&BXA_NUMVAL SETA L'&LENC               * Retrieve length
         AIF   (&BXA_NUMVAL NE 0).ERR6A * Ok: treat as literal number
         AGO   .ERR6B                  * Cannot evaluate
.FROMTP0 ANOP  ,                       * Source should evaluate to a nr
&BXA_NUMVAL SETA &_FROM1               * A valid literal number?
         AIF   (&I NE 0).ERR6A         * Ok: treat as a literal number
         AGO   .ERR6B                  * Error: cannot evaluate
.FROMFLD ANOP  ,                       * Source is a valid field name
&FROM_TP SETC  T'&_FROM1               * Extract field type
&I       SETA  ('&FROM_TP' FIND 'ABCDEFGHKLPQRSVXYZ')
         AIF   (&I EQ 1).NOERR6        * Valid field type
         AIF   ('&FROM_TP' NE '0').FROMREG * This an equated literal?
&EQULIT  SETB  1                       * Yes: indicate equated literal
&FROM_VAL SETA L'&_FROM1               * Determine value of literal
         AGO   .NOERR6                 *
.FROMREG ANOP  ,                       * Must be a valid register
         CHKREG &_FROM1                * Valid register type?
         AIF   (&BXA_RC NE 0).ERR6C    * Invalid field type
&FROM_REG SETA &BXA_NUMVAL             * Save register number
         AGO   .NOERR6                 *
.FROMLIT ANOP  ,                       * A literal was specified as src
         AIF   (K'&_FROM1 LT 5).ERR6D  * Not a decent literal
&I       SETA  2                       * First position to check
&J       SETA  ('(0123456789' FIND '&_FROM1'(&I,1)) * Check dup.factor
         AIF   (&J EQ 0).FRLIT4        * No dup factor!
         AIF   (&J EQ 1).FRLIT1        * Dup factor in parentheses!
.FRLIT0  ANOP  ,                       * Loop to find end of dup.nr
&I       SETA  &I+1                    * Point next char in &_FROM1
         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found
&J       SETA  ('&_FROM1'(&I,1) FIND '0123456789')
         AIF   (&J EQ 0).FRLIT4        * &I now points past dup.factor
         AGO   .FRLIT0                 *
.FRLIT1  ANOP  ,                       * &J contains nr of ( to match
&I       SETA  &I+1                    * Point next char in &_FROM1
         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found
         AIF   ('&_FROM1'(&I,1) EQ '(').FRLIT2
         AIF   ('&_FROM1'(&I,1) EQ ')').FRLIT3
         AGO   .FRLIT1                 *
.FRLIT2  ANOP  ,                       * Another ( found
&J       SETA  &J+1                    * Count unmatched parenthesis
         AGO   .FRLIT1                 * and continue search for )
.FRLIT3  ANOP  ,                       * An ending parenthesis found
&J       SETA  &J-1                    * Reduce count of unmatched (
         AIF   (&J GT 0).FRLIT1        * Search for more ) characters
&I       SETA  &I+1                    * Point past dup-factor
.FRLIT4  ANOP  ,                       * &I now points past dup.factor
         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found
&FROM_TP SETC  '&_FROM1'(&I,1)         * Extract type of literal
         AIF   (&I+3 GT K'&_FROM1).ERR6D * No valid value!
&I       SETA  &I+1                    * Point next char
         AIF   ('&_FROM1'(&I,1) NE 'L').FRLIT10 * No length modifier
&LEN     SETA  &I+1                    * Point to start of length value
         AIF   ('&_FROM1'(&I,1) EQ '''').FRLIT10 * No length modifier
         AIF   ('&_FROM1'(&I,1) EQ '.').ERR6E * Length is in bits
         AIF   ('&_FROM1'(&I,1) EQ '(').FRLIT6 * Length in ()
.FRLIT5  ANOP  ,                       * Loop to find end of length
&I       SETA  &I+1                    * Point next char in &_FROM1
         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found
&J       SETA  ('&_FROM1'(&I,1) FIND '0123456789')
         AIF   (&J EQ 0).FRLIT9        * &I now points past length
         AGO   .FRLIT5                 *
.FRLIT6  ANOP  ,                       * Lenth in parentheses
&J       SETA  0                       * &J contains nr of ( to match
&I       SETA  &I+1                    * Point next char in &_FROM1
         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found
         AIF   ('&_FROM1'(&I,1) EQ '(').FRLIT7
         AIF   ('&_FROM1'(&I,1) EQ ')').FRLIT8
         AGO   .FRLIT6                 *
.FRLIT7  ANOP  ,                       * Another ( found
&J       SETA  &J+1                    * Count unmatched parenthesis
         AGO   .FRLIT6                 * and continue search for )
.FRLIT8  ANOP  ,                       * An ending parenthesis found
&J       SETA  &J-1                    * Reduce count of unmatched (
         AIF   (&J GT 0).FRLIT6        * Search for more ) characters
&I       SETA  &I+1                    * Point past length value
.FRLIT9  ANOP  ,                       * &I now points past length mod.
&J       SETA  &I-&LEN                 * Nr of chars in length value
&LENC    SETC  '&_FROM1'(&LEN,&J)      * Extract length value string
&LEN     SETA  &LENC                   * Determine length value
         AIF   (&LEN EQ 0).ERR6F       * Cannot evaluate length
&FROM_LEN SETA &LEN                    *
.FRLIT10 ANOP  ,                       *
         AIF   ('&FROM_TP' EQ 'A').FRLITA
         AIF   ('&FROM_TP' EQ 'B').NOERR6
         AIF   ('&FROM_TP' EQ 'C').FRLITC
         AIF   ('&FROM_TP' EQ 'D').FRLITD
         AIF   ('&FROM_TP' EQ 'E').FRLITE
         AIF   ('&FROM_TP' EQ 'F').FRLITF
         AIF   ('&FROM_TP' EQ 'H').FRLITH
         AIF   ('&FROM_TP' EQ 'L').FRLITL
         AIF   ('&FROM_TP' EQ 'P').NOERR6
         AIF   ('&FROM_TP' EQ 'Q').FRLITA
         AIF   ('&FROM_TP' EQ 'S').FRLITY
         AIF   ('&FROM_TP' EQ 'V').FRLITA
         AIF   ('&FROM_TP' EQ 'X').NOERR6
         AIF   ('&FROM_TP' EQ 'Y').FRLITY
         AIF   ('&FROM_TP' EQ 'Z').NOERR6
         AGO   .ERR6E                  * Unsupported type designation
.FRLITA  ANOP  ,                       * A-type literal specified
         AIF   (K'&LENC NE 0).FRLITA0  * Length was specified?
&FROM_LEN SETA 4                       * No: use default
.FRLITA0 ANOP  ,                       * Length of literal now known
&I       SETA  &FROM_LEN/4             * Nr of whole words
&I       SETA  &FROM_LEN-(&I*4)        * Nr of additional bytes
         AIF   (&I EQ 0).NOERR6        * Ok: aligned
&FROM_TP SETC  'R'                     * Indicate unaligned address
         AGO   .NOERR6                 *
.FRLITC  ANOP  ,                       * C-type literal specified
         AIF   (K'&LENC NE 0).NOERR6   * Length was specified!
&LENC    SETC  '&_FROM1'(&I,*)         * I still points past length mod
         AIF   (K'&LENC LT 3).ERR6D    * Not a valid text literal
         AIF   ('&LENC'(1,1) NE '''').ERR6D * Must start with a quote..
         AIF   ('&LENC'(K'&LENC,1) NE '''').ERR6D * And end with one!
&LENC    SETC  '&LENC'(2,K'&LENC-2)    * Extract string value
.FRLITC0 ANOP  ,                       * Loop to remove double quotes
&I       SETA  ('&LENC' INDEX '''''')  * Search for double quote
         AIF   (&I EQ 0).FRLITC3       * Not found: quit loop
         AIF   (&I EQ 1).FRLITC1       * Remove leading quotes
         AIF   (&I EQ K'&LENC-2).FRLITC2 * Remove trailing quotes
&LENC    SETC  '&LENC'(1,&I-1).'"'.'&LENC'(&I+2,*)
         AGO   .FRLITC0                * Check for more quotes
.FRLITC1 ANOP  ,                       * Remove leading double quotes
&LENC    SETC  '"'.'&LENC'(3,*)        *
         AGO   .FRLITC0                * Check for more quotes
.FRLITC2 ANOP  ,                       * Remove leading double quotes
&LENC    SETC  '&LENC'(1,&I-1).'"'     *
         AGO   .FRLITC0                * Check for more quotes
.FRLITC3 ANOP  ,                       * All double quotes replaced
&FROM_LEN SETA K'&LENC                 * Nr of characters in string
         AGO   .NOERR6                 *
.FRLITD  ANOP  ,                       * Floating point literal
         AIF   (K'&LENC NE 0).FRLITD0  * Length was specified?
&FROM_LEN SETA 8                       * No: use default
.FRLITD0 ANOP  ,                       * Length of literal now known
&I       SETA  &FROM_LEN/8             * Nr of double words
&I       SETA  &FROM_LEN-(&I*8)        * Nr of additional bytes
         AIF   (&I EQ 0).NOERR6        * Ok: aligned
&FROM_TP SETC  'K'                     * Indicate unaligned float
         AGO   .NOERR6                 *
.FRLITE  ANOP  ,                       * Floating point literal
         AIF   (K'&LENC NE 0).FRLITE0  * Length was specified?
&FROM_LEN SETA 4                       * No: use default
.FRLITE0 ANOP  ,                       * Length of literal now known
&I       SETA  &FROM_LEN/4             * Nr of whole words
&I       SETA  &FROM_LEN-(&I*4)        * Nr of additional bytes
         AIF   (&I EQ 0).NOERR6        * Ok: aligned
&FROM_TP SETC  'K'                     * Indicate unaligned float
         AGO   .NOERR6                 *
.FRLITF  ANOP  ,                       * Fixed point literal
         AIF   (K'&LENC NE 0).FRLITF0  * Length was specified?
&FROM_LEN SETA 4                       * No: use default
.FRLITF0 ANOP  ,                       * Length of literal now known
&I       SETA  &FROM_LEN/4             * Nr of whole words
&I       SETA  &FROM_LEN-(&I*4)        * Nr of additional bytes
         AIF   (&I EQ 0).NOERR6        * Ok: aligned
&FROM_TP SETC  'G'                     * Indicate unaligned fixed
         AGO   .NOERR6                 *
.FRLITH  ANOP  ,                       * Fixed point literal
         AIF   (K'&LENC NE 0).FRLITH0  * Length was specified?
&FROM_LEN SETA 2                       * No: use default
.FRLITH0 ANOP  ,                       * Length of literal now known
&I       SETA  &FROM_LEN/2             * Nr of half words
&I       SETA  &FROM_LEN-(&I*2)        * Nr of additional bytes
         AIF   (&I EQ 0).NOERR6        * Ok: aligned
&FROM_TP SETC  'G'                     * Indicate unaligned fixed
         AGO   .NOERR6                 *
.FRLITL  ANOP  ,                       * Floating point literal
         AIF   (K'&LENC NE 0).FRLITL0  * Length was specified?
&FROM_LEN SETA 8                       * No: use default
.FRLITL0 ANOP  ,                       * Length of literal now known
&I       SETA  &FROM_LEN/8             * Nr of double words
&I       SETA  &FROM_LEN-(&I*8)        * Nr of additional bytes
         AIF   (&I EQ 0).NOERR6        * Ok: aligned
&FROM_TP SETC  'K'                     * Indicate unaligned float
         AGO   .NOERR6                 *
.FRLITY  ANOP  ,                       * Address literal
         AIF   (K'&LENC NE 0).FRLITY0  * Length was specified?
&FROM_LEN SETA 2                       * No: use default
.FRLITY0 ANOP  ,                       * Length of literal now known
&I       SETA  &FROM_LEN/2             * Nr of half words
&I       SETA  &FROM_LEN-(&I*2)        * Nr of additional bytes
         AIF   (&I EQ 0).NOERR6        * Ok: aligned
&FROM_TP SETC  'R'                     * Indicate unaligned address
         AGO   .NOERR6                 *
.FROM_PTR ANOP ,                       *
&FROM_TP SETC  'p'                     * Field type is pointer
&_FROM1  SETC  '&FROM(1,1)'            * Extract register designation
         CHKREG &_FROM1,g              * Must be a gpr!
         AIF   (&BXA_RC GT 4).ERR6G    * Not a valid pointer register
         AGO   .NOERR6                 *
.ERR6A   ANOP  ,                       * Source is a literal
&FROM_TP SETC  '0'                     * Set source type
&FROM_VAL SETA &BXA_NUMVAL             * Save value to be copied
         AIF   (&FROM_VAL GE 0).ERR6A_ * Negative number?
&SIGN    SETC  '-'                     * Indicate sign
.ERR6A_  ANOP  ,                       *
         AIF   (K'&_FROM2 EQ 0).NOERR6 * Explicit length specified?
         MNOTE 4,'Explicit length not allowed for literal value: ignore*
               d'                      *
&_FROM2  SETC  ''                      * Wipe length indication
         AGO   .NOERR6                 *
.ERR6B   MNOTE 8,'Source field not a valid field name'
         MEXIT ,                       *
.ERR6C   ANOP  ,                       *
         CHKLIT &_FROM1,ALT=YES,MSG=YES * Just to issue a message
         MNOTE 8,'&FROM_TP is an invalid source field type'
         MEXIT ,                       *
.ERR6D   MNOTE 8,'Source field is not a valid literal'
         MEXIT ,                       *
.ERR6E   MNOTE 8,'Source field is an unsupported literal'
         MEXIT ,                       *
.ERR6F   ANOP  ,                       *
&LENC    SETC  (DOUBLE '&LENC')        *
         MNOTE 8,'Cannot evaluate length modifier: &LENC'
         MEXIT ,                       *
.ERR6G   MNOTE 8,'&_FROM1 is an invalid source pointer register'
         MEXIT ,                       *
.NOERR6  ANOP  ,                       *
.*
.* Determine length of TO field
&I       SETA  ('acfg' FIND '&TO_TP')  * Register type?
         AIF   (&I NE 0).TOLENR        * Yes: it is some register type
         AIF   (K'&_TO2 NE 0).TOLENX   * Should be a valid expression
&LEN     SETA  L'&_TO1                 * No reg & not spec'd: extract
         AGO   .TOLENOK                * Length has now been set
.TOLENR  ANOP  ,                       * Handle register types
&LENC    SETC  '4484'(&I,1)            * Determine size of 1 register
&LEN     SETA  &LENC                   *  and make it numeric
&LENC    SETC  '16160416'(2*&I-1,2)    * Determine nr of registers
&REG_CT  SETA  &LENC                   *  and make it numeric
         AIF   (K'&_TO2 EQ 0).TOLENOK  * Reg & not spec'd: ok
         CHKREG &_TO2                  * Check: register or number?
         AIF   (&BXA_RC NE 0).TOLENRL  * Must be a literal number
&TO_EREG SETB  1                       * Indicate end register spec'd
         AIF   ('&TO_TP' NE T'&_TO2).TOLENR0
         AIF   ('&TO_TP' EQ 'f').TOLENF * Go handle ending FP-register
         AGO   .TOLENR1                * Go calculate total length
.TOLENR0 ANOP  ,                       * Different register types
         AIF   ('&TO_TP' NE 'g').ERR7A4 * Only allowed combination is
         AIF   (T'&_TO2 NE 'a').ERR7A4 *   gpr with ar
&TO_TP   SETC  'ga'                    * Indicate combined type
.TOLENR1 ANOP  ,                       * End-register is valid
&BXA_NUMVAL SETA 1+&BXA_NUMVAL-&TO_REG * Determine nr of registers
         AIF   (&BXA_NUMVAL GT 0).TOLENR2 * Wrap around?
&BXA_NUMVAL SETA &REG_CT+&BXA_NUMVAL   * Adjust for wrap
.TOLENR2 ANOP  ,                       * BXA_NUMVAL now nr of registers
&LEN     SETA  &LEN*&BXA_NUMVAL        * Length for all registers
         AGO   .TOLENOK                *
.TOLENF  ANOP  ,                       * Determine lenth from end-FPR
&BXA_NUMVAL SETA 2+&BXA_NUMVAL-&TO_REG * Determine nr of HALF registers
         AIF   (&BXA_NUMVAL GT 0).TOLENF1 * Wrap around?
&BXA_NUMVAL SETA 2*&REG_CT+&BXA_NUMVAL * Adjust for wrap
.TOLENF1 ANOP  ,                       *
&LEN     SETA  &LEN*&BXA_NUMVAL/2      * Length for all registers
         AGO   .TOLENOK                *
.TOLENRL ANOP  ,                       * &_TO2 is the nr of regs
&I       SETA  &_TO2                   * Make nr of regs numeric
         AIF   (&I GT 16).ERR7A1       * Too many registers
         AIF   ('&TO_TP' EQ 'f' AND &I GT 4).ERR7A1 * Too many regs
&LEN     SETA  (&I*&LEN)               * Determine total length
         AGO   .TOLENOK                * Length has now been set
.TOLENX  ANOP  ,                       * Check length expression
         AIF   ('&_TO2'(1,1) EQ '(').TOLENPT * To length is a (reg)?
&LEN     SETA  &_TO2                   * Determine numeric value
         AGO   .TOLENOK                * Length has now been set
.TOLENPT ANOP  ,                       * Check length as a (ptr)
         AIF   ('&TO_TP' NE 'p').ERR7A5 * TO1 must be a pointered field
&_TO2    SETC  '&TO(2,1)'              * Extract register designation
         CHKREG &_TO2,g                * Must be a valid gpr
         AIF   (&BXA_RC GT 4).ERR7A6   * Error!
&LEN     SETA  0                       * Indicate register used
&TO_LEN  SETA  0                       * Indicate register used
         AGO   .TOLENOQ                *
.TOLENOK ANOP  ,                       *
         AIF   (&LEN LE 0).ERR7A2      * Invalid length
&TO_LEN  SETA  &LEN                    * Copy determined length
.TOLENOQ ANOP  ,                       *
.*
.* Determine length of FROM field
         AIF   (&FROM_LEN NE 0).GO     * Length of literal is known
         AIF   ('&FROM' EQ '*STACK').GO * Length not relevant
         AIF   ('&FROM_TP' EQ '0').FRLEN0 * Literal value?
&I       SETA  ('acfg' FIND '&FROM_TP') * Register type?
         AIF   (&I NE 0).FRLENR        * Yes: it is some register type
         AIF   (K'&_FROM2 NE 0).FRLENX * Field & len spec'd: ok
&LEN     SETA  L'&_FROM1               * Field & not spec'd: extract
         AGO   .FRLENOK                * Length has now been set
.FRLENR  ANOP  ,                       * Handle register types
&LENC    SETC  '4484'(&I,1)            * Determine size of 1 register
&LEN     SETA  &LENC                   *  and make it numeric
&LENC    SETC  '16160416'(2*&I-1,2)    * Determine nr of registers
&REG_CT  SETA  &LENC                   *  and make it numeric
         AIF   (K'&_FROM2 EQ 0).FRLENOK * Reg & not spec'd: ok
         CHKREG &_FROM2                * Check: register or number?
         AIF   (&BXA_RC NE 0).FRLENRL  * Must be a literal number
&FROM_EREG SETB 1                      * Indicate end reg specified
         AIF   ('&FROM_TP' NE T'&_FROM2).FRLENR0
         AIF   ('&FROM_TP' EQ 'f').FRLENF * Go handle end FP-register
         AGO   .FRLENR1                * Go calculate total length
.FRLENR0 ANOP  ,                       * Different register types
         AIF   ('&FROM_TP' NE 'g').ERR7A4 * Only allowed combination is
         AIF   (T'&_FROM2 NE 'a').ERR7A4 *   gpr with ar
&FROM_TP SETC  'ga'                    * Indicate combined type
.FRLENR1 ANOP  ,                       * End-register is valid
&BXA_NUMVAL SETA 1+&BXA_NUMVAL-&FROM_REG * Determine nr of registers
         AIF   (&BXA_NUMVAL GT 0).FRLENR2 * Wrap around?
&BXA_NUMVAL SETA &REG_CT+&BXA_NUMVAL   * Adjust for wrap
.FRLENR2 ANOP  ,                       * BXA_NUMVAL now nr of registers
&LEN     SETA  &LEN*&BXA_NUMVAL        * Length for all registers
         AGO   .FRLENOK                *
.FRLENF  ANOP  ,                       * Determine lenth from end-FPR
&BXA_NUMVAL SETA 2+&BXA_NUMVAL-&FROM_REG * Determine nr of HALF regs
         AIF   (&BXA_NUMVAL GT 0).FRLENF1 * Wrap around?
&BXA_NUMVAL SETA 2*&REG_CT+&BXA_NUMVAL * Adjust for wrap
.FRLENF1 ANOP  ,                       * BXA_NUMVAL now nr of half regs
&LEN     SETA  &LEN*&BXA_NUMVAL/2      * Length for all registers
         AGO   .FRLENOK                *
.FRLENRL ANOP  ,                       * &_FROM2 is the nr of regs
&I       SETA  &_FROM2                 * Make nr of regs numeric
         AIF   (&I GT 16).ERR7A1       * Too many registers
         AIF   ('&FROM_TP' EQ 'f' AND &I GT 4).ERR7A1 * Too many regs
&LEN     SETA  (&I*&LEN)               * Determine total length
         AGO   .FRLENOK                * Length has now been set
.FRLEN0  ANOP  ,                       * Determine literal length
         AIF   ('&TO_TP' EQ 'B' OR '&TO_TP' EQ 'X').FRLEN0U * Unsigned?
         AIF   (&FROM_VAL LT 0).FRLEN0N * Handle negative numbers
&LEN     SETA  1                       * Assume 1 byte
         AIF   (&FROM_VAL LT 128).FRLENOK * Will fit in 1 byte
&LEN     SETA  2                       * Assume 2 bytes
         AIF   (&FROM_VAL LT 32768).FRLENOK * Will fit in 2 bytes
&LEN     SETA  3                       * Assume 3 bytes
         AIF   (&FROM_VAL LT 8388608).FRLENOK * Will fit in 3 bytes
&LEN     SETA  4                       * Must fit in 4 bytes
         AGO   .FRLENOK                *
.FRLEN0N ANOP  ,                       * Determine len of negative nr
&LEN     SETA  1                       * Assume 1 byte
         AIF   (&FROM_VAL GE -128).FRLENOK * Will fit in 1 byte
&LEN     SETA  2                       * Assume 2 bytes
         AIF   (&FROM_VAL GE -32768).FRLENOK * Will fit in 2 bytes
&LEN     SETA  3                       * Assume 3 bytes
         AIF   (&FROM_VAL GE -8388608).FRLENOK * Will fit in 3 bytes
&LEN     SETA  4                       * Must fit in 4 bytes
         AGO   .FRLENOK                *
.FRLEN0U ANOP  ,                       * Determine len of unsigned nr
&LEN     SETA  1                       * Assume 1 byte
         AIF   (&FROM_VAL LT 256).FRLENOK * Will fit in 1 byte
&LEN     SETA  2                       * Assume 2 bytes
         AIF   (&FROM_VAL LT 65536).FRLENOK * Will fit in 2 bytes
&LEN     SETA  3                       * Assume 3 bytes
         AIF   (&FROM_VAL LT 16777216).FRLENOK * Will fit in 3 bytes
&LEN     SETA  4                       * Must fit in 4 bytes
         AGO   .FRLENOK                *
.FRLENX  ANOP  ,                       * Evaluate length expression
         AIF   ('&_FROM2'(1,1) EQ '(').FRLENPT * To length is a (reg)?
&LEN     SETA  &_FROM2                 * Determine numeric value
         AGO   .FRLENOK                *
.FRLENPT ANOP  ,                       * Check length as a (ptr)
         AIF   ('&FROM_TP' NE 'p').ERR7A7 * FROM1 must be pointered
&_FROM2  SETC  '&FROM(2,1)'            * Extract register designation
         CHKREG &_FROM2,g              * Must be a valid gpr
         AIF   (&BXA_RC GT 4).ERR7A8   * Error!
&LEN     SETA  0                       * Indicate register used
&FROM_LEN SETA  0                      * Indicate register used
         AGO   .FRLENOQ                *
.FRLENOK ANOP  ,                       *
         AIF   (&LEN LE 0).ERR7A3      * Invalid length
&FROM_LEN SETA &LEN                    * Copy determined length
.FRLENOQ ANOP  ,                       *
.*
.* Copy to self not useful
         AIF   ('&_TO1' EQ '&_FROM1').ERR7 * Operands equal?
&I       SETA  ('acfg' FIND '&TO_TP')  * Register type?
         AIF   (&I EQ 0).GO            * Not a register: ok
         AIF   ('&FROM_TP' NE '&TO_TP').GO * Different types: ok
         AIF   (&FROM_REG NE &TO_REG).GO * Not same register nr: ok
.ERR7    ANOP  ,                       * Copy to self detected
         AIF   ('&WARN' EQ 'NOWARN').NOERR7 * Suppress message
         MNOTE 4,'Copy to self not useful: ignored'
.NOERR7  ANOP  ,                       *
&_LABEL  LABEL ,                       *
         MEXIT ,                       *
.*
.* Select code generation logic by from type field
.GO      ANOP  ,
         AIF   ('&FROM_TP' EQ 'A').GENA
         AIF   ('&FROM_TP' EQ 'B').GENB
         AIF   ('&FROM_TP' EQ 'C').GENC
         AIF   ('&FROM_TP' EQ 'D').GEND
         AIF   ('&FROM_TP' EQ 'E').GENE
         AIF   ('&FROM_TP' EQ 'F').GENF
         AIF   ('&FROM_TP' EQ 'G').GENG
         AIF   ('&FROM_TP' EQ 'H').GENH
         AIF   ('&FROM_TP' EQ 'K').GENK
         AIF   ('&FROM_TP' EQ 'L').GENL
         AIF   ('&FROM_TP' EQ 'P').GENP
         AIF   ('&FROM_TP' EQ 'Q').GENQ
         AIF   ('&FROM_TP' EQ 'R').GENR
         AIF   ('&FROM_TP' EQ 'S').GENS
         AIF   ('&FROM_TP' EQ 'V').GENV
         AIF   ('&FROM_TP' EQ 'X').GENX
         AIF   ('&FROM_TP' EQ 'Y').GENY
         AIF   ('&FROM_TP' EQ 'Z').GENZ
         AIF   ('&FROM_TP' EQ '0').GEN0
         AIF   ('&FROM_TP' EQ 'a').GEN_A
         AIF   ('&FROM_TP' EQ 'c').GEN_C
         AIF   ('&FROM_TP' EQ 'f').GEN_F
         AIF   ('&FROM_TP' EQ 'g').GEN_G
         AIF   ('&FROM_TP' EQ 'ga').GEN_GA_
         AIF   ('&FROM' EQ '*STACK').GENSTACK
         AIF   ('&FROM_TP' EQ 'p').GEN_P
         MNOTE 12,'Internal error: FROM type &FROM_TP not supported'
         MEXIT ,                       *
.*
.* Error messages for generation sections below
.ERR7A1  MNOTE 8,'Number of registers specified exceeds whole set'
         MEXIT ,                       *
.ERR7A2  MNOTE 8,'Invalid destination length specified: 0 or negative'
         MEXIT ,                       *
.ERR7A3  MNOTE 8,'Invalid source length specified: 0 or negative'
         MEXIT ,                       *
.ERR7A4  MNOTE 8,'Start and end registers have different types'
         MEXIT ,                       *
.ERR7A5  MNOTE 8,'Destination length in register valid only if destinat*
               ion is in register too'
         MEXIT ,                       *
.ERR7A6  MNOTE 8,'&_TO2 is not a valid length register'
         MEXIT ,                       *
.ERR7A7  MNOTE 8,'Source length in register valid only if source is in *
               register too'
         MEXIT ,                       *
.ERR7A8  MNOTE 8,'&_FROM2 is not a valid length register'
         MEXIT ,                       *
.ERR7B   MNOTE 8,'Cannot copy from ''&FROM_TP'' to ''&TO_TP'' type of f*
               ields'                  *
         MEXIT ,                       *
.ERR7C   MNOTE 8,'Lengths - implied or specified - do not match'
         MEXIT ,                       *
.ERR7D   MNOTE 8,'Length of destination field exceeds 256'
         MEXIT ,                       *
.ERR7E   MNOTE 8,'Length of source field exceeds 256'
         MEXIT ,                       *
.ERR7F   MNOTE 8,'No register pair available for long move'
         MEXIT ,                       *
.ERR7G   MNOTE 8,'Field is too large to pack'
         MEXIT ,                       *
.ERR7H   MNOTE 8,'No register available to extend sign'
         MEXIT ,                       *
.ERR7I   MNOTE 8,'Destination field is too short'
         MEXIT ,                       *
.ERR7J   MNOTE 8,'Cannot load more than 1 FP register from unaligned fi*
               eld'                    *
         MEXIT ,                       *
.ERR7K   MNOTE 8,'Cannot load an FP register from field with length &FR*
               OM_LEN'                 *
         MEXIT ,                       *
.ERR7L   MNOTE 8,'Cannot copy extended floating point field of less tha*
               n 6 bytes'              *
         MEXIT ,                       *
.ERR7M   MNOTE 8,'Register &_TO1 does not designate a pair of FP regist*
               ers'                    *
         MEXIT ,                       *
.ERR7N   MNOTE 8,'Packed field is too large to unpack'
         MEXIT ,                       *
.ERR7O   MNOTE 8,'Too many digits in result: cannot unpack'
         MEXIT ,                       *
.ERR7P   MNOTE 8,'&_FROM1 must be 8 bytes long to copy to &_TO1'
         MEXIT ,                       *
.ERR7Q   MNOTE 8,'Cannot load more than 1 register at a time from an S-*
               type constant'
         MEXIT ,                       *
.ERR7R   MNOTE 8,'S-type constant must be two bytes long to load a regi*
               ster with it'           *
         MEXIT ,                       *
.ERR7S   MNOTE 8,'No work register available'
         MEXIT ,                       *
.ERR7T   MNOTE 8,'Cannot load an access register with a literal other t*
               han 0, 1, or 2'         *
         MEXIT ,                       *
.ERR7U   MNOTE 8,'Cannot copy a negative value into an unsigned field'
         MEXIT ,                       *
.ERR7V   MNOTE 8,'Register &_FROM1 does not designate a pair of FP regi*
               sters'                  *
         MEXIT ,                       *
.ERR7W   MNOTE 8,'Cannot copy more than 1 value to an explicit-length f*
               loating point field'    *
         MEXIT ,                       *
.ERR7X   MNOTE 8,'Cannot extend negative literal to &TO_LEN bytes'
         MEXIT ,                       *
.*
.* From type A: 4-byte address field
.GENA    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'A').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'V').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'Y').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'g').GENA_G  * CPY address to gpr
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy fullword address field to general purpose register(s)
.GENA_G  ANOP  ,                       *
         AIF   (&TO_LEN EQ 4).GENA_G0  * 1 register to load
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_LM                  * Go generate multiple ICMs
.GENA_G0 ANOP  ,                       *
         AIF   (&FROM_LEN EQ 4).DO_L   * Generate 1 L
         AIF   (&FROM_LEN LT 4).GENA_G1 * Clear, then ICM
&PAD_LEN SETA  &FROM_LEN-4             * Nr of excess bytes
&_FROM1  SETC  '&_FROM1'.'+&PAD_LEN'   * Adjust source pointer
&FROM_LEN SETA 4                       * Set usable source length
&I       SETA  &PAD_LEN/4              * Nr of words padded
&J       SETA  &PAD_LEN-(4*&I)         * Nr of additional bytes padded
         AIF   (&J EQ 0).DO_L          * If none: still aligned
&MASK    SETC  'YYYY'                  * Load 4 unaligned bytes
         AGO   .DO_ICM                 * And go copy to register
.GENA_G1 ANOP  ,                       * Load from short field
&_LABEL  CLEAR &_TO1                   * Wipe register before use
&_LABEL  SETC  ''                      * Wipe label after use
&MASK    SETC  'NNNY'                  * Mask for 1-byte source field
         AIF   (&FROM_LEN EQ 1).DO_ICM * Ok: go load register
&MASK    SETC  'NNYY'                  * Mask for 2-byte source field
         AIF   (&FROM_LEN EQ 2).DO_ICM * Ok: go load register
&MASK    SETC  'NYYY'                  * Mask for 3-byte source field
         AGO   .DO_ICM                 * Source must be 3 bytes long
.*
.* From type B: Binary data field (unsigned)
.GENB    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'B').GENMVC0 * CPY unsigned to unsigned
         AIF   ('&TO_TP' EQ 'X').GENMVC0 * CPY unsigned to unsigned
         AIF   ('&TO_TP' EQ 'a').GENB_A  * CPY unsigned to ARnn
         AIF   ('&TO_TP' EQ 'c').GENB_C  * CPY unsigned to CRnn
         AIF   ('&TO_TP' EQ 'g').GENB_G  * CPY unsigned to Rnn
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy unsigned binary data to access register(s)
.GENB_A  ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_LAM                 * Go generate LAM instruction
.*
.* Copy unsigned binary data to control register(s)
.GENB_C  ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_LCTL                * Go generate LAM instruction
.*
.* Copy unsigned binary data to general purpose register(s)
.GENB_G  ANOP  ,                       *
         AIF   (&TO_LEN EQ 4).GENB_G0  * 1 register to load
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENICMM                * Go generate multiple ICMs
.GENB_G0 ANOP  ,                       *
&MASK    SETC  'YYYY'                  *
         AIF   (&FROM_LEN EQ 4).DO_ICM * Generate 1 ICM
         AIF   (&FROM_LEN LT 4).GENB_G1 * Clear, then ICM
&PAD_LEN SETA  &FROM_LEN-4             * Nr of excess bytes
&_FROM1  SETC  '&_FROM1'.'+&PAD_LEN'   * Adjust source pointer
&FROM_LEN SETA 4                       * Set usable source length
         AGO   .DO_ICM                 * And go copy to register
.GENB_G1 ANOP  ,                       * Load from short field
&_LABEL  CLEAR &_TO1                   * Wipe register before use
&_LABEL  SETC  ''                      * Wipe label after use
&MASK    SETC  'NNNY'                  * Mask for 1-byte source field
         AIF   (&FROM_LEN EQ 1).DO_ICM * Ok: go load register
&MASK    SETC  'NNYY'                  * Mask for 2-byte source field
         AIF   (&FROM_LEN EQ 2).DO_ICM * Ok: go load register
&MASK    SETC  'NYYY'                  * Mask for 3-byte source field
         AGO   .DO_ICM                 * Source must be 3 bytes long
.*
.* From type C: Character data field
.GENC    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'C').GENMVCC * CPY char to char
         AGO   .ERR7B                  * Unsupported combination
.*
.* From type D: Long floating point field
.GEND    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'D').GENKK  * CPY float to float
         AIF   ('&TO_TP' EQ 'E').GENKK  * CPY float to float
         AIF   ('&TO_TP' EQ 'K').GENKK  * CPY float to float
         AIF   ('&TO_TP' EQ 'f').GEND_F * CPY float to FP register
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy a long floating point number to a register
.GEND_F  ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AIF   (&TO_LEN EQ 8).DO_LD    * Generate 1 LD
         AGO   .GENLDM                 * Generate several LDs
.*
.* From type E: Short floating point field
.GENE    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'D').GENKK  * CPY float to float
         AIF   ('&TO_TP' EQ 'E').GENKK  * CPY float to float
         AIF   ('&TO_TP' EQ 'K').GENKK  * CPY float to float
         AIF   ('&TO_TP' EQ 'f').GENE_F * CPY float to FP register
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy a short floating point number to a register
.GENE_F  ANOP  ,                       *
         AIF   (&TO_LEN NE 2*&FROM_LEN).ERR7C * Lengths equal?
         AIF   (&TO_LEN EQ 8).DO_LE    * Generate 1 LE
         AGO   .GENLEM                 * Generate several LEs
.*
.* From type F: Signed fullword
.GENF    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'F').GENGG  * CPY signed to signed
         AIF   ('&TO_TP' EQ 'G').GENGG  * CPY signed to signed
         AIF   ('&TO_TP' EQ 'H').GENGG  * CPY signed to signed
         AIF   ('&TO_TP' EQ 'g').GENF_G * CPY signed to register
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy a signed fullword to a register
.GENF_G  ANOP  ,                       *
         AIF   (&TO_LEN LE 4).GENICM   * Generate 1 ICM/L/LH
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_LM                  * Generate 1 LM
.*
.* From type G: Unaligned signed
.GENG    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'F').GENGG  * CPY signed to signed
         AIF   ('&TO_TP' EQ 'G').GENGG  * CPY signed to signed
         AIF   ('&TO_TP' EQ 'H').GENGG  * CPY signed to signed
         AIF   ('&TO_TP' EQ 'g').GENG_G * CPY signed to register
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy an unaligned signed number
.GENGG   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_LEN GT 256).ERR7E *
         AIF   (&TO_LEN LE &FROM_LEN).GENMVC0 * Copy or truncate
         AIF   (&TO_LEN GT 8).GENGG20  * Cannot use registers to extend
         AIF   (&TO_LEN GT 4).GENGG6   * Must use pair of regs
.* Source and extended dest.value both fit in a single register
         EQUREG R0=YES,TEMP=YES        * Assign a register
         AIF   (&BXA_RC GT 0).ERR7H    * No reg available!
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name
&MASK    SETC  'YNNN'                  * Mask for 1-byte value
&I       SETA  24                      * Nr of bits to shift
         AIF   (&FROM_LEN EQ 1).GENGG0 * Go load value
&MASK    SETC  'YYNN'                  * Mask for 2-byte value
&I       SETA  16                      * Nr of bits to shift
         AIF   (&FROM_LEN EQ 2 AND '&FROM_TP' NE 'G').GENGG1
         AIF   (&FROM_LEN EQ 2).GENGG0 * Go load value
&MASK    SETC  'YYYN'                  * Length MUST be 3 bytes!
&I       SETA  8                       * Nr of bits to shift
.GENGG0  ANOP  ,                       * Use ICM to load value
&_LABEL  ICM   &REG,&MASK,&_FROM1      * Load source value
&_LABEL  SETC  ''                      * Wipe used label
         SRA   &REG,&I                 * Create fullword value
         AGO   .GENGG2                 * Go save value in dest field
.GENGG1  ANOP  ,                       * Happens to be aligned!
&_LABEL  LH    &REG,&_FROM1            * Load source value
&_LABEL  SETC  ''                      * Wipe used label
.GENGG2  ANOP  ,                       * Value now in &REG
&MASK    SETC  'NNYY'                  * Min.dest.size is 2 bytes!
         AIF   (&TO_LEN EQ 2 AND '&TO_TP' NE 'G').GENGG4
         AIF   (&TO_LEN EQ 2).GENGG3   * Go save value
&MASK    SETC  'NYYY'                  * Mask for 3-byte value
         AIF   (&TO_LEN EQ 3).GENGG3   * Go save value
&MASK    SETC  'YYYY'                  * MUST be 4 bytes long!
         AIF   ('&TO_TP' EQ 'F').GENGG5 * Go save value
.GENGG3  ANOP  ,                       * Save value using STCM
         STCM  &REG,&MASK,&_TO1        * Save extended value
         MEXIT ,                       *
.GENGG4  ANOP  ,                       * Go save value using STH
         STH   &REG,&_TO1              * Save extended value
         MEXIT ,                       *
.GENGG5  ANOP  ,                       * Go save value using ST
         ST    &REG,&_TO1              * Save extended value
         MEXIT ,                       *
.* Extend up to 8 bytes using a pair of registers
.GENGG6  ANOP  ,                       *
         EQUREG R0=YES,TEMP=YES,PAIR=YES,WARN=NO * Assign pair of regs
         AIF   (&BXA_RC GT 0).GENGG20  * No pair available!
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name
&I       SETA  &BXA_NUMVAL+1           * Nr of odd register
&ODDREG  SETC  'R'.'&I'                * Odd register name
&MASK    SETC  'YNNN'                  * Mask for a 1-byte value
&I       SETA  56                      * Nr of bits to shift
         AIF   (&FROM_LEN EQ 1).GENGG7 * Go load 1-byte value
&MASK    SETC  'YYNN'                  * Mask for a 1-byte value
&I       SETA  48                      * Nr of bits to shift
         AIF   (&FROM_LEN EQ 2 AND '&FROM_TP' NE 'G').GENGG8 *
         AIF   (&FROM_LEN EQ 2).GENGG7 * Go load 2-byte value
&MASK    SETC  'YYYN'                  * Mask for a 3-byte value
&I       SETA  40                      * Nr of bits to shift
         AIF   (&FROM_LEN EQ 3).GENGG7 * Go load 3-byte value
&MASK    SETC  'YYYY'                  * Mask for a 4-byte value
&I       SETA  32                      * Nr of bits to shift
         AIF   (&FROM_LEN EQ 4 AND '&FROM_TP' EQ 'F').GENGG9 *
         AIF   (&FROM_LEN EQ 4).GENGG7 * Go load 4-byte value
         AGO   .GENGG10                * Go load larger values
.GENGG7  ANOP  ,                       * ICM value up to 4 bytes with
&_LABEL  ICM   &REG,&MASK,&_FROM1      * Load value
&_LABEL  SETC  ''                      * Remove used label
         SRDA  &REG,&I                 * Create 8-byte value
         AGO   .GENGG14                * Go save created value
.GENGG8  ANOP  ,                       * LH value of 2 bytes
&_LABEL  LH    &REG,&_FROM1            * Load value
&_LABEL  SETC  ''                      * Remove used label
         SRDA  &REG,32                 * Create 8-byte value
         AGO   .GENGG14                * Go save created value
.GENGG9  ANOP  ,                       * Load 4-byte value
&_LABEL  L     &REG,&_FROM1            * Load value
&_LABEL  SETC  ''                      * Remove used label
         SRDA  &REG,32                 * Create 8-byte value
         AGO   .GENGG14                * Go save created value
.* Source for move is 5 to 7 bytes long
.GENGG10 ANOP  ,                       *
&MASK    SETC  'YNNN'                  * Mask for a 5-byte value
&I       SETA  24                      * Nr of bits to shift
         AIF   (&FROM_LEN EQ 5).GENGG11 * Go load 5-byte value
&MASK    SETC  'YYNN'                  * Mask for a 6-byte value
&I       SETA  16                      * Nr of bits to shift
         AIF   (&FROM_LEN EQ 6 AND '&FROM_TP' NE 'G').GENGG12
         AIF   (&FROM_LEN EQ 6).GENGG11 * Go load 6-byte value
&MASK    SETC  'YYYN'                  * Mask for a 7-byte value
&I       SETA  8                       * Nr of bits to shift
.GENGG11 ANOP  ,                       *
&_LABEL  ICM   &REG,&MASK,&_FROM1      * Load source data
&_LABEL  SETC  ''                      * Remove used label
         SRA   &REG,&I                 * Create first fullword of value
         AGO   .GENGG13                * Go load second register
.GENGG12 ANOP  ,                       * Source aligned: use LH
&_LABEL  LH    &REG,&_FROM1            * Load source data
&_LABEL  SETC  ''                      * Remove used label
.GENGG13 ANOP  ,                       * First register now ok
&I       SETA  &I/8                    * Set I to nr of bytes shifted
&I       SETA  4-&I                    * Set I to nr of bytes loaded
         ICM   &ODDREG,YYYY,&_FROM1+&I * Load second register
.GENGG14 ANOP  ,                       * Value in reg.pair can be saved
&MASK    SETC  'NNNY'                  * 5 bytes is shortest possible
&I       SETA  1                       * Offset for 2nd register
         AIF   (&TO_LEN EQ 5).GENGG15  * Save 5-byte value
&MASK    SETC  'NNYY'                  * Mask for 6-byte value
&I       SETA  2                       * Offset for 2nd register
         AIF   (&TO_LEN EQ 6 AND '&TO_TP' NE 'G').GENGG16 *
         AIF   (&TO_LEN EQ 6).GENGG15  * Save 6-byte value
&MASK    SETC  'NYYY'                  * Mask for 7-byte value
&I       SETA  3                       * Offset for 2nd register
         AIF   (&TO_LEN EQ 7).GENGG15  * Save 7-byte value
&MASK    SETC  'YYYY'                  * Mask for 8-byte value
&I       SETA  4                       * Offset for 2nd register
         AIF   ('&TO_TP' NE 'F').GENGG15 * Save 8-byte value
         STM   &REG,&ODDREG,&_TO1      * Aligned! Use STM
         MEXIT ,                       *
.GENGG15 ANOP  ,                       * Save value with STCM
         STCM  &REG,&MASK,&_TO1        * Save first part of result
         STCM  &ODDREG,YYYY,&_TO1+&I   * Save second register
         MEXIT ,                       *
.GENGG16 ANOP  ,                       * Save value with STH/STCM
         STH   &REG,&_TO1              * Save first part of result
         STCM  &ODDREG,YYYY,&_TO1+&I   * Save second register
         MEXIT ,                       *
.* Logic for extending in storage
.GENGG20 ANOP  ,                       * &TO_LEN greater than 4
&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of sign bytes to add
         EQUREG R0=YES,TEMP=YES        * Assign a register
         AIF   (&BXA_RC NE 0).ERR7H    * Error
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name
&_LABEL  ICM   &REG,YNNN,&_FROM1       * Load first byte of source
&_LABEL  SETC  ''                      * Wipe used-up label
         SRA   &REG,31                 * Create 4 sign bytes
&MASK    SETC  'YNNN'                  * Mask for 1 sign byte
         AIF   (&PAD_LEN EQ 1).GENGG21 * Go fill pad-area
&MASK    SETC  'YYNN'                  * Mask for 2 sign bytes
         AIF   (&PAD_LEN EQ 2 AND '&TO_TP' NE 'G').GENGG22 *
         AIF   (&PAD_LEN EQ 2).GENGG21 * Go fill pad-area
&MASK    SETC  'YYYN'                  * Mask for 3 sign bytes
         AIF   (&PAD_LEN EQ 3).GENGG21 * Go fill pad-area
&MASK    SETC  'YYYY'                  * Mask for 4 sign bytes
         AIF   (&PAD_LEN EQ 4 AND '&TO_TP' EQ 'F').GENGG23 *
         AIF   (&PAD_LEN EQ 4).GENGG21 * Go fill pad-area
&MASK    SETC  'YNNN'                  * Mask for 1 sign byte
.GENGG21 ANOP  ,                       * Set up sign with STCM
         STCM  &REG,&MASK,&_TO1        * Save sign byte(s)
         AIF   (&PAD_LEN LE 4).GENGG24 * Go copy value bytes
         MVC   &_TO1+1(&PAD_LEN-1),&_TO1 * Propagate byte, extend sign
         AGO   .GENGG24                * Go extend sign (if needed)
.GENGG22 ANOP  ,                       * Set up sign with STH
         STH   &REG,&_TO1              * Save sign bytes
         AGO   .GENGG24                * Go copy value bytes
.GENGG23 ANOP  ,                       * Set up sign with STH
         ST    &REG,&_TO1              * Save sign bytes
.GENGG24 ANOP  ,                       * Copy value bytes
         MVC   &_TO1+&PAD_LEN.(&FROM_LEN),&_FROM1 * Copy value
         MEXIT ,                       *
.*
.* Copy an unaligned signed number to a register
.GENG_G  ANOP  ,                       *
         AIF   (&TO_LEN LE 4).GENICM   * Generate 1 ICM/L/LH
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENICMM                * Generate several ICMs
.*
.* From type H: Signed halfword
.GENH    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'F').GENGG  * CPY signed to signed
         AIF   ('&TO_TP' EQ 'G').GENGG  * CPY signed to signed
         AIF   ('&TO_TP' EQ 'H').GENGG  * CPY signed to signed
         AIF   ('&TO_TP' EQ 'g').GENH_G * CPY signed to register
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy a signed halfword to a register
.GENH_G  ANOP  ,                       *
         AIF   (&TO_LEN LE 4).GENICM   * Generate 1 ICM/L/LH
         AIF   (&TO_LEN NE 2*&FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENLHM                 * Generate several LHs
.*
.* From type K: Unaligned floating point field
.GENK    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'D').GENKK  * CPY float to float
         AIF   ('&TO_TP' EQ 'E').GENKK  * CPY float to float
         AIF   ('&TO_TP' EQ 'K').GENKK  * CPY float to float
         AIF   ('&TO_TP' EQ 'f').GENK_F * CPY float to FP register
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy a floating point number
.GENKK   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_LEN GT 256).ERR7E *
         AIF   (&TO_LEN EQ &FROM_LEN).DO_MVC * Lengths equal?
&PAD0    SETB  1                       * Use zeros for padding
&PAD_LEN SETA  0                       * Nr of padding bytes needed
&LEN     SETA  &TO_LEN                 * Determine length of move
         AIF   (&TO_LEN LE &FROM_LEN).GENKK1
&LEN     SETA  &FROM_LEN               * FROM-length is shorter
&PAD_LEN SETA  &TO_LEN-&LEN            * Nr of padding bytes needed
&TO_LEN  SETA  &LEN                    * Truncate destination field
.GENKK1  ANOP  ,                       * &LEN now effective length
         AIF   (&PAD_LEN LT 1).DO_MVC  * No padding required: use MVC
&_LABEL  CLEAR (&_TO1+&LEN,&PAD_LEN),,XC * Wipe padding area
&_LABEL  SETC  ''                      * Label no longer needed
         AGO   .DO_MVC                 *
.*
.* Copy an unaligned floating point number to a register
.GENK_F  ANOP  ,                       *
         AIF   (&TO_LEN NE 8).ERR7J    * 1 register only?
         AIF   (&FROM_LEN EQ 4).DO_LE  * Generate 1 LE
         AIF   (&FROM_LEN EQ 8).DO_LD  * Generate 1 LD
         AGO   .ERR7K                  * Error
.*
.* From type L: Extended floating point field
.GENL    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'L').GENLL  * CPY float to float
         AIF   ('&TO_TP' EQ 'f').GENL_F * CPY float to FP register pair
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy an extended floating point number
.GENLL   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_LEN GT 256).ERR7E *
         AIF   (&TO_LEN EQ &FROM_LEN).DO_MVC * Lengths equal?
         AIF   (&FROM_LEN LT 6).ERR7L  * Source too short
         AIF   (&TO_LEN LT 6).ERR7L    * Destination too short
         AGO   .GENKK                  * Otherwise: copy float field
.*
.* Copy an extended floating point number to a register
.GENL_F  ANOP  ,                       *
         AIF   (K'&_TO2 EQ 0).GENL_F1  * Just a register spec'd?
         AIF   (NOT &TO_EREG).GENL_F2  * End register specified?
.GENL_F1 ANOP  ,                       *
&TO_LEN  SETA  &TO_LEN+8               * Yes: add length of odd reg
.GENL_F2 ANOP  ,                       * &TO_LEN is now correct
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENLXM                 * Generate several LDs
.*
.* From type P: Packed decimal field
.GENP    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'P').GENPP  * CPY packed to packed
         AIF   ('&TO_TP' EQ 'Z').GENPZ  * CPY packed to zoned
         AIF   ('&TO_TP' EQ 'g').GENP_G * CPY packed to register
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy a packed field
.GENPP   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_LEN GT 256).ERR7E *
         AIF   (&FROM_LEN EQ &TO_LEN).DO_MVC
         AIF   (&FROM_LEN LE 16 AND &TO_LEN LE 16).DO_ZAP
         AIF   (&FROM_LEN GT &TO_LEN).GENPP0
&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of prefix zeros to add
&_LABEL  CLEAR (&_TO1,&PAD_LEN),X'00'  * Wipe area
&_LABEL  SETC  ''                      * Wipe used label
         MVC   &_TO1+&PAD_LEN.(&FROM_LEN),&_FROM1 * Copy decimal data
         MEXIT ,                       *
.GENPP0  ANOP  ,                       * Source is larger
&PAD_LEN SETA  &FROM_LEN-&TO_LEN       * Nr of excess source bytes
&_FROM1  SETC  '&_FROM1'.'+&PAD_LEN'   * Skip excess bytes
         AGO   .DO_MVC                 *
.*
.* Copy a packed field to a zoned field
.GENPZ   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_LEN GT 256).ERR7E *
&I       SETA  2*&FROM_LEN-1           * Nr of digits
&PAD_LEN SETA  &TO_LEN-&I              * Nr of zeroes to append
         AIF   (&PAD_LEN LT 1).GENPZ0  * No leading zeroes required
&_LABEL  CLEAR (&_TO1,&PAD_LEN),C'0'   * Initialize with leading zeros
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Modify destination field
&TO_LEN  SETA  &I                      *    and reduce its length
.GENPZ0  ANOP  ,                       *
         AIF   (&FROM_LEN GT 16).ERR7N * Source too large
         AIF   (&TO_LEN GT 16).ERR7O   * Destination too large
         AGO   .DO_UNPK                *
.*
.* Copy a packed number to a register
.GENP_G  ANOP  ,                       *
         AIF   (&TO_LEN NE 4).GENP_G0  * 1 register only?
         AIF   (&FROM_LEN EQ 8).DO_CVB *
         AIF   (&FROM_LEN LT 8).ERR7P  * Source too short
&I       SETA  &FROM_LEN-8             * Excess digits
&_FROM1  SETC  '&_FROM1'.'+&I'         * Skip excess digits
&_FROM_LEN SETA 8                      * Adjust length
         AGO   .DO_CVB                 * And go load register
.GENP_G0 ANOP  ,                       *
         AIF   (2*&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENCVBM                * Generate several CVBs
.*
.* From type Q: 4-byte offset address field
.GENQ    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'Q').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'g').GENA_G  * CPY address to gpr
         AGO   .ERR7B                  * Unsupported combination
.*
.* From type R: unaligned address field
.GENR    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'A').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'Q').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'S').GENRS   * CPY address to address
         AIF   ('&TO_TP' EQ 'V').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'Y').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'g').GENA_G  * CPY address to gpr
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy an unaligned address field to an S-type address field
.GENRS   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_LEN GT 256).ERR7E *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_MVC                 *
.*
.* From type S: 2-byte address field - base-displacement
.GENS    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'R').GENSS  * CPY address to address
         AIF   ('&TO_TP' EQ 'S').GENSS  * CPY address to address
         AIF   ('&TO_TP' EQ 'g').GENS_G * CPY address to gpr
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy an S-type address field to a field
.GENSS   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_LEN GT 256).ERR7E *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_MVC                 *
.*
.* Copy an S-type address field to a register
.GENS_G  ANOP  ,                       *
         AIF   (&TO_LEN NE 4).ERR7Q    * Only 1 register!
         AIF   (&FROM_LEN NE 2).ERR7R  * Must be two bytes long!
         EQUREG TEMP=YES               * Assign work register
         AIF   (&BXA_RC NE 0).ERR7S    *
         AIF   (&BXA_NUMVAL NE &TO_REG).GENS_G0
         USE   &_TO1                   * Set register in use
         EQUREG TEMP=YES               * Assign work register
&I       SETA  &BXA_RC                 * Save returncode
&J       SETA  &BXA_NUMVAL             *    and return value
         DROP  &_TO1                   * End of forced register use
         AIF   (&BXA_RC NE 0).ERR7S    * No work register available
.GENS_G0 ANOP  ,                       * Register allocated correctly
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name
&_LABEL  LH    &REG,&_FROM1            * Load whole S-constant
&_LABEL  SETC  ''                      * Wipe used label
         SRL   &REG,12                 * Base register nr in low-order
         LA    &_TO1,16*&_TO1          * Load register with its number
         OR    &REG,&_TO1              * &REG now contains &to,&base
         EX    &REG,_CPY&SYSNDX        * Copy base to destination reg
         B     _CPY_&SYSNDX            * Skip executable instruction
_CPY&SYSNDX LABEL ,                    *
         DC    X'1800'                 * LR instruction
_CPY_&SYSNDX LABEL ,                   *
         LH    &REG,&_FROM1            * Reload S-constant
         SLL   &REG,20                 * Remove register number
         SRL   &REG,20                 * Keep offset in low-order bits
         AR    &_TO1,&REG              * Create result value
         MEXIT ,                       *
.*
.* From type V: 4-byte address field
.GENV    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'A').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'V').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'Y').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'g').GENA_G  * CPY address to gpr
         AGO   .ERR7B                  * Unsupported combination
.*
.* From type X: Hexadecimal data field (unsigned)
.GENX    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'B').GENMVC0 * CPY unsigned to unsigned
         AIF   ('&TO_TP' EQ 'X').GENMVC0 * CPY unsigned to unsigned
         AIF   ('&TO_TP' EQ 'a').GENB_A  * CPY unsigned to ARnn
         AIF   ('&TO_TP' EQ 'c').GENB_C  * CPY unsigned to CRnn
         AIF   ('&TO_TP' EQ 'g').GENB_G  * CPY unsigned to Rnn
         AGO   .ERR7B                  * Unsupported combination
.*
.* From type Y: 2-byte address field
.GENY    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'A').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'V').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'Y').GENMVC0 * CPY address to address
         AIF   ('&TO_TP' EQ 'g').GENY_G  * CPY address to gpr
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy halfword address field to general purpose register(s)
.GENY_G  ANOP  ,                       *
         AIF   (&TO_LEN NE 2*&FROM_LEN).ERR7C * Lengths equal?
&I       SETA  &TO_REG                 * Save first register number
&J       SETA  0                       * Offset in source field
.GENY_G0 ANOP  ,                       * Loop
&_LABEL  LTHU  &_TO1,&_FROM1+&J        *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill
&J       SETA  &J+2                    * Point next halfword
&I       SETA  &I+1                    * Next register number
         AIF   (&I LT 16).GENY_G1      * Valid register nr
&I       SETA  0                       * Wrap-around to R0
.GENY_G1 ANOP  ,                       * I now next register nr
&_TO1    SETC  'R'.'&I'                * Create next register name
         AGO   .GENY_G0                *
.*
.* From type Z: Zoned decimal field
.GENZ    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'P').GENZP  * CPY zoned to packed
         AIF   ('&TO_TP' EQ 'Z').GENZZ  * CPY zoned to zoned
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy a zoned field to a packed field
.GENZP   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_LEN GT 256).ERR7E *
&I       SETA  (&FROM_LEN/2)+1         * Nr of result bytes
&PAD_LEN SETA  &TO_LEN-&I              * Nr of zeroes to append
         AIF   (&PAD_LEN LT 1).GENZP0  * No leading zeroes required
&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Initialize with leading zeros
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Modify destination field
&TO_LEN  SETA  &I                      *    and reduce its length
.GENZP0  ANOP  ,                       *
         AIF   (&FROM_LEN GT 16).ERR7G * Source too large
         AGO   .DO_PACK                *
.*
.* Copy a zoned decimal field
.GENZZ   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_LEN GT 256).ERR7E *
         AIF   (&TO_LEN EQ &FROM_LEN).DO_MVC
&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of leading zeros
         AIF   (&PAD_LEN LT 1).GENZZ0  * No leading zeros required
&_LABEL  CLEAR (&_TO1,&PAD_LEN),C'0'   *
&_LABEL  SETC  ''                      * Wipe used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination address
&TO_LEN  SETA  &FROM_LEN               *
         AGO   .DO_MVC                 * And go copy data portion
.GENZZ0  ANOP  ,                       * Trucation required
&PAD_LEN SETA  &FROM_LEN-&TO_LEN       * Nr of bytes to skip
&_FROM1  SETC  '&_FROM1'.'+&PAD_LEN'   * Advannce source address
&FROM_LEN SETA &TO_LEN                 *
         AGO   .DO_MVC                 * And go copy data portion
.*
.* From type 0: Literal number
.GEN0    ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'B').GEN0B  * CPY number to unsigned
         AIF   ('&TO_TP' EQ 'D').GEN0K  * CPY number to long float
         AIF   ('&TO_TP' EQ 'E').GEN0K  * CPY number to short float
         AIF   ('&TO_TP' EQ 'F').GEN0G  * CPY number to fixed
         AIF   ('&TO_TP' EQ 'G').GEN0G  * CPY number to fixed
         AIF   ('&TO_TP' EQ 'H').GEN0G  * CPY number to fixed
         AIF   ('&TO_TP' EQ 'K').GEN0K  * CPY number to float
         AIF   ('&TO_TP' EQ 'L').GEN0L  * CPY number to extended float
         AIF   ('&TO_TP' EQ 'P').GEN0P  * CPY number to packed
         AIF   ('&TO_TP' EQ 'X').GEN0B  * CPY number to unsigned
         AIF   ('&TO_TP' EQ 'Z').GEN0Z  * CPY number to zoned
         AIF   ('&TO_TP' EQ 'a').GEN0_A * CPY number to access register
         AIF   ('&TO_TP' EQ 'f').GEN0_F * CPY number to float register
         AIF   ('&TO_TP' EQ 'g').GEN0_G * CPY number to register
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy a literal number to an unsigned field
.GEN0B   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&TO_LEN LT &FROM_LEN).ERR7I * FROM_LEN <= 4 for literal
         AIF   (&FROM_VAL LT 0).ERR7U  * FROM_LEN <= 4 for literal
         AIF   (&TO_LEN LE 4).GEN0B0   * Just an MVC please
&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of leading zeros needed
         AIF   (&PAD_LEN LT 1).GEN0B0  * No padding needed
&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Wipe prefix area
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Adjust destination for move
&TO_LEN  SETA  &FROM_LEN               *    and length too
.GEN0B0  ANOP  ,                       *
         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields
&_FROM1  SETC  '=AL&TO_LEN'.'(&_FROM1)' * Create literal to copy
         AGO   .GEN0_MVC               * Go generate MVC to copy
.*
.* Copy a literal number to a signed field
.GEN0G   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
         AIF   (&FROM_VAL EQ 0).GEN0G0 * Zero value requested?
         AIF   (&TO_LEN LT &FROM_LEN).ERR7I * FROM_LEN <= 4 for literal
         AIF   (&TO_LEN LE 4).GEN0G1   * Just an MVC please
&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of leading zeros needed
         AIF   (&PAD_LEN LT 1).GEN0G1  * No padding needed
         AIF   ('&SIGN' EQ '-').ERR7X  *
&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Wipe prefix area
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Adjust destination for move
&TO_LEN  SETA  &FROM_LEN               *    and length too
         AGO   .GEN0G1                 *
.GEN0G0  ANOP  ,                       *
&_LABEL  CLEAR (&_TO1,&TO_LEN),,XC     * Insert zero value
         MEXIT ,                       *
.GEN0G1  ANOP  ,                       *
         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields
         AIF   (&EQULIT).GEN0G2        *
&_FROM1  SETC  '=FL&TO_LEN'.'''&_FROM1''' * Create literal
         AGO   .GEN0_MVC               * Go generate MVC to copy
.GEN0G2  ANOP  ,                       *
&_FROM1  SETC  '=FL&TO_LEN'.'''&FROM_VAL''' * Create literal
         AGO   .GEN0_MVC               * Go generate MVC to copy
.*
.* Copy a literal number to a floating point field
.GEN0K   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
&FROM_LEN SETA &FROM_LEN+1             * Add room for exponent byte
         AIF   (&TO_LEN LT &FROM_LEN).ERR7I * FROM_LEN <= 5 for literal
         AIF   (&FROM_LEN GE 5).GEN0K0 * May be useful to expand
         AIF   (&FROM_LEN EQ &TO_LEN).GEN0K2 * literal length
         AIF   (&TO_LEN GE 5).GEN0K0   * to accomodate value
&FROM_LEN SETA &TO_LEN                 *
         AGO   .GEN0K2                 * No padding required!
.GEN0K0  ANOP  ,                       *
&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of padding zeros needed
         AIF   (&PAD_LEN LT 1).GEN0K2  * No padding needed
         AIF   ('&SIGN' EQ '-').ERR7X  *
&_LABEL  CLEAR (&_TO1+&FROM_LEN,&PAD_LEN),,XC * Wipe prefix area
&_LABEL  SETC  ''                      * Remove used label
&TO_LEN  SETA  &FROM_LEN               * Adjust length of dest.field
.GEN0K2  ANOP  ,                       *
         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields
         AIF   (&EQULIT).GEN0K3        *
&_FROM1  SETC  '=DL&TO_LEN'.'''&_FROM1''' * Create literal to copy
         AGO   .GEN0_MVC               * Go generate MVC to copy
.GEN0K3  ANOP  ,                       *
&_FROM1  SETC  '=DL&TO_LEN'.'''&FROM_VAL''' * Create literal to copy
         AGO   .GEN0_MVC               * Go generate MVC to copy
.*
.* Copy a literal number to an extended floating point field
.GEN0L   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
&FROM_LEN SETA &FROM_LEN+1             * Add room for exponent byte
         AIF   (&FROM_LEN GE 6).GEN0L0 * Check minimum size for
&FROM_LEN SETA 6                       *  L-type literal: 6 bytes min.
.GEN0L0  ANOP  ,                       *
         AIF   (&TO_LEN LT &FROM_LEN).ERR7I * FROM_LEN <= 5 for literal
         AIF   (&FROM_LEN GE 8).GEN0L1 * May be useful to expand
         AIF   (&FROM_LEN EQ &TO_LEN).GEN0L2 * literal length
         AIF   (&TO_LEN GE 8).GEN0L1   * to accomodate value
&FROM_LEN SETA &TO_LEN                 *
         AGO   .GEN0L2                 * No padding required!
.GEN0L1  ANOP  ,                       *
&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of additional zeros needed
         AIF   (&PAD_LEN LT 1).GEN0L2  * No padding needed
         AIF   ('&SIGN' EQ '-').ERR7X  *
&_LABEL  CLEAR (&_TO1+&FROM_LEN,&PAD_LEN),,XC * Wipe extension area
&_LABEL  SETC  ''                      * Remove used label
&TO_LEN  SETA  &FROM_LEN               * And reduce destination length
.GEN0L2  ANOP  ,                       *
         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields
         AIF   (&EQULIT).GEN0L3        *
&_FROM1  SETC  '=LL&TO_LEN'.'''&_FROM1''' * Create literal to copy
         AGO   .GEN0_MVC               * Go generate MVC to copy
.GEN0L3  ANOP  ,                       *
&_FROM1  SETC  '=LL&TO_LEN'.'''&FROM_VAL''' * Create literal to copy
         AGO   .GEN0_MVC               * Go generate MVC to copy
.*
.* Copy a literal number to a packed decimal field
.GEN0P   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
&LEN     SETA  K'&FROM_VAL             * Nr of digits in literal
&LEN     SETA  (&LEN/2)+1              * Nr of positions required
         AIF   (&TO_LEN LT &LEN).ERR7I * Won't fit!
&PAD_LEN SETA  &TO_LEN-&LEN            * Nr of leading zeros needed
         AIF   (&PAD_LEN LT 1).GEN0P0  * No padding needed
         AIF   ('&SIGN' EQ '-').ERR7X  *
&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Wipe prefix area
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Adjust destination for move
&TO_LEN  SETA  &LEN                    *    and length too
.GEN0P0  ANOP  ,                       *
         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields
         AIF   (&EQULIT).GEN0P1        *
&_FROM1  SETC  '=PL&TO_LEN'.'''&_FROM1''' * Create literal to copy
         AGO   .GEN0_MVC               * Go generate MVC to copy
.GEN0P1  ANOP  ,                       *
&_FROM1  SETC  '=PL&TO_LEN'.'''&FROM_VAL''' * Create literal to copy
         AGO   .GEN0_MVC               * Go generate MVC to copy
.*
.* Copy a literal number to a zoned decimal field
.GEN0Z   ANOP  ,                       *
         AIF   (&TO_LEN GT 256).ERR7D  *
&LEN     SETA  K'&FROM_VAL             * Nr of digits in literal
         AIF   (&TO_LEN LT &LEN).ERR7I * Won't fit!
&PAD_LEN SETA  &TO_LEN-&LEN            * Nr of leading zeros needed
         AIF   (&PAD_LEN LT 1).GEN0Z0  * No padding needed
         AIF   ('&SIGN' EQ '-').ERR7X  *
&_LABEL  CLEAR (&_TO1,&PAD_LEN),C'0'   * Wipe prefix area
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Adjust destination for move
&TO_LEN  SETA  &LEN                    *    and length too
.GEN0Z0  ANOP  ,                       *
         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields
         AIF   (&EQULIT).GEN0Z1        *
&_FROM1  SETC  '=ZL&TO_LEN'.'''&_FROM1''' * Create literal to copy
         AGO   .GEN0_MVC               * Go generate MVC to copy
.GEN0Z1  ANOP  ,                       *
&_FROM1  SETC  '=ZL&TO_LEN'.'''&FROM_VAL''' * Create literal to copy
         AGO   .GEN0_MVC               * Go generate MVC to copy
.*
.* Copy a literal number to an access register
.GEN0_A  ANOP  ,                       *
         AIF   (&FROM_VAL EQ 0).GEN0_A0 * Only literal values 0,
         AIF   (&FROM_VAL EQ 1).GEN0_A1 *  1, and 2 are allowed for
         AIF   (&FROM_VAL EQ 2).GEN0_A1 *  use with access registers
         AGO   .ERR7T                  * Illegal literal for AR
.GEN0_A0 ANOP  ,                       * Load with value of 0
&_LABEL  CLEAR &_TO1                   * Wipe register to create 0
&_LABEL  SETC  ''                      * Wipe used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done
         AGO   .GEN0_A2                *
.GEN0_A1 ANOP  ,                       * Load with value of 1 or 2
         EQUREG TEMP=YES,R0=YES        * Find a free register
         AIF   (&BXA_RC NE 0).ERR7S    * None available!
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create name of register
&_LABEL  LA    &REG,&_FROM1            * Load ALET value
&_LABEL  SETC  ''                      * Wipe used label
         SAR   &_TO1,&REG              * Copy ALET to access register
         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done
.GEN0_A2 ANOP  ,                       * Copy ALET to other ARs
&I       SETA  &TO_REG                 * Save first register number
.GEN0_A3 ANOP  ,                       * Loop to fill ARs
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill
&I       SETA  &I+1                    * Next register number
         AIF   (&I LT 16).GEN0_A4      * Valid register nr
&I       SETA  0                       * Wrap-around to AR0
.GEN0_A4 ANOP  ,                       * I now next register nr
&REG     SETC  'AR'.'&I'               * Create next register name
         CPYA  &REG,&_TO1              * Copy ALET
         AGO   .GEN0_A3                *
.*
.* Copy a literal number to a floating point register
.* For a value of zero an SDR might be used, but this might generate
.*     a significance interruption.
.GEN0_F  ANOP  ,                       *
&_FROM1  SETC  '=D'.'''&_FROM1'''      * Create literal to copy
         AIF   (NOT &EQULIT).GEN0_F1   *
&_FROM1  SETC  '=D'.'''&FROM_VAL'''    * Create literal to copy
.GEN0_F1 ANOP  ,                       *
&_LABEL  LD    &_TO1,&_FROM1           * Load value to register
&_LABEL  SETC  ''                      * Wipe used label
         AIF   (&TO_LEN EQ 8).MEND     * 1 register: done
&I       SETA  &TO_REG                 * Save first register number
.GEN0_F3 ANOP  ,                       * Loop to fill FPRs
&TO_LEN  SETA  &TO_LEN-8               * Reduce length
         AIF   (&TO_LEN LT 8).MEND     * No registers left to fill
&I       SETA  &I+2                    * Next register number
         AIF   (&I LT 8).GEN0_F4       * Valid register nr
&I       SETA  0                       * Wrap-around to FPR0
.GEN0_F4 ANOP  ,                       * I now next register nr
&REG     SETC  'FPR'.'&I'              * Create next register name
         LDR   &REG,&_TO1              * Copy value
         AGO   .GEN0_F3                *
.*
.* Copy a literal number to a general purpose register
.GEN0_G  ANOP  ,                       *
         AIF   (&FROM_VAL EQ 0).GEN0_G0 * 0? use Clear
         AIF   (&FROM_VAL LT 4096).GEN0_G1 *  Use LA if possible
         AIF   (&FROM_VAL GT 32767).GEN0_G2 *  Too large for LH
         AIF   (&FROM_VAL LT -32768).GEN0_G2 *  Too large for LH
&_FROM1  SETC  '=H'.'''&_FROM1'''      * Create literal to copy
         AIF   (NOT &EQULIT).GEN0_GA   *
&_FROM1  SETC  '=H'.'''&FROM_VAL'''    * Create literal to copy
.GEN0_GA ANOP  ,                       *
&_LABEL  LH    &_TO1,&_FROM1           * Load value to register
&_LABEL  SETC  ''                      * Remove used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done
         AGO   .GEN0_G3                *
.GEN0_G0 ANOP  ,                       * Load with value of 0
&_LABEL  CLEAR &_TO1                   * Wipe register to create 0
&_LABEL  SETC  ''                      * Wipe used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done
         AGO   .GEN0_G3                *
.GEN0_G1 ANOP  ,                       * Load with value up to 4095
&_LABEL  LA    &_TO1,&_FROM1           * Load value
&_LABEL  SETC  ''                      * Wipe used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done
         AGO   .GEN0_G3                *
.GEN0_G2 ANOP  ,                       *
&_FROM1  SETC  '=F'.'''&_FROM1'''      * Create literal to copy
         AIF   (NOT &EQULIT).GEN0_GB   *
&_FROM1  SETC  '=F'.'''&FROM_VAL'''    * Create literal to copy
.GEN0_GB ANOP  ,                       *
&_LABEL  L     &_TO1,&_FROM1           * Load value to register
&_LABEL  SETC  ''                      * Remove used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done
         AGO   .GEN0_G3                *
.GEN0_G3 ANOP  ,                       * Copy value to other regs
&I       SETA  &TO_REG                 * Save first register number
.GEN0_G4 ANOP  ,                       * Loop to fill regs
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill
&I       SETA  &I+1                    * Next register number
         AIF   (&I LT 16).GEN0_G5      * Valid register nr
&I       SETA  0                       * Wrap-around to R0
.GEN0_G5 ANOP  ,                       * I now next register nr
&REG     SETC  'R'.'&I'                * Create next register name
         LR    &REG,&_TO1              * Copy value
         AGO   .GEN0_G4                *
.*
.* Logic to generate a move of a literal after truncation or expansion
.*   has been dealt with.
.GEN0_MVC ANOP ,                       * All GEN0-routines enter here
         AIF   (K'&_TO2 NE 0).GEN0_MVC1 * Use explicit length
         AIF   (&TO_LEN NE L'&_TO1).GEN0_MVC1 * Use explicit length
&_LABEL  MVC   &_TO1,&_FROM1           *
         MEXIT ,                       *
.GEN0_MVC1 ANOP ,                      * MVC with explicit length
&_LABEL  MVC   &_TO1.(&TO_LEN),&_FROM1 *
         MEXIT ,                       *
.*
.* Logic to generate a move of a literal to a 1-byte field
.GEN0_MVI ANOP ,                       * All GEN0-routines enter here
         AIF   ('&_FROM1'(1,1) NE '=').GEN0_MVI0
&_FROM1  SETC  '&_FROM1'(2,*)          * Remove leading = sign
.GEN0_MVI0 ANOP ,                      *
&_LABEL  MVI   &_TO1,&_FROM1           *
         MEXIT ,                       *
.*
.* From type a: Access Register
.GEN_A   ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'B').GEN_AB  * CPY AR to binary
         AIF   ('&TO_TP' EQ 'X').GEN_AB  * CPY AR to binary
         AIF   ('&TO_TP' EQ 'a').GEN_A_A * CPY AR to AR
         AIF   ('&TO_TP' EQ 'g').GEN_A_G * CPY AR to GPR
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy access register(s) to an unsigned binary field
.GEN_AB  ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_STAM                * Go generate STAM instruction
.*
.* Copy access register(s) to access register(s)
.GEN_A_A ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
&_LABEL  CPYA  &_TO1,&_FROM1           * Copy ALET
&_LABEL  SETC  ''                      * Remove used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?
.GEN_A_A0 ANOP ,                       * Loop to copy ARs
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy
&TO_REG  SETA  &TO_REG+1               * Next dest reg nr
         AIF   (&TO_REG LT 16).GEN_A_A1 * Valid register nr
&TO_REG  SETA  0                       * Wrap-around to AR0
.GEN_A_A1 ANOP ,                       * TO_REG now next register nr
&FROM_REG SETA &FROM_REG+1             * Next src reg nr
         AIF   (&FROM_REG LT 16).GEN_A_A2 * Valid register nr
&FROM_REG SETA 0                       * Wrap-around to AR0
.GEN_A_A2 ANOP ,                       * FROM_REG now next register nr
&REG     SETC  'AR'.'&TO_REG'          * Create next dest.reg name
&ODDREG  SETC  'AR'.'&FROM_REG'        * Create next src.reg name
         CPYA  &REG,&ODDREG            * Copy ALET
         AGO   .GEN_A_A0               *
.*
.* Copy access register(s) to GP register(s)
.GEN_A_G ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
&_LABEL  EAR   &_TO1,&_FROM1           * Copy ALET
&_LABEL  SETC  ''                      * Remove used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?
.GEN_A_G0 ANOP ,                       * Loop to copy ARs
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy
&TO_REG  SETA  &TO_REG+1               * Next dest reg nr
         AIF   (&TO_REG LT 16).GEN_A_G1 * Valid register nr
&TO_REG  SETA  0                       * Wrap-around to R0
.GEN_A_G1 ANOP ,                       * TO_REG now next register nr
&FROM_REG SETA &FROM_REG+1             * Next src reg nr
         AIF   (&FROM_REG LT 16).GEN_A_G2 * Valid register nr
&FROM_REG SETA 0                       * Wrap-around to AR0
.GEN_A_G2 ANOP ,                       * FROM_REG now next register nr
&REG     SETC  'R'.'&TO_REG'           * Create next dest.reg name
&ODDREG  SETC  'AR'.'&FROM_REG'        * Create next src.reg name
         EAR   &REG,&ODDREG            * Copy ALET
         AGO   .GEN_A_G0               *
.*
.* From type c: Control Register
.GEN_C   ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'B').GEN_CB * CPY CR to binary
         AIF   ('&TO_TP' EQ 'X').GEN_CB * CPY CR to binary
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy control register(s) to an unsigned binary field
.GEN_CB  ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_STCTL               * Go generate STCTL instruction
.*
.* From type f: Floating Point Register
.GEN_F   ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'D').GEN_FD  * CPY FPR to long
         AIF   ('&TO_TP' EQ 'E').GEN_FE  * CPY FPR to short
         AIF   ('&TO_TP' EQ 'K').GEN_FK  * CPY FRP to float field
         AIF   ('&TO_TP' EQ 'L').GEN_FL  * CPY FPR to extended
         AIF   ('&TO_TP' EQ 'f').GEN_F_F * CPY FPR to FPR
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy floating point register(s) to long field(s)
.GEN_FD  ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AIF   (&TO_LEN EQ 8).DO_STD   * Generate 1 STD
         AGO   .GENSTDM                * Generate several STDs
.*
.* Copy floating point register(s) to short field(s)
.GEN_FE  ANOP  ,                       *
         AIF   (2*&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AIF   (&TO_LEN EQ 4).DO_STE   * Generate 1 STE
         AGO   .GENSTEM                * Generate several STEs
.*
.* Copy floating point register to floating field (any length)
.GEN_FK  ANOP  ,                       *
         AIF   (&FROM_LEN GT 16).ERR7W * Cannot save more than 2 regs
         AIF   (&FROM_LEN EQ 16).GEN_FK1 * Store extended operand!
.* Handle 1 register
         AIF   (&TO_LEN LT 4).ERR7I    * Dest.field too short
         AIF   (&TO_LEN GE 8).GEN_FK0  * Go save long operand
.* Handle short operand
&PAD_LEN SETA  &TO_LEN-4               * Nr of trailing zeroes required
         AIF   (&PAD_LEN EQ 0).GEN_FE  * No padding: store short
&_LABEL  CLEAR (&_TO1+4,&PAD_LEN),,XC  * Wipe trailer area
&_LABEL  SETC  ''                      * Remove generated label
&TO_LEN  SETA  4                       * Length of area to fill
         AGO   .GEN_FE                 * Go store 1 short operand
.GEN_FK0 ANOP  ,                       * Must store a long operand
&PAD_LEN SETA  &TO_LEN-8               * Nr of trailing zeroes required
         AIF   (&PAD_LEN EQ 0).GEN_FD  * No padding: store long
&_LABEL  CLEAR (&_TO1+8,&PAD_LEN),,XC  * Wipe trailer area
&_LABEL  SETC  ''                      * Remove generated label
&TO_LEN  SETA  8                       * Length of area to fill
         AGO   .GEN_FD                 * Go store 1 long operand
.GEN_FK1 ANOP  ,                       * Must store an extended operand
         AIF   (&TO_LEN LT 16).ERR7I   * Dest.field too short
&PAD_LEN SETA  &TO_LEN-16              * Nr of trailing zeroes required
         AIF   (&PAD_LEN EQ 0).GEN_FK2 *=GEN_FL2
&_LABEL  CLEAR (&_TO1+16,&PAD_LEN),,XC * Wipe trailer area
&_LABEL  SETC  ''                      * Remove generated label
&TO_LEN  SETA  16                      * Length of area to fill
         AGO   .GEN_FK2                *=GEN_FL2
.*
.* Copy floating point register(s) to extended field(s)
.GEN_FL  ANOP  ,                       *
         AIF   (K'&_FROM2 EQ 0).GEN_FL1 * Just a register spec'd?
         AIF   (NOT &FROM_EREG).GEN_FL2 * End register specified?
.GEN_FL1 ANOP  ,                       *
&FROM_LEN SETA &FROM_LEN+8             * Yes: add length of odd reg
.GEN_FK2 ANOP  ,                       * Must store an extended operand
.GEN_FL2 ANOP  ,                       * &FROM_LEN is now correct
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENSTXM                * Generate several STDs
.*
.* Copy floating point register(s) to FP register(s)
.GEN_F_F ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
&_LABEL  LDR   &_TO1,&_FROM1           * Copy
&_LABEL  SETC  ''                      * Remove used label
         AIF   (&TO_LEN EQ 8).MEND     * 1 register only to copy?
.GEN_F_F0 ANOP ,                       * Loop to copy FPRs
&TO_LEN  SETA  &TO_LEN-8               * Reduce length
         AIF   (&TO_LEN LT 8).MEND     * No registers left to copy
&TO_REG  SETA  &TO_REG+2               * Next dest reg nr
         AIF   (&TO_REG LT 8).GEN_F_F1 * Valid register nr
&TO_REG  SETA  0                       * Wrap-around to FPR0
.GEN_F_F1 ANOP ,                       * TO_REG now next register nr
&FROM_REG SETA &FROM_REG+2             * Next src reg nr
         AIF   (&FROM_REG LT 8).GEN_F_F2 * Valid register nr
&FROM_REG SETA 0                       * Wrap-around to FPR0
.GEN_F_F2 ANOP ,                       * FROM_REG now next register nr
&REG     SETC  'FPR'.'&TO_REG'         * Create next dest.reg name
&ODDREG  SETC  'FPR'.'&FROM_REG'       * Create next src.reg name
         LDR   &REG,&ODDREG            * Copy
         AGO   .GEN_F_F0               *
.*
.* From type g: General Purpose Register
.GEN_G   ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'A').GEN_GA  * CPY reg to address
         AIF   ('&TO_TP' EQ 'B').GEN_GB  * CPY reg to unsigned
         AIF   ('&TO_TP' EQ 'F').GEN_GF  * CPY reg to signed
         AIF   ('&TO_TP' EQ 'G').GEN_GG  * CPY reg to signed
         AIF   ('&TO_TP' EQ 'H').GEN_GH  * CPY reg to signed
         AIF   ('&TO_TP' EQ 'P').GEN_GP  * CPY reg to packed decimal
         AIF   ('&TO_TP' EQ 'Q').GEN_GA  * CPY reg to address
         AIF   ('&TO_TP' EQ 'R').GEN_GR  * CPY reg to address
         AIF   ('&TO_TP' EQ 'V').GEN_GA  * CPY reg to address
         AIF   ('&TO_TP' EQ 'X').GEN_GB  * CPY reg to unsigned
         AIF   ('&TO_TP' EQ 'Y').GEN_GY  * CPY reg to address
         AIF   ('&TO_TP' EQ 'a').GEN_G_A * CPY reg to access register
         AIF   ('&TO_TP' EQ 'g').GEN_G_G * CPY reg to reg
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy from register(s) to address field(s)
.GEN_GA  ANOP  ,                       *
         AIF   (&FROM_LEN EQ 4).GEN_GA1 * Just 1 register?
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_STM                 * Generate 1 STM
.GEN_GA1 ANOP  ,                       * Only 1 register to save
         AIF   (&TO_LEN EQ 4).DO_ST    * Generate 1 ST
         AIF   (&TO_LEN LT 4).GEN_GA2  * Use STCM to save
&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed
&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Insert leading zeros
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination field
&TO_LEN  SETA  4                       * 4 bytes remain unfilled
&I       SETA  &PAD_LEN/4              * Nr of words padded
&J       SETA  &PAD_LEN-(4*&I)         * Nr of extra bytes padded
         AIF   (&J EQ 0).DO_ST         * Go generate a ST
.GEN_GA2 ANOP  ,                       * STCM required
.GEN_GR2 ANOP  ,                       * Entry from reg-to-unaligned
.GEN_GY2 ANOP  ,                       * Entry from reg-to-halfword
&MASK    SETC  'NNNY'                  * Mask for a 1-byte field
         AIF   (&TO_LEN EQ 1).DO_STCM  * Go save byte
&MASK    SETC  'NNYY'                  * Mask for a 2-byte field
         AIF   (&TO_LEN EQ 2).DO_STCM  * Go save bytes
&MASK    SETC  'NYYY'                  * Mask for a 3-byte field
         AIF   (&TO_LEN EQ 3).DO_STCM  * Go save bytes
&MASK    SETC  'YYYY'                  * Mask for a 4-byte field
         AGO   .DO_STCM                * Go save bytes
.*
.* Copy from register(s) to unsigned binary field(s)
.GEN_GB  ANOP  ,                       *
         AIF   (&FROM_LEN EQ 4).GEN_GB1 * Just 1 register?
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENSTCMM               * Generate multiple STCMs
.GEN_GB1 ANOP  ,                       * Only 1 register to save
&MASK    SETC  'YYYY'                  *
         AIF   (&TO_LEN EQ 4).DO_STCM  * Generate 1 ST
         AIF   (&TO_LEN LT 4).GEN_GB2  * Use STCM to save
&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed
&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Insert leading zeros
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination field
         AGO   .DO_STCM                * Go generate a STCM
.GEN_GB2 ANOP  ,                       * STCM required
.GEN_GF2 ANOP  ,                       * Entry from reg-to-fullword
.GEN_GG2 ANOP  ,                       * Entry from reg-to-signed
.GEN_GH2 ANOP  ,                       * Entry from reg-to-halfword
&MASK    SETC  'NNNY'                  * Mask for a 1-byte field
         AIF   (&TO_LEN EQ 1).DO_STCM  * Go save byte
&MASK    SETC  'NNYY'                  * Mask for a 2-byte field
         AIF   (&TO_LEN EQ 2).DO_STCM  * Go save bytes
&MASK    SETC  'NYYY'                  * Mask for a 3-byte field
         AIF   (&TO_LEN EQ 3).DO_STCM  * Go save bytes
&MASK    SETC  'YYYY'                  * Mask for a 4-byte field
         AGO   .DO_STCM                * Go save bytes
.*
.* Copy from register(s) to signed binary fullword(s)
.GEN_GF  ANOP  ,                       *
         AIF   (&FROM_LEN EQ 4).GEN_GF1 * Just 1 register?
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .DO_STM                 * Generate 1 STM
.GEN_GF1 ANOP  ,                       * Only 1 register to save
         AIF   (&TO_LEN EQ 4).DO_ST    * Generate 1 ST
         AIF   (&TO_LEN EQ 2).DO_STH   * Generate 1 STH
         AIF   (&TO_LEN LE 4).GEN_GF2  *=GEN_GB2
&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed
         EQUREG TEMP=YES,R0=YES        * Find available register
         AIF   (&BXA_RC NE 0).ERR7H    * None found!
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create workreg name
&_LABEL  LR    &REG,&_FROM1            * Copy value to save
&_LABEL  SETC  ''                      * Remove used label
&MASK    SETC  'YYYY'                  * Mask to save register
&PAD_ADR SETC  '&_TO1'                 * Save destination
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Create destination for data
         SRA   &REG,31                 * Create all sign bits
         AIF   (&PAD_LEN GT 8).GEN_GF6 *
         AIF   (&PAD_LEN EQ 1).GEN_GF3 *
         AIF   (&PAD_LEN EQ 2).GEN_GF4 *
         AIF   (&PAD_LEN EQ 3).GEN_GF5 *
         ST    &REG,&PAD_ADR           * First set of lead sign bytes
&PAD_ADR SETC  '&PAD_ADR'.'+4'         * Adjust pad-area pointer
         AIF   (&PAD_LEN EQ 4).DO_ST   * Ok: save register
         AIF   (&PAD_LEN EQ 5).GEN_GF3 *
         AIF   (&PAD_LEN EQ 6).GEN_GF4 *
         AIF   (&PAD_LEN EQ 7).GEN_GF5 *
         ST    &REG,&PAD_ADR           * Fill up to 8 lead sign bytes
         AGO   .DO_ST                  * Go save register
.GEN_GF3 ANOP  ,                       * 1 leading sign byte
         STC   &REG,&PAD_ADR           *
         AGO   .DO_STCM                * Go save register
.GEN_GF4 ANOP  ,                       * 2 leading sign bytes
         STH   &REG,&PAD_ADR           *
         AGO   .DO_STCM                * Go save register
.GEN_GF5 ANOP  ,                       * 3 leading sign bytes
         STCM  &REG,YYYN,&PAD_ADR      *
         AGO   .DO_STCM                * Go save register
.GEN_GF6 ANOP ,                        * More than 8 leading sign bytes
         ST    &REG,&PAD_ADR           * Insert leading sign bytes
         MVC   &PAD_ADR+4(&PAD_LEN-4),&PAD_ADR * Propagate sign
&I       SETA  &PAD_LEN/4              * Nr of words padded
&I       SETA  &PAD_LEN-(4*&I)         * Nr of extra bytes padded
         AIF   (&I EQ 0).DO_ST         * Still aligned: use ST
         AGO   .DO_STCM                * Go save register
.*
.* Copy from register(s) to signed binary field(s)
.GEN_GG  ANOP  ,                       *
         AIF   (&FROM_LEN EQ 4).GEN_GG1 * Just 1 register?
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENSTCMM               * Generate multiple STCMs
.GEN_GG1 ANOP  ,                       * Only 1 register to save
         AIF   (&TO_LEN LE 4).GEN_GG2  *=GEN_GB2
&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed
         EQUREG TEMP=YES,R0=YES        * Find available register
         AIF   (&BXA_RC NE 0).ERR7H    * None found!
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create workreg name
&_LABEL  LR    &REG,&_FROM1            * Copy value to save
&_LABEL  SETC  ''                      * Remove used label
&MASK    SETC  'YYYY'                  * Mask to save register
&PAD_ADR SETC  '&_TO1'                 * Save destination
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Create destination for data
         SRA   &REG,31                 * Create all sign bits
         AIF   (&PAD_LEN GT 8).GEN_GG6 *
         AIF   (&PAD_LEN EQ 1).GEN_GG3 *
         AIF   (&PAD_LEN EQ 2).GEN_GG4 *
         AIF   (&PAD_LEN EQ 3).GEN_GG5 *
         STCM  &REG,YYYY,&PAD_ADR      * First set of lead sign bytes
&PAD_ADR SETC  '&PAD_ADR'.'+4'         * Adjust pad-area pointer
         AIF   (&PAD_LEN EQ 4).DO_STCM * Ok: save register
         AIF   (&PAD_LEN EQ 5).GEN_GG3 *
         AIF   (&PAD_LEN EQ 6).GEN_GG4 *
         AIF   (&PAD_LEN EQ 7).GEN_GG5 *
         STCM  &REG,YYYY,&PAD_ADR      * Fill up to 8 lead sign bytes
         AGO   .DO_STCM                * Go save register
.GEN_GG3 ANOP  ,                       * 1 leading sign byte
         STC   &REG,&PAD_ADR           *
         AGO   .DO_STCM                * Go save register
.GEN_GG4 ANOP  ,                       * 2 leading sign bytes
         STCM  &REG,YYNN,&PAD_ADR      *
         AGO   .DO_STCM                * Go save register
.GEN_GG5 ANOP  ,                       * 3 leading sign bytes
         STCM  &REG,YYYN,&PAD_ADR      *
         AGO   .DO_STCM                * Go save register
.GEN_GG6 ANOP ,                        * More than 8 leading sign bytes
         STCM  &REG,YYYY,&PAD_ADR      *
         MVC   &PAD_ADR+4(&PAD_LEN-4),&PAD_ADR * Propagate sign
         AGO   .DO_STCM                * Go save register
.*
.* Copy from register(s) to signed binary halfword(s)
.GEN_GH  ANOP  ,                       *
         AIF   (&FROM_LEN EQ 4).GEN_GH1 * Just 1 register?
         AIF   (2*&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENSTHM                * Generate multiple STHs
.GEN_GH1 ANOP  ,                       * Only 1 register to save
         AIF   (&TO_LEN EQ 2).DO_STH   * Generate 1 STH
         AIF   (&TO_LEN LE 4).GEN_GH2  *=GEN_GB2
&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed
         EQUREG TEMP=YES,R0=YES        * Find available register
         AIF   (&BXA_RC NE 0).ERR7H    * None found!
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create workreg name
&_LABEL  LR    &REG,&_FROM1            * Copy value to save
&_LABEL  SETC  ''                      * Remove used label
&MASK    SETC  'YYYY'                  * Mask to save register
&PAD_ADR SETC  '&_TO1'                 * Save destination
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Create destination for data
         SRA   &REG,31                 * Create all sign bits
         AIF   (&PAD_LEN GT 8).GEN_GH6 *
         AIF   (&PAD_LEN EQ 1).GEN_GH3 *
         AIF   (&PAD_LEN EQ 2).GEN_GH4 *
         AIF   (&PAD_LEN EQ 3).GEN_GH5 *
         STCM  &REG,YYYY,&PAD_ADR      * First set of lead sign bytes
&PAD_ADR SETC  '&PAD_ADR'.'+4'         * Adjust pad-area pointer
         AIF   (&PAD_LEN EQ 4).DO_STCM * Ok: save register
         AIF   (&PAD_LEN EQ 5).GEN_GH3 *
         AIF   (&PAD_LEN EQ 6).GEN_GH4 *
         AIF   (&PAD_LEN EQ 7).GEN_GH5 *
         STCM  &REG,YYYY,&PAD_ADR      * Fill up to 8 lead sign bytes
         AGO   .DO_STCM                * Go save register
.GEN_GH3 ANOP  ,                       * 1 leading sign byte
         STC   &REG,&PAD_ADR           *
         AGO   .DO_STCM                * Go save register
.GEN_GH4 ANOP  ,                       * 2 leading sign bytes
         STH   &REG,&PAD_ADR           *
         AGO   .DO_STCM                * Go save register
.GEN_GH5 ANOP  ,                       * 3 leading sign bytes
         STCM  &REG,YYYN,&PAD_ADR      *
         AGO   .DO_STCM                * Go save register
.GEN_GH6 ANOP ,                        * More than 8 leading sign bytes
         STH   &REG,&PAD_ADR           * Insert leading sign bytes
         MVC   &PAD_ADR+2(&PAD_LEN-2),&PAD_ADR * Propagate sign
         AGO   .DO_STCM                * Go save register
.*
.* Copy from register(s) to packed decimal number(s)
.GEN_GP  ANOP  ,                       *
         AIF   (&FROM_LEN EQ 4).GEN_GP1 * Just 1 register?
         AIF   (&TO_LEN NE 2*&FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENCVDM                * Generate multiple CVDs
.GEN_GP1 ANOP  ,                       * Only 1 register to save
         AIF   (&TO_LEN LT 8).ERR7I    *
&PAD_LEN SETA  &TO_LEN-8               * Nr of leading zeros needed
         AIF   (&PAD_LEN LT 1).GEN_GP2 * None needed
&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Create leading zeros
&_LABEL  SETC  ''                      * Remove used-up label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination pointer
.GEN_GP2 ANOP  ,                       *
&_LABEL  CVD   &_FROM1,&_TO1           *
         MEXIT ,                       *
.*
.* Copy from register(s) to unaligned address field(s)
.GEN_GR  ANOP  ,                       *
         AIF   (&FROM_LEN EQ 4).GEN_GR1 * Just 1 register?
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENSTCMM               * Generate multiple STCMs
.GEN_GR1 ANOP  ,                       * Only 1 register to save
&MASK    SETC  'YYYY'                  * Set default mask for STCM
         AIF   (&TO_LEN EQ 4).DO_STCM  * Generate 1 ST
         AIF   (&TO_LEN LT 4).GEN_GR2  *=GEN_GA2
&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed
&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Insert leading zeros
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination field
         AGO   .DO_STCM                * Go generate a STCM
.*
.* Copy from register(s) to halfword address field(s)
.GEN_GY  ANOP  ,                       *
         AIF   (&FROM_LEN EQ 4).GEN_GY1 * Just 1 register?
         AIF   (2*&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENSTHM                * Generate multiple STHs
.GEN_GY1 ANOP  ,                       * Only 1 register to save
         AIF   (&TO_LEN EQ 2).DO_STH   * Generate 1 STH
         AIF   (&TO_LEN LT 4).GEN_GY2  *=.GEN_GA2
&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed
&MASK    SETC  'YYYY'                  * Default mask for STCM
         AIF   (&PAD_LEN LT 1).DO_STCM *
&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Insert leading zeros
&_LABEL  SETC  ''                      * Remove used label
&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination field
&TO_LEN  SETA  4                       * 4 bytes remain unfilled
         AGO   .GEN_GY2                *=.GEN_GA2
.*
.* Copy register(s) to access register(s)
.GEN_G_A ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
&_LABEL  SAR   &_TO1,&_FROM1           * Copy ALET
&_LABEL  SETC  ''                      * Remove used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?
.GEN_G_A0 ANOP ,                       * Loop to copy ARs
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy
&TO_REG  SETA  &TO_REG+1               * Next dest reg nr
         AIF   (&TO_REG LT 16).GEN_G_A1 * Valid register nr
&TO_REG  SETA  0                       * Wrap-around to R0
.GEN_G_A1 ANOP ,                       * TO_REG now next register nr
&FROM_REG SETA &FROM_REG+1             * Next src reg nr
         AIF   (&FROM_REG LT 16).GEN_G_A2 * Valid register nr
&FROM_REG SETA 0                       * Wrap-around to AR0
.GEN_G_A2 ANOP ,                       * FROM_REG now next register nr
&REG     SETC  'R'.'&FROM_REG'         * Create next src.reg name
&ODDREG  SETC  'AR'.'&TO_REG'          * Create next dest.reg name
         SAR   &ODDREG,&REG            * Copy ALET
         AGO   .GEN_G_A0               *
.*
.* Copy register(s) to register(s)
.GEN_G_G ANOP  ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
&_LABEL  LR    &_TO1,&_FROM1           * Copy register
&_LABEL  SETC  ''                      * Remove used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?
.GEN_G_G0 ANOP ,                       * Loop to copy regs
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy
&TO_REG  SETA  &TO_REG+1               * Next dest reg nr
         AIF   (&TO_REG LT 16).GEN_G_G1 * Valid register nr
&TO_REG  SETA  0                       * Wrap-around to R0
.GEN_G_G1 ANOP ,                       * TO_REG now next register nr
&FROM_REG SETA &FROM_REG+1             * Next src reg nr
         AIF   (&FROM_REG LT 16).GEN_G_G2 * Valid register nr
&FROM_REG SETA 0                       * Wrap-around to AR0
.GEN_G_G2 ANOP ,                       * FROM_REG now next register nr
&REG     SETC  'R'.'&FROM_REG'         * Create next src.reg name
&ODDREG  SETC  'R'.'&TO_REG'           * Create next dest.reg name
         LR    &ODDREG,&REG            * Copy register
         AGO   .GEN_G_G0               *
.*
.* From type ga: Combined general purpose and access registers
.GEN_GA_ ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'ga').GEN_GA_GA * CPY regs to regs
         AGO   .ERR7B                  * Unsupported combination
.*
.* Copy combined GPR-AR pairs
.GEN_GA_GA ANOP ,                      *
         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?
         AGO   .GENLAEM                *
.*
.* From type p: pointered data field
.GEN_P   ANOP  ,                       *
         AIF   ('&TO_TP' EQ 'p').DO_MVCL * CPY pointered to pointered
         AGO   .ERR7B                  * Unsupported combination
.*
.* From type *STACK: Stacked registers
.GENSTACK ANOP ,                       *
&FROM_TP SETC  '*STACK'                *
         AIF   ('&TO_TP' EQ 'ga').DO_EREG * CPY stack to registers
         AGO   .ERR7B                  * Unsupported combination
.*
.* Load several registers with packed data
.GENCVBM ANOP  ,                       *
&I       SETA  &TO_REG                 * Save first register number
&J       SETA  0                       * Offset in source field
.GENCVBM0 ANOP ,                       * Loop
&_LABEL  CVB   &_TO1,&_FROM1+&J        *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill
&J       SETA  &J+8                    * Point next short field
&I       SETA  &I+1                    * Next register number
         AIF   (&I LT 16).GENCVBM1     * Valid register nr
&I       SETA  0                       * Wrap-around to R0
.GENCVBM1 ANOP ,                       * I now next register nr
&_TO1    SETC  'R'.'&I'                * Create next register name
         AGO   .GENCVBM0               *
.*
.* Store several registers as packed data
.GENCVDM ANOP  ,                       *
&I       SETA  &FROM_REG               * Save first register number
&J       SETA  0                       * Offset in source field
.GENCVDM0 ANOP ,                       * Loop
&_LABEL  CVD   &_FROM1,&_TO1+&J        *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-8               * Reduce length
         AIF   (&TO_LEN LT 8).MEND     * No storage left to fill
&J       SETA  &J+8                    * Point next short field
&I       SETA  &I+1                    * Next register number
         AIF   (&I LT 16).GENCVDM1     * Valid register nr
&I       SETA  0                       * Wrap-around to R0
.GENCVDM1 ANOP ,                       * I now next register nr
&_FROM1  SETC  'R'.'&I'                * Create next register name
         AGO   .GENCVDM0               *
.*
.* Load a register with an unaligned signed integer
.GENICM  ANOP  ,                       *
&MASK    SETC  'YNNN'                  * Mask for a 1-byte value
&I       SETA  24                      * Nr of bytes to shift
         AIF   (&FROM_LEN EQ 1).GENICM0 * Go load value
&MASK    SETC  'YYNN'                  * Mask for a 2-byte value
&I       SETA  16                      * Nr of bytes to shift
         AIF   (&FROM_LEN EQ 2 AND '&FROM_TP' NE 'G').GENICM1
         AIF   (&FROM_LEN EQ 2).GENICM0 * Go load value
&MASK    SETC  'YYYN'                  * Mask for a 3-byte value
&I       SETA  8                       * Nr of bytes to shift
         AIF   (&FROM_LEN EQ 3).GENICM0 * Go load value
&MASK    SETC  'YYYY'                  * MUST be a four-byte value
         AIF   (&FROM_LEN EQ 4 AND '&FROM_TP' NE 'F').GENICM0
         AIF   (&FROM_LEN EQ 4).GENICM2 * Load aligned fullword
         AIF   ('&FROM_TP' EQ 'F').GENICM3 * Oversized, aligned
         AGO   .GENICM4                * Oversized, unaligned
.GENICM0 ANOP  ,                       * Use ICM to load value
&_LABEL  ICM   &_TO1,&MASK,&_FROM1     * Copy value to register
&_LABEL  SETC  ''                      * Remove used label
         AIF   ('&MASK' EQ 'YYYY').MEND
         SRA   &_TO1,&I                * Shift value in register
         MEXIT ,                       *
.GENICM1 ANOP  ,                       * Load aligned halfword
&_LABEL  LH    &_TO1,&_FROM1           * Copy value to register
         MEXIT ,                       *
.GENICM2 ANOP  ,                       * Load aligned fullword
&_LABEL  L     &_TO1,&_FROM1           * Copy value to register
         MEXIT ,                       *
.GENICM3 ANOP  ,                       * Load/truncate from Fullword
&I       SETA  &FROM_LEN-4             * Offset in source field
&J       SETA  &I/4                    * Nr of words in offset
&J       SETA  &I-(4*&J)               * Nr of excess bytes
         AIF   (&J NE 0).GENICM4       * Go load unaligned 'word'
&_LABEL  L     &_TO1,&_FROM1+&I        * Copy value to register
         MEXIT ,                       *
.GENICM4 ANOP  ,                       * Load/truncate unaligned
&I       SETA  &FROM_LEN-4             * Offset in source field
&_LABEL  ICM   &_TO1,YYYY,&_FROM1+&I   * Copy value to register
         MEXIT ,                       *
.*
.* Load several registers with unaligned data
.GENICMM ANOP  ,                       *
&I       SETA  &TO_REG                 * Save first register number
&J       SETA  0                       * Offset in source field
.GENICMM0 ANOP ,                       * Loop
&_LABEL  ICM   &_TO1,YYYY,&_FROM1+&J   *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill
&J       SETA  &J+4                    * Point next long field
&I       SETA  &I+1                    * Next register number
         AIF   (&I LT 16).GENICMM1     * Valid register nr
&I       SETA  0                       * Wrap-around to R0
.GENICMM1 ANOP ,                       * I now next register nr
&_TO1    SETC  'R'.'&I'                * Create next register name
         AGO   .GENICMM0               *
.*
.* Copy alet-qualified addresses register to register
.GENLAEM ANOP  ,                       *
         AIF   ('&SYSASCE' EQ 'P').GENLAEMP * Primary mode!
&_LABEL  LAE   &_TO1,0(0,&_FROM1)      * Copy ALET and address
&_LABEL  SETC  ''                      * Remove used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?
         AGO   .GENLAEM0               *
.GENLAEMP ANOP ,                       *
&_LABEL  LR    &_TO1,&_FROM1           * Copy address
         CPYA  &_TO2,&_FROM2           *   and ALET
&_LABEL  SETC  ''                      * Remove used label
         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?
.GENLAEM0 ANOP ,                       * Loop to copy register pairs
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy
&TO_REG  SETA  &TO_REG+1               * Next dest reg nr
         AIF   (&TO_REG LT 16).GENLAEM1 * Valid register nr
&TO_REG  SETA  0                       * Wrap-around to R0
.GENLAEM1 ANOP ,                       * TO_REG now next register nr
&FROM_REG SETA &FROM_REG+1             * Next src reg nr
         AIF   (&FROM_REG LT 16).GENLAEM2 * Valid register nr
&FROM_REG SETA 0                       * Wrap-around to R0
.GENLAEM2 ANOP ,                       * FROM_REG now next register nr
&_TO1    SETC  'R'.'&TO_REG'           * Create next dest.reg name
&_FROM1  SETC  'R'.'&FROM_REG'         * Create next src.reg name
         AIF   ('&SYSASCE' EQ 'P').GENLAEM3 * Primary mode!
         LAE   &_TO1,0(0,&_FROM1)      * Copy ALET and address
         AGO   .GENLAEM0               *
.GENLAEM3 ANOP ,                       * Copy addr+ALET in primary mode
&_TO2    SETC  'AR'.'&TO_REG'          * Create next dest.reg name
&_FROM2  SETC  'AR'.'&FROM_REG'        * Create next src.reg name
         LR    &_TO1,&_FROM1           * Copy address
         CPYA  &_TO2,&_FROM2           *   and ALET
         AGO   .GENLAEM0               *
.*
.* Load several floating point registers with long operands
.GENLDM  ANOP  ,                       *
&I       SETA  &TO_REG                 * Save first register number
&J       SETA  0                       * Offset in source field
.GENLDM0 ANOP  ,                       * Loop
&_LABEL  LD    &_TO1,&_FROM1+&J        *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-8               * Reduce length
         AIF   (&TO_LEN LT 8).MEND     * No registers left to fill
&J       SETA  &J+8                    * Point next long field
&I       SETA  &I+2                    * Next register number
         AIF   (&I LT 8).GENLDM1       * Valid register nr
&I       SETA  0                       * Wrap-around to FPR0
.GENLDM1 ANOP  ,                       * I now next register nr
&_TO1    SETC  'FPR'.'&I'              * Create next register name
         AGO   .GENLDM0                *
.*
.* Load several floating point registers with short operands
.GENLEM  ANOP  ,                       *
&I       SETA  &TO_REG                 * Save first register number
&J       SETA  0                       * Offset in source field
.GENLEM0 ANOP  ,                       * Loop
&_LABEL  LE    &_TO1,&_FROM1+&J        *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-8               * Reduce length
         AIF   (&TO_LEN LT 8).MEND     * No registers left to fill
&J       SETA  &J+4                    * Point next short field
&I       SETA  &I+2                    * Next register number
         AIF   (&I LT 8).GENLEM1       * Valid register nr
&I       SETA  0                       * Wrap-around to FPR0
.GENLEM1 ANOP  ,                       * I now next register nr
&_TO1    SETC  'FPR'.'&I'              * Create next register name
         AGO   .GENLEM0                *
.*
.* Load several halfwords into registers
.GENLHM  ANOP  ,                       *
&I       SETA  &TO_REG                 * Save first register number
&J       SETA  0                       * Offset in source field
.GENLHM0 ANOP  ,                       * Loop
&_LABEL  LH    &_TO1,&_FROM1+&J        *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill
&J       SETA  &J+2                    * Point next short field
&I       SETA  &I+1                    * Next register number
         AIF   (&I LT 16).GENLHM1      * Valid register nr
&I       SETA  0                       * Wrap-around to R0
.GENLHM1 ANOP  ,                       * I now next register nr
&_TO1    SETC  'R'.'&I'                * Create next register name
         AGO   .GENLHM0                *
.*
.* Load several floating point registers with extended operands
.GENLXM  ANOP  ,                       *
&I       SETA  &TO_REG                 * Save first register number
         AIF   (&I NE 0 AND &I NE 4).ERR7M * Not a valid pair!
&I       SETA  &I+2                    * Nr of next register
&ODDREG  SETC  'FPR'.'&I'              * Name of second register
&J       SETA  0                       * Offset in source field
.GENLXM0 ANOP  ,                       * Loop
&_LABEL  LD    &_TO1,&_FROM1+&J        * Load low-order register
&_LABEL  SETC  ''                      * Remove label after use
&J       SETA  &J+8                    * Point next long field
         LD    &ODDREG,&_FROM1+&J      * Load high-order register
&TO_LEN  SETA  &TO_LEN-16              * Reduce length
         AIF   (&TO_LEN LT 16).MEND    * No registers left to fill
&J       SETA  &J+8                    * Point next long field
&I       SETA  &I+2                    * Next register number
         AIF   (&I LT 8).GENLXM1       * Valid register nr
&I       SETA  0                       * Wrap-around to FPR0
.GENLXM1 ANOP  ,                       * I now next register nr
&_TO1    SETC  'FPR'.'&I'              * Create next register name
&I       SETA  &I+2                    * Nr of next register
&ODDREG  SETC  'FPR'.'&I'              * Name of second register
         AGO   .GENLXM0                *
.*
.* Copy two character fields
.GENMVCC ANOP  ,                       *
&PAD0    SETB  0                       * Use spaces for padding
&PAD_LEN SETA  0                       * Nr of padding bytes needed
&LEN     SETA  &TO_LEN                 * Determine length of move
         AIF   (&TO_LEN LE &FROM_LEN).GENMVCC1
&LEN     SETA  &FROM_LEN               * FROM-length is shorter
&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of padding bytes needed
.GENMVCC1 ANOP ,                       * &LEN now effective length
         AIF   (&LEN GT 256).GENMVCL   *
         AIF   (&PAD_LEN GT 256).GENMVCL *
&TO_LEN  SETA  &LEN                    * Truncate destination field
         AIF   (&PAD_LEN LT 1).DO_MVC  * No padding required: use MVC
&_LABEL  CLEAR (&_TO1+&LEN,&PAD_LEN),C' ' * Wipe padding area
&_LABEL  SETC  ''                      * Label no longer needed
&TO_LEN  SETA  &LEN                    * Set source and destination
&FROM_LEN SETA &LEN                    *   lengths for data move
         AGO   .DO_MVC                 *
.*
.* Set up for a long move
.GENMVCL ANOP  ,                       *
&LEN     SETA  &FROM_LEN               * Determine effective length
         AIF   (&TO_LEN GT &FROM_LEN).GENMVCL0 * Which is shorter
&LEN     SETA  &TO_LEN                 * TO_LEN is shorter
&FROM_LEN SETA &LEN                    * Make source length shorter
.GENMVCL0 ANOP ,                       * Len now contains effective len
&PAD_LEN SETA  &TO_LEN-&LEN            * Size of pad-area
.* If possible: generate MVCL instruction
         AIF   (&LEN LT 1024 AND &PAD_LEN LT 1).GENMVCL6 * Multiple MVC
         EQUREG PAIR=YES,TEMP=YES,R0=YES,WARN=NO * Alloc src reg pair
         AIF   (&BXA_RC NE 0).GENMVCL2 * Allocation failed
&REG_SRCP SETC 'R'.'&BXA_NUMVAL'       * Create source ptr reg name
&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Nr of odd reg in pair
&REG_SRCL SETC 'R'.'&BXA_NUMVAL'       * Create source len reg name
         USE   &REG_SRCP               * Set registers in use to
         USE   &REG_SRCL               *  prevent re-allocation
         EQUREG PAIR=YES,TEMP=YES,R0=YES,WARN=NO * Alloc dest reg pair
         AIF   (&BXA_RC NE 0).GENMVCL1 * Allocation failed
         DROP  &REG_SRCL               * Source register pair
         DROP  &REG_SRCP               *    no longer needed
         AGO   .DO_MVCL                * Two pairs of regs available!
.GENMVCL1 ANOP ,                       * Second pair not available
         DROP  &REG_SRCL               * Source register pair
         DROP  &REG_SRCP               *    no longer needed
.GENMVCL2 ANOP ,                       *
.* Cannot use MVCL: try to generate a loop
&PAD_LEN SETA  &TO_LEN-&LEN            * Determine pad length
&I       SETA  &LEN/256                * Nr of loops to perform
         AIF   (&I LE 4).GENMVCL6      * Repeat is shorter than loop?
         EQUREG TEMP=YES,WARN=NO       * Allocate src pointer
         AIF   (&BXA_RC NE 0).GENMVCL6 * Not enough regs
&REG_SRCP SETC 'R'.'&BXA_NUMVAL'       * Create source ptr reg name
         USE   &REG_SRCP               * Set reg in use
         EQUREG TEMP=YES,WARN=NO       * Allocate dest pointer
         AIF   (&BXA_RC NE 0).GENMVCL5 * Not enough regs
&REG_DSTP SETC 'R'.'&BXA_NUMVAL'       * Create dest ptr reg name
         USE   &REG_DSTP               * Set reg in use
         EQUREG TEMP=YES,WARN=NO       * A DO loop register available?
         AIF   (&BXA_RC NE 0).GENMVCL4 * No reg available for loop
         MNOTE 0,'No two register pairs available: generating a loop'
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create loop register name
         USE   &REG                    * Set loop counter in use
&_LABEL  LA    &REG_SRCP,&_FROM1       * Init source ptr
&_LABEL  SETC  ''                      * Label no longer needed
         LA    &REG_DSTP,&_TO1         * Init dest ptr
         CPY   &REG,&I                 * Init loop counter
_CPY&SYSNDX LABEL ,                    * Loop point
         MVC   0(256,&REG_DSTP),0(&REG_SRCP) * Move 1 section of data
         INC   &REG_SRCP,256           * Advance src and dest ptrs
         INC   &REG_DSTP,256           *    to next section of data
         BCT   &REG,_CPY&SYSNDX        * Loop to repeat n times
         DROP  &REG                    * Loop counter no longer needed
&J       SETA  &LEN-(256*&I)           * Calculate remaining length
         AIF   (&J LT 1).GENMVCL3      * Any data remains?
         MVC   0(&J,&REG_DSTP),0(&REG_SRCP) * Move remaining data
.GENMVCL3 ANOP ,                       * Data portion has been moved
         DROP  &REG_DSTP               * Free dest ptr
         DROP  &REG_SRCP               * Free src ptr
.* Now we must set up another loop to pad
         AIF   (&PAD_LEN LT 1).MEND    * No padding: we're done
&I       SETA  (&PAD_LEN-1)/256        * Nr of 256-byte sections
         AIF   (&I LE 3).GENMVCL9      * List of MVCs shorter than loop
         MVI   0(&REG_DSTP),C' '       * Insert first pad byte
         LA    &REG,&I                 * Nr of sections
_CPY_&SYSNDX LABEL ,                   * Loop point
         MVC   1(256,&REG_DSTP),0(&REG_DSTP) * Pad 1 section
         INC   &REG_DSTP,256           * Point to next section
         BCT   &REG,_CPY_&SYSNDX       * Loop to repeat n times
&J       SETA  (&PAD_LEN-1)-(256*&I)   * Remaining pad length
         AIF   (&J LT 1).MEND          * All padding completed?
         MVC   1(&J,&REG_DSTP),0(&REG_DSTP) * Wipe remainder
         MEXIT ,                       *
.GENMVCL4 ANOP ,                       * No loop register available
         DROP  &REG_DSTP               * Free up allocated register
.GENMVCL5 ANOP ,                       * No loop register available
         DROP  &REG_SRCP               * Free up allocated register
.GENMVCL6 ANOP ,
.* Last option: generate a lot of MVCs
         MNOTE 0,'Insufficient registers available: generating MVCs'
&I       SETA  &LEN/256                * Nr of MVCs to generate
&J       SETA  0                       * Loop counter
.GENMVCL7 ANOP ,                       * Loop to gen MVCs
         AIF   (&J GE &I).GENMVCL8     * End of loop
&_LABEL  MVC   &_TO1+256*&J.(256),&_FROM1+256*&J
&_LABEL  SETC  ''                      * Wipe used label
&J       SETA  &J+1                    *
         AGO   .GENMVCL7               *
.GENMVCL8 ANOP ,                       * Gen remaining MVC
&J       SETA  &LEN-(256*&I)           * Remaining data
         AIF   (&J LT 1).GENMVCL9      * No data remains
&_LABEL  MVC   &_TO1+256*&I.(&J),&_FROM1+256*&I
&_LABEL  SETC  ''                      * Wipe used label
.GENMVCL9 ANOP ,                       * All data has been moved
         AIF   (&PAD_LEN LT 1).MEND    * No padding: we're done
&_TO1    SETC  '&_TO1'.'+'.'&LEN'      * Set destination area to pad
&TO_LEN  SETA  &TO_LEN-&LEN            * Set length of padding area
.* If possible: generate MVCL instruction to fill pad-area
         AIF   (&PAD_LEN LE 769).GENMVCL13 * Use set of MVCs: shorter
         EQUREG PAIR=YES,TEMP=YES,R0=YES,WARN=NO * Alloc src reg pair
         AIF   (&BXA_RC NE 0).GENMVCL12 * Allocation failed
&REG_SRCP SETC 'R'.'&BXA_NUMVAL'       * Create source ptr reg name
&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Nr of odd reg in pair
&REG_SRCL SETC 'R'.'&BXA_NUMVAL'       * Create source len reg name
         USE   &REG_SRCP               * Set registers in use to
         USE   &REG_SRCL               *  prevent re-allocation
         EQUREG PAIR=YES,TEMP=YES,R0=YES,WARN=NO * Alloc dest reg pair
         AIF   (&BXA_RC NE 0).GENMVCL10 * Allocation failed
         DROP  &REG_SRCL               * Source register pair
         DROP  &REG_SRCP               *    no longer needed
&FROM_LEN SETA 0                       * Set source length to 0
&_FROM1  SETC  '0'                     * Set source ptr to null
         AGO   .DO_MVCL                * Two pairs of regs available!
.GENMVCL10 ANOP ,                      * Second pair not available
         DROP  &REG_SRCL               * Source register pair
         DROP  &REG_SRCP               *    no longer needed
.* Cannot use MVCL: try to generate a loop
&I       SETA  (&PAD_LEN-1)/256        * Nr of 256-byte sections
         AIF   (&I LE 3).GENMVCL13     * Repeat is shorter than loop?
         EQUREG TEMP=YES,WARN=NO       * Allocate dest pointer
         AIF   (&BXA_RC NE 0).GENMVCL13 * Not enough regs
&REG_DSTP SETC 'R'.'&BXA_NUMVAL'       * Create dest ptr reg name
         USE   &REG_DSTP               * Set reg in use
         EQUREG TEMP=YES,WARN=NO       * A DO loop register available?
         AIF   (&BXA_RC NE 0).GENMVCL12 * No reg available for loop
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create loop register name
         USE   &REG                    * Set loop counter in use
         LA    &REG_DSTP,&_TO1         * Point to pad-area
         MVI   0(&REG_DSTP),C' '       * Insert first pad byte
         LA    &REG,&I                 * Nr of sections
_CPY_&SYSNDX LABEL ,                   * Loop point
         MVC   1(256,&REG_DSTP),0(&REG_DSTP) * Pad 1 section
         INC   &REG_DSTP,256           * Point to next section
         BCT   &REG,_CPY_&SYSNDX       * Loop to repeat n times
         DROP  &REG                    * Loop counter no longer needed
         DROP  &REG_DSTP               *
&J       SETA  (&PAD_LEN-1)-(256*&I)   * Remaining pad length
         AIF   (&J LT 1).MEND          * All padding completed?
         MVC   1(&J,&REG_DSTP),0(&REG_DSTP) * Wipe remainder
         MEXIT ,                       *
.GENMVCL12 ANOP ,                      *
         DROP  &REG_DSTP               *
.GENMVCL13 ANOP ,                      *
&I       SETA  (&PAD_LEN-1)/256        * Nr of 256-byte sections
         MVI   &_TO1,C' '              * Insert first pad byte
&J       SETA  0                       * Loop counter
.GENMVCL15 ANOP ,                      *
         AIF   (&J GE &I).GENMVCL16    * End of loop
         MVC   &_TO1+1+256*&J.(256),&_TO1+256*&J
&J       SETA  &J+1                    *
         AGO   .GENMVCL15              *
.GENMVCL16 ANOP ,                      *
&J       SETA  (&PAD_LEN-1)-(256*&I)   * Remaining pad-length
         AIF   (&J LT 1).MEND          * No more padding: we're done
         MVC   &_TO1+1+256*&I.(&J),&_TO1+256*&I
         MEXIT ,                       *
.*
.* Copy two unsigned fields of unequal length, under 256
.GENMVC0 ANOP  ,                       *
         AIF   (&TO_LEN GT 255).ERR7D  * Length within limit?
         AIF   (&FROM_LEN GT 255).ERR7E * Length within limit?
         AIF   (&TO_LEN EQ &FROM_LEN).DO_MVC * Lengths equal?
         AIF   (&TO_LEN LT &FROM_LEN).GENMVC0A * Adjust source
.* Destination field is larger
&I       SETA  &TO_LEN-&FROM_LEN       * Data offset in TO-field
         AIF   (&I GT 1).GENMVC0XC     * Length to clear > 1: use XC
&_LABEL  MVI   &_TO1.,X'00'            * Wipe destination area
         AGO   .GENMVC0B               *
.GENMVC0XC ANOP ,                      *
&_LABEL  XC    &_TO1.(&I),&_TO1        * Wipe destination area
.GENMVC0B ANOP ,                       * Destination field now cleared
&_LABEL  SETC  ''                      * Remove label
&_TO1    SETC  '&_TO1'.'+&I'           * Add offset to TO field
&TO_LEN  SETA  &FROM_LEN               * Reduce length of TO field
         AGO   .DO_MVC                 * Go generate MVC instruction
.* Source field is larger
.GENMVC0A ANOP ,                       *
&I       SETA  &FROM_LEN-&TO_LEN       * Data offset in FROM-field
&_FROM1  SETC  '&_FROM1'.'+&I'         * Add offset to FROM field
&FROM_LEN SETA &TO_LEN                 * Reduce length of FROM field
         AGO   .DO_MVC                 * Go generate MVC instruction
.*
.* Store several registers into unaligned field
.GENSTCMM ANOP ,                       *
&I       SETA  &FROM_REG               * Save first register number
&J       SETA  0                       * Offset in source field
.GENSTCMM0 ANOP ,                      * Loop
&_LABEL  STCM  &_FROM1,YYYY,&_TO1+&J   *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill
&J       SETA  &J+4                    * Point next dest field
&I       SETA  &I+1                    * Next register number
         AIF   (&I LT 16).GENSTCMM1    * Valid register nr
&I       SETA  0                       * Wrap-around to R0
.GENSTCMM1 ANOP ,                      * I now next register nr
&_FROM1  SETC  'R'.'&I'                * Create next register name
         AGO   .GENSTCMM0              *
.*
.* Store several floating point registers into long operands
.GENSTDM ANOP  ,                       *
&I       SETA  &FROM_REG               * Save first register number
&J       SETA  0                       * Offset in dest. field
.GENSTDM0 ANOP ,                       * Loop
&_LABEL  STD   &_FROM1,&_TO1+&J        *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-8               * Reduce length
         AIF   (&TO_LEN LT 8).MEND     * No registers left to save
&J       SETA  &J+8                    * Point next long field
&I       SETA  &I+2                    * Next register number
         AIF   (&I LT 8).GENSTDM1      * Valid register nr
&I       SETA  0                       * Wrap-around to FPR0
.GENSTDM1 ANOP ,                       * I now next register nr
&_FROM1  SETC  'FPR'.'&I'              * Create next register name
         AGO   .GENSTDM0               *
.*
.* Store several floating point registers into short operands
.GENSTEM ANOP  ,                       *
&I       SETA  &FROM_REG               * Save first register number
&J       SETA  0                       * Offset in dest. field
.GENSTEM0 ANOP ,                       * Loop
&_LABEL  STE   &_FROM1,&_TO1+&J        *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-4               * Reduce length
         AIF   (&TO_LEN LT 4).MEND     * No registers left to save
&J       SETA  &J+4                    * Point next long field
&I       SETA  &I+2                    * Next register number
         AIF   (&I LT 8).GENSTEM1      * Valid register nr
&I       SETA  0                       * Wrap-around to FPR0
.GENSTEM1 ANOP ,                       * I now next register nr
&_FROM1  SETC  'FPR'.'&I'              * Create next register name
         AGO   .GENSTEM0               *
.*
.* Store several registers into halfwords
.GENSTHM ANOP  ,                       *
&I       SETA  &FROM_REG               * Save first register number
&J       SETA  0                       * Offset in dest. field
.GENSTHM0 ANOP ,                       * Loop
&_LABEL  STH   &_FROM1,&_TO1+&J        *
&_LABEL  SETC  ''                      * Remove label after use
&TO_LEN  SETA  &TO_LEN-2               * Reduce length
         AIF   (&TO_LEN LT 2).MEND     * No registers left to save
&J       SETA  &J+2                    * Point next halfword
&I       SETA  &I+1                    * Next register number
         AIF   (&I LT 16).GENSTHM1     * Valid register nr
&I       SETA  0                       * Wrap-around to R0
.GENSTHM1 ANOP ,                       * I now next register nr
&_FROM1  SETC  'R'.'&I'                * Create next register name
         AGO   .GENSTHM0               *
.*
.* Save several floating point registers into extended operands
.GENSTXM ANOP  ,                       *
&I       SETA  &FROM_REG               * Save first register number
         AIF   (&I NE 0 AND &I NE 4).ERR7V * Not a valid pair!
&I       SETA  &I+2                    * Nr of next register
&ODDREG  SETC  'FPR'.'&I'              * Name of second register
&J       SETA  0                       * Offset in source field
.GENSTXM0 ANOP ,                       * Loop
&_LABEL  STD   &_FROM1,&_TO1+&J        * Save low-order register
&_LABEL  SETC  ''                      * Remove label after use
&J       SETA  &J+8                    * Point next long field
         STD   &ODDREG,&_TO1+&J        * Save high-order register
&TO_LEN  SETA  &TO_LEN-16              * Reduce length
         AIF   (&TO_LEN LT 16).MEND    * No registers left to fill
&J       SETA  &J+8                    * Point next long field
&I       SETA  &I+2                    * Next register number
         AIF   (&I LT 8).GENSTXM1      * Valid register nr
&I       SETA  0                       * Wrap-around to FPR0
.GENSTXM1 ANOP ,                       * I now next register nr
&_FROM1  SETC  'FPR'.'&I'              * Create next register name
&I       SETA  &I+2                    * Nr of next register
&ODDREG  SETC  'FPR'.'&I'              * Name of second register
         AGO   .GENSTXM0               *
.*
.* Generate an Extract stacked REGisters
.DO_EREG ANOP  ,                       *
&I       SETA  &TO_LEN/4               * Get number of registers
&I       SETA  &TO_REG+&I-1            * Get ending register number
         AIF   (&I LE 15).DO_EREG1     * End-reg is ok
&I       SETA  &I-16                   * Perform wrap-around
.DO_EREG1 ANOP ,                       * End-register determined
&REG     SETC  'R'.'&I'                * Create register name
&_LABEL  EREG  &_TO1,&REG              *
         MEXIT ,                       *
.*
.* Generate an Insert Characters under Mask
.DO_ICM  ANOP  ,                       *
&_LABEL  ICM   &_TO1,&MASK,&_FROM1     *
         MEXIT ,                       *
.*
.* Generate a Load instruction to fill a register
.DO_L    ANOP  ,                       *
&_LABEL  L     &_TO1,&_FROM1           *
         MEXIT ,                       *
.*
.* Generate a CVB instruction to fill a register
.DO_CVB  ANOP  ,                       *
&_LABEL  CVB   &_TO1,&_FROM1           *
         MEXIT ,                       *
.*
.* Generate a Load Access Multiple instruction to fill some ARs
.DO_LAM  ANOP  ,                       *
&REG     SETC  '&_TO1'                 * Default end register name
         AIF   (&TO_LEN EQ 4).DO_LAM1  * Ok: load 1 access register
&I       SETA  &TO_LEN/4               * Get number of registers
&I       SETA  &TO_REG+&I-1            * Get ending register number
&REG     SETC  'AR'.'&I'               * Create register name
         AIF   (&I LE 15).DO_LAM1      * End-reg is ok
&I       SETA  &I-16                   * Perform wrap-around
&REG     SETC  'AR'.'&I'               * Create register name
.DO_LAM1 ANOP  ,                       * End-register determined
&_LABEL  LAM   &_TO1,&REG,&_FROM1      *
         MEXIT ,                       *
.*
.* Generate a Load Control instruction to fill some control registers
.DO_LCTL ANOP  ,                       *
&REG     SETC  '&_TO1'                 * Default end register name
         AIF   (&TO_LEN EQ 4).DO_LCTL1 * Ok: load 1 control register
&I       SETA  &TO_LEN/4               * Get number of registers
&I       SETA  &TO_REG+&I-1            * Get ending register number
&REG     SETC  'CR'.'&I'               * Create register name
         AIF   (&I LE 15).DO_LCTL1     * End-reg is ok
&I       SETA  &I-16                   * Perform wrap-around
&REG     SETC  'CR'.'&I'               * Create register name
.DO_LCTL1 ANOP ,                       * End-register determined
&_LABEL  LCTL  &_TO1,&REG,&_FROM1      *
         MEXIT ,                       *
.*
.* Generate a Load floating point (long)
.DO_LD   ANOP  ,                       *
&_LABEL  LD    &_TO1,&_FROM1           *
         MEXIT ,                       *
.*
.* Generate a Load floating point (short)
.DO_LE   ANOP  ,                       *
&_LABEL  LE    &_TO1,&_FROM1           *
         MEXIT ,                       *
.*
.* Generate a Load Multiple instruction to fill some registers
.DO_LM   ANOP  ,                       *
         AIF   (&TO_LEN EQ 4).DO_L     * Load only 1 register
&I       SETA  &TO_LEN/4               * Get number of registers
&I       SETA  &TO_REG+&I-1            * Get ending register number
         AIF   (&I LE 15).DO_LM1       * End-reg is ok
&I       SETA  &I-16                   * Perform wrap-around
.DO_LM1  ANOP  ,                       * End-register determined
&REG     SETC  'R'.'&I'                * Create register name
&_LABEL  LM    &_TO1,&REG,&_FROM1      *
         MEXIT ,                       *
.*
.* Copy two fields of equal length, under 256
.* Generate explict length when specified or needed
.DO_MVC  ANOP  ,                       *
         AIF   (K'&_TO2 NE 0).DO_MVC1  * Use explicit length specified
         AIF   (&TO_LEN NE L'&_TO1).DO_MVC1 * Use deviating length
&_LABEL  MVC   &_TO1,&_FROM1           * Use implicit length
         MEXIT ,                       *
.DO_MVC1 ANOP  ,                       *
&_LABEL  MVC   &_TO1.(&TO_LEN),&_FROM1 *
         MEXIT ,                       *
.*
.* Copy data, using MVCL
.DO_MVCL ANOP  ,                       *
         EQUREG PAIR=YES,TEMP=YES,R0=YES * Allocate src reg pair
         AIF   (&BXA_RC NE 0).ERR7F    * Allocation failed
&REG_SRCP SETC 'R'.'&BXA_NUMVAL'       * Create source ptr reg name
&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Nr of odd reg in pair
&REG_SRCL SETC 'R'.'&BXA_NUMVAL'       * Create source len reg name
         USE   &REG_SRCP               * Set registers
         USE   &REG_SRCL               *     in use
         EQUREG PAIR=YES,TEMP=YES,R0=YES * Allocate dest reg pair
         AIF   (&BXA_RC NE 0).ERR7F    * Allocation failed
&REG_DSTP SETC 'R'.'&BXA_NUMVAL'       * Create dest ptr reg name
&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Nr of odd reg in pair
&REG_DSTL SETC 'R'.'&BXA_NUMVAL'       * Create dest len reg name
         USE   &REG_DSTP               * Set registers
         USE   &REG_DSTL               *     in use
.* Set source length
         AIF   (&FROM_LEN EQ 0).DO_MVCLA * Length is in a register?
&_LABEL  CPY   &REG_SRCL,&FROM_LEN     * Set length of source data
         AGO   .DO_MVCLB               *
.DO_MVCLA ANOP ,                       *
&_LABEL  LR    &REG_SRCL,&_FROM2       * Set length of source data
.DO_MVCLB ANOP ,                       *
&_LABEL  SETC  ''                      * Label no longer needed
.* Set source address
         AIF   ('&_FROM1' EQ '0').DO_MVCL0
         AIF   ('&FROM_TP' EQ 'p').DO_MVCLC * Pointered source field?
         AGO   .DO_MVCLE               * No: normal field
.DO_MVCLC ANOP ,                       *
         AIF   ('&SYSASCE' EQ 'P').DO_MVCLD * Primary mode?
         LAE   &REG_SRCP,0(,&_FROM1)   * Point to source data
         AGO   .DO_MVCL1               *
.DO_MVCLD ANOP ,                       *
         LR    &REG_SRCP,&_FROM1       * Point to source data
         AGO   .DO_MVCL1               *
.DO_MVCLE ANOP ,                       *
         AIF   ('&SYSASCE' EQ 'P').DO_MVCLF * Primary mode?
         LAE   &REG_SRCP,&_FROM1       * Point to source data
         AGO   .DO_MVCL1               *
.DO_MVCLF ANOP ,                       *
         LA    &REG_SRCP,&_FROM1       * Point to source data
         AGO   .DO_MVCL1               *
.DO_MVCL0 ANOP ,                       *
         CLEAR &REG_SRCP               * Clear source data pointer
.DO_MVCL1 ANOP ,                       *
.* Set destination length
         AIF   (&TO_LEN NE 0).DO_MVCLG
         LR    &REG_DSTL,&_TO2         * Set length of dest field
         AGO   .DO_MVCL3               *
.DO_MVCLG ANOP ,                       *
         AIF   (&TO_LEN NE &FROM_LEN).DO_MVCL2
         LR    &REG_DSTL,&REG_SRCL     * Copy data length
         AGO   .DO_MVCL3               *
.DO_MVCL2 ANOP ,                       *
         CPY   &REG_DSTL,&TO_LEN       * Set length of dest field
.DO_MVCL3 ANOP ,                       *
.* Set destination address
         AIF   ('&TO_TP' EQ 'p').DO_MVCLH * Pointered dest field?
         AGO   .DO_MVCLJ               * No: normal field
.DO_MVCLH ANOP ,                       *
         AIF   ('&SYSASCE' EQ 'P').DO_MVCLI * Primary mode?
         LAE   &REG_DSTP,0(,&_TO1)     * Point to destination field
         AGO   .DO_MVCL4               *
.DO_MVCLI ANOP ,                       *
         LR    &REG_DSTP,&_TO1         * Point to destination field
         AGO   .DO_MVCL4               *
.DO_MVCLJ ANOP ,                       *
         AIF   ('&SYSASCE' EQ 'P').DO_MVCLK * Primary mode?
         LAE   &REG_DSTP,&_TO1         * Point to destination field
         AGO   .DO_MVCL4               *
.DO_MVCLK ANOP ,                       *
         LA    &REG_DSTP,&_TO1         * Point to destination field
.DO_MVCL4 ANOP ,                       *
.* Insert padding into source length register
         AIF   (&FROM_LEN EQ 0).DO_MVCL5 * Pad with zeros if needed
         AIF   (&TO_LEN EQ 0).DO_MVCL5 * Pad with zeros if needed
         AIF   (&FROM_LEN GE &TO_LEN).DO_MVCL5 * No padding needed
         AIF   (&PAD0).DO_MVCL5        * Pad=X'00' --> No pad needed
         ICM   &REG_SRCL,YNNN,=C' '    * Set padding to spaces
.DO_MVCL5 ANOP ,                       *
.*
         MVCL  &REG_DSTP,&REG_SRCP     *
         DROP  &REG_DSTL               * Destination register pair
         DROP  &REG_DSTP               *    no longer needed
         DROP  &REG_SRCL               * Source register pair
         DROP  &REG_SRCP               *    no longer available
         MEXIT ,                       *
.*
.* Generate a PACK to copy zoned decimal data to a packed field
.DO_PACK ANOP  ,                       *
         AIF   (K'&_TO2 NE 0).DO_PACK0 *
         AIF   (&TO_LEN NE L'&_TO1).DO_PACK0 *
         AGO   .DO_PACK1               *
.DO_PACK0 ANOP ,                       * Add explicit dest.length
&_TO1    SETC  '&_TO1'.'(&TO_LEN)'     * Add length to destination
.DO_PACK1 ANOP ,                       * Length now in destination fld
         AIF   (K'&_FROM2 NE 0).DO_PACK2 *
         AIF   (&FROM_LEN NE L'&_FROM1).DO_PACK2 *
         AGO   .DO_PACK3               *
.DO_PACK2 ANOP ,                       * Add explicit src.length
&_FROM1  SETC  '&_FROM1'.'(&FROM_LEN)' * Add length to source
.DO_PACK3 ANOP ,                       * Length now in source fld
&_LABEL  PACK  &_TO1,&_FROM1           *
         MEXIT ,                       *
.*
.* Generate a Store register
.DO_ST   ANOP  ,                       *
&_LABEL  ST    &_FROM1,&_TO1           *
         MEXIT ,                       *
.*
.* Generate a Store Access Multiple instruction to save some ARs
.DO_STAM ANOP  ,                       *
&I       SETA  &FROM_LEN/4             * Get number of registers
&I       SETA  &FROM_REG+&I-1          * Get ending register number
&REG     SETC  'AR'.'&I'               * Create register name
         AIF   (&I LE 15).DO_STAM1     * End-reg is ok
&I       SETA  &I-16                   * Perform wrap-around
&REG     SETC  'AR'.'&I'               * Create register name
.DO_STAM1 ANOP ,                       * End-register determined
&_LABEL  STAM  &_FROM1,&REG,&_TO1      *
         MEXIT ,                       *
.*
.* Generate a Store characters under mask
.DO_STCM ANOP  ,                       *
&_LABEL  STCM  &_FROM1,&MASK,&_TO1     *
         MEXIT ,                       *
.*
.* Generate a Store Control instruction to fill some control registers
.DO_STCTL ANOP ,                       *
&I       SETA  &FROM_LEN/4             * Get number of registers
&I       SETA  &FROM_REG+&I-1          * Get ending register number
&REG     SETC  'CR'.'&I'               * Create register name
         AIF   (&I LE 15).DO_STCTL1    * End-reg is ok
&I       SETA  &I-16                   * Perform wrap-around
&REG     SETC  'CR'.'&I'               * Create register name
.DO_STCTL1 ANOP ,                      * End-register determined
&_LABEL  STCTL &_FROM1,&REG,&_TO1      *
         MEXIT ,                       *
.*
.* Generate a Store floating point (long)
.DO_STD  ANOP  ,                       *
&_LABEL  STD   &_FROM1,&_TO1           *
         MEXIT ,                       *
.*
.* Generate a Store floating point (short)
.DO_STE  ANOP  ,                       *
&_LABEL  STE   &_FROM1,&_TO1           *
         MEXIT ,                       *
.*
.* Generate a Store Halfword
.DO_STH  ANOP  ,                       *
&_LABEL  STH   &_FROM1,&_TO1           *
         MEXIT ,                       *
.*
.* Generate a Store Multiple instruction to save some registers
.DO_STM  ANOP  ,                       *
&I       SETA  &FROM_LEN/4             * Get number of registers
&I       SETA  &FROM_REG+&I-1          * Get ending register number
         AIF   (&I LE 15).DO_STM1      * End-reg is ok
&I       SETA  &I-16                   * Perform wrap-around
.DO_STM1 ANOP  ,                       * End-register determined
&REG     SETC  'R'.'&I'                * Create register name
&_LABEL  STM   &_FROM1,&REG,&_TO1      *
         MEXIT ,                       *
.*
.* Generate an UNPK to copy packed decimal data to a zoned field
.DO_UNPK ANOP  ,                       *
         AIF   (K'&_TO2 NE 0).DO_UNPK0 *
         AIF   (&TO_LEN NE L'&_TO1).DO_UNPK0 *
         AGO   .DO_UNPK1               *
.DO_UNPK0 ANOP ,                       * Add explicit dest.length
&_TO1    SETC  '&_TO1'.'(&TO_LEN)'     * Add length to destination
.DO_UNPK1 ANOP ,                       * Length now in destination fld
         AIF   (K'&_FROM2 NE 0).DO_UNPK2 *
         AIF   (&FROM_LEN NE L'&_FROM1).DO_UNPK2 *
         AGO   .DO_UNPK3               *
.DO_UNPK2 ANOP ,                       * Add explicit src.length
&_FROM1  SETC  '&_FROM1'.'(&FROM_LEN)' * Add length to source
.DO_UNPK3 ANOP ,                       * Length now in source fld
&_LABEL  UNPK  &_TO1,&_FROM1           *
         MEXIT ,                       *
.*
.* Generate a ZAP to copy packed decimal data
.DO_ZAP  ANOP  ,                       *
         AIF   (K'&_TO2 NE 0).DO_ZAP0  *
         AIF   (&TO_LEN NE L'&_TO1).DO_ZAP0 *
         AGO   .DO_ZAP1                *
.DO_ZAP0 ANOP  ,                       * Add explicit dest.length
&_TO1    SETC  '&_TO1'.'(&TO_LEN)'     * Add length to destination
.DO_ZAP1 ANOP  ,                       * Length now in destination fld
         AIF   (K'&_FROM2 NE 0).DO_ZAP2 *
         AIF   (&FROM_LEN NE L'&_FROM1).DO_ZAP2 *
         AGO   .DO_ZAP3                *
.DO_ZAP2 ANOP  ,                       * Add explicit src.length
&_FROM1  SETC  '&_FROM1'.'(&FROM_LEN)' * Add length to source
.DO_ZAP3 ANOP  ,                       * Length now in source fld
&_LABEL  ZAP   &_TO1,&_FROM1           *
         MEXIT ,                       *
.*
.MEND    MEND
./ ADD NAME=DBG      0100-20096-20096-0111-00475-00475-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates debugging code.
.*
&LABEL   DBG   &TYPE,                  * LOAD, FIND, SNAP, CLOSE, ABEND*
               &TITLE,                 * SNAP: title for SNAP dump     *
               &EP=,                   * LOAD: entrypoint name         *
               &PTR=,                  * LOAD: pointer to debug module *
               &PLIST=,                * LOAD: fieldnames for plist    *
               &CB=,                   * SNAP: control blocks to dump  *
               &NTRT=,                 * FIND: NTRT field names        *
               &SAVE=                  * SNAP: YES/NO save/restore regs
.*
.* &TYPE  specifies the type of code to generate:
.*        LOAD : loads and initializes the debug module
.*        FIND : retrieves existing DBG environment (if any)
.*        CLOSE: terminates and removes the debug module
.*        SNAP : generates a call to the debug module
.*        ABEND: forces an immediate S0C1-abend
.* &TITLE used only with TYPE=SNAP. Specifies the title of the snapdump
.*        used only with TYPE=ABND. Specifies NOWARN to suppress the
.*        warning message normally issued for a deliberate S0C1-abend.
.* &EP    used only with TYPE=LOAD. Specifies the entry point name
.*        of the debugging module.
.* &PTR   used only with TYPE=LOAD and TYPE=FIND.
.*        Specifies the name of a field that
.*        will be used to hold the entry point address to the debug
.*        module. This fieldname is set on the TYPE=LOAD/FIND expansion
.*        and subsequently used on all TYPE=SNAP and TYPE=CLOSE
.*        expansions.
.* &PLIST used only with TYPE=LOAD and TYPE=FIND.
.*        Specifies the names of two fields:
.*        - PLIST area for debug module, mapped by MAPDBG macro
.*        - An area for the function code
.* &CB    used only with TYPE=SNAP. Specifies which control blocks
.*        will be snapped. Valid values for CB are:
.*        - USER all user control blocks will be SNAPped: SCB and
.*               anything pointed to by the SCB
.*        - SYS  a variety of system control blocks will be SNAPped:
.*          CVT, SCVT, SVC-table, SVC update table, etc.
.*        - DSPC the contents of dataspace BXADSPC will be SNAPped
.*        - TASK the contents of TCB and related control blocks will be
.*               SNAPped
.* &NTRT  used only with TYPE=FIND.
.*        Specifies the name of three fields:
.*        - Plist area for NTRT macro
.*        - An area for the retrieved token
.*        - An area for the returncode from NTRT
.* &SAVE  used only with TYPE=SNAP. Defaults to yes if omitted.
.*        If YES all GPRs and all ARs will be stored in the DBG
.*        dynamic area before DBG is invoked. Upon return, all 32
.*        registers will be restored.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DBG                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare global and local variables
         GBLB  &SP_DBG                 * Debugging enablement
         GBLC  &BXA_DBG_PTR            * pointer to loadmod
         GBLC  &BXA_DBG_EP             * entry point name
         GBLC  &BXA_DBG_PLIST          * plist field name
         GBLA  &BXA_DBG_SKIP           * Nr of skipped operations
         GBLC  &SYSASCE                * Address space control setting
.*
         LCLC  &_PTR                   * from PTR or BXA_DBG_PTR
         LCLC  &_CB                    * defaults to USER if CB empty
         LCLC  &ASCMODE                * ASC mode at entry
.*
.* Debugging enabled?
         AIF   (&SP_DBG).DBGOK         * Enabled: expand this macro
&BXA_DBG_SKIP SETA &BXA_DBG_SKIP+1     * Disabled: increment count
         MEXIT ,                       *   of skipped DBG-operations
.DBGOK   ANOP
.*
.* Check validity of the Type parameter
         AIF   ('&TYPE' EQ 'SNAP').NOERR1
         AIF   ('&TYPE' EQ 'LOAD').NOERR1
         AIF   ('&TYPE' EQ 'FIND').NOERR1
         AIF   ('&TYPE' EQ 'CLOSE').NOERR1
         AIF   ('&TYPE' EQ 'ABEND').NOERR1
         AIF   ('&TYPE' EQ 'ABND').NOERR1
.ERR1    MNOTE 8,'Invalid value supplied for first positional parameter*
               '
         MEXIT
.NOERR1  ANOP
.*
.* Check validity of the EP parameter
         AIF   ('&TYPE' EQ 'LOAD').ERR2_RQ
         AIF   (K'&EP EQ 0).NOERR2
.ERR2A   MNOTE 4,'Entry-point name specified: ignored'
         AGO   .NOERR2
.ERR2_RQ ANOP
         AIF   (K'&EP EQ 0).ERR2B
         AIF   (K'&EP GT 8).ERR2C
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Missing entry-point name for DBG TYPE=LOAD'
         AGO   .NOERR2
.ERR2C   MNOTE 8,'Entry-point name exceeds 8 chars on DBG TYPE=LOAD'
.NOERR2  ANOP
.*
.* Check validity of the PTR parameter
         AIF   ('&TYPE' EQ 'LOAD').ERR3_RQ
         AIF   ('&TYPE' EQ 'FIND').ERR3_RQ
         AIF   ('&TYPE' EQ 'SNAP').ERR3_OP
         AIF   ('&TYPE' EQ 'CLOSE').ERR3_OP
         AIF   (K'&PTR EQ 0).NOERR3
         AGO   .NOERR3
.ERR3_RQ ANOP
         AIF   (K'&PTR EQ 0).ERR3B
         AGO   .NOERR3
.ERR3_OP ANOP
         AIF   (K'&PTR NE 0).NOERR3
         AIF   (K'&BXA_DBG_PTR NE 0).NOERR3
         AGO   .ERR3B
.ERR3A   MNOTE 4,'Pointer field name specified: ignored'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'Missing pointer field name for DBG TYPE=&TYPE'
         MEXIT
.NOERR3  ANOP
.*
.* Set PTR-field to the required value
&_PTR    SETC  '&PTR'
         AIF   (K'&PTR NE 0).SNAP_PTR
&_PTR    SETC  '&BXA_DBG_PTR'
.SNAP_PTR ANOP
.*
.* Check validity of the CB parameter
         AIF   (K'&CB EQ 0).NOERR4
         AIF   ('&CB' EQ 'USER').NOERR4
         AIF   ('&CB' EQ 'SYS').NOERR4
         AIF   ('&CB' EQ 'DSPC').NOERR4
         AIF   ('&CB' EQ 'TASK').NOERR4
.ERR4    MNOTE 8,'Invalid value specified on CB parameter'
.NOERR4  ANOP
.*
         AIF   ('&TYPE' EQ 'SNAP').ERR5_RQ
         AIF   (K'&CB EQ 0).NOERR5
.ERR5A   MNOTE 4,'CB parameter specified: ignored'
         AGO   .NOERR5
.ERR5_RQ ANOP
.* Set &_CB to default if &CB not specified for TYPE=SNAP
&_CB     SETC  '&CB'
         AIF   (K'&CB EQ 0).NOERR5
&_CB     SETC  'USER'
.NOERR5  ANOP
.*
.* Check validity of the Title parameter
         AIF   ('&TYPE' EQ 'SNAP').ERR6_RQ
         AIF   (('&TYPE' EQ 'ABND' OR '&TYPE' EQ 'ABEND')              *
               AND '&TITLE' NE '' AND '&TITLE' NE 'NOWARN').ERR6E
         AIF   ('&TYPE' EQ 'ABND' OR '&TYPE' EQ 'ABEND').NOERR6
         AIF   (K'&TITLE EQ 0).NOERR6
.ERR6A   MNOTE 4,'Title specified: ignored'
         AGO   .NOERR6
.ERR6_RQ ANOP
         AIF   (K'&TITLE EQ 0).ERR6B
         AIF   ('&TITLE'(1,1) NE '''').ERR6C
         AIF   ('&TITLE'(K'&TITLE,1) NE '''').ERR6C
         AIF   (K'&TITLE GT 240).ERR6D
         AGO   .NOERR6
.ERR6B   MNOTE 4,'Missing title for DBG TYPE=SNAP'
         AGO   .NOERR6
.ERR6C   MNOTE 8,'Title must be specified in single quotes'
         AGO   .NOERR6
.ERR6D   MNOTE 8,'Title must not exceed 240 characters'
         AGO   .NOERR6
.ERR6E   MNOTE 4,'Second parameter for DBG &TYPE not NOWARN: ignored'
.NOERR6  ANOP
.*
.* Check validity of the PLIST parameter
         AIF   ('&TYPE' EQ 'LOAD').ERR7_RQ
         AIF   ('&TYPE' EQ 'FIND').ERR7_RQ
         AIF   (K'&PLIST EQ 0).NOERR7
.ERR7A   MNOTE 4,'PLIST parameter specified: ignored'
         AGO   .NOERR7
.ERR7_RQ ANOP
         AIF   (K'&PLIST EQ 0).ERR7B
         AIF   ('&PLIST'(1,1) NE '(').ERR7C
         AIF   (N'&PLIST EQ 0).ERR7D
         AIF   (N'&PLIST EQ 1).ERR7D
         AIF   (N'&PLIST GT 2).ERR7D
         AIF   ('&PLIST(1)'(1,1) EQ '(').ERR7E
         AIF   ('&PLIST(2)'(1,1) EQ '(').ERR7E
         AGO   .NOERR7
.ERR7B   MNOTE 8,'Missing parameter PLIST for DBG TYPE=&TYPE'
         AGO   .NOERR7
.ERR7C   MNOTE 8,'Missing parentheses on parameter PLIST'
         AGO   .NOERR7
.ERR7D   MNOTE 8,'PLIST parameter must contain two field-names'
         AGO   .NOERR7
.ERR7E   MNOTE 8,'PLIST sub-parameter must not specify (register)'
.NOERR7  ANOP
.*
.* Check validity of the NTRT parameter
         AIF   ('&TYPE' EQ 'FIND').ERR8_RQ
         AIF   (K'&NTRT EQ 0).NOERR8
.ERR8A   MNOTE 4,'NTRT parameter specified: ignored'
         AGO   .NOERR8
.ERR8_RQ ANOP
         AIF   (K'&NTRT EQ 0).ERR8B
         AIF   ('&NTRT'(1,1) NE '(').ERR8C
         AIF   (N'&NTRT LT 3).ERR8D
         AIF   (N'&NTRT GT 3).ERR8D
         AIF   ('&NTRT(1)'(1,1) EQ '(').ERR8E
         AIF   ('&NTRT(2)'(1,1) EQ '(').ERR8E
         AIF   ('&NTRT(3)'(1,1) EQ '(').ERR8E
         AGO   .NOERR8
.ERR8B   MNOTE 8,'Missing parameter NTRT for DBG TYPE=&TYPE'
         AGO   .NOERR8
.ERR8C   MNOTE 8,'Missing parentheses on parameter NTRT'
         AGO   .NOERR8
.ERR8D   MNOTE 8,'NTRT parameter must contain three field-names'
         AGO   .NOERR8
.ERR8E   MNOTE 8,'NTRT sub-parameter must not specify (register)'
.NOERR8  ANOP
.*
.* Check SAVE parameter
         AIF   ('&TYPE' EQ 'SNAP').ERR9_RQ
         AIF   (K'&SAVE EQ 0).NOERR9
.ERR9A   MNOTE 4,'SAVE parameter specified: ignored'
         AGO   .NOERR9
.ERR9_RQ ANOP
         AIF   (K'&SAVE EQ 0).NOERR9
         AIF   ('&SAVE' EQ 'NO').NOERR9
         AIF   ('&SAVE' EQ 'YES').NOERR9
.ERR9B   MNOTE 8,'SAVE parameter must specify either YES or NO'
.NOERR9  ANOP  ,
.*
.* Generate label
&LABEL   LABEL ,
.*
.* Include required section, depending on TYPE parameter
         AIF   ('&TYPE' EQ 'ABEND').ABEND
         AIF   ('&TYPE' EQ 'ABND').ABEND
.*
         GENMAPS (MAP$DBG)             * Mapping macro for debug plist
         AIF   ('&TYPE' EQ 'SNAP').SNAP
         AIF   ('&TYPE' EQ 'LOAD').LOAD
         AIF   ('&TYPE' EQ 'FIND').FIND
         AIF   ('&TYPE' EQ 'CLOSE').CLOSE
         MNOTE 12,'Internal error'
         MEXIT
.*
.LOAD    ANOP
.*
.* Generate code for loading the debug module
*
* Load the debug module into storage
         LOAD  EP=&EP                  * Abend on error
         LR    R1,R0                   * Copy entry point address
         LA    R1,0(,R1)               * Remove garbage bits
         ST    R1,&PTR                 * Set pointer to routine
*
* Initialize the parameter list and the debug routine itself
         LA    R1,&PLIST(1)            * Retrieve address of plist
PL       USE   DBGPL,R1                * And set addressable
         CLEAR (PL.DBGPL,DBGPL_LEN)    * Wipe area clean
         LA    R15,&PLIST(2)           * Get address of function code
         ST    R15,PL.DBGFUNPT         * Store into plist
*
         MVI   0(R15),DBGINIT          * Set parm-value to init
         L     R15,&PTR                * Load debug-routine address
         BASR  R14,R15                 * Call BXADBG00
         DROP  PL                      * DBGPL,R1
*
* On error during init, set debug mode inactive
         LTR   R15,R15                 * Everything was ok?
         BZ    _LOAD&SYSNDX            * Yes: continue
         DELETE EP=&EP                 * Remove debug module from stor
         ABND  TSTRC,RCD=IGNORE        * On error abend program
         XC    &PTR,&PTR               * Reset debug-mod pointer
_LOAD&SYSNDX LABEL ,                   * Init was ok: keep DBG-routine
.*
.* Put supplied values into Globals
&BXA_DBG_PTR SETC '&PTR'
&BXA_DBG_EP SETC '&EP'
&BXA_DBG_PLIST SETC '&PLIST(1)'
         MEXIT
.*
.FIND    ANOP
*
* Retrieve the Named token for debugging options
         XC    &PTR.(4),&PTR           * Clear module pointer field
         XC    &PLIST(1),&PLIST(1)     * Clear plist pointer field
         NTRT  ,,&NTRT(2),&NTRT(3),    * Create                        *
               LVL=IEANT_TASK_LEVEL,   *  plist                        *
               NAME='BIXXAMS.DBG',     *   for token                   *
               MF=(G,&NTRT(1))         *    retrieval
         NTRT  MF=(E,&NTRT(1))         * Retrieve token value
         LTR   R15,R15                 * Token was found?
         BNZ   _DBG&SYSNDX             * No: do not set up for DBG
         LA    R1,&PLIST(1)            * Point to plist
PL       USE   DBGPL,R1                * And set it addressable
         L     R14,&NTRT(2)            * Retrieve DBG epa from token
         ST    R14,&PTR                * And put it into a safe place
         L     R14,&NTRT(2)+4          * Retrieve DBG workarea address
         ST    R14,PL.DBGWRKPT         * And put it into our plist
         LA    R14,&PLIST(2)           * Point to function code
         ST    R14,PL.DBGFUNPT         * And put it into our plist
         DROP  PL                      * DBGPL,R1 no longer needed
_DBG&SYSNDX LABEL
.*
.* Put supplied values into Globals
&BXA_DBG_PTR SETC '&PTR'
&BXA_DBG_PLIST SETC '&PLIST(1)'
         MEXIT
.*
.SNAP    ANOP
.*
.* Generate code for calling the debug module
&ASCMODE SETC  '&SYSASCE'              * Keep current ASC mode setting
.*
         AIF   ('&SAVE' EQ 'NO').NOSAVE0
         CLC   &_PTR,=F'0'             * Debug-routine loaded?
         BE    _DBG&SYSNDX             * No: skip call of module
         AIF   ('&ASCMODE' EQ 'P').PRIMOK0
         SETMODE PRIM                  * Switch to primary
.PRIMOK0 ANOP
         ST    R1,SAVEHDR              * Temp save for R1
         LA    R1,&BXA_DBG_PLIST       * Get address of plist
PL       USE   DBGPL,R1                * And set addressable
         L     R1,PL.DBGWRKPT          * Point to DBG area
         DROP  PL                      * Parmlist no longer addressable
         USE   DBG,R1,                 * And set it addressable        *
               OVR=((DBGSAVE,*NOUSE),(DBGBDST,*NOUSE))
         STM   R0,R15,DBGREGS          * Save all registers
         MVC   DBGREGS+4(4),SAVEHDR    *   add original R1-value
         STAM  AR0,AR15,DBGAREGS       *   and all access registers
         XC    SAVEHDR,SAVEHDR         * Reset header field to zeroes
         DROP  R1                      * DBG no longer needed
         L     R15,&_PTR               * Load ptr to debug routine
         AGO   .GETPLST
.*
.NOSAVE0 ANOP  ,
         LT    R15,&_PTR               * Debug-routine loaded?
         BZ    _DBG&SYSNDX             * No: skip call of module
         AIF   ('&ASCMODE' EQ 'P').PRIMOK1
         SETMODE PRIM                  * Switch to primary
.PRIMOK1 ANOP
.*
.GETPLST ANOP  ,
         LA    R1,&BXA_DBG_PLIST       * Get address of plist
PL       USE   DBGPL,R1                * And set addressable
.*
         AIF   (K'&TITLE EQ 0).NOTITLE
_TIT&SYSNDX RDATA SNAPHDR,&TITLE       * Define title text
         L     R0,=AL4(_TIT&SYSNDX)    * Point to header title
         AGO   .BLDPL
.NOTITLE ANOP
         XR    R0,R0                   * No pointer to title
.*
.BLDPL   ANOP
         ST    R0,PL.DBGTITPT          * Store pointer to title
         L     R14,PL.DBGFUNPT         * Retrieve ptr to function code
.*
         AIF   ('&CB' EQ 'SYS').SNAPSYS
         AIF   ('&CB' EQ 'DSPC').SNAPDSP
         AIF   ('&CB' EQ 'TASK').SNAPTCB
         MVI   0(R14),DBGSNAPU         * Set function code to user CBs
         AGO   .SNAPIT
.SNAPSYS ANOP
         MVI   0(R14),DBGSNAPS         * Set function code to sys CBs
         AGO   .SNAPIT
.SNAPTCB ANOP
         MVI   0(R14),DBGSNAPT         * Set function code to task CBs
         AGO   .SNAPIT
.SNAPDSP ANOP
         MVI   0(R14),DBGSNAPD         * Set function code to dataspace
.SNAPIT  ANOP
         BASR  R14,R15                 * Call BXADBG00
.*
         AIF   ('&SAVE' EQ 'NO').NOSAVE2
         L     R14,PL.DBGWRKPT         * Point to DBG area
         USE   DBG,R14,                * And set it addressable        *
               OVR=((DBGSAVE,*NOUSE),(DBGBDST,*NOUSE))
         LAM   AR0,AR15,DBGAREGS       * Restore all access registers
         LM    R0,R15,DBGREGS          *  and all registers
         DROP  R14                     * DBG no longer needed
.NOSAVE2 ANOP  ,
.*
         DROP  PL                      * DBGPL,R1 no longer needed
.*
         AIF   ('&ASCMODE' EQ 'P').PRIMOK
         SETMODE AR                    * Resume AR mode
.PRIMOK  ANOP
_DBG&SYSNDX LABEL ,                    * No debug-routine to invoke
.*
         MEXIT
.*
.CLOSE   ANOP
.*
.* Generate code for closing the debug module
         LT    R15,&_PTR               * Debug-routine loaded?
         BZ    _DBG&SYSNDX             * No: skip delete of module
         LA    R1,&BXA_DBG_PLIST       * Get address of plist
PL       USE   DBGPL,R1                * And set addressable
         L     R14,PL.DBGFUNPT         * Point to function code
         MVI   0(R14),DBGTERM          * Set to terminate
*
         BASR  R14,R15                 * Let BXADBG00 terminate
         DROP  PL                      * DBGPL,R1 no longer needed
         DELETE EP=&BXA_DBG_EP         * Remove debug module from stor
         ABND  TSTRC,RCD=IGNORE        * On error abend program
         XC    &_PTR,&_PTR             * Reset debug-mod pointer
_DBG&SYSNDX LABEL ,                    * No debug-routine to mop up
.*
         MEXIT
.*
.ABEND   ANOP
.*
.* Generate code for forcing an immediate abend
         DC    X'0000'                 * Force S0C1-abend
         AIF   ('&TITLE' EQ 'NOWARN').NOWARN
         AIF   ('&SYSSTYP' EQ 'DSECT').NOWARN
         MNOTE 1,'Deliberate S0C1-ABEND included'
.NOWARN  ANOP
.*
.MEND    MEND
./ ADD NAME=DC       0100-20096-20096-0111-00156-00156-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's DC statement
.*
&LABEL   DC    ,                       * Arguments in &SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DC                     * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_DC_LASTLAB        * Org. label of last labeled DC
         GBLA  &BXA_DC_OFFSET         * Nr of unlab'd DCs since LASTLAB
         GBLA  &BXA_DCOVR             * Ptr to last valid
         GBLC  &BXA_DCOVR_LAB(50)     * Labels
         GBLC  &BXA_DCOVR_PRM(50)     * Parameter strings
         GBLC  &BXA_DCOVR_NAM(50)     * New names
         LCLA  &I                     * Index
         LCLC  &_LABEL                *
         LCLC  &PRMS                  *
         LCLB  &RESET                 * On if last entry removed
         LCLC  &LAB                   * LABEL used to search DCOVR_LAB
         LCLC  &OPCD                  * Opcode to be used: _DC or DS
.*
.* Check number of parameters
         AIF   (N'&SYSLIST EQ 0).ERR1A
         AIF   (K'&SYSLIST(1) EQ 0).ERR1A
         AGO   .NOERR1
.ERR1A   MNOTE 8,'Missing operand(s)'
         MEXIT
.NOERR1  ANOP
.*
.* Set up default values
&_LABEL  SETC  '&LABEL'                * Copy fieldname
&OPCD    SETC  '_DC'                   * Set opcode to be used
.LOOP1   ANOP  ,                       * Collect all parameters
&I       SETA  &I+1                    * into variable PRMS
         AIF   (&I GT N'&SYSLIST).LOOP1OK
&PRMS    SETC  '&PRMS'.','.'&SYSLIST(&I)'
         AGO   .LOOP1
.LOOP1OK ANOP  ,
&PRMS    SETC  '&PRMS'(2,*)            * PRMS cannot be empty
.*
.* Determine values relating to unlabeled DC-statements
         AIF   (K'&_LABEL EQ 0).CRTLAB * DC is labeled?
&BXA_DC_OFFSET SETA 0                  * Reset unlabeled count
&BXA_DC_LASTLAB SETC '&_LABEL'         * Set last-used original label
&LAB     SETC  '&_LABEL'               * Use this label for lookup
         AGO   .LABOK
.CRTLAB  ANOP  ,                       * Create LABEL+nnn to identify
&BXA_DC_OFFSET SETA &BXA_DC_OFFSET+1   * Increment unlabeled count
&LAB     SETC  '&BXA_DC_LASTLAB'.'+'.'&BXA_DC_OFFSET' * Create label
.LABOK   ANOP  ,
.*
.* Check for overrides from DCOVR
&I       SETA  0                       * I indexes BXA_DCOVR_xxx
.LOOP2   ANOP  ,                       * Search entry
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &BXA_DCOVR).LOOP2NF * At end: not found
         AIF   ('&BXA_DCOVR_LAB(&I)' NE '&LAB').LOOP2 *Skip mismatch
.*
.* Found a match: set up replacement variables
         AIF   (K'&BXA_DCOVR_NAM(&I) EQ 0).NOLAB
&_LABEL  SETC  '&BXA_DCOVR_NAM(&I)'    * NAM contains new field name
         AIF   ('&_LABEL' NE '*NONAME').NOLAB
&_LABEL  SETC  ''                      * Remove label for this DC
.NOLAB   ANOP
.* Override parameter string?
         AIF   (K'&BXA_DCOVR_PRM(&I) EQ 0).NOPRM
         AIF   ('&BXA_DCOVR_PRM(&I)' EQ '*DS').SETDS
&PRMS    SETC  '&BXA_DCOVR_PRM(&I)'    * Pick up override value
         AGO   .NOPRM                  *
.SETDS   ANOP  ,                       *
&OPCD    SETC  'DS'                    *
.NOPRM   ANOP
.*
.* Remove the entry from the tables
.* Replace current entry by the last-valid,
.*    then decrement last-valid pointer
         AIF   (&I EQ &BXA_DCOVR).DECR * Skip copy if current=last
&BXA_DCOVR_LAB(&I) SETC '&BXA_DCOVR_LAB(&BXA_DCOVR)'
&BXA_DCOVR_PRM(&I) SETC '&BXA_DCOVR_PRM(&BXA_DCOVR)'
&BXA_DCOVR_NAM(&I) SETC '&BXA_DCOVR_NAM(&BXA_DCOVR)'
.DECR    ANOP  ,                       * Decrement last-valid pointer
&BXA_DCOVR SETA &BXA_DCOVR-1           *    by one
         AIF   (&BXA_DCOVR NE 0).LOOP2NF * Stack not empty
&RESET   SETB  1                       * Last entry just removed
.*
.* Generate _DC statement with overrides, unless *SUPPRESS specified
.LOOP2NF ANOP  ,                       *
         AIF   ('&PRMS' EQ '*SUPPRESS').SUPPRESS
.*
&_LABEL  &OPCD &PRMS
.SUPPRESS ANOP ,
.*
.* If overrides stack has just been emptied, then this macro must be
.* disabled by replacing the _DC-intruction with the original DC-instr.
         AIF   (NOT &RESET).MEND
         OPSYNS _DC                    * Revert to DC-instruction
.*
.MEND    MEND
./ ADD NAME=DCL      0100-20096-20096-0111-00329-00329-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro expands 1 mapping macro to reserve storage
.*
&LABEL   DCL   &CB,                    * Control block name            *
               &LBL                    * Label for dependent using
.*
.* The following syntaxes have been defined:
.* 1 - Embedded control block
.*     &LABEL is the label for the embedded control block
.*            if omitted, dependent USINGs will not be generated
.*            automatically.
.*     &CB    is name (acronym) of control block to embed
.*     &LBL   is label for automatic dependent usings. If omitted
.*            unlabeled dependent usings will be generated. If
.*            specified as *NOUSE, no USING will be generated
.*            automatically.
.* 2 - Define bit names
.*     &LABEL is the label of the field containing the bits. Must not
.*            be omitted.
.*     &CB=*BITS
.*     &SYSLIST(2) ff are names of bits to be allocated to consecutive
.*                 bit positions. More than 8 may be specified.
.*                 To define a name for more than bit at a time,
.*                 EQUOVR and EQU must be used.
.* 3 - Define code field and code values
.*     &LABEL is the label of the field containing the bits. Must not
.*            be omitted.
.*     &CB=*CODE
.*     &LBL   is field type designation. E.g. XL1 or H.
.*     &SYSLIST(3) ff are names of codes to be assigned to the code
.*                 field. Each may be specified as a name or as a
.*                 pair (name,value). Omitted values are assigned in
.*                 ascending order from the last value specified, or
.*                 (by default) from 0 upward.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DCL                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &MAP                    * Name of mapping macro
         LCLC  &PRFX                   * Prefix to generate fld names
         LCLC  &BIT                    * Bitname to generate
         LCLC  &BITLOC                 * Bit location
         LCLC  &CODE                   * Codename to generate
         LCLC  &VALUE                  * Value to assign
         LCLC  &BASEVAL                * Base value to be assigned
         LCLA  &I                      * index for &_CB + &BXA_USE_...
         LCLA  &J                      * Bit number to allocate
         LCLA  &O                      * Offset in bits field
         LCLA  &X                      * Temp index field
         GBLC  &BXA_USE_DS(50)         * Enclosing DSECT names
         GBLC  &BXA_USE_FLD(50)        * Defined complex fields
         GBLC  &BXA_USE_LBL(50)        * Labels to be used
         GBLC  &BXA_USE_SDS(50)        * Enclosed DSECT names
.*
.* Check syntax type
         AIF   (K'&CB EQ 0).ERR1A
         AIF   ('&CB' EQ '*BITS').CHKBITS
         AIF   ('&CB' EQ '*CODE').CHKCODE
         AGO   .NOERR1
.ERR1A   MNOTE 8,'Missing parameter'
         MEXIT
.NOERR1  ANOP  ,
.*
.* Check the LABEL parameter for syntax 1
         AIF   (K'&LABEL NE 0).NOERR2  * Specified: always ok
         AIF   (K'&LBL NE 0).ERR2A     * Error if LBL specified
         AGO   .ERR2B
.ERR2A   MNOTE 8,'No label specified: dependent USINGs will not be gene*
               rated'
         AGO   .NOERR2
.ERR2B   MNOTE 4,'No label specified: unlabeled dependent USINGs will b*
               e generated'
.NOERR2  ANOP
.*
.* Check the CB parameter for syntax 1
         AIF   (K'&CB EQ 0).ERR3A
         GBLC  &(BXA_CB_&CB)           * Acronym to macro translation
&MAP     SETC  'MAP'.'&(BXA_CB_&CB)'   * Extract mapname
         AIF   ('&MAP' EQ 'MAP').ERR3B
         AGO   .NOERR3
.ERR3A   MNOTE 8,'No control block name specified'
         MEXIT
.ERR3B   MNOTE 8,'&CB is not a supported control block'
         MEXIT
.NOERR3  ANOP
.*
.* Check the LBL parameter for syntax 1
         AIF   (K'&LBL EQ 0).NOERR4
         AIF   ('&LBL' EQ '&LABEL').ERR4A
         AGO   .NOERR4
.ERR4A   MNOTE 8,'LBL-parameter must not be equal to the field name'
         MEXIT
.NOERR4  ANOP
.*
.* Check number of parameters for syntax 1
         AIF   (N'&SYSLIST GT 2).ERR5A
         AGO   .NOERR5
.ERR5A   MNOTE 4,'More than 2 parameters specified: remainder ignored'
.NOERR5  ANOP
.*
.* Determine prefix to use for field names
&PRFX    SETC  '&LABEL'                * Default to Label
         AIF   (K'&PRFX NE 0).PRFXOK   * If not specified,
&PRFX    SETC  '&SYSECT'               *   use current dsect name
.PRFXOK  ANOP
         AIF   (K'&PRFX LE 3).GEN1     * If longer than 3 characters
&PRFX    SETC  '&PRFX'(1,3)            *   truncate to three
.GEN1    ANOP
.*
.* Put relevant data into the &BXA_USE_... tables.
         AIF   (K'&LABEL EQ 0).NOLABEL * Skip if LABEL omitted
&I       SETA  N'&BXA_USE_DS+1         * Point to first free entry
&BXA_USE_DS(&I) SETC '&SYSECT'         * Current DSECT encloses field
&BXA_USE_FLD(&I) SETC '&LABEL'         * Name of the generated field
&BXA_USE_SDS(&I) SETC '&CB'            * DSECT for the complex field
&BXA_USE_LBL(&I) SETC '&LBL'           * Label for dependent USING
.NOLABEL ANOP
.*
.* Generate requested control block
&LABEL   &MAP  DSECT=NO,CB=&CB,PRFX=&PRFX
         MEXIT
.**********************************************************************
.CHKBITS ANOP  ,
.*
.* Check the LABEL parameter for syntax 2
         AIF   (K'&LABEL NE 0).NOERR6  * Specified: always ok
.ERR6A   MNOTE 8,'No label specified on *BITS-declaration'
         MEXIT
.NOERR6  ANOP
.*
.* Check number of parameters for syntax 2
         AIF   (N'&SYSLIST GE 2).NOERR7
.ERR7A   MNOTE 8,'No bit names specified: declaration ignored'
         MEXIT
.NOERR7  ANOP
.*
.* Generate bits field
&I       SETA  N'&SYSLIST+6            * -1 (*BITS) +7 (rounding up)
&I       SETA  &I/8                    * Number of bytes to allocate
&LABEL   DS    BL&I                    * Define the complete bit field
.*
.* Generate mask equates
&I       SETA  2                       * Point after *BITS
&J       SETA  0                       * Next to generate will be 0
&O       SETA  0                       * Start at offset 0
         AGO   .BITOK                  * Skip next-logic on first pass
.LOOP1NX ANOP  ,                       * For all other entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
.* Increment bit nr to be allocated and offset if necessary
&J       SETA  &J+1                    * Address next bit
         AIF   (&J LE 7).BITOK         * 0-7 are valid
&J       SETA  0                       * otherwise: reset to zero
&O       SETA  &O+1                    * Increment offset to next byte
.BITOK   ANOP
.* Generate EQU for bit mask - unless no bitname specified
&BIT     SETC  '&SYSLIST(&I)'
         AIF   (K'&BIT EQ 0).LOOP1NX   * Skip omitted parameter
&X       SETA  ('&BIT' FIND '+-*/''(=).')
         AIF   (&X EQ 0).NOERR8        * Illegal character found?
&BIT     SETC  (DOUBLE '&BIT')
         MNOTE 8,'&BIT is an illegal name: ignored'
         AGO   .LOOP1NX
.NOERR8  ANOP  ,                       * Valid name: generate equate
&BIT     EQU   BIT&J,BIT&J,C'b'        * Set length to mask value
.*
.* Add entries to BXA_BITF_... table
&BITLOC  SETC  '&LABEL'                * Label is location
         AIF   (&O EQ 0).OFFSETOK      * No offset if offset is 0
&BITLOC  SETC  '&LABEL'.'+'.'&O'       * Use label + offset in bytes
.OFFSETOK ANOP ,
         GBLC  &(BXA_BITF_&BIT)        * Declare fieldname
&(BXA_BITF_&BIT) SETC '&BITLOC'        * Add bit location to table
         AGO   .LOOP1NX
.LOOP1OK ANOP
         MEXIT
.**********************************************************************
.CHKCODE ANOP  ,
.*
.* Check the LABEL parameter for syntax 3
         AIF   (K'&LABEL NE 0).NOERR9  * Specified: always ok
.ERR9A   MNOTE 8,'No label specified on *CODE-declaration'
         MEXIT
.NOERR9  ANOP
.*
.* Check LBL parameter for syntax 3 (field type)
         AIF   (K'&LBL EQ 0).ERR10A
         AGO   .NOERR10
.ERR10A  MNOTE 8,'Field type (and optional length) not specified'
.NOERR10 ANOP  ,
.*
.* Check number of parameters for syntax 3
         AIF   (N'&SYSLIST GE 3).NOERR11
.ERR11A  MNOTE 8,'No codes specified: declaration ignored'
         MEXIT
.NOERR11 ANOP
.*
.* Generate code field
&LABEL   DS    &LBL                    * Define the complete code field
.*
.* Generate code value equates
&I       SETA  3                       * Point after *CODE and &LBL
&O       SETA  0                       * Value offset for omitted value
&BASEVAL SETC  '0'                     * Default base value
         AGO   .CODEOK                 * Skip next-logic on first pass
.LOOP2NX ANOP  ,                       * For all other entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop
&O       SETA  &O+1                    * Increment value offset
.CODEOK  ANOP  ,
&CODE    SETC  '&SYSLIST(&I)'          * Extract operand
         AIF   (K'&CODE EQ 0).LOOP2NX  * Skip omitted operand
         AIF   ('&CODE'(1,1) EQ '(').LOOP2_2 * Value specified too?
.* Only value name specified: check its validity
&X       SETA  ('&CODE' FIND '+-*/''(=).')
         AIF   (&X EQ 0).NOERR12       * Illegal character found?
&CODE    SETC  (DOUBLE '&CODE')
.ERR12A  MNOTE 8,'&CODE is an illegal name: ignored'
         AGO   .LOOP2NX
.NOERR12 ANOP  ,                       * Valid name:
         AGO   .LOOP2GEN               * go generate EQUate
.* Both value name and value specified: check parm
.LOOP2_2 ANOP  ,
         AIF   ('&CODE'(K'&CODE,1) NE ')').ERR13A
         AIF   (N'&SYSLIST(&I) LT 2).ERR13B
         AIF   (K'&SYSLIST(&I,1) EQ 0).ERR13C
         AIF   (K'&SYSLIST(&I,2) EQ 0).ERR13D
&X       SETA  ('&SYSLIST(&I,1)' FIND '+-*/''(=).')
         AIF   (&X GT 0).ERR13E        * Illegal character found?
         AIF   (N'&SYSLIST(&I) GT 2).ERR13F
         AGO   .NOERR13
.ERR13A  MNOTE 8,'Operand &I misses ending parenthesis: ignored'
         AGO   .LOOP2NX
.ERR13B  MNOTE 8,'Operand &I has insufficient subparameters: ignored'
         AGO   .LOOP2NX
.ERR13C  MNOTE 8,'Operand &I missing first subparameter: ignored'
         AGO   .LOOP2NX
.ERR13D  MNOTE 8,'Operand &I missing second subparameter: ignored'
         AGO   .LOOP2NX
.ERR13E  ANOP  ,
&CODE    SETC  (DOUBLE '&SYSLIST(&I,1)')
         MNOTE 8,'&CODE is an illegal name: ignored'
         AGO   .LOOP2NX
.ERR13F  MNOTE 8,'Operand &I more than two subparameters: remainder ign*
               ored'
.NOERR13 ANOP  ,
.* No errors found: prepare for generating the EQUate
&CODE    SETC  '&SYSLIST(&I,1)'        * Extract real code field name
&BASEVAL SETC  '&SYSLIST(&I,2)'        * Extract new base value
&O       SETA  0                       * Reset value offset to 0
.LOOP2GEN ANOP ,                       * Generate the EQUate
         AIF   ('&BASEVAL' EQ '0').LOOP2O
         AIF   (&O EQ 0).LOOP2B
&VALUE   SETC  '&BASEVAL.+&O'          * Value = Base value + Offset
         AGO   .VALUEOK
.LOOP2O  ANOP  ,
&VALUE   SETC  '&O'                    * BASEVAL = 0: use offset only
         AGO   .VALUEOK
.LOOP2B  ANOP  ,
&VALUE   SETC  '&BASEVAL'              * Offset = 0: omit offset
.VALUEOK ANOP  ,
&CODE    EQU   &VALUE,&VALUE,C'v'      * Set length to code value
.*
.* Add entries to BXA_BITF_... table
         GBLC  &(BXA_BITF_&CODE)       * Declare fieldname
&(BXA_BITF_&CODE) SETC '&LABEL'        * Add field location to table
         AGO   .LOOP2NX
.LOOP2OK ANOP
.*
.MEND    MEND
./ ADD NAME=DCOVR    0100-20096-20096-0111-00195-00195-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro handles the stack of DC modifications for use by the
.* DC macro, which replaces the assembler's DC instruction
.*
&LABEL   DCOVR &OPT,                   * Parameters are in &SYSLIST    *
               &NEWNAM                 * New name for *NEWNAME option
.*
.* &LABEL mandatory, except when &OPT=*END
.*        To specify an override for an unlabeled DC, specify the label
.*        of the last preceding labeled DC and the relative number of
.*        the unlabeled statement to be overridden. E.g.: LABEG+3,
.*        would  mean the third unlabeled DC after the DC with label
.*        LABEG.
.* &OPT   specifies one of the following:
.*        *END cancels all outstanding DCOVR requests
.*        *DS  changes the DC into a DS, which may in turn be
.*             overridden using the DSOVR macro
.*        *SUPPRESS suppresses the definition of &LABEL
.*        *NEWNAME changes the DC for &LABEL into one for &NEWNAM,
.*              i.e. Specify *NEWNAME,newname,parmstring
.*        Other values override the DC-operand string
.* &NEWNAM Specifies the new name, if &OPT=*NEWNAME
.*        &NEWNAM may optionally be followed by a parameter string
.*        If &NEWNAM specifies *NONAME the DC will become unlabeled
.* &SYSLIST Specifies an operand string, which replaces the complete
.*        operand string of the original DC statement.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DCOVR                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_DCOVR              * Ptr to last valid
         GBLC  &BXA_DCOVR_LAB(50)      * Labels
         GBLC  &BXA_DCOVR_PRM(50)      * Parm strings
         GBLC  &BXA_DCOVR_NAM(50)      * New names
         LCLA  &I                      * Index
         LCLC  &PRMS                   * Parameter string
.*
.* Check LABEL parameter
         AIF   (K'&LABEL GT 0).NOERR1
         AIF   ('&OPT' EQ '*END').NOERR1
.ERR1    MNOTE 8,'Missing label parameter'
         MEXIT
.NOERR1  ANOP
.*
.* Check the OPT parameter
         AIF   (K'&OPT NE 0).NOERR2
.ERR2A   MNOTE 8,'Missing parameter(s)'
         MEXIT
.NOERR2  ANOP  ,
.*
.* Check the NEWNAME parameter (must be present if &OPT = *NEWNAME)
         AIF   ('&OPT' EQ '*NEWNAME' AND K'&NEWNAM EQ 0).ERR3A
         AGO   .NOERR3
.ERR3A   MNOTE 8,'New name not specified with option *NEWNAME'
         MEXIT
.NOERR3  ANOP
.*
.* Check number of parameters
         AIF   ('&OPT' EQ '*END' AND N'&SYSLIST GT 1).ERR4A
         AIF   ('&OPT' EQ '*END').NOERR4
         AIF   ('&OPT' EQ '*DS' AND N'&SYSLIST GT 1).ERR4A
         AIF   ('&OPT' EQ '*DS').NOERR4
         AIF   ('&OPT' EQ '*SUPPRESS' AND N'&SYSLIST GT 1).ERR4A
         AIF   ('&OPT' EQ '*SUPPRESS').NOERR4
         AGO   .NOERR4
.ERR4A   MNOTE 4,'More than 1 argument: remainder ignored'
.NOERR4  ANOP
.*
.* Which option requested?
         AIF   ('&OPT' EQ '*END').END
         AIF   ('&OPT' EQ '*DS').DS
         AIF   ('&OPT' EQ '*SUPPRESS').SUPPRESS
         AIF   ('&OPT' EQ '*NEWNAME').NEWNAME
.*
.* Normal: add entries to tables
&I       SETA  0                       * SYSLIST(1) ff into PRMS
         AGO   .BLDPRMS
.*
.* DS option
.DS      ANOP ,
&PRMS    SETC  '&OPT'                  * Set to *DS
         AGO   .ADDNTRY
.*
.* Suppress option
.SUPPRESS ANOP ,
&PRMS    SETC  '&OPT'                  * Set to *SUPPRESS
         AGO   .ADDNTRY
.*
.* Newname option
.NEWNAME ANOP  ,
&I       SETA  2                       * SYSLIST(3) ff into PRMS
         AGO   .BLDPRMS
.*
.* Build parameter string from SYSLIST entries
.BLDPRMS ANOP  ,
&I       SETA  &I+1                    * Point next SYSLIST entry
         AIF   (&I GT N'&SYSLIST).PRMSOK
&PRMS    SETC  '&PRMS'.','.'&SYSLIST(&I)'
         AGO   .BLDPRMS
.PRMSOK  ANOP  ,
         AIF   (K'&PRMS EQ 0).ADDNTRY
&PRMS    SETC  '&PRMS'(2,*)            * Remove leading comma
.*
.* Add entry to tables
.ADDNTRY ANOP  ,
&I       SETA  &BXA_DCOVR+1            * Next free entry
&BXA_DCOVR_LAB(&I) SETC '&LABEL'       * Insert label,
&BXA_DCOVR_PRM(&I) SETC '&PRMS'        *   and parameters
&BXA_DCOVR_NAM(&I) SETC ''             *   into tables
         AIF   ('&OPT' NE '*NEWNAME').NAMOK
&BXA_DCOVR_NAM(&I) SETC '&NEWNAM'      *
.NAMOK   ANOP  ,
&BXA_DCOVR SETA &I                     * And update ptr to last valid
.*
.* Replace DC-instruction by our DC-macro on the first override
         AIF   (&BXA_DCOVR GT 1).MEND
         OPSYNS DC                     * Replace DC by _DC
         MEXIT
.*
.* Ending current DCOVR requests. Issue a message for any unused
.* entries in BXA_DCOVR tables.
.END     ANOP
         AIF   (&BXA_DCOVR EQ 0).MEND * No entries remain
&I       SETA  0                       * I indexes BXA_DCOVR_xxx
.LOOP1   ANOP  ,                       * For all current entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &BXA_DCOVR).LOOP1OK * At end: quit loop
         MNOTE 4,'DCOVR for &BXA_DCOVR_LAB(&I) discarded'
         AGO   .LOOP1
.LOOP1OK ANOP
&BXA_DCOVR SETA 0                      * Reset valid counter to 0
.*
.* Disable our DC-macro by replacing _DC by original DC-instruction
         OPSYNS _DC                    * Reset DC-instruction
.*
.MEND    MEND
./ ADD NAME=DEC      0100-20096-20096-0111-00171-00171-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Decrement a register
.*
&LABEL   DEC   &REG,                   * Register to be decremented    *
               &COUNT                  * Amount to decrement or (reg)
.*
.* &REG   specifies the register to be decremented
.* &COUNT specifies the amount by which the register is to be
.*        decremented. May be specified as:
.*      - Literal or symbolic value: must evaluate to a value between 0
.*        and 4095 inclusive.
.*      - (reg): must specify a valid register, 0 not allowed
.*      - (value,reg): both of the above apply
.*      - nothing: defaults to 1
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DEC                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare locals
         LCLC  &_REG,&_COUNTR
.*
.* Check Reg parameter
&_REG    SETC  '&REG'
         AIF   (K'&REG NE 0).NOERR1A
.ERR1A   MNOTE 8,'No register specified'
.NOERR1A ANOP
         AIF   ('&REG'(1,1) NE '(').NOERR1
         AIF   (N'&REG EQ 0).ERR1B
         AIF   (N'&REG GT 1).ERR1C
&_REG    SETC  '&REG(1)'
         AGO   .NOERR1
.ERR1B   MNOTE 8,'No register specified within sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'More than 1 register specified within sublist'
.NOERR1  ANOP
.*
.* Check Count parameter
         AIF   (K'&COUNT EQ 0).NOERR2
         AIF   ('&COUNT'(1,1) NE '(').NOERR2
         AIF   (N'&COUNT EQ 0).ERR2A
         AIF   (N'&COUNT GT 2).ERR2B
         AGO   .NOERR2
.ERR2A   MNOTE 8,'No amount to decrement specified in sublist'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Too many arguments specified in sublist'
.NOERR2  ANOP
.*
.* If COUNT omitted, default to 1, using BCTR
.* If COUNT specifies a register, use SR
.* Otherwise generate a LA and a SR
         AIF   (K'&COUNT EQ 0).BCTR
         AIF   ('&COUNT'(1,1) NE '(').LIT
         AIF   (N'&COUNT EQ 1).SR
.*
.* Decrement by a constant value, and a register. Make sure we don't
.*  inadvertently corrupt a used register.
&_COUNTR SETC 'R0'
         AIF  ('&_REG' EQ '0').R1
         AIF  ('&_REG' EQ '00').R1
         AIF  ('&_REG' EQ 'R0').R1
         AIF  ('&_REG' EQ 'R00').R1
         AIF  ('&COUNT(2)' EQ '0').R1
         AIF  ('&COUNT(2)' EQ '00').R1
         AIF  ('&COUNT(2)' EQ 'R0').R1
         AIF  ('&COUNT(2)' EQ 'R00').R1
         AGO  .LA
.R1      ANOP
.* R0 is in use: put COUNT-value into R1
&_COUNTR SETC 'R1'
         AIF  ('&_REG' EQ '1').R15
         AIF  ('&_REG' EQ '01').R15
         AIF  ('&_REG' EQ 'R1').R15
         AIF  ('&_REG' EQ 'R01').R15
         AIF  ('&COUNT(2)' EQ '1').R15
         AIF  ('&COUNT(2)' EQ '01').R15
         AIF  ('&COUNT(2)' EQ 'R1').R15
         AIF  ('&COUNT(2)' EQ 'R01').R15
         AGO  .LA
.R15     ANOP
.* R0 and R1 both in use: put COUNT-value into R15
&_COUNTR SETC 'R15'
.LA      ANOP
&LABEL   LA    &_COUNTR,&COUNT         * Load decrement value
         SR    &_REG,&_COUNTR          * And decrement register
         SR    &_REG,&COUNT(2)         * And decrement register
         MEXIT
.*
.* Decrement by a constant value, make sure we don't inadvertently
.*  corrupt register 0.
.LIT     ANOP
&_COUNTR SETC 'R0'
         AIF  ('&_REG' EQ '0').LITR0
         AIF  ('&_REG' EQ '00').LITR0
         AIF  ('&_REG' EQ 'R0').LITR0
         AIF  ('&_REG' EQ 'R00').LITR0
         AGO  .LITLA
.LITR0   ANOP
.* R0 is to be decremented: put COUNT-value into R1
&_COUNTR SETC 'R1'
.LITLA   ANOP
&LABEL   LA    &_COUNTR,&COUNT         * Load decrement value
         SR    &_REG,&_COUNTR          * And decrement register
         MEXIT
.*
.* Decrement with some register-held value
.SR      ANOP
&LABEL   SR    &_REG,&COUNT(1)         * Decrement register
         MEXIT
.*
.BCTR    ANOP
&LABEL   BCTR  &_REG,R0                * Decrement by 1
.*
.MEND    MEND
./ ADD NAME=DISSECT  0100-20096-20096-0111-00211-00211-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro Dissects a parameter into its constituent parts
.*
&LABEL   DISSECT &TYPE,                * Type of parameter to dissect  *
               &INPUT                  * Parameter to dissect
.*
.* TYPE must be one of the following:
.*   - DB  = Displacement(Base)
.*   - DLB = Displacement(Length,Base)
.*   - DRB = Displacement(Register,Base)
.*   - DXB = Displacement(indeX,Base)
.*   - I   = Immediate
.*   - M   = Mask
.*   - R   = Register
.* INPUT will normally be a parameter passed to a macro that replaces
.*       some machine instruction. May have been pre-processed with
.*       the SPLIT macro.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DISSECT                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_PRM(3)             * Output parameters
         LCLC  &IN                     * Input string
         LCLC  &OP1                    * Operand before (
         LCLC  &OP2                    * First operand in ()
         LCLC  &OP3                    * Second operand in ()
         LCLC  &C                      * Single character from input
         LCLA  &I,&J                   * Work var.
         LCLA  &PAR                    * Nr of parentheses levels
         LCLB  &STRING                 * On if scanning within quotes
         LCLB  &FINDPAR                * On if parentheses present
         LCLB  &SPLIT                  * On if parentheses hold a comma
.*
.* Determine what to do
         AIF   ('&TYPE' EQ 'I').TYPEOK * Immediate operand
         AIF   ('&TYPE' EQ 'M').TYPEOK * Mask operand
         AIF   ('&TYPE' EQ 'R').TYPEOK * Register operand
&FINDPAR SETB  1                       * Parentheses may be present
         AIF   ('&TYPE' EQ 'DB').TYPEOK * Displacement(Base)
&SPLIT   SETB  1                       * Two arguments in parentheses
         AIF   ('&TYPE' EQ 'DLB').TYPEOK * Displacement(Length,Base)
         AIF   ('&TYPE' EQ 'DRB').TYPEOK * Displacement(Register,Base)
         AIF   ('&TYPE' EQ 'DXB').TYPEOK * Displacement(indeX,Base)
.ERR1    MNOTE 8,'Invalid TYPE specified on DISSECT macro'
         MEXIT ,                       *
.TYPEOK  ANOP  ,                       *
.*
.* Set up for processing
         AIF   (K'&INPUT EQ 0).EXIT    * No input: do nothing
&IN      SETC  '&INPUT'                *
.*
.* Before the actual dissection starts embedded comments - if any -
.* must be removed.
&I       SETA  ('&IN' FIND ' ')        * Search embedded space
         AIF   (&I EQ 0).NOCOMMNT      * No space: no comments
.LOOP1   ANOP  ,                       * Search backward
&I       SETA  ('&IN' FIND ''' ')      * Find quote or space
         AIF   (&I EQ 0).NOCOMMNT      * No comment found: done
&C       SETC  '&IN'(&I,1)             * Extract character found
         AIF   ('&C' EQ '''').LOOP1QU  * Found a quote
.* Must be a space
         AIF   (NOT &STRING).LOOP1OK   * Found start of comment
         AGO   .LOOP1NX                * Go continue search
.LOOP1QU ANOP  ,                       * Handle quote
&STRING  SETB  (&STRING XOR 1)         * Flip string status
.LOOP1NX ANOP  ,                       * Continue search
         AIF   (&I EQ K'&IN).NOCOMMNT  * Trailing char: no comment fnd
&IN      SETC  '&IN'(&I+1,*)           * Remove treated text
         AGO   .LOOP1                  *
.LOOP1OK ANOP  ,                       * Leading space found
&I       SETA  K'&INPUT-K'&IN          * Nr of chars before comment
&IN      SETC  '&INPUT'(1,&I)          * Extract relevant input
.NOCOMMNT ANOP ,                       *
.*
.* First we must extract the OP1 field. This field starts at position 1
.* and ends when either:
.* - the input field is exhausted
.* - If FINDPAR is on: a left parenthesis is found, which is not
.*   preceded by an arithmetic operator (+-*/)
.*
         AIF   (&FINDPAR).FINDPAR      * Need to look for a ( ??
.NOPAR   ANOP  ,                       * Parentheses do not matter
&OP1     SETC  '&IN'                   * Just copy the argument
.*
.* If register is specified as (reg), remove the parentheses
         AIF   ('&TYPE' NE 'R').EXIT   * Only for register operand
         AIF   ('&OP1'(1,1) NE '(').EXIT * Must start with left par
         AIF   ('&OP1'(K'&OP1,1) NE ')').EXIT * And end with right par
&OP1     SETC  '&OP1'(2,K'&OP1-2)      * Remove parentheses
         AGO   .EXIT                   * And be done with it
.*
.* If last character is not a closing parenthesis, only the
.* displacement field is present, and no action is required.
.FINDPAR ANOP  ,                       * Find parentheses if present
         AIF   ('&IN'(K'&IN,1) NE ')').NOPAR * Displacement only?
.*
.* There are parentheses which may be relevant. Search backward to
.* find the matching opening parenthesis.
&PAR     SETA  0                       * Level of parentheses
&STRING  SETB  0                       * No string
&I       SETA  K'&IN+1                 * Point beyond string-end
.LOOP2   ANOP  ,                       * Search backward
&I       SETA  &I-1                    * Point previous character
         AIF   (&I LT 1).LOOP2ERR      * No matching parenthesis found
&C       SETC  '&IN'(&I,1)             * Extract single character
         AIF   ('&C' EQ '(').LOOP2LP   * Found a left parenthesis
         AIF   ('&C' EQ ')').LOOP2RP   * Found a right parenthesis
         AGO   .LOOP2                  *
.LOOP2ERR MNOTE 8,'Non-matching parentheses in operand'
         MEXIT ,                       *
.LOOP2RP ANOP  ,                       * Handle right parentheses
&PAR     SETA  &PAR+1                  * Add 1 to level of parentheses
         AGO   .LOOP2                  *
.LOOP2LP ANOP  .                       * Handle left parentheses
&PAR     SETA  &PAR-1                  *
         AIF   (&PAR GT 0).LOOP2       * Not all levels closed: contin.
.* Found matching opening parenthesis at &I: check preceding character
         AIF   (&I LE 1).NOPAR         * Displacement only?
&J       SETA  &I-1                    * Point preceding character
&C       SETC  '&IN'(&J,1)             * Extract preceding character
&J       SETA  ('+-*/' FIND '&C')      * This is an arithmetic term?
         AIF   (&J NE 0).NOPAR         * Must be part of displacement
.* Ok: extract displacement into OP1
&OP1     SETC  '&IN'(1,&I-1)           * Displ. up to left parenthesis
&IN      SETC  '&IN'(&I+1,*)           * Keep remainder for len/base
&IN      SETC  '&IN'(1,K'&IN-1)        * But remove outer parentheses
.*
.* If SPLIT is off the remainder goes into OP2, otherwise it must be
.* split into OP2 and OP3.
         AIF   (&SPLIT).SPLIT          * Need to split?
.NOSPLIT ANOP  ,                       * Nothing to split
&OP2     SETC  '&IN'                   * Copy remainder
         AGO   .EXIT                   * And be done with it
.*
.* Check for a comma: if not present, there's nothing to split!
.SPLIT   ANOP  ,                       * Try to split IN to OP2 and OP3
&I       SETA  ('&IN' FIND ',')        * Locate comma in string
         AIF   (&I EQ 0).NOSPLIT       *
         AIF   (&I EQ 1).NOOP2         * OP2 omitted?
&OP2     SETC  '&IN'(1,&I-1)           * OP2 up to & excluding comma
.NOOP2   ANOP  ,                       *
         AIF   (&I EQ K'&IN).NOOP3     * OP3 omitted?
&OP3     SETC  '&IN'(&I+1,*)           * OP3 follows comma
.NOOP3   ANOP  ,                       *
.*
.* Exit point: copy result to global variables
.EXIT    ANOP  ,                       *
&BXA_PRM(1) SETC '&OP1'                *
&BXA_PRM(2) SETC '&OP2'                *
&BXA_PRM(3) SETC '&OP3'                *
.*
.MEND    MEND
./ ADD NAME=DO       0100-20096-20096-0111-00340-00340-00000-BIXSMAC 31
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: DO
.* Combines with LEAVE and ENDDO to repeatedly execute code-blocks
.*
&LABEL   DO    ,                       * SYSLIST contains condition
.*
.* Syntax:
.* 1) DO WHILE,condition
.* 2) DO UNTIL,condition
.* 3) DO count                         * Literal, field, or (reg)
.* 4) DO                               * For use with LEAVE macro
.* condition: as in IF macro
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DO                     * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_USED_REGS(16)      * Use status of registers
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_DO(5)          * DO loop info
         GBLA  &BXA_STK_LVL(5)         * Levels
         GBLC  &BXA_STK_LBL(5)         * Labels
         GBLC  &BXA_STK_CND(5)         * Conditions
         GBLC  &BXA_STK_CLB(5)         * Condition labels
         GBLC  &BXA_STK_USE(5)         * USEd registers
         GBLA  &BXA_NUMVAL             * Retvalue from CHKLIT
         LCLC  &_LABEL                 * Label to start loop
         LCLC  &ARGS                   * SYSLIST as a string
         LCLC  &TYPE                   * Type of syslist(1) parameter
         LCLC  &REG                    * Register number
         LCLC  &FLD                    * Field or literal for count
         LCLC  &USEDRG                 * Used register name
         LCLC  &LIT                    * Usable literal designation
         LCLA  &LVALUE                 * Value of literal
         LCLA  &I                      * Stack pointer
.*
.* Check LABEL parameter
&_LABEL  SETC  '&LABEL'                * Copy label
         AIF   (K'&LABEL GT 0).LABOK   * Label was specified?
&_LABEL  SETC  '_DO_&SYSNDX'           * No: generate one
.LABOK   ANOP
.*
.* Check First parameter
         AIF   (N'&SYSLIST EQ 0).DOUNTIL * No args: simple DO
         AIF   (N'&SYSLIST EQ 1 AND K'&SYSLIST(1) EQ 0).DOUNTIL
         AIF   (N'&SYSLIST EQ 2 AND K'&SYSLIST(1) EQ 0 AND K'&SYSLIST(2*
               ) EQ 0).DOUNTIL
         AIF   ('&SYSLIST(1)' EQ 'WHILE').NOERR1
         AIF   ('&SYSLIST(1)' EQ 'UNTIL').NOERR1
         AGO   .DOCOUNT
.NOERR1  ANOP
.*
.* Check number of parameters
         AIF   (N'&SYSLIST LT 2).ERR2
         AIF   (K'&SYSLIST(2) EQ 0).ERR2
         AGO   .NOERR2
.ERR2    MNOTE 8,'No condition specified'
         MEXIT
.NOERR2  ANOP
.*
.* Build ARGS from &SYSLIST
&I       SETA  1                       * Skip WHILE/UNTIL
.LOOP1   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AGO   .LOOP1                  * And go process next entry
.LOOP1OK ANOP
&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,
.*
.* Select code generation logic
         AIF   ('&SYSLIST(1)' EQ 'WHILE').DOWHILE
         AIF   ('&SYSLIST(1)' EQ 'UNTIL').DOUNTIL
         MNOTE 12,'Internal error'
         MEXIT
.*
.* Generate embedded IF statement for DO WHILE
.DOWHILE ANOP  ,
&I       SETA  &BXA_STK                * Copy current stack pointer
&_LABEL  IF    &ARGS                   *
         AIF   (&I EQ &BXA_STK).MEND   * No new stack entry!
.*
.* Modify stack to reflect DO in stead of IF
&I       SETA  &BXA_STK                * Point to current stack entry
&BXA_STK_OP(&I) SETC 'DOWHILE'         * Change IF into DOWHILE/DOUNTIL
&BXA_STK_DO(&I) SETC '&_LABEL'         * Put loopback label into table
&BXA_STK_CND(&I) SETC ''               * Wipe condition in table
&BXA_STK_CLB(&I) SETC ''               *  and condition label
&BXA_STK_USE(&I) SETC ''               *  and USEd count register
         MEXIT ,
.*
.* Generate redo label for DO or DO UNTIL
.DOUNTIL ANOP  ,
&_LABEL  LABEL ,                       *
.*
.* Add DO or DOUNTIL to the stack
&I       SETA  &BXA_STK                * Point to current stack entry
&LVL     SETA  1                       * New level is 1
         AIF   (&I EQ 0).LVLOK         *   if stack is empty
&LVL     SETA  &BXA_STK_LVL(&I)+1      * Otherwise: increment current
.LVLOK   ANOP  ,                       *            level
.*
&I       SETA  &I+1                    * Point next stack entry
&BXA_STK_OP(&I)  SETC 'DO&SYSLIST(1)'  * Put DO/DOUNTIL on the stack
&BXA_STK_LBL(&I) SETC ''               * End-of-loop created by LEAVE
&BXA_STK_LVL(&I) SETA &LVL             * Put level into table
&BXA_STK_DO(&I)  SETC '&_LABEL'        * Put DO label into table
&BXA_STK_CND(&I) SETC '&ARGS'          * Put condition into table
&BXA_STK_CLB(&I) SETC ''               * And wipe condition label
&BXA_STK_USE(&I) SETC ''               *     and USEd loop counter
&BXA_STK         SETA &I               * And update stack pointer
         MEXIT  ,                      *
.*
.* Do with count option
.DOCOUNT ANOP  ,                       *
&LABEL   LABEL ,                       *
&_LABEL  SETC  '_DO_&SYSNDX'           * Generate internal label
&USEDRG  SETC  ''                      * No loop counter USEd
.*
.* Check number of parameters
         AIF   (N'&SYSLIST EQ 1).NOERR3
.ERR3    MNOTE 4,'More than 1 argument specified: remainder ignored'
.NOERR3  ANOP
.*
.* Check type of argument: literal, field, or register
&FLD     SETC  '&SYSLIST(1)'           * Extract field or literal
&REG     SETC  '&SYSLIST(1)'           * Assume it is a register name
         AIF   ('&FLD'(1,1) EQ '(').DOCTRG1 *
         AIF   ('&FLD'(1,1) NE '=').SKIPEQ  *
         AIF   (K'&FLD LT 2).SKIPEQ    * Too short to remove = sign
&FLD     SETC  '&FLD'(2,*)             * Remove leading = sign
.SKIPEQ  ANOP  ,                       *
         CHKLIT &FLD,ALT=YES           * A valid number?
         AIF   (&BXA_RC EQ 0).DOCT0    * It is a valid literal
         AIF   (&BXA_RC EQ 4).DOCT4    * It is a valid literal
         CHKREG &FLD,g                 * A valid register?
         AIF   (&BXA_RC LT 8).DOCTRG2  * Ok: use count in register
         AGO   .DOCTALC                * Go allocate a register
.DOCT0   ANOP  ,                       * A valid literal number
&LIT     SETC  '&FLD'                  * Copy specified literal
&LVALUE  SETA  &BXA_NUMVAL             * Save value of literal
         AIF   (&LVALUE LE 0).ERR4D    * Not supported
         AGO   .DOCTALC                * Go allocate count register
.DOCT4   ANOP  ,                       * A valid literal number
&LIT     SETC  '&BXA_NUMVAL'           * Create correct literal
&LVALUE  SETA  &BXA_NUMVAL             * Save value of literal
         AIF   (&LVALUE LE 0).ERR4D    * Not supported
.DOCTALC ANOP  ,                       * Allocate a count register
         EQUREG ,                      * Assign a count register
         AIF   (&BXA_RC GE 8).ERR4A    * Issue error message
&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name
         USE   &REG                    * Set register in use
&USEDRG  SETC  '&REG'                  * And save name USEd
.*
.* Determine how to load the register
         AIF   (K'&LIT GT 0).DOCTLIT   * Literal value
&TYPE    SETC  T'&FLD                  * Extract parameter type
         AIF   ('&TYPE' EQ '0').DOCTEQ * EQUated literal
&I       SETA  L'&FLD                  * Length of field
         AIF   (&I GT 4).ERR4E         * Field too long
         AIF   ('&TYPE' EQ 'B').DOCTB  * Binary
         AIF   ('&TYPE' EQ 'F').DOCTF  * Fullword
         AIF   ('&TYPE' EQ 'G').DOCTG  * Fixed point
         AIF   ('&TYPE' EQ 'H').DOCTH  * Halfword
         AIF   ('&TYPE' EQ 'X').DOCTX  * Hexadecimal
&ARGS    SETC  (DOUBLE '&SYSLIST(1)')  *
         MNOTE 8,'Field &ARGS is of unsupported type: &TYPE'
         AIF   (K'&USEDRG EQ 0).MEND
         DROP  &USEDRG
         MEXIT ,                       *
.*
.DOCTEQ  ANOP  ,                       * EQUated literal symbol
&LIT     SETC  '&FLD'                  * Designate literal by name
&LVALUE  SETA  L'&FLD                  * Length holds value
.*
.DOCTLIT ANOP  ,                       * Load a literal
         AIF   (&LVALUE LT 4096).DOCTLLA * Literal LA
         AIF   (&LVALUE LT 32768).DOCTLLH * Literal LH
         L     &REG,=F'&LIT'           * Set up count register
         AGO   .DOCTLAB                * Go create internal label
.DOCTLLA ANOP  ,                       *
         LA    &REG,&LIT               * Set up count register
         AGO   .DOCTLAB                * Go create internal label
.DOCTLLH ANOP  ,                       *
         LH    &REG,=H'&LIT'           * Set up count register
         AGO   .DOCTLAB                * Go create internal label
.*
.DOCTB   ANOP  ,                       *
         AIF   (&I EQ 1).DOCTLC        * Load character
         AIF   (&I EQ 2).DOCTLHU       * Load halfword unaligned
         AIF   (&I EQ 3).DOCTLC3       * Load three bytes
         AGO   .DOCTLU                 * Load unaligned
.*
.DOCTF   ANOP  ,                       *
         L     &REG,&FLD               * Set up count register
         AGO   .DOCTLAB                * Go create internal label
.*
.DOCTG   ANOP  ,                       *
         AIF   (&I EQ 1).DOCTLC        * Load character
         AIF   (&I EQ 2).DOCTLHU       * Load halfword unaligned
         AIF   (&I EQ 3).DOCTLC3       * Load three bytes
         AGO   .DOCTLU                 * Load unaligned
.*
.DOCTH   ANOP  ,                       *
         LH    &REG,&FLD               * Set up count register
         AGO   .DOCTLAB                * Go create internal label
.*
.DOCTX   ANOP  ,                       *
         AIF   (&I EQ 1).DOCTLC        * Load character
         AIF   (&I EQ 2).DOCTLHU       * Load halfword unaligned
         AIF   (&I EQ 3).DOCTLC3       * Load three bytes
         AGO   .DOCTLU                 * Load unaligned
.*
.DOCTLC  ANOP  ,                       *
         LC    &REG,&FLD               * Set up count register
         AGO   .DOCTLAB                * Go create internal label
.DOCTLHU ANOP  ,                       *
         LTHU  &REG,&FLD               * Set up count register
         AGO   .DOCTLAB                * Go create internal label
.DOCTLC3 ANOP  ,                       *
         LTA24 &REG,&FLD,YYYN,         * Set up count register         *
               RELOAD=NO               *
         AGO   .DOCTLAB                * Go create internal label
.DOCTLU  ANOP  ,                       *
         LT    &REG,&FLD               * Set up count register
         AGO   .DOCTLAB                * Go create internal label
.*
.* A register was specified
.DOCTRG1 ANOP  ,                       *
&REG     SETC  '&SYSLIST(1,1)'         * Extract register name
         CHKREG &REG,g                 * A valid register?
         AIF   (&BXA_RC GE 8).ERR4C    * Invalid register
.DOCTRG2 ANOP  ,                       *
&I       SETA  &BXA_NUMVAL+1           * Create register index
         AIF   (&I EQ 1).ERR4B         * Cannot use R0
         AIF   (&BXA_USED_REGS(&I)).DOCTLAB * Skip USE statement
         USE   &REG                    * Set register in use
&USEDRG  SETC  '&REG'                  * And save name USEd
.*
.* Generate redo label for DO count
.DOCTLAB ANOP  ,                       *
&_LABEL  LABEL ,                       *
.*
.* Add DOCOUNT to the stack
&I       SETA  &BXA_STK                * Point to current stack entry
&LVL     SETA  1                       * New level is 1
         AIF   (&I EQ 0).LVLOKC        *   if stack is empty
&LVL     SETA  &BXA_STK_LVL(&I)+1      * Otherwise: increment current
.LVLOKC  ANOP  ,                       *            level
.*
&I       SETA  &I+1                    * Point next stack entry
&BXA_STK_OP(&I)  SETC 'DOCOUNT'        * Put DOCOUNT on the stack
&BXA_STK_LBL(&I) SETC ''               * End-of-loop created by LEAVE
&BXA_STK_LVL(&I) SETA &LVL             * Put level into table
&BXA_STK_DO(&I)  SETC '&_LABEL'        * Put DO label into table
&BXA_STK_CND(&I) SETC '&REG'           * Put count register in table
&BXA_STK_CLB(&I) SETC ''               * And wipe condition label
&BXA_STK_USE(&I) SETC '&USEDRG'        * Insert USEd register name
&BXA_STK         SETA &I               * And update stack pointer
         MEXIT  ,                      *
.*
.ERR4A   ANOP  ,
         MNOTE 8,'Cannot assign a count register'
         MEXIT ,
.ERR4B   ANOP  ,
         MNOTE 8,'Cannot use R0 for a count register'
         MEXIT ,
.ERR4C   ANOP  ,
&ARGS    SETC  (DOUBLE '&SYSLIST(1)')
         MNOTE 8,'&ARGS is not a valid general purpose register'
         MEXIT ,
.ERR4D   ANOP  ,
         MNOTE 8,'A loop count of less than 1 is not supported'
         MEXIT ,
.ERR4E   ANOP  ,
         MNOTE 8,'Size of loop count field exceeds 4 bytes'
         AIF   (K'&USEDRG EQ 0).MEND
         DROP  &USEDRG
         MEXIT
.*
.MEND    MEND
./ ADD NAME=DROP     0100-20096-20096-0111-00182-00182-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's DROP statement
.*
         DROP  ,                       * Reg(s) and/or label(s)
.*
.* &SYSLIST specifies the labels and/or registers to drop.
.*          if empty all registers will be dropped.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DROP                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15
         GBLB  &SP_SHOWALL             * SHOWALL option
         GBLC  &BXA_USELBL(50)         * Used labels ...
         GBLA  &BXA_USEREG(50)         *   and associated registers
         GBLC  &BXA_USEFLD(50)         *   and base field names
         GBLA  &BXA_USENDX0(5)         * Low valid pointers
         GBLA  &BXA_USENDX1(5)         * High valid pointers
         GBLA  &BXA_USENDX             * Pointer for USENDX0/USENDX1
         LCLA  &N                      * Pointer for BXA_USE...
         LCLA  &REG                    * Register number
         LCLC  &ARG                    * 1 argument from SYSLIST
         LCLC  &ARGS                   * Arguments from SYSLIST
         LCLA  &I                      * Index into &SYSLIST
         LCLA  &J                      * Nr of non-empty arguments
         LCLA  &R                      * Index into &BXA_USED_REGS
         LCLC  &USEDREGS               * Used regs on labeled USING
         LCLC  &USEDREG                * 1 index from USEDREGS
.*
.* Include DROP_REG on first invocation
         DROP0
.*
.* Check base registers to be dropped (if any)
         AIF   (N'&SYSLIST EQ 0).DROPALL * Drop for all USINGs?
.*
.* Check all arguments in SYSLIST, add validated ones to &ARGS
&I       SETA  0                       * Check SYSLIST arguments
.LOOP1   ANOP  ,                       * For all remaining arguments
&I       SETA  &I+1                    * Point next argument
         AIF   (&I GT N'&SYSLIST).NOERR1 * At end: all args checked ok
&ARG     SETC  '&SYSLIST(&I)'          * Extract argument from SYSLIST
         AIF   (K'&ARG EQ 0).LOOP1     * Skip omitted argument
&J       SETA  &J+1                    * Increment nr of args checked
         CHKREG &ARG                   * A register was specified?
         AIF   (&BXA_RC EQ 8).LOOP1LBL * No: check for known labels
         AIF   (&BXA_RC EQ 0).LOOP1REG * Ok: defined register
.*
.* &BXA_RC = 4: a literal number 0-15 was specified
&REG     SETA  &ARG                    * Extract register number
&R       SETA  &REG+1                  * Add 1 to obtain index
         DROP_REG ,&R                  * Remove from USE... tables
         AIF   (&BXA_RC EQ 4).LOOP1    * Register USE: omit from ARGS
&ARGS    SETC  '&ARGS'.','.'&ARG'      * Add entry to ARGS
         AGO   .LOOP1                  * and go check next argument
.*
.* NUMVAL = 0: a defined register was specified
.LOOP1REG ANOP  ,                      * Check EQUated register
         GBLC  &(BXA_REGT_&ARG)        * Declare type field for reg
         GBLA  &(BXA_REGN_&ARG)        * Declare number field for reg
&REG     SETA  &(BXA_REGN_&ARG)        * Extract register number
         AIF   ('&(BXA_REGT_&ARG)' NE 'g').ERR1A * Invalid reg type
&R       SETA  &REG+1                  * Increment to obtain index
         DROP_REG ,&R                  * Remove from USE... tables
         AIF   (&BXA_RC EQ 4).LOOP1    * Register USE: omit from ARGS
&ARGS    SETC  '&ARGS'.','.'&ARG'      * Add entry to ARGS
         AGO   .LOOP1
.*
.* RC = 8: a label must have been specified, cannot be a register USE
.LOOP1LBL ANOP
&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Search tables for entries
.LOOP2   ANOP  ,                       *    with the specified label
&N       SETA  &N+1                    *    to mark the regs available.
.LOOP2NI ANOP  ,                       * Loop with No Increment
         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP2OK * At end: done
         AIF   ('&BXA_USELBL(&N)' NE '&ARG').LOOP2 * Skip mismatch
&R       SETA  &BXA_USEREG(&N)         * Obtain index
         DROP_REG &ARG,&R,&N           * Remove this entry from tables
         AGO   .LOOP2NI                * Loop, no increment: last entry*
                                       *   moved here by DROP_REG
.LOOP2OK ANOP  ,
&ARGS    SETC  '&ARGS'.','.'&ARG'      * Add entry to ARGS
         AGO   .LOOP1                  * Process next SYSLIST entry
.*
.ERR1A   MNOTE 8,'Specified argument &SYSLIST(&I) is not a general purp*
               ose register'
         AGO   .LOOP1
.NOERR1  ANOP
.*
.* Remove leading comma from ARGS
         AIF   (&J EQ 0).DROPALL       * Only commas supplied?
         AIF   (K'&ARGS EQ 0).ARGSOK   * Any non-register USEs?
&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma
.ARGSOK  ANOP
.*
.* Rebuild BXA_USED_REGS from BXA_USEREG table
.* Skip any USING for PSA,R0
&BXA_USED_REGS(1) SETB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Search tables to mark
.LOOP3   ANOP  ,                       *    all used registers
&N       SETA  &N+1                    *    unavailable.
         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP3OK * At end: done
&R       SETA  &BXA_USEREG(&N)         * Obtain index
         AIF   (&R EQ 1 AND '&BXA_USEFLD(&N)' EQ 'PSA').LOOP3
&BXA_USED_REGS(&R) SETB 1              * Set designated register in use
         AGO   .LOOP3                  *
.LOOP3OK ANOP  ,                       *
.*
.* Generate _DROP statement, unless only register USEs were specified
         AIF   (K'&ARGS EQ 0).REPORT
         _DROP &ARGS
         AGO   .REPORT
.*
.* Generate _DROP statement (no arguments)
.DROPALL ANOP  ,   reg 0 1 2 3 4 5 6 7 8 9 A B C D E F dropped
&BXA_USED_REGS(1) SETB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
&BXA_USENDX1(&BXA_USENDX) SETA &BXA_USENDX0(&BXA_USENDX)
         _DROP
.*
.REPORT  ANOP  ,                       * Report using status
         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested
         USEDREGS
.*
.MEND    MEND
./ ADD NAME=DROP0    0100-20096-20096-0111-00116-00116-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro creates the DROP_REG macro
.*
         DROP0 ,                       *
.*
.* Declare variables
         GBLB  &BXA_DROP               * Macro expanded before?
.*
.* Include DROP_REG on first invocation
         AIF   (&BXA_DROP).MEND
&BXA_DROP SETB 1
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
.*
.* Following macro removes a single entry from the
.* &BXA_USELBL, &BXA_USEREG, and &BXA_USEFLD tables
         MACRO
         DROP_REG &LAB,&NDX,&I=0
.*
.* &LAB is label to search/remove
.* &NDX is register index to search/remove
.* &I   is index in BXA_USE... tables
.* Returncode will be set as follows:
.* 0 - all information removed, no register USE
.* 4 - information removed for a register USE
.* 8 - no found: no information removed
.*
         GBLC  &BXA_USELBL(50)         * Used labels ...
         GBLA  &BXA_USEREG(50)         *   and associated registers
         GBLC  &BXA_USEFLD(50)         *   and associated base fields
         GBLA  &BXA_USENDX0(5)         * Low valid pointers
         GBLA  &BXA_USENDX1(5)         * High valid pointers
         GBLA  &BXA_USENDX             * Pointer for USENDX0/USENDX1
         GBLA  &BXA_RC                 * returncode
         LCLA  &N                      * Index for BXA_USE...
         LCLA  &R                      * Register index value
         LCLC  &REG                    * Register
.*
.* If index not specified: find entry for register specified
.* Skip any entry for USING PSA,R0 (doesnt use reg & cannot be dropped)
&N       SETA  &I
         AIF   (&N GT 0).LOOP1OK
.LOOP1   ANOP  ,
&N       SETA  &N+1
         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP1NF
         AIF   ('&BXA_USELBL(&N)' NE '&LAB').LOOP1
         AIF   (&BXA_USEREG(&N) NE &NDX).LOOP1
         AIF   (&NDX EQ 1 AND '&BXA_USEFLD(&N)' EQ 'PSA').LOOP1
         AGO   .LOOP1OK
.LOOP1NF ANOP
&N       SETA  &NDX-1                  * Obtain register number
&REG     SETC  'R&N'
         MNOTE 8,'No unlabeled USING active for &REG'
&BXA_RC  SETA  8
         MEXIT
.*
.LOOP1OK ANOP  ,                       * &N now points removable entry
.* Determine returncode value before removing entry: 0 or 4
&BXA_RC  SETA  0                       * Found entry: rc=0
         AIF   ('&BXA_USEFLD(&N)' NE '').RCOK * Except for:
&BXA_RC  SETA  4                       * Register USE: rc=4
.RCOK    ANOP
.* Overwrite entry with current last in table, then remove last
&R       SETA  &BXA_USENDX1(&BXA_USENDX) * Point last entry
         AIF   (&N EQ &R).NOCOPY       * Copy to self not useful
&BXA_USELBL(&N) SETC '&BXA_USELBL(&R)' * Copy label
&BXA_USEREG(&N) SETA &BXA_USEREG(&R)   * Copy register
&BXA_USEFLD(&N) SETC '&BXA_USEFLD(&R)' * Copy base field/location
.NOCOPY  ANOP  ,                       * Copy done
&BXA_USENDX1(&BXA_USENDX) SETA &R-1    * Decrement last valid
.*
.MEND    MEND
         POP   PRINT,NOPRINT
.*
.MEND    MEND
./ ADD NAME=DS       0100-20096-20096-0111-00150-00150-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's DS statement
.*
&LABEL   DS    ,                       * Arguments in &SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DS                     * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_DS_LASTLAB        * Org. label of last labeled DS
         GBLA  &BXA_DS_OFFSET         * Nr of unlab'd DSs since LASTLAB
         GBLA  &BXA_DSOVR             * Ptr to last valid
         GBLC  &BXA_DSOVR_LAB(50)     * Labels
         GBLC  &BXA_DSOVR_PRM(50)     * Parameter strings
         GBLC  &BXA_DSOVR_NAM(50)     * New names
         LCLA  &I                     * Index
         LCLC  &_LABEL                *
         LCLC  &PRMS                  *
         LCLB  &RESET                 * On if last entry removed
         LCLC  &LAB                   * LABEL used to search DSOVR_LAB
.*
.* Check number of parameters
         AIF   (N'&SYSLIST EQ 0).ERR1A
         AIF   (K'&SYSLIST(1) EQ 0).ERR1A
         AGO   .NOERR1
.ERR1A   MNOTE 8,'Missing operand(s)'
         MEXIT
.NOERR1  ANOP
.*
.* Set up default values
&_LABEL  SETC  '&LABEL'                * Copy fieldname
.LOOP1   ANOP  ,                       * Collect all parameters
&I       SETA  &I+1                    * into variable PRMS
         AIF   (&I GT N'&SYSLIST).LOOP1OK
&PRMS    SETC  '&PRMS'.','.'&SYSLIST(&I)'
         AGO   .LOOP1
.LOOP1OK ANOP  ,
&PRMS    SETC  '&PRMS'(2,*)            * PRMS cannot be empty
.*
.* Determine values relating to unlabeled DS-statements
         AIF   (K'&_LABEL EQ 0).CRTLAB * DS is labeled?
&BXA_DS_OFFSET SETA 0                  * Reset unlabeled count
&BXA_DS_LASTLAB SETC '&_LABEL'         * Set last-used original label
&LAB     SETC  '&_LABEL'               * Use this label for lookup
         AGO   .LABOK
.CRTLAB  ANOP  ,                       * Create LABEL+nnn to identify
&BXA_DS_OFFSET SETA &BXA_DS_OFFSET+1   * Increment unlabeled count
&LAB     SETC  '&BXA_DS_LASTLAB'.'+'.'&BXA_DS_OFFSET' * Create label
.LABOK   ANOP  ,
.*
.* Check for overrides from DSOVR
&I       SETA  0                       * I indexes BXA_DSOVR_xxx
.LOOP2   ANOP  ,                       * Search entry
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &BXA_DSOVR).LOOP2NF * At end: not found
         AIF   ('&BXA_DSOVR_LAB(&I)' NE '&LAB').LOOP2 *Skip mismatch
.*
.* Found a match: set up replacement variables
         AIF   (K'&BXA_DSOVR_NAM(&I) EQ 0).NOLAB
&_LABEL  SETC  '&BXA_DSOVR_NAM(&I)'    * NAM contains new field name
         AIF   ('&_LABEL' NE '*NONAME').NOLAB
&_LABEL  SETC  ''                      * Remove label for this DS
.NOLAB   ANOP
.* Override parameter string?
         AIF   (K'&BXA_DSOVR_PRM(&I) EQ 0).NOPRM
&PRMS    SETC  '&BXA_DSOVR_PRM(&I)'    * Pick up override value
.NOPRM   ANOP
.*
.* Remove the entry from the tables
.* Replace current entry by the last-valid,
.*    then decrement last-valid pointer
         AIF   (&I EQ &BXA_DSOVR).DECR * Skip copy if current=last
&BXA_DSOVR_LAB(&I) SETC '&BXA_DSOVR_LAB(&BXA_DSOVR)'
&BXA_DSOVR_PRM(&I) SETC '&BXA_DSOVR_PRM(&BXA_DSOVR)'
&BXA_DSOVR_NAM(&I) SETC '&BXA_DSOVR_NAM(&BXA_DSOVR)'
.DECR    ANOP  ,                       * Decrement last-valid pointer
&BXA_DSOVR SETA &BXA_DSOVR-1           *    by one
         AIF   (&BXA_DSOVR NE 0).LOOP2NF * Stack not empty
&RESET   SETB  1                       * Last entry just removed
.*
.* Generate _DS statement with overrides, unless *SUPPRESS specified
.LOOP2NF ANOP  ,                       *
         AIF   ('&PRMS' EQ '*SUPPRESS').SUPPRESS
.*
&_LABEL  _DS   &PRMS
.SUPPRESS ANOP ,
.*
.* If overrides stack has just been emptied, then this macro must be
.* disabled by replacing the _DS-intruction with the original DS-instr.
         AIF   (NOT &RESET).MEND
         OPSYNS _DS                    * Revert to DS-instruction
.*
.MEND    MEND
./ ADD NAME=DSOVR    0100-20096-20096-0111-00185-00185-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro handles the stack of DS modifications for use by the
.* DS macro, which replaces the assembler's DS instruction
.*
&LABEL   DSOVR &OPT,                   * Parameters are in &SYSLIST    *
               &NEWNAM                 * New name for *NEWNAME option
.*
.* &LABEL mandatory, except when &OPT=*END
.*        To specify an override for an unlabeled DS, specify the label
.*        of the last preceding labeled DS and the relative number of
.*        the unlabeled statement to be overridden. E.g.: LABEG+3,
.*        would  mean the third unlabeled DS after the DS with label
.*        LABEG.
.* &OPT   specifies one of the following:
.*        *END cancels all outstanding DSOVR requests
.*        *SUPPRESS suppresses the definition of &LABEL
.*        *NEWNAME changes the DS for &LABEL into one for &NEWNAM,
.*              i.e. Specify *NEWNAME,newname,parmstring
.*        Other values override the DS-operand string
.* &NEWNAM Specifies the new name, if &OPT=*NEWNAME
.*        &NEWNAM may optionally be followed by a parameter string
.*        If &NEWNAM specifies *NONAME the DS will become unlabeled
.* &SYSLIST Specifies an operand string, which replaces the complete
.*        operand string of the original DS statement.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC DSOVR                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_DSOVR              * Ptr to last valid
         GBLC  &BXA_DSOVR_LAB(50)      * Labels
         GBLC  &BXA_DSOVR_PRM(50)      * Parm strings
         GBLC  &BXA_DSOVR_NAM(50)      * New names
         LCLA  &I                      * Index
         LCLC  &PRMS                   * Parameter string
.*
.* Check LABEL parameter
         AIF   (K'&LABEL GT 0).NOERR1
         AIF   ('&OPT' EQ '*END').NOERR1
.ERR1    MNOTE 8,'Missing label parameter'
         MEXIT
.NOERR1  ANOP
.*
.* Check the OPT parameter
         AIF   (K'&OPT NE 0).NOERR2
.ERR2A   MNOTE 8,'Missing parameter(s)'
         MEXIT
.NOERR2  ANOP  ,
.*
.* Check the NEWNAME parameter (must be present if &OPT = *NEWNAME)
         AIF   ('&OPT' EQ '*NEWNAME' AND K'&NEWNAM EQ 0).ERR3A
         AGO   .NOERR3
.ERR3A   MNOTE 8,'New name not specified with option *NEWNAME'
         MEXIT
.NOERR3  ANOP
.*
.* Check number of parameters
         AIF   ('&OPT' EQ '*END' AND N'&SYSLIST GT 1).ERR4A
         AIF   ('&OPT' EQ '*END').NOERR4
         AIF   ('&OPT' EQ '*SUPPRESS' AND N'&SYSLIST GT 1).ERR4A
         AIF   ('&OPT' EQ '*SUPPRESS').NOERR4
         AGO   .NOERR4
.ERR4A   MNOTE 4,'More than 1 argument: remainder ignored'
.NOERR4  ANOP
.*
.* Which option requested?
         AIF   ('&OPT' EQ '*END').END
         AIF   ('&OPT' EQ '*SUPPRESS').SUPPRESS
         AIF   ('&OPT' EQ '*NEWNAME').NEWNAME
.*
.* Normal: add entries to tables
&I       SETA  0                       * SYSLIST(1) ff into PRMS
         AGO   .BLDPRMS
.*
.* Suppress option
.SUPPRESS ANOP ,
&PRMS    SETC  '&OPT'                  * Set to *SUPPRESS
         AGO   .ADDNTRY
.*
.* Newname option
.NEWNAME ANOP  ,
&I       SETA  2                       * SYSLIST(3) ff into PRMS
         AGO   .BLDPRMS
.*
.* Build parameter string from SYSLIST entries
.BLDPRMS ANOP  ,
&I       SETA  &I+1                    * Point next SYSLIST entry
         AIF   (&I GT N'&SYSLIST).PRMSOK
&PRMS    SETC  '&PRMS'.','.'&SYSLIST(&I)'
         AGO   .BLDPRMS
.PRMSOK  ANOP  ,
         AIF   (K'&PRMS EQ 0).ADDNTRY
&PRMS    SETC  '&PRMS'(2,*)            * Remove leading comma
.*
.* Add entry to tables
.ADDNTRY ANOP  ,
&I       SETA  &BXA_DSOVR+1            * Next free entry
&BXA_DSOVR_LAB(&I) SETC '&LABEL'       * Insert label,
&BXA_DSOVR_PRM(&I) SETC '&PRMS'        *   and parameters
&BXA_DSOVR_NAM(&I) SETC ''             *   into tables
         AIF   ('&OPT' NE '*NEWNAME').NAMOK
&BXA_DSOVR_NAM(&I) SETC '&NEWNAM'      *
.NAMOK   ANOP  ,
&BXA_DSOVR SETA &I                     * And update ptr to last valid
.*
.* Replace DS-instruction by our DS-macro on the first override
         AIF   (&BXA_DSOVR GT 1).MEND
         OPSYNS DS                     * Replace DS by _DS
         MEXIT
.*
.* Ending current DSOVR requests. Issue a message for any unused
.* entries in BXA_DSOVR tables.
.END     ANOP
         AIF   (&BXA_DSOVR EQ 0).MEND * No entries remain
&I       SETA  0                       * I indexes BXA_DSOVR_xxx
.LOOP1   ANOP  ,                       * For all current entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &BXA_DSOVR).LOOP1OK * At end: quit loop
         MNOTE 4,'DSOVR for &BXA_DSOVR_LAB(&I) discarded'
         AGO   .LOOP1
.LOOP1OK ANOP
&BXA_DSOVR SETA 0                      * Reset valid counter to 0
.*
.* Disable our DS-macro by replacing _DS by original DS-instruction
         OPSYNS _DS                    * Reset DS-instruction
.*
.MEND    MEND
./ ADD NAME=EJECT    0100-20096-20096-0111-00116-00116-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's EJECT statement
.*
&LABEL   EJECT ,                       * Arguments in SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EJECT                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_EJECTOVR(2)        * Nr of valid entries in ...
         GBLC  &BXA_EJECTOVR_OPT(5)    * Stack of override options
         LCLA  &I                      * Index into &SYSLIST
         LCLC  &ARG                    * 1 Argument from SYSLIST
         LCLC  &ARGS                   * Arguments from SYSLIST
         LCLC  &OVR_OPT                * Override option
.*
.* Check LABEL parameter
         AIF   (K'&LABEL EQ 0).NOERR1
         AIF   (&SYSNEST GT 1).NOERR1
.ERR1A   MNOTE 4,'No label parameter allowed with EJECT: label ignored'
.NOERR1  ANOP
.*
.* If applicable: extract override option for this EJECT
&OVR_OPT SETC  '*KEEP'                 * Default to *KEEP-option
         AIF   (&BXA_EJECTOVR(2) EQ 0).OVROK
&I       SETA  &BXA_EJECTOVR(1)+1      * Point next unused entry
         AIF   (&I GT &BXA_EJECTOVR(2)).OVRMT * Override table empty
&OVR_OPT SETC  '&BXA_EJECTOVR_OPT(&I)' * Extract option from table
&BXA_EJECTOVR(1) SETA &I               * Update used-up entries ptr
         AGO   .OVROK
.OVRMT   ANOP  ,
&BXA_EJECTOVR(1) SETA 0                * Reset last-used entry pointer
&BXA_EJECTOVR(2) SETA 0                * Reset high valid entry pointer
.OVROK   ANOP  ,
.*
.* If override option = *SUPPRESS: quit macro
         AIF   ('&OVR_OPT' EQ '*SUPPRESS').MEND
.*
.* Build ARGS from &SYSLIST
&I       SETA  0                       * I indexes &SYSLIST
.LOOP1   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
&ARG     SETC  '&SYSLIST(&I)'          * Extract 1 argument
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AIF   (K'&ARG EQ 0).LOOP1
.ERR2A   ANOP  ,
         AIF   ('&OVR_OPT' EQ '*NOERR').LOOP1
         MNOTE 4,'No arguments allowed on EJECT: ignored'
         AGO   .LOOP1                  * And go process next entry
.LOOP1OK ANOP
         AIF   (K'&ARGS LT 2).ARGSOK
&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma
.ARGSOK  ANOP
.*
.* Generate _EJECT statement
         _EJECT
.*
.MEND    MEND
./ ADD NAME=EJECTOVR 0100-20096-20096-0111-00152-00152-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro handles the stack of EJECT modifications for use by the
.* EJECT macro, which replaces the assembler's EJECT instruction
.*
&LABEL   EJECTOVR &OPT,                * *NOERR or *END                *
               &TIMES                  * Repeat count for &OPT
.*
.* &LABEL should not be specified
.* &OPT   specifies the one of the following:
.*        *END cancels all outstanding EJECTOVR requests
.*        *KEEP allows an EJECT statement to remain unchanged
.*        *SUPPRESS suppresses the EJECT statement
.*        *NOERR suppresses any error messages
.* &TIMES Specifies the number of times the specified options is to be
.*        performed. Cannot be used with *END
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EJECTOVR               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_EJECTOVR(2)        * Ptr to first and last valid
         GBLC  &BXA_EJECTOVR_OPT(50)   * Options
         GBLA  &BXA_NUMVAL             * Result from CHKLIT
         LCLA  &_TIMES                 *
         LCLA  &I                      * Index
.*
.* Check LABEL parameter
         AIF   (K'&LABEL EQ 0).NOERR1
.ERR1    MNOTE 4,'Label parameter ignored'
.NOERR1  ANOP
.*
.* Check the OPT parameter
         AIF   (K'&OPT EQ 0).ERR2A
         AIF   ('&OPT' EQ '*END').NOERR2
         AIF   ('&OPT' EQ '*NOERR').NOERR2
         AIF   ('&OPT' EQ '*SUPPRESS').NOERR2
         AIF   ('&OPT' EQ '*KEEP').NOERR2
         AGO   .ERR2B
.ERR2A   MNOTE 8,'Missing parameter(s)'
         MEXIT
.ERR2B   MNOTE 8,'Unsupported option: &OPT'
         MEXIT
.NOERR2  ANOP  ,
.*
.* Check the TIMES parameter (may be present if &OPT <> *END)
         AIF   (K'&TIMES EQ 0).NOERR3
         AIF   ('&OPT' EQ '*END').ERR3A
         CHKLIT &TIMES                 * Determine numerical value
         AIF   (&BXA_RC NE 0).ERR3B
&_TIMES  SETA  &BXA_NUMVAL             * Copy count to index
         AGO   .NOERR3
.ERR3A   MNOTE 4,'Count specified with option *END: count ignored'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'Specified count is not a valid number'
         MEXIT
.NOERR3  ANOP
.*
.* Check number of parameters
         AIF   ('&OPT' EQ '*END' AND N'&SYSLIST GT 1).ERR4A
         AIF   ('&OPT' EQ '*END').NOERR4
         AIF   (N'&SYSLIST GT 2).ERR4B
         AGO   .NOERR4
.ERR4A   MNOTE 4,'More than 1 argument: remainder ignored'
         AGO   .NOERR4
.ERR4B   MNOTE 4,'More than 2 arguments: remainder ignored'
.NOERR4  ANOP
.*
.* Which option requested?
         AIF   ('&OPT' EQ '*END').END
.*
.* Add entries to tables
.NOERR   ANOP  ,
&I       SETA  &BXA_EJECTOVR(2)+1      * Point next free entry
&BXA_EJECTOVR_OPT(&I) SETC '&OPT'      * Insert option into table
&BXA_EJECTOVR(2) SETA &I               * Update ptr to last-valid entry
&_TIMES  SETA  &_TIMES-1               * Reduce nr of entries to create
         AIF   (&_TIMES GE 1).NOERR    * Repeat until all created
         MEXIT
.*
.* Ending current EJECTOVR requests. Issue a message for any unused
.* entries in BXA_EJECTOVR tables.
.END     ANOP
         AIF   (&BXA_EJECTOVR(2) EQ 0).MEND * No entries exist
&I       SETA  &BXA_EJECTOVR(1)        * I indexes BXA_EJECTOVR_OPT
.LOOP1   ANOP  ,                       * For all current entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &BXA_EJECTOVR(2)).LOOP1OK * At end: quit loop
         MNOTE 4,'EJECTOVR &BXA_EJECTOVR_OPT(&I) discarded'
         AGO   .LOOP1
.LOOP1OK ANOP
&BXA_EJECTOVR(1) SETA 0                * Reset used-up counter to 0
&BXA_EJECTOVR(2) SETA 0                * Reset valid counter to 0
.*
.MEND    MEND
./ ADD NAME=ELSE     0100-20096-20096-0111-00122-00122-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: ELSE
.* Combines with IF and ENDIF to conditionally execute blocks of code
.*
&LABEL   ELSE  ,                       * No arguments allowed
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC ELSE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_LBL(5)         * Labels
         GBLA  &BXA_STK_LVL(5)         * Levels
         LCLC  &OP                     * Last opcode on stack
         LCLC  &LBL                    * Last label on stack
         LCLA  &LVL                    * Last level on stack
         LCLC  &LAB                    * End-of-else label
         LCLA  &I                      * Stack pointer
.*
.* Check label parameter
         AIF   (K'&LABEL EQ 0).NOERR1
.ERR1    MNOTE 4,'Label ignored'
.NOERR1  ANOP
.*
.* Check nr of parameters
         AIF   (N'&SYSLIST EQ 0).NOERR2
         AIF   (K'&SYSLIST(1) GT 1).ERR2
         AIF   (N'&SYSLIST EQ 1).NOERR2
         AIF   (K'&SYSLIST(2) GT 1).ERR2
         AIF   (N'&SYSLIST EQ 2).NOERR2
.ERR2    MNOTE 4,'No arguments expected: ignored'
.NOERR2  ANOP
.*
.* Check that current stack-entry designates a then-block
&I       SETA  &BXA_STK                * Copy stack pointer
         AIF   (&I LT 1).ERR3A         * Stack underflow
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack
&LBL     SETC  '&BXA_STK_LBL(&I)'      * and end-of-block label
         AIF   ('&OP' EQ 'CASE').NOERR3
         AIF   ('&OP' EQ 'ELSE').ERR3B
         AIF   ('&OP' EQ 'IF').NOERR3
         AGO   .ERR3C
.ERR3A   MNOTE 8,'No preceding IF statement: ignored'
         MEXIT
.ERR3B   MNOTE 8,'Duplicate ELSE statement: ignored'
         MEXIT
.ERR3C   MNOTE 8,'Cannot use ELSE to terminate a &OP.-block: ignored'
         MEXIT
.NOERR3  ANOP
.*
.* Generate end-of-then label and add a stack-entry
&LAB     SETC  '_ELSE_&SYSNDX'
&LVL     SETA  &BXA_STK_LVL(&BXA_STK)  * Copy level
&I       SETA  &BXA_STK+1              * Point next stack entry
&BXA_STK_OP(&I)  SETC 'ELSE'           * Indicate ELSE block in progres
&BXA_STK_LBL(&I) SETC '&LAB'           * End-of-ELSE label for ENDIF
&BXA_STK_LVL(&I) SETA &LVL             * Level for ENDIF
&BXA_STK SETA  &I                      * And increment stack pointer
.*
.* Generate code
         B     &LAB                    * Skip else-logic
&LBL     LABEL ,                       * Start of else-logic
.*
.MEND    MEND
./ ADD NAME=END      0100-20096-20096-0111-00658-00658-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Terminate assembly. This macro replaces the normal END instruction.
.* The required OPSYN is issued by the PGM macro.
.*
&LABEL   END   &EP                     * Entry point label
.*
.* &EP   specifies the entry point, as in the END instruction
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC END                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &SP_SHOWALL             * Print option from JCL
         GBLA  &BXA_SAVES              * Number of internal save-areas
         GBLC  &BXA_ENTRY              * Type of program
         GBLC  &BXA_SUBR               * Name of current subroutine
         GBLC  &BXA_SRDNAM(50)         * Names of defined subroutines
         GBLC  &BXA_SRDTYP(50)         * Types of defined subroutines
         GBLB  &BXA_SRDDUP(50)         * Duplication status of subrs
         GBLC  &BXA_SRUNAM(50)         * Names of used subroutines
         GBLA  &BXA_SRUCT(50)          * Use count of subroutines
         GBLA  &BXA_SRNAML             * Max subr name length
         GBLC  &BXA_SR_CALLER(50)      * Names of calling subrs
         GBLC  &BXA_SR_CALLED(50)      * Names of called subrs
         LCLA  &I,&J                   * Index into BXA_SRxNAM arrays
         LCLA  &S1,&S2                 * Sort-limit indices
         LCLC  &LIN                    * MNOTE line in formation
         LCLC  &LVL                    * MNOTE line severity level
         LCLC  &LINE(50)               * MNOTE lines
         LCLA  &LINE_LEN               * Length of longest line
         LCLC  &LEVEL(50)              * MNOTE line severity levels
         LCLA  &L                      * Index into LINE/LEVEL arrays
         GBLC  &_CALLER(50)            * Copy of BXA_SR_CALLER
         GBLC  &_CALLED(50)            * Copy of BXA_SR_CALLED
         LCLC  &CALLERS(50)            * Callers of 1 subr
         LCLA  &CALLCT(50)             * Count of EXSR per caller
         LCLA  &C,&D,&E                * Index into _CALLxx/CALLERS
         LCLC  &CALLER                 * 1 caller of current subr
         LCLB  &RECURSE                * On if recursion found in subr
         LCLA  &NESTLVL                * Level of subroutine nesting
         LCLB  &LVLUP                  * On if nestlvl increased
         LCLC  &SRTYP                  * Subroutine type (current)
         LCLC  &SR_TYP(5)              * Subroutine types
         LCLA  &SR_NEST(5)             * Max nestlvl for this subr.type
         LCLB  &PGM_REC                * On if recursion found in pgm
         LCLA  &NESTMAX                * Max. level of subr nesting
         LCLA  &INT_MAX                * Max. level of subr nesting
         LCLA  &EXT_MAX                * Max. level of subr nesting
         GBLC  &BXA_ABND(50)           * Used ABND-labels
         GBLC  &BXA_ABNDPGM(50)        * Defined ABND-labels
         GBLC  &BXA_ABND_DFT           * Default ABND-label
         GBLB  &SP_DBG                 * On if DBG-code enabled
         GBLB  &SP_SRLIST              * On if subr-listing desired
         GBLB  &SP_SRXREF              * On for subr cross reference
         GBLA  &BXA_DBG_SKIP           * Nr of skipped DBG-operations
         LCLC  &_PRINT                 * Print option for PRINT
         LCLC  &_PROPT                 * Print option for PUSH/POP
         LCLC  &CT                     * Call count as text
         LCLC  &_MAIN                  * Length-adjusted constant *MAIN
         GBLC  &BXA_RETRN_RC(5)        * Returncodes
         GBLC  &BXA_RETRN_RS(5)        * Reasoncodes
         GBLC  &BXA_RETRN_RP(5)        * Return pointers
         GBLC  &BXA_RETRN_WA(5)        * FREE/NOFREE
         GBLC  &BXA_RETRN_LBL(5)       * Routine labels
.*
.* Check that the structured programming stack is empty
         CHK_STACK ,                   *
.*
.* Check that we're not in the midst of a subroutine
         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR1
.ERR1    MNOTE 8,'Missing ENDSR statement'
.NOERR1  ANOP
.*
.* Set listing options
&_PRINT  SETC  'ON'                    * SHOWALL: show PRINT lines
         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP lines
&_PRINT  SETC  'OFF,NOPRINT'           * Not ALL: omit PRINT lines
&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines
.PRINTOK ANOP
.*
.* Check that no override instances remain pending
         DSOVR *END
         EJECTOVR *END
         EQUOVR *END
.*
.* Generate code
&LABEL   LABEL H                       * Align on halfword
.*
.* Insert remote RETRN-routines
&I       SETA  N'&BXA_RETRN_LBL        * Nr of entries in RETRN tables
.LOOPR   ANOP  ,                       * For all remote RETRNs
         AIF   (&I EQ 0).LOOPROK       * At end: quit loop
&BXA_RETRN_LBL(&I) RETRN RC=&BXA_RETRN_RC(&I),                         *
               REASON=&BXA_RETRN_RS(&I),                               *
               RETPTR=&BXA_RETRN_RP(&I),                               *
               WORKAREA=&BXA_RETRN_WA(&I),                             *
               INLINE=NO
&I       SETA  &I-1                    * Point to next entry
         AIF   (&I GT 0).LOOPR         * Not done: repeat loop
         LTORG ,                       * Literals for RETRN
.LOOPROK ANOP
.*
.* Insert remote data definitions
         DROP  ,                       * End all USINGs
         RLTORG ,                      *
         EJECT ,                       * Force heading with USINGs
.*
.* Report suppression of DBG-code
         AIF   (&SP_DBG).DBGOK         * DBG enabled: no msg
         AIF   (&BXA_DBG_SKIP EQ 0).DBGOK * No DBGs: no msg
         MNOTE 0,'&BXA_DBG_SKIP DBG-operations suppressed due to specif*
               ied SYSPARM'
.DBGOK   ANOP
.*
.* Check ABND and ABNDPGM macro usage
.* First check whether the ABND SETDFT label was defined with ABNDPGM
         AIF   ('&BXA_ABND_DFT' EQ '').LOOPIND * No default specified
&J       SETA  0                       * J indexes BXA_ABNDPGM
.LOOPI   ANOP
&J       SETA  &J+1                    * Point next defined label
         AIF   (&J GT N'&BXA_ABNDPGM).LOOPINF * End of array
         AIF   ('&BXA_ABNDPGM(&J)' EQ '&BXA_ABND_DFT').LOOPIOK * Found
         AGO   .LOOPI                  * Go process next entry
.LOOPINF ANOP  ,                       * Not Found
         MNOTE 4,'ABND SETDFT specified a label that was not defined wi*
               th ABNDPGM'
         AGO   .LOOPIOK                * Loop done
.LOOPIND ANOP  ,                       * Not defined
         AIF   ('&BXA_ENTRY' EQ 'FRR').LOOPIOK
         AIF   ('&BXA_ENTRY' EQ 'RMTR').LOOPIOK
         MNOTE 4,'ABND SETDFT not issued in source &SYSIN_MEMBER'
.LOOPIOK ANOP
.*
.* LOOPJ/LOOPK checks whether ABND labels were defined with ABNDPGM
&I       SETA  0                       * I indexes BXA_ABND
.LOOPJ   ANOP
&I       SETA  &I+1                    * Point next used label
         AIF   (&I GT N'&BXA_ABND).LOOPJOK * End of loop
&J       SETA  0                       * J indexes BXA_ABNDPGM
.LOOPK   ANOP
&J       SETA  &J+1                    * Point next defined label
         AIF   (&J GT N'&BXA_ABNDPGM).LOOPKNF * Not found: error
         AIF   ('&BXA_ABND(&I)' EQ '&BXA_ABNDPGM(&J)').LOOPKF * Found
         AGO   .LOOPK                  * Continue search
.LOOPKF  ANOP
&BXA_ABNDPGM(&J) SETC ''               * Removed defined label: used
         AGO   .LOOPKOK
.LOOPKNF MNOTE 8,'Label &BXA_ABND(&I) used on ABND-macro, but not defin*
               ed on ABNDPGM-macro'
.LOOPKOK ANOP
         AGO   .LOOPJ
.LOOPJOK ANOP
.*
.* All defined labels that are not used still remain in BXA_ABNDPGM
&J       SETA  0                       * J indexes BXA_ABNDPGM
.LOOPL   ANOP
&J       SETA  &J+1                    * Point next defined label
         AIF   (&J GT N'&BXA_ABNDPGM).LOOPLOK * End of array
         AIF   ('&BXA_ABNDPGM(&J)' EQ '').LOOPL * Skip empty entries
         MNOTE 4,'Label &BXA_ABNDPGM(&J) defined in ABNDPGM-macro but n*
               ot used on ABND-macro'
         AGO   .LOOPL                  * Go process next entry
.LOOPLOK ANOP
.*
.* Create local copies of subroutine cross reference tables
&I       SETA  0
.LOOP0   ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&BXA_SR_CALLED).LOOP0OK
&LIN     SETC  '&BXA_SR_CALLER(&I)'.(64)' ' * Append a lot of blanks
&_CALLER(&I) SETC '&LIN'(1,&BXA_SRNAML)     * Truncate to length
&LIN     SETC  '&BXA_SR_CALLED(&I)'.(64)' ' * Append a lot of blanks
&_CALLED(&I) SETC '&LIN'(1,&BXA_SRNAML)     * Truncate to length
         AGO   .LOOP0                  * And go copy nxt set of entries
.LOOP0OK ANOP
&_MAIN   SETC  '*MAIN'.(64)' '              * Also create name of *MAIN
&_MAIN   SETC  '&_MAIN'(1,&BXA_SRNAML)      *     truncate to length
.*
.* Adjust length of subroutine names in BXA_SRUNAM cross ref. table
&I       SETA  0
.LOOPQ   ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&BXA_SRUNAM).LOOPQOK
&LIN     SETC  '&BXA_SRUNAM(&I)'.(64)' '   * Append a lot of blanks
&BXA_SRUNAM(&I) SETC '&LIN'(1,&BXA_SRNAML) * Truncate to length
         AGO   .LOOPQ                  * And go adjust nest entry
.LOOPQOK ANOP
.*
.* Create an overview of all defined subroutines
         AIF   ('&BXA_SRDNAM(1)' EQ '').LOOP1OK * If empty skip loop
&I       SETA  0                       * Init for loop
.LOOP1   ANOP
&I       SETA  &I+1                    * Index next entry
         AIF   (&I GT N'&BXA_SRDNAM).LOOP1OK * End loop
&LVL     SETC  '*'                     * Default: info msg
&LIN     SETC  '&BXA_SRDNAM(&I)'.(64)' ' * Extract name of subroutine
&LIN     SETC  '&LIN'(1,&BXA_SRNAML)   *  and trunc. to desired length
&BXA_SRDNAM(&I) SETC '&LIN'            * Update name in table too
.* Look up the subr-name in the BXA_SRUNAM table
&J       SETA  0                       * Init for inner loop
.LOOP2   ANOP
&J       SETA  &J+1                    * Index next entry
         AIF   (&J GT N'&BXA_SRUNAM).LOOP2NF * Not found: end loop
         AIF   ('&BXA_SRUNAM(&J)' EQ '&LIN').LOOP2F * Found: msg
         AGO   .LOOP2                  * Continue search with nxt entry
.* Found: build complete message, remove SRUNAM entry
.LOOP2F  ANOP
         AIF   (&SP_SRXREF).LOOP2NC
&CT      SETC  (3)' '.'&BXA_SRUCT(&J)' * Prefix blanks to count
&CT      SETC  '&CT'(K'&CT-2,*)        * Make a 3-digit number
&LIN     SETC  '&LIN'.'  Call count: &CT'
.LOOP2NC ANOP  ,                       * No count on full Xref
&LIN     SETC  '&LIN'.'  &BXA_SRDTYP(&I).ernal subroutine'
&BXA_SRUNAM(&J) SETC ''                * Remove reported UNAM entry
         AGO   .LOOP2OK                * And go put line into array
.* Not found: issue partial message
.LOOP2NF ANOP
         AIF   (&BXA_SRDDUP(&I)).LOOP2DUP * Duplicate subroutine name?
         AIF   (K'&BXA_SRDTYP(&I) LT 5).LOOP2NR * No ESTAE normal unref
         AIF   ('&BXA_SRDTYP(&I)'(1,5) EQ 'ESTAE').LOOP2EST * ESTAE ?
         AIF   ('&BXA_SRDTYP(&I)'(1,5) EQ 'RETRY').LOOP2RET * RETRY ?
.LOOP2NR ANOP  ,                       * Not referenced
&LIN     SETC  '&LIN'.' *Unreferenced internal subroutine'
&LVL     SETC  '4'                     * Set warning level
         AGO   .LOOP2OK                * And go put line into array
.LOOP2EST ANOP
&LIN     SETC  '&LIN'.' *ESTAE routine'
         AGO   .LOOP2OK                * And go put line into array
.LOOP2RET ANOP
&LIN     SETC  '&LIN'.' *RETRY routine'
         AGO   .LOOP2OK                * And go put line into array
.LOOP2DUP ANOP
&LIN     SETC  '&LIN'.' *Duplicate definition'
&LVL     SETC  '8'                     * Set error level
.* &LIN completed: put into array LINE, then continue
.LOOP2OK ANOP
&L       SETA  &L+1                    * Point to next line entry
&LINE(&L) SETC '&LIN'                  * Put line into array
&LEVEL(&L) SETC '&LVL'                 * Put msg level into array
         AGO   .LOOP1                  * And go process next entry
.LOOP1OK ANOP  ,                       * &I now points to free entry
.*
.* Condense BXA_SRUNAM and BXA_SRUCT
&I       SETA  0                       * Index into BXA_UNAM
&J       SETA  0                       * Nr of valid entries
.LOOP3   ANOP
&I       SETA  &I+1                    * Point next UNAM-entry
         AIF   (&I GT N'&BXA_SRUNAM).LOOP3OK * End loop
         AIF   ('&BXA_SRUNAM(&I)' EQ '').LOOP3 * Skip empty entry
&J       SETA  &J+1                    * Increment valid entry count
         AIF   (&I EQ &J).LOOP3        * No move req'd, process next
&BXA_SRUNAM(&J) SETC '&BXA_SRUNAM(&I)' * Move UNAM-entry
&BXA_SRUCT(&J) SETA &BXA_SRUCT(&I)     * Move UCT-entry
         AGO   .LOOP3                  * And go process next entry
.LOOP3OK ANOP
.*
.* Add undefined subroutines to LINE array
         AIF   (&J EQ 0).LOOP4OK       * If empty skip loop
&I       SETA  0                       * Init for loop
.LOOP4   ANOP
&I       SETA  &I+1                    * Index next entry
         AIF   (&I GT &J).LOOP4OK      * End loop
&LIN     SETC  '&BXA_SRUNAM(&I)'       * Put name into print-line
&LIN     LABEL H                       * Missing subroutine name
&LIN     SETC  '&LIN'.(64)' '          *  add trailing blanks
&LIN     SETC  '&LIN'(1,&BXA_SRNAML)   *  and trunc. to desired length
&LIN     SETC  '&LIN'.' *Undefined'
&L       SETA  &L+1                    * Point to next line entry
&LINE(&L) SETC '&LIN'                  * Put line into array
&LEVEL(&L) SETC '8'                    * Set error severity
         AGO   .LOOP4                  * And go process next entry
.LOOP4OK ANOP
.*
.* To sort the LINE-array all lines must have equal lengths
&I       SETA  0
.LOOP5   ANOP
&I       SETA  &I+1                    * Point to next LINE
         AIF   (&I GT &L).LOOP5OK      * End of LINE array
         AIF   (K'&LINE(&I) LE &LINE_LEN).LOOP5 * This line longer?
&LINE_LEN SETA K'&LINE(&I)             * Yes: set new max. length
         AGO   .LOOP5                  * And go process next LINE
.LOOP5OK ANOP
&I       SETA  0
.LOOP6   ANOP
&I       SETA  &I+1                    * Point to next LINE
         AIF   (&I GT &L).LOOP6OK      * End of LINE array
         AIF   (K'&LINE(&I) GE &LINE_LEN).LOOP6 * This line too short?
&J       SETA  &LINE_LEN-K'&LINE(&I)   * Nr of missing characters
&LINE(&I) SETC '&LINE(&I)'.(&J)' '     * Append missing blanks
         AGO   .LOOP6                  * And go process next LINE
.LOOP6OK ANOP
.*
.* Sort LINE/LEVEL arrays
.* S0 points to first unsorted element in LINE
.* S1 points to last unsroted element in LINE
.* S2 contains the last swapped element this pass
         AIF   (&L LT 2).LOOP7OK       * <2 elements: no need to sort
&S2      SETA  &L                      * End of unsorted part
.LOOP7   ANOP  ,                       *** DO UNTIL (S2 = 0)
         AIF   (&S2 EQ 0).LOOP7OK      * Sort completed?
&I       SETA  0                       * Point before first unsorted
&J       SETA  1                       *   and following indices
&S1      SETA  &S2                     * Point to last unsorted element
&S2      SETA  0                       * Reset new end-of-sort pointer
.LOOP8   ANOP  ,                       *** FOR I = S0 to S1-1
&I       SETA  &I+1                    * Point to next unsorted
&J       SETA  &J+1                    *   element indices
         AIF   (&J GT &S1).LOOP8OK     * End of inner loop?
         AIF   ('&LINE(&I)' LT '&LINE(&J)').LOOP8
&LIN     SETC  '&LINE(&I)'             * Swap
&LINE(&I) SETC '&LINE(&J)'             *  the two
&LINE(&J) SETC '&LIN'                  *   lines
&LVL     SETC  '&LEVEL(&I)'            * Swap
&LEVEL(&I) SETC '&LEVEL(&J)'           *  the two
&LEVEL(&J) SETC '&LVL'                 *   level-values
&S2      SETA  &I                      * Set last-swapped index
         AGO   .LOOP8                  * Go process next set of entries
.LOOP8OK ANOP
         AGO   .LOOP7                  * Go start next pass
.LOOP7OK ANOP
.*
.* Create overview from LINE-array
         AIF   (NOT &SP_SRLIST).LOOP9IN * No listing: suppress header
         AIF   (&L EQ 0).SRLIST0       * Notify programmer: no subrs
.* EJECT statement removed: RETRN ends with an EJECT
         MNOTE 0,'Subroutine usage overview'
         AGO   .LOOP9IN
.SRLIST0 ANOP
         MNOTE 0,'No subroutines in program &SYSIN_MEMBER'
         AGO   .LOOP9OK                * Skip loop for lack of subrs
.*
.LOOP9IN ANOP  ,                       *
         ACTR  256*&L+2*&L*&L*&L       * Set ACTR counter
&I       SETA  0                       * Use as index into LINE
.LOOP9   ANOP  ,                       *
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &L).LOOP9OK      * End of loop
         AIF   ('&LEVEL(&I)' EQ '*').LOOP9A * Handle asterisk separate
         MNOTE &LEVEL(&I),'&LINE(&I)'  * Issue subr message
         AGO   .LOOP9XR                * Go process next entry
.LOOP9A  ANOP
         AIF   (NOT &SP_SRLIST).LOOP9XR * Skip info-msg if SRLIST off
         MNOTE *,'     &LINE(&I)'      * Issue subr message
         AGO   .LOOP9XR                * Go process next entry
.*
.* Create cross reference lines with invoking subroutines
.LOOP9XR ANOP
&LIN     SETC  '&LINE(&I)'(1,&BXA_SRNAML) * Extract subroutine name
&J       SETA  0                       * Loop-index in BXA_SR_CALLED
&C       SETA  0                       * Ptr last entry CALLERS/CALLCT
.LOOPA   ANOP
&J       SETA  &J+1                    * Point next XREF entry
         AIF   (&J GT N'&BXA_SR_CALLED).LOOPAOK * end of XREF tables
         AIF   ('&LIN' NE '&_CALLED(&J)').LOOPA * Unequal: skip entry
.* Do not add duplicates to CALLERS
&D       SETA  0                       * &D indexes into CALLERS
.LOOPB   ANOP
&D       SETA  &D+1                    * Point next CALLERS entry
         AIF   (&D GT &C).LOOPBAD      * Not found: go add entry
         AIF   ('&_CALLER(&J)' NE '&CALLERS(&D)').LOOPB * Cont. search
&CALLCT(&D) SETA &CALLCT(&D)+1         * Increment occurrence count
         AGO   .LOOPBOK                * and we're done
.LOOPBAD ANOP  ,                       * Add an entry to CALLERS
&C       SETA  &C+1                    * Point next entry
&CALLERS(&C) SETC '&_CALLER(&J)'       * Copy calling subr. name
&CALLCT(&C) SETA 1                     * Occurrence count starts at 1
.LOOPBOK ANOP
         AGO   .LOOPA                  * Go process next XREF entry
.LOOPAOK ANOP
.*
.* Do not issue Cross reference line messages if &SP_SRXREF is off
         AIF   (NOT &SP_SRXREF).LOOPCOK * Skip the whole thing
&J       SETA  0                       * &J indexes CALLERS
.LOOPC   ANOP  ,                       * Create invokation XREF lines
&J       SETA  &J+1                    * Point next entry
         AIF   (&J GT &C).LOOPCOK      * End of CALLERS array
         AIF   (&J EQ 1).LOOPC1        * First line: extra info
&LIN     SETC  '            &CALLERS(&J)' * Create standard line
         AGO   .LOOPC2
.LOOPC1  ANOP
&LIN     SETC  'Called by : &CALLERS(&J)' * Create line with extra text
.LOOPC2  ANOP
&LIN     SETC  (&BXA_SRNAML+7)' '.'&LIN' * Left-adjust line in overview
         AIF   (&CALLCT(&J) EQ 1).LOOPCNC * No count needed
&CT      SETC  (3)' '.'&CALLCT(&J)'    * Prefix blanks to count
&CT      SETC  '&CT'(K'&CT-2,*)        * Make a 3-digit number
&LIN     SETC  '&LIN &CT times'        * Add call count
.LOOPCNC ANOP
         MNOTE *,'&LIN'                * Issue XREF-line
         AGO   .LOOPC
.LOOPCOK ANOP
.*
.* CALLCT will now contain the invoker level: Set to 1 for all entries
&J       SETA  0                       * &J indexes CALLERS
.LOOPD   ANOP  ,                       *
&J       SETA  &J+1                    * Point next entry
         AIF   (&J GT &C).LOOPDOK      * End of CALLERS array
&CALLCT(&J) SETA 1                     * Nesting level is 1
         AGO   .LOOPD                  * And repeat for all entries
.LOOPDOK ANOP
.*
.* Determine the maximum nesting level for this subroutine
.* Put all invokers of all invokers into array CALLERS, keep the
.* invocation level count in CALLCT. Do not re-examine current subr.
&RECURSE SETB  0                       * This routine not recursive
&LVLUP   SETB  0                       * No subrs increased in level
&LIN     SETC  '&LINE(&I)'(1,&BXA_SRNAML) * Extract subroutine name
&J       SETA  0
.LOOPE   ANOP  ,                       * Search XREF for callers
&J       SETA  &J+1                    * Point next CALLERS entry
         AIF   (&J GT &C).LOOPEOK      * Array CALLERS now complete
         AIF   ('&LIN' EQ '&_MAIN').LOOPE * Skip *MAIN: not a subr!
         AIF   ('&LIN' EQ '&CALLERS(&J)').LOOPERC * Recursion!
.* Find all callers of this caller, add them to CALLERS, unless double
&CALLER  SETC  '&CALLERS(&J)'          * Name of invoking routine
&D       SETA  0                       * &D now indexes XREF arrays
.LOOPF   ANOP
&D       SETA  &D+1                    * Point to next set of entries
         AIF   (&D GT N'&BXA_SR_CALLED).LOOPFOK * End of XREF
         AIF   ('&CALLER' NE '&_CALLED(&D)').LOOPF * No match: next
.* &_CALLER(&D) is a caller of the current CALLER
&E       SETA  0                       * &E now indexes CALLERS
.LOOPG   ANOP
&E       SETA  &E+1                    * Point to next CALLERS-entry
         AIF   (&E GT &C).LOOPGAD      * End of CALLERS
         AIF   ('&_CALLER(&D)' NE '&CALLERS(&E)').LOOPG * Skip
.* Found matching entry: check invocation level
&NESTLVL SETA  &CALLCT(&J)+1           * Determine nesting level
         AIF   (&NESTLVL LE &CALLCT(&E)).LOOPGOK
&CALLCT(&E) SETA &NESTLVL              * Set new nesting level
         AIF   (&E GT &J).LOOPGOK      * Unprocessed entry: proceed
&LVLUP   SETB  1                       * Signal a redo is req'd
         AGO   .LOOPGOK
.LOOPGAD ANOP  ,                       * Add new entry to CALLERS
&C       SETA  &C+1                    * Point to next empty entry
&CALLERS(&C) SETC '&_CALLER(&D)'       * Add caller to CALLER
&NESTLVL SETA  &CALLCT(&J)+1           * Determine nesting level
&CALLCT(&C) SETA &NESTLVL              * Set caller's nesting level
.LOOPGOK ANOP
         AGO  .LOOPF                   * Process next XREF entry
.LOOPFOK ANOP
         AGO  .LOOPE                   * Process next CALLERS entry
.LOOPERC ANOP  ,                       * Recursion detected!
&RECURSE SETB  1                       * Signal recursion
         AGO   .LOOPE
.LOOPEOK ANOP
.*
.* Loop thru CALLCT to determine highest invocation level number
&NESTLVL SETA  0                       *
&J       SETA  0                       *
.LOOPH   ANOP
&J       SETA  &J+1                    * Point to next CALLCT entry
         AIF   (&J GT &C).LOOPHOK      * End of CALLCT array
         AIF   (&CALLCT(&J) LE &NESTLVL).LOOPH
&NESTLVL SETA  &CALLCT(&J)             * Copy higher value
         AGO   .LOOPH
.LOOPHOK ANOP
.*
.* If some routine was increased in level after being processed:
.*    redo from init LOOPE, unless recursion prevents this
         AIF   (&LVLUP AND &NESTLVL LT &C).LOOPDOK
.*
.* Now we're back in our outer loop (Varying &I over &LINES array)
.* If routine is recursive, flag the program as recursive and issue
.* an additional message for the overview
         AIF   (NOT &RECURSE).LOOP9NR  * Check recursion status
&PGM_REC SETB  1                       * Recursion found in pgm
         AIF   (NOT &SP_SRLIST).LOOP9NR * Skip message if NOSRLIST
         MNOTE *,'     &LIN -May be entered recursively'
.LOOP9NR ANOP
.*
.* For each caller in the CALLERS array, the type of subroutine needs
.* to be determined from the BXA_SRDTYP array, therefore each name must
.* be looked up in the associated BXA_SRDNAM array. When we have the
.* the type we can look it up in the SR_TYP table, to locate the
.* associated entry in the SR_NEST table. The nesting level in the
.* SR_NEST will be updated if it is less than the value in the CALLCT
.* entry, associated with the CALLERS entry we are processing.
.* This way, we create - at program level - the maximum invocation
.* level for each type of subroutine.
.*
.* First we must add an entry in CALLERS/CALLCT for the current subr
&C       SETA  &C+1
&CALLERS(&C) SETC '&LINE(&I)'(1,&BXA_SRNAML) * Subroutine name
&CALLCT(&C) SETA 1                     * Value depends on type
.*
&J       SETA  0                       * Index into CALLERS/CALLCT
.LOOPM   ANOP  ,                       * Process all CALLERS
&J       SETA  &J+1                    * Point next entry
         AIF   (&J GT &C).LOOPMOK      * End: quit loop
&CALLER  SETC  '&CALLERS(&J)'          * Extract name of subroutine
.*
.* Find the routine in BXA_SRDNAM to determine the type of subroutine
         AIF   ('&CALLER' EQ '&_MAIN').LOOPNNF * *MAIN not in SRDNAM
&D       SETA  0                       * Index into SRDNAM/SRDTYP
.LOOPN   ANOP
&D       SETA  &D+1                    * Point next entry
         AIF   (&D GT N'&BXA_SRDNAM).LOOPNNF * End: not found
         AIF   ('&BXA_SRDNAM(&D)' NE '&CALLER').LOOPN * Continue search
&SRTYP   SETC  '&BXA_SRDTYP(&D)'       * Found: copy subroutine type
         AGO   .LOOPNOK                *
.LOOPNNF ANOP  ,                       * Name not found:
&SRTYP   SETC  'INT'                   * Default to normal subroutine
.LOOPNOK ANOP
.*
.* Now we must locate SRTYP in the SR_TYP table, to update the maximum
.* nesting level in the corresponding SR_NEST table entry
&D       SETA  0                       * D indexes SR_TYP/SR_NEST
.LOOPO   ANOP  ,                       *
&D       SETA  &D+1                    * Point next entry
         AIF   (&D GT N'&SR_TYP).LOOPONF * End: not found
         AIF   ('&SR_TYP(&D)' NE '&SRTYP').LOOPO * Continue search
.LOOPOF  ANOP  ,                       * Found entry &D
         AIF   (&CALLCT(&J) LE &SR_NEST(&D)).LOOPOOK
&SR_NEST(&D) SETA &CALLCT(&J)          * Set new (higher) value
         AGO   .LOOPOOK                *
.LOOPONF ANOP  ,                       * Subroutine type not found
&SR_TYP(&D)  SETC '&SRTYP'             * &D points to empty entry
&SR_NEST(&D) SETA &CALLCT(&J)          * Create new entry
.LOOPOOK ANOP
.*
         AGO   .LOOPM                  * Go process next CALLER
.LOOPMOK ANOP
.*
         AGO   .LOOP9                  * Go process next LINE
.LOOP9OK ANOP  ,                       *
         ACTR  4096                    * Reset ACTR value
.*
.* Determine total nesting level by adding the several types
&INT_MAX SETA  0                       * Max. nestlvl for internal
&EXT_MAX SETA  0                       * Max. nestlvl for external
&NESTMAX SETA  0                       * Max. subroutine nesting level
&J       SETA  0                       * J indexes SR_TYP/SR_NEST
.LOOPP   ANOP  ,                       *
&J       SETA  &J+1                    * Point next entry
         AIF   (&J GT N'&SR_TYP).LOOPPOK * End: quit loop
&LIN     SETC  '&SR_TYP(&J)'           * Copy type of routine
         AIF   ('&LIN' EQ 'INT').LOOPPINT * Save INTernal max level
         AIF   ('&LIN' EQ 'EXT').LOOPPEXT * Save external routines
         AIF   ('&LIN' EQ 'RETRY').LOOPPD * First RETRY needs no SA
         AIF   (K'&LIN LT 2).INTERR    * Should be ESTAEn
&LIN     SETC  '&LIN'(1,K'&LIN-1)      * Clip level nr off
         AIF   ('&LIN' EQ 'ESTAE').LOOPPI * Increment by one
.INTERR  MNOTE 12,'Internal error: &LIN unknown subroutine type'
         AGO   .LOOPPAD                *
.*
.LOOPPINT ANOP
&INT_MAX SETA  &SR_NEST(&J)
         AGO   .LOOPP
.LOOPPEXT ANOP
&EXT_MAX SETA  &SR_NEST(&J)
         AGO   .LOOPP
.*
.LOOPPI  ANOP  ,                       * Increment by one for
&SR_NEST(&J) SETA &SR_NEST(&J)+1       * ESTAE routines need 1 SA extra
         AGO   .LOOPPAD                * Go add to total nestlevel
.LOOPPD  ANOP  ,                       * Decrement count by one for
&SR_NEST(&J) SETA &SR_NEST(&J)-1       *   RETRY routines need no SA
.*
.LOOPPAD ANOP  ,                       * Add adjusted count to total
&NESTMAX SETA  &NESTMAX+&SR_NEST(&J)   * Add to total nest level
         AGO   .LOOPP                  * and process next entry
.LOOPPOK ANOP  ,                       *
.*
.* Add the greater value of INT_MAX and EXT_MAX
         AIF   (&INT_MAX GT &EXT_MAX).ADDINT
&NESTMAX SETA  &NESTMAX+&EXT_MAX       * Add external count to max.
         AGO   .CHKNLVL                * And go check nesting level
.ADDINT  ANOP
&NESTMAX SETA  &NESTMAX+&INT_MAX       * Add internal count to max.
.CHKNLVL ANOP
.*
.* Issue message if Internal save-areas inadequate.
         AIF   (NOT &PGM_REC AND &NESTMAX GT &BXA_SAVES).MSG1
         AIF   (NOT &PGM_REC AND &NESTMAX LT &BXA_SAVES).MSG2
         AIF   (&PGM_REC AND &NESTMAX GT &BXA_SAVES).MSG3
         AIF   (&PGM_REC AND &NESTMAX LE &BXA_SAVES).MSG4
         AGO   .NOMSG
.MSG1    MNOTE 8,'Insufficient internal save-areas; at least &NESTMAX a*
               re required'
         AGO   .NOMSG
.MSG2    MNOTE 4,'Too many internal save-areas; only &NESTMAX are requi*
               red'
         AGO   .NOMSG
.MSG3    MNOTE 8,'Insufficient internal save-areas, apart from recursio*
               n &NESTMAX at least are required'
         AGO   .NOMSG
.MSG4    MNOTE 0,'Do you have sufficient internal save-areas; apart fro*
               m recursion &NESTMAX at least are required'
.NOMSG   ANOP
.*
.* End assembly
         AIF   (K'&EP EQ 0).NO_EP
         _END  &EP
         MEXIT
.*
.NO_EP   ANOP
         _END
.*
.MEND    MEND
./ ADD NAME=ENDCASE  0100-20096-20096-0111-00149-00149-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: ENDCASE
.* Combines with CASE and ELSE to conditionally execute blocks of code
.*
&LABEL   ENDCASE ,                     * No arguments allowed
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC ENDCASE                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_LBL(5)         * Labels
         GBLA  &BXA_STK_LVL(5)         * Levels
         LCLC  &OP                     * Last opcode on stack
         LCLA  &LVL                    * Last level on stack
         LCLC  &LBL                    * Last label on stack
         LCLA  &I                      * Stack pointer
.*
.* Check label parameter
         AIF   (K'&LABEL EQ 0).NOERR1
.ERR1    MNOTE 4,'Label ignored'
.NOERR1  ANOP
.*
.* Check nr of parameters
         AIF   (N'&SYSLIST EQ 0).NOERR2
         AIF   (K'&SYSLIST(1) GT 0).ERR2A
         AIF   (N'&SYSLIST EQ 1).NOERR2
         AIF   (K'&SYSLIST(2) GT 0).ERR2A
         AIF   (N'&SYSLIST EQ 2).NOERR2
.ERR2A   MNOTE 4,'No arguments expected: ignored'
.NOERR2  ANOP
.*
.* Check that current stack-entry designates a case or else-block
&I       SETA  &BXA_STK                * Copy stack pointer
         AIF   (&I LT 1).ERR3A         * Stack underflow
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack
         AIF   ('&OP' EQ 'CASE').NOERR3
         AIF   ('&OP' NE 'ELSE').ERR3B
&I       SETA  &I-1                    * Point preceding entry
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract preceding opcode
         AIF   ('&OP' NE 'CASE').ERR3C
         AGO   .NOERR3
.ERR3A   MNOTE 8,'No preceding CASE statement: ignored'
         MEXIT
.ERR3B   MNOTE 8,'Cannot use ENDCASE to terminate a &OP.-block: ignored*
               '
         MEXIT
.ERR3C   MNOTE 8,'Cannot use ENDCASE to terminate an ELSE block for &OP*
               '
         MEXIT
.NOERR3  ANOP
.*
.* Remove all stack entries with the current nesting level
.* If an ELSE-statement precedes this ENDCASE, then the ELSE has
.* already generated the target label of the last preceding CASE
.* statement.
.*
.* Comment line to delimit the ELSE-block
*
.*
.* Set up to loop thru CASE-entries
.* If last entry was ELSE, handle the ELSE before entering the loop
&I       SETA  &BXA_STK                * Point current stack entry
&LVL     SETA  &BXA_STK_LVL(&I)        * Extract current nesting level
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract last opcode
         AIF   ('&OP' NE 'ELSE').LOOP1 * Loop to drop CASEs
.* Terminate ELSE-block
&LBL     SETC  '&BXA_STK_LBL(&I)'      * Extract end-of-else label
&LBL     LABEL ,                       * End of ELSE-block
&I       SETA  &I-2                    * Remove ELSE and last CASE
         AIF   (&I EQ 0).LOOP1OK       * If nothing left: skip loop
.*
.* Now loop to terminate all remaining CASE-blocks of this level
.LOOP1   ANOP  ,
         AIF   (&BXA_STK_LVL(&I) NE &LVL).LOOP1OK * LVL-change: endloop
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract last opcode
         AIF   ('&OP' NE 'CASE').INTERR * Internal error
&LBL     SETC  '&BXA_STK_LBL(&I)'      * Extract end-of-else label
&LBL     LABEL ,                       * End of CASE-block
&I       SETA  &I-1                    * Remove ELSE-entry from stack
         AIF   (&I GT 0).LOOP1         * If still valid: remove next
.LOOP1OK ANOP  ,
.*
.* Update the real stack pointer
&BXA_STK SETA  &I
         AGO   .MEND
.*
.INTERR  ANOP  ,
         MNOTE 12,'Internal error in ENDCASE macro'
.*
.MEND    MEND
./ ADD NAME=ENDDO    0100-20096-20096-0111-00170-00170-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: ENDDO
.* Combines with DO WHILE/UNTIL to repeatedly execute a block of code
.*
&LABEL   ENDDO ,                       * No arguments allowed
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC ENDDO                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_DO(5)          * DO labels
         GBLC  &BXA_STK_LBL(5)         * Forward Labels
         GBLC  &BXA_STK_CND(5)         * Conditions
         GBLC  &BXA_STK_CLB(5)         * Condition labels
         GBLC  &BXA_STK_USE(5)         * USEd count registers
         LCLC  &OP                     * Last opcode on stack
         LCLC  &LBL                    * Last label on stack
         LCLC  &CND                    * Last Condition on stack
         LCLC  &CLB                    * Last Condition label on stack
         LCLC  &USE                    * Last USEd register on stack
         LCLC  &DO                     * Loopback-label
         LCLA  &I                      * Stack pointer
.*
.* Check label parameter
         AIF   (K'&LABEL EQ 0).NOERR1
.ERR1    MNOTE 4,'Label ignored'
.NOERR1  ANOP
.*
.* Check nr of parameters
         AIF   (N'&SYSLIST EQ 0).NOERR2
         AIF   (K'&SYSLIST(1) GT 1).ERR2
         AIF   (N'&SYSLIST EQ 1).NOERR2
         AIF   (K'&SYSLIST(2) GT 1).ERR2
         AIF   (N'&SYSLIST EQ 2).NOERR2
.ERR2    MNOTE 4,'No arguments expected: ignored'
.NOERR2  ANOP
.*
.* Check that current stack-entry designates a valid DO-type operation
&I       SETA  &BXA_STK                * Copy stack pointer
         AIF   (&I LT 1).ERR3A         * Stack underflow
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack
&LBL     SETC  '&BXA_STK_LBL(&I)'      * and end-of-block label
&DO      SETC  '&BXA_STK_DO(&I)'       * Loopback label
&CND     SETC  '&BXA_STK_CND(&I)'      * Condition
&CLB     SETC  '&BXA_STK_CLB(&I)'      * Condition label
&USE     SETC  '&BXA_STK_USE(&I)'      * USEd label
         AIF   ('&OP' EQ 'DO').DO
         AIF   ('&OP' EQ 'DOWHILE').DOWHILE
         AIF   ('&OP' EQ 'DOUNTIL').DOUNTIL
         AIF   ('&OP' EQ 'DOCOUNT').DOCOUNT
         AGO   .ERR3B
.ERR3A   MNOTE 8,'No preceding DO statement: ignored'
         MEXIT
.ERR3B   MNOTE 8,'Cannot use ENDDO to terminate a &OP.-block: ignored'
         MEXIT
.NOERR3  ANOP
.*
.* Generate code for ENDDO after DO WHILE
.* Loopback-label to WHILE condition is in BXA_STK_DO
.* End-of-loop-label (used when WHILE cond. is false) in BXA_STK_LBL
.*
.DOWHILE ANOP  ,
         B     &DO                     * Back to end-of-loop test
&LBL     LABEL ,                       * End of DO WHILE loop
         AGO   .UNSTACK
.*
.* Generate code for ENDDO after DO COUNT
.* Loopback-label to DO UNTIL is in BXA_STK_DO
.* Loop counter register is in BXA_STK_CND
.* END-of-loop label is in BXA_STK_LBL
.*
.DOCOUNT ANOP  ,                       *
&CLB     BCT   &CND,&DO                * Loop until count reaches zero
         AIF   (K'&LBL EQ 0).NOLBL     *
&LBL     LABEL ,                       * End of do-loop
.NOLBL   ANOP  ,                       *
         AIF   (K'&USE EQ 0).UNSTACK   *
         DROP  &USE                    * Count reg no longer needed
         AGO   .UNSTACK                *
.*
.* Generate code for ENDDO after DO UNTIL
.* Loopback-label to DO UNTIL is in BXA_STK_DO
.* End-of-loop-condition is in BXA_STK_CND
.* END-of-loop label is in BXA_STK_LBL
.*
.DOUNTIL ANOP  ,
&CLB     GOTO  &DO,UNLESS,&CND         * Loop until condition met
         AIF   (K'&LBL EQ 0).UNSTACK   *
&LBL     LABEL ,                       * End of do-loop
         AGO   .UNSTACK                *
.*
.* Generate code for ENDDO after DO
.* Loopback-label to DO UNTIL is in BXA_STK_DO
.* End-of-loop-condition is non-existent
.* END-of-loop label is in BXA_STK_LBL
.*
.DO      ANOP  ,
         B     &DO                     * Repeat loop
.*
.* If &LBL is empty, no LEAVE macro exits from this loop: Error!
         AIF   (K'&LBL NE 0).NOERR4
.ERR4A   MNOTE 8,'No LEAVE macro found to terminate this loop'
.NOERR4  ANOP  ,
.*
&LBL     LABEL ,                       * End of do-loop
.*
.* Remove DO-entry from stack
.UNSTACK ANOP  ,
&BXA_STK SETA  &BXA_STK-1
.*
.MEND    MEND
./ ADD NAME=ENDIF    0100-20096-20096-0111-00116-00116-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: ENDIF
.* Combines with IF and ELSE to conditionally execute blocks of code
.*
&LABEL   ENDIF ,                       * No arguments allowed
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC ENDIF                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_LBL(5)         * Labels
         LCLC  &OP                     * Last opcode on stack
         LCLC  &LBL                    * Last label on stack
         LCLA  &I                      * Stack pointer
.*
.* Check label parameter
         AIF   (K'&LABEL EQ 0).NOERR1
.ERR1    MNOTE 4,'Label ignored'
.NOERR1  ANOP
.*
.* Check nr of parameters
         AIF   (N'&SYSLIST EQ 0).NOERR2
         AIF   (K'&SYSLIST(1) GT 1).ERR2
         AIF   (N'&SYSLIST EQ 1).NOERR2
         AIF   (K'&SYSLIST(2) GT 1).ERR2
         AIF   (N'&SYSLIST EQ 2).NOERR2
.ERR2    MNOTE 4,'No arguments expected: ignored'
.NOERR2  ANOP
.*
.* Check that current stack-entry designates a then or else-block
&I       SETA  &BXA_STK                * Copy stack pointer
         AIF   (&I LT 1).ERR3A         * Stack underflow
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack
&LBL     SETC  '&BXA_STK_LBL(&I)'      * and end-of-block label
         AIF   ('&OP' EQ 'IF').NOERR3
         AIF   ('&OP' NE 'ELSE').ERR3B
&I       SETA  &I-1                    * Point preceding stack entry
         AIF   ('&BXA_STK_OP(&I)' EQ 'IF').NOERR3 * ELSE after IF
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract preceding opcode
         AGO   .ERR3B
.ERR3A   MNOTE 8,'No preceding IF statement: ignored'
         MEXIT
.ERR3B   MNOTE 8,'Cannot use ENDIF to terminate a &OP.-block: ignored'
         MEXIT
.NOERR3  ANOP
.*
.* Generate code and remove stack entry/entries
         AIF   ('&OP' EQ 'ELSE').ELSE
&BXA_STK SETA  &BXA_STK-1              * Remove IF-entry
&LBL     LABEL ,                       * End of then-logic
         MEXIT
.*
.ELSE    ANOP  ,
&BXA_STK SETA  &BXA_STK-2              * Remove IF and ELSE entries
&LBL     LABEL ,                       * End of else-logic
.*
.MEND    MEND
./ ADD NAME=ENDSR    0100-20096-20096-0111-00283-00283-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates code to end a subroutine
.*
&LABEL   ENDSR &RC=0,                  * Returncode, (reg) or *        *
               &KEEPREG=               * Registers NOT to be restored
.*
.* &RC  Specifies the returncode. If not specified, defaults to 0.
.*      If specified as *, the value in R15 will be used.
.* &KEEPREG specifies a register or a list of registers that are not
.*          to be restored upon return. The values of these registers
.*          will be passed back to the caller.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC ENDSR                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &_REG                   * Register in &RC=(reg)
         LCLA  &_REGNO                 * Register nr in &RC=(reg)
         LCLA  &I                      * Index for &KEEPREG
         LCLC  &_KR                    * 1 register to keep
         LCLB  &_KEEP(16)              * register 0-15 keep Y/N
         LCLA  &J                      * Index for &_KEEP
         GBLC  &BXA_SUBR               * Name of current subroutine
         GBLC  &BXA_SUBRTP             * Type of current subroutine
         GBLB  &BXA_PGM                * PGM expanded Yes/No
         GBLB  &SP_SHOWALL             * SYSPARM option
         GBLC  &SYSASCE                * Current ASC mode
         GBLA  &BXA_NUMVAL             * Return value from CHKREG
         GBLC  &BXA_USE_R12            * Start label of mainline
         GBLC  &BXA_WALAB              * Start label of dynamic area
.*
.* PGM must have been expanded
         AIF   (&BXA_PGM).NOERR0A
         MNOTE 8,'PGM-macro must be coded before using BEGSR/ENDSR'
.NOERR0A ANOP
.*
.* Check that the structured programming stack is empty
         CHK_STACK RESET=YES           *
.*
.* Check validity of RC parameter if in register notation
         AIF   ('&RC'(1,1) NE '(').NOERR1
         AIF   (N'&RC EQ 0).ERR1A
&_REG    SETC  '&RC(1)'
         AIF   (N'&RC GT 1).ERR1B
         AGO   .NOERR1B
.ERR1A   MNOTE 8,'No register specified in sublist of RC parameter'
         AGO   .NOERR1
.ERR1B   MNOTE 4,'More than 1 register specified in sublist of RC param*
               eter'
.NOERR1B ANOP  ,
         CHKREG &_REG,g
         AIF   (&BXA_RC GT 4).ERR1C
&_REGNO  SETA  &BXA_NUMVAL             * Save nr of register
         AGO   .NOERR1
.ERR1C   ANOP  ,
&_REG    SETC  (DOUBLE '&_REG')
         MNOTE 8,'&_REG is not a valid general purpose register'
.NOERR1  ANOP  ,
.*
.* Check validity of KEEPREG parameter
         AIF   (K'&KEEPREG EQ 0).NOERR2
         AIF   ('&KEEPREG'(1,1) EQ '(').CHKERR2A
&_KR     SETC  '&KEEPREG'
&I       SETA  1
         AGO   .ERR2CHK
.CHKERR2A ANOP
         AIF   (N'&KEEPREG EQ 0).ERR2A
&I       SETA  1
         AIF   (N'&KEEPREG EQ 1).ERR2B
.ERR2LOOP ANOP
&_KR     SETC  '&KEEPREG(&I)'
.ERR2CHK ANOP
         CHKREG &_KR,g                 * Valid register?
         AIF   (&BXA_RC GT 4).ERR2F    * No: issue error
         AIF   (&BXA_NUMVAL EQ 15).ERR2C
         AIF   (&BXA_NUMVAL EQ 14).ERR2D
         AIF   (&BXA_NUMVAL EQ 13).ERR2E
         AIF   (&BXA_NUMVAL NE 0 AND '&BXA_SUBRTP' EQ 'ESTAE').ERR2G
&J       SETA  &BXA_NUMVAL+1           * Index zero invalid
&_KEEP(&J) SETB 1                      * Set keep-indicator on
.*
.ERR2NEXT ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&KEEPREG).NOERR2
         AGO   .ERR2LOOP
.*
.ERR2A   MNOTE 4,'No entries in KEEPREG-list'
         AGO   .NOERR2
.ERR2B   MNOTE 4,'Only 1 entry in KEEPREG-list'
         AGO   .ERR2LOOP
.ERR2C   MNOTE 8,'Register 15 invalid in KEEPREG, use RC=*'
         AGO   .ERR2NEXT
.ERR2D   MNOTE 8,'Register 14 invalid in KEEPREG'
         AGO   .ERR2NEXT
.ERR2E   MNOTE 4,'Register 13 useless in KEEPREG, is always kept'
         AGO   .ERR2NEXT
.ERR2F   ANOP  ,
&_KR     SETC  (DOUBLE '&_KR')
         MNOTE 8,'&_KR is not a valid general purpose register'
         AGO   .ERR2NEXT
.ERR2G   MNOTE 8,'For ESTAE-type routines only R0 can be specified with*
                KEEPREG'
         AGO   .ERR2NEXT
.NOERR2  ANOP
.*
.* Check the current subroutine name
         AIF   ('&BXA_SUBR' NE '*MAIN').NOERR3
.ERR3    MNOTE 8,'ENDSR without preceding BEGSR'
.NOERR3  ANOP
.*
.* For RETRY-routines, no parameters should be specified
         AIF   ('&BXA_SUBRTP' NE 'RETRY').NOERR4
         AIF   ('&RC' EQ '0').NOERR4A
.ERR4A   MNOTE 4,'RC-parameter ignored for RETRY-routine'
.NOERR4A ANOP
         AIF   (K'&KEEPREG EQ 0).NOERR4
.ERR4B   MNOTE 4,'KEEPREG-parameter ignored for RETRY-routine'
.NOERR4  ANOP
.*
.* Check positional parameters
         AIF   (N'&SYSLIST EQ 0).NOERR5
         AIF   (K'&SYSLIST(1) NE 0).ERR5A
         AIF   (N'&SYSLIST EQ 1).NOERR5
         AIF   (K'&SYSLIST(2) NE 0).ERR5A
         AIF   (N'&SYSLIST EQ 2).NOERR5
.ERR5A   MNOTE 4,'No positional parameters expected: ignored'
.NOERR5  ANOP  ,                       *
.*
.* Generate code
&LABEL   LABEL
         AIF   ('&BXA_SUBRTP' EQ 'RETRY').RETRY
         AIF   ('&RC' EQ '*').RETCDOK
*
* Load returncode
         AIF   ('&RC'(1,1) EQ '(').REG
         AIF   ('&RC' EQ '0').RETCD0
.* Normal specification:
         LA    R15,&RC                 * Load returncode
         AGO   .RETCDOK
.* Returncode 0:
.RETCD0  ANOP
         CLEAR R15                     * Set returncode 0
         AGO   .RETCDOK
.* Returncode from register
.REG     ANOP
         AIF   ('&_REGNO' EQ '15').RETCDOK
         LR    R15,&_REG               * Load returncode
.RETCDOK ANOP  ,
*
* Find last internal save-area used
         LT    R14,SAVEINTU            * Point to last-used save-area
         ABND  Z                       * No save-area: Abend
INT      USE   SAVEAREA,R14            * Address save-area
         AIF   ('&SYSASCE' EQ 'P').AR14OK
         CLEAR AR14                    * AR-mode: set AR14 to primary
.AR14OK  ANOP  ,                       *
         LA    R0,&BXA_SUBR            * Point to routine's EPA
         C     R0,INT.SAVEHDR          * Correct?
         ABND  NE                      * If not: Abend
.*
.* If keepregs specified: save the registers to keep
         AIF   (K'&KEEPREG EQ 0).NOKEEP
&J       SETA  0                       * Index into &_KEEP
.KEEPLOOP ANOP
&J       SETA  &J+1                    * Point next entry
         AIF   (&J GE 13).NOKEEP       * Reg 13 and higher: invalid
         AIF   (NOT &_KEEP(&J)).KEEPLOOP * If off: do not save reg
&I       SETA  &J-1                    * Get register number
&_KR     SETC  'R'.'&I'                * This is the register name
         ST    &_KR,INT.SAVED&_KR      * Save register value in SA
         AGO   .KEEPLOOP               * And process next entry
.NOKEEP  ANOP
.*
         AIF   ('&BXA_SUBRTP' EQ 'ESTAE').ESTAE
*
* Restore registers: R14 now points to last-used internal SA
         MVC   SAVEINTU,INT.SAVEPREV   * Deactivate current SA
         LM    R0,R12,INT.SAVEDR0      * Restore Regs 0-12
*                                      * Register 13 remains unchanged
         L     R14,INT.SAVEDR14        * Restore Reg 14
*                                      * Register 15 retains retcd
         AGO   .DROPINT
.*
.ESTAE   ANOP
*
* Upon entry to this ESTAE routine 2 save areas have been allocated.
* These contain both a copy of the external save-area and the entry
* registers (R14-R2) to the ESTAE routine. See the BEGSR comments
* for details.
*
* R14 now points to last-used internal SA (INT.SAVEAREA)
         ST    R15,INT.SAVEDR15        * Save returncode
         MVC   INT.SAVEDR7,INT.SAVEPREV * R7 will be ptr to prev. SA
         LM    R14,R12,INT.SAVEDR14    * Restore registers
         DROP  ,                       * All USINGS invalid!
         LR    R13,R3                  * Reset to system SA (in SDWA)
INT      USE   SAVEAREA,R7             * R7 points to previous SA
OUR      USE   BXASAVE,R2              * R2 points to external SA
         AIF   ('&SYSASCE' EQ 'P').AR7OK
         CLEAR AR7                     * AR-mode: set AR7 to primary
         CPY   AR2,AR7                 *          and AR2 as well
.AR7OK   ANOP
         STM   R4,R6,OUR.SAVEPTRS      * Restore header of ext.SA
         MVC   OUR.SAVEDR14(15*L'SAVEDR14),INT.SAVEDR14 * Copy 15 regs *
                                         * to restore contents of extSA
         MVC   OUR.SAVEINTU,INT.SAVEPREV * Deactivate 2 int.SA's
.*
.DROPINT ANOP
         DROP  INT                     * R14 (SAVEAREA)
         BR    R14                     * Return to caller
         AGO   .DONE
.*
.RETRY   ANOP  ,                       *
         ABND  ,                       * Return by branch to resume adr
.*
.DONE    ANOP  ,                       *
         DROP  ,                       *
         USE   &BXA_USE_R12,R12        * Set code addressable
         USE   &BXA_WALAB,R13,         * Set workarea addressable      *
               START=&BXA_WALAB+SAVEPRFX_LEN
.*
&BXA_SUBR SETC '*MAIN'                 * Now we're in main code again
&BXA_SUBRTP SETC ''                    * Now we're in normal code again
.*
.MEND    MEND
./ ADD NAME=EPSW     0100-20096-20096-0111-00118-00118-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Extract current PSW
.*
&LABEL   EPSW  &REG                    * Register set to be used
.*
.* &REG  specifies an even register. The PSW will be placed in register
.*       &REG and &REG+1.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EPSW                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &_REG
         LCLC  &_REG1,&_REG2
         LCLA  &REGN
.*
.* Check the REG parameter
         AIF   (K'&REG EQ 0).ERR1A
&_REG    SETC  '&REG'
         AIF   ('&_REG'(1,1) NE '(').LAB1A * If enclosed in parentheses
&_REG    SETC  '&REG(1)'               * Remove parentheses
.LAB1A   ANOP
         AIF   ('&_REG'(1,1) NE 'R').LAB1B * If R...
&_REG    SETC  '&_REG'(2,*)            * Remove leading R
&_REG1   SETC  'R'
&_REG2   SETC  'R'
.LAB1B   ANOP
         AIF   ('&_REG' EQ '0').LAB1C
         AIF   ('&_REG' EQ '00').LAB1C
         AIF   ('&_REG' EQ '14').LAB1C
         AGO   .ERR1B
.LAB1C   ANOP
&_REG1   SETC  '&_REG1'.'&_REG'
&REGN    SETA  &_REG
&REGN    SETA  &REGN+1
&_REG2   SETC  '&_REG2'.'&REGN'
         AGO   .NOERR1
.ERR1A   MNOTE 8,'You should specify an even general purpose register'
         MEXIT
.ERR1B   MNOTE 8,'You can use only R0/R1 or R14/R15'
.NOERR1  ANOP
.*
.* Check the number of parameters
         AIF   (N'&SYSLIST GT 1).ERR2
         AGO   .NOERR2
.ERR2    MNOTE 4,'Too many parameters specified: ignored'
.NOERR2  ANOP
.*
.* Generate code
&LABEL   LA    &_REG2,_EPSW&SYSNDX     * Load internal return address
         LA    &_REG1,1                * Amode bit
         SLL   &_REG1,31               *   into bit 0
         OR    &_REG2,&_REG1           *   of the return address
         BAKR  &_REG2,R0               * Create stack entry (nobranch)
         LA    &_REG2,1                * Specifies PSW for ESTA
         ESTA  &_REG1,&_REG2           * Put PSW into registers
         PR    ,                       * Remove stack entry
_EPSW&SYSNDX LABEL ,                   *
.*
.MEND    MEND
./ ADD NAME=EQU      0100-20096-20096-0111-00316-00316-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's EQU statement
.*
&LABEL   EQU   &VALUE,                 * Value to be assigned          *
               &LEN,                   * Length attribute              *
               &TYPE                   * Type attribute
.*
.* &LABEL mandatory
.* &VALUE specifies the value to be assigned to &LABEL
.* &LEN   specifies an explicit length attribute
.* &TYPE  specifies an explicit type attribute
.*        IBM-assigned types are:
.*        $ - WXTRN symbol
.*        @ - Graphics field
.*        A - A-type address field
.*        B - Binary field
.*        C - Character field
.*        D - Long floating point field
.*        E - Short floating point field
.*        F - Fullword fixed-point field
.*        G - Fixed-point field, explicit length
.*        H - Halfword fixed-point field
.*        I - Machine instruction
.*        J - Control section name
.*        K - Floating point field, explicit length
.*        L - Extended floating point field
.*        M - Macro instruction
.*        N - Self-defining term
.*        O - Omitted operand
.*        P - Packed decimal field
.*        Q - Q-type address field
.*        R - Address field of type A, S, Q, V, Y, with explicit length
.*        S - S-type address field
.*        T - EXTRN symbol
.*        U - Undefined
.*        V - V-type address field
.*        W - CCW or CCWn instruction
.*        X - Hexadecimal field
.*        Y - Y-type address field
.*        Z - Zoned decimal field
.*        Bixoft-assigned types are:
.*        a - Access register
.*        b - Bit field
.*        c - Control register
.*        f - Floating point register
.*        g - General purpose register
.*        j - Embedded control block (DCL-declared)
.*        p - Pointer register
.*        v - Value assigned to a code field
.*        0 - Literal decimal number of unspecified type and length
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EQU                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_NUMVAL             * Return value from CHKLIT
         GBLA  &BXA_EQUOVR             * Ptr to last valid
         GBLC  &BXA_EQUOVR_LAB(50)     * Labels
         GBLC  &BXA_EQUOVR_VAL(50)     * Values
         GBLC  &BXA_EQUOVR_LEN(50)     * Lengths
         GBLC  &BXA_EQUOVR_LOC(50)     * Locations
         GBLC  &BXA_EQUOVR_TYP(50)     * Types
         LCLA  &I                      * Index
         LCLC  &_LABEL                 *
         LCLC  &_VALUE                 *
         LCLC  &_LEN                   *
         LCLC  &_LOC                   * location for bit-fields
         LCLC  &_TYPE                  *
         LCLC  &_TYP                   * Single-letter value
         LCLB  &SIMPLE_VAL             * On if VALUE is simply a var
         LCLB  &RENAMED                * On if *NEWNAME entry found
.*
.* Check number of parameters
         AIF   (N'&SYSLIST LE 3).NOERR1
.ERR1    MNOTE 4,'More than 3 arguments: remainder ignored'
.NOERR1  ANOP  ,                       *
.*
.* Set up default values
&_LABEL  SETC  '&LABEL'                *
&_VALUE  SETC  '&VALUE'                *
&_LEN    SETC  '&LEN'                  *
&_TYPE   SETC  '&TYPE'                 *
.*
.* Check for overrides from EQUOVR
.CHKOVR  ANOP  ,                       *
&RENAMED SETB  0                       * No *NEWNAME found
&I       SETA  0                       * I indexes BXA_EQUOVR_xxx
.LOOP1   ANOP  ,                       * Search entry
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &BXA_EQUOVR).LOOP1NF * At end: not found
         AIF   ('&BXA_EQUOVR_LAB(&I)' NE '&_LABEL').LOOP1 *Skip mismtch
.*
.* Found a match: set up replacement variables
         AIF   ('&BXA_EQUOVR_VAL(&I)' NE '*NEWNAME').NOLAB
&RENAMED SETB  1                       * *NEWNAME found
&_LABEL  SETC  '&BXA_EQUOVR_LEN(&I)'   * Len contains new label for equ
         AGO   .NOLEN                  * VAL and LEN not valid, TYP    *
                                       *    not examined
.NOLAB   ANOP  ,                       *
.* Override value?
         AIF   (K'&BXA_EQUOVR_VAL(&I) EQ 0).NOVAL
&_VALUE  SETC  '&BXA_EQUOVR_VAL(&I)'   * Pick up override value
.NOVAL   ANOP  ,                       *
.* Override length?
         AIF   (K'&BXA_EQUOVR_LEN(&I) EQ 0).NOLEN
&_LEN    SETC  '&BXA_EQUOVR_LEN(&I)'   * Pick up overriding length
.NOLEN   ANOP
.* Override type? If bit/value field: also pick up location!
         AIF   (K'&BXA_EQUOVR_TYP(&I) EQ 0).NOTYP
&_TYPE   SETC  '&BXA_EQUOVR_TYP(&I)'   * Pick up overriding type
         AIF   ('&_TYPE' EQ 'C''b''').TYP
         AIF   ('&_TYPE' EQ 'C''v''').TYP
         AGO   .NOTYP
.TYP     ANOP  ,
&_LOC    SETC  '&BXA_EQUOVR_LOC(&I)'   * Pick up location of bit/value
.NOTYP   ANOP
.*
.* Remove the entry from the tables
.* Replace current entry by the last-valid,
.*    then decrement last-valid pointer
         AIF   (&I EQ &BXA_EQUOVR).DECR * Skip copy if current=last
&BXA_EQUOVR_LAB(&I) SETC '&BXA_EQUOVR_LAB(&BXA_EQUOVR)'
&BXA_EQUOVR_VAL(&I) SETC '&BXA_EQUOVR_VAL(&BXA_EQUOVR)'
&BXA_EQUOVR_LEN(&I) SETC '&BXA_EQUOVR_LEN(&BXA_EQUOVR)'
&BXA_EQUOVR_TYP(&I) SETC '&BXA_EQUOVR_TYP(&BXA_EQUOVR)'
&BXA_EQUOVR_LOC(&I) SETC '&BXA_EQUOVR_LOC(&BXA_EQUOVR)'
.DECR    ANOP  ,                       * Decrement last-valid pointer
&BXA_EQUOVR SETA &BXA_EQUOVR-1         *    by one
         AIF   (&RENAMED).CHKOVR       * Check for OVR for renamed EQU
.*
.* Generate _EQU statement with overrides, unless *SUPPRESS specified
.LOOP1NF ANOP  ,                       *
         AIF   ('&_VALUE' EQ '*SUPPRESS').MEND
.*
.* If &_LOC is not empty, the type is overriden to a bit/value-EQUate.
.* Put the location in the BXA_BITF table before generating the _EQU.
         AIF   (K'&_LOC EQ 0).NOTABIT
         AIF   (D'&_LOC).LOCOK
         MNOTE 8,'Location &_LOC has not (yet) been defined'
.LOCOK   ANOP  ,
         GBLC  &(BXA_BITF_&_LABEL)     * Define location variable
&(BXA_BITF_&_LABEL) SETC '&_LOC'       * And set it to the bit's loc.
&_LEN    SETC  '&_VALUE'               * Force length to be mask value
         AGO   .GEN                    * No need to copy implicit type
.NOTABIT ANOP
.*
.* If Type neither specified nor overridden, then copy Type from
.* &_VALUE if that is a simple expression. I.e. it contains no
.* parentheses, and no arithmetic (+, -, *, or /).
.* If it is a length equate (*-something) then default to type '0'
         AIF   (K'&_TYPE GT 0).TYPEOK  * Type already set
&I       SETA  ('&_VALUE' FIND '+-*/()')
         AIF   (&I EQ 0).CHKLIT        * Not a simple expression
.*
.* Check whether this is a valid simple length equate
         AIF   (K'&_LEN NE 0).TYPEOK   * Length given: dont force type
         AIF   (K'&_VALUE LT 3).TYPEOK * Cannot be *-x
         AIF   ('&_VALUE'(1,2) NE '*-').TYPEOK * Cannot be *-x
&_VALUE  SETC  '&_VALUE'(3,*)          * Extract base location
&I       SETA  ('&_VALUE' FIND '+-*/()')
         AIF   (&I NE 0).RST_VAL       * Not a simple expression
         AIF   (NOT D'&_VALUE).RST_VAL * Base location not yet defined
&_VALUE  SETC  '*-'.'&_VALUE'          * Restore original value
&_TYPE   SETC  'C''0'''                * Force type of 0
&_LEN    SETC  '&_VALUE'               * Set length equal to value
         AGO   .GEN                    * Go generate the equate
.RST_VAL ANOP  ,                       *
&_VALUE  SETC  '*-'.'&_VALUE'          * Restore original value
         AGO   .TYPEOK                 *
.*
.* All cases excluded, except literals
.CHKLIT  ANOP  ,                       *
         CHKLIT &_VALUE                * Check for being literal number
         AIF   (&BXA_RC EQ 0).TYPE0    * It is a literal number
&I       SETA  ('&_VALUE' FIND '''')   * Contains a quote?
         AIF   (&I GT 0).TYPEOK        * Not a simple expression
.* Must be a simple variable expression
&_TYPE   SETC  'T''&_VALUE'            * Copy type of &_VALUE
&SIMPLE_VAL SETB 1                     * Signal VALUE as a simple var
         AGO   .TYPEOK
.TYPE0   ANOP  ,                       * For numeric literals,
         AIF   (K'&_LEN NE 0).TYPEOK   * Unless length already given,
&_TYPE   SETC  'C''0'''                * Force type of 0
.TYPEOK  ANOP  ,                       *
.* For TYPE=0 set length, except if defaulted and value > X'FFFF'
         AIF   ('&_TYPE' NE 'C''0''').NOT0 * For type of 0
         AIF   ('&TYPE' EQ 'C''0''').SETLEN0 * For type of 0
&I       SETA  &_VALUE                 * Determine value of literal
         AIF   (&I GT 65535).NOT0      * Max length = X'FFFF'
.SETLEN0 ANOP  ,                       *
&_LEN    SETC  '&_VALUE'               * Set length to value
.NOT0    ANOP ,                        * For future reference
.*
.* If this is an EQU for a register (of any kind) then it must be
.* added to the register translate tables. If the type was specified
.* explicitly, check the value specified. Otherwise check the tables
.* of defined registers.
         AIF   (K'&TYPE EQ 0).CPYTYP   * Type is implicit: other logic
         AIF   (K'&TYPE LT 4).ERR2     * must be C'.'
         AIF   ('&TYPE'(1,2) NE 'C''').ERR2 * Check for leading C'
         AIF   ('&TYPE'(4,1) NE '''').ERR2 * Check for terminating '
&_TYP    SETC  '&TYPE'(3,1)            * Extract type character
         AIF   ('&_TYP' GT 'z').GEN    * Catch (nearly) all cases
         AIF   ('&_TYP' LT 'a').GEN    * Skip non-Bixoft codes
         AIF   ('&_TYP' EQ 'g').ADDREG * general purpose register
         AIF   ('&_TYP' EQ 'a').ADDREG * access register
         AIF   ('&_TYP' EQ 'c').ADDREG * control register
         AIF   ('&_TYP' EQ 'f').ADDREG * floating point register
         AGO   .GEN                    * Not a register equate
.ERR2    MNOTE 8,'Type parameter not specified as C''.'''
         MEXIT
.*
.* The type designation is implicit: see if the &_VALUE operand
.* specifies a register. If that is the case: copy its number and type
.CPYTYP  ANOP
         AIF   (NOT &SIMPLE_VAL).GEN   * Not copying a register: skip
         GBLA  &(BXA_REGN_&_VALUE)     * Declare number field of source
         GBLC  &(BXA_REGT_&_VALUE)     * Declare type field of source
&_TYP    SETC  '&(BXA_REGT_&_VALUE)'   * Copy type-letter
         AIF   ('&_TYP' EQ '').GEN     * Not a register-type: skip
         GBLA  &(BXA_REGN_&_LABEL)     * Declare number field of reg
         GBLC  &(BXA_REGT_&_LABEL)     * Declare type field of reg
&(BXA_REGN_&_LABEL) SETA &(BXA_REGN_&_VALUE) * Copy register number
&(BXA_REGT_&_LABEL) SETC '&_TYP'       * Copy the type designation
         AGO   .GEN
.*
.* If a register is declared with explicit type, then assign its
.* number and type to BXA_REGN_... and BXA_REGT_... respectively
.ADDREG  ANOP
         GBLA  &(BXA_REGN_&_LABEL)     * Declare field for reg number
         GBLC  &(BXA_REGT_&_LABEL)     * Declare field for reg type
&(BXA_REGN_&_LABEL) SETA &_VALUE       * The designated register number
&(BXA_REGT_&_LABEL) SETC '&_TYP'       * The type-designating character
.*
.* Start generating the ultimate _EQU statement
.GEN     ANOP
         AIF   (K'&_TYPE NE 0).EQU3
         AIF   (K'&_LEN NE 0).EQU2
.*
.* Simple equate
&_LABEL  _EQU  &_VALUE
         AGO   .EQUOK
.*
.* Equate with explicit length attribute
.EQU2    ANOP  ,                       * EQU with two arguments
&_LABEL  _EQU  &_VALUE,&_LEN
         AGO   .EQUOK
.*
.* Equate with explicit type attribute and/or explicit length attribute
.EQU3    ANOP  ,                       * EQU with three arguments
&_LABEL  _EQU  &_VALUE,&_LEN,&_TYPE
.*
.EQUOK   ANOP  ,
         AIF   (T'&_LABEL NE 'b').MEND
         AIF   (L'&_LABEL NE 0).MEND
         MNOTE 4,'What use is a bit mask with a zero value?'
.*
.MEND    MEND
./ ADD NAME=EQUOVR   0100-20096-20096-0111-00191-00191-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro handles the stack of EQU modifications for use by the
.* EQU macro, which replaces the assembler's EQU instruction
.*
&LABEL   EQUOVR &VALUE,                * Value to be assigned          *
               &LEN,                   * Length attribute              *
               &TYPE,                  * Type attribute                *
               &LOC                    * Location
.*
.* &LABEL mandatory, except when &VALUE=*END
.* &VALUE specifies the value to be assigned to &LABEL.
.*        *END cancels all outstanding EQUOVR requests
.*        *SUPPRESS suppresses the EQU of &LABEL
.*        *NEWNAME changes the EQU for &LABEL into one for &LEN,
.*              i.e. Specify *NEWNAME,newname
.*        Other values override the EQU-value with the same label
.* &LEN   specifies an explicit length attribute
.* &TYPE  specifies an explicit type attribute
.*        Assigned types are documented in the EQU macro
.* &LOC   Valid only if &TYPE=C'b' or C'v'. Specifies a relocatable
.*        expression, which resolves to the location of the byte for
.*        which the override specifies a mask, bit pattern, or value.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EQUOVR                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_EQUOVR             * Ptr to last valid
         GBLC  &BXA_EQUOVR_LAB(50)     * Labels
         GBLC  &BXA_EQUOVR_VAL(50)     * Values
         GBLC  &BXA_EQUOVR_LEN(50)     * Lengths
         GBLC  &BXA_EQUOVR_LOC(50)     * Locations
         GBLC  &BXA_EQUOVR_TYP(50)     * Types
         LCLA  &I                      * Index
         LCLC  &_TYPE                  *
.*
.* Check LABEL parameter
         AIF   (K'&LABEL GT 0).NOERR1
         AIF   ('&VALUE' EQ '*END').NOERR1
.ERR1    MNOTE 8,'Missing label parameter on EQUOVR'
         MEXIT
.NOERR1  ANOP
.*
.* At least 1 parameter must be specified
         AIF   (K'&VALUE NE 0).NOERR2
         AIF   (K'&LEN NE 0).NOERR2
         AIF   (K'&TYPE NE 0).NOERR2
.ERR2A   MNOTE 8,'No arguments supplied to EQUOVR: ignored'
         MEXIT ,
.NOERR2  ANOP  ,
.*
.* Check the LEN parameter (must be present if VALUE = *NEWNAME)
         AIF   ('&VALUE' EQ '*NEWNAME' AND K'&LEN EQ 0).ERR3A
         AGO   .NOERR3
.ERR3A   MNOTE 8,'New name for &LABEL not specified with option *NEWNAM*
               E'
         MEXIT
.NOERR3  ANOP
.*
.* Check type parameter
&_TYPE   SETC  '&TYPE'                 * Use specified value
         AIF   (K'&TYPE EQ 0).NOERR4   * Unless specified as
         AIF   (K'&TYPE GT 1).NOERR4   *    a single character
&_TYPE   SETC  'C'''.'&TYPE'.''''      * change to C'.'
.NOERR4  ANOP
.*
.* Check the LOC parameter
         AIF   ('&_TYPE' EQ 'C''b''' AND K'&LOC EQ 0).ERR5A
         AIF   ('&_TYPE' EQ 'C''v''' AND K'&LOC EQ 0).ERR5B
         AIF   ('&_TYPE' EQ 'C''b''').NOERR5
         AIF   ('&_TYPE' EQ 'C''v''').NOERR5
         AIF   (K'&LOC NE 0).ERR5C
         AGO   .NOERR5
.ERR5A   MNOTE 8,'Overriding &LABEL to a bit field: missing location'
         MEXIT
.ERR5B   MNOTE 8,'Overriding &LABEL to a code value: missing location'
         MEXIT
.ERR5C   MNOTE 4,'Location not valid for new field type of &LABEL: igno*
               red'
.NOERR5  ANOP
.*
.* Check number of parameters
         AIF   ('&VALUE' EQ '*END' AND N'&SYSLIST GT 1).ERR6A
         AIF   ('&VALUE' EQ '*END').NOERR6
         AIF   ('&VALUE' EQ '*SUPPRESS' AND N'&SYSLIST GT 1).ERR6A
         AIF   ('&VALUE' EQ '*SUPPRESS').NOERR6
         AIF   ('&VALUE' EQ '*NEWNAME' AND N'&SYSLIST GT 2).ERR6B
         AIF   ('&VALUE' EQ '*NEWNAME').NOERR6
         AIF   ('&_TYPE' EQ 'C''b''' AND N'&SYSLIST GT 4).ERR6D
         AIF   ('&_TYPE' EQ 'C''v''' AND N'&SYSLIST GT 4).ERR6D
         AIF   ('&_TYPE' EQ 'C''b''').NOERR6
         AIF   ('&_TYPE' EQ 'C''v''').NOERR6
         AIF   (N'&SYSLIST GT 3).ERR6C
         AGO   .NOERR6
.ERR6A   MNOTE 4,'EQUOVR &LABEL with more than 1 argument: remainder ig*
               nored'
         AGO   .NOERR6
.ERR6B   MNOTE 4,'EQUOVR &LABEL with more than 2 arguments: remainder i*
               gnored'
         AGO   .NOERR6
.ERR6C   MNOTE 4,'EQUOVR &LABEL with more than 3 arguments: remainder i*
               gnored'
         AGO   .NOERR6
.ERR6D   MNOTE 4,'EQUOVR &LABEL with more than 4 arguments: remainder i*
               gnored'
.NOERR6  ANOP
.*
.* *END or a normal EQUOVR?
         AIF   ('&VALUE' EQ '*END').END
.*
.* Normal: add entries to tables
&I       SETA  &BXA_EQUOVR+1           * Next free entry
&BXA_EQUOVR_LAB(&I) SETC '&LABEL'      * Insert label, value, length,
&BXA_EQUOVR_VAL(&I) SETC '&VALUE'      *   and type parameters
&BXA_EQUOVR_LEN(&I) SETC '&LEN'        *   into tables
&BXA_EQUOVR_TYP(&I) SETC '&_TYPE'      *
&BXA_EQUOVR_LOC(&I) SETC '&LOC'        *
&BXA_EQUOVR SETA &I                    * And update ptr to last valid
         MEXIT
.*
.* Ending current EQUOVR requests. Issue a message for any unused
.* entries in BXA_EQUOVR tables.
.END     ANOP
&I       SETA  0                       * I indexes BXA_EQUOVR_xxx
.LOOP1   ANOP  ,                       * For all current entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &BXA_EQUOVR).LOOP1OK * At end: quit loop
         MNOTE 4,'EQUOVR for &BXA_EQUOVR_LAB(&I) discarded'
         AGO   .LOOP1
.LOOP1OK ANOP
&BXA_EQUOVR SETA 0                     * Reset valid counter to 0
.*
.MEND    MEND
./ ADD NAME=EQUREG   0100-20096-20096-0111-00441-00441-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates an EQU for an available register
.*
.* &BXA_RC     will contain 0 if successful
.*                          4 if successful with warnings
.*                          8 if unsuccessful
.* &BXA_NUMVAL will contain assigned register number
.*
&LABEL   EQUREG &SEARCH=HIGH,          * HIGH, LOW, or (reg,reg,...)   *
               &R0=NO,                 * R0 allowed YES/NO             *
               &TEMP=NO,               * R1, R14, R15 allowed YES/NO   *
               &PAIR=NO,               * Allocate 1 or 2 registers     *
               &AR=,                   * Name of access register       *
               &ODD=,                  * Name of odd reg, or (reg,areg)*
               &WARN=YES               * YES/NO issue messages
.*
.* &LABEL  If specified, an EQU for this label will be generated
.* &SEARCH Specifies the search sequence. If none of the specified
.*         registers is available, registers 2-15 and 1 will be tried
.*         in sequence. If R0=YES was specified registers 2-15 and 0-1
.*         will be used in stead.
.* &R0     YES indicates that R0 may be used in the default search
.* &TEMP   YES indicates that R1, R14, and R15 may be used in the
.*         default search
.* &PAIR   YES indicates that a pair of registers is to be allocated
.*         For a pair the even register will be assigned to the name
.*         specified in LABEL, and &BXA_NUMVAL will also contain the
.*         number of the even register.
.* &ODD    Specifies, for a register pair, the name to assign to the
.*         odd register. If specified as a pair of names in parentheses
.*         the first name will be equated to the odd register, the
.*         second name will be equated to the odd access register.
.* &WARN   Specifies whether or not messages are to be issued when
.*         allocation fails
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EQUREG                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &SP_SHOWALL             * Showall option in sysparm
         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15
         GBLA  &BXA_NUMVAL             * Retvalue from CHKREG
         LCLA  &I                      * Index for SEARCH
         LCLA  &R                      * Register index value
         LCLA  &REG                    * Register number
         LCLA  &REGS(16)               * Register search sequence
         LCLC  &SRCH(16)               * Register search sequence
         LCLC  &ARG                    * Argument from SEARCH
         LCLA  &RC                     * Temp. for returncode
         LCLB  &PASS2                  * On for second search of &REGS
         LCLC  &_ODD1                  * First ODD-subparm
         LCLC  &_ODD2                  * Second ODD-subparm
.*
.* Check number of parameters
         AIF   (N'&SYSLIST EQ 0).NOERR2
         AIF   (K'&SYSLIST(1) NE 0).ERR2A
         AIF   (N'&SYSLIST EQ 1).NOERR2
         AIF   (K'&SYSLIST(2) NE 0).ERR2A
         AIF   (N'&SYSLIST EQ 2).NOERR2
.ERR2A   MNOTE 4,'Not expecting any positional parameters: ignored'
&RC      SETA  4
.NOERR2  ANOP
.*
.* Check R0-parameter
         AIF   ('&R0' EQ 'NO').NOERR3
         AIF   ('&R0' EQ 'YES').NOERR3
.ERR3    MNOTE 4,'R0 must be either YES or NO'
&RC      SETA  4
.NOERR3  ANOP
.*
.* Check the SEARCH parameter
         AIF   (K'&SEARCH EQ 0).NOERR4
         AIF   ('&SEARCH' EQ 'HIGH').NOERR4
         AIF   ('&SEARCH' EQ 'LOW').NOERR4
         AIF   ('&SEARCH'(1,1) NE '(').ERR4A
         AIF   (N'&SEARCH EQ 0).ERR4B
&I       SETA  0                       * I indexes Search
&R       SETA  0                       * R indexes REGS
.LOOP4   ANOP  ,                       * Check all entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SEARCH).LOOP4OK
&ARG     SETC  '&SEARCH(&I)'           * Extract 1 entry
         CHKREG &ARG,g                 * GPR?
         AIF   (&BXA_RC EQ 8).ERR4C    * Invalid register: error
&R       SETA  &R+1                    * Point free entry in REGS
&REGS(&R) SETA &BXA_NUMVAL+1           * Put reg.index into REGS
&SRCH(&R) SETC '&ARG'                  * Put reg.name into SRCH
         AIF   (&BXA_NUMVAL EQ 0 AND '&R0' NE 'YES').ERR4D
         AGO   .LOOP4
.ERR4A   MNOTE 4,'SEARCH parameter neither HIGH, LOW, nor in parenthese*
               s: ignored'
&RC      SETA  4
         AGO   .NOERR4
.ERR4B   MNOTE 4,'SEARCH parameter contains no values: ignored'
&RC      SETA  4
         AGO   .NOERR4
.ERR4C   ANOP
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 4,'SEARCH contains invalid argument: &ARG is not a regis*
               ter'
&RC      SETA  4
         AGO   .LOOP4
.ERR4D   ANOP
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 4,'SEARCH contains &ARG (register 0), but R0=YES has not*
                been specified'
&RC      SETA  4
         AGO   .LOOP4
.LOOP4OK ANOP
.NOERR4  ANOP
.*
.* Check the PAIR parameter
         AIF   ('&PAIR' EQ 'NO').NOERR5
         AIF   ('&PAIR' EQ 'YES').NOERR5
.ERR5    MNOTE 8,'PAIR-parameter must be YES, NO, or omitted'
         MEXIT
.NOERR5  ANOP  ,
.*
.* Check TEMP-parameter
         AIF   ('&TEMP' EQ 'NO').NOERR6
         AIF   ('&TEMP' EQ 'YES').NOERR6
.ERR6    MNOTE 4,'TEMP must be either YES or NO'
&RC      SETA  4
.NOERR6  ANOP
.*
.* Check AR-parameter
         AIF   (K'&AR EQ 0).NOERR7
         AIF   (K'&LABEL EQ 0).ERR7
         AGO   .NOERR7
.ERR7    MNOTE 4,'AR-parameter specified, but label is missing'
&RC      SETA  4
.NOERR7  ANOP
.*
.* Check ODD parameter
         AIF   (K'&ODD EQ 0).NOERR8
         AIF   ('&PAIR' EQ 'YES').NOERR8A
.ERR8A   MNOTE 4,'PAIR=YES was not specified: ODD-parameter ignored'
         AGO   .NOERR8                 *
.NOERR8A ANOP  ,                       *
         AIF   (K'&LABEL NE 0).NOERR8B
.ERR8B   MNOTE 4,'LABELE was not specified: ODD-parameter ignored'
         AGO   .NOERR8                 *
.NOERR8B ANOP  ,                       *
&_ODD1   SETC  '&ODD'                  * Assume only 1 parm
         AIF   ('&ODD'(1,1) NE '(').NOERR8 * Ok: not parenthesized
         AIF   (N'&ODD LT 1).ERR8C     * Empty sublist
&_ODD1   SETC  '&ODD(1)'               *
         AIF   (N'&ODD LT 2).NOERR8    * Only 1 subparm
&_ODD2   SETC  '&ODD(2)'               *
         AIF   (N'&ODD NE 2).ERR8D     * Too many subparms
         AGO   .NOERR8                 *
.ERR8C   MNOTE 4,'Empty sublist in ODD-parameter: ignored'
         AGO   .NOERR8                 *
.ERR8D   MNOTE 4,'More than two entries in ODD-parameter: remainder ign*
               ored'
.NOERR8  ANOP  ,
.*
.* Check the WARN parameter
         AIF   ('&WARN' EQ 'YES').NOERR9
         AIF   ('&WARN' EQ 'NO').NOERR9
.ERR9    MNOTE 4,'WARN parameter must be YES or NO: YES assumed'
.NOERR9  ANOP  ,
.*
.* Check REGS to find the first available register
.SEARCH  ANOP  ,                       * (re)start search of &REGS
&I       SETA  0                       * I is index to REGS
.LOOP1   ANOP  ,                       *
&I       SETA  &I+1                    * Point next SEARCH value
         AIF   (&I GT N'&REGS).LOOP1NF * No register found
&R       SETA  (&REGS(&I))             * Retrieve register index
         AIF   (&BXA_USED_REGS(&R)).LOOP1 * Not available: try next one
.* Available register found
         AIF   ('&PAIR' NE 'YES').ALLOCOK
         AIF   ('EOEOEOEOEOEOEOEO'(&R,1) NE 'E').LOOP1 * Skip odd reg.
&R       SETA  &R+1                    * Associated odd reg. index
         AIF   (&BXA_USED_REGS(&R)).LOOP1 * Not available: try next one
.* Even and odd registers both available
&R       SETA  &R-1                    * Index of even register
         AGO   .ALLOCOK                *
.LOOP1NF ANOP  ,                       *
         AIF   (&PASS2).NOALLOC        * Allocation failed!
         AIF   ('&SEARCH' EQ 'LOW').SRCHLOW
         AIF   ('&SEARCH' EQ 'HIGH').SRCHHIG
         AGO   .SRCHHIG                * Default to HIGH !
.*
.* Find first available register for SEARCH=LOW
.* First try to allocate a register from a pair that already has one
.* register in use, if this fails, try to allocate any register.
.SRCHLOW ANOP  ,                       *
         AIF   ('&PAIR' EQ 'YES').LOWPAIR *
.*
.* Check for availability of R0
         AIF   ('&R0' NE 'YES').LOWNOT0 * Skip if R0 not eligible
         AIF   (&BXA_USED_REGS(1)).LOWNOT0 * R0 already in USE
.* OK: R0 available
&REGS(1) SETA  1                       * Index of R0
&SRCH(1) SETC  'R0'                    * Name of R0
&I       SETA  1                       * Point to this entry
         AGO   .ALLOCOK                *
.LOWNOT0 ANOP  ,
.*
.* Check for availability of R1
         AIF   ('&TEMP' NE 'YES').LOWNOT1 * Skip if R1 not eligible
         AIF   (&BXA_USED_REGS(2)).LOWNOT1 * R1 already in USE
         AIF   (NOT &BXA_USED_REGS(1)).LOWNOT1 * R0 not in USE
.* OK: R1 available AND R0 in use
&REGS(1) SETA  2                       * Index of R1
&SRCH(1) SETC  'R1'                    * Name of R1
&I       SETA  1                       * Point to this entry
         AGO   .ALLOCOK                *
.LOWNOT1 ANOP  ,
.*
.* Find a pair from R2-R15 of which one register is in use
&R       SETA  1                       * R = index of eligible register
.LOOP2   ANOP  ,                       * Search half of a pair
&R       SETA  &R+2                    * Point index of even register
         AIF   (&R GE 15 AND '&TEMP' NE 'YES').LOOP2OK * Quit after R13
         AIF   (&R GE 17).LOOP2OK      * Quit after R15
.* Try even reg, if odd one is in use, and vice versa
&I       SETA  &R+1                    * Index for odd register
         AIF   (&BXA_USED_REGS(&R) AND NOT &BXA_USED_REGS(&I)).LOOP2AO
         AIF   (NOT &BXA_USED_REGS(&R) AND &BXA_USED_REGS(&I)).LOOP2AE
         AGO   .LOOP2                  * Try next pair
.LOOP2AE ANOP  ,                       * Allocate even register
&REGS(1) SETA  &R                      * Index of even register
&R       SETA  &R-1                    * Register number
&SRCH(1) SETC  'R&R'                   * Name of even register
&I       SETA  1                       * Point to this entry
         AGO   .ALLOCOK                *
.LOOP2AO ANOP  ,                       * Allocate odd register
&REGS(1) SETA  &I                      * Index of odd register
&SRCH(1) SETC  'R&R'                   * Name of odd register
&I       SETA  1                       * Point to this entry
         AGO   .ALLOCOK                *
.LOOP2OK ANOP  ,
.*
.* No half-used pair found: allocate any single reg or a pair
.LOWPAIR ANOP  ,
&R       SETA  1                       * Point free entry in REGS
         AIF   ('&R0' NE 'YES').LOWNOR0 * R0 eligible?
&REGS(&R) SETA 1                       * Index for R0
&SRCH(&R) SETC 'R0'                    * Name of R0
&R       SETA  &R+1                    * Point next free index
.LOWNOR0 ANOP  ,                       *
         AIF   ('&TEMP' NE 'YES').LOWNOR1 * R1 eligible?
&REGS(&R) SETA 2                       * Index for R1
&SRCH(&R) SETC 'R1'                    * Name of R1
&R       SETA  &R+1                    * Point next free index
.LOWNOR1 ANOP  ,                       *
&REGS(&R) SETA 3,4,5,6,7,8,9,10,11,12,13,14 * Add reg indexes R2-R13
&SRCH(&R) SETC 'R2','R3','R4','R5','R6','R7','R8','R9','R10','R11',    *
               'R12','R13'             * and their names
&R       SETA  &R+12                   * Point next free index
         AIF   ('&TEMP' NE 'YES').LOWNOR14 * R14&15 eligible?
&REGS(&R) SETA 15,16                   * Indexes for R14 and R15
&SRCH(&R) SETC 'R14','R15'             * Names of R14 and R15
.LOWNOR14 ANOP ,                       *
&PASS2  SETB   1                       * Indicate second search
        AGO    .SEARCH                 * And go search &REGS table
.*
.* Find first available register for SEARCH=HIGH (or default)
.* First try to allocate a register from a pair that already has one
.* register in use, if this fails, try to allocate any register.
.SRCHHIG ANOP  ,                       *
         AIF   ('&PAIR' EQ 'YES').HIGPAIR *
.*
.* Check for availability of R0
         AIF   ('&R0' NE 'YES').HIGNOT0 * Skip if R0 not eligible
         AIF   (&BXA_USED_REGS(1)).HIGNOT0 * R0 already in USE
.* OK: R0 available
&REGS(1) SETA  1                       * Index of R0
&SRCH(1) SETC  'R0'                    * Name of R0
&I       SETA  1                       * Point to this entry
         AGO   .ALLOCOK                *
.HIGNOT0 ANOP  ,
.*
.* Check for availability of R1
         AIF   ('&TEMP' NE 'YES').HIGNOT1 * Skip if R1 not eligible
         AIF   (&BXA_USED_REGS(2)).HIGNOT1 * R1 already in USE
         AIF   (NOT &BXA_USED_REGS(1)).HIGNOT1 * R0 not in USE
.* OK: R1 available AND R0 in use
&REGS(1) SETA  2                       * Index of R1
&SRCH(1) SETC  'R1'                    * Name of R1
&I       SETA  1                       * Point to this entry
         AGO   .ALLOCOK                *
.HIGNOT1 ANOP  ,
.*
.* Find a pair from R15-R2 of which one register is in use
&R       SETA  17                      * R = index of eligible register
         AIF   ('&TEMP' EQ 'YES').LOOP3 * Start search at R15
&R       SETA  15                      * Skip R14/R15 if ineligible
.LOOP3   ANOP  ,                       * Search half of a pair
&R       SETA  &R-2                    * Point index of even register
         AIF   (&R LE 1).LOOP3OK       * Quit after R2
.* Try even reg, if odd one is in use, and vice versa
&I       SETA  &R+1                    * Index for odd register
         AIF   (&BXA_USED_REGS(&R) AND NOT &BXA_USED_REGS(&I)).LOOP3AO
         AIF   (NOT &BXA_USED_REGS(&R) AND &BXA_USED_REGS(&I)).LOOP3AE
         AGO   .LOOP3                  * Try next pair
.LOOP3AE ANOP  ,                       * Allocate even register
&REGS(1) SETA  &R                      * Index of even register
&R       SETA  &R-1                    * Register number
&SRCH(1) SETC  'R&R'                   * Name of even register
&I       SETA  1                       * Point to this entry
         AGO   .ALLOCOK                *
.LOOP3AO ANOP  ,                       * Allocate odd register
&REGS(1) SETA  &I                      * Index of odd register
&SRCH(1) SETC  'R&R'                   * Name of odd register
&I       SETA  1                       * Point to this entry
         AGO   .ALLOCOK                *
.LOOP3OK ANOP  ,
.*
.* No half-used pair found: allocate any single reg or a pair
.HIGPAIR ANOP  ,
&R       SETA  1                       * Point free entry in REGS
         AIF   ('&TEMP' NE 'YES').HIGNOR14 * R14&15 eligible?
&REGS(&R) SETA 16,15                   * Indexes for R14 and R15
&SRCH(&R) SETC 'R15','R14'             * Names of R14 and R15
&R       SETA  &R+2                    * Point next free index
.HIGNOR14 ANOP ,                       *
&REGS(&R) SETA 14,13,12,11,10,9,8,7,6,5,4,3 * Add reg indexes R13-R2
&SRCH(&R) SETC 'R13','R12','R11','R10','R9','R8','R7','R6','R5','R4',  *
               'R3','R2'               * and their names
&R       SETA  &R+12                   * Point next free index
         AIF   ('&TEMP' NE 'YES').HIGNOR1 * R1 eligible?
&REGS(&R) SETA 2                       * Index for R1
&SRCH(&R) SETC 'R1'                    * Name of R1
&R       SETA  &R+1                    * Point next free index
.HIGNOR1 ANOP  ,                       *
         AIF   ('&R0' NE 'YES').HIGNOR0 * R0 eligible?
&REGS(&R) SETA 1                       * Index for R0
&SRCH(&R) SETC 'R0'                    * Name of R0
.HIGNOR0 ANOP  ,                       *
&PASS2  SETB   1                       * Indicate second search
        AGO    .SEARCH                 * And go search &REGS table
.*
.* Available register (or pair) located
.ALLOCOK ANOP  ,
         AIF   (NOT &SP_SHOWALL).NOMNOTE
         AIF   ('&PAIR' NE 'YES').MNOTE1
         MNOTE *,'Register pair &SRCH(&I) allocated'
         AGO   .NOMNOTE
.MNOTE1  ANOP  ,
         MNOTE *,'Register &SRCH(&I) allocated'
.NOMNOTE ANOP  ,
         AIF   (K'&LABEL EQ 0).NOEQU   * Gen EQU for assigned reg?
&LABEL   EQU   &SRCH(&I)               * Assign available register
         AIF   (K'&_ODD1 EQ 0).NOEQUO  * Gen EQU for odd register?
&REG     SETA  &REGS(&I)               * Register number for odd reg
&_ODD1   EQU   R&REG                   * Assign name of odd register
.NOEQUO  ANOP  ,                       *
         AIF   (K'&AR EQ 0).NOEQUAR    * Gen EQU for access register?
&REG     SETA  &REGS(&I)-1             * Register number
&AR      EQU   AR&REG                  * Assign access register too
.NOEQUAR ANOP  ,                       *
         AIF   (K'&_ODD2 EQ 0).NOEQU   * Gen EQU for odd AR?
&REG     SETA  &REGS(&I)               * Register number for odd reg
&_ODD2   EQU   AR&REG                  * And assign odd access register
.NOEQU   ANOP  ,                       *
.*
.* Set up returncode and return value
&BXA_NUMVAL SETA &REGS(&I)-1           * Create reg.nr from index
&BXA_RC  SETA  &RC                     * Set returncode
         MEXIT
.*
.* An available register was not found
.NOALLOC ANOP  ,
         AIF   ('&WARN' EQ 'NO').EXIT8
         AIF   ('&PAIR' NE 'YES').NOREG1
         MNOTE 8,'No register pair is currently available'
         AGO   .RETRC8
.NOREG1  ANOP  ,
         MNOTE 8,'No register is currently available'
.*
.RETRC8  ANOP  ,
         USEDREGS DETAILS
.*
.* Set up returncode and return value
.EXIT8   ANOP  ,
&BXA_NUMVAL SETA 0                     * No register: default to zero
&BXA_RC  SETA  8                       * Indicate error to caller
.*
.MEND    MEND
./ ADD NAME=EXCLC    0100-20096-20096-0111-00077-00077-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Execute a CLC-instruction with variable length
.*
&LABEL   EXCLC &TO,                    * Comparand 1                   *
               &FROM,                  * Comparand 2                   *
               &DECR                   * Decrement indicator
.*
.* &TO   specifies the destination field for the move. In stead of a
.*       length, a register containing the length must be specified.
.* &FROM specifies the source of the move
.* &DECR a value of NODEC indicates that the length in the register
.*       specified in the TO length field, contains the length of
.*       the move minus 1 for the EX instruction.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXCLC                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   EXQ   &TO,&FROM,CLC,&DECR
.*
.MEND    MEND
./ ADD NAME=EXMVC    0100-20096-20096-0111-00077-00077-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Execute an MVC-instruction with variable length
.*
&LABEL   EXMVC &TO,                    * Move destination              *
               &FROM,                  * Move source                   *
               &DECR                   * Decrement indicator
.*
.* &TO   specifies the destination field for the move. In stead of a
.*       length, a register containing the length must be specified.
.* &FROM specifies the source of the move
.* &DECR a value of NODEC indicates that the length in the register
.*       specified in the TO length field, contains the length of
.*       the move minus 1 for the EX instruction.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXMVC                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   EXQ   &TO,&FROM,MVC,&DECR
.*
.MEND    MEND
./ ADD NAME=EXQ      0100-20096-20096-0111-00218-00218-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Execute an instruction with variable length
.*
&LABEL   EXQ   &TO,                    * First operand                 *
               &FROM,                  * Second operand                *
               &OPCD,                  * Operation code to EXecute     *
               &DECR                   * Decrement indicator
.*
.* &TO   specifies the first operand for the instruction. In the length
.*       field, a register contining the length must be specified.
.*       For an MVC the first operand is the destination of the move.
.* &FROM specifies the second operand of the instruction to be
.*       executed. For an MVC this is the source of the move.
.* &OPCD specifies the operation code for the instruction to be
.*       executed.
.* &DECR a value of NODEC indicates that the length in the register
.*       specified in the TO length field, contains the length of
.*       the move minus 1 for the EX instruction.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXQ                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_EXQ_I(50)          * Instructions to EXecute
         GBLC  &BXA_EXQ_OPS(50)        * Operands for BXA_EXQ_I
         GBLA  &BXA_EXQ_LAST           * Last generated entry
         LCLC  &EXQ_OPS                * Operands
         LCLC  &_TO                    * First operand (to for MVC)
         LCLC  &_REG                   * Register with length
         LCLA  &I,I1,I2                * Index into &TO string
         LCLB  &_DECR                  * On if DECR=NODEC
.*
.* Check the TO parameter
         AIF   (K'&TO NE 0).NOERR1
.ERR1A   MNOTE 8,'No first operand specified'
.NOERR1  ANOP
.*
.* Check the FROM parameter
         AIF   ('&OPCD' EQ 'SVC').NOERR2
         AIF   (K'&FROM NE 0).NOERR2
.ERR2A   MNOTE 8,'No second operand specified'
.NOERR2  ANOP
.*
.* Check the OPCD parameter
         AIF   (K'&OPCD EQ 0).ERR3A
         AIF   ('&OPCD' EQ 'CLC').NOERR3
         AIF   ('&OPCD' EQ 'MVC').NOERR3
         AIF   ('&OPCD' EQ 'SVC').NOERR3
         AIF   ('&OPCD' EQ 'TR').NOERR3
         AIF   ('&OPCD' EQ 'TRT').NOERR3
         AIF   ('&OPCD' EQ 'XC').NOERR3
         AGO   .ERR3B
.ERR3A   MNOTE 8,'Third parameter (operation code) omitted'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'Invalid operation code specified on third parameter'
.NOERR3  ANOP
.*
.* Check the DECR parameter
         AIF   (K'&DECR EQ 0).NOERR4
         AIF   ('&DECR' EQ 'NODEC').NOERR4A
.ERR4A   MNOTE 8,'Fourth operand must be specified as NODEC or omitted'
         AGO   .NOERR4
.NOERR4A ANOP
&_DECR   SETB  1                       * Signal NODEC was specified
         AIF   ('&OPCD' NE 'SVC').NOERR4B
.ERR4B   MNOTE 4,'Superfluous operand NODEC for EXSVC'
.NOERR4B ANOP
.NOERR4  ANOP
         AIF   ('&OPCD' NE 'SVC').NONODEC
&_DECR   SETB  1                       * Simulate NODEC operand for SVC
.NONODEC ANOP
.*
.* Extract &_REG from length field in &TO operand
.* First we search for an opening parenthesis
&I       SETA  0
.LOOP1   ANOP
&I       SETA  &I+1                    * Point next character
         AIF   (&I GT K'&TO).END1      * At end: quit loop
         AIF   ('&TO'(&I,1) EQ '(').FOUND1
         AGO   .LOOP1
.FOUND1  ANOP
&I1      SETA  &I+1                    * Start-index of length field
.*
.END1    ANOP
         AIF   (&I1 EQ 0).ERR5A
         AIF   (&I1 GT K'&TO).ERR5B
         AGO   .NOERR5
.ERR5A   MNOTE 8,'Opening parenthesis ''('' not found in first operand'
         AGO   .NOERR5
.ERR5B   MNOTE 8,'Opening parenthesis ''('' found at end of first opera*
               nd'
.NOERR5  ANOP
.*
.* Now we search for an ending parenthesis or a comma
.LOOP2   ANOP
&I       SETA  &I+1                    * Point next character
         AIF   (&I GT K'&TO).END2      * At end: quit loop
         AIF   ('&TO'(&I,1) EQ ')').FOUND2
         AIF   ('&TO'(&I,1) EQ ',').FOUND2
         AGO   .LOOP2
.FOUND2  ANOP
&I2      SETA  &I-1                    * Start-index of length field
.END2    ANOP
.*
         AIF   (&I2 EQ 0).ERR6A
         AIF   (&I2 EQ &I1).ERR6B
         AGO   .NOERR6
.ERR6A   MNOTE 8,'Closing parenthesis '')'' or comma not found in first*
                operand'
         AGO   .NOERR6
.ERR6B   MNOTE 8,'Empty length field found in instruction'
.NOERR6  ANOP
.*
.* Extract register and real TO field
&I       SETA  1+&I2-&I1               * Length of register designation
&_REG    SETC  '&TO'(&I1,&I)           * Extract register designation
&I1      SETA  &I1-1                   * Point to ( character
&I2      SETA  &I2+1                   * Point to ) or , character
&I       SETA  1+K'&TO-&I2             * Length of remainder of string
&_TO     SETC  '&TO'(1,&I1).'0'.'&TO'(&I2,&I)
.*
.* Now we will build the operands string in EXQ_OPS. If the instruction
.* plus operands already occur in BXA_EXQ_I/BXA_EXQ_OPS, then we will
.* use that instruction. Otherwise, we add an entry in each of these
.* tables. The entries will be included as instructions in the literal
.* pool through expansion of the LTORG macro.
.* The instruction to be generated looks as either of the following:
.*       &OPCD &_TO,&FROM              * EXecutable instruction
.*       &OPCD &_TO                    * EXecutable instruction
&EXQ_OPS SETC  '&_TO'                  * First part of operand string
         AIF   (K'&FROM EQ 0).OPSOK
&EXQ_OPS SETC  '&_TO'.',&FROM'         * Complete operand string
.OPSOK   ANOP
.*
.* Check whether entry exists in current section of tables
&I       SETA  &BXA_EXQ_LAST           * index in BXA_EXQ_I BXA_EXQ_OPS
.LOOP3   ANOP  ,                       *
&I       SETA  &I+1                    * Point to next entry
         AIF   (&I GT N'&BXA_EXQ_I).LOOP3NF * Not found: add entry
         AIF   ('&OPCD' NE '&BXA_EXQ_I(&I)').LOOP3 * Not found: next
         AIF   ('&EXQ_OPS' NE '&BXA_EXQ_OPS(&I)').LOOP3 * Not found
         AGO   .LOOP3OK                * Got it: abort loop
.LOOP3NF ANOP  ,                       * I now points to free entry
&BXA_EXQ_I(&I)   SETC '&OPCD'          * Create new entry
&BXA_EXQ_OPS(&I) SETC '&EXQ_OPS'       *   in both arrays
.LOOP3OK ANOP  ,                       * I now points to correct entry
.*
.* Generate code
&LABEL   LABEL ,
         AIF   (&_DECR).NODEC1
         DEC   &_REG                   * Decrement length by 1
.NODEC1  ANOP
.*
         EX    &_REG,_EXQ&I            * EXecute variable-length instr.
.*
         AIF   (&_DECR).NODEC2
         INC   &_REG                   * Restore register with length
.NODEC2  ANOP
.*
.MEND    MEND
./ ADD NAME=EXSR     0100-20096-20096-0111-00249-00249-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* EXecute a SubRoutine
.*
&LABEL   EXSR  &SUBR,                  * Routine to be called          *
               &COND,                  * Calling condition             *
               &TYPE,                  * Type of subroutine involved   *
               &SUBRS=,                * Subroutine names              *
               &ARSAVE=                * YES or NO
.*
.* &SUBR  specifies the label of a SUBR statement or (reg)
.* &COND  specifies a condition for conditional execution
.* &TYPE  specifies INTernal subroutine or EXTernal subroutine (CSECT)
.* &SUBRS specifies the routines that may be invoked when SUBR=(reg)
.* &ARSAVE specifies whether or not to save/restore access registers
.*         valid only for TYPE=EXT
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXSR                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Define variables
         GBLA  &BXA_NUMVAL             * Return value from CHKREG
         GBLB  &BXA_PGM                * PGM already expanded?
         GBLC  &BXA_ENTRY              * Entry type of program
         GBLC  &BXA_SUBR               * Name of current routine
         GBLC  &BXA_SUBRTP             * Type of current routine
         GBLC  &SYSASCE                * ASC environment AR or P
         LCLC  &ASCMODE                * ASC mode at entry
         LCLC  &_TYPE                  * Type of subroutine
         LCLC  &_SUBR1                 * Register in SUBR parameter
         LCLA  &_SUBR1N                * Register nr of &_SUBR1
         LCLC  &OPCD                   * Generated opcode mnemonic
         LCLA  &I                      * Index into SUBRS
.*
.* PGM must have been included
         AIF   (&BXA_PGM).NOERR0
         MNOTE 8,'PGM macro must be coded before using EXSR'
.NOERR0  ANOP
.*
.* Check SUBR parameter
         AIF   (K'&SUBR EQ 0).ERR1A    *
         AIF   ('&SUBR'(1,1) NE '(').NOERR1
&_SUBR1  SETC  '&SUBR(1)'              * Extract register name
         CHKREG &_SUBR1                *
         AIF   (&BXA_RC GT 4).ERR1B    *
&_SUBR1N SETA  &BXA_NUMVAL             * Save register number
         AGO   .NOERR1                 *
.ERR1A   MNOTE 8,'No subroutine name specified'
         MEXIT ,                       *
.ERR1B   MNOTE 8,'&_SUBR1 is not a valid register'
         MEXIT ,                       *
.NOERR1  ANOP  ,                       *
.*
.* Check SUBRS parameter
         AIF   (K'&SUBRS EQ 0 AND '&SUBR'(1,1) EQ '(').ERR2A
         AIF   (K'&SUBRS NE 0 AND '&SUBR'(1,1) NE '(').ERR2B
         AIF   (K'&SUBRS EQ 0).NOERR2
         AIF   ('&SUBRS'(1,1) NE '(').ERR2C
         AGO   .NOERR2
.ERR2A   MNOTE 4,'Missing SUBRS-operand for EXSR (reg)'
         AGO   .NOERR2
.ERR2B   MNOTE 4,'SUBRS-operand has no meaning: target of EXSR is not (*
               register)'
         AGO   .NOERR2
.ERR2C   MNOTE 8,'SUBRS-operand must be specified within parentheses'
.NOERR2  ANOP
.*
.* From ESTAE-type routines EXSR cannot be used (yet), because R13 may
.* or may not be a valid pointer to a save-area. In ESTAE-routines, it
.* is R11 which addresses our own work-area. The Save-area addressed by
.* R11 however, cannot be used: it may (or may not) be occupied.
         AIF   ('&BXA_SUBRTP' NE 'ESTAE').NOERR3
.ERR3    MNOTE 12,'EXSR cannot be used from within an ESTAE-type routin*
               e'
         MEXIT
.NOERR3  ANOP
.*
.* Check TYPE parameter
         AIF   ('&TYPE' EQ '').DFT4
&_TYPE   SETC  '&TYPE'                 * Copy specified value
         AIF   ('&TYPE' EQ 'EXT').NOERR4
         AIF   ('&TYPE' EQ 'EXT').NOERR4
.ERR4    MNOTE 8,'Subroutine type must be INT or EXT (Internal/eXternal*
               )'
         MEXIT
.DFT4    ANOP
&_TYPE   SETC  'INT'                   * Use INT as default value
.NOERR4  ANOP
.*
.* Check ARSAVE parameter
         AIF   ('&ARSAVE' EQ '').NOERR5
         AIF   ('&ARSAVE' EQ 'NO').NOERR5
         AIF   ('&ARSAVE' NE 'YES').ERR5A
         AIF   ('&_TYPE' NE 'EXT').ERR5B
         AGO   .NOERR5
.ERR5A   MNOTE 8,'ARSAVE parameter must be YES or NO'
         MEXIT
.ERR5B   MNOTE 8,'ARSAVE=YES can be specified only for EXTernal subrout*
               ines'
         MEXIT
.NOERR5  ANOP
.*
.* For ARSAVE=YES, SUBR must not be R14 or R15
         AIF   ('&ARSAVE' NE 'YES').NOERR6
         AIF   ('&SUBR'(1,1) NE '(').NOERR6
         AIF   (&_SUBR1N LT 14).NOERR6 *
.ERR6A   MNOTE 8,'Cannot use R14 or R15 to pass routine address'
         MEXIT ,                       *
.NOERR6  ANOP  ,                       *
.*
.* Define internal macro
         EXSR0 ,                       * Define EXSR_ADD_ENTRY
.*
.* If subroutine not a (reg), add subroutine name to array
         AIF   ('&SUBR'(1,1) EQ '(').SUBRREG * Skip if target is (reg)
         EXSR_ADD_ENTRY &SUBR,&_TYPE   * Add entry to arrays
.SUBRREG ANOP
.*
.* Loop thru SUBRS
&I       SETA  0
.LOOP1   ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&SUBRS).LOOP1OK
         EXSR_ADD_ENTRY &SUBRS(&I),&_TYPE
         AGO   .LOOP1
.LOOP1OK ANOP
.*
.* Generate code
&LABEL   LABEL
         AIF   ('&_TYPE' EQ 'INT').INTSR
         AIF   ('&_TYPE' EQ 'EXT').EXTSR
         MNOTE 12,'Internal error'
         MEXIT
.*
.* External subroutine handling: always handled in primary mode!
.EXTSR   ANOP  ,                       * Generate EXSR to external subr
&ASCMODE SETC  '&SYSASCE'              * Keep current ASC mode setting
         AIF   ('&ASCMODE' EQ 'P').PRIMARY
         SETMODE PRIM                  * Switch to primary
.PRIMARY ANOP  ,                       *
.*
.* For conditional requests: generate an enclosing IF
         AIF   (K'&COND EQ 0).SKIPIF   * Issue IF statement if COND
         IF    &COND                   *    was specified
.SKIPIF  ANOP  ,                       *
.*
.* Save access registers if ARSAVE=YES was specified
         AIF   ('&ARSAVE' NE 'YES').SAVEOK
         BASR  R14,R0                  * Retrieve address + amode
         LA    R15,_EXSR&SYSNDX-*      * Offset to return address
         AR    R14,R15                 * Make R14 point to return addr.
         BAKR  R14,R0                  * Create stack entry
.SAVEOK  ANOP  ,                       * ARs saved or no save requested
.*
.* Copy target address (either a VCON or a register) to R15
         AIF   ('&SUBR'(1,1) EQ '(').CPYREG
         L     R15,=V(&SUBR)           * Load address of subroutine
         AGO   .R15OK                  *
.CPYREG  ANOP  ,                       *
         CPY   R15,&SUBR(1),NOWARN     * Copy EPA to R15
.R15OK   ANOP  ,                       *
         BASR  R14,R15                 * Invoke external subroutine
.*
.* If ARSAVE=YES was specified: restore access registers
         AIF   ('&ARSAVE' NE 'YES').RESTOK
         PR    ,                       * Restore regs from stack entry
_EXSR&SYSNDX LABEL ,                   * Return point for PR
.RESTOK  ANOP  ,                       *
.*
.* For conditional requests: generate ENDIF
         AIF   (K'&COND EQ 0).SKIPEIF  * Issue ENDIF statement if COND
         ENDIF ,                       *    was specified
.SKIPEIF ANOP  ,                       *
.*
.* Revert to AR mode if we forced primary mode
         AIF   ('&ASCMODE' EQ 'P').PRIMOK
         SETMODE AR                    * Resume AR mode
.PRIMOK  ANOP
         MEXIT
.*
.INTSR   ANOP  ,                       * Generate call to internal subr
         AIF   (K'&COND EQ 0 AND '&SUBR'(1,1) EQ '(').BASR
&OPCD    SETC  'BAS&COND'              * Create conditional BAS opcode
         &OPCD R14,&SUBR               * Execute subroutine
         MEXIT ,                       *
.*
.* An unconditional EXSR with the target address in a register
.* should generate a BASR instruction in stead of some BAS-variation
.BASR    ANOP  ,                       *
         BASR  R14,&SUBR(1)            * Execute subroutine
.*
.MEND    MEND
./ ADD NAME=EXSR0    0100-20096-20096-0111-00170-00170-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Define internal macro for EXSR
.*
         EXSR0  ,                      *
.*
.* Define variables
         GBLB  &BXA_EXSR               * EXSR expanded before?
.*
.* Define internal macro on the first invocation.
         AIF   (&BXA_EXSR).MEND
&BXA_EXSR SETB 1
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
.*
         MACRO
         EXSR_ADD_ENTRY &NAME,&TYPE    * Name and type of subroutine
         GBLC  &BXA_SRUNAM(50)         * Used subroutine names
         GBLA  &BXA_SRUCT(50)          * Subroutine invocation count
         GBLC  &BXA_SRUASC(50)         * Used subroutine ASC-modes
         GBLB  &BXA_SRUSVC(50)         * Used subroutine SVC-modes
         GBLC  &BXA_SRDNAM(50)         * Defined subroutine names
         GBLC  &BXA_SRDTYP(50)         * Defined subroutine types
         GBLA  &BXA_SRNAML             * Max subr name length
         GBLC  &BXA_SR_CALLER(50)      * Calling macro-names
         GBLC  &BXA_SR_CALLED(50)      * Called macro-names
         GBLC  &BXA_SUBR               * Current subr name or *MAIN
         GBLC  &BXA_USEC_ROUT(50)      * Routines for SCOPE=CALLED
         GBLC  &BXA_USEC_ARGL(50)      * Labels for SCOPE=CALLED
         GBLC  &BXA_USEC_ARG1(50)      * DSECTs for SCOPE=CALLED
         GBLC  &BXA_USEC_ARG2(50)      * Bases for SCOPE=CALLED
         GBLB  &BXA_SVCMODE            * Current SVC-mode
         GBLC  &SYSASCE                * Current ASC-mode
         LCLA  &I,&J                   * Index into BXA_SRUNAM/SRUCT
.*
.* Update subroutine usage count
&I       SETA  0                       * Init loop
.LOOP1   ANOP
&I       SETA  &I+1                    * Point to next entry
         AIF   (&I GT N'&BXA_SRUNAM).LOOP1AD * End of array: add entry
         AIF   ('&BXA_SRUNAM(&I)' EQ '&NAME').LOOP1IN * Increment use
         AGO   .LOOP1                  * Go process next entry
.LOOP1AD ANOP  ,                       * Add entry to UNAM
&BXA_SRUCT(&I) SETA 1                  * Use count is now 1
&BXA_SRUSVC(&I) SETB (&BXA_SVCMODE)    * Copy current SVC-mode
&BXA_SRUASC(&I) SETC '&SYSASCE'        * Copy current ASC-mode
&BXA_SRUNAM(&I) SETC '&NAME'           * Name into empty entry
         AIF   (K'&NAME LE &BXA_SRNAML).LOOP1OK * Check name length
&BXA_SRNAML SETA K'&NAME               * Increase max name length
         AIF   (K'&NAME GE 5).LOOP1OK  * Max name length must at least
&BXA_SRNAML SETA 5                     *   equal 5 (*MAIN)
         AGO   .LOOP1OK                * And we're done
.* Entry found: update count and check interface
.LOOP1IN ANOP  ,                       * Increment use count
&BXA_SRUCT(&I) SETA &BXA_SRUCT(&I)+1   *           by one
.*
         AIF   (&BXA_SRUSVC(&I) EQ &BXA_SVCMODE).NOERR0A
.ERR0A   MNOTE 8,'Interface error: &NAME called both in SVC and in prob*
               lem mode'
.NOERR0A ANOP
         AIF   ('&BXA_SRUASC(&I)' EQ '&SYSASCE').NOERR0B
         AIF   ('&TYPE' EQ 'EXT').NOERR0B * EXT always called in prim.
.ERR0B   MNOTE 8,'Interface error: &NAME called both in Access Register*
                and in Primary mode'
.NOERR0B ANOP
.LOOP1OK ANOP
.*
.* Add entry to subroutine call cross-reference tables
&I       SETA  1+N'&BXA_SR_CALLED
&BXA_SR_CALLER(&I) SETC '&BXA_SUBR'
&BXA_SR_CALLED(&I) SETC '&NAME'
.*
.* If the called subroutine is defined, it must be an INT or EXT subr
&I       SETA  0                       * I indexes into BXA_SRDNAM
.LOOP2   ANOP  ,                       * Loop thru BXA_SRDNAM
&I       SETA  &I+1                    * Point to next entry
         AIF   (&I GT N'&BXA_SRDNAM).LOOP2NF * Not found: skip
         AIF   ('&NAME' NE '&BXA_SRDNAM(&I)').LOOP2 * Continue search
.* Called subr is defined: check its type
         AIF   ('&BXA_SRDTYP(&I)' EQ 'INT').LOOP2OK
         AIF   ('&BXA_SRDTYP(&I)' EQ 'EXT').LOOP2OK
.ERR1A   MNOTE 8,'You cannot EXSR to a subroutine of type &BXA_SRDTYP(&*
               I)'
         AGO   .LOOP2OK
.LOOP2NF ANOP  ,                       * If external subr: add entry
         AIF   ('&TYPE' NE 'EXT').LOOP2OK
.*
.* External subroutine name not found: add entry to arrays
&I       SETA  1+N'&BXA_SRDNAM         * Point to first free entry
&BXA_SRDNAM(&I) SETC '&NAME'           * Add subroutine name
&BXA_SRDTYP(&I) SETC 'EXT'             *   and subroutine type
&BXA_SRDDUP(&I) SETB 0                 * External subr never a dup!
         AIF   (K'&NAME LE &BXA_SRNAML).LOOP2OK * Check name length
&BXA_SRNAML SETA K'&NAME               * Increase max. name length
         AIF   (K'&NAME GE 5).LOOP2OK  * Max. name length must at least
&BXA_SRNAML SETA 5                     *   equal 5 (for *MaIN)
.LOOP2OK ANOP
.*
.* USEs with SCOPE=CALLED must be propagated in the BXA_USEC tables
&I       SETA  0                       * I indexes BXA_USEC_...
.LOOP3   ANOP  ,                       * For all entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&BXA_USEC_ROUT).LOOP3OK * At end: quit loop
         AIF   ('&BXA_USEC_ROUT(&I)' NE '&BXA_SUBR').LOOP3
.* Match: copy to called subroutine, unless such an entry already
.*        exists. &I points to located entry.
&J       SETA  0                       * J is second-search index
.LOOP4   ANOP  ,                       * See if entry exists
&J       SETA  &J+1                    * Point to next entry
         AIF   (&J GT N'&BXA_USEC_ROUT).LOOP4NF * At end: not found
         AIF   ('&BXA_USEC_ROUT(&J)' NE '&NAME').LOOP4
         AIF   ('&BXA_USEC_ARGL(&J)' NE '&BXA_USEC_ARGL(&I)').LOOP4
         AIF   ('&BXA_USEC_ARG1(&J)' NE '&BXA_USEC_ARG1(&I)').LOOP4
         AIF   ('&BXA_USEC_ARG2(&J)' NE '&BXA_USEC_ARG2(&I)').LOOP4
.* Entry to be copied exists for this subroutine: skip copy operation
         AGO   .LOOP3
.* Second search yielded nothing: Add entry for called subroutine
.LOOP4NF ANOP
&J       SETA  N'&BXA_USEC_ROUT+1      * J points to new entry
&BXA_USEC_ROUT(&J) SETC '&NAME'        * Use USE for this subroutine
&BXA_USEC_ARGL(&J) SETC '&BXA_USEC_ARGL(&I)' * USE label parameter
&BXA_USEC_ARG1(&J) SETC '&BXA_USEC_ARG1(&I)' * USE dsect parameter
&BXA_USEC_ARG2(&J) SETC '&BXA_USEC_ARG2(&I)' * USE base parameter
         AGO   .LOOP3
.LOOP3OK ANOP
.*
.MEND    MEND
         POP   PRINT,NOPRINT
.*
.MEND    MEND
./ ADD NAME=EXSVC    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Execute an SVC-instruction with variable length
.*
&LABEL   EXSVC &SVC                    * SVC number to use
.*
.* &SVC   specifies the SVC number to be used. In stead of a SVC-number
.*        a register containing the SVC-number must be specified.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXSVC                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   EXQ   &SVC,,SVC
.*
.MEND    MEND
./ ADD NAME=EXTR     0100-20096-20096-0111-00077-00077-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Execute an TRanslate-instruction with variable length
.*
&LABEL   EXTR  &SRC,                   * Source for TRanslate          *
               &TABLE,                 * Translate table               *
               &DECR                   * Decrement indicator
.*
.* &SRC   specifies the source field for the translate. In stead of a
.*        length, a register containing the length must be specified.
.* &TABLE specifies the translate table to be used.
.* &DECR  a value of NODEC indicates that the length in the register
.*        specified in the TO length field, contains the length of
.*        the translate minus 1 for the EX instruction.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXTR                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   EXQ   &SRC,&TABLE,TR,&DECR
.*
.MEND    MEND
./ ADD NAME=EXTRN    0100-20096-20096-0111-00147-00147-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's EXTRN statement
.*
&LABEL   EXTRN ,                       * Control block names are in    *
                                       *    &SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXTRN                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_EXTRNOVR           * Ptr to last valid
         GBLC  &BXA_EXTRNOVR_LAB(50)   * Labels
         GBLC  &BXA_EXTRNOVR_NAM(50)   * New names
         LCLC  &NAM                    * New name for current entry
         LCLB  &RESET                  * On if last entry removed
         LCLA  &I                      * Index for override tables
         LCLA  &S                      * Index for &SYSLIST
         LCLC  &EXTRN                  * 1 EXTRN name from SYSLIST
         LCLC  &EXTRNS                 * Modified list of EXTRN names
         LCLC  &WXTRNS                 * List of WXTRN names
.*
.* Check LABEL parameter
         AIF   (K'&LABEL EQ 0).NOERR1
.ERR1    MNOTE 8,'Label parameter not valid for EXTRN statement'
         MEXIT
.NOERR1  ANOP
.*
.* Build &EXTRNS and &WXTRNS from &SYSLIST
&S       SETA  0                       * S indexes &SYSLIST
.LOOP1   ANOP  ,                       * For all entries in SYSLIST
&S       SETA  &S+1                    * Point next entry
         AIF   (&S GT N'&SYSLIST).LOOP1OK * At end: quit loop
&EXTRN   SETC  '&SYSLIST(&S)'          * Extract external name
&I       SETA  0                       * I indexes override tables
.LOOP2   ANOP  ,                       * Search for matching name
&I       SETA  &I+1                    * Point next override entry
         AIF   (&I GT &BXA_EXTRNOVR).LOOP2NF * Not found
         AIF   ('&EXTRN' NE '&BXA_EXTRNOVR_LAB(&I)').LOOP2 * Mismatch
.* Found override entry, remove it from override tables
&NAM     SETC  '&BXA_EXTRNOVR_NAM(&I)' * Extract *option or new name
         AIF   (&I EQ &BXA_EXTRNOVR).NOCOPY
&BXA_EXTRNOVR_LAB(&I) SETC '&BXA_EXTRNOVR_LAB(&BXA_EXTRNOVR)'
&BXA_EXTRNOVR_NAM(&I) SETC '&BXA_EXTRNOVR_NAM(&BXA_EXTRNOVR)'
.NOCOPY  ANOP  ,                       *
&BXA_EXTRNOVR SETA &BXA_EXTRNOVR-1     * Remove copied entry
         AIF   (&BXA_EXTRNOVR GT 0).NORESET
&RESET   SETB  1                       *
.NORESET ANOP  ,                       *
.*
.* Check for suppress option
         AIF   ('&NAM' EQ '*SUPPRESS').LOOP1 * No action needed
.*
.* Check for weak external option
         AIF   ('&NAM' EQ '*WXTRN').LOOP2WX * No action needed
.*
.* Must be a *NEWNAME option
&EXTRNS  SETC  '&EXTRNS'.','.'&NAM'    * Add new name to EXTRNS
         AGO   .LOOP1                  * Go process next SYSLIST entry
.*
.* *WXTRN specified: add entry to &WXTRNS
.LOOP2WX ANOP  ,                       *
&WXTRNS  SETC  '&WXTRNS'.','.'&EXTRN'  * Add name to WXTRNS
         AGO   .LOOP1                  * Go process next SYSLIST entry
.*
.* No override found
.LOOP2NF ANOP  ,                       * No override:
&EXTRNS  SETC  '&EXTRNS'.','.'&EXTRN'  *   add name to EXTRNS
         AGO   .LOOP1                  * Go process next SYSLIST entry
.LOOP1OK ANOP  ,                       *
.*
.* Remove leading comma from EXTRNS and/or WXTRNS
         AIF   (K'&EXTRNS EQ 0).EXTRNSOK * No EXTRNs left
&EXTRNS  SETC  '&EXTRNS'(2,*)          * Remove leading comma
.EXTRNSOK ANOP ,                       *
         AIF   (K'&WXTRNS EQ 0).WXTRNSOK * No weak externals created
&WXTRNS  SETC  '&WXTRNS'(2,*)          * Remove leading comma
.WXTRNSOK ANOP ,                       *
.*
.* Generate _EXTRN and/or WXTRN statements
         AIF   (K'&EXTRNS EQ 0).NOEXTRN * No EXTRNs left
         _EXTRN &EXTRNS                *
.NOEXTRN ANOP  ,                       *
         AIF   (K'&WXTRNS EQ 0).NOWXTRN * No WXTRNs created
         WXTRN &WXTRNS                 *
.NOWXTRN ANOP  ,                       *
.*
         AIF   (NOT &RESET).MEND       *
         OPSYNS _EXTRN                 * Reset EXTRN opcode
.*
.MEND    MEND
./ ADD NAME=EXTRNOVR 0100-20096-20096-0111-00159-00159-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro fills the stack of EXTRN modifications for use by the
.* EXTRN macro, which replaces the assembler's EXTRN instruction
.*
&LABEL   EXTRNOVR &OPT,                * See below for valid keywords  *
               &NEWNAM                 * New name for *NEWNAME option
.*
.* &LABEL mandatory, except when &OPT=*END
.*        The specified EXTRN name will be overridden.
.* &OPT   specifies one of the following:
.*        *END cancels all outstanding EXTRNOVR requests
.*        *SUPPRESS suppresses the definition of &LABEL
.*        *WXTRN   changes the EXTRN name to a WXTRN name
.*        *NEWNAME changes the EXTRN for &LABEL into one for &NEWNAM,
.*              i.e. Specify *NEWNAME,newname
.* &NEWNAM Specifies the new name, if &OPT=*NEWNAME
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXTRNOVR               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_EXTRNOVR           * Ptr to last valid
         GBLC  &BXA_EXTRNOVR_LAB(50)   * Labels
         GBLC  &BXA_EXTRNOVR_NAM(50)   * New names
         LCLA  &I                      * Index
.*
.* Check LABEL parameter
         AIF   (K'&LABEL GT 0).NOERR1
         AIF   ('&OPT' EQ '*END').NOERR1
.ERR1    MNOTE 8,'Missing label parameter'
         MEXIT
.NOERR1  ANOP
.*
.* Check the OPT parameter
         AIF   (K'&OPT NE 0).NOERR2A
.ERR2A   MNOTE 8,'Missing parameter(s)'
         MEXIT
.NOERR2A ANOP  ,
         AIF   ('&OPT' EQ '*SUPPRESS').NOERR2
         AIF   ('&OPT' EQ '*WXTRN').NOERR2
         AIF   ('&OPT' EQ '*NEWNAME').NOERR2
         AIF   ('&OPT' EQ '*END').NOERR2
.ERR2B   MNOTE 8,'&OPT is not a valid keyword'
         MEXIT
.NOERR2  ANOP  ,
.*
.* Check the NEWNAME parameter (must be present if &OPT = *NEWNAME)
         AIF   ('&OPT' EQ '*NEWNAME' AND K'&NEWNAM EQ 0).ERR3A
         AGO   .NOERR3
.ERR3A   MNOTE 8,'New name not specified with option *NEWNAME'
         MEXIT
.NOERR3  ANOP
.*
.* Check number of parameters
         AIF   ('&OPT' EQ '*END' AND N'&SYSLIST GT 1).ERR4A
         AIF   ('&OPT' EQ '*END').NOERR4
         AIF   ('&OPT' EQ '*SUPPRESS' AND N'&SYSLIST GT 1).ERR4A
         AIF   ('&OPT' EQ '*SUPPRESS').NOERR4
         AIF   ('&OPT' EQ '*WXTRN' AND N'&SYSLIST GT 1).ERR4A
         AIF   ('&OPT' EQ '*WXTRN').NOERR4
         AIF   (N'&SYSLIST GT 2).ERR4B
         AGO   .NOERR4
.ERR4A   MNOTE 4,'More than 1 argument: remainder ignored'
         AGO   .NOERR4
.ERR4B   MNOTE 4,'More than 2 arguments: remainder ignored'
.NOERR4  ANOP
.*
.* Option *END requires differen logic
         AIF   ('&OPT' EQ '*END').END
.*
.* Other options: add entry to tables
&I       SETA  &BXA_EXTRNOVR+1         * Next free entry
&BXA_EXTRNOVR_LAB(&I) SETC '&LABEL'    * Insert label
&BXA_EXTRNOVR_NAM(&I) SETC '&OPT'      * Insert *SUPPRESS or *WXTRN
         AIF   ('&OPT' NE '*NEWNAME').NAMOK * For option *NEWNAME:
&BXA_EXTRNOVR_NAM(&I) SETC '&NEWNAM'   * replace *NEWNAME with new name
.NAMOK   ANOP  ,                       *
&BXA_EXTRNOVR SETA &I                  * And update ptr to last valid
.*
.* Replace EXTRN-instruction by our EXTRN-macro on the first override
         AIF   (&BXA_EXTRNOVR GT 1).MEND
         OPSYNS EXTRN                  * Replace EXTRN by _EXTRN
         MEXIT
.*
.* Ending current EXTRNOVR requests. Issue a message for any unused
.* entries in BXA_EXTRNOVR tables.
.END     ANOP
         AIF   (&BXA_EXTRNOVR EQ 0).MEND * No entries remain
&I       SETA  0                       * I indexes BXA_EXTRNOVR_xxx
.LOOP1   ANOP  ,                       * For all current entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &BXA_EXTRNOVR).LOOP1OK * At end: quit loop
         MNOTE 4,'EXTRNOVR for &BXA_EXTRNOVR_LAB(&I) discarded'
         AGO   .LOOP1
.LOOP1OK ANOP
&BXA_EXTRNOVR SETA 0                   * Reset valid counter to 0
.*
.* Disable our DS-macro by replacing _DS by original DS-instruction
         OPSYNS _DS                    * Reset DS-instruction
.*
.MEND    MEND
./ ADD NAME=EXTRT    0100-20096-20096-0111-00093-00093-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Execute an TRanslate-and-Test instruction with variable length
.*
&LABEL   EXTRT &SRC,                   * Source for TRanslate and test *
               &TABLE,                 * Translate table               *
               &DECR                   * Decrement indicator
.*
.* &SRC   specifies the source field for the translate and test.
.*        In stead of a length, a register containing the length must
.*        be specified.
.* &TABLE specifies the translate table to be used.
.* &DECR  a value of NODEC indicates that the length in the register
.*        specified in the TO length field, contains the length of
.*        the translate and test minus 1 for the EX instruction.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXTRT                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_USED_REGS(16)      * USE status of regs 0-15
.*
.* Check availability or R1 and R2
         AIF   (NOT &BXA_USED_REGS(2)).NOERR1
.ERR1    MNOTE 4,'EXTRT will modify register R1, which is currently in *
               USE'                    *
.NOERR1  ANOP  ,                       *
.*
         AIF   (NOT &BXA_USED_REGS(3)).NOERR2
.ERR2    MNOTE 4,'EXTRT will modify register R2, which is currently in *
               USE'                    *
.NOERR2  ANOP  ,                       *
.*
&LABEL   EXQ   &SRC,&TABLE,TRT,&DECR
.*
.MEND    MEND
./ ADD NAME=EXXC     0100-20096-20096-0111-00077-00077-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Execute an eXclusive-or-Characters instruction with variable length
.*
&LABEL   EXXC  &TO,                    * Xor destination               *
               &FROM,                  * Xor source                    *
               &DECR                   * Decrement indicator
.*
.* &TO   specifies the destination field for the Xor. In stead of a
.*       length, a register containing the length must be specified.
.* &FROM specifies the second operand for the Xor.
.* &DECR a value of NODEC indicates that the length in the register
.*       specified in the TO length field, contains the length of
.*       the move minus 1 for the EX instruction.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC EXXC                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
&LABEL   EXQ   &TO,&FROM,XC,&DECR
.*
.MEND    MEND
./ ADD NAME=GEN      0100-20096-20096-0111-00284-00284-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates a replaced machine instruction
.*
&LABEL   GEN   &X                      * &X must be a valid instruction
.*                                     * Other operands in SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC GEN                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Stack pointer
         GBLA  &BXA_STK_LVL(5)         * Nesting levels
         LCLA  &LVL                    * Current nesting level
         LCLA  &OPS                    * Nr of operands on instruction
.*
.* Determine current nesting level
         AIF   (&BXA_STK EQ 0).LVLOK   * &LVL remains zero
&LVL     SETA  (&BXA_STK_LVL(&BXA_STK)) * Current nesting level
.LVLOK   ANOP  ,                       *
.*
.* Determine nr of operands
&OPS     SETA  N'&SYSLIST              *
         AIF   (&OPS LT 1).ERR1A       * Missing opcode
         AIF   ('&X'(1,1) NE '_').ERR1B * Invalid instruction
&OPS     SETA  &OPS-1                  * Nr of operands for &X
         AIF   (&OPS GT 3).ERR1C       * Too many arguments
         AGO   .NOERR1                 *
.ERR1A   MNOTE 8,'No instruction specified'
         MEXIT ,                       *
.ERR1B   MNOTE 8,'Invalid instruction specified: &X'
         MEXIT ,                       *
.ERR1C   MNOTE 4,'More than three operands specified: remainder ignored*
               '                       *
.NOERR1  ANOP  ,                       *
.*
.* Generate code with indentation
         AIF   (&LVL EQ 0).GEN0        *
         AIF   (&LVL EQ 1).GEN1        *
         AIF   (&LVL EQ 2).GEN2        *
         AIF   (&LVL EQ 3).GEN3        *
         AIF   (&LVL EQ 4).GEN4        *
         AIF   (&LVL EQ 5).GEN5        *
         AIF   (&LVL EQ 6).GEN6        *
         AIF   (&LVL EQ 7).GEN7        *
         AIF   (&LVL EQ 8).GEN8        *
         AIF   (&LVL EQ 9).GEN9        *
.ERR2A   MNOTE 4,'&LVL nesting levels of structured programming'
         AGO   .GEN10                  *
.*
.* Generate code
.GEN0    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN0_2      *
         AIF   (&OPS EQ 3).GEN0_3      *
         AIF   (&OPS EQ 1).GEN0_1      *
&LABEL   &X    ,                       *
         MEXIT ,                       *
.GEN0_1  ANOP  ,                       *
&LABEL   &X    &SYSLIST(2)             *
         MEXIT ,                       *
.GEN0_2  ANOP  ,                       *
&LABEL   &X    &SYSLIST(2),&SYSLIST(3) *
         MEXIT ,                       *
.GEN0_3  ANOP  ,                       *
&LABEL   &X    &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
         MEXIT ,                       *
.*
.GEN1    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN1_2      *
         AIF   (&OPS EQ 3).GEN1_3      *
         AIF   (&OPS EQ 1).GEN1_1      *
&LABEL    &X   ,                       *
          MEXIT ,                      *
.GEN1_1   ANOP ,                       *
&LABEL    &X   &SYSLIST(2)             *
          MEXIT ,                      *
.GEN1_2   ANOP ,                       *
&LABEL    &X   &SYSLIST(2),&SYSLIST(3) *
          MEXIT ,                      *
.GEN1_3   ANOP ,                       *
&LABEL    &X   &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
          MEXIT ,                      *
.*
.GEN2    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN2_2      *
         AIF   (&OPS EQ 3).GEN2_3      *
         AIF   (&OPS EQ 1).GEN2_1      *
&LABEL     &X  ,                       *
           MEXIT ,                     *
.GEN2_1    ANOP ,                      *
&LABEL     &X  &SYSLIST(2)             *
           MEXIT ,                     *
.GEN2_2    ANOP ,                      *
&LABEL     &X  &SYSLIST(2),&SYSLIST(3) *
           MEXIT ,                     *
.GEN2_3    ANOP ,                      *
&LABEL     &X  &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
           MEXIT ,                     *
.*
.GEN3    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN3_2      *
         AIF   (&OPS EQ 3).GEN3_3      *
         AIF   (&OPS EQ 1).GEN3_1      *
&LABEL      &X ,                       *
            MEXIT ,                    *
.GEN3_1     ANOP ,                     *
&LABEL      &X &SYSLIST(2)             *
            MEXIT ,                    *
.GEN3_2     ANOP ,                     *
&LABEL      &X &SYSLIST(2),&SYSLIST(3) *
            MEXIT ,                    *
.GEN3_3     ANOP ,                     *
&LABEL      &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
            MEXIT ,                    *
.*
.GEN4    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN4_2      *
         AIF   (&OPS EQ 3).GEN4_3      *
         AIF   (&OPS EQ 1).GEN4_1      *
&LABEL       &X ,                      *
             MEXIT ,                   *
.GEN4_1      ANOP ,                    *
&LABEL       &X &SYSLIST(2)            *
             MEXIT ,                   *
.GEN4_2      ANOP ,                    *
&LABEL       &X &SYSLIST(2),&SYSLIST(3)
             MEXIT ,                   *
.GEN4_3      ANOP ,                    *
&LABEL       &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
             MEXIT ,                   *
.*
.GEN5    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN5_2      *
         AIF   (&OPS EQ 3).GEN5_3      *
         AIF   (&OPS EQ 1).GEN5_1      *
&LABEL        &X ,                     *
              MEXIT ,                  *
.GEN5_1       ANOP ,                   *
&LABEL        &X &SYSLIST(2)           *
              MEXIT ,                  *
.GEN5_2       ANOP ,                   *
&LABEL        &X &SYSLIST(2),&SYSLIST(3)
              MEXIT ,                  *
.GEN5_3       ANOP ,                   *
&LABEL        &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
              MEXIT ,                  *
.*
.GEN6    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN6_2      *
         AIF   (&OPS EQ 3).GEN6_3      *
         AIF   (&OPS EQ 1).GEN6_1      *
&LABEL         &X ,                    *
               MEXIT ,                 *
.GEN6_1        ANOP ,                  *
&LABEL         &X &SYSLIST(2)          *
               MEXIT ,                 *
.GEN6_2        ANOP ,                  *
&LABEL         &X &SYSLIST(2),&SYSLIST(3)
               MEXIT ,                 *
.GEN6_3        ANOP ,                  *
&LABEL         &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
               MEXIT ,                 *
.*
.GEN7    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN7_2      *
         AIF   (&OPS EQ 3).GEN7_3      *
         AIF   (&OPS EQ 1).GEN7_1      *
&LABEL          &X ,                   *
                MEXIT ,                *
.GEN7_1         ANOP ,                 *
&LABEL          &X &SYSLIST(2)         *
                MEXIT ,                *
.GEN7_2         ANOP ,                 *
&LABEL          &X &SYSLIST(2),&SYSLIST(3)
                MEXIT ,                *
.GEN7_3         ANOP ,                 *
&LABEL          &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
                MEXIT ,                *
.*
.GEN8    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN8_2      *
         AIF   (&OPS EQ 3).GEN8_3      *
         AIF   (&OPS EQ 1).GEN8_1      *
&LABEL           &X ,                  *
                 MEXIT ,               *
.GEN8_1          ANOP ,                *
&LABEL           &X &SYSLIST(2)        *
                 MEXIT ,               *
.GEN8_2          ANOP ,                *
&LABEL           &X &SYSLIST(2),&SYSLIST(3)
                 MEXIT ,               *
.GEN8_3          ANOP ,                *
&LABEL           &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
                 MEXIT ,               *
.*
.GEN9    ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN9_2      *
         AIF   (&OPS EQ 3).GEN9_3      *
         AIF   (&OPS EQ 1).GEN9_1      *
&LABEL            &X ,                 *
                  MEXIT ,              *
.GEN9_1           ANOP ,               *
&LABEL            &X &SYSLIST(2)       *
                  MEXIT ,              *
.GEN9_2           ANOP ,               *
&LABEL            &X &SYSLIST(2),&SYSLIST(3)
                  MEXIT ,              *
.GEN9_3           ANOP ,               *
&LABEL            &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
                  MEXIT ,              *
.*
.GEN10   ANOP  ,                       *
         AIF   (&OPS EQ 2).GEN10_2     *
         AIF   (&OPS EQ 3).GEN10_3     *
         AIF   (&OPS EQ 1).GEN10_1     *
&LABEL             &X ,                *
                   MEXIT ,             *
.GEN10_1           ANOP ,              *
&LABEL             &X &SYSLIST(2)      *
                   MEXIT ,             *
.GEN10_2           ANOP ,              *
&LABEL             &X &SYSLIST(2),&SYSLIST(3)
                   MEXIT ,             *
.GEN10_3           ANOP ,              *
&LABEL             &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)
                   MEXIT ,             *
.*
.MEND    MEND
./ ADD NAME=GENMAPS  0100-20096-20096-0111-00161-00161-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro expands 1 or more mapping macro's
.* Used by PGM-macro
.*
&LABEL   GENMAPS &MAPS,                * Sublist of map-macro's        *
               &LIST=NO                * YES/NO create map-listing
.*
.* &MAPS specifies - in sublist notation - the mapping macro's to be
.*       expanded. Must be in sublist notation.
.* &LIST specifies whether or not the listing of the expanded mapping
.*       macro's are to be included in the assembly listing.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC GENMAPS                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &SP_SHOWALL             * List suppression switch
         GBLC  &BXA_MAPS_LST           * List option on highest level
         LCLB  &LVL1                   * On if first level invocation
         LCLC  &_GEN                   * GEN/NOGEN option for PRINT
         LCLC  &_PRINT                 * Print option for PRINT
         LCLC  &_PROPT                 * Print option for PUSH/POP
         LCLC  &SLIST                  * Copy of SYSLIST
         LCLA  &S                      * Index for SYSLIST
         LCLA  &I                      * Index into list of map-macro's
         LCLC  &MACRO                  * Name of macro to generate
.*
.* If parameter LIST not yes or no: issue error
         AIF   ('&LIST' EQ 'YES').NOERR1
         AIF   ('&LIST' EQ 'NO').NOERR1
.ERR1    MNOTE 8,'Parameter LIST must specify either YES or NO'
.NOERR1  ANOP
.*
.* If this is not a recursive invocation, then copy the LIST-option to
.* a global, for use in subsequent (recursive) invocations.
         AIF   (K'&BXA_MAPS_LST NE 0).NOTLVL1
&LVL1    SETB  1                       * First level invocation:
&BXA_MAPS_LST SETC '&LIST'             *       set global
         AIF   (NOT &SP_SHOWALL).NOTLVL1 * For SHOWALL-option
&BXA_MAPS_LST SETC 'YES'               *    force value of LIST=YES
.NOTLVL1 ANOP
.*
.* Set _GEN variable according to LIST parameter
&_GEN    SETC  'NOGEN'                 * LIST=NO is default
         AIF   ('&BXA_MAPS_LST' NE 'YES').NOGEN
&_GEN    SETC  'GEN'
.NOGEN   ANOP
.*
.* Set listing options
         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP/PRINT
&_PRINT  SETC  ',NOPRINT'              * Not ALL: omit PRINT lines
&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines
.PRINTOK ANOP
.*
.* If maps not specified as a sublist, do so
         AIF   (K'&MAPS EQ 0).GOON     * First parm missing
         AIF   ('&MAPS'(1,1) EQ '(').GOON * &MAPS already a sublist
&SLIST   SETC  '&SYSLIST(1)'           * Set SLIST to first entry
&S       SETA  1                       * S indexes SYSLIST
.LOOPS   ANOP  ,                       * Loop thru SYSLIST entries
&S       SETA  &S+1                    * Point next entry
         AIF   (&S GT N'&SYSLIST).LOOPSOK * SYSLIST done?
&SLIST   SETC  '&SLIST'.',&SYSLIST(&S)' * Append SYSLIST entry
         AGO   .LOOPS                  * And go copy nesxt entry
.LOOPSOK ANOP
         GENMAPS (&SLIST),             * Recurse using sublist         *
               LIST=&BXA_MAPS_LST      *    notation
         MEXIT
.GOON    ANOP
.*
.* Set up loop control logic
&I       SETA  0
.LOOP    ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&MAPS).LOOPOK
.*
&MACRO   SETC  '&MAPS(&I)'             * Take value from list
         AIF   (K'&MACRO LT 3).PREFIX  * Too short to contain 'MAP'
         AIF   ('&MACRO'(1,3) EQ 'MAP').PREFOK * Prefix is OK
.PREFIX  ANOP  ,                       * Add prefix 'MAP' to macro-name
&MACRO   SETC  'MAP&MACRO'             * Prefix with MAP
.PREFOK  ANOP
         AIF   (K'&MACRO LE 8).MACROK  * If macro is too long ...
&MACRO   SETC  '&MACRO'(1,8)           *  truncate to 8 positions
.MACROK  ANOP
.*
.* Expand macro-operand and issue message for listing
         PUSH  PRINT&_PROPT            * Save print options
         PRINT ON,&_GEN,NODATA&_PRINT  * Set print options
         &MACRO ,                      * Expand macro from list
         POP   PRINT&_PROPT            * Restore print options
.*
.* If list=yes: eject page
         AIF   ('&_GEN' EQ 'NOGEN').LOOP
         EJECT
         AGO   .LOOP                   * And do next dsect
.*
.* We're done: restore printing options and exit
.LOOPOK  ANOP
         AIF  (NOT &LVL1).MEND
&BXA_MAPS_LST SETC ''                  * Reset global for list-option
.*
.MEND    MEND
./ ADD NAME=GLUE     0100-20096-20096-0111-00203-00203-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Call a program that may have another AMODE
.*
.* This macro is intended for calling a program that may or may not
.* be in another AMODE. Registers R0 thru R13 arer supposed to be
.* set up for interfacing with the target program, and will therefore
.* not be modified by this program.
.*
&LABEL   GLUE  &DEST,                  * Destination register          *
               &AMODE,                 * Desired AMODE                 *
               &MF=                    * Macro form
.*
.* &DEST specifies the register containing the destination address
.*       which is the entry point address of the program to be
.*       invoked.
.* &AMODE specifies the AMODE for the called program, used only on MF=E
.*     - 31: Makes sure the destination pgm is called with AMODE=31
.*     - 24: Makes sure the destination pgm is called with AMODE=24
.*     - Omitted: Amode is taken from &DEST-register:
.*       AMODE 24 if bit0 is 0, AMODE 31 if bit0 is 1
.* &MF   Specifies the macro form:
.*     - L specifies the list form
.*     - (E,addr) or (E,(reg)) specifies the execute form
.*       addr must be a location, that is addressed thru R13, and
.*       must reside below the 16M-line
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC GLUE                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &_MF                    * E or L
         LCLC  &_MF2                   * Plist address of MF=(E,addr)
         LCLC  &_REG                   * Plist ptr if MF=(E,(reg))
         LCLC  &EPA_OFFSET             * Offset of EPA in PLIST
&EPA_OFFSET SETC '8'                   * Length of code before EPA
.*
.* Check the DEST parameter
         AIF   (K'&DEST NE 0).NOERR1   * If specified: OK
         AIF   ('&MF' EQ 'L').NOERR1   * Optional for MF=L
.ERR1    MNOTE 8,'No destination register specified'
.NOERR1  ANOP
.*
.* Check AMODE parameter
         AIF   ('&_MF' EQ 'L' AND T'&AMODE EQ 'O').NOERR2
         AIF   ('&_MF' EQ 'L').ERR2A
         AIF   (T'&AMODE EQ 'O').NOERR2
         AIF   ('&AMODE' EQ '31').NOERR2
         AIF   ('&AMODE' EQ '24').NOERR2
         AGO   .ERR2B
.ERR2A   MNOTE 4,'AMODE parameter ignored: not allowed with MF=L'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'If specified, AMODE parameter must be 24 or 31'
.NOERR2  ANOP
.*
.* Check the MF parameter
         AIF   (K'&MF EQ 0).ERR3A      * Must be specified
&_MF     SETC  '&MF'                   * Assume MF=x
         AIF   ('&MF' EQ 'L').NOERR3   * Ok if MF=L
         AIF   ('&MF'(1,1) NE '(').ERR3B * MF<>L: must be sublist
         AIF   (N'&MF NE 2).ERR3B      * Must be two subparms
&_MF     SETC  '&MF(1)'                * Assume MF=(x,...)
&_MF2    SETC  '&MF(2)'                * Extract plist address
         AIF   ('&MF(1)' NE 'E').ERR3B * Must be MF=(E,...)
         AIF   ('&_MF2'(1,1) NE '(').NOERR3 * Plist not a (reg)
&_REG    SETC  '&MF(2,1)'              * Extract register
         AIF   ('&_REG' EQ 'R14').ERR3C
         AIF   ('&_REG' EQ 'R15').ERR3C
         AIF   ('&_REG' EQ '14').ERR3C
         AIF   ('&_REG' EQ '15').ERR3C
         AGO   .NOERR3
.ERR3A   MNOTE 8,'MF parameter not specified'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'MF parameter must be L, (E,addr), or (E,(reg))'
         AGO   .NOERR3
.ERR3C   MNOTE 8,'Plist address cannot be passed in R14 or R15'
.NOERR3  ANOP
.*
.* Check the number of parameters
         AIF   ('&_MF' EQ 'L' AND N'&SYSLIST GT 1).ERR4
         AIF   ('&_MF' EQ 'E' AND N'&SYSLIST GT 2).ERR4
         AGO   .NOERR4
.ERR4    MNOTE 4,'Too many parameters specified: ignored'
.NOERR4  ANOP
.*
.* Select the right MF
         AIF   ('&_MF' EQ 'E').MFE
         AIF   ('&_MF' EQ 'L').MFL
         MNOTE 12,'Internal error'
.*
.MFE     ANOP
.*
.* Put destination address into plist
         AIF   ('&_REG' NE '').PUTR    * Plist addressed by reg?
         ST    &DEST,&EPA_OFFSET+&_MF2 * Store address into plist
         AGO   .PUTOK
.PUTR    ANOP  ,                       * Use reg to address plist
         ST    &DEST,&EPA_OFFSET.(,R15) * Store address into plist
.PUTOK   ANOP
.*
.* If AMODE specified: insert it into the destination address
         AIF   (T'&AMODE EQ 'O').AMOK  * No amode specified
         AIF   ('&AMODE' EQ '31').AM31 * Check AMODE
.AM24    ANOP  ,                       * Insert zeros in bits 0-7
         AIF   ('&_REG' NE '').AM24R   * Plist addressed by reg?
         MVI   &EPA_OFFSET+&_MF2,X'00' * Make it a clean 24-bit address
         AGO   .AMOK
.AM24R   ANOP  ,                       * Use _reg to address plist
         MVI   &EPA_OFFSET.(&_REG),X'00' * Insert 8 zero-bits
         AGO   .AMOK
.*
.AM31    ANOP  ,                       * Insert 1 into bit 0
         AIF   ('&_REG' NE '').AM31R   * Plist addressed by reg?
         OI    &EPA_OFFSET+&_MF2,BIT0  * Turn on high-order bit
         AGO   .AMOK
.AM31R   ANOP  ,                       * Use _reg to address plist
         OI    &EPA_OFFSET.(&_REG),BIT0 * Insert a single 1-bit
.AMOK    ANOP  ,                       * AMode in EPA now ok
.*
.* Form the return address, with high-order bit set
         BASR  R14,R0                  * R14 now points to this address
_GLUE1&SYSNDX EQU *                    *
         LA    R15,_GLUE2&SYSNDX-_GLUE1&SYSNDX * offset to ret-point
         ALR   R14,R15                 * Point to ret-addr with amode  *
                                       *       preserved
         AIF   ('&_REG' NE '').PLISTR  * Plist pointered by reg?
         LA    R15,&_MF2               * Point to plist
         AGO   .PLISTOK
.PLISTR  ANOP
         LR    R15,&_REG               * Copy plist-addr to R15
.PLISTOK ANOP  ,                       * R15 now ptr to plist
.*
.* Call the 'plist' - which actually is a mini-routine.
         BAKR  R14,R15                 * Call program through glue-mod
_GLUE2&SYSNDX EQU *                    * Return-point after BAKR
         MEXIT
.*
.MFL     ANOP
&LABEL   LABEL H
         L     R15,&EPA_OFFSET.(,R15)  * Load AMODE + dest.address
         BASSM R14,R15                 * Call intended program
         PR    ,                       * Reset AMODE & return to caller
         DS    F                       * Destination addr, bit 0=AMODE
         MEXIT
.*
.MEND    MEND
./ ADD NAME=GOTO     0100-20096-20096-0111-00151-00151-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: GOTO
.* Conditionally branches to a target
.*
&LABEL   GOTO  ,                       * SYSLIST contains condition
.*
.* Syntax:
.* 0) GOTO label
.* 1) GOTO label,condition
.* 2) GOTO label,UNLESS,condition
.* 3) GOTO label,(condition)
.* 4) GOTO label,(UNLESS,condition)
.* condition: as in IF macro
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC GOTO                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Index to last valid
         LCLC  &ARGS                   * SYSLIST as a string
         LCLA  &I                      * Stack pointer
         LCLC  &COND                   * Condition arg for GOTO
.*
.* Check number of parameters
         AIF   (N'&SYSLIST EQ 0).ERR1
         AIF   (K'&SYSLIST(1) EQ 0).ERR1
         AGO   .NOERR1
.ERR1    MNOTE 8,'No destination for GOTO specified'
         MEXIT
.NOERR1  ANOP
.*
.* Check number of parameters
         AIF   (N'&SYSLIST LT 2).BRANCH * No condition: branch
         AIF   (K'&SYSLIST(2) EQ 0).ERR2
         AGO   .NOERR2
.ERR2    MNOTE 4,'No condition specified'
         MEXIT
.NOERR2  ANOP
.*
.* Check number of parameters for SYSLIST(2) = UNLESS
&COND    SETC  'TRUE'
&I       SETA  1                       * Skip destination label
         AIF   ('&SYSLIST(2)' NE 'UNLESS').NOERR3
&COND    SETC  'FALSE'
&I       SETA  2                       * Skip label & UNLESS
         AIF   (N'&SYSLIST LT 3).ERR3
         AIF   (K'&SYSLIST(3) EQ 0).ERR3
         AGO   .NOERR3
.ERR3    MNOTE 8,'No condition specified'
         MEXIT
.NOERR3  ANOP
.*
.* Build ARGS from &SYSLIST. &I already set for loop
         AIF   ('&SYSLIST(&I+1)'(1,1) EQ '(' AND N'&SYSLIST EQ &I+1).PA*
               ROK
.LOOP1   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AGO   .LOOP1                  * And go process next entry
.LOOP1OK ANOP
&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,
         AGO   .GOTO
.*
.* Condition already parenthesized
.PAROK   ANOP  ,
&ARGS    SETC  '&SYSLIST(&I+1)'        * Copy condition
.*
.* Generate embedded IF statement with specified label
.GOTO    ANOP  ,
&I       SETA  &BXA_STK                * Copy current stack pointer
&LABEL   IF    &ARGS,                  * Condition for GOTO            *
               TARGET=&SYSLIST(1),     * Target for branch             *
               COND=&COND              * FALSE if UNLESS specified
         AIF   (&I EQ &BXA_STK).MEND   * No new stack entry!
.*
.* Remove new stack entry
&BXA_STK SETA  &BXA_STK-1              * Remove new IF-entry from stack
         MEXIT
.*
.* For an unconditional GOTO we generate a Branch to the label
.BRANCH  ANOP  ,                       *
&ARGS    SETC  '&SYSLIST(1)'           * Extract branch target
         AIF   ('&ARGS'(1,1) EQ '(').BRANREG
         B     &ARGS                   *
         MEXIT ,                       *
.*
.* Branch to a target which is a register
.BRANREG ANOP  ,                       *
&ARGS    SETC  '&SYSLIST(1,1)'         * Extract branch target
         BR    &ARGS                   *
.*
.MEND    MEND
./ ADD NAME=IF       0100-20096-20096-0111-00330-00330-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: IF
.* Combines with ELSE and ENDIF to conditionally execute code-blocks
.*
.* If the SYSLIST conatains only a single argument, which is enclosed
.* in parentheses, then that string must be passed to IF$ as is.
.* Otherwise, the arguments must be assembled into a parenthesized
.* string, which is then passed to IF$.
.*
&LABEL   IF    &TARGET=,               * Optional target if cond. met  *
               &COND=                  * Condition for use with TARGET
.*                                     * Condition in &SYSLIST
.*
.* Syntax - See IF$ for basic IF-syntax
.* A) Basic condition - as in IF$
.* B) Several basic conditions, separated by AND:
.*    cond1,AND,cond2,AND,cond3,...
.* C) Several basic conditions, separated by OR:
.*    cond1,OR,cond2,OR,cond3,...
.* D) Mixing AND and OR is not supported.
.* E) Condition nesting by means of parentheses is not supported.
.*
.* If TARGET is not specified, a normal IF-THEN-ELSE will be built.
.* For TARGET specified and COND=TRUE or omitted, if the specified
.*   condition is met, a branch to TARGET will be taken.
.* For TARGET specified and COND=FALSE, if the specified condition is
.*   not met, a branch to TARGET will be taken.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC IF                     * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_LBL(5)         * Labels
         GBLA  &BXA_STK_LVL(5)         * Levels
         LCLC  &ARGS                   * SYSLIST as a string
         LCLA  &I,&J                   * Index into SYSLIST
         LCLA  &LVL                    * Current level
         LCLC  &OP                     * A single operator from SYSLIST
         LCLC  &LOGOP                  * Logical operation AND/OR
         LCLC  &ARG(5)                 * Condition strings
         LCLA  &A                      * Index into &ARG
         LCLB  &SYSL1                  * On if condition in SYSLIST(1)
.*
.* Variables for steering generation of IF$ statements
         LCLC  &_LABEL                 * Label of IF
         LCLC  &NCOND                  * Normal condition
         LCLC  &FCOND                  * Final condition
         LCLC  &NTARG                  * Normal target
         LCLC  &FTARG                  * Final target
         LCLC  &LABEOT                 * End-of-then label
         LCLC  &LABEIF                 * End-of-if-statement label
.*
.* Check number of parameters
         AIF   (N'&SYSLIST EQ 0).ERR1
         AIF   (K'&SYSLIST(1) EQ 0).ERR1
         AGO   .NOERR1
.ERR1    MNOTE 8,'No condition specified'
         MEXIT
.NOERR1  ANOP
.*
.* Check COND parameter
         AIF   (K'&COND EQ 0).NOERR2
         AIF   ('&COND' NE 'TRUE' AND '&COND' NE 'FALSE').ERR2A
         AIF   (K'&TARGET EQ 0).ERR2B
         AGO   .NOERR2
.ERR2A   MNOTE 8,'COND must be either TRUE or FALSE'
         MEXIT
.ERR2B   MNOTE 4,'No TARGET specified, COND ignored'
.NOERR2  ANOP
.*
.* Condition may be in &SYSLIST or in &SYSLIST(1)
&J       SETA  (N'&SYSLIST)            * Nr of operands to extract
         AIF   (N'&SYSLIST GT 1).SYSLIST
         AIF   ('&SYSLIST(1)'(1,1) NE '(').SYSLIST
&SYSL1   SETB  1                       * Condition is in &SYSLIST(1)
&J       SETA  (N'&SYSLIST(1))         * Nr of operands to extract
.*
.* Build array ARG and check logical operators in condition string
.SYSLIST ANOP  ,
&I       SETA  0                       * I indexes &SYSLIST
&A       SETA  0                       * A indexes &ARGS
.LOOP3   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT &J).LOOP3OK      * At end: quit loop
.* Extract operator, add to ARGS string
         AIF   (&SYSL1).LOOP3L1
&OP      SETC  '&SYSLIST(&I)'          * Extract operator from Syslist
         AGO   .LOOP3OP
.LOOP3L1 ANOP  ,
&OP      SETC  '&SYSLIST(1,&I)'        * Extract operator from Syslist
.LOOP3OP ANOP  ,                       * &OP extracted from SYSLIST
         AIF   ('&OP' EQ 'AND').LOOP3LO * Handle logical
         AIF   ('&OP' EQ 'OR').LOOP3LO *   operator
&ARGS    SETC  '&ARGS'.','.'&OP'       * Add entry to ARGS
         AGO   .LOOP3                  * And go process next entry
.*
.LOOP3LO ANOP  ,                       * Logical Operator handling
         AIF   (K'&ARGS EQ 0).ERR3A    * Valid condition?
&A       SETA  &A+1                    * Point next ARG-entry
&ARG(&A) SETC  '&ARGS'(2,*)            * Remove lead comma in array
&ARGS    SETC  ''                      * Reset ARGS for next condition
         AIF   ('&OP' EQ '&LOGOP').LOOP3 * Next if logop ok.
         AIF   ('&LOGOP' NE '').ERR3B  * Not first logop: error
&LOGOP   SETC  '&OP'                   * Set logop on first pass
         AGO   .LOOP3
.*
.ERR3A   MNOTE 4,'Logical operator &OP ignored: not preceded by a valid*
                condition'
         AGO   .LOOP3
.ERR3B   MNOTE 8,'Cannot mix AND and OR in a single condition: &OP repl*
               aced by &LOGOP'
         AGO   .LOOP3
.LOOP3OK ANOP
.*
.* Check last condition string in ARGS
         AIF   (K'&ARGS EQ 0).ARGSMT   * ARGS empty?
&A       SETA  &A+1                    * Point next ARG-entry
&ARG(&A) SETC  '&ARGS'(2,*)            * Omit lead.comma in array
.ARGSMT  ANOP  ,                       * &ARGS is empty
.*
.* If no valid condition in ARG, issue error and abort
         AIF   (&A GT 0).NOERR4
.ERR4A   MNOTE 8,'No valid condition found'
         MEXIT
.NOERR4  ANOP
.*
.* Generate code: if there is only one condition, pass it to IF$ as is.
.* For more than 1 condition: generate successive IF$ invocations.
         AIF   (&A EQ 1).SIMPEXP       * 1 condition: simple expression
         AIF   ('&LOGOP' EQ 'AND').ANDEXP
         AIF   ('&LOGOP' EQ 'OR').OREXP
         MNOTE 12,'Internal error'
         MEXIT
.*
.* Handle AND expression
.ANDEXP  ANOP
         AIF   (K'&TARGET GT 0 AND '&COND' EQ 'TRUE').ANDTT
         AIF   (K'&TARGET GT 0 AND '&COND' EQ 'FALSE').ANDTF
.*
.* Normal AND of conditions; no target specified.
.* For each condition we must generate a
.*       GOTO  End_of_then,UNLESS,condition
.* If all conditions are met we will drop thru into the then block.
&NCOND   SETC  'FALSE'                 * Set UNLESS option for
&FCOND   SETC  'FALSE'                 *  normal and final GOTO
&LABEOT  SETC  '_IF_&SYSNDX'           * Determine end-of-then label
&LABEIF  SETC  ''                      * End-of-if not needed
&NTARG   SETC  '&LABEOT'               * Set target for normal
&FTARG   SETC  '&LABEOT'               *  and final GOTO
         AGO   .COMPEXP                * And go generate code
.*
.* AND of conditions, target specified with COND=TRUE
.* For each condition but the last we must generate a
.*       GOTO  End_of_if,UNLESS,condition
.* For the last condition we must generate a
.*       GOTO  TARGET,condition
.ANDTT   ANOP  ,
&NCOND   SETC  'FALSE'                 * Set UNLESS for normal GOTOs
&FCOND   SETC  'TRUE'                  * No UNLESS for final GOTO
&LABEOT  SETC  ''                      * End-of-then label not needed
&LABEIF  SETC  '_IF_&SYSNDX'           * End-of-if for failing condit.s
&NTARG   SETC  '&LABEIF'               * Set target for normal
&FTARG   SETC  '&TARGET'               *  and final GOTO
         AGO   .COMPEXP                * And go generate code
.*
.* AND of conditions, target specified with COND=FALSE
.* For each condition we must generate a
.*       GOTO  TARGET,UNLESS,condition
.ANDTF   ANOP  ,
&NCOND   SETC  'FALSE'                 * Set UNLESS for normal
&FCOND   SETC  'FALSE'                 *  and final GOTO
&LABEOT  SETC  ''                      * End-of-then label not needed
&LABEIF  SETC  ''                      * End-of-if label not needed
&NTARG   SETC  '&TARGET'               * Set target for normal
&FTARG   SETC  '&TARGET'               *  and final GOTO
         AGO   .COMPEXP                * And go generate code
.*
.* Handle OR expression
.OREXP   ANOP
         AIF   (K'&TARGET GT 0 AND '&COND' EQ 'TRUE').ORTT
         AIF   (K'&TARGET GT 0 AND '&COND' EQ 'FALSE').ORTF
.*
.* Normal OR of conditions; no target specified.
.* For each condition but the last we must generate a
.*       GOTO  Then,condition
.* For the last condition we must generate a
.*       GOTO  End-of-then,UNLESS,condition
&NCOND   SETC  'TRUE'                  * No UNLESS for nornal GOTOs
&FCOND   SETC  'FALSE'                 * Set UNLESS for final GOTO
&LABEOT  SETC  '_IF_&SYSNDX'           * Determine end-of-then label
&LABEIF  SETC  '_THEN_&SYSNDX'         * End-of-if label
&NTARG   SETC  '&LABEIF'               * Set target for normal
&FTARG   SETC  '&LABEOT'               *  and final GOTO
         AGO   .COMPEXP                * And go generate code
.*
.* OR of conditions, target specified with COND=TRUE
.* For each condition we must generate a
.*       GOTO  TARGET,condition
.ORTT    ANOP  ,
&NCOND   SETC  'TRUE'                  * Remove UNLESS for normal
&FCOND   SETC  'TRUE'                  *  and final GOTO
&LABEOT  SETC  ''                      * End-of-then label not needed
&LABEIF  SETC  ''                      * End-of-if label not needed
&NTARG   SETC  '&TARGET'               * Set target for normal
&FTARG   SETC  '&TARGET'               *  and final GOTO
         AGO   .COMPEXP                * And go generate code
.*
.* OR of conditions, target specified with COND=FALSE
.* For each condition but the last we must generate a
.*       GOTO  End_of_if,condition
.* For the last condition we must generate a
.*       GOTO  TARGET,UNLESS,condition
.ORTF    ANOP  ,
&NCOND   SETC  'TRUE'                  * Remove UNLESS for normal GOTOs
&FCOND   SETC  'FALSE'                 * Set UNLESS for final GOTO
&LABEOT  SETC  ''                      * End-of-then label not needed
&LABEIF  SETC  '_IF_&SYSNDX'           * End-of-if for failing condit.s
&NTARG   SETC  '&LABEIF'               * Set target for normal
&FTARG   SETC  '&TARGET'               *  and final GOTO
         AGO   .COMPEXP                * And go generate code
.*
.* Generate code as specified above
.COMPEXP ANOP  ,
&I       SETA  &BXA_STK                * Save current stack pointer
&_LABEL  SETC  '&LABEL'                * Copy label for first IF$
&A       SETA  0                       * I indexes &ARG array
.LOOP1   ANOP  ,                       * For all conditions but last
&A       SETA  &A+1                    * Point next condition
         AIF   (&A GE N'&ARG).LOOP1OK  * End before processing last one
&ARGS    SETC  '('.'&ARG(&A)'.')'      * Parenthesize condition string
&_LABEL  IF$   &ARGS,TARGET=&NTARG,COND=&NCOND
&_LABEL  SETC  ''                      * Do not generate label again
         AGO   .LOOP1                  * and go gen. next condition
.LOOP1OK ANOP  ,
.* Generate final condition
&ARGS    SETC  '('.'&ARG(&A)'.')'      * Parenthesize condition string
         IF$   &ARGS,TARGET=&FTARG,COND=&FCOND
.*
.* Insert End-of-if label, if it has been used
         AIF   (K'&LABEIF EQ 0).SKIPEIF
&LABEIF  LABEL ,
.SKIPEIF ANOP  ,
.*
.* Reset stack pointer to original position
.* Add an entry if the end-of-then label has been used
&BXA_STK SETA  &I                      * Reset ptr to saved value
         AIF   (K'&LABEOT EQ 0).MEND   * No new entry needed
.*
&LVL     SETA  1                       * Level is 1 if ...
         AIF   (&BXA_STK EQ 0).LVLOK   * the stack is empty
&LVL     SETA  &BXA_STK_LVL(&BXA_STK)+1 * otherwise: create next level
.LVLOK   ANOP  ,
&I       SETA  &BXA_STK+1              * Point next stack entry
&BXA_STK_OP(&I)  SETC 'IF'             * Indicate IF block in progress
&BXA_STK_LBL(&I) SETC '&LABEOT'        * Label for ELSE or ENDIF
&BXA_STK_LVL(&I) SETA &LVL             * Level for this structure
&BXA_STK SETA  &I                      * Update stack pointer
         MEXIT
.*
.* Generate embedded IF statement with parenthesized SYSLIST
.SIMPEXP ANOP  ,
&I       SETA  &BXA_STK                * Copy current stack pointer
&ARGS    SETC  '('.'&ARG(1)'.')'       * Parenthesize condition string
&LABEL   IF$   &ARGS,TARGET=&TARGET,COND=&COND
.*
.* Modify stack to reflect IF in stead of IF$
         AIF   (&I EQ &BXA_STK).MEND   * No new stack entry!
&BXA_STK_OP(&BXA_STK) SETC 'IF'        * Change IF$ into IF
.*
.MEND    MEND
./ ADD NAME=IF$      0100-20096-20096-0111-01855-01855-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: IF$
.* This macro takes 1 argument, which is a list of the actual arguments
.* The arguments come in 6 different syntax types. IF$ is a sub-macro
.* for use by the IF-macro. IF$ tests a single condition for IF.
.*
&LABEL   IF$   &TARGET=,               * Optional target if cond. met  *
               &COND=                  * Condition for TARGET
.*                                     * Condition in &SYSLIST(1)
.*
.* Syntax - 9 different versions allowed; each may or may not have
.* the target label specified.
.* 0 - cond                            * condition mnemonic
.* 1 - bitfield,...                    * Must share byte-location
.* 2 - NOT,bitfield,...                * Must share byte-location
.* 3 - ANY,bitfield,...                * Must share byte-location
.* 4 - field1,cond                     * storage or register
.*     cond: Z,NZ,M,NM,P,NP
.* 5 - field1,rel,field2               * storage and/or register
.*     rel: EQ,NE,LT,LE,GT,GE
.* 6 - cond,opcode,oper1,oper2         * condition with operation
.* 7 - codefield                       * only 1 can be specified
.* 8 - NOT,codefield                   * only 1 can be specified
.*
.* TARGET may be specified as a label-na, i.e. a RX-type address, or
.*        it may be specified as (register).
.* If TARGET is not specified, COND is ignored and a normal
.*    IF-THEN-ELSE-ENDIF of IF-THEN-ENDIF sequence will be generated.
.* If TARGET is specified, COND must be TRUE (which is the default)
.*    or it must specify FALSE. For COND=TRUE a branch to TARGET will
.*    be taken if the condition in &SYSLIST(1) is true, otherwise
.*    the branch to TARGET will be taken whenever the condition in
.*    &SYSLIST(1) is false.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC IF$                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_USED_REGS(16)      * USE status of registers
         GBLA  &BXA_NUMVAL             * Return value from CHKNUM
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_LBL(5)         * Labels
         GBLA  &BXA_STK_LVL(5)         * Levels
         LCLC  &_LABEL                 * Label used by GEN5 logic
         LCLC  &LBL                    * End-of-then-block label
         LCLA  &LVL                    * Level for this IF struct
         LCLA  &I,&J                   * Array pointer
         LCLA  &SYNTAX                 * 1 thru 5
         LCLC  &ARG                    * Single argument from SYSLIST
         LCLC  &ARG1                   * First argument from SYSLIST
         LCLA  &LEN1                   * Length of &ARG1 field
         LCLC  &ARG2                   * Second argument from SYSLIST
         LCLA  &LEN2                   * Length of &ARG2 field
         LCLC  &ARGNAM                 * Actual field name from &ARG
         LCLC  &ARGLBL                 * Label prefix from &ARG
         LCLC  &PRFLBL                 * Label prefix
         LCLA  &A                      * Pointer within &ARG
         LCLC  &LOC                    * Byte location
         LCLC  &_LOC                   * Current byte location
         LCLC  &MASK(8)                * Mask names for bit fields
         LCLA  &M                      * Pointer within &MASK
         LCLB  &BITS(8)                * Bits to be tested
         LCLA  &B                      * Pointer within &BITS
         LCLA  &MASKVAL                * Mask value
         LCLB  &MOREBITS               * On if more than 1 bit field
         LCLB  &ERROR                  * A serious error occurred
         LCLC  &TYPE1                  * Field type
         LCLC  &TYPE2                  * Field type
         LCLC  &COMBI(50)              * Field type combinations
         LCLC  &MNEM                   * Condition mnemonic
         LCLC  &TST                    * Test-condition (1-letter mnem)
         LCLC  &OPCD                   * Opcode for branching to ELSE
         LCLC  &OPCDINV                * Opcode for inverted compares
         LCLA  &REG                    * Temporary register number
         LCLA  &LITLEN                 * Length of &ARG2 as a literal
         LCLA  &LITLENN                * Length of &ARG2 as a number
         LCLB  &LITERAL                * 2nd argument is a literal
         LCLB  &DODROP                 * DROP required yes/no
         LCLB  &_TARGET                * TARGET with COND=TRUE?
         LCLC  &_TREG                  * TARGET register name/number
         LCLC  &CODEVAL                * Code value to test
.*
.* Check nr of arguments
         AIF   (N'&SYSLIST EQ 0).ERR1A
         AIF   (K'&SYSLIST(1) EQ 0).ERR1A
         AIF   ('&SYSLIST(1)'(1,1) NE '(').ERR1B
         AIF   ('&SYSLIST(1)'(K'&SYSLIST(1),1) NE ')').ERR1B
         AIF   (K'&SYSLIST(1) LT 3).ERR1C
&ARG     SETC  '&SYSLIST(1,1)'
         AIF   (K'&ARG EQ 0).ERR1C
         AIF   (N'&SYSLIST GT 1).ERR1D
         AGO   .NOERR1
.ERR1A   MNOTE 8,'Missing argument(s)'
         MEXIT
.ERR1B   MNOTE 8,'Condition not properly enclosed in parentheses'
         MEXIT
.ERR1C   MNOTE 8,'No valid condition found in first sublist'
         MEXIT
.ERR1D   MNOTE 4,'More than 1 condition: remainder ignored'
.NOERR1  ANOP
.*
.* Check COND parameter
         AIF   (K'&COND EQ 0).NOERR11
         AIF   (K'&TARGET EQ 0).ERR11A
         AIF   ('&COND' NE 'TRUE' AND '&COND' NE 'FALSE').ERR11B
         AGO   .NOERR11
.ERR11A  MNOTE 4,'COND specified without TARGET: COND ignored'
         AGO   .NOERR11
.ERR11B  MNOTE 8,'COND must be either TRUE or FALSE'
&ERROR   SETB  1                       * Signal error
.NOERR11 ANOP
.*
.* Check TARGET parameter
.* COND=TRUE must alter the branching logic, COND=FALSE only changes
.*    the target label for a false condition.
         AIF   (K'&TARGET EQ 0).NOERR18
         AIF   ('&TARGET'(1,1) NE '(').NOERR18
&_TREG   SETC  '&TARGET(1)'            *
         CHKREG &_TREG,g               * Must be a valid GPR
         AIF   (&BXA_RC GT 4).ERR18A   * Invalid register
         AGO   .NOERR18                *
.ERR18A  ANOP  ,                       *
&_TREG   SETC  (DOUBLE '&_TREG')       *
         MNOTE 8,'&_TREG is not a valid target register'
&ERROR   SETB  1                       * Signal error
.NOERR18 ANOP
         AIF   (K'&TARGET EQ 0).NOTARGT
         AIF   ('&COND' EQ 'FALSE').NOTARGT
&_TARGET SETB  1                       * Indicate TARGET with COND=TRUE
.NOTARGT ANOP
.*
.* Determine syntax type
&ARG     SETC  '&SYSLIST(1,1)'           * Extract first argument
         AIF   (K'&ARG NE 1).ARGNOT1
         AIF   ('&ARG' EQ 'E').SYNTAX06  * If the first argument is
         AIF   ('&ARG' EQ 'H').SYNTAX06  *  a valid condition
         AIF   ('&ARG' EQ 'L').SYNTAX06  *  mnemonic, then this is
         AIF   ('&ARG' EQ 'M').SYNTAX06  *  syntax 0
         AIF   ('&ARG' EQ 'O').SYNTAX06  *
         AIF   ('&ARG' EQ 'P').SYNTAX06  *
         AIF   ('&ARG' EQ 'Z').SYNTAX06  *
.ARGNOT1 ANOP  ,                         *
         AIF   (K'&ARG NE 2).ARGNOT2
         AIF   ('&ARG' EQ 'NE').SYNTAX06 *
         AIF   ('&ARG' EQ 'NH').SYNTAX06 *
         AIF   ('&ARG' EQ 'NL').SYNTAX06 *
         AIF   ('&ARG' EQ 'NM').SYNTAX06 *
         AIF   ('&ARG' EQ 'NO').SYNTAX06 *
         AIF   ('&ARG' EQ 'NP').SYNTAX06 *
         AIF   ('&ARG' EQ 'NZ').SYNTAX06 *
.ARGNOT2 ANOP  ,                         *
         AIF   ('&ARG' EQ 'NOT').SYNTAX28 * Keywords are easy
         AIF   ('&ARG' EQ 'ANY').SYNTAX3 * syntax identifiers
.* first argument must be a field: check type
&A       SETA  ('&ARG' FIND '+-*/(=),''') * Check for invalid chars
         AIF   (&A NE 0).SYNTAX45      * Must be either type 4 or 5
         AIF   (T'&ARG EQ 'b').SYNTAX1 * Bit-field defines syntax 1
         AIF   (T'&ARG EQ 'v').SYNTAX7 * Value-field defines syntax 7
.SYNTAX45 ANOP ,
         AIF   (N'&SYSLIST(1) EQ 2).SYNTAX4 * Only two arguments
         AIF   (K'&SYSLIST(1,3) EQ 0).SYNTAX4 * Third argument empty
         AGO   .SYNTAX5                * Remaining option
.*
.* Syntax 0 or 6: condition code checking with(out) operation
.SYNTAX06 ANOP
         AIF   (N'&SYSLIST(1) LT 4).SYNTAX0
         AGO   .SYNTAX6
.*
.* Syntax 2 or 8: NOT with either bitfield(s) or codefield value
.SYNTAX28 ANOP
         AIF   (N'&SYSLIST(1) LT 2).ERR13A * No field name
&ARG     SETC  '&SYSLIST(1,2)'         * Extract first field after NOT
         AIF   (K'&ARG EQ 0).ERR13A    * Field name omitted
&A       SETA  ('&ARG' FIND '+-*/(=),''') * Check for invalid chars
         AIF   (&A NE 0).ERR13B        * Cannot determine type
         AIF   (T'&ARG EQ 'b').SYNTAX2 * Bit-field defines syntax 1
         AIF   (T'&ARG EQ 'v').SYNTAX8 * Value-field defines syntax 7
         AGO   .ERR13C
.ERR13A  MNOTE 8,'Missing field name after NOT'
         MEXIT
.ERR13B  ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'Field name &ARG contains invalid characters'
         MEXIT
.ERR13C  MNOTE 8,'Field name &ARG is neither a bit field nor a code val*
               ue'
         MEXIT
.*
.* Syntax 0: condition code checking
.SYNTAX0 ANOP
&SYNTAX  SETA  0                       * Set syntax type
         AGO   .CHKCC
.*
.* Syntax 1: a list of bit-fields
.SYNTAX1 ANOP
&SYNTAX  SETA  1                       * Set syntax type
&I       SETA  0                       * List of fields starts at 1
         AGO   .CHKBITS
.*
.* Syntax 2: NOT, followed by a list of bit-fields
.SYNTAX2 ANOP
&SYNTAX  SETA  2                       * Set syntax type
&I       SETA  1                       * List of fields starts at 2
         AGO   .CHKBITS
.*
.* Syntax 3: ANY, followed by a list of bit-fields
.SYNTAX3 ANOP
&SYNTAX  SETA  3                       * Set syntax type
&I       SETA  1                       * List of fields starts at 2
         AGO   .CHKBITS
.*
.* Syntax 4: field, followed by a condition mnemonic
.SYNTAX4 ANOP
&SYNTAX  SETA  4                       * Set syntax type
         AGO   .CHKFLD1
.*
.* Syntax 5: field, followed by a condition, and another field
.SYNTAX5 ANOP
&SYNTAX  SETA  5                       * Set syntax type
         AGO   .CHKFLD1
.*
.* Syntax 6: condtion code test after specified operation
.SYNTAX6 ANOP
&SYNTAX  SETA  6                       * Set syntax type
         AGO   .CHKCC
.*
.* Syntax 7: code value test
.SYNTAX7 ANOP
&SYNTAX  SETA  7                       * Set syntax type
&I       SETA  1                       * Field name in subparm 1
         AGO   .CHKCODE
.*
.* Syntax 8: negative code value test
.SYNTAX8 ANOP
&SYNTAX  SETA  8                       * Set syntax type
&I       SETA  2                       * Field name in subparm 2
         AGO   .CHKCODE
.**********************************************************************
.*
.* Logic for condition code checking: syntax 0 and 6
.* - For syntax 0 no other parameters allowed
.* - For syntax 6 three additional parameters required
.*
.**********************************************************************
.*
.* Check number of arguments
.CHKCC   ANOP  ,
         AIF   (&SYNTAX EQ 0 AND N'&SYSLIST(1) GT 1).ERR12A
         AIF   (&SYNTAX EQ 6 AND N'&SYSLIST(1) GT 4).ERR12B
         AIF   (&SYNTAX EQ 0).NOERR12
         AIF   (&SYNTAX EQ 6).NOERR12
         MNOTE 12,'Internal error 12'
         MEXIT
.ERR12A  MNOTE 4,'More than one argument passed: remainder ignored'
         AGO   .NOERR12
.ERR12B  MNOTE 4,'More than four arguments passed: remainder ignored'
.NOERR12 ANOP  ,
.*
.* For syntax 0 - no more checks needed
         AIF   (&SYNTAX EQ 0).GENLBL   * Syntax 0: done
.*
.* Check operation code: must set the condition code
&ARG     SETC  '&SYSLIST(1,2)'         * Extract opcode
         AIF   (K'&ARG EQ 0).SYNTAX0   * Must be syntax 0 after all
&ARG     SETC  ' &ARG '                * Embed between blanks
&I       SETA  (' CR C CFC CS CDS CH CLR CL CLC CLI CLM CLCL EXCLC ' IN*
               DEX '&ARG')             * Is it a compare instruction?
         AIF   (&I NE 0).NOERR17
&I       SETA  (' AR A AH ALR AL SR S SH SLR SL ' INDEX '&ARG')
         AIF   (&I NE 0).NOERR17       * Is it an arithmetic operation?
&I       SETA  (' NR N NC NI XR X XC XI OR O OC OI ' INDEX '&ARG')
         AIF   (&I NE 0).NOERR17       * Is it a logical operation?
&I       SETA  (' ICM LTR LCR LNR LPR MVCL MVPG SLDA SLA SRDA SRA STCK *
               TS TM  TRT UPT ' INDEX '&ARG')
         AIF   (&I NE 0).NOERR17       * Some other valid instruction?
&I       SETA  (' AP CP ED EDMK SRP SP ZAP ' INDEX '&ARG')
         AIF   (&I NE 0).NOERR17       * Is it a decimal instruction?
&I       SETA  (' AXR ADR AD AER AE AWR AW AUR AU CDR CD CER CE LTDR   *
               LTER LCDR LCER LNDR LNER LPDR LPER SXR SDR SD SER SE    *
               SWR SW SUR SU ' INDEX '&ARG')
         AIF   (&I NE 0).NOERR17       * A floating point instruction?
&I       SETA  (' ESTA IAC LASP LRA MVCP MVCS MVCK RRBE SCK SIGP TAR   *
               TB TPROT ' INDEX '&ARG')
         AIF   (&I NE 0).NOERR17       * Some control instruction?
&I       SETA  (' EXTRT EXXC LT LTA24 LTC LTH LTHU ' INDEX '&ARG')
         AIF   (&I NE 0).NOERR17       * A macro of our own?
&ARG     SETC  (DOUBLE '&SYSLIST(1,2)')
.ERR17A  MNOTE 8,'Opcode &ARG is not known to set the condition code'
&ERROR   SETB  1                       * Signal error
.NOERR17 ANOP  ,
.*
         AGO   .GENLBL
.**********************************************************************
.*
.* Logic for bit-field checking: syntaxes 1, 2, and 3.
.* - All bit-names specified must specify the same byte of storage
.* - No bit name may be specified more than once
.* - All masks must be ored together
.*
.**********************************************************************
.*
.* Check all bit-field names for consistency
.CHKBITS ANOP  ,                       * Check all bit fields specified
&J       SETA  &I+1                    * Index of first bit field arg
         AIF   (&J EQ N'&SYSLIST(1)).ONLY1BF * Only 1 bit field?
&MOREBITS SETB 1                       * Indicate more than 1 bit-field
.ONLY1BF ANOP  ,
.*
&LOC     SETC  ''                      * Init location to 'unknown'
&M       SETA  0                       * Init pointer for MASK array
.*
.LOOP2   ANOP  ,                       * Loop thru bit-field names
&I       SETA  &I+1                    * Point next name
         AIF   (&I GT N'&SYSLIST(1)).LOOP2OK * At end: quit loop
&ARG     SETC  '&SYSLIST(1,&I)'        * Extract bit name
         AIF   (K'&ARG EQ 0).LOOP2     * Skip omitted entry
&A       SETA  ('&ARG' FIND '+-*/(=),''') * Check for invalid chars
         AIF   (&A NE 0).ERR2A         * Error: not a field-name
         AIF   (T'&ARG NE 'b').ERR2B   * Error: not a bit-field
.* Remove leading USING labels
&ARGNAM  SETC  '&ARG'                  * Copy complete field name
.LOOP6   ANOP  ,                       *   to remove USE-labels
&A       SETA  ('&ARGNAM' FIND '.')    * Check for a period
         AIF   (&A EQ 0).LOOP6OK       * No more labels: quit loop
&ARGNAM  SETC  '&ARGNAM'(&A+1,*)       * Remove leading label + period
&A       SETA  (K'&ARG-K'&ARGNAM)      * Length of labels
&ARGLBL  SETC  '&ARG'(1,&A)            * Retrieve label
         AGO   .LOOP6
.LOOP6OK ANOP
.* Check that no duplicate name be entered
&J       SETA  0                       * J indexes MASK
.LOOP3   ANOP  ,                       * Loop thru defined mask names
&J       SETA  &J+1                    * Point next mask name
         AIF   (&J GT &M).LOOP3NF      * At end: name not found
         AIF   ('NAM' NE '&MASK(&J)').LOOP3 * Skip mismatch
         AGO   .ERR2E                  * Duplicate entry
.LOOP3NF ANOP  ,                       * Not found: add name to MASK
&M       SETA  &M+1                    * Point next available entry
&MASK(&M) SETC '&ARGNAM'               * Insert bit name into table
.* Safe to use created set symbol: continue checks
         GBLC  &(BXA_BITF_&ARGNAM)     * Name for byte location
&_LOC    SETC  '&(BXA_BITF_&ARGNAM)'   * Extract byte location
         AIF   (K'&_LOC EQ 0).ERR2C    * Error: no loction
         AIF   (K'&LOC EQ 0).LOOP2P1   * Unknown on first pass
         AIF   ('&_LOC' NE '&LOC').ERR2D * Error: different locations
         AGO   .LOOP2P2                * Skip first-pass logic
.LOOP2P1 ANOP  ,                       * First pass: set location
&LOC     SETC  '&_LOC'                 * LOC set from first bit-field
&PRFLBL  SETC  '&ARGLBL'               * Set prefix label
.LOOP2P2 ANOP  ,                       * First pass logic done
         AIF   ('&ARGLBL' NE '&PRFLBL').ERR2D
.* Now set on the bits in &BITS to be tested
&MASKVAL SETA  L'&ARGNAM               * Retrieve mask value
         AIF   (NOT &MOREBITS).LOOP2   * Skip this if there's 1 field
&B       SETA  0                       * B indexes BITS array
&J       SETA  256                     * J is compare value
.LOOP4   ANOP  ,                       * Loop thru bits 0-7
&B       SETA  &B+1                    * Index to next bit
         AIF   (&B GT 8).LOOP4OK       * At end: quit loop
&J       SETA  (&J SRA 1)              * Halve the compare value
         AIF   (&MASKVAL LT &J).LOOP4  * This bit off: check next
&BITS(&B) SETB 1                       * This bit to be tested
&MASKVAL SETA  (&MASKVAL-&J)           * Subtract tested bit
         AGO   .LOOP4                  * And go check next bit
.LOOP4OK ANOP  ,
         AGO   .LOOP2                  * Go check next bit field
.*
.ERR2A   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not a valid name for a bit field'
&ERROR   SETB  1                       * Signal error
         AGO   .LOOP2                  * Go check next entry
.ERR2B   ANOP  ,
         MNOTE 8,'&ARG is not defined as a bit field'
&ERROR   SETB  1                       * Signal error
         AGO   .LOOP2                  * Go check next entry
.ERR2C   ANOP  ,
         MNOTE 8,'Location of bit field &ARG is unknown'
&ERROR   SETB  1                       * Signal error
         AGO   .LOOP2                  * Go check next entry
.ERR2D   ANOP  ,
         MNOTE 8,'Location of bit field &ARG differs from preceding one*
                '
&ERROR   SETB  1                       * Signal error
         AGO   .LOOP2                  * Go check next entry
.ERR2E   ANOP  ,
         MNOTE 4,'Duplicate mention of bit field &ARG: ignored'
         AGO   .LOOP2                  * Go check next entry
.*
.* All bit fields checked: create compare value
.LOOP2OK ANOP  ,
         AIF   (NOT &MOREBITS).LOOP5OK * MASKVAL correct if 1 field
&MASKVAL SETA  0                       * Initialize mask value
&B       SETA  0                       * B indexes BITS array
&J       SETA  256                     * J is corresponding bit value
.LOOP5   ANOP  ,                       * Loop thru bits 0-7
&B       SETA  &B+1                    * Index to next bit
         AIF   (&B GT 8).LOOP5OK       * At end: quit loop
&J       SETA  (&J SRA 1)              * Halve the bit's value
         AIF   (NOT &BITS(&B)).LOOP5   * This bit off: check next
&MASKVAL SETA  (&MASKVAL+&J)           * Add value of bit to test
         AGO   .LOOP5                  * And go check next bit
.LOOP5OK ANOP  ,
.*
         AIF   (&MASKVAL NE 0).NOERR4  * Mask value 0: not a real test
.ERR4    MNOTE 4,'Condition mask is zero: not a useful test'
.NOERR4  ANOP
         AGO   .GENLBL
.**********************************************************************
.*
.* Logic for first field checking: syntaxes 4 and 5.
.* - The field must have a supported type
.*
.**********************************************************************
.CHKFLD1 ANOP  ,
.*
.* Argument 1 must be a field of a valid type
&ARG     SETC  '&SYSLIST(1,1)'         * Extract field name
&A       SETA  ('&ARG' FIND '+-*/(),''') * Check for invalid chars
         AIF   (&A NE 0).ERR5A         * Error: not a field-name
&TYPE1   SETC  T'&ARG                  * Extract field type
&A       SETA  ('ABCFGHRVXag' FIND '&TYPE1')
         AIF   (&A EQ 0).ERR5B         * Not a supported type
         AIF   ('&TYPE1' EQ 'C' AND &SYNTAX EQ 4).ERR5C
         AIF   (L'&ARG EQ 0).ERR5D     * Cannot normally happen
         AGO   .NOERR5
.ERR5A   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not a valid field name'
&ERROR   SETB  1
         AGO   .NOERR5
.ERR5B   MNOTE 8,'Field &ARG has an unsupported type: &TYPE1'
&ERROR   SETB  1
         AGO   .NOERR5
.ERR5C   MNOTE 8,'Cannot test a character field without a compare value*
               '
&ERROR   SETB  1
         AGO   .NOERR5
.ERR5D   MNOTE 8,'Field &ARG has zero length: cannot compare'
&ERROR   SETB  1
.NOERR5  ANOP  ,
.*
.* Other checks depend on syntax type
         AIF   (&SYNTAX EQ 4).CHKCOND
         AIF   (&SYNTAX EQ 5).CHKREL
         MNOTE 12,'Internal error 1'
         MEXIT
.**********************************************************************
.*
.* Logic for condition checking: syntax 4.
.* - Condition mnemonic must be a supported one
.* - Nr of arguments must be exactly 2
.*
.**********************************************************************
.CHKCOND ANOP  ,
.*
.* Operand 2 must be a valid condition mnemonic
         AIF   (N'&SYSLIST(1) LT 2).ERR3A * 2nd operand must be there
&ARG     SETC  '&SYSLIST(1,2)'         * Extract condition
         AIF   (K'&ARG EQ 0).ERR3A     * Error: empty parm
         AIF   ('&ARG' EQ 'M').NOERR3
         AIF   ('&ARG' EQ 'P').NOERR3
         AIF   ('&ARG' EQ 'Z').NOERR3
         AIF   ('&ARG' EQ 'NM').NOERR3
         AIF   ('&ARG' EQ 'NP').NOERR3
         AIF   ('&ARG' EQ 'NZ').NOERR3
         AGO   .ERR3B                  * Error: unknown condition
.ERR3A   MNOTE 8,'No condition entered'
&ERROR   SETB  1                       * Signal error
         AGO   .NOERR3
.ERR3B   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not a supported condition mnemonic'
&ERROR   SETB  1                       * Signal error
.NOERR3  ANOP  ,
.*
.* Check the number of parameters for syntax 4
         AIF   (N'&SYSLIST(1) LE 2).NOERR6A
.ERR6A   MNOTE 4,'More than two parameters passed: remainder ignored'
.NOERR6A ANOP
         AGO   .GENLBL                 * No more checks for syntax 4
.**********************************************************************
.*
.* Logic for relation checking: syntax 5.
.* - relation mnemonic must be a supported one
.* - Nr of arguments must be exactly 3
.* - Second field or literal must be of a supported type
.* - Types of both fields must be a supported combination
.*
.**********************************************************************
.CHKREL  ANOP
.*
.* Operand 2 must be a valid condition mnemonic
         AIF   (N'&SYSLIST(1) LT 2).ERR10A * 2nd operand must be there
&ARG     SETC  '&SYSLIST(1,2)'         * Extract relation
         AIF   (K'&ARG EQ 0).ERR10A    * Error: empty parm
&OPCD    SETC  'BNE'                    * Set branch-over-then opcode
&OPCDINV SETC  'BNE'                    *  and inverted comp. opcode
         AIF   ('&ARG' EQ 'EQ').NOERR10 *  for EQ condition
&OPCD    SETC  'BE'                     * Set branch-over-then opcode
&OPCDINV SETC  'BE'                     *  and inverted comp. opcode
         AIF   ('&ARG' EQ 'NE').NOERR10 *  for NE condition
&OPCD    SETC  'BNL'                    * Set branch-over-then opcode
&OPCDINV SETC  'BNH'                    *  and inverted comp. opcode
         AIF   ('&ARG' EQ 'LT').NOERR10 *  for LT condition
&OPCD    SETC  'BNH'                    * Set branch-over-then opcode
&OPCDINV SETC  'BNL'                    *  and inverted comp. opcode
         AIF   ('&ARG' EQ 'GT').NOERR10 *  for GT condition
&OPCD    SETC  'BH'                     * Set branch-over-then opcode
&OPCDINV SETC  'BL'                     *  and inverted comp. opcode
         AIF   ('&ARG' EQ 'LE').NOERR10 *  for LE condition
&OPCD    SETC  'BL'                     * Set branch-over-then opcode
&OPCDINV SETC  'BH'                     *  and inverted comp. opcode
         AIF   ('&ARG' EQ 'GE').NOERR10 *  for GE condition
         AGO   .ERR10B                  * Error: unknown relation
.ERR10A  MNOTE 8,'No relation entered'
&ERROR   SETB  1                       * Signal error
         AGO   .NOERR10
.ERR10B  ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not a supported relation mnemonic'
&ERROR   SETB  1                       * Signal error
.NOERR10 ANOP  ,
.*
.* Second field or literal Required
         AIF   (N'&SYSLIST(1) LT 3).ERR7A * 3d operand must be there
&ARG     SETC  '&SYSLIST(1,3)'         * Extract field name
         AIF   (K'&ARG EQ 0).ERR7A     * Error: empty parm
&A       SETA  ('0123456789' FIND '&ARG'(1,1)) * This is a number?
         AIF   (&A NE 0).ERR7NUM       * Yes: different checks!
         AIF   ('&ARG'(1,1) EQ '-').ERR7NNUM * Negative number!
         AIF   ('&ARG'(1,1) EQ '=').ERR7LIT * Literal: yet other checks
&A       SETA  ('&ARG' FIND '+-*/(=),''') * Check for invalid chars
         AIF   (&A NE 0).ERR7B         * Error: not a field-name
&TYPE2   SETC  T'&ARG                  * Extract field type
&A       SETA  ('ABCFGHRVXagv0' FIND '&TYPE2')
         AIF   (&A EQ 0).ERR7C         * Not a supported type
         AIF   ('&ARG' EQ '&SYSLIST(1,1)').ERR7G * Compare with self
&BXA_NUMVAL SETA L'&ARG                * Needed for equated literals
         AIF   ('&TYPE2' EQ '0' AND L'&ARG GE 0).LITLEN  * equated lit.
         AIF   ('&TYPE2' EQ '0' AND L'&ARG LT 0).LITLENN * find length
         AIF   ('&TYPE2' EQ 'v').ERR7VAL * Still other specific tests
         AIF   (L'&ARG EQ 0).ERR7H     * Cannot normally happen
         AGO   .NOERR7                 *
.*
.ERR7VAL ANOP  ,                       * Check value field comparison
.* Remove leading USING labels
&ARGNAM  SETC  '&ARG'                  * Copy complete field name
.LOOPA   ANOP  ,                       *   to remove USE-labels
&A       SETA  ('&ARGNAM' FIND '.')    * Check for a period
         AIF   (&A EQ 0).LOOPAOK       * No more labels: quit loop
&ARGNAM  SETC  '&ARGNAM'(&A+1,*)       * Remove leading label + period
&A       SETA  (K'&ARG-K'&ARGNAM)      * Length of labels
&ARGLBL  SETC  '&ARG'(1,&A)            * Retrieve label including dot
         AGO   .LOOPA                  *
.LOOPAOK ANOP  ,                       *
.* Safe to use created set symbol: extract location of field
         GBLC  &(BXA_BITF_&ARGNAM)     * Name for field location
&_LOC    SETC  '&(BXA_BITF_&ARGNAM)'   * Extract field location
         AIF   (K'&_LOC EQ 0).ERR7J    * Error: no location
&LOC     SETC  '&_LOC'                 * LOC set from code-field
&PRFLBL  SETC  '&ARGLBL'               * Set prefix label
&CODEVAL SETC  '&ARGNAM'               * Set code value to test
&ARG     SETC  '&PRFLBL'.'&LOC'        * Location of codefield
         AIF   ('&SYSLIST(1,1)' NE '&ARG').ERR7K * Must match!
         AGO   .NOERR7                 *
.*
.ERR7NUM ANOP  ,                       * Check literal number
&LITERAL SETB  1                       * Indicate this is a literal
&TYPE2   SETC  '0'                     * Set type to literal number
         CHKNUM VAL=&ARG,              *                               *
               MSGLVL=**,              * Suppress messages             *
               HEX=NO                  * Disallow hex
         AIF   (&BXA_NUMVAL EQ 0 AND '&ARG' NE '0'                     *
               AND '&ARG' NE '00' AND '&ARG' EQ '000').ERR7D
.LITLEN  ANOP  ,                       *
&LITLENN SETA  0                       * Determine length of literal
         AIF   (&BXA_NUMVAL EQ 0).NOERR7 * by cascading through the
&LITLENN SETA  1                           * possibilities
         AIF   (&BXA_NUMVAL LT 128).NOERR7
&LITLENN SETA  2
         AIF   (&BXA_NUMVAL LT 32768).NOERR7
&LITLENN SETA  3
         AIF   (&BXA_NUMVAL LT 8388608).NOERR7
&LITLENN SETA  4
         AIF   (&BXA_NUMVAL LE 2147483647).NOERR7
         AGO   .ERR7D
.*
.ERR7NNUM ANOP ,                       * Check negative literal number
&LITERAL SETB  1                       * Indicate this is a literal
&TYPE2   SETC  '0'                     * Set type to literal number
&ARG2    SETC  '&ARG'(2,*)             * Extract numerical part
         CHKNUM VAL=&ARG2,             *                               *
               MSGLVL=**,              * Suppress messages             *
               HEX=NO                  * Disallow hex
.LITLENN ANOP  ,                       *
         AIF   (&BXA_NUMVAL EQ 0).ERR7D
&LITLENN SETA  1                       * Determine length of literal
         AIF   (&BXA_NUMVAL LE 128).NOERR7 * by cascading thru the
&LITLENN SETA  2                             * possibilities
         AIF   (&BXA_NUMVAL LE 32768).NOERR7
&LITLENN SETA  3
         AIF   (&BXA_NUMVAL LE 8388608).NOERR7
&LITLENN SETA  4
         AIF   (&BXA_NUMVAL LE 2147483647).NOERR7
         AGO   .ERR7D
.*
.ERR7LIT ANOP  ,                       * Check a literal
&LITERAL SETB  1                       * Indicate this is a literal
&A       SETA  ('&ARG' FIND ',')       * Check for invalid chars
         AIF   (&A NE 0).ERR7E         * Error: not a literal
&TYPE2   SETC  '&ARG'(2,1)             * Extract field type
&A       SETA  ('ABCFHVX' FIND '&TYPE2') * Valid literal type?
         AIF   (&A EQ 0).ERR7F         * Not a supported type
.* Determine length of literal
         AIF   ('&ARG'(3,1) EQ 'L').LITLEN_X * Explicit length?
         AIF   ('&TYPE2' EQ 'A').LITLEN4 * Implicit length for A: 4
         AIF   ('&TYPE2' EQ 'F').LITLEN4 * Implicit length for F: 4
         AIF   ('&TYPE2' EQ 'H').LITLEN2 * Implicit length for H: 2
         AIF   ('&TYPE2' EQ 'V').LITLEN4 * Implicit length for V: 4
&LITLEN  SETA  (K'&ARG-4)                * Length of literal sec
         AIF   ('&TYPE2' EQ 'B').LITLENB * Implicit length for B
         AIF   ('&TYPE2' EQ 'X').LITLENX * Implicit length for X
.* Implicit length for character strings
&ARG2    SETC  '&ARG'(4,&LITLEN)       * Extract text of string
&I       SETA  ('&ARG2' FIND '''')     * Embedded quotes?
         AIF   (&I EQ 0).NOERR7        * No: length is ok.
.* Deduct half the number of embedded quotes from length
&I       SETA  0                       * I indexes &ARG2 string
&J       SETA  0                       * J is count of quotes
.LOOP8   ANOP  ,                       * Count all quotes
&I       SETA  &I+1                    * Point next character
         AIF   (&I GT K'&ARG2).LOOP8OK * At end: quit loop
         AIF   ('&ARG2'(&I,1) NE '''').LOOP8 * Skip mismatch
&J       SETA  &J+1                    * Increment quote count
         AGO   .LOOP8                  * And go check next character
.LOOP8OK ANOP  ,
&J       SETA  &J/2                    * Half the number of quotes
&LITLEN  SETA  &LITLEN-&J              * does not count as a character
         AGO   .NOERR7
.* Length of a binary constant is one eighth the number of digits
.LITLENB ANOP
&LITLEN  SETA  (&LITLEN+7)/8           * Always rounding up
         AGO   .NOERR7
.* Length of a hex constant is half the number of digits
.LITLENX ANOP
&LITLEN  SETA  (&LITLEN+1)/2           * Always rounding up
         AGO   .NOERR7
.* Implicit length for halfword literals
.LITLEN2 ANOP
&LITLEN  SETA  2
         AGO   .NOERR7
.* Implicit length for fullword, and address literals
.LITLEN4 ANOP
&LITLEN  SETA  4
         AGO   .NOERR7
.*
.* Find length of a literal with explicit length field
.LITLEN_X ANOP ,
         AIF   ('&TYPE2' EQ 'A').SETTYPR * Set type to R to reflect
         AIF   ('&TYPE2' EQ 'V').SETTYPR *  explicit length
         AIF   ('&TYPE2' EQ 'F').SETTYPG * Set type to G to reflect
         AIF   ('&TYPE2' EQ 'H').SETTYPG *  explicit length
         AIF   ('&TYPE2' EQ 'C').SETTYP_ * Type remains as is
         AIF   ('&TYPE2' EQ 'B').SETTYP_ * Type remains as is
         AIF   ('&TYPE2' EQ 'X').SETTYP_ * Type remains as is
         MNOTE 12,'Internal error 2 for type &TYPE2'
         MEXIT
.SETTYPR ANOP  ,
&TYPE2   SETC  'R'                     * Address, explicit length
&I       SETA  ('&ARG' FIND '(')       * Locate literal delimiter
         AGO   .LITLEN_X2
.SETTYPG ANOP  ,
&TYPE2   SETC  'G'                     * Fixed-point, explicit length
&I       SETA  ('&ARG' FIND '''')      * Locate literal delimiter
         AGO   .LITLEN_X2
.SETTYP_ ANOP  ,                       * Type does not change
&I       SETA  ('&ARG' FIND '''')      * Locate literal delimiter
.LITLEN_X2 ANOP ,
         AIF   (&I EQ 0).ERR7I         * Invalid value
&I       SETA  &I-4                    * Nr of chars in length value
&ARG2    SETC  '&ARG'(4,&I)            * Extract length value
&LITLEN  SETA  &ARG2                   * Copy length from modifier
         AGO   .NOERR7
.*
.ERR7A   MNOTE 8,'Missing third parameter (second field name)'
&ERROR   SETB  1                       * Signal error
         AGO   .NOERR7
.ERR7B   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not a valid field name'
&ERROR   SETB  1
         AGO   .NOERR7
.ERR7C   MNOTE 8,'Field &ARG has an unsupported type: &TYPE2'
&ERROR   SETB  1
         AGO   .NOERR7
.ERR7D   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not a valid literal number'
&ERROR   SETB  1
         AGO   .NOERR7
.ERR7E   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not a valid literal'
&ERROR   SETB  1
         AGO   .NOERR7
.ERR7F   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'Literal &ARG has an unsupported type: &TYPE2'
&ERROR   SETB  1
         AGO   .NOERR7
.ERR7G   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'Not very useful to compare with self!'
&ERROR   SETB  1
         AGO   .NOERR7
.ERR7H   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'Field &ARG has zero length: cannot compare'
&ERROR   SETB  1
         AGO   .NOERR7
.ERR7I   ANOP  ,
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'Literal &ARG contains no valid literal value'
&ERROR   SETB  1
         AGO   .NOERR7
.ERR7J   ANOP  ,
&ARGNAM  SETC  (DOUBLE '&ARGNAM')
         MNOTE 8,'Location of &ARGNAM is not defined'
&ERROR   SETB  1
         AGO   .NOERR7
.ERR7K   ANOP  ,
&ARGNAM  SETC  (DOUBLE '&ARGNAM')
         MNOTE 8,'Location of &ARGNAM does not match compared field'
&ERROR   SETB  1
.NOERR7  ANOP  ,
.*
.* Check the number of parameters for syntax 5
         AIF   (N'&SYSLIST(1) LE 3).NOERR8
.ERR8    MNOTE 4,'More than three parameters passed: remainder ignored'
.NOERR8  ANOP
.*
.* Check the combination of types
         AIF   ('&TYPE1' EQ '&TYPE2').NOERR9 * Equal types: always ok
&COMBI(1) SETC 'AA','AR','AV','Ag',                                    *
               'BB','BX','Bg',                                         *
               'CC',                                                   *
               'FF','FG','FH','Fa','Fg','F0',                          *
               'GF','GH','GG','Gg','G0',                               *
               'HF','HG','HH','Hg','H0',                               *
               'RA','RR','RV','Rg',                                    *
               'VA','VR','VV','Vg',                                    *
               'XB','XX','Xa','Xg','Xv',                               *
               'aF','aX','aa','ag',                                    *
               'gA','gB','gF','gG','gH','gR','gV','gX','ga','gg','g0'
&I       SETA  0                       * I indexes COMBI array
&ARG     SETC  '&TYPE1'.'&TYPE2'       * Search this combination in
.LOOP7   ANOP  ,                       *   the COMBI array
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&COMBI).ERR9A  * Not supported
         AIF   ('&ARG' NE '&COMBI(&I)').LOOP7 * Skip mismatch
         AGO   .NOERR9
.ERR9A   MNOTE 8,'Unsupported combination of types: &TYPE1 and &TYPE2'
&ERROR   SETB  1
.NOERR9  ANOP
         AGO   .GENLBL
.**********************************************************************
.*
.* Logic for code-value checking: syntaxes 7 and 8.
.* - Only 1 value may be specified
.*
.**********************************************************************
.CHKCODE ANOP  ,                       * Check code-value
.*
.* Retrieve location of field containing the specified value
&ARG     SETC  '&SYSLIST(1,&I)'        * Extract field name
.* Remove leading USING labels
&ARGNAM  SETC  '&ARG'                  * Copy complete field name
.LOOP9   ANOP  ,                       *   to remove USE-labels
&A       SETA  ('&ARGNAM' FIND '.')    * Check for a period
         AIF   (&A EQ 0).LOOP9OK       * No more labels: quit loop
&ARGNAM  SETC  '&ARGNAM'(&A+1,*)       * Remove leading label + period
&A       SETA  (K'&ARG-K'&ARGNAM)      * Length of labels
&ARGLBL  SETC  '&ARG'(1,&A)            * Retrieve label
         AGO   .LOOP9
.LOOP9OK ANOP
.* Safe to use created set symbol: extract location of field
         GBLC  &(BXA_BITF_&ARGNAM)     * Name for field location
&_LOC    SETC  '&(BXA_BITF_&ARGNAM)'   * Extract field location
         AIF   (K'&_LOC EQ 0).ERR15A   * Error: no loction
&LOC     SETC  '&_LOC'                 * LOC set from first code-field
&PRFLBL  SETC  '&ARGLBL'               * Set prefix label
&CODEVAL SETC  '&ARGNAM'               * Set code value to test
         AGO   .NOERR15
.ERR15A  ANOP  ,
&ARGNAM  SETC  (DOUBLE '&ARGNAM')
         MNOTE 8,'Location of &ARGNAM is not defined'
&ERROR   SETB  1
.NOERR15 ANOP  ,
.*
.* Check the number of parameters for syntax 7 or 8
         AIF   (&SYNTAX EQ 7 AND N'&SYSLIST(1) GT 1).ERR16A
         AIF   (&SYNTAX EQ 8 AND N'&SYSLIST(1) GT 2).ERR16B
         AIF   (&SYNTAX EQ 7).NOERR16
         AIF   (&SYNTAX EQ 8).NOERR16
         MNOTE 12,'Internal error 13'
         MEXIT
.ERR16A  MNOTE 4,'More than one parameter passed: remainder ignored'
         AGO   .NOERR16
.ERR16B  MNOTE 4,'More than two parameters passed: remainder ignored'
.NOERR16 ANOP
         AGO   .GENLBL
.**********************************************************************
.*
.* Generate end-of-then label and add to stack
.* For TARGET specified, the branch-logic must be altered:
.* -   for COND=TRUE the false-condition normally branches to the
.*     end-of-then label, now the true-condition must branch to the
.*     TARGET label, while a false condition drops thru.
.* -   for COND=FALSE the the false condition that normally branches
.*     to the end-of-then-label must now branch to the TARGET label.
.*
.**********************************************************************
.GENLBL  ANOP  ,
         AIF   (&ERROR).MEND           * Do not generate if error found
&LBL     SETC  '_IF_&SYSNDX'           * Create end-of-then label
         AIF   (K'&TARGET EQ 0).LBLOK  * Ok if target missing
         AIF   ('&COND' NE 'FALSE').LBLOK * TARGET with COND=FALSE?
&LBL     SETC  '&TARGET'               * Yes: replace target label
.LBLOK   ANOP
&LVL     SETA  1                       * Level is 1 if ...
         AIF   (&BXA_STK EQ 0).LVLOK   * the stack is empty
&LVL     SETA  &BXA_STK_LVL(&BXA_STK)+1 * otherwise: create next level
.LVLOK   ANOP  ,
&I       SETA  &BXA_STK+1              * Point next stack entry
&BXA_STK_OP(&I)  SETC 'IF$'            * Indicate IF block in progress
&BXA_STK_LBL(&I) SETC '&LBL'           * Label for ELSE or ENDIF
&BXA_STK_LVL(&I) SETA &LVL             * Level for this structure
&BXA_STK SETA  &I                      * Update stack pointer
.*
.* Select code generation logic
         AIF   (&SYNTAX EQ 0).GEN0
         AIF   (&SYNTAX EQ 1).GEN1     * Go generate code
         AIF   (&SYNTAX EQ 2).GEN2     * According to determined
         AIF   (&SYNTAX EQ 3).GEN3     * Sytax type
         AIF   (&SYNTAX EQ 4).GEN4
         AIF   (&SYNTAX EQ 5).GEN5
         AIF   (&SYNTAX EQ 6).GEN6
         AIF   (&SYNTAX EQ 7).GEN7
         AIF   (&SYNTAX EQ 8).GEN8
         MNOTE 12,'Internal error 3'
         MEXIT
.**********************************************************************
.*
.* Test condition code, either current or after an operation
.*
.**********************************************************************
.GEN0    ANOP  ,
&MNEM    SETC  '&SYSLIST(1,1)'         * Extract condition
         AIF   (&_TARGET).GEN0_T       * TARGET with COND=TRUE?
         AIF   (K'&MNEM EQ 1).CC1      * 1 or 2 characters menmonic?
&TST     SETC  '&MNEM'(2,1)            * Set test-type = E/H/L/M/O/P/Z
&OPCD    SETC  'B&TST'                 * Create Bx-instruction
         AGO   .CCOK                   *
.CC1     ANOP  ,                       *
&TST     SETC  '&MNEM'                 * Set test-type = E/H/L/M/O/P/Z
&OPCD    SETC  'BN'.'&TST'             * Create BNx-instruction
.CCOK    ANOP  ,                       *
         AIF   ('&LBL'(1,1) EQ '(').GEN0_R
&LABEL   &OPCD &LBL                    * No: skip then-logic
         MEXIT ,                       *
.GEN0_R  ANOP  ,                       *
&OPCD    SETC  '&OPCD'.'R'             * Add R for BxR/BNxR
&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name
         AGO   .CCOK                   *
.*
.GEN0_T  ANOP  ,                       *
         AIF   ('&TARGET'(1,1) EQ '(').GEN0_TR
&OPCD    SETC  'B&MNEM'                * Create Bx/BNx-instruction
&LABEL   &OPCD &TARGET                 * Yes: branch to then-target
         MEXIT ,                       *
.GEN0_TR ANOP  ,                       *
&OPCD    SETC  'B&MNEM'.'R'            * Create BxR/BNxR-instruction
&LABEL   &OPCD &_TREG                  * Yes: branch to then-target
         MEXIT ,                       *
.**********************************************************************
.*
.* Test for bits being all on
.*
.**********************************************************************
.GEN1    ANOP  ,
&LABEL   TM    &PRFLBL.&LOC,&MASKVAL   * All bits on?
         AIF   (&_TARGET).GEN1_T       * TARGET with COND=TRUE?
         AIF   ('&LBL'(1,1) EQ '(').GEN1_R
         BNO   &LBL                    * No: skip then-logic
         MEXIT ,                       *
.GEN1_R  ANOP  ,                       *
&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name
         BNOR  &LBL                    * No: skip then-logic
         MEXIT ,                       *
.*
.GEN1_T  ANOP  ,                       *
         AIF   ('&TARGET'(1,1) EQ '(').GEN1_TR
         BO    &TARGET                 * Yes: branch to then-target
         MEXIT ,                       *
.GEN1_TR ANOP  ,                       *
         BOR   &_TREG                  * Yes: branch to then-target
         MEXIT ,                       *
.**********************************************************************
.*
.* Test for bits being all off
.*
.**********************************************************************
.GEN2    ANOP  ,
&LABEL   TM    &PRFLBL.&LOC,&MASKVAL   * All bits off?
         AIF   (&_TARGET).GEN2_T       * TARGET with COND=TRUE?
         AIF   ('&LBL'(1,1) EQ '(').GEN2_R
         BNZ   &LBL                    * No: skip then-logic
         MEXIT ,                       *
.GEN2_R  ANOP  ,                       *
&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name
         BNZR  &LBL                    * No: skip then-logic
         MEXIT ,                       *
.*
.GEN2_T  ANOP  ,                       *
         AIF   ('&TARGET'(1,1) EQ '(').GEN2_TR
         BZ    &TARGET                 * Yes: branch to then-target
         MEXIT ,                       *
.GEN2_TR ANOP  ,                       *
         BZR   &_TREG                  * Yes: branch to then-target
         MEXIT ,                       *
.**********************************************************************
.*
.* Test for at least 1 bit being on
.*
.**********************************************************************
.GEN3    ANOP  ,
&LABEL   TM    &PRFLBL.&LOC,&MASKVAL   * At least 1 bit on?
         AIF   (&_TARGET).GEN3_T       * TARGET with COND=TRUE?
         AIF   ('&LBL'(1,1) EQ '(').GEN3_R
         BZ    &LBL                    * No: skip then-logic
         MEXIT ,                       *
.GEN3_R  ANOP  ,                       *
&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name
         BZR   &LBL                    * No: skip then-logic
         MEXIT ,                       *
.*
.GEN3_T  ANOP  ,                       *
         AIF   ('&TARGET'(1,1) EQ '(').GEN3_TR
         BNZ   &TARGET                 * Yes: branch to then-target
         MEXIT ,                       *
.GEN3_TR ANOP  ,                       *
         BNZR  &_TREG                  * Yes: branch to then-target
         MEXIT ,                       *
.**********************************************************************
.*
.* Test a field, depending on type, using inverted condition
.*
.**********************************************************************
.GEN4    ANOP  ,
&MNEM    SETC  '&SYSLIST(1,2)'         * Extract condition
         AIF   (K'&MNEM EQ 1).COND1    * 1 or 2 characters menmonic?
&TST     SETC  '&MNEM'(2,1)            * Set test-type = Z/P/M
&OPCD    SETC  'B&TST'                 * Create Bx-instruction
         AGO   .CONDOK                 *
.COND1   ANOP  ,                       *
&TST     SETC  '&MNEM'                 * Set test-type = Z/P/M
&OPCD    SETC  'BN'.'&TST'             * Create BNx-instruction
.CONDOK  ANOP
.*
&ARG     SETC  '&SYSLIST(1,1)'         * Extract name of field to test
         AIF   ('&TYPE1' EQ 'A').GEN4LT  * Address
         AIF   ('&TYPE1' EQ 'B').GEN4X   * Binary
         AIF   ('&TYPE1' EQ 'F').GEN4LT  * Fullword
         AIF   ('&TYPE1' EQ 'G').GEN4X   * Explicit length fixed-point
         AIF   ('&TYPE1' EQ 'H').GEN4LH  * Halfword
         AIF   ('&TYPE1' EQ 'R').GEN4X   * Explicit length address
         AIF   ('&TYPE1' EQ 'V').GEN4LT  * Address
         AIF   ('&TYPE1' EQ 'X').GEN4X   * Hexadecimal
         AIF   ('&TYPE1' EQ 'a').GEN4EAR * Access register
         AIF   ('&TYPE1' EQ 'g').GEN4LTR * General purpose register
         MNOTE 12,'Internal error 4, type &TYPE1 not supported'
         MEXIT
.*
.* Test a field with explicit length
.GEN4X   ANOP  ,
         AIF   (L'&ARG EQ 1).GEN4LT1   * Load and test 1 character
         AIF   (L'&ARG EQ 2).GEN4LH    * Load and test 2 characters
         AIF   (L'&ARG EQ 3).GEN4LT3   * Load and test 3 characters
         AIF   (L'&ARG EQ 4).GEN4LT    * Load and test 4 characters
.* Length exceeds 4: test on minus uses first bit only
         AIF   ('&TST' EQ 'M').GEN4TM  * M or NM: check first bit (TM)
         AIF   ('&TST' EQ 'Z').GEN4CLC * Z or NZ: use CLC
.* Test a field of more than 4 bytes for being > 0
         AIF   ('&MNEM' EQ 'P').GEN4P  * Big number Positive?
         AIF   ('&MNEM' EQ 'NP').GEN4NP * Big number Not Positive?
         MNOTE 12,'Internal error 5'
         MEXIT
.*
.* Test a four-byte value
.GEN4LT  ANOP  ,                       *
&LABEL   ICM   R0,YYYY,&ARG            * Test value
         AGO   .TERM
.*
.* Test a two-byte value
.GEN4LH  ANOP  ,                       *
&LABEL   ICM   R0,NNYY,&ARG            * Test value
         AGO   .TERM
.*
.* Test a one-byte value
.GEN4LT1 ANOP  ,                       *
&LABEL   ICM   R0,NNNY,&ARG            * Test value
         AGO   .TERM
.*
.* Test a three-byte value
.GEN4LT3 ANOP  ,                       *
&LABEL   ICM   R0,NYYY,&ARG            * Test value
         AGO   .TERM
.*
.* Test a value in a general purpose register
.GEN4LTR ANOP  ,                       * General purpose register
&LABEL   LTR   &ARG,&ARG               * Test value
         AGO   .TERM
.*
.* Test a value in an access register
.GEN4EAR ANOP  ,                       * General purpose register
         AIF   ('&OPCD' EQ 'BZ').GEN4EAR_1
         AIF   ('&OPCD' EQ 'BNZ').GEN4EAR_1
         MNOTE 4,'ALET can be checked only with Z or NZ'
.GEN4EAR_1 ANOP ,
&LABEL   EAR   R0,&ARG                 * Copy value to be tested
         LTR   R0,R0                   * Test ALET from access register
         AGO   .TERM
.*
.* Test a storage operand for being negative
.GEN4TM  ANOP  ,                       * A storage operand
&LABEL   TM    &ARG,X'80'              * Is it negative?
         AIF   ('&MNEM' EQ 'M').GEN4BZ
         AIF   ('&MNEM' EQ 'NM').GEN4BO
         MNOTE 12,'Internal error 6'
         MEXIT
.GEN4BZ  ANOP
&OPCD    SETC  'BZ'                    * If value is Minus: skip THEN
         AGO   .TERM
.GEN4BO  ANOP  ,
&OPCD    SETC  'BO'                    * If value not Minus: skip THEN
         AGO   .TERM
.*
.* Test a storage operand for being all zeroes
.GEN4CLC ANOP  ,                       * General purpose register
&LABEL   CLC   &ARG,=XL(L'&ARG)'00'    * Test value
         AGO   .TERM
.*
.* Test a large field (>4 bytes) for being Positive
.* Skip the THEN-block if BIT0 is on (negative number) or
.*   if the whole field contains zeroes only
.GEN4P   ANOP  ,                       *
         AIF   (&_TARGET).GEN4P_T      * TARGET with COND=TRUE?
         AIF   ('&LBL'(1,1) EQ '(').GEN4P_R
&LABEL   TM    &ARG,X'80'              * Negative bit on?
         BO    &LBL                    * If value is Minus: skip THEN
         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?
         BE    &LBL                    * If value is zero: skip THEN
         MEXIT ,                       *
.GEN4P_R ANOP  ,                       *
&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name
&LABEL   TM    &ARG,X'80'              * Negative bit on?
         BOR   &LBL                    * If value is Minus: skip THEN
         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?
         BER   &LBL                    * If value is zero: skip THEN
         MEXIT ,                       *
.*
.* Branch to TARGET if BIT0 is off (not-negative number) and
.*   the whole field does not contain zeroes only
.GEN4P_T ANOP  ,                       *
&LABEL   TM    &ARG,X'80'              * Negative bit on?
         BO    &LBL                    * If value is Minus: skip THEN
         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?
         AIF   ('&TARGET'(1,1) EQ '(').GEN4P_TR
         BNE   &TARGET                 * If value not 0: goto TARGET
&LBL     LABEL ,                       *
         MEXIT ,                       *
.GEN4P_TR ANOP ,                       *
         BNER  &_TREG                  * If value not 0: goto TARGET
&LBL     LABEL ,                       *
         MEXIT ,                       *
.*
.* Test a large field (>4 bytes) for being Not Positive
.* Skip the THEN-block if BIT0 is off (negative number) and
.*      the whole field contains zeroes only
.GEN4NP  ANOP  ,                       *
         AIF   (&_TARGET).GEN4P_T      * TARGET with COND=TRUE?
&LABEL   TM    &ARG,X'80'              * Negative bit on?
         BO    _THEN&SYSNDX            * If value is Minus: goto THEN
         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?
         AIF   ('&LBL'(1,1) EQ '(').GEN4NP_R
         BNE   &LBL                    * If value is zero: skip THEN
_THEN&SYSNDX LABEL ,                   * Start of THEN-block
         MEXIT ,                       *
.GEN4NP_R ANOP ,                       *
&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name
         BNER  &LBL                    * If value is zero: skip THEN
_THEN&SYSNDX LABEL ,                   * Start of THEN-block
         MEXIT ,                       *
.*
.* Branch to TARGET if BIT0 is on (negative number) or
.*      the whole field contains zeroes only
.GEN4NP_T ANOP ,                       *
         AIF   ('&LBL'(1,1) EQ '(').GEN4NP_TR
&LABEL   TM    &ARG,X'80'              * Negative bit on?
         BO    &TARGET                 * If value is Minus: goto TARGET
         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?
         BE    &TARGET                 * If value is zero: goto TARGET
         MEXIT ,                       *
.GEN4NP_TR ANOP ,                      *
&LABEL   TM    &ARG,X'80'              * Negative bit on?
         BOR   &_TREG                  * If value is Minus: goto TARGET
         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?
         BER   &_TREG                  * If value is zero: goto TARGET
         MEXIT ,                       *
.**********************************************************************
.*
.* Compare two fields
.*
.**********************************************************************
.GEN5    ANOP  ,
&_LABEL  SETC  '&LABEL'                * Label to generate
&ARG1    SETC  '&SYSLIST(1,1)'         * Extract first field
&ARG2    SETC  '&SYSLIST(1,3)'         *  and second field for compare
&LEN1    SETA  L'&ARG1                 * Determine length of operand 1
&LEN2    SETA  &LITLEN                 *  and operand 2
         AIF   (&LITERAL).GEN5_LN      * If it is not a literal...
&LEN2    SETA  L'&ARG2                 *  we use the field length
.GEN5_LN ANOP  ,                       *
.*
         AIF   ('&TYPE1' EQ 'A').GEN5A * Address field
         AIF   ('&TYPE1' EQ 'B').GEN5X * Unsigned binary field
         AIF   ('&TYPE1' EQ 'C').GEN5C * Character field
         AIF   ('&TYPE1' EQ 'F').GEN5F * Signed fullword
         AIF   ('&TYPE1' EQ 'G').GEN5G * Signed field 1-4 bytes
         AIF   ('&TYPE1' EQ 'H').GEN5H * Signed halfword
         AIF   ('&TYPE1' EQ 'R').GEN5R * Unsigned unaligned field
         AIF   ('&TYPE1' EQ 'V').GEN5A * V-type address same as A
         AIF   ('&TYPE1' EQ 'X').GEN5X * X-type field same as B
         AIF   ('&TYPE1' EQ 'a').GEN5R_A * access register compare
         AIF   ('&TYPE1' EQ 'g').GEN5R_G * General purpose register
         MNOTE 12,'Internal error 7, type &TYPE1 not supported'
         MEXIT
.*
.* Error messages for .GEN5 logic
.ERR14A  ANOP  ,
         MNOTE 8,'Cannot allocate any register to hold compare value'
         MEXIT
.ERR14B  ANOP  ,
&ARG2    SETC  (DOUBLE '&ARG2')
         MNOTE 8,'&ARG2 is more than 4 bytes long: cannot compare'
         MEXIT
.ERR14C  ANOP  ,
&ARG1    SETC  (DOUBLE '&ARG1')
         MNOTE 8,'&ARG1 is more than 4 bytes long: cannot compare'
         MEXIT
.ERR14D  MNOTE 12,'Internal error 8 for type &TYPE1 and &TYPE2'
         MEXIT
.ERR14E  ANOP  ,
&ARG1    SETC  (DOUBLE '&ARG1')
&ARG2    SETC  (DOUBLE '&ARG2')
         MNOTE 8,'Not a useful compare: range mismatch for &ARG1 and &A*
               RG2'
         MEXIT
.ERR14F  ANOP  ,
&ARG1    SETC  (DOUBLE '&ARG1')
         MNOTE 8,'Cannot compare: &ARG1 too long for this compare'
         MEXIT
.ERR14G  ANOP  ,
&ARG2    SETC  (DOUBLE '&ARG2')
         MNOTE 8,'Cannot compare: &ARG2 not valid for an ALET'
         MEXIT
.ERR14H  ANOP  ,
&ARG1    SETC  (DOUBLE '&ARG1')
         MNOTE 8,'Cannot compare: &ARG1 not valid for an ALET'
         MEXIT
.*
.* Compare an aligned unsigned fullword with something
.GEN5A   ANOP  ,
         AIF   ('&TYPE2' EQ 'A').GEN5_CLC * Compare direct
         AIF   ('&TYPE2' EQ 'R').GEN5AX   * Check length
         AIF   ('&TYPE2' EQ 'V').GEN5_CLC * Compare direct
         AIF   ('&TYPE2' EQ 'g').GEN5_CL_ * Inverted compare logical
         AGO   .ERR14D
.*
.* Compare an aligned unsigned fullword with an unaligned unsigned
.*             field of a different length
.GEN5AX  ANOP  ,
         AIF   (&LEN EQ 4).GEN5_CLC    * Compare direct
         AIF   (&LEN GT 4).ERR14B      * Too long to hold in a reg
         IF$LU R0,&ARG2,&LITLEN,&TYPE2 * Load second arg in R0
&ARG2    SETC  'R0'                    * Second argument now in R0
         AGO   .GEN5_CL_               * And do an inverted compare
.*
.* Compare two character fields
.GEN5C   ANOP  ,
         AIF   ('&TYPE2' NE 'C').ERR14D  * ARG2 must be char too
         AIF   (L'&ARG1 EQ &LEN2).GEN5_CLC * Ok to compare direct
.* Unequal lengths: use CLCL
         AGO   .GEN5_CLCL
.*
.* Compare an aligned signed fullword with something
.GEN5F   ANOP  ,
         AIF   ('&TYPE2' EQ 'F').GEN5FF * Load op1, then compare
         AIF   ('&TYPE2' EQ 'G').GEN5FX * Check length
         AIF   ('&TYPE2' EQ 'H').GEN5FH * Load op1, then compare
         AIF   ('&TYPE2' EQ 'a').GEN5FAR * Copy AR, then compare
         AIF   ('&TYPE2' EQ 'g').GEN5_C_ * Inverted compare
         AIF   ('&TYPE2' EQ '0').GEN5FX  * Compare with a number
         AGO   .ERR14D
.*
.* Compare an aligned signed fullword with an access register
.* ALETs are unsigned: therefore a logical compare is used
.GEN5FAR ANOP  ,
         AIF   ('&OPCD' EQ 'BE').GEN5FAR_1
         AIF   ('&OPCD' EQ 'BNE').GEN5FAR_1
         MNOTE 4,'ALET can be compared only with EQ or NE'
.GEN5FAR_1 ANOP ,
&_LABEL  EAR   R0,&ARG2                * Load comparand
&ARG2    SETC  'R0'                    * Argument now in R0
&_LABEL  SETC  ''                      * Do not generate label again
         AGO   .GEN5_CL_               * Inverted logical compare
.*
.* Compare an aligned signed fullword with another one
.GEN5FF  ANOP  ,
&_LABEL  L     R0,&ARG1                * Load compare value
&ARG1    SETC  'R0'                    * Argument now in R0
&_LABEL  SETC  ''                      * Do not generate label again
         AGO   .GEN5_C                 * And go compare
.*
.* Compare an aligned signed fullword with an aligned signed halfword
.GEN5FH  ANOP  ,
&_LABEL  L     R0,&ARG1                * Load compare value
&ARG1    SETC  'R0'                    * Argument now in R0
&_LABEL  SETC  ''                      * Do not generate label again
         AGO   .GEN5_CH                * And go compare
.*
.* Compare an aligned signed fullword with an unaligned signed field
.GEN5FX  ANOP  ,
&_LABEL  IF$LS R0,&ARG2,&LITLEN,&TYPE2 * Load field into register
&_LABEL  SETC  ''                      * Do not generate Label again
&ARG2    SETC  'R0'                    * Comparand value now in R0
         AGO   .GEN5_C_                * Inverted compare
.*
.* Compare an unaligned signed field with something
.GEN5G   ANOP  ,
         AIF   ('&TYPE2' EQ 'F').GEN5GX  * Check lengths
         AIF   ('&TYPE2' EQ 'G').GEN5GX  * Check lengths
         AIF   ('&TYPE2' EQ 'H').GEN5GX  * Check lengths
         AIF   ('&TYPE2' EQ 'g').GEN5GR  * Check length, use a register
         AIF   ('&TYPE2' EQ '0').GEN5G0  * Check value
         AGO   .ERR14D
.*
.* Compare an unaligned signed field with a register
.GEN5GR  ANOP  ,
         IF$ALC &ARG2                  * Assign some other register nr
&REG     SETA  &BXA_NUMVAL             * assigned register number
&_LABEL  IF$LS R&REG,&ARG1,,&TYPE1     * Load argument in Register
&_LABEL  SETC  ''                      * Do not generate LABEL again
&ARG1    SETC  'R&REG'                 * First argument now in Reg.
         AGO   .GEN5_CR                * And compare values in regs
.*
.* Compare an unaligned signed field with some other storage field
.* An EQ/NE condition with operands of equal length uses CLC
.GEN5GX  ANOP  ,
         AIF   ('&OPCD'(K'&OPCD,1) NE 'E').GEN5GX_NE * Test for Equal?
         AIF   (&LITERAL).GEN5GX_L     * Literal or field?
         AIF   (L'&ARG1 EQ L'&ARG2).GEN5_CLC * Ok to use CLC
         AGO   .GEN5GX_NE
.GEN5GX_L ANOP ,
         AIF   (L'&ARG1 EQ &LITLEN).GEN5_CLC * Ok to use CLC
.GEN5GX_NE ANOP ,
&_LABEL  IF$LS R0,&ARG1,,&TYPE1        * Load first argument into R0
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R0'                    * First argument now in R0
         AIF   ('&TYPE2' EQ 'F').GEN5_C * Compare with fullword
         AIF   ('&TYPE2' EQ 'H').GEN5_CH * Compare with halfword
         IF$LS R1,&ARG2,&LITLEN,&TYPE2 * Load second argument into R1
&ARG2    SETC  'R1'                    * Second argument now in R1
         AGO   .GEN5_CR                * Compare values in registers
.*
.* Compare an unaligned signed field with a literal decimal number
.GEN5G0  ANOP  ,
         AIF   ('&ARG2'(1,1) EQ '-').GEN5G0_N
&I       SETA  &ARG2                   * Load decimal value
         AIF   (&I EQ 0).GEN5G0_0      * Use ICM to set cond.code
         AIF   (&I GT 127 AND L'&ARG1 LE 1).ERR14E
         AIF   (&I GT 32767 AND L'&ARG1 LE 2).ERR14E
         AIF   (&I GT 8388607 AND L'&ARG1 LE 3).ERR14E
         AIF   ('&OPCD'(K'&OPCD,1) EQ 'E').GEN5G0_E
&_LABEL  IF$LS R0,&ARG1,,&TYPE1        * Load first argument into R0
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R0'                    * First argument now in R0
         AIF   (&I LT 4096).GEN5G0_LA
&ARG2    SETC  '=H''&I'''              * Assume halfword value
         AIF   (&I LT 32768).GEN5_CH
&ARG2    SETC  '=F''&I'''              * Assume fullword value
         AGO   .GEN5_C
.* Decimal number is negative
.GEN5G0_N ANOP ,
&ARG     SETC  '&ARG2'(2,*)            * Extract numerical part
&I       SETA  &ARG
         AIF   (&I EQ 0).GEN5G0_0      * Set cond.code with ICM
         AIF   (&I GT 127 AND L'&ARG1 LE 1).ERR14E
         AIF   (&I GT 32767 AND L'&ARG1 LE 2).ERR14E
         AIF   (&I GT 8388607 AND L'&ARG1 LE 3).ERR14E
         AIF   ('&OPCD'(K'&OPCD,1) EQ 'E').GEN5G0_E
&_LABEL  IF$LS R0,&ARG1,,&TYPE1        * Load first argument into R0
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R0'                    * First argument now in R0
&ARG2    SETC  '=H''-&I'''             * Assume halfword value
         AIF   (&I LT 32768).GEN5_CH
&ARG2    SETC  '=F''-&I'''             * Assume fullword value
         AGO   .GEN5_C
.* Check is for EQ/NE: use CLC or CLI
.GEN5G0_E ANOP ,
         AIF   (L'&ARG1 EQ 1).GEN5G0_E1
         AIF   (L'&ARG1 EQ 2).GEN5G0_E2
         AIF   (L'&ARG1 EQ 3).GEN5G0_E3
         AIF   (L'&ARG1 EQ 4).GEN5G0_E4
         MNOTE 12,'Internal error 9'
         MEXIT
.GEN5G0_E1 ANOP ,
         AIF   ('&ARG2'(1,1) NE '-').GEN5_CLI * CLI for positive nrs
         CLC   &ARG1,=HL1'&ARG2'       * CLI refuses negative argument
         AGO   .TERM
.GEN5G0_E2 ANOP ,
         CLC   &ARG1,=H'&ARG2'
         AGO   .TERM
.GEN5G0_E3 ANOP ,
         CLC   &ARG1,=FL3'&ARG2'
         AGO   .TERM
.GEN5G0_E4 ANOP ,
         CLC   &ARG1,=F'&ARG2'
         AGO   .TERM
.* Decimal number is between 1 and 4095 inclusive
.GEN5G0_LA ANOP ,
         LA    R1,&ARG2                * Load comparand
&ARG2    SETC  'R1'                    * Second argument now in R1
         AGO   .GEN5_CR                * Go compare values in regs
.* Decimal number is 0, use ICM to test ARG1
.GEN5G0_0 ANOP ,
         AIF   (L'&ARG1 EQ 1).GEN5G0_1
         AIF   (L'&ARG1 EQ 2).GEN5G0_2
         AIF   (L'&ARG1 EQ 3).GEN5G0_3
         AIF   (L'&ARG1 EQ 4).GEN5G0_4
.* Field is too long for ICM. Use CLC instead.
         AIF   ('&OPCD'(K'&OPCD,1) NE 'E').ERR14F
&I       SETA  L'&ARG1
         CLC   &ARG1,=FL&I.'0'
         AGO   .TERM
.GEN5G0_1 ANOP ,                       * Test EQ/NE may use CLI, others
         AIF   ('&OPCD'(K'&OPCD,1) EQ 'E').GEN5_CLI * must use ICM
&_LABEL  ICM   R0,NNNY,&ARG1           * Test for zero value
         AGO   .TERM
.GEN5G0_2 ANOP ,
&_LABEL  ICM   R0,NNYY,&ARG1           * Test for zero value
         AGO   .TERM
.GEN5G0_3 ANOP ,
&_LABEL  ICM   R0,NYYY,&ARG1           * Test for zero value
         AGO   .TERM
.GEN5G0_4 ANOP ,
&_LABEL  ICM   R0,YYYY,&ARG1           * Test for zero value
         AGO   .TERM
.*
.* Compare an aligned signed halfword with something
.GEN5H   ANOP  ,
         AIF   ('&TYPE2' EQ 'F').GEN5HF * Load op1, then compare
         AIF   ('&TYPE2' EQ 'G').GEN5HX * Check length
         AIF   ('&TYPE2' EQ 'H').GEN5HH * Load op2, then compare
         AIF   ('&TYPE2' EQ 'g').GEN5_CH_ * Inverted compare
         AIF   ('&TYPE2' EQ '0').GEN5HX  * Compare with a number
         AGO   .ERR14D
.*
.* Compare an aligned signed halfword with an aligned signed fullword
.GEN5HF  ANOP  ,
&_LABEL  LH    R0,&ARG1                * Load compare value
&ARG1    SETC  'R0'                    * Argument now in R0
&_LABEL  SETC  ''                      * Do not generate label again
         AGO   .GEN5_C                 * And go compare
.*
.* Compare an aligned signed halfword with another one
.GEN5HH  ANOP  ,
&_LABEL  LH    R0,&ARG1                * Load compare value
&ARG1    SETC  'R0'                    * Argument now in R0
&_LABEL  SETC  ''                      * Do not generate label again
         AGO   .GEN5_CH                * And go compare
.*
.* Compare an aligned signed halfword with an unaligned signed field
.GEN5HX  ANOP  ,
         AIF   (&LITLENN GT 2).ERR14E
&_LABEL  IF$LS R0,&ARG2,&LITLEN,&TYPE2 * Load field into register
&_LABEL  SETC  ''                      * Do not generate Label again
&ARG2    SETC  'R0'                    * Comparand value now in R0
         AGO   .GEN5_CH_               * Inverted compare
.*
.* Compare an unaligned unsigned address field with something
.GEN5R   ANOP  ,
         AIF   ('&TYPE2' EQ 'g').GEN5XR  * Compare with a register
         AIF   ('&TYPE2' EQ 'A').GEN5RA  * Second operand aligned
         AIF   ('&TYPE2' EQ 'R').GEN5RR  * Check alignement&lengths
         AIF   ('&TYPE2' EQ 'V').GEN5RA  * Second operand aligned
         AGO   .ERR14D
.*
.* Compare an unaligned unsigned field with an aligned unsigned word
.GEN5RA  ANOP  ,
         AIF   (&LEN1 EQ &LEN2).GEN5_CLC * Lengths equal: use CLC
&_LABEL  IF$LU R0,&ARG1,,&TYPE1          * Load comparand value
&_LABEL  SETC  ''                        * Do not generate label again
&ARG1    SETC  'R0'                      * Operand 1 now in R0
         AGO   .GEN5_CL                  * And do logical compare
.*
.* Compare an unaligned unsigned field with an unaligned unsigned field
.GEN5RR  ANOP  ,
         AIF   (&LEN1 EQ &LEN2).GEN5_CLC * Equal lengths:compare direct
         AIF   (&LEN1 GT 4).ERR14C     * Check lengths for
         AIF   (&LEN2 GT 4).ERR14B     *  validity
         AIF   (&LEN2 EQ 4 AND '&ARG2'(1,1)  EQ '=').GEN5RA * Aligned!
&_LABEL  IF$LU R0,&ARG1,,&TYPE1        * Insert operand 1 in R0
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R0'                    * Operand 1 now in R0
         IF$LU R1,&ARG2,&LITLEN,&TYPE2 * Load second operand
&ARG2    SETC  'R1'                    * Comparand now in R1
         AGO   .GEN5_CLR               * And go compare
.*
.* Compare an access register with something
.GEN5R_A ANOP  ,
         AIF   ('&TYPE2' EQ 'F').GEN5R_AF * Compare with a fullword
         AIF   ('&TYPE2' EQ 'X').GEN5R_AX * Second operand not aligned
         AIF   ('&TYPE2' EQ 'a').GEN5R_AA * Compare with other AR
         AIF   ('&TYPE2' EQ 'g').GEN5R_AG * Second operand a GPR
         AGO   .ERR14D
.*
.* Compare an access register with an aligned fullword
.GEN5R_AF ANOP ,
&_LABEL  CPY   R0,&ARG1                * Copy ALET
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R0'                    * ALET from AR now in R0
         AGO   .GEN5_CL                * And do compare logical
.*
.* Compare an access register with an unaligned field
.GEN5R_AX ANOP ,
         AIF   (&LEN2 NE 4).ERR14G     * Length of ALET always 4!
         AIF   ('&ARG2'(1,1) EQ '=').GEN5R_AF
&_LABEL  CPY   R0,&ARG1                * Copy ALET
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R0'                    * ALET from AR now in R0
         IF$LU R1,&ARG2,&LITLEN,&TYPE2 * Load comparand value
&ARG2    SETC  'R1'                    * Operand 2 now in R1
         AGO   .GEN5_CLR               * And do compare logical
.*
.* Compare an access register with an access register
.GEN5R_AA ANOP ,
&_LABEL  CPY   R0,&ARG1                * Copy ALET
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R0'                    * ALET from AR now in R0
         CPY   R1,&ARG2                * Load comparand value
&ARG2    SETC  'R1'                    * Operand 2 now in R1
         AGO   .GEN5_CLR               * And do compare logical
.*
.* Compare an access register with a general purpose register
.GEN5R_AG ANOP ,
         IF$ALC &ARG2                  * Assign some other register nr
&REG     SETA  &BXA_NUMVAL             * assigned register number
&_LABEL  CPY   R&REG,&ARG1             * Load ALET in Register
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R&REG'                 * First argument now in Reg.
         AGO   .GEN5_CLR               * And compare values in regs
.*
.* Compare a register with something
.GEN5R_G ANOP  ,
         AIF   ('&TYPE2' EQ 'A').GEN5_CL  * Compare with unsigned word
         AIF   ('&TYPE2' EQ 'B').GEN5R_GX * Compare with unsigned field
         AIF   ('&TYPE2' EQ 'F').GEN5_C   * Compare with signed word
         AIF   ('&TYPE2' EQ 'G').GEN5R_GG * Compare with signed field
         AIF   ('&TYPE2' EQ 'H').GEN5_CH  * Compare with signed halfwd
         AIF   ('&TYPE2' EQ 'R').GEN5R_GX * Compare with unsigned field
         AIF   ('&TYPE2' EQ 'V').GEN5_CL  * Compare with unsigned word
         AIF   ('&TYPE2' EQ 'X').GEN5R_GX * Compare with unsigned field
         AIF   ('&TYPE2' EQ 'a').GEN5R_G_A * Compare with access reg.
         AIF   ('&TYPE2' EQ 'g').GEN5_CR  * Compare with GPR
         AIF   ('&TYPE2' EQ '0').GEN5R_G0 * Compare with number
         AGO   .ERR14D
.*
.* Compare a register with an access register
.GEN5R_G_A ANOP ,
         IF$ALC &ARG1                  * Assign some other register nr
&REG     SETA  &BXA_NUMVAL             * assigned register number
&_LABEL  CPY   R&REG,&ARG2             * Load ALET in Register
&_LABEL  SETC  ''                      * Do not generate label again
&ARG2    SETC  'R&REG'                 * First argument now in Reg.
         AGO   .GEN5_CLR               * And compare values in regs
.*
.* Compare a register with a signed field
.GEN5R_GG ANOP ,
         AIF   (&LEN2 EQ 4 AND '&ARG2'(1,1) EQ '=').GEN5_C
         IF$ALC &ARG1                  * Assign some other register nr
&REG     SETA  &BXA_NUMVAL             * assigned register number
&_LABEL  IF$LS R&REG,&ARG2,&LITLEN,&TYPE2 * Copy comparand to register
&_LABEL  SETC  ''                      * Do not generate label again
&ARG2    SETC  'R&REG'                 * First argument now in Reg.
         AGO   .GEN5_CR                * And compare values in regs
.*
.* Compare a register with an unsigned field
.GEN5R_GX ANOP ,
         AIF   (&LEN2 EQ 4 AND '&ARG2'(1,1) EQ '=').GEN5_CL
         AIF   (&LEN2 EQ 4).GEN5_CLM4
         IF$ALC &ARG1                  * Assign some other register nr
&REG     SETA  &BXA_NUMVAL             * assigned register number
&_LABEL  IF$LU R&REG,&ARG2,&LITLEN,&TYPE2 * Copy comparand to register
&_LABEL  SETC  ''                      * Do not generate label again
&ARG2    SETC  'R&REG'                 * First argument now in Reg.
         AGO   .GEN5_CLR               * And compare values in regs
.*
.* Compare a register with a literal decimal constant
.GEN5R_G0 ANOP ,
         AIF   (&LITLENN EQ 0).GEN5_LTR * Compare with zero value?
         AIF   (NOT &LITERAL).GEN5R_G0_A * Equated literal!
         AIF   (&LITLENN GT 2).GEN5R_G0_2
&ARG2    SETC  '=H''&ARG2'''           * Create a halfword literal
         AGO   .GEN5_CH                * And go compare
.GEN5R_G0_2 ANOP ,
&ARG2    SETC  '=F''&ARG2'''           * Create a fullword literal
         AGO   .GEN5_C                 * And go compare
.GEN5R_G0_A ANOP ,                     * Use address constants
         AIF   (&LITLENN GT 2).GEN5R_G0_B
&ARG2    SETC  '=AL2(&ARG2)'           * Create a halfword literal
         AGO   .GEN5_CH                * And go compare
.GEN5R_G0_B ANOP ,
&ARG2    SETC  '=A(&ARG2)'             * Create a fullword literal
         AGO   .GEN5_C                 * And go compare
.*
.* Compare an unaligned unsigned field with something
.GEN5X   ANOP  ,
         AIF   ('&TYPE2' EQ 'a').GEN5XAR * Compare with an access reg.
         AIF   ('&TYPE2' EQ 'g').GEN5XR  * Compare with a register
         AIF   ('&TYPE2' EQ 'v').GEN5XV  * Compare with a code value
         AIF   ('&TYPE2' EQ 'X').GEN5XX  * Check lengths
         AIF   ('&TYPE2' EQ 'B').GEN5XX  * Check lengths
         AGO   .ERR14D
.*
.* Compare an unaligned unsigned field with an access register
.GEN5XAR ANOP  ,
         AIF   (&LEN1 NE 4).ERR14H
&_LABEL  ICM   R0,YYYY,&ARG1           * Copy field to register
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R0'                    * Operand 1 now in R0
         CPY   R1,&ARG2                * Copy ALET to R1
&ARG2    SETC  'R1'                    * Comparand value now in R1
         AGO   .GEN5_CLR               * And go compare registers
.*
.* Compare an unaligned unsigned field with a register
.GEN5XR  ANOP  ,
         IF$ALC &ARG2                  * Assign some other register nr
&REG     SETA  &BXA_NUMVAL             * assigned register number
&_LABEL  IF$LU R&REG,&ARG1,,&TYPE1     * Load argument in Register
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R&REG'                 * First argument now in Reg.
         AGO   .GEN5_CLR               * And compare values in regs
.*
.* Compare an unaligned unsigned field with a code value
.GEN5XV  ANOP  ,
         AIF   (&LEN1 EQ 1).GEN5_CLI   * Use CLI to compare
         AGO   .GEN5_CLC               * Too long for CLI: use CLC
.*
.* Compare an unaligned unsigned field with an unaligned unsigned field
.GEN5XX  ANOP  ,
         AIF   (&LEN1 EQ &LEN2).GEN5_CLC * Equal lengths:compare direct
         AIF   (&LEN1 GT 4).ERR14C     * Check lengths for
         AIF   (&LEN2 GT 4).ERR14B     *  validity
&_LABEL  IF$LU R0,&ARG1,,&TYPE1        * Insert operand 1 in R0
&_LABEL  SETC  ''                      * Do not generate label again
&ARG1    SETC  'R0'                    * Operand 1 now in R0
         IF$LU R1,&ARG2,&LITLEN,&TYPE2 * Insert operand 2 in R1
&ARG2    SETC  'R1'                    * Operand 2 now in R1
         AGO   .GEN5_CLR               * And go compare registers
.*
.* Compare a register with an aligned signed fullword
.GEN5_C  ANOP  ,
&_LABEL  C     &ARG1,&ARG2             * Compare 1st operand with 2nd
         AGO   .TERM
.*
.* Compare an aligned signed fullword with a register (inversion)
.GEN5_C_ ANOP  ,
&_LABEL  C     &ARG2,&ARG1             * Compare 2nd operand with 1st
&OPCD    SETC  '&OPCDINV'              * Use inverted opcode
         AGO   .TERM
.*
.* Compare a register with an aligned signed halfword
.GEN5_CH ANOP  ,
&_LABEL  CH    &ARG1,&ARG2             * Compare 1st operand with 2nd
         AGO   .TERM
.*
.* Compare an aligned signed halfword with a register (inversion)
.GEN5_CH_ ANOP ,
&_LABEL  CH    &ARG2,&ARG1             * Compare 2nd operand with 1st
&OPCD    SETC  '&OPCDINV'              * Use inverted opcode
         AGO   .TERM
.*
.* Compare a register with an aligned unsigned fullword
.GEN5_CL ANOP  ,
&_LABEL  CL    &ARG1,&ARG2             * Compare 1st operand with 2nd
         AGO   .TERM
.*
.* Compare an aligned unsigned fullword with a register (inversion)
.GEN5_CL_ ANOP ,
&_LABEL  CL    &ARG2,&ARG1             * Compare 2nd operand with 1st
&OPCD    SETC  '&OPCDINV'              * Use inverted opcode
         AGO   .TERM
.*
.* Compare two unsigned or char fields with same length
.* If operand length exceeds 256 we must use CLCL in stead of CLC.
.* To compare a 1-byte first operand with a literal, use CLI.
.GEN5_CLC ANOP ,
         AIF   (&LEN1 GT 256).GEN5_CLCL * Too long for CLC? Use CLCL!
         AIF   (&LEN1 EQ 1 AND &LITERAL).GEN5_CLC_CLI * Use CLI!
&_LABEL  CLC   &ARG1,&ARG2             * Compare 1st operand with 2nd
         AGO   .TERM
.GEN5_CLC_CLI ANOP ,                   * 1-byte literal: use CLI
&ARG2    SETC  '&ARG2'(2,*)            * Remove =sign
         AGO   .GEN5_CLI
.*
.* Compare two unsigned or char fields with different or long length
.GEN5_CLCL ANOP ,
&_LABEL  LA    R14,&ARG2               * Point to compare value
         AIF   (&LEN2 LT 4096).GEN5_CLCL_LA15
         AIF   (&LEN2 LT 32768).GEN5_CLCL_LH15
         L     R15,=A(&LEN2)           * Load comparand length
         AGO   .GEN5_CLCL_15
.GEN5_CLCL_LH15 ANOP ,
         LH    R15,=Y(&LEN2)           * Load comparand length
         AGO   .GEN5_CLCL_15
.GEN5_CLCL_LA15 ANOP ,
         LA    R15,&LEN2               * Load comparand length
.GEN5_CLCL_15 ANOP ,                   * Register 15 loaded with len2
.* For char fields of unequal length: insert pad=X'40'
         AIF   ('&TYPE1' NE 'C').NOPAD
         AIF   (&LEN1 EQ &LEN2).NOPAD
         LA    R1,X'40'                * Load padding character
         SLL   R1,24                   *  into left-most byte
         OR    R15,R1                  *  of comparand length register
.NOPAD   ANOP  ,
.*
         LA    R0,&ARG1                * Point to first argument
         AIF   (&LEN1 LT 4096).GEN5_CLCL_LA1
         AIF   (&LEN1 LT 32768).GEN5_CLCL_LH1
         L     R1,=A(&LEN1)            * Load comparand length
         AGO   .GEN5_CLCL_1
.GEN5_CLCL_LH1 ANOP ,
         LH    R1,=Y(&LEN1)            * Load comparand length
         AGO   .GEN5_CLCL_1
.GEN5_CLCL_LA1 ANOP ,
         LA    R1,&LEN1                * Load comparand length
.GEN5_CLCL_1 ANOP ,                    * Register 1 loaded with len1
         CLCL  R0,R14                  * Compare 1st operand with 2nd
         AGO   .TERM
.*
.* Compare an unsigned byte with a 1-byte literal value
.GEN5_CLI ANOP ,
&_LABEL  CLI   &ARG1,&ARG2             * Compare 1st operand with 2nd
         AGO   .TERM
.*
.* Compare a register with an unsigned 4-byte field
.GEN5_CLM4 ANOP ,
&_LABEL  CLM   &ARG1,YYYY,&ARG2        * Compare 1st operand with 2nd
         AGO   .TERM
.*
.* Compare two unsigned values in registers
.GEN5_CLR ANOP ,
&_LABEL  CLR   &ARG1,&ARG2             * Compare 1st operand with 2nd
         AGO   .TERM
.*
.* Compare two signed values in registers
.GEN5_CR ANOP  ,
&_LABEL  CR    &ARG1,&ARG2             * Compare 1st operand with 2nd
         AGO   .TERM
.*
.* Compare a register with zero
.GEN5_LTR ANOP ,
&_LABEL  LTR   &ARG1,&ARG1             * Compare 1st operand with 0
         AIF   ('&OPCD'(K'&OPCD,1) EQ 'E').GEN5_LTR_Z
         AIF   ('&OPCD'(K'&OPCD,1) EQ 'H').GEN5_LTR_P
         AIF   ('&OPCD'(K'&OPCD,1) EQ 'L').GEN5_LTR_M
         MNOTE 'Internal error 10: invalid opcode'
         MEXIT
.GEN5_LTR_Z ANOP ,
&OPCD    SETC  '&OPCD'(1,K'&OPCD-1).'Z'
         AGO   .TERM
.GEN5_LTR_P ANOP ,
&OPCD    SETC  '&OPCD'(1,K'&OPCD-1).'P'
         AGO   .TERM
.GEN5_LTR_M ANOP ,
&OPCD    SETC  '&OPCD'(1,K'&OPCD-1).'M'
         AGO   .TERM
.**********************************************************************
.*
.* Test condition code, after specified operation
.*
.**********************************************************************
.GEN6    ANOP  ,
&OPCD    SETC  '&SYSLIST(1,2)'         * Extract opcode for operation
&ARG1    SETC  '&SYSLIST(1,3)'         * Extract first operand
&ARG2    SETC  '&SYSLIST(1,4)'         * Extract second operand
&LABEL   &OPCD &ARG1,&ARG2             * Condition met?
.*
&MNEM    SETC  '&SYSLIST(1,1)'         * Extract condition
         AIF   (K'&MNEM EQ 1).GEN6_1   * 1 or 2 characters menmonic?
&TST     SETC  '&MNEM'(2,1)            * Set test-type = E/H/L/M/O/P/Z
&OPCD    SETC  'B&TST'                 * Create Bx-instruction
         AGO   .TERM                   *
.GEN6_1  ANOP  ,                       *
&TST     SETC  '&MNEM'                 * Set test-type = E/H/L/M/O/P/Z
&OPCD    SETC  'BN'.'&TST'             * Create BNx-instruction
         AGO   .TERM                   * No: skip then-logic
.**********************************************************************
.*
.* Test code-value
.*
.**********************************************************************
.GEN7    ANOP  ,
.*
.* Set OPCD to BNE: if code is not equal, skip then-logic
&OPCD    SETC  'BNE'                   * Skip then-logic if not equal
.*
         AIF   (L'&LOC NE 1).GEN7_CLC
&LABEL   CLI   &PRFLBL.&LOC,&CODEVAL   * Correct code?
         AGO   .TERM
.*
.GEN7_CLC ANOP ,
&MASKVAL SETA  L'&CODEVAL              * Retrieve value of code to test
&LABEL   CLC   &PRFLBL.&LOC,=HL(L'&LOC)'&MASKVAL'
         AGO   .TERM
.**********************************************************************
.*
.* Negative test on code-value
.*
.**********************************************************************
.GEN8    ANOP  ,
.*
.* Set OPCD to BE: if code is equal, skip then-logic
&OPCD    SETC  'BE'                    * Skip then-logic if equal
.*
         AIF   (L'&LOC NE 1).GEN8_CLC
&LABEL   CLI   &PRFLBL.&LOC,&CODEVAL   * Correct code?
         AGO   .TERM
.*
.GEN8_CLC ANOP ,
&MASKVAL SETA  L'&CODEVAL              * Retrieve value of code to test
&LABEL   CLC   &PRFLBL.&LOC,=HL(L'&LOC)'&MASKVAL'
         AGO   .TERM
.**********************************************************************
.*
.* Terminate IF by branching over the THEN block if condition not met
.*
.**********************************************************************
.TERM    ANOP  ,
         AIF   (&_TARGET).TERM_T       * TARGET with COND=TRUE?
         AIF   ('&LBL'(1,1) EQ '(').TERM_R
         &OPCD &LBL                    * If false: skip then-block
         MEXIT ,                       *
.TERM_R  ANOP  ,                       *
&OPCD    SETC  '&OPCD'.'R'             * Create branch-to-register
&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name
         &OPCD &LBL                    * If false: skip then-block
         MEXIT ,                       *
.*
.* Terminate IF by branching to the specifed target if condition is met
.TERM_T  ANOP  ,
         AIF   (K'&OPCD EQ 2).TERM_T2
         AIF   (K'&OPCD EQ 3).TERM_T3
         MNOTE 'Internal error 11: invalid opcode'
         MEXIT
.*
.TERM_T2 ANOP  ,                       *
&OPCD    SETC  'BN'.'&OPCD'(2,1)       * Change Bx --> BNx
         AIF   ('&TARGET'(1,1) EQ '(').TERM_TR
         &OPCD &TARGET                 * If true: branch to target
         MEXIT ,                       *
.*
.TERM_T3 ANOP  ,                       *
&OPCD    SETC  'B'.'&OPCD'(3,1)        * Change BNx --> Bx
         AIF   ('&TARGET'(1,1) EQ '(').TERM_TR
         &OPCD &TARGET                 * If true: branch to target
         MEXIT ,                       *
.*
.TERM_TR ANOP  ,                       *
&OPCD    SETC  '&OPCD'.'R'             * Create branch-to-register
         &OPCD &_TREG                  * If true: branch to target
         MEXIT ,                       *
.**********************************************************************
.MEND    MEND
./ ADD NAME=IF$ALC   0100-20096-20096-0111-00094-00094-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Allocate an available general purpose register
.* This is a sub-macro for use by the IF$-macro only
.*
&LABEL   IF$ALC &REG                   * Register to protect
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC IF$ALC                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_USED_REGS(16)      * Use status of registers
         GBLA  &BXA_NUMVAL             * Register allocated
         LCLA  &I
         LCLA  &ALC_REG                * Allocated register nr
         LCLB  &DODROP                 * DROP required yes/no
.*
.* Set the &REG in use, unless it is in USE already
         GBLA  &(BXA_REGN_&REG)        * Declare var with register nr
&I       SETA  &(BXA_REGN_&REG)+1      * Determine register index
         AIF   (&BXA_USED_REGS(&I)).USEOK
         USE   &REG                    * Tell asm not to use this reg
&DODROP  SETB  1                       * Must drop register before end
.USEOK   ANOP ,                        *
.*
.* Register is now in us, so it is safe to allocate, using EQUREG
         EQUREG SEARCH=(R0,R1,R14,R15), * Allocate a work register     *
               R0=YES                  * R0 would do fine
&I       SETA  &BXA_RC                 * Remember return code and
&ALCREG  SETA  &BXA_NUMVAL             *  allocated register for later
         AIF   (NOT &DODROP).DROPOK    * Skip drop if USE was skipped
         DROP  &REG                    * No longer needed!
.DROPOK  ANOP  ,                       * Housekeeping done
.*
&BXA_RC  SETA  &I                      * Set returncode for IF
&BXA_NUMVAL SETA &ALCREG               * And pass allocated reg.nr.
.*
.MEND    MEND
./ ADD NAME=IF$LS    0100-20096-20096-0111-00184-00184-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Load a signed field or literal into a register
.* This is a sub-macro for use by the $IF-macro only
.*
&LABEL   IF$LS &REG,                   * Register to load              *
               &FLD,                   * Field or literal with value   *
               &LITLEN,                * Length of literal or 0 for fld*
               &TYPE                   * Type of field
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC IF$LS                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLA  &LEN
         LCLA  &I
         LCLC  &NUM
         LCLC  &_FLD
.*
.* Determine length of field to be loaded
         AIF   ('&TYPE' EQ '0').DECLIT
         AIF   (K'&LITLEN EQ 0).FLDLEN
         AIF   (&LITLEN EQ 0).FLDLEN
&LEN     SETA  &LITLEN                 * Length is that of literal
         AGO   .LENOK
.FLDLEN  ANOP  ,
&LEN     SETA  L'&FLD                  * Length is that of field
.LENOK   ANOP
.*
.* Action depends on length of field to be loaded
         AIF   (&LEN EQ 1).LEN1
         AIF   (&LEN EQ 2).LEN2
         AIF   (&LEN EQ 3).LEN3
         AIF   (&LEN EQ 4).LEN4
&_FLD    SETC  (DOUBLE '&FLD')
         MNOTE 8,'&_FLD is too long to load into a register'
         MEXIT
.*
.* Load a 1-byte value into a register
.LEN1    ANOP  ,
&LABEL   ICM   &REG,YNNN,&FLD          * Load signed byte
         SRA   &REG,24                 * Remove garbage & sign extend
         MEXIT
.*
.* Load a 2-byte value into a register
.LEN2    ANOP  ,
&I       SETA  ('AFHVY' FIND '&TYPE')  * Some aligned type?
         AIF   (&I NE 0).LEN2_LH       * Yes: use LH
         AIF   ('&FLD'(1,1) EQ '=').LEN2_LH * 2-byte literal: aligned!
&LABEL   ICM   &REG,YYNN,&FLD          * Load signed bytes
         SRA   &REG,16                 * Remove garbage & sign extend
         MEXIT
.LEN2_LH ANOP  ,
&LABEL   LH    &REG,&FLD               * Load signed halfword
         MEXIT
.*
.* Load a 3-byte value into a register
.LEN3    ANOP  ,
&LABEL   ICM   &REG,YYYN,&FLD          * Load signed bytes
         SRA   &REG,8                  * Remove garbage & sign extend
         MEXIT
.*
.* Load a 4-byte value into a register
.LEN4    ANOP  ,
&I       SETA  ('AFV' FIND '&TYPE')    * Some aligned type?
         AIF   (&I NE 0).LEN4_L        * Yes: use L
         AIF   ('&FLD'(1,1) EQ '=').LEN4_L * 4-byte literal: aligned!
&LABEL   ICM   &REG,YYYY,&FLD          * Load signed bytes
         MEXIT
.LEN4_L  ANOP  ,
&LABEL   L     &REG,&FLD               * Load signed word
         MEXIT
.*
.* Handle a decimal literal - may be negative
.DECLIT  ANOP  ,
         AIF   ('&FLD'(1,1) EQ '-').DECLITN
&I       SETA  ('&FLD'(1,1) FIND '0123456789')
         AIF   (&I NE 0).DECLITP       * Decimal value
         AIF   ('&FLD'(K'&FLD,1) EQ '''').DECLITP * Hex or Bin value
.* Specified literal must be an equated symbol of type 0
         AIF   (T'&FLD EQ '0').NOERR1
&_FLD    SETC  (DOUBLE '&FLD')         * Make displayable
.ERR1    MNOTE 8,'&_FLD has type T'&FLD, expected type of 0'
         MEXIT
.NOERR1  ANOP  ,
.*
.* Retrieve value and decide how to load it
&I       SETA  L'&FLD                  * Type 0: length = copy of value
         AIF   (&I EQ 0).USE_CLEAR
         AIF   (&I GT 32767).USE_L
         AIF   (&I GT 4095).USE_LH
         AIF   (&I GT 0).USE_LA
         AIF   (&I LT -32767).USE_L
         AGO   .USE_LH
.*
.* Handle positive literal
.DECLITP ANOP  ,                       * Positive literal number
&I       SETA  &FLD                    * Load decimal value
         AIF   (&I EQ 0).USE_CLEAR
         AIF   (&I LT 4096).USE_LA
         AIF   (&I LT 32768).USE_LH
         AGO   .USE_L
.*
.* Handle negative literal
.DECLITN ANOP  ,                       * Negative literal number
&NUM     SETC  '&FLD'(2,*)             * Extract numerical part
&I       SETA  &NUM
         AIF   (&I EQ 0).USE_CLEAR
         AIF   (&I LT 32768).USE_LH
         AGO   .USE_L
.*
.USE_CLEAR ANOP ,
&LABEL   CLEAR &REG                    * Wipe register
         MEXIT
.*
.USE_LA  ANOP  ,
&LABEL   LA    &REG,&FLD               * Load literal number
         MEXIT
.*
.USE_LH  ANOP  ,
&LABEL   LH    &REG,=H'&FLD'           * Load literal number
         MEXIT
.*
.USE_L   ANOP  ,
&LABEL   L     &REG,=F'&FLD'           * Load literal number
         MEXIT
.*
.MEND    MEND
./ ADD NAME=IF$LU    0100-20096-20096-0111-00122-00122-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Load an unsigned field or literal into a register
.* This is a sub-macro for use by the $IF-macro only
.*
&LABEL   IF$LU &REG,                   * Register to load              *
               &FLD,                   * Field or literal with value   *
               &LITLEN,                * Length of literal or 0 for fld*
               &TYPE
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC IF$LU                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLA  &LEN
         LCLA  &I
         LCLC  &_FLD
.*
.* Determine length of field to be loaded
         AIF   (K'&LITLEN EQ 0).FLDLEN
         AIF   (&LITLEN EQ 0).FLDLEN
&LEN     SETA  &LITLEN                 * Length is that of literal
         AGO   .LENOK
.FLDLEN  ANOP  ,
&LEN     SETA  L'&FLD                  * Length is that of field
.LENOK   ANOP
.*
.* Action depends on length of field to be loaded
         AIF   (&LEN EQ 1).LEN1
         AIF   (&LEN EQ 2).LEN2
         AIF   (&LEN EQ 3).LEN3
         AIF   (&LEN EQ 4).LEN4
&_FLD    SETC  (DOUBLE '&FLD')
         MNOTE 8,'&_FLD is too long to load into a register'
         MEXIT
.*
.* Load a 1-byte value into a register
.LEN1    ANOP  ,
&LABEL   CLEAR &REG
         IC    &REG,&FLD               * Load unsigned byte
         MEXIT
.*
.* Load a 2-byte value into a register
.LEN2    ANOP  ,
&LABEL   CLEAR &REG
         ICM   &REG,NNYY,&FLD          * Load unsigned bytes
         MEXIT
.*
.* Load a 3-byte value into a register
.LEN3    ANOP  ,
&LABEL   CLEAR &REG
         ICM   &REG,NYYY,&FLD          * Load unsigned bytes
         MEXIT
.*
.* Load a 4-byte value into a register
.LEN4    ANOP  ,
&I       SETA  ('AFV' FIND '&TYPE')    * Some aligned type?
         AIF   (&I NE 0).LEN4_L        * Yes: use L
         AIF   ('&FLD'(1,1) EQ '=').LEN4_L * 4-byte literal: aligned!
&LABEL   ICM   &REG,YYYY,&FLD          * Load unsigned bytes
         MEXIT
.LEN4_L  ANOP  ,
&LABEL   L     &REG,&FLD               * Load unsigned bytes
         MEXIT
.*
.MEND    MEND
./ ADD NAME=INC      0100-20096-20096-0111-00137-00137-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Increment a register
.*
&LABEL   INC   &REG,                   * Register to be incremented    *
               &COUNT                  * Amount to increment
.*
.* &REG   specifies the register to be incremented
.* &COUNT specifies the amount by which the register is to be
.*        incremented. May be specified as:
.*      - Literal or symbolic value: must evaluate to a value between 0
.*        and 4095 inclusive.
.*      - (reg): must specify a valid register, 0 not allowed
.*      - (value,reg): both of the above apply
.*      - nothing: defaults to 1
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC INC                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare locals
         LCLC  &_REG,&_COUNT,&_COUNTR
.*
.* Check Reg parameter
&_REG    SETC  '&REG'
         AIF   (K'&REG NE 0).NOERR1A
.ERR1A   MNOTE 8,'No register specified'
.NOERR1A ANOP
         AIF   ('&REG'(1,1) NE '(').NOERR1
         AIF   (N'&REG EQ 0).ERR1B
         AIF   (N'&REG GT 1).ERR1C
&_REG    SETC  '&REG(1)'
         AGO   .NOERR1
.ERR1B   MNOTE 8,'No register specified within sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'More than 1 register specified within sublist'
.NOERR1  ANOP
.*
.* Check Count parameter
         AIF   (K'&COUNT EQ 0).NOERR2
         AIF   ('&COUNT'(1,1) NE '(').NOERR2
         AIF   (N'&COUNT EQ 0).ERR2A
         AIF   (N'&COUNT GT 2).ERR2B
         AGO   .NOERR2
.ERR2A   MNOTE 8,'No amount to increment specified in sublist'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Too many arguments specified in sublist'
.NOERR2  ANOP
.*
.* Split &COUNT into &_COUNT and &_COUNTR
         AIF   (K'&COUNT EQ 0).COUNT1
         AIF   ('&COUNT'(1,1) NE '(').COUNTLIT
         AIF   (N'&COUNT EQ 1).COUNTR
&_COUNTR SETC  '&COUNT(2)'
&_COUNT  SETC  '&COUNT(1)'
         AGO   .COUNT_OK
.COUNTR  ANOP
&_COUNTR SETC  '&COUNT(1)'
&_COUNT  SETC  '0'
         AGO   .COUNT_OK
.COUNTLIT ANOP
&_COUNT  SETC  '&COUNT'
         AGO   .COUNT_OK
.COUNT1  ANOP
&_COUNT  SETC  '1'
.COUNT_OK ANOP
.*
.* Generate a LA instruction to increment the register
&LABEL   LA    &_REG,&_COUNT.(&_COUNTR,&_REG) * Increment register
.*
.* If the increment register is register 0, add an AR instruction
         AIF   ('&_COUNTR' EQ 'R0').R0
         AIF   ('&_COUNTR' EQ 'R00').R0
         AIF   ('&_COUNTR' EQ '0').R0
         AIF   ('&_COUNTR' EQ '00').R0
         AGO   .MEND
.*
.R0      ANOP  ,
         AR    &_REG,&_COUNTR          * And add increment from GPR0
.*
.MEND    MEND
./ ADD NAME=IPK      0100-20096-20096-0111-00084-00084-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the IPK instruction
.*
&LABEL   IPK   ,                       * Parameters in SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC IPK                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_PRM(3)             * Parameters
         GBLB  &BXA_USED_REGS(16)      * USE status of registers 0-15
         LCLC  &TXT                    * Text variable for errors
.*
.* Check number of parameters
         AIF   (N'&SYSLIST NE 0).NOERR5
.ERR5A   MNOTE 4,'Expected no arguments: ignored'
.NOERR5  ANOP  ,
.*
.* Check that register 2 is not currently in use
         AIF   (NOT &BXA_USED_REGS(3)).NOERR6B * R2 available?
.ERR6B   MNOTE 4,'Register 2 will be modified but is not available'
.NOERR6B ANOP  ,                       *
.*
.* Generate code with indentation
&LABEL   GEN   _IPK                    *
.*
.MEND    MEND
./ ADD NAME=LA       0100-20096-20096-0111-00183-00183-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the LA instruction
.* Filling a register with a zero value is replaced by XR
.*
&LABEL   LA    ,                       * Parameters in SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LA                     * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_NUMVAL             * Output from CHKREG
         GBLC  &BXA_PRM(3)             * Parameters
         LCLC  &FROM                   * Second parameter
         LCLC  &TO                     * First parameter
         LCLC  &_FROMD                 * Source displacement value
         LCLC  &_FROMX                 * Source index register
         LCLC  &_FROMB                 * Source base register
         LCLC  &_TOR                   * Destination register
         LCLA  &_TO                    * Destination register number
         LCLA  &I                      * Work var.
         LCLC  &TXT                    * Text variable for errors
         LCLA  &REG1                   * Index register number
         LCLA  &REG2                   * Base register number
.*
.* Extract TO and FROM from SYSLIST
&TO      SETC  '&SYSLIST(1)'
&FROM    SETC  '&SYSLIST(2)'
.*
.* If FROM is not specified and TO contains an embedded comma, then
.*    decompose the TO field in its constituent parts.
         AIF   (K'&FROM NE 0).NOSPLIT  *
         SPLIT &TO                     *
&TO      SETC  ''                      * Wipe field
         AIF   (&BXA_NUMVAL LT 1).NOSPLIT
&TO      SETC  '&BXA_PRM(1)'           * TO field is first parameter
         AIF   (&BXA_NUMVAL LT 2).NOSPLIT
&FROM    SETC  '&BXA_PRM(2)'           * FROM field is second parameter
.NOSPLIT ANOP  ,
.*
.* Decompose FROM field
         DISSECT DXB,&FROM             *
&_FROMD  SETC  '&BXA_PRM(1)'           * Displacement
&_FROMX  SETC  '&BXA_PRM(2)'           * index register
&_FROMB  SETC  '&BXA_PRM(3)'           * Base register
.*
.* Decompose TO field
         DISSECT R,&TO                 *
&_TOR    SETC  '&BXA_PRM(1)'           * Register
.*
.* Check the Destination register
         AIF   (K'&_TOR EQ 0).ERR1A    * Must not be empty
         CHKREG &_TOR,g                * A register was specified?
         AIF   (&BXA_RC EQ 8).ERR1B    * Not a register
&_TO     SETA  &BXA_NUMVAL             * Save register number
         AIF   (&BXA_RC EQ 0).NOERR1   * This is a defined register
.* BXA_RC = 4: a  literal number was specified
         AIF   (&SYSNEST EQ 1).ERR1C   * LA occurred in open code?
         AGO   .NOERR1                 *
.ERR1A   MNOTE 8,'Missing destination register'
         AGO   .NOERR1                 *
.ERR1B   ANOP  ,                       *
&TXT     SETC  (DOUBLE '&_TOR')        *
         MNOTE 4,'&TXT is not a valid general purpose register'
         AGO   .NOERR1                 *
.ERR1C   MNOTE 4,'You should use a register in stead of &_TOR'
.NOERR1  ANOP  ,                       *
.*
.* Check the FROM parameter
         AIF   (K'&_FROMD GT 0).NOERR2 * Displacement specified?
.ERR2A   ANOP  ,                       *
         MNOTE 4,'Second parameter missing or invalid'
         AGO   .NOERR2                 *
.NOERR2  ANOP  ,                       *
.*
.* Check the Source base register
         AIF   (K'&_FROMB EQ 0).NOERR3 * Omitted?
         CHKREG &_FROMB,g              * A register was specified?
         AIF   (&BXA_RC EQ 8).ERR3A    * Not a register
&REG2    SETA  &BXA_NUMVAL             * Save nr of specified register
         AIF   (&BXA_RC EQ 0).NOERR3   * This is a real register
.* BXA_RC = 4: a  literal number was specified
         AIF   (&SYSNEST EQ 1).ERR3B   * LA occurred in open code?
         AGO   .NOERR3                 *
.ERR3A   ANOP  ,                       *
&TXT     SETC  (DOUBLE '&_FROMB')      *
         MNOTE 4,'&TXT is not a valid general purpose register'
         AGO   .NOERR3                 *
.ERR3B   MNOTE 4,'You should use a register in stead of &_FROMB'
.NOERR3  ANOP  ,                       *
.*
.* Check the Source index register
         AIF   (K'&_FROMX EQ 0).NOERR4 * Omitted?
         CHKREG &_FROMX,g              * A register was specified?
         AIF   (&BXA_RC EQ 8).ERR4A    * Not a register
&REG1    SETA  &BXA_NUMVAL             * Save nr of specified register
         AIF   (&BXA_RC EQ 0).NOERR4   * This is a real register
.* BXA_RC = 4: a  literal number was specified
         AIF   (&SYSNEST EQ 1).ERR4B   * LA occurred in open code?
         AGO   .NOERR4
.ERR4A   ANOP  ,
&TXT     SETC  (DOUBLE '&_FROMX')
         MNOTE 4,'&TXT is not a valid general purpose register'
         AGO   .NOERR4
.ERR4B   MNOTE 4,'You should use a register in stead of &_FROMX'
.NOERR4  ANOP  ,
.*
.* Check number of parameters
         AIF   (N'&SYSLIST LE 2).NOERR5
.ERR5A   MNOTE 4,'Expected two arguments: remainder ignored'
.NOERR5  ANOP  ,
.*
.* Check for a value of absolute zero
         AIF   (&REG1 NE 0).NOERR6     * Index register not zero
         AIF   (&REG2 NE 0).NOERR6     * Base register not zero
         CHKLIT &_FROMD                * Valid literal number?
         AIF   (&BXA_RC EQ 8).NOERR6   * No: assume it's not zero
         AIF   (&BXA_NUMVAL NE 0).NOERR6 * Literal GT 0
.ERR6A   MNOTE 0,'Loading register &_TOR with a value of zero'
         XR    &_TOR,&_TOR             * Wipe register
         MEXIT ,                       *
.NOERR6  ANOP  ,                       *
.*
.* Generate code with indentation
&LABEL   GEN   _LA,&_TOR,&FROM         *
.*
.MEND    MEND
./ ADD NAME=LABEL    0100-20096-20096-0111-00082-00082-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates a label on a specified boundary
.*
&LABEL   LABEL &ALIGN                  * Alignment code
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LABEL                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Check the alignment parameter
         AIF   (K'&ALIGN EQ 0).NOALIGN
         AIF   ('&ALIGN' EQ 'H').ALIGN
         AIF   ('&ALIGN' EQ 'F').ALIGN
         AIF   ('&ALIGN' EQ 'D').ALIGN
.ERR1    MNOTE 8,'ALIGN parameter does not specify H, F, or D'
         AGO   .NOALIGN
.*
.ALIGN   ANOP
         DS    0&ALIGN
.NOALIGN ANOP
.*
         AIF   (K'&LABEL EQ 0).NOLABEL
&LABEL   EQU   *
.NOLABEL ANOP
.*
.MEND    MEND
./ ADD NAME=LC       0100-20096-20096-0111-00098-00098-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Load a Character into a register
.*
&LABEL   LC    &REG,                   * Register to load              *
               &LOC                    * Location of character
.*
.* &REG  specifies the register to load
.* &LOC  specifies the location that holds the character to be loaded
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LC                     * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Check the REG parameter
         AIF   (K'&REG NE 0).NOERR1A
.ERR1A   MNOTE 8,'No register specified'
         AGO   .NOERR1
.NOERR1A ANOP
         AIF   ('&REG'(1,1) NE '(').NOERR1
         AIF   (N'&REG EQ 0).ERR1B
         AIF   (N'&REG GT 1).ERR1C
         AGO   .NOERR1
.ERR1B   MNOTE 8,'No register specified within sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'More than 1 register specified in sublist'
.NOERR1  ANOP
.*
.* Check the LOC parameter
         AIF   (K'&LOC NE 0).NOERR2
.ERR2    MNOTE 8,'LOC parameter not specified'
.NOERR2  ANOP
.*
.* Check the number of parameters
         AIF   (N'&SYSLIST EQ 2).NOERR3
.ERR3    MNOTE 4,'Too many parameters specified: ignored'
.NOERR3  ANOP
.*
&LABEL   CLEAR &REG                    * Wipe register
         IC    &REG,&LOC               *  and instert character
.*
.MEND    MEND
./ ADD NAME=LEAVE    0100-20096-20096-0111-00139-00139-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: LEAVE
.* Combines with DO (WHILE/UNTIL) to abort an executing loop
.*
.* Syntax:
.* 0) LEAVE
.* 1) LEAVE cond
.* 2) LEAVE UNLESS,cond
.* where cond is a condition, as described in the IF macro
.*
&LABEL   LEAVE &DOLAB=                 * Label of associated DO
.*                                     * Condition in &SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LEAVE                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_DO(5)          * DO-labels
         GBLC  &BXA_STK_LBL(5)         * Labels
         LCLC  &OP                     * Last DO opcode on stack
         LCLC  &DO                     * Label of last DO on stack
         LCLC  &LBL                    * Endlabel of last DO on stack
         LCLA  &I                      * Stack pointer
         LCLC  &ARGS                   * SYSLIST as a string
.*
.* Search down the stack to find the last active DO statement
&I       SETA  &BXA_STK+1              * Copy stack pointer
.LOOP1   ANOP  ,                       * Search struct.program. stack
&I       SETA  &I-1                    * Point preceding entry
         AIF   (&I LT 1).ERR1A         * Not found: error!
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack
         AIF   ('&OP' EQ 'DO').LOOP1F  * Found
         AIF   ('&OP' EQ 'DOWHILE').LOOP1F
         AIF   ('&OP' EQ 'DOUNTIL').LOOP1F
         AIF   ('&OP' EQ 'DOCOUNT').LOOP1F
         AGO   .LOOP1                  * Mismatch: keep searching
.LOOP1F  ANOP  ,                       * Found LEAVE-able entry
&LBL     SETC  '&BXA_STK_LBL(&I)'      * Extract end-of-loop label
&DO      SETC  '&BXA_STK_DO(&I)'       *  and start-of-loop label
         AGO   .NOERR1
.ERR1A   MNOTE 8,'No preceding DO statement: ignored'
         MEXIT
.NOERR1  ANOP
.*
.* If DO-label specified: must match label of DO statement
         AIF   (K'&DOLAB EQ 0).NOERR2
         AIF   ('&DOLAB' EQ '&DO').NOERR2
.ERR2A   MNOTE 8,'Specified label does not match current active DO'
         MEXIT
.NOERR2  ANOP
.*
.* If end-of-loop label not in table: generate one
.* &I still points to current stack entry
         AIF   (K'&LBL GT 0).DOOK
&LBL     SETC  '_EDO_&SYSNDX'          * Create end-of-loop label
&BXA_STK_LBL(&I) SETC '&LBL'           * And add to table
.DOOK    ANOP  ,
.*
.* Build ARGS from &SYSLIST.
&I       SETA  0                       * I indexes SYSLIST
.LOOP2   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AGO   .LOOP2                  * And go process next entry
.LOOP2OK ANOP
         AIF   (K'&ARGS EQ 0).NOARGS
&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,
.NOARGS  ANOP
.*
.* Generate the code for leaving this loop
         AIF   (K'&ARGS EQ 0).NOCOND
         AIF   ('&ARGS' EQ '(,)').NOCOND
         GOTO  &LBL,&ARGS              * Conditional exit-from-loop
         MEXIT
.*
.NOCOND  ANOP
         GOTO  &LBL                    * Exit from loop
.*
.MEND    MEND
./ ADD NAME=LOOP     0100-20096-20096-0111-00146-00146-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Structured programming macro: LOOP
.* Combines with DO (WHILE/UNTIL/count) to repeat an executing loop
.*
.* Syntax:
.* 0) LOOP
.* 1) LOOP cond
.* 2) LOOP UNLESS,cond
.* where cond is a condition, as described in the IF macro
.*
&LABEL   LOOP  &DOLAB=                 * Label of associated DO
.*                                     * Condition in &SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LOOP                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_STK                * Index to last valid
         GBLC  &BXA_STK_OP(5)          * Opcodes
         GBLC  &BXA_STK_DO(5)          * DO-labels
         GBLC  &BXA_STK_CLB(5)         * Condition labels
         LCLC  &OP                     * Last DO opcode on stack
         LCLC  &DO                     * Label of last DO on stack
         LCLC  &CLB                    * Condition label for last DO
         LCLA  &I                      * Stack pointer
         LCLC  &ARGS                   * SYSLIST as a string
.*
.* Search down the stack to find the last active DO
&I       SETA  &BXA_STK+1              * Copy stack pointer
.LOOP1   ANOP  ,                       * Search struct.program. stack
&I       SETA  &I-1                    * Point preceding entry
         AIF   (&I LT 1).ERR1A         * Not found: error!
&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack
         AIF   ('&OP' EQ 'DO').LOOP1F  * Found
         AIF   ('&OP' EQ 'DOWHILE').LOOP1F
         AIF   ('&OP' EQ 'DOUNTIL').LOOP1F
         AIF   ('&OP' EQ 'DOCOUNT').LOOP1F
         AGO   .LOOP1                  * Mismatch: keep searching
.LOOP1F  ANOP  ,                       * Found LEAVE-able entry
&DO      SETC  '&BXA_STK_DO(&I)'       * Extract start-of-loop label
&CLB     SETC  '&BXA_STK_CLB(&I)'      *  and condition label
         AGO   .NOERR1
.ERR1A   MNOTE 8,'No preceding DO statement: ignored'
         MEXIT
.NOERR1  ANOP
.*
.* If DO-label specified: must match label of DO statement
         AIF   (K'&DOLAB EQ 0).NOERR2
         AIF   ('&DOLAB' EQ '&DO').NOERR2
.ERR2A   MNOTE 8,'Specified label does not match current active DO'
         MEXIT
.NOERR2  ANOP
.*
.* For DOUNTIL/DOCOUNT: if condition label not in table: generate one
.* &I still points to current stack entry
         AIF   ('&OP' EQ 'DOUNTIL').DOCLB
         AIF   ('&OP' EQ 'DOCOUNT').DOCLB
         AGO   .DOOK
.DOCLB   ANOP  ,
         AIF   (K'&CLB GT 0).CLBOK
&CLB     SETC  '_NXT_&SYSNDX'          * Create loop condition label
&BXA_STK_CLB(&I) SETC '&CLB'           * And add to table
.CLBOK   ANOP  ,
.* Copy CLB-value to &DO, which holds the DO label
&DO      SETC  '&CLB'                  * Alter destination label
.DOOK    ANOP  ,
.*
.* Build ARGS from &SYSLIST.
&I       SETA  0                       * I indexes SYSLIST
.LOOP2   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AGO   .LOOP2                  * And go process next entry
.LOOP2OK ANOP
         AIF   (K'&ARGS EQ 0).NOARGS
&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,
.NOARGS  ANOP
.*
.* Generate the code for iterating this loop
         AIF   (K'&ARGS EQ 0).NOCOND
         AIF   ('&ARGS' EQ '(,)').NOCOND
         GOTO  &DO,&ARGS               * Conditional repeat of loop
         MEXIT
.*
.NOCOND  ANOP
         GOTO  &DO                     * Repeat loop
.*
.MEND    MEND
./ ADD NAME=LR       0100-20096-20096-0111-00154-00154-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the LR instruction
.* Copying from a register to itself is suppressed.
.*
&LABEL   LR    ,                       * Arguments are in SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LR                     * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_NUMVAL             * Output from CHKREG
         GBLC  &BXA_PRM(3)             * Parameters
         LCLC  &FROM                   * Second parameter
         LCLC  &TO                     * First parameter
         LCLC  &_FROMR                 * Source displacement value
         LCLC  &_TOR                   * Destination register
         LCLA  &I                      * Work var.
         LCLC  &TXT                    * Text variable for errors
         LCLA  &REG1                   * To register number
         LCLA  &REG2                   * From register number
.*
.* Extract TO and FROM from SYSLIST
&TO      SETC  '&SYSLIST(1)'
&FROM    SETC  '&SYSLIST(2)'
.*
.* If FROM is not specified and TO contains an embedded comma, then
.*    decompose the TO field in its constituent parts.
         AIF   (K'&FROM NE 0).NOSPLIT  *
         SPLIT &TO                     *
&TO      SETC  ''                      *
         AIF   (&BXA_NUMVAL LT 1).NOSPLIT
&TO      SETC  '&BXA_PRM(1)'           * TO field is first parameter
         AIF   (&BXA_NUMVAL LT 2).NOSPLIT
&FROM    SETC  '&BXA_PRM(2)'           * FROM field is second parameter
.NOSPLIT ANOP  ,
.*
.* Decompose FROM field
         DISSECT R,&FROM               *
&_FROMR  SETC  '&BXA_PRM(1)'           * Register
.*
.* Decompose TO field
         DISSECT R,&TO                 *
&_TOR    SETC  '&BXA_PRM(1)'           * Register
.*
.* Check the Destination register
         AIF   (K'&_TOR EQ 0).ERR1A    * Must not be empty
         CHKREG &_TOR,g                * A register was specified?
         AIF   (&BXA_RC EQ 8).ERR1B    * Not a register
&REG1    SETA  &BXA_NUMVAL             * Save register number
         AIF   (&BXA_RC EQ 0).NOERR1   * This is a defined register
.* BXA_RC = 4: a  literal number was specified
         AIF   (&SYSNEST EQ 1).ERR1C   * LA occurred in open code?
         AGO   .NOERR1                 *
.ERR1A   MNOTE 8,'Missing destination register'
         AGO   .GEN                    *
.ERR1B   ANOP  ,                       *
&TXT     SETC  (DOUBLE '&_TOR')        *
         MNOTE 4,'&TXT is not a valid general purpose register'
         AGO   .NOERR1                 *
.ERR1C   MNOTE 4,'You should use a register in stead of &_TOR'
.NOERR1  ANOP  ,                       *
.*
.* Check the Source register
         AIF   (K'&_FROMR EQ 0).ERR2A  * Must not be empty
         CHKREG &_FROMR,g              * A register was specified?
         AIF   (&BXA_RC EQ 8).ERR2B    * Not a register
&REG2    SETA  &BXA_NUMVAL             * Save register number
         AIF   (&BXA_RC EQ 0).NOERR2   * This is a defined register
.* BXA_RC = 4: a  literal number was specified
         AIF   (&SYSNEST EQ 1).ERR2C   * LR occurred in open code?
         AGO   .NOERR2                 *
.ERR2A   MNOTE 8,'Missing source register'
         AGO   .GEN                    *
.ERR2B   ANOP  ,                       *
&TXT     SETC  (DOUBLE '&_FROMR')      *
         MNOTE 4,'&TXT is not a valid general purpose register'
         AGO   .NOERR2                 *
.ERR2C   MNOTE 4,'You should use a register in stead of &_FROMR'
.NOERR2  ANOP  ,                       *
.*
.* Check number of parameters
         AIF   (N'&SYSLIST LE 2).NOERR3
.ERR3A   MNOTE 4,'Expected two arguments: remainder ignored'
.NOERR3  ANOP  ,
.*
.* Check for equal registers
         AIF   (&REG1 NE &REG2).NOERR4 * Not equal --> Ok!
.ERR4A   MNOTE 4,'Not useful to copy from register &_FROMR to &_TOR: ig*
               nored'
         MEXIT ,
.NOERR4  ANOP  ,
.*
.* Generate code with indentation
.GEN     ANOP  ,
&LABEL   GEN   _LR,&_TOR,&_FROMR
.*
.MEND    MEND
./ ADD NAME=LT       0100-20096-20096-0111-00097-00097-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Load and Test a register
.*
&LABEL   LT    &REG,                   * Register to load              *
               &LOC                    * Location of value
.*
.* &REG  specifies the register to load
.* &LOC  specifies the location that holds the value to be loaded
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LT                     * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Check the REG parameter
         AIF   (K'&REG NE 0).NOERR1A
.ERR1A   MNOTE 8,'No register specified'
         AGO   .NOERR1
.NOERR1A ANOP
         AIF   ('&REG'(1,1) NE '(').NOERR1
         AIF   (N'&REG EQ 0).ERR1B
         AIF   (N'&REG GT 1).ERR1C
         AGO   .NOERR1
.ERR1B   MNOTE 8,'No register specified within sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'More than 1 register specified in sublist'
.NOERR1  ANOP
.*
.* Check the LOC parameter
         AIF   (K'&LOC NE 0).NOERR2
.ERR2    MNOTE 8,'LOC parameter not specified'
.NOERR2  ANOP
.*
.* Check the number of parameters
         AIF   (N'&SYSLIST EQ 2).NOERR3
.ERR3    MNOTE 4,'Too many parameters specified: ignored'
.NOERR3  ANOP
.*
&LABEL   ICM   &REG,ALLBYTES,&LOC      * Load value and test it
.*
.MEND    MEND
./ ADD NAME=LTA24    0100-20096-20096-0111-00171-00171-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Load and Test 24-bit address into a register
.*
&LABEL   LTA24 &REG,                   * Register to load              *
               &LOC,                   * Location of address           *
               &MASK,                  * Mask for ICM (default=NYYY)   *
               &RELOAD=                * YES, NO, QUICK
.*
.* &REG  specifies the register to load
.* &LOC  specifies the location of the address to be loaded
.* &MASK specifies which bytes of the register are to be loaded
.* &RELOAD if YES, specifies that the register to be loaded is also
.*       used as a base register to address the field.
.*       if NO, specifies that the register to be loaded will not be
.*       used as a base register to address the field.
.*       if QUICK, specifies that the register to be loaded is also
.*       used as a 24-bit base register to address the field.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LTA24                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &_REG                   * Register specified
         LCLA  &_REGNO                 * Register number
         LCLA  &_REGX                  * Register index
         LCLC  &_MASK                  * Specified or defaulted mask
         LCLC  &_RELOAD                * Reload option
         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15
         GBLA  &BXA_NUMVAL             * Output from CHKREG
         LCLC  &TMP                    * Temp register
.*
.* Check the RELOAD parameter
         AIF   (K'&RELOAD EQ 0).NOERR4
&_RELOAD SETC  '&RELOAD'
         AIF   ('&RELOAD' EQ 'YES').NOERR4
         AIF   ('&RELOAD' EQ 'QUICK').NOERR4
         AIF   ('&RELOAD' EQ 'NO').NOERR4
.ERR4    MNOTE 4,'Invalid RELOAD parameter: ignored'
&_RELOAD SETC  ''                      * Default to no RELOAD parm
.NOERR4  ANOP  ,
.*
.* Check the REG parameter
&_REG    SETC  '&REG'
         AIF   (K'&REG NE 0).NOERR1A
.ERR1A   MNOTE 8,'No register specified'
         AGO   .NOERR1
.NOERR1A ANOP
         AIF   ('&REG'(1,1) NE '(').NOERR1C
&_REG    SETC  '&REG(1)'
         AIF   (N'&REG EQ 0).ERR1B
         AIF   (N'&REG GT 1).ERR1C
         AGO   .NOERR1C
.ERR1B   MNOTE 8,'No register specified within sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'More than 1 register specified in sublist'
         AGO   .NOERR1
.NOERR1C ANOP
         CHKREG &_REG
         AIF   (&BXA_RC GT 4).ERR1D
&_REGX   SETA  &BXA_NUMVAL+1           * Create index value
         AGO   .NOERR1D
.ERR1D   ANOP  ,
&_REG    SETC  (DOUBLE '&_REG')
         MNOTE 8,'&_REG is not a valid register'
         AGO   .NOERR1
.NOERR1D ANOP
         AIF   (NOT &BXA_USED_REGS(&_REGX)).NOERR1
.ERR1E   ANOP  ,
         AIF   (K'&_RELOAD NE 0).NOERR1
&_REG    SETC  (DOUBLE '&_REG')
         MNOTE 0,'&_REG is currently in use, code generated may err'
.NOERR1  ANOP
.*
.* Check the LOC parameter
         AIF   (K'&LOC NE 0).NOERR2
.ERR2    MNOTE 8,'LOC parameter not specified'
.NOERR2  ANOP
.*
.* Check the MASK parameter
&_MASK   SETC  '&MASK'
         AIF   (K'&MASK NE 0).MASKOK
&_MASK   SETC  'NYYY'
.MASKOK  ANOP
.*
.* Check the number of parameters
         AIF   (N'&SYSLIST LE 3).NOERR3
.ERR3    MNOTE 4,'Too many parameters specified: ignored'
.NOERR3  ANOP
.*
.* Generate code
         AIF   ('&_RELOAD' EQ 'YES').RELOAD
         AIF   ('&_RELOAD' EQ 'QUICK').RELALT
&LABEL   CLEAR &_REG                   * Wipe register
         ICM   &_REG,&_MASK,&LOC       * Load and test 24-bit address
         MEXIT
.*
.RELOAD  ANOP  ,                       * Reload register
         EQUREG TEMP=YES,R0=YES        * Assign any register
         AIF   (&BXA_RC GT 0).RELALT   * Use alternate code
&TMP     SETC  'R'.'&BXA_NUMVAL'       * Create register name
&LABEL   CLEAR &TMP                    * Wipe register
         ICM   &TMP,&_MASK,&LOC        * Load 24-bit address
         LTR   &_REG,&TMP              * Load and test 24-bit value
         MEXIT
.*
.RELALT  ANOP  ,                       * Reload register (Alternate)
&LABEL   ICM   &_REG,&_MASK,&LOC       * Load and test 24-bit address
         AIF   ('&_RELOAD' EQ 'QUICK').MEND
         SLL   &_REG,8                 * Remove hi-order bits
         SRL   &_REG,8                 * Reposition low-order bits
         LTR   &_REG,&_REG             * Check register contents
.*
.MEND    MEND
./ ADD NAME=LTC      0100-20096-20096-0111-00109-00109-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Load and Test Characters into a register
.*
&LABEL   LTC   &REG,                   * Register to load              *
               &LOC,                   * Location of character         *
               &MASK                   * Mask for ICM (default=NNNY)
.*
.* &REG  specifies the register to load
.* &LOC  specifies the location of the character(s) to be loaded
.* &MASK specifies which bytes of the register are to be loaded
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LTC                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &_MASK
.*
.* Check the REG parameter
         AIF   (K'&REG NE 0).NOERR1A
.ERR1A   MNOTE 8,'No register specified'
         AGO   .NOERR1
.NOERR1A ANOP
         AIF   ('&REG'(1,1) NE '(').NOERR1
         AIF   (N'&REG EQ 0).ERR1B
         AIF   (N'&REG GT 1).ERR1C
         AGO   .NOERR1
.ERR1B   MNOTE 8,'No register specified within sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'More than 1 register specified in sublist'
.NOERR1  ANOP
.*
.* Check the LOC parameter
         AIF   (K'&LOC NE 0).NOERR2
.ERR2    MNOTE 8,'LOC parameter not specified'
.NOERR2  ANOP
.*
.* Check the MASK parameter
&_MASK   SETC  '&MASK'
         AIF   (K'&MASK NE 0).MASKOK
&_MASK   SETC  'NNNY'
.MASKOK  ANOP
.*
.* Check the number of parameters
         AIF   (N'&SYSLIST LE 3).NOERR3
.ERR3    MNOTE 4,'Too many parameters specified: ignored'
.NOERR3  ANOP
.*
&LABEL   CLEAR &REG                    * Wipe register
         ICM   &REG,&_MASK,&LOC        * Load and test character(s)
.*
.MEND    MEND
./ ADD NAME=LTH      0100-20096-20096-0111-00098-00098-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Load and Test signed halfword into register
.*
&LABEL   LTH   &REG,                   * Register to load              *
               &LOC                    * Location of value
.*
.* &REG  specifies the register to load
.* &LOC  specifies the location that holds the value to be loaded
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LTH                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Check the REG parameter
         AIF   (K'&REG NE 0).NOERR1A
.ERR1A   MNOTE 8,'No register specified'
         AGO   .NOERR1
.NOERR1A ANOP
         AIF   ('&REG'(1,1) NE '(').NOERR1
         AIF   (N'&REG EQ 0).ERR1B
         AIF   (N'&REG GT 1).ERR1C
         AGO   .NOERR1
.ERR1B   MNOTE 8,'No register specified within sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'More than 1 register specified in sublist'
.NOERR1  ANOP
.*
.* Check the LOC parameter
         AIF   (K'&LOC NE 0).NOERR2
.ERR2    MNOTE 8,'LOC parameter not specified'
.NOERR2  ANOP
.*
.* Check the number of parameters
         AIF   (N'&SYSLIST EQ 2).NOERR3
.ERR3    MNOTE 4,'Too many parameters specified: ignored'
.NOERR3  ANOP
.*
&LABEL   LH    &REG,&LOC               * Load value
         LTR   &REG,&REG               *   and test it
.*
.MEND    MEND
./ ADD NAME=LTHU     0100-20096-20096-0111-00098-00098-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Load and Test unsigned halfword into register
.*
&LABEL   LTHU  &REG,                   * Register to load              *
               &LOC                    * Location of value
.*
.* &REG  specifies the register to load
.* &LOC  specifies the location that holds the value to be loaded
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LTHU                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Check the REG parameter
         AIF   (K'&REG NE 0).NOERR1A
.ERR1A   MNOTE 8,'No register specified'
         AGO   .NOERR1
.NOERR1A ANOP
         AIF   ('&REG'(1,1) NE '(').NOERR1
         AIF   (N'&REG EQ 0).ERR1B
         AIF   (N'&REG GT 1).ERR1C
         AGO   .NOERR1
.ERR1B   MNOTE 8,'No register specified within sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'More than 1 register specified in sublist'
.NOERR1  ANOP
.*
.* Check the LOC parameter
         AIF   (K'&LOC NE 0).NOERR2
.ERR2    MNOTE 8,'LOC parameter not specified'
.NOERR2  ANOP
.*
.* Check the number of parameters
         AIF   (N'&SYSLIST EQ 2).NOERR3
.ERR3    MNOTE 4,'Too many parameters specified: ignored'
.NOERR3  ANOP
.*
&LABEL   CLEAR &REG                    * Wipe register
         ICM   &REG,NNYY,&LOC          * Load value and test it
.*
.MEND    MEND
./ ADD NAME=LTORG    0100-20096-20096-0111-00132-00132-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Create a literal pool. This macro replaces the normal LTORG
.* instruction. The required OPSYN is issued by the PGM macro.
.*
&LABEL   LTORG
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC LTORG                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_EXQ_I(50)          * Instructions used by EXQ
         GBLC  &BXA_EXQ_OPS(50)        * Operands for the instructions
         GBLA  &BXA_EXQ_LAST           * Pointer to last expanded
         GBLC  &BXA_SUBR               * Current subroutine
         GBLB  &SP_SHOWALL             * Print option from PGM macro
         LCLC  &_PRINT                 * Print option for PRINT
         LCLC  &_PROPT                 * Print option for PUSH/POP
         LCLA  &I                      * Index for BXA_EXQ_I / _OPS
         LCLC  &EXQI                   * Entry from BXA_EXQ_I
         LCLC  &EXQOPS                 * Entry from BXA_EXQ_OPS
.*
.* Check that we're not in the midst of a subroutine
         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR1
.ERR1    MNOTE 8,'Missing ENDSR statement'
.NOERR1  ANOP
.*
.* Check the number of arguments
         AIF   (N'&SYSLIST EQ 0).NOERR2
&I       SETA  0
.LOOP0   ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&SYSLIST).LOOP0OK
         AIF   (K'&SYSLIST(&I) EQ 0).LOOP0
.ERR2A   MNOTE 4,'No operands allowed on LTORG: ignored'
.LOOP0OK ANOP
.NOERR2  ANOP
.*
.* Generate code
&LABEL   LABEL H                       * Align on halfword
.*
.* Create all EXQ-instructions with their labels
         AIF   (N'&BXA_EXQ_I LE &BXA_EXQ_LAST).NOLOOP1 * Nothing new?
**********************************************************************
*
* Instructions for use with EXexute
*
**********************************************************************
&I       SETA  &BXA_EXQ_LAST           * I indexes BXA_EXQ
.LOOP1   ANOP  ,                       *
&I       SETA  &I+1                    * Point to next entry
         AIF   (&I GT N'&BXA_EXQ_I).LOOP1OK * End of loop
&EXQI    SETC  '&BXA_EXQ_I(&I)'        * Extract opcode
&EXQOPS  SETC  '&BXA_EXQ_OPS(&I)'      * Extract operands
_EXQ&I   &EXQI &EXQOPS                 * EXecutable instruction
         AGO   .LOOP1                  * Go process next one
.LOOP1OK ANOP  ,                       *
&BXA_EXQ_LAST  SETA &I-1               * Set ptr to last expanded
.NOLOOP1 ANOP  ,                       *
.*
.* Set listing options
&_PRINT  SETC  'ON'                    * SHOWALL: show PRINT lines
         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP lines
&_PRINT  SETC  'OFF,NOPRINT'           * Not ALL: omit PRINT lines
&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines
.PRINTOK ANOP
.*
.* Insert real literal pool
**********************************************************************
*
* Literals
*
**********************************************************************
         _LTORG
.*
.MEND    MEND
./ ADD NAME=MAPABEP  0100-20096-20096-0111-00105-00105-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for ABDUMP exit parameter list
.*
&LABEL   MAPABEP &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPABEP                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPABEP        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ABEP').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPABEP).MEND
&BXA_MAC_MAPABEP SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ABEP
&BXA_CB_ABEP SETC 'ABEP'
.*
         MNOTE *,'Including IHAABEPL mapping macro'
         IHAABEPL ,
.*
ABEP     EQU   IHAABEPL                * Label for USING
         ORG   ,                       *
ABEP_LEN EQU   *-ABEP                  * Size of DSECT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPACB   0100-20096-20096-0111-00300-00300-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Access Control Block
.*
&LABEL   MAPACB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPACB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPACB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ACB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPACB).MEND
&BXA_MAC_MAPACB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ACB
&BXA_CB_ACB SETC 'ACB'
.*
.* ACBID - ACB IDENTIFIER
ACBIDVAL EQUOVR ,,v,ACBID
.*
.* ACBSTYP - ACB SUBTYPE
ACBSVSAM EQUOVR ,,v,ACBSTYP
ACBSVRP  EQUOVR ,,v,ACBSTYP
ACBSCNTL EQUOVR ,,v,ACBSTYP
ACBSVTAM EQUOVR ,,v,ACBSTYP
ACBS3540 EQUOVR ,,v,ACBSTYP
.*
.* ACBMACR1 - MACRF FIRST BYTE
ACBKEY   EQUOVR ,,b,ACBMACR1
ACBADR   EQUOVR ,,b,ACBMACR1
ACBADD   EQUOVR ,,b,ACBMACR1
ACBCNV   EQUOVR ,,b,ACBMACR1
ACBBLK   EQUOVR ,,b,ACBMACR1
ACBSEQ   EQUOVR ,,b,ACBMACR1
ACBDIR   EQUOVR ,,b,ACBMACR1
ACBIN    EQUOVR ,,b,ACBMACR1
ACBOUT   EQUOVR ,,b,ACBMACR1
ACBUBF   EQUOVR ,,b,ACBMACR1
.*
.* ACBMACR2 - MACRF SECOND BYTE
ACBNTRUN EQUOVR ,,b,ACBMACR2
ACBCCANY EQUOVR ,,b,ACBMACR2
ACBBWO   EQUOVR ,,b,ACBMACR2
ACBSKP   EQUOVR ,,b,ACBMACR2
ACBLOGON EQUOVR ,,b,ACBMACR2
ACBRST   EQUOVR ,,b,ACBMACR2
ACBDSN   EQUOVR ,,b,ACBMACR2
ACBAIX   EQUOVR ,,b,ACBMACR2
.*
.* ACBMACR3 - MACRF THIRD BYTE
ACBNLW   EQUOVR ,,b,ACBMACR3
ACBLSR   EQUOVR ,,b,ACBMACR3
ACBGSR   EQUOVR ,,b,ACBMACR3
ACBICI   EQUOVR ,,b,ACBMACR3
ACBDFR   EQUOVR ,,b,ACBMACR3
ACBSIS   EQUOVR ,,b,ACBMACR3
ACBNCFX  EQUOVR ,,b,ACBMACR3
ACBMODE  EQUOVR ,,b,ACBMACR3
.*
.* ACBMACR4 - ACB MACRF BYTE 4
ACBRLS   EQUOVR ,,b,ACBMACR4
ACBSNP   EQUOVR ,,b,ACBMACR4
.*
.* ACBRECFM - RECORD FORMAT
ACBRECAF EQUOVR ,,b,ACBRECFM
.*
.* ACBCCTYP - CONTROL CHARACTER TYPE
ACBTRCID EQUOVR ,,b,ACBCCTYP
ACBDLIXI EQUOVR ,,b,ACBCCTYP
ACBCCASA EQUOVR ,,b,ACBCCTYP
ACBCCMCH EQUOVR ,,b,ACBCCTYP
ACBCCDSI EQUOVR ,,b,ACBCCTYP
.*
.* ACBFLGS - MISC VSAM FLAGS
ACBNOJCL EQUOVR ,,b,ACBFLGS
ACBRDI   EQUOVR ,,b,ACBFLGS
ACBCNRD  EQUOVR ,,b,ACBFLGS
.*
.* ACBDSOR1 - DSORG FIRST BYTE
ACBCRNCK EQUOVR ,,b,ACBDSOR1
ACBCRNRE EQUOVR ,,b,ACBDSOR1
ACBDVIND EQUOVR ,,b,ACBDSOR1
ACBOPTJ  EQUOVR ,,b,ACBDSOR1
.*
.* ACBDSOR2 - DSORG SECOND BYTE
ACBDORGA EQUOVR ,,b,ACBDSOR2
.*
.* ACBAMETH - ACCESS METHOD TYPE
ACBVTAM  EQUOVR ,,v,ACBAMETH
ACBSUBS  EQUOVR ,,v,ACBAMETH
ACBTCAM  EQUOVR ,,v,ACBAMETH
ACBRCI   EQUOVR ,,v,ACBAMETH
ACBRTAM  EQUOVR ,,v,ACBAMETH
ACBJAM   EQUOVR ,,v,ACBAMETH
ACBVSAM  EQUOVR ,,v,ACBAMETH
.*
.* ACBOFLGS - OPEN / CLOSE FLAGS
ACBR31B  EQUOVR ,,b,ACBOFLGS
ACBR31C  EQUOVR ,,b,ACBOFLGS
ACBEOV   EQUOVR ,,b,ACBOFLGS
ACBOPEN  EQUOVR ,,b,ACBOFLGS
ACBDSERR EQUOVR ,,b,ACBOFLGS
ACBRECOV EQUOVR ,,b,ACBOFLGS
ACBEXFG  EQUOVR ,,b,ACBOFLGS
ACBLOCK  EQUOVR ,,b,ACBOFLGS
ACBIOSFG EQUOVR ,,b,ACBOFLGS
ACBBUSY  EQUOVR ,,b,ACBOFLGS
.*
.* ACBERFLG - ERROR FLAGS
ACBOALR  EQUOVR ,,v,ACBERFLG
ACBCALR  EQUOVR ,,v,ACBERFLG
.*
.* ACBINFL1 - FIRST IND FLAGS
ACBJEPS  EQUOVR ,,b,ACBINFL1
ACBIJRQE EQUOVR ,,b,ACBINFL1
ACBCAT   EQUOVR ,,b,ACBINFL1
ACBSCRA  EQUOVR ,,b,ACBINFL1
ACBUCRA  EQUOVR ,,b,ACBINFL1
ACBVVIC  EQUOVR ,,b,ACBINFL1
ACBSDS   EQUOVR ,,b,ACBINFL1
ACBBYPSS EQUOVR ,,b,ACBINFL1
.*
.* ACBINFL2 - 2ND IND FLAGS
ACBSWARN EQUOVR ,,b,ACBINFL2
ACBSOPEN EQUOVR ,,b,ACBINFL2
ACBCBIC  EQUOVR ,,b,ACBINFL2
ACBCATX  EQUOVR ,,b,ACBINFL2
ACBCASRS EQUOVR ,,b,ACBINFL2
ACBISHRD EQUOVR ,,b,ACBINFL2
ACBSHROP EQUOVR ,,b,ACBINFL2
ACBSHR02 EQUOVR ,,b,ACBINFL2
ACBSHR01 EQUOVR ,,b,ACBINFL2
.*
         MNOTE *,'Including IFGACB mapping macro'
         IFGACB DSECT=YES
         EQUOVR *END
*
IFGACB   DSECT ,                       * Resume ACB dsect
ACB      EQU   IFGACB                  * Name for USINGs
         ORG   ,                       *
ACB_LEN  EQU   *-ACB                   * Length of ACB
.*
.* Adding overrides for 3540 extension
.* ACB35IND - 3540 INDICATORS
ACBFEED  EQUOVR ,,b,ACB35IND
ACBSECUR EQUOVR ,,b,ACB35IND
.*
         MNOTE *,'Including IFGACB35 mapping macro'
IFGACB   DSECT ,                       * Resume ACB dsect
         ORG   ACB+ACB_LEN             * At end of base ACB
         IFGACB35 ,                    *
         EQUOVR *END
*
IFGACB   DSECT ,                       * Resume ACB dsect
         ORG   ,                       *
ACB3540_LEN EQU *-ACB                  * Length of 3540 ACB
.*
.* Adding overrides for VTAM extension
.* ACBOPT1 - ACB OPTION FLAGS
ACBKPFRR EQUOVR ,,b,ACBOPT1
ACBSRBEX EQUOVR ,,b,ACBOPT1
ACBSRBSP EQUOVR ,,b,ACBOPT1
ACBPLUSC EQUOVR ,,b,ACBOPT1
ACBPSINS EQUOVR ,,b,ACBOPT1
ACBNQNAM EQUOVR ,,b,ACBOPT1
ACBNMMST EQUOVR ,,b,ACBOPT1
ACBVFRR  EQUOVR ,,b,ACBOPT1
.*
.* ACBOPT2 - ACB OPTION FLAGS
ACBAFDX  EQUOVR ,,b,ACBOPT2
ACBPFMON EQUOVR ,,b,ACBOPT2
ACBCMIP  EQUOVR ,,b,ACBOPT2
ACBEXFRR EQUOVR ,,b,ACBOPT2
.*
.* ACBERFLG ERROR CODES SPECIFIC TO VTAM
ACBNORM  EQUOVR ,,v,ACBERFLG
ACBONVRT EQUOVR ,,v,ACBERFLG
ACBCAQNR EQUOVR ,,v,ACBERFLG
ACBCDSNR EQUOVR ,,v,ACBERFLG
ACBRNOCF EQUOVR ,,v,ACBERFLG
ACBOANAT EQUOVR ,,v,ACBERFLG
ACBOAHLT EQUOVR ,,v,ACBERFLG
ACBOAVFY EQUOVR ,,v,ACBERFLG
ACBOANSN EQUOVR ,,v,ACBERFLG
ACBOAPAA EQUOVR ,,v,ACBERFLG
ACBOAPNM EQUOVR ,,v,ACBERFLG
ACBOVINA EQUOVR ,,v,ACBERFLG
ACBOAPSE EQUOVR ,,v,ACBERFLG
ACBOUNDF EQUOVR ,,v,ACBERFLG
ACBOAPLE EQUOVR ,,v,ACBERFLG
ACBOPWSE EQUOVR ,,v,ACBERFLG
ACBOPWLE EQUOVR ,,v,ACBERFLG
ACBRNOOF EQUOVR ,,v,ACBERFLG
ACBOAVSE EQUOVR ,,v,ACBERFLG
ACBOAVLE EQUOVR ,,v,ACBERFLG
ACBTVTCL EQUOVR ,,v,ACBERFLG
ACBESME  EQUOVR ,,v,ACBERFLG
ACBOPSNE EQUOVR ,,v,ACBERFLG
ACBOPSNC EQUOVR ,,v,ACBERFLG
ACBOPSMM EQUOVR ,,v,ACBERFLG
ACBMOPEN EQUOVR ,,v,ACBERFLG
ACBNAUTH EQUOVR ,,v,ACBERFLG
ACBOACT  EQUOVR ,,v,ACBERFLG
ACBCBUSY EQUOVR ,,v,ACBERFLG
ACBTANAE EQUOVR ,,v,ACBERFLG
ACBTNBSE EQUOVR ,,v,ACBERFLG
ACBTNBOE EQUOVR ,,v,ACBERFLG
ACBTRTTE EQUOVR ,,v,ACBERFLG
.*
         MNOTE *,'Including ISTACBEX mapping macro'
IFGACB   DSECT ,                       * Resume ACB dsect
         ORG   ACB+ACB_LEN             * At end of base ACB
         ISTACBEX ,                    *
         EQUOVR *END
*
IFGACB   DSECT ,                       * Resume ACB dsect
         ORG   ,                       *
VTAMACB_LEN EQU *-ACB                  * Length of VTAM ACB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPACEE  0100-20096-20096-0111-00147-00147-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Accessor Environment Element
.*
&LABEL   MAPACEE &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPACEE                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPACEE        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ACEE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPACEE).MEND
&BXA_MAC_MAPACEE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ACEE
&BXA_CB_ACEE SETC 'ACEE'
.*
.* ACEEVRSN - ACEE VERSION NUMBER
ACEEVR01 EQUOVR ,,v,ACEEVRSN
ACEEVR02 EQUOVR ,,v,ACEEVRSN
ACEECURV EQUOVR ,,v,ACEEVRSN
.*
.* ACEEFLG1 - USER FLAGS
ACEESPEC EQUOVR ,,b,ACEEFLG1
ACEEADSP EQUOVR ,,b,ACEEFLG1
ACEEOPER EQUOVR ,,b,ACEEFLG1
ACEEAUDT EQUOVR ,,b,ACEEFLG1
ACEELOGU EQUOVR ,,b,ACEEFLG1
ACEEPRIV EQUOVR ,,b,ACEEFLG1
ACEERACF EQUOVR ,,b,ACEEFLG1
.*
.* ACEEFLG2 - DEFAULT UNIVERSAL ACCESS
ACEEALTR EQUOVR ,,b,ACEEFLG2
ACEECNTL EQUOVR ,,b,ACEEFLG2
ACEEUPDT EQUOVR ,,b,ACEEFLG2
ACEEREAD EQUOVR ,,b,ACEEFLG2
ACEENONE EQUOVR ,,b,ACEEFLG2
.*
.* ACEEFLG3 - MISCELLANEOUS FLAGS
ACEEGRPA EQUOVR ,,b,ACEEFLG3
ACEERASP EQUOVR ,,b,ACEEFLG3
ACEECLNT EQUOVR ,,b,ACEEFLG3
ACEEACLT EQUOVR ,,b,ACEEFLG3
ACEETSKP EQUOVR ,,b,ACEEFLG3
ACEEIUSP EQUOVR ,,b,ACEEFLG3
ACEEDUID EQUOVR ,,b,ACEEFLG3
.*
.* ACEEFLG4 - MISCELLANEOUS FLAGS 2
ACEEUATH EQUOVR ,,b,ACEEFLG4
ACEEDASD EQUOVR ,,b,ACEEFLG4
ACEETAPE EQUOVR ,,b,ACEEFLG4
ACEETERM EQUOVR ,,b,ACEEFLG4
.*
.* ACEEFLG5 - MISCELLANEOUS FLAGS
ACEEMODE EQUOVR ,,b,ACEEFLG5
ACEEVMSK EQUOVR ,,b,ACEEFLG5
ACEED4OK EQUOVR ,,b,ACEEFLG5
ACEEXNVR EQUOVR ,,b,ACEEFLG5
.*
         MNOTE *,'Including IHAACEE mapping macro'
         IHAACEE ,
         EQUOVR *END
*
         ORG
ACEE_LEN EQU   *-ACEE                  * Length of ACEE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPADSR  0100-20096-20096-0111-00149-00149-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Symptom Record
.*
&LABEL   MAPADSR &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPADSR                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPADSR        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ADSR').EMBED
         AIF   ('&CB' EQ 'ADSRCMPS').EMBED
         AIF   ('&CB' EQ 'ADSRDBST').EMBED
         AIF   ('&CB' EQ 'ADSRROSD').EMBED
         AIF   ('&CB' EQ 'ADSR5ST').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPADSR).MEND
&BXA_MAC_MAPADSR SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ADSR
         GBLC  &BXA_CB_ADSRCMPS
         GBLC  &BXA_CB_ADSRDBST
         GBLC  &BXA_CB_ADSRROSD
         GBLC  &BXA_CB_ADSR5ST
&BXA_CB_ADSR SETC 'ADSR'
&BXA_CB_ADSRCMPS SETC 'ADSR'
&BXA_CB_ADSRDBST SETC 'ADSR'
&BXA_CB_ADSRROSD SETC 'ADSR'
&BXA_CB_ADSR5ST SETC 'ADSR'
.*
.* ADSRFL1 - Record status flags
ADSRTRNC  EQUOVR ,,b,ADSRFL1
ADSRPMOD  EQUOVR ,,b,ADSRFL1
ADSRSGEN  EQUOVR ,,b,ADSRFL1
ADSRSMOD  EQUOVR ,,b,ADSRFL1
ADSRDAEN  EQUOVR ,,b,ADSRFL1
.*
.* ADSRFL2 - Record status flags
ADSRNOTD  EQUOVR ,,b,ADSRFL2
ADSRASYN  EQUOVR ,,b,ADSRFL2
ADSRNALT  EQUOVR ,,b,ADSRFL2
.*
.* ADSRFLC - Component status flags
ADSRNIBM  EQUOVR ,,b,ADSRFLC
.*
         MNOTE *,'Including ADSR mapping macro'
         ADSR  ,                       * Generate ADSR
         EQUOVR *END
*
ADSR     DSECT ,                       * Reset to ADSR DSECT
         ORG
ADSR_LEN EQU   *-ADSR                  * Length of ADSR
*
ADSRCMPS DSECT ,                       * Reset to ADSRCMPS DSECT
         ORG
ADSRCMPS_LEN EQU *-ADSRCMPS            * Length of ADSRCMPS
*
ADSRDBST DSECT ,                       * Reset to ADSRSBST DSECT
         ORG
ADSRDBST_LEN EQU *-ADSRDBST            * Length of ADSRDBST
*
ADSRROSD DSECT ,                       * Reset to ADSRROSD DSECT
         ORG
ADSRROSD_LEN EQU *-ADSRROSD            * Length of ADSRROSD
*
ADSR5ST  DSECT ,                       * Reset to ADSR5ST DSECT
         ORG
ADSR5ST_LEN EQU *-ADSR5ST              * Length of ADSR5ST
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPADYEN 0100-20096-20096-0111-00132-00132-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for DAE Event NotiFication parameter list
.*
&LABEL   MAPADYEN &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPADYEN               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPADYEN       * Map has been generated?
         GBLC  &BXA_PGM_TITLE          * Title for the listing
         GBLB  &SP_SHOWALL             * Show all statements?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ADYENF').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPADYEN).MEND
&BXA_MAC_MAPADYEN SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ADYENF
&BXA_CB_ADYENF SETC 'ADYEN'
.*
.* ADYENFACRONYM - Eyecatcher C'ENFD'
.* ADYENFEYECATCHER EQUOVR ,,v,ADYENFACRONYM * Value exceeds X'FFFF'
.*
.* ADYENFVERSION - Version (1,2,3...)
ADYENFVERSION1       EQUOVR ,,v,ADYENFVERSION
ADYENFVERSIONCURRENT EQUOVR ,,v,ADYENFVERSION
.*
.* ADYENFRECTYPE - Function code, listed below.
ADYENFRECTYPETHRESHOLD EQUOVR ,,v,ADYENFRECTYPE
.*
.* ADYENFFLAGS - Flags
ADYENFFLAGSTRUNCATED EQUOVR ,,b,ADYENFFLAGS
.*
.* ADYENFSYMPTOMSTRINGLEN - Symptom String length
ADYENFMAXSYMPTOMSTRING EQUOVR ,,v,ADYENFSYMPTOMSTRINGLEN
.*
         MNOTE *,'Including ADYENF mapping macro'
         ADYENF ,
.*
ADYENF   DSECT ,                       * Resume ADYENF DSECT
         ORG   ,                       *
* ADYENF_LEN EQU *-ADYENF              * Size defined in ADYENF macro
.*
.* Return to our original CSECT name
.* Since ADYENF changes the listing's title: reset title too
&SYSECT  &SYSSTYP
         TITLE '&BXA_PGM_TITLE'
         AIF   (&SP_SHOWALL).TITLE
.* Generate comment line in stead of a MNOTE line
*
         AGO   .TITLEOK
.TITLE   ANOP
         MNOTE *,'Previous STMT: TITLE ''&BXA_PGM_TITLE'''
.TITLEOK ANOP
.*
.MEND    MEND
./ ADD NAME=MAPAE    0100-20096-20096-0111-00106-00106-00000-BIXSMAC 32
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the VSM Allocation Element
.*
&LABEL   MAPAE &DSECT=YES,             * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPAE                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPAE          * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'AE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPAE).MEND
&BXA_MAC_MAPAE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_AE
&BXA_CB_AE SETC 'AE'
.*
         MNOTE *,'Including IHAAE mapping macro'
         IHAAE ,                       * Generate AE
*
.* AE_LEN Added to IHAAE between OS/390 V2R6 and z/OS V1R5
.* AE       DSECT ,                       * Reset to AE DSECT
.*          ORG
.* AE_LEN   EQU   *-AE                    * Length of AE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPASCB  0100-20096-20096-0111-00227-00227-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Address Space Control Block
.*
&LABEL   MAPASCB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPASCB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPASCB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ASCB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPASCB).MEND
&BXA_MAC_MAPASCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ASCB
&BXA_CB_ASCB SETC 'ASCB'
.*
.* Flag bit overrides
ASCBURRQ EQUOVR ,,b,ASCBSAWQ
ASCBS3S  EQUOVR ,,b,ASCBLL5
.*
.* ASCBRSMF - RSM ADDRESS SPACE FLAGS
ASCB2LPU EQUOVR ,,b,ASCBRSMF
ASCB1LPU EQUOVR ,,b,ASCBRSMF
ASCBN2LP EQUOVR ,,b,ASCBRSMF
ASCBVEQR EQUOVR ,,b,ASCBRSMF
.*
.* ASCBRCTF - FLAGS FOR RCT SERIALIZED BY COMPARE
ASCBTMNO EQUOVR ,,b,ASCBRCTF
ASCBFRS  EQUOVR ,,b,ASCBRCTF
ASCBFQU  EQUOVR ,,b,ASCBRCTF
ASCBJSTE EQUOVR ,,b,ASCBRCTF
ASCBWAIT EQUOVR ,,b,ASCBRCTF
ASCBOUT  EQUOVR ,,b,ASCBRCTF
ASCBTMLW EQUOVR ,,b,ASCBRCTF
ASCBTOFF EQUOVR ,,b,ASCBRCTF
.*
.* ASCBFLG1 - FLAG FIELD
ASCBLSAS EQUOVR ,,b,ASCBFLG1
ASCBDSTK EQUOVR ,,b,ASCBFLG1
ASCBDSTZ EQUOVR ,,b,ASCBFLG1
ASCBTERM EQUOVR ,,b,ASCBFLG1
ASCBABNT EQUOVR ,,b,ASCBFLG1
ASCBMEMP EQUOVR ,,b,ASCBFLG1
.*
.* ASCBDSP1 - NONDISPATCHABILITY FLAGS.
ASCBSSND EQUOVR ,,b,ASCBDSP1
ASCBFAIL EQUOVR ,,b,ASCBDSP1
ASCBSNQS EQUOVR ,,b,ASCBDSP1
ASCBSSSS EQUOVR ,,b,ASCBDSP1
ASCBSTND EQUOVR ,,b,ASCBDSP1
ASCBUWND EQUOVR ,,b,ASCBDSP1
ASCBNOQ  EQUOVR ,,b,ASCBDSP1
.*
.* ASCBFLG2 - FLAG BYTE.
ASCBXMPT EQUOVR ,,b,ASCBFLG2
ASCBPXMT EQUOVR ,,b,ASCBFLG2
ASCBCEXT EQUOVR ,,b,ASCBFLG2
ASCBS2S  EQUOVR ,,b,ASCBFLG2
ASCBNCML EQUOVR ,,b,ASCBFLG2
ASCBNOMT EQUOVR ,,b,ASCBFLG2
ASCBNOMD EQUOVR ,,b,ASCBFLG2
.*
.* ASCBLSWQ - ADDRESS SPACE LOCAL LOCK WEB SUSPEND QUEUE
ASCBS3NL EQUOVR ,,b,ASCBLSWQ
ASCBLTCL EQUOVR ,,b,ASCBLSWQ+3
.*
.* ASCBLEVL - LEVEL NUMBER OF ASCB
ASCBVS00 EQUOVR ,,v,ASCBLEVL
ASCBVS01 EQUOVR ,,v,ASCBLEVL
ASCBVS02 EQUOVR ,,v,ASCBLEVL
ASCBVS03 EQUOVR ,,v,ASCBLEVL
ASCBVERS EQUOVR ,,v,ASCBLEVL
.*
.* ASCBFL2A - FLAG BYTE.
ASCBNOPR EQUOVR ,,b,ASCBFL2A
.*
.* ASCBSRQ1 - FIRST BYTE OF ASCBSRQ
ASCBDSG4 EQUOVR ,,b,ASCBSRQ1
ASCBDFLT EQUOVR ,,b,ASCBSRQ1
.*
.* ASCBSRQ2 - SECOND BYTE OF ASCBSRQ
ASCBDSG3 EQUOVR ,,b,ASCBSRQ2
ASCBSRM1 EQUOVR ,,b,ASCBSRQ2
ASCBQVER EQUOVR ,,b,ASCBSRQ2
.*
.* ASCBSRQ3 - THIRD BYTE OF ASCBSRQ
ASCBDSG2 EQUOVR ,,b,ASCBSRQ3
ASCBRCTI EQUOVR ,,b,ASCBSRQ3
ASCBTCBV EQUOVR ,,b,ASCBSRQ3
ASCBACHA EQUOVR ,,b,ASCBSRQ3
ASCBMTER EQUOVR ,,b,ASCBSRQ3
ASCBMINI EQUOVR ,,b,ASCBSRQ3
ASCBCBVE EQUOVR ,,b,ASCBSRQ3
.*
.* ASCBSRQ4 - FOURTH BYTE OF ASCBSRQ
ASCBDSG1 EQUOVR ,,b,ASCBSRQ4
ASCBDETA EQUOVR ,,b,ASCBSRQ4
ASCBATTA EQUOVR ,,b,ASCBSRQ4
ASCBRTM2 EQUOVR ,,b,ASCBSRQ4
ASCBRTM1 EQUOVR ,,b,ASCBSRQ4
ASCBCHAP EQUOVR ,,b,ASCBSRQ4
ASCBSTAT EQUOVR ,,b,ASCBSRQ4
ASCBPURD EQUOVR ,,b,ASCBSRQ4
.*
.* ASCBSRBM - MODEL PSW BYTE 0 USED BY SRB DISPATCHER
ASCBPER  EQUOVR ,,b,ASCBSRBM
.*
.* ASCBSSO4 - SPACE SWITCH EVENT OWNER MASK BYTE 4.
ASCBSSSP EQUOVR ,,b,ASCBSSO4
ASCBSSJS EQUOVR ,,b,ASCBSSO4
.*
.* ASCBCS1 - FIRST BYTE OF COMPARE AND SWAP FLAGS.
ASCBXMET EQUOVR ,,b,ASCBCS1
ASCBXMEC EQUOVR ,,b,ASCBCS1
ASCBXMPA EQUOVR ,,b,ASCBCS1
ASCBXMLK EQUOVR ,,b,ASCBCS1
ASCBPERS EQUOVR ,,b,ASCBCS1
ASCBDTER EQUOVR ,,b,ASCBCS1
ASCBPERO EQUOVR ,,b,ASCBCS1
ASCBSWOP EQUOVR ,,b,ASCBCS1
.*
.* ASCBCS2 - SECOND BYTE OF COMPARE AND SWAP FLAGS.
ASCBSAS  EQUOVR ,,b,ASCBCS2
.*
.* ASCBLL1 - FIRST BYTE OF FLAGS.
ASCBSSPC EQUOVR ,,b,ASCBLL1
.*
.* ASCBLL4 - FOURTH BYTE OF FLAGS.
ASCBTYP1 EQUOVR ,,b,ASCBLL4
.*
.* BYTE 0 OF ASCBGQIR
ASCBGQAB EQUOVR ,,b,ASCBGQIR
.*
.* ASCBGQI3 - BYTE 3 OF ASCBGQIR
ASCBGQDS EQUOVR ,,b,ASCBGQI3
.*
         MNOTE *,'Including IHAASCB mapping macro'
         IHAASCB DSECT=YES,            * Generate ASCB                 *
               LIST=YES                * with unchanged PRINT option
         EQUOVR *END
*
ASCB     DSECT ,                       * Reset to ASCB DSECT
         ORG
ASCB_LEN EQU   *-ASCB                  * Length of ASCB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPASEO  0100-20096-20096-0111-00104-00104-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Address Space crEation Output area
.*
&LABEL   MAPASEO &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPASEO                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPASEO        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ASEO').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPASEO).MEND
&BXA_MAC_MAPASEO SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ASEO
&BXA_CB_ASEO SETC 'ASEO'
.*
         MNOTE *,'Including IHAASEO mapping macro'
         IHAASEO ,
*
         ORG
ASEO_LEN EQU   *-ASEO                  * Length of ASEO
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPASMVT 0100-20096-20096-0111-00155-00155-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Auxiliary Storage Manager Vector Table
.*
&LABEL   MAPASMVT &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPASMVT               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPASMVT       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ASMPOOLS').EMBED
         AIF   ('&CB' EQ 'ASMVT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPASMVT).MEND
&BXA_MAC_MAPASMVT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ASMPOOLS
         GBLC  &BXA_CB_ASMVT
&BXA_CB_ASMPOOLS SETC 'ASMVT'
&BXA_CB_ASMVT SETC 'ASMVT'
.*
.* ASMFLAG1 - ASM global flag field 1
.* ASMDUPLX    EQUOVR ,,b,ASMFLAG1     * Last seen in OS/390 V2R6
ASMNPRIM    EQUOVR ,,b,ASMFLAG1
ASMNOLCL    EQUOVR ,,b,ASMFLAG1
ASMPGDEL    EQUOVR ,,b,ASMFLAG1
.* ASMNODPX    EQUOVR ,,b,ASMFLAG1     * Last seen in OS/390 V2R6
ASMPLPAF    EQUOVR ,,b,ASMFLAG1
ASMCOMMF    EQUOVR ,,b,ASMFLAG1
ASMPLPAS    EQUOVR ,,b,ASMFLAG1
.*
.* ASMFLAG2 - ASM global flag field 2
ASMDSRO     EQUOVR ,,b,ASMFLAG2
ASMNOSAV    EQUOVR ,,b,ASMFLAG2
ASMNOTMR    EQUOVR ,,b,ASMFLAG2
ASMNOTPT    EQUOVR ,,b,ASMFLAG2
ASMQUICK    EQUOVR ,,b,ASMFLAG2
ASMWARM     EQUOVR ,,b,ASMFLAG2
ASMSPILL    EQUOVR ,,b,ASMFLAG2
ASMNOWM     EQUOVR ,,b,ASMFLAG2
.*
.* ASMFLAG3 - ASM global flag field 3
ASMWTO5E    EQUOVR ,,b,ASMFLAG3
.*
.* Externals - not necessarily needed
ILRGOS      EXTRNOVR *WXTRN
ILRTRPAG    EXTRNOVR *WXTRN
ILRPTERM    EXTRNOVR *WXTRN
.*
.* ASMVIO - ASM global VIO flag.
ASMDVIO     EQUOVR ,,b,ASMVIO
ASMNFVIO    EQUOVR ,,b,ASMVIO
ASMTRPLF    EQUOVR ,,b,ASMVIO
ASMVIOJ     EQUOVR ,,b,ASMVIO
.*
.* Externals - not necessarily needed
ILRCMP      EXTRNOVR *WXTRN
ILRCMPCI    EXTRNOVR *WXTRN
ILRCMPDI    EXTRNOVR *WXTRN
ILRCMPAE    EXTRNOVR *WXTRN
ILRCMPNE    EXTRNOVR *WXTRN
.*
         MNOTE *,'Including ILRASMVT mapping macro'
         ILRASMVT ,                    *
         EQUOVR *END                   *
         EXTRNOVR *END                 *
*
ASMVT    DSECT ,                       * Return to ASMVT
         ORG
ASMVT_LEN EQU  *-ASMVT                 * Length of ASMVT
*
ASMPOOLS DSECT ,                       * Return to ASMPOOLS DSECT
         ORG
ASMPOOLS_LEN EQU *-ASMPOOLS            * Length of ASMPOOLS
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPASSB  0100-20096-20096-0111-00147-00147-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Address Space Secondary Block
.*
&LABEL   MAPASSB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPASSB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPASSB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ASSB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPASSB).MEND
&BXA_MAC_MAPASSB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ASSB
&BXA_CB_ASSB SETC 'ASSB'
.*
.* ASSBXMF1 - CROSS MEMORY FLAGS 1
ASSBXEAX EQUOVR ,,b,ASSBXMF1
.*
.* ASSBSTW1 - FIRST WORD OF ASSBSTKN.
ASSBSTYP EQUOVR ,,b,ASSBSTW1
.*
.* ASSBFLG0 - ASSB FLAG BYTE 0.
ASSBBSDN EQUOVR ,,b,ASSBFLG0
ASSBCDSI EQUOVR ,,b,ASSBFLG0
ASSBPSCH EQUOVR ,,b,ASSBFLG0
.*
.* ASSBFLG1 - ASSB FLAG BYTE 1
ASSBNTAR EQUOVR ,,b,ASSBFLG1
ASSBNTTR EQUOVR ,,b,ASSBFLG1
ASSBNTSL EQUOVR ,,b,ASSBFLG1
.*
.* ASSBFLG2 - ASSB FLAG BYTE 2.
ASSBENFL EQUOVR ,,b,ASSBFLG2
ASSBNSWF EQUOVR ,,b,ASSBFLG2
ASSBPRAN EQUOVR ,,b,ASSBFLG2
.*
.* ASSBFLG3 - ASSB FLAG BYTE 3 - RESERVED.
ASSBARM  EQUOVR ,,b,ASSBFLG3
ASSBNRST EQUOVR ,,b,ASSBFLG3
.*
.* ASSBMT# - MEMTERM DISABLE COUNT.
ASSBMTP  EQUOVR ,,b,ASSBMT#
.*
.* ASSBDFP - RESERVED FOR USE BY DFP.
ASSBOAM  EQUOVR ,,b,ASSBDFP
.*
.* ASSBWMF1 - WLM flags
ASSBWINI EQUOVR ,,b,ASSBWMF1
ASSBFSAS EQUOVR ,,b,ASSBWMF1
.*
.* ASSBCTXF - Context Services flags
ASSBNCL  EQUOVR ,,b,ASSBCTXF
ASSBMSGI EQUOVR ,,b,ASSBCTXF
ASSBURMX EQUOVR ,,b,ASSBCTXF
ASSBURMM EQUOVR ,,b,ASSBCTXF
.*
         MNOTE *,'Including IHAASSB mapping macro'
         IHAASSB LIST=YES,             * Keep unchanged PRINT option
         EQUOVR *END
*
ASSB     DSECT ,                       * Reset to ASSB DSECT
         ORG
ASSB_LEN EQU   *-ASSB                  * Length of ASSB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPASVT  0100-20096-20096-0111-00119-00119-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Address Space Vector Table
.*
&LABEL   MAPASVT &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPASVT                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPASVT        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ASVT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPASVT).MEND
&BXA_MAC_MAPASVT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ASVT
&BXA_CB_ASVT SETC 'ASVT'
.*
.* ASVTRSHD - ADDRESS OF FIRST AVAILABLE SLOT
ASVTRSAV EQUOVR ,,b,ASVTRSHD
.*
.* ASVTDSHD - ADDRESS OF FIRST AVAILABLE SLOT
ASVTDSAV EQUOVR ,,b,ASVTDSHD
.*
.* ASVTFRST - ADDRESS OF FIRST AVAILABLE ASVT
ASVTAVAI EQUOVR ,,b,ASVTFRST
.*
.* ASVTENTY - ENTRY FOR EACH POSSIBLE ASID.
ASVTAVAL EQUOVR ,,b,ASVTENTY
.*
         MNOTE *,'Including IHAASVT mapping macro'
         IHAASVT LIST=YES              * Keep current listing options
         EQUOVR *END
*
         ORG
ASVT_LEN EQU   *-ASVT-L'ASVTENTY       * Length of ASVT base. Add      *
                                       * L'ASVTENTY for each entry to  *
                                       * be contained in this ASVT.
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPASXB  0100-20096-20096-0111-00111-00111-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Address Space eXtension Block
.*
&LABEL   MAPASXB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPASXB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPASXB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ASXB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPASXB).MEND
&BXA_MAC_MAPASXB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ASXB
&BXA_CB_ASXB SETC 'ASXB'
.*
.* ASXBCRB1 - CANCEL/RCT BYTE 1
ASXBPIP  EQUOVR ,,b,ASXBCRB1
ASXBTFD  EQUOVR ,,b,ASXBCRB1
.*
         MNOTE *,'Including IHAASXB mapping macro'
         IHAASXB DSECT=YES,            * Generate ASXB                 *
               LIST=YES                * with unchanged PRINT option
         EQUOVR *END
*
ASXB     DSECT ,                       * Reset to ASXB DSECT
         ORG
ASXB_LEN EQU   *-ASXB                  * Length of ASXB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPBASEA 0100-20096-20096-0111-00195-00195-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Master Scheduler Resident Data Area
.*
&LABEL   MAPBASEA &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPBASEA               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPBASEA       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'BASEA').EMBED
         AIF   ('&CB' EQ 'BASEX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPBASEA).MEND
&BXA_MAC_MAPBASEA SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_BASEA
         GBLC  &BXA_CB_BASEX
&BXA_CB_BASEA SETC 'BASEA'
&BXA_CB_BASEX SETC 'BASEA'
.*
.* BASFL -
BAIN     EQUOVR ,,b,BASFL
BAINTSET EQUOVR ,,b,BASFL
BAFSTOR  EQUOVR ,,b,BASFL
.*
.* BAVERN - VERSION LEVEL
BASP13   EQUOVR ,,v,BAVERN
BASP410  EQUOVR ,,v,BAVERN
BAVERNID EQUOVR ,,v,BAVERN
.*
.* MSLOGST - LOG STATUS
MSLOGENQ EQUOVR ,,b,MSLOGST
MSLOGTHD EQUOVR ,,b,MSLOGST
MSLOGCOM EQUOVR ,,b,MSLOGST
MSLOGDAR EQUOVR ,,b,MSLOGST
MSLOGIPL EQUOVR ,,b,MSLOGST
MSLOGSTA EQUOVR ,,b,MSLOGST
MSLOGCHN EQUOVR ,,b,MSLOGST
MSLOGTND EQUOVR ,,b,MSLOGST
.*
.* BASPBYTE - MSTR SCH INIT CPL
BAMSSTAR EQUOVR ,,b,BASPBYTE
BAMASCH  EQUOVR ,,b,BASPBYTE
BAMSINIT EQUOVR ,,b,BASPBYTE
BAOKDUMP EQUOVR ,,b,BASPBYTE
.*
.* BAMONITR - MONITOR FLAGS (TERMINALS-TJB CHAIN)
BADSN    EQUOVR ,,b,BAMONITR
BASPACE  EQUOVR ,,b,BAMONITR
.*
.* BACHFLGS - CSCB FLAGS
BACSCBA  EQUOVR ,,b,BACHFLGS
BACSCXB  EQUOVR ,,b,BACHFLGS
.*
.* MSCLOSSW - ECB WAIT/POST FIELD
MSCLOSW  EQUOVR ,,b,MSCLOSSW
MSCLOSP  EQUOVR ,,b,MSCLOSSW
.*
.* MSWLOGSW - ECB WAIT/POST FIELD
MSWLOGW  EQUOVR ,,b,MSWLOGSW
MSWLOGP  EQUOVR ,,b,MSWLOGSW
.*
.* MSWTRSW - ECB WAIT/POST FIELD
MSWTRW   EQUOVR ,,b,MSWTRSW
MSWTRP   EQUOVR ,,b,MSWTRSW
.*
.* MSLGSTRT - LOG RE-ACTIVATION ECB
MSSTRTW  EQUOVR ,,b,MSLGSTRT
MSSTRTP  EQUOVR ,,b,MSLGSTRT
.*
.* MSSSB - MONITOR TIME NOTE BYTE
MSTN     EQUOVR ,,b,MSSSB
.*
.* MSECBFL - SCHEDULER FLAGBYTE
BAMSJOBS EQUOVR ,,b,MSECBFL
MSWTL    EQUOVR ,,b,MSECBFL
MSSUM    EQUOVR ,,b,MSECBFL
.*
.* BAMTCNTL - MASTER TRACE CONTROL FLAG
BAMT808  EQUOVR ,,b,BAMTCNTL
BAMT809  EQUOVR ,,b,BAMTCNTL
BAMT816  EQUOVR ,,b,BAMTCNTL
BAMTRTRY EQUOVR ,,b,BAMTCNTL
BAMTTSWP EQUOVR ,,b,BAMTCNTL
BAMTTENT EQUOVR ,,b,BAMTCNTL
.*
.* BAMTRECF - MASTER TRACE ERROR RECURSION FLAG
BAMTR808 EQUOVR ,,b,BAMTRECF
BAMTR809 EQUOVR ,,b,BAMTRECF
BAMTR816 EQUOVR ,,b,BAMTRECF
BAMTRUNK EQUOVR ,,b,BAMTRECF
.*
.* BAMTITFL - INTERNAL PROCESSING FLAG USED BY MASTER TRACE FACILITY
BAMTITAB EQUOVR ,,b,BAMTITFL
BAMTSFRR EQUOVR ,,b,BAMTITFL
BAMTFRRR EQUOVR ,,b,BAMTITFL
.*
.* BAMTDSW - ECB WAIT/POST FIELD
BAMTDW   EQUOVR ,,b,BAMTDSW
BAMTDP   EQUOVR ,,b,BAMTDSW
.*
         MNOTE *,'Including IEEBASEA mapping macro'
         IEEBASEA ,
         EQUOVR *END
*
BASE     DSECT ,                       * Resume BASE DSECT
BASEA    EQU   BASE                    * Label for USINGs
         ORG
BASEA_LEN EQU  *-BASEA                 * Length of BASEA
*
BASEX    DSECT ,                       * Resume BASE-extension
         ORG
BASEX_LEN EQU  *-BASEX                 * Length of BASEX
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPBITS  0100-20096-20096-0111-00103-00103-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for bit equates
.*
         MAPBITS
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPBITS                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* &BXA_BITS is used to prevent expanding MAPBITS more than once
         GBLB  &BXA_MAC_MAPBITS
.*
         AIF   (&BXA_MAC_MAPBITS).MEND
&BXA_MAC_MAPBITS SETB 1
.*
         MNOTE *,'Including IEZBITS'
.*
.* Put equates in a DSECT to prevent warning messages in ASM listing
BXA_EQU  DSECT
         IEZBITS
*
* Other equates for bits
*
NOBITS   EQU   X'00'                   *
ALLBITS  EQU   X'FF'                   *
*
NOT_BIT0 EQU   ALLBITS-BIT0            *
NOT_BIT1 EQU   ALLBITS-BIT1            *
NOT_BIT2 EQU   ALLBITS-BIT2            *
NOT_BIT3 EQU   ALLBITS-BIT3            *
NOT_BIT4 EQU   ALLBITS-BIT4            *
NOT_BIT5 EQU   ALLBITS-BIT5            *
NOT_BIT6 EQU   ALLBITS-BIT6            *
NOT_BIT7 EQU   ALLBITS-BIT7            *
*
* Equates for Plists
LISTEND  EQU   BIT0                    *
NOT_LISTEND EQU X'FF'-LISTEND          *
*
* Equates for Amode
AMODE31  EQU   BIT0                    *
AMODE24  EQU   X'FF'-AMODE31           *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPCAM   0100-20096-20096-0111-00145-00145-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for parameter list created by CAMLST
.*
&LABEL   MAPCAM &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPCAM                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPCAM         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'CAMLOC').EMBED
         AIF   ('&CB' EQ 'CAMLOCVOL').EMBED
         AIF   ('&CB' EQ 'CAMLST').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPCAM).MEND
&BXA_MAC_MAPCAM SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_CAMLOC
         GBLC  &BXA_CB_CAMLOCVOL
         GBLC  &BXA_CB_CAMLST
&BXA_CB_CAMLOC SETC 'CAM'
&BXA_CB_CAMLOCVOL SETC 'CAM'
&BXA_CB_CAMLST SETC 'CAM'
.*
         MNOTE *,'Generating DSECT for CAMLST parameter list'
*
* Map plist generated by CAMLST macro
CAMLST   DSECT ,                       *
         DS    0F                      * Always aligned
CAMOPT   DCL   *CODE,XL1,              * Option byte                   *
               (CAMNAME,X'44'),        * CAMLST NAME option value      *
               (CAMSRCH,X'C1')         * CAMLST SEARCH option value
*
         DS    3XL1                    * Unused bytes
CAMDSNP  DS    AL4                     * Pointer to DSN
CAMVOLP  DS    AL4                     * Pointer to volume serial
CAMWRKP  DS    AL4                     * Pointer to work area
*
         ORG   ,                       *
CAMLST_LEN EQU *-CAMLST                *
*
* Map results returned by LOCATE - CAMLST NAME
CAMLOC   DSECT ,                       *
CAMLOCNR DS    H                       * nr of valid entries
CAMLOCDT DS    20XL12                  * max twenty volser-entries
         DS    XL10                    * Reserved
CAMLOCDP DS    XL3                     * DSCB pointer: relative track
*                                      *  address of first DSCB.
*                                      *  If CAMLOCNR>20: rel.track adr
*                                      *  of next VCB. Zero on last VCB
CAMLOC00 DS    XL1                     * Always zero
         DS    XL9                     * Reserved
*
         ORG   ,                       *
CAMLOC_LEN EQU *-CAMLOC                *
*
* Map 1 resulting entry returned by LOCATE - CAMLST NAME
CAMLOCVOL DSECT ,                      *
CAMLOCDC DS    XL4                     * Device code
CAMLOCVS DS    CL6                     * Volume serial number
CAMLOCSQ DS    H                       * Volume sequence number
*
         ORG   ,                       *
CAMLOCVOL_LEN EQU *-CAMLOCVOL          *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPCDE   0100-20096-20096-0111-00156-00156-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Contents Directory Entry
.*
.* CDEs for FLPA/MLPA are in a chain. Field CVTQLPAQ points to
.* a dummy header entry, which points to the first real CDE on the
.* queue. The last entry in the chain has CDCHAIN=0.
.* CDEs for dynamic LPA are also in a chain, Field ECVTDLPF points
.* to the first entry - no header entry is provided. The last entry
.* in the chain is a dummy entry with CDENAME=XL8'00'. It points to
.* the first real entry in the FLPA/MLPA queue.
.*
&LABEL   MAPCDE &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPCDE                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPCDE         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'CDE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPCDE).MEND
&BXA_MAC_MAPCDE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_CDE
&BXA_CB_CDE SETC 'CDE'
.*
.* CDENTPT - Module's relocated Entry Point address
CDEMODE  EQUOVR ,,b,CDENTPT
.*
.* CDATTRB - Flag byte
CDEOM    EQUOVR ,,b,CDATTRB
CDIDENTY EQUOVR ,,b,CDATTRB
CDRACDTY EQUOVR ,,b,CDATTRB
CDCDEX   EQUOVR ,,b,CDATTRB
CDELPDE  EQUOVR ,,b,CDATTRB
CDGLOBAL EQUOVR ,,b,CDATTRB
CDCONTMN EQUOVR ,,b,CDATTRB
CDRACF   EQUOVR ,,b,CDATTRB
.*
.* CDATTR - Attribute flags
CDNIP    EQUOVR ,,b,CDATTR
CDNIC    EQUOVR ,,b,CDATTR
CDREN    EQUOVR ,,b,CDATTR
CDSER    EQUOVR ,,b,CDATTR
CDNFN    EQUOVR ,,b,CDATTR
CDMIN    EQUOVR ,,b,CDATTR
CDJPA    EQUOVR ,,b,CDATTR
CDNLR    EQUOVR ,,b,CDATTR
.*
.* CDATTR2 - Second attribute field
CDSPZ    EQUOVR ,,b,CDATTR2
CDREL    EQUOVR ,,b,CDATTR2
CDXLE    EQUOVR ,,b,CDATTR2
CDRLC    EQUOVR ,,b,CDATTR2
CDEANYM  EQUOVR ,,b,CDATTR2
CDOLY    EQUOVR ,,b,CDATTR2
CDSYSLIB EQUOVR ,,b,CDATTR2
CDAUTH   EQUOVR ,,b,CDATTR2
.*
.* CDATTR3 - 3rd attribute field
CDPATHN  EQUOVR ,,b,CDATTR3
CDPML    EQUOVR ,,b,CDATTR3
CDESPLIT EQUOVR ,,b,CDATTR3
CDERTLS  EQUOVR ,,b,CDATTR3
CDEDYLPA EQUOVR ,,b,CDATTR3
CDEPROTP EQUOVR ,,b,CDATTR3
.*
         MNOTE *,'Including IHACDE mapping macro'
         IHACDE ,
         EQUOVR *END
*
CDENTRY  DSECT ,                       * Resume CDE DSECT
CDE      EQU   CDENTRY                 * Label for USINGs
         ORG   ,
CDE_LEN  EQU   *-CDE                   * Length of CDE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPCIB   0100-20096-20096-0111-00149-00149-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Command Input Buffer
.*
&LABEL   MAPCIB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPCIB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPCIB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'CIBHDR').EMBED
         AIF   ('&CB' EQ 'CIBX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPCIB).MEND
&BXA_MAC_MAPCIB SETB  1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_CIBHDR
         GBLC  &BXA_CB_CIBX
&BXA_CB_CIBHDR SETC 'CIB'
&BXA_CB_CIBX   SETC 'CIB'
.*
.* Declare verb-codes
CIBSTART EQUOVR ,,v,CIBVERB
CIBSTCOM EQUOVR ,,v,CIBVERB
CIBMODFY EQUOVR ,,v,CIBVERB
CIBSTOP  EQUOVR ,,v,CIBVERB
CIBMOUNT EQUOVR ,,v,CIBVERB
.*
.* Declare version levels
CIBS313  EQUOVR ,,v,CIBRSV1
CIBS410  EQUOVR ,,v,CIBRSV1
CIB15497 EQUOVR ,,v,CIBRSV1
CIBVRSN  EQUOVR ,,v,CIBRSV1
.*
.* Declare authority code bits
CIBXAUT1 EQUOVR ,,b,CIBXAUTA
CIBXAUT2 EQUOVR ,,b,CIBXAUTA
CIBXAUT3 EQUOVR ,,b,CIBXAUTA
.*
.* Declare command authority bits
CIBXDISA EQUOVR ,,b,CIBXDISP
CIBXDISM EQUOVR ,,b,CIBXDISP
CIBXDISC EQUOVR ,,b,CIBXDISP
CIBXDISR EQUOVR ,,b,CIBXDISP
CIBXDISE EQUOVR ,,b,CIBXDISP
.*
         MNOTE *,'Including IEZCIB mapping macro'
.*
.* IEZCIB does not generate a DSECT-statement
CIB      DSECT ,                       * Start of CIB DSECT
         IEZCIB ,                      *
         EQUOVR *END
*
CIB      DSECT ,                       * Resume CIB DSECT
         ORG
*
* Length of CIB is contained in field CIBLEN (1 byte) in units
* of doublewords, therefore no length equate is supplied.
*
* CIBHDR is defined as the fixed part of the CIB i.e. the CIB without
* the CIBDATA field.
*
CIBHDR   EQU   CIB                     *
CIBHDR_LEN EQU CIBDATA-CIBHDR          *
*
CIBX     DSECT ,                       * Resume CIB extension
         ORG
CIBX_LEN EQU   *-CIBX                  * Length of CIB extension
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPCOM   0100-20096-20096-0111-00112-00112-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the COMmunication area
.*
&LABEL   MAPCOM &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPCOM                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPCOM         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'COM').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPCOM).MEND
&BXA_MAC_MAPCOM SETB 1
.*
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_COM
&BXA_CB_COM SETC 'COM'
.*
.* COMTOKEN - 31 BIT RIGHT JUSTIFIED TOKEN
COMTOKHR EQUOVR ,,b,COMTOKEN
.*
         MNOTE *,'Including IEZCOM mapping macro'
.*
.* IEZCOM does not generate a DSECT-statement
COM      DSECT ,                       * Start of COM DSECT
         IEZCOM ,                      *
         EQUOVR *END
*
         ORG
COM_LEN  EQU   *-COM                   * Length of COM
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPCQE   0100-20096-20096-0111-00116-00116-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Console Queue Element
.*
&LABEL   MAPCQE &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPCQE                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPCQE         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'CQE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPCQE).MEND
&BXA_MAC_MAPCQE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_CQE
&BXA_CB_CQE SETC 'CQE'
.*
.* CQEFLAG - CONSOLE OUTPUT QUEUE FLAGS
CQEEOB   EQUOVR ,,b,CQEFLAG
CQEEOQ   EQUOVR ,,b,CQEFLAG
CQEATTOP EQUOVR ,,b,CQEFLAG
CQEMLQHC EQUOVR ,,b,CQEFLAG
CQEMAJOR EQUOVR ,,b,CQEFLAG
CQEAVAIL EQUOVR ,,b,CQEFLAG
CQEENTR  EQUOVR ,,b,CQEFLAG
CQENULL  EQUOVR ,,v,CQEFLAG
.*
         MNOTE *,'Including IEZVD001 mapping macro'
         IEZVD001 ,                    *
         EQUOVR *END
.*
CQE      DSECT                         * Resume CQE DSECT
         ORG
CQE_LEN  EQU   *-CQE                   * Length of CQE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPCSCB  0100-20096-20096-0111-00245-00245-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Command Scheduling Control Block
.*
&LABEL   MAPCSCB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPCSCB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPCSCB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'CSCB').EMBED
         AIF   ('&CB' EQ 'CSCX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPCSCB).MEND
&BXA_MAC_MAPCSCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_CSCB
         GBLC  &BXA_CB_CSCX
&BXA_CB_CSCB SETC 'CSCB'
&BXA_CB_CSCX SETC 'CSCB'
.*
.* CHVCD - COMMAND VERB CODE
CHDIRINV EQUOVR ,,v,CHVCD
.*
.* CHSTS - STATUS FLAGS
CHAP     EQUOVR ,,b,CHSTS
CHINFMT  EQUOVR ,,b,CHSTS
CHSOUT   EQUOVR ,,b,CHSTS
CHQSPC   EQUOVR ,,b,CHSTS
CHAD     EQUOVR ,,b,CHSTS
CHDL     EQUOVR ,,b,CHSTS
CHFC     EQUOVR ,,b,CHSTS
CHABTERM EQUOVR ,,b,CHSTS
.*
.* CHACT - FLAGS INDICATING ACTIVITY INVOLVED
CHSWAP   EQUOVR ,,b,CHACT
CHTERM   EQUOVR ,,b,CHACT
CHDISC   EQUOVR ,,b,CHACT
CHDSI    EQUOVR ,,b,CHACT
CHCL     EQUOVR ,,b,CHACT
CHCLD    EQUOVR ,,b,CHACT
CHAIFX   EQUOVR ,,b,CHACT
CHPOSTSS EQUOVR ,,b,CHACT
CHIFY    EQUOVR ,,b,CHACT
CHAFORCE EQUOVR ,,b,CHACT
.*
.* CHPARM - POINTER TO PARAMETER LIST USED FOR SVC 34 COMMANDS
CHPCOI   EQUOVR ,,b,CHPARM
.*
.* CHTRKID - DISPLAY/TRACK IDENTIFIER (OS/VS2)
CHTSID   EQUOVR ,,v,CHTRKID
CHJOBID  EQUOVR ,,v,CHTRKID
CHINITID EQUOVR ,,v,CHTRKID
CHSASID  EQUOVR ,,v,CHTRKID
CHATXPID EQUOVR ,,v,CHTRKID
CHATXID  EQUOVR ,,v,CHTRKID
.*
.* CHRES - RESERVED (WAS CHVERSN)
CHSP13   EQUOVR ,,v,CHRES
CHSP41   EQUOVR ,,v,CHRES
CHSP42   EQUOVR ,,v,CHRES
CHSP44   EQUOVR ,,v,CHRES
CHROALL  EQUOVR ,,v,CHRES
CHVERID  EQUOVR ,,v,CHRES
.*
.* CHSWT - COMMUNICATIONS SWITCHES (OS/VS1)
CHARSV20 EQUOVR ,,b,CHSWT
CHJCT    EQUOVR ,,b,CHSWT
CHPSD    EQUOVR ,,b,CHSWT
CHPSF    EQUOVR ,,b,CHSWT
CHAC     EQUOVR ,,b,CHSWT
CHARSV21 EQUOVR ,,b,CHSWT
CHARSV22 EQUOVR ,,b,CHSWT
CHARSV23 EQUOVR ,,b,CHSWT
.*
.* CHJBFLGS - FLAGS FOR STARTED JOBS
CHJBSTRT EQUOVR ,,b,CHJBFLGS
CHISJOB  EQUOVR ,,b,CHJBFLGS
CHJBRSV1 EQUOVR ,,b,CHJBFLGS
.*
.* CHTYPE - FLAGS
CHDSTAT  EQUOVR ,,b,CHTYPE
CHARSV25 EQUOVR ,,b,CHTYPE
CHARSV26 EQUOVR ,,b,CHTYPE
CHARSV27 EQUOVR ,,b,CHTYPE
CHARSV28 EQUOVR ,,b,CHTYPE
CHARSV29 EQUOVR ,,b,CHTYPE
CHHIAR   EQUOVR ,,b,CHTYPE
CHDEF    EQUOVR ,,b,CHTYPE
.*
.* CHCSYSO - EXPRESS CANCEL SYSOUT (OS/VS1)
CHALL    EQUOVR ,,b,CHCSYSO
CHINN    EQUOVR ,,b,CHCSYSO
CHOUT    EQUOVR ,,b,CHCSYSO
CHHOLD   EQUOVR ,,b,CHCSYSO
CHQUE    EQUOVR ,,b,CHCSYSO
CHDUMP   EQUOVR ,,b,CHCSYSO
CHJB     EQUOVR ,,b,CHCSYSO
CHUSERID EQUOVR ,,b,CHCSYSO
.*
.* CHCMFLG1 - SEE XSA FOR DESCRIPTION
CHCMFL11 EQUOVR ,,b,CHCMFLG1
CHCMFL12 EQUOVR ,,b,CHCMFLG1
CHCMFL13 EQUOVR ,,b,CHCMFLG1
CHCMFL14 EQUOVR ,,b,CHCMFLG1
CHCMFL15 EQUOVR ,,b,CHCMFLG1
CHCMFL16 EQUOVR ,,b,CHCMFLG1
CHCMFL17 EQUOVR ,,b,CHCMFLG1
CHCMFL18 EQUOVR ,,b,CHCMFLG1
.*
.* CHCMFLG2 - SEE XSA FOR DESCRIPTION
CHCMFL21 EQUOVR ,,b,CHCMFLG2
CHCMFL22 EQUOVR ,,b,CHCMFLG2
CHCMFL23 EQUOVR ,,b,CHCMFLG2
CHCMFL24 EQUOVR ,,b,CHCMFLG2
CHCMFL25 EQUOVR ,,b,CHCMFLG2
CHCMFL26 EQUOVR ,,b,CHCMFLG2
CHCMFL27 EQUOVR ,,b,CHCMFLG2
CHCMFL28 EQUOVR ,,b,CHCMFLG2
.*
.* CHCMFLG4 - SEE XSA FOR DESCRIPTION
CHCMFL44 EQUOVR ,,b,CHCMFLG4
CHRTDM   EQUOVR ,,b,CHCMFLG4
CHNOBY   EQUOVR ,,b,CHCMFLG4
.*
.* CHAUTHA - 1ST BYTE OF COMMAND CODE AUTH FLAGS
CHAUTH1  EQUOVR ,,b,CHAUTHA
CHAUTH2  EQUOVR ,,b,CHAUTHA
CHAUTH3  EQUOVR ,,b,CHAUTHA
CHARES1  EQUOVR ,,b,CHAUTHA
.*
.* CHDISP - COMMAND DISPOSITION
CHDISPA  EQUOVR ,,b,CHDISP
CHDISPM  EQUOVR ,,b,CHDISP
CHDISPC  EQUOVR ,,b,CHDISP
CHDISPR  EQUOVR ,,b,CHDISP
CHDISPE  EQUOVR ,,b,CHDISP
CHARES2  EQUOVR ,,b,CHDISP
.*
.* CHFLGS - FLAGS
CHBIGRP  EQUOVR ,,b,CHFLGS
CHNOALC  EQUOVR ,,b,CHFLGS
.*
.* CHRTOKEN - 31 BIT RIGHT JUSTIFIED TOKEN
CHRTOKHR EQUOVR ,,b,CHRTOKEN
.*
.* IEECHAIN macro contains an EJECT with an 'argument'
         EJECTOVR *NOERR
.*
.* IEECHAIN macro does not provide a DSECT statement
CSCB     DSECT  ,
.*
         MNOTE *,'Including IEECHAIN mapping macro'
         IEECHAIN ,
         EQUOVR *END
         EJECTOVR *END
*
CSCB     DSECT ,                       * Resume CSCB DSECT
         ORG
CSCB_LEN EQU   *-CSCB                  * Length of CSCB
.*
CSCX     DSECT ,                       * Resume CSCX DSECT
         ORG
CSCX_LEN EQU   *-CSCX                  * Length of CSCX
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPCVT   0100-20096-20096-0111-00293-00293-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Communications Vector Table
.*
&LABEL   MAPCVT &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPCVT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPCVT         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'CVT').EMBED
         AIF   ('&CB' EQ 'CVTVSTGX').EMBED
         AIF   ('&CB' EQ 'CVTXTNT1').EMBED
         AIF   ('&CB' EQ 'CVTXTNT2').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPCVT).MEND
&BXA_MAC_MAPCVT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_CVT
         GBLC  &BXA_CB_CVTVSTGX
         GBLC  &BXA_CB_CVTXTNT1
         GBLC  &BXA_CB_CVTXTNT2
&BXA_CB_CVT SETC 'CVT'
&BXA_CB_CVTVSTGX SETC 'CVT'
&BXA_CB_CVTXTNT1 SETC 'CVT'
&BXA_CB_CVTXTNT2 SETC 'CVT'
.*
.* CVTDCB - OPERATING SYSTEM characteristics
CVTMVSE  EQUOVR ,,b,CVTDCB
CVT1SSS  EQUOVR ,,b,CVTDCB
CVT2SPS  EQUOVR ,,b,CVTDCB
CVT4MS1  EQUOVR ,,b,CVTDCB
CVTOSEXT EQUOVR ,,b,CVTDCB
CVT4MPS  EQUOVR ,,b,CVTDCB
CVT6DAT  EQUOVR ,,b,CVTDCB
CVTMVS2  EQUOVR ,,b,CVTDCB
CVT8AOS2 EQUOVR ,,b,CVTDCB
.*
.* CVTOPTA - OPTION INDICATORS
CVTCCH   EQUOVR ,,b,CVTOPTA
CVTAPR   EQUOVR ,,b,CVTOPTA
CVTDDR   EQUOVR ,,b,CVTOPTA
CVTNIP   EQUOVR ,,b,CVTOPTA
CVT121TR EQUOVR ,,b,CVTOPTA
CVTASCII EQUOVR ,,b,CVTOPTA
CVTXPFP  EQUOVR ,,b,CVTOPTA
.*
.* CVTOPTB - MISCELLANEOUS FLAGS
CVTPROT  EQUOVR ,,b,CVTOPTB
CVTCTIMS EQUOVR ,,b,CVTOPTB
CVTTOD   EQUOVR ,,b,CVTOPTB
CVTNLOG  EQUOVR ,,b,CVTOPTB
CVTAPTHR EQUOVR ,,b,CVTOPTB
CVTFP    EQUOVR ,,b,CVTOPTB
CVTVS1A  EQUOVR ,,b,CVTOPTB
CVTVS1B  EQUOVR ,,b,CVTOPTB
.*
.* CVTGTFST - GTF FLAG BYTES
CVTGTFAV EQUOVR ,,b,CVTGTFST
CVTSPD   EQUOVR ,,b,CVTGTFST
CVTWSPR  EQUOVR ,,b,CVTGTFST
CVTUSR   EQUOVR ,,b,CVTGTFST
CVTRNIO  EQUOVR ,,b,CVTGTFST
.*
.* CVTTCMFG - TCAM FLAGS
CVTTCRDY EQUOVR ,,b,CVTTCMFG
CVTLDEV  EQUOVR ,,b,CVTTCMFG
CVTNWTCM EQUOVR ,,b,CVTTCMFG
.*
.* CVTDMSRF - OPEN/CLOSE/EOV FLAG BYTE.
CVTSDUMP EQUOVR ,,b,CVTDMSRF
CVTUDUMP EQUOVR ,,b,CVTDMSRF
.*
.* CVTDIRST - FLAG BYTE
CVTDICOM EQUOVR ,,b,CVTDIRST
.*
.* CVTSYLK - SUPERVISOR LOCK.
CVTSYLKS EQUOVR ,,v,CVTSYLK
CVTSYLKR EQUOVR ,,v,CVTSYLK
.*
.* CVTFLAG1 - FLAG BYTE
CVTRSMWD EQUOVR ,,b,CVTFLAG1
CVTSVPRC EQUOVR ,,b,CVTFLAG1
CVTCUSE  EQUOVR ,,b,CVTFLAG1
CVTMVPG  EQUOVR ,,b,CVTFLAG1
CVTOVER  EQUOVR ,,b,CVTFLAG1
CVTCSTR  EQUOVR ,,b,CVTFLAG1
CVTSUBSP EQUOVR ,,b,CVTFLAG1
CVTKPAR  EQUOVR ,,b,CVTFLAG1
.*
.* CVTFLAG2 - FLAG BYTE
CVTCMPSC EQUOVR ,,b,CVTFLAG2
CVTCMPSH EQUOVR ,,b,CVTFLAG2
CVTSOPF  EQUOVR ,,b,CVTFLAG2
CVTBFPH  EQUOVR ,,b,CVTFLAG2
CVTPER2  EQUOVR ,,b,CVTFLAG2
.*
.* CVTCTLFG - SYSTEM CONTROL FLAGS
CVTDSTAT EQUOVR ,,b,CVTCTLFG
CVTNOMP  EQUOVR ,,b,CVTCTLFG
CVTGTRCE EQUOVR ,,b,CVTCTLFG
CVTSDTRC EQUOVR ,,b,CVTCTLFG
.*
.* CVTGRSST - GRS status.
CVTE51GN EQUOVR ,,b,CVTGRSST
CVTE51LN EQUOVR ,,b,CVTGRSST
.*
.* CVTMFRTR - ADDRESS OF MEASUREMENT FACILITY ROUTINE
CVTMFACT EQUOVR ,,b,CVTMFRTR
.*
.* CVTGSDA - ADDRESS OF GLOBAL SYSTEM DUPLEX AREA
CVTGSDAB EQUOVR ,,b,CVTGSDA
.*
.* CVTFUNC - Reserved for solution/offering use.
CVTSOLN  EQUOVR ,,b,CVTFUNC
.*
.* CVTXAFL - FLAG BYTE FOR MVS/XA PROCESSING.
CVTCSRIM EQUOVR ,,b,CVTXAFL
.*
.* CVTOSLV0 - BYTE 0 OF CVTOSLVL
CVTH3310 EQUOVR ,,b,CVTOSLV0
CVTESA   EQUOVR ,,b,CVTOSLV0
CVTXAX   EQUOVR ,,b,CVTOSLV0
CVTH4420 EQUOVR ,,b,CVTOSLV0
CVTJ3313 EQUOVR ,,b,CVTOSLV0
CVTJ3311 EQUOVR ,,b,CVTOSLV0
CVTHIPER EQUOVR ,,b,CVTOSLV0
CVTH4410 EQUOVR ,,b,CVTOSLV0
CVTLKR   EQUOVR ,,b,CVTOSLV0
CVTUCBSV EQUOVR ,,b,CVTOSLV0
CVTCADS  EQUOVR ,,b,CVTOSLV0
CVTCRPTL EQUOVR ,,b,CVTOSLV0
CVTJ4422 EQUOVR ,,b,CVTOSLV0
.*
.* CVTOSLV1 - BYTE 1 OF CVTOSLVL
CVTH4430 EQUOVR ,,b,CVTOSLV1
CVTDYAPF EQUOVR ,,b,CVTOSLV1
CVTWLM   EQUOVR ,,b,CVTOSLV1
CVTH5510 EQUOVR ,,b,CVTOSLV1
CVTDYNEX EQUOVR ,,b,CVTOSLV1
CVTH5520 EQUOVR ,,b,CVTOSLV1
CVTENCLV EQUOVR ,,b,CVTOSLV1
CVTJ5522 EQUOVR ,,b,CVTOSLV1
CVTH5530 EQUOVR ,,b,CVTOSLV1
CVTH6603 EQUOVR ,,b,CVTOSLV1
CVTOS390_010300 EQUOVR ,,b,CVTOSLV1
CVTOS390_R3     EQUOVR ,,b,CVTOSLV1
CVTDYNL  EQUOVR ,,b,CVTOSLV1
CVTH6601 EQUOVR ,,b,CVTOSLV1
CVTOS390 EQUOVR ,,b,CVTOSLV1
CVTOS390_010100 EQUOVR ,,b,CVTOSLV1
CVTOS390_R1     EQUOVR ,,b,CVTOSLV1
CVTPRDED EQUOVR ,,b,CVTOSLV1
CVTJ6602 EQUOVR ,,b,CVTOSLV1
CVTOS390_010200 EQUOVR ,,b,CVTOSLV1
CVTOS390_R2     EQUOVR ,,b,CVTOSLV1
CVTPARMC EQUOVR ,,b,CVTOSLV1
.*
.* CVTOSLV2 - BYTE 2 OF CVTOSLVL
CVTOS390_010400 EQUOVR ,,b,CVTOSLV2
CVTOS390_020400 EQUOVR ,,b,CVTOSLV2
CVTOS390_R4     EQUOVR ,,b,CVTOSLV2
CVTJ6604 EQUOVR ,,b,CVTOSLV2
CVTDYLPA EQUOVR ,,b,CVTOSLV2
CVTRTLS  EQUOVR ,,b,CVTOSLV2
CVTOS390_020500 EQUOVR ,,b,CVTOSLV2
CVTOS390_R5     EQUOVR ,,b,CVTOSLV2
CVTH6605 EQUOVR ,,b,CVTOSLV2
CVTOS390_020600 EQUOVR ,,b,CVTOSLV2
CVTOS390_R6     EQUOVR ,,b,CVTOSLV2
CVTH6606 EQUOVR ,,b,CVTOSLV2
CVTBFP   EQUOVR ,,b,CVTOSLV2
.*
.* CVTFLGBT - FLAG BYTE (OS/VS1)
CVTNPE   EQUOVR ,,b,CVTFLGBT
CVTVME   EQUOVR ,,b,CVTFLGBT
CVTBAH   EQUOVR ,,b,CVTFLGBT
.*
.* CVTAVVT - ADDRESS OF AVM CONTROL BLOCK
CVTAVIN  EQUOVR ,,b,CVTAVVT
.*
.* CVTFBYT1 - FLAG BYTE
CVTRDE   EQUOVR ,,b,CVTFBYT1
.*
.* CVTATCVT - POINTER TO VTAM'S CVT
CVTATACT EQUOVR ,,b,CVTATCVT
.*
.* CVT-macro contains a constant, which is defined outside its DSECT
CVTFIX   DSECT ,                       * Reset to CVT DSECT
         MNOTE *,'Including CVT mapping macro'
         CVT   DSECT=YES,              * Generate CVT                  *
               PREFIX=YES,             * with prefix area              *
               LIST=YES                * and unchanged PRINT option
         EQUOVR *END
*
CVTFIX   DSECT ,                       * Reset to CVT prefix
CVT      EQU   CVTMAP                  * For USINGs
         ORG
CVTFIX_LEN EQU CVT-CVTFIX              * Length of CVT prefix
CVT_LEN  EQU   *-CVT                   * Length of CVT proper
*
CVTVSTGX DSECT ,                       * Reset to CVTVSTGX DSECT
         ORG
CVTVSTGX_LEN EQU *-CVTVSTGX            * Length of CVTVSTGX
*
CVTXTNT1 DSECT ,                       * Reset to OS/VS extension
         ORG
CVTXTNT1_LEN EQU *-CVTXTNT1            * Length of CVTXTNT1
*
CVTXTNT2 DSECT ,                       * Reset to OS/VS2 extension
         ORG
CVTXTNT2_LEN EQU *-CVTXTNT2            * Length of CVTXTNT2
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDCB   0100-20096-20096-0111-00798-00798-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Control Block
.* The DCB must be located below 16M
.*
&LABEL   MAPDCB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDCB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDCB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'BDW').EMBED
         AIF   ('&CB' EQ 'DCB').EMBED
         AIF   ('&CB' EQ 'RDW').EMBED
         AIF   ('&CB' EQ 'SDW').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDCB).MEND
&BXA_MAC_MAPDCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_BDW
         GBLC  &BXA_CB_DCB
         GBLC  &BXA_CB_RDW
         GBLC  &BXA_CB_SDW
&BXA_CB_BDW SETC 'DCB'
&BXA_CB_DCB SETC 'DCB'
&BXA_CB_RDW SETC 'DCB'
&BXA_CB_SDW SETC 'DCB'
.*
.* To be able to refer to DCBDEVT on overridden EQU statements, the
.* field must be defined prior to the assignment of code-values to
.* EQUated symbols. The following DSOVR statements move its
.* definition to an appropriate place.
DCBDVTBA+2 DSOVR *NEWNAME,DCBDEVT      * Name second unlabeled DS after*
                                       * the DCBDVTBA label
DCBDEVT  DSOVR *NEWNAME,*NONAME        * Remove label from the original*
                                       * DCBDEVT-defining statement
.*
.* Declare code-values for device types
DCBDV311 EQUOVR ,,v,DCBDEVT
DCBDV301 EQUOVR ,,v,DCBDEVT
DCBDV303 EQUOVR ,,v,DCBDEVT
DCBDV345 EQUOVR ,,v,DCBDEVT
DCBDV321 EQUOVR ,,v,DCBDEVT
DCBD1305 EQUOVR ,,v,DCBDEVT
DCBDV305 EQUOVR ,,v,DCBDEVT
DCBDV314 EQUOVR ,,v,DCBDEVT
DCBDV330 EQUOVR ,,v,DCBDEVT
DCBDV340 EQUOVR ,,v,DCBDEVT
DCBDV350 EQUOVR ,,v,DCBDEVT
DCBDV375 EQUOVR ,,v,DCBDEVT
DCBDV331 EQUOVR ,,v,DCBDEVT
DCBDV380 EQUOVR ,,v,DCBDEVT
DCBDV390 EQUOVR ,,v,DCBDEVT
.*
.* Declare code-values for tape recording technique
DCBMTE   EQUOVR ,,v,DCBTRTCH
DCBMTT   EQUOVR ,,v,DCBTRTCH
DCBMTC   EQUOVR ,,v,DCBTRTCH
DCBMTET  EQUOVR ,,v,DCBTRTCH
DCBCMPAC EQUOVR ,,v,DCBTRTCH
DCBNOPAC EQUOVR ,,v,DCBTRTCH
.*
.* Declare code-values for device types
DCBDVMT  EQUOVR ,,v,DCBDEVT
DCBDVMT2 EQUOVR ,,v,DCBDEVT
DCBDVMT3 EQUOVR ,,v,DCBDEVT
DCBDVMT4 EQUOVR ,,v,DCBDEVT
.*
.* Declare code-values for tape density
DCBMTDN0 EQUOVR ,,v,DCBDEN
DCBMTDN1 EQUOVR ,,v,DCBDEN
DCBMTDN2 EQUOVR ,,v,DCBDEN
DCBMTDN3 EQUOVR ,,v,DCBDEN
DCBMTDN4 EQUOVR ,,v,DCBDEN
.*
.* Declare bit-fields for paper tape translate table
DCBPTCDN EQUOVR ,,b,DCBCODE
DCBPTCDI EQUOVR ,,b,DCBCODE
DCBPTCDF EQUOVR ,,b,DCBCODE
DCBPTCDB EQUOVR ,,b,DCBCODE
DCBPTCDC EQUOVR ,,b,DCBCODE
DCBPTCDA EQUOVR ,,b,DCBCODE
DCBPTCDT EQUOVR ,,b,DCBCODE
.*
.* Declare code-values for device types
DCBDVPTP EQUOVR ,,v,DCBDEVT
.*
.* Declare bit-fields for paper tape flags
DCBPTIC  EQUOVR ,,b,DCBPTFLG
DCBPTECT EQUOVR ,,b,DCBPTFLG
DCBPTECR EQUOVR ,,b,DCBPTFLG
DCBPTUCT EQUOVR ,,b,DCBPTFLG
DCBPTERR EQUOVR ,,b,DCBPTFLG
.*
.* Declare code-values for printer spacing
DCBPRSP0 EQUOVR ,,v,DCBPRTSP
DCBPRSP1 EQUOVR ,,v,DCBPRTSP
DCBPRSP2 EQUOVR ,,v,DCBPRTSP
DCBPRSP3 EQUOVR ,,v,DCBPRTSP
.*
.* Declare code-values for device types
DCBDVPR1 EQUOVR ,,v,DCBDEVT
DCBDVPR2 EQUOVR ,,v,DCBDEVT
DCBDVPR3 EQUOVR ,,v,DCBDEVT
DCBDVPR4 EQUOVR ,,v,DCBDEVT
DCBDVPRT EQUOVR ,,v,DCBDEVT
DCBDVPR5 EQUOVR ,,v,DCBDEVT
.*
.* Declare code-values for printer overflow
DCBPRC9  EQUOVR ,,v,DCBPRTOV
DCBPRC12 EQUOVR ,,v,DCBPRTOV
.*
.* Declare bit-fields for printer byte
DCBTRCID EQUOVR ,,b,DCBPRBYT
.*
.* Declare bit-fields for stacker select
DCBMODEC EQUOVR ,,b,DCBSTACK
DCBMODEE EQUOVR ,,b,DCBSTACK
DCBMODEO EQUOVR ,,b,DCBSTACK
DCBMODER EQUOVR ,,b,DCBSTACK
DCBSTCK2 EQUOVR ,,b,DCBSTACK
DCBSTCK1 EQUOVR ,,b,DCBSTACK
.*
.* Declare code-values for device types
DCBDVCR0 EQUOVR ,,v,DCBDEVT
DCBDVCP0 EQUOVR ,,v,DCBDEVT
DCBDVCRP EQUOVR ,,v,DCBDEVT
DCBDVCR1 EQUOVR ,,v,DCBDEVT
DCBDVCPR EQUOVR ,,v,DCBDEVT
DCBDVCR2 EQUOVR ,,v,DCBDEVT
DCBDVCP1 EQUOVR ,,v,DCBDEVT
.*
.* Declare function indicator bits
DCBFNCBI EQUOVR ,,b,DCBFUNC
DCBFNCBR EQUOVR ,,b,DCBFUNC
DCBFNCBP EQUOVR ,,b,DCBFUNC
DCBFNCBW EQUOVR ,,b,DCBFUNC
DCBFNCBD EQUOVR ,,b,DCBFUNC
DCBFNCBX EQUOVR ,,b,DCBFUNC
DCBFNCBT EQUOVR ,,b,DCBFUNC
.*
.* Declare bit-fields for WTT flags
DCBBQWRU EQUOVR ,,b,DCBBQFLG
DCBBQIAM EQUOVR ,,b,DCBBQFLG
DCBBQWRS EQUOVR ,,b,DCBBQFLG
DCBBQWRE EQUOVR ,,b,DCBBQFLG
.*
.* Declare bit-fields for optical reader flags
DCBEOPFG EQUOVR ,,b,DCBORFLG
.*
.* Declare bit-fields for optical reader byte
DCBORSYN EQUOVR ,,b,DCBORBYT
DCBOREOF EQUOVR ,,b,DCBORBYT
DCBORBFP EQUOVR ,,b,DCBORBYT
.*
.* Declare code-values for device types
DCBDVOR5 EQUOVR ,,v,DCBDEVT
DCBDVOR7 EQUOVR ,,v,DCBDEVT
DCBDVOR8 EQUOVR ,,v,DCBDEVT
DCBDVOR9 EQUOVR ,,v,DCBDEVT
.*
.* Declare error indicator bits
DCBORNRM EQUOVR ,,b,DCBEIB
DCBORREJ EQUOVR ,,b,DCBEIB
DCBORERR EQUOVR ,,b,DCBEIB
DCBORECK EQUOVR ,,b,DCBEIB
DCBORWLR EQUOVR ,,b,DCBEIB
DCBORHPR EQUOVR ,,b,DCBEIB
DCBORDCK EQUOVR ,,b,DCBEIB
.*
.* Declare bit-fields for indicator and counter byte
DCBMRDCT EQUOVR ,,b,DCBMRIND
DCBMRSCU EQUOVR ,,b,DCBMRIND
DCBMRPLO EQUOVR ,,b,DCBMRIND
DCBMRPLS EQUOVR ,,b,DCBMRIND
DCBMRERP EQUOVR ,,b,DCBMRIND
DCBMRERS EQUOVR ,,b,DCBMRIND
.*
.* Declare bit-fields for magnetic reader flag byte
DCBMRSCC EQUOVR ,,b,DCBMRFLG
DCBMRDBG EQUOVR ,,b,DCBMRFLG
DCBMRDRU EQUOVR ,,b,DCBMRFLG
DCBMRDR  EQUOVR ,,b,DCBMRFLG
DCBMRPCC EQUOVR ,,b,DCBMRFLG
DCBMRDWT EQUOVR ,,b,DCBMRFLG
DCBMRUE  EQUOVR ,,b,DCBMRFLG
.*
.* Declare code-values for device types
DCBDVMR  EQUOVR ,,v,DCBDEVT
DCBDVORS EQUOVR ,,v,DCBDEVT
DCBDVMRS EQUOVR ,,v,DCBDEVT
DCBDVDRI EQUOVR ,,v,DCBDEVT
.*
.* Declare code-values for device types
DCBDVTRM EQUOVR ,,v,DCBDEVT
.*
.* Declare bit-fields for data set organisation
DCBDSGIS EQUOVR ,,b,DCBDSRG1
DCBDSGPS EQUOVR ,,b,DCBDSRG1
DCBDSGDA EQUOVR ,,b,DCBDSRG1
DCBDSGCX EQUOVR ,,b,DCBDSRG1
DCBDSGPO EQUOVR ,,b,DCBDSRG1
DCBDSGU  EQUOVR ,,b,DCBDSRG1
.*
DCBDSGGS EQUOVR ,,b,DCBDSRG2
DCBDSGTX EQUOVR ,,b,DCBDSRG2
DCBDSGTQ EQUOVR ,,b,DCBDSRG2
DCBACBM  EQUOVR ,,b,DCBDSRG2
DCBDSGTR EQUOVR ,,b,DCBDSRG2
.*
.* Declare bit fields for QSAM LRI update processing
DCB1DVDS EQUOVR ,,b,DCBQSLM
DCBUPDCM EQUOVR ,,b,DCBQSLM
DCBUPDBT EQUOVR ,,b,DCBQSLM
DCBUPDT  EQUOVR ,,b,DCBQSLM
DCBNUPD  EQUOVR ,,b,DCBQSLM
DCBSVDEB EQUOVR ,,b,DCBQSLM
.*
.* Declare hierarchy bit
DCBH1    EQUOVR ,,b,DCBHIARC
DCBH0    EQUOVR ,,b,DCBHIARC
.*
.* Declare bit-fields for buffering technique
DCBBFT   EQUOVR ,,b,DCBBFTEK
DCBBFTA  EQUOVR ,,b,DCBBFTEK
DCBBFTR  EQUOVR ,,b,DCBBFTEK
DCBBFTS  EQUOVR ,,b,DCBBFTEK
DCBBFTKR EQUOVR ,,b,DCBBFTEK
DCBBFTE  EQUOVR ,,b,DCBBFTEK
DCBBFTKD EQUOVR ,,b,DCBBFTEK
DCBBFTK  EQUOVR ,,b,DCBBFTEK
DCBBXLRI EQUOVR ,,b,DCBBFTEK
.*
.* Declare bit-fields for buffering alignment
DCBBFA   EQUOVR ,,b,DCBBFALN
DCBBFAD  EQUOVR ,,b,DCBBFALN
DCBBFAF1 EQUOVR ,,b,DCBBFALN
DCBBFAF2 EQUOVR ,,b,DCBBFALN
.*
.* Declare bit-fields for record format
DCBRECLA EQUOVR ,,b,DCBRECFM
DCBRECD  EQUOVR ,,b,DCBRECFM
DCBRECL  EQUOVR ,,b,DCBRECFM
DCBRECF  EQUOVR ,,b,DCBRECFM
DCBRECV  EQUOVR ,,b,DCBRECFM
DCBRECU  EQUOVR ,,b,DCBRECFM
DCBRECTO EQUOVR ,,b,DCBRECFM
DCBRECBR EQUOVR ,,b,DCBRECFM
DCBRECSB EQUOVR ,,b,DCBRECFM
DCBRECCC EQUOVR ,,b,DCBRECFM
DCBRECCA EQUOVR ,,b,DCBRECFM
DCBRECCM EQUOVR ,,b,DCBRECFM
DCBRECKL EQUOVR ,,b,DCBRECFM
.*
.* Declare bit-fields for error recording option
DCBERPT  EQUOVR ,,b,DCBERROP
DCBERPC  EQUOVR ,,b,DCBERROP
DCBERPW  EQUOVR ,,b,DCBERROP
DCBERPR  EQUOVR ,,b,DCBERROP
DCBERPN  EQUOVR ,,b,DCBERROP
.*
.* Declare bits for program-controlled interruption handling
DCBPCIX1 EQUOVR ,,b,DCBPCI
DCBPCIX2 EQUOVR ,,b,DCBPCI
DCBPCIA1 EQUOVR ,,b,DCBPCI
DCBPCIA2 EQUOVR ,,b,DCBPCI
DCBPCIN1 EQUOVR ,,b,DCBPCI
DCBPCIN2 EQUOVR ,,b,DCBPCI
DCBPCIR1 EQUOVR ,,b,DCBPCI
DCBPCIR2 EQUOVR ,,b,DCBPCI
.*
.* Declare communication priority bits
DCBCPR   EQUOVR ,,b,DCBCPRI
DCBCPE   EQUOVR ,,b,DCBCPRI
DCBCPS   EQUOVR ,,b,DCBCPRI
.*
.* Declare bit-fields for status byte
DCBAUTOI EQUOVR ,,b,DCBTRSTA
DCBAUTOD EQUOVR ,,b,DCBTRSTA
DCBINITL EQUOVR ,,b,DCBTRSTA
DCBRSTRT EQUOVR ,,b,DCBTRSTA
DCBIPLED EQUOVR ,,b,DCBTRSTA
DCBBAKUP EQUOVR ,,b,DCBTRSTA
DCBNIDLE EQUOVR ,,b,DCBTRSTA
DCBCHNGL EQUOVR ,,b,DCBTRSTA
.*
.* Declare open flags
DCBOFLWR EQUOVR ,,b,DCBOFLGS
DCBOFIOD EQUOVR ,,b,DCBOFLGS
DCBOFLRB EQUOVR ,,b,DCBOFLGS
DCBOFEOV EQUOVR ,,b,DCBOFLGS
DCBOFOPN EQUOVR ,,b,DCBOFLGS
DCBOFPPC EQUOVR ,,b,DCBOFLGS
DCBOFTM  EQUOVR ,,b,DCBOFLGS
DCBOFUEX EQUOVR ,,b,DCBOFLGS
DCBOLOCK EQUOVR ,,b,DCBOFLGS
DCBOFIOF EQUOVR ,,b,DCBOFLGS
DCBOBUSY EQUOVR ,,b,DCBOFLGS
.*
.* Declare IOS flags
DCBIBEC  EQUOVR ,,b,DCBIFLG
DCBIFNEP EQUOVR ,,v,DCBIFLG
DCBEX    EQUOVR ,,b,DCBIFLG
DCBIFPEC EQUOVR ,,b,DCBIFLG
DCBIBPCT EQUOVR ,,b,DCBIFLG
DCBIFC9  EQUOVR ,,b,DCBIFLG
DCBIFC12 EQUOVR ,,b,DCBIFLG
DCBIBIOE EQUOVR ,,b,DCBIFLG
DCBIFER  EQUOVR ,,v,DCBIFLG
DCBIFNE1 EQUOVR ,,b,DCBIFLG
DCBIFTIM EQUOVR ,,b,DCBIFLG
DCBIFNE2 EQUOVR ,,b,DCBIFLG
DCBIFNE3 EQUOVR ,,b,DCBIFLG
.*
.* Declare bit-fields for macro reference
DCBMRECP EQUOVR ,,b,DCBMACR1
DCBMRFE  EQUOVR ,,b,DCBMACR1
DCBMRGET EQUOVR ,,b,DCBMACR1
DCBMRPTQ EQUOVR ,,b,DCBMACR1
DCBMRAPG EQUOVR ,,b,DCBMACR1
DCBMRRD  EQUOVR ,,b,DCBMACR1
DCBMRWRQ EQUOVR ,,b,DCBMACR1
DCBMRCI  EQUOVR ,,b,DCBMACR1
DCBMRMVG EQUOVR ,,b,DCBMACR1
DCBMRRDK EQUOVR ,,b,DCBMACR1
DCBMRLCG EQUOVR ,,b,DCBMACR1
DCBMRRDI EQUOVR ,,b,DCBMACR1
DCBMRABC EQUOVR ,,b,DCBMACR1
DCBMRPT1 EQUOVR ,,b,DCBMACR1
DCBMRSBG EQUOVR ,,b,DCBMACR1
DCBMRDBF EQUOVR ,,b,DCBMACR1
DCBPGFXA EQUOVR ,,b,DCBMACR1
DCBMRCRL EQUOVR ,,b,DCBMACR1
DCBMRCHK EQUOVR ,,b,DCBMACR1
DCBMRRDX EQUOVR ,,b,DCBMACR1
DCBMRDMG EQUOVR ,,b,DCBMACR1
DCBMRCK  EQUOVR ,,b,DCBMACR1
.*
DCBMRSTL EQUOVR ,,b,DCBMACR2
DCBMRPUT EQUOVR ,,b,DCBMACR2
DCBMRGTQ EQUOVR ,,b,DCBMACR2
DCBMRWRT EQUOVR ,,b,DCBMACR2
DCBMRRDQ EQUOVR ,,b,DCBMACR2
DCBMRMVP EQUOVR ,,b,DCBMACR2
DCBMRWRK EQUOVR ,,b,DCBMACR2
DCBMR5WD EQUOVR ,,b,DCBMACR2
DCBMRLDM EQUOVR ,,b,DCBMACR2
DCBMRLCP EQUOVR ,,b,DCBMACR2
DCBMRIDW EQUOVR ,,b,DCBMACR2
DCBMR4WD EQUOVR ,,b,DCBMACR2
DCBMRPT2 EQUOVR ,,b,DCBMACR2
DCBMRTMD EQUOVR ,,b,DCBMACR2
DCBMRUIP EQUOVR ,,b,DCBMACR2
DCBMR3WD EQUOVR ,,b,DCBMACR2
DCBMRCTL EQUOVR ,,b,DCBMACR2
DCBMRSTK EQUOVR ,,b,DCBMACR2
DCBMRAWR EQUOVR ,,b,DCBMACR2
DCBMR1WD EQUOVR ,,b,DCBMACR2
DCBMRSWA EQUOVR ,,b,DCBMACR2
DCBMRDMD EQUOVR ,,b,DCBMACR2
DCBMRSTI EQUOVR ,,b,DCBMACR2
.*
.* DCBMACF1 - FIRST BYTE OF DCBMACRF
DCBMFECP EQUOVR ,,b,DCBMACF1
DCBMFFE  EQUOVR ,,b,DCBMACF1
DCBMFGET EQUOVR ,,b,DCBMACF1
DCBMFPTQ EQUOVR ,,b,DCBMACF1
DCBMFAPG EQUOVR ,,b,DCBMACF1
DCBMFRD  EQUOVR ,,b,DCBMACF1
DCBMFWRQ EQUOVR ,,b,DCBMACF1
DCBMFCI  EQUOVR ,,b,DCBMACF1
DCBMFMVG EQUOVR ,,b,DCBMACF1
DCBMFRDK EQUOVR ,,b,DCBMACF1
DCBMFLCG EQUOVR ,,b,DCBMACF1
DCBMFRDI EQUOVR ,,b,DCBMACF1
DCBMFABC EQUOVR ,,b,DCBMACF1
DCBMFPT1 EQUOVR ,,b,DCBMACF1
DCBMFSBG EQUOVR ,,b,DCBMACF1
DCBMFDBF EQUOVR ,,b,DCBMACF1
DCBMFFXA EQUOVR ,,b,DCBMACF1
DCBMFCRL EQUOVR ,,b,DCBMACF1
DCBMFCHK EQUOVR ,,b,DCBMACF1
DCBMFRDX EQUOVR ,,b,DCBMACF1
DCBMFDMG EQUOVR ,,b,DCBMACF1
DCBMFCK  EQUOVR ,,b,DCBMACF1
.*
.* DCBMACF2 - SECOND BYTE OF DCBMACRF
DCBMFSTL EQUOVR ,,b,DCBMACF2
DCBMFPUT EQUOVR ,,b,DCBMACF2
DCBMFGTQ EQUOVR ,,b,DCBMACF2
DCBMFWRT EQUOVR ,,b,DCBMACF2
DCBMFRDQ EQUOVR ,,b,DCBMACF2
DCBMFMVP EQUOVR ,,b,DCBMACF2
DCBMFWRK EQUOVR ,,b,DCBMACF2
DCBMF5WD EQUOVR ,,b,DCBMACF2
DCBMFLDM EQUOVR ,,b,DCBMACF2
DCBMFLCP EQUOVR ,,b,DCBMACF2
DCBMFIDW EQUOVR ,,b,DCBMACF2
DCBMF4WD EQUOVR ,,b,DCBMACF2
DCBMFPT2 EQUOVR ,,b,DCBMACF2
DCBMFTMD EQUOVR ,,b,DCBMACF2
DCBMFUIP EQUOVR ,,b,DCBMACF2
DCBMF3WD EQUOVR ,,b,DCBMACF2
DCBMFCTL EQUOVR ,,b,DCBMACF2
DCBMFSTK EQUOVR ,,b,DCBMACF2
DCBMFAWR EQUOVR ,,b,DCBMACF2
DCBMF1WD EQUOVR ,,b,DCBMACF2
DCBMFSWA EQUOVR ,,b,DCBMACF2
DCBMFDMD EQUOVR ,,b,DCBMACF2
DCBMFSTI EQUOVR ,,b,DCBMACF2
.*
.* Declare IOS flags
DCBIFEC  EQUOVR ,,b,DCBIFLGS
DCBIFPCT EQUOVR ,,b,DCBIFLGS
DCBIFIOE EQUOVR ,,b,DCBIFLGS
DCBIFLDT EQUOVR ,,b,DCBIFLGS
.*
.* Declare bits for communication interface type
DCBINVB1 EQUOVR ,,b,DCBINVCI
DCBINVB2 EQUOVR ,,b,DCBINVCI
.*
.* Declare bits for ISAM option codes
DCBOPTUF EQUOVR ,,b,DCBOPTCD
DCBOPTM  EQUOVR ,,b,DCBOPTCD
DCBOPTI  EQUOVR ,,b,DCBOPTCD
DCBOPTY  EQUOVR ,,b,DCBOPTCD
DCBOPTL  EQUOVR ,,b,DCBOPTCD
DCBOPTR  EQUOVR ,,b,DCBOPTCD
.*
.* Declare bits for ISAM additional macro reference
DCBMACUR EQUOVR ,,b,DCBMAC
DCBMACUW EQUOVR ,,b,DCBMAC
DCBMACAW EQUOVR ,,b,DCBMAC
DCBMACRE EQUOVR ,,b,DCBMAC
.*
.* Declare bits for exceptional condition codes
DCBEXNKY EQUOVR ,,b,DCBEXCD1
DCBEXIDA EQUOVR ,,b,DCBEXCD1
DCBEXNSP EQUOVR ,,b,DCBEXCD1
DCBEXINV EQUOVR ,,b,DCBEXCD1
DCBEXIER EQUOVR ,,b,DCBEXCD1
DCBEXOER EQUOVR ,,b,DCBEXCD1
DCBEXBLI EQUOVR ,,b,DCBEXCD1
DCBEXBLU EQUOVR ,,b,DCBEXCD1
.*
DCBEXSEQ EQUOVR ,,b,DCBEXCD2
DCBEXDUP EQUOVR ,,b,DCBEXCD2
DCBEXCLD EQUOVR ,,b,DCBEXCD2
DCBEXOFL EQUOVR ,,b,DCBEXCD2
DCBEXLTH EQUOVR ,,b,DCBEXCD2
DCBEXRDE EQUOVR ,,b,DCBEXCD2
.*
.* Declare code-values for '2301 or not'
DCBHMDRM EQUOVR ,,v,DCBHMASK
DCBHMNDM EQUOVR ,,v,DCBHMASK
.*
.* Declare bits for ISAM status indicators
DCBSTSSM EQUOVR ,,b,DCBST
DCBSTKSQ EQUOVR ,,b,DCBST
DCBSTLOD EQUOVR ,,b,DCBST
DCBSTNCY EQUOVR ,,b,DCBST
DCBSTNMC EQUOVR ,,b,DCBST
DCBSTLBF EQUOVR ,,b,DCBST
DCBSTLTF EQUOVR ,,b,DCBST
.*
.* Declare code-values for overflow device
DCBDVI01 EQUOVR ,,v,DCBOVDEV
DCBDVI03 EQUOVR ,,v,DCBOVDEV
DCBDVI02 EQUOVR ,,v,DCBOVDEV
DCBDVI05 EQUOVR ,,v,DCBOVDEV
DCBDVI14 EQUOVR ,,v,DCBOVDEV
DCBDVI30 EQUOVR ,,v,DCBOVDEV
.*
.* Declare bits for BDAM option codes
DCBOPTTO EQUOVR ,,b,DCBOPTCD
DCBOPTE  EQUOVR ,,b,DCBOPTCD
DCBOPTF  EQUOVR ,,b,DCBOPTCD
DCBOPTA  EQUOVR ,,b,DCBOPTCD
DCBOPTDB EQUOVR ,,b,DCBOPTCD
DCBOPTRE EQUOVR ,,b,DCBOPTCD
DCBOPTRB EQUOVR ,,b,DCBOPTCD
.*
.* Declare bit-fields for QTAM adapter type
DCBCPWTT EQUOVR ,,b,DCBPLBYT
.*
.* Declare bits for TCAM option codes
DCBOPTWP EQUOVR ,,b,DCBOPTCD
DCBOPTUM EQUOVR ,,b,DCBOPTCD
DCBOPTCB EQUOVR ,,b,DCBOPTCD
DCBOPTCP EQUOVR ,,b,DCBOPTCD
DCBOPTIM EQUOVR ,,b,DCBOPTCD
DCBOPTRM EQUOVR ,,b,DCBOPTCD
.*
.* Declare ready queue indicators
DCBRDYPO EQUOVR ,,b,DCBRDYI
DCBRDYIQ EQUOVR ,,b,DCBRDYI
DCBRDYIZ EQUOVR ,,b,DCBRDYI
.*
.* Declare bits for BSC transmission mode
DCBXMIBC EQUOVR ,,b,DCBXMODE
DCBXMDA1 EQUOVR ,,b,DCBXMODE
DCBXMDA2 EQUOVR ,,b,DCBXMODE
.*
.* Declare bits for BSC control flag
DCBXCCSF EQUOVR ,,b,DCBXCODE
DCBXCPTP EQUOVR ,,b,DCBXCODE
DCBXCTR1 EQUOVR ,,b,DCBXCODE
DCBXCAS1 EQUOVR ,,b,DCBXCODE
DCBXCEBC EQUOVR ,,b,DCBXCODE
DCBXCTR2 EQUOVR ,,b,DCBXCODE
DCBXCAS2 EQUOVR ,,b,DCBXCODE
.*
.* Declare bits for SAM option codes
DCBOPTW  EQUOVR ,,b,DCBOPTCD
DCBOPTU  EQUOVR ,,b,DCBOPTCD
DCBOPTC  EQUOVR ,,b,DCBOPTCD
DCBOPTH  EQUOVR ,,b,DCBOPTCD
DCBOPTO  EQUOVR ,,b,DCBOPTCD
DCBBCKPT EQUOVR ,,b,DCBOPTCD
DCBOPTQ  EQUOVR ,,b,DCBOPTCD
DCBOPTZ  EQUOVR ,,b,DCBOPTCD
DCBSRCHD EQUOVR ,,b,DCBOPTCD
DCBOPTT  EQUOVR ,,b,DCBOPTCD
DCBOPTJ  EQUOVR ,,b,DCBOPTCD
.*
.* Declare condition indicator bits
DCBCNTOV EQUOVR ,,b,DCBCIND1
DCBSTQCK EQUOVR ,,b,DCBCIND1
DCBSTFLS EQUOVR ,,b,DCBCIND1
DCBCNSRD EQUOVR ,,b,DCBCIND1
DCBCNEVB EQUOVR ,,b,DCBCIND1
DCBCNEVA EQUOVR ,,b,DCBCIND1
DCBCNCI  EQUOVR ,,b,DCBCIND1
DCBCNBRM EQUOVR ,,b,DCBCIND1
DCBCBNDF EQUOVR ,,b,DCBCIND1
DCBCNEXB EQUOVR ,,b,DCBCIND1
.*
DCBCNSTO EQUOVR ,,b,DCBCIND2
DCBCNWR0 EQUOVR ,,b,DCBCIND2
DCBCNCLO EQUOVR ,,b,DCBCIND2
DCBCNIOE EQUOVR ,,b,DCBCIND2
DCBCNBFP EQUOVR ,,b,DCBCIND2
DCBCNCHS EQUOVR ,,b,DCBCIND2
DCBCNFEO EQUOVR ,,b,DCBCIND2
DCBCNQSM EQUOVR ,,b,DCBCIND2
.*
.* Declare bit-fields for flag byte
DCBPOPEN EQUOVR ,,b,DCBQSWS
.*
.* Declare bit-fields for ascii tapes
DCBBLBP  EQUOVR ,,b,DCBUSASI
DCBQADFS EQUOVR ,,b,DCBUSASI
DCBQADF1 EQUOVR ,,b,DCBUSASI
DCBQADF2 EQUOVR ,,b,DCBUSASI
DCBQADF3 EQUOVR ,,b,DCBUSASI
DCB3525A EQUOVR ,,b,DCBUSASI
DCBQSTRU EQUOVR ,,b,DCBUSASI
.*
.* Declare error option bits
DCBERACC EQUOVR ,,b,DCBEROPT
DCBERSKP EQUOVR ,,b,DCBEROPT
DCBERABE EQUOVR ,,b,DCBEROPT
DCBERBAM EQUOVR ,,b,DCBEROPT
.*
         MNOTE *,'Including DCBD mapping macro'
.*
.* DSORG=GS excluded because DCBD then expands incomplete
         DCBD  DSORG=(BS,BX,CX,DA,IS,LR,PO,PS,QS,QX,TQ,TR,TX,XA,XE),   *
               DEVD=(BS,DA,MR,OR,PC,PR,PT,RD,TA,WT)
.*
.* Additional equates for DCBMACF1 - FIRST BYTE OF DCBMACRF
DCBMFECP EQU   DCBMRECP
DCBMFFE  EQU   DCBMRFE
DCBMFGET EQU   DCBMRGET
DCBMFPTQ EQU   DCBMRPTQ
DCBMFAPG EQU   DCBMRAPG
DCBMFRD  EQU   DCBMRRD
DCBMFWRQ EQU   DCBMRWRQ
DCBMFCI  EQU   DCBMRCI
DCBMFMVG EQU   DCBMRMVG
DCBMFRDK EQU   DCBMRRDK
DCBMFLCG EQU   DCBMRLCG
DCBMFRDI EQU   DCBMRRDI
DCBMFABC EQU   DCBMRABC
DCBMFPT1 EQU   DCBMRPT1
DCBMFSBG EQU   DCBMRSBG
DCBMFDBF EQU   DCBMRDBF
DCBMFFXA EQU   DCBPGFXA
DCBMFCRL EQU   DCBMRCRL
DCBMFCHK EQU   DCBMRCHK
DCBMFRDX EQU   DCBMRRDX
DCBMFDMG EQU   DCBMRDMG
DCBMFCK  EQU   DCBMRCK
.*
.* Additional equates for DCBMACF2 - SECOND BYTE OF DCBMACRF
DCBMFSTL EQU   DCBMRSTL
DCBMFPUT EQU   DCBMRPUT
DCBMFGTQ EQU   DCBMRGTQ
DCBMFWRT EQU   DCBMRWRT
DCBMFRDQ EQU   DCBMRRDQ
DCBMFMVP EQU   DCBMRMVP
DCBMFWRK EQU   DCBMRWRK
DCBMF5WD EQU   DCBMR5WD
DCBMFLDM EQU   DCBMRLDM
DCBMFLCP EQU   DCBMRLCP
DCBMFIDW EQU   DCBMRIDW
DCBMF4WD EQU   DCBMR4WD
DCBMFPT2 EQU   DCBMRPT2
DCBMFTMD EQU   DCBMRTMD
DCBMFUIP EQU   DCBMRUIP
DCBMF3WD EQU   DCBMR3WD
DCBMFCTL EQU   DCBMRCTL
DCBMFSTK EQU   DCBMRSTK
DCBMFAWR EQU   DCBMRAWR
DCBMF1WD EQU   DCBMR1WD
DCBMFSWA EQU   DCBMRSWA
DCBMFDMD EQU   DCBMRDMD
DCBMFSTI EQU   DCBMRSTI
.*
         DSOVR *END
         EQUOVR *END
.*
.* For DSORG=GS, the definitions below were copied from DCBD
         ORG   IHADCB
***********************************************************************
*                       GRAPHIC DEVICE INTERFACE
***********************************************************************
         DS    XL12           RESERVED
DCBBRSA  DS    AL2            BUFFER RESTART ADDRESS.  BLANK BEFORE
*                             EXECUTION OF SECOND I/O OPERATION
DCBGTYPE DCL   *CODE,XL1,     TYPE OF BUFFER MANAGEMENT AND ATTENTION  *
               DCBGTEXP,      EXPRESS                       HANDLING   *
               DCBGTBAS,      BASIC                                    *
               DCBGTNBM       DEFAULT - NO BUFFER MANAGEMENT       uL2A
         DS    X              RESERVED
DCBBFRST DS    AL2            BLANK BEFORE EXECUTION OF OPEN ROUTINE.
*                             STARTING ADDRESS FOR BUFFER AFTER
*                             EXECUTION OF OPEN ROUTINE
DCBBFRSZ DS    H              BLANK BEFORE EXECUTION OF OPEN ROUTINE.
*                             SIZE OF BUFFER AFTER EXECUTION OF OPEN
*                             ROUTINE.
***********************************************************************
*                       FOUNDATION EXTENSION
***********************************************************************
         ORG   IHADCB+32      Set to start of foundation extension
DCBPOLST DS    0A             ADDRESS OF AREA WHERE A DCB LIST IS TO BE
*                             CONSTRUCTED FOR POLLING PURPOSES
DCBGNCP  DS    FL1            NUMBER OF I/O INSTRUCTIONS TO BE ISSUED
*                             BEFORE A WAIT MACRO INSTRUCTION
DCBPOLSA DS    AL3            SAME AS DCBPOLST ABOVE
***********************************************************************
*                       FOUNDATION BEFORE OPEN
***********************************************************************
DCBOFGRW EQUOVR ,,b,DCBOFLG
DCBOFGRW EQU   DCBBIT0        IF ZERO, LAST I/O OPERATION WAS GREAD.
*                             IF ONE, LAST I/O OPERATION WAS GWRITE.
***********************************************************************
*                       FOUNDATION AFTER OPEN
***********************************************************************
         ORG   IHADCB+40
         DS    XL8            Previously defined fields
DCBGIOCR DS    0A             ADDRESS OF GRAPHICS I/O CONTROL ROUTINE
         DS    BL1            DCBOFLGS: SAME AS DCBOFLG BEFORE OPEN
DCBGIOCA DS    AL3            ADDRESS OF GRAPHICS I/O CONTROL ROUTINE
DCBLNGGS EQU   *-IHADCB       LENGTH OF DCB FOR GRAPHIC DEVICE     uL1A&
                              INTERFACE                            uL1A
***********************************************************************
*              END of GRAPHIC DEVICE INTERFACE
***********************************************************************
         EQUOVR *END
*
DCB      EQU   IHADCB                  * Name for USINGs
         ORG
DCB_LEN  EQU   *-DCB                   * Length of DCB
*
* Mapping for Block Descriptor Word
BDW      DSECT
BDWBLKLN DS    H                       * Length of block
BDWT00   DS    H                       * Trailing zeros
BDW_LEN  EQU   *-BDW                   * Length of BDW
*
* Mapping for Record Descriptor Word
RDW      DSECT ,                       *
RDWRECLN DS    H                       * Length of RDW + record
RDWT00   DS    H                       * Trailing zeros
*
* RDW for XLRI has a different format
         ORG   RDW                     *
RDWL0    DS    X                       * Leading zeros
RDWXLRLN DS    XL3                     * Length of logical record
*
         ORG   ,                       *
RDW_LEN  EQU   *-RDW                   * Length of RDW
*
* Mapping for Segment Descriptor Word
SDW      DSECT ,                       *
SDWNULL  EQUOVR ,,b,SDWSEGLN           * SDWNULL is bit 0 of length
SDWSEGLN DS    H                       * Length of segment
SDWNULL  EQU   BIT0                    * Null segment indicator
SDWSEGCC DCL   *CODE,B,                * Segment Control Code          *
               SDWSCOMP,               * Complete record               *
               SDWSFRST,               * First segment                 *
               SDWSLAST,               * Last segment                  *
               SDWSMIDL                * Middle segment
         DS    X                       * Always zero
SDW_LEN  EQU   *-SDW                   * Length of SDW
         EQUOVR *END
*
* Mapping for Segment Control Word (ASCII)
SCW      DSECT ,                       *
SCWSPIND DCL   *CODE,C,                * Spanning indicator chararcter *
               (SCWSCOMP,C'0'),        * Complete record               *
               (SCWSFRST,C'1'),        * First segment                 *
               (SCWSLAST,C'2'),        * Last segment                  *
               (SCWSMIDL,C'3')         * Middle segment
SCWSEGLN DS    CL4                     * Length of segment
SCW_LEN  EQU   *-SCW                   * Length of SCW
*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDCBE  0100-20096-20096-0111-00115-00115-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Control Block Extension
.*
&LABEL   MAPDCBE &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDCBE                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDCBE        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DCBE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDCBE).MEND
&BXA_MAC_MAPDCBE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DCBE
&BXA_CB_DCBE SETC 'DCBE'
.*
.* DCBEFLG1 - Flags set by system.
DCBEOPEN EQUOVR ,,b,DCBEFLG1
DCBEMD31 EQUOVR ,,b,DCBEFLG1
.*
.* DCBEFLG2 - Flags set by user.
DCBEBU31 EQUOVR ,,b,DCBEFLG2
DCBENEOD EQUOVR ,,b,DCBEFLG2
DCBENVER EQUOVR ,,b,DCBEFLG2
DCBEGSIZ EQUOVR ,,b,DCBEFLG2
.*
         MNOTE *,'Including IHADCBE mapping macro'
         IHADCBE ,
         EQUOVR *END
*
         ORG
DCBE_LEN EQU   *-DCBE                  * Length of DCBE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDDRCO 0100-20096-20096-0111-00264-00264-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the IOS Dynamic Device Reconfiguration COMmunication
.*                     table
.*
&LABEL   MAPDDRCO &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDDRCO               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDDRCO       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DDRCOM').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDDRCO).MEND
&BXA_MAC_MAPDDRCO SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DDRCOM
&BXA_CB_DDRCOM SETC 'DDRCO'
.*
.* DDRSRC - SOURCE OF DDR REQUEST
DDROPER   EQUOVR ,,b,DDRSRC
DDRSYS    EQUOVR ,,b,DDRSRC
DDRPAGE   EQUOVR ,,b,DDRSRC
.*
.* DDRSTAT - REQUEST STATUS
DDRACTV   EQUOVR ,,b,DDRSTAT
DDRQUE    EQUOVR ,,b,DDRSTAT
DDRHAMA   EQUOVR ,,b,DDRSTAT
DDRRMV    EQUOVR ,,b,DDRSTAT
DDRPRG    EQUOVR ,,b,DDRSTAT
DDRSIRB   EQUOVR ,,b,DDRSTAT
DDRBYPTM  EQUOVR ,,b,DDRSTAT
.*
.* DDRDSTAT - DEVICE TYPE AND FLAGS
DDRBUFL   EQUOVR ,,b,DDRDSTAT
DDRDA     EQUOVR ,,b,DDRDSTAT
DDRMT     EQUOVR ,,b,DDRDSTAT
DDRUR     EQUOVR ,,b,DDRDSTAT
DDRRCYLE  EQUOVR ,,b,DDRDSTAT
DDRTRPOS  EQUOVR ,,b,DDRDSTAT
DDRMTEND  EQUOVR ,,b,DDRDSTAT
.*
.* DDRROWN - REQUEST RESOURCES
DDRRTENQ  EQUOVR ,,b,DDRROWN
DDRRUENQ  EQUOVR ,,b,DDRROWN
DDRRDENQ  EQUOVR ,,b,DDRROWN
DDRRYENQ  EQUOVR ,,b,DDRROWN
DDRDEN    EQUOVR ,,b,DDRROWN
DDRJES3L  EQUOVR ,,b,DDRROWN
DDRFIRST  EQUOVR ,,b,DDRROWN
.*
.* DDRTER1 - TERMINATION REASON CODE
DDRTNF    EQUOVR ,,v,DDRTER1
DDRTEP    EQUOVR ,,v,DDRTER1
DDRTOC    EQUOVR ,,v,DDRTER1
DDRTBR    EQUOVR ,,v,DDRTER1
DDRTCO    EQUOVR ,,v,DDRTER1
DDRTIU    EQUOVR ,,v,DDRTER1
DDRTCE    EQUOVR ,,v,DDRTER1
DDRTID    EQUOVR ,,v,DDRTER1
DDRTCU    EQUOVR ,,v,DDRTER1
DDRTJE    EQUOVR ,,v,DDRTER1
DDRTEXC   EQUOVR ,,v,DDRTER1
DDRTAIP   EQUOVR ,,v,DDRTER1
DDRTREP   EQUOVR ,,v,DDRTER1
DDRTRD    EQUOVR ,,v,DDRTER1
DDRTRR    EQUOVR ,,v,DDRTER1
DDRTLF    EQUOVR ,,v,DDRTER1
DDRTIOA   EQUOVR ,,v,DDRTER1
DDRTMSG   EQUOVR ,,v,DDRTER1
.*
.* DDRINV1 - INVALID REASON CODE
DDRIMP    EQUOVR ,,v,DDRINV1
DDRIUF    EQUOVR ,,v,DDRINV1
DDRINS    EQUOVR ,,v,DDRINV1
DDRIIN    EQUOVR ,,v,DDRINV1
DDRINO    EQUOVR ,,v,DDRINV1
DDRINA    EQUOVR ,,v,DDRINV1
DDRIDT    EQUOVR ,,v,DDRINV1
DDRIJ3    EQUOVR ,,v,DDRINV1
DDRIONL   EQUOVR ,,v,DDRINV1
DDRIDYST  EQUOVR ,,v,DDRINV1
DDRIVOLI  EQUOVR ,,v,DDRINV1
DDRIIOA   EQUOVR ,,v,DDRINV1
DDRIOPD   EQUOVR ,,v,DDRINV1
DDRIPAG   EQUOVR ,,v,DDRINV1
.*
.* DDRINV2 - VALIDATE'S PARM FIELD
DDRVFM    EQUOVR ,,v,DDRINV2
DDRVCM    EQUOVR ,,v,DDRINV2
DDRVUS    EQUOVR ,,v,DDRINV2
.*
.* DDRIOF1 - I/O PARM FLAGS FIELD 1
DDRREAD   EQUOVR ,,v,DDRIOF1
DDRRUN    EQUOVR ,,v,DDRIOF1
DDRRDBK   EQUOVR ,,v,DDRIOF1
DDRXA4    EQUOVR ,,v,DDRIOF1
DDRBSF    EQUOVR ,,v,DDRIOF1
DDRFSF    EQUOVR ,,v,DDRIOF1
DDRNOP    EQUOVR ,,v,DDRIOF1
DDRSNS    EQUOVR ,,v,DDRIOF1
DDRLOAD   EQUOVR ,,v,DDRIOF1
.*
.* DDRIOF2 - I/O PARM FLAGS FIELD 2
DDRWHICH  EQUOVR ,,b,DDRIOF2
DDRITAKE  EQUOVR ,,b,DDRIOF2
DDRILAB   EQUOVR ,,b,DDRIOF2
DDRIMNT   EQUOVR ,,b,DDRIOF2
DDRICNT   EQUOVR ,,b,DDRIOF2
DDRTCNTL  EQUOVR ,,b,DDRIOF2
.*
.* DDRMSGOP - OPERATOR RESPONSE
DDRWTOR   EQUOVR ,,v,DDRMSGOP
DDRYES    EQUOVR ,,v,DDRMSGOP
DDRNO     EQUOVR ,,v,DDRMSGOP
DDRCUA    EQUOVR ,,v,DDRMSGOP
.*
.* DDRMSGCD - MESSAGE NUMBER CODE
DDRM500I  EQUOVR ,,v,DDRMSGCD
DDRM500D  EQUOVR ,,v,DDRMSGCD
DDRM502E  EQUOVR ,,v,DDRMSGCD
DDRM503I  EQUOVR ,,v,DDRMSGCD
DDRM505I  EQUOVR ,,v,DDRMSGCD
DDRM509I  EQUOVR ,,v,DDRMSGCD
DDRM509D  EQUOVR ,,v,DDRMSGCD
DDRM511A  EQUOVR ,,v,DDRMSGCD
DDRM512I  EQUOVR ,,v,DDRMSGCD
DDRM513I  EQUOVR ,,v,DDRMSGCD
DDRM515I  EQUOVR ,,v,DDRMSGCD
DDRM514I  EQUOVR ,,v,DDRMSGCD
DDRM501I  EQUOVR ,,v,DDRMSGCD
DDRM516I  EQUOVR ,,v,DDRMSGCD
DDRM517I  EQUOVR ,,v,DDRMSGCD
DDRM518I  EQUOVR ,,v,DDRMSGCD
DDRM519I  EQUOVR ,,v,DDRMSGCD
.*
.* DDRMSGPC - (0-7) MESSAGE CODES
DDRPNO    EQUOVR ,,v,DDRMSGPC
DDRPFM    EQUOVR ,,v,DDRMSGPC
DDRPTO    EQUOVR ,,v,DDRMSGPC
DDRPVL    EQUOVR ,,v,DDRMSGPC
DDRPLT    EQUOVR ,,v,DDRMSGPC
DDRPSN    EQUOVR ,,v,DDRMSGPC
DDRPTM    EQUOVR ,,v,DDRMSGPC
DDRLIB    EQUOVR ,,v,DDRMSGPC
DDRPIC    EQUOVR ,,v,DDRMSGPC
DDRPDV    EQUOVR ,,v,DDRMSGPC
DDRPRC    EQUOVR ,,v,DDRMSGPC
.*
.* DDRLABEL - TAPE FROM LABEL TYPE
DDRLAL    EQUOVR ,,b,DDRLABEL
DDRLBLP   EQUOVR ,,b,DDRLABEL
DDRLNL    EQUOVR ,,b,DDRLABEL
DDRLNSL   EQUOVR ,,b,DDRLABEL
DDRLSD    EQUOVR ,,b,DDRLABEL
DDRLNOP   EQUOVR ,,b,DDRLABEL
.*
.* DDRREC1 - RECORDER FLAGS
DDRRECON  EQUOVR ,,v,DDRREC1
DDRR91    EQUOVR ,,v,DDRREC1
DDRRBLF   EQUOVR ,,v,DDRREC1
.*
.* DDRREC2 - RECORDER PARM LIST
DDRRFMTO  EQUOVR ,,b,DDRREC2
.*
.* DDRFLAGS - MISC FLAGS
DDRINTER  EQUOVR ,,b,DDRFLAGS
DDRIOA    EQUOVR ,,b,DDRFLAGS
.*
.* DDRFTPT3 - THIRD FOOTPRINT BYTE
DDRDW0IN  EQUOVR ,,b,DDRFTPT3
DDRIOSIN  EQUOVR ,,b,DDRFTPT3
DDRIOSOT  EQUOVR ,,b,DDRFTPT3
DDRJES3C  EQUOVR ,,b,DDRFTPT3
DDRSCHED  EQUOVR ,,b,DDRFTPT3
.*
         MNOTE *,'Including IHADDR mapping macro'
         IHADDR ,                      *
         EQUOVR *END
*
DDRCOM   DSECT ,                       * Return to DDRCOM
         ORG
DDRCOM_LEN EQU *-DDRCOM                * Length of DDRCOM
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDEB   0100-20096-20096-0111-00362-00362-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Extent Block
.*
&LABEL   MAPDEB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDEB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDEB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DEB').EMBED
         AIF   ('&CB' EQ 'DEBACSMD').EMBED
         AIF   ('&CB' EQ 'DEBDASD').EMBED
         AIF   ('&CB' EQ 'DEBSUBNM').EMBED
         AIF   ('&CB' EQ 'DEBXTN').EMBED
         AIF   ('&CB' EQ 'DEB2XTN').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDEB).MEND
&BXA_MAC_MAPDEB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DEB
         GBLC  &BXA_CB_DEBACSMD
         GBLC  &BXA_CB_DEBDASD
         GBLC  &BXA_CB_DEBSUBNM
         GBLC  &BXA_CB_DEBXTN
         GBLC  &BXA_CB_DEB2XTN
&BXA_CB_DEB SETC 'DEB'
&BXA_CB_DEBACSMD SETC 'DEB'
&BXA_CB_DEBDASD SETC 'DEB'
&BXA_CB_DEBSUBNM SETC 'DEB'
&BXA_CB_DEBXTN SETC 'DEB'
&BXA_CB_DEB2XTN SETC 'DEB'
.*
.* DEBEOEAB - FLAG BYTE
DEBEOENP EQUOVR ,,b,DEBEOEAB
.*
.* DEBSIOAB - FLAG BYTE
DEBPGFX  EQUOVR ,,b,DEBSIOAB
DEBSIOX  EQUOVR ,,b,DEBSIOAB
DEBIOVR  EQUOVR ,,b,DEBSIOAB
DEBFIX   EQUOVR ,,b,DEBSIOAB
DEBSIONP EQUOVR ,,b,DEBSIOAB
.*
.* DEBPCIAB - FLAG BYTE
DEBRSV24 EQUOVR ,,b,DEBPCIAB
DEBRSV25 EQUOVR ,,b,DEBPCIAB
DEBRSV26 EQUOVR ,,b,DEBPCIAB
DEBRSV27 EQUOVR ,,b,DEBPCIAB
DEBPCINP EQUOVR ,,b,DEBPCIAB
.*
.* DEBCEAB - FLAG BYTE
DEBESMVR EQUOVR ,,b,DEBCEAB
DEBRSV29 EQUOVR ,,b,DEBCEAB
DEBRSV30 EQUOVR ,,b,DEBCEAB
DEBRSV31 EQUOVR ,,b,DEBCEAB
DEBCENP  EQUOVR ,,b,DEBCEAB
.*
.* DEBXCEAB - FLAG BYTE
DEBRSV32 EQUOVR ,,b,DEBXCEAB
DEBRSV33 EQUOVR ,,b,DEBXCEAB
DEBRSV34 EQUOVR ,,b,DEBXCEAB
DEBRSV35 EQUOVR ,,b,DEBXCEAB
DEBXCENP EQUOVR ,,b,DEBXCEAB
.*
.* DEBAMTYP - ACCESS METHOD TYPE
DEBAMNON EQUOVR ,,v,DEBAMTYP
DEBAMVSM EQUOVR ,,b,DEBAMTYP
DEBAMXCP EQUOVR ,,b,DEBAMTYP
DEBAMTCM EQUOVR ,,b,DEBAMTYP
DEBAMGAM EQUOVR ,,b,DEBAMTYP
DEBAMTAM EQUOVR ,,b,DEBAMTYP
DEBAMBPM EQUOVR ,,b,DEBAMTYP
DEBAMSAM EQUOVR ,,b,DEBAMTYP
DEBAMBDM EQUOVR ,,b,DEBAMTYP
DEBAMISM EQUOVR ,,b,DEBAMTYP
DEBAMSUB EQUOVR ,,b,DEBAMTYP
DEBAMVTM EQUOVR ,,b,DEBAMTYP
DEBAMTAP EQUOVR ,,b,DEBAMTYP
.*
.* DEBAMID - VTAM/TCAM DEB ID FLAG
DEBTAMID EQUOVR ,,v,DEBAMID
DEBVAMID EQUOVR ,,v,DEBAMID
.*
.* DEBOFLGS - DATA SET STATUS FLAGS
DEBDISP  EQUOVR ,,b,DEBOFLGS
DEBDSOLD EQUOVR ,,b,DEBOFLGS
DEBDSMOD EQUOVR ,,b,DEBOFLGS
DEBDSNEW EQUOVR ,,b,DEBOFLGS
DEBEOF   EQUOVR ,,b,DEBOFLGS
DEBRLSE  EQUOVR ,,b,DEBOFLGS
DEBDCB   EQUOVR ,,b,DEBOFLGS
DEBSPLIT EQUOVR ,,b,DEBOFLGS
DEBLABEL EQUOVR ,,b,DEBOFLGS
DEBRERR  EQUOVR ,,b,DEBOFLGS
.*
.* DEBOPATB - FLAGS INDICATING BOTH THE METHOD OF I/O PROCESSING
DEBABEND EQUOVR ,,b,DEBOPATB
DEBZERO  EQUOVR ,,b,DEBOPATB
DEBPOSIT EQUOVR ,,b,DEBOPATB
DEBRERED EQUOVR ,,b,DEBOPATB
DEBLEAVE EQUOVR ,,b,DEBOPATB
DEBACCS  EQUOVR ,,b,DEBOPATB
DEBINPUT EQUOVR ,,v,DEBOPATB
DEBOUTPT EQUOVR ,,b,DEBOPATB
DEBXTEND EQUOVR ,,b,DEBOPATB
DEBINOUT EQUOVR ,,b,DEBOPATB
DEBOUTIN EQUOVR ,,b,DEBOPATB
DEBOTINX EQUOVR ,,b,DEBOPATB
DEBRDBCK EQUOVR ,,b,DEBOPATB
DEBUPDAT EQUOVR ,,b,DEBOPATB
.*
.* DEBFLGS1 - FLAG FIELD
DEBPWCKD EQUOVR ,,b,DEBFLGS1
DEBEOFDF EQUOVR ,,b,DEBFLGS1
DEBRSIOA EQUOVR ,,b,DEBFLGS1
DEBEXCPA EQUOVR ,,b,DEBFLGS1
DEBCINDI EQUOVR ,,b,DEBFLGS1
DEBF1CEV EQUOVR ,,b,DEBFLGS1
DEBAPFIN EQUOVR ,,b,DEBFLGS1
DEBXTNIN EQUOVR ,,b,DEBFLGS1
.*
.* DEBFLGS2 - FLAG FIELD TWO
DEBIOPAV EQUOVR ,,b,DEBFLGS2
.* DEBFGRV1 EQUOVR ,,b,DEBFLGS2        * last seen in OS/390 V2R6
.* DEBFGRV2 EQUOVR ,,b,DEBFLGS2        * last seen in OS/390 V2R6
.* DEBFGRV3 EQUOVR ,,b,DEBFLGS2        * last seen in OS/390 V2R6
DEBVRLS  EQUOVR ,,b,DEBFLGS2
DEBDSCMP EQUOVR ,,b,DEBFLGS2
DEBDSNCP EQUOVR ,,b,DEBFLGS2
DEBFGRV6 EQUOVR ,,b,DEBFLGS2
.* DEBFGRV7 EQUOVR ,,b,DEBFLGS2        * last seen in OS/390 V2R6
.*
.* DEBSDVM - DEVICE MODIFIER.
DEBMTDN4 EQUOVR ,,v,DEBSDVM
DEBMTDN3 EQUOVR ,,v,DEBSDVM
DEBMTDN2 EQUOVR ,,v,DEBSDVM
DEBM7DN0 EQUOVR ,,v,DEBSDVM
DEBM7DN1 EQUOVR ,,v,DEBSDVM
DEBM7DN2 EQUOVR ,,v,DEBSDVM
DEBMSTWI EQUOVR ,,v,DEBSDVM
DEBMTRF0 EQUOVR ,,v,DEBSDVM
DEBMTRF1 EQUOVR ,,v,DEBSDVM
DEBMTWI  EQUOVR ,,v,DEBSDVM
DEBMINHS EQUOVR ,,v,DEBSDVM
DEBMCOMP EQUOVR ,,v,DEBSDVM
DEBCMPAC EQUOVR ,,v,DEBSDVM
DEBM3424 EQUOVR ,,v,DEBSDVM
DEBM9348 EQUOVR ,,v,DEBSDVM
DEBMINHE EQUOVR ,,v,DEBSDVM
DEBM6250 EQUOVR ,,v,DEBSDVM
DEBM1600 EQUOVR ,,v,DEBSDVM
DEBM4TRK EQUOVR ,,v,DEBSDVM
DEBM2TRK EQUOVR ,,v,DEBSDVM
DEBM1TRK EQUOVR ,,v,DEBSDVM
.*
.* DEBEAMFG - FLAG BYTE
DEBMULTI EQUOVR ,,b,DEBEAMFG
DEBDSOPN EQUOVR ,,b,DEBEAMFG
DEBVAMSG EQUOVR ,,b,DEBEAMFG
DEBSECVL EQUOVR ,,b,DEBEAMFG
DEBRV004 EQUOVR ,,b,DEBEAMFG
DEBRV005 EQUOVR ,,b,DEBEAMFG
DEBRV006 EQUOVR ,,b,DEBEAMFG
DEBRV007 EQUOVR ,,b,DEBEAMFG
.*
.* DEBRPSID - ROTATIONAL POSITION SENSING (RPS) DEVICE INDICATORS
DEBRPSP  EQUOVR ,,b,DEBRPSID
DEBRPSI  EQUOVR ,,b,DEBRPSID
DEBRPSO  EQUOVR ,,b,DEBRPSID
DEBRPSAP EQUOVR ,,b,DEBRPSID
DEBRSV09 EQUOVR ,,b,DEBRPSID
DEBRSV10 EQUOVR ,,b,DEBRPSID
DEBRSV11 EQUOVR ,,b,DEBRPSID
DEBRSV12 EQUOVR ,,b,DEBRPSID
.*
.* DEBVOLBT - FIRST BYTE OF DEBVOLSQ
DEBEXFUL EQUOVR ,,b,DEBVOLBT
DEBRSV36 EQUOVR ,,b,DEBVOLBT
DEBRSV37 EQUOVR ,,b,DEBVOLBT
DEBRSV38 EQUOVR ,,b,DEBVOLBT
DEBRSV39 EQUOVR ,,b,DEBVOLBT
DEBRSV40 EQUOVR ,,b,DEBVOLBT
DEBRSV41 EQUOVR ,,b,DEBVOLBT
DEBRSV42 EQUOVR ,,b,DEBVOLBT
.*
.* DEBXFLG1 - FLAG BYTE
DEBXCDCB EQUOVR ,,b,DEBXFLG1
DEBXTSKC EQUOVR ,,b,DEBXFLG1
DEBXDSSI EQUOVR ,,b,DEBXFLG1
DEBXWIND EQUOVR ,,b,DEBXFLG1
DEBXACIS EQUOVR ,,b,DEBXFLG1
DEBXNFLS EQUOVR ,,b,DEBXFLG1
DEBXSYSB EQUOVR ,,b,DEBXFLG1
DEBXRACE EQUOVR ,,b,DEBXFLG1
.*
.* DEBXFLG2 - FLAG BYTE
DEBXRSAP EQUOVR ,,b,DEBXFLG2
DEBBYP   EQUOVR ,,b,DEBXFLG2
DEBCHCMP EQUOVR ,,b,DEBXFLG2
DEBXENQA EQUOVR ,,b,DEBXFLG2
DEBXENQS EQUOVR ,,b,DEBXFLG2
DEBXIMSC EQUOVR ,,b,DEBXFLG2
DEBXCASV EQUOVR ,,b,DEBXFLG2
DEBXMVLF EQUOVR ,,b,DEBXFLG2
.*
.* DEBDEFG1 - FLAG BYTE
DEBNSHED EQUOVR ,,b,DEBDEFG1
DEBXVDEF EQUOVR ,,b,DEBDEFG1
.*
.* DEBGATTR - GLOBAL ATTRIBUTES
DEBECKD  EQUOVR ,,b,DEBGATTR
DEBGAEX1 EQUOVR ,,b,DEBGATTR
DEBGAEX2 EQUOVR ,,b,DEBGATTR
DEBSTRTP EQUOVR ,,b,DEBGATTR
DEBGA345 EQUOVR ,,b,DEBGATTR
DEBGA1   EQUOVR ,,b,DEBGATTR
DEBGA2   EQUOVR ,,b,DEBGATTR
DEBGA3   EQUOVR ,,b,DEBGATTR
DEBNCACH EQUOVR ,,v,DEBGATTR
DEBBCACH EQUOVR ,,b,DEBGATTR
DEBICACH EQUOVR ,,b,DEBGATTR
DEBSCACH EQUOVR ,,b,DEBGATTR
DEBXRFLG EQUOVR ,,b,DEBGATTR
DEBRLC   EQUOVR ,,b,DEBGATTR
DEBNRD   EQUOVR ,,b,DEBGATTR
DEBINHFW EQUOVR ,,b,DEBGATTR
.*
.* DEBGATTX - GLOBAL ATTRIB EXTENDED 2
DEBRMODE EQUOVR ,,v,DEBGATTX
DEBRDATA EQUOVR ,,b,DEBGATTX
DEBSKEY  EQUOVR ,,b,DEBGATTX
DEBDFTR0 EQUOVR ,,b,DEBGATTX
.*
.* DEBXFLG3 - FLAG BYTE
DEBXTRNC EQUOVR ,,b,DEBXFLG3
DEBXNSEG EQUOVR ,,b,DEBXFLG3
DEBXSMSG EQUOVR ,,b,DEBXFLG3
DEBXCAP  EQUOVR ,,b,DEBXFLG3
.*
.* DEBXAMBF - DEFINES THE USE OF DEBXAMB
DEBXABSS EQUOVR ,,b,DEBXAMBF
DEBXARBA EQUOVR ,,b,DEBXAMBF
DEBXAOEF EQUOVR ,,b,DEBXAMBF
.*
.* DEBXAFLG - "ATTRIBUTE EXTENSION" FLAGS
DEBXADS  EQUOVR ,,b,DEBXAFLG
DEBXAINP EQUOVR ,,b,DEBXAFLG
DEBXAOUT EQUOVR ,,b,DEBXAFLG
DEBXAOFO EQUOVR ,,b,DEBXAFLG
.*
.* DEB2XFG1 - FIRST FLAG BYTE
DEB2XOSM EQUOVR ,,b,DEB2XFG1
.*
         MNOTE *,'Including IEZDEB mapping macro'
.*
         IEZDEB LIST=YES               * Do not issue PRINT OFF
         EQUOVR *END
*
DEB      DSECT ,                       * Reset to DEB
         ORG
DEB_LEN  EQU   *-DEB                   * Length of DEB
*
DEBACSMD DSECT ,                       * Reset to DEBACSMD
         ORG
DEBACSMD_LEN EQU *-DEBACSMD            * Length of DEBACSMD
*
DEBDASD  DSECT ,                       * Reset to DEBDASD
         ORG
DEBDASD_LEN EQU *-DEBDASD              * Length of DEBDASD
*
DEBSUBNM DSECT ,                       * Reset to DEBSUBNM
         ORG
DEBSUBNM_LEN EQU *-DEBSUBNM            * Length of DEBSUBNM
*
DEBXTN   DSECT ,                       * Reset to DEBXTN
         ORG
DEBXTN_LEN EQU *-DEBXTN                * Length of DEBXTN
*
DEB2XTN  DSECT ,                       * Reset to DEB2XTN
         ORG
DEB2XTN_LEN EQU *-DEB2XTN              * Length of DEB2XTN
*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDECB  0100-20096-20096-0111-00263-00263-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Event Control Block
.* The DECB must be located below 16M
.*
&LABEL   MAPDECB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDECB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDECB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DECB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDECB).MEND
&BXA_MAC_MAPDECB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DECB
&BXA_CB_DECB SETC 'DECB'
.*
.* DECTYPE1 - TYPE OF LENGTH OPERAND
DECLNS   EQUOVR ,,b,DECTYPE1
DECRSV01 EQUOVR ,,b,DECTYPE1
DECRSV02 EQUOVR ,,b,DECTYPE1
DECRSV03 EQUOVR ,,b,DECTYPE1
DECRSV04 EQUOVR ,,b,DECTYPE1
DECRSV05 EQUOVR ,,b,DECTYPE1
DECRSV06 EQUOVR ,,b,DECTYPE1
DECRSV07 EQUOVR ,,b,DECTYPE1
.*
.* DECTYPE2 - TYPE OF OPERATION
DECRDSF  EQUOVR ,,b,DECTYPE2
DECRDSB  EQUOVR ,,b,DECTYPE2
DECWRSF  EQUOVR ,,b,DECTYPE2
DECWRSD  EQUOVR ,,b,DECTYPE2
DECRSV08 EQUOVR ,,b,DECTYPE2
DECWRSZ  EQUOVR ,,b,DECTYPE2
DECRSV09 EQUOVR ,,b,DECTYPE2
DECWRSFR EQUOVR ,,b,DECTYPE2
.*
.* DECBECBF - FLAG FIELD
DECBWAIT EQUOVR ,,b,DECBECBF
DECBPOST EQUOVR ,,b,DECBECBF
DECRSV11 EQUOVR ,,b,DECBECBF
DECRSV12 EQUOVR ,,b,DECBECBF
DECRSV13 EQUOVR ,,b,DECBECBF
DECRSV14 EQUOVR ,,b,DECBECBF
DECRSV15 EQUOVR ,,b,DECBECBF
DECRSV16 EQUOVR ,,b,DECBECBF
.*
.* DECBTYP1 - OPTION BYTE
DECRSV17 EQUOVR ,,b,DECBTYP1
DECRSV18 EQUOVR ,,b,DECBTYP1
DECRSV19 EQUOVR ,,b,DECBTYP1
DECRSV20 EQUOVR ,,b,DECBTYP1
DECRSV21 EQUOVR ,,b,DECBTYP1
DECRSV22 EQUOVR ,,b,DECBTYP1
DECBLNS  EQUOVR ,,b,DECBTYP1
DECBARS  EQUOVR ,,b,DECBTYP1
.*
.* DECBTYP2 - TYPE OF I/O REQUEST
DECBRDK  EQUOVR ,,b,DECBTYP2
DECRSV23 EQUOVR ,,b,DECBTYP2
DECBRDKU EQUOVR ,,b,DECBTYP2
DECRSV24 EQUOVR ,,b,DECBTYP2
DECBWRK  EQUOVR ,,b,DECBTYP2
DECBWRKN EQUOVR ,,b,DECBTYP2
DECRSV25 EQUOVR ,,b,DECBTYP2
DECRSV26 EQUOVR ,,b,DECBTYP2
.*
.* DECBEXC1 - EXCEPTIONAL CONDITION CODE BYTE 1
DECEXRNF EQUOVR ,,b,DECBEXC1
DECEXRLC EQUOVR ,,b,DECBEXC1
DECEXNSP EQUOVR ,,b,DECBEXC1
DECEXINV EQUOVR ,,b,DECBEXC1
DECEXERR EQUOVR ,,b,DECBEXC1
DECEXUBK EQUOVR ,,b,DECBEXC1
DECEXOFL EQUOVR ,,b,DECBEXC1
DECEXDUP EQUOVR ,,b,DECBEXC1
.*
.* DECBEXC2 - EXCEPTIONAL CONDITION CODE BYTE 2
DECRSV27 EQUOVR ,,b,DECBEXC2
DECRSV28 EQUOVR ,,b,DECBEXC2
DECRSV29 EQUOVR ,,b,DECBEXC2
DECRSV30 EQUOVR ,,b,DECBEXC2
DECRSV31 EQUOVR ,,b,DECBEXC2
DECRSV32 EQUOVR ,,b,DECBEXC2
DECEXASR EQUOVR ,,b,DECBEXC2
DECEXRKU EQUOVR ,,b,DECBEXC2
.*
.* DECCC2 - COMPLETION CODE BYTE 2
DECCCRNF EQUOVR ,,b,DECCC2
DECCCRLC EQUOVR ,,b,DECCC2
DECCCNSP EQUOVR ,,b,DECCC2
DECCCINV EQUOVR ,,b,DECCC2
DECCCERR EQUOVR ,,b,DECCC2
DECCCEOD EQUOVR ,,b,DECCC2
DECCCUER EQUOVR ,,b,DECCC2
DECCCREX EQUOVR ,,b,DECCC2
.*
.* DECCC3 - COMPLETION CODE BYTE 3
DECRSV33 EQUOVR ,,b,DECCC3
DECCCWRI EQUOVR ,,b,DECCC3
DECCCEXS EQUOVR ,,b,DECCC3
DECCCNBK EQUOVR ,,b,DECCC3
DECCCWDI EQUOVR ,,b,DECCC3
DECCCSDK EQUOVR ,,b,DECCC3
DECCCOPT EQUOVR ,,b,DECCC3
DECCCKFF EQUOVR ,,b,DECCC3
.*
.* DECTYPE1 - TYPE OF LENGTH OPERAND
DECVERFY EQUOVR ,,b,DECTYPE1
DECOFLOW EQUOVR ,,b,DECTYPE1
DECEXSRC EQUOVR ,,b,DECTYPE1
DECFDBCK EQUOVR ,,b,DECTYPE1
DECACTAD EQUOVR ,,b,DECTYPE1
DECDYNBF EQUOVR ,,b,DECTYPE1
DECRDEX  EQUOVR ,,b,DECTYPE1
DECRELBA EQUOVR ,,b,DECTYPE1
.*
.* DECTYPE2 - TYPE OF OPERATION
DECKEYS  EQUOVR ,,b,DECTYPE2
DECBKLNS EQUOVR ,,b,DECTYPE2
DECTYPRU EQUOVR ,,b,DECTYPE2
DECTYPR  EQUOVR ,,b,DECTYPE2
DECOPRD  EQUOVR ,,b,DECTYPE2
DECSRKEY EQUOVR ,,b,DECTYPE2
DECWRADD EQUOVR ,,b,DECTYPE2
DECRSV35 EQUOVR ,,b,DECTYPE2
.*
.* DECTYPE1 - TYPE OF LENGTH OPERAND
DECRDAPL EQUOVR ,,b,DECTYPE1
DECRSV43 EQUOVR ,,b,DECTYPE1
DECRSV44 EQUOVR ,,b,DECTYPE1
DECRSV45 EQUOVR ,,b,DECTYPE1
DECRSV46 EQUOVR ,,b,DECTYPE1
DECSTRME EQUOVR ,,b,DECTYPE1
DECSAREA EQUOVR ,,b,DECTYPE1
DECSLNTH EQUOVR ,,b,DECTYPE1
.*
.* DECONLTT - FLAG BYTE FOR BSC AND 2760 ONLINE TEST
DECONLTS EQUOVR ,,b,DECONLTT
DECRCVMS EQUOVR ,,b,DECONLTT
DECRSV47 EQUOVR ,,b,DECONLTT
DECRSV48 EQUOVR ,,b,DECONLTT
DECRSV49 EQUOVR ,,b,DECONLTT
DECRSV50 EQUOVR ,,b,DECONLTT
DECRSV51 EQUOVR ,,b,DECONLTT
DECRSV52 EQUOVR ,,b,DECONLTT
.*
.* DECFLAGS - OPERATION STATUS
DECWACK  EQUOVR ,,b,DECFLAGS
DECERRMS EQUOVR ,,b,DECFLAGS
DECDIFAC EQUOVR ,,b,DECFLAGS
DECALTAC EQUOVR ,,b,DECFLAGS
DECBADID EQUOVR ,,b,DECFLAGS
DECNOBUF EQUOVR ,,b,DECFLAGS
DECNEGRP EQUOVR ,,b,DECFLAGS
DECREVRS EQUOVR ,,b,DECFLAGS
DECSSMSG EQUOVR ,,b,DECFLAGS
DECSTXNQ EQUOVR ,,b,DECFLAGS
.*
.* DECERRST - I/O ERROR STATUS FLAGS
DECSIO3  EQUOVR ,,b,DECERRST
DECUNDEF EQUOVR ,,b,DECERRST
DECERPER EQUOVR ,,b,DECERRST
DECDIAGN EQUOVR ,,b,DECERRST
DECDSABL EQUOVR ,,b,DECERRST
DECRSV53 EQUOVR ,,b,DECERRST
DECRSV54 EQUOVR ,,b,DECERRST
DECRSV55 EQUOVR ,,b,DECERRST
.*
         MNOTE *,'Including IHADECB mapping macro'
         IHADECB ,
         EQUOVR *END
*
         ORG   ,                       *
DECB_LEN EQU   *-DECB                  * Length of DECB
DECB_BSAM_LEN  EQU L'DECBLFMT+DECBLFMT-DECB * Length of DECB for BSAM
DECB_BISAM_LEN EQU L'DECBEXC2+DECBEXC2-DECB * Length of DECB for BISAM
DECB_BDAM_LEN  EQU L'DECNAA+DECNAA-DECB     * Length of DECB for BDAM
DECB_QTAM_LEN  EQU L'DECPOLPA+DECPOLPA-DECB * Length of DECB for QTAM
DECB_BTAM_LEN  EQU L'DECWAREA+DECWAREA-DECB * Length of DECB for BTAM
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDES   0100-20096-20096-0111-00383-00383-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Facilities Area
.*
&LABEL   MAPDES &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDES                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDES         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DESB').EMBED
         AIF   ('&CB' EQ 'DESD').EMBED
         AIF   ('&CB' EQ 'DESL').EMBED
         AIF   ('&CB' EQ 'DESN').EMBED
         AIF   ('&CB' EQ 'DESP').EMBED
         AIF   ('&CB' EQ 'DESR').EMBED
         AIF   ('&CB' EQ 'DESRCS').EMBED
         AIF   ('&CB' EQ 'DESX').EMBED
         AIF   ('&CB' EQ 'DST').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDES).MEND
&BXA_MAC_MAPDES SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DESB
         GBLC  &BXA_CB_DESD
         GBLC  &BXA_CB_DESL
         GBLC  &BXA_CB_DESN
         GBLC  &BXA_CB_DESP
         GBLC  &BXA_CB_DESR
         GBLC  &BXA_CB_DESRCS
         GBLC  &BXA_CB_DESX
         GBLC  &BXA_CB_DST
&BXA_CB_DESB   SETC 'DES'
&BXA_CB_DESD   SETC 'DES'
&BXA_CB_DESL   SETC 'DES'
&BXA_CB_DESN   SETC 'DES'
&BXA_CB_DESP   SETC 'DES'
&BXA_CB_DESR   SETC 'DES'
&BXA_CB_DESRCS SETC 'DES'
&BXA_CB_DESX   SETC 'DES'
&BXA_CB_DST    SETC 'DES'
.*
.* DESP_LEV - control block level
DESP_LEV_IV            EQUOVR ,,v,DESP_LEV
.*
.* DESP_FUNC - function type
DESP_FUNC_UPDATE       EQUOVR ,,v,DESP_FUNC
DESP_FUNC_RENAME       EQUOVR ,,v,DESP_FUNC
DESP_FUNC_DELETE       EQUOVR ,,v,DESP_FUNC
DESP_FUNC_EXIT         EQUOVR ,,v,DESP_FUNC
DESP_FUNC_GET_NAMES    EQUOVR ,,v,DESP_FUNC
DESP_FUNC_PUT          EQUOVR ,,v,DESP_FUNC
DESP_FUNC_RELEASE      EQUOVR ,,v,DESP_FUNC
DESP_FUNC_GET_ALL      EQUOVR ,,v,DESP_FUNC
DESP_FUNC_GET          EQUOVR ,,v,DESP_FUNC
DESP_FUNC_OMITTED      EQUOVR ,,v,DESP_FUNC
.*
.* DESP_FLAGS - DESP FLAG1
DESP_BYPASS_LLA        EQUOVR ,,b,DESP_FLAGS
DESP_CONCAT_FLG        EQUOVR ,,b,DESP_FLAGS
DESP_SUBPOOL_FLG       EQUOVR ,,b,DESP_FLAGS
DESP_C370LIB           EQUOVR ,,b,DESP_FLAGS
DESP_CONCAT_ALL        EQUOVR ,,b,DESP_FLAGS
DESP_HIDE              EQUOVR ,,b,DESP_FLAGS
DESP_SYSTEM_DCB        EQUOVR ,,b,DESP_FLAGS
.*
.* DESP_EXIT_SCOPE - EXIT SCOPE
DESP_EXIT_SCOPE_TASK   EQUOVR ,,v,DESP_EXIT_SCOPE
DESP_EXIT_SCOPE_GLOBAL EQUOVR ,,v,DESP_EXIT_SCOPE
.*
.* DESP_LIBTYPE - function subtype (DCB, DEB)
DESP_LIBTYPE_DCB       EQUOVR ,,v,DESP_LIBTYPE
DESP_LIBTYPE_DEB       EQUOVR ,,v,DESP_LIBTYPE
DESP_LIBTYPE_OMITTED   EQUOVR ,,v,DESP_LIBTYPE
.*
.* DESP_GETTYPE - function subtype
DESP_GETTYPE_SMDE      EQUOVR ,,v,DESP_GETTYPE
DESP_GETTYPE_PDSDE     EQUOVR ,,v,DESP_GETTYPE
DESP_GETTYPE_NAME_LIST EQUOVR ,,v,DESP_GETTYPE
DESP_GETTYPE_OMITTED   EQUOVR ,,v,DESP_GETTYPE
.*
.* DESP_RELTYPE - function subtype
DESP_RELTYPE_DE_LIST   EQUOVR ,,v,DESP_RELTYPE
DESP_RELTYPE_CONN_ID   EQUOVR ,,v,DESP_RELTYPE
DESP_RELTYPE_OMITTED   EQUOVR ,,v,DESP_RELTYPE
.*
.* DESP_EXIT_OPTION - EXIT option
DESP_EXIT_OPTION_QUERY      EQUOVR ,,v,DESP_EXIT_OPTION
DESP_EXIT_OPTION_DELETE     EQUOVR ,,v,DESP_EXIT_OPTION
DESP_EXIT_OPTION_REPLACE    EQUOVR ,,v,DESP_EXIT_OPTION
DESP_EXIT_OPTION_NOREPLACE  EQUOVR ,,v,DESP_EXIT_OPTION
.*
.* DESP_OPTION - PUT REPLACE option
DESP_OPTION_REPLACE    EQUOVR ,,v,DESP_OPTION
DESP_OPTION_NOREPLACE  EQUOVR ,,v,DESP_OPTION
.*
.* DESP_CONN_INTENT - connect intent
DESP_CONN_INTENT_INPUT EQUOVR ,,v,DESP_CONN_INTENT
DESP_CONN_INTENT_EXEC  EQUOVR ,,v,DESP_CONN_INTENT
DESP_CONN_INTENT_HOLD  EQUOVR ,,v,DESP_CONN_INTENT
DESP_CONN_INTENT_NONE  EQUOVR ,,v,DESP_CONN_INTENT
.*
.* DESL_FLAGS - flags
DESL_MODULE_BUFFERED_LLA EQUOVR ,,b,DESL_FLAGS
.*
.* DESL_CODE - result code
DESL_CODE_NEWNAME_EXISTS EQUOVR ,,v,DESL_CODE
DESL_CODE_ERROR        EQUOVR ,,v,DESL_CODE
DESL_CODE_NOTFOUND     EQUOVR ,,v,DESL_CODE
DESL_CODE_SUCC         EQUOVR ,,v,DESL_CODE
.*
.* DESB_LEV - CONTROL BLOCK LEVEL
DESB_LEV_IV            EQUOVR ,,v,DESB_LEV
.*
.* DESD_FLAG - flags
DESD_FLAG_ALIAS        EQUOVR ,,b,DESD_FLAG
.*
.* DESD_CODE - processing code
DESD_CODE_ERROR        EQUOVR ,,v,DESD_CODE
DESD_CODE_NOGO         EQUOVR ,,v,DESD_CODE
DESD_CODE_SUCC         EQUOVR ,,v,DESD_CODE
.*
.* DESX_LEV - control block level
DESX_LEV_IV            EQUOVR ,,v,DESX_LEV
.*
.* DESX_FLAGS - Flags
DESX_BLDL_BIT          EQUOVR ,,b,DESX_FLAGS
DESX_PRE_BIT           EQUOVR ,,b,DESX_FLAGS
DESX_POST_BIT          EQUOVR ,,b,DESX_FLAGS
.*
.* DST_LEV - control block level
DST_LEV_IV             EQUOVR ,,v,DST_LEV
.*
.* DST_FLAGS - DST flags
DST_FLAGS_PROP         EQUOVR ,,b,DST_FLAGS
.*
.* DESRC - return code
DESRC_SUCC             EQUOVR ,,v,DESRC
DESRC_INFO             EQUOVR ,,v,DESRC
DESRC_WARN             EQUOVR ,,v,DESRC
DESRC_PARM             EQUOVR ,,v,DESRC
DESRC_CALR             EQUOVR ,,v,DESRC
DESRC_ENVR             EQUOVR ,,v,DESRC
DESRC_IOER             EQUOVR ,,v,DESRC
DESRC_MEDE             EQUOVR ,,v,DESRC
DESRC_DSLE             EQUOVR ,,v,DESRC
DESRC_SEVE             EQUOVR ,,v,DESRC
.*
.* DESRS - reason code
DESRS_MEMBER_PEND_DELETE     EQUOVR ,,v,DESRS
DESRS_LONG_NAME_NOT_ORIGINAL EQUOVR ,,v,DESRS
DESRS_NEW_NAME_EXISTS        EQUOVR ,,v,DESRS
DESRS_BOTH_NAMES_BIG         EQUOVR ,,v,DESRS
DESRS_BOTH_NAMES_SAME        EQUOVR ,,v,DESRS
DESRS_INVAL_PREVDST_HEADER   EQUOVR ,,v,DESRS
DESRS_PREV_DSTPTR_PTR_ZERO   EQUOVR ,,v,DESRS
DESRS_DST_COMP_SWAP_FAILED   EQUOVR ,,v,DESRS
DESRS_EXIT_SCOPE_INVALID     EQUOVR ,,v,DESRS
DESRS_EXIT_OPTION_INVALID    EQUOVR ,,v,DESRS
DESRS_EXIT_PREV_DSTPTR_ZERO  EQUOVR ,,v,DESRS
DESRS_INVAL_DST_HEADER       EQUOVR ,,v,DESRS
DESRS_EXIT_DST_PTR_ZERO      EQUOVR ,,v,DESRS
DESRS_DST_ALREADY_EXISTS     EQUOVR ,,v,DESRS
DESRS_EXIT_ERROR             EQUOVR ,,v,DESRS
DESRS_AUTH_ERROR             EQUOVR ,,v,DESRS
DESRS_PACBLOC_ERROR          EQUOVR ,,v,DESRS
DESRS_UNKNOWN                EQUOVR ,,v,DESRS
DESRS_GETMAIN_ERROR          EQUOVR ,,v,DESRS
DESRS_CANT_CHANGE_RECOVERY   EQUOVR ,,v,DESRS
DESRS_IGWCDFNC_ERROR         EQUOVR ,,v,DESRS
DESRS_NO_PNAR_FOR_NAME       EQUOVR ,,v,DESRS
DESRS_UNEXPECTED_SAR_CODE    EQUOVR ,,v,DESRS
DESRS_TWO_MLT_NAMES          EQUOVR ,,v,DESRS
DESRS_PDSDE_MERGE_ERR        EQUOVR ,,v,DESRS
DESRS_UNKNOWN_EXIT_ERROR     EQUOVR ,,v,DESRS
DESRS_ECB_POSTED_ERROR       EQUOVR ,,v,DESRS
DESRS_CONNID_OVERFLOW        EQUOVR ,,v,DESRS
DESRS_NAME_IS_PRIMARY_NAME   EQUOVR ,,v,DESRS
DESRS_CLOCK_ERROR            EQUOVR ,,v,DESRS
DESRS_DATA_LENGTH_ERROR      EQUOVR ,,v,DESRS
DESRS_ANCHOR_IN_USE          EQUOVR ,,v,DESRS
DESRS_ANCHOR_FREE            EQUOVR ,,v,DESRS
DESRS_ADD_STACK_FAILED       EQUOVR ,,v,DESRS
DESRS_INVALID_CONN_INTENT    EQUOVR ,,v,DESRS
DESRS_NAME_LIST_@_INVALID    EQUOVR ,,v,DESRS
DESRS_NAME_LIST_COUNT_INVALID EQUOVR ,,v,DESRS
DESRS_CONNID_INVALID         EQUOVR ,,v,DESRS
DESRS_INVALID_GETTYPE        EQUOVR ,,v,DESRS
DESRS_INVALID_AREA_PTR       EQUOVR ,,v,DESRS
DESRS_INVALID_AREAPTR_PTR    EQUOVR ,,v,DESRS
DESRS_AREA_LENGTH_TOO_SMALL  EQUOVR ,,v,DESRS
DESRS_INVALID_ENTRY_GAP      EQUOVR ,,v,DESRS
DESRS_INVALID_DE_LIST_PTR    EQUOVR ,,v,DESRS
DESRS_INVALID_DE_LIST_CNT    EQUOVR ,,v,DESRS
DESRS_INVALID_CONN_ID_PTR    EQUOVR ,,v,DESRS
DESRS_INVALID_RELEASE_TYPE   EQUOVR ,,v,DESRS
DESRS_INVALID_PUT_OPTION     EQUOVR ,,v,DESRS
DESRS_INVALID_MEM_DATA_PTR   EQUOVR ,,v,DESRS
DESRS_INVALID_MEM_DATA_CNT   EQUOVR ,,v,DESRS
DESRS_INVALID_NAME_PTR       EQUOVR ,,v,DESRS
DESRS_INVALID_NAME_LENGTH    EQUOVR ,,v,DESRS
DESRS_UNSUPPORTED_FUNC       EQUOVR ,,v,DESRS
DESRS_DEB_REQUIRES_AUTH      EQUOVR ,,v,DESRS
DESRS_INVALID_DCB_PTR        EQUOVR ,,v,DESRS
DESRS_DCB_NOT_OPEN           EQUOVR ,,v,DESRS
DESRS_COMP_NAME_BAD          EQUOVR ,,v,DESRS
DESRS_DCB_NOT_OPEN_OUTPUT    EQUOVR ,,v,DESRS
DESRS_INVALID_DEB_PTR        EQUOVR ,,v,DESRS
DESRS_DEBCHK_FAILED          EQUOVR ,,v,DESRS
DESRS_INVALID_CONCAT         EQUOVR ,,v,DESRS
DESRS_PDSDE_PTR_INVALID      EQUOVR ,,v,DESRS
DESRS_INVALID_FT             EQUOVR ,,v,DESRS
DESRS_LIB_NOT_BUFFERED       EQUOVR ,,v,DESRS
DESRS_INVALID_DFNC_FUNC      EQUOVR ,,v,DESRS
DESRS_DISCONNECT_FILE_FAILED EQUOVR ,,v,DESRS
DESRS_INSUF_BUFFER_SIZE      EQUOVR ,,v,DESRS
DESRS_PDS_NOT_SUPPORTED      EQUOVR ,,v,DESRS
DESRS_INVALID_CT             EQUOVR ,,v,DESRS
DESRS_INVALID_MLT            EQUOVR ,,v,DESRS
DESRS_MORE_THAN_1_PRIMARY    EQUOVR ,,v,DESRS
DESRS_INVALID_PARM_LIST_HEADER EQUOVR ,,v,DESRS
DESRS_INVALID_NAME_PREFIX    EQUOVR ,,v,DESRS
DESRS_NO_PRIMARY_NAME        EQUOVR ,,v,DESRS
DESRS_NAME_ALREADY_EXISTS    EQUOVR ,,v,DESRS
DESRS_LONG_NAME_AND_LLA      EQUOVR ,,v,DESRS
DESRS_PROGRAM_OBJECT_ONLY    EQUOVR ,,v,DESRS
DESRS_FREEMAIN_ERROR         EQUOVR ,,v,DESRS
DESRS_CONVERT_ERROR          EQUOVR ,,v,DESRS
DESRS_UNEXPECTED_JCDM_ERROR  EQUOVR ,,v,DESRS
DESRS_PDSDE_CONVRT_ERR       EQUOVR ,,v,DESRS
DESRS_SETLOCK_ERR            EQUOVR ,,v,DESRS
DESRS_EXTRACT_ERROR          EQUOVR ,,v,DESRS
DESRS_SET_ERROR              EQUOVR ,,v,DESRS
DESRS_ANCHOR_CREATE_FAILED   EQUOVR ,,v,DESRS
DESRS_ELEMENT_CREATE_FAILED  EQUOVR ,,v,DESRS
DESRS_PMAR_MERGE_ERR         EQUOVR ,,v,DESRS
DESRS_IEWLCNVT_ERROR         EQUOVR ,,v,DESRS
DESRS_NAME_NOT_DEFINED       EQUOVR ,,v,DESRS
DESRS_CHANGED_PMAR_LENGTH    EQUOVR ,,v,DESRS
DESRS_SMDE_TOKEN_BAD         EQUOVR ,,v,DESRS
DESRS_PRI_NM_THIS_FILE       EQUOVR ,,v,DESRS
DESRS_CANT_GET_FILELOCK      EQUOVR ,,v,DESRS
DESRS_CONNECTION_NOT_FOUND   EQUOVR ,,v,DESRS
DESRS_DESL_SMDE_PTR          EQUOVR ,,v,DESRS
DESRS_RELTYPE_INVALID        EQUOVR ,,v,DESRS
DESRS_BAD_PMAR_FIELD_UPDATED EQUOVR ,,v,DESRS
DESRS_IEWBXILO_ERROR         EQUOVR ,,v,DESRS
DESRS_MULTIPLE_ERRORS        EQUOVR ,,v,DESRS
DESRS_AUTH_SUBPOOL           EQUOVR ,,v,DESRS
DESRS_DIRECTORY_EMPTY        EQUOVR ,,v,DESRS
DESRS_CONNECT_AUTH           EQUOVR ,,v,DESRS
DESRS_C370LIB_PDSDE_ME       EQUOVR ,,v,DESRS
DESRS_BAD_BLKSIZE            EQUOVR ,,v,DESRS
DESRS_BAD_TXT_CARD           EQUOVR ,,v,DESRS
DESRS_BAD_C370LIB_DIR        EQUOVR ,,v,DESRS
DESRS_DCB_NOT_OPEN_PO        EQUOVR ,,v,DESRS
DESRS_AREA_AREAPTR_ME        EQUOVR ,,v,DESRS
DESRS_SMDE_PTR_INVALID       EQUOVR ,,v,DESRS
DESRS_C370LIB_SMDE_ME        EQUOVR ,,v,DESRS
DESRS_NOTFOUND               EQUOVR ,,v,DESRS
DESRS_MODULE_BUFFERED_LLA    EQUOVR ,,v,DESRS
DESRS_SUCC                   EQUOVR ,,v,DESRS
.*
         MNOTE *,'Including IGWDES mapping macro'
         IGWDES ,                      *
         EQUOVR *END                   *
*
DESP     DSECT ,                       * Return to DESP
         ORG   ,                       *
DESP_SIZE EQU  *-DESP                  * Length of DESP
*
DESL     DSECT ,                       * Return to DESL
         ORG   ,                       *
DESL_SIZE EQU  *-DESL                  * Length of DESL
*
DESB     DSECT ,                       * Return to DESB
         ORG   ,                       *
DESB_SIZE EQU  *-DESB                  * Length of DESB
*
DESN     DSECT ,                       * Return to DESN
         ORG   ,                       *
DESN_SIZE EQU  *-DESN                  * Length of DESN
*
DESD     DSECT ,                       * Return to DESD
         ORG   ,                       *
DESD_SIZE EQU  *-DESD                  * Length of DESD
*
DESX     DSECT ,                       * Return to DESX
         ORG   ,                       *
DESX_SIZE EQU  *-DESX                  * Length of DESX
*
DST      DSECT ,                       * Return to DST
         ORG   ,                       *
DST_SIZE EQU   *-DST                   * Length of DST
*
DESRCS   DSECT ,                       * Return to DESRCS
         ORG   ,                       *
DESRCS_SIZE EQU *-DESRCS               * Length of DESRCS
*
DESR     DSECT ,                       * Return to DESR
         ORG   ,                       *
DESR_SIZE EQU  *-DESR                  * Length of DESR
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDFA   0100-20096-20096-0111-00164-00164-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Facilities Area
.*
&LABEL   MAPDFA &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDFA                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDFA         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DFA').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDFA).MEND
&BXA_MAC_MAPDFA SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DFA
&BXA_CB_DFA SETC 'DFA'
.*
.* DFAFEAT1 - FEATURES BYTE 1
DFAXA    EQUOVR ,,b,DFAFEAT1
DFALSR   EQUOVR ,,b,DFAFEAT1
DFAEOS   EQUOVR ,,b,DFAFEAT1
DFAXRF   EQUOVR ,,b,DFAFEAT1
DFAEXPCI EQUOVR ,,b,DFAFEAT1
DFAEOSIC EQUOVR ,,b,DFAFEAT1
DFASMS   EQUOVR ,,b,DFAFEAT1
DFAPDSE  EQUOVR ,,b,DFAFEAT1
.*
.* DFAFEAT2 - FEATURES BYTE 2
DFADLS   EQUOVR ,,b,DFAFEAT2
DFAPML   EQUOVR ,,b,DFAFEAT2
DFAFMS   EQUOVR ,,b,DFAFEAT2
DFACMPAC EQUOVR ,,b,DFAFEAT2
DFABPBLD EQUOVR ,,b,DFAFEAT2
DFASSF   EQUOVR ,,b,DFAFEAT2
DFAMMEXT EQUOVR ,,b,DFAFEAT2
DFAINDEF EQUOVR ,,b,DFAFEAT2
.*
.* DFAFEAT3 - FEATURES BYTE 3
DFAVOLSN EQUOVR ,,b,DFAFEAT3
DFASAMEX EQUOVR ,,b,DFAFEAT3
DFASMSEX EQUOVR ,,b,DFAFEAT3
DFAKSDEX EQUOVR ,,b,DFAFEAT3
DFACMPCT EQUOVR ,,b,DFAFEAT3
DFARLSJ3 EQUOVR ,,b,DFAFEAT3
DFARECAL EQUOVR ,,b,DFAFEAT3
DFADEEXT EQUOVR ,,b,DFAFEAT3
DFADLL   EQUOVR ,,b,DFAFEAT3
.*
.* DFAFEAT4 - FEATURES BYTE 4
DFAFDAT  EQUOVR ,,b,DFAFEAT4
DFANSRV  EQUOVR ,,b,DFAFEAT4
DFADYNL  EQUOVR ,,b,DFAFEAT4
DFACIR2  EQUOVR ,,b,DFAFEAT4
DFARTLS  EQUOVR ,,b,DFAFEAT4
DFADYLPA EQUOVR ,,b,DFAFEAT4
DFAFORK  EQUOVR ,,b,DFAFEAT4
DFASNBK  EQUOVR ,,b,DFAFEAT4
DFASNAP  EQUOVR ,,b,DFAFEAT4
.*
.* DFALPKG - LICENSED PACKAGE BYTE
.* DFAHSM   EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6
.* DFADSS   EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6
.* DFARMM   EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6
.* DFAOPT   EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6
.* DFADFP0  EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6
.* DFAADSM  EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6
.* DFASORT  EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6
.*
.* DFALPKG2 - 2ND LICENSED PACKAGE BYTE
.* DFANFS   EQUOVR ,,b,DFALPKG2        * Last seen in OS/390 V2R6
.*
.* DFAPROD - PRODUCT BYTE
DFADFP   EQUOVR ,,v,DFAPROD
DFADFSMS EQUOVR ,,v,DFAPROD
.*
         MNOTE *,'Including IHADFA mapping macro'
         IHADFA ,                      *
         EQUOVR *END
*
DFA      DSECT ,                       * Return to DFA
         ORG
DFA_LEN  EQU   *-DFA                   * Length of DFA
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDOTU  0100-20096-20096-0111-00198-00198-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro contains the Dynamic Output Text Unit Mappings
.*
&LABEL   MAPDOTU &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDOTU                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDOTU        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DOCNTFLD').EMBED
         AIF   ('&CB' EQ 'DOCNTLST').EMBED
         AIF   ('&CB' EQ 'DOCNUNIT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDOTU).MEND
&BXA_MAC_MAPDOTU SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DOCNTFLD
         GBLC  &BXA_CB_DOCNTLST
         GBLC  &BXA_CB_DOCNUNIT
&BXA_CB_DOCNTFLD SETC 'DOTU'
&BXA_CB_DOCNTLST SETC 'DOTU'
&BXA_CB_DOCNUNIT SETC 'DOTU'
.*
.* DOCNTPTR - Text unit pointer
DOCNTLT   EQUOVR ,,b,DOCNTPTR
.*
         MNOTE *,'Including IEFDOTUM mapping macro'
         IEFDOTUM ,                    *
         EQUOVR *END
.*
.* DOCNTKEY - Key
DOADDRES EQUOVR ,,b,DOCNTKEY
DOBUILD  EQUOVR ,,b,DOCNTKEY
DOBURST  EQUOVR ,,b,DOCNTKEY
DOCHARS  EQUOVR ,,b,DOCNTKEY
DOCKPTLI EQUOVR ,,b,DOCNTKEY
DOCKPTPA EQUOVR ,,b,DOCNTKEY
DOCKPTSE EQUOVR ,,b,DOCNTKEY
DOCLASS  EQUOVR ,,b,DOCNTKEY
DOCOLORM EQUOVR ,,b,DOCNTKEY
DOCOMPAC EQUOVR ,,b,DOCNTKEY
DOCOMSET EQUOVR ,,b,DOCNTKEY
DOCONTRO EQUOVR ,,b,DOCNTKEY
DOCOPIE9 EQUOVR ,,b,DOCNTKEY
DOCOPIEA EQUOVR ,,b,DOCNTKEY
DODATACK EQUOVR ,,b,DOCNTKEY
DODEFAUL EQUOVR ,,b,DOCNTKEY
DODEPT   EQUOVR ,,b,DOCNTKEY
DODEST   EQUOVR ,,b,DOCNTKEY
DODPAGEL EQUOVR ,,b,DOCNTKEY
DODUPLEX EQUOVR ,,b,DOCNTKEY
DOFCB    EQUOVR ,,b,DOCNTKEY
DOFLASE  EQUOVR ,,b,DOCNTKEY
DOFLASF  EQUOVR ,,b,DOCNTKEY
DOFORMD  EQUOVR ,,b,DOCNTKEY
DOFORMLN EQUOVR ,,b,DOCNTKEY
DOFORMS  EQUOVR ,,b,DOCNTKEY
DOFSSDAT EQUOVR ,,b,DOCNTKEY
DOGROUPI EQUOVR ,,b,DOCNTKEY
DOINDEX  EQUOVR ,,b,DOCNTKEY
DOINTRAY EQUOVR ,,b,DOCNTKEY
DOLINDEX EQUOVR ,,b,DOCNTKEY
DOLINECT EQUOVR ,,b,DOCNTKEY
DOMODIF6 EQUOVR ,,b,DOCNTKEY
DOMODIF7 EQUOVR ,,b,DOCNTKEY
DONAME   EQUOVR ,,b,DOCNTKEY
DONOTIFY EQUOVR ,,b,DOCNTKEY
DOXOFSTB EQUOVR ,,b,DOCNTKEY
DOXOFSTF EQUOVR ,,b,DOCNTKEY
DOYOFSTB EQUOVR ,,b,DOCNTKEY
DOYOFSTF EQUOVR ,,b,DOCNTKEY
DOOUTBIN EQUOVR ,,b,DOCNTKEY
DOOUTDB  EQUOVR ,,b,DOCNTKEY
DOOUTDC  EQUOVR ,,b,DOCNTKEY
DOOVFL   EQUOVR ,,b,DOCNTKEY
DOOVRLYB EQUOVR ,,b,DOCNTKEY
DOOVRLYF EQUOVR ,,b,DOCNTKEY
DOPAGEDE EQUOVR ,,b,DOCNTKEY
DOPIMSG  EQUOVR ,,b,DOCNTKEY
DOPORTNO EQUOVR ,,b,DOCNTKEY
DOPRMODE EQUOVR ,,b,DOCNTKEY
DOPROPTN EQUOVR ,,b,DOCNTKEY
DOPRTERR EQUOVR ,,b,DOCNTKEY
DOPRTQUE EQUOVR ,,b,DOCNTKEY
DOPRTY   EQUOVR ,,b,DOCNTKEY
DORESFMT EQUOVR ,,b,DOCNTKEY
DORETANF EQUOVR ,,b,DOCNTKEY
DORETANS EQUOVR ,,b,DOCNTKEY
DORETRYT EQUOVR ,,b,DOCNTKEY
DORETRYL EQUOVR ,,b,DOCNTKEY
DOROOM   EQUOVR ,,b,DOCNTKEY
DOSYSARE EQUOVR ,,b,DOCNTKEY
DOTHRESH EQUOVR ,,b,DOCNTKEY
DOTITLE  EQUOVR ,,b,DOCNTKEY
DOTRC    EQUOVR ,,b,DOCNTKEY
DOUCS    EQUOVR ,,b,DOCNTKEY
DOUSERDA EQUOVR ,,b,DOCNTKEY
DOUSERLI EQUOVR ,,b,DOCNTKEY
DOWRITER EQUOVR ,,b,DOCNTKEY
.*
DOCNUNIT DSECT ,                       * Resume text unit mapping
         MNOTE *,'Including IEFDOKEY mapping macro'
         IEFDOKEY ,                    *
         EQUOVR *END
.*
DOCNTFLD DSECT ,                       * Resume DOCNTFLD DSECT
         ORG
DOCNTFLD_LEN EQU *-DOCNTFLD            * Length of DOCNTFLD
.*
DOCNTLST DSECT ,                       * Resume DOCNTLST DSECT
         ORG
DOCNTLST_LEN EQU *-DOCNTLST            * Length of DOCNTLST
.*
DOCNUNIT DSECT ,                       * Resume DOCNUNIT DSECT
         ORG
DOCNUNIT_LEN EQU *-DOCNUNIT            * Length of DOCNUNIT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDSAB  0100-20096-20096-0111-00176-00176-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Set Association Block
.*
&LABEL   MAPDSAB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDSAB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDSAB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DSAB').EMBED
         AIF   ('&CB' EQ 'DSABANMI').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDSAB).MEND
&BXA_MAC_MAPDSAB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DSAB
         GBLC  &BXA_CB_DSABANMI
&BXA_CB_DSAB SETC 'DSAB'
&BXA_CB_DSABANMI SETC 'DSAB'
.*
.* DSABSSVA - SWA VIRTUAL ADDRESS OF SIOT
DSABSSVA DSOVR XL3                     * Change char to hex field
.*
.* DSABORG1 - 1ST BYTE OF DSORG FLAGS
DSABIS   EQUOVR ,,b,DSABORG1
DSABPS   EQUOVR ,,b,DSABORG1
DSABDA   EQUOVR ,,b,DSABORG1
DSABCX   EQUOVR ,,b,DSABORG1
DSABCQ   EQUOVR ,,b,DSABORG1
DSABMQ   EQUOVR ,,b,DSABORG1
DSABPO   EQUOVR ,,b,DSABORG1
DSABU    EQUOVR ,,b,DSABORG1
.*
.* DSABORG2 - 2ND BYTE OF DSORG FLAGS
DSABGS   EQUOVR ,,b,DSABORG2
DSABTX   EQUOVR ,,b,DSABORG2
DSABTQ   EQUOVR ,,b,DSABORG2
DSABAM   EQUOVR ,,b,DSABORG2
DSABTR   EQUOVR ,,b,DSABORG2
.*
.* DSABFLG1 - FLAGS-RESTORED BY RESTART
DSABDALC EQUOVR ,,b,DSABFLG1
DSABPALC EQUOVR ,,b,DSABFLG1
DSABDCNV EQUOVR ,,b,DSABFLG1
DSABCONV EQUOVR ,,b,DSABFLG1
DSABDCAT EQUOVR ,,b,DSABFLG1
DSABPCAT EQUOVR ,,b,DSABFLG1
DSABCATM EQUOVR ,,b,DSABFLG1
DSABNUSE EQUOVR ,,b,DSABFLG1
.*
.* DSABFLG2 - FLAGS-RESTORED BY RESTART
DSABOPEN EQUOVR ,,b,DSABFLG2
DSABIRM  EQUOVR ,,b,DSABFLG2
DSABUNAL EQUOVR ,,b,DSABFLG2
DSABVLF  EQUOVR ,,b,DSABFLG2
DSABJCHG EQUOVR ,,b,DSABFLG2
DSABNODI EQUOVR ,,b,DSABFLG2
DSABATCT EQUOVR ,,b,DSABFLG2
.*
.* DSABFLG3 - FLAGS-NOT RESTORED BY RESTART
DSABDEFR EQUOVR ,,b,DSABFLG3
DSABPASS EQUOVR ,,b,DSABFLG3
DSABVAM  EQUOVR ,,b,DSABFLG3
DSABVMSC EQUOVR ,,b,DSABFLG3
DSABCATL EQUOVR ,,b,DSABFLG3
DSABJSCT EQUOVR ,,b,DSABFLG3
DSABVVDS EQUOVR ,,b,DSABFLG3
DSABTIOX EQUOVR ,,b,DSABFLG3
.*
.* DSABFLG4 - FLAGS-NOT RESTORED BY RESTART
DSABCKDS EQUOVR ,,b,DSABFLG4
DSABCKVL EQUOVR ,,b,DSABFLG4
DSABCKSI EQUOVR ,,b,DSABFLG4
DSABHIER EQUOVR ,,b,DSABFLG4
DSABGANM EQUOVR ,,b,DSABFLG4
DSABLCAT EQUOVR ,,b,DSABFLG4
DSABAUCB EQUOVR ,,b,DSABFLG4
DSABCASL EQUOVR ,,b,DSABFLG4
.*
.* DSABANML - LENGTH OF ALTERNATE DSNAME
DSABANML DSOVR AL1
.*
         MNOTE *,'Including IHADSAB mapping macro'
         IHADSAB ,                     *
         EQUOVR *END                   *
         DSOVR *END                    *
*
DSAB     DSECT ,                       * Restart DSAB
         ORG   ,                       *
DSAB_LEN EQU   *-DSAB                  * Length of DSAB
*
DSABANMI DSECT ,                       * Restart DSABANMI
         ORG   ,                       *
DSABANMI_LEN EQU *-DSABANMI            * Length of DSABANMI
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDSABQ 0100-20096-20096-0111-00130-00130-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for the DSAB Queue Descriptor Block
.*
&LABEL   MAPDSABQ &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDSABQ               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDSABQ       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DSABQDB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDSABQ).MEND
&BXA_MAC_MAPDSABQ SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DSABQDB
&BXA_CB_DSABQDB SETC 'DSABQ'
.*
.* DSECT DSABQDB should be mapped by macro IEFZB4D5, but this macro
.* does not exist in either SYS.MACLIB or SYS1.MODGEN
.*
         MNOTE *,'Generating DSABQDB Dsect'
*
DSABQDB  DSECT
DSQDBID  DS    CL4                     * Acronym in EBCDIC: DSAB
DSQATTRS DCL   *BITS,                  * Attributes                    *
               DSQRIURB,               * RIU table needs rebuilding    *
               DSQALLOC,               * Step is allocated             *
               DSQSWARD,               * SWA has been read indicator   *
               ,,,,,                   * Bit 3-7: reserved             *
               ,,,,,,,                 * Bit 8-15: reserved
DSQDBLN  DS    H                       * QDB length
DSQNELMS DS    F                       * Number of elements on queue
*
DSQBADBC EQUOVR ,,b,DSQFRSTP
DSQFRSTP DS    AL4                     * Pointer to first DSAB
DSQBADBC EQU   BIT0                    * Backward chain is incorrect
*
DSQBADFC EQUOVR ,,b,DSQLASTP
DSQLASTP DS    AL4                     * Pointer to last element
DSQBADFC EQU   BIT0                    * Forward chain is incorrect
*
DSQFDSP  DS    H                       * Disp into DSAB forward ptr
DSQBDSP  DS    H                       * Disp into DSAB backward ptr
DSQDCPID DS    F                       * DSAB cell pool id
DSQRIUTP DS    AL4                     * Pointer to RIU table
*
DSABQDB_LEN EQU *-DSABQDB              * Length of complete DSECT
         EQUOVR *END
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDSCB  0100-20096-20096-0111-00074-00074-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Set Control Block formats 1 thru 5
.* The DSCB-formats are documented in DFSMSdfp Advanced Services
.*                                    Topic 1.1.1 ff
.*
&LABEL   MAPDSCB ,                     * No parms
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDSCB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Generate embedded definition
&LABEL   GENMAPS (DSCB1,DSCB2,DSCB3,DSCB4,DSCB5)
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDSCB1 0100-20096-20096-0111-00191-00191-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Set Control Block formats 1
.* The DSCB-formats are documented in DFSMSdfp Advanced Services
.*                                    Topic 1.1.1 ff
.*
&LABEL   MAPDSCB1 &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDSCB1               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDSCB1       * DSCB1 already expanded?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DSCB1').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDSCB1).MEND
&BXA_MAC_MAPDSCB1 SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DSCB1
&BXA_CB_DSCB1 SETC 'DSCB1'
.*
.* DS1FLAG1 - FLAG 1
DS1COMPR EQUOVR ,,b,DS1FLAG1
DS1CPOIT EQUOVR ,,b,DS1FLAG1
.*
.* DS1SMSFG - SYSTEM MANAGED STORAGE INDICATORS
DS1SMSDS EQUOVR ,,b,DS1SMSFG
DS1SMSUC EQUOVR ,,b,DS1SMSFG
DS1REBLK EQUOVR ,,b,DS1SMSFG
DS1CRSDB EQUOVR ,,b,DS1SMSFG
DS1PDSE  EQUOVR ,,b,DS1SMSFG
DS1STRP  EQUOVR ,,b,DS1SMSFG
DS1PDSEX EQUOVR ,,b,DS1SMSFG
DS1DSAE  EQUOVR ,,b,DS1SMSFG
.*
.* DS1SCXTF - SECONDARY SPACE EXTENSION FLAG
DS1SCAVB EQUOVR ,,b,DS1SCXTF
DS1SCMB  EQUOVR ,,b,DS1SCXTF
DS1SCKB  EQUOVR ,,b,DS1SCXTF
DS1SCUB  EQUOVR ,,b,DS1SCXTF
DS1SCCP1 EQUOVR ,,b,DS1SCXTF
DS1SCCP2 EQUOVR ,,b,DS1SCXTF
.*
.* DS1DSORG - DATA SET ORGANIZATION
DS1DSGIS EQUOVR ,,b,DS1DSORG
DS1DSGPS EQUOVR ,,b,DS1DSORG
DS1DSGDA EQUOVR ,,b,DS1DSORG
DS1DSGCX EQUOVR ,,b,DS1DSORG
DS1DSGPO EQUOVR ,,b,DS1DSORG
DS1DSGU  EQUOVR ,,b,DS1DSORG
.*
DS1DSGGS EQUOVR ,,b,DS1DSORG+1
DS1DSGTX EQUOVR ,,b,DS1DSORG+1
DS1DSGTQ EQUOVR ,,b,DS1DSORG+1
DS1ACBM  EQUOVR ,,b,DS1DSORG+1
DS1ORGAM EQUOVR ,,b,DS1DSORG+1
DS1DSGTR EQUOVR ,,b,DS1DSORG+1
.*
.* DS1RECFM - RECORD FORMAT
DS1RECFF EQUOVR ,,b,DS1RECFM
DS1RECFV EQUOVR ,,b,DS1RECFM
DS1RECFU EQUOVR ,,b,DS1RECFM
DS1RECFT EQUOVR ,,b,DS1RECFM
DS1RECFB EQUOVR ,,b,DS1RECFM
DS1RECFS EQUOVR ,,b,DS1RECFM
DS1RECFA EQUOVR ,,b,DS1RECFM
DS1RECMC EQUOVR ,,b,DS1RECFM
.*
.* DS1OPTCD - OPTION CODES
DS1OPTIC EQUOVR ,,b,DS1OPTCD
DS1OPTBC EQUOVR ,,b,DS1OPTCD
.*
.* DS1DSIND - DATA SET INDICATORS
DS1IND80 EQUOVR ,,b,DS1DSIND
DS1IND40 EQUOVR ,,b,DS1DSIND
DS1RACDF EQUOVR ,,b,DS1DSIND
DS1IND20 EQUOVR ,,b,DS1DSIND
DS1IND10 EQUOVR ,,b,DS1DSIND
DS1SECTY EQUOVR ,,b,DS1DSIND
DS1IND08 EQUOVR ,,b,DS1DSIND
DS1IND04 EQUOVR ,,b,DS1DSIND
DS1WRSEC EQUOVR ,,b,DS1DSIND
DS1IND02 EQUOVR ,,b,DS1DSIND
DS1DSCHA EQUOVR ,,b,DS1DSIND
DS1IND01 EQUOVR ,,b,DS1DSIND
DS1CHKPT EQUOVR ,,b,DS1DSIND
.*
.* DS1SCAL1 - SPACE PARAMETERS
DS1DSPAC EQUOVR ,,b,DS1SCAL1
DS1CYL   EQUOVR ,,b,DS1SCAL1
DS1TRK   EQUOVR ,,b,DS1SCAL1
DS1AVR   EQUOVR ,,b,DS1SCAL1
DS1AVRND EQUOVR ,,b,DS1SCAL1
DS1MSGP  EQUOVR ,,b,DS1SCAL1
DS1EXT   EQUOVR ,,b,DS1SCAL1
DS1CONTG EQUOVR ,,b,DS1SCAL1
DS1MXIG  EQUOVR ,,b,DS1SCAL1
DS1ALX   EQUOVR ,,b,DS1SCAL1
DS1DSABS EQUOVR ,,v,DS1SCAL1
.*
         MNOTE *,'Including IECSDSL1 mapping macro'
.*
.* IECSDSL does not generate a DSECT-statement
DSCB1    DSECT ,                       * Start of Format-1 DSECT
         IECSDSL1 1                    *
         EQUOVR *END
.*
DS1DATA  EQU   DS1FMTID                * Start of data portion
         ORG   ,                       *
DSCB1_LEN EQU  *-DSCB1                 * Length of Format-1
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDSCB2 0100-20096-20096-0111-00109-00109-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Set Control Block formats 2
.* The DSCB-formats are documented in DFSMSdfp Advanced Services
.*                                    Topic 1.1.1 ff
.*
&LABEL   MAPDSCB2 &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDSCB2               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDSCB2       * DSCB2 already expanded?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DSCB2').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDSCB2).MEND
&BXA_MAC_MAPDSCB2 SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DSCB2
&BXA_CB_DSCB2 SETC 'DSCB2'
.*
.* IECSDSL does not generate a DSECT-statement
         MNOTE *,'Including IECSDSL1 mapping macro'
DSCB2    DSECT ,                       * Start of Format-2 DSECT
         IECSDSL1 2                    *
.*
         ORG   ,                       *
DSCB2_LEN EQU  *-DSCB2                 * Length of Format-2
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDSCB3 0100-20096-20096-0111-00109-00109-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Set Control Block formats 3
.* The DSCB-formats are documented in DFSMSdfp Advanced Services
.*                                    Topic 1.1.1 ff
.*
&LABEL   MAPDSCB3 &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDSCB3               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDSCB3       * DSCB3 already expanded?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DSCB3').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDSCB3).MEND
&BXA_MAC_MAPDSCB3 SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DSCB3
&BXA_CB_DSCB3 SETC 'DSCB3'
.*
.* IECSDSL does not generate a DSECT-statement
         MNOTE *,'Including IECSDSL1 mapping macro'
DSCB3    DSECT ,                       * Start of Format-3 DSECT
         IECSDSL1 3                    *
.*
         ORG   ,                       *
DSCB3_LEN EQU  *-DSCB3                 * Length of Format-3
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDSCB4 0100-20096-20096-0111-00134-00134-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Set Control Block formats 4
.* The DSCB-formats are documented in DFSMSdfp Advanced Services
.*                                    Topic 1.1.1 ff
.*
&LABEL   MAPDSCB4 &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDSCB4               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDSCB4       * DSCB4 already expanded?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DSCB4').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDSCB4).MEND
&BXA_MAC_MAPDSCB4 SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DSCB4
&BXA_CB_DSCB4 SETC 'DSCB4'
.*
.* DS4VTOCI - VTOC INDICATORS
DS4DOSBT EQUOVR ,,b,DS4VTOCI
DS4DVTOC EQUOVR ,,b,DS4VTOCI
DS4EFVLD EQUOVR ,,b,DS4VTOCI
DS4DSTKP EQUOVR ,,b,DS4VTOCI
DS4DOCVT EQUOVR ,,b,DS4VTOCI
DS4DIRF  EQUOVR ,,b,DS4VTOCI
DS4DICVT EQUOVR ,,b,DS4VTOCI
DS4IVTOC EQUOVR ,,b,DS4VTOCI
.*
.* DS4SMSFG - SYSTEM MANAGED STORAGE INDICATORS
DS4SMS   EQUOVR ,,v,DS4SMSFG
DS4SMSCV EQUOVR ,,v,DS4SMSFG
DS4NTSMS EQUOVR ,,v,DS4SMSFG
.*
.* DS4DEVFG - FLAG BYTE
DS4AMBJ  EQUOVR ,,b,DS4DEVFG
DS4DSF   EQUOVR ,,b,DS4DEVFG
DS4DEVAV EQUOVR ,,b,DS4DEVFG
.*
.* DS4EFLVL - EXTENDED FREE-SPACE MANAGEMENT
DS4EFL00 EQUOVR ,,v,DS4EFLVL
DS4EFL07 EQUOVR ,,v,DS4EFLVL
.*
.* IECSDSL does not generate a DSECT-statement
         MNOTE *,'Including IECSDSL1 mapping macro'
DSCB4    DSECT ,                       * Start of Format-4 DSECT
         IECSDSL1 4                    *
         EQUOVR *END
.*
         ORG   ,                       *
DSCB4_LEN EQU  *-DSCB4                 * Length of Format-4
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPDSCB5 0100-20096-20096-0111-00109-00109-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Data Set Control Block formats 5
.* The DSCB-formats are documented in DFSMSdfp Advanced Services
.*                                    Topic 1.1.1 ff
.*
&LABEL   MAPDSCB5 &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPDSCB5               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPDSCB5       * DSCB5 already expanded?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'DSCB5').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPDSCB5).MEND
&BXA_MAC_MAPDSCB5 SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_DSCB5
&BXA_CB_DSCB5 SETC 'DSCB5'
.*
.* IECSDSL does not generate a DSECT-statement
         MNOTE *,'Including IECSDSL1 mapping macro'
DSCB5    DSECT ,                       * Start of Format-5 DSECT
         IECSDSL1 5                    *
.*
         ORG   ,                       *
DSCB5_LEN EQU  *-DSCB5                 * Length of Format-5
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPECB   0100-20096-20096-0111-00151-00151-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Event Control Block
.*
&LABEL   MAPECB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPECB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPECB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ECB').EMBED
         AIF   ('&CB' EQ 'ECBE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPECB).MEND
&BXA_MAC_MAPECB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ECB
         GBLC  &BXA_CB_ECBE
&BXA_CB_ECB SETC 'ECB'
&BXA_CB_ECBE SETC 'ECB'
.*
.* ECBCC - COMPLETION CODE BYTE
ECBCC    DSOVR X
ECBWAIT  EQUOVR ,,b,ECBCC
ECBPOST  EQUOVR ,,b,ECBCC
ECBUNWT  EQUOVR ,,v,ECBCC
ECBNORM  EQUOVR ,,v,ECBCC
ECBPERR  EQUOVR ,,v,ECBCC
ECBDAEA  EQUOVR ,,v,ECBCC
ECBABEND EQUOVR ,,v,ECBCC
ECBINCPT EQUOVR ,,v,ECBCC
ECBREPRG EQUOVR ,,v,ECBCC
ECBEHALT EQUOVR ,,v,ECBCC
ECBERPAB EQUOVR ,,v,ECBCC
ECBERPER EQUOVR ,,v,ECBCC
ECBSETEO EQUOVR ,,v,ECBCC
ECBDMQDS EQUOVR ,,v,ECBCC
ECBSEQER EQUOVR ,,v,ECBCC
ECBINVMD EQUOVR ,,v,ECBCC
ECBWKOVR EQUOVR ,,v,ECBCC
ECBNOMSG EQUOVR ,,v,ECBCC
ECBDTRAQ EQUOVR ,,v,ECBCC
ECBEOQ   EQUOVR ,,v,ECBCC
ECBRAQMT EQUOVR ,,v,ECBCC
.*
.* ECBCCCNT - ZEROES OR REMAINDER OF COMPLETION CODE
ECBCCCNT DSOVR 0XL3
.*
.* ECBBYTE3 - THIRD BYTE OF ECBEVTBA
ECBEXTND EQUOVR ,,v,ECBBYTE3
ECBEVNT  EQUOVR ,,v,ECBBYTE3
.*
.* ECBEVAL - FUNCTION CODE
ECBEEXIT EQUOVR ,,v,ECBEVAL
.*
.* ECBEFLG1 - FLAG BYTE
ECBEMODE EQUOVR ,,b,ECBEFLG1
.*
         MNOTE *,'Including IHAECB mapping macro'
         IHAECB DSECT=YES,             * Include DSECT statement       *
               EXT=YES                 *   and ECB extension
         DSOVR *END                    *
         EQUOVR *END                   *
.*
ECB      DSECT
         ORG
ECB_LEN  EQU   *-ECB                   * Length of ECB
ECBE     DSECT
         ORG
ECBE_LEN EQU   *-ECBE                  * Length of ECB extension
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPECVT  0100-20096-20096-0111-00122-00122-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Extended Communications Vector Table
.*
&LABEL   MAPECVT &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPECVT                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPECVT        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ECVT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPECVT).MEND
&BXA_MAC_MAPECVT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ECVT
&BXA_CB_ECVT SETC 'ECVT'
.*
.* ECVTIOS1 - IOS FLAGS BYTE 1
ECVTCHSC EQUOVR ,,b,ECVTIOS1
.*
.* ECVTOCVT - ANCHOR FOR OpenMVS
ECVTOMVS EQUOVR ,,b,ECVTOCVT
.*
.* ECVTGMOD - GRS mode of operation
ECVTGNON EQUOVR ,,v,ECVTOCVT
ECVTGRNG EQUOVR ,,v,ECVTOCVT
ECVTGSTA EQUOVR ,,v,ECVTOCVT
.*
.* ECVTFLG1 - First miscellaneous flag
ECVTCLNU EQUOVR ,,v,ECVTFLG1
.*
.* Generate ECVT mapping
         MNOTE *,'Including ECVT mapping macro'
         IHAECVT DSECT=YES,            * Generate ECVT                 *
               LIST=YES                * and unchanged PRINT option
         EQUOVR *END
*
ECVT     DSECT ,                       * Reset to ECVT dsect
         ORG   ,                       *
ECVT_LEN EQU   *-ECVT                  * Length of ECVT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPEPAL  0100-20096-20096-0111-00132-00132-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the External Parameter Area and the parameter list
.* for the Locate mode SWA manager (SWAREQ).
.*
&LABEL   MAPEPAL &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPEPAL                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPEPAL        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'EPAL').EMBED
         AIF   ('&CB' EQ 'EPAX').EMBED
         AIF   ('&CB' EQ 'SWAREQPL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded deinition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPEPAL).MEND
&BXA_MAC_MAPEPAL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_EPAL
         GBLC  &BXA_CB_EPAX
         GBLC  &BXA_CB_SWAREQPL
&BXA_CB_EPAL     SETC 'EPAL'
&BXA_CB_EPAX     SETC 'EPAL'
&BXA_CB_SWAREQPL SETC 'EPAL'
.*
.* Change field definitions
SWVA     DSOVR XL3                     * Change char to hex field
SWBLKID  DSOVR XL1                     * Change char to hex field
SWLVERS  DSOVR XL2                     * Change char to hex field
.*
         MNOTE *,'Including IEFZB505 mapping macro'
         IEFZB505 LOCEPAX=YES          * Include extended EPAL fields
         DSOVR *END
.*
ZB505    DSECT ,                       * Reset to macro-defined DSECT
EPAL     EQU   SWAEPA,,C'X'            * Define USING labels for EPAL
EPAL_LEN EQU   L'SWAEPA                * Length of EPAL
EPAX     EQU   SWAEPAX,,C'X'           *    and for EPAX
EPAX_LEN EQU   L'SWAEPAX               * Length of eXtended EPAL
.*
.* Generate mapping macro for the SWAREQ parmlist
         MNOTE *,'Generating SWAREQPL mapping macro'
SWAREQPL DSECT
SWARQPL  DS    0XL8                    * Define whole SWAREQPL
SWAEPAL  DS    AL4                     * Pointer to EPAL/EPAX
SWAFCD   DS    AL4                     * Pointer to function code
.*                                     * CL2'RL' or CL2'WL'
SWAREQPL_LEN EQU *-SWAREQPL            * Length of parmlist
.*
.* Include Equates in IEFQMIDS
         GENMAPS (QMIDS)
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPEQU   0100-20096-20096-0111-00111-00111-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for equates
.*
         MAPEQU
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPEQU                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Prevent multiple expansion
         GBLB  &BXA_MAC_MAPEQU
         AIF   (&BXA_MAC_MAPEQU).MEND
&BXA_MAC_MAPEQU SETB  1
.*
         MNOTE *,'Generating Equates'
*
* Equates for registers
*
         GENMAPS (REGS,BITS)
.*
.* Put equates in a DSECT to prevent warning messages in ASM listing
BXA_EQU  DSECT
*
* Equates for masks
*
NNNN     EQU   B'0000'                 *
NNNY     EQU   B'0001'                 *
NNYN     EQU   B'0010'                 *
NNYY     EQU   B'0011'                 *
NYNN     EQU   B'0100'                 *
NYNY     EQU   B'0101'                 *
NYYN     EQU   B'0110'                 *
NYYY     EQU   B'0111'                 *
YNNN     EQU   B'1000'                 *
YNNY     EQU   B'1001'                 *
YNYN     EQU   B'1010'                 *
YNYY     EQU   B'1011'                 *
YYNN     EQU   B'1100'                 *
YYNY     EQU   B'1101'                 *
YYYN     EQU   B'1110'                 *
YYYY     EQU   B'1111'                 *
NOBYTE   EQU   NNNN                    *
ALLBYTES EQU   YYYY                    *
*
* Equates for ALETs
*
ALET_PRIM EQU  0                       * Alet for PASN
ALET_SEC  EQU  1                       * Alet for SASN
ALET_HOME EQU  2                       * ALET for HASN
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPEVNT  0100-20096-20096-0111-00118-00118-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the EVENTS control block
.*
&LABEL   MAPEVNT &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPEVNT                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPEVNT        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'EVNT').EMBED
         AIF   ('&CB' EQ 'EVNTENTRY').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPEVNT).MEND
&BXA_MAC_MAPEVNT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_EVNT
         GBLC  &BXA_CB_EVNTENTRY
&BXA_CB_EVNT SETC 'EVNT'
&BXA_CB_EVNTENTRY SETC 'EVNT'
.*
.* EVNTFLG1 - EVENT TABLE FLAGS
EVNTUPR  EQUOVR ,,b,EVNTFLG1
.*
.* EVNTFLGS - EVENT ENTRY FLAGS
EVNTENDL EQUOVR ,,b,EVNTFLGS
.*
         MNOTE *,'Including IHAEVNT mapping macro'
         IHAEVNT ,                     *
         EQUOVR *END
.*
EVNT     DSECT ,                       * Resume EVNT DSECT
         ORG
EVNT_LEN EQU   EVNTHEND-EVNT           * Length of EVNT header
.*
EVNTENTRY EQU  EVNTENTY                * Label for event entry
EVNTENTRY_LEN EQU *-EVNTENTY           * Length of EVNT entry
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPFRRPL 0100-20096-20096-0111-00115-00115-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for FRR parameter area
.*
&LABEL   MAPFRRPL &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPFRRPL               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPFRRP        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'FRRP').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPFRRP).MEND
&BXA_MAC_MAPFRRP SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_FRRP
&BXA_CB_FRRP SETC 'FRRP'
.*
         MNOTE *,'Generating DSECT for FRR parameter area'
*
* DSECT for FRR parameter area
*
FRRPL    DSECT
FRRPLPRM DS    A                       * Ptr to SRB paramlist
FRRPLSRB DS    A                       * Ptr to SRB
FRRPLWRK DS    A                       * Ptr to workarea of SRB routine
FRRPLWSZ DS    H                       * Size of workarea
         DS    0F                      * Re-align
         DS    XL8                     * Reserved
*
* Reset location counter to end
         ORG
         DS    0F                      * Align
FRRPL_LEN EQU  *-FRRPL                 *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPFRRS  0100-20096-20096-0111-00147-00147-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Function Recovery Routine Stack
.*
&LABEL   MAPFRRS &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPFRRS                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPFRRS        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'FRRS').EMBED
         AIF   ('&CB' EQ 'FRRSENTR').EMBED
         AIF   ('&CB' EQ 'FRRSXENT').EMBED
         AIF   ('&CB' EQ 'FRRSXSTK').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPFRRS).MEND
&BXA_MAC_MAPFRRS SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_FRRS
         GBLC  &BXA_CB_FRRSENTR
         GBLC  &BXA_CB_FRRSXENT
         GBLC  &BXA_CB_FRRSXSTK
&BXA_CB_FRRS SETC 'FRRS'
&BXA_CB_FRRSENTR SETC 'FRRS'
&BXA_CB_FRRSXENT SETC 'FRRS'
&BXA_CB_FRRSXSTK SETC 'FRRS'
.*
.* FRRSFRA1 - LOW ORDER BYTE OF FRR ADDRESS
FRRSXFLG EQUOVR ,,b,FRRSFRA1
.*
.* FRRSFLG1 - RECURSION FLAGS USED BY RTM
FRRSRCUR EQUOVR ,,b,FRRSFLG1
FRRSNEST EQUOVR ,,b,FRRSFLG1
FRRSNLCL EQUOVR ,,b,FRRSFLG1
FRRSNGLB EQUOVR ,,b,FRRSFLG1
FRRSNRTY EQUOVR ,,b,FRRSFLG1
.*
.* FRRSFLG4 - FLAGS TO INDICATE OPTIONS CHOSEN
FRRSEUT  EQUOVR ,,b,FRRSFLG4
FRRSNCNL EQUOVR ,,b,FRRSFLG4
FRRSFULL EQUOVR ,,b,FRRSFLG4
FRRSPRIM EQUOVR ,,b,FRRSFLG4
FRRSLCL  EQUOVR ,,b,FRRSFLG4
FRRSGLB  EQUOVR ,,b,FRRSFLG4
.*
.* IHAFRRS specifies several EQUates before its DSECT statement
FRRS     DSECT ,                       * Pre-start FRRS DSECT
         MNOTE *,'Including IHAFRRS mapping macro'
         IHAFRRS ,                     *
         EQUOVR *END
*
FRRS     DSECT ,                       * Resume FRRS DSECT
         ORG   ,                       *
FRRS_LEN EQU   *-FRRS                  * Length of FRRS
*
FRRSENTR DSECT ,                       * Resume FRRS entry
         ORG   ,                       *
FRRSENTR_LEN EQU *-FRRSENTR            * Length of FRRSENTR
*
FRRSXENT DSECT ,                       * Resume FRRS entry extension
         ORG   ,                       *
FRRSXENT_LEN EQU *-FRRSXENT            * Length of FRRSXENT
*
FRRSXSTK DSECT ,                       * Resume FRRS extension
         ORG   ,                       *
FRRSXSTK_LEN EQU *-FRRSXSTK            * Length of FRRSXSTK
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPGVT   0100-20096-20096-0111-00176-00176-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the GRS Vector Table
.*
&LABEL   MAPGVT &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPGVT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPGVT         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'GVT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPGVT).MEND
&BXA_MAC_MAPGVT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_GVT
&BXA_CB_GVT SETC 'GVT'
.*
.* GVTGSFLG - GRS GENERAL STATUS FLAGS
GVTGRSAS EQUOVR ,,b,GVTGSFLG
GVTGRSNA EQUOVR ,,b,GVTGSFLG
GVTGRSPC EQUOVR ,,b,GVTGSFLG
GVTPRGOK EQUOVR ,,b,GVTGSFLG
GVTNCMDR EQUOVR ,,b,GVTGSFLG
GVTEXRES EQUOVR ,,b,GVTGSFLG
GVTARQA  EQUOVR ,,b,GVTGSFLG
.*
.* GVTQSFLG - GRS QUEUE STATUS FLAGS
GVTGQDMG EQUOVR ,,b,GVTQSFLG
GVTLQDMG EQUOVR ,,b,GVTQSFLG
GVTQMRGA EQUOVR ,,b,GVTQSFLG
.*
.* GVTGRSOP - GRS OPTION FLAGS
GVTSTART EQUOVR ,,b,GVTGRSOP
GVTJOIN  EQUOVR ,,b,GVTGRSOP
GVTNONE  EQUOVR ,,b,GVTGRSOP
GVTTRYJN EQUOVR ,,b,GVTGRSOP
GVTSTAR  EQUOVR ,,b,GVTGRSOP
.*
.* GVTVFLAG - GRS VALIDATION FLAGS
GVTRNLVC EQUOVR ,,b,GVTVFLAG
GVTVERNL EQUOVR ,,b,GVTVFLAG
GVTVIRNL EQUOVR ,,b,GVTVFLAG
GVTVCRNL EQUOVR ,,b,GVTVFLAG
GVTRNLEA EQUOVR ,,b,GVTVFLAG
.*
.* GVTGRSRP - GRS RING PROCESSING FLAGS
GVTNCOMM EQUOVR ,,b,GVTGRSRP
GVTMAINR EQUOVR ,,b,GVTGRSRP
GVTINACT EQUOVR ,,b,GVTGRSRP
GVTOBSQD EQUOVR ,,b,GVTGRSRP
GVTAURST EQUOVR ,,b,GVTGRSRP
GVTJSRBS EQUOVR ,,b,GVTGRSRP
GVTAURJN EQUOVR ,,b,GVTGRSRP
.*
.* GVTPRMLB - GRS PARMLIB PROCESSING STATUS
GVTCNFER EQUOVR ,,b,GVTPRMLB
GVTRNLER EQUOVR ,,b,GVTPRMLB
GVTNOCTC EQUOVR ,,b,GVTPRMLB
.*
.* GVTCSFLG - Compare and swap flags
GVTSYNCH EQUOVR ,,b,GVTCSFLG
.*
.* GVTMREAT - MAINRING RSA EXPECTED ARRIVAL TIME
GVTRSAST EQUOVR ,,b,GVTMREAT+7
.*
.* GVTTWEAK -
GVTSP18I EQUOVR ,,b,GVTTWEAK
.*
.* GVTTFLAG - GRS trace flags
GVTTCNTL EQUOVR ,,b,GVTTFLAG
GVTTRSA  EQUOVR ,,b,GVTTFLAG
GVTTSIGN EQUOVR ,,b,GVTTFLAG
GVTTREQ  EQUOVR ,,b,GVTTFLAG
GVTTMON  EQUOVR ,,b,GVTTFLAG
.*
.* GVTXCFFL - GRS XCF Flags
GVTMULTS EQUOVR ,,b,GVTXCFFL
.*
.* GVTFLAGS - FLags
GVTNOQRT EQUOVR ,,b,GVTFLAGS
GVTSQVAL EQUOVR ,,b,GVTFLAGS
GVTRNLIP EQUOVR ,,b,GVTFLAGS
.*
.* GVTITWRK - Initialization Task work flags
GVTSRLCK EQUOVR ,,b,GVTITWRK
GVTSRRNL EQUOVR ,,b,GVTITWRK
.*
         MNOTE *,'Including ISGGVT mapping macro'
         ISGGVT ,
         EQUOVR *END
*
GVT      DSECT ,                       * Resume GVT DSECT
         ORG
GVT_LEN  EQU   *-GVT                   * Length of GVT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPGVTX  0100-20096-20096-0111-00131-00131-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the GRS Vector Table eXtension
.*
&LABEL   MAPGVTX &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPGVTX                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPGVTX        * Map has been generated?
         GBLC  &BXA_PGM_TITLE          * Title for the listing
         GBLB  &SP_SHOWALL             * Show all statements?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'GVTX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPGVTX).MEND
&BXA_MAC_MAPGVTX SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_GVTX
&BXA_CB_GVTX SETC 'GVTX'
.*
.* GVTX_MIG_FLAGS - Migration Bit Flags
GVTX_STARMIGRATIONINPROGRESS EQUOVR ,,b,GVTX_MIG_FLAGS
GVTX_STARMIGINITIATOR        EQUOVR ,,b,GVTX_MIG_FLAGS
GVTX_SYSFAILUREINMIGRATION   EQUOVR ,,b,GVTX_MIG_FLAGS
GVTX_NO_STARMIG_BACKOFF      EQUOVR ,,b,GVTX_MIG_FLAGS
GVTX_STARMIG_LEFT_SYSGRS     EQUOVR ,,b,GVTX_MIG_FLAGS
GVTX_STARMIG_POPULATION      EQUOVR ,,b,GVTX_MIG_FLAGS
.*
.* GVTX_STARSETGRSRNLFLAGS - Dynamic RNL flags
GVTX_STARSETGRSRNLINPROGRESS EQUOVR ,,b,GVTX_STARSETGRSRNLFLAGS
GVTX_STARSETGRSRNLINITIATOR  EQUOVR ,,b,GVTX_STARSETGRSRNLFLAGS
GVTX_READYTOCUTOVER          EQUOVR ,,b,GVTX_STARSETGRSRNLFLAGS
GVTX_CANCELBYINITIATOR       EQUOVR ,,b,GVTX_STARSETGRSRNLFLAGS
.*
         MNOTE *,'Including ISGGVTX mapping macro'
         ISGGVTX ,
         EQUOVR *END
*
.* GVTX_LEN defined in ISGGVTX between OS/390 V2R6 and z/OS V1R5
.* GVTX     DSECT ,                       * Resume GVTX DSECT
.*          ORG
.* GVTX_LEN EQU   *-GVTX                  * Length of GVTX
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
         TITLE '&BXA_PGM_TITLE'
         AIF   (&SP_SHOWALL).TITLE
.* Generate comment line in stead of a MNOTE line
*
         AGO   .TITLEOK
.TITLE   ANOP
         MNOTE *,'Previous STMT: TITLE ''&BXA_PGM_TITLE'''
.TITLEOK ANOP
.*
.MEND    MEND
./ ADD NAME=MAPIEANT 0100-20096-20096-0111-00134-00134-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for Name/Token callable services
.*
&LABEL   MAPIEANT &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPIEANT               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPIEANT       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'NTCRPL').EMBED
         AIF   ('&CB' EQ 'NTDLPL').EMBED
         AIF   ('&CB' EQ 'NTRTPL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPIEANT).MEND
&BXA_MAC_MAPIEANT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_NTCRPL
         GBLC  &BXA_CB_NTDLPL
         GBLC  &BXA_CB_NTRTPL
&BXA_CB_NTCRPL SETC 'IEANT'
&BXA_CB_NTDLPL SETC 'IEANT'
&BXA_CB_NTRTPL SETC 'IEANT'
.*
         MNOTE *,'Including IEANTASM mapping macro'
.*
.* Put equates in a DSECT to prevent warning messages in ASM listing
BXA_EQU  DSECT
         IEANTASM ,                    *
*
         ORG   ,                       *
*
* Plist for IEANTCR
NTCRPL   DSECT
NTCRLVL  DS    AL4                     * Level: pointer to fullword
NTCRNAM  DS    AL4                     * Token name: pointer to CL16
NTCRTOK  DS    AL4                     * Token value: pointer to XL16
NTCRPOPT DS    AL4                     * Persist option: pointer to F
NTCRRCD  DS    AL4                     * Return value: pointer to F
*
* Plist for IEANTRT
NTRTPL   DSECT
NTRTLVL  DS    AL4                     * Level: pointer to fullword
NTRTNAM  DS    AL4                     * Token name: pointer to CL16
NTRTTOK  DS    AL4                     * Token value: pointer to XL16
NTRTRCD  DS    AL4                     * Return value: pointer to F
*
* Plist for IEANTDL
NTDLPL   DSECT
NTDLLVL  DS    AL4                     * Level: pointer to fullword
NTDLNAM  DS    AL4                     * Token name: pointer to CL16
NTDLRCD  DS    AL4                     * Return value: pointer to F
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPIECEQ 0100-20096-20096-0111-00186-00186-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Open/Close/EOV equates
.*
         MAPIECEQ
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPIECEQ               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPIECEQ
         AIF   (&BXA_MAC_MAPIECEQ).MEND
&BXA_MAC_MAPIECEQ SETB 1               * Expansion done
.*
         GENMAPS (DCB,DEB,ECB,JFCB,REGS,UCB)
.*
.* Put equates in a DSECT to prevent warning messages
BXA_EQU  DSECT ,                       *
.*
.* Suppress equates for R0 thru R9: these are defined in MAPREGS
.* For all other register equates, the equates must be changed so they
.* no longer equate a numeric literal, but a pre-defined register.
R0       EQUOVR *SUPPRESS              *
R1       EQUOVR *SUPPRESS              *
R2       EQUOVR *SUPPRESS              *
R3       EQUOVR *SUPPRESS              *
R4       EQUOVR *SUPPRESS              *
R5       EQUOVR *SUPPRESS              *
R6       EQUOVR *SUPPRESS              *
R7       EQUOVR *SUPPRESS              *
R8       EQUOVR *SUPPRESS              *
R9       EQUOVR *SUPPRESS              *
RA       EQUOVR R10                    *
RB       EQUOVR R11                    *
RC       EQUOVR R12                    *
RD       EQUOVR R13                    *
.*       EQUOVR R14                    * RE not defined in IECEQU
RF       EQUOVR R15                    *
RDCB     EQUOVR ,,g                    *
RACB     EQUOVR ,,g                    *
RBASE    EQUOVR ,,g                    *
RCORE    EQUOVR ,,g                    *
RES      EQUOVR ,,g                    *
RPAR     EQUOVR ,,g                    *
RWTG     EQUOVR ,,g                    *
RPARC    EQUOVR ,,g                    *
RWTGC    EQUOVR ,,g                    *
RTIOT    EQUOVR ,,g                    *
RUCB     EQUOVR ,,g                    *
RDEB     EQUOVR ,,g                    *
RET      EQUOVR ,,g                    *
.*
ALLBITS  EQUOVR *SUPPRESS              * ALLBITS defined in MAPBITS
DCBDEVTP EQUOVR *NEWNAME,DCBDEVTA      * DCBDEVTP defined in DCBD      *
                                       * DCBDEVTA used for tape equate
.*
DEBTAMID EQUOVR *SUPPRESS              * DEBTAMID defined in MAPDEB
DEBVAMID EQUOVR *SUPPRESS              * DEBVAMID defined in MAPDEB
DEBPWCKD EQUOVR *SUPPRESS              * DEBPWCKD defined in MAPDEB
DEBF1CEV EQUOVR *SUPPRESS              * DEBF1DEV defined in MAPDEB
.*
.*** DCBDEN INDICATORS
DX6250   EQUOVR ,,v,DCBDEN
DEN6250  EQUOVR ,,v,DCBDEN
DEN1600  EQUOVR ,,v,DCBDEN
DEN800   EQUOVR ,,v,DCBDEN
DCBDEN08 EQUOVR ,,v,DCBDEN
DCBDEN05 EQUOVR ,,v,DCBDEN
DXTRTMSK EQUOVR ,,v,DCBDEN
.*** DCBDSORG FIELDS                     DATA SET ORGANIZATION
DCBORGCQ EQUOVR ,,b,DCBDSORG
DCBORGMQ EQUOVR ,,b,DCBDSORG
.*** DCBMACRF+1 (DCBMACR+1) INDICATORS   EXCP ACCESS METHOD
DCBMDEV  EQUOVR ,,b,DCBMACR1
.*** DCBDEVT INDICATORS
DCBDEVTA EQUOVR ,,v,DCBDEVT
DCBDEVDA EQUOVR ,,v,DCBDEVT
.*** DCBUSASI INDICATORS
DCBUSAON EQUOVR ,,b,DCBUSASI
.*** DEBDEBID
DEBIDENT EQUOVR ,,v,DEBDEBID            DEB IDENTIFIER
.*** DEBOPATB INDICATORS
DEBOPABE EQUOVR ,,b,DEBOPATB
DEBOPLV  EQUOVR ,,b,DEBOPATB
DEBOPRRD EQUOVR ,,b,DEBOPATB
DEBOPOUT EQUOVR ,,b,DEBOPATB
DEBOPOIN EQUOVR ,,b,DEBOPATB
DEBOPUPD EQUOVR ,,b,DEBOPATB
DEBOPIO  EQUOVR ,,b,DEBOPATB
DEBOPRBK EQUOVR ,,b,DEBOPATB
.*****    JFCB EQUATES
JFCBUL   EQUOVR ,,b,JFCBLTYP
CLRSCTY  EQUOVR ,,b,JFCBIND2
.* JFCBMASK+0
JFCXLRIM EQUOVR ,,b,JFCBMASK
JFCMBLKD EQUOVR ,,b,JFCBMASK
.* JFCBMASK+1
JFCMBFOF EQUOVR ,,b,JFCBMASK+1
.* JFCBMASK+2
JFCMBLKJ EQUOVR ,,b,JFCBMASK+2
.* JFCBMASK+4
JFCMJMOD EQUOVR ,,b,JFCBMASK+4
JFCMDMOD EQUOVR ,,b,JFCBMASK+4
JFCMNULL EQUOVR ,,b,JFCBMASK+4
JFCMBPAM EQUOVR ,,b,JFCBMASK+4
JFCMISAM EQUOVR ,,b,JFCBMASK+4
JFCMPSWD EQUOVR ,,b,JFCBMASK+4
JFCMABND EQUOVR ,,b,JFCBMASK+4
JFCMVSEQ EQUOVR ,,b,JFCBMASK+4
.* JFCBMASK+5
DSTRYL0P EQUOVR ,,b,JFCBMASK+5
JFCSNSVL EQUOVR ,,b,JFCBMASK+5
.* JFCBMASK+7
JFCMDSPM EQUOVR ,,b,JFCBMASK+7
JFCMDSPO EQUOVR ,,b,JFCBMASK+7
JFCMVSAM EQUOVR ,,b,JFCBMASK+7
JFCMAMPF EQUOVR ,,b,JFCBMASK+7
.*****    ECB-ORIENTED EQUATES
ECBNOERR EQUOVR ,,b,ECBCC
.*
         MNOTE *,'Including IECEQU macro'
         IECEQU AOS=YES                *
         EQUOVR *END                   *
.*
         ORG   ,                       *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPIHSA  0100-20096-20096-0111-00109-00109-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Interrupt Handler Save Area
.*
&LABEL   MAPIHSA &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPIHSA                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPIHSA        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'IHSA').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPIHSA).MEND
&BXA_MAC_MAPIHSA SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_IHSA
&BXA_CB_IHSA SETC 'IHSA'
.*
.* IHSAFLGS - IHSA FLAGS
IHSANSS  EQUOVR ,,b,IHSAFLGS
.*
         MNOTE *,'Including IHAIHSA mapping macro'
         IHAIHSA LIST=YES              * Generate IHSA
         EQUOVR *END
*
IHSA     DSECT ,                       * Resume IHSA DSECT
         ORG   ,                       *
IHSA_LEN EQU   *-IHSA                  * Length of IHSA
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPIOB   0100-20096-20096-0111-00328-00328-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Input/Output Block
.*
&LABEL   MAPIOB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPIOB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPIOB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'IOB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPIOB).MEND
&BXA_MAC_MAPIOB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_IOB
&BXA_CB_IOB SETC 'IOB'
.*
.* IOBCFLG1 - I/O INDICATORS
IOBV6CHN EQUOVR ,,b,IOBCFLG1
IOBRSV02 EQUOVR ,,b,IOBCFLG1
IOBRSV03 EQUOVR ,,b,IOBCFLG1
IOBRSV04 EQUOVR ,,b,IOBCFLG1
IOBPTST  EQUOVR ,,b,IOBCFLG1
IOBABAPP EQUOVR ,,b,IOBCFLG1
IOBRSTCH EQUOVR ,,b,IOBCFLG1
IOBPCI   EQUOVR ,,b,IOBCFLG1
.*
.* IOBNFLG1 - FLAG BYTE
IOBPRTOV EQUOVR ,,b,IOBNFLG1
IOBSEGMT EQUOVR ,,b,IOBNFLG1
IOBWRITE EQUOVR ,,b,IOBNFLG1
IOBREAD  EQUOVR ,,b,IOBNFLG1
IOBUPDAT EQUOVR ,,b,IOBNFLG1
IOBBKSPC EQUOVR ,,b,IOBNFLG1
IOBSPAN  EQUOVR ,,b,IOBNFLG1
IOBUPERR EQUOVR ,,b,IOBNFLG1
IOBFIRST EQUOVR ,,b,IOBNFLG1
.*
.* IOBDEQIN - DEQUEUE LOOP INDICATOR
IOBDEQ   EQUOVR ,,b,IOBDEQIN
IOBRSV07 EQUOVR ,,b,IOBDEQIN
IOBRSV08 EQUOVR ,,b,IOBDEQIN
IOBRSV09 EQUOVR ,,b,IOBDEQIN
IOBRSV10 EQUOVR ,,b,IOBDEQIN
IOBRSV11 EQUOVR ,,b,IOBDEQIN
IOBRSV12 EQUOVR ,,b,IOBDEQIN
IOBRSV13 EQUOVR ,,b,IOBDEQIN
.*
.* IOBFLAG1 - FLAG BYTE 1
IOBDATCH EQUOVR ,,b,IOBFLAG1
IOBCMDCH EQUOVR ,,b,IOBFLAG1
IOBERRTN EQUOVR ,,b,IOBFLAG1
IOBRPSTN EQUOVR ,,b,IOBFLAG1
IOBCYCCK EQUOVR ,,b,IOBFLAG1
IOBFCREX EQUOVR ,,b,IOBFLAG1
IOBIOERR EQUOVR ,,b,IOBFLAG1
IOBUNREL EQUOVR ,,b,IOBFLAG1
IOBRSTRT EQUOVR ,,b,IOBFLAG1
IOBSPSVC EQUOVR ,,b,IOBFLAG1
.*
.* IOBFLAG2 - FLAG BYTE 2
IOBHALT  EQUOVR ,,b,IOBFLAG2
IOBSENSE EQUOVR ,,b,IOBFLAG2
IOBPURGE EQUOVR ,,b,IOBFLAG2
IOBRRT3  EQUOVR ,,b,IOBFLAG2
IOBRDHA0 EQUOVR ,,b,IOBFLAG2
IOBRRT2  EQUOVR ,,b,IOBFLAG2
IOBALTTR EQUOVR ,,b,IOBFLAG2
IOBSKUPD EQUOVR ,,b,IOBFLAG2
IOBSTATO EQUOVR ,,b,IOBFLAG2
IOBPNCH  EQUOVR ,,b,IOBFLAG2
.*
.* IOBSENS0 - FIRST SENSE BYTE
IOBS0B0  EQUOVR ,,b,IOBSENS0
IOBS0B1  EQUOVR ,,b,IOBSENS0
IOBS0B2  EQUOVR ,,b,IOBSENS0
IOBS0B3  EQUOVR ,,b,IOBSENS0
IOBS0B4  EQUOVR ,,b,IOBSENS0
IOBS0B5  EQUOVR ,,b,IOBSENS0
IOBS0B6  EQUOVR ,,b,IOBSENS0
IOBS0B7  EQUOVR ,,b,IOBSENS0
IOBSNSC9 EQUOVR ,,b,IOBSENS0
.*
.* IOBSENS1 - SECOND SENSE BYTE
IOBS1B0  EQUOVR ,,b,IOBSENS1
IOBS1B1  EQUOVR ,,b,IOBSENS1
IOBS1B2  EQUOVR ,,b,IOBSENS1
IOBS1B3  EQUOVR ,,b,IOBSENS1
IOBS1B4  EQUOVR ,,b,IOBSENS1
IOBS1B5  EQUOVR ,,b,IOBSENS1
IOBS1B6  EQUOVR ,,b,IOBSENS1
IOBS1B7  EQUOVR ,,b,IOBSENS1
.*
.* IOBFL3 - FLAG 3 - STATUS ERROR COUNTS FOR MAGNETIC
IOBCCC   EQUOVR ,,b,IOBFL3
IOBICC   EQUOVR ,,b,IOBFL3
IOBCDC   EQUOVR ,,b,IOBFL3
IOBACU   EQUOVR ,,b,IOBFL3
IOBCNC   EQUOVR ,,b,IOBFL3
IOBSDR   EQUOVR ,,b,IOBFL3
IOBMSG   EQUOVR ,,b,IOBFL3
IOBICL   EQUOVR ,,b,IOBFL3
IOBJAM   EQUOVR ,,b,IOBFL3
IOBLOG   EQUOVR ,,b,IOBFL3
.*
.* IOBUSTAT - CSW UNIT STATUS FLAGS
IOBUSB0  EQUOVR ,,b,IOBUSTAT
IOBUSB1  EQUOVR ,,b,IOBUSTAT
IOBUSB2  EQUOVR ,,b,IOBUSTAT
IOBUSB3  EQUOVR ,,b,IOBUSTAT
IOBUSB4  EQUOVR ,,b,IOBUSTAT
IOBUSB5  EQUOVR ,,b,IOBUSTAT
IOBUSB6  EQUOVR ,,b,IOBUSTAT
IOBUSB7  EQUOVR ,,b,IOBUSTAT
.*
.* IOBCSTAT - CSW CHANNEL STATUS FLAGS (3800)
IOBCSB0  EQUOVR ,,b,IOBCSTAT
IOBCSB1  EQUOVR ,,b,IOBCSTAT
IOBCSB2  EQUOVR ,,b,IOBCSTAT
IOBCSB3  EQUOVR ,,b,IOBCSTAT
IOBCSB4  EQUOVR ,,b,IOBCSTAT
IOBCSB5  EQUOVR ,,b,IOBCSTAT
IOBCSB6  EQUOVR ,,b,IOBCSTAT
IOBCSB7  EQUOVR ,,b,IOBCSTAT
.*
.* Unnamed field - LAST TWO BYTES OF IOBCSW
IOBCSTAT+1 DSOVR *NEWNAME,IOBRESCT     * Residual count after read
.*
.* IOBFLAG4 - FLAG BYTE
IOBGDPOL EQUOVR ,,b,IOBFLAG4
IOBCC3WE EQUOVR ,,b,IOBFLAG4
IOBPMERR EQUOVR ,,b,IOBFLAG4
IOBCEF   EQUOVR ,,b,IOBFLAG4
IOBRSV41 EQUOVR ,,b,IOBFLAG4
IOBRSV42 EQUOVR ,,b,IOBFLAG4
IOBJES3I EQUOVR ,,b,IOBFLAG4
IOBRSV44 EQUOVR ,,b,IOBFLAG4
.*
.* IOBBTAMF - FLAG BYTE FOR BTAM
IOBPRMER EQUOVR ,,b,IOBBTAMF
IOBINUSE EQUOVR ,,b,IOBBTAMF
IOBRSV14 EQUOVR ,,b,IOBBTAMF
IOBRSV15 EQUOVR ,,b,IOBBTAMF
IOBRSV16 EQUOVR ,,b,IOBBTAMF
IOBRSV17 EQUOVR ,,b,IOBBTAMF
IOBRFTMG EQUOVR ,,b,IOBBTAMF
IOBOLTST EQUOVR ,,b,IOBBTAMF
.*
.* IOBFL4 - FLAG 4 - SENSE ERROR COUNTS FOR MAGNETIC
IOBOVR   EQUOVR ,,b,IOBFL4
IOBREJ   EQUOVR ,,b,IOBFL4
IOBDCK   EQUOVR ,,b,IOBFL4
IOBBUS   EQUOVR ,,b,IOBFL4
IOBEQP   EQUOVR ,,b,IOBFL4
IOBENT   EQUOVR ,,b,IOBFL4
IOBRSV47 EQUOVR ,,b,IOBFL4
IOBRSV46 EQUOVR ,,b,IOBFL4
.*
.* IOBAMAF - SMS  DIAGNOSTICS BYTE TO DESCRIBE
IOBBDFPL EQUOVR ,,v,IOBAMAF
IOBPGMCK EQUOVR ,,v,IOBAMAF
IOBBADRC EQUOVR ,,v,IOBAMAF
IOBBADLT EQUOVR ,,v,IOBAMAF
IOBNCRLT EQUOVR ,,v,IOBAMAF
IOBPOUT  EQUOVR ,,v,IOBAMAF
IOBOUTIO EQUOVR ,,v,IOBAMAF
IOBRLTTB EQUOVR ,,v,IOBAMAF
IOBFLOCK EQUOVR ,,v,IOBAMAF
IOBNFILE EQUOVR ,,v,IOBAMAF
IOBPAD   EQUOVR ,,v,IOBAMAF
IOBMMERR EQUOVR ,,v,IOBAMAF
IOBSHDW  EQUOVR ,,v,IOBAMAF
IOBRBNNP EQUOVR ,,v,IOBAMAF
.*
.* IOBINDCT - INDICATORS
IOBDEQCP EQUOVR ,,b,IOBINDCT
IOBUNSCH EQUOVR ,,b,IOBINDCT
IOBOVPTR EQUOVR ,,b,IOBINDCT
IOBKEYAD EQUOVR ,,b,IOBINDCT
IOBRSV27 EQUOVR ,,b,IOBINDCT
IOBRSV28 EQUOVR ,,b,IOBINDCT
IOBRSV29 EQUOVR ,,b,IOBINDCT
IOBCHNNL EQUOVR ,,b,IOBINDCT
.*
.* IOBUNSQR - REASON FOR UNSCHEDULED QUEUE
IOBCPBSY EQUOVR ,,b,IOBUNSQR
IOBNTAV1 EQUOVR ,,b,IOBUNSQR
IOBNTAV2 EQUOVR ,,b,IOBUNSQR
IOBKNWR  EQUOVR ,,b,IOBUNSQR
IOBKNRWR EQUOVR ,,b,IOBUNSQR
IOBRSV30 EQUOVR ,,b,IOBUNSQR
IOBRSV31 EQUOVR ,,b,IOBUNSQR
IOBRSV32 EQUOVR ,,b,IOBUNSQR
.*
.* IOBSTATA - STATUS INDICATORS
IOBAVLFL EQUOVR ,,b,IOBSTATA
IOBRSV20 EQUOVR ,,b,IOBSTATA
IOBRSV21 EQUOVR ,,b,IOBSTATA
IOBRSV22 EQUOVR ,,b,IOBSTATA
IOBRSV23 EQUOVR ,,b,IOBSTATA
IOBRSV24 EQUOVR ,,b,IOBSTATA
IOBRSV25 EQUOVR ,,b,IOBSTATA
IOBRSV26 EQUOVR ,,b,IOBSTATA
.*
.* IOBDTYPE - THE TYPE OF REQUEST AND SPECIFIED OPTIONS
IOBVERFY EQUOVR ,,b,IOBDTYPE
IOBOVFLO EQUOVR ,,b,IOBDTYPE
IOBEXTSC EQUOVR ,,b,IOBDTYPE
IOBFDBCK EQUOVR ,,b,IOBDTYPE
IOBACTAD EQUOVR ,,b,IOBDTYPE
IOBDYNBF EQUOVR ,,b,IOBDTYPE
IOBRDEXC EQUOVR ,,b,IOBDTYPE
IOBRELBL EQUOVR ,,b,IOBDTYPE
.*
.* IOBDTYP2 - SECOND BYTE OF OPTIONS AND REQUESTS
IOBSKEY  EQUOVR ,,b,IOBDTYP2
IOBSBLKL EQUOVR ,,b,IOBDTYP2
IOBSUFFX EQUOVR ,,b,IOBDTYP2
IOBRQUST EQUOVR ,,b,IOBDTYP2
IOBTYPE  EQUOVR ,,b,IOBDTYP2
IOBADDTY EQUOVR ,,b,IOBDTYP2
IOBRELEX EQUOVR ,,b,IOBDTYP2
.*
.* IOBSTAT1 - FLAG BYTE
IOBABNRM EQUOVR ,,b,IOBSTAT1
IOBNEWVL EQUOVR ,,b,IOBSTAT1
IOBSYNCH EQUOVR ,,b,IOBSTAT1
IOBPASS2 EQUOVR ,,b,IOBSTAT1
IOBENQUE EQUOVR ,,b,IOBSTAT1
IOBBUFF  EQUOVR ,,b,IOBSTAT1
IOBADDVU EQUOVR ,,b,IOBSTAT1
IOBSIORT EQUOVR ,,b,IOBSTAT1
.*
.* IOBREQ - REQUEST FLAGS
IOBREC31 EQUOVR ,,b,IOBREQ
IOBKEY31 EQUOVR ,,b,IOBREQ
IOBDAT31 EQUOVR ,,b,IOBREQ
.*
         MNOTE *,'Including IEZIOB mapping macro'
         IEZIOB ,
         DSOVR *END
         EQUOVR *END
*
IOB      DSECT ,                       * Resume IOB DSECT
         ORG
IOB_LEN  EQU   *-IOB                   * Length of IOB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPIOQ   0100-20096-20096-0111-00133-00133-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the IOS Queue element
.*
&LABEL   MAPIOQ &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPIOQ                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPIOQ         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'IOQ').EMBED
         AIF   ('&CB' EQ 'IOQE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPIOQ).MEND
&BXA_MAC_MAPIOQ SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_IOQ
         GBLC  &BXA_CB_IOQE
&BXA_CB_IOQ SETC 'IOQ'
&BXA_CB_IOQE SETC 'IOQ'
.*
.* IOQFLA - IOQ activity flag byte
IOQACTV  EQUOVR ,,b,IOQFLA
IOQMERGE EQUOVR ,,b,IOQFLA
IOQPRVT  EQUOVR ,,b,IOQFLA
IOQWLM   EQUOVR ,,b,IOQFLA
.*
.* IOQTYPE - Type of operation this IOQ represents.
IOQSTRT  EQUOVR ,,v,IOQTYPE
IOQSNS   EQUOVR ,,v,IOQTYPE
IOQHLT   EQUOVR ,,v,IOQTYPE
IOQCLR   EQUOVR ,,v,IOQTYPE
IOQSTOR  EQUOVR ,,v,IOQTYPE
IOQMDFY  EQUOVR ,,v,IOQTYPE
IOQST1   EQUOVR ,,v,IOQTYPE
IOQINCPT EQUOVR ,,v,IOQTYPE
.*
.* IOQSMGAL - IOQ allocation indication byte
IOQALLOC EQUOVR ,,v,IOQTYPE
IOQDORMT EQUOVR ,,v,IOQTYPE
.*
         MNOTE *,'Including IECDIOQ mapping macro'
         IECDIOQ IOSIOQM=YES,IOSIOQME=YES
         EQUOVR *END
*
IOQ      DSECT ,                       * Resume IOQ DSECT
         ORG
IOQ_LEN  EQU   *-IOQ                   * Length of IOQ
*
IOQE     DSECT ,                       * Resume IOQE DSECT
         ORG
IOQE_LEN EQU   *-IOQE                  * Length of IOQE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPIOSB  0100-20096-20096-0111-00353-00353-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the I/O Supervisor Block
.*
&LABEL   MAPIOSB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPIOSB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPIOSB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'IOSB').EMBED
         AIF   ('&CB' EQ 'IOSX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPIOSB).MEND
&BXA_MAC_MAPIOSB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_IOSB
         GBLC  &BXA_CB_IOSX
&BXA_CB_IOSB SETC 'IOSB'
&BXA_CB_IOSX SETC 'IOSB'
.*
.* IOSFLA - Flag byte A
IOSDCHN  EQUOVR ,,b,IOSFLA
IOSCCHN  EQUOVR ,,b,IOSFLA
IOSACHN  EQUOVR ,,b,IOSFLA
IOSERR   EQUOVR ,,b,IOSFLA
IOSSMDA  EQUOVR ,,b,IOSFLA
IOSSMDB  EQUOVR ,,b,IOSFLA
IOSEX    EQUOVR ,,b,IOSFLA
IOSDOM   EQUOVR ,,b,IOSFLA
IOSIOSB  EQUOVR ,,b,IOSFLA
.*
.* IOSFLB - Flag byte B
IOSDIESE EQUOVR ,,b,IOSFLB
IOSSDR   EQUOVR ,,b,IOSFLB
IOSNOTRS EQUOVR ,,b,IOSFLB
IOSRESRC EQUOVR ,,b,IOSFLB
IOSIONRD EQUOVR ,,b,IOSFLB
IOSMSG   EQUOVR ,,b,IOSFLB
IOSBDCST EQUOVR ,,b,IOSFLB
IOSLOG   EQUOVR ,,b,IOSFLB
.*
.* IOSFLC - Flag byte C
IOSGDPLP EQUOVR ,,b,IOSFLC
IOSVERIF EQUOVR ,,b,IOSFLC
IOSCC3WE EQUOVR ,,b,IOSFLC
IOSEXP   EQUOVR ,,b,IOSFLC
IOSNORTY EQUOVR ,,b,IOSFLC
IOSCTCNR EQUOVR ,,b,IOSFLC
IOSGDP   EQUOVR ,,b,IOSFLC
.*
.* IOSPROC - IOS special processing procedures
IOSAPCI  EQUOVR ,,v,IOSPROC
IOSATTN  EQUOVR ,,v,IOSPROC
IOSAPURG EQUOVR ,,v,IOSPROC
IOSAWTO  EQUOVR ,,v,IOSPROC
IOSADDR  EQUOVR ,,v,IOSPROC
IOSADIER EQUOVR ,,v,IOSPROC
IOSAUR   EQUOVR ,,v,IOSPROC
IOSAST1  EQUOVR ,,v,IOSPROC
IOSASNRQ EQUOVR ,,v,IOSPROC
IOSACLR  EQUOVR ,,v,IOSPROC
IOSAHALT EQUOVR ,,v,IOSPROC
IOSAMOD  EQUOVR ,,v,IOSPROC
IOSASTOR EQUOVR ,,v,IOSPROC
.*
.* IOSDVRID - Driver identification value
IOSIOSID EQUOVR ,,v,IOSDVRID
IOSMISID EQUOVR ,,v,IOSDVRID
IOSXCPID EQUOVR ,,v,IOSDVRID
IOSVSAID EQUOVR ,,v,IOSDVRID
IOSATMID EQUOVR ,,v,IOSDVRID
IOSTCMID EQUOVR ,,v,IOSDVRID
IOSOLTID EQUOVR ,,v,IOSDVRID
IOSFCHID EQUOVR ,,v,IOSDVRID
IOSJESID EQUOVR ,,v,IOSDVRID
IOSSS1ID EQUOVR ,,v,IOSDVRID
IOSPRGID EQUOVR ,,v,IOSDVRID
IOSVPSID EQUOVR ,,v,IOSDVRID
IOSASMID EQUOVR ,,v,IOSDVRID
IOSMDSID EQUOVR ,,v,IOSDVRID
IOSAUSID EQUOVR ,,v,IOSDVRID
IOSDYPID EQUOVR ,,v,IOSDVRID
IOSDAVV  EQUOVR ,,v,IOSDVRID
IOSDCSID EQUOVR ,,v,IOSDVRID
IOSAOMID EQUOVR ,,v,IOSDVRID
IOSSMSID EQUOVR ,,v,IOSDVRID
IOSXCFID EQUOVR ,,v,IOSDVRID
IOSCDRID EQUOVR ,,v,IOSDVRID
IOSSLFID EQUOVR ,,v,IOSDVRID
IOSV33ID EQUOVR ,,v,IOSDVRID
IOSCLRID EQUOVR ,,v,IOSDVRID
IOSSCRID EQUOVR ,,v,IOSDVRID
IOSV16ID EQUOVR ,,v,IOSDVRID
IOSAPRID EQUOVR ,,v,IOSDVRID
IOSMIHID EQUOVR ,,v,IOSDVRID
IOSPRVID EQUOVR ,,v,IOSDVRID
IOSRSVID EQUOVR ,,v,IOSDVRID
.*
.* IOSFLD - Flag byte D
IOSNOINT EQUOVR ,,b,IOSFLD
IOSMNORQ EQUOVR ,,b,IOSFLD
IOSEPCIF EQUOVR ,,b,IOSFLD
IOSCCWDS EQUOVR ,,b,IOSFLD
IOSEPCIS EQUOVR ,,b,IOSFLD
IOSLIOPF EQUOVR ,,b,IOSFLD
IOSNOLL  EQUOVR ,,b,IOSFLD
IOSBEXTF EQUOVR ,,b,IOSFLD
.*
.* IOSPKEY - Protect key of IOSPGAD
IOSLCL   EQUOVR ,,b,IOSPKEY
IOSIDR   EQUOVR ,,b,IOSPKEY
IOSPGDPX EQUOVR ,,b,IOSPKEY
IOSCHCMP EQUOVR ,,b,IOSPKEY
.*
.* IOSCOD - I/O completion code field
IOSERRC  EQUOVR ,,v,IOSCOD
IOSEXTC  EQUOVR ,,v,IOSCOD
IOSDPXC  EQUOVR ,,v,IOSCOD
IOSINTC  EQUOVR ,,v,IOSCOD
IOSABNC  EQUOVR ,,v,IOSCOD
IOSCD46  EQUOVR ,,v,IOSCOD
IOSEXTRM EQUOVR ,,v,IOSCOD
IOSPRGC  EQUOVR ,,v,IOSCOD
IOSCNCLD EQUOVR ,,v,IOSCOD
IOSPVTIO EQUOVR ,,v,IOSCOD
IOSTAPEC EQUOVR ,,v,IOSCOD
IOSIVEXP EQUOVR ,,v,IOSCOD
IOSGDPCC EQUOVR ,,v,IOSCOD
IOSGDPRD EQUOVR ,,v,IOSCOD
IOSCD50  EQUOVR ,,v,IOSCOD
IOSMIHCA EQUOVR ,,v,IOSCOD
IOSMIHSP EQUOVR ,,v,IOSCOD
IOSIOTCR EQUOVR ,,v,IOSCOD
IOSCAPAS EQUOVR ,,v,IOSCOD
IOSGDPWE EQUOVR ,,v,IOSCOD
IOSFTCHC EQUOVR ,,v,IOSCOD
IOSMIHC  EQUOVR ,,v,IOSCOD
IOSXERPL EQUOVR ,,v,IOSCOD
IOSFINTC EQUOVR ,,v,IOSCOD
IOSNRMC  EQUOVR ,,v,IOSCOD
.*
.* IOSOPT - Options byte
IOSBYP   EQUOVR ,,b,IOSOPT
IOSDEP   EQUOVR ,,b,IOSOPT
IOSQISCE EQUOVR ,,b,IOSOPT
IOSPSLL  EQUOVR ,,b,IOSOPT
IOSNERP  EQUOVR ,,b,IOSOPT
IOSTSLL  EQUOVR ,,b,IOSOPT
IOSAPR   EQUOVR ,,b,IOSOPT
IOSRELSE EQUOVR ,,b,IOSOPT
.*
.* IOSOPT2 - Second option byte
IOSF     EQUOVR ,,b,IOSOPT2
IOSP     EQUOVR ,,b,IOSOPT2
IOSI     EQUOVR ,,b,IOSOPT2
IOSA     EQUOVR ,,b,IOSOPT2
IOSSI    EQUOVR ,,b,IOSOPT2
IOSZ     EQUOVR ,,b,IOSOPT2
IOSE     EQUOVR ,,b,IOSOPT2
IOSN     EQUOVR ,,b,IOSOPT2
.*
.* IOSCC - Start Subchannel deferred CC
IOSCC3   EQUOVR ,,v,IOSCC
IOSCC1   EQUOVR ,,v,IOSCC
IOSCC0   EQUOVR ,,v,IOSCC
.*
.* IOSDSTAT - Device status
IOSDSATN EQUOVR ,,b,IOSDSTAT
IOSDSSM  EQUOVR ,,b,IOSDSTAT
IOSDSCUE EQUOVR ,,b,IOSDSTAT
IOSDSBSY EQUOVR ,,b,IOSDSTAT
IOSDSCE  EQUOVR ,,b,IOSDSTAT
IOSDSDE  EQUOVR ,,b,IOSDSTAT
IOSDSUC  EQUOVR ,,b,IOSDSTAT
IOSDSUEX EQUOVR ,,b,IOSDSTAT
.*
.* IOSSSTAT - Subchannel status
IOSSSPCI EQUOVR ,,b,IOSSSTAT
IOSSSIL  EQUOVR ,,b,IOSSSTAT
IOSSSPGC EQUOVR ,,b,IOSSSTAT
IOSSSPTC EQUOVR ,,b,IOSSSTAT
IOSSSCDC EQUOVR ,,b,IOSSSTAT
IOSSSCCC EQUOVR ,,b,IOSSSTAT
IOSSSICC EQUOVR ,,b,IOSSSTAT
IOSSSCC  EQUOVR ,,b,IOSSSTAT
.*
.* IOSSCHC0 - Subchannel Control - Byte 0
IOSFC    EQUOVR ,,b,IOSSCHC0
IOSFSSCH EQUOVR ,,b,IOSSCHC0
IOSFHSCH EQUOVR ,,b,IOSSCHC0
IOSFCSCH EQUOVR ,,b,IOSSCHC0
IOSAC    EQUOVR ,,b,IOSSCHC0
IOSARSCH EQUOVR ,,b,IOSSCHC0
IOSASSCH EQUOVR ,,b,IOSSCHC0
IOSAHSCH EQUOVR ,,b,IOSSCHC0
IOSACSCH EQUOVR ,,b,IOSSCHC0
.*
.* IOSSCHC1 - Subchannel Control - byte 1
IOSAC2   EQUOVR ,,b,IOSSCHC1
IOSASUBA EQUOVR ,,b,IOSSCHC1
IOSADEVA EQUOVR ,,b,IOSSCHC1
IOSSSPND EQUOVR ,,b,IOSSCHC1
IOSSC    EQUOVR ,,b,IOSSCHC1
IOSSALRT EQUOVR ,,b,IOSSCHC1
IOSSINTR EQUOVR ,,b,IOSSCHC1
IOSSPRIM EQUOVR ,,b,IOSSCHC1
IOSSSEC  EQUOVR ,,b,IOSSCHC1
IOSSPNDG EQUOVR ,,b,IOSSCHC1
.*
.* IOSSNS - Sense data - 1st 2 bytes
IOSSNSBD EQUOVR ,,v,IOSSNS
.*
.* IOSCKEY - On STARTIO- Channel program
IOSIRBKY EQUOVR ,,b,IOSCKEY
IOSS     EQUOVR ,,b,IOSCKEY
IOSIRBL  EQUOVR ,,b,IOSCKEY
IOSIRBCC EQUOVR ,,b,IOSCKEY
IOSIRBC3 EQUOVR ,,b,IOSCKEY
IOSIRBC1 EQUOVR ,,b,IOSCKEY
IOSIRBC0 EQUOVR ,,v,IOSCKEY
.*
.* IOSAFLGS - Attention Flags
IOSAINTR EQUOVR ,,b,IOSAFLGS
IOSAINTE EQUOVR ,,b,IOSAFLGS
.*
.* IOSFLB field bit definitions -- Modify Subchannel requests only
IOSMLPMO EQUOVR ,,b,IOSFLB
IOSMPOMO EQUOVR ,,b,IOSFLB
IOSMMMO  EQUOVR ,,b,IOSFLB
IOSASIS  EQUOVR ,,b,IOSFLB
.*
.* IOSOPT
IOSSYN   EQUOVR ,,b,IOSOPT
IOSNOPTH EQUOVR ,,b,IOSOPT
.*
.* IOSOPT2
IOSMISC  EQUOVR ,,b,IOSOPT2
IOSME    EQUOVR ,,b,IOSOPT2
IOSMLM   EQUOVR ,,b,IOSOPT2
IOSMMM   EQUOVR ,,b,IOSOPT2
IOSMLPM  EQUOVR ,,b,IOSOPT2
IOSMMBI  EQUOVR ,,b,IOSOPT2
IOSMPOM  EQUOVR ,,b,IOSOPT2
IOSMD    EQUOVR ,,b,IOSOPT2
.*
.* IOSXFLG1 - Flag byte 1
IOSXNORQ EQUOVR ,,b,IOSXFLG1
IOSXGDPR EQUOVR ,,b,IOSXFLG1
IOSXDDRT EQUOVR ,,b,IOSXFLG1
IOSXMIHI EQUOVR ,,b,IOSXFLG1
IOSXIOSI EQUOVR ,,b,IOSXFLG1
IOSXDPSV EQUOVR ,,b,IOSXFLG1
IOSXIOSN EQUOVR ,,b,IOSXFLG1
IOSXATPS EQUOVR ,,b,IOSXFLG1
.*
.* IOSXFLG2 - Flag byte 2
IOSXIOT  EQUOVR ,,b,IOSXFLG2
IOSXNMIH EQUOVR ,,b,IOSXFLG2
.*
.* IOSXRCOD - Reason code detailing the IOSCOD value
IOSXRC9  EQUOVR ,,v,IOSXRCOD
IOSXRC10 EQUOVR ,,v,IOSXRCOD
.*
         MNOTE *,'Including IECDIOSB mapping macro'
         IECDIOSB IOSIOSBE=YES         * Include IOSB extension
         EQUOVR *END
*
IOSB     DSECT ,                       * Resume IOSB DSECT
         ORG   ,                       *
IOSB_LEN EQU   L'IOSBSTD               * Length of IOSB
IOSX_LEN EQU   *-IOSB-IOSB_LEN         * Length of IOSb eXtension
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPJCT   0100-20096-20096-0111-00169-00169-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Job Control Table
.*
&LABEL   MAPJCT &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPJCT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPJCT         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ACT').EMBED
         AIF   ('&CB' EQ 'JCT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPJCT).MEND
&BXA_MAC_MAPJCT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ACT
         GBLC  &BXA_CB_JCT
&BXA_CB_ACT SETC 'JCT'
&BXA_CB_JCT SETC 'JCT'
.*
.* JCTIDENT - JCT ID = 0
JCTID EQUOVR ,,v,JCTIDENT
.*
.* JCTJSTAT - JOB STATUS INDICATORS
JCTJSTPC EQUOVR ,,b,JCTJSTAT
JCTABEND EQUOVR ,,b,JCTJSTAT
INCMSTS  EQUOVR ,,b,JCTJSTAT
INDMCTLG EQUOVR ,,b,JCTJSTAT
INCMCAT  EQUOVR ,,b,JCTJSTAT
INCMNSET EQUOVR ,,b,JCTJSTAT
.*
.* JCTJMGLV - 4 BITS FOR MESSAGE LEVEL -SET BY IEFVJA
INCMMGL1 EQUOVR ,,b,JCTJMGLV
INCMMGL2 EQUOVR ,,b,JCTJMGLV
INCMALL  EQUOVR ,,b,JCTJMGLV
.*
.* JCTRSW1 - CHECKPOINT/RESTART SWITCHES
JCTWARMS EQUOVR ,,b,JCTRSW1
JCTSTERM EQUOVR ,,b,JCTRSW1
JCTCONTR EQUOVR ,,b,JCTRSW1
JCTCKFT  EQUOVR ,,b,JCTRSW1
JCTCKPTR EQUOVR ,,b,JCTRSW1
JCTSTEPR EQUOVR ,,b,JCTRSW1
.*
.* JCTRSW2 - CHECKPOINT/RESTART SWITCHES
JCTSYSCK EQUOVR ,,b,JCTRSW2
JCTNARST EQUOVR ,,b,JCTRSW2
JCTNORST EQUOVR ,,b,JCTRSW2
JCTNOCKP EQUOVR ,,b,JCTRSW2
JCTRESTT EQUOVR ,,b,JCTRSW2
JCTDSOCR EQUOVR ,,b,JCTRSW2
JCTDSOJB EQUOVR ,,b,JCTRSW2
.*
.* JCTJSB - JOB STATUS SWITCHES
JCTHASDD EQUOVR ,,b,JCTJSB
JCTJSBIN EQUOVR ,,b,JCTJSB
JCTJSBAL EQUOVR ,,b,JCTJSB
JCTJSBEX EQUOVR ,,b,JCTJSB
JCTJSBTM EQUOVR ,,b,JCTJSB
.*
.* JCTSTAT2 - ADDITIONAL STATUS INDICATORS
JCTSPSYS EQUOVR ,,b,JCTSTAT2
JCTADSPC EQUOVR ,,b,JCTSTAT2
JCTENDIT EQUOVR ,,b,JCTSTAT2
JCTSWSM  EQUOVR ,,b,JCTSTAT2
JCTPERFM EQUOVR ,,b,JCTSTAT2
JCTBLP   EQUOVR ,,b,JCTSTAT2
JCTSISO  EQUOVR ,,b,JCTSTAT2
JCTSWAUP EQUOVR ,,b,JCTSTAT2
.*
.* ACTIDENT - TABLE ID  ACT = 16
ACTID EQUOVR ,,v,ACTIDENT
.*
.* IEFAJCTB does no provide a DSECT statement
JCT      DSECT ,
.*
         MNOTE *,'Including IEFAJCTB mapping macro'
         IEFAJCTB ,
         EQUOVR *END
*
JCT      DSECT ,                       * Resume JCT DSECT
         ORG
JCT_LEN  EQU   JCTLNGTH                * Length of JCT
.*
ACT      EQU   IEFAACTB                * Label for ACT
ACT_LEN  EQU   *-ACT                   * Length of ACT
.*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPJCTX  0100-20096-20096-0111-00118-00118-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Job Control Table eXtension
.*
&LABEL   MAPJCTX &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPJCTX                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPJCTX        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'JCTX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPJCTX).MEND
&BXA_MAC_MAPJCTX SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_JCTX
&BXA_CB_JCTX SETC 'JCTX'
.*
.* JCTXIDNT - JCTX ID = 30
JCTXID   EQUOVR ,,v,JCTXIDNT
.*
.* JCTXVERS - VERSION LEVEL OF ALL SWA CHAIN
JCTX3320 EQUOVR ,,v,JCTXVERS
JCTX4420 EQUOVR ,,v,JCTXVERS
JCTXCVER EQUOVR ,,v,JCTXVERS
JCTXLVID EQUOVR ,,v,JCTXVERS
.*
.* IEFJCTX does no provide a DSECT statement
JCTX     DSECT ,
.*
         MNOTE *,'Including IEFJCTX mapping macro'
         IEFJCTX ,
         EQUOVR *END
*
JCTX     DSECT ,                       * Resume JCTX DSECT
         ORG
JCTX_LEN EQU   *-JCTX                  * Length of JCTX
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPJESCT 0100-20096-20096-0111-00150-00150-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the JES Communication Table
.*
&LABEL   MAPJESCT &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPJESCT               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPJESCT       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'JESCT').EMBED
         AIF   ('&CB' EQ 'JESMNTBL').EMBED
         AIF   ('&CB' EQ 'JESPEXT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPJESCT).MEND
&BXA_MAC_MAPJESCT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_JESCT
         GBLC  &BXA_CB_JESMNTBL
         GBLC  &BXA_CB_JESPEXT
&BXA_CB_JESCT SETC 'JESCT'
&BXA_CB_JESMNTBL SETC 'JESCT'
&BXA_CB_JESPEXT SETC 'JESCT'
.*
.* JESFLG - FLAG BYTE
JESJSSNT EQUOVR ,,b,JESFLG
JESFSIT  EQUOVR ,,b,JESFLG
JESFRQEX EQUOVR ,,b,JESFLG
JESRSV15 EQUOVR ,,b,JESFLG
JESRSV16 EQUOVR ,,b,JESFLG
JESRSV17 EQUOVR ,,b,JESFLG
JESRSV18 EQUOVR ,,b,JESFLG
JESRSV19 EQUOVR ,,b,JESFLG
.*
.* JESJESFG - PRIMARY SUBSYSTEM FLAGS
JESPSUBA EQUOVR ,,b,JESJESFG
JESPSUBI EQUOVR ,,b,JESJESFG
JES3ACTV EQUOVR ,,b,JESJESFG
JES3OUTD EQUOVR ,,b,JESJESFG
JESRSV24 EQUOVR ,,b,JESJESFG
JESRSV25 EQUOVR ,,b,JESJESFG
JESRSV26 EQUOVR ,,b,JESJESFG
JESRSV27 EQUOVR ,,b,JESJESFG
.*
.* JESALLOF - ALLOCATION FUNCTION FLAGS
JESUASR  EQUOVR ,,b,JESALLOF
JESUASF  EQUOVR ,,b,JESALLOF
JESUPLER EQUOVR ,,b,JESALLOF
JESALRDY EQUOVR ,,b,JESALLOF
JESV2EDT EQUOVR ,,b,JESALLOF
JESRSV05 EQUOVR ,,b,JESALLOF
JESRSV06 EQUOVR ,,b,JESALLOF
JESRSV07 EQUOVR ,,b,JESALLOF
.*
         MNOTE *,'Including IEFJESCT mapping macro'
         IEFJESCT MNTBL=YES            * Include JESMNTBL
         EQUOVR *END
*
JESCT    DSECT ,                       * Restart JESCT
         ORG   ,                       *
JESCT_LEN EQU  *-JESCT                 * Length of JESCT
*
JESMNTBL DSECT ,                       * Restart JESMNTBL
         ORG   ,                       *
JESMNTBL_LEN EQU *-JESMNTBL            * Length of JESMNTBL
*
JESPEXT  DSECT ,                       * Restart JESPEXT
         ORG   ,                       *
JESPEXT_LEN EQU *-JESPEXT              * Length of JESPEXT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPJFCB  0100-20096-20096-0111-00436-00436-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Job File Control Block
.*
&LABEL   MAPJFCB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPJFCB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPJFCB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'JFCB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPJFCB).MEND
&BXA_MAC_MAPJFCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_JFCB
&BXA_CB_JFCB SETC 'JFCB'
.*
.* JFCBTSDM - JOB MANAGEMENT/DATA MANAGEMENT INTERFACE
JFCCAT   EQUOVR ,,b,JFCBTSDM
JFCVSL   EQUOVR ,,b,JFCBTSDM
JFCSDS   EQUOVR ,,b,JFCBTSDM
JFCTTR   EQUOVR ,,b,JFCBTSDM
JFCNWRIT EQUOVR ,,b,JFCBTSDM
JFCNDSCB EQUOVR ,,b,JFCBTSDM
JFCNDCB  EQUOVR ,,b,JFCBTSDM
JFCPAT   EQUOVR ,,b,JFCBTSDM
.*
.* JFCTDSI1 -  TDSI byte 1
JFCTRKNO EQUOVR ,,b,JFCTDSI1
JFCNOREC EQUOVR ,,v,JFCTDSI1
JFC18TRK EQUOVR ,,b,JFCTDSI1
JFC36TRK EQUOVR ,,b,JFCTDSI1
JFC128TK EQUOVR ,,b,JFCTDSI1
JFCMEDIA EQUOVR ,,b,JFCTDSI1
JFCNOMED EQUOVR ,,v,JFCTDSI1
JFCBMED1 EQUOVR ,,v,JFCTDSI1
JFCBMED2 EQUOVR ,,v,JFCTDSI1
JFCBMED3 EQUOVR ,,v,JFCTDSI1
JFCBMED4 EQUOVR ,,v,JFCTDSI1
JFCBMED5 EQUOVR ,,v,JFCTDSI1
JFCBMED6 EQUOVR ,,v,JFCTDSI1
JFCBMED7 EQUOVR ,,v,JFCTDSI1
JFCBMED8 EQUOVR ,,v,JFCTDSI1
.*
.* JFCTDSI2 - TDSI byte 2
JFCOMPTY EQUOVR ,,b,JFCTDSI2
JFCCMPNS EQUOVR ,,v,JFCTDSI2
JFCNOCMP EQUOVR ,,b,JFCTDSI2
JFCBIDRC EQUOVR ,,b,JFCTDSI2
JFCBCMPY EQUOVR ,,b,JFCTDSI2
JFCSPECL EQUOVR ,,b,JFCTDSI2
JFCNOSPC EQUOVR ,,v,JFCTDSI2
JFCRDCOM EQUOVR ,,b,JFCTDSI2
.*
.* JFCBLTYP - LABEL TYPE (LABEL=)
JFCDSEQN EQUOVR ,,b,JFCBLTYP
JFCBAL   EQUOVR ,,b,JFCBLTYP
JFCBLTM  EQUOVR ,,b,JFCBLTYP
JFCBLP   EQUOVR ,,b,JFCBLTYP
JFCSUL   EQUOVR ,,b,JFCBLTYP
JFCNSL   EQUOVR ,,b,JFCBLTYP
JFCSL    EQUOVR ,,b,JFCBLTYP
JFCNL    EQUOVR ,,b,JFCBLTYP
.*
.* JFCBUFOF - TAPE DATA SET - THIS FIELD CONTAINS THE BUFFER OFFSET
JFCBFOFL EQUOVR ,,b,JFCBUFOF
.*
.* JFCFUNC - FUNCTION INDICATORS (DCB=FUNC=)
JFCFNCBI EQUOVR ,,b,JFCFUNC
JFCFNCBR EQUOVR ,,b,JFCFUNC
JFCFNCBP EQUOVR ,,b,JFCFUNC
JFCFNCBW EQUOVR ,,b,JFCFUNC
JFCFNCBD EQUOVR ,,b,JFCFUNC
JFCFNCBX EQUOVR ,,b,JFCFUNC
JFCFNCBT EQUOVR ,,b,JFCFUNC
JFCRSV31 EQUOVR ,,b,JFCFUNC
.*
.* JFCBFLG1 - FLAG BYTE
JFCSTAND EQUOVR ,,b,JFCBFLG1
JFCSLCRE EQUOVR ,,b,JFCBFLG1
JFCSLDES EQUOVR ,,b,JFCBFLG1
JFCDUAL  EQUOVR ,,b,JFCBFLG1
JFCOPEN  EQUOVR ,,b,JFCBFLG1
JFCBPWBP EQUOVR ,,b,JFCBFLG1
.*
.* JFCBFLG2 - FLAG BYTE OF OPEN SWITCHES
JFCINOP  EQUOVR ,,b,JFCBFLG2
JFCOUTOP EQUOVR ,,b,JFCBFLG2
JFCDEFER EQUOVR ,,b,JFCBFLG2
JFCNRPS  EQUOVR ,,b,JFCBFLG2
JFCMODNW EQUOVR ,,b,JFCBFLG2
JFCSDRPS EQUOVR ,,b,JFCBFLG2
JFCTRACE EQUOVR ,,b,JFCBFLG2
JFCBBUFF EQUOVR ,,b,JFCBFLG2
JFCRCTLG EQUOVR ,,b,JFCBFLG2
.*
.* JFCBIND1 - INDICATOR BYTE 1
JFCRLSE  EQUOVR ,,b,JFCBIND1
JFCLOC   EQUOVR ,,b,JFCBIND1
JFCADDED EQUOVR ,,b,JFCBIND1
JFCGDG   EQUOVR ,,b,JFCBIND1
JFCPDS   EQUOVR ,,b,JFCBIND1
JFCBRLSE EQUOVR ,,b,JFCBIND1
JFCBLOCT EQUOVR ,,b,JFCBIND1
JFCBNEWV EQUOVR ,,b,JFCBIND1
JFCBPMEM EQUOVR ,,b,JFCBIND1
.*
.* JFCBIND2 - INDICATOR BYTE 2
JFCDISP  EQUOVR ,,b,JFCBIND2
JFCNEW   EQUOVR ,,b,JFCBIND2
JFCMOD   EQUOVR ,,b,JFCBIND2
JFCOLD   EQUOVR ,,b,JFCBIND2
JFCBRWPW EQUOVR ,,b,JFCBIND2
JFCSECUR EQUOVR ,,b,JFCBIND2
JFCSHARE EQUOVR ,,b,JFCBIND2
JFCENT   EQUOVR ,,b,JFCBIND2
JFCREQ   EQUOVR ,,b,JFCBIND2
JFCTEMP  EQUOVR ,,b,JFCBIND2
JFCBSTAT EQUOVR ,,b,JFCBIND2
JFCBSCTY EQUOVR ,,b,JFCBIND2
JFCBGDGA EQUOVR ,,b,JFCBIND2
.*
.* JFCBHIAR - ** RESERVED-O **
JFCHIER  EQUOVR ,,b,JFCBHIAR
JFCHIER1 EQUOVR ,,b,JFCBHIAR
.*
.* JFCBFALN - BUFFER ALIGNMENT    (DCB=BFALN=)
JFCDWORD EQUOVR ,,b,JFCBFALN
JFCFWORD EQUOVR ,,b,JFCBFALN
.*
.* JFCBFTEK - BUFFERING TECHNIQUE (DCB=BFTEK=)
JFCSIM   EQUOVR ,,b,JFCBFTEK
JFCBBFTA EQUOVR ,,b,JFCBFTEK
JFCBBFTR EQUOVR ,,b,JFCBFTEK
JFCEXC   EQUOVR ,,b,JFCBFTEK
JFCDYN   EQUOVR ,,b,JFCBFTEK
.*
.* JFCEROPT - ERROR OPTION  (DCB=EROPT=)
JFCACC   EQUOVR ,,b,JFCEROPT
JFCSKP   EQUOVR ,,b,JFCEROPT
JFCABN   EQUOVR ,,b,JFCEROPT
JFCTOPT  EQUOVR ,,b,JFCEROPT
JFCRSV02 EQUOVR ,,b,JFCEROPT
JFCRSV03 EQUOVR ,,b,JFCEROPT
JFCRSV04 EQUOVR ,,b,JFCEROPT
JFCRSV05 EQUOVR ,,b,JFCEROPT
.*
.* JFCTRTCH -  TAPE RECORDING TECHNIQUE (DCB=TRTCH=)
JFCEVEN  EQUOVR ,,v,JFCTRTCH
JFCTRAN  EQUOVR ,,v,JFCTRTCH
JFCCONV  EQUOVR ,,v,JFCTRTCH
JFCTREV  EQUOVR ,,v,JFCTRTCH
JFCCOMP  EQUOVR ,,v,JFCTRTCH
JFCNCOMP EQUOVR ,,v,JFCTRTCH
JFC1TRAK EQUOVR ,,v,JFCTRTCH
JFC2TRAK EQUOVR ,,v,JFCTRTCH
JFC4TRAK EQUOVR ,,v,JFCTRTCH
.*
.* JFCCODE -  ** RESERVED-O **    (DCB=CODE=)
JFCNOCON EQUOVR ,,b,JFCCODE
JFCBCD   EQUOVR ,,b,JFCCODE
JFCFRI   EQUOVR ,,b,JFCCODE
JFCBUR   EQUOVR ,,b,JFCCODE
JFCNCR   EQUOVR ,,b,JFCCODE
JFCASCII EQUOVR ,,b,JFCCODE
JFCTTY   EQUOVR ,,b,JFCCODE
JFCRSV32 EQUOVR ,,b,JFCCODE
.*
.* JFCMODE - MODE OF OPERATION (CARD READER, CARD PUNCH)
JFCBIN   EQUOVR ,,b,JFCMODE
JFCEBCD  EQUOVR ,,b,JFCMODE
JFCMODEO EQUOVR ,,b,JFCMODE
JFCMODER EQUOVR ,,b,JFCMODE
JFCRSV06 EQUOVR ,,b,JFCMODE
JFCRSV07 EQUOVR ,,b,JFCMODE
.*
.* JFCSTACK - STACKER SELECTION (CARD READER, CARD PUNCH)
JFCTWO   EQUOVR ,,b,JFCSTACK
JFCONE   EQUOVR ,,b,JFCSTACK
.*
.* JFCPRTSP - NORMAL PRINTER SPACING (DCB=PRTSP=)
JFCSPTHR EQUOVR ,,v,JFCPRTSP
JFCSPTWO EQUOVR ,,v,JFCPRTSP
JFCSPONE EQUOVR ,,v,JFCPRTSP
JFCSPNO  EQUOVR ,,v,JFCPRTSP
.*
.* JFCDEN - TAPE DENSITY - 2400/3400 SERIES MAGNETIC TAPE
JFC200   EQUOVR ,,v,JFCDEN
JFC556   EQUOVR ,,v,JFCDEN
JFC800   EQUOVR ,,v,JFCDEN
JFC1600  EQUOVR ,,v,JFCDEN
JFC6250  EQUOVR ,,v,JFCDEN
.*
.* JFCDSRG1 - BYTE 1 OF JFCDSORG (DCB=DSORG=)
JFCORGIS EQUOVR ,,b,JFCDSRG1
JFCORGPS EQUOVR ,,b,JFCDSRG1
JFCORGDA EQUOVR ,,b,JFCDSRG1
JFCORGCX EQUOVR ,,b,JFCDSRG1
JFCORGCQ EQUOVR ,,b,JFCDSRG1
JFCORGMQ EQUOVR ,,b,JFCDSRG1
JFCORGPO EQUOVR ,,b,JFCDSRG1
JFCORGU  EQUOVR ,,b,JFCDSRG1
.*
.* JFCDSRG2 - BYTE 2 OF JFCDSORG (DCB=DSORG= cont.)
JFCORGGS EQUOVR ,,b,JFCDSRG2
JFCORGTX EQUOVR ,,b,JFCDSRG2
JFCORGTQ EQUOVR ,,b,JFCDSRG2
JFCRSV13 EQUOVR ,,b,JFCDSRG2
JFCORGAM EQUOVR ,,b,JFCDSRG2
JFCORGTR EQUOVR ,,b,JFCDSRG2
JFCRSV15 EQUOVR ,,b,JFCDSRG2
JFCRSV16 EQUOVR ,,b,JFCDSRG2
.*
.* JFCRECFM - RECORD FORMAT (DCB=RECFM=) (AMP=('RECFM='))
JFCRCFM  EQUOVR ,,b,JFCRECFM
JFCFMREC EQUOVR ,,b,JFCRECFM
JFCUND   EQUOVR ,,b,JFCRECFM
JFCFIX   EQUOVR ,,b,JFCRECFM
JFCVAR   EQUOVR ,,b,JFCRECFM
JFCVARD  EQUOVR ,,b,JFCRECFM
JFCRFO   EQUOVR ,,b,JFCRECFM
JFCRFB   EQUOVR ,,b,JFCRECFM
JFCRFS   EQUOVR ,,b,JFCRECFM
JFCCHAR  EQUOVR ,,b,JFCRECFM
JFCASA   EQUOVR ,,b,JFCRECFM
JFCMAC   EQUOVR ,,b,JFCRECFM
JFCNOCC  EQUOVR ,,v,JFCRECFM
.*
.* JFCOPTCD - OPTION CODES (DCB=OPTCD=)
JFCWVCSP EQUOVR ,,b,JFCOPTCD
JFCALLOW EQUOVR ,,b,JFCOPTCD
JFCPCIBT EQUOVR ,,b,JFCOPTCD
JFCBCKPT EQUOVR ,,b,JFCOPTCD
JFCRSV18 EQUOVR ,,b,JFCOPTCD
JFCREDUC EQUOVR ,,b,JFCOPTCD
JFCSRCHD EQUOVR ,,b,JFCOPTCD
JFCRSV21 EQUOVR ,,b,JFCOPTCD
JFCOPTJ  EQUOVR ,,b,JFCOPTCD
.*
JFCWVCIS EQUOVR ,,b,JFCOPTCD
JFCRSV17 EQUOVR ,,b,JFCOPTCD
JFCMAST  EQUOVR ,,b,JFCOPTCD
JFCIND   EQUOVR ,,b,JFCOPTCD
JFCCYL   EQUOVR ,,b,JFCOPTCD
JFCRSV19 EQUOVR ,,b,JFCOPTCD
JFCDEL   EQUOVR ,,b,JFCOPTCD
JFCREORG EQUOVR ,,b,JFCOPTCD
.*
JFCWVCBD EQUOVR ,,b,JFCOPTCD
JFCOVER  EQUOVR ,,b,JFCOPTCD
JFCEXT   EQUOVR ,,b,JFCOPTCD
JFCFEED  EQUOVR ,,b,JFCOPTCD
JFCACT   EQUOVR ,,b,JFCOPTCD
JFCRSV20 EQUOVR ,,b,JFCOPTCD
JFCRSV22 EQUOVR ,,b,JFCOPTCD
JFCREL   EQUOVR ,,b,JFCOPTCD
.*
JFCOPTQ  EQUOVR ,,b,JFCOPTCD
.*
JFCSDNAM EQUOVR ,,b,JFCOPTCD
JFCWUMSG EQUOVR ,,b,JFCOPTCD
JFCCBWU  EQUOVR ,,b,JFCOPTCD
.*
.* JFCPCI - PROGRAM-CONTROLLED INTERRUPTION (PCI) FLAG
JFCPCIX1 EQUOVR ,,b,JFCPCI
JFCPCIX2 EQUOVR ,,b,JFCPCI
JFCPCIA1 EQUOVR ,,b,JFCPCI
JFCPCIA2 EQUOVR ,,b,JFCPCI
JFCPCIN1 EQUOVR ,,b,JFCPCI
JFCPCIN2 EQUOVR ,,b,JFCPCI
JFCPCIR1 EQUOVR ,,b,JFCPCI
JFCPCIR2 EQUOVR ,,b,JFCPCI
.*
.* JFCUCSOP - OPERATION OF THE UCS IMAGE TO BE LOADED
JFCBEXTP EQUOVR ,,b,JFCUCSOP
JFCFOLD  EQUOVR ,,b,JFCUCSOP
JFCRSV25 EQUOVR ,,b,JFCUCSOP
JFCVER   EQUOVR ,,b,JFCUCSOP
JFCFCBAL EQUOVR ,,b,JFCUCSOP
JFCFCBVR EQUOVR ,,b,JFCUCSOP
JFCRSV26 EQUOVR ,,b,JFCUCSOP
JFCRSV27 EQUOVR ,,b,JFCUCSOP
.*
.* JFCCPRI - TRANSMISSION PRIORITY (DCB=CPRI=)   (TCAM)
JFCRSV53 EQUOVR ,,b,JFCCPRI
JFCRSV54 EQUOVR ,,b,JFCCPRI
JFCRSV55 EQUOVR ,,b,JFCCPRI
JFCRSV33 EQUOVR ,,b,JFCCPRI
JFCRSV34 EQUOVR ,,b,JFCCPRI
JFCRECV  EQUOVR ,,b,JFCCPRI
JFCEQUAL EQUOVR ,,b,JFCCPRI
JFCSEND  EQUOVR ,,b,JFCCPRI
.*
.* JFCBPQTY - SPACE= Primary quantity  (SPACE=(,(prim-qty)))
JFCBPQTY DSOVR 0FL3
.*
.* JFCBCTRI - SPACE PARAMETERS (SPACE=)
JFCBSPAC EQUOVR ,,b,JFCBCTRI
JFCBCYL  EQUOVR ,,b,JFCBCTRI
JFCBTRK  EQUOVR ,,b,JFCBCTRI
JFCBAVR  EQUOVR ,,b,JFCBCTRI
JFCBMSGP EQUOVR ,,b,JFCBCTRI
.* JFCRSV29 EQUOVR ,,b,JFCBCTRI     Last seen in z/OS
JFCONTIG EQUOVR ,,b,JFCBCTRI
JFCMIXG  EQUOVR ,,b,JFCBCTRI
JFCALX   EQUOVR ,,b,JFCBCTRI
JFCROUND EQUOVR ,,b,JFCBCTRI
JFCBABS  EQUOVR ,,v,JFCBCTRI
.*
.* JFCBSQTY - SPACE= Secondary quantity (SPACE=(,(,sec-qty)))
JFCBSQTY DSOVR 0FL3
.*
.* JFCBDQTY - SPACE= Directory quantity (SPACE=(,(,,dir-qty)))
JFCBDQTY DSOVR FL3
.*
.* JFCFLGS1 - FLAG BYTE (ICB488)
JFCBDLET EQUOVR ,,b,JFCFLGS1
JFCBLSR  EQUOVR ,,b,JFCFLGS1
JFCTOPEN EQUOVR ,,b,JFCFLGS1
JFCBADSP EQUOVR ,,b,JFCFLGS1
JFCBPROT EQUOVR ,,b,JFCFLGS1
JFCBCEOV EQUOVR ,,b,JFCFLGS1
JFCVRDS  EQUOVR ,,b,JFCFLGS1
JFCBCKDS EQUOVR ,,b,JFCFLGS1
JFCBUAFF EQUOVR ,,b,JFCFLGS1
.*
.* JFCBFLG3 - FLAG BYTE (OS/VS2)  (MDC316)
JFCDQDSP EQUOVR ,,b,JFCBFLG3
JFCBEXP  EQUOVR ,,b,JFCBFLG3
JFCBBFTK EQUOVR ,,b,JFCBFLG3
JFCPOSID EQUOVR ,,b,JFCBFLG3
.* JFCBRV04 EQUOVR ,,b,JFCBFLG3        * Last seen in OS/390 V2R6
JFCTEMPS EQUOVR ,,b,JFCBFLG3           * replaces JFCBRV04
.* JFCBRV05 EQUOVR ,,b,JFCBFLG3        * Last seen in OS/390 V2R6
JFCBDDTK EQUOVR ,,b,JFCBFLG3           * replaces JFCBRV05
JFCBRV06 EQUOVR ,,b,JFCBFLG3
JFCBRV07 EQUOVR ,,b,JFCBFLG3
.*
.* JFCVLDQ - Volser dequeue indicators
JFCVLDQ1 EQUOVR ,,b,JFCVLDQ
JFCVLDQ2 EQUOVR ,,b,JFCVLDQ
JFCVLDQ3 EQUOVR ,,b,JFCVLDQ
JFCVLDQ4 EQUOVR ,,b,JFCVLDQ
JFCVLDQ5 EQUOVR ,,b,JFCVLDQ
.*
.* IEFJFCBN does not generate a DSECT-statement
         MNOTE *,'Including IEFJFCBN mapping macro'
JFCB     DSECT ,                       * Start of JFCB DSECT
         IEFJFCBN LIST=YES             * Keep current listing options
         EQUOVR *END
         DSOVR *END
*
         ORG   ,                       *
JFCB_LEN EQU   *-JFCB                  * Length of JFCB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPJFCBE 0100-20096-20096-0111-00119-00119-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Job File Control Block Extension for 3800
.*
&LABEL   MAPJFCBE &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPJFCBE               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPJFCBE       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'JFCBE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPJFCBE).MEND
&BXA_MAC_MAPJFCBE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_JFCBE
&BXA_CB_JFCBE SETC 'JFCBE'
.*
.* JFCBETYP - TABLE ID OF JFCBE
JFCBEID  EQUOVR ,,v,JFCBETYP
.*
.* JFCBFLAG - FLAG BYTE
JFCBEOPN EQUOVR ,,b,JFCBFLAG
JFCBE003 EQUOVR ,,b,JFCBFLAG
JFCBE004 EQUOVR ,,b,JFCBFLAG
JFCBE005 EQUOVR ,,b,JFCBFLAG
JFCBE006 EQUOVR ,,b,JFCBFLAG
JFCBCFS  EQUOVR ,,b,JFCBFLAG
JFCBBST  EQUOVR ,,b,JFCBFLAG
JFCBE007 EQUOVR ,,b,JFCBFLAG
.*
         MNOTE *,'Including IEFJFCBE mapping macro'
         IEFJFCBE ,                    *
         EQUOVR *END
*
JFCBE    DSECT ,                       * Resume JFCBE DSECT
         ORG   ,                       *
JFCBE_LEN EQU  *-JFCBE                 * Length of JFCBE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPJFCBX 0100-20096-20096-0111-00125-00125-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Job File Control Block eXtension
.*
&LABEL   MAPJFCBX &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPJFCBX               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPJFCBX       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'JFCBX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPJFCBX).MEND
&BXA_MAC_MAPJFCBX SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_JFCBX
&BXA_CB_JFCBX SETC 'JFCBX'
.*
.* JFCXVD - Volser dequeue indicators
JFCXVD1  EQUOVR ,,b,JFCXVD
JFCXVD2  EQUOVR ,,b,JFCXVD
JFCXVD3  EQUOVR ,,b,JFCXVD
JFCXVD4  EQUOVR ,,b,JFCXVD
JFCXVD5  EQUOVR ,,b,JFCXVD
JFCXVD6  EQUOVR ,,b,JFCXVD
JFCXVD7  EQUOVR ,,b,JFCXVD
JFCXVD8  EQUOVR ,,b,JFCXVD
JFCXVD9  EQUOVR ,,b,JFCXVD
JFCXVD10 EQUOVR ,,b,JFCXVD
JFCXVD11 EQUOVR ,,b,JFCXVD
JFCXVD12 EQUOVR ,,b,JFCXVD
JFCXVD13 EQUOVR ,,b,JFCXVD
JFCXVD14 EQUOVR ,,b,JFCXVD
JFCXVD15 EQUOVR ,,b,JFCXVD
.*
.* IEFJFCBX does not generate a DSECT-statement
         MNOTE *,'Including IEFJFCBX mapping macro'
JFCBX    DSECT ,                       * Start of JFCBX DSECT
         IEFJFCBX ,                    *
         EQUOVR *END
*
JFCBX    DSECT ,                       * Resume JFCBX DSECT
         ORG   ,                       *
JFCBX_LEN EQU  *-JFCBX                 * Length of JFCBX
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPJSCB  0100-20096-20096-0111-00156-00156-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Job Step Control Block
.*
&LABEL   MAPJSCB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPJSCB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPJSCB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'JSCB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPJSCB).MEND
&BXA_MAC_MAPJSCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_JSCB
&BXA_CB_JSCB SETC 'JSCB'
.*
.* JSCBOPTS - OPTION SWITCHES
JSCRSV04 EQUOVR ,,b,JSCBOPTS
JSCRSV05 EQUOVR ,,b,JSCBOPTS
JSCBLONG EQUOVR ,,b,JSCBOPTS
JSCRSV06 EQUOVR ,,b,JSCBOPTS
JSCRSV07 EQUOVR ,,b,JSCBOPTS
JSCRSV08 EQUOVR ,,b,JSCBOPTS
JSCSIOTS EQUOVR ,,b,JSCBOPTS
JSCBAUTH EQUOVR ,,b,JSCBOPTS
.*
.* JSCBSWT1 - STATUS SWITCHES  (OS/VS2)
JSCBPASS EQUOVR ,,b,JSCBSWT1
JSCRSV11 EQUOVR ,,b,JSCBSWT1
JSCRSV12 EQUOVR ,,b,JSCBSWT1
JSCRSV13 EQUOVR ,,b,JSCBSWT1
JSCRSV14 EQUOVR ,,b,JSCBSWT1
JSCRSV15 EQUOVR ,,b,JSCBSWT1
JSCRSV16 EQUOVR ,,b,JSCBSWT1
JSCBPMSG EQUOVR ,,b,JSCBSWT1
.*
.* JSCBWTFG - FLAGS USED BY WTP SUPPORT
JSCBIOFG EQUOVR ,,b,JSCBWTFG
JSCBRET  EQUOVR ,,b,JSCBWTFG
.* JSCRSV18 EQUOVR ,,b,JSCBWTFG        * Last seen in OS/390 V2R6
JSCBBMO  EQUOVR ,,b,JSCBWTFG           * First seen in z/OS V1R4
JSCRSV19 EQUOVR ,,b,JSCBWTFG
JSCRSV20 EQUOVR ,,b,JSCBWTFG
JSCRSV21 EQUOVR ,,b,JSCBWTFG
JSCRSV22 EQUOVR ,,b,JSCBWTFG
JSCRSV23 EQUOVR ,,b,JSCBWTFG
.*
.* JSCBFBYT - FLAG BYTE  (MDC300)
JSCBRV01 EQUOVR ,,b,JSCBFBYT
JSCBADSP EQUOVR ,,b,JSCBFBYT
JSCBRV02 EQUOVR ,,b,JSCBFBYT
JSCBRV03 EQUOVR ,,b,JSCBFBYT
JSCBSJFY EQUOVR ,,b,JSCBFBYT
JSCBSJFN EQUOVR ,,b,JSCBFBYT
JSCBRV06 EQUOVR ,,b,JSCBFBYT
JSCBRV07 EQUOVR ,,b,JSCBFBYT
.*
.* JSCBJJSB - JOB JOURNAL STATUS INDICATORS
JSCBJNLN EQUOVR ,,b,JSCBJJSB
JSCBJNLF EQUOVR ,,b,JSCBJJSB
JSCBJNLE EQUOVR ,,b,JSCBJJSB
JSCBJSBI EQUOVR ,,b,JSCBJJSB
JSCBJSBA EQUOVR ,,b,JSCBJJSB
JSCBJSBX EQUOVR ,,b,JSCBJJSB
JSCBJSBT EQUOVR ,,b,JSCBJJSB
.*
         MNOTE *,'Including IEZJSCB mapping macro'
         IEZJSCB ,                     *
         EQUOVR *END
*
         ORG   ,                       *
JSCB     EQU   IEZJSCB                 * Start of JSCB
JSCB_LEN EQU   *-JSCB                  * Length of JSCB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPLCT   0100-20096-20096-0111-00183-00183-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Linkage Control Table
.*
&LABEL   MAPLCT &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPLCT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPLCT         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'LCT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPLCT).MEND
&BXA_MAC_MAPLCT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_LCT
&BXA_CB_LCT SETC 'LCT'
.*
.* LCTQENTY
LCTTIMAB EQUOVR ,,b,LCTQENTY
LCTTIMNG EQUOVR ,,b,LCTQENTY
LCTTIMDN EQUOVR ,,b,LCTQENTY
LCTNOTIM EQUOVR ,,b,LCTQENTY
LCTERRM  EQUOVR ,,b,LCTQENTY
.*
.* LCTERR - LCTERR bits
LCTJFAIL EQUOVR ,,b,LCTERR
LCTSALCD EQUOVR ,,b,LCTERR
LCTPALCD EQUOVR ,,b,LCTERR
LCTSFAIL EQUOVR ,,b,LCTERR
LCTACOMP EQUOVR ,,b,LCTERR
LCTJCFAL EQUOVR ,,b,LCTERR
LCTVTERM EQUOVR ,,b,LCTERR
LCTCANCL EQUOVR ,,b,LCTERR
.*
.* LCTINTSW - INITIATOR INTERNAL SWITCHES
LCTINPPT EQUOVR ,,b,LCTINTSW
LCTPRIV  EQUOVR ,,b,LCTINTSW
LCTPPAA  EQUOVR ,,b,LCTINTSW
LCTSTART EQUOVR ,,b,LCTINTSW
LCTSTOP  EQUOVR ,,b,LCTINTSW
LCTABEND EQUOVR ,,b,LCTINTSW
.*
.* LCTPUBYT - PREFERRED USAGE FLAGS
LCT2LPU  EQUOVR ,,b,LCTPUBYT
LCT1LPU  EQUOVR ,,b,LCTPUBYT
LCTN2LP  EQUOVR ,,b,LCTPUBYT
LCTNSWP  EQUOVR ,,b,LCTPUBYT
.*
.* LCTOPSW2 - INIT OPTIONS BYTE 2
LCTTIMEF EQUOVR ,,b,LCTOPSW2
LCTCRF   EQUOVR ,,b,LCTOPSW2
LCTCKRST EQUOVR ,,b,LCTOPSW2
LCTINRES EQUOVR ,,b,LCTOPSW2
LCTBPRAC EQUOVR ,,b,LCTOPSW2
LCTNORC  EQUOVR ,,b,LCTOPSW2
LCTENQU  EQUOVR ,,b,LCTOPSW2
.*
.* LCTOPSW3 - INIT OPTION BYTE 3
LCTNSYS  EQUOVR ,,b,LCTOPSW3
LCTALERR EQUOVR ,,b,LCTOPSW3
LCTJESCE EQUOVR ,,b,LCTOPSW3
.*
.* LCTTMBYT - Flag Byte
LCTTIFJ  EQUOVR ,,b,LCTTMBYT
.*
.* LCTOPSW1 - INIT OPTION BYTE 1
LCTDPSWA EQUOVR ,,b,LCTOPSW1
LCTCANF  EQUOVR ,,b,LCTOPSW1
LCTONEJF EQUOVR ,,b,LCTOPSW1
.*
.* LCTRFB - RESTART FUNCTION SWITCHES
LCTRFBSM EQUOVR ,,b,LCTRFB
LCTRFBCR EQUOVR ,,b,LCTRFB
LCTRFBRV EQUOVR ,,b,LCTRFB
LCTRFBDC EQUOVR ,,b,LCTRFB
LCTRFBMS EQUOVR ,,b,LCTRFB
LCTRFBEF EQUOVR ,,b,LCTRFB
LCTRFBRP EQUOVR ,,b,LCTRFB
LCTRFBND EQUOVR ,,b,LCTRFB
.*
.* LCTRFB1 - RESERVED FOR WARMSTART/RESTART
LCTRSTST EQUOVR ,,b,LCTRFB1
.*
.* LCTINTS2 - INTERNAL SWITCHES, BYTE 2
LCTSYS   EQUOVR ,,b,LCTINTS2
LCTBPPAS EQUOVR ,,b,LCTINTS2
LCTTSWPC EQUOVR ,,b,LCTINTS2
LCTATTC  EQUOVR ,,b,LCTINTS2
LCTJSRGN EQUOVR ,,b,LCTINTS2
LCTSPREM EQUOVR ,,b,LCTINTS2
.*
.* IEFALLCT does no provide a DSECT statement
LCT      DSECT ,
.*
         MNOTE *,'Including IEFALLCT mapping macro'
         IEFALLCT ,
         EQUOVR *END
*
LCT      DSECT ,                       * Resume LCT DSECT
         ORG
LCT_LEN  EQU   *-LCT                   * Length of LCT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPLDA   0100-20096-20096-0111-00115-00115-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the virtual storage manager's Local Data Area
.*
&LABEL   MAPLDA &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPLDA                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPLDA         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'LDA').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPLDA).MEND
&BXA_MAC_MAPLDA SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_LDA
&BXA_CB_LDA SETC 'LDA'
.*
.* LDAFLGS - MISC. FLAGS
LDADEFER EQUOVR ,,b,LDAFLGS+3
LDADEFED EQUOVR ,,b,LDAFLGS+3
.*
.* LDAUFLGS - USER FLAGS
LDALIMCL EQUOVR ,,b,LDAUFLGS
LDAULIM  EQUOVR ,,b,LDAUFLGS
LDAEULIM EQUOVR ,,b,LDAUFLGS
.*
         MNOTE *,'Including IHALDA mapping macro'
         IHALDA ,
         EQUOVR *END
*
LDA      DSECT ,                       * Resume LDA DSECT
         ORG
LDA_LEN  EQU   *-LDA                   * Length of LDA
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPLLE   0100-20096-20096-0111-00105-00105-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Load List Element
.*
&LABEL   MAPLLE &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPLLE                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPLLE         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'LLE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPLLE).MEND
&BXA_MAC_MAPLLE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_LLE
&BXA_CB_LLE SETC 'LLE'
.*
         MNOTE *,'Including IHALLE mapping macro'
         IHALLE ,                      *
*
LLE      DSECT ,                       * Resume LDA DSECT
         ORG   ,                       *
LLE_LEN  EQU   *-LLE                   * Length of LLE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPLMASM 0100-20096-20096-0111-00152-00152-00000-BIXSMAC 33
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for Latch Management
.*
&LABEL   MAPLMASM &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPLMASM               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPLMASM       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'LCRTPL').EMBED
         AIF   ('&CB' EQ 'LOBTPL').EMBED
         AIF   ('&CB' EQ 'LPRGPL').EMBED
         AIF   ('&CB' EQ 'LRELPL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPLMASM).MEND
&BXA_MAC_MAPLMASM SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_LCRTPL
         GBLC  &BXA_CB_LOBTPL
         GBLC  &BXA_CB_LPRGPL
         GBLC  &BXA_CB_LRELPL
&BXA_CB_LCRTPL SETC 'LMASM'
&BXA_CB_LOBTPL SETC 'LMASM'
&BXA_CB_LPRGPL SETC 'LMASM'
&BXA_CB_LRELPL SETC 'LMASM'
.*
         MNOTE *,'Including ISGLMASM'
.*
.* Put equates in a DSECT to prevent warning messages in ASM listing
BXA_EQU  DSECT
         ISGLMASM
         ORG   ,                       * Reset to end of DSECT
*
* Plist for ISGLCRT - Latch Create
LCRTPL   DSECT
LCRTNR   DS    A                       * Count: pointer to fullword
LCRTNAM  DS    A                       * Latch set name: ptr to CL48
LCRTOPT  DS    A                       * Create option: ptr to F
LCRTTOK  DS    A                       * Latch set token: ptr to 2F
LCRTRCD  DS    A                       * Return code: pointer to F
LCRTPL_LEN EQU *-LCRTPL                * Length of parmlist
*
* Plist for ISGLOBT - Latch Obtain
LOBTPL   DSECT
LOBTSTOK DS    A                       * Latch Set token: ptr to XL8
LOBTLAT  DS    A                       * Latch nr: ptr to F
LOBTRQID DS    A                       * Requestor ID: ptr to XL8
LOBTOOPT DS    A                       * Obtain option: ptr to F
LOBTAOPT DS    A                       * Access option: ptr to F
LOBTECBP DS    A                       * ECB address: ptr to A(ECB-ptr)
LOBTLTOK DS    A                       * Latch token: ptr to XL8
LOBTWORK DS    A                       * Work area: ptr to XL256
LOBTRCD  DS    A                       * Return code: ptr to F
LOBTPL_LEN EQU *-LOBTPL                * Length of parmlist
*
* Plist for ISGLPRG - Latch Purge
LPRGPL   DSECT
LPRGSTOK DS    A                       * Latch Set token: ptr to XL8
LPRGRQID DS    A                       * Requestor ID: ptr to XL8
LPRGRCD  DS    A                       * Return code: ptr to F
LPRGPL_LEN EQU *-LPRGPL                * Length of parmlist
*
* Plist for ISGLREL - Latch Release
LRELPL   DSECT
LRELSTOK DS    A                       * Latch Set token: ptr to XL8
LRELLTOK DS    A                       * Latch token: ptr to XL8
LRELROPT DS    A                       * Release option: ptr to F
LRELWORK DS    A                       * Work area: ptr to XL256
LRELRCD  DS    A                       * Return code: ptr to F
LRELPL_LEN EQU *-LRELPL                * Length of parmlist
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPLPDE  0100-20096-20096-0111-00136-00136-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Link Pack Directory Entry
.*
.* LPDEs are in a table, pointed to by CVTLPDIA. LPDEs are
.* consecutive in storage, end-of-table is marked by a dummy LPDE
.* which has LPDENAME=XL8'FFFFFFFF'
.*
&LABEL   MAPLPDE &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPLPDE                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPLPDE        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'LPDE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPLPDE).MEND
&BXA_MAC_MAPLPDE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_LPDE
&BXA_CB_LPDE SETC 'LPDE'
.*
.* LPDENTP - RELOCATED ENTRY POINT ADDRESS
LPDEMODE EQUOVR ,,b,LPDENTP
.*
.* LPDEATTB - ATTRIBUTE FLAGS
LPDEOM   EQUOVR ,,b,LPDEATTB
LPDELPDE EQUOVR ,,b,LPDEATTB
.*
.* LPDEATTR - ATTRIBUTE FLAGS
LPDENIP  EQUOVR ,,b,LPDEATTR
LPDENIC  EQUOVR ,,b,LPDEATTR
LPDEREN  EQUOVR ,,b,LPDEATTR
LPDESER  EQUOVR ,,b,LPDEATTR
LPDENFN  EQUOVR ,,b,LPDEATTR
LPDEMIN  EQUOVR ,,b,LPDEATTR
LPDEJPA  EQUOVR ,,b,LPDEATTR
LPDENLR  EQUOVR ,,b,LPDEATTR
.*
.* LPDEATT2 - SECOND ATTRIBUTE FLAG BYTE
LPDESPZ  EQUOVR ,,b,LPDEATT2
LPDEREL  EQUOVR ,,b,LPDEATT2
LPDEXLE  EQUOVR ,,b,LPDEATT2
LPDERLC  EQUOVR ,,b,LPDEATT2
LPDEANYM EQUOVR ,,b,LPDEATT2
LPDEOLY  EQUOVR ,,b,LPDEATT2
LPDESYSL EQUOVR ,,b,LPDEATT2
LPDEAUTH EQUOVR ,,b,LPDEATT2
.*
         MNOTE *,'Including IHALPDE mapping macro'
         IHALPDE ,                     *
         EQUOVR *END                   *
*
         ORG
LPDE_LEN EQU   *-LPDE                  * Length of LPDE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPOCPL  0100-20096-20096-0111-00151-00151-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for parameter list entries used by OPEN/CLOSE SVC's
.* This parameter list is used by:
.*   SVC 19 = OPEN
.*   SVC 20 = CLOSE
.*   SVC 22 = OPEN,TYPE=J
.*   SVC 23 = CLOSE,TYPE=T
.*
&LABEL   MAPOCPL &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPOCPL                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPOCPL        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'OC24').EMBED
         AIF   ('&CB' EQ 'OC31').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPOCPL).MEND
&BXA_MAC_MAPOCPL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_OC24
         GBLC  &BXA_CB_OC31
&BXA_CB_OC24 SETC 'OCPL'
&BXA_CB_OC31 SETC 'OCPL'
.*
         MNOTE *,'Generating DSECT for Open/Close parameter list entry'
*
* DSECT for OPEN/CLOSE parameter list entries
* If R1 contains an address it points to a MODE=24 parmlist
* If R1 contains 0, R0 points to a MODE=31 parmlist
*
* The option byte is divided into three parts:
* - Bit 0  : Contains the end-of-list indicator
* - Bit 1-3: Contain the second option. These three bits must be
*            tested together
* - Bit 4-7: Contain the first option. These four bits must be
*            tested together
*
OCPL     DSECT ,                       * MODE=24 version
OC24     DS    0F                      * Each entry is an aligned word
OC24OPT  DS    XL1                     * Option byte: see below
OC24DCB  DS    AL3                     * Pointer to DCB
OC24_LEN EQU   *-OC24
*
         ORG   OC24                    * MODE=31 version
OC31     DS    0FL8                    * Two words on word boundary
OC31OPT  DS    XL1                     * Option byte
OC31NULL DS    AL3                     * Contains zeroes
OC31DCB  DS    AL4                     * Pointer to DCB
OC31_LEN EQU   *-OC31
*
* Following is a list of bit-definitions for the OPT byte:
* See SYS1.MODGEN(IECEQU) for the official definitions
*   End-of-list-indicator  BIT0
*   2nd option=DISP        NOBITS (bits 1-3 off)
*   2nd option=REWIND      BIT1
*   2nd option=FREE/IDLE   BIT2
*   2nd option=REREAD      BIT3
*   2nd option=LEAVE       BIT2+BIT3
*   1st option=INPUT       NOBITS (bits 4-7 off)
*   1st option=RDBACK      BIT7
*   1st option=UPDAT       BIT5
*   1st option=INOUT       BIT6+BIT7
*   1st option=OUTIN       BIT5+BIT6+BIT7
*   1st option=OUTINX      BIT5+BIT6
*   1st option=EXTEND      BIT4+BIT5+BIT6
*   1st option=OUTPUT      BIT4+BIT5+BIT6+BIT7
.*
.* Return to our original CSECT name and include IECEQU
&SYSECT  &SYSSTYP
.*
         GENMAPS IECEQ                 * Include Open/Close/EOV equates
.*
.MEND    MEND
./ ADD NAME=MAPORE   0100-20096-20096-0111-00296-00296-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Operator Reply Element definition
.*
&LABEL   MAPORE &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPORE                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPORE         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'ORE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPORE).MEND
&BXA_MAC_MAPORE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_ORE
&BXA_CB_ORE SETC 'ORE'
.*
.* OREXA - FLAGS
OREFORGN EQUOVR ,,b,OREXA
OREKEY0  EQUOVR ,,b,OREXA
ORESWAP  EQUOVR ,,b,OREXA
ORESUSP  EQUOVR ,,b,OREXA
OREINUSE EQUOVR ,,b,OREXA
OREDMCMP EQUOVR ,,b,OREXA
.* ORERSV05 EQUOVR ,,b,OREXA           * Last seen in OS/390 V2R6
OREDOMD  EQUOVR ,,b,OREXA              * First seen in z/OS V1R4
ORERSV06 EQUOVR ,,b,OREXA
.*
.* OREXC - BUFFER STATUS FLAGS
OREBUFA  EQUOVR ,,b,OREXC
OREBUFB  EQUOVR ,,b,OREXC
OREBUFC  EQUOVR ,,b,OREXC
OREBUFD  EQUOVR ,,b,OREXC
OREBUFE  EQUOVR ,,b,OREXC
.* ORERSV08 EQUOVR ,,b,OREXC           * Last seen in OS/390 V2R6
ORESAVD  EQUOVR ,,b,OREXC              * First seen in z/OS V1R4
ORERSV09 EQUOVR ,,b,OREXC
ORERSV10 EQUOVR ,,b,OREXC
.*
.* OREVRSN - VERSION LEVEL
ORESP13  EQUOVR ,,b,OREVRSN
ORESP22  EQUOVR ,,b,OREVRSN
ORESP313 EQUOVR ,,b,OREVRSN
ORESP410 EQUOVR ,,b,OREVRSN
OREVRID  EQUOVR ,,b,OREVRSN
.*
.* ORERTA - FIRST BYTE OF ROUTING CODES
ORERT001 EQUOVR ,,b,ORERTA
ORERT002 EQUOVR ,,b,ORERTA
ORERT003 EQUOVR ,,b,ORERTA
ORERT004 EQUOVR ,,b,ORERTA
ORERT005 EQUOVR ,,b,ORERTA
ORERT006 EQUOVR ,,b,ORERTA
ORERT007 EQUOVR ,,b,ORERTA
ORERT008 EQUOVR ,,b,ORERTA
.*
.* ORERTB - SECOND BYTE OF ROUTING CODES
ORERT009 EQUOVR ,,b,ORERTB
ORERT010 EQUOVR ,,b,ORERTB
ORERT011 EQUOVR ,,b,ORERTB
ORERT012 EQUOVR ,,b,ORERTB
ORERT013 EQUOVR ,,b,ORERTB
ORERT014 EQUOVR ,,b,ORERTB
ORERT015 EQUOVR ,,b,ORERTB
ORERT016 EQUOVR ,,b,ORERTB
.*
.* ORERTC - THIRD BYTE OF ROUTING CODES
ORERT017 EQUOVR ,,b,.ORERTC
ORERT018 EQUOVR ,,b,.ORERTC
ORERT019 EQUOVR ,,b,.ORERTC
ORERT020 EQUOVR ,,b,.ORERTC
ORERT021 EQUOVR ,,b,.ORERTC
ORERT022 EQUOVR ,,b,.ORERTC
ORERT023 EQUOVR ,,b,.ORERTC
ORERT024 EQUOVR ,,b,.ORERTC
.*
.* ORERTD - FOURTH BYTE OF ROUTING CODES
ORERT025 EQUOVR ,,b,ORERTD
ORERT026 EQUOVR ,,b,ORERTD
ORERT027 EQUOVR ,,b,ORERTD
ORERT028 EQUOVR ,,b,ORERTD
ORERT029 EQUOVR ,,b,ORERTD
ORERT030 EQUOVR ,,b,ORERTD
ORERT031 EQUOVR ,,b,ORERTD
ORERT032 EQUOVR ,,b,ORERTD
.*
.* ORERTE - FIFTH BYTE OF ROUTING CODES
ORERT033 EQUOVR ,,b,ORERTE
ORERT034 EQUOVR ,,b,ORERTE
ORERT035 EQUOVR ,,b,ORERTE
ORERT036 EQUOVR ,,b,ORERTE
ORERT037 EQUOVR ,,b,ORERTE
ORERT038 EQUOVR ,,b,ORERTE
ORERT039 EQUOVR ,,b,ORERTE
ORERT040 EQUOVR ,,b,ORERTE
.*
.* ORERTF - SIXTH BYTE OF ROUTING CODES
ORERT041 EQUOVR ,,b,ORERTF
ORERT042 EQUOVR ,,b,ORERTF
ORERT043 EQUOVR ,,b,ORERTF
ORERT044 EQUOVR ,,b,ORERTF
ORERT045 EQUOVR ,,b,ORERTF
ORERT046 EQUOVR ,,b,ORERTF
ORERT047 EQUOVR ,,b,ORERTF
ORERT048 EQUOVR ,,b,ORERTF
.*
.* ORERTG - SEVENTH BYTE OF ROUTING CODES
ORERT049 EQUOVR ,,b,ORERTG
ORERT050 EQUOVR ,,b,ORERTG
ORERT051 EQUOVR ,,b,ORERTG
ORERT052 EQUOVR ,,b,ORERTG
ORERT053 EQUOVR ,,b,ORERTG
ORERT054 EQUOVR ,,b,ORERTG
ORERT055 EQUOVR ,,b,ORERTG
ORERT056 EQUOVR ,,b,ORERTG
.*
.* ORERTH - EIGHTH BYTE OF ROUTING CODES
ORERT057 EQUOVR ,,b,ORERTH
ORERT058 EQUOVR ,,b,ORERTH
ORERT059 EQUOVR ,,b,ORERTH
ORERT060 EQUOVR ,,b,ORERTH
ORERT061 EQUOVR ,,b,ORERTH
ORERT062 EQUOVR ,,b,ORERTH
ORERT063 EQUOVR ,,b,ORERTH
ORERT064 EQUOVR ,,b,ORERTH
.*
.* ORERTI - NINTH BYTE OF ROUTING CODES
ORERT065 EQUOVR ,,b,ORERTI
ORERT066 EQUOVR ,,b,ORERTI
ORERT067 EQUOVR ,,b,ORERTI
ORERT068 EQUOVR ,,b,ORERTI
ORERT069 EQUOVR ,,b,ORERTI
ORERT070 EQUOVR ,,b,ORERTI
ORERT071 EQUOVR ,,b,ORERTI
ORERT072 EQUOVR ,,b,ORERTI
.*
.* ORERTJ - TENTH BYTE OF ROUTING CODES
ORERT073 EQUOVR ,,b,ORERTJ
ORERT074 EQUOVR ,,b,ORERTJ
ORERT075 EQUOVR ,,b,ORERTJ
ORERT076 EQUOVR ,,b,ORERTJ
ORERT077 EQUOVR ,,b,ORERTJ
ORERT078 EQUOVR ,,b,ORERTJ
ORERT079 EQUOVR ,,b,ORERTJ
ORERT080 EQUOVR ,,b,ORERTJ
.*
.* ORERTK - ELEVENTH BYTE OF ROUTING CODES
ORERT081 EQUOVR ,,b,ORERTK
ORERT082 EQUOVR ,,b,ORERTK
ORERT083 EQUOVR ,,b,ORERTK
ORERT084 EQUOVR ,,b,ORERTK
ORERT085 EQUOVR ,,b,ORERTK
ORERT086 EQUOVR ,,b,ORERTK
ORERT087 EQUOVR ,,b,ORERTK
ORERT088 EQUOVR ,,b,ORERTK
.*
.* ORERTL - TWELFTH BYTE OF ROUTING CODES
ORERT089 EQUOVR ,,b,ORERTL
ORERT090 EQUOVR ,,b,ORERTL
ORERT091 EQUOVR ,,b,ORERTL
ORERT092 EQUOVR ,,b,ORERTL
ORERT093 EQUOVR ,,b,ORERTL
ORERT094 EQUOVR ,,b,ORERTL
ORERT095 EQUOVR ,,b,ORERTL
ORERT096 EQUOVR ,,b,ORERTL
.*
.* ORERTM - THIRTEENTH BYTE OF ROUTING CODES
ORERT097 EQUOVR ,,b,ORERTM
ORERT098 EQUOVR ,,b,ORERTM
ORERT099 EQUOVR ,,b,ORERTM
ORERT100 EQUOVR ,,b,ORERTM
ORERT101 EQUOVR ,,b,ORERTM
ORERT102 EQUOVR ,,b,ORERTM
ORERT103 EQUOVR ,,b,ORERTM
ORERT104 EQUOVR ,,b,ORERTM
.*
.* ORERTN - FOURTEENTH BYTE OF ROUTING CODES
ORERT105 EQUOVR ,,b,ORERTN
ORERT106 EQUOVR ,,b,ORERTN
ORERT107 EQUOVR ,,b,ORERTN
ORERT108 EQUOVR ,,b,ORERTN
ORERT109 EQUOVR ,,b,ORERTN
ORERT110 EQUOVR ,,b,ORERTN
ORERT111 EQUOVR ,,b,ORERTN
ORERT112 EQUOVR ,,b,ORERTN
.*
.* ORERTO - FIFTEENTH BYTE OF ROUTING CODES
ORERT113 EQUOVR ,,b,ORERTO
ORERT114 EQUOVR ,,b,ORERTO
ORERT115 EQUOVR ,,b,ORERTO
ORERT116 EQUOVR ,,b,ORERTO
ORERT117 EQUOVR ,,b,ORERTO
ORERT118 EQUOVR ,,b,ORERTO
ORERT119 EQUOVR ,,b,ORERTO
ORERT120 EQUOVR ,,b,ORERTO
.*
.* ORERTP - SIXTEENTH BYTE OF ROUTING CODES
ORERT121 EQUOVR ,,b,ORERTP
ORERT122 EQUOVR ,,b,ORERTP
ORERT123 EQUOVR ,,b,ORERTP
ORERT124 EQUOVR ,,b,ORERTP
ORERT125 EQUOVR ,,b,ORERTP
ORERT126 EQUOVR ,,b,ORERTP
ORERT127 EQUOVR ,,b,ORERTP
ORERT128 EQUOVR ,,b,ORERTP
.*
         MNOTE *,'Including IHAORE mapping macro'
         IHAORE ,                      *
         EQUOVR *END
*
OREF     DSECT ,                       * Resume ORE DSECT
ORE      EQU   OREF                    * Label for USINGs
         ORG   ,
ORE_LEN  EQU   *-ORE                   * Length of ORE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPOUCB  0100-20096-20096-0111-00264-00264-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the resOurces manager User Control Block
.*
&LABEL   MAPOUCB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPOUCB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPOUCB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'OUCB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPOUCB).MEND
&BXA_MAC_MAPOUCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_OUCB
&BXA_CB_OUCB SETC 'OUCB'
.*
.* OUCBQFL - SWAPPABILITY TRANSITION FLAGS
OUCBGOO  EQUOVR ,,b,OUCBQFL
OUCBGOI  EQUOVR ,,b,OUCBQFL
OUCBGOB  EQUOVR ,,b,OUCBQFL
OUCBQSFL EQUOVR ,,b,OUCBQFL
OUCBOFF  EQUOVR ,,b,OUCBQFL
OUCBOUT  EQUOVR ,,b,OUCBQFL
OUCBLSW  EQUOVR ,,b,OUCBQFL
OUCBDLYB EQUOVR ,,b,OUCBQFL
.*
.* OUCBSFL - SWAPOUT CONTINUATION FLAGS
OUCBNSW  EQUOVR ,,b,OUCBSFL
OUCBCTI  EQUOVR ,,b,OUCBSFL
OUCBBIB  EQUOVR ,,b,OUCBSFL
OUCBINV  EQUOVR ,,b,OUCBSFL
OUCBNSWI EQUOVR ,,b,OUCBSFL
OUCBPVL  EQUOVR ,,b,OUCBSFL
OUCBENQ  EQUOVR ,,b,OUCBSFL
OUCBSCN  EQUOVR ,,b,OUCBSFL
.*
.* OUCBYFL - USER TYPE FLAGS
OUCBPSTE EQUOVR ,,b,OUCBYFL
OUCBSTT  EQUOVR ,,b,OUCBYFL
OUCBLOG  EQUOVR ,,b,OUCBYFL
OUCBMNT  EQUOVR ,,b,OUCBYFL
OUCBAXS  EQUOVR ,,b,OUCBYFL
OUCBDTA  EQUOVR ,,b,OUCBYFL
OUCBFXS  EQUOVR ,,b,OUCBYFL
.*
.* OUCBAFL - ALGORITHM STATUS FLAGS
OUCBAPG  EQUOVR ,,b,OUCBAFL
OUCBREPT EQUOVR ,,b,OUCBAFL
OUCBENQI EQUOVR ,,b,OUCBAFL
OUCBJSR  EQUOVR ,,b,OUCBAFL
OUCBNWT  EQUOVR ,,b,OUCBAFL
OUCBASW  EQUOVR ,,b,OUCBAFL
.*
.* OUCBTFL - TRANSACTION STATUS FLAGS
OUCBATR  EQUOVR ,,b,OUCBTFL
OUCBSTR  EQUOVR ,,b,OUCBTFL
OUCBNTR  EQUOVR ,,b,OUCBTFL
OUCBRTR  EQUOVR ,,b,OUCBTFL
OUCBPCH  EQUOVR ,,b,OUCBTFL
OUCBMAR  EQUOVR ,,b,OUCBTFL
OUCBINP  EQUOVR ,,b,OUCBTFL
OUCBINC  EQUOVR ,,b,OUCBTFL
.*
.* OUCBEFL - EVENT STATUS FALGS
OUCBLWT  EQUOVR ,,b,OUCBEFL
.* OUCBNQF  EQUOVR ,,b,OUCBEFL         * Last seen in OS/390 V2R6
OUCBQSC  EQUOVR ,,b,OUCBEFL
OUCBMWT  EQUOVR ,,b,OUCBEFL
.*
.* OUCBUFL - USER TYPE FLAGS
OUCBJSFS EQUOVR ,,b,OUCBUFL
OUCBJSAS EQUOVR ,,b,OUCBUFL
OUCBRSWP EQUOVR ,,b,OUCBUFL
OUCBTSWP EQUOVR ,,b,OUCBUFL
OUCBTSWC EQUOVR ,,b,OUCBUFL
OUCBSI   EQUOVR ,,b,OUCBUFL
OUCBENQR EQUOVR ,,b,OUCBUFL
OUCBSIFX EQUOVR ,,b,OUCBUFL
.*
.* OUCBLFL - ALGORITHM STATUS FLAGS
OUCBEAS  EQUOVR ,,b,OUCBLFL
OUCBQSRV EQUOVR ,,b,OUCBLFL
OUCBRQSC EQUOVR ,,b,OUCBLFL
OUCBFWA  EQUOVR ,,b,OUCBLFL
OUCBTET  EQUOVR ,,b,OUCBLFL
OUCBREDP EQUOVR ,,b,OUCBLFL
OUCBPRF  EQUOVR ,,b,OUCBLFL
OUCBSTGI EQUOVR ,,b,OUCBLFL
.*
.* OUCBRFL - MORE USER FLAGS
OUCBCSFS EQUOVR ,,b,OUCBRFL
OUCBCSFM EQUOVR ,,b,OUCBRFL
OUCBEASI EQUOVR ,,b,OUCBRFL
OUCBHIDP EQUOVR ,,b,OUCBRFL
OUCBBJOB EQUOVR ,,b,OUCBRFL
OUCBSTFX EQUOVR ,,b,OUCBRFL
OUCBDFSW EQUOVR ,,b,OUCBRFL
OUCBLLSW EQUOVR ,,b,OUCBRFL
.*
.* OUCBMFL - MISCELLANEOUS FLAGS
OUCBSBT  EQUOVR ,,b,OUCBMFL
OUCBAFAP EQUOVR ,,b,OUCBMFL
OUCBDFS2 EQUOVR ,,b,OUCBMFL
OUCBMGSW EQUOVR ,,b,OUCBMFL
OUCBDISC EQUOVR ,,b,OUCBMFL
OUCBASAP EQUOVR ,,b,OUCBMFL
OUCBMPUR EQUOVR ,,b,OUCBMFL
OUCBACNT EQUOVR ,,b,OUCBMFL
.*
.* OUCBMFL2 - More miscellaneous flags.
OUCBVFMG EQUOVR ,,b,OUCBMFL2
OUCBMGIN EQUOVR ,,b,OUCBMFL2
OUCBAFPD EQUOVR ,,b,OUCBMFL2
OUCBDFDR EQUOVR ,,b,OUCBMFL2
OUCBDFDE EQUOVR ,,b,OUCBMFL2
OUCBMIGP EQUOVR ,,b,OUCBMFL2
OUCBRPT1 EQUOVR ,,b,OUCBMFL2
OUCBERST EQUOVR ,,b,OUCBMFL2
.*
.* OUCBMFL3 - More miscellaneous flags
OUCBAPPC EQUOVR ,,b,OUCBMFL3
OUCBPMON EQUOVR ,,b,OUCBMFL3
OUCBVALV EQUOVR ,,b,OUCBMFL3
OUCBOMVS EQUOVR ,,b,OUCBMFL3
OUCBTBMN EQUOVR ,,b,OUCBMFL3
OUCBSTTA EQUOVR ,,b,OUCBMFL3
OUCBGWRK EQUOVR ,,b,OUCBMFL3
OUCBINIT EQUOVR ,,b,OUCBMFL3
.*
.* OUCBCFL - MULTIPROCESS CONDITION FLAGS
OUCBRDY  EQUOVR ,,b,OUCBCFL
OUCBRSM  EQUOVR ,,b,OUCBCFL
OUCBESSS EQUOVR ,,b,OUCBCFL
OUCBESSW EQUOVR ,,b,OUCBCFL
OUCBASSW EQUOVR ,,b,OUCBCFL
OUCBCSMF EQUOVR ,,b,OUCBCFL
OUCBSHBN EQUOVR ,,b,OUCBCFL
OUCBHITR EQUOVR ,,b,OUCBCFL
.*
.* OUCBCSBT - Compare and swap bits
OUCBTRM  EQUOVR ,,b,OUCBCSBT
OUCBOWT  EQUOVR ,,b,OUCBCSBT
OUCBCIM  EQUOVR ,,b,OUCBCSBT
OUCBPSTR EQUOVR ,,b,OUCBCSBT
OUCBSTA  EQUOVR ,,b,OUCBCSBT
OUCBQSS  EQUOVR ,,b,OUCBCSBT
OUCBOIW  EQUOVR ,,b,OUCBCSBT
OUCBOOW  EQUOVR ,,b,OUCBCSBT
.*
.* OUCBPFL - Processing flags
OUCBFTDN EQUOVR ,,b,OUCBPFL
OUCBPSD  EQUOVR ,,b,OUCBPFL
OUCBDPSW EQUOVR ,,b,OUCBPFL
OUCBSRP  EQUOVR ,,b,OUCBPFL
OUCBPTDN EQUOVR ,,b,OUCBPFL
.*
.* OUCBDSPC - CURRENT DISPATCHING CONTROL
OUCBMTW  EQUOVR ,,b,OUCBDSPC
OUCBTS   EQUOVR ,,b,OUCBDSPC
OUCBTSC3 EQUOVR ,,b,OUCBDSPC
OUCBTSC4 EQUOVR ,,b,OUCBDSPC
OUCBTSC5 EQUOVR ,,b,OUCBDSPC
OUCBTSC6 EQUOVR ,,b,OUCBDSPC
OUCBTSC7 EQUOVR ,,b,OUCBDSPC
.*
.* OUCBDSPN - NEW DISPATCHING CONTROL
OUCBNMTW EQUOVR ,,b,OUCBDSPN
OUCBNTS  EQUOVR ,,b,OUCBDSPN
OUCBTSN3 EQUOVR ,,b,OUCBDSPN
OUCBTSN4 EQUOVR ,,b,OUCBDSPN
OUCBTSN5 EQUOVR ,,b,OUCBDSPN
OUCBTSN6 EQUOVR ,,b,OUCBDSPN
OUCBTSN7 EQUOVR ,,b,OUCBDSPN
.*
         MNOTE *,'Including IRAOUCB mapping macro'
         IRAOUCB ,
         EQUOVR *END
*
OUCB     DSECT ,                       * Resume OUCB DSECT
         ORG
OUCB_LEN EQU   *-OUCB                  * Length of OUCB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPCCA  0100-20096-20096-0111-00215-00215-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Physical Configuration Communication Area
.*
&LABEL   MAPPCCA &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPCCA                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPCCA        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PCCA').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPCCA).MEND
&BXA_MAC_MAPPCCA SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PCCA
&BXA_CB_PCCA SETC 'PCCA'
.*
.* PCCAMCHF - MACHINE CHECK FLAGS
PCCASMCH EQUOVR ,,b,PCCAMCHF
.*
.* PCCATMFL - FIRST BYTE OF PCCATMST
PCCAINIT EQUOVR ,,b,PCCATMFL
PCCASYNC EQUOVR ,,b,PCCATMFL
PCCAVKIL EQUOVR ,,b,PCCATMFL
PCCAMCC  EQUOVR ,,b,PCCATMFL
PCCAMINT EQUOVR ,,b,PCCATMFL
PCCARV02 EQUOVR ,,b,PCCATMFL
PCCARV03 EQUOVR ,,b,PCCATMFL
PCCARV04 EQUOVR ,,b,PCCATMFL
.*
.* PCCATODE - TOD CLOCK ERROR FLAGS
PCCANUTD EQUOVR ,,b,PCCATODE
PCCANFTD EQUOVR ,,b,PCCATODE
PCCACTTD EQUOVR ,,b,PCCATODE
.*
.* PCCACCE - FLAGS FOR CLOCK COMPARATOR
PCCANUCC EQUOVR ,,b,PCCACCE
PCCANFCC EQUOVR ,,b,PCCACCE
PCCACTCC EQUOVR ,,b,PCCACCE
.*
.* PCCAINTE - FLAGS FOR CPU TIMER
PCCANUIN EQUOVR ,,b,PCCAINTE
PCCANFIN EQUOVR ,,b,PCCAINTE
PCCACTIN EQUOVR ,,b,PCCAINTE
.*
.* PCCARPB - EXTERNAL CALL SIGP BUFFER
PCCASWTH EQUOVR ,,b,PCCARPB
PCCARV4A EQUOVR ,,b,PCCARPB
PCCARQCK EQUOVR ,,b,PCCARPB
PCCAGTFR EQUOVR ,,b,PCCARPB
PCCARV4B EQUOVR ,,b,PCCARPB
PCCAMODE EQUOVR ,,b,PCCARPB
PCCASTCP EQUOVR ,,b,PCCARPB
PCCAMEMS EQUOVR ,,b,PCCARPB
.*
.* PCCARISP - CONTAINS PARALLEL/SERIAL REQUEST INDICATOR
PCCAPARL EQUOVR ,,b,PCCARISP
PCCASERL EQUOVR ,,b,PCCARISP
PCCARV06 EQUOVR ,,b,PCCARISP
PCCARV07 EQUOVR ,,b,PCCARISP
PCCARV08 EQUOVR ,,b,PCCARISP
PCCARV09 EQUOVR ,,b,PCCARISP
PCCARV10 EQUOVR ,,b,PCCARISP
PCCARV11 EQUOVR ,,b,PCCARISP
.*
.* PCCAEMS2 - SECOND BYTE OF PCCAEMSI
PCCASERP EQUOVR ,,b,PCCAEMS2
PCCARV13 EQUOVR ,,b,PCCAEMS2
PCCARV14 EQUOVR ,,b,PCCAEMS2
PCCARV15 EQUOVR ,,b,PCCAEMS2
PCCARV16 EQUOVR ,,b,PCCAEMS2
PCCARV17 EQUOVR ,,b,PCCAEMS2
PCCARV18 EQUOVR ,,b,PCCAEMS2
PCCARV19 EQUOVR ,,b,PCCAEMS2
.*
.* PCCAEMS3 - THIRD BYTE OF PCCAEMSI
PCCASERF EQUOVR ,,b,PCCAEMS3
PCCARV21 EQUOVR ,,b,PCCAEMS3
PCCARV22 EQUOVR ,,b,PCCAEMS3
PCCARV23 EQUOVR ,,b,PCCAEMS3
PCCARV24 EQUOVR ,,b,PCCAEMS3
PCCARV25 EQUOVR ,,b,PCCAEMS3
PCCARV26 EQUOVR ,,b,PCCAEMS3
PCCARV27 EQUOVR ,,b,PCCAEMS3
.*
.* PCCARMSB - CONTAINS RMS INDICATOR
PCCARV28 EQUOVR ,,b,PCCARMSB
PCCARV29 EQUOVR ,,b,PCCARMSB
PCCARV30 EQUOVR ,,b,PCCARMSB
PCCARV31 EQUOVR ,,b,PCCARMSB
PCCARV32 EQUOVR ,,b,PCCARMSB
PCCARV33 EQUOVR ,,b,PCCARMSB
PCCARV34 EQUOVR ,,b,PCCARMSB
PCCARMS  EQUOVR ,,b,PCCARMSB
.*
.* PCCAATTR - PROCESSOR ATTRIBUTES
PCCACPUM EQUOVR ,,b,PCCAATTR
PCCAIO   EQUOVR ,,b,PCCAATTR
PCCANPFA EQUOVR ,,b,PCCAATTR
PCCAR101 EQUOVR ,,b,PCCAATTR
PCCAR102 EQUOVR ,,b,PCCAATTR
PCCAR103 EQUOVR ,,b,PCCAATTR
PCCAR104 EQUOVR ,,b,PCCAATTR
PCCAR105 EQUOVR ,,b,PCCAATTR
.*
.* PCCAMFA - MALFUNCTION ALERT FLAGS
PCCASMFA EQUOVR ,,b,PCCAMFA
.*
.* PCCAACRN - CAUSE OF ACR
PCCAKUKN EQUOVR ,,v,PCCAACRN
PCCAKMFA EQUOVR ,,v,PCCAACRN
PCCAKIPT EQUOVR ,,v,PCCAACRN
PCCAKSDT EQUOVR ,,v,PCCAACRN
PCCAKIVT EQUOVR ,,v,PCCAACRN
PCCAKTCT EQUOVR ,,v,PCCAACRN
PCCAKPTT EQUOVR ,,v,PCCAACRN
PCCAKCCT EQUOVR ,,v,PCCAACRN
PCCAKPST EQUOVR ,,v,PCCAACRN
PCCAKADT EQUOVR ,,v,PCCAACRN
PCCAKSLT EQUOVR ,,v,PCCAACRN
PCCAKESL EQUOVR ,,v,PCCAACRN
PCCAKTCF EQUOVR ,,v,PCCAACRN
PCCAKDAT EQUOVR ,,v,PCCAACRN
PCCAKSCF EQUOVR ,,v,PCCAACRN
PCCAKUME EQUOVR ,,v,PCCAACRN
.*
         MNOTE *,'Including IHAPCCA mapping macro'
         IHAPCCA ,
         EQUOVR *END
*
PCCA     DSECT ,                       * Resume PCCA DSECT
         ORG
PCCA_LEN EQU   *-PCCA                  * Length of PCCA
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPCCAV 0100-20096-20096-0111-00106-00106-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Physical Configuration Communication Area
.*                     Vector Table
.*
&LABEL   MAPPCCAV &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPCCAV               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPCCAV       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PCCAV').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPCCAV).MEND
&BXA_MAC_MAPPCCAV SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PCCAVT
&BXA_CB_PCCAVT SETC 'PCCAV'
.*
         MNOTE *,'Including IHAPCCAT mapping macro'
         IHAPCCAT ,
*
PCCAVT   DSECT ,                       * Resume PCCAVT DSECT
         ORG
PCCAVT_LEN EQU *-PCCAVT                * Length of PCCAVT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPDAB  0100-20096-20096-0111-00106-00106-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Parallel Data Access Block
.*
&LABEL   MAPPDAB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPDAB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPDAB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PDAB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPDAB).MEND
&BXA_MAC_MAPPDAB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PDAB
&BXA_CB_PDAB SETC 'PDAB'
.*
         MNOTE *,'Including PDABD mapping macro'
         PDABD ,                       *
.*
IHAPDAB  DSECT ,                       * Resume PDAB dsect
PDAB     EQU   IHAPDAB                 * Label for usings
         ORG   ,                       *
PDAB_LEN EQU   *-PDAB                  * Length of PDAB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPDS   0100-20096-20096-0111-00214-00214-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Partitioned DataSet directory entry
.*
&LABEL   MAPPDS &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPDS                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPDS         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PDS').EMBED
         AIF   ('&CB' EQ 'TTRN').EMBED
         AIF   ('&CB' EQ 'TTRX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPDS).MEND
&BXA_MAC_MAPPDS SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PDS
         GBLC  &BXA_CB_TTRN
         GBLC  &BXA_CB_TTRX
&BXA_CB_PDS SETC 'PDS'
&BXA_CB_TTRN SETC 'PDS'
&BXA_CB_TTRX SETC 'PDS'
.*
.* PDS2LIBF - LIBRARY FLAG FIELD
PDS2LNRM EQUOVR ,,v,PDS2LIBF
PDS2LLNK EQUOVR ,,v,PDS2LIBF
PDS2LJOB EQUOVR ,,v,PDS2LIBF
.*
.* PDS2INDC - INDICATOR BYTE
PDS2ALIS EQUOVR ,,b,PDS2INDC
DEALIAS  EQUOVR ,,b,PDS2INDC
.*
.* PDS2ATR1 - FIRST BYTE OF PROGRAM ATTRIBUTE FIELD
PDS2RENT EQUOVR ,,b,PDS2ATR1
DEREEN   EQUOVR ,,b,PDS2ATR1
PDS2REUS EQUOVR ,,b,PDS2ATR1
PDS2OVLY EQUOVR ,,b,PDS2ATR1
DEOVLY   EQUOVR ,,b,PDS2ATR1
PDS2TEST EQUOVR ,,b,PDS2ATR1
PDS2LOAD EQUOVR ,,b,PDS2ATR1
DELODY   EQUOVR ,,b,PDS2ATR1
PDS2SCTR EQUOVR ,,b,PDS2ATR1
DESCAT   EQUOVR ,,b,PDS2ATR1
PDS2EXEC EQUOVR ,,b,PDS2ATR1
DEXCUT   EQUOVR ,,b,PDS2ATR1
PDS21BLK EQUOVR ,,b,PDS2ATR1
.*
.* PDS2ATR2 - SECOND BYTE OF PROGRAM ATTRIBUTE FIELD
PDS2FLVL EQUOVR ,,b,PDS2ATR1
PDS2ORG0 EQUOVR ,,b,PDS2ATR1
PDS2EP0  EQUOVR ,,b,PDS2ATR1
PDS2NRLD EQUOVR ,,b,PDS2ATR1
PDS2NREP EQUOVR ,,b,PDS2ATR1
PDS2TSTN EQUOVR ,,b,PDS2ATR1
PDS2LEF  EQUOVR ,,b,PDS2ATR1
PDS2REFR EQUOVR ,,b,PDS2ATR1
.*
.* PDS2FTB1 - BYTE 1 OF PDS2FTBO
PDSAOSLE EQUOVR ,,b,PDS2FTB1
PDS2BIG  EQUOVR ,,b,PDS2FTB1
PDS2PAGA EQUOVR ,,b,PDS2FTB1
PDS2SSI  EQUOVR ,,b,PDS2FTB1
PDSAPFLG EQUOVR ,,b,PDS2FTB1
PDS2PGMO EQUOVR ,,b,PDS2FTB1
.*
.* PDS2FTB2 - BYTE 2 OF PDS2FTBO
PDS2ALTP EQUOVR ,,b,PDS2FTB2
PDSLRMOD EQUOVR ,,b,PDS2FTB2
PDSAAMOD EQUOVR ,,b,PDS2FTB2
PDSMAMOD EQUOVR ,,b,PDS2FTB2
.*
.* PDS2FTB3 - BYTE 3 OF PDS2FTBO
PDS2NMIG EQUOVR ,,b,PDS2FTB3
PDS2PRIM EQUOVR ,,b,PDS2FTB3
PDS2PACK EQUOVR ,,b,PDS2FTB3
.*
.* PDSSSIFB - SSI FLAG BYTE
PDSFORCE EQUOVR ,,b,PDSSSIFB
PDSUSRCH EQUOVR ,,b,PDSSSIFB
PDSEMFIX EQUOVR ,,b,PDSSSIFB
PDSDEPCH EQUOVR ,,b,PDSSSIFB
PDSSYSGN EQUOVR ,,b,PDSSSIFB
PDSNOSGN EQUOVR ,,v,PDSSSIFB
PDSCMSGN EQUOVR ,,b,PDSSSIFB
PDSPTSGN EQUOVR ,,b,PDSSSIFB
PDSIBMMB EQUOVR ,,b,PDSSSIFB
.*
         MNOTE *,'Including IHAPDS mapping macro'
         IHAPDS ,                      *
         EQUOVR *END
.*
PDS2     DSECT ,                       * Resume PDS Direntry
         ORG
PDS2_LEN EQU   *-PDS2                  * Length of PDS2
.*
.* TTRN mapping
.*
TTRN     DSECT ,                       *
TTRNTTR  DS    0XL3                    * TTR of member
TTRNTT   DS    XL2                     * Relative track adress
TTRNR    DS    XL1                     * Record number (Block address)
TTRNINDC DS    XL1                     * Indicator byte
TTRNALIA EQUOVR ,,b,TTRNINDC           *
TTRNALIA EQU   BIT0                    * On if name is an alias
TTRNCNT  EQU   BIT1+BIT2               * Nr of user TTRNs in entry
TTRNUSLN EQU   BIT3+BIT4+BIT5+BIT6+BIT7 * Length of user data in Hwords
.*
         ORG
TTRN_LEN EQU   *-TTRN                  * Length of TTRN
         EQUOVR *END                   *
.*
.* TTRX mapping
.*
TTRX     DSECT ,                       *
TTRXTTR  DS    0XL3                    * TTR of member
TTRXTT   DS    XL2                     * Relative track adress
TTRXR    DS    XL1                     * Record number (Block address)
TTRXFILL DS    XL1                     * Available for any use
.*
         ORG
TTRX_LEN EQU   *-TTRX                  * Length of TTRX
.*
.* PDS directory entry as it exists in the PDS
.*
PDS      DSECT ,                       *
PDSNAME  DS    CL8                     * Member name 8X'FF' for EOD
PDSTTRN  DCL   TTRN                    * TTRN of member 4X'00' for EOD
.*
PDSDIRBS EQU   256                     * Size of directory block
.*
         ORG
PDS_LEN  EQU   *-PDS                   * Length of PDS
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPEL   0100-20096-20096-0111-00147-00147-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Parameter Element List (for ENQ/DEQ/RESERVE)
.*
&LABEL   MAPPEL &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPEL                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPEL         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PEL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPEL).MEND
&BXA_MAC_MAPPEL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PEL
&BXA_CB_PEL SETC 'PEL'
.*
.* PELLAST - FLAG BYTE 1
PELEOL   EQUOVR ,,b,PELLAST
PELIGNOR EQUOVR ,,b,PELLAST
PELOCANY EQUOVR ,,b,PELLAST
PELSHR   EQUOVR ,,b,PELLAST
PELSAVE  EQUOVR ,,b,PELLAST
PELNORNL EQUOVR ,,b,PELLAST
PELGEN2  EQUOVR ,,b,PELLAST
PELTCBF  EQUOVR ,,b,PELLAST
.*
.* PELFLAG - FLAG BYTE 2
PELSHARE EQUOVR ,,b,PELFLAG
PELSCPE1 EQUOVR ,,b,PELFLAG
PELSYSMC EQUOVR ,,b,PELFLAG
PELSTPMC EQUOVR ,,b,PELFLAG
PELSCPE2 EQUOVR ,,b,PELFLAG
PELRET1  EQUOVR ,,b,PELFLAG
PELRET2  EQUOVR ,,b,PELFLAG
PELRET3  EQUOVR ,,b,PELFLAG
.*
.* PELXFLG1 - PEL EXTENSION FLAGS
PELXSIEX EQUOVR ,,b,PELXFLG1
PELXRCEX EQUOVR ,,b,PELXFLG1
PELXSEEX EQUOVR ,,b,PELXFLG1
PELXGLBL EQUOVR ,,b,PELXFLG1
PELXLAST EQUOVR ,,b,PELXFLG1
PELXRESV EQUOVR ,,b,PELXFLG1
PELXERR  EQUOVR ,,b,PELXFLG1
PELXREQF EQUOVR ,,b,PELXFLG1
.*
.* PELXFLG2 - FLAG-BYTE
PELXERSV EQUOVR ,,b,PELXFLG2
PELXTOKN EQUOVR ,,b,PELXFLG2
.* PELXRS26 EQUOVR ,,b,PELXFLG2        * Last seen in OS/390 V2R6
PELXCBEX EQUOVR ,,b,PELXFLG2           * First seen in z/OS V1R4
PELXRS25 EQUOVR ,,b,PELXFLG2
PELXRS24 EQUOVR ,,b,PELXFLG2
PELXRS23 EQUOVR ,,b,PELXFLG2
PELXRS22 EQUOVR ,,b,PELXFLG2
PELXRS21 EQUOVR ,,b,PELXFLG2
.*
         MNOTE *,'Including ISGPEL mapping macro'
         ISGPEL ,                      *
         EQUOVR *END
.*
PEL      DSECT ,                       * Resume PEL DSECT
         ORG
PEL_LEN  EQU   *-PEL                   * Length of PEL
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPMAR  0100-20096-20096-0111-00204-00204-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Program Management Attribute Record
.*      (associated with SMDE)
.* Warning: field PMARA_LEN is renamed to PMARA_SIZE
.*
&LABEL   MAPPMAR &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPMAR                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPMAR        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PMAR').EMBED
         AIF   ('&CB' EQ 'PMARA').EMBED
         AIF   ('&CB' EQ 'PMARL').EMBED
         AIF   ('&CB' EQ 'PMARR').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPMAR).MEND
&BXA_MAC_MAPPMAR SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PMAR
         GBLC  &BXA_CB_PMARA
         GBLC  &BXA_CB_PMARL
         GBLC  &BXA_CB_PMARR
&BXA_CB_PMAR  SETC 'PMAR'
&BXA_CB_PMARA SETC 'PMAR'
&BXA_CB_PMARL SETC 'PMAR'
&BXA_CB_PMARR SETC 'PMAR'
.*
.* PMAR_LVL - PMAR format level
PMAR_LVL_VAL       EQUOVR ,,v,PMAR_LVL
PMAR_PM1_VAL       EQUOVR ,,v,PMAR_LVL
PMAR_PM2_VAL       EQUOVR ,,v,PMAR_LVL
PMAR_PM3_VAL       EQUOVR ,,v,PMAR_LVL
.*
.* PMAR_PLVL - Bind processor creating object
PMAR_PLVL_E_VAL    EQUOVR ,,v,PMAR_PLVL
PMAR_PLVL_F_VAL    EQUOVR ,,v,PMAR_PLVL
PMAR_PLVL_AOS_VAL  EQUOVR ,,v,PMAR_PLVL
PMAR_PLVL_XA_VAL   EQUOVR ,,v,PMAR_PLVL
PMAR_PLVL_B1_VAL   EQUOVR ,,v,PMAR_PLVL
PMAR_PLVL_B2_VAL   EQUOVR ,,v,PMAR_PLVL
PMAR_PLVL_B3_VAL   EQUOVR ,,v,PMAR_PLVL
.*
.* PMAR_ATR1 - First attribute byte.
PMAR_RENT          EQUOVR ,,b,PMAR_ATR1
PMAR_REUS          EQUOVR ,,b,PMAR_ATR1
PMAR_OVLY          EQUOVR ,,b,PMAR_ATR1
PMAR_TEST          EQUOVR ,,b,PMAR_ATR1
PMAR_LOAD          EQUOVR ,,b,PMAR_ATR1
PMAR_SCTR          EQUOVR ,,b,PMAR_ATR1
PMAR_EXEC          EQUOVR ,,b,PMAR_ATR1
PMAR_1BLK          EQUOVR ,,b,PMAR_ATR1
.*
.* PMAR_ATR2 - Second attribute byte.
PMAR_FLVL          EQUOVR ,,b,PMAR_ATR2
PMAR_ORG0          EQUOVR ,,b,PMAR_ATR2
PMAR_NRLD          EQUOVR ,,b,PMAR_ATR2
PMAR_NREP          EQUOVR ,,b,PMAR_ATR2
PMAR_TSTN          EQUOVR ,,b,PMAR_ATR2
PMAR_REFR          EQUOVR ,,b,PMAR_ATR2
.*
.* PMAR_FTB1 - Alternative name for flags byte
PMAR_BIG           EQUOVR ,,b,PMAR_FTB1
PMAR_PAGA          EQUOVR ,,b,PMAR_FTB1
PMAR_XSSI          EQUOVR ,,b,PMAR_FTB1
PMAR_XAPF          EQUOVR ,,b,PMAR_FTB1
PMAR_LFMT          EQUOVR ,,b,PMAR_FTB1
.*
.* PMAR_FTB2 - Alternative name for flags byte
PMAR_ALTP          EQUOVR ,,b,PMAR_FTB2
PMAR_RMOD          EQUOVR ,,b,PMAR_FTB2
PMAR_MAMD          EQUOVR ,,b,PMAR_FTB2
.*
.* PMARL_ATR1 - Fifth attribute byte
PMARL_NMIG         EQUOVR ,,b,PMARL_ATR1
PMARL_PRIM         EQUOVR ,,b,PMARL_ATR1
PMARL_PACK         EQUOVR ,,b,PMARL_ATR1
.*
.* PMARL_ATR2 - Sixth attribute byte
PMARL_CMPR         EQUOVR ,,b,PMARL_ATR2
PMARL_1RMOD        EQUOVR ,,b,PMARL_ATR2
PMARL_2RMOD        EQUOVR ,,b,PMARL_ATR2
PMARL_1ALIN        EQUOVR ,,b,PMARL_ATR2
PMARL_2ALIN        EQUOVR ,,b,PMARL_ATR2
PMARL_FILL         EQUOVR ,,b,PMARL_ATR2
.*
.* PMARL_PM3FL1 - Flag byte
PMARL_HIDE         EQUOVR ,,b,PMARL_PM3FL1
PMARL_DLLENA       EQUOVR ,,b,PMARL_PM3FL1
PMARL_MUSTDELET    EQUOVR ,,b,PMARL_PM3FL1
PMARL_IEWBLITP     EQUOVR ,,b,PMARL_PM3FL1
PMARL_MANGLED      EQUOVR ,,b,PMARL_PM3FL1
.*
.* PMARA_LEN - Section length
PMARA_LEN          DSOVR  *NEWNAME,PMARA_SIZE
.*
.* PMARA_FTB2 - Alternative name for flags byte
PMARA_ALTP         EQUOVR ,,b,PMARA_FTB2
PMARA_HIDE         EQUOVR ,,b,PMARA_FTB2
PMARA_NEXEC        EQUOVR ,,b,PMARA_FTB2
PMARA_MANGLED      EQUOVR ,,b,PMARA_FTB2
.*
         MNOTE *,'Including IEWPMAR mapping macro'
         IEWPMAR ,                     * Generate IEWPMAR
         DSOVR  *END
         EQUOVR *END
*
PMAR     DSECT ,                       * Resume PMAR DSECT
         ORG   ,                       *
PMAR_LEN EQU   *-PMAR                  * Length of PMAR
*
PMARL    DSECT ,                       * Resume PMARL DSECT
         ORG   ,                       *
PMARL_LEN EQU  *-PMARL                 * Length of PMARL
*
PMARR    DSECT ,                       * Resume PMARR DSECT
         ORG   ,                       *
PMARR_LEN EQU  *-PMARR                 * Length of PMARR
*
PMARA    DSECT ,                       * Resume PMARA DSECT
         ORG   ,                       *
PMARA_LEN EQU  *-PMARA                 * Length of PMARA
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPRB   0100-20096-20096-0111-00105-00105-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps a Program Request Block
.*
&LABEL   MAPPRB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPRB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPRB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PRB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPRB).MEND
&BXA_MAC_MAPPRB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PRB
&BXA_CB_PRB SETC 'PRB'
.*
         GENMAPS RB                    * Generate RB mapping
*
RBPRFX   DSECT ,                       * Reset to RB DSECT
PRB      EQU   RBBASIC                 * Start of PRB proper
         ORG
PRB_LEN  EQU   *-PRB                   * Length of PRB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPRMLB 0100-20096-20096-0111-00138-00138-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the return and reason codes for IEFPRMLB as well as
.* its parameter areas
.*
&LABEL   MAPPRMLB &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPRMLB               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_MAPS_LST           * Maps listing option
         GBLC  &BXA_PGM_TITLE          * Title for the listing
         GBLB  &SP_SHOWALL             * Show all statements?
         GBLB  &BXA_MAC_MAPPRMLB       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PRM_LIST_BUFFER').EMBED
         AIF   ('&CB' EQ 'PRM_MESSAGE_BUFFER').EMBED
         AIF   ('&CB' EQ 'PRM_READ_BUFFER').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPRMLB).MEND
&BXA_MAC_MAPPRMLB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PRM_LIST_BUFFER
         GBLC  &BXA_CB_PRM_MESSAGE_BUFFER
         GBLC  &BXA_CB_PRM_READ_BUFFER
&BXA_CB_PRM_LIST_BUFFER    SETC 'PRMLB'
&BXA_CB_PRM_MESSAGE_BUFFER SETC 'PRMLB'
&BXA_CB_PRM_READ_BUFFER    SETC 'PRMLB'
.*
.* PRM_MSG_BUFFER_FLAGS
PRM_MSG_BUFFER_FULL EQUOVR ,,b,PRM_MSG_BUFFER_FLAGS
.*
         MNOTE *,'Including IEFZPMAP mapping macro'
         IEFZPMAP DSECT=YES,           * Include IEFPRMLB areas        *
               LIST=&BXA_MAPS_LST      *
         EQUOVR *END
.*
.* Length equates not included here: IBM supplies them in IEFZPMAP
* Length of PRM_LIST_BUFFER is to be incremented by 56 for each        *
                                     additional entry
* Length of PRM_READ_BUFFER is to be incremented by 80 for each        *
                                     additional entry
* Length of PRM_MESSAGE_BUFFER is to be incremented by 256 for each    *
                                        additional entry
.*
.* Add equates from IEFZPRC
         MNOTE *,'Including IEFZPRC mapping macro'
BXA_EQU  DSECT ,                       * Fancy dsect name
         IEFZPRC ,                     * Include IEFPRMLB equates
.*
.* Return to our original CSECT name
.* Since IEFZPMAP changes the listing's title: reset title too
&SYSECT  &SYSSTYP
         TITLE '&BXA_PGM_TITLE'
         AIF   (&SP_SHOWALL).TITLE
.* Generate comment line in stead of a MNOTE line
*
         AGO   .TITLEOK
.TITLE   ANOP
         MNOTE *,'Previous STMT: TITLE ''&BXA_PGM_TITLE'''
.TITLEOK ANOP
.*
.MEND    MEND
./ ADD NAME=MAPPSA   0100-20096-20096-0111-00314-00314-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Prefixed Storage Area (Virtual 1st page)
.* Since the PSA is always addressable thru R0, a USING is
.* included in the expansion, setting the PSA addressable troughout
.* the program.
.*
&LABEL   MAPPSA &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPSA                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPSA         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PSA').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPSA).MEND
&BXA_MAC_MAPPSA SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PSA
&BXA_CB_PSA SETC 'PSA'
.*
.* FLCSVILC - SVC INSTRUCTION LENGTH COUNTER - NUMBER OF BYTES
FLCSILCB EQUOVR ,,b,FLCSVILC
.*
.* FLCPIILC - PROGRAM INTERRUPT LENGTH COUNTER
FLCPILCB EQUOVR ,,b,FLCPIILC
.*
.* PSAPICOD - 8-BIT INTERRUPT CODE.
PSAPIPER EQUOVR ,,b,PSAPICOD
PSAPIMC  EQUOVR ,,b,PSAPICOD
PSAPIPC  EQUOVR ,,b,PSAPICOD
.*
.* FLCTEA - TRANSLATION EXCEPTION ADDRESS.
FLCTEAXM EQUOVR ,,b,FLCTEA
.*
.* FLCTEAB3 - LAST BYTE OF TEA.
FLCSOPI  EQUOVR ,,b,FLCTEAB3
FLCTSTDP EQUOVR ,,v,FLCTEAB3
FLCTSTDA EQUOVR ,,b,FLCTEAB3
FLCTSTDS EQUOVR ,,b,FLCTEAB3
FLCTSTDH EQUOVR ,,b,FLCTEAB3
.*
.* PSASUP1 - FIRST BYTE OF PSASUPER
PSAIO    EQUOVR ,,b,PSASUP1
PSASVC   EQUOVR ,,b,PSASUP1
PSAEXT   EQUOVR ,,b,PSASUP1
PSAPI    EQUOVR ,,b,PSASUP1
PSALOCK  EQUOVR ,,b,PSASUP1
PSADISP  EQUOVR ,,b,PSASUP1
PSATCTL  EQUOVR ,,b,PSASUP1
PSATYPE6 EQUOVR ,,b,PSASUP1
.*
.* PSASUP2 - SECOND BYTE OF PSASUPER
PSAIPCRI EQUOVR ,,b,PSASUP2
PSASVCR  EQUOVR ,,b,PSASUP2
PSASVCRR EQUOVR ,,b,PSASUP2
PSAACR   EQUOVR ,,b,PSASUP2
PSARTM   EQUOVR ,,b,PSASUP2
PSALCR   EQUOVR ,,b,PSASUP2
.*
.* PSASUP3 - THIRD BYTE OF PSASUPER
PSAIOSUP EQUOVR ,,b,PSASUP3
PSASPR   EQUOVR ,,b,PSASUP3
PSAESTA  EQUOVR ,,b,PSASUP3
PSARSM   EQUOVR ,,b,PSASUP3
PSAULCMS EQUOVR ,,b,PSASUP3
PSASLIP  EQUOVR ,,b,PSASUP3
.*
.* PSASUP4 - FOURTH BYTE OF PSASUPER
PSALDWT  EQUOVR ,,b,PSASUP4
PSASMF   EQUOVR ,,b,PSASUP4
PSAESAR  EQUOVR ,,b,PSASUP4
.*
.* PSAPTYPE - PROCESSOR TYPE INDICATOR
PSAAXP   EQUOVR ,,b,PSAPTYPE
.*
.* PSAILS - INTERRUPT HANDLER LINKAGE STACK INDICATORS.
PSAILSIO EQUOVR ,,b,PSAILS
PSAILSEX EQUOVR ,,b,PSAILS
PSAILSPC EQUOVR ,,b,PSAILS
PSAILSDS EQUOVR ,,b,PSAILS
PSAILSRS EQUOVR ,,b,PSAILS
PSAILSOR EQUOVR ,,b,PSAILS
PSAILST6 EQUOVR ,,b,PSAILS
PSAILSLK EQUOVR ,,b,PSAILS
.*
.* PSAFLAGS - SYSTEM FLAGS
PSAAEIT  EQUOVR ,,b,PSAFLAGS
.*
.* PSAMPSW - SETLOCK MODEL PSW
PSAPIOM  EQUOVR ,,b,PSAMPSW+1
PSAPEXM  EQUOVR ,,b,PSAMPSW+1
.*
.* PSARSML - RSM GLOBAL FUNCTION/RECOVERY
PSARSMEX EQUOVR ,,b,PSARSML
.*
.* PSATRCEL - TRACE BUFFER MANAGEMENT LOCK
PSATRCEX EQUOVR ,,b,PSATRCEL
.*
.* PSAIOSL - IOS LOCK
PSAIOSEX EQUOVR ,,b,PSAIOSL
.*
.* PSACLHS1 - FIRST BYTE OF PSACLHS. (MDC384)
PSACPULI EQUOVR ,,b,PSACLHS1
PSASUM   EQUOVR ,,b,PSACLHS1
PSARSMLI EQUOVR ,,b,PSACLHS1
PSATRCEI EQUOVR ,,b,PSACLHS1
PSAIOSI  EQUOVR ,,b,PSACLHS1
.*
.* PSACLHS2 - SECOND BYTE OF PSACLHS. (MDC385)
PSARSMCI EQUOVR ,,b,PSACLHS2
PSARSMGI EQUOVR ,,b,PSACLHS2
PSAVFIXI EQUOVR ,,b,PSACLHS2
PSAASMGI EQUOVR ,,b,PSACLHS2
PSARSMSI EQUOVR ,,b,PSACLHS2
.*
.* PSACLHS3 - THIRD BYTE OF PSACLHS  (MDC386)
PSARSMXI EQUOVR ,,b,PSACLHS3
PSARSMAI EQUOVR ,,b,PSACLHS3
PSAVPAGI EQUOVR ,,b,PSACLHS3
PSADSPLI EQUOVR ,,b,PSACLHS3
PSAASMLI EQUOVR ,,b,PSACLHS3
PSASALLI EQUOVR ,,b,PSACLHS3
PSAIOSLI EQUOVR ,,b,PSACLHS3
PSARSMDI EQUOVR ,,b,PSACLHS3
.*
.* PSACLHS4 - FOURTH BYTE OF PSACLHS  (MDC392)
PSAIOULI EQUOVR ,,b,PSACLHS3
PSATPALI EQUOVR ,,b,PSACLHS3
PSASRMLI EQUOVR ,,b,PSACLHS3
PSACMSLI EQUOVR ,,b,PSACLHS3
PSALCLLI EQUOVR ,,b,PSACLHS3
.*
.* PSAINTE - FLAGS FOR CPU TIMER  (MDC466)
PSANUIN  EQUOVR ,,b,PSAINTE
.*
.* PSAPCFB1 - FUNCTION VALUE  (MDC484)
PSAPCMC  EQUOVR ,,v,PSAPCFB1
PSAPCPF  EQUOVR ,,v,PSAPCFB1
PSAPCPS  EQUOVR ,,v,PSAPCFB1
PSAPCAD  EQUOVR ,,v,PSAPCFB1
PSAPCTR  EQUOVR ,,v,PSAPCFB1
PSAPCPC  EQUOVR ,,v,PSAPCFB1
PSAPCTRC EQUOVR ,,v,PSAPCFB1
PSAPCAF  EQUOVR ,,v,PSAPCFB1
PSAPCLS  EQUOVR ,,v,PSAPCFB1
PSAPCART EQUOVR ,,v,PSAPCFB1
PSAPCDPF EQUOVR ,,v,PSAPCFB1
PSAPCDAR EQUOVR ,,v,PSAPCFB1
PSAPCPRT EQUOVR ,,v,PSAPCFB1
PSAPCMAX EQUOVR ,,v,PSAPCFB1
.*
.* PSAPCFB2 - FUNCTION FLAGS  (MDC491)
PSAPCTRR EQUOVR ,,b,PSAPCFB2
PSAPCMT  EQUOVR ,,b,PSAPCFB2
.*
.* PSAPCFB3 - RECURSION FLAGS  (MDC494)
PSAPCP1  EQUOVR ,,b,PSAPCFB3
PSAPCP2  EQUOVR ,,b,PSAPCFB3
PSAPCDE  EQUOVR ,,b,PSAPCFB3
PSAPCLV  EQUOVR ,,b,PSAPCFB3
PSAPCP3  EQUOVR ,,b,PSAPCFB3
PSAPCP4  EQUOVR ,,b,PSAPCFB3
PSAPCPFR EQUOVR ,,b,PSAPCFB3
PSAPCAVR EQUOVR ,,b,PSAPCFB3
.*
.* PSAPCFB4 - RECURSION FLAGS
PSAPCDNV EQUOVR ,,b,PSAPCFB4
PSAPCLSR EQUOVR ,,b,PSAPCFB4
.*
.* PSAMFLGS - SECOND BYTE OF PSAMODEW (MDC604)
PSANSS   EQUOVR ,,b,PSAMFLGS
PSAPRSRB EQUOVR ,,b,PSAMFLGS
.*
.* PSAMODE - SYSTEM MODE INDICATOR
PSATASKM EQUOVR ,,v,PSAMODE
PSASRBM  EQUOVR ,,b,PSAMODE
PSAWAITM EQUOVR ,,b,PSAMODE
PSADISPM EQUOVR ,,b,PSAMODE
PSAPSRBM EQUOVR ,,b,PSAMODE
.*
.* PSALHEB0 - BYTE 0 OF THE CURRENT LOCK HELD
PSABLSDI EQUOVR ,,b,PSALHEB0
PSAXDSI  EQUOVR ,,b,PSALHEB0
PSAXRESI EQUOVR ,,b,PSALHEB0
PSAXQI   EQUOVR ,,b,PSALHEB0
PSAESETI EQUOVR ,,b,PSALHEB0
PSAIXSCI EQUOVR ,,b,PSALHEB0
PSAIXSHI EQUOVR ,,b,PSALHEB0
PSAIXDSI EQUOVR ,,b,PSALHEB0
.*
.* PSALHEB1 - BYTE 1 OF THE CURRENT LOCK HELD
PSAIXLLI EQUOVR ,,b,PSALHEB1
PSAULUTI EQUOVR ,,b,PSALHEB1
PSAIXLRI EQUOVR ,,b,PSALHEB1
PSAWLMRI EQUOVR ,,b,PSALHEB1
PSAWLMQI EQUOVR ,,b,PSALHEB1
PSACNTXI EQUOVR ,,b,PSALHEB1
PSAREGSI EQUOVR ,,b,PSALHEB1
.*
.* PSACR0CB - CR0 CONTROL BYTE USED BY PROTPSA MACRO
PSAENABL EQUOVR ,,b,PSACR0CB
PSADSABL EQUOVR ,,v,PSACR0CB
.*
.* PSACR0SV - CR0 SAVE AREA USED BY PROTPSA MACRO
PSACR0EN EQUOVR ,,b,PSACR0SV
PSACR0FP EQUOVR ,,b,PSACR0SV
PSACR0VI EQUOVR ,,b,PSACR0SV
.*
.* PSARCR0 - RESTART FLIH CR0 SAVE AREA
PSARPEN  EQUOVR ,,b,PSARCR0
.*
.* PSASCFB - SUPERVISOR CONTROL FLAG BYTE.
PSAIOPR  EQUOVR ,,b,PSASCFB
PSAIORTY EQUOVR ,,b,PSASCFB
.*
.* PSATRACE - SYSTEM TRACE FLAGS.
PSATROFF EQUOVR ,,b,PSATRACE
.*
.* PSASFLGS - Schedule flags
PSASCHDA EQUOVR ,,b,PSASFLGS
PSAMCHA  EQUOVR ,,b,PSASFLGS
PSARSTA  EQUOVR ,,b,PSASFLGS
PSAEGRA  EQUOVR ,,b,PSASFLGS
PSARTMA  EQUOVR ,,b,PSASFLGS
.*
         MNOTE *,'Including IHAPSA mapping macro'
         IHAPSA DSECT=YES,             * Generate as a DSECT           *
               LIST=YES                * with unchanged PRINT-settings
         EQUOVR *END
*
         ORG
PSA_LEN  EQU   *-PSA                   * Length of PSA
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPSL   0100-20096-20096-0111-00128-00128-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Page Service List entry
.*
&LABEL   MAPPSL &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPSL                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPSL         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PSL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPSL).MEND
&BXA_MAC_MAPPSL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PSL
&BXA_CB_PSL SETC 'PSL'
.*
.* PSLFLGS1 - FLAGS SET BY CALLER
PSLAST   EQUOVR ,,b,PSLFLGS1
PSLNULL  EQUOVR ,,b,PSLFLGS1
PSLCHAIN EQUOVR ,,b,PSLFLGS1
.*
.* PSLFUNC - RESERVED. SET BY PGSER MACRO
PSLFFIX  EQUOVR ,,v,PSLFUNC
PSLFFREE EQUOVR ,,v,PSLFUNC
PSLFANYW EQUOVR ,,v,PSLFUNC
PSLFLOAD EQUOVR ,,v,PSLFUNC
PSLFOUT  EQUOVR ,,v,PSLFUNC
PSLFRELS EQUOVR ,,v,PSLFUNC
PSLFPROT EQUOVR ,,v,PSLFUNC
PSLFUNP  EQUOVR ,,v,PSLFUNC
.*
.* PSLFLGS2 - RESERVED. SET BY PGSER MACRO
PSLRLSE  EQUOVR ,,b,PSLFLGS2
PSLKEPRL EQUOVR ,,b,PSLFLGS2
PSLANYW  EQUOVR ,,b,PSLFLGS2
PSLONG   EQUOVR ,,b,PSLFLGS2
PSLBACK  EQUOVR ,,b,PSLFLGS2
.*
         MNOTE *,'Including IHAPSL mapping macro'
         IHAPSL ,
         EQUOVR *END
*
PSL      DSECT ,                       * Resume PSL DSECT
         ORG
PSL_LEN  EQU   *-PSL                   * Length of PSL
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPPVT   0100-20096-20096-0111-00119-00119-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the RSM Page Vector Table
.*
&LABEL   MAPPVT &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPPVT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPPVT         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'PVT').EMBED
         AIF   ('&CB' EQ 'PVTEXT').EMBED
         AIF   ('&CB' EQ 'PVTVVTAB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPPVT).MEND
&BXA_MAC_MAPPVT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_PVT
         GBLC  &BXA_CB_PVTEXT
         GBLC  &BXA_CB_PVTVVTAB
&BXA_CB_PVT      SETC 'PVT'
&BXA_CB_PVTEXT   SETC 'PVT'
&BXA_CB_PVTVVTAB SETC 'PVT'
.*
         MNOTE *,'Including IHAPVT mapping macro'
         IHAPVT ,
*
PVT      DSECT ,                       * Resume PVT DSECT
         ORG
PVT_LEN  EQU   *-PVT                   * Length of PVT
*
PVTVVTAB DSECT ,                       * Resume PVTVVTAB DSECT
         ORG
PVTVVTAB_LEN EQU *-PVTVVTAB            * Length of PVTVVTAB
*
PVTEXT   DSECT ,                       * Resume PVTEXT DSECT
         ORG
PVTEXT_LEN EQU *-PVTEXT                * Length of PVTEXT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPQCB   0100-20096-20096-0111-00125-00125-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the GRS Queue Control Block
.*
&LABEL   MAPQCB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPQCB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPQCB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'QCB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPQCB).MEND
&BXA_MAC_MAPQCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_QCB
&BXA_CB_QCB SETC 'QCB'
.*
.* QCBRFLGS - RESOURCE DESCRIPTION FLAGS
QCBSYS   EQUOVR ,,b,QCBRFLGS
QCBSYSS  EQUOVR ,,b,QCBRFLGS
QCBSTEP  EQUOVR ,,b,QCBRFLGS
QCBGLOBL EQUOVR ,,b,QCBRFLGS
QCBNOENQ EQUOVR ,,b,QCBRFLGS
QCBPHLDR EQUOVR ,,b,QCBRFLGS
QCBQM    EQUOVR ,,b,QCBRFLGS
QCBMASF  EQUOVR ,,b,QCBRFLGS
.*
.* QCBFLGS2 - Second flag byte
QCBSOC   EQUOVR ,,b,QCBFLGS2
.*
.* QCBRNAML - LENGTH OF RNAME
QCBRNSZ1 EQUOVR ,,v,QCBRNAML
QCBRNSZ2 EQUOVR ,,v,QCBRNAML
QCBRNS2A EQUOVR ,,v,QCBRNAML
QCBRNSZ3 EQUOVR ,,v,QCBRNAML
.*
         MNOTE *,'Including ISGQCB mapping macro'
         ISGQCB ,
         EQUOVR *END
*
QCB      DSECT ,                       * Resume QCB DSECT
         ORG
QCB_LEN  EQU   *-QCB                   * Length of QCB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPQEL   0100-20096-20096-0111-00134-00134-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the GRS Queue ELement
.*
&LABEL   MAPQEL &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPQEL                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPQEL         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'QEL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPQEL).MEND
&BXA_MAC_MAPQEL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_QEL
&BXA_CB_QEL SETC 'QEL'
.*
.* QELQFLGS - THESE FLAGS PERTAIN TO THE QEL
QELSHARE EQUOVR ,,b,QELQFLGS
QELMC    EQUOVR ,,b,QELQFLGS
QELRESV  EQUOVR ,,b,QELQFLGS
QELRESVC EQUOVR ,,b,QELQFLGS
QELAUTH  EQUOVR ,,b,QELQFLGS
QELTCBFA EQUOVR ,,b,QELQFLGS
QELQMADQ EQUOVR ,,b,QELQFLGS
QELQMATD EQUOVR ,,b,QELQFLGS
.*
.* QELLFLGS - THESE FLAGS PERTAIN TO LIST REQUESTS
QELPOST  EQUOVR ,,b,QELLFLGS
QELECBF  EQUOVR ,,b,QELLFLGS
QELECBZ  EQUOVR ,,b,QELLFLGS
QELLERSV EQUOVR ,,b,QELLFLGS
QELGQSIR EQUOVR ,,b,QELLFLGS
QELRNLNO EQUOVR ,,b,QELLFLGS
QELFDTRY EQUOVR ,,b,QELLFLGS
QELAFRES EQUOVR ,,b,QELLFLGS
.*
.* QELFLGS3 - Third flag byte
QELOWNER EQUOVR ,,b,QELFLGS3
QELSEHLD EQUOVR ,,b,QELFLGS3
QELMC2E  EQUOVR ,,b,QELFLGS3
QELMTARG EQUOVR ,,b,QELFLGS3
QELNOHLD EQUOVR ,,b,QELFLGS3
QELUCBER EQUOVR ,,b,QELFLGS3
.*
         MNOTE *,'Including ISGQEL mapping macro'
         ISGQEL ,                      *
         EQUOVR *END
*
QEL      DSECT ,                       * Resume QEL DSECT
         ORG   ,
QEL_LEN  EQU   *-QEL                   * Length of QEL
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPQHT   0100-20096-20096-0111-00116-00116-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the GRS Queue Hash Table
.*
&LABEL   MAPQHT &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPQHT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPQHT         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'QHT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPQHT).MEND
&BXA_MAC_MAPQHT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_QHT
         GBLC  &BXA_CB_QHTENT
&BXA_CB_QHT SETC 'QHT'
&BXA_CB_QHTENT SETC 'QHT'
.*
.* QHTEFQCB - ADDRESS OF FIRST QCB ON SYNONYM CHAIN OF FIRST RSES
QHTEQDMG EQUOVR ,,b,QHTEFQCB
QHTERSV1 EQUOVR ,,b,QHTEFQCB
.*
         MNOTE *,'Including ISGQHT mapping macro'
         ISGQHT ,
         EQUOVR *END
*
QHT      DSECT ,                       * Resume QHT header DSECT
         ORG
QHT_LEN  EQU   *-QHT                   * Length of QHT
*
QHTENT   DSECT ,                       * Resume QHT ENTry DSECT
         ORG
QHTENT_LEN EQU *-QHTENT                * Length of QHTENT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPQMIDS 0100-20096-20096-0111-00113-00113-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro with equates for SWAREQ
.*
         MAPQMIDS
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPQMIDS               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* &BXA_QMIDS is used to indicate MAPQMIDS has been expanded
         GBLB  &BXA_MAC_MAPQMIDS
         AIF   (&BXA_MAC_MAPQMIDS).MEND
&BXA_MAC_MAPQMIDS SETB 1
.*
         GENMAPS (EPAL)                * EPAL contains related fields
.*
         MNOTE *,'Including IEFQMIDS mapping macro'
.*
.* Declare Block id's for use with EPAL/EPAX
SWJCTID  EQUOVR ,,v,SWBLKID
SWACTID  EQUOVR ,,v,SWBLKID
SWSCTID  EQUOVR ,,v,SWBLKID
SWSIOTID EQUOVR ,,v,SWBLKID
SWDSNTID EQUOVR ,,v,SWBLKID
SWPOTID  EQUOVR ,,v,SWBLKID
SWSCTXID EQUOVR ,,v,SWBLKID
SWDSENID EQUOVR ,,v,SWBLKID
SWJMRID  EQUOVR ,,v,SWBLKID
SWJFCBID EQUOVR ,,v,SWBLKID
SWJFCXID EQUOVR ,,v,SWBLKID
SWPDIDID EQUOVR ,,v,SWBLKID
SWPDIBID EQUOVR ,,v,SWBLKID
SWPDIQID EQUOVR ,,v,SWBLKID
SWGDGNID EQUOVR ,,v,SWBLKID
SWIWABID EQUOVR ,,v,SWBLKID
SWVUTID  EQUOVR ,,v,SWBLKID
SWDDNTID EQUOVR ,,v,SWBLKID
SWAMPXID EQUOVR ,,v,SWBLKID
SWJFCEID EQUOVR ,,v,SWBLKID
SWJCTXID EQUOVR ,,v,SWBLKID
SWSSWAID EQUOVR ,,v,SWBLKID
SWSWBID  EQUOVR ,,v,SWBLKID
SWSIOTBL EQUOVR ,,v,SWBLKID
SWJFCBBL EQUOVR ,,v,SWBLKID
SWJFCEBL EQUOVR ,,v,SWBLKID
SWIFBID  EQUOVR ,,v,SWBLKID
.*
.* Put equates in a DSECT to prevent warning messages in ASM listing
ZB505    DSECT
         IEFQMIDS
         EQUOVR *END
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPRB    0100-20096-20096-0111-00281-00281-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps a Request Block
.*
&LABEL   MAPRB &DSECT=YES,             * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPRB                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPRB          * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'RB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPRB).MEND
&BXA_MAC_MAPRB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_RB
&BXA_CB_RB SETC 'RB'
.*
.* RBTMFLD - INDICATORS FOR TIMER ROUTINES.
RBTMQUE  EQUOVR ,,b,RBTMFLD
RBTMTOD  EQUOVR ,,b,RBTMFLD
RBRSV005 EQUOVR ,,b,RBTMFLD
RBWLIM   EQUOVR ,,b,RBTMFLD
RBTMCMP  EQUOVR ,,b,RBTMFLD
RBTMIND2 EQUOVR ,,b,RBTMFLD
RBTMIND3 EQUOVR ,,b,RBTMFLD
RBTREQ   EQUOVR ,,v,RBTMFLD
RBWREQ   EQUOVR ,,b,RBTMFLD
RBRREQ   EQUOVR ,,b,RBTMFLD
.*
.* RBSTAB1 - FIRST BYTE OF STATUS AND ATTRIBUTE BITS
RBFTCKPT EQUOVR ,,b,RBSTAB1
XRBCKPT  EQUOVR ,,b,RBSTAB1
.*
.* RBSTAB2 - SECOND BYTE OF STATUS AND ATTRIBUTE BITS
RBTCBNXT EQUOVR ,,b,RBSTAB2
XRBTCBP  EQUOVR ,,b,RBSTAB2
RBFACTV  EQUOVR ,,b,RBSTAB2
XRBACTV  EQUOVR ,,b,RBSTAB2
RBFDYN   EQUOVR ,,b,RBSTAB2
XRBFRRB  EQUOVR ,,b,RBSTAB2
RBECBWT  EQUOVR ,,b,RBSTAB2
XRBWAIT  EQUOVR ,,b,RBSTAB2
.*
.* RBOPSWB1 - OLD PSW BYTE 1
RBOPER   EQUOVR ,,b,RBOPSWB1
.*
.* RBOPSWB2 - OLD PSW BYTE 2  (MDC304)
RBOPSWPS EQUOVR ,,b,RBOPSWB2
.*
.* RBOPSWA - OLD PSW BYTES 5-8 (ADDRESS)
RBOPSWM  EQUOVR ,,b,RBOPSWA
.*
.* RBRSV019 - RESERVED
RBRSV020 EQUOVR ,,b,RBRSV019
RBRSV021 EQUOVR ,,b,RBRSV019
RBRSV022 EQUOVR ,,b,RBRSV019
RBRSV023 EQUOVR ,,b,RBRSV019
RBRSV024 EQUOVR ,,b,RBRSV019
RBRSV025 EQUOVR ,,b,RBRSV019
RBRSV026 EQUOVR ,,b,RBRSV019
RBRSV027 EQUOVR ,,b,RBRSV019
.*
.* RBRSV028 - RESERVED
RBRSV029 EQUOVR ,,b,RBRSV028
RBRSV030 EQUOVR ,,b,RBRSV028
RBRSV031 EQUOVR ,,b,RBRSV028
RBRSV032 EQUOVR ,,b,RBRSV028
RBRSV033 EQUOVR ,,b,RBRSV028
RBRSV034 EQUOVR ,,b,RBRSV028
RBRSV035 EQUOVR ,,b,RBRSV028
RBRSV036 EQUOVR ,,b,RBRSV028
.*
.* RBRSV041 - RESERVED
RBRSV042 EQUOVR ,,b,RBRSV041
RBRSV043 EQUOVR ,,b,RBRSV041
RBRSV044 EQUOVR ,,b,RBRSV041
RBRSV045 EQUOVR ,,b,RBRSV041
RBRSV046 EQUOVR ,,b,RBRSV041
RBRSV047 EQUOVR ,,b,RBRSV041
RBRSV048 EQUOVR ,,b,RBRSV041
RBRSV049 EQUOVR ,,b,RBRSV041
.*
.* RBKEYSTA - THE KEY AND STATE OF THE IRB ROUTINE
RBKEY    EQUOVR ,,b,RBKEYSTA
RBCIRB   EQUOVR ,,b,RBKEYSTA
RBSTATE  EQUOVR ,,b,RBKEYSTA
.*
.* RBFLAGS2 - SECOND FLAG BYTE
RBXWAITA EQUOVR ,,b,RBFLAGS2
RBRSV056 EQUOVR ,,b,RBFLAGS2
RBRSV057 EQUOVR ,,b,RBFLAGS2
RBRSV058 EQUOVR ,,b,RBFLAGS2
RBRSV059 EQUOVR ,,b,RBFLAGS2
RBRSV060 EQUOVR ,,b,RBFLAGS2
RBRSV061 EQUOVR ,,b,RBFLAGS2
RBRSV062 EQUOVR ,,b,RBFLAGS2
.*
.* RBFLAGS1 - FLAG BYTE
RBSLOCK  EQUOVR ,,b,RBFLAGS1
RBXWAIT  EQUOVR ,,b,RBFLAGS1
RBABEND  EQUOVR ,,b,RBFLAGS1
RBXWPRM  EQUOVR ,,b,RBFLAGS1
RBASIR   EQUOVR ,,b,RBFLAGS1
RBLONGWT EQUOVR ,,b,RBFLAGS1
RBSCB    EQUOVR ,,b,RBFLAGS1
RBSSSYN  EQUOVR ,,b,RBFLAGS1
.*
.* RBFLAGS3 - FLAG BYTE. SERIALIZATION:LOCAL LOCK
RBWTECB  EQUOVR ,,b,RBFLAGS3
.*
.* RBSTAB1 - FIRST BYTE OF STATUS AND ATTRIBUTE BITS
RBFTP    EQUOVR ,,b,RBSTAB1
RBFTPRB  EQUOVR ,,v,RBSTAB1
RBFTTIRB EQUOVR ,,b,RBSTAB1
RBFTIRB  EQUOVR ,,b,RBSTAB1
RBFTSIRB EQUOVR ,,b,RBSTAB1
RBFTSVRB EQUOVR ,,b,RBSTAB1
RBTRSVRB EQUOVR ,,b,RBSTAB1
RBFNSVRB EQUOVR ,,b,RBSTAB1
RBWAITP  EQUOVR ,,b,RBSTAB1
RBATNXIT EQUOVR ,,b,RBSTAB1
RBPMSVRB EQUOVR ,,b,RBSTAB1
.*
.* RBSTAB2 - SECOND BYTE OF STATUS AND ATTRIBUTE BITS
RBATTN   EQUOVR ,,b,RBSTAB2
RBETXR   EQUOVR ,,b,RBSTAB2
RBUSIQE  EQUOVR ,,b,RBSTAB2
RBIQETP  EQUOVR ,,b,RBSTAB2
RBRQENR  EQUOVR ,,v,RBSTAB2
RBIRBAER EQUOVR ,,b,RBSTAB2
RBIQENR  EQUOVR ,,b,RBSTAB2
RBIRBAIQ EQUOVR ,,b,RBSTAB2
.*
.* RBEP - ENTRY POINT ADDRESS OF ASYNCHRONOUSLY EXECUTED ROUTINE
RBEPM    EQUOVR ,,b,RBEP
.*
.* RBEPLBYT - BITS 0-6 = BITS 24-30 OF EP ADDR         *
RBEPPD   EQUOVR ,,b,RBEPLBYT
.*
.* RBRSV138 - RESERVED
RBRSV139 EQUOVR ,,b,RBRSV138
RBRSV140 EQUOVR ,,b,RBRSV138
RBRSV141 EQUOVR ,,b,RBRSV138
RBRSV142 EQUOVR ,,b,RBRSV138
RBRSV143 EQUOVR ,,b,RBRSV138
RBRSV144 EQUOVR ,,b,RBRSV138
RBRSV145 EQUOVR ,,b,RBRSV138
RBRSV146 EQUOVR ,,b,RBRSV138
.*
.* RBSFLGS1 - FIRST FLAG BYTE
RBSSTAI  EQUOVR ,,b,RBSFLGS1
RBSSTAR  EQUOVR ,,b,RBSFLGS1
RBSDUMMY EQUOVR ,,b,RBSFLGS1
RBSESTAE EQUOVR ,,b,RBSFLGS1
RBRSV162 EQUOVR ,,b,RBSFLGS1
RBSASYNC EQUOVR ,,b,RBSFLGS1
RBSIOPRC EQUOVR ,,b,RBSFLGS1
RBSNOIOP EQUOVR ,,b,RBSFLGS1
RBSHALT  EQUOVR ,,b,RBSFLGS1
.*
.* RBSFLGS2 - SECOND FLAG BYTE
RBSAMODE EQUOVR ,,b,RBSFLGS2
RBSXCTL2 EQUOVR ,,b,RBSFLGS2
RBRSV164 EQUOVR ,,b,RBSFLGS2
RBSINUSE EQUOVR ,,b,RBSFLGS2
RBRSV165 EQUOVR ,,b,RBSFLGS2
RBRSV166 EQUOVR ,,b,RBSFLGS2
RBSKEY0  EQUOVR ,,b,RBSFLGS2
RBSSUPER EQUOVR ,,b,RBSFLGS2
.*
.* RBSFLG3 - OPTION FLAGS
RBRSV167 EQUOVR ,,b,RBSFLG3
RBSTERMI EQUOVR ,,b,RBSFLG3
RBSRECRD EQUOVR ,,b,RBSFLG3
RBSCNCEL EQUOVR ,,b,RBSFLG3
RBSPRNTR EQUOVR ,,b,RBSFLG3
RBSBRNTR EQUOVR ,,b,RBSFLG3
RBSTERMO EQUOVR ,,b,RBSFLG3
RBRSV168 EQUOVR ,,b,RBSFLG3
.*
.* RBCDFLGS - CONTROL FLAGS
RBNOCELL EQUOVR ,,b,RBCDFLGS
RBRSV009 EQUOVR ,,b,RBCDFLGS
RBCDATCH EQUOVR ,,b,RBCDFLGS
RBCDSAVE EQUOVR ,,b,RBCDFLGS
RBCDNODE EQUOVR ,,b,RBCDFLGS
RBCDSYNC EQUOVR ,,b,RBCDFLGS
RBCDXCTL EQUOVR ,,b,RBCDFLGS
RBCDLOAD EQUOVR ,,b,RBCDFLGS
.*
         MNOTE *,'Including IHARB mapping macro'
         IHARB DSECT=YES,              * Generate RB                   *
               LIST=YES                * with unchanged PRINT option
         EQUOVR *END
*
RBPRFX   DSECT ,                       * Reset to RB DSECT
         ORG
RBPRFX_LEN EQU RBBASIC-RBPRFX          * Length of RB prefix area
RB_LEN   EQU   *-RBBASIC               * Length of RB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPRCTD  0100-20096-20096-0111-00188-00188-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Region Control Task Data area
.*
&LABEL   MAPRCTD &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPRCTD                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPRCTD        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'RCTD').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPRCTD).MEND
&BXA_MAC_MAPRCTD SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_RCTD
&BXA_CB_RCTD SETC 'RCTD'
.*
.* RCTDFLG1 - FLAGS
RCTDCLAS EQUOVR ,,b,RCTDFLG1
.*
.* RCTDWPTR - POINTER TO ASCBECB
RCTDECBE EQUOVR ,,b,RCTDWPTR
.*
.* RCTDTECB - RCT TERMINATION ECB
RCTDPOST EQUOVR ,,b,RCTDTECB
.*
.* RCTDMOID - MODULE IDENTIFIER
RCTDINIT EQUOVR ,,b,RCTDMOID
RCTDCOMN EQUOVR ,,b,RCTDMOID
RCTDQUIS EQUOVR ,,b,RCTDMOID
RCTDREST EQUOVR ,,b,RCTDMOID
RCTDATTN EQUOVR ,,b,RCTDMOID
RCTDTERM EQUOVR ,,b,RCTDMOID
RCTDDUMP EQUOVR ,,b,RCTDMOID
.*
.* RCTDFLGS - RECOVERY FLAGS
RCTDATTD EQUOVR ,,b,RCTDFLGS
RCTDRES3 EQUOVR ,,b,RCTDFLGS
RCTDATTS EQUOVR ,,b,RCTDFLGS
RCTDBRCP EQUOVR ,,b,RCTDFLGS
RCTDWAIT EQUOVR ,,b,RCTDFLGS
RCTDLOOP EQUOVR ,,b,RCTDFLGS
RCTDBR2T EQUOVR ,,b,RCTDFLGS
RCTDBR2Q EQUOVR ,,b,RCTDFLGS
RCTDBR2R EQUOVR ,,b,RCTDFLGS
RCTDBR2A EQUOVR ,,b,RCTDFLGS
RCTDRES4 EQUOVR ,,b,RCTDFLGS
RCTDDETS EQUOVR ,,b,RCTDFLGS
RCTDDETD EQUOVR ,,b,RCTDFLGS
RCTDCANE EQUOVR ,,b,RCTDFLGS
RCTDAFPE EQUOVR ,,b,RCTDFLGS
RCTDAFPC EQUOVR ,,b,RCTDFLGS
RCTDPMSG EQUOVR ,,b,RCTDFLGS
RCTDIGAT EQUOVR ,,b,RCTDFLGS
RCTDENQ  EQUOVR ,,b,RCTDFLGS
RCTDOLL1 EQUOVR ,,b,RCTDFLGS
RCTDRLL1 EQUOVR ,,b,RCTDFLGS
RCTDPSUB EQUOVR ,,b,RCTDFLGS
RCTDSY12 EQUOVR ,,b,RCTDFLGS
RCTDSV16 EQUOVR ,,b,RCTDFLGS
RCTDDEQ  EQUOVR ,,b,RCTDFLGS
RCTDPSRB EQUOVR ,,b,RCTDFLGS
RCTDSY13 EQUOVR ,,b,RCTDFLGS+1
RCTDSSUB EQUOVR ,,b,RCTDFLGS+1
RCTDSSRB EQUOVR ,,b,RCTDFLGS+1
RCTDSWOT EQUOVR ,,b,RCTDFLGS+1
RCTDQWAI EQUOVR ,,b,RCTDFLGS+1
RCTDSLFL EQUOVR ,,b,RCTDFLGS+1
RCTDPRGF EQUOVR ,,b,RCTDFLGS+1
RCTDSYBC EQUOVR ,,b,RCTDFLGS+1
RCTDSWPF EQUOVR ,,b,RCTDFLGS+2
RCTDOLL2 EQUOVR ,,b,RCTDFLGS+2
RCTDRLL2 EQUOVR ,,b,RCTDFLGS+2
RCTDOGL1 EQUOVR ,,b,RCTDFLGS+2
RCTDRGL1 EQUOVR ,,b,RCTDFLGS+2
RCTDQABD EQUOVR ,,b,RCTDFLGS+2
RCTDRS17 EQUOVR ,,b,RCTDFLGS
RCTDOBLK EQUOVR ,,b,RCTDFLGS
RCTDSTAT EQUOVR ,,b,RCTDFLGS
RCTDRLLK EQUOVR ,,b,RCTDFLGS
RCTDSY19 EQUOVR ,,b,RCTDFLGS
RCTDSY18 EQUOVR ,,b,RCTDFLGS
RCTDFAIL EQUOVR ,,b,RCTDFLGS
RCTDRSLW EQUOVR ,,b,RCTDFLGS
RCTDRIOC EQUOVR ,,b,RCTDFLGS+1
RCTDWTLB EQUOVR ,,b,RCTDFLGS+1
RCTDSTAC EQUOVR ,,b,RCTDFLGS+1
RCTDRLWC EQUOVR ,,b,RCTDFLGS+1
RCTDRLWB EQUOVR ,,b,RCTDFLGS+1
RCTDWTLC EQUOVR ,,b,RCTDFLGS+2
RCTDOPTC EQUOVR ,,b,RCTDFLGS+2
.*
.* RCTDRCTF - RCT'S CROSS COMMUNICATIONS RECOVERRY FLAGS
RCTDRSBO EQUOVR ,,b,RCTDRCTF
RCTDSUBN EQUOVR ,,b,RCTDRCTF
RCTDPRGR EQUOVR ,,b,RCTDRCTF
RCTDSRBN EQUOVR ,,b,RCTDRCTF
RCTDDLCK EQUOVR ,,b,RCTDRCTF
.*
         MNOTE *,'Including IEARCTD mapping macro'
         IEARCTD LIST=YES              * Keep current listing options
         EQUOVR *END
*
RCTD     DSECT ,                       * Resume RCTD DSECT
         ORG   ,
RCTD_LEN EQU   *-RCTD                  * Length of RCTD
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPREGS  0100-20096-20096-0111-00140-00140-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the registers onto mnemonic names
.*
         MAPREGS
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPREGS                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Expand only once
         GBLB  &BXA_MAC_MAPREGS
         AIF   (&BXA_MAC_MAPREGS).MEND
&BXA_MAC_MAPREGS SETB 1
.*
.* Put equates in a DSECT to prevent warning messages in ASM listing
BXA_EQU  DSECT
.*
         MNOTE *,'Generating register equates'
*
* Register equates
R0       EQU   0,4,C'g'                *
R1       EQU   1,4,C'g'                *
R2       EQU   2,4,C'g'                *
R3       EQU   3,4,C'g'                *
R4       EQU   4,4,C'g'                *
R5       EQU   5,4,C'g'                *
R6       EQU   6,4,C'g'                *
R7       EQU   7,4,C'g'                *
R8       EQU   8,4,C'g'                *
R9       EQU   9,4,C'g'                *
R10      EQU   10,4,C'g'               *
R11      EQU   11,4,C'g'               *
R12      EQU   12,4,C'g'               *
R13      EQU   13,4,C'g'               *
R14      EQU   14,4,C'g'               *
R15      EQU   15,4,C'g'               *
*
* Access register equates
AR0      EQU   0,4,C'a'                *
AR1      EQU   1,4,C'a'                *
AR2      EQU   2,4,C'a'                *
AR3      EQU   3,4,C'a'                *
AR4      EQU   4,4,C'a'                *
AR5      EQU   5,4,C'a'                *
AR6      EQU   6,4,C'a'                *
AR7      EQU   7,4,C'a'                *
AR8      EQU   8,4,C'a'                *
AR9      EQU   9,4,C'a'                *
AR10     EQU   10,4,C'a'               *
AR11     EQU   11,4,C'a'               *
AR12     EQU   12,4,C'a'               *
AR13     EQU   13,4,C'a'               *
AR14     EQU   14,4,C'a'               *
AR15     EQU   15,4,C'a'               *
*
* Floating point register equates
FPR0     EQU   0,8,C'f'                *
FPR2     EQU   2,8,C'f'                *
FPR4     EQU   4,8,C'f'                *
FPR6     EQU   6,8,C'f'                *
*
* Control register equates
CR0      EQU   0,4,C'c'                *
CR1      EQU   1,4,C'c'                *
CR2      EQU   2,4,C'c'                *
CR3      EQU   3,4,C'c'                *
CR4      EQU   4,4,C'c'                *
CR5      EQU   5,4,C'c'                *
CR6      EQU   6,4,C'c'                *
CR7      EQU   7,4,C'c'                *
CR8      EQU   8,4,C'c'                *
CR9      EQU   9,4,C'c'                *
CR10     EQU   10,4,C'c'               *
CR11     EQU   11,4,C'c'               *
CR12     EQU   12,4,C'c'               *
CR13     EQU   13,4,C'c'               *
CR14     EQU   14,4,C'c'               *
CR15     EQU   15,4,C'c'               *
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPRMCT  0100-20096-20096-0111-00148-00148-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the System Resources Manager Control Table
.*
&LABEL   MAPRMCT &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPRMCT                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPRMCT        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'RMCT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPRMCT).MEND
&BXA_MAC_MAPRMCT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_RMCT
&BXA_CB_RMCT SETC 'RMCT'
.*
.* RMCTFLGS - PROCESSING CONTROL FLAGS
RMCTMFA  EQUOVR ,,b,RMCTFLGS
RMCTCPS1 EQUOVR ,,b,RMCTFLGS
RMCTICS  EQUOVR ,,b,RMCTFLGS
RMCTINIT EQUOVR ,,b,RMCTFLGS
RMCTREPT EQUOVR ,,b,RMCTFLGS
RMCTSTW  EQUOVR ,,b,RMCTFLGS
RMCTTSAC EQUOVR ,,b,RMCTFLGS
RMCTWLM  EQUOVR ,,b,RMCTFLGS
.*
.* OVERRIDE CONDITION FLAGS
RMCTREP1 EQUOVR ,,b,RMCTFLGS+1
RMCTMFS  EQUOVR ,,b,RMCTFLGS+1
RMCTCNSW EQUOVR ,,b,RMCTFLGS+1
RMCTCLST EQUOVR ,,b,RMCTFLGS+1
RMCTRTSO EQUOVR ,,b,RMCTFLGS+1
RMCTDMTI EQUOVR ,,b,RMCTFLGS+1
RMCTOKCP EQUOVR ,,b,RMCTFLGS+1
RMCTREP2 EQUOVR ,,b,RMCTFLGS+1
.*
.* RMCTTAPE - (OPT PARM) TAPE SELECTION:
RMCTSLTN EQUOVR ,,b,RMCTTAPE
RMCTSLTR EQUOVR ,,b,RMCTTAPE
RMCTSLTL EQUOVR ,,b,RMCTTAPE
RMCTSLTF EQUOVR ,,b,RMCTTAPE
.*
.* RMCTFLG2 - PROCESSING FLAGS
RMCTOVFL EQUOVR ,,b,RMCTFLG2
RMCTUNTR EQUOVR ,,b,RMCTFLG2
RMCTSRNG EQUOVR ,,b,RMCTFLG2
RMCTSQMR EQUOVR ,,b,RMCTFLG2
.*
.* RMCTCSB - RMCT COMPARE/SWAP BIT
RMCTUTQE EQUOVR ,,b,RMCTCSB
RMCTSIMT EQUOVR ,,b,RMCTCSB
RMCTNOBQ EQUOVR ,,b,RMCTCSB
RMCTNOEQ EQUOVR ,,b,RMCTCSB
RMCTTPP  EQUOVR ,,b,RMCTCSB
RMCTSTGF EQUOVR ,,b,RMCTCSB
RMCTWSMF EQUOVR ,,b,RMCTCSB
RMCTSSMF EQUOVR ,,b,RMCTCSB
.*
         MNOTE *,'Including IRARMCT mapping macro'
         IRARMCT ,
         EQUOVR *END
*
RMCT     DSECT ,                       * Resume RMCT DSECT
         ORG
RMCT_LEN EQU   *-RMCT                  * Length of RMCT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPRMPL  0100-20096-20096-0111-00135-00135-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Resource Manager Parameter List
.*
&LABEL   MAPRMPL &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPRMPL                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPRMPL        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'RMPL').EMBED
         AIF   ('&CB' EQ 'RMPLPT').EMBED
         AIF   ('&CB' EQ 'RMPLP2').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPRMPL).MEND
&BXA_MAC_MAPRMPL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_RMPL
         GBLC  &BXA_CB_RMPLPT
         GBLC  &BXA_CB_RMPLP2
&BXA_CB_RMPL   SETC 'RMPL'
&BXA_CB_RMPLPT SETC 'RMPL'
&BXA_CB_RMPLP2 SETC 'RMPL'
.*
.* DSECT of pointer to RMPL, as passed on invocation of resmgr routine
RMPLPT   DSECT ,                       *
RMPLPTA  DS    A                       * Ptr to RMPL
RMPLPTU  DS    A                       * Ptr to RMPLP2 area
RMPLPT_LEN EQU *-RMPLPT                *
.*
.* DSECT of pointer to user parmlist, as defined on resmgr add macro
RMPLP2   DSECT ,                       *
RMPLP2F1 DS    A                       * First fullword
RMPLP2F2 DS    A                       * Second fullword
RMPLP2_LEN EQU *-RMPLP2                *
.*
.* RMPLFLG1 - FLAGS INDICATING TYPE OF TERMINATION
RMPLTYPE EQUOVR ,,b,RMPLFLG1
RMPLTERM EQUOVR ,,b,RMPLFLG1
RMPLRBPP EQUOVR ,,b,RMPLFLG1
RMPLIPUF EQUOVR ,,b,RMPLFLG1
RMPLRCOV EQUOVR ,,b,RMPLFLG1
RMPLJST  EQUOVR ,,b,RMPLFLG1
RMPLWT1M EQUOVR ,,b,RMPLFLG1
RMPLMTC  EQUOVR ,,b,RMPLFLG1
RMPLIOPG EQUOVR ,,b,RMPLFLG1
.*
         MNOTE *,'Including IHARMPL mapping macro'
         IHARMPL DSECT=YES             * Include DSECT statement
         EQUOVR *END
*
RMPL     DSECT ,                       * Restart RMPL
         ORG   ,                       *
RMPL_LEN EQU   *-RMPL                  * Length of RMPL
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPRPL   0100-20096-20096-0111-00835-00835-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Request Parameter List
.*
&LABEL   MAPRPL &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPRPL                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPRPL         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'RPL').EMBED
         AIF   ('&CB' EQ 'RPL6').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPRPL).MEND
&BXA_MAC_MAPRPL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_RPL
         GBLC  &BXA_CB_RPL6
&BXA_CB_RPL SETC 'RPL'
&BXA_CB_RPL6 SETC 'RPL'
.*
.* RPLID - RPL IDENTIFIER
RPLIDD   EQUOVR ,,v,RPLID
.*
.* RPLSTYP - RPL SUBTYPE
RPLSVSAM EQUOVR ,,v,RPLSTYP
RPLSTERM EQUOVR ,,v,RPLSTYP
RPLSVTAM EQUOVR ,,v,RPLSTYP
RPLS3540 EQUOVR ,,v,RPLSTYP
RPLCRID  EQUOVR ,,v,RPLSTYP
.*
.* RPLREQ - RPL REQUEST TYPE
RPLGET   EQUOVR ,,v,RPLREQ
RPLPUT   EQUOVR ,,v,RPLREQ
RPLPOINT EQUOVR ,,v,RPLREQ
RPLERASE EQUOVR ,,v,RPLREQ
RPLJSFMT EQUOVR ,,v,RPLREQ
RPLCHECK EQUOVR ,,v,RPLREQ
RPLENDRE EQUOVR ,,v,RPLREQ
RPLVERIF EQUOVR ,,v,RPLREQ
RPLIMPRT EQUOVR ,,v,RPLREQ
RPLPFMTD EQUOVR ,,v,RPLREQ
RPLPFMTI EQUOVR ,,v,RPLREQ
RPLFRCIO EQUOVR ,,v,RPLREQ
RPLCNVTA EQUOVR ,,v,RPLREQ
RPLMNTAC EQUOVR ,,v,RPLREQ
RPLWRITE EQUOVR ,,v,RPLREQ
RPLACQRA EQUOVR ,,v,RPLREQ
RPLRESET EQUOVR ,,v,RPLREQ
RPLTERM  EQUOVR ,,v,RPLREQ
RPLDO    EQUOVR ,,v,RPLREQ
RPLVERRF EQUOVR ,,v,RPLREQ
RPLLKADD EQUOVR ,,v,RPLREQ
RPLLKREL EQUOVR ,,v,RPLREQ
RPLLKCD  EQUOVR ,,v,RPLREQ
RPLINQRC EQUOVR ,,v,RPLREQ
RPLRETLK EQUOVR ,,v,RPLREQ
RPLRECOV EQUOVR ,,v,RPLREQ
RPLQUI   EQUOVR ,,v,RPLREQ
RPLEADD  EQUOVR ,,v,RPLREQ
RPLQUISE EQUOVR ,,v,RPLREQ
RPLSMLGO EQUOVR ,,v,RPLREQ
RPLOPNDS EQUOVR ,,v,RPLREQ
RPLCHNG  EQUOVR ,,v,RPLREQ
RPLINQIR EQUOVR ,,v,RPLREQ
RPLINTPT EQUOVR ,,v,RPLREQ
RPLREAD  EQUOVR ,,v,RPLREQ
RPLSLICT EQUOVR ,,v,RPLREQ
RPLCLOSE EQUOVR ,,v,RPLREQ
RPLCLACB EQUOVR ,,v,RPLREQ
RPLSNDCD EQUOVR ,,v,RPLREQ
RPLRCVCD EQUOVR ,,v,RPLREQ
RPLRSRCD EQUOVR ,,v,RPLREQ
RPLSSCCD EQUOVR ,,v,RPLREQ
RPLSDCMD EQUOVR ,,v,RPLREQ
RPLRVCMD EQUOVR ,,v,RPLREQ
RPLTREQS EQUOVR ,,v,RPLREQ
RPLTOPNS EQUOVR ,,v,RPLREQ
RPLTCLSS EQUOVR ,,v,RPLREQ
RPLTRMS  EQUOVR ,,v,RPLREQ
.*
.* RPLECB - INTERNAL ECB
RPLWAIT  EQUOVR ,,b,RPLECB
RPLPOST  EQUOVR ,,b,RPLECB
.*
.* RPLRTNCD - RPL RETURN CODE
RPLNOERR EQUOVR ,,v,RPLRTNCD
RPLBLKER EQUOVR ,,v,RPLRTNCD
RPLCBLKE EQUOVR ,,v,RPLRTNCD
RPLLOGER EQUOVR ,,v,RPLRTNCD
RPLLOGIC EQUOVR ,,v,RPLRTNCD
RPLPHYER EQUOVR ,,v,RPLRTNCD
RPLPHYSC EQUOVR ,,v,RPLRTNCD
RPLNGRCC EQUOVR ,,v,RPLRTNCD
RPLNOVAS EQUOVR ,,v,RPLRTNCD
RPLSPECC EQUOVR ,,v,RPLRTNCD
RPLCMDRT EQUOVR ,,v,RPLRTNCD
RPLPURGE EQUOVR ,,v,RPLRTNCD
RPLVTMNA EQUOVR ,,v,RPLRTNCD
RPLSYERR EQUOVR ,,v,RPLRTNCD
RPLDEVDC EQUOVR ,,v,RPLRTNCD
RPLLIMEX EQUOVR ,,v,RPLRTNCD
RPLEXRQ  EQUOVR ,,v,RPLRTNCD
RPLEXRS  EQUOVR ,,v,RPLRTNCD
RPLNOIN  EQUOVR ,,v,RPLRTNCD
RPLVABND EQUOVR ,,v,RPLRTNCD
.*
.* RPLFDB2 - REASON CODE(VTAM)
RPLERLK  EQUOVR ,,b,RPLFDB2
RPLRVID  EQUOVR ,,b,RPLFDB2
RPLATND  EQUOVR ,,b,RPLFDB2
RPLDVUNS EQUOVR ,,b,RPLFDB2
RPLIOERR EQUOVR ,,b,RPLFDB2
RPLDLGFL EQUOVR ,,b,RPLFDB2
RPLCUERR EQUOVR ,,b,RPLFDB2
RPLSTSAV EQUOVR ,,b,RPLFDB2
.*
.* RPLFDB3 - DATA FLAGS(VTAM)
RPLUINPT EQUOVR ,,b,RPLFDB3
RPLSV32  EQUOVR ,,b,RPLFDB3
RPLREOB  EQUOVR ,,b,RPLFDB3
RPLREOM  EQUOVR ,,b,RPLFDB3
RPLREOT  EQUOVR ,,b,RPLFDB3
RPLLGFRC EQUOVR ,,b,RPLFDB3
RPLRLG   EQUOVR ,,b,RPLFDB3
RPLRDSOH EQUOVR ,,b,RPLFDB3
.*
.* RPLOPT1 - OPTION BYTE 1
RPLLOC   EQUOVR ,,b,RPLOPT1
RPLDIR   EQUOVR ,,b,RPLOPT1
RPLSEQ   EQUOVR ,,b,RPLOPT1
RPLSKP   EQUOVR ,,b,RPLOPT1
RPLASY   EQUOVR ,,b,RPLOPT1
RPLKGE   EQUOVR ,,b,RPLOPT1
RPLGEN   EQUOVR ,,b,RPLOPT1
RPLECBSW EQUOVR ,,b,RPLOPT1
RPLECBIN EQUOVR ,,b,RPLOPT1
.*
.* RPLOPT2 - OPTION BYTE 2
RPLKEY   EQUOVR ,,b,RPLOPT2
RPLADR   EQUOVR ,,b,RPLOPT2
RPLADD   EQUOVR ,,b,RPLOPT2
RPLCNV   EQUOVR ,,b,RPLOPT2
RPLBWD   EQUOVR ,,b,RPLOPT2
RPLLRD   EQUOVR ,,b,RPLOPT2
RPLWAITX EQUOVR ,,b,RPLOPT2
RPLUPD   EQUOVR ,,b,RPLOPT2
RPLNSP   EQUOVR ,,b,RPLOPT2
.*
.* RPLOPT3 - OPTION BYTE 3
RPLEODS  EQUOVR ,,b,RPLOPT3
RPLSFORM EQUOVR ,,b,RPLOPT3
RPLBLK   EQUOVR ,,b,RPLOPT3
RPLVFY   EQUOVR ,,b,RPLOPT3
RPLFLD   EQUOVR ,,b,RPLOPT3
RPLFMT   EQUOVR ,,b,RPLOPT3
RPLFRMT  EQUOVR ,,b,RPLOPT3
RPLALIGN EQUOVR ,,b,RPLOPT3
.*
.* RPLOPTRL - VSAM-RLS OPTIONS
RPLKL    EQUOVR ,,b,RPLOPTRL
RPLRDNRI EQUOVR ,,b,RPLOPTRL
RPLRDCR  EQUOVR ,,b,RPLOPTRL
RPLRDCRE EQUOVR ,,b,RPLOPTRL
RPLRTYP  EQUOVR ,,b,RPLOPTRL
RPLRTIND EQUOVR ,,b,RPLOPTRL
RPLRTYP1 EQUOVR ,,b,RPLOPTRL
.*
.* RPLOPT4 - OPTCD BYTE 4
RPLENDTR EQUOVR ,,b,RPLOPT4
RPLXRBA  EQUOVR ,,b,RPLOPT4
RPLMKFRM EQUOVR ,,b,RPLOPT4
RPLNOCIR EQUOVR ,,b,RPLOPT4
RPLCTA   EQUOVR ,,b,RPLOPT4
RPLCTM   EQUOVR ,,b,RPLOPT4
RPLCTO   EQUOVR ,,b,RPLOPT4
.*
.* RPLOPT5 - OPTION BYTE 5
RPLDLGIN EQUOVR ,,b,RPLOPT5
RPLSSNIN EQUOVR ,,b,RPLOPT5
RPLPSOPT EQUOVR ,,b,RPLOPT5
RPLNERAS EQUOVR ,,b,RPLOPT5
RPLEAU   EQUOVR ,,b,RPLOPT5
RPLERACE EQUOVR ,,b,RPLOPT5
RPLNODE  EQUOVR ,,b,RPLOPT5
RPLWROPT EQUOVR ,,b,RPLOPT5
.*
.* RPLOPT6 - OPTION BYTE 6
RPLEOB   EQUOVR ,,b,RPLOPT6
RPLEOM   EQUOVR ,,b,RPLOPT6
RPLEOT   EQUOVR ,,b,RPLOPT6
RPLCOND  EQUOVR ,,b,RPLOPT6
RPLNCOND EQUOVR ,,b,RPLOPT6
RPLLOCK  EQUOVR ,,b,RPLOPT6
RPLRSV67 EQUOVR ,,b,RPLOPT6
RPLRSV68 EQUOVR ,,b,RPLOPT6
.*
.* RPLOPT7 - OPTION BYTE 7
RPLCNALL EQUOVR ,,b,RPLOPT7
RPLCNANY EQUOVR ,,b,RPLOPT7
RPLCNIMM EQUOVR ,,b,RPLOPT7
RPLQOPT  EQUOVR ,,b,RPLOPT7
RPLTPOST EQUOVR ,,b,RPLOPT7
RPLRLSOP EQUOVR ,,b,RPLOPT7
RPLTCRNO EQUOVR ,,b,RPLOPT7
RPLRSV78 EQUOVR ,,b,RPLOPT7
.*
.* RPLOPT8 - OPTION BYTE 8
RPLODACQ EQUOVR ,,b,RPLOPT8
RPLODACP EQUOVR ,,b,RPLOPT8
RPLODPRM EQUOVR ,,b,RPLOPT8
RPLPEND  EQUOVR ,,b,RPLOPT8
RPLSESS  EQUOVR ,,b,RPLOPT8
RPLACTV  EQUOVR ,,b,RPLOPT8
RPLUNCON EQUOVR ,,b,RPLOPT8
RPLRSV88 EQUOVR ,,b,RPLOPT8
.*
.* RPLAIXID - AIX POINTER TYPE
RPLAXPKP EQUOVR ,,b,RPLAIXID
.*
.* RPLEXTD1 - EXIT DEFINITIONS
RPLEXSCH EQUOVR ,,b,RPLEXTD1
RPLNEXIT EQUOVR ,,b,RPLEXTD1
RPLEXIT  EQUOVR ,,b,RPLEXTD1
RPLTCRYP EQUOVR ,,b,RPLEXTD1
RPLNIB   EQUOVR ,,b,RPLEXTD1
RPLBRANC EQUOVR ,,b,RPLEXTD1
.*
         MNOTE *,'Including IFGRPL mapping macro'
         IFGRPL DSECT=YES              *
         EQUOVR *END                   *
*
IFGRPL   DSECT ,                       * Resume RPL DSECT
RPL      EQU   IFGRPL                  * Label for USINGs
         ORG   ,                       *
RPL_LEN  EQU   *-RPL                   * Length of RPL
.*
.* Adding overrides for VTAM extension of RPL
.* RPLSSEI - SYSTEM SENSE ERROR CODES
RPLPATHI EQUOVR ,,b,RPLSSEI
RPLCPMI  EQUOVR ,,b,RPLSSEI
RPLSTATI EQUOVR ,,b,RPLSSEI
RPLFII   EQUOVR ,,b,RPLSSEI
RPLRRI   EQUOVR ,,b,RPLSSEI
.*
.* RPLOPT9 - OPTION BYTE 9
RPLLOGON EQUOVR ,,b,RPLOPT9
RPLDEVCH EQUOVR ,,b,RPLOPT9
RPLTERMS EQUOVR ,,b,RPLOPT9
RPLCOUNT EQUOVR ,,b,RPLOPT9
RPLAPPST EQUOVR ,,b,RPLOPT9
RPLRNNM  EQUOVR ,,v,RPLOPT9
RPLINQST EQUOVR ,,b,RPLOPT9
RPLCIDE  EQUOVR ,,b,RPLOPT9
RPLTOPL  EQUOVR ,,b,RPLOPT9
.*
.* RPLOPT10 - OPTION BYTE 10
RPLBSCID EQUOVR ,,b,RPLOPT10
RPLDSPLY EQUOVR ,,b,RPLOPT10
RPLSPARM EQUOVR ,,b,RPLOPT10
RPLTSKY  EQUOVR ,,b,RPLOPT10
RPLUSVAR EQUOVR ,,b,RPLOPT10
RPLUNBND EQUOVR ,,b,RPLOPT10
RPLSONOP EQUOVR ,,b,RPLOPT10
RPLSENOP EQUOVR ,,b,RPLOPT10
.*
.* RPLOPT11 - OPTION BYTE 11
RPLQUIES EQUOVR ,,b,RPLOPT11
RPLSTART EQUOVR ,,b,RPLOPT11
RPLSTOP  EQUOVR ,,b,RPLOPT11
RPLHOLD  EQUOVR ,,b,RPLOPT11
RPLCNTRU EQUOVR ,,b,RPLOPT11
RPLMTS   EQUOVR ,,b,RPLOPT11
RPLTERMQ EQUOVR ,,b,RPLOPT11
RPLKPSRB EQUOVR ,,b,RPLOPT11
RPLFORCE EQUOVR ,,v,RPLOPT11
.*
.* RPLOPT12 - OPTION BYTE 12
RPLRSPQD EQUOVR ,,b,RPLOPT12
RPLKEEP  EQUOVR ,,b,RPLOPT12
RPLTRUNC EQUOVR ,,b,RPLOPT12
RPLNIBTK EQUOVR ,,b,RPLOPT12
RPLQSESS EQUOVR ,,b,RPLOPT12
RPLQNOTE EQUOVR ,,b,RPLOPT12
RPLQALL  EQUOVR ,,b,RPLOPT12
RPLFMHDR EQUOVR ,,b,RPLOPT12
.*
.* RPLSSEO - SYSTEM SENSE ERROR
RPLCPMO  EQUOVR ,,b,RPLSSEO
RPLSTATO EQUOVR ,,b,RPLSSEO
RPLFIO   EQUOVR ,,b,RPLSSEO
RPLRRO   EQUOVR ,,b,RPLSSEO
.*
.* RPLECB - INTERNAL ECB
RPLAMOD2 EQUOVR ,,b,RPLECB
.*
.* RPLRH3 - THIRD REQUEST HEADER BYTE
RPLBB    EQUOVR ,,b,RPLRH3
RPLEB    EQUOVR ,,b,RPLRH3
RPLCMD   EQUOVR ,,b,RPLRH3
RPLCHREQ EQUOVR ,,b,RPLRH3
RPLCSI   EQUOVR ,,b,RPLRH3
RPLCEB   EQUOVR ,,b,RPLRH3
.*
.* RPLSRTYP - SEND OR RECEIVE TYPE
RPLSRESP EQUOVR ,,b,RPLSRTYP
RPLRRESP EQUOVR ,,b,RPLSRTYP
RPLNFSYN EQUOVR ,,b,RPLSRTYP
RPLDFASY EQUOVR ,,b,RPLSRTYP
.*
.* RPLCHN - POSITION IN REQUEST UNIT CHAIN
RPLFIRST EQUOVR ,,b,RPLCHN
RPLMIDLE EQUOVR ,,b,RPLCHN
RPLLAST  EQUOVR ,,b,RPLCHN
RPLONLY  EQUOVR ,,b,RPLCHN
RPLVACS  EQUOVR ,,b,RPLCHN
RPLAPPC  EQUOVR ,,b,RPLCHN
.*
.* RPLVTFL1 - VTAM FLAGS
RPLXMEM  EQUOVR ,,b,RPLVTFL1
RPLVTUSE EQUOVR ,,b,RPLVTFL1
RPLAUTUS EQUOVR ,,b,RPLVTFL1
RPLTNDSP EQUOVR ,,b,RPLVTFL1
RPLTLGAC EQUOVR ,,b,RPLVTFL1
RPLAMODE EQUOVR ,,b,RPLVTFL1
RPLRSPNM EQUOVR ,,b,RPLVTFL1
RPLRSPQR EQUOVR ,,b,RPLVTFL1
.*
.* RPLVTFL2 - POST/RESPOND FLAGS
RPLSCHED EQUOVR ,,b,RPLVTFL2
RPLQRI   EQUOVR ,,b,RPLVTFL2
RPLEX    EQUOVR ,,b,RPLVTFL2
RPLNFME  EQUOVR ,,b,RPLVTFL2
RPLRRN   EQUOVR ,,b,RPLVTFL2
.*
.* RPLCNTDF - DATA FLOW CONTROL CODES
RPLDATA  EQUOVR ,,b,RPLCNTDF
RPLCNCEL EQUOVR ,,b,RPLCNTDF
RPLQC    EQUOVR ,,b,RPLCNTDF
RPLQEC   EQUOVR ,,b,RPLCNTDF
RPLCHASE EQUOVR ,,b,RPLCNTDF
RPLRELQ  EQUOVR ,,b,RPLCNTDF
RPLQI    EQUOVR ,,b,RPLCNTDF
.*
.* RPLCNTDC - DATA FLOW CONTROL CODES
RPLBID   EQUOVR ,,b,RPLCNTDC
RPLRTR   EQUOVR ,,b,RPLCNTDC
RPLLUS   EQUOVR ,,b,RPLCNTDC
RPLSIGNL EQUOVR ,,b,RPLCNTDC
RPLTBIND EQUOVR ,,b,RPLCNTDC
RPLTUNBD EQUOVR ,,b,RPLCNTDC
RPLSBI   EQUOVR ,,b,RPLCNTDC
RPLBIS   EQUOVR ,,b,RPLCNTDC
.*
.* RPLCNTSC - SESSION CONTROL CODES
RPLSDT   EQUOVR ,,b,RPLCNTSC
RPLCLEAR EQUOVR ,,b,RPLCNTSC
RPLSTSN  EQUOVR ,,b,RPLCNTSC
RPLSHUTD EQUOVR ,,b,RPLCNTSC
RPLSHUTC EQUOVR ,,b,RPLCNTSC
RPLRQR   EQUOVR ,,b,RPLCNTSC
RPLRSHUT EQUOVR ,,b,RPLCNTSC
RPLSWTCH EQUOVR ,,b,RPLCNTSC
.*
.* RPLO4 - VTAM OPTION BYTE 4
RPLPERS  EQUOVR ,,b,RPLO4
RPLNPERS EQUOVR ,,b,RPLO4
RPLINQPS EQUOVR ,,b,RPLO4
RPLOPRES EQUOVR ,,b,RPLO4
RPLSLTMR EQUOVR ,,b,RPLO4
RPLNQN   EQUOVR ,,b,RPLO4
RPLEXTOP EQUOVR ,,b,RPLO4
.*
.* RPLOPT4X - EXTENDED OPTCD VALUE BYTE
RPLSTGNA EQUOVR ,,v,RPLOPT4X
RPLSTGND EQUOVR ,,v,RPLOPT4X
RPLSTGNS EQUOVR ,,v,RPLOPT4X
RPLIQSNM EQUOVR ,,v,RPLOPT4X
RPLCGEAF EQUOVR ,,v,RPLOPT4X
.*
.* RPLO5 - VTAM OPTION BYTE 5
RPLTNFY  EQUOVR ,,b,RPLO5
RPLTHRDC EQUOVR ,,b,RPLO5
RPLCNDCS EQUOVR ,,b,RPLO5
.*
.* RPLO6 - VTAM OPTION BYTE 6
RPLXBFL  EQUOVR ,,b,RPLO6
RPLBUFFL EQUOVR ,,b,RPLO6
RPLCONTC EQUOVR ,,b,RPLO6
.*
.* RPLO7 - VTAM OPTION BYTE 7
RPLBCKUP EQUOVR ,,b,RPLO7
RPLLMPEO EQUOVR ,,b,RPLO7
.*
.* RPLO8 - VTAM OPTION BYTE 8
RPLMAXSP EQUOVR ,,b,RPLO8
RPLUSRRH EQUOVR ,,b,RPLO8
.*
.* RPLOBSQ - STSN OUTBOUND ACTION CODES
RPLOSET  EQUOVR ,,b,RPLOBSQ
RPLOTST  EQUOVR ,,b,RPLOBSQ
RPLORSET EQUOVR ,,b,RPLOBSQ
RPLOIGN  EQUOVR ,,b,RPLOBSQ
RPLOPOS  EQUOVR ,,b,RPLOBSQ
RPLONEG  EQUOVR ,,b,RPLOBSQ
RPLOINV  EQUOVR ,,b,RPLOBSQ
.*
.* RPLIBSQ - STSN INBOUND ACTION CODES
RPLISET  EQUOVR ,,b,RPLIBSQ
RPLITST  EQUOVR ,,b,RPLIBSQ
RPLIRSET EQUOVR ,,b,RPLIBSQ
RPLIIGN  EQUOVR ,,b,RPLIBSQ
RPLIPOS  EQUOVR ,,b,RPLIBSQ
RPLINEG  EQUOVR ,,b,RPLIBSQ
RPLIINV  EQUOVR ,,b,RPLIBSQ
.*
.* RPLOF68 -
RPLXSRV  EQUOVR ,,b,RPLOF68
.*
.* RPLREQ - RPL REQUEST TYPE
RPL6APPC EQUOVR ,,v,RPLREQ
RPL6CHEK EQUOVR ,,v,RPLREQ
RPL3VCNS EQUOVR ,,v,RPLREQ
RPL3CHEK EQUOVR ,,v,RPLREQ
.*
.* RPLFDB2 - REASON CODE(VTAM)
RPLAOK   EQUOVR ,,v,RPLFDB2
RPLRCDPR EQUOVR ,,v,RPLFDB2
RPLCBERR EQUOVR ,,v,RPLFDB2
RPLEXERR EQUOVR ,,v,RPLFDB2
RPLCLSIP EQUOVR ,,v,RPLFDB2
RPLCIDNG EQUOVR ,,v,RPLFDB2
RPLILDOP EQUOVR ,,v,RPLFDB2
RPLWANCR EQUOVR ,,v,RPLFDB2
RPLSANOD EQUOVR ,,v,RPLFDB2
RPLSANDA EQUOVR ,,v,RPLFDB2
RPLSTOOD EQUOVR ,,v,RPLFDB2
RPLBUFTE EQUOVR ,,v,RPLFDB2
RPLRTOOD EQUOVR ,,v,RPLFDB2
RPLWTOI  EQUOVR ,,v,RPLFDB2
RPLEWNS  EQUOVR ,,v,RPLFDB2
RPLEWAU3 EQUOVR ,,v,RPLFDB2
RPLCWTOO EQUOVR ,,v,RPLFDB2
RPLCWB   EQUOVR ,,v,RPLFDB2
RPLCCCPY EQUOVR ,,v,RPLFDB2
RPLIDA   EQUOVR ,,v,RPLFDB2
RPLILDOA EQUOVR ,,v,RPLFDB2
RPLJTOJ  EQUOVR ,,v,RPLFDB2
RPLM255  EQUOVR ,,v,RPLFDB2
RPLRILCP EQUOVR ,,v,RPLFDB2
RPLCRIRT EQUOVR ,,v,RPLFDB2
RPLRIOCC EQUOVR ,,v,RPLFDB2
RPLEWBLK EQUOVR ,,v,RPLFDB2
RPLCRSDC EQUOVR ,,v,RPLFDB2
RPLIREST EQUOVR ,,v,RPLFDB2
RPLWBT32 EQUOVR ,,v,RPLFDB2
RPLRMOBN EQUOVR ,,v,RPLFDB2
RPLCTN32 EQUOVR ,,v,RPLFDB2
RPLWCVDE EQUOVR ,,v,RPLFDB2
RPLRNFT3 EQUOVR ,,v,RPLFDB2
RPLRCINV EQUOVR ,,v,RPLFDB2
RPLINVRM EQUOVR ,,v,RPLFDB2
RPLATSFI EQUOVR ,,v,RPLFDB2
RPLIIINA EQUOVR ,,v,RPLFDB2
RPLICNDN EQUOVR ,,v,RPLFDB2
RPLILSIN EQUOVR ,,v,RPLFDB2
RPLIICBE EQUOVR ,,v,RPLFDB2
RPLOLIPT EQUOVR ,,v,RPLFDB2
RPLINTNA EQUOVR ,,v,RPLFDB2
RPLRCLCK EQUOVR ,,v,RPLFDB2
RPLOCE01 EQUOVR ,,v,RPLFDB2
RPLOCE02 EQUOVR ,,v,RPLFDB2
RPLOCE03 EQUOVR ,,v,RPLFDB2
RPLOCE05 EQUOVR ,,v,RPLFDB2
RPLOCE07 EQUOVR ,,v,RPLFDB2
RPLOCE08 EQUOVR ,,v,RPLFDB2
RPLOCE09 EQUOVR ,,v,RPLFDB2
RPLOCE10 EQUOVR ,,v,RPLFDB2
RPLOCE11 EQUOVR ,,v,RPLFDB2
RPLOCE12 EQUOVR ,,v,RPLFDB2
RPLOCE13 EQUOVR ,,v,RPLFDB2
RPLOCE14 EQUOVR ,,v,RPLFDB2
RPLOCE16 EQUOVR ,,v,RPLFDB2
RPLOCE19 EQUOVR ,,v,RPLFDB2
RPLOCE21 EQUOVR ,,v,RPLFDB2
RPLOCE22 EQUOVR ,,v,RPLFDB2
RPLOCE25 EQUOVR ,,v,RPLFDB2
RPLOCE27 EQUOVR ,,v,RPLFDB2
RPLOCE28 EQUOVR ,,v,RPLFDB2
RPLOCE29 EQUOVR ,,v,RPLFDB2
RPLOCE32 EQUOVR ,,v,RPLFDB2
RPLOCE33 EQUOVR ,,v,RPLFDB2
RPLRNONA EQUOVR ,,v,RPLFDB2
RPLOCE34 EQUOVR ,,v,RPLFDB2
RPLOCE35 EQUOVR ,,v,RPLFDB2
RPLOCE36 EQUOVR ,,v,RPLFDB2
RPLOCE37 EQUOVR ,,v,RPLFDB2
RPLOCE39 EQUOVR ,,v,RPLFDB2
RPLRNOEL EQUOVR ,,v,RPLFDB2
RPLRNOSE EQUOVR ,,v,RPLFDB2
RPLRNOIA EQUOVR ,,v,RPLFDB2
RPLRNOCL EQUOVR ,,v,RPLFDB2
RPLRNOCE EQUOVR ,,v,RPLFDB2
RPLPCIT  EQUOVR ,,v,RPLFDB2
RPLLGCNT EQUOVR ,,v,RPLFDB2
RPLCPCNT EQUOVR ,,v,RPLFDB2
RPLILRS  EQUOVR ,,v,RPLFDB2
RPLUSELE EQUOVR ,,v,RPLFDB2
RPLCRNF  EQUOVR ,,v,RPLFDB2
RPLNORD  EQUOVR ,,v,RPLFDB2
RPLOLIPX EQUOVR ,,v,RPLFDB2
RPLCPYE2 EQUOVR ,,v,RPLFDB2
RPLRELNP EQUOVR ,,v,RPLFDB2
RPLCPYE1 EQUOVR ,,v,RPLFDB2
RPLDFIBH EQUOVR ,,v,RPLFDB2
RPLDFIPO EQUOVR ,,v,RPLFDB2
RPLRCWNP EQUOVR ,,v,RPLFDB2
RPLYTCTN EQUOVR ,,v,RPLFDB2
RPLYADIF EQUOVR ,,v,RPLFDB2
RPLSTALF EQUOVR ,,v,RPLFDB2
RPLUSRES EQUOVR ,,v,RPLFDB2
RPLSSTRM EQUOVR ,,v,RPLFDB2
RPLUNTRM EQUOVR ,,v,RPLFDB2
RPLNCPAN EQUOVR ,,v,RPLFDB2
RPLPCF   EQUOVR ,,v,RPLFDB2
RPLANS   EQUOVR ,,v,RPLFDB2
RPLCLOCC EQUOVR ,,v,RPLFDB2
RPLVOFOC EQUOVR ,,v,RPLFDB2
RPLDISCO EQUOVR ,,v,RPLFDB2
RPLBTHEX EQUOVR ,,v,RPLFDB2
RPLOCS01 EQUOVR ,,v,RPLFDB2
RPLOCS02 EQUOVR ,,v,RPLFDB2
RPLOCS03 EQUOVR ,,v,RPLFDB2
RPLOCS04 EQUOVR ,,v,RPLFDB2
RPLOCS05 EQUOVR ,,v,RPLFDB2
RPLOCS06 EQUOVR ,,v,RPLFDB2
RPLOCS07 EQUOVR ,,v,RPLFDB2
RPLOCS08 EQUOVR ,,v,RPLFDB2
RPLOCS09 EQUOVR ,,v,RPLFDB2
RPLDIDOL EQUOVR ,,v,RPLFDB2
RPLDIDIL EQUOVR ,,v,RPLFDB2
.*
.* RPLFDB3 - DATA FLAGS(VTAM)
RPLIACT  EQUOVR ,,v,RPLFDB3
RPLIINA  EQUOVR ,,v,RPLFDB3
RPLINA   EQUOVR ,,v,RPLFDB3
RPLITNA  EQUOVR ,,v,RPLFDB3
RPLIQUIE EQUOVR ,,v,RPLFDB3
.*
.* RPL6FLG1 - FIRST INDICATORS BYTE
RPL6FILL EQUOVR ,,b,RPL6FLG1
RPL6CD   EQUOVR ,,b,RPL6FLG1
RPL6SLS  EQUOVR ,,b,RPL6FLG1
RPL6CFTX EQUOVR ,,b,RPL6FLG1
RPL6LIST EQUOVR ,,b,RPL6FLG1
.*
.* RPL6FLG2 - SECOND INDICATORS BYTE
RPL6BISC EQUOVR ,,b,RPL6FLG2
RPL6RTSX EQUOVR ,,b,RPL6FLG2
RPL6CXMD EQUOVR ,,b,RPL6FLG2
RPL6TYPE EQUOVR ,,b,RPL6FLG2
RPL6NAMU EQUOVR ,,b,RPL6FLG2
.*
.* RPL6FLG3 - THIRD INDICATORS BYTE
RPL6LOCK EQUOVR ,,b,RPL6FLG3
RPL6DERC EQUOVR ,,b,RPL6FLG3
RPL6EXDR EQUOVR ,,b,RPL6FLG3
RPL6CMOD EQUOVR ,,b,RPL6FLG3
RPL6LAST EQUOVR ,,b,RPL6FLG3
.*
.* RPL6RCV1 - WHAT RECEIVED INDICATOR
RPL6WDAT EQUOVR ,,b,RPL6RCV1
RPL6WDAC EQUOVR ,,b,RPL6RCV1
RPL6WDAI EQUOVR ,,b,RPL6RCV1
RPL6WSND EQUOVR ,,b,RPL6RCV1
RPL6WCFM EQUOVR ,,b,RPL6RCV1
RPL6WDAL EQUOVR ,,b,RPL6RCV1
RPL6WLOG EQUOVR ,,b,RPL6RCV1
RPL6WPSH EQUOVR ,,b,RPL6RCV1
.*
.* RPL6RCV2 - RESERVED FOR BIT MASK
RPL6WPSI EQUOVR ,,b,RPL6RCV2
.*
.* RPL6RTUN - RETURNED INDICATORS
RPL6RMH5 EQUOVR ,,b,RPL6RTUN
RPL6RLOG EQUOVR ,,b,RPL6RTUN
RPL6RSIG EQUOVR ,,b,RPL6RTUN
RPL6CLSA EQUOVR ,,b,RPL6RTUN
RPL6AVFA EQUOVR ,,b,RPL6RTUN
RPL6PV   EQUOVR ,,b,RPL6RTUN
RPL6CRYP EQUOVR ,,b,RPL6RTUN
.*
.* RPL6CBID - CONTROL BLOCK IDENTIFIER
.*RPL6ID EQUOVR ,,v,RPL6CBID             Value exceeds X'FFFF'
.*
.* RPL6REQ - TYPE OF APPCCMD
RPL6ALLC EQUOVR ,,v,RPL6REQ
RPL6PLOC EQUOVR ,,v,RPL6REQ
RPL6SFM5 EQUOVR ,,v,RPL6REQ
RPL6RSRV EQUOVR ,,v,RPL6REQ
RPL6DEAL EQUOVR ,,v,RPL6REQ
RPL6DEAQ EQUOVR ,,v,RPL6REQ
RPL6OPER EQUOVR ,,v,RPL6REQ
RPL6PREC EQUOVR ,,v,RPL6REQ
RPL6RFH5 EQUOVR ,,v,RPL6REQ
RPL6RCV  EQUOVR ,,v,RPL6REQ
RPL6RCVX EQUOVR ,,v,RPL6REQ
RPL6RJCT EQUOVR ,,v,RPL6REQ
RPL6SEND EQUOVR ,,v,RPL6REQ
RPL6SNDX EQUOVR ,,v,RPL6REQ
RPL6SNRC EQUOVR ,,v,RPL6REQ
RPL6SETS EQUOVR ,,v,RPL6REQ
RPL6TSTS EQUOVR ,,v,RPL6REQ
.*
.* RPL6QUAL - SUBTYPE OF APPCCMD
RPL6NQUA EQUOVR ,,v,RPL6QUAL
RPL6APRG EQUOVR ,,v,RPL6QUAL
RPL6ASRV EQUOVR ,,v,RPL6QUAL
RPL6ATIM EQUOVR ,,v,RPL6QUAL
RPL6AUSR EQUOVR ,,v,RPL6QUAL
RPL6ANY  EQUOVR ,,v,RPL6QUAL
RPL6CNOS EQUOVR ,,v,RPL6QUAL
RPL6CFRM EQUOVR ,,v,RPL6QUAL
RPL6CFMD EQUOVR ,,v,RPL6QUAL
RPL6DATA EQUOVR ,,v,RPL6QUAL
RPL6DCON EQUOVR ,,v,RPL6QUAL
RPL6DFLU EQUOVR ,,v,RPL6QUAL
RPL6DFIN EQUOVR ,,v,RPL6QUAL
RPL6DSPY EQUOVR ,,v,RPL6QUAL
RPL6ERR  EQUOVR ,,v,RPL6QUAL
RPL6FLSH EQUOVR ,,v,RPL6QUAL
RPL6RQSD EQUOVR ,,v,RPL6QUAL
RPL6SPEC EQUOVR ,,v,RPL6QUAL
RPL6ACT  EQUOVR ,,v,RPL6QUAL
RPL6DACT EQUOVR ,,v,RPL6QUAL
RPL6ALCD EQUOVR ,,v,RPL6QUAL
RPL6IMED EQUOVR ,,v,RPL6QUAL
RPL6CWIN EQUOVR ,,v,RPL6QUAL
RPL6SESN EQUOVR ,,v,RPL6QUAL
RPL6CONV EQUOVR ,,v,RPL6QUAL
RPL6SUSP EQUOVR ,,v,RPL6QUAL
RPL6RESM EQUOVR ,,v,RPL6QUAL
RPL6REST EQUOVR ,,v,RPL6QUAL
RPL6SYNB EQUOVR ,,v,RPL6QUAL
RPL6SYNE EQUOVR ,,v,RPL6QUAL
RPL6CNGP EQUOVR ,,v,RPL6QUAL
RPL6SESF EQUOVR ,,v,RPL6QUAL
RPL6IANY EQUOVR ,,v,RPL6QUAL
RPL6ISPC EQUOVR ,,v,RPL6QUAL
RPL6QALL EQUOVR ,,v,RPL6QUAL
RPL6IALL EQUOVR ,,v,RPL6QUAL
RPL6QUE  EQUOVR ,,v,RPL6QUAL
RPL6DQUE EQUOVR ,,v,RPL6QUAL
.*
.* RPL6FLG1 - FIRST INDICATORS BYTE
RPL6BUFF EQUOVR ,,v,RPL6FLG1
RPL6LL   EQUOVR ,,b,RPL6FLG1
.*
.* RPL6FLG1 - FIRST INDICATORS BYTE
RPL6CDIM EQUOVR ,,v,RPL6FLG1
RPL6CDDE EQUOVR ,,b,RPL6FLG1
.*
.* RPL6FLG1 - FIRST INDICATORS BYTE
RPL6CFT  EQUOVR ,,b,RPL6FLG1
RPL6NCFT EQUOVR ,,v,RPL6FLG1
.*
.* RPL6FLG2 - SECOND INDICATORS BYTE
RPL6TBIT EQUOVR ,,b,RPL6FLG2
RPL6USER EQUOVR ,,b,RPL6FLG2
RPL6PRGM EQUOVR ,,b,RPL6FLG2
RPL6SVC  EQUOVR ,,b,RPL6FLG2
.*
.* RPL6FLG2 - SECOND INDICATORS BYTE
RPL6NUNS EQUOVR ,,v,RPL6FLG2
RPL6ANAM EQUOVR ,,b,RPL6FLG2
RPL6GNAM EQUOVR ,,b,RPL6FLG2
.*
.* RPL6FLG3 - THIRD INDICATORS BYTE
RPL6LONG EQUOVR ,,v,RPL6FLG3
RPL6SHRT EQUOVR ,,b,RPL6FLG3
.*
.* RPL6FLG3 - THIRD INDICATORS BYTE
RPL6RNRM EQUOVR ,,v,RPL6FLG3
RPL6RABN EQUOVR ,,b,RPL6FLG3
RPL6RANR EQUOVR ,,b,RPL6FLG3
.*
.* RPL6FLG3 - THIRD INDICATORS BYTE
RPL6CBIT EQUOVR ,,b,RPL6FLG3
RPL6LLCA EQUOVR ,,v,RPL6FLG3
RPL6BFCA EQUOVR ,,b,RPL6FLG3
RPL6CS   EQUOVR ,,b,RPL6FLG3
RPL6SAME EQUOVR ,,b,RPL6FLG3
.*
.* RPL6FLG2 - SECOND INDICATORS BYTE
RPL6CXBT EQUOVR ,,b,RPL6FLG2
RPL6CSCX EQUOVR ,,v,RPL6FLG2
RPL6CACX EQUOVR ,,b,RPL6FLG2
RPL6SAMX EQUOVR ,,b,RPL6FLG2
.*
.* RPL6FLG3 - THIRD INDICATORS BYTE
RPL6NLST EQUOVR ,,v,RPL6FLG3
RPL6LMOD EQUOVR ,,b,RPL6FLG3
RPL6NCTL EQUOVR ,,b,RPL6FLG3
RPL6ALL  EQUOVR ,,b,RPL6FLG3
.*
.* RPL6FLG1 - FIRST INDICATORS BYTE
RPL6LINO EQUOVR ,,v,RPL6FLG1
RPL6LINS EQUOVR ,,b,RPL6FLG1
RPL6LIAL EQUOVR ,,b,RPL6FLG1
.*
.* RPL6CCST - CURRENT CONVERSATION STATE
RPL6RSET EQUOVR ,,v,RPL6CCST
RPL6SND  EQUOVR ,,v,RPL6CCST
RPL6RECV EQUOVR ,,v,RPL6CCST
RPL6RVCF EQUOVR ,,v,RPL6CCST
RPL6RVCS EQUOVR ,,v,RPL6CCST
RPL6RVCD EQUOVR ,,v,RPL6CCST
RPL6PNDD EQUOVR ,,v,RPL6CCST
RPL6PECL EQUOVR ,,v,RPL6CCST
RPL6ENDC EQUOVR ,,v,RPL6CCST
RPL6PNDS EQUOVR ,,v,RPL6CCST
RPL6PRVL EQUOVR ,,v,RPL6CCST
RPL6FDRS EQUOVR ,,v,RPL6CCST
RPL6FDSR EQUOVR ,,v,RPL6CCST
RPL6FDSO EQUOVR ,,v,RPL6CCST
RPL6FDRO EQUOVR ,,v,RPL6CCST
RPL6FSRL EQUOVR ,,v,RPL6CCST
RPL6FROL EQUOVR ,,v,RPL6CCST
RPL6FRSL EQUOVR ,,v,RPL6CCST
RPL6PALC EQUOVR ,,v,RPL6CCST
.*
.* RPL6DETP - DEACTIVATION TYPE CODE
RPL6TCLP EQUOVR ,,v,RPL6DETP
RPL6TPVL EQUOVR ,,v,RPL6DETP
.*
.* RPL6RTUN - RETURNED INDICATORS
RPL6CNON EQUOVR ,,v,RPL6RTUN
RPL6CSEL EQUOVR ,,v,RPL6RTUN
RPL6CMAN EQUOVR ,,v,RPL6RTUN
.*
         MNOTE *,'Including ISTRPLEX mapping macro'
IFGRPL   DSECT ,                       * Resume RPL DSECT
         ORG   RPL+RPL_LEN             * At end of base RPL
         ISTRPLEX ,                    *
         EQUOVR *END                   *
*
IFGRPL   DSECT ,                       * Resume RPL DSECT
         ORG   ,                       *
VTAMRPL_LEN EQU *-RPL                  * Length of VTAM RPL
*
ISTRPL6X DSECT ,                       * Resume LU 6.2 extension
RPL6     EQU   ISTRPL6X                * Label for usings
         ORG   ,                       *
RPL6_LEN EQU   *-RPL6                  * Length of RPL eXtension
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPRQE   0100-20096-20096-0111-00146-00146-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the EXCP Request Queue Element
.*
&LABEL   MAPRQE &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPRQE                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPRQE         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'RQE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPRQE).MEND
&BXA_MAC_MAPRQE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_RQE
&BXA_CB_RQE SETC 'RQE'
.*
.* RQEPRT - Protect key from SVC old PSW
RQEPKEY  EQUOVR ,,b,RQEPRT
RQEPRT4R EQUOVR ,,b,RQEPRT
RQEPRT5R EQUOVR ,,b,RQEPRT
RQEK0BYP EQUOVR ,,b,RQEPRT
RQEPRT7R EQUOVR ,,b,RQEPRT
.*
.* RQETYPE - Request type flags
RQE114   EQUOVR ,,b,RQETYPE
RQEVIRT  EQUOVR ,,b,RQETYPE
RQE1TO1  EQUOVR ,,b,RQETYPE
RQEVAM   EQUOVR ,,b,RQETYPE
RQEEOEE  EQUOVR ,,b,RQETYPE
RQEDIE   EQUOVR ,,b,RQETYPE
RQERRTYP EQUOVR ,,b,RQETYPE
RQETYP3  EQUOVR ,,b,RQETYPE
RQETYP2  EQUOVR ,,b,RQETYPE
RQETYP1  EQUOVR ,,b,RQETYPE
.*
.* RQEFLAG - RQE flag byte
RQERETRY EQUOVR ,,b,RQEFLAG
RQENOPST EQUOVR ,,b,RQEFLAG
RQENOFRE EQUOVR ,,b,RQEFLAG
RQEFIXST EQUOVR ,,b,RQEFLAG
RQESTBL  EQUOVR ,,b,RQEFLAG
RQESRBS  EQUOVR ,,b,RQEFLAG
RQEPURGE EQUOVR ,,b,RQEFLAG
RQECHEAC EQUOVR ,,b,RQEFLAG
.*
.* RQEFLAG3 - RQEFLAG3 flag byte
RQEINIOS EQUOVR ,,b,RQEFLAG3
RQEPCEDE EQUOVR ,,b,RQEFLAG3
RQEXDERP EQUOVR ,,b,RQEFLAG3
RQESMFCT EQUOVR ,,b,RQEFLAG3
RQEACDCT EQUOVR ,,b,RQEFLAG3
RQEPSDCT EQUOVR ,,b,RQEFLAG3
RQEFLG6R EQUOVR ,,b,RQEFLAG3
RQEXCPS  EQUOVR ,,b,RQEFLAG3
.*
         MNOTE *,'Including IECDRQE mapping macro'
.*
         IECDRQE ,                     *
         EQUOVR *END
*
RQE      DSECT ,                       * Reset to RQE
         ORG
RQE_LEN  EQU   *-RQE                   * Length of RQE
*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPRT1W  0100-20096-20096-0111-00219-00219-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the RTM1 Work Area
.*
&LABEL   MAPRT1W &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPRT1W                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPRT1W        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'RTMW').EMBED
         AIF   ('&CB' EQ 'RT1TRACK').EMBED
         AIF   ('&CB' EQ 'RT1TRECC').EMBED
         AIF   ('&CB' EQ 'RT1W').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPRT1W).MEND
&BXA_MAC_MAPRT1W SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_RTMW
         GBLC  &BXA_CB_RT1TRACK
         GBLC  &BXA_CB_RT1TRECC
         GBLC  &BXA_CB_RT1W
&BXA_CB_RTMW SETC 'RT1W'
&BXA_CB_RT1TRACK SETC 'RT1W'
&BXA_CB_RT1TRECC SETC 'RT1W'
&BXA_CB_RT1W SETC 'RT1W'
.*
.* RT1WCOVR - PRESERVED CARRY OVER INFORMATION ON VALID RECURSIONS
RT1WRCDR EQUOVR ,,b,RT1WCOVR
RT1WRTM  EQUOVR ,,b,RT1WCOVR
RT1WFAIL EQUOVR ,,b,RT1WCOVR
RT1WRMGR EQUOVR ,,b,RT1WCOVR
RT1WEREX EQUOVR ,,b,RT1WCOVR
RT1WGFAI EQUOVR ,,b,RT1WCOVR
RT1WRCRD EQUOVR ,,b,RT1WCOVR
.*
.* RT1WCOV2 - PRESERVED CARRY OVER INFORMATION ON VALID RECURSIONS
RT1NODMP EQUOVR ,,b,RT1WCOV2
RT1WNOSP EQUOVR ,,b,RT1WCOV2
RT1WNOSV EQUOVR ,,b,RT1WCOV2
RT1WNOSA EQUOVR ,,b,RT1WCOV2
RT1WNOSM EQUOVR ,,b,RT1WCOV2
RT1WNOSU EQUOVR ,,b,RT1WCOV2
.*
.* RT1WCOV3 - FLAGS
RT1WSKIP EQUOVR ,,b,RT1WCOV3
RT1WSLST EQUOVR ,,b,RT1WCOV3
RT1WCPOB EQUOVR ,,b,RT1WCOV3
.*
.* RT1WCOV4 - FLAGS
RT1WRSTW EQUOVR ,,b,RT1WCOV4
RT1WNCNL EQUOVR ,,b,RT1WCOV4
RT1WCLUP EQUOVR ,,b,RT1WCOV4
.*
.* RT1WCMPF - FLAG BITS IN COMPLETION CODE.
RT1WREQ  EQUOVR ,,b,RT1WCMPF
RT1WSTEP EQUOVR ,,b,RT1WCMPF
RT1WRCF  EQUOVR ,,b,RT1WCMPF
.*
.* RT1TACQR - RESOURCES ACQUIRED BY RTM1
RT1TDISP EQUOVR ,,b,RT1TACQR
RT1TLLCK EQUOVR ,,b,RT1TACQR
RT1TRETY EQUOVR ,,b,RT1TACQR
RT1TCINV EQUOVR ,,b,RT1TACQR
RT1TSERP EQUOVR ,,b,RT1TACQR
RT1TTRTS EQUOVR ,,b,RT1TACQR
RT1TNSS  EQUOVR ,,b,RT1TACQR
RT1TBINV EQUOVR ,,b,RT1TACQR
.*
.* LOGICAL PHASE NUMBERS USED WITH THE RT1TLPN FIELD.
VALIDREC EQUOVR ,,v,RT1TLPN
FRRRECUR EQUOVR ,,v,RT1TLPN
RMGRCML  EQUOVR ,,v,RT1TLPN
RCRDREC  EQUOVR ,,v,RT1TLPN
RT1MGRLO EQUOVR ,,v,RT1TLPN
MGRINIT  EQUOVR ,,v,RT1TLPN
POSTRTS  EQUOVR ,,v,RT1TLPN
NORTS    EQUOVR ,,v,RT1TLPN
CPURSTRT EQUOVR ,,v,RT1TLPN
NORSTRT  EQUOVR ,,v,RT1TLPN
RT1MGRHI EQUOVR ,,v,RT1TLPN
RT1MCHLO EQUOVR ,,v,RT1TLPN
RTHEEDS  EQUOVR ,,v,RT1TLPN
RTHTIMER EQUOVR ,,v,RT1TLPN
RTHSTRG1 EQUOVR ,,v,RT1TLPN
RTHPARMS EQUOVR ,,v,RT1TLPN
RTHSTRG2 EQUOVR ,,v,RT1TLPN
RTHRECRD EQUOVR ,,v,RT1TLPN
RTHSOFTW EQUOVR ,,v,RT1TLPN
RTHEXIT  EQUOVR ,,v,RT1TLPN
RT1MCHHI EQUOVR ,,v,RT1TLPN
RT1SRMLO EQUOVR ,,v,RT1TLPN
RT1SRMHI EQUOVR ,,v,RT1TLPN
RT1RESLO EQUOVR ,,v,RT1TLPN
RESRTYLO EQUOVR ,,v,RT1TLPN
SRBEED   EQUOVR ,,v,RT1TLPN
XMEEDS   EQUOVR ,,v,RT1TLPN
RT2EEDS  EQUOVR ,,v,RT1TLPN
RT1EEDS  EQUOVR ,,v,RT1TLPN
RETRYRS1 EQUOVR ,,v,RT1TLPN
RESRTYHI EQUOVR ,,v,RT1TLPN
RESCHED  EQUOVR ,,v,RT1TLPN
FREESRB  EQUOVR ,,v,RT1TLPN
SRBCOMP  EQUOVR ,,v,RT1TLPN
RESRTM2  EQUOVR ,,v,RT1TLPN
TCBTERM  EQUOVR ,,v,RT1TLPN
RESRTM1  EQUOVR ,,v,RT1TLPN
MEMTERM  EQUOVR ,,v,RT1TLPN
MEMTCOMP EQUOVR ,,v,RT1TLPN
RT1RESHI EQUOVR ,,v,RT1TLPN
RT1EXTLO EQUOVR ,,v,RT1TLPN
EEDFREE  EQUOVR ,,v,RT1TLPN
FREERTCA EQUOVR ,,v,RT1TLPN
EEDFREE2 EQUOVR ,,v,RT1TLPN
EEDFREE3 EQUOVR ,,v,RT1TLPN
EEDFREE4 EQUOVR ,,v,RT1TLPN
MEMSLIP  EQUOVR ,,v,RT1TLPN
RT1EXTHI EQUOVR ,,v,RT1TLPN
.*
         MNOTE *,'Including IHART1W mapping macro'
         IHART1W ,                     *
         EQUOVR *END
*
RT1W     DSECT ,                       * Restart RT1W DSECT
         ORG   ,                       *
RT1W_LEN EQU   *-RT1W                  * Length of RT1W
*
RT1TRECC DSECT ,                       * Restart recursion control data
         ORG   ,                       *                          area
RT1TRECC_LEN EQU *-RT1TRECC            * Length of RT1TRECC
*
RT1TRACK DSECT ,                       * Restart Tracking area
         ORG   ,                       *
RT1TRACK_LEN EQU *-RT1TRACK            * Length of RT1TRACK
*
RTMW     DSECT ,                       * Restart RTM save/work area
         ORG   ,                       *
RTMW_LEN EQU   *-RTMW                  * Length of RTMW
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSAVE  0100-20096-20096-0111-00163-00163-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro for standard MVS save-areas
.*           and for Bixoft internal/external save-areas
.*
&LABEL   MAPSAVE &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSAVE                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSAVE        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'BXASAVE').EMBED
         AIF   ('&CB' EQ 'SAVEAREA').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSAVE).MEND
&BXA_MAC_MAPSAVE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_BXASAVE
         GBLC  &BXA_CB_SAVEAREA
&BXA_CB_BXASAVE  SETC 'SAVE'
&BXA_CB_SAVEAREA SETC 'SAVE'
.*
         MNOTE *,'Generating BXASAVE Dsect'
*
* DSECT for save areas
*
* Issue USING SAVEAREA,R13
*
* In ESTAE-type subroutines, 2 internal SA's are used to copy the
* contents of the external SA, and the save info from entry into the
* ESTAE-type subroutine. The external SA is thus available again for
* any invoked functions that require R13 to point to a save area.
*
BXASAVE  DSECT ,                       *
SAVEPRFX DS    0XL16                   * Bixoft prefix for save-areas
SAVEID   DS    CL8                     * Only used by Bixoft, valid
*                                      *   only for external SA's and
*                                      *   on 1st SA of an SA-subchain
SAVEPTPT DS    A                       * Ptr to ptr to this area
SAVEPTSA DS    A                       * Ptr to SA used on entry
SAVEPRFX_LEN EQU *-SAVEPRFX            * Length of prefix
*
SAVEAREA DS    0XL72                   * Standard save-area
SAVEPTRS DS    0XL12                   * Define first 3 words at once
SAVEHDR  DS    F                       * External SA: reserved for PL1 *
                                       *     for SRB: saved ret.addr.  *
                                       * Internal SA: address of BEGSR
SAVEPREV DS    F                       * Backward pointer
SAVEF1SA EQU   SAVEPREV,,C'C'          * Character value F1SA in first *
                                       *   savearea on chain
SAVENEXT DS    F                       * Forward pointer
SAVEDR13 EQU   SAVEPREV                * Saved value of reg 13
SAVEDR14 DS    F                       * Saved value of reg 14
SAVEDR15 DS    F                       * Saved value of reg 15
SAVEDR0  DS    F                       * Saved value of reg 0
SAVEDR1  DS    F                       * Saved value of reg 1
SAVEDR2  DS    F                       * Saved value of reg 2
SAVEDR3  DS    F                       * Saved value of reg 3
SAVEDR4  DS    F                       * Saved value of reg 4
SAVEDR5  DS    F                       * Saved value of reg 5
SAVEDR6  DS    F                       * Saved value of reg 6
SAVEDR7  DS    F                       * Saved value of reg 7
SAVEDR8  DS    F                       * Saved value of reg 8
SAVEDR9  DS    F                       * Saved value of reg 9
SAVEDR10 DS    F                       * Saved value of reg 10
SAVEDR11 DS    F                       * Saved value of reg 11
SAVEDR12 DS    F                       * Saved value of reg 12
*
SAVEAREA_END EQU *                     * End of standard MVS save-area
SAVEAREA_LEN EQU *-SAVEAREA            * Length of standard save-area
*
* Following fields are used only by Bixoft. These are defined only for
*    external save-areas, and serve to tie the chain of internal SA's
*    to the external SA.
*
SAVEINT  DS    0XL8                    * Defines both pointers at once
SAVEINTF DS    A                       * Pointer to first internal SA
SAVEINTU DS    A                       * Pointer to last-used int. SA
*
         ORG   ,                       *
         DS    0D                      * Align for internal Save areas
BXASAVE_LEN EQU *-BXASAVE              * Length of complete DSECT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSCCB  0100-20096-20096-0111-00181-00181-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Service Call Control Block
.*
.* --> The SCCB can be found through the CVTSCPIN pointer
.*
&LABEL   MAPSCCB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSCCB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSCCB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SCCB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSCCB).MEND
&BXA_MAC_MAPSCCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SCCB
&BXA_CB_SCCB SETC 'SCCB'
.*
.* SCCBIFM1 - INSTALLED FACILITY MAP BYTE 1.
SCCBCHPI EQUOVR ,,b,SCCBIFM1
SCCBCHPS EQUOVR ,,b,SCCBIFM1
SCCBCHPR EQUOVR ,,b,SCCBIFM1
SCCBCPUI EQUOVR ,,b,SCCBIFM1
SCCBCPUR EQUOVR ,,b,SCCBIFM1
.*
.* SCCBIFM2 - INSTALLED FACILITY MAP BYTE 2.
SCCBSGNL EQUOVR ,,b,SCCBIFM2
SCCBOMR  EQUOVR ,,b,SCCBIFM2
SCCBSTST EQUOVR ,,b,SCCBIFM2
SCCBRSTR EQUOVR ,,b,SCCBIFM2
SCCBITRC EQUOVR ,,b,SCCBIFM2
SCCBLPRM EQUOVR ,,b,SCCBIFM2
SCCBWDAT EQUOVR ,,b,SCCBIFM2
.*
.* SCCBIFM3 - INSTALLED FACILITY MAP BYTE 3.
SCCBSIR  EQUOVR ,,b,SCCBIFM3
SCCBSEI  EQUOVR ,,b,SCCBIFM3
SCCBSER  EQUOVR ,,b,SCCBIFM3
SCCBCARS EQUOVR ,,b,SCCBIFM3
SCCBESUM EQUOVR ,,b,SCCBIFM3
SCCBESEI EQUOVR ,,b,SCCBIFM3
SCCBESER EQUOVR ,,b,SCCBIFM3
SCCBCARL EQUOVR ,,b,SCCBIFM3
.*
.* SCCBIFM4 - INSTALLED FACILITY MAP BYTE 4
SCCBVFR  EQUOVR ,,b,SCCBIFM4
SCCBEVNT EQUOVR ,,b,SCCBIFM4
SCCBRRGI EQUOVR ,,b,SCCBIFM4
.*
.* SCCBCON1 - BITS 0-7 OF CONFIGURATION
SCCBBFY  EQUOVR ,,b,SCCBCON1
SCCBSOPF EQUOVR ,,b,SCCBCON1
SCCBIRIN EQUOVR ,,b,SCCBCON1
SCCBCSCF EQUOVR ,,b,SCCBCON1
.*
.* SCCBCON2 - BITS 8-15 OF CONFIGURATION
SCCBCSLO EQUOVR ,,b,SCCBCON2
.*
.* SCCBCON3 - BITS 16-23 OF CONFIGURATION
SCCBDAOM EQUOVR ,,b,SCCBCON3
SCCBCKSM EQUOVR ,,b,SCCBCON3
.*
.* SCCBCON4 - BITS 24-31 OF CONFIGURATION
SCCBPLO  EQUOVR ,,b,SCCBCON4
SCCBBFP  EQUOVR ,,b,SCCBCON4
.*
.* SCCBCPFL - CPU CHARACTERISTIC FLAGS BYTE 1.
SCCBVFIN EQUOVR ,,b,SCCBCPFL
SCCBVFCN EQUOVR ,,b,SCCBCPFL
SCCBVFSB EQUOVR ,,b,SCCBCPFL
SCCBCRIN EQUOVR ,,b,SCCBCPFL
.*
.* SCCBCPF2 - CPU CHARACTERISTIC FLAGS BYTE 2.
SCCBMPSB EQUOVR ,,b,SCCBCPF2
SCCBPER2 EQUOVR ,,b,SCCBCPF2
.*
.* Unnamed field at SCCBCPF2+10
SCCBKSID EQUOVR ,,b,SCCBCPF2+10
.*
         MNOTE *,'Including IHASCCB mapping macro'
         IHASCCB ,                     * Generate SCCB
         EQUOVR *END
*
SCCB     DSECT ,                       * Reset to SCCB DSECT
         ORG
SCCB_LEN EQU   *-SCCB                  * Length of SCCB
*
SCCBCP   DSECT ,                       * Reset to SCCBCP DSECT
         ORG
SCCBCP_LEN EQU *-SCCBCP                * Length of SCCBCP
*
SCCBHSA  DSECT ,                       * Reset to SCCBHSA DSECT
         ORG
SCCBHSA_LEN EQU *-SCCBHSA              * Length of SCCBHSA
*
SCCBMPF  DSECT ,                       * Reset to SCCBMPF DSECT
         ORG
SCCBMPF_LEN EQU *-SCCBMPF              * Length of SCCBMPF
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSCT   0100-20096-20096-0111-00166-00166-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Step Control Table
.*
&LABEL   MAPSCT &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSCT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSCT         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SCT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSCT).MEND
&BXA_MAC_MAPSCT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SCT
&BXA_CB_SCT SETC 'SCT'
.*
.* SCTTBLID - TABLE ID OF SCT=2
SCTTBLID DSOVR XL1
SCTID    EQUOVR ,,v,SCTTBLID
.*
.* SCTSSTAT - INTERNAL STEP STATUS
EAADDRBT EQUOVR ,,b,SCTSSTAT
EACAUSER EQUOVR ,,b,SCTSSTAT
SCTNORST EQUOVR ,,b,SCTSSTAT
SCTNOCKP EQUOVR ,,b,SCTSSTAT
SCTDORST EQUOVR ,,b,SCTSSTAT
SCTKEY0  EQUOVR ,,b,SCTSSTAT
SCTGRPH  EQUOVR ,,b,SCTSSTAT
INCMSSTS EQUOVR ,,b,SCTSSTAT
.*
.* SCTFSIOT - SVA of first SIOT
SCTFSIOT DSOVR XL4                     SVA of first SIOT. SVA is
.* SCTLSIOT - SVA of last SIOT for step
SCTLSIOT DSOVR XL4                     SVA of last SIOT for step. SVA
.*
.* SCTSSYSC - Step SYStem Code.
SCTUSYSC EQUOVR ,,b,SCTSSYSC
.*
.* SCTSTYPE - STEP TYPE
SCTGOSTP EQUOVR ,,b,SCTSTYPE
SCTINPUT EQUOVR ,,b,SCTSTYPE
SCTOUTMC EQUOVR ,,b,SCTSTYPE
SCTSJFHK EQUOVR ,,b,SCTSTYPE
SCTINITB EQUOVR ,,b,SCTSTYPE
SCTJSCAT EQUOVR ,,b,SCTSTYPE
.*
.* SCTSDP - STEP DISPATCHING PRIORITY
SCTEPRFM EQUOVR ,,b,SCTSDP
SCTPRFM2 EQUOVR ,,b,SCTSDP
SCTFSTEP EQUOVR ,,b,SCTSDP
.*
.* SCTSTAT2 - EXTENSION OF STEP STATUS INDICATORS
SCTMCVOL EQUOVR ,,b,SCTSTAT2
SCTSTPLB EQUOVR ,,b,SCTSTAT2
SCTSPSYS EQUOVR ,,b,SCTSTAT2
SCTJBEND EQUOVR ,,b,SCTSTAT2
SCTRSTST EQUOVR ,,b,SCTSTAT2
.*
.* SCTABCND - 8TH CONDITION CODE SLOT
SCTABCAN EQUOVR ,,b,SCTABCND
SCTONLYC EQUOVR ,,b,SCTABCND
SCTABEND EQUOVR ,,b,SCTABCND
SCTEVEN  EQUOVR ,,b,SCTABCND
SCTONLY  EQUOVR ,,b,SCTABCND
.*
.* SCTSTEND -
SCTSTSRT EQUOVR ,,b,SCTSTEND
SCTSTPND EQUOVR ,,b,SCTSTEND
SCTSYSCK EQUOVR ,,b,SCTSTEND
SCTSTNRN EQUOVR ,,b,SCTSTEND
SCTNDSI  EQUOVR ,,b,SCTSTEND
SCTTEXEC EQUOVR ,,b,SCTSTEND
.*
.* IEFASCTB does not generate a DSECT-statement
         MNOTE *,'Including IEFASCTB mapping macro'
SCT      DSECT ,                       * Start of SCT  DSECT
         IEFASCTB ,
         DSOVR *END
         EQUOVR *END
*
SCT      DSECT ,                       * Resume SCT DSECT
         ORG
SCT_LEN  EQU   *-SCT                   * Length of SCT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSCTX  0100-20096-20096-0111-00106-00106-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Step Control Table eXtension
.*
&LABEL   MAPSCTX &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSCTX                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSCTX        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SCTX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSCTX).MEND
&BXA_MAC_MAPSCTX SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SCTX
&BXA_CB_SCTX SETC 'SCTX'
.*
         MNOTE *,'Including IEFSCTX mapping macro'
         IEFSCTX ,
*
SCTXIN   DSECT ,                       * Resume SCTX DSECT
SCTX     EQU   SCTXIN                  * Label for USINGs
         ORG
SCTX_LEN EQU   *-SCTX                  * Length of SCTX
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSCVT  0100-20096-20096-0111-00106-00106-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Secondary Communication Vector Table
.*
&LABEL   MAPSCVT &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSCVT                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSCVT        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SCVT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSCVT).MEND
&BXA_MAC_MAPSCVT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SCVT
&BXA_CB_SCVT SETC 'SCVT'
.*
         MNOTE *,'Including IHASCVT mapping macro'
         IHASCVT LIST=YES              * Use unchanged PRINT option
*
SCVTSECT DSECT ,
SCVT     EQU   SCVTSECT                * Label for USINGs
         ORG
SCVT_LEN EQU   *-SCVT                  * Length of SCVT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSDWA  0100-20096-20096-0111-00501-00501-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the System Diagnostic Work Area
.*
&LABEL   MAPSDWA &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSDWA                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSDWA        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SDWA').EMBED
         AIF   ('&CB' EQ 'SDWANRC1').EMBED
         AIF   ('&CB' EQ 'SDWANRC2').EMBED
         AIF   ('&CB' EQ 'SDWANRC3').EMBED
         AIF   ('&CB' EQ 'SDWAPTRS').EMBED
         AIF   ('&CB' EQ 'SDWARC1').EMBED
         AIF   ('&CB' EQ 'SDWARC2').EMBED
         AIF   ('&CB' EQ 'SDWARC3').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSDWA).MEND
&BXA_MAC_MAPSDWA SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SDWA
         GBLC  &BXA_CB_SDWANRC1
         GBLC  &BXA_CB_SDWANRC2
         GBLC  &BXA_CB_SDWANRC3
         GBLC  &BXA_CB_SDWAPTRS
         GBLC  &BXA_CB_SDWARC1
         GBLC  &BXA_CB_SDWARC2
         GBLC  &BXA_CB_SDWARC3
&BXA_CB_SDWA SETC 'SDWA'
&BXA_CB_SDWANRC1 SETC 'SDWA'
&BXA_CB_SDWANRC2 SETC 'SDWA'
&BXA_CB_SDWANRC3 SETC 'SDWA'
&BXA_CB_SDWAPTRS SETC 'SDWA'
&BXA_CB_SDWARC1 SETC 'SDWA'
&BXA_CB_SDWARC2 SETC 'SDWA'
&BXA_CB_SDWARC3 SETC 'SDWA'
.*
.* SDWACMPF - FLAG BITS IN COMPLETION CODE.
SDWAREQ  EQUOVR ,,b,SDWACMPF
SDWASTEP EQUOVR ,,b,SDWACMPF
SDWASTCC EQUOVR ,,b,SDWACMPF
SDWARCF  EQUOVR ,,b,SDWACMPF
.*
.* SDWACMKA - CHANNEL INTERRUPT MASKS.
SDWAIOA  EQUOVR ,,b,SDWACMKA
SDWAEXTA EQUOVR ,,b,SDWACMKA
.*
.* SDWAMWPA - PSW KEY AND 'M-W-P'.
SDWAKEYA EQUOVR ,,b,SDWAMWPA
SDWAMCKA EQUOVR ,,b,SDWAMWPA
SDWAWATA EQUOVR ,,b,SDWAMWPA
SDWASPVA EQUOVR ,,b,SDWAMWPA
.*
.* SDWAPMKA - INSTRUCTION LENGTH CODE, CONDITION CODE
SDWAILA  EQUOVR ,,b,SDWAPMKA
SDWACCA  EQUOVR ,,b,SDWAPMKA
SDWAFPA  EQUOVR ,,b,SDWAPMKA
SDWADOA  EQUOVR ,,b,SDWAPMKA
SDWAEUA  EQUOVR ,,b,SDWAPMKA
SDWASGA  EQUOVR ,,b,SDWAPMKA
.*
.* SDWACMKP - CHANNEL INTERRUPT MASKS.
SDWAIOP  EQUOVR ,,b,SDWACMKP
SDWAEXTP EQUOVR ,,b,SDWACMKP
.*
.* SDWAMWPP - PSW KEY AND 'M-W-P'.
SDWAKEYP EQUOVR ,,b,SDWAMWPP
SDWAMCKP EQUOVR ,,b,SDWAMWPP
SDWAWATP EQUOVR ,,b,SDWAMWPP
SDWASPVP EQUOVR ,,b,SDWAMWPP
.*
.* SDWAPMKP - INSTRUCTION LENGTH CODE, CONDITION CODE
SDWAILP  EQUOVR ,,b,SDWAPMKP
SDWACCP  EQUOVR ,,b,SDWAPMKP
SDWAFPP  EQUOVR ,,b,SDWAPMKP
SDWADOP  EQUOVR ,,b,SDWAPMKP
SDWAEUP  EQUOVR ,,b,SDWAPMKP
SDWASGP  EQUOVR ,,b,SDWAPMKP
.*
.* SDWAEMK1 - INTERRUPT INFORMATION MASKS
SDWAPER1 EQUOVR ,,b,SDWAEMK1
SDWATRM1 EQUOVR ,,b,SDWAEMK1
SDWAIO1  EQUOVR ,,b,SDWAEMK1
SDWAEXT1 EQUOVR ,,b,SDWAEMK1
.*
.* SDWAMWP1 - PSW KEY AND 'M-W-P'
SDWAKEY1 EQUOVR ,,b,SDWAMWP1
SDWAECT1 EQUOVR ,,b,SDWAMWP1
SDWAMCK1 EQUOVR ,,b,SDWAMWP1
SDWAWAT1 EQUOVR ,,b,SDWAMWP1
SDWAPGM1 EQUOVR ,,b,SDWAMWP1
.*
.* SDWAINT1 - CONDITION CODE AND PROGRAM MASK
SDWAASCM EQUOVR ,,b,SDWAINT1
SDWAS1   EQUOVR ,,b,SDWAINT1
SDWACC1  EQUOVR ,,b,SDWAINT1
SDWAFPO1 EQUOVR ,,b,SDWAINT1
SDWADEC1 EQUOVR ,,b,SDWAINT1
SDWAEXP1 EQUOVR ,,b,SDWAINT1
SDWASGN1 EQUOVR ,,b,SDWAINT1
.*
.* SDWAAMF1 - ADDRESSING MODE FLAG
SDWAMOD1 EQUOVR ,,b,SDWAAMF1
.*
.* SDWAILC1 - INSTRUCTION LENGTH CODE FOR PSW DEFINED
SDWAIL1  EQUOVR ,,b,SDWAILC1
.*
.* SDWAICD1 - 8 BIT INTERRUPT CODE
SDWAIPR1 EQUOVR ,,b,SDWAICD1
SDWAIMC1 EQUOVR ,,b,SDWAICD1
SDWAIPC1 EQUOVR ,,b,SDWAICD1
.*
.* SDWAEMK2 - INTERRUPT INFORMATION MASKS
SDWAPER2 EQUOVR ,,b,SDWAEMK2
SDWATRM2 EQUOVR ,,b,SDWAEMK2
SDWAIO2  EQUOVR ,,b,SDWAEMK2
SDWAEXT2 EQUOVR ,,b,SDWAEMK2
.*
.* SDWAMWP2 - PSW KEY AND 'M-W-P'
SDWAKEY2 EQUOVR ,,b,SDWAMWP2
SDWAECT2 EQUOVR ,,b,SDWAMWP2
SDWAMCK2 EQUOVR ,,b,SDWAMWP2
SDWAWAT2 EQUOVR ,,b,SDWAMWP2
SDWAPGM2 EQUOVR ,,b,SDWAMWP2
.*
.* SDWAINT2 - CONDITION CODE AND PROGRAM MASK
SDWAS2   EQUOVR ,,b,SDWAINT2
SDWACC2  EQUOVR ,,b,SDWAINT2
SDWAFPO2 EQUOVR ,,b,SDWAINT2
SDWADEC2 EQUOVR ,,b,SDWAINT2
SDWAEXP2 EQUOVR ,,b,SDWAINT2
SDWASGN2 EQUOVR ,,b,SDWAINT2
.*
.* SDWAAMF2 - ADDRESSING MODE FLAG
SDWAMOD2 EQUOVR ,,b,SDWAAMF2
.*
.* SDWAILC2 - INSTRUCTION LENGTH CODE FOR PSW DEFINED
SDWAIL2  EQUOVR ,,b,SDWAILC2
.*
.* SDWAICD2 - 8 BIT INTERRUPT CODE
SDWAIPR2 EQUOVR ,,b,SDWAICD2
SDWAIMC2 EQUOVR ,,b,SDWAICD2
SDWAIPC2 EQUOVR ,,b,SDWAICD2
.*
.* SDWAMCHS - MCH FLAG BYTE
SDWASRVL EQUOVR ,,b,SDWAMCHS
SDWARCDF EQUOVR ,,b,SDWAMCHS
SDWATSVL EQUOVR ,,b,SDWAMCHS
SDWAINVP EQUOVR ,,b,SDWAMCHS
SDWARSRC EQUOVR ,,b,SDWAMCHS
SDWARSRF EQUOVR ,,b,SDWAMCHS
SDWAVRIV EQUOVR ,,b,SDWAMCHS
SDWAARGU EQUOVR ,,b,SDWAMCHS
.*
.* SDWAMCHD - INPUT INFORMATION TO RECOVERY ROUTINE
SDWASKYF EQUOVR ,,b,SDWAMCHD
SDWAREGU EQUOVR ,,b,SDWAMCHD
SDWAPSWU EQUOVR ,,b,SDWAMCHD
SDWASCK  EQUOVR ,,b,SDWAMCHD
SDWAACR  EQUOVR ,,b,SDWAMCHD
SDWAINSF EQUOVR ,,b,SDWAMCHD
SDWAFPRX EQUOVR ,,b,SDWAMCHD
SDWATERR EQUOVR ,,b,SDWAMCHD
.*
.* SDWARSR1 - ADDITIONAL STORAGE FRAME ERROR INDICATORS
SDWAPREF EQUOVR ,,b,SDWARSR1
SDWAVRCN EQUOVR ,,b,SDWARSR1
SDWANSWP EQUOVR ,,b,SDWARSR1
SDWANSWA EQUOVR ,,b,SDWARSR1
SDWAMSER EQUOVR ,,b,SDWARSR1
SDWACHNG EQUOVR ,,b,SDWARSR1
.*
.* SDWARSR2 - ADDITIONAL STORAGE ERROR INDICATORS.
SDWAOFLN EQUOVR ,,b,SDWARSR2
SDWAINTC EQUOVR ,,b,SDWARSR2
SDWASPER EQUOVR ,,b,SDWARSR2
SDWANUCL EQUOVR ,,b,SDWARSR2
SDWAFSQA EQUOVR ,,b,SDWARSR2
SDWAFLSQ EQUOVR ,,b,SDWARSR2
SDWAPGFX EQUOVR ,,b,SDWARSR2
SDWAVEQR EQUOVR ,,b,SDWARSR2
.*
.* SDWAMCHO - OTHER MACHINE CHECK FLAGS
SDWASKPR EQUOVR ,,b,SDWAMCHO
.*
.* SDWAERRA - ERROR TYPE CAUSING ENTRY TO RECOVERY EXIT
SDWAMCHK EQUOVR ,,b,SDWAERRA
SDWAPCHK EQUOVR ,,b,SDWAERRA
SDWARKEY EQUOVR ,,b,SDWAERRA
SDWASVCD EQUOVR ,,b,SDWAERRA
SDWAABTM EQUOVR ,,b,SDWAERRA
SDWASVCE EQUOVR ,,b,SDWAERRA
SDWATEXC EQUOVR ,,b,SDWAERRA
SDWAPGIO EQUOVR ,,b,SDWAERRA
SDWASTRM EQUOVR ,,b,SDWAERRA
.*
.* SDWAERRB - ADDITIONAL ERROR ENTRY INFORMATION
SDWAPDIP EQUOVR ,,b,SDWAERRB
SDWATYP1 EQUOVR ,,b,SDWAERRB
SDWAENRB EQUOVR ,,b,SDWAERRB
SDWALDIS EQUOVR ,,b,SDWAERRB
SDWASRBM EQUOVR ,,b,SDWAERRB
.*
.* SDWAERRC - ADDITIONAL ERROR ENTRY INFORMATION
SDWASTAF EQUOVR ,,b,SDWAERRC
SDWASTAI EQUOVR ,,b,SDWAERRC
SDWAIRB  EQUOVR ,,b,SDWAERRC
SDWAPERC EQUOVR ,,b,SDWAERRC
SDWAEAS  EQUOVR ,,b,SDWAERRC
SDWASKIP EQUOVR ,,b,SDWAERRC
SDWALCL  EQUOVR ,,b,SDWAERRC
SDWAGLBL EQUOVR ,,b,SDWAERRC
.*
.* SDWAERRD - ADDITIONAL ERROR ENTRY INFORMATION
SDWACLUP EQUOVR ,,b,SDWAERRD
SDWANRBE EQUOVR ,,b,SDWAERRD
SDWASTAE EQUOVR ,,b,SDWAERRD
SDWACTS  EQUOVR ,,b,SDWAERRD
SDWAMABD EQUOVR ,,b,SDWAERRD
SDWARPIV EQUOVR ,,b,SDWAERRD
SDWAMCIV EQUOVR ,,b,SDWAERRD
SDWAERFL EQUOVR ,,b,SDWAERRD
.*
.* SDWAIOFS - THIS IS THE CURRENT I/O STATUS
SDWAIOQR EQUOVR ,,b,SDWAIOFS
SDWAIOHT EQUOVR ,,b,SDWAIOFS
SDWANOIO EQUOVR ,,b,SDWAIOFS
SDWANIOP EQUOVR ,,b,SDWAIOFS
.*
.* SDWARTYF - ADDRESSING MODE INDICATOR BYTE
SDWAAMOD EQUOVR ,,b,SDWARTYF
.*
.* SDWARCDE - RETURN CODE FROM RECOVERY ROUTINE
SDWACWT  EQUOVR ,,v,SDWARCDE
SDWARETY EQUOVR ,,v,SDWARCDE
SDWAPSTI EQUOVR ,,v,SDWARCDE
.*
.* SDWAACF2 - FLAGS TO INDICATE ADDITIONAL PROCESSING
SDWARCRD EQUOVR ,,b,SDWAACF2
SDWARFXM EQUOVR ,,b,SDWAACF2
SDWASPIN EQUOVR ,,b,SDWAACF2
SDWARERR EQUOVR ,,b,SDWAACF2
SDWAUPRG EQUOVR ,,b,SDWAACF2
SDWAFREE EQUOVR ,,b,SDWAACF2
SDWASERP EQUOVR ,,b,SDWAACF2
SDWACML  EQUOVR ,,b,SDWAACF2
.*
.* SDWAACF3 - FLAGS INDICATING SOME GLOBAL LOCKS TO BE FREED.
SDWAFRSX EQUOVR ,,b,SDWAACF3
SDWAFRSA EQUOVR ,,b,SDWAACF3
SDWAFVSP EQUOVR ,,b,SDWAACF3
SDWADISP EQUOVR ,,b,SDWAACF3
SDWAASMP EQUOVR ,,b,SDWAACF3
SDWASALL EQUOVR ,,b,SDWAACF3
SDWAIPRG EQUOVR ,,b,SDWAACF3
SDWAFRSD EQUOVR ,,b,SDWAACF3
.*
.* SDWAACF4 - ADDITIONAL LOCKS TO BE FREED  FOR FRRS
SDWAIUCB EQUOVR ,,b,SDWAACF4
SDWATADB EQUOVR ,,b,SDWAACF4
SDWAOPTM EQUOVR ,,b,SDWAACF4
SDWACMS  EQUOVR ,,b,SDWAACF4
SDWAFLLK EQUOVR ,,b,SDWAACF4
.*
.* SDWADPFS - DUMP FLAGS
SDWADPT  EQUOVR ,,b,SDWADPFS
SDWADLST EQUOVR ,,b,SDWADPFS
SDWAENSN EQUOVR ,,b,SDWADPFS
SDWASLST EQUOVR ,,b,SDWADPFS
.*
.* SDWADPF2 - DUMP FLAGS 2
SDWADVS3 EQUOVR ,,b,SDWADPF2
SDWAXLST EQUOVR ,,b,SDWADPF2
SDWALVL2 EQUOVR ,,b,SDWADPF2
SDWASUBL EQUOVR ,,b,SDWADPF2
.*
.* SDWASDA0 - SDATA OPTIONS FLAG ONE
SDWANUC  EQUOVR ,,b,SDWASDA0
SDWASQA  EQUOVR ,,b,SDWASDA0
SDWALSQA EQUOVR ,,b,SDWASDA0
SDWASWA  EQUOVR ,,b,SDWASDA0
SDWAGTF  EQUOVR ,,b,SDWASDA0
SDWACBS  EQUOVR ,,b,SDWASDA0
SDWAQQS  EQUOVR ,,b,SDWASDA0
SDWADM   EQUOVR ,,b,SDWASDA0
.*
.* SDWASDA1 - SDATA OPTIONS
SDWAIO   EQUOVR ,,b,SDWASDA1
SDWAERR  EQUOVR ,,b,SDWASDA1
SDWASUM  EQUOVR ,,b,SDWASDA1
SDWAALLN EQUOVR ,,b,SDWASDA1
.*
.* SDWAPDAT - PDATA OPTIONS
SDWADSAS EQUOVR ,,b,SDWAPDAT
SDWADSAH EQUOVR ,,b,SDWAPDAT
SDWADREG EQUOVR ,,b,SDWAPDAT
SDWATLPA EQUOVR ,,b,SDWAPDAT
SDWATJPA EQUOVR ,,b,SDWAPDAT
SDWADPSW EQUOVR ,,b,SDWAPDAT
SDWAUSPL EQUOVR ,,b,SDWAPDAT
.*
.* SDWAVID - VERSION INDICATOR
SDWAVS3  EQUOVR ,,v,SDWAVID
SDWAVS4  EQUOVR ,,v,SDWAVID
SDWAVS5  EQUOVR ,,v,SDWAVID
SDWAVS6  EQUOVR ,,v,SDWAVID
SDWAVS7  EQUOVR ,,v,SDWAVID
SDWAVS8  EQUOVR ,,v,SDWAVID
SDWAVSN  EQUOVR ,,v,SDWAVID
.*
.* SDWADPVA - BITS THAT DEFINE DATA IN VARIABLE AREA
SDWAHEX  EQUOVR ,,b,SDWADPVA
SDWAEBC  EQUOVR ,,b,SDWADPVA
SDWAVRAM EQUOVR ,,b,SDWADPVA
.*
.* SDWACRC - THIS FIELD CONTAINS THE ABEND REASON CODE
SDWACRC  DSOVR 0XL4
.*
.* SDWACCRC - FLAGS FOR COMPCODE AND REASON CODE
SDWACCF  EQUOVR ,,b,SDWACCRC
SDWAREAF EQUOVR ,,b,SDWACCRC
.*
.* SDWARETF - SDWA RETRY FLAGS
SDWART15 EQUOVR ,,b,SDWARETF
SDWAREMR EQUOVR ,,b,SDWARETF
SDWAFRLK EQUOVR ,,b,SDWARETF
.*
.* SDWATYPE - TYPE OF RECOVERY ROUTINE THAT RTM GAVE CONTROL
SDWANREC EQUOVR ,,v,SDWATYPE
SDWATFRR EQUOVR ,,v,SDWATYPE
SDWATEST EQUOVR ,,v,SDWATYPE
SDWATARR EQUOVR ,,v,SDWATYPE
.*
.* SDWAOABF - FLAGS IN COMPLETION CODE REGISTER.
SDWAOREQ EQUOVR ,,b,SDWAOABF
SDWAOSTP EQUOVR ,,b,SDWAOABF
SDWAOSTC EQUOVR ,,b,SDWAOABF
SDWAORCF EQUOVR ,,b,SDWAOABF
.*
.* SDWAXFLG - EXTENDED FLAG AREA
SDWAINTF EQUOVR ,,b,SDWAXFLG
SDWATEAV EQUOVR ,,b,SDWAXFLG
SDWATEIV EQUOVR ,,b,SDWAXFLG
SDWAESTX EQUOVR ,,b,SDWAXFLG
.*
.* SDWASFLG - SUBSPACE FLAG AREA
SDWASVLD EQUOVR ,,b,SDWASFLG
SDWASSA  EQUOVR ,,b,SDWASFLG
SDWASSRS EQUOVR ,,b,SDWASFLG
.*
.* SDWAFLK1 - FLAGS INDICATING WHAT LOCKS ARE TO BE FREED
SDWAFCPU EQUOVR ,,b,SDWAFLK1
SDWAFRSM EQUOVR ,,b,SDWAFLK1
SDWAFTRC EQUOVR ,,b,SDWAFLK1
SDWAIOCB EQUOVR ,,b,SDWAFLK1
.*
.* SDWAFLK2 - FLAGS INDICATING WHAT LOCKS ARE TO BE FREED
SDWAFRSC EQUOVR ,,b,SDWAFLK2
SDWAFRSG EQUOVR ,,b,SDWAFLK2
SDWAFVSF EQUOVR ,,b,SDWAFLK2
SDWAFASG EQUOVR ,,b,SDWAFLK2
SDWAFRSS EQUOVR ,,b,SDWAFLK2
.*
.* SDWAFLE1 - FLAGS FOR LOCKS TO BE FREED IN FIRST BYTE OF EXTENSION
SDWABLSD EQUOVR ,,b,SDWAFLE1
SDWAXDS  EQUOVR ,,b,SDWAFLE1
SDWAXRES EQUOVR ,,b,SDWAFLE1
SDWAXQ   EQUOVR ,,b,SDWAFLE1
SDWAESET EQUOVR ,,b,SDWAFLE1
SDWAIXSC EQUOVR ,,b,SDWAFLE1
SDWAIXSR EQUOVR ,,b,SDWAFLE1
SDWAIXDS EQUOVR ,,b,SDWAFLE1
.*
.* SDWAFLE2 - FLAGS FOR LOCKS TO BE FREED IN SECOND BYTE OF EXTENSION
SDWAIXSH EQUOVR ,,b,SDWAFLE2
SDWAULUT EQUOVR ,,b,SDWAFLE2
SDWAIXRE EQUOVR ,,b,SDWAFLE2
SDWAWLMR EQUOVR ,,b,SDWAFLE2
SDWAWLMQ EQUOVR ,,b,SDWAFLE2
SDWACNTX EQUOVR ,,b,SDWAFLE2
SDWARGSV EQUOVR ,,b,SDWAFLE2
.*
         MNOTE *,'Including IHASDWA mapping macro'
         IHASDWA DSECT=YES,            * Include DSECT statement       *
               VRAMAP=NO               * Omit VRAMAP
         DSOVR *END                    *
         EQUOVR *END                   *
*
SDWA     DSECT ,                       * Restart SDWA
         ORG   ,                       *
SDWA_LEN EQU   *-SDWA                  * Length of SDWA
*
SDWARC1  DSECT ,                       * Restart SDWARC1
         ORG   ,                       *
SDWARC1_LEN EQU *-SDWARC1              * Length of SDWARC1
SDWARC2  DSECT ,                       * Restart SDWARC2
         ORG   ,                       *
SDWARC2_LEN EQU *-SDWARC2              * Length of SDWARC2
SDWARC3  DSECT ,                       * Restart SDWARC3
         ORG   ,                       *
SDWARC3_LEN EQU *-SDWARC3              * Length of SDWARC3
*
SDWAPTRS DSECT ,                       * Restart SDWAPTRS
         ORG   ,                       *
SDWAPTRS_LEN EQU *-SDWAPTRS            * Length of SDWAPTRS
*
SDWANRC1 DSECT ,                       * Restart SDWANRC1
         ORG   ,                       *
SDWANRC1_LEN EQU *-SDWANRC1            * Length of SDWANRC1
SDWANRC2 DSECT ,                       * Restart SDWANRC2
         ORG   ,                       *
SDWANRC2_LEN EQU *-SDWANRC2            * Length of SDWANRC2
SDWANRC3 DSECT ,                       * Restart SDWANRC3
         ORG   ,                       *
SDWANRC3_LEN EQU *-SDWANRC3            * Length of SDWANRC3
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.* Include the VRA as well
         GENMAPS VRA
.*
.MEND    MEND
./ ADD NAME=MAPSIOT  0100-20096-20096-0111-00264-00264-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Step Input/Output Table
.*
&LABEL   MAPSIOT &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSIOT                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSIOT        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SIOT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSIOT).MEND
&BXA_MAC_MAPSIOT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SIOT
&BXA_CB_SIOT SETC 'SIOT'
.*
.* SIOTTYPE - TABLE ID OF SIOT =3
SIOTID   EQUOVR ,,v,SIOTTYPE
DSNID    EQUOVR ,,v,SIOTTYPE
.*
.* SIOTBYT1 - MVM INDICATORS
SIOTOCKP EQUOVR ,,b,SIOTBYT1
SIOTHOLD EQUOVR ,,b,SIOTBYT1
SIOVAMDS EQUOVR ,,b,SIOTBYT1
SIODUNAL EQUOVR ,,b,SIOTBYT1
SIOTDADR EQUOVR ,,b,SIOTBYT1
SIODADSM EQUOVR ,,b,SIOTBYT1
SIOTALCD EQUOVR ,,b,SIOTBYT1
SIOTDDNT EQUOVR ,,b,SIOTBYT1
.*
.* SIOTBYT3 - ALLOCATION INDICATOR BYTE
SIOALIAS EQUOVR ,,b,SIOTBYT3
SIOCDEVT EQUOVR ,,b,SIOTBYT3
SIOTJES3 EQUOVR ,,b,SIOTBYT3
S3400OFF EQUOVR ,,b,SIOTBYT3
SIOTDSID EQUOVR ,,b,SIOTBYT3
SIOUCVTD EQUOVR ,,b,SIOTBYT3
SIOTDSOP EQUOVR ,,b,SIOTBYT3
SIOTHLD  EQUOVR ,,b,SIOTBYT3
.*
.* SIOTTSTC - INDICATORS FOR TIME SHARING AND TCAM
SIOTINFC EQUOVR ,,b,SIOTTSTC
SIOTTERM EQUOVR ,,b,SIOTTSTC
SIOTSSGP EQUOVR ,,b,SIOTTSTC
SIOTSSMG EQUOVR ,,b,SIOTTSTC
SIOTTRKM EQUOVR ,,b,SIOTTSTC
SIOTDSNM EQUOVR ,,b,SIOTTSTC
SIOTQNAM EQUOVR ,,b,SIOTTSTC
.*
.* SIOTBYT0 - EXTENDED ALLOCATION INDICATORS
SIOTSSDS EQUOVR ,,b,SIOTBYT0
SIOTDYAL EQUOVR ,,b,SIOTBYT0
SIOTNOPV EQUOVR ,,b,SIOTBYT0
SIOTPUPV EQUOVR ,,b,SIOTBYT0
.*
.* SCTSDISP - SCHEDULER DISPOSITION OF THE DATA SET INDICATORS
SIOTRETN EQUOVR ,,b,SCTSDISP
S3400DSP EQUOVR ,,b,SCTSDISP
PRIVATE  EQUOVR ,,b,SCTSDISP
SIOTPRIV EQUOVR ,,b,SCTSDISP
SIOTPASS EQUOVR ,,b,SCTSDISP
SIOTKEEP EQUOVR ,,b,SCTSDISP
SIOTDLET EQUOVR ,,b,SCTSDISP
SIOTCTLG EQUOVR ,,b,SCTSDISP
SIOTUNCT EQUOVR ,,b,SCTSDISP
.*
.* SCTSBYT1 - INDICATOR BYTE NUMBER 1
SCTDUMMY EQUOVR ,,b,SCTSBYT1
SCTSYSIN EQUOVR ,,b,SCTSBYT1
SIOTCCAT EQUOVR ,,b,SCTSBYT1
SIOTGDSN EQUOVR ,,b,SCTSBYT1
SIOTQDSN EQUOVR ,,b,SCTSBYT1
SCTPARLM EQUOVR ,,b,SCTSBYT1
SCTUNAFF EQUOVR ,,b,SCTSBYT1
SIOTJSCT EQUOVR ,,b,SCTSBYT1
.*
.* SCTSBYT2 - INDICATOR BYTE NUMBER 2
SIOCLUNL EQUOVR ,,b,SCTSBYT2
SIOTCATL EQUOVR ,,b,SCTSBYT2
SCTVOLAF EQUOVR ,,b,SCTSBYT2
SCTJOBLB EQUOVR ,,b,SCTSBYT2
SCTUNLBD EQUOVR ,,b,SCTSBYT2
SCTLABEL EQUOVR ,,b,SCTSBYT2
SCTDEFER EQUOVR ,,b,SCTSBYT2
SCTRECVD EQUOVR ,,b,SCTSBYT2
.*
.* SCTSBYT3 - INDICATOR BYTE NUMBER 3
SCTDSNRF EQUOVR ,,b,SCTSBYT3
SCTSYSNE EQUOVR ,,b,SCTSBYT3
SCTALCHK EQUOVR ,,b,SCTSBYT3
SCTVREF  EQUOVR ,,b,SCTSBYT3
SCTSYSOU EQUOVR ,,b,SCTSBYT3
SCTSNEW  EQUOVR ,,b,SCTSBYT3
SCTSMOD  EQUOVR ,,b,SCTSBYT3
SCTSOLD  EQUOVR ,,b,SCTSBYT3
.*
.* SCTSBYT4 DS    CL1    INDICATOR BYTE NUMBER 4
SCTSGDGS EQUOVR ,,b,SCTSBYT4
SIOTGDGA EQUOVR ,,b,SCTSBYT4
SIOTAFF  EQUOVR ,,b,SCTSBYT4
SIOTASCI EQUOVR ,,b,SCTSBYT4
SIOTSTEP EQUOVR ,,b,SCTSBYT4
SIOTVAFF EQUOVR ,,b,SCTSBYT4
SIOTIPDI EQUOVR ,,b,SCTSBYT4
SIOTOMN  EQUOVR ,,b,SCTSBYT4
.*
.* SIOUBYT3 - DEVICE CLASS
SIO3TAPE EQUOVR ,,b,SIOUBYT3
SIO3COMM EQUOVR ,,b,SIOUBYT3
SIO3DACC EQUOVR ,,b,SIOUBYT3
SIO3DISP EQUOVR ,,b,SIOUBYT3
SIO3UREC EQUOVR ,,b,SIOUBYT3
.*
.* SIOTBYT4 - SIOT INDICATORS BYTE 4
SIOTPROT EQUOVR ,,b,SIOTBYT4
SIOTRACD EQUOVR ,,b,SIOTBYT4
SIOTRACT EQUOVR ,,b,SIOTBYT4
SIOTGPRV EQUOVR ,,b,SIOTBYT4
SIOTHIER EQUOVR ,,b,SIOTBYT4
SIOTDSQU EQUOVR ,,b,SIOTBYT4
SIOTUCNT EQUOVR ,,b,SIOTBYT4
SIOTVCNT EQUOVR ,,b,SIOTBYT4
.*
.* SIOTSMS - STORAGE MANAGEMENT SUBSYSTEM INDICATORS
SIOTSMSM EQUOVR ,,b,SIOTSMS
SIOTSMS1 EQUOVR ,,b,SIOTSMS
SIOTSMS2 EQUOVR ,,b,SIOTSMS
SIOTSMS3 EQUOVR ,,b,SIOTSMS
SIOTSMS4 EQUOVR ,,b,SIOTSMS
SIOTSMS5 EQUOVR ,,b,SIOTSMS
SIOTSMS6 EQUOVR ,,b,SIOTSMS
SIOTSMS7 EQUOVR ,,b,SIOTSMS
.*
.* SIOTALTD - CONDITIONAL DISPOSITION
SIOTREDT EQUOVR ,,b,SIOTALTD
SIOTOPEN EQUOVR ,,b,SIOTALTD
SIOJCATS EQUOVR ,,b,SIOTALTD
SIOTNPRV EQUOVR ,,b,SIOTALTD
SIOTAKEP EQUOVR ,,b,SIOTALTD
SIOTADEL EQUOVR ,,b,SIOTALTD
SIOTACAT EQUOVR ,,b,SIOTALTD
SIOTAUNC EQUOVR ,,b,SIOTALTD
.*
.* SIOTBYT5 - SIOT INDICATOR BYTE 5
SIOTDEFC EQUOVR ,,b,SIOTBYT5
SIOTDCLA EQUOVR ,,b,SIOTBYT5
SIOTDDST EQUOVR ,,b,SIOTBYT5
SIOTADUN EQUOVR ,,b,SIOTBYT5
SIOTDYNU EQUOVR ,,b,SIOTBYT5
SIOTOVES EQUOVR ,,b,SIOTBYT5
SIOTBLKD EQUOVR ,,b,SIOTBYT5
SIOTWTRN EQUOVR ,,b,SIOTBYT5
.*
.* SIOTSMSF - STORAGE MANAGEMENT SUBSYSTEM INDICATORS
SIOTUSEQ EQUOVR ,,b,SIOTSMSF
SIOTULAB EQUOVR ,,b,SIOTSMSF
SIOTUTRT EQUOVR ,,b,SIOTSMSF
SIOTTRTD EQUOVR ,,b,SIOTSMSF
SIOTKEYD EQUOVR ,,b,SIOTSMSF
SIOTRESL EQUOVR ,,b,SIOTSMSF
.*
.* SIOTBYT2 - MVM INDICATOR BYTE
SIOTDMND EQUOVR ,,b,SIOTBYT2
SIOTDSPD EQUOVR ,,b,SIOTBYT2
SIOTGALL EQUOVR ,,b,SIOTBYT2
SIOTCALC EQUOVR ,,b,SIOTBYT2
SIOTCNEW EQUOVR ,,b,SIOTBYT2
SIOTCVOL EQUOVR ,,b,SIOTBYT2
SIOTSACP EQUOVR ,,b,SIOTBYT2
SIOTPTTS EQUOVR ,,b,SIOTBYT2
.*
.* Macro IEFASIOT does not generate a DSECT statement
SIOT     DSECT ,
.*
         MNOTE *,'Including IEFASIOT mapping macro'
         IEFASIOT ,
         EQUOVR *END
*
SIOT     DSECT ,                       * Resume SIOT DSECT
         ORG
SIOT_LEN EQU   *-SIOT                  * Length of SIOT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSMCA  0100-20096-20096-0111-00213-00213-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the SMf Control tAble
.*
&LABEL   MAPSMCA &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSMCA                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSMCA        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SMCA').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSMCA).MEND
&BXA_MAC_MAPSMCA SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SMCA
&BXA_CB_SMCA SETC 'SMCA'
.*
.* SMCAOPT - SMFDEFLT OPTIONS
SMCAOPT1 EQUOVR ,,b,SMCAOPT
SMCAOPT2 EQUOVR ,,b,SMCAOPT
SMCAEXT  EQUOVR ,,b,SMCAOPT
SMCADSA  EQUOVR ,,b,SMCAOPT
SMCAVOL  EQUOVR ,,b,SMCAOPT
SMCAUDCS EQUOVR ,,b,SMCAOPT
SMCARS01 EQUOVR ,,b,SMCAOPT
SMCATDS  EQUOVR ,,b,SMCAOPT
SMCAFGND EQUOVR ,,b,SMCAOPT
.*
.* SMCAMISC - MISCELLANEOUS INDICATORS
SMCAUSER EQUOVR ,,b,SMCAMISC
SMCAMAN  EQUOVR ,,b,SMCAMISC
SMCADSIC EQUOVR ,,b,SMCAMISC
SMCAFIRT EQUOVR ,,b,SMCAMISC
SMCAPSDP EQUOVR ,,b,SMCAMISC
SMCADBSY EQUOVR ,,b,SMCAMISC
SMCABSW  EQUOVR ,,b,SMCAMISC
SMCADUMP EQUOVR ,,b,SMCAMISC
.*
.* SMCAENDI - A COMMUNICATION FIELD
SMCARS14 EQUOVR ,,b,SMCAENDI
SMCARS15 EQUOVR ,,b,SMCAENDI
SMCARS16 EQUOVR ,,b,SMCAENDI
SMCARS17 EQUOVR ,,b,SMCAENDI
SMCARS18 EQUOVR ,,b,SMCAENDI
SMCARS19 EQUOVR ,,b,SMCAENDI
SMCADSPO EQUOVR ,,b,SMCAENDI
SMCADSNF EQUOVR ,,b,SMCAENDI
.*
.* SMCABITS - BIT INDICATORS
SMCADAR  EQUOVR ,,b,SMCABITS
SMCADSNM EQUOVR ,,b,SMCABITS
.*
.* SMCAPRMT - REPLACES OPI BIT
SMCAIPLR EQUOVR ,,b,SMCAPRMT
SMCALIST EQUOVR ,,b,SMCAPRMT
SMCALDSN EQUOVR ,,b,SMCAPRMT
SMCAMXDM EQUOVR ,,b,SMCAPRMT
SMCASTUS EQUOVR ,,b,SMCAPRMT
SMCARUN  EQUOVR ,,b,SMCAPRMT
SMCASKD  EQUOVR ,,b,SMCAPRMT
SMCACONS EQUOVR ,,b,SMCAPRMT
.*
.* SMCAFLGS - WRITER STATUS FLAGS
SMCAINIT EQUOVR ,,b,SMCAFLGS
SMCARSTR EQUOVR ,,b,SMCAFLGS
SMCADTLS EQUOVR ,,b,SMCAFLGS
SMCASETP EQUOVR ,,b,SMCAFLGS
SMCADISP EQUOVR ,,b,SMCAFLGS
SMCALL   EQUOVR ,,b,SMCAFLGS
SMCALATE EQUOVR ,,b,SMCAFLGS
SMCASETS EQUOVR ,,b,SMCAFLGS
.*
.* SMCAFLGR - RECOVERY FOOTPRINTS
SMCATERM EQUOVR ,,b,SMCAFLGR
SMCAPGFX EQUOVR ,,b,SMCAFLGR
SMCASRBF EQUOVR ,,b,SMCAFLGR
SMCAPSUS EQUOVR ,,b,SMCAFLGR
SMCAPCDT EQUOVR ,,b,SMCAFLGR
SMCAU29  EQUOVR ,,b,SMCAFLGR
SMCANOST EQUOVR ,,b,SMCAFLGR
SMCAPREV EQUOVR ,,b,SMCAFLGR
SMCANMRE EQUOVR ,,b,SMCAFLGR
.*
.* SMCARCUR - RECOVERY RECURSION BITS
SMCAMXDR EQUOVR ,,b,SMCARCUR
SMCASTTR EQUOVR ,,b,SMCARCUR
SMCASUSR EQUOVR ,,b,SMCARCUR
SMCATIMR EQUOVR ,,b,SMCARCUR
SMCASETR EQUOVR ,,b,SMCARCUR
SMCASETC EQUOVR ,,b,SMCARCUR
.*
.* SMCAIOMC - NUMBER OF TIMES I/O MEASUREMENTS
SMCAIOMS EQUOVR ,,b,SMCAIOMC
.*
.* SMCAEXFL - USER EXIT FLAGS
SMCAEXR1 EQUOVR ,,b,SMCAEXFL
SMCAEXR3 EQUOVR ,,b,SMCAEXFL
SMCAEXR4 EQUOVR ,,b,SMCAEXFL
SMCAEXR5 EQUOVR ,,b,SMCAEXFL
.*
.* SMCASIDB - SMF SID Syntax Used
SMCASDFT EQUOVR ,,b,SMCASIDB
SMCASONL EQUOVR ,,b,SMCASIDB
SMCASSER EQUOVR ,,b,SMCASIDB
SMCASSYS EQUOVR ,,b,SMCASIDB
SMCASSYM EQUOVR ,,b,SMCASIDB
SMCASCOM EQUOVR ,,b,SMCASIDB
SMCASRSV EQUOVR ,,b,SMCASIDB
.*
.* SMCAUFLG - Usage Data Collection Services Flags
SMCAUT89 EQUOVR ,,b,SMCAUFLG
SMCAT892 EQUOVR ,,b,SMCAUFLG
.*
.* SMCADLFL - DATA LOST CONTROL FLAGS
SMCADLWT EQUOVR ,,b,SMCADLFL
SMCADLHL EQUOVR ,,b,SMCADLFL
SMCADLLD EQUOVR ,,b,SMCADLFL
SMCADLR1 EQUOVR ,,b,SMCADLFL
SMCADLR2 EQUOVR ,,b,SMCADLFL
SMCADLR3 EQUOVR ,,b,SMCADLFL
SMCADLR4 EQUOVR ,,b,SMCADLFL
SMCADLR5 EQUOVR ,,b,SMCADLFL
.*
         MNOTE *,'Including IEESMCA mapping macro'
         IEESMCA ,
         EQUOVR *END
*
SMCABASE DSECT ,                       * Resume SMCA DSECT
SMCA     EQU   SMCABASE                * Label for USINGs
         ORG
SMCA_LEN EQU   *-SMCA                  * Length of SMCA
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSMDE  0100-20096-20096-0111-00142-00142-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the System Managed Directory Entry
.*
.* Warning: Field SMDE_LEN has been renamed to SMDE_SIZE
.*
&LABEL   MAPSMDE &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSMDE                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSMDE        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SMDE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSMDE).MEND
&BXA_MAC_MAPSMDE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SMDE
         GBLC  &BXA_CB_SMDE_FD
         GBLC  &BXA_CB_SMDE_NAME
         GBLC  &BXA_CB_SMDE_NLST
         GBLC  &BXA_CB_SMDE_PNAME
         GBLC  &BXA_CB_SMDE_TOKEN
&BXA_CB_SMDE SETC 'SMDE'
&BXA_CB_SMDE_FD SETC 'SMDE'
&BXA_CB_SMDE_NAME SETC 'SMDE'
&BXA_CB_SMDE_NLST SETC 'SMDE'
&BXA_CB_SMDE_PNAME SETC 'SMDE'
&BXA_CB_SMDE_TOKEN SETC 'SMDE'
.*
         GENMAPS (PMAR)
.*
.* SMDE_LEN - LENGTH OF CONTROL BLOCK.
SMDE_LEN           DSOVR  *NEWNAME,SMDE_SIZE
.*
.* SMDE_LVL - SMDE VERSION NUMBER
SMDE_LVL_VAL       EQUOVR ,,v,SMDE_LVL
.*
.* SMDE_LIBTYPE - SOURCE LIBRARY TYPE.
SMDE_LIBTYPE_C370LIB EQUOVR ,,v,SMDE_LIBTYPE
SMDE_LIBTYPE_HFS   EQUOVR ,,v,SMDE_LIBTYPE
SMDE_LIBTYPE_PDSE  EQUOVR ,,v,SMDE_LIBTYPE
SMDE_LIBTYPE_PDS   EQUOVR ,,v,SMDE_LIBTYPE
.*
.* SMDE_FLAG - FLAG BYTE
SMDE_FLAG_ALIAS    EQUOVR ,,b,SMDE_FLAG
SMDE_FLAG_LMOD     EQUOVR ,,b,SMDE_FLAG
SMDE_SYSTEM_DCB    EQUOVR ,,b,SMDE_FLAG
.*
.* SMDE_LIBF - LIBRARY FLAG (Z-BYTE)
SMDE_LIBF_TASKLIB  EQUOVR ,,v,SMDE_LIBF
SMDE_LIBF_LINKLIB  EQUOVR ,,v,SMDE_LIBF
SMDE_LIBF_PRIVATE  EQUOVR ,,v,SMDE_LIBF
.*
         MNOTE *,'Including IGWSMDE mapping macro'
         IGWSMDE ,                     * Generate IGWSMDE
         EQUOVR *END
*
SMDE     DSECT ,                       * Resume SMDE DSECT
         ORG   ,                       *
SMDE_LEN EQU   *-SMDE                  * Length of SMDE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSNAP  0100-20096-20096-0111-00133-00133-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro describing SNAP storage areas list and headers list
.* The SNAP Plist itself is described in macro's
.*     IHASNAP, IHASNAPX, and IHASNP
.*
&LABEL   MAPSNAP &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSNAP                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSNAP        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SNAPDLIST').EMBED
         AIF   ('&CB' EQ 'SNAPHLIST').EMBED
         AIF   ('&CB' EQ 'SNAPLIST').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSNAP).MEND
&BXA_MAC_MAPSNAP SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SNAPDLIST
         GBLC  &BXA_CB_SNAPHLIST
         GBLC  &BXA_CB_SNAPLIST
&BXA_CB_SNAPDLIST SETC 'SNAP'
&BXA_CB_SNAPHLIST SETC 'SNAP'
&BXA_CB_SNAPLIST SETC 'SNAP'
.*
         MNOTE *,'Generating BXASNAP Dsects'
*
SNAPLIST DSECT
SNAPFROM DS    A                       * Start address of dump-range
SNAPSTAT DS    0X                      * Bit0 on to mark end-of-list
SNAPTO   DS    A                       * End address of dump-range
*
         ORG   ,                       *
SNAPLIST_LEN EQU *-SNAPLIST            *
*
SNAPHLIST DSECT
SNAPHSTAT DS   0X                      * Bit0 on to mark end-of-list
SNAPHPTR DS    A                       * Pointer to header text
*
         ORG   ,                       * Reset to end of dsect
SNAPHLIST_LEN EQU *-SNAPHLIST
*
SNAPDLIST DSECT
SNAPDFROM DS   A                       * Start address of dump-range
SNAPDSTAT DS   0X                      * Bit0 on to mark end-of-list
SNAPDTO  DS    A                       * End address of dump-range
SNAPDSTK DS    XL8                     * STOKEN of dataspace
*
         ORG   ,                       *
SNAPDLIST_LEN EQU *-SNAPDLIST          *
*
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSRB   0100-20096-20096-0111-00138-00138-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Service Request Block
.*
&LABEL   MAPSRB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSRB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSRB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SRB').EMBED
         AIF   ('&CB' EQ 'XSRB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSRB).MEND
&BXA_MAC_MAPSRB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SRB
&BXA_CB_SRB SETC 'SRB'
.*
.* SRBEPA - ADDRESS OF ENTRY POINT (31-BIT USERS)
SRBMODE  EQUOVR ,,b,SRBEPA
.*
.* SRBRMTRA - ADDRESS OF RESOURCE MANAGER  ROUTINE (31-BIT USERS)
SRBRMODE EQUOVR ,,b,SRBRMTRA
.*
.* SRBFLGS - SRB OPTION FLAGS
SRBLLREQ EQUOVR ,,b,SRBFLGS
SRBLLHLD EQUOVR ,,b,SRBFLGS
SRBFRREQ EQUOVR ,,b,SRBFLGS
SRBFRRCL EQUOVR ,,b,SRBFLGS
SRBSUSP  EQUOVR ,,b,SRBFLGS
SRBPNONQ EQUOVR ,,b,SRBFLGS
SRBPSYS  EQUOVR ,,v,SRBFLGS
.*
.* SRBFLGS1 - SRB TYPE FLAGS.
SRBMAIN  EQUOVR ,,b,SRBFLGS1
SRBSP245 EQUOVR ,,b,SRBFLGS1
SRBBLK24 EQUOVR ,,b,SRBFLGS1
SRBXESF  EQUOVR ,,b,SRBFLGS1
SRB1STS  EQUOVR ,,b,SRBFLGS1
SRBPMCS  EQUOVR ,,b,SRBFLGS1
SRBMSCHD EQUOVR ,,b,SRBFLGS1
SRBTOKNP EQUOVR ,,b,SRBFLGS1
.*
         MNOTE *,'Including IHASRB mapping macro'
         IHASRB LIST=YES               *
         EQUOVR *END                   *
*
SRBSECT  DSECT ,                       * Resume SRB DSECT
         ORG   ,                       *
SRB_LEN  EQU   *-SRB                   * Length of SRB
*
XSRB     EQU   SRB                     * eXtended SRB
         ORG   ,                       * Position to end of SRB
XSRBNX   DS    A                       * Addr. of next free XSRB+SRBPL
         DS    0D                      * Round up to doubleword boundry
XSRB_LEN EQU   *-XSRB                  *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSSDR  0100-20096-20096-0111-00130-00130-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the SSOB extension for Dynamic device
.*                                        Reconfiguration
.*
&LABEL   MAPSSDR &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSSDR                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSSDR        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SSDR').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSSDR).MEND
&BXA_MAC_MAPSSDR SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SSDR
&BXA_CB_SSDR SETC 'SSDR'
.*
.* SSOB mapping is required before SSDR can be mapped
         GENMAPS SSOB
.*
.* DYNAMIC DEVICE RECONFIGURATION JES3 FUNCTION IDS (SSOBFUNC)
SSOBDDR1 EQUOVR ,,v,SSOBFUNC
SSOBDDR2 EQUOVR ,,v,SSOBFUNC
SSOBDDR3 EQUOVR ,,v,SSOBFUNC
SSOBDDR4 EQUOVR ,,v,SSOBFUNC
.*
.* DYNAMIC DEVICE RECONFIGURATION/JES3 RETURN CODES (SSOBRETN)
SSDR1EDL EQUOVR ,,v,SSOBRETN
SSDR1IDL EQUOVR ,,v,SSOBRETN
SSDR1NOL EQUOVR ,,v,SSOBRETN
SSDR2ED  EQUOVR ,,v,SSOBRETN
SSDR2ID  EQUOVR ,,v,SSOBRETN
.*
.* SSDRFLG2 - SSDR FLAG BYTE FUNCTION 3&4
SSDR4SWP EQUOVR ,,b,SSDRFLG2
.*
.* IEFSSDR maps 1 of many overlays for the SSOB extension
SSOBEXT  DSECT ,                       * Resume SSOB extension DSECT
.*
         MNOTE *,'Including IEFSSDR mapping macro'
         IEFSSDR ,
         EQUOVR *END
*
SSOBEXT  DSECT ,                       * Resume SSOB extension DSECT
SSDR     EQU   SSOBEXT                 * Label for USING
         ORG
SSDR_LEN EQU   *-SSDRBGN               * Length of SSDR
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSSL   0100-20096-20096-0111-00109-00109-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Short page Service List
.*
&LABEL   MAPSSL &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSSL                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSSL         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SSL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSSL).MEND
&BXA_MAC_MAPSSL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SSL
&BXA_CB_SSL SETC 'SSL'
.*
.* SSLFLG -
SSLAST   EQUOVR ,,b,SSLFLG
.*
         MNOTE *,'Including IHASSL mapping macro'
         IHASSL ,
         EQUOVR *END
*
SSL      DSECT ,                       * Resume SSL DSECT
         ORG
SSL_LEN  EQU   *-SSL                   * Length of SSL
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSSOB  0100-20096-20096-0111-00122-00122-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the SubSystem Options Block
.*
&LABEL   MAPSSOB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSSOB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSSOB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SSOB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSSOB).MEND
&BXA_MAC_MAPSSOB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SSOB
&BXA_CB_SSOB SETC 'SSOB'
.*
.* SSOBRETN - RETURN CODE FROM SUBSYSTEM
SSRTOK   EQUOVR ,,v,SSOBRETN
SSRTNSUP EQUOVR ,,v,SSOBRETN
SSRTNTUP EQUOVR ,,v,SSOBRETN
SSRTNOSS EQUOVR ,,v,SSOBRETN
SSRTDIST EQUOVR ,,v,SSOBRETN
SSRTLERR EQUOVR ,,v,SSOBRETN
SSRTNSSI EQUOVR ,,v,SSOBRETN
.*
.* SSOBFLG1 - Flag Byte
SSOBRTRY EQUOVR ,,b,SSOBFLG1
.*
         MNOTE *,'Including IEFSSOBH mapping macro'
         IEFSSOBH ,
         EQUOVR *END
*
SSOB     DSECT ,                       * Resume SSOB DSECT
         ORG
SSOB_LEN EQU   *-SSOB                  * Length of SSOB
*
* Define DSECT for function-dependent extension(s)
SSOBEXT  DSECT ,                       * Start SSOB extension
SSOBGN   EQU   *                       * Label for USINGs
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSSRB  0100-20096-20096-0111-00128-00128-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Suspended Service Request Block
.*
&LABEL   MAPSSRB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSSRB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSSRB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SSRB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSSRB).MEND
&BXA_MAC_MAPSSRB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SSRB
&BXA_CB_SSRB SETC 'SSRB'
.*
.* Include required SRB mapping
         GENMAPS (SRB)
.*
.* Include OPSYN for IHASRB to prevent re-expansion by IHASSRB
IHASRB   OPSYN   ORG                   * Change to harmless ORG-opcode
.*
.* SSRBCPUT - CPU TIMER SAVEAREA
SSRBNTMR EQUOVR ,,b,SSRBCPUT
.*
.* SSRBORMT - OLD SRB RMTR VALUE
SSRBSSTD EQUOVR ,,b,SSRBORMT
SSRBSSTA EQUOVR ,,b,SSRBORMT
SSRBSSTE EQUOVR ,,b,SSRBORMT
.*
.* SSRBFPFL - FP Flags
SSRBBFP  EQUOVR ,,b,SSRBFPFL
.*
         MNOTE *,'Including IHASSRB mapping macro'
SRBSECT  DSECT ,                       * Resume SRB DSECT
         ORG   ,                       *
         IHASSRB LIST=YES              *
         EQUOVR *END                   *
*
SRBSECT  DSECT ,                       * Resume SRB DSECT
         ORG   ,                       *
SSRB_LEN EQU   *-SRBSECT               * Length of SSRB
.*
.* Undo the OPSYN for IHASRB
IHASRB   OPSYN ,                       *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSTCB  0100-20096-20096-0111-00158-00158-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Secondary Task Control Block
.*
&LABEL   MAPSTCB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSTCB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSTCB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'STCB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSTCB).MEND
&BXA_MAC_MAPSTCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_STCB
&BXA_CB_STCB SETC 'STCB'
.*
.* STCBVAFN - VECTOR AFFINITY AND STATUS SAVED
STCBVMCK EQUOVR STCBVAFN
STCBSLID EQUOVR STCBVAFN
STCBVISA EQUOVR STCBVAFN
STCBSLCI EQUOVR STCBVAFN
.*
.* STCBFLG1 - FLAG BYTE
STCBPIQ  EQUOVR STCBFLG1
STCBVFRV EQUOVR STCBFLG1
STCBVFRD EQUOVR STCBFLG1
STCBSST  EQUOVR STCBFLG1
.*
.* STCBFLG2 - FLAG BYTE
STCBRMET EQUOVR STCBFLG2
STCBINRT EQUOVR STCBFLG2
.*
.* STCBFLG3 - FLAG BYTE
STCBNCNL EQUOVR STCBFLG3
STCBRTNC EQUOVR STCBFLG3
.*
.* STCBXCFF - XCF FLAG.
STCBSUSM EQUOVR STCBXCFF
.*
.* STCBFLG4 - Flag byte 4.
STCBENFL EQUOVR STCBFLG4
.*
.* STCBFLG5 - Flag byte 5.
STCBUNCK EQUOVR STCBFLG5
STCBENCK EQUOVR STCBFLG5
STCBOPTC EQUOVR STCBFLG5
.*
.* STCBFLG6 - Flag byte 6.
STCBSATF EQUOVR STCBFLG6
.*
.* STCBRGS1 - First Byte of Indicators
STCBRGRM EQUOVR STCBRGS1
STCBRGEM EQUOVR STCBRGS1
.*
.* STCBDFP - RESERVED FOR USE BY DFP.
STCBOAM  EQUOVR STCBDFP
.*
.* STCBCONS - Console Flag.
STCBWTO  EQUOVR STCBCONS
.*
.* STCBFLG7 - Flag byte 7.
STCBRTLS EQUOVR STCBFLG7
STCBRTLA EQUOVR STCBFLG7
.*
.* STCBFPFL - FP Flags
STCBBFP  EQUOVR STCBFPFL
STCBVSS  EQUOVR STCBFPFL
.*
         MNOTE *,'Including IHASTCB mapping macro'
         IHASTCB LIST=YES              * Use unchanged PRINT option
         EQUOVR *END
*
STCB     DSECT ,                       * Reset to STCB DSECT
         ORG
STCB_LEN EQU *-STCB                    * Length of STCB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSVCE  0100-20096-20096-0111-00143-00143-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the entries of the SVC table and the entries of
.*      the SVC Udate Recording Table
.*
&LABEL   MAPSVCE &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSVCE                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSVCE        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SVCENTRY').EMBED
         AIF   ('&CB' EQ 'SVCURT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSVCE).MEND
&BXA_MAC_MAPSVCE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SVCENTRY
         GBLC  &BXA_CB_SVCURT
&BXA_CB_SVCENTRY SETC 'SVCE'
&BXA_CB_SVCURT SETC 'SVCE'
.*
.* SVCEP - SVC ENTRY POINT ADDRESS
SVCAMODE EQUOVR ,,b,SVCEP
.*
.* SVCTP - TYPE FIELD
SVCTP1   EQUOVR ,,v,SVCTP
SVCTP2   EQUOVR ,,b,SVCTP
SVCTP34  EQUOVR ,,b,SVCTP
SVCTP6   EQUOVR ,,b,SVCTP
SVCAPF   EQUOVR ,,b,SVCTP
SVCESR   EQUOVR ,,b,SVCTP
SVCNP    EQUOVR ,,b,SVCTP
SVCASF   EQUOVR ,,b,SVCTP
.*
.* SVCATTR3 - ATTRIBUTES
SVCAR    EQUOVR ,,b,SVCATTR3
.*
.* SVCLOCKS - LOCK ATTRIBUTES
SVCLL    EQUOVR ,,b,SVCLOCKS
SVCCMS   EQUOVR ,,b,SVCLOCKS
SVCOPT   EQUOVR ,,b,SVCLOCKS
SVCALLOC EQUOVR ,,b,SVCLOCKS
SVCDISP  EQUOVR ,,b,SVCLOCKS
.*
         MNOTE *,'Including IHASVC mapping macro'
         IHASVC LIST=YES,              * Use unchanged PRINT option    *
               UPDATE=YES              * and include update recording
         EQUOVR *END
*
SVCENTRY DSECT ,                       * Resume SVCENTRY DSECT
SVC      EQU   SVCENTRY                * Label for USINGs
         ORG
SVC_LEN  EQU   *-SVC                   * Length of SVC entry
*
SVCURT   DSECT ,                       * Resume SVCURT DSECT
         ORG
SVCURT_LEN EQU *-SVCURT                * Length of URT entry
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.* Qname and Rname for ENQ on SVC table
SVC_QNAME RDATA DC,CL8'SYSZSVC'        *
SVC_RNAME RDATA DC,C'TABLE'            *
.*
.MEND    MEND
./ ADD NAME=MAPSVRB  0100-20096-20096-0111-00105-00105-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps a SuperVisor Request Block
.*
&LABEL   MAPSVRB &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSVRB                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSVRB        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SVRB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSVRB).MEND
&BXA_MAC_MAPSVRB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SVRB
&BXA_CB_SVRB SETC 'SVRB'
.*
         GENMAPS RB                    * Generate RB mapping
*
RBPRFX   DSECT ,                       * Reset to RB DSECT
SVRB     EQU   RBBASIC                 * Start of SVRB proper
         ORG
SVRB_LEN EQU   *-SVRB                  * Length of SVRB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSVT   0100-20096-20096-0111-00153-00153-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Supervisor Vector Table
.*
&LABEL   MAPSVT &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSVT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSVT         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SVT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSVT).MEND
&BXA_MAC_MAPSVT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SVT
&BXA_CB_SVT SETC 'SVT'
.*
.* SVTSRQ1 - FIRST BYTE OF SVTDSREQ
SVTDSG4  EQUOVR ,,b,SVTSRQ1
SVTDFLT  EQUOVR ,,b,SVTSRQ1
.*
.* SVTSRQ2 - SECOND BYTE OF SVTDSREQ
SVTDSG3  EQUOVR ,,b,SVTSRQ2
SVTSRM1  EQUOVR ,,b,SVTSRQ2
SVTQVER  EQUOVR ,,b,SVTSRQ2
.*
.* SVTSRQ3 - THIRD BYTE OF SVTDSREQ
SVTDSG2  EQUOVR ,,b,SVTSRQ3
SVTRCTI  EQUOVR ,,b,SVTSRQ3
SVTTCBV  EQUOVR ,,b,SVTSRQ3
SVTACHA  EQUOVR ,,b,SVTSRQ3
SVTMTER  EQUOVR ,,b,SVTSRQ3
SVTMINI  EQUOVR ,,b,SVTSRQ3
SVTCBVE  EQUOVR ,,b,SVTSRQ3
.*
.* SVTSRQ4 - FOURTH BYTE OF SVTDSREQ
SVTDSG1  EQUOVR ,,b,SVTSRQ4
SVTDETA  EQUOVR ,,b,SVTSRQ4
SVTATTA  EQUOVR ,,b,SVTSRQ4
SVTRTM2  EQUOVR ,,b,SVTSRQ4
SVTRTM1  EQUOVR ,,b,SVTSRQ4
SVTCHAP  EQUOVR ,,b,SVTSRQ4
SVTSTAT  EQUOVR ,,b,SVTSRQ4
SVTPURD  EQUOVR ,,b,SVTSRQ4
.*
.* SVTDSBCT - MAXIMUM NUMBER OF WEBs the DISPATCHER CAN PROCESS
SVTCHKWP EQUOVR ,,b,SVTDSBCT+1
SVTAWM   EQUOVR ,,b,SVTDSBCT+3
.*
.* SVTCS1 - FIRST BYTE OF CS WORD.
SVTXMSOP EQUOVR ,,b,SVTCS1
SVTXMSUP EQUOVR ,,b,SVTCS1
SVTXMCMF EQUOVR ,,b,SVTCS1
.* SVTPNFP  EQUOVR ,,b,SVTCS1          * Last seen in OS/390 V2R6
.*
.* SVTDACTV - DISPATCHER ACTIVE INDICATOR
SVTDLID  EQUOVR ,,b,SVTDACTV
SVTDPRMT EQUOVR ,,b,SVTDACTV
SVTDSCAN EQUOVR ,,b,SVTDACTV
.*
.* SVTPWAIT - PROCESSOR WAITING INDICATOR
SVTPWTCK EQUOVR ,,b,SVTPWAIT
SVTPWSTS EQUOVR ,,b,SVTPWAIT
.*
         MNOTE *,'Including IHASVT mapping macro'
         IHASVT LIST=YES               * Keep current listing options
         EQUOVR *END
*
SVT      DSECT ,                       * Resume SVT DSECT
         ORG   ,
SVT_LEN  EQU   *-SVT                   * Length of SVT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPSWAPX 0100-20096-20096-0111-00109-00109-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the SWA prefix area
.*
&LABEL   MAPSWAPX &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPSWAPX               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPSWAPX       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'SWAPRFX').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPSWAPX).MEND
&BXA_MAC_MAPSWAPX SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_SWAPRFX
&BXA_CB_SWAPRFX SETC 'SWAPX'
.*
         MNOTE *,'Generating DSECT for SWAPRFX'
.*
SWAPRFX  DSECT ,
SWAWORD0 DS    F                       *
SWASELF  DS    A                       * Ptr (or SVA?) of this prefix
SWAWORD2 DS    F                       *
SWANAME  DS    CL4                     * Acronym of following block
*
         ORG
SWAPRFX_LEN EQU *-SWAPRFX              * Length of SWA prefix
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPS99   0100-20096-20096-0111-00651-00651-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Control Blocks used with SVC 99 (DYNALLOC)
.*
&LABEL   MAPS99 &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPS99                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPS99         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'EMDSECT1').EMBED
         AIF   ('&CB' EQ 'EMDSECT2').EMBED
         AIF   ('&CB' EQ 'EMDSECT3').EMBED
         AIF   ('&CB' EQ 'S99RB').EMBED
         AIF   ('&CB' EQ 'S99RBP').EMBED
         AIF   ('&CB' EQ 'S99RBX').EMBED
         AIF   ('&CB' EQ 'S99TUFLD').EMBED
         AIF   ('&CB' EQ 'S99TUNIT').EMBED
         AIF   ('&CB' EQ 'S99TUPL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPS99).MEND
&BXA_MAC_MAPS99 SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_EMDSECT1
         GBLC  &BXA_CB_EMDSECT2
         GBLC  &BXA_CB_EMDSECT3
         GBLC  &BXA_CB_S99RB
         GBLC  &BXA_CB_S99RBP
         GBLC  &BXA_CB_S99RBX
         GBLC  &BXA_CB_S99TUFLD
         GBLC  &BXA_CB_S99TUNIT
         GBLC  &BXA_CB_S99TUPL
&BXA_CB_EMDSECT1 SETC 'S99'
&BXA_CB_EMDSECT2 SETC 'S99'
&BXA_CB_EMDSECT3 SETC 'S99'
&BXA_CB_S99RB SETC 'S99'
&BXA_CB_S99RBP SETC 'S99'
&BXA_CB_S99RBX SETC 'S99'
&BXA_CB_S99TUFLD SETC 'S99'
&BXA_CB_S99TUNIT SETC 'S99'
&BXA_CB_S99TUPL SETC 'S99'
.*
.* S99RBPTR - REQUEST BLOCK POINTER
S99RBPTR DSOVR  A
S99RBPND EQUOVR ,,b,S99RBPTR
.*
.* S99VERB - VERB CODE
S99VRBAL EQUOVR ,,v,S99VERB
S99VRBUN EQUOVR ,,v,S99VERB
S99VRBCC EQUOVR ,,v,S99VERB
S99VRBDC EQUOVR ,,v,S99VERB
S99VRBRI EQUOVR ,,v,S99VERB
S99VRBDN EQUOVR ,,v,S99VERB
S99VRBIN EQUOVR ,,v,S99VERB
.*
.* S99FLG11 - FIRST FLAGS BYTE
S99ONCNV EQUOVR ,,b,S99FLG11
S99NOCNV EQUOVR ,,b,S99FLG11
S99NOMNT EQUOVR ,,b,S99FLG11
S99JBSYS EQUOVR ,,b,S99FLG11
S99CNENQ EQUOVR ,,b,S99FLG11
S99GDGNT EQUOVR ,,b,S99FLG11
S99MSGL0 EQUOVR ,,b,S99FLG11
S99NOMIG EQUOVR ,,b,S99FLG11
.*
.* S99FLG12 - SECOND BYTE OF FLAGS
S99NOSYM EQUOVR ,,b,S99FLG12
S99ACUCB EQUOVR ,,b,S99FLG12
.*
.* S99TXTPP - ADDR OF LIST OF TEXT UNIT PTRS
S99TXTPP DSOVR  A
.*
.* S99S99X - ADDR OF REQ BLK EXTENSION
S99S99X  DSOVR  A
.*
.* S99FLG21 - FIRST BYTE OF FLAGS
S99WTVOL EQUOVR ,,b,S99FLG21
S99WTDSN EQUOVR ,,b,S99FLG21
S99NORES EQUOVR ,,b,S99FLG21
S99WTUNT EQUOVR ,,b,S99FLG21
S99OFFLN EQUOVR ,,b,S99FLG21
S99TIONQ EQUOVR ,,b,S99FLG21
S99CATLG EQUOVR ,,b,S99FLG21
S99MOUNT EQUOVR ,,b,S99FLG21
.*
.* S99FLG22 - SECOND BYTE OF FLAGS
S99UDEVT EQUOVR ,,b,S99FLG22
S99PCINT EQUOVR ,,b,S99FLG22
S99DYNDI EQUOVR ,,b,S99FLG22
S99TIOEX EQUOVR ,,b,S99FLG22
.*
.* Masks for defined bits in flag fields
S99MSK11 EQUOVR ,,b,S99FLG11
S99MSK12 EQUOVR ,,b,S99FLG12
S99MSK21 EQUOVR ,,b,S99FLG21
S99MSK22 EQUOVR ,,b,S99FLG22
S99MSK23 EQUOVR ,,v,S99FLG23
S99MSK24 EQUOVR ,,v,S99FLG24
.*
S99NOT11 EQUOVR ,,v,S99FLG11
S99NOT12 EQUOVR ,,b,S99FLG12
S99NOT21 EQUOVR ,,v,S99FLG21
S99NOT22 EQUOVR ,,b,S99FLG22
S99NOT23 EQUOVR ,,b,S99FLG23
S99NOT24 EQUOVR ,,b,S99FLG24
.*
.* S99TUPTR - TEXT UNIT POINTER
S99TUPLN EQUOVR ,,b,S99TUPTR
.*
.* S99EVER - VERSION NUMBER
S99EVER  DSOVR  XL1
S99RBXVR EQUOVR ,,v,S99EVER
.*
.* S99EOPTS - PROCESSING OPTIONS
S99EIMSG EQUOVR ,,b,S99EOPTS
S99ERMSG EQUOVR ,,b,S99EOPTS
S99ELSTO EQUOVR ,,b,S99EOPTS
S99EMKEY EQUOVR ,,b,S99EOPTS
S99EMSUB EQUOVR ,,b,S99EOPTS
S99EWTP  EQUOVR ,,b,S99EOPTS
.*
.* S99EMGSV - SEVERITY LEVEL FOR MESSAGES PROCESSING
S99XINFO EQUOVR ,,v,S99EMGSV
S99XWARN EQUOVR ,,b,S99EMGSV
S99XSEVE EQUOVR ,,b,S99EMGSV
.*
         MNOTE *,'Including IEFZB4D0 mapping macro'
         IEFZB4D0 ,                    *
         EQUOVR *END
         DSOVR *END
*
S99RBP   DSECT ,                       *
         ORG   ,                       *
S99RBP_LEN EQU *-S99RBP                *
*
S99RB    DSECT ,                       *
         ORG   ,                       *
S99RB_LEN EQU  *-S99RB                 *
*
S99TUPL  DSECT ,                       *
         ORG   ,                       *
S99TUPL_LEN EQU *-S99TUPL              *
*
S99TUNIT DSECT ,                       *
S99TUFIX_LEN EQU S99TUPAR-S99TUNIT     * Length of fixed part
         ORG   ,                       *
S99TUNIT_LEN EQU *-S99TUNIT            *
*
S99TUFLD DSECT ,                       *
         ORG   ,                       *
S99TUFLD_LEN EQU *-S99TUFLD            *
*
S99RBX   DSECT ,                       *
         ORG   ,                       *
S99RBX_LEN EQU *-S99RBX                *
*
         MNOTE *,'Including IEFZB4D2 mapping macro'
         IEFZB4D2 ,                    *
*
SVC99KYS DSECT ,                       *
*
* Constants missing in IEFZB4D2
DALSTATS_OLD EQU X'01'                 * DISP=OLD
DALSTATS_MOD EQU X'02'                 * DISP=MOD
DALSTATS_NEW EQU X'04'                 * DISP=NEW
DALSTATS_SHR EQU X'08'                 * DISP=SHR
*
DALNDISP_UNCATLG EQU X'01'             * DISP=(,UNCATLG)
DALNDISP_CATLG   EQU X'02'             * DISP=(,CATLG)
DALNDISP_DELETE  EQU X'04'             * DISP=(,DELETE)
DALNDISP_KEEP    EQU X'08'             * DISP=(,KEEP)
*
DALCDISP_UNCATLG EQU X'01'             * DISP=(,,UNCATLG)
DALCDISP_CATLG   EQU X'02'             * DISP=(,,CATLG)
DALCDISP_DELETE  EQU X'04'             * DISP=(,,DELETE)
DALCDISP_KEEP    EQU X'08'             * DISP=(,,KEEP)
*
DALSPFRM_ALX    EQU X'02'              * Allow different areas of
*                                      *  contiguous space
DALSPFRM_MXIG   EQU X'04'              * Alloc max. contiguous
DALSPFRM_CONTIG EQU X'08'              * Contiguous alloc required
*
DALLABEL_NL  EQU X'01'                 * No Label
DALLABEL_SL  EQU X'02'                 * Standard Label
DALLABEL_NSL EQU X'04'                 * Non-Standard Label
DALLABEL_SUL EQU X'0A'                 * Standard & User Label
DALLABEL_BLP EQU X'10'                 * Bypass Label Processing
DALLABEL_LTM EQU X'21'                 * Check/bypass Leading Tape Mark
DALLABEL_AL  EQU X'40'                 * ANSI Label
DALLABEL_AUL EQU X'48'                 * ANSI & User Label
*
DALPASPR_YES EQU X'10'                 * Password protected dataset
DALPASPR_NO  EQU X'30'                 * Unprotected dataset
*
DALINOUT_OUT EQU X'40'                 * Output-only
DALINOUT_IN  EQU X'80'                 * Input-only
*
DALFCBAV_VERIFY EQU X'04'              * Verigication
DALFCBAV_ALIGN  EQU X'08'              * Alignment
*
DALBURST_BURST EQU X'02'               * Burster-Trimmer Stacker
DALBURST_CONT  EQU X'04'               * Continuous Form Stacking
*
DALMTRC_1ST EQU X'00'                  * First char arrangement table
DALMTRC_2ND EQU X'01'                  * Second table
DALMTRC_3ND EQU X'02'                  * Third table
DALMTRC_4ND EQU X'03'                  * Fourth table
*
DALRECO_KSDS EQU X'80'                 * VSAM KSDS
DALRECO_ESDS EQU X'40'                 * VSAM ESDS
DALRECO_RRDS EQU X'20'                 * VSAM RRDS
DALRECO_LDS  EQU X'10'                 * VSAM LDS
*
DALAVGR_U EQU X'80'                    * Allocate in units of 1 record
DALAVGR_K EQU X'40'                    * Allocate per 1,000 records
DALAVGR_M EQU X'20'                    * Allocate per 1,000,000 records
*
DALDSNT_PDSE EQU X'80'                 * PDSE dataset
DALDSNT_PDS  EQU X'40'                 * PDS dataset
DALDSNT_PIPE EQU X'20'                 * PIPE dataset
DALDSNT_HFS  EQU X'10'                 * HFS dataset
*
DALSPIN_IMMED EQU X'80'                * Print on deallocation
DALSPIN_EOJ   EQU X'40'                * Print at end-of-job
*
DALPOPT_OSYNC     EQU X'00000100'      * HFS data set open options
DALPOPT_OCREAT    EQU X'00000080'      *
DALPOPT_OEXCL     EQU X'00000040'      *
DALPOPT_ONOCTTY   EQU X'00000020'      *
DALPOPT_OTRUNC    EQU X'00000010'      *
DALPOPT_OAPPEND   EQU X'00000008'      *
DALPOPT_ONONBLOCK EQU X'00000004'      *
DALPOPT_ORDWR     EQU X'00000003'      *
DALPOPT_ORDONLY   EQU X'00000002'      *
DALPOPT_OWRONLY   EQU X'00000001'      *
*
DALPMDE_SISUID EQU X'00000800'         * HFS data set access attributes
DALPMDE_SISGID EQU X'00000400'         *
DALPMDE_SIRUSR EQU X'00000100'         *
DALPMDE_SIWUSR EQU X'00000080'         *
DALPMDE_SIXUSR EQU X'00000040'         *
DALPMDE_SIRWXU EQU X'000001C0'         *
DALPMDE_SIRGRP EQU X'00000020'         *
DALPMDE_SIWGRP EQU X'00000010'         *
DALPMDE_SIXGRP EQU X'00000008'         *
DALPMDE_SIRWXG EQU X'00000038'         *
DALPMDE_SIROTH EQU X'00000004'         *
DALPMDE_SIWOTH EQU X'00000002'         *
DALPMDE_SIXOTH EQU X'00000001'         *
DALPMDE_SIRWXO EQU X'00000007'         *
*
DALPNDS_DELETE EQU X'04'               * HFS normal disp: DELETE
DALPNDS_KEEP   EQU X'08'               * HFS normal disp: KEEP
*
DALPCDS_DELETE EQU X'04'               * HFS cond.  disp: DELETE
DALPCDS_KEEP   EQU X'08'               * HFS cond.  disp: KEEP
*
DALRLS_NRI EQU X'80'                   * No Read Integrity
DALRLS_CR  EQU X'40'                   * Consistent Read
*
DALFDAT_BIN EQU X'80'                  * Binary HFS file
DALFDAT_TXT EQU X'40'                  * Text HFS file
*
DALBFALN_F EQU X'01'                   * Fullword alignment
DALBFALN_D EQU X'02'                   * Doubleword alignment
*
DALBFTEK_D EQU X'80'                   * Dynamic buffering
DALBFTEK_E EQU X'10'                   * Exchange buffering
DALBFTEK_R EQU X'20'                   * Record buffering
DALBFTEK_S EQU X'40'                   * Simple buffering
DALBFTEK_A EQU X'60'                   * Record Area buffering
*
DALBUFOF_L EQU X'80'                   * Block prefix is 4 bytes and
*                                      *  contains block length
*
DALCODE_T EQU X'02'                    * Teletype 5-track
DALCODE_A EQU X'04'                    * USASCII 8-track
DALCODE_C EQU X'08'                    * National Cash register 8-track
DALCODE_B EQU X'10'                    * Burroughs 7-track
DALCODE_F EQU X'20'                    * Friden 8-track
DALCODE_I EQU X'40'                    * IBM BCD 8-track
DALCODE_N EQU X'80'                    * No conversion
*
DALCPRI_S EQU X'01'                    * Send priority
DALCPRI_E EQU X'02'                    * Equal priority
DALCPRI_R EQU X'04'                    * Receiving priority
*
DALDEN_0 EQU X'03'                     * 200 bpi 7-track
DALDEN_1 EQU X'43'                     * 556 bpi 7-track
DALDEN_2 EQU X'83'                     * 800 bpi 7- or 9-track
DALDEN_3 EQU X'C3'                     * 1600 bpi 9-track
DALDEN_4 EQU X'D3'                     * 6250 bpi 9-track
*
DALDSORG_TR   EQU X'0004'              * TCAM 3705
DALDSORG_VSAM EQU X'0008'              * VSAM
DALDSORG_TQ   EQU X'0020'              * TCAM message queue
DALDSORG_TX   EQU X'0040'              * TCAM line group
DALDSORG_GS   EQU X'0080'              * Graphics
DALDSORG_PO   EQU X'0200'              * Partitioned
DALDSORG_POU  EQU X'0300'              * Partitioned Unmovable
DALDSORG_MQ   EQU X'0400'              * Government of telecom msg xfer
DALDSORG_CQ   EQU X'0800'              * Direct Access Message Queue
DALDSORG_CX   EQU X'1000'              * Communication line group
DALDSORG_DA   EQU X'2000'              * Direct Access
DALDSORG_DAU  EQU X'2100'              * Direct Access Unmovable
DALDSORG_PS   EQU X'4000'              * Physical Sequential
DALDSORG_PSU  EQU X'4100'              * Physical Sequential Unmovable
*
DALEROPT_T   EQU X'10'                 * Online BSAM testing
DALEROPT_ABE EQU X'20'                 * Abend
DALEROPT_SKP EQU X'40'                 * Skip block
DALEROPT_ACC EQU X'80'                 * Accept block
*
DALLRECL_X EQU X'8000'                 * Variable Spanned records,
*                                      *  longer than 32,756 bytes
*
DALMODE_E  EQU X'40'                   * EBCDIC mode
DALMODE_ER EQU X'50'                   * EBCDIC read col.eliminate mode
DALMODE_EO EQU X'60'                   * EBCDIC optical mark read mode
DALMODE_C  EQU X'80'                   * Card image mode
DALMODE_CR EQU X'90'                   * Card read col. eliminate mode
DALMODE_CO EQU X'A0'                   * Card optical mark read mode
*
* Add required OPTCD-values
DALOPTCD_R EQU X'01'                   * Relative block addressing
DALOPTCD_J EQU X'01'                   * Char. arrangement tables
DALOPTCD_T EQU X'02'                   * User Totalling facility
DALOPTCD_Z EQU X'04'                   * Reduced tape error recovery
*                                      *  or direct DASD search
DALOPTCD_A EQU X'08'                   * Direct addressing
DALOPTCD_Q EQU X'08'                   * Translate ASCII-EBCDIC
DALOPTCD_F EQU X'10'                   * Feedback
DALOPTCD_H EQU X'10'                   * Hopper empty exit
DALOPTCD_O EQU X'10'                   * Online corr.for optical reader
DALOPTCD_C EQU X'20'                   * Chained scheduling or
*                                      *  TCAM segement identification
DALOPTCD_E EQU X'20'                   * Extended search
DALOPTCD_B EQU X'40'                   * Disregard EOF for tape
DALOPTCD_U EQU X'40'                   * Allow invalild character or
*                                      *  handle TCAM workunit as MSG
DALOPTCD_W EQU X'80'                   * Write validity check or
*                                      *  put TCAM msg src in work area
*
DALPCIR_R EQU X'02'                    * PCI & no new buffer
DALPCIR_N EQU X'08'                    * No PCI
DALPCIR_A EQU X'20'                    * PCI & new buffer
DALPCIR_X EQU X'80'                    * PCI & new buffer, 1st buffer
*                                      *  remains allocated
*
DALPCIS_R EQU X'01'                    * PCI & no new buffer
DALPCIS_N EQU X'04'                    * No PCI
DALPCIS_A EQU X'10'                    * PCI & new buffer
DALPCIS_X EQU X'40'                    * PCI & new buffer, 1st buffer
*                                      *  remains allocated
*
DALPRTSP_0 EQU X'01'                   * No spacing
DALPRTSP_1 EQU X'09'                   * 1-line spacing
DALPRTSP_2 EQU X'11'                   * 2-line spacing
DALPRTSP_3 EQU X'19'                   * 3-line spacing
*
* Add required RECFM-values
DALRECFM_M EQU X'02'                   * Machine code printer control
DALRECFM_R EQU X'02'                   * Complete QTAM record
DALRECFM_A EQU X'04'                   * ASA printer control
DALRECFM_G EQU X'04'                   * Complete QTAM message
DALRECFM_S EQU X'08'                   * Standard fixed records or
*                                      *  spanned variable records or
*                                      *  segment of QTAM message
DALRECFM_B EQU X'10'                   * Blocked
DALRECFM_D EQU X'20'                   * Variable ASCII
DALRECFM_T EQU X'20'                   * Track overflow
DALRECFM_V EQU X'40'                   * Variable records
DALRECFM_F EQU X'80'                   * Fixed records
DALRECFM_U EQU X'C0'                   * Undiefined
*
DALSTACK_1 EQU X'01'                   * Bin 1
DALSTACK_2 EQU X'02'                   * Bin 2
*
DALTRTCH_NOCOMPACT EQU X'04'           * Non-compaction mode
DALTRTCH_COMPACT   EQU X'08'           * Compaction mode
DALTRTCH_C         EQU X'13'           * Data conversion
DALTRTCH_E         EQU X'23'           * Even parity
DALTRTCH_ET        EQU X'2B'           * Even parity + BCD/EBCDIC xlate
DALTRTCH_T         EQU X'3B'           * BCD/EBCDIC translation
*
DALFUNC_W     EQU X'10'                * Interpret codes as follows:
DALFUNC_WT    EQU X'12'                * D=data protection for punch
DALFUNC_WX    EQU X'14'                *        data set
DALFUNC_WXT   EQU X'16'                * I=interpret punch data set
DALFUNC_P     EQU X'20'                * P=punch
DALFUNC_PW    EQU X'30'                * R=read
DALFUNC_PWX   EQU X'34'                * T=two-line printer
DALFUNC_PWXT  EQU X'36'                * W=print
DALFUNC_R     EQU X'40'                * X=printer
DALFUNC_RW    EQU X'50'                *
DALFUNC_RWT   EQU X'52'                *
DALFUNC_RWX   EQU X'54'                *
DALFUNC_RWXT  EQU X'56'                *
DALFUNC_RP    EQU X'60'                *
DALFUNC_RPD   EQU X'68'                *
DALFUNC_RPW   EQU X'70'                *
DALFUNC_RPWX  EQU X'74'                *
DALFUNC_RPWXT EQU X'76'                *
DALFUNC_RPWD  EQU X'78'                *
DALFUNC_I     EQU X'80'                *
*
DALRTORG_UNK  EQU X'0000'              * Could not determine DSORG
DALRTORG_TR   EQU X'0004'              * TCAM 3705
DALRTORG_VSAM EQU X'0008'              * VSAM
DALRTORG_TQ   EQU X'0020'              * TCAM message queue
DALRTORG_TX   EQU X'0040'              * TCAM line group
DALRTORG_GS   EQU X'0080'              * Graphics
DALRTORG_PO   EQU X'0200'              * Partitioned
DALRTORG_POU  EQU X'0300'              * Partitioned Unmovable
DALRTORG_MQ   EQU X'0400'              * Government of telecom msg xfer
DALRTORG_CQ   EQU X'0800'              * Direct Access Message Queue
DALRTORG_CX   EQU X'1000'              * Communication line group
DALRTORG_DA   EQU X'2000'              * Direct Access
DALRTORG_DAU  EQU X'2100'              * Direct Access Unmovable
DALRTORG_PS   EQU X'4000'              * Physical Sequential
DALRTORG_PSU  EQU X'4100'              * Physical Sequential Unmovable
DALRTORG_IS   EQU X'8000'              * Indexed Sequential
DALRTORG_ISU  EQU X'8100'              * Indexed Sequential Unmovable
*
DALINCHG_CST     EQU X'00'             * Cartridge System Tape (any)
DALINCHG_CST18   EQU X'00'             * Cartridge System Tape 18-track
DALINCHG_CST36   EQU X'00'             * Cartridge System Tape 36-track
DALINCHG_ECCST36 EQU X'00'             * Enhanced Capacity CST 36-track
DALINCHG_HPCT128 EQU X'00'             * High Performance Cartridge
*                                      *  Tape 128-track
*
DUNOVDSP_UNCATLG EQU X'01'             * Uncatalog
DUNOVDSP_CATLG   EQU X'02'             * Catalog
DUNOVDSP_DELETE  EQU X'04'             * Delete
DUNOVDSP_KEEP    EQU X'08'             * Keep
*
DUNSPIN_IMMED EQU X'80'                * Print on deallocation
DUNSPIN_EOJ   EQU X'40'                * Print at end-of-job
*
DUNOVPDS_DELETE EQU X'04'              * Delete
DUNOVPDS_KEEP   EQU X'08'              * Keep
*
DDNRTDUM_YES EQU X'80'                 * Dataset is a Dummy dataset
DDNRTDUM_NO  EQU X'00'                 * Dataset is not a Dummy dataset
*
DINRTSTA_OLD EQU X'01'                 * OLD
DINRTSTA_MOD EQU X'02'                 * MOD
DINRTSTA_NEW EQU X'04'                 * NEW
DINRTSTA_SHR EQU X'08'                 * SHR
*
DINRTNDP_UNCATLG EQU X'01'             * Uncatalog
DINRTNDP_CATLG   EQU X'02'             * Catalog
DINRTNDP_DELETE  EQU X'04'             * Delete
DINRTNDP_KEEP    EQU X'08'             * Keep
DINRTNDP_PASS    EQU X'10'             * Pass
*
DINRTCDP_UNDEF   EQU X'00'             * Undefined
DINRTCDP_UNCATLG EQU X'01'             * Uncatalog
DINRTCDP_CATLG   EQU X'02'             * Catalog
DINRTCDP_DELETE  EQU X'04'             * Delete
DINRTCDP_KEEP    EQU X'08'             * Keep
DINRTCDP_PASS    EQU X'10'             * Pass
*
DINRTORG_UNK  EQU X'0000'              * Could not determine DSORG
DINRTORG_TR   EQU X'0004'              * TCAM 3705
DINRTORG_VSAM EQU X'0008'              * VSAM
DINRTORG_TQ   EQU X'0020'              * TCAM message queue
DINRTORG_TX   EQU X'0040'              * TCAM line group
DINRTORG_GS   EQU X'0080'              * Graphics
DINRTORG_PO   EQU X'0200'              * Partitioned
DINRTORG_POU  EQU X'0300'              * Partitioned Unmovable
DINRTORG_MQ   EQU X'0400'              * Government of telecom msg xfer
DINRTORG_CQ   EQU X'0800'              * Direct Access Message Queue
DINRTORG_CX   EQU X'1000'              * Communication line group
DINRTORG_DA   EQU X'2000'              * Direct Access
DINRTORG_DAU  EQU X'2100'              * Direct Access Unmovable
DINRTORG_PS   EQU X'4000'              * Physical Sequential
DINRTORG_PSU  EQU X'4100'              * Physical Sequential Unmovable
DINRTORG_IS   EQU X'8000'              * Indexed Sequential
DINRTORG_ISU  EQU X'8100'              * Indexed Sequential Unmovable
*
DINRTATT_PCON  EQU X'80'               * Permanently concatenated
DINRTATT_INUSE EQU X'40'               * In use
DINRTATT_PALL  EQU X'20'               * Permanently allocated
DINRTATT_CONV  EQU X'10'               * Convertible
DINRTATT_DYN   EQU X'08'               * Dynamically allocated
*
DINRTLST_LAST  EQU X'80'               * Last relative entry
DINRTLST_NLAST EQU X'00'               * Not last relative entry
*
DINRTTYP_DUMMY EQU X'80'               * Dummy data set
DINRTTYP_TERM  EQU X'40'               * Terminal data set
DINRTTYP_IN    EQU X'20'               * SYSIN
DINRTTYP_OUT   EQU X'10'               * SYSOUT
DINRTTYP_OTHER EQU X'00'               * Other
*
DINRRECO_KSDS EQU X'80'                * KSDS
DINRRECO_ESDS EQU X'40'                * ESDS
DINRRECO_RRDS EQU X'20'                * RRDS
DINRRECO_LDS  EQU X'10'                * LDS
*
DINRAVGR_U EQU X'80'                   * In record units
DINRAVGR_K EQU X'40'                   * In units of 1,000 records
DINRAVGR_M EQU X'20'                   * In units of 1,000,000 records
*
DINRDSNT_PDSE EQU X'80'                * PDSE data set
DINRDSNT_PDS  EQU X'40'                * PDS data set
DINRDSNT_PIPE EQU X'20'                * PIPE data set
DINRDSNT_HFS  EQU X'10'                * HFS data set
*
DINSPIN_IMMED EQU X'80'                * Print on deallocation
DINSPIN_EOJ   EQU X'40'                * Print at end-of-job
*
DINPOPT_OCREAT    EQU X'00000080'      * HFS data set open options
DINPOPT_OEXCL     EQU X'00000040'      *
DINPOPT_ONOCTTY   EQU X'00000020'      *
DINPOPT_OTRUNC    EQU X'00000010'      *
DINPOPT_OAPPEND   EQU X'00000008'      *
DINPOPT_ONONBLOCK EQU X'00000004'      *
DINPOPT_ORDWR     EQU X'00000003'      *
DINPOPT_ORDONLY   EQU X'00000002'      *
DINPOPT_OWRONLY   EQU X'00000001'      *
*
DINPMDE_SISUID EQU X'00000800'         * HFS data set access attributes
DINPMDE_SISGID EQU X'00000400'         *
DINPMDE_SIRUSR EQU X'00000100'         *
DINPMDE_SIWUSR EQU X'00000080'         *
DINPMDE_SIXUSR EQU X'00000040'         *
DINPMDE_SIRWXU EQU X'000001C0'         *
DINPMDE_SIRGRP EQU X'00000020'         *
DINPMDE_SIWGRP EQU X'00000010'         *
DINPMDE_SIXGRP EQU X'00000008'         *
DINPMDE_SIRWXG EQU X'00000038'         *
DINPMDE_SIROTH EQU X'00000004'         *
DINPMDE_SIWOTH EQU X'00000002'         *
DINPMDE_SIXOTH EQU X'00000001'         *
DINPMDE_SIRWXO EQU X'00000007'         *
*
DINPNDS_DELETE EQU X'04'               * HFS normal disp: DELETE
DINPNDS_KEEP   EQU X'08'               * HFS normal disp: KEEP
*
DINPCDS_DELETE EQU X'04'               * HFS cond.  disp: DELETE
DINPCDS_KEEP   EQU X'08'               * HFS cond.  disp: KEEP
*
DINFDAT_BIN EQU X'80'                  * Binary HFS file
DINFDAT_TXT EQU X'40'                  * Text HFS file
*
.*
.* EMFUNCT - Function indicator flags
EMPUTLIN EQUOVR ,,b,EMFUNCT
EMWTP    EQUOVR ,,b,EMFUNCT
EMRETURN EQUOVR ,,b,EMFUNCT
EMKEEP   EQUOVR ,,b,EMFUNCT
.*
         MNOTE *,'Including IEFZB476 mapping macro'
         IEFZB476 EMDSEC1=YES,         * Generate DSECT statement 1    *
               EMDSEC2=YES             * Generate DSECT statement 2
         EQUOVR *END
*
EMDSECT1 DSECT ,                       *
         ORG   ,                       *
EMDSECT1_LEN EQU *-EMDSECT1            *
*
EMDSECT2 DSECT ,                       *
         ORG   ,                       *
EMDSECT2_LEN EQU *-EMDSECT2            *
*
EMDSECT3 DSECT ,                       *
         ORG   ,                       *
EMDSECT3_LEN EQU *-EMDSECT3            *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPTAXE  0100-20096-20096-0111-00123-00123-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the TSO Terminal Attention eXit Element
.*
&LABEL   MAPTAXE &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPTAXE                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPTAXE        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'TAXE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPTAXE).MEND
&BXA_MAC_MAPTAXE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_TAXE
&BXA_CB_TAXE SETC 'TAXE'
.*
.* TAXEEXIT - PTR TO USER ATTENTION EXIT RTN
TAXEEXM  EQUOVR ,,b,TAXEEXIT
.*
.* TAXESTAT - STATUS OF PROGRAM ISSUING STAX
TAXEFKEY EQUOVR ,,b,TAXESTAT
TAXEFMOD EQUOVR ,,b,TAXESTAT
TAXEFREQ EQUOVR ,,b,TAXESTAT
TAXERESM EQUOVR ,,b,TAXESTAT
TAXESCHD EQUOVR ,,b,TAXESTAT
TAXEATTN EQUOVR ,,b,TAXESTAT
TAXECLST EQUOVR ,,b,TAXESTAT
TAXEIGNI EQUOVR ,,b,TAXESTAT
.*
.* TAXEST2 - SECOND STATUS BYTE
TAXEIGNC EQUOVR ,,b,TAXEST2
TAXETPLV EQUOVR ,,b,TAXEST2
.*
         MNOTE *,'Including IKJTAXE mapping macro'
         IKJTAXE ,
         EQUOVR *END
*
TAXE     DSECT ,                       * Resume TAXE DSECT
         ORG   ,
TAXE_LEN EQU   *-TAXE                  * Length of TAXE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPTCB   0100-20096-20096-0111-00394-00394-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Task Control Block
.*
&LABEL   MAPTCB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPTCB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPTCB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'TCB').EMBED
         AIF   ('&CB' EQ 'TCBFIX').EMBED
         AIF   ('&CB' EQ 'TCBXTNT2').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPTCB).MEND
&BXA_MAC_MAPTCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_TCB
         GBLC  &BXA_CB_TCBFIX
         GBLC  &BXA_CB_TCBXTNT2
&BXA_CB_TCB SETC 'TCB'
&BXA_CB_TCBFIX SETC 'TCB'
&BXA_CB_TCBXTNT2 SETC 'TCB'
.*
.* TCBPMASK - SPIE BITS
.* TCBPM    EQUOVR ,,b,TCBPMASK        * Last seen in OS/390 V2R6
.*
.* TCBCMPF - INDICATOR FLAGS
TCBCREQ  EQUOVR ,,b,TCBCMPF
TCBCSTEP EQUOVR ,,b,TCBCMPF
TCBCPP   EQUOVR ,,b,TCBCMPF
TCBDMPO  EQUOVR ,,b,TCBCMPF
TCBSTCC  EQUOVR ,,b,TCBCMPF
TCBNOCC  EQUOVR ,,b,TCBCMPF
TCBCDBL  EQUOVR ,,b,TCBCMPF
TCBCASID EQUOVR ,,b,TCBCMPF
TCBCWTO  EQUOVR ,,b,TCBCMPF
TCBRV316 EQUOVR ,,b,TCBCMPF
TCBCIND  EQUOVR ,,b,TCBCMPF
TCBCMSG  EQUOVR ,,b,TCBCMPF
.*
.* TCBABF - FLAG BYTE
TCBMOD91 EQUOVR ,,b,TCBABF
TCBNOCHK EQUOVR ,,b,TCBABF
TCBGRPH  EQUOVR ,,b,TCBABF
TCBTCPP  EQUOVR ,,b,TCBABF
TCBTCP   EQUOVR ,,b,TCBABF
TCBOLTEP EQUOVR ,,b,TCBABF
.*
.* TCBPKF - STORAGE PROTECTION KEY FOR THIS TASK.
TCBFLAG  EQUOVR ,,b,TCBPKF
TCBZERO  EQUOVR ,,b,TCBPKF
.*
.* TCBFLGS1 - FIRST TCB FLAG BYTE
TCBFA    EQUOVR ,,b,TCBFLGS1
TCBFE    EQUOVR ,,b,TCBFLGS1
TCBFERA  EQUOVR ,,b,TCBFLGS1
TCBNONPR EQUOVR ,,b,TCBFLGS1
TCBPDUMP EQUOVR ,,b,TCBFLGS1
TCBFT    EQUOVR ,,b,TCBFLGS1
TCBFS    EQUOVR ,,b,TCBFLGS1
TCBFX    EQUOVR ,,b,TCBFLGS1
.*
.* TCBFLGS2 - SECOND FLAG BYTE
TCBFOINP EQUOVR ,,b,TCBFLGS2
TCBFSTI  EQUOVR ,,b,TCBFLGS2
TCBFABOP EQUOVR ,,b,TCBFLGS2
TCBFSMC  EQUOVR ,,b,TCBFLGS2
TCBFJMC  EQUOVR ,,b,TCBFLGS2
TCBFDSOP EQUOVR ,,b,TCBFLGS2
TCBFETXR EQUOVR ,,b,TCBFLGS2
TCBFTS   EQUOVR ,,b,TCBFLGS2
.*
.* TCBFLGS3 - THIRD FLAG BYTE.
TCBFSM   EQUOVR ,,b,TCBFLGS3
TCBRT1S  EQUOVR ,,b,TCBFLGS3
TCBABTRM EQUOVR ,,b,TCBFLGS3
TCBFXSET EQUOVR ,,b,TCBFLGS3
TCBENQRM EQUOVR ,,b,TCBFLGS3
TCBDWSTA EQUOVR ,,b,TCBFLGS3
.*
.* TCBFLGS4 - NONDISPATCHABILITY FLAGS
TCBNDUMP EQUOVR ,,b,TCBFLGS4
TCBSER   EQUOVR ,,b,TCBFLGS4
TCBRQENA EQUOVR ,,b,TCBFLGS4
TCBHNDSP EQUOVR ,,b,TCBFLGS4
TCBUXNDV EQUOVR ,,b,TCBFLGS4
TCBRBWF  EQUOVR ,,b,TCBFLGS4
TCBONDSP EQUOVR ,,b,TCBFLGS4
.*
.* TCBFLGS5 - MORE NONDISPATCHABILITY FLAGS.
TCBFC    EQUOVR ,,b,TCBFLGS5
TCBABWF  EQUOVR ,,b,TCBFLGS5
TCBUXNDF EQUOVR ,,b,TCBFLGS5
TCBPAGE  EQUOVR ,,b,TCBFLGS5
TCBANDSP EQUOVR ,,b,TCBFLGS5
TCBSYS   EQUOVR ,,b,TCBFLGS5
TCBSTP   EQUOVR ,,b,TCBFLGS5
TCBFCD1  EQUOVR ,,b,TCBFLGS5
TCBPNDSP EQUOVR ,,b,TCBFLGS5
.*
.* TCBPURGE - HIGH ORDER BYTE
TCBJPQF  EQUOVR ,,b,TCBPURGE
.*
.* TCBTME - ADDRESS OF THE TIMER QUEUE ELEMENT (TQE)
TCBTQET  EQUOVR ,,b,TCBTME
.*
.* TCBTSFLG - TIME SHARING FLAGS
TCBTSTSK EQUOVR ,,b,TCBTSFLG
TCBSTPPR EQUOVR ,,b,TCBTSFLG
TCBATT   EQUOVR ,,b,TCBTSFLG
TCBTIOTG EQUOVR ,,b,TCBTSFLG
TCBSMCP  EQUOVR ,,b,TCBTSFLG
TCBDYDSP EQUOVR ,,b,TCBTSFLG
TCBCPUBN EQUOVR ,,b,TCBTSFLG
.*
.* TCBNSTAE - FLAGS INTERNAL TO STAE ROUTINE
TCBSTABE EQUOVR ,,b,TCBNSTAE
TCBQUIES EQUOVR ,,b,TCBNSTAE
TCB33E   EQUOVR ,,b,TCBNSTAE
TCBPPSUP EQUOVR ,,b,TCBNSTAE
TCBHALT  EQUOVR ,,b,TCBNSTAE
TCBSYNCH EQUOVR ,,b,TCBNSTAE
TCBSTCUR EQUOVR ,,b,TCBNSTAE
.*
.* TCBTCTGF - FLAG BYTE FOR TIMING CONTROL TABLE
TCBSMFGF EQUOVR ,,b,TCBTCTGF
.*
.* TCBNDSP1 - BYTE 1
TCBDARTN EQUOVR ,,b,TCBNDSP1
TNONDISP EQUOVR ,,b,TCBNDSP1
TCBDARPN EQUOVR ,,b,TCBNDSP1
PNONDISP EQUOVR ,,b,TCBNDSP1
TCBRSTND EQUOVR ,,b,TCBNDSP1
TCBRSPND EQUOVR ,,b,TCBNDSP1
TCBDDRND EQUOVR ,,b,TCBNDSP1
TCBTPSP  EQUOVR ,,b,TCBNDSP1
TCBPIEND EQUOVR ,,b,TCBNDSP1
TCBABTIN EQUOVR ,,b,TCBNDSP1
.*
.* TCBNDSP2 - BYTE 2
TCBABD   EQUOVR ,,b,TCBNDSP2
TCBSTPP  EQUOVR ,,b,TCBNDSP2
TCBNDSVC EQUOVR ,,b,TCBNDSP2
TCBNDTS  EQUOVR ,,b,TCBNDSP2
TCBIWAIT EQUOVR ,,b,TCBNDSP2
TCBOWAIT EQUOVR ,,b,TCBNDSP2
TCBDSS   EQUOVR ,,b,TCBNDSP2
TCBABE   EQUOVR ,,b,TCBNDSP2
.*
.* TCBNDSP3 - BYTE 3
TCBLJSND EQUOVR ,,b,TCBNDSP3
TCBNDNYI EQUOVR ,,b,TCBNDSP3
TCBSRBND EQUOVR ,,b,TCBNDSP3
TCBSLPER EQUOVR ,,b,TCBNDSP3
TCBS3MR  EQUOVR ,,b,TCBNDSP3
TCBAREQ  EQUOVR ,,b,TCBNDSP3
TCBNDSMF EQUOVR ,,b,TCBNDSP3
TCBNDINT EQUOVR ,,b,TCBNDSP3
.*
.* TCBRECDE - ABEND RECURSION BYTE
TCBREC   EQUOVR ,,b,TCBRECDE
TCBOPEN  EQUOVR ,,v,TCBRECDE
TCBCLOSD EQUOVR ,,v,TCBRECDE
TCBCLOSE EQUOVR ,,v,TCBRECDE
TCBCLOSF EQUOVR ,,v,TCBRECDE
TCBGREC  EQUOVR ,,v,TCBRECDE
TCBADUMP EQUOVR ,,v,TCBRECDE
TCBPTAXE EQUOVR ,,v,TCBRECDE
TCBMESG  EQUOVR ,,v,TCBRECDE
TCBDYNAM EQUOVR ,,v,TCBRECDE
TCBDAMSG EQUOVR ,,v,TCBRECDE
TCBQTIP  EQUOVR ,,v,TCBRECDE
TCBTCAMP EQUOVR ,,v,TCBRECDE
TCBINDRC EQUOVR ,,v,TCBRECDE
TCBSAVCD EQUOVR ,,v,TCBRECDE
TCBTYP1W EQUOVR ,,v,TCBRECDE
TCBWTPSE EQUOVR ,,v,TCBRECDE
TCBVTAM1 EQUOVR ,,v,TCBRECDE
TCBVTAM2 EQUOVR ,,v,TCBRECDE
TCBVTAM3 EQUOVR ,,v,TCBRECDE
TCBVTAM4 EQUOVR ,,v,TCBRECDE
TCBNOSTA EQUOVR ,,v,TCBRECDE
TCBSTRET EQUOVR ,,v,TCBRECDE
TCBCONVR EQUOVR ,,v,TCBRECDE
TCBDARET EQUOVR ,,v,TCBRECDE
TCBTYP1R EQUOVR ,,v,TCBRECDE
TCBNEWRB EQUOVR ,,v,TCBRECDE
TCBMCCNS EQUOVR ,,v,TCBRECDE
.*
.* TCBFLGS6 - TASK-RELATED FLAGS
TCBRV    EQUOVR ,,b,TCBFLGS6
TCBPIE17 EQUOVR ,,b,TCBFLGS6
TCBCPU   EQUOVR ,,b,TCBFLGS6
TCBSPVLK EQUOVR ,,b,TCBFLGS6
TCBMIGR  EQUOVR ,,b,TCBFLGS6
TCBAPG   EQUOVR ,,b,TCBFLGS6
TCBNTJS  EQUOVR ,,b,TCBFLGS6
.*
.* TCBFLGS7 - TASK-RELATED FLAGS
TCBGPECB EQUOVR ,,b,TCBFLGS7
TCBSVCSP EQUOVR ,,b,TCBFLGS7
TCBSTACK EQUOVR ,,b,TCBFLGS7
TCBSVCS  EQUOVR ,,b,TCBFLGS7
TCBRSTSK EQUOVR ,,b,TCBFLGS7
TCBADMP  EQUOVR ,,b,TCBFLGS7
TCBGTOFM EQUOVR ,,b,TCBFLGS7
.*
.* TCBDAR - DAMAGE ASSESSMENT ROUTINE (DAR) FLAGS
TCBDARP  EQUOVR ,,b,TCBDAR
TCBDARS  EQUOVR ,,b,TCBDAR
TCBDARD  EQUOVR ,,b,TCBDAR
TCBDARC  EQUOVR ,,b,TCBDAR
TCBDARMC EQUOVR ,,b,TCBDAR
TCBDARO  EQUOVR ,,b,TCBDAR
TCBDARWT EQUOVR ,,b,TCBDAR
TCBDARMS EQUOVR ,,b,TCBDAR
TCBEXSVC EQUOVR ,,b,TCBDAR
.*
.* TCBNSSP - NORMAL STACK SAVE AREA POINTER.
TCBNSSQA EQUOVR ,,b,TCBNSSP
.*
.* TCBTID - TASK ID NUMBER
TCBTID   DSOVR HL1
TCBPAGID EQUOVR ,,v,TCBTID
TCBSYERR EQUOVR ,,v,TCBTID
TCBCOMM  EQUOVR ,,v,TCBTID
TCBIORMS EQUOVR ,,v,TCBTID
TCBMASTR EQUOVR ,,v,TCBTID
TCBJES   EQUOVR ,,v,TCBTID
TCBDSSID EQUOVR ,,v,TCBTID
TCBLOGID EQUOVR ,,v,TCBTID
.*
.* TCBFLGS8 - GUPI FLAG BYTE FIELD
TCBDYING EQUOVR ,,b,TCBFLGS8
.*
.* TCBXSCT1 - FLAG BYTE
TCBACTIV EQUOVR ,,b,TCBXSCT1
TCBS3A   EQUOVR ,,b,TCBXSCT1
TCBLLREQ EQUOVR ,,b,TCBXSCT1
TCBTDORM EQUOVR ,,b,TCBXSCT1
.*
.* TCBXSCT2 - FLAG BYTE
TCBCMLF  EQUOVR ,,b,TCBXSCT2
TCBLLNEW EQUOVR ,,b,TCBXSCT2
.*
.* TCBESTRM - ESTAE TERM OPTIONS
TCBETERM EQUOVR ,,b,TCBESTRM
TCBSTAFX EQUOVR ,,b,TCBESTRM
.*
.* TCBFBYT1 - FLAG BYTE.
TCBEOTFM EQUOVR ,,b,TCBFBYT1
TCBRTM1E EQUOVR ,,b,TCBFBYT1
TCBNDIOS EQUOVR ,,b,TCBFBYT1
TCBPGNLY EQUOVR ,,b,TCBFBYT1
TCBRTM2  EQUOVR ,,b,TCBFBYT1
TCBEOT   EQUOVR ,,b,TCBFBYT1
TCBSATTN EQUOVR ,,b,TCBFBYT1
TCBLLH   EQUOVR ,,b,TCBFBYT1
.*
.* TCBFBYT2 - FLAG BYTE.
TCBCNCB  EQUOVR ,,b,TCBFBYT2
TCBFMW   EQUOVR ,,b,TCBFBYT2
TCBFDW   EQUOVR ,,b,TCBFBYT2
TCBFPRAP EQUOVR ,,b,TCBFBYT2
TCBRT1NR EQUOVR ,,b,TCBFBYT2
TCBECBNV EQUOVR ,,b,TCBFBYT2
TCBSSPC  EQUOVR ,,b,TCBFBYT2
TCBRTM1C EQUOVR ,,b,TCBFBYT2
.*
.* TCBFBYT3 - FLAG BYTE
TCBEXP   EQUOVR ,,b,TCBFBYT3
TCBNCTL  EQUOVR ,,b,TCBFBYT3
TCBRTMDE EQUOVR ,,b,TCBFBYT3
.*
.* TCBFBYT4 - FLAG BYTE.
TCBPMC   EQUOVR ,,b,TCBFBYT4
TCBNOJLB EQUOVR ,,b,TCBFBYT4
.*
.* TCBRBYT1 - RTM Flag byte
TCBPVICT EQUOVR ,,b,TCBRBYT1
TCBPKING EQUOVR ,,b,TCBRBYT1
TCBPCAND EQUOVR ,,b,TCBRBYT1
TCBPTOP  EQUOVR ,,b,TCBRBYT1
.*
.* TCBLEVEL - LEVEL NUMBER OF TCB
TCBVS02A EQUOVR ,,v,TCBLEVEL
TCBVS02B EQUOVR ,,v,TCBLEVEL
TCBVS03  EQUOVR ,,v,TCBLEVEL
TCBVERS  EQUOVR ,,v,TCBLEVEL
.*
.* TCBTFLG - GTF FLAG BYTE
TCBASYNC EQUOVR ,,b,TCBTFLG
TCBERRTN EQUOVR ,,b,TCBTFLG
TCBDSPIT EQUOVR ,,b,TCBTFLG
.*
.* TCBPERCP - POINTER TO A QUEUE OF SPIS.
TCBRCVRY EQUOVR ,,b,TCBPERCP
.*
         MNOTE *,'Including IKJTCB mapping macro'
         IKJTCB DSECT=YES,             * Generate TCB                  *
               LIST=YES                * with unchanged PRINT option
         EQUOVR *END
         DSOVR *END
*
TCBFIX   DSECT ,                       * Reset to TCB DSECT
         ORG
TCBFIX_LEN EQU TCB-TCBFIX              * Length of TCB prefix
TCB_LEN  EQU *-TCB                     * Length of TCB proper
*
TCBXTNT2 DSECT ,                       * Reset to TCB extension
         ORG
TCBXTNT2_LEN EQU *-TCBXTNT2            * Length of TCB extension
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPTCCW  0100-20096-20096-0111-00132-00132-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the EXCP Translation Control Block
.*
&LABEL   MAPTCCW &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPTCCW                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPTCCW        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'TCCW').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPTCCW).MEND
&BXA_MAC_MAPTCCW SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_TCCW
&BXA_CB_TCCW SETC 'TCCW'
.*
.* TCCWOPTN - CCW Translation option byte and TCCW error return codes
TCCWXLAT EQUOVR ,,v,TCCWOPTN
TCCWCSWX EQUOVR ,,v,TCCWOPTN
TCCWUNFX EQUOVR ,,v,TCCWOPTN
TCCWGTMN EQUOVR ,,v,TCCWOPTN
TCCWSATR EQUOVR ,,v,TCCWOPTN
TCCWPGER EQUOVR ,,v,TCCWOPTN
TCCWTRER EQUOVR ,,v,TCCWOPTN
TCCWIDAE EQUOVR ,,v,TCCWOPTN
TCCWPRIV EQUOVR ,,v,TCCWOPTN
TCCWERRC EQUOVR ,,v,TCCWOPTN
TCCWVMER EQUOVR ,,v,TCCWOPTN
TCCWVLER EQUOVR ,,v,TCCWOPTN
TCCWERRF EQUOVR ,,v,TCCWOPTN
.*
.* TCCWMODB - Translator flag byte
TCCWFCHN EQUOVR ,,b,TCCWMODB
TCCWVLCK EQUOVR ,,b,TCCWMODB
TCCWLBLK EQUOVR ,,b,TCCWMODB
TCCWNVAL EQUOVR ,,b,TCCWMODB
.* TCCWRSV5 EQUOVR ,,b,TCCWMODB        * Last seen in OS/390 V2R6
TCCWIDAX EQUOVR ,,b,TCCWMODB           * First seen in z/OS V1R4
TCCWPC10 EQUOVR ,,b,TCCWMODB
TCCWPGCK EQUOVR ,,b,TCCWMODB
TCCWVIDA EQUOVR ,,b,TCCWMODB
.*
         MNOTE *,'Including IECDTCCW mapping macro'
         IECDTCCW ,
         EQUOVR *END
*
TCCW     DSECT ,                       * Resume TCCW DSECT
         ORG
TCCW_LEN EQU   *-TCCW                  * Length of TCCW
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPTCT   0100-20096-20096-0111-00159-00159-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the SMF Timing Control Table
.*
&LABEL   MAPTCT &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPTCT                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPTCT         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'TCT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPTCT).MEND
&BXA_MAC_MAPTCT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_TCT
&BXA_CB_TCT SETC 'TCT'
.*
.* TCTSW - TCT SWITCHES
TCTJSTI  EQUOVR ,,b,TCTSW
TCTIEX   EQUOVR ,,b,TCTSW
TCTISK30 EQUOVR ,,b,TCTSW
TCTISK32 EQUOVR ,,b,TCTSW
TCTIABD  EQUOVR ,,b,TCTSW
TCTSTPRN EQUOVR ,,b,TCTSW
TCTACTRT EQUOVR ,,b,TCTSW
TCTDCOPN EQUOVR ,,b,TCTSW
.*
.* TCTMSCT - NUMBER OF TIMES I/O MEASUREMENTS TURNED OFF AT JOB START
TCTMSOFF EQUOVR ,,b,TCTMSCT
.*
.* TCTEFLGS - ETCTIOT FLAGS
TCTCOMP  EQUOVR ,,b,TCTEFLGS
.*
.* TCTTMRFL - PREVIOUS INTERVAL TIMER BIT FLAGS
TCTCTF   EQUOVR ,,b,TCTTMRFL
TCTCSF   EQUOVR ,,b,TCTTMRFL
TCTVUF   EQUOVR ,,b,TCTTMRFL
TCTVAF   EQUOVR ,,b,TCTTMRFL
TCTISF   EQUOVR ,,b,TCTTMRFL
TCTICF   EQUOVR ,,b,TCTTMRFL
TCTIVF   EQUOVR ,,b,TCTTMRFL
TCTIAF   EQUOVR ,,b,TCTTMRFL
.*
TCTIIF   EQUOVR ,,b,TCTTMRFL+1
TCTHPF   EQUOVR ,,b,TCTTMRFL+1
TCTRCF   EQUOVR ,,b,TCTTMRFL+1
TCTASF   EQUOVR ,,b,TCTTMRFL+1
TCTENF   EQUOVR ,,b,TCTTMRFL+1
TCTDEF   EQUOVR ,,b,TCTTMRFL+1
.*
.* TCTFLAGS - TCT Flags
TCTTCT2  EQUOVR ,,b,TCTFLAGS
.*
.* TCTFLGS - FLAG BYTE
TCTDDIND EQUOVR ,,b,TCTFLGS
TCTVAMDS EQUOVR ,,b,TCTFLGS
TCTNOCNT EQUOVR ,,b,TCTFLGS
TCTRSV22 EQUOVR ,,b,TCTFLGS
TCTRSV23 EQUOVR ,,b,TCTFLGS
TCTRSV24 EQUOVR ,,b,TCTFLGS
TCTRSV25 EQUOVR ,,b,TCTFLGS
TCTRSV26 EQUOVR ,,b,TCTFLGS
.*
.* TCTBLKSZ - BLOCK SIZE FOR THIS DD NAME
TCTCBSZ  EQUOVR ,,b,TCTBLKSZ
.*
.* ETCTNEXT - NEXT TOKEN
ETCTIUSE EQUOVR ,,b,ETCTNEXT
.*
         MNOTE *,'Including IEFTCT mapping macro'
         IEFTCT ,
         EQUOVR *END
*
SMFTCT   DSECT ,                       * Resume TCT DSECT
TCT      EQU   SMFTCT                  * Label for USINGs
         ORG
TCT_LEN  EQU   *-TCT                   * Length of TCT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPTIOT  0100-20096-20096-0111-00172-00172-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Task I/O Table
.*
&LABEL   MAPTIOT &DSECT=YES,           * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPTIOT                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPTIOT        * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'TIOENTRY').EMBED
         AIF   ('&CB' EQ 'TIOTHDR').EMBED
         AIF   ('&CB' EQ 'TIOTPOOL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPTIOT).MEND
&BXA_MAC_MAPTIOT SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_TIOENTRY
         GBLC  &BXA_CB_TIOTHDR
         GBLC  &BXA_CB_TIOTPOOL
&BXA_CB_TIOENTRY SETC 'TIOT'
&BXA_CB_TIOTHDR SETC 'TIOT'
&BXA_CB_TIOTPOOL SETC 'TIOT'
.*
.* TIOELNGH - LENGTH, IN BYTES, OF THIS ENTRY
TIOELNGH DSOVR AL1
.*
.* TIOESTTA - STATUS BYTE A
TIOSLTYP EQUOVR ,,b,TIOESTTA
TIOSPLTP EQUOVR ,,b,TIOESTTA
TIOSPLTS EQUOVR ,,b,TIOESTTA
TIOSJBLB EQUOVR ,,b,TIOESTTA
TIOSDADS EQUOVR ,,b,TIOESTTA
TIOSLABL EQUOVR ,,b,TIOESTTA
TIOSDSP1 EQUOVR ,,b,TIOESTTA
TIOSDSP2 EQUOVR ,,b,TIOESTTA
.*
.* TIOELINK - DURING ALLOCATION
TIOSYOUT EQUOVR ,,b,TIOELINK
TIOTRV01 EQUOVR ,,b,TIOELINK
TIOTTERM EQUOVR ,,b,TIOELINK
TIOEDYNM EQUOVR ,,b,TIOELINK
TIOEQNAM EQUOVR ,,b,TIOELINK
TIOESYIN EQUOVR ,,b,TIOELINK
TIOESYOT EQUOVR ,,b,TIOELINK
TIOESSDS EQUOVR ,,b,TIOELINK
TIOTREM  EQUOVR ,,b,TIOELINK
.*
.* TIOESTTC - STATUS BYTE C.
TIOSDKCR EQUOVR ,,b,TIOESTTC
TIOSDEFR EQUOVR ,,b,TIOESTTC
TIOSAFFP EQUOVR ,,b,TIOESTTC
TIOSAFFS EQUOVR ,,b,TIOESTTC
TIOSVOLP EQUOVR ,,b,TIOESTTC
TIOSVOLS EQUOVR ,,b,TIOESTTC
TIOSBALP EQUOVR ,,b,TIOESTTC
TIOSBALS EQUOVR ,,b,TIOESTTC
.*
.* TIOESTTB - STATUS BYTE B
TIOSUSED EQUOVR ,,b,TIOESTTB
TIOSREQD EQUOVR ,,b,TIOESTTB
TIOSPVIO EQUOVR ,,b,TIOESTTB
TIOSVLSR EQUOVR ,,b,TIOESTTB
TIOSSETU EQUOVR ,,b,TIOESTTB
TIOSMNTD EQUOVR ,,b,TIOESTTB
TIOSUNLD EQUOVR ,,b,TIOESTTB
TIOSVERF EQUOVR ,,b,TIOESTTB
.*
.* IEFTIOT1 does not generate a DSECT-statement
         MNOTE *,'Including IEFTIOT1 mapping macro'
TIOT     DSECT ,                       * Start of TIOT
         IEFTIOT1 ,                    *
         DSOVR  *END
         EQUOVR *END
*
* Notes:
* - TIOT DSECT contains several parts, that should have been coded as
*   separate DSECTs. Alas IBM has chosen not to.
* - TIOT header      : USING TIOT              24 bytes
* - TIOT entry       : USING TIOENTRY          Length in first byte
* - TIOT pool entry  : USING POOLSTAR          20 bytes
* - Last TIOT entry is marked by 4 hex zeroes in the first 4 bytes,
*   including the length byte
* - Concatenated data sets have a ddname only in the first TIOT entry,
*   all other entries contain blanks for their ddname
* - Bit TIOSLTYP in TIOESTTA is on, when a TIOT entry has been freed
*
         ORG
TIOT_LEN EQU   TIOENTRY-TIOT           * Length of TIOT
TIOE_LEN EQU   POOLSTAR-TIOENTRY       * Length of TIOT entry
TIOP_LEN EQU   *-POOLSTAR              * Length of TIOT pool entry
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPTQE   0100-20096-20096-0111-00133-00133-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Timer Queue Element
.*
&LABEL   MAPTQE &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPTQE                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPTQE         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'TQE').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPTQE).MEND
&BXA_MAC_MAPTQE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_TQE
&BXA_CB_TQE SETC 'TQE'
.*
.* TQEFLGS - TQE FLAG BYTE 1
TQEOFF   EQUOVR ,,b,TQEFLGS
TQETOD   EQUOVR ,,b,TQEFLGS
TQEGMT   EQUOVR ,,b,TQEFLGS
TQEWLIM  EQUOVR ,,b,TQEFLGS
TQEINCOM EQUOVR ,,b,TQEFLGS
TQEXITSP EQUOVR ,,b,TQEFLGS
TQETYPE  EQUOVR ,,b,TQEFLGS
.*
.* TQEFLGS2 - TQE FLAG BYTE 2
TQECOMP  EQUOVR ,,b,TQEFLGS2
TQEUSER  EQUOVR ,,b,TQEFLGS2
TQEETRSS EQUOVR ,,b,TQEFLGS2
TQEDUM   EQUOVR ,,b,TQEFLGS2
TQELM    EQUOVR ,,b,TQEFLGS2
TQEOPT   EQUOVR ,,b,TQEFLGS2
TQEMF1   EQUOVR ,,b,TQEFLGS2
TQEMIDN  EQUOVR ,,b,TQEFLGS2
.*
.* TQEEXIT - ADDRESS OF USER EXIT RTN
TQEXMODE EQUOVR ,,b,TQEEXIT
.*
.* TQEFLGS3 - TQE FLAG BYTE 3
TQEDIE   EQUOVR ,,b,TQEFLGS3
TQEAMODE EQUOVR ,,b,TQEFLGS3
TQEPURGE EQUOVR ,,b,TQEFLGS3
.*
         MNOTE *,'Including IHATQE mapping macro'
         IHATQE ,
         EQUOVR *END
*
TQE      DSECT ,                       * Resume TQE DSECT
         ORG
TQE_LEN  EQU   *-TQE                   * Length of TQE
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPUCB   0100-20096-20096-0111-00505-00505-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Unit Control Block
.*
&LABEL   MAPUCB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPUCB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPUCB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'UCB').EMBED
         AIF   ('&CB' EQ 'UCBOCR').EMBED
         AIF   ('&CB' EQ 'UCBPDCTA').EMBED
         AIF   ('&CB' EQ 'UCBUCS').EMBED
         AIF   ('&CB' EQ 'UCB3540X').EMBED
         AIF   ('&CB' EQ 'UCB3800X').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPUCB).MEND
&BXA_MAC_MAPUCB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_UCB
         GBLC  &BXA_CB_UCBOCR
         GBLC  &BXA_CB_UCBPDCTA
         GBLC  &BXA_CB_UCBUCS
         GBLC  &BXA_CB_UCB3540X
         GBLC  &BXA_CB_UCB3800X
&BXA_CB_UCB SETC 'UCB'
&BXA_CB_UCBOCR SETC 'UCB'
&BXA_CB_UCBPDCTA SETC 'UCB'
&BXA_CB_UCBUCS SETC 'UCB'
&BXA_CB_UCB3540X SETC 'UCB'
&BXA_CB_UCB3800X SETC 'UCB'
.*
.* UCBFL6 - Device features byte
UCBASUN  EQUOVR ,,b,UCBFL6
UCBMDISP EQUOVR ,,b,UCBFL6
UCBDBUF  EQUOVR ,,b,UCBFL6
UCBIDS   EQUOVR ,,b,UCBFL6
UCBSELFD EQUOVR ,,b,UCBFL6
UCBSMSMM EQUOVR ,,b,UCBFL6
UCBLERP  EQUOVR ,,b,UCBFL6
UCBIOT   EQUOVR ,,b,UCBFL6
.*
.* UCBATI - Index to the attention table (ANTAB)
UCBRSV04 EQUOVR ,,b,UCBATI
UCBRSV05 EQUOVR ,,b,UCBATI
UCBRSV06 EQUOVR ,,b,UCBATI
UCBRSV07 EQUOVR ,,b,UCBATI
UCBRSV08 EQUOVR ,,b,UCBATI
UCBRSV09 EQUOVR ,,b,UCBATI
UCBHALI  EQUOVR ,,b,UCBATI
UCBHPDV  EQUOVR ,,b,UCBATI
.*
.* UCBFLP1 - Flag byte
UCBNSRCH EQUOVR ,,b,UCBFLP1
UCBSHRUP EQUOVR ,,b,UCBFLP1
UCBRERP  EQUOVR ,,b,UCBFLP1
UCBINHIO EQUOVR ,,b,UCBFLP1
UCBSWAPF EQUOVR ,,b,UCBFLP1
UCBERLOG EQUOVR ,,b,UCBFLP1
UCBDYNPH EQUOVR ,,b,UCBFLP1
UCBRALOC EQUOVR ,,b,UCBFLP1
.*
.* UCBFL7 - Miscellaneous usage flags
UCBMASGN EQUOVR ,,b,UCBFL7
UCBSSPND EQUOVR ,,b,UCBFL7
UCBAUTOS EQUOVR ,,b,UCBFL7
UCBNOSEL EQUOVR ,,b,UCBFL7
.*
.* UCBCSFLG - Miscellaneous flags
UCBNCC3  EQUOVR ,,b,UCBCSFLG
.*
.* UCBJBNR  - Flag byte
UCBVRDEV EQUOVR ,,b,UCBJBNR
UCBJES3  EQUOVR ,,b,UCBJBNR
UCBDUC   EQUOVR ,,b,UCBJBNR
UCBJ3DV  EQUOVR ,,b,UCBJBNR
UCBOLDSM EQUOVR ,,b,UCBJBNR
UCBMMSGP EQUOVR ,,b,UCBJBNR
UCBDCONS EQUOVR ,,b,UCBJBNR
UCBMONT  EQUOVR ,,b,UCBJBNR
.*
.* UCBFL5 - Flags
UCBDCC   EQUOVR ,,b,UCBFL5
UCBAF    EQUOVR ,,b,UCBFL5
UCBAMV   EQUOVR ,,b,UCBFL5
UCBSMS   EQUOVR ,,b,UCBFL5
UCBVSDR  EQUOVR ,,b,UCBFL5
UCBENVRD EQUOVR ,,b,UCBFL5
UCBNALOC EQUOVR ,,b,UCBFL5
UCBALTCU EQUOVR ,,b,UCBFL5
UCBCUIR  EQUOVR ,,b,UCBFL5
.*
.* UCBID - UCB identification (FF)
UCBSTND  EQUOVR ,,v,UCBID
UCBIDCPY EQUOVR ,,v,UCBID
UCBGUCB  EQUOVR ,,v,UCBID
UCBST1   EQUOVR ,,v,UCBID
UCBST3   EQUOVR ,,v,UCBID
.*
.* UCBSTAT - Device status
UCBONLI  EQUOVR ,,b,UCBSTAT
UCBCHGS  EQUOVR ,,b,UCBSTAT
UCBRESV  EQUOVR ,,b,UCBSTAT
UCBUNLD  EQUOVR ,,b,UCBSTAT
UCBALOC  EQUOVR ,,b,UCBSTAT
UCBPRES  EQUOVR ,,b,UCBSTAT
UCBSYSR  EQUOVR ,,b,UCBSTAT
UCBDADI  EQUOVR ,,b,UCBSTAT
.*
.* UCBFLA - I/O supervisor flag byte A
UCBDEFER EQUOVR ,,b,UCBFLA
UCBNRY   EQUOVR ,,b,UCBFLA
UCBNOTRD EQUOVR ,,b,UCBFLA
UCBPERM  EQUOVR ,,b,UCBFLA
UCBPSNS  EQUOVR ,,b,UCBFLA
UCBSTRT  EQUOVR ,,b,UCBFLA
UCBHALT  EQUOVR ,,b,UCBFLA
UCBCLEAR EQUOVR ,,b,UCBFLA
UCBBOX   EQUOVR ,,b,UCBFLA
.*
.* UCBFLB - I/O supervisor flag byte B
UCBINCPT EQUOVR ,,b,UCBFLB
UCBNOPTH EQUOVR ,,b,UCBFLB
UCBNOCON EQUOVR ,,b,UCBFLB
UCBHILVL EQUOVR ,,b,UCBFLB
UCBHDET  EQUOVR ,,b,UCBFLB
UCBIOSN  EQUOVR ,,b,UCBFLB
.*
.* UCBWGT - Flags
UCBIN    EQUOVR ,,b,UCBWGT
UCBOUT   EQUOVR ,,b,UCBWGT
UCBPUB   EQUOVR ,,b,UCBWGT
UCBREW   EQUOVR ,,b,UCBWGT
UCBMTPXP EQUOVR ,,b,UCBWGT
UCBVORSN EQUOVR ,,b,UCBWGT
UCBVHRSN EQUOVR ,,b,UCBWGT
UCBVLRSN EQUOVR ,,b,UCBWGT
.*
.* UCBTBYT1 - Model bits
UCB1FEA0 EQUOVR ,,b,UCBTBYT1
UCB1FEA1 EQUOVR ,,b,UCBTBYT1
UCB1FEA2 EQUOVR ,,b,UCBTBYT1
UCB1FEA3 EQUOVR ,,b,UCBTBYT1
UCB1FEA4 EQUOVR ,,b,UCBTBYT1
UCB1FEA5 EQUOVR ,,b,UCBTBYT1
UCB1FEA6 EQUOVR ,,b,UCBTBYT1
UCB1FEA7 EQUOVR ,,b,UCBTBYT1
.*
.* UCBTBYT2 - Option flags
UCB2OPT0 EQUOVR ,,b,UCBTBYT2
UCB2OPT1 EQUOVR ,,b,UCBTBYT2
UCB2OPT2 EQUOVR ,,b,UCBTBYT2
UCB2OPT3 EQUOVR ,,b,UCBTBYT2
UCB2OPT4 EQUOVR ,,b,UCBTBYT2
UCB2OPT5 EQUOVR ,,b,UCBTBYT2
UCB2OPT6 EQUOVR ,,b,UCBTBYT2
UCBVLPWR EQUOVR ,,b,UCBTBYT2
UCB2OPT7 EQUOVR ,,b,UCBTBYT2
UCBDVPWR EQUOVR ,,b,UCBTBYT2
.*
.* UCBTBYT3 - Class bits
UCB3TAPE EQUOVR ,,b,UCBTBYT3
UCB3COMM EQUOVR ,,b,UCBTBYT3
UCB3CTC  EQUOVR ,,b,UCBTBYT3
UCB3DACC EQUOVR ,,b,UCBTBYT3
UCB3DISP EQUOVR ,,b,UCBTBYT3
UCB3UREC EQUOVR ,,b,UCBTBYT3
UCB3CHAR EQUOVR ,,b,UCBTBYT3
UCBRSV10 EQUOVR ,,b,UCBTBYT3
UCBRSV11 EQUOVR ,,b,UCBTBYT3
.*
.* UCBFLC - I/O supervisor flag byte C
UCBATTP  EQUOVR ,,b,UCBFLC
UCBITFP  EQUOVR ,,b,UCBFLC
UCBUDE   EQUOVR ,,b,UCBFLC
UCBIVRS  EQUOVR ,,b,UCBFLC
UCBIVRR  EQUOVR ,,b,UCBFLC
UCBDDRSW EQUOVR ,,b,UCBFLC
.*
.* UCBSTAB - Volume status
UCBBSVL  EQUOVR ,,b,UCBSTAB
UCBDVSHR EQUOVR ,,b,UCBSTAB
UCBPGFL  EQUOVR ,,b,UCBSTAB
UCBPRSRS EQUOVR ,,b,UCBSTAB
UCBBALB  EQUOVR ,,b,UCBSTAB
UCBBPRV  EQUOVR ,,b,UCBSTAB
UCBBPUB  EQUOVR ,,b,UCBSTAB
UCBBSTR  EQUOVR ,,b,UCBSTAB
UCBSHAR  EQUOVR ,,b,UCBSTAB
UCBBNUL  EQUOVR ,,b,UCBSTAB
.*
.* UCBDMCT - Volume use byte
UCBMOUNT EQUOVR ,,b,UCBDMCT
UCBDMC   EQUOVR ,,b,UCBDMCT
.*
.* UCBFL4 - Direct access flag byte
UCBMDSE1 EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4
UCBWDAV  EQUOVR ,,b,UCBFL4
.* UCBATTN  EQUOVR ,,b,UCBFL4          * Last seen in OS/390 V2R6
.* UCBHOLD  EQUOVR ,,b,UCBFL4          * Last seen in OS/390 V2R6
.* UCBMAT   EQUOVR ,,b,UCBFL4          * Last seen in OS/390 V2R6
UCBDPAVB EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4
UCBDPAVA EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4
UCBSDSE1 EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4
UCBDCMBU EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4
.*
.* UCBTBYT2 flags
UCBRR    EQUOVR ,,b,UCBTBYT2
UCBRPS   EQUOVR ,,b,UCBTBYT2
UCBRVDEV EQUOVR ,,b,UCBTBYT2
.*
.* UCBTFL2 - Flag byte
UCBTXMS  EQUOVR ,,b,UCBTFL2
UCBTPSF  EQUOVR ,,b,UCBTFL2
UCBTVCMP EQUOVR ,,b,UCBTFL2
UCBTLPOS EQUOVR ,,b,UCBTFL2
.*
.* UCBTFL1 - Flag byte
UCBNLTP  EQUOVR ,,b,UCBTFL1
UCBNSLTP EQUOVR ,,b,UCBTFL1
UCBDQDSP EQUOVR ,,b,UCBTFL1
UCBTFL1S EQUOVR ,,b,UCBTFL1
UCBRV005 EQUOVR ,,b,UCBTFL1
UCBCSL   EQUOVR ,,b,UCBTFL1
UCBCSLAC EQUOVR ,,b,UCBTFL1
UCBLKAHP EQUOVR ,,b,UCBTFL1
UCBBLP   EQUOVR ,,b,UCBTFL1
.*
.* UCBVOPT - VOLUME STATISTICS OPTION BITS
UCBESV   EQUOVR ,,b,UCBVOPT
UCBEVA   EQUOVR ,,b,UCBVOPT
UCBESVC  EQUOVR ,,b,UCBVOPT
UCBERPC  EQUOVR ,,b,UCBVOPT
UCBESVE  EQUOVR ,,b,UCBVOPT
UCBPERR  EQUOVR ,,b,UCBVOPT
UCBRSV21 EQUOVR ,,b,UCBVOPT
UCBRSV22 EQUOVR ,,b,UCBVOPT
.*
.* UCBMTFL1 - MSGDISP dismount request
UCBMTDSM EQUOVR ,,b,UCBMTFL1
UCBMTKEP EQUOVR ,,b,UCBMTFL1
UCBMTRET EQUOVR ,,b,UCBMTFL1
.*
.* UCBTBYT1 flags
UCBD1600 EQUOVR ,,b,UCBTBYT1
UCBD6250 EQUOVR ,,b,UCBTBYT1
.*
.* UCBTBYT2 flags
UCBDUDN1 EQUOVR ,,b,UCBTBYT2
UCBDUDN2 EQUOVR ,,b,UCBTBYT2
UCBRWTAU EQUOVR ,,b,UCBTBYT2
UCBCOMPA EQUOVR ,,b,UCBTBYT2
.*
.* UCBTBYT4 (UCBUNTYP) values
UCB3400  EQUOVR ,,v,UCBTBYT4
UCB3423  EQUOVR ,,v,UCBTBYT4
UCB3480  EQUOVR ,,v,UCBTBYT4
UCB3490  EQUOVR ,,v,UCBTBYT4
UCB3591  EQUOVR ,,v,UCBTBYT4
.*
.* UCBDKBYT - Flag byte
UCBDKAMX EQUOVR ,,b,UCBDKBYT
UCBVLVER EQUOVR ,,b,UCBDKBYT
UCBRV067 EQUOVR ,,b,UCBDKBYT
UCBRV068 EQUOVR ,,b,UCBDKBYT
UCBRV069 EQUOVR ,,b,UCBDKBYT
UCBRV070 EQUOVR ,,b,UCBDKBYT
UCBRV071 EQUOVR ,,b,UCBDKBYT
UCBRV072 EQUOVR ,,b,UCBDKBYT
.*
.* UCBOPTNS - Optional features installed on
UCBMDLBT EQUOVR ,,b,UCBOPTNS
UCBRV055 EQUOVR ,,b,UCBOPTNS
UCBRV056 EQUOVR ,,b,UCBOPTNS
UCBBRSTR EQUOVR ,,b,UCBOPTNS
UCBRV083 EQUOVR ,,b,UCBOPTNS
.*
.* UCBGRAFS - Graphic character flag byte
UCBRV046 EQUOVR ,,b,UCBGRAFS
UCBRV047 EQUOVR ,,b,UCBGRAFS
UCBRV048 EQUOVR ,,b,UCBGRAFS
UCBRV049 EQUOVR ,,b,UCBGRAFS
UCBGRAF0 EQUOVR ,,b,UCBGRAFS
UCBGRAF1 EQUOVR ,,b,UCBGRAFS
UCBGRAF2 EQUOVR ,,b,UCBGRAFS
UCBGRAF3 EQUOVR ,,b,UCBGRAFS
.*
.* UCBACTIV - Active features
UCBRV057 EQUOVR ,,b,UCBACTIV
UCBRV058 EQUOVR ,,b,UCBACTIV
UCBRV059 EQUOVR ,,b,UCBACTIV
UCBRV060 EQUOVR ,,b,UCBACTIV
UCBRV061 EQUOVR ,,b,UCBACTIV
UCBRV062 EQUOVR ,,b,UCBACTIV
UCBRV063 EQUOVR ,,b,UCBACTIV
UCBBRSTA EQUOVR ,,b,UCBACTIV
.*
.* UCBUCSOP - Format of UCS image in buffer
UCBUCSO1 EQUOVR ,,b,UCBUCSOP
UCBUCSO2 EQUOVR ,,b,UCBUCSOP
UCBRSV39 EQUOVR ,,b,UCBUCSOP
UCBRSV40 EQUOVR ,,b,UCBUCSOP
UCBRSV41 EQUOVR ,,b,UCBUCSOP
UCBRSV42 EQUOVR ,,b,UCBUCSOP
UCBRSV43 EQUOVR ,,b,UCBUCSOP
UCBUCSPE EQUOVR ,,b,UCBUCSOP
.*
.* UCBFCBOP - Reserved (1403) or FCB options
UCBFCBO1 EQUOVR ,,b,UCBFCBOP
UCBRSV44 EQUOVR ,,b,UCBFCBOP
UCBRSV45 EQUOVR ,,b,UCBFCBOP
UCBRSV46 EQUOVR ,,b,UCBFCBOP
UCBFCBPS EQUOVR ,,b,UCBFCBOP
UCBRSV49 EQUOVR ,,b,UCBFCBOP
UCBFCBPE EQUOVR ,,b,UCBFCBOP
.*
.* UCBUNTYP (UCBTBYT4) Flag Byte
UCBAFP1  EQUOVR ,,v,UCBUNTYP
UCBDSM   EQUOVR ,,v,UCBUNTYP
UCB3211  EQUOVR ,,v,UCBUNTYP
UCB3263  EQUOVR ,,v,UCBUNTYP
UCB3800  EQUOVR ,,v,UCBUNTYP
UCB3838  EQUOVR ,,v,UCBUNTYP
UCB3895  EQUOVR ,,v,UCBUNTYP
UCB4245  EQUOVR ,,v,UCBUNTYP
UCB4248  EQUOVR ,,v,UCBUNTYP
.*
.* UCBAOF1 - First byte of UCBAOF
UCBOFMCR EQUOVR ,,b,UCBAOF1
UCBOFSP  EQUOVR ,,b,UCBAOF1
UCBOFNL  EQUOVR ,,b,UCBAOF1
UCBOFPTR EQUOVR ,,b,UCBAOF1
UCBRSV65 EQUOVR ,,b,UCBAOF1
UCBRSV66 EQUOVR ,,b,UCBAOF1
UCBRSV67 EQUOVR ,,b,UCBAOF1
UCBRSV68 EQUOVR ,,b,UCBAOF1
.*
.* UCBAOF2 - Second byte of UCBAOF
UCBRSV69 EQUOVR ,,b,UCBAOF2
UCBRSV70 EQUOVR ,,b,UCBAOF2
UCBRSV71 EQUOVR ,,b,UCBAOF2
UCBRSV72 EQUOVR ,,b,UCBAOF2
UCBRSV73 EQUOVR ,,b,UCBAOF2
UCBRSV74 EQUOVR ,,b,UCBAOF2
UCBRSV75 EQUOVR ,,b,UCBAOF2
UCBRSV76 EQUOVR ,,b,UCBAOF2
.*
.* UCBGCB - control byte.
UCBOLTEP EQUOVR ,,b,UCBGCB
UCBRSV77 EQUOVR ,,b,UCBGCB
UCBRSV78 EQUOVR ,,b,UCBGCB
UCBRSV79 EQUOVR ,,b,UCBGCB
UCBRTIAC EQUOVR ,,b,UCBGCB
UCBRIPND EQUOVR ,,b,UCBGCB
UCBSKPFG EQUOVR ,,b,UCBGCB
UCBATRCD EQUOVR ,,b,UCBGCB
.*
.* UCBGRAF - Graphics status flags (BTAM)
UCBOIP   EQUOVR ,,b,UCBGRAF
UCBDRO   EQUOVR ,,b,UCBGRAF
UCBDRNO  EQUOVR ,,b,UCBGRAF
UCBBTAM  EQUOVR ,,b,UCBGRAF
UCBUPM   EQUOVR ,,b,UCBGRAF
UCBRPND  EQUOVR ,,b,UCBGRAF
UCBDWNR  EQUOVR ,,b,UCBGRAF
UCBRV039 EQUOVR ,,b,UCBGRAF
.*
.* UCBTBYT4 Flag Byte
UCB3791L  EQUOVR ,,v,UCBTBYT4
UCB42AD1  EQUOVR ,,v,UCBTBYT4
.*
.* UCBCTCF1 - Channel-to-channel (CTC) device flag
UCBCTC80 EQUOVR ,,b,UCBCTCF1
UCBRV076 EQUOVR ,,b,UCBCTCF1
UCBRV077 EQUOVR ,,b,UCBCTCF1
UCBRV078 EQUOVR ,,b,UCBCTCF1
UCBRV079 EQUOVR ,,b,UCBCTCF1
UCBRV080 EQUOVR ,,b,UCBCTCF1
UCBRV081 EQUOVR ,,b,UCBCTCF1
UCBRV082 EQUOVR ,,b,UCBCTCF1
.*
.* UCBCTCF2 - IOS CTC Flags, serialized via
UCBCCLAW EQUOVR ,,b,UCBCTCF2
UCBCABYP EQUOVR ,,b,UCBCTCF2
.*
.* UCBTBYT4 mapping
UCBPCTC  EQUOVR ,,v,UCBTBYT4
UCBSCTC  EQUOVR ,,v,UCBTBYT4
UCBBCTC  EQUOVR ,,v,UCBTBYT4
UCBRS6K  EQUOVR ,,v,UCBTBYT4
UCB3172  EQUOVR ,,v,UCBTBYT4
UCBOSA   EQUOVR ,,v,UCBTBYT4
UCBOSAD  EQUOVR ,,v,UCBTBYT4
UCBOSAF  EQUOVR ,,v,UCBTBYT4
.*
         MNOTE *,'Including IEFUCBOB mapping macro'
         IEFUCBOB SSMD=YES,            * Include prefix area mapping   *
               LIST=YES                * With unchanged list-options
         EQUOVR *END
*
UCB      DSECT ,                       * Reset to UCB
         ORG   ,                       *
UCB_LEN  EQU   *-UCB                   * Length of UCB
*
UCBOCR   DSECT ,                       * Reset to UCB OCR extension
         ORG   ,                       *
UCBOCR_LEN EQU *-UCBOCR                * Length of UCBOCR
*
UCB3540X DSECT ,                       * Reset to UCB 3540 extension
         ORG   ,                       *
UCB3540X_LEN EQU *-UCB3540X            * Length of UCB3540X
*
UCB3800X DSECT ,                       * Reset to UCB 3800 extension
         ORG   ,                       *
UCB3800_LEN EQU *-UCB3800X             * Length of UCB3800X
*
UCBUCS   DSECT ,                       * Reset to UCB UCS
         ORG   ,                       *
UCBUCS_LEN EQU *-UCBUCS                * Length of UCBUCS
*
UCBPDCTA DSECT ,                       * Reset to UCB PDCTA
         ORG   ,                       *
UCBPDCTA_LEN EQU *-UCBPDCTA            * Length of UCBPDCTA
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPUCM   0100-20096-20096-0111-00571-00571-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Unit Control Module definition
.*
&LABEL   MAPUCM &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPUCM                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPUCM         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'UCM').EMBED
         AIF   ('&CB' EQ 'UCMEFEXT').EMBED
         AIF   ('&CB' EQ 'UCMEIL').EMBED
         AIF   ('&CB' EQ 'UCMEPEXT').EMBED
         AIF   ('&CB' EQ 'UCMFEXTA').EMBED
         AIF   ('&CB' EQ 'UCMFSAVE').EMBED
         AIF   ('&CB' EQ 'UCMLIST').EMBED
         AIF   ('&CB' EQ 'UCMPEXTA').EMBED
         AIF   ('&CB' EQ 'UCMPRFX').EMBED
         AIF   ('&CB' EQ 'UCM2EXT').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPUCM).MEND
&BXA_MAC_MAPUCM SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_UCM
         GBLC  &BXA_CB_UCMEFEXT
         GBLC  &BXA_CB_UCMEIL
         GBLC  &BXA_CB_UCMEPEXT
         GBLC  &BXA_CB_UCMFEXTA
         GBLC  &BXA_CB_UCMFSAVE
         GBLC  &BXA_CB_UCMLIST
         GBLC  &BXA_CB_UCMPEXTA
         GBLC  &BXA_CB_UCMPRFX
         GBLC  &BXA_CB_UCM2EXT
&BXA_CB_UCM SETC 'UCM'
&BXA_CB_UCMEFEXT SETC 'UCM'
&BXA_CB_UCMEIL SETC 'UCM'
&BXA_CB_UCMEPEXT SETC 'UCM'
&BXA_CB_UCMFEXTA SETC 'UCM'
&BXA_CB_UCMFSAVE SETC 'UCM'
&BXA_CB_UCMLIST SETC 'UCM'
&BXA_CB_UCMPEXTA SETC 'UCM'
&BXA_CB_UCMPRFX SETC 'UCM'
&BXA_CB_UCM2EXT SETC 'UCM'
.*
.* UCM2SFLG - IEAVSTAA CONTROL FLAGS
UCM2SDWA EQUOVR ,,b,UCM2SFLG
UCM2SENT EQUOVR ,,b,UCM2SFLG
UCM2DTAK EQUOVR ,,b,UCM2SFLG
UCM2DSTR EQUOVR ,,b,UCM2SFLG
UCM2WTOI EQUOVR ,,b,UCM2SFLG
UCM2REC  EQUOVR ,,b,UCM2SFLG
UCM2FAIL EQUOVR ,,b,UCM2SFLG
UCMRV008 EQUOVR ,,b,UCM2SFLG
.*
.* UCMSFLG1 - BYTE 1 OF SYSTEM CONTROL FLAGS
UCMSYSHC EQUOVR ,,b,UCMSFLG1
UCMSYSB  EQUOVR ,,b,UCMSFLG1
UCMSYSC  EQUOVR ,,b,UCMSFLG1
UCMSYSD  EQUOVR ,,b,UCMSFLG1
UCMSYSE  EQUOVR ,,b,UCMSFLG1
UCMSYSF  EQUOVR ,,b,UCMSFLG1
UCMSYSG  EQUOVR ,,b,UCMSFLG1
UCMSYSH  EQUOVR ,,b,UCMSFLG1
.*
.* UCMSFLG2 - BYTE 2 OF SYSTEM CONTROL FLAGS
UCMSYSI  EQUOVR ,,b,UCMSFLG2
UCMSYSJ  EQUOVR ,,b,UCMSFLG2
UCMSYSK  EQUOVR ,,b,UCMSFLG2
UCMSYSL  EQUOVR ,,b,UCMSFLG2
UCMSYSM  EQUOVR ,,b,UCMSFLG2
UCMSYSN  EQUOVR ,,b,UCMSFLG2
UCMSYSO  EQUOVR ,,b,UCMSFLG2
UCMSYSP  EQUOVR ,,b,UCMSFLG2
.*
.* UCMMFLG3 - MISCELLANEOUS CONTROL FLAGS
UCMREFSH EQUOVR ,,b,UCMMFLG3
UCMLOGSW EQUOVR ,,b,UCMMFLG3
UCMMRSV2 EQUOVR ,,b,UCMMFLG3
UCMMRSV3 EQUOVR ,,b,UCMMFLG3
UCMMRSV4 EQUOVR ,,b,UCMMFLG3
UCMMRSV5 EQUOVR ,,b,UCMMFLG3
UCMMRSV6 EQUOVR ,,b,UCMMFLG3
UCMMRSV7 EQUOVR ,,b,UCMMFLG3
.*
.* UCMMFLG4 - Miscellaneous flags
UCMOPSS  EQUOVR ,,b,UCMMFLG4
UCMOPSA  EQUOVR ,,b,UCMMFLG4
UCMOPSV  EQUOVR ,,b,UCMMFLG4
UCMOPSD  EQUOVR ,,b,UCMMFLG4
UCMOPSEA EQUOVR ,,b,UCMMFLG4
UCMOPS5  EQUOVR ,,b,UCMMFLG4
UCMOPS6  EQUOVR ,,b,UCMMFLG4
UCMOPS7  EQUOVR ,,b,UCMMFLG4
.*
.* UCMSDS1 - SDS FLAGS
UCMSDS1A EQUOVR ,,b,UCMSDS1
UCMSDS1B EQUOVR ,,b,UCMSDS1
UCMSDS1C EQUOVR ,,b,UCMSDS1
UCMSDS1D EQUOVR ,,b,UCMSDS1
UCMSDS1E EQUOVR ,,b,UCMSDS1
UCMPRTHC EQUOVR ,,b,UCMSDS1
UCMRSV08 EQUOVR ,,b,UCMSDS1
UCMRSV09 EQUOVR ,,b,UCMSDS1
.*
.* UCMMISCF - MISCELLANEOUS BITS
UCMJ3CBS EQUOVR ,,b,UCMMISCF
UCMJ3SAE EQUOVR ,,b,UCMMISCF
UCMWU100 EQUOVR ,,b,UCMMISCF
UCMENFDM EQUOVR ,,b,UCMMISCF
UCMWU400 EQUOVR ,,b,UCMMISCF
.* UCMRSV0A EQUOVR ,,b,UCMMISCF        * Last seen in OS/390 V2R6
UCMWDONE EQUOVR ,,b,UCMMISCF           * First seen in z/OS V1R4
UCMRSV0B EQUOVR ,,b,UCMMISCF
UCMRSV0C EQUOVR ,,b,UCMMISCF
.*
.* UCMRPYF1 - First byte of Reply Flags
UCMRPY0I EQUOVR ,,b,UCMRPYF1
UCMENHR  EQUOVR ,,b,UCMRPYF1
.*
.* UCMMODE - MODE FLAGS
UCMCTIC  EQUOVR ,,b,UCMMODE
UCMSPLXQ EQUOVR ,,b,UCMMODE
UCMTPUTA EQUOVR ,,b,UCMMODE
UCMSYPLX EQUOVR ,,b,UCMMODE
UCMAMFA  EQUOVR ,,b,UCMMODE
UCMOGCE  EQUOVR ,,b,UCMMODE
UCMFSTAT EQUOVR ,,b,UCMMODE
UCM1SYS  EQUOVR ,,b,UCMMODE
.*
.* UCMAMRF - ACTION MESSAGE RETENTION FACILITY FLAGS
UCMAMRFA EQUOVR ,,b,UCMAMRF
UCMAMRFF EQUOVR ,,b,UCMAMRF
UCMRSV78 EQUOVR ,,b,UCMAMRF
UCMABUFF EQUOVR ,,b,UCMAMRF
UCMAMRFC EQUOVR ,,b,UCMAMRF
UCMEXSSI EQUOVR ,,b,UCMAMRF
.* UCMRSV80 EQUOVR ,,b,UCMAMRF         * Last seen in OS/390 V2R6
UCMAMRFR EQUOVR ,,b,UCMAMRF            * First seen in z/OS V1R4
UCMRSV81 EQUOVR ,,b,UCMAMRF
.*
.* UCMVRSN - VERSION LEVEL
UCMSP13  EQUOVR ,,v,UCMVRSN
UCMSP211 EQUOVR ,,v,UCMVRSN
UCMSP220 EQUOVR ,,v,UCMVRSN
UCMSP410 EQUOVR ,,v,UCMVRSN
UCMSP420 EQUOVR ,,v,UCMVRSN
UCMSP422 EQUOVR ,,v,UCMVRSN
UCMSP440 EQUOVR ,,v,UCMVRSN
UCMSP51X EQUOVR ,,v,UCMVRSN
UCMVRID  EQUOVR ,,v,UCMVRSN
.*
.* UCMMODE2 - MODE FLAGS #2
UCMOVRDE EQUOVR ,,b,UCMMODE2
UCMLOGS  EQUOVR ,,b,UCMMODE2
UCMMD202 EQUOVR ,,b,UCMMODE2
UCMHCENT EQUOVR ,,b,UCMMODE2
UCMMD204 EQUOVR ,,b,UCMMODE2
UCMMD205 EQUOVR ,,b,UCMMODE2
.* UCMMD206 EQUOVR ,,b,UCMMODE2        * Last seen in OS/390 V2R6
UCM_Default_RC11 EQUOVR ,,b,UCMMODE2   * First seen in z/OS V1R4
UCMMD207 EQUOVR ,,b,UCMMODE2
.*
.* UCMRSV42 - RESERVED  (MDC033)
UCMRSV43 EQUOVR ,,b,UCMRSV42
UCMRSV44 EQUOVR ,,b,UCMRSV42
UCMRSV45 EQUOVR ,,b,UCMRSV42
UCMRSV46 EQUOVR ,,b,UCMRSV42
UCMRSV47 EQUOVR ,,b,UCMRSV42
UCMRSV48 EQUOVR ,,b,UCMRSV42
UCMRSV49 EQUOVR ,,b,UCMRSV42
UCMRSV50 EQUOVR ,,b,UCMRSV42
.*
.* UCMRSV51 - RESERVED  (MDC033)
UCMRSV52 EQUOVR ,,b,UCMRSV51
UCMRSV53 EQUOVR ,,b,UCMRSV51
UCMRSV54 EQUOVR ,,b,UCMRSV51
UCMRSV55 EQUOVR ,,b,UCMRSV51
UCMRSV56 EQUOVR ,,b,UCMRSV51
UCMRSV57 EQUOVR ,,b,UCMRSV51
UCMRSV58 EQUOVR ,,b,UCMRSV51
UCMRSV59 EQUOVR ,,b,UCMRSV51
.*
.* UCMECB - I/O COMPLETION ECB OR ADDRESS OF I/O COMPLETION ECB
UCMECBFB EQUOVR ,,v,UCMECB+3
UCMECBFC EQUOVR ,,v,UCMECB+3
UCMECBFD EQUOVR ,,v,UCMECB+3
UCMECBFE EQUOVR ,,v,UCMECB+3
UCMECBFF EQUOVR ,,v,UCMECB+3
.*
.* UCMSTS - STATUS FLAGS
UCMAF    EQUOVR ,,b,UCMSTS
UCMPF    EQUOVR ,,b,UCMSTS
UCMBF    EQUOVR ,,b,UCMSTS
UCMCF    EQUOVR ,,b,UCMSTS
UCMTA    EQUOVR ,,b,UCMSTS
UCMTB    EQUOVR ,,b,UCMSTS
UCMEMCLS EQUOVR ,,b,UCMSTS
UCMTC    EQUOVR ,,b,UCMSTS
.*
.* UCMATR - ATTRIBUTE FLAGS
UCMOF    EQUOVR ,,b,UCMATR
UCMIF    EQUOVR ,,b,UCMATR
UCMXF    EQUOVR ,,b,UCMATR
UCMUF    EQUOVR ,,b,UCMATR
UCMLF    EQUOVR ,,b,UCMATR
UCMAT04  EQUOVR ,,b,UCMATR
UCMINCLR EQUOVR ,,b,UCMATR
UCMGLBCH EQUOVR ,,b,UCMATR
.*
.* UCMEDEVX - DEVICE TYPE INDEX
UCM2540  EQUOVR ,,v,UCMEDEVX
UCM2740  EQUOVR ,,v,UCMEDEVX
UCM3211  EQUOVR ,,v,UCMEDEVX
UCM3215  EQUOVR ,,v,UCMEDEVX
UCM32772 EQUOVR ,,v,UCMEDEVX
UCM32782 EQUOVR ,,v,UCMEDEVX
UCM3782A EQUOVR ,,v,UCMEDEVX
UCM32783 EQUOVR ,,v,UCMEDEVX
UCM32784 EQUOVR ,,v,UCMEDEVX
UCM3792A EQUOVR ,,v,UCMEDEVX
UCM3792B EQUOVR ,,v,UCMEDEVX
UCM3793A EQUOVR ,,v,UCMEDEVX
UCM3793B EQUOVR ,,v,UCMEDEVX
UCM3284  EQUOVR ,,v,UCMEDEVX
UCM3792C EQUOVR ,,v,UCMEDEVX
UCM3270X EQUOVR ,,v,UCMEDEVX
UCM2732E EQUOVR ,,v,UCMEDEVX
UCM3180E EQUOVR ,,v,UCMEDEVX
UCM3160E EQUOVR ,,v,UCMEDEVX
UCM4380E EQUOVR ,,v,UCMEDEVX
UCM6280E EQUOVR ,,v,UCMEDEVX
UCM6260E EQUOVR ,,v,UCMEDEVX
UCM5006E EQUOVR ,,v,UCMEDEVX
.*
.* UCMSDS5 - SDS FLAGS
UCMSDS5A EQUOVR ,,b,UCMSDS5
UCMSDS5B EQUOVR ,,b,UCMSDS5
UCMSDS5C EQUOVR ,,b,UCMSDS5
UCMSDS5D EQUOVR ,,b,UCMSDS5
UCMRSV30 EQUOVR ,,b,UCMSDS5
UCMSDS5F EQUOVR ,,b,UCMSDS5
UCMSDS5G EQUOVR ,,b,UCMSDS5
UCMRSV31 EQUOVR ,,b,UCMSDS5
.*
.* UCMDIDCS - DIDOCS GLOBAL UPDATE FLAGS
UCMEGCHG EQUOVR ,,b,UCMDIDCS
UCMENGUP EQUOVR ,,b,UCMDIDCS
UCMAHERE EQUOVR ,,b,UCMDIDCS
UCMINUSE EQUOVR ,,b,UCMDIDCS
UCMEFAIL EQUOVR ,,b,UCMDIDCS
.*
.* UCMAUTHA - 1ST BYTE OF COMMAND CODE AUTH FLAGS
UCMAUTH1 EQUOVR ,,b,UCMAUTHA
UCMAUTH2 EQUOVR ,,b,UCMAUTHA
UCMAUTH3 EQUOVR ,,b,UCMAUTHA
UCMRSV19 EQUOVR ,,b,UCMAUTHA
UCMRSV20 EQUOVR ,,b,UCMAUTHA
UCMRSV21 EQUOVR ,,b,UCMAUTHA
UCMRSV22 EQUOVR ,,b,UCMAUTHA
UCMRSV23 EQUOVR ,,b,UCMAUTHA
.*
.* UCMDISP1 - FIRST BYTE - DISPOSITION FLAGS
UCMDISPA EQUOVR ,,b,UCMDISP1
UCMDISPB EQUOVR ,,b,UCMDISP1
UCMDISPC EQUOVR ,,b,UCMDISP1
UCMDISPD EQUOVR ,,b,UCMDISP1
UCMDISPE EQUOVR ,,b,UCMDISP1
UCMDISPF EQUOVR ,,b,UCMDISP1
UCMDISPG EQUOVR ,,b,UCMDISP1
UCMDISPH EQUOVR ,,b,UCMDISP1
.*
.* UCMDISP2 - SECOND BYTE - DISPOSITION FLAGS
UCMDISPI EQUOVR ,,b,UCMDISP2
UCMDISPJ EQUOVR ,,b,UCMDISP2
UCMDISPK EQUOVR ,,b,UCMDISP2
UCMDISPL EQUOVR ,,b,UCMDISP2
UCMDISPM EQUOVR ,,b,UCMDISP2
UCMDISPN EQUOVR ,,b,UCMDISP2
UCMDISPX EQUOVR ,,b,UCMDISP2
.*
.* UCMMSG1 - FIRST BYTE - MESSAGE FLAGS
UCMMSGA  EQUOVR ,,b,UCMMSG1
UCMMSGB  EQUOVR ,,b,UCMMSG1
UCMRSV70 EQUOVR ,,b,UCMMSG1
UCMMSGD  EQUOVR ,,b,UCMMSG1
UCMRSV71 EQUOVR ,,b,UCMMSG1
UCMMSGF  EQUOVR ,,b,UCMMSG1
UCMMSGG  EQUOVR ,,b,UCMMSG1
UCMRSV27 EQUOVR ,,b,UCMMSG1
.*
.* UCMDEVC - DEVICE CONTROL FLAGS
UCMDEVA  EQUOVR ,,b,UCMDEVC
UCMDEVB  EQUOVR ,,b,UCMDEVC
UCMDEVCC EQUOVR ,,b,UCMDEVC
UCMDEVD  EQUOVR ,,b,UCMDEVC
UCMDEVE  EQUOVR ,,b,UCMDEVC
UCMDEVF  EQUOVR ,,b,UCMDEVC
UCMDEVG  EQUOVR ,,b,UCMDEVC
UCMVHRSN EQUOVR ,,b,UCMDEVC
.*
.* UCMFFLG1 - MESSAGE FLAGS
UCMFMSGE EQUOVR ,,b,UCMFFLG1
UCMFMSGA EQUOVR ,,b,UCMFFLG1
UCMFMSGN EQUOVR ,,b,UCMFFLG1
UCMFMSG1 EQUOVR ,,b,UCMFFLG1
UCMFMSG2 EQUOVR ,,b,UCMFFLG1
UCMFMSG3 EQUOVR ,,b,UCMFFLG1
UCMFMSG4 EQUOVR ,,b,UCMFFLG1
UCMFMSG5 EQUOVR ,,b,UCMFFLG1
.*
.* UCMFFLG2 - MESSAGE FLAGS
UCMFMSG6 EQUOVR ,,b,UCMFFLG2
UCMFMSG7 EQUOVR ,,b,UCMFFLG2
UCMFMSG8 EQUOVR ,,b,UCMFFLG2
UCMFMSG9 EQUOVR ,,b,UCMFFLG2
UCMFMSGB EQUOVR ,,b,UCMFFLG2
UCMFUMPF EQUOVR ,,b,UCMFFLG2
UCMFMSGC EQUOVR ,,b,UCMFFLG2
UCMNHOLD EQUOVR ,,b,UCMFFLG2
.*
.* UCMFFLG3 - QUEUE SCANNED FLAGS FOR ACTION MESSAGE
UCMFRQSD EQUOVR ,,b,UCMFFLG3
UCMFIQSD EQUOVR ,,b,UCMFFLG3
UCMFEQSD EQUOVR ,,b,UCMFFLG3
UCMFCQSD EQUOVR ,,b,UCMFFLG3
UCMFRSVD EQUOVR ,,b,UCMFFLG3
UCMFRSVE EQUOVR ,,b,UCMFFLG3
UCMFRSVF EQUOVR ,,b,UCMFFLG3
UCMFRSVG EQUOVR ,,b,UCMFFLG3
.*
.* UCMFMISC - MISCELLANEOUS FLAGS
UCMFWRID EQUOVR ,,b,UCMFMISC
UCMFCMIN EQUOVR ,,b,UCMFMISC
UCMFRSVH EQUOVR ,,b,UCMFMISC
UCMFHOLD EQUOVR ,,b,UCMFMISC
UCMF4RSV EQUOVR ,,b,UCMFMISC
UCMFLOGR EQUOVR ,,b,UCMFMISC
UCMFLOGA EQUOVR ,,b,UCMFMISC
UCMFRACT EQUOVR ,,b,UCMFMISC
.*
.* UCMFMIS2 - MISCELLANEOUS FLAG BYTE 2
UCMFPCOK EQUOVR ,,b,UCMFMIS2
UCMFUD1  EQUOVR ,,b,UCMFMIS2
UCMFHCUD EQUOVR ,,b,UCMFMIS2
UCMFMLSS EQUOVR ,,b,UCMFMIS2
UCMFSYNL EQUOVR ,,b,UCMFMIS2
UCMFMIX  EQUOVR ,,b,UCMFMIS2
UCMFPCMP EQUOVR ,,b,UCMFMIS2
UCMF440  EQUOVR ,,b,UCMFMIS2
.*
.* UCMFXBYT - HIGH-ORDER BYTE OF UCMFXECB
UCMFXB0  EQUOVR ,,b,UCMFXBYT
.*
.* UCMFMIS3 - MISCELLANEOUS FLAG BYTE 3
UCMF65BL EQUOVR ,,b,UCMFMIS3
UCMF85BL EQUOVR ,,b,UCMFMIS3
.*
.* UCMPSNQB - QUEUE SCANNED FLAGS FOR ACTION MESSAGE
UCMPRQSD EQUOVR ,,b,UCMPSNQB
UCMPIQSD EQUOVR ,,b,UCMPSNQB
UCMPEQSD EQUOVR ,,b,UCMPSNQB
UCMPCQSD EQUOVR ,,b,UCMPSNQB
UCMPRSV4 EQUOVR ,,b,UCMPSNQB
UCMPRSV5 EQUOVR ,,b,UCMPSNQB
UCMPRSV6 EQUOVR ,,b,UCMPSNQB
UCMPRSV7 EQUOVR ,,b,UCMPSNQB
.*
.* UCMPFLG1 - MISCELLANEOUS FLAGS
UCMPWERA EQUOVR ,,b,UCMPFLG1
UCMPUXIT EQUOVR ,,b,UCMPFLG1
UCMPPFKC EQUOVR ,,b,UCMPFLG1
UCMPSWCH EQUOVR ,,b,UCMPFLG1
UCMPSWCC EQUOVR ,,b,UCMPFLG1
UCMPLOCO EQUOVR ,,b,UCMPFLG1
UCMPXITA EQUOVR ,,b,UCMPFLG1
UCMPXTDF EQUOVR ,,b,UCMPFLG1
.*
.* UCMEFLG1 - FLAGS FOR UCME FIXED EXTENSION
UCMEFLGA EQUOVR ,,b,UCMEFLG1
UCMEFLGB EQUOVR ,,b,UCMEFLG1
UCMEFLGC EQUOVR ,,b,UCMEFLG1
UCMEFLGD EQUOVR ,,b,UCMEFLG1
UCMEFLGE EQUOVR ,,b,UCMEFLG1
.* UCMEFLGF EQUOVR ,,b,UCMEFLG1        * Last seen in OS/390 V2R6
.* UCMEFLGG EQUOVR ,,b,UCMEFLG1        * Last seen in OS/390 V2R6
.* UCMEFLGH EQUOVR ,,b,UCMEFLG1        * Last seen in OS/390 V2R6
UCMEF_Logon_Optional   EQUOVR ,,b,UCMEFLG1 * First seen in z/OS V1R4
UCMEF_Logon_Required   EQUOVR ,,b,UCMEFLG1 * First seen in z/OS V1R4
UCMEF_AutoLog_Required EQUOVR ,,b,UCMEFLG1 * First seen in z/OS V1R4
.*
.* UCMEFLG2 - FLAG FIELD
UCMEFSTW EQUOVR ,,b,UCMEFLG2
UCMEFLRQ EQUOVR ,,b,UCMEFLG2
UCMEFALG EQUOVR ,,b,UCMEFLG2
UCMEFLOG EQUOVR ,,b,UCMEFLG2
UCMEALOG EQUOVR ,,b,UCMEFLG2
UCMEFALL EQUOVR ,,b,UCMEFLG2
UCMEFPAL EQUOVR ,,b,UCMEFLG2
.*
.* UCMEFL1 - FIRST BYTE OF THE MESSAGE LEVEL FLAGS
UCMEFLR  EQUOVR ,,b,UCMEFL1
UCMEFLIA EQUOVR ,,b,UCMEFL1
UCMEFLCE EQUOVR ,,b,UCMEFL1
UCMEFLE  EQUOVR ,,b,UCMEFL1
UCMEFLI  EQUOVR ,,b,UCMEFL1
UCMEFLBC EQUOVR ,,b,UCMEFL1
.*
.* UCMEFMSC - MISCELLANEOUS ROUTING INFORMATION
UCMEFUD  EQUOVR ,,b,UCMEFMSC
UCMEFUDO EQUOVR ,,b,UCMEFMSC
UCMEFMS3 EQUOVR ,,b,UCMEFMSC
UCMEFAUT EQUOVR ,,b,UCMEFMSC
UCMEFHCY EQUOVR ,,b,UCMEFMSC
.*
.* UCMEFL3 - Reserved for IBM use
UCMEFMSA EQUOVR ,,b,UCMEFL3
UCMEFCSA EQUOVR ,,b,UCMEFL3
.*
.* UCMEPFG1 - MISCELLANEOUS FLAGS
UCMEPAIN EQUOVR ,,b,UCMEPFG1
UCMEPTFL EQUOVR ,,b,UCMEPFG1
UCMEPPOB EQUOVR ,,b,UCMEPFG1
UCMEPASY EQUOVR ,,b,UCMEPFG1
.*
.* UCMEPMON - MONITOR SAVE FLAGS, FIRST BYTE
UCMEPMJ  EQUOVR ,,b,UCMEPMON
UCMEPMST EQUOVR ,,b,UCMEPMON
UCMEPM02 EQUOVR ,,b,UCMEPMON
UCMEPM03 EQUOVR ,,b,UCMEPMON
UCMEPM04 EQUOVR ,,b,UCMEPMON
UCMEPMS  EQUOVR ,,b,UCMEPMON
UCMEPMTM EQUOVR ,,b,UCMEPMON
UCMEPM07 EQUOVR ,,b,UCMEPMON
.*
.* UCMEPA - ARRAY OF 11 BYTES CORRESPONDING TO EACH AREA IN UCMEPARE
UCMEPUSE EQUOVR ,,b,UCMEPA
UCMEPADD EQUOVR ,,b,UCMEPA
.*
.* UCMEND - ADDR OF LAST DEVICE ENTRY
UCMEND   EQUOVR ,,U                    * Prevent defaulting to type 0
.*
.* Override EJECT-statements (with 'arguments' in the IEECUCM macro)
.*       EJECTOVR *NOERR,9             * Last seen in OS/390 V2R6
         EJECTOVR *NOERR,12            * First seen in z/OS V1R4
.*
         MNOTE *,'Including IEECUCM mapping macro'
         IEECUCM LIST=YES              * Keep current LIST options
         EQUOVR *END
         EJECTOVR *END
*
UCM      DSECT ,                       * Resume UCM DSECT
         ORG
UCM_LEN  EQU   *-UCM                   * Length of UCM
*
UCMEFEXT DSECT ,                       * Resume UCM inividual device
         ORG   ,                       *          Entry Fixed EXTension
UCMEFEXT_LEN EQU *-UCMEFEXT            * Length of UCMEFEXT
*
UCMEIL   DSECT ,                       * Resume UCM Event Indication
         ORG   ,                       *                        List
UCMEIL_LEN EQU *-UCMEIL                * Length of UCMEIL
*
UCMEPEXT DSECT ,                       * Resume UCM individual device
         ORG   ,                       *       Entry Pageable EXTension
UCMEPEXT_LEN EQU *-UCMEPEXT            * Length of UCMEPEXT
*
UCMFEXTA DSECT ,                       * Resume UCM Fixed EXTension
         ORG   ,                       *                       bAse
UCMFEXTA_LEN EQU *-UCMFEXTA            * Length of UCMFEXTA
*
UCMFSAVE DSECT ,                       * Resume UCM Fixed extension
         ORG   ,                       *                     SAVE area
UCMFSAVE_LEN EQU *-UCMFSAVE            * Length of UCMFSAVE
*
UCMLIST  DSECT ,                       * Resume LIST of individual
         ORG   ,                       *            device entry maps
UCMLIST_LEN EQU *-UCMLIST              * Length of UCMLIST
*
UCMPEXTA DSECT ,                       * Resume UCM Pageable EXTension
         ORG   ,                       *                         bAse
UCMPEXTA_LEN EQU *-UCMPEXTA            * Length of UCMPEXTA
*
UCMPRFX  DSECT ,                       * Resume MCS Prefix area
         ORG
UCMPRFX_LEN EQU *-UCMPRFX              * Length of UCMPRFX
*
UCM2EXT  DSECT ,                       * Resume OS/VS2 extension
         ORG
UCM2EXT_LEN EQU *-UCM2EXT              * Length of UCM2EXT
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPVRA   0100-20096-20096-0111-00235-00235-00000-BIXSMAC 34
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Variable Recording Area (part of SDWA)
.*
&LABEL   MAPVRA &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPVRA                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPVRA         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'VRA').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPVRA).MEND
&BXA_MAC_MAPVRA SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_VRA
&BXA_CB_VRA SETC 'VRA'
.*
.* VRAKEY - KEY TO IDENTIFY THE DATA THAT FOLLOWS.
VRACOM   EQUOVR ,,v,VRAKEY
VRASC    EQUOVR ,,v,VRAKEY
VRALVL   EQUOVR ,,v,VRAKEY
VRADT    EQUOVR ,,v,VRAKEY
VRAPTF   EQUOVR ,,v,VRAKEY
VRARC    EQUOVR ,,v,VRAKEY
VRAQVOD  EQUOVR ,,v,VRAKEY
VRAQERR  EQUOVR ,,v,VRAKEY
VRALVLS  EQUOVR ,,v,VRAKEY
VRARRP   EQUOVR ,,v,VRAKEY
VRACBM   EQUOVR ,,v,VRAKEY
VRACB    EQUOVR ,,v,VRAKEY
VRACBF   EQUOVR ,,v,VRAKEY
VRACBA   EQUOVR ,,v,VRAKEY
VRACBO   EQUOVR ,,v,VRAKEY
VRACBL   EQUOVR ,,v,VRAKEY
VRACBI   EQUOVR ,,v,VRAKEY
VRACBIA  EQUOVR ,,v,VRAKEY
VRACBI2  EQUOVR ,,v,VRAKEY
VRAPLI   EQUOVR ,,v,VRAKEY
VRAPL    EQUOVR ,,v,VRAKEY
VRAFPI   EQUOVR ,,v,VRAKEY
VRAFP    EQUOVR ,,v,VRAKEY
VRAPA    EQUOVR ,,v,VRAKEY
VRAP2    EQUOVR ,,v,VRAKEY
VRALK    EQUOVR ,,v,VRAKEY
VRAWAI   EQUOVR ,,v,VRAKEY
VRAWA    EQUOVR ,,v,VRAKEY
VRAWAP   EQUOVR ,,v,VRAKEY
VRALBL   EQUOVR ,,v,VRAKEY
VRARRL   EQUOVR ,,v,VRAKEY
VRAMID   EQUOVR ,,v,VRAKEY
VRAMSG   EQUOVR ,,v,VRAKEY
VRAERR   EQUOVR ,,v,VRAKEY
VRAEHX   EQUOVR ,,v,VRAKEY
VRAHID   EQUOVR ,,v,VRAKEY
VRAHEX   EQUOVR ,,v,VRAKEY
VRAEBC   EQUOVR ,,v,VRAKEY
VRAAID   EQUOVR ,,v,VRAKEY
VRATCB   EQUOVR ,,v,VRAKEY
VRACA    EQUOVR ,,v,VRAKEY
VRACAN   EQUOVR ,,v,VRAKEY
VRAOA    EQUOVR ,,v,VRAKEY
VRAPSW   EQUOVR ,,v,VRAKEY
VRAINS   EQUOVR ,,v,VRAKEY
VRAREGS  EQUOVR ,,v,VRAKEY
VRAREGA  EQUOVR ,,v,VRAKEY
VRAOR15  EQUOVR ,,v,VRAKEY
VRADSN   EQUOVR ,,v,VRAKEY
VRADEV   EQUOVR ,,v,VRAKEY
VRASN    EQUOVR ,,v,VRAKEY
VRAST    EQUOVR ,,v,VRAKEY
VRAU     EQUOVR ,,v,VRAKEY
VRACCW   EQUOVR ,,v,VRAKEY
VRACSW   EQUOVR ,,v,VRAKEY
VRADVT   EQUOVR ,,v,VRAKEY
VRAVOL   EQUOVR ,,v,VRAKEY
VRAREQ   EQUOVR ,,v,VRAKEY
VRAOPT   EQUOVR ,,v,VRAKEY
VRAMINSC EQUOVR ,,v,VRAKEY
VRADAE   EQUOVR ,,v,VRAKEY
VRAMINSL EQUOVR ,,v,VRAKEY
VRAFREG  EQUOVR ,,v,VRAKEY
VRACSCB  EQUOVR ,,v,VRAKEY
VRACSCBA EQUOVR ,,v,VRAKEY
VRAJOB   EQUOVR ,,v,VRAKEY
VRASTP   EQUOVR ,,v,VRAKEY
VRACMD   EQUOVR ,,v,VRAKEY
VRAJCL   EQUOVR ,,v,VRAKEY
VRANODAE EQUOVR ,,v,VRAKEY
VRAEPN   EQUOVR ,,v,VRAKEY
VRAETF   EQUOVR ,,v,VRAKEY
VRACTF   EQUOVR ,,v,VRAKEY
VRALTF   EQUOVR ,,v,VRAKEY
VRAMO    EQUOVR ,,v,VRAKEY
VRAILO   EQUOVR ,,v,VRAKEY
VRAIMO   EQUOVR ,,v,VRAKEY
VRAFID   EQUOVR ,,v,VRAKEY
VRAPID   EQUOVR ,,v,VRAKEY
VRAIAP   EQUOVR ,,v,VRAKEY
VRAIAL   EQUOVR ,,v,VRAKEY
VRAICL   EQUOVR ,,v,VRAKEY
VRAIDP   EQUOVR ,,v,VRAKEY
VRALKWA  EQUOVR ,,v,VRAKEY
VRARRK   EQUOVR ,,v,VRAKEY
VRARRK1  EQUOVR ,,v,VRAKEY
VRARRK2  EQUOVR ,,v,VRAKEY
VRARRK3  EQUOVR ,,v,VRAKEY
VRARRK4  EQUOVR ,,v,VRAKEY
VRARRK5  EQUOVR ,,v,VRAKEY
VRARRK6  EQUOVR ,,v,VRAKEY
VRARRK7  EQUOVR ,,v,VRAKEY
VRARRK8  EQUOVR ,,v,VRAKEY
VRARRK9  EQUOVR ,,v,VRAKEY
VRARRK10 EQUOVR ,,v,VRAKEY
VRARRK11 EQUOVR ,,v,VRAKEY
VRARRK12 EQUOVR ,,v,VRAKEY
VRARRK13 EQUOVR ,,v,VRAKEY
VRARRK14 EQUOVR ,,v,VRAKEY
VRARRK15 EQUOVR ,,v,VRAKEY
VRARRK16 EQUOVR ,,v,VRAKEY
VRARRK17 EQUOVR ,,v,VRAKEY
VRARRK18 EQUOVR ,,v,VRAKEY
VRARRK19 EQUOVR ,,v,VRAKEY
VRARRK20 EQUOVR ,,v,VRAKEY
VRARRK21 EQUOVR ,,v,VRAKEY
VRARRK22 EQUOVR ,,v,VRAKEY
VRARRK23 EQUOVR ,,v,VRAKEY
VRARRK24 EQUOVR ,,v,VRAKEY
VRARRK25 EQUOVR ,,v,VRAKEY
VRARRK26 EQUOVR ,,v,VRAKEY
VRARRK27 EQUOVR ,,v,VRAKEY
VRARRK28 EQUOVR ,,v,VRAKEY
VRARRK29 EQUOVR ,,v,VRAKEY
VRARRK30 EQUOVR ,,v,VRAKEY
VRARRK31 EQUOVR ,,v,VRAKEY
VRARRK32 EQUOVR ,,v,VRAKEY
VRARRK33 EQUOVR ,,v,VRAKEY
VRARRK34 EQUOVR ,,v,VRAKEY
VRARRK35 EQUOVR ,,v,VRAKEY
VRARRK36 EQUOVR ,,v,VRAKEY
VRARRK37 EQUOVR ,,v,VRAKEY
VRARRK38 EQUOVR ,,v,VRAKEY
VRARRK39 EQUOVR ,,v,VRAKEY
VRASKP   EQUOVR ,,v,VRAKEY
VRAEND   EQUOVR ,,v,VRAKEY
.*
         MNOTE *,'Including IHAVRA mapping macro'
         IHAVRA DSECT=YES              * Include DSECT statement
         EQUOVR *END
*
VRAMAP   DSECT ,                       * Restart VRA
VRA      EQU   VRAMAP                  * Alias of VRAMAP
         ORG   ,                       *
VRA_LEN  EQU   *-VRA                   * Length of VRA
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPVSL   0100-20096-20096-0111-00126-00126-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the Virtual Subarea List entry
.*
&LABEL   MAPVSL &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPVSL                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPVSL         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'VSL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPVSL).MEND
&BXA_MAC_MAPVSL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_VSL
&BXA_CB_VSL SETC 'VSL'
.*
.* VSLFLAG1 - FIRST FLAG FIELD
VSLCONT  EQUOVR ,,b,VSLFLAG1
VSLFIX   EQUOVR ,,b,VSLFLAG1
VSLFREE  EQUOVR ,,b,VSLFLAG1
VSLOAD   EQUOVR ,,b,VSLFLAG1
VSLRLS   EQUOVR ,,b,VSLFLAG1
VSLANYW  EQUOVR ,,b,VSLFLAG1
VSLONG   EQUOVR ,,b,VSLFLAG1
VSLRSV2  EQUOVR ,,b,VSLFLAG1
.*
.* VSLFLAG2 - SECOND FLAG FIELD
VSLAST   EQUOVR ,,b,VSLFLAG2
VSLNULL  EQUOVR ,,b,VSLFLAG2
VSLRAO   EQUOVR ,,b,VSLFLAG2
VSLERR   EQUOVR ,,b,VSLFLAG2
VSLRSV3  EQUOVR ,,b,VSLFLAG2
VSLPGOUT EQUOVR ,,b,VSLFLAG2
VSLKEPRL EQUOVR ,,b,VSLFLAG2
VSLEXTRS EQUOVR ,,b,VSLFLAG2
.*
         MNOTE *,'Including IHAVSL mapping macro'
         IHAVSL ,
         EQUOVR *END
*
VSL      DSECT ,                       * Resume VSL DSECT
         ORG
VSL_LEN  EQU   *-VSL                   * Length of VSL
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPWQE   0100-20096-20096-0111-01040-01040-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the WTO Queue ELement
.*
&LABEL   MAPWQE &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPWQE                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPWQE         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'WQE').EMBED
         AIF   ('&CB' EQ 'WQEMAJ').EMBED
         AIF   ('&CB' EQ 'WQEMIN').EMBED
         AIF   ('&CB' EQ 'WQESYAR').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPWQE).MEND
&BXA_MAC_MAPWQE SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_WQE
         GBLC  &BXA_CB_WQEMAJ
         GBLC  &BXA_CB_WQEMIN
         GBLC  &BXA_CB_WQESYAR
&BXA_CB_WQE SETC 'WQE'
&BXA_CB_WQEMAJ SETC 'WQE'
&BXA_CB_WQEMIN SETC 'WQE'
&BXA_CB_WQESYAR SETC 'WQE'
.*
.* WQEXA - DISPOSITION FLAGS
WQEPURGE EQUOVR ,,b,WQEXA
WQEQFHC  EQUOVR ,,b,WQEXA
WQEORE   EQUOVR ,,b,WQEXA
WQEQDFHC EQUOVR ,,b,WQEXA
WQEWTOR  EQUOVR ,,b,WQEXA
WQEDOM   EQUOVR ,,b,WQEXA
WQESUSP  EQUOVR ,,b,WQEXA
WQEAUTH  EQUOVR ,,b,WQEXA
.*
.* WQEAVAIL - BUFFER STATUS FLAGS
WQEBUFA  EQUOVR ,,b,WQEAVAIL
WQEBUFB  EQUOVR ,,b,WQEAVAIL
WQEBUFC  EQUOVR ,,b,WQEAVAIL
WQEBUFD  EQUOVR ,,b,WQEAVAIL
WQEBUFE  EQUOVR ,,b,WQEAVAIL
WQEBUFF  EQUOVR ,,b,WQEAVAIL
WQEBUFG  EQUOVR ,,b,WQEAVAIL
WQEMTRCD EQUOVR ,,b,WQEAVAIL
.*
.* WQEMCSF1 - FIRST BYTE OF MCS FLAGS
WQEMCSA  EQUOVR ,,b,WQEMCSF1
WQEMCSB  EQUOVR ,,b,WQEMCSF1
WQEMCSC  EQUOVR ,,b,WQEMCSF1
WQEMCSD  EQUOVR ,,b,WQEMCSF1
WQEMCSE  EQUOVR ,,b,WQEMCSF1
WQEMCSFF EQUOVR ,,b,WQEMCSF1
WQEMCSG  EQUOVR ,,b,WQEMCSF1
WQEMCSH  EQUOVR ,,b,WQEMCSF1
.*
.* WQEMCSF2 - SECOND BYTE OF MCS FLAGS
WQEMCSI  EQUOVR ,,b,WQEMCSF2
WQEMCSJ  EQUOVR ,,b,WQEMCSF2
WQEMCSK  EQUOVR ,,b,WQEMCSF2
WQEMCSL  EQUOVR ,,b,WQEMCSF2
WQEMCSM  EQUOVR ,,b,WQEMCSF2
WQEMCSN  EQUOVR ,,b,WQEMCSF2
WQEMCSO  EQUOVR ,,b,WQEMCSF2
WQEMCSP  EQUOVR ,,b,WQEMCSF2
.*
.* WQEMSGTP - FIRST BYTE OF MESSAGE TYPE FLAGS
WQEMSGTA EQUOVR ,,b,WQEMSGTP
WQEMSGTB EQUOVR ,,b,WQEMSGTP
WQEMSGTC EQUOVR ,,b,WQEMSGTP
WQEMSGTD EQUOVR ,,b,WQEMSGTP
WQERSV13 EQUOVR ,,b,WQEMSGTP
WQEMSGTF EQUOVR ,,b,WQEMSGTP
WQERSV14 EQUOVR ,,b,WQEMSGTP
WQERSV15 EQUOVR ,,b,WQEMSGTP
.*
.* WQEROUT1 - 1ST BYTE OF ROUTING CODES
WQEROUTA EQUOVR ,,b,WQEROUT1
WQEROUTB EQUOVR ,,b,WQEROUT1
WQEROUTC EQUOVR ,,b,WQEROUT1
WQEROUTD EQUOVR ,,b,WQEROUT1
WQEROUTE EQUOVR ,,b,WQEROUT1
WQEROUTF EQUOVR ,,b,WQEROUT1
WQEROUTG EQUOVR ,,b,WQEROUT1
WQEROUTH EQUOVR ,,b,WQEROUT1
.*
.* WQEROUT2 - 2ND BYTE OF ROUTING CODES
WQEROUTI EQUOVR ,,b,WQEROUT2
WQEROUTJ EQUOVR ,,b,WQEROUT2
WQEROUTK EQUOVR ,,b,WQEROUT2
WQEROUTL EQUOVR ,,b,WQEROUT2
WQEROUTM EQUOVR ,,b,WQEROUT2
WQEROUTN EQUOVR ,,b,WQEROUT2
WQEROUTO EQUOVR ,,b,WQEROUT2
WQEROUTP EQUOVR ,,b,WQEROUT2
.*
.* WQEFLG3 - MISCELLANEOUS FLAGS
WQEDLVRD EQUOVR ,,b,WQEFLG3
WQEDNDWQ EQUOVR ,,b,WQEFLG3
WQENSYL  EQUOVR ,,b,WQEFLG3
WQEJ3B1  EQUOVR ,,b,WQEFLG3
WQEJ3B2  EQUOVR ,,b,WQEFLG3
.*
.* WQEFLG1 - MISCELLANEOUS FLAGS
WQEFLG11 EQUOVR ,,b,WQEFLG1
WQERETAN EQUOVR ,,b,WQEFLG1
WQENMOD  EQUOVR ,,b,WQEFLG1
WQESQMC  EQUOVR ,,b,WQEFLG1
WQENOJLG EQUOVR ,,b,WQEFLG1
WQEAUTOV EQUOVR ,,b,WQEFLG1
WQEPPNA  EQUOVR ,,b,WQEFLG1
WQERISS  EQUOVR ,,b,WQEFLG1
.*
.* WQEDC1 - FIRST BYTE OF DESCRIPTOR CODES
WQEDCA   EQUOVR ,,b,WQEDC1
WQEDCB   EQUOVR ,,b,WQEDC1
WQEDCC   EQUOVR ,,b,WQEDC1
WQEDCD   EQUOVR ,,b,WQEDC1
WQEDCE   EQUOVR ,,b,WQEDC1
WQEDCF   EQUOVR ,,b,WQEDC1
WQEDCG   EQUOVR ,,b,WQEDC1
WQEDCH   EQUOVR ,,b,WQEDC1
.*
.* WQEDC2 - SECOND BYTE OF DESCRIPTOR CODES
WQEDCI   EQUOVR ,,b,WQEDC2
WQEDCJ   EQUOVR ,,b,WQEDC2
WQEDCK   EQUOVR ,,b,WQEDC2
WQEDCL   EQUOVR ,,b,WQEDC2
WQEDCM   EQUOVR ,,b,WQEDC2
WQERSV23 EQUOVR ,,b,WQEDC2
WQERSV24 EQUOVR ,,b,WQEDC2
WQERSV25 EQUOVR ,,b,WQEDC2
.*
.* WQEVRSN - VERSION LEVEL
WQESP211 EQUOVR ,,v,WQEVRSN
WQESP220 EQUOVR ,,v,WQEVRSN
WQESP410 EQUOVR ,,v,WQEVRSN
WQESP422 EQUOVR ,,v,WQEVRSN
WQESP440 EQUOVR ,,v,WQEVRSN
WQEVRID  EQUOVR ,,v,WQEVRSN
.*
.* WQEFLG2 - MISC FLAGS BYTE 2
WQEHNDL  EQUOVR ,,b,WQEFLG2
WQERSV98 EQUOVR ,,b,WQEFLG2
WQEFORN  EQUOVR ,,b,WQEFLG2
WQETRANS EQUOVR ,,b,WQEFLG2
WQESUPSJ EQUOVR ,,b,WQEFLG2
WQEQXSYS EQUOVR ,,b,WQEFLG2
WQEQEXT  EQUOVR ,,b,WQEFLG2
WQEQMCS  EQUOVR ,,b,WQEFLG2
.*
.* WQEMCSE1 - FIRST BYTE
WQEEBUSY EQUOVR ,,b,WQEMCSE1
WQEECONS EQUOVR ,,b,WQEMCSE1
WQEEDOMI EQUOVR ,,b,WQEMCSE1
WQEECONN EQUOVR ,,b,WQEMCSE1
WQEEWTOR EQUOVR ,,b,WQEMCSE1
WQEEPRIO EQUOVR ,,b,WQEMCSE1
WQECNM   EQUOVR ,,b,WQEMCSE1
.*
.* WQEMCSE2 - SECOND BYTE OF EXT MCS FLAGS
WQEETXTA EQUOVR ,,b,WQEMCSE2
WQERSV99 EQUOVR ,,b,WQEMCSE2
WQEEDBCS EQUOVR ,,b,WQEMCSE2
WQEEIDBC EQUOVR ,,b,WQEMCSE2
WQERSV1B EQUOVR ,,b,WQEMCSE2
WQEESYNC EQUOVR ,,b,WQEMCSE2
WQERSV1C EQUOVR ,,b,WQEMCSE2
WQERSV1D EQUOVR ,,b,WQEMCSE2
.*
.* WQERFB1 - REQUEST FLAGS BYTE ONE
WQERCMT  EQUOVR ,,b,WQERFB1
WQERCRC  EQUOVR ,,b,WQERFB1
WQERCDC  EQUOVR ,,b,WQERFB1
WQERQPC  EQUOVR ,,b,WQERFB1
WQERQUN  EQUOVR ,,b,WQERFB1
WQERQRC  EQUOVR ,,b,WQERFB1
WQERCCN  EQUOVR ,,b,WQERFB1
WQERPML  EQUOVR ,,b,WQERFB1
.*
.* WQERFB2 - REQUEST FLAGS BYTE TWO
WQERDTM  EQUOVR ,,b,WQERFB2
WQEROMS  EQUOVR ,,b,WQERFB2
WQERFHC  EQUOVR ,,b,WQERFB2
WQERNHC  EQUOVR ,,b,WQERFB2
WQERHCO  EQUOVR ,,b,WQERFB2
WQERBCA  EQUOVR ,,b,WQERFB2
WQERBCN  EQUOVR ,,b,WQERFB2
WQERNRT  EQUOVR ,,b,WQERFB2
.*
.* WQERFB3 - REQUEST FLAGS BYTE THREE
WQERRET  EQUOVR ,,b,WQERFB3
WQERCKY  EQUOVR ,,b,WQERFB3
WQERCFC  EQUOVR ,,b,WQERFB3
WQERCMF  EQUOVR ,,b,WQERFB3
WQERANO  EQUOVR ,,b,WQERFB3
WQERAYS  EQUOVR ,,b,WQERFB3
WQEQHCO  EQUOVR ,,b,WQERFB3
WQEHUD   EQUOVR ,,b,WQERFB3
.*
.* WQESUPB - SUPPRESSION BYTE
WQESNSV  EQUOVR ,,b,WQESUPB
WQESEER  EQUOVR ,,b,WQESUPB
WQESNSI  EQUOVR ,,b,WQESUPB
WQESAUT  EQUOVR ,,b,WQESUPB
WQESQED  EQUOVR ,,b,WQESUPB
WQESSSI  EQUOVR ,,b,WQESUPB
WQESWTO  EQUOVR ,,b,WQESUPB
WQESMPF  EQUOVR ,,b,WQESUPB
.*
.* WQEML1 - FIRST BYTE OF LEVEL INDICATOR
WQEMLR   EQUOVR ,,b,WQEML1
WQEMLIA  EQUOVR ,,b,WQEML1
WQEMLCE  EQUOVR ,,b,WQEML1
WQEMLE   EQUOVR ,,b,WQEML1
WQEMLI   EQUOVR ,,b,WQEML1
WQEMLBC  EQUOVR ,,b,WQEML1
.*
.* WQEERC1 - BYTE 1  - EXTENDED ROUTING CODES
WQERC1   EQUOVR ,,b,WQEERC1
WQERC2   EQUOVR ,,b,WQEERC1
WQERC3   EQUOVR ,,b,WQEERC1
WQERC4   EQUOVR ,,b,WQEERC1
WQERC5   EQUOVR ,,b,WQEERC1
WQERC6   EQUOVR ,,b,WQEERC1
WQERC7   EQUOVR ,,b,WQEERC1
WQERC8   EQUOVR ,,b,WQEERC1
.*
.* WQEERC2 - BYTE 2  - EXTENDED ROUTING CODES
WQERC9   EQUOVR ,,b,WQEERC2
WQERC10  EQUOVR ,,b,WQEERC2
WQERC11  EQUOVR ,,b,WQEERC2
WQERC12  EQUOVR ,,b,WQEERC2
WQERC13  EQUOVR ,,b,WQEERC2
WQERC14  EQUOVR ,,b,WQEERC2
WQERC15  EQUOVR ,,b,WQEERC2
WQERC16  EQUOVR ,,b,WQEERC2
.*
.* WQEERC3 - BYTE 3  - EXTENDED ROUTING CODES
WQERC17  EQUOVR ,,b,WQEERC3
WQERC18  EQUOVR ,,b,WQEERC3
WQERC19  EQUOVR ,,b,WQEERC3
WQERC20  EQUOVR ,,b,WQEERC3
WQERC21  EQUOVR ,,b,WQEERC3
WQERC22  EQUOVR ,,b,WQEERC3
WQERC23  EQUOVR ,,b,WQEERC3
WQERC24  EQUOVR ,,b,WQEERC3
.*
.* WQEERC4 - BYTE 4  - EXTENDED ROUTING CODES
WQERC25  EQUOVR ,,b,WQEERC4
WQERC26  EQUOVR ,,b,WQEERC4
WQERC27  EQUOVR ,,b,WQEERC4
WQERC28  EQUOVR ,,b,WQEERC4
WQERC29  EQUOVR ,,b,WQEERC4
WQERC30  EQUOVR ,,b,WQEERC4
WQERC31  EQUOVR ,,b,WQEERC4
WQERC32  EQUOVR ,,b,WQEERC4
.*
.* WQEERC5 - BYTE 5  - EXTENDED ROUTING CODES
WQERC33  EQUOVR ,,b,WQEERC5
WQERC34  EQUOVR ,,b,WQEERC5
WQERC35  EQUOVR ,,b,WQEERC5
WQERC36  EQUOVR ,,b,WQEERC5
WQERC37  EQUOVR ,,b,WQEERC5
WQERC38  EQUOVR ,,b,WQEERC5
WQERC39  EQUOVR ,,b,WQEERC5
WQERC40  EQUOVR ,,b,WQEERC5
.*
.* WQEERC6 - BYTE 6  - EXTENDED ROUTING CODES
WQERC41  EQUOVR ,,b,WQEERC6
WQERC42  EQUOVR ,,b,WQEERC6
WQERC43  EQUOVR ,,b,WQEERC6
WQERC44  EQUOVR ,,b,WQEERC6
WQERC45  EQUOVR ,,b,WQEERC6
WQERC46  EQUOVR ,,b,WQEERC6
WQERC47  EQUOVR ,,b,WQEERC6
WQERC48  EQUOVR ,,b,WQEERC6
.*
.* WQEERC7 - BYTE 7  - EXTENDED ROUTING CODES
WQERC49  EQUOVR ,,b,WQEERC7
WQERC50  EQUOVR ,,b,WQEERC7
WQERC51  EQUOVR ,,b,WQEERC7
WQERC52  EQUOVR ,,b,WQEERC7
WQERC53  EQUOVR ,,b,WQEERC7
WQERC54  EQUOVR ,,b,WQEERC7
WQERC55  EQUOVR ,,b,WQEERC7
WQERC56  EQUOVR ,,b,WQEERC7
.*
.* WQEERC8 - BYTE 8  - EXTENDED ROUTING CODES
WQERC57  EQUOVR ,,b,WQEERC8
WQERC58  EQUOVR ,,b,WQEERC8
WQERC59  EQUOVR ,,b,WQEERC8
WQERC60  EQUOVR ,,b,WQEERC8
WQERC61  EQUOVR ,,b,WQEERC8
WQERC62  EQUOVR ,,b,WQEERC8
WQERC63  EQUOVR ,,b,WQEERC8
WQERC64  EQUOVR ,,b,WQEERC8
.*
.* WQEERC9 - BYTE 9  - EXTENDED ROUTING CODES
WQERC65  EQUOVR ,,b,WQEERC9
WQERC66  EQUOVR ,,b,WQEERC9
WQERC67  EQUOVR ,,b,WQEERC9
WQERC68  EQUOVR ,,b,WQEERC9
WQERC69  EQUOVR ,,b,WQEERC9
WQERC70  EQUOVR ,,b,WQEERC9
WQERC71  EQUOVR ,,b,WQEERC9
WQERC72  EQUOVR ,,b,WQEERC9
.*
.* WQEERC10 - BYTE 10 - EXTENDED ROUTING CODES
WQERC73  EQUOVR ,,b,WQEERC10
WQERC74  EQUOVR ,,b,WQEERC10
WQERC75  EQUOVR ,,b,WQEERC10
WQERC76  EQUOVR ,,b,WQEERC10
WQERC77  EQUOVR ,,b,WQEERC10
WQERC78  EQUOVR ,,b,WQEERC10
WQERC79  EQUOVR ,,b,WQEERC10
WQERC80  EQUOVR ,,b,WQEERC10
.*
.* WQEERC11 - BYTE 11 - EXTENDED ROUTING CODES
WQERC81  EQUOVR ,,b,WQEERC11
WQERC82  EQUOVR ,,b,WQEERC11
WQERC83  EQUOVR ,,b,WQEERC11
WQERC84  EQUOVR ,,b,WQEERC11
WQERC85  EQUOVR ,,b,WQEERC11
WQERC86  EQUOVR ,,b,WQEERC11
WQERC87  EQUOVR ,,b,WQEERC11
WQERC88  EQUOVR ,,b,WQEERC11
.*
.* WQEERC12 - BYTE 12 - EXTENDED ROUTING CODES
WQERC89  EQUOVR ,,b,WQEERC12
WQERC90  EQUOVR ,,b,WQEERC12
WQERC91  EQUOVR ,,b,WQEERC12
WQERC92  EQUOVR ,,b,WQEERC12
WQERC93  EQUOVR ,,b,WQEERC12
WQERC94  EQUOVR ,,b,WQEERC12
WQERC95  EQUOVR ,,b,WQEERC12
WQERC96  EQUOVR ,,b,WQEERC12
.*
.* WQEERC13 - BYTE 13 - EXTENDED ROUTING CODES
WQERC97  EQUOVR ,,b,WQEERC13
WQERC98  EQUOVR ,,b,WQEERC13
WQERC99  EQUOVR ,,b,WQEERC13
WQERC100 EQUOVR ,,b,WQEERC13
WQERC101 EQUOVR ,,b,WQEERC13
WQERC102 EQUOVR ,,b,WQEERC13
WQERC103 EQUOVR ,,b,WQEERC13
WQERC104 EQUOVR ,,b,WQEERC13
.*
.* WQEERC14 - BYTE 14 - EXTENDED ROUTING CODES
WQERC105 EQUOVR ,,b,WQEERC14
WQERC106 EQUOVR ,,b,WQEERC14
WQERC107 EQUOVR ,,b,WQEERC14
WQERC108 EQUOVR ,,b,WQEERC14
WQERC109 EQUOVR ,,b,WQEERC14
WQERC110 EQUOVR ,,b,WQEERC14
WQERC111 EQUOVR ,,b,WQEERC14
WQERC112 EQUOVR ,,b,WQEERC14
.*
.* WQEERC15 - BYTE 15 - EXTENDED ROUTING CODES
WQERC113 EQUOVR ,,b,WQEERC15
WQERC114 EQUOVR ,,b,WQEERC15
WQERC115 EQUOVR ,,b,WQEERC15
WQERC116 EQUOVR ,,b,WQEERC15
WQERC117 EQUOVR ,,b,WQEERC15
WQERC118 EQUOVR ,,b,WQEERC15
WQERC119 EQUOVR ,,b,WQEERC15
WQERC120 EQUOVR ,,b,WQEERC15
.*
.* WQEERC16 - BYTE 16 - EXTENDED ROUTING CODES
WQERC121 EQUOVR ,,b,WQEERC16
WQERC122 EQUOVR ,,b,WQEERC16
WQERC123 EQUOVR ,,b,WQEERC16
WQERC124 EQUOVR ,,b,WQEERC16
WQERC125 EQUOVR ,,b,WQEERC16
WQERC126 EQUOVR ,,b,WQEERC16
WQERC127 EQUOVR ,,b,WQEERC16
WQERC128 EQUOVR ,,b,WQEERC16
.*
.* WQEERF1 - REQUEST FLAGS BYTE ONE
WQEEMRY  EQUOVR ,,b,WQEERF1
WQEEMRN  EQUOVR ,,b,WQEERF1
WQEEMCO  EQUOVR ,,b,WQEERF1
WQEEMHI  EQUOVR ,,b,WQEERF1
WQEEMIN  EQUOVR ,,b,WQEERF1
.*
.* WQEXIF1 - MISC AND MINOR ERROR FLAG BYTE 1
WQEXTTR  EQUOVR ,,b,WQEXIF1
WQEXNVT  EQUOVR ,,b,WQEXIF1
WQEXMER  EQUOVR ,,b,WQEXIF1
WQEXIRM  EQUOVR ,,b,WQEXIF1
WQEDMDB  EQUOVR ,,b,WQEXIF1
.*
.* WQEXIF2 - MISC AND MINOR ERROR FLAG BYTE 2
WQEQONLY EQUOVR ,,b,WQEXIF2
WQEAMRFO EQUOVR ,,b,WQEXIF2
WQEAMRFA EQUOVR ,,b,WQEXIF2
WQEQD    EQUOVR ,,b,WQEXIF2
WQEWTPR  EQUOVR ,,b,WQEXIF2
WQEMFR   EQUOVR ,,b,WQEXIF2
WQEAMRFR EQUOVR ,,b,WQEXIF2
WQEQTSYS EQUOVR ,,b,WQEXIF2
.*
.* WQEBENIP -  BRANCH ENTRY/NIP FLAGS
WQEDOMD  EQUOVR ,,b,WQEBENIP
WQENBEW  EQUOVR ,,b,WQEBENIP
WQENHABD EQUOVR ,,b,WQEBENIP
WQEASCB  EQUOVR ,,b,WQEBENIP
.*
.* WQEMISC - MISCELLANEOUS ROUTING INFORMATION
WQEUD    EQUOVR ,,b,WQEMISC
WQEFUDO  EQUOVR ,,b,WQEMISC
WQEFIDO  EQUOVR ,,b,WQEMISC
WQEAUTO  EQUOVR ,,b,WQEMISC
WQEHC    EQUOVR ,,b,WQEMISC
.*
.* WQEMISCC - MISCELLANEOUS CONTROL PROGRAM FLAGS
WQESPVD  EQUOVR ,,b,WQEMISCC
WQEPRIV  EQUOVR ,,b,WQEMISCC
WQEQNLY  EQUOVR ,,b,WQEMISCC
.*
.* WMJMMLW - MLWTO FLAGS
WMJMMLWA EQUOVR ,,b,WMJMMLW
WMJMMLWB EQUOVR ,,b,WMJMMLW
WMJMMLWC EQUOVR ,,b,WMJMMLW
WMJMMLWD EQUOVR ,,b,WMJMMLW
WMJMMLWE EQUOVR ,,b,WMJMMLW
WMJMMLWF EQUOVR ,,b,WMJMMLW
WMJMMLWG EQUOVR ,,b,WMJMMLW
WMJMMLWH EQUOVR ,,b,WMJMMLW
.*
.* WMJMSER1 - 1ST BYTE OF LINE CONTROL FLAGS
WMJMSERA EQUOVR ,,b,WMJMSER1
WMJMSERB EQUOVR ,,b,WMJMSER1
WMJMSERC EQUOVR ,,b,WMJMSER1
WMJMSERD EQUOVR ,,b,WMJMSER1
WMJMSERE EQUOVR ,,b,WMJMSER1
WQERSV31 EQUOVR ,,b,WMJMSER1
WQERSV32 EQUOVR ,,b,WMJMSER1
WQERSV33 EQUOVR ,,b,WMJMSER1
.*
.* WMJMLTY1 - 1ST BYTE OF LINE TYPE FLAGS
WMJMLTYA EQUOVR ,,b,WMJMLTY1
WMJMLTYB EQUOVR ,,b,WMJMLTY1
WMJMLTYC EQUOVR ,,b,WMJMLTY1
WMJMLTYD EQUOVR ,,b,WMJMLTY1
WQERSV35 EQUOVR ,,b,WMJMLTY1
WQERSV36 EQUOVR ,,b,WMJMLTY1
WQERSV37 EQUOVR ,,b,WMJMLTY1
WQERSV38 EQUOVR ,,b,WMJMLTY1
.*
.* WMJMECBF - STATUS FLAGS
WMJMWAIT EQUOVR ,,b,WMJMECBF
WMJMMAJD EQUOVR ,,b,WMJMECBF
WMJMCONS EQUOVR ,,b,WMJMECBF
WMJMPSB1 EQUOVR ,,b,WMJMECBF
WMJMRV9A EQUOVR ,,b,WMJMECBF
WMJMWTP  EQUOVR ,,b,WMJMECBF
WQERSVD6 EQUOVR ,,b,WMJMECBF
WQERSVD7 EQUOVR ,,b,WMJMECBF
.*
.* WMJMDSP - DISPOSITION FLAGS
WMJMDSPA EQUOVR ,,b,WMJMDSP
WMJMDSPB EQUOVR ,,b,WMJMDSP
WMJMDSPC EQUOVR ,,b,WMJMDSP
WMJMDSPD EQUOVR ,,b,WMJMDSP
WMJMDSPE EQUOVR ,,b,WMJMDSP
WMJMDSPF EQUOVR ,,b,WMJMDSP
WMJMDSPG EQUOVR ,,b,WMJMDSP
WMJMDSPH EQUOVR ,,b,WMJMDSP
.*
.* WMJMBUF - BUFFER STATUS FLAGS
WMJMBUFA EQUOVR ,,b,WMJMBUF
WMJMBUFB EQUOVR ,,b,WMJMBUF
WMJMBUFC EQUOVR ,,b,WMJMBUF
WMJMBUFD EQUOVR ,,b,WMJMBUF
WMJMBUFE EQUOVR ,,b,WMJMBUF
WMJMBUFF EQUOVR ,,b,WMJMBUF
WMJMBUFG EQUOVR ,,b,WMJMBUF
WMJMTRCD EQUOVR ,,b,WMJMBUF
.*
.* WMJMCS1 - 1ST BYTE OF MCS FLAGS
WMJMCS1A EQUOVR ,,b,WMJMCS1
WMJMCS1B EQUOVR ,,b,WMJMCS1
WMJMCS1C EQUOVR ,,b,WMJMCS1
WMJMCS1D EQUOVR ,,b,WMJMCS1
WMJMCS1E EQUOVR ,,b,WMJMCS1
WMJMCS1F EQUOVR ,,b,WMJMCS1
WMJMCS1G EQUOVR ,,b,WMJMCS1
WMJMCS1H EQUOVR ,,b,WMJMCS1
.*
.* WMJMCS2 - 2ND BYTE OF MCS FLAGS
WMJMCS2A EQUOVR ,,b,WMJMCS2
WMJMCS2B EQUOVR ,,b,WMJMCS2
WMJMCS2C EQUOVR ,,b,WMJMCS2
WMJMCS2D EQUOVR ,,b,WMJMCS2
WMJMCS2E EQUOVR ,,b,WMJMCS2
WMJMCS2F EQUOVR ,,b,WMJMCS2
WMJMCS2G EQUOVR ,,b,WMJMCS2
WMJMCS2H EQUOVR ,,b,WMJMCS2
.*
.* WMJMMT1 - 1ST BYTE OF MESSAGE TYPE FLAGS
WMJMMT1A EQUOVR ,,b,WMJMMT1
WMJMMT1B EQUOVR ,,b,WMJMMT1
WQERSVA6 EQUOVR ,,b,WMJMMT1
WMJMMT1D EQUOVR ,,b,WMJMMT1
WQERSV50 EQUOVR ,,b,WMJMMT1
WMJMMT1F EQUOVR ,,b,WMJMMT1
WQERSV51 EQUOVR ,,b,WMJMMT1
WQERSV52 EQUOVR ,,b,WMJMMT1
.*
.* WMJMRCT1 - 1ST BYTE OF ROUTING CODES
WMJMRCTA EQUOVR ,,b,WMJMRCT1
WMJMRCTB EQUOVR ,,b,WMJMRCT1
WMJMRCTC EQUOVR ,,b,WMJMRCT1
WMJMRCTD EQUOVR ,,b,WMJMRCT1
WMJMRCTE EQUOVR ,,b,WMJMRCT1
WMJMRCTF EQUOVR ,,b,WMJMRCT1
WMJMRCTG EQUOVR ,,b,WMJMRCT1
WMJMRCTH EQUOVR ,,b,WMJMRCT1
.*
.* WMJMRCT2 - 2ND BYTE OF ROUTING CODES
WMJMRCTI EQUOVR ,,b,WMJMRCT2
WMJMRCTJ EQUOVR ,,b,WMJMRCT2
WMJMRCTK EQUOVR ,,b,WMJMRCT2
WMJMRCTL EQUOVR ,,b,WMJMRCT2
WMJMRCTM EQUOVR ,,b,WMJMRCT2
WMJMRCTN EQUOVR ,,b,WMJMRCT2
WMJMRCTO EQUOVR ,,b,WMJMRCT2
WMJMRCTP EQUOVR ,,b,WMJMRCT2
.*
.* WMJMFLG3 - MISCELLANEOUS FLAGS
WMJDLVRD EQUOVR ,,b,WMJMFLG3
WMJDNDWQ EQUOVR ,,b,WMJMFLG3
WMJNSYL  EQUOVR ,,b,WMJMFLG3
WMJJ3B1  EQUOVR ,,b,WMJMFLG3
WMJJ3B2  EQUOVR ,,b,WMJMFLG3
.*
.* WMJFLG1 - MISCELLANEOUS FLAGS
WMJFLG11 EQUOVR ,,b,WMJFLG1
WMJMRETN EQUOVR ,,b,WMJFLG1
WMJMNMOD EQUOVR ,,b,WMJFLG1
WMJMSQMC EQUOVR ,,b,WMJFLG1
WMJNOJLG EQUOVR ,,b,WMJFLG1
WMJAUTOV EQUOVR ,,b,WMJFLG1
WMJPPNA  EQUOVR ,,b,WMJFLG1
WMJMRISS EQUOVR ,,b,WMJFLG1
.*
.* WMJMDEC1 - 1ST BYTE OF DESCRIPTOR CODES
WMJMDECA EQUOVR ,,b,WMJMDEC1
WMJMDECB EQUOVR ,,b,WMJMDEC1
WMJMDECC EQUOVR ,,b,WMJMDEC1
WMJMDECD EQUOVR ,,b,WMJMDEC1
WMJMDECE EQUOVR ,,b,WMJMDEC1
WMJMDECF EQUOVR ,,b,WMJMDEC1
WMJMDECG EQUOVR ,,b,WMJMDEC1
WMJMDECH EQUOVR ,,b,WMJMDEC1
.*
.* WMJMDEC2 - 2ND BYTE OF DESCRIPTOR CODES
WMJMDECI EQUOVR ,,b,WMJMDEC2
WMJMDECJ EQUOVR ,,b,WMJMDEC2
WMJMDECK EQUOVR ,,b,WMJMDEC2
WMJMDECL EQUOVR ,,b,WMJMDEC2
WMJMDECM EQUOVR ,,b,WMJMDEC2
WQERSV59 EQUOVR ,,b,WMJMDEC2
WQERSV60 EQUOVR ,,b,WMJMDEC2
WQERSV61 EQUOVR ,,b,WMJMDEC2
.*
.* WMJMFLG2 - MISC FLAGS BYTE 2
WMJMHNDL EQUOVR ,,b,WMJMFLG2
WMJMLCPL EQUOVR ,,b,WMJMFLG2
WMJMFORN EQUOVR ,,b,WMJMFLG2
WMJMTRAN EQUOVR ,,b,WMJMFLG2
WMJSUPSJ EQUOVR ,,b,WMJMFLG2
WMJQXSYS EQUOVR ,,b,WMJMFLG2
WMJQEXT  EQUOVR ,,b,WMJMFLG2
WMJQMCS  EQUOVR ,,b,WMJMFLG2
.*
.* WMJMCE1 - FIRST BYTE
WMJEBUSY EQUOVR ,,b,WMJMCE1
WMJECONS EQUOVR ,,b,WMJMCE1
WMJEDOMI EQUOVR ,,b,WMJMCE1
WMJECONN EQUOVR ,,b,WMJMCE1
WMJEWTOR EQUOVR ,,b,WMJMCE1
WMJEPRIO EQUOVR ,,b,WMJMCE1
WMJMCNM  EQUOVR ,,b,WMJMCE1
.*
.* WMJMCE2 - SECOND BYTE OF EXT MCS FLAGS
WMJMTXTA EQUOVR ,,b,WMJMCE2
WMJMRV99 EQUOVR ,,b,WMJMCE2
WMJMRV9B EQUOVR ,,b,WMJMCE2
WMJMRV9C EQUOVR ,,b,WMJMCE2
WMJMRV1A EQUOVR ,,b,WMJMCE2
WMJMRV1B EQUOVR ,,b,WMJMCE2
WMJMRV1C EQUOVR ,,b,WMJMCE2
WMJMRV1D EQUOVR ,,b,WMJMCE2
.*
.* WMJMRFB1 - REQUEST FLAGS BYTE ONE
WMJMRCMT EQUOVR ,,b,WMJMRFB1
WMJMRCRC EQUOVR ,,b,WMJMRFB1
WMJMRCDC EQUOVR ,,b,WMJMRFB1
WMJMRQPC EQUOVR ,,b,WMJMRFB1
WMJMRQUN EQUOVR ,,b,WMJMRFB1
WMJMRQRC EQUOVR ,,b,WMJMRFB1
WMJMRCCN EQUOVR ,,b,WMJMRFB1
WMJMRPML EQUOVR ,,b,WMJMRFB1
.*
.* WMJMRFB2 - REQUEST FLAGS BYTE TWO
WMJMRDTM EQUOVR ,,b,WMJMRFB2
WMJMROMS EQUOVR ,,b,WMJMRFB2
WMJMRFHC EQUOVR ,,b,WMJMRFB2
WMJMRFNC EQUOVR ,,b,WMJMRFB2
WMJMRHCO EQUOVR ,,b,WMJMRFB2
WMJMRBCA EQUOVR ,,b,WMJMRFB2
WMJMRBCN EQUOVR ,,b,WMJMRFB2
WMJMRNRT EQUOVR ,,b,WMJMRFB2
.*
.* WMJMRFB3 - REQUEST FLAGS BYTE THREE
WMJMRRET EQUOVR ,,b,WMJMRFB3
WMJMRCKY EQUOVR ,,b,WMJMRFB3
WMJMRCFC EQUOVR ,,b,WMJMRFB3
WMJMRCMF EQUOVR ,,b,WMJMRFB3
WMJRANO  EQUOVR ,,b,WMJMRFB3
WMJRAYS  EQUOVR ,,b,WMJMRFB3
WMJMQHCO EQUOVR ,,b,WMJMRFB3
WMJMHUD  EQUOVR ,,b,WMJMRFB3
.*
.* WMJMSUPB - SUPPRESSION BYTE
WMJMSNSV EQUOVR ,,b,WMJMSUPB
WMJMSEER EQUOVR ,,b,WMJMSUPB
WMJMSNSI EQUOVR ,,b,WMJMSUPB
WMJMSAUT EQUOVR ,,b,WMJMSUPB
WMJMSQED EQUOVR ,,b,WMJMSUPB
WMJMSSSI EQUOVR ,,b,WMJMSUPB
WMJMSWTO EQUOVR ,,b,WMJMSUPB
WMJMSMPF EQUOVR ,,b,WMJMSUPB
.*
.* WMJMML1 - FIRST BYTE OF LEVEL INDICATORS
WMJMMLR  EQUOVR ,,b,WMJMML1
WMJMMLIA EQUOVR ,,b,WMJMML1
WMJMMLCE EQUOVR ,,b,WMJMML1
WMJMMLE  EQUOVR ,,b,WMJMML1
WMJMMLI  EQUOVR ,,b,WMJMML1
WMJMMLBC EQUOVR ,,b,WMJMML1
.*
.* WMJMRC1 - BYTE 1  - EXTENDED ROUTING CODES
WMJRC1   EQUOVR ,,b,WMJMRC1
WMJRC2   EQUOVR ,,b,WMJMRC1
WMJRC3   EQUOVR ,,b,WMJMRC1
WMJRC4   EQUOVR ,,b,WMJMRC1
WMJRC5   EQUOVR ,,b,WMJMRC1
WMJRC6   EQUOVR ,,b,WMJMRC1
WMJRC7   EQUOVR ,,b,WMJMRC1
WMJRC8   EQUOVR ,,b,WMJMRC1
.*
.* WMJMRC2 - BYTE 2  - EXTENDED ROUTING CODES
WMJRC9   EQUOVR ,,b,WMJMRC2
WMJRC10  EQUOVR ,,b,WMJMRC2
WMJRC11  EQUOVR ,,b,WMJMRC2
WMJRC12  EQUOVR ,,b,WMJMRC2
WMJRC13  EQUOVR ,,b,WMJMRC2
WMJRC14  EQUOVR ,,b,WMJMRC2
WMJRC15  EQUOVR ,,b,WMJMRC2
WMJRC16  EQUOVR ,,b,WMJMRC2
.*
.* WMJMRC3 - BYTE 3  - EXTENDED ROUTING CODES
WMJRC17  EQUOVR ,,b,WMJMRC3
WMJRC18  EQUOVR ,,b,WMJMRC3
WMJRC19  EQUOVR ,,b,WMJMRC3
WMJRC20  EQUOVR ,,b,WMJMRC3
WMJRC21  EQUOVR ,,b,WMJMRC3
WMJRC22  EQUOVR ,,b,WMJMRC3
WMJRC23  EQUOVR ,,b,WMJMRC3
WMJRC24  EQUOVR ,,b,WMJMRC3
.*
.* WMJMRC4 - BYTE 4  - EXTENDED ROUTING CODES
WMJRC25  EQUOVR ,,b,WMJMRC4
WMJRC26  EQUOVR ,,b,WMJMRC4
WMJRC27  EQUOVR ,,b,WMJMRC4
WMJRC28  EQUOVR ,,b,WMJMRC4
WMJRC29  EQUOVR ,,b,WMJMRC4
WMJRC30  EQUOVR ,,b,WMJMRC4
WMJRC31  EQUOVR ,,b,WMJMRC4
WMJRC32  EQUOVR ,,b,WMJMRC4
.*
.* WMJMRC5 - BYTE 5  - EXTENDED ROUTING CODES
WMJRC33  EQUOVR ,,b,WMJMRC5
WMJRC34  EQUOVR ,,b,WMJMRC5
WMJRC35  EQUOVR ,,b,WMJMRC5
WMJRC36  EQUOVR ,,b,WMJMRC5
WMJRC37  EQUOVR ,,b,WMJMRC5
WMJRC38  EQUOVR ,,b,WMJMRC5
WMJRC39  EQUOVR ,,b,WMJMRC5
WMJRC40  EQUOVR ,,b,WMJMRC5
.*
.* WMJMRC6 - BYTE 6  - EXTENDED ROUTING CODES
WMJRC41  EQUOVR ,,b,WMJMRC6
WMJRC42  EQUOVR ,,b,WMJMRC6
WMJRC43  EQUOVR ,,b,WMJMRC6
WMJRC44  EQUOVR ,,b,WMJMRC6
WMJRC45  EQUOVR ,,b,WMJMRC6
WMJRC46  EQUOVR ,,b,WMJMRC6
WMJRC47  EQUOVR ,,b,WMJMRC6
WMJRC48  EQUOVR ,,b,WMJMRC6
.*
.* WMJMRC7 - BYTE 7  - EXTENDED ROUTING CODES
WMJRC49  EQUOVR ,,b,WMJMRC7
WMJRC50  EQUOVR ,,b,WMJMRC7
WMJRC51  EQUOVR ,,b,WMJMRC7
WMJRC52  EQUOVR ,,b,WMJMRC7
WMJRC53  EQUOVR ,,b,WMJMRC7
WMJRC54  EQUOVR ,,b,WMJMRC7
WMJRC55  EQUOVR ,,b,WMJMRC7
WMJRC56  EQUOVR ,,b,WMJMRC7
.*
.* WMJMRC8 - BYTE 8  - EXTENDED ROUTING CODES
WMJRC57  EQUOVR ,,b,WMJMRC8
WMJRC58  EQUOVR ,,b,WMJMRC8
WMJRC59  EQUOVR ,,b,WMJMRC8
WMJRC60  EQUOVR ,,b,WMJMRC8
WMJRC61  EQUOVR ,,b,WMJMRC8
WMJRC62  EQUOVR ,,b,WMJMRC8
WMJRC63  EQUOVR ,,b,WMJMRC8
WMJRC64  EQUOVR ,,b,WMJMRC8
.*
.* WMJMRC9 - BYTE 9  - EXTENDED ROUTING CODES
WMJRC65  EQUOVR ,,b,WMJMRC9
WMJRC66  EQUOVR ,,b,WMJMRC9
WMJRC67  EQUOVR ,,b,WMJMRC9
WMJRC68  EQUOVR ,,b,WMJMRC9
WMJRC69  EQUOVR ,,b,WMJMRC9
WMJRC70  EQUOVR ,,b,WMJMRC9
WMJRC71  EQUOVR ,,b,WMJMRC9
WMJRC72  EQUOVR ,,b,WMJMRC9
.*
.* WMJMRC10 - BYTE 10 - EXTENDED ROUTING CODES
WMJRC73  EQUOVR ,,b,WMJMRC10
WMJRC74  EQUOVR ,,b,WMJMRC10
WMJRC75  EQUOVR ,,b,WMJMRC10
WMJRC76  EQUOVR ,,b,WMJMRC10
WMJRC77  EQUOVR ,,b,WMJMRC10
WMJRC78  EQUOVR ,,b,WMJMRC10
WMJRC79  EQUOVR ,,b,WMJMRC10
WMJRC80  EQUOVR ,,b,WMJMRC10
.*
.* WMJMRC11 - BYTE 11 - EXTENDED ROUTING CODES
WMJRC81  EQUOVR ,,b,WMJMRC11
WMJRC82  EQUOVR ,,b,WMJMRC11
WMJRC83  EQUOVR ,,b,WMJMRC11
WMJRC84  EQUOVR ,,b,WMJMRC11
WMJRC85  EQUOVR ,,b,WMJMRC11
WMJRC86  EQUOVR ,,b,WMJMRC11
WMJRC87  EQUOVR ,,b,WMJMRC11
WMJRC88  EQUOVR ,,b,WMJMRC11
.*
.* WMJMRC12 - BYTE 12 - EXTENDED ROUTING CODES
WMJRC89  EQUOVR ,,b,WMJMRC12
WMJRC90  EQUOVR ,,b,WMJMRC12
WMJRC91  EQUOVR ,,b,WMJMRC12
WMJRC92  EQUOVR ,,b,WMJMRC12
WMJRC93  EQUOVR ,,b,WMJMRC12
WMJRC94  EQUOVR ,,b,WMJMRC12
WMJRC95  EQUOVR ,,b,WMJMRC12
WMJRC96  EQUOVR ,,b,WMJMRC12
.*
.* WMJMRC13 - BYTE 13 - EXTENDED ROUTING CODES
WMJRC97  EQUOVR ,,b,WMJMRC13
WMJRC98  EQUOVR ,,b,WMJMRC13
WMJRC99  EQUOVR ,,b,WMJMRC13
WMJRC100 EQUOVR ,,b,WMJMRC13
WMJRC101 EQUOVR ,,b,WMJMRC13
WMJRC102 EQUOVR ,,b,WMJMRC13
WMJRC103 EQUOVR ,,b,WMJMRC13
WMJRC104 EQUOVR ,,b,WMJMRC13
.*
.* WMJMRC14 - BYTE 14 - EXTENDED ROUTING CODES
WMJRC105 EQUOVR ,,b,WMJMRC14
WMJRC106 EQUOVR ,,b,WMJMRC14
WMJRC107 EQUOVR ,,b,WMJMRC14
WMJRC108 EQUOVR ,,b,WMJMRC14
WMJRC109 EQUOVR ,,b,WMJMRC14
WMJRC110 EQUOVR ,,b,WMJMRC14
WMJRC111 EQUOVR ,,b,WMJMRC14
WMJRC112 EQUOVR ,,b,WMJMRC14
.*
.* WMJMRC15 - BYTE 15 - EXTENDED ROUTING CODES
WMJRC113 EQUOVR ,,b,WMJMRC15
WMJRC114 EQUOVR ,,b,WMJMRC15
WMJRC115 EQUOVR ,,b,WMJMRC15
WMJRC116 EQUOVR ,,b,WMJMRC15
WMJRC117 EQUOVR ,,b,WMJMRC15
WMJRC118 EQUOVR ,,b,WMJMRC15
WMJRC119 EQUOVR ,,b,WMJMRC15
WMJRC120 EQUOVR ,,b,WMJMRC15
.*
.* WMJMRC16 - BYTE 16 - EXTENDED ROUTING CODES
WMJRC121 EQUOVR ,,b,WMJMRC16
WMJRC122 EQUOVR ,,b,WMJMRC16
WMJRC123 EQUOVR ,,b,WMJMRC16
WMJRC124 EQUOVR ,,b,WMJMRC16
WMJRC125 EQUOVR ,,b,WMJMRC16
WMJRC126 EQUOVR ,,b,WMJMRC16
WMJRC127 EQUOVR ,,b,WMJMRC16
WMJRC128 EQUOVR ,,b,WMJMRC16
.*
.* WMJMERF1 - REQUEST FLAGS BYTE ONE
WMJEMRY  EQUOVR ,,b,WMJMERF1
WMJEMRN  EQUOVR ,,b,WMJMERF1
WMJEMCO  EQUOVR ,,b,WMJMERF1
WMJEMHI  EQUOVR ,,b,WMJMERF1
WMJEMIN  EQUOVR ,,b,WMJMERF1
.*
.* WMJMXIF1 - MISC AND MINOR ERROR FLAG BYTE 1
WMJMTXTR EQUOVR ,,b,WMJMXIF1
WMJMXNVT EQUOVR ,,b,WMJMXIF1
WMJMXMER EQUOVR ,,b,WMJMXIF1
WMJMXIRM EQUOVR ,,b,WMJMXIF1
WMJMDMDB EQUOVR ,,b,WMJMXIF1
.*
.* WMJMXIF2 - MISC AND MINOR ERROR FLAG BYTE 2
WMJQONLY EQUOVR ,,b,WMJMXIF2
WMJAMRFO EQUOVR ,,b,WMJMXIF2
WMJAMRFA EQUOVR ,,b,WMJMXIF2
WMJMQD   EQUOVR ,,b,WMJMXIF2
WMJMWTPR EQUOVR ,,b,WMJMXIF2
WMJMMFR  EQUOVR ,,b,WMJMXIF2
WMJAMRFR EQUOVR ,,b,WMJMXIF2
WMJQTSYS EQUOVR ,,b,WMJMXIF2
.*
.* WMJBENIP - BRANCH ENTRY/NIP FLAGS
WMJMDOMD EQUOVR ,,b,WMJBENIP
WMJMNBEW EQUOVR ,,b,WMJBENIP
WMJMHABD EQUOVR ,,b,WMJBENIP
WMJMASCB EQUOVR ,,b,WMJBENIP
.*
.* WMJMMISC - MISCELLANEOUS ROUTING INFORMATION
WMJMUD   EQUOVR ,,b,WMJMMISC
WMJMFUDO EQUOVR ,,b,WMJMMISC
WMJMFIDO EQUOVR ,,b,WMJMMISC
WMJMAUTO EQUOVR ,,b,WMJMMISC
WMJMHC   EQUOVR ,,b,WMJMMISC
.*
.* WMJMISCC - MISCELLANEOUS CONTROL PROGRAM FLAGS
WMJMSPVD EQUOVR ,,b,WMJMISCC
WMJMPRIV EQUOVR ,,b,WMJMISCC
WMJMQNLY EQUOVR ,,b,WMJMISCC
.*
.* WMNMML1 - MLWTO FLAGS FOR FIRST MESSAGE
WQERSV62 EQUOVR ,,b,WMNMML1
WMNMML1B EQUOVR ,,b,WMNMML1
WMNMML1C EQUOVR ,,b,WMNMML1
WMNMML1D EQUOVR ,,b,WMNMML1
WMNMML1E EQUOVR ,,b,WMNMML1
WMNMML1F EQUOVR ,,b,WMNMML1
WMNMML1G EQUOVR ,,b,WMNMML1
WMNMML1H EQUOVR ,,b,WMNMML1
.*
.* WMNMLT1 -  LINE TYPE FLAGS FOR FIRST MESSAGE
WMNMLT1A EQUOVR ,,b,WMNMLT1
WMNMLT1B EQUOVR ,,b,WMNMLT1
WMNMLT1C EQUOVR ,,b,WMNMLT1
WMNMLT1D EQUOVR ,,b,WMNMLT1
WQERSV63 EQUOVR ,,b,WMNMLT1
WQERSV64 EQUOVR ,,b,WMNMLT1
WQERSV65 EQUOVR ,,b,WMNMLT1
WQERSV66 EQUOVR ,,b,WMNMLT1
.*
.* WMNMST1 - STATUS FLAGS
WMNMTPD1 EQUOVR ,,b,WMNMST1
WMNMTRC1 EQUOVR ,,b,WMNMST1
WMNMWTP1 EQUOVR ,,b,WMNMST1
WQERSVB1 EQUOVR ,,b,WMNMST1
WQERSVB2 EQUOVR ,,b,WMNMST1
WQERSVB3 EQUOVR ,,b,WMNMST1
WQERSVB4 EQUOVR ,,b,WMNMST1
WQERSVB5 EQUOVR ,,b,WMNMST1
.*
.* WMNMMSF1 - MISCELLANEOUS FLAGS
WMNMRV99 EQUOVR ,,b,WMNMMSF1
WMNMRV9A EQUOVR ,,b,WMNMMSF1
WMNMTRAN EQUOVR ,,b,WMNMMSF1
.*
.* WMN1RFB1 - REQUEST FLAGS BYTE ONE
WMN1RCMT EQUOVR ,,b,WMN1RFB1
WMN1RPML EQUOVR ,,b,WMN1RFB1
.*
.* WMN1SUPB - SUPPRESSION BYTE
WMN1SNSV EQUOVR ,,b,WMN1SUPB
WMN1SEER EQUOVR ,,b,WMN1SUPB
WMN1SNSI EQUOVR ,,b,WMN1SUPB
WMN1SAUT EQUOVR ,,b,WMN1SUPB
WMN1SQED EQUOVR ,,b,WMN1SUPB
WMN1SSSI EQUOVR ,,b,WMN1SUPB
WMN1SWTO EQUOVR ,,b,WMN1SUPB
WMN1SMPF EQUOVR ,,b,WMN1SUPB
.*
.* WMNMML2 - MLWTO FLAGS FOR SECOND MESSAGE
WQERSV68 EQUOVR ,,b,WMNMML2
WMNMML2B EQUOVR ,,b,WMNMML2
WMNMML2C EQUOVR ,,b,WMNMML2
WMNMML2D EQUOVR ,,b,WMNMML2
WMNMML2E EQUOVR ,,b,WMNMML2
WQERSV69 EQUOVR ,,b,WMNMML2
WMNMML2G EQUOVR ,,b,WMNMML2
WMNMML2H EQUOVR ,,b,WMNMML2
.*
.* WMNMLT2 - LINE TYPE FLAGS FOR SECOND MESSAGE
WMNMLT2A EQUOVR ,,b,WMNMLT2
WMNMLT2B EQUOVR ,,b,WMNMLT2
WMNMLT2C EQUOVR ,,b,WMNMLT2
WMNMLT2D EQUOVR ,,b,WMNMLT2
WQERSV70 EQUOVR ,,b,WMNMLT2
WQERSV71 EQUOVR ,,b,WMNMLT2
WQERSV72 EQUOVR ,,b,WMNMLT2
WQERSV73 EQUOVR ,,b,WMNMLT2
.*
.* WMNMST2 - STATUS FLAGS
WMNMTPD2 EQUOVR ,,b,WMNMST2
WMNMTRC2 EQUOVR ,,b,WMNMST2
WMNMWTP2 EQUOVR ,,b,WMNMST2
WQERSVC1 EQUOVR ,,b,WMNMST2
WQERSVC2 EQUOVR ,,b,WMNMST2
WQERSVC3 EQUOVR ,,b,WMNMST2
WQERSVC4 EQUOVR ,,b,WMNMST2
WQERSVC5 EQUOVR ,,b,WMNMST2
.*
.* WMN2RFB1 - REQUEST FLAGS BYTE ONE
WMN2RCMT EQUOVR ,,b,WMN2RFB1
WMN2RPML EQUOVR ,,b,WMN2RFB1
.*
.* WMN2SUPB - SUPPRESSION BYTE
WMN2SNSV EQUOVR ,,b,WMN2SUPB
WMN2SEER EQUOVR ,,b,WMN2SUPB
WMN2SNSI EQUOVR ,,b,WMN2SUPB
WMN2SAUT EQUOVR ,,b,WMN2SUPB
WMN2SQED EQUOVR ,,b,WMN2SUPB
WMN2SSSI EQUOVR ,,b,WMN2SUPB
WMN2SWTO EQUOVR ,,b,WMN2SUPB
WMN2SMPF EQUOVR ,,b,WMN2SUPB
.*
         MNOTE *,'Including IHAWQE mapping macro'
         IHAWQE FORMAT=NEW             *
         EQUOVR *END
*
WQE      DSECT ,                       * Resume WQE DSECT
         ORG   ,
WQE_LEN  EQU   *-WQE                   * Length of WQE
*
WQEMAJ   DSECT ,                       * Resume WQE-major DSECT
         ORG   ,
WQEMAJ_LEN EQU *-WQEMAJ                * Length of WQE-major
*
WQEMIN   DSECT ,                       * Resume WQE-minor DSECT
         ORG   ,
WQEMIN_LEN EQU *-WQEMIN                * Length of WQE-minor
*
WQESYAR  DSECT ,                       * Resume WQE SYSID-array DSECT
         ORG   ,
WQESYAR_LEN EQU *-WQESYAR              * Length of WQESYAR
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPWTOPL 0100-20096-20096-0111-00108-00108-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Mapping macro describing WTO parameter list
.*
&LABEL   MAPWTOPL &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPWTOPL               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPWTOPL       * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'WTOPL').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPWTOPL).MEND
&BXA_MAC_MAPWTOPL SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_WTOPL
&BXA_CB_WTOPL SETC 'WTOPL'
.*
         MNOTE *,'Generating WTO plist Dsect'
*
WTOPL    DSECT
WTOPLLEN DS    H                       * Total length of WTOPL (=TXT+4)
WTOPL000 DS    H                       * Always zeroes
WTOPLTXT DS    C                       * Text to be displayed
*
         ORG   ,                       *
WTOPL_LEN EQU  *-WTOPL                 *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MAPXSB   0100-20096-20096-0111-00111-00111-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro maps the eXtended Status Block
.*
&LABEL   MAPXSB &DSECT=YES,            * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MAPXSB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_MAC_MAPXSB         * Map has been generated?
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).MEND
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'XSB').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAPXSB).MEND
&BXA_MAC_MAPXSB SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_XSB
&BXA_CB_XSB SETC 'XSB'
.*
.* XSBFLAG2 - FLAG BYTE.
XSBLSUSB EQUOVR ,,b,XSBFLAG2
XSBLSRST EQUOVR ,,b,XSBFLAG2
XSBLSESB EQUOVR ,,b,XSBFLAG2
.*
         MNOTE *,'Including IHAXSB mapping macro'
         IHAXSB LIST=YES               * Generate XSB
         EQUOVR *END
*
XSB      DSECT ,                       * Resume XSB DSECT
         ORG   ,                       *
XSB_LEN  EQU   *-XSB                   * Length of XSB
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.MEND    MEND
./ ADD NAME=MVPL     0100-20096-20096-0111-00098-00098-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Copy a parameter list from program storage to dynamic storage
.*
&LABEL   MVPL  &TO,                    * Destination                   *
               &FROM                   * Source
.*
.* &TO   specifies the destination location label. No length should be
.*       specified.
.* &FROM specifies the label of the prototype plist in the program.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC MVPL                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &SYSASCE                * ASC environment AR or P
         LCLC  &LEN                    * Name of length equate
.*
.* Check the TO parameter
         AIF   (K'&TO NE 0).NOERR1
.ERR1A   MNOTE 8,'No first operand specified'
         MEXIT
.NOERR1  ANOP
.*
.* Check the FROM parameter
         AIF   (K'&FROM NE 0).NOERR2
.ERR2A   MNOTE 8,'No second operand specified'
         MEXIT
.NOERR2  ANOP
.*
.* Determine length field
&LEN     SETC  '&TO'.'_LEN'
.*
.* Generate code
&LABEL   L     R1,=AL4(&FROM)          * Point to prototype plist
         AIF   ('&SYSASCE' NE 'AR').NOTAR
         CPY   AR1,AR12                * Plist in primary space!
.NOTAR   ANOP  ,
         MVC   &TO.(&LEN),0(R1)        * Copy prototype to dyn storage
.*
.MEND    MEND
./ ADD NAME=NESTCB   0100-20096-20096-0111-00147-00147-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro creates a nested control block within another one
.*
&LABEL   NESTCB &CB,                   * Nested control block id       *
               &TYPE,                  * Type - defaults to hex        *
               &PRFX,                  * Prefix to use if label blank  *
               &INIT=,                 * Initialization value          *
               &LEN=                   * Length in parentheses
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC NESTCB                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &_LABEL                 *
         LCLC  &_INIT                  *
         LCLC  &_LEN                   * Length as a modifier
         LCLA  &I                      *
.*
.* Check the CB parameter
         AIF   (K'&CB GT 0).NOERR1
.ERR1    MNOTE 8,'CB parameter omitted'
.NOERR1  ANOP
.*
.* Check the TYPE parameter
         AIF   ('&TYPE' EQ 'X').NOERR2
         AIF   ('&TYPE' EQ 'C').NOERR2
         AIF   ('&TYPE' EQ 'F').NOERR2
         AIF   ('&TYPE' EQ 'H').NOERR2
         AIF   ('&TYPE' EQ 'D').NOERR2
         AIF   ('&TYPE' EQ 'B').NOERR2
.ERR2    MNOTE 8,'Type parameter specifies invalid literal type'
.NOERR2  ANOP
.*
.* Prefix and label must not both be omitted
         AIF   (K'&LABEL GT 0).NOERR3
         AIF   (K'&PRFX GT 0).NOERR3
.ERR3    MNOTE 8,'Label is blank and prefix is omitted'
.NOERR3  ANOP
.*
.* Check the LEN parameter
         AIF   (K'&LEN EQ 0).NOERR4
         AIF   (K'&LEN LT 3).ERR4
         AIF   ('&LEN'(1,1) NE '(').ERR4
         AIF   ('&LEN'(K'&LEN,1) NE ')').ERR4
         AGO   .NOERR4
.ERR4    MNOTE 8,'LEN parameter not specified in parentheses'
.NOERR4  ANOP
.*
.* Decide which label to generate
&_LABEL  SETC  '&LABEL'
         AIF   (K'&_LABEL NE 0).LABELOK
&_LABEL  SETC  '&PRFX'.'&CB'
.LABELOK ANOP
.*
.* Extract correct length value
&_LEN    SETC  '&LEN'
         AIF   (K'&_LEN NE 0).LENOK
&_LEN    SETC  '(&CB._LEN)'
.LENOK   ANOP
&_LEN    SETC  'L&_LEN'                * Add L for length modifier
.*
.* DSECT requires DS, CSECT or RSECT requires DC
         AIF   ('&SYSSTYP' EQ 'DSECT').GENDS
         AIF   ('&SYSSTYP' EQ 'CSECT').GENDC
         AIF   ('&SYSSTYP' EQ 'RSECT').GENDC
         MNOTE 12,'Internal error &&SYSSTYP=&SYSSTYP'
         MEXIT ,
.*
.* Generate a DS statement
.GENDS   ANOP  ,                       *
&_LABEL  DS    &TYPE.&_LEN             *
         MEXIT ,                       *
.*
.* Generate a DC with appropriate initialization
.GENDC   ANOP  ,                       *
&_INIT   SETC  '&INIT'                 *
         AIF   (K'&_INIT NE 0).INITOK  *
&_INIT   SETC  '00'                    *
         AIF   ('&TYPE' NE 'C').INITOK *
&_INIT   SETC  ' '                     *
.INITOK  ANOP  ,                       *
.*
.* Check the init string format
         AIF   ('&_INIT'(1,1) EQ '''').INITOK2
&_INIT   SETC  (DOUBLE '&_INIT')       *
&_INIT   SETC  ''''.'&_INIT'.''''      *
.INITOK2 ANOP  ,                       *
&_LABEL  DC    &TYPE.&_LEN.&_INIT      *
.*
.MEND    MEND
./ ADD NAME=NTCR     0100-20096-20096-0111-00620-00620-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Create a name/token pair
.*
&LABEL   NTCR  &PAR1,                  * Parameter 1                   *
               &PAR2,                  * Parameter 2                   *
               &PAR3,                  * Parameter 3                   *
               &PAR4,                  * Parameter 4                   *
               &PAR5,                  * Parameter 5                   *
               &LVL=,                  * Value for level parameter     *
               &NAME=,                 * Value for token name          *
               &TOKEN=,                * Value for token value         *
               &PERSIST=,              * Value for persist option      *
               &MF=                    * MF=L or MF=(E,list_addr)      *
                                       *      or MF=(G,list_addr)
.*
.* &PAR1 (reg) or name of a fullword, containing the level
.*       if omitted LVL= must be specified.
.* &PAR2 (reg) or name of a 16-byte area, containing the token name
.*       if omitted NAME= must be specified.
.* &PAR3 (reg) or name of a 16-byte area, containing the token value
.*       if omitted TOKEN= must be specified.
.* &PAR4 (reg) or name of a fullword, containing the persist option
.*       if omitted PERSIST= must be specified.
.* &PAR5 (reg) or name of a fullword, where the returncode will go
.*       must not be omitted.
.*
.* &LVL     Literal, constant, or (reg). If specified, will be moved
.*          into the level parameter fullword.
.* &NAME    Literal, constant, or (reg). If specified, will be moved
.*          into the token name parameter 16-byte area.
.* &TOKEN   Literal, constant, or (reg). If specified, will be moved
.*          into the token value parameter 16-byte area.
.* &PERSIST Literal, constant, or (reg). If specified, will be moved
.*          into the persistence option parameter fullword.
.* &MF      L or (L) for the list-form
.*          (E,list_addr) for the execute form
.*          (G,list_addr) for the generate form
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC NTCR                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_AMODE              * Current amode
         LCLC  &_LABEL                 *
         LCLC  &_MF1                   * 1st MF-subparm: L or E
         LCLC  &_MF2                   * 2nd MF-subparm: plist_address
         LCLB  &_MFL                   * On if MF=L
         LCLB  &_MFE                   * On if MF=E
         LCLB  &_MFG                   * On if MF=G
         LCLB  &APPEND                 * On if fields appended to plist
         LCLA  &CTR                    * Counter for allocating fields
         LCLC  &_PAR1                  * &PAR1 or default
         LCLC  &_PAR2                  * &PAR2 or default
         LCLC  &_PAR3                  * &PAR3 or default
         LCLC  &_PAR4                  * &PAR4 or default
         LCLC  &_PAR5                  * &PAR5 or default
         LCLC  &_NAME                  * &NAME as unquoted string
         LCLC  &_TOKEN                 * &TOKEN as unquoted hex string
         LCLA  &I                      * Index into substrings
         LCLC  &BREG                   * Base register for plist
         LCLC  &PREG                   * Pointer register
         LCLC  &VREG                   * Value register
         LCLC  &UNAM                   * USING name
.*
.* Check positional parameters
         AIF   (N'&SYSLIST LE 5).NOERR1
         MNOTE 4,'Too many positional parameters: ignored'
.NOERR1  ANOP
.*
.* Check the MF parameter
         AIF   (K'&MF EQ 0).ERR2A
&_MF1    SETC  '&MF'                   * Copy MF-value
         AIF   ('&MF' EQ 'L').SETMFL   * MF=L: ok
         AIF   ('&MF'(1,1) NE '(').ERR2B * MF=E must be in sublist
         AIF   (N'&MF EQ 0).ERR2B      *
&_MF1    SETC  '&MF(1)'                * Copy MF-value
         AIF   ('&_MF1' EQ 'L' AND N'&MF NE 1).ERR2B
         AIF   ('&_MF1' EQ 'L').SETMFL * MF=(L): ok
         AIF   (N'&MF NE 2).ERR2B      * Must have two sub-operands
&_MF2    SETC  '&MF(2)'                * Copy plist_address
         AIF   ('&_MF1' EQ 'E').SETMFE
         AIF   ('&_MF1' EQ 'G').SETMFG
         AGO   .ERR2B
.SETMFG  ANOP
&_MFG    SETB  1                       * Signal MF=G
         AGO   .NOERR2
.SETMFE  ANOP
&_MFE    SETB  1                       * Signal MF=E
         AGO   .NOERR2
.SETMFL  ANOP
&_MFL    SETB  1                       * Signal MF=E
         AGO   .NOERR2
.ERR2A   MNOTE 8,'Required parameter MF omitted'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Parameter MF must be L, (L), (E,plist_addr) or (G,pli*
               st_addr)'
.NOERR2  ANOP
.*
.* Check PAR1 (level field)
         AIF   (&_MFE).NOERR3
         AIF   (&_MFG AND K'&PAR1 NE 0 AND K'&LVL NE 0).NOERR3A
         AIF   (K'&PAR1 EQ 0 AND K'&LVL EQ 0).ERR3A
         AIF   (K'&PAR1 NE 0 AND K'&LVL NE 0).ERR3A
         AGO   .NOERR3A
.ERR3A   MNOTE 8,'Either the first positional parameter or the LVL-para*
               meter must be specified'
.NOERR3A ANOP
         AIF   (K'&PAR1 EQ 0).NOERR3B
         AIF   (&_MFG).NOERR3B
         AIF   ('&PAR1'(1,1) EQ '(').ERR3B
         AGO   .NOERR3B
.ERR3B   MNOTE 8,'Positional parameter 1 must not specify (reg) with MF*
               =L'
.NOERR3B ANOP
.NOERR3  ANOP
.*
.* Check PAR2 (name field)
         AIF   (&_MFE).NOERR4
         AIF   (&_MFG AND K'&PAR2 NE 0 AND K'&NAME NE 0).NOERR4A
         AIF   (K'&PAR2 EQ 0 AND K'&NAME EQ 0).ERR4A
         AIF   (K'&PAR2 NE 0 AND K'&NAME NE 0).ERR4A
         AGO   .NOERR4A
.ERR4A   MNOTE 8,'Either the second positional parameter or the NAME-pa*
               rameter must be specified'
.NOERR4A ANOP
         AIF   (K'&PAR2 EQ 0).NOERR4B
         AIF   (&_MFG).NOERR4B
         AIF   ('&PAR2'(1,1) EQ '(').ERR4B
         AGO   .NOERR4B
.ERR4B   MNOTE 8,'Positional parameter 2 must not specify (reg) with MF*
               =L'
.NOERR4B ANOP
.NOERR4  ANOP
.*
.* Check PAR3 (token field)
         AIF   (&_MFE).NOERR5
         AIF   (&_MFG AND K'&PAR3 NE 0 AND K'&TOKEN NE 0).NOERR5A
         AIF   (K'&PAR3 EQ 0 AND K'&TOKEN EQ 0).ERR5A
         AIF   (K'&PAR3 NE 0 AND K'&TOKEN NE 0).ERR5A
         AGO   .NOERR5A
.ERR5A   MNOTE 8,'Either the third positional parameter or the TOKEN-pa*
               rameter must be specified'
.NOERR5A ANOP
         AIF   (K'&PAR3 EQ 0).NOERR5B
         AIF   (&_MFG).NOERR5B
         AIF   ('&PAR3'(1,1) EQ '(').ERR5B
         AGO   .NOERR5B
.ERR5B   MNOTE 8,'Positional parameter 3 must not specify (reg) with MF*
               =L'
.NOERR5B ANOP
.NOERR5  ANOP
.*
.* Check PAR4 (persist field)
         AIF   (&_MFE).NOERR6
         AIF   (&_MFG AND K'&PAR4 NE 0 AND K'&PERSIST NE 0).NOERR6A
         AIF   (K'&PAR4 EQ 0 AND K'&PERSIST EQ 0).ERR6A
         AIF   (K'&PAR4 NE 0 AND K'&PERSIST NE 0).ERR6A
         AGO   .NOERR6A
.ERR6A   MNOTE 8,'Either the fourth positional parameter or the PERSIST*
               -parameter must be specified'
.NOERR6A ANOP
         AIF   (K'&PAR4 EQ 0).NOERR6B
         AIF   (&_MFG).NOERR6B
         AIF   ('&PAR4'(1,1) EQ '(').ERR6B
         AGO   .NOERR6B
.ERR6B   MNOTE 8,'Positional parameter 4 must not specify (reg) with MF*
               =L'
.NOERR6B ANOP
.NOERR6  ANOP
.*
.* Check PAR5 (returncode field)
         AIF   (&_MFE).NOERR7
         AIF   (K'&PAR5 EQ 0).ERR7A
         AGO   .NOERR7A
.ERR7A   MNOTE 8,'The fifth positional parameter must be specified'
.NOERR7A ANOP
         AIF   (K'&PAR5 EQ 0).NOERR7B
         AIF   (&_MFG).NOERR7B
         AIF   ('&PAR5'(1,1) EQ '(').ERR7B
         AGO   .NOERR7B
.ERR7B   MNOTE 8,'Positional parameter 5 must not specify (reg) with MF*
               =L'
.NOERR7B ANOP
.NOERR7  ANOP
.*
.* Check the LVL parameter
         AIF   (K'&LVL EQ 0).NOERR8
         AIF   (&_MFL AND '&LVL'(1,1) EQ '(').ERR8A
         AGO   .NOERR8
.ERR8A   MNOTE 8,'LVL-parameter must not specify (reg) when MF=L'
.NOERR8  ANOP
.*
.* Check the NAME parameter
         AIF   (K'&NAME EQ 0).NOERR9
         AIF   (&_MFL AND '&NAME'(1,1) EQ '(').ERR9A
         AGO   .NOERR9A
.ERR9A   MNOTE 8,'NAME-parameter must not specify (reg) when MF=L'
.NOERR9A ANOP
         AIF   ('&NAME'(1,1) EQ '(').NOERR9 * (reg): no literal check
&_NAME   SETC  '&NAME'                 * Assume name correct
&I       SETA  K'&NAME                 *
         AIF   ('&NAME'(&I,1) NE '''').NOERR9 * Unquoted string ok
         AIF   ('&NAME'(1,1) NE 'C').NAMNOTC
&_NAME   SETC  '&_NAME'(2,&I-1)        * Remove leading C
&I       SETA  &I-1                    *
.NAMNOTC ANOP
         AIF   ('&NAME'(1,1) NE '''').ERR9B
&_NAME   SETC  '&_NAME'(2,&I-2)        * Remove lead/trail quotes
         AGO   .NOERR9
.ERR9B   MNOTE 8,'Name must be specified as (un)quoted string or C-type*
                constant without L-modifier'
.NOERR9  ANOP
.*
.* Check the TOKEN parameter
         AIF   (K'&TOKEN EQ 0).NOERR10
         AIF   (&_MFL AND '&TOKEN'(1,1) EQ '(').ERR10A
         AGO   .NOERR10A
.ERR10A  MNOTE 8,'TOKEN-parameter must not specify (reg) when MF=L'
.NOERR10A ANOP
         AIF   ('&TOKEN'(1,1) NE '(').NOERR10 * (reg) no literal check
&_TOKEN  SETC  '&TOKEN'                * Assume token correct
&I       SETA  K'&TOKEN                *
         AIF   ('&TOKEN'(&I,1) NE '''').NOERR10B * Unquoted string ok
         AIF   ('&TOKEN'(1,1) NE 'X').TOKNOTX
&_TOKEN  SETC  '&_TOKEN'(2,&I-1)       * Remove leading X
&I       SETA  &I-1                    *
.TOKNOTX ANOP
         AIF   ('&TOKEN'(1,1) NE '''').ERR10B
&_TOKEN  SETC  '&_TOKEN'(2,&I-2)       * Remove lead/trail quotes
         AGO   .NOERR10B
.ERR10B  MNOTE 8,'Name must be specified as (un)quoted string or C-type*
                constant without L-modifier'
.NOERR10B ANOP
         CHKNUM MACRO=NTCR,            * Check the resulting string    *
               NAME=TOKEN,             * in parameter TOKEN            *
               VAL=&_TOKEN             *
.NOERR10 ANOP
.*
.* Check the PERSIST parameter
         AIF   (K'&PERSIST EQ 0).NOERR11
         AIF   (&_MFL AND '&PERSIST'(1,1) EQ '(').ERR11A
         AGO   .NOERR11
.ERR11A  MNOTE 8,'PERSIST-parameter must not specify (reg) when MF=L'
.NOERR11 ANOP
.*
.* Check the current amode
         AIF   ('&BXA_AMODE' EQ '31').NOERR12
.ERR12   MNOTE 8,'NTCR-macro cannot be issued when in Amode 24'
.NOERR12 ANOP
.*
.* Include mapping macro for plist
         GENMAPS IEANT                 * Map unless already mapped
         AIF   (&_MFE).MFE
.**********************************************************************
.*
.* Generate code for MF=L
.* First part also used for MF=G
.*
.**********************************************************************
.*
.* All fields not specified on the positional parameter by default
.* will be appended to the Plist proper
         AIF   (K'&PAR1 EQ 0 OR K'&PAR2 EQ 0 OR K'&PAR3 EQ 0).APPEND
         AIF   (K'&PAR4 EQ 0 OR K'&PAR5 EQ 0).APPEND
         AGO   .NOAPPEND
.APPEND  ANOP
&APPEND  SETB  1
.NOAPPEND ANOP
.*
.* For defaulted fields a label is required
         AIF   (NOT &_MFG).LABEL       * MF=L? normal label processing
         AIF   ('&_MF2'(1,1) EQ '(').GLBLREG * MF=(G,(reg)): register!
&_LABEL  SETC  'CRPL.NTCRPL'
         AGO   .LABELOK
.GLBLREG ANOP  ,                       * Plist addressed with register
&_BREG   SETC  '&MF(2,1)'              * Extract pointer register
&_LABEL  SETC  '(&_BREG)'              * Points to plist
         AGO   .LABELOK
.LABEL   ANOP
&_LABEL  SETC  '&LABEL'
         AIF   (NOT &APPEND).LABELOK
         AIF   (K'&LABEL NE 0).LABELOK
&_LABEL  SETC  '_NTCR&SYSNDX'
.LABELOK ANOP
&CTR     SETA  20                      * Plist length
.*
.* Determine defaulted positions for unspecified fields
.* PAR1: level field (fullword)
&_PAR1   SETC  '&PAR1'                 * Copy specified field location
         AIF   (K'&PAR1 NE 0).LPAR1OK  * If not specified
&_PAR1   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR1AD * Unless (reg)
&_PAR1   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR1AD ANOP
&CTR     SETA  &CTR+4                  * Advance to next free position
.LPAR1OK ANOP
.*
.* PAR2: name field (16 characters)
&_PAR2   SETC  '&PAR2'                 * Copy specified field location
         AIF   (K'&PAR2 NE 0).LPAR2OK  * If not specified
&_PAR2   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR2AD * Unless (reg)
&_PAR2   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR2AD ANOP
&CTR     SETA  &CTR+16                 * Advance to next free position
.LPAR2OK ANOP
.*
.* PAR3: token field (16 bytes)
&_PAR3   SETC  '&PAR3'                 * Copy specified field location
         AIF   (K'&PAR3 NE 0).LPAR3OK  * If not specified
&_PAR3   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR3AD * Unless (reg)
&_PAR3   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR3AD ANOP
&CTR     SETA  &CTR+16                 * Advance to next free position
.LPAR3OK ANOP
.*
.* PAR4: persist field (fullword)
&_PAR4   SETC  '&PAR4'                 * Copy specified field location
         AIF   (K'&PAR4 NE 0).LPAR4OK  * If not specified
&_PAR4   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR4AD * Unless (reg)
&_PAR4   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR4AD ANOP
&CTR     SETA  &CTR+4                  * Advance to next free position
.LPAR4OK ANOP
.*
.* PAR5: return field (fullword)
&_PAR5   SETC  '&PAR5'                 * Copy specified field location
         AIF   (K'&PAR5 NE 0).LPAR5OK  * If not specified
&_PAR5   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR5AD * Unless (reg)
&_PAR5   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR5AD ANOP
&CTR     SETA  &CTR+4                  * Advance to next free position
.LPAR5OK ANOP
.*
.* Plist generation for MF=G follows rules of MF=E
.* If there are any defaulted positional parameters: reinvoke NTCR
         AIF   (&_MFL).MFL
         AIF   (NOT &APPEND).MFE
&LABEL   NTCR  &_PAR1,&_PAR2,&_PAR3,&_PAR4,&_PAR5,                     *
               LVL=&LVL,               *                               *
               NAME=&NAME,             *                               *
               TOKEN=&TOKEN,           *                               *
               PERSIST=&PERSIST,       *                               *
               MF=(G,&_MF2)            *
         AGO   .LWARN
.*
.MFL     ANOP
.*
.* Generate code for MF=L
         DS    0F                      * Align on fullword
&_LABEL  EQU   *,&CTR                  *
         DC    AL4(&_PAR1)             * Level pointer
         DC    AL4(&_PAR2)             * Name pointer
         DC    AL4(&_PAR3)             * Token pointer
         DC    AL4(&_PAR4)             * Persist option pointer
         DC    AL4(&_PAR5)             * Returncode pointer
.*
.* Generate defaulted level field
         AIF   ('&_PAR1' EQ '&PAR1').LNOPAR1
         DC    AL4(&LVL)
.LNOPAR1 ANOP
.*
.* Generate defaulted name field
         AIF   ('&_PAR2' EQ '&PAR2').LNOPAR2
         DC    CL16'&_NAME'
.LNOPAR2 ANOP
.*
.* Generate defaulted token field
         AIF   ('&_PAR3' EQ '&PAR3').LNOPAR3
         DC    XL16'&_TOKEN'
.LNOPAR3 ANOP
.*
.* Generate defaulted persist option field
         AIF   ('&_PAR4' EQ '&PAR4').LNOPAR4
         DC    AL4(&PERSIST)
.LNOPAR4 ANOP
.*
.* Generate defaulted return code field (violates reentrancy)
         AIF   ('&_PAR5' EQ '&PAR5').LNOPAR5
         DC    AL4(0)
.LNOPAR5 ANOP
.*
.* Generate warning with length of plist
.LWARN   ANOP
         AIF   (NOT &APPEND).MEND
         MNOTE *,'Generated Plist and areas for NTCR: &CTR bytes'
         AGO   .MEND
.*********************************************************************
.*
.* Generate coding for MF=E
.*
.*********************************************************************
.MFE     ANOP
&LABEL   LABEL ,                       *
.*
.* If no overriding parameters are specified: skip plist modification
         AIF   (K'&PAR1 NE 0).EMODPL
         AIF   (K'&PAR2 NE 0 OR K'&LVL NE 0).EMODPL
         AIF   (K'&PAR3 NE 0 OR K'&NAME NE 0).EMODPL
         AIF   (K'&PAR4 NE 0 OR K'&TOKEN NE 0).EMODPL
         AIF   (K'&PAR5 NE 0 OR K'&PERSIST NE 0).EMODPL
         AGO   .ENOMOD
.*
.* Make parmlist addressable
.EMODPL  ANOP  ,                       * Modify Plist before call
         AIF   ('&_MF2'(1,1) EQ '(').EREG
CRPL     USE   NTCRPL,&_MF2            * Set plist addressable
&UNAM    SETC  'CRPL.'
         AGO   .EUSEOK
.EREG    ANOP
&BREG    SETC  '&MF(2,1)'              * Extract register number
         USE   NTCRPL,&BREG            * And set plist addressable
.EUSEOK  ANOP
.*
.* If PAR1 specified insert address of level field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR1 EQ 0).ENOPAR1
         AIF   ('&PAR1'(1,1) EQ '(').EPAR1R * Register specified?
         LA    &PREG,&PAR1             * Point to level field
         AGO   .EPAR1OK
.EPAR1R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR1(1)'              * Extract level field pointer
.EPAR1OK ANOP
         ST    &PREG,&UNAM.NTCRLVL     * Put pointer into plist
.ENOPAR1 ANOP
.*
.* If LVL specified insert value into field
         AIF   (K'&LVL EQ 0).ENOLVL
         AIF   (K'&PAR1 NE 0).EPTR1OK  * Pointer already loaded?
         L     &PREG,NTCRLVL           * Point to level field
.EPTR1OK ANOP
         AIF   ('&LVL'(1,1) EQ '(').ELVLR * Register specified?
         LA    &VREG,&LVL              * Load level value
         AGO   .ELVLOK
.ELVLR   ANOP  ,                       * Specified as (reg)
&VREG    SETC  '&LVL(1)'               * Extract level value register
.ELVLOK  ANOP
         ST    &VREG,0(,&PREG)         * And put into level field
.ENOLVL  ANOP
.*
.* If PAR2 specified insert address of name field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR2 EQ 0).ENOPAR2
         AIF   ('&PAR2'(1,1) EQ '(').EPAR2R * Register specified?
         LA    &PREG,&PAR2             * Point to name field
         AGO   .EPAR2OK
.EPAR2R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR2(1)'              * Extract name field pointer
.EPAR2OK ANOP
         ST    &PREG,&UNAM.NTCRNAM     * Put pointer into plist
.ENOPAR2 ANOP
.*
.* If NAME specified insert value into field
         AIF   (K'&NAME EQ 0).ENONAM
         AIF   (K'&PAR2 NE 0).EPTR2OK  * Pointer already loaded?
         L     &PREG,NTCRNAM           * Point to name field
.EPTR2OK ANOP
         AIF   ('&NAME'(1,1) EQ '(').ENAMR * Register specified?
         MVC   0(16,&PREG),=CL16'&_NAME' * Move name into field
         AGO   .ENONAM
.ENAMR   ANOP  ,                       * Specified as (reg)
&VREG    SETC  '&NAME(1)'              * Extract name value register
         MVC   0(16,&PREG),0(&VREG)    * Move name into field
.ENONAM  ANOP
.*
.* If PAR3 specified insert address of token field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR3 EQ 0).ENOPAR3
         AIF   ('&PAR3'(1,1) EQ '(').EPAR3R * Register specified?
         LA    &PREG,&PAR3             * Point to token field
         AGO   .EPAR3OK
.EPAR3R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR3(1)'              * Extract token field pointer
.EPAR3OK ANOP
         ST    &PREG,&UNAM.NTCRTOK     * Put pointer into plist
.ENOPAR3 ANOP
.*
.* If TOKEN specified insert value into field
         AIF   (K'&TOKEN EQ 0).ENOTOK
         AIF   (K'&PAR3 NE 0).EPTR3OK  * Pointer already loaded?
         L     &PREG,NTCRTOK           * Point to token field
.EPTR3OK ANOP
         AIF   ('&TOKEN'(1,1) EQ '(').ETOKR * Register specified?
         MVC   0(16,&PREG),=XL16'&_TOKEN' * Move token into field
         AGO   .ENOTOK
.ETOKR   ANOP  ,                       * Specified as (reg)
&VREG    SETC  '&TOKEN(1)'             * Extract token value register
         MVC   0(16,&PREG),0(&VREG)    * Move token into field
.ENOTOK  ANOP
.*
.* If PAR4 specified insert address of persist option field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR4 EQ 0).ENOPAR4
         AIF   ('&PAR4'(1,1) EQ '(').EPAR4R * Register specified?
         LA    &PREG,&PAR4             * Point to option field
         AGO   .EPAR4OK
.EPAR4R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR4(1)'              * Extract option field pointer
.EPAR4OK ANOP
         ST    &PREG,&UNAM.NTCRPOPT    * Put pointer into plist
.ENOPAR4 ANOP
.*
.* If PERSIST specified insert value into field
         AIF   (K'&PERSIST EQ 0).ENOPER
         AIF   (K'&PAR4 NE 0).EPTR4OK  * Pointer already loaded?
         L     &PREG,NTCRPOPT          * Point to option field
.EPTR4OK ANOP
         AIF   ('&PERSIST'(1,1) EQ '(').EPERR * Register specified?
         LA    &VREG,&PERSIST          * Load persistence option value
         AGO   .EPEROK
.EPERR   ANOP  ,                       * Specified as (reg)
&VREG    SETC  '&PERSIST(1)'           * Extract option value register
.EPEROK  ANOP
         ST    &VREG,0(,&PREG)         * And put into option field
.ENOPER  ANOP
.*
.* If PAR5 specified insert address of returncode field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR5 EQ 0).ENOPAR5
         AIF   ('&PAR5'(1,1) EQ '(').EPAR5R * Register specified?
         LA    &PREG,&PAR5             * Point to retcode field
         AGO   .EPAR5OK
.EPAR5R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR5(1)'              * Extract retcode pointer
.EPAR5OK ANOP
         ST    &PREG,&UNAM.NTCRRCD     * Put pointer into plist
.ENOPAR5 ANOP
.*
.* Plist is now complete
         AIF   ('&_MF2'(1,1) EQ '(').EDROPR
         DROP  CRPL                    * NTCRPL
         AGO   .EDROPOK
.EDROPR  DROP  &BREG                   * NTCRPL
.EDROPOK ANOP
.ENOMOD  ANOP  ,                       * No modifications to plist
.*
.* For MF=G we're done
         AIF   (&_MFG).MEND
.*
.* Invoke Name/Token service IEANTCR
         AIF   (K'&BREG EQ 0).ELAR1
         LR    R1,&BREG                * R1 must point to plist
         AGO   .ER1OK
.ELAR1   ANOP
         LA    R1,&_MF2                * R1 must point to plist
.ER1OK   ANOP
.*
         L     R15,X'010'              * Retrieve
         L     R15,X'220'(,R15)        *  address
         L     R15,X'014'(,R15)        *   of
         L     R15,X'004'(,R15)        *    IEANTCR
         BASR  R14,R15                 * And call it
.*
.MEND    MEND
./ ADD NAME=NTDL     0100-20096-20096-0111-00447-00447-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Delete a name/token pair
.*
&LABEL   NTDL  &PAR1,                  * Parameter 1                   *
               &PAR2,                  * Parameter 2                   *
               &PAR3,                  * Parameter 3                   *
               &LVL=,                  * Value for level parameter     *
               &NAME=,                 * Value for token name          *
               &MF=                    * MF=L or MF=(E,list_addr)      *
                                       *      or MF=(G,list_addr)
.*
.* &PAR1 (reg) or name of a fullword, containing the level
.*       if omitted LVL= must be specified.
.* &PAR2 (reg) or name of a 16-byte area, containing the token name
.*       if omitted NAME= must be specified.
.* &PAR3 (reg) or name of a fullword, where the returncode will go
.*       must not be omitted.
.*
.* &LVL     Literal, constant, or (reg). If specified, will be moved
.*          into the level parameter fullword.
.* &NAME    Literal, constant, or (reg). If specified, will be moved
.*          into the token name parameter 16-byte area.
.* &MF      L or (L) for the list-form
.*          (E,list_addr) for the execute form
.*          (G,list_addr) for the generate form
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC NTDL                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_AMODE              * Current amode
         LCLC  &_LABEL                 *
         LCLC  &_MF1                   * 1st MF-subparm: L or E
         LCLC  &_MF2                   * 2nd MF-subparm: plist_address
         LCLB  &_MFL                   * On if MF=L
         LCLB  &_MFE                   * On if MF=E
         LCLB  &_MFG                   * On if MF=G
         LCLB  &APPEND                 * On if fields appended to plist
         LCLA  &CTR                    * Counter for allocating fields
         LCLC  &_PAR1                  * &PAR1 or default
         LCLC  &_PAR2                  * &PAR2 or default
         LCLC  &_PAR3                  * &PAR3 or default
         LCLC  &_NAME                  * &NAME as unquoted string
         LCLA  &I                      * Index into substrings
         LCLC  &BREG                   * Base register for plist
         LCLC  &PREG                   * Pointer register
         LCLC  &VREG                   * Value register
         LCLC  &UNAM                   * USING name
.*
.* Check positional parameters
         AIF   (N'&SYSLIST LE 3).NOERR1
         MNOTE 4,'Too many positional parameters: ignored'
.NOERR1  ANOP
.*
.* Check the MF parameter
         AIF   (K'&MF EQ 0).ERR2A
&_MF1    SETC  '&MF'                   * Copy MF-value
         AIF   ('&MF' EQ 'L').SETMFL   * MF=L: ok
         AIF   ('&MF'(1,1) NE '(').ERR2B * MF=E must be in sublist
         AIF   (N'&MF EQ 0).ERR2B      *
&_MF1    SETC  '&MF(1)'                * Copy MF-value
         AIF   ('&_MF1' EQ 'L' AND N'&MF NE 1).ERR2B
         AIF   ('&_MF1' EQ 'L').SETMFL * MF=(L): ok
         AIF   (N'&MF NE 2).ERR2B      * Must have two sub-operands
&_MF2    SETC  '&MF(2)'                * Copy plist_address
         AIF   ('&_MF1' EQ 'E').SETMFE
         AIF   ('&_MF1' EQ 'G').SETMFG
         AGO   .ERR2B
.SETMFG  ANOP
&_MFG    SETB  1                       * Signal MF=G
         AGO   .NOERR2
.SETMFE  ANOP
&_MFE    SETB  1                       * Signal MF=E
         AGO   .NOERR2
.SETMFL  ANOP
&_MFL    SETB  1                       * Signal MF=E
         AGO   .NOERR2
.ERR2A   MNOTE 8,'Required parameter MF omitted'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Parameter MF must be L, (L), (E,plist_addr) or (G,pli*
               st_addr)'
.NOERR2  ANOP
.*
.* Check PAR1 (level field)
         AIF   (&_MFE).NOERR3
         AIF   (&_MFG AND K'&PAR1 NE 0 AND K'&LVL NE 0).NOERR3A
         AIF   (K'&PAR1 EQ 0 AND K'&LVL EQ 0).ERR3A
         AIF   (K'&PAR1 NE 0 AND K'&LVL NE 0).ERR3A
         AGO   .NOERR3A
.ERR3A   MNOTE 8,'Either the first positional parameter or the LVL-para*
               meter must be specified'
.NOERR3A ANOP
         AIF   (K'&PAR1 EQ 0).NOERR3B
         AIF   (&_MFG).NOERR3B
         AIF   ('&PAR1'(1,1) EQ '(').ERR3B
         AGO   .NOERR3B
.ERR3B   MNOTE 8,'Positional parameter 1 must not specify (reg) with MF*
               =L'
.NOERR3B ANOP
.NOERR3  ANOP
.*
.* Check PAR2 (name field)
         AIF   (&_MFE).NOERR4
         AIF   (&_MFG AND K'&PAR2 NE 0 AND K'&NAME NE 0).NOERR4A
         AIF   (K'&PAR2 EQ 0 AND K'&NAME EQ 0).ERR4A
         AIF   (K'&PAR2 NE 0 AND K'&NAME NE 0).ERR4A
         AGO   .NOERR4A
.ERR4A   MNOTE 8,'Either the second positional parameter or the NAME-pa*
               rameter must be specified'
.NOERR4A ANOP
         AIF   (K'&PAR2 EQ 0).NOERR4B
         AIF   (&_MFG).NOERR4B
         AIF   ('&PAR2'(1,1) EQ '(').ERR4B
         AGO   .NOERR4B
.ERR4B   MNOTE 8,'Positional parameter 2 must not specify (reg) with MF*
               =L'
.NOERR4B ANOP
.NOERR4  ANOP
.*
.* Check PAR3 (returncode field)
         AIF   (&_MFE).NOERR6
         AIF   (K'&PAR3 EQ 0).ERR6A
         AGO   .NOERR6A
.ERR6A   MNOTE 8,'The third positional parameter must be specified'
.NOERR6A ANOP
         AIF   (K'&PAR3 EQ 0).NOERR6B
         AIF   (&_MFG).NOERR6B
         AIF   ('&PAR3'(1,1) EQ '(').ERR6B
         AGO   .NOERR6B
.ERR6B   MNOTE 8,'Positional parameter 3 must not specify (reg) with MF*
               =L'
.NOERR6B ANOP
.NOERR6  ANOP
.*
.* Check the LVL parameter
         AIF   (K'&LVL EQ 0).NOERR8
         AIF   (&_MFL AND '&LVL'(1,1) EQ '(').ERR8A
         AGO   .NOERR8
.ERR8A   MNOTE 8,'LVL-parameter must not specify (reg) when MF=L'
.NOERR8  ANOP
.*
.* Check the NAME parameter
         AIF   (K'&NAME EQ 0).NOERR9
         AIF   (&_MFL AND '&NAME'(1,1) EQ '(').ERR9A
         AGO   .NOERR9A
.ERR9A   MNOTE 8,'NAME-parameter must not specify (reg) when MF=L'
.NOERR9A ANOP
         AIF   ('&NAME'(1,1) EQ '(').NOERR9 * (reg): no literal check
&_NAME   SETC  '&NAME'                 * Assume name correct
&I       SETA  K'&NAME                 *
         AIF   ('&NAME'(&I,1) NE '''').NOERR9 * Unquoted string ok
         AIF   ('&NAME'(1,1) NE 'C').NAMNOTC
&_NAME   SETC  '&_NAME'(2,&I-1)        * Remove leading C
&I       SETA  &I-1                    *
.NAMNOTC ANOP
         AIF   ('&NAME'(1,1) NE '''').ERR9B
&_NAME   SETC  '&_NAME'(2,&I-2)        * Remove lead/trail quotes
         AGO   .NOERR9
.ERR9B   MNOTE 8,'Name must be specified as (un)quoted string or C-type*
                constant without L-modifier'
.NOERR9  ANOP
.*
.* Check the current amode
         AIF   ('&BXA_AMODE' EQ '31').NOERR12
.ERR12   MNOTE 8,'NTDL-macro cannot be issued when in Amode 24'
.NOERR12 ANOP
.*
.* Include mapping macro for plist
         GENMAPS IEANT                 * Map unless already mapped
         AIF   (&_MFE).MFE
.**********************************************************************
.*
.* Generate code for MF=L
.* First part also used for MF=G
.*
.**********************************************************************
.*
.* All fields not specified on the positional parameter by default
.* will be appended to the Plist proper
         AIF   (K'&PAR1 EQ 0 OR K'&PAR2 EQ 0 OR K'&PAR3 EQ 0).APPEND
         AGO   .NOAPPEND
.APPEND  ANOP
&APPEND  SETB  1
.NOAPPEND ANOP
.*
.* For defaulted fields a label is required
         AIF   (NOT &_MFG).LABEL       * MF=L? normal label processing
         AIF   ('&_MF2'(1,1) EQ '(').GLBLREG * MF=(G,(reg)): register!
&_LABEL  SETC  'DLPL.NTDLPL'
         AGO   .LABELOK
.GLBLREG ANOP  ,                       * Plist addressed with register
&_BREG   SETC  '&MF(2,1)'              * Extract pointer register
&_LABEL  SETC  '(&_BREG)'              * Points to plist
         AGO   .LABELOK
.LABEL   ANOP
&_LABEL  SETC  '&LABEL'
         AIF   (NOT &APPEND).LABELOK
         AIF   (K'&LABEL NE 0).LABELOK
&_LABEL  SETC  '_NTDL&SYSNDX'
.LABELOK ANOP
&CTR     SETA  12                      * Plist length
.*
.* Determine defaulted positions for unspecified fields
.* PAR1: level field (fullword)
&_PAR1   SETC  '&PAR1'                 * Copy specified field location
         AIF   (K'&PAR1 NE 0).LPAR1OK  * If not specified
&_PAR1   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR1AD * Unless (reg)
&_PAR1   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR1AD ANOP
&CTR     SETA  &CTR+4                  * Advance to next free position
.LPAR1OK ANOP
.*
.* PAR2: name field (16 characters)
&_PAR2   SETC  '&PAR2'                 * Copy specified field location
         AIF   (K'&PAR2 NE 0).LPAR2OK  * If not specified
&_PAR2   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR2AD * Unless (reg)
&_PAR2   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR2AD ANOP
&CTR     SETA  &CTR+16                 * Advance to next free position
.LPAR2OK ANOP
.*
.* PAR3: return field (fullword)
&_PAR3   SETC  '&PAR3'                 * Copy specified field location
         AIF   (K'&PAR3 NE 0).LPAR3OK  * If not specified
&_PAR3   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR3AD * Unless (reg)
&_PAR3   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR3AD ANOP
&CTR     SETA  &CTR+4                  * Advance to next free position
.LPAR3OK ANOP
.*
.* Plist generation for MF=G follows rules of MF=E
.* If there are any defaulted positional parameters: reinvoke NTCR
         AIF   (&_MFL).MFL
         AIF   (NOT &APPEND).MFE
&LABEL   NTDL  &_PAR1,&_PAR2,&_PAR3,   *                               *
               LVL=&LVL,               *                               *
               NAME=&NAME,             *                               *
               MF=(G,&_MF2)            *
         AGO   .LWARN
.*
.MFL     ANOP
.*
.* Generate code for MF=L
         DS    0F                      * Align on fullword
&_LABEL  EQU   *,&CTR                  *
         DC    AL4(&_PAR1)             * Level pointer
         DC    AL4(&_PAR2)             * Name pointer
         DC    AL4(&_PAR3)             * Returncode pointer
.*
.* Generate defaulted level field
         AIF   ('&_PAR1' EQ '&PAR1').LNOPAR1
         DC    AL4(&LVL)
.LNOPAR1 ANOP
.*
.* Generate defaulted name field
         AIF   ('&_PAR2' EQ '&PAR2').LNOPAR2
         DC    CL16'&_NAME'
.LNOPAR2 ANOP
.*
.* Generate defaulted return code field (violates reentrancy)
         AIF   ('&_PAR3' EQ '&PAR3').LNOPAR3
         DC    AL4(0)
.LNOPAR3 ANOP
.*
.* Generate warning with length of plist
.LWARN   ANOP
         AIF   (NOT &APPEND).MEND
         MNOTE *,'Generated Plist and areas for NTDL: &CTR bytes'
         AGO   .MEND
.*********************************************************************
.*
.* Generate coding for MF=E
.*
.*********************************************************************
.MFE     ANOP
&LABEL   LABEL ,                       *
.*
.* If no overriding parameters are specified: skip plist modification
         AIF   (K'&PAR1 NE 0).EMODPL
         AIF   (K'&PAR2 NE 0 OR K'&LVL NE 0).EMODPL
         AIF   (K'&PAR3 NE 0 OR K'&NAME NE 0).EMODPL
         AGO   .ENOMOD
.*
.* Make parmlist addressable
.EMODPL  ANOP  ,                       * Modify Plist before call
         AIF   ('&_MF2'(1,1) EQ '(').EREG
DLPL     USE   NTDLPL,&_MF2            * Set plist addressable
&UNAM    SETC  'DLPL.'
         AGO   .EUSEOK
.EREG    ANOP
&BREG    SETC  '&MF(2,1)'              * Extract register number
         USE   NTDLPL,&BREG            * And set plist addressable
.EUSEOK  ANOP
.*
.* If PAR1 specified insert address of level field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR1 EQ 0).ENOPAR1
         AIF   ('&PAR1'(1,1) EQ '(').EPAR1R * Register specified?
         LA    &PREG,&PAR1             * Point to level field
         AGO   .EPAR1OK
.EPAR1R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR1(1)'              * Extract level field pointer
.EPAR1OK ANOP
         ST    &PREG,&UNAM.NTDLLVL     * Put pointer into plist
.ENOPAR1 ANOP
.*
.* If LVL specified insert value into field
         AIF   (K'&LVL EQ 0).ENOLVL
         AIF   (K'&PAR1 NE 0).EPTR1OK  * Pointer already loaded?
         L     &PREG,NTDLLVL           * Point to level field
.EPTR1OK ANOP
         AIF   ('&LVL'(1,1) EQ '(').ELVLR * Register specified?
         LA    &VREG,&LVL              * Load level value
         AGO   .ELVLOK
.ELVLR   ANOP  ,                       * Specified as (reg)
&VREG    SETC  '&LVL(1)'               * Extract level value register
.ELVLOK  ANOP
         ST    &VREG,0(,&PREG)         * And put into level field
.ENOLVL  ANOP
.*
.* If PAR2 specified insert address of name field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR2 EQ 0).ENOPAR2
         AIF   ('&PAR2'(1,1) EQ '(').EPAR2R * Register specified?
         LA    &PREG,&PAR2             * Point to name field
         AGO   .EPAR2OK
.EPAR2R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR2(1)'              * Extract name field pointer
.EPAR2OK ANOP
         ST    &PREG,&UNAM.NTDLNAM     * Put pointer into plist
.ENOPAR2 ANOP
.*
.* If NAME specified insert value into field
         AIF   (K'&NAME EQ 0).ENONAM
         AIF   (K'&PAR2 NE 0).EPTR2OK  * Pointer already loaded?
         L     &PREG,NTDLNAM           * Point to name field
.EPTR2OK ANOP
         AIF   ('&NAME'(1,1) EQ '(').ENAMR * Register specified?
         MVC   0(16,&PREG),=CL16'&_NAME' * Move name into field
         AGO   .ENONAM
.ENAMR   ANOP  ,                       * Specified as (reg)
&VREG    SETC  '&NAME(1)'              * Extract name value register
         MVC   0(16,&PREG),0(&VREG)    * Move name into field
.ENONAM  ANOP
.*
.* If PAR3 specified insert address of returncode field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR3 EQ 0).ENOPAR3
         AIF   ('&PAR3'(1,1) EQ '(').EPAR3R * Register specified?
         LA    &PREG,&PAR3             * Point to retcode field
         AGO   .EPAR3OK
.EPAR3R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR3(1)'              * Extract retcode pointer
.EPAR3OK ANOP
         ST    &PREG,&UNAM.NTDLRCD     * Put pointer into plist
.ENOPAR3 ANOP
.*
.* Plist is now complete
         AIF   ('&_MF2'(1,1) EQ '(').EDROPR
         DROP  DLPL                    * NTDLPL
         AGO   .EDROPOK
.EDROPR  DROP  &BREG                   * NTDLPL
.EDROPOK ANOP
.ENOMOD  ANOP  ,                       * No modifications to plist
.*
.* For MF=G we're done
         AIF   (&_MFG).MEND
.*
.* Invoke Name/Token service IEANTDL
         AIF   (K'&BREG EQ 0).ELAR1
         LR    R1,&BREG                * R1 must point to plist
         AGO   .ER1OK
.ELAR1   ANOP
         LA    R1,&_MF2                * R1 must point to plist
.ER1OK   ANOP
.*
         L     R15,X'010'              * Retrieve
         L     R15,X'220'(,R15)        *  address
         L     R15,X'014'(,R15)        *   of
         L     R15,X'00C'(,R15)        *    IEANTDL
         BASR  R14,R15                 * And call it
.*
.MEND    MEND
./ ADD NAME=NTRT     0100-20096-20096-0111-00497-00497-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Retrieve a name/token pair
.*
&LABEL   NTRT  &PAR1,                  * Parameter 1                   *
               &PAR2,                  * Parameter 2                   *
               &PAR3,                  * Parameter 3                   *
               &PAR4,                  * Parameter 4                   *
               &LVL=,                  * Value for level parameter     *
               &NAME=,                 * Value for token name          *
               &MF=                    * MF=L or MF=(E,list_addr)      *
                                       *      or MF=(G,list_addr)
.*
.* &PAR1 (reg) or name of a fullword, containing the level
.*       if omitted LVL= must be specified.
.* &PAR2 (reg) or name of a 16-byte area, containing the token name
.*       if omitted NAME= must be specified.
.* &PAR3 (reg) or name of a 16-byte area, where the token value is to
.*       be returned by name/token services.
.* &PAR4 (reg) or name of a fullword, where the returncode will go
.*       must not be omitted.
.*
.* &LVL     Literal, constant, or (reg). If specified, will be moved
.*          into the level parameter fullword.
.* &NAME    Literal, constant, or (reg). If specified, will be moved
.*          into the token name parameter 16-byte area.
.* &MF      L or (L) for the list-form
.*          (E,list_addr) for the execute form
.*          (G,list_addr) for the generate form
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC NTRT                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_AMODE              * Current amode
         LCLC  &_LABEL                 *
         LCLC  &_MF1                   * 1st MF-subparm: L or E
         LCLC  &_MF2                   * 2nd MF-subparm: plist_address
         LCLB  &_MFL                   * On if MF=L
         LCLB  &_MFE                   * On if MF=E
         LCLB  &_MFG                   * On if MF=G
         LCLB  &APPEND                 * On if fields appended to plist
         LCLA  &CTR                    * Counter for allocating fields
         LCLC  &_PAR1                  * &PAR1 or default
         LCLC  &_PAR2                  * &PAR2 or default
         LCLC  &_PAR3                  * &PAR3 or default
         LCLC  &_PAR4                  * &PAR4 or default
         LCLC  &_NAME                  * &NAME as unquoted string
         LCLA  &I                      * Index into substrings
         LCLC  &BREG                   * Base register for plist
         LCLC  &PREG                   * Pointer register
         LCLC  &VREG                   * Value register
         LCLC  &UNAM                   * USING name
.*
.* Check positional parameters
         AIF   (N'&SYSLIST LE 4).NOERR1
         MNOTE 4,'Too many positional parameters: ignored'
.NOERR1  ANOP
.*
.* Check the MF parameter
         AIF   (K'&MF EQ 0).ERR2A
&_MF1    SETC  '&MF'                   * Copy MF-value
         AIF   ('&MF' EQ 'L').SETMFL   * MF=L: ok
         AIF   ('&MF'(1,1) NE '(').ERR2B * MF=E must be in sublist
         AIF   (N'&MF EQ 0).ERR2B      *
&_MF1    SETC  '&MF(1)'                * Copy MF-value
         AIF   ('&_MF1' EQ 'L' AND N'&MF NE 1).ERR2B
         AIF   ('&_MF1' EQ 'L').SETMFL * MF=(L): ok
         AIF   (N'&MF NE 2).ERR2B      * Must have two sub-operands
&_MF2    SETC  '&MF(2)'                * Copy plist_address
         AIF   ('&_MF1' EQ 'E').SETMFE
         AIF   ('&_MF1' EQ 'G').SETMFG
         AGO   .ERR2B
.SETMFG  ANOP
&_MFG    SETB  1                       * Signal MF=G
         AGO   .NOERR2
.SETMFE  ANOP
&_MFE    SETB  1                       * Signal MF=E
         AGO   .NOERR2
.SETMFL  ANOP
&_MFL    SETB  1                       * Signal MF=E
         AGO   .NOERR2
.ERR2A   MNOTE 8,'Required parameter MF omitted'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Parameter MF must be L, (L), (E,plist_addr) or (G,pli*
               st_addr)'
.NOERR2  ANOP
.*
.* Check PAR1 (level field)
         AIF   (&_MFE).NOERR3
         AIF   (&_MFG AND K'&PAR1 NE 0 AND K'&LVL NE 0).NOERR3A
         AIF   (K'&PAR1 EQ 0 AND K'&LVL EQ 0).ERR3A
         AIF   (K'&PAR1 NE 0 AND K'&LVL NE 0).ERR3A
         AGO   .NOERR3A
.ERR3A   MNOTE 8,'Either the first positional parameter or the LVL-para*
               meter must be specified'
.NOERR3A ANOP
         AIF   (K'&PAR1 EQ 0).NOERR3B
         AIF   (&_MFG).NOERR3B
         AIF   ('&PAR1'(1,1) EQ '(').ERR3B
         AGO   .NOERR3B
.ERR3B   MNOTE 8,'Positional parameter 1 must not specify (reg) with MF*
               =L'
.NOERR3B ANOP
.NOERR3  ANOP
.*
.* Check PAR2 (name field)
         AIF   (&_MFE).NOERR4
         AIF   (&_MFG AND K'&PAR2 NE 0 AND K'&NAME NE 0).NOERR4A
         AIF   (K'&PAR2 EQ 0 AND K'&NAME EQ 0).ERR4A
         AIF   (K'&PAR2 NE 0 AND K'&NAME NE 0).ERR4A
         AGO   .NOERR4A
.ERR4A   MNOTE 8,'Either the second positional parameter or the NAME-pa*
               rameter must be specified'
.NOERR4A ANOP
         AIF   (K'&PAR2 EQ 0).NOERR4B
         AIF   (&_MFG).NOERR4B
         AIF   ('&PAR2'(1,1) EQ '(').ERR4B
         AGO   .NOERR4B
.ERR4B   MNOTE 8,'Positional parameter 2 must not specify (reg) with MF*
               =L'
.NOERR4B ANOP
.NOERR4  ANOP
.*
.* Check PAR3 (token field)
         AIF   (&_MFE).NOERR5
         AIF   (K'&PAR3 EQ 0).ERR5A
         AGO   .NOERR5A
.ERR5A   MNOTE 8,'The third positional parameter must be specified'
.NOERR5A ANOP
         AIF   (K'&PAR3 EQ 0).NOERR5B
         AIF   (&_MFG).NOERR5B
         AIF   ('&PAR3'(1,1) EQ '(').ERR5B
         AGO   .NOERR5B
.ERR5B   MNOTE 8,'Positional parameter 3 must not specify (reg) with MF*
               =L'
.NOERR5B ANOP
.NOERR5  ANOP
.*
.* Check PAR4 (returncode field)
         AIF   (&_MFE).NOERR7
         AIF   (K'&PAR4 EQ 0).ERR7A
         AGO   .NOERR7A
.ERR7A   MNOTE 8,'The fourth positional parameter must be specified'
.NOERR7A ANOP
         AIF   (K'&PAR4 EQ 0).NOERR7B
         AIF   (&_MFG).NOERR7B
         AIF   ('&PAR4'(1,1) EQ '(').ERR7B
         AGO   .NOERR7B
.ERR7B   MNOTE 8,'Positional parameter 4 must not specify (reg) with MF*
               =L'
.NOERR7B ANOP
.NOERR7  ANOP
.*
.* Check the LVL parameter
         AIF   (K'&LVL EQ 0).NOERR8
         AIF   (&_MFL AND '&LVL'(1,1) EQ '(').ERR8A
         AGO   .NOERR8
.ERR8A   MNOTE 8,'LVL-parameter must not specify (reg) when MF=L'
.NOERR8  ANOP
.*
.* Check the NAME parameter
         AIF   (K'&NAME EQ 0).NOERR9
         AIF   (&_MFL AND '&NAME'(1,1) EQ '(').ERR9A
         AGO   .NOERR9A
.ERR9A   MNOTE 8,'NAME-parameter must not specify (reg) when MF=L'
.NOERR9A ANOP
         AIF   ('&NAME'(1,1) EQ '(').NOERR9 * (reg): no literal check
&_NAME   SETC  '&NAME'                 * Assume name correct
&I       SETA  K'&NAME                 *
         AIF   ('&NAME'(&I,1) NE '''').NOERR9 * Unquoted string ok
         AIF   ('&NAME'(1,1) NE 'C').NAMNOTC
&_NAME   SETC  '&_NAME'(2,&I-1)        * Remove leading C
&I       SETA  &I-1                    *
.NAMNOTC ANOP
         AIF   ('&NAME'(1,1) NE '''').ERR9B
&_NAME   SETC  '&_NAME'(2,&I-2)        * Remove lead/trail quotes
         AGO   .NOERR9
.ERR9B   MNOTE 8,'Name must be specified as (un)quoted string or C-type*
                constant without L-modifier'
.NOERR9  ANOP
.*
.* Check the current amode
         AIF   ('&BXA_AMODE' EQ '31').NOERR12
.ERR12   MNOTE 8,'NTRT-macro cannot be issued when in Amode 24'
.NOERR12 ANOP
.*
.* Include mapping macro for plist
         GENMAPS IEANT                 * Map unless already mapped
         AIF   (&_MFE).MFE
.**********************************************************************
.*
.* Generate code for MF=L
.* First part also used for MF=G
.*
.**********************************************************************
.*
.* All fields not specified on the positional parameter by default
.* will be appended to the Plist proper
         AIF   (K'&PAR1 EQ 0 OR K'&PAR2 EQ 0 OR K'&PAR3 EQ 0).APPEND
         AIF   (K'&PAR4 EQ 0).APPEND
         AGO   .NOAPPEND
.APPEND  ANOP
&APPEND  SETB  1
.NOAPPEND ANOP
.*
.* For defaulted fields a label is required
         AIF   (NOT &_MFG).LABEL       * MF=L? normal label processing
         AIF   ('&_MF2'(1,1) EQ '(').GLBLREG * MF=(G,(reg)): register!
&_LABEL  SETC  'RTPL.NTRTPL'
         AGO   .LABELOK
.GLBLREG ANOP  ,                       * Plist addressed with register
&_BREG   SETC  '&MF(2,1)'              * Extract pointer register
&_LABEL  SETC  '(&_BREG)'              * Points to plist
         AGO   .LABELOK
.LABEL   ANOP
&_LABEL  SETC  '&LABEL'
         AIF   (NOT &APPEND).LABELOK
         AIF   (K'&LABEL NE 0).LABELOK
&_LABEL  SETC  '_NTRT&SYSNDX'
.LABELOK ANOP
&CTR     SETA  16                      * Plist length
.*
.* Determine defaulted positions for unspecified fields
.* PAR1: level field (fullword)
&_PAR1   SETC  '&PAR1'                 * Copy specified field location
         AIF   (K'&PAR1 NE 0).LPAR1OK  * If not specified
&_PAR1   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR1AD * Unless (reg)
&_PAR1   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR1AD ANOP
&CTR     SETA  &CTR+4                  * Advance to next free position
.LPAR1OK ANOP
.*
.* PAR2: name field (16 characters)
&_PAR2   SETC  '&PAR2'                 * Copy specified field location
         AIF   (K'&PAR2 NE 0).LPAR2OK  * If not specified
&_PAR2   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR2AD * Unless (reg)
&_PAR2   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR2AD ANOP
&CTR     SETA  &CTR+16                 * Advance to next free position
.LPAR2OK ANOP
.*
.* PAR3: token field (16 bytes)
&_PAR3   SETC  '&PAR3'                 * Copy specified field location
         AIF   (K'&PAR3 NE 0).LPAR3OK  * If not specified
&_PAR3   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR3AD * Unless (reg)
&_PAR3   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR3AD ANOP
&CTR     SETA  &CTR+16                 * Advance to next free position
.LPAR3OK ANOP
.*
.* PAR4: return field (fullword)
&_PAR4   SETC  '&PAR4'                 * Copy specified field location
         AIF   (K'&PAR4 NE 0).LPAR4OK  * If not specified
&_PAR4   SETC  '&_LABEL.+&CTR'         *  append field to plist
         AIF   ('&_LABEL'(1,1) NE '(').LPAR4AD * Unless (reg)
&_PAR4   SETC  '&CTR.&_LABEL'          *  append field to plist
.LPAR4AD ANOP
&CTR     SETA  &CTR+4                  * Advance to next free position
.LPAR4OK ANOP
.*
.* Plist generation for MF=G follows rules of MF=E
.* If there are any defaulted positional parameters: reinvoke NTRT
         AIF   (&_MFL).MFL
         AIF   (NOT &APPEND).MFE
&LABEL   NTRT  &_PAR1,&_PAR2,&_PAR3,&_PAR4,                            *
               LVL=&LVL,               *                               *
               NAME=&NAME,             *                               *
               MF=(G,&_MF2)            *
         AGO   .LWARN
.*
.MFL     ANOP
.*
.* Generate code for MF=L
         DS    0F                      * Align on fullword
&_LABEL  EQU   *,&CTR                  *
         DC    AL4(&_PAR1)             * Level pointer
         DC    AL4(&_PAR2)             * Name pointer
         DC    AL4(&_PAR3)             * Token pointer
         DC    AL4(&_PAR4)             * Returncode pointer
.*
.* Generate defaulted level field
         AIF   ('&_PAR1' EQ '&PAR1').LNOPAR1
         DC    AL4(&LVL)
.LNOPAR1 ANOP
.*
.* Generate defaulted name field
         AIF   ('&_PAR2' EQ '&PAR2').LNOPAR2
         DC    CL16'&_NAME'
.LNOPAR2 ANOP
.*
.* Generate defaulted token field (violates reentrancy)
         AIF   ('&_PAR3' EQ '&PAR3').LNOPAR3
         DC    XL16'00'
.LNOPAR3 ANOP
.*
.* Generate defaulted return code field (violates reentrancy)
         AIF   ('&_PAR4' EQ '&PAR4').LNOPAR4
         DC    AL4(0)
.LNOPAR4 ANOP
.*
.* Generate warning with length of plist
.LWARN   ANOP
         AIF   (NOT &APPEND).MEND
         MNOTE *,'Generated Plist and areas for NTRT: &CTR bytes'
         AGO   .MEND
.*********************************************************************
.*
.* Generate coding for MF=E
.*
.*********************************************************************
.MFE     ANOP
&LABEL   LABEL ,                       *
.*
.* If no overriding parameters are specified: skip plist modification
         AIF   (K'&PAR1 NE 0).EMODPL
         AIF   (K'&PAR2 NE 0 OR K'&LVL NE 0).EMODPL
         AIF   (K'&PAR3 NE 0 OR K'&NAME NE 0).EMODPL
         AIF   (K'&PAR4 NE 0).EMODPL
         AGO   .ENOMOD
.*
.* Make parmlist addressable
.EMODPL  ANOP  ,                       * Modify Plist before call
         AIF   ('&_MF2'(1,1) EQ '(').EREG
RTPL     USE   NTRTPL,&_MF2            * Set plist addressable
&UNAM    SETC  'RTPL.'
         AGO   .EUSEOK
.EREG    ANOP
&BREG    SETC  '&MF(2,1)'              * Extract register number
         USE   NTRTPL,&BREG            * And set plist addressable
.EUSEOK  ANOP
.*
.* If PAR1 specified insert address of level field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR1 EQ 0).ENOPAR1
         AIF   ('&PAR1'(1,1) EQ '(').EPAR1R * Register specified?
         LA    &PREG,&PAR1             * Point to level field
         AGO   .EPAR1OK
.EPAR1R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR1(1)'              * Extract level field pointer
.EPAR1OK ANOP
         ST    &PREG,&UNAM.NTRTLVL     * Put pointer into plist
.ENOPAR1 ANOP
.*
.* If LVL specified insert value into field
         AIF   (K'&LVL EQ 0).ENOLVL
         AIF   (K'&PAR1 NE 0).EPTR1OK  * Pointer already loaded?
         L     &PREG,NTRTLVL           * Point to level field
.EPTR1OK ANOP
         AIF   ('&LVL'(1,1) EQ '(').ELVLR * Register specified?
         LA    &VREG,&LVL              * Load level value
         AGO   .ELVLOK
.ELVLR   ANOP  ,                       * Specified as (reg)
&VREG    SETC  '&LVL(1)'               * Extract level value register
.ELVLOK  ANOP
         ST    &VREG,0(,&PREG)         * And put into level field
.ENOLVL  ANOP
.*
.* If PAR2 specified insert address of name field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR2 EQ 0).ENOPAR2
         AIF   ('&PAR2'(1,1) EQ '(').EPAR2R * Register specified?
         LA    &PREG,&PAR2             * Point to name field
         AGO   .EPAR2OK
.EPAR2R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR2(1)'              * Extract name field pointer
.EPAR2OK ANOP
         ST    &PREG,&UNAM.NTRTNAM     * Put pointer into plist
.ENOPAR2 ANOP
.*
.* If NAME specified insert value into field
         AIF   (K'&NAME EQ 0).ENONAM
         AIF   (K'&PAR2 NE 0).EPTR2OK  * Pointer already loaded?
         L     &PREG,NTRTNAM           * Point to name field
.EPTR2OK ANOP
         AIF   ('&NAME'(1,1) EQ '(').ENAMR * Register specified?
         MVC   0(16,&PREG),=CL16'&_NAME' * Move name into field
         AGO   .ENONAM
.ENAMR   ANOP  ,                       * Specified as (reg)
&VREG    SETC  '&NAME(1)'              * Extract name value register
         MVC   0(16,&PREG),0(&VREG)    * Move name into field
.ENONAM  ANOP
.*
.* If PAR3 specified insert address of token field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR3 EQ 0).ENOPAR3
         AIF   ('&PAR3'(1,1) EQ '(').EPAR3R * Register specified?
         LA    &PREG,&PAR3             * Point to token field
         AGO   .EPAR3OK
.EPAR3R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR3(1)'              * Extract token field pointer
.EPAR3OK ANOP
         ST    &PREG,&UNAM.NTRTTOK     * Put pointer into plist
.ENOPAR3 ANOP
.*
.* If PAR4 specified insert address of returncode field into plist
&PREG    SETC  'R15'                   * Set register to use as pointer
&VREG    SETC  'R0'                    * Set register to use for value
         AIF   (K'&PAR4 EQ 0).ENOPAR4
         AIF   ('&PAR4'(1,1) EQ '(').EPAR4R * Register specified?
         LA    &PREG,&PAR4             * Point to retcode field
         AGO   .EPAR4OK
.EPAR4R  ANOP  ,                       * Specified as (reg)
&PREG    SETC  '&PAR4(1)'              * Extract retcode pointer
.EPAR4OK ANOP
         ST    &PREG,&UNAM.NTRTRCD     * Put pointer into plist
.ENOPAR4 ANOP
.*
.* Plist is now complete
         AIF   ('&_MF2'(1,1) EQ '(').EDROPR
         DROP  RTPL                    * NTRTPL
         AGO   .EDROPOK
.EDROPR  DROP  &BREG                   * NTRTPL
.EDROPOK ANOP
.ENOMOD  ANOP  ,                       * No modifications to plist
.*
.* For MF=G we're done
         AIF   (&_MFG).MEND
.*
.* Invoke Name/Token service IEANTRT
         AIF   (K'&BREG EQ 0).ELAR1
         LR    R1,&BREG                * R1 must point to plist
         AGO   .ER1OK
.ELAR1   ANOP
         LA    R1,&_MF2                * R1 must point to plist
.ER1OK   ANOP
.*
         L     R15,X'010'              * Retrieve
         L     R15,X'220'(,R15)        *  address
         L     R15,X'014'(,R15)        *   of
         L     R15,X'008'(,R15)        *    IEANTRT
         BASR  R14,R15                 * And call it
.*
.MEND    MEND
./ ADD NAME=OPSYNS   0100-20096-20096-0111-00110-00110-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates OPSYNs for a list of opcodes
.*
         OPSYNS ,                      * Arguments in &SYSLIST
.*
.* &SYSLIST - each entry specifies an opcode or directive which will
.*            be replaced by its underscore-prefixed equivalent
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC OPSYNS                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &SP_SHOWALL             * SHOWALL option from SYSPARM
         LCLA  &I                      * Index for SYSLIST
         LCLC  &ARG                    * Argument from SYSLIST
         LCLC  &_PROPT                 * NOPRINT option for PUSH/POP
         LCLC  &_PRINT                 * NOPRINT option for PRINT
.*
.* Set NOPRINT options
&_PRINT  SETC  'ON'                    * SHOWALL: show PRINT lines
         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP lines
&_PRINT  SETC  'OFF,NOPRINT'           * Not ALL: omit PRINT lines
&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines
.PRINTOK ANOP
.*
.* Change print options
         PUSH  PRINT&_PROPT
         PRINT &_PRINT
.*
.* Loop thru SYSLIST to generate OPSYNs
&I       SETA  0                       * I indexes SYSLIST
.LOOP1   ANOP  ,
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK
&ARG     SETC  '&SYSLIST(&I)'          * Extract opcode
         AIF   ('&ARG'(1,1) EQ '_').RESET
.SET     ANOP  ,                       * Replace opcode by macro
         AIF   (K'&ARG EQ 0).LOOP1     * Skip omitted opcode
_&ARG    OPSYN &ARG                    * Create underscore version
&ARG     OPSYN ,                       * Delete original opcode
         AGO   .LOOP1                  * Go process next entry
.RESET   ANOP  ,                       * Replace macro by org. opcode
&ARG     SETC  '&ARG'(2,*)             * Extract original opcode
&ARG     OPSYN _&ARG                   * Re-enable original opcode
_&ARG    OPSYN ,                       * Disable replacement macro
         AGO   .LOOP1                  * Go process next entry
.LOOP1OK ANOP  ,
.*
.* Restore printing options
         POP   PRINT&_PROPT
.*
.MEND    MEND
./ ADD NAME=PGM      0100-20096-20096-0111-01019-01019-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates entry logic for a CSECT
.*
&LABEL   PGM   &VERSION=,              * Version id: VnnRnnMnn         *
               &AMODE=31,              * Amode default=31              *
               &RMODE=ANY,             * Rmode default=ANY             *
               &ENTRY=MAIN,            * MAIN/SUBR/SUBPGM/SVC          *
               &SAVES=,                * Nr of internal saveareas      *
               &MAPS=,                 * Mapping macro's to include    *
               &LIST=NO,               * List maps (YES/NO)            *
               &WORKPTR=,              * Pointer to dyn.area           *
               &WORKAREA=,             * Descriptor of dyn.area        *
               &HDRTXT='No description', * Description for list-headers*
               &DBG=,                  * Name of ptrs for debugging    *
               &ABND=                  * Info for Abend service rout.
.*
.* &LABEL      CSECT name to be used. Defaults to member name.
.* &VERSION    must be in the format VnnRnnMnn
.* &AMODE      must be 24 or 31
.* &RMODE      must be 24, 31, or ANY
.* &ENTRY      Type of program (see below) or (Type,ASC-mode)
.*             ASC-mode defaults to PRIM, but may be specified as AR
.*             as well. The following types of program are defined:
.*             MAIN:   Generates linkage using a stack-entry (BAKR).
.*                     Intended for main programs
.*             SUBPGM: Generates normal linkage using savearea at R13.
.*                     Intended for sub-programs
.*             SUBR:   Generates normal linkage using internal savearea
.*                     Intended for CSECTS that share their R13 with
.*                       their caller.
.*             SVC:    Generates linkage appropriate for SVC-entry.
.*                     Intended for SVC's and SVC-screening routines
.*             SPCR:   Generates linkage appropriate for stacking
.*                     PC-routines. Assumes routine is entered
.*                     in supervisor mode.
.*             SRB:    Generates linkage appropriate for SRB-entry.
.*                     Sets up FRR parmlist with ptr to SRB and passes
.*                     the SRB parmlist ptr in R1 to the mainline.
.*             FRR     Generates linkage appropriate for FRR routines.
.*             RMTR    Generates linkage appropriate for RMTR routines.
.*                     Passes the SRB address in R1 to the mainline.
.*             RESMGR  Generates linkage appropriate for a resource
.*                     manager routine. Sets up MAIN linkage and
.*                     establishes addressability to the RMPL.
.* &SAVES      The number of internal save-areas to allocate
.* &MAPS       Mapping macro's to be generated, must be a sublist
.* &LIST       NO: no listings are generated from the MAPS parameter
.*             YES: listings are generated from the MAPS parameter
.* &WORKPTR    Either one or three sub-operands.
.*             When omitted, no pointer is assumed to exist and a
.*             workarea will be allocated, as specified in &WORKAREA.
.*             If specified as three operands, they must be specified
.*             as follows:
.*           - The label of the pointer field
.*           - The label of a using-location
.*           - The register that contains the address of the using loc.
.*             If there is only 1 sub-operand, must be a (register),
.*             unless ENTRY=SUBR, in which case the sub-operand may
.*             specify a field in the workarea, passed thru R13.
.* &WORKAREA   DSECT name or sublist with two to four sub-operands:
.*           - DSECT name for using with R13. This DSECT must start
.*             with a DCL BXASAVE. It also must contain an
.*             equate for DSECTname_LEN. The DSECT must be specified on
.*             the MAPS-parameter of the macro invocation.
.*           - Length of the work-area to be allocated
.*             This parameter may be omitted for ENTRY=SUBR
.*           - An optional 8-character id for the first 8 positions of
.*             the work-area. Defaults to &_LABEL.
.*           - An optional fieldname in the workarea, which is to
.*             contain the total amount of storage allocated for
.*             the workarea plus internal saveareas.
.* &HDRTXT     Header text for use on the listing's header lines
.* &DBG        Valid only with ENTRY=SUBR. Names of 2 fields with:
.*           - pointer to debug module
.*           - plist for debug module
.* &ABND       One or two sub-operands
.*           - User abend code to use for this program
.*           - Label to use for the abend service routine (dft: _ABND)
.*
.* Work-area requirements: (See macro MAPSAVE)
.* at offset  0: a doubleword reserved for an area ID
.* at offset  8: a standard MVS save-area of 18 fullwords
.* at offset 80: two pointers to internal save-areas, see MAPSAVE
.*
.* Define global variables
         GBLC  &SYSASCE                * SYSSTATE's ASC mode variable
         GBLC  &BXA_WALAB              * Work label (for using)
         GBLC  &BXA_WALEN              * Work area length
         GBLC  &BXA_ENTRY              * Entry mode
         GBLA  &BXA_SAVES              * Nr of internal save-areas
         GBLC  &BXA_WORKPTR(3)         * Pointer to dyn.storage
         GBLB  &BXA_SVCMODE            * On when in supervisor mode
         GBLC  &BXA_SUBR               * Current subroutine name
         GBLC  &BXA_SUBRTP             * Current subroutine type
         GBLC  &BXA_AMODE              * Current Amode
         GBLC  &BXA_USE_R12            * USING label for R12
         GBLC  &BXA_USE_DS(50)         * DSECT names with DCL's
         GBLC  &BXA_USE_SDS(50)        * Sub-DSECTs
         GBLC  &BXA_USE_LBL(50)        * Labels for the Sus-DSECTs
         GBLB  &BXA_PGM                * On if expanded before
         GBLC  &BXA_PGM_LABEL          * Label used by PGM-expansion
         GBLC  &BXA_PGM_TITLE          * Title used for the listing
         GBLC  &BXA_ABND(50)           * Labels used by ABND macro
         GBLB  &SP_SHOWALL             * On if all lines to show
         GBLB  &SP_OPT                 * On for optimize mode
         GBLC  &BXA_DBG_PTR            * Fieldname of ptr to dbg-mod
         GBLC  &BXA_DBG_PLIST          * Fieldname of plist for dbg-mod
         GBLA  &BXA_USENDX             * Master index for USING tables
         GBLB  &BXA_MAC_MAPPSA         * PSA mapped?
         GBLA  &BXA_NUMVAL             * Retvalue from CHKREG/CHKNUM
.*
.* &BXA_ENTRY is given a value after validity check at error6
.* &BXA_WALAB is given a value after validity check at error7
.* &BXA_WALEN is given a value after validity check at error7
.* &BXA_SAVES is given a value after validity check at error10
&BXA_WORKPTR(1) SETC '&WORKPTR(1)'     * Copy
&BXA_WORKPTR(2) SETC '&WORKPTR(2)'     *   workptr
&BXA_WORKPTR(3) SETC '&WORKPTR(3)'     *     values
&BXA_SUBR SETC '*MAIN'                 * Start with open code
&BXA_SUBRTP SETC ''                    * Start with normal type routine
&BXA_AMODE SETC '&AMODE'               * Start with 31-bit Amode
&BXA_USENDX SETA 1                     * Init index BXA_USENDX0/1 to 1
.*
.* Define local variables
         LCLC  &_ENTRY1                * Type of program
         LCLC  &_ENTRY2                * ASC-mode of program on entry
         LCLC  &_WORKA1                * Label for USING for workarea
         LCLC  &_WORKA2                * Length of workarea
         LCLC  &_WORKA3                * Id for workarea
         LCLC  &_WORKA4                * Fieldname for total size
         LCLB  &_WORKP1REG             * On if &WORKPTR(1) is a reg.
         LCLC  &_WORKP1                * First sub-operand of WORKPTR
         LCLC  &_WORKP3                * Basereg. for area with ptr
         LCLC  &_HDRTXT                * Text for headers
         LCLC  &_LABEL                 * Entry point label
         LCLC  &_STOR_LEN              * Size of getmain
         LCLC  &_STOR_LOC              * Location for getmained area
         LCLA  &LEN                    * Length of HDRTXT
         LCLC  &CC,&YY,&MM,&DD         * Century, year, month, day
         LCLC  &HR,&MIN                * Hours and minutes
         LCLC  &_LIST1,&_LIST2         * LIST sub-option 1 and 2
         LCLC  &_MCALL                 * Print option MCALL/NOMCALL
         LCLC  &_PROPT                 * Print option for PUSH/POP
         LCLC  &_ABND1                 * Abend code to generate
         LCLC  &_ABND2                 * Abend label to generate
         LCLA  &I                      * Index for &BXA_USE_... arrays
         LCLC  &SA                     * Savearea prefix
         LCLC  &_ID                    * Identifier for workarea
         LCLC  &_REG                   * reg with ptr to WA after alloc
         LCLC  &_CLRSZ                 * Size of area to clear
.*
.* PGM used before?
         AIF   (&BXA_PGM).ERR0A
         AGO   .NOERR0A
.ERR0A   MNOTE 8,'You cannot issue PGM more than once in a program'
         MEXIT
.NOERR0A ANOP
&BXA_PGM SETB 1
.*
.* Extract assembly options from SYSPARM
         SYSPARM
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC PGM                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Set listing options
&_MCALL  SETC  'MCALL'                 * SHOWALL: show MCALL lines
         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP lines
&_MCALL  SETC  'NOMCALL'               * Not ALL: omit MCALL lines
&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines
.PRINTOK ANOP
         PRINT GEN,DATA,&_MCALL,UHEAD&_PROPT
.*
.* Check Label parameter
&_LABEL  SETC  '&LABEL'
         AIF   (K'&LABEL NE 0).LABELOK
&_LABEL  SETC  '&SYSIN_MEMBER'
.LABELOK ANOP
&BXA_PGM_LABEL SETC '&_LABEL'
.*
.* Check hdrtxt parameter - remove quotes if necessary
&_HDRTXT SETC  '&HDRTXT'
         AIF   ('&HDRTXT'(1,1) NE '''').NOQUOTE
&LEN     SETA  K'&HDRTXT
&LEN     SETA  &LEN-2
&_HDRTXT SETC  '&HDRTXT'(2,&LEN)
.NOQUOTE ANOP
.*
.* Set title for listing
&BXA_PGM_TITLE SETC  '&_LABEL - Copyright B.V. Bixoft - &_HDRTXT'
         TITLE '&BXA_PGM_TITLE'
         AIF   (&SP_SHOWALL).TITLE
.* Generate comment line in stead of a MNOTE line
*
         AGO   .TITLEOK
.TITLE   ANOP
         MNOTE *,'Previous STMT: TITLE ''&BXA_PGM_TITLE'''
.TITLEOK ANOP
.*
.* PGM used as first macro?
         AIF   (&SYSNDX NE 1).ERR0B
         AGO   .NOERR0B
.ERR0B   MNOTE 8,'PGM must be the first macro in your program'
         MEXIT
.NOERR0B ANOP
.*
.* Check version parameter
         AIF   (K'&VERSION NE 9).ERROR1
         AIF   ('&VERSION'(1,1) NE 'V').ERROR1
         AIF   ('&VERSION'(2,1) LT '0').ERROR1
         AIF   ('&VERSION'(3,1) LT '0').ERROR1
         AIF   ('&VERSION'(4,1) NE 'R').ERROR1
         AIF   ('&VERSION'(5,1) LT '0').ERROR1
         AIF   ('&VERSION'(6,1) LT '0').ERROR1
         AIF   ('&VERSION'(7,1) NE 'M').ERROR1
         AIF   ('&VERSION'(8,1) LT '0').ERROR1
         AIF   ('&VERSION'(9,1) LT '0').ERROR1
         AGO   .NOERR1
.ERROR1  MNOTE 8,'Parameter VERSION must be present with format VnnRnnM*
               nn'
.NOERR1  ANOP
.*
.* Check amode parameter
         AIF   ('&AMODE' EQ '24').NOERR2
         AIF   ('&AMODE' EQ '31').NOERR2
         AIF   ('&AMODE' EQ 'ANY').NOERR2
.ERROR2  MNOTE 8,'Parameter AMODE must be 24, 31 or ANY'
.NOERR2  ANOP
.*
.* Check rmode parameter
         AIF   ('&RMODE' EQ '24').NOERR3
         AIF   ('&RMODE' EQ 'ANY').NOERR3
.ERROR3  MNOTE 8,'Parameter RMODE must be 24 or ANY'
.NOERR3  ANOP
.*
.* For amode 24, rmode must 24 as well
         AIF   ('&AMODE' NE '24').NOERR4
         AIF   ('&RMODE' EQ '24').NOERR4
.ERROR4  MNOTE 8,'For Amode 24 Rmode must be 24 as well'
.NOERR4  ANOP
.*
.* For rmode any, amode must not be 24
         AIF   ('&RMODE' NE 'ANY').NOERR5
         AIF   ('&AMODE' NE '24').NOERR5
.ERROR5  MNOTE 8,'For Rmode ANY Amode must not be 24'
.NOERR5  ANOP
.*
.* Check entry parameter
         AIF   (K'&ENTRY EQ 0).ERR6A
&_ENTRY1 SETC  '&ENTRY'
&_ENTRY2 SETC  'PRIM'
         AIF   ('&ENTRY'(1,1) NE '(').NOERR6A
&_ENTRY1 SETC  '&ENTRY(1)'             * Extract type of program
&_ENTRY2 SETC  '&ENTRY(2)'             * Extract initial ASC-mode
         AIF   (N'&ENTRY GE 2).NOERR6A
&_ENTRY2 SETC  'PRIM'                  * Default to primary mode
         AGO   .NOERR6A
.ERR6A   MNOTE 8,'Required ENTRY-parameter missing'
         AGO   .NOERR6
.NOERR6A ANOP  ,
         AIF   ('&_ENTRY1' EQ 'FRR').NOERR6B
         AIF   ('&_ENTRY1' EQ 'MAIN').NOERR6B
         AIF   ('&_ENTRY1' EQ 'RESMGR').NOERR6B
         AIF   ('&_ENTRY1' EQ 'RMTR').NOERR6B
         AIF   ('&_ENTRY1' EQ 'SPCR').NOERR6B
         AIF   ('&_ENTRY1' EQ 'SRB').NOERR6B
         AIF   ('&_ENTRY1' EQ 'SUBPGM').NOERR6B
         AIF   ('&_ENTRY1' EQ 'SUBR').NOERR6B
         AIF   ('&_ENTRY1' EQ 'SVC').NOERR6B
.ERR6B   MNOTE 8,'ENTRY parameter must specify a valid program type'
.NOERR6B ANOP  ,
         AIF   ('&_ENTRY2' EQ 'PRIM').NOERR6C
         AIF   ('&_ENTRY2' EQ 'AR').NOERR6C
.ERR6C   MNOTE 8,'ENTRY parameter must specify mode AR or PRIM'
.NOERR6C ANOP  ,
.NOERR6  ANOP
&BXA_ENTRY SETC '&_ENTRY1'             * Copy entry parameter value
.*
.* Check workarea parameter
         AIF   (K'&WORKAREA EQ 0)._WORKAX
         AIF   ('&WORKAREA'(1,1) EQ '(')._WORKA
&_WORKA1 SETC  '&WORKAREA'             * Id of DSECT to use with R13
&_WORKA2 SETC  '&WORKAREA'.'_LEN'      * Length of DSECT to allocate
         AGO   ._WORKAX
._WORKA  ANOP
&_WORKA1 SETC  '&WORKAREA(1)'          * Field that R13 will point to
&_WORKA2 SETC  '&WORKAREA(2)'          * Length of DSECT to allocate
&_WORKA3 SETC  '&WORKAREA(3)'          * Identifier for DSECT
&_WORKA4 SETC  '&WORKAREA(4)'          * Total length field
._WORKAX ANOP
.*
.* For ENTRY=SUBR, the id must be specified
         AIF   ('&_ENTRY1' NE 'SUBR').NOERR7E
         AIF   (K'&_WORKA1 NE 0 AND K'&_WORKA3 NE 0).NOERR7E
.ERR7E   MNOTE 8,'WORKAREA parameter misses USING label or identifier c*
               ontent'
.NOERR7E ANOP  ,
.*
.* If length field specified, &WORKPTR must be specifie too
         AIF   (K'&_WORKA4 EQ 0).NOERR7F
         AIF   (K'&WORKPTR NE 0).NOERR7F
.ERR7F   MNOTE 8,'WORKAREA specifies a length field, but WORKPTR was no*
               t specified'
.NOERR7F ANOP  ,
.*
.* If WORKAREA completely omitted, use BXASAVE as a default
         AIF   (K'&WORKAREA NE 0).NODFT7
&_WORKA1 SETC  'BXASAVE'
&_WORKA2 SETC  'BXASAVE_LEN'
&_WORKA3 SETC  '&_LABEL'
         AGO   .DFT7OK
.NODFT7  ANOP  ,
.*
.* If Workarea is not a list of four parms: issue error message
         AIF   (N'&WORKAREA GT 4).ERROR7B
         AGO   .NOERR7B
.ERROR7B MNOTE 4,'WORKAREA parameter contains too many subparameters'
.NOERR7B ANOP
.*
.* If Label omitted: use SAVEAREA as a default
         AIF   (K'&_WORKA1 NE 0).NODFT7B
&_WORKA1 SETC  'SAVEAREA'
.NODFT7B ANOP
.*
.* If length omitted: use label with _LEN appended
         AIF   (K'&_WORKA2 NE 0).NODFT7C
&_WORKA2 SETC  '&_WORKA1'.'_LEN'
.NODFT7C ANOP
.*
.* If id omitted: use csect name
         AIF   (K'&_WORKA3 NE 0).NODFT7D
&_WORKA3 SETC  '&_LABEL'
.NODFT7D ANOP
.*
.DFT7OK  ANOP
&BXA_WALAB SETC '&_WORKA1'
&BXA_WALEN SETC '&_WORKA2'
.*
.* Check workid parameter
         AIF   (K'&_WORKA3 LE 8).NOERR7C
.ERROR7C MNOTE 8,'Workid parameter truncated to 8 characters'
&_WORKA3 SETC  '&_WORKA3'(1,8)         * Use first 8 chars
.NOERR7C ANOP
.*
.* Check list parameter
&_LIST1  SETC  '&LIST'
         AIF   ('&LIST' EQ 'YES').NOERR8
         AIF   ('&LIST' EQ 'NO').NOERR8
.ERR8A   MNOTE 8,'List parameter must specify either YES or NO'
.NOERR8  ANOP
.*
.* Check workptr parameter
         AIF   (K'&WORKPTR EQ 0).NOERR9
         AIF   ('&_ENTRY1' EQ 'SUBPGM').NOERR9A
         AIF   ('&_ENTRY1' EQ 'SUBR').NOERR9A
.ERR9A   MNOTE 8,'WORKPTR parameter valid only when ENTRY=SUBPGM or ENT*
               RY=SUBR'
.NOERR9A ANOP
         AIF   (K'&WORKPTR(1) NE 0).NOERR9B
.ERR9B   MNOTE 8,'First operand of Workptr must specify a label or a re*
               gister'
.NOERR9B ANOP
         AIF   (N'&WORKPTR EQ 1).NOERR9E
         AIF   (K'&WORKPTR(2) NE 0).NOERR9C
.ERR9C   MNOTE 8,'Second operand of Workptr must specify a using label'
.NOERR9C ANOP
         AIF   (K'&WORKPTR(3) NE 0).NOERR9D
.ERR9D   MNOTE 8,'Third operand of Workptr must specify a register'
.NOERR9D ANOP
         AIF   (N'&WORKPTR EQ 3).NOERR9E
.ERR9E   MNOTE 8,'Workptr must have either 1 or 3 sub-operands'
.NOERR9E ANOP
         AIF   (N'&WORKPTR NE 1).NOERR9F
         AIF   ('&WORKPTR(1)'(1,1) EQ '(').NOERR9F
         AIF   ('&_ENTRY1' EQ 'SUBR').NOERR9F
.ERR9F   MNOTE 8,'Workptr with only one sub-operand must specify a (reg*
               ister)'
.NOERR9F ANOP
.* Check whether the WORKPTR(1) subparameter (if specified) designates
.* a register or a field.
         AIF   (N'&WORKPTR LT 1).NOERR9 * No sub-operands
&_WORKP1 SETC  '&WORKPTR(1)'           * Extract first sub-operand
         AIF   ('&_WORKP1'(1,1) NE '(').NOERR9
&_WORKP1REG SETB 1                     * Indicate it's a register
&_WORKP1 SETC  '&WORKPTR(1,1)'         * Extract register to use
.NOERR9  ANOP
.*
.* Check saves parameter
         AIF   (K'&SAVES EQ 0).NOERR10
         CHKNUM MACRO=PGM,NAME=SAVES,VAL=&SAVES
&BXA_SAVES SETA &SAVES
.NOERR10 ANOP
.*
.* Check nesting level
         AIF   (&SYSNEST EQ 1).NOERR11
.ERR11   MNOTE 8,'PGM must not be issued from within another macro'
.NOERR11 ANOP
.*
.* Check ABND-parameter
         AIF   (K'&ABND EQ 0).ERR12A
         AIF   ('&ABND'(1,1) EQ '(').ERR12LST
&_ABND1  SETC  '&ABND'
         AGO   .ERR12CHK
.ERR12LST ANOP
         AIF   (N'&ABND EQ 0).ERR12B
&_ABND1  SETC  '&ABND(1)'
         AIF   (N'&ABND EQ 1).ERR12CHK
&_ABND2  SETC  '&ABND(2)'
         AIF   (N'&ABND GT 2).ERR12C
.ERR12CHK ANOP
         CHKNUM MACRO=PGM,            * Abend code must be a valid     *
               NAME=_ABND1,           *  number, maximum 4095          *
               VAL=&_ABND1            *
         AIF   (&BXA_NUMVAL EQ 0).ERR12D
         AIF   (&BXA_NUMVAL GT 4095).ERR12E
         AGO   .NOERR12
.*
.ERR12A  MNOTE 8,'ABND-parameter omitted'
         AGO   .NOERR12
.ERR12B  MNOTE 8,'ABND-parameter specifies empty sublist'
         AGO   .NOERR12
.ERR12C  MNOTE 4,'ABND-parameter too many sub-parameters'
         AGO   .NOERR12
.ERR12D  MNOTE 8,'ABND-parameter specifies a code that is zero or not n*
               umeric'
         AGO   .NOERR12
.ERR12E  MNOTE 8,'ABND-parameter specifies a code that is more than 409*
               5'
.NOERR12 ANOP
         AIF   (K'&_ABND2 NE 0).NODFT12
&_ABND2  SETC  '_ABND'
.NODFT12 ANOP
.*
.* Check DBG-parameter
         AIF   (K'&DBG EQ 0).NOERR13
         AIF   ('&_ENTRY1' NE 'SUBR').ERR13A
         AIF   ('&DBG'(1,1) NE '(').ERR13B
         AIF   (N'&DBG EQ 0).ERR13B
         AIF   (N'&DBG EQ 1).ERR13B
         AIF   (N'&DBG GT 2).ERR13B
&BXA_DBG_PTR SETC '&DBG(1)'
&BXA_DBG_PLIST SETC '&DBG(2)'
         AIF   (K'&BXA_DBG_PTR EQ 0).ERR13B
         AIF   (K'&BXA_DBG_PLIST EQ 0).ERR13B
         AGO   .NOERR13
.ERR13A  MNOTE 4,'DBG parameter ignored, valid only with ENTRY=SUBR'
         AGO   .NOERR13
.ERR13B  MNOTE 8,'DBG parameter must specify (dbg_ptr,dbg_plist)'
.NOERR13 ANOP
.*
.* Extract date and time from system variables
&YY      SETC  '&SYSDATE'(7,2)         * Extract year number
&MM      SETC  '&SYSDATE'(1,2)         * Extract month number
&DD      SETC  '&SYSDATE'(4,2)         * Extract day number
&CC      SETC  '20'                    * Default 21st century
         AIF   ('&YY' NE '99').CC20    * Default ok?
&CC      SETC  '19'                    * No: use 20th century
.CC20    ANOP  ,                       *
.*
&HR      SETC  '&SYSTIME'(1,2)         * Extract hours
&MIN     SETC  '&SYSTIME'(4,2)         * Extract minutes
.*
.* Replace assembler directives and opcodes with our own macros
         OPSYNS DROP,EJECT,END,EQU,LTORG,POP,PUSH,SPACE,USING
         OPSYNS IPK,TRT                *
         AIF   (NOT &SP_OPT).START     *
         OPSYNS LA,LR                  *
.START   ANOP  ,                       *
.*
.* Define internal macro's
         PGM0  ,                       * Define CHK_STACK
*
* Program setup
&_LABEL  START ,                       *
&_LABEL  AMODE &AMODE                  *
&_LABEL  RMODE &RMODE                  *
*
* Mapping macros
         GENMAPS (MAPEQU,MAPSAVE),     * Include standard map-macro's  *
               LIST=&_LIST1            *
         AIF   (K'&MAPS EQ 0).NOMAPS   *
         GENMAPS &MAPS,                * Include specified map-macro's *
               LIST=&_LIST1            *
.NOMAPS  ANOP  ,                       *
.*
.* Check that the supplied DSECT name begins with a BXASAVE-subarea
.* and find the label used to set the savearea addressable
         AIF   ('&_WORKA1' EQ 'BXASAVE').LOOP7OK
&I       SETA  0                       * I is index in &BXA_USE_...
.LOOP7   ANOP  ,                       * Loop until first match
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&BXA_USE_DS).LOOP7NF * End-of-table: not found
         AIF   ('&BXA_USE_DS(&I)' NE '&_WORKA1').LOOP7 * Skip mismatch
.LOOP7F  ANOP  ,                       * Found: check entry
         AIF   ('&BXA_USE_SDS(&I)' NE 'BXASAVE').LOOP7R1
&SA      SETC  '&BXA_USE_LBL(&I)'      * Copy label for USING
         AIF   (K'&SA EQ 0).LOOP7OK
&SA      SETC  '&SA'.'.'               * Add period to prefix-label
         AGO   .LOOP7OK
.LOOP7R1 MNOTE 8,'BXASAVE area in DSECT &_WORKA1 is not the on the firs*
               t DCL-statement'
         AGO   .LOOP7OK
.LOOP7NF MNOTE 8,'No BXASAVE area found in DSECT &_WORKA1'
.LOOP7OK ANOP
.*
.* If &ENTRY=MAIN:        generate BAKR to save regs
.* If &ENTRY=SVC:         Store registers in RBEXSAVE
.* If &ENTRY=SUBR/SUBPGM/FRR/RESMGR: generate STM to save regs
.* If &ENTRY=SRB/RMTR:    No save is required
*
* Initialization code
         AIF   ('&_ENTRY2' EQ 'AR').SETM_AR
         SYSSTATE ASCENV=P             * Signal we're in primary mode
         AGO   .SETM_OK
.SETM_AR ANOP  ,
         SYSSTATE ASCENV=AR            * Signal we're in AR mode
.SETM_OK ANOP  ,
.*
         AIF   ('&_ENTRY1' EQ 'SVC').USER6
         AIF   ('&_ENTRY1' EQ 'SPCR').USESPCR
.* Init for SUBR/SUBPGM/MAIN/SRB/RMTR/RESMGR
         USE   &_LABEL,R15             * R15 contains Entry Point Addr
         AGO   .USEOK                  *
.* Init for SVC
.USER6   ANOP  ,                       *
&BXA_SVCMODE SETB 1                    * Signal we're in SVC mode
         USE   &_LABEL,R6              * R6 contains entry point addr
         AGO   .USEOK
.* Init for SPCR
.USESPCR ANOP  ,                       *
&BXA_SVCMODE SETB 1                    * Signal we're in SVC mode
         BASR  R12,R0                  * Retrieve current address
         USE   &_LABEL+2,R12           * R12 now contains EP address
.USEOK   ANOP  ,                       *
.* Init code common to all ENTRY types
         B     _&_LABEL._START         * Skip CSECT identification
*
         DC    C'&_LABEL',C','         * CSECT name
         DC    C'&CC.&YY',C'-'         * Compile year
         DC    C'&MM',C'-'             * Compile month
         DC    C'&DD',C','             * Compile day
         DC    C'&HR',C':'             * Compile hour
         DC    C'&MIN',C','            * Compile minute
         DC    C'&VERSION',C'. '       * Version id
         DC    C'(C) Copyright B.V. Bixoft, '
         DC    C'The Netherlands, 1999-2000. '
         DC    C'All rights reserved. '
         DS    0F                      * Re-align on fullword boundary
*
* Constants used in PGM-generated code
_&_LABEL._ID LABEL ,                   *
         DC    CL8'&_WORKA3'           * Id-literal for dyn. workarea
         AIF   ('&_ENTRY1' EQ 'FRR').NOABND
         AIF   ('&_ENTRY1' EQ 'RMTR').NOABND
*
* Abend service routine
&_ABND2  ABNDPGM CODE=&_ABND1          * Insert abend service routine
         ABND  SETDFT,&_ABND2          * And set default abend label
.*
.* Add &_ABND2 to BXA_ABND table
&BXA_ABND(1) SETC '&_ABND2'            * Put label into first element
.NOABND  ANOP  ,                       *
.*
_&_LABEL._START LABEL ,                * Start of program code
         AIF   ('&_ENTRY1' EQ 'FRR').INITSPGM
         AIF   ('&_ENTRY1' EQ 'MAIN').INITMAIN
         AIF   ('&_ENTRY1' EQ 'RESMGR').INITRESM
         AIF   ('&_ENTRY1' EQ 'RMTR').INITRMTR
         AIF   ('&_ENTRY1' EQ 'SPCR').INITSPCR
         AIF   ('&_ENTRY1' EQ 'SRB').INITSRB
         AIF   ('&_ENTRY1' EQ 'SUBPGM').INITSPGM
         AIF   ('&_ENTRY1' EQ 'SUBR').INITSUBR
         AIF   ('&_ENTRY1' EQ 'SVC').INITSVC
         MNOTE 12,'Internal error'
         MEXIT
.*
.* Init for SUBR
.INITSUBR ANOP
OUR      USE   SAVEAREA,R13            * Set external SA addressable
         ST    R14,OUR.SAVEDR14        * Save return address
         LAE   R14,0(,R13)             * Copy workarea pointer
         SH    R14,=AL2(SAVEPRFX_LEN)  * Point to start of BXASAVE
WORK     USE   BXASAVE,R14             * And set addressable as such
         CLC   WORK.SAVEID,_&_LABEL._ID * Identifier correct?
         ABND  NE                      * If not: big trouble
         DROP  WORK                    * BXASAVE,R14
         LT    R14,OUR.SAVEINTU        * Point to last-used SA
         BZ    _SUBR1ST_&SYSNDX        * Zero-ptr: use 1st SA
INT      USE   SAVEAREA,R14            * Set internal SA addressable
         LT    R14,INT.SAVENEXT        * Point to available SA
         ABND  Z                       * If it's not there: error!
         B     _SUBR_OK_&SYSNDX        * Go use this SA
_SUBR1ST_&SYSNDX LABEL
         L     R14,OUR.SAVEINTF        * Set 1st internal SA usable
_SUBR_OK_&SYSNDX LABEL
         STM   R15,R12,INT.SAVEDR15    * Save registers 15, 0-12
*                                      * R13 need not be saved
         MVC   INT.SAVEDR14,OUR.SAVEDR14 * Copy saved R14 (ret-addr)
         ST    R14,OUR.SAVEINTU        * Update ptr to last used SA
         DROP  OUR                     * SAVEAREA,R13 external SA
         DROP  INT                     * SAVEAREA,R14
         LAE   R12,0(,R15)             * Copy entry point address
         DROP  R15                     * Temp. base
         USE   &_WORKA1,R13,           * Make acquired area addressable*
               START=&_WORKA1+SAVEPRFX_LEN * upward from savearea
         AGO   .INITOK
.*
.* Init for SUBPGM
.INITSPGM ANOP
         USE   SAVEAREA,R13            * R13 assumed valid SA-pointer
         STM   R14,R12,SAVEDR14        * Save registers
         DROP  R13                     * SAVEAREA not needed anymore
         LAE   R12,0(,R15)             * Copy entry point address
         DROP  R15                     * Drop temporary base
         AGO   .INITOK                 *
.*
.* Init for RESMGR
.INITRESM ANOP ,                       *
&BXA_SVCMODE SETB 1                    * Signal we're in SVC mode
         GENMAPS (RMPL)                * Make sure mappings are active
         USE   SAVEAREA,R13            * R13 assumed valid SA-pointer
         STM   R14,R12,SAVEDR14        * Save registers
         DROP  R13                     * SAVEAREA not needed anymore
         LAE   R12,0(,R15)             * Copy entry point address
         DROP  R15                     * Drop temporary base
         AGO   .INITOK
.*
.* Init for MAIN
.INITMAIN ANOP
         BAKR  R14,R0                  * Save all registers
         LAE   R12,0(,R15)             * Copy entry point address
         DROP  R15                     * Drop temporary base
         AGO   .INITOK
.*
.* Init for SPCR
.INITSPCR ANOP
         LAE   R12,0(R12,R0)           * Wipe high-order bits and ALET
         AGO   .INITOK2
.*
.* Init for SRB
.INITSRB ANOP  ,                       *
         GENMAPS (FRRPL,SRB)           * Make sure mappings are active
         CPY   R12,R15                 * Copy entry point address
         DROP  R15                     * Temp base no longer needed
         USE   &_LABEL,R12             * Start using real base
         CPY   R11,R0                  * Get SRB pointer
         USE   SRB,R11                 * And set SRB addressable
         GOTO  (R14),SRBFRRCL          * Quit if caller not waiting
         CPY   R8,R14                  * Save return address
         CPY   R1,SRBPARM              * Retrieve ptr to parmlist
         USE   FRRPL,R2                * R2 contains FRR parmarea ptr
         ST    R1,FRRPLPRM             * Set up FRR parmlist (SRBPARM)
         ST    R11,FRRPLSRB            * Set up FRR parmlist (SRB)
         DROP  R11                     * SRB no longer needed
         AGO   .INITOK2                *
.*
.* Init for RMTR
.INITRMTR ANOP ,                       *
         CPY   R12,R15                 * Copy entry point address
         DROP  R15                     * Temp base no longer needed
         USE   &_LABEL,R12             * Start using real base
         CPY   R8,R14                  * Save return address
         AGO   .INITOK2                *
.*
.* Init for SVC
.INITSVC ANOP  ,                       *
         USE   SVRB,R5                 * Set SVRB addressable
         STM   R0,R2,RBEXSAVE          * Save R0-R2
*                                      * R3-R5 need not be saved
         ST    R6,RBEXSAVE+12          * Save R6
*                                      * R7 need not be saved
         STM   R8,R15,RBEXSAVE+16      * Save R8-R15
         DROP  R5                      * SVRB not needed anymore
*
         LAE   R12,0(,R6)              * Copy entry point address
         DROP  R6                      * Drop temporary base
.*
.* Init code common to all ENTRY types
.INITOK  ANOP
         USE   &_LABEL,R12             * And use it
.INITOK2 ANOP
         CPY   (R11,AR11),(R1,AR1)     * Save parm pointer
         CPY   R9,R0                   * Copy second input register
         CPY   AR9,AR0                 * and its ALET
.*
.* Assign ID for dynamic workarea and register for initializing
.* workarea
&_ID     SETC  '_&_LABEL._ID'          * Address of identifier
&_REG    SETC  'R10'                   * Normally use R10 as ptr
&_CLRSZ  SETC  'SAVEPRFX_LEN-L''SAVEID' * Area to clear after obtain
         AIF   ('&_ENTRY1' NE 'SUBR').IDOK * For SUBR's:
&_ID     SETC  '=CL8''&_LABEL'''       * Use literal program name
&_REG    SETC  'R1'                    *  and keep ptr in R1
&_CLRSZ  SETC  'SAVEPRFX_LEN-L''SAVEID+L''SAVEPTRS'
.IDOK    ANOP
.*
.* If &workptr specified, include logic to test the pointer
         AIF   (K'&WORKPTR EQ 0).NOWRKPT
*
* Check if dynamic work area has been allocated
         AIF   (K'&WORKPTR(3) EQ 0).WORKPT1
.* If &WORKPTR(3) specifies R1, replace it by R11, which currently
.* holds that register's entry value.
&_WORKP3 SETC  '&WORKPTR(3)'
         CHKREG &_WORKP3,g
         AIF   (&BXA_RC NE 0).NOTR11
         AIF   (&BXA_NUMVAL NE 1).NOTR11
&_WORKP3 SETC  'R11'                   * Replace value for ptr reg R1
.NOTR11  ANOP
.*
         ABND  Z,TSTREG=&_WORKP3       * Pointer register zero?
         USE   &WORKPTR(2),&_WORKP3    * Address area with pointer
         LT    R1,&WORKPTR(1)          * Load pointer to work-area
         BZ    _&_LABEL._OBTAIN        * Not valid: go allocate
         AGO   .WORKPTOK
.WORKPT1 ANOP  ,
         AIF   (&_WORKP1REG).WORKPTR   * Pointer is a register?
         LT    R1,&_WORKP1             * Pointer is valid?
         BZ    _&_LABEL._OBTAIN        * No: go allocate workarea
         AGO   .WORKPTOK
.WORKPTR ANOP  ,                       * Check pointer register
         ABND  Z,TSTREG=(R1,&_WORKP1)  * Load pointer to work-area
.WORKPTOK ANOP  ,                      * Pointer in R1. Valid?
         CLEAR AR1                     * Reset AR1 to primary space
TMP      USE   BXASAVE,R1              * Set area addressable
         CLC   TMP.SAVEID,&_ID         * Correct work-area?
         BE    _&_LABEL._OBTAINED      * Yes: go use it
         ABND
         DROP  TMP                     * BXASAVE,R1 no longer needed
.*
.* If WORKPTR specifies no third arg. then _WORKP3 has not been set in
.* USE and should not be DROPped. If the first and only sub-argument is
.* a register, we need no _OBTAIN label. If the first sub-argument
.* (either the only or the first of three) is a field, we do need the
.* _OBTAIN label.
.*
         AIF   (K'&WORKPTR(3) EQ 0 AND NOT &_WORKP1REG).OBTAIN
         AIF   (K'&WORKPTR(3) EQ 0).NOWRKPT
         DROP  &_WORKP3                * Area with pointer
*
.OBTAIN  ANOP
_&_LABEL._OBTAIN LABEL ,               * Do allocate a work area
.NOWRKPT ANOP
*
* Allocate dynamic work area (WA) and set up save-area (SA) chaining
&_STOR_LEN SETC ''
&_STOR_LOC SETC 'BELOW'
         AIF   ('&_ENTRY1' EQ 'SUBR' AND &BXA_SAVES EQ 0).USER13
         AIF   ('&_ENTRY1' EQ 'SUBR').ALCSUBR
.* Not SUBR linkage
&_STOR_LEN SETC '&_WORKA2'             * Size of dynamic workarea
         AIF   (&BXA_SAVES EQ 0).STOROBT
&_STOR_LEN SETC '&_WORKA2'.'+SAVEAREA_LEN*&BXA_SAVES' * +internal SA's
         AGO   .STOROBT                *
.ALCSUBR ANOP  ,                       *
&_STOR_LEN SETC 'SAVEPRFX_LEN+SAVEAREA_LEN*&BXA_SAVES' * prefix+int.SAs
&_STOR_LOC SETC 'ANY'
*
.STOROBT ANOP  ,                       *
&BXA_WALEN SETC '&_STOR_LEN'           * Total allocation
         STORAGE OBTAIN,               * Allocate SA, Abend on error   *
               LOC=&_STOR_LOC,         *                               *
               LENGTH=&_STOR_LEN       *
.*
.* For SRB's: save ptr and length of area in FRR parmlist
         AIF   ('&_ENTRY1' NE 'SRB').SKIPFRRP
         CPY   FRRPLWRK,R1             * Insert ptr to wrkarea in FRRPL
         LA    R0,&BXA_WALEN           * Retrieve length of allocation
         CPY   FRRPLWSZ,R0             * Save size of allocated area
         DROP  R2                      * FRR parameter area now set up
.SKIPFRRP ANOP ,                       *
*
* Wipe allocated area except id and save-area
         AIF   ('&_REG' EQ 'R1').EXTUSE * &_REG = R1 for ENTRY=SUBR
         LAE   &_REG,0(R1,R0)          * Save pointer to new area
.EXTUSE  ANOP  ,                       *
EXT      USE   BXASAVE,&_REG           * Set savearea addressable
         MVC   EXT.SAVEID,&_ID         * Identifier into workarea
         CLEAR (EXT.SAVEPRFX+L'SAVEID,&_CLRSZ),,XC * Wipe remainder of *
                                       * prefix + saveptrs (if SUBR)
         AIF   ('&_ENTRY1' EQ 'SUBR').NOWIPE
         AIF   ('&_WORKA1' EQ 'BXASAVE').NOWIPE
         LAE   R14,EXT.SAVEAREA_END    * Point beyond save-area + id.
         LA    R15,&_WORKA2-(SAVEAREA_LEN+SAVEPRFX_LEN) * unwiped size
         SR    R0,R0                   * Set source to zero
         LR    R1,R0                   * Source length + pad: zeroes
         MVCL  R14,R0                  * Set unused part to zeroes
.NOWIPE  ANOP
.*
.* If &workptr specified: store address of area in pointer field
         AIF   (K'&WORKPTR(1) EQ 0).DROPEXT
         AIF   (&_WORKP1REG).DROPEXT   * Cannot keep ptr in a reg
         AIF   ('&_ENTRY1' EQ 'SUBR').SKIPUSE * for SUBR no USE needed
         USE   &WORKPTR(2),&_WORKP3    * Re-establish addressability
.SKIPUSE ANOP
         ST    &_REG,&WORKPTR(1)       * Store address in ptr field
         LA    R0,&WORKPTR(1)          * Get address of pointer
         ST    R0,EXT.SAVEPTPT         * And save pointer to pointer
         AIF   ('&_ENTRY1' EQ 'SUBR').DROPEXT * for SUBR no DROP needed
         DROP  &_WORKP3                * End addressability
.DROPEXT ANOP
         AIF   ('&_ENTRY1' NE 'SUBR').NOPTSA * for SUBR ...
         MVC   EXT.SAVEPTSA,&SA.SAVEINTU * set ptr to SA used on entry
.NOPTSA  ANOP
         DROP  EXT                     * BXASAVE
         AIF   ('&_REG' EQ 'R1').OBTAINED
         LAE   R1,0(,&_REG)            * Restore pointer to new area
.OBTAINED ANOP ,                       *
         AIF   (K'&_WORKA4 EQ 0).NOLENFLD * Need to save length?
         USE   &_WORKA1,R1             * Set workarea addressable
         LA    R0,&_STOR_LEN           * Length allocated
         CPY   &_WORKA4,R0             * Save length in field
         DROP  R1                      * Drop to swap using status
.NOLENFLD ANOP ,                       *
         AIF   (K'&WORKPTR EQ 0).SKIPLAB
_&_LABEL._OBTAINED LABEL ,             * Use allocated work area
.SKIPLAB ANOP
         AIF   ('&_ENTRY1' EQ 'SUBR').USER13
*
* Save-area linkage (R1 points to work-area)
         USE   BXASAVE,R1              * Make new storage addressable
         LAE   R1,SAVEAREA             * Point to new save-area
         DROP  R1                      * BXASAVE no longer pointed to
.* Address old & new saveareas, store pointer old SA --> new SA
NEW      USE   SAVEAREA,R1             * R1 addresses our new SA
         AIF   ('&_ENTRY1' NE 'SRB' AND '&_ENTRY1' NE 'RMTR').NOR8SAV
         ST    R8,NEW.SAVEHDR          * Save return address from SRB
.NOR8SAV ANOP  ,                       *
         AIF   ('&_ENTRY1' EQ 'SVC').NOPREV
         AIF   ('&_ENTRY1' EQ 'SRB').NOPREV
         AIF   ('&_ENTRY1' EQ 'RMTR').NOPREV
         AIF   ('&_ENTRY1' EQ 'SPCR').PUTF1SA
PREV     USE   SAVEAREA,R13            * R13 addresses previous SA
         ST    R1,PREV.SAVENEXT        * Store forward pointer
.* Store pointer new savearea --> old savearea
         AIF   ('&_ENTRY1' NE 'SUBPGM' AND                             *
               '&_ENTRY1' NE 'RESMGR' AND                              *
               '&_ENTRY1' NE 'FRR').PUTF1SA
         ST    R13,NEW.SAVEPREV        * Store backward pointer
         AGO   .PUTOK
.PUTF1SA ANOP
         MVC   NEW.SAVEPREV,=CL4'F1SA' * Identify as 1st in chain
         AIF   ('&_ENTRY1' EQ 'SPCR').NOPREV
.PUTOK   ANOP
         DROP  PREV                    * R13 (SAVEAREA)
.NOPREV  ANOP
         LAE   R13,NEW.SAVEAREA        * Address new SA
         DROP  NEW                     * R1 (SAVEAREA)
.USER13  ANOP
*
* Set up USING for dynamic area
         AIF   (K'&_WORKA1 EQ 0).NODSECT
         AIF   ('&_ENTRY1' EQ 'SUBR').NODSECT * SUBR has USE R13
         USE   &_WORKA1,R13,           * Make acquired area addressable*
               START=&_WORKA1+SAVEPRFX_LEN * upward from savearea
.NODSECT ANOP  ,
.*
.* If saves-parameter was specified, include logic to allocate
.* and initialize internal save-areas. If workptr was specified,
.* allocation and initialization are to be performed only when
.* the the internal SAs have not yet been allocated and initialized.
         AIF   (&BXA_SAVES EQ 0).NOSAVES
         AIF   ('&_ENTRY1' NE 'SUBR').NONEWID
NEW      USE   BXASAVE,R1              * R1 points to allocated area
         LA    R1,NEW.SAVEAREA         * Point beyond prefix area
         DROP  NEW                     * BXASAVE,R1 - prefix complete
NEW      USE   SAVEAREA,R1             * R1 now points to 1st new SA
         L     R14,&SA.SAVEINTU        * Point to SA used for saving
_LOOP_&SYSNDX LABEL
         LAE   R15,0(,R14)             * Next on chain in R14
OLD      USE   SAVEAREA,R15            * Set last-used SA addressable
         LT    R14,OLD.SAVENEXT        * Is there another SA on chain?
         BNZ   _LOOP_&SYSNDX           * Yes: runchain
         ST    R15,NEW.SAVEPREV        * Append new chain to last entry
         ST    R1,OLD.SAVENEXT         *  of existing chain
         DROP  OLD                     * SAVEAREA,R15
         DROP  NEW                     * SAVEAREA,R1
.*
         AIF   (&BXA_SAVES EQ 1).JUST1SA
NEW      USE   SAVEAREA,R1             * R1 now points to 1st new SA
         LT    R0,NEW.SAVENEXT         * Retrieve ptr to next SA
         BNZ   _RESETR1                * Valid: skip SA allocation
         DROP  NEW                     * SAVEAREA,R1
.NONEWID ANOP
*
* Set up a chain of save-areas for internal use
         AIF   (K'&WORKPTR EQ 0).INITSA
         AIF   ('&_ENTRY1' EQ 'SUBR').INITSA
         LT    R0,&SA.SAVEINTF         * Retrieve ptr to first SA
         BNZ   _RESETR1                * Valid: skip SA allocation
.INITSA  ANOP
.*
         AIF   ('&_ENTRY1' EQ 'SUBR').INILOOP
         LAE   R1,&SA.SAVEAREA+&_WORKA2-SAVEPRFX_LEN * Pt to 1st int SA
         ST    R1,&SA.SAVEINTF         * Store address in ptr field
         CLEAR &SA.SAVEINTU,,XC        * Set last used to zero
         AIF   (&BXA_SAVES EQ 1).JUST1SA
.INILOOP ANOP
THIS     USE   SAVEAREA,R1             * Set current SA adressable
         AIF   ('&_ENTRY1' EQ 'SUBR').NOCLEAR * Not for SUBR-logic:
         CLEAR THIS.SAVEPREV,,XC       * Set prv.ptr in 1st int.SA to 0
.NOCLEAR ANOP
         LAE   R2,0(,R1)               * Init next-ptr to current
         LA    R3,&SAVES-1             * Nr of SA's to initialize
_LOOP&SYSNDX LABEL
         INC   R2,SAVEAREA_LEN         * Point to next save-area
NEXT     USE   SAVEAREA,R2             * Set next SA adressable
         CLEAR THIS.SAVEHDR,,XC        * Reset 1stword
         ST    R2,THIS.SAVENEXT        * Save as forward pointer
         ST    R1,NEXT.SAVEPREV        * Save as backward pointer
*
         DROP  NEXT                    * R2 (SAVEAREA)
         DROP  THIS                    * R1 (SAVEAREA)
         LAE   R1,0(,R2)               * Copy next ptr to current
         BCT   R3,_LOOP&SYSNDX         * Repeat
*
INT      USE   SAVEAREA,R2             * Last SA in chain
         CLEAR INT.SAVEHDR,,XC         * set 1stword to zeros
         CLEAR INT.SAVENEXT,,XC        * set nextpointer to 0
         DROP  INT                     * R2 (SAVEAREA)
         AGO   .RESETR1
.*
.* If there's only 1 save-area we don't have any pointers
.JUST1SA ANOP
TMP      USE   SAVEAREA,R1             * Only SA in chain
         AIF   ('&_ENTRY1' EQ 'SUBR').SA1SUBR
         CLEAR TMP.SAVEPTRS,,XC        * Set 3 pointers to zero
         AGO   .SA1DONE
.SA1SUBR ANOP
         CLEAR TMP.SAVEHDR,,XC         * Set header field to zero
         CLEAR TMP.SAVENEXT,,XC        * and set next pointer to zero
.SA1DONE ANOP
         DROP  TMP                     * SAVEAREA,R1
.*
.RESETR1 ANOP
         AIF   (K'&WORKPTR NE 0)._RESETR1 * If workptr spec'd: do label
         AIF   ('&_ENTRY1' NE 'SUBR').NOSAVES * Label needed for SUBR..
         AIF   (&BXA_SAVES LE 1)._RESETR1 * when there's more than 1 SA
._RESETR1 ANOP
_RESETR1 EQU   *                       * Target if intSAs pre-allocated
.NOSAVES ANOP
*
* Restore original contents of register 1
         CPY   (R1,AR1),(R11,AR11)     * Restore parm pointer
         CPY   (R0,AR0),(R9,AR9)       * Restore parameter
*
* Set up literal pool and USING for CSECT
&BXA_USE_R12 SETC '_&_LABEL._USE_R12'  *
         B     &BXA_USE_R12            * branch over literals
         LTORG ,                       *
&BXA_USE_R12 LABEL ,                   *
         LAE   R12,&BXA_USE_R12        * Load new base address
         DROP  R12                     * End addressablity
         USE   &BXA_USE_R12,R12        * And restart addressability
         EJECT ,                       * Force heading with USINGs
.*
.* If PSA was mapped, include USE for PSA
         AIF   (NOT &BXA_MAC_MAPPSA).NOPSA
         USE   PSA,R0                  * PSA always valid at 0
.NOPSA   ANOP  ,
.*
.MEND    MEND
./ ADD NAME=PGM0     0100-20096-20096-0111-00079-00079-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Define internal subroutine for structured programming macro's
.*
         PGM0  ,                       *
.*
.* Include sub-macro
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
.*
         MACRO
         CHK_STACK &RESET=NO           * NO or YES
.*
.* Declare variables
         GBLA  &BXA_STK                * Stack ptr for if-then-else
         GBLC  &BXA_STK_OP(5)          * Stack of open opcodes
         GBLC  &BXA_STK_LBL(5)         * Stack of labels
         GBLA  &BXA_STK_LVL(5)         * Stack of levels
         LCLA  &I                      * Stack pointer
.*
.* Check that the structured programming stack is empty
         AIF   (&BXA_STK EQ 0).NOERR1  * Ok: stack empty
&I       SETA  &BXA_STK+1              * I is index in stack
.LOOP1   ANOP  ,                       * Loop backward thru stack
&I       SETA  &I-1                    * Point previous entry
         AIF   (&I LT 1).NOERR1        * At end: no more error messages
         MNOTE 8,'Preceding &BXA_STK_OP(&I).-statement with label &BXA_*
               STK_LBL(&I) at level &BXA_STK_LVL(&I) not terminated'
         AGO   .LOOP1
.NOERR1  ANOP
.*
         AIF   ('&RESET' NE 'YES').NORESET * If RESET=YES was specified
&BXA_STK SETA  0                       * Reset stack to empty status
.NORESET ANOP  ,
.*
.MEND    MEND  ,                       * End of internal macro
         POP   PRINT,NOPRINT
.*
.MEND    MEND
./ ADD NAME=POP      0100-20096-20096-0111-00128-00128-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's POP statement
.*
&LABEL   POP   ,                       * Arguments in SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC POP                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15
         GBLB  &SP_SHOWALL             * SHOWALL option
         GBLC  &BXA_USELBL(50)         * Using labels ...
         GBLA  &BXA_USEREG(50)         *   and their register indexes
         GBLC  &BXA_USEFLD(50)         *   and associated base fields
         GBLA  &BXA_USENDX0(5)         * Low valid pointers BXA_USE...
         GBLA  &BXA_USENDX1(5)         * High valid pointers BXA_USE...
         GBLA  &BXA_USENDX             * Index into &BXA_USENDX0/1
         LCLA  &N                      * Index for BXA_USE...
         LCLA  &I                      * Index into &SYSLIST
         LCLA  &R                      * Index into &BXA_USED_REGS
         LCLC  &ARG                    * 1 argument from SYSLIST
         LCLC  &ARGS                   * Arguments from SYSLIST
         LCLB  &POPUSE                 * USING status is to be popped
.*
.* Build ARGS from &SYSLIST
&I       SETA  0                       * I indexes &SYSLIST
.LOOP1   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
&ARG     SETC  '&SYSLIST(&I)'          * Extract 1 argument
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AIF   ('&ARG' NE 'USING').LOOP1 * Not USING: get next arguemnt
&POPUSE  SETB  1                       * Indicate USING is popped
         AGO   .LOOP1                  * And go process next entry
.LOOP1OK ANOP
         AIF   (K'&ARGS LT 2).ARGSOK
&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma
.ARGSOK  ANOP
.*
.* If Using status is being popped:
.* pop the table of active usings and rebuild &BXA_USED_REGS
         AIF   (NOT &POPUSE).NOTUSE
         AIF   (&BXA_USENDX LE 0).ERR2A
&BXA_USENDX SETA &BXA_USENDX-1         * Pop table of active usings
.*
.* Rebuild BXA_USED_REGS from BXA_USEREG table
.* Skip any USINGs for PSA,R0
&BXA_USED_REGS(1) SETB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Search tables to mark
.LOOP4   ANOP  ,                       *    all used registers
&N       SETA  &N+1                    *    unavailable.
         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP4OK * At end: done
&R       SETA  &BXA_USEREG(&N)         * Obtain index
         AIF   (&R EQ 1 AND '&BXA_USEFLD(&N)' EQ 'PSA').LOOP4
&BXA_USED_REGS(&R) SETB 1              * Set designated register in use
         AGO   .LOOP4
.LOOP4OK ANOP
         AGO   .NOTUSE                 * Skip error messages
.*
.ERR2A   MNOTE 8,'You''re POPping an unPUSHed USING status'
.NOTUSE  ANOP
.*
.* Generate _POP statement
&LABEL   _POP  &ARGS
.*
.* Report current USING status
         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested
         AIF   (NOT &POPUSE).MEND      * And only if USING was popped
         USEDREGS
.*
.MEND    MEND
./ ADD NAME=PUSH     0100-20096-20096-0111-00125-00125-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's PUSH statement
.*
&LABEL   PUSH  ,                       * Arguments in SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC PUSH                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15
         GBLB  &SP_SHOWALL             * SHOWALL option
         GBLC  &BXA_USELBL(50)         * Using labels ...
         GBLA  &BXA_USEREG(50)         *   and their register indexes
         GBLC  &BXA_USEFLD(50)         *   and associated base fields
         GBLA  &BXA_USENDX0(5)         * Low valid pointers BXA_USE...
         GBLA  &BXA_USENDX1(5)         * High valid pointers BXA_USE...
         GBLA  &BXA_USENDX             * Index into &BXA_USENDX0/1
         LCLA  &N                      * Index for BXA_USE...
         LCLA  &I                      * Index into &SYSLIST
         LCLA  &R                      * Index into &BXA_USED_REGS
         LCLC  &ARG                    * 1 argument from SYSLIST
         LCLC  &ARGS                   * Arguments from SYSLIST
         LCLB  &PUSHUSE                * USING status is to be pushed
.*
.* Build ARGS from &SYSLIST
&I       SETA  0                       * I indexes &SYSLIST
.LOOP1   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
&ARG     SETC  '&SYSLIST(&I)'          * Extract 1 argument
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AIF   ('&ARG' NE 'USING').LOOP1 * Not USING: get next arguemnt
&PUSHUSE SETB  1                       * Indicate USING is pushed
         AGO   .LOOP1                  * And go process next entry
.LOOP1OK ANOP
         AIF   (K'&ARGS LT 2).ARGSOK
&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma
.ARGSOK  ANOP
.*
.* If Using status is being pushed: copy BXA_USED_REGS
         AIF   (NOT &PUSHUSE).NOTUSE
&R       SETA  &BXA_USENDX             * R indexes BXA_USELBL/USEREG
&N       SETA  &BXA_USENDX0(&R)        * N indexes existing tables
&I       SETA  &BXA_USENDX1(&R)        * I indexes new part of tables
.LOOP3   ANOP
&N       SETA  &N+1
&I       SETA  &I+1
         AIF   (&N GT &BXA_USENDX1(&R)).LOOP3OK
&BXA_USELBL(&I) SETC '&BXA_USELBL(&N)' * Copy label
&BXA_USEREG(&I) SETA &BXA_USEREG(&N)   * Copy register index
&BXA_USEFLD(&I) SETC '&BXA_USEFLD(&N)' * Copy base field/location
         AGO   .LOOP3
.LOOP3OK ANOP  ,                       * Add entry to BXA_USENDX0/1
&R       SETA  &R+1                    * Point next index entry
&BXA_USENDX0(&R) SETA &N-1             * Point before 1st valid entry
&BXA_USENDX1(&R) SETA &I-1             * Point last valid entry
&BXA_USENDX SETA &R                    * And update index pointer
.NOTUSE  ANOP
.*
.* Generate _PUSH statement
&LABEL   _PUSH  &ARGS
.*
.* Report current USING status
         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested
         AIF   (NOT &PUSHUSE).MEND     * And only if USING was pushed
         USEDREGS
.*
.MEND    MEND
./ ADD NAME=RDATA    0100-20096-20096-0111-00261-00261-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Define Remote DATA
.*
.* All data defined thru the RDATA macro will be put into a remote
.* literal pool, which is created by the END-macro, using the RLTORG
.* macro.
.*
&LABEL   RDATA &OPCD,                  * Defining opcode               *
               &RD_MODE=ADD,           * COND for conditional entries  *
               &ALIGN=,                * Alignment                     *
               &MF=X                   * MF should not be specified
.*
.* &LABEL specifies the label of the data
.*        if specified as two dashes (--) no label will be generated
.* &OPCD  specifies the defining opcode. The following opcodes are
.*        currently supported:
.*        - CNOP,DC,DS,EQU
.*        - SNAPHDR
.*        - Any other opcode that requires no keyword parmaters
.**!!     - DCB
.**!!     For keyword parameters the following applies:
.**!!     In stead of separating the keyword parameter name and its
.**!!     value with an equal sign(=), separate them with a slash(/).
.**!!     E.g.: RDATA DCB,DSORG/PS,RECFM/VBA,.....   etc.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC RDATA                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Define variables
         GBLC  &BXA_RD_RETVAL          * RD_MODE=COND: orig. data label
         GBLC  &BXA_RD_LAB(50)         * table of defined remote labels
         GBLC  &BXA_RD_OPC(50)         * table of defined remote opcd's
         GBLC  &BXA_RD_ALG(50)         * table of defined remote align
         GBLC  &BXA_RD_ARG(50)         * table of defined remote data  *
               *                       *        positional parameters
.**!!    GBLA  &BXA_RD_NDX(50)         * table of remote indexes
.**!!    GBLC  &BXA_RD_KEY(50)         * table of remote keywords
.**!!    GBLC  &BXA_RD_VAL(50)         * table of remote keyword values
         LCLA  &I,&I1                  * Index into BXA_RD_LAB/OPC/ARG
.**!!    LCLA  &J                      * Index into BXA_RD_NDX/KEY/VAL
         LCLA  &S                      * Index into SYSLIST
         LCLC  &PRM                    * Parameter (1 SYSLIST-entry)
         LCLC  &ARG                    * Used to build BXA_RD_ARG entry
.**!!    LCLA  &P                      * Character index into PRM
.**!!    LCLA  &P1,&P2,&P3             * Character indices into PRM
.*
.* Check LABEL parameter
         AIF   (K'&LABEL NE 0).NOERR1
.ERR1    MNOTE 8,'Label for remote data not specified'
         MEXIT
.NOERR1  ANOP
.*
.* Check OPCD parameter
         AIF   (K'&OPCD EQ 0).ERR2A
         AIF   ('&OPCD' EQ 'CLOSE').NOERR2
         AIF   ('&OPCD' EQ 'CMDTXT').NOERR2
         AIF   ('&OPCD' EQ 'CNOP').NOERR2
         AIF   ('&OPCD' EQ 'DC').NOERR2
.**!!    AIF   ('&OPCD' EQ 'DCB').NOERR2
         AIF   ('&OPCD' EQ 'DS').NOERR2
         AIF   ('&OPCD' EQ 'EQU').NOERR2
         AIF   ('&OPCD' EQ 'MGCRE').NOERR2
         AIF   ('&OPCD' EQ 'OPEN').NOERR2
         AIF   ('&OPCD' EQ 'SNAPHDR').NOERR2
         AIF   ('&OPCD' EQ 'WTO').NOERR2
         AGO   .ERR2B
.ERR2A   MNOTE 8,'Missing opcode for remote data definition'
         MEXIT
.ERR2B   MNOTE 4,'Opcode &OPCD not supported by RDATA macro'
.NOERR2  ANOP
.*
.* Check SYSLIST contents
         AIF   ('&OPCD' EQ 'MGCRE').NOERR3
         AIF   (N'&SYSLIST LT 2).ERR3A
         AGO   .NOERR3
.ERR3A   MNOTE 8,'Missing operand(s) for remote data definition'
.NOERR3  ANOP
.*
         AIF   ('&OPCD' NE 'MGCRE').NOERR4
         AIF   (N'&SYSLIST GE 2).ERR4A
         AGO   .NOERR4
.ERR4A   MNOTE 4,'RDATA &OPC does not accept any additional parameters'
.NOERR4  ANOP
.*
.* Check the RD_MODE parameter
         AIF   ('&RD_MODE' EQ 'ADD').NOERR5
         AIF   ('&RD_MODE' EQ 'COND').NOERR5
.ERR5A   MNOTE 8,'RD_MODE must be COND or default to ADD'
.NOERR5  ANOP
.*
.* Check the MF parameter
         AIF   ('&MF' EQ 'X').NOERR6
.ERR6A   MNOTE 4,'MF-parameter not needed with RDATA &OPC'
.NOERR6  ANOP
.*
.* Check the ALIGN parameter
         AIF   (K'&ALIGN EQ 0).NOERR7
         AIF   ('&ALIGN'  EQ 'D').NOERR7
         AIF   ('&ALIGN'  EQ 'F').NOERR7
         AIF   ('&ALIGN'  EQ 'H').NOERR7
         AIF   ('&ALIGN'  EQ 'X').ERR7B
         AIF   ('&ALIGN'  EQ 'C').ERR7B
         AIF   ('&ALIGN'  EQ 'B').ERR7B
.ERR7A   MNOTE 8,'ALIGN parameter specifies unknown data type'
         AGO   .NOERR7
.ERR7B   MNOTE 4,'ALIGN parameter specifies byte-aligned data type'
.NOERR7  ANOP
.*
.* Check that LABEL is not duplicate
         AIF   ('&LABEL' EQ '--').LOOP1OK
&I       SETA  1                       * I indexes defined RDATA labels
.LOOP1   ANOP
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&BXA_RD_LAB).LOOP1OK * End of loop
         AIF   ('&LABEL' EQ '&BXA_RD_LAB(&I)').LOOP1F
         AGO   .LOOP1                  * Go compare next entry
.LOOP1F  ANOP  ,                       * Label found: duplicate
         MNOTE 4,'Duplicate RDATA label: &LABEL. This occurrence ignore*
               d'
         MEXIT
.LOOP1OK ANOP
.*
.* Loop thru SYSLIST to build ARG from available arguments
&ARG     SETC  ''                      * ARG will contain new entry
&S       SETA  1                       * Index 1 --> opcode
.LOOP2   ANOP  ,                       * Loop thru remaining SYSLIST
&S       SETA  &S+1                    * Point next SYSLIST entry
         AIF   (&S GT N'&SYSLIST).LOOP2OK
&PRM     SETC  '&SYSLIST(&S)'          * Extract parameter from syslist
.* Is this a truly positional parameter, or an intended keyword?
         AGO   .LOOP3LIT              .**!!
&P       SETA  0                       * Character index into PRM
.LOOP3   ANOP
&P       SETA  &P+1                    * Point to next character
         AIF   (&P GT K'&PRM).LOOP3LIT * End of string?
&CH      SETC  '&PRM'(&P,1)            * Extract 1 character
         AIF   ('&CH' EQ '''').LOOP3LIT * Literal: positional parm
         AIF   ('&CH' EQ '(').LOOP3LIT * Sublist: positional parm
         AIF   ('&CH' EQ '/').LOOP3F   * Go process slash
         AGO   .LOOP3                  * Go process next character
.LOOP3F  ANOP
.* Extract keyword name and value from &PRM
&P1      SETA  &P-1                    * Length of keyword name
&P2      SETA  &P+1                    * Start of kwyword value
&P3      SETA  1+K'&PRM-&P2            * Length of kewyword value
         AIF   (&P1 EQ 0).LOOP3LIT     * Empty keyword name: positional
         AIF   ('&PRM'(1,&P1) EQ 'MF').LOOP3MF
&J       SETA  1+N'&BXA_RD_NDX         * Point to empty entry
&BXA_RD_NDX(&J) SETA &I                * Entry index into BXA_RD_OPC
&BXA_RD_KEY(&J) SETC '&PRM'(1,&P1)     * Extract keyword name
&BXA_RD_VAL(&J) SETC '&PRM'(&P2,&P3)   * Extract value (or null)
         AGO   .LOOP2                  * Go process next SYSLIST entry
.*
.LOOP3MF ANOP
         MNOTE 4,'MF-parameter skipped: not needed with RDATA'
         AGO   .LOOP2                  * Go process next SYSLIST entry
.*
.LOOP3LIT ANOP
.* PRM is a positional parameter: put into ARG with a comma
         AIF   (K'&ARG EQ 0).LOOP3FLIT
&ARG     SETC '&ARG'.','.'&SYSLIST(&S)'
         AGO   .LOOP2
.LOOP3FLIT ANOP
&ARG     SETC '&SYSLIST(&S)'           * First literal into ARG
         AGO   .LOOP2
.LOOP2OK ANOP
.*
.* Put remote data definition into tables for use by LTORG macro
&BXA_RD_RETVAL SETC ''                 * Set return value to nothing
&I       SETA  1+N'&BXA_RD_OPC         * First free entry in tables
.*
.* For a labeled literal, we must check that no duplicates exist
         AIF   ('&LABEL' EQ '--').LOOP4NF * Unlabeled: always ok
&I1      SETA  0                       * I1 indexes BXA_RD_OPC/ARG
.LOOP4   ANOP  ,                       * Loop thru BXA_RD_OPC/ARG
&I1      SETA  &I1+1                   * Point next entry
         AIF   (&I1 GE &I).LOOP4NF     * End of table reached: no match
         AIF   ('&BXA_RD_OPC(&I1)' NE '&OPCD').LOOP4 * NE: next entry
         AIF   ('&BXA_RD_ARG(&I1)' NE '&ARG').LOOP4 * NE: next entry
         AIF   ('&BXA_RD_ALG(&I1)' NE '&ALIGN').LOOP4 * NE: next entry
         AIF   ('&BXA_RD_LAB(&I1)' EQ '').LOOP4 * No label: next entry
.*
.LOOP4F  ANOP  ,                       * Found match: replace by EQU
         AIF   ('&RD_MODE' EQ 'ADD').LOOP4AD
&BXA_RD_RETVAL SETC '&BXA_RD_LAB(&I1)' * Return matched label
         AGO   .LOOP4OK                * No changes to RD-tables
.*
.LOOP4AD ANOP  ,                       * Found match, mode=ADD:
&BXA_RD_OPC(&I) SETC 'EQU'             * Operation changes to EQU
&BXA_RD_ARG(&I) SETC '&BXA_RD_LAB(&I1)' *  to the original label
         AGO   .LOOP4LAB
.*
.LOOP4NF ANOP  ,                       * Not found
&BXA_RD_OPC(&I) SETC '&OPCD'           * Put opcode into table
&BXA_RD_ARG(&I) SETC '&ARG'            *   and arguments
&BXA_RD_ALG(&I) SETC '&ALIGN'          *   and alignment too
.*
.LOOP4LAB ANOP ,                       * Add label
         AIF   ('&LABEL' EQ '--').LOOP4OK * Unlabeled?
&BXA_RD_LAB(&I) SETC '&LABEL'          * Put label into table
.LOOP4OK ANOP
.*
.MEND    MEND
./ ADD NAME=RETRN    0100-20096-20096-0111-00610-00610-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates code for exiting the active module
.*
&LABEL   RETRN &RC=0,                  * Returncode, (reg), or *       *
               &REASON=,               * Reasoncode, (reg), or *       *
               &RETPTR=,               * Return ptr value, (reg), or * *
               &WORKAREA=FREE,         * FREE or NOFREE                *
               &INLINE=YES             * YES or NO
.*
.* &RC   specifies the returncode. Specification of * equals to (R15)
.*       If omitted a returncode of 0 will be generated by default.
.* &REASON specifies the reasoncode. Specification of * equals to (R0)
.*         If omitted, R0 will be restored to the contents at entry.
.* &RETPTR specifies a pointer value to be returned in R1.
.*         Specification of * equals to (R1).
.*         If omitted, R1 will be restored to the contents at entry.
.* &WORKAREA specifies whether or not the area allocated by PGM
.*           is to be released.
.* &INLINE if specified as YES, a branch will be generated to an
.*         out-of-line routine which performs the requested function.
.*         if specified as NO the required out-of-line routine will
.*         be generated. INLINE=NO should be specified only by the END
.*         macro.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC RETRN                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Define variables
         GBLB  &SP_SHOWALL             * Option from PGM
         GBLC  &SYSASCE                * ASC-environment: P or AR
         GBLC  &BXA_WALEN              * Worka area length
         GBLC  &BXA_ENTRY              * Entry mode
         GBLA  &BXA_SAVES              * Nr of internal save areas
         GBLC  &BXA_WORKPTR(3)         * Pointer to work area
         GBLC  &BXA_SUBR               * Current subroutine name
         GBLC  &BXA_PGM_LABEL          * Label of CSECT from PGM macro
         GBLC  &BXA_WALAB              * Label of workarea
         LCLA  &I                      * INDEX for BXA_RETRN_...
         GBLC  &BXA_RETRN_RC(5)        * Returncodes
         GBLC  &BXA_RETRN_RP(5)        * Return pointers
         GBLC  &BXA_RETRN_RS(5)        * Reasoncodes
         GBLC  &BXA_RETRN_WA(5)        * WORKAREA parameters
         GBLC  &BXA_RETRN_LBL(5)       * Labels for out-of-line rout.
         GBLA  &BXA_NUMVAL             * Returnvalue from EQUREG
         LCLC  &ARG                    * Some argument
         LCLC  &_RC                    * Returncode register
         LCLC  &_RS                    * Reasoncode register
         LCLC  &_RP                    * Return pointer register
         LCLC  &_WR1                   * Work register 1
         LCLC  &_WR2                   * Work register 2
.*
.* Check workarea parameter
         AIF   ('&WORKAREA' EQ 'FREE').NOERR1
         AIF   ('&WORKAREA' EQ 'NOFREE').NOERR1A
.ERR1A   MNOTE 8,'Workarea parameter must specify FREE or NOFREE'
         AGO   .NOERR1
.NOERR1A ANOP
         AIF   ('&BXA_ENTRY' EQ 'FRR').ERR1B
         AIF   ('&BXA_ENTRY' EQ 'RESMGR').ERR1B
         AIF   ('&BXA_ENTRY' EQ 'RMTR').ERR1B
         AIF   ('&BXA_ENTRY' EQ 'SPCR').ERR1B
         AIF   ('&BXA_ENTRY' EQ 'SRB').ERR1B
         AIF   ('&BXA_ENTRY' EQ 'SVC').ERR1B
         AGO   .NOERR1
.ERR1B   MNOTE 8,'Workarea parameter must specify FREE for &BXA_ENTRY p*
               rograms'
.NOERR1  ANOP  ,
.*
.* Check subroutine name
         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR2
.ERR2    MNOTE 8,'RETRN must not be issued within a subroutine'
.NOERR2  ANOP
.*
.* Check nesting level
         AIF   (&SYSNEST EQ 1).NOERR3
         AIF   ('&INLINE' EQ 'NO').NOERR3
.ERR3    MNOTE 8,'RETRN must not be issued from within another macro'
.NOERR3  ANOP
.*
.* Check inline parameter
         AIF   ('&INLINE' EQ 'NO').NOERR4
         AIF   ('&INLINE' EQ 'YES').NOERR4
.ERR4    MNOTE 8,'INLINE parameter must specify either YES or NO'
         MEXIT
.NOERR4  ANOP
.*
.* Check RC parameter
         AIF   (K'&RC EQ 0).NOERR5
         AIF   ('&BXA_ENTRY' EQ 'SRB').ERR5C
         AIF   ('&BXA_ENTRY' EQ 'RMTR').ERR5C
         AIF   ('&RC'(1,1) NE '(').NOERR5
         AIF   (N'&RC NE 1).ERR5A
         CHKREG &RC(1),g
         AIF   (&BXA_RC EQ 8).ERR5B
         AGO   .NOERR5
.ERR5A   MNOTE 4,'Only 1 register can be specified on RC, remainder ign*
               ored'
         AGO   .NOERR5
.ERR5B   ANOP
&ARG     SETC  (DOUBLE '&RC(1)')
         MNOTE 8,'Register &ARG is not a valid register'
         MEXIT
.ERR5C   ANOP  ,
         AIF   ('&RC' EQ '0').NOERR5
         MNOTE 8,'RC-parameter not allowed for SRB/RMTR-type routines'
.NOERR5  ANOP
.*
.* Check REASON parameter
         AIF   (K'&REASON EQ 0).NOERR6
         AIF   ('&BXA_ENTRY' EQ 'FRR').ERR6C
         AIF   ('&BXA_ENTRY' EQ 'SRB').ERR6C
         AIF   ('&BXA_ENTRY' EQ 'RESMG').ERR6C
         AIF   ('&BXA_ENTRY' EQ 'RMTR').ERR6C
         AIF   ('&REASON'(1,1) NE '(').NOERR6
         AIF   (N'&REASON NE 1).ERR6A
         CHKREG &REASON(1),g
         AIF   (&BXA_REASON EQ 8).ERR6B
         AGO   .NOERR6
.ERR6A   MNOTE 4,'Only 1 register can be specified on REASON, remainder*
                ignored'
         AGO   .NOERR6
.ERR6B   ANOP
&ARG     SETC  (DOUBLE '&REASON(1)')
         MNOTE 8,'Register &ARG is not a valid register'
         MEXIT
.ERR6C   MNOTE 8,'REASON-parameter not allowed for &BXA_ENTRY type of r*
               outine'
.NOERR6  ANOP
.*
.* Check RETPTR parameter
         AIF   (K'&RETPTR EQ 0).NOERR7
         AIF   ('&BXA_ENTRY' EQ 'FRR').ERR7C
         AIF   ('&BXA_ENTRY' EQ 'SRB').ERR7C
         AIF   ('&BXA_ENTRY' EQ 'RMTR').ERR7C
         AIF   ('&BXA_ENTRY' EQ 'RESMGR').ERR7C
         AIF   ('&RETPTR'(1,1) NE '(').NOERR7
         AIF   (N'&RETPTR NE 1).ERR7A
         CHKREG &RETPTR(1),g
         AIF   (&BXA_RC EQ 8).ERR7B
         AGO   .NOERR7
.ERR7A   MNOTE 4,'Only 1 register can be specified on RETPTR, remainder*
                ignored'
         AGO   .NOERR7
.ERR7B   ANOP
&ARG     SETC  (DOUBLE '&RETPTR(1)')
         MNOTE 8,'Register &ARG is not a valid register'
         MEXIT
.ERR7C   MNOTE 8,'RETPTR-parameter not allowed for &BXA_ENTRY type of r*
               outine'
.NOERR7  ANOP
.*
.* INLINE-parameter determines further expansion of this macro
         AIF   ('&INLINE' EQ 'YES').INLINE
         AIF   ('&INLINE' EQ 'NO').OUTLINE
         MNOTE 12,'Internal error'
         MEXIT
.*
.INLINE  ANOP
&I       SETA  N'&BXA_RETRN_LBL+1      * Point firrst free element
&BXA_RETRN_LBL(&I) SETC '_RETRN&SYSNDX' * Generate label for routine
&BXA_RETRN_RC(&I)  SETC '&RC'          * Copy returncode parameter
&BXA_RETRN_RS(&I)  SETC '&REASON'      * Copy reasoncode parameter
&BXA_RETRN_RP(&I)  SETC '&RETPTR'      * Copy returnpointer parameter
&BXA_RETRN_WA(&I)  SETC '&WORKAREA'    * Copy workarea parameter
.*
.* Now replace R12 with the intended target address and branch to it
         L     R12,=AL4(_RETRN&SYSNDX) * Load out-of-line routine addr
         BR    R12                     * And execute it
         MEXIT
.*
.* Generate label if one is specified
.OUTLINE ANOP
&LABEL   LABEL H                       * Re-align on halfword boundary
         DROP  ,                       * Drop all USINGs
         USE   &LABEL,R12              * Set code addressable
         USE   &BXA_WALAB,R13,         * Set workarea addressable      *
               START=&BXA_WALAB+SAVEPRFX_LEN * upward from savearea
.*
.* We must assign 5 registers:
.* 1 for the returncode to be returned in R15    - &_RC
.* 1 for the reasoncode to be returned in R0     - &_RS
.* 1 for the return pointer to be returned in R1 - &_RP
.* 2 work registers                              - &_WR1, &_WR2
.* Defaults are as follows:
.* &_RC: register specified, otherwise lowest available in range R1-R11
.* &_RS: register specified, otherwise lowest available in range R1-R11
.* &_RP: register specified, otherwise lowest available in range R1-R11
.* &_WR1,&_WR2: lowest available in range R1-R11 after assigning
.*              &_RC, &_RS, and &_RP
.*
.* Check which register has been assigned to the return code
         AIF   ('&RC' EQ '*').TSTRC_R15 * R15
         AIF   ('&RC'(1,1) EQ '(').TSTRC_REG * Register
         AGO   .TSTRC_OK               * No register to USE
.TSTRC_R15 ANOP ,                      *
&_RC     SETC  'R15'                   * Assign R15 for returncode
         USE   R15                     * R15 contains return code
         AGO   .TSTRC_OK               *
.TSTRC_REG ANOP ,                      *
&_RC     SETC  '&RC(1)'                * Assign reg for returncode
         USE   &RC(1)                  * Some register contains retcd
.TSTRC_OK ANOP ,                       *
.*
.* Check which register has been assigned to the reason code
         AIF   (K'&REASON EQ 0).TSTRS_OK * No reason code?
         AIF   ('&REASON' EQ '*').TSTRS_R0 * R0
         AIF   ('&REASON'(1,1) EQ '(').TSTRS_REG * Register
         AGO   .TSTRS_OK               * No register to USE
.TSTRS_R0 ANOP ,                       *
&_RS     SETC  'R0'                    * Assign R0 for reasoncode
         USE   R0                      * R0 contains reason code
         AGO   .TSTRS_OK               *
.TSTRS_REG ANOP ,                      *
&_RS     SETC  '&REASON(1)'            * Assign reg for reasoncode
         USE   &REASON(1)              * Some register contains reason
.TSTRS_OK ANOP ,                       *
.*
.* Check which register has been assigned to the return pointer value
         AIF   (K'&RETPTR EQ 0).TSTRP_OK * Return pointer specified?
         AIF   ('&RETPTR' EQ '*').TSTRP_R1 * R1
         AIF   ('&RETPTR'(1,1) EQ '(').TSTRP_REG * Register
         AGO   .TSTRP_OK               * No register to USE
.TSTRP_R1 ANOP ,                       *
&_RP     SETC  'R1'                    * Assign R1 for returnpointer
         USE   R1                      * R1 contains return pointer
         AGO   .TSTRP_OK               *
.TSTRP_REG ANOP ,                      *
&_RP     SETC  '&RETPTR(1)'            * Assign reg for return pointer
         USE   &RETPTR(1)              * Some register contains retptr
.TSTRP_OK ANOP ,                       *
.*
.* Assign two work registers (used for addressing)
         EQUREG R0=NO                  * Find a work register
&_WR1    SETC  'R&BXA_NUMVAL'          *  create register name
         USE   &_WR1                   * and set it in use
         EQUREG R0=NO                  * And another one
&_WR2    SETC  'R&BXA_NUMVAL'          *  create register name
         USE   &_WR2                   * and set it in use
.*
.* When in access register mode, the associated ARs must be cleared
         AIF   ('&SYSASCE' NE 'AR').NOTAR
         CLEAR A&_WR1
         CLEAR A&_WR2
.NOTAR   ANOP  ,
.*
.* Assign register for return code (unless already valid)
         AIF   (K'&_RC GT 0)._RCREG    * Returncode in a register?
         EQUREG ,                      * No: find a register
&_RC     SETC  'R&BXA_NUMVAL'          * Create register name
         AIF   ('&RC' EQ '0').RC_0     * Set to 0
         LA    &_RC,&RC                * Load return code into register
         USE   &_RC                    * Set register in use
         AGO   ._RCOK
.RC_0    ANOP
         CLEAR &_RC                    * Set returncode to zero
         USE   &_RC                    * Set register in use
         AGO   ._RCOK
._RCREG  ANOP  ,                       * Check validity of register
.* For WORKAREA=FREE registers 14 thru 1 cannot be used
         AIF   ('&WORKAREA' EQ 'NOFREE')._RCOK * Nofree: no requirement
         CHKREG &_RC,g                 * Valid register?
         AIF   (&BXA_NUMVAL LT 2).RCREG * Allocate another
         AIF   (&BXA_NUMVAL GT 13).RCREG * Allocate another
         AGO   ._RCOK                  * Reg 2-13: OK
.RCREG   ANOP
         EQUREG ,                      * No: find a register
&I       SETA  &BXA_NUMVAL             * Save new register nr
         LR    R&I,&_RC                * Copy retcd to safe register
         DROP  &_RC                    * Set register available
&_RC     SETC  'R&I'                   * Create register name
         USE   &_RC                    * And set register in use
._RCOK   ANOP
.*
.* Assign register for reason code (unless already done)
         AIF   (K'&REASON EQ 0)._RSOK  * Reasoncode specified?
         AIF   (K'&_RS GT 0)._RSREG    * Reasoncode in register?
         EQUREG ,                      * No: find a register
&_RS     SETC  'R&BXA_NUMVAL'          * Create register name
         AIF   ('&REASON' EQ '0').RS_0 * Set to 0
         LA    &_RS,&REASON            * Load reason code into register
         USE   &_RS                    * Set register in use
         AGO   ._RSOK
.RS_0    ANOP
         CLEAR &_RS                    * Set reasoncode to zero
         USE   &_RS                    * Set register in use
         AGO   ._RSOK
._RSREG  ANOP  ,                       * Check validity of register
.* For WORKAREA=FREE registers 14 thru 1 cannot be used
         AIF   ('&WORKAREA' EQ 'NOFREE')._RSOK * Nofree: no requirement
         CHKREG &_RS,g                 * Valid register?
         AIF   (&BXA_NUMVAL LT 2).RSREG * Allocate another
         AIF   (&BXA_NUMVAL GT 13).RSREG * Allocate another
         AGO   ._RSOK                  * Reg 2-13: OK
.RSREG   ANOP
         EQUREG ,                      * No: find a register
&I       SETA  &BXA_NUMVAL             * Save new register nr
         LR    R&I,&_RS                * Copy reason to safe register
         DROP  &_RS                    * Set register available
&_RS     SETC  'R&I'                   * Create register name
         USE   &_RS                    * And set register in use
._RSOK   ANOP
.*
.* Assign register for return pointer (unless already done)
         AIF   (K'&RETPTR EQ 0)._RPOK  * Return ptr specified?
         AIF   (K'&_RP GT 0)._RPREG    * Return ptr in register?
         EQUREG ,                      * No: find a register
&_RP     SETC  'R&BXA_NUMVAL'          * Create register name
         AIF   ('&RETPTR' EQ '0').RP_0 * Set to 0
         LA    &_RP,=AL4(&RETPTR)      * Load return ptr into register
         USE   &_RP                    * Set register in use
         AGO   ._RPOK
.RP_0    ANOP
         CLEAR &_RP                    * Set return pointer to zero
         USE   &_RP                    * Set register in use
         AGO   ._RPOK
._RPREG  ANOP  ,                       * Check validity of register
.* For WORKAREA=FREE registers 14 thru 1 cannot be used
         AIF   ('&WORKAREA' EQ 'NOFREE')._RPOK * Nofree: no requirement
         CHKREG &_RP,g                 * Valid register?
         AIF   (&BXA_NUMVAL LT 2).RPREG * Allocate another
         AIF   (&BXA_NUMVAL GT 13).RPREG * Allocate another
         AGO   ._RPOK                  * Reg 2-13: OK
.RPREG   ANOP
         EQUREG ,                      * No: find a register
&I       SETA  &BXA_NUMVAL             * Save new register nr
         LR    R&I,&_RP                * Copy retptr to safe register
         DROP  &_RP                    * Set register available
&_RP     SETC  'R&I'                   * Create register name
         USE   &_RP                    * And set register in use
._RPOK   ANOP
.*
.* Check the internal save-areas
         AIF   ('&BXA_ENTRY' EQ 'SUBR' AND &BXA_SAVES EQ 0).SUBRSAV
         AIF   (&BXA_SAVES EQ 0).NOSAVES
* All subroutines must have completed
         LT    &_WR1,SAVEINTF          * Retrieve ptr to internal SA's
         ABND  Z                       * If invalid: abend!
         AIF   ('&BXA_ENTRY' EQ 'SUBR').SUBRSAV
         LT    &_WR2,SAVEINTU          * Pointer to last used is zero?
         ABND  NZ                      * No: not all subr's ended!
         AGO   .NOSAVES                * Skip SUBR logic
.*
.SUBRSAV ANOP
         LT    &_WR1,SAVEINTU          * Pointer to last used is zero?
         ABND  Z                       * Yes: invalid for SUBR-type pgm
_LOOP&SYSNDX LABEL ,
         DROP  &_WR2                   * Drop reg to change it
         AIF   (&BXA_SAVES EQ 0).NOSAVES
         LR    &_WR2,&_WR1             * Point to SA on chain
SA       USE   SAVEAREA,&_WR2          * and set it addressable
         LT    &_WR1,SA.SAVENEXT       * Is there a next SA?
         BNZ   _LOOP&SYSNDX            * Yes: runchain
         LA    &_WR1,&BXA_WALEN-SAVEAREA_LEN * Offset in dynamic area
         SR    &_WR2,&_WR1             * Point to start of area
         DROP  SA
INT      USE   BXASAVE,&_WR2           * Set area addressable
         CLC   INT.SAVEID,=CL8'&BXA_PGM_LABEL' * Id is correct?
         ABND  NE                      * If not: internal error
         CLC   SAVEINTU,INT.SAVEPTSA   * all subrs ended?
         ABND  NE                      * No: must be an error!
         DROP  &_WR1                   * Drop register to change it
         L     &_WR1,INT.SAVEPREV      * Point to preceding SA on chain
PRV      USE   SAVEAREA,&_WR1          * and set it addressable
         CLEAR PRV.SAVENEXT,,XC        * Detach our subchain
         DROP  PRV                     * SAVEAREA,R4 (now end-of-chain)
         USE   &_WR1                   * Tell asm not to realloc reg.
         DROP  INT                     * BXASAVE,R5 = whole dyn.area
         USE   &_WR2                   * Tell asm not to realloc reg.
.NOSAVES ANOP
.*
         AIF   ('&WORKAREA' EQ 'NOFREE').NOFREE
         AIF   ('&BXA_ENTRY' EQ 'SUBR' AND &BXA_SAVES EQ 0).NOFREE
*
* Release dynamically allocated storage
         AIF   ('&BXA_ENTRY' EQ 'SUBR').WR2OK * For SUBR WR2 is ok
         DROP  &_WR2                   * Drop reg to change it
         LR    &_WR2,R13               * Copy workarea pointer
         DEC   &_WR2,SAVEPRFX_LEN      * And adjust for prefix area
.WR2OK   ANOP  ,                       *
.*
.* If a pointer is known to exist: reset it to zeros
         AIF   (K'&BXA_WORKPTR(3) EQ 0)._NOPTR
* First reset pointer to zeros
HDR      USE   BXASAVE,&_WR2           * Set area addressable
         LT    &_WR1,HDR.SAVEPTPT      * Get ptr to area with ptr to us
         ABND  Z                       * If invalid abend program
         XC    0(4,&_WR1),0(&_WR1)     * Reset pointer to zero
         DROP  HDR                     * BXASAVE,R5 = whole dyn.area
         USE   &_WR2                   * Tell asm not to change this 1
* Then free allocated storage
._NOPTR  ANOP
.* Free allocated storage
.* For SUBPGM's with FREE: Hold address of previous save-area in WR1
         AIF   ('&BXA_ENTRY' NE 'SUBPGM' AND                           *
               '&BXA_ENTRY' NE 'RESMGR' AND                            *
               '&BXA_ENTRY' NE 'FRR').NOSUB
         L     &_WR1,SAVEPREV          * Save address of previous SA
.NOSUB   ANOP  ,                       *
         AIF   ('&BXA_ENTRY' NE 'SRB' AND '&BXA_ENTRY' NE 'RMTR').NOSRB
         L     &_WR1,SAVEHDR           * Reload return address
         CLEAR SAVEHDR                 * Wipe header of save area
.NOSRB   ANOP  ,                       *
.*
         STORAGE RELEASE,              * Free the acquired             *
               ADDR=(&_WR2),           *    storage area               *
               LENGTH=&BXA_WALEN       *
.NOFREE  ANOP  ,                       *
.*
.* Generate different code for returning to caller depending on ENTRY
         AIF   ('&BXA_ENTRY' EQ 'FRR').SUBPGM
         AIF   ('&BXA_ENTRY' EQ 'MAIN').MAIN
         AIF   ('&BXA_ENTRY' EQ 'RESMGR').SUBPGM
         AIF   ('&BXA_ENTRY' EQ 'RMTR').SRB
         AIF   ('&BXA_ENTRY' EQ 'SPCR').MAIN
         AIF   ('&BXA_ENTRY' EQ 'SRB').SRB
         AIF   ('&BXA_ENTRY' EQ 'SUBPGM').SUBPGM
         AIF   ('&BXA_ENTRY' EQ 'SUBR').SUBR
         AIF   ('&BXA_ENTRY' EQ 'SVC').SVC
         MNOTE 12,'Internal error'
         MEXIT
.*
.SUBPGM  ANOP
*
* Set ret/reason-codes in R15/R0, restore registers, then return
.* If WORKAREA=FREE, ptr to previous SA in &_WR1
.*        otherwise, ptr to previous SA in current SA
         AIF   ('&WORKAREA' EQ 'FREE').FROMWR1
         L     R13,SAVEPREV            * Point to previous SA
         AGO   .R13OK
.FROMWR1 ANOP
         LR    R13,&_WR1               * Restore R13 (prev.savearea)
.R13OK   ANOP
         DROP  R13                     * Drop to swap using status
         USE   SAVEAREA,R13            * R13 now points to prev.SA
         L     R14,SAVEDR14            * Restore R14
         CPY   R15,&_RC,NOWARN         * Copy returncode to R15
.* Determine how to load R0 and R1
&_WR2    SETC  'R2'                    * Start register for LM
         AIF   (K'&REASON GT 0 AND K'&RETPTR GT 0).SPRSRP
         AIF   (K'&REASON GT 0 AND K'&RETPTR EQ 0).SPRS
         AIF   (K'&REASON EQ 0 AND K'&RETPTR GT 0).SPRP
.* Neither reason nor retptr specified
&_WR2    SETC  'R0'                    * Reload registers 0-12
         AGO   .SP_LM                  *
.SPRSRP  ANOP  ,                       * Both reason and retptr
         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0
         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1
         AGO   .SP_LM                  *
.SPRS    ANOP  ,                       * Only reason specified
         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0
&_WR2    SETC  'R1'                    * Reload registers 1-12
         AGO   .SP_LM                  *
.SPRP    ANOP  ,                       * Only retptr specified
         L     R0,SAVEDR0              * Restore caller's R0
         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1
.SP_LM   ANOP  ,                       *
         LM    &_WR2,R12,SAVED&_WR2    * Restore all other registers
         BR    R14                     * Return to caller
         DROP  R13                     * SAVEAREA no longer needed
.*
         AGO   .LTORG
.*
.SUBR    ANOP
*
* Set return/reason-codes in R15/R0, restore registers, then return
         DROP  &_WR1                   * Drop register to change it
         L     &_WR1,SAVEINTU          * Point to last-used internal SA
SA       USE   SAVEAREA,&_WR1          * Set previous SA addressable
         MVC   SAVEINTU,SA.SAVEPREV    * Set previous SA last-used
         L     R14,SA.SAVEDR14         * Restore R14
         CPY   R15,&_RC,NOWARN         * Copy returncode to R15
.* Determine how to load R0 and R1
&_WR2    SETC  'R2'                    * Start register for LM
         AIF   (K'&REASON GT 0 AND K'&RETPTR GT 0).SRRSRP
         AIF   (K'&REASON GT 0 AND K'&RETPTR EQ 0).SRRS
         AIF   (K'&REASON EQ 0 AND K'&RETPTR GT 0).SRRP
.* Neither reason nor retptr specified
&_WR2    SETC  'R0'                    * Reload registers 0-12
         AGO   .SR_LM                  *
.SRRSRP  ANOP  ,                       * Both reason and retptr
         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0
         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1
         AGO   .SR_LM                  *
.SRRS    ANOP  ,                       * Only reason specified
         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0
&_WR2    SETC  'R1'                    * Reload registers 1-12
         AGO   .SR_LM                  *
.SRRP    ANOP  ,                       * Only retptr specified
         L     R0,SA.SAVEDR0           * Restore caller's R0
         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1
.SR_LM   ANOP  ,
         LM    &_WR2,R12,SA.SAVED&_WR2 * Restore all other registers
         BR    R14                     * Return to caller
         DROP  SA                      * SAVEAREA,R4 no longer needed
         USE   &_WR1                   * Tell asm not to reallocate reg
         AGO   .LTORG
.*
.MAIN    ANOP
*
* Load returncode and return to caller
         CPY   R15,&_RC,NOWARN         * Load returncode
.* Determine how to load R0 and R1
         AIF   (K'&REASON GT 0 AND K'&RETPTR GT 0).MNRSRP
         AIF   (K'&REASON GT 0 AND K'&RETPTR EQ 0).MNRS
         AIF   (K'&REASON EQ 0 AND K'&RETPTR GT 0).MNRP
.* Neither reason nor retptr specified
         EREG  R0,R1                   * Reload registers 0-1
         AGO   .MN_PR
.MNRSRP  ANOP  ,                       * Both reason and retptr
         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0
         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1
         AGO   .MN_PR                  *
.MNRS    ANOP  ,                       * Only reason specified
         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0
         EREG  R1,R1                   * Restore caller's R1
         AGO   .MN_PR                  *
.MNRP    ANOP  ,                       * Only retptr specified
         EREG  R0,R0                   * Restore caller's R0
         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1
.MN_PR   ANOP  ,
         PR    ,                       *  and return to caller
         AGO   .LTORG
.*
.SVC     ANOP
*
* Load returncode and return to caller
         CPY   R15,&_RC,NOWARN         * Load returncode
.* Reasoncode specified for R0?
         AIF   (K'&REASON EQ 0).SVCNORS
         CPY   R0,&_RS,NOWARN          * Load reasoncode
.SVCNORS ANOP  ,
.* Return pointer specified for R1?
         AIF   (K'&RETPTR EQ 0).SVCNORP
         CPY   R1,&_RP,NOWARN          * Load return pointer
.SVCNORP ANOP  ,
*
* Return to caller
         SVC   3                       * Pop RB
         MEXIT ,                       *
*
.SRB     ANOP  ,                       *
*
* Clear retcode register and return to system
         CPY   R15,&_RC,NOWARN         * Copy saved retcode 0
         CPY   R14,&_WR1               * Copy return register
         BR    R14                     * and return
*
.LTORG   ANOP  ,                       *
         LTORG ,                       * Literal pool for this routine
         DROP  ,                       * Drop all registers
.*
.MEND    MEND
./ ADD NAME=RLTORG   0100-20096-20096-0111-00380-00380-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Create a literal pool. This macro replaces the normal LTORG
.* instruction. The required OPSYN is issued by the PGM macro.
.*
&LABEL   RLTORG
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC RLTORG                 * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_SUBR               * Current subroutine
         GBLC  &BXA_RD_LAB(50)         * Labels for remote data
         GBLC  &BXA_RD_OPC(50)         * Opcodes for remote data
         GBLC  &BXA_RD_ARG(50)         * Pos Arguments for remote data
         GBLC  &BXA_RD_ALG(50)         * Alignment for remote data
         LCLA  &I                      * Index for BXA_RD_xxx
.*
.**!!    GBLA  &BXA_RD_NDX(50)         * Indexes for keywords
.**!!    GBLC  &BXA_RD_KEY(50)         * Keyword names
.**!!    GBLC  &BXA_RD_VAL(50)         * Keyword values
.*       LCLA  &I                      * Index for BXA_RD_LAB/OPC/ARG
.**!!    LCLA  &J                      * Index for BXA_RD_NDX/KEY/VAL
         LCLC  &LAB                    * Entry from BXA_RD_LAB
         LCLC  &OPC                    * Entry from BXA_RD_OPC
         LCLC  &ARG                    * Entry from BXA_RD_ARG
         LCLC  &ALG                    * Entry from BXA_RD_ALG
.**!!    LCLC  &KEY                    * Entry from BXA_RD_KEY
.**!!    LCLC  &VAL                    * Entry from BXA_RD_VAL
.**!!    LCLC  &K1                     * First character from &KEY
.*
.* Define DCB-parameters
.**!!    LCLC  &BFALN,&BFTEK,&BLKSIZE,&BUFCB,&BUFOFF,&BUFL,&BUFNO,     *
               &CYLOFL,&DCBE,&DDNAME,&DEVD,&DSORG,&EODAD,&EROPT,&EXLST,*
               &KEYLEN,&LIMCT,&LRECL,&MACRF,&MSHI,&MSWA,&NCP,&NTM,     *
               &OPTCD,&RECFM,&RKP,&SMSI,&SMSW,&SYNAD
.*
.* Check that we're not in the midst of a subroutine
         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR1
.ERR1    MNOTE 8,'Missing ENDSR statement'
.NOERR1  ANOP
.*
.* Generate code
&LABEL   LABEL H                       * Align on halfword
.*
.* Insert remote data
         AIF   (N'&BXA_RD_LAB EQ 0).LOOP2OK * Skip RDATA loop
**********************************************************************
*
* Remote data definitions
*
**********************************************************************
.* Generate remote data definitions from tables
&I       SETA  0                       * &I indexes BXA_RD_LAB/OPC/ARG
&J       SETA  1                       * &J indexes BXA_RD_NDX/KEY/VAL
.LOOP2   ANOP
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&BXA_RD_LAB).LOOP2OK * End of loop
&LAB     SETC  '&BXA_RD_LAB(&I)'       * Extract Label for remote data
&OPC     SETC  '&BXA_RD_OPC(&I)'       * Extract Remote opcode
&ARG     SETC  '&BXA_RD_ARG(&I)'       * Extract Remote data operands
&ALG     SETC  '&BXA_RD_ALG(&I)'       * Extract Remote data alignment
.*
         AIF   (K'&ALG EQ 0).LOOP2GO   * No alignment
         DS    0&ALG                   * Align
.LOOP2GO ANOP
.**!!    AIF   ('&OPC' EQ 'DCB').KEY   * Go process macro with keywords
         AIF   ('&OPC' EQ 'CLOSE').LOOP2MFL * Go process macro, MF=L
         AIF   ('&OPC' EQ 'MGCRE').LOOP2MFL * Go process macro, MF=L
         AIF   ('&OPC' EQ 'OPEN').LOOP2MFL * Go process macro with MF=L
         AIF   ('&OPC' EQ 'WTO').LOOP2MFL * Go process macro with MF=L
&LAB     &OPC  &ARG
         AGO   .LOOP2                  * Go process next entry
.LOOP2MFL ANOP
&LAB     &OPC  &ARG,MF=L
         AGO   .LOOP2                  * Go process next entry
.LOOP2OK ANOP
         AGO   .MEND
.*
.* KEYwords section: extract keyword parameters from tables
.* - Select all entries from BXA_RD_NDX/KEY/VAL with an index value
.*   equal to the current index for BXA_RD_LAB/OPC/ARG. These entries
.*   specify the keywords for this macro expansion.
.*   All entries are copied to locals, which are ultimately used
.*   to generate the macro specified in BXA_RD_OPC.
.*
.KEY     ANOP  ,                       * Init: Wipe all keywords
&BFALN   SETC  ''
&BFTEK   SETC  ''
&BLKSIZE SETC ''
&BUFCB   SETC  ''
&BUFOFF  SETC  ''
&BUFL    SETC  ''
&BUFNO   SETC  ''
&CYLOFL  SETC  ''
&DCBE    SETC  ''
&DDNAME  SETC  ''
&DEVD    SETC  ''
&DSORG   SETC  ''
&EODAD   SETC  ''
&EROPT   SETC  ''
&EXLST   SETC  ''
&KEYLEN  SETC  ''
&LIMCT   SETC  ''
&LRECL   SETC  ''
&MACRF   SETC  ''
&MSHI    SETC  ''
&MSWA    SETC  ''
&NCP     SETC  ''
&NTM     SETC  ''
&OPTCD   SETC  ''
&RECFM   SETC  ''
&RKP     SETC  ''
&SMSI    SETC  ''
&SMSW    SETC  ''
&SYNAD   SETC  ''
.*
.LOOP3   ANOP
         AIF   (&J GT N'&BXA_RD_NDX).LOOP3OK * End of table
         AIF   (&BXA_RD_NDX(&J) NE &I).LOOP3OK * End of loop
.* Valid entry: extract values from tables
&VAL     SETC  '&BXA_RD_VAL(&J)'       * Extract keyword value
&KEY     SETC  '&BXA_RD_KEY(&J)'       * Extract keyword name
&KEY     SETC  (UPPER '&KEY')          * Convert to upper case
&K1      SETC  '&KEY'(1,1)             * Extract first character
         AIF   ('&K1' EQ 'B').LOOP3B
         AIF   ('&K1' EQ 'C').LOOP3C
         AIF   ('&K1' EQ 'D').LOOP3D
         AIF   ('&K1' EQ 'E').LOOP3E
         AIF   ('&K1' EQ 'K').LOOP3K
         AIF   ('&K1' EQ 'L').LOOP3L
         AIF   ('&K1' EQ 'M').LOOP3M
         AIF   ('&K1' EQ 'N').LOOP3N
         AIF   ('&K1' EQ 'O').LOOP3O
         AIF   ('&K1' EQ 'R').LOOP3R
         AIF   ('&K1' EQ 'S').LOOP3S
.LOOP3ERR ANOP
&KEY     SETC  (DOUBLE '&KEY')         * Double embedded quotes
         MNOTE 8,'RDATA &OPC specified unknown keyword: &KEY'
         AGO   .LOOP3
.*
.LOOP3B  ANOP
         AIF   ('&KEY' EQ 'BFALN').BFALN
         AIF   ('&KEY' EQ 'BFTEK').BFTEK
         AIF   ('&KEY' EQ 'BLKSIZE').BLKSIZE
         AIF   ('&KEY' EQ 'BUFCB').BUFCB
         AIF   ('&KEY' EQ 'BUFOFF').BUFOFF
         AIF   ('&KEY' EQ 'BUFL').BUFL
         AIF   ('&KEY' EQ 'BUFNO').BUFNO
         AGO   .LOOP3ERR
.*
.LOOP3C  ANOP
         AIF   ('&KEY' EQ 'CYLOFL').CYLOFL
         AGO   .LOOP3ERR
.*
.LOOP3D  ANOP
         AIF   ('&KEY' EQ 'DCBE').DCBE
         AIF   ('&KEY' EQ 'DDNAME').DDNAME
         AIF   ('&KEY' EQ 'DEVD').DEVD
         AIF   ('&KEY' EQ 'DSORG').DSORG
         AGO   .LOOP3ERR
.*
.LOOP3E  ANOP
         AIF   ('&KEY' EQ 'EODAD').EODAD
         AIF   ('&KEY' EQ 'EROPT').EROPT
         AIF   ('&KEY' EQ 'EXLST').EXLST
         AGO   .LOOP3ERR
.*
.LOOP3K  ANOP
         AIF   ('&KEY' EQ 'KEYLEN').KEYLEN
         AGO   .LOOP3ERR
.*
.LOOP3L  ANOP
         AIF   ('&KEY' EQ 'LIMCT').LIMCT
         AIF   ('&KEY' EQ 'LRECL').LRECL
         AGO   .LOOP3ERR
.*
.LOOP3M  ANOP
         AIF   ('&KEY' EQ 'MACRF').MACRF
         AIF   ('&KEY' EQ 'MSHI').MSHI
         AIF   ('&KEY' EQ 'MSWA').MSWA
         AGO   .LOOP3ERR
.*
.LOOP3N  ANOP
         AIF   ('&KEY' EQ 'NCP').NCP
         AIF   ('&KEY' EQ 'NTM').NTM
         AGO   .LOOP3ERR
.*
.LOOP3O  ANOP
         AIF   ('&KEY' EQ 'OPTCD').OPTCD
         AGO   .LOOP3ERR
.*
.LOOP3R  ANOP
         AIF   ('&KEY' EQ 'RECFM').RECFM
         AIF   ('&KEY' EQ 'RKP').RKP
         AGO   .LOOP3ERR
.*
.LOOP3S  ANOP
         AIF   ('&KEY' EQ 'SMSI').SMSI
         AIF   ('&KEY' EQ 'SMSW').SMSW
         AIF   ('&KEY' EQ 'SYNAD').SYNAD
         AGO   .LOOP3ERR
.*
.BFALN   ANOP
&BFALN   SETC  '&VAL'
         AGO   .LOOP3NX
.BFTEK   ANOP
&BFTEK   SETC  '&VAL'
         AGO   .LOOP3NX
.BLKSIZE ANOP
&BLKSIZE SETC  '&VAL'
         AGO   .LOOP3NX
.BUFCB   ANOP
&BUFCB   SETC  '&VAL'
         AGO   .LOOP3NX
.BUFOFF  ANOP
&BUFOFF  SETC  '&VAL'
         AGO   .LOOP3NX
.BUFL    ANOP
&BUFL    SETC  '&VAL'
         AGO   .LOOP3NX
.BUFNO   ANOP
&BUFNO   SETC  '&VAL'
         AGO   .LOOP3NX
.*
.CYLOFL  ANOP
&CYLOFL  SETC  '&VAL'
         AGO   .LOOP3NX
.*
.DCBE    ANOP
&DCBE    SETC  '&VAL'
         AGO   .LOOP3NX
.DDNAME  ANOP
&DDNAME  SETC  '&VAL'
         AGO   .LOOP3NX
.DEVD    ANOP
&DEVD    SETC  '&VAL'
         AGO   .LOOP3NX
.DSORG   ANOP
&DSORG   SETC  '&VAL'
         AGO   .LOOP3NX
.*
.EODAD   ANOP
&EODAD   SETC  '&VAL'
         AGO   .LOOP3NX
.EROPT   ANOP
&EROPT   SETC  '&VAL'
         AGO   .LOOP3NX
.EXLST   ANOP
&EXLST   SETC  '&VAL'
         AGO   .LOOP3NX
.*
.KEYLEN  ANOP
&KEYLEN  SETC  '&VAL'
         AGO   .LOOP3NX
.*
.LIMCT   ANOP
&LIMCT   SETC  '&VAL'
         AGO   .LOOP3NX
.LRECL   ANOP
&LRECL   SETC  '&VAL'
         AGO   .LOOP3NX
.*
.MACRF   ANOP
&MACRF   SETC  '&VAL'
         AGO   .LOOP3NX
.MSHI    ANOP
&MSHI    SETC  '&VAL'
         AGO   .LOOP3NX
.MSWA    ANOP
&MSWA    SETC  '&VAL'
         AGO   .LOOP3NX
.*
.NCP     ANOP
&NCP     SETC  '&VAL'
         AGO   .LOOP3NX
.NTM     ANOP
&NTM     SETC  '&VAL'
         AGO   .LOOP3NX
.*
.OPTCD   ANOP
&OPTCD   SETC  '&VAL'
         AGO   .LOOP3NX
.*
.RECFM   ANOP
&RECFM   SETC  '&VAL'
         AGO   .LOOP3NX
.RKP     ANOP
&RKP     SETC  '&VAL'
         AGO   .LOOP3NX
.*
.SMSI    ANOP
&SMSI    SETC  '&VAL'
         AGO   .LOOP3NX
.SMSW    ANOP
&SMSW    SETC  '&VAL'
         AGO   .LOOP3NX
.SYNAD   ANOP
&SYNAD   SETC  '&VAL'
         AGO   .LOOP3NX
.*
.* Go process next entry
.LOOP3NX ANOP
&J       SETA  &J+1                    * point next entry
         AGO   .LOOP3
.*
.* Select macro to expand
.LOOP3OK ANOP
         AIF   ('&OPC' EQ 'DCB').DCB
         MNOTE 8,'RDATA &OPC not supported'
         AGO   .LOOP2
.*
.DCB     ANOP
&LAB     DCB   BFALN=&BFALN,BFTEK=&BFTEK,BLKSIZE=&BLKSIZE,             *
               BUFCB=&BUFCB,BUFOFF=&BUFOFF,BUFL=&BUFL,BUFNO=&BUFNO,    *
               CYLOFL=&CYLOFL,DCBE=&DCBE,DDNAME=&DDNAME,DEVD=&DEVD,    *
               DSORG=&DSORG,EODAD=&EODAD,EROPT=&EROPT,EXLST=&EXLST,    *
               KEYLEN=&KEYLEN,LIMCT=&LIMCT,LRECL=&LRECL,               *
               MACRF=&MACRF,MSHI=&MSHI,MSWA=&MSWA,NCP=&NCP,            *
               NTM=&NTM,OPTCD=&OPTCD,RECFM=&RECFM,RKP=&RKP,            *
               SMSI=&SMSI,SMSW=&SMSW,SYNAD=&SYNAD
         AGO   .LOOP2
.*
.MEND    MEND
./ ADD NAME=RWTO     0100-20096-20096-0111-00118-00118-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* WTO with remote text
.*
&LABEL   RWTO  &TEXT                   * Text for WTO
.*
.* &LABEL specifies an optional label
.* &TEXT  specifies the text for the WTO. Must specify one of the
.*        following:
.*        - Literal text, enclosed in apostrophes
.*        - Fieldname of the field containing the parmlist (MAPWTOPL)
.*        - (reg) pointing to the parmlist (MAPWTOPL)
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC RWTO                   * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Define variables
         GBLA  &BXA_NUMVAL             * Result from CHKREG
         LCLC  &RLBL                   * Remote label
         LCLC  &_REG                   * Register to plist
.*
.* Check TEXT parameter
         AIF   (K'&TEXT EQ 0).ERR1A    *
         AIF   ('&TEXT'(1,1) NE '(').NOERR1
&_REG    SETC  '&TEXT(1)'              *
         CHKREG &_REG,g                * Valid GPR?
         AIF   (&BXA_RC GT 4).ERR1B    *
         AGO   .NOERR1
.ERR1A   MNOTE 8,'Missing text for WTO'
         MEXIT
.ERR1B   MNOTE 8,'&_REG is not a valid general purpose register'
         MEXIT
.NOERR1  ANOP
.*
.* Check nr of arguments
         AIF   (N'&SYSLIST EQ 1).NOERR2
.ERR2A   MNOTE 4,'Expected only 1 argument: remainder ignored'
.NOERR2  ANOP
.*
.* Generate code
         AIF   ('&TEXT'(1,1) EQ '''').GENLIT
         AIF   ('&TEXT'(1,1) EQ '(').GENREG
         AGO   .GENLOC                 *
.*
.GENLIT  ANOP  ,                       * Generate for literal argument
&RLBL    SETC  'RWTO&SYSNDX'           *
&RLBL    RDATA WTO,&TEXT               * Define message text (remote)
&LABEL   L     R1,=AL4(&RLBL)          * Point remote plist
         AGO   .WTO                    *
.*
.GENREG  ANOP  ,                       * Generate for register argument
&LABEL   CPY   R1,&_REG,NOWARN         * Point remote plist
         AGO   .WTO                    *
.*
.GENLOC  ANOP  ,                       * Generate for location argument
&LABEL   LA    R1,&TEXT                * Point remote plist
.*
.WTO     ANOP  ,                       *
         SVC   35                      * Issue WTO
.*
.MEND    MEND
./ ADD NAME=SET      0100-20096-20096-0111-00189-00189-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Turn on a value in a code field
.*
&LABEL   SET   &CODE                   * Name of code to be SET
.*                                     * More codes are in SYSLIST
.*
.* Alternative syntax: SET field1,field2
.*
.* &CODE specifies the name of a DCL-declared code value. Any number of
.*       arguments may follow, but they all have to be DCL-declared
.*       value names too.
.* fld1  Name of an A-type or V-type field
.* fld2  Name of a field, or a register
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC SET                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_NUMVAL             * Retvalue from CHKREG
         LCLC  &_LABEL                 * Copy of &LABEL
         LCLA  &I                      * Index for SYSLIST
         LCLA  &J                      * Pointer to period in &ARG
         LCLC  &ARG                    * 1 argument from SYSLIST
         LCLC  &_LOC                   * Current location
.*
.* Check the LABEL parameter
&_LABEL  SETC  '&LABEL'                *
.*
.* Check the CODE parameter
         AIF   (K'&CODE NE 0).NOERR1   *
.ERR1A   MNOTE 8,'Missing argument(s)' *
         MEXIT ,                       *
.NOERR1  ANOP  ,                       *
.*
.* Check field type to determine syntax type
         AIF   (T'&CODE EQ 'v').SYNTAX1 * Ok: process code value names
.*
.* CODE parameter must be of type A, V, or R
         AIF   (T'&CODE EQ 'A').NOERR3  *
         AIF   (T'&CODE EQ 'V').NOERR3  *
         AIF   (T'&CODE EQ 'R').NOERR3A *
.ERR3A   MNOTE 8,'Cannot SET &CODE: field type not supported'
         MEXIT ,
.NOERR3A ANOP  ,
         AIF   (L'&CODE EQ 4).NOERR3
         AIF   (L'&CODE EQ 3).NOERR3
.ERR3B   MNOTE 8,'Cannot SET &CODE: length must be 3 or 4 bytes'
         MEXIT ,
.NOERR3  ANOP  ,
.*
.* Check second argument
&ARG     SETC  '&SYSLIST(2)'           * Extract argument
         AIF   (K'&ARG NE 0).NOERR4    *
.ERR4A   MNOTE 8,'Pointed field missing'
         MEXIT ,                       *
.NOERR4  ANOP  ,                       *
.*
.* Check nr of arguments
         AIF   (N'&SYSLIST LE 2).NOERR5
.ERR5A   MNOTE 4,'More than 2 arguments: remainder ignored'
         MEXIT ,                       *
.NOERR5  ANOP  ,                       *
.*
.* Obtain ptr to &ARG
         CHKREG &ARG,g                 * Is this a valid register?
         AIF   (&BXA_RC EQ 0).SAVARG   *
&_LABEL  LA    R0,&ARG                 * Obtain pointer
&_LABEL  SETC  ''                      * Wipe label after use
&ARG     SETC  'R0'                    * Pointer now in R0
.*
.* Save pointer in &ARG into &CODE field
.SAVARG  ANOP  ,                       *
         AIF   (T'&CODE EQ 'A').SAVST  *
         AIF   (T'&CODE EQ 'V').SAVST  *
.* Must be type R: unaligned, explicit length
         AIF   (L'&CODE EQ 3).SAVST3   *
         AIF   (L'&CODE EQ 4).SAVST4   *
         MNOTE 12,'Internal error'     *
         MEXIT ,                       *
.*
.* Store pointer into field
.SAVST   ANOP  ,                       *
&_LABEL  ST    &ARG,&CODE              * Set up pointer
         MEXIT ,                       *
.*
.SAVST3  ANOP  ,                       *
&_LABEL  STCM  &ARG,NYYY,&CODE         * Set up 24-bit pointer
         MEXIT ,                       *
.*
.SAVST4  ANOP  ,                       *
&_LABEL  STCM  &ARG,YYYY,&CODE         * Set up 31-bit pointer
         MEXIT ,                       *
.*
.* Handling of syntax 1: any number of value-names
.*
.SYNTAX1 ANOP  ,                       *
.*
.* Loop to process all arguments given
&I       SETA  0                       * I indexes into SYSLIST
.LOOP1   ANOP  ,                       * Loop thru syslist
&I       SETA  &I+1                    * Point next argument
         AIF   (&I GT N'&SYSLIST).LOOP1OK *
&ARG     SETC  '&SYSLIST(&I)'          * Extract argument
.* &ARG is a valid code name?
         AIF   (K'&ARG EQ 0).LOOP1     * Omitted argument: skip
         AIF   (T'&ARG NE 'v').ERR2A   * Not a code value
&J       SETA  ('&ARG' INDEX '.')      * Search for a period
         AIF   (&J EQ 0).LOOP1NP       * Unqualified name
&_LOC    SETC  '&ARG'(1,&J-1).'.'      * Extract USING name from ARG
&ARG     SETC  '&ARG'(&J+1,*)          * Extract code value name
.LOOP1NP ANOP  ,                       *
         GBLC  &(BXA_BITF_&ARG)        * Declare code location variable
&_LOC    SETC  '&_LOC'.'&(BXA_BITF_&ARG)' * Create location name
&J       SETA  L'&_LOC                 * Determine length of field
         AIF   (&J EQ 1).LOOP1MI       * 1 byte: use Move Immediate
&_LABEL  MVC   &_LOC,=AL&J.(&ARG)      * Set field to desired value
&_LABEL  SETC  ''                      * Wipe label after use
         AGO   .LOOP1                  * And go process next arg
.LOOP1MI ANOP  ,                       *
&_LABEL  MVI   &_LOC,&ARG              * Set field to desired value
&_LABEL  SETC  ''                      * Wipe label after use
         AGO   .LOOP1                  * And go process next arg
.ERR2A   ANOP  ,                       *
&ARG     SETC  (DOUBLE '&ARG')         *
         MNOTE 8,'&ARG is not a DCL declared code value: skipped'
         AGO   .LOOP1                  *
.LOOP1OK ANOP  ,                       *
         AIF   (K'&_LABEL EQ 0).MEND   * Label has been generated?
&_LABEL  LABEL ,                       * No: do so now
.*
.MEND    MEND
./ ADD NAME=SETMODE  0100-20096-20096-0111-00287-00287-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Turn off a bit in a bit-field
.*
&LABEL   SETMODE &MODE,                * Mode indicator                *
               &OPTION,                * Option indicator              *
               &KEY=,                  * Desired storage key           *
               &SAVE=                  * (reg) to save current PSW key
.*
.* &MODE   specifies the desired mode. Valid values are:
.*       - SUP    to switch to supervisor mode
.*       - PROB   to switch to problem program mode
.*       - AR     to switch to access register mode
.*       - PRIM   to switch to primary mode
.*       - PSWKEY to change the current PSW key
.*       - SMC    to switch to step-must-complete status
.*       - NOSMC  to cancel step-must-complete status
.* &OPTION specifies an option for the specified MODE. Valid are:
.*       - PSWKEY,SAVE to save the PSW key in R2
.*       - PSWKEY,RESET to reset the PSW key to its former value
.* &KEY    specifies the desired storage key. Used with SUP/PROB/PSWKEY
.*         For SUP the default is ZERO, for PROB the default is NZERO.
.*         For PSWKEY there is no default.
.* &SAVE   Specifies a (reg) which must contain the current PSW key
.*         Used with PSWKEY and SUP
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC SETMODE                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declarations
         GBLC  &BXA_SETMODE_SAVE       * Register with saved PSW key
         GBLB  &BXA_SETMODE            * On if SETMODE expanded before
         GBLB  &BXA_SVCMODE            * On when in supervisor mode
         GBLC  &SYSASCE                * Used by SYSSTATE
.*
         LCLC  &_KEY
         LCLC  &_SAVE
         LCLC  &_MODE
         LCLC  &_ASCE                  * Local copy of &SYSASCE
.*
.* Check the MODE parameter
         AIF   (K'&MODE EQ 0 AND K'&KEY NE 0).ERR1DFT
&_MODE   SETC  '&MODE'                 * Copy supplied MODE value
         AIF   (K'&MODE EQ 0).ERR1A
         AIF   ('&MODE' EQ 'SUP').NOERR1
         AIF   ('&MODE' EQ 'PROB').NOERR1
         AIF   ('&MODE' EQ 'AR').NOERR1
         AIF   ('&MODE' EQ 'PRIM').NOERR1
         AIF   ('&MODE' EQ 'PSWKEY').NOERR1
         AIF   ('&MODE' EQ 'SMC').NOERR1
         AIF   ('&MODE' EQ 'NOSMC').NOERR1
         AGO   .ERR1B
.ERR1A   MNOTE 8,'First positional parameter must specify desired mode'
         MEXIT
.ERR1B   MNOTE 8,'Unknown mode specified on first positional parameter'
         MEXIT
.ERR1DFT ANOP
&_MODE   SETC  'PSWKEY'                * Supply default for KEY=
.NOERR1  ANOP
.*
.* Check the KEY parameter
         AIF   (K'&KEY EQ 0 AND '&_MODE' EQ 'PSWKEY' AND '&OPTION' NE '*
               RESET').ERR2B
         AIF   (K'&KEY EQ 0).NOERR2
         AIF   ('&_MODE' NE 'SUP' AND '&_MODE' NE 'PROB' AND '&_MODE' N*
               E 'PSWKEY').ERR2A
&_KEY    SETC  '&KEY'
         AGO   .NOERR2
.ERR2A   MNOTE 4,'KEY parameter ignored: valid only with SUP, PROB, or *
               PSWKEY'
         AGO   .NOERR2
.ERR2B   MNOTE 8,'Key parameter missing: required with PSWKEY'
.NOERR2  ANOP
.*
.* Check the SAVE parameter
         AIF   (K'&SAVE EQ 0).NOERR3
         AIF   ('&_MODE' NE 'PSWKEY' AND '&_MODE' NE 'SUP').ERR3A
         AIF   ('&SAVE'(1,1) NE '(').ERR3B
&_SAVE   SETC  '&SAVE(1)'
         AGO   .NOERR3
.ERR3A   MNOTE 4,'SAVE parameter ignored: valid only with PSWKEY/SUP'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'SAVE parameter must specify a (register)'
.NOERR3  ANOP
.*
.* Check the OPTION parameter
         AIF   (K'&OPTION EQ 0).NOERR4
         AIF   ('&OPTION' NE 'RESET' AND '&OPTION' NE 'SAVE').ERR4A
         AIF   ('&OPTION' EQ 'RESET' AND '&_MODE' NE 'PSWKEY').ERR4B
         AIF   ('&OPTION' EQ 'SAVE' AND '&_MODE' NE 'PSWKEY' AND '&_MOD*
               E' NE 'SUP').ERR4B
         AIF   ('&OPTION' EQ 'RESET' AND K'&SAVE NE 0).ERR4C
         AIF   ('&OPTION' EQ 'RESET' AND '&BXA_SETMODE_SAVE' EQ '').ERR*
               4D
         AGO   .NOERR4
.ERR4A   MNOTE 8,'Second positional parameter must be omitted or ''RESE*
               T'' or ''SAVE'''
         AGO   .NOERR4
.ERR4B   MNOTE 4,'&OPTION ignored: not valid with &_MODE'
         AGO   .NOERR4
.ERR4C   MNOTE 4,'SAVE-parameter must not be specified for PSWKEY,RESET*
               : ignored'
         AGO   .NOERR4
.ERR4D   MNOTE 8,'Cannot RESET: previous operation did not SAVE'
.NOERR4  ANOP
.*
.* Define sub-macro SAVE_PSWKEY
         SETMODE0 ,                    * Define inner macro
.*
.* Select the correct expansion
         AIF   ('&_MODE' EQ 'SUP').SUP
         AIF   ('&_MODE' EQ 'PROB').PROB
         AIF   ('&_MODE' EQ 'AR').AR
         AIF   ('&_MODE' EQ 'PRIM').PRIM
         AIF   ('&_MODE' EQ 'PSWKEY').PSWKEY
         AIF   ('&_MODE' EQ 'SMC').SMC
         AIF   ('&_MODE' EQ 'NOSMC').NOSMC
         MNOTE 12,'Internal error'
         MEXIT
.*
.* Switch to supervisor mode
.SUP     ANOP
         AIF   (K'&KEY NE 0).SUPKEY    * If key parm not specified
&_KEY    SETC  'ZERO'                  * Use default
.SUPKEY  ANOP
         AIF   (NOT &BXA_SVCMODE).SUPNMSG
         MNOTE 4,'You are in supervisor mode. Why switch to it?'
.SUPNMSG ANOP
.*
.* Generate code
&LABEL   LABEL
&BXA_SETMODE_SAVE SETC ''              * Reset saved-pswkey register
         AIF   ('&OPTION' EQ 'SAVE').SUPSAVE
         AIF   (K'&SAVE NE 0).SUPSAVE
         AGO   .SUPNSAV
.SUPSAVE ANOP
         SAVE_PSWKEY &_SAVE            * Insert current PSW key in reg
.SUPNSAV ANOP
&_ASCE   SETC  '&SYSASCE'              * Copy current ASC AR mode
         AIF   ('&_ASCE' EQ 'P').SUPGO * Primary: ok issue MODESET
         SETMODE PRIM                  * Switch to primary mode, then
.SUPGO   ANOP
         MODESET MODE=SUP,             * Switch to supervisor mode     *
               KEY=&_KEY               *
         AIF   ('&_ASCE' EQ 'P').SUPOK * Primary: ok terminate
         SETMODE AR                    * And back again to primary mode
.SUPOK   ANOP
&BXA_SVCMODE SETB 1                    * Signal we're in SVC mode
         MEXIT
.*
.* Switch to problem program mode
.PROB    ANOP
         AIF   (K'&KEY NE 0).PRBKEY    * If key parm not specified
&_KEY    SETC  'NZERO'                 * Use default
.PRBKEY  ANOP
         AIF   (&BXA_SVCMODE).PRBNMSG
         MNOTE 4,'You are in problem mode. Why switch to it?'
.PRBNMSG ANOP
.* Generate code
&LABEL   LABEL
&_ASCE   SETC  '&SYSASCE'              * Copy current ASC AR mode
         AIF   ('&_ASCE' EQ 'P').PRBGO * Primary: ok issue MODESET
         SETMODE PRIM                  * Switch to primary mode, then
.PRBGO   ANOP
         MODESET MODE=PROB,            * Switch to problem mode        *
               KEY=&_KEY               *
         AIF   ('&_ASCE' EQ 'P').PRBOK * Primary: ok terminate
         SETMODE AR                    * And back again to primary mode
.PRBOK   ANOP
&BXA_SVCMODE SETB 0                    * Signal we're in problem mode
&BXA_SETMODE_SAVE SETC ''              * Reset saved-pswkey register
         MEXIT
.*
.* Switch to ASC AR mode (Access Register mode)
.AR      ANOP
         AIF   ('&SYSASCE' NE 'AR').ARNMSG
         MNOTE 4,'You are in ASC AR mode. Why switch to it?'
.ARNMSG  ANOP
         SAC   512                     * Switch to AR mode
         SYSSTATE ASCENV=AR            * Signal we're in AR mode
         MEXIT
.*
.* Switch to Primary mode (Non-Access Register mode)
.PRIM    ANOP
         AIF   ('&SYSASCE' NE 'P').PRMNMSG
         MNOTE 4,'You are in primary mode. Why switch to it?'
.PRMNMSG ANOP
         SAC   0                       * Switch to primary mode
         SYSSTATE ASCENV=P             * Signal we're in primary mode
         MEXIT
.*
.* Set new PSW key
.PSWKEY  ANOP
&LABEL   LABEL
         AIF   ('&OPTION' EQ 'RESET').PSWRESET
&BXA_SETMODE_SAVE SETC ''              * Reset saved-pswkey register
         AIF   ('&OPTION' EQ 'SAVE').PSWSAVE
         AIF   (K'&SAVE NE 0).PSWSAVE
         AGO   .PSWNSAV
.PSWSAVE ANOP
         SAVE_PSWKEY &_SAVE            * Insert current PSW key in reg
.PSWNSAV ANOP
.*
.* Set new PSW key from literal or from (reg)
         AIF   ('&KEY'(1,1) NE '(').PSWLIT
&_KEY    SETC  '&KEY(1)'
         SPKA  0(&_KEY)                * Set new PSW key value
         MEXIT
.*
.PSWLIT  ANOP
         SPKA  16*&KEY                 * Set new PSW key value
         MEXIT
.*
.* Reset PSW key to saved value
.PSWRESET ANOP
         SPKA  0(&BXA_SETMODE_SAVE)    * Reset PSW key to saved value
&BXA_SETMODE_SAVE SETC ''              * Reset saved-pswkey register
         MEXIT
.*
.* Set Step-Must-Complete mode
.SMC     ANOP  ,
         STATUS SET,MC,PROCESS         * Set step-must-complete status
         MEXIT
.*
.* Reset Step-Must-Complete mode
.NOSMC   ANOP  ,
         STATUS RESET,MC,PROCESS       * Cancel SMC status
         MEXIT
.*
.MEND    MEND
./ ADD NAME=SETMODE0 0100-20096-20096-0111-00082-00082-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Define internal subroutine for SETMODE
.*
         SETMODE0 ,                    *
.*
.* Declarations
         GBLB  &BXA_SETMODE            * On if SETMODE expanded before
.*
.* Include sub-macro on first invocation
         AIF   (&BXA_SETMODE).MEND
&BXA_SETMODE SETB 1                    * Signal macro is defined
         PUSH  PRINT,NOPRINT
         PRINT OFF,NOPRINT
.*
         MACRO
         SAVE_PSWKEY &REG              * Register (no parentheses)
.*
.* Declare variables
         GBLC  &BXA_SETMODE_SAVE       * Register with saved psw key
         LCLC  &_REG                   * &REG or default: R2
.*
.* Check REG parameter
&_REG    SETC  '&REG'                  * Copy specified register
         AIF   (K'&REG NE 0).NOERR1    * Register was specified?
&_REG    SETC  'R2'                    * No: apply default
.NOERR1  ANOP
.*
.* Generate code
         IPK   ,                       * Insert current PSW key in R2
         AIF   ('&_REG' EQ 'R2').SAVEOK
         AIF   ('&_REG' EQ 'R02').SAVEOK
         AIF   ('&_REG' EQ '2').SAVEOK
         AIF   ('&_REG' EQ '02').SAVEOK
         LR    &_REG,R2                * Copy PSW key to save register
.SAVEOK  ANOP
&BXA_SETMODE_SAVE SETC '&_REG'         * Set saved-pswkey register
.*
.MEND    MEND  ,                       * End of internal macro
         POP   PRINT,NOPRINT
.*
.MEND    MEND
./ ADD NAME=SETOF    0100-20096-20096-0111-00194-00194-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Turn off a bit in a bit-field
.*
&LABEL   SETOF &ADR,                   * Address of bit-field          *
               &MASK                   * Bit field mask
.*
.* Syntax 1:
.* &ADR  specifies the location in storage where the bit-field resides
.*       must be in offset(register) notation, or a symbolic name.
.* &MASK specifies which bits are to be turned off
.*
.* Syntax 2:
.* &ADR  specifies the name of a DCL-declared bit. Any number of
.*       arguments may follow, but they all have to be DCL-declared
.*       bit names too.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC SETOF                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLB  &BITS                   * On for syntax 2
         LCLA  &I                      * Index for SYSLIST
         LCLA  &J                      * Index for BIT and LOC
         LCLA  &MASKVAL                * Calculated mask value
         LCLA  &VAL                    * Mask value for any 1 bit
         LCLC  &ARG                    * 1 argument from SYSLIST
         LCLC  &ARG1                   * Using label preceding dot
         LCLC  &ARG2                   * Field name following dot
         LCLC  &LOC(5)                 * Locations with bits
         LCLC  &_LOC                   * Current location
         LCLC  &BIT(5)                 * Bit names
.*
.* Check the ADR parameter
         AIF   (K'&ADR NE 0).NOERR1
.ERR1A   MNOTE 8,'Missing argument(s)'
         MEXIT
.NOERR1  ANOP
.*
.* &ADR is a defined bit-field?
         AIF   (T'&ADR NE 'b').NOTABIT
&BITS    SETB  1
.NOTABIT ANOP
.*
.* Check the MASK parameter
         AIF   (&BITS).NOERR2
         AIF   (K'&MASK NE 0).NOERR2
.ERR2    MNOTE 8,'Mask of bits to turn off not specified'
         MEXIT
.NOERR2  ANOP
.*
.* Check nr of parameters
         AIF   (&BITS).NOERR3
         AIF   (N'&SYSLIST LE 2).NOERR3
.ERR3    MNOTE 4,'You cannot specify more than 1 mask with &ADR: remain*
               der ignored'
.NOERR3  ANOP
.*
.* Generate code for syntax 1
         AIF   (&BITS).CHKBITS
&LABEL   NI    &ADR,ALLBITS-&MASK      * Turn bit(s) off
         MEXIT
.*
.* Check all bit-names in &SYSLIST
.CHKBITS ANOP
&I       SETA  0                       * I is index to SYSLIST
.LOOP1   ANOP  ,                       * Loop thru all SYSLIST entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
&ARG     SETC  '&SYSLIST(&I)'          * Extract argument
         AIF   (T'&ARG NE 'b').LOOP1R1 * Wrong type: error 1
.* Retrieve bit mask value
&ARG1    SETC  ''                      * Assume no using label in &ARG
&ARG2    SETC  '&ARG'                  *
&J       SETA  ('&ARG2' FIND '.')      * Find location of dot
         AIF   (&J EQ 0).LOOP1ND       * No dot found in arg
         AIF   (&J EQ 1).LOOP1R3       * Starting dot is an error
&ARG1    SETC  '&ARG'(1,&J-1)          * Extract using label
         AIF   (&J EQ K'&ARG).LOOP1R3  * Trailing dot is an error
&ARG2    SETC  '&ARG'(&J+1,*)          * Extract field name
.LOOP1ND ANOP  ,                       * ARG2 now contans field name
         GBLC  &(BXA_BITF_&ARG2)       * Name for byte location
         AIF   (K'&(BXA_BITF_&ARG2) EQ 0).LOOP1R2 * No location: error
&BIT(&I) SETC  '&ARG2'                 * Put bit name in table
&LOC(&I) SETC  '&(BXA_BITF_&ARG2)'     * And byte location too
         AIF   (K'&ARG1 EQ 0).LOOP1    * Unlabeled: ok
&LOC(&I) SETC  '&ARG1'.'.&LOC(&I)'     * Prefix with label
         AGO   .LOOP1
.*
.LOOP1R1 ANOP
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not defined as a bit field: ignored'
         AGO   .LOOP1
.LOOP1R2 ANOP
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG bit has no known location: ignored'
         AGO   .LOOP1
.LOOP1R3 ANOP
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not a valid bitfield name: ignored'
         AGO   .LOOP1
.LOOP1OK ANOP
.*
.* Validated bit-names and byte locations now in BIT() and LOC()
.* Empty entries may exist for erroneous operands.
.* Entries with equal byte locations will be taken together,
.* and processed entries will be wiped.
.* Arguments are taken together by ORing their bit masks.
&LABEL   LABEL ,
.*
&I       SETA  0                       * I indexes LOC/BIT
.LOOP2   ANOP  ,                       * For all entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop
&_LOC    SETC  '&LOC(&I)'              * Extract byte location
         AIF   (K'&_LOC EQ 0).LOOP2    * Skip processed records
&ARG     SETC  '&BIT(&I)'              * Create argument from bit names
&MASKVAL SETA  L'&BIT(&I)              * Length attrib = mask value!
.*
&J       SETA  &I                      * J indexes LOC/BIT (inner loop)
.LOOP3   ANOP  ,                       * For all remaining entries
&J       SETA  &J+1                    * Point next entry
         AIF   (&J GT N'&SYSLIST).LOOP3OK * At end: quit loop
         AIF   ('&LOC(&J)' NE '&_LOC').LOOP3 * Skip mismatch
&VAL     SETA  L'&BIT(&J)              * Retrieve mask bit value
&MASKVAL SETA  (&MASKVAL OR &VAL)      * Take bit masks together
&ARG     SETC  '&MASKVAL'              * Create completed argument
&LOC(&J) SETC  ''                      * Wipe entry
         AGO   .LOOP3
.LOOP3OK ANOP  ,                       * ARG is now complete
.*
.* Generate NI instruction to turn bits off
         NI    &_LOC,ALLBITS-&ARG      * Turn bit(s) off
         AGO   .LOOP2
.LOOP2OK ANOP
.*
.MEND    MEND
./ ADD NAME=SETON    0100-20096-20096-0111-00194-00194-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Turn on a bit in a bit-field
.*
&LABEL   SETON &ADR,                   * Address of bit-field          *
               &MASK                   * Bit field mask
.*
.* Syntax 1:
.* &ADR  specifies the location in storage where the bit-field resides
.*       must be in offset(register) notation, or a symbolic name.
.* &MASK specifies which bits are to be turned on
.*
.* Syntax 2:
.* &ADR  specifies the name of a DCL-declared bit. Any number of
.*       arguments may follow, but they all have to be DCL-declared
.*       bit names too.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC SETON                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLB  &BITS                   * On for syntax 2
         LCLA  &I                      * Index for SYSLIST
         LCLA  &J                      * Index for BIT and LOC
         LCLA  &MASKVAL                * Calculated mask value
         LCLA  &VAL                    * Mask value for any one bit
         LCLC  &ARG                    * 1 argument from SYSLIST
         LCLC  &ARG1                   * Using label preceding dot
         LCLC  &ARG2                   * Field name following dot
         LCLC  &LOC(5)                 * Locations with bits
         LCLC  &_LOC                   * Current location
         LCLC  &BIT(5)                 * Bit names
.*
.* Check the ADR parameter
         AIF   (K'&ADR NE 0).NOERR1
.ERR1A   MNOTE 8,'Missing argument(s)'
         MEXIT
.NOERR1  ANOP
.*
.* &ADR is a defined bit-field?
         AIF   (T'&ADR NE 'b').NOTABIT
&BITS    SETB  1
.NOTABIT ANOP
.*
.* Check the MASK parameter
         AIF   (&BITS).NOERR2
         AIF   (K'&MASK NE 0).NOERR2
.ERR2    MNOTE 8,'Mask of bits to turn on not specified'
         MEXIT
.NOERR2  ANOP
.*
.* Check nr of parameters
         AIF   (&BITS).NOERR3
         AIF   (N'&SYSLIST LE 2).NOERR3
.ERR3    MNOTE 4,'You cannot specify more than 1 mask with &ADR: remain*
               der ignored'
.NOERR3  ANOP
.*
.* Generate code for syntax 1
         AIF   (&BITS).CHKBITS
&LABEL   OI    &ADR,&MASK              * Turn bit(s) on
         MEXIT
.*
.* Check all bit-names in &SYSLIST
.CHKBITS ANOP
&I       SETA  0                       * I is index to SYSLIST
.LOOP1   ANOP  ,                       * Loop thru all SYSLIST entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
&ARG     SETC  '&SYSLIST(&I)'          * Extract argument
         AIF   (T'&ARG NE 'b').LOOP1R1 * Wrong type: error 1
.* Retrieve bit mask value
&ARG1    SETC  ''                      * Assume no using label in &ARG
&ARG2    SETC  '&ARG'                  *
&J       SETA  ('&ARG2' FIND '.')      * Find location of dot
         AIF   (&J EQ 0).LOOP1ND       * No dot found in arg
         AIF   (&J EQ 1).LOOP1R3       * Starting dot is an error
&ARG1    SETC  '&ARG'(1,&J-1)          * Extract using label
         AIF   (&J EQ K'&ARG).LOOP1R3  * Trailing dot is an error
&ARG2    SETC  '&ARG'(&J+1,*)          * Extract field name
.LOOP1ND ANOP  ,                       * ARG2 now contans field name
         GBLC  &(BXA_BITF_&ARG2)       * Name for byte location
         AIF   (K'&(BXA_BITF_&ARG2) EQ 0).LOOP1R2 * No location: error2
&BIT(&I) SETC  '&ARG2'                 * Put bit name in table
&LOC(&I) SETC  '&(BXA_BITF_&ARG2)'     * And byte location too
         AIF   (K'&ARG1 EQ 0).LOOP1    * Unlabeled: ok
&LOC(&I) SETC  '&ARG1'.'.&LOC(&I)'     * Prefix with label
         AGO   .LOOP1                  *
.*
.LOOP1R1 ANOP
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not defined as a bit field: ignored'
         AGO   .LOOP1
.LOOP1R2 ANOP
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG bit has no known location: ignored'
         AGO   .LOOP1
.LOOP1R3 ANOP
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'&ARG is not a valid bitfield name: ignored'
         AGO   .LOOP1
.LOOP1OK ANOP
.*
.* Validated bit-names and byte locations now in BIT() and LOC()
.* Empty entries may exist for erroneous operands.
.* Entries with equal byte locations will be taken together,
.* and processed entries will be wiped.
.* Arguments are taken together by ORing their bit masks.
&LABEL   LABEL ,
.*
&I       SETA  0                       * I indexes LOC/BIT
.LOOP2   ANOP  ,                       * For all entries
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop
&_LOC    SETC  '&LOC(&I)'              * Extract byte location
         AIF   (K'&_LOC EQ 0).LOOP2    * Skip processed records
&ARG     SETC  '&BIT(&I)'              * Create argument from bit name
&MASKVAL SETA  L'&BIT(&I)              * Length attrib = mask value!
.*
&J       SETA  &I                      * J indexes LOC/BIT (inner loop)
.LOOP3   ANOP  ,                       * For all remaining entries
&J       SETA  &J+1                    * Point next entry
         AIF   (&J GT N'&SYSLIST).LOOP3OK * At end: quit loop
         AIF   ('&LOC(&J)' NE '&_LOC').LOOP3 * Skip mismatch
&VAL     SETA  L'&BIT(&J)              * Retrieve mask bit value
&MASKVAL SETA  (&MASKVAL OR &VAL)      * Take bit masks together
&ARG     SETC  '&MASKVAL'              * Create completed argument
&LOC(&J) SETC  ''                      * Wipe entry
         AGO   .LOOP3                  *
.LOOP3OK ANOP  ,                       * ARG is now complete
.*
.* Generate OI instruction to turn bits on
         OI    &_LOC,&ARG
         AGO   .LOOP2
.LOOP2OK ANOP
.*
.MEND    MEND
./ ADD NAME=SNAPHDR  0100-20096-20096-0111-00094-00094-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates a header-text for use with STRHDR operand of
.*  the SNAP macro
.*
&LABEL   SNAPHDR &TXT                  * Text for the header
.*
.* &LABEL Specifies the label for the text-parameter
.* &TXT   Specifies the text to be used, enclosed in single quotation
.*        marks
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC SNAPHDR                * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Check the LABEL parameter
         AIF   (K'&LABEL EQ 0).ERR1A
         AGO   .NOERR1
.ERR1A   MNOTE 8,'Label parameter not specified'
.NOERR1  ANOP
.*
.* Check the TXT parameter
         AIF   (K'&TXT EQ 0).ERR2A
         AIF   (K'&TXT LT 3).ERR2B
         AIF   ('&TXT'(1,1) NE '''').ERR2B
         AIF   ('&TXT'(N'&TXT,1) NE '''').ERR2B
         AGO   .NOERR2
.ERR2A   MNOTE 8,'TXT parameter not specified'
         MEXIT
.ERR2B   MNOTE 8,'TXT parameter not properly enclosed in quotes'
.NOERR2  ANOP
.*
.* Generate header text constant
&LABEL   DC    AL1(_HDR&SYSNDX-1)      * Length of text header
         DC    C&TXT                   * Text of SNAP header
_HDR&SYSNDX EQU *-&LABEL
.*
.MEND    MEND
./ ADD NAME=SNAPNTRY 0100-20096-20096-0111-00242-00242-00000-BIXSMAC 35
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates entries in the STORAGE and STRHDR lists and is
.*  intended for use with BXADBG00 only.
.* It is required that the calling program include the MAPSNAP macro.
.* There must be an active USING SNAPLIST,R2
.*           and an active USING SNAPHLIST,R3
.*
&LABEL   SNAPNTRY &ADR,                * Starting address or (reg)     *
               &LEN=,                  * Length or (reg)               *
               &END=,                  * (reg)                         *
               &HDR=                   * Address of header or (reg)
.*
.* &ADR   Specifies the starting address of a storage area to be dumped
.* &LEN   Specifies the length of the storage area to be dumped
.* &END   Specifies a register contining the end-address
.* &HDR   Specifies the address of the header for the storage area dump
.*        or specifies a the header, enclosed in single quotes
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC SNAPNTRY               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_USELBL(50)         * Using labels ...
         GBLA  &BXA_USEREG(50)         *   and their register indexes
         GBLC  &BXA_USEFLD(50)         *   and associated base fields
         GBLA  &BXA_USENDX0(5)         * Index into &BXA_USELBL/USEREG
         GBLA  &BXA_USENDX1(5)         * Index into &BXA_USELBL/USEREG
         GBLA  &BXA_USENDX             * Index into &BXA_USENDX1
         LCLA  &N                      * Index for BXA_USE...
         LCLC  &REG                    * Register name
         GBLC  &BXA_RD_RETVAL          * label of dup.data
         LCLC  &LAB                    * Label to use for RDATA tables
.*
.* Check the ADR parameter
         AIF   (K'&ADR EQ 0).ERR1A
         AIF   ('&ADR'(1,1) NE '(').NOERR1
         AIF   (N'&ADR EQ 0).ERR1B
         AIF   (N'&ADR GT 1).ERR1C
         AGO   .NOERR1
.ERR1A   MNOTE 8,'ADR parameter not specified'
         AGO   .NOERR1
.ERR1B   MNOTE 8,'ADR parameter contains no registers in sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'ADR parameter contains more than 1 register in sublis*
               t'
.NOERR1  ANOP
.*
.* Check the LEN parameter
         AIF   (K'&LEN EQ 0).NOERR2
         AIF   ('&LEN'(1,1) NE '(').NOERR2
         AIF   (N'&LEN EQ 0).ERR2B
         AIF   (N'&LEN GT 1).ERR2C
         AGO   .NOERR2
.ERR2B   MNOTE 8,'LEN parameter contains no registers in sublist'
         AGO   .NOERR2
.ERR2C   MNOTE 8,'LEN parameter contains more than 1 register in sublis*
               t'
.NOERR2  ANOP
.*
.* Check the HDR parameter
         AIF   (K'&HDR EQ 0).ERR3A
         AIF   ('&HDR'(1,1) EQ '(' AND N'&HDR EQ 0).ERR3B
         AIF   ('&HDR'(1,1) EQ '(' AND N'&HDR GT 1).ERR3C
         AIF   ('&HDR'(1,1) EQ '''' AND '&HDR'(K'&HDR,1) NE '''').ERR3D
         AIF   ('&HDR'(1,1) NE '''' AND '&HDR'(K'&HDR,1) EQ '''').ERR3D
         AGO   .NOERR3
.ERR3A   MNOTE 8,'HDR parameter not specified'
         AGO   .NOERR3
.ERR3B   MNOTE 8,'HDR parameter contains no registers in sublist'
         AGO   .NOERR3
.ERR3C   MNOTE 8,'HDR parameter contains more than 1 register in sublis*
               t'
         AGO   .NOERR3
.ERR3D   MNOTE 8,'HDR parameter not properly enclosed in parmaeters'
.NOERR3  ANOP
.*
.* Check the END parameter
         AIF   (K'&END EQ 0).NOERR4
         AIF   ('&END'(1,1) NE '(').ERR4A
         AIF   (N'&END EQ 0).ERR4B
         AIF   (N'&END GT 1).ERR4C
         AGO   .NOERR4
.ERR4A   MNOTE 8,'END parameter must specify a (reg)'
         AGO   .NOERR4
.ERR4B   MNOTE 8,'END parameter contains no registers in sublist'
         AGO   .NOERR4
.ERR4C   MNOTE 8,'END parameter contains more than 1 register in sublis*
               t'
.NOERR4  ANOP
.*
.* LEN and END are mutually exclusive, 1 must be specified
         AIF   (K'&LEN EQ 0 AND K'&END EQ 0).ERR5A
         AIF   (K'&LEN NE 0 AND K'&END NE 0).ERR5B
         AGO   .NOERR5
.ERR5A   MNOTE 8,'Either LEN or END parameter must be specified'
         AGO   .NOERR5
.ERR5B   MNOTE 8,'Cannot specify both LEN and END parameters'
.NOERR5  ANOP
.*
.* Generate start address or use (reg)
         AIF   ('&ADR'(1,1) EQ '(').ADR_REG
&LABEL   LA    R1,&ADR                 * Get start-address
         ST    R1,SNAPFROM             *  and put into list
         AGO   .ADR_OK
.ADR_REG ANOP
&LABEL   ST    &ADR(1),SNAPFROM        * Put pointer into list
         LR    R1,&ADR(1)              * Copy ptr to calculate end addr
.ADR_OK  ANOP
.*
.* Generate end address or use (reg)
         AIF   (K'&LEN NE 0).USELEN
         ST    &END(1),SNAPTO          * Put end-address into snaplist
         AGO   .ENDOK
.*
.USELEN  ANOP
         AIF   ('&LEN'(1,1) EQ '(').ENDR
         INC   R1,&LEN-1
         AGO   .ENDST
.ENDR    ANOP
         INC   R1,&LEN                 * Address area + 1
         DEC   R1                      * Decrement to point to end-byte
.ENDST   ANOP
         ST    R1,SNAPTO               *  and put into list
.ENDOK   ANOP
.*
.* Find pointer to SNAPLIST entry
&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Get pointer to first entry
.LOOP1   ANOP  ,                       * Search current part of tables
&N       SETA  &N+1                    * Point next entry
         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP1NF
         AIF   ('&BXA_USEFLD(&N)' NE 'SNAPLIST').LOOP1
&N       SETA  &BXA_USEREG(&N)-1       * Create reg.nr from index
&REG     SETC  'R&N'                   * Set up register name
         AGO   .LOOP1OK                * Quit loop
.LOOP1NF ANOP  ,
         MNOTE 8,'No USING established for SNAPLIST'
         MEXIT ,
.LOOP1OK ANOP  ,
.*
.* Increment pointer for list
         INC   &REG,SNAPLIST_LEN       * Point to next free entry
.*
.* Generate header address or use (reg)
         AIF   ('&HDR'(1,1) EQ '(').HDR_REG
         AIF   ('&HDR'(1,1) EQ '''').HDR_TXT
         L     R1,=AL4(&HDR)           * Get start-address
         ST    R1,SNAPHPTR             *  and put into list
         AGO   .HDR_OK
.HDR_REG ANOP
         ST    &HDR(1),SNAPHPTR        * Put pointer into list
         AGO   .HDR_OK
.HDR_TXT ANOP
.* The header-text will be defined using RDATA. If RDATA finds a
.* duplicate entry, it will replace that entry with an EQU. If this
.* is the case, we will use the original label. Since all remote data
.* is accessed thru an AL4(..)-literal this saves on literal pool size.
&LAB     SETC  '_HDR&SYSNDX'           * Label for the remote header
&LAB     RDATA SNAPHDR,&HDR,           * Define the header text        *
               RD_MODE=COND            *   unless pre-allocated
         AIF   (K'&BXA_RD_RETVAL EQ 0).LABOK * No duplicate: keep &LAB
&LAB     SETC  '&BXA_RD_RETVAL'        * Duplicate: use actual label
.LABOK   ANOP
         L     R1,=AL4(&LAB)           * Get start-address
         ST    R1,SNAPHPTR             *  and put into list
.HDR_OK  ANOP
.*
.* Find pointer to SNAPHLIST entry
&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Get pointer to first entry
.LOOP2   ANOP  ,                       * Search current part of tables
&N       SETA  &N+1                    * Point next entry
         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP2NF
         AIF   ('&BXA_USEFLD(&N)' NE 'SNAPHLIST').LOOP2
&N       SETA  &BXA_USEREG(&N)-1       * Create reg.nr from index
&REG     SETC  'R&N'                   * Set up register name
         AGO   .LOOP2OK                * Quit loop
.LOOP2NF ANOP  ,
         MNOTE 8,'No USING established for SNAPHLIST'
         MEXIT ,
.LOOP2OK ANOP  ,
.*
.* Increment pointer for header-list
         INC   &REG,SNAPHLIST_LEN      * Point to next free entry
.*
.MEND    MEND
./ ADD NAME=SPACE    0100-20096-20096-0112-00100-00100-00000-BIXSMAC 25
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's SPACE statement
.*
&LABEL   SPACE ,                       * Arguments in SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC SPACE                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLA  &I                      * Index into &SYSLIST
         LCLC  &ARG                    * 1 Argument from SYSLIST
         LCLC  &ARGS                   * Arguments from SYSLIST
.*
.* Check LABEL parameter
         AIF   (K'&LABEL EQ 0).NOERR1
         AIF   (&SYSNEST GT 1).NOERR1
.ERR1A   MNOTE 4,'No label parameter allowed with SPACE: label ignored'
.NOERR1  ANOP
.*
.* Build ARGS from &SYSLIST
&I       SETA  0                       * I indexes &SYSLIST
.LOOP1   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
         AIF   (K'&ARG GT 0 AND &I GT 1).ERR2A
&ARG     SETC  '&SYSLIST(&I)'          * Extract 1 argument
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AGO   .LOOP1
.ERR2A   MNOTE 4,'Only 1 argument allowed on SPACE: remainder ignored'
.LOOP1OK ANOP
         AIF   (K'&ARGS LT 2).ARGSOK
&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma
.ARGSOK  ANOP
.*
.* Generate _SPACE statement
         AIF   (K'&ARGS EQ 0).NOARGS
         _SPACE &ARGS
         MEXIT
.*
.NOARGS  ANOP
         _SPACE
.*
.MEND    MEND
./ ADD NAME=SPLIT    0100-20096-20096-0112-00163-00163-00000-BIXSMAC 25
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro splits a parameter string in its constituent parts
.*
.* The number of parameters found is returned in BXA_NUMVAL
.* The parameters are returned in BXA_PRM(n)
.*
&LABEL   SPLIT &INPUT                  * Parameter to be split
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC SPLIT                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLC  &BXA_PRM(3)             * Output parameters
         GBLA  &BXA_NUMVAL             * Nr of parameters found
         LCLC  &IN                     * Copy of INPUT
         LCLC  &C                      * Single character from input
         LCLC  &PRM(3)                 * Parameters found
         LCLA  &P                      * Index for BXA_PRM
         LCLA  &I,&J                   * Work var.
         LCLA  &PAR                    * Nr of parentheses levels
         LCLA  &COMMA                  * Comma location
         LCLB  &STRING                 * On if scanning within quotes
.*
.* Input string is empty?
         AIF   (K'&INPUT LE 0).EXIT    * Skip all if input empty
.*
.* Remove leading blanks
&IN      SETC  '&INPUT'                * Copy input string
.LOOP0   ANOP  ,                       *
         AIF   ('&IN'(1,1) NE ' ').LOOP0OK
         AIF   (K'&IN LE 1).EXIT       * Skip all if nothing remains
&IN      SETC  '&IN'(2,*)              * Remove leading blank
         AGO   .LOOP0                  *
.LOOP0OK ANOP  ,                       *
.*
.* Remove trailing commas
.LOOP1   ANOP  ,                       *
         AIF   ('&IN'(K'&IN,1) NE ',').LOOP1OK
         AIF   (K'&IN LE 1).EXIT       * Skip all if nothing remains
&IN      SETC  '&IN'(1,K'&IN-1)        * Remove trailing comma
         AGO   .LOOP1                  *
.LOOP1OK ANOP  ,                       *
.*
.* Arguments are passed as a single string without trailing commas.
.* Decompose the INPUT field in its constituent parameters.
.* Discard trailing comments - if any.
&P       SETA  1                       * First output string is target
.LOOP2   ANOP  ,                       * Search next character
&I       SETA  ('&IN' FIND '(, '')')   * Locate comma or parenthesis
         AIF   (&I EQ 0).LOOP2ND       * End: go copy remainder
&C       SETC  '&IN'(&I,1)             * Extract character found
         AIF   ('&C' EQ '''').LOOP2QU  * Quote
         AIF   (&STRING).LOOP2CP       * Within string: just copy
         AIF   ('&C' EQ '(').LOOP2LP   * Left Parenthesis
         AIF   ('&C' EQ ')').LOOP2RP   * Right Parenthesis
         AIF   ('&C' EQ ' ').LOOP2SP   * Space
.* Must be a comma: check parentheses level
         AIF   (&PAR GT 0).LOOP2CP     * Within parentheses: copy
         AIF   (&I EQ 1).LOOP2C1       * Leading comma?
&PRM(&P) SETC  '&PRM(&P)'.'&IN'(1,&I-1) * Up to & excluding comma
.LOOP2C1 ANOP  ,                       *
&IN      SETC  '&IN'(&I+1,*)           * Remainder remains in IN
&P       SETA  &P+1                    * Point next parameter
         AGO   .LOOP2                  *
.*
.LOOP2LP ANOP  ,                       * Found Left Parenthesis
&PAR     SETA  &PAR+1                  * Increment parenthesis level
         AGO   .LOOP2CP                * Go copy up to parenthesis
.LOOP2RP ANOP  ,                       * Found Right Parenthesis
&PAR     SETA  &PAR-1                  * Increment parenthesis level
         AGO   .LOOP2CP                * Go copy up to parenthesis
.LOOP2SP ANOP  ,                       * Found a space
&IN      SETC  '&IN'(1,&I-1)           * Discard all comments
         AGO   .LOOP2ND                * Go copy remainder
.LOOP2QU ANOP  ,                       * Found a quote
&STRING  SETB  (&STRING XOR 1)         * Flip String status
         AGO   .LOOP2CP                * Go copy up to quote
.LOOP2CP ANOP  ,                       * Copy part of input
         AIF   (&I GE K'&IN).LOOP2ND   * Copy up to end of string?
&PRM(&P) SETC  '&PRM(&P)'.'&IN'(1,&I)  * Up to & including delimiter
&IN      SETC  '&IN'(&I+1,*)           * Remainder remains in IN
         AGO   .LOOP2                  *
.LOOP2ND ANOP  ,                       *
&PRM(&P) SETC  '&PRM(&P)'.'&IN'        * Copy remainder of input
.*
.* Copy results to global variables
.EXIT    ANOP  ,                       *
&BXA_NUMVAL SETA &P                    * Nr of parms found
&I       SETA  0                       * Index for BXA_PRM
.LOOP3   ANOP  ,                       *
&I       SETA  &I+1                    * Point next parm
         AIF   (&I GT &P).LOOP3OK      * End-of-parmlist?
&BXA_PRM(&I) SETC '&PRM(&I)'           * Copy parameter
         AGO   .LOOP3                  *
.LOOP3OK ANOP  ,                       *
.*
.* Wipe any remaining entries in BXA_PRM
&I       SETA  &P                      * Point last valid
.LOOP4   ANOP  ,                       *
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&BXA_PRM).LOOP4OK * End-of-table?
&BXA_PRM(&I) SETC ''                   * Wipe parameter
         AGO   .LOOP4                  *
.LOOP4OK ANOP  ,                       *
.*
.MEND    MEND
./ ADD NAME=STA24    0100-20096-20096-0112-00108-00108-00000-BIXSMAC 25
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* Store a 24-bit address from a register into memory
.*
&LABEL   STA24 &REG,                   * Register to store             *
               &LOC,                   * Location of address           *
               &MASK                   * Mask for STCM (default=YNNN)
.*
.* &REG  specifies the register to load
.* &LOC  specifies the location of the address to be loaded
.* &MASK specifies which bytes of the register are to be loaded
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC STA24                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         LCLC  &_MASK
.*
.* Check the REG parameter
         AIF   (K'&REG NE 0).NOERR1A
.ERR1A   MNOTE 8,'No register specified'
         AGO   .NOERR1
.NOERR1A ANOP
         AIF   ('&REG'(1,1) NE '(').NOERR1
         AIF   (N'&REG EQ 0).ERR1B
         AIF   (N'&REG GT 1).ERR1C
         AGO   .NOERR1
.ERR1B   MNOTE 8,'No register specified within sublist'
         AGO   .NOERR1
.ERR1C   MNOTE 8,'More than 1 register specified in sublist'
.NOERR1  ANOP
.*
.* Check the LOC parameter
         AIF   (K'&LOC NE 0).NOERR2
.ERR2    MNOTE 8,'LOC parameter not specified'
.NOERR2  ANOP
.*
.* Check the MASK parameter
&_MASK   SETC  '&MASK'
         AIF   (K'&MASK NE 0).MASKOK
&_MASK   SETC  'NYYY'
.MASKOK  ANOP
.*
.* Check the number of parameters
         AIF   (N'&SYSLIST LE 3).NOERR3
.ERR3    MNOTE 4,'Too many parameters specified: ignored'
.NOERR3  ANOP
.*
&LABEL   STCM  &REG,&_MASK,&LOC        * Save 24-bit address
.*
.MEND    MEND
./ ADD NAME=SYSPARM  0100-20096-20096-0112-00225-00225-00000-BIXSMAC 25
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* The assembler program accepts as a JCL-parameter a specification
.* for the variable SYSPARM. The value entered in the JCL will be
.* passed to a global set symbol named &SYSPARM. The value specified
.* in the JCL is passed as a single string. This macro decomposes the
.* string into separate parameters. Then the parameters are checked
.* and handled. 7 different keywords are allowed:
.* - DBG     : Generate debugging code (DBG-macro expansion)
.* - NODBG   : Do not generate debugging code
.* - NOSRLIST: Do not generate a list of subroutines
.* - SRLIST  : Generate a list of subroutines
.* - SRXREF  : Generate a cross reference of subroutines
.* - SHOWALL : Do not suppress any statement, report EJECT statements
.* - OPT     : Optimize generated code
.* - NOOPT   : Do not optimize generated code
.* - LICENSE=...... Name and version of the license for this software
.* - LICSTAT=IAGREE If you agree to the license terms
.*
.* The default is: NODBG,SRXREF,NOOPT,LICENSE(NONE),LICSTAT(NOTOK)
.* If conflicting options are entered, the last one specified will
.* take precedence.
.*
         SYSPARM
.*
.* Declare variables
.*
         GBLB  &SP_DBG                 * On for DBG
         GBLB  &SP_OPT                 * On for OPT
         GBLB  &SP_SRLIST              * On for SRLIST or SRXREF
         GBLB  &SP_SRXREF              * On for SRXREF
         GBLB  &SP_SHOWALL             * On for SHOWALL
         GBLB  &SP_LICOK               * On if valid license accepted
         GBLC  &SP_LICENSE             * License name / version
         GBLC  &SP_LICSTAT             * License status
         LCLC  &P(5)                   * Array to contain parms
         LCLA  &I                      * Character index for &SYSPARM
         LCLA  &J                      * Character index for &PARM
         LCLA  &N                      * Next character to extract
         LCLA  &X                      * Index into array &P
         LCLC  &PARM                   * Current entry from array &P
         LCLC  &NAME                   * Name contained in &PARM
         LCLC  &VALUE                  * Value contained in &PARM
.*
.* Set defaults
.*
&SP_DBG  SETB  0                       * Default: no debugging code
&SP_OPT  SETB  0                       * Default: no optimization
&SP_SRLIST SETB 1                      * Default: produces subroutine
&SP_SRXREF SETB 1                      *          cross reference
&SP_LICOK  SETB 0                      * Default: license not ok
&SP_LICENSE SETC 'NONE'                * Default license name
&SP_LICSTAT SETC 'NOTOK'               * Default license status
         AIF   (K'&SYSPARM EQ 0).MEND
.*
.* First the sysparm string is to be split into substrings
.*
&I       SETA  0                       * Initialize for
&N       SETA  1                       *   extraction of parameters
&X       SETA  1                       *   from &SYSPARM
.LOOP1   ANOP
&I       SETA  &I+1                    * Increment character index
         AIF   (&I GT K'&SYSPARM).LOOP1OK * end of string
         AIF   ('&SYSPARM'(&I,1) NE ',').LOOP1 * end of substring
&P(&X)   SETC  '&SYSPARM'(&N,&I-&N)    * Extract substring
&N       SETA  &I+1                    * Point to next substring
&X       SETA  &X+1                    * Increment substring counter
         AGO   .LOOP1                  * Go check next character
.LOOP1OK ANOP
&P(&X)   SETC  '&SYSPARM'(&N,&I-&N)    * Extract last substring
.*
.* Now check that keywords are valid
.* &X now is count of parms to check
&I       SETA  0                       * Index into array &P
.LOOP2   ANOP
&I       SETA  &I+1                    * Point to next parameter
         AIF   (&I GT &X).LOOP2OK      * End of loop
&PARM    SETC  '&P(&I)'                * Copy current entry
         AIF   ('&PARM' EQ '').LOOP2   * Skip empty parameter
         AIF   ('&PARM' EQ 'DBG').DBG  * Set debug mode on
         AIF   ('&PARM' EQ 'NODBG').NODBG * Turn debug mode off
         AIF   ('&PARM' EQ 'OPT').OPT  * Set optimization on
         AIF   ('&PARM' EQ 'NOOPT').NOOPT * Turn optimization off
         AIF   ('&PARM' EQ 'SHOWALL').SHOWALL * Set SHOWALL mode on
         AIF   ('&PARM' EQ 'SRLIST').SRLIST * Set SRLIST mode on
         AIF   ('&PARM' EQ 'SRXREF').SRXREF * Set SRXREF mode on
         AIF   ('&PARM' EQ 'NOSRLIST').NOSRLIST * Turn SRLIST off
.* Check to see if parameter can be split into name=value pair
&J       SETA  ('&PARM' FIND '=')      * Contains =sign?
         AIF   (&J EQ 0).LOOP2ER       * No =sign: signal error
&NAME    SETC  '&PARM'(1,&J-1)         * Extract parameter name
&VALUE   SETC  '&PARM'(&J+1,*)         * Extract parameter value
         AIF   ('&NAME' EQ 'LICENSE').LICENSE * Select license id
         AIF   ('&NAME' EQ 'LICSTAT').LICSTAT * Register license status
.LOOP2ER MNOTE 8,'Invalid sysparm operand: &PARM'
         AGO   .LOOP2                  * Go try next parameter
.*
.DBG     ANOP
&SP_DBG  SETB  1                       * Enable debugging
         AGO   .LOOP2
.*
.NODBG   ANOP
&SP_DBG  SETB  0                       * Disable debugging
         AGO   .LOOP2
.*
.OPT     ANOP
&SP_OPT  SETB  1                       * Enable optimization
         AGO   .LOOP2
.*
.NOOPT   ANOP
&SP_OPT  SETB  0                       * Disable optimization
         AGO   .LOOP2
.*
.SHOWALL ANOP
&SP_SHOWALL SETB 1                     * Do not suppress any statement
         AGO   .LOOP2
.*
.SRLIST  ANOP
&SP_SRLIST SETB 1                      * Create a list of subroutines
&SP_SRXREF SETB 0                      * But no cross reference
         AGO   .LOOP2
.*
.SRXREF  ANOP
&SP_SRLIST SETB 1                      * Create a list of subroutines
&SP_SRXREF SETB 1                      * And a cross reference
         AGO   .LOOP2
.*
.NOSRLIST ANOP
&SP_SRLIST SETB 0                      * Create no list of subroutines
&SP_SRXREF SETB 0                      * And no cross reference
         AGO   .LOOP2
.*
.LICENSE ANOP
&SP_LICENSE SETC '&VALUE'              * Register license name
         AGO   .LOOP2
.*
.LICSTAT ANOP
&SP_LICSTAT SETC '&VALUE'              * Register license status
         AGO   .LOOP2
.LOOP2OK ANOP  ,
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
.*
.* Check that a valid license id was entered
         AIF   ('&SP_LICENSE' EQ 'BXAPL1.0').LICOK
         AIF   ('&SP_LICENSE' EQ 'GPL2.0').LICOK
         MNOTE 4,'License id &SP_LICENSE entered: not valid, BXA macros*
                are disabled'
         AGO   .MEND
.LICOK   ANOP  ,
.*
.* Check whether the license was accepted
         AIF   ('&SP_LICSTAT' EQ 'IAGREE').LICSOK
         MNOTE 4,'License status &SP_LICSTAT entered: you did not agree*
                to the terms in license &SP_LICENSE, BXA macros are dis*
               abled'
         AGO   .MEND
.LICSOK  ANOP  ,
         MNOTE 1,'For usage of the BXA macros you have agreed to the te*
               rms of license &SP_LICENSE'
***********************************************************************
**
** For the terms and conditions of the license you have selected
** please check the text of the license, which should be in the
** macro library. Alternatively, you can find a copy on our site:
** GPL2.0   - http://www.hlasm.com/english/gpl
** BXAPL1.0 - http://www.hlasm.com/english/license
**
***********************************************************************
&SP_LICOK  SETB 1                      * License was accepted
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.MEND    MEND
./ ADD NAME=TRT      0100-20096-20096-0112-00167-00167-00000-BIXSMAC 25
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the TRT instruction
.*
&LABEL   TRT   ,                       * Parameters in SYSLIST
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC TRT                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLA  &BXA_NUMVAL             * Output from CHKREG
         GBLC  &BXA_PRM(3)             * Parameters
         GBLB  &BXA_USED_REGS(16)      * USE status of registers 0-15
         LCLC  &FROM                   * Second parameter
         LCLC  &TO                     * First parameter
         LCLC  &_FROMD                 * Source displacement value
         LCLC  &_FROMB                 * Source base register
         LCLC  &_TOD                   * Destination displacement value
         LCLC  &_TOL                   * Destination length
         LCLC  &_TOB                   * Destination base register
         LCLA  &I                      * Work var.
         LCLC  &TXT                    * Text variable for errors
         LCLA  &REG1                   * To register number
         LCLA  &REG2                   * From register number
.*
.* Extract TO and FROM from SYSLIST
&TO      SETC  '&SYSLIST(1)'
&FROM    SETC  '&SYSLIST(2)'
.*
.* If FROM is not specified try to split the TO field
         AIF   (K'&FROM NE 0).NOSPLIT  *
         SPLIT &TO                     *
&TO      SETC  ''                      *
         AIF   (&BXA_NUMVAL LT 1).NOSPLIT
&TO      SETC  '&BXA_PRM(1)'           * TO field is first parameter
         AIF   (&BXA_NUMVAL LT 2).NOSPLIT
&FROM    SETC  '&BXA_PRM(2)'           * FROM field is second parameter
.NOSPLIT ANOP  ,                       *
.*
.* Decompose FROM field
         DISSECT DB,&FROM              *
&_FROMD  SETC  '&BXA_PRM(1)'           * Displacement
&_FROMB  SETC  '&BXA_PRM(2)'           * Base register
.*
.* Decompose TO field
         DISSECT DLB,&TO               *
&_TOD    SETC  '&BXA_PRM(1)'           * Displacement
&_TOL    SETC  '&BXA_PRM(2)'           * Length
&_TOB    SETC  '&BXA_PRM(3)'           * Base
.*
.* Check the destination field
         AIF   (K'&_TOD NE 0).NOERR1   * Must not be empty
.ERR1A   MNOTE 8,'First argument missing or invalid'
.NOERR1  ANOP  ,                       *
.*
.* Check the Destination register
         AIF   (K'&_TOB EQ 0).NOERR2   * May be empty
         CHKREG &_TOB,g                * A register was specified?
         AIF   (&BXA_RC EQ 8).ERR2B    * Not a register
&REG1    SETA  &BXA_NUMVAL             * Save register number
         AIF   (&BXA_RC EQ 0).NOERR2   * This is a defined register
.* BXA_RC = 4: a  literal number was specified
         AIF   (&SYSNEST EQ 1).ERR2C   * TRT occurred in open code?
         AGO   .NOERR2                 *
.ERR2A   MNOTE 8,'Missing destination register'
         AGO   .NOERR2                 *
.ERR2B   ANOP  ,                       *
&TXT     SETC  (DOUBLE '&_TOB')        *
         MNOTE 4,'&TXT is not a valid general purpose register'
         AGO   .NOERR2                 *
.ERR2C   MNOTE 4,'You should use a register in stead of &_TOB'
.NOERR2  ANOP  ,                       *
.*
.* Check the FROM parameter
         AIF   (K'&_FROMD GT 0).NOERR3 * Displacement specified?
.ERR3A   MNOTE 4,'Second argument missing or invalid'
.NOERR3  ANOP  ,                       *
.*
.* Check the Source base register
         AIF   (K'&_FROMB EQ 0).NOERR4 * Omitted?
         CHKREG &_FROMB,g              * A register was specified?
         AIF   (&BXA_RC EQ 8).ERR4A    * Not a register
&REG2    SETA  &BXA_NUMVAL             * Save nr of specified register
         AIF   (&BXA_RC EQ 0).NOERR4   * This is a real register
.* BXA_RC = 4: a  literal number was specified
         AIF   (&SYSNEST EQ 1).ERR4B   * TRT occurred in open code?
         AGO   .NOERR4                 *
.ERR4A   ANOP  ,                       *
&TXT     SETC  (DOUBLE '&_FROMB')      *
         MNOTE 4,'&TXT is not a valid general purpose register'
         AGO   .NOERR4                 *
.ERR4B   MNOTE 4,'You should use a register in stead of &_FROMB'
.NOERR4  ANOP  ,                       *
.*
.* Check number of parameters
         AIF   (N'&SYSLIST LE 2).NOERR5
.ERR5A   MNOTE 4,'Expected two arguments: remainder ignored'
.NOERR5  ANOP  ,
.*
.* Check that registers 1 and 2 are not currently in use
         AIF   (NOT &BXA_USED_REGS(2)).NOERR6A * R1 available?
.ERR6A   MNOTE 4,'Register 1 will be modified but is not available'
.NOERR6A ANOP  ,                       *
         AIF   (NOT &BXA_USED_REGS(3)).NOERR6B * R2 available?
.ERR6B   MNOTE 4,'Register 2 will be modified but is not available'
.NOERR6B ANOP  ,                       *
.*
.* Generate code with indentation
&LABEL   GEN   _TRT,&TO,&FROM
.*
.MEND    MEND
./ ADD NAME=TRTAB    0100-20096-20096-0112-00356-00356-00000-BIXSMAC 25
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro generates tables for use wit TR and/or TRT instructions
.*
&LABEL   TRTAB &TYPE,                  * Base type of table            *
               &CHARS=                 * Other valid characters
.*
.* &TYPE:  UC       for uppercase characters (A-Z)
.*         LC       for lowercase characters (a-z)
.*         ALPHA    for lower and/or uppercase characters (A-Z, a-z)
.*         DIGITS   for decimal digits (0-9)
.*         HEX      for hex digits (0-9, A-F)
.*         NOT      for anything except specified &CHARS
.*         NOTUC    for anything except uppercase
.*         NOTLC    for anything except lowercase
.*         NOTALPHA for anything except upper and/or lowercase chars
.*         NOTDIGIT for anything except decimal digits
.*         NOTHEX   for anything except hex digits
.*         TOHEX    for translation from X'00'-X'0F' to readable hex
.*         TOLOWER  for translation from uppercase to lowercase
.*         TOUPPER  for translation from lowercase to uppercase
.* &CHARS: a sublist of allowable characters, decimal codes, or hex
.*         codes in the range 0-255 (X'00'-X'FF'). In singles or in
.*         pairs for translation.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC TRTAB                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare locals
         LCLC  &UC,&LC,&DIG,&NOT,&TOHEX
.*
.* Check the validity of the LABEL parameter
         AIF   (K'&LABEL NE 0).NOERR1
ERROR1   MNOTE 8,'Missing label parameter on TRTAB macro'
.NOERR1  ANOP
.*
.* Check validity of TYPE pararmeter
         AIF   ('&TYPE' EQ 'UC').UC
         AIF   ('&TYPE' EQ 'LC').LC
         AIF   ('&TYPE' EQ 'ALPHA').ALPHA
         AIF   ('&TYPE' EQ 'DIGITS').DIGITS
         AIF   ('&TYPE' EQ 'HEX').HEX
         AIF   ('&TYPE' EQ 'NOT').NOT
         AIF   ('&TYPE' EQ 'NOTUC').NOTUC
         AIF   ('&TYPE' EQ 'NOTLC').NOTLC
         AIF   ('&TYPE' EQ 'NOTALPHA').NOTALPHA
         AIF   ('&TYPE' EQ 'NOTDIGIT').NOTDIGIT
         AIF   ('&TYPE' EQ 'NOTHEX').NOTHEX
         AIF   ('&TYPE' EQ 'TOHEX').TOHEX
         AIF   ('&TYPE' EQ 'TOLOWER').TOLOWER
         AIF   ('&TYPE' EQ 'TOUPPER').TOUPPER
         AIF   ('&TYPE' EQ '').NOTYPE
         MNOTE 8,'Invalid TYPE specified on TRTAB macro'
         MEXIT
.*
.* Set locals, depending on TYPE parameter
.UC      ANOP
&UC      SETC  'UC'
         AGO   .NOTYPE
.LC      ANOP
&LC      SETC  'LC'
         AGO   .NOTYPE
.ALPHA   ANOP
&UC      SETC  'UC'
&LC      SETC  'LC'
         AGO   .NOTYPE
.DIGITS  ANOP
&DIG     SETC  'DIG'
         AGO   .NOTYPE
.HEX     ANOP
&UC      SETC  'HEX'
&DIG     SETC  'DIG'
         AGO   .NOTYPE
.NOT     ANOP
&NOT     SETC  'YES'
         AGO   .NOTYPE
.NOTUC   ANOP
&UC      SETC  'UC'
&NOT     SETC  'YES'
         AGO   .NOTYPE
.NOTLC   ANOP
&LC      SETC  'LC'
&NOT     SETC  'YES'
         AGO   .NOTYPE
.NOTALPHA ANOP
&UC      SETC  'UC'
&LC      SETC  'LC'
&NOT     SETC  'YES'
         AGO   .NOTYPE
.NOTDIGIT ANOP
&DIG     SETC  'DIG'
&NOT     SETC  'YES'
         AGO   .NOTYPE
.NOTHEX  ANOP
&UC      SETC  'HEX'
&DIG     SETC  'DIG'
&NOT     SETC  'YES'
         AGO   .NOTYPE
.TOHEX   ANOP
&TOHEX   SETC  'YES'
         AGO   .NOTYPE
.TOLOWER ANOP
&UC      SETC  'LC'
&LC      SETC  'LC'
         AGO   .NOTYPE
.TOUPPER ANOP
&UC      SETC  'UC'
&LC      SETC  'UC'
         AGO   .NOTYPE
.NOTYPE  ANOP
.*
.* Variable NOT must be either YES or NO
         AIF   ('&NOT' EQ 'YES').NOTOK
&NOT     SETC  'NO'
.NOTOK   ANOP
.*
         PUSH  PRINT
         PRINT NODATA
.*
.* Pre-fill table, depending on NOT-parameter
         AIF   ('&NOT' EQ 'YES').LABELNO
&LABEL   DC    256X'00'                * All codes invalid, except:
         AGO   .LABELOK
.LABELNO ANOP
&LABEL   DC    256X'FF'                * All codes valid, except:
.LABELOK ANOP
.*
.* Generate allowed uppercase characters
         AIF   ('&UC' NE 'HEX').NOTUCHEX
         AIF   ('&NOT' EQ 'YES').UCHEXNO
         ORG   &LABEL+C'A'             * Starting with 'A'
         DC    C'ABCDEF'               * 6 valid chars
         AGO   .NOTUCHEX
.UCHEXNO ANOP
         ORG   &LABEL+C'A'             * Starting with 'A'
         DC    6X'00'                  * 6 invalid chars
.NOTUCHEX ANOP
.*
         AIF   ('&UC' NE 'UC').NOTUCUC
         AIF   ('&NOT' EQ 'YES').UCUCNO
         ORG   &LABEL+C'A'             * Starting with 'A'
         DC    C'ABCDEFGHI'            * 9 valid chars
         ORG   &LABEL+C'J'             * Starting with 'J'
         DC    C'JKLMNOPQR'            * 9 more valid chars
         ORG   &LABEL+C'S'             * Starting with 'S'
         DC    C'STUVWXYZ'             * the last 8 valid chars
         AGO   .NOTUCUC
.UCUCNO  ANOP
         ORG   &LABEL+C'A'             * Starting with 'A'
         DC    9X'00'                  * 9 invalid chars
         ORG   &LABEL+C'J'             * Starting with 'J'
         DC    9X'00'                  * 9 more invalid chars
         ORG   &LABEL+C'S'             * Starting with 'S'
         DC    8X'00'                  * the last 8 invalid chars
.NOTUCUC ANOP
.*
         AIF   ('&UC' NE 'LC').NOTUCLC
         ORG   &LABEL+C'A'             * Starting with 'A'
         DC    C'abcdefghi'            * 9 valid chars
         ORG   &LABEL+C'J'             * Starting with 'J'
         DC    C'jklmnopqr'            * 9 more valid chars
         ORG   &LABEL+C'S'             * Starting with 'S'
         DC    C'stuvwxyz'             * the last 8 valid chars
.NOTUCLC ANOP
.*
.* Generate allowed lowercase characters
         AIF   ('&LC' NE 'LC').NOTLCLC
         AIF   ('&NOT' EQ 'YES').LCLCNO
         ORG   &LABEL+C'a'             * Starting with 'a'
         DC    C'abcdefghi'            * 9 valid chars
         ORG   &LABEL+C'j'             * Starting with 'j'
         DC    C'jklmnopqr'            * 9 more valid chars
         ORG   &LABEL+C's'             * Starting with 's'
         DC    C'stuvwxyz'             * the last 8 valid chars
         AGO   .NOTLCLC
.LCLCNO  ANOP
         ORG   &LABEL+C'a'             * Starting with 'a'
         DC    9X'00'                  * 9 invalid chars
         ORG   &LABEL+C'j'             * Starting with 'j'
         DC    9X'00'                  * 9 more invalid chars
         ORG   &LABEL+C's'             * Starting with 's'
         DC    8X'00'                  * the last 8 invalid chars
.NOTLCLC ANOP
.*
         AIF   ('&LC' NE 'UC').NOTLCUC
         ORG   &LABEL+C'a'             * Starting with 'a'
         DC    C'ABCDEFGHI'            * 9 valid chars
         ORG   &LABEL+C'j'             * Starting with 'j'
         DC    C'JKLMNOPQR'            * 9 more valid chars
         ORG   &LABEL+C's'             * Starting with 's'
         DC    C'STUVWXYZ'             * the last 8 valid chars
.NOTLCUC ANOP
.*
.* Generate allowed digit-characters
         AIF   ('&DIG' NE 'DIG').NOTDIG
         AIF   ('&NOT' EQ 'YES').DIGNO
         ORG   &LABEL+C'0'             * Starting with '0'
         DC    C'0123456789'           * 10 valid chars
         AGO   .NOTDIG
.DIGNO   ANOP
         ORG   &LABEL+C'0'             * Starting with '0'
         DC    10X'00'                 * 10 invalid chars
.NOTDIG  ANOP
.*
.* Generate allowed tohex-characters
         AIF   ('&TOHEX' NE 'YES').NOTTOHEX
         ORG   &LABEL                  * Starting with X'00'
         DC    C'0123456789ABCDEF'     * 16 valid chars
.NOTTOHEX ANOP ,                       *
.*
.* If &CHARS has no value, we're done
         AIF   (K'&CHARS EQ 0).ENDMAC
.*
.* &CHARS must be in sublist notation
         AIF   ('&CHARS'(1,1) EQ '(').NOERR2
.ERROR2  MNOTE 8,'CHARS parameter must be specified in sublist notation*
               '
.NOERR2  ANOP
.*
.* Initialize locals for looping thru the &CHARS table
         LCLA  &I
         LCLC  &ARG1,&ARG2
&I       SETA  0
.*
.* Loop thru all the CHARS-entries. Each entry is a self-defining term
.* or a sublist of two self-defining term. Each term should represent
.* a 1-byte value. If 1 term is defined, it will be translated unto
.* itself, otherwise the first term will be translated into the second.
.*
.LOOP    ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&CHARS).LOOPEND
.* ARG can be a single argument or a sublist of two arguments
         AIF   ('&CHARS(&I)'(1,1) EQ '(').SUBLIST
.* ARG is a single argument
&ARG1    SETC  '&CHARS(&I)'
&ARG2    SETC  ''
.* If NOT is specified, ARG2 must be X'00'
         AIF   ('&NOT' EQ 'NO').ARG_OK
&ARG2    SETC  'X''00'''
         AGO   .ARG_OK
.*
.SUBLIST ANOP
         AIF   (N'&CHARS(&I) EQ 0).ERROR3A
         AIF   (N'&CHARS(&I) EQ 1).ERROR3B
         AIF   (N'&CHARS(&I) GT 2).ERROR3C
         AGO   .NOERR3
.ERROR3A MNOTE 8,'Empty sublist on CHARS-parameter: ignored'
         AGO   .LOOP
.ERROR3B MNOTE 8,'Sublist with only one sub-parm on CHARS-parameter: ig*
               nored'
         AGO   .LOOP
.ERROR3C MNOTE 8,'Sublist on CHARS-parameter with more than 2 sub-parms*
               : ignored'
         AGO   .LOOP
.ERROR3D MNOTE 8,'Sublist on CHARS-parameter contains empty sub-paramet*
               er: ignored'
         AGO   .LOOP
.NOERR3  ANOP
.* ARG is a valid double argument
&ARG1    SETC  '&CHARS(&I,1)'
         AIF   (K'&ARG1 EQ 0).ERROR3D
&ARG2    SETC  '&CHARS(&I,2)'
         AIF   (K'&ARG2 EQ 0).ERROR3D
.ARG_OK  ANOP
.* If ARG1 has only 1 character, change it to C'x'
         AIF   (K'&ARG1 GT 1).ARG1OK1
&ARG1    SETC  'C'''.'&ARG1'.''''
.ARG1OK1 ANOP  ,
         AIF   ('&ARG1'(1,1) NE '''').ARG1OK2
&ARG1    SETC  'C'.'&ARG1'
.ARG1OK2 ANOP  ,
.* If ARG2 is empty, copy ARG1
         AIF   (K'&ARG2 GT 0).ARG2OK1
&ARG2    SETC  '&ARG1'
.ARG2OK1 ANOP  ,
.* If ARG2 has only 1 character, change it to C'x'
         AIF   (K'&ARG2 GT 1).ARG2OK2
&ARG2    SETC  'C'''.'&ARG2'.''''
.ARG2OK2 ANOP  ,
         AIF   ('&ARG2'(1,1) NE '''').ARG2OK3
&ARG2    SETC  'C'.'&ARG2'
.ARG2OK3 ANOP  ,
.*
.* Generate table entry
         ORG   &LABEL+&ARG1            * Translatable code
         DC    &ARG2                   * resulting code
.*
.* And go process next CHARS-entry
         AGO   .LOOP
.*
.LOOPEND ANOP
.ENDMAC  ANOP
* Reset program counter to end-of-table
         ORG
.*
         POP   PRINT
.*
.MEND    MEND
./ ADD NAME=USE      0100-20096-20096-0112-00456-00456-00000-BIXSMAC 25
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro sets up USING statements with labeled dependent USINGs
.* for all of its DCL-declared subfields.
.*
.* May either specify a 'normal' USE statement, which has either the
.*     lay-out of a labeled or unlabeled USING, or the lay-out of a
.*     labeled or unlabeled dependent USING.
.* May also specify a 'register' USE statement, which has no label and
.*     specifies only a register.
.* May also specify an 'automatic' USE statement, in which case
.*     only the label and the field to be set addressable are
.*     supplied. A labeled dependent USING will be generated. The
.*     field to be set addressable is identified by supplying the
.*     DSECT-name and the field-name within that DSECT, separated by a
.*     period.
.* Note: Automatically generated USE-statements for sub-structures are
.*     always normal USE-statements. Automatic USE-statements therefore
.*     are never generated automatically. An automatic USE-statement
.*     generates its own normal USE-statement automatically.
.*
&LABEL   USE   &DSECT,                 * Control block name            *
               &BASE,                  * Register (or field) for using *
               &START=,                * 1st addressable field         *
               &OVR=,                  * Overriding labels             *
               &SCOPE=LOCAL            * LOCAL/CALLED
.*
.* &LABEL specifies a USING label, to be used on the main USING
.*        generated to establish addressability to &DSECT
.* &DSECT specifies the control block to be set addressable.
.*        If specified as DSECTname.fieldname then a dependent using
.*        for that field in the specified DSECT will be generated. The
.*        label for the dependent using will be taken from the label
.*        parm in the USE-statement. For this type of USE-statement
.*        the parameters BASE, PRFX, START, and OVR are ignored.
.* &BASE  specifies either a register that points to &DSECT or a field
.*        that contains a control block of type &DSECT.
.* &START specifies the name of a field in the dsect, where
.*        addressability starts. If omitted, defaults to the control
.*        block name.
.* &OVR   specifies overriding labels as follows:
.*        OVR=((field,label),(field,label)...)
.*        If the specified field is a DCL-declared structure, then the
.*        specified label will override the USING-label specified on
.*        the DCL-statement. If the label field is omitted, an
.*        unlabeled dependent USING will be generated. If a *NOUSE
.*        is specified for the overriding label, the no USING will
.*        be generated for the specified field.
.* &SCOPE specifies the scope of the USE-statement:
.*        LOCAL  - valid until DROPped
.*        CALLED - valid for all subroutines called from the remainder
.*                 of this subroutine.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC USE                    * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &SP_SHOWALL             * Showall option activated?
         LCLC  &_START                 * Start of addressable area
         LCLA  &REG                    * Register number
         LCLB  &BASREG                 * Base is a register Y/N
         LCLB  &EQUREG                 * Base is an equated reg
         LCLC  &FLD                    * 1 entry from BXA_USE_FLD
         LCLC  &LBL                    * 1 entry from BXA_USE_LBL
         LCLC  &SDS                    * 1 entry from BXA_USE_SDS
         LCLC  &_OVR                   * 1 entry from OVR-parm
         LCLC  &OVR1(5)                * Field names from OVR-parm
         LCLC  &OVR2(5)                * Overriding labels from OVR
         LCLA  &I                      * index for &BXA_USE_...
         LCLA  &J                      * extra numeric var
         LCLA  &R                      * Index value for BXA_USED_REGS
         GBLC  &BXA_USE_DS(50)         * Enclosing DSECT names
         GBLC  &BXA_USE_FLD(50)        * Defined complex fields
         GBLC  &BXA_USE_LBL(50)        * Labels to be used
         GBLC  &BXA_USE_SDS(50)        * Enclosed DSECT names
         GBLC  &BXA_USEC_ROUT(50)      * Routines for SCOPE=CALLED
         GBLC  &BXA_USEC_ARGL(50)      * Labels for SCOPE=CALLED
         GBLC  &BXA_USEC_ARG1(50)      * CB-names for SCOPE=CALLED
         GBLC  &BXA_USEC_ARG2(50)      * Bases for SCOPE=CALLED
         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15
         GBLC  &BXA_USELBL(50)         * Labels of active USINGs
         GBLA  &BXA_USEREG(50)         * Associated registers
         GBLC  &BXA_USEFLD(50)         * And associated base fields
         GBLA  &BXA_USENDX0(5)         * Low valid pointer
         GBLA  &BXA_USENDX1(5)         * High valid pointer
         GBLA  &BXA_USENDX             * Current entry pointer
         GBLC  &BXA_SUBR               * Current subroutine or *MAIN
         GBLA  &BXA_NUMVAL             * Output from CHKREG
         LCLA  &DOTLOC                 * Location of dot in &DSECT
         LCLC  &_DSECT1                * Control block name before dot
         LCLC  &_DSECT2                * Field name following dot
.*
.* Check the SCOPE parameter
         AIF   ('&SCOPE' EQ 'LOCAL').NOERR8
         AIF   ('&SCOPE' EQ 'CALLED').NOERR8
.ERR8    MNOTE 8,'SCOPE-parameter must specify either LOCAL or CALLED'
.NOERR8  ANOP
.*
.* Check the DSECT parameter
         AIF   (K'&DSECT EQ 0).ERR1A   * Must not be empty
&DOTLOC  SETA  ('&DSECT' INDEX '.')    * Is there a dot in &DSECT?
         AIF   (&DOTLOC GT 0).NOERR1   * Ok: automatic use statement
         CHKREG &DSECT                 * Was a register specified?
         AIF   (&BXA_RC GT 4).NOERR1   * No: normal use statement
.* Should be a register use statement
         AIF   (K'&BASE GT 0).ERR1B    * Base? Coding error
         AIF   (K'&LABEL GT 0).ERR1C   * Label not allowed
         AIF   (K'&START GT 0).ERR1D   * START not allowed
         AIF   (K'&OVR GT 0).ERR1D     * OVR not allowed
         AGO   .REGUSE                 * Ok: register-USE
.ERR1A   MNOTE 8,'First operand missing (control block name)'
         MEXIT
.ERR1B   MNOTE 8,'You specified a register for a DSECT name'
         MEXIT
.ERR1C   MNOTE 4,'Label not allowed on a register-USE: ignored'
         AGO   .NOERR1
.ERR1D   MNOTE 8,'On a register-USE no parms but SCOPE are allowed'
.NOERR1  ANOP
.*
.* Check the BASE parameter
         AIF   (K'&BASE EQ 0).ERR2A    * Must not be empty
         AIF   (&DOTLOC GT 0).ERR2B    * Will be ignored
.* Should be a normal use statement
         CHKREG &BASE                  * A register was specified?
         AIF   (&BXA_RC EQ 8).NOERR2   * Not a reg: dependent USING
         AIF   (&BXA_RC EQ 0).EQUREG   * Ok: USE an undefined reg
.* NUMVAL = 4: a literal number 0-15 was specified
&REG     SETA  &BASE                   * Extract register number
         AGO   .USEREG
.*
.* &BASE is a known register: check its type
.EQUREG  ANOP  ,                       * Check EQUated register
&EQUREG  SETB  1                       * Indicate EQUated reg
         GBLC  &(BXA_REGT_&BASE)       * Declare type field for reg
         GBLA  &(BXA_REGN_&BASE)       * Declare number field for reg
&REG     SETA  &(BXA_REGN_&BASE)       * Extract register number
         AIF   ('&(BXA_REGT_&BASE)' NE 'g').ERR2C * Invalid reg type
.USEREG  ANOP  ,                       * Second operand valid register
&BASREG  SETB  1                       * Indicate basing on a reg
.*
.* The register is available?
         CHKREG &BASE,g                * Valid GPR?
         AIF   (&BXA_RC GT 4).ERR2D    * No: error
&R       SETA  &BXA_NUMVAL+1           * Increment reg to obtain index
         AIF   (&BXA_USED_REGS(&R)).ERR2E * In use!
.*
         AIF   (&REG NE 0).NOERR2      * Using Register 0?
         AIF   ('&DSECT' EQ 'PSA').NOERR2 * R0 can be used only for PSA
         AGO   .ERR2F
.*
.ERR2A   ANOP
         AIF   (&DOTLOC GT 0).NOERR2
         MNOTE 8,'Second operand missing (register or complex field nam*
               e)'
         MEXIT
.ERR2B   MNOTE 4,'BASE parameter ignored for automatic USE statement'
         AGO   .NOERR2
.ERR2C   MNOTE 8,'Register &BASE is not a general purpose register'
         MEXIT
.ERR2D   MNOTE 8,'&BASE is not a valid general purpose regiter'
         MEXIT
.ERR2E   MNOTE 8,'Register &BASE is currently not available'
         MEXIT
.ERR2F   MNOTE 8,'With register 0 you cannot address &DSECT'
         MEXIT
.NOERR2  ANOP
.*
.* Check number of parameters
         AIF   (N'&SYSLIST GT 2).ERR3A
         AIF   (&DOTLOC EQ 0).NOERR3
         AIF   (N'&SYSLIST GT 1).ERR3B
         AGO   .NOERR3
.ERR3A   MNOTE 4,'More than 2 parameters specified: ignored'
         AGO   .NOERR3
.ERR3B   MNOTE 4,'More than 1 parameter specified: ignored'
.NOERR3  ANOP
.*
.* Check the LABEL parameter
         AIF   (K'&LABEL EQ 0).NOERR4  *
&I       SETA  &BXA_USENDX0(&BXA_USENDX) * Start loop counter
.LOOP5   ANOP  ,                       * Search for active label
&I       SETA  &I+1                    * Point next active label
         AIF   (&I GT &BXA_USENDX1(&BXA_USENDX)).NOERR4 * Not found: ok
         AIF   ('&LABEL' NE '&BXA_USELBL(&I)').LOOP5 * Skip mismatch
.ERR4A   MNOTE 8,'Label &LABEL is currently active: use OVR parameter'
         MEXIT ,                       *
.NOERR4  ANOP  ,                       *
.*
.* Check the START parameter
         AIF   (&DOTLOC NE 0 AND K'&START NE 0).ERR5A
         AIF   (K'&START EQ 0).NOERR5
         AIF   ('&SCOPE' EQ 'CALLED').ERR5C
         AIF   (NOT &BASREG).ERR5B
         AGO   .NOERR5
.ERR5A   MNOTE 4,'START parameter ignored for automatic USE statement'
         AGO   .NOERR5
.ERR5B   MNOTE 8,'START specified, but second argument is not a registe*
               r'
         AGO   .NOERR5
.ERR5C   MNOTE 8,'START specified, not valid with SCOPE=CALLED'
.NOERR5  ANOP
.*
.* Check the OVR-parameter
         AIF   (K'&OVR EQ 0).NOERR7
         AIF   (&DOTLOC NE 0).ERR7H
         AIF   ('&SCOPE' EQ 'CALLED').ERR7I
         AIF   ('&OVR'(1,1) NE '(').ERR7A
         AIF   (N'&OVR EQ 0).ERR7B
.* Check all sub-parameters and copy to &OVR1 and &OVR2
&I       SETA  0
.LOOP0   ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&OVR).LOOP0OK
&_OVR    SETC  '&OVR(&I)'              * Copy i-th parameter
         AIF   (K'&_OVR EQ 0).ERR7C
         AIF   ('&_OVR'(1,1) NE '(').ERR7D
         AIF   (N'&OVR(&I) EQ 0).ERR7E
         AIF   (K'&OVR(&I,1) EQ 0).ERR7F
&OVR1(&I) SETC '&OVR(&I,1)'            * Copy field name
&OVR2(&I) SETC '&OVR(&I,2)'            * Copy label for using
         AIF   (N'&OVR(&I) GT 2).ERR7G
         AGO   .LOOP0                  * And process next entry
.LOOP0OK ANOP
         AGO   .NOERR7
.ERR7A   MNOTE 8,'OVR-parameter must be specified as a sublist'
         AGO   .NOERR7
.ERR7B   MNOTE 4,'OVR-parameter is specified with an empty sublist'
         AGO   .NOERR7
.ERR7C   MNOTE 4,'OVR-parameter contains empty sub-parameter'
         AGO   .LOOP0
.ERR7D   MNOTE 8,'OVR-parameter ''&_OVR'' is not enclosed in parenthese*
               s'
         AGO   .LOOP0
.ERR7E   MNOTE 4,'OVR-parameter ''&_OVR'' is an empty sub-parameter'
         AGO   .LOOP0
.ERR7F   MNOTE 8,'OVR-parameter ''&_OVR'' does not specify a field name*
                (first sub-parm)'
         AGO   .LOOP0
.ERR7G   MNOTE 4,'OVR-parameter ''&_OVR'' contains more than 2 sub-parm*
               s: remainder ignored'
         AGO   .LOOP0
.ERR7H   MNOTE 4,'OVR parameter ignored for automatic USE statement, us*
               e the label field instead'
         AGO   .NOERR7
.ERR7I   MNOTE 8,'OVR specified, not valid with SCOPE=CALLED'
.NOERR7  ANOP
.*
.* For automatic USE-statements the LABEL parameter must be supplied
         AIF   (&DOTLOC EQ 0).NOERR9
         AIF   (K'&LABEL GT 0).NOERR9
.ERR9    MNOTE 4,'LABEL-field must not be blank on an automatic USE'
.NOERR9  ANOP
.*
.* For SCOPE=CALLED insert parameters into tables
         AIF   ('&SCOPE' NE 'CALLED').LOCAL
&I       SETA  N'&BXA_USEC_ROUT+1      * Point to empty entry
&BXA_USEC_ROUT(&I) SETC '&BXA_SUBR'    * Set up new
&BXA_USEC_ARGL(&I) SETC '&LABEL'       *  entries in tables
&BXA_USEC_ARG1(&I) SETC '&DSECT'       *   for use by ENDUSE
&BXA_USEC_ARG2(&I) SETC '&BASE'        *    and BEGSR
.LOCAL   ANOP
.*
.* For automatic USE statements the field-name must be separated from
.* the DSECT name, and the field's DSECT must be located.
.*
         AIF   (&DOTLOC EQ 0).NORMAL   * No dot: normal USE
&_DSECT1 SETC  '&DSECT'(1,&DOTLOC-1)   * Extract control block name
&_DSECT2 SETC  '&DSECT'(&DOTLOC+1,*)   * Extract complex field name
&I       SETA  0                       * I indexes &BXA_USE_... arrays
.LOOP4   ANOP  ,                       * Search
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&BXA_USE_DS).LOOP4NF * At end: not found
         AIF   ('&BXA_USE_DS(&I)' NE '&_DSECT1').LOOP4 * Skip mismatch
         AIF   ('&BXA_USE_FLD(&I)' NE '&_DSECT2').LOOP4 * Skip mismatch
.* We found the entry we're looking for.
         AIF   ('&BXA_USE_LBL(&I)' NE '*NOUSE').LOOP4R1
&LABEL   USE   &BXA_USE_SDS(&I),&_DSECT2 * Set area addressable
         MEXIT
.LOOP4NF ANOP
         MNOTE 8,'Field &_DSECT2 in &_DSECT1 not defined with a DCL-sta*
               tement'
         MEXIT
.LOOP4R1 MNOTE 4,'Statement ignored: &_DSECT2 is always generated with *
               &_DSECT1'
         MEXIT
.*
.* Generate first USING
.NORMAL  ANOP  ,                       * Start for normal USE statement
&_START  SETC  '&START'
         AIF   (K'&_START NE 0).USING  * Use START if specified
&_START  SETC  '&DSECT'                * Otherwise use dsect name
.USING   ANOP
&LABEL   USING &_START,&BASE
.*
.* Now look up the dsect name used, to see if there are any dependent
.* USINGs to be generated.
&I       SETA  0                       * &I indexes &BXA_USE_... tables
.LOOP1   ANOP  ,                       * Search &BXA_USE_DS for &DSECT
&I       SETA  &I+1                    * Point next element
         AIF   (&I GT N'&BXA_USE_DS).LOOP1OK * At end-of-table quit
         AIF   ('&BXA_USE_DS(&I)' NE '&DSECT').LOOP1 * Skip mismatch
&FLD     SETC  '&BXA_USE_FLD(&I)'
&LBL     SETC  '&BXA_USE_LBL(&I)'
&SDS     SETC  '&BXA_USE_SDS(&I)'
.*
.* If the field-name in &FLD occurs in the OVR-parameter (OVR1-array)
.* then the USING label in &LBL must be overridden with the value in
.* the OVR2-array. Used-up entries in OVR1 must be removed, so
.* we can issue error messages for any overrides 'not used'
         AIF   (K'&OVR EQ 0).LOOP2OK
&J       SETA  0                       * Index for OVR1/OVR2
.LOOP2   ANOP  ,                       * Scan OVR1 until FLD found
&J       SETA  &J+1                    * Point next entry
         AIF   (&J GT N'&OVR1).LOOP2OK * On end: quit loop
         AIF   ('&FLD' NE '&OVR1(&J)').LOOP2 * Skip mismatch
&LBL     SETC  '&OVR2(&J)'             * Override default label
&OVR1(&J) SETC ''                      * Remove entry from table
.LOOP2OK ANOP  ,                       * Drop-thru on located entry
.*
.* If R13 is used as a base register and it has &DSECT specified with
.* an offset (presumably 16), and the sub-dsect to generate is BXASAVE,
.* then BXASAVE is to be replaced by SAVEAREA.
         AIF   (NOT &BASREG).LOOP1DO   * Not a register
         AIF   (&REG NE 13).LOOP1DO    * Not register 13
         AIF   ('&SDS' NE 'BXASAVE').LOOP1DO * Some other DSECT
&J       SETA  ('&START' INDEX '+')    * Position of '+' in START parm
         AIF   (&J EQ 0).LOOP1DO       * + not occurring
&SDS     SETC  'SAVEAREA'              * Replace BXASAVE with SAVEAREA
&FLD     SETC  '&START'                * Replace basing field as well
.*
.LOOP1DO ANOP  ,                       *
         AIF   ('&LBL' EQ '*NOUSE').LOOP1 * Skip non-automatic entries
         AIF   (K'&LABEL EQ 0).LOOP1US * Skip non-automatic entries
&FLD     SETC  '&LABEL'.'.'.'&FLD'     *
.LOOP1US ANOP  ,                       *
&LBL     USE   &SDS,&FLD               * Recursive invocation
         AGO   .LOOP1                  * And go check remaining entries
.LOOP1OK ANOP
.*
.* Any entries remaining in the OVR1-array are field names not found
.* in &DSECT. I.e. they are not defined thru the DCL macro.
         AIF   (K'&OVR EQ 0).LOOP3OK
&J       SETA  0                       * Index for OVR1/OVR2
.LOOP3   ANOP  ,                       * Scan OVR1
&J       SETA  &J+1                    * Point next entry
         AIF   (&J GT N'&OVR1).LOOP3OK * On end: quit loop
         AIF   (K'&OVR1(&J) EQ 0).LOOP3 * Skip used entries
         MNOTE 8,'Field &OVR1(&J) not DCL-defined in &DSECT'
         AGO   .LOOP3
.LOOP3OK ANOP
         MEXIT
.*
.* Handling of register-USE
.REGUSE  ANOP
.*
.* Label not allowed on register USE
         AIF   (K'&LABEL EQ 0).NOERR6A
.ERR6A   MNOTE 4,'Label parameter is not allowed on register USE: ignor*
               ed'
.NOERR6A ANOP
.*
.* The register is available?
         CHKREG &DSECT,g               * Valid GPR?
         AIF   (&BXA_RC GT 4).ERR6C    * No: error
&R       SETA  &BXA_NUMVAL+1           * Increment reg to obtain index
         AIF   (&BXA_USED_REGS(&R)).ERR6B
.*
.* For SCOPE=CALLED insert parameters into tables
         AIF   ('&SCOPE' NE 'CALLED').LOCAL2
&I       SETA  N'&BXA_USEC_ROUT+1      * Point to empty entry
&BXA_USEC_ROUT(&I) SETC '&BXA_SUBR'    * Set up new
&BXA_USEC_ARGL(&I) SETC ''             *  entries in tables
&BXA_USEC_ARG1(&I) SETC '&DSECT'       *   for use by ENDUSE
&BXA_USEC_ARG2(&I) SETC '&BASE'        *    and BEGSR
.LOCAL2  ANOP
.*
.* Set the designated register in use (&R still contains reg-index)
&BXA_USED_REGS(&R) SETB 1              * Indicate register is in use
&N       SETA  &BXA_USENDX1(&BXA_USENDX)+1 * Get pointer to free entry
&BXA_USELBL(&N) SETC ''                * Save label in table
&BXA_USEREG(&N) SETA &R                * and register index value
&BXA_USEFLD(&N) SETC ''                * Set no field name
&BXA_USENDX1(&BXA_USENDX) SETA &N      * And update high valid ptr
.*
.* Report current USING status
         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested
         USEDREGS
         MEXIT
.*
.ERR6B   ANOP
&ARG     SETC  (DOUBLE '&DSECT')
         MNOTE 8,'Register &ARG currently not available'
         MEXIT
.ERR6C   ANOP
&ARG     SETC  (DOUBLE '&DSECT')
         MNOTE 8,'Register &ARG is not a valid general purpose register*
               '
.*
.MEND    MEND
./ ADD NAME=USEDREGS 0100-20096-20096-0112-00132-00132-00000-BIXSMAC 25
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro lists all registers currently in use
.*
         USEDREGS &OPT                 * DETAILS or nothing
.*
.* &OPT  If specified as DETAILS, active entries from the
.*       BXA_USELBL and BXA_USEREG tables will be shown
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC USEDREGS               * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15
         GBLC  &BXA_USELBL(50)         * Used labels ...
         GBLC  &BXA_USEFLD(50)         *   and fields...
         GBLA  &BXA_USEREG(50)         *   and associated registers
         GBLA  &BXA_USENDX0(5)         * Low valid pointers
         GBLA  &BXA_USENDX1(5)         * High valid pointers
         GBLA  &BXA_USENDX             * Pointer for USENDX0/USENDX1
         LCLA  &N                      * Pointer for BXA_USE...
         LCLA  &REG                    * Register number
         LCLC  &LBL                    * Label from table
         LCLC  &FLD                    * Field name from table
         LCLC  &ARG                    * 1 argument from SYSLIST
         LCLC  &ARGS                   * Arguments from SYSLIST
         LCLA  &I                      * Index into &SYSLIST
         LCLA  &R                      * Index into &BXA_USED_REGS
         LCLC  &USEDREGS               * Used regs on labeled USING
         LCLC  &USEDREG                * 1 index from USEDREGS
.*
.* Check the OPT parameter
         AIF   (K'&OPT EQ 0).NOERR1
         AIF   ('&OPT' EQ 'DETAILS').NOERR1
.ERR1A   MNOTE 8,'&OPT is an unsupported option: ignored'
.NOERR1  ANOP
.*
.* Create list of registers currently in use
&ARGS    SETC  ''                      * Empty list of regs
&I       SETA  0                       * Index BXA_USED_REGS
.LOOPR   ANOP  ,                       * For all registers
&I       SETA  &I+1                    * Point next register
         AIF   (&I GT 16).LOOPROK      * At end: issue message
         AIF   (NOT &BXA_USED_REGS(&I)).LOOPR * Unused reg: no action
&R       SETA  &I-1                    * Obtain register number
&ARGS    SETC  '&ARGS'.',R'.'&R'       * Add register to list
         AGO   .LOOPR                  * And go check next register
.LOOPROK ANOP
         AIF   (K'&ARGS GT 0).LOOPRN0
&ARGS    SETC  ',None'
.LOOPRN0 ANOP  ,                       * ARGS not empty
&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma
         MNOTE *,'Registers in use: &ARGS'
.*
.* If DETAILS not specified: we're done
         AIF   ('&OPT' NE 'DETAILS').LOOP2OK
&N       SETA  &BXA_USENDX0(&BXA_USENDX)
.LOOP2   ANOP
&N       SETA  &N+1
         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP2OK
&REG     SETA  &BXA_USEREG(&N)-1       * Create reg.nr. from index
&FLD     SETC  '&BXA_USEFLD(&N)'       * Copy fieldname
&LBL     SETC  '&BXA_USELBL(&N)'       * Copy label
         AIF   (K'&LBL GE 8).LOOP2M    * Go issue message
&LBL     SETC  '&LBL'.(8-K'&LBL)' '    * Fill up to 8 chars
.LOOP2M  ANOP  ,                       *
         AIF   (K'&FLD GT 0).LOOP2M2   * With field: issue msg 2
         MNOTE *,'&LBL USE R&REG'      * Report register use
         AGO   .LOOP2                  *
.LOOP2M2 ANOP  ,                       * Message 2:
         MNOTE *,'&LBL USE &FLD.,R&REG' * Report normal use
         AGO   .LOOP2                  *
.LOOP2OK ANOP  ,                       *
.*
.MEND    MEND
./ ADD NAME=USING    0100-20096-20096-0112-00256-00256-00000-BIXSMAC 25
.*
.* This macro is free software; you can redistribute it and/or modify
.* it under the terms of the GNU General Public License as published by
.* the Free Software Foundation; either version 2 of the License
.* or (at your option) any later version.
.* The license text is available at the following internet addresses:
.* - http://www.bixoft.com/english/gpl.htm
.* - http://fsf.org
.* - http://opensource.org
.*
.* This macro is distributed in the hope that it will be useful,
.* but WITHOUT ANY WARRANTY; without even the implied warranty of
.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.* See the GNU General Public License for more details.
.*
.* You should have received a copy of the GNU General Public License
.* along with this program; if not, write to either of the following:
.* the Free Software Foundation, Inc.      B.V. Bixoft
.* 59 Temple Place, Suite 330              Rogge 9
.* Boston, MA 02111-1307                   7261 JA Ruurlo
.* United States of America                The Netherlands
.*
.*                                         e-mail: bixoft@bixoft.nl
.*                                         phone : +31-6-22755401
.*
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
         MACRO
.*
.* This macro replaces the assembler's USING statement
.*
&LABEL   USING &DSECT,                 * Control block name            *
               &BASE                   * Register (or field) for using
.*
.* &LABEL optional USING label
.* &DSECT specifies the control block to be set addressable.
.* &BASE  specifies either a register that points to &DSECT or a field
.*        that contains a &DSECT as a label. If specified as a register
.*        other registers may follow.
.*
.**********************************************************************
.*
.*       IMPORTANT NOTICE
.*       ========= ======
.*
.* Code below checks whether 'USER' accepted the terms and conditions
.* of the license for the BXA macro library. This code is to be treated
.* as part of the Copyright Notice and therefore may not be changed
.* or disabled in any way.
.*
.**********************************************************************
         GBLA  &BXA_RC                 * Returncode from CHKLIC
         CHKLIC USING                  * Check license acceptance
         AIF   (&BXA_RC NE 0).MEND
.**********************************************************************
.*
.* End of special code that is part of the Copyright Notice
.*
.**********************************************************************
.*
.* Declare variables
         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15
         GBLB  &SP_SHOWALL             * SHOWALL option
         GBLC  &BXA_USELBL(50)         * Using labels ...
         GBLA  &BXA_USEREG(50)         *   and their register indexes
         GBLC  &BXA_USEFLD(50)         *   and associated base fields
         GBLA  &BXA_USENDX0(5)         * Index into &BXA_USELBL/USEREG
         GBLA  &BXA_USENDX1(5)         * Index into &BXA_USELBL/USEREG
         GBLA  &BXA_USENDX             * Index into &BXA_USENDX1
         LCLA  &N                      * Index for BXA_USE...
         LCLA  &REG                    * Register number
         LCLC  &ARG                    * 1 argument from SYSLIST
         LCLC  &ARGS                   * Arguments from SYSLIST
         LCLA  &I                      * Index into &SYSLIST
         LCLA  &O                      * Offset for 2nd 3d.. base regs
         LCLA  &R                      * Index into &BXA_USED_REGS
         LCLB  &BASREG                 * Basing on a register
.*
.* Check the LABEL parameter
.* If an existing label is specified, that label must be dropped
         AIF   (K'&LABEL EQ 0).NOERR0
&N       SETA  &BXA_USENDX0(&BXA_USENDX)
.LOOP0   ANOP
&N       SETA  &N+1
         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP0OK
         AIF   ('&BXA_USELBL(&N)' NE '&LABEL').LOOP0
.* Match found: issue message, unless within a macro
         AIF   (&NESTLVL GT 1).NOERR0A
.ERR0A   MNOTE 1,'Label &LABEL currently in use: issuing DROP for you'
.NOERR0A ANOP
         DROP  &LABEL
.LOOP0OK ANOP
.NOERR0  ANOP
.*
.* Check the DSECT parameter
         AIF   (K'&DSECT EQ 0).ERR1A   * Must not be empty
         CHKREG &DSECT                 * A register specified?
         AIF   (&BXA_RC EQ 0).ERR1B    * Yes: issue error
         AGO   .NOERR1                 * A register was specified!
.ERR1A   MNOTE 8,'First operand missing (control block name)'
         MEXIT
.ERR1B   MNOTE 8,'You specified a register for a DSECT name'
         MEXIT
.NOERR1  ANOP
.*
.* Check the BASE parameter
         AIF   (K'&BASE EQ 0).ERR2A    * Must not be empty
         CHKREG &BASE                  * A register was specified?
         AIF   (&BXA_RC EQ 8).NOERR2   * Not a reg: dependent USING
         AIF   (&BXA_RC EQ 0).EQUREG   * Ok: USE a defined reg
.* NUMVAL = 4: a literal number 0-15 was specified
&REG     SETA  &BASE                   * Extract register number
         AGO   .USEREG
.*
.* &BASE is a known register: check its type
.EQUREG  ANOP  ,                       * Check EQUated register
         GBLC  &(BXA_REGT_&BASE)       * Declare type field for reg
         GBLA  &(BXA_REGN_&BASE)       * Declare number field for reg
&REG     SETA  &(BXA_REGN_&BASE)       * Extract register number
         AIF   ('&(BXA_REGT_&BASE)' NE 'g').ERR2C * Invalid reg type
.*
.* Set specified register 'in use' and add label/reg to tables
.USEREG  ANOP  ,                       * Second operand valid register
&BASREG  SETB  1                       * Indicate basing on a reg
&R       SETA  &REG+1                  * Increment reg to obtain index
         AIF   (NOT &BXA_USED_REGS(&R)).NOERR2B
.* If unlabeled USING overriding a prior unlabeled USING: drop prior
         AIF   (K'&LABEL NE 0).ERR2B   * Not unlabeled
         AIF   (K'&SYSLIST(3) NE 0).ERR2B * More than 1 register
&N       SETA  &BXA_USENDX0(&BXA_USENDX)
.LOOP4   ANOP
&N       SETA  &N+1
         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).ERR2B * Not found
         AIF   ('&BXA_USELBL(&N)' NE '').LOOP4 * Skip mismatch
         AIF   (&BXA_USEREG(&N) NE &R).LOOP4 * Skip mismatch
.ERR2E   ANOP
         AIF   (&SYSNEST GT 1).GENDROP
&ARG     SETC  (DOUBLE '&BASE')
         MNOTE 1,'Register &ARG currently in use: issuing DROP for you'
.GENDROP ANOP
         DROP  &BASE
         AGO   .NOERR2B
.ERR2B   ANOP
&ARG     SETC  (DOUBLE '&BASE')
         MNOTE 4,'Register &ARG currently not available for USING'
.NOERR2B ANOP
.*
.* Set register in use excpt for USING PSA,R0
         AIF   (&R EQ 1 AND '&DSECT' EQ 'PSA').NOSET
&BXA_USED_REGS(&R) SETB 1              * Indicate register is in use
.NOSET   ANOP  ,                       *
&N       SETA  &BXA_USENDX1(&BXA_USENDX)+1 * Get pointer to free entry
&BXA_USELBL(&N) SETC '&LABEL'          * Save label in table
&BXA_USEREG(&N) SETA &R                * and register index value
&BXA_USEFLD(&N) SETC '&DSECT'          * and base field name
&BXA_USENDX1(&BXA_USENDX) SETA &N      * And update high valid ptr
.*
.CHKR0   ANOP  ,                       * R0 can be used for PSA only
         AIF   (&REG NE 0).NOERR2      * Using Register 0?
         AIF   ('&DSECT' EQ 'PSA').NOERR2 * Yes. For PSA?
         AGO   .ERR2D                  * No: error
.*
.ERR2A   ANOP
         AIF   (&DOTLOC GT 0).NOERR2
         MNOTE 8,'Second operand missing (register or location)'
         MEXIT
.ERR2C   ANOP
&ARG     SETC  (DOUBLE '&BASE')
         MNOTE 8,'Register &ARG is not a general purpose register'
         MEXIT
.ERR2D   MNOTE 8,'With register 0 you cannot address &DSECT'
.NOERR2  ANOP
.*
.* Check extra base registers (if any)
         AIF   (NOT &BASREG).NOERR3    * Not basing on a register!
&I       SETA  2                       * SYSLIST 1 & 2 checked ok
.LOOP3   ANOP  ,                       * For all remaining arguments
&I       SETA  &I+1                    * Point next argument
         AIF   (&I GT N'&SYSLIST).LOOP3OK * At end: all args checked ok
&ARG     SETC  '&SYSLIST(&I)'          * Extract argument from SYSLIST
         AIF   (K'&ARG EQ 0).ERR3A     * Omitted register
         CHKREG &ARG                   * A register was specified?
         AIF   (&BXA_RC EQ 8).ERR3B    * Not a register
         AIF   (&BXA_RC EQ 0).LOOP3RG  * Ok: defined register
.* NUMVAL = 4: a literal number 0-15 was specified
&REG     SETA  &ARG                    * Extract register number
         AGO   .LOOP3AD                * and go add to tables
.LOOP3RG ANOP  ,                       * Check EQUated register
         GBLC  &(BXA_REGT_&ARG)        * Declare type field for reg
         GBLA  &(BXA_REGN_&ARG)        * Declare number field for reg
&REG     SETA  &(BXA_REGN_&ARG)        * Extract register number
         AIF   ('&(BXA_REGT_&ARG)' NE 'g').ERR3B * Invalid reg type
.*
.LOOP3AD ANOP  ,                       * Valid reg. Add to tables
&R       SETA  &REG+1                  * Increment reg, to obtain index
         AIF   (NOT &BXA_USED_REGS(&R)).NOERR3D
&ARG     SETC  (DOUBLE '&ARG')
.ERR3D   MNOTE 4,'Register &ARG currently not available for USING'
.NOERR3D ANOP
&O       SETA  &I-2                    * Ordinal-1 of this base reg.
&O       SETA  4096*&O                 * Determine offset from &DSECT
&BXA_USED_REGS(&R) SETB 1              * Indicate register is in use
&N       SETA  &BXA_USENDX1(&BXA_USENDX)+1 * Get pointer to free entry
&BXA_USELBL(&N) SETC '&LABEL'          * Save label in table
&BXA_USEREG(&N) SETA &R                * and register index value
&BXA_USEFLD(&N) SETC '&DSECT+&O'       * and base location
&BXA_USENDX1(&BXA_USENDX) SETA &N      * And update high valid ptr
.*
.LOOP3R0 ANOP  ,                       * Check for using R0
         AIF   (&REG EQ 0).ERR3C       * Cannot use register 0
         AGO   .LOOP3
.*
.ERR3A   MNOTE 8,'Missing argument in list of registers'
         AGO   .LOOP3
.ERR3B   ANOP
&ARG     SETC  (DOUBLE '&ARG')
         MNOTE 8,'Specified argument &ARG is not a general purpose regi*
               ster'
         AGO   .LOOP3
.ERR3C   MNOTE 8,'You cannot use register 0 to address the specified ar*
               ea of storage'
         AGO   .LOOP3
.LOOP3OK ANOP
.NOERR3  ANOP
.*
.* Build &ARGS from &SYSLIST
&I       SETA  0                       * I indexes &SYSLIST
.LOOP1   ANOP  ,                       * For all entries in SYSLIST
&I       SETA  &I+1                    * Point next entry
         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop
&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS
         AGO   .LOOP1                  * And go process next entry
.LOOP1OK ANOP
&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma
.*
.* Generate _USING statement
&LABEL   _USING &ARGS
.*
.* Report current USING status
         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested
         USEDREGS
.*
.MEND    MEND
