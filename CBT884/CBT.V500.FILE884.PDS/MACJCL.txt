./ ADD NAME=$DOC     0100-20110-20110-2330-00022-00022-00000-BXAMJCL 11
.**********************************************************************
.*
.* Bixoft eXtended Assembly language
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
.**********************************************************************
=======================================================================
The following control blocks are available for DCL

Control block name Mapmacro Description
------------------ -------- -------------------------------------------
COPY               MAP$COPY BXACOPY private workarea
UNLD               MAP$UNLD BXAUNLD private workarea
./ ADD NAME=MAP$COPY 0100-20110-20110-2330-00135-00135-00000-BXAMJCL 11
.**********************************************************************
.*
.* BIXXAMS - Bixoft Cross Access Method Services
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999-2001
**********************************************************************
         MACRO
.*
.* Mapping macro for copy utility's workarea
.*
&LABEL   MAP$COPY &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.*
.* Declare variables
         GBLB  &BXA_MAC_MAP$COPY       * Map has been generated?
         GBLA  &BXA_RC                 * Returncode
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).SKIP
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'COPY').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAP$COPY).SKIP
&BXA_MAC_MAP$COPY SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_COPY
&BXA_CB_COPY SETC '$COPY'
.*
         MNOTE *,'Generating DSECTs for Copy workarea'
*
* DSECT for copy workarea
*
COPY     DSECT ,                       *
COPYSAVE DCL   BXASAVE                 *
*
* Pointers
COPYBUFI DS    A                       * Location of input buffer
COPYBUFO DS    A                       * Location of output buffer
COPYREC  DS    A                       * Pointer to current record
COPYBUFE DS    A                       * Pointer past last record
*
* Member name
COPYMBNM DS    CL8                     * Member name
*
* Status bits
COPYSTAT DCL   *BITS,                  * Status bits                   *
               COPYRTRY,               * 0: Retry executed             *
               COPYEOF,                * 1: EOF reached on input data  *
               COPYMEM,                * 2: MEMBER copy requested      *
               COPYDS,                 * 3: Dataset copy requested     *
               COPYPS                  * 4: Physical Sequential copy
***********************************************************************
COPYWORK DS    0D                      * Align
*
* Plist for ESTAE in COPYWORK
         ORG   COPYWORK
COPYESTAE ESTAE 0,                     * Space for ESTAE plist         *
               MF=L                    *
COPYESTAE_LEN EQU *-COPYESTAE
*
* DCB for BPAM input dataset in COPYWORK
         ORG   COPYWORK                *
COPYDCBP DCB   DDNAME=INPUT,           * Input dataset                 *
               DSORG=PO,               * Read directory sequentially   *
               DCBE=0,                 * DCBE will be used             *
               MACRF=R                 * Dataset will be read only
COPYDCBP_LEN EQU *-COPYDCBP            *
*
* DCB for BSAM input dataset in COPYWORK
         ORG   COPYWORK                *
COPYDCBS DCB   DDNAME=INPUT,           * Input dataset                 *
               DSORG=PS,               * Physical sequential           *
               DCBE=0,                 * DCBE will be used             *
               MACRF=R                 * Dataset will be read only
COPYDCBS_LEN EQU *-COPYDCBS            *
*
* DCBE for BPAM/BSAM access follows DCB
         ORG   ,                       * Position after longest DCB
COPYDCBE DCBE  EODAD=0                 * EODAD routine
COPYDCBE_LEN EQU *-COPYDCBE            *
*
* DCB for QSAM output dataset follows input DCB + DCBE
COPYDCBO DCB   DDNAME=OUTPUT,          * Output dataset                *
               DSORG=PS,               *                               *
               MACRF=PM                * with PUT in move-mode
COPYDCBO_LEN EQU *-COPYDCBO            *
*
* Add OPEN plist in COPYWORK
         ORG   ,                       * Set to current end of COPYWORK
COPYOPEN OPEN  (0,INPUT),MF=L          * Reserve room for OPEN plist
COPYOPEN_LEN EQU *-COPYOPEN            *
*
* CLOSE plist reuses OPEN area
         ORG   COPYOPEN                *
COPYCLOS CLOSE (0),MF=L                * Reserve room for CLOSE plist
COPYCLOS_LEN EQU *-COPYCLOS           *
*
* DECB for reading with BPAM/BSAM reuses OPEN area
         ORG   COPYOPEN                *
         READ  COPYDECB,SF,MF=L        * Create DECB for reading
COPYDECB_LEN EQU *-COPYDECB            *
*
* Reset location counter to end of COPYWORK
         ORG   ,                       *
         DS    0D                      * Align for internal Save areas
COPY_LEN EQU   *-COPY                  *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.SKIP    ANOP
         MEND
./ ADD NAME=MAP$UNLD 0100-20110-20110-2330-00176-00176-00000-BXAMJCL 11
.**********************************************************************
.*
.* BIXXAMS - Bixoft Cross Access Method Services
.* Licensed material - Property of B.V. Bixoft
.*
.* This macro can be licensed or used on an as-is basis.
.* No warranty, neither implicit nor explicit, is given.
.* It remains your own responsibility to ensure the correct
.* working of any program using this macro.
.*
.* Suggestions for improvement are always welcome at
.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl
.*
.* (C) Copyright B.V. Bixoft, 1999
**********************************************************************
         MACRO
.*
.* Mapping macro for PDS unload workarea
.*
&LABEL   MAP$UNLD &DSECT=YES,          * YES or NO                     *
               &CB=,                   * Control block to generate     *
               &PRFX=                  * Prefix to use
.*
.* Declare variables
         GBLB  &BXA_MAC_MAP$UNLD       * Map has been generated?
         GBLA  &BXA_RC                 * Returncode
.*
.* Check parameters
&LABEL   CHKMAP DSECT=&DSECT,          *                               *
               CB=&CB,                 *                               *
               PRFX=&PRFX              *
         AIF   (&BXA_RC GT 4).SKIP
.*
.* Check the CB parameter
         AIF   ('&DSECT' EQ 'YES').DSECT
         AIF   ('&CB' EQ 'UNLD').EMBED
.ERR5    MNOTE 8,'&CB control block not supported'
         MEXIT
.*
.* Generate embedded definition
.EMBED   ANOP
&LABEL   NESTCB &CB,X,&PRFX
         MEXIT
.*
.DSECT   ANOP
         AIF   (&BXA_MAC_MAP$UNLD).SKIP
&BXA_MAC_MAP$UNLD SETB 1
.* Set up translation from control block to macro for DCL
         GBLC  &BXA_CB_UNLD
&BXA_CB_UNLD SETC '$UNLD'
.*
         GENMAPS (DECB,EPAL,PDS,SAVE)
.*
         MNOTE *,'Generating DSECTs for Unload workarea'
*
* DSECT for unload workarea
*
UNLD     DSECT ,                       *
UNLSAVE  DCL   BXASAVE                 *
*
* Status bits
UNLSTAT  DCL   *BITS,                  * Status bits                   *
               UNLSEOF,                * 0: EOF reached on input data  *
               UNLSPRM                 * 1: Valid parm was on JCL
*
UNLBLKSI DS    H                       * Block size
UNLTTRN  DCL   TTRN,UNLTTRN_           * TTRn value for POINT
*
* Pointer fields
UNLDIRP  DS    A                       * Pointer to directory table
UNLDIRFP DS    A                       * Pointer to free entry in table
UNLDIRSZ DS    F                       * Size of dir table in bytes
*
UNLBUFP  DS    A                       * Pointer to record buffer
UNLBUFSZ DS    F                       * Buffer size
UNLBUFND DS    A                       * Ptr to logical end-of-buffer+1
UNLRCDP  DS    A                       * Pointer to current record
*
* JCL fields
UNLPARM  DS    CL8                     * Job and step name
UNLDSN   DS    CL44                    * Data set name
UNLDSNLN DS    H                       * Data set name length in bytes
UNLCTRI  DCL   *BITS,                  * Allocation type               *
               UNLALCYL,               * 0: Cylinder request           *
               UNLALTRK,               * 1: Track request              *
               UNLALBLK                * 2: Block request
UNLPQTY  DS    F                       * Primary alloc quantity
UNLSQTY  DS    F                       * Secondary alloc quantity
UNLDQTY  DS    F                       * Directory alloc quantity
***********************************************************************
UNLWORK  DS    0D                      * Align
*
* DCB for BPAM access in UNLWORK
         ORG   UNLWORK                 *
UNLDCB1  DCB   DDNAME=SYSUT1,          * Input dataset                 *
               DSORG=PO,               * Read directory sequentially   *
               DCBE=0,                 * DCBE will be used             *
               MACRF=R                 * Dataset will be read only
UNLDCB1_LEN EQU *-UNLDCB1              *
*
* DCB for BSAM access overlays UNLDCB1
         ORG   UNLDCB1                 *
UNLDCB2  DCB   DDNAME=SYSUT1,          * Input dataset                 *
               DSORG=PS,               * Read directory sequentially   *
               DCBE=0,                 * DCBE will be used             *
               MACRF=RP                * Dataset will be read only
UNLDCB2_LEN EQU *-UNLDCB2              *
*
* DCB for QSAM output follows preceding DCB2
UNLDCBO  DCB   DDNAME=SYSUT2,          * Output dataset                *
               DSORG=PS,               *                               *
               MACRF=PM                * with PUT in move-mode
UNLDCBO_LEN EQU *-UNLDCBO              *
*
* DCBE for BPAM access follows DCB
         ORG   ,                       * Set to current end of UNLWORK
UNLDCBE1 DCBE  EODAD=0                 * EODAD routine
UNLDCBE1_LEN EQU *-UNLDCBE1            *
*
* DCBE for BSAM access overlays UNLDCBE1
         ORG   UNLDCBE1                *
UNLDCBE2 DCBE  EODAD=0                 * EODAD routine
UNLDCBE2_LEN EQU *-UNLDCBE2            *
*
* Add OPEN plist in UNLWORK
         ORG   ,                       * Set to current end of UNLWORK
UNLOPEN  OPEN  (0,INPUT),MF=L          * Reserve room for OPEN plist
UNLOPEN_LEN EQU *-UNLOPEN              *
*
* CLOSE plist reuses OPEN area
         ORG   UNLOPEN                 *
UNLCLOS  CLOSE (0),MF=L                * Reserve room for CLOSE plist
UNLCLOS_LEN EQU *-UNLCLOS              *
*
* DECB for reading with BPAM reuses OPEN area
         ORG   UNLOPEN                 *
         READ  UNLDECB1,SF,MF=L        * Create DECB for reading
UNLDECB1_LEN EQU *-UNLDECB1            *
*
* DECB for reading with BSAM reuses OPEN area
         ORG   UNLOPEN                 * Set to reuse UNLOPEN area
         READ  UNLDECB2,SF,MF=L        * Create DECB for reading
UNLDECB2_LEN EQU *-UNLDECB1            *
*
* Plist for SWAREQ in UNLWORK
         ORG   ,                       *
UNLSWARQ SWAREQ EPA=UNLEPAPT,          * SWAREQ parmlist goes here     *
               MF=L                    *
UNLSWARQ_LEN EQU *-UNLSWARQ            * Length of plist
*
         DS    0F                      * Re-align on fullword
UNLEPAPT DS    A                       * Pointer to UNLEPAX
UNLEPAX  DCL   EPAX,*NOUSE             * EPAX follows UNLSWARQ
UNLEPAX_LEN EQU *-UNLEPAX              * Length of EPAX
*
* Unpack area for allocation amounts re-uses SWAREQ areas
         ORG   UNLSWARQ                *
         DS    0D                      * Align on D-word
UNLCVD   DS    PL8                     * Result of CVD
UNLQTY   DS    ZL5                     * Zoned quantity
*
* Buffer for output record follows all else
         ORG   ,                       * Set to current end of UNLWORK
UNLBUFO  DS    CL80                    * Buffer for 1 output record
UNLBUFO_LEN EQU *-UNLBUFO              *
*
* Reset location counter to end of UNLWORK
         ORG   ,                       *
         DS    0D                      * Align for internal Save areas
UNLD_LEN EQU   *-UNLD                  *
.*
.* Return to our original CSECT name
&SYSECT  &SYSSTYP
.*
.SKIP    ANOP
         MEND
