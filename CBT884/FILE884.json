{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013222000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 6642818, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE884.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 6642818, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 6642818, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE884.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00e\\r'", "DS1TRBAL": "b'\\t\\xd4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07\\xd1\\x00\\x01\\x07\\xd7\\x00\\x0c\\x00f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x000\\x01 \\x11\\x1f\\x01 \\x11\\x1f\\x100\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-04-20T00:00:00", "modifydate": "2020-04-20T10:30:30", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-499"}, "text": "REGULAR CBT TAPE - VERSION 499    FILE:  884\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT499.FILE884\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    27920   PO\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 62,826 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/20/20    10:30:29    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PDSLOAD": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x00\\x16\\x01\\x026_\\x01 \\x11\\x1f\\tP\\x00)\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2020-04-20T09:50:16", "lines": 41, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*    PDSLOAD JOB TO CREATE SOME BIXSOFT DATASETS\n//*          FROM THE MEMBERS OF THIS PDS\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT499.FILE884(PDSLOAD)')\n   DSN('SBGOLOB.BIXSOFT.LOAD')  VOL(WORKA4)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT499.FILE884',      <=== CHANGE\n//             OPRE=SBGOLOB,                       <=== PREFIX\n//             QUAL=BIXSOFT,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=WORKA4,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.BIXSOFT.LOAD\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=ASM\n//S002 EXEC PDSLOAD,MEMB=JCL\n//S003 EXEC PDSLOAD,MEMB=LKED\n//S004 EXEC PDSLOAD,MEMB=MACJCL\n//S005 EXEC PDSLOAD,MEMB=MACLIB,D=89\n//S006 EXEC PDSLOAD,MEMB=PDSLOAD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE884": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00\"\\x01 \\x11\\x1f\\x01 \\x11\\x1f\\x100\\x00\\x15\\x00\\x15\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-04-20T00:00:00", "modifydate": "2020-04-20T10:30:22", "lines": 21, "newlines": 21, "modlines": 0, "user": "CBT-499"}, "text": "//***FILE 884 is from Abe Kornelis and contains his very useful     *   FILE 884\n//*           macro library, as well as some other useful tools.    *   FILE 884\n//*                                                                 *   FILE 884\n//*           email:  Abe Kornelis <abe@bixoft.nl>                  *   FILE 884\n//*                                                                 *   FILE 884\n//*       This pds contains both Abe's maclib and the associated    *   FILE 884\n//*       samplib.                                                  *   FILE 884\n//*                                                                 *   FILE 884\n//*       The product is named \"Bixoft eXtended Assembly language\"  *   FILE 884\n//*       and is made available under GPL V2 or V3.                 *   FILE 884\n//*                                                                 *   FILE 884\n//*       Members of this pds are in PDSLOAD format (similar to     *   FILE 884\n//*       IEBUPDTE, but containing ISPF statistics).  The PDSLOAD   *   FILE 884\n//*       program is packaged with this pds, and the $PDSLOAD       *   FILE 884\n//*       member of this pds is a job to create all the libraries.  *   FILE 884\n//*                                                                 *   FILE 884\n//*       The submission was divided into two parts, originally,    *   FILE 884\n//*       called MACLIB and SAMPLIB.  MACLIB contains Abe's entire  *   FILE 884\n//*       macro library, while SAMPLIB contained all the other      *   FILE 884\n//*       members:  ASM, JCL, LKED, MACJCL, PROCLIB.                *   FILE 884\n//*                                                                 *   FILE 884\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASM": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01 \\x11\\x0f\\x01 \\x11\\x0f#\\x16 ! !\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-04-19T00:00:00", "modifydate": "2020-04-19T23:16:07", "lines": 8225, "newlines": 8225, "modlines": 0, "user": "SAMPLIB"}, "text": "./ ADD NAME=BXABR14  0100-20110-20110-2315-00004-00004-00000-BXAASM  15\nBXABR14  RSECT\n         XR       15,15\n         BR       14\n         END\n./ ADD NAME=BXACOPY  0100-20110-20110-2315-00634-00634-00000-BXAASM  15\n*PROCESS FLAG(SUBSTR)\n*PROCESS RENT\n***********************************************************************\n*\n* BIXXAMS - Bixoft Cross Access Method Services\n* Licensed material - Property of B.V. Bixoft\n*\n* This program can be licensed or used on an as-is basis.\n* No warranty, neither implicit nor explicit, is given.\n* It remains your own responsibility to ensure the correct\n* working of this program in your installation.\n*\n* Suggestions for improvement are always welcome at\n* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n*\n* (C) Copyright B.V. Bixoft, 1999-2001\n***********************************************************************\n*\n* This program will copy a member from a PDS concatenation\n*                     or a physical sequential dataset concatenation\n*\n***********************************************************************\n*\n* Input:  parameter specifying 'MEMBER=memname'\n*                           or 'DATSET=PS'\n*         INPUT  dd-statement giving the input dataset(s)\n* OUTPUT: OUTPUT dd-statement specifying the dataset to create\n*\n* For MEMBER=memname the INPUT concatenation of PDS'es will\n*     be searched for the specified member, which will then\n*     be copied to OUTPUT.\n* For DATSET=PS the INPUT concatenation of physical sequential files\n*     will be copied to OUTPUT.\n*\n* IEBCOPY does more, but needs control cards for its input,\n*         which cannot be substituted from JCL variables.\n* IEHLIST will also copy datasets, but it also lists all\n*         records, filling up the spool.\n*\n***********************************************************************\n         PGM   VERSION=V00R00M00,      * Version number                *\n               HDRTXT='Bixxams copy utility',                          *\n               WORKAREA=COPY,          * Dynamic area                  *\n               SAVES=4,                * Internal save-areas           *\n               ABND=4090,              * Abend code                    *\n               MAPS=($COPY,            * Private mapping macros        *\n               DCB,DCBE,DECB,IOB,SDWA)\n*\n* Assign some global registers\nR_RCD    EQUREG ,                      * Assign retcode register\n         USE   R_RCD,SCOPE=CALLED      * Set register in use\nR_TMP    EQU   R_RCD                   * retcode reg also temp reg\nR_LEN    EQUREG ,                      * Assign length register\n         USE   R_LEN,SCOPE=CALLED      * Set length reg in use\nR_RSN    EQU   R_LEN                   * length reg also reson reg\n*\n* Assign registers for input parm parsing\nR_PTR1   EQUREG ,                      * Ptr to first operand\n         USE   R_PTR1                  * Set register in use\nR_PTR2   EQUREG ,                      * Ptr to second operand\n         USE   R_PTR2                  * Set register in use\nR_LEN1   EQUREG ,                      * Length of first operand\n         USE   R_LEN1                  * Set register in use\nR_LEN2   EQUREG ,                      * Length of second operand\n         USE   R_LEN2                  * Set register in use\n*\n* Retrieve JCL parameter - if specified - and save in R_PTR1\n         IF    R1,Z                    * Pointer to parmlist valid?\n          ABND ,                       * No: issue error\n         ENDIF ,                       *\n         L     R_PTR1,0(,R1)           * Retrieve ptr to JCL parm\n         CLEAR (R_PTR1,*ADDR)          * Wipe hi-order bit\n         IF    R_PTR1,Z                * If it is invalid\n          ABND ,                       * issue error\n         ENDIF ,                       *\n         LH    R_LEN1,0(R_PTR1)        * First halfword is length\n         INC   R_PTR1,2                * Point start of text of parm\n         IF    R_LEN1,GT,256           * If it is too long\n          ABND ,                       * Issue error\n         ENDIF ,                       *\n         IF    R_LEN1,Z                * If no parm was specified\n          ABND ,                       * Issue error\n         ENDIF ,                       *\n*\n* Find equal sign in input string\n         L     R_TMP,=A(TRTAB1)        * Point table to be used\n         EXTRT 0(R_LEN1,R_PTR1),0(R_TMP) * Search first equal sign\n         ABND  Z                       * Abend if not found\n*\n* Determine length of operand 1 and remainder of string\n         LA    R_PTR2,1(,R1)           * Point after equal sign\n         CPY   R_LEN2,R_LEN1           * Copy string length\n         CPY   R_TMP,R1                * Delimiter location\n         SR    R_TMP,R_PTR1            * Nr of chars in first operand\n         ABND  Z                       * Empty operand is error\n         CPY   R_LEN1,R_TMP            * Set length of operand 1\n         SR    R_LEN2,R_LEN1           * Remaining string length\n         DEC   R_LEN2                  *    after delimiter\n         IF    R_LEN2,LE,0             * Something left?\n          ABND ,                       * No: error\n         ENDIF ,                       *\n*\n* Operand 1 must be a valid keyword\n         CASE  R_LEN1,EQ,6             * Length must be 6\n          CASE E,CLC,=CL6'MEMBER',0(R_PTR1),NEST=YES * MEMBER copy?\n           SETON COPYMEM               * Yes: indicate member copy\n          CASE E,CLC,=CL6'DATSET',0(R_PTR1) * Dataset copy?\n           SETON COPYDS                * Yes: indicate dataset copy\n          ELSE ,                       *\n           ABND ,                      * Invalid keyword\n          ENDCASE ,                    *\n         ELSE  ,                       * Other keyword lengths\n          ABND ,                       * Invalid keyword length\n         ENDCASE ,                     *\n*\n* Test operand 2 for validity\n         CASE  COPYMEM                 * Copy member requested?\n          IF   R_LEN2,GT,8             * Length max is 8\n           ABND ,                      * Member name too long\n          ENDIF ,                      *\n          CLEAR COPYMBNM               * Wipe member name\n          EXMVC COPYMBNM(R_LEN2),0(R_PTR2) * Copy member name\n         CASE  COPYDS                  * Copy dataset requested?\n          IF   R_LEN2,NE,2             * Length must be 2\n           ABND ,                      * Wrong organisation\n          ENDIF ,                      *\n          IF   E,CLC,=CL2'PS',0(R_PTR2) * Physical Sequential?\n           SETON COPYPS                * Indicate PS copy request\n          ENDIF ,                      *\n         ENDCASE ,                     *\n*\n* Input string processing complete: drop used registers\n         DROP  R_PTR1                  *\n         DROP  R_PTR2                  *\n         DROP  R_LEN1                  *\n         DROP  R_LEN2                  *\n*\n* Set up recovery environment\n         MVPL  COPYESTAE,CPY_ESTAE     * Copy ESTAE parmlist\n         ESTAE RECOVER,CT,             * Create new ESTAE-environment  *\n               PARAM=(R13),            * Pass COPY as parameter field  *\n               MF=(E,COPYESTAE)        *\n         ABND  TSTRC,RCD=(R_RCD,R_RSN) * Abend on error\n\n*\n* Perform requested function\n         CASE  COPYMEM                 * Member copy?\n          EXSR CPYMEM                  * Ok: copy a member\n         CASE  COPYPS                  * PS copy?\n          EXSR CPYPS                   * Ok: copy a PS dataset\n         ENDCASE ,\n*\n* Remove ESTAE environment\n         MVPL  COPYESTAE,CPY_ESTAE     * Copy ESTAE parmlist\n         ESTAE 0,                      * Remove our ESTAE-environment  *\n               MF=(E,COPYESTAE)        *\n         ABND  TSTRC,RCD=(R_RCD,R_RSN) * Abend on error\n*\n* And exit program\n         RETRN RC=0                    * Quit this program\n***********************************************************************\n*\n* Routine to copy a PDS member\n*\n***********************************************************************\nCPYMEM   BEGSR ,\n*\n* Allocate input DCB and DCBE in the workarea\n         MVPL  COPYDCBP,CPY_DCBP       * Copy input DCB\n         MVPL  COPYDCBE,CPY_DCBE       * Copy DCBE to be used\nIN       USE   DCB,COPYDCBP            * Set DCB fields addressable\n         USE   DCBE,COPYDCBE           * Set DCBE fields addressable\n         SET   IN.DCBDCBE,COPYDCBE     * Point from DCB to DCBE\n         SET   DCBEEODA,EODADRTN       * Point to EODAD routine\n*\n* Open the input PDS (concatenation)\n         MVPL  COPYOPEN,CPY_OPEN       * Copy open parmlist\n         OPEN  (COPYDCBP,INPUT),       * Open the input dataset(s)     *\n               MF=(E,COPYOPEN)         *\n         ABND  TSTRC,RCD=R_RCD         * Abend on failure\n*\n* Allocate and open the output DCB in the workarea\n         MVPL  COPYDCBO,CPY_DCBO       * Copy output DCB\nOUT      USE   DCB,COPYDCBO            * Set DCB fields addressable\nCPYMEM_OPEN LABEL ,                    *\n         MVPL  COPYOPEN,CPY_OPEN       * Copy open parmlist\n         OPEN  (COPYDCBO,OUTPUT),      * Open the output dataset       *\n               MF=(E,COPYOPEN)         *\n         ABND  TSTRC,RCD=R_RCD         * Abend on failure\n*\n* Locate the required input member\n         FIND  COPYDCBP,COPYMBNM,D     * Locate required member\n         ABND  TSTRC,RCD=R_RCD         * Abend on failure\n*\n* Allocate 1 buffer for the BPAM input dataset\nR_BUFP   EQUREG ,                      * Assign buffer ptr\n         USE   R_BUFP                  * Set ptr in use\n         CPY   R_LEN,IN.DCBBLKSI       * Obtain input block size\n         STORAGE OBTAIN,LOC=ANY,       * Get storage above the line    *\n               LENGTH=(R_LEN)          *   for a single block\n         CPY   R_BUFP,R1               * Set ptr to buffer\n         CPY   COPYBUFI,R_BUFP         * And save buffer address\n*\n* Allocate 1 buffer for an output record\nR_BUFO   EQUREG ,                      * Assign buffer ptr\n         USE   R_BUFO                  * Set ptr in use\n         CPY   R_LEN,OUT.DCBLRECL      * Obtain (max) output lrecl\n         STORAGE OBTAIN,LOC=ANY,       * Get storage above the line    *\n               LENGTH=(R_LEN)          *   for a single block\n         CPY   R_BUFO,R1               * Set ptr to buffer\n         CPY   COPYBUFO,R_BUFO         * And save buffer address\n*\n* Loop to read all blocks in the member\n         DO    UNTIL,COPYEOF           * Until EOF detected\n          MVPL COPYDECB,CPY_DECB       * Set up initial DECB\n          USE  DECB,COPYDECB           * Set DECB fields addressable\n          CPY  R_TMP,R_BUFP            * Set ptr to BPAM buffer\n          READ COPYDECB,SF,            * Read forward                  *\n               COPYDCBP,(R_TMP),'S',   *  1 block from input dataset   *\n               MF=E                    *\n          CHECK COPYDECB               * Wait for READ to complete\n          IF   NOT,COPYEOF             * Valid block was read?\n* For Fixed records: use IOB to determine end-of-buffer\n* For Variable records: use BDW to determine end-of-buffer\n           IF  IN.DCBRECF              * Fixed or FB input records?\n            CPY R_LEN,IN.DCBBLKSI      * Load input block length\nR_IOB       EQUREG ,                   * Assign IOB ptr\n            USE IOBSTDRD,R_IOB         * Set IOB addressable\n            CPY R_IOB,DECIOBPT         * And point to IOB\n            CPY R_TMP,IOBRESCT         * Load residual count\n            DROP R_IOB                 * IOB no longer needed\n            SR R_LEN,R_TMP             * Nr of bytes in input buffer\n            AR R_LEN,R_BUFP            * Point past end of data\n            ST R_LEN,COPYBUFE          * Save end-of-block ptr\n            ST R_BUFP,COPYREC          * Set ptr to current record\n           ELSE  ,                     * Must be variable or VB records\nR_BDW       EQUREG ,                   * Assign buffer ptr\n            USE BDW,R_BDW              * Address block descriptor word\n            CPY R_BDW,R_BUFP           * Point to filled buffer\n            CPY R_LEN,BDWBLKLN         * Retrieve length of block\n            AR  R_LEN,R_BUFP           * Point past end of data\n            ST  R_LEN,COPYBUFE         * Set ptr to end of buffer\n            LA  R_TMP,BDW_LEN(,R_BUFP) * Point to first RDW in buffer\n            CPY COPYREC,R_TMP          * Set ptr to current record\n            DROP R_BDW                 * Buffer ptr no longer needed\n           ENDIF ,                     *\n           EXSR CPYBLK                 * Go copy a block to output\n          ENDIF ,                      *\n         ENDDO ,                       *\n*\n* Free the output record buffer\n         CPY   R_LEN,OUT.DCBLRECL      * Obtain output record length\n         STORAGE RELEASE,ADDR=(R_BUFO), * Free storage allocated       *\n               LENGTH=(R_LEN)          *   for a single record\n         DROP  R_BUFO                  * Buffer ptr no longer valid\n         CLEAR COPYBUFO                * And wipe ptr in storage too\n*\n* Free the input buffer\n         CPY   R_LEN,IN.DCBBLKSI       * Obtain input block size\n         STORAGE RELEASE,ADDR=(R_BUFP), * Free storage allocated       *\n               LENGTH=(R_LEN)          *   for a single block\n         DROP  R_BUFP                  * Buffer ptr no longer valid\n         CLEAR COPYBUFI                * And wipe ptr in storage too\n*\n* Close the input PDS (concatenation)\n         MVPL  COPYCLOS,CPY_CLOS       * Copy close parmlist\n         CLOSE (COPYDCBP),MF=(E,COPYCLOS) * Close the input dataset(s)\n         ABND  TSTRC,RCD=R_RCD         * Abend on failure\n*\n* Close the output dataset\n         MVPL  COPYCLOS,CPY_CLOS       * Copy close parmlist\n         CLOSE (COPYDCBO),MF=(E,COPYCLOS) * Close the input dataset(s)\n         ABND  TSTRC,RCD=R_RCD         * Abend on failure\n*\n* Release registers\n         DROP  R_RCD                   *\n         DROP  R_LEN                   *\n*\n         ENDSR ,\n***********************************************************************\n*\n* Routine to copy a sequential dataset (or concatenation)\n*\n***********************************************************************\nCPYPS    BEGSR ,\n*\n* Allocate input DCB and DCBE in the workarea\n         MVPL  COPYDCBS,CPY_DCBS       * Copy input DCB\n         MVPL  COPYDCBE,CPY_DCBE       * Copy DCBE to be used\nIN       USE   DCB,COPYDCBS            * Set DCB fields addressable\n         USE   DCBE,COPYDCBE           * Set DCBE fields addressable\n         SET   IN.DCBDCBE,COPYDCBE     * Point from DCB to DCBE\n         SET   DCBEEODA,EODADRTN       * Point to EODAD routine\n*\n* Open the input dataset or concatenation\n         MVPL  COPYOPEN,CPY_OPEN       * Copy open parmlist\n         OPEN  (COPYDCBS,INPUT),       * Open the input dataset(s)     *\n               MF=(E,COPYOPEN)         *\n         ABND  TSTRC,RCD=R_RCD         * Abend on failure\n*\n* Allocate and open the output DCB in the workarea\n         MVPL  COPYDCBO,CPY_DCBO       * Copy output DCB\nOUT      USE   DCB,COPYDCBO            * Set DCB fields addressable\nCPYPS_OPEN LABEL ,                     *\n         MVPL  COPYOPEN,CPY_OPEN       * Copy open parmlist\n         OPEN  (COPYDCBO,OUTPUT),      * Open the output dataset       *\n               MF=(E,COPYOPEN)         *\n         ABND  TSTRC,RCD=R_RCD         * Abend on failure\n*\n* Allocate 1 buffer for the input BSAM dataset\nR_BUFS   EQUREG ,                      * Assign buffer ptr\n         USE   R_BUFS                  * Set ptr in use\n         CPY   R_LEN,IN.DCBBLKSI       * Obtain input block size\n         STORAGE OBTAIN,LOC=ANY,       * Get storage above the line    *\n               LENGTH=(R_LEN)          *   for a single block\n         CPY   R_BUFS,R1               * Set ptr to buffer\n         CPY   COPYBUFI,R_BUFS         * And save buffer address\n*\n* Allocate 1 buffer for an output record\n* R_BUFO EQUREG ,                      * Assigned in CPYMEM routine!\n         USE   R_BUFO                  * Set ptr in use\n         CPY   R_LEN,OUT.DCBLRECL      * Obtain (max) output lrecl\n         STORAGE OBTAIN,LOC=ANY,       * Get storage above the line    *\n               LENGTH=(R_LEN)          *   for a single block\n         CPY   R_BUFO,R1               * Set ptr to buffer\n         CPY   COPYBUFO,R_BUFO         * And save buffer address\n*\n* Loop to read all blocks in the dataset\n         DO    UNTIL,COPYEOF           * Until EOF detected\n          MVPL COPYDECB,CPY_DECB       * Set up initial DECB\n          USE  DECB,COPYDECB           * Set DECB fields addressable\n          CPY  R_TMP,R_BUFS            * Set ptr to BSAM buffer\n          READ COPYDECB,SF,            * Read forward                  *\n               COPYDCBS,(R_TMP),'S',   *  1 block from input dataset   *\n               MF=E                    *\n          CHECK COPYDECB               * Wait for READ to complete\n          IF   NOT,COPYEOF             * Valid block was read?\n* For Fixed records: use IOB to determine end-of-buffer\n* For Variable records: use BDW to determine end-of-buffer\n           IF  IN.DCBRECF              * Fixed or FB input records?\n            CPY R_LEN,IN.DCBBLKSI      * Load input block length\n            USE IOBSTDRD,R_IOB         * Set IOB addressable\n            CPY R_IOB,DECIOBPT         * And point to IOB\n            CPY R_TMP,IOBRESCT         * Load residual count\n            DROP R_IOB                 * IOB no longer needed\n            SR R_LEN,R_TMP             * Nr of bytes in input buffer\n            AR R_LEN,R_BUFS            * Point past end of data\n            ST R_LEN,COPYBUFE          * Save end-of-block ptr\n            ST R_BUFS,COPYREC          * Set ptr to current record\n           ELSE  ,                     * Must be variable or VB records\n            USE BDW,R_BDW              * Address block descriptor word\n            CPY R_BDW,R_BUFS           * Point to filled buffer\n            CPY R_LEN,BDWBLKLN         * Retrieve length of block\n            AR  R_LEN,R_BUFS           * Point past end of data\n            ST  R_LEN,COPYBUFE         * Set ptr to end of buffer\n            LA  R_TMP,BDW_LEN(,R_BUFS) * Point to first RDW in buffer\n            CPY COPYREC,R_TMP          * Set ptr to current record\n            DROP R_BDW                 * Buffer ptr no longer needed\n           ENDIF ,                     *\n           EXSR CPYBLK                 * Go copy a block to output\n          ENDIF ,                      *\n         ENDDO ,                       *\n*\n* Free the output record buffer\n         CPY   R_LEN,OUT.DCBLRECL      * Obtain output record length\n         STORAGE RELEASE,ADDR=(R_BUFO), * Free storage allocated       *\n               LENGTH=(R_LEN)          *   for a single record\n         DROP  R_BUFO                  * Buffer ptr no longer valid\n         CLEAR COPYBUFO                * And wipe ptr in storage too\n*\n* Free the BSAM input buffer\n         CPY   R_LEN,IN.DCBBLKSI       * Obtain input block size\n         STORAGE RELEASE,ADDR=(R_BUFS), * Free storage allocated       *\n               LENGTH=(R_LEN)          *   for a single block\n         DROP  R_BUFS                  * Buffer ptr no longer valid\n         CLEAR COPYBUFI                * And wipe ptr in storage too\n*\n* Close the input dataset (or concatenation)\n         MVPL  COPYCLOS,CPY_CLOS       * Copy close parmlist\n         CLOSE (COPYDCBS),MF=(E,COPYCLOS) * Close the input dataset(s)\n         ABND  TSTRC,RCD=R_RCD         * Abend on failure\n*\n* Close the output dataset\n         MVPL  COPYCLOS,CPY_CLOS       * Copy close parmlist\n         CLOSE (COPYDCBO),MF=(E,COPYCLOS) * Close the input dataset(s)\n         ABND  TSTRC,RCD=R_RCD         * Abend on failure\n*\n* Release registers\n         DROP  R_RCD                   *\n         DROP  R_LEN                   *\n*\n         ENDSR ,\n***********************************************************************\n*\n* Routine to write an entire block\n*\n* At entry: COPYREC  points to first record in buffer\n*           COPYBUFE points to end-of-buffer\n*           COPYBUFO points to output record buffer\n*\n***********************************************************************\nCPYBLK   BEGSR ,\n*\n* Set up to loop thru the block\n         CPY   R_BUFO,COPYBUFO         * Point to output record area\n         USE   R_BUFO                  * and set register in use\n*\nR_REC    EQUREG ,                      * Assign record ptr\nRDWIN    USE   RDW,R_REC               * Assume RECFM=V or VB\n*\n* No distinction is made between COPYDCBP (BPAM) and COPYDCBS (BSAM)\nIN       USE   DCB,COPYDCBP            * Set DCB fields addressable\nOUT      USE   DCB,COPYDCBO            * Set DCB fields addressable\n*\n* For each record in the buffer:\n* - determine length, advance current record pointer\n* - copy record, truncate if too long, pad if too short\n* - write record to output dataset\n*\n         DO    WHILE,COPYREC,LT,COPYBUFE * For each record in buffer\n*         Determine length, advance current record pointer\n          CPY  R_REC,COPYREC           * Copy ptr to current record\n          IF   IN.DCBRECF              * Fixed record length:\n           CPY R_LEN,IN.DCBLRECL       * Retrieve rec length from DCB\n           CPY R_TMP,R_REC             * Copy current record ptr\n           INC R_TMP,(R_LEN)           * Point to next record\n           CPY COPYREC,R_TMP           * Update current record ptr\n          ELSE ,                       * Variable records:\n           CPY R_LEN,RDWIN.RDWRECLN    * Retrieve length of record\n           CPY R_TMP,R_REC             * Copy current record pointer\n           INC R_TMP,(R_LEN)           * Point next record in buffer\n           CPY COPYREC,R_TMP           * Update current record pointer\n           INC R_REC,RDW_LEN           * Point to start of record data\n           DEC R_LEN,RDW_LEN           * And adjust data length\n          ENDIF ,                      *\n*         R_REC now points data, R_LEN holds data length\n*         Copy record, truncate if too long, pad if too short\n          IF   OUT.DCBRECF             * Fixed record length:\n           IF  R_LEN,GT,OUT.DCBLRECL   * Record is too long?\n            CPY R_LEN,OUT.DCBLRECL     * Yes: truncate\n           ENDIF ,                     *\n           IF  R_LEN,LE,256            * Length is legal?\n            EXMVC 0(R_LEN,R_BUFO),0(R_REC) * Copy the data\n           ELSE ,                      * Length too large\n            ABND ,                     *\n           ENDIF ,                     *\n           IF  R_LEN,LT,OUT.DCBLRECL   * Wipe remainder of buffer?\n            LA R_TMP,0(R_BUFO,R_LEN)   * Yes: point to remainder start\n            SH R_LEN,OUT.DCBLRECL      *      and set remainder size\n            IF R_LEN,LE,256            * Length is legal?\n             EXXC 0(R_LEN,R_TMP),0(R_TMP) * Wipe remainder\n            ELSE ,                     * Length too large\n             ABND ,                    *\n            ENDIF ,                    *\n           ENDIF ,                     * End of wipe for short records\n          ELSE  ,                      * Must be V or VB records\n           DROP R_BUFO                 * Drop to swap using status\nRDWOUT     USE RDW,R_BUFO              * Record starts with a RDW\n           INC R_LEN,RDW_LEN           * Add size of RDW to lrecl\n           IF  R_LEN,GT,OUT.DCBLRECL   * Record is too long?\n            CPY R_LEN,OUT.DCBLRECL     * Yes: truncate\n           ENDIF ,                     *\n           CPY RDWOUT.RDWRECLN,R_LEN   * Set length in RDW\n           CLEAR RDWOUT.RDWT00         * Wipe trailing zeroes\n           DEC R_LEN,RDW_LEN           * Reduce to data length\n           IF  R_LEN,LE,256            * Length is legal?\n            EXMVC RDW_LEN(R_LEN,R_BUFO),0(R_REC) * Copy the data\n           ELSE ,                      * Length too large\n            ABND ,                     *\n           ENDIF ,                     *\n          ENDIF ,                      * Output buffer now ready\n*         Output buffer now complete: write record to output\n          PUT  COPYDCBO,(R_BUFO)       * Write record to output dataset\n         ENDDO ,                       *\n*\n         ENDSR ,                       *\n***********************************************************************\n*\n* Retry routine after System 013 abend\n*\n***********************************************************************\nRETRY013 BEGSR TYPE=RETRY              *\n*\nIN       USE   DCB,COPYDCBS            * Set DCB fields addressable\nOUT      USE   DCB,COPYDCBO            * Set DCB fields addressable\n*\n* Setup fresh output DCB\n         MVPL  COPYDCBO,CPY_DCBO       * Copy output DCB\n*\n* Copy LRECL, BLKSIZE, and record format from input DCB\n         CPY   OUT.DCBBLKSI,IN.DCBBLKSI * Copy block size\n         CPY   OUT.DCBLRECL,IN.DCBLRECL * Copy record length\n         CPY   OUT.DCBRECFM,IN.DCBRECFM * Copy record format\n*\n* Retry the open\n         GOTO  CPYMEM_OPEN,COPYMEM     * Retry for member copy\n         GOTO  CPYPS_OPEN,COPYPS       * Retry for PS dataset copy\n         ABND  ,                       * Error!\n*\n         DROP  IN                      * DCB fields no longer\n         DROP  OUT                     *     needed\n*\n         ENDSR ,                       *\n***********************************************************************\n*\n* Constants etc.\n*\n***********************************************************************\n         LTORG ,                       *\n***********************************************************************\n*\n* Out-of-line routinse\n*\n***********************************************************************\nEODADRTN LABEL H                       * Ensure alignment\n         SETON COPYEOF                 * Indicate EOF reached\n         BR    R14                     * Return\n***********************************************************************\n*\n* Recovery routine\n*\n***********************************************************************\nRECOVER  BEGSR TYPE=ESTAE,             * Estae recovery routine        *\n               LVL=1                   * For normal code\n*\n* Do we have an SDWA?\n         GOTO  RECPERC,R0,EQ,12        * No SDWA: percolate\n*\n* SDWA found\nR_SDWA   EQUREG ,                      *\n         LR    R_SDWA,R1               * Copy SDWA pointer\n         USE   SDWA,R_SDWA             * And set SDWA addressable\n*\n* If registers at time of error unavailable: do not retry\n         GOTO  SETRP0,SDWARPIV         * Regs not available: percolate\n*\n* This is a recoverable abend?\n         CASE  SDWACMPC,EQ,=X'013000'  * System 013 is recoverable\n          GOTO SYS013                  * Retry if original SVC abended\n         ELSE  ,                       * All other abends\n          GOTO SETRP0                  * Percolate\n         ENDCASE ,                     *\n         GOTO  SETRP0                  * Always percolate\n*\n* We encountered a S013 abend, meaning that open could not complete\n* successfully. If reasoncode is 34 some DCB parameters are missing\n* and must be copied from the input DCB before retrying the open.\nSYS013   LABEL ,                       *\nR_PTRS   EQUREG ,                      * Assign ptr to pointers block\n         USE   SDWAPTRS,R_PTRS         * And set it addressable\n         L     R_PTRS,SDWAXPAD         * Point to pointers block\nR_RC1    EQUREG ,                      * Assign ptr service extension 1\n         USE   SDWARC1,R_RC1           * And set it addressable\n         L     R_RC1,SDWASRVP          * Point to service extension 1\n         GOTO  SETRP0,NOT,SDWARCF      * Reasoncode must be available\n         GOTO  SETRP0,SDWAHRC,NE,52    * Reasoncode must be 34 hex\n*\n* Open failed due to incomplete DCB\nIN       USE   DCB,COPYDCBS            * Set DCB fields addressable\nOUT      USE   DCB,COPYDCBO            * Set DCB fields addressable\n*\n* Make sure input DCB is open and output DCB is not\n         GOTO  SETRP0,NOT,IN.DCBOFOPN  * No retry: input not open\n         GOTO  SETRP0,OUT.DCBOFOPN     * No retry: output is open\n*\n* Make sure we don't retry more than once\n         GOTO  SETRP0,COPYRTRY         * No retry: retried before\n         SETON COPYRTRY                * Indicate retry performed\n*\n* Setup for retry\n         L     R0,=AL4(RETRY013)       * Retrieve address of retry-rout\n         B     SETRP4                  * And go retry\n*\n         DROP  R_RC1                   * SDWARC1 not needed anymore\n         DROP  R_PTRS                  * SDWAPTRS no longer needed\n         DROP  R_SDWA                  * SDWA no longer needed\n*\n* Percolate\nSETRP0   LABEL ,                       * SETRP RC=0: percolate\n         SETRP RC=0,                   * Retcode 0 to percolate        *\n               WKAREA=(R_SDWA)         * Point to SDWA\n         B     RECEXIT                 *\n*\n* Tell system to retry\nSETRP4   LABEL ,                       * SETRP RC=4: retry\n         SETRP RC=4,                   * Retcode 0 to percolate        *\n               WKAREA=(R_SDWA),        * Points to SDWA                *\n               DUMP=NO,                * Suppress dump                 *\n               RETADDR=(R0),           * Retry address in R0           *\n               RETREGS=YES,            * Restore registers from SDWA   *\n               FRESDWA=YES,            * Free SDWA before retry        *\n               RECORD=NO               * Do not record in LOGREC\n         B     RECEXIT                 *\n*\n* Percolate: no SDWA\nRECPERC  LABEL ,                       *\n         CLEAR R15                     * RC=0 to percolate\n*\nRECEXIT  LABEL ,                       *\n         ENDSR RC=*,                   * When RC=4 (retry)             *\n               KEEPREG=R0              *   R0 contains retry address\n***********************************************************************\n*\n* Indirectly addressable Plists and constants\n*\n***********************************************************************\nTRTAB1   TRTAB ,                       * Select no characters          *\n               CHARS=(C'=')            * Except equal sign\n*\nCPY_ESTAE ESTAE 0,                     * Establish ESTAE routine       *\n               MF=L                    *\n*\nCPY_DCBP DCB   DDNAME=INPUT,           * Model input DCB for BPAM      *\n               DSORG=PO,               * Partitioned organization      *\n               DCBE=CPY_DCBE,          * For use in 31-bit environment *\n               MACRF=R                 * And read-only\n*\nCPY_DCBS DCB   DDNAME=INPUT,           * Model input DCB for BSAM      *\n               DSORG=PS,               * Physical sequential           *\n               DCBE=CPY_DCBE,          * For use in 31-bit environment *\n               MACRF=R                 * And read-only\n*\nCPY_DCBE DCBE  EODAD=EODADRTN          * DCB-extension prototype\n*\n         READ  CPY_DECB,SF,MF=L        * DECB prototype\n*\nCPY_DCBO DCB   DDNAME=OUTPUT,          * Model output DCB              *\n               DSORG=PS,               * Sequential file               *\n               MACRF=PM                * Use Put-Move\n*\nCPY_OPEN OPEN  (0,INPUT),MF=L          *\nCPY_CLOS CLOSE (0),MF=L                *\n*\n         END\n./ ADD NAME=BXAIO    0100-20110-20110-2315-00392-00392-00000-BXAASM  15\nBXAIO    TITLE 'Static stub for dynamic I/O routine BXAIO00'\n***********************************************************************\n* Start create : 20-03-1989\n* 1st delivery : 15-08-1989\n* Designer     : AF Kornelis\n* Programmer   : AF Kornelis\n* Reason       : Untie logical record lay-outs from physical file\n*                structure\n***********************************************************************\n* Change 01    : 21-06-1990\n* Programmer   : JB\n* Reason       : Added 2 logical record lay-outs: PDD and CSC\n***********************************************************************\n* Change 02    : 31-10-1991\n* Programmer   : JB\n* Reason       : Added 1 logical record lay-out: CCX\n***********************************************************************\n* Change 03    : 31-05-1992\n* Programmer   : JB\n* Reason       : Added 1 logical record lay-out: ACD\n***********************************************************************\n* Change 04    : 31-05-1996\n* Programmer   : JB\n* Reason       : Added 1 logical record lay-out: SVD\n***********************************************************************\n* Change 05    : Summer 2001\n* Programmer   : Abe F. Kornelis\n* Reason       : Replace register numbers with names\n*                Improve comments\n***********************************************************************\n         EJECT ,                       *\n         PRINT GEN                     *\n         ENTRY BXAIOCCD                * Customer Contract Data\n         ENTRY BXAIOCPD                * Customer Personal Data\n         ENTRY BXAIOCCX                * Customer Contract eXtension\n         ENTRY BXAIOPDD                * Product Definition Data\n         ENTRY BXAIOCSC                * Capitalized Savings/Contract\n         ENTRY BXAIOACD                * ACcounting Data\n         ENTRY BXAIOSVD                * SaVings Details\n***********************************************************************\n* Change implemented on 9-7-2001: use DSECT for entry parm lay-out\nHDRDATA  DSECT ,                       * HeaDeR DATA\n         B     0                       * Skip header: dummy instruction\n         DS    AL1,CL24                * Entry Point descriptor\nMOVEIN   DS    A                       * Setup routine for parameter 2\nMOVEOUT  DS    A                       * Output conversion routine\n* End of change d.d. 9-7-2001\n***********************************************************************\n* Change implemented on 9-7-2001: use register equates\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n* End of change d.d. 9-7-2001\n***********************************************************************\nBXAIO    START 0                       *\nBXAIO    AMODE ANY\nBXAIO    RMODE ANY\n***********************************************************************\n* Change implemented on 10-7-2001: add error message and abend\n         USING BXAIO,R15               * Establish addressability\n         B     BXAIO_GO                * Skip header data\n         DC    AL1(24),CL24'BXAIO    &SYSDATE &SYSTIME'\n         DC    A(0)                    * Setup routine for parameter 2\n         DC    A(0)                    * Output conversion routine\nBXAIO_GO EQU   *\n         LR    R12,R15                 * Copy base address\n         DROP  R15                     * No longer needed\n         USING BXAIO,R12               * Re-establish addressability\n         WTO   'BXAIO - Illegal entry point into mudule',              *\n               ROUTCDE=11,DESC=7\n         DC    X'0000'                 * Force a S0C1 abend\n         CNOP  0,8                     * Re-align on doubleword\n         DROP  R12                     * End of error logic\n* End of change d.d. 9-7-2001\n***********************************************************************\n         SPACE 2\n         USING BXAIOCCD,R15            * Establish addressability (CCD)\nBXAIOCCD B     IOCCD_GO                * Skip header data\n         DC    AL1(24),CL24'BXAIOCCD &SYSDATE &SYSTIME'\n         DC    A(CCDIN)                * Setup routine for parameter 2\n         DC    A(CCDOUT)               * Output conversion routine\n*\nIOCCD_GO EQU   *\n         STM   R14,R12,12(R13)         * Save caller's registers\n         LA    R3,BXAIOGO              * Set base register\n         BR    R3                      * and execute main line\n         CNOP  0,8                     * Re-align on doubleword\n         DROP  R15                     * End of entry logic for CCD\n*\n         SPACE 2\n         USING BXAIOCPD,R15            * Establish addressability (CPD)\nBXAIOCPD B     IOCPD_GO                * Skip header data\n         DC    AL1(24),CL24'BXAIOCPD &SYSDATE &SYSTIME'\n         DC    A(CPDIN)                * Setup routine for parameter 2\n         DC    A(CPDOUT)               * Output conversion routine\n*\nIOCPD_GO EQU   *\n         STM   R14,R12,12(R13)         * Save caller's registers\n         LA    R3,BXAIOGO              * Set base register\n         BR    R3                      * and execute main line\n         CNOP  0,8                     * Re-align on doubleword\n         DROP  R15                     * End of entry logic for CPD\n*\n         SPACE 2\n         USING BXAIOCCX,R15            * Establish addressability (CCX)\nBXAIOCCX B     IOCCX_GO                * Skip header data\n         DC    AL1(24),CL24'BXAIOCCX &SYSDATE &SYSTIME'\n         DC    A(CCXIN)                * Setup routine for parameter 2\n         DC    A(CCXOUT)               * Output conversion routine\n*\nIOCCX_GO EQU   *\n         STM   R14,R12,12(R13)         * Save caller's registers\n         LA    R3,BXAIOGO              * Set base register\n         BR    R3                      * and execute main line\n         CNOP  0,8                     * Re-align on doubleword\n         DROP  R15                     * End of entry logic for CCX\n*\n         SPACE 2\n         USING BXAIOPDD,R15            * Establish addressability (PDD)\nBXAIOPDD B     IOPDD_GO                * Skip header data\n         DC    AL1(24),CL24'BXAIOPDD &SYSDATE &SYSTIME'\n         DC    A(PDDIN)                * Setup routine for parameter 2\n         DC    A(PDDOUT)               * Output conversion routine\n*\nIOPDD_GO EQU   *\n         STM   R14,R12,12(R13)         * Save caller's registers\n         LA    R3,BXAIOGO              * Set base register\n         BR    R3                      * and execute main line\n         CNOP  0,8                     * Re-align on doubleword\n         DROP  R15                     * End of entry logic for PDD\n*\n         SPACE 2\n         USING BXAIOCSC,R15            * Establish addressability (CSC)\nBXAIOCSC B     IOCSC_GO                * Skip header data\n         DC    AL1(24),CL24'BXAIOCSC &SYSDATE &SYSTIME'\n         DC    A(CSCIN)                * Setup routine for parameter 2\n         DC    A(CSCOUT)               * Output conversion routine\n*\nIOCSC_GO EQU   *\n         STM   R14,R12,12(R13)         * Save caller's registers\n         LA    R3,BXAIOGO              * Set base register\n         BR    R3                      * and execute main line\n         CNOP  0,8                     * Re-align on doubleword\n         DROP  R15                     * End of entry logic for CSC\n*\n         SPACE 2\n         USING BXAIOACD,R15            * Establish addressability (ACD)\nBXAIOACD B     IOACD_GO                * Skip header data\n         DC    AL1(24),CL24'BXAIOACD &SYSDATE &SYSTIME'\n         DC    A(ACDIN)                * Setup routine for parameter 2\n         DC    A(ACDOUT)               * Output conversion routine\n*\nIOACD_GO EQU   *\n         STM   R14,R12,12(R13)         * Save caller's registers\n         LA    R3,BXAIOGO              * Set base register\n         BR    R3                      * and execute main line\n         CNOP  0,8                     * Re-align on doubleword\n         DROP  R15                     * End of entry logic for ACD\n*\n         SPACE 2\n         USING BXAIOSVD,R15            * Establish addressability (SVD)\nBXAIOSVD B     IOSVD_GO                * Skip header data\n         DC    AL1(24),CL24'BXAIOSVD &SYSDATE &SYSTIME'\n         DC    A(SVDIN)                * Setup routine for parameter 2\n         DC    A(SVDOUT)               * Output conversion routine\n*\nIOSVD_GO EQU   *\n         STM   R14,R12,12(R13)         * Save caller's registers\n         LA    R3,BXAIOGO              * Set base register\n         BR    R3                      * and execute main line\n         CNOP  0,8                     * Re-align on doubleword\n         DROP  R15                     * End of entry logic for SVD\n*\n         EJECT\n         USING BXAIOGO,R3              * Declare base register\nBXAIOGO  EQU   *\n         LA    R14,SAVEAREA            * Retrieve address of save-area\n         ST    R13,4(R14)              * Set backward pointer\n         XR    R0,R0                   * Set to zero for compare\n         C     R0,0(R13)               * Old save-area is PL/I ??\n         BNE   *+8                     * Yes: no forward pointer !!\n         ST    R14,8(R13)              * Set forward pointer\n         LR    R13,R14                 * and switch to new save-area\n*\n         SPACE 3\n         LR    R4,R15                  * Set base reg to entry point\n         USING HDRDATA,R4              * Inserted 7-9-2001\n*\n         OI    PLIST+4,X'80'           * Set end-of-plist\n         LTR   R1,R1                   * Plist ??\n         BZ    NOPARM                  * No: no conversion\n*  Sometimes end-of-plist marker is missing.\n**       TM    0(1),X'80'              * End-of-plist correct ??\n**       BNO   NOPARM                  * No: no conversion\n         L     R1,0(R1)                * Get address of parameter\n         LA    R1,0(R1)                * Strip end-of-plist bit\n         LTR   R1,R1                   * Address is valid ??\n         BZ    NOPARM                  * No: no conversion\n         ST    R1,PLIST                * Store address of input-parm\n*\n         L     R15,MOVEIN              * Get addr of move-input routine\n         BASR  R14,R15                 * and execute it\n*\nLOAD     ICM   R15,B'1111',ENTRY       * First time: load BXAIO00\n         BNZ   BXAIO00                 * thereafter: execute immediate\n*\n         SPACE 3\n         LOAD  EP=BXAIO00,ERRET=ERROR  * Load dynamic I/O routine\n         B     LOADOK                  * I/O routine correctly loaded\n*\nERROR    WTO   'BXAIO - 68 - Cannot load dynamic module BXAIO00',      *\n               ROUTCDE=11,DESC=7\n         LA    R10,68                  * Load reasoncode\n         L     R1,PLIST                * Get address of parameter\n         LTR   R1,R1                   * Valid ??\n         BZ    EXITERR                 * No: quit\n         MVI   2(R1),C'5'              * Set retcode in caller's parm\n         B     EXITERR\n*\nLOADOK   ST    R0,ENTRY                * Save address of load module\n         XC    LNSUAPTR,LNSUAPTR       * Set user-area pointer to zeros\n         LR    R15,R0                  * Copy entry point address\n*\n         SPACE 3\nBXAIO00  EQU   *\n         LA    R1,PLIST                * Get addr of plist for BXAIO00\n         BASSM R14,R15                 * and execute BXAIO00\n*\n         LTR   R10,R15                 * BXAIO00 was ok ??\n         BZ    CONTINUE                * Yes: fill caller's parameter\n         L     R1,PLIST                * Retrieve address of parm\n         LTR   R1,R1                   * Is it valid ??\n         BZ    CONTINUE                * No: cannot process the error\n*\n         CLI   2(R1),C'1'              * EOF / record not found ??\n         BE    CONTINUE                * Yes: use exit after error\n*\n         CH    R10,=H'025'             * If userarea could not be freed\n         BNE   NOWIPEUA                * then LNSUAPTR may be invalid\n         XC    LNSUAPTR,LNSUAPTR       * and is therefore to be cleared\nNOWIPEUA EQU   *\n         CLI   2(R1),C'2'              * Error is just a warning ??\n         BE    CONTINUE                * Yes: return output to caller\n         CLI   2(R1),C'0'              * Errorcode set ??\n         BNE   EXITERR                 * Yes: use exit-after-error\n*                                      * Returncode not set: set it\n         CH    R10,=H'025'             * Userarea freeing error ??\n         BNE   NOTERR25                * No: skip setting code 2\n         MVI   2(R1),C'2'              * Set error level to two\n         B     CONTINUE                * and carry on accordingly\nNOTERR25 EQU   *\n*\n         CH    R10,=H'026'             * No parameter-error ??\n         BNE   NOTERR26                * No: skip setting code 3\n         MVI   2(R1),C'3'              * Set error level to three\n         B     EXITERR                 * And use exit-after-error\nNOTERR26 EQU   *\n*\n         MVI   2(R1),C'5'              * Other error: set RCODE to 5\n         B     EXITERR                 * and use exit-after-error\n*\n         EJECT\nCONTINUE EQU   *                       * Statements disabled:no moveout\n*\n**!!     L     R1,PLIST                * Get address of parm in caller\n**!!     L     R15,MOVEOUT             * Get addr of move-output routin\n**!!     BASR  R14,R15                 * and execute it\n*\n         CLC   LNSUAPTR,=F'0'          * USERAREA de-allocated ??\n         BNE   EXITERR                 * No: leave BXAIO00 in storage\n         DELETE EP=BXAIO00             * Remove dynamic mod from memory\n         LTR   R15,R15                 * Delete was ok ??\n         BNE   DELETERR                * No: issue delete error\n         XC    ENTRY,ENTRY             * Next call: reload dynamic mod\n*\nEXITERR  EQU   *\n         LR    R15,R10                 * Restore saved reasoncode\n*\nEXIT     EQU   *\n         L     R13,4(R13)              * Retrieve addr of old save-area\n         L     R14,12(R13)             * Restore return address\n         LM    R0,R12,20(R13)          * Restore all other registers\n         BR    R14                     * and return with retcode\n*\nDELETERR WTO   'BXAIO - 74 - Cannot remove dymanic module BXAIO00',    *\n               ROUTCDE=11,DESC=7\n         LA    R10,74                  * Load reasoncode\n         L     R1,PLIST                * Get address of parameter\n         LTR   R1,R1                   * Valid ??\n         BZ    EXITERR                 * No: quit\n         MVI   2(R1),C'5'              * Set retcode in caller's parm\n         B     EXITERR\n*\n         SPACE 3\n* Reset end-of-plist bit to cause error - to be issued by BXAIO00\nNOPARM   EQU   *                       * No parameter given by applic.\n         NI    PLIST+4,X'7F'           * Reset end-of-plist bit\n         B     LOAD                    * And go call to issue error\n         DROP  4                       * Inserted 7-9-2001\n*\n         EJECT\nCCDIN    EQU   *                       * Movein of BXAIOCCD\n         MVC   LNSVERSI,=C'01'         * Set parameter version to 01\n         MVC   LNSFILES,=C'10000000'   * Select all files for CCD-parm\n         BR    R14                     * Return to mainline\n*\nCCDOUT   EQU   *                       * Moveout of BXAIOCCD\n         BR    R14                     * Return to mainline\n*\n         SPACE 2\nCPDIN    EQU   *                       * Movein of BXAIOCPD\n         MVC   LNSVERSI,=C'02'         * Set parameter version to 02\n         MVC   LNSFILES,=C'01000000'   * Select all files for CPD-parm\n         BR    R14                     * Return to mainline\n*\nCPDOUT   EQU   *                       * Moveout of BXAIOCPD\n         BR    R14                     * Return to mainline\n*\n         SPACE 2\nCCXIN    EQU   *                       * Movein of BXAIOCCX\n         MVC   LNSVERSI,=C'03'         * Set parameter version to 03\n         MVC   LNSFILES,=C'00100000'   * Select all files for CCX-parm\n         BR    R14                     * Return to mainline\n*\nCCXOUT   EQU   *                       * Moveout of BXAIOCCX\n         BR    R14                     * Return to mainline\n*\n         SPACE 2\nPDDIN    EQU   *                       * Movein of BXAIOPDD\n         MVC   LNSVERSI,=C'04'         * Set parameter version to 04\n         MVC   LNSFILES,=C'00010000'   * Select all files for PDD-parm\n         BR    R14                     * Return to mainline\n*\nPDDOUT   EQU   *                       * Moveout of BXAIOPDD\n         BR    R14                     * Return to mainline\n*\n         SPACE 2\nCSCIN    EQU   *                       * Movein of BXAIOCSC\n         MVC   LNSVERSI,=C'05'         * Set parameter version to 05\n         MVC   LNSFILES,=C'00001000'   * Select all files for CSC-parm\n         BR    R14                     * Return to mainline\n*\nCSCOUT   EQU   *                       * Moveout of BXAIOCSC\n         BR    R14                     * Return to mainline\n*\n         SPACE 2\nACDIN    EQU   *                       * Movein of BXAIOACD\n         MVC   LNSVERSI,=C'06'         * Set parameter version to 06\n         MVC   LNSFILES,=C'00000100'   * Select all files for ACD-parm\n         BR    R14                     * Return to mainline\n*\nACDOUT   EQU   *                       * Moveout of BXAIOACD\n         BR    R14                     * Return to mainline\n*\n         SPACE 2\nSVDIN    EQU   *                       * Movein of BXAIOSVD\n         MVC   LNSVERSI,=C'07'         * Set parameter version to 07\n         MVC   LNSFILES,=C'00000010'   * Select all files for SVD-parm\n         BR    R14                     * Return to mainline\n*\nSVDOUT   EQU   *                       * Moveout of BXAIOSVD\n         BR    R14                     * Return to mainline\n*\n         EJECT\nSAVEAREA DS    9D                      * Save-area for all entry points\nENTRY    DS    F                       * Entry point of dynamic module\nPLIST    DC    A(0)                    * Parameter in application\n         DC    A(LNSPRM2)              * Extra parameter\n*\n         DS    0D\nLNSPRM2  DS    0CL16\nLNSUAPTR DS    A                       * Address of user-area\nLNSVERSI DS    CL2                     * Parameter version number\nLNSFILES DS    CL8                     * Logical files to be used\n         DS    CL2                     * Reserved\n*\n         LTORG\n*\n         END\n./ ADD NAME=BXAIO00  0100-20110-20110-2315-05004-05004-00000-BXAASM  15\nBXAIO00  TITLE 'Dynamic module for VSAM I/O handling'\n***********************************************************************\n* Start create : 20-03-1989\n* 1st delivery : 15-08-1989\n* Designer     : AF Kornelis\n* Programmer   : AF Kornelis\n* Reason       : Untie logical record lay-outs from physical file\n*                structure\n***********************************************************************\n* Change 01    : 22-06-1990\n* Programmer   : JB\n* Reason       : Add 2 logical record lay-outs: PDD and CSC\n*              : Add supporting physical files: PDD and CSC\n***********************************************************************\n* Change 02    : 31-10-1991\n* Programmer   : JB\n* Reason       : Add 1 logical record lay-out: CCX\n*              : Add supporting physical file: CCX\n***********************************************************************\n* Change 03    : 31-05-1992\n* Programmer   : JB\n* Reason       : Add 1 logical record lay-out: ACD\n*              : Add supporting physical file: ACD\n***********************************************************************\n* Change 04    : 31-05-1996\n* Programmer   : JB\n* Reason       : Add 1 logical record lay-out: SVD\n*              : Add supporting physical file: SVD\n*              : These changes were never implemented\n***********************************************************************\n* Change 05    : Summer 2001\n* Programmer   : Abe F. Kornelis\n* Reason       : Remove warning errors from assembly\n*                Improve comments\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n* When maintaining this program, please mind the following:\n* - Never change any data or coding in the program at run-time. For\n*   storing data, always use getmained areas. Otherwise reenterability\n*   will be lost.\n* - When suballocating storage areas (whether getmained or not)\n*   always allocate on a doubleword boundary.\n* - Remember never to use r12, since it contains information that the\n*   PL/I estae/espie-routines need for error/exception handling.\n* - Do not try to call this module recursively: it won't work.\n* - Allocate all variable storage areas from subpool &sp (17). Since\n*   applications get their storage from subpool 0, the chances of\n*   destructive interference between BXAIO00 and application is\n*   minimal. By taking all storage from the same subpool, the\n*   chances of page-faults are minimized.\n* - Debugging is controlled by the &DBG global variable: if it\n*   contains the value 1 then debugging code will be generated,\n*   otherwise debugging code will be skipped.\n* - Optimization (speed and size of load) is controlled by &OPT\n* - The program is reenterable. If it is to become refreshable, remove\n*   the crashmem area and have the uaerr error-exit dump in stead of\n*   using the crashmem area.\n*\n*******\n*\n* The following subjects still need to be taken care of:\n* - IMS/LST conflicts\n* - Check RPL-status before issuing any vsam-request\n* - temporary modifications are marked by **!!\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n* The structure of control blocks used in this program is as follows:\n*   ________\n*  |        |\n*  | Caller |\n*  | BXAIOxxx     ________\n*  |--------|    |        |\n*  |LNSUAPTR|--->|USERAREA|     ________\n*  |________|    |--------|    |        |\n*                |UAFDBPTR|--->|  FDB   |\n*                |________|    |--------|\n*                              |FDBNEXT |---> next FDB --> next FDB etc\n*                              |--------|\n*                              | FDBACB |---> ACB ---> DDNAME ---> FILE\n* LNSUAPTR is a pointer to     |--------|\n*    the USERAREA, where all   | FDBRPL |---> RPL ---> ACB        ____\n*    caller-dependent data     |--------|     _______            | ME |\n*    are to be found.          | FDBMAP |--->|  MME  |---------->|----|\n*                              |________|    |-------|    ____   | ME |\n* UAFDBPTR is the entry to                   |  MME  |-->| ME |  |----|\n*    the chain of FDBs. Each FDB             |-------|   |----|  | .  |\n*    contains information pertaining         |   .   |   | ME |  | .  |\n*    to one physical dataset.                |   .   |   |----|  | .  |\n*                                            |   .   |   | .  |  |____|\n* FDBMAP is a pointer to a list of           |_______|   | .  |\n*    Map-Master-Elements. Each MME                       | .  |\n*    corresponds with one parameter version.             |____|\n*    Thus, for each dataset there is one and only one\n*    MME-list, which is the same for all callers.\n*\n* The MME in turn contains a pointer to a list of Map-Elements.\n*    Each Map-Element specifies one block of data that may be\n*    moved in one piece between the parameter (BXAIOPRM) and a\n*    physical record.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n* The program has been split up into the following sections:\n*              each section has its own addressability.\n*\n* - PHASE1   - housekeeping\n*            - general check of parameter\n* - PHASE2   - evaluation of the requested function code\n*            - setup of FDBs to reflect the request\n*            - phase2 includes the checkxx routines\n* - PHASE3   - execution of the requests\n*            - phase3 includes the rxx routines\n* - PHASE4   - waiting for completion of asynchronous i/o\n*            - post-processing\n*            - cleanup of resources no longer needed\n*            - return to caller\n* - RCHECK   - second level routine that waits for vsam-i/o-completion\n* - ERROR    - error handling routine\n*            - error includes the error exits (for example: vserr)\n* - RSETBASE - lowest-level subroutine, used for returning to a caller\n*              which may or may not use a different base address for\n*              its addressability.\n* - RSNAP    - debugging help routine, linked as a separate subprogram.\n*            - rsnap dumps control blocks that are both defined by this\n*              program and currently in use.\n*\n***********************************************************************\n         EJECT\n*\n* The assembler program accepts as a JCL-parameter a specification\n* for the variable SYSPARM. The value entered in the JCL will be\n* passed to a global set symbol named &SYSPARM. The value specified\n* in the JCL is passed as a single string. This macro decomposes the\n* string into separate parameters. Then the parameters are checked\n* and handled. 4 different keywords are allowed:\n* - DEBUG   : generate debugging code (rsnap routine, etc.)\n* - NODEBUG : do not generate debugging code\n* - OPT     : generate a fully optimized program\n* - NOOPT   : generate a program with complete error checking\n*\n         MACRO\n         CHECKPRM\n*\n         GBLB  &DBG,&OPT\n&DBG     SETB  0                       * Default: no debug coding\n&OPT     SETB  1                       * Default: full optimization\n         AIF   ('.&SYSPARM' EQ '.').EXIT\n*\n* First the SYSPARM string is to be split into substrings\n*\n         LCLC  &P(5)                   * Array to contain parms\n         LCLA  &I,&N,&X\n&I       SETA  0                       * Character indec for &SYSPARM\n&N       SETA  1                       * Next position to extract\n&X       SETA  1                       * Parameter counter (array &P)\n.LOOP1   ANOP\n&I       SETA  &I+1                    * Increment character index\n         AIF   (&I GT K'&SYSPARM).LOOP1X       * End-of-string ??\n         AIF   ('&SYSPARM'(&I,1) NE ',').LOOP1 * End-of-substring ??\n&P(&X)   SETC  '&SYSPARM'(&N,&I-&N)            * Extract substring\n&N       SETA  &I+1                    * Set ptr to start of substring\n&X       SETA  &X+1                    * Increment substring counter\n         AGO   .LOOP1                  * and go check next character\n*\n.LOOP1X  ANOP\n&P(&X)   SETC  '&SYSPARM'(&N,&I-1)     * Extract last substring\n*\n* Now check that keywords are valid\n*                                      * &X now is count of parms\n&I       SETA  0                       * Index into array P\n.LOOP2   ANOP\n&I       SETA  &I+1                    * Increment parm index\n         AIF   (&I GT &X).LOOP2X       * All parms checked ??\n         AIF   ('.&P(&I)' EQ '.').LOOP2 * Skip empty parm\n         AIF   ('.&P(&I)' EQ '.OPT').OPT\n         AIF   ('.&P(&I)' EQ '.NOOPT').NOOPT\n         AIF   ('.&P(&I)' EQ '.DEBUG').DEBUG\n         AIF   ('.&P(&I)' EQ '.NODEBUG').NODEBUG\n         MNOTE 4,'Invalid SYSPARM operand: &P(&I)'\n         AGO   .LOOP2                  * and go try next parm\n*\n.OPT     ANOP\n&OPT     SETB  1\n         MNOTE 0,'Optimized coding will be generated'\n         AGO   .LOOP2\n*\n.NOOPT   ANOP\n&OPT     SETB  0\n         MNOTE 0,'Fault tolerant coding will be generated'\n         AGO   .LOOP2\n*\n.DEBUG   ANOP\n&DBG     SETB  1\n         MNOTE 0,'Debugging code will be included'\n         AGO   .LOOP2\n*\n.NODEBUG ANOP\n&DBG     SETB  0\n         MNOTE 0,'Debugging code will be excluded'\n         AGO   .LOOP2\n*\n.LOOP2X  ANOP\n.EXIT    ANOP\n*\n         MEND\n*\n         EJECT\n*\n* The RSNAP-routine, which is available in debug mode only, may return\n* an error code. If an error code is received, then the error handler\n* should be invoked before continuing. Thus the error will be issued\n* as it should.\n* In order not to have to code the whole protocol for each call to\n* the snap routine an extended snap macro (ESNAP) has been provided.\n* This macro will generate a call to the RSNAP-routine with full\n* error handling.\n*\n         MACRO\n         ESNAP\n*\n         GBLB  &DBG,&ERR\n         AIF   (NOT &DBG).ESNAP\n*\n         L     R15,=AL4(RSNAP)         * Retrieve entry-point of RSNAP\n         BASR  R14,R15                 * Call the RSNAP-routine\n         LTR   R15,R15                 * Error in RSNAP ??\n         AIF   (&ERR).ESNAPER\n         BE    *+14                    * No: skip error handling\n         OI    UASTAT,UASNAPER         * Indicate snap is in error\n         L     R3,=AL4(ERROR)          * Load address of error handler\n         BASR  R14,R3                  * Issue error, then return here\n*\n         MEXIT ,                       * Macro complete\n*\n.ESNAPER ANOP  ,                       * Snap error in error-handler\n         BE    *+16                    * No: skip error handling\n         OI    UASTAT,UASNAPER         * Indicate snap is in error\n         L     R14,UAERRSAV            * Reload original return address\n         B     ERROR                   * Restart error handler\n*\n.ESNAP   ANOP\n         MEND\n*\n         EJECT\n         PRINT NOGEN\n*\n* Register equates\n*\nR0       EQU   0                       * Work register\nR1       EQU   1                       * Work register\nR2       EQU   2                       * Work register\nR3       EQU   3                       * Base register\nR4       EQU   4                       * Pointer to parameter area\nR5       EQU   5                       * Pointer to current FDB\nR6       EQU   6                       *\nR7       EQU   7                       *\nR8       EQU   8                       *\nR9       EQU   9                       *\nR10      EQU   10                      *\nR11      EQU   11                      * Data-area ptr (constants etc.)\nR12      EQU   12                      * Reserved for pli-environment\nR13      EQU   13                      * USERAREA pointer (see note)\nR14      EQU   14                      * Return address\nR15      EQU   15                      * Entry point addr / return code\n*\n* Note: Since the save-area is placed first in the user-data area\n*       R13 is a pointer to both of these areas.\n*\n         SPACE 3\n*\n* The global &DBG controls debug/nodebug assembling options\n* - when &dbg = 1 then debugging is active.\n* The global &opt controls optimization.\n* - when &opt = 1 then full optimization takes place.\n* - when &opt = 0 then full fault tolerance will be generated.\n*\n         GBLB  &DBG,&OPT\n* Check &SYSPARM to set &DBG and &OPT\n         CHECKPRM\n*\n         GBLB  &ERR\n&ERR     SETB  0                       * Not assembling error-routine\n*\n         SPACE 3\n*\n         GBLA  &NOOFFDB,&AANTFIL,&MAXKEY,&SP\n&NOOFFDB SETA  8                       * Nr of fdbs to be allocated\n&AANTFIL SETA  6                       * Max. nr of files\n&MAXKEY  SETA  15                      * Length of longest key\n&SP      SETA  17                      * Subpoolnr for storage requests\n* The number 17 was chosen arbitrarily.\n* Any number between 1 and 127 will do.\n*\n         SPACE 3\n*\n* To keep the code reentrant, it is required that we have a workarea\n* where code (to be modified) can be copied, before it is changed.\n* Here we set up a global variable that contains the length we need.\n* Whenever anything is moved into the workarea (uaworkar) make sure\n* that it does not extend beyond the allocated area. If more room is\n* needed for a workarea, increase the &WORKLV variable. If the &WORKLV\n* is changed, always change it to a multiple of 8. Thus correct\n* alignment is ensured for the data fields following the workarea.\n*\n         GBLA  &WORKLV                 * Var to contain required length\n&WORKLV  SETA  160                     * Greatest length we expect\n*\n         SPACE 3\n*\n         GBLC  &PRT                    * Controls print option\n&PRT     SETC  'NOGEN'                 * Nogen is default\n         AIF   (NOT &DBG).NOGEN        * When debugging then\n&PRT     SETC  'GEN'                   *   generate full listing\n.NOGEN   ANOP\n         PRINT &PRT                    * Set print option\n*\n         EJECT\n*\n* Setup save area, and establish addressability. For a save-area\n* storage must be obtained from the system. The address of this\n* private save-area is saved for subsequent calls.\n*\nBXAIO00  CSECT\nBXAIO00  AMODE 31                      * 31-bit addressing\nBXAIO00  RMODE 24                      * Residency below 16m\n*\nPHASE1   EQU   *\n         USING BXAIO00,R15             * R15 assumed base\n         B     BXAIO000                * Branch around text\n         DC    AL1(23),CL23'BXAIO00 &SYSDATE &SYSTIME'\nCONSTADR DC    AL4(CONST)              * Address of data-area\nBXAIO000 STM   R14,R12,SAVEDR14(R13)   * Save regs of calling module\n         LR    R3,R15                  * Pick up base register\n         DROP  R15                     * Switch from temporary\n         USING PHASE1,R3               * to permanent base register\n*\n         L     R11,CONSTADR            * Get address of data-area\n         USING CONST,R11               * and establish addressability\n*\n         XR    R6,R6                   * Provide for hex-zeroes\n*\n* Obtain address of parameter from caller. If invalid, issue error.\n*\n         AIF   (&OPT).GOTPARM\n         LTR   R1,R1                   * Is a plist given ??\n         BNE   GOTPARM                 * Yes, skip error\nNOPARM   LA    R15,026                 * Indicate error number\n         L     R14,=AL4(EXIT)          * Let error return to exit\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, then exit\n*\nGOTPARM  TM    4(R1),X'80'             * Is the 2nd word the last one ?\n         BNO   NOPARM                  * No: argument(s) invalid\n.GOTPARM L     R4,0(R1)                * Get 1st plist element\n         AIF   (&OPT).GOTPRM2\n         LA    R4,0(R4)                * Nullify leading bits\n         LTR   R4,R4                   * Is it valid ??\n         BZ    NOPARM                  * No: go issue error\n.GOTPRM2 ANOP\n         USING DS83PARM,R4             * Use R4 to address parm area\n         USING DSFDB,R5                * Use R5 to address current FDB\n*\n         L     R2,4(R1)                * Load address of second parm\n         LA    R2,0(R2)                * Remove end-of-plist marker\n         AIF   (&OPT).FASE110\n         LTR   R2,R2                   * Is it valid ??\n         BZ    NOPARM                  * No: go issue error\n*\n.FASE110 USING DS83PRM2,R2             * Use R2 to address parm 2\n         L     R1,LNSUAPTR             * Get address of USERAREA\n         LTR   R1,R1                   * Is address valid ??\n         BNZ   GOTM                    * If not allocated: get storage\n*\n         SPACE 3\n*\n* Since the private save-area-pointer is invalid, this must be the\n* first call. Therefore storage is to be obtained for the USERAREA\n* (including the new save-area). Storage for run-time FDBs is\n* obtained at the same time.\n*\nGETM     GETMAIN RC,                   * Conditional request (register)*\n               SP=&SP,                 *  from our private subpool     *\n               LV=L'USERAREA           *  for allocating the USERAREA\n         LTR   R15,R15                 * Storage allocated ??\n         BZ    GETMOK                  * Yes: skip error\n         LA    R15,069                 * Load error code\n         L     R14,=AL4(EXIT)          * Let error return to EXIT\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, then goto exit\n*\nGETMOK   EQU   *\n         ST    R1,LNSUAPTR             * Save area address\n*\n         SPACE 3\n*\n* R1 now points to our private save-area.\n*\nGOTM     EQU   *\n         ST    R13,SAVEPREV(R1)        * Set backward pointer\n         C     R6,SAVEPLI(R13)         * PLI uses 1st word of savearea\n         BNE   ENVIRPLI                * For PLI env.: no forward ptr\n         ST    R1,SAVENEXT(R13)        * Set forward ptr (non-PLI env.)\nENVIRPLI LR    R13,R1                  * Point to new savearea\n         USING DSUSERAR,R13            * Address USERAREA & savearea\n*\n* In the UAERR routine R11 is used to determine whether R13 points to\n* our own USERAREA or somewhere different. Therefore R11 is to be saved\n* in its proper place. Thus this USERAREA will be recognizable.\n*\n         ST    R11,SAVEDR11(R13)       * Mark this save-area as our own\n*\n* Copy data we will need from parm 2 to the USERAREA\n*\n         LCLC  &LM                     * Length modifier\n&LM      SETC  'L''UASELECT'           * Default: full length\n         AIF   (NOT &OPT).FASE120      * When optimizing:\n&LM      SETC  '&AANTFIL'              *  copy only the needed bytes\n.FASE120 MVC   UASELECT(&LM),LNSFILES  * Logical data-group selectors\n         MVC   UAVERSI,LNSVERSI        * Parameter 1 version nr\n         DROP  R2                      * End addressability to ds83prm2\n*\n         SPACE 3\n*\n* Increment call-count and initialize return- and reasoncode to zero\n*\n         AIF   (&OPT AND (NOT &DBG)).FASE130\n         L     R1,UACALLNR             * Retrieve call-count\n         LA    R1,1(R1)                * Increment call-count by one\n         ST    R1,UACALLNR             * Store call-count in USERAREA\n.FASE130 MVI   UARETCD,C'0'            * Set returncode\n         STH   R6,UAREASN              * Set reasoncode to H'0'\n         MVC   UAKEY,LNSKEY            * Copy key from parm\n*\n         SPACE 3\n*\n* Check select/deselect codes for each logical file section\n*\n         AIF   (&OPT).FASE140\n         LA    R7,UASELECT             * First byte to be checked\n         LA    R8,1                    * Increment value for loop\n         LA    R9,UASELECT+L'UASELECT-1 * Last byte to be checked\nLOOP0    CLI   0(R7),C'0'              * Valid deselect code ??\n         BE    LOOP0NX                 * Yes: check next selector\n         CLI   0(R7),C'1'              * Valid select code ??\n         BE    LOOP0NX                 * Yes: check next selector\n         LA    R15,003                 * Load error message nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then continue\n         MVI   0(R7),C'0'              * Default to deselect section\nLOOP0NX  BXLE  R7,R8,LOOP0             * Loop to try next selector\n*\n.FASE140 ANOP\n*\n* First we must map the individual requests for logical file sections\n* (UASELECT) onto physical file requests (UAFILES).\n* Mapping is now 1 to 1, but this may be changed in future.\n* The bytes of UAFILES must always correspond 1 to 1 with the\n* FDBNR field of each FDB in the FDB-chain. If two files are always\n* to be treated identically then they should be given the same value\n* for their FDBNR-fields.\n*\n         AIF   (NOT &OPT).MAPPIN0\n         MVC   UAFILES(&LM),UASCCDI    * Copy options (XLATE = 1 to 1)\n         AGO   .MAPPINX\n*\n.MAPPIN0 ANOP\nMAPPING0 MVC   UAFILES(&LM),=&NOOFFDB.C'0' * Prefill with zeroes\n         CLI   UASCCDI,C'1'            * 1st logical section requested?\n         BNE   MAPPING1                * No\n         MVI   UAFILES+0,C'1'          * Map section 1 to FDBNR 0\n*\nMAPPING1 CLI   UASCPDI,C'1'            * 2nd logical section requested?\n         BNE   MAPPING2                * No\n         MVI   UAFILES+1,C'1'          * Map section 2 to FDBNR 1\n*\nMAPPING2 CLI   UASCCXI,C'1'            * 3rd logical section requested?\n         BNE   MAPPING3                * No\n         MVI   UAFILES+2,C'1'          * Map section 3 to FDBNR 2\n*\nMAPPING3 CLI   UASPDDI,C'1'            * 4th logical section requested?\n         BNE   MAPPING4                * No\n         MVI   UAFILES+3,C'1'          * Map section 4 to FDBNR 3\n*\nMAPPING4 CLI   UASCSCI,C'1'            * 5th logical section requested?\n         BNE   MAPPING5                * No\n         MVI   UAFILES+4,C'1'          * Map section 5 to FDBNR 4\n*\nMAPPING5 CLI   UASACDI,C'1'            * 6th logical section requested?\n         BNE   MAPPING9                * No\n         MVI   UAFILES+5,C'1'          * Map section 6 to FDBNR 5\n*\nMAPPING9 EQU   *\n         AIF   (&OPT).MAPPINX\n         CLC   UAFILES,=&NOOFFDB.C'0'  * Still all zeroes ??\n         BNE   MAPPINGX                * No: carry on\n         LA    R15,004                 * Load error number\n         L     R14,=AL4(EXIT)          * Get return address for error\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, then goto exit\n*\n.MAPPINX ANOP\n*\nMAPPINGX EQU   *\n*\n         SPACE 3\n*\n* Phase 1 of the program is now done. Change base register for phase 2\n*\n         L     R3,=AL4(PHASE2)         * Load address of next phase\n         AIF   (&OPT).FASE1ND\n         BR    R3                      * And go execute it\n*\n.FASE1ND DROP  R3                      * End of phase 1\nFASE1END EQU   *\n*\n         EJECT\n         USING PHASE2,R3\nPHASE2   EQU   *\n*\n* Now the mapping from logical data groups in the parameter onto\n* physical VSAM files has taken place, the function code in the\n* parameter is to be translated into request bits in the FDBREQ field\n* of each file concerned. This is done by checking the function code\n* against a table of supported function codes. The table also contains\n* for each supported function code the address of a checking routine.\n*\n* Now run-time FDBs have been set up. Before we can set them according\n* to the current request we must look up the requested function code in\n* the table of supported opcodes.\n*\n         L     R7,=AL4(OPCODES)        * Starting address of table\n         LA    R8,L'OPC                * Length of each element\n         L     R9,=AL4(OPCODEND)       * Ending address of table\n         USING DSOPC,R7                * Address table by DSECT\nLOOP1    CLC   LNSFCODE,OPCFCOD        * Is it this element ??\n         BE    LOOP1EX                 * Yes: terminate inner loop\n         BXLE  R7,R8,LOOP1             * Try next element\n*                                      * No valid function-code found\n         B     LOOP250                 * Skip to exit handling for err\nLOOP1EX  EQU   *                       * Seek opcode is now done\n         ST    R7,UAOPCADR             * Save address in userarea\n*\n         AIF   (&OPT).LOOPA\n*\n* FDBs are to be generated on first call\n*\n         CLC   UAFDBPTR,=F'0'          * FDBs allocated ??\n         BE    LOOPA                   * No: go force allocation\n.LOOPA   ANOP\n*\n         TM    OPCMASK,FDBOPEN         * Is this an open-request ??\n         BNO   LOOP2INI                * No: go initiate loop 2\n*\n* An open request is to be processed. Allocate run-time FDBs\n* from the defaults chain when necessary.\n*\nLOOPA    LA    R5,=AL4(CCDFDB)         * Point to root of default FDBs\nLOOPA1   L     R5,FDBNEXT              * Get next default FDB\n         LTR   R5,R5                   * Is it valid ??\n         BZ    LOOP2INI                * No: we're done\n         AIF   (NOT &OPT).LOOPA1\n*\n* Optimized version is to check whether the FDB is to be opened.\n* If not, then it should not be allocated. In test version\n* however, all FDBs are to be allocated, or no errors will be\n* generated for calls against unopened files.\n*\n         XR    R1,R1                   * Clear register\n         IC    R1,FDBNR                * to contain FDB-group-number\n         LA    R6,UAFILES(R1)          * Get addr of file group switch\n         CLI   0(R6),C'1'              * Switch is on ??\n         BNE   LOOPA1                  * No: try next default FDB\n.LOOPA1  ANOP\n*\n* This FDB is to be activated. If no runtime-fdb exists, then a\n* new one will have to be allocated.\n*\n         AIF   (&OPT).LOOPA2\n         L     R10,=AL4(SEEKSPC)       * Get address of seekspace table\n         LA    R6,FDBDDNAM             * Point DDNAME in default FDB\n         TRT   FDBDDNAM,0(R10)         * Find addr of first blank\n         BNZ   LOOPA105                * If no spaces, use full length\n         LA    R1,L'FDBDDNAM(R6)       * Point beyond DDNAME\nLOOPA105 SR    R1,R6                   * Used length of DDNAME\n         BCTR  R1,R0                   * Decrement count by one for CLC\n*\n.LOOPA2  LA    R9,UAFDBPTR             * Point to root of FDBs\nLOOPA2   L     R10,0(R9) =FDBNEXT      * Point to next FDB\n         LTR   R10,R10                 * Is it valid ??\n         BZ    LOOPA2EX                * No: exit\n         LR    R9,R10                  * Copy address of next FDB\n         AIF   (&OPT).LOOPA21\n         EX    R1,LOOPACLC             * Compare DDNAMEs\n         AGO   .LOOPA22\n*\n.LOOPA21 CLC   FDBDDLOC(3,R9),FDBDDNAM * DDNAME base is three chars\n.LOOPA22 BNE   LOOPA2                  * Not =: try next default FDB\n         B     LOOPA1                  * Equal: dont allocate a new FDB\n*\nLOOPA2EX EQU   *                       * Allocate new FDB\n         GETMAIN RC,                   * Conditional storage request   *\n               SP=&SP,                 *    from our own subpool       *\n               LV=L'FDB                *    for allocating an FDB\n         LTR   R15,R15                 * Storage allocated ??\n         BZ    LOOPA120                * Yes: add it to the chain\n         LA    R15,069                 * Set error code\n         L     R14,=AL4(EXIT)          * Get return addr for error rout\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * And execute it\n*\nLOOPA120 MVC   0(L'FDB,R1),FDB         * Copy default FDB to new area\n         MVC   0(4,R1),0(R9) = FDBNEXT * Copy next-ptr from prev FDB\n         ST    R1,0(R9)      = FDBNEXT * Let prev FDB point to new one\n         AIF   (&OPT).LOOP2IN\n         B     LOOPA1                  * Check remaining default FDBs\n*\nLOOPACLC CLC   FDBDDLOC(0,R9),FDBDDNAM * Compare DDNAME with default\n*\n         SPACE 3\n.LOOP2IN ANOP\n*\n* Now that we have the opcode-element to be used we must loop\n* through all run-time FDBs. Use their FDBNR-value as an index\n* in UAFILES to determine whether this file is to be processed for\n* the current request. If it is to be processed, set the FDBREQ-bits\n* to indicate the actions phase 3 is to take.\n*\nLOOP2INI LA    R5,UAFDBPTR             * Point to entry of FDB-chain\nLOOP2    L     R5,FDBNEXT              * Make next FDB the current one\n         LTR   R5,R5                   * Does it point to nowhere ??\n         BZ    LOOP2EX                 * If no next FDB, then exit loop\n         MVI   FDBREQ,FDBNOREQ         * Reset all request bits\n         MVI   FDBRETCD,X'00'          * Reset returncode to zero\n         XR    R1,R1                   * Clear register\n         STH   R1,FDBREASN             * Reset reasoncode for this FDB\n         IC    R1,FDBNR                * Load relative file nr to use\n         LA    R6,UAFILES(R1)          * Point to file switch\n         CLI   0(R6),C'1'              * Indicator in parm = 1 ??\n         BNE   LOOP2                   * No: go try next one\n*\n* Set the request bits associated with this opcode. If a checking\n* routine is specified for the opcode, execute it.\n*\n         OC    FDBREQ,OPCMASK          * Set request bits\nLOOP250  L     R8,OPCROUT              * Get exit routine address\n         AIF   (&OPT).LOOP210\n         LTR   R8,R8                   * Check on zero\n         BZ    LOOP2                   * If zero, skip execution\n.LOOP210 BASR  R14,R8                  * Go execute exit routine\n         L     R7,UAOPCADR             * Reload opcode-element address\n         B     LOOP2                   * And go try next FDB\n*\nLOOP2EX  EQU   *\n*\n         SPACE 3\n*\n* Phase 2 is now done. Go proceed to phase 3.\n*\n         L     R3,=AL4(PHASE3)         * Get entry point of next phase\n         BR    R3                      * And go execute it\n*\n         EJECT\n*\n* Checking routines to evalute the validity of the request\n* first are listed the check-routines that combine requests\n* explicitly. These execute the elementary checks that are listed\n* thereafter. The elementary requests may in turn invoke other\n* elementary request checking routines for implicit open requests.\n*\n         SPACE 3\n*\n* CHECKSN: request to skip, then to read sequential. The request may\n* imply open input as well. The open request will be forced by the\n* execution of the checksk routine.\n*\nCHECKSN  EQU   *\n         ST    R14,UALV1SAV            * Save return address\n         BAS   R14,CHECKSK             * Execute check-rout for skip\n         L     R14,UALV1SAV            * Retrieve return address\n         B     CHECKRS                 * Execute check-rout for read\n*                                      *         which returns to R14\n*\n         SPACE 3\n         AIF   (NOT &DBG).CHECKWN      * Allow WN in test mode only\n*\n* CHECKWN: request to write, then to read either sequential or random.\n* Depending on the random/sequential status different elementary\n* check-routines will be executed. If the file is not open, it does not\n* matter which write-checker is executed: both will generate an abend.\n*\nCHECKWN  EQU   *                       * Temporarily not supported\n         ST    R14,UALV1SAV            * Save return address\n         TM    FDBSTAT,FDBACRND        * Access is currently random ??\n         BO    CHECKWNR                * Yes: use random check-routines\n         BAS   R14,CHECKWS             * Execute check-rout for skip\n         L     R14,UALV1SAV            * Retrieve return address\n         B     CHECKRS                 * Execute check-rout for read\n*                                      *         which returns to R14\n*\n* For a random WN-operation we must juggle the key values, otherwise\n* either the write will detect a key mismatch or the read will read\n* the record just written.\n*\nCHECKWNR EQU   *\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain key length\n         LA    R8,LNSKEY(R7)           * Load address of data area\n         BCTR  R7,R0                   * Decrement length by 1 for MVCs\n         EX    R7,CHECKMV1             * Save key for read operation\n         EX    R7,CHECKMV2             * Copy key of current record\n         BAS   R14,CHECKWR             * Execute check-rout for write\n*\n* Reset key in parameter to reflect the value to be used for reading\n*\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain key length\n         BCTR  R7,R0                   * Decrement length by 1 for MVC\n         EX    R7,CHECKMV3             * Reset key for read operation\n         BAS   R14,CHECKRR             * Execute check-rout for read\n*\n* Before exiting the key of the parm must be set to match the one in\n* the record because the write will be executed first.\n*\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain key length\n         LA    R8,LNSKEY(R7)           * Load address of data area\n         BCTR  R7,R0                   * Decrement length by 1 for MVC\n         EX    R7,CHECKMV2             * Copy key of current record\n         L     R14,UALV1SAV            * Retrieve return address\n         BR    R14                     * Return to mainline of phase2\n*\n.CHECKWN ANOP\n*\n         SPACE 3\n         AIF   (NOT &DBG).CHECKDN      * Allow DN in test mode only\n*\n* CHECKDN: request to delete, then to read either sequential or random.\n* Depending on the random/sequential status different elementary\n* check-routines will be executed. If the file is not open, the\n* delete-checker will generate an abend.\n*\nCHECKDN  EQU   *                       * Temporarily not supported\n         ST    R14,UALV1SAV            * Save return address\n         TM    FDBSTAT,FDBACRND        * Access is currently random ??\n         BO    CHECKDNR                * Yes: use random check-routines\n         BAS   R14,CHECKDR             * Execute check-rout for delete\n         L     R14,UALV1SAV            * Retrieve return address\n         B     CHECKRS                 * Execute check-rout for read\n*                                      *         which returns to R14\n*\n* For a random DN-operation we must juggle the key values, otherwise\n* either the delete will detect a key mismatch or the read will find\n* a deleted record.\n*\nCHECKDNR EQU   *\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain key length\n         LA    R8,LNSKEY(R7)           * Load address of data area\n         BCTR  R7,R0                   * Decrement length by 1 for MVCs\n         EX    R7,CHECKMV1             * Save key for read operation\n         EX    R7,CHECKMV2             * Copy key of current record\n         BAS   R14,CHECKDR             * Execute check-rout for delete\n*\n* Reset key in parameter to reflect the value to be used for reading\n*\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain key length\n         BCTR  R7,R0                   * Decrement length by 1 for MVC\n         EX    R7,CHECKMV3             * Reset key for read operation\n         BAS   R14,CHECKRR             * Execute check-rout for read\n*\n* Before exiting the key of the parm must be set to match the one in\n* the record because the delete will be executed first.\n*\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain key length\n         LA    R8,LNSKEY(R7)           * Load address of data area\n         BCTR  R7,R0                   * Decrement length by 1 for MVC\n         EX    R7,CHECKMV2             * Copy key of current record\n         L     R14,UALV1SAV            * Retrieve return address\n         BR    R14                     * Return to mainline of phase2\n*\n.CHECKDN ANOP\n*\n         SPACE 3\n*\n* CHECKOI: to open the file for input, it must be currently closed.\n* If it is open, then a warning is issued. In the process of\n* opening a read of the version control record is to be enforced.\n* The required FDBREQ-bits are set, but the key must be set to zeroes.\n*\nCHECKOI  EQU   *                       * Open input request\n         TM    FDBSTAT,FDBINPUT        * Is the file open ??\n         BNO   CHECKOX                 * No: set key for version record\n         NI    FDBREQ,FDBNOOI          * Reset open input request bit\n         TM    FDBSTAT,FDBUPDAT        * Is the file open for update ??\n         BNO   CHECKOI2                * No: go issue warning\n         LA    R15,019                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKOI2 LA    R15,005                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\n         SPACE 3\n*\n* CHECKOU: to open the file for update, it must be currently closed.\n* If it is open, then a warning is issued. This routine is executed\n* only for explicit open-update requests.\n*\nCHECKOU  EQU   *                       * Open update request\n         TM    FDBSTAT,FDBINPUT        * Is the file open ??\n         BNO   CHECKOX                 * No: set key for version record\n         NI    FDBREQ,FDBNOOU          * Reset open update request bits\n         TM    FDBSTAT,FDBUPDAT        * Is the file open for update ??\n         BO    CHECKOU8                * Yes: go issue warning\n         LA    R15,030                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKOU8 LA    R15,005                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\n         SPACE 3\n*\n* CHECKOX routine contains coding for both open-checking routines.\n*\nCHECKOX  MVC   UAKEY,FDBLKEY           * Copy key of version record\n         XC    UALRECAD,UALRECAD       * Set compare record addr to 0\n         XC    UALRECLV,UALRECLV       * Set compare record length to 0\n         CLI   UAKEY,X'FF'             * First byte of version key ok??\n         BNE   CHECKOX3                * Yes: continue\n         NI    FDBREQ,FDBNORX          * Reset read request\n         MVC   UAKEY,=&MAXKEY.C'0'     * And reset start-key to zeroes\n*\nCHECKOX3 EQU   *\n         TM    FDBREQ,FDBOPRND         * Open is random ??\n         BO    CHECKOX5                * Yes: go read if necessary\n         TM    FDBREQ,FDBREAD          * Read required ??\n         BO    CHECKSN                 * Yes: execute skip-read checker\n         B     CHECKSK                 * No: execute skip-checker\n*\nCHECKOX5 TM    FDBREQ,FDBREAD          * Read required ??\n         BO    CHECKRR                 * Y: execute read random checker\n         BR    R14                     * No: accept open request\n*\n         SPACE 3\n*\n* CHECKSK: to skip to a position in the file, it must be open for\n* sequential processing. For skipping at least the first four digits\n* of the key must be valid.\n*\nCHECKSK  EQU   *                       * Skip request\n         L     R10,=AL4(NUMTAB)        * Get addr of TRT-table for key\n         TRT   UAKEY(4),0(R10)         * Check that key is numeric\n         BZ    CHECKSK2                * Yes: skip the error\n         NI    FDBREQ,FDBNOSK          * Reset skip request bit\n         LA    R15,037                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKSK2 EQU   *\n         AIF   (&OPT).CHEKSK3          * Optimized mode: always open\n         TM    FDBSTAT,FDBINPUT        * Is the file open ??\n         BO    CHECKSK3                * Yes: skip error\n         TM    FDBREQ,FDBOPEN          * Is file to be opened ??\n         BO    CHECKSK3                * Yes: skip error\n         NI    FDBREQ,FDBNOSK          * Reset skip-request bit\n         LA    R15,031                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\n.CHEKSK3 ANOP\n*\nCHECKSK3 TM    FDBSTAT,FDBACRND        * File is open, is sequential ??\n         BNOR  R14                     * Yes: accept SK-request\n         NI    FDBREQ,FDBNOSK          * Reset skip-request bit\n         LA    R15,036                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\n         SPACE 3\n*\n* CHECKRS: to read a record sequentially, the file must be open for\n* sequential processing. Reading past end of file will cause a\n* warning message to be issued, and the request to be ignored.\n*\nCHECKRS  EQU   *                       * Read sequential request\n         AIF   (&OPT).CHEKRS5          * Optimized: file always open\n         TM    FDBSTAT,FDBINPUT        * Is the file open ??\n         BO    CHECKRS5                * Yes: skip this error\n         TM    FDBREQ,FDBOPEN          * Is file to be opened ??\n         BNO   CHECKRS2                * No: issue error\n         TM    FDBREQ,FDBOPRND         * Open random request ??\n         BNOR  R14                     * No: ok, yes: error\n*\nCHECKRS2 NI    FDBREQ,FDBNORX          * Reset read request bit\n         LA    R15,032                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\n.CHEKRS5 ANOP\n*\nCHECKRS5 EQU   *\n         TM    FDBSTAT,FDBACRND        * Access is random ??\n         BNO   CHECKRS6                * No: go check EOF-condition\n         ST    R14,UALV2SAV            * Save return address\n         LA    R15,007                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         L     R14,UALV2SAV            * Reload correct return address\n         B     CHECKRR                 * And default to read random\n*\nCHECKRS6 TM    FDBSTAT,FDBEOF          * End-of-file condition raised??\n         BNOR  R14                     * No: accept RS-request\n         TM    FDBREQ,FDBSKIP          * Was a skip requested as well ?\n         BOR   R14                     * Yes: accept RS-request\n         NI    FDBREQ,FDBNORX          * Reset read request\n         LA    R15,038                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\n         SPACE 3\n*\n* CHECKRR: to read a record randomly, the file must be open for\n* random processing, and the full key must be given.\n*\nCHECKRR  EQU   *                       * Read random request\n         L     R10,=AL4(NUMTAB)        * Get addr of TRT-table for key\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain length of key\n         BCTR  R7,R0                   * Decrement by one for TRT\n         EX    R7,CHECKTRT             * Check that key is numeric\n         BZ    CHECKRR2                * Yes: skip the error\n         NI    FDBREQ,FDBNORX          * Reset read request bit\n         LA    R15,039                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\n* Optimized version cannot skip open checking: when the file is not\n* open yet, the FDBACRND-bit still is zero, causing an erroneous\n* error 008 on any call with opcode RI or RU.\n*\nCHECKRR2 EQU   *\n         TM    FDBSTAT,FDBINPUT        * Is the file open ??\n         BO    CHECKRR4                * Yes: skip error\n         TM    FDBREQ,FDBOPEN          * Is file to be opened ??\n         BNO   CHECKRR3                * Yes: skip error\n         TM    FDBREQ,FDBOPRND         * Is file to be opened random ??\n         BOR   R14                     * Yes: accept the request\n*\nCHECKRR3 NI    FDBREQ,FDBNORX          * Reset read-request bit\n         LA    R15,032                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKRR4 TM    FDBSTAT,FDBACRND        * Is it open for random ??\n         BOR   R14                     * Yes: accept the request\n         ST    R14,UALV2SAV            * Save return address\n         LA    R15,008                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         L     R14,UALV2SAV            * Reload original return address\n         B     CHECKRS                 * Try to read sequantial\n*\n         SPACE 3\n*\n* CHECKWS: to rewrite a record sequentially, the file must be open\n* for update in sequential mode, and the record to be updated must\n* have been read just before the write request.\n*\nCHECKWS  EQU   *                       * Write sequential request\n         TM    FDBSTAT,FDBACRND        * Access is random ??\n         BNO   CHECKWX                 * No: skip this error\n         ST    R14,UALV2SAV            * Save return address\n         LA    R15,009                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         L     R14,UALV2SAV            * Reload return address\n         B     CHECKWX                 * Default to 'WR'-processing\n*\n         SPACE 3\n*\n* CHECKWR: to rewrite a record randomly, the file must be open\n* for update in random mode, and the record to be updated must\n* have been read just before the write request.\n*\nCHECKWR  EQU   *                       * Write random request\n         TM    FDBSTAT,FDBACRND        * Access is random ??\n         BO    CHECKWX                 * Yes: skip this error\n         ST    R14,UALV2SAV            * Save return address\n         LA    R15,010                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         L     R14,UALV2SAV            * Reload return address\n*                                      * And default to 'WS'-processing\n         SPACE 3\n*\n* CHECKWX: to rewrite a record, whether random or sequential, it is\n* required that the record to be updated has been read just before\n* the write request. this checking is done here for both modes.\n*\nCHECKWX  EQU   *\n         TM    FDBSTAT,FDBUPDAT        * Is the file open for update ??\n         BO    CHECKWX1                * Yes: skip this error\n         NI    FDBREQ,FDBNOWX          * Reset write request bit\n         LA    R15,033                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKWX1 TM    FDBLREQ,FDBREAD         * Previous operation was read ??\n         BO    CHECKWX2                * Yes: skip this error\n         NI    FDBREQ,FDBNOWX          * Reset write request bit\n         LA    R15,041                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKWX2 TM    FDBSTAT,FDBEOF          * Previous read succcessful??\n         BNO   CHECKWX3                * Yes: skip this error\n         NI    FDBREQ,FDBNOWX          * Reset write request bit\n         LA    R15,041                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKWX3 XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain length of key\n         LA    R8,LNSKEY(R7)           * Load start addr of data area\n         BCTR  R7,R0                   * Decrement length by 1 for TRT\n         EX    R7,CHECKCLC             * Check that key is still equal\n         BE    CHECKWX4                * Yes: skip this error\nCHECKWXR NI    FDBREQ,FDBNOWX          * Reset write request bit\n         LA    R15,043                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKWX4 EQU   *\n         EX    R7,CHECKCLK             * Check that keys are equal\n         BER   R14                     * It is ok, accept the request\n         B     CHECKWXR                * Wrong: issue error\n*\n         SPACE 3\n*\n* CHECKIR: to insert a record, the file must be open for update.\n* An insert is not required to follow an unsuccessful read.\n* The key, however must be numeric.\n*\nCHECKIR  EQU   *                       * Insert request\n         L     R10,=AL4(NUMTAB)        * Get addr of TRT-table for key\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain length of key\n         LA    R8,LNSKEY(R7)           * Load address of data area\n         BCTR  R7,R0                   * Decrement length by 1 for TRT\n         EX    R7,CHECKTRT             * Check that key is numeric\n         BZ    CHECKIR2                * Ok, then skip the error\n         NI    FDBREQ,FDBNOIR          * Reset insert request bit\n         LA    R15,040                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKIR2 EQU   *\n         EX    R7,CHECKCLK             * Check that keys are equal\n         BE    CHECKIR3                * Ok, then skip the error\n         NI    FDBREQ,FDBNOIR          * Reset insert request bit\n         LA    R15,045                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKIR3 EQU   *\n         EX    R7,CHECKCLZ             * Is this the version record ??\n         BNE   CHECKIR4                * No: ok, skip the error\n         NI    FDBREQ,FDBNOIR          * Reset insert request bit\n         LA    R15,047                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKIR4 TM    FDBSTAT,FDBUPDAT        * Is the file open for update ??\n         BOR   R14                     * Yes: request is ok\n         NI    FDBREQ,FDBNOIR          * Reset request bit for insert\n         LA    R15,034                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\n         SPACE 3\n*\n* CHECKDR: to delete a record, the file must be open for update and\n* the record must have been read just before this delete request.\n*\nCHECKDR  EQU   *                       * Delete request\n         TM    FDBSTAT,FDBUPDAT        * Is the file open for update ??\n         BO    CHECKDR2                * Yes: skip this error\n         NI    FDBREQ,FDBNODR          * Reset delete request bit\n         LA    R15,035                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKDR2 TM    FDBLREQ,FDBREAD         * Previous operation was read ??\n         BO    CHECKDR3                * Yes: skip this error\n         NI    FDBREQ,FDBNODR          * Reset delete request bit\n         LA    R15,042                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKDR3 TM    FDBSTAT,FDBEOF          * Previous read reached eof ??\n         BNO   CHECKDR4                * No: skip this error\n         NI    FDBREQ,FDBNODR          * Reset delete request bit\n         LA    R15,042                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n*\nCHECKDR4 XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain length of key\n         LA    R8,LNSKEY(R7)           * Load address of data area\n         BCTR  R7,R0                   * Decrement length by 1 for TRT\n         EX    R7,CHECKCLC             * Check that key is still equal\n         BE    CHECKDR5                * Yes: skip this error\nCHECKDRR NI    FDBREQ,FDBNODR          * Reset delete request bit\n         LA    R15,044                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, then return\n*\nCHECKDR5 EQU   *\n         EX    R7,CHECKCLK             * Check that keys are equal\n         BNE   CHECKDRR                * Wrong: issue error\n*\nCHECKDR6 EQU   *\n         EX    R7,CHECKCLZ             * Is it the version record ??\n         BNER  R14                     * It is ok, accept the request\n         NI    FDBREQ,FDBNODR          * Reset delete request bit\n         LA    R15,048                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, then return\n*\n         SPACE 3\n*\n* CHECKCA: to close the file, it must be open.\n* If not open, a warning is issued and the request is ignored.\n*\nCHECKCA  EQU   *                       * Close request\n         AIF   (&OPT).CHEKCA           * File always open (optimized)\n         TM    FDBSTAT,FDBINPUT        * Is the file open ??\n         BOR   R14                     * Yes: return & continue\n         NI    FDBREQ,FDBNOCA          * Reset close request\n         LA    R15,006                 * Load error nr\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to caller\n         AGO   .CHEKCA9\n.CHEKCA  ANOP\n         BR    R14                     * Optimized: return immediate\n.CHEKCA9 ANOP\n*\n         SPACE 3\n         AIF   (NOT &DBG).CHECKSD      * Checksd only in test mode\n*\n* CHECKSD: no checking is required. A snapdump is produced by calling\n* RSNAP. No further action is required.\n*\nCHECKSD  EQU   *                       * Request to produce a snap-dump\n         ESNAP ,                       * Call RSNAP-routine\n         AIF   (&OPT).CHEKSD5\n         L     R3,=AL4(RSETBASE)       * Load new base address\n         L     R14,=AL4(EXIT)          * Take shortcut\n         BR    R3                      * To end the program\n         AGO   .CHEKSD9\n.CHEKSD5 ANOP\n         L     R3,=AL4(PHASE4)         * Load new base address\n         L     R14,=AL4(EXIT)          * Retrieve address of exit\n         BR    R14                     * Take shortcut\n.CHEKSD9 ANOP\n*\n.CHECKSD ANOP\n*\n         SPACE 3\n*\n* CHECKXX: routine forces an error since the requested function\n* is not known or not supported.\n*\nCHECKXX  EQU   *                       * Invalid function-code in parm\n         LA    R15,027                 * Load error number\n         L     R14,=AL4(EXIT)          * Get fast exit address\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to exit\n*\n         SPACE 3\n*\nCHECKCLC CLC   FDBLKEY(0),0(R8)        * Comp last key with key in parm\nCHECKCLK CLC   UAKEY(0),0(R8)          * Compare keys in parameter\nCHECKCLZ CLC   UAKEY(0),=&MAXKEY.C'0'  * Version record has key zero\n*\nCHECKTRT TRT   UAKEY(0),0(R10)         * Check that key is numeric\n*\nCHECKMV1 MVC   FDBXKEY(0),UAKEY        * Save key for read operation\nCHECKMV2 MVC   UAKEY(0),0(R8)          * Cpy key of current rec to parm\nCHECKMV3 MVC   UAKEY(0),FDBXKEY        * Restore key for read operation\n*\n         SPACE 3\n*\n         DROP  R3                      * Drop base register for phase 2\nFASE2END EQU   *\n*\n         EJECT\n         USING PHASE3,R3               * And reestablish addressability\nPHASE3   EQU   *\n*\n* The FDBREQ field of all FDBs have now been set.\n* Now we must process the FDBs one by one according to their request\n* bit settings. Thus all requested I/O handlers shall be executed.\n* For asynchronous processing to be effective, it is essential that\n* as many requests overlap as possible. This is achieved by looping\n* through all FDBs for each possible asynchronous request. Thus the\n* requested files will be handled more in parallel, especially with\n* combined opcodes: SN, WN, DN, and get sequential with implied open.\n*\n* Remarks on optimized coding:\n* Since the capability to handle more than one file (FDB) at a time\n* is currently not being used, we need to loop through the FDBs only\n* once. Therefore the repeated loop-logic is skipped when optimizing.\n* While the opcodes WN and DN are not being used (yet), the order\n* of handling the request bits can be changed so that a read-request\n* is recognized earlier. Thus a few unsuccessful compares can be\n* avoided for each read request. Additionally, after executing a\n* request that cannot be followed by another (combined) request\n* we skip to the end of phase3 at once.\n*\n         LA    R5,UAFDBPTR             * Point to entry of FDB-chain\nLOOP3    L     R5,FDBNEXT              * Make next FDB the current one\n         LTR   R5,R5                   * If it is zero, we're through\n         BZ    LOOP3EX                 * If no next FDB, then exit loop\n         CLI   FDBREQ,FDBNOREQ         * Anything to do for this file ?\n         BE    LOOP3                   * No: try next FDB\n*\n* If an insert is not requested while the RPL is still in insert\n* status, then the RPL must be reset to normal\n*\n         TM    FDBSTAT,FDBRPLIR        * Is RPL in insert mode??\n         BNO   LOOP3E                  * No: skip resetting the RPL\n         TM    FDBREQ,FDBINSRT         * Is insert requested ??\n         BO    LOOP3E                  * Yes: leave the RPL as it is\n         L     R2,FDBRPL               * Retrieve RPL-address\n         LA    R6,FDBREC               * Address of record in buffer\n         MODCB RPL=(R2),               * Reset current RPL from insert *\n               AREA=(S,0(R6)),         *  specify the correct data area*\n               OPTCD=(UPD,LOC),        *  updating, locate mode        *\n               MF=(G,UAWORKAR,MODCNILV) * use UAWORKAR to build plist\n         LTR   R15,R15                 * Modcb was ok ??\n         BZ    LOOP3D                  * Yes: skip error\n         ST    R15,UAVSAMRC            * Save retcode for error handler\n         LA    R15,063                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     LOOP3E                  * Skip resetting the RPL-status\n*\nLOOP3D   NI    FDBSTAT,FDBRPLNI        * Reset RPL-status to non-insert\n*\n         SPACE 3\n*\nLOOP3E   EQU   *\n*\n* Open is to be executed first, because it may have been implied by\n* another request, which can be executed only after opening.\n*\n         TM    FDBREQ,FDBOPEN          * File is to be opened ??\n         BNO   LOOP3SK                 * No: skip open routine\n         BAS   R14,ROP                 * Execute open routine\n*\n* Skip is to be executed after open (which may have been implied by\n* a skip request), since a sequential open forces a skip request.\n* Moreover skip should be executed before read, since open (and\n* therefore skip) may have been implied by a read sequential request.\n* Furthermore skip should be executed first, or it shall be impossible\n* to support a combined skip-then-read request.\n*\n         PRINT GEN\n         GBLC  &TARGET                 * Target of branch instructions\n&TARGET  SETC  'LOOP3'                 * Normal process: loop thru FDBs\n         AIF   (NOT &OPT).LOOP3SK      * When optimizing, then\n&TARGET  SETC  'LOOPRXT'               * go test read-request\n.LOOP3SK ANOP\n*\nLOOP3SK  TM    FDBREQ,FDBSKIP          * Skip to specified key ??\n         BNO   &TARGET                 * No: skip skip routine\n         BAS   R14,RSK                 * Execute skip routine\n         B     &TARGET                 * Check next FDB\n*\nLOOP3EX  EQU   *\n*\n         SPACE 3\n*\n* Write is to be executed before read, or it will be impossible to\n* support a combined write-then-read request.\n*\n&TARGET  SETC  'LOOPWX'                * Normal process: loop thru FDBs\n         AIF   (NOT &OPT).LOOPWX       * When optimizing, then\n&TARGET  SETC  'LOOPDRT'               * go test for delete-request\n         AGO   .LOOPWXT                * and omit FDB-loop logic\n.LOOPWX  ANOP\n*\n         LA    R5,UAFDBPTR             * Point to entry of FDB-chain\nLOOPWX   L     R5,FDBNEXT              * Make next FDB the current one\n         LTR   R5,R5                   * If it is zero, we're through\n         BZ    LOOPWXEX                * If no next FDB, then exit loop\n*\n.LOOPWXT ANOP\nLOOPWXT  TM    FDBREQ,FDBWRITE         * Write record specified ??\n         BNO   &TARGET                 * No: skip write routine\n         BAS   R14,RWX                 * Execute write routine\n*\n         AIF   (NOT &OPT).LOOPWXU      * When optimizing:\n         B     LOOPCAEX                * Skip remainder of phase3\n*\n.LOOPWXU AIF   (&OPT).LOOPWXX          * Opcode WN only in test mode\n*\n* If the write operation is to be followed by a read, then the saved\n* key is to be restored into the parameter area.\n*\n         TM    FDBREQ,FDBREAD          * Read is to follow this write??\n         BNO   &TARGET                 * No: continue with next FDB\n         TM    FDBSTAT,FDBACRND        * Access is random ??\n         BNO   &TARGET                 * No: key not required\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain key length\n         BCTR  R7,R0                   * Decrement length by 1 for MVC\n         EX    R7,LOOPWXMV             * and restore saved key\n         B     &TARGET                 * Go check next FDB\n*\nLOOPWXMV MVC   UAKEY(0),FDBXKEY        * Restore extra key into parm\n*\n.LOOPWXX ANOP\nLOOPWXEX EQU   *\n*\n         SPACE 3\n*\n* Delete is to be executed before read, or it will be impossible to\n* support a combined delete-then-read request.\n*\n&TARGET  SETC  'LOOPDR'                * Normal process: loop thru FDBs\n         AIF   (NOT &OPT).LOOPDR       * When optimizing, then\n&TARGET  SETC  'LOOPIRT'               * go test for insert-request\n         AGO   .LOOPDRT                * and omit FDB-loop logic\n.LOOPDR  ANOP\n*\n         LA    R5,UAFDBPTR             * Point to entry of FDB-chain\nLOOPDR   L     R5,FDBNEXT              * Make next FDB the current one\n         LTR   R5,R5                   * If it is zero, we're through\n         BZ    LOOPDREX                * If no next FDB, then exit loop\n*\n.LOOPDRT ANOP\nLOOPDRT  TM    FDBREQ,FDBDEL           * Delete record specified ??\n         BNO   &TARGET                 * No: skip delete routine\n         BAS   R14,RDR                 * Execute delete routine\n*\n         AIF   (NOT &OPT).LOOPDRU      * When optimizing:\n         B     LOOPCAEX                * Proceed to end of phase3\n.LOOPDRU AIF   (&OPT).LOOPDRX          * DN only allowed in test mode\n*\n* If the delete operation is to be followed by a read, then the saved\n* key is to be restored into the parameter area.\n*\n         TM    FDBREQ,FDBREAD          * Read is to follow this write??\n         BNO   LOOPDR                  * No: continue with next FDB\n         TM    FDBSTAT,FDBACRND        * Access is random ??\n         BNO   LOOPDR                  * No: key not required\n         XR    R7,R7                   * Clear register\n         IC    R7,FDBKEYLV             * to contain key length\n         BCTR  R7,R0                   * Decrement length by 1 for MVC\n         EX    R7,LOOPDRMV             * and restore saved key\n         B     LOOPDR                  * Go check next FDB\n*\nLOOPDRMV MVC   UAKEY(0),FDBXKEY        * Restore extra key into parm\n*\n.LOOPDRX ANOP\nLOOPDREX EQU   *\n*\n         SPACE 3\n*\n* Read is to be executed after open, skip, write, and delete since\n* these requests may be either implied or they need to be supported\n* as a combined operation.\n*\n&TARGET  SETC  'LOOPRX'                * Normal process: loop thru FDBs\n         AIF   (NOT &OPT).LOOPRX       * When optimizing, then\n&TARGET  SETC  'LOOPWXT'               * go test for write-request\n         AGO   .LOOPRXT                * and omit FDB-loop logic\n.LOOPRX  ANOP\n*\n         LA    R5,UAFDBPTR             * Point to entry of FDB-chain\nLOOPRX   L     R5,FDBNEXT              * Make next FDB the current one\n         LTR   R5,R5                   * If it is zero, we're through\n         BZ    LOOPRXEX                * If no next FDB, then exit loop\n*\n.LOOPRXT ANOP\nLOOPRXT  TM    FDBREQ,FDBREAD          * Read record specified ??\n         BNO   &TARGET                 * No: skip read routine\n         BAS   R14,RRX                 * Execute read routine\n*\n         AIF   (&OPT).LOOPRXU          * When optimizing: drop-through\n         B     &TARGET                 * And go check next FDB\n.LOOPRXU ANOP  ,                       * To check for re-read request\n*\n* If a read request could not be satisfied from the current data buffer\n* then the request bit is set for restart read. A skip request has been\n* started: thus a skip will occur. Subsequently the read will be\n* satisfiable.\n*\nLOOPRXEX EQU   *\n&TARGET  SETC  'LOOPRYEX'              * Normal process: loop thru FDBs\n         AIF   (NOT &OPT).LOOPRY       * When optimizing, then\n&TARGET  SETC  'LOOPCAEX'              * no more requests to be handled\n.LOOPRY  ANOP\n*\n         TM    UASTAT,UARQREAD         * Restart read processing ??\n         BNO   &TARGET                 * No: carry on\n         NI    UASTAT,UARQNORX         * Reset restart request\n*\n         AIF   (&OPT).LOOPRYX\n         LA    R5,UAFDBPTR             * Point to entry of FDB-chain\nLOOPRY   L     R5,FDBNEXT              * Make next FDB the current one\n         LTR   R5,R5                   * If it is zero, we're through\n         BZ    LOOPRYEX                * If no next FDB, then exit loop\n         TM    FDBREQ,FDBREAD2         * Read record specified ??\n         BNO   LOOPRY                  * No: skip read routine\n.LOOPRYX NI    FDBREQ,FDBNOIR          * Reset reread (=insert) request\n         BAS   R14,RRX                 * And re-execute read routine\n*\n&TARGET  SETC  'LOOPRY'                * Normal process: loop thru FDBs\n         AIF   (NOT &OPT).LOOPRZ       * When optimizing, then\n&TARGET  SETC  'LOOPCAEX'              * there are no more requests\n.LOOPRZ  ANOP\n         B     &TARGET                 * And go check next FDB\n*\nLOOPRYEX EQU   *\n*\n         SPACE 3\n*\n* Insert is currently not combined with any other request, so we\n* just leave it trailing behind, as the last asynchronous request.\n*\n&TARGET  SETC  'LOOPIR'                * Normal process: loop thru FDBs\n         AIF   (NOT &OPT).LOOPIR       * When optimizing, then\n&TARGET  SETC  'LOOPCAT'               * go test for close-request\n         AGO   .LOOPIRT                * and omit FDB-loop logic\n.LOOPIR  ANOP\n*\n         LA    R5,UAFDBPTR             * Point to entry of FDB-chain\nLOOPIR   L     R5,FDBNEXT              * Make next FDB the current one\n         LTR   R5,R5                   * If it is zero, we're through\n         BZ    LOOPIREX                * If no next FDB, then exit loop\n*\n.LOOPIRT ANOP   **!!\nLOOPIRT  TM    FDBREQ,FDBINSRT         * Insert record specified ??\n         BNO   &TARGET                 * No: skip insert routine\n         BAS   R14,RIR                 * Execute insert routine\n*\n         AIF   (NOT &OPT).LOOPIRU      * When optimizing:\n&TARGET  SETC  'LOOPCAEX'              * Skip remainder of phase3\n.LOOPIRU B     &TARGET                 * And go check next FDB\n*\nLOOPIREX EQU   *\n*\n         SPACE 3\n*\n* Finally close requests need to be executed if requested.\n* Close is a synchronous request.\n*\n&TARGET  SETC  'LOOPCA'                * Normal process: loop thru FDBs\n         AIF   (NOT &OPT).LOOPCA       * When optimizing, then\n&TARGET  SETC  'LOOPCAEX'              * go test for insert-request\n         AGO   .LOOPCAT                * and omit FDB-loop logic\n.LOOPCA  ANOP\n*\n         LA    R5,UAFDBPTR             * Point to entry of FDB-chain\nLOOPCA   L     R5,FDBNEXT              * Make next FDB the current one\n         LTR   R5,R5                   * If it is zero, we're through\n         BZ    LOOPCAEX                * If no next FDB, then exit loop\n*\n.LOOPCAT ANOP\nLOOPCAT  TM    FDBREQ,FDBCLOSE         * Close this file ??\n         BNO   &TARGET                 * No: skip close routine\n         BAS   R14,RCA                 * Execute close routine\n*\n         AIF   (&OPT).LOOPCAX\n         B     &TARGET                 * And go check next FDB\n.LOOPCAX ANOP\n*\nLOOPCAEX EQU   *\n*\n         PRINT &PRT                    * Set print option\n*\n         SPACE 3\n*\n* Phase 3 is done. Continue with phase 4\n*\n         L     R3,=AL4(PHASE4)         * Get start address of phase 4\n         BR    R3                      * And go execute it\n*\n         EJECT\n*\n* ROP processes any open requests: sequential / random\n*                                  input / update\n*\nROP      EQU   *                       * Process open request\n         ST    R14,UALV1SAV            * Save R14 level 1\n*\n* If any last request is still present in the FDB, it is invalidated\n* by the open request, so we wipe it out.\n*\n         MVI   FDBLREQ,FDBNOREQ        * Blank last request issued\n         MVI   FDBLKEY,X'40'           * and the associated key\n         MVC   FDBLKEY+1(&MAXKEY-1),FDBLKEy * Wipe remainder of key-fld\n*\n* If a VSAM resource does not yet exist, go allocate one.\n*\n         TM    UAVRPSTA,UAVEXIST       * Has VRP been allocated ??\n         BO    ROP0                    * Yes: skip allocation\n         BAS   R14,RBLDVRP             * Go allocate VRP\n*\n* Before we allocate an ACB we must put the correct DDNAME in the FDB.\n* In the location of the first blank an I or a U is to be inserted,\n* depending on open for input or for update respectively.\n*\nROP0     EQU   *                       * Append I/U to DDNAME\n         L     R10,=AL4(SEEKSPC)       * Get addr of seek-space table\n         TRT   FDBDDNAM,0(R10)         * Get addr of 1st blank in field\n         BZ    ROP1                    * If no spaces, dont change name\n*\n* R1 now contains the address of the first blank position in the\n* DDNAME. This is the address where an I or a U is to be inserted\n*\n         MVI   0(R1),C'I'              * Default to input processing\n         TM    FDBREQ,FDBOPENU         * Open file for update ??\n         BNO   ROP1                    * No: leave it with the 'I'\n         MVI   0(R1),C'U'              * Use 'U' for update processing\n*\n* The open options input/update and sequential/random are tested and\n* translated into an offset in a table that contains the addresses of\n* the default ACBs for each option combination. The difference between\n* LSR or private pools is reflected in the table as well.\n*\nROP1     MVI   UAWORK,X'00'            * Clear to calc offset in ACBTAB\n         CLI   UAPOOLNR,X'0F'          * LSR pools allocated ??\n         BNH   ROP1NSR                 * Yes: stick to offset 0\n         OI    UAWORK,X'10'            * No: add 16 to offset for\n*                                      *            private pools\nROP1NSR  TM    FDBREQ,FDBOPENU         * Open file for update ??\n         BNO   ROP1INP                 * No: stick to offset 0\n         OI    UAWORK,X'08'            * Yes: add 8 to offset for updat\nROP1INP  TM    FDBREQ,FDBOPRND         * Open file random ??\n         BNO   ROP1SEQ                 * No: stick to offset 0\n         OI    UAWORK,X'04'            * Yes: add 4 to offset for rand.\nROP1SEQ  EQU   *\n*\n* The offset to be used is in the UAWORK field now.\n* Before building the ACB and RPL we must allocate storage for them\n*\n         GETMAIN RC,                   * Conditional request for ACB   *\n               SP=&SP,                 *    from our own subpool       *\n               LV=IFGACBLV+IFGRPLLV    *    long enough for ACB + RPL\n         LTR   R15,R15                 * Getmain was ok??\n         BZ    ROP1GOTM                * No: go issue error\n         OI    FDBSTAT,FDBERROR        * Indicate error status\n         LA    R15,023                 * Error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     ROP99                   * Skip rest of open processing\n*\nROP1GOTM ST    R1,FDBACB               * Save address of area for ACB\n         LR    R7,R1                   * Copy addr where ACB is to go\n         LA    R1,IFGACBLV(R1)         * Point to RPL-part of area\n         ST    R1,FDBRPL               * And save address for RPL\n*\n         XR    R1,R1                   * Clear register\n         IC    R1,UAWORK               * Get offset for ACBTAB\n         L     R15,=AL4(ACBTAB)        * Get address of ACBTAB\n         L     R2,0(R15,R1)            * Get addr of plist from ACBTAB\n         XR    R6,R6                   * Clear register\n         IC    R6,UAPOOLNR             * to contain shrpool-id\n         LR    R3,R2                   * Addr of gencb plist to base\n         BASR  R10,R3                  * Go build plist, retaddr in R10\n         L     R3,=AL4(PHASE3)         * Restore our own base register\n*                                      *    no retcode in R15 !!!!\n         LA    R2,UAWORKAR             * Point to generated plist\n         GENCB BLK=ACB,                * Generate the ACB              *\n               MF=(E,(R2))             *    using the plist in uaworkar\n         LTR   R15,R15                 * Has ACB been built ok ??\n         BZ    ROP2                    * Yes: skip error handling\n*\nROP1ERR  OI    FDBSTAT,FDBERROR        * Indicate error status\n         ST    R15,UAVSAMRC            * Save returncode from VSAM\n         LA    R15,049                 * Load error number and\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     ROP99                   * Skip remainder of open process\n*\n* The ACB has been built successfully,\n* now generate a default RPL for this ACB.\n*\n* The index for the table with addresses of default RPLs is equal to\n* the index used with the ACBs, with the exclusion of the difference\n* between LSR and private pools, so we can simply reuse the same byte\n* after wiping the LSR/private bit.\n*\nROP2     EQU   *\n         L     R9,FDBRPL               * Retrieve address for RPL\n         NI    UAWORK,X'0F'            * Remove superfluous index bits\n         XR    R1,R1                   * Clear register\n         IC    R1,UAWORK               * Get offset for RPLTAB\n         L     R15,=AL4(RPLTAB)        * Get address of RPLTAB\n         L     R2,0(R15,R1)            * Get addr of plist from RPLTAB\n         L     R7,FDBACB               * Reload addr of ACB to be used\n         LH    R8,FDBRECLV             * Get record length for RPL\n         XR    R6,R6                   * Clear register\n         IC    R6,FDBKEYLV             * to contain key length\n         LR    R3,R2                   * Addr of gencb plist to base\n         BASR  R10,R3                  * Go build plist, retaddr in R10\n         L     R3,=AL4(PHASE3)         * Restore our own base register\n*                                      *    no retcode in R15 !!!!\n         LA    R2,UAWORKAR             * Point to generated plist\n         GENCB BLK=RPL,                * Generate the RPL              *\n               MF=(E,(R2))             *    using the plist in UAWORKAR\n         LTR   R15,R15                 * Has RPL been built ok ??\n         BZ    ROP3                    * Yes: skip error handling\n*\nROP2ERR  OI    FDBSTAT,FDBERROR        * Indicate error status\n         ST    R15,UAVSAMRC            * Save VSAM's retcd in USERAREA\n         LA    R15,050                 * Error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     ROP99                   * Skip rest of open processing\n*\n* The RPL has been built successfully, so we save its address and\n* length in the FDB. Then we can try to open the file.\n* Increment IO-call counter, then open file (synchronous I/O)\n*\nROP3     EQU   *\n         AIF   (&OPT).ROP9\n         L     R2,UAIOCNT              * Load total I/O-count\n         LA    R2,1(R2)                * Increment by one\n         ST    R2,UAIOCNT              * And store updated value\n*\n.ROP9    ANOP\n         L     R2,=AL4(VSAMOPEN)       * Get address of list-form open\n         MVC   UAWORKAR(VSAMOPLV),0(R2) * copy to work-area\n         LA    R9,UAWORKAR             * And point to modifiable copy\n         L     R2,FDBACB               * Reload address of ACB\n         OPEN  ((R2)),                 * Open the ACB just generated   *\n               MF=(E,(R9))             *    using the copy of the plist\n         LTR   R15,R15                 * Was open successfull ??\n         BZ    ROP9                    * Yes: skip error handling\n         OI    FDBSTAT,FDBERROR        * Indicate error status\n         ST    R15,UAVSAMRC            * Save returncode for dumping\n         LA    R15,051                 * Error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     ROP99                   * Skip remainder of open process\n*\n* The file has been opened successfully. Now set the FDBSTAT bits\n* to reflect the current status.\n*\nROP9     EQU   *\n         OI    FDBSTAT,FDBINPUT        * Indicate file is open\n         TM    FDBREQ,FDBOPENU         * Open for update ??\n         BNO   ROP9INP                 * No: skip setting update bit\n         OI    FDBSTAT,FDBUPDAT        * Yes: set update bit\n*\nROP9INP  TM    FDBREQ,FDBOPRND         * Open for random access ??\n         BNO   ROP99                   * No: skip setting random bit\n         OI    FDBSTAT,FDBACRND        * Yes: set random bit\n*\n* The open request uses the request bit associated with a close request\n* to distinguish between random and sequential open requests. Since the\n* open request has been processed now, the random/sequential option bit\n* must be reset. Otherwise it will be interpreted as a close request\n* and the file would be closed in the very same call as it was opened.\n*\nROP99    EQU   *\n         NI    FDBREQ,FDBNOCA          * Reset random/close request\n         L     R14,UALV1SAV            * Reload return address\n         BR    R14                     * And return to caller\n*\n         EJECT\n*\n* RSK processes any skip requests: sequential\n*                                  input / update\n*\nRSK      EQU   *                       * Process skip request\n         ST    R14,UALV1SAV            * Save R14 level 1\n*\n* A skip request cannot be preceded by an asynchronous request.\n* Therefore, if the ECB is in use, we have run into an error.\n*\n         L     R0,FDBECB               * Get old ECB\n         LTR   R0,R0                   * Check that the ECB is free\n         BZ    RSK10                   * If it is zero, skip error\n         LA    R15,011                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         ST    R3,UABASSAV             * Save current base register\n         L     R3,=AL4(RCHECK)         * Get address of wait routine\n         BASR  R14,R3                  * And go wait for I/O-completion\n*\n* If the file is in error status, no processing can take place\n*\nRSK10    TM    FDBSTAT,FDBERROR        * Check for problems\n         BO    RSK99                   * File is in error: abort skip\n*\n* For skip processing, use as many numbers as are given in key field\n* of the parameter, with a maximum of the actual key length and a\n* minimum of four numbers.\n*\n         L     R10,=AL4(NUMTAB)        * Get addr of TRT-table for key\n         XR    R1,R1                   * Clear register\n         IC    R1,FDBKEYLV             * Get length of key\n         BCTR  R1,R0                   * Decrement length by 1 for TRT\n         EX    R1,RSKTRT               * Find first nonnumeric byte\n         BZ    RSK11                   * If all numbers use full length\n*\n* R1 now contains the address of the first non-numeric position in the\n* key. This is the address +1 of the last byte to be used.\n*\n         LA    R2,UAKEY                * Get start address of key\n         SR    R1,R2                   * Difference = nr of used bytes\n         LR    R2,R1                   * And put key len in right reg.\n         B     RSK12                   * Skip default length setting\n*\nRSK11    XR    R2,R2                   * Clear register\n         IC    R2,FDBKEYLV             * Pick up total key length\n*\n* R2 now contains the number of key-bytes to be used in this skip\n* operation. Before skipping, the RPL must be changed to contain the\n* required (generic or full) key length.\n*\nRSK12    EQU   *\n         LR    R10,R2                  * Load keylen-value to be used\n         L     R2,FDBRPL               * Retrieve address of RPL\n         CLM   R10,1,FDBSKKLV          * Is skip-key length ok ??\n         BE    RSK20                   * Yes: no modcb required.\n         MODCB RPL=(R2),               * Modify current RPL to reflect *\n               KEYLEN=(S,0(R10)),      *    correct key length         *\n               MF=(G,UAWORKAR,MODCBKLV) * use UAWORKAR to build plist\n         LTR   R15,R15                 * Modcb was ok ??\n         BZ    RSK19                   * Yes: proceed to point\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,020                 * Indicate error code\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RSK20                   * And try to position\n*\nRSK19    EQU   *                       * Modcb was ok.\n         STC   R10,FDBSKKLV            * Save current skip key-length\n*\n* Now request VSAM to start the skip, which is executed asynchronously.\n*\nRSK20    EQU   *\n         POINT RPL=(R2)                * Execute asynchronous point\n         LTR   R15,R15                 * Point started correctly ??\n         BZ    RSK90                   * Yes: complete the request\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,052                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RSK99                   * Skip remainder of skip-process\n*\n* Before returning to the mainline, we must set an unused bit in the\n* ECB because the ECB is used to check whether a check is required\n* before issuing another VSAM request or returning to the caller.\n* Normally the requested VSAM routine should set the busy bit in the\n* ECB, but sometimes VSAM is too slow and a check is skipped where it\n* should not have been skipped. Therefore we must set a bit in the ECB\n* ourselves.\n*\nRSK90    EQU   *\n         OI    FDBECB,X'01'            * Indicate I/O is in progress\n         NI    FDBSTAT,FDBNOEOF        * Point should reset eof-status\n*\nRSK99    L     R14,UALV1SAV            * Reload return address\n         BR    R14                     * And return to caller\n*\n         SPACE 3\n*\nRSKTRT   TRT   UAKEY(0),0(R10)         * Check nr of numeric characters\n*                                      *       in key\n         EJECT\n*\n* RRX processes any read requests: sequential / random\n*                                  input / update\n*\nRRX      EQU   *                       * Process read request\n         ST    R14,UALV1SAV            * Save R14 level 1\n*\n* If the ECB is in use, some operation must have been requested,\n* which must finish before we can proceed.\n*\n         L     R1,FDBECB               * Load current contents of ECB\n         LTR   R1,R1                   * Check that ECB is free (zero)\n         BZ    RRX20                   * Yes: go start read\n*\n* Another request is being processed by VSAM. If this situation is\n* unexpected, issue a warning. Before proceeding wait for the I/O\n* in progress to complete.\n*\nRRX10    EQU   *\n         TM    FDBREQ,FDBSKIP          * Was a skip requested ??\n         BO    RRX18                   * Yes: skip the warning message\n         AIF   (NOT &OPT).RRX18\n         TM    FDBREQ,FDBWRITE         * Was a write requested ??\n         BO    RRX18                   * Yes: skip the warning message\n         TM    FDBREQ,FDBDEL           * Was a delete requested ??\n         BO    RRX18                   * Yes: skip the warning message\n*\n.RRX18   ANOP\n         LA    R15,012                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error routine\n         BASR  R14,R3                  * Execute it, then return here\n*\nRRX18    EQU   *\n         ST    R3,UABASSAV             * Save current base register\n         L     R3,=AL4(RCHECK)         * Get address of wait routine\n         BASR  R14,R3                  * Go wait for I/O completion\n*\n* If an error condition is raised, no reading should be done.\n*\nRRX20    TM    FDBSTAT,FDBERROR        * Check for problems\n         BO    RRX99                   * On error: quit\n*\n* For random read (RR) a get must be issued to retrieve the record.\n* For sequential read (RS) the next record is to be made current.\n* If there's no next record in the buffer, then a skip\n* must be enforced to retrieve the next control interval.\n*\n         TM    FDBSTAT,FDBACRND        * Access is random ??\n         BO    RRX50                   * Get a record\n*\n* Access is sequential, check on eof-condition\n*\n         TM    FDBSTAT,FDBEOF          * End-of-file ??\n         BNO   RRX30                   * No: go find next record in buf\n         NI    FDBREQ,FDBNORX          * Reset read request bit\n         TM    FDBREQ,FDBSKIP          * Skip was requested also ??\n         BO    RRX99                   * Yes: skip caused eof !!\n         LA    R15,038                 * Set error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Issue warning, return here\n         B     RRX99                   * And skip issuing the read\n*\n* If the current record (according to FDB) is not valid, then the next\n* record to be read is the first record in the current control interval\n* otherwise the next record is to be found by incrementing the record\n* pointer with the record length. If the next record lies beyond the\n* current buffer, then a skip is to be forced.\n*\nRRX30    EQU   *                       * Locate next sequential record\n         L     R2,FDBREC               * Get address of current record\n         LTR   R6,R2                   * Is it valid ??\n         BNE   RRX32                   * No: add record length\n*                                      * Yes: use first record in buf\n         MVC   FDBREC,FDBSBUF          * Copy addr of first rec in buf\n         B     RRX99                   * And we're done\n*\nRRX32    EQU   *                       * Addr of old record saved in R6\n         AH    R2,FDBRECLV             * Get addr of next record in buf\n         ST    R2,FDBREC               * Store address of next record\n         C     R2,FDBEBUF              * New address < end-of-buffer\n         BL    RRX99                   * Yes: new record addr is valid\n*\n* Address of new record lies beyond end-of-buffer: force a skip\n* to the next control-interval.\n*\n         MVC   UAKEY,0(R6)             * Move key from buf to USERAREA\n         XR    R1,R1                   * Clear register\n         IC    R1,FDBKEYLV             * to contain key length\n         BCTR  R1,R0                   * Minus one to address last byte\n         XR    R2,R2                   * Clear register\n         IC    R2,UAKEY(R1)            * Get last byte of key\n         LA    R2,1(R2)                * Increment last byte of key\n         STC   R2,UAKEY(R1)            * Store new last byte of key\n         LA    R1,1(R1)                * Reset reg to full key length\n*\n* The UAKEY-field now contains the key of the last record in the\n* current buffer + binary 1. Since the search key is the lowest\n* possible key in the next control-interval the subsequent point\n* will retrieve the next control-interval.\n*\n         L     R2,FDBRPL               * Retrieve address of RPL\n         CLM   R1,1,FDBSKKLV           * Skip-key-length is ok ??\n         BE    RRX35                   * Yes: no modcb required\n         LR    R10,R1                  * Load keylen-value to be used\n         MODCB RPL=(R2),               * Modify current RPL to         *\n               KEYLEN=(S,0(R10)),      *    correct key length         *\n               MF=(G,UAWORKAR)         *    use UAWORKAR to build plist\n*\n         LTR   R15,R15                 * Modcb was ok ??\n         BZ    RRX34                   * Yes: proceed to point\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,020                 * Indicate error code\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         NI    FDBREQ,FDBNORX          * Reset read request bit\n         B     RRX99                   * Exit read routine\n*\nRRX34    EQU   *                       * Modcb was ok\n         STC   R10,FDBSKKLV            * Save skip key-length\n*\n* Now request VSAM to start the skip, which is executed asynchronously.\n*\nRRX35    EQU   *\n         POINT RPL=(R2)                * Execute asynchronous point\n         LTR   R15,R15                 * Point started correctly ??\n         BZ    RRX40                   * Yes: complete the request\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,052                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         NI    FDBREQ,FDBNORX          * Reset read request\n         B     RRX99                   * Skip remainder of read-process\n*\nRRX40    EQU   *\n         OI    FDBREQ,FDBREAD2         * Request re-read and indicate\n*                                      *         skip-request\n         OI    UASTAT,UARQREAD         * Signal restart read request\n         B     RRX90                   * Postpone further reading till\n*                                      *    RRX is executed again\n*\n* A get will have to be issued, so that VSAM may locate the correct\n* control-interval.\n*\nRRX50    EQU   *\n         L     R2,FDBRPL               * Retrieve address of RPL\n         GET   RPL=(R2)                * Ask VSAM to start a read\n         LTR   R15,R15                 * Has I/O been started ??\n         BZ    RRX90                   * Yes: skip error handling\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,053                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RRX99                   * Skip remainder of read-process\n*\nRRX90    EQU   *                       * Async. request is accepted\n         OI    FDBECB,X'01'            * Indicate I/O is in progress\n*\nRRX99    EQU   *\n         L     R14,UALV1SAV            * Reload return address\n         BR    R14                     * And return to caller\n*\n         SPACE 3\n*\nRRXCLC   CLC   UAKEY(0),0(R2)          * Compare requested key with\n*                                      *            record key\n         EJECT\n*\n* RWX processes any write requests: sequential / random\n*                                           update\n*\nRWX      EQU   *                       * Process write request\n         ST    R14,UALV1SAV            * Save R14 level 1\n*\n* If the ECB is in use, we have run into an error, since no\n* asynchronous I/O-requests may precede a write request.\n*\n         L     R0,FDBECB               * Get old ECB\n         LTR   R0,R0                   * Check that the ECB is free\n         BZ    RWX10                   * If it is zero, skip error\n         LA    R15,013                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         ST    R3,UABASSAV             * Save current base register\n         L     R3,=AL4(RCHECK)         * Get address of wait routine\n         BASR  R14,R3                  * And go wait for I/O-completion\n*\n* If an error condition is raised for the file, no I/O must be started.\n*\nRWX10    TM    FDBSTAT,FDBERROR        * Check for problems\n         BO    RWX99                   * On error: quit\n*\n* Compare old and new keys to make sure that the key will not be\n* changed by the update request.\n*\n         XR    R1,R1                   * Clear register\n         IC    R1,FDBKEYLV             * Get key length\n         LA    R8,LNSKEY(R1)           * Load address of data area\n         BCTR  R1,R0                   * Decrement to length-1 for CLC\n         LA    R2,FDBLKEY              * Get key-addr of previous read\n         EX    R1,RWXCLC               * Compare old and new key\n         BE    RWX20                   * If equal skip error handling\n*\nRWXERR30 LA    R15,043                 * Load error code\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RWX99                   * Skip remainder of write-logic\n*\nRWX20    EQU   *\n         L     R2,FDBREC               * Get addr of record within buf\n         EX    R1,RWXCLC               * Compare buffer-key and new key\n         BNE   RWXERR30                * If not equal then abend\n*\n* The key has not changed. Assemble the record from the data in the\n* parameter in a work area prior to the actual update.\n*\n         BAS   R14,RASM                * Go assemble new record\n*\n* Since no put is used to update the record, we must tell VSAM that\n* the contents of the buffer have changed by marking the buffer for\n* output. Thus the buffer will be rewritten, before its slot will be\n* used to accommodate another buffer.\n*\n         TM    FDBSTAT,FDBBUFUP        * Buffer marked for output ?\n         BO    RWX99                   * Yes: no mrkbfr required\n         L     R2,FDBRPL               * Get address of RPL\n         MRKBFR MARK=OUT,              * Mark buffer for output        *\n               RPL=(R2)                *    for current RPL\n         LTR   R15,R15                 * Mrkbfr was ok ??\n         BZ    RWX90                   * If zero, conclude write logic\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,059                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RWX99                   * Skip remainder of write-logic\n*\nRWX90    EQU   *                       * Asynchronous request accepted\n         OI    FDBECB,X'01'            * Indicate I/O is in progress\n         OI    FDBSTAT,FDBBUFUP        * Indicate buffer marked\n*                                      *        for output\nRWX99    EQU   *\n         L     R14,UALV1SAV            * Reload return address\n         BR    R14                     * And return to caller\n*\n         SPACE 3\n*\nRWXCLC   CLC   0(0,R2),0(R8)           * Compare read and write keys\n*\n         EJECT\n*\n* RIR processes any insert requests: sequential / random\n*                                            update\n*\nRIR      EQU   *                       * Process insert request\n         ST    R14,UALV1SAV            * Save R14 level 1\n*\n* Since no other requests may accompany an insert request it is an\n* error if the ECB is currently in use.\n*\n         L     R0,FDBECB               * Get old ECB\n         LTR   R0,R0                   * Check that the ECB is free\n         BZ    RIR10                   * If it is zero, skip error\n         LA    R15,014                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         ST    R3,UABASSAV             * Save current base register\n         L     R3,=AL4(RCHECK)         * Get address of wait routine\n         BASR  R14,R3                  * And go wait for I/O-completion\n*\n* If the file is in error status, no I/O should be requested.\n*\nRIR10    TM    FDBSTAT,FDBERROR        * Check for problems\n         BO    RIR99                   * On error: quit\n*\n* First we must rebuild the record from the parameter in a work area\n*\n         BAS   R14,RASM                * Assemble complete record\n         TM    FDBSTAT,FDBRPLIR        * Has RPL been reset to NUP ??\n         BO    RIR20                   * Yes: skip changing UPD to NUP\n*\n* RPL is not in insert status, so it must be changed before we can\n* request VSAM to insert this record into the file.\n*\n         L     R2,FDBRPL               * Get address of RPL\n         L     R6,FDBWAREA             * Get addr of record in workarea\n         LH    R7,FDBRECLV             * Get length of record\n         MODCB RPL=(R2),               * Modify RPL to insert mode     *\n               AREA=(S,0(R6)),         *     specifying record area    *\n               AREALEN=(S,0(R7)),      *     and record length         *\n               OPTCD=(NUP,MVE),        *     non-update move mode      *\n               MF=(G,UAWORKAR,MODCBILV) *    build plist in UAWORKAR\n         LTR   R15,R15                 * RPL changed without error ?\n         BZ    RIR19                   * Yes: skip error\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,061                 * Set error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RIR99                   * Skip remainder of insert-logic\n*\nRIR19    EQU   *\n         OI    FDBSTAT,FDBRPLIR        * Indicate RPL status\n*\n* The RPL is in insert status right now. If we ask vsam to put the\n* record, VSAM will try to insert it. Splitting control-intervals\n* and control-areas, when not enough free space is available will be\n* taken care off by VSAM.\n*\nRIR20    EQU   *\n         L     R2,FDBRPL               * Get plist-address\n         PUT   RPL=(R2)                * Have VSAM insert new record\n         LTR   R15,R15                 * Request accepted by VSAM ?\n         BZ    RIR90                   * Yes: skip error handling\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,054                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RIR99                   * Skip remainder of insert-logic\n*\nRIR90    EQU   *                       * Asynchronous request accepted\n         OI    FDBECB,X'01'            * Indicate I/O is in progress\n*\nRIR99    L     R14,UALV1SAV            * Reload return address\n         BR    R14                     * And return to caller\n*\n         EJECT\n*\n* RDR processes any delete requests: sequential / random\n*                                            update\n*\nRDR      EQU   *                       * Process delete request\n         ST    R14,UALV1SAV            * Save R14 level 1\n*\n* No other I/Os are allowed to accompany a delete request. Therefore\n* if the ECB is in use, we have run into an error.\n*\n         L     R0,FDBECB               * Get old ECB\n         LTR   R0,R0                   * Check that the ECB is free\n         BZ    RDR10                   * If it is zero, skip error\n         LA    R15,015                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         ST    R3,UABASSAV             * Save current base register\n         L     R3,=AL4(RCHECK)         * Get address of wait routine\n         BASR  R14,R3                  * And go wait for I/O-completion\n*\n* No delete requests should be initiated if an error condition exists.\n*\nRDR10    TM    FDBSTAT,FDBERROR        * Check for problems\n         BO    RDR99                   * On error: quit\n*\n* Compare old and new key values to prevent inadvertent deletion of\n* the wrong record.\n*\n         XR    R1,R1                   * Clear register\n         IC    R1,FDBKEYLV             * Get key length\n         LA    R8,LNSKEY(R1)           * Load address of data area\n         BCTR  R1,R0                   * Decrement to length-1 for CLC\n         LA    R2,FDBLKEY              * Get key-addr of previous read\n         EX    R1,RDRCLC               * Compare old and new key\n         BE    RDR20                   * If equal skip error handling\n*\nRDRERR29 LA    R15,044                 * Load error code\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RDR99                   * Skip remainder of delete-logic\n*\nRDR20    EQU   *\n         L     R2,FDBREC               * Get addr of record in buffer\n         EX    R1,RDRCLC               * Compare buffer-key and new key\n         BNE   RDRERR29                * If not equal then abend\n*\n* Since VSAM assumes move mode for delete requests, we must rebuild\n* the record in a work area before we can issue a delete request.\n*\n         BAS   R14,RASM                * Assemble complete record\n*\n* Change the RPL to move mode, and specify where our record buffer\n* is located.\n*\n         L     R2,FDBRPL               * Get address of RPL\n         L     R6,FDBWAREA             * Get addr of record in workarea\n         LH    R7,FDBRECLV             * Get length of record\n         MODCB RPL=(R2),               * Modify RPL to delete mode     *\n               AREA=(S,0(R6)),         *     specifying record area    *\n               AREALEN=(S,0(R7)),      *     and record length         *\n               OPTCD=(MVE),            *     changing to move mode     *\n               MF=(G,UAWORKAR,MODCBDLV) *    build plist in UAWORKAR\n         LTR   R15,R15                 * RPL changed without error ?\n         BZ    RDR29                   * Yes: skip error\n         ST    R15,UAVSAMRC            * Save retcode for error handler\n         LA    R15,062                 * Set error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RDR99                   * And abort delete-processing\n*\nRDR29    EQU   *\n         OI    FDBSTAT,FDBRPLDR        * Indicate RPL status\n*\n* Now that the RPL is in delete status we can start the request to\n* remove the record from the file.\n*\n         L     R2,FDBRPL               * Get address of RPL\n         ERASE RPL=(R2)                * Delete this record\n         LTR   R15,R15                 * Request issued to VSAM ??\n         BZ    RDR90                   * Yes, we're done; skip error\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,055                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RDR99                   * Skip remainder of delete-logic\n*\nRDR90    EQU   *                       * Asynchronous request accepted\n         OI    FDBECB,X'01'            * Indicate I/O is in progress\n*\nRDR99    EQU   *\n         L     R14,UALV1SAV            * Reload return address\n         BR    R14                     * And return to caller\n*\n         SPACE 3\n*\nRDRCLC   CLC   0(0,R2),0(R8)           * Compare read and write keys\n*\n         EJECT\n*\n* RCA processes any close request: sequential / random\n*                                  input / update\n*\nRCA      EQU   *                       * Process close request\n         ST    R14,UALV1SAV            * Save R14 level 1\n         AIF   (NOT &DBG).RCA08        * Warning in test mode only\n*\n* If the last request was not an update for record with key all zeroes\n* then the file version record has not been updated.\n*\n         TM    FDBSTAT,FDBUPDAT        * File open in update mode ??\n         BNO   RCA08                   * No: skip this check\n         TM    FDBLREQ,FDBWRITE        * Last request was a write ??\n         BNO   RCA05                   * No: issue warning\n         XR    R1,R1                   * Clear register\n         IC    R1,FDBKEYLV             * To contain key length\n         BCTR  R1,R0                   * Decrement by one for CLC\n         EX    R1,RCACLC               * Key all zeroes ??\n         BE    RCA08                   * Yes: ok\n*\nRCA05    EQU   *\n         LA    R15,021                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n.RCA08   ANOP\n*\n* No error checking is done; if the file is in error it should be\n* closed. However, if the ECB is in use, we have run into a rather\n* serious error, because no other I/Os should accompany a close req\n*\nRCA08    L     R0,FDBECB               * Get old ECB\n         LTR   R0,R0                   * Check that the ECB is free\n         BZ    RCA10                   * If it is zero, skip error\n         LA    R15,016                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         ST    R3,UABASSAV             * Save current base register\n         L     R3,=AL4(RCHECK)         * Get address of wait routine\n         BASR  R14,R3                  * And go wait for I/O-completion\n*\n* Increment IO-call counter, then close file (synchronous I/O)\n*\nRCA10    EQU   *\n         AIF   (&OPT).RCA10\n         L     R2,UAIOCNT              * Load total io-count\n         LA    R2,1(R2)                * Increment by one\n         ST    R2,UAIOCNT              * And store updated value\n*\n.RCA10   ANOP\n         L     R2,=AL4(CLOSE)          * Point to list-form of close\n         MVC   UAWORKAR(CLOSELV),0(R2) * Copy close-plist to work-area\n         LA    R9,UAWORKAR             * Point to this modifiable copy\n         L     R2,FDBACB               * Retrieve ACB-address\n         CLOSE ((R2)),                 * Close the file                *\n               MF=(E,(R9))             *    using copy of default plist\n         LTR   R15,R15                 * Close was ok ??\n         BZ    RCA19                   * Yes: free storage areas\n         OI    FDBSTAT,FDBERROR        * Set error-status for this file\n         LA    R15,060                 * Indicate error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RCA90                   * And skip remainder of close\n*\nRCA19    EQU   *\n         NI    FDBSTAT,X'00'           * Reset status to closed\n*\n* Now that the file has been closed, the storage areas for ACB, RPL,\n* and workarea should be returned to the system, because they were\n* allocated dynamically.\n*\nRCA20    L     R2,FDBWAREA             * Retrieve address of workarea\n         LTR   R2,R2                   * Does a workarea exist ??\n         BZ    RCA30                   * No: skip freeing workarea\n         LH    R6,FDBRECLV             * Retrieve length of area\n         FREEMAIN RC,                  * Conditional freemain request  *\n               SP=&SP,                 *    from our own subpool       *\n               LV=(R6),                *    specifying length of area  *\n               A=(R2)                  *    and address of workarea\n         LTR   R15,R15                 * Freemain was ok??\n         BZ    RCA29                   * Yes: continue\n         LA    R15,024                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         XR    R15,R15                 * Simulate correct freemain\n*\nRCA29    EQU   *\n         ST    R15,FDBWAREA            * Reset address-field in FDB\n*\nRCA30    EQU   *                       * Remove ACB and RPL\n         L     R2,FDBACB               * Retrieve address of ACB\n         LTR   R2,R2                   * Does an ACB exist ??\n         BZ    RCA50                   * No: skip freeing ACB/RPL-area\n         FREEMAIN RC,                  * Conditionally free ACB/RPL    *\n               SP=&SP,                 *    from our private subpool   *\n               LV=IFGACBLV+IFGRPLLV,   *    specifying its length      *\n               A=(R2)                  *    and address\n         LTR   R15,R15                 * Freemain was ok??\n         BZ    RCA39                   * Yes: continue\n         LA    R15,022                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         XR    R15,R15                 * Simulate correct freemain\n*\nRCA39    EQU   *\n         ST    R15,FDBRPL              * Reset ptr-field in FDB for RPL\n         ST    R15,FDBACB              * Reset ptr-field in FDB for ACB\n*\n* The file has been closed, all dynamic storage areas associated with\n* FDB have been freed. Before we can free the FDB-storage it must\n* be removed from the FDB-chain.\n*\nRCA50    EQU   *\n         LR    R6,R5                   * Save address of current FDB\n         LA    R5,UAFDBPTR             * Set ptr to start of FDB-chain\n*\nRCA52    C     R6,FDBNEXT              * Next FDB is the closed one ??\n         BE    RCA55                   * Yes: go remove closed FDB\n         L     R5,FDBNEXT              * Get addr of next FDB in chain\n         LTR   R5,R5                   * Valid ??\n         BNZ   RCA52                   * Yes: it points to closed FDB??\n         B     RCA90                   * No: we're done\n*\nRCA55    EQU   *\n         MVC   FDBNEXT,0(R6)           * Copy next field of closed FDB\n*\n* Closed FDB has now been removed from the FDB-chain.\n*\n         FREEMAIN RC,                  * Conditionally free FDB-storage*\n               SP=&SP,                 *    from our private subpool   *\n               LV=L'FDB,               *    specifying both its length *\n               A=(R6)                  *    and its address\n         LTR   R15,R15                 * Freemain was ok??\n         BZ    RCA90                   * Yes: continue\n         LA    R15,025                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n*\nRCA90    EQU   *\n         L     R14,UALV1SAV            * Reload return address\n         BR    R14                     * And return to caller\n*\n         SPACE 3\n*\nRCACLC   CLC   FDBLKEY(0),=&MAXKEY.C'0' * Compare last key with zeros\nRCACLCDD CLC   FDBDDLOC(0,R9),FDBDDNAM  * Compare FDBDDNAM-fields\n*\n         EJECT\n*\n* RBLDVRP allocates a VSAM resource pool (VRP) tailored for either\n*                    sequential or random processing\n*\nRBLDVRP  EQU   *                       * Allocate VSAM resource pool\n         ST    R14,UALV2SAV            * Save R14 level 2\n*\n* Now we will try to allocate a VSAM resource pool. If the requested\n* shrpool number is too high, we skip the allocation and VSAM will\n* have to use private pools.\n*\n         MVI   UAPOOLNR,X'00'          * Default shrpool-nr to be used\n*\nRBLDVRP2 EQU   *\n         CLI   UAPOOLNR,X'0F'          * Is the shrpool-nr low enough??\n         BH    RBLDVRP8                * No: use private pools\n*\n* Before inserting the shrpool-nr to be used into the plist that\n* defines our bldvrp-request, the default plist must be copied to\n* a location where we can modify it.\n*\n         L     R2,=AL4(BLDVRPD)        * Get address of bldvrp plist\n         MVC   UAWORKAR(BLDVRDLV),0(R2) *Copy plist to be modified\n         LA    R2,UAWORKAR             * And point to modifiable plist\n*\n         USING DSBLDVRP,R2             * Address plist by DSECT\n         LA    R1,BLDVRPHD             * Point to header entry\n         ST    R1,BLDVRPTR             * Insert header address in plist\n         OI    BLDVRPTR,X'80'          * and mark end-of-plist\n         MVC   BLDVRPNR,UAPOOLNR       * Copy shrpool-nr to be used\n         DROP  R2                      * Drop addressability of plist\n         BLDVRP MF=(E,(R2))            * Build vsam resource pool\n         LTR   R15,R15                 * Check return code\n         BZ    RBLDVRP5                * If ok: go allocate index pool\n*\n* If bldvrp was unsuccessful because a resource pool with the specified\n* pool number already existed, then we should try another shrpool nr.\n*\n         CH    R15,=H'4'               * Double shrpool number ??\n         BE    RBLDVRP3                * Yes: try next shrpool-nr\n         CH    R15,=H'32'              * Shrpool exists in other amode?\n         BNE   RBLDVRP8                * No: issue error message\n*\n* The shrpool number we used already exists, increment shrpoolnr and\n* retry. If the shrpoolnr exceeds 15, then there are no free shrpool\n* numbers and we must use private buffering in stead of LSR.\n*\nRBLDVRP3 EQU   *\n         XR    R1,R1                   * Clear register\n         IC    R1,UAPOOLNR             * to contain shrpool-nr\n         LA    R1,1(R1)                * Increment shrpool number by 1\n         STC   R1,UAPOOLNR             * And save it in the USERAREA\n         B     RBLDVRP2                * Now go try allocate a shrpool\n*\n* The data resource pool has been built successfully.\n*\nRBLDVRP5 EQU   *\n         OI    UAVRPSTA,UAVEXIST       * Indicate VRP now exists\n*\n* Now we must try to allocate the index pool. If it fails, it does not\n* matter much, the only difference is that VSAM will be a bit slower.\n* Before inserting the shrpool-nr to be used into the plist that\n* defines our bldvrp-request, the default plist must be copied to\n* a location where we can modify it. (same as above)\n*\n         L     R2,=AL4(BLDVRPI)        * Get address of bldvrp plist\n         MVC   UAWORKAR(BLDVRILV),0(R2) *Copy plist to be modified\n         LA    R2,UAWORKAR             * and point to modifiable plist\n         USING DSBLDVRP,R2             * Address plist by dsect\n         LA    R1,BLDVRPHD             * Point to header entry\n         ST    R1,BLDVRPTR             * Insert header address in plist\n         OI    BLDVRPTR,X'80'          * and mark end-of-plist\n         MVC   BLDVRPNR,UAPOOLNR       * Copy shrpool-nr to be used\n         DROP  R2                      * Drop addressability of plist\n*\n* In stead of using the execute form of the bldvrp-macro, the SVC\n* itself is coded. This is because the execute form of the bldvrp\n* for lsr,index contains a bug, resulting in a returncode 4 in R15.\n* Reason: the plist is modified incorrectly by the generated code.\n* By coding the SVC in stead of the macro this problem is circumvented\n*\n*        BLDVRP MF=(E,UAWORKAR)        * Build VSAM resource pool\n         LR    R1,R2                   * Set parm pointer for bldvrp\n         SVC   19 = BLDVRP MF=(E,...)  * Build VSAM resource pool\n         LTR   R15,R15                 * Check return code\n         BZ    RBLDVRP9                * If ok: we're done\n         ST    R15,UAVSAMRC            * Save VSAM returncode\n         LA    R15,080                 * Load error code\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RBLDVRP9                * Then exit\n*\n* Bldvrp encountered a serious error\n*\nRBLDVRP8 OI    UAVRPSTA,UAVERROR       * Indicate error status\n         MVI   UAPOOLNR,X'10'          * Indicate private pools in use\n         ST    R15,UAVSAMRC            * Save VSAM returncode\n         LA    R15,017                 * Load error code\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n*                                      * And exit rbldvrp-routine\n*\n* The resource pool now is allocated successfully or VSAM will default\n* to the use of private pools. In either case the VRP-status bits will\n* have to be set.\n*\nRBLDVRP9 EQU   *\n         L     R14,UALV2SAV            * Reload return address\n         BR    R14                     * And return to caller (ROP)\n*\n         EJECT\n*\n* RASM assembles a complete record in a workarea from the appropriate\n* key and data fields in the parameter\n*\nRASM     EQU   *                       * Assemble a complete record\n         ST    R14,UALV2SAV            * Save R14 level 2\n*\n* If we are processing a write request, we must assemble the record\n* in the existing record area in the buffer. Otherwise we are\n* processing either a delete or an insert request, both of which\n* require the record to be assembled in a work-area.\n*\n         TM    FDBREQ,FDBWRITE         * Is this a write request ??\n         BNO   RASM05                  * No: go find work-area\n         L     R2,FDBREC               * Get address of record\n         B     RASM10                  * And skip finding work-area\n*\n* Get the address of the workarea to be used. If the address is zero\n* then no area exists and one will have to be allocated.\n*\nRASM05   L     R2,FDBWAREA             * Get address of work-area\n         LTR   R2,R2                   * Does it exist ??\n         BNZ   RASM10                  * If it exists: skip getmain\n         LH    R2,FDBRECLV             * Get required length\n         GETMAIN RC,                   * Conditionally request storage *\n               SP=&SP,                 *    from our own subpool       *\n               LV=(R2)                 *    long enough for a record\n         LTR   R15,R15                 * Request was ok ??\n         BZ    RASM09                  * Yes: skip error\n*\n* A workarea for assembling the record can not be allocated. Therefore\n* the insert or delete request we are processing must be aborted. This\n* is done by giving the error routine the level1 return address. Thus\n* error will return to the main-line (phase3) after issuing the error.\n*\n         LA    R15,070                 * Load error number\n         L     R14,UALV1SAV            * Get return address to mainline\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BR    R3                      * Execute it, return to mainline\n*\nRASM09   EQU   *\n         ST    R1,FDBWAREA             * Save addr of allocated storage\n         LR    R2,R1                   * Set pointer for assembly\n*\n         SPACE 3\n*\n* Whether we are assembling in a work-area or in the buffer, R2\n* now points to the area to be used for assembly. Before we can start\n* moving data, we must first find the map-master-element for the\n* parameter version that is requested.\n*\nRASM10   EQU   *\n         XR    R0,R0                   * Clear reg for 0 compare value\n         L     R6,FDBMAP               * Get start addr of MME-list\n         USING DSMME,R6                * And use DSECT for addressing\n*\n         AIF   (&OPT).RASM20           * Currently only 1 version / FDB\nRASM12   CLC   UAVERSI,MMEVERS         * Is this the version we seek ??\n         BE    RASM20                  * Yes: go use map\n         CH    R0,MMEREM               * Are there more MMEs in list ?\n         BNE   RASM15                  * Yes: skip error\n         LA    R15,028                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RASM90                  * Skip remainder of assembly\n*\nRASM15   LA    R6,L'MME(R6)            * Address next MME\n         B     RASM12                  * And check this MME\n.RASM20  ANOP\n*\n* R2 will continuously point to the start of the assembly-area.\n* R6 now points to the map-master-element to be used. R7 will be used\n* for addressing the consecutive map-elements to be used.\n* According to the list of map-elements associated with this MME\n* the data will have to be moved. R8 is used as destination pointer\n* while R10 is used as source pointer. Depending on the amount of data\n* associated with a map element either MVC or MVCL will be used.\n*\nRASM20   EQU   *\n         L     R7,MMEMAP               * Get start addr of map to use\n         USING DSME,R7                 * And use DSECT for addressing\n*\nRASM22   LA    R10,BXAIOPRM            * Get start address of parm\n         AH    R10,MEPRMOFS            * Add offset within parm\n         LR    R8,R2                   * Get start address of record\n         AH    R8,MERECOFS             * And add offset,\n*                                      *     giving data-start\n         LH    R9,MEDATLV              * Get length to be used\n         CLI   MEDATLV,X'00'           * Is data longer than 256 bytes?\n         BNE   RASM24                  * Y: too long for MVC, use MVCL\n         BCTR  R9,R0                   * Decrement length by 1 for MVC\n         EX    R9,RASMMVC              * And move the data\n         B     RASM29                  * Go loop to next map-element\n*\nRASM24   LR    R1,R11                  * Save data-area pointer\n         LR    R11,R9                  * Length of target = l'source\n         MVCL  R8,R10                  * Copy data: parm -> workarea\n         LR    R11,R1                  * Restore data-area pointer\n*\nRASM29   EQU   *\n         AIF   (&OPT).RASM90           * One ME per parm currently\n         CH    R0,MEREM                * Any more elements ??\n         BE    RASM90                  * No: go finish RASM\n         LA    R7,L'ME(R7)             * Point next map-element\n         B     RASM22                  * And go move data\n.RASM90  ANOP\n*\nRASM90   EQU   *\n         L     R14,UALV2SAV            * Reload return address\n         BR    R14                     * And return to caller\n*\n         SPACE 3\n*\nRASMMVC  MVC   0(0,R8),0(R10)          * Move a small data segment\n*\n         DROP  R6                      * End of addressability of MME\n         DROP  R7                      * End of addressability of ME\n*\n         DROP  R3                      * End of addressability phase 3\nFASE3END EQU   *\n*\n         EJECT\n         USING PHASE4,R3\nPHASE4   EQU   *\n*\n* All requests have now been started: now we must wait for them\n* to end to obtain returncodes for the caller.\n* Thereafter we shall finish with some concluding processing.\n*\n         LA    R5,UAFDBPTR             * Point to entry of FDB-chain\nLOOP4    L     R5,FDBNEXT              * Make next FDB the current one\n         LTR   R5,R5                   * Points nowhere: we're through\n         BZ    LOOP4EX                 * If no next FDB, then exit loop\n         CLI   FDBREQ,FDBNOREQ         * Anything to do for this file ?\n         BE    LOOP4                   * No: try next FDB\n         ST    R3,UABASSAV             * Save current base register\n         L     R3,=AL4(RCHECK)         * Get address of wait routine\n         BASR  R14,R3                  * Wait for I/O completion\n*\n* If a record was retrieved, its data contents must be copied into\n* the parameter area, so the application can access the data.\n*\n         TM    FDBREQ,FDBREAD          * Was a read operation executed?\n         BNO   LOOP4C                  * No: skip disassembly\n         TM    FDBSTAT,FDBEOF          * Did we reach end-of-file ??\n         BO    LOOP4C                  * Yes: skip disassembly\n         TM    FDBSTAT,FDBERROR        * Was error-status raised ??\n         BO    LOOP4C                  * Yes: skip disassembly\n*\n* If the read was random then we must check for correct key value\n*\n         TM    FDBSTAT,FDBACRND        * Request was random\n         BNO   LOOP4DIS                * No: no need to check key\n         L     R2,FDBREC               * Get addr of record just read\n         LTR   R2,R2                   * Is there such a record ??\n         BE    LOOP4C                  * No: skip disassembly\n         AIF   (&OPT).LUP4DIS          * No need to check key\n         XR    R1,R1                   * Clear register\n         IC    R1,FDBKEYLV             * to contain key length\n         BCTR  R1,R0                   * Decrement by one for CLC\n         EX    R1,LOOP4CLC             * Compare with correct length\n         BE    LOOP4DIS                * Keys equal: disassemble\n         B     LOOP4C                  * Skip disassembly of\n*                                      *      erroneous record\n*\nLOOP4CLC CLC   0(0,R2),UAKEY           * Compare key in record\n*                                      *      to key in parm\n*\n.LUP4DIS ANOP\n*\nLOOP4DIS EQU   *\n         BAS   R14,RDISM               * Disassemble record into parm\n*\n         AIF   (NOT &DBG).LOOP4C\n*\n* If the read was forced by an open request, all records must be\n* equal (apart from differences in length).\n*\n         TM    FDBREQ,FDBOPEN          * Was open requested\n         BNO   LOOP4C                  * No: skip compare\n*\n* First we must find start address and length of record of current FDB\n*\n         L     R8,FDBREC               * Get address of record\n         LTR   R8,R8                   * Is it valid ??\n         BE    LOOP4C                  * No: skip this record\n*                                      *    (error has been issued\n*                                      *           by RDISM)\n         LH    R9,FDBRECLV             * Get record length\n         XR    R6,R6                   * Clear register\n         IC    R6,FDBKEYLV             * to contain key length\n         LA    R8,0(R6,R8)             * Get start of data beyond key\n         SR    R9,R6                   * Get length of data without key\n*\n* Now retrieve addr+length of record of previous FDB before overwriting\n* them with addr+length of record of current FDB\n*\n         L     R6,UALRECAD             * Get address of previous record\n         LH    R7,UALRECLV             * Get data length of prev. rec'd\n         ST    R8,UALRECAD             * Save address of last record\n         STH   R9,UALRECLV             * Save data length of last rec'd\n*\n* If there is no record of a previous FDB, then forego comparing\n*\n         LTR   R6,R6                   * Previous record is defined ??\n         BZ    LOOP4C                  * No: skip comparing\n*\n* The records are to be compared, but only for a length that is\n* equal to the shortest data length.\n*\n         CR    R7,R9                   * Compare lengths\n         BL    LOOP4LOW                * R7 is the shorter one\n         LR    R7,R9                   * Compare using shortest length\n         B     LOOP4CMP                * Go compare\nLOOP4LOW LR    R9,R7                   * R7 is the shorter one\nLOOP4CMP CLCL  R6,R8                   * Compare data areas (pad=x'00')\n         BE    LOOP4C                  * Equal: ok\n         LA    R15,029                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n*\n.LOOP4C  ANOP\n*\n* If RPL has been changed for insert, it must remain so because the\n* next request may well be another insert. However, if the RPL has\n* been changed for delete, then the next request cannot be another\n* delete, and therefore the RPL should be reset to normal right away.\n*\nLOOP4C   EQU   *\n         TM    FDBSTAT,FDBRPLDR        * RPL changed for delete ??\n         BNO   LOOP4E                  * No: go check next FDB\n         TM    FDBSTAT,FDBRPLIR        * RPL changed for insert ??\n         BO    LOOP4E                  * Yes: let it remain so\n*\n* RPL has been changed for delete, not for insert: change to normal.\n*\n         L     R2,FDBRPL               * Get address of changed plist\n         LA    R6,FDBREC               * Record address within buffer\n         MODCB RPL=(R2),               * Reset RPL from delete mode    *\n               OPTCD=(LOC),            *  LOC in stead of MVE option   *\n               AREA=(S,0(R6)),         *  address of data area         *\n               MF=(G,UAWORKAR,MODCNDLV) * using UAWORKAR to build plist\n         LTR   R15,R15                 * Modcb was ok ??\n         BE    LOOP4D                  * Yes: skip error\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,063                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     LOOP4E                  * Skip resetting the RPL-status\n*\nLOOP4D   EQU   *\n         NI    FDBSTAT,FDBRPLND        * Reset RPL-status to non-delete\n*\n* Post-processing for this FDB is complete: fill LREQ and LKEY fields\n* unless the FDBRETCD field is greater than X'04' (I/O unsuccessful)\n*\nLOOP4E   EQU   *\n         CLI   FDBRETCD,X'00'          * FDB-return code worse\n*                                      *     than warning?\n         BNE   LOOP4F                  * Yes: don't fill LREQ and LKEY\n         MVC   FDBLREQ,FDBREQ          * I/O was concluded ok, hence\n         MVC   FDBLKEY,LNSKEY          * save request and key we used\n*\nLOOP4F   EQU   *\n         AIF   (&OPT).LOOP4EX          * Only one FDB can be active\n         B     LOOP4                   * Go try next FDB\n*\n.LOOP4EX ANOP\n*\nLOOP4EX  EQU   *\n*\n         EJECT\n*\n* All I/O has been completed: if all files have been closed then\n* the complete USERAREA (including FDBs) should be freed.\n*\n         CLC   LNSFCODE,=CL2'CA'       * Was a close request processed?\n         BNE   EXIT                    * No: some files must be open\n*\n         AIF   (&OPT).LOOP6\n*\n* When not optimizing all FDBs of unopened files are to be removed\n* before we continue.\n*\n         LA    R5,UAFDBPTR             * Point to start of FDB-chain\n         XR    R6,R6                   * Set nr of open files to 0.\nLOOP5    L     R5,FDBNEXT              * Point to next FDB in chain\n         LTR   R5,R5                   * End of chain ??\n         BE    LOOP5EX                 * Yes: end of this loop.\n         TM    FDBSTAT,FDBINPUT        * File is open ??\n         BNO   LOOP5                   * No: do not count this FDB\n         LA    R6,1(R6)                * Increment open-file-counter\n         B     LOOP5                   * And continue with next FDB\n*\n* R6 now contains the number of open files. If no files are open\n* all FDBs are to be freed.\n*\nLOOP5EX  EQU   *\n         LTR   R6,R6                   * Any open files ??\n         BNE   LOOP6EX                 * Yes: skip freemains of FDBs\n*\n* No open files: remove and free all FDBs\n*\nLOOP6    L     R5,UAFDBPTR             * Point to first FDB in chain\n         LTR   R5,R5                   * Is it valid ?\n         BE    LOOP6EX                 * No: we're done\n         MVC   UAFDBPTR,FDBNEXT        * Copy addr of next FDB in chain\n         FREEMAIN RC,                  * Conditionally free unused FDB *\n               SP=&SP,                 *    from our own subpool       *\n               LV=L'FDB,               *    specifying length of FDB   *\n               A=(R5)                  *    and its starting address\n         LTR   R15,R15                 * Freemain was ok ??\n         BE    LOOP6                   * Yes: go free next FDB\n         LA    R15,025                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it\n         B     LOOP6                   * Then go remove next FDB\n*\nLOOP6EX  EQU   *\n*\n.LOOP6   ANOP\n*\n* Close was requested, check whether all files are currently closed.\n* If any file is still open, the USERAREA cannot be freed yet.\n*\n         CLC   UAFDBPTR,=F'0'          * Any files still open ??\n         BNE   EXIT                    * Yes: skip freeing storage\n*\n* Remove the VSAM resource pool, unless private pools are being used.\n*\n         TM    UAVRPSTA,UAVEXIST       * Does a VRP exist ??\n         BNO   DLVRPOK                 * No: go pretend dlvrp was ok.\n         CLI   UAPOOLNR,X'0F'          * Is LSR active ??\n         BH    FREEM                   * No: we are using private pools\n*\n* The plist for dlvrp-request is equal to the plist for the bldvrp-req.\n* Before inserting the shrpool-nr to be used into the plist that\n* defines our dlvrp-request, the default plist must be copied to\n* a location where we can modify it.\n*\nDLVRP2   EQU   *\n         L     R2,=AL4(BLDVRPD)        * Get address of plist for dlvrp\n         MVC   UAWORKAR(BLDVRDLV),0(R2) *Copy plist to be modified\n         LA    R2,UAWORKAR             * Point to the modifiable plist\n         USING DSBLDVRP,R2             * Establish addressability\n         LA    R1,BLDVRPHD             * Point to header entry\n         ST    R1,BLDVRPTR             * Insert address in plist\n         OI    BLDVRPTR,X'80'          * Insert end-of-plist marker\n         MVC   BLDVRPNR,UAPOOLNR       * Copy shrpool-nr to be used\n         DROP  R2                      * Drop addressability to plist\n         DLVRP MF=(E,(R2))             * Free the VSAM resource pool\n         LTR   R15,R15                 * Free was successfull ??\n         BZ    DLVRPOK                 * Yes: go free USERAREA\n*\n* An error occurred while executing dlvrp. Warning: the returncode from\n* dlvrp may be incorrect (eg. X'0C' when shrpool-nr is invalid).\n*\n         OI    UAVRPSTA,UAVERROR       * Set error bit\n         ST    R15,UAVSAMRC            * Save VSAM retcode\n         LA    R15,018                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     FREEM                   * Skip resetting VRP-indicators\n*\nDLVRPOK  NI    UAVRPSTA,UAVCLOSE       * Reset status to closed\n         MVI   UAPOOLNR,X'00'          * Reset shrpool-nr to default\n*\n* Return the USERAREA to the system\n*\nFREEM    EQU   *\n         AIF   (NOT &DBG).FREEM\n*\n* If snap-file is opened, then it must be closed\n*\n         TM    UASTAT,UASNAPOP         * Snap-file open ??\n         BNO   FREEM1                  * No: skip closing the file\n         L     R2,=AL4(CLOSE)          * Point to plist for close macro\n         MVC   UAWORKAR(CLOSELV),0(R2) * Copy default close-plist\n         LA    R9,UAWORKAR             * and point to modifiable plist\n         L     R2,UASNAPTR             * Address snap control-block\n         USING DSSNAP,R2               * Establish addressability\n         LA    R2,SNAPDCB              * And point to the open DCB\n         DROP  R2                      * Drop snapblock\n         CLOSE ((R2)),                 * Close snap-file               *\n               MF=(E,(R9))             *    using copy of default plist\n         LTR   R15,R15                 * Close was ok ??\n         BE    FREEMA                  * Yes: continue\n         LA    R15,078                 * Load error code\n         L     R3,=AL4(ERROR)          * Retrieve address of error-rout\n         BASR  R14,R3                  * and execute it\n         B     FREEM2                  * Skip remainder of snap-closing\n*\nFREEMA   NI    UASTAT,UASNAPCL         * Set status to closed\n*\nFREEM1   L     R2,UASNAPTR             * Get address of snap-block\n         LTR   R2,R2                   * Valid ??\n         BZ    FREEM2                  * No: skip freemain\n         FREEMAIN RC,                  * Conditionally free SNAPAREA   *\n               SP=&SP,                 *    from our private subpool   *\n               LV=L'SNAPAREA,          *    specifying correct length  *\n               A=(R2)                  *    and starting address\n         LTR   R15,R15                 * Freemain was ok??\n         BE    FREEM1A                 * Yes: skip error\n         LA    R15,079                 * Load error code\n         L     R3,=AL4(ERROR)          * Retrieve address of error-rout\n         BASR  R14,R3                  * and execute it\n         B     FREEM2                  * Skip remainder of snap-closing\n*\nFREEM1A  XC    UASNAPTR,UASNAPTR       * Yes: wipe pointer\n*\n.FREEM   ANOP\n*\nFREEM2   C     R13,=AL4(CRASHMEM+8)    * Using the emergency area ??\n         BE    EXIT                    * Yes: skip freemain\n         LH    R10,UAREASN             * Save retcode for application\n         MVC   LNSRCODE,UARETCD        * Set returncode in parameter\n         LR    R2,R13                  * Save address of USERAREA\n         L     R13,SAVEPREV(R13)       * Reset R13 to previous savearea\n         FREEMAIN RC,                  * Conditionally free USERAREA   *\n               SP=&SP,                 *    from our private subpool   *\n               A=(R2),                 *    specifying starting address*\n               LV=L'USERAREA           *    and full length\n         LTR   R15,R15                 * Freemain was successfull ??\n         BZ    FREEM10                 * Yes: last housekeeping\n         LA    R15,025                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n*                                      * USERAREA is now in crashmem !!\n         LH    R10,UAREASN             * Save new returncode\n         MVC   LNSRCODE,UARETCD        * Set new retcode in parameter\n         L     R13,SAVEPREV(R13)       * Reset R13 to previous savearea\n         XR    R15,R15                 * Simulate correct freemain\n*\n* Storage has been freed, since register 13 has already been reloaded\n* we must skip reloading register 13, or we would skip one level of\n* returning.\n*\nFREEM10  EQU   *\n         L     R1,SAVEDR1(R13)         * Reload original plist-pointer\n         L     R2,4(R1)                * Get address of 2nd parameter\n         USING DS83PRM2,R2             * Address parameter 2 by R2\n         ST    R15,LNSUAPTR            * Reset LNSUAPTR in parm\n         DROP  R2\n         B     EXIT99                  * And go return to caller\n*\nEXIT     EQU   *\n         LH    R10,UAREASN             * Load retcode for application\n         MVC   LNSRCODE,UARETCD        * Set returncode in parameter\n         C     R13,=AL4(CRASHMEM+8)    * When using emergency memory\n         BE    EXITUNLK                *    for our userarea\n         C     R4,=AL4(CRASHMEM+8)     * or for our parameter\n         BNE   EXIT90                  * then remove lock:\n*\nEXITUNLK L     R4,=AL4(CRASHMEM)       * Get address of lock-word\n         XC    0(4,R4),0(R4)           * Remove lock\n*\nEXIT90   L     R13,SAVEPREV(R13)       * Reset R13 to previous savearea\n*\nEXIT99   EQU   *\n         LR    R15,R10                 * Set correct reasoncode\n*                                      *        for application\n         L     R14,SAVEDR14(R13)       * Reload return-addr to caller\n         LM    R0,R12,SAVEDR0(R13)     * Reload all regs for caller\n         BSM   0,R14                   * And return to caller with\n*                                      *           return code in R15\n         EJECT\n*\n* Rdism disassembles a record from the VSAM-I/O-buffer to the\n* appropriate key- and data-fields in the parameter.\n*\nRDISM    EQU   *                       * Assemble a complete record\n         ST    R14,UALV2SAV            * Save R14 level 2\n*\n* Get the address of the last record read within the buffer.\n*\n         L     R6,FDBREC               * Get address of record in buf\n         LTR   R6,R6                   * Check the address\n         BNZ   RDISM10                 * If it exists: skip error\n         LA    R15,057                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RDISM90                 * Skip remainder of this routine\n*\n* First we must find the map to be used in the list of\n*       map-master-elements\n*\nRDISM10  EQU   *\n         XR    R0,R0                   * Clear reg for 0 compare value\n         L     R6,FDBMAP               * Get start addr of mme-list\n         USING DSMME,R6                * Use DSECT MME for addressing\n*\n         AIF   (&OPT).RDISM20          * Currently only 1 version / FDB\nRDISM12  CLC   UAVERSI,MMEVERS         * Is this the version we seek ??\n         BE    RDISM20                 * Yes: go use map\n         CH    R0,MMEREM               * Any more MMEs in list ?\n         BNE   RDISM15                 * Yes: skip error\n         LA    R15,028                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n         B     RDISM90                 * Skip remainder of disassembly\n*\nRDISM15  LA    R6,L'MME(R6)            * Address next MME\n         B     RDISM12                 * And check this MME\n*\n.RDISM20 ANOP\n*\n* R6 now points to the map-master-element. R7 will be used for\n* addressing the contiguous map-elements. R8 will be used as a source\n* pointer, R10 will serve as a destination pointer. Depending on the\n* amount of data being moved either MVC or MVCL will be used.\n*\nRDISM20  EQU   *\n         L     R7,MMEMAP               * Get start addr of map to use\n         USING DSME,R7                 * And use DSECT for addressing\n*\nRDISM22  LA    R10,BXAIOPRM            * Get start address of parameter\n         AH    R10,MEPRMOFS            * Add offset within parm\n         L     R8,FDBREC               * Get start address of record\n         AH    R8,MERECOFS             * Add offset, giving data-start\n         LH    R9,MEDATLV              * Get length to be used\n         CLI   MEDATLV,X'00'           * Is data longer than 256 bytes?\n         BNE   RDISM24                 * Y: too long for MVC, use MVCL\n         BCTR  R9,R0                   * Decrement length by 1 for MVC\n         EX    R9,RDISMMVC             * Execute move with this length\n         B     RDISM29                 * Go loop to next map-element\n*\nRDISM24  LR    R1,R11                  * Save data-area pointer\n         LR    R11,R9                  * Length of target = l'source\n         MVCL  R10,R8                  * Copy data from record to parm\n         LR    R11,R1                  * Restore data-area pointer\n*\nRDISM29  EQU   *\n         AIF   (&OPT).RDISM30          * Currently only one ME per MME\n         CH    R0,MEREM                * Any more elements ??\n         BE    RDISM30                 * No: go finish RDISM\n         LA    R7,L'ME(R7)             * Point next map-element\n         B     RDISM22                 * And go move data\n*\n.RDISM30 ANOP\n*\nRDISM30  EQU   *                       * Move key from rec to LNSKEY\n         L     R8,FDBREC               * Get source address\n         LA    R10,LNSKEY              * Get destination address\n         XR    R9,R9                   * Clear register\n         IC    R9,FDBKEYLV             *       to contain key length\n         BCTR  R9,R0                   * Decrement length by 1 for MVC\n         EX    R9,RDISMMVC             * And move key to parm-area\n*\nRDISM90  EQU   *\n         L     R14,UALV2SAV            * Reload return address\n         BR    R14                     * Return to caller\n*\n         SPACE 3\n*\nRDISMMVC MVC   0(0,R10),0(R8)          * Move a small segment to parm\n*\n         DROP  R6                      * End of addressability of MME\n         DROP  R7                      * End of addressability of ME\n*\n         DROP  R3                      * End of addressability phase 4\n*\nFASE4END EQU   *\n*\n         EJECT\n         USING RCHECK,R3\n*\n* RCHECK issues a check macro against the current FDB (R5)\n*\nRCHECK   EQU   *                       * Wait for I/O completion\n         ST    R14,UALV2SAV            * Save R14 level 2\n*\n* If the ECB is currently unused a check is quite useless.\n*\n         L     R1,FDBECB               * Load current contents of ECB\n         LTR   R1,R1                   * See if any I/O is in progress\n         BZ    RCHECK99                * No: return immediate\n*\n* Now we must wait until VSAM has completed the I/O and has executed\n* all the exits required. First we will increment the IO-call counter.\n*\n         AIF   (&OPT).CHECK15\n         L     R2,UAIOCNT              * Load total io-count\n         LA    R2,1(R2)                * Increment by one\n         ST    R2,UAIOCNT              * And store updated value\n*\n.CHECK15 L     R7,FDBRPL               * Get address of RPL to be used\n         CHECK RPL=(R7)                * Wait until I/O & exits are\n*                                      *              complete\nRCHECK15 LTR   R15,R15                 * Check return code\n         BZ    RCHECK30                * If ok: skip error handling\n         ST    R15,UAVSAMRC            * Save retcode for error handler\n         LA    R15,064                 * Load error code\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n*\n* VSAM has completed the I/O and the exits. Check the ECB-returncode\n* for errors.\n*\nRCHECK30 EQU   *\n         NI    FDBECB,X'00'            * Wipe event bits in ECB\n         L     R1,FDBECB               * Load returncode from ECB\n         LTR   R1,R1                   * Test value of returncode\n         BZ    RCHECK40                * Returncode zero: skip error\n         OI    FDBSTAT,FDBERROR        * Indicate error status for file\n         ST    R1,UAVSAMRC             * Save retcode for error handler\n         LA    R15,065                 * Load error code\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute it, then return here\n*\n* If a get was executed, then the FDB is to be updated with the current\n* buffer description.\n*\nRCHECK40 EQU   *\n         USING IFGRPL,R7               * R7 still contains RPL-address\n*\n         CLI   RPLREQ,RPLGET           * Was a get executed ??\n         BNE   RCHECK50                * No: skip updating the FDB\n         NI    FDBSTAT,FDBBUFNU        * Buffer not marked for output\n         CLI   FDBRETCD,X'00'          * File in error status ??\n         BNE   RCHECK45                * Yes: do not update FDB\n         L     R6,RPLPLHPT             * Get addr of placeholder\n         USING IDAPLH,R6               * Address placeholder by DSECT\n*\n         CLC   FDBREC,PLHRECP          * Record pointer in FDB = PLH ??\n         BNE   RCHECK48                * No: issue error\n         MVC   FDBSBUF,PLHRECP         * Copy current record pointer\n         MVC   FDBEBUF,PLHFSP          * Copy free space pointer\n         B     RCHECK90                * Get-request has been handled\n*\n         DROP  R6                      * End of addressability to PLH\n         DROP  R7                      * End of addressability to RPL\n*\n* FDB  contains errorcode, therefore the FDBREC field must be\n* reset to zero. Thus the next read request will cause a get,\n* which may then retrieve a valid buffer.\n*\nRCHECK45 XC    FDBREC,FDBREC           * Set current record to invalid\n         B     RCHECK90                * And go return to mainline\n*\nRCHECK48 EQU   *                       * Record address mismatch\n         LA    R15,073                 * Load error number\n         L     R3,=AL4(ERROR)          * Get address of error handler\n         BASR  R14,R3                  * Execute error, return here\n         B     RCHECK90                * Checking complete\n*\n* If a point has been completed (seq. access) then the FDB must be\n* updated to reflect the current buffer.\n*\nRCHECK50 EQU   *\n         USING IFGRPL,R7               * R7 still contains RPL-address\n*\n         CLI   RPLREQ,RPLPOINT         * Was a skip executed ??\n         BNE   RCHECK90                * No: skip updating the FDB\n         NI    FDBSTAT,FDBBUFNU        * Buffer not marked for output\n         CLI   FDBRETCD,X'00'          * File in error status ??\n         BNE   RCHECK90                * Then do not update FDB\n         L     R6,RPLPLHPT             * Get address of placeholder\n         USING IDAPLH,R6               * Address placeholder by DSECT\n*\n         MVC   FDBSBUF,PLHRECP         * Copy current record pointer\n         MVC   FDBEBUF,PLHFSP          * Copy free space pointer\n         XC    FDBREC,FDBREC           * Invalidate current record ptr\n*                                      *    (record not yet read)\n         DROP  R6                      * End of addressability to PLH\n         DROP  R7                      * End of addressability to RPL\n*\nRCHECK90 EQU   *\n         XR    R0,R0                   * Clear register to wipe ECB\n         ST    R0,FDBECB               * ECB now available for reuse\n*\nRCHECK99 EQU   *\n         L     R14,UALV2SAV            * Reload return address\n         L     R3,UABASSAV             * Retrieve caller's base address\n         BR    R14                     * And return immmediate\n*\n         DROP  R3\n*\nRCHEKEND EQU   *\n*\n         EJECT\n*\n&ERR     SETB  1                       * Assembling error-routine\n         USING ERROR,R3\n*\n* Error handler and error exit routines\n* Since R10 is used as a pointer to the error, it should not be changed\n* by any exit routine\n* No storing into memory may take place, before the error exit has\n* been executed. Therefore the error exit should save both R14, which\n* contains the return address to error, and R0, which contains the\n* error's own return address.\n*\nERROR    EQU   *                       * Entry to error routine\n         L     R1,=AL4(ERRORTAB)       * Start of error table\n         BCTR  R15,R0                  * Decrement error number\n*                                      *       to get offset number\n         SLA   R15,6                   * Multiply offset number\n*                                      *       by element length\n*                                      *       to get byte offset\n         LA    R10,0(R15,R1)           * Get address of error element\n         CR    R10,R1                  * Entry too low ??\n         BL    ERRORXX                 * Yes: unidentified error\n         C     R10,=AL4(ERRORTND)      * Entry too high ??\n         BL    ERRORDO                 * No: start error handling\n*\nERRORXX  L     R10,=AL4(ERRORTND)      * Default to unidentified error\n         USING DSERR,R10               * Use register for addressing\n*\nERRORDO  EQU   *\n         L     R15,ERRROUT             * Load error exit address\n         LTR   R15,R15                 * Is an exit to be taken ??\n         BZ    ERRORNOT                * If zero, skip exit\n         LR    R1,R0                   * Save reasoncode that\n*                                      *      may be present in R0\n         LR    R0,R14                  * Copy return address\n         BASR  R14,R15                 * Execute error exit\n         B     ERRORFDB                * Exit must store R0 in uaerrsav\n*                                      * (since user area may\n*                                      *            not exist yet)\nERRORNOT EQU   *\n         ST    R14,UAERRSAV            * Save return address\n*\nERRORFDB EQU   *\n         CLI   ERRFDBCD,X'00'          * Error for FDB ??\n         BE    ERRORRCD                * No: continue with retcd/reasn\n         CLC   ERRFDBCD,FDBRETCD       * More serious than last error??\n         BNH   ERRORRCD                * No: continue with retcd/reasn\n         MVC   FDBRETCD,ERRFDBCD       * Copy error code\n         MVC   FDBREASN,ERRREASN       * And reason code\n*\nERRORRCD EQU   *\n         CLI   ERRRETCD,X'00'          * Error for USERAREA ??\n         BE    ERRORWTO                * Yes: go check exit\n         CLC   ERRRETCD,UARETCD        * Error more serious than last?\n         BNH   ERRORWTO                * No: go take exit\n         MVC   UARETCD,ERRRETCD        * Copy returncode\n         MVC   UAREASN,ERRREASN        * And reasoncode\n*\nERRORWTO EQU   *\n         CLI   ERRTEXT,C' '            * Message exists ??\n         BE    ERROREX                 * No: skip WTOs\n         L     R2,=AL4(ERRWTO)         * Get address of WTO plist\n         MVC   UAWORKAR(ERRWTOLV),0(R2) *Copy default WTO-plist\n         LA    R2,UAWORKAR             * Get addr of modifiable plist\n         MVI   4(R2),C' '              * Set first blank\n         MVC   5(L'WTOTEXT-1,R2),4(R2) * Clear WTO-message\n         MVC   4(8,R2),=C'BXAIO - '    * Set message prefix\n         MVC   12(L'ERRTEXT,R2),ERRTEXT *Set message text\n         WTO   MF=(E,(R2))             * And execute WTO\n         MVI   4(R2),C' '              * Set first blank\n         MVC   5(L'WTOTEXT-1,R2),4(R2) * Clear WTO-message\n         AIF   (&OPT AND (NOT &DBG)).ERROR10\n         L     R14,UACALLNR            * Retrieve call-count\n         BAS   R1,TOHEX                * Convert to hexadecimal\n         MVC   54(8,R2),4(R2)          * Copy call-count to message\n         MVC   40(14,R2),=CL14'  Call-count: '\n*\n.ERROR10 MVC   12(L'LNSPARM,R2),LNSPARM *Set message text\n         MVC   4(8,R2),=C'PARM IS:'    * Set message prefix\n         WTO   MF=(E,(R2))             * And execute WTO\n*\nERROREX  EQU   *\n         ESNAP ,                       * Also execute snap-rout\n         LH    R15,ERRREASN            * Load reasoncode\n         L     R14,UAERRSAV            * Retrieve return/retry address\n         L     R3,=AL4(RSETBASE)       * Get addr of rsetbase-routine\n         BR    R3                      * To return to caller\n*\n         DROP  R10                     * End of addressability to\n*                                      *           ERRORTAB\n         EJECT\n*\n* Routine for handling errors when the USERAREA may not exist\n*\nUAERR    EQU   *                       * Exit-routine of error-rout.\n*\n* R14 contains return address into error-routine, R0 contains\n* error's return address in turn. R3 and R11 are sure to be valid.\n* R13 may point to our USERAREA, or it may point to the caller's\n* savearea. the parameter may or may not be addressable.\n*\n         C     R11,SAVEDR11(R13)       * Is USERAREA-pointer valid ??\n         BE    UAERRSVE                * Yes: go save regs in USERAREA\n*\n* No USERAREA exists. therefore we shall use the emergency area\n* provided in this program. First we must lock it to prevent\n* concurrency errors to occur over and above the error detected.\n*\n         L     R2,=AL4(CRASHMEM)       * Get addr of emergency storage\n*\nUAERRLOK L     R15,0(R2)               * Get contents of lock-word\n         LTR   R15,R15                 * Lock = zero ??\n         BNE   UAERRLOK                * No: storage is being used\n         LA    R1,1                    * Get new lock-value\n         CS    R15,R1,0(R2)            * Update lock in storage\n         BNZ   UAERRLOK                * If locked by someone else:\n*                                      *        go retry\n         LA    R2,8(R2)                * Point beyond lock-word\n         ST    R13,SAVEPREV(R2)        * Set pointer to prev. savearea\n         LR    R13,R2                  * And establish new USERAREA\n*\n* R13 now points to our own USERAREA.\n*\nUAERRSVE ST    R0,UAERRSAV             * Save first-level return addr\n         ST    R14,UAERXSAV            * Save error-exit return address\n         ST    R11,SAVEDR11(R13)       * Mark this SAVEAREA as our own\n*\n* Now retrieve the address of the input parameter to check whether\n* or not it is valid\n*\n         L     R1,SAVEPREV(R13)        * Get addr of previous savearea\n         LTR   R1,R1                   * Valid ??\n         BZ    UAERRPRM                * No: go use emergency storage\n         L     R1,SAVEDR1(R1)          * Get original contents of R1\n         LTR   R1,R1                   * Is it a valid plist pointer ??\n         BZ    UAERRPRM                * No: use emergency storage\n         TM    4(R1),X'80'             * End-of-plist-marker is there ?\n         BNO   UAERRPRM                * No: plist is in error\n         L     R4,0(R1)                * Get first word of plist\n         LA    R4,0(R4)                * Strip end-of-plist bits\n         LTR   R4,R4                   * Valid address ??\n         BNZ   UAERRRET                * Yes: parameter found, return\n*\n* No parameter to be found. Use CRASHMEM as a substitute\n*\nUAERRPRM EQU   *\n         LR    R4,R13                  * Copy USERAREA address\n         C     R4,=AL4(CRASHMEM+8)     * Are we using CRASHMEM ??\n         BE    UAERRRET                * Yes: go return to error\n*\n* Userarea was valid. Now try to gain control over CRASHMEM.\n*\n         L     R2,=AL4(CRASHMEM)       * Get addr of emergency storage\n*\nUAERRLOC L     R15,0(R2)               * Get contents of lock-word\n         LTR   R15,R15                 * Lock = zero ??\n         BNE   UAERRLOC                * No: storage is being used\n         LA    R1,1                    * Get new lock-value\n         CS    R15,R1,0(R2)            * Update lock in storage\n         BNZ   UAERRLOC                * If locked by someone else\n*                                      *      go retry\n         LA    R4,8(R2)                * Point beyond lock-word\n*\n* Now both R4 and R13 are valid pointers to an input parameter\n* and to a USERAREA.\n*\nUAERRRET EQU   *\n         L     R14,UAERXSAV            * Reload return address\n         BR    R14                     * And continue error proc.\n*\n         EJECT\n*\n* Routine for analyzing logical errors during VSAM execution\n*\nLGERR    EQU   *                       * Exit to error routine\n         ST    R0,UAERRSAV             * Save return address of error\n         ST    R14,UAERXSAV            * Save return address to error\n*\n* First we must check the UAVSAMRC for its value. If it is 8 VSAM\n* detected a logical error while executing a request. The reasoncode\n* is to be extracted from the RPL. According to the reasoncode a\n* specific error message should be issued. If the return code is 12\n* a physical I/O-error occurred, and an appropriate error message\n* should be issued. If the RPL-address is invalid, no error can be\n* issued.\n*\n         L     R2,FDBRPL               * Get address of RPL\n         LTR   R2,R2                   * Is it valid ??\n         BZ    LGERREX                 * No: quit this exit-routine\n         USING IFGRPL,R2               * Address RPL by R2\n*\n         CLC   UAVSAMRC,=F'8'          * Returncode = 8 ??\n         BE    LGERR001                * Yes: handle the logical error\n         CLC   UAVSAMRC,=F'12'         * Returncode = 12 ??\n         BNE   LGERREX                 * No: quit this exit-rout.\n         LA    R15,067                 * Load physical error number\n         B     LGERRGO                 * And restart the error-handler\n*\n* R14 and R15 will designate start and end of the table to be\n* searched for the reason code. R14 will be used as a pointer to the\n* current table elememnt.\n*\nLGERR001 L     R14,=AL4(LGERRTAB)      * Start of logical error table\n         USING DSLGERR,R14             * Establish R14 as pointer\n*\nLGERRLUP CLC   LGREASON,RPLERRCD       * Compare RPL-condition-code\n         BE    LGERRDO                 * This is the element we seek\n         LA    R14,L'LGERRELM(R14)     * Point to next table element\n         C     R14,=AL4(LGTABEND)      * Past end-of-table ??\n         BNH   LGERRLUP                * No: go check this code\n         B     LGERREX                 * Y: use default error handling\n*\n* We found the reasoncode in our table. Therefore we can now load the\n* correct error code. Then we should restart the error-routine with\n* the error-code we found. Thus the error we just found will be issued\n* in stead of the global error text, that serves as a default.\n*\nLGERRDO  EQU   *\n         LH    R15,LGERCODE            * Get the error number to use\n         CH    R15,=H'001'             * Is it error nr 001 ? (eof)\n         BNE   LGERRGO                 * No: go re-do error handler\n         OI    FDBSTAT,FDBEOF          * Yes: indicate eof in FDB\n*\nLGERRGO  L     R14,UAERRSAV            * Reload return address\n         LR    R0,R1                   * Reload original VSAM-reasncode\n         B     ERROR                   * Now execute error for the new\n*                                      *     error-number\n         DROP  R2                      * R2 used to address RPL\n*\n* The default error message is to be used. Before returning to error\n* the VSERR error exit should be executed to dump VSAM information.\n* This is done by branching to VSERR as if it were called by error.\n*\nLGERREX  L     R14,UAERXSAV            * Reload return address to error\n         L     R0,UAERRSAV             * Reload return addr from error\n         B     VSERR                   * And continue with vserr\n*\n         DROP  R14                     * Reasoncode-table not\n*                                      *           needed anymore\n         EJECT\n*\n* Routine for dumping VSAM information after an error occurred\n*\nVSERR    EQU   *                       * Exit to error routine\n         ST    R0,UAERRSAV             * Save return address of error\n         ST    R14,UAERXSAV            * Save return address to error\n*\n         USING DSERR,R10               * Points current error element\n         CLI   ERRTEXT,C' '            * Display error info ??\n         BE    VSERREX                 * No: quit this exit\n*\n         DROP  R10                     * ERRORTAB no longer needed\n*\n* First we dump VSAM return- and reason codes (R15 and R0, resp.)\n*\n         L     R2,=AL4(ERRWTO)         * Retrieve address of blank WTO\n         MVC   UAWORKAR(ERRWTOLV),0(R2) *Copy blank WTO to workarea\n         LA    R2,UAWORKAR             * Now point to modifiable WTO\n         MVI   4(R2),C' '              * Set blank in 1st text position\n         MVC   5(L'WTOTEXT-1,R2),4(R2) * Wipe default text\n         LR    R14,R1                  * Reason code was copied to R1\n         BAS   R1,TOHEX                * Dump reasoncode, retadr in R1\n         MVC   50(8,R2),4(R2)          * and move to correct location\n         MVC   29(21,R2),=CL21' while reasoncode is '\n         L     R14,UAVSAMRC            * Retrieve VSAM returncode\n         BAS   R1,TOHEX                * Dump reasoncode, retadr in R1\n         MVC   21(8,R2),4(R2)          * and move to correct location\n         MVC   4(17,R2),=CL17'VSAM returncode: ' insert preceding text\n         WTO   MF=(E,(R2))             * and display information\n*\n* Before dumping ACB and RPL data we must ensure that R5, our\n* FDB-pointer, is currently valid.\n*\n         LA    R1,UAFDBPTR             * Point start of FDB-chain\n*\nVSERRLUP L     R1,0(R1)  0(R1)=FDBNEXT * Get address of next FDB\n         LTR   R1,R1                   * Is it valid ??\n         BZ    VSERRERR                * No: R5 matches no FDB on chain\n         CR    R1,R5                   * FDB-pointer points this FDB ??\n         BNE   VSERRLUP                * No: try next FDB\n         B     VSERRACB                * Yes: FDB-ptr is valid: dump\n*\nVSERRERR EQU   *\n         MVI   4(R2),C' '              * Set blank in 1st text position\n         MVC   5(L'WTOTEXT-1,R2),4(R2) * Wipe default text\n         LR    R14,R5                  * Retrieve FDB-address\n         BAS   R1,TOHEX                * Dump invalid FDB-pointer\n         MVC   29(20,R2),=CL20' is not on FDB-chain' insert error text\n         MVC   21(8,R2),4(R2)          * Move to correct location\n         MVC   4(17,R2),=CL17'VSERR:    FDB at ' add preceding text\n         WTO   MF=(E,(R2))             * and display information\n         B     VSERREX                 * Exit this error-exit\n*\n* Now dump ACB-data if present\n*\nVSERRACB EQU   *\n         MVI   4(R2),C' '              * Set blank in 1st text position\n         MVC   5(L'WTOTEXT-1,R2),4(R2) * Wipe default text\n         L     R15,FDBACB              * Retrieve address of ACB\n         LTR   R15,R15                 * Is it valid ??\n         BZ    VSERRRPL                * No: skip dumping ACB-data\n         LR    R2,R15                  * Copy ACB-addr to usable reg.\n         SHOWCB ACB=(R2),              * Retrieve info from current ACB*\n               FIELDS=(ERROR),         *    copy error-code            *\n               AREA=(S,UAVSAMRC),      *    into UAVSAMRC field        *\n               LENGTH=4,               *    length of field = 4        *\n               MF=(G,UAWORKAR+ERRWTOLV,SHOWACLV) use UAWORKAR for plist\n         LA    R2,UAWORKAR             * Point to workarea again\n         LTR   R15,R15                 * Was showcb ok ??\n         BZ    VSERRAC2                * Yes: dumping is ok\n         MVC   50(8,R2),=CL8'*UNKNOWN' * Error-text\n         B     VSERRAC3                * Continue dumping VASM-info\n*\nVSERRAC2 L     R14,UAVSAMRC            * Get reasoncode from ACB\n         BAS   R1,TOHEX                * Dump reasoncode, retadr in R1\n         MVC   50(8,R2),4(R2)          * and move to correct location\n*\nVSERRAC3 MVC   29(21,R2),=CL21' contains reasoncode ' add error text\n         L     R14,FDBACB              * Retrieve ACB-address\n         BAS   R1,TOHEX                * Dump reasoncode, retadr in R1\n         MVC   21(8,R2),4(R2)          * and move to correct location\n         MVC   12(9,R2),=CL9': ACB at ' * Insert preceding text\n         MVC   4(8,R2),FDBDDNAM        * Add ddname of file in error\n         WTO   MF=(E,(R2))             * and display information\n*\n* Now dump RPL-data if present\n*\nVSERRRPL EQU   *\n         MVI   4(R2),C' '              * Set blank in 1st text position\n         MVC   5(L'WTOTEXT-1,R2),4(R2) * Wipe default text\n         L     R15,FDBRPL              * Retrieve address of RPL\n         LTR   R15,R15                 * Is it valid ??\n         BZ    VSERREX                 * No: quit dumping\n*\n         USING IFGRPL,R15              * Temp. addressability to RPL\n         MVC   UAVSAMRC,RPLFDBWD       * Copy feedback word from RPL\n         DROP  R15                     * Quit RPL-addressability\n         L     R14,UAVSAMRC            * Get reasoncode from RPL\n         BAS   R1,TOHEX                * Dump reasoncode, retadr in R1\n         MVC   50(8,R2),4(R2)          * and move to correct location\n         MVC   29(21,R2),=CL21' contains fdbk-code  ' Add error text\n*\n         L     R14,FDBRPL              * Retrieve ACB-address\n         BAS   R1,TOHEX                * Dump reasoncode, retadr in R1\n         MVC   21(8,R2),4(R2)          * And move to correct location\n         MVC   12(9,R2),=CL9': RPL at ' *Insert preceding error text\n         MVC   4(8,R2),FDBDDNAM        * Add DDNAME of file in error\n         WTO   MF=(E,(R2))             * and display information\n*\nVSERREX  L     R14,UAERXSAV            * Retrieve return address\n         BR    R14                     * And return to error handler\n*\n         EJECT\n*\n* TOHEX assumes a WTO in list form at (R2), the fullword to be dumped\n* is in register 14, and will be put in the WTO at positions 0-15.\n* Register 15 is corrupted, return address is supposed to be in R1.\n*\nTOHEX    EQU   *                       * Exit to error routine\n         LR    R0,R1                   * Save return address\n         LA    R1,7                    * Set loop counter\n*\nTOHEXLUP XR    R15,R15                 * Clear register\n         SRDL  R14,4                   * Retrieve nibble from the right\n         SRL   R15,28                  * And place it rightmost in R15\n         STC   R15,4(R1,R2)            * Store nibble in message\n         BCT   R1,TOHEXLUP             * And go get next nibble\n         STC   R14,4(R1,R2)            * Store last remaining nibble\n         L     R14,=AL4(HEXTAB)        * Retrieve addr of hexchar-table\n         TR    4(8,R2),0(R14)          * Translate nibbles to chars\n         LR    R1,R0                   * Retrieve return address\n         BR    R1                      * And return to error handler\n*\n* Drop all general base registers currently in use\n*\n         DROP  R3                      * Base register for csect\n         DROP  R4                      * Base to BXAIOPRM\n         DROP  R5                      * Base to 'current' FDB\n*\nERROREND EQU   *\n*\n&ERR     SETB  0                       * No longer assembling the\n*                                      *           error-routine\n         EJECT\n*\n* This routine resets the base register after execution of a subroutine\n* That uses its own addressability.\n* Upon entry R3  contains the address of RSETBASE\n*            R14 contains the address to be returned to\n* Upon exit  R3  must contain the base address associated with the\n*                address in R14\n*            all other registers should remain unchanged\n*\n* The table of base addresses is supposed to be ordered in descending\n* order. Therefore the first element we find containing an address less\n* than the return address in R14 must be the associated base address.\n*\n         USING RSETBASE,R3\nRSETBASE EQU   *\n         LA    R14,0(R14)              * Strip hi-order bits of ret-adr\n         L     R1,=AL4(BASETAB)        * Get address of table to search\n*\nRSETLOOP C     R14,0(R1)               * R14 >= (GE) table entry??\n         BNL   RSETDONE                * Yes: go use the entry\n         LA    R1,8(R1)                * No: get next element\n         B     RSETLOOP                * And go see if it matches\n*\nRSETDONE EQU   *\n         C     R14,4(R1)               * End-of-section >= retaddr ?\n         BL    RSETOK                  * Yes: base-addr valid, use it\n         C     R14,UALV1SAV            * UALV1SAV is valid ??\n         BE    RSETEXIT                * No: return to emergency exit\n         L     R14,UALV1SAV            * Yes: return to mainline\n         B     RSETERR                 * After issuing the error\n*\nRSETEXIT L     R14,=AL4(EXIT)          * After error: exit program\n*\nRSETERR  LA    R15,056                 * Load error number\n         L     R3,=AL4(ERROR)          * Load address of error handler\n         BR    R3                      * and execute error handler\n*\nRSETOK   L     R3,0(R1)                * Get the correct base address\n         BR    R14                     * and return to caller's caller\n*\n         DROP  R3\n         DROP  R13\n*\nRSETBEND EQU   *\n*\n         AIF   (NOT &DBG).RSNAP        * RSNAP only in test mode\n         EJECT\n*\n         LCLA  &SNAPLEN                * Var for length of snaplist\n&SNAPLEN SETA  (4+8*&AANTFIL)*8        * Maxnr of entries*entry-length\n*\n         USING RSNAP,R15\n*\n* This routine produces a snap dump of the most relevant control blocks\n* Since standard mvs-linkage conventions are used, there is no need\n* to return through the rsetbase-routine.\n*\nRSNAP    EQU   *                       * Snap dump routine\n         USING DSUSERAR,R13            * R13 still points to USERAREA\n         TM    UASTAT,UASNAPER         * Snap-error occurred ??\n         BNO   RSNAP00                 * Yes: return immediate\n         XR    R15,R15                 * Set return-code\n         BR    R14                     * And return immediate\n*\nRSNAP00  STM   R14,R12,SAVEDR14(R13)   * Save caller's registers\n         DROP  R15                     * Switch base register\n         USING RSNAP,R3                * to register 3\n         LR    R3,R15                  * and load base register\n         XR    R15,R15                 * Set return code to zero\n         L     R14,UASNAPTR            * Get address of snap-area\n         LTR   R14,R14                 * Is it valid ??\n         BNZ   RSNAP10                 * Yes: continue\n         GETMAIN RC,                   * Try to allocate snaparea      *\n               SP=&SP,                 *    in our own subpool         *\n               LV=L'SNAPAREA           *    specifying its length\n         LTR   R15,R15                 * Storage allocated ??\n         BZ    RSNAP05                 * Yes\n         LA    R15,075                 * Load error code\n         B     RSNAPXI2                * And exit snap-rout\n*\nRSNAP05  ST    R1,UASNAPTR             * Save addr of acquired storage\n         LR    R14,R1                  * Copy address\n         DROP  R13                     * USERAREA no longer addressable\n*\nRSNAP10  EQU   *                       * R14 points to new save-area\n         ST    R13,SAVEPREV(R14)       * Set backward pointer\n         ST    R14,SAVENEXT(R13)       * and forward pointer\n         LR    R13,R14                 * and establish new save-area\n         USING DSSNAP,R13              * Set snap-block addressable\n*\n         L     R14,SAVEPREV(R13)       * Get address of USERAREA\n         USING DSUSERAR,R14            * Address USERAREA\n         TM    UASTAT,UASNAPOP         * Snap is open ??\n         BO    RSNAP30                 * Yes: skip opening\n         MVC   SNAPDCB,SNAP            * Copy default DCB\n         MVC   UAWORKAR(SNAPOPLV),SNAPOPEN * Copy plist for open macro\n         LA    R9,UAWORKAR             * And point to modifiable plist\n         LA    R2,SNAPDCB              * Point to the copied DCB\n         DROP  R14                     * End of addressability\n         OPEN  ((R2)),                 * Open the sysudump file        *\n               MF=(E,(R9))             *      using a copy of the\n*                                      *        default plist\n         LTR   R15,R15                 * Open was ok??\n         BZ    RSNAP20                 * Yes: continue\n         LA    R15,076                 * Load error code\n         B     RSNAPXIT                * And quit snapping\n*\nRSNAP20  L     R14,SAVEPREV(R13)       * Get address of USERAREA\n         USING DSUSERAR,R14            * Address USERAREA\n         MVI   SNAPIDNR,X'00'          * Set initial snap-id to zero\n         OI    UASTAT,UASNAPOP         * Indicate snap-file is open\n         DROP  R14                     * End of addressability\n*\nRSNAP30  LA    R10,SNAPHDRS            * R10 is pointer in headers list\n         LA    R6,SNAPLIST             * R6 is pointer in SNAPLIST\n         LR    R8,R6                   * First dump the snaparea\n         LA    R9,L'SNAPAREA-1(R8)     *    so we can see all beginning\n*                                      *    and ending addresses\n         LA    R2,SNAPHD01             * Get address of header\n         BAS   R14,RSNAPSET            * Put the adresses in the list\n*\n         L     R8,SAVEPREV(R13)        * Get address of USERAREA\n         L     R8,SAVEPREV(R8)         * Get addr of previous save-area\n         L     R8,SAVEDR1(R8)          * Get plist-pointer at entry\n         L     R8,0(R8)                * Get address of BXAIOPRM\n         LA    R8,0(R8)                * Strip end-of-plist-bit\n         LA    R9,L'BXAIOPRM-1(R8)     * Get ending addr of dump-area\n         LA    R2,SNAPHD02             * Get address of header\n         BAS   R14,RSNAPSET            * Put range R8-R9 in SNAPLIST\n*\n         L     R8,SAVEPREV(R13)        * Get address of USERAREA\n         L     R8,SAVEPREV(R8)         * Get addr of previous save-area\n         L     R8,SAVEDR1(R8)          * Get plist-pointer at entry\n         L     R8,4(R8)                * Get address of LNSPRM2\n         LA    R8,0(R8)                * Strip end-of-plist-bit\n         LA    R9,L'LNSPRM2-1(R8)      * Get ending addr of dump-area\n         LA    R2,SNAPHD03             * Get address of header\n         BAS   R14,RSNAPSET            * Put range R8-R9 in SNAPLIST\n*\n         L     R8,SAVEPREV(R13)        * Get address of old savearea\n         LR    R4,R8                   *    which is the user-area\n         USING DSUSERAR,R4             * and establish addressability\n         LA    R9,L'USERAREA-1(R8)     * Get ending addr of dump-area\n         LA    R2,SNAPHD04             * Get address of header\n         BAS   R14,RSNAPSET            * Put range R8-R9 in SNAPLIST\n*\n         LA    R5,UAFDBPTR             * Setup base pointer for loop\n         USING DSFDB,R5                * And establish addressability\nRSNAPLUP L     R5,FDBNEXT              * Point next FDB\n         LTR   R5,R5                   * All FDBs done ??\n         BE    RSNAPDO                 * Yes: go dump\n*\nRSNAPFDB EQU   *\n         LR    R8,R5                   * Start address for of FDB\n         LA    R9,L'FDB-1(R8)          * And end address of FDB\n         LA    R2,SNAPHD05             * Get address of header\n         BAS   R14,RSNAPSET            * And setup SNAPLIST\n*\nRSNAPACB EQU   *\n         L     R8,FDBACB               * Get address of ACB\n         LTR   R8,R8                   * Valid ??\n         BZ    RSNAPRPL                * No: go on to the RPL\n         LA    R9,IFGACBLV-1           * Get length - 1\n         LA    R9,0(R8,R9)             * Get end address\n         LA    R2,SNAPHD06             * Get address of header\n         BAS   R14,RSNAPSET            * And setup SNAPLIST\n*\nRSNAPRPL EQU   *\n         L     R8,FDBRPL               * Get address of RPL\n         LTR   R8,R8                   * Valid ??\n         BZ    RSNAPREC                * No: go on to the record\n         LA    R9,IFGRPLLV-1           * Get length - 1\n         LA    R9,0(R8,R9)             * Get end address\n         LA    R2,SNAPHD07             * Get address of header\n         BAS   R14,RSNAPSET            * And setup SNAPLIST\n*\n         USING IFGRPL,R8               * Address RPL\n         L     R8,RPLPLHPT             * Get address of placeholder\n         DROP  R8\n         LTR   R8,R8                   * Valid ??\n         BZ    RSNAPREC                * No: go on to the record\n         LA    R9,IDAPLHLV-1           * Get length - 1\n         LA    R9,0(R8,R9)             * Get end address\n         LA    R2,SNAPHD08             * Get address of header\n         BAS   R14,RSNAPSET            * And setup SNAPLIST\n         AIF   (&OPT).RSNAPRC          * Skip PLH and control-interval\n         LR    R15,R8                  * Save PLH-pointer\n         USING IDAPLH,R15              * Address PLH by its DSECT\n         L     R8,PLHDBUFC             * Point to bufc-block\n         DROP  R15                     * End of addressability to PLH\n         LTR   R8,R8                   * Valid ??\n         BZ    RSNAPREC                * No: go on to the record\n         LH    R9,=H'79'               * Get length - 1\n         LA    R9,0(R8,R9)             * Get end address\n         LA    R2,SNAPHD09             * Get address of header\n         BAS   R14,RSNAPSET            * And setup SNAPLIST\n*\n         L     R8,FDBRPL               * Get address of RPL\n         USING IFGRPL,R8               * Address RPL\n         L     R8,RPLPLHPT             * Get address of placeholder\n         DROP  R8\n         LR    R15,R8                  * Save PLH-pointer\n         USING IDAPLH,R15              * Address PLH by its DSECT\n         L     R8,PLHRECP              * Addr of current record in buf\n         DROP  R15                     * End of addressability to PLH\n         LTR   R8,R8                   * Valid ??\n         BZ    RSNAPREC                * No: go on to the record\n         LH    R9,=H'32767'            * Get length - 1\n         LA    R9,0(R8,R9)             * Get end address of buffer\n         LA    R2,SNAPHD10             * Get address of header\n         BAS   R14,RSNAPSET            * And setup SNAPLIST\n*\n.RSNAPRC ANOP\n*\nRSNAPREC EQU   *\n         L     R8,FDBREC               * Get addr of record in buffer\n         LTR   R8,R8                   * Valid ??\n         BZ    RSNAPWAR                * No: go on to the workarea\n         LH    R9,FDBRECLV             * Get length\n         LA    R9,0(R8,R9)             * Get end address + 1\n         BCTR  R9,R0                   * and decrement to get end\n         LA    R2,SNAPHD11             * Get address of header\n         BAS   R14,RSNAPSET            * and setup SNAPLIST\n*\nRSNAPWAR EQU   *\n         L     R8,FDBWAREA             * Get addr of record in workarea\n         LTR   R8,R8                   * Valid ??\n         BZ    RSNAPNXT                * No: go on to next FDB\n         LH    R9,FDBRECLV             * Get length\n         LA    R9,0(R8,R9)             * Get end address + 1\n         BCTR  R9,R0                   * and decrement to get end\n         LA    R2,SNAPHD12             * Get address of header\n         BAS   R14,RSNAPSET            * and setup SNAPLIST\n*\nRSNAPNXT EQU   *\n         B     RSNAPLUP                * Go try next FDB\n*\nRSNAPDO  EQU   *\n         SH    R6,=H'4'                * Point last used entry in\n*                                      *              SNAPLIST\n         OI    0(R6),X'80'             * Insert end-of-list indicator\n         SH    R10,=H'4'               * Point last used entry in\n*                                      *              HDRLIST\n         OI    0(R10),X'80'            * Insert end-of-list indicator\n         XR    R2,R2                   * Clear register\n         IC    R2,SNAPIDNR             * and get last snapid-nr\n         LA    R2,1(R2)                * Increment id-nr\n         STC   R2,SNAPIDNR             * Save snapid-nr for next call\n         LA    R6,SNAPLIST             * Reload start of SNAPLIST\n         LA    R7,SNAPHDRS             * Load start of header-list\n         LA    R8,SNAPDCB              * Load address of DCB\n*********************************************************************\n* This change implemented on 9-7-2001: 4 lines removed\n* R4 still points to SAVEAREA in DSUSERAR, no need to use R9\n*        L     R9,SAVEPREV(R13)        * Load address of USERAREA\n*        USING DSUSERAR,R9             * And establish addressability\n         MVC   UAWORKAR(RSNAPPLV),RSNAPSNP * copy coding of MF=L macro\n*        LA    R9,UAWORKAR             * Point to the macro's coding\n*        DROP  R9                      * End addressability of USERAREA\n* End of change dated 9-7-2001\n**********************************************************************\n         SNAP  MF=(E,(R9)),            * Make dump, using remote plist *\n               DCB=(R8),               *    dump snap to this DCB      *\n               ID=(R2),                *    use incremented snap-id nr *\n               LIST=(R6),              *    list of storage ranges     *\n               STRHDR=(R7)             *    list of storage headers\n         LTR   R2,R15                  * Snap was ok ??\n         BE    RSNAPXIT                * Yes: exit snap-routine\n         LA    R15,077                 * Load error code\n*\nRSNAPXIT EQU   *\n         LR    R15,R2                  * R2 contains SNAP's returncode\n         L     R13,SAVEPREV(R13)       * Get addr of previous save-area\n*\nRSNAPXI2 EQU   *\n         L     R14,SAVEDR14(R13)       * Reload return address\n         LM    R0,R12,SAVEDR0(R13)     * Reload caller's registers\n         BR    R14                     * and return\n*\nRSNAPSET EQU   *                       * Put storage range in snaplist\n         LA    R15,SNAPHDRS            * Point beyond snaplist\n         CR    R6,R15                  * Enough room in plist ??\n         BL    RSNAPSE2                * Yes: put addresses in plist\n         LA    R15,081                 * Load error nr\n         B     RSNAPXIT                * And exit to issue error\n*\nRSNAPSE2 ST    R8,0(R6)                * Put start-address of range\n         ST    R9,4(R6)                * and end address in snaplist\n         LA    R6,8(R6)                * Have pointer point to next one\n         ST    R2,0(R10)               * Store dump header address\n         LA    R10,4(R10)              * Point to next free hdr entry\n         BR    R14                     * Return\n*\n         DROP  R3                      * Drop base register\n         DROP  R4                      * Drop pointer to savearea\n         DROP  R5                      * Drop FDB-pointer\n*\nRSNAPEND EQU   *\n*\n         DROP  R13                     * Drop snap-block pointer\n*\n         EJECT\n*\n* Snapheader entries\n*\n         DS    0F\nSNAPHD01 DC    AL1(L'SNAPHD51)\nSNAPHD51 DC    C'SNAPAREA - address ranges to be dumped etc.'\n         DS    0F\nSNAPHD02 DC    AL1(L'SNAPHD52)\nSNAPHD52 DC    C'BXAIOPRM - input parameter from application'\n         DS    0F\nSNAPHD03 DC    AL1(L'SNAPHD53)\nSNAPHD53 DC    C'LNSPRM2  - parameter for internal control information'\n         DS    0F\nSNAPHD04 DC    AL1(L'SNAPHD54)\nSNAPHD54 DC    C'USERAREA - data related with one caller'\n         DS    0F\nSNAPHD05 DC    AL1(L'SNAPHD55)\nSNAPHD55 DC    C'FDB      - file definition block'\n         DS    0F\nSNAPHD06 DC    AL1(L'SNAPHD56)\nSNAPHD56 DC    C'ACB      - access method control block'\n         DS    0F\nSNAPHD07 DC    AL1(L'SNAPHD57)\nSNAPHD57 DC    C'RPL      - request parameter list'\n         DS    0F\nSNAPHD08 DC    AL1(L'SNAPHD58)\nSNAPHD58 DC    C'PLH      - placeholder'\n         DS    0F\nSNAPHD09 DC    AL1(L'SNAPHD59)\nSNAPHD59 DC    C'BUFC     - buffer control block (entry)'\n         DS    0F\nSNAPHD10 DC    AL1(L'SNAPHD60)\nSNAPHD60 DC    C'VSAM.CI  - complete VSAM control interval'\n         DS    0F\nSNAPHD11 DC    AL1(L'SNAPHD61)\nSNAPHD61 DC    C'RECORD   - record in data buffer'\n         DS    0F\nSNAPHD12 DC    AL1(L'SNAPHD62)\nSNAPHD62 DC    C'WORKAREA - record work-area for insert/delete'\n*\n         SPACE 3\nRSNAPSNP SNAP  DCB=0,                  * Addr known only at run-time   *\n               ID=0,                   * Id-nr incremented each snap   *\n               LIST=0,                 * Dumping storage ranges        *\n               STRHDR=0,               * Specifying headers per range  *\n               PDATA=(PSW,REGS,SA,SAH), *Specify what to dump          *\n               MF=L\nRSNAPPLV EQU   *-RSNAPSNP              * Length for move of plist\n*\nSNAP     DCB   DDNAME=SYSUDUMP,        * Use DDNAME sysudump for snaps *\n               DSORG=PS,                                               *\n               MACRF=W,                                                *\n               LRECL=125,                                              *\n               BLKSIZE=1632,                                           *\n               RECFM=VBA\nSNAPDCBL EQU   *-SNAP                  * Length required for this DCB\n*\nSNAPOPEN OPEN  (0,(OUTPUT)),           * Open DCB for snap-output      *\n               MODE=31,                * 31-bit addressing             *\n               MF=L                    * DCB address not yet known\nSNAPOPLV EQU   *-SNAPOPEN              * Set length for move of plist\n*\n.RSNAP   ANOP\n         EJECT\n         DROP  R11                     * Drop data-area pointer\n         DS    0D                      * Realign on doubleword boundary\n***********************************************************************\n* Change implemented on 9-7-2001: put CONST area in a separate CSECT\n* CONST  EQU   *\nCONST    CSECT\n* End of change dated 9-7-2001\n***********************************************************************\n         LTORG\n*\n         EJECT\n*\n* Non-executable code, plists, macros etc.....\n*\nWTOTEXT  DS    0CL64                   * Max text length is 64 chars\nERRWTO   WTO   '1234567890123456789012345678901234567890123456789012345*\n               678901234',             * 64 positions reserved for text*\n               ROUTCDE=11,             * Routing-code                  *\n               DESC=7,                 * Descriptor-code               *\n               MF=L\nERRWTOLV EQU   *-ERRWTO                * Set length for move of plist\n*\n         DS    0D                      * Realign on doubleword boundary\nNUMTAB   DC    240X'FF'                * This table is used with TRT to\n         DC    10X'00'                 *  check that any required key\n         DC    6X'FF'                  *  values be decently numeric.\n*\nHEXTAB   DC    C'01234567'             * This table is used with TR to\n         DC    C'89ABCDEF'             *  translate nibbles into EBCDIC\n         DC    240C' '                 *  characters.\n*\nSEEKSPC  DC    64X'00'                 * This table is used with TRT to\n         DC    X'FF'                   *  find the first blank in a\n         DC    191X'00'                *  DDNAME.\n*\n         SPACE 3\n*\n* BASETAB is a table with all addresses that are used as base addresses\n* in the program. They are listed in reverse order. The table is used\n* to find the base address associated with a given return address.\n* Before returning to a return address R3 (the base register) must be\n* given the correct value from the table. That is: the first value\n* in the table that is less than or equal to the return address.\n*\n         CNOP  0,4                     * Realign on fullword boundary\nBASETAB  EQU   *\n         AIF   (&OPT).BASETB           * Skip some routines\n         AIF   (NOT &DBG).BASETAB      * RSNAP invalid if not test\n         DC    AL4(RSNAP),AL4(RSNAPEND)    * Is never returned to\n.BASETAB ANOP\n         DC    AL4(RSETBASE),AL4(RSETBEND) * Is never returned to\n         DC    AL4(ERROR),AL4(ERROREND)    * Is never returned to\n.BASETB  ANOP\n         DC    AL4(RCHECK),AL4(RCHEKEND)\n         DC    AL4(PHASE4),AL4(FASE4END)\n         DC    AL4(PHASE3),AL4(FASE3END)\n         DC    AL4(PHASE2),AL4(FASE2END)\n         DC    AL4(PHASE1),AL4(FASE1END)\n         DC    F'0',F'0'                   * End-of-list marker\n*\n         EJECT\n*\n* Table of supported function codes (opcodes)\n* The bit coding corresponds to FDBREQ. The close-request bit\n* is used double: it is also used to indicate update mode for\n* open processing. The open routine will have to reset this bit,\n* to prevent the data set from being closed in the same call.\n* The order of opcodes in this table is designed for optimum efficiency\n* in the process of looking up the requested function code.\n*\nOPCODES  DS    0D\n         DC    CL2'RS',B'00100000',X'00',AL4(CHECKRS)\n         DC    CL2'RR',B'00100000',X'00',AL4(CHECKRR)\n         DC    CL2'WS',B'00010000',X'00',AL4(CHECKWS)\n         DC    CL2'WR',B'00010000',X'00',AL4(CHECKWR)\n         DC    CL2'SK',B'01000000',X'00',AL4(CHECKSK)\n         DC    CL2'SN',B'01100000',X'00',AL4(CHECKSN)\n         DC    CL2'IR',B'00001000',X'00',AL4(CHECKIR)\n         DC    CL2'DR',B'00000100',X'00',AL4(CHECKDR)\n         DC    CL2'SI',B'11100000',X'00',AL4(CHECKOI)\n         DC    CL2'RI',B'10100001',X'00',AL4(CHECKOI)\n         DC    CL2'SU',B'11100010',X'00',AL4(CHECKOU)\n         DC    CL2'RU',B'10100011',X'00',AL4(CHECKOU)\n         AIF   (NOT &DBG).OPCODE\n         DC    CL2'WN',B'00110000',X'00',AL4(CHECKWN)\n         DC    CL2'DN',B'00100100',X'00',AL4(CHECKDN)\n         DC    CL2'SD',B'00000000',X'00',AL4(CHECKSD)\n.OPCODE  ANOP\nOPCODEND DC    CL2'CA',B'00000010',X'00',AL4(CHECKCA)\n         DC    CL2'  ',B'00000000',X'00',AL4(CHECKXX)\n* Last element forces error (invalid fcode in parm)\n*\n         EJECT\n*\n* VSAM macros\n*\n         GBLA  &DBUF,&IBUF             * Nr of data and index buffers\n&DBUF    SETA  8*&AANTFIL              * 8 databuffers per seq. file\n&IBUF    SETA  160*&AANTFIL            * 160 indexbuffers / random file\n*\nBLDVRPD  BLDVRP BUFFERS=(22528(&DBUF)), *Allocate VSAM resource pool   *\n               TYPE=(LSR,DATA),        * Local shared, for data buffers*\n               STRNO=&AANTFIL,         * Max nr. of concurrent requests*\n               KEYLEN=&MAXKEY,         * Max key length to accommodate *\n               SHRPOOL=0,              * Shrpool-nr                    *\n               MODE=24,                * Plist in 24bit addressing mode*\n               RMODE31=ALL,            * Buffers and control blocks in *\n               MF=L                    *                high storage\nBLDVRDLV EQU   *-BLDVRPD               * Set length for move of plist\n*\nBLDVRPI  BLDVRP BUFFERS=(512(&IBUF)),  * Allocate VSAM resource pool   *\n               TYPE=(LSR,INDEX),       * Local shared, for index bufs  *\n               STRNO=&AANTFIL,         * Max nr of concurrent requests *\n               KEYLEN=&MAXKEY,         * Maximum key length            *\n               SHRPOOL=0,              * Shrpool-nr                    *\n               MODE=24,                * Plist in 24bit addressing mode*\n               RMODE31=ALL,            * Buffers and control blocks in *\n               MF=L                    *               high storage\nBLDVRILV EQU   *-BLDVRPI               * Set length for move of plist\n*\n         SPACE 3\n*\n* All gencb-macros below generate a plist in the UAWORKAR-field,\n* The plist can the be modified by the program (ROP-routine)\n* before the control block is actually generated.\n*\n         USING DSUSERAR,R13            * Valid for all gencb-macros\n         USING DSFDB,R5                * Valid for all gencb-macros\n*\nACBTAB   EQU   *                       * Table with addresses of GENCB\n         DC    AL4(GENACLIS)           *  plists for generating an ACB\n         DC    AL4(GENACLIR)           *\n         DC    AL4(GENACLUS)           *\n         DC    AL4(GENACLUR)           * Using local shared resources\n         DC    AL4(GENACPIS)           *  or private pools\n         DC    AL4(GENACPIR)           *\n         DC    AL4(GENACPUS)           *\n         DC    AL4(GENACPUR)           *\n*\n         USING GENACLIS,R3\nGENACLIS EQU   *\n         GENCB BLK=ACB,                * Generate plist for gencb ACB  *\n               AM=VSAM,                * Access method                 *\n               WAREA=(R7),             * Location for generated ACB    *\n               LENGTH=IFGACBLV,        * Max length for generated ACB  *\n               DDNAME=(*,FDBDDNAM),    * Gencb ACB is to copy DDNAME   *\n               SHRPOOL=(S,0(R6)),      * Shrpool-nr varies from 0-15   *\n               MACRF=(KEY,DFR,SEQ,SKP,SIS,LSR), * Options for this ACB *\n               BUFND=8,                * Minimum nr of data buffers    *\n               BUFNI=1,                * Minimum nr of index buffers   *\n               RMODE31=ALL,            * Buffer and control bl. > 16M  *\n               MF=(L,UAWORKAR,GACLISLV) *Generate plist in UAWORKAR\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENACLIR,R3\nGENACLIR EQU   *\n         GENCB BLK=ACB,                * Generate plist for gencb ACB  *\n               AM=VSAM,                * Access method                 *\n               WAREA=(R7),             * Location for generated ACB    *\n               LENGTH=IFGACBLV,        * Max length for generated ACB  *\n               DDNAME=(*,FDBDDNAM),    * Gencb ACB is to copy DDNAME   *\n               SHRPOOL=(S,0(R6)),      * Shrpool-nr varies from 0-15   *\n               MACRF=(KEY,DFR,DIR,SIS,LSR), * Options for this ACB     *\n               BUFND=2,                * Minimum nr of data buffers    *\n               BUFNI=160,              * Minimum nr of index buffers   *\n               RMODE31=ALL,            * Buffer and control bl. > 16M  *\n               MF=(L,UAWORKAR,GACLIRLV) *Generate plist in UAWORKAR\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENACLUS,R3\nGENACLUS EQU   *\n         GENCB BLK=ACB,                * Generate plist for gencb ACB  *\n               AM=VSAM,                * Access method                 *\n               WAREA=(R7),             * Location for generated ACB    *\n               LENGTH=IFGACBLV,        * Max length for generated ACB  *\n               DDNAME=(*,FDBDDNAM),    * Gencb ACB is to copy DDNAME   *\n               SHRPOOL=(S,0(R6)),      * Shrpool-nr varies from 0-15   *\n               MACRF=(KEY,DFR,SEQ,SKP,IN,OUT,SIS,LSR), * ACB-options   *\n               BUFND=8,                * Minimum nr of data buffers    *\n               BUFNI=1,                * Minimum nr of index buffers   *\n               RMODE31=ALL,            * Buffer and control bl. > 16M  *\n               MF=(L,UAWORKAR,GACLUSLV) *Generate plist in UAWORKAR\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENACLUR,R3\nGENACLUR EQU   *\n         GENCB BLK=ACB,                * Generate plist for gencb ACB  *\n               AM=VSAM,                * Access method                 *\n               WAREA=(R7),             * Location for generated ACB    *\n               LENGTH=IFGACBLV,        * Max length for generated ACB  *\n               DDNAME=(*,FDBDDNAM),    * Gencb ACB is to copy DDNAME   *\n               SHRPOOL=(S,0(R6)),      * Shrpool-nr varies from 0-15   *\n               MACRF=(KEY,DFR,SEQ,SKP,IN,OUT,SIS,LSR), * ACB-options   *\n               BUFND=2,                * Minimum nr of data buffers    *\n               BUFNI=160,              * Minimum nr of index buffers   *\n               RMODE31=ALL,            * Buffer and control bl. > 16M  *\n               MF=(L,UAWORKAR,GACLURLV) *Generate plist in UAWORKAR\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENACPIS,R3\nGENACPIS EQU   *\n         GENCB BLK=ACB,                * Generate plist for gencb ACB  *\n               AM=VSAM,                * Access method                 *\n               WAREA=(R7),             * Location for generated ACB    *\n               LENGTH=IFGACBLV,        * Max length for generated ACB  *\n               DDNAME=(*,FDBDDNAM),    * Gencb ACB is to copy DDNAME   *\n               SHRPOOL=(S,0(R6)),      * Shrpool-nr varies from 0-15   *\n               MACRF=(KEY,DFR,SEQ,SKP,SIS,NSR), * Options for this ACB *\n               BUFND=8,                * Minimum nr of data buffers    *\n               BUFNI=1,                * Minimum nr of index buffers   *\n               RMODE31=ALL,            * Buffer and control bl. > 16M  *\n               MF=(L,UAWORKAR,GACPISLV) *Generate plist in UAWORKAR\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENACPIR,R3\nGENACPIR EQU   *\n         GENCB BLK=ACB,                * Generate plist for gencb ACB  *\n               AM=VSAM,                * Access method                 *\n               WAREA=(R7),             * Location for generated ACB    *\n               LENGTH=IFGACBLV,        * Max length for generated ACB  *\n               DDNAME=(*,FDBDDNAM),    * Gencb ACB is to copy DDNAME   *\n               SHRPOOL=(S,0(R6)),      * Shrpool-nr varies from 0-15   *\n               MACRF=(KEY,DFR,DIR,SIS,NSR), * Options for this ACB     *\n               BUFND=2,                * Minimum nr of data buffers    *\n               BUFNI=160,              * Minimum nr of index buffers   *\n               RMODE31=ALL,            * Buffer and control bl. > 16M  *\n               MF=(L,UAWORKAR,GACPIRLV) *Generate plist in UAWORKAR\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENACPUS,R3\nGENACPUS EQU   *\n         GENCB BLK=ACB,                * Generate plist for gencb ACB  *\n               AM=VSAM,                * Access method                 *\n               WAREA=(R7),             * Location for generated ACB    *\n               LENGTH=IFGACBLV,        * Max length for generated ACB  *\n               DDNAME=(*,FDBDDNAM),    * Gencb ACB is to copy DDNAME   *\n               SHRPOOL=(S,0(R6)),      * Shrpool-nr varies from 0-15   *\n               MACRF=(KEY,DFR,SEQ,SKP,IN,OUT,SIS,NSR), * ACB-options   *\n               BUFND=8,                * Minimum nr of data buffers    *\n               BUFNI=1,                * Minimum nr of index buffers   *\n               RMODE31=ALL,            * Buffer and control bl. > 16M  *\n               MF=(L,UAWORKAR,GACPUSLV) *Generate plist in UAWORKAR\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENACPUR,R3\nGENACPUR EQU   *\n         GENCB BLK=ACB,                * Generate plist for gencb ACB  *\n               AM=VSAM,                * Access method                 *\n               WAREA=(R7),             * Location for generated ACB    *\n               LENGTH=IFGACBLV,        * Max length for generated ACB  *\n               DDNAME=(*,FDBDDNAM),    * Gencb ACB is to copy DDNAME   *\n               SHRPOOL=(S,0(R6)),      * Shrpool-nr varies from 0-15   *\n               MACRF=(KEY,DFR,SEQ,SKP,IN,OUT,SIS,NSR), * ACB-options   *\n               BUFND=2,                * Minimum nr of data buffers    *\n               BUFNI=160,              * Minimum nr of index buffers   *\n               RMODE31=ALL,            * Buffer and control bl. > 16M  *\n               MF=(L,UAWORKAR,GACPURLV) *Generate plist in UAWORKAR\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         SPACE 3\nRPLTAB   EQU   *                       * Table with addresses of gencb\n         DC    AL4(GENRPLIS)           * plists for generating an RPL\n         DC    AL4(GENRPLIR)\n         DC    AL4(GENRPLUS)\n         DC    AL4(GENRPLUR)\n*\n         USING GENRPLIS,R3\nGENRPLIS GENCB BLK=RPL,                * Generate plist for gencb RPL  *\n               AM=VSAM,                * For VSAM files                *\n               WAREA=(R9),             * Specify address for RPL       *\n               LENGTH=IFGRPLLV,        * And length available          *\n               ACB=(R7),               * Specify ACB-address for RPL   *\n               AREA=(S,FDBREC),        * and data-area                 *\n               AREALEN=4,              * Length of data-area           *\n               ARG=(S,UAKEY),          * Specify key location          *\n               KEYLEN=(S,0(R6)),       * and key length                *\n               ECB=(S,FDBECB),         * Specify ECB-address           *\n               RECLEN=(R8),            * and record length             *\n               OPTCD=(KEY,SEQ,ASY,NUP,KGE,GEN,LOC), * Options for RPL  *\n               MF=(G,UAWORKAR,GRPLISLV) *\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENRPLIR,R3\nGENRPLIR GENCB BLK=RPL,                * Generate plist for gencb RPL  *\n               AM=VSAM,                * For VSAM files                *\n               WAREA=(R9),             * Specify address for RPL       *\n               LENGTH=IFGRPLLV,        * And length available          *\n               ACB=(R7),               * Specify ACB-address for RPL   *\n               AREA=(S,FDBREC),        * and data-area                 *\n               AREALEN=4,              * Length of data-area           *\n               ARG=(S,UAKEY),          * Specify key location          *\n               KEYLEN=(S,0(R6)),       * and key length                *\n               ECB=(S,FDBECB),         * Specify ECB-address           *\n               RECLEN=(R8),            * and record length             *\n               OPTCD=(KEY,DIR,ASY,NUP,KEQ,FKS,LOC), * Options for RPL  *\n               MF=(G,UAWORKAR,GRPLIRLV) *\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENRPLUS,R3\nGENRPLUS GENCB BLK=RPL,                * Generate plist for gencb RPL  *\n               AM=VSAM,                * For VSAM files                *\n               WAREA=(R9),             * Specify address for RPL       *\n               LENGTH=IFGRPLLV,        * and length available          *\n               ACB=(R7),               * Specify ACB-address for RPL   *\n               AREA=(S,FDBREC),        * and data-area                 *\n               AREALEN=4,              * Length of data-area           *\n               ARG=(S,UAKEY),          * Specify key location          *\n               KEYLEN=(S,0(R6)),       * and key length                *\n               ECB=(S,FDBECB),         * Specify ECB-address           *\n               RECLEN=(R8),            * and record length             *\n               OPTCD=(KEY,SEQ,ASY,UPD,KGE,GEN,LOC), * Options for RPL  *\n               MF=(G,UAWORKAR,GRPLUSLV) *\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         USING GENRPLUR,R3\nGENRPLUR GENCB BLK=RPL,                * Generate plist for gencb RPL  *\n               AM=VSAM,                * For VSAM files                *\n               WAREA=(R9),             * Specify address for RPL       *\n               LENGTH=IFGRPLLV,        * And length available          *\n               ACB=(R7),               * Specify ACB-address for RPL   *\n               AREA=(S,FDBREC),        * and data-area                 *\n               AREALEN=4,              * Length of data-area           *\n               ARG=(S,UAKEY),          * Specify key location          *\n               KEYLEN=(S,0(R6)),       * and key length                *\n               ECB=(S,FDBECB),         * Specify ECB-address           *\n               RECLEN=(R8),            * and record length             *\n               OPTCD=(KEY,DIR,ASY,UPD,KEQ,FKS,LOC), * Options for RPL  *\n               MF=(G,UAWORKAR,GRPLURLV) *\n         BR    R10                     * Return to open routine\n         DROP  R3\n*\n         DROP  R5                      * FDB no longer valid\n         DROP  R13                     * USERAREA no longer valid\n         SPACE 3\nVSAMOPEN OPEN  (0),                    * Open VSAM file                *\n               MODE=31,                * 31-bit addressing             *\n               MF=L                    * ACB-address not yet known\nVSAMOPLV EQU   *-VSAMOPEN              * Set length for move of plist\nCLOSE    CLOSE (0),                    * Close a file                  *\n               MODE=31,                * 31-bit addressing             *\n               MF=L                    * ACB/DCB-address unknown\nCLOSELV  EQU   *-CLOSE                 * Set length for move of plist\n*\n         EJECT\n*\n* Default file descriptor blocks\n*\nCCDFDB   DS    0D\n         DC    AL4(CPDFDB)\n         DC    F'0'\n         DC    CL8'CCD     '\n         DC    6F'0'\n         DC    AL4(CCDMAP)\n         DC    2H'0'\n         DC    H'350'\n         DC    AL1(14)\n         DC    X'00'\n         DC    7X'00'\n         DC    CL14'00000000000000',X'00' * Key of version record\n         DC    CL14' ',X'00'\n         DC    7X'00'\n*\n         SPACE 3\nCPDFDB   DS    0D\n         DC    AL4(CCXFDB)\n         DC    F'0'\n         DC    CL8'CPD     '\n         DC    6F'0'\n         DC    AL4(CPDMAP)\n         DC    2H'0'\n         DC    H'300'\n         DC    AL1(15)\n         DC    X'01'\n         DC    7X'00'\n         DC    CL15'000000000000000'   * Key of version record\n         DC    CL15' '\n         DC    7X'00'\n*\n         SPACE 3\nCCXFDB   DS    0D\n         DC    AL4(PDDFDB)\n         DC    F'0'\n         DC    CL8'CCX     '\n         DC    6F'0'\n         DC    AL4(CCXMAP)\n         DC    2H'0'\n         DC    H'74'\n         DC    AL1(14)\n         DC    X'02'\n         DC    7X'00'\n         DC    CL14'00000000000000',X'00' * Key of version record\n         DC    CL14' ',X'00'\n         DC    7X'00'\n*\n         SPACE 3\nPDDFDB   DS    0D\n         DC    AL4(CSCFDB)\n         DC    F'0'\n         DC    CL8'PDD     '\n         DC    6F'0'\n         DC    AL4(PDDMAP)\n         DC    2H'0'\n         DC    H'42'\n         DC    AL1(14)\n         DC    X'03'\n         DC    7X'00'\n         DC    CL14'00000000000000',X'00' * Key of version record\n         DC    CL14' ',X'00'\n         DC    7X'00'\n*\n         SPACE 3\nCSCFDB   DS    0D\n         DC    AL4(ACDFDB)\n         DC    F'0'\n         DC    CL8'CSC     '\n         DC    6F'0'\n         DC    AL4(CSCMAP)\n         DC    2H'0'\n         DC    H'47'\n         DC    AL1(14)\n         DC    X'04'\n         DC    7X'00'\n         DC    CL14'00000000000000',X'00' * Key of version record\n         DC    CL14' ',X'00'\n         DC    7X'00'\n*\n         SPACE 3\nACDFDB   DS    0D\n         DC    F'0'\n         DC    F'0'\n         DC    CL8'ACD     '\n         DC    6F'0'\n         DC    AL4(ACDMAP)\n         DC    2H'0'\n         DC    H'46'\n         DC    AL1(14)\n         DC    X'05'\n         DC    7X'00'\n         DC    CL14'00000000000000',X'00' * Key of version record\n         DC    CL14' ',X'00'\n         DC    7X'00'\n*\n         SPACE 3\n*\n* Data map-lists defining mapping of data between record and parameter\n*\nCCDMAP   DC    H'0'                    * Nr of elements after this one\n         DC    CL2'01'                 * Version number\n         DC    AL4(CCD01)              * Start addr of map version 01\n*\nCCD01    DC    H'0'                    * Nr of elements after this one\n         DC    H'350'                  * Data length\n         DC    AL2(17)                 * Offset in parameter\n         DC    H'0'                    * Offset in record\n*\nCPDMAP   DC    H'0'                    * Nr of elements after this one\n         DC    CL2'02'                 * Version number\n         DC    AL4(CPD01)              * Start addr of map version 02\n*\nCPD01    DC    H'0'                    * Nr of elements after this one\n         DC    H'300'                  * Data length\n         DC    AL2(18)                 * Offset in parameter\n         DC    H'0'                    * Offset in record\n*\nCCXMAP   DC    H'0'                    * Nr of elements after this one\n         DC    CL2'03'                 * Version number\n         DC    AL4(CCX01)              * Start addr of map version 03\n*\nCCX01    DC    H'0'                    * Nr of elements after this one\n         DC    H'74'                   * Data length\n         DC    AL2(17)                 * Offset in parameter\n         DC    H'0'                    * Offset in record\n*\nPDDMAP   DC    H'0'                    * Nr of elements after this one\n         DC    CL2'04'                 * Version number\n         DC    AL4(PDD01)              * Start addr of map version 04\n*\nPDD01    DC    H'0'                    * Nr of elements after this one\n         DC    H'42'                   * Data length\n         DC    AL2(17)                 * Offset in parameter\n         DC    H'0'                    * Offset in record\n*\nCSCMAP   DC    H'0'                    * Nr of elements after this one\n         DC    CL2'05'                 * Version number\n         DC    AL4(CSC01)              * Start addr of map version 05\n*\nCSC01    DC    H'0'                    * Nr of elements after this one\n         DC    H'47'                   * Data length\n         DC    AL2(17)                 * Offset in parameter\n         DC    H'0'                    * Offset in record\n*\nACDMAP   DC    H'0'                    * Nr of elements after this one\n         DC    CL2'06'                 * Version number\n         DC    AL4(ACD01)              * Start addr of map version 05\n*\nACD01    DC    H'0'                    * Nr of elements after this one\n         DC    H'46'                   * Data length\n         DC    AL2(17)                 * Offset in parameter\n         DC    H'0'                    * Offset in record\n*\n         EJECT\n*\n* Error codes: error text + returncode + reasoncode + error exit addr\n*\n* Whenever returncodes are changed: do check that returning is done\n* correctly for all locations where the error is initiated.\n*\nERRORTAB DS    0D\n         AIF   (&DBG).ERROR1\n         DC    CL50' 1 - sequential end-of-file has been reached'\n         DC    CL6'      ',X'00',C'1',H'001',F'0'\n         DC    CL50' 2 - requested record not found'\n         DC    CL6'      ',X'04',C'1',H'002',AL4(VSERR)\n         AGO   .ERROR1A\n.ERROR1  ANOP\n         DC    CL50'01 - sequential end-of-file has been reached'\n         DC    CL6'      ',X'00',C'1',H'001',F'0'\n         DC    CL50'02 - requested record not found'\n         DC    CL6'      ',X'04',C'1',H'002',AL4(VSERR)\n.ERROR1A ANOP\n         DC    CL50'03 - file selector not 0 or 1: 0 assumed'\n         DC    CL6'      ',X'00',C'2',H'003',F'0'\n         DC    CL50'04 - no files selected, request ignored'\n         DC    CL6'      ',X'00',C'2',H'004',F'0'\n         DC    CL50'05 - file is open: open request ignored'\n         DC    CL6'      ',X'00',C'2',H'005',F'0'\n         DC    CL50'06 - file is not open: close request ignored'\n         DC    CL6'      ',X'00',C'2',H'006',F'0'\n         DC    CL50'07 - cannot read sequential, trying random read'\n         DC    CL6'      ',X'00',C'2',H'007',F'0'\n         DC    CL50'08 - cannot read random, trying sequential read'\n         DC    CL6'      ',X'00',C'2',H'008',F'0'\n         DC    CL50'09 - cannot write sequential, trying random write'\n         DC    CL6'      ',X'00',C'2',H'009',F'0'\n         DC    CL50'10 - cannot write random, trying sequential write'\n         DC    CL6'      ',X'00',C'2',H'010',F'0'\n         DC    CL50'11 - ECB unexpectedly in use, skip postponed'\n         DC    CL6'      ',X'04',C'2',H'011',F'0'\n         DC    CL50'12 - ECB unexpectedly in use, read postponed'\n         DC    CL6'      ',X'04',C'2',H'012',F'0'\n         DC    CL50'13 - ECB unexpectedly in use, write postponed'\n         DC    CL6'      ',X'04',C'2',H'013',F'0'\n         DC    CL50'14 - ECB unexpectedly in use, insert postponed'\n         DC    CL6'      ',X'04',C'2',H'014',F'0'\n         DC    CL50'15 - ECB unexpectedly in use, delete postponed'\n         DC    CL6'      ',X'04',C'2',H'015',F'0'\n         DC    CL50'16 - ECB unexpectedly in use, close postponed'\n         DC    CL6'      ',X'04',C'2',H'016',F'0'\n         DC    CL50'17 - VSAM resource pool could not be allocated'\n         DC    CL6'      ',X'00',C'2',H'017',AL4(VSERR)\n         DC    CL50'18 - VSAM resource pool could not be freed'\n         DC    CL6'      ',X'00',C'2',H'018',AL4(VSERR)\n         DC    CL50'19 - cannot open input: file is open for update'\n         DC    CL6'      ',X'00',C'2',H'019',F'0'\n         DC    CL50'20 - key length not changed for skip'\n         DC    CL6'      ',X'04',C'2',H'020',AL4(VSERR)\n         DC    CL50'21 - file closed, last update was not version rec'\n         DC    CL6'      ',X'00',C'2',H'021',F'0'\n         DC    CL50'22 - ACB/RPL-storage could not be freed'\n         DC    CL6'      ',X'00',C'2',H'022',F'0'\n         DC    CL50'23 - cannot obtain storage for ACB/RPL'\n         DC    CL6'      ',X'00',C'5',H'023',F'0'\n         DC    CL50'24 - workarea for insert/delete could not be freed'\n         DC    CL6'      ',X'00',C'2',H'024',F'0'\n         DC    CL50'25 - storage for USERAREA/FDB could not be freed'\n         DC    CL6'      ',X'00',C'2',H'025',AL4(UAERR)\n         DC    CL50'26 - no input parameter'\n         DC    CL6'      ',X'00',C'3',H'026',AL4(UAERR)\n         DC    CL50'27 - requested function code not supported'\n         DC    CL6'      ',X'00',C'3',H'027',F'0'\n         DC    CL50'28 - requested version of parameter not supported'\n         DC    CL6'      ',X'00',C'3',H'028',F'0'\n         DC    CL50'29 - file version records are not equal'\n         DC    CL6'      ',X'00',C'3',H'029',F'0'\n         DC    CL50'30 - cannot open update: file is open for input'\n         DC    CL6'      ',X'00',C'3',H'030',F'0'\n         DC    CL50'31 - file is not open, skip request ignored'\n         DC    CL6'      ',X'00',C'3',H'031',F'0'\n         DC    CL50'32 - file is not open, read request ignored'\n         DC    CL6'      ',X'00',C'3',H'032',F'0'\n         DC    CL50'33 - file not open for update, cannot write'\n         DC    CL6'      ',X'00',C'3',H'033',F'0'\n         DC    CL50'34 - file not open for update, cannot insert'\n         DC    CL6'      ',X'00',C'3',H'034',F'0'\n         DC    CL50'35 - file not open for update, cannot delete'\n         DC    CL6'      ',X'00',C'3',H'035',F'0'\n         DC    CL50'36 - skip request illegal, file is opened random'\n         DC    CL6'      ',X'00',C'3',H'036',F'0'\n         DC    CL50'37 - cannot skip: specified skip-key is too short'\n         DC    CL6'      ',X'04',C'3',H'037',F'0'\n         DC    CL50'38 - sequential input requested after end-of-file'\n         DC    CL6'      ',X'00',C'3',H'038',F'0'\n         DC    CL50'39 - cannot read: specified key is not numeric'\n         DC    CL6'      ',X'00',C'3',H'039',F'0'\n         DC    CL50'40 - cannot insert: specified key is not numeric'\n         DC    CL6'      ',X'00',C'3',H'040',F'0'\n         DC    CL50'41 - write request not preceded by successful read'\n         DC    CL6'      ',X'00',C'3',H'041',F'0'\n         DC    CL50'42 - delete request not preceded by successful rea'\n         DC    CL6'd     ',X'00',C'3',H'042',F'0'\n         DC    CL50'43 - write requested, but keys are not equal'\n         DC    CL6'      ',X'00',C'3',H'043',F'0'\n         DC    CL50'44 - delete requested, but keys are not equal'\n         DC    CL6'      ',X'00',C'3',H'044',F'0'\n         DC    CL50'45 - insert requested, but keys are not equal'\n         DC    CL6'      ',X'00',C'3',H'045',F'0'\n         DC    CL50'46 - insert requested, but key is not unique'\n         DC    CL6'      ',X'04',C'3',H'046',AL4(VSERR)\n         DC    CL50'47 - insert of version record not allowed'\n         DC    CL6'      ',X'00',C'3',H'047',F'0'\n         DC    CL50'48 - delete of version record not allowed'\n         DC    CL6'      ',X'00',C'3',H'048',F'0'\n         DC    CL50'49 - cannot create ACB: file not opened'\n         DC    CL6'      ',X'00',C'4',H'049',AL4(VSERR)\n         DC    CL50'50 - cannot create RPL: file not opened'\n         DC    CL6'      ',X'00',C'4',H'050',AL4(VSERR)\n         DC    CL50'51 - file could not be opened'\n         DC    CL6'      ',X'00',C'4',H'051',AL4(VSERR)\n         DC    CL50'52 - skip request rejected by VSAM'\n         DC    CL6'      ',X'08',C'4',H'052',AL4(VSERR)\n         DC    CL50'53 - read request rejected by VSAM'\n         DC    CL6'      ',X'08',C'4',H'053',AL4(VSERR)\n         DC    CL50'54 - insert request rejected by VSAM'\n         DC    CL6'      ',X'08',C'4',H'054',AL4(VSERR)\n         DC    CL50'55 - delete request rejected by VSAM'\n         DC    CL6'      ',X'08',C'4',H'055',AL4(VSERR)\n         DC    CL50'56 - cannot re-establish addressability'\n         DC    CL6'      ',X'00',C'5',H'056',F'0'\n         DC    CL50'57 - VSAM returned no record nor EOF on read'\n         DC    CL6'      ',X'08',C'4',H'057',F'0'\n         DC    CL50'58 - sequential position in file not defined'\n         DC    CL6'      ',X'08',C'4',H'058',AL4(VSERR)\n         DC    CL50'59 - data buffer could not be marked for output'\n         DC    CL6'      ',X'08',C'4',H'059',AL4(VSERR)\n         DC    CL50'60 - close request failed'\n         DC    CL6'      ',X'08',C'4',H'060',F'0'\n         DC    CL50'61 - RPL could not be changed: insert impossible'\n         DC    CL6'      ',X'08',C'4',H'061',AL4(VSERR)\n         DC    CL50'62 - RPL could not be changed: delete impossible'\n         DC    CL6'      ',X'08',C'4',H'062',AL4(VSERR)\n         DC    CL50'63 - cannot reset RPL to normal processing'\n         DC    CL6'      ',X'04',C'4',H'063',AL4(VSERR)\n         DC    CL50'64 - I/O could not be completed successfully'\n         DC    CL6'      ',X'08',C'4',H'064',AL4(LGERR)\n         DC    CL50'65 - VSAM returned errorcode in ECB'\n         DC    CL6'      ',X'04',C'4',H'065',AL4(VSERR)\n         DC    CL50'66 - cannot extend (shared) data set'\n         DC    CL6'      ',X'08',C'4',H'066',AL4(VSERR)\n         DC    CL50'67 - a physical I/O-error occurred'\n         DC    CL6'      ',X'08',C'4',H'067',AL4(VSERR)\n         DC    CL50'68 - cannot load dynamic module BXAIO00'\n         DC    CL6'      ',X'00',C'5',H'068',F'0'      *** Cannot occur\n         DC    CL50'69 - dynamic storage request for USERAREA/FDB fail'\n         DC    CL6'ed    ',X'00',C'5',H'069',AL4(UAERR)\n         DC    CL50'70 - cannot allocate work-area for insert/delete'\n         DC    CL6'      ',X'00',C'5',H'070',F'0'\n         DC    CL50'71 - not enough virtual storage for VSAM'\n         DC    CL6'      ',X'08',C'5',H'071',AL4(VSERR)\n         DC    CL50'72 - not enough buffers in buffer pool'\n         DC    CL6'      ',X'08',C'5',H'072',AL4(VSERR)\n         DC    CL50'73 - current record address in PLH and FDB not equ'\n         DC    CL6'al    ',X'08',C'4',H'073',F'0'\n         DC    CL50'74 - cannot remove dynamic module BXAIO00'\n         DC    CL6'      ',X'00',C'5',H'074',F'0'\n         DC    CL50'75 - cannot obtain storage for snap control block'\n         DC    CL6'      ',X'00',C'2',H'075',F'0'\n         DC    CL50'76 - cannot open snap output file (sysudump)'\n         DC    CL6'      ',X'00',C'2',H'076',F'0'\n         DC    CL50'77 - snap was unsuccessful'\n         DC    CL6'      ',X'00',C'2',H'077',F'0'\n         DC    CL50'78 - cannot close snap output file (sysudump)'\n         DC    CL6'      ',X'00',C'2',H'078',F'0'\n         DC    CL50'79 - cannot free storage of snap control block'\n         DC    CL6'      ',X'00',C'2',H'079',F'0'\n         DC    CL50'80 - cannot build resource pool for index buffers'\n         DC    CL6'      ',X'00',C'2',H'080',AL4(VSERR)\n         DC    CL50'81 - not enough storage for snaplist, cannot snap'\n         DC    CL6'      ',X'00',C'2',H'081',F'0'\nERRORTND DC    CL50'82 - unidentified error'\n         DC    CL6'      ',X'00',C'5',H'082',F'0'\n*\n         SPACE 3\n*\n* LGERRTAB is a table used for translating RPL-reasoncodes (1 byte)\n* to errorcodes that can be used with the errortab.\n*\nLGERRTAB DS    0D\n         DC    X'04',X'00',H'001'      * End-of-file\n         DC    X'08',X'00',H'046'      * Duplicate key\n         DC    X'10',X'00',H'002'      * Record not found\n         DC    X'1C',X'00',H'066'      * Dataset not extendable\n         DC    X'28',X'00',H'071'      * Insufficient virtual storage\n         DC    X'58',X'00',H'058'      * Sequential location undefined\nLGTABEND DC    X'98',X'00',H'072'      * Insufficient buffers in pool\n*\n         SPACE 3\n*\n* CRASHMEM area is used only in emergencies when a USERAREA cannot be\n* obtained or the parameter was not supplied by the caller.\n* The first word of this area serves as a lock-word against concurrency\n* errors. A value of zero indicates the area is available.\n* A total length equal to that of USERAREA is quite enough to\n* accomodate space for an emergency USERAREA, overlaid with the part\n* of the parameter that may be used yet.\n*\nCRASHMEM DC    (8+L'USERAREA)X'00'     * Prefill with zeros.\nLASTADDR EQU   *\n*\n         EJECT\n*\n* This DSECT describes the elements of the opcode table\n*\nDSOPC    DSECT\nOPC      DS    0D                      * Opcode table element\nOPCFCOD  DS    CL2                     * Text of opcode (LNSFCODE)\nOPCMASK  DS    XL1                     * Mask for FDBREQ\n         DS    XL1                     * Filler byte\nOPCROUT  DS    AL4                     * Exit routine\n*\n         SPACE 3\n*\n* This DSECT describes the elements of the error table\n*\nDSERR    DSECT\nERR      DS    0D                      * Error table element\nERRTEXT  DS    CL56                    * Text of error\nERRFDBCD DS    X                       * Error code for FDB\nERRRETCD DS    X                       * Return code for caller\nERRREASN DS    H                       * Reasoncode\nERRROUT  DS    AL4                     * Error exit routine\nERR_LEN  EQU   *-DSERR                 * Length of error entry\n         AIF   (ERR_LEN EQ 64).ERLENOK\n         MNOTE 8,'ERROR routine uses fixed length of 64 for DSERR'\n.ERLENOK ANOP\n*\n         SPACE 3\n*\n* This DSECT describes the elements of the LGERRTAB table\n*\nDSLGERR  DSECT\nLGERRELM DS    0F                      * Error table element\nLGREASON DS    X                       * Reason code\n         DS    X                       * Filler\nLGERCODE DS    H                       * Error code for error table\n*\n         EJECT\n*\n* This DSECT describes the caller-dependent data-area.\n* Its length is dependent on the number of FDBs to be accomodated in\n* the UAFILES field. if &NOOFFDB changes, the length of USERAREA may\n* have to be changed as well. The &WORKLV variable is calculated\n* elsewhere such that UAWORKAR will be long enough to accommodate\n* any code that needs to be changed.\n* Remember never to move the UASAVEAR-field from its first position\n* in the user-area\n*\nDSUSERAR DSECT\nUSERAREA DS    0CL(168+&WORKLV)\nUASAVEAR DS    18F                     * Savearea for any called module\nUAWORKAR DS    XL&WORKLV               * Space for work-area\nUALV1SAV DS    F                       * Ret addr from level1 routines\nUALV2SAV DS    F                       * Ret addr from level2 routines\nUAERRSAV DS    F                       * Ret addr from error routine\nUAERXSAV DS    F                       * Ret addr from error exits\nUABASSAV DS    F                       * Saved basereg of calling rout\nUASNAPTR DS    AL4                     * Addr of snap control block\nUAFDBPTR DS    AL4                     * Addr of first FDB on chain\nUALRECAD DS    AL4                     * Addr record read for last FDB\nUAOPCADR DS    AL4                     * Addr of opcode element\nUACALLNR DS    F                       * Call count for current caller\nUAIOCNT  DS    F                       * Total nr of check/open/close\nUAVSAMRC DS    F                       * Saved returncode from VSAM\nUALRECLV DS    H                       * Compare length for UALRECAD\nUAREASN  DS    H                       * Reasoncode of worst error\nUARETCD  DS    X                       * Highest returncode encountered\nUASTAT   DS    X                       * Status bits\nUAPOOLNR DS    X                       * LST-poolnr 00-0f or no LSR 10\nUAVRPSTA DS    X                       * Status of VSAM resource pool\nUAWORK   DS    X                       * Working byte\nUAVERSI  DS    CL2                     * Version / release level\nUASELECT DS    0CL8                    * Logical file selectors\nUASCCDI  DS    CL1                     * Customer Contract Data\nUASCPDI  DS    CL1                     * Customer Personal Data\nUASCCXI  DS    CL1                     * Customer Contract eXtension\nUASPDDI  DS    CL1                     * Product Definition Data\nUASCSCI  DS    CL1                     * Capitalized Savings Contract\nUASACDI  DS    CL1                     * ACounting Data\n         DS    CL2                     * Reserved\nUAFILES  DS    CL&NOOFFDB              * File indicators\nUAKEY    DS    CL&MAXKEY               * Current key (from LNSKEY)\n         DS    (29-&NOOFFDB-&MAXKEY)X  * Reserved\n*\n         SPACE\n*\n* Bit masks for UASTAT\n*\nUANOREQ  EQU   B'00000000'             * No outstanding requests\nUARQREAD EQU   B'00100000'             * Request to restart read\nUASNAPOP EQU   B'10000000'             * Snap-file is open\nUASNAPER EQU   B'01000000'             * Rsnap encountered serious err\n*\nUARQNORX EQU   B'11011111'             * Reset mask for restart read\nUASNAPCL EQU   B'01111111'             * Reset mask for closed snapfile\n*\n         SPACE\n*\n* Bit masks for UAVRPSTA\n*\nUAVCLOSE EQU   B'00000000'             * No VRP is defined\nUAVEXIST EQU   B'00000001'             * VRP is defined\nUAVRANDM EQU   B'00000100'             * VRP allocated for random acces\nUAVERROR EQU   B'10000000'             * Error on VRP processing\n*\n         SPACE 3\n*\n* Equates for offsets in the savearea (first 18 words of USERAREA)\n*\nSAVEPLI  EQU   0                       * First word used by PL/I only\nSAVEPREV EQU   4                       * Pointer ro previous save-area\nSAVENEXT EQU   8                       * Pointer to next savearea\nSAVEDR14 EQU   12                      * Return addr for current call\nSAVEDR15 EQU   16                      * Entry-point address of\n*                                      *          current call\nSAVEDR0  EQU   20                      * Original contents of R0\nSAVEDR1  EQU   24                      * Address of plist for this call\nSAVEDR2  EQU   28                      * Original contents of R2\nSAVEDR3  EQU   32                      * Original contents of R3\nSAVEDR4  EQU   36                      * Original contents of R4\nSAVEDR5  EQU   40                      * Original contents of R5\nSAVEDR6  EQU   44                      * Original contents of R6\nSAVEDR7  EQU   48                      * Original contents of R7\nSAVEDR8  EQU   52                      * Original contents of R8\nSAVEDR9  EQU   56                      * Original contents of R9\nSAVEDR10 EQU   60                      * Original contents of R10\nSAVEDR11 EQU   64                      * Original contents of R11\nSAVEDR12 EQU   68                      * Original contents of R12\n*\n         SPACE 3\n*\n* Statements below are for ensuring that UAWORKAR will be large\n* enough for all data and coding that is to be put into it.\n* If - for any reason - lengths are changed so that a data area\n* that is to use the UAWORKAR-field does not fit in it anymore\n* an error (due to negative length) will be generated.\n*\n         DS    0CL(&WORKLV-VSAMOPLV)   * Plist of vsamopen\n         DS    0CL(&WORKLV-CLOSELV)    * Plist of close\n         DS    0CL(&WORKLV-BLDVRDLV)   * Plist of bldvrpd\n         DS    0CL(&WORKLV-BLDVRILV)   * Plist of bldvrpi\n         DS    0CL(&WORKLV-ERRWTOLV)   * Plist of errwto\n         DS    0CL(&WORKLV-SHOWACLV)   * Plist generated by showcb ACB\n         DS    0CL(&WORKLV-ERRWTOLV-SHOWACLV) * Used together in vserr\n         DS    0CL(&WORKLV-MODCBDLV)   * Plist gen'ed by modcb (delete)\n         DS    0CL(&WORKLV-MODCBILV)   * Plist gen'ed by modcb (insert)\n         DS    0CL(&WORKLV-MODCNDLV)   * Plist gen'ed by modcb (no del)\n         DS    0CL(&WORKLV-MODCNILV)   * Plist gen'ed by modcb (no ins)\n         DS    0CL(&WORKLV-MODCBKLV)   * Plist gen'ed by modcb (key)\n         DS    0CL(&WORKLV-GACLISLV)   * Plist generated for gencb ACB\n         DS    0CL(&WORKLV-GACLIRLV)   * Plist generated for gencb ACB\n         DS    0CL(&WORKLV-GACLUSLV)   * Plist generated for gencb ACB\n         DS    0CL(&WORKLV-GACLURLV)   * Plist generated for gencb ACB\n         DS    0CL(&WORKLV-GACPISLV)   * Plist generated for gencb ACB\n         DS    0CL(&WORKLV-GACPIRLV)   * Plist generated for gencb ACB\n         DS    0CL(&WORKLV-GACPUSLV)   * Plist generated for gencb ACB\n         DS    0CL(&WORKLV-GACPURLV)   * Plist generated for gencb ACB\n         DS    0CL(&WORKLV-GRPLISLV)   * Plist generated for gencb RPL\n         DS    0CL(&WORKLV-GRPLIRLV)   * Plist generated for gencb RPL\n         DS    0CL(&WORKLV-GRPLUSLV)   * Plist generated for gencb RPL\n         DS    0CL(&WORKLV-GRPLURLV)   * Plist generated for gencb RPL\n         AIF   (NOT &DBG).DSFDB\n         DS    0CL(&WORKLV-SNAPOPLV)   * Plist of snapopen\n         DS    0CL(&WORKLV-RSNAPPLV)   * Plist of rsnapsnp\n.DSFDB   ANOP\n*\n         EJECT\n*\n* This DSECT describes the file descriptor blocks.\n* Each FDB is used to control 1 physical file; logical files are\n* mapped onto physical files in a n:m relationship. (currently 1:1)\n* This mapping is done in phase1.\n*\nDSFDB    DSECT\nFDB      DS    0CL96                   * File Descriptor Block\nFDBNEXT  DS    AL4                     * Pointer to next FDB\nFDBECB   DS    F                       * Event control block\nFDBDDNAM DS    CL8                     * DDNAME to use for this file\nFDBDDLOC EQU   FDBDDNAM-FDB            * Offset of DDNAME within FDB\nFDBACB   DS    AL4                     * Address of ACB\nFDBRPL   DS    AL4                     * Address of RPL\nFDBREC   DS    AL4                     * Record-address within buffer\nFDBSBUF  DS    AL4                     * Start-of-data current buffer\nFDBEBUF  DS    AL4                     * End-of-data in current buffer\nFDBWAREA DS    AL4                     * Addr of working area for rec'd\nFDBMAP   DS    AL4                     * Address of rec'd/parm map-list\n         DS    H                       * Len of allocated ACB (unused)\n         DS    H                       * Len of allocated RPL (unused)\nFDBRECLV DS    H                       * Logical record length\nFDBKEYLV DS    X                       * Key-length\nFDBNR    DS    X                       * File-group number\nFDBREASN DS    H                       * Reasoncode for FDBRETCD\nFDBRETCD DS    X                       * Retcd of worst error this FDB\nFDBSTAT  DS    X                       * Status bits\nFDBSKKLV DS    X                       * Skip-key length value\nFDBREQ   DS    X                       * I/O request bits\nFDBLREQ  DS    X                       * Last completed I/O request\nFDBLKEY  DS    CL&MAXKEY               * Key of FDBLREQ\nFDBXKEY  DS    CL&MAXKEY               * Extra key for double requests\n         DS    (37-2*&MAXKEY)X         * Reserved\n*\n* FDBNEXT must be the first field (thus it is valid, even when the\n*         base register for FDB points to UAFDBPTR)\n* FDBDDNAM must be on a doubleword boundary\n*\n         SPACE\n*\n* Bit masks for FDBSTAT\n*\nFDBCLSD  EQU   B'00000000'             * File is currently closed\nFDBINPUT EQU   B'00000001'             * File is open for read only\nFDBUPDAT EQU   B'00000011'             * File is open for read/write\nFDBACRND EQU   B'00000100'             * Access to file is random\nFDBRPLDR EQU   B'00001000'             * RPL-optcd = UPD,MVE (LOC->MVE)\nFDBRPLIR EQU   B'00011000'             * RPL-optcd = NUP,MVE\n*                                      *                 (ID.+UPD->NUP)\nFDBBUFUP EQU   B'00100000'             * Buffer marked for output\nFDBEOF   EQU   B'01000000'             * Eof / file pointer not valid\nFDBERROR EQU   B'10000000'             * Uncorrectable I/O error\n*\nFDBRPLND EQU   B'11110111'             * Reset-mask from delete-status\nFDBRPLNI EQU   B'11100111'             * Reset-mask from insert status\nFDBBUFNU EQU   B'11011111'             * Reset-mask from buffer marked\nFDBNOEOF EQU   B'10111111'             * Reset eof-condition\n         SPACE\n*\n* Bit masks for FDBREQ and FDBLREQ\n*\nFDBNOREQ EQU   B'00000000'             * No outstanding requests\nFDBOPEN  EQU   B'10000000'             * Request to open the file\nFDBOPENU EQU   B'10000010'             * Request to open file for updat\nFDBSKIP  EQU   B'01000000'             * Request to seek a partial key\nFDBREAD  EQU   B'00100000'             * Request to read a record\nFDBREAD2 EQU   B'01101000'             * Request to re-execute\n*                                      *                   RRX-routine\nFDBWRITE EQU   B'00010000'             * Request to update a record\nFDBINSRT EQU   B'00001000'             * Request to insert a new record\nFDBDEL   EQU   B'00000100'             * Request to delete a record\nFDBCLOSE EQU   B'00000010'             * Request to close the file\nFDBOPRND EQU   B'00000001'             * Request to open random\n*\nFDBNOOI  EQU   B'00011110'             * Reset open input request\nFDBNOOU  EQU   B'00011100'             * Reset open update request\nFDBNOSK  EQU   B'10111111'             * Reset skip request\nFDBNORX  EQU   B'11011111'             * Reset read request\nFDBNOWX  EQU   B'11101111'             * Reset write request\nFDBNOIR  EQU   B'11110111'             * Reset insert request\nFDBNODR  EQU   B'11111011'             * Reset delete request\nFDBNOCA  EQU   B'11111101'             * Reset close request\nFDBNORND EQU   B'11111110'             * Reset random specifier\n*\n* The close-request bit serves also as an update-indicator during open\n* processing. After opening it is reset: Therefore open and close\n* requets cannot be combined in one opcode. This is no problem:\n* the combination would be quite useless anyway.\n*\n* The insert-request-bit serves a double function as well: it also\n* indicates a re-read request (issued when read-sequntial reaches\n* end-of-buffer). Thus read and insert cannot be combined into\n* one opcode.\n*\n         EJECT\n*\n* This DSECT describes the map master elements (1 per version)\n* For each FDB there is a list of map master elements. These must\n* be in contiguous storage.\n*\nDSMME    DSECT\nMME      DS    0CL8                    * Map Master Element\nMMEREM   DS    H                       * Remaining elements in list\nMMEVERS  DS    CL2                     * Version identifier\nMMEMAP   DS    AL4                     * Start of map for this version\n*\n* MMEREM gives the number of MME-elements there are in this MME-list\n*        (that is: for the current FDB)\n* MMEMAP points to the start of the map for the current FDB and for\n*        the current version\n*\n         SPACE 3\n*\n* This DSECT describes the map-elements. For each version of each file\n* there must be a map describing how data is to be transferred between\n* record and parameter. The map-elements must be in contiguous storage.\n*\nDSME     DSECT\nME       DS    0CL8                    * Parameter block\nMEREM    DS    H                       * Nr of remaining MEs in list\nMEDATLV  DS    H                       * Data length\nMEPRMOFS DS    H                       * Offset of data in parm\nMERECOFS DS    H                       * Offset of data in record\n*\n         EJECT\n*\n* This DSECT describes the parameter that is used for communication\n*                                      with the application program\n*\nDS83PARM DSECT\nBXAIOPRM DS    0CL1024                 * Parameter block\n         SPACE\nLNSPARM  DS    0CL(3+&MAXKEY)\nLNSFCODE DS    CL2                     * Function code\nLNSRCODE DS    CL1                     * Return code\nLNSKEY   DS    CL&MAXKEY               * Key\n         SPACE\n         DS    CL(1021-&MAXKEY)        * Start of record/data area\n*                                      *   for records with\n*                                      *   FDBKEYLV = &MAXKEY\n         SPACE 3\n*\n* This DSECT describes the parameter that is used for communication\n*                                      with the static part of BXAIO\n*\nDS83PRM2 DSECT\nLNSPRM2  DS    0CL16\nLNSUAPTR DS    AL4                     * Address of USERAREA\nLNSVERSI DS    CL2                     * Version number of parameter 1\nLNSFILES DS    CL8                     * Logical data-group selectors\n         DS    CL2                     * Reserved\n*\n         EJECT\n         AIF   (NOT &DBG).DSSNAP\n*\n* This DSECT is used by the RSANP-routine\n*\nDSSNAP   DSECT\nSNAPAREA DS    0CL(120+&SNAPLEN+(&SNAPLEN/2)+SNAPDCBL)\nSNAPSAVE DS    18F                     * Register save-area\nSNAPLIST DS    XL&SNAPLEN              * Space for storage ranges\nSNAPHDRS DS    XL(&SNAPLEN/2)          * Space for storage header ptrs\nSNAPIDNR DS    X                       * Idnr of last snap, initial 0\n         DS    XL3                     * Filler to realign\nSNAPDCB  DS    XL(SNAPDCBL)            * Space for DCB of snap-file\n         DS    XL40                    * Extension space for DCB\n*\n         SPACE 3\n.DSSNAP  ANOP\n*\n* This DSECT describes an access method control block\n*\n         IFGACB DSECT=YES,             * Generate DSECT for ACBs       *\n               AM=VSAM                 *    used for VSAM-files\nIFGACBLV EQU   *-IFGACB\n*\n         AIF   (NOT &DBG).IFGRPL\n         EJECT\n.IFGRPL  ANOP\n*\n* This DSECT describes a request parameter list\n*\n         IFGRPL DSECT=YES,             * Generate DSECT for RPLs       *\n               AM=VSAM                 *    used for VSAM-files\nIFGRPLLV EQU   *-IFGRPL\n*\n         AIF   (NOT &DBG).IDAPLH\n         EJECT\n.IDAPLH  ANOP\n*\n* This DSECT describes a placeholder\n*\n*        IDAPLH DSECT=YES,AM=VSAM      * IDAPLH macro not present\nIDAPLH   DSECT ,                       * Placeholder\n         DS    13F                     * First 13 words not described\nPLHDBUFC DS    AL4                     * Addr of current data bufc\nPLHNBUFC DS    AL4                     * Addr of next read bufc\nPLHRECP  DS    AL4                     * Addr of current record\nPLHFSP   DS    AL4                     * Addr of 1st byte of free space\n*                                      * Remainder of PLH not described\nIDAPLHLV EQU   332                     * Total length of a placeholder\n*\n         SPACE 3\n*\n* Shrpool-nr in bldvrp is to be changeable. The bldvrp macro does not\n* support register specification of shrpool-parameter. Therefore we\n* must alter the shrpool-byte in the bldvrp-pool ourselves. The\n* shrpool-number is located at offset X'20' in the bldvrp request list.\n*\nDSBLDVRP DSECT ,                       * Describes bldvrp/dlvrp plists\nBLDVRPTR DS    F                       * Pointer to only element\nBLDVRPHD DS    0F                      * Start of header = only element\n         DS    7F                      * First 28 bytes not described\nBLDVRPNR DS    X                       * Location of shrpoolnr in\n*                                      *              bldvrp-request\n*                                      * Remainder not described\n         END\n./ ADD NAME=BXALOWPG 0100-20110-20110-2315-00043-00043-00000-BXAASM  15\n*PROCESS RENT\n*PROCESS FLAG(SUBSTR)\n***********************************************************************\n*\n* BIXXAMS - Bixoft Cross Access Method Services\n* Licensed material - Property of B.V. Bixoft\n*\n* This program can be licensed or used on an as-is basis.\n* No warranty, neither implicit nor explicit, is given.\n* It remains your own responsibility to ensure the correct\n* working of this program in your installation.\n*\n* Suggestions for improvement are always welcome at\n* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n*\n* (C) Copyright B.V. Bixoft, 1999-2000\n***********************************************************************\n*\n* Entry for stand-alone testing new mapping macro's\n         PGM   VERSION=V00R00M00,      * Version number                *\n               HDRTXT='Testpgm for GLUE macro',                        *\n               ENTRY=MAIN,             * Entry for subroutine          *\n               AMODE=24,               * 24-bit addr. mode             *\n               RMODE=24,               * Resides below 16 Mb           *\n               ABND=4090,              * Abend code for BXALOWPG       *\n               MAPS=(BITS,REGS),       * Standard mappings             *\n               LIST=NO                 *\n*\nR_RCD    EQUREG ,                      * Allocate retcode register\n         USE   R_RCD                   *\n*\n         RWTO  'BXALOWPG is now running'\n         ABND  TSTRC,RCD=R5            * warning messages in assembly\n*\n         RETRN RC=0                    * Normal return to caller\n***********************************************************************\n*\n* Constants etc.\n*\n***********************************************************************\n         LTORG ,                       *\n*\n         END\n./ ADD NAME=BXAMAPS  0100-20110-20110-2315-00232-00232-00000-BXAASM  15\n*PROCESS FLAG(SUBSTR)\n*PROCESS RENT\n***********************************************************************\n*\n* BIXXAMS - Bixoft Cross Access Method Services\n* Licensed material - Property of B.V. Bixoft\n*\n* This program can be licensed or used on an as-is basis.\n* No warranty, neither implicit nor explicit, is given.\n* It remains your own responsibility to ensure the correct\n* working of this program in your installation.\n*\n* Suggestions for improvement are always welcome at\n* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n*\n* (C) Copyright B.V. Bixoft, 1999-2000\n***********************************************************************\n*\n* This program performs no function:\n*   it is used only for generating a listing of all dsects used.\n*\n***********************************************************************\n         LCLC  &SELECT                 * Selection variable\n&SELECT  SETC  'UCB'                   * Select a single map macro\n&SELECT  SETC  '*BXA'                  * Select bixxams map-macros\n&SELECT  SETC  '*ALLMAPS'              * Select all map-macros\n&SELECT  SETC  '*ALLMACS'              * Select all macros\n*\n         AIF   ('&SELECT'(1,1) EQ '*').NOTSA\n*\n* Entry for stand-alone testing new mapping macro's\n         PGM   VERSION=V00R00M00,      * Version number                *\n               HDRTXT='Map testing',   * Header for loadmod            *\n               ENTRY=SUBPGM,           * Entry for subroutine          *\n               ABND=1,                 * User abend code               *\n               MAPS=(&SELECT),         * Map to be tested              *\n               LIST=YES                * Generate listing\n         AGO   .END                    *\n.NOTSA   ANOP  ,                       *\n&SAVES   SETC  '0'                     * Default\n         AIF   ('&SELECT' NE '*ALLMACS').SAVESOK\n&SAVES   SETC  '1'                     * Required for *ALLMACS\n.SAVESOK ANOP  ,                       *\n*\n* Entry for a complete overview of all BIXXAMS mapping macro's\n         PGM   VERSION=V00R00M00,      * Version number                *\n               HDRTXT='Mapping module for BIXXAMS',                    *\n               ENTRY=SUBPGM,           * Entry for subroutine          *\n               ABND=1,                 * User abend code               *\n               SAVES=&SAVES,           * Internal save areas           *\n               MAPS=($AMQS,$BDS,$BDSD,$BDSL,$BDST,$COPY,$DAPL,$DBG,    *\n               $OCW,$PCW,$SCB,$SNAP,$SRB,$TST,$UNLD),                  *\n               LIST=YES                * And generate a listing\n         AIF   ('&SELECT' EQ '*BXA').END\n         AIF   ('&SELECT' EQ '*ALLMAPS').GENALL\n         AIF   ('&SELECT' EQ '*ALLMACS').GENALL\n&SELECT  SETC  (DOUBLE '&SELECT')      *\n         MNOTE 8,'Invalid value for &&SELECT - &SELECT'\n         AGO   .END                    *\n.GENALL  ANOP  ,                       *\n*\n* Other mapping macros (A-C):\n         GENMAPS (ABEP,ACB,ACEE,ADSR,ADYENF,AE,ASCB,ASEO,              *\n               ASMVT,ASSB,ASVT,ASXB,   *                               *\n               BASEA,BITS,             *                               *\n               CAM,CDE,CIB,COM,CQE,CSCB,CVT),                          *\n               LIST=YES                *\n*\n* Other mapping macros (D-I):\n         GENMAPS (DCB,DCBE,DDRCOM,DEB,DECB,DES,DFA,DOTU,DSAB,DSABQDB,  *\n               DSCB,DSCB1,DSCB2,DSCB3,DSCB4,DSCB5,                     *\n               ECB,ECVT,EPAL,EQU,EVNT, *                               *\n               FRRPL,FRRS,             *                               *\n               GVT,GVTX,               *                               *\n               IEANT,IECEQ,IHSA,IOB,IOQ,IOSB),                         *\n               LIST=YES                *\n*\n* Other mapping macros (J-R):\n         GENMAPS (JCT,JCTX,JESCT,JFCB,JFCBE,JFCBX,JSCB,                *\n               LCT,LDA,LLE,LMASM,LPDE, *                               *\n               OCPL,ORE,OUCB,          *                               *\n               PCCA,PCCAVT,PDAB,PDS,PEL,PMAR,PRB,PRMLB,PSA,PSL,PVT,    *\n               QCB,QEL,QHT,QMIDS,      *                               *\n               RB,RCTD,REGS,RMCT,RMPL,RPL,RQE,RT1W),                   *\n               LIST=YES                *\n*\n* Other mapping macros (S-Z):\n         GENMAPS (SAVE,SCCB,SCT,SCTX,SCVT,SDWA,SIOT,SMCA,SMDE,SNAP,SRB,*\n               SSDR,SSL,SSOB,SSRB,STCB,SVCE,SVRB,SVT,SWAPX,S99,        *\n               TAXE,TCB,TCCW,TCT,TIOT,TQE,                             *\n               UCB,UCM,                *                               *\n               VRA,VSL,                *                               *\n               WQE,WTOPL,              *                               *\n               XSB),                   *                               *\n               LIST=YES                *\n         AIF   ('&SELECT' NE '*ALLMACS').END\n*\n* Routine that will never execute\n         IF    R12,EQ,R13              * Can never be true\n          EXSR ALLMACS                 *\n         ELSE  ,                       * Always taken: leave empty\n         ENDIF ,                       *\n*\n.END     ANOP  ,                       *\n*\n         RETRN RC=0                    * Normal return to caller\n         AIF   ('&SELECT' NE '*ALLMACS').LTORG\n***********************************************************************\n*\n* Routine to inlcude all macros\n*\n***********************************************************************\nALLMACS  BEGSR ,                       *\n*\nR_SLIST  EQUREG ,                      *\n         USE   SNAPLIST,R_SLIST        *\nR_HLIST  EQUREG ,                      *\n         USE   SNAPHLIST,R_HLIST       *\nR_DBG    EQUREG ,                      *\n         USE   DBG,R_DBG,              *                               *\n               OVR=((DBGSAVE,DBGSA))   *\n*\n         DBG   ABND,NOWARN             *\n         DS    0F                      *\nFLD1     DCOVR AL4(266)                *\nFLD1     DC    FL2'66'                 *\n         DCOVR *END                    *\nTESTRDTA RDATA CMDTXT,'TEST'           *\n*\n         BALE  R14,ALLMACSX            *\n         BALH  R14,ALLMACSX            *\n         BALL  R14,ALLMACSX            *\n         BALM  R14,ALLMACSX            *\n         BALO  R14,ALLMACSX            *\n         BALP  R14,ALLMACSX            *\n         BALZ  R14,ALLMACSX            *\n         BALNE R14,ALLMACSX            *\n         BALNH R14,ALLMACSX            *\n         BALNL R14,ALLMACSX            *\n         BALNM R14,ALLMACSX            *\n         BALNO R14,ALLMACSX            *\n         BALNP R14,ALLMACSX            *\n         BALNZ R14,ALLMACSX            *\n*\n         BASE  R14,ALLMACSX            *\n         BASH  R14,ALLMACSX            *\n         BASL  R14,ALLMACSX            *\n         BASM  R14,ALLMACSX            *\n         BASO  R14,ALLMACSX            *\n         BASP  R14,ALLMACSX            *\n         BASZ  R14,ALLMACSX            *\n         BASNE R14,ALLMACSX            *\n         BASNH R14,ALLMACSX            *\n         BASNL R14,ALLMACSX            *\n         BASNM R14,ALLMACSX            *\n         BASNO R14,ALLMACSX            *\n         BASNP R14,ALLMACSX            *\n         BASNZ R14,ALLMACSX            *\n*\n         BHER  R14                     *\n         BLER  R14                     *\n         BLHR  R14                     *\n         BNHER R14                     *\n         BNLER R14                     *\n         BNLHR R14                     *\n*\n         CASE  DBG_PROB                *\n          RWTO 'DBG:PROB'              *\n         ENDCASE ,                     *\n*\n         DO    UNTIL,R0,Z              *\n          BXAEPSW R0                   *\n          LEAVE NZ                     *\n          LOOP ,                       *\n         ENDDO ,                       *\n*\n         EXCLC 0(R1,R2),0(R4)          *\n         EXMVC 0(R1,R2),0(R4)          *\n         EXSVC (R14)                   *\n         EXTR  0(R1,R2),0(R4)          *\n         EXTRT 0(R1,R2),0(R4)          *\n         EXXC  0(R1,R2),0(R4)          *\n         MVPL  DBGENQ,DBG_ENQ          *\n*\n         IF$ALC R5                     *\n         IF$LS R4,FLD1,4,A             *\n         IF$LU R4,FLD1,4,A             *\n*\n         INC   R5                      *\n         LC    R5,0(R4)                *\n         LTA24 R5,0(R4)                *\n         LTC   R5,0(R4)                *\n         LTH   R5,0(R4)                *\n         LTHU  R5,0(R4)                *\n         STA24 R5,0(R4)                *\n*\n         SET   DBGINIT                 *\n         SETOF DBG_PROB                *\n         SETON DBG_PROB                *\n         SETMODE PSWKEY,KEY=8          *\n*\n         SNAPNTRY (R4),                *                               *\n               LEN=(R6),               *                               *\n               HDR='>> CB - Some Control Block'\n*\n         GOTO  ALLMACSX                *\nTRTAB1   TRTAB UC                      *\n         USEDREGS ,                    *\n*\nDBG_ENQ  ENQ   (0,0,E,0,SYSTEM),       * Prototype for ENQ             *\n               RET=NONE,MF=L           *   plist\n*\nALLMACSX LABEL ,                       *\n         GBLB  &SP_OPT                 * Optimize switch\n         AIF   (&SP_OPT).NOOPSYNS      *\n         OPSYNS LA,LR                  *\n.NOOPSYNS ANOP ,                       *\n         IPK   ,                       * Macro IPK\n         LA    R7,4                    * Macro LA\n         LR    R15,R7                  * Macro LR\n         TRT   0(8,R4),0(R8)           * Macro TRT\n*\n         ENDSR ,                       *\n.LTORG   ANOP  ,                       *\n***********************************************************************\n*\n* Constants etc.\n*\n***********************************************************************\n         LTORG ,                       *\n*\n         END\n./ ADD NAME=BXAPRIM  0100-20110-20110-2315-01066-01066-00000-BXAASM  15\nBXAPRIM  TITLE 'Find Primes Using Sieve of Erathostenes'\n***********************************************************************\n* Start create : 06-06-2006\n* 1st delivery :\n* Designer     : AF Kornelis\n* Programmer   : AF Kornelis\n***********************************************************************\n*\n* Parameter: [charmode][separator][spacing]\n* Where charmode = EBCDIC|ASCII\n*       separator= PERIOD|COMMA\n*       spacing  = SPACING(n|nn) - n|nn being a number between 1 and 99\n*\n* Options may appear in any order and must be separated by a comma.\n* Default: EBCDIC,PERIOD,SPACING(4)\n*\n***********************************************************************\n*\n* Internal calculus is done in excess-30/210 notation. That is, each\n* number is represented by the results of its division by 30/210:\n* both its quotient and its remainder. 30/210 are chosen because it is\n* the product of the first three/four primes: 2, 3, 5 (and 7).\n* The remainder thus tells us straight away whether the number might\n* be divisible by 2, 3, 5 (or 7). If it is not, it might be a prime.\n* Each stretch of 30/210 numbers thus contains 8/48 potential primes.\n* The status of these 8/48 numbers can be represented in 1/6 byte(s).\n*\n***********************************************************************\n\n***********************************************************************\n*\n* Define constants and environment\n*\n***********************************************************************\n         YREGS ,                       * Define register equates\n         DCBD  DSORG=PS\n\n***********************************************************************\n*\n* Define workareas and fixed constants\n*\n***********************************************************************\n#LPP     EQU   66                      * Nr of lines per page\n#CPL     EQU   80                      * Nr of characters per line\n*\n&#MAXP   SETA  7                       * Highest pre-determined prime\n&INTVALS SETA  1200                    * Nr of intervals to process\n#MAXP    EQU   &#MAXP                  * Max pre-calculated prime\n         AIF   ('&#MAXP' EQ '7').INTVAL7\n#INTVAL  EQU   2*3*5                   * Interval size = 30\n#CAND    EQU   8                       * Nr of candidates per interval\n         AGO   .INTVAL\n.INTVAL7 ANOP  ,\n#INTVAL  EQU   2*3*5*7                 * Interval size = 210\n#CAND    EQU   48                      * Nr of candidates per interval\n.INTVAL  ANOP  ,\n&CAND    SETA  #CAND                   * Nr of candidates per interval\n\nWORKAREA DSECT ,                       *\nSAVEAREA DS    18F                     * Save area for GPRs\nWAEYE    DS    CL8                     * Eye Catcher\nWACHARS  DS    C                       * Character set: Ebcdic / Ascii\nWASEPRTR DS    C                       * Thousands separator\nWASPACE  DS    H                       * Column spacing\nWAINTVBITS DS  H                       * Nr of candidate primes/intval\nWAINTVBYTS DS  H                       * Interval size in bytes\nWAPRHDR1 DS    A                       * Ptr to first PRIMHDR area\nWARPTBUF DS    A                       * Ptr to reporting buffer\nWARPTBSZ DS    F                       * Size of reporting buffer\nWAPRMRET DS    A                       * Return address from PARMS\nWAPRMPTR DS    A                       * Ptr to parameter string\nWASTPRET DS    A                       * Return address from SETUP\nWAFNPRET DS    A                       * Return address from FNP\nWAFNPR5  DS    F                       * Pointer to current bit\nWAFNPR9  DS    F                       * Address of current bitstring\nWASQPRET DS    A                       * Return address from SQP\nWARMVRET DS    A                       * Return address from RMV\nWARPTRET DS    A                       * Return address from RPT-rtns\nWAWRTRET DS    A                       * Return address from WRT\nWAPRIMB  DS    F                       * Current prime (Base)\nWADBLB   DS    F                       * Double of WAPRIMB (base)\nWACURB   DS    F                       * Current number (Base)\nWAPRIMX  DS    X                       * Current prime (excess)\nWADBLX   DS    X                       * Double of WAPRIMB (excess)\nWACURX   DS    X                       * Current number (excess)\n         DS    0D\nWAPRIMPK DS    PL8                     * Packed prime number\nWAPRIMNR DS    ZL16                    * Same nr in zoned format\n         DS    0D\nWASYSOUT_EYE DS XL8                    * Room for eyecatcher\nWASYSOUT Ds    XL(SYSOUT_LEN)          * Room for runtime copy of DCB\n         DS    0D\nWAMASKS_EYE DS XL8                     * Room for eyecatcher\nWAMASKS  DS    8X                      * Bit masks for AND-ing a bit\n         DS    0D\nWAPRIMES_EYE DS XL8                    * Room for eyecatcher\nWAPRIMES DS    XL(#INTVAL)             * Byte-size entries for 1 intval\n*                                      * 0   = not a candidate prime\n*                                      * 1-n = candidate prime nr\n*                                      * Also bit nr in bit string\n*                                      *   counting bits from 1 thru n\n*                                      *   rather than 0 thru n-1\n         DS    0D\nWABIT2OF_EYE DS XL8                    * Room for eyecatcher\nWABIT2OF DS    XL(&CAND)               * Bit nr to offset in interval\n*                                      * Each byte corresponds to a bit\n*                                      * in each bitstring (interval).\n*                                      * Each byte holds the value that\n*                                      * the corresponding bit in its\n*                                      * interval represents.\n*                                      * E.g. if #MAXP=5, then the\n*                                      * first bit represents 1, the\n*                                      * second 7, the third 11, etc.\n*                                      * The values are used to convert\n*                                      * between binary and\n*                                      * excess-30/210 notation.\n         DS    0D                      * Re-align to Double-word\nWAEYE2   DS    CL8                     * Second Eye-catcher\nWORKAREA_LEN EQU *-WORKAREA\n\n*\n* Header for a primes area. Each primes area consists of a series\n* of consecutive bitstrings of length &CAND bits. &CAND is always a\n* multiple of 8, thus each string is &CAND/8 bytes in size\n*\nPRIMHDR  DSECT\nPRIMNEXT DS    A                       * Ptr to next PRIMHDR\nPRIMBASE DS    F                       * Interval number (30s/210s)\nPRIMLAST DS    F                       * Last interval number\nPRIMPTR  DS    A                       * Area of bit map\nPRIMLEN  DS    A                       * Length of bitmap area\nPRIMSTAT DS    X                       * Status flag\nPRIMSINI EQU   X'80'                   * -bit0 = area initialized\nPRIMSOK  EQU   X'40'                   * -bit1 = all primes located\nPRIMSWR  EQU   X'01'                   * -bit7 = area needs to be writ\n         DS    0D                      * Re-align\nPRIMHDR_LEN EQU *-PRIMHDR\n\n\n***********************************************************************\n*\n* Program entry and linkage\n*\n***********************************************************************\nBXAPRIM  RSECT ,                       *\nBXAPRIM  AMODE 31\nBXAPRIM  RMODE ANY\n***********************************************************************\n         USING BXAPRIM,R15             * Establish addressability\n         B     BXAPRIM0                * Skip header data\n         DC    AL1(BXAPRIM-*),C'BXAPRIM  &SYSDATE &SYSTIME'\nBXAPRIM0 EQU   *\n         STM   R14,R12,12(R13)         * Save GPRs\n         LR    R12,R15                 * Copy base address\n         LR    R2,R1                   * Copy ptr to parm string\n         DROP  R15                     * No longer needed\n         USING BXAPRIM,R12             * Re-establish addressability\n         LA    R11,WORKAREA_LEN        * Size of req'd workarea\n         GETMAIN R,LV=(R11),LOC=BELOW  * Acquire working storage\n         ST    R1,8(,R13)              * Set ptr to new savearea\n         ST    R13,4(,R1)              * Set ptr from ne to prev save\n         LR    R13,R1                  * Activate new savearea\n         USING WORKAREA,R13            * Set addressable\n         XR    R0,R0                   * Set to zero\n         ST    R0,SAVEAREA             * Nullify header-word\n         ST    R2,WAPRMPTR             * Save pointer to parmstring\n\n***********************************************************************\n*\n* Set up working storage areas\n*\n***********************************************************************\n         MVC   WAEYE,=CL8'BXAPRIM '    * Init Eye-catcher\n         MVC   WAEYE2,=CL8'BXAPRIM '   * and ending eye-catcher as well\n         MVC   WASYSOUT_EYE,=CL8'WASYSOUT'\n         MVC   WAMASKS_EYE,=CL8'WAMASKS'\n         MVC   WAPRIMES_EYE,=CL8'WAPRIMES'\n         MVC   WABIT2OF_EYE,=CL8'WABIT2OF'\n         XR    R0,R0\n         ST    R0,WAPRIMB\n         ST    R0,WADBLB\n         ST    R0,WACURB\n         MVI   WAPRIMX,#MAXP\n         MVI   WADBLX,0\n         MVI   WACURX,0\n         BAL   R14,PARMS               * Extract parameters from string\n         BAL   R14,SETUP               * Setup various arrays\n\n***********************************************************************\n*\n* Obtain and init first area for finding primes\n*\n***********************************************************************\n         LA    R11,PRIMHDR_LEN         * Size of header area\n         GETMAIN R,LV=(R11),LOC=ABOVE  * Acquire header area\n         LR    R11,R1                  * Get pointer to header\n         USING PRIMHDR,R11             * Set header area addressable\n         ST    R11,WAPRHDR1            * Save pointer\n         XC    PRIMHDR(PRIMHDR_LEN),PRIMHDR * Wipe area\n         L     R2,=F'&INTVALS'         * Nr of intervals to allocate\n         LH    R3,WAINTVBYTS           * Interval size in bytes\n         LR    R1,R2                   * Save nr of intervals\n         BCTR  R1,R0                   * Get highest interval nr\n         ST    R1,PRIMLAST             * Insert that into header\n         MR    R2,R2                   * R2*R3 --> R2R3\n         GETMAIN R,LV=(R3),LOC=ABOVE   * Get storage\n         ST    R3,PRIMLEN              * Save length of area\n         ST    R1,PRIMPTR              * Save pointer to area\n         LR    R10,R1                  * Get pointer to storage\n*\n         LR    R0,R1                   * Destination pointer\n         L     R1,PRIMLEN              * Destination length\n         XR    R14,R14                 * Source pointer\n         XR    R15,R15                 * Source length\n         ICM   R15,B'1000',=X'FF'      * Filler byte\n         MVCL  R0,R14                  * Init entire bit map\n*\n         OI    PRIMSTAT,PRIMSINI       * Set status to init ok\n         LA    R1,1                    * First 'potential' prime\n         STC   R1,WAPRIMX              * Multiples of 1 do not need\n*                                      *     to be removed\n         NI    0(R10),X'FF'-X'80'      * Reset '1' - it is no prime\n\n*\n** Setup data for FNP routine to pretend '1' was lastly processed\n         LA    R15,&CAND               * Bit pointer in bitstring\n         ST    R15,WAFNPR5             *\n         MVC   WAFNPR9,PRIMPTR         * Pointer to bitstring\n\n***********************************************************************\n*\n* Prepare for processing: Find first prime to process\n*\n***********************************************************************\nNEXTPRIM DS    0H                      *\n         BAL   R14,FNP                 * Find Next Prime\n         BAL   R14,SQP                 * SQuare Prime nr\n         CLC   WACURB,PRIMLAST         * Square exceeds area?\n         BH    REPORT                  * Yes: Report primes found\n         BAL   R14,RMV                 * ReMoVe all multiples\n         B     NEXTPRIM                * Go find & Process next prime\n\nREPORT   DS    0H\n         OI    PRIMSTAT,PRIMSOK        * Mark area completed\n*\n** Setup data for FNP routine to pretend '1' was lastly processed\n         XC    WAPRIMB,WAPRIMB         * First prime is in interval 0\n         XC    WAPRIMX,WAPRIMX         * First prims not found yet\n         LA    R15,&CAND               * Bit pointer in bitstring\n         ST    R15,WAFNPR5             *\n         MVC   WAFNPR9,PRIMPTR         * Pointer to bitstring\n*\n         BAL   R14,INITRPT             * Setup for printing\nRPTLOOP  DS    0H\n         BAL   R14,FNP                 * Find Next Prime\n         LTR   R15,R15                 * No more primes?\n         BNZ   RPTDONE                 * No: we're done\n         BAL   R14,RPTPRIM             * Ok: Report this prime\n         B     RPTLOOP                 *\nRPTDONE  DS    0H\n         BAL   R14,ENDRPT              * Terminate printing\n         WTO   'OK, klaar'             **!!\n         B     EXIT                    * Quit program\n\nABEND001 ABEND 001                     * User Abend 001:\n*                                      * Nr of candidate primes per\n*                                      * interval does not match preset\n*                                      * value: initialization error\nABEND002 ABEND 002                     * User Abend 002:\n*                                      * Last prime processed cannot be\n*                                      * located in bit string\nABEND003 ABEND 003                     * User Abend 003:\n*                                      * Next prime to process has a\n*                                      * square that exceeds 2**31\nABEND004 ABEND 004                     * User Abend 004:\n*                                      * Input parameterstring cannot\n*                                      * be processed correctly\nABEND005 ABEND 005                     * User Abend 005:\n*                                      * Internal error while\n*                                      * processing parameter string\n         DROP  ,\n***********************************************************************\n*\n* Subroutine to process run-time parameter string\n*\n* Input : Workarea - WAPRMPTR\n* Output: Workarea - wachars, WASEPRTR, WASPACE\n*\n* Allowed parameters:\n* EBCDIC\n* ASCII\n* COMMA\n* PERIOD\n* SPACING\n*\n* Register allocations:\n* R13 - workarea\n* R12 - codebase\n* R11 - parmstring\n* R10 - length of string\n*\n***********************************************************************\nPARMS    DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         ST    R14,WAPRMRET            * Save return address\n\n*\n** Start with setting appropriate defaults\n         MVI   WACHARS,C'E'            * EBCDIC\n         MVI   WASEPRTR,C'.'           * Period\n         MVC   WASPACE,=H'04'          * Spacing(4)\n\n*\n** Get to parmstring content\n         L     R11,WAPRMPTR            * Point to parmlist ptr\n         LTR   R11,R11                 * Valid pointer?\n         BZ    PARMDONE                * No: exit with defaults\n         L     R11,0(,R11)             * Point to parmlist string\n         LTR   R11,R11                 * Valid pointer?\n         BZ    PARMDONE                * No: exit with defaults\n         LH    R10,0(R11)              * Get length from string\n         LA    R11,2(,R11)             * Point to first char in string\n         LTR   R10,R10                 * Valid length?\n         BZ    PARMDONE                * No: exit with defaults\n\n*\n** Loop to find all paramters\nPARMLOOP DS    0H\n         LTR   R10,R10                 * Any characters left in string?\n         BZ    PARMDONE                * Nope: we're done\n\n         CH    R10,=H'5'               * Enough chars left?\n         BL    ABEND004                * No: can't be right\n         CLC   0(5,R11),=CL5'ASCII'    * ASCII requested?\n         BE    PARMASC                 * Yes: go process\n         CLC   0(5,R11),=CL5'COMMA'    * COMMA requested?\n         BE    PARMCOM                 * Yes: Go process\n\n         CH    R10,=H'6'               * Enough chars left?\n         BL    ABEND004                * No: can't be right\n         CLC   0(6,R11),=CL6'EBCDIC'   * EBCDIC requested?\n         BE    PARMEBC                 * Yes: go process\n         CLC   0(6,R11),=CL6'PERIOD'   * PERIOD requested?\n         BE    PARMPER                 * Yes: go process\n\n         CH    R10,=H'7'               * Enough chars left?\n         BL    ABEND004                * No: can't be right\n         CLC   0(7,R11),=CL7'WASPACE'  * SPACING requested?\n         BE    PARMSPA                 * Yes: go process\n         B     ABEND004                * Invalid keyword\n\n*\n** ASCII requested\nPARMASC  DS    0H\n         MVI   WACHARS,C'A'            * Set charmode to Ascii\n         LA    R11,5(,R11)             * Advance pointer\n         SH    R10,=H'5'               * Reduce length\n         BO    ABEND005                * Signal internal error\n         BE    PARMDONE                * Nothing left to process\n         B     PARMNEXT                * Check for next comma\n\n*\n** EBCDIC requested\nPARMEBC  DS    0H\n         MVI   WACHARS,C'E'            * Set charmode to Ebcdic\n         LA    R11,6(,R11)             * Advance pointer\n         SH    R10,=H'6'               * Reduce length\n         BO    ABEND005                * Signal internal error\n         BE    PARMDONE                * Nothing left to process\n         B     PARMNEXT                * Check for next comma\n\n*\n** COMMA requested\nPARMCOM  DS    0H\n         MVI   WASEPRTR,C','           * Set separator to a comma\n         LA    R11,5(,R11)             * Advance pointer\n         SH    R10,=H'5'               * Reduce length\n         BO    ABEND005                * Signal internal error\n         BE    PARMDONE                * Nothing left to process\n         B     PARMNEXT                * Check for next comma\n\n*\n** PERIOD requested\nPARMPER  DS    0H\n         MVI   WASEPRTR,C'.'           * Set separator to a period\n         LA    R11,6(,R11)             * Advance pointer\n         SH    R10,=H'6'               * Reduce length\n         BO    ABEND005                * Signal internal error\n         BE    PARMDONE                * Nothing left to process\n         B     PARMNEXT                * Check for next comma\n\n*\n** SPACING(n|nn) requested\nPARMSPA  DS    0H\n         LA    R11,7(,R11)             * Advance pointer\n         SH    R10,=H'7'               * Reduce length\n         BO    ABEND005                * Signal internal error\n         BZ    ABEND005                * Nothing left to process\n* Ok, now check for opening parenthesis\n         CLI   0(R11),C'('             * Left parenthesis present?\n         BNE   ABEND004                * No: string in error\n         LA    R11,1(,R11)             * Advance pointer\n         SH    R10,=H'1'               * Reduce length\n         BO    ABEND005                * Signal internal error\n         BZ    ABEND005                * Nothing left to process\n* Ok, check for first digit\n         CLI   0(R11),C'0'             * Valid digit?\n         BL    ABEND004                * No: string in error\n         CLI   0(R11),C'9'             * Valid digit?\n         BH    ABEND004                * No: string in error\n         XR    R3,R3                   * Set spacing to 0\n         IC    R3,0(R11)               * Obtain firts digit\n         LA    R2,C'0'                 *\n         SR    R3,R2                   * Get numerical value\n         LA    R11,1(,R11)             * Advance pointer\n         SH    R10,=H'1'               * Reduce length\n         BO    ABEND005                * Signal internal error\n         BZ    ABEND005                * Nothing left to process\n* Ok, check for second digit (or closing parenthesis)\n         CLI   0(R11),C'0'             * Valid digit?\n         BL    PARMSPA2                * No: should be closing par.\n         CLI   0(R11),C'9'             * Valid digit?\n         BH    ABEND004                * No: string in error\n         LA    R2,10                   * Ok: valid digit, therefore\n         MR    R2,R3                   * R2*R3 --> R2R3 ==> R3=10n\n         IC    R2,0(R11)               * Get second digit\n         LA    R1,C'0'                 *\n         SR    R2,R1                   * Get numerical value\n         AR    R3,R2                   * And add to total\n         LA    R11,1(,R11)             * Advance pointer\n         SH    R10,=H'1'               * Reduce length\n         BO    ABEND005                * Signal internal error\n         BZ    ABEND005                * Nothing left to process\n* Ok, check for closing parenthesis\nPARMSPA2 DS    0H\n         STH   R3,WASPACE              * Save spacing from parm\n         CLI   0(R11),C')'             * Right parenthesis present?\n         BNE   ABEND004                * No: string in error\n         LA    R11,1(,R11)             * Advance pointer\n         SH    R10,=H'1'               * Reduce length\n         BO    ABEND005                * Signal internal error\n         BZ    PARMDONE                * Nothing left to process\n         B     PARMNEXT                * Check for next comma\n\n*\n** Start processing next parameter\nPARMNEXT DS    0H\n         CLI   0(R11),C','             * Comma present?\n         BNE   ABEND004                * No: string in error\n         LA    R11,1(,R11)             * Advance pointer\n         BCT   R10,PARMLOOP            * Reduce length and loop\n*                                      * Length is reduced to zero\n*                                      * i.e. parm ends with a comma\n*                                      * Allow this; just end\n\nPARMDONE DS    0H\n         L     R14,WAPRMRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\n         DROP  ,\n***********************************************************************\n*\n* Subroutine to setup various arrays\n*\n* Input : Workarea\n* Output: Workarea - PRIMES, WABIT2OF, WAMASKS, WAINTVBITS, WAINTVBYTS\n*\n* Register allocations:\n* R13 - workarea\n* R12 - codebase\n*\n***********************************************************************\nSETUP    DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         ST    R14,WASTPRET            * Save return address\n*\n** Step 1: Setup the PRIMES array using a simple sieve algorithm\n         MVI   WAPRIMES,X'01'          * Set all numbers to primes\n         MVC   WAPRIMES+1(#INTVAL-1),WAPRIMES\n*\n* Mark all even numbers as non-primes\n         LA    R14,2                   * First prime\n         LA    R15,WAPRIMES+#INTVAL-1  * End of interval\n         LA    R1,WAPRIMES             * Point start of interval\nLOOP2    DS    0H\n         MVI   0(R1),X'00'             * Mark as non-prime\n         BXLE  R1,R14,LOOP2            * Repeat for entire interval\n*\n* Mark all multiples of three as non-primes\n         LA    R14,3                   * Second prime\n         LA    R15,WAPRIMES+#INTVAL-1  * End of interval\n         LA    R1,WAPRIMES             * Point start of interval\nLOOP3    DS    0H\n         MVI   0(R1),X'00'             * Mark as non-prime\n         BXLE  R1,R14,LOOP3            * Repeat for entire interval\n*\n* Mark all multiples of five as non-primes\n         LA    R14,5                   * Third prime\n         LA    R15,WAPRIMES+#INTVAL-1  * End of interval\n         LA    R1,WAPRIMES             * Point start of interval\nLOOP5    DS    0H\n         MVI   0(R1),X'00'             * Mark as non-prime\n         BXLE  R1,R14,LOOP5            * Repeat for entire interval\n\n         AIF   (&#MAXP LT 7).SKIP7\n*\n* Mark all multiples of seven as non-primes\n         LA    R14,7                   * Third prime\n         LA    R15,WAPRIMES+#INTVAL-1  * End of interval\n         LA    R1,WAPRIMES             * Point start of interval\nLOOP7    DS    0H\n         MVI   0(R1),X'00'             * Mark as non-prime\n         BXLE  R1,R14,LOOP7            * Repeat for entire interval\n.SKIP7   ANOP\n\n*\n** Count the number of potential primes per interval\n** Also update the table to contain bit sequence numbers\n** And fill table WABIT2OF for translating bit nrs to offset in intval\n         LA    R14,1                   * Count each byte\n         LA    R15,WAPRIMES+#INTVAL-1  * End of interval\n         LA    R1,WAPRIMES             * Point start of interval\n         XR    R2,R2                   * Init counter\n         XR    R3,R3                   * To hold copy of each byte\n         LA    R4,WABIT2OF             * Point first table entry\nLOOPCT   DS    0H\n         IC    R3,0(R1)                * Obtain byte value\n         LA    R2,0(R3,R2)             * And add to total\n         LTR   R3,R3                   * This is a possible prime?\n         BZ    LOOPCTNX                * Yes: process next entry\n         STC   R2,0(R1)                * Insert bit sequence nr.\n         LR    R5,R1                   * Copy address\n         LA    R6,WAPRIMES             *\n         SR    R5,R6                   * Determine offset in table\n         STC   R5,0(R4)                * Save offset for bit nr\n         LA    R4,1(,R4)               * and point next wabit2of entry\nLOOPCTNX DS    0H\n         BXLE  R1,R14,LOOPCT           * Repeat for entire interval\n         STH   R2,WAINTVBITS           * Nr of candidates per interval\n         CLC   WAINTVBITS,=H'&CAND'    * Nr of candidates matches?\n         BNE   ABEND001                * On mismatch: Abend\n         LA    R2,7(,R2)               * Add for rounding up\n         SRA   R2,3                    * Divide by 8 to get bytes\n         STH   R2,WAINTVBYTS           * Save nr of bytes per interval\n\n*\n** Fill entire wamasks array\n         LH    R3,=X'FF7F'             * Mask for bit 1\n         LA    R2,8                    * Nr of bit masks required\n         LA    R1,WAMASKS              * Point to masks array\nMASKLOOP DS    0H\n         STC   R3,0(,R1)               * Save bit mask\n         SRA   R3,1                    * Shift 0-bit 1 position\n         LA    R1,1(,R1)               * Point next entry\n         BCT   R2,MASKLOOP             * Repeat for each mask\n\n         L     R14,WASTPRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\n         DROP  ,\n***********************************************************************\n*\n* Subroutine to find next prime to be processed\n*\n* Input : Workarea fields WAPRIMB+WAPRIMX = current prime\n*         Workarea PRIMPTR1 = pointer to first bitmap array\n*         R11 --> Current PRIMHDR\n* Output: R15=0: ok, R15=4: No more primes\n*         WAPRIMB+WAPRIMX updated\n*\n* Register allocations:\n* R13 - workarea\n* R12 - codebase\n* R11 - Current primhdr\n* R10 - Start of first bitstring array\n* R9  - Pointer in bitstring array\n* R8  - Highest interval number in area\n* R6/7- Copy of bitstring of current interval\n* R5  - Loop counter\n*\n***********************************************************************\nFNP      DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         USING PRIMHDR,R11\n         ST    R14,WAFNPRET            * Save return address\n*\n** First step: locate currently processed prime's bit location\n         L     R10,WAPRHDR1            * Point first Header area\n         L     R10,PRIMPTR-PRIMHDR(R10) * Point bitmap area\n         L     R5,WAFNPR5              * Reload bit index\n         L     R9,WAFNPR9              * Reload bitstring pointer\n         L     R8,PRIMLAST             * Get highest valid interval nr\n*\n** Load bitstring - may have been changed by removing non-primes!\n         AIF   (&#MAXP EQ 5).LOAD5\n         AIF   (&#MAXP EQ 7).LOAD7\n         MNOTE 12,'Unsupported value for #MAXP'\n.LOAD5   ANOP  ,\n         XR    R6,R6                   * Set sign bit\n         IC    R7,0(R9)                * Get interval bitstring\n         SLDA  R6,63-&CAND             * Move bitstring to hi-order\n*                                      *    excluding sign position\n         AGO   .LOADED\n.LOAD7   ANOP  ,\n         XR    R6,R6                   * Set sign bit to zero\n         ICM   R6,B'0011',0(R9)        * Load first 16 bits\n         ICM   R7,B'1111',2(R9)        * Load trailing 32 bits\n         SLDA  R6,63-&CAND             * Move bitstring to hi-order\n*                                      *    excluding sign position\n.LOADED  ANOP  ,\n         LA    R15,&CAND+1             * Determine nr of bits used up\n         SR    R15,R5                  * this is the nr of bits to\n         SLDA  R6,0(R15)               * shift out before searching\n         BCTR  R5,R0                   * Decrement nr of bits left\n\n*\n** Ok, we've found the right bit - search the next 1-bit\nFNPSRCH  DS    0H\n         SLDA  R6,1                    * Shift out next bit\n         BO    FNPFOUND                * One out = found next prime;\n*                                      * But index will be 1 too high\n         BZ    FNPNEXT                 * Remainder of bit string is 0\n         BCT   R5,FNPSRCH              * Go try next bit in string\n*\n* Bitstring has been emptied: load next string\nFNPNEXT  DS    0H\n         L     R1,WAPRIMB              * Get interval nr\n         LA    R1,1(,R1)               * Increment\n         ST    R1,WAPRIMB              * Save incremented interval nr\n         CR    R1,R8                   * Compare with highest valid\n         BH    FNPEND                  * End of strings area!\n         LA    R9,&CAND/8(,R9)         * Point next bitstring\n*        XR    R6,R6                   * Sign bit always 0 here\n         AIF   (&#MAXP EQ 5).LOAD_5\n         AIF   (&#MAXP EQ 7).LOAD_7\n         MNOTE 12,'Unsupported value for #MAXP'\n.LOAD_5  ANOP  ,\n         ICM   R7,B'0001',0(R9)        * Get interval bitstring\n         BZ    FNPNEXT                 * Skip interval: no primes\n         SLDA  R6,63-&CAND             * Move bitstring to hi-order\n*                                      *    excluding sign position\n         AGO   .LOADED_\n.LOAD_7  ANOP  ,\n         ICM   R6,B'0011',0(R9)        * Load first 16 bits\n         ICM   R7,B'1111',2(R9)        * Load trailing 32 bits\n         SLDA  R6,63-&CAND             * Move bitstring to hi-order\n*                                      *    excluding sign position\n         BZ    FNPNEXT                 * Skip interval: no primes\n.LOADED_ ANOP  ,\n\n*\n** Now we must scan the bitstring for a '1' value\n         LA    R5,&CAND                * Nr of bits in string\n         B     FNPSRCH                 * Ok: start scanning\n\n* We've found a one-bit, WAPRIMB is correct for the current interval\n* Determine new value for WAPRIMX\nFNPFOUND DS    0H                      * Index in R5 is 1 too high\n*                                      * R5 now in range 8 thru 1\n         LA    R1,&CAND                * Convert decremented loop ctr\n*                                      *   in range 0 thru 7\n         SR    R1,R5                   * to incremented index value\n         IC    R1,WABIT2OF(R1)         * for wabit2of array\n         STC   R1,WAPRIMX              * Save new excess value\n\n*\n** Save current status before leaving\n         ST    R5,WAFNPR5              * Save bit index\n         ST    R9,WAFNPR9              * Save bitstring address\n\n         XR    R15,R15                 * Set retcode 0\n         L     R14,WAFNPRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\nFNPEND   DS    0H                      * Not found handler\n         LA    R15,4                   * Set retcode 4\n         L     R14,WAFNPRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\n         DROP  ,\n***********************************************************************\n*\n* Square a Prime nr in excess-30/210 notation\n*\n* Input : Workarea fields WAPRIMB+WAPRIMX = current prime\n* Output: PRIMSQR+PRIMSQRX updated\n*         WADBLB+WADBLX updated\n*\n* Register allocations:\n* R13 - workarea\n* R12 - codebase\n* R11 - Current primhdr\n*\n* Number in excess notation = N*I+O\n* where n=interval nr, I=interval size, O=offset in interval\n*\n***********************************************************************\nSQP      DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         USING PRIMHDR,R11\n         ST    R14,WASQPRET            * Save return address\n\n*\n** First we'll take the current number\n         LA    R10,#INTVAL             * Get interval size\n         L     R9,WAPRIMB              * Get interval nr\n         XR    R1,R1                   * Wipe register\n         IC    R1,WAPRIMX              * To contain offset\n\n*\n** Calculate the double value\n         LA    R6,0(R9,R9)             * Double interval nr\n         LA    R7,0(R1,R1)             * Double offset\n         CR    R7,R10                  * Exceeds interval size?\n         BNH   SQPDBLOK                * If <= tehn no need to adjust\n         LA    R6,1(,R6)               * Increment interval count\n         SR    R7,R10                  * Decrement excess\nSQPDBLOK DS    0H\n         ST    R6,WADBLB               * Save intervals for DBL\n         STC   R7,WADBLX               * Save excess for DBL\n\n*\n** Calculate square = starting number\n         MR    R8,R10                  * R9*R10 --> R8R9\n         AR    R9,R1                   * Add offset\n         BO    ABEND003                * Abort if too large\n         MR    R8,R9                   * Take square into R8R9\n         DR    R8,R10                  * Divide by interval size\n         ST    R9,WACURB               * Save interval number\n         STC   R8,WACURX               * Save excess (remainder)\n\n         L     R14,WASQPRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\n         DROP  ,\n***********************************************************************\n*\n* Remove all multiples of current prime\n*\n* Register allocations:\n* R15    - work register\n* R14    - Size of interval\n* R13    - workarea\n* R12    - codebase\n* R11    - Current primhdr\n* R10    - Pointer to waprimes\n* R8/9   - Current number (base/excess)\n* R6/7   - Doubled prime (base/excess)\n* R5     - Doubled prime (base * interval-size in bytes)\n* R4     - pointer to current bitstring\n* R3     - Mask pointer for resetting non-primes\n* R2     - Byte index of bit within bitstring\n* R1     - work register / bit index of bit within byte\n* R0     - High interval number of bitstring area\n*\n***********************************************************************\nRMV      DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         USING PRIMHDR,R11\n         ST    R14,WARMVRET            * Save return address\n*\n** Setup registers\n         LA    R14,#INTVAL             * Interval size\n         LA    R10,WAPRIMES            * Point validity array\n         L     R8,WACURB               * Get current number (base)\n         XR    R9,R9                   *\n         IC    R9,WACURX               * Get current number (excess)\n         L     R6,WADBLB               * Get doubled prime (base)\n         XR    R7,R7                   *\n         IC    R7,WADBLX               * Get doubled prime (excess)\n         AIF   (&#MAXP EQ 7).PTR7\n.PTR5    ANOP  ,\n         L     R15,PRIMPTR             * Point to Primes area\n         LA    R4,0(R8,R15)            * Save current interval address\n         LR    R5,R6                   * Interval size = 1\n         AGO   .PTROK\n.PTR7    ANOP  ,\n         LH    R2,WAINTVBYTS           * Bytes per interval\n         LR    R3,R8                   * Current interval nr\n         MR    R2,R2                   * R2*R3 --> R2R3\n         L     R2,PRIMPTR              * Point to Primes area\n         LA    R4,0(R3,R2)             * Save current interval address\n         LR    R3,R6                   * WADBLB\n         LA    R2,&CAND/8              * Nr of bytes per interval\n         MR    R2,R2                   * R2*R3 --> R2R3\n         LR    R5,R3                   * Nr of bytes for WADBLB\n.PTROK   ANOP  ,\n         XR    R3,R3                   *\n         XR    R2,R2                   *\n         XR    R1,R1                   *\n         L     R0,PRIMLAST             * Get last interval to process\n\n*\n** Remove current number\nRMVNEXT  DS    0H\n         IC    R1,0(R9,R10)            * Get candidate index nr\n         LTR   R1,R1                   * Is it a one?\n         BZ    RMVADD                  * No candidate - go add\n         AIF   (&#MAXP NE 7).BITADROK\n         LR    R2,R1                   * Copy bit index in bitstring\n         SRA   R2,3                    * Create byte index\n         N     R1,=X'00000007'         * Create bit index within byte\n         BNZ   RMVADROK                * Bit address down to zero\n         BCTR  R2,R0                   * Adjust byte index\n         LA    R1,8                    *   and bit index too\nRMVADROK DS    0H\n.BITADROK ANOP ,\n         LA    R3,WAMASKS-1(R1)        * Point at mask to be used\n         LA    R15,0(R2,R4)            * Point byte to update\n         NC    0(1,R15),0(R3)          * Set current bit to 'noprime'\n\n*\n** Number has been processed: Add the doubled prime to find next number\nRMVADD   DS    0H\n         LA    R9,0(R9,R7)             * New offset\n         CR    R9,R14                  * Exceeds interval size?\n         BNH   RMVADD0                 * No: simple addition\n         LA    R8,1(R6,R8)             * New interval number\n         SR    R9,R14                  * New excess value\n         LA    R4,&CAND/8(R4,R5)       * New bitstring address\n         B     RMVADDOK                * Ok: done\nRMVADD0  DS    0H\n         LA    R8,0(R6,R8)             * New interval number\n         LA    R4,0(R4,R5)             * New bitstring address\nRMVADDOK DS    0H\n         CR    R8,R0                   * End of bitstring area?\n         BNH   RMVNEXT                 * No: remove this non-prime too\n\n         L     R14,WARMVRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\n         DROP  ,\n***********************************************************************\n*\n* Open Report file and setup for printing\n*\n* Register allocations:\n* R13 - Workarea\n* R12 - Codebase\n* R11 - PRIMHDR pointer (not used)\n* R10 - DCB pointer, record pointer\n*\n***********************************************************************\nINITRPT  DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         ST    R14,WARPTRET            * Save return address\n\n*\n** Open DCB - z390 will only open a DCB in static storage :-(\n         MVC   WASYSOUT(SYSOUT_LEN),SYSOUT * Copy DCB prototype\n         OPEN  (WASYSOUT,OUTPUT)       * Open Sysout\n\n*\n** Allocate and init print buffer\n         LH    R10,=AL2(#LPP*(#CPL+1)) * Nr of bytes for a page\n         ST    R10,WARPTBSZ            * Save buffer size\n         GETMAIN R,LV=(R10),LOC=ABOVE  * Acquire page buffer\n         LR    R10,R1                  * Set ptr to first line\n         ST    R10,WARPTBUF            * Save ptr to report buffer\n*\n         LR    R0,R1                   * Destination pointer\n         L     R1,WARPTBSZ             * Destination length\n         XR    R14,R14                 * Source pointer\n         XR    R15,R15                 * Source length\n         ICM   R15,B'1000',=C' '       * Filler byte\n         MVCL  R0,R14                  * Fill buffer with spaces\n*\n** Report pre-determined primes\n         MVC   0(1,R10),=C'2'          * Report 2 as a prime\n         BAL   R14,WRT                 * Go write the line\n         MVC   0(1,R10),=C'3'          * Report 3 as a prime\n         BAL   R14,WRT                 * Go write the line\n         MVC   0(1,R10),=C'5'          * Report 5 as a prime\n         BAL   R14,WRT                 * Go write the line\n         AIF   (&#MAXP EQ 5).INRPTOK\n         MVC   0(1,R10),=C'7'          * Report 7 as a prime\n         BAL   R14,WRT                 * Go write the line\n.INRPTOK ANOP  ,\n*\n         L     R14,WARPTRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\n         DROP  ,\n***********************************************************************\n*\n* Report a single prime\n*\n* Input : WAPRIMB+WAPRIMX\n* Output: Printed line on SYSOUT\n*\n* Register allocations:\n* R13 - Workarea\n* R12 - Codebase\n* R11 - Current primhdr area (not used)\n*\n***********************************************************************\nRPTPRIM  DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         ST    R14,WARPTRET            * Save return address\n*\n* Create correct number in binary\n         LA    R10,#INTVAL             * Interval size\n         L     R9,WAPRIMB              * Interval nr\n         MR    R8,R10                  * R9*R10 --> R8R9\n         XR    R10,R10                 *\n         IC    R10,WAPRIMX             * Get offset\n         AR    R9,R10                  * Add to number\n*\n* Convert to display format\n         CVD   R9,WAPRIMPK             *\n         MVC   WAPRIMNR,RPTPRIM_MASK   * Setup mask for edit/mark\n         EDMK  WAPRIMNR,WAPRIMPK       * Set R1 to first digit\n         OI    WAPRIMNR+L'WAPRIMNR-1,X'F0' * Remove sign\n*\n         L     R10,WARPTBUF            * Point printer buffer\n         LA    R15,WAPRIMNR+L'WAPRIMNR-2 * Point end of edited number\n         SR    R15,R1                  * Get nr of digits -1 for MVC\n         EX    R15,RPTPRIM_MOVE        * Move valid digits\n         BAL   R14,WRT\n*\n         L     R14,WARPTRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\nRPTPRIM_MASK DC (L'WAPRIMNR)X'20'      * Required nr of digit selectors\nRPTPRIM_MOVE DC 0H\n         MVC   0(0,R10),0(R1)          * Move edited number to line\n\n         DROP  ,\n***********************************************************************\n*\n* Write a line from the print buffer\n*\n* Register input:\n* R13 - Workarea\n* R12 - Codebase\n* R11 - First primhdr area (not used)\n* R10 - Record pointer\n*\n***********************************************************************\nWRT      DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         ST    R14,WAWRTRET            * Save return address\n*\n** Data is in EBCDIC - if ASCII requested: translate\n         CLI   WACHARS,C'A'            * Ascii requested?\n         BNE   WRTPUT\n         TR    0(#CPL,R10),EBC2ASC     * Change to ASCII\n         MVI   #CPL-1(R10),X'0D'       * Add carriage return\n         MVI   #CPL(R10),X'0A'         *   and newline characters\n\nWRTPUT   DS    0H\n         PUT   WASYSOUT,(R10)          * Write the line\n*\n** Re-init buffer with spaces\n         LR    R0,R10                  * Point start of buffer\n         L     R1,WARPTBSZ             * Destination length\n         XR    R14,R14                 * Source pointer\n         XR    R15,R15                 * Source length\n         ICM   R15,B'1000',=C' '       * Filler byte\n         MVCL  R0,R14                  * Fill buffer with spaces\n*\n         L     R14,WAWRTRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\n         DROP  ,\n***********************************************************************\n*\n* Close Report file\n*\n* Register allocations:\n* R13 - Workarea\n* R12 - Codebase\n* R11 - PRIMHDR area (not used)\n* R10 - DCB pointer\n*\n***********************************************************************\nENDRPT   DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         ST    R14,WARPTRET            * Save return address\n\n*\n** Release print buffer storage\n         L     R10,WARPTBUF            * Point buffer area\n         L     R9,WARPTBSZ             * Obtain area length\n         FREEMAIN RU,LV=(R9),A=(R10)   * Free report buffer area\n         SR    R0,R0                   * Set to zero\n         ST    R0,WARPTBUF             * Wipe pointer to buffer\n         ST    R0,WARPTBSZ             * And length\n\n*\n** Close DCB - z390 will only open/close a DCB in static storage :-(\n         CLOSE (WASYSOUT)              * Close Sysout\n\n         L     R14,WARPTRET            * Retrieve return address\n         BR    R14                     * Return to mainline\n\n         DROP  ,\n***********************************************************************\n*\n* To exit program - release all acquired storage\n*\n* Register allocations:\n* R13 - Workarea\n* R12 - Codebase\n* R11 - PRIMHDR area\n* R10 - bitmap pointer\n*\n***********************************************************************\nEXIT     DS    0H\n         USING WORKAREA,R13\n         USING BXAPRIM,R12\n         USING PRIMHDR,R11\n\n         ICM   R11,B'1111',WAPRHDR1    * Point first HDR area\n         BZ    EXIT_WA                 * No more HDR areas\n         ICM   R10,B'1111',PRIMPTR     * Point to bitmap area\n         BZ    EXIT_HDR                * Not allocated: free HDR\n         L     R9,PRIMLEN              * Get bitmap length\n         FREEMAIN RU,LV=(R9),A=(R10)   * Free bitmap area\n         XC    PRIMPTR,PRIMPTR         * Set ptr to zero\n         XC    PRIMLEN,PRIMLEN         *     and length as well\nEXIT_HDR DS    0H                      * Free HDR area\n         MVC   WAPRHDR1,PRIMNEXT       * Remove HDR from chain\n         LA    R9,PRIMHDR_LEN          *\n         FREEMAIN RU,LV=(R9),A=(R11)   * Free PRIMHDR area\n         B     EXIT                    * And go free next HDR\n         DROP  R11                     * HDR no longer addressable\n\nEXIT_WA  DS    0H                      * Workarea handling\n         L     R11,4(,R13)             * Get ptr to prev savearea\n         LA    R10,WORKAREA_LEN        * Size of area to be freed\n         FREEMAIN RU,LV=(R10),A=(R13)  * Free workarea\n         DROP  R13                     * End addressability of workarea\n         LR    R13,R11                 * Set prev savearea current\n         LM    R14,R12,12(R13)         * Reset all registers\n         XR    R15,R15                 * Set RC=0\n         BR    R14                     * Return\n\n         DROP  ,\n***********************************************************************\n         DS    0D\nEBC2ASC  DC    256X'00'\n         ORG   EBC2ASC+C' '\n         DC    X'20'                   * Ascii space\n         ORG   EBC2ASC+C'.'\n         DC    X'2E'                   * Ascii period\n         ORG   EBC2ASC+C','\n         DC    X'2C'                   * Ascii comma\n         ORG   EBC2ASC+C'0'\n         DC    X'30313233343536373839' * Ascii digits\n         ORG   ,\n\n&LRECL   SETA  #CPL+1\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=PM,LRECL=&LRECL,RECFM=FBA\nSYSOUT_LEN EQU *-SYSOUT\n         LTORG\n         END\n./ ADD NAME=BXATEST  0100-20110-20110-2315-00170-00170-00000-BXAASM  15\n*PROCESS FLAG(SUBSTR)\n*PROCESS RENT\n***********************************************************************\n*\n* BIXXAMS - Bixoft Cross Access Method Services\n* Licensed material - Property of B.V. Bixoft\n*\n* This program can be licensed or used on an as-is basis.\n* No warranty, neither implicit nor explicit, is given.\n* It remains your own responsibility to ensure the correct\n* working of this program in your installation.\n*\n* Suggestions for improvement are always welcome at\n* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n*\n* (C) Copyright B.V. Bixoft, 1999-2000\n***********************************************************************\n*\n* This program tests a condition string, which is passed as a\n* parameter on the exec statement. Syntax:\n* PARM='parm1 oper parm2'\n* where parm1 and parm2 are the comparands and\n* oper is either EQ or NE\n* The delimiters are single spaces\n*\n***********************************************************************\n         PGM   VERSION=V00R00M00,      * Version number                *\n               HDRTXT='Bixxams condition tester',                      *\n               WORKAREA=BXASAVE,       * Dynamic area                  *\n               SAVES=0,                * Internal save-areas           *\n               ABND=4090               * Abend code for BXATEST\n*\n* Assign some global registers\nR_RCD    EQUREG ,                      * Assign retcode register\n         USE   R_RCD,SCOPE=CALLED      * Set register in use\nR_TMP    EQU   R_RCD                   * retcode reg also temp reg\nR_PTR1   EQUREG ,                      * Ptr to first operand\n         USE   R_PTR1                  * Set register in use\nR_PTR2   EQUREG ,                      * Ptr to second operand\n         USE   R_PTR2                  * Set register in use\nR_PTROP  EQUREG ,                      * Ptr to operator\n         USE   R_PTROP                 * Set register in use\nR_LEN1   EQUREG ,                      * Length of first operand\n         USE   R_LEN1                  * Set register in use\nR_LEN2   EQUREG ,                      * Length of second operand\n         USE   R_LEN2                  * Set register in use\nR_LENOP  EQUREG ,                      * Length of operator\n         USE   R_LENOP                 * Set register in use\n*\n* Retrieve JCL parameter - if specified - and save in R_PTR1\n         IF    R1,Z                    * Pointer to parmlist valid?\n          ABND ,                       * No: issue error\n         ENDIF ,                       *\n         L     R_PTR1,0(,R1)           * Retrieve ptr to JCL parm\n         CLEAR (R_PTR1,*ADDR)          * Wipe hi-order bit\n         IF    R_PTR1,Z                * If it is invalid\n          ABND ,                       * issue error\n         ENDIF ,                       *\n         LH    R_LEN1,0(R_PTR1)        * First halfword is length\n         INC   R_PTR1,2                * Point start of text of parm\n         IF    R_LEN1,GT,256           * If it is too long\n          ABND ,                       * Issue error\n         ENDIF ,                       *\n         IF    R_LEN1,Z                * If no parm was specified\n          ABND ,                       * Issue error\n         ENDIF ,                       *\n*\n* Find first space in input string\n         L     R_TMP,=A(TRTAB1)        * Point table to be used\n         EXTRT 0(R_LEN1,R_PTR1),0(R_TMP) * Search first space\n         ABND  Z                       * Abend if no space found\n*\n* Set pointer to opcode\n         LA    R_PTROP,1(,R1)          * Point first byte of opcode\n         CPY   R_PTR2,R_PTROP          * Start of remainder of string\n*\n* Determine length of operand 1 and remainder of string\n         CPY   R_LEN2,R_LEN1           * Copy string length\n         CPY   R_TMP,R1                * Delimiter location\n         SR    R_TMP,R_PTR1            * Nr of chars in first operand\n         ABND  Z                       * Empty operand is error\n         CPY   R_LEN1,R_TMP            * Set length of operand 1\n         SR    R_LEN2,R_LEN1           * Remaining string length\n         DEC   R_LEN2                  *    after delimiter\n         IF    R_LEN2,LE,0             * Something left?\n          ABND ,                       * No: error\n         ENDIF ,                       *\n*\n* Determine length of opcode and remainder of string\n         L     R_TMP,=A(TRTAB1)        * Point table to be used\n         EXTRT 0(R_LEN2,R_PTR2),0(R_TMP) * Search next space\n         ABND  Z                       * Abend if no space found\n         CPY   R_LENOP,R1              * Point to delimiter\n         SR    R_LENOP,R_PTROP         * Nr of chars in operator\n         ABND  Z                       * No operator: error\n         LA    R_PTR2,1(,R1)           * Point after delimiter\n         SR    R_LEN2,R_LENOP          * Remove operator from length\n         DEC   R_LEN2                  *    and delimiter as well\n         IF    R_LEN2,LE,0             * Something left?\n          ABND ,                       * No: error\n         ENDIF ,                       *\n*\n* Determine length of operand 2\n         L     R_TMP,=A(TRTAB1)        * Point table to be used\n         EXTRT 0(R_LEN2,R_PTR2),0(R_TMP) * Search next space\n         IF    NZ                      * Delimiter found\n          CPY  R_LEN2,R1               * Set to delimiter location\n          SR   R_LEN2,R_PTR2           * Nr of chars in operand 2\n          ABND Z                       * Missing operand: error\n         ENDIF ,                       *\n*\n* Test for equal comparison?\n         IF    E,EXCLC,0(R_LENOP,R_PTROP),=CL2'EQ' * EQ comparison?\n          IF   R_LEN1,NE,R_LEN2        * Lengths should be equal\n           GOTO RETCD4                 * Return mismatch\n          ENDIF ,                      *\n          EXCLC 0(R_LEN1,R_PTR1),0(R_PTR2) * Operands equal?\n          GOTO RETCD0,E                * Yes: return ok\n          GOTO RETCD4                  * No: return mismatch\n         ENDIF ,\n*\n* Test for unequal comparison?\n         IF    E,EXCLC,0(R_LENOP,R_PTROP),=CL2'NE' * NE comparison?\n          IF   R_LEN1,NE,R_LEN2        * Lengths should be unequal\n           GOTO RETCD0                 * Return mismatch\n          ENDIF ,                      *\n          EXCLC 0(R_LEN1,R_PTR1),0(R_PTR2) * Operands unequal?\n          GOTO RETCD0,NE               * Yes: return ok\n          GOTO RETCD4                  * No: return mismatch\n         ENDIF ,\n*\n* Invalid operator\n         ABND  ,                       *\n*\n* Return 4 when specified condition is not met\nRETCD4   LABEL ,                       *\n         LA    R15,4                   * Set retcode\n         GOTO  EXIT                    *\n*\n* Return 0 when specified condition is met\nRETCD0   LABEL ,                       *\n         CLEAR R15                     * Set retcode\n*\nEXIT     LABEL ,                       * Exit point\n*\n* Release registers\n         DROP  R_PTR1                  *\n         DROP  R_PTR2                  *\n         DROP  R_PTROP                 *\n         DROP  R_LEN1                  *\n         DROP  R_LEN2                  *\n         DROP  R_RCD                   *\n*\n* And exit\n         RETRN RC=*                    * Quit this program\n***********************************************************************\n*\n* Constants etc.\n*\n***********************************************************************\n         LTORG ,                       *\n***********************************************************************\n*\n* Indirectly addressable Plists and constants\n*\n***********************************************************************\nTRTAB1   TRTAB ,                       * Select no characters          *\n               CHARS=(C' ')            * Except space\n*\n         END\n./ ADD NAME=BXAUNLD  0100-20110-20110-2315-00671-00671-00000-BXAASM  15\n*PROCESS FLAG(SUBSTR)\n*PROCESS RENT\n*\n* This program is free software; you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published by\n* the Free Software Foundation; either version 2 of the License\n* or (at your option) any later version.\n* The license text is available at the following internet addresses:\n* - http://www.bixoft.com/english/gpl.htm\n* - http://fsf.org\n* - http://opensource.org\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n* See the GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program; if not, write to either of the following:\n* the Free Software Foundation, Inc.      B.V. Bixoft\n* 59 Temple Place, Suite 330              Rogge 9\n* Boston, MA 02111-1307                   7261 JA Ruurlo\n* United States of America                The Netherlands\n*\n*                                         e-mail: bixoft@bixoft.nl\n*                                         phone : +31-6-22755401\n*\n***********************************************************************\n*\n* BIXXAMS - Bixoft Cross Access Method Services\n* Licensed material - Property of B.V. Bixoft\n*\n* This program can be licensed or used on an as-is basis.\n* No warranty, neither implicit nor explicit, is given.\n* It remains your own responsibility to ensure the correct\n* working of this program in your installation.\n*\n* Suggestions for improvement are always welcome at\n* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n*\n* (C) Copyright B.V. Bixoft, 1999-2000\n***********************************************************************\n*\n* This program converts a PDS or PDSE to a sequential dataset that\n*      contains a job stream, capable of recreating the dataset.\n*\n***********************************************************************\n         PGM   VERSION=V00R00M00,      * Version number                *\n               HDRTXT='Bixxams PDS unload program',                    *\n               WORKAREA=UNLD,          * Dynamic area                  *\n               SAVES=3,                * Internal save-areas           *\n               ABND=0130,              * Abend code for BXAUNLD        *\n               MAPS=($UNLD,            * Private control blocks        *\n               CVT,DCB,DCBE,JESCT,JFCB,IOB,PDS,PSA,TCB,TIOT)\n*\n* Assign some global registers\nR_RCD    EQUREG ,                      * Assign retcode register\n         USE   R_RCD,SCOPE=CALLED      * Set register in use\nR_TMP    EQU   R_RCD                   * Use for temp. also\nR_LEN    EQUREG ,                      * Assign length register\n         USE   R_LEN,SCOPE=CALLED      * Set register in use\n*\n* Retrieve JCL parameter - if specified - and save in UNLD\n         IF    R1,NZ                   * Parm ptr was passed?\n          L    R_TMP,0(,R1)            * Retrieve ptr to JCL parm\n          CLEAR (R_TMP,*ADDR)          * Wipe hi-order bit\n          IF   R_TMP,NZ                * If it is valid\n           LH  R_LEN,0(R_TMP)          * First halfword is length\n           IF  R_LEN,GT,8              * If it is too long\n            LA R_LEN,8                 * Truncate to 8 characters\n           ELSE ,                      * It might be too short\n            MVC UNLPARM,=CL8' '        * pre-fill with spaces\n           ENDIF ,                     *\n           IF  R_LEN,NZ                * If length is valid\n            EXMVC UNLPARM(R_LEN),2(R_TMP) * Copy parameter text\n            SETON UNLSPRM              * Set valid parm indicator\n           ENDIF ,                     *\n          ENDIF ,                      *\n         ENDIF ,                       *\n*\n* Create in-storage table of directory entries\n         EXSR  CRTDIR                  * Create directory table\n*\n* Process the library: read & copy all members\n         EXSR  RDLIB                   * Read all members in the lib\n*\n* Release the directory table\n         CPY   R_TMP,UNLDIRP           * Point table\n         CPY   R_LEN,UNLDIRSZ          * Retrieve length of table\n         STORAGE RELEASE,              * Free the directory table      *\n               LENGTH=(R_LEN),         *                               *\n               ADDR=(R_TMP)            *\n         CLEAR UNLDIRP                 * Wipe ptr to buffer\n         CLEAR UNLDIRFP                * Wipe ptr to free entry\n         CLEAR UNLDIRSZ                * And buffer size\n*\n* Release remaining registers\n         DROP  R_LEN                   *\n         DROP  R_RCD                   *\n*\n* And exit\n         RETRN RC=0                    * Quit this program\n***********************************************************************\n*\n* Routine to create an in-storage table of directrory entries\n*\n***********************************************************************\nCRTDIR   BEGSR ,                       *\n*\n* Create BPAM DCB and open it.\n         MVPL  UNLDCB1,UNL_DCB1        * Copy DCB for PDS\n         MVPL  UNLDCBE1,UNL_DCBE       * Copy DCBE for PDS\n         USE   DCB,UNLDCB1             * Set DCB fields addressable\n         USE   DCBE,UNLDCBE1           * Set DCBE fields addressable\n         SET   DCBDCBE,UNLDCBE1        * Point from DCB to DCBE\n         SET   DCBEEODA,LIST_EODAD     * Set ptr to end-of-member rtn\n*\n         MVPL  UNLOPEN,UNL_OPEN        * Copy OPEN parmlist\n         OPEN  (UNLDCB1,INPUT),        * Open the input dataset        *\n               MF=(E,UNLOPEN)          *\n         ABND  TSTRC,RCD=R_RCD         *\n*\n* Allocate buffer for reading dir blocks\n         LA    R_LEN,PDSDIRBS          * Room for 8 entries\n         STORAGE OBTAIN,               * Allocate storage              *\n               LENGTH=(R_LEN),         * for 8 entries                 *\n               LOC=ANY                 *\n         CPY   UNLBUFP,R1              * Save ptr to buffer\n         CPY   UNLBUFSZ,R_LEN          * Save length of buffer\n*\n* Allocate initial buffer for 8 directory entries\n         LA    R_LEN,8*PDS_LEN         * Room for 8 entries\n         STORAGE OBTAIN,               * Allocate storage              *\n               LENGTH=(R_LEN),         * for 8 entries                 *\n               LOC=ANY                 *\n         CPY   UNLDIRP,R1              * Save ptr to table\n         CPY   UNLDIRFP,R1             * Set ptr to 1st free element\n         CPY   UNLDIRSZ,R_LEN          * Save length of table\n*\n* Prepare for reading the directory\n         CPY   UNLBLKSI,DCBBLKSI       * Save blocksize\n         CPY   DCBBLKSI,PDSDIRBS       * Set blocksize for dir block\n         SETOF UNLSEOF                 * Signal No EOF reached yet\n*\n* Read directory - 1 block at a time to copy relevant dir-info\n         DO    UNTIL,UNLSEOF           * Repeat until EOF occurs\n          MVPL UNLDECB1,UNL_DECB       * Set up prototype DECB\n          CPY  R_TMP,UNLBUFP           * Point to block buffer\n          READ UNLDECB1,SF,            * Read forward                  *\n               UNLDCB1,(R_TMP),'S',    *   1 directory block into buf  *\n               MF=E                    *\n          CHECK UNLDECB1               * Wait for read to complete\n          EXSR CPYDIRB                 * Copy directory block\n         ENDDO ,                       *\n*\n* Restore correct blocksize to DCB\n         CPY   DCBBLKSI,UNLBLKSI       * Restore blocksize\n*\n* Release buffer area\n         CPY   R_TMP,UNLBUFP           * Point record buffer\n         CPY   R_LEN,UNLBUFSZ          * Retrieve length of buffer\n         STORAGE RELEASE,              * Free the directory buffer     *\n               LENGTH=(R_LEN),         *                               *\n               ADDR=(R_TMP)            *\n         CLEAR UNLBUFP                 * Wipe ptr to buffer\n         CLEAR UNLBUFSZ                * And buffer size\n*\n* Close input dataset\n         MVPL  UNLCLOS,UNL_CLOS        * Copy CLOSE plist\n         CLOSE (UNLDCB1),MF=(E,UNLCLOS) * Close the input dataset\n         ABND  TSTRC,RCD=R_RCD         *\n*\n         ENDSR ,                       *\n***********************************************************************\n*\n* Routine to copy direntries from a dirblock to our own table\n*\n***********************************************************************\nCPYDIRB  BEGSR ,                       *\n*\nR_PDS    EQUREG ,                      * Assign ptr to PDS entry\n         USE   PDS,R_PDS               * Set PDS direntry addressable\n         CPY   R_PDS,UNLBUFP           * Point to dir buffer\n*\nR_PDSEND EQUREG ,                      * Assign ptr to end of PDS block\n         USE   R_PDSEND                * Set register in use\n         CPY   R_PDSEND,R_PDS          * Point to buffer\n         AH    R_PDSEND,0(R_PDS)       * Nr of occupied bytes in 1st H\n         INC   R_PDS,2                 * Point to first entry\n*\n* Process all entries in the current directory block\n         DO    WHILE,R_PDS,LT,R_PDSEND * For each valid entry\n          CPY  R1,R_PDS                * Ptr to entry to be copied\n          EXSR CPYDIRE                 * Copy a single direntry\n          LA   R_LEN,TTRNUSLN          * Load mask for length bits\n          IC   R_TMP,TTRNINDC          * Retrieve indicator byte\n          NR   R_LEN,R_TMP             * Extract length indication\n          SLL  R_LEN,1                 * Length of user data in bytes\n          LA   R_PDS,PDS_LEN(R_LEN,R_PDS) * Point next entry\n         ENDDO ,                       *\n*\n         ENDSR ,                       *\n***********************************************************************\n*\n* Routine to copy a single direntry to our table\n*\n***********************************************************************\nCPYDIRE  BEGSR ,                       *\n*\n         USE   PDS,R_PDS               * Set PDS direntry addressable\n         CPY   R_PDS,R1                * Point to current entry\n*\nR_TABEND EQUREG ,                      * Allocate ptr to end of table\n         USE   R_TABEND                * Set reg in use\n         CPY   R_TABEND,UNLDIRP        * Point to dir table\n         A     R_TABEND,UNLDIRSZ       * Point past table\n*\nR_TAB    EQUREG ,                      * Assign current entry pointer\n         USE   R_TAB                   * Set poiner reg in use\n         CPY   R_TAB,UNLDIRFP          * Point current free entry\n*\n* If last entry: set EOF indicator\n         IF    E,CLC,PDSNAME,=8X'FF'   * Terminating entry is all X'FF'\n          SETON UNLSEOF                * Set end-of-directory\n         ENDIF ,                       *\n*\n* If our table is full we must enlarge it\n         IF    NOT,UNLSEOF,AND,        * Entry is valid?               *\n               R_TAB,EQ,R_TABEND       * And table is full?\n          L    R_LEN,UNLDIRSZ          * Retrieve current size\n          SLL  R_LEN,1                 * Double current size\n          STORAGE OBTAIN,              * Allocate new buffer           *\n               LENGTH=(R_LEN),         *                               *\n               LOC=ANY                 *\n          CPY  R_TAB,R1                * Save ptr to new table\n          CPY  R_LEN,UNLDIRSZ          * Reload old table size\n          CPY  R_TMP,UNLDIRP           * Point existing table\n          CPY  ((R_TAB),(R_LEN)),((R_TMP),(R_LEN)) *\n          STORAGE RELEASE,             * Free the old buffer           *\n               LENGTH=(R_LEN),         *                               *\n               ADDR=(R_TMP)            *\n          CPY  UNLDIRP,R_TAB           * Save ptr to start of new table\n          AR   R_TAB,R_LEN             * Add old size, point free entry\n          CPY  UNLDIRFP,R_TAB          * Set current free pointer\n          SLL  R_LEN,1                 * Size of new table\n          CPY  UNLDIRSZ,R_LEN          * Set new table size\n         ENDIF ,                       *\n*\n* Copy entry to table, advance free entry pointer\n         IF    NOT,UNLSEOF             * A valid entry to process?\n          MVC  0(PDS_LEN,R_TAB),PDS    * Copy entry to table\n          INC  R_TAB,PDS_LEN           * Point next entry\n          CPY  UNLDIRFP,R_TAB          * Update free entry ptr\n         ENDIF ,                       *\n*\n         ENDSR ,                       *\n***********************************************************************\n*\n* Routine to read thru all members in sequence\n*\n***********************************************************************\nRDLIB    BEGSR ,                       *\n*\n* Create BSAM DCB and open it.\n         MVPL  UNLDCB2,UNL_DCB2        * Copy DCB for PDS\n         MVPL  UNLDCBE2,UNL_DCBE       * Copy DCBE for PDS\n         USE   DCB,UNLDCB2             * Set DCB fields addressable\n         USE   DCBE,UNLDCBE2           * Set DCBE fields addressable\n         SET   DCBDCBE,UNLDCBE2        * Point from DCB to DCBE\n         SET   DCBEEODA,LIST_EODAD     * Set ptr to end-of-member rtn\n*\n         MVPL  UNLOPEN,UNL_OPEN        * Copy OPEN parmlist\n         OPEN  (UNLDCB2,INPUT),        * Open the input dataset        *\n               MF=(E,UNLOPEN)          *\n         ABND  TSTRC,RCD=R_RCD         *\n*\n* RECFM must be F, FB, V, or VB\n         IF    NM,TM,DCBRECFM,DCBRECF+DCBRECV * Either bit must be on\n          ABND ,                       * RECFM=U: error\n         ENDIF ,\n*\n* Allocate a buffer\n         CPY   R_LEN,DCBBLKSI          * Retrieve block size\n         STORAGE OBTAIN,               * Allocate buffer for block     *\n               LENGTH=(R_LEN),         *                               *\n               LOC=ANY                 *\n         CPY   UNLBUFP,R1              * Save ptr to buffer\n         CPY   UNLBUFSZ,R_LEN          * and save length of buffer\n*\n* Create output DCB and open it.\n         MVPL  UNLDCBO,UNL_DCBO        * Copy DCB for output dataset\n         MVPL  UNLOPEN,UNL_OPEN        * Copy OPEN parmlist\n         OPEN  (UNLDCBO,OUTPUT),       * Open the output dataset       *\n               MF=(E,UNLOPEN)          *\n         ABND  TSTRC,RCD=R_RCD         *\n*\n* Create jcl statements\n         EXSR  CRTJCL                  *\n*\n* Set up table pointer\n         USE   PDS,R_TAB               * Set direntry addressable\n         CPY   R_TAB,UNLDIRP           * Point first entry\n*\n* Loop thru direntries in table\n         DO    WHILE,R_TAB,LT,UNLDIRFP * UNLDIRFP points unused entry\n          CPY  R1,R_TAB                * Set ptr\n          EXSR RDMEM                   * Read the member\n          INC  R_TAB,PDS_LEN           * Point next entry\n         ENDDO ,                       *\n*\n* Create terminating control statement for IEBUPDTE\n         L     R_TMP,=A(CNTLEND)       * Point prototype end statement\n         MVC   UNLBUFO,0(R_TMP)        * Copy prototype control line\n         PUT   UNLDCBO,UNLBUFO         * Write control line to output\n*\n* Create terminating JCL statement for SYSIN dataset\n         CLEAR UNLBUFO,C' '            * Pre-fill with spaces\n         MVC   UNLBUFO(2),=C'()'       * Insert eof-marker for sysin\n         PUT   UNLDCBO,UNLBUFO         * Write JCL line to output\n*\n* Close output dataset\n         MVPL  UNLCLOS,UNL_CLOS        * Copy CLOSE plist\n         CLOSE (UNLDCBO),MF=(E,UNLCLOS) * Close the input dataset\n         ABND  TSTRC,RCD=R_RCD         *\n*\n* Close input dataset\n         MVPL  UNLCLOS,UNL_CLOS        * Copy CLOSE plist\n         CLOSE (UNLDCB2),MF=(E,UNLCLOS) * Close the input dataset\n         ABND  TSTRC,RCD=R_RCD         *\n*\n         ENDSR ,                       *\n***********************************************************************\n*\n* Routine to read 1 member from the library\n*\n* On entry R1 points to the current directory entry in the table\n*\n***********************************************************************\nRDMEM    BEGSR ,                       *\n*\n* Set up addressability\n         USE   PDS,R_TAB               * Set direntry addressable\n         CPY   R_TAB,R1                * Point current entry\n*\n         USE   DCB,UNLDCB2             * Set DCB fields addressable\n         USE   DECB,UNLDECB2           * Set DECB fields addressable\n*\n* Create control statement for IEBUPDTE\n         L     R_TMP,=A(CNTLADD)       * Point prototype add statement\n         MVC   UNLBUFO,0(R_TMP)        * Copy prototype control line\n         MVC   UNLBUFO+12(8),PDSNAME   * Insert member name\n         PUT   UNLDCBO,UNLBUFO         * Write control line to output\n*\n* Point to start of member\n         CPY   UNLTTRN,PDSTTRN         * Copy TTR value for member\n         CLEAR UNLTTRN_.TTRNINDC       * Append hex zeroes\n         POINT UNLDCB2,UNLTTRN         * Point to start of dataset\n         ABND  TSTRC,RCD=R_RCD         * Abend on error\n*\n* Loop thru all member blocks\n         SETOF UNLSEOF                 * Reset end-of-member bit\n         DO    UNTIL,UNLSEOF           * Until end-of-member\n          MVPL UNLDECB2,UNL_DECB       * Set up prototype DECB\n          CPY  R_TMP,UNLBUFP           * Point to block buffer\n          READ UNLDECB2,SF,            * Read forward                  *\n               UNLDCB2,(R_TMP),'S',    *   1 member data block         *\n               MF=E                    *\n          CHECK UNLDECB2               * Wait for read to complete\n          IF   NOT,UNLSEOF             * A valid block was read?\n* For Fixed records: use IOB to determine end-of-buffer\n* For Variable records: use BDW to determine end-of-buffer\n           IF  DCBRECF                 * Fixed or FB records?\n            CPY R_LEN,DCBBLKSI         * Load block length\nR_IOB       EQUREG ,                   * Assign IOB ptr\n            USE IOBSTDRD,R_IOB         * Set IOB addressable\n            CPY R_IOB,DECIOBPT         * And point to IOB\n            CPY R_TMP,IOBRESCT         * Load residual count\n            DROP R_IOB                 * IOB no longer needed\n            SR R_LEN,R_TMP             * Nr of bytes in input buffer\n            A  R_LEN,UNLBUFP           * Point past end-of-data\n            ST R_LEN,UNLBUFND          * Save end-of-block ptr\n            CPY UNLRCDP,UNLBUFP        * Set ptr to first record\n           ELSE  ,                     * Must be variable or VB records\nR_BUF       EQUREG ,                   * Assign buffer ptr\n            USE BDW,R_BUF              * Address block descriptor word\n            CPY R_BUF,UNLBUFP          * Point to filled buffer\n            CPY R_LEN,BDWBLKLN         * Retrieve length of block\n            A  R_LEN,UNLBUFP           * Point past end-of-data\n            ST R_LEN,UNLBUFND          * Save end-of-block ptr\n            INC R_BUF,BDW_LEN          * Point to first RDW in buffer\n            CPY UNLRCDP,R_BUF          * Set ptr to current record\n            DROP R_BUF                 * Buffer ptr no longer needed\n           ENDIF ,                     *\n           EXSR CPYBLK                 * Go copy a block to output\n          ENDIF ,                      *\n         ENDDO ,                       *\n*\n         ENDSR ,                       *\n***********************************************************************\n*\n* Routine to copy a whole block of data to the output dataset\n*\n***********************************************************************\nCPYBLK   BEGSR ,                       *\n*\n* Set up to loop thru the block\nR_REC    EQUREG ,                      * Assign record ptr\n         USE   RDW,R_REC               * Assume RECFM=V or VB\n*\n         USE   DCB,UNLDCB2             * Set DCB fields addressable\n*\n* For each record in the buffer:\n* - determine length, advance current record pointer\n* - copy record, truncate if too long, pad if too short\n* - write record to output dataset\n*\n         DO    WHILE,UNLRCDP,LT,UNLBUFND * For each record in buffer\n*         Determine length, advance current record pointer\n          CPY  R_REC,UNLRCDP           * Copy ptr to current record\n          IF   DCBRECF                 * Fixed record length:\n           CPY R_LEN,DCBLRECL          * Retrieve rec length from DCB\n           CPY R_TMP,R_REC             * Copy current record ptr\n           INC R_TMP,(R_LEN)           * Point to next record\n           CPY UNLRCDP,R_TMP           * Update current record ptr\n          ELSE ,                       * Variable records:\n           CPY R_LEN,RDWRECLN          * Retrieve length of record\n           CPY R_TMP,R_REC             * Copy current record pointer\n           INC R_TMP,(R_LEN)           * Point next record in buffer\n           CPY UNLRCDP,R_TMP           * Update current record pointer\n           INC R_REC,RDW_LEN           * Point to start of record data\n           DEC R_LEN,RDW_LEN           * And adjust data length\n          ENDIF ,                      *\n*         Copy record, truncate if too long, pad if too short\n          IF   R_LEN,GE,UNLBUFO_LEN    * Truncating move needed?\n           MVC UNLBUFO,0(R_REC)        * Copy 80 bytes of input data\n          ELSE ,                       * Need to pad\n           CLEAR UNLBUFO               * Pre-fill with blanks\n           EXMVC UNLBUFO(R_LEN),0(R_REC) * Copy whole input record\n          ENDIF ,                      *\n*         Write record to output dataset\n          PUT  UNLDCBO,UNLBUFO         * Write record to output dataset\n         ENDDO ,                       *\n*\n         ENDSR ,                       *\n***********************************************************************\n*\n* Routine to create jcl statements\n*\n***********************************************************************\nCRTJCL   BEGSR ,                       *\n*\n* Set input DCB subfields addressable\n         USE   DCB,UNLDCB2             * Opened input DCB\n*\n* Retrieve datasetname from JFCB\nR_TCBT   EQUREG TEMP=YES               * Assign TCB pointer\n         CPY   R_TCBT,PSATOLD          * Load TCB-address\n         USE   TCB,R_TCBT              * And set it addressable\nR_TIOT   EQUREG ,                      * Assign TIOT pointer\n         CPY   R_TIOT,TCBTIO           * Retrieve TIOT-pointer\n         DROP  R_TCBT                  * TCB no longer needed\n         LTHU  R_LEN,DCBTIOT           * Load TIOT-offset from DCB\n         AR    R_TIOT,R_LEN            * Point to TIOT entry\n         USE   TIOENTRY,R_TIOT         * Set TIOT entry addressable\n*\n* Find JFCB to retrieve dataset name\n         LTA24 R1,TIOEJFCB             * Load JFCB token value\n         DROP  R_TIOT                  * TIOENTRY no longer needed\n*\n         CLEAR UNLEPAX                 * Clear SWAREQ's EPA\nEPA      USE   UNLD.UNLEPAX            * Set subfields addressable\n         STA24 R1,EPA.SWVA             * Put JFCB token into EPAX\n         SET   UNLEPAPT,UNLEPAX        * Set up pointer to EPAX\n         MVPL  UNLSWARQ,UNL_SWARQ      * Copy prototype SWAREQ plist\n         SWAREQ FCODE=RL,              * Request a read-locate         *\n               UNAUTH=YES,             *   in unauthorized mode        *\n               EPA=UNLEPAPT,           *   using this EPA pointer      *\n               MF=(E,UNLSWARQ)         *   and this parmlist\n         CPY   R_RCD,R15               * Save retcode\n*\n* Check validity of the results\n         IF    R_RCD,NZ,OR,            * Skip ORCB if SWAREQ erred     *\n               EPA.SWLVERS,NZ,OR,      * Only version 0 supported      *\n               NOT,EPA.SWJFCBID        * Returned block is JFCB?\n          ABND ,                       * Then we cannot proceed!\n         ENDIF ,                       *\nR_JFCB   EQUREG ,                      * Assign JFCB pointer\n         LT    R_JFCB,EPA.SWBLKPTR     * Valid JFCB pointer?\n         ABND  Z                       * No: abend\n         DROP  EPA                     * UNLEPAX no longer needed\n*\n* R_JFCB now points to the JFCB for the opened DCB\n         USE   JFCB,R_JFCB             * Set JFCB addressable.\n         MVC   UNLDSN,JFCBDSNM         * Copy data set name\n         CPY   UNLPQTY,JFCBPQTY        * Primary allocation\n         CPY   UNLSQTY,JFCBSQTY        * Secondary allocation\n         CPY   UNLDQTY,JFCBDQTY        * Directory allocation\n         CASE  JFCBCYL                 * Cylinder allocation?\n          SETON UNLALCYL               *\n         CASE  JFCBTRK                 * Track allocation?\n          SETON UNLALTRK               *\n         ELSE  ,                       * Must be block allocation\n          SETON UNLALBLK               *\n         ENDCASE ,                     *\n         DROP  R_JFCB                  * JFCB no longer needed\n*\n* Find length of data set name\n         L     R_TMP,=AL4(TRTAB1)      * Point to TRT table\n         TRT   UNLDSN(44),0(R_TMP)     * Find first blank in name\n         IF    Z                       * No blanks found:\n          CPY  UNLDSNLN,44             * Length is 44\n         ELSE  ,                       * R1 points first blank\n          LA   R_TMP,UNLDSN            * Point to start of name\n          SR   R1,R_TMP                * R1 points invalid char\n          CPY  UNLDSNLN,R1             * Save length of DSN\n         ENDIF ,                       *\n*\n* Determine allocation sizes\n         IF    UNLSQTY,Z               * Secondary quantity valid?\n          CPY  UNLSQTY,10              * No, assume 10\n         ENDIF ,                       *\n*\n         IF    UNLPQTY,Z               * Secondary quantity valid?\n          CPY  R_TMP,UNLSQTY           * No, use secondary space\n          LA   R_TMP,0(R_TMP,R_TMP)    *     times two\n          CPY  UNLPQTY,R_TMP           *     for primary space\n         ENDIF ,                       *\n*\n         IF    UNLDQTY,Z               * Directory quantity valid?\nR_EVEN    EQUREG ODD=R_ODD,PAIR=YES,TEMP=YES * Assign pair of regs\n          CPY  R_ODD,UNLDIRFP          * Point free entry\n          S    R_ODD,UNLDIRP           * Minus start = size of table\n          CLEAR R_EVEN                 * Make it a 64-bit integer\n          LA   R_LEN,12*5              * 5 direntries into a dir block\n          DR   R_EVEN,R_LEN            * using 4 gives some spare room\n          INC  R_ODD,5                 * Add room for 25 more entries\n          CPY  UNLDQTY,R_ODD           *\n         ENDIF ,                       *\n*\n* Set up to loop thru the JCL records\n         USE   R_REC                   * Set register in use\n         L     R_REC,=A(JCLTAB)        * Point to JCL table\n         DO    WHILE,R_REC,LT,=A(JCLTAB_END) * For each statement\n          MVC  UNLBUFO,0(R_REC)        * Copy record to buffer\n*         +1 triggers insertion of dataset name\n          CASE E,CLC,UNLBUFO(2),=C'+1' * Type 1 substitution?\n           MVC UNLBUFO(2),=C'//'       * Make it a decent JCL statement\n           CPY R_LEN,UNLDSNLN          * Retrieve length of DSN\n           EXMVC UNLBUFO+20(R_LEN),UNLDSN * Insert data set name\n           LA  R_TMP,UNLBUFO+20(R_LEN) * Point beyond dataset name\n           MVI 0(R_TMP),C','           * Insert comma\n*         +2 triggers insertion of allocation parameters\n          CASE E,CLC,UNLBUFO(2),=C'+2' * Type 2 substitution?\n           MVC UNLBUFO(2),=C'//'       * Make it a decent JCL statement\n*          Allocate cylinders, tracks or blocks?\n           CASE UNLALCYL,NEST=YES      * Allocation is in cylinders?\n            MVC UNLBUFO+22(3),=C'CYL'  *\n            MVC UNLBUFO+25(52),UNLBUFO+27 * Remove superfluous chars\n            MVC UNLBUFO+78(2),=CL2'  ' * and add trailing spaces\n           CASE UNLALTRK               * Allocation in tracks?\n            MVC UNLBUFO+22(3),=C'TRK'  *\n            MVC UNLBUFO+25(52),UNLBUFO+27 * Remove superfluous chars\n            MVC UNLBUFO+78(2),=CL2'  ' * and add trailing spaces\n           CASE UNLALBLK               * Allocation in blocks?\n            CPY R_TMP,UNLBLKSI         * Load block size\n            CVD R_TMP,UNLCVD           * Make result decimal\n            UNPK UNLQTY,UNLCVD         * Make result readable\n            OI  UNLQTY+L'UNLQTY-1,C'0' * Without a sign\n            MVC UNLBUFO+22(L'UNLQTY),UNLQTY * And insert into JCL line\n           ELSE ,                      * Programming error!\n            ABND ,                     *\n           ENDCASE ,                   *\n*          Insert primary allocation quantity\n           CPY  R_TMP,UNLPQTY          * Load primary qty\n           CVD  R_TMP,UNLCVD           * Make result decimal\n           UNPK UNLQTY,UNLCVD          * Make result readable\n           OI   UNLQTY+L'UNLQTY-1,C'0' * Without a sign\n           MVC  UNLBUFO+29(L'UNLQTY),UNLQTY * And insert into JCL line\n*          Insert secondary allocation quantity\n           CPY  R_TMP,UNLSQTY          * Load secondary qty\n           CVD  R_TMP,UNLCVD           * Make result decimal\n           UNPK UNLQTY,UNLCVD          * Make result readable\n           OI   UNLQTY+L'UNLQTY-1,C'0' * Without a sign\n           MVC  UNLBUFO+35(L'UNLQTY),UNLQTY * And insert into JCL line\n*          Insert directory allocation quantity\n           CPY  R_TMP,UNLDQTY          * Load directory qty\n           CVD  R_TMP,UNLCVD           * Make result decimal\n           UNPK UNLQTY,UNLCVD          * Make result readable\n           OI   UNLQTY+L'UNLQTY-1,C'0' * Without a sign\n           MVC  UNLBUFO+41(L'UNLQTY),UNLQTY * And insert into JCL line\n*         +3 triggers insertion of step name\n          CASE E,CLC,UNLBUFO(2),=C'+3' * Type 3 substitution?\n           MVC UNLBUFO(2),=C'//'       * Make it a decent JCL statement\n           IF  UNLSPRM                 * Valid parm was passed?\n            MVC UNLBUFO+2(8),UNLPARM   * Insert step name from parm\n           ENDIF ,                     *\n          ENDCASE ,                    *\n*         Write completed JCL record\n          PUT  UNLDCBO,UNLBUFO         * Write record to output dataset\n          INC  R_REC,80                * Point next record\n         ENDDO ,                       *\n         DROP  R_REC                   * Record ptr done\n*\n         ENDSR ,                       *\n***********************************************************************\n*\n* Constants etc.\n*\n***********************************************************************\n         LTORG ,                       *\n***********************************************************************\n*\n* Out-of-line routines\n*\n***********************************************************************\n*\n* EOF-routine for input dataset\nLIST_EODAD LABEL H                     *\n         SETON UNLSEOF                 * Signal EOF reached\n         BR    R14                     * Return to main line\n***********************************************************************\n*\n* Indirectly addressable Plists and constants\n*\n***********************************************************************\nUNL_DCB1 DCB   DDNAME=SYSUT1,          * Prototype for DCB             *\n               DSORG=PO,               * Directory is sequential       *\n               DCBE=UNL_DCBE,          * EODAD in DCBE                 *\n               MACRF=R                 * Read blocks only\n*\nUNL_DCB2 DCB   DDNAME=SYSUT1,          * Prototype for DCB             *\n               DSORG=PS,               * Directory is sequential       *\n               DCBE=UNL_DCBE,          * EODAD in DCBE                 *\n               MACRF=RP                * Read blocks only\n*\nUNL_DCBO DCB   DDNAME=SYSUT2,          * Prototype for DCB             *\n               DSORG=PS,               * output is sequential          *\n               MACRF=PM                * use Put in Move mode\n*\nUNL_DCBE DCBE  EODAD=LIST_EODAD        * DCBE to be used with DCB1/DCB2\n*\n         READ  UNL_DECB,SF,MF=L        * Read forward DCB1/DCB2\n*\nUNL_OPEN OPEN  (0,INPUT),MF=L          * Prototype for OPEN\nUNL_CLOS CLOSE (0),MF=L                * Prototype for CLOSE\n*\nUNL_SWARQ SWAREQ EPA=0,                * Prototype for SWAREQ parmlist *\n               MF=L                    *\n*\nTRTAB1   TRTAB NOTUC,                  * Uppercase chars are valid     *\n               CHARS=(0,1,2,3,4,5,6,7,8,9, * Digits are valid too      *\n               C'#',C'@',C'$',C'.')    * Other valid chars\n*\nJCLTAB   DS    0D                      * Table with JOB jcl\n*                   012345678901234567890123456789012345678901234567890\n         DC    CL80'//BXALOAD  JOB  ,''Load BIXOFT libs'',CLASS=A'\n         DC    CL80'//*'\n         DC    CL80'//* This job loads source libraries for BIXXAMS'\n         DC    CL80'//*'\n         DC    CL80'+3CRTLIB   EXEC PGM=IEBUPDTE,PARM=NEW'\n         DC    CL80'+1SYSUT2   DD   DSN='\n         DC    CL80'+2             SPACE=(00080,(00020,00010,00005)),'\n         DC    CL80'//             DISP=(MOD,CATLG),DSORG=PO,'\n         DC    CL80'//             RECFM=FB,LRECL=80,UNIT=SYSALLDA'\n         DC    CL80'//SYSPRINT DD   DUMMY'\n         DC    CL80'//SYSIN    DD   DATA,DLM=''()'''\nJCLTAB_END EQU *\nCNTLADD  DC    CL80'./ ADD NAME='\nCNTLEND  DC    CL80'./ ENDUP'\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCL": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01 \\x11\\x0f\\x01 \\x11\\x0f#\\x03\\x01\\x9d\\x01\\x9d\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-04-19T00:00:00", "modifydate": "2020-04-19T23:03:46", "lines": 413, "newlines": 413, "modlines": 0, "user": "SAMPLIB"}, "text": "./ ADD NAME=$DOC     0100-20110-20110-2301-00016-00016-00000-BIXJCL  01\n//*\n//* This JCL library contains the following members:\n//* ASMxxxxx will assemble source BXAxxxxx and link it into the\n//*          load modules where it belongs\n//* BLDxxxxx will link load module BXAxxxxx after assembling\n//*          all sources that go into it\n//* CRTxxxxx will create a load module required by the BLDxxxxx\n//*          jobs\n//* LKDxxxxx will link load module BXAxxxxx\n//*\n//* Special members:\n//* $DOC     this member\n//* BLDALL   will submit all BLDxxxxx jobs to create the complete\n//*          OBJ lib and all load modules for the GOODIES.PROD libs\n//* TSTxxxxx will run the various test programs\n//*\n./ ADD NAME=ASMCOPY  0100-20110-20110-2301-00015-00015-00000-BIXJCL  02\n//ASMCOPY  JOB (7355,710,&SYSUID),'Assemble Source',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke assembler\n//ASMCOPY  EXEC BXAASM,MEMB=BXACOPY,PROJ=GOODIES,LVL=PROD\n//*\n//* Compile ok? Invoke linkage editor\n//         IF   (ASMCOPY.ASMPROD.RC LT 4) THEN\n//LNKCOPY  EXEC BXALKED,MEMB=BXACOPY,PROJ=GOODIES,LVL=PROD\n//         ENDIF\n./ ADD NAME=ASMIO    0100-20110-20110-2301-00015-00015-00000-BIXJCL  02\n//ASMIO    JOB (7355,710,&SYSUID),'Assemble Source',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke assembler\n//ASMIO    EXEC BXAASM,MEMB=BXAIO,PROJ=GOODIES,LVL=PROD\n//*\n//* Compile ok? Invoke linkage editor\n//         IF   (ASMIO.ASMPROD.RC LT 4) THEN\n//LNKIO    EXEC BXALKED,MEMB=BXAIO,PROJ=GOODIES,LVL=PROD\n//         ENDIF\n./ ADD NAME=ASMIO00  0100-20110-20110-2301-00017-00017-00000-BIXJCL  02\n//ASMIO00  JOB (7355,710,&SYSUID),'Assemble Source',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke assembler\n//ASMIO00  EXEC BXAASM,MEMB=BXAIO00,PROJ=GOODIES,LVL=PROD,\n//             PARM.ASMPROD=(OBJECT,NODECK,TERM,\n//             'SYSPARM(NODEBUG,OPT)')\n//*\n//* Compile ok? Invoke linkage editor\n//         IF   (ASMIO00.ASMPROD.RC LT 4) THEN\n//LNKIO00  EXEC BXALKED,MEMB=BXAIO00,PROJ=GOODIES,LVL=PROD\n//         ENDIF\n./ ADD NAME=ASMLOWPG 0100-20110-20110-2301-00015-00015-00000-BIXJCL  02\n//ASMLOWPG JOB (7355,710,&SYSUID),'Assemble Source',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke assembler\n//ASMLOWPG EXEC BXAASM,MEMB=BXALOWPG,PROJ=GOODIES,LVL=PROD\n//*\n//* Compile ok? Invoke linkage editor\n//         IF   (ASMLOWPG.ASMPROD.RC LT 4) THEN\n//LNKLOWPG EXEC BXALKED,MEMB=BXALOWPG,PROJ=GOODIES,LVL=PROD\n//         ENDIF\n./ ADD NAME=ASMMAPS  0100-20110-20110-2301-00021-00021-00000-BIXJCL  02\n//ASMMAPS  JOB (7355,710,&SYSUID),'Assemble Source',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke assembler - with BIXXAMS maclib added\n//ASMMAPS  EXEC BXAASM,MEMB=BXAMAPS,PROJ=GOODIES,LVL=PROD\n//ASMPROD.SYSLIB DD\n//         DD\n//         DD\n//         DD\n//         DD   DSN=&HLQ..BIXXAMS.PROD.MACLIB,DISP=SHR\n//         DD   DSN=&HLQ..BIXXAMS.PROD.MACLIB,DISP=SHR\n//*\n//* Compile ok? Invoke linkage editor\n//         IF   (ASMMAPS.ASMPROD.RC LT 4) THEN\n//LNKMAPS  EXEC BXALKED,MEMB=BXAMAPS,PROJ=GOODIES,LVL=PROD\n//         ENDIF\n./ ADD NAME=ASMTEST  0100-20110-20110-2301-00015-00015-00000-BIXJCL  02\n//ASMTEST  JOB (7355,710,&SYSUID),'Assemble Source',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke assembler\n//ASMTEST  EXEC BXAASM,MEMB=BXATEST,PROJ=GOODIES,LVL=PROD\n//*\n//* Compile ok? Invoke linkage editor\n//         IF   (ASMTEST.ASMPROD.RC LT 4) THEN\n//LNKTEST  EXEC BXALKED,MEMB=BXATEST,PROJ=GOODIES,LVL=PROD\n//         ENDIF\n./ ADD NAME=ASMUNLD  0100-20110-20110-2301-00015-00015-00000-BIXJCL  02\n//ASMUNLD  JOB (7355,710,&SYSUID),'Assemble Source',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke assembler\n//ASMUNLD  EXEC BXAASM,MEMB=BXAUNLD,PROJ=GOODIES,LVL=PROD\n//*\n//* Compile ok? Invoke linkage editor\n//         IF   (ASMUNLD.ASMPROD.RC LT 4) THEN\n//LNKUNLD  EXEC BXALKED,MEMB=BXAUNLD,PROJ=GOODIES,LVL=PROD\n//         ENDIF\n./ ADD NAME=BLDALL   0100-20110-20110-2301-00024-00024-00000-BIXJCL  02\n//BLDALL   JOB (7355,710,&SYSUID),'Build GOODIES',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Submit build-jobs for all GOODIES.PROD loadmods\n//* DO need to submit CRT-jobs first: these loadmods might not yet\n//*    exist in the GOODIES.PROD environment\n//* DO make sure the JOB cards specify a class with only 1 initiator!\n//*\n//SUBMIT   EXEC PGM=IKJEFT1A\n//SYSTSPRT DD   SYSOUT=*\n//SYSTSIN  DD   *\n           SUBMIT 'TCL2KOR.BXA.GOODIES.PROD.JCL(CRTCOPY)'\n           SUBMIT 'TCL2KOR.BXA.GOODIES.PROD.JCL(CRTTEST)'\n           SUBMIT 'TCL2KOR.BXA.GOODIES.PROD.JCL(BLDIO)'\n           SUBMIT 'TCL2KOR.BXA.GOODIES.PROD.JCL(BLDIO00)'\n           SUBMIT 'TCL2KOR.BXA.GOODIES.PROD.JCL(BLDLOWPG)'\n           SUBMIT 'TCL2KOR.BXA.GOODIES.PROD.JCL(BLDMAPS)'\n           SUBMIT 'TCL2KOR.BXA.GOODIES.PROD.JCL(BLDUNLD)'\n/*\n./ ADD NAME=BLDCOPY  0100-20110-20110-2301-00011-00011-00000-BIXJCL  02\n//BLDCOPY  JOB (7355,710,&SYSUID),'Build Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Create objects and loadmod\n//ASMCOPY  EXEC BXAASM,MEMB=BXACOPY,PROJ=GOODIES,LVL=PROD\n//LKDCOPY  EXEC BXALKED,MEMB=BXACOPY,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=BLDIO    0100-20110-20110-2301-00011-00011-00000-BIXJCL  02\n//BLDIO    JOB (7355,710,&SYSUID),'Build Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Create objects and loadmod\n//ASMIO    EXEC BXAASM,MEMB=BXAIO,PROJ=GOODIES,LVL=PROD\n//LKDIO    EXEC BXALKED,MEMB=BXAIO,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=BLDIO00  0100-20110-20110-2301-00012-00012-00000-BIXJCL  02\n//BLDIO00  JOB (7355,710,&SYSUID),'Build Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Create objects and loadmod\n//ASMIO00  EXEC BXAASM,MEMB=BXAIO00,PROJ=GOODIES,LVL=PROD,\n//             PARM.ASMPROD=(OBJECT,NODECK,TERM,'SYSPARM(NODEBUG,OPT)')\n//LKDIO00  EXEC BXALKED,MEMB=BXAIO00,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=BLDLOWPG 0100-20110-20110-2301-00011-00011-00000-BIXJCL  02\n//BLDLOWPG JOB (7355,710,&SYSUID),'Build Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Create objects and loadmod\n//ASMLOWPG EXEC BXAASM,MEMB=BXALOWPG,PROJ=GOODIES,LVL=PROD\n//LKDLOWPG EXEC BXALKED,MEMB=BXALOWPG,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=BLDMAPS  0100-20110-20110-2301-00017-00017-00000-BIXJCL  02\n//BLDMAPS  JOB (7355,710,&SYSUID),'Build Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Create objects and loadmod\n//ASMMAPS  EXEC BXAASM,MEMB=BXAMAPS,PROJ=GOODIES,LVL=PROD\n//ASMPROD.SYSLIB DD\n//         DD\n//         DD\n//         DD\n//         DD   DSN=&HLQ..BIXXAMS.PROD.MACLIB,DISP=SHR\n//         DD   DSN=&HLQ..BIXXAMS.PROD.MACLIB,DISP=SHR\n//LKDMAPS  EXEC BXALKED,MEMB=BXAMAPS,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=BLDTEST  0100-20110-20110-2301-00011-00011-00000-BIXJCL  02\n//BLDTEST  JOB (7355,710,&SYSUID),'Build Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Create objects and loadmod\n//ASMTEST  EXEC BXAASM,MEMB=BXATEST,PROJ=GOODIES,LVL=PROD\n//LKDTEST  EXEC BXALKED,MEMB=BXATEST,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=BLDUNLD  0100-20110-20110-2301-00011-00011-00000-BIXJCL  02\n//BLDUNLD  JOB (7355,710,&SYSUID),'Build Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Create objects and loadmod\n//ASMUNLD  EXEC BXAASM,MEMB=BXAUNLD,PROJ=GOODIES,LVL=PROD\n//LKDUNLD  EXEC BXALKED,MEMB=BXAUNLD,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=CRTCOPY  0100-20110-20110-2301-00011-00011-00000-BIXJCL  02\n//CRTCOPY  JOB (7355,710,&SYSUID),'Create Initial',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Create object and loadmod for BX8COPY\n//ASMCOPY  EXEC BXAASMA,MEMB=BXACOPY,PROJ=GOODIES,LVL=PROD\n//LKDCOPY  EXEC BXAIEWL,MEMB=BXACOPY,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=CRTTEST  0100-20110-20110-2301-00011-00011-00000-BIXJCL  02\n//CRTTEST  JOB (7355,710,&SYSUID),'Create Initial',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//* Create object and loadmod for BX8TEST\n//ASMTEST  EXEC BXAASMA,MEMB=BXATEST,PROJ=GOODIES,LVL=PROD\n//LKDTEST  EXEC BXAIEWL,MEMB=BXATEST,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=LKDCOPY  0100-20110-20110-2301-00010-00010-00000-BIXJCL  02\n//LKDCOPY  JOB (7355,710,&SYSUID),'Linkedit Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke linkage editor\n//LKDCOPY  EXEC BXALKED,MEMB=BXACOPY,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=LKDIO    0100-20110-20110-2301-00010-00010-00000-BIXJCL  02\n//LKDIO    JOB (7355,710,&SYSUID),'Linkedit Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke linkage editor\n//LKDIO    EXEC BXALKED,MEMB=BXAIO,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=LKDIO00  0100-20110-20110-2301-00010-00010-00000-BIXJCL  02\n//LKDIO00  JOB (7355,710,&SYSUID),'Linkedit Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke linkage editor\n//LKDIO00  EXEC BXALKED,MEMB=BXAIO00,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=LKDLOWPG 0100-20110-20110-2301-00010-00010-00000-BIXJCL  02\n//LKDLOWPG JOB (7355,710,&SYSUID),'Linkedit Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke linkage editor\n//LKDLOWPG EXEC BXALKED,MEMB=BXALOWPG,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=LKDMAPS  0100-20110-20110-2301-00010-00010-00000-BIXJCL  02\n//LKDMAPS  JOB (7355,710,&SYSUID),'Linkedit Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke linkage editor\n//LKDMAPS  EXEC BXALKED,MEMB=BXAMAPS,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=LKDTEST  0100-20110-20110-2301-00010-00010-00000-BIXJCL  02\n//LKDTEST  JOB (7355,710,&SYSUID),'Linkedit Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke linkage editor\n//LKDTEST  EXEC BXALKED,MEMB=BXATEST,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=LKDUNLD  0100-20110-20110-2301-00010-00010-00000-BIXJCL  02\n//LKDUNLD  JOB (7355,710,&SYSUID),'Linkedit Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//BXAPROCS JCLLIB ORDER=(&HLQ..GOODIES.TEST.PROCLIB,\n//             &HLQ..GOODIES.PROD.PROCLIB)\n//*\n//*             Invoke linkage editor\n//LKDUNLD  EXEC BXALKED,MEMB=BXAUNLD,PROJ=GOODIES,LVL=PROD\n./ ADD NAME=TSTCOPY  0100-20110-20110-2301-00022-00022-00000-BIXJCL  02\n//TSTCOPY  JOB (7355,710,&SYSUID),'Test Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//JOBLIB   DD   DSN=&HLQ..GOODIES.PROD.LINKLIB,DISP=SHR\n//*\n//* Test BPAM member copy\n//BXACOPYP EXEC PGM=BXACOPY,PARM='MEMBER=TSTCOPY'\n//SYSUDUMP DD   SYSOUT=*\n//INPUT    DD   DSN=&HLQ..GOODIES.TEST.JCL,DISP=SHR\n//         DD   DSN=&HLQ..GOODIES.PROD.JCL,DISP=SHR\n//OUTPUT   DD   DSN=&&JCLMEM1,SPACE=(TRK,(10,10),RLSE),\n//             DCB=(LRECL=80,BLKSIZE=27920),UNIT=SYSALLDA\n//*\n//* Test BSAM concatenation copy\n//BXACOPY  EXEC PGM=BXACOPY,PARM='DATSET=PS'\n//SYSUDUMP DD   SYSOUT=*\n//INPUT    DD   DSN=&HLQ..GOODIES.TEST.JCL(TSTCOPY),DISP=SHR\n//         DD   DSN=&HLQ..GOODIES.PROD.JCL(TSTCOPY),DISP=SHR\n//OUTPUT   DD   DSN=&&JCLMEM2,SPACE=(TRK,(10,10),RLSE),\n//             DCB=(LRECL=80,BLKSIZE=27920),UNIT=SYSALLDA\n./ ADD NAME=TSTLOWPG 0100-20110-20110-2301-00009-00009-00000-BIXJCL  02\n//TSTLOWPG JOB (7355,710,&SYSUID),'Test Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//JOBLIB   DD   DSN=&HLQ..GOODIES.PROD.LINKLIB,DISP=SHR\n//BXALOWPG EXEC PGM=BXALOWPG\n//BXASNAP  DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n./ ADD NAME=TSTMAPS  0100-20110-20110-2301-00009-00009-00000-BIXJCL  02\n//TSTMAPS  JOB (7355,710,&SYSUID),'Test Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//JOBLIB   DD   DSN=&HLQ..GOODIES.PROD.LINKLIB,DISP=SHR\n//BXAMAPS  EXEC PGM=BXAMAPS\n//BXASNAP  DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n./ ADD NAME=TSTUNLD  0100-20110-20110-2301-00015-00015-00000-BIXJCL  02\n//TSTUNLD  JOB (7355,710,&SYSUID),'Test Loadmod',NOTIFY=&SYSUID,\n//             CLASS=5,MSGCLASS=T,MSGLEVEL=(1,1),REGION=0M\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//JOBLIB   DD   DSN=&HLQ..GOODIES.PROD.LINKLIB,DISP=SHR\n//*\n//DELETE   EXEC PGM=IEFBR14\n//EHRMAN   DD   DSN=&HLQ..EHRMAN.UNLOAD,DISP=(OLD,DELETE,DELETE)\n//*\n//BXAUNLD  EXEC PGM=BXAUNLD,PARM='EHRMAN'\n//SYSUT1   DD   DSN=&HLQ..EHRMAN.PROD.ASM,DISP=OLD\n//SYSUT2   DD   DSN=&HLQ..EHRMAN.UNLOAD,DISP=(NEW,CATLG,CATLG),\n//             SPACE=(TRK,(10,10),RLSE),UNIT=SYSALLDA,\n//             DCB=(LRECL=80,BLKSIZE=27920,RECFM=FB)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LKED": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00%\\x01 \\x11\\x0f\\x01 \\x11\\x0f##\\x00F\\x00F\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-04-19T00:00:00", "modifydate": "2020-04-19T23:23:25", "lines": 70, "newlines": 70, "modlines": 0, "user": "SAMPLIB"}, "text": "./ ADD NAME=BXACOPY  0100-20110-20110-2322-00007-00007-00000-BXALKED 29\n*\n* This load module has no specific requirements\n*\n SETOPT     PARM(REUS=REFR)\n INCLUDE OBJECTS(BXACOPY)\n ENTRY           BXACOPY\n NAME            BXACOPY(R)\n./ ADD NAME=BXAIO    0100-20110-20110-2322-00021-00021-00000-BXALKED 29\n*\n* This load module has no specific requirements\n*\n* All entry points of this module are AMODE ANY (either 24 or 31)\n*                                     RMODE dependent on AMODE\n* Because AMODE(ANY),RMODE(ANY) is not supported the module\n* is created with AMODE(31),RMODE(ANY).\n* If, however, the module is called with AMODE(24) no problems\n* should occur, provided the module is loaded into storage below 16M.\n*\n SETOPT     PARM(REUS=SERIAL)\n INCLUDE OBJECTS(BXAIO)\n ENTRY           BXAIO\n ALIAS           BXAIOCCD\n ALIAS           BXAIOCPD\n ALIAS           BXAIOCCX\n ALIAS           BXAIOPDD\n ALIAS           BXAIOCSC\n ALIAS           BXAIOACD\n ALIAS           BXAIOSVD\n NAME            BXAIO(R)\n./ ADD NAME=BXAIO00  0100-20110-20110-2322-00007-00007-00000-BXALKED 29\n*\n* This load module has no specific requirements\n*\n SETOPT     PARM(REUS=RENT)\n INCLUDE OBJECTS(BXAIO00)\n ENTRY           BXAIO00\n NAME            BXAIO00(R)\n./ ADD NAME=BXALOWPG 0100-20110-20110-2322-00007-00007-00000-BXALKED 30\n*\n* This load module has no specific requirements\n*\n SETOPT     PARM(REUS=REFR)\n INCLUDE OBJECTS(BXALOWPG)\n ENTRY           BXALOWPG\n NAME            BXALOWPG(R)\n./ ADD NAME=BXAMAPS  0100-20110-20110-2322-00007-00007-00000-BXALKED 30\n*\n* This load module has no specific requirements\n*\n SETOPT     PARM(REUS=REFR)\n INCLUDE OBJECTS(BXAMAPS)\n ENTRY           BXAMAPS\n NAME            BXAMAPS(R)\n./ ADD NAME=BXATEST  0100-20110-20110-2322-00007-00007-00000-BXALKED 30\n*\n* This load module has no specific requirements\n*\n SETOPT     PARM(REUS=REFR)\n INCLUDE OBJECTS(BXATEST)\n ENTRY           BXATEST\n NAME            BXATEST(R)\n./ ADD NAME=BXAUNLD  0100-20110-20110-2322-00007-00007-00000-BXALKED 30\n*\n* This load module has no specific requirements\n*\n SETOPT     PARM(REUS=REFR)\n INCLUDE OBJECTS(BXAUNLD)\n ENTRY           BXAUNLD\n NAME            BXAUNLD(R)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACJCL": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01 \\x11\\x0f\\x01 \\x11\\x0f#1\\x01P\\x01P\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-04-19T00:00:00", "modifydate": "2020-04-19T23:31:14", "lines": 336, "newlines": 336, "modlines": 0, "user": "SAMPLIB"}, "text": "./ ADD NAME=$DOC     0100-20110-20110-2330-00022-00022-00000-BXAMJCL 11\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n=======================================================================\nThe following control blocks are available for DCL\n\nControl block name Mapmacro Description\n------------------ -------- -------------------------------------------\nCOPY               MAP$COPY BXACOPY private workarea\nUNLD               MAP$UNLD BXAUNLD private workarea\n./ ADD NAME=MAP$COPY 0100-20110-20110-2330-00135-00135-00000-BXAMJCL 11\n.**********************************************************************\n.*\n.* BIXXAMS - Bixoft Cross Access Method Services\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999-2001\n**********************************************************************\n         MACRO\n.*\n.* Mapping macro for copy utility's workarea\n.*\n&LABEL   MAP$COPY &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAP$COPY       * Map has been generated?\n         GBLA  &BXA_RC                 * Returncode\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).SKIP\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'COPY').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAP$COPY).SKIP\n&BXA_MAC_MAP$COPY SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_COPY\n&BXA_CB_COPY SETC '$COPY'\n.*\n         MNOTE *,'Generating DSECTs for Copy workarea'\n*\n* DSECT for copy workarea\n*\nCOPY     DSECT ,                       *\nCOPYSAVE DCL   BXASAVE                 *\n*\n* Pointers\nCOPYBUFI DS    A                       * Location of input buffer\nCOPYBUFO DS    A                       * Location of output buffer\nCOPYREC  DS    A                       * Pointer to current record\nCOPYBUFE DS    A                       * Pointer past last record\n*\n* Member name\nCOPYMBNM DS    CL8                     * Member name\n*\n* Status bits\nCOPYSTAT DCL   *BITS,                  * Status bits                   *\n               COPYRTRY,               * 0: Retry executed             *\n               COPYEOF,                * 1: EOF reached on input data  *\n               COPYMEM,                * 2: MEMBER copy requested      *\n               COPYDS,                 * 3: Dataset copy requested     *\n               COPYPS                  * 4: Physical Sequential copy\n***********************************************************************\nCOPYWORK DS    0D                      * Align\n*\n* Plist for ESTAE in COPYWORK\n         ORG   COPYWORK\nCOPYESTAE ESTAE 0,                     * Space for ESTAE plist         *\n               MF=L                    *\nCOPYESTAE_LEN EQU *-COPYESTAE\n*\n* DCB for BPAM input dataset in COPYWORK\n         ORG   COPYWORK                *\nCOPYDCBP DCB   DDNAME=INPUT,           * Input dataset                 *\n               DSORG=PO,               * Read directory sequentially   *\n               DCBE=0,                 * DCBE will be used             *\n               MACRF=R                 * Dataset will be read only\nCOPYDCBP_LEN EQU *-COPYDCBP            *\n*\n* DCB for BSAM input dataset in COPYWORK\n         ORG   COPYWORK                *\nCOPYDCBS DCB   DDNAME=INPUT,           * Input dataset                 *\n               DSORG=PS,               * Physical sequential           *\n               DCBE=0,                 * DCBE will be used             *\n               MACRF=R                 * Dataset will be read only\nCOPYDCBS_LEN EQU *-COPYDCBS            *\n*\n* DCBE for BPAM/BSAM access follows DCB\n         ORG   ,                       * Position after longest DCB\nCOPYDCBE DCBE  EODAD=0                 * EODAD routine\nCOPYDCBE_LEN EQU *-COPYDCBE            *\n*\n* DCB for QSAM output dataset follows input DCB + DCBE\nCOPYDCBO DCB   DDNAME=OUTPUT,          * Output dataset                *\n               DSORG=PS,               *                               *\n               MACRF=PM                * with PUT in move-mode\nCOPYDCBO_LEN EQU *-COPYDCBO            *\n*\n* Add OPEN plist in COPYWORK\n         ORG   ,                       * Set to current end of COPYWORK\nCOPYOPEN OPEN  (0,INPUT),MF=L          * Reserve room for OPEN plist\nCOPYOPEN_LEN EQU *-COPYOPEN            *\n*\n* CLOSE plist reuses OPEN area\n         ORG   COPYOPEN                *\nCOPYCLOS CLOSE (0),MF=L                * Reserve room for CLOSE plist\nCOPYCLOS_LEN EQU *-COPYCLOS           *\n*\n* DECB for reading with BPAM/BSAM reuses OPEN area\n         ORG   COPYOPEN                *\n         READ  COPYDECB,SF,MF=L        * Create DECB for reading\nCOPYDECB_LEN EQU *-COPYDECB            *\n*\n* Reset location counter to end of COPYWORK\n         ORG   ,                       *\n         DS    0D                      * Align for internal Save areas\nCOPY_LEN EQU   *-COPY                  *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.SKIP    ANOP\n         MEND\n./ ADD NAME=MAP$UNLD 0100-20110-20110-2330-00176-00176-00000-BXAMJCL 11\n.**********************************************************************\n.*\n.* BIXXAMS - Bixoft Cross Access Method Services\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n**********************************************************************\n         MACRO\n.*\n.* Mapping macro for PDS unload workarea\n.*\n&LABEL   MAP$UNLD &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAP$UNLD       * Map has been generated?\n         GBLA  &BXA_RC                 * Returncode\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).SKIP\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'UNLD').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAP$UNLD).SKIP\n&BXA_MAC_MAP$UNLD SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_UNLD\n&BXA_CB_UNLD SETC '$UNLD'\n.*\n         GENMAPS (DECB,EPAL,PDS,SAVE)\n.*\n         MNOTE *,'Generating DSECTs for Unload workarea'\n*\n* DSECT for unload workarea\n*\nUNLD     DSECT ,                       *\nUNLSAVE  DCL   BXASAVE                 *\n*\n* Status bits\nUNLSTAT  DCL   *BITS,                  * Status bits                   *\n               UNLSEOF,                * 0: EOF reached on input data  *\n               UNLSPRM                 * 1: Valid parm was on JCL\n*\nUNLBLKSI DS    H                       * Block size\nUNLTTRN  DCL   TTRN,UNLTTRN_           * TTRn value for POINT\n*\n* Pointer fields\nUNLDIRP  DS    A                       * Pointer to directory table\nUNLDIRFP DS    A                       * Pointer to free entry in table\nUNLDIRSZ DS    F                       * Size of dir table in bytes\n*\nUNLBUFP  DS    A                       * Pointer to record buffer\nUNLBUFSZ DS    F                       * Buffer size\nUNLBUFND DS    A                       * Ptr to logical end-of-buffer+1\nUNLRCDP  DS    A                       * Pointer to current record\n*\n* JCL fields\nUNLPARM  DS    CL8                     * Job and step name\nUNLDSN   DS    CL44                    * Data set name\nUNLDSNLN DS    H                       * Data set name length in bytes\nUNLCTRI  DCL   *BITS,                  * Allocation type               *\n               UNLALCYL,               * 0: Cylinder request           *\n               UNLALTRK,               * 1: Track request              *\n               UNLALBLK                * 2: Block request\nUNLPQTY  DS    F                       * Primary alloc quantity\nUNLSQTY  DS    F                       * Secondary alloc quantity\nUNLDQTY  DS    F                       * Directory alloc quantity\n***********************************************************************\nUNLWORK  DS    0D                      * Align\n*\n* DCB for BPAM access in UNLWORK\n         ORG   UNLWORK                 *\nUNLDCB1  DCB   DDNAME=SYSUT1,          * Input dataset                 *\n               DSORG=PO,               * Read directory sequentially   *\n               DCBE=0,                 * DCBE will be used             *\n               MACRF=R                 * Dataset will be read only\nUNLDCB1_LEN EQU *-UNLDCB1              *\n*\n* DCB for BSAM access overlays UNLDCB1\n         ORG   UNLDCB1                 *\nUNLDCB2  DCB   DDNAME=SYSUT1,          * Input dataset                 *\n               DSORG=PS,               * Read directory sequentially   *\n               DCBE=0,                 * DCBE will be used             *\n               MACRF=RP                * Dataset will be read only\nUNLDCB2_LEN EQU *-UNLDCB2              *\n*\n* DCB for QSAM output follows preceding DCB2\nUNLDCBO  DCB   DDNAME=SYSUT2,          * Output dataset                *\n               DSORG=PS,               *                               *\n               MACRF=PM                * with PUT in move-mode\nUNLDCBO_LEN EQU *-UNLDCBO              *\n*\n* DCBE for BPAM access follows DCB\n         ORG   ,                       * Set to current end of UNLWORK\nUNLDCBE1 DCBE  EODAD=0                 * EODAD routine\nUNLDCBE1_LEN EQU *-UNLDCBE1            *\n*\n* DCBE for BSAM access overlays UNLDCBE1\n         ORG   UNLDCBE1                *\nUNLDCBE2 DCBE  EODAD=0                 * EODAD routine\nUNLDCBE2_LEN EQU *-UNLDCBE2            *\n*\n* Add OPEN plist in UNLWORK\n         ORG   ,                       * Set to current end of UNLWORK\nUNLOPEN  OPEN  (0,INPUT),MF=L          * Reserve room for OPEN plist\nUNLOPEN_LEN EQU *-UNLOPEN              *\n*\n* CLOSE plist reuses OPEN area\n         ORG   UNLOPEN                 *\nUNLCLOS  CLOSE (0),MF=L                * Reserve room for CLOSE plist\nUNLCLOS_LEN EQU *-UNLCLOS              *\n*\n* DECB for reading with BPAM reuses OPEN area\n         ORG   UNLOPEN                 *\n         READ  UNLDECB1,SF,MF=L        * Create DECB for reading\nUNLDECB1_LEN EQU *-UNLDECB1            *\n*\n* DECB for reading with BSAM reuses OPEN area\n         ORG   UNLOPEN                 * Set to reuse UNLOPEN area\n         READ  UNLDECB2,SF,MF=L        * Create DECB for reading\nUNLDECB2_LEN EQU *-UNLDECB1            *\n*\n* Plist for SWAREQ in UNLWORK\n         ORG   ,                       *\nUNLSWARQ SWAREQ EPA=UNLEPAPT,          * SWAREQ parmlist goes here     *\n               MF=L                    *\nUNLSWARQ_LEN EQU *-UNLSWARQ            * Length of plist\n*\n         DS    0F                      * Re-align on fullword\nUNLEPAPT DS    A                       * Pointer to UNLEPAX\nUNLEPAX  DCL   EPAX,*NOUSE             * EPAX follows UNLSWARQ\nUNLEPAX_LEN EQU *-UNLEPAX              * Length of EPAX\n*\n* Unpack area for allocation amounts re-uses SWAREQ areas\n         ORG   UNLSWARQ                *\n         DS    0D                      * Align on D-word\nUNLCVD   DS    PL8                     * Result of CVD\nUNLQTY   DS    ZL5                     * Zoned quantity\n*\n* Buffer for output record follows all else\n         ORG   ,                       * Set to current end of UNLWORK\nUNLBUFO  DS    CL80                    * Buffer for 1 output record\nUNLBUFO_LEN EQU *-UNLBUFO              *\n*\n* Reset location counter to end of UNLWORK\n         ORG   ,                       *\n         DS    0D                      * Align for internal Save areas\nUNLD_LEN EQU   *-UNLD                  *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.SKIP    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACLIB": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01 \\to\\x01 \\to\\x01\\x13\\xd0{\\xd0{\\x00\\x00\\xd4\\xc1\\xc3\\xd3\\xc9\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-04-05T00:00:00", "modifydate": "2020-04-05T01:13:37", "lines": 53371, "newlines": 53371, "modlines": 0, "user": "MACLIB"}, "text": "./ ADD NAME=$DOC     0100-20096-20096-0111-00435-00435-00000-BIXSMAC 30\n{@#}\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\nCoding conventions for macro's:\n\n- All global variables start with &BXA; these are documented in this\n  member. See below.\n- Macro-generated labels always start with an underscore\n- All local variables, when derived from a parameter, are named after\n  the parameter-name, prefixed with an underscore. E.g. if &REG is\n  defined as a parameter, &_REG is the associated local variable.\n- For generated code, the same rules apply as for open code, except for\n  labels. Within macro's these do not need to appear on an EQU\n  statement.\n- All macro's - except mapping macro's (MAPxxxxx) - have a &LABEL\n  parameter, which is expanded using the LABEL macro.\n- All mapping macro's contain a label with the acronym of the control\n  block they map. This name is for use with USING statements.\n- All DSECTs contain a length value: the control block acronym with\n  _LEN appendended. The length EQU is preceded by an ORG instruction\n  to ensure proper evaluation. If this name conflicts with an existing\n  field definition in the control block, that field is renamed to\n  the acronym with _SIZE appended.\n- All private control blocks end with alignment on a doubleword\n  because internal save areas are allocated adjacent to it.\n- If a macro needs expansion of a DSECT, this is done through the\n  GENMAPS macro.\n=======================================================================\nThe following global macro-variables are used in the Bixoft-macro's.\n\nName               Defined  Used     Purpose\n------------------ -------- -------- ----------------------------------\n&BXA_ABND          ABND     END      Target addresses used by ABND\n&BXA_ABND_DFT      ABND     .        Default label for ABND macro\n&BXA_ABNDPGM       ABNDPGM  END      Dest. addresses for use by ABND\n&BXA_AMODE         PGM      .        Indicate current AMODE: 31 or 24\n&BXA_BITF_...      DCL      IF       Field name containing\n.                  .        IFx            specified bit name\n.                  .        SET            or specified value location\n.                  .        SETOF\n.                  .        SETON\n&BXA_CB_...        MAP...   DCL      Link control block to map-macro\n&BXA_DBG_EP        DBG      .        Name of DBG-routine\n&BXA_DBG_SKIP      DBG      END      Nr of DBG-operations skipped\n&BXA_DBG_PLIST     DBG      .        Name of field containing plist\n&BXA_DBG_PTR       DBG      .        Name of ptr field to DBG-routine\n&BXA_DROP          DROP     .        Prevent multiple expansion\n&BXA_DC_LASTLAB    DC       .        Original label of last labeled DC\n&BXA_DC_OFFSET     DC       .        Nr of unlabeled DCs after LASTLAB\n&BXA_DCOVR         DCOVR    DC       Nr of valid entries in DCOVR_xxx\n&BXA_DCOVR_LAB     DCOVR    DC       Labels of DCOVR entries\n&BXA_DCOVR_PRM     DCOVR    DC       Parm strings for DCOVR entries\n&BXA_DCOVR_NAM     DCOVR    DC       New names (DCOVR *NEWNAME entries)\n&BXA_DS_LASTLAB    DS       .        Original label of last labeled DS\n&BXA_DS_OFFSET     DS       .        Nr of unlabeled DS-s after LASTLAB\n&BXA_DSOVR         DSOVR    DS       Nr of valid entries in DSOVR_xxx\n&BXA_DSOVR_LAB     DSOVR    DS       Labels of DSOVR entries\n&BXA_DSOVR_PRM     DSOVR    DS       Parm strings for DSOVR entries\n&BXA_DSOVR_NAM     DSOVR    DS       New names (DSOVR *NEWNAME entries)\n&BXA_EJECTOVR      EJECTOVR EJECT    Ptr to first and last valid in ...\n&BXA_EJECTOVR_OPT  EJECTOVR EJECT    Stack of override options\n&BXA_ENTRY         PGM      RETRN    Entry parameter of PGM q.v.\n.                  .        EXSR\n&BXA_EQUOVR        EQUOVR   EQU      Nr of valid entries in EQUOVR_xxx\n&BXA_EQUOVR_LAB    EQUOVR   EQU      Labels of EQUOVR entries\n&BXA_EQUOVR_LEN    EQUOVR   EQU      Lengths of EQUOVR entries\n&BXA_EQUOVR_LOC    EQUOVR   EQU      Locations of EQUOVR for bitfields\n&BXA_EQUOVR_TYP    EQUOVR   EQU      Types of EQUOVR entries\n&BXA_EQUOVR_VAL    EQUOVR   EQU      Values of EQUOVR entries\n&BXA_EXQ_I         EXQ      LTORG    Define instructions for EXecute\n&BXA_EXQ_LAST      LTORG    .        Pointer to last expanded EXQ-instr\n&BXA_EXQ_OPS       EXQ      LTORG    Define operands for BXA_EXQ_I\n&BXA_EXSR          EXSR     .        Prevent multiple expansion\n&BXA_EXTRNOVR      EXTRNOVR EXTRN    Nr of valid entries EXTRNOVR_xxx\n&BXA_EXTRNOVR_LAB  EXTRNOVR EXTRN    EXTRNs to be overridden\n&BXA_EXTRNOVR_NAM  EXTRNOVR EXTRN    New name or *SUPPRESS for EXTRN\n&BXA_MAC_xxxxxxxx  xxxxxxxx .        Prevent multiple expansion\n&BXA_MAPS_LST      GENMAPS  .        List-option on highest level\n&BXA_NEST_fldname  NESTCB   CPY      Control block defined in field\n&BXA_NUMVAL        CHKDIG   CLEAR    A-value of operand, if valid\n.                  .        ENDSR\n.                  .        PGM\n.                  CHKREG   USE      Register number plus 1, if valid\n.                  .        USING\n&BXA_PGM           PGM      EXSR     Prevent multiple expansion\n&BXA_PGM_LABEL     PGM      BEGSR    Label used by PGM-expansion\n&BXA_PGM_TITLE     PGM      MAPPRMLB Title for listing\n&BXA_PRM(3)        SPLIT    .        Split string into parameters\n.                  DISSECT  .\n&BXA_RC            CHKMAP   MAP...   Returncode\n&BXA_RD_ALG        RDATA    RLTORG   Define remote data alignment\n&BXA_RD_ARG        RDATA    RLTORG   Define remote data arguments\n&BXA_RD_KEY        RDATA    RLTORG   Define remote data keywords\n&BXA_RD_LAB        RDATA    RLTORG   Define remote data labels\n&BXA_RD_NDX        RDATA    RLTORG   Define remote data indexes\n&BXA_RD_OPC        RDATA    RLTORG   Define remote data opcodes\n&BXA_RD_RETVAL     RDATA    RLTORG   RD_MODE=COND: label of dup. data\n&BXA_RD_VAL        RDATA    RLTORG   Define remote data keyword values\n&BXA_REGN_...      EQU      .        Register numbers\n&BXA_REGT_...      EQU      .        Register types\n&BXA_RETRN_LBL     RETRN    END      Labels for out-of-line routine\n&BXA_RETRN_RC      RETRN    END      Returncodes\n&BXA_RETRN_RP      RETRN    END      Return pointers\n&BXA_RETRN_RS      RETRN    END      Reasoncodes\n&BXA_RETRN_WA      RETRN    END      WORKAREA=FREE/NOFREE\n&BXA_SAVES         PGM      END      Nr of internal save-areas\n&BXA_SETMODE       SETMODE  .        Prevent multiple expansion\n&BXA_SETMODE_SAVE  SETMODE  .        Register with saved PSW key\n&BXA_SHOWALL       PGM      PGM      Do not suppress any listing lines\n.                  .        GENMAPS  Do not suppress any listing lines\n&BXA_SR_CALLER     EXSR     END      Array of calling subr-names\n&BXA_SR_CALLED     EXSR     END      Array of called subr-names\n&BXA_SRDNAM        BEGSR    END      Array of defined subroutines\n&BXA_SRDDUP        BEGSR    END      Array of 'multiply defined' indic.\n&BXA_SRDTYP        BEGSR    EXSR     Array of defined subroutine types\n.                  .        ENDSR\n&BXA_SRNAML        BEGSR    END      Max length of subroutine name\n.                  EXSR\n&BXA_SRUASC        EXSR     BEGSR    Array of used subroutines ASCmode\n&BXA_SRUCT         EXSR     END      Array of subr invocation count\n&BXA_SRUNAM        EXSR     END      Array of used subroutines\n&BXA_SRUSVC        EXSR     BEGSR    Array of used subroutines SVCmode\n&BXA_STK           IF       ELSE     Ptr to last valid in &BXA_STK_...\n.                  .        ENDIF\n.                  CASE     ENDCASE\n.                  DO       ENDDO\n.                  LOOP     LEAVE\n.                  .        PGM0\n&BXA_STK_CND       DO       ENDDO    Stack of UNTIL condition/count reg\n&BXA_STK_CLB       LOOP     ENDDO    Stack of UNTIL condition labels\n&BXA_STK_DO        DO       ENDDO    Stack of DO labels\n.                  .        LEAVE\n&BXA_STK_OP        IF       ELSE     Stack of open structure opcodes\n.                  CASE     ENDCASE\n.                  DO       ENDIF\n.                  .        LEAVE\n&BXA_STK_LBL       IF       ELSE     Stack of labels to be generated\n.                  CASE     ENDCASE   (End-of-block labels)\n.                  DO       ENDIF\n&BXA_STK_LVL       CASE     ENDCASE  Nesting levels\n&BXA_STK_USE       DO       ENDDO    USEd register for loop counter\n&BXA_SUBR          BEGSR    ENDSR    Current subroutine name or *MAIN\n.                  PGM      EXSR\n&BXA_SUBRTP        BEGSR    ENDSR    Type of current subroutine\n.                  PGM      EXSR\n&BXA_SVCMODE       PGM      SETMODE  On when in supervisor mode\n&BXA_USE_DS        DCL      USE      Names of enclosing DSECTs\n&BXA_USE_FLD       DCL      USE      Names of DeCLared complex fields\n&BXA_USE_LBL       DCL      USE      Labels for the dependent USINGs\n&BXA_USE_R12       PGM      BEGSR    Label for USING R12\n&BXA_USE_SDS       DCL      USE      Names of enclosed DSECTs\n&BXA_USEC_ROUT     USE      BEGSR    Routine names for USE SCOPE=CALLED\n&BXA_USEC_ARGL     USE      BEGSR    Labels on USE SCOPE=CALLED\n&BXA_USEC_ARG1     USE      BEGSR    Control-block on USE SCOPE=CALLED\n&BXA_USEC_ARG2     USE      BEGSR    Base on USE SCOPE=CALLED\n&BXA_USED_REGS     USING    .        Registers available/unavailable\n.                  USE\n&BXA_USEFLD        USING    DROP     Fields used with &BXA_USELBL\n.                  PUSH     POP\n&BXA_USENDX        USING    DROP     Current valid in &BXA_USENDX0\n.                  PUSH     POP        and &BXA_USENDX1\n&BXA_USENDX0       USING    DROP     Stack of low indexes for\n.                  PUSH     POP         &BXA_USELBL and &BXA_USEREG\n&BXA_USENDX1       USING    DROP     Stack of high indexes for\n.                  PUSH     POP         &BXA_USELBL and &BXA_USEREG\n&BXA_USELBL        USING    DROP     Labels of ordinary usings\n.                  PUSH     POP\n&BXA_USEREG        USING    DROP     Registers used with &BXA_USELBL\n.                  PUSH     POP\n&BXA_WALAB         PGM      BEGSR    Using label for obtained storage\n&BXA_WALEN         PGM      RETRN    Length of obtained storage\n&BXA_WORKPTR(3)    PGM      RETRN    Pointer to obtained storage\n&IEC024I           MAP$AMQS .        Prototype message text\n------------------ -------- -------- ----------------------------------\n&SP_DBG            SYSPARM  DBG      On if debugging requested\n.                  .        END\n.                  .        GENMAPS\n.                  .        MAP$DBG\n&SP_LICENSE        SYSPARM  CHKLIC   License name\n&SP_LICSTAT        SYSPARM  CHKLIC   License status\n&SP_LICOK          SYSPARM  --       On if valid license accespted\n&SP_OPT            SYSPARM  PGM      On if optimization requested\n&SP_SHOWALL        SYSPARM  PGM      On if nothing to be suppressed\n.                  .        END\n.                  .        GENMAPS\n.                  .        LTORG\n&SP_SRLIST         SYSPARM  END      On if subroutine listing requested\n&SP_SRXREF         SYSPARM  END      On for subroutine cross-reference\n=======================================================================\nThe following control blocks are available for DCL\n\nControl block name Mapmacro Description\n------------------ -------- -------------------------------------------\n                   MAPBITS  BIT equateS\n                   MAPEQU   EQUates of registers, bits, and masks\n                   MAPLMASM Latch Management equates for ASseMbler\n                   MAPREGS  REGister equateS\nABEP               MAPABEP  ABend Exit Parameter list\nACB                MAPACB   Access Control Block\nACEE               MAPACEE  ACcessor Environment Element\nACT                MAPJCT   Accounting Control Table\nADSR               MAPADSR  Symptom Record sections 1 and 2\nADSRCMPS           MAPADSR  Symptom Record section 2.1\nADSRDBST           MAPADSR  Symptom Record primary symptom string\nADSRROSD           MAPADSR  Symptom Record secondary symptom string\nADSR5ST            MAPADSR  Symptom Record section 5\nADYENF             MAPADYEN DAE Event NotiFication parameter list\nAE                 MAPAE    VSM Allocated Element\nASCB               MAPASCB  Address Space Control Block\nASEO               MAPASEO  Address Space crEation Output area\nASMPOOLS           MAPASMVT ASM cell POOL controller\nASMVT              MAPASMVT Auxiliary Storage Manager Vector Table\nASSB               MAPASSB  Address Space Secondary Block\nASVT               MAPASVT  Address Space Vector Table\nASXB               MAPASXB  Address Space eXtension Block\nBASEA              MAPBASEA Master Scheduler Resident Data Area\nBASEX              MAPBASEA Master Scheduler Resident Data Area eXtens.\nBDW                MAPDCB   Block Descriptor Word\nBXASAVE            MAPSAVE  Extended SAVE area\nCAMLOC             MAPCAM   CAMlst LOCate results\nCAMLOCVOL          MAPCAM   CAMlst LOCate VOLume entry\nCAMLST             MAPCAM   CAMLST parameter list\nCDE                MAPCDE   Contents Directory Entry\nCIBHDR             MAPCIB   Command Input Buffer HeaDeR\nCIBX               MAPCIB   Command Input Buffer eXtension\nCOM                MAPCOM   COMmunication area\nCQE                MAPCQE   Console Queue Element\nCSCB               MAPCSCB  Command Scheduling Control Block\nCSCX               MAPCSCB  Command Scheduling Control block eXtension\nCVT                MAPCVT   Communications Vector Table\nCVTFIX             MAPCVT   Communications Vector Table preFIX\nCVTVSTGX           MAPCVT   CVT Virtual SToraGe eXtension\nCVTXTNT1           MAPCVT   CVT os-os/vs common eXTension\nCVTXTNT2           MAPCVT   CVT os/vs1-os/vs2 common eXTension\nDCB                MAPDCB   Data Control Block\nDCBE               MAPDCBE  Data Control Block Extension\nDDRCOM             MAPDDRCO IOS Dynamic Device Reconfiguration         *\n                                COMmunication area\nDECB               MAPDECB  Data Event Control Block\nDESB               MAPDES   DirEntry Services Buffer header\nDESD               MAPDES   DirEntry Services member Data descriptor\nDESL               MAPDES   DirEntry Services name List\nDESN               MAPDES   DirEntry Services Name record\nDESP               MAPDES   DirEntry Services Parmlist\nDESR               MAPDES   DirEntry Services Reason codes\nDESRCS             MAPDES   DirEntry Services Return CodeS\nDESX               MAPDES   DirEntry Services eXit plist\nDOCNTFLD           MAPDOTU  Dynamic Output length/parameter FieLD\nDOCNTLST           MAPDOTU  Dynamic Output LiST of text unit pointers\nDOCNUNIT           MAPDOTU  Dynamic Output text UNIT\nDSAB               MAPDSAB  Data Set Association Block\nDSABANMI           MAPDSAB  DSAB Alternate NaMe Information block\nDSABQDB            MAPDSABQ DSAB Queue Descriptor Block\nDSCB1              MAPDSCB1 Data Set Control Block - format 1\nDSCB2              MAPDSCB2 Data Set Control Block - format 2\nDSCB3              MAPDSCB3 Data Set Control Block - format 3\nDSCB4              MAPDSCB4 Data Set Control Block - format 4\nDSCB5              MAPDSCB5 Data Set Control Block - format 5\nDST                MAPDES   Direntry Services Screen Table\nECB                MAPECB   Event Control Block\nECBE               MAPECB   Event Control Block Extension\nECVT               MAPECVT  Extended Communications Vector Table\nEMDSECT1           MAPS99   Dynalloc parameter list to IEFDB476\nEMDSECT2           MAPS99   Dynalloc message buffer area\nEMDSECT3           MAPS99   Dynalloc message buffer area array\nEPAL               MAPEPAL  External Parameter Area for Locate SWA mgr\nEPAX               MAPEPAL  eXtended EPAL\nEVNT               MAPEVNT  EVeNTs control block\nEVNTENTRY          MAPEVNT  EVeNTs table ENTRY\nFRRPL              MAPFRRPL Function Recovery Routine Parameter area\nFRRS               MAPFRRS  Function Recovery Routine Stack\nFRRSENTR           MAPFRRS  FRR ENTRy\nFRRSXENT           MAPFRRS  FRR ENTry eXtension\nFRRSXSTK           MAPFRRS  FRR STacK eXtension\nGVT                MAPGVT   GRS Vector Table\nGVTX               MAPGVTX  GRS Vector Table eXtension\nIHSA               MAPIHSA  Interrupt Handler Save Area\nIOB                MAPIOB   Input/Output Block\nIOQ                MAPIOQ   IOS Queue element\nIOQE               MAPIOQ   IOS Queue element Extension\nIOSB               MAPIOSB  I/O Supervisor Block\nIOSX               MAPIOSX  I/O Supervisor block eXtension\nJCT                MAPJCT   Job Control Table\nJCTX               MAPJCTX  Job Control Table eXtension\nJESCT              MAPJESCT JES Communication Table\nJESMNTBL           MAPJESCT JES MouNTaBLe device class table\nJESPEXT            MAPJESCT JESCT Pageable EXTension\nJFCB               MAPJFCB  Job File Control Block\nJFCBE              MAPJFCBE Job File Control Block Extension for 3800\nJFCBX              MAPJFCBX Job File Control Block eXtension\nJSCB               MAPJSCB  Job Step Control BLock\nLCT                MAPLCT   Linkage Control Table\nLDA                MAPLDA   VSM Local Data Area\nLLE                MAPLLE   Load List Element\nLPDE               MAPLPDE  Link Pack Directory Entry\nNTCRPL             MAPIEANT Named Token CReate Parameter List\nNTDLPL             MAPIEANT Named Token DeLete Parameter List\nNTRTPL             MAPIEANT Named Token ReTrieve Parameter List\nOC24               MAPOCPL  Open/Close parameter list (24-bit mode)\nOC31               MAPOCPL  Open/Close parameter list (31-bit mode)\nORE                MAPORE   Operator Reply Element\nOUCB               MAPOUCB  ResOurces manager User Control Block\nPCCA               MAPPCCA  Physical Configuration Communication Area\nPCCAVT             MAPPCCAV PCCA Vector Table\nPDAB               MAPPDAB  Parallel Data Access Block\nPDS                MAPPDS   Partitioned DataSet directory entry\nPDS2               MAPPDS   Partitioned DataSet (extended) direntry\nPEL                MAPPEL   Parameter Element List (ENQ/DEQ/RESERVE)\nPMAR               MAPPMAP  Program Management Attribute Record\nPMARA              MAPPMAP  PMAR - load module extension\nPMARL              MAPPMAP  PMAR - program object extension\nPMARR              MAPPMAP  PMAR - internal extension\nPRB                MAPPRB   Program Request Block\nPRM_LIST_BUFFER    MAPPRMLB PaRMlib services LIST BUFFER\nPRM_MESSAGE_BUFFER MAPPRMLB PaRMlib services MESSAGE BUFFER\nPRM_READ_BUFFER    MAPPRMLB PaRMlib services BUFFER for member READ\nPSA                MAPPSA   Prefixed Storage Area\nPSL                MAPPSL   Page Service List entry\nPVT                MAPPVT   RSM Page Vector Table\nPVTEXT             MAPPVT   RSM Page Vector Table EXTension\nPVTVVTAB           MAPPVT   RSM Page Vector VDAC TABle\nQCB                MAPQCB   GRS Queue Control Block\nQEL                MAPQEL   GRS Queue ELement\nQHT                MAPQHT   GRS Queue Hash Table header\nQHTENT             MAPQHT   GRS Queue Hash Table ENTry\nRB                 MAPRB    Request Block\nRCTD               MAPRCTD  Region Control Task Data area\nRDW                MAPDCB   Record Descriptor Word\nRMCT               MAPRMCT  System Resources Manager Control Table\nRMPL               MAPRMPL  Resource Manager Parameter List\nRMPLPT             MAPRMPL  PoinTer to RMPL\nRMPLP2             MAPRMPL  Pointer to userparm for resmgr routine\nRPL                MAPRPL   Request Parameter List\nRPL6               MAPRPL   RPL extension for LU 6.2\nRQE                MAPRQE   EXCP Request Queue Element\nRTMW               MAPRT1W  RTM1 save/Work area\nRT1TRACK           MAPRT1W  RTM1 TRACKing area\nRT1TRECC           MAPRT1W  RTM1 RECursion Control data\nRT1W               MAPRT1W  RTM1 Work area\nSAVEAREA           MAPSAVE  Standard SAVE AREA\nSCCB               MAPSCCB  Service Call Control Block\nSCCBCP             MAPSCCB  SCCB CPu information entry\nSCCBHSA            MAPSCCB  SCCB HSA information entry\nSCCBMPF            MAPSCCB  SCCB MPF information entry\nSCT                MAPSCT   Step Control Table\nSCTX               MAPSCTX  Step Control Table eXtension\nSCVT               MAPSCVT  Secondary Communications Vector Table\nSCW                MAPDCB   Segment Control Word\nSDW                MAPDCB   Segment Descriptor Word\nSDWA               MAPSDWA  System Diagnostic Work Area\nSDWANRC1           MAPSDWA  SDWA Non-ReCordable extension 1\nSDWANRC2           MAPSDWA  SDWA Non-ReCordable extension 2\nSDWANRC3           MAPSDWA  SDWA Non-ReCordable extension 3\nSDWAPTRS           MAPSDWA  SDWA PoinTeRS extension block\nSDWARC1            MAPSDWA  SDWA ReCordable extension 1\nSDWARC2            MAPSDWA  SDWA ReCordable extension 2\nSDWARC3            MAPSDWA  SDWA ReCordable extension 3\nSIOT               MAPSIOT  Step Input/Output Table\nSMCA               MAPSMCA  SMf Control tAble\nSMDE               MAPSMDA  System Managed Directory Entry basic sect.\nSMDE_FD            MAPSMDA  SMDE hfs File Descriptor section\nSMDE_NAME          MAPSMDA  SMDE NAME section\nSMDE_NLST          MAPSMDA  SMDE NoteLiST section\nSMDE_PNAME         MAPSMDA  SMDE Primary NAME section\nSMDE_TOKEN         MAPSMDA  SMDE TOKEN section\nSNAPDLIST          MAPSNAP  SNAP Dataspace LIST entry\nSNAPHLIST          MAPSNAP  SNAP Header LIST entry\nSNAPLIST           MAPSNAP  SNAP storage LIST entry\nSRB                MAPSRB   Service Request Block\nSSDR               MAPSSDR  SSOB ext.for Dynamic device Reconfiguration\nSSL                MAPSSL   Short page Service List\nSSOB               MAPSSOB  SubSystem Options Block\nSSRB               MAPSSRB  Suspended Service Request Block\nSTCB               MAPSTCB  Seconary Task Control Block\nSVCENTRY           MAPSVCE  SVC table ENTRY\nSVCURT             MAPSVCE  SVC Update Recording Table entry\nSVRB               MAPSVRB  SuperVisor Request Block\nSVT                MAPSVT   Supervisor Vector Table\nSWAREQPL           MAPEPAL  SWAREQ Parameter List\nS99RB              MAPS99   Dynalloc Request Block\nS99RBP             MAPS99   Dynalloc Request Block Pointer\nS99RBX             MAPS99   Dynalloc Request Block eXtension\nS99TUFLD           MAPS99   Dynalloc request Text Unit FieLD\nS99TUNIT           MAPS99   Dynalloc request Text UNIT\nS99TUPL            MAPS99   Dynalloc request Text Unit Pointer List\nTAXE               MAPTAXE  TSO Terminal Attention eXit Element\nTCB                MAPTCB   Task Control Block\nTCBFIX             MAPTCB   TCB preFIX\nTCBXTNT2           MAPTCB   TCB eXTension\nTCCW               MAPTCCW  EXCP Translation Control Block\nTCT                MAPTCT   SMF Timing Control Table\nTIOENTRY           MAPTIOT  Task I/O Table Entry\nTIOTHDR            MAPTIOT  Task I/O Table header\nTIOTPOOL           MAPTIOT  Task I/O Table Pool entry\nTQE                MAPTQE   Timer Queue Element\nTTRN               MAPPDS   Track, Record, iNdicator field\nTTRX               MAPPDS   Track, Record, available field\nUCB                MAPUCB   Unit Control Block\nUCBOCR             MAPUCB   UCB extension - Optical Character Reader\nUCBPDCTA           MAPUCB   UCB extension - Channel to channel Adapter\nUCBUCS             MAPUCB   UCB extension - Universal Character Set\nUCB3540X           MAPUCB   UCB extension - 3540\nUCB3800X           MAPUCB   UCB extension - 3800 printer\nUCM                MAPUCM   Unit Controle Module definition\nUCMEFEXT           MAPUCM   UCM individual device Entry Fixed EXTension\nUCMEIL             MAPUCM   UCM Event Indication List\nUCMEPEXT           MAPUCM   UCM indiv. device Entry Pageable EXTension\nUCMFEXTA           MAPUCM   UCM Fixed EXTension bAse\nUCMFSAVE           MAPUCM   UCM Fixed extension SAVE area\nUCMLIST            MAPUCM   UCM List of individual device entries\nUCMPEXTA           MAPUCM   UCM Pageable EXTension bAse\nUCMPRFX            MAPUCM   UCM MCS PReFiX area\nUCM2EXT            MAPUCM   UCM OS/VS2 EXTension\nVRA                MAPVRA   Variable Recording Area in SDWA\nVSL                MAPVSL   Virtual Subarea List entry\nWQE                MAPWQE   WTO Queue Element\nWQEMAJ             MAPWQE   Major WQE\nWQEMIN             MAPWQE   Minor WQE\nWQESYAR            MAPWQE   WQE saved SYstem id-ARray\nWTOPL              MAPWTOPL Write To Operator Parameter List\nXSB                MAPXSB   eXtended Status Block\nXSRB               MAPSRB   eXtended Service Request Block\n./ ADD NAME=$INDEX   0100-20096-20096-0111-00306-00306-00000-BIXSMAC 30\n*\n* The macros in this maclib are divided into the\n* following categories:\n* - Structrured programming\n* - Register management\n* - Data definitions, overrides and their usage\n* - Extended branching\n* - Other instruction set extensions\n* - Various\n* - Mappings and overrides\n*\n\n*\n*** Structured programming\n*\nBEGSR     BEGin SubRoutine (start of subroutine definition)\nCASE      Multi-branch if statement\nDO        Start of a loop\nELSE      ELSE for an IF-THEN-ELSE-ENDIF construct\nEND       END of program, generates subroutine cross reference\nENDCASE   End of a case construct\nENDDO     End of a DO loop\nENDIF     End of an IF-THEN-ELSE-EDIF construct\nENDSR     End of a subroutine definition\nEXSR      EXecute SubRoutine (subroutine invocation)\nEXSR0     (helper macro for EXSR)\nGLUE      Call module in a different Amode/Rmode\nGOTO      Branch with IF-like condition coded as parameters\nIF$       (helper macro for IF/CASE/DO)\nIF$ALC    (helper macro for IF/CASE/DO)\nIF$LS     (helper macro for IF/CASE/DO)\nIF$LU     (helper macro for IF/CASE/DO)\nIF        Start of IF-THEN-ELSE-ENDIF construct\nLEAVE     Exit from IF/CASE/LOOP construct\nLOOP      Repeat DO-ENDDO loop\nPGM       ProGraM start\nPGM0      (helper macro with PGM)\nRETRN     RETuRN from subroutine\n\n*\n*** Register management\n*\nDROP      Replaces DROP statement\nDROP0     (helper macro with DROP)\nEQUREG    Allocate available register using EQU\nUSE       Declare register usage\nUSEDREGS  Show overview of registers in use\nUSING     Replaces USING statement\n\n*\n*** Data defintions, overrides and their usage\n*\nDC        Replaces DC statement\nDCL       DeCLare a field, bit, or register\nDCOVR     Define an OVerRide for a later DC statement\nCPY       CoPY a field, register, etc. intelligently\nDEC       DECrement field or register\nDS        Replaces DS statement\nDSOVR     Define an OVerRide for a later DS statement\nEQU       Replaces EQU statement\nEQUOVR    Define an OVerRide for a later EQU statement\nEXTRN     Replaces EXTRN statement\nEXTRNOVR  Define an OVerRide for a later EXTRN statement\nGEN       Generate a replaced machine instruction\nGENMAPS   GENerate MAP definitionS\nINC       INCrement a field or register\nLABEL     Define a Label\nLTORG     Replaces LTORG statement\nNESTCB    Define a NESTed Control Block\nRDATA     Remote DATA definition\nRLTORG    Remote LTORG\nRWTO      Remote WTO\nSET       Set a coded-value field to a specific value\nSETOF     Turn off a named bit\nSETON     Turn on a named bit\nTRTAB     Define TRT table data\n\n*\n*** Extended branching\n*\nBALC      BAL Conditionally\nBALE      BAL on Equal\nBALH      BAL on High\nBALL      BAL on Low\nBALM      BAL on Mixed/Minus\nBALNE     BAL on Not Equal\nBALNH     BAL on Not High\nBALNL     BAL on Not Low\nBALNM     BAL on Not Mixed/Minus\nBALNO     BAL on Not Ones/Overflow\nBALNP     BAL on Not Plus\nBALNZ     BAL on Not Zero\nBALO      BAL on Ones/Overflow\nBALP      BAL on Plus\nBALZ      BAL on Zero\nBASC      BAS Conditionally\nBASE      BAS on Equal\nBASH      BAS on High\nBASL      BAS on Low\nBASM      BAS on Mixed/Minus\nBASNE     BAS on Not Equal\nBASNH     BAS on Not High\nBASNL     BAS on Not Low\nBASNM     BAS on Not Mixed/Minus\nBASNO     BAS on Not Ones/Overflow\nBASNP     BAS on Not Plus\nBASNZ     BAS on Not Zero\nBASO      BAS on Ones/Overflow\nBASP      BAS on Plus\nBASZ      BAS on Zero\nBHE       Branch on High or Equal\nBHER      Branch on High or Equal Register\nBLE       Branch on Low or Equal\nBLER      Branch on Low or Equal Register\nBLH       Branch on Low or High\nBLHR      Branch on Low or High Register\nBNHE      Branch on Not High or Equal\nBNHER     Branch on Not High or Equal Register\nBNLE      Branch on Not Low or Equal\nBNLER     Branch on Not Low or Equal Register\nBNLH      Branch on Not Low or High\nBNLHR     Branch on Not Low or High Register\n\n*\n*** Other instruction set extensions\n*\nEPSW      Extract PSW (for machines not having the instruction)\nEXCLC     EXecute CLC\nEXMVC     EXecute MVC\nEXQ       EXeQute instruction\nEXSVC     EXecute SVC\nEXTR      EXecute TR\nEXTRT     EXecute TRT\nEXXC      EXecute XC\nIPK       Replaces IPK instruction\nLA        Replaces LA instruction\nLC        Load Character (for machines not having the instruction)\nLR        Replaces LR instruction\nLT        Load and Test (for machines not having the instruction)\nLTA24     Load and Test 24-bit address\nLTC       Load and Test Character (for machines not having the instruction)\nLTH       Load and Test Halfword (for machines not having the instruction)\nLTHU      Load and Test Halfword Unsigned (for machines not having the instructi\nMVPL      MoVe ParmList\nSTA24     STore 24-bit address\nTRT       Replaces TRT instruction\n\n*\n*** Various\n*\nABND     Branch to routine that issues abend (ABNDPGM)\nABNDPGM  Generates an out-of-line routine that abends the program\nBXAEPSW  Extract PSW\nCHKLIC   Check license (assembly-time)\nCHKLIT   Check whether argument is a valid numeric literal\nCHKMAP   Check parameters entered on a MAPxxx macro\nCHKNUM   Check whether argument is a valid number\nCHKREG   Check whether argument is a valid register\nCLEAR    Clear an area of storage or a register\nCMDTXT   Define a command-text for use with MGCRE\nDBG      Debugging logic\nDISSECT  Dissect a parameter into its constituent parts\nEJECT    Replaces EJECT statement\nEJECTOVR Manage overrides for EJECT\nNTCR     Create a name/token pair\nNTDL     Delete a name/token pair\nNTRT     Retrieve a name/token pair\nOPSYNS   Generate OPSYN statements for a list of instructions\nPOP      Replaces POP statement\nPUSH     Replaces PUSH statement\nSETMODE  Call SETMODE function\nSETMODE0 Define internal subroutine for SETMODE\nSNAPHDR  Define header-text for use with STRHDR operand of SNAP\nSNAPNTRY Define entries in the STORAGE and STRHDR lists of SNAP\n         --> SNAPNTRY is intended for use with BXADBG00 only\nSPACE    Replaces SPACE statement\nSPLIT    Split a parameter string in its constituent parts\nSYSPARM  Analyze SYSPARM content\n\n*\n*** Mappings and overrides\n*\nMAPABEP\nMAPACB\nMAPACEE\nMAPADSR\nMAPADYEN\nMAPAE\nMAPASCB\nMAPASEO\nMAPASMVT\nMAPASSB\nMAPASVT\nMAPASXB\nMAPBASEA\nMAPBITS\nMAPCAM\nMAPCDE\nMAPCIB\nMAPCOM\nMAPCQE\nMAPCSCB\nMAPCVT\nMAPDCB\nMAPDCBE\nMAPDDRCO\nMAPDEB\nMAPDECB\nMAPDES\nMAPDFA\nMAPDOTU\nMAPDSAB\nMAPDSABQ\nMAPDSCB\nMAPDSCB1\nMAPDSCB2\nMAPDSCB3\nMAPDSCB4\nMAPDSCB5\nMAPECB\nMAPECVT\nMAPEPAL\nMAPEQU\nMAPEVNT\nMAPFRRPL\nMAPFRRS\nMAPGVT\nMAPGVTX\nMAPIEANT\nMAPIECEQ\nMAPIHSA\nMAPIOB\nMAPIOQ\nMAPIOSB\nMAPJCT\nMAPJCTX\nMAPJESCT\nMAPJFCB\nMAPJFCBE\nMAPJFCBX\nMAPJSCB\nMAPLCT\nMAPLDA\nMAPLLE\nMAPLMASM\nMAPLPDE\nMAPOCPL\nMAPORE\nMAPOUCB\nMAPPCCA\nMAPPCCAV\nMAPPDAB\nMAPPDS\nMAPPEL\nMAPPMAR\nMAPPRB\nMAPPRMLB\nMAPPSA\nMAPPSL\nMAPPVT\nMAPQCB\nMAPQEL\nMAPQHT\nMAPQMIDS\nMAPRB\nMAPRCTD\nMAPREGS\nMAPRMCT\nMAPRMPL\nMAPRPL\nMAPRQE\nMAPRT1W\nMAPS99\nMAPSAVE\nMAPSCCB\nMAPSCT\nMAPSCTX\nMAPSCVT\nMAPSDWA\nMAPSIOT\nMAPSMCA\nMAPSMDE\nMAPSNAP\nMAPSRB\nMAPSSDR\nMAPSSL\nMAPSSOB\nMAPSSRB\nMAPSTCB\nMAPSVCE\nMAPSVRB\nMAPSVT\nMAPSWAPX\nMAPTAXE\nMAPTCB\nMAPTCCW\nMAPTCT\nMAPTIOT\nMAPTQE\nMAPUCB\nMAPUCM\nMAPVRA\nMAPVSL\nMAPWQE\nMAPWTOPL\nMAPXSB\n./ ADD NAME=$README  0100-20096-20096-0111-00091-00091-00000-BIXSMAC 30\n.*\n.* This maclib is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This maclib is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This maclib can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n.*\n.* How to get started\n.*\n.* this maclib constitutes a programming environment. It's most\n.* important elements are teh structured programming macros.\n.* You should start your program with the PGM macro, it builds the\n.* environment that all the other macros need to function properly.\n.* To indicate you agree with the license conditions, you have to\n.* include in your sysparm (on the assembler invocation)\n.*   LICENSE=GPL2.0,LICSTAT=IAGREE\n.* in addition to any other assembly-time parms you may want to pass.\n.*\n.* Use The PGM macro is paired with the END macro, which not only\n.* ends your program and assembly, but also produces a cross reference\n.* of all subroutine invocations.\n.*\n.* Subroutines are defined using the BEGSR / ENDSR macros\n.* and invoked using the EXSR macro.\n.* This is an RPG-like style. If you prefer another style,\n.* you should change or encapsulate the macros according to your taste.\n.*\n.* The DCL macro allows you to declare bit fields explicitly.\n.* It also supports coded-value fields.\n.* Use the SETON/SETOF macros to turn bit field on/off using only\n.* the name of the bit. The byte location of the bit need not be\n.* mentioned explicitly.\n.* Use the SET macro to set a code by its value name.\n.* Again, the location of the value field need not be specified\n.* DCL can also be used to embed control blocks in a nested structure\n.*\n.* If you want the named-bit and named-value facilities for fields\n.* defined in a macro external to the BXA environment (e.g. IBM-supplied)\n.* macros, the use the DCOVR/DSOVR macros. Examples are in the MAPxxxxx\n.* macros supplied in this librarry.\n.*\n.* Another feature of the Bixoft eXtended Assembly language is its\n.* support for dynamically (at assembly-time, that is) allocating\n.* registers. You can use the EQUREG macro to have an available\n.* register assigned. You can indicate whether you need a single reg\n.* or a register pair. The macro uses info from prior USING/DROP\n.* and POP/PUSH invocations to determine which register(s) are eligible\n.* You can use the USE macro to declare a register in use, even when\n.* it is not addressing any specific area in your program.\n.*\n.* Every macro has a short commentary section explaining its purpose\n.* and the syntactical details of how to invoke the macro.\n.*\n.* The library can be used with any assembler product:\n.* HLASM, Dignus, Tachyon, z390\n.*\n.* I hope you'll enjoy this library and wish you happy programming.\n./ ADD NAME=$WISHES  0100-20096-20096-0111-00028-00028-00000-BIXSMAC 30\n*\n* Wish list for asmplus maclib\n* -           Add License terms to each member\n* -           Add License=BXAPL/GPL and IAGREE=YES as req'd parms\n* -           Change type 'g' for GPR to 'r' for Register (Right half)\n* -           Add type 'l' for Register (Left half)\n* -           Add type 'g' for Register (Grande)\n* -           Support for SHOWALL option should be removed from\n*               all macros and inserted into SPACE/EJECT/TITLE etc.\n* - CLEAR     Allow other types of operands\n* - DEC       Allow other types of operands\n* - EPSW      Not (yet) compatible with EPSW instruction\n* -           --> rename BXAEPSW to EPSW and allow 2nd operand!\n* -           --> remove the BXAEPSW macro (temporary solution)\n* - EQU       Generate instruction labels as follows:\n         DS    0H\n&LABEL   EQU   *,2,C'I'\n* - INC       Allow other types of operands\n* - MAPREGS   Change type 'g' to type 'r'\n*             --> All other macros must change accordingly\n*             --> See EQU macro for other registertypes to add\n* - MAPREGS   Add equates for 64-bit registers type 'g'\n* - MAPxxxxx  Make overrides dependent upon current OS level\n* - MAPxxxxx  Some mapping macros still have a different structure\n* - RDATA     use locator name in stead of RLTORG macro\n* - RLTORG    discard after changing RDATA to use locator name\n*\n*\n./ ADD NAME=ABND     0100-20096-20096-0111-00313-00313-00000-BIXSMAC 30\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro forces an abend by branching to the predetermined\n.* entry point of an Abend-routine.\n.*\n&LABEL   ABND  &COND,                  * Condition for abending        *\n               &ABEND,                 * Label of BXABEND routine      *\n               &FAIL=R14,              * Reg for failed address        *\n               &TSTREG=,               * Registers for LTR-instruction *\n               &RCD=                   * 1 or 2 registers or IGNORE\n.*\n.* &COND can be one of the following:\n.*       - SETDFT: spedifies abend entry point, generates no code\n.*       - TSTRC : abend-routine will be taken if R15<>0\n.*       - E     : abend-routine will be taken on cond.code = E\n.*       - H     : abend-routine will be taken on cond.code = H\n.*       - L     : abend-routine will be taken on cond.code = L\n.*       - M     : abend-routine will be taken on cond.code = M\n.*       - O     : abend-routine will be taken on cond.code = O\n.*       - P     : abend-routine will be taken on cond.code = P\n.*       - Z     : abend-routine will be taken on cond.code = Z\n.*       - NE    : abend-routine will be taken on cond.code = NE\n.*       - NH    : abend-routine will be taken on cond.code = NH\n.*       - NL    : abend-routine will be taken on cond.code = NL\n.*       - NM    : abend-routine will be taken on cond.code = NM\n.*       - NO    : abend-routine will be taken on cond.code = NO\n.*       - NP    : abend-routine will be taken on cond.code = NP\n.*       - NZ    : abend-routine will be taken on cond.code = NZ\n.* &LABEL specifies label of abend routine. If not specified the\n.*        default supplied with TYPE=SETDFT will be used.\n.* &FAIL  specifies the register that passes the reasoncode for\n.*        the abend, usually the failing address. If not specified\n.*        defaults to R14.\n.* &TSTREG specifies a a register or a set of two registers,\n.*        to be used in an LTR instruction. The resulting condition\n.*        code will be tested as specified in the COND parameter.\n.* &RCD   valid only with TSTRC. Specifies 1 or 2 registers or IGNORE.\n.*        If IGNORE is specified, the return- and reasoncodes will be\n.*        lost before the abend is issued. If 1 register is specified\n.*        it will be used to save the returncode, the reasoncode will\n.*        be lost before the abend is issued. If two registers are\n.*        specified, the first will contain the returncode, the\n.*        reasoncode will be put into the second one before the abend\n.*        is issued. Only registers 2-11 can be specified.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Retcode from CHKLIC\n         CHKLIC ABND                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_ABND_DFT           * Default user-abend label\n         GBLC  &BXA_ABND(50)           * Used targets\n         GBLA  &BXA_NUMVAL             * Result from CHKREG\n         LCLC  &_ABEND                 *\n         LCLC  &_RCD1,&_RCD2           * RCD subparameters\n         LCLA  &_RCD1N,&_RCD2N         * RCD subparameter reg.nrs\n         LCLC  &_TSTREG1,&_TSTREG2     *\n         LCLA  &I                      * Index into BXA_ABND\n         LCLA  &_FAIL                  * Register number for FAIL=\n         LCLC  &OPCD                   * Generated opcode mnemonic\n.*\n.* Check validity of first parameter: extended condition code\n         AIF   ('&COND' EQ 'TSTRC').NOERR1\n         AIF   ('&COND' EQ 'SETDFT').NOERR1\n         AIF   (K'&COND EQ 0).NOERR1\n         AIF   ('&COND' EQ 'E').NOERR1\n         AIF   ('&COND' EQ 'H').NOERR1\n         AIF   ('&COND' EQ 'L').NOERR1\n         AIF   ('&COND' EQ 'M').NOERR1\n         AIF   ('&COND' EQ 'O').NOERR1\n         AIF   ('&COND' EQ 'P').NOERR1\n         AIF   ('&COND' EQ 'Z').NOERR1\n         AIF   ('&COND' EQ 'NE').NOERR1\n         AIF   ('&COND' EQ 'NH').NOERR1\n         AIF   ('&COND' EQ 'NL').NOERR1\n         AIF   ('&COND' EQ 'NM').NOERR1\n         AIF   ('&COND' EQ 'NO').NOERR1\n         AIF   ('&COND' EQ 'NP').NOERR1\n         AIF   ('&COND' EQ 'NZ').NOERR1\n.ERR1    MNOTE 8,'Incorrect condition mnemonic in first parameter'\n.NOERR1  ANOP\n.*\n.* Check validity of second parameter: label of BXABEND macro\n         AIF   (K'&ABEND NE 0).NOERR2\n.* ABEND-parm is empty: check if &LABEL can be defaulted\n         AIF   ('&COND' EQ 'SETDFT').ERR2\n         AIF   (K'&BXA_ABND_DFT NE 0).NOERR2\n.ERR2    MNOTE 8,'Label of BXABEND-macro not specified on second parame*\n               ter'\n.NOERR2  ANOP  ,\n.*\n.* Check validity of FAIL= parameter: register for failing address\n         AIF   (K'&FAIL EQ 0).NOERR3\n         AIF   ('&FAIL'(1,1) EQ '(').ERR3A\n         CHKREG &FAIL,g                * Valid general purpose reg?\n         AIF   (&BXA_RC GT 4).ERR3B    * Invalid register\n&_FAIL   SETA  &BXA_NUMVAL             * Set register number\n         AIF   (&_FAIL EQ 15).ERR3C    * R15 is invalid\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'FAIL= must not specify a sublist'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'FAIL= must specify a valid general purpose register'\n         AGO   .NOERR3\n.ERR3C   MNOTE 8,'FAIL= must not specify register 15'\n.NOERR3  ANOP\n.*\n.* Check validity of TSTREG parameter: registers for testing\n         AIF   (K'&TSTREG EQ 0).NOERR4\n         AIF   ('&TSTREG'(1,1) EQ '(').ERR4TST\n&_TSTREG1 SETC '&TSTREG'               * Use the register specified\n&_TSTREG2 SETC '&TSTREG'               * as source and destination\n         AGO   .NOERR4A\n.ERR4TST ANOP\n         AIF   (N'&TSTREG EQ 0).ERR4A\n&_TSTREG1 SETC '&TSTREG(1)'            * At least 1 reg in the list\n&_TSTREG2 SETC '&TSTREG(1)'            * Use it for src and dest.\n         AIF   (N'&TSTREG EQ 1).NOERR4A * 1 register: all done\n&_TSTREG2 SETC '&TSTREG(2)'            * More than 1 reg: pick up 2nd\n         AIF   (N'&TSTREG EQ 2).NOERR4A * 2 registers: all is well\n.ERR4A   MNOTE 8,'TSTREG parameter must specify one or two registers'\n         AGO   .NOERR4\n.NOERR4A ANOP  ,\n         CHKREG &_TSTREG1,g            * Valid register?\n         AIF   (&BXA_RC GT 4).ERR4B\n         AIF   ('&_TSTREG1' EQ '&_TSTREG2').NOERR4\n         CHKREG &_TSTREG2,g            * Valid register?\n         AIF   (&BXA_RC GT 4).ERR4C\n         AGO   .NOERR4\n.ERR4B   MNOTE 8,'&_TSTREG1 is not a valid general purpose register'\n         AGO   .NOERR4\n.ERR4C   MNOTE 8,'&_TSTREG2 is not a valid general purpose register'\n.NOERR4  ANOP\n.*\n.* Check validity of COND=TSTRC parameter\n         AIF   ('&COND' NE 'TSTRC').NOERR5\n         AIF   (K'&TSTREG EQ 0).ERROR5B\n.ERR5A   MNOTE 8,'TSTRC and TSTREG= both specified: invalid'\n.ERROR5B ANOP\n         AIF   ('&_FAIL' EQ '12').ERR5B\n         AGO   .NOERR5\n.ERR5B   MNOTE 8,'TSTRC cannot be combined with R12 for FAILed address'\n.NOERR5  ANOP\n.*\n.* Check validity of COND=SETDFT parameter\n         AIF   ('&COND' NE 'SETDFT').NOERR6\n         AIF   (K'&TSTREG EQ 0).NOERR6\n.ERR6    MNOTE 8,'SETDFT and TSTREG= both specified: invalid'\n.NOERR6  ANOP\n.*\n.* Check validity of the RCD parameter\n         AIF   (K'&RCD EQ 0 AND '&COND' NE 'TSTRC').NOERR7\n         AIF   (K'&RCD EQ 0 AND '&COND' EQ 'TSTRC').ERR7A\n         AIF   (K'&RCD NE 0 AND '&COND' NE 'TSTRC').ERR7B\n         AIF   ('&RCD' EQ 'IGNORE').NOERR7\n         AIF   ('&RCD'(1,1) EQ '(').ERR7LST\n&_RCD1   SETC  '&RCD'\n         AGO   .NOERR7E\n.ERR7LST ANOP\n         AIF   (N'&RCD EQ 0).ERR7C\n&_RCD1   SETC  '&RCD(1)'\n         AIF   (N'&RCD EQ 1).ERR7D\n&_RCD2   SETC  '&RCD(2)'\n         AIF   (N'&RCD GT 2).ERR7E\n.NOERR7E ANOP\n         CHKREG &_RCD1,g               * Valid register?\n         AIF   (&BXA_RC GT 4).ERR7F    *\n&_RCD1N  SETA  &BXA_NUMVAL             * Save register number\n         AIF   (&_RCD1N LT 2).ERR7F    *\n         AIF   (&_RCD1N GT 11).ERR7F   *\n         AIF   ('&_RCD2' EQ '').NOERR7G *\n         CHKREG &_RCD2,g               * Valid register?\n         AIF   (&BXA_RC GT 4).ERR7G    *\n&_RCD2N  SETA  &BXA_NUMVAL             * Save register number\n         AIF   (&_RCD2N LT 2).ERR7G    *\n         AIF   (&_RCD2N GT 11).ERR7G   *\n.NOERR7G ANOP\n         AIF   (&_RCD1N EQ &_RCD2N).ERR7H\n         AGO   .NOERR7\n.ERR7A   MNOTE 4,'RCD parameter defaults to IGNORE'\n         AGO   .NOERR7\n.ERR7B   MNOTE 4,'RCD parameter ignored, valid only for ABND TSTRC'\n         AGO   .NOERR7\n.ERR7C   MNOTE 4,'RCD parameter defaults to IGNORE: sublist is empty'\n         AGO   .NOERR7\n.ERR7D   MNOTE 8,'RCD sublist contains only 1 parameter'\n         AGO   .NOERR7\n.ERR7E   MNOTE 4,'RCD sublist contains more than 2 parameters; remainde*\n               r ignored'\n         AGO   .NOERR7\n.ERR7F   MNOTE 8,'First RCD subparm specifies invalid reg. Use R2-R11'\n         AGO   .NOERR7\n.ERR7G   MNOTE 8,'Second RCD subparm specifies invalid reg. Use R2-R11'\n         AGO   .NOERR7\n.ERR7H   MNOTE 8,'First and second RCD subparms specify same register'\n.NOERR7  ANOP\n.*\n.* Generate label\n&LABEL   LABEL ,                       * User abend routine\n.*\n.* Handling of COND=SETDFT\n         AIF   ('&COND' NE 'SETDFT').NODFT\n&BXA_ABND_DFT SETC '&ABEND'\n         MEXIT\n.NODFT   ANOP\n.*\n.* Apply default if abend-label omitted\n&_ABEND  SETC  '&BXA_ABND_DFT'\n         AIF   (K'&ABEND EQ 0).USEDFT\n&_ABEND  SETC  '&ABEND'\n.USEDFT  ANOP\n.*\n.* Add &_ABEND to BXA_ABND table\n&I       SETA  0\n.LOOP1   ANOP\n&I       SETA  &I+1                    * Point to next element\n         AIF   (&I GT N'&BXA_ABND).LOOP1AD * Not in table: Add element\n         AIF   ('&_ABEND' EQ '&BXA_ABND(&I)').LOOP1OK * Found: done\n         AGO   .LOOP1                  * Go search remainder of table\n.LOOP1AD ANOP  ,                       * &I points beyond last used elm\n&BXA_ABND(&I) SETC '&_ABEND'           * Put label into next element\n.LOOP1OK ANOP\n.*\n.* Generate code for COND=TSTRC\n         AIF   ('&COND' NE 'TSTRC').NORC\n         AIF   ('&_RCD1' EQ '').RCDIGNR\n         LTR   &_RCD1,R15              * Test returncode & Save in reg\n         AGO   .RCDTSTD\n.RCDIGNR ANOP  ,                       * Returncode can be ignored\n         LTR   R15,R15                 * Test returncode\n.RCDTSTD ANOP  ,                       * Returncode has been tested\n         BZ    _ABND&SYSNDX            * Retcd=0: skip abend\n         AIF   ('&_RCD2' EQ '').RSNIGNR\n         LR    &_RCD2,R0               * Copy reasoncode\n.RSNIGNR ANOP\n         L     R15,=AL4(&_ABEND)       * Retrieve ABEND-routine address\n         BASR  &FAIL,R15               * And branch to it\n_ABND&SYSNDX LABEL\n         MEXIT\n.NORC    ANOP\n.*\n.* Generate test for TSTREG=(reg1,reg2)\n         AIF   (K'&TSTREG EQ 0).NOTEST\n         LTR   &_TSTREG1,&_TSTREG2     * Test value (return value?)\n.NOTEST  ANOP\n.*\n.* In-line code for generating a user abend\n         AIF   (K'&COND EQ 0).BAS\n&OPCD    SETC  'BAS&COND'              * Generate conditional BAS\n         &OPCD &FAIL,&_ABEND,          * Conditional branch to abend   *\n               TYPE=REMOTE             * which is a remote routine\n         AGO   .MEND\n.*\n.BAS     ANOP\n         L     R15,=AL4(&_ABEND)       * Retrieve ABEND-routine address\n         BASR  &FAIL,R15               * And branch to it\n.*\n.MEND    MEND\n./ ADD NAME=ABNDPGM  0100-20096-20096-0111-00148-00148-00000-BIXSMAC 30\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates an out-of-line routine that abends the program\n.*   with a specified return code, normally the failing address\n.* The generated routine will normally be called thru the ABND-macro.\n.*\n&LABEL   ABNDPGM &CODE=,               * User Abend code               *\n               &REASON=R14             * Reasoncode (dft: reg 14)\n.*\n.* &CODE specifies the user abend code to generate on the ABEND macro.\n.* &REASON specifies the register that contains the reason code,\n.*         normally the failing address. When omitted defaults to R14.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Return code from CHKLIC\n         CHKLIC ABNDPGM                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Define variables\n         GBLC  &SYSASCE                * Current ASC environment\n         GBLC  &BXA_SUBR               * Current subroutine name\n         GBLC  &BXA_ABNDPGM(50)        * Usable targets\n         GBLB  &SP_SHOWALL             * SYSPARM option\n         LCLA  &I                      * Index into BXA_ABNDPGM\n         LCLC  &SAV_ASCE               * Saved ASC environment value\n.*\n.* Check the LABEL parameter\n         AIF   (K'&LABEL NE 0).NOERR0\n.ERR0    MNOTE 8,'LABEL parameter not specified'\n.NOERR0  ANOP\n.*\n.* Check the CODE parameter\n         AIF   (K'&CODE NE 0).NOERR1\n.ERR1    MNOTE 8,'CODE parameter not specified'\n.NOERR1  ANOP\n.*\n.* Check the Subroutine name\n         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR2\n.ERR2    MNOTE 8,'ABNDPGM must not be issued within a subroutine'\n.NOERR2  ANOP\n.*\n.* Check the reason parameter\n         AIF   ('&REASON' EQ 'R15').ERR3\n         AIF   ('&REASON' EQ 'RF').ERR3\n         AIF   ('&REASON' EQ '15').ERR3\n         AGO   .NOERR3\n.ERR3    MNOTE 8,'Reasoncode cannot be passed in register 15'\n.NOERR3  ANOP\n.*\n.* Add &LABEL (if specified) to BXA_ABNDPGM table\n         AIF   (K'&LABEL EQ 0).LOOP1OK * If empty skip loop\n&I       SETA  0\n.LOOP1   ANOP\n&I       SETA  &I+1                    * Point to next element\n         AIF   (&I GT N'&BXA_ABNDPGM).LOOP1AD * Not in table: Add elm\n         AIF   ('&ABEND' EQ '&BXA_ABNDPGM(&I)').LOOP1OK * Found: done\n         AGO   .LOOP1                  * Go search remainder of table\n.LOOP1AD ANOP  ,                       * &I points beyond last used elm\n&BXA_ABNDPGM(&I) SETC '&LABEL'         * Put label into next element\n.LOOP1OK ANOP\n.*\n* Out-of-line code for generating a user abend\n&LABEL   LABEL ,                       * User abend routine\n         PUSH  USING                   * Save USNIG status\n         DROP  ,                       * No valid USINGs anymore\n         LR    R12,R15                 * Copy entry point address\n         USE   &LABEL,R12              * R12 contains routine address\n.*\n.* Switch to primary mode\n&SAV_ASCE SETC '&SYSASCE'              * Save ASC-environment\n         SAC   0                       * Switch to primary mode\n         SYSSTATE ASCENV=P             * Indicate primary mode\n*\n         LA    &REASON,0(,&REASON)     * Remove garbage bit(s)\n         ABEND &CODE,                  * Internal error                *\n               REASON=(&REASON),       *   reasoncode=failing address  *\n               DUMP,                   *   create a dump               *\n               DUMPOPT=_&LABEL._OPT    *   as specified\n*\n_&LABEL._OPT LABEL F                   * Re-align on fullword\n         SNAP  DCB=0,                  * Use standard DCB              *\n               PDATA=(PSW,REGS),       * Just PSW and Registers        *\n               SDATA=SUM,              * And a summary dump            *\n               MF=L\n*\n         POP   USING                   * Restore using status\n         EJECT ,                       * Force heading with USINGs\n.*\n.* Reset to original ASC mode\n         AIF   ('&SAV_ASCE' EQ 'P').MEND\n         SYSSTATE ASCENV=&SAV_ASCE\n.*\n.MEND    MEND\n./ ADD NAME=BALC     0100-20096-20096-0111-00163-00163-00000-BIXSMAC 30\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on condition\n.*\n&LABEL   BALC  &COND,                  * Condition                     *\n               &REG,                   * Register for return address   *\n               &DEST,                  * Destination address or (reg)  *\n               &TYPE=LOCAL             * BAL/BALR\n.*\n.* &COND specifies on which condition the BAL is to be executed\n.*       valid values are:  E,  H,  L,  M,  O,  P,  Z, and\n.*                         NE, NH, NL, NM, NO, NP, NZ\n.* &REG  Specifies the register to contain the return address\n.* &DEST Specifies the address to branch to. If specified as a\n.*       (register) a BALR will be generated in stead of a BAL.\n.* &TYPE Specifies whether the designated routine is reached thru\n.*       a local (BAL) branch or a remote (BALR) branch\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALC                   * Check license acceptance\n         AIF    (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Check the condition parameter\n         AIF   ('&COND' EQ 'E').NOERR1\n         AIF   ('&COND' EQ 'NE').NOERR1\n         AIF   ('&COND' EQ 'Z').NOERR1\n         AIF   ('&COND' EQ 'NZ').NOERR1\n         AIF   ('&COND' EQ 'H').NOERR1\n         AIF   ('&COND' EQ 'NH').NOERR1\n         AIF   ('&COND' EQ 'L').NOERR1\n         AIF   ('&COND' EQ 'NL').NOERR1\n         AIF   ('&COND' EQ 'M').NOERR1\n         AIF   ('&COND' EQ 'NM').NOERR1\n         AIF   ('&COND' EQ 'O').NOERR1\n         AIF   ('&COND' EQ 'NO').NOERR1\n         AIF   ('&COND' EQ 'P').NOERR1\n         AIF   ('&COND' EQ 'NP').NOERR1\n.ERR1    MNOTE 8,'First parameter specified unknown condition mnemonic'\n.NOERR1  ANOP\n.*\n.* Check the register value specified\n         AIF   ('&REG'(1,1) NE '(').NOERR2\n         AIF   (N'&REG EQ 0).ERR2A\n         AIF   (N'&REG GT 1).ERR2B\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'Second parm specifies no registers in sublist'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Second parm specifies more than 1 register in sublist*\n               '\n.NOERR2  ANOP\n.*\n.* Check the destination parameter\n         AIF   ('&DEST'(1,1) NE '(').NOERR3\n         AIF   (N'&DEST EQ 0).ERR3A\n         AIF   (N'&DEST GT 1).ERR3B\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'Third parm specifies no registers in sublist'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'Third parm specifies more than 1 register in sublist'\n.NOERR3  ANOP\n.*\n.* Check the TYPE parameter\n         AIF   ('&TYPE' EQ 'LOCAL').NOERR4\n         AIF   ('&TYPE' EQ 'REMOTE').NOERR4\n.ERR4    MNOTE 8,'TYPE parameter must be LOCAL or REMOTE'\n.NOERR4  ANOP\n.*\n.* Extract register to use from REG-parameter\n         LCLC  &_REG\n&_REG    SETC  '&REG'\n         AIF   ('&REG'(1,1) NE '(').REGOK\n&_REG    SETC  '&REG(1)'\n.REGOK   ANOP\n.*\n.* Create Bx opcode to use if condition not met\n         LCLC  &OPCD\n         AIF   (K'&COND EQ 1).OPCD1\n.* Condition is Nx --> create a Bx opcode\n&OPCD    SETC  'B'.'&COND'(2,1)\n         AGO   .OPCDOK\n.OPCD1   ANOP\n.* Condition is x --> create a BNx opcode\n&OPCD    SETC  'BN'.'&COND'\n.OPCDOK  ANOP\n.*\n.* Generate branch over BAL in case condition not met\n&LABEL   &OPCD _BAL&SYSNDX             * Condition not met: skip branch\n.*\n.* Generate BAL or BALR depending on DEST parameter\n         AIF   ('&DEST'(1,1) EQ '(').BALR\n         AIF   ('&TYPE' EQ 'REMOTE').REMOTE\n.* Must be a local branch: generate a BAL\n         BAL   &REG,&DEST              * Condition OK: branch\n         AGO   .EXIT\n.*\n.REMOTE  ANOP\n         L     R15,=AL4(&DEST)         * Condition OK: load terget addr\n         BALR  &REG,R15                * and branch to routine\n         AGO   .EXIT\n.*\n.BALR    ANOP\n         BALR  &REG,&DEST(1)           * Condition OK: branch\n.*\n.EXIT    ANOP\n_BAL&SYSNDX LABEL\n.*\n.MEND    MEND  ,\n./ ADD NAME=BALE     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 30\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Equal condition\n.*\n&LABEL   BALE  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  E,&REG,&LOC,            * BAL on Equal condition        *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALH     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 30\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on High condition\n.*\n&LABEL   BALH  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALH                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  H,&REG,&LOC,            * BAL on High condition         *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALL     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Low condition\n.*\n&LABEL   BALL  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALL                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  L,&REG,&LOC,            * BAL on Low condition          *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALM     0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Mixed condition\n.* Branch and Link on Minus condition\n.*\n&LABEL   BALM  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALM                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  M,&REG,&LOC,            * BAL on Mixed/Minus condition  *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALNE    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Not-Equal condition\n.*\n&LABEL   BALNE &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALNE                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  NE,&REG,&LOC,           * BAL on Not Equal condition    *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALNH    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Not-High condition\n.*\n&LABEL   BALNH &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALNH                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  NH,&REG,&LOC,           * BAL on Not High condition     *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALNL    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Not-Low condition\n.*\n&LABEL   BALNL &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALNL                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  NL,&REG,&LOC,           * BAL on Not Low condition      *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALNM    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Not-Mixed condition\n.* Branch and Link on Not-Minus condition\n.*\n&LABEL   BALNM &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALNM                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  NM,&REG,&LOC,           * BAL on Not Mixed/Minus cond.  *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALNO    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Not-Ones condition\n.* Branch and Link on No-Overflow condition\n.*\n&LABEL   BALNO &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALNO                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  NO,&REG,&LOC,           * BAL on Not Ones/Overflow cond.*\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALNP    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Not-Plus condition\n.*\n&LABEL   BALNP &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALNP                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  NP,&REG,&LOC,           * BAL on Not Plus condition     *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALNZ    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Non-Zero condition\n.*\n&LABEL   BALNZ &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALNZ                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  NZ,&REG,&LOC,           * BAL on Not Zero condition     *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALO     0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Ones condition\n.* Branch and Link on Overflow condition\n.*\n&LABEL   BALO  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALO                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  O,&REG,&LOC,            * BAL on Ones/Overflow condition*\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALP     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Plus condition\n.*\n&LABEL   BALP  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALP                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  P,&REG,&LOC,            * BAL on Plus condition         *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BALZ     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Link on Zero condition\n.*\n&LABEL   BALZ  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BALZ                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BALC  Z,&REG,&LOC,            * BAL on Zero condition         *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASC     0100-20096-20096-0111-00166-00166-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on condition\n.*\n&LABEL   BASC  &COND,                  * Condition                     *\n               &REG,                   * Register for return address   *\n               &DEST,                  * Destination address or (reg)  *\n               &TYPE=LOCAL             * BAS/BASR\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASC                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &_REG                   *\n         LCLC  &OPCD                   * Opcode\n         LCLC  &ENDLAB                 * Skip label\n.*\n.* &COND specifies on which condition the BAS is to be executed\n.*       valid values are:  E,  H,  L,  M,  O,  P,  Z, and\n.*                         NE, NH, NL, NM, NO, NP, NZ\n.* &REG  Specifies the register to contain the return address\n.* &DEST Specifies the address to branch to. If specified as a\n.*       (register) a BASR will be generated in stead of a BAS.\n.* &TYPE Specifies whether the designated routine is reached thru\n.*       a local (BAS) branch or a remote (BASR) branch\n.*\n.* Check the condition parameter\n         AIF   ('&COND' EQ 'E').NOERR1\n         AIF   ('&COND' EQ 'NE').NOERR1\n         AIF   ('&COND' EQ 'Z').NOERR1\n         AIF   ('&COND' EQ 'NZ').NOERR1\n         AIF   ('&COND' EQ 'H').NOERR1\n         AIF   ('&COND' EQ 'NH').NOERR1\n         AIF   ('&COND' EQ 'L').NOERR1\n         AIF   ('&COND' EQ 'NL').NOERR1\n         AIF   ('&COND' EQ 'M').NOERR1\n         AIF   ('&COND' EQ 'NM').NOERR1\n         AIF   ('&COND' EQ 'O').NOERR1\n         AIF   ('&COND' EQ 'NO').NOERR1\n         AIF   ('&COND' EQ 'P').NOERR1\n         AIF   ('&COND' EQ 'NP').NOERR1\n.ERR1    MNOTE 8,'First parameter specified unknown condition mnemonic'\n.NOERR1  ANOP\n.*\n.* Check the register value specified\n         AIF   ('&REG'(1,1) NE '(').NOERR2\n         AIF   (N'&REG EQ 0).ERR2A\n         AIF   (N'&REG GT 1).ERR2B\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'Second parm specifies no registers in sublist'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Second parm specifies more than 1 register in sublist*\n               '\n.NOERR2  ANOP\n.*\n.* Check the destination parameter\n         AIF   ('&DEST'(1,1) NE '(').NOERR3\n         AIF   (N'&DEST EQ 0).ERR3A\n         AIF   (N'&DEST GT 1).ERR3B\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'Third parm specifies no registers in sublist'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'Third parm specifies more than 1 register in sublist'\n.NOERR3  ANOP\n.*\n.* Check the TYPE parameter\n         AIF   ('&TYPE' EQ 'LOCAL').NOERR4\n         AIF   ('&TYPE' EQ 'REMOTE').NOERR4\n.ERR4    MNOTE 8,'TYPE parameter must be LOCAL or REMOTE'\n.NOERR4  ANOP\n.*\n.* Extract register to use from REG-parameter\n&_REG    SETC  '&REG'\n         AIF   ('&REG'(1,1) NE '(').REGOK\n&_REG    SETC  '&REG(1)'\n.REGOK   ANOP\n.*\n.* Create Bx opcode to use if condition not met\n         AIF   (K'&COND EQ 1).OPCD1\n.* Condition is Nx --> create a Bx opcode\n&OPCD    SETC  'B'.'&COND'(2,1)\n         AGO   .OPCDOK\n.OPCD1   ANOP\n.* Condition is x --> create a BNx opcode\n&OPCD    SETC  'BN'.'&COND'\n.OPCDOK  ANOP\n.*\n.* Generate branch over BAS in case condition not met\n&ENDLAB  SETC  '_BAS&SYSNDX'\n&LABEL   &OPCD &ENDLAB                 * Condition not met: skip branch\n.*\n.* Generate BAS or BASR depending on DEST parameter\n         AIF   ('&DEST'(1,1) EQ '(').BASR\n         AIF   ('&TYPE' EQ 'REMOTE').REMOTE\n.* Must be a local branch: generate a BAS\n         BAS   &REG,&DEST              * Condition OK: branch\n         AGO   .EXIT\n.*\n.REMOTE  ANOP  ,\n         L     R15,=AL4(&DEST)         * Condition OK: load terget addr\n         BASR  &REG,R15                * and branch to routine\n         AGO   .EXIT\n.*\n.BASR    ANOP  ,\n         BASR  &REG,&DEST(1)           * Condition OK: branch\n.*\n.EXIT    ANOP  ,\n&ENDLAB  LABEL ,\n.*\n.MEND    MEND\n./ ADD NAME=BASE     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Equal condition\n.*\n&LABEL   BASE  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  E,&REG,&LOC,            * BAS on Equal condition        *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASH     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on High condition\n.*\n&LABEL   BASH  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASH                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  H,&REG,&LOC,            * BAS on High condition         *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASL     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Low condition\n.*\n&LABEL   BASL  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASL                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  L,&REG,&LOC,            * BAS on Low condition          *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASM     0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Mixed condition\n.* Branch and Save on Minus condition\n.*\n&LABEL   BASM  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASM                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  M,&REG,&LOC,            * BAS on Mixed/Minus condition  *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASNE    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Not-Equal condition\n.*\n&LABEL   BASNE &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASNE                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  NE,&REG,&LOC,           * BAS on Not Equal condition    *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASNH    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Not-High condition\n.*\n&LABEL   BASNH &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASNH                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  NH,&REG,&LOC,           * BAS on Not High condition     *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASNL    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Not-Low condition\n.*\n&LABEL   BASNL &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASNL                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  NL,&REG,&LOC,           * BAS on Not Low condition      *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASNM    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Not-Mixed condition\n.* Branch and Save on Not-Minus condition\n.*\n&LABEL   BASNM &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASNM                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  NM,&REG,&LOC,           * BAS on Not Mixed/Minus cond.  *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASNO    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Not-Ones condition\n.* Branch and Save on No-Overflow condition\n.*\n&LABEL   BASNO &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASNO                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  NO,&REG,&LOC,           * BAS on Not Ones/Overflow cond.*\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASNP    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Not-Plus condition\n.*\n&LABEL   BASNP &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASNP                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  NP,&REG,&LOC,           * BAS on Not Plus condition     *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASNZ    0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Non-Zero condition\n.*\n&LABEL   BASNZ &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASNZ                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  NZ,&REG,&LOC,           * BAS on Not Zero condition     *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASO     0100-20096-20096-0111-00071-00071-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Ones condition\n.* Branch and Save on Overflow condition\n.*\n&LABEL   BASO  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASO                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  O,&REG,&LOC,            * BAS on Ones/Overflow condition*\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASP     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Plus condition\n.*\n&LABEL   BASP  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASP                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  P,&REG,&LOC,            * BAS on Plus condition         *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BASZ     0100-20096-20096-0111-00070-00070-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Branch and Save on Zero condition\n.*\n&LABEL   BASZ  &REG,                   * Register for return address   *\n               &LOC,                   * Branch target or (reg)        *\n               &TYPE=LOCAL             *\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASZ                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BASC  Z,&REG,&LOC,            * BAS on Zero condition         *\n               TYPE=&TYPE              *\n.*\n.MEND    MEND\n./ ADD NAME=BEGSR    0100-20096-20096-0111-00370-00370-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates entry logic for subroutines\n.*\n&LABEL   BEGSR &TYPE=,                 * Nothing, ESTAE, or RETRY      *\n               &LVL=                   * ESTAE level\n.*\n.* &TYPE - if omitted or defaulted to INT, specifies a normal\n.*         (ie: INTernal) subroutine\n.*       - if ESTAE, specifies an ESTAE-type recovery routine\n.*         The ESTAE is required to specify as the user parameter the\n.*         external savearea (=R13) as set up by the PGM-macro.\n.*       - if RETRY, specifies a dedicated retry routine. For these\n.*         routines no save-area is needed, and no exit code is gen'd\n.* &LVL  - Nesting level of active ESTAE routines. Normally value\n.*         should be one, except for ESTAE's that are to protect\n.*         another (active) ESTAE.\n.*\n.* Remark: Save area usage for ESTAE-type subroutines differs somewhat\n.*         from the normal SA standards. It takes two inteernal SA's:\n.*         the first is used to store regsters R14-R12 from the\n.*         external SA, the second is used to store registers R14-R2,\n.*         R3 with the contents of R13, R4-R6 with the contents of the\n.*         first three fullwords of the external SA, and R7-R12 with\n.*         garbage. The external SA is then available for reuse and\n.*         can be addressed thru R13 in the usual way.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BEGSR                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_PGM                * PGM macro included?\n         GBLB  &BXA_MAC_MAPPSA         * PSA mapping included?\n         GBLC  &BXA_ENTRY              * Entry parm of PGM-macro\n         GBLC  &BXA_USE_R12            * USING label for R12\n         GBLC  &BXA_WALAB              * USING label for workarea\n         GBLC  &BXA_SUBR               * Current subroutine name\n         GBLC  &BXA_SUBRTP             * Current subroutine type\n         GBLC  &BXA_SRUNAM(50)         * Array with used subr names\n         GBLB  &BXA_SRUSVC(50)         * Array with used subr SVC-modes\n         GBLC  &BXA_SRUASC(50)         * Array with used subr ASC-modes\n         GBLC  &BXA_SRDNAM(50)         * Array with defined subroutines\n         GBLB  &BXA_SRDDUP(50)         * Multiple def.subr. indicators\n         GBLC  &BXA_SRDTYP(50)         * Types of defined subroutines\n         GBLA  &BXA_SRNAML             * Max subr name length\n         GBLC  &BXA_SR_CALLER(50)      * Array with callers of subrs\n         GBLC  &BXA_SR_CALLED(50)      * Array with called subrs\n         GBLC  &BXA_USEC_ROUT(50)      * Routines with SCOPE=CALLED\n         GBLC  &BXA_USEC_ARGL(50)      * Labels for SCOPE=CALLED\n         GBLC  &BXA_USEC_ARG1(50)      * DSECTs for SCOPE=CALLED\n         GBLC  &BXA_USEC_ARG2(50)      * Bases for SCOPE=CALLED\n         GBLC  &BXA_PGM_LABEL          * Label used by PGM macro\n         GBLB  &BXA_SVCMODE            * Current SVC-mode\n         GBLC  &SYSASCE                * Current ASC-mode\n         LCLA  &I                      * Index into BXA_SRDNAM\n         LCLB  &SRDDUP                 * On if &LABEL is a duplicate\n         LCLC  &_TYPE                  * Type of subroutine\n         LCLC  &_LABEL                 * New label if LABEL not unique\n         LCLC  &_REG                   * Workreg to find internal SA\n         LCLB  &BYMAIN                 * On if &LABEL called by *MAIN\n         LCLB  &PASS2                  * On when doing 2nd SA (ESTAE)\n.*\n.* PGM must have been included\n         AIF   (&BXA_PGM).NOERR0A\n         MNOTE 8,'PGM macro must be coded before using BEGSR/ENDSR'\n         MEXIT\n.NOERR0A ANOP\n.*\n.* Check that the structured programming stack is empty\n         CHK_STACK RESET=YES           *\n.*\n.* BEGSR may not be issued within another subroutine\n         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR1\n.ERR1    MNOTE 8,'Nested subroutine definition or missing ENDSR'\n.NOERR1  ANOP\n.*\n.* Check the LABEL parameter\n         AIF   (K'&LABEL EQ 0).ERR2A\n         AIF   ('&LABEL' EQ '*MAIN').ERR2B\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'Required label parameter is missing'\n         MEXIT\n.ERR2B   MNOTE 8,'Subroutine name ''*MAIN'' is invalid'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* Check the TYPE parameter\n&_TYPE   SETC  '&TYPE'\n         AIF   ('&TYPE' EQ 'INT').NOERR3\n         AIF   ('&TYPE' EQ 'ESTAE').NOERR3\n         AIF   ('&TYPE' EQ 'RETRY').NOERR3\n         AIF   (K'&TYPE NE 0).ERR3\n&_TYPE   SETC  'INT'\n         AGO   .NOERR3\n.ERR3    MNOTE 8,'TYPE parameter must be INT, ESTAE, RETRY, or omitted'\n.NOERR3  ANOP\n.*\n.* Check the LVL parameter\n         AIF   ('&TYPE' EQ 'ESTAE' AND K'&LVL EQ 0).ERR4A\n         AIF   ('&TYPE' EQ 'ESTAE' AND K'&LVL NE 0).NOERR4B\n         AIF   (K'&LVL EQ 0).NOERR4\n         AGO   .ERR4B\n.ERR4A   MNOTE 8,'LVL parameter missing on ESTAE-type subroutine'\n         AGO   .NOERR4\n.ERR4B   MNOTE 4,'LVL parameter ignored: valid only with ESTAE-type sub*\n               routines'\n.NOERR4B ANOP\n         AIF   (K'&LVL NE 1).ERR4C     * Max 1 char\n         AIF   ('&LVL' LT '0' OR '&LVL' GT '9').ERR4D * Numeric?\n         AIF   ('&LVL' EQ '0').ERR4E   * 0 is invalid\n         AIF   ('&LVL' GT '4').ERR4F   * Too many levels\n         AGO   .NOERR4\n.ERR4C   MNOTE 8,'LVL parameter contains more than 1 character'\n         AGO   .NOERR4\n.ERR4D   MNOTE 8,'LVL parameter not a valid digit'\n         AGO   .NOERR4\n.ERR4E   MNOTE 8,'LVL parameter must not be 0'\n         AGO   .NOERR4\n.ERR4F   MNOTE 8,'LVL parameter should not exceed 4'\n.NOERR4  ANOP\n.*\n.* Check that the subroutine name does not occur in array BXA_SRDNAM\n&_LABEL  SETC  '&LABEL'                *\n&I       SETA  0                       * Start loop\n.LOOP0   ANOP\n&I       SETA  &I+1                    * Point to next entry\n         AIF   ('&BXA_SRDNAM(&I)' EQ '').LOOP0OK * End of table\n         AIF   ('&BXA_SRDNAM(&I)' EQ '&LABEL').LOOP0F * Found\n         AGO   .LOOP0                  * Go process next entry\n.LOOP0F  ANOP  ,                       * Matching entry found\n&SRDDUP  SETB  1                       * Signal this is a duplicate\n&_LABEL  SETC  '&LABEL._&SYSNDX'       * Create unique label\n&I       SETA  1+N'&BXA_SRDNAM         * Point beyond last entry\n.LOOP0OK ANOP  ,                       * &I now points to empty entry\n.*\n.* Add subroutine name to array\n&BXA_SRDNAM(&I) SETC '&LABEL'          * Add entry,\n&BXA_SRDDUP(&I) SETB (&SRDDUP)         *   copy duplicate status\n&BXA_SRDTYP(&I) SETC '&_TYPE'.'&LVL'   *   and subroutine type\n         AIF   (K'&LABEL LE &BXA_SRNAML).NAMLOK * Check name length\n&BXA_SRNAML SETA K'&LABEL              * Increase max. name length\n         AIF   (K'&LABEL GE 5).NAMLOK  * Max. name length must at least\n&BXA_SRNAML SETA 5                     *   equal 5 (for *MaIN)\n.NAMLOK  ANOP\n.*\n.* Check the arrays BXA_SR_CALLED / BXA_SR_CALLER to see if this\n.* subroutine is ever invoked from *MAIN. If it is, include logic\n.* to test whether we must use the first internal save area. If it is\n.* never called by *MAIN code, simply use the next available save area\n.* on the chain of internal SA's.\n.*\n         AIF   ('&BXA_ENTRY' EQ 'SUBR').LOOP1OK * &BYMAIN defaults to 0\n&I       SETA  0                       * I indexes BXA_SR_CALLED/CALLER\n.LOOP1   ANOP  ,                       * Loop thru SR XREF tables\n&I       SETA  &I+1                    * Point to next entry\n         AIF   (&I GT N'&BXA_SR_CALLED).LOOP1OK * End of table: endloop\n         AIF   ('&BXA_SR_CALLED(&I)' NE '&LABEL').LOOP1 * Wrong subr\n         AIF   ('&BXA_SR_CALLER(&I)' NE '*MAIN').LOOP1 * Not by *MAIN\n.LOOP1F  ANOP  ,                       * Found\n&BYMAIN  SETB  1                       * Flag by *MAIN & quit loop\n.LOOP1OK ANOP\n.*\n.* If this is an ESTAE or RETRY type subroutine, we must\n.* check the arrays BXA_SR_CALLED / BXA_SR_CALLER again to see if\n.* this subroutine has been called by any other routine (including\n.* *MAIN). These calls must now be flagged as errors.\n.*\n         AIF   ('&TYPE' EQ '').LOOP2OK\n&BYMAIN  SETB  1                       * ESTAE may be invoked by *MAIN\n&I       SETA  0                       * I indexes BXA_SR_CALLED/CALLER\n.LOOP2   ANOP  ,                       * Loop thru SR XREF tables\n&I       SETA  &I+1                    * Point to next entry\n         AIF   (&I GT N'&BXA_SR_CALLED).LOOP2OK * End of table: endloop\n         AIF   ('&BXA_SR_CALLED(&I)' NE '&LABEL').LOOP2 * Wrong subr\n         MNOTE 8,'Illegal EXSR of &TYPE type subroutine found in &BXA_S*\n               R_CALLER(&I)'\n         AGO   .LOOP2\n.LOOP2OK ANOP\n.*\n.* Set current subroutine name\n&BXA_SUBR SETC '&LABEL'\n&BXA_SUBRTP SETC '&TYPE'\n.*\n.* Generate code\n         DROP  ,                       * No valid registers\n&_LABEL  DS    0H                      * Begin SubRoutine\n&_REG    SETC  'R14'                   * Use R14 to locate int.SA\n.*\n.* For ESTAE-routines we first establish correct addressability\n         AIF   ('&TYPE' NE 'ESTAE').NOESTAE\n.* Establish correct addressability\n         LR    R12,R15                 * Copy entry-point address\n         USE   &LABEL,R12              * R12 contains routine address\n.* R13 may or may not point to a save-area: don't use!\n         SH    R2,=AL2(SAVEPRFX_LEN)   * Adjust R2 from ptr to ext.SA\n         USE   BXASAVE,R2              *   to ptr to BXASAVE area\n         L     R10,=AL4(_&BXA_PGM_LABEL._ID) * Get ptr to workarea ID\n         CLC   SAVEID,0(R10)           * Compare workarea ID\n         ABND  NE                      * Must be equal!\n*                                      * Ok: R2 is valid workarea-ptr\n         LR    R3,R13                  * Save original R13\n         LA    R13,SAVEAREA            * Point to savearea (=workarea)\n         DROP  R2                      * BXASAVE no longer needed\n*\n         USE   &BXA_WALAB,R13,         * Set workarea addressable      *\n               START=&BXA_WALAB+SAVEPRFX_LEN * upward from savearea\n         LM    R4,R6,SAVEPTRS          * Copy data from external SA\n.*\n&_REG    SETC  'R7'                    * Use R7 to locate int.SA\n&BYMAIN  SETB  1                       * *MAIN might invoke ESTAE\n         AGO   .USEOK\n.NOESTAE ANOP\n.*\n.* Set up USINGs for non-ESTAE routines\n         USE   &BXA_USE_R12,R12        * Set program addressable\n         USE   &BXA_WALAB,R13,         * Set workarea addressable      *\n               START=&BXA_WALAB+SAVEPRFX_LEN * upward from savearea\n         AIF   ('&TYPE' EQ 'RETRY').USEC\n.*\n.* Set correct SVCmode and ASC-mode for this subroutine\n&I       SETA  0                       * I indexes BXA_SRUxxx\n.LOOP4   ANOP  ,                       * Loop thru SRU... tables\n&I       SETA  &I+1                    * Point to next entry\n         AIF   (&I GT N'&BXA_SRUNAM).LOOP4NF * End of table: not found\n         AIF   ('&BXA_SRUNAM(&I)' NE '&LABEL').LOOP4 * Skip mismatch\n&BXA_SVCMODE SETB (&BXA_SRUSVC(&I))    * Copy invoker's SVC/prob. mode\n&SYSASCE SETC  '&BXA_SRUASC(&I)'       * Copy invoker's ASC mode\n         AGO   .LOOP4OK                * And done\n.LOOP4NF ANOP\n         MNOTE 1,'Subroutine defined before it is called, state may be *\n               ambiguous'\n.LOOP4OK ANOP\n.USEOK   ANOP\n*\n* Find first available internal save-area\n         AIF   ('&TYPE' EQ 'ESTAE').NOSAVR\n         ST    &_REG,SAVED&_REG        * Save Ret.addr. in current SA\n.NOSAVR  ANOP\n         AIF   (&BYMAIN).BYMAIN        * May be called by *MAIN?\n.*                                     * No: don't check for first SA\n         L     &_REG,SAVEINTU          * Point to last-used save-area\n         AGO   .CONTIN\n.BYMAIN  ANOP  ,                       * May be called by *MAIN\n         LT    &_REG,SAVEINTU          * Point to last-used save-area\n         BZ    _SUBR1ST_&SYSNDX        * If zero: use first\n.CONTIN  ANOP  ,\nINT      USE   SAVEAREA,&_REG          * Address save-area\n.PASS2   ANOP\n         LT    &_REG,INT.SAVENEXT      * Point to next internal SA\n         ABND  Z                       * No save-area: Abend\n         AIF   (NOT &BYMAIN).NBYMAIN   * May be called by *MAIN?\n.*                                     * Yes: insert code for first SA\n         B     _SUBR_OK_&SYSNDX        * If valid: go use it\n_SUBR1ST_&SYSNDX EQU *                 * Use first save-area\n         L     &_REG,SAVEINTF          * Point to first save-area\n_SUBR_OK_&SYSNDX EQU *                 * REG now a valid SA pointer\n.*\n.NBYMAIN ANOP  ,\n.*\n.* For ESTAE routines: copy external SA regs 14-12, then go allocate\n.*                     second internal SA\n.* For normal routines: Save regs 14-12 in allocated SA\n.*\n         AIF   ('&TYPE' NE 'ESTAE').SAVREGS\n         AIF   (&PASS2).SAVREGS        * Second pass completed?\n&PASS2   SETB  1                       * Start second pass\n         MVC   INT.SAVEDR14(15*L'SAVEDR14),SAVEDR14 * Copy R14-R12\n         LA    R15,&LABEL              * Point to routine EPA\n         ST    R15,INT.SAVEHDR         * Set ptr to routine\n*\n* R14-R2 still contain original values, R3 contains original R13,\n* R4-R6 contain remaining info from SAVEAREA.\n* Allocate second SA where all this stuff can be stored.\n&BYMAIN  SETB  0                       * Cannot allocate 1st SA\n         AGO   .PASS2\n.*\n.SAVREGS ANOP\n         ST    &_REG,SAVEINTU          * Save pointer to last used SA\n*\n* Save registers: REG now points to an available internal SA\n.* Register 13 is not saved because this would disrupt the chain of\n.* internal save-areas. R13 must retain its value thru all subr's.\n         AIF   ('&TYPE' EQ 'ESTAE').STMR14\n         STM   R15,R12,INT.SAVEDR15    * Save unchanged registers\n         MVC   INT.SAVED&_REG,SAVED&_REG * Copy org. value of REG\n         AGO   .DROPINT\n.*\n.STMR14  ANOP  ,                       * Save to second int.SA (ESTAE)\n         STM   R14,R12,INT.SAVEDR14    * Save original & changed regs\n.*\n.DROPINT ANOP  ,                       *\n         LA    R0,&LABEL               * Point to routine EPA\n         ST    R0,INT.SAVEHDR          * Set ptr to routine\n         DROP  INT                     * SAVEAREA (internal)\n.*\n.* USEs with SCOPE=CALLED must now be included from BXA_USEC_... tables\n.USEC    ANOP\n&I       SETA  0                       * I indexes BXA_USEC_...\n.LOOP3   ANOP  ,                       * Check all entries\n&I       SETA  &I+1                    * Point nexy entry\n         AIF   (&I GT N'&BXA_USEC_ROUT).LOOP3OK * At end: quit loop\n         AIF   ('&BXA_USEC_ROUT(&I)' NE '&LABEL').LOOP3 * Skip mismatch\n&_LABEL  SETC  '&BXA_USEC_ARGL(&I)'    * Copy label parameter\n&_LABEL  USE   &BXA_USEC_ARG1(&I),&BXA_USEC_ARG2(&I)\n         AGO   .LOOP3                  *\n.LOOP3OK ANOP  ,                       *\n.*\n.* Add USE for PSA, if PSA mapped in this program\n         AIF   (NOT &BXA_MAC_MAPPSA).NOPSA\n         USE   PSA,R0                  * PSA always valid at 0\n.NOPSA   ANOP  ,                       *\n.*\n.MEND    MEND\n./ ADD NAME=BHE      0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on High or Equal\n.*\n&LABEL   BHE   &ADR                    * Branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BC    B'1010',&ADR            * B on High or Equal condition\n.*\n.MEND    MEND\n./ ADD NAME=BHER     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on High or Equal Register\n.*\n&LABEL   BHER  &REG                    * Register for branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BCR   B'1010',&REG            * BR on High or Equal condition\n.*\n.MEND    MEND\n./ ADD NAME=BLE      0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Low or Equal\n.*\n&LABEL   BLE   &ADR                    * Branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BC    B'1100',&ADR            * B on Low or Equal condition\n.*\n.MEND    MEND\n./ ADD NAME=BLER     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Low or Equal Register\n.*\n&LABEL   BLER  &REG                    * Register for branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BCR   B'1100',&REG            * BR on Low or Equal condition\n.*\n.MEND    MEND\n./ ADD NAME=BLH      0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Low or High\n.*\n&LABEL   BLH   &ADR                    * Branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BC    B'0110',&ADR            * B on Low or High condition\n.*\n.MEND    MEND\n./ ADD NAME=BLHR     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Low or High Register\n.*\n&LABEL   BLHR  &REG                    * Register for branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BCR   B'0110',&REG            * BR on Low or High condition\n.*\n.MEND    MEND\n./ ADD NAME=BNHE     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Not High or Equal\n.*\n&LABEL   BNHE  &ADR                    * Branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BC    B'0101',&ADR            * B on Not High or Equal cond.\n.*\n.MEND    MEND\n./ ADD NAME=BNHER    0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Not High or Equal Register\n.*\n&LABEL   BNHER &REG                    * Register for branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BCR   B'0101',&REG            * BR on Not High or Equal cond.\n.*\n.MEND    MEND\n./ ADD NAME=BNLE     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Not Low or Equal\n.*\n&LABEL   BNLE  &ADR                    * Branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BC    B'0011',&ADR            * B on Not Low or Equal cond.\n.*\n.MEND    MEND\n./ ADD NAME=BNLER    0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Not Low or Equal Register\n.*\n&LABEL   BNLER &REG                    * Register for branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BCR   B'0011',&REG            * BR on Not Low or Equal cond.\n.*\n.MEND    MEND\n./ ADD NAME=BNLH     0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Not Low or High\n.*\n&LABEL   BNLH  &ADR                    * Branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BC    B'1001',&ADR            * B on Not Low or High cond.\n.*\n.MEND    MEND\n./ ADD NAME=BNLHR    0100-20096-20096-0111-00067-00067-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 2004\n.**********************************************************************\n         MACRO\n.*\n.* Branch on Not Low or High Register\n.*\n&LABEL   BNLHR &REG                    * Register for branch address\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   BCR   B'1001',&REG            * BR on Not Low or High cond.\n.*\n.MEND    MEND\n./ ADD NAME=BXAEPSW  0100-20096-20096-0111-00118-00118-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Extract current PSW\n.*\n&LABEL   BXAEPSW &REG                  * Register set to be used\n.*\n.* &REG  specifies an even register. The PSW will be placed in register\n.*       &REG and &REG+1.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC BXAEPSW                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &_REG\n         LCLC  &_REG1,&_REG2\n         LCLA  &REGN\n.*\n.* Check the REG parameter\n         AIF   (K'&REG EQ 0).ERR1A\n&_REG    SETC  '&REG'\n         AIF   ('&_REG'(1,1) NE '(').LAB1A * If enclosed in parentheses\n&_REG    SETC  '&REG(1)'               * Remove parentheses\n.LAB1A   ANOP\n         AIF   ('&_REG'(1,1) NE 'R').LAB1B * If R...\n&_REG    SETC  '&_REG'(2,*)            * Remove leading R\n&_REG1   SETC  'R'\n&_REG2   SETC  'R'\n.LAB1B   ANOP\n         AIF   ('&_REG' EQ '0').LAB1C\n         AIF   ('&_REG' EQ '00').LAB1C\n         AIF   ('&_REG' EQ '14').LAB1C\n         AGO   .ERR1B\n.LAB1C   ANOP\n&_REG1   SETC  '&_REG1'.'&_REG'\n&REGN    SETA  &_REG\n&REGN    SETA  &REGN+1\n&_REG2   SETC  '&_REG2'.'&REGN'\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'You should specify an even general purpose register'\n         MEXIT\n.ERR1B   MNOTE 8,'You can use only R0/R1 or R14/R15'\n.NOERR1  ANOP\n.*\n.* Check the number of parameters\n         AIF   (N'&SYSLIST GT 1).ERR2\n         AGO   .NOERR2\n.ERR2    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR2  ANOP\n.*\n.* Generate code\n&LABEL   LA    &_REG2,_EPSW&SYSNDX     * Load internal return address\n         LA    &_REG1,1                * Amode bit\n         SLL   &_REG1,31               *   into bit 0\n         OR    &_REG2,&_REG1           *   of the return address\n         BAKR  &_REG2,R0               * Create stack entry (nobranch)\n         LA    &_REG2,1                * Specifies PSW for ESTA\n         ESTA  &_REG1,&_REG2           * Put PSW into registers\n         PR    ,                       * Remove stack entry\n_EPSW&SYSNDX LABEL ,                   *\n.*\n.MEND    MEND\n./ ADD NAME=CASE     0100-20096-20096-0111-00143-00143-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: CASE\n.* Combines with ELSE and ENDCASE to conditionally execute code-blocks\n.*\n&LABEL   CASE  &NEST=NO                * YES to force nesting\n.*                                     * Condition in &SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC CASE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_LBL(5)         * Labels\n         GBLA  &BXA_STK_LVL(5)         * Levels\n         LCLC  &OP                     * Last opcode on stack\n         LCLC  &LBL                    * Last label on stack\n         LCLA  &LVL                    * Next level on stack\n         LCLC  &LAB                    * End-of-else label\n         LCLC  &ARGS                   * SYSLIST as a string\n         LCLA  &I                      * Stack pointer\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST EQ 0).ERR1\n         AIF   (K'&SYSLIST(1) EQ 0).ERR1\n         AGO   .NOERR1\n.ERR1    MNOTE 8,'No condition specified'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check NEST parameter\n         AIF   ('&NEST' EQ 'NO').NOERR2\n         AIF   ('&NEST' EQ 'YES').NOERR2\n.ERR2    MNOTE 8,'NEST parameter must be either YES or NO'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* If this is not the first CASE of the current level, then we\n.* must first generate a branch to the ENDCASE-statement to\n.* terminate the currently running CASE.\n         AIF   ('&NEST' EQ 'YES').NOBRANCH * Nesting a new level\n&I       SETA  &BXA_STK                * Point current stack entry\n         AIF   (&I EQ 0).NOBRANCH      * Stack is empty: we're first\n         AIF   ('&BXA_STK_OP(&I)' NE 'CASE').NOBRANCH\n.* Ok: preceding structure is another CASE at the same level\n         B     _EC_&SYSNDX             * Terminate: branch to ENDCASE\n*\n&BXA_STK_LBL(&I) LABEL ,               * Preceding CASEs all false\n&BXA_STK_LBL(&I) SETC '_EC_&SYSNDX'    * Label for ENDCASE\n.NOBRANCH ANOP\n.*\n.* Build ARGS from &SYSLIST\n&I       SETA  0                       * I indexes &SYSLIST\n.LOOP1   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AGO   .LOOP1                  * And go process next entry\n.LOOP1OK ANOP\n&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,\n.*\n.* Generate embedded IF statement\n&I       SETA  &BXA_STK                * Copy current stack pointer\n&LABEL   IF    &ARGS\n         AIF   (&I EQ &BXA_STK).MEND   * No new stack entry!\n.*\n.* Determine nesting level for this CASE statement\n&I       SETA  &BXA_STK-1              * Point to previous stack entry\n         AIF   (&I EQ 0).LVL1          * Stack empty?\n&LVL     SETA  &BXA_STK_LVL(&I)        * Copy existing level\n         AIF   ('&BXA_STK_OP(&I)' NE 'CASE').LVLUP\n.* Preceding entry was a case: nest if NEST=YES\n         AIF   ('&NEST' EQ 'NO').LVLOK * No: no change in level\n.LVLUP   ANOP  ,\n&LVL     SETA  &LVL+1                  * Increase nesting level\n         AGO   .LVLOK\n.LVL1    ANOP  ,\n&LVL     SETA  1                       * First level\n.LVLOK   ANOP  ,\n.*\n.* Modify stack to reflect CASE in stead of IF\n&I       SETA  &BXA_STK                * Point to current stack entry\n&BXA_STK_OP(&I) SETC 'CASE'            * Change IF into CASE\n&BXA_STK_LVL(&I) SETA &LVL             * Modify nesting level\n.*\n.MEND    MEND\n./ ADD NAME=CHKLIC   0100-20096-20096-0111-00101-00101-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999-2004\n.**********************************************************************\n         MACRO\n.*\n.* The assembler program accepts as a JCL-parameter a specification\n.* for the variable SYSPARM. The value entered in the JCL will be\n.* passed to a global set symbol named &SYSPARM. The value specified\n.* in the JCL is decomposed by the SYSPARM macro, which translates the\n.* specified values into settings for global SETx variables.\n.* This macro checks the validity and acceptance (by the user)\n.* of the license for the BXA macro library\n.*\n         CHKLIC &MACRO\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n.* Upon return:\n.* &BXA_RC     will contain 0 if a valid license was accepted\n.*                          4 if license (version) is not valid\n.*                          8 if license was not accepted\n.*                         12 for internal errors\n.*\n         GBLC  &SP_LICENSE             * License name / version\n         GBLC  &SP_LICSTAT             * License status\n         GBLA  &BXA_RC                 * Return code\n&BXA_RC  SETA  12                      * Assume internal error\n.*\n.* Check whether the license was accepted\n         AIF   ('&SP_LICSTAT' EQ 'IAGREE').AGREED\n&BXA_RC  SETA  8                       * Indicate not accepted\n         AGO   .LICERR\n.AGREED  ANOP  ,\n.*\n.* Check that a valid license id was entered\n         AIF   ('&SP_LICENSE' EQ 'GPL2.0').LICOK\n         AIF   ('&SP_LICENSE' EQ 'GPL3.0').LICOK\n&BXA_RC  SETA  4                       * Indicate invalid license\n         AGO   .LICERR\n.LICOK   ANOP  ,\n.*\n.* A valid license was specified and accepted\n&BXA_RC  SETA  0                       * Indicate license ok\n         AGO   .MEND\n.*\n.* Issue error message\n.LICERR  ANOP  ,\n         MNOTE &BXA_RC,'BXA macro &MACRO will not expand: no valid lice*\n               nce accepted'\n         AGO   .MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.MEND    MEND\n./ ADD NAME=CHKLIT   0100-20096-20096-0111-00290-00290-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Macro for testing whether an argument contains a valid numeric\n.*       literal value.\n.*\n.* Returns the value of the specified literal in &BXA_NUMVAL\n.* And a returncode in &BXA_RC as follows:\n.* 0 - valid literal, value is in &BXA_NUMVAL\n.* 4 - empty literal, value 0 in &BXA_NUMVAL\n.*   - or valid alternate form literal, value is in &BXA_NUMVAL\n.* 8 - invalid literal, value 0 in &BXA_NUMVAL\n.*\n         CHKLIT &VAL,                  * Value to be tested            *\n               &HEX=OK,                * Any other value disallows HEX *\n               &BIN=OK,                * Any other value disallows Bin *\n               &ALT=NOK,               * Alternate form not allowed    *\n               &MSG=NO                 * Suppress message for oversized\n.*\n.* &VAL   Specifies the value to be tested.\n.* &HEX   Specifies whether or not the supplied value may be specified\n.*        as a hexadecimal literal. Defaults to OK.\n.* &BIN   Specifies whether or not the supplied value may be specified\n.*        as a binary literal. Defaults to OK.\n.* &ALT   Specifies whether of not alternate form literals\n.*        may be specified. Defaults to NOK.\n.*        Allows the following literals:\n.*        =X'....' if HEX=OK\n.*        =B'....' if BIN=OK\n.*        =F'...' or F'...'\n.*        =H'...' or H'...'\n.* &MSG   YES/NO display message if literal is valid, but too large\n.*        to be used.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC CHKLIT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Define variables\n         GBLA  &BXA_NUMVAL             * Value of literal\n         LCLA  &I                      * Char index in VAL\n         LCLA  &J                      * temp var\n         LCLC  &C                      * A single character\n         LCLC  &_VAL                   * Text value from &VAL\n         LCLA  &VAL1,&VAL2             * Numeric value from &VAL\n         LCLA  &MAX1,MAX2              * Maximum value allowed\n         LCLA  &MIN1,MIN2              * Minimum value allowed\n         LCLA  &BASE                   * Base nr for VAL1 and VAL2\n         LCLB  &NEG                    * On if number is negative\n.*\n.* Set BASE to 1 million\n&BASE    SETA  1000000                 * VAL2/MAX2/MIN2 count millions\n&MAX1    SETA  2147                    * Max in millions\n&MAX2    SETA  483647                  * Max in units if VAL1=MAX1\n&MIN1    SETA  2147                    * Min in millions\n&MIN2    SETA  483648                  * Min in units if VAL1=MIN1\n.*\n.* Check number of parameters\n          AIF   (N'&SYSLIST LE 1).NOERR1\n.ERR1A    MNOTE 4,'More than 1 argument found: remainder ignored'\n.NOERR1   ANOP  ,                      *\n.*\n.* Empty string specified?\n         AIF   (K'&VAL NE 0).NOERR2    *\n         AGO   .RET4                   * Return with RC=4\n.NOERR2  ANOP  ,                       *\n.*\n.* Remove leading = sign if ALT=OK\n&_VAL    SETC  '&VAL'                  *\n         AIF   ('&_VAL'(1,1) NE '=').VALOK\n         AIF   ('&ALT' EQ 'NOK').RET8  * ALT=NOK: invalid\n         AIF   (K'&_VAL LT 2).RET8     * Just an =sign: invalid\n&_VAL    SETC  '&_VAL'(2,*)            * Remove leading =sign\n.VALOK   ANOP  ,                       *\n.*\n.* Check for leading minus-sign\n         AIF   ('&_VAL'(1,1) NE '-').NODASH\n&NEG     SETB  1                       * Indicate negative number\n         AIF   (K'&_VAL LT 2).RET8     * Just a -sign: invalid\n&_VAL    SETC  '&_VAL'(2,*)            * Remove leading dash\n.NODASH  ANOP  ,                       *\n.*\n.* Check whether the value is in decimal, HEX, or BIN notation\n         AIF   (K'&_VAL LT 2).DIG\n         AIF   ('&_VAL'(1,2) EQ 'X''').HEX\n         AIF   ('&_VAL'(1,2) EQ 'x''').HEX\n         AIF   ('&_VAL'(1,2) EQ 'B''').BIN\n         AIF   ('&_VAL'(1,2) EQ 'b''').BIN\n         AIF   ('&_VAL'(1,2) EQ 'F''').ALTDIG\n         AIF   ('&_VAL'(1,2) EQ 'f''').ALTDIG\n         AIF   ('&_VAL'(1,2) EQ 'H''').ALTDIG\n         AIF   ('&_VAL'(1,2) EQ 'h''').ALTDIG\n.*\n.* Digital number: Check whether each position is in the range 0-9\n.DIG     ANOP  ,                       *\n&I       SETA  0                       * Scan &_VAL for characters\n.LOOPD   ANOP  ,                       *\n&I       SETA  &I+1                    * Point previous char in VAL\n         AIF   (&I GT K'&_VAL).CHKVAL  * At end: return ok\n&C       SETC  '&_VAL'(&I,1)           * Extract next character\n&J       SETA  ('0123456789' FIND '&C') * Valid digit?\n         AIF   (&J EQ 0).RET8          * Invalid character found\n&C       SETC  '.00010203040506070809'(2*&J,2)\n&J       SETA  &C                      * Turn into numeric value\n&VAL1    SETA  10*&VAL1                * 'Shift' to make room\n&VAL2    SETA  10*&VAL2+&J             *   and add new digit at end\n         AIF   (&VAL2 LT &BASE).LOOPD  * No need to normalize\n&J       SETA  &VAL2/&BASE             * Carry over to VAL1\n&VAL1    SETA  &VAL1+&J                * Add carry over\n&VAL2    SETA  &VAL2-(&BASE*&J)        * And remove carry over\n         AIF   (&VAL1 GT &MAX1).RET8MSG * Nr is too big\n         AGO   .LOOPD                  * Invalid character found\n.*\n.* Digital number in alternate form: H'...' or F'...'\n.* Check whether properly enclosed in quotes and validity of all digits\n.ALTDIG  ANOP  ,                       *\n         AIF   ('&ALT' EQ 'NOK').RET8  * Not valid now\n&I       SETA  K'&_VAL                 *\n         AIF   (&I LT 4).RET8          * Too short to be valid!\n         AIF   ('&_VAL'(2,1) NE '''').RET8 * Opening quote is ok?\n         AIF   ('&_VAL'(&I,1) NE '''').RET8 * Closing quote is ok?\n&_VAL    SETC  '&_VAL'(3,&I-3)         * Extract value string, which\n         AIF   ('&_VAL'(1,1) NE '-').DIG * Not negative: go process\n         AIF   (K'&_VAL LT 2).RET8     * Just a -sign: invalid\n&_VAL    SETC  '&_VAL'(2,*)            * Remove leading dash\n         AIF   (&NEG).RET8             * Double minus not allowed\n&NEG     SETB  1                       * Indicate negative number\n         AGO   .DIG                    * Go check remainder of nr\n.*\n.* Hexadecimal number: Check whether properly enclosed in quotes\n.*                     and validity of all digits\n.HEX     ANOP  ,                       *\n         AIF   ('&HEX' NE 'OK').RET8   * Not valid now\n         AIF   (&NEG).RET8             * Negative unsigned: impossible!\n&I       SETA  K'&_VAL                 *\n         AIF   (&I LT 4).RET8          * Too short to be valid!\n         AIF   ('&_VAL'(2,1) NE '''').RET8 * Opening quote is ok?\n         AIF   ('&_VAL'(&I,1) NE '''').RET8 * Closing quote is ok?\n&_VAL    SETC  '&_VAL'(3,&I-3)         * Extract string of digits\n.*\n.* Scan left to right and create result value\n&I       SETA  0                       * I indexes &_VAL\n.LOOPH   ANOP  ,                       *\n&I       SETA  &I+1                    * Point previous char in VAL\n         AIF   (&I GT K'&_VAL).CHKVAL  * At end: check value\n&C       SETC  '&_VAL'(&I,1)           * Extract next character\n&J       SETA  ('0123456789ABCDEFabcdef' FIND '&C')\n         AIF   (&J EQ 0).RET8          * Invalid digit found\n&C       SETC  '.00010203040506070809101112131415101112131415'(2*&J,2)\n&J       SETA  &C                      * Turn into numeric value\n&VAL1    SETA  16*&VAL1                * 'Shift' to make room\n&VAL2    SETA  16*&VAL2+&J             *   and add new digit at end\n         AIF   (&VAL2 LT &BASE).LOOPH  * No need to normalize\n&J       SETA  &VAL2/&BASE             * Carry over to VAL1\n&VAL1    SETA  &VAL1+&J                * Add carry over\n&VAL2    SETA  &VAL2-(&BASE*&J)        * And remove carry over\n         AIF   (&VAL1 GT &MAX1).RET8MSG * Nr is too big\n         AGO   .LOOPH                  * Invalid character found\n.*\n.* Binary number: Check whether properly enclosed in quotes\n.*                and validity of all digits\n.BIN     ANOP  ,                       *\n         AIF   ('&BIN' NE 'OK').RET8   * Not valid now\n         AIF   (&NEG).RET8             * Negative unsigned: impossible!\n&I       SETA  K'&_VAL                 *\n         AIF   (&I LT 4).RET8          * Too short to be valid!\n         AIF   ('&_VAL'(2,1) NE '''').RET8 * Opening quote is ok?\n         AIF   ('&_VAL'(&I,1) NE '''').RET8 * Closing quote is ok?\n&_VAL    SETC  '&_VAL'(3,&I-3)         * Extract string of digits\n.*\n.* Scan left to right and create result value\n&I       SETA  0                       * I indexes &_VAL\n.LOOPB   ANOP  ,                       *\n&I       SETA  &I+1                    * Point previous char in VAL\n         AIF   (&I GT K'&_VAL).CHKVAL  * At end: check value\n&C       SETC  '&_VAL'(&I,1)           * Extract next character\n&J       SETA  ('01' FIND '&C')        *\n         AIF   (&J EQ 0).RET8          * Invalid digit found\n&C       SETC  '.0001'(2*&J,2)\n&J       SETA  &C                      * Turn into numeric value\n&VAL1    SETA  2*&VAL1                 * 'Shift' to make room\n&VAL2    SETA  2*&VAL2+&J              *   and add new digit at end\n         AIF   (&VAL2 LT &BASE).LOOPB  * No need to normalize\n&J       SETA  &VAL2/&BASE             * Carry over to VAL1\n&VAL1    SETA  &VAL1+&J                * Add carry over\n&VAL2    SETA  &VAL2-(&BASE*&J)        * And remove carry over\n         AIF   (&VAL1 GT &MAX1).RET8MSG * Nr is too big\n         AGO   .LOOPB                  * Invalid character found\n.*\n.* Number seems to be ok: Value within range?\n.CHKVAL  ANOP  ,                       *\n         AIF   (&NEG).CHKVALN          *\n         AIF   (&VAL1 LT &MAX1).RET0   * Small enough\n         AIF   (&VAL1 GT &MAX1).RET8MSG * Too large\n         AIF   (&VAL2 LE &MAX2).RET0   * Will fit snugly\n         AGO   .RET8MSG                * Too large after all\n.CHKVALN ANOP  ,                       * Check negative literal size\n         AIF   (&VAL1 LT &MIN1).RET0   * Small enough\n         AIF   (&VAL1 GT &MIN1).RET8MSG * Too large\n         AIF   (&VAL2 LE &MIN2).RET0   * Will fit snugly\n         AGO   .RET8MSG                * Too large after all\n.*\n.* Literal was ok: return RC=0 and value of literal\n.RET0    ANOP  ,                       *\n         AIF   (&NEG).RET0N            *\n&BXA_NUMVAL SETA (&VAL1*&BASE)+&VAL2   *\n&BXA_RC  SETA  0                       *\n         MEXIT ,                       *\n.RET0N   ANOP  ,                       * Return negative number\n&BXA_NUMVAL SETA 0-(&VAL1*&BASE)       *\n&BXA_NUMVAL SETA &BXA_NUMVAL-&VAL2     *\n&BXA_RC  SETA  0                       *\n         MEXIT ,                       *\n.*\n.* Literal was empty: return RC=4 and value of 0\n.RET4    ANOP  ,                       *\n&BXA_NUMVAL SETA 0                     *\n&BXA_RC  SETA  4                       *\n         MEXIT ,                       *\n.*\n.* Literal was invalid: return RC=8 and value of 0\n.RET8    ANOP  ,                       *\n&BXA_NUMVAL SETA 0                     *\n&BXA_RC  SETA  8                       *\n         MEXIT ,                       *\n.*\n.* Literal was valid but too large: return RC=8 and value of 0\n.RET8MSG ANOP  ,                       *\n         AIF   ('&MSG' EQ 'NO').RET8   * Suppress message\n&_VAL    SETC  (DOUBLE '&VAL')         *\n         MNOTE 4,'&_VAL is a valid literal, but it exceeds &MAX1.&MAX2'\n&BXA_NUMVAL SETA 0                     *\n&BXA_RC  SETA  8                       *\n.*\n.MEND    MEND\n./ ADD NAME=CHKMAP   0100-20096-20096-0111-00112-00112-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Checking function for parameters of MAP-macro's\n.*\n&LABEL   CHKMAP &DSECT=,               * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC CHKMAP                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Initialize variables\n&BXA_RC  SETA  0                       * Init to no error\n.*\n.* Check the LABEL parameter\n         AIF   ('&DSECT' EQ 'YES' AND K'&LABEL NE 0).ERR1\n         AGO   .NOERR1\n.ERR1    MNOTE 4,'LABEL should not be specified with DSECT=YES'\n         AIF   (&BXA_RC GE 4).NOERR1\n&BXA_RC  SETA  4\n.NOERR1  ANOP\n.*\n.* Check the DSECT parameter\n         AIF   ('&DSECT' EQ 'YES').NOERR2\n         AIF   ('&DSECT' EQ 'NO').NOERR2\n.ERR2    MNOTE 8,'DSECT parameter not YES or NO'\n         AIF   (&BXA_RC GE 8).NOERR2\n&BXA_RC  SETA  8\n.NOERR2  ANOP\n.*\n.* Check PRFX parameter\n         AIF   ('&DSECT' EQ 'YES' AND K'&PRFX NE 0).ERR3A\n         AGO   .NOERR3\n.ERR3A   MNOTE 4,'PRFX parameter specified with DSECT=YES: ignored'\n         AIF   (&BXA_RC GE 4).NOERR3\n&BXA_RC  SETA  4\n.NOERR3  ANOP\n.*\n.* For DSECT=NO either LABEL or PRFX must be specified\n         AIF   ('&DSECT' EQ 'YES').NOERR4\n         AIF   (K'&LABEL EQ 0 AND K'&PRFX EQ 0).ERR4A\n         AGO   .NOERR4\n.ERR4A   MNOTE 8,'Either LABEL or PRFX must be specified with DSECT=NO'\n         AIF   (&BXA_RC GE 8).NOERR4\n&BXA_RC  SETA  8\n.NOERR4  ANOP\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES' AND K'&CB NE 0).ERR5A\n         AGO   .NOERR5\n.ERR5A   MNOTE 4,'CB parameter specified with DSECT=YES: ignored'\n         AIF   (&BXA_RC GE 4).NOERR5\n&BXA_RC  SETA  4\n.NOERR5  ANOP\n.*\n.MEND    MEND\n./ ADD NAME=CHKNUM   0100-20096-20096-0111-00173-00173-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Macro for testing whether an argument contains a valid numeric\n.*       literal value.\n.*\n&LABEL   CHKNUM &MACRO=,               * Name of invoking macro        *\n               &NAME=,                 * Name of variable being tested *\n               &VAL=,                  * Value of variable to be tested*\n               &MSGLVL=8,              * Msglvl in case of error       *\n               &HEX=OK                 * Any other value disallows HEX\n.*\n.* &MACRO specifies the name of the invoking macro. This name will\n.*        be used on any MNOTEs generated.\n.* &NAME  Specifies the name of the variable being tested. This name\n.*        will be used on any MNOTEs generated.\n.* &VAL   Specifies the value to be tested.\n.* &MSGLVL Specifies the MSGLVL to use when generating an MNOTE.\n.*        Value can be 0-255, * or **. Defaults to 8. If specified as\n.*        ** messages will be suppressed.\n.* &HEX   Specifies whether or not the supplied value may be specified\n.*        as a hexadecimal literal. Defaults to OK.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC CHKNUM                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Define global to return SETA-value if VAL is found valid\n          GBLA  &BXA_NUMVAL\n&BXA_NUMVAL SETA 0                     * Reset to default 0\n.*\n.* Define index field to loop through &VAL field\n         LCLA  &I\n.*\n.* Check the MACRO parameter\n         AIF   (K'&MACRO NE 0).NOERR1\n         AIF   ('&MSGLVL' EQ '**').NOERR1\n.ERR1    MNOTE 8,'MACRO parameter not specified'\n.NOERR1  ANOP\n.*\n.* Check the NAME parameter\n         AIF   (K'&NAME NE 0).NOERR2\n         AIF   ('&MSGLVL' EQ '**').NOERR2\n.ERR2    MNOTE 8,'NAME parameter not specified'\n.NOERR2  ANOP\n.*\n.* Check the VAL parameter\n         AIF   (K'&VAL NE 0).NOERR3\n.ERR3    MNOTE 8,'VAL parameter not specified'\n.NOERR3  ANOP\n.*\n&LABEL   LABEL ,\n.*\n.* If argument is empty: issue error\n         AIF   (K'&VAL NE 0).NOTEMPTY\n         AIF   ('&MSGLVL' EQ '**').MEND\n         MNOTE &MSGLVL,'&NAME in &MACRO contains no value'\n         MEXIT\n.NOTEMPTY ANOP\n.*\n.* Check whether the value is in HEX notation\n         AIF   ('&VAL'(1,1) EQ 'X').HEX\n         AIF   ('&VAL'(1,1) EQ 'x').INVALID_HEX1\n.*\n.* Digital number: Check whether each position is in the range 0-9\n&I       SETA  K'&VAL\n.LOOP_D  ANOP\n         AIF   ('&VAL'(&I,1) LT '0').INVALID_DEC1\n         AIF   ('&VAL'(&I,1) GT '9').INVALID_DEC1\n&I       SETA  &I-1\n         AIF   (&I GT 0).LOOP_D\n.* VAL is valid: put value into return field and exit\n&BXA_NUMVAL SETA &VAL\n         MEXIT\n.*\n.* Hexadecimal number: Check whether quotes have been in the range 0-9\n.*                     or A-F.\n.HEX     ANOP\n&I       SETA  K'&VAL\n         AIF   (&I LT 4).INVALID_HEX1\n         AIF   ('&VAL'(2,1) NE '''').INVALID_HEX1\n         AIF   ('&VAL'(&I,1) NE '''').INVALID_HEX1\n&I       SETA  &I-1\n.*\n.LOOP_H  ANOP\n         AIF   ('&VAL'(&I,1) LT 'A').INVALID_HEX2\n         AIF   ('&VAL'(&I,1) LE 'F').VALID_HEX\n         AIF   ('&VAL'(&I,1) LT '0').INVALID_HEX2\n         AIF   ('&VAL'(&I,1) GT '9').INVALID_HEX2\n.VALID_HEX ANOP\n&I       SETA  &I-1\n         AIF   (&I GT 2).LOOP_H\n.* VAL is valid: put value into return field and exit\n&BXA_NUMVAL SETA &VAL\n         MEXIT\n.*\n.* Invalid character detected: issue error\n.INVALID_DEC1 ANOP\n         AIF   ('&MSGLVL' EQ '**').MEND\n         MNOTE &MSGLVL,'&NAME in &MACRO contains invalid decimal digit(*\n               s)'\n         MEXIT\n.*\n.* Invalid hex-specification detected: issue error\n.INVALID_HEX1 ANOP\n         AIF   ('&MSGLVL' EQ '**').MEND\n         MNOTE &MSGLVL,'&NAME in &MACRO contains invalidly specified he*\n               xadecimal number'\n         MEXIT\n.*\n.* Invalid hex character detected: issue error\n.INVALID_HEX2 ANOP\n         AIF   ('&MSGLVL' EQ '**').MEND\n         MNOTE &MSGLVL,'&NAME in &MACRO contains invalid hexadecimal di*\n               git(s)'\n         MEXIT\n.*\n.MEND    MEND\n./ ADD NAME=CHKREG   0100-20096-20096-0111-00138-00138-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro checks if the argument given is a register\n.*\n.* &BXA_RC will contain 0 if &REG is an EQUated register\n.* &BXA_RC will contain 4 if &REG is a valid number 0-15\n.* &BXA_RC will contain 8 if &REG is not a valid register\n.* &BXA_NUMVAL will contain the register number if &BXA_RC is 0 or 4\n.*\n         CHKREG &REG,                  * Value to be tested            *\n               &TYPE                   * Type of register required\n.*\n.* &REG   Name or number to be tested for valid register number\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC CHKREG                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_NUMVAL             * Register number\n         LCLA  &I\n.*\n.* Check the TYPE parameter\n         AIF   (K'&TYPE EQ 0).NOERR1\n         AIF   ('&TYPE' EQ 'g').NOERR1\n         AIF   ('&TYPE' EQ 'a').NOERR1\n         AIF   ('&TYPE' EQ 'f').NOERR1\n         AIF   ('&TYPE' EQ 'c').NOERR1\n.ERR1A   MNOTE 8,'TYPE of register must be g, a, f, or c'\n.NOERR1  ANOP\n.*\n.* To be a valid register, &REG must either be a literal number\n.* or an EQUated register. The former must be tested explicitly,\n.* the latter can be tested against the register type tables.\n         AIF   (K'&REG EQ 0).RETURN8   * No register: invalid\n&I       SETA  ('&REG' FIND '+-*/(.,)') * Complex or simple expression?\n         AIF   (&I GT 0).RETURN8       * Not a simple expression\n&I       SETA  ('&REG' FIND '''')      * Contains a quote?\n         AIF   (&I GT 0).LITERAL       * Yes, must be a literal\n&I       SETA  ('0123456789' FIND '&REG'(1,1)) * Decimal constant?\n         AIF   (&I GT 0).LITERAL       * Yes, must be a literal\n.*\n.* REG is a valid EQU-name. Check its type.\n         GBLC  &(BXA_REGT_&REG)        * Declare type field of &REG\n         AIF   ('&(BXA_REGT_&REG)' EQ '').RETURN8 * Not a register\n         AIF   (K'&TYPE EQ 0).RETURN0  * No explicit type: return ok\n         AIF   ('&(BXA_REGT_&REG)' EQ '&TYPE').RETURN0 * Type ok\n         AGO   .RETURN8                * Register is of wrong type\n.*\n.* &reg appears to be a literal. Check whether it designates a valid\n.* register between 0 and 15. (0, 2, 4, or 6 for floating point reg.)\n.LITERAL ANOP  ,                       *\n         CHKLIT &REG                   * Valid literal?\n         AIF   (&BXA_RC NE 0).RETURN8  * No invalid\n         AIF   (&BXA_NUMVAL LT 0).RETURN8 * Negative regs dont exist\n         AIF   (&BXA_NUMVAL GT 15).RETURN8 * 15 is max register number\n         AIF   ('&TYPE' NE 'f').RETURN4 * This is a valid register\n         AIF   (&BXA_NUMVAL EQ 0).RETURN4 * Check that this is an\n         AIF   (&BXA_NUMVAL EQ 2).RETURN4 *   existing floating point\n         AIF   (&BXA_NUMVAL EQ 4).RETURN4 *   register number.\n         AIF   (&BXA_NUMVAL EQ 6).RETURN4 *\n         AGO   .RETURN8                * Return invalid\n.*\n.* Register specified is not a valid register\n.RETURN8 ANOP\n&BXA_NUMVAL SETA 0                     * No valid register\n&BXA_RC  SETA 8                        * Return error\n         MEXIT\n.*\n.* Register specified is a numeric literal number 0-15\n.* &BXA_NUMVAL already contains the register number\n.RETURN4 ANOP\n&BXA_RC  SETA 4                        * Return warning\n         MEXIT\n.*\n.* Register specified is a declared register (of any type)\n.RETURN0 ANOP\n         GBLA  &(BXA_REGN_&REG)        * Declare type field of &REG\n&BXA_NUMVAL SETA &(BXA_REGN_&REG)      * Return register number\n&BXA_RC  SETA 0\n.*\n.MEND    MEND\n./ ADD NAME=CLEAR    0100-20096-20096-0111-00434-00434-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Clear an area of storage\n.*\n.* For TYPE=LONG, registers R0, R1, and R15 will be used\n.* For TYPE=SHORT, all registers retain their values\n.*\n&LABEL   CLEAR &AREA,                  * Area to be cleared            *\n               &FILL,                  * Filler to use for clearing    *\n               &TYPE                   * LONG, SHORT, XC\n.*\n.* &AREA  specifies the area of storage to be cleared\n.*        can be specified as a label, or as (label,length).\n.*            label and/or length may be specified as (reg)\n.*        May also be specified as (gpr,*ADDR) to clear high-order bit\n.*            in specified general purpose register.\n.*        If area specifies R0-R15 or AR0-AR15 and &FILL and &TYPE are\n.*        both omitted, then the designated register will be cleared\n.*        to hex zeroes.\n.* &FILL  specifies the filler value to use, defaults to blanks for\n.*        character fields, otherwise to binary zeros.\n.* &TYPE  SHORT for areas up to 257 bytes in length, LONG for all other\n.*        defaults to SHORT. XC for short areas to be cleared using XC.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC CLEAR                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_NUMVAL             * Result from CHKREG/CHKNUM\n         GBLC  &SYSASCE                * ASC mode\n         LCLC  &_AREA                  * Area designation\n         LCLC  &_AREG                  * Register used as area pointer\n         LCLC  &_LEN                   * Length of area\n         LCLC  &_LREG                  * Register used as length ptr\n         LCLC  &_FILL                  * Filler to use\n         LCLC  &_TYPE                  * Type indication: SHORT/LONG\n         LCLC  &EREG                   * Even register of a pair\n         LCLC  &OREG                   * Odd register of a pair\n         LCLC  &R0                     * YES/NO allow use of R0\n         LCLA  &I                      *\n         LCLB  &BIT0                   * BIT0 option specified\n.*\n.* Check Area parameter\n&_AREA   SETC  '&AREA'                 * Assume a single operand\n         AIF   (K'&AREA NE 0).NOERR1A\n.ERR1A   MNOTE 8,'First operand must specify area to clear'\n.NOERR1A ANOP\n         AIF   ('&AREA'(1,1) NE '(').DFTLEN\n.* Sublist notation: must specify location and length\n         AIF   (N'&AREA EQ 0).ERR1B\n         AIF   (N'&AREA EQ 1).ERR1C\n         AIF   (N'&AREA GT 2).ERR1D\n&_AREA   SETC  '&AREA(1)'              * Extract area designation\n&_LEN    SETC  '&AREA(2)'              * Extract length designation\n         AGO   .NOERR1D\n.ERR1B   MNOTE 8,'First parameter invalid: empty sublist'\n         AGO   .NOERR1D\n.ERR1C   MNOTE 8,'First parameter invalid: length missing'\n         AGO   .NOERR1D\n.ERR1D   MNOTE 4,'First parameter invalid: too many sub-parameters'\n.NOERR1D ANOP\n.* If Area specified as a register: extract register\n         AIF   ('&_AREA'(1,1) NE '(').NOERR1F\n         AIF   (N'&AREA(1) EQ 0).ERR1E\n         AIF   (N'&AREA(1) GT 1).ERR1F\n&_AREG   SETC  '&AREA(1,1)'            * Extract area register\n         AGO   .NOERR1F\n.ERR1E   MNOTE 8,'First parameter invalid: missing register designation*\n               '\n         AGO   .NOERR1F\n.ERR1F   MNOTE 8,'First parameter invalid: more than 1 register specifi*\n               ed as pointer'\n.NOERR1F ANOP\n.* If Area-length specified as a register: extract register\n         AIF   ('&_LEN'(1,1) NE '(').NOERR1H\n         AIF   (N'&AREA(2) EQ 0).ERR1G\n         AIF   (N'&AREA(2) GT 1).ERR1H\n&_LREG   SETC  '&AREA(2,1)'            * Extract length register\n         AGO   .NOERR1H\n.ERR1G   MNOTE 8,'First parameter invalid: missing length designation'\n         AGO   .NOERR1F\n.ERR1H   MNOTE 8,'First parameter invalid: more than 1 register specifi*\n               ed as length'\n.NOERR1H ANOP\n.* If length specifies *ADDR area must be a general purpose register\n         AIF   ('&_LEN' NE '*ADDR').NOERR1\n&BIT0    SETB  1                       * Indicate BIT0 was specified\n         CHKREG &_AREA,g               * Is it a valid gpr?\n         AIF   (&BXA_RC GT 4).ERR1I    * No: issue error\n         AGO   .DFTLEN                 * Ok: set length by default\n.ERR1I   ANOP  ,                       *\n&_AREA   SETC  (DOUBLE '&_AREA')       *\n         MNOTE 8,'&_AREA is not a valid general purpose register'\n.DFTLEN  ANOP  ,                       *\n&I       SETA  L'&AREA                 * Default to length of field\n&_LEN    SETC  '&I'                    *   and insert into length var.\n.NOERR1  ANOP  ,\n.*\n.* Check the Fill parameter\n&_FILL   SETC  '&FILL'                 * First default to spec'd value\n         AIF   (K'&FILL EQ 0).DFT2\n         AIF   (&BIT0).ERR2E\n         AIF   (K'&FILL LT 4).ERR2A\n         AIF   ('&FILL'(1,1) EQ '(').ERR2B\n         AIF   ('&FILL'(2,1) NE '''').ERR2C\n         AIF   ('&FILL'(K'&FILL,1) NE '''').ERR2C\n         AIF   ('&FILL'(1,1) EQ 'B').NOERR2\n         AIF   ('&FILL'(1,1) EQ 'C').NOERR2\n         AIF   ('&FILL'(1,1) EQ 'X').NOERR2\n         AGO   .ERR2D\n.ERR2A   MNOTE 8,'Specified filler is not a valid literal'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Filler cannot be specified as a register'\n         AGO   .NOERR2\n.ERR2C   MNOTE 8,'Insufficient or missing quotes in literal for filler'\n         AGO   .NOERR2\n.ERR2D   MNOTE 8,'Filler must be specified as B, C, or X constant'\n         AGO   .NOERR2\n.ERR2E   MNOTE 8,'Filler must not be specified with *ADDR option'\n         AGO   .NOERR2\n.DFT2    ANOP\n&_FILL   SETC  'X''00'''               * Second default: zeroes\n         AIF   ('&_AREA'(1,1) EQ '(').NOERR2 * Ok for register\n         AIF   ('&TYPE' EQ 'XC').NOERR2 * Ok for TYPE=XC\n         AIF   (T'&_AREA NE 'C').NOERR2 * Ok for non-char data\n&_FILL   SETC  'C'' '''                * Third default: blanks\n.NOERR2  ANOP\n.*\n.* Check the TYPE parameter\n         AIF   (K'&TYPE EQ 0).NOERR3\n         AIF   (&BIT0).ERR3B\n         AIF   ('&TYPE' EQ 'SHORT').SETSHORT\n         AIF   ('&TYPE' EQ 'LONG').SETLONG\n         AIF   ('&TYPE' EQ 'XC').SETXC\n.ERR3A   MNOTE 8,'Third parameter must specify LONG, SHORT, or XC'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'Type parameter must not be specified with *ADDR optio*\n               n'\n.NOERR3  ANOP\n.*\n.* Type not given: determine value from other operands as follows:\n.* - If &AREA specifies a valid register (R0-R15), and\n.*   &FILL and &TYPE are both omitted, default to XR\n.* - If &AREA specifies a valid access register (AR0-AR15), and\n.*   &FILL and &TYPE are both omitted, default to LAE\n.* - If &AREA specifies a valid register (R0-R15), and\n.*   length specifies a valid access register default to LAE too\n.* - If length is in a register, default to LONG\n.* - if length is a valid literal, check its value\n.*   up to 257: use SHORT, beyond: use LONG\n.* - All others: default to SHORT\n.*\n         AIF   (&BIT0).SETBIT0         *\n         AIF   (K'&FILL NE 0).NOREG    * Fill specified: not a reg\n         AIF   (K'&TYPE NE 0).NOREG    * Type specified: not a reg\n         AIF   ('&AREA'(1,1) EQ '(').SLIST * Sublist may be a register\n         CHKREG &AREA,g                * Valid GPR?\n         AIF   (&BXA_RC EQ 0).SETXR    * Yes\n         CHKREG &AREA,a                * Valid AR?\n         AIF   (&BXA_RC EQ 0).SETLAE   * Yes\n         AGO   .NOREG                  * Apparently not a register\n.SLIST   ANOP  ,                       * Sublist: (reg,areg) ??\n         CHKREG &_AREA,g               * First is a GPR?\n         AIF   (&BXA_RC NE 0).NOREG    * No: not a register\n&I       SETA  &BXA_NUMVAL             * Keep register number\n         CHKREG &_LEN,a                * Second is an AR?\n         AIF   (&BXA_RC NE 0).NOREG    * No: not a register\n         AIF   (&BXA_NUMVAL EQ &I).SETLAE * Clear both GPR and AR\n         MNOTE 8,'Cannot clear &_AREA and &_LEN at the same time'\n         MEXIT ,                       *\n.* Ok: Area is definitely not a valid register\n.NOREG   ANOP  ,                       *\n         AIF   (K'&_LREG GT 0).SETLONG * Register defaults to LONG\n         CHKNUM MACRO=CLEAR,           * &_LEN a valid number?         *\n               NAME=LENGTH,            *                               *\n               VAL=&_LEN,              *                               *\n               MSGLVL=**               * No error messages\n         AIF   (&BXA_NUMVAL EQ 0).SETSHORT  * Not a num: assume SHORT\n         AIF   (&BXA_NUMVAL GT 257).SETLONG * Too long for MVC or XC\n         AIF   (&BXA_NUMVAL GT 64).SETSHORT * Too long for XC\n         AIF   ('&_FILL' EQ 'X''00''').SETXC * Use XC to clear\n         AIF   ('&_FILL' EQ 'B''00000000''').SETXC\n         AGO   .SETSHORT               * Default to SHORT\n.*\n.SETBIT0 ANOP\n&_TYPE   SETC  'BIT0'                  * BIT0: will use LA\n         AGO   .TYPEOK\n.SETXC   ANOP\n&_TYPE   SETC  'XC'                    * SHORT: will use XC\n         AGO   .TYPEOK\n.SETSHORT ANOP\n&_TYPE   SETC  'SHORT'                 * SHORT: will use MVC\n         AGO   .TYPEOK\n.SETLONG ANOP\n&_TYPE   SETC  'LONG'                  * LONG: will use MVCL\n         AGO   .TYPEOK\n.SETXR   ANOP\n&_TYPE   SETC  'XR'                    * XR: clear a register\n         AGO   .TYPEOK\n.SETLAE  ANOP\n&_TYPE   SETC  'LAE'                   * LAE: Clear an access register\n.TYPEOK  ANOP\n.*\n.* Generate code\n         AIF   ('&_TYPE' EQ 'LONG').LONG\n         AIF   ('&_TYPE' EQ 'SHORT').SHORT\n         AIF   ('&_TYPE' EQ 'XC').XC\n         AIF   ('&_TYPE' EQ 'XR').XR\n         AIF   ('&_TYPE' EQ 'LAE').LAE\n         AIF   ('&_TYPE' EQ 'BIT0').LA\n         MNOTE 12,'Internal error in CLEAR'\n         MEXIT\n.*\n.* Generate logic for TYPE=XC\n.XC      ANOP\n.* Determine which work register to use\n         AIF   (K'&_AREG NE 0 AND K'&_LREG NE 0).XCRR\n         AIF   (K'&_AREG NE 0 AND K'&_LREG EQ 0).XCRL\n         AIF   (K'&_AREG EQ 0 AND K'&_LREG NE 0).XCLR\n         AIF   (K'&_AREG EQ 0 AND K'&_LREG EQ 0).XCLL\n.*\n.XCLL    ANOP  ,                       * Area and length are literal\n         CHKLIT &_LEN                  *\n         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 1).XCLL1\n&LABEL   XC    &_AREA.(&_LEN),&_AREA   * Set whole field to zeroes\n         MEXIT ,                       *\n.XCLL1   ANOP  ,                       *\n&LABEL   MVI   &_AREA,X'00'            * Set whole field to zeroes\n         MEXIT ,                       *\n.*\n.XCLR    ANOP  ,                       * Area literal, length in reg\n&LABEL   EXXC  &_AREA.(_LREG),&_AREA   * Set area to zeroes\n         B     _CLRMVD&SYSNDX          * Branch over MVC-instruction\n         MEXIT\n.*\n.XCRL    ANOP  ,                       * Area in reg, length literal\n         CHKLIT &_LEN                  *\n         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 1).XCRL1\n&LABEL   XC    0(&_LEN,&_AREG),0(&_AREG) * Set to all zeroes\n         MEXIT ,                       *\n.XCRL1   ANOP  ,                       *\n&LABEL   MVI   0(&_AREG),X'00'         * Set to all zeroes\n         MEXIT ,                       *\n.*\n.XCRR    ANOP  ,                       * Area in reg, length in reg\n&LABEL   EXXC  0(&_LREG,&_AREG),0(&_AREG) * Set area to zeroes\n         MEXIT\n.*\n.* Generate logic for TYPE=SHORT\n.SHORT   ANOP\n.* Determine which work register to use\n         AIF   (K'&_AREG NE 0 AND K'&_LREG NE 0).SHORTRR\n         AIF   (K'&_AREG NE 0 AND K'&_LREG EQ 0).SHORTRL\n         AIF   (K'&_AREG EQ 0 AND K'&_LREG NE 0).SHORTLR\n         AIF   (K'&_AREG EQ 0 AND K'&_LREG EQ 0).SHORTLL\n.*\n.SHORTLL ANOP  ,                       * Area and length are literal\n&LABEL   MVI   &_AREA,&_FILL           * Move first filler byte\n         CHKLIT &_LEN                  *\n         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 1).MEND\n         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 2).SHORTLL2\n         MVC   1+&_AREA.(&_LEN-1),&_AREA * Propagate filler byte\n         MEXIT\n.SHORTLL2 ANOP ,                       * Length of area is 2\n         MVI   1+&_AREA,&_FILL         * Move first filler byte\n         MEXIT\n.*\n.SHORTLR ANOP  ,                       * Area literal, length in reg\n&LABEL   MVI   &_AREA,&_FILL           * Move first filler byte\n         DEC   &_LREG                  * Decrement for 1st filler byte\n         DEC   &_LREG                  * Decrement for EX\n         EXMVC 1+&_AREA.(&_LREG),&_AREA,NODEC * Length modified by EX\n         INC   &_LREG,2                * Reset length register\n         MEXIT\n.*\n.SHORTRL ANOP  ,                       * Area in reg, length literal\n&LABEL   MVI   0(&_AREG),&_FILL        * Move first filler byte\n         CHKLIT &_LEN                  *\n         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 1).MEND\n         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ 2).SHORTRL2\n         MVC   1(&_LEN-1,&_AREG),0(&_AREG) * Propagate filler byte\n         MEXIT ,                       *\n.SHORTRL2 ANOP ,                       * Length of area is 2\n         MVI   1(&_AREG),&_FILL        * Move first filler byte\n         MEXIT ,                       *\n.*\n.SHORTRR ANOP  ,                       * Area in reg, length in reg\n&LABEL   MVI   0(&_AREG),&_FILL        * Move first filler byte\n         DEC   &_LREG                  * Decrement for 1st filler byte\n         DEC   &_LREG                  * Decrement for EX\n         EXMVC 1(&_LREG,&_AREG),0(&_AREG),NODEC * Length modified by EX\n         INC   &_LREG,2                * Reset length register\n         MEXIT\n.*\n.* Generate logic for TYPE=LONG\n.LONG    ANOP\n.* Common code for type=long\n         CHKLIT &_FILL                 * Determine value of literal\n         AIF   (&BXA_RC NE 0).LOADR15  * Valid literal in &_FILL ?\n         AIF   (&BXA_NUMVAL NE 0).LOADR15 * Literal of X'00'?\n&LABEL   CLEAR R15                     * Set filler/src length to zero\n         AGO   .LENOK\n.LOADR15 ANOP  ,\n&LABEL   LA    R15,&_FILL              * Set up filler byte\n         SLL   R15,24                  *  and length of source to zero\n.LENOK   ANOP  ,\n.*\n.* Determine which work registers to use\n&R0      SETC  'YES'                   * Normally R0/R1 will do fine\n         AIF   ('&SYSASCE' EQ 'P').EQUREG\n&R0      SETC  'NO'                    * AR-mode: cannot use R0!\n.*\n.EQUREG  ANOP  ,\n         EQUREG PAIR=YES,R0=&R0        * Try to allocate a pair of regs\n         AIF   (&BXA_RC NE 0).ERR4A    * Alloc failed\n&EREG    SETC  'R&BXA_NUMVAL'          * Assigned even register name\n&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Increment to odd register\n&OREG    SETC  'R&BXA_NUMVAL'          * Assigned odd register name\n         MNOTE *,'CLEAR - Using &EREG and &OREG'\n         AGO   .NOERR4\n.ERR4A   MNOTE 8,'No register pair available for MVCL'\n         AGO   .MEND\n.NOERR4  ANOP  ,\n.*\n.* Load even and odd registers with destination ptr and length\n         AIF   (K'&_AREG NE 0).LONGDR  * Load dest ptr from register?\n         AIF   ('&SYSASCE' EQ 'P').LONGDL_LA * Primary or AR mode?\n         LAE   &EREG,&_AREA            * Load destination address\n         AGO   .LONGD_OK               * Destination ptr loaded\n.LONGDL_LA ANOP ,\n         LA    &EREG,&_AREA            * Load destination address\n         AGO   .LONGD_OK               * Destination ptr loaded\n.LONGDR  ANOP  ,\n         AIF   ('&SYSASCE' EQ 'P').LONGDR_LR * Primary or AR mode?\n         LAE   &EREG,0(,&_AREG)        * Load destination address\n         AGO   .LONGD_OK               * Destination ptr loaded\n.LONGDR_LR ANOP ,\n         LR    &EREG,&_AREG            * Load destination address\n.LONGD_OK ANOP ,                       * &EREG now loaded with dest.ptr\n.*\n         AIF   (K'&_LREG NE 0).LONGLR  * Length in register?\n         L     &OREG,=A(&_LEN)         * Load length of dest. area\n         AGO   .LONGL_OK               * Length is now ok\n.LONGLR  ANOP  ,                       *\n         LR    &OREG,&_LREG            * Load length of dest. from reg.\n.LONGL_OK ANOP ,                       * Length now in &OREG\n.*\n         MVCL  &EREG,R14               * Fill entire area\n         MEXIT\n.*\n.* Generate logic for type XR\n.XR      ANOP  ,                       * Area in reg, length in reg\n&LABEL   XR    &AREA,&AREA             * Wipe register\n         MEXIT\n.*\n.* Generate logic for type LAE\n.LAE     ANOP  ,                       * Wipe an access register\n         AIF   (T'&_AREA EQ 'g').LAE3  * Clearing a GPR/AR pair?\n         CHKREG &_AREA                 * Determine register number\n&I       SETA  &BXA_NUMVAL             * Save AR number\n&_AREA   SETC  '&_AREA'(2,*)           * Create Rnn from ARnn\n         CHKREG &_AREA,g               * Valid GPR with same nr?\n         AIF   (&BXA_RC EQ 0 AND &BXA_NUMVAL EQ &I).LAE2\n&_AREA   SETC  'R&I'                   * Use default register name\n.LAE2    ANOP  ,                       *\n&LABEL   LAE   &_AREA,0(&_AREA,0)      * Wipe access register\n         MEXIT ,                       *\n.LAE3    ANOP  ,                       *\n&LABEL   LAE   &_AREA,0                * Wipe register and access reg.\n         MEXIT ,                       *\n.*\n.* Generate logic for type BIT0\n.LA      ANOP  ,                       * Area in reg, length in reg\n&LABEL   LA    &_AREA,0(&_AREA,0)      * Wipe hi-order bit\n         MEXIT ,                       *\n.*\n.MEND    MEND\n./ ADD NAME=CMDTXT   0100-20096-20096-0111-00093-00093-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates a command-text for use with MGCRE macro\n.*\n&LABEL   CMDTXT &TXT                   * Text for the command\n.*\n.* &LABEL Specifies the label for the text-parameter\n.* &TXT   Specifies the text to be used, enclosed in single quotation\n.*        marks\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC CMDTXT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Check the LABEL parameter\n         AIF   (K'&LABEL EQ 0).ERR1A\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'Label parameter not specified'\n.NOERR1  ANOP\n.*\n.* Check the TXT parameter\n         AIF   (K'&TXT EQ 0).ERR2A\n         AIF   (K'&TXT LT 3).ERR2B\n         AIF   ('&TXT'(1,1) NE '''').ERR2B\n         AIF   ('&TXT'(N'&TXT,1) NE '''').ERR2B\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'TXT parameter not specified'\n         MEXIT\n.ERR2B   MNOTE 8,'TXT parameter not properly enclosed in quotes'\n.NOERR2  ANOP\n.*\n.* Generate header text constant\n&LABEL   DC    AL2(_CMD&SYSNDX-2)      * Length of command text\n         DC    C&TXT                   * Text for command\n_CMD&SYSNDX EQU *-&LABEL\n.*\n.MEND    MEND\n./ ADD NAME=CPY      0100-20096-20096-0111-02832-02832-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Copy a field - register or storage\n.*\n.* For oversized packed fields unpacking may be done by processing\n.*     left to right in clusters of several bytes at a time.\n.* For oversized zoned fields packing may be done by processing\n.*     right to left in a loop.\n.* For every EQUREG a check must be made whether the source and/or\n.*     destination registers are in USE. Change EQUREG with a\n.*     NO=(...) keyword.\n.*\n&LABEL   CPY   &TO,                    * Destination field             *\n               &FROM,                  * Source field                  *\n               &WARN                   * NOWARN or nothing\n.*\n.* &TO    specifies the field or register to be filled,\n.*     or (field,length)     to override the length of the field\n.*     or (reg,end_reg_name) to copy to a set of registers\n.*     or (reg,nr_of_regs)   to copy to a set of registers\n.*     or (gpr_name,ar_name) to copy to 1 or more GPR/AR pairs\n.*     or ((gpr),len)        to copy to a register-designated area\n.*     or ((gpr),(gpr))      to copy to a register-designated area\n.* &FROM  specifies the field or register to be copied,\n.*     or (field,length)     to override the length of the field\n.*     or (reg,nr_of_regs)   to copy from a set of registers\n.*     or (reg,end_reg_name) to copy from a set of registers\n.*     or (gpr_name,ar_name) to copy from 1 or more GPR/AR pairs\n.*     or ((gpr),len)        to copy from a register-designated area\n.*     or ((gpr),(gpr))      to copy from a register-designated area\n.*     or *STACK             to retrieve registers from the stack\n.* &WARN  specifies whether or not a warning is to be issued if\n.*        &TO and &FROM designate the same field/register\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC CPY                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &SYSASCE                * Current ASC mode: P or AR\n         GBLA  &BXA_NUMVAL             * Register nr from CHKREG\n         LCLC  &_LABEL                 * LABEL parameter\n         LCLC  &_TO1                   * TO field designation\n         LCLC  &_TO2                   * TO length\n         LCLC  &TO_TP                  * Type of TO location\n         LCLA  &TO_LEN                 * Length of TO location\n         LCLA  &TO_REG                 * TO register number\n         LCLB  &TO_EREG                * TO end register specified?\n         LCLC  &_FROM1                 * FROM field designation\n         LCLC  &_FROM2                 * FROM length\n         LCLC  &FROM_TP                * Type of FROM location\n         LCLA  &FROM_LEN               * Length of FROM location\n         LCLA  &FROM_REG               * FROM register number\n         LCLB  &FROM_EREG              * FROM end register specified?\n         LCLA  &FROM_VAL               * Value of FROM literal\n         LCLC  &SIGN                   * Sign of FROM literal value\n         LCLB  &EQULIT                 * Source is an equated literal\n         LCLA  &I,&J                   *\n         LCLA  &LEN                    * Length value\n         LCLC  &LENC                   * Length value (character)\n         LCLA  &PAD_LEN                * Length of pad area\n         LCLC  &PAD_ADR                * Length of pad area\n         LCLB  &PAD0                   * On for pad with zeros         *\n                                       * Off for pad with blanks\n         LCLC  &MASK                   * Byte mask\n         LCLC  &REG                    * A register name\n         LCLC  &ODDREG                 * Associated odd reg name\n         LCLA  &REG_CT                 * Count of registers\n         LCLC  &REG_SRCP               * Source ptr reg for MVCL\n         LCLC  &REG_SRCL               * Source length reg for MVCL\n         LCLC  &REG_DSTP               * Destination ptr reg for MVCL\n         LCLC  &REG_DSTL               * Destination leng reg for MVCL\n.*\n.* Copy the LABEL parameter\n&_LABEL  SETC  '&LABEL'                *\n.*\n.* Check TO parameter\n         AIF   (K'&TO EQ 0).ERR1A      *\n&_TO1    SETC  '&TO'                   * Copy destination field\n         AIF   ('&TO'(1,1) NE '(').NOERR1 * No length specified\n         AIF   (N'&TO EQ 0).ERR1B      * Must have\n         AIF   (N'&TO EQ 1).ERR1C      *   exactly two\n         AIF   (N'&TO GT 2).ERR1D      *   sub-operands\n.NOERR1D ANOP  ,                       *\n&_TO1    SETC  '&TO(1)'                * Extract field designation\n&_TO2    SETC  '&TO(2)'                *     and field length\n         AIF   (K'&_TO1 EQ 0).ERR1B    *\n         AIF   (K'&_TO2 EQ 0).ERR1C    *\n         AGO   .NOERR1                 *\n.ERR1A   MNOTE 8,'Missing first operand - destination of copy'\n         MEXIT ,                       *\n.ERR1B   MNOTE 8,'Destination in parentheses: missing field name'\n         MEXIT ,                       *\n.ERR1C   MNOTE 8,'Destination in parentheses: missing length'\n         MEXIT ,                       *\n.ERR1D   MNOTE 4,'Destination in parentheses: too many subparameters'\n         AGO   .NOERR1D                *\n.NOERR1  ANOP  ,                       *\n.*\n.* Check FROM parameter\n         AIF   (K'&FROM EQ 0).ERR2A    *\n&_FROM1  SETC  '&FROM'                 * Copy source field\n         AIF   ('&FROM' EQ '*STACK').NOERR2\n         AIF   ('&FROM'(1,1) NE '(').NOERR2 * No length specified\n         AIF   (N'&FROM EQ 0).ERR2B    * Must have\n         AIF   (N'&FROM EQ 1).ERR2C    *   exactly two\n         AIF   (N'&FROM GT 2).ERR2D    *   sub-operands\n.NOERR2D ANOP  ,                       *\n&_FROM1  SETC  '&FROM(1)'              * Extract field designation\n&_FROM2  SETC  '&FROM(2)'              *     and field length\n         AIF   (K'&_FROM1 EQ 0).ERR2B  *\n         AIF   (K'&_FROM2 EQ 0).ERR2C  *\n         AGO   .NOERR2                 *\n.ERR2A   MNOTE 8,'Missing second operand - source of copy'\n         MEXIT ,                       *\n.ERR2B   MNOTE 8,'Source in parentheses: missing field name'\n         MEXIT ,                       *\n.ERR2C   MNOTE 8,'Source in parentheses: missing length'\n         MEXIT ,                       *\n.ERR2D   MNOTE 4,'Source in parentheses: too many subparameters'\n         AGO   .NOERR2D                *\n.NOERR2  ANOP  ,                       *\n.*\n.* Check the WARN parameter\n         AIF   (K'&WARN EQ 0).NOERR3   *\n         AIF   ('&WARN' EQ 'NOWARN').NOERR3\n.ERR3A   MNOTE 4,'If specified, third parameter must be ''NOWARN'''\n.NOERR3  ANOP  ,                       *\n.*\n.* Check nr of parameters\n         AIF   (N'&SYSLIST LE 3).NOERR4\n.ERR4A   MNOTE 4,'More than 3 parameters: remainder ignored'\n.NOERR4  ANOP  ,                       *\n.*\n.* Determine type of the TO field\n         AIF   ('&_TO1'(1,1) EQ '(').TO_PTR * Destination is pointered?\n         CHKLIT &_TO1,ALT=YES          * A literal nr was specified?\n         AIF   (&BXA_RC LT 8).ERR5A    * Valid literal: won't do!\n&I       SETA  ('&_TO1' FIND '+-*/(=),''') * Check for invalid chars\n         AIF   (&I NE 0).ERR5B         * Invalid field name\n&TO_TP   SETC  T'&_TO1                 * Extract field type\n&I       SETA  ('&TO_TP' FIND 'ABCDEFGHKLPQRSVXYZ')\n         AIF   (&I EQ 1).NOERR5        * Valid field type\n         CHKREG &_TO1                  * Valid register type?\n         AIF   (&BXA_RC NE 0).ERR5C    * Invalid field type\n&TO_REG  SETA  &BXA_NUMVAL             * Save register number\n         AGO   .NOERR5                 *\n.TO_PTR  ANOP  ,                       *\n&TO_TP   SETC  'p'                     * Field type is pointer\n&_TO1    SETC  '&TO(1,1)'              * Extract register designation\n         CHKREG &_TO1,g                * Must be a gpr!\n         AIF   (&BXA_RC GT 4).ERR5D    * Not a valid pointer register\n         AGO   .NOERR5                 *\n.ERR5A   MNOTE 8,'Literal number cannot serve as destination'\n         MEXIT ,                       *\n.ERR5B   MNOTE 8,'Destination field not a valid field name'\n         MEXIT ,                       *\n.ERR5C   MNOTE 8,'&TO_TP is an invalid destination field type'\n         MEXIT ,                       *\n.ERR5D   MNOTE 8,'&_TO1 is an invalid destination pointer register'\n         MEXIT ,                       *\n.NOERR5  ANOP  ,                       *\n.*\n.* Determine type of the FROM field\n         AIF   ('&_FROM1'(1,1) EQ '(').FROM_PTR * Source is pointered?\n         AIF   ('&FROM' EQ '*STACK').NOERR6\n         CHKLIT &_FROM1,ALT=YES        * A literal nr was specified?\n         AIF   (&BXA_RC LT 8).ERR6A    * Valid literal nr: ok\n         AIF   ('&_FROM1'(1,1) EQ '=').FROMLIT * A literal was spec'd\n&I       SETA  ('&_FROM1' FIND '+-*/(=),''') * Check for invalid chars\n         AIF   (&I EQ 0).FROMFLD       * Valid field name\n         AIF   (K'&_FROM1 LT 3).FROMTP0 * Cannot be a length reference\n         AIF   ('&_FROM1'(1,2) NE 'L''').FROMTP0 * Is not a length ref.\n&LENC    SETC  '&_FROM1'(3,*)          * Length of what?\n&BXA_NUMVAL SETA L'&LENC               * Retrieve length\n         AIF   (&BXA_NUMVAL NE 0).ERR6A * Ok: treat as literal number\n         AGO   .ERR6B                  * Cannot evaluate\n.FROMTP0 ANOP  ,                       * Source should evaluate to a nr\n&BXA_NUMVAL SETA &_FROM1               * A valid literal number?\n         AIF   (&I NE 0).ERR6A         * Ok: treat as a literal number\n         AGO   .ERR6B                  * Error: cannot evaluate\n.FROMFLD ANOP  ,                       * Source is a valid field name\n&FROM_TP SETC  T'&_FROM1               * Extract field type\n&I       SETA  ('&FROM_TP' FIND 'ABCDEFGHKLPQRSVXYZ')\n         AIF   (&I EQ 1).NOERR6        * Valid field type\n         AIF   ('&FROM_TP' NE '0').FROMREG * This an equated literal?\n&EQULIT  SETB  1                       * Yes: indicate equated literal\n&FROM_VAL SETA L'&_FROM1               * Determine value of literal\n         AGO   .NOERR6                 *\n.FROMREG ANOP  ,                       * Must be a valid register\n         CHKREG &_FROM1                * Valid register type?\n         AIF   (&BXA_RC NE 0).ERR6C    * Invalid field type\n&FROM_REG SETA &BXA_NUMVAL             * Save register number\n         AGO   .NOERR6                 *\n.FROMLIT ANOP  ,                       * A literal was specified as src\n         AIF   (K'&_FROM1 LT 5).ERR6D  * Not a decent literal\n&I       SETA  2                       * First position to check\n&J       SETA  ('(0123456789' FIND '&_FROM1'(&I,1)) * Check dup.factor\n         AIF   (&J EQ 0).FRLIT4        * No dup factor!\n         AIF   (&J EQ 1).FRLIT1        * Dup factor in parentheses!\n.FRLIT0  ANOP  ,                       * Loop to find end of dup.nr\n&I       SETA  &I+1                    * Point next char in &_FROM1\n         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found\n&J       SETA  ('&_FROM1'(&I,1) FIND '0123456789')\n         AIF   (&J EQ 0).FRLIT4        * &I now points past dup.factor\n         AGO   .FRLIT0                 *\n.FRLIT1  ANOP  ,                       * &J contains nr of ( to match\n&I       SETA  &I+1                    * Point next char in &_FROM1\n         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found\n         AIF   ('&_FROM1'(&I,1) EQ '(').FRLIT2\n         AIF   ('&_FROM1'(&I,1) EQ ')').FRLIT3\n         AGO   .FRLIT1                 *\n.FRLIT2  ANOP  ,                       * Another ( found\n&J       SETA  &J+1                    * Count unmatched parenthesis\n         AGO   .FRLIT1                 * and continue search for )\n.FRLIT3  ANOP  ,                       * An ending parenthesis found\n&J       SETA  &J-1                    * Reduce count of unmatched (\n         AIF   (&J GT 0).FRLIT1        * Search for more ) characters\n&I       SETA  &I+1                    * Point past dup-factor\n.FRLIT4  ANOP  ,                       * &I now points past dup.factor\n         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found\n&FROM_TP SETC  '&_FROM1'(&I,1)         * Extract type of literal\n         AIF   (&I+3 GT K'&_FROM1).ERR6D * No valid value!\n&I       SETA  &I+1                    * Point next char\n         AIF   ('&_FROM1'(&I,1) NE 'L').FRLIT10 * No length modifier\n&LEN     SETA  &I+1                    * Point to start of length value\n         AIF   ('&_FROM1'(&I,1) EQ '''').FRLIT10 * No length modifier\n         AIF   ('&_FROM1'(&I,1) EQ '.').ERR6E * Length is in bits\n         AIF   ('&_FROM1'(&I,1) EQ '(').FRLIT6 * Length in ()\n.FRLIT5  ANOP  ,                       * Loop to find end of length\n&I       SETA  &I+1                    * Point next char in &_FROM1\n         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found\n&J       SETA  ('&_FROM1'(&I,1) FIND '0123456789')\n         AIF   (&J EQ 0).FRLIT9        * &I now points past length\n         AGO   .FRLIT5                 *\n.FRLIT6  ANOP  ,                       * Lenth in parentheses\n&J       SETA  0                       * &J contains nr of ( to match\n&I       SETA  &I+1                    * Point next char in &_FROM1\n         AIF   (&I GT K'&_FROM1).ERR6D * No type designation found\n         AIF   ('&_FROM1'(&I,1) EQ '(').FRLIT7\n         AIF   ('&_FROM1'(&I,1) EQ ')').FRLIT8\n         AGO   .FRLIT6                 *\n.FRLIT7  ANOP  ,                       * Another ( found\n&J       SETA  &J+1                    * Count unmatched parenthesis\n         AGO   .FRLIT6                 * and continue search for )\n.FRLIT8  ANOP  ,                       * An ending parenthesis found\n&J       SETA  &J-1                    * Reduce count of unmatched (\n         AIF   (&J GT 0).FRLIT6        * Search for more ) characters\n&I       SETA  &I+1                    * Point past length value\n.FRLIT9  ANOP  ,                       * &I now points past length mod.\n&J       SETA  &I-&LEN                 * Nr of chars in length value\n&LENC    SETC  '&_FROM1'(&LEN,&J)      * Extract length value string\n&LEN     SETA  &LENC                   * Determine length value\n         AIF   (&LEN EQ 0).ERR6F       * Cannot evaluate length\n&FROM_LEN SETA &LEN                    *\n.FRLIT10 ANOP  ,                       *\n         AIF   ('&FROM_TP' EQ 'A').FRLITA\n         AIF   ('&FROM_TP' EQ 'B').NOERR6\n         AIF   ('&FROM_TP' EQ 'C').FRLITC\n         AIF   ('&FROM_TP' EQ 'D').FRLITD\n         AIF   ('&FROM_TP' EQ 'E').FRLITE\n         AIF   ('&FROM_TP' EQ 'F').FRLITF\n         AIF   ('&FROM_TP' EQ 'H').FRLITH\n         AIF   ('&FROM_TP' EQ 'L').FRLITL\n         AIF   ('&FROM_TP' EQ 'P').NOERR6\n         AIF   ('&FROM_TP' EQ 'Q').FRLITA\n         AIF   ('&FROM_TP' EQ 'S').FRLITY\n         AIF   ('&FROM_TP' EQ 'V').FRLITA\n         AIF   ('&FROM_TP' EQ 'X').NOERR6\n         AIF   ('&FROM_TP' EQ 'Y').FRLITY\n         AIF   ('&FROM_TP' EQ 'Z').NOERR6\n         AGO   .ERR6E                  * Unsupported type designation\n.FRLITA  ANOP  ,                       * A-type literal specified\n         AIF   (K'&LENC NE 0).FRLITA0  * Length was specified?\n&FROM_LEN SETA 4                       * No: use default\n.FRLITA0 ANOP  ,                       * Length of literal now known\n&I       SETA  &FROM_LEN/4             * Nr of whole words\n&I       SETA  &FROM_LEN-(&I*4)        * Nr of additional bytes\n         AIF   (&I EQ 0).NOERR6        * Ok: aligned\n&FROM_TP SETC  'R'                     * Indicate unaligned address\n         AGO   .NOERR6                 *\n.FRLITC  ANOP  ,                       * C-type literal specified\n         AIF   (K'&LENC NE 0).NOERR6   * Length was specified!\n&LENC    SETC  '&_FROM1'(&I,*)         * I still points past length mod\n         AIF   (K'&LENC LT 3).ERR6D    * Not a valid text literal\n         AIF   ('&LENC'(1,1) NE '''').ERR6D * Must start with a quote..\n         AIF   ('&LENC'(K'&LENC,1) NE '''').ERR6D * And end with one!\n&LENC    SETC  '&LENC'(2,K'&LENC-2)    * Extract string value\n.FRLITC0 ANOP  ,                       * Loop to remove double quotes\n&I       SETA  ('&LENC' INDEX '''''')  * Search for double quote\n         AIF   (&I EQ 0).FRLITC3       * Not found: quit loop\n         AIF   (&I EQ 1).FRLITC1       * Remove leading quotes\n         AIF   (&I EQ K'&LENC-2).FRLITC2 * Remove trailing quotes\n&LENC    SETC  '&LENC'(1,&I-1).'\"'.'&LENC'(&I+2,*)\n         AGO   .FRLITC0                * Check for more quotes\n.FRLITC1 ANOP  ,                       * Remove leading double quotes\n&LENC    SETC  '\"'.'&LENC'(3,*)        *\n         AGO   .FRLITC0                * Check for more quotes\n.FRLITC2 ANOP  ,                       * Remove leading double quotes\n&LENC    SETC  '&LENC'(1,&I-1).'\"'     *\n         AGO   .FRLITC0                * Check for more quotes\n.FRLITC3 ANOP  ,                       * All double quotes replaced\n&FROM_LEN SETA K'&LENC                 * Nr of characters in string\n         AGO   .NOERR6                 *\n.FRLITD  ANOP  ,                       * Floating point literal\n         AIF   (K'&LENC NE 0).FRLITD0  * Length was specified?\n&FROM_LEN SETA 8                       * No: use default\n.FRLITD0 ANOP  ,                       * Length of literal now known\n&I       SETA  &FROM_LEN/8             * Nr of double words\n&I       SETA  &FROM_LEN-(&I*8)        * Nr of additional bytes\n         AIF   (&I EQ 0).NOERR6        * Ok: aligned\n&FROM_TP SETC  'K'                     * Indicate unaligned float\n         AGO   .NOERR6                 *\n.FRLITE  ANOP  ,                       * Floating point literal\n         AIF   (K'&LENC NE 0).FRLITE0  * Length was specified?\n&FROM_LEN SETA 4                       * No: use default\n.FRLITE0 ANOP  ,                       * Length of literal now known\n&I       SETA  &FROM_LEN/4             * Nr of whole words\n&I       SETA  &FROM_LEN-(&I*4)        * Nr of additional bytes\n         AIF   (&I EQ 0).NOERR6        * Ok: aligned\n&FROM_TP SETC  'K'                     * Indicate unaligned float\n         AGO   .NOERR6                 *\n.FRLITF  ANOP  ,                       * Fixed point literal\n         AIF   (K'&LENC NE 0).FRLITF0  * Length was specified?\n&FROM_LEN SETA 4                       * No: use default\n.FRLITF0 ANOP  ,                       * Length of literal now known\n&I       SETA  &FROM_LEN/4             * Nr of whole words\n&I       SETA  &FROM_LEN-(&I*4)        * Nr of additional bytes\n         AIF   (&I EQ 0).NOERR6        * Ok: aligned\n&FROM_TP SETC  'G'                     * Indicate unaligned fixed\n         AGO   .NOERR6                 *\n.FRLITH  ANOP  ,                       * Fixed point literal\n         AIF   (K'&LENC NE 0).FRLITH0  * Length was specified?\n&FROM_LEN SETA 2                       * No: use default\n.FRLITH0 ANOP  ,                       * Length of literal now known\n&I       SETA  &FROM_LEN/2             * Nr of half words\n&I       SETA  &FROM_LEN-(&I*2)        * Nr of additional bytes\n         AIF   (&I EQ 0).NOERR6        * Ok: aligned\n&FROM_TP SETC  'G'                     * Indicate unaligned fixed\n         AGO   .NOERR6                 *\n.FRLITL  ANOP  ,                       * Floating point literal\n         AIF   (K'&LENC NE 0).FRLITL0  * Length was specified?\n&FROM_LEN SETA 8                       * No: use default\n.FRLITL0 ANOP  ,                       * Length of literal now known\n&I       SETA  &FROM_LEN/8             * Nr of double words\n&I       SETA  &FROM_LEN-(&I*8)        * Nr of additional bytes\n         AIF   (&I EQ 0).NOERR6        * Ok: aligned\n&FROM_TP SETC  'K'                     * Indicate unaligned float\n         AGO   .NOERR6                 *\n.FRLITY  ANOP  ,                       * Address literal\n         AIF   (K'&LENC NE 0).FRLITY0  * Length was specified?\n&FROM_LEN SETA 2                       * No: use default\n.FRLITY0 ANOP  ,                       * Length of literal now known\n&I       SETA  &FROM_LEN/2             * Nr of half words\n&I       SETA  &FROM_LEN-(&I*2)        * Nr of additional bytes\n         AIF   (&I EQ 0).NOERR6        * Ok: aligned\n&FROM_TP SETC  'R'                     * Indicate unaligned address\n         AGO   .NOERR6                 *\n.FROM_PTR ANOP ,                       *\n&FROM_TP SETC  'p'                     * Field type is pointer\n&_FROM1  SETC  '&FROM(1,1)'            * Extract register designation\n         CHKREG &_FROM1,g              * Must be a gpr!\n         AIF   (&BXA_RC GT 4).ERR6G    * Not a valid pointer register\n         AGO   .NOERR6                 *\n.ERR6A   ANOP  ,                       * Source is a literal\n&FROM_TP SETC  '0'                     * Set source type\n&FROM_VAL SETA &BXA_NUMVAL             * Save value to be copied\n         AIF   (&FROM_VAL GE 0).ERR6A_ * Negative number?\n&SIGN    SETC  '-'                     * Indicate sign\n.ERR6A_  ANOP  ,                       *\n         AIF   (K'&_FROM2 EQ 0).NOERR6 * Explicit length specified?\n         MNOTE 4,'Explicit length not allowed for literal value: ignore*\n               d'                      *\n&_FROM2  SETC  ''                      * Wipe length indication\n         AGO   .NOERR6                 *\n.ERR6B   MNOTE 8,'Source field not a valid field name'\n         MEXIT ,                       *\n.ERR6C   ANOP  ,                       *\n         CHKLIT &_FROM1,ALT=YES,MSG=YES * Just to issue a message\n         MNOTE 8,'&FROM_TP is an invalid source field type'\n         MEXIT ,                       *\n.ERR6D   MNOTE 8,'Source field is not a valid literal'\n         MEXIT ,                       *\n.ERR6E   MNOTE 8,'Source field is an unsupported literal'\n         MEXIT ,                       *\n.ERR6F   ANOP  ,                       *\n&LENC    SETC  (DOUBLE '&LENC')        *\n         MNOTE 8,'Cannot evaluate length modifier: &LENC'\n         MEXIT ,                       *\n.ERR6G   MNOTE 8,'&_FROM1 is an invalid source pointer register'\n         MEXIT ,                       *\n.NOERR6  ANOP  ,                       *\n.*\n.* Determine length of TO field\n&I       SETA  ('acfg' FIND '&TO_TP')  * Register type?\n         AIF   (&I NE 0).TOLENR        * Yes: it is some register type\n         AIF   (K'&_TO2 NE 0).TOLENX   * Should be a valid expression\n&LEN     SETA  L'&_TO1                 * No reg & not spec'd: extract\n         AGO   .TOLENOK                * Length has now been set\n.TOLENR  ANOP  ,                       * Handle register types\n&LENC    SETC  '4484'(&I,1)            * Determine size of 1 register\n&LEN     SETA  &LENC                   *  and make it numeric\n&LENC    SETC  '16160416'(2*&I-1,2)    * Determine nr of registers\n&REG_CT  SETA  &LENC                   *  and make it numeric\n         AIF   (K'&_TO2 EQ 0).TOLENOK  * Reg & not spec'd: ok\n         CHKREG &_TO2                  * Check: register or number?\n         AIF   (&BXA_RC NE 0).TOLENRL  * Must be a literal number\n&TO_EREG SETB  1                       * Indicate end register spec'd\n         AIF   ('&TO_TP' NE T'&_TO2).TOLENR0\n         AIF   ('&TO_TP' EQ 'f').TOLENF * Go handle ending FP-register\n         AGO   .TOLENR1                * Go calculate total length\n.TOLENR0 ANOP  ,                       * Different register types\n         AIF   ('&TO_TP' NE 'g').ERR7A4 * Only allowed combination is\n         AIF   (T'&_TO2 NE 'a').ERR7A4 *   gpr with ar\n&TO_TP   SETC  'ga'                    * Indicate combined type\n.TOLENR1 ANOP  ,                       * End-register is valid\n&BXA_NUMVAL SETA 1+&BXA_NUMVAL-&TO_REG * Determine nr of registers\n         AIF   (&BXA_NUMVAL GT 0).TOLENR2 * Wrap around?\n&BXA_NUMVAL SETA &REG_CT+&BXA_NUMVAL   * Adjust for wrap\n.TOLENR2 ANOP  ,                       * BXA_NUMVAL now nr of registers\n&LEN     SETA  &LEN*&BXA_NUMVAL        * Length for all registers\n         AGO   .TOLENOK                *\n.TOLENF  ANOP  ,                       * Determine lenth from end-FPR\n&BXA_NUMVAL SETA 2+&BXA_NUMVAL-&TO_REG * Determine nr of HALF registers\n         AIF   (&BXA_NUMVAL GT 0).TOLENF1 * Wrap around?\n&BXA_NUMVAL SETA 2*&REG_CT+&BXA_NUMVAL * Adjust for wrap\n.TOLENF1 ANOP  ,                       *\n&LEN     SETA  &LEN*&BXA_NUMVAL/2      * Length for all registers\n         AGO   .TOLENOK                *\n.TOLENRL ANOP  ,                       * &_TO2 is the nr of regs\n&I       SETA  &_TO2                   * Make nr of regs numeric\n         AIF   (&I GT 16).ERR7A1       * Too many registers\n         AIF   ('&TO_TP' EQ 'f' AND &I GT 4).ERR7A1 * Too many regs\n&LEN     SETA  (&I*&LEN)               * Determine total length\n         AGO   .TOLENOK                * Length has now been set\n.TOLENX  ANOP  ,                       * Check length expression\n         AIF   ('&_TO2'(1,1) EQ '(').TOLENPT * To length is a (reg)?\n&LEN     SETA  &_TO2                   * Determine numeric value\n         AGO   .TOLENOK                * Length has now been set\n.TOLENPT ANOP  ,                       * Check length as a (ptr)\n         AIF   ('&TO_TP' NE 'p').ERR7A5 * TO1 must be a pointered field\n&_TO2    SETC  '&TO(2,1)'              * Extract register designation\n         CHKREG &_TO2,g                * Must be a valid gpr\n         AIF   (&BXA_RC GT 4).ERR7A6   * Error!\n&LEN     SETA  0                       * Indicate register used\n&TO_LEN  SETA  0                       * Indicate register used\n         AGO   .TOLENOQ                *\n.TOLENOK ANOP  ,                       *\n         AIF   (&LEN LE 0).ERR7A2      * Invalid length\n&TO_LEN  SETA  &LEN                    * Copy determined length\n.TOLENOQ ANOP  ,                       *\n.*\n.* Determine length of FROM field\n         AIF   (&FROM_LEN NE 0).GO     * Length of literal is known\n         AIF   ('&FROM' EQ '*STACK').GO * Length not relevant\n         AIF   ('&FROM_TP' EQ '0').FRLEN0 * Literal value?\n&I       SETA  ('acfg' FIND '&FROM_TP') * Register type?\n         AIF   (&I NE 0).FRLENR        * Yes: it is some register type\n         AIF   (K'&_FROM2 NE 0).FRLENX * Field & len spec'd: ok\n&LEN     SETA  L'&_FROM1               * Field & not spec'd: extract\n         AGO   .FRLENOK                * Length has now been set\n.FRLENR  ANOP  ,                       * Handle register types\n&LENC    SETC  '4484'(&I,1)            * Determine size of 1 register\n&LEN     SETA  &LENC                   *  and make it numeric\n&LENC    SETC  '16160416'(2*&I-1,2)    * Determine nr of registers\n&REG_CT  SETA  &LENC                   *  and make it numeric\n         AIF   (K'&_FROM2 EQ 0).FRLENOK * Reg & not spec'd: ok\n         CHKREG &_FROM2                * Check: register or number?\n         AIF   (&BXA_RC NE 0).FRLENRL  * Must be a literal number\n&FROM_EREG SETB 1                      * Indicate end reg specified\n         AIF   ('&FROM_TP' NE T'&_FROM2).FRLENR0\n         AIF   ('&FROM_TP' EQ 'f').FRLENF * Go handle end FP-register\n         AGO   .FRLENR1                * Go calculate total length\n.FRLENR0 ANOP  ,                       * Different register types\n         AIF   ('&FROM_TP' NE 'g').ERR7A4 * Only allowed combination is\n         AIF   (T'&_FROM2 NE 'a').ERR7A4 *   gpr with ar\n&FROM_TP SETC  'ga'                    * Indicate combined type\n.FRLENR1 ANOP  ,                       * End-register is valid\n&BXA_NUMVAL SETA 1+&BXA_NUMVAL-&FROM_REG * Determine nr of registers\n         AIF   (&BXA_NUMVAL GT 0).FRLENR2 * Wrap around?\n&BXA_NUMVAL SETA &REG_CT+&BXA_NUMVAL   * Adjust for wrap\n.FRLENR2 ANOP  ,                       * BXA_NUMVAL now nr of registers\n&LEN     SETA  &LEN*&BXA_NUMVAL        * Length for all registers\n         AGO   .FRLENOK                *\n.FRLENF  ANOP  ,                       * Determine lenth from end-FPR\n&BXA_NUMVAL SETA 2+&BXA_NUMVAL-&FROM_REG * Determine nr of HALF regs\n         AIF   (&BXA_NUMVAL GT 0).FRLENF1 * Wrap around?\n&BXA_NUMVAL SETA 2*&REG_CT+&BXA_NUMVAL * Adjust for wrap\n.FRLENF1 ANOP  ,                       * BXA_NUMVAL now nr of half regs\n&LEN     SETA  &LEN*&BXA_NUMVAL/2      * Length for all registers\n         AGO   .FRLENOK                *\n.FRLENRL ANOP  ,                       * &_FROM2 is the nr of regs\n&I       SETA  &_FROM2                 * Make nr of regs numeric\n         AIF   (&I GT 16).ERR7A1       * Too many registers\n         AIF   ('&FROM_TP' EQ 'f' AND &I GT 4).ERR7A1 * Too many regs\n&LEN     SETA  (&I*&LEN)               * Determine total length\n         AGO   .FRLENOK                * Length has now been set\n.FRLEN0  ANOP  ,                       * Determine literal length\n         AIF   ('&TO_TP' EQ 'B' OR '&TO_TP' EQ 'X').FRLEN0U * Unsigned?\n         AIF   (&FROM_VAL LT 0).FRLEN0N * Handle negative numbers\n&LEN     SETA  1                       * Assume 1 byte\n         AIF   (&FROM_VAL LT 128).FRLENOK * Will fit in 1 byte\n&LEN     SETA  2                       * Assume 2 bytes\n         AIF   (&FROM_VAL LT 32768).FRLENOK * Will fit in 2 bytes\n&LEN     SETA  3                       * Assume 3 bytes\n         AIF   (&FROM_VAL LT 8388608).FRLENOK * Will fit in 3 bytes\n&LEN     SETA  4                       * Must fit in 4 bytes\n         AGO   .FRLENOK                *\n.FRLEN0N ANOP  ,                       * Determine len of negative nr\n&LEN     SETA  1                       * Assume 1 byte\n         AIF   (&FROM_VAL GE -128).FRLENOK * Will fit in 1 byte\n&LEN     SETA  2                       * Assume 2 bytes\n         AIF   (&FROM_VAL GE -32768).FRLENOK * Will fit in 2 bytes\n&LEN     SETA  3                       * Assume 3 bytes\n         AIF   (&FROM_VAL GE -8388608).FRLENOK * Will fit in 3 bytes\n&LEN     SETA  4                       * Must fit in 4 bytes\n         AGO   .FRLENOK                *\n.FRLEN0U ANOP  ,                       * Determine len of unsigned nr\n&LEN     SETA  1                       * Assume 1 byte\n         AIF   (&FROM_VAL LT 256).FRLENOK * Will fit in 1 byte\n&LEN     SETA  2                       * Assume 2 bytes\n         AIF   (&FROM_VAL LT 65536).FRLENOK * Will fit in 2 bytes\n&LEN     SETA  3                       * Assume 3 bytes\n         AIF   (&FROM_VAL LT 16777216).FRLENOK * Will fit in 3 bytes\n&LEN     SETA  4                       * Must fit in 4 bytes\n         AGO   .FRLENOK                *\n.FRLENX  ANOP  ,                       * Evaluate length expression\n         AIF   ('&_FROM2'(1,1) EQ '(').FRLENPT * To length is a (reg)?\n&LEN     SETA  &_FROM2                 * Determine numeric value\n         AGO   .FRLENOK                *\n.FRLENPT ANOP  ,                       * Check length as a (ptr)\n         AIF   ('&FROM_TP' NE 'p').ERR7A7 * FROM1 must be pointered\n&_FROM2  SETC  '&FROM(2,1)'            * Extract register designation\n         CHKREG &_FROM2,g              * Must be a valid gpr\n         AIF   (&BXA_RC GT 4).ERR7A8   * Error!\n&LEN     SETA  0                       * Indicate register used\n&FROM_LEN SETA  0                      * Indicate register used\n         AGO   .FRLENOQ                *\n.FRLENOK ANOP  ,                       *\n         AIF   (&LEN LE 0).ERR7A3      * Invalid length\n&FROM_LEN SETA &LEN                    * Copy determined length\n.FRLENOQ ANOP  ,                       *\n.*\n.* Copy to self not useful\n         AIF   ('&_TO1' EQ '&_FROM1').ERR7 * Operands equal?\n&I       SETA  ('acfg' FIND '&TO_TP')  * Register type?\n         AIF   (&I EQ 0).GO            * Not a register: ok\n         AIF   ('&FROM_TP' NE '&TO_TP').GO * Different types: ok\n         AIF   (&FROM_REG NE &TO_REG).GO * Not same register nr: ok\n.ERR7    ANOP  ,                       * Copy to self detected\n         AIF   ('&WARN' EQ 'NOWARN').NOERR7 * Suppress message\n         MNOTE 4,'Copy to self not useful: ignored'\n.NOERR7  ANOP  ,                       *\n&_LABEL  LABEL ,                       *\n         MEXIT ,                       *\n.*\n.* Select code generation logic by from type field\n.GO      ANOP  ,\n         AIF   ('&FROM_TP' EQ 'A').GENA\n         AIF   ('&FROM_TP' EQ 'B').GENB\n         AIF   ('&FROM_TP' EQ 'C').GENC\n         AIF   ('&FROM_TP' EQ 'D').GEND\n         AIF   ('&FROM_TP' EQ 'E').GENE\n         AIF   ('&FROM_TP' EQ 'F').GENF\n         AIF   ('&FROM_TP' EQ 'G').GENG\n         AIF   ('&FROM_TP' EQ 'H').GENH\n         AIF   ('&FROM_TP' EQ 'K').GENK\n         AIF   ('&FROM_TP' EQ 'L').GENL\n         AIF   ('&FROM_TP' EQ 'P').GENP\n         AIF   ('&FROM_TP' EQ 'Q').GENQ\n         AIF   ('&FROM_TP' EQ 'R').GENR\n         AIF   ('&FROM_TP' EQ 'S').GENS\n         AIF   ('&FROM_TP' EQ 'V').GENV\n         AIF   ('&FROM_TP' EQ 'X').GENX\n         AIF   ('&FROM_TP' EQ 'Y').GENY\n         AIF   ('&FROM_TP' EQ 'Z').GENZ\n         AIF   ('&FROM_TP' EQ '0').GEN0\n         AIF   ('&FROM_TP' EQ 'a').GEN_A\n         AIF   ('&FROM_TP' EQ 'c').GEN_C\n         AIF   ('&FROM_TP' EQ 'f').GEN_F\n         AIF   ('&FROM_TP' EQ 'g').GEN_G\n         AIF   ('&FROM_TP' EQ 'ga').GEN_GA_\n         AIF   ('&FROM' EQ '*STACK').GENSTACK\n         AIF   ('&FROM_TP' EQ 'p').GEN_P\n         MNOTE 12,'Internal error: FROM type &FROM_TP not supported'\n         MEXIT ,                       *\n.*\n.* Error messages for generation sections below\n.ERR7A1  MNOTE 8,'Number of registers specified exceeds whole set'\n         MEXIT ,                       *\n.ERR7A2  MNOTE 8,'Invalid destination length specified: 0 or negative'\n         MEXIT ,                       *\n.ERR7A3  MNOTE 8,'Invalid source length specified: 0 or negative'\n         MEXIT ,                       *\n.ERR7A4  MNOTE 8,'Start and end registers have different types'\n         MEXIT ,                       *\n.ERR7A5  MNOTE 8,'Destination length in register valid only if destinat*\n               ion is in register too'\n         MEXIT ,                       *\n.ERR7A6  MNOTE 8,'&_TO2 is not a valid length register'\n         MEXIT ,                       *\n.ERR7A7  MNOTE 8,'Source length in register valid only if source is in *\n               register too'\n         MEXIT ,                       *\n.ERR7A8  MNOTE 8,'&_FROM2 is not a valid length register'\n         MEXIT ,                       *\n.ERR7B   MNOTE 8,'Cannot copy from ''&FROM_TP'' to ''&TO_TP'' type of f*\n               ields'                  *\n         MEXIT ,                       *\n.ERR7C   MNOTE 8,'Lengths - implied or specified - do not match'\n         MEXIT ,                       *\n.ERR7D   MNOTE 8,'Length of destination field exceeds 256'\n         MEXIT ,                       *\n.ERR7E   MNOTE 8,'Length of source field exceeds 256'\n         MEXIT ,                       *\n.ERR7F   MNOTE 8,'No register pair available for long move'\n         MEXIT ,                       *\n.ERR7G   MNOTE 8,'Field is too large to pack'\n         MEXIT ,                       *\n.ERR7H   MNOTE 8,'No register available to extend sign'\n         MEXIT ,                       *\n.ERR7I   MNOTE 8,'Destination field is too short'\n         MEXIT ,                       *\n.ERR7J   MNOTE 8,'Cannot load more than 1 FP register from unaligned fi*\n               eld'                    *\n         MEXIT ,                       *\n.ERR7K   MNOTE 8,'Cannot load an FP register from field with length &FR*\n               OM_LEN'                 *\n         MEXIT ,                       *\n.ERR7L   MNOTE 8,'Cannot copy extended floating point field of less tha*\n               n 6 bytes'              *\n         MEXIT ,                       *\n.ERR7M   MNOTE 8,'Register &_TO1 does not designate a pair of FP regist*\n               ers'                    *\n         MEXIT ,                       *\n.ERR7N   MNOTE 8,'Packed field is too large to unpack'\n         MEXIT ,                       *\n.ERR7O   MNOTE 8,'Too many digits in result: cannot unpack'\n         MEXIT ,                       *\n.ERR7P   MNOTE 8,'&_FROM1 must be 8 bytes long to copy to &_TO1'\n         MEXIT ,                       *\n.ERR7Q   MNOTE 8,'Cannot load more than 1 register at a time from an S-*\n               type constant'\n         MEXIT ,                       *\n.ERR7R   MNOTE 8,'S-type constant must be two bytes long to load a regi*\n               ster with it'           *\n         MEXIT ,                       *\n.ERR7S   MNOTE 8,'No work register available'\n         MEXIT ,                       *\n.ERR7T   MNOTE 8,'Cannot load an access register with a literal other t*\n               han 0, 1, or 2'         *\n         MEXIT ,                       *\n.ERR7U   MNOTE 8,'Cannot copy a negative value into an unsigned field'\n         MEXIT ,                       *\n.ERR7V   MNOTE 8,'Register &_FROM1 does not designate a pair of FP regi*\n               sters'                  *\n         MEXIT ,                       *\n.ERR7W   MNOTE 8,'Cannot copy more than 1 value to an explicit-length f*\n               loating point field'    *\n         MEXIT ,                       *\n.ERR7X   MNOTE 8,'Cannot extend negative literal to &TO_LEN bytes'\n         MEXIT ,                       *\n.*\n.* From type A: 4-byte address field\n.GENA    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'A').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'V').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'Y').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'g').GENA_G  * CPY address to gpr\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy fullword address field to general purpose register(s)\n.GENA_G  ANOP  ,                       *\n         AIF   (&TO_LEN EQ 4).GENA_G0  * 1 register to load\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_LM                  * Go generate multiple ICMs\n.GENA_G0 ANOP  ,                       *\n         AIF   (&FROM_LEN EQ 4).DO_L   * Generate 1 L\n         AIF   (&FROM_LEN LT 4).GENA_G1 * Clear, then ICM\n&PAD_LEN SETA  &FROM_LEN-4             * Nr of excess bytes\n&_FROM1  SETC  '&_FROM1'.'+&PAD_LEN'   * Adjust source pointer\n&FROM_LEN SETA 4                       * Set usable source length\n&I       SETA  &PAD_LEN/4              * Nr of words padded\n&J       SETA  &PAD_LEN-(4*&I)         * Nr of additional bytes padded\n         AIF   (&J EQ 0).DO_L          * If none: still aligned\n&MASK    SETC  'YYYY'                  * Load 4 unaligned bytes\n         AGO   .DO_ICM                 * And go copy to register\n.GENA_G1 ANOP  ,                       * Load from short field\n&_LABEL  CLEAR &_TO1                   * Wipe register before use\n&_LABEL  SETC  ''                      * Wipe label after use\n&MASK    SETC  'NNNY'                  * Mask for 1-byte source field\n         AIF   (&FROM_LEN EQ 1).DO_ICM * Ok: go load register\n&MASK    SETC  'NNYY'                  * Mask for 2-byte source field\n         AIF   (&FROM_LEN EQ 2).DO_ICM * Ok: go load register\n&MASK    SETC  'NYYY'                  * Mask for 3-byte source field\n         AGO   .DO_ICM                 * Source must be 3 bytes long\n.*\n.* From type B: Binary data field (unsigned)\n.GENB    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'B').GENMVC0 * CPY unsigned to unsigned\n         AIF   ('&TO_TP' EQ 'X').GENMVC0 * CPY unsigned to unsigned\n         AIF   ('&TO_TP' EQ 'a').GENB_A  * CPY unsigned to ARnn\n         AIF   ('&TO_TP' EQ 'c').GENB_C  * CPY unsigned to CRnn\n         AIF   ('&TO_TP' EQ 'g').GENB_G  * CPY unsigned to Rnn\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy unsigned binary data to access register(s)\n.GENB_A  ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_LAM                 * Go generate LAM instruction\n.*\n.* Copy unsigned binary data to control register(s)\n.GENB_C  ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_LCTL                * Go generate LAM instruction\n.*\n.* Copy unsigned binary data to general purpose register(s)\n.GENB_G  ANOP  ,                       *\n         AIF   (&TO_LEN EQ 4).GENB_G0  * 1 register to load\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENICMM                * Go generate multiple ICMs\n.GENB_G0 ANOP  ,                       *\n&MASK    SETC  'YYYY'                  *\n         AIF   (&FROM_LEN EQ 4).DO_ICM * Generate 1 ICM\n         AIF   (&FROM_LEN LT 4).GENB_G1 * Clear, then ICM\n&PAD_LEN SETA  &FROM_LEN-4             * Nr of excess bytes\n&_FROM1  SETC  '&_FROM1'.'+&PAD_LEN'   * Adjust source pointer\n&FROM_LEN SETA 4                       * Set usable source length\n         AGO   .DO_ICM                 * And go copy to register\n.GENB_G1 ANOP  ,                       * Load from short field\n&_LABEL  CLEAR &_TO1                   * Wipe register before use\n&_LABEL  SETC  ''                      * Wipe label after use\n&MASK    SETC  'NNNY'                  * Mask for 1-byte source field\n         AIF   (&FROM_LEN EQ 1).DO_ICM * Ok: go load register\n&MASK    SETC  'NNYY'                  * Mask for 2-byte source field\n         AIF   (&FROM_LEN EQ 2).DO_ICM * Ok: go load register\n&MASK    SETC  'NYYY'                  * Mask for 3-byte source field\n         AGO   .DO_ICM                 * Source must be 3 bytes long\n.*\n.* From type C: Character data field\n.GENC    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'C').GENMVCC * CPY char to char\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* From type D: Long floating point field\n.GEND    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'D').GENKK  * CPY float to float\n         AIF   ('&TO_TP' EQ 'E').GENKK  * CPY float to float\n         AIF   ('&TO_TP' EQ 'K').GENKK  * CPY float to float\n         AIF   ('&TO_TP' EQ 'f').GEND_F * CPY float to FP register\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy a long floating point number to a register\n.GEND_F  ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AIF   (&TO_LEN EQ 8).DO_LD    * Generate 1 LD\n         AGO   .GENLDM                 * Generate several LDs\n.*\n.* From type E: Short floating point field\n.GENE    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'D').GENKK  * CPY float to float\n         AIF   ('&TO_TP' EQ 'E').GENKK  * CPY float to float\n         AIF   ('&TO_TP' EQ 'K').GENKK  * CPY float to float\n         AIF   ('&TO_TP' EQ 'f').GENE_F * CPY float to FP register\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy a short floating point number to a register\n.GENE_F  ANOP  ,                       *\n         AIF   (&TO_LEN NE 2*&FROM_LEN).ERR7C * Lengths equal?\n         AIF   (&TO_LEN EQ 8).DO_LE    * Generate 1 LE\n         AGO   .GENLEM                 * Generate several LEs\n.*\n.* From type F: Signed fullword\n.GENF    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'F').GENGG  * CPY signed to signed\n         AIF   ('&TO_TP' EQ 'G').GENGG  * CPY signed to signed\n         AIF   ('&TO_TP' EQ 'H').GENGG  * CPY signed to signed\n         AIF   ('&TO_TP' EQ 'g').GENF_G * CPY signed to register\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy a signed fullword to a register\n.GENF_G  ANOP  ,                       *\n         AIF   (&TO_LEN LE 4).GENICM   * Generate 1 ICM/L/LH\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_LM                  * Generate 1 LM\n.*\n.* From type G: Unaligned signed\n.GENG    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'F').GENGG  * CPY signed to signed\n         AIF   ('&TO_TP' EQ 'G').GENGG  * CPY signed to signed\n         AIF   ('&TO_TP' EQ 'H').GENGG  * CPY signed to signed\n         AIF   ('&TO_TP' EQ 'g').GENG_G * CPY signed to register\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy an unaligned signed number\n.GENGG   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_LEN GT 256).ERR7E *\n         AIF   (&TO_LEN LE &FROM_LEN).GENMVC0 * Copy or truncate\n         AIF   (&TO_LEN GT 8).GENGG20  * Cannot use registers to extend\n         AIF   (&TO_LEN GT 4).GENGG6   * Must use pair of regs\n.* Source and extended dest.value both fit in a single register\n         EQUREG R0=YES,TEMP=YES        * Assign a register\n         AIF   (&BXA_RC GT 0).ERR7H    * No reg available!\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name\n&MASK    SETC  'YNNN'                  * Mask for 1-byte value\n&I       SETA  24                      * Nr of bits to shift\n         AIF   (&FROM_LEN EQ 1).GENGG0 * Go load value\n&MASK    SETC  'YYNN'                  * Mask for 2-byte value\n&I       SETA  16                      * Nr of bits to shift\n         AIF   (&FROM_LEN EQ 2 AND '&FROM_TP' NE 'G').GENGG1\n         AIF   (&FROM_LEN EQ 2).GENGG0 * Go load value\n&MASK    SETC  'YYYN'                  * Length MUST be 3 bytes!\n&I       SETA  8                       * Nr of bits to shift\n.GENGG0  ANOP  ,                       * Use ICM to load value\n&_LABEL  ICM   &REG,&MASK,&_FROM1      * Load source value\n&_LABEL  SETC  ''                      * Wipe used label\n         SRA   &REG,&I                 * Create fullword value\n         AGO   .GENGG2                 * Go save value in dest field\n.GENGG1  ANOP  ,                       * Happens to be aligned!\n&_LABEL  LH    &REG,&_FROM1            * Load source value\n&_LABEL  SETC  ''                      * Wipe used label\n.GENGG2  ANOP  ,                       * Value now in &REG\n&MASK    SETC  'NNYY'                  * Min.dest.size is 2 bytes!\n         AIF   (&TO_LEN EQ 2 AND '&TO_TP' NE 'G').GENGG4\n         AIF   (&TO_LEN EQ 2).GENGG3   * Go save value\n&MASK    SETC  'NYYY'                  * Mask for 3-byte value\n         AIF   (&TO_LEN EQ 3).GENGG3   * Go save value\n&MASK    SETC  'YYYY'                  * MUST be 4 bytes long!\n         AIF   ('&TO_TP' EQ 'F').GENGG5 * Go save value\n.GENGG3  ANOP  ,                       * Save value using STCM\n         STCM  &REG,&MASK,&_TO1        * Save extended value\n         MEXIT ,                       *\n.GENGG4  ANOP  ,                       * Go save value using STH\n         STH   &REG,&_TO1              * Save extended value\n         MEXIT ,                       *\n.GENGG5  ANOP  ,                       * Go save value using ST\n         ST    &REG,&_TO1              * Save extended value\n         MEXIT ,                       *\n.* Extend up to 8 bytes using a pair of registers\n.GENGG6  ANOP  ,                       *\n         EQUREG R0=YES,TEMP=YES,PAIR=YES,WARN=NO * Assign pair of regs\n         AIF   (&BXA_RC GT 0).GENGG20  * No pair available!\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name\n&I       SETA  &BXA_NUMVAL+1           * Nr of odd register\n&ODDREG  SETC  'R'.'&I'                * Odd register name\n&MASK    SETC  'YNNN'                  * Mask for a 1-byte value\n&I       SETA  56                      * Nr of bits to shift\n         AIF   (&FROM_LEN EQ 1).GENGG7 * Go load 1-byte value\n&MASK    SETC  'YYNN'                  * Mask for a 1-byte value\n&I       SETA  48                      * Nr of bits to shift\n         AIF   (&FROM_LEN EQ 2 AND '&FROM_TP' NE 'G').GENGG8 *\n         AIF   (&FROM_LEN EQ 2).GENGG7 * Go load 2-byte value\n&MASK    SETC  'YYYN'                  * Mask for a 3-byte value\n&I       SETA  40                      * Nr of bits to shift\n         AIF   (&FROM_LEN EQ 3).GENGG7 * Go load 3-byte value\n&MASK    SETC  'YYYY'                  * Mask for a 4-byte value\n&I       SETA  32                      * Nr of bits to shift\n         AIF   (&FROM_LEN EQ 4 AND '&FROM_TP' EQ 'F').GENGG9 *\n         AIF   (&FROM_LEN EQ 4).GENGG7 * Go load 4-byte value\n         AGO   .GENGG10                * Go load larger values\n.GENGG7  ANOP  ,                       * ICM value up to 4 bytes with\n&_LABEL  ICM   &REG,&MASK,&_FROM1      * Load value\n&_LABEL  SETC  ''                      * Remove used label\n         SRDA  &REG,&I                 * Create 8-byte value\n         AGO   .GENGG14                * Go save created value\n.GENGG8  ANOP  ,                       * LH value of 2 bytes\n&_LABEL  LH    &REG,&_FROM1            * Load value\n&_LABEL  SETC  ''                      * Remove used label\n         SRDA  &REG,32                 * Create 8-byte value\n         AGO   .GENGG14                * Go save created value\n.GENGG9  ANOP  ,                       * Load 4-byte value\n&_LABEL  L     &REG,&_FROM1            * Load value\n&_LABEL  SETC  ''                      * Remove used label\n         SRDA  &REG,32                 * Create 8-byte value\n         AGO   .GENGG14                * Go save created value\n.* Source for move is 5 to 7 bytes long\n.GENGG10 ANOP  ,                       *\n&MASK    SETC  'YNNN'                  * Mask for a 5-byte value\n&I       SETA  24                      * Nr of bits to shift\n         AIF   (&FROM_LEN EQ 5).GENGG11 * Go load 5-byte value\n&MASK    SETC  'YYNN'                  * Mask for a 6-byte value\n&I       SETA  16                      * Nr of bits to shift\n         AIF   (&FROM_LEN EQ 6 AND '&FROM_TP' NE 'G').GENGG12\n         AIF   (&FROM_LEN EQ 6).GENGG11 * Go load 6-byte value\n&MASK    SETC  'YYYN'                  * Mask for a 7-byte value\n&I       SETA  8                       * Nr of bits to shift\n.GENGG11 ANOP  ,                       *\n&_LABEL  ICM   &REG,&MASK,&_FROM1      * Load source data\n&_LABEL  SETC  ''                      * Remove used label\n         SRA   &REG,&I                 * Create first fullword of value\n         AGO   .GENGG13                * Go load second register\n.GENGG12 ANOP  ,                       * Source aligned: use LH\n&_LABEL  LH    &REG,&_FROM1            * Load source data\n&_LABEL  SETC  ''                      * Remove used label\n.GENGG13 ANOP  ,                       * First register now ok\n&I       SETA  &I/8                    * Set I to nr of bytes shifted\n&I       SETA  4-&I                    * Set I to nr of bytes loaded\n         ICM   &ODDREG,YYYY,&_FROM1+&I * Load second register\n.GENGG14 ANOP  ,                       * Value in reg.pair can be saved\n&MASK    SETC  'NNNY'                  * 5 bytes is shortest possible\n&I       SETA  1                       * Offset for 2nd register\n         AIF   (&TO_LEN EQ 5).GENGG15  * Save 5-byte value\n&MASK    SETC  'NNYY'                  * Mask for 6-byte value\n&I       SETA  2                       * Offset for 2nd register\n         AIF   (&TO_LEN EQ 6 AND '&TO_TP' NE 'G').GENGG16 *\n         AIF   (&TO_LEN EQ 6).GENGG15  * Save 6-byte value\n&MASK    SETC  'NYYY'                  * Mask for 7-byte value\n&I       SETA  3                       * Offset for 2nd register\n         AIF   (&TO_LEN EQ 7).GENGG15  * Save 7-byte value\n&MASK    SETC  'YYYY'                  * Mask for 8-byte value\n&I       SETA  4                       * Offset for 2nd register\n         AIF   ('&TO_TP' NE 'F').GENGG15 * Save 8-byte value\n         STM   &REG,&ODDREG,&_TO1      * Aligned! Use STM\n         MEXIT ,                       *\n.GENGG15 ANOP  ,                       * Save value with STCM\n         STCM  &REG,&MASK,&_TO1        * Save first part of result\n         STCM  &ODDREG,YYYY,&_TO1+&I   * Save second register\n         MEXIT ,                       *\n.GENGG16 ANOP  ,                       * Save value with STH/STCM\n         STH   &REG,&_TO1              * Save first part of result\n         STCM  &ODDREG,YYYY,&_TO1+&I   * Save second register\n         MEXIT ,                       *\n.* Logic for extending in storage\n.GENGG20 ANOP  ,                       * &TO_LEN greater than 4\n&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of sign bytes to add\n         EQUREG R0=YES,TEMP=YES        * Assign a register\n         AIF   (&BXA_RC NE 0).ERR7H    * Error\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name\n&_LABEL  ICM   &REG,YNNN,&_FROM1       * Load first byte of source\n&_LABEL  SETC  ''                      * Wipe used-up label\n         SRA   &REG,31                 * Create 4 sign bytes\n&MASK    SETC  'YNNN'                  * Mask for 1 sign byte\n         AIF   (&PAD_LEN EQ 1).GENGG21 * Go fill pad-area\n&MASK    SETC  'YYNN'                  * Mask for 2 sign bytes\n         AIF   (&PAD_LEN EQ 2 AND '&TO_TP' NE 'G').GENGG22 *\n         AIF   (&PAD_LEN EQ 2).GENGG21 * Go fill pad-area\n&MASK    SETC  'YYYN'                  * Mask for 3 sign bytes\n         AIF   (&PAD_LEN EQ 3).GENGG21 * Go fill pad-area\n&MASK    SETC  'YYYY'                  * Mask for 4 sign bytes\n         AIF   (&PAD_LEN EQ 4 AND '&TO_TP' EQ 'F').GENGG23 *\n         AIF   (&PAD_LEN EQ 4).GENGG21 * Go fill pad-area\n&MASK    SETC  'YNNN'                  * Mask for 1 sign byte\n.GENGG21 ANOP  ,                       * Set up sign with STCM\n         STCM  &REG,&MASK,&_TO1        * Save sign byte(s)\n         AIF   (&PAD_LEN LE 4).GENGG24 * Go copy value bytes\n         MVC   &_TO1+1(&PAD_LEN-1),&_TO1 * Propagate byte, extend sign\n         AGO   .GENGG24                * Go extend sign (if needed)\n.GENGG22 ANOP  ,                       * Set up sign with STH\n         STH   &REG,&_TO1              * Save sign bytes\n         AGO   .GENGG24                * Go copy value bytes\n.GENGG23 ANOP  ,                       * Set up sign with STH\n         ST    &REG,&_TO1              * Save sign bytes\n.GENGG24 ANOP  ,                       * Copy value bytes\n         MVC   &_TO1+&PAD_LEN.(&FROM_LEN),&_FROM1 * Copy value\n         MEXIT ,                       *\n.*\n.* Copy an unaligned signed number to a register\n.GENG_G  ANOP  ,                       *\n         AIF   (&TO_LEN LE 4).GENICM   * Generate 1 ICM/L/LH\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENICMM                * Generate several ICMs\n.*\n.* From type H: Signed halfword\n.GENH    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'F').GENGG  * CPY signed to signed\n         AIF   ('&TO_TP' EQ 'G').GENGG  * CPY signed to signed\n         AIF   ('&TO_TP' EQ 'H').GENGG  * CPY signed to signed\n         AIF   ('&TO_TP' EQ 'g').GENH_G * CPY signed to register\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy a signed halfword to a register\n.GENH_G  ANOP  ,                       *\n         AIF   (&TO_LEN LE 4).GENICM   * Generate 1 ICM/L/LH\n         AIF   (&TO_LEN NE 2*&FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENLHM                 * Generate several LHs\n.*\n.* From type K: Unaligned floating point field\n.GENK    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'D').GENKK  * CPY float to float\n         AIF   ('&TO_TP' EQ 'E').GENKK  * CPY float to float\n         AIF   ('&TO_TP' EQ 'K').GENKK  * CPY float to float\n         AIF   ('&TO_TP' EQ 'f').GENK_F * CPY float to FP register\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy a floating point number\n.GENKK   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_LEN GT 256).ERR7E *\n         AIF   (&TO_LEN EQ &FROM_LEN).DO_MVC * Lengths equal?\n&PAD0    SETB  1                       * Use zeros for padding\n&PAD_LEN SETA  0                       * Nr of padding bytes needed\n&LEN     SETA  &TO_LEN                 * Determine length of move\n         AIF   (&TO_LEN LE &FROM_LEN).GENKK1\n&LEN     SETA  &FROM_LEN               * FROM-length is shorter\n&PAD_LEN SETA  &TO_LEN-&LEN            * Nr of padding bytes needed\n&TO_LEN  SETA  &LEN                    * Truncate destination field\n.GENKK1  ANOP  ,                       * &LEN now effective length\n         AIF   (&PAD_LEN LT 1).DO_MVC  * No padding required: use MVC\n&_LABEL  CLEAR (&_TO1+&LEN,&PAD_LEN),,XC * Wipe padding area\n&_LABEL  SETC  ''                      * Label no longer needed\n         AGO   .DO_MVC                 *\n.*\n.* Copy an unaligned floating point number to a register\n.GENK_F  ANOP  ,                       *\n         AIF   (&TO_LEN NE 8).ERR7J    * 1 register only?\n         AIF   (&FROM_LEN EQ 4).DO_LE  * Generate 1 LE\n         AIF   (&FROM_LEN EQ 8).DO_LD  * Generate 1 LD\n         AGO   .ERR7K                  * Error\n.*\n.* From type L: Extended floating point field\n.GENL    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'L').GENLL  * CPY float to float\n         AIF   ('&TO_TP' EQ 'f').GENL_F * CPY float to FP register pair\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy an extended floating point number\n.GENLL   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_LEN GT 256).ERR7E *\n         AIF   (&TO_LEN EQ &FROM_LEN).DO_MVC * Lengths equal?\n         AIF   (&FROM_LEN LT 6).ERR7L  * Source too short\n         AIF   (&TO_LEN LT 6).ERR7L    * Destination too short\n         AGO   .GENKK                  * Otherwise: copy float field\n.*\n.* Copy an extended floating point number to a register\n.GENL_F  ANOP  ,                       *\n         AIF   (K'&_TO2 EQ 0).GENL_F1  * Just a register spec'd?\n         AIF   (NOT &TO_EREG).GENL_F2  * End register specified?\n.GENL_F1 ANOP  ,                       *\n&TO_LEN  SETA  &TO_LEN+8               * Yes: add length of odd reg\n.GENL_F2 ANOP  ,                       * &TO_LEN is now correct\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENLXM                 * Generate several LDs\n.*\n.* From type P: Packed decimal field\n.GENP    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'P').GENPP  * CPY packed to packed\n         AIF   ('&TO_TP' EQ 'Z').GENPZ  * CPY packed to zoned\n         AIF   ('&TO_TP' EQ 'g').GENP_G * CPY packed to register\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy a packed field\n.GENPP   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_LEN GT 256).ERR7E *\n         AIF   (&FROM_LEN EQ &TO_LEN).DO_MVC\n         AIF   (&FROM_LEN LE 16 AND &TO_LEN LE 16).DO_ZAP\n         AIF   (&FROM_LEN GT &TO_LEN).GENPP0\n&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of prefix zeros to add\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),X'00'  * Wipe area\n&_LABEL  SETC  ''                      * Wipe used label\n         MVC   &_TO1+&PAD_LEN.(&FROM_LEN),&_FROM1 * Copy decimal data\n         MEXIT ,                       *\n.GENPP0  ANOP  ,                       * Source is larger\n&PAD_LEN SETA  &FROM_LEN-&TO_LEN       * Nr of excess source bytes\n&_FROM1  SETC  '&_FROM1'.'+&PAD_LEN'   * Skip excess bytes\n         AGO   .DO_MVC                 *\n.*\n.* Copy a packed field to a zoned field\n.GENPZ   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_LEN GT 256).ERR7E *\n&I       SETA  2*&FROM_LEN-1           * Nr of digits\n&PAD_LEN SETA  &TO_LEN-&I              * Nr of zeroes to append\n         AIF   (&PAD_LEN LT 1).GENPZ0  * No leading zeroes required\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),C'0'   * Initialize with leading zeros\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Modify destination field\n&TO_LEN  SETA  &I                      *    and reduce its length\n.GENPZ0  ANOP  ,                       *\n         AIF   (&FROM_LEN GT 16).ERR7N * Source too large\n         AIF   (&TO_LEN GT 16).ERR7O   * Destination too large\n         AGO   .DO_UNPK                *\n.*\n.* Copy a packed number to a register\n.GENP_G  ANOP  ,                       *\n         AIF   (&TO_LEN NE 4).GENP_G0  * 1 register only?\n         AIF   (&FROM_LEN EQ 8).DO_CVB *\n         AIF   (&FROM_LEN LT 8).ERR7P  * Source too short\n&I       SETA  &FROM_LEN-8             * Excess digits\n&_FROM1  SETC  '&_FROM1'.'+&I'         * Skip excess digits\n&_FROM_LEN SETA 8                      * Adjust length\n         AGO   .DO_CVB                 * And go load register\n.GENP_G0 ANOP  ,                       *\n         AIF   (2*&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENCVBM                * Generate several CVBs\n.*\n.* From type Q: 4-byte offset address field\n.GENQ    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'Q').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'g').GENA_G  * CPY address to gpr\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* From type R: unaligned address field\n.GENR    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'A').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'Q').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'S').GENRS   * CPY address to address\n         AIF   ('&TO_TP' EQ 'V').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'Y').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'g').GENA_G  * CPY address to gpr\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy an unaligned address field to an S-type address field\n.GENRS   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_LEN GT 256).ERR7E *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_MVC                 *\n.*\n.* From type S: 2-byte address field - base-displacement\n.GENS    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'R').GENSS  * CPY address to address\n         AIF   ('&TO_TP' EQ 'S').GENSS  * CPY address to address\n         AIF   ('&TO_TP' EQ 'g').GENS_G * CPY address to gpr\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy an S-type address field to a field\n.GENSS   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_LEN GT 256).ERR7E *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_MVC                 *\n.*\n.* Copy an S-type address field to a register\n.GENS_G  ANOP  ,                       *\n         AIF   (&TO_LEN NE 4).ERR7Q    * Only 1 register!\n         AIF   (&FROM_LEN NE 2).ERR7R  * Must be two bytes long!\n         EQUREG TEMP=YES               * Assign work register\n         AIF   (&BXA_RC NE 0).ERR7S    *\n         AIF   (&BXA_NUMVAL NE &TO_REG).GENS_G0\n         USE   &_TO1                   * Set register in use\n         EQUREG TEMP=YES               * Assign work register\n&I       SETA  &BXA_RC                 * Save returncode\n&J       SETA  &BXA_NUMVAL             *    and return value\n         DROP  &_TO1                   * End of forced register use\n         AIF   (&BXA_RC NE 0).ERR7S    * No work register available\n.GENS_G0 ANOP  ,                       * Register allocated correctly\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name\n&_LABEL  LH    &REG,&_FROM1            * Load whole S-constant\n&_LABEL  SETC  ''                      * Wipe used label\n         SRL   &REG,12                 * Base register nr in low-order\n         LA    &_TO1,16*&_TO1          * Load register with its number\n         OR    &REG,&_TO1              * &REG now contains &to,&base\n         EX    &REG,_CPY&SYSNDX        * Copy base to destination reg\n         B     _CPY_&SYSNDX            * Skip executable instruction\n_CPY&SYSNDX LABEL ,                    *\n         DC    X'1800'                 * LR instruction\n_CPY_&SYSNDX LABEL ,                   *\n         LH    &REG,&_FROM1            * Reload S-constant\n         SLL   &REG,20                 * Remove register number\n         SRL   &REG,20                 * Keep offset in low-order bits\n         AR    &_TO1,&REG              * Create result value\n         MEXIT ,                       *\n.*\n.* From type V: 4-byte address field\n.GENV    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'A').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'V').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'Y').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'g').GENA_G  * CPY address to gpr\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* From type X: Hexadecimal data field (unsigned)\n.GENX    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'B').GENMVC0 * CPY unsigned to unsigned\n         AIF   ('&TO_TP' EQ 'X').GENMVC0 * CPY unsigned to unsigned\n         AIF   ('&TO_TP' EQ 'a').GENB_A  * CPY unsigned to ARnn\n         AIF   ('&TO_TP' EQ 'c').GENB_C  * CPY unsigned to CRnn\n         AIF   ('&TO_TP' EQ 'g').GENB_G  * CPY unsigned to Rnn\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* From type Y: 2-byte address field\n.GENY    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'A').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'R').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'V').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'Y').GENMVC0 * CPY address to address\n         AIF   ('&TO_TP' EQ 'g').GENY_G  * CPY address to gpr\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy halfword address field to general purpose register(s)\n.GENY_G  ANOP  ,                       *\n         AIF   (&TO_LEN NE 2*&FROM_LEN).ERR7C * Lengths equal?\n&I       SETA  &TO_REG                 * Save first register number\n&J       SETA  0                       * Offset in source field\n.GENY_G0 ANOP  ,                       * Loop\n&_LABEL  LTHU  &_TO1,&_FROM1+&J        *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill\n&J       SETA  &J+2                    * Point next halfword\n&I       SETA  &I+1                    * Next register number\n         AIF   (&I LT 16).GENY_G1      * Valid register nr\n&I       SETA  0                       * Wrap-around to R0\n.GENY_G1 ANOP  ,                       * I now next register nr\n&_TO1    SETC  'R'.'&I'                * Create next register name\n         AGO   .GENY_G0                *\n.*\n.* From type Z: Zoned decimal field\n.GENZ    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'P').GENZP  * CPY zoned to packed\n         AIF   ('&TO_TP' EQ 'Z').GENZZ  * CPY zoned to zoned\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy a zoned field to a packed field\n.GENZP   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_LEN GT 256).ERR7E *\n&I       SETA  (&FROM_LEN/2)+1         * Nr of result bytes\n&PAD_LEN SETA  &TO_LEN-&I              * Nr of zeroes to append\n         AIF   (&PAD_LEN LT 1).GENZP0  * No leading zeroes required\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Initialize with leading zeros\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Modify destination field\n&TO_LEN  SETA  &I                      *    and reduce its length\n.GENZP0  ANOP  ,                       *\n         AIF   (&FROM_LEN GT 16).ERR7G * Source too large\n         AGO   .DO_PACK                *\n.*\n.* Copy a zoned decimal field\n.GENZZ   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_LEN GT 256).ERR7E *\n         AIF   (&TO_LEN EQ &FROM_LEN).DO_MVC\n&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of leading zeros\n         AIF   (&PAD_LEN LT 1).GENZZ0  * No leading zeros required\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),C'0'   *\n&_LABEL  SETC  ''                      * Wipe used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination address\n&TO_LEN  SETA  &FROM_LEN               *\n         AGO   .DO_MVC                 * And go copy data portion\n.GENZZ0  ANOP  ,                       * Trucation required\n&PAD_LEN SETA  &FROM_LEN-&TO_LEN       * Nr of bytes to skip\n&_FROM1  SETC  '&_FROM1'.'+&PAD_LEN'   * Advannce source address\n&FROM_LEN SETA &TO_LEN                 *\n         AGO   .DO_MVC                 * And go copy data portion\n.*\n.* From type 0: Literal number\n.GEN0    ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'B').GEN0B  * CPY number to unsigned\n         AIF   ('&TO_TP' EQ 'D').GEN0K  * CPY number to long float\n         AIF   ('&TO_TP' EQ 'E').GEN0K  * CPY number to short float\n         AIF   ('&TO_TP' EQ 'F').GEN0G  * CPY number to fixed\n         AIF   ('&TO_TP' EQ 'G').GEN0G  * CPY number to fixed\n         AIF   ('&TO_TP' EQ 'H').GEN0G  * CPY number to fixed\n         AIF   ('&TO_TP' EQ 'K').GEN0K  * CPY number to float\n         AIF   ('&TO_TP' EQ 'L').GEN0L  * CPY number to extended float\n         AIF   ('&TO_TP' EQ 'P').GEN0P  * CPY number to packed\n         AIF   ('&TO_TP' EQ 'X').GEN0B  * CPY number to unsigned\n         AIF   ('&TO_TP' EQ 'Z').GEN0Z  * CPY number to zoned\n         AIF   ('&TO_TP' EQ 'a').GEN0_A * CPY number to access register\n         AIF   ('&TO_TP' EQ 'f').GEN0_F * CPY number to float register\n         AIF   ('&TO_TP' EQ 'g').GEN0_G * CPY number to register\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy a literal number to an unsigned field\n.GEN0B   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&TO_LEN LT &FROM_LEN).ERR7I * FROM_LEN <= 4 for literal\n         AIF   (&FROM_VAL LT 0).ERR7U  * FROM_LEN <= 4 for literal\n         AIF   (&TO_LEN LE 4).GEN0B0   * Just an MVC please\n&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of leading zeros needed\n         AIF   (&PAD_LEN LT 1).GEN0B0  * No padding needed\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Wipe prefix area\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Adjust destination for move\n&TO_LEN  SETA  &FROM_LEN               *    and length too\n.GEN0B0  ANOP  ,                       *\n         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields\n&_FROM1  SETC  '=AL&TO_LEN'.'(&_FROM1)' * Create literal to copy\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.*\n.* Copy a literal number to a signed field\n.GEN0G   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n         AIF   (&FROM_VAL EQ 0).GEN0G0 * Zero value requested?\n         AIF   (&TO_LEN LT &FROM_LEN).ERR7I * FROM_LEN <= 4 for literal\n         AIF   (&TO_LEN LE 4).GEN0G1   * Just an MVC please\n&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of leading zeros needed\n         AIF   (&PAD_LEN LT 1).GEN0G1  * No padding needed\n         AIF   ('&SIGN' EQ '-').ERR7X  *\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Wipe prefix area\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Adjust destination for move\n&TO_LEN  SETA  &FROM_LEN               *    and length too\n         AGO   .GEN0G1                 *\n.GEN0G0  ANOP  ,                       *\n&_LABEL  CLEAR (&_TO1,&TO_LEN),,XC     * Insert zero value\n         MEXIT ,                       *\n.GEN0G1  ANOP  ,                       *\n         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields\n         AIF   (&EQULIT).GEN0G2        *\n&_FROM1  SETC  '=FL&TO_LEN'.'''&_FROM1''' * Create literal\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.GEN0G2  ANOP  ,                       *\n&_FROM1  SETC  '=FL&TO_LEN'.'''&FROM_VAL''' * Create literal\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.*\n.* Copy a literal number to a floating point field\n.GEN0K   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n&FROM_LEN SETA &FROM_LEN+1             * Add room for exponent byte\n         AIF   (&TO_LEN LT &FROM_LEN).ERR7I * FROM_LEN <= 5 for literal\n         AIF   (&FROM_LEN GE 5).GEN0K0 * May be useful to expand\n         AIF   (&FROM_LEN EQ &TO_LEN).GEN0K2 * literal length\n         AIF   (&TO_LEN GE 5).GEN0K0   * to accomodate value\n&FROM_LEN SETA &TO_LEN                 *\n         AGO   .GEN0K2                 * No padding required!\n.GEN0K0  ANOP  ,                       *\n&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of padding zeros needed\n         AIF   (&PAD_LEN LT 1).GEN0K2  * No padding needed\n         AIF   ('&SIGN' EQ '-').ERR7X  *\n&_LABEL  CLEAR (&_TO1+&FROM_LEN,&PAD_LEN),,XC * Wipe prefix area\n&_LABEL  SETC  ''                      * Remove used label\n&TO_LEN  SETA  &FROM_LEN               * Adjust length of dest.field\n.GEN0K2  ANOP  ,                       *\n         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields\n         AIF   (&EQULIT).GEN0K3        *\n&_FROM1  SETC  '=DL&TO_LEN'.'''&_FROM1''' * Create literal to copy\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.GEN0K3  ANOP  ,                       *\n&_FROM1  SETC  '=DL&TO_LEN'.'''&FROM_VAL''' * Create literal to copy\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.*\n.* Copy a literal number to an extended floating point field\n.GEN0L   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n&FROM_LEN SETA &FROM_LEN+1             * Add room for exponent byte\n         AIF   (&FROM_LEN GE 6).GEN0L0 * Check minimum size for\n&FROM_LEN SETA 6                       *  L-type literal: 6 bytes min.\n.GEN0L0  ANOP  ,                       *\n         AIF   (&TO_LEN LT &FROM_LEN).ERR7I * FROM_LEN <= 5 for literal\n         AIF   (&FROM_LEN GE 8).GEN0L1 * May be useful to expand\n         AIF   (&FROM_LEN EQ &TO_LEN).GEN0L2 * literal length\n         AIF   (&TO_LEN GE 8).GEN0L1   * to accomodate value\n&FROM_LEN SETA &TO_LEN                 *\n         AGO   .GEN0L2                 * No padding required!\n.GEN0L1  ANOP  ,                       *\n&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of additional zeros needed\n         AIF   (&PAD_LEN LT 1).GEN0L2  * No padding needed\n         AIF   ('&SIGN' EQ '-').ERR7X  *\n&_LABEL  CLEAR (&_TO1+&FROM_LEN,&PAD_LEN),,XC * Wipe extension area\n&_LABEL  SETC  ''                      * Remove used label\n&TO_LEN  SETA  &FROM_LEN               * And reduce destination length\n.GEN0L2  ANOP  ,                       *\n         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields\n         AIF   (&EQULIT).GEN0L3        *\n&_FROM1  SETC  '=LL&TO_LEN'.'''&_FROM1''' * Create literal to copy\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.GEN0L3  ANOP  ,                       *\n&_FROM1  SETC  '=LL&TO_LEN'.'''&FROM_VAL''' * Create literal to copy\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.*\n.* Copy a literal number to a packed decimal field\n.GEN0P   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n&LEN     SETA  K'&FROM_VAL             * Nr of digits in literal\n&LEN     SETA  (&LEN/2)+1              * Nr of positions required\n         AIF   (&TO_LEN LT &LEN).ERR7I * Won't fit!\n&PAD_LEN SETA  &TO_LEN-&LEN            * Nr of leading zeros needed\n         AIF   (&PAD_LEN LT 1).GEN0P0  * No padding needed\n         AIF   ('&SIGN' EQ '-').ERR7X  *\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Wipe prefix area\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Adjust destination for move\n&TO_LEN  SETA  &LEN                    *    and length too\n.GEN0P0  ANOP  ,                       *\n         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields\n         AIF   (&EQULIT).GEN0P1        *\n&_FROM1  SETC  '=PL&TO_LEN'.'''&_FROM1''' * Create literal to copy\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.GEN0P1  ANOP  ,                       *\n&_FROM1  SETC  '=PL&TO_LEN'.'''&FROM_VAL''' * Create literal to copy\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.*\n.* Copy a literal number to a zoned decimal field\n.GEN0Z   ANOP  ,                       *\n         AIF   (&TO_LEN GT 256).ERR7D  *\n&LEN     SETA  K'&FROM_VAL             * Nr of digits in literal\n         AIF   (&TO_LEN LT &LEN).ERR7I * Won't fit!\n&PAD_LEN SETA  &TO_LEN-&LEN            * Nr of leading zeros needed\n         AIF   (&PAD_LEN LT 1).GEN0Z0  * No padding needed\n         AIF   ('&SIGN' EQ '-').ERR7X  *\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),C'0'   * Wipe prefix area\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Adjust destination for move\n&TO_LEN  SETA  &LEN                    *    and length too\n.GEN0Z0  ANOP  ,                       *\n         AIF   (&TO_LEN EQ 1).GEN0_MVI * Use MVI for 1-byte fields\n         AIF   (&EQULIT).GEN0Z1        *\n&_FROM1  SETC  '=ZL&TO_LEN'.'''&_FROM1''' * Create literal to copy\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.GEN0Z1  ANOP  ,                       *\n&_FROM1  SETC  '=ZL&TO_LEN'.'''&FROM_VAL''' * Create literal to copy\n         AGO   .GEN0_MVC               * Go generate MVC to copy\n.*\n.* Copy a literal number to an access register\n.GEN0_A  ANOP  ,                       *\n         AIF   (&FROM_VAL EQ 0).GEN0_A0 * Only literal values 0,\n         AIF   (&FROM_VAL EQ 1).GEN0_A1 *  1, and 2 are allowed for\n         AIF   (&FROM_VAL EQ 2).GEN0_A1 *  use with access registers\n         AGO   .ERR7T                  * Illegal literal for AR\n.GEN0_A0 ANOP  ,                       * Load with value of 0\n&_LABEL  CLEAR &_TO1                   * Wipe register to create 0\n&_LABEL  SETC  ''                      * Wipe used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done\n         AGO   .GEN0_A2                *\n.GEN0_A1 ANOP  ,                       * Load with value of 1 or 2\n         EQUREG TEMP=YES,R0=YES        * Find a free register\n         AIF   (&BXA_RC NE 0).ERR7S    * None available!\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create name of register\n&_LABEL  LA    &REG,&_FROM1            * Load ALET value\n&_LABEL  SETC  ''                      * Wipe used label\n         SAR   &_TO1,&REG              * Copy ALET to access register\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done\n.GEN0_A2 ANOP  ,                       * Copy ALET to other ARs\n&I       SETA  &TO_REG                 * Save first register number\n.GEN0_A3 ANOP  ,                       * Loop to fill ARs\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill\n&I       SETA  &I+1                    * Next register number\n         AIF   (&I LT 16).GEN0_A4      * Valid register nr\n&I       SETA  0                       * Wrap-around to AR0\n.GEN0_A4 ANOP  ,                       * I now next register nr\n&REG     SETC  'AR'.'&I'               * Create next register name\n         CPYA  &REG,&_TO1              * Copy ALET\n         AGO   .GEN0_A3                *\n.*\n.* Copy a literal number to a floating point register\n.* For a value of zero an SDR might be used, but this might generate\n.*     a significance interruption.\n.GEN0_F  ANOP  ,                       *\n&_FROM1  SETC  '=D'.'''&_FROM1'''      * Create literal to copy\n         AIF   (NOT &EQULIT).GEN0_F1   *\n&_FROM1  SETC  '=D'.'''&FROM_VAL'''    * Create literal to copy\n.GEN0_F1 ANOP  ,                       *\n&_LABEL  LD    &_TO1,&_FROM1           * Load value to register\n&_LABEL  SETC  ''                      * Wipe used label\n         AIF   (&TO_LEN EQ 8).MEND     * 1 register: done\n&I       SETA  &TO_REG                 * Save first register number\n.GEN0_F3 ANOP  ,                       * Loop to fill FPRs\n&TO_LEN  SETA  &TO_LEN-8               * Reduce length\n         AIF   (&TO_LEN LT 8).MEND     * No registers left to fill\n&I       SETA  &I+2                    * Next register number\n         AIF   (&I LT 8).GEN0_F4       * Valid register nr\n&I       SETA  0                       * Wrap-around to FPR0\n.GEN0_F4 ANOP  ,                       * I now next register nr\n&REG     SETC  'FPR'.'&I'              * Create next register name\n         LDR   &REG,&_TO1              * Copy value\n         AGO   .GEN0_F3                *\n.*\n.* Copy a literal number to a general purpose register\n.GEN0_G  ANOP  ,                       *\n         AIF   (&FROM_VAL EQ 0).GEN0_G0 * 0? use Clear\n         AIF   (&FROM_VAL LT 4096).GEN0_G1 *  Use LA if possible\n         AIF   (&FROM_VAL GT 32767).GEN0_G2 *  Too large for LH\n         AIF   (&FROM_VAL LT -32768).GEN0_G2 *  Too large for LH\n&_FROM1  SETC  '=H'.'''&_FROM1'''      * Create literal to copy\n         AIF   (NOT &EQULIT).GEN0_GA   *\n&_FROM1  SETC  '=H'.'''&FROM_VAL'''    * Create literal to copy\n.GEN0_GA ANOP  ,                       *\n&_LABEL  LH    &_TO1,&_FROM1           * Load value to register\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done\n         AGO   .GEN0_G3                *\n.GEN0_G0 ANOP  ,                       * Load with value of 0\n&_LABEL  CLEAR &_TO1                   * Wipe register to create 0\n&_LABEL  SETC  ''                      * Wipe used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done\n         AGO   .GEN0_G3                *\n.GEN0_G1 ANOP  ,                       * Load with value up to 4095\n&_LABEL  LA    &_TO1,&_FROM1           * Load value\n&_LABEL  SETC  ''                      * Wipe used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done\n         AGO   .GEN0_G3                *\n.GEN0_G2 ANOP  ,                       *\n&_FROM1  SETC  '=F'.'''&_FROM1'''      * Create literal to copy\n         AIF   (NOT &EQULIT).GEN0_GB   *\n&_FROM1  SETC  '=F'.'''&FROM_VAL'''    * Create literal to copy\n.GEN0_GB ANOP  ,                       *\n&_LABEL  L     &_TO1,&_FROM1           * Load value to register\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register: done\n         AGO   .GEN0_G3                *\n.GEN0_G3 ANOP  ,                       * Copy value to other regs\n&I       SETA  &TO_REG                 * Save first register number\n.GEN0_G4 ANOP  ,                       * Loop to fill regs\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill\n&I       SETA  &I+1                    * Next register number\n         AIF   (&I LT 16).GEN0_G5      * Valid register nr\n&I       SETA  0                       * Wrap-around to R0\n.GEN0_G5 ANOP  ,                       * I now next register nr\n&REG     SETC  'R'.'&I'                * Create next register name\n         LR    &REG,&_TO1              * Copy value\n         AGO   .GEN0_G4                *\n.*\n.* Logic to generate a move of a literal after truncation or expansion\n.*   has been dealt with.\n.GEN0_MVC ANOP ,                       * All GEN0-routines enter here\n         AIF   (K'&_TO2 NE 0).GEN0_MVC1 * Use explicit length\n         AIF   (&TO_LEN NE L'&_TO1).GEN0_MVC1 * Use explicit length\n&_LABEL  MVC   &_TO1,&_FROM1           *\n         MEXIT ,                       *\n.GEN0_MVC1 ANOP ,                      * MVC with explicit length\n&_LABEL  MVC   &_TO1.(&TO_LEN),&_FROM1 *\n         MEXIT ,                       *\n.*\n.* Logic to generate a move of a literal to a 1-byte field\n.GEN0_MVI ANOP ,                       * All GEN0-routines enter here\n         AIF   ('&_FROM1'(1,1) NE '=').GEN0_MVI0\n&_FROM1  SETC  '&_FROM1'(2,*)          * Remove leading = sign\n.GEN0_MVI0 ANOP ,                      *\n&_LABEL  MVI   &_TO1,&_FROM1           *\n         MEXIT ,                       *\n.*\n.* From type a: Access Register\n.GEN_A   ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'B').GEN_AB  * CPY AR to binary\n         AIF   ('&TO_TP' EQ 'X').GEN_AB  * CPY AR to binary\n         AIF   ('&TO_TP' EQ 'a').GEN_A_A * CPY AR to AR\n         AIF   ('&TO_TP' EQ 'g').GEN_A_G * CPY AR to GPR\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy access register(s) to an unsigned binary field\n.GEN_AB  ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_STAM                * Go generate STAM instruction\n.*\n.* Copy access register(s) to access register(s)\n.GEN_A_A ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n&_LABEL  CPYA  &_TO1,&_FROM1           * Copy ALET\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?\n.GEN_A_A0 ANOP ,                       * Loop to copy ARs\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy\n&TO_REG  SETA  &TO_REG+1               * Next dest reg nr\n         AIF   (&TO_REG LT 16).GEN_A_A1 * Valid register nr\n&TO_REG  SETA  0                       * Wrap-around to AR0\n.GEN_A_A1 ANOP ,                       * TO_REG now next register nr\n&FROM_REG SETA &FROM_REG+1             * Next src reg nr\n         AIF   (&FROM_REG LT 16).GEN_A_A2 * Valid register nr\n&FROM_REG SETA 0                       * Wrap-around to AR0\n.GEN_A_A2 ANOP ,                       * FROM_REG now next register nr\n&REG     SETC  'AR'.'&TO_REG'          * Create next dest.reg name\n&ODDREG  SETC  'AR'.'&FROM_REG'        * Create next src.reg name\n         CPYA  &REG,&ODDREG            * Copy ALET\n         AGO   .GEN_A_A0               *\n.*\n.* Copy access register(s) to GP register(s)\n.GEN_A_G ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n&_LABEL  EAR   &_TO1,&_FROM1           * Copy ALET\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?\n.GEN_A_G0 ANOP ,                       * Loop to copy ARs\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy\n&TO_REG  SETA  &TO_REG+1               * Next dest reg nr\n         AIF   (&TO_REG LT 16).GEN_A_G1 * Valid register nr\n&TO_REG  SETA  0                       * Wrap-around to R0\n.GEN_A_G1 ANOP ,                       * TO_REG now next register nr\n&FROM_REG SETA &FROM_REG+1             * Next src reg nr\n         AIF   (&FROM_REG LT 16).GEN_A_G2 * Valid register nr\n&FROM_REG SETA 0                       * Wrap-around to AR0\n.GEN_A_G2 ANOP ,                       * FROM_REG now next register nr\n&REG     SETC  'R'.'&TO_REG'           * Create next dest.reg name\n&ODDREG  SETC  'AR'.'&FROM_REG'        * Create next src.reg name\n         EAR   &REG,&ODDREG            * Copy ALET\n         AGO   .GEN_A_G0               *\n.*\n.* From type c: Control Register\n.GEN_C   ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'B').GEN_CB * CPY CR to binary\n         AIF   ('&TO_TP' EQ 'X').GEN_CB * CPY CR to binary\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy control register(s) to an unsigned binary field\n.GEN_CB  ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_STCTL               * Go generate STCTL instruction\n.*\n.* From type f: Floating Point Register\n.GEN_F   ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'D').GEN_FD  * CPY FPR to long\n         AIF   ('&TO_TP' EQ 'E').GEN_FE  * CPY FPR to short\n         AIF   ('&TO_TP' EQ 'K').GEN_FK  * CPY FRP to float field\n         AIF   ('&TO_TP' EQ 'L').GEN_FL  * CPY FPR to extended\n         AIF   ('&TO_TP' EQ 'f').GEN_F_F * CPY FPR to FPR\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy floating point register(s) to long field(s)\n.GEN_FD  ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AIF   (&TO_LEN EQ 8).DO_STD   * Generate 1 STD\n         AGO   .GENSTDM                * Generate several STDs\n.*\n.* Copy floating point register(s) to short field(s)\n.GEN_FE  ANOP  ,                       *\n         AIF   (2*&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AIF   (&TO_LEN EQ 4).DO_STE   * Generate 1 STE\n         AGO   .GENSTEM                * Generate several STEs\n.*\n.* Copy floating point register to floating field (any length)\n.GEN_FK  ANOP  ,                       *\n         AIF   (&FROM_LEN GT 16).ERR7W * Cannot save more than 2 regs\n         AIF   (&FROM_LEN EQ 16).GEN_FK1 * Store extended operand!\n.* Handle 1 register\n         AIF   (&TO_LEN LT 4).ERR7I    * Dest.field too short\n         AIF   (&TO_LEN GE 8).GEN_FK0  * Go save long operand\n.* Handle short operand\n&PAD_LEN SETA  &TO_LEN-4               * Nr of trailing zeroes required\n         AIF   (&PAD_LEN EQ 0).GEN_FE  * No padding: store short\n&_LABEL  CLEAR (&_TO1+4,&PAD_LEN),,XC  * Wipe trailer area\n&_LABEL  SETC  ''                      * Remove generated label\n&TO_LEN  SETA  4                       * Length of area to fill\n         AGO   .GEN_FE                 * Go store 1 short operand\n.GEN_FK0 ANOP  ,                       * Must store a long operand\n&PAD_LEN SETA  &TO_LEN-8               * Nr of trailing zeroes required\n         AIF   (&PAD_LEN EQ 0).GEN_FD  * No padding: store long\n&_LABEL  CLEAR (&_TO1+8,&PAD_LEN),,XC  * Wipe trailer area\n&_LABEL  SETC  ''                      * Remove generated label\n&TO_LEN  SETA  8                       * Length of area to fill\n         AGO   .GEN_FD                 * Go store 1 long operand\n.GEN_FK1 ANOP  ,                       * Must store an extended operand\n         AIF   (&TO_LEN LT 16).ERR7I   * Dest.field too short\n&PAD_LEN SETA  &TO_LEN-16              * Nr of trailing zeroes required\n         AIF   (&PAD_LEN EQ 0).GEN_FK2 *=GEN_FL2\n&_LABEL  CLEAR (&_TO1+16,&PAD_LEN),,XC * Wipe trailer area\n&_LABEL  SETC  ''                      * Remove generated label\n&TO_LEN  SETA  16                      * Length of area to fill\n         AGO   .GEN_FK2                *=GEN_FL2\n.*\n.* Copy floating point register(s) to extended field(s)\n.GEN_FL  ANOP  ,                       *\n         AIF   (K'&_FROM2 EQ 0).GEN_FL1 * Just a register spec'd?\n         AIF   (NOT &FROM_EREG).GEN_FL2 * End register specified?\n.GEN_FL1 ANOP  ,                       *\n&FROM_LEN SETA &FROM_LEN+8             * Yes: add length of odd reg\n.GEN_FK2 ANOP  ,                       * Must store an extended operand\n.GEN_FL2 ANOP  ,                       * &FROM_LEN is now correct\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENSTXM                * Generate several STDs\n.*\n.* Copy floating point register(s) to FP register(s)\n.GEN_F_F ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n&_LABEL  LDR   &_TO1,&_FROM1           * Copy\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   (&TO_LEN EQ 8).MEND     * 1 register only to copy?\n.GEN_F_F0 ANOP ,                       * Loop to copy FPRs\n&TO_LEN  SETA  &TO_LEN-8               * Reduce length\n         AIF   (&TO_LEN LT 8).MEND     * No registers left to copy\n&TO_REG  SETA  &TO_REG+2               * Next dest reg nr\n         AIF   (&TO_REG LT 8).GEN_F_F1 * Valid register nr\n&TO_REG  SETA  0                       * Wrap-around to FPR0\n.GEN_F_F1 ANOP ,                       * TO_REG now next register nr\n&FROM_REG SETA &FROM_REG+2             * Next src reg nr\n         AIF   (&FROM_REG LT 8).GEN_F_F2 * Valid register nr\n&FROM_REG SETA 0                       * Wrap-around to FPR0\n.GEN_F_F2 ANOP ,                       * FROM_REG now next register nr\n&REG     SETC  'FPR'.'&TO_REG'         * Create next dest.reg name\n&ODDREG  SETC  'FPR'.'&FROM_REG'       * Create next src.reg name\n         LDR   &REG,&ODDREG            * Copy\n         AGO   .GEN_F_F0               *\n.*\n.* From type g: General Purpose Register\n.GEN_G   ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'A').GEN_GA  * CPY reg to address\n         AIF   ('&TO_TP' EQ 'B').GEN_GB  * CPY reg to unsigned\n         AIF   ('&TO_TP' EQ 'F').GEN_GF  * CPY reg to signed\n         AIF   ('&TO_TP' EQ 'G').GEN_GG  * CPY reg to signed\n         AIF   ('&TO_TP' EQ 'H').GEN_GH  * CPY reg to signed\n         AIF   ('&TO_TP' EQ 'P').GEN_GP  * CPY reg to packed decimal\n         AIF   ('&TO_TP' EQ 'Q').GEN_GA  * CPY reg to address\n         AIF   ('&TO_TP' EQ 'R').GEN_GR  * CPY reg to address\n         AIF   ('&TO_TP' EQ 'V').GEN_GA  * CPY reg to address\n         AIF   ('&TO_TP' EQ 'X').GEN_GB  * CPY reg to unsigned\n         AIF   ('&TO_TP' EQ 'Y').GEN_GY  * CPY reg to address\n         AIF   ('&TO_TP' EQ 'a').GEN_G_A * CPY reg to access register\n         AIF   ('&TO_TP' EQ 'g').GEN_G_G * CPY reg to reg\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy from register(s) to address field(s)\n.GEN_GA  ANOP  ,                       *\n         AIF   (&FROM_LEN EQ 4).GEN_GA1 * Just 1 register?\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_STM                 * Generate 1 STM\n.GEN_GA1 ANOP  ,                       * Only 1 register to save\n         AIF   (&TO_LEN EQ 4).DO_ST    * Generate 1 ST\n         AIF   (&TO_LEN LT 4).GEN_GA2  * Use STCM to save\n&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Insert leading zeros\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination field\n&TO_LEN  SETA  4                       * 4 bytes remain unfilled\n&I       SETA  &PAD_LEN/4              * Nr of words padded\n&J       SETA  &PAD_LEN-(4*&I)         * Nr of extra bytes padded\n         AIF   (&J EQ 0).DO_ST         * Go generate a ST\n.GEN_GA2 ANOP  ,                       * STCM required\n.GEN_GR2 ANOP  ,                       * Entry from reg-to-unaligned\n.GEN_GY2 ANOP  ,                       * Entry from reg-to-halfword\n&MASK    SETC  'NNNY'                  * Mask for a 1-byte field\n         AIF   (&TO_LEN EQ 1).DO_STCM  * Go save byte\n&MASK    SETC  'NNYY'                  * Mask for a 2-byte field\n         AIF   (&TO_LEN EQ 2).DO_STCM  * Go save bytes\n&MASK    SETC  'NYYY'                  * Mask for a 3-byte field\n         AIF   (&TO_LEN EQ 3).DO_STCM  * Go save bytes\n&MASK    SETC  'YYYY'                  * Mask for a 4-byte field\n         AGO   .DO_STCM                * Go save bytes\n.*\n.* Copy from register(s) to unsigned binary field(s)\n.GEN_GB  ANOP  ,                       *\n         AIF   (&FROM_LEN EQ 4).GEN_GB1 * Just 1 register?\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENSTCMM               * Generate multiple STCMs\n.GEN_GB1 ANOP  ,                       * Only 1 register to save\n&MASK    SETC  'YYYY'                  *\n         AIF   (&TO_LEN EQ 4).DO_STCM  * Generate 1 ST\n         AIF   (&TO_LEN LT 4).GEN_GB2  * Use STCM to save\n&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Insert leading zeros\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination field\n         AGO   .DO_STCM                * Go generate a STCM\n.GEN_GB2 ANOP  ,                       * STCM required\n.GEN_GF2 ANOP  ,                       * Entry from reg-to-fullword\n.GEN_GG2 ANOP  ,                       * Entry from reg-to-signed\n.GEN_GH2 ANOP  ,                       * Entry from reg-to-halfword\n&MASK    SETC  'NNNY'                  * Mask for a 1-byte field\n         AIF   (&TO_LEN EQ 1).DO_STCM  * Go save byte\n&MASK    SETC  'NNYY'                  * Mask for a 2-byte field\n         AIF   (&TO_LEN EQ 2).DO_STCM  * Go save bytes\n&MASK    SETC  'NYYY'                  * Mask for a 3-byte field\n         AIF   (&TO_LEN EQ 3).DO_STCM  * Go save bytes\n&MASK    SETC  'YYYY'                  * Mask for a 4-byte field\n         AGO   .DO_STCM                * Go save bytes\n.*\n.* Copy from register(s) to signed binary fullword(s)\n.GEN_GF  ANOP  ,                       *\n         AIF   (&FROM_LEN EQ 4).GEN_GF1 * Just 1 register?\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .DO_STM                 * Generate 1 STM\n.GEN_GF1 ANOP  ,                       * Only 1 register to save\n         AIF   (&TO_LEN EQ 4).DO_ST    * Generate 1 ST\n         AIF   (&TO_LEN EQ 2).DO_STH   * Generate 1 STH\n         AIF   (&TO_LEN LE 4).GEN_GF2  *=GEN_GB2\n&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed\n         EQUREG TEMP=YES,R0=YES        * Find available register\n         AIF   (&BXA_RC NE 0).ERR7H    * None found!\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create workreg name\n&_LABEL  LR    &REG,&_FROM1            * Copy value to save\n&_LABEL  SETC  ''                      * Remove used label\n&MASK    SETC  'YYYY'                  * Mask to save register\n&PAD_ADR SETC  '&_TO1'                 * Save destination\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Create destination for data\n         SRA   &REG,31                 * Create all sign bits\n         AIF   (&PAD_LEN GT 8).GEN_GF6 *\n         AIF   (&PAD_LEN EQ 1).GEN_GF3 *\n         AIF   (&PAD_LEN EQ 2).GEN_GF4 *\n         AIF   (&PAD_LEN EQ 3).GEN_GF5 *\n         ST    &REG,&PAD_ADR           * First set of lead sign bytes\n&PAD_ADR SETC  '&PAD_ADR'.'+4'         * Adjust pad-area pointer\n         AIF   (&PAD_LEN EQ 4).DO_ST   * Ok: save register\n         AIF   (&PAD_LEN EQ 5).GEN_GF3 *\n         AIF   (&PAD_LEN EQ 6).GEN_GF4 *\n         AIF   (&PAD_LEN EQ 7).GEN_GF5 *\n         ST    &REG,&PAD_ADR           * Fill up to 8 lead sign bytes\n         AGO   .DO_ST                  * Go save register\n.GEN_GF3 ANOP  ,                       * 1 leading sign byte\n         STC   &REG,&PAD_ADR           *\n         AGO   .DO_STCM                * Go save register\n.GEN_GF4 ANOP  ,                       * 2 leading sign bytes\n         STH   &REG,&PAD_ADR           *\n         AGO   .DO_STCM                * Go save register\n.GEN_GF5 ANOP  ,                       * 3 leading sign bytes\n         STCM  &REG,YYYN,&PAD_ADR      *\n         AGO   .DO_STCM                * Go save register\n.GEN_GF6 ANOP ,                        * More than 8 leading sign bytes\n         ST    &REG,&PAD_ADR           * Insert leading sign bytes\n         MVC   &PAD_ADR+4(&PAD_LEN-4),&PAD_ADR * Propagate sign\n&I       SETA  &PAD_LEN/4              * Nr of words padded\n&I       SETA  &PAD_LEN-(4*&I)         * Nr of extra bytes padded\n         AIF   (&I EQ 0).DO_ST         * Still aligned: use ST\n         AGO   .DO_STCM                * Go save register\n.*\n.* Copy from register(s) to signed binary field(s)\n.GEN_GG  ANOP  ,                       *\n         AIF   (&FROM_LEN EQ 4).GEN_GG1 * Just 1 register?\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENSTCMM               * Generate multiple STCMs\n.GEN_GG1 ANOP  ,                       * Only 1 register to save\n         AIF   (&TO_LEN LE 4).GEN_GG2  *=GEN_GB2\n&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed\n         EQUREG TEMP=YES,R0=YES        * Find available register\n         AIF   (&BXA_RC NE 0).ERR7H    * None found!\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create workreg name\n&_LABEL  LR    &REG,&_FROM1            * Copy value to save\n&_LABEL  SETC  ''                      * Remove used label\n&MASK    SETC  'YYYY'                  * Mask to save register\n&PAD_ADR SETC  '&_TO1'                 * Save destination\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Create destination for data\n         SRA   &REG,31                 * Create all sign bits\n         AIF   (&PAD_LEN GT 8).GEN_GG6 *\n         AIF   (&PAD_LEN EQ 1).GEN_GG3 *\n         AIF   (&PAD_LEN EQ 2).GEN_GG4 *\n         AIF   (&PAD_LEN EQ 3).GEN_GG5 *\n         STCM  &REG,YYYY,&PAD_ADR      * First set of lead sign bytes\n&PAD_ADR SETC  '&PAD_ADR'.'+4'         * Adjust pad-area pointer\n         AIF   (&PAD_LEN EQ 4).DO_STCM * Ok: save register\n         AIF   (&PAD_LEN EQ 5).GEN_GG3 *\n         AIF   (&PAD_LEN EQ 6).GEN_GG4 *\n         AIF   (&PAD_LEN EQ 7).GEN_GG5 *\n         STCM  &REG,YYYY,&PAD_ADR      * Fill up to 8 lead sign bytes\n         AGO   .DO_STCM                * Go save register\n.GEN_GG3 ANOP  ,                       * 1 leading sign byte\n         STC   &REG,&PAD_ADR           *\n         AGO   .DO_STCM                * Go save register\n.GEN_GG4 ANOP  ,                       * 2 leading sign bytes\n         STCM  &REG,YYNN,&PAD_ADR      *\n         AGO   .DO_STCM                * Go save register\n.GEN_GG5 ANOP  ,                       * 3 leading sign bytes\n         STCM  &REG,YYYN,&PAD_ADR      *\n         AGO   .DO_STCM                * Go save register\n.GEN_GG6 ANOP ,                        * More than 8 leading sign bytes\n         STCM  &REG,YYYY,&PAD_ADR      *\n         MVC   &PAD_ADR+4(&PAD_LEN-4),&PAD_ADR * Propagate sign\n         AGO   .DO_STCM                * Go save register\n.*\n.* Copy from register(s) to signed binary halfword(s)\n.GEN_GH  ANOP  ,                       *\n         AIF   (&FROM_LEN EQ 4).GEN_GH1 * Just 1 register?\n         AIF   (2*&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENSTHM                * Generate multiple STHs\n.GEN_GH1 ANOP  ,                       * Only 1 register to save\n         AIF   (&TO_LEN EQ 2).DO_STH   * Generate 1 STH\n         AIF   (&TO_LEN LE 4).GEN_GH2  *=GEN_GB2\n&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed\n         EQUREG TEMP=YES,R0=YES        * Find available register\n         AIF   (&BXA_RC NE 0).ERR7H    * None found!\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create workreg name\n&_LABEL  LR    &REG,&_FROM1            * Copy value to save\n&_LABEL  SETC  ''                      * Remove used label\n&MASK    SETC  'YYYY'                  * Mask to save register\n&PAD_ADR SETC  '&_TO1'                 * Save destination\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Create destination for data\n         SRA   &REG,31                 * Create all sign bits\n         AIF   (&PAD_LEN GT 8).GEN_GH6 *\n         AIF   (&PAD_LEN EQ 1).GEN_GH3 *\n         AIF   (&PAD_LEN EQ 2).GEN_GH4 *\n         AIF   (&PAD_LEN EQ 3).GEN_GH5 *\n         STCM  &REG,YYYY,&PAD_ADR      * First set of lead sign bytes\n&PAD_ADR SETC  '&PAD_ADR'.'+4'         * Adjust pad-area pointer\n         AIF   (&PAD_LEN EQ 4).DO_STCM * Ok: save register\n         AIF   (&PAD_LEN EQ 5).GEN_GH3 *\n         AIF   (&PAD_LEN EQ 6).GEN_GH4 *\n         AIF   (&PAD_LEN EQ 7).GEN_GH5 *\n         STCM  &REG,YYYY,&PAD_ADR      * Fill up to 8 lead sign bytes\n         AGO   .DO_STCM                * Go save register\n.GEN_GH3 ANOP  ,                       * 1 leading sign byte\n         STC   &REG,&PAD_ADR           *\n         AGO   .DO_STCM                * Go save register\n.GEN_GH4 ANOP  ,                       * 2 leading sign bytes\n         STH   &REG,&PAD_ADR           *\n         AGO   .DO_STCM                * Go save register\n.GEN_GH5 ANOP  ,                       * 3 leading sign bytes\n         STCM  &REG,YYYN,&PAD_ADR      *\n         AGO   .DO_STCM                * Go save register\n.GEN_GH6 ANOP ,                        * More than 8 leading sign bytes\n         STH   &REG,&PAD_ADR           * Insert leading sign bytes\n         MVC   &PAD_ADR+2(&PAD_LEN-2),&PAD_ADR * Propagate sign\n         AGO   .DO_STCM                * Go save register\n.*\n.* Copy from register(s) to packed decimal number(s)\n.GEN_GP  ANOP  ,                       *\n         AIF   (&FROM_LEN EQ 4).GEN_GP1 * Just 1 register?\n         AIF   (&TO_LEN NE 2*&FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENCVDM                * Generate multiple CVDs\n.GEN_GP1 ANOP  ,                       * Only 1 register to save\n         AIF   (&TO_LEN LT 8).ERR7I    *\n&PAD_LEN SETA  &TO_LEN-8               * Nr of leading zeros needed\n         AIF   (&PAD_LEN LT 1).GEN_GP2 * None needed\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Create leading zeros\n&_LABEL  SETC  ''                      * Remove used-up label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination pointer\n.GEN_GP2 ANOP  ,                       *\n&_LABEL  CVD   &_FROM1,&_TO1           *\n         MEXIT ,                       *\n.*\n.* Copy from register(s) to unaligned address field(s)\n.GEN_GR  ANOP  ,                       *\n         AIF   (&FROM_LEN EQ 4).GEN_GR1 * Just 1 register?\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENSTCMM               * Generate multiple STCMs\n.GEN_GR1 ANOP  ,                       * Only 1 register to save\n&MASK    SETC  'YYYY'                  * Set default mask for STCM\n         AIF   (&TO_LEN EQ 4).DO_STCM  * Generate 1 ST\n         AIF   (&TO_LEN LT 4).GEN_GR2  *=GEN_GA2\n&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Insert leading zeros\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination field\n         AGO   .DO_STCM                * Go generate a STCM\n.*\n.* Copy from register(s) to halfword address field(s)\n.GEN_GY  ANOP  ,                       *\n         AIF   (&FROM_LEN EQ 4).GEN_GY1 * Just 1 register?\n         AIF   (2*&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENSTHM                * Generate multiple STHs\n.GEN_GY1 ANOP  ,                       * Only 1 register to save\n         AIF   (&TO_LEN EQ 2).DO_STH   * Generate 1 STH\n         AIF   (&TO_LEN LT 4).GEN_GY2  *=.GEN_GA2\n&PAD_LEN SETA  &TO_LEN-4               * Nr of leading zeros needed\n&MASK    SETC  'YYYY'                  * Default mask for STCM\n         AIF   (&PAD_LEN LT 1).DO_STCM *\n&_LABEL  CLEAR (&_TO1,&PAD_LEN),,XC    * Insert leading zeros\n&_LABEL  SETC  ''                      * Remove used label\n&_TO1    SETC  '&_TO1'.'+&PAD_LEN'     * Advance destination field\n&TO_LEN  SETA  4                       * 4 bytes remain unfilled\n         AGO   .GEN_GY2                *=.GEN_GA2\n.*\n.* Copy register(s) to access register(s)\n.GEN_G_A ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n&_LABEL  SAR   &_TO1,&_FROM1           * Copy ALET\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?\n.GEN_G_A0 ANOP ,                       * Loop to copy ARs\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy\n&TO_REG  SETA  &TO_REG+1               * Next dest reg nr\n         AIF   (&TO_REG LT 16).GEN_G_A1 * Valid register nr\n&TO_REG  SETA  0                       * Wrap-around to R0\n.GEN_G_A1 ANOP ,                       * TO_REG now next register nr\n&FROM_REG SETA &FROM_REG+1             * Next src reg nr\n         AIF   (&FROM_REG LT 16).GEN_G_A2 * Valid register nr\n&FROM_REG SETA 0                       * Wrap-around to AR0\n.GEN_G_A2 ANOP ,                       * FROM_REG now next register nr\n&REG     SETC  'R'.'&FROM_REG'         * Create next src.reg name\n&ODDREG  SETC  'AR'.'&TO_REG'          * Create next dest.reg name\n         SAR   &ODDREG,&REG            * Copy ALET\n         AGO   .GEN_G_A0               *\n.*\n.* Copy register(s) to register(s)\n.GEN_G_G ANOP  ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n&_LABEL  LR    &_TO1,&_FROM1           * Copy register\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?\n.GEN_G_G0 ANOP ,                       * Loop to copy regs\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy\n&TO_REG  SETA  &TO_REG+1               * Next dest reg nr\n         AIF   (&TO_REG LT 16).GEN_G_G1 * Valid register nr\n&TO_REG  SETA  0                       * Wrap-around to R0\n.GEN_G_G1 ANOP ,                       * TO_REG now next register nr\n&FROM_REG SETA &FROM_REG+1             * Next src reg nr\n         AIF   (&FROM_REG LT 16).GEN_G_G2 * Valid register nr\n&FROM_REG SETA 0                       * Wrap-around to AR0\n.GEN_G_G2 ANOP ,                       * FROM_REG now next register nr\n&REG     SETC  'R'.'&FROM_REG'         * Create next src.reg name\n&ODDREG  SETC  'R'.'&TO_REG'           * Create next dest.reg name\n         LR    &ODDREG,&REG            * Copy register\n         AGO   .GEN_G_G0               *\n.*\n.* From type ga: Combined general purpose and access registers\n.GEN_GA_ ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'ga').GEN_GA_GA * CPY regs to regs\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Copy combined GPR-AR pairs\n.GEN_GA_GA ANOP ,                      *\n         AIF   (&TO_LEN NE &FROM_LEN).ERR7C * Lengths equal?\n         AGO   .GENLAEM                *\n.*\n.* From type p: pointered data field\n.GEN_P   ANOP  ,                       *\n         AIF   ('&TO_TP' EQ 'p').DO_MVCL * CPY pointered to pointered\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* From type *STACK: Stacked registers\n.GENSTACK ANOP ,                       *\n&FROM_TP SETC  '*STACK'                *\n         AIF   ('&TO_TP' EQ 'ga').DO_EREG * CPY stack to registers\n         AGO   .ERR7B                  * Unsupported combination\n.*\n.* Load several registers with packed data\n.GENCVBM ANOP  ,                       *\n&I       SETA  &TO_REG                 * Save first register number\n&J       SETA  0                       * Offset in source field\n.GENCVBM0 ANOP ,                       * Loop\n&_LABEL  CVB   &_TO1,&_FROM1+&J        *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill\n&J       SETA  &J+8                    * Point next short field\n&I       SETA  &I+1                    * Next register number\n         AIF   (&I LT 16).GENCVBM1     * Valid register nr\n&I       SETA  0                       * Wrap-around to R0\n.GENCVBM1 ANOP ,                       * I now next register nr\n&_TO1    SETC  'R'.'&I'                * Create next register name\n         AGO   .GENCVBM0               *\n.*\n.* Store several registers as packed data\n.GENCVDM ANOP  ,                       *\n&I       SETA  &FROM_REG               * Save first register number\n&J       SETA  0                       * Offset in source field\n.GENCVDM0 ANOP ,                       * Loop\n&_LABEL  CVD   &_FROM1,&_TO1+&J        *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-8               * Reduce length\n         AIF   (&TO_LEN LT 8).MEND     * No storage left to fill\n&J       SETA  &J+8                    * Point next short field\n&I       SETA  &I+1                    * Next register number\n         AIF   (&I LT 16).GENCVDM1     * Valid register nr\n&I       SETA  0                       * Wrap-around to R0\n.GENCVDM1 ANOP ,                       * I now next register nr\n&_FROM1  SETC  'R'.'&I'                * Create next register name\n         AGO   .GENCVDM0               *\n.*\n.* Load a register with an unaligned signed integer\n.GENICM  ANOP  ,                       *\n&MASK    SETC  'YNNN'                  * Mask for a 1-byte value\n&I       SETA  24                      * Nr of bytes to shift\n         AIF   (&FROM_LEN EQ 1).GENICM0 * Go load value\n&MASK    SETC  'YYNN'                  * Mask for a 2-byte value\n&I       SETA  16                      * Nr of bytes to shift\n         AIF   (&FROM_LEN EQ 2 AND '&FROM_TP' NE 'G').GENICM1\n         AIF   (&FROM_LEN EQ 2).GENICM0 * Go load value\n&MASK    SETC  'YYYN'                  * Mask for a 3-byte value\n&I       SETA  8                       * Nr of bytes to shift\n         AIF   (&FROM_LEN EQ 3).GENICM0 * Go load value\n&MASK    SETC  'YYYY'                  * MUST be a four-byte value\n         AIF   (&FROM_LEN EQ 4 AND '&FROM_TP' NE 'F').GENICM0\n         AIF   (&FROM_LEN EQ 4).GENICM2 * Load aligned fullword\n         AIF   ('&FROM_TP' EQ 'F').GENICM3 * Oversized, aligned\n         AGO   .GENICM4                * Oversized, unaligned\n.GENICM0 ANOP  ,                       * Use ICM to load value\n&_LABEL  ICM   &_TO1,&MASK,&_FROM1     * Copy value to register\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   ('&MASK' EQ 'YYYY').MEND\n         SRA   &_TO1,&I                * Shift value in register\n         MEXIT ,                       *\n.GENICM1 ANOP  ,                       * Load aligned halfword\n&_LABEL  LH    &_TO1,&_FROM1           * Copy value to register\n         MEXIT ,                       *\n.GENICM2 ANOP  ,                       * Load aligned fullword\n&_LABEL  L     &_TO1,&_FROM1           * Copy value to register\n         MEXIT ,                       *\n.GENICM3 ANOP  ,                       * Load/truncate from Fullword\n&I       SETA  &FROM_LEN-4             * Offset in source field\n&J       SETA  &I/4                    * Nr of words in offset\n&J       SETA  &I-(4*&J)               * Nr of excess bytes\n         AIF   (&J NE 0).GENICM4       * Go load unaligned 'word'\n&_LABEL  L     &_TO1,&_FROM1+&I        * Copy value to register\n         MEXIT ,                       *\n.GENICM4 ANOP  ,                       * Load/truncate unaligned\n&I       SETA  &FROM_LEN-4             * Offset in source field\n&_LABEL  ICM   &_TO1,YYYY,&_FROM1+&I   * Copy value to register\n         MEXIT ,                       *\n.*\n.* Load several registers with unaligned data\n.GENICMM ANOP  ,                       *\n&I       SETA  &TO_REG                 * Save first register number\n&J       SETA  0                       * Offset in source field\n.GENICMM0 ANOP ,                       * Loop\n&_LABEL  ICM   &_TO1,YYYY,&_FROM1+&J   *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill\n&J       SETA  &J+4                    * Point next long field\n&I       SETA  &I+1                    * Next register number\n         AIF   (&I LT 16).GENICMM1     * Valid register nr\n&I       SETA  0                       * Wrap-around to R0\n.GENICMM1 ANOP ,                       * I now next register nr\n&_TO1    SETC  'R'.'&I'                * Create next register name\n         AGO   .GENICMM0               *\n.*\n.* Copy alet-qualified addresses register to register\n.GENLAEM ANOP  ,                       *\n         AIF   ('&SYSASCE' EQ 'P').GENLAEMP * Primary mode!\n&_LABEL  LAE   &_TO1,0(0,&_FROM1)      * Copy ALET and address\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?\n         AGO   .GENLAEM0               *\n.GENLAEMP ANOP ,                       *\n&_LABEL  LR    &_TO1,&_FROM1           * Copy address\n         CPYA  &_TO2,&_FROM2           *   and ALET\n&_LABEL  SETC  ''                      * Remove used label\n         AIF   (&TO_LEN EQ 4).MEND     * 1 register only to copy?\n.GENLAEM0 ANOP ,                       * Loop to copy register pairs\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to copy\n&TO_REG  SETA  &TO_REG+1               * Next dest reg nr\n         AIF   (&TO_REG LT 16).GENLAEM1 * Valid register nr\n&TO_REG  SETA  0                       * Wrap-around to R0\n.GENLAEM1 ANOP ,                       * TO_REG now next register nr\n&FROM_REG SETA &FROM_REG+1             * Next src reg nr\n         AIF   (&FROM_REG LT 16).GENLAEM2 * Valid register nr\n&FROM_REG SETA 0                       * Wrap-around to R0\n.GENLAEM2 ANOP ,                       * FROM_REG now next register nr\n&_TO1    SETC  'R'.'&TO_REG'           * Create next dest.reg name\n&_FROM1  SETC  'R'.'&FROM_REG'         * Create next src.reg name\n         AIF   ('&SYSASCE' EQ 'P').GENLAEM3 * Primary mode!\n         LAE   &_TO1,0(0,&_FROM1)      * Copy ALET and address\n         AGO   .GENLAEM0               *\n.GENLAEM3 ANOP ,                       * Copy addr+ALET in primary mode\n&_TO2    SETC  'AR'.'&TO_REG'          * Create next dest.reg name\n&_FROM2  SETC  'AR'.'&FROM_REG'        * Create next src.reg name\n         LR    &_TO1,&_FROM1           * Copy address\n         CPYA  &_TO2,&_FROM2           *   and ALET\n         AGO   .GENLAEM0               *\n.*\n.* Load several floating point registers with long operands\n.GENLDM  ANOP  ,                       *\n&I       SETA  &TO_REG                 * Save first register number\n&J       SETA  0                       * Offset in source field\n.GENLDM0 ANOP  ,                       * Loop\n&_LABEL  LD    &_TO1,&_FROM1+&J        *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-8               * Reduce length\n         AIF   (&TO_LEN LT 8).MEND     * No registers left to fill\n&J       SETA  &J+8                    * Point next long field\n&I       SETA  &I+2                    * Next register number\n         AIF   (&I LT 8).GENLDM1       * Valid register nr\n&I       SETA  0                       * Wrap-around to FPR0\n.GENLDM1 ANOP  ,                       * I now next register nr\n&_TO1    SETC  'FPR'.'&I'              * Create next register name\n         AGO   .GENLDM0                *\n.*\n.* Load several floating point registers with short operands\n.GENLEM  ANOP  ,                       *\n&I       SETA  &TO_REG                 * Save first register number\n&J       SETA  0                       * Offset in source field\n.GENLEM0 ANOP  ,                       * Loop\n&_LABEL  LE    &_TO1,&_FROM1+&J        *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-8               * Reduce length\n         AIF   (&TO_LEN LT 8).MEND     * No registers left to fill\n&J       SETA  &J+4                    * Point next short field\n&I       SETA  &I+2                    * Next register number\n         AIF   (&I LT 8).GENLEM1       * Valid register nr\n&I       SETA  0                       * Wrap-around to FPR0\n.GENLEM1 ANOP  ,                       * I now next register nr\n&_TO1    SETC  'FPR'.'&I'              * Create next register name\n         AGO   .GENLEM0                *\n.*\n.* Load several halfwords into registers\n.GENLHM  ANOP  ,                       *\n&I       SETA  &TO_REG                 * Save first register number\n&J       SETA  0                       * Offset in source field\n.GENLHM0 ANOP  ,                       * Loop\n&_LABEL  LH    &_TO1,&_FROM1+&J        *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill\n&J       SETA  &J+2                    * Point next short field\n&I       SETA  &I+1                    * Next register number\n         AIF   (&I LT 16).GENLHM1      * Valid register nr\n&I       SETA  0                       * Wrap-around to R0\n.GENLHM1 ANOP  ,                       * I now next register nr\n&_TO1    SETC  'R'.'&I'                * Create next register name\n         AGO   .GENLHM0                *\n.*\n.* Load several floating point registers with extended operands\n.GENLXM  ANOP  ,                       *\n&I       SETA  &TO_REG                 * Save first register number\n         AIF   (&I NE 0 AND &I NE 4).ERR7M * Not a valid pair!\n&I       SETA  &I+2                    * Nr of next register\n&ODDREG  SETC  'FPR'.'&I'              * Name of second register\n&J       SETA  0                       * Offset in source field\n.GENLXM0 ANOP  ,                       * Loop\n&_LABEL  LD    &_TO1,&_FROM1+&J        * Load low-order register\n&_LABEL  SETC  ''                      * Remove label after use\n&J       SETA  &J+8                    * Point next long field\n         LD    &ODDREG,&_FROM1+&J      * Load high-order register\n&TO_LEN  SETA  &TO_LEN-16              * Reduce length\n         AIF   (&TO_LEN LT 16).MEND    * No registers left to fill\n&J       SETA  &J+8                    * Point next long field\n&I       SETA  &I+2                    * Next register number\n         AIF   (&I LT 8).GENLXM1       * Valid register nr\n&I       SETA  0                       * Wrap-around to FPR0\n.GENLXM1 ANOP  ,                       * I now next register nr\n&_TO1    SETC  'FPR'.'&I'              * Create next register name\n&I       SETA  &I+2                    * Nr of next register\n&ODDREG  SETC  'FPR'.'&I'              * Name of second register\n         AGO   .GENLXM0                *\n.*\n.* Copy two character fields\n.GENMVCC ANOP  ,                       *\n&PAD0    SETB  0                       * Use spaces for padding\n&PAD_LEN SETA  0                       * Nr of padding bytes needed\n&LEN     SETA  &TO_LEN                 * Determine length of move\n         AIF   (&TO_LEN LE &FROM_LEN).GENMVCC1\n&LEN     SETA  &FROM_LEN               * FROM-length is shorter\n&PAD_LEN SETA  &TO_LEN-&FROM_LEN       * Nr of padding bytes needed\n.GENMVCC1 ANOP ,                       * &LEN now effective length\n         AIF   (&LEN GT 256).GENMVCL   *\n         AIF   (&PAD_LEN GT 256).GENMVCL *\n&TO_LEN  SETA  &LEN                    * Truncate destination field\n         AIF   (&PAD_LEN LT 1).DO_MVC  * No padding required: use MVC\n&_LABEL  CLEAR (&_TO1+&LEN,&PAD_LEN),C' ' * Wipe padding area\n&_LABEL  SETC  ''                      * Label no longer needed\n&TO_LEN  SETA  &LEN                    * Set source and destination\n&FROM_LEN SETA &LEN                    *   lengths for data move\n         AGO   .DO_MVC                 *\n.*\n.* Set up for a long move\n.GENMVCL ANOP  ,                       *\n&LEN     SETA  &FROM_LEN               * Determine effective length\n         AIF   (&TO_LEN GT &FROM_LEN).GENMVCL0 * Which is shorter\n&LEN     SETA  &TO_LEN                 * TO_LEN is shorter\n&FROM_LEN SETA &LEN                    * Make source length shorter\n.GENMVCL0 ANOP ,                       * Len now contains effective len\n&PAD_LEN SETA  &TO_LEN-&LEN            * Size of pad-area\n.* If possible: generate MVCL instruction\n         AIF   (&LEN LT 1024 AND &PAD_LEN LT 1).GENMVCL6 * Multiple MVC\n         EQUREG PAIR=YES,TEMP=YES,R0=YES,WARN=NO * Alloc src reg pair\n         AIF   (&BXA_RC NE 0).GENMVCL2 * Allocation failed\n&REG_SRCP SETC 'R'.'&BXA_NUMVAL'       * Create source ptr reg name\n&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Nr of odd reg in pair\n&REG_SRCL SETC 'R'.'&BXA_NUMVAL'       * Create source len reg name\n         USE   &REG_SRCP               * Set registers in use to\n         USE   &REG_SRCL               *  prevent re-allocation\n         EQUREG PAIR=YES,TEMP=YES,R0=YES,WARN=NO * Alloc dest reg pair\n         AIF   (&BXA_RC NE 0).GENMVCL1 * Allocation failed\n         DROP  &REG_SRCL               * Source register pair\n         DROP  &REG_SRCP               *    no longer needed\n         AGO   .DO_MVCL                * Two pairs of regs available!\n.GENMVCL1 ANOP ,                       * Second pair not available\n         DROP  &REG_SRCL               * Source register pair\n         DROP  &REG_SRCP               *    no longer needed\n.GENMVCL2 ANOP ,                       *\n.* Cannot use MVCL: try to generate a loop\n&PAD_LEN SETA  &TO_LEN-&LEN            * Determine pad length\n&I       SETA  &LEN/256                * Nr of loops to perform\n         AIF   (&I LE 4).GENMVCL6      * Repeat is shorter than loop?\n         EQUREG TEMP=YES,WARN=NO       * Allocate src pointer\n         AIF   (&BXA_RC NE 0).GENMVCL6 * Not enough regs\n&REG_SRCP SETC 'R'.'&BXA_NUMVAL'       * Create source ptr reg name\n         USE   &REG_SRCP               * Set reg in use\n         EQUREG TEMP=YES,WARN=NO       * Allocate dest pointer\n         AIF   (&BXA_RC NE 0).GENMVCL5 * Not enough regs\n&REG_DSTP SETC 'R'.'&BXA_NUMVAL'       * Create dest ptr reg name\n         USE   &REG_DSTP               * Set reg in use\n         EQUREG TEMP=YES,WARN=NO       * A DO loop register available?\n         AIF   (&BXA_RC NE 0).GENMVCL4 * No reg available for loop\n         MNOTE 0,'No two register pairs available: generating a loop'\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create loop register name\n         USE   &REG                    * Set loop counter in use\n&_LABEL  LA    &REG_SRCP,&_FROM1       * Init source ptr\n&_LABEL  SETC  ''                      * Label no longer needed\n         LA    &REG_DSTP,&_TO1         * Init dest ptr\n         CPY   &REG,&I                 * Init loop counter\n_CPY&SYSNDX LABEL ,                    * Loop point\n         MVC   0(256,&REG_DSTP),0(&REG_SRCP) * Move 1 section of data\n         INC   &REG_SRCP,256           * Advance src and dest ptrs\n         INC   &REG_DSTP,256           *    to next section of data\n         BCT   &REG,_CPY&SYSNDX        * Loop to repeat n times\n         DROP  &REG                    * Loop counter no longer needed\n&J       SETA  &LEN-(256*&I)           * Calculate remaining length\n         AIF   (&J LT 1).GENMVCL3      * Any data remains?\n         MVC   0(&J,&REG_DSTP),0(&REG_SRCP) * Move remaining data\n.GENMVCL3 ANOP ,                       * Data portion has been moved\n         DROP  &REG_DSTP               * Free dest ptr\n         DROP  &REG_SRCP               * Free src ptr\n.* Now we must set up another loop to pad\n         AIF   (&PAD_LEN LT 1).MEND    * No padding: we're done\n&I       SETA  (&PAD_LEN-1)/256        * Nr of 256-byte sections\n         AIF   (&I LE 3).GENMVCL9      * List of MVCs shorter than loop\n         MVI   0(&REG_DSTP),C' '       * Insert first pad byte\n         LA    &REG,&I                 * Nr of sections\n_CPY_&SYSNDX LABEL ,                   * Loop point\n         MVC   1(256,&REG_DSTP),0(&REG_DSTP) * Pad 1 section\n         INC   &REG_DSTP,256           * Point to next section\n         BCT   &REG,_CPY_&SYSNDX       * Loop to repeat n times\n&J       SETA  (&PAD_LEN-1)-(256*&I)   * Remaining pad length\n         AIF   (&J LT 1).MEND          * All padding completed?\n         MVC   1(&J,&REG_DSTP),0(&REG_DSTP) * Wipe remainder\n         MEXIT ,                       *\n.GENMVCL4 ANOP ,                       * No loop register available\n         DROP  &REG_DSTP               * Free up allocated register\n.GENMVCL5 ANOP ,                       * No loop register available\n         DROP  &REG_SRCP               * Free up allocated register\n.GENMVCL6 ANOP ,\n.* Last option: generate a lot of MVCs\n         MNOTE 0,'Insufficient registers available: generating MVCs'\n&I       SETA  &LEN/256                * Nr of MVCs to generate\n&J       SETA  0                       * Loop counter\n.GENMVCL7 ANOP ,                       * Loop to gen MVCs\n         AIF   (&J GE &I).GENMVCL8     * End of loop\n&_LABEL  MVC   &_TO1+256*&J.(256),&_FROM1+256*&J\n&_LABEL  SETC  ''                      * Wipe used label\n&J       SETA  &J+1                    *\n         AGO   .GENMVCL7               *\n.GENMVCL8 ANOP ,                       * Gen remaining MVC\n&J       SETA  &LEN-(256*&I)           * Remaining data\n         AIF   (&J LT 1).GENMVCL9      * No data remains\n&_LABEL  MVC   &_TO1+256*&I.(&J),&_FROM1+256*&I\n&_LABEL  SETC  ''                      * Wipe used label\n.GENMVCL9 ANOP ,                       * All data has been moved\n         AIF   (&PAD_LEN LT 1).MEND    * No padding: we're done\n&_TO1    SETC  '&_TO1'.'+'.'&LEN'      * Set destination area to pad\n&TO_LEN  SETA  &TO_LEN-&LEN            * Set length of padding area\n.* If possible: generate MVCL instruction to fill pad-area\n         AIF   (&PAD_LEN LE 769).GENMVCL13 * Use set of MVCs: shorter\n         EQUREG PAIR=YES,TEMP=YES,R0=YES,WARN=NO * Alloc src reg pair\n         AIF   (&BXA_RC NE 0).GENMVCL12 * Allocation failed\n&REG_SRCP SETC 'R'.'&BXA_NUMVAL'       * Create source ptr reg name\n&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Nr of odd reg in pair\n&REG_SRCL SETC 'R'.'&BXA_NUMVAL'       * Create source len reg name\n         USE   &REG_SRCP               * Set registers in use to\n         USE   &REG_SRCL               *  prevent re-allocation\n         EQUREG PAIR=YES,TEMP=YES,R0=YES,WARN=NO * Alloc dest reg pair\n         AIF   (&BXA_RC NE 0).GENMVCL10 * Allocation failed\n         DROP  &REG_SRCL               * Source register pair\n         DROP  &REG_SRCP               *    no longer needed\n&FROM_LEN SETA 0                       * Set source length to 0\n&_FROM1  SETC  '0'                     * Set source ptr to null\n         AGO   .DO_MVCL                * Two pairs of regs available!\n.GENMVCL10 ANOP ,                      * Second pair not available\n         DROP  &REG_SRCL               * Source register pair\n         DROP  &REG_SRCP               *    no longer needed\n.* Cannot use MVCL: try to generate a loop\n&I       SETA  (&PAD_LEN-1)/256        * Nr of 256-byte sections\n         AIF   (&I LE 3).GENMVCL13     * Repeat is shorter than loop?\n         EQUREG TEMP=YES,WARN=NO       * Allocate dest pointer\n         AIF   (&BXA_RC NE 0).GENMVCL13 * Not enough regs\n&REG_DSTP SETC 'R'.'&BXA_NUMVAL'       * Create dest ptr reg name\n         USE   &REG_DSTP               * Set reg in use\n         EQUREG TEMP=YES,WARN=NO       * A DO loop register available?\n         AIF   (&BXA_RC NE 0).GENMVCL12 * No reg available for loop\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create loop register name\n         USE   &REG                    * Set loop counter in use\n         LA    &REG_DSTP,&_TO1         * Point to pad-area\n         MVI   0(&REG_DSTP),C' '       * Insert first pad byte\n         LA    &REG,&I                 * Nr of sections\n_CPY_&SYSNDX LABEL ,                   * Loop point\n         MVC   1(256,&REG_DSTP),0(&REG_DSTP) * Pad 1 section\n         INC   &REG_DSTP,256           * Point to next section\n         BCT   &REG,_CPY_&SYSNDX       * Loop to repeat n times\n         DROP  &REG                    * Loop counter no longer needed\n         DROP  &REG_DSTP               *\n&J       SETA  (&PAD_LEN-1)-(256*&I)   * Remaining pad length\n         AIF   (&J LT 1).MEND          * All padding completed?\n         MVC   1(&J,&REG_DSTP),0(&REG_DSTP) * Wipe remainder\n         MEXIT ,                       *\n.GENMVCL12 ANOP ,                      *\n         DROP  &REG_DSTP               *\n.GENMVCL13 ANOP ,                      *\n&I       SETA  (&PAD_LEN-1)/256        * Nr of 256-byte sections\n         MVI   &_TO1,C' '              * Insert first pad byte\n&J       SETA  0                       * Loop counter\n.GENMVCL15 ANOP ,                      *\n         AIF   (&J GE &I).GENMVCL16    * End of loop\n         MVC   &_TO1+1+256*&J.(256),&_TO1+256*&J\n&J       SETA  &J+1                    *\n         AGO   .GENMVCL15              *\n.GENMVCL16 ANOP ,                      *\n&J       SETA  (&PAD_LEN-1)-(256*&I)   * Remaining pad-length\n         AIF   (&J LT 1).MEND          * No more padding: we're done\n         MVC   &_TO1+1+256*&I.(&J),&_TO1+256*&I\n         MEXIT ,                       *\n.*\n.* Copy two unsigned fields of unequal length, under 256\n.GENMVC0 ANOP  ,                       *\n         AIF   (&TO_LEN GT 255).ERR7D  * Length within limit?\n         AIF   (&FROM_LEN GT 255).ERR7E * Length within limit?\n         AIF   (&TO_LEN EQ &FROM_LEN).DO_MVC * Lengths equal?\n         AIF   (&TO_LEN LT &FROM_LEN).GENMVC0A * Adjust source\n.* Destination field is larger\n&I       SETA  &TO_LEN-&FROM_LEN       * Data offset in TO-field\n         AIF   (&I GT 1).GENMVC0XC     * Length to clear > 1: use XC\n&_LABEL  MVI   &_TO1.,X'00'            * Wipe destination area\n         AGO   .GENMVC0B               *\n.GENMVC0XC ANOP ,                      *\n&_LABEL  XC    &_TO1.(&I),&_TO1        * Wipe destination area\n.GENMVC0B ANOP ,                       * Destination field now cleared\n&_LABEL  SETC  ''                      * Remove label\n&_TO1    SETC  '&_TO1'.'+&I'           * Add offset to TO field\n&TO_LEN  SETA  &FROM_LEN               * Reduce length of TO field\n         AGO   .DO_MVC                 * Go generate MVC instruction\n.* Source field is larger\n.GENMVC0A ANOP ,                       *\n&I       SETA  &FROM_LEN-&TO_LEN       * Data offset in FROM-field\n&_FROM1  SETC  '&_FROM1'.'+&I'         * Add offset to FROM field\n&FROM_LEN SETA &TO_LEN                 * Reduce length of FROM field\n         AGO   .DO_MVC                 * Go generate MVC instruction\n.*\n.* Store several registers into unaligned field\n.GENSTCMM ANOP ,                       *\n&I       SETA  &FROM_REG               * Save first register number\n&J       SETA  0                       * Offset in source field\n.GENSTCMM0 ANOP ,                      * Loop\n&_LABEL  STCM  &_FROM1,YYYY,&_TO1+&J   *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to fill\n&J       SETA  &J+4                    * Point next dest field\n&I       SETA  &I+1                    * Next register number\n         AIF   (&I LT 16).GENSTCMM1    * Valid register nr\n&I       SETA  0                       * Wrap-around to R0\n.GENSTCMM1 ANOP ,                      * I now next register nr\n&_FROM1  SETC  'R'.'&I'                * Create next register name\n         AGO   .GENSTCMM0              *\n.*\n.* Store several floating point registers into long operands\n.GENSTDM ANOP  ,                       *\n&I       SETA  &FROM_REG               * Save first register number\n&J       SETA  0                       * Offset in dest. field\n.GENSTDM0 ANOP ,                       * Loop\n&_LABEL  STD   &_FROM1,&_TO1+&J        *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-8               * Reduce length\n         AIF   (&TO_LEN LT 8).MEND     * No registers left to save\n&J       SETA  &J+8                    * Point next long field\n&I       SETA  &I+2                    * Next register number\n         AIF   (&I LT 8).GENSTDM1      * Valid register nr\n&I       SETA  0                       * Wrap-around to FPR0\n.GENSTDM1 ANOP ,                       * I now next register nr\n&_FROM1  SETC  'FPR'.'&I'              * Create next register name\n         AGO   .GENSTDM0               *\n.*\n.* Store several floating point registers into short operands\n.GENSTEM ANOP  ,                       *\n&I       SETA  &FROM_REG               * Save first register number\n&J       SETA  0                       * Offset in dest. field\n.GENSTEM0 ANOP ,                       * Loop\n&_LABEL  STE   &_FROM1,&_TO1+&J        *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-4               * Reduce length\n         AIF   (&TO_LEN LT 4).MEND     * No registers left to save\n&J       SETA  &J+4                    * Point next long field\n&I       SETA  &I+2                    * Next register number\n         AIF   (&I LT 8).GENSTEM1      * Valid register nr\n&I       SETA  0                       * Wrap-around to FPR0\n.GENSTEM1 ANOP ,                       * I now next register nr\n&_FROM1  SETC  'FPR'.'&I'              * Create next register name\n         AGO   .GENSTEM0               *\n.*\n.* Store several registers into halfwords\n.GENSTHM ANOP  ,                       *\n&I       SETA  &FROM_REG               * Save first register number\n&J       SETA  0                       * Offset in dest. field\n.GENSTHM0 ANOP ,                       * Loop\n&_LABEL  STH   &_FROM1,&_TO1+&J        *\n&_LABEL  SETC  ''                      * Remove label after use\n&TO_LEN  SETA  &TO_LEN-2               * Reduce length\n         AIF   (&TO_LEN LT 2).MEND     * No registers left to save\n&J       SETA  &J+2                    * Point next halfword\n&I       SETA  &I+1                    * Next register number\n         AIF   (&I LT 16).GENSTHM1     * Valid register nr\n&I       SETA  0                       * Wrap-around to R0\n.GENSTHM1 ANOP ,                       * I now next register nr\n&_FROM1  SETC  'R'.'&I'                * Create next register name\n         AGO   .GENSTHM0               *\n.*\n.* Save several floating point registers into extended operands\n.GENSTXM ANOP  ,                       *\n&I       SETA  &FROM_REG               * Save first register number\n         AIF   (&I NE 0 AND &I NE 4).ERR7V * Not a valid pair!\n&I       SETA  &I+2                    * Nr of next register\n&ODDREG  SETC  'FPR'.'&I'              * Name of second register\n&J       SETA  0                       * Offset in source field\n.GENSTXM0 ANOP ,                       * Loop\n&_LABEL  STD   &_FROM1,&_TO1+&J        * Save low-order register\n&_LABEL  SETC  ''                      * Remove label after use\n&J       SETA  &J+8                    * Point next long field\n         STD   &ODDREG,&_TO1+&J        * Save high-order register\n&TO_LEN  SETA  &TO_LEN-16              * Reduce length\n         AIF   (&TO_LEN LT 16).MEND    * No registers left to fill\n&J       SETA  &J+8                    * Point next long field\n&I       SETA  &I+2                    * Next register number\n         AIF   (&I LT 8).GENSTXM1      * Valid register nr\n&I       SETA  0                       * Wrap-around to FPR0\n.GENSTXM1 ANOP ,                       * I now next register nr\n&_FROM1  SETC  'FPR'.'&I'              * Create next register name\n&I       SETA  &I+2                    * Nr of next register\n&ODDREG  SETC  'FPR'.'&I'              * Name of second register\n         AGO   .GENSTXM0               *\n.*\n.* Generate an Extract stacked REGisters\n.DO_EREG ANOP  ,                       *\n&I       SETA  &TO_LEN/4               * Get number of registers\n&I       SETA  &TO_REG+&I-1            * Get ending register number\n         AIF   (&I LE 15).DO_EREG1     * End-reg is ok\n&I       SETA  &I-16                   * Perform wrap-around\n.DO_EREG1 ANOP ,                       * End-register determined\n&REG     SETC  'R'.'&I'                * Create register name\n&_LABEL  EREG  &_TO1,&REG              *\n         MEXIT ,                       *\n.*\n.* Generate an Insert Characters under Mask\n.DO_ICM  ANOP  ,                       *\n&_LABEL  ICM   &_TO1,&MASK,&_FROM1     *\n         MEXIT ,                       *\n.*\n.* Generate a Load instruction to fill a register\n.DO_L    ANOP  ,                       *\n&_LABEL  L     &_TO1,&_FROM1           *\n         MEXIT ,                       *\n.*\n.* Generate a CVB instruction to fill a register\n.DO_CVB  ANOP  ,                       *\n&_LABEL  CVB   &_TO1,&_FROM1           *\n         MEXIT ,                       *\n.*\n.* Generate a Load Access Multiple instruction to fill some ARs\n.DO_LAM  ANOP  ,                       *\n&REG     SETC  '&_TO1'                 * Default end register name\n         AIF   (&TO_LEN EQ 4).DO_LAM1  * Ok: load 1 access register\n&I       SETA  &TO_LEN/4               * Get number of registers\n&I       SETA  &TO_REG+&I-1            * Get ending register number\n&REG     SETC  'AR'.'&I'               * Create register name\n         AIF   (&I LE 15).DO_LAM1      * End-reg is ok\n&I       SETA  &I-16                   * Perform wrap-around\n&REG     SETC  'AR'.'&I'               * Create register name\n.DO_LAM1 ANOP  ,                       * End-register determined\n&_LABEL  LAM   &_TO1,&REG,&_FROM1      *\n         MEXIT ,                       *\n.*\n.* Generate a Load Control instruction to fill some control registers\n.DO_LCTL ANOP  ,                       *\n&REG     SETC  '&_TO1'                 * Default end register name\n         AIF   (&TO_LEN EQ 4).DO_LCTL1 * Ok: load 1 control register\n&I       SETA  &TO_LEN/4               * Get number of registers\n&I       SETA  &TO_REG+&I-1            * Get ending register number\n&REG     SETC  'CR'.'&I'               * Create register name\n         AIF   (&I LE 15).DO_LCTL1     * End-reg is ok\n&I       SETA  &I-16                   * Perform wrap-around\n&REG     SETC  'CR'.'&I'               * Create register name\n.DO_LCTL1 ANOP ,                       * End-register determined\n&_LABEL  LCTL  &_TO1,&REG,&_FROM1      *\n         MEXIT ,                       *\n.*\n.* Generate a Load floating point (long)\n.DO_LD   ANOP  ,                       *\n&_LABEL  LD    &_TO1,&_FROM1           *\n         MEXIT ,                       *\n.*\n.* Generate a Load floating point (short)\n.DO_LE   ANOP  ,                       *\n&_LABEL  LE    &_TO1,&_FROM1           *\n         MEXIT ,                       *\n.*\n.* Generate a Load Multiple instruction to fill some registers\n.DO_LM   ANOP  ,                       *\n         AIF   (&TO_LEN EQ 4).DO_L     * Load only 1 register\n&I       SETA  &TO_LEN/4               * Get number of registers\n&I       SETA  &TO_REG+&I-1            * Get ending register number\n         AIF   (&I LE 15).DO_LM1       * End-reg is ok\n&I       SETA  &I-16                   * Perform wrap-around\n.DO_LM1  ANOP  ,                       * End-register determined\n&REG     SETC  'R'.'&I'                * Create register name\n&_LABEL  LM    &_TO1,&REG,&_FROM1      *\n         MEXIT ,                       *\n.*\n.* Copy two fields of equal length, under 256\n.* Generate explict length when specified or needed\n.DO_MVC  ANOP  ,                       *\n         AIF   (K'&_TO2 NE 0).DO_MVC1  * Use explicit length specified\n         AIF   (&TO_LEN NE L'&_TO1).DO_MVC1 * Use deviating length\n&_LABEL  MVC   &_TO1,&_FROM1           * Use implicit length\n         MEXIT ,                       *\n.DO_MVC1 ANOP  ,                       *\n&_LABEL  MVC   &_TO1.(&TO_LEN),&_FROM1 *\n         MEXIT ,                       *\n.*\n.* Copy data, using MVCL\n.DO_MVCL ANOP  ,                       *\n         EQUREG PAIR=YES,TEMP=YES,R0=YES * Allocate src reg pair\n         AIF   (&BXA_RC NE 0).ERR7F    * Allocation failed\n&REG_SRCP SETC 'R'.'&BXA_NUMVAL'       * Create source ptr reg name\n&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Nr of odd reg in pair\n&REG_SRCL SETC 'R'.'&BXA_NUMVAL'       * Create source len reg name\n         USE   &REG_SRCP               * Set registers\n         USE   &REG_SRCL               *     in use\n         EQUREG PAIR=YES,TEMP=YES,R0=YES * Allocate dest reg pair\n         AIF   (&BXA_RC NE 0).ERR7F    * Allocation failed\n&REG_DSTP SETC 'R'.'&BXA_NUMVAL'       * Create dest ptr reg name\n&BXA_NUMVAL SETA &BXA_NUMVAL+1         * Nr of odd reg in pair\n&REG_DSTL SETC 'R'.'&BXA_NUMVAL'       * Create dest len reg name\n         USE   &REG_DSTP               * Set registers\n         USE   &REG_DSTL               *     in use\n.* Set source length\n         AIF   (&FROM_LEN EQ 0).DO_MVCLA * Length is in a register?\n&_LABEL  CPY   &REG_SRCL,&FROM_LEN     * Set length of source data\n         AGO   .DO_MVCLB               *\n.DO_MVCLA ANOP ,                       *\n&_LABEL  LR    &REG_SRCL,&_FROM2       * Set length of source data\n.DO_MVCLB ANOP ,                       *\n&_LABEL  SETC  ''                      * Label no longer needed\n.* Set source address\n         AIF   ('&_FROM1' EQ '0').DO_MVCL0\n         AIF   ('&FROM_TP' EQ 'p').DO_MVCLC * Pointered source field?\n         AGO   .DO_MVCLE               * No: normal field\n.DO_MVCLC ANOP ,                       *\n         AIF   ('&SYSASCE' EQ 'P').DO_MVCLD * Primary mode?\n         LAE   &REG_SRCP,0(,&_FROM1)   * Point to source data\n         AGO   .DO_MVCL1               *\n.DO_MVCLD ANOP ,                       *\n         LR    &REG_SRCP,&_FROM1       * Point to source data\n         AGO   .DO_MVCL1               *\n.DO_MVCLE ANOP ,                       *\n         AIF   ('&SYSASCE' EQ 'P').DO_MVCLF * Primary mode?\n         LAE   &REG_SRCP,&_FROM1       * Point to source data\n         AGO   .DO_MVCL1               *\n.DO_MVCLF ANOP ,                       *\n         LA    &REG_SRCP,&_FROM1       * Point to source data\n         AGO   .DO_MVCL1               *\n.DO_MVCL0 ANOP ,                       *\n         CLEAR &REG_SRCP               * Clear source data pointer\n.DO_MVCL1 ANOP ,                       *\n.* Set destination length\n         AIF   (&TO_LEN NE 0).DO_MVCLG\n         LR    &REG_DSTL,&_TO2         * Set length of dest field\n         AGO   .DO_MVCL3               *\n.DO_MVCLG ANOP ,                       *\n         AIF   (&TO_LEN NE &FROM_LEN).DO_MVCL2\n         LR    &REG_DSTL,&REG_SRCL     * Copy data length\n         AGO   .DO_MVCL3               *\n.DO_MVCL2 ANOP ,                       *\n         CPY   &REG_DSTL,&TO_LEN       * Set length of dest field\n.DO_MVCL3 ANOP ,                       *\n.* Set destination address\n         AIF   ('&TO_TP' EQ 'p').DO_MVCLH * Pointered dest field?\n         AGO   .DO_MVCLJ               * No: normal field\n.DO_MVCLH ANOP ,                       *\n         AIF   ('&SYSASCE' EQ 'P').DO_MVCLI * Primary mode?\n         LAE   &REG_DSTP,0(,&_TO1)     * Point to destination field\n         AGO   .DO_MVCL4               *\n.DO_MVCLI ANOP ,                       *\n         LR    &REG_DSTP,&_TO1         * Point to destination field\n         AGO   .DO_MVCL4               *\n.DO_MVCLJ ANOP ,                       *\n         AIF   ('&SYSASCE' EQ 'P').DO_MVCLK * Primary mode?\n         LAE   &REG_DSTP,&_TO1         * Point to destination field\n         AGO   .DO_MVCL4               *\n.DO_MVCLK ANOP ,                       *\n         LA    &REG_DSTP,&_TO1         * Point to destination field\n.DO_MVCL4 ANOP ,                       *\n.* Insert padding into source length register\n         AIF   (&FROM_LEN EQ 0).DO_MVCL5 * Pad with zeros if needed\n         AIF   (&TO_LEN EQ 0).DO_MVCL5 * Pad with zeros if needed\n         AIF   (&FROM_LEN GE &TO_LEN).DO_MVCL5 * No padding needed\n         AIF   (&PAD0).DO_MVCL5        * Pad=X'00' --> No pad needed\n         ICM   &REG_SRCL,YNNN,=C' '    * Set padding to spaces\n.DO_MVCL5 ANOP ,                       *\n.*\n         MVCL  &REG_DSTP,&REG_SRCP     *\n         DROP  &REG_DSTL               * Destination register pair\n         DROP  &REG_DSTP               *    no longer needed\n         DROP  &REG_SRCL               * Source register pair\n         DROP  &REG_SRCP               *    no longer available\n         MEXIT ,                       *\n.*\n.* Generate a PACK to copy zoned decimal data to a packed field\n.DO_PACK ANOP  ,                       *\n         AIF   (K'&_TO2 NE 0).DO_PACK0 *\n         AIF   (&TO_LEN NE L'&_TO1).DO_PACK0 *\n         AGO   .DO_PACK1               *\n.DO_PACK0 ANOP ,                       * Add explicit dest.length\n&_TO1    SETC  '&_TO1'.'(&TO_LEN)'     * Add length to destination\n.DO_PACK1 ANOP ,                       * Length now in destination fld\n         AIF   (K'&_FROM2 NE 0).DO_PACK2 *\n         AIF   (&FROM_LEN NE L'&_FROM1).DO_PACK2 *\n         AGO   .DO_PACK3               *\n.DO_PACK2 ANOP ,                       * Add explicit src.length\n&_FROM1  SETC  '&_FROM1'.'(&FROM_LEN)' * Add length to source\n.DO_PACK3 ANOP ,                       * Length now in source fld\n&_LABEL  PACK  &_TO1,&_FROM1           *\n         MEXIT ,                       *\n.*\n.* Generate a Store register\n.DO_ST   ANOP  ,                       *\n&_LABEL  ST    &_FROM1,&_TO1           *\n         MEXIT ,                       *\n.*\n.* Generate a Store Access Multiple instruction to save some ARs\n.DO_STAM ANOP  ,                       *\n&I       SETA  &FROM_LEN/4             * Get number of registers\n&I       SETA  &FROM_REG+&I-1          * Get ending register number\n&REG     SETC  'AR'.'&I'               * Create register name\n         AIF   (&I LE 15).DO_STAM1     * End-reg is ok\n&I       SETA  &I-16                   * Perform wrap-around\n&REG     SETC  'AR'.'&I'               * Create register name\n.DO_STAM1 ANOP ,                       * End-register determined\n&_LABEL  STAM  &_FROM1,&REG,&_TO1      *\n         MEXIT ,                       *\n.*\n.* Generate a Store characters under mask\n.DO_STCM ANOP  ,                       *\n&_LABEL  STCM  &_FROM1,&MASK,&_TO1     *\n         MEXIT ,                       *\n.*\n.* Generate a Store Control instruction to fill some control registers\n.DO_STCTL ANOP ,                       *\n&I       SETA  &FROM_LEN/4             * Get number of registers\n&I       SETA  &FROM_REG+&I-1          * Get ending register number\n&REG     SETC  'CR'.'&I'               * Create register name\n         AIF   (&I LE 15).DO_STCTL1    * End-reg is ok\n&I       SETA  &I-16                   * Perform wrap-around\n&REG     SETC  'CR'.'&I'               * Create register name\n.DO_STCTL1 ANOP ,                      * End-register determined\n&_LABEL  STCTL &_FROM1,&REG,&_TO1      *\n         MEXIT ,                       *\n.*\n.* Generate a Store floating point (long)\n.DO_STD  ANOP  ,                       *\n&_LABEL  STD   &_FROM1,&_TO1           *\n         MEXIT ,                       *\n.*\n.* Generate a Store floating point (short)\n.DO_STE  ANOP  ,                       *\n&_LABEL  STE   &_FROM1,&_TO1           *\n         MEXIT ,                       *\n.*\n.* Generate a Store Halfword\n.DO_STH  ANOP  ,                       *\n&_LABEL  STH   &_FROM1,&_TO1           *\n         MEXIT ,                       *\n.*\n.* Generate a Store Multiple instruction to save some registers\n.DO_STM  ANOP  ,                       *\n&I       SETA  &FROM_LEN/4             * Get number of registers\n&I       SETA  &FROM_REG+&I-1          * Get ending register number\n         AIF   (&I LE 15).DO_STM1      * End-reg is ok\n&I       SETA  &I-16                   * Perform wrap-around\n.DO_STM1 ANOP  ,                       * End-register determined\n&REG     SETC  'R'.'&I'                * Create register name\n&_LABEL  STM   &_FROM1,&REG,&_TO1      *\n         MEXIT ,                       *\n.*\n.* Generate an UNPK to copy packed decimal data to a zoned field\n.DO_UNPK ANOP  ,                       *\n         AIF   (K'&_TO2 NE 0).DO_UNPK0 *\n         AIF   (&TO_LEN NE L'&_TO1).DO_UNPK0 *\n         AGO   .DO_UNPK1               *\n.DO_UNPK0 ANOP ,                       * Add explicit dest.length\n&_TO1    SETC  '&_TO1'.'(&TO_LEN)'     * Add length to destination\n.DO_UNPK1 ANOP ,                       * Length now in destination fld\n         AIF   (K'&_FROM2 NE 0).DO_UNPK2 *\n         AIF   (&FROM_LEN NE L'&_FROM1).DO_UNPK2 *\n         AGO   .DO_UNPK3               *\n.DO_UNPK2 ANOP ,                       * Add explicit src.length\n&_FROM1  SETC  '&_FROM1'.'(&FROM_LEN)' * Add length to source\n.DO_UNPK3 ANOP ,                       * Length now in source fld\n&_LABEL  UNPK  &_TO1,&_FROM1           *\n         MEXIT ,                       *\n.*\n.* Generate a ZAP to copy packed decimal data\n.DO_ZAP  ANOP  ,                       *\n         AIF   (K'&_TO2 NE 0).DO_ZAP0  *\n         AIF   (&TO_LEN NE L'&_TO1).DO_ZAP0 *\n         AGO   .DO_ZAP1                *\n.DO_ZAP0 ANOP  ,                       * Add explicit dest.length\n&_TO1    SETC  '&_TO1'.'(&TO_LEN)'     * Add length to destination\n.DO_ZAP1 ANOP  ,                       * Length now in destination fld\n         AIF   (K'&_FROM2 NE 0).DO_ZAP2 *\n         AIF   (&FROM_LEN NE L'&_FROM1).DO_ZAP2 *\n         AGO   .DO_ZAP3                *\n.DO_ZAP2 ANOP  ,                       * Add explicit src.length\n&_FROM1  SETC  '&_FROM1'.'(&FROM_LEN)' * Add length to source\n.DO_ZAP3 ANOP  ,                       * Length now in source fld\n&_LABEL  ZAP   &_TO1,&_FROM1           *\n         MEXIT ,                       *\n.*\n.MEND    MEND\n./ ADD NAME=DBG      0100-20096-20096-0111-00475-00475-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates debugging code.\n.*\n&LABEL   DBG   &TYPE,                  * LOAD, FIND, SNAP, CLOSE, ABEND*\n               &TITLE,                 * SNAP: title for SNAP dump     *\n               &EP=,                   * LOAD: entrypoint name         *\n               &PTR=,                  * LOAD: pointer to debug module *\n               &PLIST=,                * LOAD: fieldnames for plist    *\n               &CB=,                   * SNAP: control blocks to dump  *\n               &NTRT=,                 * FIND: NTRT field names        *\n               &SAVE=                  * SNAP: YES/NO save/restore regs\n.*\n.* &TYPE  specifies the type of code to generate:\n.*        LOAD : loads and initializes the debug module\n.*        FIND : retrieves existing DBG environment (if any)\n.*        CLOSE: terminates and removes the debug module\n.*        SNAP : generates a call to the debug module\n.*        ABEND: forces an immediate S0C1-abend\n.* &TITLE used only with TYPE=SNAP. Specifies the title of the snapdump\n.*        used only with TYPE=ABND. Specifies NOWARN to suppress the\n.*        warning message normally issued for a deliberate S0C1-abend.\n.* &EP    used only with TYPE=LOAD. Specifies the entry point name\n.*        of the debugging module.\n.* &PTR   used only with TYPE=LOAD and TYPE=FIND.\n.*        Specifies the name of a field that\n.*        will be used to hold the entry point address to the debug\n.*        module. This fieldname is set on the TYPE=LOAD/FIND expansion\n.*        and subsequently used on all TYPE=SNAP and TYPE=CLOSE\n.*        expansions.\n.* &PLIST used only with TYPE=LOAD and TYPE=FIND.\n.*        Specifies the names of two fields:\n.*        - PLIST area for debug module, mapped by MAPDBG macro\n.*        - An area for the function code\n.* &CB    used only with TYPE=SNAP. Specifies which control blocks\n.*        will be snapped. Valid values for CB are:\n.*        - USER all user control blocks will be SNAPped: SCB and\n.*               anything pointed to by the SCB\n.*        - SYS  a variety of system control blocks will be SNAPped:\n.*          CVT, SCVT, SVC-table, SVC update table, etc.\n.*        - DSPC the contents of dataspace BXADSPC will be SNAPped\n.*        - TASK the contents of TCB and related control blocks will be\n.*               SNAPped\n.* &NTRT  used only with TYPE=FIND.\n.*        Specifies the name of three fields:\n.*        - Plist area for NTRT macro\n.*        - An area for the retrieved token\n.*        - An area for the returncode from NTRT\n.* &SAVE  used only with TYPE=SNAP. Defaults to yes if omitted.\n.*        If YES all GPRs and all ARs will be stored in the DBG\n.*        dynamic area before DBG is invoked. Upon return, all 32\n.*        registers will be restored.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DBG                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare global and local variables\n         GBLB  &SP_DBG                 * Debugging enablement\n         GBLC  &BXA_DBG_PTR            * pointer to loadmod\n         GBLC  &BXA_DBG_EP             * entry point name\n         GBLC  &BXA_DBG_PLIST          * plist field name\n         GBLA  &BXA_DBG_SKIP           * Nr of skipped operations\n         GBLC  &SYSASCE                * Address space control setting\n.*\n         LCLC  &_PTR                   * from PTR or BXA_DBG_PTR\n         LCLC  &_CB                    * defaults to USER if CB empty\n         LCLC  &ASCMODE                * ASC mode at entry\n.*\n.* Debugging enabled?\n         AIF   (&SP_DBG).DBGOK         * Enabled: expand this macro\n&BXA_DBG_SKIP SETA &BXA_DBG_SKIP+1     * Disabled: increment count\n         MEXIT ,                       *   of skipped DBG-operations\n.DBGOK   ANOP\n.*\n.* Check validity of the Type parameter\n         AIF   ('&TYPE' EQ 'SNAP').NOERR1\n         AIF   ('&TYPE' EQ 'LOAD').NOERR1\n         AIF   ('&TYPE' EQ 'FIND').NOERR1\n         AIF   ('&TYPE' EQ 'CLOSE').NOERR1\n         AIF   ('&TYPE' EQ 'ABEND').NOERR1\n         AIF   ('&TYPE' EQ 'ABND').NOERR1\n.ERR1    MNOTE 8,'Invalid value supplied for first positional parameter*\n               '\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check validity of the EP parameter\n         AIF   ('&TYPE' EQ 'LOAD').ERR2_RQ\n         AIF   (K'&EP EQ 0).NOERR2\n.ERR2A   MNOTE 4,'Entry-point name specified: ignored'\n         AGO   .NOERR2\n.ERR2_RQ ANOP\n         AIF   (K'&EP EQ 0).ERR2B\n         AIF   (K'&EP GT 8).ERR2C\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Missing entry-point name for DBG TYPE=LOAD'\n         AGO   .NOERR2\n.ERR2C   MNOTE 8,'Entry-point name exceeds 8 chars on DBG TYPE=LOAD'\n.NOERR2  ANOP\n.*\n.* Check validity of the PTR parameter\n         AIF   ('&TYPE' EQ 'LOAD').ERR3_RQ\n         AIF   ('&TYPE' EQ 'FIND').ERR3_RQ\n         AIF   ('&TYPE' EQ 'SNAP').ERR3_OP\n         AIF   ('&TYPE' EQ 'CLOSE').ERR3_OP\n         AIF   (K'&PTR EQ 0).NOERR3\n         AGO   .NOERR3\n.ERR3_RQ ANOP\n         AIF   (K'&PTR EQ 0).ERR3B\n         AGO   .NOERR3\n.ERR3_OP ANOP\n         AIF   (K'&PTR NE 0).NOERR3\n         AIF   (K'&BXA_DBG_PTR NE 0).NOERR3\n         AGO   .ERR3B\n.ERR3A   MNOTE 4,'Pointer field name specified: ignored'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'Missing pointer field name for DBG TYPE=&TYPE'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Set PTR-field to the required value\n&_PTR    SETC  '&PTR'\n         AIF   (K'&PTR NE 0).SNAP_PTR\n&_PTR    SETC  '&BXA_DBG_PTR'\n.SNAP_PTR ANOP\n.*\n.* Check validity of the CB parameter\n         AIF   (K'&CB EQ 0).NOERR4\n         AIF   ('&CB' EQ 'USER').NOERR4\n         AIF   ('&CB' EQ 'SYS').NOERR4\n         AIF   ('&CB' EQ 'DSPC').NOERR4\n         AIF   ('&CB' EQ 'TASK').NOERR4\n.ERR4    MNOTE 8,'Invalid value specified on CB parameter'\n.NOERR4  ANOP\n.*\n         AIF   ('&TYPE' EQ 'SNAP').ERR5_RQ\n         AIF   (K'&CB EQ 0).NOERR5\n.ERR5A   MNOTE 4,'CB parameter specified: ignored'\n         AGO   .NOERR5\n.ERR5_RQ ANOP\n.* Set &_CB to default if &CB not specified for TYPE=SNAP\n&_CB     SETC  '&CB'\n         AIF   (K'&CB EQ 0).NOERR5\n&_CB     SETC  'USER'\n.NOERR5  ANOP\n.*\n.* Check validity of the Title parameter\n         AIF   ('&TYPE' EQ 'SNAP').ERR6_RQ\n         AIF   (('&TYPE' EQ 'ABND' OR '&TYPE' EQ 'ABEND')              *\n               AND '&TITLE' NE '' AND '&TITLE' NE 'NOWARN').ERR6E\n         AIF   ('&TYPE' EQ 'ABND' OR '&TYPE' EQ 'ABEND').NOERR6\n         AIF   (K'&TITLE EQ 0).NOERR6\n.ERR6A   MNOTE 4,'Title specified: ignored'\n         AGO   .NOERR6\n.ERR6_RQ ANOP\n         AIF   (K'&TITLE EQ 0).ERR6B\n         AIF   ('&TITLE'(1,1) NE '''').ERR6C\n         AIF   ('&TITLE'(K'&TITLE,1) NE '''').ERR6C\n         AIF   (K'&TITLE GT 240).ERR6D\n         AGO   .NOERR6\n.ERR6B   MNOTE 4,'Missing title for DBG TYPE=SNAP'\n         AGO   .NOERR6\n.ERR6C   MNOTE 8,'Title must be specified in single quotes'\n         AGO   .NOERR6\n.ERR6D   MNOTE 8,'Title must not exceed 240 characters'\n         AGO   .NOERR6\n.ERR6E   MNOTE 4,'Second parameter for DBG &TYPE not NOWARN: ignored'\n.NOERR6  ANOP\n.*\n.* Check validity of the PLIST parameter\n         AIF   ('&TYPE' EQ 'LOAD').ERR7_RQ\n         AIF   ('&TYPE' EQ 'FIND').ERR7_RQ\n         AIF   (K'&PLIST EQ 0).NOERR7\n.ERR7A   MNOTE 4,'PLIST parameter specified: ignored'\n         AGO   .NOERR7\n.ERR7_RQ ANOP\n         AIF   (K'&PLIST EQ 0).ERR7B\n         AIF   ('&PLIST'(1,1) NE '(').ERR7C\n         AIF   (N'&PLIST EQ 0).ERR7D\n         AIF   (N'&PLIST EQ 1).ERR7D\n         AIF   (N'&PLIST GT 2).ERR7D\n         AIF   ('&PLIST(1)'(1,1) EQ '(').ERR7E\n         AIF   ('&PLIST(2)'(1,1) EQ '(').ERR7E\n         AGO   .NOERR7\n.ERR7B   MNOTE 8,'Missing parameter PLIST for DBG TYPE=&TYPE'\n         AGO   .NOERR7\n.ERR7C   MNOTE 8,'Missing parentheses on parameter PLIST'\n         AGO   .NOERR7\n.ERR7D   MNOTE 8,'PLIST parameter must contain two field-names'\n         AGO   .NOERR7\n.ERR7E   MNOTE 8,'PLIST sub-parameter must not specify (register)'\n.NOERR7  ANOP\n.*\n.* Check validity of the NTRT parameter\n         AIF   ('&TYPE' EQ 'FIND').ERR8_RQ\n         AIF   (K'&NTRT EQ 0).NOERR8\n.ERR8A   MNOTE 4,'NTRT parameter specified: ignored'\n         AGO   .NOERR8\n.ERR8_RQ ANOP\n         AIF   (K'&NTRT EQ 0).ERR8B\n         AIF   ('&NTRT'(1,1) NE '(').ERR8C\n         AIF   (N'&NTRT LT 3).ERR8D\n         AIF   (N'&NTRT GT 3).ERR8D\n         AIF   ('&NTRT(1)'(1,1) EQ '(').ERR8E\n         AIF   ('&NTRT(2)'(1,1) EQ '(').ERR8E\n         AIF   ('&NTRT(3)'(1,1) EQ '(').ERR8E\n         AGO   .NOERR8\n.ERR8B   MNOTE 8,'Missing parameter NTRT for DBG TYPE=&TYPE'\n         AGO   .NOERR8\n.ERR8C   MNOTE 8,'Missing parentheses on parameter NTRT'\n         AGO   .NOERR8\n.ERR8D   MNOTE 8,'NTRT parameter must contain three field-names'\n         AGO   .NOERR8\n.ERR8E   MNOTE 8,'NTRT sub-parameter must not specify (register)'\n.NOERR8  ANOP\n.*\n.* Check SAVE parameter\n         AIF   ('&TYPE' EQ 'SNAP').ERR9_RQ\n         AIF   (K'&SAVE EQ 0).NOERR9\n.ERR9A   MNOTE 4,'SAVE parameter specified: ignored'\n         AGO   .NOERR9\n.ERR9_RQ ANOP\n         AIF   (K'&SAVE EQ 0).NOERR9\n         AIF   ('&SAVE' EQ 'NO').NOERR9\n         AIF   ('&SAVE' EQ 'YES').NOERR9\n.ERR9B   MNOTE 8,'SAVE parameter must specify either YES or NO'\n.NOERR9  ANOP  ,\n.*\n.* Generate label\n&LABEL   LABEL ,\n.*\n.* Include required section, depending on TYPE parameter\n         AIF   ('&TYPE' EQ 'ABEND').ABEND\n         AIF   ('&TYPE' EQ 'ABND').ABEND\n.*\n         GENMAPS (MAP$DBG)             * Mapping macro for debug plist\n         AIF   ('&TYPE' EQ 'SNAP').SNAP\n         AIF   ('&TYPE' EQ 'LOAD').LOAD\n         AIF   ('&TYPE' EQ 'FIND').FIND\n         AIF   ('&TYPE' EQ 'CLOSE').CLOSE\n         MNOTE 12,'Internal error'\n         MEXIT\n.*\n.LOAD    ANOP\n.*\n.* Generate code for loading the debug module\n*\n* Load the debug module into storage\n         LOAD  EP=&EP                  * Abend on error\n         LR    R1,R0                   * Copy entry point address\n         LA    R1,0(,R1)               * Remove garbage bits\n         ST    R1,&PTR                 * Set pointer to routine\n*\n* Initialize the parameter list and the debug routine itself\n         LA    R1,&PLIST(1)            * Retrieve address of plist\nPL       USE   DBGPL,R1                * And set addressable\n         CLEAR (PL.DBGPL,DBGPL_LEN)    * Wipe area clean\n         LA    R15,&PLIST(2)           * Get address of function code\n         ST    R15,PL.DBGFUNPT         * Store into plist\n*\n         MVI   0(R15),DBGINIT          * Set parm-value to init\n         L     R15,&PTR                * Load debug-routine address\n         BASR  R14,R15                 * Call BXADBG00\n         DROP  PL                      * DBGPL,R1\n*\n* On error during init, set debug mode inactive\n         LTR   R15,R15                 * Everything was ok?\n         BZ    _LOAD&SYSNDX            * Yes: continue\n         DELETE EP=&EP                 * Remove debug module from stor\n         ABND  TSTRC,RCD=IGNORE        * On error abend program\n         XC    &PTR,&PTR               * Reset debug-mod pointer\n_LOAD&SYSNDX LABEL ,                   * Init was ok: keep DBG-routine\n.*\n.* Put supplied values into Globals\n&BXA_DBG_PTR SETC '&PTR'\n&BXA_DBG_EP SETC '&EP'\n&BXA_DBG_PLIST SETC '&PLIST(1)'\n         MEXIT\n.*\n.FIND    ANOP\n*\n* Retrieve the Named token for debugging options\n         XC    &PTR.(4),&PTR           * Clear module pointer field\n         XC    &PLIST(1),&PLIST(1)     * Clear plist pointer field\n         NTRT  ,,&NTRT(2),&NTRT(3),    * Create                        *\n               LVL=IEANT_TASK_LEVEL,   *  plist                        *\n               NAME='BIXXAMS.DBG',     *   for token                   *\n               MF=(G,&NTRT(1))         *    retrieval\n         NTRT  MF=(E,&NTRT(1))         * Retrieve token value\n         LTR   R15,R15                 * Token was found?\n         BNZ   _DBG&SYSNDX             * No: do not set up for DBG\n         LA    R1,&PLIST(1)            * Point to plist\nPL       USE   DBGPL,R1                * And set it addressable\n         L     R14,&NTRT(2)            * Retrieve DBG epa from token\n         ST    R14,&PTR                * And put it into a safe place\n         L     R14,&NTRT(2)+4          * Retrieve DBG workarea address\n         ST    R14,PL.DBGWRKPT         * And put it into our plist\n         LA    R14,&PLIST(2)           * Point to function code\n         ST    R14,PL.DBGFUNPT         * And put it into our plist\n         DROP  PL                      * DBGPL,R1 no longer needed\n_DBG&SYSNDX LABEL\n.*\n.* Put supplied values into Globals\n&BXA_DBG_PTR SETC '&PTR'\n&BXA_DBG_PLIST SETC '&PLIST(1)'\n         MEXIT\n.*\n.SNAP    ANOP\n.*\n.* Generate code for calling the debug module\n&ASCMODE SETC  '&SYSASCE'              * Keep current ASC mode setting\n.*\n         AIF   ('&SAVE' EQ 'NO').NOSAVE0\n         CLC   &_PTR,=F'0'             * Debug-routine loaded?\n         BE    _DBG&SYSNDX             * No: skip call of module\n         AIF   ('&ASCMODE' EQ 'P').PRIMOK0\n         SETMODE PRIM                  * Switch to primary\n.PRIMOK0 ANOP\n         ST    R1,SAVEHDR              * Temp save for R1\n         LA    R1,&BXA_DBG_PLIST       * Get address of plist\nPL       USE   DBGPL,R1                * And set addressable\n         L     R1,PL.DBGWRKPT          * Point to DBG area\n         DROP  PL                      * Parmlist no longer addressable\n         USE   DBG,R1,                 * And set it addressable        *\n               OVR=((DBGSAVE,*NOUSE),(DBGBDST,*NOUSE))\n         STM   R0,R15,DBGREGS          * Save all registers\n         MVC   DBGREGS+4(4),SAVEHDR    *   add original R1-value\n         STAM  AR0,AR15,DBGAREGS       *   and all access registers\n         XC    SAVEHDR,SAVEHDR         * Reset header field to zeroes\n         DROP  R1                      * DBG no longer needed\n         L     R15,&_PTR               * Load ptr to debug routine\n         AGO   .GETPLST\n.*\n.NOSAVE0 ANOP  ,\n         LT    R15,&_PTR               * Debug-routine loaded?\n         BZ    _DBG&SYSNDX             * No: skip call of module\n         AIF   ('&ASCMODE' EQ 'P').PRIMOK1\n         SETMODE PRIM                  * Switch to primary\n.PRIMOK1 ANOP\n.*\n.GETPLST ANOP  ,\n         LA    R1,&BXA_DBG_PLIST       * Get address of plist\nPL       USE   DBGPL,R1                * And set addressable\n.*\n         AIF   (K'&TITLE EQ 0).NOTITLE\n_TIT&SYSNDX RDATA SNAPHDR,&TITLE       * Define title text\n         L     R0,=AL4(_TIT&SYSNDX)    * Point to header title\n         AGO   .BLDPL\n.NOTITLE ANOP\n         XR    R0,R0                   * No pointer to title\n.*\n.BLDPL   ANOP\n         ST    R0,PL.DBGTITPT          * Store pointer to title\n         L     R14,PL.DBGFUNPT         * Retrieve ptr to function code\n.*\n         AIF   ('&CB' EQ 'SYS').SNAPSYS\n         AIF   ('&CB' EQ 'DSPC').SNAPDSP\n         AIF   ('&CB' EQ 'TASK').SNAPTCB\n         MVI   0(R14),DBGSNAPU         * Set function code to user CBs\n         AGO   .SNAPIT\n.SNAPSYS ANOP\n         MVI   0(R14),DBGSNAPS         * Set function code to sys CBs\n         AGO   .SNAPIT\n.SNAPTCB ANOP\n         MVI   0(R14),DBGSNAPT         * Set function code to task CBs\n         AGO   .SNAPIT\n.SNAPDSP ANOP\n         MVI   0(R14),DBGSNAPD         * Set function code to dataspace\n.SNAPIT  ANOP\n         BASR  R14,R15                 * Call BXADBG00\n.*\n         AIF   ('&SAVE' EQ 'NO').NOSAVE2\n         L     R14,PL.DBGWRKPT         * Point to DBG area\n         USE   DBG,R14,                * And set it addressable        *\n               OVR=((DBGSAVE,*NOUSE),(DBGBDST,*NOUSE))\n         LAM   AR0,AR15,DBGAREGS       * Restore all access registers\n         LM    R0,R15,DBGREGS          *  and all registers\n         DROP  R14                     * DBG no longer needed\n.NOSAVE2 ANOP  ,\n.*\n         DROP  PL                      * DBGPL,R1 no longer needed\n.*\n         AIF   ('&ASCMODE' EQ 'P').PRIMOK\n         SETMODE AR                    * Resume AR mode\n.PRIMOK  ANOP\n_DBG&SYSNDX LABEL ,                    * No debug-routine to invoke\n.*\n         MEXIT\n.*\n.CLOSE   ANOP\n.*\n.* Generate code for closing the debug module\n         LT    R15,&_PTR               * Debug-routine loaded?\n         BZ    _DBG&SYSNDX             * No: skip delete of module\n         LA    R1,&BXA_DBG_PLIST       * Get address of plist\nPL       USE   DBGPL,R1                * And set addressable\n         L     R14,PL.DBGFUNPT         * Point to function code\n         MVI   0(R14),DBGTERM          * Set to terminate\n*\n         BASR  R14,R15                 * Let BXADBG00 terminate\n         DROP  PL                      * DBGPL,R1 no longer needed\n         DELETE EP=&BXA_DBG_EP         * Remove debug module from stor\n         ABND  TSTRC,RCD=IGNORE        * On error abend program\n         XC    &_PTR,&_PTR             * Reset debug-mod pointer\n_DBG&SYSNDX LABEL ,                    * No debug-routine to mop up\n.*\n         MEXIT\n.*\n.ABEND   ANOP\n.*\n.* Generate code for forcing an immediate abend\n         DC    X'0000'                 * Force S0C1-abend\n         AIF   ('&TITLE' EQ 'NOWARN').NOWARN\n         AIF   ('&SYSSTYP' EQ 'DSECT').NOWARN\n         MNOTE 1,'Deliberate S0C1-ABEND included'\n.NOWARN  ANOP\n.*\n.MEND    MEND\n./ ADD NAME=DC       0100-20096-20096-0111-00156-00156-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's DC statement\n.*\n&LABEL   DC    ,                       * Arguments in &SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DC                     * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_DC_LASTLAB        * Org. label of last labeled DC\n         GBLA  &BXA_DC_OFFSET         * Nr of unlab'd DCs since LASTLAB\n         GBLA  &BXA_DCOVR             * Ptr to last valid\n         GBLC  &BXA_DCOVR_LAB(50)     * Labels\n         GBLC  &BXA_DCOVR_PRM(50)     * Parameter strings\n         GBLC  &BXA_DCOVR_NAM(50)     * New names\n         LCLA  &I                     * Index\n         LCLC  &_LABEL                *\n         LCLC  &PRMS                  *\n         LCLB  &RESET                 * On if last entry removed\n         LCLC  &LAB                   * LABEL used to search DCOVR_LAB\n         LCLC  &OPCD                  * Opcode to be used: _DC or DS\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST EQ 0).ERR1A\n         AIF   (K'&SYSLIST(1) EQ 0).ERR1A\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'Missing operand(s)'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Set up default values\n&_LABEL  SETC  '&LABEL'                * Copy fieldname\n&OPCD    SETC  '_DC'                   * Set opcode to be used\n.LOOP1   ANOP  ,                       * Collect all parameters\n&I       SETA  &I+1                    * into variable PRMS\n         AIF   (&I GT N'&SYSLIST).LOOP1OK\n&PRMS    SETC  '&PRMS'.','.'&SYSLIST(&I)'\n         AGO   .LOOP1\n.LOOP1OK ANOP  ,\n&PRMS    SETC  '&PRMS'(2,*)            * PRMS cannot be empty\n.*\n.* Determine values relating to unlabeled DC-statements\n         AIF   (K'&_LABEL EQ 0).CRTLAB * DC is labeled?\n&BXA_DC_OFFSET SETA 0                  * Reset unlabeled count\n&BXA_DC_LASTLAB SETC '&_LABEL'         * Set last-used original label\n&LAB     SETC  '&_LABEL'               * Use this label for lookup\n         AGO   .LABOK\n.CRTLAB  ANOP  ,                       * Create LABEL+nnn to identify\n&BXA_DC_OFFSET SETA &BXA_DC_OFFSET+1   * Increment unlabeled count\n&LAB     SETC  '&BXA_DC_LASTLAB'.'+'.'&BXA_DC_OFFSET' * Create label\n.LABOK   ANOP  ,\n.*\n.* Check for overrides from DCOVR\n&I       SETA  0                       * I indexes BXA_DCOVR_xxx\n.LOOP2   ANOP  ,                       * Search entry\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &BXA_DCOVR).LOOP2NF * At end: not found\n         AIF   ('&BXA_DCOVR_LAB(&I)' NE '&LAB').LOOP2 *Skip mismatch\n.*\n.* Found a match: set up replacement variables\n         AIF   (K'&BXA_DCOVR_NAM(&I) EQ 0).NOLAB\n&_LABEL  SETC  '&BXA_DCOVR_NAM(&I)'    * NAM contains new field name\n         AIF   ('&_LABEL' NE '*NONAME').NOLAB\n&_LABEL  SETC  ''                      * Remove label for this DC\n.NOLAB   ANOP\n.* Override parameter string?\n         AIF   (K'&BXA_DCOVR_PRM(&I) EQ 0).NOPRM\n         AIF   ('&BXA_DCOVR_PRM(&I)' EQ '*DS').SETDS\n&PRMS    SETC  '&BXA_DCOVR_PRM(&I)'    * Pick up override value\n         AGO   .NOPRM                  *\n.SETDS   ANOP  ,                       *\n&OPCD    SETC  'DS'                    *\n.NOPRM   ANOP\n.*\n.* Remove the entry from the tables\n.* Replace current entry by the last-valid,\n.*    then decrement last-valid pointer\n         AIF   (&I EQ &BXA_DCOVR).DECR * Skip copy if current=last\n&BXA_DCOVR_LAB(&I) SETC '&BXA_DCOVR_LAB(&BXA_DCOVR)'\n&BXA_DCOVR_PRM(&I) SETC '&BXA_DCOVR_PRM(&BXA_DCOVR)'\n&BXA_DCOVR_NAM(&I) SETC '&BXA_DCOVR_NAM(&BXA_DCOVR)'\n.DECR    ANOP  ,                       * Decrement last-valid pointer\n&BXA_DCOVR SETA &BXA_DCOVR-1           *    by one\n         AIF   (&BXA_DCOVR NE 0).LOOP2NF * Stack not empty\n&RESET   SETB  1                       * Last entry just removed\n.*\n.* Generate _DC statement with overrides, unless *SUPPRESS specified\n.LOOP2NF ANOP  ,                       *\n         AIF   ('&PRMS' EQ '*SUPPRESS').SUPPRESS\n.*\n&_LABEL  &OPCD &PRMS\n.SUPPRESS ANOP ,\n.*\n.* If overrides stack has just been emptied, then this macro must be\n.* disabled by replacing the _DC-intruction with the original DC-instr.\n         AIF   (NOT &RESET).MEND\n         OPSYNS _DC                    * Revert to DC-instruction\n.*\n.MEND    MEND\n./ ADD NAME=DCL      0100-20096-20096-0111-00329-00329-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro expands 1 mapping macro to reserve storage\n.*\n&LABEL   DCL   &CB,                    * Control block name            *\n               &LBL                    * Label for dependent using\n.*\n.* The following syntaxes have been defined:\n.* 1 - Embedded control block\n.*     &LABEL is the label for the embedded control block\n.*            if omitted, dependent USINGs will not be generated\n.*            automatically.\n.*     &CB    is name (acronym) of control block to embed\n.*     &LBL   is label for automatic dependent usings. If omitted\n.*            unlabeled dependent usings will be generated. If\n.*            specified as *NOUSE, no USING will be generated\n.*            automatically.\n.* 2 - Define bit names\n.*     &LABEL is the label of the field containing the bits. Must not\n.*            be omitted.\n.*     &CB=*BITS\n.*     &SYSLIST(2) ff are names of bits to be allocated to consecutive\n.*                 bit positions. More than 8 may be specified.\n.*                 To define a name for more than bit at a time,\n.*                 EQUOVR and EQU must be used.\n.* 3 - Define code field and code values\n.*     &LABEL is the label of the field containing the bits. Must not\n.*            be omitted.\n.*     &CB=*CODE\n.*     &LBL   is field type designation. E.g. XL1 or H.\n.*     &SYSLIST(3) ff are names of codes to be assigned to the code\n.*                 field. Each may be specified as a name or as a\n.*                 pair (name,value). Omitted values are assigned in\n.*                 ascending order from the last value specified, or\n.*                 (by default) from 0 upward.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DCL                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &MAP                    * Name of mapping macro\n         LCLC  &PRFX                   * Prefix to generate fld names\n         LCLC  &BIT                    * Bitname to generate\n         LCLC  &BITLOC                 * Bit location\n         LCLC  &CODE                   * Codename to generate\n         LCLC  &VALUE                  * Value to assign\n         LCLC  &BASEVAL                * Base value to be assigned\n         LCLA  &I                      * index for &_CB + &BXA_USE_...\n         LCLA  &J                      * Bit number to allocate\n         LCLA  &O                      * Offset in bits field\n         LCLA  &X                      * Temp index field\n         GBLC  &BXA_USE_DS(50)         * Enclosing DSECT names\n         GBLC  &BXA_USE_FLD(50)        * Defined complex fields\n         GBLC  &BXA_USE_LBL(50)        * Labels to be used\n         GBLC  &BXA_USE_SDS(50)        * Enclosed DSECT names\n.*\n.* Check syntax type\n         AIF   (K'&CB EQ 0).ERR1A\n         AIF   ('&CB' EQ '*BITS').CHKBITS\n         AIF   ('&CB' EQ '*CODE').CHKCODE\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'Missing parameter'\n         MEXIT\n.NOERR1  ANOP  ,\n.*\n.* Check the LABEL parameter for syntax 1\n         AIF   (K'&LABEL NE 0).NOERR2  * Specified: always ok\n         AIF   (K'&LBL NE 0).ERR2A     * Error if LBL specified\n         AGO   .ERR2B\n.ERR2A   MNOTE 8,'No label specified: dependent USINGs will not be gene*\n               rated'\n         AGO   .NOERR2\n.ERR2B   MNOTE 4,'No label specified: unlabeled dependent USINGs will b*\n               e generated'\n.NOERR2  ANOP\n.*\n.* Check the CB parameter for syntax 1\n         AIF   (K'&CB EQ 0).ERR3A\n         GBLC  &(BXA_CB_&CB)           * Acronym to macro translation\n&MAP     SETC  'MAP'.'&(BXA_CB_&CB)'   * Extract mapname\n         AIF   ('&MAP' EQ 'MAP').ERR3B\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'No control block name specified'\n         MEXIT\n.ERR3B   MNOTE 8,'&CB is not a supported control block'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Check the LBL parameter for syntax 1\n         AIF   (K'&LBL EQ 0).NOERR4\n         AIF   ('&LBL' EQ '&LABEL').ERR4A\n         AGO   .NOERR4\n.ERR4A   MNOTE 8,'LBL-parameter must not be equal to the field name'\n         MEXIT\n.NOERR4  ANOP\n.*\n.* Check number of parameters for syntax 1\n         AIF   (N'&SYSLIST GT 2).ERR5A\n         AGO   .NOERR5\n.ERR5A   MNOTE 4,'More than 2 parameters specified: remainder ignored'\n.NOERR5  ANOP\n.*\n.* Determine prefix to use for field names\n&PRFX    SETC  '&LABEL'                * Default to Label\n         AIF   (K'&PRFX NE 0).PRFXOK   * If not specified,\n&PRFX    SETC  '&SYSECT'               *   use current dsect name\n.PRFXOK  ANOP\n         AIF   (K'&PRFX LE 3).GEN1     * If longer than 3 characters\n&PRFX    SETC  '&PRFX'(1,3)            *   truncate to three\n.GEN1    ANOP\n.*\n.* Put relevant data into the &BXA_USE_... tables.\n         AIF   (K'&LABEL EQ 0).NOLABEL * Skip if LABEL omitted\n&I       SETA  N'&BXA_USE_DS+1         * Point to first free entry\n&BXA_USE_DS(&I) SETC '&SYSECT'         * Current DSECT encloses field\n&BXA_USE_FLD(&I) SETC '&LABEL'         * Name of the generated field\n&BXA_USE_SDS(&I) SETC '&CB'            * DSECT for the complex field\n&BXA_USE_LBL(&I) SETC '&LBL'           * Label for dependent USING\n.NOLABEL ANOP\n.*\n.* Generate requested control block\n&LABEL   &MAP  DSECT=NO,CB=&CB,PRFX=&PRFX\n         MEXIT\n.**********************************************************************\n.CHKBITS ANOP  ,\n.*\n.* Check the LABEL parameter for syntax 2\n         AIF   (K'&LABEL NE 0).NOERR6  * Specified: always ok\n.ERR6A   MNOTE 8,'No label specified on *BITS-declaration'\n         MEXIT\n.NOERR6  ANOP\n.*\n.* Check number of parameters for syntax 2\n         AIF   (N'&SYSLIST GE 2).NOERR7\n.ERR7A   MNOTE 8,'No bit names specified: declaration ignored'\n         MEXIT\n.NOERR7  ANOP\n.*\n.* Generate bits field\n&I       SETA  N'&SYSLIST+6            * -1 (*BITS) +7 (rounding up)\n&I       SETA  &I/8                    * Number of bytes to allocate\n&LABEL   DS    BL&I                    * Define the complete bit field\n.*\n.* Generate mask equates\n&I       SETA  2                       * Point after *BITS\n&J       SETA  0                       * Next to generate will be 0\n&O       SETA  0                       * Start at offset 0\n         AGO   .BITOK                  * Skip next-logic on first pass\n.LOOP1NX ANOP  ,                       * For all other entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n.* Increment bit nr to be allocated and offset if necessary\n&J       SETA  &J+1                    * Address next bit\n         AIF   (&J LE 7).BITOK         * 0-7 are valid\n&J       SETA  0                       * otherwise: reset to zero\n&O       SETA  &O+1                    * Increment offset to next byte\n.BITOK   ANOP\n.* Generate EQU for bit mask - unless no bitname specified\n&BIT     SETC  '&SYSLIST(&I)'\n         AIF   (K'&BIT EQ 0).LOOP1NX   * Skip omitted parameter\n&X       SETA  ('&BIT' FIND '+-*/''(=).')\n         AIF   (&X EQ 0).NOERR8        * Illegal character found?\n&BIT     SETC  (DOUBLE '&BIT')\n         MNOTE 8,'&BIT is an illegal name: ignored'\n         AGO   .LOOP1NX\n.NOERR8  ANOP  ,                       * Valid name: generate equate\n&BIT     EQU   BIT&J,BIT&J,C'b'        * Set length to mask value\n.*\n.* Add entries to BXA_BITF_... table\n&BITLOC  SETC  '&LABEL'                * Label is location\n         AIF   (&O EQ 0).OFFSETOK      * No offset if offset is 0\n&BITLOC  SETC  '&LABEL'.'+'.'&O'       * Use label + offset in bytes\n.OFFSETOK ANOP ,\n         GBLC  &(BXA_BITF_&BIT)        * Declare fieldname\n&(BXA_BITF_&BIT) SETC '&BITLOC'        * Add bit location to table\n         AGO   .LOOP1NX\n.LOOP1OK ANOP\n         MEXIT\n.**********************************************************************\n.CHKCODE ANOP  ,\n.*\n.* Check the LABEL parameter for syntax 3\n         AIF   (K'&LABEL NE 0).NOERR9  * Specified: always ok\n.ERR9A   MNOTE 8,'No label specified on *CODE-declaration'\n         MEXIT\n.NOERR9  ANOP\n.*\n.* Check LBL parameter for syntax 3 (field type)\n         AIF   (K'&LBL EQ 0).ERR10A\n         AGO   .NOERR10\n.ERR10A  MNOTE 8,'Field type (and optional length) not specified'\n.NOERR10 ANOP  ,\n.*\n.* Check number of parameters for syntax 3\n         AIF   (N'&SYSLIST GE 3).NOERR11\n.ERR11A  MNOTE 8,'No codes specified: declaration ignored'\n         MEXIT\n.NOERR11 ANOP\n.*\n.* Generate code field\n&LABEL   DS    &LBL                    * Define the complete code field\n.*\n.* Generate code value equates\n&I       SETA  3                       * Point after *CODE and &LBL\n&O       SETA  0                       * Value offset for omitted value\n&BASEVAL SETC  '0'                     * Default base value\n         AGO   .CODEOK                 * Skip next-logic on first pass\n.LOOP2NX ANOP  ,                       * For all other entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop\n&O       SETA  &O+1                    * Increment value offset\n.CODEOK  ANOP  ,\n&CODE    SETC  '&SYSLIST(&I)'          * Extract operand\n         AIF   (K'&CODE EQ 0).LOOP2NX  * Skip omitted operand\n         AIF   ('&CODE'(1,1) EQ '(').LOOP2_2 * Value specified too?\n.* Only value name specified: check its validity\n&X       SETA  ('&CODE' FIND '+-*/''(=).')\n         AIF   (&X EQ 0).NOERR12       * Illegal character found?\n&CODE    SETC  (DOUBLE '&CODE')\n.ERR12A  MNOTE 8,'&CODE is an illegal name: ignored'\n         AGO   .LOOP2NX\n.NOERR12 ANOP  ,                       * Valid name:\n         AGO   .LOOP2GEN               * go generate EQUate\n.* Both value name and value specified: check parm\n.LOOP2_2 ANOP  ,\n         AIF   ('&CODE'(K'&CODE,1) NE ')').ERR13A\n         AIF   (N'&SYSLIST(&I) LT 2).ERR13B\n         AIF   (K'&SYSLIST(&I,1) EQ 0).ERR13C\n         AIF   (K'&SYSLIST(&I,2) EQ 0).ERR13D\n&X       SETA  ('&SYSLIST(&I,1)' FIND '+-*/''(=).')\n         AIF   (&X GT 0).ERR13E        * Illegal character found?\n         AIF   (N'&SYSLIST(&I) GT 2).ERR13F\n         AGO   .NOERR13\n.ERR13A  MNOTE 8,'Operand &I misses ending parenthesis: ignored'\n         AGO   .LOOP2NX\n.ERR13B  MNOTE 8,'Operand &I has insufficient subparameters: ignored'\n         AGO   .LOOP2NX\n.ERR13C  MNOTE 8,'Operand &I missing first subparameter: ignored'\n         AGO   .LOOP2NX\n.ERR13D  MNOTE 8,'Operand &I missing second subparameter: ignored'\n         AGO   .LOOP2NX\n.ERR13E  ANOP  ,\n&CODE    SETC  (DOUBLE '&SYSLIST(&I,1)')\n         MNOTE 8,'&CODE is an illegal name: ignored'\n         AGO   .LOOP2NX\n.ERR13F  MNOTE 8,'Operand &I more than two subparameters: remainder ign*\n               ored'\n.NOERR13 ANOP  ,\n.* No errors found: prepare for generating the EQUate\n&CODE    SETC  '&SYSLIST(&I,1)'        * Extract real code field name\n&BASEVAL SETC  '&SYSLIST(&I,2)'        * Extract new base value\n&O       SETA  0                       * Reset value offset to 0\n.LOOP2GEN ANOP ,                       * Generate the EQUate\n         AIF   ('&BASEVAL' EQ '0').LOOP2O\n         AIF   (&O EQ 0).LOOP2B\n&VALUE   SETC  '&BASEVAL.+&O'          * Value = Base value + Offset\n         AGO   .VALUEOK\n.LOOP2O  ANOP  ,\n&VALUE   SETC  '&O'                    * BASEVAL = 0: use offset only\n         AGO   .VALUEOK\n.LOOP2B  ANOP  ,\n&VALUE   SETC  '&BASEVAL'              * Offset = 0: omit offset\n.VALUEOK ANOP  ,\n&CODE    EQU   &VALUE,&VALUE,C'v'      * Set length to code value\n.*\n.* Add entries to BXA_BITF_... table\n         GBLC  &(BXA_BITF_&CODE)       * Declare fieldname\n&(BXA_BITF_&CODE) SETC '&LABEL'        * Add field location to table\n         AGO   .LOOP2NX\n.LOOP2OK ANOP\n.*\n.MEND    MEND\n./ ADD NAME=DCOVR    0100-20096-20096-0111-00195-00195-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro handles the stack of DC modifications for use by the\n.* DC macro, which replaces the assembler's DC instruction\n.*\n&LABEL   DCOVR &OPT,                   * Parameters are in &SYSLIST    *\n               &NEWNAM                 * New name for *NEWNAME option\n.*\n.* &LABEL mandatory, except when &OPT=*END\n.*        To specify an override for an unlabeled DC, specify the label\n.*        of the last preceding labeled DC and the relative number of\n.*        the unlabeled statement to be overridden. E.g.: LABEG+3,\n.*        would  mean the third unlabeled DC after the DC with label\n.*        LABEG.\n.* &OPT   specifies one of the following:\n.*        *END cancels all outstanding DCOVR requests\n.*        *DS  changes the DC into a DS, which may in turn be\n.*             overridden using the DSOVR macro\n.*        *SUPPRESS suppresses the definition of &LABEL\n.*        *NEWNAME changes the DC for &LABEL into one for &NEWNAM,\n.*              i.e. Specify *NEWNAME,newname,parmstring\n.*        Other values override the DC-operand string\n.* &NEWNAM Specifies the new name, if &OPT=*NEWNAME\n.*        &NEWNAM may optionally be followed by a parameter string\n.*        If &NEWNAM specifies *NONAME the DC will become unlabeled\n.* &SYSLIST Specifies an operand string, which replaces the complete\n.*        operand string of the original DC statement.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DCOVR                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_DCOVR              * Ptr to last valid\n         GBLC  &BXA_DCOVR_LAB(50)      * Labels\n         GBLC  &BXA_DCOVR_PRM(50)      * Parm strings\n         GBLC  &BXA_DCOVR_NAM(50)      * New names\n         LCLA  &I                      * Index\n         LCLC  &PRMS                   * Parameter string\n.*\n.* Check LABEL parameter\n         AIF   (K'&LABEL GT 0).NOERR1\n         AIF   ('&OPT' EQ '*END').NOERR1\n.ERR1    MNOTE 8,'Missing label parameter'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check the OPT parameter\n         AIF   (K'&OPT NE 0).NOERR2\n.ERR2A   MNOTE 8,'Missing parameter(s)'\n         MEXIT\n.NOERR2  ANOP  ,\n.*\n.* Check the NEWNAME parameter (must be present if &OPT = *NEWNAME)\n         AIF   ('&OPT' EQ '*NEWNAME' AND K'&NEWNAM EQ 0).ERR3A\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'New name not specified with option *NEWNAME'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Check number of parameters\n         AIF   ('&OPT' EQ '*END' AND N'&SYSLIST GT 1).ERR4A\n         AIF   ('&OPT' EQ '*END').NOERR4\n         AIF   ('&OPT' EQ '*DS' AND N'&SYSLIST GT 1).ERR4A\n         AIF   ('&OPT' EQ '*DS').NOERR4\n         AIF   ('&OPT' EQ '*SUPPRESS' AND N'&SYSLIST GT 1).ERR4A\n         AIF   ('&OPT' EQ '*SUPPRESS').NOERR4\n         AGO   .NOERR4\n.ERR4A   MNOTE 4,'More than 1 argument: remainder ignored'\n.NOERR4  ANOP\n.*\n.* Which option requested?\n         AIF   ('&OPT' EQ '*END').END\n         AIF   ('&OPT' EQ '*DS').DS\n         AIF   ('&OPT' EQ '*SUPPRESS').SUPPRESS\n         AIF   ('&OPT' EQ '*NEWNAME').NEWNAME\n.*\n.* Normal: add entries to tables\n&I       SETA  0                       * SYSLIST(1) ff into PRMS\n         AGO   .BLDPRMS\n.*\n.* DS option\n.DS      ANOP ,\n&PRMS    SETC  '&OPT'                  * Set to *DS\n         AGO   .ADDNTRY\n.*\n.* Suppress option\n.SUPPRESS ANOP ,\n&PRMS    SETC  '&OPT'                  * Set to *SUPPRESS\n         AGO   .ADDNTRY\n.*\n.* Newname option\n.NEWNAME ANOP  ,\n&I       SETA  2                       * SYSLIST(3) ff into PRMS\n         AGO   .BLDPRMS\n.*\n.* Build parameter string from SYSLIST entries\n.BLDPRMS ANOP  ,\n&I       SETA  &I+1                    * Point next SYSLIST entry\n         AIF   (&I GT N'&SYSLIST).PRMSOK\n&PRMS    SETC  '&PRMS'.','.'&SYSLIST(&I)'\n         AGO   .BLDPRMS\n.PRMSOK  ANOP  ,\n         AIF   (K'&PRMS EQ 0).ADDNTRY\n&PRMS    SETC  '&PRMS'(2,*)            * Remove leading comma\n.*\n.* Add entry to tables\n.ADDNTRY ANOP  ,\n&I       SETA  &BXA_DCOVR+1            * Next free entry\n&BXA_DCOVR_LAB(&I) SETC '&LABEL'       * Insert label,\n&BXA_DCOVR_PRM(&I) SETC '&PRMS'        *   and parameters\n&BXA_DCOVR_NAM(&I) SETC ''             *   into tables\n         AIF   ('&OPT' NE '*NEWNAME').NAMOK\n&BXA_DCOVR_NAM(&I) SETC '&NEWNAM'      *\n.NAMOK   ANOP  ,\n&BXA_DCOVR SETA &I                     * And update ptr to last valid\n.*\n.* Replace DC-instruction by our DC-macro on the first override\n         AIF   (&BXA_DCOVR GT 1).MEND\n         OPSYNS DC                     * Replace DC by _DC\n         MEXIT\n.*\n.* Ending current DCOVR requests. Issue a message for any unused\n.* entries in BXA_DCOVR tables.\n.END     ANOP\n         AIF   (&BXA_DCOVR EQ 0).MEND * No entries remain\n&I       SETA  0                       * I indexes BXA_DCOVR_xxx\n.LOOP1   ANOP  ,                       * For all current entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &BXA_DCOVR).LOOP1OK * At end: quit loop\n         MNOTE 4,'DCOVR for &BXA_DCOVR_LAB(&I) discarded'\n         AGO   .LOOP1\n.LOOP1OK ANOP\n&BXA_DCOVR SETA 0                      * Reset valid counter to 0\n.*\n.* Disable our DC-macro by replacing _DC by original DC-instruction\n         OPSYNS _DC                    * Reset DC-instruction\n.*\n.MEND    MEND\n./ ADD NAME=DEC      0100-20096-20096-0111-00171-00171-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Decrement a register\n.*\n&LABEL   DEC   &REG,                   * Register to be decremented    *\n               &COUNT                  * Amount to decrement or (reg)\n.*\n.* &REG   specifies the register to be decremented\n.* &COUNT specifies the amount by which the register is to be\n.*        decremented. May be specified as:\n.*      - Literal or symbolic value: must evaluate to a value between 0\n.*        and 4095 inclusive.\n.*      - (reg): must specify a valid register, 0 not allowed\n.*      - (value,reg): both of the above apply\n.*      - nothing: defaults to 1\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DEC                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare locals\n         LCLC  &_REG,&_COUNTR\n.*\n.* Check Reg parameter\n&_REG    SETC  '&REG'\n         AIF   (K'&REG NE 0).NOERR1A\n.ERR1A   MNOTE 8,'No register specified'\n.NOERR1A ANOP\n         AIF   ('&REG'(1,1) NE '(').NOERR1\n         AIF   (N'&REG EQ 0).ERR1B\n         AIF   (N'&REG GT 1).ERR1C\n&_REG    SETC  '&REG(1)'\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'No register specified within sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'More than 1 register specified within sublist'\n.NOERR1  ANOP\n.*\n.* Check Count parameter\n         AIF   (K'&COUNT EQ 0).NOERR2\n         AIF   ('&COUNT'(1,1) NE '(').NOERR2\n         AIF   (N'&COUNT EQ 0).ERR2A\n         AIF   (N'&COUNT GT 2).ERR2B\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'No amount to decrement specified in sublist'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Too many arguments specified in sublist'\n.NOERR2  ANOP\n.*\n.* If COUNT omitted, default to 1, using BCTR\n.* If COUNT specifies a register, use SR\n.* Otherwise generate a LA and a SR\n         AIF   (K'&COUNT EQ 0).BCTR\n         AIF   ('&COUNT'(1,1) NE '(').LIT\n         AIF   (N'&COUNT EQ 1).SR\n.*\n.* Decrement by a constant value, and a register. Make sure we don't\n.*  inadvertently corrupt a used register.\n&_COUNTR SETC 'R0'\n         AIF  ('&_REG' EQ '0').R1\n         AIF  ('&_REG' EQ '00').R1\n         AIF  ('&_REG' EQ 'R0').R1\n         AIF  ('&_REG' EQ 'R00').R1\n         AIF  ('&COUNT(2)' EQ '0').R1\n         AIF  ('&COUNT(2)' EQ '00').R1\n         AIF  ('&COUNT(2)' EQ 'R0').R1\n         AIF  ('&COUNT(2)' EQ 'R00').R1\n         AGO  .LA\n.R1      ANOP\n.* R0 is in use: put COUNT-value into R1\n&_COUNTR SETC 'R1'\n         AIF  ('&_REG' EQ '1').R15\n         AIF  ('&_REG' EQ '01').R15\n         AIF  ('&_REG' EQ 'R1').R15\n         AIF  ('&_REG' EQ 'R01').R15\n         AIF  ('&COUNT(2)' EQ '1').R15\n         AIF  ('&COUNT(2)' EQ '01').R15\n         AIF  ('&COUNT(2)' EQ 'R1').R15\n         AIF  ('&COUNT(2)' EQ 'R01').R15\n         AGO  .LA\n.R15     ANOP\n.* R0 and R1 both in use: put COUNT-value into R15\n&_COUNTR SETC 'R15'\n.LA      ANOP\n&LABEL   LA    &_COUNTR,&COUNT         * Load decrement value\n         SR    &_REG,&_COUNTR          * And decrement register\n         SR    &_REG,&COUNT(2)         * And decrement register\n         MEXIT\n.*\n.* Decrement by a constant value, make sure we don't inadvertently\n.*  corrupt register 0.\n.LIT     ANOP\n&_COUNTR SETC 'R0'\n         AIF  ('&_REG' EQ '0').LITR0\n         AIF  ('&_REG' EQ '00').LITR0\n         AIF  ('&_REG' EQ 'R0').LITR0\n         AIF  ('&_REG' EQ 'R00').LITR0\n         AGO  .LITLA\n.LITR0   ANOP\n.* R0 is to be decremented: put COUNT-value into R1\n&_COUNTR SETC 'R1'\n.LITLA   ANOP\n&LABEL   LA    &_COUNTR,&COUNT         * Load decrement value\n         SR    &_REG,&_COUNTR          * And decrement register\n         MEXIT\n.*\n.* Decrement with some register-held value\n.SR      ANOP\n&LABEL   SR    &_REG,&COUNT(1)         * Decrement register\n         MEXIT\n.*\n.BCTR    ANOP\n&LABEL   BCTR  &_REG,R0                * Decrement by 1\n.*\n.MEND    MEND\n./ ADD NAME=DISSECT  0100-20096-20096-0111-00211-00211-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro Dissects a parameter into its constituent parts\n.*\n&LABEL   DISSECT &TYPE,                * Type of parameter to dissect  *\n               &INPUT                  * Parameter to dissect\n.*\n.* TYPE must be one of the following:\n.*   - DB  = Displacement(Base)\n.*   - DLB = Displacement(Length,Base)\n.*   - DRB = Displacement(Register,Base)\n.*   - DXB = Displacement(indeX,Base)\n.*   - I   = Immediate\n.*   - M   = Mask\n.*   - R   = Register\n.* INPUT will normally be a parameter passed to a macro that replaces\n.*       some machine instruction. May have been pre-processed with\n.*       the SPLIT macro.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DISSECT                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_PRM(3)             * Output parameters\n         LCLC  &IN                     * Input string\n         LCLC  &OP1                    * Operand before (\n         LCLC  &OP2                    * First operand in ()\n         LCLC  &OP3                    * Second operand in ()\n         LCLC  &C                      * Single character from input\n         LCLA  &I,&J                   * Work var.\n         LCLA  &PAR                    * Nr of parentheses levels\n         LCLB  &STRING                 * On if scanning within quotes\n         LCLB  &FINDPAR                * On if parentheses present\n         LCLB  &SPLIT                  * On if parentheses hold a comma\n.*\n.* Determine what to do\n         AIF   ('&TYPE' EQ 'I').TYPEOK * Immediate operand\n         AIF   ('&TYPE' EQ 'M').TYPEOK * Mask operand\n         AIF   ('&TYPE' EQ 'R').TYPEOK * Register operand\n&FINDPAR SETB  1                       * Parentheses may be present\n         AIF   ('&TYPE' EQ 'DB').TYPEOK * Displacement(Base)\n&SPLIT   SETB  1                       * Two arguments in parentheses\n         AIF   ('&TYPE' EQ 'DLB').TYPEOK * Displacement(Length,Base)\n         AIF   ('&TYPE' EQ 'DRB').TYPEOK * Displacement(Register,Base)\n         AIF   ('&TYPE' EQ 'DXB').TYPEOK * Displacement(indeX,Base)\n.ERR1    MNOTE 8,'Invalid TYPE specified on DISSECT macro'\n         MEXIT ,                       *\n.TYPEOK  ANOP  ,                       *\n.*\n.* Set up for processing\n         AIF   (K'&INPUT EQ 0).EXIT    * No input: do nothing\n&IN      SETC  '&INPUT'                *\n.*\n.* Before the actual dissection starts embedded comments - if any -\n.* must be removed.\n&I       SETA  ('&IN' FIND ' ')        * Search embedded space\n         AIF   (&I EQ 0).NOCOMMNT      * No space: no comments\n.LOOP1   ANOP  ,                       * Search backward\n&I       SETA  ('&IN' FIND ''' ')      * Find quote or space\n         AIF   (&I EQ 0).NOCOMMNT      * No comment found: done\n&C       SETC  '&IN'(&I,1)             * Extract character found\n         AIF   ('&C' EQ '''').LOOP1QU  * Found a quote\n.* Must be a space\n         AIF   (NOT &STRING).LOOP1OK   * Found start of comment\n         AGO   .LOOP1NX                * Go continue search\n.LOOP1QU ANOP  ,                       * Handle quote\n&STRING  SETB  (&STRING XOR 1)         * Flip string status\n.LOOP1NX ANOP  ,                       * Continue search\n         AIF   (&I EQ K'&IN).NOCOMMNT  * Trailing char: no comment fnd\n&IN      SETC  '&IN'(&I+1,*)           * Remove treated text\n         AGO   .LOOP1                  *\n.LOOP1OK ANOP  ,                       * Leading space found\n&I       SETA  K'&INPUT-K'&IN          * Nr of chars before comment\n&IN      SETC  '&INPUT'(1,&I)          * Extract relevant input\n.NOCOMMNT ANOP ,                       *\n.*\n.* First we must extract the OP1 field. This field starts at position 1\n.* and ends when either:\n.* - the input field is exhausted\n.* - If FINDPAR is on: a left parenthesis is found, which is not\n.*   preceded by an arithmetic operator (+-*/)\n.*\n         AIF   (&FINDPAR).FINDPAR      * Need to look for a ( ??\n.NOPAR   ANOP  ,                       * Parentheses do not matter\n&OP1     SETC  '&IN'                   * Just copy the argument\n.*\n.* If register is specified as (reg), remove the parentheses\n         AIF   ('&TYPE' NE 'R').EXIT   * Only for register operand\n         AIF   ('&OP1'(1,1) NE '(').EXIT * Must start with left par\n         AIF   ('&OP1'(K'&OP1,1) NE ')').EXIT * And end with right par\n&OP1     SETC  '&OP1'(2,K'&OP1-2)      * Remove parentheses\n         AGO   .EXIT                   * And be done with it\n.*\n.* If last character is not a closing parenthesis, only the\n.* displacement field is present, and no action is required.\n.FINDPAR ANOP  ,                       * Find parentheses if present\n         AIF   ('&IN'(K'&IN,1) NE ')').NOPAR * Displacement only?\n.*\n.* There are parentheses which may be relevant. Search backward to\n.* find the matching opening parenthesis.\n&PAR     SETA  0                       * Level of parentheses\n&STRING  SETB  0                       * No string\n&I       SETA  K'&IN+1                 * Point beyond string-end\n.LOOP2   ANOP  ,                       * Search backward\n&I       SETA  &I-1                    * Point previous character\n         AIF   (&I LT 1).LOOP2ERR      * No matching parenthesis found\n&C       SETC  '&IN'(&I,1)             * Extract single character\n         AIF   ('&C' EQ '(').LOOP2LP   * Found a left parenthesis\n         AIF   ('&C' EQ ')').LOOP2RP   * Found a right parenthesis\n         AGO   .LOOP2                  *\n.LOOP2ERR MNOTE 8,'Non-matching parentheses in operand'\n         MEXIT ,                       *\n.LOOP2RP ANOP  ,                       * Handle right parentheses\n&PAR     SETA  &PAR+1                  * Add 1 to level of parentheses\n         AGO   .LOOP2                  *\n.LOOP2LP ANOP  .                       * Handle left parentheses\n&PAR     SETA  &PAR-1                  *\n         AIF   (&PAR GT 0).LOOP2       * Not all levels closed: contin.\n.* Found matching opening parenthesis at &I: check preceding character\n         AIF   (&I LE 1).NOPAR         * Displacement only?\n&J       SETA  &I-1                    * Point preceding character\n&C       SETC  '&IN'(&J,1)             * Extract preceding character\n&J       SETA  ('+-*/' FIND '&C')      * This is an arithmetic term?\n         AIF   (&J NE 0).NOPAR         * Must be part of displacement\n.* Ok: extract displacement into OP1\n&OP1     SETC  '&IN'(1,&I-1)           * Displ. up to left parenthesis\n&IN      SETC  '&IN'(&I+1,*)           * Keep remainder for len/base\n&IN      SETC  '&IN'(1,K'&IN-1)        * But remove outer parentheses\n.*\n.* If SPLIT is off the remainder goes into OP2, otherwise it must be\n.* split into OP2 and OP3.\n         AIF   (&SPLIT).SPLIT          * Need to split?\n.NOSPLIT ANOP  ,                       * Nothing to split\n&OP2     SETC  '&IN'                   * Copy remainder\n         AGO   .EXIT                   * And be done with it\n.*\n.* Check for a comma: if not present, there's nothing to split!\n.SPLIT   ANOP  ,                       * Try to split IN to OP2 and OP3\n&I       SETA  ('&IN' FIND ',')        * Locate comma in string\n         AIF   (&I EQ 0).NOSPLIT       *\n         AIF   (&I EQ 1).NOOP2         * OP2 omitted?\n&OP2     SETC  '&IN'(1,&I-1)           * OP2 up to & excluding comma\n.NOOP2   ANOP  ,                       *\n         AIF   (&I EQ K'&IN).NOOP3     * OP3 omitted?\n&OP3     SETC  '&IN'(&I+1,*)           * OP3 follows comma\n.NOOP3   ANOP  ,                       *\n.*\n.* Exit point: copy result to global variables\n.EXIT    ANOP  ,                       *\n&BXA_PRM(1) SETC '&OP1'                *\n&BXA_PRM(2) SETC '&OP2'                *\n&BXA_PRM(3) SETC '&OP3'                *\n.*\n.MEND    MEND\n./ ADD NAME=DO       0100-20096-20096-0111-00340-00340-00000-BIXSMAC 31\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: DO\n.* Combines with LEAVE and ENDDO to repeatedly execute code-blocks\n.*\n&LABEL   DO    ,                       * SYSLIST contains condition\n.*\n.* Syntax:\n.* 1) DO WHILE,condition\n.* 2) DO UNTIL,condition\n.* 3) DO count                         * Literal, field, or (reg)\n.* 4) DO                               * For use with LEAVE macro\n.* condition: as in IF macro\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DO                     * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_USED_REGS(16)      * Use status of registers\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_DO(5)          * DO loop info\n         GBLA  &BXA_STK_LVL(5)         * Levels\n         GBLC  &BXA_STK_LBL(5)         * Labels\n         GBLC  &BXA_STK_CND(5)         * Conditions\n         GBLC  &BXA_STK_CLB(5)         * Condition labels\n         GBLC  &BXA_STK_USE(5)         * USEd registers\n         GBLA  &BXA_NUMVAL             * Retvalue from CHKLIT\n         LCLC  &_LABEL                 * Label to start loop\n         LCLC  &ARGS                   * SYSLIST as a string\n         LCLC  &TYPE                   * Type of syslist(1) parameter\n         LCLC  &REG                    * Register number\n         LCLC  &FLD                    * Field or literal for count\n         LCLC  &USEDRG                 * Used register name\n         LCLC  &LIT                    * Usable literal designation\n         LCLA  &LVALUE                 * Value of literal\n         LCLA  &I                      * Stack pointer\n.*\n.* Check LABEL parameter\n&_LABEL  SETC  '&LABEL'                * Copy label\n         AIF   (K'&LABEL GT 0).LABOK   * Label was specified?\n&_LABEL  SETC  '_DO_&SYSNDX'           * No: generate one\n.LABOK   ANOP\n.*\n.* Check First parameter\n         AIF   (N'&SYSLIST EQ 0).DOUNTIL * No args: simple DO\n         AIF   (N'&SYSLIST EQ 1 AND K'&SYSLIST(1) EQ 0).DOUNTIL\n         AIF   (N'&SYSLIST EQ 2 AND K'&SYSLIST(1) EQ 0 AND K'&SYSLIST(2*\n               ) EQ 0).DOUNTIL\n         AIF   ('&SYSLIST(1)' EQ 'WHILE').NOERR1\n         AIF   ('&SYSLIST(1)' EQ 'UNTIL').NOERR1\n         AGO   .DOCOUNT\n.NOERR1  ANOP\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST LT 2).ERR2\n         AIF   (K'&SYSLIST(2) EQ 0).ERR2\n         AGO   .NOERR2\n.ERR2    MNOTE 8,'No condition specified'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* Build ARGS from &SYSLIST\n&I       SETA  1                       * Skip WHILE/UNTIL\n.LOOP1   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AGO   .LOOP1                  * And go process next entry\n.LOOP1OK ANOP\n&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,\n.*\n.* Select code generation logic\n         AIF   ('&SYSLIST(1)' EQ 'WHILE').DOWHILE\n         AIF   ('&SYSLIST(1)' EQ 'UNTIL').DOUNTIL\n         MNOTE 12,'Internal error'\n         MEXIT\n.*\n.* Generate embedded IF statement for DO WHILE\n.DOWHILE ANOP  ,\n&I       SETA  &BXA_STK                * Copy current stack pointer\n&_LABEL  IF    &ARGS                   *\n         AIF   (&I EQ &BXA_STK).MEND   * No new stack entry!\n.*\n.* Modify stack to reflect DO in stead of IF\n&I       SETA  &BXA_STK                * Point to current stack entry\n&BXA_STK_OP(&I) SETC 'DOWHILE'         * Change IF into DOWHILE/DOUNTIL\n&BXA_STK_DO(&I) SETC '&_LABEL'         * Put loopback label into table\n&BXA_STK_CND(&I) SETC ''               * Wipe condition in table\n&BXA_STK_CLB(&I) SETC ''               *  and condition label\n&BXA_STK_USE(&I) SETC ''               *  and USEd count register\n         MEXIT ,\n.*\n.* Generate redo label for DO or DO UNTIL\n.DOUNTIL ANOP  ,\n&_LABEL  LABEL ,                       *\n.*\n.* Add DO or DOUNTIL to the stack\n&I       SETA  &BXA_STK                * Point to current stack entry\n&LVL     SETA  1                       * New level is 1\n         AIF   (&I EQ 0).LVLOK         *   if stack is empty\n&LVL     SETA  &BXA_STK_LVL(&I)+1      * Otherwise: increment current\n.LVLOK   ANOP  ,                       *            level\n.*\n&I       SETA  &I+1                    * Point next stack entry\n&BXA_STK_OP(&I)  SETC 'DO&SYSLIST(1)'  * Put DO/DOUNTIL on the stack\n&BXA_STK_LBL(&I) SETC ''               * End-of-loop created by LEAVE\n&BXA_STK_LVL(&I) SETA &LVL             * Put level into table\n&BXA_STK_DO(&I)  SETC '&_LABEL'        * Put DO label into table\n&BXA_STK_CND(&I) SETC '&ARGS'          * Put condition into table\n&BXA_STK_CLB(&I) SETC ''               * And wipe condition label\n&BXA_STK_USE(&I) SETC ''               *     and USEd loop counter\n&BXA_STK         SETA &I               * And update stack pointer\n         MEXIT  ,                      *\n.*\n.* Do with count option\n.DOCOUNT ANOP  ,                       *\n&LABEL   LABEL ,                       *\n&_LABEL  SETC  '_DO_&SYSNDX'           * Generate internal label\n&USEDRG  SETC  ''                      * No loop counter USEd\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST EQ 1).NOERR3\n.ERR3    MNOTE 4,'More than 1 argument specified: remainder ignored'\n.NOERR3  ANOP\n.*\n.* Check type of argument: literal, field, or register\n&FLD     SETC  '&SYSLIST(1)'           * Extract field or literal\n&REG     SETC  '&SYSLIST(1)'           * Assume it is a register name\n         AIF   ('&FLD'(1,1) EQ '(').DOCTRG1 *\n         AIF   ('&FLD'(1,1) NE '=').SKIPEQ  *\n         AIF   (K'&FLD LT 2).SKIPEQ    * Too short to remove = sign\n&FLD     SETC  '&FLD'(2,*)             * Remove leading = sign\n.SKIPEQ  ANOP  ,                       *\n         CHKLIT &FLD,ALT=YES           * A valid number?\n         AIF   (&BXA_RC EQ 0).DOCT0    * It is a valid literal\n         AIF   (&BXA_RC EQ 4).DOCT4    * It is a valid literal\n         CHKREG &FLD,g                 * A valid register?\n         AIF   (&BXA_RC LT 8).DOCTRG2  * Ok: use count in register\n         AGO   .DOCTALC                * Go allocate a register\n.DOCT0   ANOP  ,                       * A valid literal number\n&LIT     SETC  '&FLD'                  * Copy specified literal\n&LVALUE  SETA  &BXA_NUMVAL             * Save value of literal\n         AIF   (&LVALUE LE 0).ERR4D    * Not supported\n         AGO   .DOCTALC                * Go allocate count register\n.DOCT4   ANOP  ,                       * A valid literal number\n&LIT     SETC  '&BXA_NUMVAL'           * Create correct literal\n&LVALUE  SETA  &BXA_NUMVAL             * Save value of literal\n         AIF   (&LVALUE LE 0).ERR4D    * Not supported\n.DOCTALC ANOP  ,                       * Allocate a count register\n         EQUREG ,                      * Assign a count register\n         AIF   (&BXA_RC GE 8).ERR4A    * Issue error message\n&REG     SETC  'R'.'&BXA_NUMVAL'       * Create register name\n         USE   &REG                    * Set register in use\n&USEDRG  SETC  '&REG'                  * And save name USEd\n.*\n.* Determine how to load the register\n         AIF   (K'&LIT GT 0).DOCTLIT   * Literal value\n&TYPE    SETC  T'&FLD                  * Extract parameter type\n         AIF   ('&TYPE' EQ '0').DOCTEQ * EQUated literal\n&I       SETA  L'&FLD                  * Length of field\n         AIF   (&I GT 4).ERR4E         * Field too long\n         AIF   ('&TYPE' EQ 'B').DOCTB  * Binary\n         AIF   ('&TYPE' EQ 'F').DOCTF  * Fullword\n         AIF   ('&TYPE' EQ 'G').DOCTG  * Fixed point\n         AIF   ('&TYPE' EQ 'H').DOCTH  * Halfword\n         AIF   ('&TYPE' EQ 'X').DOCTX  * Hexadecimal\n&ARGS    SETC  (DOUBLE '&SYSLIST(1)')  *\n         MNOTE 8,'Field &ARGS is of unsupported type: &TYPE'\n         AIF   (K'&USEDRG EQ 0).MEND\n         DROP  &USEDRG\n         MEXIT ,                       *\n.*\n.DOCTEQ  ANOP  ,                       * EQUated literal symbol\n&LIT     SETC  '&FLD'                  * Designate literal by name\n&LVALUE  SETA  L'&FLD                  * Length holds value\n.*\n.DOCTLIT ANOP  ,                       * Load a literal\n         AIF   (&LVALUE LT 4096).DOCTLLA * Literal LA\n         AIF   (&LVALUE LT 32768).DOCTLLH * Literal LH\n         L     &REG,=F'&LIT'           * Set up count register\n         AGO   .DOCTLAB                * Go create internal label\n.DOCTLLA ANOP  ,                       *\n         LA    &REG,&LIT               * Set up count register\n         AGO   .DOCTLAB                * Go create internal label\n.DOCTLLH ANOP  ,                       *\n         LH    &REG,=H'&LIT'           * Set up count register\n         AGO   .DOCTLAB                * Go create internal label\n.*\n.DOCTB   ANOP  ,                       *\n         AIF   (&I EQ 1).DOCTLC        * Load character\n         AIF   (&I EQ 2).DOCTLHU       * Load halfword unaligned\n         AIF   (&I EQ 3).DOCTLC3       * Load three bytes\n         AGO   .DOCTLU                 * Load unaligned\n.*\n.DOCTF   ANOP  ,                       *\n         L     &REG,&FLD               * Set up count register\n         AGO   .DOCTLAB                * Go create internal label\n.*\n.DOCTG   ANOP  ,                       *\n         AIF   (&I EQ 1).DOCTLC        * Load character\n         AIF   (&I EQ 2).DOCTLHU       * Load halfword unaligned\n         AIF   (&I EQ 3).DOCTLC3       * Load three bytes\n         AGO   .DOCTLU                 * Load unaligned\n.*\n.DOCTH   ANOP  ,                       *\n         LH    &REG,&FLD               * Set up count register\n         AGO   .DOCTLAB                * Go create internal label\n.*\n.DOCTX   ANOP  ,                       *\n         AIF   (&I EQ 1).DOCTLC        * Load character\n         AIF   (&I EQ 2).DOCTLHU       * Load halfword unaligned\n         AIF   (&I EQ 3).DOCTLC3       * Load three bytes\n         AGO   .DOCTLU                 * Load unaligned\n.*\n.DOCTLC  ANOP  ,                       *\n         LC    &REG,&FLD               * Set up count register\n         AGO   .DOCTLAB                * Go create internal label\n.DOCTLHU ANOP  ,                       *\n         LTHU  &REG,&FLD               * Set up count register\n         AGO   .DOCTLAB                * Go create internal label\n.DOCTLC3 ANOP  ,                       *\n         LTA24 &REG,&FLD,YYYN,         * Set up count register         *\n               RELOAD=NO               *\n         AGO   .DOCTLAB                * Go create internal label\n.DOCTLU  ANOP  ,                       *\n         LT    &REG,&FLD               * Set up count register\n         AGO   .DOCTLAB                * Go create internal label\n.*\n.* A register was specified\n.DOCTRG1 ANOP  ,                       *\n&REG     SETC  '&SYSLIST(1,1)'         * Extract register name\n         CHKREG &REG,g                 * A valid register?\n         AIF   (&BXA_RC GE 8).ERR4C    * Invalid register\n.DOCTRG2 ANOP  ,                       *\n&I       SETA  &BXA_NUMVAL+1           * Create register index\n         AIF   (&I EQ 1).ERR4B         * Cannot use R0\n         AIF   (&BXA_USED_REGS(&I)).DOCTLAB * Skip USE statement\n         USE   &REG                    * Set register in use\n&USEDRG  SETC  '&REG'                  * And save name USEd\n.*\n.* Generate redo label for DO count\n.DOCTLAB ANOP  ,                       *\n&_LABEL  LABEL ,                       *\n.*\n.* Add DOCOUNT to the stack\n&I       SETA  &BXA_STK                * Point to current stack entry\n&LVL     SETA  1                       * New level is 1\n         AIF   (&I EQ 0).LVLOKC        *   if stack is empty\n&LVL     SETA  &BXA_STK_LVL(&I)+1      * Otherwise: increment current\n.LVLOKC  ANOP  ,                       *            level\n.*\n&I       SETA  &I+1                    * Point next stack entry\n&BXA_STK_OP(&I)  SETC 'DOCOUNT'        * Put DOCOUNT on the stack\n&BXA_STK_LBL(&I) SETC ''               * End-of-loop created by LEAVE\n&BXA_STK_LVL(&I) SETA &LVL             * Put level into table\n&BXA_STK_DO(&I)  SETC '&_LABEL'        * Put DO label into table\n&BXA_STK_CND(&I) SETC '&REG'           * Put count register in table\n&BXA_STK_CLB(&I) SETC ''               * And wipe condition label\n&BXA_STK_USE(&I) SETC '&USEDRG'        * Insert USEd register name\n&BXA_STK         SETA &I               * And update stack pointer\n         MEXIT  ,                      *\n.*\n.ERR4A   ANOP  ,\n         MNOTE 8,'Cannot assign a count register'\n         MEXIT ,\n.ERR4B   ANOP  ,\n         MNOTE 8,'Cannot use R0 for a count register'\n         MEXIT ,\n.ERR4C   ANOP  ,\n&ARGS    SETC  (DOUBLE '&SYSLIST(1)')\n         MNOTE 8,'&ARGS is not a valid general purpose register'\n         MEXIT ,\n.ERR4D   ANOP  ,\n         MNOTE 8,'A loop count of less than 1 is not supported'\n         MEXIT ,\n.ERR4E   ANOP  ,\n         MNOTE 8,'Size of loop count field exceeds 4 bytes'\n         AIF   (K'&USEDRG EQ 0).MEND\n         DROP  &USEDRG\n         MEXIT\n.*\n.MEND    MEND\n./ ADD NAME=DROP     0100-20096-20096-0111-00182-00182-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's DROP statement\n.*\n         DROP  ,                       * Reg(s) and/or label(s)\n.*\n.* &SYSLIST specifies the labels and/or registers to drop.\n.*          if empty all registers will be dropped.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DROP                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15\n         GBLB  &SP_SHOWALL             * SHOWALL option\n         GBLC  &BXA_USELBL(50)         * Used labels ...\n         GBLA  &BXA_USEREG(50)         *   and associated registers\n         GBLC  &BXA_USEFLD(50)         *   and base field names\n         GBLA  &BXA_USENDX0(5)         * Low valid pointers\n         GBLA  &BXA_USENDX1(5)         * High valid pointers\n         GBLA  &BXA_USENDX             * Pointer for USENDX0/USENDX1\n         LCLA  &N                      * Pointer for BXA_USE...\n         LCLA  &REG                    * Register number\n         LCLC  &ARG                    * 1 argument from SYSLIST\n         LCLC  &ARGS                   * Arguments from SYSLIST\n         LCLA  &I                      * Index into &SYSLIST\n         LCLA  &J                      * Nr of non-empty arguments\n         LCLA  &R                      * Index into &BXA_USED_REGS\n         LCLC  &USEDREGS               * Used regs on labeled USING\n         LCLC  &USEDREG                * 1 index from USEDREGS\n.*\n.* Include DROP_REG on first invocation\n         DROP0\n.*\n.* Check base registers to be dropped (if any)\n         AIF   (N'&SYSLIST EQ 0).DROPALL * Drop for all USINGs?\n.*\n.* Check all arguments in SYSLIST, add validated ones to &ARGS\n&I       SETA  0                       * Check SYSLIST arguments\n.LOOP1   ANOP  ,                       * For all remaining arguments\n&I       SETA  &I+1                    * Point next argument\n         AIF   (&I GT N'&SYSLIST).NOERR1 * At end: all args checked ok\n&ARG     SETC  '&SYSLIST(&I)'          * Extract argument from SYSLIST\n         AIF   (K'&ARG EQ 0).LOOP1     * Skip omitted argument\n&J       SETA  &J+1                    * Increment nr of args checked\n         CHKREG &ARG                   * A register was specified?\n         AIF   (&BXA_RC EQ 8).LOOP1LBL * No: check for known labels\n         AIF   (&BXA_RC EQ 0).LOOP1REG * Ok: defined register\n.*\n.* &BXA_RC = 4: a literal number 0-15 was specified\n&REG     SETA  &ARG                    * Extract register number\n&R       SETA  &REG+1                  * Add 1 to obtain index\n         DROP_REG ,&R                  * Remove from USE... tables\n         AIF   (&BXA_RC EQ 4).LOOP1    * Register USE: omit from ARGS\n&ARGS    SETC  '&ARGS'.','.'&ARG'      * Add entry to ARGS\n         AGO   .LOOP1                  * and go check next argument\n.*\n.* NUMVAL = 0: a defined register was specified\n.LOOP1REG ANOP  ,                      * Check EQUated register\n         GBLC  &(BXA_REGT_&ARG)        * Declare type field for reg\n         GBLA  &(BXA_REGN_&ARG)        * Declare number field for reg\n&REG     SETA  &(BXA_REGN_&ARG)        * Extract register number\n         AIF   ('&(BXA_REGT_&ARG)' NE 'g').ERR1A * Invalid reg type\n&R       SETA  &REG+1                  * Increment to obtain index\n         DROP_REG ,&R                  * Remove from USE... tables\n         AIF   (&BXA_RC EQ 4).LOOP1    * Register USE: omit from ARGS\n&ARGS    SETC  '&ARGS'.','.'&ARG'      * Add entry to ARGS\n         AGO   .LOOP1\n.*\n.* RC = 8: a label must have been specified, cannot be a register USE\n.LOOP1LBL ANOP\n&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Search tables for entries\n.LOOP2   ANOP  ,                       *    with the specified label\n&N       SETA  &N+1                    *    to mark the regs available.\n.LOOP2NI ANOP  ,                       * Loop with No Increment\n         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP2OK * At end: done\n         AIF   ('&BXA_USELBL(&N)' NE '&ARG').LOOP2 * Skip mismatch\n&R       SETA  &BXA_USEREG(&N)         * Obtain index\n         DROP_REG &ARG,&R,&N           * Remove this entry from tables\n         AGO   .LOOP2NI                * Loop, no increment: last entry*\n                                       *   moved here by DROP_REG\n.LOOP2OK ANOP  ,\n&ARGS    SETC  '&ARGS'.','.'&ARG'      * Add entry to ARGS\n         AGO   .LOOP1                  * Process next SYSLIST entry\n.*\n.ERR1A   MNOTE 8,'Specified argument &SYSLIST(&I) is not a general purp*\n               ose register'\n         AGO   .LOOP1\n.NOERR1  ANOP\n.*\n.* Remove leading comma from ARGS\n         AIF   (&J EQ 0).DROPALL       * Only commas supplied?\n         AIF   (K'&ARGS EQ 0).ARGSOK   * Any non-register USEs?\n&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma\n.ARGSOK  ANOP\n.*\n.* Rebuild BXA_USED_REGS from BXA_USEREG table\n.* Skip any USING for PSA,R0\n&BXA_USED_REGS(1) SETB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Search tables to mark\n.LOOP3   ANOP  ,                       *    all used registers\n&N       SETA  &N+1                    *    unavailable.\n         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP3OK * At end: done\n&R       SETA  &BXA_USEREG(&N)         * Obtain index\n         AIF   (&R EQ 1 AND '&BXA_USEFLD(&N)' EQ 'PSA').LOOP3\n&BXA_USED_REGS(&R) SETB 1              * Set designated register in use\n         AGO   .LOOP3                  *\n.LOOP3OK ANOP  ,                       *\n.*\n.* Generate _DROP statement, unless only register USEs were specified\n         AIF   (K'&ARGS EQ 0).REPORT\n         _DROP &ARGS\n         AGO   .REPORT\n.*\n.* Generate _DROP statement (no arguments)\n.DROPALL ANOP  ,   reg 0 1 2 3 4 5 6 7 8 9 A B C D E F dropped\n&BXA_USED_REGS(1) SETB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n&BXA_USENDX1(&BXA_USENDX) SETA &BXA_USENDX0(&BXA_USENDX)\n         _DROP\n.*\n.REPORT  ANOP  ,                       * Report using status\n         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested\n         USEDREGS\n.*\n.MEND    MEND\n./ ADD NAME=DROP0    0100-20096-20096-0111-00116-00116-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro creates the DROP_REG macro\n.*\n         DROP0 ,                       *\n.*\n.* Declare variables\n         GBLB  &BXA_DROP               * Macro expanded before?\n.*\n.* Include DROP_REG on first invocation\n         AIF   (&BXA_DROP).MEND\n&BXA_DROP SETB 1\n         PUSH  PRINT,NOPRINT\n         PRINT OFF,NOPRINT\n.*\n.* Following macro removes a single entry from the\n.* &BXA_USELBL, &BXA_USEREG, and &BXA_USEFLD tables\n         MACRO\n         DROP_REG &LAB,&NDX,&I=0\n.*\n.* &LAB is label to search/remove\n.* &NDX is register index to search/remove\n.* &I   is index in BXA_USE... tables\n.* Returncode will be set as follows:\n.* 0 - all information removed, no register USE\n.* 4 - information removed for a register USE\n.* 8 - no found: no information removed\n.*\n         GBLC  &BXA_USELBL(50)         * Used labels ...\n         GBLA  &BXA_USEREG(50)         *   and associated registers\n         GBLC  &BXA_USEFLD(50)         *   and associated base fields\n         GBLA  &BXA_USENDX0(5)         * Low valid pointers\n         GBLA  &BXA_USENDX1(5)         * High valid pointers\n         GBLA  &BXA_USENDX             * Pointer for USENDX0/USENDX1\n         GBLA  &BXA_RC                 * returncode\n         LCLA  &N                      * Index for BXA_USE...\n         LCLA  &R                      * Register index value\n         LCLC  &REG                    * Register\n.*\n.* If index not specified: find entry for register specified\n.* Skip any entry for USING PSA,R0 (doesnt use reg & cannot be dropped)\n&N       SETA  &I\n         AIF   (&N GT 0).LOOP1OK\n.LOOP1   ANOP  ,\n&N       SETA  &N+1\n         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP1NF\n         AIF   ('&BXA_USELBL(&N)' NE '&LAB').LOOP1\n         AIF   (&BXA_USEREG(&N) NE &NDX).LOOP1\n         AIF   (&NDX EQ 1 AND '&BXA_USEFLD(&N)' EQ 'PSA').LOOP1\n         AGO   .LOOP1OK\n.LOOP1NF ANOP\n&N       SETA  &NDX-1                  * Obtain register number\n&REG     SETC  'R&N'\n         MNOTE 8,'No unlabeled USING active for &REG'\n&BXA_RC  SETA  8\n         MEXIT\n.*\n.LOOP1OK ANOP  ,                       * &N now points removable entry\n.* Determine returncode value before removing entry: 0 or 4\n&BXA_RC  SETA  0                       * Found entry: rc=0\n         AIF   ('&BXA_USEFLD(&N)' NE '').RCOK * Except for:\n&BXA_RC  SETA  4                       * Register USE: rc=4\n.RCOK    ANOP\n.* Overwrite entry with current last in table, then remove last\n&R       SETA  &BXA_USENDX1(&BXA_USENDX) * Point last entry\n         AIF   (&N EQ &R).NOCOPY       * Copy to self not useful\n&BXA_USELBL(&N) SETC '&BXA_USELBL(&R)' * Copy label\n&BXA_USEREG(&N) SETA &BXA_USEREG(&R)   * Copy register\n&BXA_USEFLD(&N) SETC '&BXA_USEFLD(&R)' * Copy base field/location\n.NOCOPY  ANOP  ,                       * Copy done\n&BXA_USENDX1(&BXA_USENDX) SETA &R-1    * Decrement last valid\n.*\n.MEND    MEND\n         POP   PRINT,NOPRINT\n.*\n.MEND    MEND\n./ ADD NAME=DS       0100-20096-20096-0111-00150-00150-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's DS statement\n.*\n&LABEL   DS    ,                       * Arguments in &SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DS                     * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_DS_LASTLAB        * Org. label of last labeled DS\n         GBLA  &BXA_DS_OFFSET         * Nr of unlab'd DSs since LASTLAB\n         GBLA  &BXA_DSOVR             * Ptr to last valid\n         GBLC  &BXA_DSOVR_LAB(50)     * Labels\n         GBLC  &BXA_DSOVR_PRM(50)     * Parameter strings\n         GBLC  &BXA_DSOVR_NAM(50)     * New names\n         LCLA  &I                     * Index\n         LCLC  &_LABEL                *\n         LCLC  &PRMS                  *\n         LCLB  &RESET                 * On if last entry removed\n         LCLC  &LAB                   * LABEL used to search DSOVR_LAB\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST EQ 0).ERR1A\n         AIF   (K'&SYSLIST(1) EQ 0).ERR1A\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'Missing operand(s)'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Set up default values\n&_LABEL  SETC  '&LABEL'                * Copy fieldname\n.LOOP1   ANOP  ,                       * Collect all parameters\n&I       SETA  &I+1                    * into variable PRMS\n         AIF   (&I GT N'&SYSLIST).LOOP1OK\n&PRMS    SETC  '&PRMS'.','.'&SYSLIST(&I)'\n         AGO   .LOOP1\n.LOOP1OK ANOP  ,\n&PRMS    SETC  '&PRMS'(2,*)            * PRMS cannot be empty\n.*\n.* Determine values relating to unlabeled DS-statements\n         AIF   (K'&_LABEL EQ 0).CRTLAB * DS is labeled?\n&BXA_DS_OFFSET SETA 0                  * Reset unlabeled count\n&BXA_DS_LASTLAB SETC '&_LABEL'         * Set last-used original label\n&LAB     SETC  '&_LABEL'               * Use this label for lookup\n         AGO   .LABOK\n.CRTLAB  ANOP  ,                       * Create LABEL+nnn to identify\n&BXA_DS_OFFSET SETA &BXA_DS_OFFSET+1   * Increment unlabeled count\n&LAB     SETC  '&BXA_DS_LASTLAB'.'+'.'&BXA_DS_OFFSET' * Create label\n.LABOK   ANOP  ,\n.*\n.* Check for overrides from DSOVR\n&I       SETA  0                       * I indexes BXA_DSOVR_xxx\n.LOOP2   ANOP  ,                       * Search entry\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &BXA_DSOVR).LOOP2NF * At end: not found\n         AIF   ('&BXA_DSOVR_LAB(&I)' NE '&LAB').LOOP2 *Skip mismatch\n.*\n.* Found a match: set up replacement variables\n         AIF   (K'&BXA_DSOVR_NAM(&I) EQ 0).NOLAB\n&_LABEL  SETC  '&BXA_DSOVR_NAM(&I)'    * NAM contains new field name\n         AIF   ('&_LABEL' NE '*NONAME').NOLAB\n&_LABEL  SETC  ''                      * Remove label for this DS\n.NOLAB   ANOP\n.* Override parameter string?\n         AIF   (K'&BXA_DSOVR_PRM(&I) EQ 0).NOPRM\n&PRMS    SETC  '&BXA_DSOVR_PRM(&I)'    * Pick up override value\n.NOPRM   ANOP\n.*\n.* Remove the entry from the tables\n.* Replace current entry by the last-valid,\n.*    then decrement last-valid pointer\n         AIF   (&I EQ &BXA_DSOVR).DECR * Skip copy if current=last\n&BXA_DSOVR_LAB(&I) SETC '&BXA_DSOVR_LAB(&BXA_DSOVR)'\n&BXA_DSOVR_PRM(&I) SETC '&BXA_DSOVR_PRM(&BXA_DSOVR)'\n&BXA_DSOVR_NAM(&I) SETC '&BXA_DSOVR_NAM(&BXA_DSOVR)'\n.DECR    ANOP  ,                       * Decrement last-valid pointer\n&BXA_DSOVR SETA &BXA_DSOVR-1           *    by one\n         AIF   (&BXA_DSOVR NE 0).LOOP2NF * Stack not empty\n&RESET   SETB  1                       * Last entry just removed\n.*\n.* Generate _DS statement with overrides, unless *SUPPRESS specified\n.LOOP2NF ANOP  ,                       *\n         AIF   ('&PRMS' EQ '*SUPPRESS').SUPPRESS\n.*\n&_LABEL  _DS   &PRMS\n.SUPPRESS ANOP ,\n.*\n.* If overrides stack has just been emptied, then this macro must be\n.* disabled by replacing the _DS-intruction with the original DS-instr.\n         AIF   (NOT &RESET).MEND\n         OPSYNS _DS                    * Revert to DS-instruction\n.*\n.MEND    MEND\n./ ADD NAME=DSOVR    0100-20096-20096-0111-00185-00185-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro handles the stack of DS modifications for use by the\n.* DS macro, which replaces the assembler's DS instruction\n.*\n&LABEL   DSOVR &OPT,                   * Parameters are in &SYSLIST    *\n               &NEWNAM                 * New name for *NEWNAME option\n.*\n.* &LABEL mandatory, except when &OPT=*END\n.*        To specify an override for an unlabeled DS, specify the label\n.*        of the last preceding labeled DS and the relative number of\n.*        the unlabeled statement to be overridden. E.g.: LABEG+3,\n.*        would  mean the third unlabeled DS after the DS with label\n.*        LABEG.\n.* &OPT   specifies one of the following:\n.*        *END cancels all outstanding DSOVR requests\n.*        *SUPPRESS suppresses the definition of &LABEL\n.*        *NEWNAME changes the DS for &LABEL into one for &NEWNAM,\n.*              i.e. Specify *NEWNAME,newname,parmstring\n.*        Other values override the DS-operand string\n.* &NEWNAM Specifies the new name, if &OPT=*NEWNAME\n.*        &NEWNAM may optionally be followed by a parameter string\n.*        If &NEWNAM specifies *NONAME the DS will become unlabeled\n.* &SYSLIST Specifies an operand string, which replaces the complete\n.*        operand string of the original DS statement.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC DSOVR                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_DSOVR              * Ptr to last valid\n         GBLC  &BXA_DSOVR_LAB(50)      * Labels\n         GBLC  &BXA_DSOVR_PRM(50)      * Parm strings\n         GBLC  &BXA_DSOVR_NAM(50)      * New names\n         LCLA  &I                      * Index\n         LCLC  &PRMS                   * Parameter string\n.*\n.* Check LABEL parameter\n         AIF   (K'&LABEL GT 0).NOERR1\n         AIF   ('&OPT' EQ '*END').NOERR1\n.ERR1    MNOTE 8,'Missing label parameter'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check the OPT parameter\n         AIF   (K'&OPT NE 0).NOERR2\n.ERR2A   MNOTE 8,'Missing parameter(s)'\n         MEXIT\n.NOERR2  ANOP  ,\n.*\n.* Check the NEWNAME parameter (must be present if &OPT = *NEWNAME)\n         AIF   ('&OPT' EQ '*NEWNAME' AND K'&NEWNAM EQ 0).ERR3A\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'New name not specified with option *NEWNAME'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Check number of parameters\n         AIF   ('&OPT' EQ '*END' AND N'&SYSLIST GT 1).ERR4A\n         AIF   ('&OPT' EQ '*END').NOERR4\n         AIF   ('&OPT' EQ '*SUPPRESS' AND N'&SYSLIST GT 1).ERR4A\n         AIF   ('&OPT' EQ '*SUPPRESS').NOERR4\n         AGO   .NOERR4\n.ERR4A   MNOTE 4,'More than 1 argument: remainder ignored'\n.NOERR4  ANOP\n.*\n.* Which option requested?\n         AIF   ('&OPT' EQ '*END').END\n         AIF   ('&OPT' EQ '*SUPPRESS').SUPPRESS\n         AIF   ('&OPT' EQ '*NEWNAME').NEWNAME\n.*\n.* Normal: add entries to tables\n&I       SETA  0                       * SYSLIST(1) ff into PRMS\n         AGO   .BLDPRMS\n.*\n.* Suppress option\n.SUPPRESS ANOP ,\n&PRMS    SETC  '&OPT'                  * Set to *SUPPRESS\n         AGO   .ADDNTRY\n.*\n.* Newname option\n.NEWNAME ANOP  ,\n&I       SETA  2                       * SYSLIST(3) ff into PRMS\n         AGO   .BLDPRMS\n.*\n.* Build parameter string from SYSLIST entries\n.BLDPRMS ANOP  ,\n&I       SETA  &I+1                    * Point next SYSLIST entry\n         AIF   (&I GT N'&SYSLIST).PRMSOK\n&PRMS    SETC  '&PRMS'.','.'&SYSLIST(&I)'\n         AGO   .BLDPRMS\n.PRMSOK  ANOP  ,\n         AIF   (K'&PRMS EQ 0).ADDNTRY\n&PRMS    SETC  '&PRMS'(2,*)            * Remove leading comma\n.*\n.* Add entry to tables\n.ADDNTRY ANOP  ,\n&I       SETA  &BXA_DSOVR+1            * Next free entry\n&BXA_DSOVR_LAB(&I) SETC '&LABEL'       * Insert label,\n&BXA_DSOVR_PRM(&I) SETC '&PRMS'        *   and parameters\n&BXA_DSOVR_NAM(&I) SETC ''             *   into tables\n         AIF   ('&OPT' NE '*NEWNAME').NAMOK\n&BXA_DSOVR_NAM(&I) SETC '&NEWNAM'      *\n.NAMOK   ANOP  ,\n&BXA_DSOVR SETA &I                     * And update ptr to last valid\n.*\n.* Replace DS-instruction by our DS-macro on the first override\n         AIF   (&BXA_DSOVR GT 1).MEND\n         OPSYNS DS                     * Replace DS by _DS\n         MEXIT\n.*\n.* Ending current DSOVR requests. Issue a message for any unused\n.* entries in BXA_DSOVR tables.\n.END     ANOP\n         AIF   (&BXA_DSOVR EQ 0).MEND * No entries remain\n&I       SETA  0                       * I indexes BXA_DSOVR_xxx\n.LOOP1   ANOP  ,                       * For all current entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &BXA_DSOVR).LOOP1OK * At end: quit loop\n         MNOTE 4,'DSOVR for &BXA_DSOVR_LAB(&I) discarded'\n         AGO   .LOOP1\n.LOOP1OK ANOP\n&BXA_DSOVR SETA 0                      * Reset valid counter to 0\n.*\n.* Disable our DS-macro by replacing _DS by original DS-instruction\n         OPSYNS _DS                    * Reset DS-instruction\n.*\n.MEND    MEND\n./ ADD NAME=EJECT    0100-20096-20096-0111-00116-00116-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's EJECT statement\n.*\n&LABEL   EJECT ,                       * Arguments in SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EJECT                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_EJECTOVR(2)        * Nr of valid entries in ...\n         GBLC  &BXA_EJECTOVR_OPT(5)    * Stack of override options\n         LCLA  &I                      * Index into &SYSLIST\n         LCLC  &ARG                    * 1 Argument from SYSLIST\n         LCLC  &ARGS                   * Arguments from SYSLIST\n         LCLC  &OVR_OPT                * Override option\n.*\n.* Check LABEL parameter\n         AIF   (K'&LABEL EQ 0).NOERR1\n         AIF   (&SYSNEST GT 1).NOERR1\n.ERR1A   MNOTE 4,'No label parameter allowed with EJECT: label ignored'\n.NOERR1  ANOP\n.*\n.* If applicable: extract override option for this EJECT\n&OVR_OPT SETC  '*KEEP'                 * Default to *KEEP-option\n         AIF   (&BXA_EJECTOVR(2) EQ 0).OVROK\n&I       SETA  &BXA_EJECTOVR(1)+1      * Point next unused entry\n         AIF   (&I GT &BXA_EJECTOVR(2)).OVRMT * Override table empty\n&OVR_OPT SETC  '&BXA_EJECTOVR_OPT(&I)' * Extract option from table\n&BXA_EJECTOVR(1) SETA &I               * Update used-up entries ptr\n         AGO   .OVROK\n.OVRMT   ANOP  ,\n&BXA_EJECTOVR(1) SETA 0                * Reset last-used entry pointer\n&BXA_EJECTOVR(2) SETA 0                * Reset high valid entry pointer\n.OVROK   ANOP  ,\n.*\n.* If override option = *SUPPRESS: quit macro\n         AIF   ('&OVR_OPT' EQ '*SUPPRESS').MEND\n.*\n.* Build ARGS from &SYSLIST\n&I       SETA  0                       * I indexes &SYSLIST\n.LOOP1   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&ARG     SETC  '&SYSLIST(&I)'          * Extract 1 argument\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AIF   (K'&ARG EQ 0).LOOP1\n.ERR2A   ANOP  ,\n         AIF   ('&OVR_OPT' EQ '*NOERR').LOOP1\n         MNOTE 4,'No arguments allowed on EJECT: ignored'\n         AGO   .LOOP1                  * And go process next entry\n.LOOP1OK ANOP\n         AIF   (K'&ARGS LT 2).ARGSOK\n&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma\n.ARGSOK  ANOP\n.*\n.* Generate _EJECT statement\n         _EJECT\n.*\n.MEND    MEND\n./ ADD NAME=EJECTOVR 0100-20096-20096-0111-00152-00152-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro handles the stack of EJECT modifications for use by the\n.* EJECT macro, which replaces the assembler's EJECT instruction\n.*\n&LABEL   EJECTOVR &OPT,                * *NOERR or *END                *\n               &TIMES                  * Repeat count for &OPT\n.*\n.* &LABEL should not be specified\n.* &OPT   specifies the one of the following:\n.*        *END cancels all outstanding EJECTOVR requests\n.*        *KEEP allows an EJECT statement to remain unchanged\n.*        *SUPPRESS suppresses the EJECT statement\n.*        *NOERR suppresses any error messages\n.* &TIMES Specifies the number of times the specified options is to be\n.*        performed. Cannot be used with *END\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EJECTOVR               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_EJECTOVR(2)        * Ptr to first and last valid\n         GBLC  &BXA_EJECTOVR_OPT(50)   * Options\n         GBLA  &BXA_NUMVAL             * Result from CHKLIT\n         LCLA  &_TIMES                 *\n         LCLA  &I                      * Index\n.*\n.* Check LABEL parameter\n         AIF   (K'&LABEL EQ 0).NOERR1\n.ERR1    MNOTE 4,'Label parameter ignored'\n.NOERR1  ANOP\n.*\n.* Check the OPT parameter\n         AIF   (K'&OPT EQ 0).ERR2A\n         AIF   ('&OPT' EQ '*END').NOERR2\n         AIF   ('&OPT' EQ '*NOERR').NOERR2\n         AIF   ('&OPT' EQ '*SUPPRESS').NOERR2\n         AIF   ('&OPT' EQ '*KEEP').NOERR2\n         AGO   .ERR2B\n.ERR2A   MNOTE 8,'Missing parameter(s)'\n         MEXIT\n.ERR2B   MNOTE 8,'Unsupported option: &OPT'\n         MEXIT\n.NOERR2  ANOP  ,\n.*\n.* Check the TIMES parameter (may be present if &OPT <> *END)\n         AIF   (K'&TIMES EQ 0).NOERR3\n         AIF   ('&OPT' EQ '*END').ERR3A\n         CHKLIT &TIMES                 * Determine numerical value\n         AIF   (&BXA_RC NE 0).ERR3B\n&_TIMES  SETA  &BXA_NUMVAL             * Copy count to index\n         AGO   .NOERR3\n.ERR3A   MNOTE 4,'Count specified with option *END: count ignored'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'Specified count is not a valid number'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Check number of parameters\n         AIF   ('&OPT' EQ '*END' AND N'&SYSLIST GT 1).ERR4A\n         AIF   ('&OPT' EQ '*END').NOERR4\n         AIF   (N'&SYSLIST GT 2).ERR4B\n         AGO   .NOERR4\n.ERR4A   MNOTE 4,'More than 1 argument: remainder ignored'\n         AGO   .NOERR4\n.ERR4B   MNOTE 4,'More than 2 arguments: remainder ignored'\n.NOERR4  ANOP\n.*\n.* Which option requested?\n         AIF   ('&OPT' EQ '*END').END\n.*\n.* Add entries to tables\n.NOERR   ANOP  ,\n&I       SETA  &BXA_EJECTOVR(2)+1      * Point next free entry\n&BXA_EJECTOVR_OPT(&I) SETC '&OPT'      * Insert option into table\n&BXA_EJECTOVR(2) SETA &I               * Update ptr to last-valid entry\n&_TIMES  SETA  &_TIMES-1               * Reduce nr of entries to create\n         AIF   (&_TIMES GE 1).NOERR    * Repeat until all created\n         MEXIT\n.*\n.* Ending current EJECTOVR requests. Issue a message for any unused\n.* entries in BXA_EJECTOVR tables.\n.END     ANOP\n         AIF   (&BXA_EJECTOVR(2) EQ 0).MEND * No entries exist\n&I       SETA  &BXA_EJECTOVR(1)        * I indexes BXA_EJECTOVR_OPT\n.LOOP1   ANOP  ,                       * For all current entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &BXA_EJECTOVR(2)).LOOP1OK * At end: quit loop\n         MNOTE 4,'EJECTOVR &BXA_EJECTOVR_OPT(&I) discarded'\n         AGO   .LOOP1\n.LOOP1OK ANOP\n&BXA_EJECTOVR(1) SETA 0                * Reset used-up counter to 0\n&BXA_EJECTOVR(2) SETA 0                * Reset valid counter to 0\n.*\n.MEND    MEND\n./ ADD NAME=ELSE     0100-20096-20096-0111-00122-00122-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: ELSE\n.* Combines with IF and ENDIF to conditionally execute blocks of code\n.*\n&LABEL   ELSE  ,                       * No arguments allowed\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC ELSE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_LBL(5)         * Labels\n         GBLA  &BXA_STK_LVL(5)         * Levels\n         LCLC  &OP                     * Last opcode on stack\n         LCLC  &LBL                    * Last label on stack\n         LCLA  &LVL                    * Last level on stack\n         LCLC  &LAB                    * End-of-else label\n         LCLA  &I                      * Stack pointer\n.*\n.* Check label parameter\n         AIF   (K'&LABEL EQ 0).NOERR1\n.ERR1    MNOTE 4,'Label ignored'\n.NOERR1  ANOP\n.*\n.* Check nr of parameters\n         AIF   (N'&SYSLIST EQ 0).NOERR2\n         AIF   (K'&SYSLIST(1) GT 1).ERR2\n         AIF   (N'&SYSLIST EQ 1).NOERR2\n         AIF   (K'&SYSLIST(2) GT 1).ERR2\n         AIF   (N'&SYSLIST EQ 2).NOERR2\n.ERR2    MNOTE 4,'No arguments expected: ignored'\n.NOERR2  ANOP\n.*\n.* Check that current stack-entry designates a then-block\n&I       SETA  &BXA_STK                * Copy stack pointer\n         AIF   (&I LT 1).ERR3A         * Stack underflow\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack\n&LBL     SETC  '&BXA_STK_LBL(&I)'      * and end-of-block label\n         AIF   ('&OP' EQ 'CASE').NOERR3\n         AIF   ('&OP' EQ 'ELSE').ERR3B\n         AIF   ('&OP' EQ 'IF').NOERR3\n         AGO   .ERR3C\n.ERR3A   MNOTE 8,'No preceding IF statement: ignored'\n         MEXIT\n.ERR3B   MNOTE 8,'Duplicate ELSE statement: ignored'\n         MEXIT\n.ERR3C   MNOTE 8,'Cannot use ELSE to terminate a &OP.-block: ignored'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Generate end-of-then label and add a stack-entry\n&LAB     SETC  '_ELSE_&SYSNDX'\n&LVL     SETA  &BXA_STK_LVL(&BXA_STK)  * Copy level\n&I       SETA  &BXA_STK+1              * Point next stack entry\n&BXA_STK_OP(&I)  SETC 'ELSE'           * Indicate ELSE block in progres\n&BXA_STK_LBL(&I) SETC '&LAB'           * End-of-ELSE label for ENDIF\n&BXA_STK_LVL(&I) SETA &LVL             * Level for ENDIF\n&BXA_STK SETA  &I                      * And increment stack pointer\n.*\n.* Generate code\n         B     &LAB                    * Skip else-logic\n&LBL     LABEL ,                       * Start of else-logic\n.*\n.MEND    MEND\n./ ADD NAME=END      0100-20096-20096-0111-00658-00658-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Terminate assembly. This macro replaces the normal END instruction.\n.* The required OPSYN is issued by the PGM macro.\n.*\n&LABEL   END   &EP                     * Entry point label\n.*\n.* &EP   specifies the entry point, as in the END instruction\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC END                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &SP_SHOWALL             * Print option from JCL\n         GBLA  &BXA_SAVES              * Number of internal save-areas\n         GBLC  &BXA_ENTRY              * Type of program\n         GBLC  &BXA_SUBR               * Name of current subroutine\n         GBLC  &BXA_SRDNAM(50)         * Names of defined subroutines\n         GBLC  &BXA_SRDTYP(50)         * Types of defined subroutines\n         GBLB  &BXA_SRDDUP(50)         * Duplication status of subrs\n         GBLC  &BXA_SRUNAM(50)         * Names of used subroutines\n         GBLA  &BXA_SRUCT(50)          * Use count of subroutines\n         GBLA  &BXA_SRNAML             * Max subr name length\n         GBLC  &BXA_SR_CALLER(50)      * Names of calling subrs\n         GBLC  &BXA_SR_CALLED(50)      * Names of called subrs\n         LCLA  &I,&J                   * Index into BXA_SRxNAM arrays\n         LCLA  &S1,&S2                 * Sort-limit indices\n         LCLC  &LIN                    * MNOTE line in formation\n         LCLC  &LVL                    * MNOTE line severity level\n         LCLC  &LINE(50)               * MNOTE lines\n         LCLA  &LINE_LEN               * Length of longest line\n         LCLC  &LEVEL(50)              * MNOTE line severity levels\n         LCLA  &L                      * Index into LINE/LEVEL arrays\n         GBLC  &_CALLER(50)            * Copy of BXA_SR_CALLER\n         GBLC  &_CALLED(50)            * Copy of BXA_SR_CALLED\n         LCLC  &CALLERS(50)            * Callers of 1 subr\n         LCLA  &CALLCT(50)             * Count of EXSR per caller\n         LCLA  &C,&D,&E                * Index into _CALLxx/CALLERS\n         LCLC  &CALLER                 * 1 caller of current subr\n         LCLB  &RECURSE                * On if recursion found in subr\n         LCLA  &NESTLVL                * Level of subroutine nesting\n         LCLB  &LVLUP                  * On if nestlvl increased\n         LCLC  &SRTYP                  * Subroutine type (current)\n         LCLC  &SR_TYP(5)              * Subroutine types\n         LCLA  &SR_NEST(5)             * Max nestlvl for this subr.type\n         LCLB  &PGM_REC                * On if recursion found in pgm\n         LCLA  &NESTMAX                * Max. level of subr nesting\n         LCLA  &INT_MAX                * Max. level of subr nesting\n         LCLA  &EXT_MAX                * Max. level of subr nesting\n         GBLC  &BXA_ABND(50)           * Used ABND-labels\n         GBLC  &BXA_ABNDPGM(50)        * Defined ABND-labels\n         GBLC  &BXA_ABND_DFT           * Default ABND-label\n         GBLB  &SP_DBG                 * On if DBG-code enabled\n         GBLB  &SP_SRLIST              * On if subr-listing desired\n         GBLB  &SP_SRXREF              * On for subr cross reference\n         GBLA  &BXA_DBG_SKIP           * Nr of skipped DBG-operations\n         LCLC  &_PRINT                 * Print option for PRINT\n         LCLC  &_PROPT                 * Print option for PUSH/POP\n         LCLC  &CT                     * Call count as text\n         LCLC  &_MAIN                  * Length-adjusted constant *MAIN\n         GBLC  &BXA_RETRN_RC(5)        * Returncodes\n         GBLC  &BXA_RETRN_RS(5)        * Reasoncodes\n         GBLC  &BXA_RETRN_RP(5)        * Return pointers\n         GBLC  &BXA_RETRN_WA(5)        * FREE/NOFREE\n         GBLC  &BXA_RETRN_LBL(5)       * Routine labels\n.*\n.* Check that the structured programming stack is empty\n         CHK_STACK ,                   *\n.*\n.* Check that we're not in the midst of a subroutine\n         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR1\n.ERR1    MNOTE 8,'Missing ENDSR statement'\n.NOERR1  ANOP\n.*\n.* Set listing options\n&_PRINT  SETC  'ON'                    * SHOWALL: show PRINT lines\n         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP lines\n&_PRINT  SETC  'OFF,NOPRINT'           * Not ALL: omit PRINT lines\n&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines\n.PRINTOK ANOP\n.*\n.* Check that no override instances remain pending\n         DSOVR *END\n         EJECTOVR *END\n         EQUOVR *END\n.*\n.* Generate code\n&LABEL   LABEL H                       * Align on halfword\n.*\n.* Insert remote RETRN-routines\n&I       SETA  N'&BXA_RETRN_LBL        * Nr of entries in RETRN tables\n.LOOPR   ANOP  ,                       * For all remote RETRNs\n         AIF   (&I EQ 0).LOOPROK       * At end: quit loop\n&BXA_RETRN_LBL(&I) RETRN RC=&BXA_RETRN_RC(&I),                         *\n               REASON=&BXA_RETRN_RS(&I),                               *\n               RETPTR=&BXA_RETRN_RP(&I),                               *\n               WORKAREA=&BXA_RETRN_WA(&I),                             *\n               INLINE=NO\n&I       SETA  &I-1                    * Point to next entry\n         AIF   (&I GT 0).LOOPR         * Not done: repeat loop\n         LTORG ,                       * Literals for RETRN\n.LOOPROK ANOP\n.*\n.* Insert remote data definitions\n         DROP  ,                       * End all USINGs\n         RLTORG ,                      *\n         EJECT ,                       * Force heading with USINGs\n.*\n.* Report suppression of DBG-code\n         AIF   (&SP_DBG).DBGOK         * DBG enabled: no msg\n         AIF   (&BXA_DBG_SKIP EQ 0).DBGOK * No DBGs: no msg\n         MNOTE 0,'&BXA_DBG_SKIP DBG-operations suppressed due to specif*\n               ied SYSPARM'\n.DBGOK   ANOP\n.*\n.* Check ABND and ABNDPGM macro usage\n.* First check whether the ABND SETDFT label was defined with ABNDPGM\n         AIF   ('&BXA_ABND_DFT' EQ '').LOOPIND * No default specified\n&J       SETA  0                       * J indexes BXA_ABNDPGM\n.LOOPI   ANOP\n&J       SETA  &J+1                    * Point next defined label\n         AIF   (&J GT N'&BXA_ABNDPGM).LOOPINF * End of array\n         AIF   ('&BXA_ABNDPGM(&J)' EQ '&BXA_ABND_DFT').LOOPIOK * Found\n         AGO   .LOOPI                  * Go process next entry\n.LOOPINF ANOP  ,                       * Not Found\n         MNOTE 4,'ABND SETDFT specified a label that was not defined wi*\n               th ABNDPGM'\n         AGO   .LOOPIOK                * Loop done\n.LOOPIND ANOP  ,                       * Not defined\n         AIF   ('&BXA_ENTRY' EQ 'FRR').LOOPIOK\n         AIF   ('&BXA_ENTRY' EQ 'RMTR').LOOPIOK\n         MNOTE 4,'ABND SETDFT not issued in source &SYSIN_MEMBER'\n.LOOPIOK ANOP\n.*\n.* LOOPJ/LOOPK checks whether ABND labels were defined with ABNDPGM\n&I       SETA  0                       * I indexes BXA_ABND\n.LOOPJ   ANOP\n&I       SETA  &I+1                    * Point next used label\n         AIF   (&I GT N'&BXA_ABND).LOOPJOK * End of loop\n&J       SETA  0                       * J indexes BXA_ABNDPGM\n.LOOPK   ANOP\n&J       SETA  &J+1                    * Point next defined label\n         AIF   (&J GT N'&BXA_ABNDPGM).LOOPKNF * Not found: error\n         AIF   ('&BXA_ABND(&I)' EQ '&BXA_ABNDPGM(&J)').LOOPKF * Found\n         AGO   .LOOPK                  * Continue search\n.LOOPKF  ANOP\n&BXA_ABNDPGM(&J) SETC ''               * Removed defined label: used\n         AGO   .LOOPKOK\n.LOOPKNF MNOTE 8,'Label &BXA_ABND(&I) used on ABND-macro, but not defin*\n               ed on ABNDPGM-macro'\n.LOOPKOK ANOP\n         AGO   .LOOPJ\n.LOOPJOK ANOP\n.*\n.* All defined labels that are not used still remain in BXA_ABNDPGM\n&J       SETA  0                       * J indexes BXA_ABNDPGM\n.LOOPL   ANOP\n&J       SETA  &J+1                    * Point next defined label\n         AIF   (&J GT N'&BXA_ABNDPGM).LOOPLOK * End of array\n         AIF   ('&BXA_ABNDPGM(&J)' EQ '').LOOPL * Skip empty entries\n         MNOTE 4,'Label &BXA_ABNDPGM(&J) defined in ABNDPGM-macro but n*\n               ot used on ABND-macro'\n         AGO   .LOOPL                  * Go process next entry\n.LOOPLOK ANOP\n.*\n.* Create local copies of subroutine cross reference tables\n&I       SETA  0\n.LOOP0   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&BXA_SR_CALLED).LOOP0OK\n&LIN     SETC  '&BXA_SR_CALLER(&I)'.(64)' ' * Append a lot of blanks\n&_CALLER(&I) SETC '&LIN'(1,&BXA_SRNAML)     * Truncate to length\n&LIN     SETC  '&BXA_SR_CALLED(&I)'.(64)' ' * Append a lot of blanks\n&_CALLED(&I) SETC '&LIN'(1,&BXA_SRNAML)     * Truncate to length\n         AGO   .LOOP0                  * And go copy nxt set of entries\n.LOOP0OK ANOP\n&_MAIN   SETC  '*MAIN'.(64)' '              * Also create name of *MAIN\n&_MAIN   SETC  '&_MAIN'(1,&BXA_SRNAML)      *     truncate to length\n.*\n.* Adjust length of subroutine names in BXA_SRUNAM cross ref. table\n&I       SETA  0\n.LOOPQ   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&BXA_SRUNAM).LOOPQOK\n&LIN     SETC  '&BXA_SRUNAM(&I)'.(64)' '   * Append a lot of blanks\n&BXA_SRUNAM(&I) SETC '&LIN'(1,&BXA_SRNAML) * Truncate to length\n         AGO   .LOOPQ                  * And go adjust nest entry\n.LOOPQOK ANOP\n.*\n.* Create an overview of all defined subroutines\n         AIF   ('&BXA_SRDNAM(1)' EQ '').LOOP1OK * If empty skip loop\n&I       SETA  0                       * Init for loop\n.LOOP1   ANOP\n&I       SETA  &I+1                    * Index next entry\n         AIF   (&I GT N'&BXA_SRDNAM).LOOP1OK * End loop\n&LVL     SETC  '*'                     * Default: info msg\n&LIN     SETC  '&BXA_SRDNAM(&I)'.(64)' ' * Extract name of subroutine\n&LIN     SETC  '&LIN'(1,&BXA_SRNAML)   *  and trunc. to desired length\n&BXA_SRDNAM(&I) SETC '&LIN'            * Update name in table too\n.* Look up the subr-name in the BXA_SRUNAM table\n&J       SETA  0                       * Init for inner loop\n.LOOP2   ANOP\n&J       SETA  &J+1                    * Index next entry\n         AIF   (&J GT N'&BXA_SRUNAM).LOOP2NF * Not found: end loop\n         AIF   ('&BXA_SRUNAM(&J)' EQ '&LIN').LOOP2F * Found: msg\n         AGO   .LOOP2                  * Continue search with nxt entry\n.* Found: build complete message, remove SRUNAM entry\n.LOOP2F  ANOP\n         AIF   (&SP_SRXREF).LOOP2NC\n&CT      SETC  (3)' '.'&BXA_SRUCT(&J)' * Prefix blanks to count\n&CT      SETC  '&CT'(K'&CT-2,*)        * Make a 3-digit number\n&LIN     SETC  '&LIN'.'  Call count: &CT'\n.LOOP2NC ANOP  ,                       * No count on full Xref\n&LIN     SETC  '&LIN'.'  &BXA_SRDTYP(&I).ernal subroutine'\n&BXA_SRUNAM(&J) SETC ''                * Remove reported UNAM entry\n         AGO   .LOOP2OK                * And go put line into array\n.* Not found: issue partial message\n.LOOP2NF ANOP\n         AIF   (&BXA_SRDDUP(&I)).LOOP2DUP * Duplicate subroutine name?\n         AIF   (K'&BXA_SRDTYP(&I) LT 5).LOOP2NR * No ESTAE normal unref\n         AIF   ('&BXA_SRDTYP(&I)'(1,5) EQ 'ESTAE').LOOP2EST * ESTAE ?\n         AIF   ('&BXA_SRDTYP(&I)'(1,5) EQ 'RETRY').LOOP2RET * RETRY ?\n.LOOP2NR ANOP  ,                       * Not referenced\n&LIN     SETC  '&LIN'.' *Unreferenced internal subroutine'\n&LVL     SETC  '4'                     * Set warning level\n         AGO   .LOOP2OK                * And go put line into array\n.LOOP2EST ANOP\n&LIN     SETC  '&LIN'.' *ESTAE routine'\n         AGO   .LOOP2OK                * And go put line into array\n.LOOP2RET ANOP\n&LIN     SETC  '&LIN'.' *RETRY routine'\n         AGO   .LOOP2OK                * And go put line into array\n.LOOP2DUP ANOP\n&LIN     SETC  '&LIN'.' *Duplicate definition'\n&LVL     SETC  '8'                     * Set error level\n.* &LIN completed: put into array LINE, then continue\n.LOOP2OK ANOP\n&L       SETA  &L+1                    * Point to next line entry\n&LINE(&L) SETC '&LIN'                  * Put line into array\n&LEVEL(&L) SETC '&LVL'                 * Put msg level into array\n         AGO   .LOOP1                  * And go process next entry\n.LOOP1OK ANOP  ,                       * &I now points to free entry\n.*\n.* Condense BXA_SRUNAM and BXA_SRUCT\n&I       SETA  0                       * Index into BXA_UNAM\n&J       SETA  0                       * Nr of valid entries\n.LOOP3   ANOP\n&I       SETA  &I+1                    * Point next UNAM-entry\n         AIF   (&I GT N'&BXA_SRUNAM).LOOP3OK * End loop\n         AIF   ('&BXA_SRUNAM(&I)' EQ '').LOOP3 * Skip empty entry\n&J       SETA  &J+1                    * Increment valid entry count\n         AIF   (&I EQ &J).LOOP3        * No move req'd, process next\n&BXA_SRUNAM(&J) SETC '&BXA_SRUNAM(&I)' * Move UNAM-entry\n&BXA_SRUCT(&J) SETA &BXA_SRUCT(&I)     * Move UCT-entry\n         AGO   .LOOP3                  * And go process next entry\n.LOOP3OK ANOP\n.*\n.* Add undefined subroutines to LINE array\n         AIF   (&J EQ 0).LOOP4OK       * If empty skip loop\n&I       SETA  0                       * Init for loop\n.LOOP4   ANOP\n&I       SETA  &I+1                    * Index next entry\n         AIF   (&I GT &J).LOOP4OK      * End loop\n&LIN     SETC  '&BXA_SRUNAM(&I)'       * Put name into print-line\n&LIN     LABEL H                       * Missing subroutine name\n&LIN     SETC  '&LIN'.(64)' '          *  add trailing blanks\n&LIN     SETC  '&LIN'(1,&BXA_SRNAML)   *  and trunc. to desired length\n&LIN     SETC  '&LIN'.' *Undefined'\n&L       SETA  &L+1                    * Point to next line entry\n&LINE(&L) SETC '&LIN'                  * Put line into array\n&LEVEL(&L) SETC '8'                    * Set error severity\n         AGO   .LOOP4                  * And go process next entry\n.LOOP4OK ANOP\n.*\n.* To sort the LINE-array all lines must have equal lengths\n&I       SETA  0\n.LOOP5   ANOP\n&I       SETA  &I+1                    * Point to next LINE\n         AIF   (&I GT &L).LOOP5OK      * End of LINE array\n         AIF   (K'&LINE(&I) LE &LINE_LEN).LOOP5 * This line longer?\n&LINE_LEN SETA K'&LINE(&I)             * Yes: set new max. length\n         AGO   .LOOP5                  * And go process next LINE\n.LOOP5OK ANOP\n&I       SETA  0\n.LOOP6   ANOP\n&I       SETA  &I+1                    * Point to next LINE\n         AIF   (&I GT &L).LOOP6OK      * End of LINE array\n         AIF   (K'&LINE(&I) GE &LINE_LEN).LOOP6 * This line too short?\n&J       SETA  &LINE_LEN-K'&LINE(&I)   * Nr of missing characters\n&LINE(&I) SETC '&LINE(&I)'.(&J)' '     * Append missing blanks\n         AGO   .LOOP6                  * And go process next LINE\n.LOOP6OK ANOP\n.*\n.* Sort LINE/LEVEL arrays\n.* S0 points to first unsorted element in LINE\n.* S1 points to last unsroted element in LINE\n.* S2 contains the last swapped element this pass\n         AIF   (&L LT 2).LOOP7OK       * <2 elements: no need to sort\n&S2      SETA  &L                      * End of unsorted part\n.LOOP7   ANOP  ,                       *** DO UNTIL (S2 = 0)\n         AIF   (&S2 EQ 0).LOOP7OK      * Sort completed?\n&I       SETA  0                       * Point before first unsorted\n&J       SETA  1                       *   and following indices\n&S1      SETA  &S2                     * Point to last unsorted element\n&S2      SETA  0                       * Reset new end-of-sort pointer\n.LOOP8   ANOP  ,                       *** FOR I = S0 to S1-1\n&I       SETA  &I+1                    * Point to next unsorted\n&J       SETA  &J+1                    *   element indices\n         AIF   (&J GT &S1).LOOP8OK     * End of inner loop?\n         AIF   ('&LINE(&I)' LT '&LINE(&J)').LOOP8\n&LIN     SETC  '&LINE(&I)'             * Swap\n&LINE(&I) SETC '&LINE(&J)'             *  the two\n&LINE(&J) SETC '&LIN'                  *   lines\n&LVL     SETC  '&LEVEL(&I)'            * Swap\n&LEVEL(&I) SETC '&LEVEL(&J)'           *  the two\n&LEVEL(&J) SETC '&LVL'                 *   level-values\n&S2      SETA  &I                      * Set last-swapped index\n         AGO   .LOOP8                  * Go process next set of entries\n.LOOP8OK ANOP\n         AGO   .LOOP7                  * Go start next pass\n.LOOP7OK ANOP\n.*\n.* Create overview from LINE-array\n         AIF   (NOT &SP_SRLIST).LOOP9IN * No listing: suppress header\n         AIF   (&L EQ 0).SRLIST0       * Notify programmer: no subrs\n.* EJECT statement removed: RETRN ends with an EJECT\n         MNOTE 0,'Subroutine usage overview'\n         AGO   .LOOP9IN\n.SRLIST0 ANOP\n         MNOTE 0,'No subroutines in program &SYSIN_MEMBER'\n         AGO   .LOOP9OK                * Skip loop for lack of subrs\n.*\n.LOOP9IN ANOP  ,                       *\n         ACTR  256*&L+2*&L*&L*&L       * Set ACTR counter\n&I       SETA  0                       * Use as index into LINE\n.LOOP9   ANOP  ,                       *\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &L).LOOP9OK      * End of loop\n         AIF   ('&LEVEL(&I)' EQ '*').LOOP9A * Handle asterisk separate\n         MNOTE &LEVEL(&I),'&LINE(&I)'  * Issue subr message\n         AGO   .LOOP9XR                * Go process next entry\n.LOOP9A  ANOP\n         AIF   (NOT &SP_SRLIST).LOOP9XR * Skip info-msg if SRLIST off\n         MNOTE *,'     &LINE(&I)'      * Issue subr message\n         AGO   .LOOP9XR                * Go process next entry\n.*\n.* Create cross reference lines with invoking subroutines\n.LOOP9XR ANOP\n&LIN     SETC  '&LINE(&I)'(1,&BXA_SRNAML) * Extract subroutine name\n&J       SETA  0                       * Loop-index in BXA_SR_CALLED\n&C       SETA  0                       * Ptr last entry CALLERS/CALLCT\n.LOOPA   ANOP\n&J       SETA  &J+1                    * Point next XREF entry\n         AIF   (&J GT N'&BXA_SR_CALLED).LOOPAOK * end of XREF tables\n         AIF   ('&LIN' NE '&_CALLED(&J)').LOOPA * Unequal: skip entry\n.* Do not add duplicates to CALLERS\n&D       SETA  0                       * &D indexes into CALLERS\n.LOOPB   ANOP\n&D       SETA  &D+1                    * Point next CALLERS entry\n         AIF   (&D GT &C).LOOPBAD      * Not found: go add entry\n         AIF   ('&_CALLER(&J)' NE '&CALLERS(&D)').LOOPB * Cont. search\n&CALLCT(&D) SETA &CALLCT(&D)+1         * Increment occurrence count\n         AGO   .LOOPBOK                * and we're done\n.LOOPBAD ANOP  ,                       * Add an entry to CALLERS\n&C       SETA  &C+1                    * Point next entry\n&CALLERS(&C) SETC '&_CALLER(&J)'       * Copy calling subr. name\n&CALLCT(&C) SETA 1                     * Occurrence count starts at 1\n.LOOPBOK ANOP\n         AGO   .LOOPA                  * Go process next XREF entry\n.LOOPAOK ANOP\n.*\n.* Do not issue Cross reference line messages if &SP_SRXREF is off\n         AIF   (NOT &SP_SRXREF).LOOPCOK * Skip the whole thing\n&J       SETA  0                       * &J indexes CALLERS\n.LOOPC   ANOP  ,                       * Create invokation XREF lines\n&J       SETA  &J+1                    * Point next entry\n         AIF   (&J GT &C).LOOPCOK      * End of CALLERS array\n         AIF   (&J EQ 1).LOOPC1        * First line: extra info\n&LIN     SETC  '            &CALLERS(&J)' * Create standard line\n         AGO   .LOOPC2\n.LOOPC1  ANOP\n&LIN     SETC  'Called by : &CALLERS(&J)' * Create line with extra text\n.LOOPC2  ANOP\n&LIN     SETC  (&BXA_SRNAML+7)' '.'&LIN' * Left-adjust line in overview\n         AIF   (&CALLCT(&J) EQ 1).LOOPCNC * No count needed\n&CT      SETC  (3)' '.'&CALLCT(&J)'    * Prefix blanks to count\n&CT      SETC  '&CT'(K'&CT-2,*)        * Make a 3-digit number\n&LIN     SETC  '&LIN &CT times'        * Add call count\n.LOOPCNC ANOP\n         MNOTE *,'&LIN'                * Issue XREF-line\n         AGO   .LOOPC\n.LOOPCOK ANOP\n.*\n.* CALLCT will now contain the invoker level: Set to 1 for all entries\n&J       SETA  0                       * &J indexes CALLERS\n.LOOPD   ANOP  ,                       *\n&J       SETA  &J+1                    * Point next entry\n         AIF   (&J GT &C).LOOPDOK      * End of CALLERS array\n&CALLCT(&J) SETA 1                     * Nesting level is 1\n         AGO   .LOOPD                  * And repeat for all entries\n.LOOPDOK ANOP\n.*\n.* Determine the maximum nesting level for this subroutine\n.* Put all invokers of all invokers into array CALLERS, keep the\n.* invocation level count in CALLCT. Do not re-examine current subr.\n&RECURSE SETB  0                       * This routine not recursive\n&LVLUP   SETB  0                       * No subrs increased in level\n&LIN     SETC  '&LINE(&I)'(1,&BXA_SRNAML) * Extract subroutine name\n&J       SETA  0\n.LOOPE   ANOP  ,                       * Search XREF for callers\n&J       SETA  &J+1                    * Point next CALLERS entry\n         AIF   (&J GT &C).LOOPEOK      * Array CALLERS now complete\n         AIF   ('&LIN' EQ '&_MAIN').LOOPE * Skip *MAIN: not a subr!\n         AIF   ('&LIN' EQ '&CALLERS(&J)').LOOPERC * Recursion!\n.* Find all callers of this caller, add them to CALLERS, unless double\n&CALLER  SETC  '&CALLERS(&J)'          * Name of invoking routine\n&D       SETA  0                       * &D now indexes XREF arrays\n.LOOPF   ANOP\n&D       SETA  &D+1                    * Point to next set of entries\n         AIF   (&D GT N'&BXA_SR_CALLED).LOOPFOK * End of XREF\n         AIF   ('&CALLER' NE '&_CALLED(&D)').LOOPF * No match: next\n.* &_CALLER(&D) is a caller of the current CALLER\n&E       SETA  0                       * &E now indexes CALLERS\n.LOOPG   ANOP\n&E       SETA  &E+1                    * Point to next CALLERS-entry\n         AIF   (&E GT &C).LOOPGAD      * End of CALLERS\n         AIF   ('&_CALLER(&D)' NE '&CALLERS(&E)').LOOPG * Skip\n.* Found matching entry: check invocation level\n&NESTLVL SETA  &CALLCT(&J)+1           * Determine nesting level\n         AIF   (&NESTLVL LE &CALLCT(&E)).LOOPGOK\n&CALLCT(&E) SETA &NESTLVL              * Set new nesting level\n         AIF   (&E GT &J).LOOPGOK      * Unprocessed entry: proceed\n&LVLUP   SETB  1                       * Signal a redo is req'd\n         AGO   .LOOPGOK\n.LOOPGAD ANOP  ,                       * Add new entry to CALLERS\n&C       SETA  &C+1                    * Point to next empty entry\n&CALLERS(&C) SETC '&_CALLER(&D)'       * Add caller to CALLER\n&NESTLVL SETA  &CALLCT(&J)+1           * Determine nesting level\n&CALLCT(&C) SETA &NESTLVL              * Set caller's nesting level\n.LOOPGOK ANOP\n         AGO  .LOOPF                   * Process next XREF entry\n.LOOPFOK ANOP\n         AGO  .LOOPE                   * Process next CALLERS entry\n.LOOPERC ANOP  ,                       * Recursion detected!\n&RECURSE SETB  1                       * Signal recursion\n         AGO   .LOOPE\n.LOOPEOK ANOP\n.*\n.* Loop thru CALLCT to determine highest invocation level number\n&NESTLVL SETA  0                       *\n&J       SETA  0                       *\n.LOOPH   ANOP\n&J       SETA  &J+1                    * Point to next CALLCT entry\n         AIF   (&J GT &C).LOOPHOK      * End of CALLCT array\n         AIF   (&CALLCT(&J) LE &NESTLVL).LOOPH\n&NESTLVL SETA  &CALLCT(&J)             * Copy higher value\n         AGO   .LOOPH\n.LOOPHOK ANOP\n.*\n.* If some routine was increased in level after being processed:\n.*    redo from init LOOPE, unless recursion prevents this\n         AIF   (&LVLUP AND &NESTLVL LT &C).LOOPDOK\n.*\n.* Now we're back in our outer loop (Varying &I over &LINES array)\n.* If routine is recursive, flag the program as recursive and issue\n.* an additional message for the overview\n         AIF   (NOT &RECURSE).LOOP9NR  * Check recursion status\n&PGM_REC SETB  1                       * Recursion found in pgm\n         AIF   (NOT &SP_SRLIST).LOOP9NR * Skip message if NOSRLIST\n         MNOTE *,'     &LIN -May be entered recursively'\n.LOOP9NR ANOP\n.*\n.* For each caller in the CALLERS array, the type of subroutine needs\n.* to be determined from the BXA_SRDTYP array, therefore each name must\n.* be looked up in the associated BXA_SRDNAM array. When we have the\n.* the type we can look it up in the SR_TYP table, to locate the\n.* associated entry in the SR_NEST table. The nesting level in the\n.* SR_NEST will be updated if it is less than the value in the CALLCT\n.* entry, associated with the CALLERS entry we are processing.\n.* This way, we create - at program level - the maximum invocation\n.* level for each type of subroutine.\n.*\n.* First we must add an entry in CALLERS/CALLCT for the current subr\n&C       SETA  &C+1\n&CALLERS(&C) SETC '&LINE(&I)'(1,&BXA_SRNAML) * Subroutine name\n&CALLCT(&C) SETA 1                     * Value depends on type\n.*\n&J       SETA  0                       * Index into CALLERS/CALLCT\n.LOOPM   ANOP  ,                       * Process all CALLERS\n&J       SETA  &J+1                    * Point next entry\n         AIF   (&J GT &C).LOOPMOK      * End: quit loop\n&CALLER  SETC  '&CALLERS(&J)'          * Extract name of subroutine\n.*\n.* Find the routine in BXA_SRDNAM to determine the type of subroutine\n         AIF   ('&CALLER' EQ '&_MAIN').LOOPNNF * *MAIN not in SRDNAM\n&D       SETA  0                       * Index into SRDNAM/SRDTYP\n.LOOPN   ANOP\n&D       SETA  &D+1                    * Point next entry\n         AIF   (&D GT N'&BXA_SRDNAM).LOOPNNF * End: not found\n         AIF   ('&BXA_SRDNAM(&D)' NE '&CALLER').LOOPN * Continue search\n&SRTYP   SETC  '&BXA_SRDTYP(&D)'       * Found: copy subroutine type\n         AGO   .LOOPNOK                *\n.LOOPNNF ANOP  ,                       * Name not found:\n&SRTYP   SETC  'INT'                   * Default to normal subroutine\n.LOOPNOK ANOP\n.*\n.* Now we must locate SRTYP in the SR_TYP table, to update the maximum\n.* nesting level in the corresponding SR_NEST table entry\n&D       SETA  0                       * D indexes SR_TYP/SR_NEST\n.LOOPO   ANOP  ,                       *\n&D       SETA  &D+1                    * Point next entry\n         AIF   (&D GT N'&SR_TYP).LOOPONF * End: not found\n         AIF   ('&SR_TYP(&D)' NE '&SRTYP').LOOPO * Continue search\n.LOOPOF  ANOP  ,                       * Found entry &D\n         AIF   (&CALLCT(&J) LE &SR_NEST(&D)).LOOPOOK\n&SR_NEST(&D) SETA &CALLCT(&J)          * Set new (higher) value\n         AGO   .LOOPOOK                *\n.LOOPONF ANOP  ,                       * Subroutine type not found\n&SR_TYP(&D)  SETC '&SRTYP'             * &D points to empty entry\n&SR_NEST(&D) SETA &CALLCT(&J)          * Create new entry\n.LOOPOOK ANOP\n.*\n         AGO   .LOOPM                  * Go process next CALLER\n.LOOPMOK ANOP\n.*\n         AGO   .LOOP9                  * Go process next LINE\n.LOOP9OK ANOP  ,                       *\n         ACTR  4096                    * Reset ACTR value\n.*\n.* Determine total nesting level by adding the several types\n&INT_MAX SETA  0                       * Max. nestlvl for internal\n&EXT_MAX SETA  0                       * Max. nestlvl for external\n&NESTMAX SETA  0                       * Max. subroutine nesting level\n&J       SETA  0                       * J indexes SR_TYP/SR_NEST\n.LOOPP   ANOP  ,                       *\n&J       SETA  &J+1                    * Point next entry\n         AIF   (&J GT N'&SR_TYP).LOOPPOK * End: quit loop\n&LIN     SETC  '&SR_TYP(&J)'           * Copy type of routine\n         AIF   ('&LIN' EQ 'INT').LOOPPINT * Save INTernal max level\n         AIF   ('&LIN' EQ 'EXT').LOOPPEXT * Save external routines\n         AIF   ('&LIN' EQ 'RETRY').LOOPPD * First RETRY needs no SA\n         AIF   (K'&LIN LT 2).INTERR    * Should be ESTAEn\n&LIN     SETC  '&LIN'(1,K'&LIN-1)      * Clip level nr off\n         AIF   ('&LIN' EQ 'ESTAE').LOOPPI * Increment by one\n.INTERR  MNOTE 12,'Internal error: &LIN unknown subroutine type'\n         AGO   .LOOPPAD                *\n.*\n.LOOPPINT ANOP\n&INT_MAX SETA  &SR_NEST(&J)\n         AGO   .LOOPP\n.LOOPPEXT ANOP\n&EXT_MAX SETA  &SR_NEST(&J)\n         AGO   .LOOPP\n.*\n.LOOPPI  ANOP  ,                       * Increment by one for\n&SR_NEST(&J) SETA &SR_NEST(&J)+1       * ESTAE routines need 1 SA extra\n         AGO   .LOOPPAD                * Go add to total nestlevel\n.LOOPPD  ANOP  ,                       * Decrement count by one for\n&SR_NEST(&J) SETA &SR_NEST(&J)-1       *   RETRY routines need no SA\n.*\n.LOOPPAD ANOP  ,                       * Add adjusted count to total\n&NESTMAX SETA  &NESTMAX+&SR_NEST(&J)   * Add to total nest level\n         AGO   .LOOPP                  * and process next entry\n.LOOPPOK ANOP  ,                       *\n.*\n.* Add the greater value of INT_MAX and EXT_MAX\n         AIF   (&INT_MAX GT &EXT_MAX).ADDINT\n&NESTMAX SETA  &NESTMAX+&EXT_MAX       * Add external count to max.\n         AGO   .CHKNLVL                * And go check nesting level\n.ADDINT  ANOP\n&NESTMAX SETA  &NESTMAX+&INT_MAX       * Add internal count to max.\n.CHKNLVL ANOP\n.*\n.* Issue message if Internal save-areas inadequate.\n         AIF   (NOT &PGM_REC AND &NESTMAX GT &BXA_SAVES).MSG1\n         AIF   (NOT &PGM_REC AND &NESTMAX LT &BXA_SAVES).MSG2\n         AIF   (&PGM_REC AND &NESTMAX GT &BXA_SAVES).MSG3\n         AIF   (&PGM_REC AND &NESTMAX LE &BXA_SAVES).MSG4\n         AGO   .NOMSG\n.MSG1    MNOTE 8,'Insufficient internal save-areas; at least &NESTMAX a*\n               re required'\n         AGO   .NOMSG\n.MSG2    MNOTE 4,'Too many internal save-areas; only &NESTMAX are requi*\n               red'\n         AGO   .NOMSG\n.MSG3    MNOTE 8,'Insufficient internal save-areas, apart from recursio*\n               n &NESTMAX at least are required'\n         AGO   .NOMSG\n.MSG4    MNOTE 0,'Do you have sufficient internal save-areas; apart fro*\n               m recursion &NESTMAX at least are required'\n.NOMSG   ANOP\n.*\n.* End assembly\n         AIF   (K'&EP EQ 0).NO_EP\n         _END  &EP\n         MEXIT\n.*\n.NO_EP   ANOP\n         _END\n.*\n.MEND    MEND\n./ ADD NAME=ENDCASE  0100-20096-20096-0111-00149-00149-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: ENDCASE\n.* Combines with CASE and ELSE to conditionally execute blocks of code\n.*\n&LABEL   ENDCASE ,                     * No arguments allowed\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC ENDCASE                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_LBL(5)         * Labels\n         GBLA  &BXA_STK_LVL(5)         * Levels\n         LCLC  &OP                     * Last opcode on stack\n         LCLA  &LVL                    * Last level on stack\n         LCLC  &LBL                    * Last label on stack\n         LCLA  &I                      * Stack pointer\n.*\n.* Check label parameter\n         AIF   (K'&LABEL EQ 0).NOERR1\n.ERR1    MNOTE 4,'Label ignored'\n.NOERR1  ANOP\n.*\n.* Check nr of parameters\n         AIF   (N'&SYSLIST EQ 0).NOERR2\n         AIF   (K'&SYSLIST(1) GT 0).ERR2A\n         AIF   (N'&SYSLIST EQ 1).NOERR2\n         AIF   (K'&SYSLIST(2) GT 0).ERR2A\n         AIF   (N'&SYSLIST EQ 2).NOERR2\n.ERR2A   MNOTE 4,'No arguments expected: ignored'\n.NOERR2  ANOP\n.*\n.* Check that current stack-entry designates a case or else-block\n&I       SETA  &BXA_STK                * Copy stack pointer\n         AIF   (&I LT 1).ERR3A         * Stack underflow\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack\n         AIF   ('&OP' EQ 'CASE').NOERR3\n         AIF   ('&OP' NE 'ELSE').ERR3B\n&I       SETA  &I-1                    * Point preceding entry\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract preceding opcode\n         AIF   ('&OP' NE 'CASE').ERR3C\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'No preceding CASE statement: ignored'\n         MEXIT\n.ERR3B   MNOTE 8,'Cannot use ENDCASE to terminate a &OP.-block: ignored*\n               '\n         MEXIT\n.ERR3C   MNOTE 8,'Cannot use ENDCASE to terminate an ELSE block for &OP*\n               '\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Remove all stack entries with the current nesting level\n.* If an ELSE-statement precedes this ENDCASE, then the ELSE has\n.* already generated the target label of the last preceding CASE\n.* statement.\n.*\n.* Comment line to delimit the ELSE-block\n*\n.*\n.* Set up to loop thru CASE-entries\n.* If last entry was ELSE, handle the ELSE before entering the loop\n&I       SETA  &BXA_STK                * Point current stack entry\n&LVL     SETA  &BXA_STK_LVL(&I)        * Extract current nesting level\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract last opcode\n         AIF   ('&OP' NE 'ELSE').LOOP1 * Loop to drop CASEs\n.* Terminate ELSE-block\n&LBL     SETC  '&BXA_STK_LBL(&I)'      * Extract end-of-else label\n&LBL     LABEL ,                       * End of ELSE-block\n&I       SETA  &I-2                    * Remove ELSE and last CASE\n         AIF   (&I EQ 0).LOOP1OK       * If nothing left: skip loop\n.*\n.* Now loop to terminate all remaining CASE-blocks of this level\n.LOOP1   ANOP  ,\n         AIF   (&BXA_STK_LVL(&I) NE &LVL).LOOP1OK * LVL-change: endloop\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract last opcode\n         AIF   ('&OP' NE 'CASE').INTERR * Internal error\n&LBL     SETC  '&BXA_STK_LBL(&I)'      * Extract end-of-else label\n&LBL     LABEL ,                       * End of CASE-block\n&I       SETA  &I-1                    * Remove ELSE-entry from stack\n         AIF   (&I GT 0).LOOP1         * If still valid: remove next\n.LOOP1OK ANOP  ,\n.*\n.* Update the real stack pointer\n&BXA_STK SETA  &I\n         AGO   .MEND\n.*\n.INTERR  ANOP  ,\n         MNOTE 12,'Internal error in ENDCASE macro'\n.*\n.MEND    MEND\n./ ADD NAME=ENDDO    0100-20096-20096-0111-00170-00170-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: ENDDO\n.* Combines with DO WHILE/UNTIL to repeatedly execute a block of code\n.*\n&LABEL   ENDDO ,                       * No arguments allowed\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC ENDDO                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_DO(5)          * DO labels\n         GBLC  &BXA_STK_LBL(5)         * Forward Labels\n         GBLC  &BXA_STK_CND(5)         * Conditions\n         GBLC  &BXA_STK_CLB(5)         * Condition labels\n         GBLC  &BXA_STK_USE(5)         * USEd count registers\n         LCLC  &OP                     * Last opcode on stack\n         LCLC  &LBL                    * Last label on stack\n         LCLC  &CND                    * Last Condition on stack\n         LCLC  &CLB                    * Last Condition label on stack\n         LCLC  &USE                    * Last USEd register on stack\n         LCLC  &DO                     * Loopback-label\n         LCLA  &I                      * Stack pointer\n.*\n.* Check label parameter\n         AIF   (K'&LABEL EQ 0).NOERR1\n.ERR1    MNOTE 4,'Label ignored'\n.NOERR1  ANOP\n.*\n.* Check nr of parameters\n         AIF   (N'&SYSLIST EQ 0).NOERR2\n         AIF   (K'&SYSLIST(1) GT 1).ERR2\n         AIF   (N'&SYSLIST EQ 1).NOERR2\n         AIF   (K'&SYSLIST(2) GT 1).ERR2\n         AIF   (N'&SYSLIST EQ 2).NOERR2\n.ERR2    MNOTE 4,'No arguments expected: ignored'\n.NOERR2  ANOP\n.*\n.* Check that current stack-entry designates a valid DO-type operation\n&I       SETA  &BXA_STK                * Copy stack pointer\n         AIF   (&I LT 1).ERR3A         * Stack underflow\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack\n&LBL     SETC  '&BXA_STK_LBL(&I)'      * and end-of-block label\n&DO      SETC  '&BXA_STK_DO(&I)'       * Loopback label\n&CND     SETC  '&BXA_STK_CND(&I)'      * Condition\n&CLB     SETC  '&BXA_STK_CLB(&I)'      * Condition label\n&USE     SETC  '&BXA_STK_USE(&I)'      * USEd label\n         AIF   ('&OP' EQ 'DO').DO\n         AIF   ('&OP' EQ 'DOWHILE').DOWHILE\n         AIF   ('&OP' EQ 'DOUNTIL').DOUNTIL\n         AIF   ('&OP' EQ 'DOCOUNT').DOCOUNT\n         AGO   .ERR3B\n.ERR3A   MNOTE 8,'No preceding DO statement: ignored'\n         MEXIT\n.ERR3B   MNOTE 8,'Cannot use ENDDO to terminate a &OP.-block: ignored'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Generate code for ENDDO after DO WHILE\n.* Loopback-label to WHILE condition is in BXA_STK_DO\n.* End-of-loop-label (used when WHILE cond. is false) in BXA_STK_LBL\n.*\n.DOWHILE ANOP  ,\n         B     &DO                     * Back to end-of-loop test\n&LBL     LABEL ,                       * End of DO WHILE loop\n         AGO   .UNSTACK\n.*\n.* Generate code for ENDDO after DO COUNT\n.* Loopback-label to DO UNTIL is in BXA_STK_DO\n.* Loop counter register is in BXA_STK_CND\n.* END-of-loop label is in BXA_STK_LBL\n.*\n.DOCOUNT ANOP  ,                       *\n&CLB     BCT   &CND,&DO                * Loop until count reaches zero\n         AIF   (K'&LBL EQ 0).NOLBL     *\n&LBL     LABEL ,                       * End of do-loop\n.NOLBL   ANOP  ,                       *\n         AIF   (K'&USE EQ 0).UNSTACK   *\n         DROP  &USE                    * Count reg no longer needed\n         AGO   .UNSTACK                *\n.*\n.* Generate code for ENDDO after DO UNTIL\n.* Loopback-label to DO UNTIL is in BXA_STK_DO\n.* End-of-loop-condition is in BXA_STK_CND\n.* END-of-loop label is in BXA_STK_LBL\n.*\n.DOUNTIL ANOP  ,\n&CLB     GOTO  &DO,UNLESS,&CND         * Loop until condition met\n         AIF   (K'&LBL EQ 0).UNSTACK   *\n&LBL     LABEL ,                       * End of do-loop\n         AGO   .UNSTACK                *\n.*\n.* Generate code for ENDDO after DO\n.* Loopback-label to DO UNTIL is in BXA_STK_DO\n.* End-of-loop-condition is non-existent\n.* END-of-loop label is in BXA_STK_LBL\n.*\n.DO      ANOP  ,\n         B     &DO                     * Repeat loop\n.*\n.* If &LBL is empty, no LEAVE macro exits from this loop: Error!\n         AIF   (K'&LBL NE 0).NOERR4\n.ERR4A   MNOTE 8,'No LEAVE macro found to terminate this loop'\n.NOERR4  ANOP  ,\n.*\n&LBL     LABEL ,                       * End of do-loop\n.*\n.* Remove DO-entry from stack\n.UNSTACK ANOP  ,\n&BXA_STK SETA  &BXA_STK-1\n.*\n.MEND    MEND\n./ ADD NAME=ENDIF    0100-20096-20096-0111-00116-00116-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: ENDIF\n.* Combines with IF and ELSE to conditionally execute blocks of code\n.*\n&LABEL   ENDIF ,                       * No arguments allowed\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC ENDIF                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_LBL(5)         * Labels\n         LCLC  &OP                     * Last opcode on stack\n         LCLC  &LBL                    * Last label on stack\n         LCLA  &I                      * Stack pointer\n.*\n.* Check label parameter\n         AIF   (K'&LABEL EQ 0).NOERR1\n.ERR1    MNOTE 4,'Label ignored'\n.NOERR1  ANOP\n.*\n.* Check nr of parameters\n         AIF   (N'&SYSLIST EQ 0).NOERR2\n         AIF   (K'&SYSLIST(1) GT 1).ERR2\n         AIF   (N'&SYSLIST EQ 1).NOERR2\n         AIF   (K'&SYSLIST(2) GT 1).ERR2\n         AIF   (N'&SYSLIST EQ 2).NOERR2\n.ERR2    MNOTE 4,'No arguments expected: ignored'\n.NOERR2  ANOP\n.*\n.* Check that current stack-entry designates a then or else-block\n&I       SETA  &BXA_STK                * Copy stack pointer\n         AIF   (&I LT 1).ERR3A         * Stack underflow\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack\n&LBL     SETC  '&BXA_STK_LBL(&I)'      * and end-of-block label\n         AIF   ('&OP' EQ 'IF').NOERR3\n         AIF   ('&OP' NE 'ELSE').ERR3B\n&I       SETA  &I-1                    * Point preceding stack entry\n         AIF   ('&BXA_STK_OP(&I)' EQ 'IF').NOERR3 * ELSE after IF\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract preceding opcode\n         AGO   .ERR3B\n.ERR3A   MNOTE 8,'No preceding IF statement: ignored'\n         MEXIT\n.ERR3B   MNOTE 8,'Cannot use ENDIF to terminate a &OP.-block: ignored'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Generate code and remove stack entry/entries\n         AIF   ('&OP' EQ 'ELSE').ELSE\n&BXA_STK SETA  &BXA_STK-1              * Remove IF-entry\n&LBL     LABEL ,                       * End of then-logic\n         MEXIT\n.*\n.ELSE    ANOP  ,\n&BXA_STK SETA  &BXA_STK-2              * Remove IF and ELSE entries\n&LBL     LABEL ,                       * End of else-logic\n.*\n.MEND    MEND\n./ ADD NAME=ENDSR    0100-20096-20096-0111-00283-00283-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates code to end a subroutine\n.*\n&LABEL   ENDSR &RC=0,                  * Returncode, (reg) or *        *\n               &KEEPREG=               * Registers NOT to be restored\n.*\n.* &RC  Specifies the returncode. If not specified, defaults to 0.\n.*      If specified as *, the value in R15 will be used.\n.* &KEEPREG specifies a register or a list of registers that are not\n.*          to be restored upon return. The values of these registers\n.*          will be passed back to the caller.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC ENDSR                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &_REG                   * Register in &RC=(reg)\n         LCLA  &_REGNO                 * Register nr in &RC=(reg)\n         LCLA  &I                      * Index for &KEEPREG\n         LCLC  &_KR                    * 1 register to keep\n         LCLB  &_KEEP(16)              * register 0-15 keep Y/N\n         LCLA  &J                      * Index for &_KEEP\n         GBLC  &BXA_SUBR               * Name of current subroutine\n         GBLC  &BXA_SUBRTP             * Type of current subroutine\n         GBLB  &BXA_PGM                * PGM expanded Yes/No\n         GBLB  &SP_SHOWALL             * SYSPARM option\n         GBLC  &SYSASCE                * Current ASC mode\n         GBLA  &BXA_NUMVAL             * Return value from CHKREG\n         GBLC  &BXA_USE_R12            * Start label of mainline\n         GBLC  &BXA_WALAB              * Start label of dynamic area\n.*\n.* PGM must have been expanded\n         AIF   (&BXA_PGM).NOERR0A\n         MNOTE 8,'PGM-macro must be coded before using BEGSR/ENDSR'\n.NOERR0A ANOP\n.*\n.* Check that the structured programming stack is empty\n         CHK_STACK RESET=YES           *\n.*\n.* Check validity of RC parameter if in register notation\n         AIF   ('&RC'(1,1) NE '(').NOERR1\n         AIF   (N'&RC EQ 0).ERR1A\n&_REG    SETC  '&RC(1)'\n         AIF   (N'&RC GT 1).ERR1B\n         AGO   .NOERR1B\n.ERR1A   MNOTE 8,'No register specified in sublist of RC parameter'\n         AGO   .NOERR1\n.ERR1B   MNOTE 4,'More than 1 register specified in sublist of RC param*\n               eter'\n.NOERR1B ANOP  ,\n         CHKREG &_REG,g\n         AIF   (&BXA_RC GT 4).ERR1C\n&_REGNO  SETA  &BXA_NUMVAL             * Save nr of register\n         AGO   .NOERR1\n.ERR1C   ANOP  ,\n&_REG    SETC  (DOUBLE '&_REG')\n         MNOTE 8,'&_REG is not a valid general purpose register'\n.NOERR1  ANOP  ,\n.*\n.* Check validity of KEEPREG parameter\n         AIF   (K'&KEEPREG EQ 0).NOERR2\n         AIF   ('&KEEPREG'(1,1) EQ '(').CHKERR2A\n&_KR     SETC  '&KEEPREG'\n&I       SETA  1\n         AGO   .ERR2CHK\n.CHKERR2A ANOP\n         AIF   (N'&KEEPREG EQ 0).ERR2A\n&I       SETA  1\n         AIF   (N'&KEEPREG EQ 1).ERR2B\n.ERR2LOOP ANOP\n&_KR     SETC  '&KEEPREG(&I)'\n.ERR2CHK ANOP\n         CHKREG &_KR,g                 * Valid register?\n         AIF   (&BXA_RC GT 4).ERR2F    * No: issue error\n         AIF   (&BXA_NUMVAL EQ 15).ERR2C\n         AIF   (&BXA_NUMVAL EQ 14).ERR2D\n         AIF   (&BXA_NUMVAL EQ 13).ERR2E\n         AIF   (&BXA_NUMVAL NE 0 AND '&BXA_SUBRTP' EQ 'ESTAE').ERR2G\n&J       SETA  &BXA_NUMVAL+1           * Index zero invalid\n&_KEEP(&J) SETB 1                      * Set keep-indicator on\n.*\n.ERR2NEXT ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&KEEPREG).NOERR2\n         AGO   .ERR2LOOP\n.*\n.ERR2A   MNOTE 4,'No entries in KEEPREG-list'\n         AGO   .NOERR2\n.ERR2B   MNOTE 4,'Only 1 entry in KEEPREG-list'\n         AGO   .ERR2LOOP\n.ERR2C   MNOTE 8,'Register 15 invalid in KEEPREG, use RC=*'\n         AGO   .ERR2NEXT\n.ERR2D   MNOTE 8,'Register 14 invalid in KEEPREG'\n         AGO   .ERR2NEXT\n.ERR2E   MNOTE 4,'Register 13 useless in KEEPREG, is always kept'\n         AGO   .ERR2NEXT\n.ERR2F   ANOP  ,\n&_KR     SETC  (DOUBLE '&_KR')\n         MNOTE 8,'&_KR is not a valid general purpose register'\n         AGO   .ERR2NEXT\n.ERR2G   MNOTE 8,'For ESTAE-type routines only R0 can be specified with*\n                KEEPREG'\n         AGO   .ERR2NEXT\n.NOERR2  ANOP\n.*\n.* Check the current subroutine name\n         AIF   ('&BXA_SUBR' NE '*MAIN').NOERR3\n.ERR3    MNOTE 8,'ENDSR without preceding BEGSR'\n.NOERR3  ANOP\n.*\n.* For RETRY-routines, no parameters should be specified\n         AIF   ('&BXA_SUBRTP' NE 'RETRY').NOERR4\n         AIF   ('&RC' EQ '0').NOERR4A\n.ERR4A   MNOTE 4,'RC-parameter ignored for RETRY-routine'\n.NOERR4A ANOP\n         AIF   (K'&KEEPREG EQ 0).NOERR4\n.ERR4B   MNOTE 4,'KEEPREG-parameter ignored for RETRY-routine'\n.NOERR4  ANOP\n.*\n.* Check positional parameters\n         AIF   (N'&SYSLIST EQ 0).NOERR5\n         AIF   (K'&SYSLIST(1) NE 0).ERR5A\n         AIF   (N'&SYSLIST EQ 1).NOERR5\n         AIF   (K'&SYSLIST(2) NE 0).ERR5A\n         AIF   (N'&SYSLIST EQ 2).NOERR5\n.ERR5A   MNOTE 4,'No positional parameters expected: ignored'\n.NOERR5  ANOP  ,                       *\n.*\n.* Generate code\n&LABEL   LABEL\n         AIF   ('&BXA_SUBRTP' EQ 'RETRY').RETRY\n         AIF   ('&RC' EQ '*').RETCDOK\n*\n* Load returncode\n         AIF   ('&RC'(1,1) EQ '(').REG\n         AIF   ('&RC' EQ '0').RETCD0\n.* Normal specification:\n         LA    R15,&RC                 * Load returncode\n         AGO   .RETCDOK\n.* Returncode 0:\n.RETCD0  ANOP\n         CLEAR R15                     * Set returncode 0\n         AGO   .RETCDOK\n.* Returncode from register\n.REG     ANOP\n         AIF   ('&_REGNO' EQ '15').RETCDOK\n         LR    R15,&_REG               * Load returncode\n.RETCDOK ANOP  ,\n*\n* Find last internal save-area used\n         LT    R14,SAVEINTU            * Point to last-used save-area\n         ABND  Z                       * No save-area: Abend\nINT      USE   SAVEAREA,R14            * Address save-area\n         AIF   ('&SYSASCE' EQ 'P').AR14OK\n         CLEAR AR14                    * AR-mode: set AR14 to primary\n.AR14OK  ANOP  ,                       *\n         LA    R0,&BXA_SUBR            * Point to routine's EPA\n         C     R0,INT.SAVEHDR          * Correct?\n         ABND  NE                      * If not: Abend\n.*\n.* If keepregs specified: save the registers to keep\n         AIF   (K'&KEEPREG EQ 0).NOKEEP\n&J       SETA  0                       * Index into &_KEEP\n.KEEPLOOP ANOP\n&J       SETA  &J+1                    * Point next entry\n         AIF   (&J GE 13).NOKEEP       * Reg 13 and higher: invalid\n         AIF   (NOT &_KEEP(&J)).KEEPLOOP * If off: do not save reg\n&I       SETA  &J-1                    * Get register number\n&_KR     SETC  'R'.'&I'                * This is the register name\n         ST    &_KR,INT.SAVED&_KR      * Save register value in SA\n         AGO   .KEEPLOOP               * And process next entry\n.NOKEEP  ANOP\n.*\n         AIF   ('&BXA_SUBRTP' EQ 'ESTAE').ESTAE\n*\n* Restore registers: R14 now points to last-used internal SA\n         MVC   SAVEINTU,INT.SAVEPREV   * Deactivate current SA\n         LM    R0,R12,INT.SAVEDR0      * Restore Regs 0-12\n*                                      * Register 13 remains unchanged\n         L     R14,INT.SAVEDR14        * Restore Reg 14\n*                                      * Register 15 retains retcd\n         AGO   .DROPINT\n.*\n.ESTAE   ANOP\n*\n* Upon entry to this ESTAE routine 2 save areas have been allocated.\n* These contain both a copy of the external save-area and the entry\n* registers (R14-R2) to the ESTAE routine. See the BEGSR comments\n* for details.\n*\n* R14 now points to last-used internal SA (INT.SAVEAREA)\n         ST    R15,INT.SAVEDR15        * Save returncode\n         MVC   INT.SAVEDR7,INT.SAVEPREV * R7 will be ptr to prev. SA\n         LM    R14,R12,INT.SAVEDR14    * Restore registers\n         DROP  ,                       * All USINGS invalid!\n         LR    R13,R3                  * Reset to system SA (in SDWA)\nINT      USE   SAVEAREA,R7             * R7 points to previous SA\nOUR      USE   BXASAVE,R2              * R2 points to external SA\n         AIF   ('&SYSASCE' EQ 'P').AR7OK\n         CLEAR AR7                     * AR-mode: set AR7 to primary\n         CPY   AR2,AR7                 *          and AR2 as well\n.AR7OK   ANOP\n         STM   R4,R6,OUR.SAVEPTRS      * Restore header of ext.SA\n         MVC   OUR.SAVEDR14(15*L'SAVEDR14),INT.SAVEDR14 * Copy 15 regs *\n                                         * to restore contents of extSA\n         MVC   OUR.SAVEINTU,INT.SAVEPREV * Deactivate 2 int.SA's\n.*\n.DROPINT ANOP\n         DROP  INT                     * R14 (SAVEAREA)\n         BR    R14                     * Return to caller\n         AGO   .DONE\n.*\n.RETRY   ANOP  ,                       *\n         ABND  ,                       * Return by branch to resume adr\n.*\n.DONE    ANOP  ,                       *\n         DROP  ,                       *\n         USE   &BXA_USE_R12,R12        * Set code addressable\n         USE   &BXA_WALAB,R13,         * Set workarea addressable      *\n               START=&BXA_WALAB+SAVEPRFX_LEN\n.*\n&BXA_SUBR SETC '*MAIN'                 * Now we're in main code again\n&BXA_SUBRTP SETC ''                    * Now we're in normal code again\n.*\n.MEND    MEND\n./ ADD NAME=EPSW     0100-20096-20096-0111-00118-00118-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Extract current PSW\n.*\n&LABEL   EPSW  &REG                    * Register set to be used\n.*\n.* &REG  specifies an even register. The PSW will be placed in register\n.*       &REG and &REG+1.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EPSW                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &_REG\n         LCLC  &_REG1,&_REG2\n         LCLA  &REGN\n.*\n.* Check the REG parameter\n         AIF   (K'&REG EQ 0).ERR1A\n&_REG    SETC  '&REG'\n         AIF   ('&_REG'(1,1) NE '(').LAB1A * If enclosed in parentheses\n&_REG    SETC  '&REG(1)'               * Remove parentheses\n.LAB1A   ANOP\n         AIF   ('&_REG'(1,1) NE 'R').LAB1B * If R...\n&_REG    SETC  '&_REG'(2,*)            * Remove leading R\n&_REG1   SETC  'R'\n&_REG2   SETC  'R'\n.LAB1B   ANOP\n         AIF   ('&_REG' EQ '0').LAB1C\n         AIF   ('&_REG' EQ '00').LAB1C\n         AIF   ('&_REG' EQ '14').LAB1C\n         AGO   .ERR1B\n.LAB1C   ANOP\n&_REG1   SETC  '&_REG1'.'&_REG'\n&REGN    SETA  &_REG\n&REGN    SETA  &REGN+1\n&_REG2   SETC  '&_REG2'.'&REGN'\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'You should specify an even general purpose register'\n         MEXIT\n.ERR1B   MNOTE 8,'You can use only R0/R1 or R14/R15'\n.NOERR1  ANOP\n.*\n.* Check the number of parameters\n         AIF   (N'&SYSLIST GT 1).ERR2\n         AGO   .NOERR2\n.ERR2    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR2  ANOP\n.*\n.* Generate code\n&LABEL   LA    &_REG2,_EPSW&SYSNDX     * Load internal return address\n         LA    &_REG1,1                * Amode bit\n         SLL   &_REG1,31               *   into bit 0\n         OR    &_REG2,&_REG1           *   of the return address\n         BAKR  &_REG2,R0               * Create stack entry (nobranch)\n         LA    &_REG2,1                * Specifies PSW for ESTA\n         ESTA  &_REG1,&_REG2           * Put PSW into registers\n         PR    ,                       * Remove stack entry\n_EPSW&SYSNDX LABEL ,                   *\n.*\n.MEND    MEND\n./ ADD NAME=EQU      0100-20096-20096-0111-00316-00316-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's EQU statement\n.*\n&LABEL   EQU   &VALUE,                 * Value to be assigned          *\n               &LEN,                   * Length attribute              *\n               &TYPE                   * Type attribute\n.*\n.* &LABEL mandatory\n.* &VALUE specifies the value to be assigned to &LABEL\n.* &LEN   specifies an explicit length attribute\n.* &TYPE  specifies an explicit type attribute\n.*        IBM-assigned types are:\n.*        $ - WXTRN symbol\n.*        @ - Graphics field\n.*        A - A-type address field\n.*        B - Binary field\n.*        C - Character field\n.*        D - Long floating point field\n.*        E - Short floating point field\n.*        F - Fullword fixed-point field\n.*        G - Fixed-point field, explicit length\n.*        H - Halfword fixed-point field\n.*        I - Machine instruction\n.*        J - Control section name\n.*        K - Floating point field, explicit length\n.*        L - Extended floating point field\n.*        M - Macro instruction\n.*        N - Self-defining term\n.*        O - Omitted operand\n.*        P - Packed decimal field\n.*        Q - Q-type address field\n.*        R - Address field of type A, S, Q, V, Y, with explicit length\n.*        S - S-type address field\n.*        T - EXTRN symbol\n.*        U - Undefined\n.*        V - V-type address field\n.*        W - CCW or CCWn instruction\n.*        X - Hexadecimal field\n.*        Y - Y-type address field\n.*        Z - Zoned decimal field\n.*        Bixoft-assigned types are:\n.*        a - Access register\n.*        b - Bit field\n.*        c - Control register\n.*        f - Floating point register\n.*        g - General purpose register\n.*        j - Embedded control block (DCL-declared)\n.*        p - Pointer register\n.*        v - Value assigned to a code field\n.*        0 - Literal decimal number of unspecified type and length\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EQU                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_NUMVAL             * Return value from CHKLIT\n         GBLA  &BXA_EQUOVR             * Ptr to last valid\n         GBLC  &BXA_EQUOVR_LAB(50)     * Labels\n         GBLC  &BXA_EQUOVR_VAL(50)     * Values\n         GBLC  &BXA_EQUOVR_LEN(50)     * Lengths\n         GBLC  &BXA_EQUOVR_LOC(50)     * Locations\n         GBLC  &BXA_EQUOVR_TYP(50)     * Types\n         LCLA  &I                      * Index\n         LCLC  &_LABEL                 *\n         LCLC  &_VALUE                 *\n         LCLC  &_LEN                   *\n         LCLC  &_LOC                   * location for bit-fields\n         LCLC  &_TYPE                  *\n         LCLC  &_TYP                   * Single-letter value\n         LCLB  &SIMPLE_VAL             * On if VALUE is simply a var\n         LCLB  &RENAMED                * On if *NEWNAME entry found\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST LE 3).NOERR1\n.ERR1    MNOTE 4,'More than 3 arguments: remainder ignored'\n.NOERR1  ANOP  ,                       *\n.*\n.* Set up default values\n&_LABEL  SETC  '&LABEL'                *\n&_VALUE  SETC  '&VALUE'                *\n&_LEN    SETC  '&LEN'                  *\n&_TYPE   SETC  '&TYPE'                 *\n.*\n.* Check for overrides from EQUOVR\n.CHKOVR  ANOP  ,                       *\n&RENAMED SETB  0                       * No *NEWNAME found\n&I       SETA  0                       * I indexes BXA_EQUOVR_xxx\n.LOOP1   ANOP  ,                       * Search entry\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &BXA_EQUOVR).LOOP1NF * At end: not found\n         AIF   ('&BXA_EQUOVR_LAB(&I)' NE '&_LABEL').LOOP1 *Skip mismtch\n.*\n.* Found a match: set up replacement variables\n         AIF   ('&BXA_EQUOVR_VAL(&I)' NE '*NEWNAME').NOLAB\n&RENAMED SETB  1                       * *NEWNAME found\n&_LABEL  SETC  '&BXA_EQUOVR_LEN(&I)'   * Len contains new label for equ\n         AGO   .NOLEN                  * VAL and LEN not valid, TYP    *\n                                       *    not examined\n.NOLAB   ANOP  ,                       *\n.* Override value?\n         AIF   (K'&BXA_EQUOVR_VAL(&I) EQ 0).NOVAL\n&_VALUE  SETC  '&BXA_EQUOVR_VAL(&I)'   * Pick up override value\n.NOVAL   ANOP  ,                       *\n.* Override length?\n         AIF   (K'&BXA_EQUOVR_LEN(&I) EQ 0).NOLEN\n&_LEN    SETC  '&BXA_EQUOVR_LEN(&I)'   * Pick up overriding length\n.NOLEN   ANOP\n.* Override type? If bit/value field: also pick up location!\n         AIF   (K'&BXA_EQUOVR_TYP(&I) EQ 0).NOTYP\n&_TYPE   SETC  '&BXA_EQUOVR_TYP(&I)'   * Pick up overriding type\n         AIF   ('&_TYPE' EQ 'C''b''').TYP\n         AIF   ('&_TYPE' EQ 'C''v''').TYP\n         AGO   .NOTYP\n.TYP     ANOP  ,\n&_LOC    SETC  '&BXA_EQUOVR_LOC(&I)'   * Pick up location of bit/value\n.NOTYP   ANOP\n.*\n.* Remove the entry from the tables\n.* Replace current entry by the last-valid,\n.*    then decrement last-valid pointer\n         AIF   (&I EQ &BXA_EQUOVR).DECR * Skip copy if current=last\n&BXA_EQUOVR_LAB(&I) SETC '&BXA_EQUOVR_LAB(&BXA_EQUOVR)'\n&BXA_EQUOVR_VAL(&I) SETC '&BXA_EQUOVR_VAL(&BXA_EQUOVR)'\n&BXA_EQUOVR_LEN(&I) SETC '&BXA_EQUOVR_LEN(&BXA_EQUOVR)'\n&BXA_EQUOVR_TYP(&I) SETC '&BXA_EQUOVR_TYP(&BXA_EQUOVR)'\n&BXA_EQUOVR_LOC(&I) SETC '&BXA_EQUOVR_LOC(&BXA_EQUOVR)'\n.DECR    ANOP  ,                       * Decrement last-valid pointer\n&BXA_EQUOVR SETA &BXA_EQUOVR-1         *    by one\n         AIF   (&RENAMED).CHKOVR       * Check for OVR for renamed EQU\n.*\n.* Generate _EQU statement with overrides, unless *SUPPRESS specified\n.LOOP1NF ANOP  ,                       *\n         AIF   ('&_VALUE' EQ '*SUPPRESS').MEND\n.*\n.* If &_LOC is not empty, the type is overriden to a bit/value-EQUate.\n.* Put the location in the BXA_BITF table before generating the _EQU.\n         AIF   (K'&_LOC EQ 0).NOTABIT\n         AIF   (D'&_LOC).LOCOK\n         MNOTE 8,'Location &_LOC has not (yet) been defined'\n.LOCOK   ANOP  ,\n         GBLC  &(BXA_BITF_&_LABEL)     * Define location variable\n&(BXA_BITF_&_LABEL) SETC '&_LOC'       * And set it to the bit's loc.\n&_LEN    SETC  '&_VALUE'               * Force length to be mask value\n         AGO   .GEN                    * No need to copy implicit type\n.NOTABIT ANOP\n.*\n.* If Type neither specified nor overridden, then copy Type from\n.* &_VALUE if that is a simple expression. I.e. it contains no\n.* parentheses, and no arithmetic (+, -, *, or /).\n.* If it is a length equate (*-something) then default to type '0'\n         AIF   (K'&_TYPE GT 0).TYPEOK  * Type already set\n&I       SETA  ('&_VALUE' FIND '+-*/()')\n         AIF   (&I EQ 0).CHKLIT        * Not a simple expression\n.*\n.* Check whether this is a valid simple length equate\n         AIF   (K'&_LEN NE 0).TYPEOK   * Length given: dont force type\n         AIF   (K'&_VALUE LT 3).TYPEOK * Cannot be *-x\n         AIF   ('&_VALUE'(1,2) NE '*-').TYPEOK * Cannot be *-x\n&_VALUE  SETC  '&_VALUE'(3,*)          * Extract base location\n&I       SETA  ('&_VALUE' FIND '+-*/()')\n         AIF   (&I NE 0).RST_VAL       * Not a simple expression\n         AIF   (NOT D'&_VALUE).RST_VAL * Base location not yet defined\n&_VALUE  SETC  '*-'.'&_VALUE'          * Restore original value\n&_TYPE   SETC  'C''0'''                * Force type of 0\n&_LEN    SETC  '&_VALUE'               * Set length equal to value\n         AGO   .GEN                    * Go generate the equate\n.RST_VAL ANOP  ,                       *\n&_VALUE  SETC  '*-'.'&_VALUE'          * Restore original value\n         AGO   .TYPEOK                 *\n.*\n.* All cases excluded, except literals\n.CHKLIT  ANOP  ,                       *\n         CHKLIT &_VALUE                * Check for being literal number\n         AIF   (&BXA_RC EQ 0).TYPE0    * It is a literal number\n&I       SETA  ('&_VALUE' FIND '''')   * Contains a quote?\n         AIF   (&I GT 0).TYPEOK        * Not a simple expression\n.* Must be a simple variable expression\n&_TYPE   SETC  'T''&_VALUE'            * Copy type of &_VALUE\n&SIMPLE_VAL SETB 1                     * Signal VALUE as a simple var\n         AGO   .TYPEOK\n.TYPE0   ANOP  ,                       * For numeric literals,\n         AIF   (K'&_LEN NE 0).TYPEOK   * Unless length already given,\n&_TYPE   SETC  'C''0'''                * Force type of 0\n.TYPEOK  ANOP  ,                       *\n.* For TYPE=0 set length, except if defaulted and value > X'FFFF'\n         AIF   ('&_TYPE' NE 'C''0''').NOT0 * For type of 0\n         AIF   ('&TYPE' EQ 'C''0''').SETLEN0 * For type of 0\n&I       SETA  &_VALUE                 * Determine value of literal\n         AIF   (&I GT 65535).NOT0      * Max length = X'FFFF'\n.SETLEN0 ANOP  ,                       *\n&_LEN    SETC  '&_VALUE'               * Set length to value\n.NOT0    ANOP ,                        * For future reference\n.*\n.* If this is an EQU for a register (of any kind) then it must be\n.* added to the register translate tables. If the type was specified\n.* explicitly, check the value specified. Otherwise check the tables\n.* of defined registers.\n         AIF   (K'&TYPE EQ 0).CPYTYP   * Type is implicit: other logic\n         AIF   (K'&TYPE LT 4).ERR2     * must be C'.'\n         AIF   ('&TYPE'(1,2) NE 'C''').ERR2 * Check for leading C'\n         AIF   ('&TYPE'(4,1) NE '''').ERR2 * Check for terminating '\n&_TYP    SETC  '&TYPE'(3,1)            * Extract type character\n         AIF   ('&_TYP' GT 'z').GEN    * Catch (nearly) all cases\n         AIF   ('&_TYP' LT 'a').GEN    * Skip non-Bixoft codes\n         AIF   ('&_TYP' EQ 'g').ADDREG * general purpose register\n         AIF   ('&_TYP' EQ 'a').ADDREG * access register\n         AIF   ('&_TYP' EQ 'c').ADDREG * control register\n         AIF   ('&_TYP' EQ 'f').ADDREG * floating point register\n         AGO   .GEN                    * Not a register equate\n.ERR2    MNOTE 8,'Type parameter not specified as C''.'''\n         MEXIT\n.*\n.* The type designation is implicit: see if the &_VALUE operand\n.* specifies a register. If that is the case: copy its number and type\n.CPYTYP  ANOP\n         AIF   (NOT &SIMPLE_VAL).GEN   * Not copying a register: skip\n         GBLA  &(BXA_REGN_&_VALUE)     * Declare number field of source\n         GBLC  &(BXA_REGT_&_VALUE)     * Declare type field of source\n&_TYP    SETC  '&(BXA_REGT_&_VALUE)'   * Copy type-letter\n         AIF   ('&_TYP' EQ '').GEN     * Not a register-type: skip\n         GBLA  &(BXA_REGN_&_LABEL)     * Declare number field of reg\n         GBLC  &(BXA_REGT_&_LABEL)     * Declare type field of reg\n&(BXA_REGN_&_LABEL) SETA &(BXA_REGN_&_VALUE) * Copy register number\n&(BXA_REGT_&_LABEL) SETC '&_TYP'       * Copy the type designation\n         AGO   .GEN\n.*\n.* If a register is declared with explicit type, then assign its\n.* number and type to BXA_REGN_... and BXA_REGT_... respectively\n.ADDREG  ANOP\n         GBLA  &(BXA_REGN_&_LABEL)     * Declare field for reg number\n         GBLC  &(BXA_REGT_&_LABEL)     * Declare field for reg type\n&(BXA_REGN_&_LABEL) SETA &_VALUE       * The designated register number\n&(BXA_REGT_&_LABEL) SETC '&_TYP'       * The type-designating character\n.*\n.* Start generating the ultimate _EQU statement\n.GEN     ANOP\n         AIF   (K'&_TYPE NE 0).EQU3\n         AIF   (K'&_LEN NE 0).EQU2\n.*\n.* Simple equate\n&_LABEL  _EQU  &_VALUE\n         AGO   .EQUOK\n.*\n.* Equate with explicit length attribute\n.EQU2    ANOP  ,                       * EQU with two arguments\n&_LABEL  _EQU  &_VALUE,&_LEN\n         AGO   .EQUOK\n.*\n.* Equate with explicit type attribute and/or explicit length attribute\n.EQU3    ANOP  ,                       * EQU with three arguments\n&_LABEL  _EQU  &_VALUE,&_LEN,&_TYPE\n.*\n.EQUOK   ANOP  ,\n         AIF   (T'&_LABEL NE 'b').MEND\n         AIF   (L'&_LABEL NE 0).MEND\n         MNOTE 4,'What use is a bit mask with a zero value?'\n.*\n.MEND    MEND\n./ ADD NAME=EQUOVR   0100-20096-20096-0111-00191-00191-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro handles the stack of EQU modifications for use by the\n.* EQU macro, which replaces the assembler's EQU instruction\n.*\n&LABEL   EQUOVR &VALUE,                * Value to be assigned          *\n               &LEN,                   * Length attribute              *\n               &TYPE,                  * Type attribute                *\n               &LOC                    * Location\n.*\n.* &LABEL mandatory, except when &VALUE=*END\n.* &VALUE specifies the value to be assigned to &LABEL.\n.*        *END cancels all outstanding EQUOVR requests\n.*        *SUPPRESS suppresses the EQU of &LABEL\n.*        *NEWNAME changes the EQU for &LABEL into one for &LEN,\n.*              i.e. Specify *NEWNAME,newname\n.*        Other values override the EQU-value with the same label\n.* &LEN   specifies an explicit length attribute\n.* &TYPE  specifies an explicit type attribute\n.*        Assigned types are documented in the EQU macro\n.* &LOC   Valid only if &TYPE=C'b' or C'v'. Specifies a relocatable\n.*        expression, which resolves to the location of the byte for\n.*        which the override specifies a mask, bit pattern, or value.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EQUOVR                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_EQUOVR             * Ptr to last valid\n         GBLC  &BXA_EQUOVR_LAB(50)     * Labels\n         GBLC  &BXA_EQUOVR_VAL(50)     * Values\n         GBLC  &BXA_EQUOVR_LEN(50)     * Lengths\n         GBLC  &BXA_EQUOVR_LOC(50)     * Locations\n         GBLC  &BXA_EQUOVR_TYP(50)     * Types\n         LCLA  &I                      * Index\n         LCLC  &_TYPE                  *\n.*\n.* Check LABEL parameter\n         AIF   (K'&LABEL GT 0).NOERR1\n         AIF   ('&VALUE' EQ '*END').NOERR1\n.ERR1    MNOTE 8,'Missing label parameter on EQUOVR'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* At least 1 parameter must be specified\n         AIF   (K'&VALUE NE 0).NOERR2\n         AIF   (K'&LEN NE 0).NOERR2\n         AIF   (K'&TYPE NE 0).NOERR2\n.ERR2A   MNOTE 8,'No arguments supplied to EQUOVR: ignored'\n         MEXIT ,\n.NOERR2  ANOP  ,\n.*\n.* Check the LEN parameter (must be present if VALUE = *NEWNAME)\n         AIF   ('&VALUE' EQ '*NEWNAME' AND K'&LEN EQ 0).ERR3A\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'New name for &LABEL not specified with option *NEWNAM*\n               E'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Check type parameter\n&_TYPE   SETC  '&TYPE'                 * Use specified value\n         AIF   (K'&TYPE EQ 0).NOERR4   * Unless specified as\n         AIF   (K'&TYPE GT 1).NOERR4   *    a single character\n&_TYPE   SETC  'C'''.'&TYPE'.''''      * change to C'.'\n.NOERR4  ANOP\n.*\n.* Check the LOC parameter\n         AIF   ('&_TYPE' EQ 'C''b''' AND K'&LOC EQ 0).ERR5A\n         AIF   ('&_TYPE' EQ 'C''v''' AND K'&LOC EQ 0).ERR5B\n         AIF   ('&_TYPE' EQ 'C''b''').NOERR5\n         AIF   ('&_TYPE' EQ 'C''v''').NOERR5\n         AIF   (K'&LOC NE 0).ERR5C\n         AGO   .NOERR5\n.ERR5A   MNOTE 8,'Overriding &LABEL to a bit field: missing location'\n         MEXIT\n.ERR5B   MNOTE 8,'Overriding &LABEL to a code value: missing location'\n         MEXIT\n.ERR5C   MNOTE 4,'Location not valid for new field type of &LABEL: igno*\n               red'\n.NOERR5  ANOP\n.*\n.* Check number of parameters\n         AIF   ('&VALUE' EQ '*END' AND N'&SYSLIST GT 1).ERR6A\n         AIF   ('&VALUE' EQ '*END').NOERR6\n         AIF   ('&VALUE' EQ '*SUPPRESS' AND N'&SYSLIST GT 1).ERR6A\n         AIF   ('&VALUE' EQ '*SUPPRESS').NOERR6\n         AIF   ('&VALUE' EQ '*NEWNAME' AND N'&SYSLIST GT 2).ERR6B\n         AIF   ('&VALUE' EQ '*NEWNAME').NOERR6\n         AIF   ('&_TYPE' EQ 'C''b''' AND N'&SYSLIST GT 4).ERR6D\n         AIF   ('&_TYPE' EQ 'C''v''' AND N'&SYSLIST GT 4).ERR6D\n         AIF   ('&_TYPE' EQ 'C''b''').NOERR6\n         AIF   ('&_TYPE' EQ 'C''v''').NOERR6\n         AIF   (N'&SYSLIST GT 3).ERR6C\n         AGO   .NOERR6\n.ERR6A   MNOTE 4,'EQUOVR &LABEL with more than 1 argument: remainder ig*\n               nored'\n         AGO   .NOERR6\n.ERR6B   MNOTE 4,'EQUOVR &LABEL with more than 2 arguments: remainder i*\n               gnored'\n         AGO   .NOERR6\n.ERR6C   MNOTE 4,'EQUOVR &LABEL with more than 3 arguments: remainder i*\n               gnored'\n         AGO   .NOERR6\n.ERR6D   MNOTE 4,'EQUOVR &LABEL with more than 4 arguments: remainder i*\n               gnored'\n.NOERR6  ANOP\n.*\n.* *END or a normal EQUOVR?\n         AIF   ('&VALUE' EQ '*END').END\n.*\n.* Normal: add entries to tables\n&I       SETA  &BXA_EQUOVR+1           * Next free entry\n&BXA_EQUOVR_LAB(&I) SETC '&LABEL'      * Insert label, value, length,\n&BXA_EQUOVR_VAL(&I) SETC '&VALUE'      *   and type parameters\n&BXA_EQUOVR_LEN(&I) SETC '&LEN'        *   into tables\n&BXA_EQUOVR_TYP(&I) SETC '&_TYPE'      *\n&BXA_EQUOVR_LOC(&I) SETC '&LOC'        *\n&BXA_EQUOVR SETA &I                    * And update ptr to last valid\n         MEXIT\n.*\n.* Ending current EQUOVR requests. Issue a message for any unused\n.* entries in BXA_EQUOVR tables.\n.END     ANOP\n&I       SETA  0                       * I indexes BXA_EQUOVR_xxx\n.LOOP1   ANOP  ,                       * For all current entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &BXA_EQUOVR).LOOP1OK * At end: quit loop\n         MNOTE 4,'EQUOVR for &BXA_EQUOVR_LAB(&I) discarded'\n         AGO   .LOOP1\n.LOOP1OK ANOP\n&BXA_EQUOVR SETA 0                     * Reset valid counter to 0\n.*\n.MEND    MEND\n./ ADD NAME=EQUREG   0100-20096-20096-0111-00441-00441-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates an EQU for an available register\n.*\n.* &BXA_RC     will contain 0 if successful\n.*                          4 if successful with warnings\n.*                          8 if unsuccessful\n.* &BXA_NUMVAL will contain assigned register number\n.*\n&LABEL   EQUREG &SEARCH=HIGH,          * HIGH, LOW, or (reg,reg,...)   *\n               &R0=NO,                 * R0 allowed YES/NO             *\n               &TEMP=NO,               * R1, R14, R15 allowed YES/NO   *\n               &PAIR=NO,               * Allocate 1 or 2 registers     *\n               &AR=,                   * Name of access register       *\n               &ODD=,                  * Name of odd reg, or (reg,areg)*\n               &WARN=YES               * YES/NO issue messages\n.*\n.* &LABEL  If specified, an EQU for this label will be generated\n.* &SEARCH Specifies the search sequence. If none of the specified\n.*         registers is available, registers 2-15 and 1 will be tried\n.*         in sequence. If R0=YES was specified registers 2-15 and 0-1\n.*         will be used in stead.\n.* &R0     YES indicates that R0 may be used in the default search\n.* &TEMP   YES indicates that R1, R14, and R15 may be used in the\n.*         default search\n.* &PAIR   YES indicates that a pair of registers is to be allocated\n.*         For a pair the even register will be assigned to the name\n.*         specified in LABEL, and &BXA_NUMVAL will also contain the\n.*         number of the even register.\n.* &ODD    Specifies, for a register pair, the name to assign to the\n.*         odd register. If specified as a pair of names in parentheses\n.*         the first name will be equated to the odd register, the\n.*         second name will be equated to the odd access register.\n.* &WARN   Specifies whether or not messages are to be issued when\n.*         allocation fails\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EQUREG                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &SP_SHOWALL             * Showall option in sysparm\n         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15\n         GBLA  &BXA_NUMVAL             * Retvalue from CHKREG\n         LCLA  &I                      * Index for SEARCH\n         LCLA  &R                      * Register index value\n         LCLA  &REG                    * Register number\n         LCLA  &REGS(16)               * Register search sequence\n         LCLC  &SRCH(16)               * Register search sequence\n         LCLC  &ARG                    * Argument from SEARCH\n         LCLA  &RC                     * Temp. for returncode\n         LCLB  &PASS2                  * On for second search of &REGS\n         LCLC  &_ODD1                  * First ODD-subparm\n         LCLC  &_ODD2                  * Second ODD-subparm\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST EQ 0).NOERR2\n         AIF   (K'&SYSLIST(1) NE 0).ERR2A\n         AIF   (N'&SYSLIST EQ 1).NOERR2\n         AIF   (K'&SYSLIST(2) NE 0).ERR2A\n         AIF   (N'&SYSLIST EQ 2).NOERR2\n.ERR2A   MNOTE 4,'Not expecting any positional parameters: ignored'\n&RC      SETA  4\n.NOERR2  ANOP\n.*\n.* Check R0-parameter\n         AIF   ('&R0' EQ 'NO').NOERR3\n         AIF   ('&R0' EQ 'YES').NOERR3\n.ERR3    MNOTE 4,'R0 must be either YES or NO'\n&RC      SETA  4\n.NOERR3  ANOP\n.*\n.* Check the SEARCH parameter\n         AIF   (K'&SEARCH EQ 0).NOERR4\n         AIF   ('&SEARCH' EQ 'HIGH').NOERR4\n         AIF   ('&SEARCH' EQ 'LOW').NOERR4\n         AIF   ('&SEARCH'(1,1) NE '(').ERR4A\n         AIF   (N'&SEARCH EQ 0).ERR4B\n&I       SETA  0                       * I indexes Search\n&R       SETA  0                       * R indexes REGS\n.LOOP4   ANOP  ,                       * Check all entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SEARCH).LOOP4OK\n&ARG     SETC  '&SEARCH(&I)'           * Extract 1 entry\n         CHKREG &ARG,g                 * GPR?\n         AIF   (&BXA_RC EQ 8).ERR4C    * Invalid register: error\n&R       SETA  &R+1                    * Point free entry in REGS\n&REGS(&R) SETA &BXA_NUMVAL+1           * Put reg.index into REGS\n&SRCH(&R) SETC '&ARG'                  * Put reg.name into SRCH\n         AIF   (&BXA_NUMVAL EQ 0 AND '&R0' NE 'YES').ERR4D\n         AGO   .LOOP4\n.ERR4A   MNOTE 4,'SEARCH parameter neither HIGH, LOW, nor in parenthese*\n               s: ignored'\n&RC      SETA  4\n         AGO   .NOERR4\n.ERR4B   MNOTE 4,'SEARCH parameter contains no values: ignored'\n&RC      SETA  4\n         AGO   .NOERR4\n.ERR4C   ANOP\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 4,'SEARCH contains invalid argument: &ARG is not a regis*\n               ter'\n&RC      SETA  4\n         AGO   .LOOP4\n.ERR4D   ANOP\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 4,'SEARCH contains &ARG (register 0), but R0=YES has not*\n                been specified'\n&RC      SETA  4\n         AGO   .LOOP4\n.LOOP4OK ANOP\n.NOERR4  ANOP\n.*\n.* Check the PAIR parameter\n         AIF   ('&PAIR' EQ 'NO').NOERR5\n         AIF   ('&PAIR' EQ 'YES').NOERR5\n.ERR5    MNOTE 8,'PAIR-parameter must be YES, NO, or omitted'\n         MEXIT\n.NOERR5  ANOP  ,\n.*\n.* Check TEMP-parameter\n         AIF   ('&TEMP' EQ 'NO').NOERR6\n         AIF   ('&TEMP' EQ 'YES').NOERR6\n.ERR6    MNOTE 4,'TEMP must be either YES or NO'\n&RC      SETA  4\n.NOERR6  ANOP\n.*\n.* Check AR-parameter\n         AIF   (K'&AR EQ 0).NOERR7\n         AIF   (K'&LABEL EQ 0).ERR7\n         AGO   .NOERR7\n.ERR7    MNOTE 4,'AR-parameter specified, but label is missing'\n&RC      SETA  4\n.NOERR7  ANOP\n.*\n.* Check ODD parameter\n         AIF   (K'&ODD EQ 0).NOERR8\n         AIF   ('&PAIR' EQ 'YES').NOERR8A\n.ERR8A   MNOTE 4,'PAIR=YES was not specified: ODD-parameter ignored'\n         AGO   .NOERR8                 *\n.NOERR8A ANOP  ,                       *\n         AIF   (K'&LABEL NE 0).NOERR8B\n.ERR8B   MNOTE 4,'LABELE was not specified: ODD-parameter ignored'\n         AGO   .NOERR8                 *\n.NOERR8B ANOP  ,                       *\n&_ODD1   SETC  '&ODD'                  * Assume only 1 parm\n         AIF   ('&ODD'(1,1) NE '(').NOERR8 * Ok: not parenthesized\n         AIF   (N'&ODD LT 1).ERR8C     * Empty sublist\n&_ODD1   SETC  '&ODD(1)'               *\n         AIF   (N'&ODD LT 2).NOERR8    * Only 1 subparm\n&_ODD2   SETC  '&ODD(2)'               *\n         AIF   (N'&ODD NE 2).ERR8D     * Too many subparms\n         AGO   .NOERR8                 *\n.ERR8C   MNOTE 4,'Empty sublist in ODD-parameter: ignored'\n         AGO   .NOERR8                 *\n.ERR8D   MNOTE 4,'More than two entries in ODD-parameter: remainder ign*\n               ored'\n.NOERR8  ANOP  ,\n.*\n.* Check the WARN parameter\n         AIF   ('&WARN' EQ 'YES').NOERR9\n         AIF   ('&WARN' EQ 'NO').NOERR9\n.ERR9    MNOTE 4,'WARN parameter must be YES or NO: YES assumed'\n.NOERR9  ANOP  ,\n.*\n.* Check REGS to find the first available register\n.SEARCH  ANOP  ,                       * (re)start search of &REGS\n&I       SETA  0                       * I is index to REGS\n.LOOP1   ANOP  ,                       *\n&I       SETA  &I+1                    * Point next SEARCH value\n         AIF   (&I GT N'&REGS).LOOP1NF * No register found\n&R       SETA  (&REGS(&I))             * Retrieve register index\n         AIF   (&BXA_USED_REGS(&R)).LOOP1 * Not available: try next one\n.* Available register found\n         AIF   ('&PAIR' NE 'YES').ALLOCOK\n         AIF   ('EOEOEOEOEOEOEOEO'(&R,1) NE 'E').LOOP1 * Skip odd reg.\n&R       SETA  &R+1                    * Associated odd reg. index\n         AIF   (&BXA_USED_REGS(&R)).LOOP1 * Not available: try next one\n.* Even and odd registers both available\n&R       SETA  &R-1                    * Index of even register\n         AGO   .ALLOCOK                *\n.LOOP1NF ANOP  ,                       *\n         AIF   (&PASS2).NOALLOC        * Allocation failed!\n         AIF   ('&SEARCH' EQ 'LOW').SRCHLOW\n         AIF   ('&SEARCH' EQ 'HIGH').SRCHHIG\n         AGO   .SRCHHIG                * Default to HIGH !\n.*\n.* Find first available register for SEARCH=LOW\n.* First try to allocate a register from a pair that already has one\n.* register in use, if this fails, try to allocate any register.\n.SRCHLOW ANOP  ,                       *\n         AIF   ('&PAIR' EQ 'YES').LOWPAIR *\n.*\n.* Check for availability of R0\n         AIF   ('&R0' NE 'YES').LOWNOT0 * Skip if R0 not eligible\n         AIF   (&BXA_USED_REGS(1)).LOWNOT0 * R0 already in USE\n.* OK: R0 available\n&REGS(1) SETA  1                       * Index of R0\n&SRCH(1) SETC  'R0'                    * Name of R0\n&I       SETA  1                       * Point to this entry\n         AGO   .ALLOCOK                *\n.LOWNOT0 ANOP  ,\n.*\n.* Check for availability of R1\n         AIF   ('&TEMP' NE 'YES').LOWNOT1 * Skip if R1 not eligible\n         AIF   (&BXA_USED_REGS(2)).LOWNOT1 * R1 already in USE\n         AIF   (NOT &BXA_USED_REGS(1)).LOWNOT1 * R0 not in USE\n.* OK: R1 available AND R0 in use\n&REGS(1) SETA  2                       * Index of R1\n&SRCH(1) SETC  'R1'                    * Name of R1\n&I       SETA  1                       * Point to this entry\n         AGO   .ALLOCOK                *\n.LOWNOT1 ANOP  ,\n.*\n.* Find a pair from R2-R15 of which one register is in use\n&R       SETA  1                       * R = index of eligible register\n.LOOP2   ANOP  ,                       * Search half of a pair\n&R       SETA  &R+2                    * Point index of even register\n         AIF   (&R GE 15 AND '&TEMP' NE 'YES').LOOP2OK * Quit after R13\n         AIF   (&R GE 17).LOOP2OK      * Quit after R15\n.* Try even reg, if odd one is in use, and vice versa\n&I       SETA  &R+1                    * Index for odd register\n         AIF   (&BXA_USED_REGS(&R) AND NOT &BXA_USED_REGS(&I)).LOOP2AO\n         AIF   (NOT &BXA_USED_REGS(&R) AND &BXA_USED_REGS(&I)).LOOP2AE\n         AGO   .LOOP2                  * Try next pair\n.LOOP2AE ANOP  ,                       * Allocate even register\n&REGS(1) SETA  &R                      * Index of even register\n&R       SETA  &R-1                    * Register number\n&SRCH(1) SETC  'R&R'                   * Name of even register\n&I       SETA  1                       * Point to this entry\n         AGO   .ALLOCOK                *\n.LOOP2AO ANOP  ,                       * Allocate odd register\n&REGS(1) SETA  &I                      * Index of odd register\n&SRCH(1) SETC  'R&R'                   * Name of odd register\n&I       SETA  1                       * Point to this entry\n         AGO   .ALLOCOK                *\n.LOOP2OK ANOP  ,\n.*\n.* No half-used pair found: allocate any single reg or a pair\n.LOWPAIR ANOP  ,\n&R       SETA  1                       * Point free entry in REGS\n         AIF   ('&R0' NE 'YES').LOWNOR0 * R0 eligible?\n&REGS(&R) SETA 1                       * Index for R0\n&SRCH(&R) SETC 'R0'                    * Name of R0\n&R       SETA  &R+1                    * Point next free index\n.LOWNOR0 ANOP  ,                       *\n         AIF   ('&TEMP' NE 'YES').LOWNOR1 * R1 eligible?\n&REGS(&R) SETA 2                       * Index for R1\n&SRCH(&R) SETC 'R1'                    * Name of R1\n&R       SETA  &R+1                    * Point next free index\n.LOWNOR1 ANOP  ,                       *\n&REGS(&R) SETA 3,4,5,6,7,8,9,10,11,12,13,14 * Add reg indexes R2-R13\n&SRCH(&R) SETC 'R2','R3','R4','R5','R6','R7','R8','R9','R10','R11',    *\n               'R12','R13'             * and their names\n&R       SETA  &R+12                   * Point next free index\n         AIF   ('&TEMP' NE 'YES').LOWNOR14 * R14&15 eligible?\n&REGS(&R) SETA 15,16                   * Indexes for R14 and R15\n&SRCH(&R) SETC 'R14','R15'             * Names of R14 and R15\n.LOWNOR14 ANOP ,                       *\n&PASS2  SETB   1                       * Indicate second search\n        AGO    .SEARCH                 * And go search &REGS table\n.*\n.* Find first available register for SEARCH=HIGH (or default)\n.* First try to allocate a register from a pair that already has one\n.* register in use, if this fails, try to allocate any register.\n.SRCHHIG ANOP  ,                       *\n         AIF   ('&PAIR' EQ 'YES').HIGPAIR *\n.*\n.* Check for availability of R0\n         AIF   ('&R0' NE 'YES').HIGNOT0 * Skip if R0 not eligible\n         AIF   (&BXA_USED_REGS(1)).HIGNOT0 * R0 already in USE\n.* OK: R0 available\n&REGS(1) SETA  1                       * Index of R0\n&SRCH(1) SETC  'R0'                    * Name of R0\n&I       SETA  1                       * Point to this entry\n         AGO   .ALLOCOK                *\n.HIGNOT0 ANOP  ,\n.*\n.* Check for availability of R1\n         AIF   ('&TEMP' NE 'YES').HIGNOT1 * Skip if R1 not eligible\n         AIF   (&BXA_USED_REGS(2)).HIGNOT1 * R1 already in USE\n         AIF   (NOT &BXA_USED_REGS(1)).HIGNOT1 * R0 not in USE\n.* OK: R1 available AND R0 in use\n&REGS(1) SETA  2                       * Index of R1\n&SRCH(1) SETC  'R1'                    * Name of R1\n&I       SETA  1                       * Point to this entry\n         AGO   .ALLOCOK                *\n.HIGNOT1 ANOP  ,\n.*\n.* Find a pair from R15-R2 of which one register is in use\n&R       SETA  17                      * R = index of eligible register\n         AIF   ('&TEMP' EQ 'YES').LOOP3 * Start search at R15\n&R       SETA  15                      * Skip R14/R15 if ineligible\n.LOOP3   ANOP  ,                       * Search half of a pair\n&R       SETA  &R-2                    * Point index of even register\n         AIF   (&R LE 1).LOOP3OK       * Quit after R2\n.* Try even reg, if odd one is in use, and vice versa\n&I       SETA  &R+1                    * Index for odd register\n         AIF   (&BXA_USED_REGS(&R) AND NOT &BXA_USED_REGS(&I)).LOOP3AO\n         AIF   (NOT &BXA_USED_REGS(&R) AND &BXA_USED_REGS(&I)).LOOP3AE\n         AGO   .LOOP3                  * Try next pair\n.LOOP3AE ANOP  ,                       * Allocate even register\n&REGS(1) SETA  &R                      * Index of even register\n&R       SETA  &R-1                    * Register number\n&SRCH(1) SETC  'R&R'                   * Name of even register\n&I       SETA  1                       * Point to this entry\n         AGO   .ALLOCOK                *\n.LOOP3AO ANOP  ,                       * Allocate odd register\n&REGS(1) SETA  &I                      * Index of odd register\n&SRCH(1) SETC  'R&R'                   * Name of odd register\n&I       SETA  1                       * Point to this entry\n         AGO   .ALLOCOK                *\n.LOOP3OK ANOP  ,\n.*\n.* No half-used pair found: allocate any single reg or a pair\n.HIGPAIR ANOP  ,\n&R       SETA  1                       * Point free entry in REGS\n         AIF   ('&TEMP' NE 'YES').HIGNOR14 * R14&15 eligible?\n&REGS(&R) SETA 16,15                   * Indexes for R14 and R15\n&SRCH(&R) SETC 'R15','R14'             * Names of R14 and R15\n&R       SETA  &R+2                    * Point next free index\n.HIGNOR14 ANOP ,                       *\n&REGS(&R) SETA 14,13,12,11,10,9,8,7,6,5,4,3 * Add reg indexes R13-R2\n&SRCH(&R) SETC 'R13','R12','R11','R10','R9','R8','R7','R6','R5','R4',  *\n               'R3','R2'               * and their names\n&R       SETA  &R+12                   * Point next free index\n         AIF   ('&TEMP' NE 'YES').HIGNOR1 * R1 eligible?\n&REGS(&R) SETA 2                       * Index for R1\n&SRCH(&R) SETC 'R1'                    * Name of R1\n&R       SETA  &R+1                    * Point next free index\n.HIGNOR1 ANOP  ,                       *\n         AIF   ('&R0' NE 'YES').HIGNOR0 * R0 eligible?\n&REGS(&R) SETA 1                       * Index for R0\n&SRCH(&R) SETC 'R0'                    * Name of R0\n.HIGNOR0 ANOP  ,                       *\n&PASS2  SETB   1                       * Indicate second search\n        AGO    .SEARCH                 * And go search &REGS table\n.*\n.* Available register (or pair) located\n.ALLOCOK ANOP  ,\n         AIF   (NOT &SP_SHOWALL).NOMNOTE\n         AIF   ('&PAIR' NE 'YES').MNOTE1\n         MNOTE *,'Register pair &SRCH(&I) allocated'\n         AGO   .NOMNOTE\n.MNOTE1  ANOP  ,\n         MNOTE *,'Register &SRCH(&I) allocated'\n.NOMNOTE ANOP  ,\n         AIF   (K'&LABEL EQ 0).NOEQU   * Gen EQU for assigned reg?\n&LABEL   EQU   &SRCH(&I)               * Assign available register\n         AIF   (K'&_ODD1 EQ 0).NOEQUO  * Gen EQU for odd register?\n&REG     SETA  &REGS(&I)               * Register number for odd reg\n&_ODD1   EQU   R&REG                   * Assign name of odd register\n.NOEQUO  ANOP  ,                       *\n         AIF   (K'&AR EQ 0).NOEQUAR    * Gen EQU for access register?\n&REG     SETA  &REGS(&I)-1             * Register number\n&AR      EQU   AR&REG                  * Assign access register too\n.NOEQUAR ANOP  ,                       *\n         AIF   (K'&_ODD2 EQ 0).NOEQU   * Gen EQU for odd AR?\n&REG     SETA  &REGS(&I)               * Register number for odd reg\n&_ODD2   EQU   AR&REG                  * And assign odd access register\n.NOEQU   ANOP  ,                       *\n.*\n.* Set up returncode and return value\n&BXA_NUMVAL SETA &REGS(&I)-1           * Create reg.nr from index\n&BXA_RC  SETA  &RC                     * Set returncode\n         MEXIT\n.*\n.* An available register was not found\n.NOALLOC ANOP  ,\n         AIF   ('&WARN' EQ 'NO').EXIT8\n         AIF   ('&PAIR' NE 'YES').NOREG1\n         MNOTE 8,'No register pair is currently available'\n         AGO   .RETRC8\n.NOREG1  ANOP  ,\n         MNOTE 8,'No register is currently available'\n.*\n.RETRC8  ANOP  ,\n         USEDREGS DETAILS\n.*\n.* Set up returncode and return value\n.EXIT8   ANOP  ,\n&BXA_NUMVAL SETA 0                     * No register: default to zero\n&BXA_RC  SETA  8                       * Indicate error to caller\n.*\n.MEND    MEND\n./ ADD NAME=EXCLC    0100-20096-20096-0111-00077-00077-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Execute a CLC-instruction with variable length\n.*\n&LABEL   EXCLC &TO,                    * Comparand 1                   *\n               &FROM,                  * Comparand 2                   *\n               &DECR                   * Decrement indicator\n.*\n.* &TO   specifies the destination field for the move. In stead of a\n.*       length, a register containing the length must be specified.\n.* &FROM specifies the source of the move\n.* &DECR a value of NODEC indicates that the length in the register\n.*       specified in the TO length field, contains the length of\n.*       the move minus 1 for the EX instruction.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXCLC                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   EXQ   &TO,&FROM,CLC,&DECR\n.*\n.MEND    MEND\n./ ADD NAME=EXMVC    0100-20096-20096-0111-00077-00077-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Execute an MVC-instruction with variable length\n.*\n&LABEL   EXMVC &TO,                    * Move destination              *\n               &FROM,                  * Move source                   *\n               &DECR                   * Decrement indicator\n.*\n.* &TO   specifies the destination field for the move. In stead of a\n.*       length, a register containing the length must be specified.\n.* &FROM specifies the source of the move\n.* &DECR a value of NODEC indicates that the length in the register\n.*       specified in the TO length field, contains the length of\n.*       the move minus 1 for the EX instruction.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXMVC                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   EXQ   &TO,&FROM,MVC,&DECR\n.*\n.MEND    MEND\n./ ADD NAME=EXQ      0100-20096-20096-0111-00218-00218-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Execute an instruction with variable length\n.*\n&LABEL   EXQ   &TO,                    * First operand                 *\n               &FROM,                  * Second operand                *\n               &OPCD,                  * Operation code to EXecute     *\n               &DECR                   * Decrement indicator\n.*\n.* &TO   specifies the first operand for the instruction. In the length\n.*       field, a register contining the length must be specified.\n.*       For an MVC the first operand is the destination of the move.\n.* &FROM specifies the second operand of the instruction to be\n.*       executed. For an MVC this is the source of the move.\n.* &OPCD specifies the operation code for the instruction to be\n.*       executed.\n.* &DECR a value of NODEC indicates that the length in the register\n.*       specified in the TO length field, contains the length of\n.*       the move minus 1 for the EX instruction.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXQ                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_EXQ_I(50)          * Instructions to EXecute\n         GBLC  &BXA_EXQ_OPS(50)        * Operands for BXA_EXQ_I\n         GBLA  &BXA_EXQ_LAST           * Last generated entry\n         LCLC  &EXQ_OPS                * Operands\n         LCLC  &_TO                    * First operand (to for MVC)\n         LCLC  &_REG                   * Register with length\n         LCLA  &I,I1,I2                * Index into &TO string\n         LCLB  &_DECR                  * On if DECR=NODEC\n.*\n.* Check the TO parameter\n         AIF   (K'&TO NE 0).NOERR1\n.ERR1A   MNOTE 8,'No first operand specified'\n.NOERR1  ANOP\n.*\n.* Check the FROM parameter\n         AIF   ('&OPCD' EQ 'SVC').NOERR2\n         AIF   (K'&FROM NE 0).NOERR2\n.ERR2A   MNOTE 8,'No second operand specified'\n.NOERR2  ANOP\n.*\n.* Check the OPCD parameter\n         AIF   (K'&OPCD EQ 0).ERR3A\n         AIF   ('&OPCD' EQ 'CLC').NOERR3\n         AIF   ('&OPCD' EQ 'MVC').NOERR3\n         AIF   ('&OPCD' EQ 'SVC').NOERR3\n         AIF   ('&OPCD' EQ 'TR').NOERR3\n         AIF   ('&OPCD' EQ 'TRT').NOERR3\n         AIF   ('&OPCD' EQ 'XC').NOERR3\n         AGO   .ERR3B\n.ERR3A   MNOTE 8,'Third parameter (operation code) omitted'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'Invalid operation code specified on third parameter'\n.NOERR3  ANOP\n.*\n.* Check the DECR parameter\n         AIF   (K'&DECR EQ 0).NOERR4\n         AIF   ('&DECR' EQ 'NODEC').NOERR4A\n.ERR4A   MNOTE 8,'Fourth operand must be specified as NODEC or omitted'\n         AGO   .NOERR4\n.NOERR4A ANOP\n&_DECR   SETB  1                       * Signal NODEC was specified\n         AIF   ('&OPCD' NE 'SVC').NOERR4B\n.ERR4B   MNOTE 4,'Superfluous operand NODEC for EXSVC'\n.NOERR4B ANOP\n.NOERR4  ANOP\n         AIF   ('&OPCD' NE 'SVC').NONODEC\n&_DECR   SETB  1                       * Simulate NODEC operand for SVC\n.NONODEC ANOP\n.*\n.* Extract &_REG from length field in &TO operand\n.* First we search for an opening parenthesis\n&I       SETA  0\n.LOOP1   ANOP\n&I       SETA  &I+1                    * Point next character\n         AIF   (&I GT K'&TO).END1      * At end: quit loop\n         AIF   ('&TO'(&I,1) EQ '(').FOUND1\n         AGO   .LOOP1\n.FOUND1  ANOP\n&I1      SETA  &I+1                    * Start-index of length field\n.*\n.END1    ANOP\n         AIF   (&I1 EQ 0).ERR5A\n         AIF   (&I1 GT K'&TO).ERR5B\n         AGO   .NOERR5\n.ERR5A   MNOTE 8,'Opening parenthesis ''('' not found in first operand'\n         AGO   .NOERR5\n.ERR5B   MNOTE 8,'Opening parenthesis ''('' found at end of first opera*\n               nd'\n.NOERR5  ANOP\n.*\n.* Now we search for an ending parenthesis or a comma\n.LOOP2   ANOP\n&I       SETA  &I+1                    * Point next character\n         AIF   (&I GT K'&TO).END2      * At end: quit loop\n         AIF   ('&TO'(&I,1) EQ ')').FOUND2\n         AIF   ('&TO'(&I,1) EQ ',').FOUND2\n         AGO   .LOOP2\n.FOUND2  ANOP\n&I2      SETA  &I-1                    * Start-index of length field\n.END2    ANOP\n.*\n         AIF   (&I2 EQ 0).ERR6A\n         AIF   (&I2 EQ &I1).ERR6B\n         AGO   .NOERR6\n.ERR6A   MNOTE 8,'Closing parenthesis '')'' or comma not found in first*\n                operand'\n         AGO   .NOERR6\n.ERR6B   MNOTE 8,'Empty length field found in instruction'\n.NOERR6  ANOP\n.*\n.* Extract register and real TO field\n&I       SETA  1+&I2-&I1               * Length of register designation\n&_REG    SETC  '&TO'(&I1,&I)           * Extract register designation\n&I1      SETA  &I1-1                   * Point to ( character\n&I2      SETA  &I2+1                   * Point to ) or , character\n&I       SETA  1+K'&TO-&I2             * Length of remainder of string\n&_TO     SETC  '&TO'(1,&I1).'0'.'&TO'(&I2,&I)\n.*\n.* Now we will build the operands string in EXQ_OPS. If the instruction\n.* plus operands already occur in BXA_EXQ_I/BXA_EXQ_OPS, then we will\n.* use that instruction. Otherwise, we add an entry in each of these\n.* tables. The entries will be included as instructions in the literal\n.* pool through expansion of the LTORG macro.\n.* The instruction to be generated looks as either of the following:\n.*       &OPCD &_TO,&FROM              * EXecutable instruction\n.*       &OPCD &_TO                    * EXecutable instruction\n&EXQ_OPS SETC  '&_TO'                  * First part of operand string\n         AIF   (K'&FROM EQ 0).OPSOK\n&EXQ_OPS SETC  '&_TO'.',&FROM'         * Complete operand string\n.OPSOK   ANOP\n.*\n.* Check whether entry exists in current section of tables\n&I       SETA  &BXA_EXQ_LAST           * index in BXA_EXQ_I BXA_EXQ_OPS\n.LOOP3   ANOP  ,                       *\n&I       SETA  &I+1                    * Point to next entry\n         AIF   (&I GT N'&BXA_EXQ_I).LOOP3NF * Not found: add entry\n         AIF   ('&OPCD' NE '&BXA_EXQ_I(&I)').LOOP3 * Not found: next\n         AIF   ('&EXQ_OPS' NE '&BXA_EXQ_OPS(&I)').LOOP3 * Not found\n         AGO   .LOOP3OK                * Got it: abort loop\n.LOOP3NF ANOP  ,                       * I now points to free entry\n&BXA_EXQ_I(&I)   SETC '&OPCD'          * Create new entry\n&BXA_EXQ_OPS(&I) SETC '&EXQ_OPS'       *   in both arrays\n.LOOP3OK ANOP  ,                       * I now points to correct entry\n.*\n.* Generate code\n&LABEL   LABEL ,\n         AIF   (&_DECR).NODEC1\n         DEC   &_REG                   * Decrement length by 1\n.NODEC1  ANOP\n.*\n         EX    &_REG,_EXQ&I            * EXecute variable-length instr.\n.*\n         AIF   (&_DECR).NODEC2\n         INC   &_REG                   * Restore register with length\n.NODEC2  ANOP\n.*\n.MEND    MEND\n./ ADD NAME=EXSR     0100-20096-20096-0111-00249-00249-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* EXecute a SubRoutine\n.*\n&LABEL   EXSR  &SUBR,                  * Routine to be called          *\n               &COND,                  * Calling condition             *\n               &TYPE,                  * Type of subroutine involved   *\n               &SUBRS=,                * Subroutine names              *\n               &ARSAVE=                * YES or NO\n.*\n.* &SUBR  specifies the label of a SUBR statement or (reg)\n.* &COND  specifies a condition for conditional execution\n.* &TYPE  specifies INTernal subroutine or EXTernal subroutine (CSECT)\n.* &SUBRS specifies the routines that may be invoked when SUBR=(reg)\n.* &ARSAVE specifies whether or not to save/restore access registers\n.*         valid only for TYPE=EXT\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXSR                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Define variables\n         GBLA  &BXA_NUMVAL             * Return value from CHKREG\n         GBLB  &BXA_PGM                * PGM already expanded?\n         GBLC  &BXA_ENTRY              * Entry type of program\n         GBLC  &BXA_SUBR               * Name of current routine\n         GBLC  &BXA_SUBRTP             * Type of current routine\n         GBLC  &SYSASCE                * ASC environment AR or P\n         LCLC  &ASCMODE                * ASC mode at entry\n         LCLC  &_TYPE                  * Type of subroutine\n         LCLC  &_SUBR1                 * Register in SUBR parameter\n         LCLA  &_SUBR1N                * Register nr of &_SUBR1\n         LCLC  &OPCD                   * Generated opcode mnemonic\n         LCLA  &I                      * Index into SUBRS\n.*\n.* PGM must have been included\n         AIF   (&BXA_PGM).NOERR0\n         MNOTE 8,'PGM macro must be coded before using EXSR'\n.NOERR0  ANOP\n.*\n.* Check SUBR parameter\n         AIF   (K'&SUBR EQ 0).ERR1A    *\n         AIF   ('&SUBR'(1,1) NE '(').NOERR1\n&_SUBR1  SETC  '&SUBR(1)'              * Extract register name\n         CHKREG &_SUBR1                *\n         AIF   (&BXA_RC GT 4).ERR1B    *\n&_SUBR1N SETA  &BXA_NUMVAL             * Save register number\n         AGO   .NOERR1                 *\n.ERR1A   MNOTE 8,'No subroutine name specified'\n         MEXIT ,                       *\n.ERR1B   MNOTE 8,'&_SUBR1 is not a valid register'\n         MEXIT ,                       *\n.NOERR1  ANOP  ,                       *\n.*\n.* Check SUBRS parameter\n         AIF   (K'&SUBRS EQ 0 AND '&SUBR'(1,1) EQ '(').ERR2A\n         AIF   (K'&SUBRS NE 0 AND '&SUBR'(1,1) NE '(').ERR2B\n         AIF   (K'&SUBRS EQ 0).NOERR2\n         AIF   ('&SUBRS'(1,1) NE '(').ERR2C\n         AGO   .NOERR2\n.ERR2A   MNOTE 4,'Missing SUBRS-operand for EXSR (reg)'\n         AGO   .NOERR2\n.ERR2B   MNOTE 4,'SUBRS-operand has no meaning: target of EXSR is not (*\n               register)'\n         AGO   .NOERR2\n.ERR2C   MNOTE 8,'SUBRS-operand must be specified within parentheses'\n.NOERR2  ANOP\n.*\n.* From ESTAE-type routines EXSR cannot be used (yet), because R13 may\n.* or may not be a valid pointer to a save-area. In ESTAE-routines, it\n.* is R11 which addresses our own work-area. The Save-area addressed by\n.* R11 however, cannot be used: it may (or may not) be occupied.\n         AIF   ('&BXA_SUBRTP' NE 'ESTAE').NOERR3\n.ERR3    MNOTE 12,'EXSR cannot be used from within an ESTAE-type routin*\n               e'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Check TYPE parameter\n         AIF   ('&TYPE' EQ '').DFT4\n&_TYPE   SETC  '&TYPE'                 * Copy specified value\n         AIF   ('&TYPE' EQ 'EXT').NOERR4\n         AIF   ('&TYPE' EQ 'EXT').NOERR4\n.ERR4    MNOTE 8,'Subroutine type must be INT or EXT (Internal/eXternal*\n               )'\n         MEXIT\n.DFT4    ANOP\n&_TYPE   SETC  'INT'                   * Use INT as default value\n.NOERR4  ANOP\n.*\n.* Check ARSAVE parameter\n         AIF   ('&ARSAVE' EQ '').NOERR5\n         AIF   ('&ARSAVE' EQ 'NO').NOERR5\n         AIF   ('&ARSAVE' NE 'YES').ERR5A\n         AIF   ('&_TYPE' NE 'EXT').ERR5B\n         AGO   .NOERR5\n.ERR5A   MNOTE 8,'ARSAVE parameter must be YES or NO'\n         MEXIT\n.ERR5B   MNOTE 8,'ARSAVE=YES can be specified only for EXTernal subrout*\n               ines'\n         MEXIT\n.NOERR5  ANOP\n.*\n.* For ARSAVE=YES, SUBR must not be R14 or R15\n         AIF   ('&ARSAVE' NE 'YES').NOERR6\n         AIF   ('&SUBR'(1,1) NE '(').NOERR6\n         AIF   (&_SUBR1N LT 14).NOERR6 *\n.ERR6A   MNOTE 8,'Cannot use R14 or R15 to pass routine address'\n         MEXIT ,                       *\n.NOERR6  ANOP  ,                       *\n.*\n.* Define internal macro\n         EXSR0 ,                       * Define EXSR_ADD_ENTRY\n.*\n.* If subroutine not a (reg), add subroutine name to array\n         AIF   ('&SUBR'(1,1) EQ '(').SUBRREG * Skip if target is (reg)\n         EXSR_ADD_ENTRY &SUBR,&_TYPE   * Add entry to arrays\n.SUBRREG ANOP\n.*\n.* Loop thru SUBRS\n&I       SETA  0\n.LOOP1   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&SUBRS).LOOP1OK\n         EXSR_ADD_ENTRY &SUBRS(&I),&_TYPE\n         AGO   .LOOP1\n.LOOP1OK ANOP\n.*\n.* Generate code\n&LABEL   LABEL\n         AIF   ('&_TYPE' EQ 'INT').INTSR\n         AIF   ('&_TYPE' EQ 'EXT').EXTSR\n         MNOTE 12,'Internal error'\n         MEXIT\n.*\n.* External subroutine handling: always handled in primary mode!\n.EXTSR   ANOP  ,                       * Generate EXSR to external subr\n&ASCMODE SETC  '&SYSASCE'              * Keep current ASC mode setting\n         AIF   ('&ASCMODE' EQ 'P').PRIMARY\n         SETMODE PRIM                  * Switch to primary\n.PRIMARY ANOP  ,                       *\n.*\n.* For conditional requests: generate an enclosing IF\n         AIF   (K'&COND EQ 0).SKIPIF   * Issue IF statement if COND\n         IF    &COND                   *    was specified\n.SKIPIF  ANOP  ,                       *\n.*\n.* Save access registers if ARSAVE=YES was specified\n         AIF   ('&ARSAVE' NE 'YES').SAVEOK\n         BASR  R14,R0                  * Retrieve address + amode\n         LA    R15,_EXSR&SYSNDX-*      * Offset to return address\n         AR    R14,R15                 * Make R14 point to return addr.\n         BAKR  R14,R0                  * Create stack entry\n.SAVEOK  ANOP  ,                       * ARs saved or no save requested\n.*\n.* Copy target address (either a VCON or a register) to R15\n         AIF   ('&SUBR'(1,1) EQ '(').CPYREG\n         L     R15,=V(&SUBR)           * Load address of subroutine\n         AGO   .R15OK                  *\n.CPYREG  ANOP  ,                       *\n         CPY   R15,&SUBR(1),NOWARN     * Copy EPA to R15\n.R15OK   ANOP  ,                       *\n         BASR  R14,R15                 * Invoke external subroutine\n.*\n.* If ARSAVE=YES was specified: restore access registers\n         AIF   ('&ARSAVE' NE 'YES').RESTOK\n         PR    ,                       * Restore regs from stack entry\n_EXSR&SYSNDX LABEL ,                   * Return point for PR\n.RESTOK  ANOP  ,                       *\n.*\n.* For conditional requests: generate ENDIF\n         AIF   (K'&COND EQ 0).SKIPEIF  * Issue ENDIF statement if COND\n         ENDIF ,                       *    was specified\n.SKIPEIF ANOP  ,                       *\n.*\n.* Revert to AR mode if we forced primary mode\n         AIF   ('&ASCMODE' EQ 'P').PRIMOK\n         SETMODE AR                    * Resume AR mode\n.PRIMOK  ANOP\n         MEXIT\n.*\n.INTSR   ANOP  ,                       * Generate call to internal subr\n         AIF   (K'&COND EQ 0 AND '&SUBR'(1,1) EQ '(').BASR\n&OPCD    SETC  'BAS&COND'              * Create conditional BAS opcode\n         &OPCD R14,&SUBR               * Execute subroutine\n         MEXIT ,                       *\n.*\n.* An unconditional EXSR with the target address in a register\n.* should generate a BASR instruction in stead of some BAS-variation\n.BASR    ANOP  ,                       *\n         BASR  R14,&SUBR(1)            * Execute subroutine\n.*\n.MEND    MEND\n./ ADD NAME=EXSR0    0100-20096-20096-0111-00170-00170-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Define internal macro for EXSR\n.*\n         EXSR0  ,                      *\n.*\n.* Define variables\n         GBLB  &BXA_EXSR               * EXSR expanded before?\n.*\n.* Define internal macro on the first invocation.\n         AIF   (&BXA_EXSR).MEND\n&BXA_EXSR SETB 1\n         PUSH  PRINT,NOPRINT\n         PRINT OFF,NOPRINT\n.*\n         MACRO\n         EXSR_ADD_ENTRY &NAME,&TYPE    * Name and type of subroutine\n         GBLC  &BXA_SRUNAM(50)         * Used subroutine names\n         GBLA  &BXA_SRUCT(50)          * Subroutine invocation count\n         GBLC  &BXA_SRUASC(50)         * Used subroutine ASC-modes\n         GBLB  &BXA_SRUSVC(50)         * Used subroutine SVC-modes\n         GBLC  &BXA_SRDNAM(50)         * Defined subroutine names\n         GBLC  &BXA_SRDTYP(50)         * Defined subroutine types\n         GBLA  &BXA_SRNAML             * Max subr name length\n         GBLC  &BXA_SR_CALLER(50)      * Calling macro-names\n         GBLC  &BXA_SR_CALLED(50)      * Called macro-names\n         GBLC  &BXA_SUBR               * Current subr name or *MAIN\n         GBLC  &BXA_USEC_ROUT(50)      * Routines for SCOPE=CALLED\n         GBLC  &BXA_USEC_ARGL(50)      * Labels for SCOPE=CALLED\n         GBLC  &BXA_USEC_ARG1(50)      * DSECTs for SCOPE=CALLED\n         GBLC  &BXA_USEC_ARG2(50)      * Bases for SCOPE=CALLED\n         GBLB  &BXA_SVCMODE            * Current SVC-mode\n         GBLC  &SYSASCE                * Current ASC-mode\n         LCLA  &I,&J                   * Index into BXA_SRUNAM/SRUCT\n.*\n.* Update subroutine usage count\n&I       SETA  0                       * Init loop\n.LOOP1   ANOP\n&I       SETA  &I+1                    * Point to next entry\n         AIF   (&I GT N'&BXA_SRUNAM).LOOP1AD * End of array: add entry\n         AIF   ('&BXA_SRUNAM(&I)' EQ '&NAME').LOOP1IN * Increment use\n         AGO   .LOOP1                  * Go process next entry\n.LOOP1AD ANOP  ,                       * Add entry to UNAM\n&BXA_SRUCT(&I) SETA 1                  * Use count is now 1\n&BXA_SRUSVC(&I) SETB (&BXA_SVCMODE)    * Copy current SVC-mode\n&BXA_SRUASC(&I) SETC '&SYSASCE'        * Copy current ASC-mode\n&BXA_SRUNAM(&I) SETC '&NAME'           * Name into empty entry\n         AIF   (K'&NAME LE &BXA_SRNAML).LOOP1OK * Check name length\n&BXA_SRNAML SETA K'&NAME               * Increase max name length\n         AIF   (K'&NAME GE 5).LOOP1OK  * Max name length must at least\n&BXA_SRNAML SETA 5                     *   equal 5 (*MAIN)\n         AGO   .LOOP1OK                * And we're done\n.* Entry found: update count and check interface\n.LOOP1IN ANOP  ,                       * Increment use count\n&BXA_SRUCT(&I) SETA &BXA_SRUCT(&I)+1   *           by one\n.*\n         AIF   (&BXA_SRUSVC(&I) EQ &BXA_SVCMODE).NOERR0A\n.ERR0A   MNOTE 8,'Interface error: &NAME called both in SVC and in prob*\n               lem mode'\n.NOERR0A ANOP\n         AIF   ('&BXA_SRUASC(&I)' EQ '&SYSASCE').NOERR0B\n         AIF   ('&TYPE' EQ 'EXT').NOERR0B * EXT always called in prim.\n.ERR0B   MNOTE 8,'Interface error: &NAME called both in Access Register*\n                and in Primary mode'\n.NOERR0B ANOP\n.LOOP1OK ANOP\n.*\n.* Add entry to subroutine call cross-reference tables\n&I       SETA  1+N'&BXA_SR_CALLED\n&BXA_SR_CALLER(&I) SETC '&BXA_SUBR'\n&BXA_SR_CALLED(&I) SETC '&NAME'\n.*\n.* If the called subroutine is defined, it must be an INT or EXT subr\n&I       SETA  0                       * I indexes into BXA_SRDNAM\n.LOOP2   ANOP  ,                       * Loop thru BXA_SRDNAM\n&I       SETA  &I+1                    * Point to next entry\n         AIF   (&I GT N'&BXA_SRDNAM).LOOP2NF * Not found: skip\n         AIF   ('&NAME' NE '&BXA_SRDNAM(&I)').LOOP2 * Continue search\n.* Called subr is defined: check its type\n         AIF   ('&BXA_SRDTYP(&I)' EQ 'INT').LOOP2OK\n         AIF   ('&BXA_SRDTYP(&I)' EQ 'EXT').LOOP2OK\n.ERR1A   MNOTE 8,'You cannot EXSR to a subroutine of type &BXA_SRDTYP(&*\n               I)'\n         AGO   .LOOP2OK\n.LOOP2NF ANOP  ,                       * If external subr: add entry\n         AIF   ('&TYPE' NE 'EXT').LOOP2OK\n.*\n.* External subroutine name not found: add entry to arrays\n&I       SETA  1+N'&BXA_SRDNAM         * Point to first free entry\n&BXA_SRDNAM(&I) SETC '&NAME'           * Add subroutine name\n&BXA_SRDTYP(&I) SETC 'EXT'             *   and subroutine type\n&BXA_SRDDUP(&I) SETB 0                 * External subr never a dup!\n         AIF   (K'&NAME LE &BXA_SRNAML).LOOP2OK * Check name length\n&BXA_SRNAML SETA K'&NAME               * Increase max. name length\n         AIF   (K'&NAME GE 5).LOOP2OK  * Max. name length must at least\n&BXA_SRNAML SETA 5                     *   equal 5 (for *MaIN)\n.LOOP2OK ANOP\n.*\n.* USEs with SCOPE=CALLED must be propagated in the BXA_USEC tables\n&I       SETA  0                       * I indexes BXA_USEC_...\n.LOOP3   ANOP  ,                       * For all entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&BXA_USEC_ROUT).LOOP3OK * At end: quit loop\n         AIF   ('&BXA_USEC_ROUT(&I)' NE '&BXA_SUBR').LOOP3\n.* Match: copy to called subroutine, unless such an entry already\n.*        exists. &I points to located entry.\n&J       SETA  0                       * J is second-search index\n.LOOP4   ANOP  ,                       * See if entry exists\n&J       SETA  &J+1                    * Point to next entry\n         AIF   (&J GT N'&BXA_USEC_ROUT).LOOP4NF * At end: not found\n         AIF   ('&BXA_USEC_ROUT(&J)' NE '&NAME').LOOP4\n         AIF   ('&BXA_USEC_ARGL(&J)' NE '&BXA_USEC_ARGL(&I)').LOOP4\n         AIF   ('&BXA_USEC_ARG1(&J)' NE '&BXA_USEC_ARG1(&I)').LOOP4\n         AIF   ('&BXA_USEC_ARG2(&J)' NE '&BXA_USEC_ARG2(&I)').LOOP4\n.* Entry to be copied exists for this subroutine: skip copy operation\n         AGO   .LOOP3\n.* Second search yielded nothing: Add entry for called subroutine\n.LOOP4NF ANOP\n&J       SETA  N'&BXA_USEC_ROUT+1      * J points to new entry\n&BXA_USEC_ROUT(&J) SETC '&NAME'        * Use USE for this subroutine\n&BXA_USEC_ARGL(&J) SETC '&BXA_USEC_ARGL(&I)' * USE label parameter\n&BXA_USEC_ARG1(&J) SETC '&BXA_USEC_ARG1(&I)' * USE dsect parameter\n&BXA_USEC_ARG2(&J) SETC '&BXA_USEC_ARG2(&I)' * USE base parameter\n         AGO   .LOOP3\n.LOOP3OK ANOP\n.*\n.MEND    MEND\n         POP   PRINT,NOPRINT\n.*\n.MEND    MEND\n./ ADD NAME=EXSVC    0100-20096-20096-0111-00071-00071-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Execute an SVC-instruction with variable length\n.*\n&LABEL   EXSVC &SVC                    * SVC number to use\n.*\n.* &SVC   specifies the SVC number to be used. In stead of a SVC-number\n.*        a register containing the SVC-number must be specified.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXSVC                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   EXQ   &SVC,,SVC\n.*\n.MEND    MEND\n./ ADD NAME=EXTR     0100-20096-20096-0111-00077-00077-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Execute an TRanslate-instruction with variable length\n.*\n&LABEL   EXTR  &SRC,                   * Source for TRanslate          *\n               &TABLE,                 * Translate table               *\n               &DECR                   * Decrement indicator\n.*\n.* &SRC   specifies the source field for the translate. In stead of a\n.*        length, a register containing the length must be specified.\n.* &TABLE specifies the translate table to be used.\n.* &DECR  a value of NODEC indicates that the length in the register\n.*        specified in the TO length field, contains the length of\n.*        the translate minus 1 for the EX instruction.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXTR                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   EXQ   &SRC,&TABLE,TR,&DECR\n.*\n.MEND    MEND\n./ ADD NAME=EXTRN    0100-20096-20096-0111-00147-00147-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's EXTRN statement\n.*\n&LABEL   EXTRN ,                       * Control block names are in    *\n                                       *    &SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXTRN                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_EXTRNOVR           * Ptr to last valid\n         GBLC  &BXA_EXTRNOVR_LAB(50)   * Labels\n         GBLC  &BXA_EXTRNOVR_NAM(50)   * New names\n         LCLC  &NAM                    * New name for current entry\n         LCLB  &RESET                  * On if last entry removed\n         LCLA  &I                      * Index for override tables\n         LCLA  &S                      * Index for &SYSLIST\n         LCLC  &EXTRN                  * 1 EXTRN name from SYSLIST\n         LCLC  &EXTRNS                 * Modified list of EXTRN names\n         LCLC  &WXTRNS                 * List of WXTRN names\n.*\n.* Check LABEL parameter\n         AIF   (K'&LABEL EQ 0).NOERR1\n.ERR1    MNOTE 8,'Label parameter not valid for EXTRN statement'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Build &EXTRNS and &WXTRNS from &SYSLIST\n&S       SETA  0                       * S indexes &SYSLIST\n.LOOP1   ANOP  ,                       * For all entries in SYSLIST\n&S       SETA  &S+1                    * Point next entry\n         AIF   (&S GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&EXTRN   SETC  '&SYSLIST(&S)'          * Extract external name\n&I       SETA  0                       * I indexes override tables\n.LOOP2   ANOP  ,                       * Search for matching name\n&I       SETA  &I+1                    * Point next override entry\n         AIF   (&I GT &BXA_EXTRNOVR).LOOP2NF * Not found\n         AIF   ('&EXTRN' NE '&BXA_EXTRNOVR_LAB(&I)').LOOP2 * Mismatch\n.* Found override entry, remove it from override tables\n&NAM     SETC  '&BXA_EXTRNOVR_NAM(&I)' * Extract *option or new name\n         AIF   (&I EQ &BXA_EXTRNOVR).NOCOPY\n&BXA_EXTRNOVR_LAB(&I) SETC '&BXA_EXTRNOVR_LAB(&BXA_EXTRNOVR)'\n&BXA_EXTRNOVR_NAM(&I) SETC '&BXA_EXTRNOVR_NAM(&BXA_EXTRNOVR)'\n.NOCOPY  ANOP  ,                       *\n&BXA_EXTRNOVR SETA &BXA_EXTRNOVR-1     * Remove copied entry\n         AIF   (&BXA_EXTRNOVR GT 0).NORESET\n&RESET   SETB  1                       *\n.NORESET ANOP  ,                       *\n.*\n.* Check for suppress option\n         AIF   ('&NAM' EQ '*SUPPRESS').LOOP1 * No action needed\n.*\n.* Check for weak external option\n         AIF   ('&NAM' EQ '*WXTRN').LOOP2WX * No action needed\n.*\n.* Must be a *NEWNAME option\n&EXTRNS  SETC  '&EXTRNS'.','.'&NAM'    * Add new name to EXTRNS\n         AGO   .LOOP1                  * Go process next SYSLIST entry\n.*\n.* *WXTRN specified: add entry to &WXTRNS\n.LOOP2WX ANOP  ,                       *\n&WXTRNS  SETC  '&WXTRNS'.','.'&EXTRN'  * Add name to WXTRNS\n         AGO   .LOOP1                  * Go process next SYSLIST entry\n.*\n.* No override found\n.LOOP2NF ANOP  ,                       * No override:\n&EXTRNS  SETC  '&EXTRNS'.','.'&EXTRN'  *   add name to EXTRNS\n         AGO   .LOOP1                  * Go process next SYSLIST entry\n.LOOP1OK ANOP  ,                       *\n.*\n.* Remove leading comma from EXTRNS and/or WXTRNS\n         AIF   (K'&EXTRNS EQ 0).EXTRNSOK * No EXTRNs left\n&EXTRNS  SETC  '&EXTRNS'(2,*)          * Remove leading comma\n.EXTRNSOK ANOP ,                       *\n         AIF   (K'&WXTRNS EQ 0).WXTRNSOK * No weak externals created\n&WXTRNS  SETC  '&WXTRNS'(2,*)          * Remove leading comma\n.WXTRNSOK ANOP ,                       *\n.*\n.* Generate _EXTRN and/or WXTRN statements\n         AIF   (K'&EXTRNS EQ 0).NOEXTRN * No EXTRNs left\n         _EXTRN &EXTRNS                *\n.NOEXTRN ANOP  ,                       *\n         AIF   (K'&WXTRNS EQ 0).NOWXTRN * No WXTRNs created\n         WXTRN &WXTRNS                 *\n.NOWXTRN ANOP  ,                       *\n.*\n         AIF   (NOT &RESET).MEND       *\n         OPSYNS _EXTRN                 * Reset EXTRN opcode\n.*\n.MEND    MEND\n./ ADD NAME=EXTRNOVR 0100-20096-20096-0111-00159-00159-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro fills the stack of EXTRN modifications for use by the\n.* EXTRN macro, which replaces the assembler's EXTRN instruction\n.*\n&LABEL   EXTRNOVR &OPT,                * See below for valid keywords  *\n               &NEWNAM                 * New name for *NEWNAME option\n.*\n.* &LABEL mandatory, except when &OPT=*END\n.*        The specified EXTRN name will be overridden.\n.* &OPT   specifies one of the following:\n.*        *END cancels all outstanding EXTRNOVR requests\n.*        *SUPPRESS suppresses the definition of &LABEL\n.*        *WXTRN   changes the EXTRN name to a WXTRN name\n.*        *NEWNAME changes the EXTRN for &LABEL into one for &NEWNAM,\n.*              i.e. Specify *NEWNAME,newname\n.* &NEWNAM Specifies the new name, if &OPT=*NEWNAME\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXTRNOVR               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_EXTRNOVR           * Ptr to last valid\n         GBLC  &BXA_EXTRNOVR_LAB(50)   * Labels\n         GBLC  &BXA_EXTRNOVR_NAM(50)   * New names\n         LCLA  &I                      * Index\n.*\n.* Check LABEL parameter\n         AIF   (K'&LABEL GT 0).NOERR1\n         AIF   ('&OPT' EQ '*END').NOERR1\n.ERR1    MNOTE 8,'Missing label parameter'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check the OPT parameter\n         AIF   (K'&OPT NE 0).NOERR2A\n.ERR2A   MNOTE 8,'Missing parameter(s)'\n         MEXIT\n.NOERR2A ANOP  ,\n         AIF   ('&OPT' EQ '*SUPPRESS').NOERR2\n         AIF   ('&OPT' EQ '*WXTRN').NOERR2\n         AIF   ('&OPT' EQ '*NEWNAME').NOERR2\n         AIF   ('&OPT' EQ '*END').NOERR2\n.ERR2B   MNOTE 8,'&OPT is not a valid keyword'\n         MEXIT\n.NOERR2  ANOP  ,\n.*\n.* Check the NEWNAME parameter (must be present if &OPT = *NEWNAME)\n         AIF   ('&OPT' EQ '*NEWNAME' AND K'&NEWNAM EQ 0).ERR3A\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'New name not specified with option *NEWNAME'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Check number of parameters\n         AIF   ('&OPT' EQ '*END' AND N'&SYSLIST GT 1).ERR4A\n         AIF   ('&OPT' EQ '*END').NOERR4\n         AIF   ('&OPT' EQ '*SUPPRESS' AND N'&SYSLIST GT 1).ERR4A\n         AIF   ('&OPT' EQ '*SUPPRESS').NOERR4\n         AIF   ('&OPT' EQ '*WXTRN' AND N'&SYSLIST GT 1).ERR4A\n         AIF   ('&OPT' EQ '*WXTRN').NOERR4\n         AIF   (N'&SYSLIST GT 2).ERR4B\n         AGO   .NOERR4\n.ERR4A   MNOTE 4,'More than 1 argument: remainder ignored'\n         AGO   .NOERR4\n.ERR4B   MNOTE 4,'More than 2 arguments: remainder ignored'\n.NOERR4  ANOP\n.*\n.* Option *END requires differen logic\n         AIF   ('&OPT' EQ '*END').END\n.*\n.* Other options: add entry to tables\n&I       SETA  &BXA_EXTRNOVR+1         * Next free entry\n&BXA_EXTRNOVR_LAB(&I) SETC '&LABEL'    * Insert label\n&BXA_EXTRNOVR_NAM(&I) SETC '&OPT'      * Insert *SUPPRESS or *WXTRN\n         AIF   ('&OPT' NE '*NEWNAME').NAMOK * For option *NEWNAME:\n&BXA_EXTRNOVR_NAM(&I) SETC '&NEWNAM'   * replace *NEWNAME with new name\n.NAMOK   ANOP  ,                       *\n&BXA_EXTRNOVR SETA &I                  * And update ptr to last valid\n.*\n.* Replace EXTRN-instruction by our EXTRN-macro on the first override\n         AIF   (&BXA_EXTRNOVR GT 1).MEND\n         OPSYNS EXTRN                  * Replace EXTRN by _EXTRN\n         MEXIT\n.*\n.* Ending current EXTRNOVR requests. Issue a message for any unused\n.* entries in BXA_EXTRNOVR tables.\n.END     ANOP\n         AIF   (&BXA_EXTRNOVR EQ 0).MEND * No entries remain\n&I       SETA  0                       * I indexes BXA_EXTRNOVR_xxx\n.LOOP1   ANOP  ,                       * For all current entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &BXA_EXTRNOVR).LOOP1OK * At end: quit loop\n         MNOTE 4,'EXTRNOVR for &BXA_EXTRNOVR_LAB(&I) discarded'\n         AGO   .LOOP1\n.LOOP1OK ANOP\n&BXA_EXTRNOVR SETA 0                   * Reset valid counter to 0\n.*\n.* Disable our DS-macro by replacing _DS by original DS-instruction\n         OPSYNS _DS                    * Reset DS-instruction\n.*\n.MEND    MEND\n./ ADD NAME=EXTRT    0100-20096-20096-0111-00093-00093-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Execute an TRanslate-and-Test instruction with variable length\n.*\n&LABEL   EXTRT &SRC,                   * Source for TRanslate and test *\n               &TABLE,                 * Translate table               *\n               &DECR                   * Decrement indicator\n.*\n.* &SRC   specifies the source field for the translate and test.\n.*        In stead of a length, a register containing the length must\n.*        be specified.\n.* &TABLE specifies the translate table to be used.\n.* &DECR  a value of NODEC indicates that the length in the register\n.*        specified in the TO length field, contains the length of\n.*        the translate and test minus 1 for the EX instruction.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXTRT                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_USED_REGS(16)      * USE status of regs 0-15\n.*\n.* Check availability or R1 and R2\n         AIF   (NOT &BXA_USED_REGS(2)).NOERR1\n.ERR1    MNOTE 4,'EXTRT will modify register R1, which is currently in *\n               USE'                    *\n.NOERR1  ANOP  ,                       *\n.*\n         AIF   (NOT &BXA_USED_REGS(3)).NOERR2\n.ERR2    MNOTE 4,'EXTRT will modify register R2, which is currently in *\n               USE'                    *\n.NOERR2  ANOP  ,                       *\n.*\n&LABEL   EXQ   &SRC,&TABLE,TRT,&DECR\n.*\n.MEND    MEND\n./ ADD NAME=EXXC     0100-20096-20096-0111-00077-00077-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Execute an eXclusive-or-Characters instruction with variable length\n.*\n&LABEL   EXXC  &TO,                    * Xor destination               *\n               &FROM,                  * Xor source                    *\n               &DECR                   * Decrement indicator\n.*\n.* &TO   specifies the destination field for the Xor. In stead of a\n.*       length, a register containing the length must be specified.\n.* &FROM specifies the second operand for the Xor.\n.* &DECR a value of NODEC indicates that the length in the register\n.*       specified in the TO length field, contains the length of\n.*       the move minus 1 for the EX instruction.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC EXXC                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n&LABEL   EXQ   &TO,&FROM,XC,&DECR\n.*\n.MEND    MEND\n./ ADD NAME=GEN      0100-20096-20096-0111-00284-00284-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates a replaced machine instruction\n.*\n&LABEL   GEN   &X                      * &X must be a valid instruction\n.*                                     * Other operands in SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC GEN                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Stack pointer\n         GBLA  &BXA_STK_LVL(5)         * Nesting levels\n         LCLA  &LVL                    * Current nesting level\n         LCLA  &OPS                    * Nr of operands on instruction\n.*\n.* Determine current nesting level\n         AIF   (&BXA_STK EQ 0).LVLOK   * &LVL remains zero\n&LVL     SETA  (&BXA_STK_LVL(&BXA_STK)) * Current nesting level\n.LVLOK   ANOP  ,                       *\n.*\n.* Determine nr of operands\n&OPS     SETA  N'&SYSLIST              *\n         AIF   (&OPS LT 1).ERR1A       * Missing opcode\n         AIF   ('&X'(1,1) NE '_').ERR1B * Invalid instruction\n&OPS     SETA  &OPS-1                  * Nr of operands for &X\n         AIF   (&OPS GT 3).ERR1C       * Too many arguments\n         AGO   .NOERR1                 *\n.ERR1A   MNOTE 8,'No instruction specified'\n         MEXIT ,                       *\n.ERR1B   MNOTE 8,'Invalid instruction specified: &X'\n         MEXIT ,                       *\n.ERR1C   MNOTE 4,'More than three operands specified: remainder ignored*\n               '                       *\n.NOERR1  ANOP  ,                       *\n.*\n.* Generate code with indentation\n         AIF   (&LVL EQ 0).GEN0        *\n         AIF   (&LVL EQ 1).GEN1        *\n         AIF   (&LVL EQ 2).GEN2        *\n         AIF   (&LVL EQ 3).GEN3        *\n         AIF   (&LVL EQ 4).GEN4        *\n         AIF   (&LVL EQ 5).GEN5        *\n         AIF   (&LVL EQ 6).GEN6        *\n         AIF   (&LVL EQ 7).GEN7        *\n         AIF   (&LVL EQ 8).GEN8        *\n         AIF   (&LVL EQ 9).GEN9        *\n.ERR2A   MNOTE 4,'&LVL nesting levels of structured programming'\n         AGO   .GEN10                  *\n.*\n.* Generate code\n.GEN0    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN0_2      *\n         AIF   (&OPS EQ 3).GEN0_3      *\n         AIF   (&OPS EQ 1).GEN0_1      *\n&LABEL   &X    ,                       *\n         MEXIT ,                       *\n.GEN0_1  ANOP  ,                       *\n&LABEL   &X    &SYSLIST(2)             *\n         MEXIT ,                       *\n.GEN0_2  ANOP  ,                       *\n&LABEL   &X    &SYSLIST(2),&SYSLIST(3) *\n         MEXIT ,                       *\n.GEN0_3  ANOP  ,                       *\n&LABEL   &X    &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n         MEXIT ,                       *\n.*\n.GEN1    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN1_2      *\n         AIF   (&OPS EQ 3).GEN1_3      *\n         AIF   (&OPS EQ 1).GEN1_1      *\n&LABEL    &X   ,                       *\n          MEXIT ,                      *\n.GEN1_1   ANOP ,                       *\n&LABEL    &X   &SYSLIST(2)             *\n          MEXIT ,                      *\n.GEN1_2   ANOP ,                       *\n&LABEL    &X   &SYSLIST(2),&SYSLIST(3) *\n          MEXIT ,                      *\n.GEN1_3   ANOP ,                       *\n&LABEL    &X   &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n          MEXIT ,                      *\n.*\n.GEN2    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN2_2      *\n         AIF   (&OPS EQ 3).GEN2_3      *\n         AIF   (&OPS EQ 1).GEN2_1      *\n&LABEL     &X  ,                       *\n           MEXIT ,                     *\n.GEN2_1    ANOP ,                      *\n&LABEL     &X  &SYSLIST(2)             *\n           MEXIT ,                     *\n.GEN2_2    ANOP ,                      *\n&LABEL     &X  &SYSLIST(2),&SYSLIST(3) *\n           MEXIT ,                     *\n.GEN2_3    ANOP ,                      *\n&LABEL     &X  &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n           MEXIT ,                     *\n.*\n.GEN3    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN3_2      *\n         AIF   (&OPS EQ 3).GEN3_3      *\n         AIF   (&OPS EQ 1).GEN3_1      *\n&LABEL      &X ,                       *\n            MEXIT ,                    *\n.GEN3_1     ANOP ,                     *\n&LABEL      &X &SYSLIST(2)             *\n            MEXIT ,                    *\n.GEN3_2     ANOP ,                     *\n&LABEL      &X &SYSLIST(2),&SYSLIST(3) *\n            MEXIT ,                    *\n.GEN3_3     ANOP ,                     *\n&LABEL      &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n            MEXIT ,                    *\n.*\n.GEN4    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN4_2      *\n         AIF   (&OPS EQ 3).GEN4_3      *\n         AIF   (&OPS EQ 1).GEN4_1      *\n&LABEL       &X ,                      *\n             MEXIT ,                   *\n.GEN4_1      ANOP ,                    *\n&LABEL       &X &SYSLIST(2)            *\n             MEXIT ,                   *\n.GEN4_2      ANOP ,                    *\n&LABEL       &X &SYSLIST(2),&SYSLIST(3)\n             MEXIT ,                   *\n.GEN4_3      ANOP ,                    *\n&LABEL       &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n             MEXIT ,                   *\n.*\n.GEN5    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN5_2      *\n         AIF   (&OPS EQ 3).GEN5_3      *\n         AIF   (&OPS EQ 1).GEN5_1      *\n&LABEL        &X ,                     *\n              MEXIT ,                  *\n.GEN5_1       ANOP ,                   *\n&LABEL        &X &SYSLIST(2)           *\n              MEXIT ,                  *\n.GEN5_2       ANOP ,                   *\n&LABEL        &X &SYSLIST(2),&SYSLIST(3)\n              MEXIT ,                  *\n.GEN5_3       ANOP ,                   *\n&LABEL        &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n              MEXIT ,                  *\n.*\n.GEN6    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN6_2      *\n         AIF   (&OPS EQ 3).GEN6_3      *\n         AIF   (&OPS EQ 1).GEN6_1      *\n&LABEL         &X ,                    *\n               MEXIT ,                 *\n.GEN6_1        ANOP ,                  *\n&LABEL         &X &SYSLIST(2)          *\n               MEXIT ,                 *\n.GEN6_2        ANOP ,                  *\n&LABEL         &X &SYSLIST(2),&SYSLIST(3)\n               MEXIT ,                 *\n.GEN6_3        ANOP ,                  *\n&LABEL         &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n               MEXIT ,                 *\n.*\n.GEN7    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN7_2      *\n         AIF   (&OPS EQ 3).GEN7_3      *\n         AIF   (&OPS EQ 1).GEN7_1      *\n&LABEL          &X ,                   *\n                MEXIT ,                *\n.GEN7_1         ANOP ,                 *\n&LABEL          &X &SYSLIST(2)         *\n                MEXIT ,                *\n.GEN7_2         ANOP ,                 *\n&LABEL          &X &SYSLIST(2),&SYSLIST(3)\n                MEXIT ,                *\n.GEN7_3         ANOP ,                 *\n&LABEL          &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n                MEXIT ,                *\n.*\n.GEN8    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN8_2      *\n         AIF   (&OPS EQ 3).GEN8_3      *\n         AIF   (&OPS EQ 1).GEN8_1      *\n&LABEL           &X ,                  *\n                 MEXIT ,               *\n.GEN8_1          ANOP ,                *\n&LABEL           &X &SYSLIST(2)        *\n                 MEXIT ,               *\n.GEN8_2          ANOP ,                *\n&LABEL           &X &SYSLIST(2),&SYSLIST(3)\n                 MEXIT ,               *\n.GEN8_3          ANOP ,                *\n&LABEL           &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n                 MEXIT ,               *\n.*\n.GEN9    ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN9_2      *\n         AIF   (&OPS EQ 3).GEN9_3      *\n         AIF   (&OPS EQ 1).GEN9_1      *\n&LABEL            &X ,                 *\n                  MEXIT ,              *\n.GEN9_1           ANOP ,               *\n&LABEL            &X &SYSLIST(2)       *\n                  MEXIT ,              *\n.GEN9_2           ANOP ,               *\n&LABEL            &X &SYSLIST(2),&SYSLIST(3)\n                  MEXIT ,              *\n.GEN9_3           ANOP ,               *\n&LABEL            &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n                  MEXIT ,              *\n.*\n.GEN10   ANOP  ,                       *\n         AIF   (&OPS EQ 2).GEN10_2     *\n         AIF   (&OPS EQ 3).GEN10_3     *\n         AIF   (&OPS EQ 1).GEN10_1     *\n&LABEL             &X ,                *\n                   MEXIT ,             *\n.GEN10_1           ANOP ,              *\n&LABEL             &X &SYSLIST(2)      *\n                   MEXIT ,             *\n.GEN10_2           ANOP ,              *\n&LABEL             &X &SYSLIST(2),&SYSLIST(3)\n                   MEXIT ,             *\n.GEN10_3           ANOP ,              *\n&LABEL             &X &SYSLIST(2),&SYSLIST(3),&SYSLIST(4)\n                   MEXIT ,             *\n.*\n.MEND    MEND\n./ ADD NAME=GENMAPS  0100-20096-20096-0111-00161-00161-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro expands 1 or more mapping macro's\n.* Used by PGM-macro\n.*\n&LABEL   GENMAPS &MAPS,                * Sublist of map-macro's        *\n               &LIST=NO                * YES/NO create map-listing\n.*\n.* &MAPS specifies - in sublist notation - the mapping macro's to be\n.*       expanded. Must be in sublist notation.\n.* &LIST specifies whether or not the listing of the expanded mapping\n.*       macro's are to be included in the assembly listing.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC GENMAPS                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &SP_SHOWALL             * List suppression switch\n         GBLC  &BXA_MAPS_LST           * List option on highest level\n         LCLB  &LVL1                   * On if first level invocation\n         LCLC  &_GEN                   * GEN/NOGEN option for PRINT\n         LCLC  &_PRINT                 * Print option for PRINT\n         LCLC  &_PROPT                 * Print option for PUSH/POP\n         LCLC  &SLIST                  * Copy of SYSLIST\n         LCLA  &S                      * Index for SYSLIST\n         LCLA  &I                      * Index into list of map-macro's\n         LCLC  &MACRO                  * Name of macro to generate\n.*\n.* If parameter LIST not yes or no: issue error\n         AIF   ('&LIST' EQ 'YES').NOERR1\n         AIF   ('&LIST' EQ 'NO').NOERR1\n.ERR1    MNOTE 8,'Parameter LIST must specify either YES or NO'\n.NOERR1  ANOP\n.*\n.* If this is not a recursive invocation, then copy the LIST-option to\n.* a global, for use in subsequent (recursive) invocations.\n         AIF   (K'&BXA_MAPS_LST NE 0).NOTLVL1\n&LVL1    SETB  1                       * First level invocation:\n&BXA_MAPS_LST SETC '&LIST'             *       set global\n         AIF   (NOT &SP_SHOWALL).NOTLVL1 * For SHOWALL-option\n&BXA_MAPS_LST SETC 'YES'               *    force value of LIST=YES\n.NOTLVL1 ANOP\n.*\n.* Set _GEN variable according to LIST parameter\n&_GEN    SETC  'NOGEN'                 * LIST=NO is default\n         AIF   ('&BXA_MAPS_LST' NE 'YES').NOGEN\n&_GEN    SETC  'GEN'\n.NOGEN   ANOP\n.*\n.* Set listing options\n         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP/PRINT\n&_PRINT  SETC  ',NOPRINT'              * Not ALL: omit PRINT lines\n&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines\n.PRINTOK ANOP\n.*\n.* If maps not specified as a sublist, do so\n         AIF   (K'&MAPS EQ 0).GOON     * First parm missing\n         AIF   ('&MAPS'(1,1) EQ '(').GOON * &MAPS already a sublist\n&SLIST   SETC  '&SYSLIST(1)'           * Set SLIST to first entry\n&S       SETA  1                       * S indexes SYSLIST\n.LOOPS   ANOP  ,                       * Loop thru SYSLIST entries\n&S       SETA  &S+1                    * Point next entry\n         AIF   (&S GT N'&SYSLIST).LOOPSOK * SYSLIST done?\n&SLIST   SETC  '&SLIST'.',&SYSLIST(&S)' * Append SYSLIST entry\n         AGO   .LOOPS                  * And go copy nesxt entry\n.LOOPSOK ANOP\n         GENMAPS (&SLIST),             * Recurse using sublist         *\n               LIST=&BXA_MAPS_LST      *    notation\n         MEXIT\n.GOON    ANOP\n.*\n.* Set up loop control logic\n&I       SETA  0\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&MAPS).LOOPOK\n.*\n&MACRO   SETC  '&MAPS(&I)'             * Take value from list\n         AIF   (K'&MACRO LT 3).PREFIX  * Too short to contain 'MAP'\n         AIF   ('&MACRO'(1,3) EQ 'MAP').PREFOK * Prefix is OK\n.PREFIX  ANOP  ,                       * Add prefix 'MAP' to macro-name\n&MACRO   SETC  'MAP&MACRO'             * Prefix with MAP\n.PREFOK  ANOP\n         AIF   (K'&MACRO LE 8).MACROK  * If macro is too long ...\n&MACRO   SETC  '&MACRO'(1,8)           *  truncate to 8 positions\n.MACROK  ANOP\n.*\n.* Expand macro-operand and issue message for listing\n         PUSH  PRINT&_PROPT            * Save print options\n         PRINT ON,&_GEN,NODATA&_PRINT  * Set print options\n         &MACRO ,                      * Expand macro from list\n         POP   PRINT&_PROPT            * Restore print options\n.*\n.* If list=yes: eject page\n         AIF   ('&_GEN' EQ 'NOGEN').LOOP\n         EJECT\n         AGO   .LOOP                   * And do next dsect\n.*\n.* We're done: restore printing options and exit\n.LOOPOK  ANOP\n         AIF  (NOT &LVL1).MEND\n&BXA_MAPS_LST SETC ''                  * Reset global for list-option\n.*\n.MEND    MEND\n./ ADD NAME=GLUE     0100-20096-20096-0111-00203-00203-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Call a program that may have another AMODE\n.*\n.* This macro is intended for calling a program that may or may not\n.* be in another AMODE. Registers R0 thru R13 arer supposed to be\n.* set up for interfacing with the target program, and will therefore\n.* not be modified by this program.\n.*\n&LABEL   GLUE  &DEST,                  * Destination register          *\n               &AMODE,                 * Desired AMODE                 *\n               &MF=                    * Macro form\n.*\n.* &DEST specifies the register containing the destination address\n.*       which is the entry point address of the program to be\n.*       invoked.\n.* &AMODE specifies the AMODE for the called program, used only on MF=E\n.*     - 31: Makes sure the destination pgm is called with AMODE=31\n.*     - 24: Makes sure the destination pgm is called with AMODE=24\n.*     - Omitted: Amode is taken from &DEST-register:\n.*       AMODE 24 if bit0 is 0, AMODE 31 if bit0 is 1\n.* &MF   Specifies the macro form:\n.*     - L specifies the list form\n.*     - (E,addr) or (E,(reg)) specifies the execute form\n.*       addr must be a location, that is addressed thru R13, and\n.*       must reside below the 16M-line\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC GLUE                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &_MF                    * E or L\n         LCLC  &_MF2                   * Plist address of MF=(E,addr)\n         LCLC  &_REG                   * Plist ptr if MF=(E,(reg))\n         LCLC  &EPA_OFFSET             * Offset of EPA in PLIST\n&EPA_OFFSET SETC '8'                   * Length of code before EPA\n.*\n.* Check the DEST parameter\n         AIF   (K'&DEST NE 0).NOERR1   * If specified: OK\n         AIF   ('&MF' EQ 'L').NOERR1   * Optional for MF=L\n.ERR1    MNOTE 8,'No destination register specified'\n.NOERR1  ANOP\n.*\n.* Check AMODE parameter\n         AIF   ('&_MF' EQ 'L' AND T'&AMODE EQ 'O').NOERR2\n         AIF   ('&_MF' EQ 'L').ERR2A\n         AIF   (T'&AMODE EQ 'O').NOERR2\n         AIF   ('&AMODE' EQ '31').NOERR2\n         AIF   ('&AMODE' EQ '24').NOERR2\n         AGO   .ERR2B\n.ERR2A   MNOTE 4,'AMODE parameter ignored: not allowed with MF=L'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'If specified, AMODE parameter must be 24 or 31'\n.NOERR2  ANOP\n.*\n.* Check the MF parameter\n         AIF   (K'&MF EQ 0).ERR3A      * Must be specified\n&_MF     SETC  '&MF'                   * Assume MF=x\n         AIF   ('&MF' EQ 'L').NOERR3   * Ok if MF=L\n         AIF   ('&MF'(1,1) NE '(').ERR3B * MF<>L: must be sublist\n         AIF   (N'&MF NE 2).ERR3B      * Must be two subparms\n&_MF     SETC  '&MF(1)'                * Assume MF=(x,...)\n&_MF2    SETC  '&MF(2)'                * Extract plist address\n         AIF   ('&MF(1)' NE 'E').ERR3B * Must be MF=(E,...)\n         AIF   ('&_MF2'(1,1) NE '(').NOERR3 * Plist not a (reg)\n&_REG    SETC  '&MF(2,1)'              * Extract register\n         AIF   ('&_REG' EQ 'R14').ERR3C\n         AIF   ('&_REG' EQ 'R15').ERR3C\n         AIF   ('&_REG' EQ '14').ERR3C\n         AIF   ('&_REG' EQ '15').ERR3C\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'MF parameter not specified'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'MF parameter must be L, (E,addr), or (E,(reg))'\n         AGO   .NOERR3\n.ERR3C   MNOTE 8,'Plist address cannot be passed in R14 or R15'\n.NOERR3  ANOP\n.*\n.* Check the number of parameters\n         AIF   ('&_MF' EQ 'L' AND N'&SYSLIST GT 1).ERR4\n         AIF   ('&_MF' EQ 'E' AND N'&SYSLIST GT 2).ERR4\n         AGO   .NOERR4\n.ERR4    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR4  ANOP\n.*\n.* Select the right MF\n         AIF   ('&_MF' EQ 'E').MFE\n         AIF   ('&_MF' EQ 'L').MFL\n         MNOTE 12,'Internal error'\n.*\n.MFE     ANOP\n.*\n.* Put destination address into plist\n         AIF   ('&_REG' NE '').PUTR    * Plist addressed by reg?\n         ST    &DEST,&EPA_OFFSET+&_MF2 * Store address into plist\n         AGO   .PUTOK\n.PUTR    ANOP  ,                       * Use reg to address plist\n         ST    &DEST,&EPA_OFFSET.(,R15) * Store address into plist\n.PUTOK   ANOP\n.*\n.* If AMODE specified: insert it into the destination address\n         AIF   (T'&AMODE EQ 'O').AMOK  * No amode specified\n         AIF   ('&AMODE' EQ '31').AM31 * Check AMODE\n.AM24    ANOP  ,                       * Insert zeros in bits 0-7\n         AIF   ('&_REG' NE '').AM24R   * Plist addressed by reg?\n         MVI   &EPA_OFFSET+&_MF2,X'00' * Make it a clean 24-bit address\n         AGO   .AMOK\n.AM24R   ANOP  ,                       * Use _reg to address plist\n         MVI   &EPA_OFFSET.(&_REG),X'00' * Insert 8 zero-bits\n         AGO   .AMOK\n.*\n.AM31    ANOP  ,                       * Insert 1 into bit 0\n         AIF   ('&_REG' NE '').AM31R   * Plist addressed by reg?\n         OI    &EPA_OFFSET+&_MF2,BIT0  * Turn on high-order bit\n         AGO   .AMOK\n.AM31R   ANOP  ,                       * Use _reg to address plist\n         OI    &EPA_OFFSET.(&_REG),BIT0 * Insert a single 1-bit\n.AMOK    ANOP  ,                       * AMode in EPA now ok\n.*\n.* Form the return address, with high-order bit set\n         BASR  R14,R0                  * R14 now points to this address\n_GLUE1&SYSNDX EQU *                    *\n         LA    R15,_GLUE2&SYSNDX-_GLUE1&SYSNDX * offset to ret-point\n         ALR   R14,R15                 * Point to ret-addr with amode  *\n                                       *       preserved\n         AIF   ('&_REG' NE '').PLISTR  * Plist pointered by reg?\n         LA    R15,&_MF2               * Point to plist\n         AGO   .PLISTOK\n.PLISTR  ANOP\n         LR    R15,&_REG               * Copy plist-addr to R15\n.PLISTOK ANOP  ,                       * R15 now ptr to plist\n.*\n.* Call the 'plist' - which actually is a mini-routine.\n         BAKR  R14,R15                 * Call program through glue-mod\n_GLUE2&SYSNDX EQU *                    * Return-point after BAKR\n         MEXIT\n.*\n.MFL     ANOP\n&LABEL   LABEL H\n         L     R15,&EPA_OFFSET.(,R15)  * Load AMODE + dest.address\n         BASSM R14,R15                 * Call intended program\n         PR    ,                       * Reset AMODE & return to caller\n         DS    F                       * Destination addr, bit 0=AMODE\n         MEXIT\n.*\n.MEND    MEND\n./ ADD NAME=GOTO     0100-20096-20096-0111-00151-00151-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: GOTO\n.* Conditionally branches to a target\n.*\n&LABEL   GOTO  ,                       * SYSLIST contains condition\n.*\n.* Syntax:\n.* 0) GOTO label\n.* 1) GOTO label,condition\n.* 2) GOTO label,UNLESS,condition\n.* 3) GOTO label,(condition)\n.* 4) GOTO label,(UNLESS,condition)\n.* condition: as in IF macro\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC GOTO                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Index to last valid\n         LCLC  &ARGS                   * SYSLIST as a string\n         LCLA  &I                      * Stack pointer\n         LCLC  &COND                   * Condition arg for GOTO\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST EQ 0).ERR1\n         AIF   (K'&SYSLIST(1) EQ 0).ERR1\n         AGO   .NOERR1\n.ERR1    MNOTE 8,'No destination for GOTO specified'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST LT 2).BRANCH * No condition: branch\n         AIF   (K'&SYSLIST(2) EQ 0).ERR2\n         AGO   .NOERR2\n.ERR2    MNOTE 4,'No condition specified'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* Check number of parameters for SYSLIST(2) = UNLESS\n&COND    SETC  'TRUE'\n&I       SETA  1                       * Skip destination label\n         AIF   ('&SYSLIST(2)' NE 'UNLESS').NOERR3\n&COND    SETC  'FALSE'\n&I       SETA  2                       * Skip label & UNLESS\n         AIF   (N'&SYSLIST LT 3).ERR3\n         AIF   (K'&SYSLIST(3) EQ 0).ERR3\n         AGO   .NOERR3\n.ERR3    MNOTE 8,'No condition specified'\n         MEXIT\n.NOERR3  ANOP\n.*\n.* Build ARGS from &SYSLIST. &I already set for loop\n         AIF   ('&SYSLIST(&I+1)'(1,1) EQ '(' AND N'&SYSLIST EQ &I+1).PA*\n               ROK\n.LOOP1   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AGO   .LOOP1                  * And go process next entry\n.LOOP1OK ANOP\n&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,\n         AGO   .GOTO\n.*\n.* Condition already parenthesized\n.PAROK   ANOP  ,\n&ARGS    SETC  '&SYSLIST(&I+1)'        * Copy condition\n.*\n.* Generate embedded IF statement with specified label\n.GOTO    ANOP  ,\n&I       SETA  &BXA_STK                * Copy current stack pointer\n&LABEL   IF    &ARGS,                  * Condition for GOTO            *\n               TARGET=&SYSLIST(1),     * Target for branch             *\n               COND=&COND              * FALSE if UNLESS specified\n         AIF   (&I EQ &BXA_STK).MEND   * No new stack entry!\n.*\n.* Remove new stack entry\n&BXA_STK SETA  &BXA_STK-1              * Remove new IF-entry from stack\n         MEXIT\n.*\n.* For an unconditional GOTO we generate a Branch to the label\n.BRANCH  ANOP  ,                       *\n&ARGS    SETC  '&SYSLIST(1)'           * Extract branch target\n         AIF   ('&ARGS'(1,1) EQ '(').BRANREG\n         B     &ARGS                   *\n         MEXIT ,                       *\n.*\n.* Branch to a target which is a register\n.BRANREG ANOP  ,                       *\n&ARGS    SETC  '&SYSLIST(1,1)'         * Extract branch target\n         BR    &ARGS                   *\n.*\n.MEND    MEND\n./ ADD NAME=IF       0100-20096-20096-0111-00330-00330-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: IF\n.* Combines with ELSE and ENDIF to conditionally execute code-blocks\n.*\n.* If the SYSLIST conatains only a single argument, which is enclosed\n.* in parentheses, then that string must be passed to IF$ as is.\n.* Otherwise, the arguments must be assembled into a parenthesized\n.* string, which is then passed to IF$.\n.*\n&LABEL   IF    &TARGET=,               * Optional target if cond. met  *\n               &COND=                  * Condition for use with TARGET\n.*                                     * Condition in &SYSLIST\n.*\n.* Syntax - See IF$ for basic IF-syntax\n.* A) Basic condition - as in IF$\n.* B) Several basic conditions, separated by AND:\n.*    cond1,AND,cond2,AND,cond3,...\n.* C) Several basic conditions, separated by OR:\n.*    cond1,OR,cond2,OR,cond3,...\n.* D) Mixing AND and OR is not supported.\n.* E) Condition nesting by means of parentheses is not supported.\n.*\n.* If TARGET is not specified, a normal IF-THEN-ELSE will be built.\n.* For TARGET specified and COND=TRUE or omitted, if the specified\n.*   condition is met, a branch to TARGET will be taken.\n.* For TARGET specified and COND=FALSE, if the specified condition is\n.*   not met, a branch to TARGET will be taken.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC IF                     * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_LBL(5)         * Labels\n         GBLA  &BXA_STK_LVL(5)         * Levels\n         LCLC  &ARGS                   * SYSLIST as a string\n         LCLA  &I,&J                   * Index into SYSLIST\n         LCLA  &LVL                    * Current level\n         LCLC  &OP                     * A single operator from SYSLIST\n         LCLC  &LOGOP                  * Logical operation AND/OR\n         LCLC  &ARG(5)                 * Condition strings\n         LCLA  &A                      * Index into &ARG\n         LCLB  &SYSL1                  * On if condition in SYSLIST(1)\n.*\n.* Variables for steering generation of IF$ statements\n         LCLC  &_LABEL                 * Label of IF\n         LCLC  &NCOND                  * Normal condition\n         LCLC  &FCOND                  * Final condition\n         LCLC  &NTARG                  * Normal target\n         LCLC  &FTARG                  * Final target\n         LCLC  &LABEOT                 * End-of-then label\n         LCLC  &LABEIF                 * End-of-if-statement label\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST EQ 0).ERR1\n         AIF   (K'&SYSLIST(1) EQ 0).ERR1\n         AGO   .NOERR1\n.ERR1    MNOTE 8,'No condition specified'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check COND parameter\n         AIF   (K'&COND EQ 0).NOERR2\n         AIF   ('&COND' NE 'TRUE' AND '&COND' NE 'FALSE').ERR2A\n         AIF   (K'&TARGET EQ 0).ERR2B\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'COND must be either TRUE or FALSE'\n         MEXIT\n.ERR2B   MNOTE 4,'No TARGET specified, COND ignored'\n.NOERR2  ANOP\n.*\n.* Condition may be in &SYSLIST or in &SYSLIST(1)\n&J       SETA  (N'&SYSLIST)            * Nr of operands to extract\n         AIF   (N'&SYSLIST GT 1).SYSLIST\n         AIF   ('&SYSLIST(1)'(1,1) NE '(').SYSLIST\n&SYSL1   SETB  1                       * Condition is in &SYSLIST(1)\n&J       SETA  (N'&SYSLIST(1))         * Nr of operands to extract\n.*\n.* Build array ARG and check logical operators in condition string\n.SYSLIST ANOP  ,\n&I       SETA  0                       * I indexes &SYSLIST\n&A       SETA  0                       * A indexes &ARGS\n.LOOP3   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT &J).LOOP3OK      * At end: quit loop\n.* Extract operator, add to ARGS string\n         AIF   (&SYSL1).LOOP3L1\n&OP      SETC  '&SYSLIST(&I)'          * Extract operator from Syslist\n         AGO   .LOOP3OP\n.LOOP3L1 ANOP  ,\n&OP      SETC  '&SYSLIST(1,&I)'        * Extract operator from Syslist\n.LOOP3OP ANOP  ,                       * &OP extracted from SYSLIST\n         AIF   ('&OP' EQ 'AND').LOOP3LO * Handle logical\n         AIF   ('&OP' EQ 'OR').LOOP3LO *   operator\n&ARGS    SETC  '&ARGS'.','.'&OP'       * Add entry to ARGS\n         AGO   .LOOP3                  * And go process next entry\n.*\n.LOOP3LO ANOP  ,                       * Logical Operator handling\n         AIF   (K'&ARGS EQ 0).ERR3A    * Valid condition?\n&A       SETA  &A+1                    * Point next ARG-entry\n&ARG(&A) SETC  '&ARGS'(2,*)            * Remove lead comma in array\n&ARGS    SETC  ''                      * Reset ARGS for next condition\n         AIF   ('&OP' EQ '&LOGOP').LOOP3 * Next if logop ok.\n         AIF   ('&LOGOP' NE '').ERR3B  * Not first logop: error\n&LOGOP   SETC  '&OP'                   * Set logop on first pass\n         AGO   .LOOP3\n.*\n.ERR3A   MNOTE 4,'Logical operator &OP ignored: not preceded by a valid*\n                condition'\n         AGO   .LOOP3\n.ERR3B   MNOTE 8,'Cannot mix AND and OR in a single condition: &OP repl*\n               aced by &LOGOP'\n         AGO   .LOOP3\n.LOOP3OK ANOP\n.*\n.* Check last condition string in ARGS\n         AIF   (K'&ARGS EQ 0).ARGSMT   * ARGS empty?\n&A       SETA  &A+1                    * Point next ARG-entry\n&ARG(&A) SETC  '&ARGS'(2,*)            * Omit lead.comma in array\n.ARGSMT  ANOP  ,                       * &ARGS is empty\n.*\n.* If no valid condition in ARG, issue error and abort\n         AIF   (&A GT 0).NOERR4\n.ERR4A   MNOTE 8,'No valid condition found'\n         MEXIT\n.NOERR4  ANOP\n.*\n.* Generate code: if there is only one condition, pass it to IF$ as is.\n.* For more than 1 condition: generate successive IF$ invocations.\n         AIF   (&A EQ 1).SIMPEXP       * 1 condition: simple expression\n         AIF   ('&LOGOP' EQ 'AND').ANDEXP\n         AIF   ('&LOGOP' EQ 'OR').OREXP\n         MNOTE 12,'Internal error'\n         MEXIT\n.*\n.* Handle AND expression\n.ANDEXP  ANOP\n         AIF   (K'&TARGET GT 0 AND '&COND' EQ 'TRUE').ANDTT\n         AIF   (K'&TARGET GT 0 AND '&COND' EQ 'FALSE').ANDTF\n.*\n.* Normal AND of conditions; no target specified.\n.* For each condition we must generate a\n.*       GOTO  End_of_then,UNLESS,condition\n.* If all conditions are met we will drop thru into the then block.\n&NCOND   SETC  'FALSE'                 * Set UNLESS option for\n&FCOND   SETC  'FALSE'                 *  normal and final GOTO\n&LABEOT  SETC  '_IF_&SYSNDX'           * Determine end-of-then label\n&LABEIF  SETC  ''                      * End-of-if not needed\n&NTARG   SETC  '&LABEOT'               * Set target for normal\n&FTARG   SETC  '&LABEOT'               *  and final GOTO\n         AGO   .COMPEXP                * And go generate code\n.*\n.* AND of conditions, target specified with COND=TRUE\n.* For each condition but the last we must generate a\n.*       GOTO  End_of_if,UNLESS,condition\n.* For the last condition we must generate a\n.*       GOTO  TARGET,condition\n.ANDTT   ANOP  ,\n&NCOND   SETC  'FALSE'                 * Set UNLESS for normal GOTOs\n&FCOND   SETC  'TRUE'                  * No UNLESS for final GOTO\n&LABEOT  SETC  ''                      * End-of-then label not needed\n&LABEIF  SETC  '_IF_&SYSNDX'           * End-of-if for failing condit.s\n&NTARG   SETC  '&LABEIF'               * Set target for normal\n&FTARG   SETC  '&TARGET'               *  and final GOTO\n         AGO   .COMPEXP                * And go generate code\n.*\n.* AND of conditions, target specified with COND=FALSE\n.* For each condition we must generate a\n.*       GOTO  TARGET,UNLESS,condition\n.ANDTF   ANOP  ,\n&NCOND   SETC  'FALSE'                 * Set UNLESS for normal\n&FCOND   SETC  'FALSE'                 *  and final GOTO\n&LABEOT  SETC  ''                      * End-of-then label not needed\n&LABEIF  SETC  ''                      * End-of-if label not needed\n&NTARG   SETC  '&TARGET'               * Set target for normal\n&FTARG   SETC  '&TARGET'               *  and final GOTO\n         AGO   .COMPEXP                * And go generate code\n.*\n.* Handle OR expression\n.OREXP   ANOP\n         AIF   (K'&TARGET GT 0 AND '&COND' EQ 'TRUE').ORTT\n         AIF   (K'&TARGET GT 0 AND '&COND' EQ 'FALSE').ORTF\n.*\n.* Normal OR of conditions; no target specified.\n.* For each condition but the last we must generate a\n.*       GOTO  Then,condition\n.* For the last condition we must generate a\n.*       GOTO  End-of-then,UNLESS,condition\n&NCOND   SETC  'TRUE'                  * No UNLESS for nornal GOTOs\n&FCOND   SETC  'FALSE'                 * Set UNLESS for final GOTO\n&LABEOT  SETC  '_IF_&SYSNDX'           * Determine end-of-then label\n&LABEIF  SETC  '_THEN_&SYSNDX'         * End-of-if label\n&NTARG   SETC  '&LABEIF'               * Set target for normal\n&FTARG   SETC  '&LABEOT'               *  and final GOTO\n         AGO   .COMPEXP                * And go generate code\n.*\n.* OR of conditions, target specified with COND=TRUE\n.* For each condition we must generate a\n.*       GOTO  TARGET,condition\n.ORTT    ANOP  ,\n&NCOND   SETC  'TRUE'                  * Remove UNLESS for normal\n&FCOND   SETC  'TRUE'                  *  and final GOTO\n&LABEOT  SETC  ''                      * End-of-then label not needed\n&LABEIF  SETC  ''                      * End-of-if label not needed\n&NTARG   SETC  '&TARGET'               * Set target for normal\n&FTARG   SETC  '&TARGET'               *  and final GOTO\n         AGO   .COMPEXP                * And go generate code\n.*\n.* OR of conditions, target specified with COND=FALSE\n.* For each condition but the last we must generate a\n.*       GOTO  End_of_if,condition\n.* For the last condition we must generate a\n.*       GOTO  TARGET,UNLESS,condition\n.ORTF    ANOP  ,\n&NCOND   SETC  'TRUE'                  * Remove UNLESS for normal GOTOs\n&FCOND   SETC  'FALSE'                 * Set UNLESS for final GOTO\n&LABEOT  SETC  ''                      * End-of-then label not needed\n&LABEIF  SETC  '_IF_&SYSNDX'           * End-of-if for failing condit.s\n&NTARG   SETC  '&LABEIF'               * Set target for normal\n&FTARG   SETC  '&TARGET'               *  and final GOTO\n         AGO   .COMPEXP                * And go generate code\n.*\n.* Generate code as specified above\n.COMPEXP ANOP  ,\n&I       SETA  &BXA_STK                * Save current stack pointer\n&_LABEL  SETC  '&LABEL'                * Copy label for first IF$\n&A       SETA  0                       * I indexes &ARG array\n.LOOP1   ANOP  ,                       * For all conditions but last\n&A       SETA  &A+1                    * Point next condition\n         AIF   (&A GE N'&ARG).LOOP1OK  * End before processing last one\n&ARGS    SETC  '('.'&ARG(&A)'.')'      * Parenthesize condition string\n&_LABEL  IF$   &ARGS,TARGET=&NTARG,COND=&NCOND\n&_LABEL  SETC  ''                      * Do not generate label again\n         AGO   .LOOP1                  * and go gen. next condition\n.LOOP1OK ANOP  ,\n.* Generate final condition\n&ARGS    SETC  '('.'&ARG(&A)'.')'      * Parenthesize condition string\n         IF$   &ARGS,TARGET=&FTARG,COND=&FCOND\n.*\n.* Insert End-of-if label, if it has been used\n         AIF   (K'&LABEIF EQ 0).SKIPEIF\n&LABEIF  LABEL ,\n.SKIPEIF ANOP  ,\n.*\n.* Reset stack pointer to original position\n.* Add an entry if the end-of-then label has been used\n&BXA_STK SETA  &I                      * Reset ptr to saved value\n         AIF   (K'&LABEOT EQ 0).MEND   * No new entry needed\n.*\n&LVL     SETA  1                       * Level is 1 if ...\n         AIF   (&BXA_STK EQ 0).LVLOK   * the stack is empty\n&LVL     SETA  &BXA_STK_LVL(&BXA_STK)+1 * otherwise: create next level\n.LVLOK   ANOP  ,\n&I       SETA  &BXA_STK+1              * Point next stack entry\n&BXA_STK_OP(&I)  SETC 'IF'             * Indicate IF block in progress\n&BXA_STK_LBL(&I) SETC '&LABEOT'        * Label for ELSE or ENDIF\n&BXA_STK_LVL(&I) SETA &LVL             * Level for this structure\n&BXA_STK SETA  &I                      * Update stack pointer\n         MEXIT\n.*\n.* Generate embedded IF statement with parenthesized SYSLIST\n.SIMPEXP ANOP  ,\n&I       SETA  &BXA_STK                * Copy current stack pointer\n&ARGS    SETC  '('.'&ARG(1)'.')'       * Parenthesize condition string\n&LABEL   IF$   &ARGS,TARGET=&TARGET,COND=&COND\n.*\n.* Modify stack to reflect IF in stead of IF$\n         AIF   (&I EQ &BXA_STK).MEND   * No new stack entry!\n&BXA_STK_OP(&BXA_STK) SETC 'IF'        * Change IF$ into IF\n.*\n.MEND    MEND\n./ ADD NAME=IF$      0100-20096-20096-0111-01855-01855-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: IF$\n.* This macro takes 1 argument, which is a list of the actual arguments\n.* The arguments come in 6 different syntax types. IF$ is a sub-macro\n.* for use by the IF-macro. IF$ tests a single condition for IF.\n.*\n&LABEL   IF$   &TARGET=,               * Optional target if cond. met  *\n               &COND=                  * Condition for TARGET\n.*                                     * Condition in &SYSLIST(1)\n.*\n.* Syntax - 9 different versions allowed; each may or may not have\n.* the target label specified.\n.* 0 - cond                            * condition mnemonic\n.* 1 - bitfield,...                    * Must share byte-location\n.* 2 - NOT,bitfield,...                * Must share byte-location\n.* 3 - ANY,bitfield,...                * Must share byte-location\n.* 4 - field1,cond                     * storage or register\n.*     cond: Z,NZ,M,NM,P,NP\n.* 5 - field1,rel,field2               * storage and/or register\n.*     rel: EQ,NE,LT,LE,GT,GE\n.* 6 - cond,opcode,oper1,oper2         * condition with operation\n.* 7 - codefield                       * only 1 can be specified\n.* 8 - NOT,codefield                   * only 1 can be specified\n.*\n.* TARGET may be specified as a label-na, i.e. a RX-type address, or\n.*        it may be specified as (register).\n.* If TARGET is not specified, COND is ignored and a normal\n.*    IF-THEN-ELSE-ENDIF of IF-THEN-ENDIF sequence will be generated.\n.* If TARGET is specified, COND must be TRUE (which is the default)\n.*    or it must specify FALSE. For COND=TRUE a branch to TARGET will\n.*    be taken if the condition in &SYSLIST(1) is true, otherwise\n.*    the branch to TARGET will be taken whenever the condition in\n.*    &SYSLIST(1) is false.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC IF$                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_USED_REGS(16)      * USE status of registers\n         GBLA  &BXA_NUMVAL             * Return value from CHKNUM\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_LBL(5)         * Labels\n         GBLA  &BXA_STK_LVL(5)         * Levels\n         LCLC  &_LABEL                 * Label used by GEN5 logic\n         LCLC  &LBL                    * End-of-then-block label\n         LCLA  &LVL                    * Level for this IF struct\n         LCLA  &I,&J                   * Array pointer\n         LCLA  &SYNTAX                 * 1 thru 5\n         LCLC  &ARG                    * Single argument from SYSLIST\n         LCLC  &ARG1                   * First argument from SYSLIST\n         LCLA  &LEN1                   * Length of &ARG1 field\n         LCLC  &ARG2                   * Second argument from SYSLIST\n         LCLA  &LEN2                   * Length of &ARG2 field\n         LCLC  &ARGNAM                 * Actual field name from &ARG\n         LCLC  &ARGLBL                 * Label prefix from &ARG\n         LCLC  &PRFLBL                 * Label prefix\n         LCLA  &A                      * Pointer within &ARG\n         LCLC  &LOC                    * Byte location\n         LCLC  &_LOC                   * Current byte location\n         LCLC  &MASK(8)                * Mask names for bit fields\n         LCLA  &M                      * Pointer within &MASK\n         LCLB  &BITS(8)                * Bits to be tested\n         LCLA  &B                      * Pointer within &BITS\n         LCLA  &MASKVAL                * Mask value\n         LCLB  &MOREBITS               * On if more than 1 bit field\n         LCLB  &ERROR                  * A serious error occurred\n         LCLC  &TYPE1                  * Field type\n         LCLC  &TYPE2                  * Field type\n         LCLC  &COMBI(50)              * Field type combinations\n         LCLC  &MNEM                   * Condition mnemonic\n         LCLC  &TST                    * Test-condition (1-letter mnem)\n         LCLC  &OPCD                   * Opcode for branching to ELSE\n         LCLC  &OPCDINV                * Opcode for inverted compares\n         LCLA  &REG                    * Temporary register number\n         LCLA  &LITLEN                 * Length of &ARG2 as a literal\n         LCLA  &LITLENN                * Length of &ARG2 as a number\n         LCLB  &LITERAL                * 2nd argument is a literal\n         LCLB  &DODROP                 * DROP required yes/no\n         LCLB  &_TARGET                * TARGET with COND=TRUE?\n         LCLC  &_TREG                  * TARGET register name/number\n         LCLC  &CODEVAL                * Code value to test\n.*\n.* Check nr of arguments\n         AIF   (N'&SYSLIST EQ 0).ERR1A\n         AIF   (K'&SYSLIST(1) EQ 0).ERR1A\n         AIF   ('&SYSLIST(1)'(1,1) NE '(').ERR1B\n         AIF   ('&SYSLIST(1)'(K'&SYSLIST(1),1) NE ')').ERR1B\n         AIF   (K'&SYSLIST(1) LT 3).ERR1C\n&ARG     SETC  '&SYSLIST(1,1)'\n         AIF   (K'&ARG EQ 0).ERR1C\n         AIF   (N'&SYSLIST GT 1).ERR1D\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'Missing argument(s)'\n         MEXIT\n.ERR1B   MNOTE 8,'Condition not properly enclosed in parentheses'\n         MEXIT\n.ERR1C   MNOTE 8,'No valid condition found in first sublist'\n         MEXIT\n.ERR1D   MNOTE 4,'More than 1 condition: remainder ignored'\n.NOERR1  ANOP\n.*\n.* Check COND parameter\n         AIF   (K'&COND EQ 0).NOERR11\n         AIF   (K'&TARGET EQ 0).ERR11A\n         AIF   ('&COND' NE 'TRUE' AND '&COND' NE 'FALSE').ERR11B\n         AGO   .NOERR11\n.ERR11A  MNOTE 4,'COND specified without TARGET: COND ignored'\n         AGO   .NOERR11\n.ERR11B  MNOTE 8,'COND must be either TRUE or FALSE'\n&ERROR   SETB  1                       * Signal error\n.NOERR11 ANOP\n.*\n.* Check TARGET parameter\n.* COND=TRUE must alter the branching logic, COND=FALSE only changes\n.*    the target label for a false condition.\n         AIF   (K'&TARGET EQ 0).NOERR18\n         AIF   ('&TARGET'(1,1) NE '(').NOERR18\n&_TREG   SETC  '&TARGET(1)'            *\n         CHKREG &_TREG,g               * Must be a valid GPR\n         AIF   (&BXA_RC GT 4).ERR18A   * Invalid register\n         AGO   .NOERR18                *\n.ERR18A  ANOP  ,                       *\n&_TREG   SETC  (DOUBLE '&_TREG')       *\n         MNOTE 8,'&_TREG is not a valid target register'\n&ERROR   SETB  1                       * Signal error\n.NOERR18 ANOP\n         AIF   (K'&TARGET EQ 0).NOTARGT\n         AIF   ('&COND' EQ 'FALSE').NOTARGT\n&_TARGET SETB  1                       * Indicate TARGET with COND=TRUE\n.NOTARGT ANOP\n.*\n.* Determine syntax type\n&ARG     SETC  '&SYSLIST(1,1)'           * Extract first argument\n         AIF   (K'&ARG NE 1).ARGNOT1\n         AIF   ('&ARG' EQ 'E').SYNTAX06  * If the first argument is\n         AIF   ('&ARG' EQ 'H').SYNTAX06  *  a valid condition\n         AIF   ('&ARG' EQ 'L').SYNTAX06  *  mnemonic, then this is\n         AIF   ('&ARG' EQ 'M').SYNTAX06  *  syntax 0\n         AIF   ('&ARG' EQ 'O').SYNTAX06  *\n         AIF   ('&ARG' EQ 'P').SYNTAX06  *\n         AIF   ('&ARG' EQ 'Z').SYNTAX06  *\n.ARGNOT1 ANOP  ,                         *\n         AIF   (K'&ARG NE 2).ARGNOT2\n         AIF   ('&ARG' EQ 'NE').SYNTAX06 *\n         AIF   ('&ARG' EQ 'NH').SYNTAX06 *\n         AIF   ('&ARG' EQ 'NL').SYNTAX06 *\n         AIF   ('&ARG' EQ 'NM').SYNTAX06 *\n         AIF   ('&ARG' EQ 'NO').SYNTAX06 *\n         AIF   ('&ARG' EQ 'NP').SYNTAX06 *\n         AIF   ('&ARG' EQ 'NZ').SYNTAX06 *\n.ARGNOT2 ANOP  ,                         *\n         AIF   ('&ARG' EQ 'NOT').SYNTAX28 * Keywords are easy\n         AIF   ('&ARG' EQ 'ANY').SYNTAX3 * syntax identifiers\n.* first argument must be a field: check type\n&A       SETA  ('&ARG' FIND '+-*/(=),''') * Check for invalid chars\n         AIF   (&A NE 0).SYNTAX45      * Must be either type 4 or 5\n         AIF   (T'&ARG EQ 'b').SYNTAX1 * Bit-field defines syntax 1\n         AIF   (T'&ARG EQ 'v').SYNTAX7 * Value-field defines syntax 7\n.SYNTAX45 ANOP ,\n         AIF   (N'&SYSLIST(1) EQ 2).SYNTAX4 * Only two arguments\n         AIF   (K'&SYSLIST(1,3) EQ 0).SYNTAX4 * Third argument empty\n         AGO   .SYNTAX5                * Remaining option\n.*\n.* Syntax 0 or 6: condition code checking with(out) operation\n.SYNTAX06 ANOP\n         AIF   (N'&SYSLIST(1) LT 4).SYNTAX0\n         AGO   .SYNTAX6\n.*\n.* Syntax 2 or 8: NOT with either bitfield(s) or codefield value\n.SYNTAX28 ANOP\n         AIF   (N'&SYSLIST(1) LT 2).ERR13A * No field name\n&ARG     SETC  '&SYSLIST(1,2)'         * Extract first field after NOT\n         AIF   (K'&ARG EQ 0).ERR13A    * Field name omitted\n&A       SETA  ('&ARG' FIND '+-*/(=),''') * Check for invalid chars\n         AIF   (&A NE 0).ERR13B        * Cannot determine type\n         AIF   (T'&ARG EQ 'b').SYNTAX2 * Bit-field defines syntax 1\n         AIF   (T'&ARG EQ 'v').SYNTAX8 * Value-field defines syntax 7\n         AGO   .ERR13C\n.ERR13A  MNOTE 8,'Missing field name after NOT'\n         MEXIT\n.ERR13B  ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'Field name &ARG contains invalid characters'\n         MEXIT\n.ERR13C  MNOTE 8,'Field name &ARG is neither a bit field nor a code val*\n               ue'\n         MEXIT\n.*\n.* Syntax 0: condition code checking\n.SYNTAX0 ANOP\n&SYNTAX  SETA  0                       * Set syntax type\n         AGO   .CHKCC\n.*\n.* Syntax 1: a list of bit-fields\n.SYNTAX1 ANOP\n&SYNTAX  SETA  1                       * Set syntax type\n&I       SETA  0                       * List of fields starts at 1\n         AGO   .CHKBITS\n.*\n.* Syntax 2: NOT, followed by a list of bit-fields\n.SYNTAX2 ANOP\n&SYNTAX  SETA  2                       * Set syntax type\n&I       SETA  1                       * List of fields starts at 2\n         AGO   .CHKBITS\n.*\n.* Syntax 3: ANY, followed by a list of bit-fields\n.SYNTAX3 ANOP\n&SYNTAX  SETA  3                       * Set syntax type\n&I       SETA  1                       * List of fields starts at 2\n         AGO   .CHKBITS\n.*\n.* Syntax 4: field, followed by a condition mnemonic\n.SYNTAX4 ANOP\n&SYNTAX  SETA  4                       * Set syntax type\n         AGO   .CHKFLD1\n.*\n.* Syntax 5: field, followed by a condition, and another field\n.SYNTAX5 ANOP\n&SYNTAX  SETA  5                       * Set syntax type\n         AGO   .CHKFLD1\n.*\n.* Syntax 6: condtion code test after specified operation\n.SYNTAX6 ANOP\n&SYNTAX  SETA  6                       * Set syntax type\n         AGO   .CHKCC\n.*\n.* Syntax 7: code value test\n.SYNTAX7 ANOP\n&SYNTAX  SETA  7                       * Set syntax type\n&I       SETA  1                       * Field name in subparm 1\n         AGO   .CHKCODE\n.*\n.* Syntax 8: negative code value test\n.SYNTAX8 ANOP\n&SYNTAX  SETA  8                       * Set syntax type\n&I       SETA  2                       * Field name in subparm 2\n         AGO   .CHKCODE\n.**********************************************************************\n.*\n.* Logic for condition code checking: syntax 0 and 6\n.* - For syntax 0 no other parameters allowed\n.* - For syntax 6 three additional parameters required\n.*\n.**********************************************************************\n.*\n.* Check number of arguments\n.CHKCC   ANOP  ,\n         AIF   (&SYNTAX EQ 0 AND N'&SYSLIST(1) GT 1).ERR12A\n         AIF   (&SYNTAX EQ 6 AND N'&SYSLIST(1) GT 4).ERR12B\n         AIF   (&SYNTAX EQ 0).NOERR12\n         AIF   (&SYNTAX EQ 6).NOERR12\n         MNOTE 12,'Internal error 12'\n         MEXIT\n.ERR12A  MNOTE 4,'More than one argument passed: remainder ignored'\n         AGO   .NOERR12\n.ERR12B  MNOTE 4,'More than four arguments passed: remainder ignored'\n.NOERR12 ANOP  ,\n.*\n.* For syntax 0 - no more checks needed\n         AIF   (&SYNTAX EQ 0).GENLBL   * Syntax 0: done\n.*\n.* Check operation code: must set the condition code\n&ARG     SETC  '&SYSLIST(1,2)'         * Extract opcode\n         AIF   (K'&ARG EQ 0).SYNTAX0   * Must be syntax 0 after all\n&ARG     SETC  ' &ARG '                * Embed between blanks\n&I       SETA  (' CR C CFC CS CDS CH CLR CL CLC CLI CLM CLCL EXCLC ' IN*\n               DEX '&ARG')             * Is it a compare instruction?\n         AIF   (&I NE 0).NOERR17\n&I       SETA  (' AR A AH ALR AL SR S SH SLR SL ' INDEX '&ARG')\n         AIF   (&I NE 0).NOERR17       * Is it an arithmetic operation?\n&I       SETA  (' NR N NC NI XR X XC XI OR O OC OI ' INDEX '&ARG')\n         AIF   (&I NE 0).NOERR17       * Is it a logical operation?\n&I       SETA  (' ICM LTR LCR LNR LPR MVCL MVPG SLDA SLA SRDA SRA STCK *\n               TS TM  TRT UPT ' INDEX '&ARG')\n         AIF   (&I NE 0).NOERR17       * Some other valid instruction?\n&I       SETA  (' AP CP ED EDMK SRP SP ZAP ' INDEX '&ARG')\n         AIF   (&I NE 0).NOERR17       * Is it a decimal instruction?\n&I       SETA  (' AXR ADR AD AER AE AWR AW AUR AU CDR CD CER CE LTDR   *\n               LTER LCDR LCER LNDR LNER LPDR LPER SXR SDR SD SER SE    *\n               SWR SW SUR SU ' INDEX '&ARG')\n         AIF   (&I NE 0).NOERR17       * A floating point instruction?\n&I       SETA  (' ESTA IAC LASP LRA MVCP MVCS MVCK RRBE SCK SIGP TAR   *\n               TB TPROT ' INDEX '&ARG')\n         AIF   (&I NE 0).NOERR17       * Some control instruction?\n&I       SETA  (' EXTRT EXXC LT LTA24 LTC LTH LTHU ' INDEX '&ARG')\n         AIF   (&I NE 0).NOERR17       * A macro of our own?\n&ARG     SETC  (DOUBLE '&SYSLIST(1,2)')\n.ERR17A  MNOTE 8,'Opcode &ARG is not known to set the condition code'\n&ERROR   SETB  1                       * Signal error\n.NOERR17 ANOP  ,\n.*\n         AGO   .GENLBL\n.**********************************************************************\n.*\n.* Logic for bit-field checking: syntaxes 1, 2, and 3.\n.* - All bit-names specified must specify the same byte of storage\n.* - No bit name may be specified more than once\n.* - All masks must be ored together\n.*\n.**********************************************************************\n.*\n.* Check all bit-field names for consistency\n.CHKBITS ANOP  ,                       * Check all bit fields specified\n&J       SETA  &I+1                    * Index of first bit field arg\n         AIF   (&J EQ N'&SYSLIST(1)).ONLY1BF * Only 1 bit field?\n&MOREBITS SETB 1                       * Indicate more than 1 bit-field\n.ONLY1BF ANOP  ,\n.*\n&LOC     SETC  ''                      * Init location to 'unknown'\n&M       SETA  0                       * Init pointer for MASK array\n.*\n.LOOP2   ANOP  ,                       * Loop thru bit-field names\n&I       SETA  &I+1                    * Point next name\n         AIF   (&I GT N'&SYSLIST(1)).LOOP2OK * At end: quit loop\n&ARG     SETC  '&SYSLIST(1,&I)'        * Extract bit name\n         AIF   (K'&ARG EQ 0).LOOP2     * Skip omitted entry\n&A       SETA  ('&ARG' FIND '+-*/(=),''') * Check for invalid chars\n         AIF   (&A NE 0).ERR2A         * Error: not a field-name\n         AIF   (T'&ARG NE 'b').ERR2B   * Error: not a bit-field\n.* Remove leading USING labels\n&ARGNAM  SETC  '&ARG'                  * Copy complete field name\n.LOOP6   ANOP  ,                       *   to remove USE-labels\n&A       SETA  ('&ARGNAM' FIND '.')    * Check for a period\n         AIF   (&A EQ 0).LOOP6OK       * No more labels: quit loop\n&ARGNAM  SETC  '&ARGNAM'(&A+1,*)       * Remove leading label + period\n&A       SETA  (K'&ARG-K'&ARGNAM)      * Length of labels\n&ARGLBL  SETC  '&ARG'(1,&A)            * Retrieve label\n         AGO   .LOOP6\n.LOOP6OK ANOP\n.* Check that no duplicate name be entered\n&J       SETA  0                       * J indexes MASK\n.LOOP3   ANOP  ,                       * Loop thru defined mask names\n&J       SETA  &J+1                    * Point next mask name\n         AIF   (&J GT &M).LOOP3NF      * At end: name not found\n         AIF   ('NAM' NE '&MASK(&J)').LOOP3 * Skip mismatch\n         AGO   .ERR2E                  * Duplicate entry\n.LOOP3NF ANOP  ,                       * Not found: add name to MASK\n&M       SETA  &M+1                    * Point next available entry\n&MASK(&M) SETC '&ARGNAM'               * Insert bit name into table\n.* Safe to use created set symbol: continue checks\n         GBLC  &(BXA_BITF_&ARGNAM)     * Name for byte location\n&_LOC    SETC  '&(BXA_BITF_&ARGNAM)'   * Extract byte location\n         AIF   (K'&_LOC EQ 0).ERR2C    * Error: no loction\n         AIF   (K'&LOC EQ 0).LOOP2P1   * Unknown on first pass\n         AIF   ('&_LOC' NE '&LOC').ERR2D * Error: different locations\n         AGO   .LOOP2P2                * Skip first-pass logic\n.LOOP2P1 ANOP  ,                       * First pass: set location\n&LOC     SETC  '&_LOC'                 * LOC set from first bit-field\n&PRFLBL  SETC  '&ARGLBL'               * Set prefix label\n.LOOP2P2 ANOP  ,                       * First pass logic done\n         AIF   ('&ARGLBL' NE '&PRFLBL').ERR2D\n.* Now set on the bits in &BITS to be tested\n&MASKVAL SETA  L'&ARGNAM               * Retrieve mask value\n         AIF   (NOT &MOREBITS).LOOP2   * Skip this if there's 1 field\n&B       SETA  0                       * B indexes BITS array\n&J       SETA  256                     * J is compare value\n.LOOP4   ANOP  ,                       * Loop thru bits 0-7\n&B       SETA  &B+1                    * Index to next bit\n         AIF   (&B GT 8).LOOP4OK       * At end: quit loop\n&J       SETA  (&J SRA 1)              * Halve the compare value\n         AIF   (&MASKVAL LT &J).LOOP4  * This bit off: check next\n&BITS(&B) SETB 1                       * This bit to be tested\n&MASKVAL SETA  (&MASKVAL-&J)           * Subtract tested bit\n         AGO   .LOOP4                  * And go check next bit\n.LOOP4OK ANOP  ,\n         AGO   .LOOP2                  * Go check next bit field\n.*\n.ERR2A   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not a valid name for a bit field'\n&ERROR   SETB  1                       * Signal error\n         AGO   .LOOP2                  * Go check next entry\n.ERR2B   ANOP  ,\n         MNOTE 8,'&ARG is not defined as a bit field'\n&ERROR   SETB  1                       * Signal error\n         AGO   .LOOP2                  * Go check next entry\n.ERR2C   ANOP  ,\n         MNOTE 8,'Location of bit field &ARG is unknown'\n&ERROR   SETB  1                       * Signal error\n         AGO   .LOOP2                  * Go check next entry\n.ERR2D   ANOP  ,\n         MNOTE 8,'Location of bit field &ARG differs from preceding one*\n                '\n&ERROR   SETB  1                       * Signal error\n         AGO   .LOOP2                  * Go check next entry\n.ERR2E   ANOP  ,\n         MNOTE 4,'Duplicate mention of bit field &ARG: ignored'\n         AGO   .LOOP2                  * Go check next entry\n.*\n.* All bit fields checked: create compare value\n.LOOP2OK ANOP  ,\n         AIF   (NOT &MOREBITS).LOOP5OK * MASKVAL correct if 1 field\n&MASKVAL SETA  0                       * Initialize mask value\n&B       SETA  0                       * B indexes BITS array\n&J       SETA  256                     * J is corresponding bit value\n.LOOP5   ANOP  ,                       * Loop thru bits 0-7\n&B       SETA  &B+1                    * Index to next bit\n         AIF   (&B GT 8).LOOP5OK       * At end: quit loop\n&J       SETA  (&J SRA 1)              * Halve the bit's value\n         AIF   (NOT &BITS(&B)).LOOP5   * This bit off: check next\n&MASKVAL SETA  (&MASKVAL+&J)           * Add value of bit to test\n         AGO   .LOOP5                  * And go check next bit\n.LOOP5OK ANOP  ,\n.*\n         AIF   (&MASKVAL NE 0).NOERR4  * Mask value 0: not a real test\n.ERR4    MNOTE 4,'Condition mask is zero: not a useful test'\n.NOERR4  ANOP\n         AGO   .GENLBL\n.**********************************************************************\n.*\n.* Logic for first field checking: syntaxes 4 and 5.\n.* - The field must have a supported type\n.*\n.**********************************************************************\n.CHKFLD1 ANOP  ,\n.*\n.* Argument 1 must be a field of a valid type\n&ARG     SETC  '&SYSLIST(1,1)'         * Extract field name\n&A       SETA  ('&ARG' FIND '+-*/(),''') * Check for invalid chars\n         AIF   (&A NE 0).ERR5A         * Error: not a field-name\n&TYPE1   SETC  T'&ARG                  * Extract field type\n&A       SETA  ('ABCFGHRVXag' FIND '&TYPE1')\n         AIF   (&A EQ 0).ERR5B         * Not a supported type\n         AIF   ('&TYPE1' EQ 'C' AND &SYNTAX EQ 4).ERR5C\n         AIF   (L'&ARG EQ 0).ERR5D     * Cannot normally happen\n         AGO   .NOERR5\n.ERR5A   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not a valid field name'\n&ERROR   SETB  1\n         AGO   .NOERR5\n.ERR5B   MNOTE 8,'Field &ARG has an unsupported type: &TYPE1'\n&ERROR   SETB  1\n         AGO   .NOERR5\n.ERR5C   MNOTE 8,'Cannot test a character field without a compare value*\n               '\n&ERROR   SETB  1\n         AGO   .NOERR5\n.ERR5D   MNOTE 8,'Field &ARG has zero length: cannot compare'\n&ERROR   SETB  1\n.NOERR5  ANOP  ,\n.*\n.* Other checks depend on syntax type\n         AIF   (&SYNTAX EQ 4).CHKCOND\n         AIF   (&SYNTAX EQ 5).CHKREL\n         MNOTE 12,'Internal error 1'\n         MEXIT\n.**********************************************************************\n.*\n.* Logic for condition checking: syntax 4.\n.* - Condition mnemonic must be a supported one\n.* - Nr of arguments must be exactly 2\n.*\n.**********************************************************************\n.CHKCOND ANOP  ,\n.*\n.* Operand 2 must be a valid condition mnemonic\n         AIF   (N'&SYSLIST(1) LT 2).ERR3A * 2nd operand must be there\n&ARG     SETC  '&SYSLIST(1,2)'         * Extract condition\n         AIF   (K'&ARG EQ 0).ERR3A     * Error: empty parm\n         AIF   ('&ARG' EQ 'M').NOERR3\n         AIF   ('&ARG' EQ 'P').NOERR3\n         AIF   ('&ARG' EQ 'Z').NOERR3\n         AIF   ('&ARG' EQ 'NM').NOERR3\n         AIF   ('&ARG' EQ 'NP').NOERR3\n         AIF   ('&ARG' EQ 'NZ').NOERR3\n         AGO   .ERR3B                  * Error: unknown condition\n.ERR3A   MNOTE 8,'No condition entered'\n&ERROR   SETB  1                       * Signal error\n         AGO   .NOERR3\n.ERR3B   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not a supported condition mnemonic'\n&ERROR   SETB  1                       * Signal error\n.NOERR3  ANOP  ,\n.*\n.* Check the number of parameters for syntax 4\n         AIF   (N'&SYSLIST(1) LE 2).NOERR6A\n.ERR6A   MNOTE 4,'More than two parameters passed: remainder ignored'\n.NOERR6A ANOP\n         AGO   .GENLBL                 * No more checks for syntax 4\n.**********************************************************************\n.*\n.* Logic for relation checking: syntax 5.\n.* - relation mnemonic must be a supported one\n.* - Nr of arguments must be exactly 3\n.* - Second field or literal must be of a supported type\n.* - Types of both fields must be a supported combination\n.*\n.**********************************************************************\n.CHKREL  ANOP\n.*\n.* Operand 2 must be a valid condition mnemonic\n         AIF   (N'&SYSLIST(1) LT 2).ERR10A * 2nd operand must be there\n&ARG     SETC  '&SYSLIST(1,2)'         * Extract relation\n         AIF   (K'&ARG EQ 0).ERR10A    * Error: empty parm\n&OPCD    SETC  'BNE'                    * Set branch-over-then opcode\n&OPCDINV SETC  'BNE'                    *  and inverted comp. opcode\n         AIF   ('&ARG' EQ 'EQ').NOERR10 *  for EQ condition\n&OPCD    SETC  'BE'                     * Set branch-over-then opcode\n&OPCDINV SETC  'BE'                     *  and inverted comp. opcode\n         AIF   ('&ARG' EQ 'NE').NOERR10 *  for NE condition\n&OPCD    SETC  'BNL'                    * Set branch-over-then opcode\n&OPCDINV SETC  'BNH'                    *  and inverted comp. opcode\n         AIF   ('&ARG' EQ 'LT').NOERR10 *  for LT condition\n&OPCD    SETC  'BNH'                    * Set branch-over-then opcode\n&OPCDINV SETC  'BNL'                    *  and inverted comp. opcode\n         AIF   ('&ARG' EQ 'GT').NOERR10 *  for GT condition\n&OPCD    SETC  'BH'                     * Set branch-over-then opcode\n&OPCDINV SETC  'BL'                     *  and inverted comp. opcode\n         AIF   ('&ARG' EQ 'LE').NOERR10 *  for LE condition\n&OPCD    SETC  'BL'                     * Set branch-over-then opcode\n&OPCDINV SETC  'BH'                     *  and inverted comp. opcode\n         AIF   ('&ARG' EQ 'GE').NOERR10 *  for GE condition\n         AGO   .ERR10B                  * Error: unknown relation\n.ERR10A  MNOTE 8,'No relation entered'\n&ERROR   SETB  1                       * Signal error\n         AGO   .NOERR10\n.ERR10B  ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not a supported relation mnemonic'\n&ERROR   SETB  1                       * Signal error\n.NOERR10 ANOP  ,\n.*\n.* Second field or literal Required\n         AIF   (N'&SYSLIST(1) LT 3).ERR7A * 3d operand must be there\n&ARG     SETC  '&SYSLIST(1,3)'         * Extract field name\n         AIF   (K'&ARG EQ 0).ERR7A     * Error: empty parm\n&A       SETA  ('0123456789' FIND '&ARG'(1,1)) * This is a number?\n         AIF   (&A NE 0).ERR7NUM       * Yes: different checks!\n         AIF   ('&ARG'(1,1) EQ '-').ERR7NNUM * Negative number!\n         AIF   ('&ARG'(1,1) EQ '=').ERR7LIT * Literal: yet other checks\n&A       SETA  ('&ARG' FIND '+-*/(=),''') * Check for invalid chars\n         AIF   (&A NE 0).ERR7B         * Error: not a field-name\n&TYPE2   SETC  T'&ARG                  * Extract field type\n&A       SETA  ('ABCFGHRVXagv0' FIND '&TYPE2')\n         AIF   (&A EQ 0).ERR7C         * Not a supported type\n         AIF   ('&ARG' EQ '&SYSLIST(1,1)').ERR7G * Compare with self\n&BXA_NUMVAL SETA L'&ARG                * Needed for equated literals\n         AIF   ('&TYPE2' EQ '0' AND L'&ARG GE 0).LITLEN  * equated lit.\n         AIF   ('&TYPE2' EQ '0' AND L'&ARG LT 0).LITLENN * find length\n         AIF   ('&TYPE2' EQ 'v').ERR7VAL * Still other specific tests\n         AIF   (L'&ARG EQ 0).ERR7H     * Cannot normally happen\n         AGO   .NOERR7                 *\n.*\n.ERR7VAL ANOP  ,                       * Check value field comparison\n.* Remove leading USING labels\n&ARGNAM  SETC  '&ARG'                  * Copy complete field name\n.LOOPA   ANOP  ,                       *   to remove USE-labels\n&A       SETA  ('&ARGNAM' FIND '.')    * Check for a period\n         AIF   (&A EQ 0).LOOPAOK       * No more labels: quit loop\n&ARGNAM  SETC  '&ARGNAM'(&A+1,*)       * Remove leading label + period\n&A       SETA  (K'&ARG-K'&ARGNAM)      * Length of labels\n&ARGLBL  SETC  '&ARG'(1,&A)            * Retrieve label including dot\n         AGO   .LOOPA                  *\n.LOOPAOK ANOP  ,                       *\n.* Safe to use created set symbol: extract location of field\n         GBLC  &(BXA_BITF_&ARGNAM)     * Name for field location\n&_LOC    SETC  '&(BXA_BITF_&ARGNAM)'   * Extract field location\n         AIF   (K'&_LOC EQ 0).ERR7J    * Error: no location\n&LOC     SETC  '&_LOC'                 * LOC set from code-field\n&PRFLBL  SETC  '&ARGLBL'               * Set prefix label\n&CODEVAL SETC  '&ARGNAM'               * Set code value to test\n&ARG     SETC  '&PRFLBL'.'&LOC'        * Location of codefield\n         AIF   ('&SYSLIST(1,1)' NE '&ARG').ERR7K * Must match!\n         AGO   .NOERR7                 *\n.*\n.ERR7NUM ANOP  ,                       * Check literal number\n&LITERAL SETB  1                       * Indicate this is a literal\n&TYPE2   SETC  '0'                     * Set type to literal number\n         CHKNUM VAL=&ARG,              *                               *\n               MSGLVL=**,              * Suppress messages             *\n               HEX=NO                  * Disallow hex\n         AIF   (&BXA_NUMVAL EQ 0 AND '&ARG' NE '0'                     *\n               AND '&ARG' NE '00' AND '&ARG' EQ '000').ERR7D\n.LITLEN  ANOP  ,                       *\n&LITLENN SETA  0                       * Determine length of literal\n         AIF   (&BXA_NUMVAL EQ 0).NOERR7 * by cascading through the\n&LITLENN SETA  1                           * possibilities\n         AIF   (&BXA_NUMVAL LT 128).NOERR7\n&LITLENN SETA  2\n         AIF   (&BXA_NUMVAL LT 32768).NOERR7\n&LITLENN SETA  3\n         AIF   (&BXA_NUMVAL LT 8388608).NOERR7\n&LITLENN SETA  4\n         AIF   (&BXA_NUMVAL LE 2147483647).NOERR7\n         AGO   .ERR7D\n.*\n.ERR7NNUM ANOP ,                       * Check negative literal number\n&LITERAL SETB  1                       * Indicate this is a literal\n&TYPE2   SETC  '0'                     * Set type to literal number\n&ARG2    SETC  '&ARG'(2,*)             * Extract numerical part\n         CHKNUM VAL=&ARG2,             *                               *\n               MSGLVL=**,              * Suppress messages             *\n               HEX=NO                  * Disallow hex\n.LITLENN ANOP  ,                       *\n         AIF   (&BXA_NUMVAL EQ 0).ERR7D\n&LITLENN SETA  1                       * Determine length of literal\n         AIF   (&BXA_NUMVAL LE 128).NOERR7 * by cascading thru the\n&LITLENN SETA  2                             * possibilities\n         AIF   (&BXA_NUMVAL LE 32768).NOERR7\n&LITLENN SETA  3\n         AIF   (&BXA_NUMVAL LE 8388608).NOERR7\n&LITLENN SETA  4\n         AIF   (&BXA_NUMVAL LE 2147483647).NOERR7\n         AGO   .ERR7D\n.*\n.ERR7LIT ANOP  ,                       * Check a literal\n&LITERAL SETB  1                       * Indicate this is a literal\n&A       SETA  ('&ARG' FIND ',')       * Check for invalid chars\n         AIF   (&A NE 0).ERR7E         * Error: not a literal\n&TYPE2   SETC  '&ARG'(2,1)             * Extract field type\n&A       SETA  ('ABCFHVX' FIND '&TYPE2') * Valid literal type?\n         AIF   (&A EQ 0).ERR7F         * Not a supported type\n.* Determine length of literal\n         AIF   ('&ARG'(3,1) EQ 'L').LITLEN_X * Explicit length?\n         AIF   ('&TYPE2' EQ 'A').LITLEN4 * Implicit length for A: 4\n         AIF   ('&TYPE2' EQ 'F').LITLEN4 * Implicit length for F: 4\n         AIF   ('&TYPE2' EQ 'H').LITLEN2 * Implicit length for H: 2\n         AIF   ('&TYPE2' EQ 'V').LITLEN4 * Implicit length for V: 4\n&LITLEN  SETA  (K'&ARG-4)                * Length of literal sec\n         AIF   ('&TYPE2' EQ 'B').LITLENB * Implicit length for B\n         AIF   ('&TYPE2' EQ 'X').LITLENX * Implicit length for X\n.* Implicit length for character strings\n&ARG2    SETC  '&ARG'(4,&LITLEN)       * Extract text of string\n&I       SETA  ('&ARG2' FIND '''')     * Embedded quotes?\n         AIF   (&I EQ 0).NOERR7        * No: length is ok.\n.* Deduct half the number of embedded quotes from length\n&I       SETA  0                       * I indexes &ARG2 string\n&J       SETA  0                       * J is count of quotes\n.LOOP8   ANOP  ,                       * Count all quotes\n&I       SETA  &I+1                    * Point next character\n         AIF   (&I GT K'&ARG2).LOOP8OK * At end: quit loop\n         AIF   ('&ARG2'(&I,1) NE '''').LOOP8 * Skip mismatch\n&J       SETA  &J+1                    * Increment quote count\n         AGO   .LOOP8                  * And go check next character\n.LOOP8OK ANOP  ,\n&J       SETA  &J/2                    * Half the number of quotes\n&LITLEN  SETA  &LITLEN-&J              * does not count as a character\n         AGO   .NOERR7\n.* Length of a binary constant is one eighth the number of digits\n.LITLENB ANOP\n&LITLEN  SETA  (&LITLEN+7)/8           * Always rounding up\n         AGO   .NOERR7\n.* Length of a hex constant is half the number of digits\n.LITLENX ANOP\n&LITLEN  SETA  (&LITLEN+1)/2           * Always rounding up\n         AGO   .NOERR7\n.* Implicit length for halfword literals\n.LITLEN2 ANOP\n&LITLEN  SETA  2\n         AGO   .NOERR7\n.* Implicit length for fullword, and address literals\n.LITLEN4 ANOP\n&LITLEN  SETA  4\n         AGO   .NOERR7\n.*\n.* Find length of a literal with explicit length field\n.LITLEN_X ANOP ,\n         AIF   ('&TYPE2' EQ 'A').SETTYPR * Set type to R to reflect\n         AIF   ('&TYPE2' EQ 'V').SETTYPR *  explicit length\n         AIF   ('&TYPE2' EQ 'F').SETTYPG * Set type to G to reflect\n         AIF   ('&TYPE2' EQ 'H').SETTYPG *  explicit length\n         AIF   ('&TYPE2' EQ 'C').SETTYP_ * Type remains as is\n         AIF   ('&TYPE2' EQ 'B').SETTYP_ * Type remains as is\n         AIF   ('&TYPE2' EQ 'X').SETTYP_ * Type remains as is\n         MNOTE 12,'Internal error 2 for type &TYPE2'\n         MEXIT\n.SETTYPR ANOP  ,\n&TYPE2   SETC  'R'                     * Address, explicit length\n&I       SETA  ('&ARG' FIND '(')       * Locate literal delimiter\n         AGO   .LITLEN_X2\n.SETTYPG ANOP  ,\n&TYPE2   SETC  'G'                     * Fixed-point, explicit length\n&I       SETA  ('&ARG' FIND '''')      * Locate literal delimiter\n         AGO   .LITLEN_X2\n.SETTYP_ ANOP  ,                       * Type does not change\n&I       SETA  ('&ARG' FIND '''')      * Locate literal delimiter\n.LITLEN_X2 ANOP ,\n         AIF   (&I EQ 0).ERR7I         * Invalid value\n&I       SETA  &I-4                    * Nr of chars in length value\n&ARG2    SETC  '&ARG'(4,&I)            * Extract length value\n&LITLEN  SETA  &ARG2                   * Copy length from modifier\n         AGO   .NOERR7\n.*\n.ERR7A   MNOTE 8,'Missing third parameter (second field name)'\n&ERROR   SETB  1                       * Signal error\n         AGO   .NOERR7\n.ERR7B   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not a valid field name'\n&ERROR   SETB  1\n         AGO   .NOERR7\n.ERR7C   MNOTE 8,'Field &ARG has an unsupported type: &TYPE2'\n&ERROR   SETB  1\n         AGO   .NOERR7\n.ERR7D   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not a valid literal number'\n&ERROR   SETB  1\n         AGO   .NOERR7\n.ERR7E   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not a valid literal'\n&ERROR   SETB  1\n         AGO   .NOERR7\n.ERR7F   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'Literal &ARG has an unsupported type: &TYPE2'\n&ERROR   SETB  1\n         AGO   .NOERR7\n.ERR7G   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'Not very useful to compare with self!'\n&ERROR   SETB  1\n         AGO   .NOERR7\n.ERR7H   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'Field &ARG has zero length: cannot compare'\n&ERROR   SETB  1\n         AGO   .NOERR7\n.ERR7I   ANOP  ,\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'Literal &ARG contains no valid literal value'\n&ERROR   SETB  1\n         AGO   .NOERR7\n.ERR7J   ANOP  ,\n&ARGNAM  SETC  (DOUBLE '&ARGNAM')\n         MNOTE 8,'Location of &ARGNAM is not defined'\n&ERROR   SETB  1\n         AGO   .NOERR7\n.ERR7K   ANOP  ,\n&ARGNAM  SETC  (DOUBLE '&ARGNAM')\n         MNOTE 8,'Location of &ARGNAM does not match compared field'\n&ERROR   SETB  1\n.NOERR7  ANOP  ,\n.*\n.* Check the number of parameters for syntax 5\n         AIF   (N'&SYSLIST(1) LE 3).NOERR8\n.ERR8    MNOTE 4,'More than three parameters passed: remainder ignored'\n.NOERR8  ANOP\n.*\n.* Check the combination of types\n         AIF   ('&TYPE1' EQ '&TYPE2').NOERR9 * Equal types: always ok\n&COMBI(1) SETC 'AA','AR','AV','Ag',                                    *\n               'BB','BX','Bg',                                         *\n               'CC',                                                   *\n               'FF','FG','FH','Fa','Fg','F0',                          *\n               'GF','GH','GG','Gg','G0',                               *\n               'HF','HG','HH','Hg','H0',                               *\n               'RA','RR','RV','Rg',                                    *\n               'VA','VR','VV','Vg',                                    *\n               'XB','XX','Xa','Xg','Xv',                               *\n               'aF','aX','aa','ag',                                    *\n               'gA','gB','gF','gG','gH','gR','gV','gX','ga','gg','g0'\n&I       SETA  0                       * I indexes COMBI array\n&ARG     SETC  '&TYPE1'.'&TYPE2'       * Search this combination in\n.LOOP7   ANOP  ,                       *   the COMBI array\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&COMBI).ERR9A  * Not supported\n         AIF   ('&ARG' NE '&COMBI(&I)').LOOP7 * Skip mismatch\n         AGO   .NOERR9\n.ERR9A   MNOTE 8,'Unsupported combination of types: &TYPE1 and &TYPE2'\n&ERROR   SETB  1\n.NOERR9  ANOP\n         AGO   .GENLBL\n.**********************************************************************\n.*\n.* Logic for code-value checking: syntaxes 7 and 8.\n.* - Only 1 value may be specified\n.*\n.**********************************************************************\n.CHKCODE ANOP  ,                       * Check code-value\n.*\n.* Retrieve location of field containing the specified value\n&ARG     SETC  '&SYSLIST(1,&I)'        * Extract field name\n.* Remove leading USING labels\n&ARGNAM  SETC  '&ARG'                  * Copy complete field name\n.LOOP9   ANOP  ,                       *   to remove USE-labels\n&A       SETA  ('&ARGNAM' FIND '.')    * Check for a period\n         AIF   (&A EQ 0).LOOP9OK       * No more labels: quit loop\n&ARGNAM  SETC  '&ARGNAM'(&A+1,*)       * Remove leading label + period\n&A       SETA  (K'&ARG-K'&ARGNAM)      * Length of labels\n&ARGLBL  SETC  '&ARG'(1,&A)            * Retrieve label\n         AGO   .LOOP9\n.LOOP9OK ANOP\n.* Safe to use created set symbol: extract location of field\n         GBLC  &(BXA_BITF_&ARGNAM)     * Name for field location\n&_LOC    SETC  '&(BXA_BITF_&ARGNAM)'   * Extract field location\n         AIF   (K'&_LOC EQ 0).ERR15A   * Error: no loction\n&LOC     SETC  '&_LOC'                 * LOC set from first code-field\n&PRFLBL  SETC  '&ARGLBL'               * Set prefix label\n&CODEVAL SETC  '&ARGNAM'               * Set code value to test\n         AGO   .NOERR15\n.ERR15A  ANOP  ,\n&ARGNAM  SETC  (DOUBLE '&ARGNAM')\n         MNOTE 8,'Location of &ARGNAM is not defined'\n&ERROR   SETB  1\n.NOERR15 ANOP  ,\n.*\n.* Check the number of parameters for syntax 7 or 8\n         AIF   (&SYNTAX EQ 7 AND N'&SYSLIST(1) GT 1).ERR16A\n         AIF   (&SYNTAX EQ 8 AND N'&SYSLIST(1) GT 2).ERR16B\n         AIF   (&SYNTAX EQ 7).NOERR16\n         AIF   (&SYNTAX EQ 8).NOERR16\n         MNOTE 12,'Internal error 13'\n         MEXIT\n.ERR16A  MNOTE 4,'More than one parameter passed: remainder ignored'\n         AGO   .NOERR16\n.ERR16B  MNOTE 4,'More than two parameters passed: remainder ignored'\n.NOERR16 ANOP\n         AGO   .GENLBL\n.**********************************************************************\n.*\n.* Generate end-of-then label and add to stack\n.* For TARGET specified, the branch-logic must be altered:\n.* -   for COND=TRUE the false-condition normally branches to the\n.*     end-of-then label, now the true-condition must branch to the\n.*     TARGET label, while a false condition drops thru.\n.* -   for COND=FALSE the the false condition that normally branches\n.*     to the end-of-then-label must now branch to the TARGET label.\n.*\n.**********************************************************************\n.GENLBL  ANOP  ,\n         AIF   (&ERROR).MEND           * Do not generate if error found\n&LBL     SETC  '_IF_&SYSNDX'           * Create end-of-then label\n         AIF   (K'&TARGET EQ 0).LBLOK  * Ok if target missing\n         AIF   ('&COND' NE 'FALSE').LBLOK * TARGET with COND=FALSE?\n&LBL     SETC  '&TARGET'               * Yes: replace target label\n.LBLOK   ANOP\n&LVL     SETA  1                       * Level is 1 if ...\n         AIF   (&BXA_STK EQ 0).LVLOK   * the stack is empty\n&LVL     SETA  &BXA_STK_LVL(&BXA_STK)+1 * otherwise: create next level\n.LVLOK   ANOP  ,\n&I       SETA  &BXA_STK+1              * Point next stack entry\n&BXA_STK_OP(&I)  SETC 'IF$'            * Indicate IF block in progress\n&BXA_STK_LBL(&I) SETC '&LBL'           * Label for ELSE or ENDIF\n&BXA_STK_LVL(&I) SETA &LVL             * Level for this structure\n&BXA_STK SETA  &I                      * Update stack pointer\n.*\n.* Select code generation logic\n         AIF   (&SYNTAX EQ 0).GEN0\n         AIF   (&SYNTAX EQ 1).GEN1     * Go generate code\n         AIF   (&SYNTAX EQ 2).GEN2     * According to determined\n         AIF   (&SYNTAX EQ 3).GEN3     * Sytax type\n         AIF   (&SYNTAX EQ 4).GEN4\n         AIF   (&SYNTAX EQ 5).GEN5\n         AIF   (&SYNTAX EQ 6).GEN6\n         AIF   (&SYNTAX EQ 7).GEN7\n         AIF   (&SYNTAX EQ 8).GEN8\n         MNOTE 12,'Internal error 3'\n         MEXIT\n.**********************************************************************\n.*\n.* Test condition code, either current or after an operation\n.*\n.**********************************************************************\n.GEN0    ANOP  ,\n&MNEM    SETC  '&SYSLIST(1,1)'         * Extract condition\n         AIF   (&_TARGET).GEN0_T       * TARGET with COND=TRUE?\n         AIF   (K'&MNEM EQ 1).CC1      * 1 or 2 characters menmonic?\n&TST     SETC  '&MNEM'(2,1)            * Set test-type = E/H/L/M/O/P/Z\n&OPCD    SETC  'B&TST'                 * Create Bx-instruction\n         AGO   .CCOK                   *\n.CC1     ANOP  ,                       *\n&TST     SETC  '&MNEM'                 * Set test-type = E/H/L/M/O/P/Z\n&OPCD    SETC  'BN'.'&TST'             * Create BNx-instruction\n.CCOK    ANOP  ,                       *\n         AIF   ('&LBL'(1,1) EQ '(').GEN0_R\n&LABEL   &OPCD &LBL                    * No: skip then-logic\n         MEXIT ,                       *\n.GEN0_R  ANOP  ,                       *\n&OPCD    SETC  '&OPCD'.'R'             * Add R for BxR/BNxR\n&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name\n         AGO   .CCOK                   *\n.*\n.GEN0_T  ANOP  ,                       *\n         AIF   ('&TARGET'(1,1) EQ '(').GEN0_TR\n&OPCD    SETC  'B&MNEM'                * Create Bx/BNx-instruction\n&LABEL   &OPCD &TARGET                 * Yes: branch to then-target\n         MEXIT ,                       *\n.GEN0_TR ANOP  ,                       *\n&OPCD    SETC  'B&MNEM'.'R'            * Create BxR/BNxR-instruction\n&LABEL   &OPCD &_TREG                  * Yes: branch to then-target\n         MEXIT ,                       *\n.**********************************************************************\n.*\n.* Test for bits being all on\n.*\n.**********************************************************************\n.GEN1    ANOP  ,\n&LABEL   TM    &PRFLBL.&LOC,&MASKVAL   * All bits on?\n         AIF   (&_TARGET).GEN1_T       * TARGET with COND=TRUE?\n         AIF   ('&LBL'(1,1) EQ '(').GEN1_R\n         BNO   &LBL                    * No: skip then-logic\n         MEXIT ,                       *\n.GEN1_R  ANOP  ,                       *\n&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name\n         BNOR  &LBL                    * No: skip then-logic\n         MEXIT ,                       *\n.*\n.GEN1_T  ANOP  ,                       *\n         AIF   ('&TARGET'(1,1) EQ '(').GEN1_TR\n         BO    &TARGET                 * Yes: branch to then-target\n         MEXIT ,                       *\n.GEN1_TR ANOP  ,                       *\n         BOR   &_TREG                  * Yes: branch to then-target\n         MEXIT ,                       *\n.**********************************************************************\n.*\n.* Test for bits being all off\n.*\n.**********************************************************************\n.GEN2    ANOP  ,\n&LABEL   TM    &PRFLBL.&LOC,&MASKVAL   * All bits off?\n         AIF   (&_TARGET).GEN2_T       * TARGET with COND=TRUE?\n         AIF   ('&LBL'(1,1) EQ '(').GEN2_R\n         BNZ   &LBL                    * No: skip then-logic\n         MEXIT ,                       *\n.GEN2_R  ANOP  ,                       *\n&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name\n         BNZR  &LBL                    * No: skip then-logic\n         MEXIT ,                       *\n.*\n.GEN2_T  ANOP  ,                       *\n         AIF   ('&TARGET'(1,1) EQ '(').GEN2_TR\n         BZ    &TARGET                 * Yes: branch to then-target\n         MEXIT ,                       *\n.GEN2_TR ANOP  ,                       *\n         BZR   &_TREG                  * Yes: branch to then-target\n         MEXIT ,                       *\n.**********************************************************************\n.*\n.* Test for at least 1 bit being on\n.*\n.**********************************************************************\n.GEN3    ANOP  ,\n&LABEL   TM    &PRFLBL.&LOC,&MASKVAL   * At least 1 bit on?\n         AIF   (&_TARGET).GEN3_T       * TARGET with COND=TRUE?\n         AIF   ('&LBL'(1,1) EQ '(').GEN3_R\n         BZ    &LBL                    * No: skip then-logic\n         MEXIT ,                       *\n.GEN3_R  ANOP  ,                       *\n&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name\n         BZR   &LBL                    * No: skip then-logic\n         MEXIT ,                       *\n.*\n.GEN3_T  ANOP  ,                       *\n         AIF   ('&TARGET'(1,1) EQ '(').GEN3_TR\n         BNZ   &TARGET                 * Yes: branch to then-target\n         MEXIT ,                       *\n.GEN3_TR ANOP  ,                       *\n         BNZR  &_TREG                  * Yes: branch to then-target\n         MEXIT ,                       *\n.**********************************************************************\n.*\n.* Test a field, depending on type, using inverted condition\n.*\n.**********************************************************************\n.GEN4    ANOP  ,\n&MNEM    SETC  '&SYSLIST(1,2)'         * Extract condition\n         AIF   (K'&MNEM EQ 1).COND1    * 1 or 2 characters menmonic?\n&TST     SETC  '&MNEM'(2,1)            * Set test-type = Z/P/M\n&OPCD    SETC  'B&TST'                 * Create Bx-instruction\n         AGO   .CONDOK                 *\n.COND1   ANOP  ,                       *\n&TST     SETC  '&MNEM'                 * Set test-type = Z/P/M\n&OPCD    SETC  'BN'.'&TST'             * Create BNx-instruction\n.CONDOK  ANOP\n.*\n&ARG     SETC  '&SYSLIST(1,1)'         * Extract name of field to test\n         AIF   ('&TYPE1' EQ 'A').GEN4LT  * Address\n         AIF   ('&TYPE1' EQ 'B').GEN4X   * Binary\n         AIF   ('&TYPE1' EQ 'F').GEN4LT  * Fullword\n         AIF   ('&TYPE1' EQ 'G').GEN4X   * Explicit length fixed-point\n         AIF   ('&TYPE1' EQ 'H').GEN4LH  * Halfword\n         AIF   ('&TYPE1' EQ 'R').GEN4X   * Explicit length address\n         AIF   ('&TYPE1' EQ 'V').GEN4LT  * Address\n         AIF   ('&TYPE1' EQ 'X').GEN4X   * Hexadecimal\n         AIF   ('&TYPE1' EQ 'a').GEN4EAR * Access register\n         AIF   ('&TYPE1' EQ 'g').GEN4LTR * General purpose register\n         MNOTE 12,'Internal error 4, type &TYPE1 not supported'\n         MEXIT\n.*\n.* Test a field with explicit length\n.GEN4X   ANOP  ,\n         AIF   (L'&ARG EQ 1).GEN4LT1   * Load and test 1 character\n         AIF   (L'&ARG EQ 2).GEN4LH    * Load and test 2 characters\n         AIF   (L'&ARG EQ 3).GEN4LT3   * Load and test 3 characters\n         AIF   (L'&ARG EQ 4).GEN4LT    * Load and test 4 characters\n.* Length exceeds 4: test on minus uses first bit only\n         AIF   ('&TST' EQ 'M').GEN4TM  * M or NM: check first bit (TM)\n         AIF   ('&TST' EQ 'Z').GEN4CLC * Z or NZ: use CLC\n.* Test a field of more than 4 bytes for being > 0\n         AIF   ('&MNEM' EQ 'P').GEN4P  * Big number Positive?\n         AIF   ('&MNEM' EQ 'NP').GEN4NP * Big number Not Positive?\n         MNOTE 12,'Internal error 5'\n         MEXIT\n.*\n.* Test a four-byte value\n.GEN4LT  ANOP  ,                       *\n&LABEL   ICM   R0,YYYY,&ARG            * Test value\n         AGO   .TERM\n.*\n.* Test a two-byte value\n.GEN4LH  ANOP  ,                       *\n&LABEL   ICM   R0,NNYY,&ARG            * Test value\n         AGO   .TERM\n.*\n.* Test a one-byte value\n.GEN4LT1 ANOP  ,                       *\n&LABEL   ICM   R0,NNNY,&ARG            * Test value\n         AGO   .TERM\n.*\n.* Test a three-byte value\n.GEN4LT3 ANOP  ,                       *\n&LABEL   ICM   R0,NYYY,&ARG            * Test value\n         AGO   .TERM\n.*\n.* Test a value in a general purpose register\n.GEN4LTR ANOP  ,                       * General purpose register\n&LABEL   LTR   &ARG,&ARG               * Test value\n         AGO   .TERM\n.*\n.* Test a value in an access register\n.GEN4EAR ANOP  ,                       * General purpose register\n         AIF   ('&OPCD' EQ 'BZ').GEN4EAR_1\n         AIF   ('&OPCD' EQ 'BNZ').GEN4EAR_1\n         MNOTE 4,'ALET can be checked only with Z or NZ'\n.GEN4EAR_1 ANOP ,\n&LABEL   EAR   R0,&ARG                 * Copy value to be tested\n         LTR   R0,R0                   * Test ALET from access register\n         AGO   .TERM\n.*\n.* Test a storage operand for being negative\n.GEN4TM  ANOP  ,                       * A storage operand\n&LABEL   TM    &ARG,X'80'              * Is it negative?\n         AIF   ('&MNEM' EQ 'M').GEN4BZ\n         AIF   ('&MNEM' EQ 'NM').GEN4BO\n         MNOTE 12,'Internal error 6'\n         MEXIT\n.GEN4BZ  ANOP\n&OPCD    SETC  'BZ'                    * If value is Minus: skip THEN\n         AGO   .TERM\n.GEN4BO  ANOP  ,\n&OPCD    SETC  'BO'                    * If value not Minus: skip THEN\n         AGO   .TERM\n.*\n.* Test a storage operand for being all zeroes\n.GEN4CLC ANOP  ,                       * General purpose register\n&LABEL   CLC   &ARG,=XL(L'&ARG)'00'    * Test value\n         AGO   .TERM\n.*\n.* Test a large field (>4 bytes) for being Positive\n.* Skip the THEN-block if BIT0 is on (negative number) or\n.*   if the whole field contains zeroes only\n.GEN4P   ANOP  ,                       *\n         AIF   (&_TARGET).GEN4P_T      * TARGET with COND=TRUE?\n         AIF   ('&LBL'(1,1) EQ '(').GEN4P_R\n&LABEL   TM    &ARG,X'80'              * Negative bit on?\n         BO    &LBL                    * If value is Minus: skip THEN\n         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?\n         BE    &LBL                    * If value is zero: skip THEN\n         MEXIT ,                       *\n.GEN4P_R ANOP  ,                       *\n&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name\n&LABEL   TM    &ARG,X'80'              * Negative bit on?\n         BOR   &LBL                    * If value is Minus: skip THEN\n         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?\n         BER   &LBL                    * If value is zero: skip THEN\n         MEXIT ,                       *\n.*\n.* Branch to TARGET if BIT0 is off (not-negative number) and\n.*   the whole field does not contain zeroes only\n.GEN4P_T ANOP  ,                       *\n&LABEL   TM    &ARG,X'80'              * Negative bit on?\n         BO    &LBL                    * If value is Minus: skip THEN\n         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?\n         AIF   ('&TARGET'(1,1) EQ '(').GEN4P_TR\n         BNE   &TARGET                 * If value not 0: goto TARGET\n&LBL     LABEL ,                       *\n         MEXIT ,                       *\n.GEN4P_TR ANOP ,                       *\n         BNER  &_TREG                  * If value not 0: goto TARGET\n&LBL     LABEL ,                       *\n         MEXIT ,                       *\n.*\n.* Test a large field (>4 bytes) for being Not Positive\n.* Skip the THEN-block if BIT0 is off (negative number) and\n.*      the whole field contains zeroes only\n.GEN4NP  ANOP  ,                       *\n         AIF   (&_TARGET).GEN4P_T      * TARGET with COND=TRUE?\n&LABEL   TM    &ARG,X'80'              * Negative bit on?\n         BO    _THEN&SYSNDX            * If value is Minus: goto THEN\n         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?\n         AIF   ('&LBL'(1,1) EQ '(').GEN4NP_R\n         BNE   &LBL                    * If value is zero: skip THEN\n_THEN&SYSNDX LABEL ,                   * Start of THEN-block\n         MEXIT ,                       *\n.GEN4NP_R ANOP ,                       *\n&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name\n         BNER  &LBL                    * If value is zero: skip THEN\n_THEN&SYSNDX LABEL ,                   * Start of THEN-block\n         MEXIT ,                       *\n.*\n.* Branch to TARGET if BIT0 is on (negative number) or\n.*      the whole field contains zeroes only\n.GEN4NP_T ANOP ,                       *\n         AIF   ('&LBL'(1,1) EQ '(').GEN4NP_TR\n&LABEL   TM    &ARG,X'80'              * Negative bit on?\n         BO    &TARGET                 * If value is Minus: goto TARGET\n         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?\n         BE    &TARGET                 * If value is zero: goto TARGET\n         MEXIT ,                       *\n.GEN4NP_TR ANOP ,                      *\n&LABEL   TM    &ARG,X'80'              * Negative bit on?\n         BOR   &_TREG                  * If value is Minus: goto TARGET\n         CLC   &ARG,=XL(L'&ARG)'00'    * Value is exactly zero?\n         BER   &_TREG                  * If value is zero: goto TARGET\n         MEXIT ,                       *\n.**********************************************************************\n.*\n.* Compare two fields\n.*\n.**********************************************************************\n.GEN5    ANOP  ,\n&_LABEL  SETC  '&LABEL'                * Label to generate\n&ARG1    SETC  '&SYSLIST(1,1)'         * Extract first field\n&ARG2    SETC  '&SYSLIST(1,3)'         *  and second field for compare\n&LEN1    SETA  L'&ARG1                 * Determine length of operand 1\n&LEN2    SETA  &LITLEN                 *  and operand 2\n         AIF   (&LITERAL).GEN5_LN      * If it is not a literal...\n&LEN2    SETA  L'&ARG2                 *  we use the field length\n.GEN5_LN ANOP  ,                       *\n.*\n         AIF   ('&TYPE1' EQ 'A').GEN5A * Address field\n         AIF   ('&TYPE1' EQ 'B').GEN5X * Unsigned binary field\n         AIF   ('&TYPE1' EQ 'C').GEN5C * Character field\n         AIF   ('&TYPE1' EQ 'F').GEN5F * Signed fullword\n         AIF   ('&TYPE1' EQ 'G').GEN5G * Signed field 1-4 bytes\n         AIF   ('&TYPE1' EQ 'H').GEN5H * Signed halfword\n         AIF   ('&TYPE1' EQ 'R').GEN5R * Unsigned unaligned field\n         AIF   ('&TYPE1' EQ 'V').GEN5A * V-type address same as A\n         AIF   ('&TYPE1' EQ 'X').GEN5X * X-type field same as B\n         AIF   ('&TYPE1' EQ 'a').GEN5R_A * access register compare\n         AIF   ('&TYPE1' EQ 'g').GEN5R_G * General purpose register\n         MNOTE 12,'Internal error 7, type &TYPE1 not supported'\n         MEXIT\n.*\n.* Error messages for .GEN5 logic\n.ERR14A  ANOP  ,\n         MNOTE 8,'Cannot allocate any register to hold compare value'\n         MEXIT\n.ERR14B  ANOP  ,\n&ARG2    SETC  (DOUBLE '&ARG2')\n         MNOTE 8,'&ARG2 is more than 4 bytes long: cannot compare'\n         MEXIT\n.ERR14C  ANOP  ,\n&ARG1    SETC  (DOUBLE '&ARG1')\n         MNOTE 8,'&ARG1 is more than 4 bytes long: cannot compare'\n         MEXIT\n.ERR14D  MNOTE 12,'Internal error 8 for type &TYPE1 and &TYPE2'\n         MEXIT\n.ERR14E  ANOP  ,\n&ARG1    SETC  (DOUBLE '&ARG1')\n&ARG2    SETC  (DOUBLE '&ARG2')\n         MNOTE 8,'Not a useful compare: range mismatch for &ARG1 and &A*\n               RG2'\n         MEXIT\n.ERR14F  ANOP  ,\n&ARG1    SETC  (DOUBLE '&ARG1')\n         MNOTE 8,'Cannot compare: &ARG1 too long for this compare'\n         MEXIT\n.ERR14G  ANOP  ,\n&ARG2    SETC  (DOUBLE '&ARG2')\n         MNOTE 8,'Cannot compare: &ARG2 not valid for an ALET'\n         MEXIT\n.ERR14H  ANOP  ,\n&ARG1    SETC  (DOUBLE '&ARG1')\n         MNOTE 8,'Cannot compare: &ARG1 not valid for an ALET'\n         MEXIT\n.*\n.* Compare an aligned unsigned fullword with something\n.GEN5A   ANOP  ,\n         AIF   ('&TYPE2' EQ 'A').GEN5_CLC * Compare direct\n         AIF   ('&TYPE2' EQ 'R').GEN5AX   * Check length\n         AIF   ('&TYPE2' EQ 'V').GEN5_CLC * Compare direct\n         AIF   ('&TYPE2' EQ 'g').GEN5_CL_ * Inverted compare logical\n         AGO   .ERR14D\n.*\n.* Compare an aligned unsigned fullword with an unaligned unsigned\n.*             field of a different length\n.GEN5AX  ANOP  ,\n         AIF   (&LEN EQ 4).GEN5_CLC    * Compare direct\n         AIF   (&LEN GT 4).ERR14B      * Too long to hold in a reg\n         IF$LU R0,&ARG2,&LITLEN,&TYPE2 * Load second arg in R0\n&ARG2    SETC  'R0'                    * Second argument now in R0\n         AGO   .GEN5_CL_               * And do an inverted compare\n.*\n.* Compare two character fields\n.GEN5C   ANOP  ,\n         AIF   ('&TYPE2' NE 'C').ERR14D  * ARG2 must be char too\n         AIF   (L'&ARG1 EQ &LEN2).GEN5_CLC * Ok to compare direct\n.* Unequal lengths: use CLCL\n         AGO   .GEN5_CLCL\n.*\n.* Compare an aligned signed fullword with something\n.GEN5F   ANOP  ,\n         AIF   ('&TYPE2' EQ 'F').GEN5FF * Load op1, then compare\n         AIF   ('&TYPE2' EQ 'G').GEN5FX * Check length\n         AIF   ('&TYPE2' EQ 'H').GEN5FH * Load op1, then compare\n         AIF   ('&TYPE2' EQ 'a').GEN5FAR * Copy AR, then compare\n         AIF   ('&TYPE2' EQ 'g').GEN5_C_ * Inverted compare\n         AIF   ('&TYPE2' EQ '0').GEN5FX  * Compare with a number\n         AGO   .ERR14D\n.*\n.* Compare an aligned signed fullword with an access register\n.* ALETs are unsigned: therefore a logical compare is used\n.GEN5FAR ANOP  ,\n         AIF   ('&OPCD' EQ 'BE').GEN5FAR_1\n         AIF   ('&OPCD' EQ 'BNE').GEN5FAR_1\n         MNOTE 4,'ALET can be compared only with EQ or NE'\n.GEN5FAR_1 ANOP ,\n&_LABEL  EAR   R0,&ARG2                * Load comparand\n&ARG2    SETC  'R0'                    * Argument now in R0\n&_LABEL  SETC  ''                      * Do not generate label again\n         AGO   .GEN5_CL_               * Inverted logical compare\n.*\n.* Compare an aligned signed fullword with another one\n.GEN5FF  ANOP  ,\n&_LABEL  L     R0,&ARG1                * Load compare value\n&ARG1    SETC  'R0'                    * Argument now in R0\n&_LABEL  SETC  ''                      * Do not generate label again\n         AGO   .GEN5_C                 * And go compare\n.*\n.* Compare an aligned signed fullword with an aligned signed halfword\n.GEN5FH  ANOP  ,\n&_LABEL  L     R0,&ARG1                * Load compare value\n&ARG1    SETC  'R0'                    * Argument now in R0\n&_LABEL  SETC  ''                      * Do not generate label again\n         AGO   .GEN5_CH                * And go compare\n.*\n.* Compare an aligned signed fullword with an unaligned signed field\n.GEN5FX  ANOP  ,\n&_LABEL  IF$LS R0,&ARG2,&LITLEN,&TYPE2 * Load field into register\n&_LABEL  SETC  ''                      * Do not generate Label again\n&ARG2    SETC  'R0'                    * Comparand value now in R0\n         AGO   .GEN5_C_                * Inverted compare\n.*\n.* Compare an unaligned signed field with something\n.GEN5G   ANOP  ,\n         AIF   ('&TYPE2' EQ 'F').GEN5GX  * Check lengths\n         AIF   ('&TYPE2' EQ 'G').GEN5GX  * Check lengths\n         AIF   ('&TYPE2' EQ 'H').GEN5GX  * Check lengths\n         AIF   ('&TYPE2' EQ 'g').GEN5GR  * Check length, use a register\n         AIF   ('&TYPE2' EQ '0').GEN5G0  * Check value\n         AGO   .ERR14D\n.*\n.* Compare an unaligned signed field with a register\n.GEN5GR  ANOP  ,\n         IF$ALC &ARG2                  * Assign some other register nr\n&REG     SETA  &BXA_NUMVAL             * assigned register number\n&_LABEL  IF$LS R&REG,&ARG1,,&TYPE1     * Load argument in Register\n&_LABEL  SETC  ''                      * Do not generate LABEL again\n&ARG1    SETC  'R&REG'                 * First argument now in Reg.\n         AGO   .GEN5_CR                * And compare values in regs\n.*\n.* Compare an unaligned signed field with some other storage field\n.* An EQ/NE condition with operands of equal length uses CLC\n.GEN5GX  ANOP  ,\n         AIF   ('&OPCD'(K'&OPCD,1) NE 'E').GEN5GX_NE * Test for Equal?\n         AIF   (&LITERAL).GEN5GX_L     * Literal or field?\n         AIF   (L'&ARG1 EQ L'&ARG2).GEN5_CLC * Ok to use CLC\n         AGO   .GEN5GX_NE\n.GEN5GX_L ANOP ,\n         AIF   (L'&ARG1 EQ &LITLEN).GEN5_CLC * Ok to use CLC\n.GEN5GX_NE ANOP ,\n&_LABEL  IF$LS R0,&ARG1,,&TYPE1        * Load first argument into R0\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R0'                    * First argument now in R0\n         AIF   ('&TYPE2' EQ 'F').GEN5_C * Compare with fullword\n         AIF   ('&TYPE2' EQ 'H').GEN5_CH * Compare with halfword\n         IF$LS R1,&ARG2,&LITLEN,&TYPE2 * Load second argument into R1\n&ARG2    SETC  'R1'                    * Second argument now in R1\n         AGO   .GEN5_CR                * Compare values in registers\n.*\n.* Compare an unaligned signed field with a literal decimal number\n.GEN5G0  ANOP  ,\n         AIF   ('&ARG2'(1,1) EQ '-').GEN5G0_N\n&I       SETA  &ARG2                   * Load decimal value\n         AIF   (&I EQ 0).GEN5G0_0      * Use ICM to set cond.code\n         AIF   (&I GT 127 AND L'&ARG1 LE 1).ERR14E\n         AIF   (&I GT 32767 AND L'&ARG1 LE 2).ERR14E\n         AIF   (&I GT 8388607 AND L'&ARG1 LE 3).ERR14E\n         AIF   ('&OPCD'(K'&OPCD,1) EQ 'E').GEN5G0_E\n&_LABEL  IF$LS R0,&ARG1,,&TYPE1        * Load first argument into R0\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R0'                    * First argument now in R0\n         AIF   (&I LT 4096).GEN5G0_LA\n&ARG2    SETC  '=H''&I'''              * Assume halfword value\n         AIF   (&I LT 32768).GEN5_CH\n&ARG2    SETC  '=F''&I'''              * Assume fullword value\n         AGO   .GEN5_C\n.* Decimal number is negative\n.GEN5G0_N ANOP ,\n&ARG     SETC  '&ARG2'(2,*)            * Extract numerical part\n&I       SETA  &ARG\n         AIF   (&I EQ 0).GEN5G0_0      * Set cond.code with ICM\n         AIF   (&I GT 127 AND L'&ARG1 LE 1).ERR14E\n         AIF   (&I GT 32767 AND L'&ARG1 LE 2).ERR14E\n         AIF   (&I GT 8388607 AND L'&ARG1 LE 3).ERR14E\n         AIF   ('&OPCD'(K'&OPCD,1) EQ 'E').GEN5G0_E\n&_LABEL  IF$LS R0,&ARG1,,&TYPE1        * Load first argument into R0\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R0'                    * First argument now in R0\n&ARG2    SETC  '=H''-&I'''             * Assume halfword value\n         AIF   (&I LT 32768).GEN5_CH\n&ARG2    SETC  '=F''-&I'''             * Assume fullword value\n         AGO   .GEN5_C\n.* Check is for EQ/NE: use CLC or CLI\n.GEN5G0_E ANOP ,\n         AIF   (L'&ARG1 EQ 1).GEN5G0_E1\n         AIF   (L'&ARG1 EQ 2).GEN5G0_E2\n         AIF   (L'&ARG1 EQ 3).GEN5G0_E3\n         AIF   (L'&ARG1 EQ 4).GEN5G0_E4\n         MNOTE 12,'Internal error 9'\n         MEXIT\n.GEN5G0_E1 ANOP ,\n         AIF   ('&ARG2'(1,1) NE '-').GEN5_CLI * CLI for positive nrs\n         CLC   &ARG1,=HL1'&ARG2'       * CLI refuses negative argument\n         AGO   .TERM\n.GEN5G0_E2 ANOP ,\n         CLC   &ARG1,=H'&ARG2'\n         AGO   .TERM\n.GEN5G0_E3 ANOP ,\n         CLC   &ARG1,=FL3'&ARG2'\n         AGO   .TERM\n.GEN5G0_E4 ANOP ,\n         CLC   &ARG1,=F'&ARG2'\n         AGO   .TERM\n.* Decimal number is between 1 and 4095 inclusive\n.GEN5G0_LA ANOP ,\n         LA    R1,&ARG2                * Load comparand\n&ARG2    SETC  'R1'                    * Second argument now in R1\n         AGO   .GEN5_CR                * Go compare values in regs\n.* Decimal number is 0, use ICM to test ARG1\n.GEN5G0_0 ANOP ,\n         AIF   (L'&ARG1 EQ 1).GEN5G0_1\n         AIF   (L'&ARG1 EQ 2).GEN5G0_2\n         AIF   (L'&ARG1 EQ 3).GEN5G0_3\n         AIF   (L'&ARG1 EQ 4).GEN5G0_4\n.* Field is too long for ICM. Use CLC instead.\n         AIF   ('&OPCD'(K'&OPCD,1) NE 'E').ERR14F\n&I       SETA  L'&ARG1\n         CLC   &ARG1,=FL&I.'0'\n         AGO   .TERM\n.GEN5G0_1 ANOP ,                       * Test EQ/NE may use CLI, others\n         AIF   ('&OPCD'(K'&OPCD,1) EQ 'E').GEN5_CLI * must use ICM\n&_LABEL  ICM   R0,NNNY,&ARG1           * Test for zero value\n         AGO   .TERM\n.GEN5G0_2 ANOP ,\n&_LABEL  ICM   R0,NNYY,&ARG1           * Test for zero value\n         AGO   .TERM\n.GEN5G0_3 ANOP ,\n&_LABEL  ICM   R0,NYYY,&ARG1           * Test for zero value\n         AGO   .TERM\n.GEN5G0_4 ANOP ,\n&_LABEL  ICM   R0,YYYY,&ARG1           * Test for zero value\n         AGO   .TERM\n.*\n.* Compare an aligned signed halfword with something\n.GEN5H   ANOP  ,\n         AIF   ('&TYPE2' EQ 'F').GEN5HF * Load op1, then compare\n         AIF   ('&TYPE2' EQ 'G').GEN5HX * Check length\n         AIF   ('&TYPE2' EQ 'H').GEN5HH * Load op2, then compare\n         AIF   ('&TYPE2' EQ 'g').GEN5_CH_ * Inverted compare\n         AIF   ('&TYPE2' EQ '0').GEN5HX  * Compare with a number\n         AGO   .ERR14D\n.*\n.* Compare an aligned signed halfword with an aligned signed fullword\n.GEN5HF  ANOP  ,\n&_LABEL  LH    R0,&ARG1                * Load compare value\n&ARG1    SETC  'R0'                    * Argument now in R0\n&_LABEL  SETC  ''                      * Do not generate label again\n         AGO   .GEN5_C                 * And go compare\n.*\n.* Compare an aligned signed halfword with another one\n.GEN5HH  ANOP  ,\n&_LABEL  LH    R0,&ARG1                * Load compare value\n&ARG1    SETC  'R0'                    * Argument now in R0\n&_LABEL  SETC  ''                      * Do not generate label again\n         AGO   .GEN5_CH                * And go compare\n.*\n.* Compare an aligned signed halfword with an unaligned signed field\n.GEN5HX  ANOP  ,\n         AIF   (&LITLENN GT 2).ERR14E\n&_LABEL  IF$LS R0,&ARG2,&LITLEN,&TYPE2 * Load field into register\n&_LABEL  SETC  ''                      * Do not generate Label again\n&ARG2    SETC  'R0'                    * Comparand value now in R0\n         AGO   .GEN5_CH_               * Inverted compare\n.*\n.* Compare an unaligned unsigned address field with something\n.GEN5R   ANOP  ,\n         AIF   ('&TYPE2' EQ 'g').GEN5XR  * Compare with a register\n         AIF   ('&TYPE2' EQ 'A').GEN5RA  * Second operand aligned\n         AIF   ('&TYPE2' EQ 'R').GEN5RR  * Check alignement&lengths\n         AIF   ('&TYPE2' EQ 'V').GEN5RA  * Second operand aligned\n         AGO   .ERR14D\n.*\n.* Compare an unaligned unsigned field with an aligned unsigned word\n.GEN5RA  ANOP  ,\n         AIF   (&LEN1 EQ &LEN2).GEN5_CLC * Lengths equal: use CLC\n&_LABEL  IF$LU R0,&ARG1,,&TYPE1          * Load comparand value\n&_LABEL  SETC  ''                        * Do not generate label again\n&ARG1    SETC  'R0'                      * Operand 1 now in R0\n         AGO   .GEN5_CL                  * And do logical compare\n.*\n.* Compare an unaligned unsigned field with an unaligned unsigned field\n.GEN5RR  ANOP  ,\n         AIF   (&LEN1 EQ &LEN2).GEN5_CLC * Equal lengths:compare direct\n         AIF   (&LEN1 GT 4).ERR14C     * Check lengths for\n         AIF   (&LEN2 GT 4).ERR14B     *  validity\n         AIF   (&LEN2 EQ 4 AND '&ARG2'(1,1)  EQ '=').GEN5RA * Aligned!\n&_LABEL  IF$LU R0,&ARG1,,&TYPE1        * Insert operand 1 in R0\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R0'                    * Operand 1 now in R0\n         IF$LU R1,&ARG2,&LITLEN,&TYPE2 * Load second operand\n&ARG2    SETC  'R1'                    * Comparand now in R1\n         AGO   .GEN5_CLR               * And go compare\n.*\n.* Compare an access register with something\n.GEN5R_A ANOP  ,\n         AIF   ('&TYPE2' EQ 'F').GEN5R_AF * Compare with a fullword\n         AIF   ('&TYPE2' EQ 'X').GEN5R_AX * Second operand not aligned\n         AIF   ('&TYPE2' EQ 'a').GEN5R_AA * Compare with other AR\n         AIF   ('&TYPE2' EQ 'g').GEN5R_AG * Second operand a GPR\n         AGO   .ERR14D\n.*\n.* Compare an access register with an aligned fullword\n.GEN5R_AF ANOP ,\n&_LABEL  CPY   R0,&ARG1                * Copy ALET\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R0'                    * ALET from AR now in R0\n         AGO   .GEN5_CL                * And do compare logical\n.*\n.* Compare an access register with an unaligned field\n.GEN5R_AX ANOP ,\n         AIF   (&LEN2 NE 4).ERR14G     * Length of ALET always 4!\n         AIF   ('&ARG2'(1,1) EQ '=').GEN5R_AF\n&_LABEL  CPY   R0,&ARG1                * Copy ALET\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R0'                    * ALET from AR now in R0\n         IF$LU R1,&ARG2,&LITLEN,&TYPE2 * Load comparand value\n&ARG2    SETC  'R1'                    * Operand 2 now in R1\n         AGO   .GEN5_CLR               * And do compare logical\n.*\n.* Compare an access register with an access register\n.GEN5R_AA ANOP ,\n&_LABEL  CPY   R0,&ARG1                * Copy ALET\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R0'                    * ALET from AR now in R0\n         CPY   R1,&ARG2                * Load comparand value\n&ARG2    SETC  'R1'                    * Operand 2 now in R1\n         AGO   .GEN5_CLR               * And do compare logical\n.*\n.* Compare an access register with a general purpose register\n.GEN5R_AG ANOP ,\n         IF$ALC &ARG2                  * Assign some other register nr\n&REG     SETA  &BXA_NUMVAL             * assigned register number\n&_LABEL  CPY   R&REG,&ARG1             * Load ALET in Register\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R&REG'                 * First argument now in Reg.\n         AGO   .GEN5_CLR               * And compare values in regs\n.*\n.* Compare a register with something\n.GEN5R_G ANOP  ,\n         AIF   ('&TYPE2' EQ 'A').GEN5_CL  * Compare with unsigned word\n         AIF   ('&TYPE2' EQ 'B').GEN5R_GX * Compare with unsigned field\n         AIF   ('&TYPE2' EQ 'F').GEN5_C   * Compare with signed word\n         AIF   ('&TYPE2' EQ 'G').GEN5R_GG * Compare with signed field\n         AIF   ('&TYPE2' EQ 'H').GEN5_CH  * Compare with signed halfwd\n         AIF   ('&TYPE2' EQ 'R').GEN5R_GX * Compare with unsigned field\n         AIF   ('&TYPE2' EQ 'V').GEN5_CL  * Compare with unsigned word\n         AIF   ('&TYPE2' EQ 'X').GEN5R_GX * Compare with unsigned field\n         AIF   ('&TYPE2' EQ 'a').GEN5R_G_A * Compare with access reg.\n         AIF   ('&TYPE2' EQ 'g').GEN5_CR  * Compare with GPR\n         AIF   ('&TYPE2' EQ '0').GEN5R_G0 * Compare with number\n         AGO   .ERR14D\n.*\n.* Compare a register with an access register\n.GEN5R_G_A ANOP ,\n         IF$ALC &ARG1                  * Assign some other register nr\n&REG     SETA  &BXA_NUMVAL             * assigned register number\n&_LABEL  CPY   R&REG,&ARG2             * Load ALET in Register\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG2    SETC  'R&REG'                 * First argument now in Reg.\n         AGO   .GEN5_CLR               * And compare values in regs\n.*\n.* Compare a register with a signed field\n.GEN5R_GG ANOP ,\n         AIF   (&LEN2 EQ 4 AND '&ARG2'(1,1) EQ '=').GEN5_C\n         IF$ALC &ARG1                  * Assign some other register nr\n&REG     SETA  &BXA_NUMVAL             * assigned register number\n&_LABEL  IF$LS R&REG,&ARG2,&LITLEN,&TYPE2 * Copy comparand to register\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG2    SETC  'R&REG'                 * First argument now in Reg.\n         AGO   .GEN5_CR                * And compare values in regs\n.*\n.* Compare a register with an unsigned field\n.GEN5R_GX ANOP ,\n         AIF   (&LEN2 EQ 4 AND '&ARG2'(1,1) EQ '=').GEN5_CL\n         AIF   (&LEN2 EQ 4).GEN5_CLM4\n         IF$ALC &ARG1                  * Assign some other register nr\n&REG     SETA  &BXA_NUMVAL             * assigned register number\n&_LABEL  IF$LU R&REG,&ARG2,&LITLEN,&TYPE2 * Copy comparand to register\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG2    SETC  'R&REG'                 * First argument now in Reg.\n         AGO   .GEN5_CLR               * And compare values in regs\n.*\n.* Compare a register with a literal decimal constant\n.GEN5R_G0 ANOP ,\n         AIF   (&LITLENN EQ 0).GEN5_LTR * Compare with zero value?\n         AIF   (NOT &LITERAL).GEN5R_G0_A * Equated literal!\n         AIF   (&LITLENN GT 2).GEN5R_G0_2\n&ARG2    SETC  '=H''&ARG2'''           * Create a halfword literal\n         AGO   .GEN5_CH                * And go compare\n.GEN5R_G0_2 ANOP ,\n&ARG2    SETC  '=F''&ARG2'''           * Create a fullword literal\n         AGO   .GEN5_C                 * And go compare\n.GEN5R_G0_A ANOP ,                     * Use address constants\n         AIF   (&LITLENN GT 2).GEN5R_G0_B\n&ARG2    SETC  '=AL2(&ARG2)'           * Create a halfword literal\n         AGO   .GEN5_CH                * And go compare\n.GEN5R_G0_B ANOP ,\n&ARG2    SETC  '=A(&ARG2)'             * Create a fullword literal\n         AGO   .GEN5_C                 * And go compare\n.*\n.* Compare an unaligned unsigned field with something\n.GEN5X   ANOP  ,\n         AIF   ('&TYPE2' EQ 'a').GEN5XAR * Compare with an access reg.\n         AIF   ('&TYPE2' EQ 'g').GEN5XR  * Compare with a register\n         AIF   ('&TYPE2' EQ 'v').GEN5XV  * Compare with a code value\n         AIF   ('&TYPE2' EQ 'X').GEN5XX  * Check lengths\n         AIF   ('&TYPE2' EQ 'B').GEN5XX  * Check lengths\n         AGO   .ERR14D\n.*\n.* Compare an unaligned unsigned field with an access register\n.GEN5XAR ANOP  ,\n         AIF   (&LEN1 NE 4).ERR14H\n&_LABEL  ICM   R0,YYYY,&ARG1           * Copy field to register\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R0'                    * Operand 1 now in R0\n         CPY   R1,&ARG2                * Copy ALET to R1\n&ARG2    SETC  'R1'                    * Comparand value now in R1\n         AGO   .GEN5_CLR               * And go compare registers\n.*\n.* Compare an unaligned unsigned field with a register\n.GEN5XR  ANOP  ,\n         IF$ALC &ARG2                  * Assign some other register nr\n&REG     SETA  &BXA_NUMVAL             * assigned register number\n&_LABEL  IF$LU R&REG,&ARG1,,&TYPE1     * Load argument in Register\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R&REG'                 * First argument now in Reg.\n         AGO   .GEN5_CLR               * And compare values in regs\n.*\n.* Compare an unaligned unsigned field with a code value\n.GEN5XV  ANOP  ,\n         AIF   (&LEN1 EQ 1).GEN5_CLI   * Use CLI to compare\n         AGO   .GEN5_CLC               * Too long for CLI: use CLC\n.*\n.* Compare an unaligned unsigned field with an unaligned unsigned field\n.GEN5XX  ANOP  ,\n         AIF   (&LEN1 EQ &LEN2).GEN5_CLC * Equal lengths:compare direct\n         AIF   (&LEN1 GT 4).ERR14C     * Check lengths for\n         AIF   (&LEN2 GT 4).ERR14B     *  validity\n&_LABEL  IF$LU R0,&ARG1,,&TYPE1        * Insert operand 1 in R0\n&_LABEL  SETC  ''                      * Do not generate label again\n&ARG1    SETC  'R0'                    * Operand 1 now in R0\n         IF$LU R1,&ARG2,&LITLEN,&TYPE2 * Insert operand 2 in R1\n&ARG2    SETC  'R1'                    * Operand 2 now in R1\n         AGO   .GEN5_CLR               * And go compare registers\n.*\n.* Compare a register with an aligned signed fullword\n.GEN5_C  ANOP  ,\n&_LABEL  C     &ARG1,&ARG2             * Compare 1st operand with 2nd\n         AGO   .TERM\n.*\n.* Compare an aligned signed fullword with a register (inversion)\n.GEN5_C_ ANOP  ,\n&_LABEL  C     &ARG2,&ARG1             * Compare 2nd operand with 1st\n&OPCD    SETC  '&OPCDINV'              * Use inverted opcode\n         AGO   .TERM\n.*\n.* Compare a register with an aligned signed halfword\n.GEN5_CH ANOP  ,\n&_LABEL  CH    &ARG1,&ARG2             * Compare 1st operand with 2nd\n         AGO   .TERM\n.*\n.* Compare an aligned signed halfword with a register (inversion)\n.GEN5_CH_ ANOP ,\n&_LABEL  CH    &ARG2,&ARG1             * Compare 2nd operand with 1st\n&OPCD    SETC  '&OPCDINV'              * Use inverted opcode\n         AGO   .TERM\n.*\n.* Compare a register with an aligned unsigned fullword\n.GEN5_CL ANOP  ,\n&_LABEL  CL    &ARG1,&ARG2             * Compare 1st operand with 2nd\n         AGO   .TERM\n.*\n.* Compare an aligned unsigned fullword with a register (inversion)\n.GEN5_CL_ ANOP ,\n&_LABEL  CL    &ARG2,&ARG1             * Compare 2nd operand with 1st\n&OPCD    SETC  '&OPCDINV'              * Use inverted opcode\n         AGO   .TERM\n.*\n.* Compare two unsigned or char fields with same length\n.* If operand length exceeds 256 we must use CLCL in stead of CLC.\n.* To compare a 1-byte first operand with a literal, use CLI.\n.GEN5_CLC ANOP ,\n         AIF   (&LEN1 GT 256).GEN5_CLCL * Too long for CLC? Use CLCL!\n         AIF   (&LEN1 EQ 1 AND &LITERAL).GEN5_CLC_CLI * Use CLI!\n&_LABEL  CLC   &ARG1,&ARG2             * Compare 1st operand with 2nd\n         AGO   .TERM\n.GEN5_CLC_CLI ANOP ,                   * 1-byte literal: use CLI\n&ARG2    SETC  '&ARG2'(2,*)            * Remove =sign\n         AGO   .GEN5_CLI\n.*\n.* Compare two unsigned or char fields with different or long length\n.GEN5_CLCL ANOP ,\n&_LABEL  LA    R14,&ARG2               * Point to compare value\n         AIF   (&LEN2 LT 4096).GEN5_CLCL_LA15\n         AIF   (&LEN2 LT 32768).GEN5_CLCL_LH15\n         L     R15,=A(&LEN2)           * Load comparand length\n         AGO   .GEN5_CLCL_15\n.GEN5_CLCL_LH15 ANOP ,\n         LH    R15,=Y(&LEN2)           * Load comparand length\n         AGO   .GEN5_CLCL_15\n.GEN5_CLCL_LA15 ANOP ,\n         LA    R15,&LEN2               * Load comparand length\n.GEN5_CLCL_15 ANOP ,                   * Register 15 loaded with len2\n.* For char fields of unequal length: insert pad=X'40'\n         AIF   ('&TYPE1' NE 'C').NOPAD\n         AIF   (&LEN1 EQ &LEN2).NOPAD\n         LA    R1,X'40'                * Load padding character\n         SLL   R1,24                   *  into left-most byte\n         OR    R15,R1                  *  of comparand length register\n.NOPAD   ANOP  ,\n.*\n         LA    R0,&ARG1                * Point to first argument\n         AIF   (&LEN1 LT 4096).GEN5_CLCL_LA1\n         AIF   (&LEN1 LT 32768).GEN5_CLCL_LH1\n         L     R1,=A(&LEN1)            * Load comparand length\n         AGO   .GEN5_CLCL_1\n.GEN5_CLCL_LH1 ANOP ,\n         LH    R1,=Y(&LEN1)            * Load comparand length\n         AGO   .GEN5_CLCL_1\n.GEN5_CLCL_LA1 ANOP ,\n         LA    R1,&LEN1                * Load comparand length\n.GEN5_CLCL_1 ANOP ,                    * Register 1 loaded with len1\n         CLCL  R0,R14                  * Compare 1st operand with 2nd\n         AGO   .TERM\n.*\n.* Compare an unsigned byte with a 1-byte literal value\n.GEN5_CLI ANOP ,\n&_LABEL  CLI   &ARG1,&ARG2             * Compare 1st operand with 2nd\n         AGO   .TERM\n.*\n.* Compare a register with an unsigned 4-byte field\n.GEN5_CLM4 ANOP ,\n&_LABEL  CLM   &ARG1,YYYY,&ARG2        * Compare 1st operand with 2nd\n         AGO   .TERM\n.*\n.* Compare two unsigned values in registers\n.GEN5_CLR ANOP ,\n&_LABEL  CLR   &ARG1,&ARG2             * Compare 1st operand with 2nd\n         AGO   .TERM\n.*\n.* Compare two signed values in registers\n.GEN5_CR ANOP  ,\n&_LABEL  CR    &ARG1,&ARG2             * Compare 1st operand with 2nd\n         AGO   .TERM\n.*\n.* Compare a register with zero\n.GEN5_LTR ANOP ,\n&_LABEL  LTR   &ARG1,&ARG1             * Compare 1st operand with 0\n         AIF   ('&OPCD'(K'&OPCD,1) EQ 'E').GEN5_LTR_Z\n         AIF   ('&OPCD'(K'&OPCD,1) EQ 'H').GEN5_LTR_P\n         AIF   ('&OPCD'(K'&OPCD,1) EQ 'L').GEN5_LTR_M\n         MNOTE 'Internal error 10: invalid opcode'\n         MEXIT\n.GEN5_LTR_Z ANOP ,\n&OPCD    SETC  '&OPCD'(1,K'&OPCD-1).'Z'\n         AGO   .TERM\n.GEN5_LTR_P ANOP ,\n&OPCD    SETC  '&OPCD'(1,K'&OPCD-1).'P'\n         AGO   .TERM\n.GEN5_LTR_M ANOP ,\n&OPCD    SETC  '&OPCD'(1,K'&OPCD-1).'M'\n         AGO   .TERM\n.**********************************************************************\n.*\n.* Test condition code, after specified operation\n.*\n.**********************************************************************\n.GEN6    ANOP  ,\n&OPCD    SETC  '&SYSLIST(1,2)'         * Extract opcode for operation\n&ARG1    SETC  '&SYSLIST(1,3)'         * Extract first operand\n&ARG2    SETC  '&SYSLIST(1,4)'         * Extract second operand\n&LABEL   &OPCD &ARG1,&ARG2             * Condition met?\n.*\n&MNEM    SETC  '&SYSLIST(1,1)'         * Extract condition\n         AIF   (K'&MNEM EQ 1).GEN6_1   * 1 or 2 characters menmonic?\n&TST     SETC  '&MNEM'(2,1)            * Set test-type = E/H/L/M/O/P/Z\n&OPCD    SETC  'B&TST'                 * Create Bx-instruction\n         AGO   .TERM                   *\n.GEN6_1  ANOP  ,                       *\n&TST     SETC  '&MNEM'                 * Set test-type = E/H/L/M/O/P/Z\n&OPCD    SETC  'BN'.'&TST'             * Create BNx-instruction\n         AGO   .TERM                   * No: skip then-logic\n.**********************************************************************\n.*\n.* Test code-value\n.*\n.**********************************************************************\n.GEN7    ANOP  ,\n.*\n.* Set OPCD to BNE: if code is not equal, skip then-logic\n&OPCD    SETC  'BNE'                   * Skip then-logic if not equal\n.*\n         AIF   (L'&LOC NE 1).GEN7_CLC\n&LABEL   CLI   &PRFLBL.&LOC,&CODEVAL   * Correct code?\n         AGO   .TERM\n.*\n.GEN7_CLC ANOP ,\n&MASKVAL SETA  L'&CODEVAL              * Retrieve value of code to test\n&LABEL   CLC   &PRFLBL.&LOC,=HL(L'&LOC)'&MASKVAL'\n         AGO   .TERM\n.**********************************************************************\n.*\n.* Negative test on code-value\n.*\n.**********************************************************************\n.GEN8    ANOP  ,\n.*\n.* Set OPCD to BE: if code is equal, skip then-logic\n&OPCD    SETC  'BE'                    * Skip then-logic if equal\n.*\n         AIF   (L'&LOC NE 1).GEN8_CLC\n&LABEL   CLI   &PRFLBL.&LOC,&CODEVAL   * Correct code?\n         AGO   .TERM\n.*\n.GEN8_CLC ANOP ,\n&MASKVAL SETA  L'&CODEVAL              * Retrieve value of code to test\n&LABEL   CLC   &PRFLBL.&LOC,=HL(L'&LOC)'&MASKVAL'\n         AGO   .TERM\n.**********************************************************************\n.*\n.* Terminate IF by branching over the THEN block if condition not met\n.*\n.**********************************************************************\n.TERM    ANOP  ,\n         AIF   (&_TARGET).TERM_T       * TARGET with COND=TRUE?\n         AIF   ('&LBL'(1,1) EQ '(').TERM_R\n         &OPCD &LBL                    * If false: skip then-block\n         MEXIT ,                       *\n.TERM_R  ANOP  ,                       *\n&OPCD    SETC  '&OPCD'.'R'             * Create branch-to-register\n&LBL     SETC  '&LBL'(2,K'&LBL-2)      * Extract register name\n         &OPCD &LBL                    * If false: skip then-block\n         MEXIT ,                       *\n.*\n.* Terminate IF by branching to the specifed target if condition is met\n.TERM_T  ANOP  ,\n         AIF   (K'&OPCD EQ 2).TERM_T2\n         AIF   (K'&OPCD EQ 3).TERM_T3\n         MNOTE 'Internal error 11: invalid opcode'\n         MEXIT\n.*\n.TERM_T2 ANOP  ,                       *\n&OPCD    SETC  'BN'.'&OPCD'(2,1)       * Change Bx --> BNx\n         AIF   ('&TARGET'(1,1) EQ '(').TERM_TR\n         &OPCD &TARGET                 * If true: branch to target\n         MEXIT ,                       *\n.*\n.TERM_T3 ANOP  ,                       *\n&OPCD    SETC  'B'.'&OPCD'(3,1)        * Change BNx --> Bx\n         AIF   ('&TARGET'(1,1) EQ '(').TERM_TR\n         &OPCD &TARGET                 * If true: branch to target\n         MEXIT ,                       *\n.*\n.TERM_TR ANOP  ,                       *\n&OPCD    SETC  '&OPCD'.'R'             * Create branch-to-register\n         &OPCD &_TREG                  * If true: branch to target\n         MEXIT ,                       *\n.**********************************************************************\n.MEND    MEND\n./ ADD NAME=IF$ALC   0100-20096-20096-0111-00094-00094-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Allocate an available general purpose register\n.* This is a sub-macro for use by the IF$-macro only\n.*\n&LABEL   IF$ALC &REG                   * Register to protect\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC IF$ALC                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_USED_REGS(16)      * Use status of registers\n         GBLA  &BXA_NUMVAL             * Register allocated\n         LCLA  &I\n         LCLA  &ALC_REG                * Allocated register nr\n         LCLB  &DODROP                 * DROP required yes/no\n.*\n.* Set the &REG in use, unless it is in USE already\n         GBLA  &(BXA_REGN_&REG)        * Declare var with register nr\n&I       SETA  &(BXA_REGN_&REG)+1      * Determine register index\n         AIF   (&BXA_USED_REGS(&I)).USEOK\n         USE   &REG                    * Tell asm not to use this reg\n&DODROP  SETB  1                       * Must drop register before end\n.USEOK   ANOP ,                        *\n.*\n.* Register is now in us, so it is safe to allocate, using EQUREG\n         EQUREG SEARCH=(R0,R1,R14,R15), * Allocate a work register     *\n               R0=YES                  * R0 would do fine\n&I       SETA  &BXA_RC                 * Remember return code and\n&ALCREG  SETA  &BXA_NUMVAL             *  allocated register for later\n         AIF   (NOT &DODROP).DROPOK    * Skip drop if USE was skipped\n         DROP  &REG                    * No longer needed!\n.DROPOK  ANOP  ,                       * Housekeeping done\n.*\n&BXA_RC  SETA  &I                      * Set returncode for IF\n&BXA_NUMVAL SETA &ALCREG               * And pass allocated reg.nr.\n.*\n.MEND    MEND\n./ ADD NAME=IF$LS    0100-20096-20096-0111-00184-00184-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Load a signed field or literal into a register\n.* This is a sub-macro for use by the $IF-macro only\n.*\n&LABEL   IF$LS &REG,                   * Register to load              *\n               &FLD,                   * Field or literal with value   *\n               &LITLEN,                * Length of literal or 0 for fld*\n               &TYPE                   * Type of field\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC IF$LS                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLA  &LEN\n         LCLA  &I\n         LCLC  &NUM\n         LCLC  &_FLD\n.*\n.* Determine length of field to be loaded\n         AIF   ('&TYPE' EQ '0').DECLIT\n         AIF   (K'&LITLEN EQ 0).FLDLEN\n         AIF   (&LITLEN EQ 0).FLDLEN\n&LEN     SETA  &LITLEN                 * Length is that of literal\n         AGO   .LENOK\n.FLDLEN  ANOP  ,\n&LEN     SETA  L'&FLD                  * Length is that of field\n.LENOK   ANOP\n.*\n.* Action depends on length of field to be loaded\n         AIF   (&LEN EQ 1).LEN1\n         AIF   (&LEN EQ 2).LEN2\n         AIF   (&LEN EQ 3).LEN3\n         AIF   (&LEN EQ 4).LEN4\n&_FLD    SETC  (DOUBLE '&FLD')\n         MNOTE 8,'&_FLD is too long to load into a register'\n         MEXIT\n.*\n.* Load a 1-byte value into a register\n.LEN1    ANOP  ,\n&LABEL   ICM   &REG,YNNN,&FLD          * Load signed byte\n         SRA   &REG,24                 * Remove garbage & sign extend\n         MEXIT\n.*\n.* Load a 2-byte value into a register\n.LEN2    ANOP  ,\n&I       SETA  ('AFHVY' FIND '&TYPE')  * Some aligned type?\n         AIF   (&I NE 0).LEN2_LH       * Yes: use LH\n         AIF   ('&FLD'(1,1) EQ '=').LEN2_LH * 2-byte literal: aligned!\n&LABEL   ICM   &REG,YYNN,&FLD          * Load signed bytes\n         SRA   &REG,16                 * Remove garbage & sign extend\n         MEXIT\n.LEN2_LH ANOP  ,\n&LABEL   LH    &REG,&FLD               * Load signed halfword\n         MEXIT\n.*\n.* Load a 3-byte value into a register\n.LEN3    ANOP  ,\n&LABEL   ICM   &REG,YYYN,&FLD          * Load signed bytes\n         SRA   &REG,8                  * Remove garbage & sign extend\n         MEXIT\n.*\n.* Load a 4-byte value into a register\n.LEN4    ANOP  ,\n&I       SETA  ('AFV' FIND '&TYPE')    * Some aligned type?\n         AIF   (&I NE 0).LEN4_L        * Yes: use L\n         AIF   ('&FLD'(1,1) EQ '=').LEN4_L * 4-byte literal: aligned!\n&LABEL   ICM   &REG,YYYY,&FLD          * Load signed bytes\n         MEXIT\n.LEN4_L  ANOP  ,\n&LABEL   L     &REG,&FLD               * Load signed word\n         MEXIT\n.*\n.* Handle a decimal literal - may be negative\n.DECLIT  ANOP  ,\n         AIF   ('&FLD'(1,1) EQ '-').DECLITN\n&I       SETA  ('&FLD'(1,1) FIND '0123456789')\n         AIF   (&I NE 0).DECLITP       * Decimal value\n         AIF   ('&FLD'(K'&FLD,1) EQ '''').DECLITP * Hex or Bin value\n.* Specified literal must be an equated symbol of type 0\n         AIF   (T'&FLD EQ '0').NOERR1\n&_FLD    SETC  (DOUBLE '&FLD')         * Make displayable\n.ERR1    MNOTE 8,'&_FLD has type T'&FLD, expected type of 0'\n         MEXIT\n.NOERR1  ANOP  ,\n.*\n.* Retrieve value and decide how to load it\n&I       SETA  L'&FLD                  * Type 0: length = copy of value\n         AIF   (&I EQ 0).USE_CLEAR\n         AIF   (&I GT 32767).USE_L\n         AIF   (&I GT 4095).USE_LH\n         AIF   (&I GT 0).USE_LA\n         AIF   (&I LT -32767).USE_L\n         AGO   .USE_LH\n.*\n.* Handle positive literal\n.DECLITP ANOP  ,                       * Positive literal number\n&I       SETA  &FLD                    * Load decimal value\n         AIF   (&I EQ 0).USE_CLEAR\n         AIF   (&I LT 4096).USE_LA\n         AIF   (&I LT 32768).USE_LH\n         AGO   .USE_L\n.*\n.* Handle negative literal\n.DECLITN ANOP  ,                       * Negative literal number\n&NUM     SETC  '&FLD'(2,*)             * Extract numerical part\n&I       SETA  &NUM\n         AIF   (&I EQ 0).USE_CLEAR\n         AIF   (&I LT 32768).USE_LH\n         AGO   .USE_L\n.*\n.USE_CLEAR ANOP ,\n&LABEL   CLEAR &REG                    * Wipe register\n         MEXIT\n.*\n.USE_LA  ANOP  ,\n&LABEL   LA    &REG,&FLD               * Load literal number\n         MEXIT\n.*\n.USE_LH  ANOP  ,\n&LABEL   LH    &REG,=H'&FLD'           * Load literal number\n         MEXIT\n.*\n.USE_L   ANOP  ,\n&LABEL   L     &REG,=F'&FLD'           * Load literal number\n         MEXIT\n.*\n.MEND    MEND\n./ ADD NAME=IF$LU    0100-20096-20096-0111-00122-00122-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Load an unsigned field or literal into a register\n.* This is a sub-macro for use by the $IF-macro only\n.*\n&LABEL   IF$LU &REG,                   * Register to load              *\n               &FLD,                   * Field or literal with value   *\n               &LITLEN,                * Length of literal or 0 for fld*\n               &TYPE\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC IF$LU                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLA  &LEN\n         LCLA  &I\n         LCLC  &_FLD\n.*\n.* Determine length of field to be loaded\n         AIF   (K'&LITLEN EQ 0).FLDLEN\n         AIF   (&LITLEN EQ 0).FLDLEN\n&LEN     SETA  &LITLEN                 * Length is that of literal\n         AGO   .LENOK\n.FLDLEN  ANOP  ,\n&LEN     SETA  L'&FLD                  * Length is that of field\n.LENOK   ANOP\n.*\n.* Action depends on length of field to be loaded\n         AIF   (&LEN EQ 1).LEN1\n         AIF   (&LEN EQ 2).LEN2\n         AIF   (&LEN EQ 3).LEN3\n         AIF   (&LEN EQ 4).LEN4\n&_FLD    SETC  (DOUBLE '&FLD')\n         MNOTE 8,'&_FLD is too long to load into a register'\n         MEXIT\n.*\n.* Load a 1-byte value into a register\n.LEN1    ANOP  ,\n&LABEL   CLEAR &REG\n         IC    &REG,&FLD               * Load unsigned byte\n         MEXIT\n.*\n.* Load a 2-byte value into a register\n.LEN2    ANOP  ,\n&LABEL   CLEAR &REG\n         ICM   &REG,NNYY,&FLD          * Load unsigned bytes\n         MEXIT\n.*\n.* Load a 3-byte value into a register\n.LEN3    ANOP  ,\n&LABEL   CLEAR &REG\n         ICM   &REG,NYYY,&FLD          * Load unsigned bytes\n         MEXIT\n.*\n.* Load a 4-byte value into a register\n.LEN4    ANOP  ,\n&I       SETA  ('AFV' FIND '&TYPE')    * Some aligned type?\n         AIF   (&I NE 0).LEN4_L        * Yes: use L\n         AIF   ('&FLD'(1,1) EQ '=').LEN4_L * 4-byte literal: aligned!\n&LABEL   ICM   &REG,YYYY,&FLD          * Load unsigned bytes\n         MEXIT\n.LEN4_L  ANOP  ,\n&LABEL   L     &REG,&FLD               * Load unsigned bytes\n         MEXIT\n.*\n.MEND    MEND\n./ ADD NAME=INC      0100-20096-20096-0111-00137-00137-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Increment a register\n.*\n&LABEL   INC   &REG,                   * Register to be incremented    *\n               &COUNT                  * Amount to increment\n.*\n.* &REG   specifies the register to be incremented\n.* &COUNT specifies the amount by which the register is to be\n.*        incremented. May be specified as:\n.*      - Literal or symbolic value: must evaluate to a value between 0\n.*        and 4095 inclusive.\n.*      - (reg): must specify a valid register, 0 not allowed\n.*      - (value,reg): both of the above apply\n.*      - nothing: defaults to 1\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC INC                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare locals\n         LCLC  &_REG,&_COUNT,&_COUNTR\n.*\n.* Check Reg parameter\n&_REG    SETC  '&REG'\n         AIF   (K'&REG NE 0).NOERR1A\n.ERR1A   MNOTE 8,'No register specified'\n.NOERR1A ANOP\n         AIF   ('&REG'(1,1) NE '(').NOERR1\n         AIF   (N'&REG EQ 0).ERR1B\n         AIF   (N'&REG GT 1).ERR1C\n&_REG    SETC  '&REG(1)'\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'No register specified within sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'More than 1 register specified within sublist'\n.NOERR1  ANOP\n.*\n.* Check Count parameter\n         AIF   (K'&COUNT EQ 0).NOERR2\n         AIF   ('&COUNT'(1,1) NE '(').NOERR2\n         AIF   (N'&COUNT EQ 0).ERR2A\n         AIF   (N'&COUNT GT 2).ERR2B\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'No amount to increment specified in sublist'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Too many arguments specified in sublist'\n.NOERR2  ANOP\n.*\n.* Split &COUNT into &_COUNT and &_COUNTR\n         AIF   (K'&COUNT EQ 0).COUNT1\n         AIF   ('&COUNT'(1,1) NE '(').COUNTLIT\n         AIF   (N'&COUNT EQ 1).COUNTR\n&_COUNTR SETC  '&COUNT(2)'\n&_COUNT  SETC  '&COUNT(1)'\n         AGO   .COUNT_OK\n.COUNTR  ANOP\n&_COUNTR SETC  '&COUNT(1)'\n&_COUNT  SETC  '0'\n         AGO   .COUNT_OK\n.COUNTLIT ANOP\n&_COUNT  SETC  '&COUNT'\n         AGO   .COUNT_OK\n.COUNT1  ANOP\n&_COUNT  SETC  '1'\n.COUNT_OK ANOP\n.*\n.* Generate a LA instruction to increment the register\n&LABEL   LA    &_REG,&_COUNT.(&_COUNTR,&_REG) * Increment register\n.*\n.* If the increment register is register 0, add an AR instruction\n         AIF   ('&_COUNTR' EQ 'R0').R0\n         AIF   ('&_COUNTR' EQ 'R00').R0\n         AIF   ('&_COUNTR' EQ '0').R0\n         AIF   ('&_COUNTR' EQ '00').R0\n         AGO   .MEND\n.*\n.R0      ANOP  ,\n         AR    &_REG,&_COUNTR          * And add increment from GPR0\n.*\n.MEND    MEND\n./ ADD NAME=IPK      0100-20096-20096-0111-00084-00084-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the IPK instruction\n.*\n&LABEL   IPK   ,                       * Parameters in SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC IPK                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_PRM(3)             * Parameters\n         GBLB  &BXA_USED_REGS(16)      * USE status of registers 0-15\n         LCLC  &TXT                    * Text variable for errors\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST NE 0).NOERR5\n.ERR5A   MNOTE 4,'Expected no arguments: ignored'\n.NOERR5  ANOP  ,\n.*\n.* Check that register 2 is not currently in use\n         AIF   (NOT &BXA_USED_REGS(3)).NOERR6B * R2 available?\n.ERR6B   MNOTE 4,'Register 2 will be modified but is not available'\n.NOERR6B ANOP  ,                       *\n.*\n.* Generate code with indentation\n&LABEL   GEN   _IPK                    *\n.*\n.MEND    MEND\n./ ADD NAME=LA       0100-20096-20096-0111-00183-00183-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the LA instruction\n.* Filling a register with a zero value is replaced by XR\n.*\n&LABEL   LA    ,                       * Parameters in SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LA                     * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_NUMVAL             * Output from CHKREG\n         GBLC  &BXA_PRM(3)             * Parameters\n         LCLC  &FROM                   * Second parameter\n         LCLC  &TO                     * First parameter\n         LCLC  &_FROMD                 * Source displacement value\n         LCLC  &_FROMX                 * Source index register\n         LCLC  &_FROMB                 * Source base register\n         LCLC  &_TOR                   * Destination register\n         LCLA  &_TO                    * Destination register number\n         LCLA  &I                      * Work var.\n         LCLC  &TXT                    * Text variable for errors\n         LCLA  &REG1                   * Index register number\n         LCLA  &REG2                   * Base register number\n.*\n.* Extract TO and FROM from SYSLIST\n&TO      SETC  '&SYSLIST(1)'\n&FROM    SETC  '&SYSLIST(2)'\n.*\n.* If FROM is not specified and TO contains an embedded comma, then\n.*    decompose the TO field in its constituent parts.\n         AIF   (K'&FROM NE 0).NOSPLIT  *\n         SPLIT &TO                     *\n&TO      SETC  ''                      * Wipe field\n         AIF   (&BXA_NUMVAL LT 1).NOSPLIT\n&TO      SETC  '&BXA_PRM(1)'           * TO field is first parameter\n         AIF   (&BXA_NUMVAL LT 2).NOSPLIT\n&FROM    SETC  '&BXA_PRM(2)'           * FROM field is second parameter\n.NOSPLIT ANOP  ,\n.*\n.* Decompose FROM field\n         DISSECT DXB,&FROM             *\n&_FROMD  SETC  '&BXA_PRM(1)'           * Displacement\n&_FROMX  SETC  '&BXA_PRM(2)'           * index register\n&_FROMB  SETC  '&BXA_PRM(3)'           * Base register\n.*\n.* Decompose TO field\n         DISSECT R,&TO                 *\n&_TOR    SETC  '&BXA_PRM(1)'           * Register\n.*\n.* Check the Destination register\n         AIF   (K'&_TOR EQ 0).ERR1A    * Must not be empty\n         CHKREG &_TOR,g                * A register was specified?\n         AIF   (&BXA_RC EQ 8).ERR1B    * Not a register\n&_TO     SETA  &BXA_NUMVAL             * Save register number\n         AIF   (&BXA_RC EQ 0).NOERR1   * This is a defined register\n.* BXA_RC = 4: a  literal number was specified\n         AIF   (&SYSNEST EQ 1).ERR1C   * LA occurred in open code?\n         AGO   .NOERR1                 *\n.ERR1A   MNOTE 8,'Missing destination register'\n         AGO   .NOERR1                 *\n.ERR1B   ANOP  ,                       *\n&TXT     SETC  (DOUBLE '&_TOR')        *\n         MNOTE 4,'&TXT is not a valid general purpose register'\n         AGO   .NOERR1                 *\n.ERR1C   MNOTE 4,'You should use a register in stead of &_TOR'\n.NOERR1  ANOP  ,                       *\n.*\n.* Check the FROM parameter\n         AIF   (K'&_FROMD GT 0).NOERR2 * Displacement specified?\n.ERR2A   ANOP  ,                       *\n         MNOTE 4,'Second parameter missing or invalid'\n         AGO   .NOERR2                 *\n.NOERR2  ANOP  ,                       *\n.*\n.* Check the Source base register\n         AIF   (K'&_FROMB EQ 0).NOERR3 * Omitted?\n         CHKREG &_FROMB,g              * A register was specified?\n         AIF   (&BXA_RC EQ 8).ERR3A    * Not a register\n&REG2    SETA  &BXA_NUMVAL             * Save nr of specified register\n         AIF   (&BXA_RC EQ 0).NOERR3   * This is a real register\n.* BXA_RC = 4: a  literal number was specified\n         AIF   (&SYSNEST EQ 1).ERR3B   * LA occurred in open code?\n         AGO   .NOERR3                 *\n.ERR3A   ANOP  ,                       *\n&TXT     SETC  (DOUBLE '&_FROMB')      *\n         MNOTE 4,'&TXT is not a valid general purpose register'\n         AGO   .NOERR3                 *\n.ERR3B   MNOTE 4,'You should use a register in stead of &_FROMB'\n.NOERR3  ANOP  ,                       *\n.*\n.* Check the Source index register\n         AIF   (K'&_FROMX EQ 0).NOERR4 * Omitted?\n         CHKREG &_FROMX,g              * A register was specified?\n         AIF   (&BXA_RC EQ 8).ERR4A    * Not a register\n&REG1    SETA  &BXA_NUMVAL             * Save nr of specified register\n         AIF   (&BXA_RC EQ 0).NOERR4   * This is a real register\n.* BXA_RC = 4: a  literal number was specified\n         AIF   (&SYSNEST EQ 1).ERR4B   * LA occurred in open code?\n         AGO   .NOERR4\n.ERR4A   ANOP  ,\n&TXT     SETC  (DOUBLE '&_FROMX')\n         MNOTE 4,'&TXT is not a valid general purpose register'\n         AGO   .NOERR4\n.ERR4B   MNOTE 4,'You should use a register in stead of &_FROMX'\n.NOERR4  ANOP  ,\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST LE 2).NOERR5\n.ERR5A   MNOTE 4,'Expected two arguments: remainder ignored'\n.NOERR5  ANOP  ,\n.*\n.* Check for a value of absolute zero\n         AIF   (&REG1 NE 0).NOERR6     * Index register not zero\n         AIF   (&REG2 NE 0).NOERR6     * Base register not zero\n         CHKLIT &_FROMD                * Valid literal number?\n         AIF   (&BXA_RC EQ 8).NOERR6   * No: assume it's not zero\n         AIF   (&BXA_NUMVAL NE 0).NOERR6 * Literal GT 0\n.ERR6A   MNOTE 0,'Loading register &_TOR with a value of zero'\n         XR    &_TOR,&_TOR             * Wipe register\n         MEXIT ,                       *\n.NOERR6  ANOP  ,                       *\n.*\n.* Generate code with indentation\n&LABEL   GEN   _LA,&_TOR,&FROM         *\n.*\n.MEND    MEND\n./ ADD NAME=LABEL    0100-20096-20096-0111-00082-00082-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates a label on a specified boundary\n.*\n&LABEL   LABEL &ALIGN                  * Alignment code\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LABEL                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Check the alignment parameter\n         AIF   (K'&ALIGN EQ 0).NOALIGN\n         AIF   ('&ALIGN' EQ 'H').ALIGN\n         AIF   ('&ALIGN' EQ 'F').ALIGN\n         AIF   ('&ALIGN' EQ 'D').ALIGN\n.ERR1    MNOTE 8,'ALIGN parameter does not specify H, F, or D'\n         AGO   .NOALIGN\n.*\n.ALIGN   ANOP\n         DS    0&ALIGN\n.NOALIGN ANOP\n.*\n         AIF   (K'&LABEL EQ 0).NOLABEL\n&LABEL   EQU   *\n.NOLABEL ANOP\n.*\n.MEND    MEND\n./ ADD NAME=LC       0100-20096-20096-0111-00098-00098-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Load a Character into a register\n.*\n&LABEL   LC    &REG,                   * Register to load              *\n               &LOC                    * Location of character\n.*\n.* &REG  specifies the register to load\n.* &LOC  specifies the location that holds the character to be loaded\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LC                     * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Check the REG parameter\n         AIF   (K'&REG NE 0).NOERR1A\n.ERR1A   MNOTE 8,'No register specified'\n         AGO   .NOERR1\n.NOERR1A ANOP\n         AIF   ('&REG'(1,1) NE '(').NOERR1\n         AIF   (N'&REG EQ 0).ERR1B\n         AIF   (N'&REG GT 1).ERR1C\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'No register specified within sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'More than 1 register specified in sublist'\n.NOERR1  ANOP\n.*\n.* Check the LOC parameter\n         AIF   (K'&LOC NE 0).NOERR2\n.ERR2    MNOTE 8,'LOC parameter not specified'\n.NOERR2  ANOP\n.*\n.* Check the number of parameters\n         AIF   (N'&SYSLIST EQ 2).NOERR3\n.ERR3    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR3  ANOP\n.*\n&LABEL   CLEAR &REG                    * Wipe register\n         IC    &REG,&LOC               *  and instert character\n.*\n.MEND    MEND\n./ ADD NAME=LEAVE    0100-20096-20096-0111-00139-00139-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: LEAVE\n.* Combines with DO (WHILE/UNTIL) to abort an executing loop\n.*\n.* Syntax:\n.* 0) LEAVE\n.* 1) LEAVE cond\n.* 2) LEAVE UNLESS,cond\n.* where cond is a condition, as described in the IF macro\n.*\n&LABEL   LEAVE &DOLAB=                 * Label of associated DO\n.*                                     * Condition in &SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LEAVE                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_DO(5)          * DO-labels\n         GBLC  &BXA_STK_LBL(5)         * Labels\n         LCLC  &OP                     * Last DO opcode on stack\n         LCLC  &DO                     * Label of last DO on stack\n         LCLC  &LBL                    * Endlabel of last DO on stack\n         LCLA  &I                      * Stack pointer\n         LCLC  &ARGS                   * SYSLIST as a string\n.*\n.* Search down the stack to find the last active DO statement\n&I       SETA  &BXA_STK+1              * Copy stack pointer\n.LOOP1   ANOP  ,                       * Search struct.program. stack\n&I       SETA  &I-1                    * Point preceding entry\n         AIF   (&I LT 1).ERR1A         * Not found: error!\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack\n         AIF   ('&OP' EQ 'DO').LOOP1F  * Found\n         AIF   ('&OP' EQ 'DOWHILE').LOOP1F\n         AIF   ('&OP' EQ 'DOUNTIL').LOOP1F\n         AIF   ('&OP' EQ 'DOCOUNT').LOOP1F\n         AGO   .LOOP1                  * Mismatch: keep searching\n.LOOP1F  ANOP  ,                       * Found LEAVE-able entry\n&LBL     SETC  '&BXA_STK_LBL(&I)'      * Extract end-of-loop label\n&DO      SETC  '&BXA_STK_DO(&I)'       *  and start-of-loop label\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'No preceding DO statement: ignored'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* If DO-label specified: must match label of DO statement\n         AIF   (K'&DOLAB EQ 0).NOERR2\n         AIF   ('&DOLAB' EQ '&DO').NOERR2\n.ERR2A   MNOTE 8,'Specified label does not match current active DO'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* If end-of-loop label not in table: generate one\n.* &I still points to current stack entry\n         AIF   (K'&LBL GT 0).DOOK\n&LBL     SETC  '_EDO_&SYSNDX'          * Create end-of-loop label\n&BXA_STK_LBL(&I) SETC '&LBL'           * And add to table\n.DOOK    ANOP  ,\n.*\n.* Build ARGS from &SYSLIST.\n&I       SETA  0                       * I indexes SYSLIST\n.LOOP2   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AGO   .LOOP2                  * And go process next entry\n.LOOP2OK ANOP\n         AIF   (K'&ARGS EQ 0).NOARGS\n&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,\n.NOARGS  ANOP\n.*\n.* Generate the code for leaving this loop\n         AIF   (K'&ARGS EQ 0).NOCOND\n         AIF   ('&ARGS' EQ '(,)').NOCOND\n         GOTO  &LBL,&ARGS              * Conditional exit-from-loop\n         MEXIT\n.*\n.NOCOND  ANOP\n         GOTO  &LBL                    * Exit from loop\n.*\n.MEND    MEND\n./ ADD NAME=LOOP     0100-20096-20096-0111-00146-00146-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Structured programming macro: LOOP\n.* Combines with DO (WHILE/UNTIL/count) to repeat an executing loop\n.*\n.* Syntax:\n.* 0) LOOP\n.* 1) LOOP cond\n.* 2) LOOP UNLESS,cond\n.* where cond is a condition, as described in the IF macro\n.*\n&LABEL   LOOP  &DOLAB=                 * Label of associated DO\n.*                                     * Condition in &SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LOOP                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Index to last valid\n         GBLC  &BXA_STK_OP(5)          * Opcodes\n         GBLC  &BXA_STK_DO(5)          * DO-labels\n         GBLC  &BXA_STK_CLB(5)         * Condition labels\n         LCLC  &OP                     * Last DO opcode on stack\n         LCLC  &DO                     * Label of last DO on stack\n         LCLC  &CLB                    * Condition label for last DO\n         LCLA  &I                      * Stack pointer\n         LCLC  &ARGS                   * SYSLIST as a string\n.*\n.* Search down the stack to find the last active DO\n&I       SETA  &BXA_STK+1              * Copy stack pointer\n.LOOP1   ANOP  ,                       * Search struct.program. stack\n&I       SETA  &I-1                    * Point preceding entry\n         AIF   (&I LT 1).ERR1A         * Not found: error!\n&OP      SETC  '&BXA_STK_OP(&I)'       * Extract opcode from stack\n         AIF   ('&OP' EQ 'DO').LOOP1F  * Found\n         AIF   ('&OP' EQ 'DOWHILE').LOOP1F\n         AIF   ('&OP' EQ 'DOUNTIL').LOOP1F\n         AIF   ('&OP' EQ 'DOCOUNT').LOOP1F\n         AGO   .LOOP1                  * Mismatch: keep searching\n.LOOP1F  ANOP  ,                       * Found LEAVE-able entry\n&DO      SETC  '&BXA_STK_DO(&I)'       * Extract start-of-loop label\n&CLB     SETC  '&BXA_STK_CLB(&I)'      *  and condition label\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'No preceding DO statement: ignored'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* If DO-label specified: must match label of DO statement\n         AIF   (K'&DOLAB EQ 0).NOERR2\n         AIF   ('&DOLAB' EQ '&DO').NOERR2\n.ERR2A   MNOTE 8,'Specified label does not match current active DO'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* For DOUNTIL/DOCOUNT: if condition label not in table: generate one\n.* &I still points to current stack entry\n         AIF   ('&OP' EQ 'DOUNTIL').DOCLB\n         AIF   ('&OP' EQ 'DOCOUNT').DOCLB\n         AGO   .DOOK\n.DOCLB   ANOP  ,\n         AIF   (K'&CLB GT 0).CLBOK\n&CLB     SETC  '_NXT_&SYSNDX'          * Create loop condition label\n&BXA_STK_CLB(&I) SETC '&CLB'           * And add to table\n.CLBOK   ANOP  ,\n.* Copy CLB-value to &DO, which holds the DO label\n&DO      SETC  '&CLB'                  * Alter destination label\n.DOOK    ANOP  ,\n.*\n.* Build ARGS from &SYSLIST.\n&I       SETA  0                       * I indexes SYSLIST\n.LOOP2   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AGO   .LOOP2                  * And go process next entry\n.LOOP2OK ANOP\n         AIF   (K'&ARGS EQ 0).NOARGS\n&ARGS    SETC  '('.'&ARGS'(2,*).')'    * Parenthesize and remove lead ,\n.NOARGS  ANOP\n.*\n.* Generate the code for iterating this loop\n         AIF   (K'&ARGS EQ 0).NOCOND\n         AIF   ('&ARGS' EQ '(,)').NOCOND\n         GOTO  &DO,&ARGS               * Conditional repeat of loop\n         MEXIT\n.*\n.NOCOND  ANOP\n         GOTO  &DO                     * Repeat loop\n.*\n.MEND    MEND\n./ ADD NAME=LR       0100-20096-20096-0111-00154-00154-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the LR instruction\n.* Copying from a register to itself is suppressed.\n.*\n&LABEL   LR    ,                       * Arguments are in SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LR                     * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_NUMVAL             * Output from CHKREG\n         GBLC  &BXA_PRM(3)             * Parameters\n         LCLC  &FROM                   * Second parameter\n         LCLC  &TO                     * First parameter\n         LCLC  &_FROMR                 * Source displacement value\n         LCLC  &_TOR                   * Destination register\n         LCLA  &I                      * Work var.\n         LCLC  &TXT                    * Text variable for errors\n         LCLA  &REG1                   * To register number\n         LCLA  &REG2                   * From register number\n.*\n.* Extract TO and FROM from SYSLIST\n&TO      SETC  '&SYSLIST(1)'\n&FROM    SETC  '&SYSLIST(2)'\n.*\n.* If FROM is not specified and TO contains an embedded comma, then\n.*    decompose the TO field in its constituent parts.\n         AIF   (K'&FROM NE 0).NOSPLIT  *\n         SPLIT &TO                     *\n&TO      SETC  ''                      *\n         AIF   (&BXA_NUMVAL LT 1).NOSPLIT\n&TO      SETC  '&BXA_PRM(1)'           * TO field is first parameter\n         AIF   (&BXA_NUMVAL LT 2).NOSPLIT\n&FROM    SETC  '&BXA_PRM(2)'           * FROM field is second parameter\n.NOSPLIT ANOP  ,\n.*\n.* Decompose FROM field\n         DISSECT R,&FROM               *\n&_FROMR  SETC  '&BXA_PRM(1)'           * Register\n.*\n.* Decompose TO field\n         DISSECT R,&TO                 *\n&_TOR    SETC  '&BXA_PRM(1)'           * Register\n.*\n.* Check the Destination register\n         AIF   (K'&_TOR EQ 0).ERR1A    * Must not be empty\n         CHKREG &_TOR,g                * A register was specified?\n         AIF   (&BXA_RC EQ 8).ERR1B    * Not a register\n&REG1    SETA  &BXA_NUMVAL             * Save register number\n         AIF   (&BXA_RC EQ 0).NOERR1   * This is a defined register\n.* BXA_RC = 4: a  literal number was specified\n         AIF   (&SYSNEST EQ 1).ERR1C   * LA occurred in open code?\n         AGO   .NOERR1                 *\n.ERR1A   MNOTE 8,'Missing destination register'\n         AGO   .GEN                    *\n.ERR1B   ANOP  ,                       *\n&TXT     SETC  (DOUBLE '&_TOR')        *\n         MNOTE 4,'&TXT is not a valid general purpose register'\n         AGO   .NOERR1                 *\n.ERR1C   MNOTE 4,'You should use a register in stead of &_TOR'\n.NOERR1  ANOP  ,                       *\n.*\n.* Check the Source register\n         AIF   (K'&_FROMR EQ 0).ERR2A  * Must not be empty\n         CHKREG &_FROMR,g              * A register was specified?\n         AIF   (&BXA_RC EQ 8).ERR2B    * Not a register\n&REG2    SETA  &BXA_NUMVAL             * Save register number\n         AIF   (&BXA_RC EQ 0).NOERR2   * This is a defined register\n.* BXA_RC = 4: a  literal number was specified\n         AIF   (&SYSNEST EQ 1).ERR2C   * LR occurred in open code?\n         AGO   .NOERR2                 *\n.ERR2A   MNOTE 8,'Missing source register'\n         AGO   .GEN                    *\n.ERR2B   ANOP  ,                       *\n&TXT     SETC  (DOUBLE '&_FROMR')      *\n         MNOTE 4,'&TXT is not a valid general purpose register'\n         AGO   .NOERR2                 *\n.ERR2C   MNOTE 4,'You should use a register in stead of &_FROMR'\n.NOERR2  ANOP  ,                       *\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST LE 2).NOERR3\n.ERR3A   MNOTE 4,'Expected two arguments: remainder ignored'\n.NOERR3  ANOP  ,\n.*\n.* Check for equal registers\n         AIF   (&REG1 NE &REG2).NOERR4 * Not equal --> Ok!\n.ERR4A   MNOTE 4,'Not useful to copy from register &_FROMR to &_TOR: ig*\n               nored'\n         MEXIT ,\n.NOERR4  ANOP  ,\n.*\n.* Generate code with indentation\n.GEN     ANOP  ,\n&LABEL   GEN   _LR,&_TOR,&_FROMR\n.*\n.MEND    MEND\n./ ADD NAME=LT       0100-20096-20096-0111-00097-00097-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Load and Test a register\n.*\n&LABEL   LT    &REG,                   * Register to load              *\n               &LOC                    * Location of value\n.*\n.* &REG  specifies the register to load\n.* &LOC  specifies the location that holds the value to be loaded\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LT                     * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Check the REG parameter\n         AIF   (K'&REG NE 0).NOERR1A\n.ERR1A   MNOTE 8,'No register specified'\n         AGO   .NOERR1\n.NOERR1A ANOP\n         AIF   ('&REG'(1,1) NE '(').NOERR1\n         AIF   (N'&REG EQ 0).ERR1B\n         AIF   (N'&REG GT 1).ERR1C\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'No register specified within sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'More than 1 register specified in sublist'\n.NOERR1  ANOP\n.*\n.* Check the LOC parameter\n         AIF   (K'&LOC NE 0).NOERR2\n.ERR2    MNOTE 8,'LOC parameter not specified'\n.NOERR2  ANOP\n.*\n.* Check the number of parameters\n         AIF   (N'&SYSLIST EQ 2).NOERR3\n.ERR3    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR3  ANOP\n.*\n&LABEL   ICM   &REG,ALLBYTES,&LOC      * Load value and test it\n.*\n.MEND    MEND\n./ ADD NAME=LTA24    0100-20096-20096-0111-00171-00171-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Load and Test 24-bit address into a register\n.*\n&LABEL   LTA24 &REG,                   * Register to load              *\n               &LOC,                   * Location of address           *\n               &MASK,                  * Mask for ICM (default=NYYY)   *\n               &RELOAD=                * YES, NO, QUICK\n.*\n.* &REG  specifies the register to load\n.* &LOC  specifies the location of the address to be loaded\n.* &MASK specifies which bytes of the register are to be loaded\n.* &RELOAD if YES, specifies that the register to be loaded is also\n.*       used as a base register to address the field.\n.*       if NO, specifies that the register to be loaded will not be\n.*       used as a base register to address the field.\n.*       if QUICK, specifies that the register to be loaded is also\n.*       used as a 24-bit base register to address the field.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LTA24                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &_REG                   * Register specified\n         LCLA  &_REGNO                 * Register number\n         LCLA  &_REGX                  * Register index\n         LCLC  &_MASK                  * Specified or defaulted mask\n         LCLC  &_RELOAD                * Reload option\n         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15\n         GBLA  &BXA_NUMVAL             * Output from CHKREG\n         LCLC  &TMP                    * Temp register\n.*\n.* Check the RELOAD parameter\n         AIF   (K'&RELOAD EQ 0).NOERR4\n&_RELOAD SETC  '&RELOAD'\n         AIF   ('&RELOAD' EQ 'YES').NOERR4\n         AIF   ('&RELOAD' EQ 'QUICK').NOERR4\n         AIF   ('&RELOAD' EQ 'NO').NOERR4\n.ERR4    MNOTE 4,'Invalid RELOAD parameter: ignored'\n&_RELOAD SETC  ''                      * Default to no RELOAD parm\n.NOERR4  ANOP  ,\n.*\n.* Check the REG parameter\n&_REG    SETC  '&REG'\n         AIF   (K'&REG NE 0).NOERR1A\n.ERR1A   MNOTE 8,'No register specified'\n         AGO   .NOERR1\n.NOERR1A ANOP\n         AIF   ('&REG'(1,1) NE '(').NOERR1C\n&_REG    SETC  '&REG(1)'\n         AIF   (N'&REG EQ 0).ERR1B\n         AIF   (N'&REG GT 1).ERR1C\n         AGO   .NOERR1C\n.ERR1B   MNOTE 8,'No register specified within sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'More than 1 register specified in sublist'\n         AGO   .NOERR1\n.NOERR1C ANOP\n         CHKREG &_REG\n         AIF   (&BXA_RC GT 4).ERR1D\n&_REGX   SETA  &BXA_NUMVAL+1           * Create index value\n         AGO   .NOERR1D\n.ERR1D   ANOP  ,\n&_REG    SETC  (DOUBLE '&_REG')\n         MNOTE 8,'&_REG is not a valid register'\n         AGO   .NOERR1\n.NOERR1D ANOP\n         AIF   (NOT &BXA_USED_REGS(&_REGX)).NOERR1\n.ERR1E   ANOP  ,\n         AIF   (K'&_RELOAD NE 0).NOERR1\n&_REG    SETC  (DOUBLE '&_REG')\n         MNOTE 0,'&_REG is currently in use, code generated may err'\n.NOERR1  ANOP\n.*\n.* Check the LOC parameter\n         AIF   (K'&LOC NE 0).NOERR2\n.ERR2    MNOTE 8,'LOC parameter not specified'\n.NOERR2  ANOP\n.*\n.* Check the MASK parameter\n&_MASK   SETC  '&MASK'\n         AIF   (K'&MASK NE 0).MASKOK\n&_MASK   SETC  'NYYY'\n.MASKOK  ANOP\n.*\n.* Check the number of parameters\n         AIF   (N'&SYSLIST LE 3).NOERR3\n.ERR3    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR3  ANOP\n.*\n.* Generate code\n         AIF   ('&_RELOAD' EQ 'YES').RELOAD\n         AIF   ('&_RELOAD' EQ 'QUICK').RELALT\n&LABEL   CLEAR &_REG                   * Wipe register\n         ICM   &_REG,&_MASK,&LOC       * Load and test 24-bit address\n         MEXIT\n.*\n.RELOAD  ANOP  ,                       * Reload register\n         EQUREG TEMP=YES,R0=YES        * Assign any register\n         AIF   (&BXA_RC GT 0).RELALT   * Use alternate code\n&TMP     SETC  'R'.'&BXA_NUMVAL'       * Create register name\n&LABEL   CLEAR &TMP                    * Wipe register\n         ICM   &TMP,&_MASK,&LOC        * Load 24-bit address\n         LTR   &_REG,&TMP              * Load and test 24-bit value\n         MEXIT\n.*\n.RELALT  ANOP  ,                       * Reload register (Alternate)\n&LABEL   ICM   &_REG,&_MASK,&LOC       * Load and test 24-bit address\n         AIF   ('&_RELOAD' EQ 'QUICK').MEND\n         SLL   &_REG,8                 * Remove hi-order bits\n         SRL   &_REG,8                 * Reposition low-order bits\n         LTR   &_REG,&_REG             * Check register contents\n.*\n.MEND    MEND\n./ ADD NAME=LTC      0100-20096-20096-0111-00109-00109-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Load and Test Characters into a register\n.*\n&LABEL   LTC   &REG,                   * Register to load              *\n               &LOC,                   * Location of character         *\n               &MASK                   * Mask for ICM (default=NNNY)\n.*\n.* &REG  specifies the register to load\n.* &LOC  specifies the location of the character(s) to be loaded\n.* &MASK specifies which bytes of the register are to be loaded\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LTC                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &_MASK\n.*\n.* Check the REG parameter\n         AIF   (K'&REG NE 0).NOERR1A\n.ERR1A   MNOTE 8,'No register specified'\n         AGO   .NOERR1\n.NOERR1A ANOP\n         AIF   ('&REG'(1,1) NE '(').NOERR1\n         AIF   (N'&REG EQ 0).ERR1B\n         AIF   (N'&REG GT 1).ERR1C\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'No register specified within sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'More than 1 register specified in sublist'\n.NOERR1  ANOP\n.*\n.* Check the LOC parameter\n         AIF   (K'&LOC NE 0).NOERR2\n.ERR2    MNOTE 8,'LOC parameter not specified'\n.NOERR2  ANOP\n.*\n.* Check the MASK parameter\n&_MASK   SETC  '&MASK'\n         AIF   (K'&MASK NE 0).MASKOK\n&_MASK   SETC  'NNNY'\n.MASKOK  ANOP\n.*\n.* Check the number of parameters\n         AIF   (N'&SYSLIST LE 3).NOERR3\n.ERR3    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR3  ANOP\n.*\n&LABEL   CLEAR &REG                    * Wipe register\n         ICM   &REG,&_MASK,&LOC        * Load and test character(s)\n.*\n.MEND    MEND\n./ ADD NAME=LTH      0100-20096-20096-0111-00098-00098-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Load and Test signed halfword into register\n.*\n&LABEL   LTH   &REG,                   * Register to load              *\n               &LOC                    * Location of value\n.*\n.* &REG  specifies the register to load\n.* &LOC  specifies the location that holds the value to be loaded\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LTH                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Check the REG parameter\n         AIF   (K'&REG NE 0).NOERR1A\n.ERR1A   MNOTE 8,'No register specified'\n         AGO   .NOERR1\n.NOERR1A ANOP\n         AIF   ('&REG'(1,1) NE '(').NOERR1\n         AIF   (N'&REG EQ 0).ERR1B\n         AIF   (N'&REG GT 1).ERR1C\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'No register specified within sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'More than 1 register specified in sublist'\n.NOERR1  ANOP\n.*\n.* Check the LOC parameter\n         AIF   (K'&LOC NE 0).NOERR2\n.ERR2    MNOTE 8,'LOC parameter not specified'\n.NOERR2  ANOP\n.*\n.* Check the number of parameters\n         AIF   (N'&SYSLIST EQ 2).NOERR3\n.ERR3    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR3  ANOP\n.*\n&LABEL   LH    &REG,&LOC               * Load value\n         LTR   &REG,&REG               *   and test it\n.*\n.MEND    MEND\n./ ADD NAME=LTHU     0100-20096-20096-0111-00098-00098-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Load and Test unsigned halfword into register\n.*\n&LABEL   LTHU  &REG,                   * Register to load              *\n               &LOC                    * Location of value\n.*\n.* &REG  specifies the register to load\n.* &LOC  specifies the location that holds the value to be loaded\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LTHU                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Check the REG parameter\n         AIF   (K'&REG NE 0).NOERR1A\n.ERR1A   MNOTE 8,'No register specified'\n         AGO   .NOERR1\n.NOERR1A ANOP\n         AIF   ('&REG'(1,1) NE '(').NOERR1\n         AIF   (N'&REG EQ 0).ERR1B\n         AIF   (N'&REG GT 1).ERR1C\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'No register specified within sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'More than 1 register specified in sublist'\n.NOERR1  ANOP\n.*\n.* Check the LOC parameter\n         AIF   (K'&LOC NE 0).NOERR2\n.ERR2    MNOTE 8,'LOC parameter not specified'\n.NOERR2  ANOP\n.*\n.* Check the number of parameters\n         AIF   (N'&SYSLIST EQ 2).NOERR3\n.ERR3    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR3  ANOP\n.*\n&LABEL   CLEAR &REG                    * Wipe register\n         ICM   &REG,NNYY,&LOC          * Load value and test it\n.*\n.MEND    MEND\n./ ADD NAME=LTORG    0100-20096-20096-0111-00132-00132-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Create a literal pool. This macro replaces the normal LTORG\n.* instruction. The required OPSYN is issued by the PGM macro.\n.*\n&LABEL   LTORG\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC LTORG                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_EXQ_I(50)          * Instructions used by EXQ\n         GBLC  &BXA_EXQ_OPS(50)        * Operands for the instructions\n         GBLA  &BXA_EXQ_LAST           * Pointer to last expanded\n         GBLC  &BXA_SUBR               * Current subroutine\n         GBLB  &SP_SHOWALL             * Print option from PGM macro\n         LCLC  &_PRINT                 * Print option for PRINT\n         LCLC  &_PROPT                 * Print option for PUSH/POP\n         LCLA  &I                      * Index for BXA_EXQ_I / _OPS\n         LCLC  &EXQI                   * Entry from BXA_EXQ_I\n         LCLC  &EXQOPS                 * Entry from BXA_EXQ_OPS\n.*\n.* Check that we're not in the midst of a subroutine\n         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR1\n.ERR1    MNOTE 8,'Missing ENDSR statement'\n.NOERR1  ANOP\n.*\n.* Check the number of arguments\n         AIF   (N'&SYSLIST EQ 0).NOERR2\n&I       SETA  0\n.LOOP0   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&SYSLIST).LOOP0OK\n         AIF   (K'&SYSLIST(&I) EQ 0).LOOP0\n.ERR2A   MNOTE 4,'No operands allowed on LTORG: ignored'\n.LOOP0OK ANOP\n.NOERR2  ANOP\n.*\n.* Generate code\n&LABEL   LABEL H                       * Align on halfword\n.*\n.* Create all EXQ-instructions with their labels\n         AIF   (N'&BXA_EXQ_I LE &BXA_EXQ_LAST).NOLOOP1 * Nothing new?\n**********************************************************************\n*\n* Instructions for use with EXexute\n*\n**********************************************************************\n&I       SETA  &BXA_EXQ_LAST           * I indexes BXA_EXQ\n.LOOP1   ANOP  ,                       *\n&I       SETA  &I+1                    * Point to next entry\n         AIF   (&I GT N'&BXA_EXQ_I).LOOP1OK * End of loop\n&EXQI    SETC  '&BXA_EXQ_I(&I)'        * Extract opcode\n&EXQOPS  SETC  '&BXA_EXQ_OPS(&I)'      * Extract operands\n_EXQ&I   &EXQI &EXQOPS                 * EXecutable instruction\n         AGO   .LOOP1                  * Go process next one\n.LOOP1OK ANOP  ,                       *\n&BXA_EXQ_LAST  SETA &I-1               * Set ptr to last expanded\n.NOLOOP1 ANOP  ,                       *\n.*\n.* Set listing options\n&_PRINT  SETC  'ON'                    * SHOWALL: show PRINT lines\n         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP lines\n&_PRINT  SETC  'OFF,NOPRINT'           * Not ALL: omit PRINT lines\n&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines\n.PRINTOK ANOP\n.*\n.* Insert real literal pool\n**********************************************************************\n*\n* Literals\n*\n**********************************************************************\n         _LTORG\n.*\n.MEND    MEND\n./ ADD NAME=MAPABEP  0100-20096-20096-0111-00105-00105-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for ABDUMP exit parameter list\n.*\n&LABEL   MAPABEP &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPABEP                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPABEP        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ABEP').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPABEP).MEND\n&BXA_MAC_MAPABEP SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ABEP\n&BXA_CB_ABEP SETC 'ABEP'\n.*\n         MNOTE *,'Including IHAABEPL mapping macro'\n         IHAABEPL ,\n.*\nABEP     EQU   IHAABEPL                * Label for USING\n         ORG   ,                       *\nABEP_LEN EQU   *-ABEP                  * Size of DSECT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPACB   0100-20096-20096-0111-00300-00300-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Access Control Block\n.*\n&LABEL   MAPACB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPACB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPACB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ACB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPACB).MEND\n&BXA_MAC_MAPACB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ACB\n&BXA_CB_ACB SETC 'ACB'\n.*\n.* ACBID - ACB IDENTIFIER\nACBIDVAL EQUOVR ,,v,ACBID\n.*\n.* ACBSTYP - ACB SUBTYPE\nACBSVSAM EQUOVR ,,v,ACBSTYP\nACBSVRP  EQUOVR ,,v,ACBSTYP\nACBSCNTL EQUOVR ,,v,ACBSTYP\nACBSVTAM EQUOVR ,,v,ACBSTYP\nACBS3540 EQUOVR ,,v,ACBSTYP\n.*\n.* ACBMACR1 - MACRF FIRST BYTE\nACBKEY   EQUOVR ,,b,ACBMACR1\nACBADR   EQUOVR ,,b,ACBMACR1\nACBADD   EQUOVR ,,b,ACBMACR1\nACBCNV   EQUOVR ,,b,ACBMACR1\nACBBLK   EQUOVR ,,b,ACBMACR1\nACBSEQ   EQUOVR ,,b,ACBMACR1\nACBDIR   EQUOVR ,,b,ACBMACR1\nACBIN    EQUOVR ,,b,ACBMACR1\nACBOUT   EQUOVR ,,b,ACBMACR1\nACBUBF   EQUOVR ,,b,ACBMACR1\n.*\n.* ACBMACR2 - MACRF SECOND BYTE\nACBNTRUN EQUOVR ,,b,ACBMACR2\nACBCCANY EQUOVR ,,b,ACBMACR2\nACBBWO   EQUOVR ,,b,ACBMACR2\nACBSKP   EQUOVR ,,b,ACBMACR2\nACBLOGON EQUOVR ,,b,ACBMACR2\nACBRST   EQUOVR ,,b,ACBMACR2\nACBDSN   EQUOVR ,,b,ACBMACR2\nACBAIX   EQUOVR ,,b,ACBMACR2\n.*\n.* ACBMACR3 - MACRF THIRD BYTE\nACBNLW   EQUOVR ,,b,ACBMACR3\nACBLSR   EQUOVR ,,b,ACBMACR3\nACBGSR   EQUOVR ,,b,ACBMACR3\nACBICI   EQUOVR ,,b,ACBMACR3\nACBDFR   EQUOVR ,,b,ACBMACR3\nACBSIS   EQUOVR ,,b,ACBMACR3\nACBNCFX  EQUOVR ,,b,ACBMACR3\nACBMODE  EQUOVR ,,b,ACBMACR3\n.*\n.* ACBMACR4 - ACB MACRF BYTE 4\nACBRLS   EQUOVR ,,b,ACBMACR4\nACBSNP   EQUOVR ,,b,ACBMACR4\n.*\n.* ACBRECFM - RECORD FORMAT\nACBRECAF EQUOVR ,,b,ACBRECFM\n.*\n.* ACBCCTYP - CONTROL CHARACTER TYPE\nACBTRCID EQUOVR ,,b,ACBCCTYP\nACBDLIXI EQUOVR ,,b,ACBCCTYP\nACBCCASA EQUOVR ,,b,ACBCCTYP\nACBCCMCH EQUOVR ,,b,ACBCCTYP\nACBCCDSI EQUOVR ,,b,ACBCCTYP\n.*\n.* ACBFLGS - MISC VSAM FLAGS\nACBNOJCL EQUOVR ,,b,ACBFLGS\nACBRDI   EQUOVR ,,b,ACBFLGS\nACBCNRD  EQUOVR ,,b,ACBFLGS\n.*\n.* ACBDSOR1 - DSORG FIRST BYTE\nACBCRNCK EQUOVR ,,b,ACBDSOR1\nACBCRNRE EQUOVR ,,b,ACBDSOR1\nACBDVIND EQUOVR ,,b,ACBDSOR1\nACBOPTJ  EQUOVR ,,b,ACBDSOR1\n.*\n.* ACBDSOR2 - DSORG SECOND BYTE\nACBDORGA EQUOVR ,,b,ACBDSOR2\n.*\n.* ACBAMETH - ACCESS METHOD TYPE\nACBVTAM  EQUOVR ,,v,ACBAMETH\nACBSUBS  EQUOVR ,,v,ACBAMETH\nACBTCAM  EQUOVR ,,v,ACBAMETH\nACBRCI   EQUOVR ,,v,ACBAMETH\nACBRTAM  EQUOVR ,,v,ACBAMETH\nACBJAM   EQUOVR ,,v,ACBAMETH\nACBVSAM  EQUOVR ,,v,ACBAMETH\n.*\n.* ACBOFLGS - OPEN / CLOSE FLAGS\nACBR31B  EQUOVR ,,b,ACBOFLGS\nACBR31C  EQUOVR ,,b,ACBOFLGS\nACBEOV   EQUOVR ,,b,ACBOFLGS\nACBOPEN  EQUOVR ,,b,ACBOFLGS\nACBDSERR EQUOVR ,,b,ACBOFLGS\nACBRECOV EQUOVR ,,b,ACBOFLGS\nACBEXFG  EQUOVR ,,b,ACBOFLGS\nACBLOCK  EQUOVR ,,b,ACBOFLGS\nACBIOSFG EQUOVR ,,b,ACBOFLGS\nACBBUSY  EQUOVR ,,b,ACBOFLGS\n.*\n.* ACBERFLG - ERROR FLAGS\nACBOALR  EQUOVR ,,v,ACBERFLG\nACBCALR  EQUOVR ,,v,ACBERFLG\n.*\n.* ACBINFL1 - FIRST IND FLAGS\nACBJEPS  EQUOVR ,,b,ACBINFL1\nACBIJRQE EQUOVR ,,b,ACBINFL1\nACBCAT   EQUOVR ,,b,ACBINFL1\nACBSCRA  EQUOVR ,,b,ACBINFL1\nACBUCRA  EQUOVR ,,b,ACBINFL1\nACBVVIC  EQUOVR ,,b,ACBINFL1\nACBSDS   EQUOVR ,,b,ACBINFL1\nACBBYPSS EQUOVR ,,b,ACBINFL1\n.*\n.* ACBINFL2 - 2ND IND FLAGS\nACBSWARN EQUOVR ,,b,ACBINFL2\nACBSOPEN EQUOVR ,,b,ACBINFL2\nACBCBIC  EQUOVR ,,b,ACBINFL2\nACBCATX  EQUOVR ,,b,ACBINFL2\nACBCASRS EQUOVR ,,b,ACBINFL2\nACBISHRD EQUOVR ,,b,ACBINFL2\nACBSHROP EQUOVR ,,b,ACBINFL2\nACBSHR02 EQUOVR ,,b,ACBINFL2\nACBSHR01 EQUOVR ,,b,ACBINFL2\n.*\n         MNOTE *,'Including IFGACB mapping macro'\n         IFGACB DSECT=YES\n         EQUOVR *END\n*\nIFGACB   DSECT ,                       * Resume ACB dsect\nACB      EQU   IFGACB                  * Name for USINGs\n         ORG   ,                       *\nACB_LEN  EQU   *-ACB                   * Length of ACB\n.*\n.* Adding overrides for 3540 extension\n.* ACB35IND - 3540 INDICATORS\nACBFEED  EQUOVR ,,b,ACB35IND\nACBSECUR EQUOVR ,,b,ACB35IND\n.*\n         MNOTE *,'Including IFGACB35 mapping macro'\nIFGACB   DSECT ,                       * Resume ACB dsect\n         ORG   ACB+ACB_LEN             * At end of base ACB\n         IFGACB35 ,                    *\n         EQUOVR *END\n*\nIFGACB   DSECT ,                       * Resume ACB dsect\n         ORG   ,                       *\nACB3540_LEN EQU *-ACB                  * Length of 3540 ACB\n.*\n.* Adding overrides for VTAM extension\n.* ACBOPT1 - ACB OPTION FLAGS\nACBKPFRR EQUOVR ,,b,ACBOPT1\nACBSRBEX EQUOVR ,,b,ACBOPT1\nACBSRBSP EQUOVR ,,b,ACBOPT1\nACBPLUSC EQUOVR ,,b,ACBOPT1\nACBPSINS EQUOVR ,,b,ACBOPT1\nACBNQNAM EQUOVR ,,b,ACBOPT1\nACBNMMST EQUOVR ,,b,ACBOPT1\nACBVFRR  EQUOVR ,,b,ACBOPT1\n.*\n.* ACBOPT2 - ACB OPTION FLAGS\nACBAFDX  EQUOVR ,,b,ACBOPT2\nACBPFMON EQUOVR ,,b,ACBOPT2\nACBCMIP  EQUOVR ,,b,ACBOPT2\nACBEXFRR EQUOVR ,,b,ACBOPT2\n.*\n.* ACBERFLG ERROR CODES SPECIFIC TO VTAM\nACBNORM  EQUOVR ,,v,ACBERFLG\nACBONVRT EQUOVR ,,v,ACBERFLG\nACBCAQNR EQUOVR ,,v,ACBERFLG\nACBCDSNR EQUOVR ,,v,ACBERFLG\nACBRNOCF EQUOVR ,,v,ACBERFLG\nACBOANAT EQUOVR ,,v,ACBERFLG\nACBOAHLT EQUOVR ,,v,ACBERFLG\nACBOAVFY EQUOVR ,,v,ACBERFLG\nACBOANSN EQUOVR ,,v,ACBERFLG\nACBOAPAA EQUOVR ,,v,ACBERFLG\nACBOAPNM EQUOVR ,,v,ACBERFLG\nACBOVINA EQUOVR ,,v,ACBERFLG\nACBOAPSE EQUOVR ,,v,ACBERFLG\nACBOUNDF EQUOVR ,,v,ACBERFLG\nACBOAPLE EQUOVR ,,v,ACBERFLG\nACBOPWSE EQUOVR ,,v,ACBERFLG\nACBOPWLE EQUOVR ,,v,ACBERFLG\nACBRNOOF EQUOVR ,,v,ACBERFLG\nACBOAVSE EQUOVR ,,v,ACBERFLG\nACBOAVLE EQUOVR ,,v,ACBERFLG\nACBTVTCL EQUOVR ,,v,ACBERFLG\nACBESME  EQUOVR ,,v,ACBERFLG\nACBOPSNE EQUOVR ,,v,ACBERFLG\nACBOPSNC EQUOVR ,,v,ACBERFLG\nACBOPSMM EQUOVR ,,v,ACBERFLG\nACBMOPEN EQUOVR ,,v,ACBERFLG\nACBNAUTH EQUOVR ,,v,ACBERFLG\nACBOACT  EQUOVR ,,v,ACBERFLG\nACBCBUSY EQUOVR ,,v,ACBERFLG\nACBTANAE EQUOVR ,,v,ACBERFLG\nACBTNBSE EQUOVR ,,v,ACBERFLG\nACBTNBOE EQUOVR ,,v,ACBERFLG\nACBTRTTE EQUOVR ,,v,ACBERFLG\n.*\n         MNOTE *,'Including ISTACBEX mapping macro'\nIFGACB   DSECT ,                       * Resume ACB dsect\n         ORG   ACB+ACB_LEN             * At end of base ACB\n         ISTACBEX ,                    *\n         EQUOVR *END\n*\nIFGACB   DSECT ,                       * Resume ACB dsect\n         ORG   ,                       *\nVTAMACB_LEN EQU *-ACB                  * Length of VTAM ACB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPACEE  0100-20096-20096-0111-00147-00147-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Accessor Environment Element\n.*\n&LABEL   MAPACEE &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPACEE                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPACEE        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ACEE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPACEE).MEND\n&BXA_MAC_MAPACEE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ACEE\n&BXA_CB_ACEE SETC 'ACEE'\n.*\n.* ACEEVRSN - ACEE VERSION NUMBER\nACEEVR01 EQUOVR ,,v,ACEEVRSN\nACEEVR02 EQUOVR ,,v,ACEEVRSN\nACEECURV EQUOVR ,,v,ACEEVRSN\n.*\n.* ACEEFLG1 - USER FLAGS\nACEESPEC EQUOVR ,,b,ACEEFLG1\nACEEADSP EQUOVR ,,b,ACEEFLG1\nACEEOPER EQUOVR ,,b,ACEEFLG1\nACEEAUDT EQUOVR ,,b,ACEEFLG1\nACEELOGU EQUOVR ,,b,ACEEFLG1\nACEEPRIV EQUOVR ,,b,ACEEFLG1\nACEERACF EQUOVR ,,b,ACEEFLG1\n.*\n.* ACEEFLG2 - DEFAULT UNIVERSAL ACCESS\nACEEALTR EQUOVR ,,b,ACEEFLG2\nACEECNTL EQUOVR ,,b,ACEEFLG2\nACEEUPDT EQUOVR ,,b,ACEEFLG2\nACEEREAD EQUOVR ,,b,ACEEFLG2\nACEENONE EQUOVR ,,b,ACEEFLG2\n.*\n.* ACEEFLG3 - MISCELLANEOUS FLAGS\nACEEGRPA EQUOVR ,,b,ACEEFLG3\nACEERASP EQUOVR ,,b,ACEEFLG3\nACEECLNT EQUOVR ,,b,ACEEFLG3\nACEEACLT EQUOVR ,,b,ACEEFLG3\nACEETSKP EQUOVR ,,b,ACEEFLG3\nACEEIUSP EQUOVR ,,b,ACEEFLG3\nACEEDUID EQUOVR ,,b,ACEEFLG3\n.*\n.* ACEEFLG4 - MISCELLANEOUS FLAGS 2\nACEEUATH EQUOVR ,,b,ACEEFLG4\nACEEDASD EQUOVR ,,b,ACEEFLG4\nACEETAPE EQUOVR ,,b,ACEEFLG4\nACEETERM EQUOVR ,,b,ACEEFLG4\n.*\n.* ACEEFLG5 - MISCELLANEOUS FLAGS\nACEEMODE EQUOVR ,,b,ACEEFLG5\nACEEVMSK EQUOVR ,,b,ACEEFLG5\nACEED4OK EQUOVR ,,b,ACEEFLG5\nACEEXNVR EQUOVR ,,b,ACEEFLG5\n.*\n         MNOTE *,'Including IHAACEE mapping macro'\n         IHAACEE ,\n         EQUOVR *END\n*\n         ORG\nACEE_LEN EQU   *-ACEE                  * Length of ACEE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPADSR  0100-20096-20096-0111-00149-00149-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Symptom Record\n.*\n&LABEL   MAPADSR &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPADSR                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPADSR        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ADSR').EMBED\n         AIF   ('&CB' EQ 'ADSRCMPS').EMBED\n         AIF   ('&CB' EQ 'ADSRDBST').EMBED\n         AIF   ('&CB' EQ 'ADSRROSD').EMBED\n         AIF   ('&CB' EQ 'ADSR5ST').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPADSR).MEND\n&BXA_MAC_MAPADSR SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ADSR\n         GBLC  &BXA_CB_ADSRCMPS\n         GBLC  &BXA_CB_ADSRDBST\n         GBLC  &BXA_CB_ADSRROSD\n         GBLC  &BXA_CB_ADSR5ST\n&BXA_CB_ADSR SETC 'ADSR'\n&BXA_CB_ADSRCMPS SETC 'ADSR'\n&BXA_CB_ADSRDBST SETC 'ADSR'\n&BXA_CB_ADSRROSD SETC 'ADSR'\n&BXA_CB_ADSR5ST SETC 'ADSR'\n.*\n.* ADSRFL1 - Record status flags\nADSRTRNC  EQUOVR ,,b,ADSRFL1\nADSRPMOD  EQUOVR ,,b,ADSRFL1\nADSRSGEN  EQUOVR ,,b,ADSRFL1\nADSRSMOD  EQUOVR ,,b,ADSRFL1\nADSRDAEN  EQUOVR ,,b,ADSRFL1\n.*\n.* ADSRFL2 - Record status flags\nADSRNOTD  EQUOVR ,,b,ADSRFL2\nADSRASYN  EQUOVR ,,b,ADSRFL2\nADSRNALT  EQUOVR ,,b,ADSRFL2\n.*\n.* ADSRFLC - Component status flags\nADSRNIBM  EQUOVR ,,b,ADSRFLC\n.*\n         MNOTE *,'Including ADSR mapping macro'\n         ADSR  ,                       * Generate ADSR\n         EQUOVR *END\n*\nADSR     DSECT ,                       * Reset to ADSR DSECT\n         ORG\nADSR_LEN EQU   *-ADSR                  * Length of ADSR\n*\nADSRCMPS DSECT ,                       * Reset to ADSRCMPS DSECT\n         ORG\nADSRCMPS_LEN EQU *-ADSRCMPS            * Length of ADSRCMPS\n*\nADSRDBST DSECT ,                       * Reset to ADSRSBST DSECT\n         ORG\nADSRDBST_LEN EQU *-ADSRDBST            * Length of ADSRDBST\n*\nADSRROSD DSECT ,                       * Reset to ADSRROSD DSECT\n         ORG\nADSRROSD_LEN EQU *-ADSRROSD            * Length of ADSRROSD\n*\nADSR5ST  DSECT ,                       * Reset to ADSR5ST DSECT\n         ORG\nADSR5ST_LEN EQU *-ADSR5ST              * Length of ADSR5ST\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPADYEN 0100-20096-20096-0111-00132-00132-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for DAE Event NotiFication parameter list\n.*\n&LABEL   MAPADYEN &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPADYEN               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPADYEN       * Map has been generated?\n         GBLC  &BXA_PGM_TITLE          * Title for the listing\n         GBLB  &SP_SHOWALL             * Show all statements?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ADYENF').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPADYEN).MEND\n&BXA_MAC_MAPADYEN SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ADYENF\n&BXA_CB_ADYENF SETC 'ADYEN'\n.*\n.* ADYENFACRONYM - Eyecatcher C'ENFD'\n.* ADYENFEYECATCHER EQUOVR ,,v,ADYENFACRONYM * Value exceeds X'FFFF'\n.*\n.* ADYENFVERSION - Version (1,2,3...)\nADYENFVERSION1       EQUOVR ,,v,ADYENFVERSION\nADYENFVERSIONCURRENT EQUOVR ,,v,ADYENFVERSION\n.*\n.* ADYENFRECTYPE - Function code, listed below.\nADYENFRECTYPETHRESHOLD EQUOVR ,,v,ADYENFRECTYPE\n.*\n.* ADYENFFLAGS - Flags\nADYENFFLAGSTRUNCATED EQUOVR ,,b,ADYENFFLAGS\n.*\n.* ADYENFSYMPTOMSTRINGLEN - Symptom String length\nADYENFMAXSYMPTOMSTRING EQUOVR ,,v,ADYENFSYMPTOMSTRINGLEN\n.*\n         MNOTE *,'Including ADYENF mapping macro'\n         ADYENF ,\n.*\nADYENF   DSECT ,                       * Resume ADYENF DSECT\n         ORG   ,                       *\n* ADYENF_LEN EQU *-ADYENF              * Size defined in ADYENF macro\n.*\n.* Return to our original CSECT name\n.* Since ADYENF changes the listing's title: reset title too\n&SYSECT  &SYSSTYP\n         TITLE '&BXA_PGM_TITLE'\n         AIF   (&SP_SHOWALL).TITLE\n.* Generate comment line in stead of a MNOTE line\n*\n         AGO   .TITLEOK\n.TITLE   ANOP\n         MNOTE *,'Previous STMT: TITLE ''&BXA_PGM_TITLE'''\n.TITLEOK ANOP\n.*\n.MEND    MEND\n./ ADD NAME=MAPAE    0100-20096-20096-0111-00106-00106-00000-BIXSMAC 32\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the VSM Allocation Element\n.*\n&LABEL   MAPAE &DSECT=YES,             * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPAE                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPAE          * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'AE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPAE).MEND\n&BXA_MAC_MAPAE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_AE\n&BXA_CB_AE SETC 'AE'\n.*\n         MNOTE *,'Including IHAAE mapping macro'\n         IHAAE ,                       * Generate AE\n*\n.* AE_LEN Added to IHAAE between OS/390 V2R6 and z/OS V1R5\n.* AE       DSECT ,                       * Reset to AE DSECT\n.*          ORG\n.* AE_LEN   EQU   *-AE                    * Length of AE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPASCB  0100-20096-20096-0111-00227-00227-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Address Space Control Block\n.*\n&LABEL   MAPASCB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPASCB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPASCB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ASCB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPASCB).MEND\n&BXA_MAC_MAPASCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ASCB\n&BXA_CB_ASCB SETC 'ASCB'\n.*\n.* Flag bit overrides\nASCBURRQ EQUOVR ,,b,ASCBSAWQ\nASCBS3S  EQUOVR ,,b,ASCBLL5\n.*\n.* ASCBRSMF - RSM ADDRESS SPACE FLAGS\nASCB2LPU EQUOVR ,,b,ASCBRSMF\nASCB1LPU EQUOVR ,,b,ASCBRSMF\nASCBN2LP EQUOVR ,,b,ASCBRSMF\nASCBVEQR EQUOVR ,,b,ASCBRSMF\n.*\n.* ASCBRCTF - FLAGS FOR RCT SERIALIZED BY COMPARE\nASCBTMNO EQUOVR ,,b,ASCBRCTF\nASCBFRS  EQUOVR ,,b,ASCBRCTF\nASCBFQU  EQUOVR ,,b,ASCBRCTF\nASCBJSTE EQUOVR ,,b,ASCBRCTF\nASCBWAIT EQUOVR ,,b,ASCBRCTF\nASCBOUT  EQUOVR ,,b,ASCBRCTF\nASCBTMLW EQUOVR ,,b,ASCBRCTF\nASCBTOFF EQUOVR ,,b,ASCBRCTF\n.*\n.* ASCBFLG1 - FLAG FIELD\nASCBLSAS EQUOVR ,,b,ASCBFLG1\nASCBDSTK EQUOVR ,,b,ASCBFLG1\nASCBDSTZ EQUOVR ,,b,ASCBFLG1\nASCBTERM EQUOVR ,,b,ASCBFLG1\nASCBABNT EQUOVR ,,b,ASCBFLG1\nASCBMEMP EQUOVR ,,b,ASCBFLG1\n.*\n.* ASCBDSP1 - NONDISPATCHABILITY FLAGS.\nASCBSSND EQUOVR ,,b,ASCBDSP1\nASCBFAIL EQUOVR ,,b,ASCBDSP1\nASCBSNQS EQUOVR ,,b,ASCBDSP1\nASCBSSSS EQUOVR ,,b,ASCBDSP1\nASCBSTND EQUOVR ,,b,ASCBDSP1\nASCBUWND EQUOVR ,,b,ASCBDSP1\nASCBNOQ  EQUOVR ,,b,ASCBDSP1\n.*\n.* ASCBFLG2 - FLAG BYTE.\nASCBXMPT EQUOVR ,,b,ASCBFLG2\nASCBPXMT EQUOVR ,,b,ASCBFLG2\nASCBCEXT EQUOVR ,,b,ASCBFLG2\nASCBS2S  EQUOVR ,,b,ASCBFLG2\nASCBNCML EQUOVR ,,b,ASCBFLG2\nASCBNOMT EQUOVR ,,b,ASCBFLG2\nASCBNOMD EQUOVR ,,b,ASCBFLG2\n.*\n.* ASCBLSWQ - ADDRESS SPACE LOCAL LOCK WEB SUSPEND QUEUE\nASCBS3NL EQUOVR ,,b,ASCBLSWQ\nASCBLTCL EQUOVR ,,b,ASCBLSWQ+3\n.*\n.* ASCBLEVL - LEVEL NUMBER OF ASCB\nASCBVS00 EQUOVR ,,v,ASCBLEVL\nASCBVS01 EQUOVR ,,v,ASCBLEVL\nASCBVS02 EQUOVR ,,v,ASCBLEVL\nASCBVS03 EQUOVR ,,v,ASCBLEVL\nASCBVERS EQUOVR ,,v,ASCBLEVL\n.*\n.* ASCBFL2A - FLAG BYTE.\nASCBNOPR EQUOVR ,,b,ASCBFL2A\n.*\n.* ASCBSRQ1 - FIRST BYTE OF ASCBSRQ\nASCBDSG4 EQUOVR ,,b,ASCBSRQ1\nASCBDFLT EQUOVR ,,b,ASCBSRQ1\n.*\n.* ASCBSRQ2 - SECOND BYTE OF ASCBSRQ\nASCBDSG3 EQUOVR ,,b,ASCBSRQ2\nASCBSRM1 EQUOVR ,,b,ASCBSRQ2\nASCBQVER EQUOVR ,,b,ASCBSRQ2\n.*\n.* ASCBSRQ3 - THIRD BYTE OF ASCBSRQ\nASCBDSG2 EQUOVR ,,b,ASCBSRQ3\nASCBRCTI EQUOVR ,,b,ASCBSRQ3\nASCBTCBV EQUOVR ,,b,ASCBSRQ3\nASCBACHA EQUOVR ,,b,ASCBSRQ3\nASCBMTER EQUOVR ,,b,ASCBSRQ3\nASCBMINI EQUOVR ,,b,ASCBSRQ3\nASCBCBVE EQUOVR ,,b,ASCBSRQ3\n.*\n.* ASCBSRQ4 - FOURTH BYTE OF ASCBSRQ\nASCBDSG1 EQUOVR ,,b,ASCBSRQ4\nASCBDETA EQUOVR ,,b,ASCBSRQ4\nASCBATTA EQUOVR ,,b,ASCBSRQ4\nASCBRTM2 EQUOVR ,,b,ASCBSRQ4\nASCBRTM1 EQUOVR ,,b,ASCBSRQ4\nASCBCHAP EQUOVR ,,b,ASCBSRQ4\nASCBSTAT EQUOVR ,,b,ASCBSRQ4\nASCBPURD EQUOVR ,,b,ASCBSRQ4\n.*\n.* ASCBSRBM - MODEL PSW BYTE 0 USED BY SRB DISPATCHER\nASCBPER  EQUOVR ,,b,ASCBSRBM\n.*\n.* ASCBSSO4 - SPACE SWITCH EVENT OWNER MASK BYTE 4.\nASCBSSSP EQUOVR ,,b,ASCBSSO4\nASCBSSJS EQUOVR ,,b,ASCBSSO4\n.*\n.* ASCBCS1 - FIRST BYTE OF COMPARE AND SWAP FLAGS.\nASCBXMET EQUOVR ,,b,ASCBCS1\nASCBXMEC EQUOVR ,,b,ASCBCS1\nASCBXMPA EQUOVR ,,b,ASCBCS1\nASCBXMLK EQUOVR ,,b,ASCBCS1\nASCBPERS EQUOVR ,,b,ASCBCS1\nASCBDTER EQUOVR ,,b,ASCBCS1\nASCBPERO EQUOVR ,,b,ASCBCS1\nASCBSWOP EQUOVR ,,b,ASCBCS1\n.*\n.* ASCBCS2 - SECOND BYTE OF COMPARE AND SWAP FLAGS.\nASCBSAS  EQUOVR ,,b,ASCBCS2\n.*\n.* ASCBLL1 - FIRST BYTE OF FLAGS.\nASCBSSPC EQUOVR ,,b,ASCBLL1\n.*\n.* ASCBLL4 - FOURTH BYTE OF FLAGS.\nASCBTYP1 EQUOVR ,,b,ASCBLL4\n.*\n.* BYTE 0 OF ASCBGQIR\nASCBGQAB EQUOVR ,,b,ASCBGQIR\n.*\n.* ASCBGQI3 - BYTE 3 OF ASCBGQIR\nASCBGQDS EQUOVR ,,b,ASCBGQI3\n.*\n         MNOTE *,'Including IHAASCB mapping macro'\n         IHAASCB DSECT=YES,            * Generate ASCB                 *\n               LIST=YES                * with unchanged PRINT option\n         EQUOVR *END\n*\nASCB     DSECT ,                       * Reset to ASCB DSECT\n         ORG\nASCB_LEN EQU   *-ASCB                  * Length of ASCB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPASEO  0100-20096-20096-0111-00104-00104-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Address Space crEation Output area\n.*\n&LABEL   MAPASEO &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPASEO                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPASEO        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ASEO').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPASEO).MEND\n&BXA_MAC_MAPASEO SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ASEO\n&BXA_CB_ASEO SETC 'ASEO'\n.*\n         MNOTE *,'Including IHAASEO mapping macro'\n         IHAASEO ,\n*\n         ORG\nASEO_LEN EQU   *-ASEO                  * Length of ASEO\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPASMVT 0100-20096-20096-0111-00155-00155-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Auxiliary Storage Manager Vector Table\n.*\n&LABEL   MAPASMVT &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPASMVT               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPASMVT       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ASMPOOLS').EMBED\n         AIF   ('&CB' EQ 'ASMVT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPASMVT).MEND\n&BXA_MAC_MAPASMVT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ASMPOOLS\n         GBLC  &BXA_CB_ASMVT\n&BXA_CB_ASMPOOLS SETC 'ASMVT'\n&BXA_CB_ASMVT SETC 'ASMVT'\n.*\n.* ASMFLAG1 - ASM global flag field 1\n.* ASMDUPLX    EQUOVR ,,b,ASMFLAG1     * Last seen in OS/390 V2R6\nASMNPRIM    EQUOVR ,,b,ASMFLAG1\nASMNOLCL    EQUOVR ,,b,ASMFLAG1\nASMPGDEL    EQUOVR ,,b,ASMFLAG1\n.* ASMNODPX    EQUOVR ,,b,ASMFLAG1     * Last seen in OS/390 V2R6\nASMPLPAF    EQUOVR ,,b,ASMFLAG1\nASMCOMMF    EQUOVR ,,b,ASMFLAG1\nASMPLPAS    EQUOVR ,,b,ASMFLAG1\n.*\n.* ASMFLAG2 - ASM global flag field 2\nASMDSRO     EQUOVR ,,b,ASMFLAG2\nASMNOSAV    EQUOVR ,,b,ASMFLAG2\nASMNOTMR    EQUOVR ,,b,ASMFLAG2\nASMNOTPT    EQUOVR ,,b,ASMFLAG2\nASMQUICK    EQUOVR ,,b,ASMFLAG2\nASMWARM     EQUOVR ,,b,ASMFLAG2\nASMSPILL    EQUOVR ,,b,ASMFLAG2\nASMNOWM     EQUOVR ,,b,ASMFLAG2\n.*\n.* ASMFLAG3 - ASM global flag field 3\nASMWTO5E    EQUOVR ,,b,ASMFLAG3\n.*\n.* Externals - not necessarily needed\nILRGOS      EXTRNOVR *WXTRN\nILRTRPAG    EXTRNOVR *WXTRN\nILRPTERM    EXTRNOVR *WXTRN\n.*\n.* ASMVIO - ASM global VIO flag.\nASMDVIO     EQUOVR ,,b,ASMVIO\nASMNFVIO    EQUOVR ,,b,ASMVIO\nASMTRPLF    EQUOVR ,,b,ASMVIO\nASMVIOJ     EQUOVR ,,b,ASMVIO\n.*\n.* Externals - not necessarily needed\nILRCMP      EXTRNOVR *WXTRN\nILRCMPCI    EXTRNOVR *WXTRN\nILRCMPDI    EXTRNOVR *WXTRN\nILRCMPAE    EXTRNOVR *WXTRN\nILRCMPNE    EXTRNOVR *WXTRN\n.*\n         MNOTE *,'Including ILRASMVT mapping macro'\n         ILRASMVT ,                    *\n         EQUOVR *END                   *\n         EXTRNOVR *END                 *\n*\nASMVT    DSECT ,                       * Return to ASMVT\n         ORG\nASMVT_LEN EQU  *-ASMVT                 * Length of ASMVT\n*\nASMPOOLS DSECT ,                       * Return to ASMPOOLS DSECT\n         ORG\nASMPOOLS_LEN EQU *-ASMPOOLS            * Length of ASMPOOLS\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPASSB  0100-20096-20096-0111-00147-00147-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Address Space Secondary Block\n.*\n&LABEL   MAPASSB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPASSB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPASSB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ASSB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPASSB).MEND\n&BXA_MAC_MAPASSB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ASSB\n&BXA_CB_ASSB SETC 'ASSB'\n.*\n.* ASSBXMF1 - CROSS MEMORY FLAGS 1\nASSBXEAX EQUOVR ,,b,ASSBXMF1\n.*\n.* ASSBSTW1 - FIRST WORD OF ASSBSTKN.\nASSBSTYP EQUOVR ,,b,ASSBSTW1\n.*\n.* ASSBFLG0 - ASSB FLAG BYTE 0.\nASSBBSDN EQUOVR ,,b,ASSBFLG0\nASSBCDSI EQUOVR ,,b,ASSBFLG0\nASSBPSCH EQUOVR ,,b,ASSBFLG0\n.*\n.* ASSBFLG1 - ASSB FLAG BYTE 1\nASSBNTAR EQUOVR ,,b,ASSBFLG1\nASSBNTTR EQUOVR ,,b,ASSBFLG1\nASSBNTSL EQUOVR ,,b,ASSBFLG1\n.*\n.* ASSBFLG2 - ASSB FLAG BYTE 2.\nASSBENFL EQUOVR ,,b,ASSBFLG2\nASSBNSWF EQUOVR ,,b,ASSBFLG2\nASSBPRAN EQUOVR ,,b,ASSBFLG2\n.*\n.* ASSBFLG3 - ASSB FLAG BYTE 3 - RESERVED.\nASSBARM  EQUOVR ,,b,ASSBFLG3\nASSBNRST EQUOVR ,,b,ASSBFLG3\n.*\n.* ASSBMT# - MEMTERM DISABLE COUNT.\nASSBMTP  EQUOVR ,,b,ASSBMT#\n.*\n.* ASSBDFP - RESERVED FOR USE BY DFP.\nASSBOAM  EQUOVR ,,b,ASSBDFP\n.*\n.* ASSBWMF1 - WLM flags\nASSBWINI EQUOVR ,,b,ASSBWMF1\nASSBFSAS EQUOVR ,,b,ASSBWMF1\n.*\n.* ASSBCTXF - Context Services flags\nASSBNCL  EQUOVR ,,b,ASSBCTXF\nASSBMSGI EQUOVR ,,b,ASSBCTXF\nASSBURMX EQUOVR ,,b,ASSBCTXF\nASSBURMM EQUOVR ,,b,ASSBCTXF\n.*\n         MNOTE *,'Including IHAASSB mapping macro'\n         IHAASSB LIST=YES,             * Keep unchanged PRINT option\n         EQUOVR *END\n*\nASSB     DSECT ,                       * Reset to ASSB DSECT\n         ORG\nASSB_LEN EQU   *-ASSB                  * Length of ASSB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPASVT  0100-20096-20096-0111-00119-00119-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Address Space Vector Table\n.*\n&LABEL   MAPASVT &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPASVT                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPASVT        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ASVT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPASVT).MEND\n&BXA_MAC_MAPASVT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ASVT\n&BXA_CB_ASVT SETC 'ASVT'\n.*\n.* ASVTRSHD - ADDRESS OF FIRST AVAILABLE SLOT\nASVTRSAV EQUOVR ,,b,ASVTRSHD\n.*\n.* ASVTDSHD - ADDRESS OF FIRST AVAILABLE SLOT\nASVTDSAV EQUOVR ,,b,ASVTDSHD\n.*\n.* ASVTFRST - ADDRESS OF FIRST AVAILABLE ASVT\nASVTAVAI EQUOVR ,,b,ASVTFRST\n.*\n.* ASVTENTY - ENTRY FOR EACH POSSIBLE ASID.\nASVTAVAL EQUOVR ,,b,ASVTENTY\n.*\n         MNOTE *,'Including IHAASVT mapping macro'\n         IHAASVT LIST=YES              * Keep current listing options\n         EQUOVR *END\n*\n         ORG\nASVT_LEN EQU   *-ASVT-L'ASVTENTY       * Length of ASVT base. Add      *\n                                       * L'ASVTENTY for each entry to  *\n                                       * be contained in this ASVT.\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPASXB  0100-20096-20096-0111-00111-00111-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Address Space eXtension Block\n.*\n&LABEL   MAPASXB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPASXB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPASXB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ASXB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPASXB).MEND\n&BXA_MAC_MAPASXB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ASXB\n&BXA_CB_ASXB SETC 'ASXB'\n.*\n.* ASXBCRB1 - CANCEL/RCT BYTE 1\nASXBPIP  EQUOVR ,,b,ASXBCRB1\nASXBTFD  EQUOVR ,,b,ASXBCRB1\n.*\n         MNOTE *,'Including IHAASXB mapping macro'\n         IHAASXB DSECT=YES,            * Generate ASXB                 *\n               LIST=YES                * with unchanged PRINT option\n         EQUOVR *END\n*\nASXB     DSECT ,                       * Reset to ASXB DSECT\n         ORG\nASXB_LEN EQU   *-ASXB                  * Length of ASXB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPBASEA 0100-20096-20096-0111-00195-00195-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Master Scheduler Resident Data Area\n.*\n&LABEL   MAPBASEA &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPBASEA               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPBASEA       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'BASEA').EMBED\n         AIF   ('&CB' EQ 'BASEX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPBASEA).MEND\n&BXA_MAC_MAPBASEA SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_BASEA\n         GBLC  &BXA_CB_BASEX\n&BXA_CB_BASEA SETC 'BASEA'\n&BXA_CB_BASEX SETC 'BASEA'\n.*\n.* BASFL -\nBAIN     EQUOVR ,,b,BASFL\nBAINTSET EQUOVR ,,b,BASFL\nBAFSTOR  EQUOVR ,,b,BASFL\n.*\n.* BAVERN - VERSION LEVEL\nBASP13   EQUOVR ,,v,BAVERN\nBASP410  EQUOVR ,,v,BAVERN\nBAVERNID EQUOVR ,,v,BAVERN\n.*\n.* MSLOGST - LOG STATUS\nMSLOGENQ EQUOVR ,,b,MSLOGST\nMSLOGTHD EQUOVR ,,b,MSLOGST\nMSLOGCOM EQUOVR ,,b,MSLOGST\nMSLOGDAR EQUOVR ,,b,MSLOGST\nMSLOGIPL EQUOVR ,,b,MSLOGST\nMSLOGSTA EQUOVR ,,b,MSLOGST\nMSLOGCHN EQUOVR ,,b,MSLOGST\nMSLOGTND EQUOVR ,,b,MSLOGST\n.*\n.* BASPBYTE - MSTR SCH INIT CPL\nBAMSSTAR EQUOVR ,,b,BASPBYTE\nBAMASCH  EQUOVR ,,b,BASPBYTE\nBAMSINIT EQUOVR ,,b,BASPBYTE\nBAOKDUMP EQUOVR ,,b,BASPBYTE\n.*\n.* BAMONITR - MONITOR FLAGS (TERMINALS-TJB CHAIN)\nBADSN    EQUOVR ,,b,BAMONITR\nBASPACE  EQUOVR ,,b,BAMONITR\n.*\n.* BACHFLGS - CSCB FLAGS\nBACSCBA  EQUOVR ,,b,BACHFLGS\nBACSCXB  EQUOVR ,,b,BACHFLGS\n.*\n.* MSCLOSSW - ECB WAIT/POST FIELD\nMSCLOSW  EQUOVR ,,b,MSCLOSSW\nMSCLOSP  EQUOVR ,,b,MSCLOSSW\n.*\n.* MSWLOGSW - ECB WAIT/POST FIELD\nMSWLOGW  EQUOVR ,,b,MSWLOGSW\nMSWLOGP  EQUOVR ,,b,MSWLOGSW\n.*\n.* MSWTRSW - ECB WAIT/POST FIELD\nMSWTRW   EQUOVR ,,b,MSWTRSW\nMSWTRP   EQUOVR ,,b,MSWTRSW\n.*\n.* MSLGSTRT - LOG RE-ACTIVATION ECB\nMSSTRTW  EQUOVR ,,b,MSLGSTRT\nMSSTRTP  EQUOVR ,,b,MSLGSTRT\n.*\n.* MSSSB - MONITOR TIME NOTE BYTE\nMSTN     EQUOVR ,,b,MSSSB\n.*\n.* MSECBFL - SCHEDULER FLAGBYTE\nBAMSJOBS EQUOVR ,,b,MSECBFL\nMSWTL    EQUOVR ,,b,MSECBFL\nMSSUM    EQUOVR ,,b,MSECBFL\n.*\n.* BAMTCNTL - MASTER TRACE CONTROL FLAG\nBAMT808  EQUOVR ,,b,BAMTCNTL\nBAMT809  EQUOVR ,,b,BAMTCNTL\nBAMT816  EQUOVR ,,b,BAMTCNTL\nBAMTRTRY EQUOVR ,,b,BAMTCNTL\nBAMTTSWP EQUOVR ,,b,BAMTCNTL\nBAMTTENT EQUOVR ,,b,BAMTCNTL\n.*\n.* BAMTRECF - MASTER TRACE ERROR RECURSION FLAG\nBAMTR808 EQUOVR ,,b,BAMTRECF\nBAMTR809 EQUOVR ,,b,BAMTRECF\nBAMTR816 EQUOVR ,,b,BAMTRECF\nBAMTRUNK EQUOVR ,,b,BAMTRECF\n.*\n.* BAMTITFL - INTERNAL PROCESSING FLAG USED BY MASTER TRACE FACILITY\nBAMTITAB EQUOVR ,,b,BAMTITFL\nBAMTSFRR EQUOVR ,,b,BAMTITFL\nBAMTFRRR EQUOVR ,,b,BAMTITFL\n.*\n.* BAMTDSW - ECB WAIT/POST FIELD\nBAMTDW   EQUOVR ,,b,BAMTDSW\nBAMTDP   EQUOVR ,,b,BAMTDSW\n.*\n         MNOTE *,'Including IEEBASEA mapping macro'\n         IEEBASEA ,\n         EQUOVR *END\n*\nBASE     DSECT ,                       * Resume BASE DSECT\nBASEA    EQU   BASE                    * Label for USINGs\n         ORG\nBASEA_LEN EQU  *-BASEA                 * Length of BASEA\n*\nBASEX    DSECT ,                       * Resume BASE-extension\n         ORG\nBASEX_LEN EQU  *-BASEX                 * Length of BASEX\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPBITS  0100-20096-20096-0111-00103-00103-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for bit equates\n.*\n         MAPBITS\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPBITS                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* &BXA_BITS is used to prevent expanding MAPBITS more than once\n         GBLB  &BXA_MAC_MAPBITS\n.*\n         AIF   (&BXA_MAC_MAPBITS).MEND\n&BXA_MAC_MAPBITS SETB 1\n.*\n         MNOTE *,'Including IEZBITS'\n.*\n.* Put equates in a DSECT to prevent warning messages in ASM listing\nBXA_EQU  DSECT\n         IEZBITS\n*\n* Other equates for bits\n*\nNOBITS   EQU   X'00'                   *\nALLBITS  EQU   X'FF'                   *\n*\nNOT_BIT0 EQU   ALLBITS-BIT0            *\nNOT_BIT1 EQU   ALLBITS-BIT1            *\nNOT_BIT2 EQU   ALLBITS-BIT2            *\nNOT_BIT3 EQU   ALLBITS-BIT3            *\nNOT_BIT4 EQU   ALLBITS-BIT4            *\nNOT_BIT5 EQU   ALLBITS-BIT5            *\nNOT_BIT6 EQU   ALLBITS-BIT6            *\nNOT_BIT7 EQU   ALLBITS-BIT7            *\n*\n* Equates for Plists\nLISTEND  EQU   BIT0                    *\nNOT_LISTEND EQU X'FF'-LISTEND          *\n*\n* Equates for Amode\nAMODE31  EQU   BIT0                    *\nAMODE24  EQU   X'FF'-AMODE31           *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPCAM   0100-20096-20096-0111-00145-00145-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for parameter list created by CAMLST\n.*\n&LABEL   MAPCAM &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPCAM                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPCAM         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'CAMLOC').EMBED\n         AIF   ('&CB' EQ 'CAMLOCVOL').EMBED\n         AIF   ('&CB' EQ 'CAMLST').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPCAM).MEND\n&BXA_MAC_MAPCAM SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_CAMLOC\n         GBLC  &BXA_CB_CAMLOCVOL\n         GBLC  &BXA_CB_CAMLST\n&BXA_CB_CAMLOC SETC 'CAM'\n&BXA_CB_CAMLOCVOL SETC 'CAM'\n&BXA_CB_CAMLST SETC 'CAM'\n.*\n         MNOTE *,'Generating DSECT for CAMLST parameter list'\n*\n* Map plist generated by CAMLST macro\nCAMLST   DSECT ,                       *\n         DS    0F                      * Always aligned\nCAMOPT   DCL   *CODE,XL1,              * Option byte                   *\n               (CAMNAME,X'44'),        * CAMLST NAME option value      *\n               (CAMSRCH,X'C1')         * CAMLST SEARCH option value\n*\n         DS    3XL1                    * Unused bytes\nCAMDSNP  DS    AL4                     * Pointer to DSN\nCAMVOLP  DS    AL4                     * Pointer to volume serial\nCAMWRKP  DS    AL4                     * Pointer to work area\n*\n         ORG   ,                       *\nCAMLST_LEN EQU *-CAMLST                *\n*\n* Map results returned by LOCATE - CAMLST NAME\nCAMLOC   DSECT ,                       *\nCAMLOCNR DS    H                       * nr of valid entries\nCAMLOCDT DS    20XL12                  * max twenty volser-entries\n         DS    XL10                    * Reserved\nCAMLOCDP DS    XL3                     * DSCB pointer: relative track\n*                                      *  address of first DSCB.\n*                                      *  If CAMLOCNR>20: rel.track adr\n*                                      *  of next VCB. Zero on last VCB\nCAMLOC00 DS    XL1                     * Always zero\n         DS    XL9                     * Reserved\n*\n         ORG   ,                       *\nCAMLOC_LEN EQU *-CAMLOC                *\n*\n* Map 1 resulting entry returned by LOCATE - CAMLST NAME\nCAMLOCVOL DSECT ,                      *\nCAMLOCDC DS    XL4                     * Device code\nCAMLOCVS DS    CL6                     * Volume serial number\nCAMLOCSQ DS    H                       * Volume sequence number\n*\n         ORG   ,                       *\nCAMLOCVOL_LEN EQU *-CAMLOCVOL          *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPCDE   0100-20096-20096-0111-00156-00156-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Contents Directory Entry\n.*\n.* CDEs for FLPA/MLPA are in a chain. Field CVTQLPAQ points to\n.* a dummy header entry, which points to the first real CDE on the\n.* queue. The last entry in the chain has CDCHAIN=0.\n.* CDEs for dynamic LPA are also in a chain, Field ECVTDLPF points\n.* to the first entry - no header entry is provided. The last entry\n.* in the chain is a dummy entry with CDENAME=XL8'00'. It points to\n.* the first real entry in the FLPA/MLPA queue.\n.*\n&LABEL   MAPCDE &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPCDE                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPCDE         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'CDE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPCDE).MEND\n&BXA_MAC_MAPCDE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_CDE\n&BXA_CB_CDE SETC 'CDE'\n.*\n.* CDENTPT - Module's relocated Entry Point address\nCDEMODE  EQUOVR ,,b,CDENTPT\n.*\n.* CDATTRB - Flag byte\nCDEOM    EQUOVR ,,b,CDATTRB\nCDIDENTY EQUOVR ,,b,CDATTRB\nCDRACDTY EQUOVR ,,b,CDATTRB\nCDCDEX   EQUOVR ,,b,CDATTRB\nCDELPDE  EQUOVR ,,b,CDATTRB\nCDGLOBAL EQUOVR ,,b,CDATTRB\nCDCONTMN EQUOVR ,,b,CDATTRB\nCDRACF   EQUOVR ,,b,CDATTRB\n.*\n.* CDATTR - Attribute flags\nCDNIP    EQUOVR ,,b,CDATTR\nCDNIC    EQUOVR ,,b,CDATTR\nCDREN    EQUOVR ,,b,CDATTR\nCDSER    EQUOVR ,,b,CDATTR\nCDNFN    EQUOVR ,,b,CDATTR\nCDMIN    EQUOVR ,,b,CDATTR\nCDJPA    EQUOVR ,,b,CDATTR\nCDNLR    EQUOVR ,,b,CDATTR\n.*\n.* CDATTR2 - Second attribute field\nCDSPZ    EQUOVR ,,b,CDATTR2\nCDREL    EQUOVR ,,b,CDATTR2\nCDXLE    EQUOVR ,,b,CDATTR2\nCDRLC    EQUOVR ,,b,CDATTR2\nCDEANYM  EQUOVR ,,b,CDATTR2\nCDOLY    EQUOVR ,,b,CDATTR2\nCDSYSLIB EQUOVR ,,b,CDATTR2\nCDAUTH   EQUOVR ,,b,CDATTR2\n.*\n.* CDATTR3 - 3rd attribute field\nCDPATHN  EQUOVR ,,b,CDATTR3\nCDPML    EQUOVR ,,b,CDATTR3\nCDESPLIT EQUOVR ,,b,CDATTR3\nCDERTLS  EQUOVR ,,b,CDATTR3\nCDEDYLPA EQUOVR ,,b,CDATTR3\nCDEPROTP EQUOVR ,,b,CDATTR3\n.*\n         MNOTE *,'Including IHACDE mapping macro'\n         IHACDE ,\n         EQUOVR *END\n*\nCDENTRY  DSECT ,                       * Resume CDE DSECT\nCDE      EQU   CDENTRY                 * Label for USINGs\n         ORG   ,\nCDE_LEN  EQU   *-CDE                   * Length of CDE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPCIB   0100-20096-20096-0111-00149-00149-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Command Input Buffer\n.*\n&LABEL   MAPCIB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPCIB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPCIB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'CIBHDR').EMBED\n         AIF   ('&CB' EQ 'CIBX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPCIB).MEND\n&BXA_MAC_MAPCIB SETB  1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_CIBHDR\n         GBLC  &BXA_CB_CIBX\n&BXA_CB_CIBHDR SETC 'CIB'\n&BXA_CB_CIBX   SETC 'CIB'\n.*\n.* Declare verb-codes\nCIBSTART EQUOVR ,,v,CIBVERB\nCIBSTCOM EQUOVR ,,v,CIBVERB\nCIBMODFY EQUOVR ,,v,CIBVERB\nCIBSTOP  EQUOVR ,,v,CIBVERB\nCIBMOUNT EQUOVR ,,v,CIBVERB\n.*\n.* Declare version levels\nCIBS313  EQUOVR ,,v,CIBRSV1\nCIBS410  EQUOVR ,,v,CIBRSV1\nCIB15497 EQUOVR ,,v,CIBRSV1\nCIBVRSN  EQUOVR ,,v,CIBRSV1\n.*\n.* Declare authority code bits\nCIBXAUT1 EQUOVR ,,b,CIBXAUTA\nCIBXAUT2 EQUOVR ,,b,CIBXAUTA\nCIBXAUT3 EQUOVR ,,b,CIBXAUTA\n.*\n.* Declare command authority bits\nCIBXDISA EQUOVR ,,b,CIBXDISP\nCIBXDISM EQUOVR ,,b,CIBXDISP\nCIBXDISC EQUOVR ,,b,CIBXDISP\nCIBXDISR EQUOVR ,,b,CIBXDISP\nCIBXDISE EQUOVR ,,b,CIBXDISP\n.*\n         MNOTE *,'Including IEZCIB mapping macro'\n.*\n.* IEZCIB does not generate a DSECT-statement\nCIB      DSECT ,                       * Start of CIB DSECT\n         IEZCIB ,                      *\n         EQUOVR *END\n*\nCIB      DSECT ,                       * Resume CIB DSECT\n         ORG\n*\n* Length of CIB is contained in field CIBLEN (1 byte) in units\n* of doublewords, therefore no length equate is supplied.\n*\n* CIBHDR is defined as the fixed part of the CIB i.e. the CIB without\n* the CIBDATA field.\n*\nCIBHDR   EQU   CIB                     *\nCIBHDR_LEN EQU CIBDATA-CIBHDR          *\n*\nCIBX     DSECT ,                       * Resume CIB extension\n         ORG\nCIBX_LEN EQU   *-CIBX                  * Length of CIB extension\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPCOM   0100-20096-20096-0111-00112-00112-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the COMmunication area\n.*\n&LABEL   MAPCOM &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPCOM                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPCOM         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'COM').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPCOM).MEND\n&BXA_MAC_MAPCOM SETB 1\n.*\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_COM\n&BXA_CB_COM SETC 'COM'\n.*\n.* COMTOKEN - 31 BIT RIGHT JUSTIFIED TOKEN\nCOMTOKHR EQUOVR ,,b,COMTOKEN\n.*\n         MNOTE *,'Including IEZCOM mapping macro'\n.*\n.* IEZCOM does not generate a DSECT-statement\nCOM      DSECT ,                       * Start of COM DSECT\n         IEZCOM ,                      *\n         EQUOVR *END\n*\n         ORG\nCOM_LEN  EQU   *-COM                   * Length of COM\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPCQE   0100-20096-20096-0111-00116-00116-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Console Queue Element\n.*\n&LABEL   MAPCQE &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPCQE                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPCQE         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'CQE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPCQE).MEND\n&BXA_MAC_MAPCQE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_CQE\n&BXA_CB_CQE SETC 'CQE'\n.*\n.* CQEFLAG - CONSOLE OUTPUT QUEUE FLAGS\nCQEEOB   EQUOVR ,,b,CQEFLAG\nCQEEOQ   EQUOVR ,,b,CQEFLAG\nCQEATTOP EQUOVR ,,b,CQEFLAG\nCQEMLQHC EQUOVR ,,b,CQEFLAG\nCQEMAJOR EQUOVR ,,b,CQEFLAG\nCQEAVAIL EQUOVR ,,b,CQEFLAG\nCQEENTR  EQUOVR ,,b,CQEFLAG\nCQENULL  EQUOVR ,,v,CQEFLAG\n.*\n         MNOTE *,'Including IEZVD001 mapping macro'\n         IEZVD001 ,                    *\n         EQUOVR *END\n.*\nCQE      DSECT                         * Resume CQE DSECT\n         ORG\nCQE_LEN  EQU   *-CQE                   * Length of CQE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPCSCB  0100-20096-20096-0111-00245-00245-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Command Scheduling Control Block\n.*\n&LABEL   MAPCSCB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPCSCB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPCSCB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'CSCB').EMBED\n         AIF   ('&CB' EQ 'CSCX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPCSCB).MEND\n&BXA_MAC_MAPCSCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_CSCB\n         GBLC  &BXA_CB_CSCX\n&BXA_CB_CSCB SETC 'CSCB'\n&BXA_CB_CSCX SETC 'CSCB'\n.*\n.* CHVCD - COMMAND VERB CODE\nCHDIRINV EQUOVR ,,v,CHVCD\n.*\n.* CHSTS - STATUS FLAGS\nCHAP     EQUOVR ,,b,CHSTS\nCHINFMT  EQUOVR ,,b,CHSTS\nCHSOUT   EQUOVR ,,b,CHSTS\nCHQSPC   EQUOVR ,,b,CHSTS\nCHAD     EQUOVR ,,b,CHSTS\nCHDL     EQUOVR ,,b,CHSTS\nCHFC     EQUOVR ,,b,CHSTS\nCHABTERM EQUOVR ,,b,CHSTS\n.*\n.* CHACT - FLAGS INDICATING ACTIVITY INVOLVED\nCHSWAP   EQUOVR ,,b,CHACT\nCHTERM   EQUOVR ,,b,CHACT\nCHDISC   EQUOVR ,,b,CHACT\nCHDSI    EQUOVR ,,b,CHACT\nCHCL     EQUOVR ,,b,CHACT\nCHCLD    EQUOVR ,,b,CHACT\nCHAIFX   EQUOVR ,,b,CHACT\nCHPOSTSS EQUOVR ,,b,CHACT\nCHIFY    EQUOVR ,,b,CHACT\nCHAFORCE EQUOVR ,,b,CHACT\n.*\n.* CHPARM - POINTER TO PARAMETER LIST USED FOR SVC 34 COMMANDS\nCHPCOI   EQUOVR ,,b,CHPARM\n.*\n.* CHTRKID - DISPLAY/TRACK IDENTIFIER (OS/VS2)\nCHTSID   EQUOVR ,,v,CHTRKID\nCHJOBID  EQUOVR ,,v,CHTRKID\nCHINITID EQUOVR ,,v,CHTRKID\nCHSASID  EQUOVR ,,v,CHTRKID\nCHATXPID EQUOVR ,,v,CHTRKID\nCHATXID  EQUOVR ,,v,CHTRKID\n.*\n.* CHRES - RESERVED (WAS CHVERSN)\nCHSP13   EQUOVR ,,v,CHRES\nCHSP41   EQUOVR ,,v,CHRES\nCHSP42   EQUOVR ,,v,CHRES\nCHSP44   EQUOVR ,,v,CHRES\nCHROALL  EQUOVR ,,v,CHRES\nCHVERID  EQUOVR ,,v,CHRES\n.*\n.* CHSWT - COMMUNICATIONS SWITCHES (OS/VS1)\nCHARSV20 EQUOVR ,,b,CHSWT\nCHJCT    EQUOVR ,,b,CHSWT\nCHPSD    EQUOVR ,,b,CHSWT\nCHPSF    EQUOVR ,,b,CHSWT\nCHAC     EQUOVR ,,b,CHSWT\nCHARSV21 EQUOVR ,,b,CHSWT\nCHARSV22 EQUOVR ,,b,CHSWT\nCHARSV23 EQUOVR ,,b,CHSWT\n.*\n.* CHJBFLGS - FLAGS FOR STARTED JOBS\nCHJBSTRT EQUOVR ,,b,CHJBFLGS\nCHISJOB  EQUOVR ,,b,CHJBFLGS\nCHJBRSV1 EQUOVR ,,b,CHJBFLGS\n.*\n.* CHTYPE - FLAGS\nCHDSTAT  EQUOVR ,,b,CHTYPE\nCHARSV25 EQUOVR ,,b,CHTYPE\nCHARSV26 EQUOVR ,,b,CHTYPE\nCHARSV27 EQUOVR ,,b,CHTYPE\nCHARSV28 EQUOVR ,,b,CHTYPE\nCHARSV29 EQUOVR ,,b,CHTYPE\nCHHIAR   EQUOVR ,,b,CHTYPE\nCHDEF    EQUOVR ,,b,CHTYPE\n.*\n.* CHCSYSO - EXPRESS CANCEL SYSOUT (OS/VS1)\nCHALL    EQUOVR ,,b,CHCSYSO\nCHINN    EQUOVR ,,b,CHCSYSO\nCHOUT    EQUOVR ,,b,CHCSYSO\nCHHOLD   EQUOVR ,,b,CHCSYSO\nCHQUE    EQUOVR ,,b,CHCSYSO\nCHDUMP   EQUOVR ,,b,CHCSYSO\nCHJB     EQUOVR ,,b,CHCSYSO\nCHUSERID EQUOVR ,,b,CHCSYSO\n.*\n.* CHCMFLG1 - SEE XSA FOR DESCRIPTION\nCHCMFL11 EQUOVR ,,b,CHCMFLG1\nCHCMFL12 EQUOVR ,,b,CHCMFLG1\nCHCMFL13 EQUOVR ,,b,CHCMFLG1\nCHCMFL14 EQUOVR ,,b,CHCMFLG1\nCHCMFL15 EQUOVR ,,b,CHCMFLG1\nCHCMFL16 EQUOVR ,,b,CHCMFLG1\nCHCMFL17 EQUOVR ,,b,CHCMFLG1\nCHCMFL18 EQUOVR ,,b,CHCMFLG1\n.*\n.* CHCMFLG2 - SEE XSA FOR DESCRIPTION\nCHCMFL21 EQUOVR ,,b,CHCMFLG2\nCHCMFL22 EQUOVR ,,b,CHCMFLG2\nCHCMFL23 EQUOVR ,,b,CHCMFLG2\nCHCMFL24 EQUOVR ,,b,CHCMFLG2\nCHCMFL25 EQUOVR ,,b,CHCMFLG2\nCHCMFL26 EQUOVR ,,b,CHCMFLG2\nCHCMFL27 EQUOVR ,,b,CHCMFLG2\nCHCMFL28 EQUOVR ,,b,CHCMFLG2\n.*\n.* CHCMFLG4 - SEE XSA FOR DESCRIPTION\nCHCMFL44 EQUOVR ,,b,CHCMFLG4\nCHRTDM   EQUOVR ,,b,CHCMFLG4\nCHNOBY   EQUOVR ,,b,CHCMFLG4\n.*\n.* CHAUTHA - 1ST BYTE OF COMMAND CODE AUTH FLAGS\nCHAUTH1  EQUOVR ,,b,CHAUTHA\nCHAUTH2  EQUOVR ,,b,CHAUTHA\nCHAUTH3  EQUOVR ,,b,CHAUTHA\nCHARES1  EQUOVR ,,b,CHAUTHA\n.*\n.* CHDISP - COMMAND DISPOSITION\nCHDISPA  EQUOVR ,,b,CHDISP\nCHDISPM  EQUOVR ,,b,CHDISP\nCHDISPC  EQUOVR ,,b,CHDISP\nCHDISPR  EQUOVR ,,b,CHDISP\nCHDISPE  EQUOVR ,,b,CHDISP\nCHARES2  EQUOVR ,,b,CHDISP\n.*\n.* CHFLGS - FLAGS\nCHBIGRP  EQUOVR ,,b,CHFLGS\nCHNOALC  EQUOVR ,,b,CHFLGS\n.*\n.* CHRTOKEN - 31 BIT RIGHT JUSTIFIED TOKEN\nCHRTOKHR EQUOVR ,,b,CHRTOKEN\n.*\n.* IEECHAIN macro contains an EJECT with an 'argument'\n         EJECTOVR *NOERR\n.*\n.* IEECHAIN macro does not provide a DSECT statement\nCSCB     DSECT  ,\n.*\n         MNOTE *,'Including IEECHAIN mapping macro'\n         IEECHAIN ,\n         EQUOVR *END\n         EJECTOVR *END\n*\nCSCB     DSECT ,                       * Resume CSCB DSECT\n         ORG\nCSCB_LEN EQU   *-CSCB                  * Length of CSCB\n.*\nCSCX     DSECT ,                       * Resume CSCX DSECT\n         ORG\nCSCX_LEN EQU   *-CSCX                  * Length of CSCX\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPCVT   0100-20096-20096-0111-00293-00293-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Communications Vector Table\n.*\n&LABEL   MAPCVT &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPCVT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPCVT         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'CVT').EMBED\n         AIF   ('&CB' EQ 'CVTVSTGX').EMBED\n         AIF   ('&CB' EQ 'CVTXTNT1').EMBED\n         AIF   ('&CB' EQ 'CVTXTNT2').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPCVT).MEND\n&BXA_MAC_MAPCVT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_CVT\n         GBLC  &BXA_CB_CVTVSTGX\n         GBLC  &BXA_CB_CVTXTNT1\n         GBLC  &BXA_CB_CVTXTNT2\n&BXA_CB_CVT SETC 'CVT'\n&BXA_CB_CVTVSTGX SETC 'CVT'\n&BXA_CB_CVTXTNT1 SETC 'CVT'\n&BXA_CB_CVTXTNT2 SETC 'CVT'\n.*\n.* CVTDCB - OPERATING SYSTEM characteristics\nCVTMVSE  EQUOVR ,,b,CVTDCB\nCVT1SSS  EQUOVR ,,b,CVTDCB\nCVT2SPS  EQUOVR ,,b,CVTDCB\nCVT4MS1  EQUOVR ,,b,CVTDCB\nCVTOSEXT EQUOVR ,,b,CVTDCB\nCVT4MPS  EQUOVR ,,b,CVTDCB\nCVT6DAT  EQUOVR ,,b,CVTDCB\nCVTMVS2  EQUOVR ,,b,CVTDCB\nCVT8AOS2 EQUOVR ,,b,CVTDCB\n.*\n.* CVTOPTA - OPTION INDICATORS\nCVTCCH   EQUOVR ,,b,CVTOPTA\nCVTAPR   EQUOVR ,,b,CVTOPTA\nCVTDDR   EQUOVR ,,b,CVTOPTA\nCVTNIP   EQUOVR ,,b,CVTOPTA\nCVT121TR EQUOVR ,,b,CVTOPTA\nCVTASCII EQUOVR ,,b,CVTOPTA\nCVTXPFP  EQUOVR ,,b,CVTOPTA\n.*\n.* CVTOPTB - MISCELLANEOUS FLAGS\nCVTPROT  EQUOVR ,,b,CVTOPTB\nCVTCTIMS EQUOVR ,,b,CVTOPTB\nCVTTOD   EQUOVR ,,b,CVTOPTB\nCVTNLOG  EQUOVR ,,b,CVTOPTB\nCVTAPTHR EQUOVR ,,b,CVTOPTB\nCVTFP    EQUOVR ,,b,CVTOPTB\nCVTVS1A  EQUOVR ,,b,CVTOPTB\nCVTVS1B  EQUOVR ,,b,CVTOPTB\n.*\n.* CVTGTFST - GTF FLAG BYTES\nCVTGTFAV EQUOVR ,,b,CVTGTFST\nCVTSPD   EQUOVR ,,b,CVTGTFST\nCVTWSPR  EQUOVR ,,b,CVTGTFST\nCVTUSR   EQUOVR ,,b,CVTGTFST\nCVTRNIO  EQUOVR ,,b,CVTGTFST\n.*\n.* CVTTCMFG - TCAM FLAGS\nCVTTCRDY EQUOVR ,,b,CVTTCMFG\nCVTLDEV  EQUOVR ,,b,CVTTCMFG\nCVTNWTCM EQUOVR ,,b,CVTTCMFG\n.*\n.* CVTDMSRF - OPEN/CLOSE/EOV FLAG BYTE.\nCVTSDUMP EQUOVR ,,b,CVTDMSRF\nCVTUDUMP EQUOVR ,,b,CVTDMSRF\n.*\n.* CVTDIRST - FLAG BYTE\nCVTDICOM EQUOVR ,,b,CVTDIRST\n.*\n.* CVTSYLK - SUPERVISOR LOCK.\nCVTSYLKS EQUOVR ,,v,CVTSYLK\nCVTSYLKR EQUOVR ,,v,CVTSYLK\n.*\n.* CVTFLAG1 - FLAG BYTE\nCVTRSMWD EQUOVR ,,b,CVTFLAG1\nCVTSVPRC EQUOVR ,,b,CVTFLAG1\nCVTCUSE  EQUOVR ,,b,CVTFLAG1\nCVTMVPG  EQUOVR ,,b,CVTFLAG1\nCVTOVER  EQUOVR ,,b,CVTFLAG1\nCVTCSTR  EQUOVR ,,b,CVTFLAG1\nCVTSUBSP EQUOVR ,,b,CVTFLAG1\nCVTKPAR  EQUOVR ,,b,CVTFLAG1\n.*\n.* CVTFLAG2 - FLAG BYTE\nCVTCMPSC EQUOVR ,,b,CVTFLAG2\nCVTCMPSH EQUOVR ,,b,CVTFLAG2\nCVTSOPF  EQUOVR ,,b,CVTFLAG2\nCVTBFPH  EQUOVR ,,b,CVTFLAG2\nCVTPER2  EQUOVR ,,b,CVTFLAG2\n.*\n.* CVTCTLFG - SYSTEM CONTROL FLAGS\nCVTDSTAT EQUOVR ,,b,CVTCTLFG\nCVTNOMP  EQUOVR ,,b,CVTCTLFG\nCVTGTRCE EQUOVR ,,b,CVTCTLFG\nCVTSDTRC EQUOVR ,,b,CVTCTLFG\n.*\n.* CVTGRSST - GRS status.\nCVTE51GN EQUOVR ,,b,CVTGRSST\nCVTE51LN EQUOVR ,,b,CVTGRSST\n.*\n.* CVTMFRTR - ADDRESS OF MEASUREMENT FACILITY ROUTINE\nCVTMFACT EQUOVR ,,b,CVTMFRTR\n.*\n.* CVTGSDA - ADDRESS OF GLOBAL SYSTEM DUPLEX AREA\nCVTGSDAB EQUOVR ,,b,CVTGSDA\n.*\n.* CVTFUNC - Reserved for solution/offering use.\nCVTSOLN  EQUOVR ,,b,CVTFUNC\n.*\n.* CVTXAFL - FLAG BYTE FOR MVS/XA PROCESSING.\nCVTCSRIM EQUOVR ,,b,CVTXAFL\n.*\n.* CVTOSLV0 - BYTE 0 OF CVTOSLVL\nCVTH3310 EQUOVR ,,b,CVTOSLV0\nCVTESA   EQUOVR ,,b,CVTOSLV0\nCVTXAX   EQUOVR ,,b,CVTOSLV0\nCVTH4420 EQUOVR ,,b,CVTOSLV0\nCVTJ3313 EQUOVR ,,b,CVTOSLV0\nCVTJ3311 EQUOVR ,,b,CVTOSLV0\nCVTHIPER EQUOVR ,,b,CVTOSLV0\nCVTH4410 EQUOVR ,,b,CVTOSLV0\nCVTLKR   EQUOVR ,,b,CVTOSLV0\nCVTUCBSV EQUOVR ,,b,CVTOSLV0\nCVTCADS  EQUOVR ,,b,CVTOSLV0\nCVTCRPTL EQUOVR ,,b,CVTOSLV0\nCVTJ4422 EQUOVR ,,b,CVTOSLV0\n.*\n.* CVTOSLV1 - BYTE 1 OF CVTOSLVL\nCVTH4430 EQUOVR ,,b,CVTOSLV1\nCVTDYAPF EQUOVR ,,b,CVTOSLV1\nCVTWLM   EQUOVR ,,b,CVTOSLV1\nCVTH5510 EQUOVR ,,b,CVTOSLV1\nCVTDYNEX EQUOVR ,,b,CVTOSLV1\nCVTH5520 EQUOVR ,,b,CVTOSLV1\nCVTENCLV EQUOVR ,,b,CVTOSLV1\nCVTJ5522 EQUOVR ,,b,CVTOSLV1\nCVTH5530 EQUOVR ,,b,CVTOSLV1\nCVTH6603 EQUOVR ,,b,CVTOSLV1\nCVTOS390_010300 EQUOVR ,,b,CVTOSLV1\nCVTOS390_R3     EQUOVR ,,b,CVTOSLV1\nCVTDYNL  EQUOVR ,,b,CVTOSLV1\nCVTH6601 EQUOVR ,,b,CVTOSLV1\nCVTOS390 EQUOVR ,,b,CVTOSLV1\nCVTOS390_010100 EQUOVR ,,b,CVTOSLV1\nCVTOS390_R1     EQUOVR ,,b,CVTOSLV1\nCVTPRDED EQUOVR ,,b,CVTOSLV1\nCVTJ6602 EQUOVR ,,b,CVTOSLV1\nCVTOS390_010200 EQUOVR ,,b,CVTOSLV1\nCVTOS390_R2     EQUOVR ,,b,CVTOSLV1\nCVTPARMC EQUOVR ,,b,CVTOSLV1\n.*\n.* CVTOSLV2 - BYTE 2 OF CVTOSLVL\nCVTOS390_010400 EQUOVR ,,b,CVTOSLV2\nCVTOS390_020400 EQUOVR ,,b,CVTOSLV2\nCVTOS390_R4     EQUOVR ,,b,CVTOSLV2\nCVTJ6604 EQUOVR ,,b,CVTOSLV2\nCVTDYLPA EQUOVR ,,b,CVTOSLV2\nCVTRTLS  EQUOVR ,,b,CVTOSLV2\nCVTOS390_020500 EQUOVR ,,b,CVTOSLV2\nCVTOS390_R5     EQUOVR ,,b,CVTOSLV2\nCVTH6605 EQUOVR ,,b,CVTOSLV2\nCVTOS390_020600 EQUOVR ,,b,CVTOSLV2\nCVTOS390_R6     EQUOVR ,,b,CVTOSLV2\nCVTH6606 EQUOVR ,,b,CVTOSLV2\nCVTBFP   EQUOVR ,,b,CVTOSLV2\n.*\n.* CVTFLGBT - FLAG BYTE (OS/VS1)\nCVTNPE   EQUOVR ,,b,CVTFLGBT\nCVTVME   EQUOVR ,,b,CVTFLGBT\nCVTBAH   EQUOVR ,,b,CVTFLGBT\n.*\n.* CVTAVVT - ADDRESS OF AVM CONTROL BLOCK\nCVTAVIN  EQUOVR ,,b,CVTAVVT\n.*\n.* CVTFBYT1 - FLAG BYTE\nCVTRDE   EQUOVR ,,b,CVTFBYT1\n.*\n.* CVTATCVT - POINTER TO VTAM'S CVT\nCVTATACT EQUOVR ,,b,CVTATCVT\n.*\n.* CVT-macro contains a constant, which is defined outside its DSECT\nCVTFIX   DSECT ,                       * Reset to CVT DSECT\n         MNOTE *,'Including CVT mapping macro'\n         CVT   DSECT=YES,              * Generate CVT                  *\n               PREFIX=YES,             * with prefix area              *\n               LIST=YES                * and unchanged PRINT option\n         EQUOVR *END\n*\nCVTFIX   DSECT ,                       * Reset to CVT prefix\nCVT      EQU   CVTMAP                  * For USINGs\n         ORG\nCVTFIX_LEN EQU CVT-CVTFIX              * Length of CVT prefix\nCVT_LEN  EQU   *-CVT                   * Length of CVT proper\n*\nCVTVSTGX DSECT ,                       * Reset to CVTVSTGX DSECT\n         ORG\nCVTVSTGX_LEN EQU *-CVTVSTGX            * Length of CVTVSTGX\n*\nCVTXTNT1 DSECT ,                       * Reset to OS/VS extension\n         ORG\nCVTXTNT1_LEN EQU *-CVTXTNT1            * Length of CVTXTNT1\n*\nCVTXTNT2 DSECT ,                       * Reset to OS/VS2 extension\n         ORG\nCVTXTNT2_LEN EQU *-CVTXTNT2            * Length of CVTXTNT2\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDCB   0100-20096-20096-0111-00798-00798-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Control Block\n.* The DCB must be located below 16M\n.*\n&LABEL   MAPDCB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDCB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDCB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'BDW').EMBED\n         AIF   ('&CB' EQ 'DCB').EMBED\n         AIF   ('&CB' EQ 'RDW').EMBED\n         AIF   ('&CB' EQ 'SDW').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDCB).MEND\n&BXA_MAC_MAPDCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_BDW\n         GBLC  &BXA_CB_DCB\n         GBLC  &BXA_CB_RDW\n         GBLC  &BXA_CB_SDW\n&BXA_CB_BDW SETC 'DCB'\n&BXA_CB_DCB SETC 'DCB'\n&BXA_CB_RDW SETC 'DCB'\n&BXA_CB_SDW SETC 'DCB'\n.*\n.* To be able to refer to DCBDEVT on overridden EQU statements, the\n.* field must be defined prior to the assignment of code-values to\n.* EQUated symbols. The following DSOVR statements move its\n.* definition to an appropriate place.\nDCBDVTBA+2 DSOVR *NEWNAME,DCBDEVT      * Name second unlabeled DS after*\n                                       * the DCBDVTBA label\nDCBDEVT  DSOVR *NEWNAME,*NONAME        * Remove label from the original*\n                                       * DCBDEVT-defining statement\n.*\n.* Declare code-values for device types\nDCBDV311 EQUOVR ,,v,DCBDEVT\nDCBDV301 EQUOVR ,,v,DCBDEVT\nDCBDV303 EQUOVR ,,v,DCBDEVT\nDCBDV345 EQUOVR ,,v,DCBDEVT\nDCBDV321 EQUOVR ,,v,DCBDEVT\nDCBD1305 EQUOVR ,,v,DCBDEVT\nDCBDV305 EQUOVR ,,v,DCBDEVT\nDCBDV314 EQUOVR ,,v,DCBDEVT\nDCBDV330 EQUOVR ,,v,DCBDEVT\nDCBDV340 EQUOVR ,,v,DCBDEVT\nDCBDV350 EQUOVR ,,v,DCBDEVT\nDCBDV375 EQUOVR ,,v,DCBDEVT\nDCBDV331 EQUOVR ,,v,DCBDEVT\nDCBDV380 EQUOVR ,,v,DCBDEVT\nDCBDV390 EQUOVR ,,v,DCBDEVT\n.*\n.* Declare code-values for tape recording technique\nDCBMTE   EQUOVR ,,v,DCBTRTCH\nDCBMTT   EQUOVR ,,v,DCBTRTCH\nDCBMTC   EQUOVR ,,v,DCBTRTCH\nDCBMTET  EQUOVR ,,v,DCBTRTCH\nDCBCMPAC EQUOVR ,,v,DCBTRTCH\nDCBNOPAC EQUOVR ,,v,DCBTRTCH\n.*\n.* Declare code-values for device types\nDCBDVMT  EQUOVR ,,v,DCBDEVT\nDCBDVMT2 EQUOVR ,,v,DCBDEVT\nDCBDVMT3 EQUOVR ,,v,DCBDEVT\nDCBDVMT4 EQUOVR ,,v,DCBDEVT\n.*\n.* Declare code-values for tape density\nDCBMTDN0 EQUOVR ,,v,DCBDEN\nDCBMTDN1 EQUOVR ,,v,DCBDEN\nDCBMTDN2 EQUOVR ,,v,DCBDEN\nDCBMTDN3 EQUOVR ,,v,DCBDEN\nDCBMTDN4 EQUOVR ,,v,DCBDEN\n.*\n.* Declare bit-fields for paper tape translate table\nDCBPTCDN EQUOVR ,,b,DCBCODE\nDCBPTCDI EQUOVR ,,b,DCBCODE\nDCBPTCDF EQUOVR ,,b,DCBCODE\nDCBPTCDB EQUOVR ,,b,DCBCODE\nDCBPTCDC EQUOVR ,,b,DCBCODE\nDCBPTCDA EQUOVR ,,b,DCBCODE\nDCBPTCDT EQUOVR ,,b,DCBCODE\n.*\n.* Declare code-values for device types\nDCBDVPTP EQUOVR ,,v,DCBDEVT\n.*\n.* Declare bit-fields for paper tape flags\nDCBPTIC  EQUOVR ,,b,DCBPTFLG\nDCBPTECT EQUOVR ,,b,DCBPTFLG\nDCBPTECR EQUOVR ,,b,DCBPTFLG\nDCBPTUCT EQUOVR ,,b,DCBPTFLG\nDCBPTERR EQUOVR ,,b,DCBPTFLG\n.*\n.* Declare code-values for printer spacing\nDCBPRSP0 EQUOVR ,,v,DCBPRTSP\nDCBPRSP1 EQUOVR ,,v,DCBPRTSP\nDCBPRSP2 EQUOVR ,,v,DCBPRTSP\nDCBPRSP3 EQUOVR ,,v,DCBPRTSP\n.*\n.* Declare code-values for device types\nDCBDVPR1 EQUOVR ,,v,DCBDEVT\nDCBDVPR2 EQUOVR ,,v,DCBDEVT\nDCBDVPR3 EQUOVR ,,v,DCBDEVT\nDCBDVPR4 EQUOVR ,,v,DCBDEVT\nDCBDVPRT EQUOVR ,,v,DCBDEVT\nDCBDVPR5 EQUOVR ,,v,DCBDEVT\n.*\n.* Declare code-values for printer overflow\nDCBPRC9  EQUOVR ,,v,DCBPRTOV\nDCBPRC12 EQUOVR ,,v,DCBPRTOV\n.*\n.* Declare bit-fields for printer byte\nDCBTRCID EQUOVR ,,b,DCBPRBYT\n.*\n.* Declare bit-fields for stacker select\nDCBMODEC EQUOVR ,,b,DCBSTACK\nDCBMODEE EQUOVR ,,b,DCBSTACK\nDCBMODEO EQUOVR ,,b,DCBSTACK\nDCBMODER EQUOVR ,,b,DCBSTACK\nDCBSTCK2 EQUOVR ,,b,DCBSTACK\nDCBSTCK1 EQUOVR ,,b,DCBSTACK\n.*\n.* Declare code-values for device types\nDCBDVCR0 EQUOVR ,,v,DCBDEVT\nDCBDVCP0 EQUOVR ,,v,DCBDEVT\nDCBDVCRP EQUOVR ,,v,DCBDEVT\nDCBDVCR1 EQUOVR ,,v,DCBDEVT\nDCBDVCPR EQUOVR ,,v,DCBDEVT\nDCBDVCR2 EQUOVR ,,v,DCBDEVT\nDCBDVCP1 EQUOVR ,,v,DCBDEVT\n.*\n.* Declare function indicator bits\nDCBFNCBI EQUOVR ,,b,DCBFUNC\nDCBFNCBR EQUOVR ,,b,DCBFUNC\nDCBFNCBP EQUOVR ,,b,DCBFUNC\nDCBFNCBW EQUOVR ,,b,DCBFUNC\nDCBFNCBD EQUOVR ,,b,DCBFUNC\nDCBFNCBX EQUOVR ,,b,DCBFUNC\nDCBFNCBT EQUOVR ,,b,DCBFUNC\n.*\n.* Declare bit-fields for WTT flags\nDCBBQWRU EQUOVR ,,b,DCBBQFLG\nDCBBQIAM EQUOVR ,,b,DCBBQFLG\nDCBBQWRS EQUOVR ,,b,DCBBQFLG\nDCBBQWRE EQUOVR ,,b,DCBBQFLG\n.*\n.* Declare bit-fields for optical reader flags\nDCBEOPFG EQUOVR ,,b,DCBORFLG\n.*\n.* Declare bit-fields for optical reader byte\nDCBORSYN EQUOVR ,,b,DCBORBYT\nDCBOREOF EQUOVR ,,b,DCBORBYT\nDCBORBFP EQUOVR ,,b,DCBORBYT\n.*\n.* Declare code-values for device types\nDCBDVOR5 EQUOVR ,,v,DCBDEVT\nDCBDVOR7 EQUOVR ,,v,DCBDEVT\nDCBDVOR8 EQUOVR ,,v,DCBDEVT\nDCBDVOR9 EQUOVR ,,v,DCBDEVT\n.*\n.* Declare error indicator bits\nDCBORNRM EQUOVR ,,b,DCBEIB\nDCBORREJ EQUOVR ,,b,DCBEIB\nDCBORERR EQUOVR ,,b,DCBEIB\nDCBORECK EQUOVR ,,b,DCBEIB\nDCBORWLR EQUOVR ,,b,DCBEIB\nDCBORHPR EQUOVR ,,b,DCBEIB\nDCBORDCK EQUOVR ,,b,DCBEIB\n.*\n.* Declare bit-fields for indicator and counter byte\nDCBMRDCT EQUOVR ,,b,DCBMRIND\nDCBMRSCU EQUOVR ,,b,DCBMRIND\nDCBMRPLO EQUOVR ,,b,DCBMRIND\nDCBMRPLS EQUOVR ,,b,DCBMRIND\nDCBMRERP EQUOVR ,,b,DCBMRIND\nDCBMRERS EQUOVR ,,b,DCBMRIND\n.*\n.* Declare bit-fields for magnetic reader flag byte\nDCBMRSCC EQUOVR ,,b,DCBMRFLG\nDCBMRDBG EQUOVR ,,b,DCBMRFLG\nDCBMRDRU EQUOVR ,,b,DCBMRFLG\nDCBMRDR  EQUOVR ,,b,DCBMRFLG\nDCBMRPCC EQUOVR ,,b,DCBMRFLG\nDCBMRDWT EQUOVR ,,b,DCBMRFLG\nDCBMRUE  EQUOVR ,,b,DCBMRFLG\n.*\n.* Declare code-values for device types\nDCBDVMR  EQUOVR ,,v,DCBDEVT\nDCBDVORS EQUOVR ,,v,DCBDEVT\nDCBDVMRS EQUOVR ,,v,DCBDEVT\nDCBDVDRI EQUOVR ,,v,DCBDEVT\n.*\n.* Declare code-values for device types\nDCBDVTRM EQUOVR ,,v,DCBDEVT\n.*\n.* Declare bit-fields for data set organisation\nDCBDSGIS EQUOVR ,,b,DCBDSRG1\nDCBDSGPS EQUOVR ,,b,DCBDSRG1\nDCBDSGDA EQUOVR ,,b,DCBDSRG1\nDCBDSGCX EQUOVR ,,b,DCBDSRG1\nDCBDSGPO EQUOVR ,,b,DCBDSRG1\nDCBDSGU  EQUOVR ,,b,DCBDSRG1\n.*\nDCBDSGGS EQUOVR ,,b,DCBDSRG2\nDCBDSGTX EQUOVR ,,b,DCBDSRG2\nDCBDSGTQ EQUOVR ,,b,DCBDSRG2\nDCBACBM  EQUOVR ,,b,DCBDSRG2\nDCBDSGTR EQUOVR ,,b,DCBDSRG2\n.*\n.* Declare bit fields for QSAM LRI update processing\nDCB1DVDS EQUOVR ,,b,DCBQSLM\nDCBUPDCM EQUOVR ,,b,DCBQSLM\nDCBUPDBT EQUOVR ,,b,DCBQSLM\nDCBUPDT  EQUOVR ,,b,DCBQSLM\nDCBNUPD  EQUOVR ,,b,DCBQSLM\nDCBSVDEB EQUOVR ,,b,DCBQSLM\n.*\n.* Declare hierarchy bit\nDCBH1    EQUOVR ,,b,DCBHIARC\nDCBH0    EQUOVR ,,b,DCBHIARC\n.*\n.* Declare bit-fields for buffering technique\nDCBBFT   EQUOVR ,,b,DCBBFTEK\nDCBBFTA  EQUOVR ,,b,DCBBFTEK\nDCBBFTR  EQUOVR ,,b,DCBBFTEK\nDCBBFTS  EQUOVR ,,b,DCBBFTEK\nDCBBFTKR EQUOVR ,,b,DCBBFTEK\nDCBBFTE  EQUOVR ,,b,DCBBFTEK\nDCBBFTKD EQUOVR ,,b,DCBBFTEK\nDCBBFTK  EQUOVR ,,b,DCBBFTEK\nDCBBXLRI EQUOVR ,,b,DCBBFTEK\n.*\n.* Declare bit-fields for buffering alignment\nDCBBFA   EQUOVR ,,b,DCBBFALN\nDCBBFAD  EQUOVR ,,b,DCBBFALN\nDCBBFAF1 EQUOVR ,,b,DCBBFALN\nDCBBFAF2 EQUOVR ,,b,DCBBFALN\n.*\n.* Declare bit-fields for record format\nDCBRECLA EQUOVR ,,b,DCBRECFM\nDCBRECD  EQUOVR ,,b,DCBRECFM\nDCBRECL  EQUOVR ,,b,DCBRECFM\nDCBRECF  EQUOVR ,,b,DCBRECFM\nDCBRECV  EQUOVR ,,b,DCBRECFM\nDCBRECU  EQUOVR ,,b,DCBRECFM\nDCBRECTO EQUOVR ,,b,DCBRECFM\nDCBRECBR EQUOVR ,,b,DCBRECFM\nDCBRECSB EQUOVR ,,b,DCBRECFM\nDCBRECCC EQUOVR ,,b,DCBRECFM\nDCBRECCA EQUOVR ,,b,DCBRECFM\nDCBRECCM EQUOVR ,,b,DCBRECFM\nDCBRECKL EQUOVR ,,b,DCBRECFM\n.*\n.* Declare bit-fields for error recording option\nDCBERPT  EQUOVR ,,b,DCBERROP\nDCBERPC  EQUOVR ,,b,DCBERROP\nDCBERPW  EQUOVR ,,b,DCBERROP\nDCBERPR  EQUOVR ,,b,DCBERROP\nDCBERPN  EQUOVR ,,b,DCBERROP\n.*\n.* Declare bits for program-controlled interruption handling\nDCBPCIX1 EQUOVR ,,b,DCBPCI\nDCBPCIX2 EQUOVR ,,b,DCBPCI\nDCBPCIA1 EQUOVR ,,b,DCBPCI\nDCBPCIA2 EQUOVR ,,b,DCBPCI\nDCBPCIN1 EQUOVR ,,b,DCBPCI\nDCBPCIN2 EQUOVR ,,b,DCBPCI\nDCBPCIR1 EQUOVR ,,b,DCBPCI\nDCBPCIR2 EQUOVR ,,b,DCBPCI\n.*\n.* Declare communication priority bits\nDCBCPR   EQUOVR ,,b,DCBCPRI\nDCBCPE   EQUOVR ,,b,DCBCPRI\nDCBCPS   EQUOVR ,,b,DCBCPRI\n.*\n.* Declare bit-fields for status byte\nDCBAUTOI EQUOVR ,,b,DCBTRSTA\nDCBAUTOD EQUOVR ,,b,DCBTRSTA\nDCBINITL EQUOVR ,,b,DCBTRSTA\nDCBRSTRT EQUOVR ,,b,DCBTRSTA\nDCBIPLED EQUOVR ,,b,DCBTRSTA\nDCBBAKUP EQUOVR ,,b,DCBTRSTA\nDCBNIDLE EQUOVR ,,b,DCBTRSTA\nDCBCHNGL EQUOVR ,,b,DCBTRSTA\n.*\n.* Declare open flags\nDCBOFLWR EQUOVR ,,b,DCBOFLGS\nDCBOFIOD EQUOVR ,,b,DCBOFLGS\nDCBOFLRB EQUOVR ,,b,DCBOFLGS\nDCBOFEOV EQUOVR ,,b,DCBOFLGS\nDCBOFOPN EQUOVR ,,b,DCBOFLGS\nDCBOFPPC EQUOVR ,,b,DCBOFLGS\nDCBOFTM  EQUOVR ,,b,DCBOFLGS\nDCBOFUEX EQUOVR ,,b,DCBOFLGS\nDCBOLOCK EQUOVR ,,b,DCBOFLGS\nDCBOFIOF EQUOVR ,,b,DCBOFLGS\nDCBOBUSY EQUOVR ,,b,DCBOFLGS\n.*\n.* Declare IOS flags\nDCBIBEC  EQUOVR ,,b,DCBIFLG\nDCBIFNEP EQUOVR ,,v,DCBIFLG\nDCBEX    EQUOVR ,,b,DCBIFLG\nDCBIFPEC EQUOVR ,,b,DCBIFLG\nDCBIBPCT EQUOVR ,,b,DCBIFLG\nDCBIFC9  EQUOVR ,,b,DCBIFLG\nDCBIFC12 EQUOVR ,,b,DCBIFLG\nDCBIBIOE EQUOVR ,,b,DCBIFLG\nDCBIFER  EQUOVR ,,v,DCBIFLG\nDCBIFNE1 EQUOVR ,,b,DCBIFLG\nDCBIFTIM EQUOVR ,,b,DCBIFLG\nDCBIFNE2 EQUOVR ,,b,DCBIFLG\nDCBIFNE3 EQUOVR ,,b,DCBIFLG\n.*\n.* Declare bit-fields for macro reference\nDCBMRECP EQUOVR ,,b,DCBMACR1\nDCBMRFE  EQUOVR ,,b,DCBMACR1\nDCBMRGET EQUOVR ,,b,DCBMACR1\nDCBMRPTQ EQUOVR ,,b,DCBMACR1\nDCBMRAPG EQUOVR ,,b,DCBMACR1\nDCBMRRD  EQUOVR ,,b,DCBMACR1\nDCBMRWRQ EQUOVR ,,b,DCBMACR1\nDCBMRCI  EQUOVR ,,b,DCBMACR1\nDCBMRMVG EQUOVR ,,b,DCBMACR1\nDCBMRRDK EQUOVR ,,b,DCBMACR1\nDCBMRLCG EQUOVR ,,b,DCBMACR1\nDCBMRRDI EQUOVR ,,b,DCBMACR1\nDCBMRABC EQUOVR ,,b,DCBMACR1\nDCBMRPT1 EQUOVR ,,b,DCBMACR1\nDCBMRSBG EQUOVR ,,b,DCBMACR1\nDCBMRDBF EQUOVR ,,b,DCBMACR1\nDCBPGFXA EQUOVR ,,b,DCBMACR1\nDCBMRCRL EQUOVR ,,b,DCBMACR1\nDCBMRCHK EQUOVR ,,b,DCBMACR1\nDCBMRRDX EQUOVR ,,b,DCBMACR1\nDCBMRDMG EQUOVR ,,b,DCBMACR1\nDCBMRCK  EQUOVR ,,b,DCBMACR1\n.*\nDCBMRSTL EQUOVR ,,b,DCBMACR2\nDCBMRPUT EQUOVR ,,b,DCBMACR2\nDCBMRGTQ EQUOVR ,,b,DCBMACR2\nDCBMRWRT EQUOVR ,,b,DCBMACR2\nDCBMRRDQ EQUOVR ,,b,DCBMACR2\nDCBMRMVP EQUOVR ,,b,DCBMACR2\nDCBMRWRK EQUOVR ,,b,DCBMACR2\nDCBMR5WD EQUOVR ,,b,DCBMACR2\nDCBMRLDM EQUOVR ,,b,DCBMACR2\nDCBMRLCP EQUOVR ,,b,DCBMACR2\nDCBMRIDW EQUOVR ,,b,DCBMACR2\nDCBMR4WD EQUOVR ,,b,DCBMACR2\nDCBMRPT2 EQUOVR ,,b,DCBMACR2\nDCBMRTMD EQUOVR ,,b,DCBMACR2\nDCBMRUIP EQUOVR ,,b,DCBMACR2\nDCBMR3WD EQUOVR ,,b,DCBMACR2\nDCBMRCTL EQUOVR ,,b,DCBMACR2\nDCBMRSTK EQUOVR ,,b,DCBMACR2\nDCBMRAWR EQUOVR ,,b,DCBMACR2\nDCBMR1WD EQUOVR ,,b,DCBMACR2\nDCBMRSWA EQUOVR ,,b,DCBMACR2\nDCBMRDMD EQUOVR ,,b,DCBMACR2\nDCBMRSTI EQUOVR ,,b,DCBMACR2\n.*\n.* DCBMACF1 - FIRST BYTE OF DCBMACRF\nDCBMFECP EQUOVR ,,b,DCBMACF1\nDCBMFFE  EQUOVR ,,b,DCBMACF1\nDCBMFGET EQUOVR ,,b,DCBMACF1\nDCBMFPTQ EQUOVR ,,b,DCBMACF1\nDCBMFAPG EQUOVR ,,b,DCBMACF1\nDCBMFRD  EQUOVR ,,b,DCBMACF1\nDCBMFWRQ EQUOVR ,,b,DCBMACF1\nDCBMFCI  EQUOVR ,,b,DCBMACF1\nDCBMFMVG EQUOVR ,,b,DCBMACF1\nDCBMFRDK EQUOVR ,,b,DCBMACF1\nDCBMFLCG EQUOVR ,,b,DCBMACF1\nDCBMFRDI EQUOVR ,,b,DCBMACF1\nDCBMFABC EQUOVR ,,b,DCBMACF1\nDCBMFPT1 EQUOVR ,,b,DCBMACF1\nDCBMFSBG EQUOVR ,,b,DCBMACF1\nDCBMFDBF EQUOVR ,,b,DCBMACF1\nDCBMFFXA EQUOVR ,,b,DCBMACF1\nDCBMFCRL EQUOVR ,,b,DCBMACF1\nDCBMFCHK EQUOVR ,,b,DCBMACF1\nDCBMFRDX EQUOVR ,,b,DCBMACF1\nDCBMFDMG EQUOVR ,,b,DCBMACF1\nDCBMFCK  EQUOVR ,,b,DCBMACF1\n.*\n.* DCBMACF2 - SECOND BYTE OF DCBMACRF\nDCBMFSTL EQUOVR ,,b,DCBMACF2\nDCBMFPUT EQUOVR ,,b,DCBMACF2\nDCBMFGTQ EQUOVR ,,b,DCBMACF2\nDCBMFWRT EQUOVR ,,b,DCBMACF2\nDCBMFRDQ EQUOVR ,,b,DCBMACF2\nDCBMFMVP EQUOVR ,,b,DCBMACF2\nDCBMFWRK EQUOVR ,,b,DCBMACF2\nDCBMF5WD EQUOVR ,,b,DCBMACF2\nDCBMFLDM EQUOVR ,,b,DCBMACF2\nDCBMFLCP EQUOVR ,,b,DCBMACF2\nDCBMFIDW EQUOVR ,,b,DCBMACF2\nDCBMF4WD EQUOVR ,,b,DCBMACF2\nDCBMFPT2 EQUOVR ,,b,DCBMACF2\nDCBMFTMD EQUOVR ,,b,DCBMACF2\nDCBMFUIP EQUOVR ,,b,DCBMACF2\nDCBMF3WD EQUOVR ,,b,DCBMACF2\nDCBMFCTL EQUOVR ,,b,DCBMACF2\nDCBMFSTK EQUOVR ,,b,DCBMACF2\nDCBMFAWR EQUOVR ,,b,DCBMACF2\nDCBMF1WD EQUOVR ,,b,DCBMACF2\nDCBMFSWA EQUOVR ,,b,DCBMACF2\nDCBMFDMD EQUOVR ,,b,DCBMACF2\nDCBMFSTI EQUOVR ,,b,DCBMACF2\n.*\n.* Declare IOS flags\nDCBIFEC  EQUOVR ,,b,DCBIFLGS\nDCBIFPCT EQUOVR ,,b,DCBIFLGS\nDCBIFIOE EQUOVR ,,b,DCBIFLGS\nDCBIFLDT EQUOVR ,,b,DCBIFLGS\n.*\n.* Declare bits for communication interface type\nDCBINVB1 EQUOVR ,,b,DCBINVCI\nDCBINVB2 EQUOVR ,,b,DCBINVCI\n.*\n.* Declare bits for ISAM option codes\nDCBOPTUF EQUOVR ,,b,DCBOPTCD\nDCBOPTM  EQUOVR ,,b,DCBOPTCD\nDCBOPTI  EQUOVR ,,b,DCBOPTCD\nDCBOPTY  EQUOVR ,,b,DCBOPTCD\nDCBOPTL  EQUOVR ,,b,DCBOPTCD\nDCBOPTR  EQUOVR ,,b,DCBOPTCD\n.*\n.* Declare bits for ISAM additional macro reference\nDCBMACUR EQUOVR ,,b,DCBMAC\nDCBMACUW EQUOVR ,,b,DCBMAC\nDCBMACAW EQUOVR ,,b,DCBMAC\nDCBMACRE EQUOVR ,,b,DCBMAC\n.*\n.* Declare bits for exceptional condition codes\nDCBEXNKY EQUOVR ,,b,DCBEXCD1\nDCBEXIDA EQUOVR ,,b,DCBEXCD1\nDCBEXNSP EQUOVR ,,b,DCBEXCD1\nDCBEXINV EQUOVR ,,b,DCBEXCD1\nDCBEXIER EQUOVR ,,b,DCBEXCD1\nDCBEXOER EQUOVR ,,b,DCBEXCD1\nDCBEXBLI EQUOVR ,,b,DCBEXCD1\nDCBEXBLU EQUOVR ,,b,DCBEXCD1\n.*\nDCBEXSEQ EQUOVR ,,b,DCBEXCD2\nDCBEXDUP EQUOVR ,,b,DCBEXCD2\nDCBEXCLD EQUOVR ,,b,DCBEXCD2\nDCBEXOFL EQUOVR ,,b,DCBEXCD2\nDCBEXLTH EQUOVR ,,b,DCBEXCD2\nDCBEXRDE EQUOVR ,,b,DCBEXCD2\n.*\n.* Declare code-values for '2301 or not'\nDCBHMDRM EQUOVR ,,v,DCBHMASK\nDCBHMNDM EQUOVR ,,v,DCBHMASK\n.*\n.* Declare bits for ISAM status indicators\nDCBSTSSM EQUOVR ,,b,DCBST\nDCBSTKSQ EQUOVR ,,b,DCBST\nDCBSTLOD EQUOVR ,,b,DCBST\nDCBSTNCY EQUOVR ,,b,DCBST\nDCBSTNMC EQUOVR ,,b,DCBST\nDCBSTLBF EQUOVR ,,b,DCBST\nDCBSTLTF EQUOVR ,,b,DCBST\n.*\n.* Declare code-values for overflow device\nDCBDVI01 EQUOVR ,,v,DCBOVDEV\nDCBDVI03 EQUOVR ,,v,DCBOVDEV\nDCBDVI02 EQUOVR ,,v,DCBOVDEV\nDCBDVI05 EQUOVR ,,v,DCBOVDEV\nDCBDVI14 EQUOVR ,,v,DCBOVDEV\nDCBDVI30 EQUOVR ,,v,DCBOVDEV\n.*\n.* Declare bits for BDAM option codes\nDCBOPTTO EQUOVR ,,b,DCBOPTCD\nDCBOPTE  EQUOVR ,,b,DCBOPTCD\nDCBOPTF  EQUOVR ,,b,DCBOPTCD\nDCBOPTA  EQUOVR ,,b,DCBOPTCD\nDCBOPTDB EQUOVR ,,b,DCBOPTCD\nDCBOPTRE EQUOVR ,,b,DCBOPTCD\nDCBOPTRB EQUOVR ,,b,DCBOPTCD\n.*\n.* Declare bit-fields for QTAM adapter type\nDCBCPWTT EQUOVR ,,b,DCBPLBYT\n.*\n.* Declare bits for TCAM option codes\nDCBOPTWP EQUOVR ,,b,DCBOPTCD\nDCBOPTUM EQUOVR ,,b,DCBOPTCD\nDCBOPTCB EQUOVR ,,b,DCBOPTCD\nDCBOPTCP EQUOVR ,,b,DCBOPTCD\nDCBOPTIM EQUOVR ,,b,DCBOPTCD\nDCBOPTRM EQUOVR ,,b,DCBOPTCD\n.*\n.* Declare ready queue indicators\nDCBRDYPO EQUOVR ,,b,DCBRDYI\nDCBRDYIQ EQUOVR ,,b,DCBRDYI\nDCBRDYIZ EQUOVR ,,b,DCBRDYI\n.*\n.* Declare bits for BSC transmission mode\nDCBXMIBC EQUOVR ,,b,DCBXMODE\nDCBXMDA1 EQUOVR ,,b,DCBXMODE\nDCBXMDA2 EQUOVR ,,b,DCBXMODE\n.*\n.* Declare bits for BSC control flag\nDCBXCCSF EQUOVR ,,b,DCBXCODE\nDCBXCPTP EQUOVR ,,b,DCBXCODE\nDCBXCTR1 EQUOVR ,,b,DCBXCODE\nDCBXCAS1 EQUOVR ,,b,DCBXCODE\nDCBXCEBC EQUOVR ,,b,DCBXCODE\nDCBXCTR2 EQUOVR ,,b,DCBXCODE\nDCBXCAS2 EQUOVR ,,b,DCBXCODE\n.*\n.* Declare bits for SAM option codes\nDCBOPTW  EQUOVR ,,b,DCBOPTCD\nDCBOPTU  EQUOVR ,,b,DCBOPTCD\nDCBOPTC  EQUOVR ,,b,DCBOPTCD\nDCBOPTH  EQUOVR ,,b,DCBOPTCD\nDCBOPTO  EQUOVR ,,b,DCBOPTCD\nDCBBCKPT EQUOVR ,,b,DCBOPTCD\nDCBOPTQ  EQUOVR ,,b,DCBOPTCD\nDCBOPTZ  EQUOVR ,,b,DCBOPTCD\nDCBSRCHD EQUOVR ,,b,DCBOPTCD\nDCBOPTT  EQUOVR ,,b,DCBOPTCD\nDCBOPTJ  EQUOVR ,,b,DCBOPTCD\n.*\n.* Declare condition indicator bits\nDCBCNTOV EQUOVR ,,b,DCBCIND1\nDCBSTQCK EQUOVR ,,b,DCBCIND1\nDCBSTFLS EQUOVR ,,b,DCBCIND1\nDCBCNSRD EQUOVR ,,b,DCBCIND1\nDCBCNEVB EQUOVR ,,b,DCBCIND1\nDCBCNEVA EQUOVR ,,b,DCBCIND1\nDCBCNCI  EQUOVR ,,b,DCBCIND1\nDCBCNBRM EQUOVR ,,b,DCBCIND1\nDCBCBNDF EQUOVR ,,b,DCBCIND1\nDCBCNEXB EQUOVR ,,b,DCBCIND1\n.*\nDCBCNSTO EQUOVR ,,b,DCBCIND2\nDCBCNWR0 EQUOVR ,,b,DCBCIND2\nDCBCNCLO EQUOVR ,,b,DCBCIND2\nDCBCNIOE EQUOVR ,,b,DCBCIND2\nDCBCNBFP EQUOVR ,,b,DCBCIND2\nDCBCNCHS EQUOVR ,,b,DCBCIND2\nDCBCNFEO EQUOVR ,,b,DCBCIND2\nDCBCNQSM EQUOVR ,,b,DCBCIND2\n.*\n.* Declare bit-fields for flag byte\nDCBPOPEN EQUOVR ,,b,DCBQSWS\n.*\n.* Declare bit-fields for ascii tapes\nDCBBLBP  EQUOVR ,,b,DCBUSASI\nDCBQADFS EQUOVR ,,b,DCBUSASI\nDCBQADF1 EQUOVR ,,b,DCBUSASI\nDCBQADF2 EQUOVR ,,b,DCBUSASI\nDCBQADF3 EQUOVR ,,b,DCBUSASI\nDCB3525A EQUOVR ,,b,DCBUSASI\nDCBQSTRU EQUOVR ,,b,DCBUSASI\n.*\n.* Declare error option bits\nDCBERACC EQUOVR ,,b,DCBEROPT\nDCBERSKP EQUOVR ,,b,DCBEROPT\nDCBERABE EQUOVR ,,b,DCBEROPT\nDCBERBAM EQUOVR ,,b,DCBEROPT\n.*\n         MNOTE *,'Including DCBD mapping macro'\n.*\n.* DSORG=GS excluded because DCBD then expands incomplete\n         DCBD  DSORG=(BS,BX,CX,DA,IS,LR,PO,PS,QS,QX,TQ,TR,TX,XA,XE),   *\n               DEVD=(BS,DA,MR,OR,PC,PR,PT,RD,TA,WT)\n.*\n.* Additional equates for DCBMACF1 - FIRST BYTE OF DCBMACRF\nDCBMFECP EQU   DCBMRECP\nDCBMFFE  EQU   DCBMRFE\nDCBMFGET EQU   DCBMRGET\nDCBMFPTQ EQU   DCBMRPTQ\nDCBMFAPG EQU   DCBMRAPG\nDCBMFRD  EQU   DCBMRRD\nDCBMFWRQ EQU   DCBMRWRQ\nDCBMFCI  EQU   DCBMRCI\nDCBMFMVG EQU   DCBMRMVG\nDCBMFRDK EQU   DCBMRRDK\nDCBMFLCG EQU   DCBMRLCG\nDCBMFRDI EQU   DCBMRRDI\nDCBMFABC EQU   DCBMRABC\nDCBMFPT1 EQU   DCBMRPT1\nDCBMFSBG EQU   DCBMRSBG\nDCBMFDBF EQU   DCBMRDBF\nDCBMFFXA EQU   DCBPGFXA\nDCBMFCRL EQU   DCBMRCRL\nDCBMFCHK EQU   DCBMRCHK\nDCBMFRDX EQU   DCBMRRDX\nDCBMFDMG EQU   DCBMRDMG\nDCBMFCK  EQU   DCBMRCK\n.*\n.* Additional equates for DCBMACF2 - SECOND BYTE OF DCBMACRF\nDCBMFSTL EQU   DCBMRSTL\nDCBMFPUT EQU   DCBMRPUT\nDCBMFGTQ EQU   DCBMRGTQ\nDCBMFWRT EQU   DCBMRWRT\nDCBMFRDQ EQU   DCBMRRDQ\nDCBMFMVP EQU   DCBMRMVP\nDCBMFWRK EQU   DCBMRWRK\nDCBMF5WD EQU   DCBMR5WD\nDCBMFLDM EQU   DCBMRLDM\nDCBMFLCP EQU   DCBMRLCP\nDCBMFIDW EQU   DCBMRIDW\nDCBMF4WD EQU   DCBMR4WD\nDCBMFPT2 EQU   DCBMRPT2\nDCBMFTMD EQU   DCBMRTMD\nDCBMFUIP EQU   DCBMRUIP\nDCBMF3WD EQU   DCBMR3WD\nDCBMFCTL EQU   DCBMRCTL\nDCBMFSTK EQU   DCBMRSTK\nDCBMFAWR EQU   DCBMRAWR\nDCBMF1WD EQU   DCBMR1WD\nDCBMFSWA EQU   DCBMRSWA\nDCBMFDMD EQU   DCBMRDMD\nDCBMFSTI EQU   DCBMRSTI\n.*\n         DSOVR *END\n         EQUOVR *END\n.*\n.* For DSORG=GS, the definitions below were copied from DCBD\n         ORG   IHADCB\n***********************************************************************\n*                       GRAPHIC DEVICE INTERFACE\n***********************************************************************\n         DS    XL12           RESERVED\nDCBBRSA  DS    AL2            BUFFER RESTART ADDRESS.  BLANK BEFORE\n*                             EXECUTION OF SECOND I/O OPERATION\nDCBGTYPE DCL   *CODE,XL1,     TYPE OF BUFFER MANAGEMENT AND ATTENTION  *\n               DCBGTEXP,      EXPRESS                       HANDLING   *\n               DCBGTBAS,      BASIC                                    *\n               DCBGTNBM       DEFAULT - NO BUFFER MANAGEMENT       uL2A\n         DS    X              RESERVED\nDCBBFRST DS    AL2            BLANK BEFORE EXECUTION OF OPEN ROUTINE.\n*                             STARTING ADDRESS FOR BUFFER AFTER\n*                             EXECUTION OF OPEN ROUTINE\nDCBBFRSZ DS    H              BLANK BEFORE EXECUTION OF OPEN ROUTINE.\n*                             SIZE OF BUFFER AFTER EXECUTION OF OPEN\n*                             ROUTINE.\n***********************************************************************\n*                       FOUNDATION EXTENSION\n***********************************************************************\n         ORG   IHADCB+32      Set to start of foundation extension\nDCBPOLST DS    0A             ADDRESS OF AREA WHERE A DCB LIST IS TO BE\n*                             CONSTRUCTED FOR POLLING PURPOSES\nDCBGNCP  DS    FL1            NUMBER OF I/O INSTRUCTIONS TO BE ISSUED\n*                             BEFORE A WAIT MACRO INSTRUCTION\nDCBPOLSA DS    AL3            SAME AS DCBPOLST ABOVE\n***********************************************************************\n*                       FOUNDATION BEFORE OPEN\n***********************************************************************\nDCBOFGRW EQUOVR ,,b,DCBOFLG\nDCBOFGRW EQU   DCBBIT0        IF ZERO, LAST I/O OPERATION WAS GREAD.\n*                             IF ONE, LAST I/O OPERATION WAS GWRITE.\n***********************************************************************\n*                       FOUNDATION AFTER OPEN\n***********************************************************************\n         ORG   IHADCB+40\n         DS    XL8            Previously defined fields\nDCBGIOCR DS    0A             ADDRESS OF GRAPHICS I/O CONTROL ROUTINE\n         DS    BL1            DCBOFLGS: SAME AS DCBOFLG BEFORE OPEN\nDCBGIOCA DS    AL3            ADDRESS OF GRAPHICS I/O CONTROL ROUTINE\nDCBLNGGS EQU   *-IHADCB       LENGTH OF DCB FOR GRAPHIC DEVICE     uL1A&\n                              INTERFACE                            uL1A\n***********************************************************************\n*              END of GRAPHIC DEVICE INTERFACE\n***********************************************************************\n         EQUOVR *END\n*\nDCB      EQU   IHADCB                  * Name for USINGs\n         ORG\nDCB_LEN  EQU   *-DCB                   * Length of DCB\n*\n* Mapping for Block Descriptor Word\nBDW      DSECT\nBDWBLKLN DS    H                       * Length of block\nBDWT00   DS    H                       * Trailing zeros\nBDW_LEN  EQU   *-BDW                   * Length of BDW\n*\n* Mapping for Record Descriptor Word\nRDW      DSECT ,                       *\nRDWRECLN DS    H                       * Length of RDW + record\nRDWT00   DS    H                       * Trailing zeros\n*\n* RDW for XLRI has a different format\n         ORG   RDW                     *\nRDWL0    DS    X                       * Leading zeros\nRDWXLRLN DS    XL3                     * Length of logical record\n*\n         ORG   ,                       *\nRDW_LEN  EQU   *-RDW                   * Length of RDW\n*\n* Mapping for Segment Descriptor Word\nSDW      DSECT ,                       *\nSDWNULL  EQUOVR ,,b,SDWSEGLN           * SDWNULL is bit 0 of length\nSDWSEGLN DS    H                       * Length of segment\nSDWNULL  EQU   BIT0                    * Null segment indicator\nSDWSEGCC DCL   *CODE,B,                * Segment Control Code          *\n               SDWSCOMP,               * Complete record               *\n               SDWSFRST,               * First segment                 *\n               SDWSLAST,               * Last segment                  *\n               SDWSMIDL                * Middle segment\n         DS    X                       * Always zero\nSDW_LEN  EQU   *-SDW                   * Length of SDW\n         EQUOVR *END\n*\n* Mapping for Segment Control Word (ASCII)\nSCW      DSECT ,                       *\nSCWSPIND DCL   *CODE,C,                * Spanning indicator chararcter *\n               (SCWSCOMP,C'0'),        * Complete record               *\n               (SCWSFRST,C'1'),        * First segment                 *\n               (SCWSLAST,C'2'),        * Last segment                  *\n               (SCWSMIDL,C'3')         * Middle segment\nSCWSEGLN DS    CL4                     * Length of segment\nSCW_LEN  EQU   *-SCW                   * Length of SCW\n*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDCBE  0100-20096-20096-0111-00115-00115-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Control Block Extension\n.*\n&LABEL   MAPDCBE &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDCBE                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDCBE        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DCBE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDCBE).MEND\n&BXA_MAC_MAPDCBE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DCBE\n&BXA_CB_DCBE SETC 'DCBE'\n.*\n.* DCBEFLG1 - Flags set by system.\nDCBEOPEN EQUOVR ,,b,DCBEFLG1\nDCBEMD31 EQUOVR ,,b,DCBEFLG1\n.*\n.* DCBEFLG2 - Flags set by user.\nDCBEBU31 EQUOVR ,,b,DCBEFLG2\nDCBENEOD EQUOVR ,,b,DCBEFLG2\nDCBENVER EQUOVR ,,b,DCBEFLG2\nDCBEGSIZ EQUOVR ,,b,DCBEFLG2\n.*\n         MNOTE *,'Including IHADCBE mapping macro'\n         IHADCBE ,\n         EQUOVR *END\n*\n         ORG\nDCBE_LEN EQU   *-DCBE                  * Length of DCBE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDDRCO 0100-20096-20096-0111-00264-00264-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the IOS Dynamic Device Reconfiguration COMmunication\n.*                     table\n.*\n&LABEL   MAPDDRCO &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDDRCO               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDDRCO       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DDRCOM').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDDRCO).MEND\n&BXA_MAC_MAPDDRCO SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DDRCOM\n&BXA_CB_DDRCOM SETC 'DDRCO'\n.*\n.* DDRSRC - SOURCE OF DDR REQUEST\nDDROPER   EQUOVR ,,b,DDRSRC\nDDRSYS    EQUOVR ,,b,DDRSRC\nDDRPAGE   EQUOVR ,,b,DDRSRC\n.*\n.* DDRSTAT - REQUEST STATUS\nDDRACTV   EQUOVR ,,b,DDRSTAT\nDDRQUE    EQUOVR ,,b,DDRSTAT\nDDRHAMA   EQUOVR ,,b,DDRSTAT\nDDRRMV    EQUOVR ,,b,DDRSTAT\nDDRPRG    EQUOVR ,,b,DDRSTAT\nDDRSIRB   EQUOVR ,,b,DDRSTAT\nDDRBYPTM  EQUOVR ,,b,DDRSTAT\n.*\n.* DDRDSTAT - DEVICE TYPE AND FLAGS\nDDRBUFL   EQUOVR ,,b,DDRDSTAT\nDDRDA     EQUOVR ,,b,DDRDSTAT\nDDRMT     EQUOVR ,,b,DDRDSTAT\nDDRUR     EQUOVR ,,b,DDRDSTAT\nDDRRCYLE  EQUOVR ,,b,DDRDSTAT\nDDRTRPOS  EQUOVR ,,b,DDRDSTAT\nDDRMTEND  EQUOVR ,,b,DDRDSTAT\n.*\n.* DDRROWN - REQUEST RESOURCES\nDDRRTENQ  EQUOVR ,,b,DDRROWN\nDDRRUENQ  EQUOVR ,,b,DDRROWN\nDDRRDENQ  EQUOVR ,,b,DDRROWN\nDDRRYENQ  EQUOVR ,,b,DDRROWN\nDDRDEN    EQUOVR ,,b,DDRROWN\nDDRJES3L  EQUOVR ,,b,DDRROWN\nDDRFIRST  EQUOVR ,,b,DDRROWN\n.*\n.* DDRTER1 - TERMINATION REASON CODE\nDDRTNF    EQUOVR ,,v,DDRTER1\nDDRTEP    EQUOVR ,,v,DDRTER1\nDDRTOC    EQUOVR ,,v,DDRTER1\nDDRTBR    EQUOVR ,,v,DDRTER1\nDDRTCO    EQUOVR ,,v,DDRTER1\nDDRTIU    EQUOVR ,,v,DDRTER1\nDDRTCE    EQUOVR ,,v,DDRTER1\nDDRTID    EQUOVR ,,v,DDRTER1\nDDRTCU    EQUOVR ,,v,DDRTER1\nDDRTJE    EQUOVR ,,v,DDRTER1\nDDRTEXC   EQUOVR ,,v,DDRTER1\nDDRTAIP   EQUOVR ,,v,DDRTER1\nDDRTREP   EQUOVR ,,v,DDRTER1\nDDRTRD    EQUOVR ,,v,DDRTER1\nDDRTRR    EQUOVR ,,v,DDRTER1\nDDRTLF    EQUOVR ,,v,DDRTER1\nDDRTIOA   EQUOVR ,,v,DDRTER1\nDDRTMSG   EQUOVR ,,v,DDRTER1\n.*\n.* DDRINV1 - INVALID REASON CODE\nDDRIMP    EQUOVR ,,v,DDRINV1\nDDRIUF    EQUOVR ,,v,DDRINV1\nDDRINS    EQUOVR ,,v,DDRINV1\nDDRIIN    EQUOVR ,,v,DDRINV1\nDDRINO    EQUOVR ,,v,DDRINV1\nDDRINA    EQUOVR ,,v,DDRINV1\nDDRIDT    EQUOVR ,,v,DDRINV1\nDDRIJ3    EQUOVR ,,v,DDRINV1\nDDRIONL   EQUOVR ,,v,DDRINV1\nDDRIDYST  EQUOVR ,,v,DDRINV1\nDDRIVOLI  EQUOVR ,,v,DDRINV1\nDDRIIOA   EQUOVR ,,v,DDRINV1\nDDRIOPD   EQUOVR ,,v,DDRINV1\nDDRIPAG   EQUOVR ,,v,DDRINV1\n.*\n.* DDRINV2 - VALIDATE'S PARM FIELD\nDDRVFM    EQUOVR ,,v,DDRINV2\nDDRVCM    EQUOVR ,,v,DDRINV2\nDDRVUS    EQUOVR ,,v,DDRINV2\n.*\n.* DDRIOF1 - I/O PARM FLAGS FIELD 1\nDDRREAD   EQUOVR ,,v,DDRIOF1\nDDRRUN    EQUOVR ,,v,DDRIOF1\nDDRRDBK   EQUOVR ,,v,DDRIOF1\nDDRXA4    EQUOVR ,,v,DDRIOF1\nDDRBSF    EQUOVR ,,v,DDRIOF1\nDDRFSF    EQUOVR ,,v,DDRIOF1\nDDRNOP    EQUOVR ,,v,DDRIOF1\nDDRSNS    EQUOVR ,,v,DDRIOF1\nDDRLOAD   EQUOVR ,,v,DDRIOF1\n.*\n.* DDRIOF2 - I/O PARM FLAGS FIELD 2\nDDRWHICH  EQUOVR ,,b,DDRIOF2\nDDRITAKE  EQUOVR ,,b,DDRIOF2\nDDRILAB   EQUOVR ,,b,DDRIOF2\nDDRIMNT   EQUOVR ,,b,DDRIOF2\nDDRICNT   EQUOVR ,,b,DDRIOF2\nDDRTCNTL  EQUOVR ,,b,DDRIOF2\n.*\n.* DDRMSGOP - OPERATOR RESPONSE\nDDRWTOR   EQUOVR ,,v,DDRMSGOP\nDDRYES    EQUOVR ,,v,DDRMSGOP\nDDRNO     EQUOVR ,,v,DDRMSGOP\nDDRCUA    EQUOVR ,,v,DDRMSGOP\n.*\n.* DDRMSGCD - MESSAGE NUMBER CODE\nDDRM500I  EQUOVR ,,v,DDRMSGCD\nDDRM500D  EQUOVR ,,v,DDRMSGCD\nDDRM502E  EQUOVR ,,v,DDRMSGCD\nDDRM503I  EQUOVR ,,v,DDRMSGCD\nDDRM505I  EQUOVR ,,v,DDRMSGCD\nDDRM509I  EQUOVR ,,v,DDRMSGCD\nDDRM509D  EQUOVR ,,v,DDRMSGCD\nDDRM511A  EQUOVR ,,v,DDRMSGCD\nDDRM512I  EQUOVR ,,v,DDRMSGCD\nDDRM513I  EQUOVR ,,v,DDRMSGCD\nDDRM515I  EQUOVR ,,v,DDRMSGCD\nDDRM514I  EQUOVR ,,v,DDRMSGCD\nDDRM501I  EQUOVR ,,v,DDRMSGCD\nDDRM516I  EQUOVR ,,v,DDRMSGCD\nDDRM517I  EQUOVR ,,v,DDRMSGCD\nDDRM518I  EQUOVR ,,v,DDRMSGCD\nDDRM519I  EQUOVR ,,v,DDRMSGCD\n.*\n.* DDRMSGPC - (0-7) MESSAGE CODES\nDDRPNO    EQUOVR ,,v,DDRMSGPC\nDDRPFM    EQUOVR ,,v,DDRMSGPC\nDDRPTO    EQUOVR ,,v,DDRMSGPC\nDDRPVL    EQUOVR ,,v,DDRMSGPC\nDDRPLT    EQUOVR ,,v,DDRMSGPC\nDDRPSN    EQUOVR ,,v,DDRMSGPC\nDDRPTM    EQUOVR ,,v,DDRMSGPC\nDDRLIB    EQUOVR ,,v,DDRMSGPC\nDDRPIC    EQUOVR ,,v,DDRMSGPC\nDDRPDV    EQUOVR ,,v,DDRMSGPC\nDDRPRC    EQUOVR ,,v,DDRMSGPC\n.*\n.* DDRLABEL - TAPE FROM LABEL TYPE\nDDRLAL    EQUOVR ,,b,DDRLABEL\nDDRLBLP   EQUOVR ,,b,DDRLABEL\nDDRLNL    EQUOVR ,,b,DDRLABEL\nDDRLNSL   EQUOVR ,,b,DDRLABEL\nDDRLSD    EQUOVR ,,b,DDRLABEL\nDDRLNOP   EQUOVR ,,b,DDRLABEL\n.*\n.* DDRREC1 - RECORDER FLAGS\nDDRRECON  EQUOVR ,,v,DDRREC1\nDDRR91    EQUOVR ,,v,DDRREC1\nDDRRBLF   EQUOVR ,,v,DDRREC1\n.*\n.* DDRREC2 - RECORDER PARM LIST\nDDRRFMTO  EQUOVR ,,b,DDRREC2\n.*\n.* DDRFLAGS - MISC FLAGS\nDDRINTER  EQUOVR ,,b,DDRFLAGS\nDDRIOA    EQUOVR ,,b,DDRFLAGS\n.*\n.* DDRFTPT3 - THIRD FOOTPRINT BYTE\nDDRDW0IN  EQUOVR ,,b,DDRFTPT3\nDDRIOSIN  EQUOVR ,,b,DDRFTPT3\nDDRIOSOT  EQUOVR ,,b,DDRFTPT3\nDDRJES3C  EQUOVR ,,b,DDRFTPT3\nDDRSCHED  EQUOVR ,,b,DDRFTPT3\n.*\n         MNOTE *,'Including IHADDR mapping macro'\n         IHADDR ,                      *\n         EQUOVR *END\n*\nDDRCOM   DSECT ,                       * Return to DDRCOM\n         ORG\nDDRCOM_LEN EQU *-DDRCOM                * Length of DDRCOM\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDEB   0100-20096-20096-0111-00362-00362-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Extent Block\n.*\n&LABEL   MAPDEB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDEB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDEB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DEB').EMBED\n         AIF   ('&CB' EQ 'DEBACSMD').EMBED\n         AIF   ('&CB' EQ 'DEBDASD').EMBED\n         AIF   ('&CB' EQ 'DEBSUBNM').EMBED\n         AIF   ('&CB' EQ 'DEBXTN').EMBED\n         AIF   ('&CB' EQ 'DEB2XTN').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDEB).MEND\n&BXA_MAC_MAPDEB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DEB\n         GBLC  &BXA_CB_DEBACSMD\n         GBLC  &BXA_CB_DEBDASD\n         GBLC  &BXA_CB_DEBSUBNM\n         GBLC  &BXA_CB_DEBXTN\n         GBLC  &BXA_CB_DEB2XTN\n&BXA_CB_DEB SETC 'DEB'\n&BXA_CB_DEBACSMD SETC 'DEB'\n&BXA_CB_DEBDASD SETC 'DEB'\n&BXA_CB_DEBSUBNM SETC 'DEB'\n&BXA_CB_DEBXTN SETC 'DEB'\n&BXA_CB_DEB2XTN SETC 'DEB'\n.*\n.* DEBEOEAB - FLAG BYTE\nDEBEOENP EQUOVR ,,b,DEBEOEAB\n.*\n.* DEBSIOAB - FLAG BYTE\nDEBPGFX  EQUOVR ,,b,DEBSIOAB\nDEBSIOX  EQUOVR ,,b,DEBSIOAB\nDEBIOVR  EQUOVR ,,b,DEBSIOAB\nDEBFIX   EQUOVR ,,b,DEBSIOAB\nDEBSIONP EQUOVR ,,b,DEBSIOAB\n.*\n.* DEBPCIAB - FLAG BYTE\nDEBRSV24 EQUOVR ,,b,DEBPCIAB\nDEBRSV25 EQUOVR ,,b,DEBPCIAB\nDEBRSV26 EQUOVR ,,b,DEBPCIAB\nDEBRSV27 EQUOVR ,,b,DEBPCIAB\nDEBPCINP EQUOVR ,,b,DEBPCIAB\n.*\n.* DEBCEAB - FLAG BYTE\nDEBESMVR EQUOVR ,,b,DEBCEAB\nDEBRSV29 EQUOVR ,,b,DEBCEAB\nDEBRSV30 EQUOVR ,,b,DEBCEAB\nDEBRSV31 EQUOVR ,,b,DEBCEAB\nDEBCENP  EQUOVR ,,b,DEBCEAB\n.*\n.* DEBXCEAB - FLAG BYTE\nDEBRSV32 EQUOVR ,,b,DEBXCEAB\nDEBRSV33 EQUOVR ,,b,DEBXCEAB\nDEBRSV34 EQUOVR ,,b,DEBXCEAB\nDEBRSV35 EQUOVR ,,b,DEBXCEAB\nDEBXCENP EQUOVR ,,b,DEBXCEAB\n.*\n.* DEBAMTYP - ACCESS METHOD TYPE\nDEBAMNON EQUOVR ,,v,DEBAMTYP\nDEBAMVSM EQUOVR ,,b,DEBAMTYP\nDEBAMXCP EQUOVR ,,b,DEBAMTYP\nDEBAMTCM EQUOVR ,,b,DEBAMTYP\nDEBAMGAM EQUOVR ,,b,DEBAMTYP\nDEBAMTAM EQUOVR ,,b,DEBAMTYP\nDEBAMBPM EQUOVR ,,b,DEBAMTYP\nDEBAMSAM EQUOVR ,,b,DEBAMTYP\nDEBAMBDM EQUOVR ,,b,DEBAMTYP\nDEBAMISM EQUOVR ,,b,DEBAMTYP\nDEBAMSUB EQUOVR ,,b,DEBAMTYP\nDEBAMVTM EQUOVR ,,b,DEBAMTYP\nDEBAMTAP EQUOVR ,,b,DEBAMTYP\n.*\n.* DEBAMID - VTAM/TCAM DEB ID FLAG\nDEBTAMID EQUOVR ,,v,DEBAMID\nDEBVAMID EQUOVR ,,v,DEBAMID\n.*\n.* DEBOFLGS - DATA SET STATUS FLAGS\nDEBDISP  EQUOVR ,,b,DEBOFLGS\nDEBDSOLD EQUOVR ,,b,DEBOFLGS\nDEBDSMOD EQUOVR ,,b,DEBOFLGS\nDEBDSNEW EQUOVR ,,b,DEBOFLGS\nDEBEOF   EQUOVR ,,b,DEBOFLGS\nDEBRLSE  EQUOVR ,,b,DEBOFLGS\nDEBDCB   EQUOVR ,,b,DEBOFLGS\nDEBSPLIT EQUOVR ,,b,DEBOFLGS\nDEBLABEL EQUOVR ,,b,DEBOFLGS\nDEBRERR  EQUOVR ,,b,DEBOFLGS\n.*\n.* DEBOPATB - FLAGS INDICATING BOTH THE METHOD OF I/O PROCESSING\nDEBABEND EQUOVR ,,b,DEBOPATB\nDEBZERO  EQUOVR ,,b,DEBOPATB\nDEBPOSIT EQUOVR ,,b,DEBOPATB\nDEBRERED EQUOVR ,,b,DEBOPATB\nDEBLEAVE EQUOVR ,,b,DEBOPATB\nDEBACCS  EQUOVR ,,b,DEBOPATB\nDEBINPUT EQUOVR ,,v,DEBOPATB\nDEBOUTPT EQUOVR ,,b,DEBOPATB\nDEBXTEND EQUOVR ,,b,DEBOPATB\nDEBINOUT EQUOVR ,,b,DEBOPATB\nDEBOUTIN EQUOVR ,,b,DEBOPATB\nDEBOTINX EQUOVR ,,b,DEBOPATB\nDEBRDBCK EQUOVR ,,b,DEBOPATB\nDEBUPDAT EQUOVR ,,b,DEBOPATB\n.*\n.* DEBFLGS1 - FLAG FIELD\nDEBPWCKD EQUOVR ,,b,DEBFLGS1\nDEBEOFDF EQUOVR ,,b,DEBFLGS1\nDEBRSIOA EQUOVR ,,b,DEBFLGS1\nDEBEXCPA EQUOVR ,,b,DEBFLGS1\nDEBCINDI EQUOVR ,,b,DEBFLGS1\nDEBF1CEV EQUOVR ,,b,DEBFLGS1\nDEBAPFIN EQUOVR ,,b,DEBFLGS1\nDEBXTNIN EQUOVR ,,b,DEBFLGS1\n.*\n.* DEBFLGS2 - FLAG FIELD TWO\nDEBIOPAV EQUOVR ,,b,DEBFLGS2\n.* DEBFGRV1 EQUOVR ,,b,DEBFLGS2        * last seen in OS/390 V2R6\n.* DEBFGRV2 EQUOVR ,,b,DEBFLGS2        * last seen in OS/390 V2R6\n.* DEBFGRV3 EQUOVR ,,b,DEBFLGS2        * last seen in OS/390 V2R6\nDEBVRLS  EQUOVR ,,b,DEBFLGS2\nDEBDSCMP EQUOVR ,,b,DEBFLGS2\nDEBDSNCP EQUOVR ,,b,DEBFLGS2\nDEBFGRV6 EQUOVR ,,b,DEBFLGS2\n.* DEBFGRV7 EQUOVR ,,b,DEBFLGS2        * last seen in OS/390 V2R6\n.*\n.* DEBSDVM - DEVICE MODIFIER.\nDEBMTDN4 EQUOVR ,,v,DEBSDVM\nDEBMTDN3 EQUOVR ,,v,DEBSDVM\nDEBMTDN2 EQUOVR ,,v,DEBSDVM\nDEBM7DN0 EQUOVR ,,v,DEBSDVM\nDEBM7DN1 EQUOVR ,,v,DEBSDVM\nDEBM7DN2 EQUOVR ,,v,DEBSDVM\nDEBMSTWI EQUOVR ,,v,DEBSDVM\nDEBMTRF0 EQUOVR ,,v,DEBSDVM\nDEBMTRF1 EQUOVR ,,v,DEBSDVM\nDEBMTWI  EQUOVR ,,v,DEBSDVM\nDEBMINHS EQUOVR ,,v,DEBSDVM\nDEBMCOMP EQUOVR ,,v,DEBSDVM\nDEBCMPAC EQUOVR ,,v,DEBSDVM\nDEBM3424 EQUOVR ,,v,DEBSDVM\nDEBM9348 EQUOVR ,,v,DEBSDVM\nDEBMINHE EQUOVR ,,v,DEBSDVM\nDEBM6250 EQUOVR ,,v,DEBSDVM\nDEBM1600 EQUOVR ,,v,DEBSDVM\nDEBM4TRK EQUOVR ,,v,DEBSDVM\nDEBM2TRK EQUOVR ,,v,DEBSDVM\nDEBM1TRK EQUOVR ,,v,DEBSDVM\n.*\n.* DEBEAMFG - FLAG BYTE\nDEBMULTI EQUOVR ,,b,DEBEAMFG\nDEBDSOPN EQUOVR ,,b,DEBEAMFG\nDEBVAMSG EQUOVR ,,b,DEBEAMFG\nDEBSECVL EQUOVR ,,b,DEBEAMFG\nDEBRV004 EQUOVR ,,b,DEBEAMFG\nDEBRV005 EQUOVR ,,b,DEBEAMFG\nDEBRV006 EQUOVR ,,b,DEBEAMFG\nDEBRV007 EQUOVR ,,b,DEBEAMFG\n.*\n.* DEBRPSID - ROTATIONAL POSITION SENSING (RPS) DEVICE INDICATORS\nDEBRPSP  EQUOVR ,,b,DEBRPSID\nDEBRPSI  EQUOVR ,,b,DEBRPSID\nDEBRPSO  EQUOVR ,,b,DEBRPSID\nDEBRPSAP EQUOVR ,,b,DEBRPSID\nDEBRSV09 EQUOVR ,,b,DEBRPSID\nDEBRSV10 EQUOVR ,,b,DEBRPSID\nDEBRSV11 EQUOVR ,,b,DEBRPSID\nDEBRSV12 EQUOVR ,,b,DEBRPSID\n.*\n.* DEBVOLBT - FIRST BYTE OF DEBVOLSQ\nDEBEXFUL EQUOVR ,,b,DEBVOLBT\nDEBRSV36 EQUOVR ,,b,DEBVOLBT\nDEBRSV37 EQUOVR ,,b,DEBVOLBT\nDEBRSV38 EQUOVR ,,b,DEBVOLBT\nDEBRSV39 EQUOVR ,,b,DEBVOLBT\nDEBRSV40 EQUOVR ,,b,DEBVOLBT\nDEBRSV41 EQUOVR ,,b,DEBVOLBT\nDEBRSV42 EQUOVR ,,b,DEBVOLBT\n.*\n.* DEBXFLG1 - FLAG BYTE\nDEBXCDCB EQUOVR ,,b,DEBXFLG1\nDEBXTSKC EQUOVR ,,b,DEBXFLG1\nDEBXDSSI EQUOVR ,,b,DEBXFLG1\nDEBXWIND EQUOVR ,,b,DEBXFLG1\nDEBXACIS EQUOVR ,,b,DEBXFLG1\nDEBXNFLS EQUOVR ,,b,DEBXFLG1\nDEBXSYSB EQUOVR ,,b,DEBXFLG1\nDEBXRACE EQUOVR ,,b,DEBXFLG1\n.*\n.* DEBXFLG2 - FLAG BYTE\nDEBXRSAP EQUOVR ,,b,DEBXFLG2\nDEBBYP   EQUOVR ,,b,DEBXFLG2\nDEBCHCMP EQUOVR ,,b,DEBXFLG2\nDEBXENQA EQUOVR ,,b,DEBXFLG2\nDEBXENQS EQUOVR ,,b,DEBXFLG2\nDEBXIMSC EQUOVR ,,b,DEBXFLG2\nDEBXCASV EQUOVR ,,b,DEBXFLG2\nDEBXMVLF EQUOVR ,,b,DEBXFLG2\n.*\n.* DEBDEFG1 - FLAG BYTE\nDEBNSHED EQUOVR ,,b,DEBDEFG1\nDEBXVDEF EQUOVR ,,b,DEBDEFG1\n.*\n.* DEBGATTR - GLOBAL ATTRIBUTES\nDEBECKD  EQUOVR ,,b,DEBGATTR\nDEBGAEX1 EQUOVR ,,b,DEBGATTR\nDEBGAEX2 EQUOVR ,,b,DEBGATTR\nDEBSTRTP EQUOVR ,,b,DEBGATTR\nDEBGA345 EQUOVR ,,b,DEBGATTR\nDEBGA1   EQUOVR ,,b,DEBGATTR\nDEBGA2   EQUOVR ,,b,DEBGATTR\nDEBGA3   EQUOVR ,,b,DEBGATTR\nDEBNCACH EQUOVR ,,v,DEBGATTR\nDEBBCACH EQUOVR ,,b,DEBGATTR\nDEBICACH EQUOVR ,,b,DEBGATTR\nDEBSCACH EQUOVR ,,b,DEBGATTR\nDEBXRFLG EQUOVR ,,b,DEBGATTR\nDEBRLC   EQUOVR ,,b,DEBGATTR\nDEBNRD   EQUOVR ,,b,DEBGATTR\nDEBINHFW EQUOVR ,,b,DEBGATTR\n.*\n.* DEBGATTX - GLOBAL ATTRIB EXTENDED 2\nDEBRMODE EQUOVR ,,v,DEBGATTX\nDEBRDATA EQUOVR ,,b,DEBGATTX\nDEBSKEY  EQUOVR ,,b,DEBGATTX\nDEBDFTR0 EQUOVR ,,b,DEBGATTX\n.*\n.* DEBXFLG3 - FLAG BYTE\nDEBXTRNC EQUOVR ,,b,DEBXFLG3\nDEBXNSEG EQUOVR ,,b,DEBXFLG3\nDEBXSMSG EQUOVR ,,b,DEBXFLG3\nDEBXCAP  EQUOVR ,,b,DEBXFLG3\n.*\n.* DEBXAMBF - DEFINES THE USE OF DEBXAMB\nDEBXABSS EQUOVR ,,b,DEBXAMBF\nDEBXARBA EQUOVR ,,b,DEBXAMBF\nDEBXAOEF EQUOVR ,,b,DEBXAMBF\n.*\n.* DEBXAFLG - \"ATTRIBUTE EXTENSION\" FLAGS\nDEBXADS  EQUOVR ,,b,DEBXAFLG\nDEBXAINP EQUOVR ,,b,DEBXAFLG\nDEBXAOUT EQUOVR ,,b,DEBXAFLG\nDEBXAOFO EQUOVR ,,b,DEBXAFLG\n.*\n.* DEB2XFG1 - FIRST FLAG BYTE\nDEB2XOSM EQUOVR ,,b,DEB2XFG1\n.*\n         MNOTE *,'Including IEZDEB mapping macro'\n.*\n         IEZDEB LIST=YES               * Do not issue PRINT OFF\n         EQUOVR *END\n*\nDEB      DSECT ,                       * Reset to DEB\n         ORG\nDEB_LEN  EQU   *-DEB                   * Length of DEB\n*\nDEBACSMD DSECT ,                       * Reset to DEBACSMD\n         ORG\nDEBACSMD_LEN EQU *-DEBACSMD            * Length of DEBACSMD\n*\nDEBDASD  DSECT ,                       * Reset to DEBDASD\n         ORG\nDEBDASD_LEN EQU *-DEBDASD              * Length of DEBDASD\n*\nDEBSUBNM DSECT ,                       * Reset to DEBSUBNM\n         ORG\nDEBSUBNM_LEN EQU *-DEBSUBNM            * Length of DEBSUBNM\n*\nDEBXTN   DSECT ,                       * Reset to DEBXTN\n         ORG\nDEBXTN_LEN EQU *-DEBXTN                * Length of DEBXTN\n*\nDEB2XTN  DSECT ,                       * Reset to DEB2XTN\n         ORG\nDEB2XTN_LEN EQU *-DEB2XTN              * Length of DEB2XTN\n*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDECB  0100-20096-20096-0111-00263-00263-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Event Control Block\n.* The DECB must be located below 16M\n.*\n&LABEL   MAPDECB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDECB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDECB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DECB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDECB).MEND\n&BXA_MAC_MAPDECB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DECB\n&BXA_CB_DECB SETC 'DECB'\n.*\n.* DECTYPE1 - TYPE OF LENGTH OPERAND\nDECLNS   EQUOVR ,,b,DECTYPE1\nDECRSV01 EQUOVR ,,b,DECTYPE1\nDECRSV02 EQUOVR ,,b,DECTYPE1\nDECRSV03 EQUOVR ,,b,DECTYPE1\nDECRSV04 EQUOVR ,,b,DECTYPE1\nDECRSV05 EQUOVR ,,b,DECTYPE1\nDECRSV06 EQUOVR ,,b,DECTYPE1\nDECRSV07 EQUOVR ,,b,DECTYPE1\n.*\n.* DECTYPE2 - TYPE OF OPERATION\nDECRDSF  EQUOVR ,,b,DECTYPE2\nDECRDSB  EQUOVR ,,b,DECTYPE2\nDECWRSF  EQUOVR ,,b,DECTYPE2\nDECWRSD  EQUOVR ,,b,DECTYPE2\nDECRSV08 EQUOVR ,,b,DECTYPE2\nDECWRSZ  EQUOVR ,,b,DECTYPE2\nDECRSV09 EQUOVR ,,b,DECTYPE2\nDECWRSFR EQUOVR ,,b,DECTYPE2\n.*\n.* DECBECBF - FLAG FIELD\nDECBWAIT EQUOVR ,,b,DECBECBF\nDECBPOST EQUOVR ,,b,DECBECBF\nDECRSV11 EQUOVR ,,b,DECBECBF\nDECRSV12 EQUOVR ,,b,DECBECBF\nDECRSV13 EQUOVR ,,b,DECBECBF\nDECRSV14 EQUOVR ,,b,DECBECBF\nDECRSV15 EQUOVR ,,b,DECBECBF\nDECRSV16 EQUOVR ,,b,DECBECBF\n.*\n.* DECBTYP1 - OPTION BYTE\nDECRSV17 EQUOVR ,,b,DECBTYP1\nDECRSV18 EQUOVR ,,b,DECBTYP1\nDECRSV19 EQUOVR ,,b,DECBTYP1\nDECRSV20 EQUOVR ,,b,DECBTYP1\nDECRSV21 EQUOVR ,,b,DECBTYP1\nDECRSV22 EQUOVR ,,b,DECBTYP1\nDECBLNS  EQUOVR ,,b,DECBTYP1\nDECBARS  EQUOVR ,,b,DECBTYP1\n.*\n.* DECBTYP2 - TYPE OF I/O REQUEST\nDECBRDK  EQUOVR ,,b,DECBTYP2\nDECRSV23 EQUOVR ,,b,DECBTYP2\nDECBRDKU EQUOVR ,,b,DECBTYP2\nDECRSV24 EQUOVR ,,b,DECBTYP2\nDECBWRK  EQUOVR ,,b,DECBTYP2\nDECBWRKN EQUOVR ,,b,DECBTYP2\nDECRSV25 EQUOVR ,,b,DECBTYP2\nDECRSV26 EQUOVR ,,b,DECBTYP2\n.*\n.* DECBEXC1 - EXCEPTIONAL CONDITION CODE BYTE 1\nDECEXRNF EQUOVR ,,b,DECBEXC1\nDECEXRLC EQUOVR ,,b,DECBEXC1\nDECEXNSP EQUOVR ,,b,DECBEXC1\nDECEXINV EQUOVR ,,b,DECBEXC1\nDECEXERR EQUOVR ,,b,DECBEXC1\nDECEXUBK EQUOVR ,,b,DECBEXC1\nDECEXOFL EQUOVR ,,b,DECBEXC1\nDECEXDUP EQUOVR ,,b,DECBEXC1\n.*\n.* DECBEXC2 - EXCEPTIONAL CONDITION CODE BYTE 2\nDECRSV27 EQUOVR ,,b,DECBEXC2\nDECRSV28 EQUOVR ,,b,DECBEXC2\nDECRSV29 EQUOVR ,,b,DECBEXC2\nDECRSV30 EQUOVR ,,b,DECBEXC2\nDECRSV31 EQUOVR ,,b,DECBEXC2\nDECRSV32 EQUOVR ,,b,DECBEXC2\nDECEXASR EQUOVR ,,b,DECBEXC2\nDECEXRKU EQUOVR ,,b,DECBEXC2\n.*\n.* DECCC2 - COMPLETION CODE BYTE 2\nDECCCRNF EQUOVR ,,b,DECCC2\nDECCCRLC EQUOVR ,,b,DECCC2\nDECCCNSP EQUOVR ,,b,DECCC2\nDECCCINV EQUOVR ,,b,DECCC2\nDECCCERR EQUOVR ,,b,DECCC2\nDECCCEOD EQUOVR ,,b,DECCC2\nDECCCUER EQUOVR ,,b,DECCC2\nDECCCREX EQUOVR ,,b,DECCC2\n.*\n.* DECCC3 - COMPLETION CODE BYTE 3\nDECRSV33 EQUOVR ,,b,DECCC3\nDECCCWRI EQUOVR ,,b,DECCC3\nDECCCEXS EQUOVR ,,b,DECCC3\nDECCCNBK EQUOVR ,,b,DECCC3\nDECCCWDI EQUOVR ,,b,DECCC3\nDECCCSDK EQUOVR ,,b,DECCC3\nDECCCOPT EQUOVR ,,b,DECCC3\nDECCCKFF EQUOVR ,,b,DECCC3\n.*\n.* DECTYPE1 - TYPE OF LENGTH OPERAND\nDECVERFY EQUOVR ,,b,DECTYPE1\nDECOFLOW EQUOVR ,,b,DECTYPE1\nDECEXSRC EQUOVR ,,b,DECTYPE1\nDECFDBCK EQUOVR ,,b,DECTYPE1\nDECACTAD EQUOVR ,,b,DECTYPE1\nDECDYNBF EQUOVR ,,b,DECTYPE1\nDECRDEX  EQUOVR ,,b,DECTYPE1\nDECRELBA EQUOVR ,,b,DECTYPE1\n.*\n.* DECTYPE2 - TYPE OF OPERATION\nDECKEYS  EQUOVR ,,b,DECTYPE2\nDECBKLNS EQUOVR ,,b,DECTYPE2\nDECTYPRU EQUOVR ,,b,DECTYPE2\nDECTYPR  EQUOVR ,,b,DECTYPE2\nDECOPRD  EQUOVR ,,b,DECTYPE2\nDECSRKEY EQUOVR ,,b,DECTYPE2\nDECWRADD EQUOVR ,,b,DECTYPE2\nDECRSV35 EQUOVR ,,b,DECTYPE2\n.*\n.* DECTYPE1 - TYPE OF LENGTH OPERAND\nDECRDAPL EQUOVR ,,b,DECTYPE1\nDECRSV43 EQUOVR ,,b,DECTYPE1\nDECRSV44 EQUOVR ,,b,DECTYPE1\nDECRSV45 EQUOVR ,,b,DECTYPE1\nDECRSV46 EQUOVR ,,b,DECTYPE1\nDECSTRME EQUOVR ,,b,DECTYPE1\nDECSAREA EQUOVR ,,b,DECTYPE1\nDECSLNTH EQUOVR ,,b,DECTYPE1\n.*\n.* DECONLTT - FLAG BYTE FOR BSC AND 2760 ONLINE TEST\nDECONLTS EQUOVR ,,b,DECONLTT\nDECRCVMS EQUOVR ,,b,DECONLTT\nDECRSV47 EQUOVR ,,b,DECONLTT\nDECRSV48 EQUOVR ,,b,DECONLTT\nDECRSV49 EQUOVR ,,b,DECONLTT\nDECRSV50 EQUOVR ,,b,DECONLTT\nDECRSV51 EQUOVR ,,b,DECONLTT\nDECRSV52 EQUOVR ,,b,DECONLTT\n.*\n.* DECFLAGS - OPERATION STATUS\nDECWACK  EQUOVR ,,b,DECFLAGS\nDECERRMS EQUOVR ,,b,DECFLAGS\nDECDIFAC EQUOVR ,,b,DECFLAGS\nDECALTAC EQUOVR ,,b,DECFLAGS\nDECBADID EQUOVR ,,b,DECFLAGS\nDECNOBUF EQUOVR ,,b,DECFLAGS\nDECNEGRP EQUOVR ,,b,DECFLAGS\nDECREVRS EQUOVR ,,b,DECFLAGS\nDECSSMSG EQUOVR ,,b,DECFLAGS\nDECSTXNQ EQUOVR ,,b,DECFLAGS\n.*\n.* DECERRST - I/O ERROR STATUS FLAGS\nDECSIO3  EQUOVR ,,b,DECERRST\nDECUNDEF EQUOVR ,,b,DECERRST\nDECERPER EQUOVR ,,b,DECERRST\nDECDIAGN EQUOVR ,,b,DECERRST\nDECDSABL EQUOVR ,,b,DECERRST\nDECRSV53 EQUOVR ,,b,DECERRST\nDECRSV54 EQUOVR ,,b,DECERRST\nDECRSV55 EQUOVR ,,b,DECERRST\n.*\n         MNOTE *,'Including IHADECB mapping macro'\n         IHADECB ,\n         EQUOVR *END\n*\n         ORG   ,                       *\nDECB_LEN EQU   *-DECB                  * Length of DECB\nDECB_BSAM_LEN  EQU L'DECBLFMT+DECBLFMT-DECB * Length of DECB for BSAM\nDECB_BISAM_LEN EQU L'DECBEXC2+DECBEXC2-DECB * Length of DECB for BISAM\nDECB_BDAM_LEN  EQU L'DECNAA+DECNAA-DECB     * Length of DECB for BDAM\nDECB_QTAM_LEN  EQU L'DECPOLPA+DECPOLPA-DECB * Length of DECB for QTAM\nDECB_BTAM_LEN  EQU L'DECWAREA+DECWAREA-DECB * Length of DECB for BTAM\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDES   0100-20096-20096-0111-00383-00383-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Facilities Area\n.*\n&LABEL   MAPDES &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDES                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDES         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DESB').EMBED\n         AIF   ('&CB' EQ 'DESD').EMBED\n         AIF   ('&CB' EQ 'DESL').EMBED\n         AIF   ('&CB' EQ 'DESN').EMBED\n         AIF   ('&CB' EQ 'DESP').EMBED\n         AIF   ('&CB' EQ 'DESR').EMBED\n         AIF   ('&CB' EQ 'DESRCS').EMBED\n         AIF   ('&CB' EQ 'DESX').EMBED\n         AIF   ('&CB' EQ 'DST').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDES).MEND\n&BXA_MAC_MAPDES SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DESB\n         GBLC  &BXA_CB_DESD\n         GBLC  &BXA_CB_DESL\n         GBLC  &BXA_CB_DESN\n         GBLC  &BXA_CB_DESP\n         GBLC  &BXA_CB_DESR\n         GBLC  &BXA_CB_DESRCS\n         GBLC  &BXA_CB_DESX\n         GBLC  &BXA_CB_DST\n&BXA_CB_DESB   SETC 'DES'\n&BXA_CB_DESD   SETC 'DES'\n&BXA_CB_DESL   SETC 'DES'\n&BXA_CB_DESN   SETC 'DES'\n&BXA_CB_DESP   SETC 'DES'\n&BXA_CB_DESR   SETC 'DES'\n&BXA_CB_DESRCS SETC 'DES'\n&BXA_CB_DESX   SETC 'DES'\n&BXA_CB_DST    SETC 'DES'\n.*\n.* DESP_LEV - control block level\nDESP_LEV_IV            EQUOVR ,,v,DESP_LEV\n.*\n.* DESP_FUNC - function type\nDESP_FUNC_UPDATE       EQUOVR ,,v,DESP_FUNC\nDESP_FUNC_RENAME       EQUOVR ,,v,DESP_FUNC\nDESP_FUNC_DELETE       EQUOVR ,,v,DESP_FUNC\nDESP_FUNC_EXIT         EQUOVR ,,v,DESP_FUNC\nDESP_FUNC_GET_NAMES    EQUOVR ,,v,DESP_FUNC\nDESP_FUNC_PUT          EQUOVR ,,v,DESP_FUNC\nDESP_FUNC_RELEASE      EQUOVR ,,v,DESP_FUNC\nDESP_FUNC_GET_ALL      EQUOVR ,,v,DESP_FUNC\nDESP_FUNC_GET          EQUOVR ,,v,DESP_FUNC\nDESP_FUNC_OMITTED      EQUOVR ,,v,DESP_FUNC\n.*\n.* DESP_FLAGS - DESP FLAG1\nDESP_BYPASS_LLA        EQUOVR ,,b,DESP_FLAGS\nDESP_CONCAT_FLG        EQUOVR ,,b,DESP_FLAGS\nDESP_SUBPOOL_FLG       EQUOVR ,,b,DESP_FLAGS\nDESP_C370LIB           EQUOVR ,,b,DESP_FLAGS\nDESP_CONCAT_ALL        EQUOVR ,,b,DESP_FLAGS\nDESP_HIDE              EQUOVR ,,b,DESP_FLAGS\nDESP_SYSTEM_DCB        EQUOVR ,,b,DESP_FLAGS\n.*\n.* DESP_EXIT_SCOPE - EXIT SCOPE\nDESP_EXIT_SCOPE_TASK   EQUOVR ,,v,DESP_EXIT_SCOPE\nDESP_EXIT_SCOPE_GLOBAL EQUOVR ,,v,DESP_EXIT_SCOPE\n.*\n.* DESP_LIBTYPE - function subtype (DCB, DEB)\nDESP_LIBTYPE_DCB       EQUOVR ,,v,DESP_LIBTYPE\nDESP_LIBTYPE_DEB       EQUOVR ,,v,DESP_LIBTYPE\nDESP_LIBTYPE_OMITTED   EQUOVR ,,v,DESP_LIBTYPE\n.*\n.* DESP_GETTYPE - function subtype\nDESP_GETTYPE_SMDE      EQUOVR ,,v,DESP_GETTYPE\nDESP_GETTYPE_PDSDE     EQUOVR ,,v,DESP_GETTYPE\nDESP_GETTYPE_NAME_LIST EQUOVR ,,v,DESP_GETTYPE\nDESP_GETTYPE_OMITTED   EQUOVR ,,v,DESP_GETTYPE\n.*\n.* DESP_RELTYPE - function subtype\nDESP_RELTYPE_DE_LIST   EQUOVR ,,v,DESP_RELTYPE\nDESP_RELTYPE_CONN_ID   EQUOVR ,,v,DESP_RELTYPE\nDESP_RELTYPE_OMITTED   EQUOVR ,,v,DESP_RELTYPE\n.*\n.* DESP_EXIT_OPTION - EXIT option\nDESP_EXIT_OPTION_QUERY      EQUOVR ,,v,DESP_EXIT_OPTION\nDESP_EXIT_OPTION_DELETE     EQUOVR ,,v,DESP_EXIT_OPTION\nDESP_EXIT_OPTION_REPLACE    EQUOVR ,,v,DESP_EXIT_OPTION\nDESP_EXIT_OPTION_NOREPLACE  EQUOVR ,,v,DESP_EXIT_OPTION\n.*\n.* DESP_OPTION - PUT REPLACE option\nDESP_OPTION_REPLACE    EQUOVR ,,v,DESP_OPTION\nDESP_OPTION_NOREPLACE  EQUOVR ,,v,DESP_OPTION\n.*\n.* DESP_CONN_INTENT - connect intent\nDESP_CONN_INTENT_INPUT EQUOVR ,,v,DESP_CONN_INTENT\nDESP_CONN_INTENT_EXEC  EQUOVR ,,v,DESP_CONN_INTENT\nDESP_CONN_INTENT_HOLD  EQUOVR ,,v,DESP_CONN_INTENT\nDESP_CONN_INTENT_NONE  EQUOVR ,,v,DESP_CONN_INTENT\n.*\n.* DESL_FLAGS - flags\nDESL_MODULE_BUFFERED_LLA EQUOVR ,,b,DESL_FLAGS\n.*\n.* DESL_CODE - result code\nDESL_CODE_NEWNAME_EXISTS EQUOVR ,,v,DESL_CODE\nDESL_CODE_ERROR        EQUOVR ,,v,DESL_CODE\nDESL_CODE_NOTFOUND     EQUOVR ,,v,DESL_CODE\nDESL_CODE_SUCC         EQUOVR ,,v,DESL_CODE\n.*\n.* DESB_LEV - CONTROL BLOCK LEVEL\nDESB_LEV_IV            EQUOVR ,,v,DESB_LEV\n.*\n.* DESD_FLAG - flags\nDESD_FLAG_ALIAS        EQUOVR ,,b,DESD_FLAG\n.*\n.* DESD_CODE - processing code\nDESD_CODE_ERROR        EQUOVR ,,v,DESD_CODE\nDESD_CODE_NOGO         EQUOVR ,,v,DESD_CODE\nDESD_CODE_SUCC         EQUOVR ,,v,DESD_CODE\n.*\n.* DESX_LEV - control block level\nDESX_LEV_IV            EQUOVR ,,v,DESX_LEV\n.*\n.* DESX_FLAGS - Flags\nDESX_BLDL_BIT          EQUOVR ,,b,DESX_FLAGS\nDESX_PRE_BIT           EQUOVR ,,b,DESX_FLAGS\nDESX_POST_BIT          EQUOVR ,,b,DESX_FLAGS\n.*\n.* DST_LEV - control block level\nDST_LEV_IV             EQUOVR ,,v,DST_LEV\n.*\n.* DST_FLAGS - DST flags\nDST_FLAGS_PROP         EQUOVR ,,b,DST_FLAGS\n.*\n.* DESRC - return code\nDESRC_SUCC             EQUOVR ,,v,DESRC\nDESRC_INFO             EQUOVR ,,v,DESRC\nDESRC_WARN             EQUOVR ,,v,DESRC\nDESRC_PARM             EQUOVR ,,v,DESRC\nDESRC_CALR             EQUOVR ,,v,DESRC\nDESRC_ENVR             EQUOVR ,,v,DESRC\nDESRC_IOER             EQUOVR ,,v,DESRC\nDESRC_MEDE             EQUOVR ,,v,DESRC\nDESRC_DSLE             EQUOVR ,,v,DESRC\nDESRC_SEVE             EQUOVR ,,v,DESRC\n.*\n.* DESRS - reason code\nDESRS_MEMBER_PEND_DELETE     EQUOVR ,,v,DESRS\nDESRS_LONG_NAME_NOT_ORIGINAL EQUOVR ,,v,DESRS\nDESRS_NEW_NAME_EXISTS        EQUOVR ,,v,DESRS\nDESRS_BOTH_NAMES_BIG         EQUOVR ,,v,DESRS\nDESRS_BOTH_NAMES_SAME        EQUOVR ,,v,DESRS\nDESRS_INVAL_PREVDST_HEADER   EQUOVR ,,v,DESRS\nDESRS_PREV_DSTPTR_PTR_ZERO   EQUOVR ,,v,DESRS\nDESRS_DST_COMP_SWAP_FAILED   EQUOVR ,,v,DESRS\nDESRS_EXIT_SCOPE_INVALID     EQUOVR ,,v,DESRS\nDESRS_EXIT_OPTION_INVALID    EQUOVR ,,v,DESRS\nDESRS_EXIT_PREV_DSTPTR_ZERO  EQUOVR ,,v,DESRS\nDESRS_INVAL_DST_HEADER       EQUOVR ,,v,DESRS\nDESRS_EXIT_DST_PTR_ZERO      EQUOVR ,,v,DESRS\nDESRS_DST_ALREADY_EXISTS     EQUOVR ,,v,DESRS\nDESRS_EXIT_ERROR             EQUOVR ,,v,DESRS\nDESRS_AUTH_ERROR             EQUOVR ,,v,DESRS\nDESRS_PACBLOC_ERROR          EQUOVR ,,v,DESRS\nDESRS_UNKNOWN                EQUOVR ,,v,DESRS\nDESRS_GETMAIN_ERROR          EQUOVR ,,v,DESRS\nDESRS_CANT_CHANGE_RECOVERY   EQUOVR ,,v,DESRS\nDESRS_IGWCDFNC_ERROR         EQUOVR ,,v,DESRS\nDESRS_NO_PNAR_FOR_NAME       EQUOVR ,,v,DESRS\nDESRS_UNEXPECTED_SAR_CODE    EQUOVR ,,v,DESRS\nDESRS_TWO_MLT_NAMES          EQUOVR ,,v,DESRS\nDESRS_PDSDE_MERGE_ERR        EQUOVR ,,v,DESRS\nDESRS_UNKNOWN_EXIT_ERROR     EQUOVR ,,v,DESRS\nDESRS_ECB_POSTED_ERROR       EQUOVR ,,v,DESRS\nDESRS_CONNID_OVERFLOW        EQUOVR ,,v,DESRS\nDESRS_NAME_IS_PRIMARY_NAME   EQUOVR ,,v,DESRS\nDESRS_CLOCK_ERROR            EQUOVR ,,v,DESRS\nDESRS_DATA_LENGTH_ERROR      EQUOVR ,,v,DESRS\nDESRS_ANCHOR_IN_USE          EQUOVR ,,v,DESRS\nDESRS_ANCHOR_FREE            EQUOVR ,,v,DESRS\nDESRS_ADD_STACK_FAILED       EQUOVR ,,v,DESRS\nDESRS_INVALID_CONN_INTENT    EQUOVR ,,v,DESRS\nDESRS_NAME_LIST_@_INVALID    EQUOVR ,,v,DESRS\nDESRS_NAME_LIST_COUNT_INVALID EQUOVR ,,v,DESRS\nDESRS_CONNID_INVALID         EQUOVR ,,v,DESRS\nDESRS_INVALID_GETTYPE        EQUOVR ,,v,DESRS\nDESRS_INVALID_AREA_PTR       EQUOVR ,,v,DESRS\nDESRS_INVALID_AREAPTR_PTR    EQUOVR ,,v,DESRS\nDESRS_AREA_LENGTH_TOO_SMALL  EQUOVR ,,v,DESRS\nDESRS_INVALID_ENTRY_GAP      EQUOVR ,,v,DESRS\nDESRS_INVALID_DE_LIST_PTR    EQUOVR ,,v,DESRS\nDESRS_INVALID_DE_LIST_CNT    EQUOVR ,,v,DESRS\nDESRS_INVALID_CONN_ID_PTR    EQUOVR ,,v,DESRS\nDESRS_INVALID_RELEASE_TYPE   EQUOVR ,,v,DESRS\nDESRS_INVALID_PUT_OPTION     EQUOVR ,,v,DESRS\nDESRS_INVALID_MEM_DATA_PTR   EQUOVR ,,v,DESRS\nDESRS_INVALID_MEM_DATA_CNT   EQUOVR ,,v,DESRS\nDESRS_INVALID_NAME_PTR       EQUOVR ,,v,DESRS\nDESRS_INVALID_NAME_LENGTH    EQUOVR ,,v,DESRS\nDESRS_UNSUPPORTED_FUNC       EQUOVR ,,v,DESRS\nDESRS_DEB_REQUIRES_AUTH      EQUOVR ,,v,DESRS\nDESRS_INVALID_DCB_PTR        EQUOVR ,,v,DESRS\nDESRS_DCB_NOT_OPEN           EQUOVR ,,v,DESRS\nDESRS_COMP_NAME_BAD          EQUOVR ,,v,DESRS\nDESRS_DCB_NOT_OPEN_OUTPUT    EQUOVR ,,v,DESRS\nDESRS_INVALID_DEB_PTR        EQUOVR ,,v,DESRS\nDESRS_DEBCHK_FAILED          EQUOVR ,,v,DESRS\nDESRS_INVALID_CONCAT         EQUOVR ,,v,DESRS\nDESRS_PDSDE_PTR_INVALID      EQUOVR ,,v,DESRS\nDESRS_INVALID_FT             EQUOVR ,,v,DESRS\nDESRS_LIB_NOT_BUFFERED       EQUOVR ,,v,DESRS\nDESRS_INVALID_DFNC_FUNC      EQUOVR ,,v,DESRS\nDESRS_DISCONNECT_FILE_FAILED EQUOVR ,,v,DESRS\nDESRS_INSUF_BUFFER_SIZE      EQUOVR ,,v,DESRS\nDESRS_PDS_NOT_SUPPORTED      EQUOVR ,,v,DESRS\nDESRS_INVALID_CT             EQUOVR ,,v,DESRS\nDESRS_INVALID_MLT            EQUOVR ,,v,DESRS\nDESRS_MORE_THAN_1_PRIMARY    EQUOVR ,,v,DESRS\nDESRS_INVALID_PARM_LIST_HEADER EQUOVR ,,v,DESRS\nDESRS_INVALID_NAME_PREFIX    EQUOVR ,,v,DESRS\nDESRS_NO_PRIMARY_NAME        EQUOVR ,,v,DESRS\nDESRS_NAME_ALREADY_EXISTS    EQUOVR ,,v,DESRS\nDESRS_LONG_NAME_AND_LLA      EQUOVR ,,v,DESRS\nDESRS_PROGRAM_OBJECT_ONLY    EQUOVR ,,v,DESRS\nDESRS_FREEMAIN_ERROR         EQUOVR ,,v,DESRS\nDESRS_CONVERT_ERROR          EQUOVR ,,v,DESRS\nDESRS_UNEXPECTED_JCDM_ERROR  EQUOVR ,,v,DESRS\nDESRS_PDSDE_CONVRT_ERR       EQUOVR ,,v,DESRS\nDESRS_SETLOCK_ERR            EQUOVR ,,v,DESRS\nDESRS_EXTRACT_ERROR          EQUOVR ,,v,DESRS\nDESRS_SET_ERROR              EQUOVR ,,v,DESRS\nDESRS_ANCHOR_CREATE_FAILED   EQUOVR ,,v,DESRS\nDESRS_ELEMENT_CREATE_FAILED  EQUOVR ,,v,DESRS\nDESRS_PMAR_MERGE_ERR         EQUOVR ,,v,DESRS\nDESRS_IEWLCNVT_ERROR         EQUOVR ,,v,DESRS\nDESRS_NAME_NOT_DEFINED       EQUOVR ,,v,DESRS\nDESRS_CHANGED_PMAR_LENGTH    EQUOVR ,,v,DESRS\nDESRS_SMDE_TOKEN_BAD         EQUOVR ,,v,DESRS\nDESRS_PRI_NM_THIS_FILE       EQUOVR ,,v,DESRS\nDESRS_CANT_GET_FILELOCK      EQUOVR ,,v,DESRS\nDESRS_CONNECTION_NOT_FOUND   EQUOVR ,,v,DESRS\nDESRS_DESL_SMDE_PTR          EQUOVR ,,v,DESRS\nDESRS_RELTYPE_INVALID        EQUOVR ,,v,DESRS\nDESRS_BAD_PMAR_FIELD_UPDATED EQUOVR ,,v,DESRS\nDESRS_IEWBXILO_ERROR         EQUOVR ,,v,DESRS\nDESRS_MULTIPLE_ERRORS        EQUOVR ,,v,DESRS\nDESRS_AUTH_SUBPOOL           EQUOVR ,,v,DESRS\nDESRS_DIRECTORY_EMPTY        EQUOVR ,,v,DESRS\nDESRS_CONNECT_AUTH           EQUOVR ,,v,DESRS\nDESRS_C370LIB_PDSDE_ME       EQUOVR ,,v,DESRS\nDESRS_BAD_BLKSIZE            EQUOVR ,,v,DESRS\nDESRS_BAD_TXT_CARD           EQUOVR ,,v,DESRS\nDESRS_BAD_C370LIB_DIR        EQUOVR ,,v,DESRS\nDESRS_DCB_NOT_OPEN_PO        EQUOVR ,,v,DESRS\nDESRS_AREA_AREAPTR_ME        EQUOVR ,,v,DESRS\nDESRS_SMDE_PTR_INVALID       EQUOVR ,,v,DESRS\nDESRS_C370LIB_SMDE_ME        EQUOVR ,,v,DESRS\nDESRS_NOTFOUND               EQUOVR ,,v,DESRS\nDESRS_MODULE_BUFFERED_LLA    EQUOVR ,,v,DESRS\nDESRS_SUCC                   EQUOVR ,,v,DESRS\n.*\n         MNOTE *,'Including IGWDES mapping macro'\n         IGWDES ,                      *\n         EQUOVR *END                   *\n*\nDESP     DSECT ,                       * Return to DESP\n         ORG   ,                       *\nDESP_SIZE EQU  *-DESP                  * Length of DESP\n*\nDESL     DSECT ,                       * Return to DESL\n         ORG   ,                       *\nDESL_SIZE EQU  *-DESL                  * Length of DESL\n*\nDESB     DSECT ,                       * Return to DESB\n         ORG   ,                       *\nDESB_SIZE EQU  *-DESB                  * Length of DESB\n*\nDESN     DSECT ,                       * Return to DESN\n         ORG   ,                       *\nDESN_SIZE EQU  *-DESN                  * Length of DESN\n*\nDESD     DSECT ,                       * Return to DESD\n         ORG   ,                       *\nDESD_SIZE EQU  *-DESD                  * Length of DESD\n*\nDESX     DSECT ,                       * Return to DESX\n         ORG   ,                       *\nDESX_SIZE EQU  *-DESX                  * Length of DESX\n*\nDST      DSECT ,                       * Return to DST\n         ORG   ,                       *\nDST_SIZE EQU   *-DST                   * Length of DST\n*\nDESRCS   DSECT ,                       * Return to DESRCS\n         ORG   ,                       *\nDESRCS_SIZE EQU *-DESRCS               * Length of DESRCS\n*\nDESR     DSECT ,                       * Return to DESR\n         ORG   ,                       *\nDESR_SIZE EQU  *-DESR                  * Length of DESR\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDFA   0100-20096-20096-0111-00164-00164-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Facilities Area\n.*\n&LABEL   MAPDFA &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDFA                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDFA         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DFA').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDFA).MEND\n&BXA_MAC_MAPDFA SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DFA\n&BXA_CB_DFA SETC 'DFA'\n.*\n.* DFAFEAT1 - FEATURES BYTE 1\nDFAXA    EQUOVR ,,b,DFAFEAT1\nDFALSR   EQUOVR ,,b,DFAFEAT1\nDFAEOS   EQUOVR ,,b,DFAFEAT1\nDFAXRF   EQUOVR ,,b,DFAFEAT1\nDFAEXPCI EQUOVR ,,b,DFAFEAT1\nDFAEOSIC EQUOVR ,,b,DFAFEAT1\nDFASMS   EQUOVR ,,b,DFAFEAT1\nDFAPDSE  EQUOVR ,,b,DFAFEAT1\n.*\n.* DFAFEAT2 - FEATURES BYTE 2\nDFADLS   EQUOVR ,,b,DFAFEAT2\nDFAPML   EQUOVR ,,b,DFAFEAT2\nDFAFMS   EQUOVR ,,b,DFAFEAT2\nDFACMPAC EQUOVR ,,b,DFAFEAT2\nDFABPBLD EQUOVR ,,b,DFAFEAT2\nDFASSF   EQUOVR ,,b,DFAFEAT2\nDFAMMEXT EQUOVR ,,b,DFAFEAT2\nDFAINDEF EQUOVR ,,b,DFAFEAT2\n.*\n.* DFAFEAT3 - FEATURES BYTE 3\nDFAVOLSN EQUOVR ,,b,DFAFEAT3\nDFASAMEX EQUOVR ,,b,DFAFEAT3\nDFASMSEX EQUOVR ,,b,DFAFEAT3\nDFAKSDEX EQUOVR ,,b,DFAFEAT3\nDFACMPCT EQUOVR ,,b,DFAFEAT3\nDFARLSJ3 EQUOVR ,,b,DFAFEAT3\nDFARECAL EQUOVR ,,b,DFAFEAT3\nDFADEEXT EQUOVR ,,b,DFAFEAT3\nDFADLL   EQUOVR ,,b,DFAFEAT3\n.*\n.* DFAFEAT4 - FEATURES BYTE 4\nDFAFDAT  EQUOVR ,,b,DFAFEAT4\nDFANSRV  EQUOVR ,,b,DFAFEAT4\nDFADYNL  EQUOVR ,,b,DFAFEAT4\nDFACIR2  EQUOVR ,,b,DFAFEAT4\nDFARTLS  EQUOVR ,,b,DFAFEAT4\nDFADYLPA EQUOVR ,,b,DFAFEAT4\nDFAFORK  EQUOVR ,,b,DFAFEAT4\nDFASNBK  EQUOVR ,,b,DFAFEAT4\nDFASNAP  EQUOVR ,,b,DFAFEAT4\n.*\n.* DFALPKG - LICENSED PACKAGE BYTE\n.* DFAHSM   EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6\n.* DFADSS   EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6\n.* DFARMM   EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6\n.* DFAOPT   EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6\n.* DFADFP0  EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6\n.* DFAADSM  EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6\n.* DFASORT  EQUOVR ,,b,DFALPKG         * Last seen in OS/390 V2R6\n.*\n.* DFALPKG2 - 2ND LICENSED PACKAGE BYTE\n.* DFANFS   EQUOVR ,,b,DFALPKG2        * Last seen in OS/390 V2R6\n.*\n.* DFAPROD - PRODUCT BYTE\nDFADFP   EQUOVR ,,v,DFAPROD\nDFADFSMS EQUOVR ,,v,DFAPROD\n.*\n         MNOTE *,'Including IHADFA mapping macro'\n         IHADFA ,                      *\n         EQUOVR *END\n*\nDFA      DSECT ,                       * Return to DFA\n         ORG\nDFA_LEN  EQU   *-DFA                   * Length of DFA\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDOTU  0100-20096-20096-0111-00198-00198-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro contains the Dynamic Output Text Unit Mappings\n.*\n&LABEL   MAPDOTU &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDOTU                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDOTU        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DOCNTFLD').EMBED\n         AIF   ('&CB' EQ 'DOCNTLST').EMBED\n         AIF   ('&CB' EQ 'DOCNUNIT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDOTU).MEND\n&BXA_MAC_MAPDOTU SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DOCNTFLD\n         GBLC  &BXA_CB_DOCNTLST\n         GBLC  &BXA_CB_DOCNUNIT\n&BXA_CB_DOCNTFLD SETC 'DOTU'\n&BXA_CB_DOCNTLST SETC 'DOTU'\n&BXA_CB_DOCNUNIT SETC 'DOTU'\n.*\n.* DOCNTPTR - Text unit pointer\nDOCNTLT   EQUOVR ,,b,DOCNTPTR\n.*\n         MNOTE *,'Including IEFDOTUM mapping macro'\n         IEFDOTUM ,                    *\n         EQUOVR *END\n.*\n.* DOCNTKEY - Key\nDOADDRES EQUOVR ,,b,DOCNTKEY\nDOBUILD  EQUOVR ,,b,DOCNTKEY\nDOBURST  EQUOVR ,,b,DOCNTKEY\nDOCHARS  EQUOVR ,,b,DOCNTKEY\nDOCKPTLI EQUOVR ,,b,DOCNTKEY\nDOCKPTPA EQUOVR ,,b,DOCNTKEY\nDOCKPTSE EQUOVR ,,b,DOCNTKEY\nDOCLASS  EQUOVR ,,b,DOCNTKEY\nDOCOLORM EQUOVR ,,b,DOCNTKEY\nDOCOMPAC EQUOVR ,,b,DOCNTKEY\nDOCOMSET EQUOVR ,,b,DOCNTKEY\nDOCONTRO EQUOVR ,,b,DOCNTKEY\nDOCOPIE9 EQUOVR ,,b,DOCNTKEY\nDOCOPIEA EQUOVR ,,b,DOCNTKEY\nDODATACK EQUOVR ,,b,DOCNTKEY\nDODEFAUL EQUOVR ,,b,DOCNTKEY\nDODEPT   EQUOVR ,,b,DOCNTKEY\nDODEST   EQUOVR ,,b,DOCNTKEY\nDODPAGEL EQUOVR ,,b,DOCNTKEY\nDODUPLEX EQUOVR ,,b,DOCNTKEY\nDOFCB    EQUOVR ,,b,DOCNTKEY\nDOFLASE  EQUOVR ,,b,DOCNTKEY\nDOFLASF  EQUOVR ,,b,DOCNTKEY\nDOFORMD  EQUOVR ,,b,DOCNTKEY\nDOFORMLN EQUOVR ,,b,DOCNTKEY\nDOFORMS  EQUOVR ,,b,DOCNTKEY\nDOFSSDAT EQUOVR ,,b,DOCNTKEY\nDOGROUPI EQUOVR ,,b,DOCNTKEY\nDOINDEX  EQUOVR ,,b,DOCNTKEY\nDOINTRAY EQUOVR ,,b,DOCNTKEY\nDOLINDEX EQUOVR ,,b,DOCNTKEY\nDOLINECT EQUOVR ,,b,DOCNTKEY\nDOMODIF6 EQUOVR ,,b,DOCNTKEY\nDOMODIF7 EQUOVR ,,b,DOCNTKEY\nDONAME   EQUOVR ,,b,DOCNTKEY\nDONOTIFY EQUOVR ,,b,DOCNTKEY\nDOXOFSTB EQUOVR ,,b,DOCNTKEY\nDOXOFSTF EQUOVR ,,b,DOCNTKEY\nDOYOFSTB EQUOVR ,,b,DOCNTKEY\nDOYOFSTF EQUOVR ,,b,DOCNTKEY\nDOOUTBIN EQUOVR ,,b,DOCNTKEY\nDOOUTDB  EQUOVR ,,b,DOCNTKEY\nDOOUTDC  EQUOVR ,,b,DOCNTKEY\nDOOVFL   EQUOVR ,,b,DOCNTKEY\nDOOVRLYB EQUOVR ,,b,DOCNTKEY\nDOOVRLYF EQUOVR ,,b,DOCNTKEY\nDOPAGEDE EQUOVR ,,b,DOCNTKEY\nDOPIMSG  EQUOVR ,,b,DOCNTKEY\nDOPORTNO EQUOVR ,,b,DOCNTKEY\nDOPRMODE EQUOVR ,,b,DOCNTKEY\nDOPROPTN EQUOVR ,,b,DOCNTKEY\nDOPRTERR EQUOVR ,,b,DOCNTKEY\nDOPRTQUE EQUOVR ,,b,DOCNTKEY\nDOPRTY   EQUOVR ,,b,DOCNTKEY\nDORESFMT EQUOVR ,,b,DOCNTKEY\nDORETANF EQUOVR ,,b,DOCNTKEY\nDORETANS EQUOVR ,,b,DOCNTKEY\nDORETRYT EQUOVR ,,b,DOCNTKEY\nDORETRYL EQUOVR ,,b,DOCNTKEY\nDOROOM   EQUOVR ,,b,DOCNTKEY\nDOSYSARE EQUOVR ,,b,DOCNTKEY\nDOTHRESH EQUOVR ,,b,DOCNTKEY\nDOTITLE  EQUOVR ,,b,DOCNTKEY\nDOTRC    EQUOVR ,,b,DOCNTKEY\nDOUCS    EQUOVR ,,b,DOCNTKEY\nDOUSERDA EQUOVR ,,b,DOCNTKEY\nDOUSERLI EQUOVR ,,b,DOCNTKEY\nDOWRITER EQUOVR ,,b,DOCNTKEY\n.*\nDOCNUNIT DSECT ,                       * Resume text unit mapping\n         MNOTE *,'Including IEFDOKEY mapping macro'\n         IEFDOKEY ,                    *\n         EQUOVR *END\n.*\nDOCNTFLD DSECT ,                       * Resume DOCNTFLD DSECT\n         ORG\nDOCNTFLD_LEN EQU *-DOCNTFLD            * Length of DOCNTFLD\n.*\nDOCNTLST DSECT ,                       * Resume DOCNTLST DSECT\n         ORG\nDOCNTLST_LEN EQU *-DOCNTLST            * Length of DOCNTLST\n.*\nDOCNUNIT DSECT ,                       * Resume DOCNUNIT DSECT\n         ORG\nDOCNUNIT_LEN EQU *-DOCNUNIT            * Length of DOCNUNIT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDSAB  0100-20096-20096-0111-00176-00176-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Set Association Block\n.*\n&LABEL   MAPDSAB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDSAB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDSAB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DSAB').EMBED\n         AIF   ('&CB' EQ 'DSABANMI').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDSAB).MEND\n&BXA_MAC_MAPDSAB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DSAB\n         GBLC  &BXA_CB_DSABANMI\n&BXA_CB_DSAB SETC 'DSAB'\n&BXA_CB_DSABANMI SETC 'DSAB'\n.*\n.* DSABSSVA - SWA VIRTUAL ADDRESS OF SIOT\nDSABSSVA DSOVR XL3                     * Change char to hex field\n.*\n.* DSABORG1 - 1ST BYTE OF DSORG FLAGS\nDSABIS   EQUOVR ,,b,DSABORG1\nDSABPS   EQUOVR ,,b,DSABORG1\nDSABDA   EQUOVR ,,b,DSABORG1\nDSABCX   EQUOVR ,,b,DSABORG1\nDSABCQ   EQUOVR ,,b,DSABORG1\nDSABMQ   EQUOVR ,,b,DSABORG1\nDSABPO   EQUOVR ,,b,DSABORG1\nDSABU    EQUOVR ,,b,DSABORG1\n.*\n.* DSABORG2 - 2ND BYTE OF DSORG FLAGS\nDSABGS   EQUOVR ,,b,DSABORG2\nDSABTX   EQUOVR ,,b,DSABORG2\nDSABTQ   EQUOVR ,,b,DSABORG2\nDSABAM   EQUOVR ,,b,DSABORG2\nDSABTR   EQUOVR ,,b,DSABORG2\n.*\n.* DSABFLG1 - FLAGS-RESTORED BY RESTART\nDSABDALC EQUOVR ,,b,DSABFLG1\nDSABPALC EQUOVR ,,b,DSABFLG1\nDSABDCNV EQUOVR ,,b,DSABFLG1\nDSABCONV EQUOVR ,,b,DSABFLG1\nDSABDCAT EQUOVR ,,b,DSABFLG1\nDSABPCAT EQUOVR ,,b,DSABFLG1\nDSABCATM EQUOVR ,,b,DSABFLG1\nDSABNUSE EQUOVR ,,b,DSABFLG1\n.*\n.* DSABFLG2 - FLAGS-RESTORED BY RESTART\nDSABOPEN EQUOVR ,,b,DSABFLG2\nDSABIRM  EQUOVR ,,b,DSABFLG2\nDSABUNAL EQUOVR ,,b,DSABFLG2\nDSABVLF  EQUOVR ,,b,DSABFLG2\nDSABJCHG EQUOVR ,,b,DSABFLG2\nDSABNODI EQUOVR ,,b,DSABFLG2\nDSABATCT EQUOVR ,,b,DSABFLG2\n.*\n.* DSABFLG3 - FLAGS-NOT RESTORED BY RESTART\nDSABDEFR EQUOVR ,,b,DSABFLG3\nDSABPASS EQUOVR ,,b,DSABFLG3\nDSABVAM  EQUOVR ,,b,DSABFLG3\nDSABVMSC EQUOVR ,,b,DSABFLG3\nDSABCATL EQUOVR ,,b,DSABFLG3\nDSABJSCT EQUOVR ,,b,DSABFLG3\nDSABVVDS EQUOVR ,,b,DSABFLG3\nDSABTIOX EQUOVR ,,b,DSABFLG3\n.*\n.* DSABFLG4 - FLAGS-NOT RESTORED BY RESTART\nDSABCKDS EQUOVR ,,b,DSABFLG4\nDSABCKVL EQUOVR ,,b,DSABFLG4\nDSABCKSI EQUOVR ,,b,DSABFLG4\nDSABHIER EQUOVR ,,b,DSABFLG4\nDSABGANM EQUOVR ,,b,DSABFLG4\nDSABLCAT EQUOVR ,,b,DSABFLG4\nDSABAUCB EQUOVR ,,b,DSABFLG4\nDSABCASL EQUOVR ,,b,DSABFLG4\n.*\n.* DSABANML - LENGTH OF ALTERNATE DSNAME\nDSABANML DSOVR AL1\n.*\n         MNOTE *,'Including IHADSAB mapping macro'\n         IHADSAB ,                     *\n         EQUOVR *END                   *\n         DSOVR *END                    *\n*\nDSAB     DSECT ,                       * Restart DSAB\n         ORG   ,                       *\nDSAB_LEN EQU   *-DSAB                  * Length of DSAB\n*\nDSABANMI DSECT ,                       * Restart DSABANMI\n         ORG   ,                       *\nDSABANMI_LEN EQU *-DSABANMI            * Length of DSABANMI\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDSABQ 0100-20096-20096-0111-00130-00130-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for the DSAB Queue Descriptor Block\n.*\n&LABEL   MAPDSABQ &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDSABQ               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDSABQ       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DSABQDB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDSABQ).MEND\n&BXA_MAC_MAPDSABQ SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DSABQDB\n&BXA_CB_DSABQDB SETC 'DSABQ'\n.*\n.* DSECT DSABQDB should be mapped by macro IEFZB4D5, but this macro\n.* does not exist in either SYS.MACLIB or SYS1.MODGEN\n.*\n         MNOTE *,'Generating DSABQDB Dsect'\n*\nDSABQDB  DSECT\nDSQDBID  DS    CL4                     * Acronym in EBCDIC: DSAB\nDSQATTRS DCL   *BITS,                  * Attributes                    *\n               DSQRIURB,               * RIU table needs rebuilding    *\n               DSQALLOC,               * Step is allocated             *\n               DSQSWARD,               * SWA has been read indicator   *\n               ,,,,,                   * Bit 3-7: reserved             *\n               ,,,,,,,                 * Bit 8-15: reserved\nDSQDBLN  DS    H                       * QDB length\nDSQNELMS DS    F                       * Number of elements on queue\n*\nDSQBADBC EQUOVR ,,b,DSQFRSTP\nDSQFRSTP DS    AL4                     * Pointer to first DSAB\nDSQBADBC EQU   BIT0                    * Backward chain is incorrect\n*\nDSQBADFC EQUOVR ,,b,DSQLASTP\nDSQLASTP DS    AL4                     * Pointer to last element\nDSQBADFC EQU   BIT0                    * Forward chain is incorrect\n*\nDSQFDSP  DS    H                       * Disp into DSAB forward ptr\nDSQBDSP  DS    H                       * Disp into DSAB backward ptr\nDSQDCPID DS    F                       * DSAB cell pool id\nDSQRIUTP DS    AL4                     * Pointer to RIU table\n*\nDSABQDB_LEN EQU *-DSABQDB              * Length of complete DSECT\n         EQUOVR *END\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDSCB  0100-20096-20096-0111-00074-00074-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Set Control Block formats 1 thru 5\n.* The DSCB-formats are documented in DFSMSdfp Advanced Services\n.*                                    Topic 1.1.1 ff\n.*\n&LABEL   MAPDSCB ,                     * No parms\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDSCB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Generate embedded definition\n&LABEL   GENMAPS (DSCB1,DSCB2,DSCB3,DSCB4,DSCB5)\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDSCB1 0100-20096-20096-0111-00191-00191-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Set Control Block formats 1\n.* The DSCB-formats are documented in DFSMSdfp Advanced Services\n.*                                    Topic 1.1.1 ff\n.*\n&LABEL   MAPDSCB1 &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDSCB1               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDSCB1       * DSCB1 already expanded?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DSCB1').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDSCB1).MEND\n&BXA_MAC_MAPDSCB1 SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DSCB1\n&BXA_CB_DSCB1 SETC 'DSCB1'\n.*\n.* DS1FLAG1 - FLAG 1\nDS1COMPR EQUOVR ,,b,DS1FLAG1\nDS1CPOIT EQUOVR ,,b,DS1FLAG1\n.*\n.* DS1SMSFG - SYSTEM MANAGED STORAGE INDICATORS\nDS1SMSDS EQUOVR ,,b,DS1SMSFG\nDS1SMSUC EQUOVR ,,b,DS1SMSFG\nDS1REBLK EQUOVR ,,b,DS1SMSFG\nDS1CRSDB EQUOVR ,,b,DS1SMSFG\nDS1PDSE  EQUOVR ,,b,DS1SMSFG\nDS1STRP  EQUOVR ,,b,DS1SMSFG\nDS1PDSEX EQUOVR ,,b,DS1SMSFG\nDS1DSAE  EQUOVR ,,b,DS1SMSFG\n.*\n.* DS1SCXTF - SECONDARY SPACE EXTENSION FLAG\nDS1SCAVB EQUOVR ,,b,DS1SCXTF\nDS1SCMB  EQUOVR ,,b,DS1SCXTF\nDS1SCKB  EQUOVR ,,b,DS1SCXTF\nDS1SCUB  EQUOVR ,,b,DS1SCXTF\nDS1SCCP1 EQUOVR ,,b,DS1SCXTF\nDS1SCCP2 EQUOVR ,,b,DS1SCXTF\n.*\n.* DS1DSORG - DATA SET ORGANIZATION\nDS1DSGIS EQUOVR ,,b,DS1DSORG\nDS1DSGPS EQUOVR ,,b,DS1DSORG\nDS1DSGDA EQUOVR ,,b,DS1DSORG\nDS1DSGCX EQUOVR ,,b,DS1DSORG\nDS1DSGPO EQUOVR ,,b,DS1DSORG\nDS1DSGU  EQUOVR ,,b,DS1DSORG\n.*\nDS1DSGGS EQUOVR ,,b,DS1DSORG+1\nDS1DSGTX EQUOVR ,,b,DS1DSORG+1\nDS1DSGTQ EQUOVR ,,b,DS1DSORG+1\nDS1ACBM  EQUOVR ,,b,DS1DSORG+1\nDS1ORGAM EQUOVR ,,b,DS1DSORG+1\nDS1DSGTR EQUOVR ,,b,DS1DSORG+1\n.*\n.* DS1RECFM - RECORD FORMAT\nDS1RECFF EQUOVR ,,b,DS1RECFM\nDS1RECFV EQUOVR ,,b,DS1RECFM\nDS1RECFU EQUOVR ,,b,DS1RECFM\nDS1RECFT EQUOVR ,,b,DS1RECFM\nDS1RECFB EQUOVR ,,b,DS1RECFM\nDS1RECFS EQUOVR ,,b,DS1RECFM\nDS1RECFA EQUOVR ,,b,DS1RECFM\nDS1RECMC EQUOVR ,,b,DS1RECFM\n.*\n.* DS1OPTCD - OPTION CODES\nDS1OPTIC EQUOVR ,,b,DS1OPTCD\nDS1OPTBC EQUOVR ,,b,DS1OPTCD\n.*\n.* DS1DSIND - DATA SET INDICATORS\nDS1IND80 EQUOVR ,,b,DS1DSIND\nDS1IND40 EQUOVR ,,b,DS1DSIND\nDS1RACDF EQUOVR ,,b,DS1DSIND\nDS1IND20 EQUOVR ,,b,DS1DSIND\nDS1IND10 EQUOVR ,,b,DS1DSIND\nDS1SECTY EQUOVR ,,b,DS1DSIND\nDS1IND08 EQUOVR ,,b,DS1DSIND\nDS1IND04 EQUOVR ,,b,DS1DSIND\nDS1WRSEC EQUOVR ,,b,DS1DSIND\nDS1IND02 EQUOVR ,,b,DS1DSIND\nDS1DSCHA EQUOVR ,,b,DS1DSIND\nDS1IND01 EQUOVR ,,b,DS1DSIND\nDS1CHKPT EQUOVR ,,b,DS1DSIND\n.*\n.* DS1SCAL1 - SPACE PARAMETERS\nDS1DSPAC EQUOVR ,,b,DS1SCAL1\nDS1CYL   EQUOVR ,,b,DS1SCAL1\nDS1TRK   EQUOVR ,,b,DS1SCAL1\nDS1AVR   EQUOVR ,,b,DS1SCAL1\nDS1AVRND EQUOVR ,,b,DS1SCAL1\nDS1MSGP  EQUOVR ,,b,DS1SCAL1\nDS1EXT   EQUOVR ,,b,DS1SCAL1\nDS1CONTG EQUOVR ,,b,DS1SCAL1\nDS1MXIG  EQUOVR ,,b,DS1SCAL1\nDS1ALX   EQUOVR ,,b,DS1SCAL1\nDS1DSABS EQUOVR ,,v,DS1SCAL1\n.*\n         MNOTE *,'Including IECSDSL1 mapping macro'\n.*\n.* IECSDSL does not generate a DSECT-statement\nDSCB1    DSECT ,                       * Start of Format-1 DSECT\n         IECSDSL1 1                    *\n         EQUOVR *END\n.*\nDS1DATA  EQU   DS1FMTID                * Start of data portion\n         ORG   ,                       *\nDSCB1_LEN EQU  *-DSCB1                 * Length of Format-1\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDSCB2 0100-20096-20096-0111-00109-00109-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Set Control Block formats 2\n.* The DSCB-formats are documented in DFSMSdfp Advanced Services\n.*                                    Topic 1.1.1 ff\n.*\n&LABEL   MAPDSCB2 &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDSCB2               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDSCB2       * DSCB2 already expanded?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DSCB2').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDSCB2).MEND\n&BXA_MAC_MAPDSCB2 SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DSCB2\n&BXA_CB_DSCB2 SETC 'DSCB2'\n.*\n.* IECSDSL does not generate a DSECT-statement\n         MNOTE *,'Including IECSDSL1 mapping macro'\nDSCB2    DSECT ,                       * Start of Format-2 DSECT\n         IECSDSL1 2                    *\n.*\n         ORG   ,                       *\nDSCB2_LEN EQU  *-DSCB2                 * Length of Format-2\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDSCB3 0100-20096-20096-0111-00109-00109-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Set Control Block formats 3\n.* The DSCB-formats are documented in DFSMSdfp Advanced Services\n.*                                    Topic 1.1.1 ff\n.*\n&LABEL   MAPDSCB3 &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDSCB3               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDSCB3       * DSCB3 already expanded?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DSCB3').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDSCB3).MEND\n&BXA_MAC_MAPDSCB3 SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DSCB3\n&BXA_CB_DSCB3 SETC 'DSCB3'\n.*\n.* IECSDSL does not generate a DSECT-statement\n         MNOTE *,'Including IECSDSL1 mapping macro'\nDSCB3    DSECT ,                       * Start of Format-3 DSECT\n         IECSDSL1 3                    *\n.*\n         ORG   ,                       *\nDSCB3_LEN EQU  *-DSCB3                 * Length of Format-3\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDSCB4 0100-20096-20096-0111-00134-00134-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Set Control Block formats 4\n.* The DSCB-formats are documented in DFSMSdfp Advanced Services\n.*                                    Topic 1.1.1 ff\n.*\n&LABEL   MAPDSCB4 &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDSCB4               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDSCB4       * DSCB4 already expanded?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DSCB4').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDSCB4).MEND\n&BXA_MAC_MAPDSCB4 SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DSCB4\n&BXA_CB_DSCB4 SETC 'DSCB4'\n.*\n.* DS4VTOCI - VTOC INDICATORS\nDS4DOSBT EQUOVR ,,b,DS4VTOCI\nDS4DVTOC EQUOVR ,,b,DS4VTOCI\nDS4EFVLD EQUOVR ,,b,DS4VTOCI\nDS4DSTKP EQUOVR ,,b,DS4VTOCI\nDS4DOCVT EQUOVR ,,b,DS4VTOCI\nDS4DIRF  EQUOVR ,,b,DS4VTOCI\nDS4DICVT EQUOVR ,,b,DS4VTOCI\nDS4IVTOC EQUOVR ,,b,DS4VTOCI\n.*\n.* DS4SMSFG - SYSTEM MANAGED STORAGE INDICATORS\nDS4SMS   EQUOVR ,,v,DS4SMSFG\nDS4SMSCV EQUOVR ,,v,DS4SMSFG\nDS4NTSMS EQUOVR ,,v,DS4SMSFG\n.*\n.* DS4DEVFG - FLAG BYTE\nDS4AMBJ  EQUOVR ,,b,DS4DEVFG\nDS4DSF   EQUOVR ,,b,DS4DEVFG\nDS4DEVAV EQUOVR ,,b,DS4DEVFG\n.*\n.* DS4EFLVL - EXTENDED FREE-SPACE MANAGEMENT\nDS4EFL00 EQUOVR ,,v,DS4EFLVL\nDS4EFL07 EQUOVR ,,v,DS4EFLVL\n.*\n.* IECSDSL does not generate a DSECT-statement\n         MNOTE *,'Including IECSDSL1 mapping macro'\nDSCB4    DSECT ,                       * Start of Format-4 DSECT\n         IECSDSL1 4                    *\n         EQUOVR *END\n.*\n         ORG   ,                       *\nDSCB4_LEN EQU  *-DSCB4                 * Length of Format-4\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPDSCB5 0100-20096-20096-0111-00109-00109-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Data Set Control Block formats 5\n.* The DSCB-formats are documented in DFSMSdfp Advanced Services\n.*                                    Topic 1.1.1 ff\n.*\n&LABEL   MAPDSCB5 &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPDSCB5               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPDSCB5       * DSCB5 already expanded?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'DSCB5').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPDSCB5).MEND\n&BXA_MAC_MAPDSCB5 SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_DSCB5\n&BXA_CB_DSCB5 SETC 'DSCB5'\n.*\n.* IECSDSL does not generate a DSECT-statement\n         MNOTE *,'Including IECSDSL1 mapping macro'\nDSCB5    DSECT ,                       * Start of Format-5 DSECT\n         IECSDSL1 5                    *\n.*\n         ORG   ,                       *\nDSCB5_LEN EQU  *-DSCB5                 * Length of Format-5\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPECB   0100-20096-20096-0111-00151-00151-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Event Control Block\n.*\n&LABEL   MAPECB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPECB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPECB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ECB').EMBED\n         AIF   ('&CB' EQ 'ECBE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPECB).MEND\n&BXA_MAC_MAPECB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ECB\n         GBLC  &BXA_CB_ECBE\n&BXA_CB_ECB SETC 'ECB'\n&BXA_CB_ECBE SETC 'ECB'\n.*\n.* ECBCC - COMPLETION CODE BYTE\nECBCC    DSOVR X\nECBWAIT  EQUOVR ,,b,ECBCC\nECBPOST  EQUOVR ,,b,ECBCC\nECBUNWT  EQUOVR ,,v,ECBCC\nECBNORM  EQUOVR ,,v,ECBCC\nECBPERR  EQUOVR ,,v,ECBCC\nECBDAEA  EQUOVR ,,v,ECBCC\nECBABEND EQUOVR ,,v,ECBCC\nECBINCPT EQUOVR ,,v,ECBCC\nECBREPRG EQUOVR ,,v,ECBCC\nECBEHALT EQUOVR ,,v,ECBCC\nECBERPAB EQUOVR ,,v,ECBCC\nECBERPER EQUOVR ,,v,ECBCC\nECBSETEO EQUOVR ,,v,ECBCC\nECBDMQDS EQUOVR ,,v,ECBCC\nECBSEQER EQUOVR ,,v,ECBCC\nECBINVMD EQUOVR ,,v,ECBCC\nECBWKOVR EQUOVR ,,v,ECBCC\nECBNOMSG EQUOVR ,,v,ECBCC\nECBDTRAQ EQUOVR ,,v,ECBCC\nECBEOQ   EQUOVR ,,v,ECBCC\nECBRAQMT EQUOVR ,,v,ECBCC\n.*\n.* ECBCCCNT - ZEROES OR REMAINDER OF COMPLETION CODE\nECBCCCNT DSOVR 0XL3\n.*\n.* ECBBYTE3 - THIRD BYTE OF ECBEVTBA\nECBEXTND EQUOVR ,,v,ECBBYTE3\nECBEVNT  EQUOVR ,,v,ECBBYTE3\n.*\n.* ECBEVAL - FUNCTION CODE\nECBEEXIT EQUOVR ,,v,ECBEVAL\n.*\n.* ECBEFLG1 - FLAG BYTE\nECBEMODE EQUOVR ,,b,ECBEFLG1\n.*\n         MNOTE *,'Including IHAECB mapping macro'\n         IHAECB DSECT=YES,             * Include DSECT statement       *\n               EXT=YES                 *   and ECB extension\n         DSOVR *END                    *\n         EQUOVR *END                   *\n.*\nECB      DSECT\n         ORG\nECB_LEN  EQU   *-ECB                   * Length of ECB\nECBE     DSECT\n         ORG\nECBE_LEN EQU   *-ECBE                  * Length of ECB extension\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPECVT  0100-20096-20096-0111-00122-00122-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Extended Communications Vector Table\n.*\n&LABEL   MAPECVT &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPECVT                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPECVT        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ECVT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPECVT).MEND\n&BXA_MAC_MAPECVT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ECVT\n&BXA_CB_ECVT SETC 'ECVT'\n.*\n.* ECVTIOS1 - IOS FLAGS BYTE 1\nECVTCHSC EQUOVR ,,b,ECVTIOS1\n.*\n.* ECVTOCVT - ANCHOR FOR OpenMVS\nECVTOMVS EQUOVR ,,b,ECVTOCVT\n.*\n.* ECVTGMOD - GRS mode of operation\nECVTGNON EQUOVR ,,v,ECVTOCVT\nECVTGRNG EQUOVR ,,v,ECVTOCVT\nECVTGSTA EQUOVR ,,v,ECVTOCVT\n.*\n.* ECVTFLG1 - First miscellaneous flag\nECVTCLNU EQUOVR ,,v,ECVTFLG1\n.*\n.* Generate ECVT mapping\n         MNOTE *,'Including ECVT mapping macro'\n         IHAECVT DSECT=YES,            * Generate ECVT                 *\n               LIST=YES                * and unchanged PRINT option\n         EQUOVR *END\n*\nECVT     DSECT ,                       * Reset to ECVT dsect\n         ORG   ,                       *\nECVT_LEN EQU   *-ECVT                  * Length of ECVT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPEPAL  0100-20096-20096-0111-00132-00132-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the External Parameter Area and the parameter list\n.* for the Locate mode SWA manager (SWAREQ).\n.*\n&LABEL   MAPEPAL &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPEPAL                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPEPAL        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'EPAL').EMBED\n         AIF   ('&CB' EQ 'EPAX').EMBED\n         AIF   ('&CB' EQ 'SWAREQPL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded deinition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPEPAL).MEND\n&BXA_MAC_MAPEPAL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_EPAL\n         GBLC  &BXA_CB_EPAX\n         GBLC  &BXA_CB_SWAREQPL\n&BXA_CB_EPAL     SETC 'EPAL'\n&BXA_CB_EPAX     SETC 'EPAL'\n&BXA_CB_SWAREQPL SETC 'EPAL'\n.*\n.* Change field definitions\nSWVA     DSOVR XL3                     * Change char to hex field\nSWBLKID  DSOVR XL1                     * Change char to hex field\nSWLVERS  DSOVR XL2                     * Change char to hex field\n.*\n         MNOTE *,'Including IEFZB505 mapping macro'\n         IEFZB505 LOCEPAX=YES          * Include extended EPAL fields\n         DSOVR *END\n.*\nZB505    DSECT ,                       * Reset to macro-defined DSECT\nEPAL     EQU   SWAEPA,,C'X'            * Define USING labels for EPAL\nEPAL_LEN EQU   L'SWAEPA                * Length of EPAL\nEPAX     EQU   SWAEPAX,,C'X'           *    and for EPAX\nEPAX_LEN EQU   L'SWAEPAX               * Length of eXtended EPAL\n.*\n.* Generate mapping macro for the SWAREQ parmlist\n         MNOTE *,'Generating SWAREQPL mapping macro'\nSWAREQPL DSECT\nSWARQPL  DS    0XL8                    * Define whole SWAREQPL\nSWAEPAL  DS    AL4                     * Pointer to EPAL/EPAX\nSWAFCD   DS    AL4                     * Pointer to function code\n.*                                     * CL2'RL' or CL2'WL'\nSWAREQPL_LEN EQU *-SWAREQPL            * Length of parmlist\n.*\n.* Include Equates in IEFQMIDS\n         GENMAPS (QMIDS)\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPEQU   0100-20096-20096-0111-00111-00111-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for equates\n.*\n         MAPEQU\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPEQU                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Prevent multiple expansion\n         GBLB  &BXA_MAC_MAPEQU\n         AIF   (&BXA_MAC_MAPEQU).MEND\n&BXA_MAC_MAPEQU SETB  1\n.*\n         MNOTE *,'Generating Equates'\n*\n* Equates for registers\n*\n         GENMAPS (REGS,BITS)\n.*\n.* Put equates in a DSECT to prevent warning messages in ASM listing\nBXA_EQU  DSECT\n*\n* Equates for masks\n*\nNNNN     EQU   B'0000'                 *\nNNNY     EQU   B'0001'                 *\nNNYN     EQU   B'0010'                 *\nNNYY     EQU   B'0011'                 *\nNYNN     EQU   B'0100'                 *\nNYNY     EQU   B'0101'                 *\nNYYN     EQU   B'0110'                 *\nNYYY     EQU   B'0111'                 *\nYNNN     EQU   B'1000'                 *\nYNNY     EQU   B'1001'                 *\nYNYN     EQU   B'1010'                 *\nYNYY     EQU   B'1011'                 *\nYYNN     EQU   B'1100'                 *\nYYNY     EQU   B'1101'                 *\nYYYN     EQU   B'1110'                 *\nYYYY     EQU   B'1111'                 *\nNOBYTE   EQU   NNNN                    *\nALLBYTES EQU   YYYY                    *\n*\n* Equates for ALETs\n*\nALET_PRIM EQU  0                       * Alet for PASN\nALET_SEC  EQU  1                       * Alet for SASN\nALET_HOME EQU  2                       * ALET for HASN\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPEVNT  0100-20096-20096-0111-00118-00118-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the EVENTS control block\n.*\n&LABEL   MAPEVNT &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPEVNT                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPEVNT        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'EVNT').EMBED\n         AIF   ('&CB' EQ 'EVNTENTRY').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPEVNT).MEND\n&BXA_MAC_MAPEVNT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_EVNT\n         GBLC  &BXA_CB_EVNTENTRY\n&BXA_CB_EVNT SETC 'EVNT'\n&BXA_CB_EVNTENTRY SETC 'EVNT'\n.*\n.* EVNTFLG1 - EVENT TABLE FLAGS\nEVNTUPR  EQUOVR ,,b,EVNTFLG1\n.*\n.* EVNTFLGS - EVENT ENTRY FLAGS\nEVNTENDL EQUOVR ,,b,EVNTFLGS\n.*\n         MNOTE *,'Including IHAEVNT mapping macro'\n         IHAEVNT ,                     *\n         EQUOVR *END\n.*\nEVNT     DSECT ,                       * Resume EVNT DSECT\n         ORG\nEVNT_LEN EQU   EVNTHEND-EVNT           * Length of EVNT header\n.*\nEVNTENTRY EQU  EVNTENTY                * Label for event entry\nEVNTENTRY_LEN EQU *-EVNTENTY           * Length of EVNT entry\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPFRRPL 0100-20096-20096-0111-00115-00115-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for FRR parameter area\n.*\n&LABEL   MAPFRRPL &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPFRRPL               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPFRRP        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'FRRP').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPFRRP).MEND\n&BXA_MAC_MAPFRRP SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_FRRP\n&BXA_CB_FRRP SETC 'FRRP'\n.*\n         MNOTE *,'Generating DSECT for FRR parameter area'\n*\n* DSECT for FRR parameter area\n*\nFRRPL    DSECT\nFRRPLPRM DS    A                       * Ptr to SRB paramlist\nFRRPLSRB DS    A                       * Ptr to SRB\nFRRPLWRK DS    A                       * Ptr to workarea of SRB routine\nFRRPLWSZ DS    H                       * Size of workarea\n         DS    0F                      * Re-align\n         DS    XL8                     * Reserved\n*\n* Reset location counter to end\n         ORG\n         DS    0F                      * Align\nFRRPL_LEN EQU  *-FRRPL                 *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPFRRS  0100-20096-20096-0111-00147-00147-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Function Recovery Routine Stack\n.*\n&LABEL   MAPFRRS &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPFRRS                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPFRRS        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'FRRS').EMBED\n         AIF   ('&CB' EQ 'FRRSENTR').EMBED\n         AIF   ('&CB' EQ 'FRRSXENT').EMBED\n         AIF   ('&CB' EQ 'FRRSXSTK').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPFRRS).MEND\n&BXA_MAC_MAPFRRS SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_FRRS\n         GBLC  &BXA_CB_FRRSENTR\n         GBLC  &BXA_CB_FRRSXENT\n         GBLC  &BXA_CB_FRRSXSTK\n&BXA_CB_FRRS SETC 'FRRS'\n&BXA_CB_FRRSENTR SETC 'FRRS'\n&BXA_CB_FRRSXENT SETC 'FRRS'\n&BXA_CB_FRRSXSTK SETC 'FRRS'\n.*\n.* FRRSFRA1 - LOW ORDER BYTE OF FRR ADDRESS\nFRRSXFLG EQUOVR ,,b,FRRSFRA1\n.*\n.* FRRSFLG1 - RECURSION FLAGS USED BY RTM\nFRRSRCUR EQUOVR ,,b,FRRSFLG1\nFRRSNEST EQUOVR ,,b,FRRSFLG1\nFRRSNLCL EQUOVR ,,b,FRRSFLG1\nFRRSNGLB EQUOVR ,,b,FRRSFLG1\nFRRSNRTY EQUOVR ,,b,FRRSFLG1\n.*\n.* FRRSFLG4 - FLAGS TO INDICATE OPTIONS CHOSEN\nFRRSEUT  EQUOVR ,,b,FRRSFLG4\nFRRSNCNL EQUOVR ,,b,FRRSFLG4\nFRRSFULL EQUOVR ,,b,FRRSFLG4\nFRRSPRIM EQUOVR ,,b,FRRSFLG4\nFRRSLCL  EQUOVR ,,b,FRRSFLG4\nFRRSGLB  EQUOVR ,,b,FRRSFLG4\n.*\n.* IHAFRRS specifies several EQUates before its DSECT statement\nFRRS     DSECT ,                       * Pre-start FRRS DSECT\n         MNOTE *,'Including IHAFRRS mapping macro'\n         IHAFRRS ,                     *\n         EQUOVR *END\n*\nFRRS     DSECT ,                       * Resume FRRS DSECT\n         ORG   ,                       *\nFRRS_LEN EQU   *-FRRS                  * Length of FRRS\n*\nFRRSENTR DSECT ,                       * Resume FRRS entry\n         ORG   ,                       *\nFRRSENTR_LEN EQU *-FRRSENTR            * Length of FRRSENTR\n*\nFRRSXENT DSECT ,                       * Resume FRRS entry extension\n         ORG   ,                       *\nFRRSXENT_LEN EQU *-FRRSXENT            * Length of FRRSXENT\n*\nFRRSXSTK DSECT ,                       * Resume FRRS extension\n         ORG   ,                       *\nFRRSXSTK_LEN EQU *-FRRSXSTK            * Length of FRRSXSTK\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPGVT   0100-20096-20096-0111-00176-00176-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the GRS Vector Table\n.*\n&LABEL   MAPGVT &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPGVT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPGVT         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'GVT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPGVT).MEND\n&BXA_MAC_MAPGVT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_GVT\n&BXA_CB_GVT SETC 'GVT'\n.*\n.* GVTGSFLG - GRS GENERAL STATUS FLAGS\nGVTGRSAS EQUOVR ,,b,GVTGSFLG\nGVTGRSNA EQUOVR ,,b,GVTGSFLG\nGVTGRSPC EQUOVR ,,b,GVTGSFLG\nGVTPRGOK EQUOVR ,,b,GVTGSFLG\nGVTNCMDR EQUOVR ,,b,GVTGSFLG\nGVTEXRES EQUOVR ,,b,GVTGSFLG\nGVTARQA  EQUOVR ,,b,GVTGSFLG\n.*\n.* GVTQSFLG - GRS QUEUE STATUS FLAGS\nGVTGQDMG EQUOVR ,,b,GVTQSFLG\nGVTLQDMG EQUOVR ,,b,GVTQSFLG\nGVTQMRGA EQUOVR ,,b,GVTQSFLG\n.*\n.* GVTGRSOP - GRS OPTION FLAGS\nGVTSTART EQUOVR ,,b,GVTGRSOP\nGVTJOIN  EQUOVR ,,b,GVTGRSOP\nGVTNONE  EQUOVR ,,b,GVTGRSOP\nGVTTRYJN EQUOVR ,,b,GVTGRSOP\nGVTSTAR  EQUOVR ,,b,GVTGRSOP\n.*\n.* GVTVFLAG - GRS VALIDATION FLAGS\nGVTRNLVC EQUOVR ,,b,GVTVFLAG\nGVTVERNL EQUOVR ,,b,GVTVFLAG\nGVTVIRNL EQUOVR ,,b,GVTVFLAG\nGVTVCRNL EQUOVR ,,b,GVTVFLAG\nGVTRNLEA EQUOVR ,,b,GVTVFLAG\n.*\n.* GVTGRSRP - GRS RING PROCESSING FLAGS\nGVTNCOMM EQUOVR ,,b,GVTGRSRP\nGVTMAINR EQUOVR ,,b,GVTGRSRP\nGVTINACT EQUOVR ,,b,GVTGRSRP\nGVTOBSQD EQUOVR ,,b,GVTGRSRP\nGVTAURST EQUOVR ,,b,GVTGRSRP\nGVTJSRBS EQUOVR ,,b,GVTGRSRP\nGVTAURJN EQUOVR ,,b,GVTGRSRP\n.*\n.* GVTPRMLB - GRS PARMLIB PROCESSING STATUS\nGVTCNFER EQUOVR ,,b,GVTPRMLB\nGVTRNLER EQUOVR ,,b,GVTPRMLB\nGVTNOCTC EQUOVR ,,b,GVTPRMLB\n.*\n.* GVTCSFLG - Compare and swap flags\nGVTSYNCH EQUOVR ,,b,GVTCSFLG\n.*\n.* GVTMREAT - MAINRING RSA EXPECTED ARRIVAL TIME\nGVTRSAST EQUOVR ,,b,GVTMREAT+7\n.*\n.* GVTTWEAK -\nGVTSP18I EQUOVR ,,b,GVTTWEAK\n.*\n.* GVTTFLAG - GRS trace flags\nGVTTCNTL EQUOVR ,,b,GVTTFLAG\nGVTTRSA  EQUOVR ,,b,GVTTFLAG\nGVTTSIGN EQUOVR ,,b,GVTTFLAG\nGVTTREQ  EQUOVR ,,b,GVTTFLAG\nGVTTMON  EQUOVR ,,b,GVTTFLAG\n.*\n.* GVTXCFFL - GRS XCF Flags\nGVTMULTS EQUOVR ,,b,GVTXCFFL\n.*\n.* GVTFLAGS - FLags\nGVTNOQRT EQUOVR ,,b,GVTFLAGS\nGVTSQVAL EQUOVR ,,b,GVTFLAGS\nGVTRNLIP EQUOVR ,,b,GVTFLAGS\n.*\n.* GVTITWRK - Initialization Task work flags\nGVTSRLCK EQUOVR ,,b,GVTITWRK\nGVTSRRNL EQUOVR ,,b,GVTITWRK\n.*\n         MNOTE *,'Including ISGGVT mapping macro'\n         ISGGVT ,\n         EQUOVR *END\n*\nGVT      DSECT ,                       * Resume GVT DSECT\n         ORG\nGVT_LEN  EQU   *-GVT                   * Length of GVT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPGVTX  0100-20096-20096-0111-00131-00131-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the GRS Vector Table eXtension\n.*\n&LABEL   MAPGVTX &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPGVTX                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPGVTX        * Map has been generated?\n         GBLC  &BXA_PGM_TITLE          * Title for the listing\n         GBLB  &SP_SHOWALL             * Show all statements?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'GVTX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPGVTX).MEND\n&BXA_MAC_MAPGVTX SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_GVTX\n&BXA_CB_GVTX SETC 'GVTX'\n.*\n.* GVTX_MIG_FLAGS - Migration Bit Flags\nGVTX_STARMIGRATIONINPROGRESS EQUOVR ,,b,GVTX_MIG_FLAGS\nGVTX_STARMIGINITIATOR        EQUOVR ,,b,GVTX_MIG_FLAGS\nGVTX_SYSFAILUREINMIGRATION   EQUOVR ,,b,GVTX_MIG_FLAGS\nGVTX_NO_STARMIG_BACKOFF      EQUOVR ,,b,GVTX_MIG_FLAGS\nGVTX_STARMIG_LEFT_SYSGRS     EQUOVR ,,b,GVTX_MIG_FLAGS\nGVTX_STARMIG_POPULATION      EQUOVR ,,b,GVTX_MIG_FLAGS\n.*\n.* GVTX_STARSETGRSRNLFLAGS - Dynamic RNL flags\nGVTX_STARSETGRSRNLINPROGRESS EQUOVR ,,b,GVTX_STARSETGRSRNLFLAGS\nGVTX_STARSETGRSRNLINITIATOR  EQUOVR ,,b,GVTX_STARSETGRSRNLFLAGS\nGVTX_READYTOCUTOVER          EQUOVR ,,b,GVTX_STARSETGRSRNLFLAGS\nGVTX_CANCELBYINITIATOR       EQUOVR ,,b,GVTX_STARSETGRSRNLFLAGS\n.*\n         MNOTE *,'Including ISGGVTX mapping macro'\n         ISGGVTX ,\n         EQUOVR *END\n*\n.* GVTX_LEN defined in ISGGVTX between OS/390 V2R6 and z/OS V1R5\n.* GVTX     DSECT ,                       * Resume GVTX DSECT\n.*          ORG\n.* GVTX_LEN EQU   *-GVTX                  * Length of GVTX\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n         TITLE '&BXA_PGM_TITLE'\n         AIF   (&SP_SHOWALL).TITLE\n.* Generate comment line in stead of a MNOTE line\n*\n         AGO   .TITLEOK\n.TITLE   ANOP\n         MNOTE *,'Previous STMT: TITLE ''&BXA_PGM_TITLE'''\n.TITLEOK ANOP\n.*\n.MEND    MEND\n./ ADD NAME=MAPIEANT 0100-20096-20096-0111-00134-00134-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for Name/Token callable services\n.*\n&LABEL   MAPIEANT &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPIEANT               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPIEANT       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'NTCRPL').EMBED\n         AIF   ('&CB' EQ 'NTDLPL').EMBED\n         AIF   ('&CB' EQ 'NTRTPL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPIEANT).MEND\n&BXA_MAC_MAPIEANT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_NTCRPL\n         GBLC  &BXA_CB_NTDLPL\n         GBLC  &BXA_CB_NTRTPL\n&BXA_CB_NTCRPL SETC 'IEANT'\n&BXA_CB_NTDLPL SETC 'IEANT'\n&BXA_CB_NTRTPL SETC 'IEANT'\n.*\n         MNOTE *,'Including IEANTASM mapping macro'\n.*\n.* Put equates in a DSECT to prevent warning messages in ASM listing\nBXA_EQU  DSECT\n         IEANTASM ,                    *\n*\n         ORG   ,                       *\n*\n* Plist for IEANTCR\nNTCRPL   DSECT\nNTCRLVL  DS    AL4                     * Level: pointer to fullword\nNTCRNAM  DS    AL4                     * Token name: pointer to CL16\nNTCRTOK  DS    AL4                     * Token value: pointer to XL16\nNTCRPOPT DS    AL4                     * Persist option: pointer to F\nNTCRRCD  DS    AL4                     * Return value: pointer to F\n*\n* Plist for IEANTRT\nNTRTPL   DSECT\nNTRTLVL  DS    AL4                     * Level: pointer to fullword\nNTRTNAM  DS    AL4                     * Token name: pointer to CL16\nNTRTTOK  DS    AL4                     * Token value: pointer to XL16\nNTRTRCD  DS    AL4                     * Return value: pointer to F\n*\n* Plist for IEANTDL\nNTDLPL   DSECT\nNTDLLVL  DS    AL4                     * Level: pointer to fullword\nNTDLNAM  DS    AL4                     * Token name: pointer to CL16\nNTDLRCD  DS    AL4                     * Return value: pointer to F\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPIECEQ 0100-20096-20096-0111-00186-00186-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Open/Close/EOV equates\n.*\n         MAPIECEQ\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPIECEQ               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPIECEQ\n         AIF   (&BXA_MAC_MAPIECEQ).MEND\n&BXA_MAC_MAPIECEQ SETB 1               * Expansion done\n.*\n         GENMAPS (DCB,DEB,ECB,JFCB,REGS,UCB)\n.*\n.* Put equates in a DSECT to prevent warning messages\nBXA_EQU  DSECT ,                       *\n.*\n.* Suppress equates for R0 thru R9: these are defined in MAPREGS\n.* For all other register equates, the equates must be changed so they\n.* no longer equate a numeric literal, but a pre-defined register.\nR0       EQUOVR *SUPPRESS              *\nR1       EQUOVR *SUPPRESS              *\nR2       EQUOVR *SUPPRESS              *\nR3       EQUOVR *SUPPRESS              *\nR4       EQUOVR *SUPPRESS              *\nR5       EQUOVR *SUPPRESS              *\nR6       EQUOVR *SUPPRESS              *\nR7       EQUOVR *SUPPRESS              *\nR8       EQUOVR *SUPPRESS              *\nR9       EQUOVR *SUPPRESS              *\nRA       EQUOVR R10                    *\nRB       EQUOVR R11                    *\nRC       EQUOVR R12                    *\nRD       EQUOVR R13                    *\n.*       EQUOVR R14                    * RE not defined in IECEQU\nRF       EQUOVR R15                    *\nRDCB     EQUOVR ,,g                    *\nRACB     EQUOVR ,,g                    *\nRBASE    EQUOVR ,,g                    *\nRCORE    EQUOVR ,,g                    *\nRES      EQUOVR ,,g                    *\nRPAR     EQUOVR ,,g                    *\nRWTG     EQUOVR ,,g                    *\nRPARC    EQUOVR ,,g                    *\nRWTGC    EQUOVR ,,g                    *\nRTIOT    EQUOVR ,,g                    *\nRUCB     EQUOVR ,,g                    *\nRDEB     EQUOVR ,,g                    *\nRET      EQUOVR ,,g                    *\n.*\nALLBITS  EQUOVR *SUPPRESS              * ALLBITS defined in MAPBITS\nDCBDEVTP EQUOVR *NEWNAME,DCBDEVTA      * DCBDEVTP defined in DCBD      *\n                                       * DCBDEVTA used for tape equate\n.*\nDEBTAMID EQUOVR *SUPPRESS              * DEBTAMID defined in MAPDEB\nDEBVAMID EQUOVR *SUPPRESS              * DEBVAMID defined in MAPDEB\nDEBPWCKD EQUOVR *SUPPRESS              * DEBPWCKD defined in MAPDEB\nDEBF1CEV EQUOVR *SUPPRESS              * DEBF1DEV defined in MAPDEB\n.*\n.*** DCBDEN INDICATORS\nDX6250   EQUOVR ,,v,DCBDEN\nDEN6250  EQUOVR ,,v,DCBDEN\nDEN1600  EQUOVR ,,v,DCBDEN\nDEN800   EQUOVR ,,v,DCBDEN\nDCBDEN08 EQUOVR ,,v,DCBDEN\nDCBDEN05 EQUOVR ,,v,DCBDEN\nDXTRTMSK EQUOVR ,,v,DCBDEN\n.*** DCBDSORG FIELDS                     DATA SET ORGANIZATION\nDCBORGCQ EQUOVR ,,b,DCBDSORG\nDCBORGMQ EQUOVR ,,b,DCBDSORG\n.*** DCBMACRF+1 (DCBMACR+1) INDICATORS   EXCP ACCESS METHOD\nDCBMDEV  EQUOVR ,,b,DCBMACR1\n.*** DCBDEVT INDICATORS\nDCBDEVTA EQUOVR ,,v,DCBDEVT\nDCBDEVDA EQUOVR ,,v,DCBDEVT\n.*** DCBUSASI INDICATORS\nDCBUSAON EQUOVR ,,b,DCBUSASI\n.*** DEBDEBID\nDEBIDENT EQUOVR ,,v,DEBDEBID            DEB IDENTIFIER\n.*** DEBOPATB INDICATORS\nDEBOPABE EQUOVR ,,b,DEBOPATB\nDEBOPLV  EQUOVR ,,b,DEBOPATB\nDEBOPRRD EQUOVR ,,b,DEBOPATB\nDEBOPOUT EQUOVR ,,b,DEBOPATB\nDEBOPOIN EQUOVR ,,b,DEBOPATB\nDEBOPUPD EQUOVR ,,b,DEBOPATB\nDEBOPIO  EQUOVR ,,b,DEBOPATB\nDEBOPRBK EQUOVR ,,b,DEBOPATB\n.*****    JFCB EQUATES\nJFCBUL   EQUOVR ,,b,JFCBLTYP\nCLRSCTY  EQUOVR ,,b,JFCBIND2\n.* JFCBMASK+0\nJFCXLRIM EQUOVR ,,b,JFCBMASK\nJFCMBLKD EQUOVR ,,b,JFCBMASK\n.* JFCBMASK+1\nJFCMBFOF EQUOVR ,,b,JFCBMASK+1\n.* JFCBMASK+2\nJFCMBLKJ EQUOVR ,,b,JFCBMASK+2\n.* JFCBMASK+4\nJFCMJMOD EQUOVR ,,b,JFCBMASK+4\nJFCMDMOD EQUOVR ,,b,JFCBMASK+4\nJFCMNULL EQUOVR ,,b,JFCBMASK+4\nJFCMBPAM EQUOVR ,,b,JFCBMASK+4\nJFCMISAM EQUOVR ,,b,JFCBMASK+4\nJFCMPSWD EQUOVR ,,b,JFCBMASK+4\nJFCMABND EQUOVR ,,b,JFCBMASK+4\nJFCMVSEQ EQUOVR ,,b,JFCBMASK+4\n.* JFCBMASK+5\nDSTRYL0P EQUOVR ,,b,JFCBMASK+5\nJFCSNSVL EQUOVR ,,b,JFCBMASK+5\n.* JFCBMASK+7\nJFCMDSPM EQUOVR ,,b,JFCBMASK+7\nJFCMDSPO EQUOVR ,,b,JFCBMASK+7\nJFCMVSAM EQUOVR ,,b,JFCBMASK+7\nJFCMAMPF EQUOVR ,,b,JFCBMASK+7\n.*****    ECB-ORIENTED EQUATES\nECBNOERR EQUOVR ,,b,ECBCC\n.*\n         MNOTE *,'Including IECEQU macro'\n         IECEQU AOS=YES                *\n         EQUOVR *END                   *\n.*\n         ORG   ,                       *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPIHSA  0100-20096-20096-0111-00109-00109-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Interrupt Handler Save Area\n.*\n&LABEL   MAPIHSA &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPIHSA                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPIHSA        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'IHSA').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPIHSA).MEND\n&BXA_MAC_MAPIHSA SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_IHSA\n&BXA_CB_IHSA SETC 'IHSA'\n.*\n.* IHSAFLGS - IHSA FLAGS\nIHSANSS  EQUOVR ,,b,IHSAFLGS\n.*\n         MNOTE *,'Including IHAIHSA mapping macro'\n         IHAIHSA LIST=YES              * Generate IHSA\n         EQUOVR *END\n*\nIHSA     DSECT ,                       * Resume IHSA DSECT\n         ORG   ,                       *\nIHSA_LEN EQU   *-IHSA                  * Length of IHSA\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPIOB   0100-20096-20096-0111-00328-00328-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Input/Output Block\n.*\n&LABEL   MAPIOB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPIOB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPIOB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'IOB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPIOB).MEND\n&BXA_MAC_MAPIOB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_IOB\n&BXA_CB_IOB SETC 'IOB'\n.*\n.* IOBCFLG1 - I/O INDICATORS\nIOBV6CHN EQUOVR ,,b,IOBCFLG1\nIOBRSV02 EQUOVR ,,b,IOBCFLG1\nIOBRSV03 EQUOVR ,,b,IOBCFLG1\nIOBRSV04 EQUOVR ,,b,IOBCFLG1\nIOBPTST  EQUOVR ,,b,IOBCFLG1\nIOBABAPP EQUOVR ,,b,IOBCFLG1\nIOBRSTCH EQUOVR ,,b,IOBCFLG1\nIOBPCI   EQUOVR ,,b,IOBCFLG1\n.*\n.* IOBNFLG1 - FLAG BYTE\nIOBPRTOV EQUOVR ,,b,IOBNFLG1\nIOBSEGMT EQUOVR ,,b,IOBNFLG1\nIOBWRITE EQUOVR ,,b,IOBNFLG1\nIOBREAD  EQUOVR ,,b,IOBNFLG1\nIOBUPDAT EQUOVR ,,b,IOBNFLG1\nIOBBKSPC EQUOVR ,,b,IOBNFLG1\nIOBSPAN  EQUOVR ,,b,IOBNFLG1\nIOBUPERR EQUOVR ,,b,IOBNFLG1\nIOBFIRST EQUOVR ,,b,IOBNFLG1\n.*\n.* IOBDEQIN - DEQUEUE LOOP INDICATOR\nIOBDEQ   EQUOVR ,,b,IOBDEQIN\nIOBRSV07 EQUOVR ,,b,IOBDEQIN\nIOBRSV08 EQUOVR ,,b,IOBDEQIN\nIOBRSV09 EQUOVR ,,b,IOBDEQIN\nIOBRSV10 EQUOVR ,,b,IOBDEQIN\nIOBRSV11 EQUOVR ,,b,IOBDEQIN\nIOBRSV12 EQUOVR ,,b,IOBDEQIN\nIOBRSV13 EQUOVR ,,b,IOBDEQIN\n.*\n.* IOBFLAG1 - FLAG BYTE 1\nIOBDATCH EQUOVR ,,b,IOBFLAG1\nIOBCMDCH EQUOVR ,,b,IOBFLAG1\nIOBERRTN EQUOVR ,,b,IOBFLAG1\nIOBRPSTN EQUOVR ,,b,IOBFLAG1\nIOBCYCCK EQUOVR ,,b,IOBFLAG1\nIOBFCREX EQUOVR ,,b,IOBFLAG1\nIOBIOERR EQUOVR ,,b,IOBFLAG1\nIOBUNREL EQUOVR ,,b,IOBFLAG1\nIOBRSTRT EQUOVR ,,b,IOBFLAG1\nIOBSPSVC EQUOVR ,,b,IOBFLAG1\n.*\n.* IOBFLAG2 - FLAG BYTE 2\nIOBHALT  EQUOVR ,,b,IOBFLAG2\nIOBSENSE EQUOVR ,,b,IOBFLAG2\nIOBPURGE EQUOVR ,,b,IOBFLAG2\nIOBRRT3  EQUOVR ,,b,IOBFLAG2\nIOBRDHA0 EQUOVR ,,b,IOBFLAG2\nIOBRRT2  EQUOVR ,,b,IOBFLAG2\nIOBALTTR EQUOVR ,,b,IOBFLAG2\nIOBSKUPD EQUOVR ,,b,IOBFLAG2\nIOBSTATO EQUOVR ,,b,IOBFLAG2\nIOBPNCH  EQUOVR ,,b,IOBFLAG2\n.*\n.* IOBSENS0 - FIRST SENSE BYTE\nIOBS0B0  EQUOVR ,,b,IOBSENS0\nIOBS0B1  EQUOVR ,,b,IOBSENS0\nIOBS0B2  EQUOVR ,,b,IOBSENS0\nIOBS0B3  EQUOVR ,,b,IOBSENS0\nIOBS0B4  EQUOVR ,,b,IOBSENS0\nIOBS0B5  EQUOVR ,,b,IOBSENS0\nIOBS0B6  EQUOVR ,,b,IOBSENS0\nIOBS0B7  EQUOVR ,,b,IOBSENS0\nIOBSNSC9 EQUOVR ,,b,IOBSENS0\n.*\n.* IOBSENS1 - SECOND SENSE BYTE\nIOBS1B0  EQUOVR ,,b,IOBSENS1\nIOBS1B1  EQUOVR ,,b,IOBSENS1\nIOBS1B2  EQUOVR ,,b,IOBSENS1\nIOBS1B3  EQUOVR ,,b,IOBSENS1\nIOBS1B4  EQUOVR ,,b,IOBSENS1\nIOBS1B5  EQUOVR ,,b,IOBSENS1\nIOBS1B6  EQUOVR ,,b,IOBSENS1\nIOBS1B7  EQUOVR ,,b,IOBSENS1\n.*\n.* IOBFL3 - FLAG 3 - STATUS ERROR COUNTS FOR MAGNETIC\nIOBCCC   EQUOVR ,,b,IOBFL3\nIOBICC   EQUOVR ,,b,IOBFL3\nIOBCDC   EQUOVR ,,b,IOBFL3\nIOBACU   EQUOVR ,,b,IOBFL3\nIOBCNC   EQUOVR ,,b,IOBFL3\nIOBSDR   EQUOVR ,,b,IOBFL3\nIOBMSG   EQUOVR ,,b,IOBFL3\nIOBICL   EQUOVR ,,b,IOBFL3\nIOBJAM   EQUOVR ,,b,IOBFL3\nIOBLOG   EQUOVR ,,b,IOBFL3\n.*\n.* IOBUSTAT - CSW UNIT STATUS FLAGS\nIOBUSB0  EQUOVR ,,b,IOBUSTAT\nIOBUSB1  EQUOVR ,,b,IOBUSTAT\nIOBUSB2  EQUOVR ,,b,IOBUSTAT\nIOBUSB3  EQUOVR ,,b,IOBUSTAT\nIOBUSB4  EQUOVR ,,b,IOBUSTAT\nIOBUSB5  EQUOVR ,,b,IOBUSTAT\nIOBUSB6  EQUOVR ,,b,IOBUSTAT\nIOBUSB7  EQUOVR ,,b,IOBUSTAT\n.*\n.* IOBCSTAT - CSW CHANNEL STATUS FLAGS (3800)\nIOBCSB0  EQUOVR ,,b,IOBCSTAT\nIOBCSB1  EQUOVR ,,b,IOBCSTAT\nIOBCSB2  EQUOVR ,,b,IOBCSTAT\nIOBCSB3  EQUOVR ,,b,IOBCSTAT\nIOBCSB4  EQUOVR ,,b,IOBCSTAT\nIOBCSB5  EQUOVR ,,b,IOBCSTAT\nIOBCSB6  EQUOVR ,,b,IOBCSTAT\nIOBCSB7  EQUOVR ,,b,IOBCSTAT\n.*\n.* Unnamed field - LAST TWO BYTES OF IOBCSW\nIOBCSTAT+1 DSOVR *NEWNAME,IOBRESCT     * Residual count after read\n.*\n.* IOBFLAG4 - FLAG BYTE\nIOBGDPOL EQUOVR ,,b,IOBFLAG4\nIOBCC3WE EQUOVR ,,b,IOBFLAG4\nIOBPMERR EQUOVR ,,b,IOBFLAG4\nIOBCEF   EQUOVR ,,b,IOBFLAG4\nIOBRSV41 EQUOVR ,,b,IOBFLAG4\nIOBRSV42 EQUOVR ,,b,IOBFLAG4\nIOBJES3I EQUOVR ,,b,IOBFLAG4\nIOBRSV44 EQUOVR ,,b,IOBFLAG4\n.*\n.* IOBBTAMF - FLAG BYTE FOR BTAM\nIOBPRMER EQUOVR ,,b,IOBBTAMF\nIOBINUSE EQUOVR ,,b,IOBBTAMF\nIOBRSV14 EQUOVR ,,b,IOBBTAMF\nIOBRSV15 EQUOVR ,,b,IOBBTAMF\nIOBRSV16 EQUOVR ,,b,IOBBTAMF\nIOBRSV17 EQUOVR ,,b,IOBBTAMF\nIOBRFTMG EQUOVR ,,b,IOBBTAMF\nIOBOLTST EQUOVR ,,b,IOBBTAMF\n.*\n.* IOBFL4 - FLAG 4 - SENSE ERROR COUNTS FOR MAGNETIC\nIOBOVR   EQUOVR ,,b,IOBFL4\nIOBREJ   EQUOVR ,,b,IOBFL4\nIOBDCK   EQUOVR ,,b,IOBFL4\nIOBBUS   EQUOVR ,,b,IOBFL4\nIOBEQP   EQUOVR ,,b,IOBFL4\nIOBENT   EQUOVR ,,b,IOBFL4\nIOBRSV47 EQUOVR ,,b,IOBFL4\nIOBRSV46 EQUOVR ,,b,IOBFL4\n.*\n.* IOBAMAF - SMS  DIAGNOSTICS BYTE TO DESCRIBE\nIOBBDFPL EQUOVR ,,v,IOBAMAF\nIOBPGMCK EQUOVR ,,v,IOBAMAF\nIOBBADRC EQUOVR ,,v,IOBAMAF\nIOBBADLT EQUOVR ,,v,IOBAMAF\nIOBNCRLT EQUOVR ,,v,IOBAMAF\nIOBPOUT  EQUOVR ,,v,IOBAMAF\nIOBOUTIO EQUOVR ,,v,IOBAMAF\nIOBRLTTB EQUOVR ,,v,IOBAMAF\nIOBFLOCK EQUOVR ,,v,IOBAMAF\nIOBNFILE EQUOVR ,,v,IOBAMAF\nIOBPAD   EQUOVR ,,v,IOBAMAF\nIOBMMERR EQUOVR ,,v,IOBAMAF\nIOBSHDW  EQUOVR ,,v,IOBAMAF\nIOBRBNNP EQUOVR ,,v,IOBAMAF\n.*\n.* IOBINDCT - INDICATORS\nIOBDEQCP EQUOVR ,,b,IOBINDCT\nIOBUNSCH EQUOVR ,,b,IOBINDCT\nIOBOVPTR EQUOVR ,,b,IOBINDCT\nIOBKEYAD EQUOVR ,,b,IOBINDCT\nIOBRSV27 EQUOVR ,,b,IOBINDCT\nIOBRSV28 EQUOVR ,,b,IOBINDCT\nIOBRSV29 EQUOVR ,,b,IOBINDCT\nIOBCHNNL EQUOVR ,,b,IOBINDCT\n.*\n.* IOBUNSQR - REASON FOR UNSCHEDULED QUEUE\nIOBCPBSY EQUOVR ,,b,IOBUNSQR\nIOBNTAV1 EQUOVR ,,b,IOBUNSQR\nIOBNTAV2 EQUOVR ,,b,IOBUNSQR\nIOBKNWR  EQUOVR ,,b,IOBUNSQR\nIOBKNRWR EQUOVR ,,b,IOBUNSQR\nIOBRSV30 EQUOVR ,,b,IOBUNSQR\nIOBRSV31 EQUOVR ,,b,IOBUNSQR\nIOBRSV32 EQUOVR ,,b,IOBUNSQR\n.*\n.* IOBSTATA - STATUS INDICATORS\nIOBAVLFL EQUOVR ,,b,IOBSTATA\nIOBRSV20 EQUOVR ,,b,IOBSTATA\nIOBRSV21 EQUOVR ,,b,IOBSTATA\nIOBRSV22 EQUOVR ,,b,IOBSTATA\nIOBRSV23 EQUOVR ,,b,IOBSTATA\nIOBRSV24 EQUOVR ,,b,IOBSTATA\nIOBRSV25 EQUOVR ,,b,IOBSTATA\nIOBRSV26 EQUOVR ,,b,IOBSTATA\n.*\n.* IOBDTYPE - THE TYPE OF REQUEST AND SPECIFIED OPTIONS\nIOBVERFY EQUOVR ,,b,IOBDTYPE\nIOBOVFLO EQUOVR ,,b,IOBDTYPE\nIOBEXTSC EQUOVR ,,b,IOBDTYPE\nIOBFDBCK EQUOVR ,,b,IOBDTYPE\nIOBACTAD EQUOVR ,,b,IOBDTYPE\nIOBDYNBF EQUOVR ,,b,IOBDTYPE\nIOBRDEXC EQUOVR ,,b,IOBDTYPE\nIOBRELBL EQUOVR ,,b,IOBDTYPE\n.*\n.* IOBDTYP2 - SECOND BYTE OF OPTIONS AND REQUESTS\nIOBSKEY  EQUOVR ,,b,IOBDTYP2\nIOBSBLKL EQUOVR ,,b,IOBDTYP2\nIOBSUFFX EQUOVR ,,b,IOBDTYP2\nIOBRQUST EQUOVR ,,b,IOBDTYP2\nIOBTYPE  EQUOVR ,,b,IOBDTYP2\nIOBADDTY EQUOVR ,,b,IOBDTYP2\nIOBRELEX EQUOVR ,,b,IOBDTYP2\n.*\n.* IOBSTAT1 - FLAG BYTE\nIOBABNRM EQUOVR ,,b,IOBSTAT1\nIOBNEWVL EQUOVR ,,b,IOBSTAT1\nIOBSYNCH EQUOVR ,,b,IOBSTAT1\nIOBPASS2 EQUOVR ,,b,IOBSTAT1\nIOBENQUE EQUOVR ,,b,IOBSTAT1\nIOBBUFF  EQUOVR ,,b,IOBSTAT1\nIOBADDVU EQUOVR ,,b,IOBSTAT1\nIOBSIORT EQUOVR ,,b,IOBSTAT1\n.*\n.* IOBREQ - REQUEST FLAGS\nIOBREC31 EQUOVR ,,b,IOBREQ\nIOBKEY31 EQUOVR ,,b,IOBREQ\nIOBDAT31 EQUOVR ,,b,IOBREQ\n.*\n         MNOTE *,'Including IEZIOB mapping macro'\n         IEZIOB ,\n         DSOVR *END\n         EQUOVR *END\n*\nIOB      DSECT ,                       * Resume IOB DSECT\n         ORG\nIOB_LEN  EQU   *-IOB                   * Length of IOB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPIOQ   0100-20096-20096-0111-00133-00133-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the IOS Queue element\n.*\n&LABEL   MAPIOQ &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPIOQ                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPIOQ         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'IOQ').EMBED\n         AIF   ('&CB' EQ 'IOQE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPIOQ).MEND\n&BXA_MAC_MAPIOQ SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_IOQ\n         GBLC  &BXA_CB_IOQE\n&BXA_CB_IOQ SETC 'IOQ'\n&BXA_CB_IOQE SETC 'IOQ'\n.*\n.* IOQFLA - IOQ activity flag byte\nIOQACTV  EQUOVR ,,b,IOQFLA\nIOQMERGE EQUOVR ,,b,IOQFLA\nIOQPRVT  EQUOVR ,,b,IOQFLA\nIOQWLM   EQUOVR ,,b,IOQFLA\n.*\n.* IOQTYPE - Type of operation this IOQ represents.\nIOQSTRT  EQUOVR ,,v,IOQTYPE\nIOQSNS   EQUOVR ,,v,IOQTYPE\nIOQHLT   EQUOVR ,,v,IOQTYPE\nIOQCLR   EQUOVR ,,v,IOQTYPE\nIOQSTOR  EQUOVR ,,v,IOQTYPE\nIOQMDFY  EQUOVR ,,v,IOQTYPE\nIOQST1   EQUOVR ,,v,IOQTYPE\nIOQINCPT EQUOVR ,,v,IOQTYPE\n.*\n.* IOQSMGAL - IOQ allocation indication byte\nIOQALLOC EQUOVR ,,v,IOQTYPE\nIOQDORMT EQUOVR ,,v,IOQTYPE\n.*\n         MNOTE *,'Including IECDIOQ mapping macro'\n         IECDIOQ IOSIOQM=YES,IOSIOQME=YES\n         EQUOVR *END\n*\nIOQ      DSECT ,                       * Resume IOQ DSECT\n         ORG\nIOQ_LEN  EQU   *-IOQ                   * Length of IOQ\n*\nIOQE     DSECT ,                       * Resume IOQE DSECT\n         ORG\nIOQE_LEN EQU   *-IOQE                  * Length of IOQE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPIOSB  0100-20096-20096-0111-00353-00353-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the I/O Supervisor Block\n.*\n&LABEL   MAPIOSB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPIOSB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPIOSB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'IOSB').EMBED\n         AIF   ('&CB' EQ 'IOSX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPIOSB).MEND\n&BXA_MAC_MAPIOSB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_IOSB\n         GBLC  &BXA_CB_IOSX\n&BXA_CB_IOSB SETC 'IOSB'\n&BXA_CB_IOSX SETC 'IOSB'\n.*\n.* IOSFLA - Flag byte A\nIOSDCHN  EQUOVR ,,b,IOSFLA\nIOSCCHN  EQUOVR ,,b,IOSFLA\nIOSACHN  EQUOVR ,,b,IOSFLA\nIOSERR   EQUOVR ,,b,IOSFLA\nIOSSMDA  EQUOVR ,,b,IOSFLA\nIOSSMDB  EQUOVR ,,b,IOSFLA\nIOSEX    EQUOVR ,,b,IOSFLA\nIOSDOM   EQUOVR ,,b,IOSFLA\nIOSIOSB  EQUOVR ,,b,IOSFLA\n.*\n.* IOSFLB - Flag byte B\nIOSDIESE EQUOVR ,,b,IOSFLB\nIOSSDR   EQUOVR ,,b,IOSFLB\nIOSNOTRS EQUOVR ,,b,IOSFLB\nIOSRESRC EQUOVR ,,b,IOSFLB\nIOSIONRD EQUOVR ,,b,IOSFLB\nIOSMSG   EQUOVR ,,b,IOSFLB\nIOSBDCST EQUOVR ,,b,IOSFLB\nIOSLOG   EQUOVR ,,b,IOSFLB\n.*\n.* IOSFLC - Flag byte C\nIOSGDPLP EQUOVR ,,b,IOSFLC\nIOSVERIF EQUOVR ,,b,IOSFLC\nIOSCC3WE EQUOVR ,,b,IOSFLC\nIOSEXP   EQUOVR ,,b,IOSFLC\nIOSNORTY EQUOVR ,,b,IOSFLC\nIOSCTCNR EQUOVR ,,b,IOSFLC\nIOSGDP   EQUOVR ,,b,IOSFLC\n.*\n.* IOSPROC - IOS special processing procedures\nIOSAPCI  EQUOVR ,,v,IOSPROC\nIOSATTN  EQUOVR ,,v,IOSPROC\nIOSAPURG EQUOVR ,,v,IOSPROC\nIOSAWTO  EQUOVR ,,v,IOSPROC\nIOSADDR  EQUOVR ,,v,IOSPROC\nIOSADIER EQUOVR ,,v,IOSPROC\nIOSAUR   EQUOVR ,,v,IOSPROC\nIOSAST1  EQUOVR ,,v,IOSPROC\nIOSASNRQ EQUOVR ,,v,IOSPROC\nIOSACLR  EQUOVR ,,v,IOSPROC\nIOSAHALT EQUOVR ,,v,IOSPROC\nIOSAMOD  EQUOVR ,,v,IOSPROC\nIOSASTOR EQUOVR ,,v,IOSPROC\n.*\n.* IOSDVRID - Driver identification value\nIOSIOSID EQUOVR ,,v,IOSDVRID\nIOSMISID EQUOVR ,,v,IOSDVRID\nIOSXCPID EQUOVR ,,v,IOSDVRID\nIOSVSAID EQUOVR ,,v,IOSDVRID\nIOSATMID EQUOVR ,,v,IOSDVRID\nIOSTCMID EQUOVR ,,v,IOSDVRID\nIOSOLTID EQUOVR ,,v,IOSDVRID\nIOSFCHID EQUOVR ,,v,IOSDVRID\nIOSJESID EQUOVR ,,v,IOSDVRID\nIOSSS1ID EQUOVR ,,v,IOSDVRID\nIOSPRGID EQUOVR ,,v,IOSDVRID\nIOSVPSID EQUOVR ,,v,IOSDVRID\nIOSASMID EQUOVR ,,v,IOSDVRID\nIOSMDSID EQUOVR ,,v,IOSDVRID\nIOSAUSID EQUOVR ,,v,IOSDVRID\nIOSDYPID EQUOVR ,,v,IOSDVRID\nIOSDAVV  EQUOVR ,,v,IOSDVRID\nIOSDCSID EQUOVR ,,v,IOSDVRID\nIOSAOMID EQUOVR ,,v,IOSDVRID\nIOSSMSID EQUOVR ,,v,IOSDVRID\nIOSXCFID EQUOVR ,,v,IOSDVRID\nIOSCDRID EQUOVR ,,v,IOSDVRID\nIOSSLFID EQUOVR ,,v,IOSDVRID\nIOSV33ID EQUOVR ,,v,IOSDVRID\nIOSCLRID EQUOVR ,,v,IOSDVRID\nIOSSCRID EQUOVR ,,v,IOSDVRID\nIOSV16ID EQUOVR ,,v,IOSDVRID\nIOSAPRID EQUOVR ,,v,IOSDVRID\nIOSMIHID EQUOVR ,,v,IOSDVRID\nIOSPRVID EQUOVR ,,v,IOSDVRID\nIOSRSVID EQUOVR ,,v,IOSDVRID\n.*\n.* IOSFLD - Flag byte D\nIOSNOINT EQUOVR ,,b,IOSFLD\nIOSMNORQ EQUOVR ,,b,IOSFLD\nIOSEPCIF EQUOVR ,,b,IOSFLD\nIOSCCWDS EQUOVR ,,b,IOSFLD\nIOSEPCIS EQUOVR ,,b,IOSFLD\nIOSLIOPF EQUOVR ,,b,IOSFLD\nIOSNOLL  EQUOVR ,,b,IOSFLD\nIOSBEXTF EQUOVR ,,b,IOSFLD\n.*\n.* IOSPKEY - Protect key of IOSPGAD\nIOSLCL   EQUOVR ,,b,IOSPKEY\nIOSIDR   EQUOVR ,,b,IOSPKEY\nIOSPGDPX EQUOVR ,,b,IOSPKEY\nIOSCHCMP EQUOVR ,,b,IOSPKEY\n.*\n.* IOSCOD - I/O completion code field\nIOSERRC  EQUOVR ,,v,IOSCOD\nIOSEXTC  EQUOVR ,,v,IOSCOD\nIOSDPXC  EQUOVR ,,v,IOSCOD\nIOSINTC  EQUOVR ,,v,IOSCOD\nIOSABNC  EQUOVR ,,v,IOSCOD\nIOSCD46  EQUOVR ,,v,IOSCOD\nIOSEXTRM EQUOVR ,,v,IOSCOD\nIOSPRGC  EQUOVR ,,v,IOSCOD\nIOSCNCLD EQUOVR ,,v,IOSCOD\nIOSPVTIO EQUOVR ,,v,IOSCOD\nIOSTAPEC EQUOVR ,,v,IOSCOD\nIOSIVEXP EQUOVR ,,v,IOSCOD\nIOSGDPCC EQUOVR ,,v,IOSCOD\nIOSGDPRD EQUOVR ,,v,IOSCOD\nIOSCD50  EQUOVR ,,v,IOSCOD\nIOSMIHCA EQUOVR ,,v,IOSCOD\nIOSMIHSP EQUOVR ,,v,IOSCOD\nIOSIOTCR EQUOVR ,,v,IOSCOD\nIOSCAPAS EQUOVR ,,v,IOSCOD\nIOSGDPWE EQUOVR ,,v,IOSCOD\nIOSFTCHC EQUOVR ,,v,IOSCOD\nIOSMIHC  EQUOVR ,,v,IOSCOD\nIOSXERPL EQUOVR ,,v,IOSCOD\nIOSFINTC EQUOVR ,,v,IOSCOD\nIOSNRMC  EQUOVR ,,v,IOSCOD\n.*\n.* IOSOPT - Options byte\nIOSBYP   EQUOVR ,,b,IOSOPT\nIOSDEP   EQUOVR ,,b,IOSOPT\nIOSQISCE EQUOVR ,,b,IOSOPT\nIOSPSLL  EQUOVR ,,b,IOSOPT\nIOSNERP  EQUOVR ,,b,IOSOPT\nIOSTSLL  EQUOVR ,,b,IOSOPT\nIOSAPR   EQUOVR ,,b,IOSOPT\nIOSRELSE EQUOVR ,,b,IOSOPT\n.*\n.* IOSOPT2 - Second option byte\nIOSF     EQUOVR ,,b,IOSOPT2\nIOSP     EQUOVR ,,b,IOSOPT2\nIOSI     EQUOVR ,,b,IOSOPT2\nIOSA     EQUOVR ,,b,IOSOPT2\nIOSSI    EQUOVR ,,b,IOSOPT2\nIOSZ     EQUOVR ,,b,IOSOPT2\nIOSE     EQUOVR ,,b,IOSOPT2\nIOSN     EQUOVR ,,b,IOSOPT2\n.*\n.* IOSCC - Start Subchannel deferred CC\nIOSCC3   EQUOVR ,,v,IOSCC\nIOSCC1   EQUOVR ,,v,IOSCC\nIOSCC0   EQUOVR ,,v,IOSCC\n.*\n.* IOSDSTAT - Device status\nIOSDSATN EQUOVR ,,b,IOSDSTAT\nIOSDSSM  EQUOVR ,,b,IOSDSTAT\nIOSDSCUE EQUOVR ,,b,IOSDSTAT\nIOSDSBSY EQUOVR ,,b,IOSDSTAT\nIOSDSCE  EQUOVR ,,b,IOSDSTAT\nIOSDSDE  EQUOVR ,,b,IOSDSTAT\nIOSDSUC  EQUOVR ,,b,IOSDSTAT\nIOSDSUEX EQUOVR ,,b,IOSDSTAT\n.*\n.* IOSSSTAT - Subchannel status\nIOSSSPCI EQUOVR ,,b,IOSSSTAT\nIOSSSIL  EQUOVR ,,b,IOSSSTAT\nIOSSSPGC EQUOVR ,,b,IOSSSTAT\nIOSSSPTC EQUOVR ,,b,IOSSSTAT\nIOSSSCDC EQUOVR ,,b,IOSSSTAT\nIOSSSCCC EQUOVR ,,b,IOSSSTAT\nIOSSSICC EQUOVR ,,b,IOSSSTAT\nIOSSSCC  EQUOVR ,,b,IOSSSTAT\n.*\n.* IOSSCHC0 - Subchannel Control - Byte 0\nIOSFC    EQUOVR ,,b,IOSSCHC0\nIOSFSSCH EQUOVR ,,b,IOSSCHC0\nIOSFHSCH EQUOVR ,,b,IOSSCHC0\nIOSFCSCH EQUOVR ,,b,IOSSCHC0\nIOSAC    EQUOVR ,,b,IOSSCHC0\nIOSARSCH EQUOVR ,,b,IOSSCHC0\nIOSASSCH EQUOVR ,,b,IOSSCHC0\nIOSAHSCH EQUOVR ,,b,IOSSCHC0\nIOSACSCH EQUOVR ,,b,IOSSCHC0\n.*\n.* IOSSCHC1 - Subchannel Control - byte 1\nIOSAC2   EQUOVR ,,b,IOSSCHC1\nIOSASUBA EQUOVR ,,b,IOSSCHC1\nIOSADEVA EQUOVR ,,b,IOSSCHC1\nIOSSSPND EQUOVR ,,b,IOSSCHC1\nIOSSC    EQUOVR ,,b,IOSSCHC1\nIOSSALRT EQUOVR ,,b,IOSSCHC1\nIOSSINTR EQUOVR ,,b,IOSSCHC1\nIOSSPRIM EQUOVR ,,b,IOSSCHC1\nIOSSSEC  EQUOVR ,,b,IOSSCHC1\nIOSSPNDG EQUOVR ,,b,IOSSCHC1\n.*\n.* IOSSNS - Sense data - 1st 2 bytes\nIOSSNSBD EQUOVR ,,v,IOSSNS\n.*\n.* IOSCKEY - On STARTIO- Channel program\nIOSIRBKY EQUOVR ,,b,IOSCKEY\nIOSS     EQUOVR ,,b,IOSCKEY\nIOSIRBL  EQUOVR ,,b,IOSCKEY\nIOSIRBCC EQUOVR ,,b,IOSCKEY\nIOSIRBC3 EQUOVR ,,b,IOSCKEY\nIOSIRBC1 EQUOVR ,,b,IOSCKEY\nIOSIRBC0 EQUOVR ,,v,IOSCKEY\n.*\n.* IOSAFLGS - Attention Flags\nIOSAINTR EQUOVR ,,b,IOSAFLGS\nIOSAINTE EQUOVR ,,b,IOSAFLGS\n.*\n.* IOSFLB field bit definitions -- Modify Subchannel requests only\nIOSMLPMO EQUOVR ,,b,IOSFLB\nIOSMPOMO EQUOVR ,,b,IOSFLB\nIOSMMMO  EQUOVR ,,b,IOSFLB\nIOSASIS  EQUOVR ,,b,IOSFLB\n.*\n.* IOSOPT\nIOSSYN   EQUOVR ,,b,IOSOPT\nIOSNOPTH EQUOVR ,,b,IOSOPT\n.*\n.* IOSOPT2\nIOSMISC  EQUOVR ,,b,IOSOPT2\nIOSME    EQUOVR ,,b,IOSOPT2\nIOSMLM   EQUOVR ,,b,IOSOPT2\nIOSMMM   EQUOVR ,,b,IOSOPT2\nIOSMLPM  EQUOVR ,,b,IOSOPT2\nIOSMMBI  EQUOVR ,,b,IOSOPT2\nIOSMPOM  EQUOVR ,,b,IOSOPT2\nIOSMD    EQUOVR ,,b,IOSOPT2\n.*\n.* IOSXFLG1 - Flag byte 1\nIOSXNORQ EQUOVR ,,b,IOSXFLG1\nIOSXGDPR EQUOVR ,,b,IOSXFLG1\nIOSXDDRT EQUOVR ,,b,IOSXFLG1\nIOSXMIHI EQUOVR ,,b,IOSXFLG1\nIOSXIOSI EQUOVR ,,b,IOSXFLG1\nIOSXDPSV EQUOVR ,,b,IOSXFLG1\nIOSXIOSN EQUOVR ,,b,IOSXFLG1\nIOSXATPS EQUOVR ,,b,IOSXFLG1\n.*\n.* IOSXFLG2 - Flag byte 2\nIOSXIOT  EQUOVR ,,b,IOSXFLG2\nIOSXNMIH EQUOVR ,,b,IOSXFLG2\n.*\n.* IOSXRCOD - Reason code detailing the IOSCOD value\nIOSXRC9  EQUOVR ,,v,IOSXRCOD\nIOSXRC10 EQUOVR ,,v,IOSXRCOD\n.*\n         MNOTE *,'Including IECDIOSB mapping macro'\n         IECDIOSB IOSIOSBE=YES         * Include IOSB extension\n         EQUOVR *END\n*\nIOSB     DSECT ,                       * Resume IOSB DSECT\n         ORG   ,                       *\nIOSB_LEN EQU   L'IOSBSTD               * Length of IOSB\nIOSX_LEN EQU   *-IOSB-IOSB_LEN         * Length of IOSb eXtension\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPJCT   0100-20096-20096-0111-00169-00169-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Job Control Table\n.*\n&LABEL   MAPJCT &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPJCT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPJCT         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ACT').EMBED\n         AIF   ('&CB' EQ 'JCT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPJCT).MEND\n&BXA_MAC_MAPJCT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ACT\n         GBLC  &BXA_CB_JCT\n&BXA_CB_ACT SETC 'JCT'\n&BXA_CB_JCT SETC 'JCT'\n.*\n.* JCTIDENT - JCT ID = 0\nJCTID EQUOVR ,,v,JCTIDENT\n.*\n.* JCTJSTAT - JOB STATUS INDICATORS\nJCTJSTPC EQUOVR ,,b,JCTJSTAT\nJCTABEND EQUOVR ,,b,JCTJSTAT\nINCMSTS  EQUOVR ,,b,JCTJSTAT\nINDMCTLG EQUOVR ,,b,JCTJSTAT\nINCMCAT  EQUOVR ,,b,JCTJSTAT\nINCMNSET EQUOVR ,,b,JCTJSTAT\n.*\n.* JCTJMGLV - 4 BITS FOR MESSAGE LEVEL -SET BY IEFVJA\nINCMMGL1 EQUOVR ,,b,JCTJMGLV\nINCMMGL2 EQUOVR ,,b,JCTJMGLV\nINCMALL  EQUOVR ,,b,JCTJMGLV\n.*\n.* JCTRSW1 - CHECKPOINT/RESTART SWITCHES\nJCTWARMS EQUOVR ,,b,JCTRSW1\nJCTSTERM EQUOVR ,,b,JCTRSW1\nJCTCONTR EQUOVR ,,b,JCTRSW1\nJCTCKFT  EQUOVR ,,b,JCTRSW1\nJCTCKPTR EQUOVR ,,b,JCTRSW1\nJCTSTEPR EQUOVR ,,b,JCTRSW1\n.*\n.* JCTRSW2 - CHECKPOINT/RESTART SWITCHES\nJCTSYSCK EQUOVR ,,b,JCTRSW2\nJCTNARST EQUOVR ,,b,JCTRSW2\nJCTNORST EQUOVR ,,b,JCTRSW2\nJCTNOCKP EQUOVR ,,b,JCTRSW2\nJCTRESTT EQUOVR ,,b,JCTRSW2\nJCTDSOCR EQUOVR ,,b,JCTRSW2\nJCTDSOJB EQUOVR ,,b,JCTRSW2\n.*\n.* JCTJSB - JOB STATUS SWITCHES\nJCTHASDD EQUOVR ,,b,JCTJSB\nJCTJSBIN EQUOVR ,,b,JCTJSB\nJCTJSBAL EQUOVR ,,b,JCTJSB\nJCTJSBEX EQUOVR ,,b,JCTJSB\nJCTJSBTM EQUOVR ,,b,JCTJSB\n.*\n.* JCTSTAT2 - ADDITIONAL STATUS INDICATORS\nJCTSPSYS EQUOVR ,,b,JCTSTAT2\nJCTADSPC EQUOVR ,,b,JCTSTAT2\nJCTENDIT EQUOVR ,,b,JCTSTAT2\nJCTSWSM  EQUOVR ,,b,JCTSTAT2\nJCTPERFM EQUOVR ,,b,JCTSTAT2\nJCTBLP   EQUOVR ,,b,JCTSTAT2\nJCTSISO  EQUOVR ,,b,JCTSTAT2\nJCTSWAUP EQUOVR ,,b,JCTSTAT2\n.*\n.* ACTIDENT - TABLE ID  ACT = 16\nACTID EQUOVR ,,v,ACTIDENT\n.*\n.* IEFAJCTB does no provide a DSECT statement\nJCT      DSECT ,\n.*\n         MNOTE *,'Including IEFAJCTB mapping macro'\n         IEFAJCTB ,\n         EQUOVR *END\n*\nJCT      DSECT ,                       * Resume JCT DSECT\n         ORG\nJCT_LEN  EQU   JCTLNGTH                * Length of JCT\n.*\nACT      EQU   IEFAACTB                * Label for ACT\nACT_LEN  EQU   *-ACT                   * Length of ACT\n.*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPJCTX  0100-20096-20096-0111-00118-00118-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Job Control Table eXtension\n.*\n&LABEL   MAPJCTX &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPJCTX                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPJCTX        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'JCTX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPJCTX).MEND\n&BXA_MAC_MAPJCTX SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_JCTX\n&BXA_CB_JCTX SETC 'JCTX'\n.*\n.* JCTXIDNT - JCTX ID = 30\nJCTXID   EQUOVR ,,v,JCTXIDNT\n.*\n.* JCTXVERS - VERSION LEVEL OF ALL SWA CHAIN\nJCTX3320 EQUOVR ,,v,JCTXVERS\nJCTX4420 EQUOVR ,,v,JCTXVERS\nJCTXCVER EQUOVR ,,v,JCTXVERS\nJCTXLVID EQUOVR ,,v,JCTXVERS\n.*\n.* IEFJCTX does no provide a DSECT statement\nJCTX     DSECT ,\n.*\n         MNOTE *,'Including IEFJCTX mapping macro'\n         IEFJCTX ,\n         EQUOVR *END\n*\nJCTX     DSECT ,                       * Resume JCTX DSECT\n         ORG\nJCTX_LEN EQU   *-JCTX                  * Length of JCTX\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPJESCT 0100-20096-20096-0111-00150-00150-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the JES Communication Table\n.*\n&LABEL   MAPJESCT &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPJESCT               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPJESCT       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'JESCT').EMBED\n         AIF   ('&CB' EQ 'JESMNTBL').EMBED\n         AIF   ('&CB' EQ 'JESPEXT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPJESCT).MEND\n&BXA_MAC_MAPJESCT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_JESCT\n         GBLC  &BXA_CB_JESMNTBL\n         GBLC  &BXA_CB_JESPEXT\n&BXA_CB_JESCT SETC 'JESCT'\n&BXA_CB_JESMNTBL SETC 'JESCT'\n&BXA_CB_JESPEXT SETC 'JESCT'\n.*\n.* JESFLG - FLAG BYTE\nJESJSSNT EQUOVR ,,b,JESFLG\nJESFSIT  EQUOVR ,,b,JESFLG\nJESFRQEX EQUOVR ,,b,JESFLG\nJESRSV15 EQUOVR ,,b,JESFLG\nJESRSV16 EQUOVR ,,b,JESFLG\nJESRSV17 EQUOVR ,,b,JESFLG\nJESRSV18 EQUOVR ,,b,JESFLG\nJESRSV19 EQUOVR ,,b,JESFLG\n.*\n.* JESJESFG - PRIMARY SUBSYSTEM FLAGS\nJESPSUBA EQUOVR ,,b,JESJESFG\nJESPSUBI EQUOVR ,,b,JESJESFG\nJES3ACTV EQUOVR ,,b,JESJESFG\nJES3OUTD EQUOVR ,,b,JESJESFG\nJESRSV24 EQUOVR ,,b,JESJESFG\nJESRSV25 EQUOVR ,,b,JESJESFG\nJESRSV26 EQUOVR ,,b,JESJESFG\nJESRSV27 EQUOVR ,,b,JESJESFG\n.*\n.* JESALLOF - ALLOCATION FUNCTION FLAGS\nJESUASR  EQUOVR ,,b,JESALLOF\nJESUASF  EQUOVR ,,b,JESALLOF\nJESUPLER EQUOVR ,,b,JESALLOF\nJESALRDY EQUOVR ,,b,JESALLOF\nJESV2EDT EQUOVR ,,b,JESALLOF\nJESRSV05 EQUOVR ,,b,JESALLOF\nJESRSV06 EQUOVR ,,b,JESALLOF\nJESRSV07 EQUOVR ,,b,JESALLOF\n.*\n         MNOTE *,'Including IEFJESCT mapping macro'\n         IEFJESCT MNTBL=YES            * Include JESMNTBL\n         EQUOVR *END\n*\nJESCT    DSECT ,                       * Restart JESCT\n         ORG   ,                       *\nJESCT_LEN EQU  *-JESCT                 * Length of JESCT\n*\nJESMNTBL DSECT ,                       * Restart JESMNTBL\n         ORG   ,                       *\nJESMNTBL_LEN EQU *-JESMNTBL            * Length of JESMNTBL\n*\nJESPEXT  DSECT ,                       * Restart JESPEXT\n         ORG   ,                       *\nJESPEXT_LEN EQU *-JESPEXT              * Length of JESPEXT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPJFCB  0100-20096-20096-0111-00436-00436-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Job File Control Block\n.*\n&LABEL   MAPJFCB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPJFCB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPJFCB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'JFCB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPJFCB).MEND\n&BXA_MAC_MAPJFCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_JFCB\n&BXA_CB_JFCB SETC 'JFCB'\n.*\n.* JFCBTSDM - JOB MANAGEMENT/DATA MANAGEMENT INTERFACE\nJFCCAT   EQUOVR ,,b,JFCBTSDM\nJFCVSL   EQUOVR ,,b,JFCBTSDM\nJFCSDS   EQUOVR ,,b,JFCBTSDM\nJFCTTR   EQUOVR ,,b,JFCBTSDM\nJFCNWRIT EQUOVR ,,b,JFCBTSDM\nJFCNDSCB EQUOVR ,,b,JFCBTSDM\nJFCNDCB  EQUOVR ,,b,JFCBTSDM\nJFCPAT   EQUOVR ,,b,JFCBTSDM\n.*\n.* JFCTDSI1 -  TDSI byte 1\nJFCTRKNO EQUOVR ,,b,JFCTDSI1\nJFCNOREC EQUOVR ,,v,JFCTDSI1\nJFC18TRK EQUOVR ,,b,JFCTDSI1\nJFC36TRK EQUOVR ,,b,JFCTDSI1\nJFC128TK EQUOVR ,,b,JFCTDSI1\nJFCMEDIA EQUOVR ,,b,JFCTDSI1\nJFCNOMED EQUOVR ,,v,JFCTDSI1\nJFCBMED1 EQUOVR ,,v,JFCTDSI1\nJFCBMED2 EQUOVR ,,v,JFCTDSI1\nJFCBMED3 EQUOVR ,,v,JFCTDSI1\nJFCBMED4 EQUOVR ,,v,JFCTDSI1\nJFCBMED5 EQUOVR ,,v,JFCTDSI1\nJFCBMED6 EQUOVR ,,v,JFCTDSI1\nJFCBMED7 EQUOVR ,,v,JFCTDSI1\nJFCBMED8 EQUOVR ,,v,JFCTDSI1\n.*\n.* JFCTDSI2 - TDSI byte 2\nJFCOMPTY EQUOVR ,,b,JFCTDSI2\nJFCCMPNS EQUOVR ,,v,JFCTDSI2\nJFCNOCMP EQUOVR ,,b,JFCTDSI2\nJFCBIDRC EQUOVR ,,b,JFCTDSI2\nJFCBCMPY EQUOVR ,,b,JFCTDSI2\nJFCSPECL EQUOVR ,,b,JFCTDSI2\nJFCNOSPC EQUOVR ,,v,JFCTDSI2\nJFCRDCOM EQUOVR ,,b,JFCTDSI2\n.*\n.* JFCBLTYP - LABEL TYPE (LABEL=)\nJFCDSEQN EQUOVR ,,b,JFCBLTYP\nJFCBAL   EQUOVR ,,b,JFCBLTYP\nJFCBLTM  EQUOVR ,,b,JFCBLTYP\nJFCBLP   EQUOVR ,,b,JFCBLTYP\nJFCSUL   EQUOVR ,,b,JFCBLTYP\nJFCNSL   EQUOVR ,,b,JFCBLTYP\nJFCSL    EQUOVR ,,b,JFCBLTYP\nJFCNL    EQUOVR ,,b,JFCBLTYP\n.*\n.* JFCBUFOF - TAPE DATA SET - THIS FIELD CONTAINS THE BUFFER OFFSET\nJFCBFOFL EQUOVR ,,b,JFCBUFOF\n.*\n.* JFCFUNC - FUNCTION INDICATORS (DCB=FUNC=)\nJFCFNCBI EQUOVR ,,b,JFCFUNC\nJFCFNCBR EQUOVR ,,b,JFCFUNC\nJFCFNCBP EQUOVR ,,b,JFCFUNC\nJFCFNCBW EQUOVR ,,b,JFCFUNC\nJFCFNCBD EQUOVR ,,b,JFCFUNC\nJFCFNCBX EQUOVR ,,b,JFCFUNC\nJFCFNCBT EQUOVR ,,b,JFCFUNC\nJFCRSV31 EQUOVR ,,b,JFCFUNC\n.*\n.* JFCBFLG1 - FLAG BYTE\nJFCSTAND EQUOVR ,,b,JFCBFLG1\nJFCSLCRE EQUOVR ,,b,JFCBFLG1\nJFCSLDES EQUOVR ,,b,JFCBFLG1\nJFCDUAL  EQUOVR ,,b,JFCBFLG1\nJFCOPEN  EQUOVR ,,b,JFCBFLG1\nJFCBPWBP EQUOVR ,,b,JFCBFLG1\n.*\n.* JFCBFLG2 - FLAG BYTE OF OPEN SWITCHES\nJFCINOP  EQUOVR ,,b,JFCBFLG2\nJFCOUTOP EQUOVR ,,b,JFCBFLG2\nJFCDEFER EQUOVR ,,b,JFCBFLG2\nJFCNRPS  EQUOVR ,,b,JFCBFLG2\nJFCMODNW EQUOVR ,,b,JFCBFLG2\nJFCSDRPS EQUOVR ,,b,JFCBFLG2\nJFCTRACE EQUOVR ,,b,JFCBFLG2\nJFCBBUFF EQUOVR ,,b,JFCBFLG2\nJFCRCTLG EQUOVR ,,b,JFCBFLG2\n.*\n.* JFCBIND1 - INDICATOR BYTE 1\nJFCRLSE  EQUOVR ,,b,JFCBIND1\nJFCLOC   EQUOVR ,,b,JFCBIND1\nJFCADDED EQUOVR ,,b,JFCBIND1\nJFCGDG   EQUOVR ,,b,JFCBIND1\nJFCPDS   EQUOVR ,,b,JFCBIND1\nJFCBRLSE EQUOVR ,,b,JFCBIND1\nJFCBLOCT EQUOVR ,,b,JFCBIND1\nJFCBNEWV EQUOVR ,,b,JFCBIND1\nJFCBPMEM EQUOVR ,,b,JFCBIND1\n.*\n.* JFCBIND2 - INDICATOR BYTE 2\nJFCDISP  EQUOVR ,,b,JFCBIND2\nJFCNEW   EQUOVR ,,b,JFCBIND2\nJFCMOD   EQUOVR ,,b,JFCBIND2\nJFCOLD   EQUOVR ,,b,JFCBIND2\nJFCBRWPW EQUOVR ,,b,JFCBIND2\nJFCSECUR EQUOVR ,,b,JFCBIND2\nJFCSHARE EQUOVR ,,b,JFCBIND2\nJFCENT   EQUOVR ,,b,JFCBIND2\nJFCREQ   EQUOVR ,,b,JFCBIND2\nJFCTEMP  EQUOVR ,,b,JFCBIND2\nJFCBSTAT EQUOVR ,,b,JFCBIND2\nJFCBSCTY EQUOVR ,,b,JFCBIND2\nJFCBGDGA EQUOVR ,,b,JFCBIND2\n.*\n.* JFCBHIAR - ** RESERVED-O **\nJFCHIER  EQUOVR ,,b,JFCBHIAR\nJFCHIER1 EQUOVR ,,b,JFCBHIAR\n.*\n.* JFCBFALN - BUFFER ALIGNMENT    (DCB=BFALN=)\nJFCDWORD EQUOVR ,,b,JFCBFALN\nJFCFWORD EQUOVR ,,b,JFCBFALN\n.*\n.* JFCBFTEK - BUFFERING TECHNIQUE (DCB=BFTEK=)\nJFCSIM   EQUOVR ,,b,JFCBFTEK\nJFCBBFTA EQUOVR ,,b,JFCBFTEK\nJFCBBFTR EQUOVR ,,b,JFCBFTEK\nJFCEXC   EQUOVR ,,b,JFCBFTEK\nJFCDYN   EQUOVR ,,b,JFCBFTEK\n.*\n.* JFCEROPT - ERROR OPTION  (DCB=EROPT=)\nJFCACC   EQUOVR ,,b,JFCEROPT\nJFCSKP   EQUOVR ,,b,JFCEROPT\nJFCABN   EQUOVR ,,b,JFCEROPT\nJFCTOPT  EQUOVR ,,b,JFCEROPT\nJFCRSV02 EQUOVR ,,b,JFCEROPT\nJFCRSV03 EQUOVR ,,b,JFCEROPT\nJFCRSV04 EQUOVR ,,b,JFCEROPT\nJFCRSV05 EQUOVR ,,b,JFCEROPT\n.*\n.* JFCTRTCH -  TAPE RECORDING TECHNIQUE (DCB=TRTCH=)\nJFCEVEN  EQUOVR ,,v,JFCTRTCH\nJFCTRAN  EQUOVR ,,v,JFCTRTCH\nJFCCONV  EQUOVR ,,v,JFCTRTCH\nJFCTREV  EQUOVR ,,v,JFCTRTCH\nJFCCOMP  EQUOVR ,,v,JFCTRTCH\nJFCNCOMP EQUOVR ,,v,JFCTRTCH\nJFC1TRAK EQUOVR ,,v,JFCTRTCH\nJFC2TRAK EQUOVR ,,v,JFCTRTCH\nJFC4TRAK EQUOVR ,,v,JFCTRTCH\n.*\n.* JFCCODE -  ** RESERVED-O **    (DCB=CODE=)\nJFCNOCON EQUOVR ,,b,JFCCODE\nJFCBCD   EQUOVR ,,b,JFCCODE\nJFCFRI   EQUOVR ,,b,JFCCODE\nJFCBUR   EQUOVR ,,b,JFCCODE\nJFCNCR   EQUOVR ,,b,JFCCODE\nJFCASCII EQUOVR ,,b,JFCCODE\nJFCTTY   EQUOVR ,,b,JFCCODE\nJFCRSV32 EQUOVR ,,b,JFCCODE\n.*\n.* JFCMODE - MODE OF OPERATION (CARD READER, CARD PUNCH)\nJFCBIN   EQUOVR ,,b,JFCMODE\nJFCEBCD  EQUOVR ,,b,JFCMODE\nJFCMODEO EQUOVR ,,b,JFCMODE\nJFCMODER EQUOVR ,,b,JFCMODE\nJFCRSV06 EQUOVR ,,b,JFCMODE\nJFCRSV07 EQUOVR ,,b,JFCMODE\n.*\n.* JFCSTACK - STACKER SELECTION (CARD READER, CARD PUNCH)\nJFCTWO   EQUOVR ,,b,JFCSTACK\nJFCONE   EQUOVR ,,b,JFCSTACK\n.*\n.* JFCPRTSP - NORMAL PRINTER SPACING (DCB=PRTSP=)\nJFCSPTHR EQUOVR ,,v,JFCPRTSP\nJFCSPTWO EQUOVR ,,v,JFCPRTSP\nJFCSPONE EQUOVR ,,v,JFCPRTSP\nJFCSPNO  EQUOVR ,,v,JFCPRTSP\n.*\n.* JFCDEN - TAPE DENSITY - 2400/3400 SERIES MAGNETIC TAPE\nJFC200   EQUOVR ,,v,JFCDEN\nJFC556   EQUOVR ,,v,JFCDEN\nJFC800   EQUOVR ,,v,JFCDEN\nJFC1600  EQUOVR ,,v,JFCDEN\nJFC6250  EQUOVR ,,v,JFCDEN\n.*\n.* JFCDSRG1 - BYTE 1 OF JFCDSORG (DCB=DSORG=)\nJFCORGIS EQUOVR ,,b,JFCDSRG1\nJFCORGPS EQUOVR ,,b,JFCDSRG1\nJFCORGDA EQUOVR ,,b,JFCDSRG1\nJFCORGCX EQUOVR ,,b,JFCDSRG1\nJFCORGCQ EQUOVR ,,b,JFCDSRG1\nJFCORGMQ EQUOVR ,,b,JFCDSRG1\nJFCORGPO EQUOVR ,,b,JFCDSRG1\nJFCORGU  EQUOVR ,,b,JFCDSRG1\n.*\n.* JFCDSRG2 - BYTE 2 OF JFCDSORG (DCB=DSORG= cont.)\nJFCORGGS EQUOVR ,,b,JFCDSRG2\nJFCORGTX EQUOVR ,,b,JFCDSRG2\nJFCORGTQ EQUOVR ,,b,JFCDSRG2\nJFCRSV13 EQUOVR ,,b,JFCDSRG2\nJFCORGAM EQUOVR ,,b,JFCDSRG2\nJFCORGTR EQUOVR ,,b,JFCDSRG2\nJFCRSV15 EQUOVR ,,b,JFCDSRG2\nJFCRSV16 EQUOVR ,,b,JFCDSRG2\n.*\n.* JFCRECFM - RECORD FORMAT (DCB=RECFM=) (AMP=('RECFM='))\nJFCRCFM  EQUOVR ,,b,JFCRECFM\nJFCFMREC EQUOVR ,,b,JFCRECFM\nJFCUND   EQUOVR ,,b,JFCRECFM\nJFCFIX   EQUOVR ,,b,JFCRECFM\nJFCVAR   EQUOVR ,,b,JFCRECFM\nJFCVARD  EQUOVR ,,b,JFCRECFM\nJFCRFO   EQUOVR ,,b,JFCRECFM\nJFCRFB   EQUOVR ,,b,JFCRECFM\nJFCRFS   EQUOVR ,,b,JFCRECFM\nJFCCHAR  EQUOVR ,,b,JFCRECFM\nJFCASA   EQUOVR ,,b,JFCRECFM\nJFCMAC   EQUOVR ,,b,JFCRECFM\nJFCNOCC  EQUOVR ,,v,JFCRECFM\n.*\n.* JFCOPTCD - OPTION CODES (DCB=OPTCD=)\nJFCWVCSP EQUOVR ,,b,JFCOPTCD\nJFCALLOW EQUOVR ,,b,JFCOPTCD\nJFCPCIBT EQUOVR ,,b,JFCOPTCD\nJFCBCKPT EQUOVR ,,b,JFCOPTCD\nJFCRSV18 EQUOVR ,,b,JFCOPTCD\nJFCREDUC EQUOVR ,,b,JFCOPTCD\nJFCSRCHD EQUOVR ,,b,JFCOPTCD\nJFCRSV21 EQUOVR ,,b,JFCOPTCD\nJFCOPTJ  EQUOVR ,,b,JFCOPTCD\n.*\nJFCWVCIS EQUOVR ,,b,JFCOPTCD\nJFCRSV17 EQUOVR ,,b,JFCOPTCD\nJFCMAST  EQUOVR ,,b,JFCOPTCD\nJFCIND   EQUOVR ,,b,JFCOPTCD\nJFCCYL   EQUOVR ,,b,JFCOPTCD\nJFCRSV19 EQUOVR ,,b,JFCOPTCD\nJFCDEL   EQUOVR ,,b,JFCOPTCD\nJFCREORG EQUOVR ,,b,JFCOPTCD\n.*\nJFCWVCBD EQUOVR ,,b,JFCOPTCD\nJFCOVER  EQUOVR ,,b,JFCOPTCD\nJFCEXT   EQUOVR ,,b,JFCOPTCD\nJFCFEED  EQUOVR ,,b,JFCOPTCD\nJFCACT   EQUOVR ,,b,JFCOPTCD\nJFCRSV20 EQUOVR ,,b,JFCOPTCD\nJFCRSV22 EQUOVR ,,b,JFCOPTCD\nJFCREL   EQUOVR ,,b,JFCOPTCD\n.*\nJFCOPTQ  EQUOVR ,,b,JFCOPTCD\n.*\nJFCSDNAM EQUOVR ,,b,JFCOPTCD\nJFCWUMSG EQUOVR ,,b,JFCOPTCD\nJFCCBWU  EQUOVR ,,b,JFCOPTCD\n.*\n.* JFCPCI - PROGRAM-CONTROLLED INTERRUPTION (PCI) FLAG\nJFCPCIX1 EQUOVR ,,b,JFCPCI\nJFCPCIX2 EQUOVR ,,b,JFCPCI\nJFCPCIA1 EQUOVR ,,b,JFCPCI\nJFCPCIA2 EQUOVR ,,b,JFCPCI\nJFCPCIN1 EQUOVR ,,b,JFCPCI\nJFCPCIN2 EQUOVR ,,b,JFCPCI\nJFCPCIR1 EQUOVR ,,b,JFCPCI\nJFCPCIR2 EQUOVR ,,b,JFCPCI\n.*\n.* JFCUCSOP - OPERATION OF THE UCS IMAGE TO BE LOADED\nJFCBEXTP EQUOVR ,,b,JFCUCSOP\nJFCFOLD  EQUOVR ,,b,JFCUCSOP\nJFCRSV25 EQUOVR ,,b,JFCUCSOP\nJFCVER   EQUOVR ,,b,JFCUCSOP\nJFCFCBAL EQUOVR ,,b,JFCUCSOP\nJFCFCBVR EQUOVR ,,b,JFCUCSOP\nJFCRSV26 EQUOVR ,,b,JFCUCSOP\nJFCRSV27 EQUOVR ,,b,JFCUCSOP\n.*\n.* JFCCPRI - TRANSMISSION PRIORITY (DCB=CPRI=)   (TCAM)\nJFCRSV53 EQUOVR ,,b,JFCCPRI\nJFCRSV54 EQUOVR ,,b,JFCCPRI\nJFCRSV55 EQUOVR ,,b,JFCCPRI\nJFCRSV33 EQUOVR ,,b,JFCCPRI\nJFCRSV34 EQUOVR ,,b,JFCCPRI\nJFCRECV  EQUOVR ,,b,JFCCPRI\nJFCEQUAL EQUOVR ,,b,JFCCPRI\nJFCSEND  EQUOVR ,,b,JFCCPRI\n.*\n.* JFCBPQTY - SPACE= Primary quantity  (SPACE=(,(prim-qty)))\nJFCBPQTY DSOVR 0FL3\n.*\n.* JFCBCTRI - SPACE PARAMETERS (SPACE=)\nJFCBSPAC EQUOVR ,,b,JFCBCTRI\nJFCBCYL  EQUOVR ,,b,JFCBCTRI\nJFCBTRK  EQUOVR ,,b,JFCBCTRI\nJFCBAVR  EQUOVR ,,b,JFCBCTRI\nJFCBMSGP EQUOVR ,,b,JFCBCTRI\n.* JFCRSV29 EQUOVR ,,b,JFCBCTRI     Last seen in z/OS\nJFCONTIG EQUOVR ,,b,JFCBCTRI\nJFCMIXG  EQUOVR ,,b,JFCBCTRI\nJFCALX   EQUOVR ,,b,JFCBCTRI\nJFCROUND EQUOVR ,,b,JFCBCTRI\nJFCBABS  EQUOVR ,,v,JFCBCTRI\n.*\n.* JFCBSQTY - SPACE= Secondary quantity (SPACE=(,(,sec-qty)))\nJFCBSQTY DSOVR 0FL3\n.*\n.* JFCBDQTY - SPACE= Directory quantity (SPACE=(,(,,dir-qty)))\nJFCBDQTY DSOVR FL3\n.*\n.* JFCFLGS1 - FLAG BYTE (ICB488)\nJFCBDLET EQUOVR ,,b,JFCFLGS1\nJFCBLSR  EQUOVR ,,b,JFCFLGS1\nJFCTOPEN EQUOVR ,,b,JFCFLGS1\nJFCBADSP EQUOVR ,,b,JFCFLGS1\nJFCBPROT EQUOVR ,,b,JFCFLGS1\nJFCBCEOV EQUOVR ,,b,JFCFLGS1\nJFCVRDS  EQUOVR ,,b,JFCFLGS1\nJFCBCKDS EQUOVR ,,b,JFCFLGS1\nJFCBUAFF EQUOVR ,,b,JFCFLGS1\n.*\n.* JFCBFLG3 - FLAG BYTE (OS/VS2)  (MDC316)\nJFCDQDSP EQUOVR ,,b,JFCBFLG3\nJFCBEXP  EQUOVR ,,b,JFCBFLG3\nJFCBBFTK EQUOVR ,,b,JFCBFLG3\nJFCPOSID EQUOVR ,,b,JFCBFLG3\n.* JFCBRV04 EQUOVR ,,b,JFCBFLG3        * Last seen in OS/390 V2R6\nJFCTEMPS EQUOVR ,,b,JFCBFLG3           * replaces JFCBRV04\n.* JFCBRV05 EQUOVR ,,b,JFCBFLG3        * Last seen in OS/390 V2R6\nJFCBDDTK EQUOVR ,,b,JFCBFLG3           * replaces JFCBRV05\nJFCBRV06 EQUOVR ,,b,JFCBFLG3\nJFCBRV07 EQUOVR ,,b,JFCBFLG3\n.*\n.* JFCVLDQ - Volser dequeue indicators\nJFCVLDQ1 EQUOVR ,,b,JFCVLDQ\nJFCVLDQ2 EQUOVR ,,b,JFCVLDQ\nJFCVLDQ3 EQUOVR ,,b,JFCVLDQ\nJFCVLDQ4 EQUOVR ,,b,JFCVLDQ\nJFCVLDQ5 EQUOVR ,,b,JFCVLDQ\n.*\n.* IEFJFCBN does not generate a DSECT-statement\n         MNOTE *,'Including IEFJFCBN mapping macro'\nJFCB     DSECT ,                       * Start of JFCB DSECT\n         IEFJFCBN LIST=YES             * Keep current listing options\n         EQUOVR *END\n         DSOVR *END\n*\n         ORG   ,                       *\nJFCB_LEN EQU   *-JFCB                  * Length of JFCB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPJFCBE 0100-20096-20096-0111-00119-00119-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Job File Control Block Extension for 3800\n.*\n&LABEL   MAPJFCBE &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPJFCBE               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPJFCBE       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'JFCBE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPJFCBE).MEND\n&BXA_MAC_MAPJFCBE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_JFCBE\n&BXA_CB_JFCBE SETC 'JFCBE'\n.*\n.* JFCBETYP - TABLE ID OF JFCBE\nJFCBEID  EQUOVR ,,v,JFCBETYP\n.*\n.* JFCBFLAG - FLAG BYTE\nJFCBEOPN EQUOVR ,,b,JFCBFLAG\nJFCBE003 EQUOVR ,,b,JFCBFLAG\nJFCBE004 EQUOVR ,,b,JFCBFLAG\nJFCBE005 EQUOVR ,,b,JFCBFLAG\nJFCBE006 EQUOVR ,,b,JFCBFLAG\nJFCBCFS  EQUOVR ,,b,JFCBFLAG\nJFCBBST  EQUOVR ,,b,JFCBFLAG\nJFCBE007 EQUOVR ,,b,JFCBFLAG\n.*\n         MNOTE *,'Including IEFJFCBE mapping macro'\n         IEFJFCBE ,                    *\n         EQUOVR *END\n*\nJFCBE    DSECT ,                       * Resume JFCBE DSECT\n         ORG   ,                       *\nJFCBE_LEN EQU  *-JFCBE                 * Length of JFCBE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPJFCBX 0100-20096-20096-0111-00125-00125-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Job File Control Block eXtension\n.*\n&LABEL   MAPJFCBX &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPJFCBX               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPJFCBX       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'JFCBX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPJFCBX).MEND\n&BXA_MAC_MAPJFCBX SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_JFCBX\n&BXA_CB_JFCBX SETC 'JFCBX'\n.*\n.* JFCXVD - Volser dequeue indicators\nJFCXVD1  EQUOVR ,,b,JFCXVD\nJFCXVD2  EQUOVR ,,b,JFCXVD\nJFCXVD3  EQUOVR ,,b,JFCXVD\nJFCXVD4  EQUOVR ,,b,JFCXVD\nJFCXVD5  EQUOVR ,,b,JFCXVD\nJFCXVD6  EQUOVR ,,b,JFCXVD\nJFCXVD7  EQUOVR ,,b,JFCXVD\nJFCXVD8  EQUOVR ,,b,JFCXVD\nJFCXVD9  EQUOVR ,,b,JFCXVD\nJFCXVD10 EQUOVR ,,b,JFCXVD\nJFCXVD11 EQUOVR ,,b,JFCXVD\nJFCXVD12 EQUOVR ,,b,JFCXVD\nJFCXVD13 EQUOVR ,,b,JFCXVD\nJFCXVD14 EQUOVR ,,b,JFCXVD\nJFCXVD15 EQUOVR ,,b,JFCXVD\n.*\n.* IEFJFCBX does not generate a DSECT-statement\n         MNOTE *,'Including IEFJFCBX mapping macro'\nJFCBX    DSECT ,                       * Start of JFCBX DSECT\n         IEFJFCBX ,                    *\n         EQUOVR *END\n*\nJFCBX    DSECT ,                       * Resume JFCBX DSECT\n         ORG   ,                       *\nJFCBX_LEN EQU  *-JFCBX                 * Length of JFCBX\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPJSCB  0100-20096-20096-0111-00156-00156-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Job Step Control Block\n.*\n&LABEL   MAPJSCB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPJSCB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPJSCB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'JSCB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPJSCB).MEND\n&BXA_MAC_MAPJSCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_JSCB\n&BXA_CB_JSCB SETC 'JSCB'\n.*\n.* JSCBOPTS - OPTION SWITCHES\nJSCRSV04 EQUOVR ,,b,JSCBOPTS\nJSCRSV05 EQUOVR ,,b,JSCBOPTS\nJSCBLONG EQUOVR ,,b,JSCBOPTS\nJSCRSV06 EQUOVR ,,b,JSCBOPTS\nJSCRSV07 EQUOVR ,,b,JSCBOPTS\nJSCRSV08 EQUOVR ,,b,JSCBOPTS\nJSCSIOTS EQUOVR ,,b,JSCBOPTS\nJSCBAUTH EQUOVR ,,b,JSCBOPTS\n.*\n.* JSCBSWT1 - STATUS SWITCHES  (OS/VS2)\nJSCBPASS EQUOVR ,,b,JSCBSWT1\nJSCRSV11 EQUOVR ,,b,JSCBSWT1\nJSCRSV12 EQUOVR ,,b,JSCBSWT1\nJSCRSV13 EQUOVR ,,b,JSCBSWT1\nJSCRSV14 EQUOVR ,,b,JSCBSWT1\nJSCRSV15 EQUOVR ,,b,JSCBSWT1\nJSCRSV16 EQUOVR ,,b,JSCBSWT1\nJSCBPMSG EQUOVR ,,b,JSCBSWT1\n.*\n.* JSCBWTFG - FLAGS USED BY WTP SUPPORT\nJSCBIOFG EQUOVR ,,b,JSCBWTFG\nJSCBRET  EQUOVR ,,b,JSCBWTFG\n.* JSCRSV18 EQUOVR ,,b,JSCBWTFG        * Last seen in OS/390 V2R6\nJSCBBMO  EQUOVR ,,b,JSCBWTFG           * First seen in z/OS V1R4\nJSCRSV19 EQUOVR ,,b,JSCBWTFG\nJSCRSV20 EQUOVR ,,b,JSCBWTFG\nJSCRSV21 EQUOVR ,,b,JSCBWTFG\nJSCRSV22 EQUOVR ,,b,JSCBWTFG\nJSCRSV23 EQUOVR ,,b,JSCBWTFG\n.*\n.* JSCBFBYT - FLAG BYTE  (MDC300)\nJSCBRV01 EQUOVR ,,b,JSCBFBYT\nJSCBADSP EQUOVR ,,b,JSCBFBYT\nJSCBRV02 EQUOVR ,,b,JSCBFBYT\nJSCBRV03 EQUOVR ,,b,JSCBFBYT\nJSCBSJFY EQUOVR ,,b,JSCBFBYT\nJSCBSJFN EQUOVR ,,b,JSCBFBYT\nJSCBRV06 EQUOVR ,,b,JSCBFBYT\nJSCBRV07 EQUOVR ,,b,JSCBFBYT\n.*\n.* JSCBJJSB - JOB JOURNAL STATUS INDICATORS\nJSCBJNLN EQUOVR ,,b,JSCBJJSB\nJSCBJNLF EQUOVR ,,b,JSCBJJSB\nJSCBJNLE EQUOVR ,,b,JSCBJJSB\nJSCBJSBI EQUOVR ,,b,JSCBJJSB\nJSCBJSBA EQUOVR ,,b,JSCBJJSB\nJSCBJSBX EQUOVR ,,b,JSCBJJSB\nJSCBJSBT EQUOVR ,,b,JSCBJJSB\n.*\n         MNOTE *,'Including IEZJSCB mapping macro'\n         IEZJSCB ,                     *\n         EQUOVR *END\n*\n         ORG   ,                       *\nJSCB     EQU   IEZJSCB                 * Start of JSCB\nJSCB_LEN EQU   *-JSCB                  * Length of JSCB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPLCT   0100-20096-20096-0111-00183-00183-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Linkage Control Table\n.*\n&LABEL   MAPLCT &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPLCT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPLCT         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'LCT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPLCT).MEND\n&BXA_MAC_MAPLCT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_LCT\n&BXA_CB_LCT SETC 'LCT'\n.*\n.* LCTQENTY\nLCTTIMAB EQUOVR ,,b,LCTQENTY\nLCTTIMNG EQUOVR ,,b,LCTQENTY\nLCTTIMDN EQUOVR ,,b,LCTQENTY\nLCTNOTIM EQUOVR ,,b,LCTQENTY\nLCTERRM  EQUOVR ,,b,LCTQENTY\n.*\n.* LCTERR - LCTERR bits\nLCTJFAIL EQUOVR ,,b,LCTERR\nLCTSALCD EQUOVR ,,b,LCTERR\nLCTPALCD EQUOVR ,,b,LCTERR\nLCTSFAIL EQUOVR ,,b,LCTERR\nLCTACOMP EQUOVR ,,b,LCTERR\nLCTJCFAL EQUOVR ,,b,LCTERR\nLCTVTERM EQUOVR ,,b,LCTERR\nLCTCANCL EQUOVR ,,b,LCTERR\n.*\n.* LCTINTSW - INITIATOR INTERNAL SWITCHES\nLCTINPPT EQUOVR ,,b,LCTINTSW\nLCTPRIV  EQUOVR ,,b,LCTINTSW\nLCTPPAA  EQUOVR ,,b,LCTINTSW\nLCTSTART EQUOVR ,,b,LCTINTSW\nLCTSTOP  EQUOVR ,,b,LCTINTSW\nLCTABEND EQUOVR ,,b,LCTINTSW\n.*\n.* LCTPUBYT - PREFERRED USAGE FLAGS\nLCT2LPU  EQUOVR ,,b,LCTPUBYT\nLCT1LPU  EQUOVR ,,b,LCTPUBYT\nLCTN2LP  EQUOVR ,,b,LCTPUBYT\nLCTNSWP  EQUOVR ,,b,LCTPUBYT\n.*\n.* LCTOPSW2 - INIT OPTIONS BYTE 2\nLCTTIMEF EQUOVR ,,b,LCTOPSW2\nLCTCRF   EQUOVR ,,b,LCTOPSW2\nLCTCKRST EQUOVR ,,b,LCTOPSW2\nLCTINRES EQUOVR ,,b,LCTOPSW2\nLCTBPRAC EQUOVR ,,b,LCTOPSW2\nLCTNORC  EQUOVR ,,b,LCTOPSW2\nLCTENQU  EQUOVR ,,b,LCTOPSW2\n.*\n.* LCTOPSW3 - INIT OPTION BYTE 3\nLCTNSYS  EQUOVR ,,b,LCTOPSW3\nLCTALERR EQUOVR ,,b,LCTOPSW3\nLCTJESCE EQUOVR ,,b,LCTOPSW3\n.*\n.* LCTTMBYT - Flag Byte\nLCTTIFJ  EQUOVR ,,b,LCTTMBYT\n.*\n.* LCTOPSW1 - INIT OPTION BYTE 1\nLCTDPSWA EQUOVR ,,b,LCTOPSW1\nLCTCANF  EQUOVR ,,b,LCTOPSW1\nLCTONEJF EQUOVR ,,b,LCTOPSW1\n.*\n.* LCTRFB - RESTART FUNCTION SWITCHES\nLCTRFBSM EQUOVR ,,b,LCTRFB\nLCTRFBCR EQUOVR ,,b,LCTRFB\nLCTRFBRV EQUOVR ,,b,LCTRFB\nLCTRFBDC EQUOVR ,,b,LCTRFB\nLCTRFBMS EQUOVR ,,b,LCTRFB\nLCTRFBEF EQUOVR ,,b,LCTRFB\nLCTRFBRP EQUOVR ,,b,LCTRFB\nLCTRFBND EQUOVR ,,b,LCTRFB\n.*\n.* LCTRFB1 - RESERVED FOR WARMSTART/RESTART\nLCTRSTST EQUOVR ,,b,LCTRFB1\n.*\n.* LCTINTS2 - INTERNAL SWITCHES, BYTE 2\nLCTSYS   EQUOVR ,,b,LCTINTS2\nLCTBPPAS EQUOVR ,,b,LCTINTS2\nLCTTSWPC EQUOVR ,,b,LCTINTS2\nLCTATTC  EQUOVR ,,b,LCTINTS2\nLCTJSRGN EQUOVR ,,b,LCTINTS2\nLCTSPREM EQUOVR ,,b,LCTINTS2\n.*\n.* IEFALLCT does no provide a DSECT statement\nLCT      DSECT ,\n.*\n         MNOTE *,'Including IEFALLCT mapping macro'\n         IEFALLCT ,\n         EQUOVR *END\n*\nLCT      DSECT ,                       * Resume LCT DSECT\n         ORG\nLCT_LEN  EQU   *-LCT                   * Length of LCT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPLDA   0100-20096-20096-0111-00115-00115-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the virtual storage manager's Local Data Area\n.*\n&LABEL   MAPLDA &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPLDA                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPLDA         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'LDA').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPLDA).MEND\n&BXA_MAC_MAPLDA SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_LDA\n&BXA_CB_LDA SETC 'LDA'\n.*\n.* LDAFLGS - MISC. FLAGS\nLDADEFER EQUOVR ,,b,LDAFLGS+3\nLDADEFED EQUOVR ,,b,LDAFLGS+3\n.*\n.* LDAUFLGS - USER FLAGS\nLDALIMCL EQUOVR ,,b,LDAUFLGS\nLDAULIM  EQUOVR ,,b,LDAUFLGS\nLDAEULIM EQUOVR ,,b,LDAUFLGS\n.*\n         MNOTE *,'Including IHALDA mapping macro'\n         IHALDA ,\n         EQUOVR *END\n*\nLDA      DSECT ,                       * Resume LDA DSECT\n         ORG\nLDA_LEN  EQU   *-LDA                   * Length of LDA\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPLLE   0100-20096-20096-0111-00105-00105-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Load List Element\n.*\n&LABEL   MAPLLE &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPLLE                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPLLE         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'LLE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPLLE).MEND\n&BXA_MAC_MAPLLE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_LLE\n&BXA_CB_LLE SETC 'LLE'\n.*\n         MNOTE *,'Including IHALLE mapping macro'\n         IHALLE ,                      *\n*\nLLE      DSECT ,                       * Resume LDA DSECT\n         ORG   ,                       *\nLLE_LEN  EQU   *-LLE                   * Length of LLE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPLMASM 0100-20096-20096-0111-00152-00152-00000-BIXSMAC 33\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for Latch Management\n.*\n&LABEL   MAPLMASM &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPLMASM               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPLMASM       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'LCRTPL').EMBED\n         AIF   ('&CB' EQ 'LOBTPL').EMBED\n         AIF   ('&CB' EQ 'LPRGPL').EMBED\n         AIF   ('&CB' EQ 'LRELPL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPLMASM).MEND\n&BXA_MAC_MAPLMASM SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_LCRTPL\n         GBLC  &BXA_CB_LOBTPL\n         GBLC  &BXA_CB_LPRGPL\n         GBLC  &BXA_CB_LRELPL\n&BXA_CB_LCRTPL SETC 'LMASM'\n&BXA_CB_LOBTPL SETC 'LMASM'\n&BXA_CB_LPRGPL SETC 'LMASM'\n&BXA_CB_LRELPL SETC 'LMASM'\n.*\n         MNOTE *,'Including ISGLMASM'\n.*\n.* Put equates in a DSECT to prevent warning messages in ASM listing\nBXA_EQU  DSECT\n         ISGLMASM\n         ORG   ,                       * Reset to end of DSECT\n*\n* Plist for ISGLCRT - Latch Create\nLCRTPL   DSECT\nLCRTNR   DS    A                       * Count: pointer to fullword\nLCRTNAM  DS    A                       * Latch set name: ptr to CL48\nLCRTOPT  DS    A                       * Create option: ptr to F\nLCRTTOK  DS    A                       * Latch set token: ptr to 2F\nLCRTRCD  DS    A                       * Return code: pointer to F\nLCRTPL_LEN EQU *-LCRTPL                * Length of parmlist\n*\n* Plist for ISGLOBT - Latch Obtain\nLOBTPL   DSECT\nLOBTSTOK DS    A                       * Latch Set token: ptr to XL8\nLOBTLAT  DS    A                       * Latch nr: ptr to F\nLOBTRQID DS    A                       * Requestor ID: ptr to XL8\nLOBTOOPT DS    A                       * Obtain option: ptr to F\nLOBTAOPT DS    A                       * Access option: ptr to F\nLOBTECBP DS    A                       * ECB address: ptr to A(ECB-ptr)\nLOBTLTOK DS    A                       * Latch token: ptr to XL8\nLOBTWORK DS    A                       * Work area: ptr to XL256\nLOBTRCD  DS    A                       * Return code: ptr to F\nLOBTPL_LEN EQU *-LOBTPL                * Length of parmlist\n*\n* Plist for ISGLPRG - Latch Purge\nLPRGPL   DSECT\nLPRGSTOK DS    A                       * Latch Set token: ptr to XL8\nLPRGRQID DS    A                       * Requestor ID: ptr to XL8\nLPRGRCD  DS    A                       * Return code: ptr to F\nLPRGPL_LEN EQU *-LPRGPL                * Length of parmlist\n*\n* Plist for ISGLREL - Latch Release\nLRELPL   DSECT\nLRELSTOK DS    A                       * Latch Set token: ptr to XL8\nLRELLTOK DS    A                       * Latch token: ptr to XL8\nLRELROPT DS    A                       * Release option: ptr to F\nLRELWORK DS    A                       * Work area: ptr to XL256\nLRELRCD  DS    A                       * Return code: ptr to F\nLRELPL_LEN EQU *-LRELPL                * Length of parmlist\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPLPDE  0100-20096-20096-0111-00136-00136-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Link Pack Directory Entry\n.*\n.* LPDEs are in a table, pointed to by CVTLPDIA. LPDEs are\n.* consecutive in storage, end-of-table is marked by a dummy LPDE\n.* which has LPDENAME=XL8'FFFFFFFF'\n.*\n&LABEL   MAPLPDE &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPLPDE                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPLPDE        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'LPDE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPLPDE).MEND\n&BXA_MAC_MAPLPDE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_LPDE\n&BXA_CB_LPDE SETC 'LPDE'\n.*\n.* LPDENTP - RELOCATED ENTRY POINT ADDRESS\nLPDEMODE EQUOVR ,,b,LPDENTP\n.*\n.* LPDEATTB - ATTRIBUTE FLAGS\nLPDEOM   EQUOVR ,,b,LPDEATTB\nLPDELPDE EQUOVR ,,b,LPDEATTB\n.*\n.* LPDEATTR - ATTRIBUTE FLAGS\nLPDENIP  EQUOVR ,,b,LPDEATTR\nLPDENIC  EQUOVR ,,b,LPDEATTR\nLPDEREN  EQUOVR ,,b,LPDEATTR\nLPDESER  EQUOVR ,,b,LPDEATTR\nLPDENFN  EQUOVR ,,b,LPDEATTR\nLPDEMIN  EQUOVR ,,b,LPDEATTR\nLPDEJPA  EQUOVR ,,b,LPDEATTR\nLPDENLR  EQUOVR ,,b,LPDEATTR\n.*\n.* LPDEATT2 - SECOND ATTRIBUTE FLAG BYTE\nLPDESPZ  EQUOVR ,,b,LPDEATT2\nLPDEREL  EQUOVR ,,b,LPDEATT2\nLPDEXLE  EQUOVR ,,b,LPDEATT2\nLPDERLC  EQUOVR ,,b,LPDEATT2\nLPDEANYM EQUOVR ,,b,LPDEATT2\nLPDEOLY  EQUOVR ,,b,LPDEATT2\nLPDESYSL EQUOVR ,,b,LPDEATT2\nLPDEAUTH EQUOVR ,,b,LPDEATT2\n.*\n         MNOTE *,'Including IHALPDE mapping macro'\n         IHALPDE ,                     *\n         EQUOVR *END                   *\n*\n         ORG\nLPDE_LEN EQU   *-LPDE                  * Length of LPDE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPOCPL  0100-20096-20096-0111-00151-00151-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for parameter list entries used by OPEN/CLOSE SVC's\n.* This parameter list is used by:\n.*   SVC 19 = OPEN\n.*   SVC 20 = CLOSE\n.*   SVC 22 = OPEN,TYPE=J\n.*   SVC 23 = CLOSE,TYPE=T\n.*\n&LABEL   MAPOCPL &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPOCPL                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPOCPL        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'OC24').EMBED\n         AIF   ('&CB' EQ 'OC31').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPOCPL).MEND\n&BXA_MAC_MAPOCPL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_OC24\n         GBLC  &BXA_CB_OC31\n&BXA_CB_OC24 SETC 'OCPL'\n&BXA_CB_OC31 SETC 'OCPL'\n.*\n         MNOTE *,'Generating DSECT for Open/Close parameter list entry'\n*\n* DSECT for OPEN/CLOSE parameter list entries\n* If R1 contains an address it points to a MODE=24 parmlist\n* If R1 contains 0, R0 points to a MODE=31 parmlist\n*\n* The option byte is divided into three parts:\n* - Bit 0  : Contains the end-of-list indicator\n* - Bit 1-3: Contain the second option. These three bits must be\n*            tested together\n* - Bit 4-7: Contain the first option. These four bits must be\n*            tested together\n*\nOCPL     DSECT ,                       * MODE=24 version\nOC24     DS    0F                      * Each entry is an aligned word\nOC24OPT  DS    XL1                     * Option byte: see below\nOC24DCB  DS    AL3                     * Pointer to DCB\nOC24_LEN EQU   *-OC24\n*\n         ORG   OC24                    * MODE=31 version\nOC31     DS    0FL8                    * Two words on word boundary\nOC31OPT  DS    XL1                     * Option byte\nOC31NULL DS    AL3                     * Contains zeroes\nOC31DCB  DS    AL4                     * Pointer to DCB\nOC31_LEN EQU   *-OC31\n*\n* Following is a list of bit-definitions for the OPT byte:\n* See SYS1.MODGEN(IECEQU) for the official definitions\n*   End-of-list-indicator  BIT0\n*   2nd option=DISP        NOBITS (bits 1-3 off)\n*   2nd option=REWIND      BIT1\n*   2nd option=FREE/IDLE   BIT2\n*   2nd option=REREAD      BIT3\n*   2nd option=LEAVE       BIT2+BIT3\n*   1st option=INPUT       NOBITS (bits 4-7 off)\n*   1st option=RDBACK      BIT7\n*   1st option=UPDAT       BIT5\n*   1st option=INOUT       BIT6+BIT7\n*   1st option=OUTIN       BIT5+BIT6+BIT7\n*   1st option=OUTINX      BIT5+BIT6\n*   1st option=EXTEND      BIT4+BIT5+BIT6\n*   1st option=OUTPUT      BIT4+BIT5+BIT6+BIT7\n.*\n.* Return to our original CSECT name and include IECEQU\n&SYSECT  &SYSSTYP\n.*\n         GENMAPS IECEQ                 * Include Open/Close/EOV equates\n.*\n.MEND    MEND\n./ ADD NAME=MAPORE   0100-20096-20096-0111-00296-00296-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Operator Reply Element definition\n.*\n&LABEL   MAPORE &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPORE                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPORE         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'ORE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPORE).MEND\n&BXA_MAC_MAPORE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_ORE\n&BXA_CB_ORE SETC 'ORE'\n.*\n.* OREXA - FLAGS\nOREFORGN EQUOVR ,,b,OREXA\nOREKEY0  EQUOVR ,,b,OREXA\nORESWAP  EQUOVR ,,b,OREXA\nORESUSP  EQUOVR ,,b,OREXA\nOREINUSE EQUOVR ,,b,OREXA\nOREDMCMP EQUOVR ,,b,OREXA\n.* ORERSV05 EQUOVR ,,b,OREXA           * Last seen in OS/390 V2R6\nOREDOMD  EQUOVR ,,b,OREXA              * First seen in z/OS V1R4\nORERSV06 EQUOVR ,,b,OREXA\n.*\n.* OREXC - BUFFER STATUS FLAGS\nOREBUFA  EQUOVR ,,b,OREXC\nOREBUFB  EQUOVR ,,b,OREXC\nOREBUFC  EQUOVR ,,b,OREXC\nOREBUFD  EQUOVR ,,b,OREXC\nOREBUFE  EQUOVR ,,b,OREXC\n.* ORERSV08 EQUOVR ,,b,OREXC           * Last seen in OS/390 V2R6\nORESAVD  EQUOVR ,,b,OREXC              * First seen in z/OS V1R4\nORERSV09 EQUOVR ,,b,OREXC\nORERSV10 EQUOVR ,,b,OREXC\n.*\n.* OREVRSN - VERSION LEVEL\nORESP13  EQUOVR ,,b,OREVRSN\nORESP22  EQUOVR ,,b,OREVRSN\nORESP313 EQUOVR ,,b,OREVRSN\nORESP410 EQUOVR ,,b,OREVRSN\nOREVRID  EQUOVR ,,b,OREVRSN\n.*\n.* ORERTA - FIRST BYTE OF ROUTING CODES\nORERT001 EQUOVR ,,b,ORERTA\nORERT002 EQUOVR ,,b,ORERTA\nORERT003 EQUOVR ,,b,ORERTA\nORERT004 EQUOVR ,,b,ORERTA\nORERT005 EQUOVR ,,b,ORERTA\nORERT006 EQUOVR ,,b,ORERTA\nORERT007 EQUOVR ,,b,ORERTA\nORERT008 EQUOVR ,,b,ORERTA\n.*\n.* ORERTB - SECOND BYTE OF ROUTING CODES\nORERT009 EQUOVR ,,b,ORERTB\nORERT010 EQUOVR ,,b,ORERTB\nORERT011 EQUOVR ,,b,ORERTB\nORERT012 EQUOVR ,,b,ORERTB\nORERT013 EQUOVR ,,b,ORERTB\nORERT014 EQUOVR ,,b,ORERTB\nORERT015 EQUOVR ,,b,ORERTB\nORERT016 EQUOVR ,,b,ORERTB\n.*\n.* ORERTC - THIRD BYTE OF ROUTING CODES\nORERT017 EQUOVR ,,b,.ORERTC\nORERT018 EQUOVR ,,b,.ORERTC\nORERT019 EQUOVR ,,b,.ORERTC\nORERT020 EQUOVR ,,b,.ORERTC\nORERT021 EQUOVR ,,b,.ORERTC\nORERT022 EQUOVR ,,b,.ORERTC\nORERT023 EQUOVR ,,b,.ORERTC\nORERT024 EQUOVR ,,b,.ORERTC\n.*\n.* ORERTD - FOURTH BYTE OF ROUTING CODES\nORERT025 EQUOVR ,,b,ORERTD\nORERT026 EQUOVR ,,b,ORERTD\nORERT027 EQUOVR ,,b,ORERTD\nORERT028 EQUOVR ,,b,ORERTD\nORERT029 EQUOVR ,,b,ORERTD\nORERT030 EQUOVR ,,b,ORERTD\nORERT031 EQUOVR ,,b,ORERTD\nORERT032 EQUOVR ,,b,ORERTD\n.*\n.* ORERTE - FIFTH BYTE OF ROUTING CODES\nORERT033 EQUOVR ,,b,ORERTE\nORERT034 EQUOVR ,,b,ORERTE\nORERT035 EQUOVR ,,b,ORERTE\nORERT036 EQUOVR ,,b,ORERTE\nORERT037 EQUOVR ,,b,ORERTE\nORERT038 EQUOVR ,,b,ORERTE\nORERT039 EQUOVR ,,b,ORERTE\nORERT040 EQUOVR ,,b,ORERTE\n.*\n.* ORERTF - SIXTH BYTE OF ROUTING CODES\nORERT041 EQUOVR ,,b,ORERTF\nORERT042 EQUOVR ,,b,ORERTF\nORERT043 EQUOVR ,,b,ORERTF\nORERT044 EQUOVR ,,b,ORERTF\nORERT045 EQUOVR ,,b,ORERTF\nORERT046 EQUOVR ,,b,ORERTF\nORERT047 EQUOVR ,,b,ORERTF\nORERT048 EQUOVR ,,b,ORERTF\n.*\n.* ORERTG - SEVENTH BYTE OF ROUTING CODES\nORERT049 EQUOVR ,,b,ORERTG\nORERT050 EQUOVR ,,b,ORERTG\nORERT051 EQUOVR ,,b,ORERTG\nORERT052 EQUOVR ,,b,ORERTG\nORERT053 EQUOVR ,,b,ORERTG\nORERT054 EQUOVR ,,b,ORERTG\nORERT055 EQUOVR ,,b,ORERTG\nORERT056 EQUOVR ,,b,ORERTG\n.*\n.* ORERTH - EIGHTH BYTE OF ROUTING CODES\nORERT057 EQUOVR ,,b,ORERTH\nORERT058 EQUOVR ,,b,ORERTH\nORERT059 EQUOVR ,,b,ORERTH\nORERT060 EQUOVR ,,b,ORERTH\nORERT061 EQUOVR ,,b,ORERTH\nORERT062 EQUOVR ,,b,ORERTH\nORERT063 EQUOVR ,,b,ORERTH\nORERT064 EQUOVR ,,b,ORERTH\n.*\n.* ORERTI - NINTH BYTE OF ROUTING CODES\nORERT065 EQUOVR ,,b,ORERTI\nORERT066 EQUOVR ,,b,ORERTI\nORERT067 EQUOVR ,,b,ORERTI\nORERT068 EQUOVR ,,b,ORERTI\nORERT069 EQUOVR ,,b,ORERTI\nORERT070 EQUOVR ,,b,ORERTI\nORERT071 EQUOVR ,,b,ORERTI\nORERT072 EQUOVR ,,b,ORERTI\n.*\n.* ORERTJ - TENTH BYTE OF ROUTING CODES\nORERT073 EQUOVR ,,b,ORERTJ\nORERT074 EQUOVR ,,b,ORERTJ\nORERT075 EQUOVR ,,b,ORERTJ\nORERT076 EQUOVR ,,b,ORERTJ\nORERT077 EQUOVR ,,b,ORERTJ\nORERT078 EQUOVR ,,b,ORERTJ\nORERT079 EQUOVR ,,b,ORERTJ\nORERT080 EQUOVR ,,b,ORERTJ\n.*\n.* ORERTK - ELEVENTH BYTE OF ROUTING CODES\nORERT081 EQUOVR ,,b,ORERTK\nORERT082 EQUOVR ,,b,ORERTK\nORERT083 EQUOVR ,,b,ORERTK\nORERT084 EQUOVR ,,b,ORERTK\nORERT085 EQUOVR ,,b,ORERTK\nORERT086 EQUOVR ,,b,ORERTK\nORERT087 EQUOVR ,,b,ORERTK\nORERT088 EQUOVR ,,b,ORERTK\n.*\n.* ORERTL - TWELFTH BYTE OF ROUTING CODES\nORERT089 EQUOVR ,,b,ORERTL\nORERT090 EQUOVR ,,b,ORERTL\nORERT091 EQUOVR ,,b,ORERTL\nORERT092 EQUOVR ,,b,ORERTL\nORERT093 EQUOVR ,,b,ORERTL\nORERT094 EQUOVR ,,b,ORERTL\nORERT095 EQUOVR ,,b,ORERTL\nORERT096 EQUOVR ,,b,ORERTL\n.*\n.* ORERTM - THIRTEENTH BYTE OF ROUTING CODES\nORERT097 EQUOVR ,,b,ORERTM\nORERT098 EQUOVR ,,b,ORERTM\nORERT099 EQUOVR ,,b,ORERTM\nORERT100 EQUOVR ,,b,ORERTM\nORERT101 EQUOVR ,,b,ORERTM\nORERT102 EQUOVR ,,b,ORERTM\nORERT103 EQUOVR ,,b,ORERTM\nORERT104 EQUOVR ,,b,ORERTM\n.*\n.* ORERTN - FOURTEENTH BYTE OF ROUTING CODES\nORERT105 EQUOVR ,,b,ORERTN\nORERT106 EQUOVR ,,b,ORERTN\nORERT107 EQUOVR ,,b,ORERTN\nORERT108 EQUOVR ,,b,ORERTN\nORERT109 EQUOVR ,,b,ORERTN\nORERT110 EQUOVR ,,b,ORERTN\nORERT111 EQUOVR ,,b,ORERTN\nORERT112 EQUOVR ,,b,ORERTN\n.*\n.* ORERTO - FIFTEENTH BYTE OF ROUTING CODES\nORERT113 EQUOVR ,,b,ORERTO\nORERT114 EQUOVR ,,b,ORERTO\nORERT115 EQUOVR ,,b,ORERTO\nORERT116 EQUOVR ,,b,ORERTO\nORERT117 EQUOVR ,,b,ORERTO\nORERT118 EQUOVR ,,b,ORERTO\nORERT119 EQUOVR ,,b,ORERTO\nORERT120 EQUOVR ,,b,ORERTO\n.*\n.* ORERTP - SIXTEENTH BYTE OF ROUTING CODES\nORERT121 EQUOVR ,,b,ORERTP\nORERT122 EQUOVR ,,b,ORERTP\nORERT123 EQUOVR ,,b,ORERTP\nORERT124 EQUOVR ,,b,ORERTP\nORERT125 EQUOVR ,,b,ORERTP\nORERT126 EQUOVR ,,b,ORERTP\nORERT127 EQUOVR ,,b,ORERTP\nORERT128 EQUOVR ,,b,ORERTP\n.*\n         MNOTE *,'Including IHAORE mapping macro'\n         IHAORE ,                      *\n         EQUOVR *END\n*\nOREF     DSECT ,                       * Resume ORE DSECT\nORE      EQU   OREF                    * Label for USINGs\n         ORG   ,\nORE_LEN  EQU   *-ORE                   * Length of ORE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPOUCB  0100-20096-20096-0111-00264-00264-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the resOurces manager User Control Block\n.*\n&LABEL   MAPOUCB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPOUCB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPOUCB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'OUCB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPOUCB).MEND\n&BXA_MAC_MAPOUCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_OUCB\n&BXA_CB_OUCB SETC 'OUCB'\n.*\n.* OUCBQFL - SWAPPABILITY TRANSITION FLAGS\nOUCBGOO  EQUOVR ,,b,OUCBQFL\nOUCBGOI  EQUOVR ,,b,OUCBQFL\nOUCBGOB  EQUOVR ,,b,OUCBQFL\nOUCBQSFL EQUOVR ,,b,OUCBQFL\nOUCBOFF  EQUOVR ,,b,OUCBQFL\nOUCBOUT  EQUOVR ,,b,OUCBQFL\nOUCBLSW  EQUOVR ,,b,OUCBQFL\nOUCBDLYB EQUOVR ,,b,OUCBQFL\n.*\n.* OUCBSFL - SWAPOUT CONTINUATION FLAGS\nOUCBNSW  EQUOVR ,,b,OUCBSFL\nOUCBCTI  EQUOVR ,,b,OUCBSFL\nOUCBBIB  EQUOVR ,,b,OUCBSFL\nOUCBINV  EQUOVR ,,b,OUCBSFL\nOUCBNSWI EQUOVR ,,b,OUCBSFL\nOUCBPVL  EQUOVR ,,b,OUCBSFL\nOUCBENQ  EQUOVR ,,b,OUCBSFL\nOUCBSCN  EQUOVR ,,b,OUCBSFL\n.*\n.* OUCBYFL - USER TYPE FLAGS\nOUCBPSTE EQUOVR ,,b,OUCBYFL\nOUCBSTT  EQUOVR ,,b,OUCBYFL\nOUCBLOG  EQUOVR ,,b,OUCBYFL\nOUCBMNT  EQUOVR ,,b,OUCBYFL\nOUCBAXS  EQUOVR ,,b,OUCBYFL\nOUCBDTA  EQUOVR ,,b,OUCBYFL\nOUCBFXS  EQUOVR ,,b,OUCBYFL\n.*\n.* OUCBAFL - ALGORITHM STATUS FLAGS\nOUCBAPG  EQUOVR ,,b,OUCBAFL\nOUCBREPT EQUOVR ,,b,OUCBAFL\nOUCBENQI EQUOVR ,,b,OUCBAFL\nOUCBJSR  EQUOVR ,,b,OUCBAFL\nOUCBNWT  EQUOVR ,,b,OUCBAFL\nOUCBASW  EQUOVR ,,b,OUCBAFL\n.*\n.* OUCBTFL - TRANSACTION STATUS FLAGS\nOUCBATR  EQUOVR ,,b,OUCBTFL\nOUCBSTR  EQUOVR ,,b,OUCBTFL\nOUCBNTR  EQUOVR ,,b,OUCBTFL\nOUCBRTR  EQUOVR ,,b,OUCBTFL\nOUCBPCH  EQUOVR ,,b,OUCBTFL\nOUCBMAR  EQUOVR ,,b,OUCBTFL\nOUCBINP  EQUOVR ,,b,OUCBTFL\nOUCBINC  EQUOVR ,,b,OUCBTFL\n.*\n.* OUCBEFL - EVENT STATUS FALGS\nOUCBLWT  EQUOVR ,,b,OUCBEFL\n.* OUCBNQF  EQUOVR ,,b,OUCBEFL         * Last seen in OS/390 V2R6\nOUCBQSC  EQUOVR ,,b,OUCBEFL\nOUCBMWT  EQUOVR ,,b,OUCBEFL\n.*\n.* OUCBUFL - USER TYPE FLAGS\nOUCBJSFS EQUOVR ,,b,OUCBUFL\nOUCBJSAS EQUOVR ,,b,OUCBUFL\nOUCBRSWP EQUOVR ,,b,OUCBUFL\nOUCBTSWP EQUOVR ,,b,OUCBUFL\nOUCBTSWC EQUOVR ,,b,OUCBUFL\nOUCBSI   EQUOVR ,,b,OUCBUFL\nOUCBENQR EQUOVR ,,b,OUCBUFL\nOUCBSIFX EQUOVR ,,b,OUCBUFL\n.*\n.* OUCBLFL - ALGORITHM STATUS FLAGS\nOUCBEAS  EQUOVR ,,b,OUCBLFL\nOUCBQSRV EQUOVR ,,b,OUCBLFL\nOUCBRQSC EQUOVR ,,b,OUCBLFL\nOUCBFWA  EQUOVR ,,b,OUCBLFL\nOUCBTET  EQUOVR ,,b,OUCBLFL\nOUCBREDP EQUOVR ,,b,OUCBLFL\nOUCBPRF  EQUOVR ,,b,OUCBLFL\nOUCBSTGI EQUOVR ,,b,OUCBLFL\n.*\n.* OUCBRFL - MORE USER FLAGS\nOUCBCSFS EQUOVR ,,b,OUCBRFL\nOUCBCSFM EQUOVR ,,b,OUCBRFL\nOUCBEASI EQUOVR ,,b,OUCBRFL\nOUCBHIDP EQUOVR ,,b,OUCBRFL\nOUCBBJOB EQUOVR ,,b,OUCBRFL\nOUCBSTFX EQUOVR ,,b,OUCBRFL\nOUCBDFSW EQUOVR ,,b,OUCBRFL\nOUCBLLSW EQUOVR ,,b,OUCBRFL\n.*\n.* OUCBMFL - MISCELLANEOUS FLAGS\nOUCBSBT  EQUOVR ,,b,OUCBMFL\nOUCBAFAP EQUOVR ,,b,OUCBMFL\nOUCBDFS2 EQUOVR ,,b,OUCBMFL\nOUCBMGSW EQUOVR ,,b,OUCBMFL\nOUCBDISC EQUOVR ,,b,OUCBMFL\nOUCBASAP EQUOVR ,,b,OUCBMFL\nOUCBMPUR EQUOVR ,,b,OUCBMFL\nOUCBACNT EQUOVR ,,b,OUCBMFL\n.*\n.* OUCBMFL2 - More miscellaneous flags.\nOUCBVFMG EQUOVR ,,b,OUCBMFL2\nOUCBMGIN EQUOVR ,,b,OUCBMFL2\nOUCBAFPD EQUOVR ,,b,OUCBMFL2\nOUCBDFDR EQUOVR ,,b,OUCBMFL2\nOUCBDFDE EQUOVR ,,b,OUCBMFL2\nOUCBMIGP EQUOVR ,,b,OUCBMFL2\nOUCBRPT1 EQUOVR ,,b,OUCBMFL2\nOUCBERST EQUOVR ,,b,OUCBMFL2\n.*\n.* OUCBMFL3 - More miscellaneous flags\nOUCBAPPC EQUOVR ,,b,OUCBMFL3\nOUCBPMON EQUOVR ,,b,OUCBMFL3\nOUCBVALV EQUOVR ,,b,OUCBMFL3\nOUCBOMVS EQUOVR ,,b,OUCBMFL3\nOUCBTBMN EQUOVR ,,b,OUCBMFL3\nOUCBSTTA EQUOVR ,,b,OUCBMFL3\nOUCBGWRK EQUOVR ,,b,OUCBMFL3\nOUCBINIT EQUOVR ,,b,OUCBMFL3\n.*\n.* OUCBCFL - MULTIPROCESS CONDITION FLAGS\nOUCBRDY  EQUOVR ,,b,OUCBCFL\nOUCBRSM  EQUOVR ,,b,OUCBCFL\nOUCBESSS EQUOVR ,,b,OUCBCFL\nOUCBESSW EQUOVR ,,b,OUCBCFL\nOUCBASSW EQUOVR ,,b,OUCBCFL\nOUCBCSMF EQUOVR ,,b,OUCBCFL\nOUCBSHBN EQUOVR ,,b,OUCBCFL\nOUCBHITR EQUOVR ,,b,OUCBCFL\n.*\n.* OUCBCSBT - Compare and swap bits\nOUCBTRM  EQUOVR ,,b,OUCBCSBT\nOUCBOWT  EQUOVR ,,b,OUCBCSBT\nOUCBCIM  EQUOVR ,,b,OUCBCSBT\nOUCBPSTR EQUOVR ,,b,OUCBCSBT\nOUCBSTA  EQUOVR ,,b,OUCBCSBT\nOUCBQSS  EQUOVR ,,b,OUCBCSBT\nOUCBOIW  EQUOVR ,,b,OUCBCSBT\nOUCBOOW  EQUOVR ,,b,OUCBCSBT\n.*\n.* OUCBPFL - Processing flags\nOUCBFTDN EQUOVR ,,b,OUCBPFL\nOUCBPSD  EQUOVR ,,b,OUCBPFL\nOUCBDPSW EQUOVR ,,b,OUCBPFL\nOUCBSRP  EQUOVR ,,b,OUCBPFL\nOUCBPTDN EQUOVR ,,b,OUCBPFL\n.*\n.* OUCBDSPC - CURRENT DISPATCHING CONTROL\nOUCBMTW  EQUOVR ,,b,OUCBDSPC\nOUCBTS   EQUOVR ,,b,OUCBDSPC\nOUCBTSC3 EQUOVR ,,b,OUCBDSPC\nOUCBTSC4 EQUOVR ,,b,OUCBDSPC\nOUCBTSC5 EQUOVR ,,b,OUCBDSPC\nOUCBTSC6 EQUOVR ,,b,OUCBDSPC\nOUCBTSC7 EQUOVR ,,b,OUCBDSPC\n.*\n.* OUCBDSPN - NEW DISPATCHING CONTROL\nOUCBNMTW EQUOVR ,,b,OUCBDSPN\nOUCBNTS  EQUOVR ,,b,OUCBDSPN\nOUCBTSN3 EQUOVR ,,b,OUCBDSPN\nOUCBTSN4 EQUOVR ,,b,OUCBDSPN\nOUCBTSN5 EQUOVR ,,b,OUCBDSPN\nOUCBTSN6 EQUOVR ,,b,OUCBDSPN\nOUCBTSN7 EQUOVR ,,b,OUCBDSPN\n.*\n         MNOTE *,'Including IRAOUCB mapping macro'\n         IRAOUCB ,\n         EQUOVR *END\n*\nOUCB     DSECT ,                       * Resume OUCB DSECT\n         ORG\nOUCB_LEN EQU   *-OUCB                  * Length of OUCB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPCCA  0100-20096-20096-0111-00215-00215-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Physical Configuration Communication Area\n.*\n&LABEL   MAPPCCA &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPCCA                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPCCA        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PCCA').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPCCA).MEND\n&BXA_MAC_MAPPCCA SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PCCA\n&BXA_CB_PCCA SETC 'PCCA'\n.*\n.* PCCAMCHF - MACHINE CHECK FLAGS\nPCCASMCH EQUOVR ,,b,PCCAMCHF\n.*\n.* PCCATMFL - FIRST BYTE OF PCCATMST\nPCCAINIT EQUOVR ,,b,PCCATMFL\nPCCASYNC EQUOVR ,,b,PCCATMFL\nPCCAVKIL EQUOVR ,,b,PCCATMFL\nPCCAMCC  EQUOVR ,,b,PCCATMFL\nPCCAMINT EQUOVR ,,b,PCCATMFL\nPCCARV02 EQUOVR ,,b,PCCATMFL\nPCCARV03 EQUOVR ,,b,PCCATMFL\nPCCARV04 EQUOVR ,,b,PCCATMFL\n.*\n.* PCCATODE - TOD CLOCK ERROR FLAGS\nPCCANUTD EQUOVR ,,b,PCCATODE\nPCCANFTD EQUOVR ,,b,PCCATODE\nPCCACTTD EQUOVR ,,b,PCCATODE\n.*\n.* PCCACCE - FLAGS FOR CLOCK COMPARATOR\nPCCANUCC EQUOVR ,,b,PCCACCE\nPCCANFCC EQUOVR ,,b,PCCACCE\nPCCACTCC EQUOVR ,,b,PCCACCE\n.*\n.* PCCAINTE - FLAGS FOR CPU TIMER\nPCCANUIN EQUOVR ,,b,PCCAINTE\nPCCANFIN EQUOVR ,,b,PCCAINTE\nPCCACTIN EQUOVR ,,b,PCCAINTE\n.*\n.* PCCARPB - EXTERNAL CALL SIGP BUFFER\nPCCASWTH EQUOVR ,,b,PCCARPB\nPCCARV4A EQUOVR ,,b,PCCARPB\nPCCARQCK EQUOVR ,,b,PCCARPB\nPCCAGTFR EQUOVR ,,b,PCCARPB\nPCCARV4B EQUOVR ,,b,PCCARPB\nPCCAMODE EQUOVR ,,b,PCCARPB\nPCCASTCP EQUOVR ,,b,PCCARPB\nPCCAMEMS EQUOVR ,,b,PCCARPB\n.*\n.* PCCARISP - CONTAINS PARALLEL/SERIAL REQUEST INDICATOR\nPCCAPARL EQUOVR ,,b,PCCARISP\nPCCASERL EQUOVR ,,b,PCCARISP\nPCCARV06 EQUOVR ,,b,PCCARISP\nPCCARV07 EQUOVR ,,b,PCCARISP\nPCCARV08 EQUOVR ,,b,PCCARISP\nPCCARV09 EQUOVR ,,b,PCCARISP\nPCCARV10 EQUOVR ,,b,PCCARISP\nPCCARV11 EQUOVR ,,b,PCCARISP\n.*\n.* PCCAEMS2 - SECOND BYTE OF PCCAEMSI\nPCCASERP EQUOVR ,,b,PCCAEMS2\nPCCARV13 EQUOVR ,,b,PCCAEMS2\nPCCARV14 EQUOVR ,,b,PCCAEMS2\nPCCARV15 EQUOVR ,,b,PCCAEMS2\nPCCARV16 EQUOVR ,,b,PCCAEMS2\nPCCARV17 EQUOVR ,,b,PCCAEMS2\nPCCARV18 EQUOVR ,,b,PCCAEMS2\nPCCARV19 EQUOVR ,,b,PCCAEMS2\n.*\n.* PCCAEMS3 - THIRD BYTE OF PCCAEMSI\nPCCASERF EQUOVR ,,b,PCCAEMS3\nPCCARV21 EQUOVR ,,b,PCCAEMS3\nPCCARV22 EQUOVR ,,b,PCCAEMS3\nPCCARV23 EQUOVR ,,b,PCCAEMS3\nPCCARV24 EQUOVR ,,b,PCCAEMS3\nPCCARV25 EQUOVR ,,b,PCCAEMS3\nPCCARV26 EQUOVR ,,b,PCCAEMS3\nPCCARV27 EQUOVR ,,b,PCCAEMS3\n.*\n.* PCCARMSB - CONTAINS RMS INDICATOR\nPCCARV28 EQUOVR ,,b,PCCARMSB\nPCCARV29 EQUOVR ,,b,PCCARMSB\nPCCARV30 EQUOVR ,,b,PCCARMSB\nPCCARV31 EQUOVR ,,b,PCCARMSB\nPCCARV32 EQUOVR ,,b,PCCARMSB\nPCCARV33 EQUOVR ,,b,PCCARMSB\nPCCARV34 EQUOVR ,,b,PCCARMSB\nPCCARMS  EQUOVR ,,b,PCCARMSB\n.*\n.* PCCAATTR - PROCESSOR ATTRIBUTES\nPCCACPUM EQUOVR ,,b,PCCAATTR\nPCCAIO   EQUOVR ,,b,PCCAATTR\nPCCANPFA EQUOVR ,,b,PCCAATTR\nPCCAR101 EQUOVR ,,b,PCCAATTR\nPCCAR102 EQUOVR ,,b,PCCAATTR\nPCCAR103 EQUOVR ,,b,PCCAATTR\nPCCAR104 EQUOVR ,,b,PCCAATTR\nPCCAR105 EQUOVR ,,b,PCCAATTR\n.*\n.* PCCAMFA - MALFUNCTION ALERT FLAGS\nPCCASMFA EQUOVR ,,b,PCCAMFA\n.*\n.* PCCAACRN - CAUSE OF ACR\nPCCAKUKN EQUOVR ,,v,PCCAACRN\nPCCAKMFA EQUOVR ,,v,PCCAACRN\nPCCAKIPT EQUOVR ,,v,PCCAACRN\nPCCAKSDT EQUOVR ,,v,PCCAACRN\nPCCAKIVT EQUOVR ,,v,PCCAACRN\nPCCAKTCT EQUOVR ,,v,PCCAACRN\nPCCAKPTT EQUOVR ,,v,PCCAACRN\nPCCAKCCT EQUOVR ,,v,PCCAACRN\nPCCAKPST EQUOVR ,,v,PCCAACRN\nPCCAKADT EQUOVR ,,v,PCCAACRN\nPCCAKSLT EQUOVR ,,v,PCCAACRN\nPCCAKESL EQUOVR ,,v,PCCAACRN\nPCCAKTCF EQUOVR ,,v,PCCAACRN\nPCCAKDAT EQUOVR ,,v,PCCAACRN\nPCCAKSCF EQUOVR ,,v,PCCAACRN\nPCCAKUME EQUOVR ,,v,PCCAACRN\n.*\n         MNOTE *,'Including IHAPCCA mapping macro'\n         IHAPCCA ,\n         EQUOVR *END\n*\nPCCA     DSECT ,                       * Resume PCCA DSECT\n         ORG\nPCCA_LEN EQU   *-PCCA                  * Length of PCCA\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPCCAV 0100-20096-20096-0111-00106-00106-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Physical Configuration Communication Area\n.*                     Vector Table\n.*\n&LABEL   MAPPCCAV &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPCCAV               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPCCAV       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PCCAV').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPCCAV).MEND\n&BXA_MAC_MAPPCCAV SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PCCAVT\n&BXA_CB_PCCAVT SETC 'PCCAV'\n.*\n         MNOTE *,'Including IHAPCCAT mapping macro'\n         IHAPCCAT ,\n*\nPCCAVT   DSECT ,                       * Resume PCCAVT DSECT\n         ORG\nPCCAVT_LEN EQU *-PCCAVT                * Length of PCCAVT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPDAB  0100-20096-20096-0111-00106-00106-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Parallel Data Access Block\n.*\n&LABEL   MAPPDAB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPDAB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPDAB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PDAB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPDAB).MEND\n&BXA_MAC_MAPPDAB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PDAB\n&BXA_CB_PDAB SETC 'PDAB'\n.*\n         MNOTE *,'Including PDABD mapping macro'\n         PDABD ,                       *\n.*\nIHAPDAB  DSECT ,                       * Resume PDAB dsect\nPDAB     EQU   IHAPDAB                 * Label for usings\n         ORG   ,                       *\nPDAB_LEN EQU   *-PDAB                  * Length of PDAB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPDS   0100-20096-20096-0111-00214-00214-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Partitioned DataSet directory entry\n.*\n&LABEL   MAPPDS &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPDS                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPDS         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PDS').EMBED\n         AIF   ('&CB' EQ 'TTRN').EMBED\n         AIF   ('&CB' EQ 'TTRX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPDS).MEND\n&BXA_MAC_MAPPDS SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PDS\n         GBLC  &BXA_CB_TTRN\n         GBLC  &BXA_CB_TTRX\n&BXA_CB_PDS SETC 'PDS'\n&BXA_CB_TTRN SETC 'PDS'\n&BXA_CB_TTRX SETC 'PDS'\n.*\n.* PDS2LIBF - LIBRARY FLAG FIELD\nPDS2LNRM EQUOVR ,,v,PDS2LIBF\nPDS2LLNK EQUOVR ,,v,PDS2LIBF\nPDS2LJOB EQUOVR ,,v,PDS2LIBF\n.*\n.* PDS2INDC - INDICATOR BYTE\nPDS2ALIS EQUOVR ,,b,PDS2INDC\nDEALIAS  EQUOVR ,,b,PDS2INDC\n.*\n.* PDS2ATR1 - FIRST BYTE OF PROGRAM ATTRIBUTE FIELD\nPDS2RENT EQUOVR ,,b,PDS2ATR1\nDEREEN   EQUOVR ,,b,PDS2ATR1\nPDS2REUS EQUOVR ,,b,PDS2ATR1\nPDS2OVLY EQUOVR ,,b,PDS2ATR1\nDEOVLY   EQUOVR ,,b,PDS2ATR1\nPDS2TEST EQUOVR ,,b,PDS2ATR1\nPDS2LOAD EQUOVR ,,b,PDS2ATR1\nDELODY   EQUOVR ,,b,PDS2ATR1\nPDS2SCTR EQUOVR ,,b,PDS2ATR1\nDESCAT   EQUOVR ,,b,PDS2ATR1\nPDS2EXEC EQUOVR ,,b,PDS2ATR1\nDEXCUT   EQUOVR ,,b,PDS2ATR1\nPDS21BLK EQUOVR ,,b,PDS2ATR1\n.*\n.* PDS2ATR2 - SECOND BYTE OF PROGRAM ATTRIBUTE FIELD\nPDS2FLVL EQUOVR ,,b,PDS2ATR1\nPDS2ORG0 EQUOVR ,,b,PDS2ATR1\nPDS2EP0  EQUOVR ,,b,PDS2ATR1\nPDS2NRLD EQUOVR ,,b,PDS2ATR1\nPDS2NREP EQUOVR ,,b,PDS2ATR1\nPDS2TSTN EQUOVR ,,b,PDS2ATR1\nPDS2LEF  EQUOVR ,,b,PDS2ATR1\nPDS2REFR EQUOVR ,,b,PDS2ATR1\n.*\n.* PDS2FTB1 - BYTE 1 OF PDS2FTBO\nPDSAOSLE EQUOVR ,,b,PDS2FTB1\nPDS2BIG  EQUOVR ,,b,PDS2FTB1\nPDS2PAGA EQUOVR ,,b,PDS2FTB1\nPDS2SSI  EQUOVR ,,b,PDS2FTB1\nPDSAPFLG EQUOVR ,,b,PDS2FTB1\nPDS2PGMO EQUOVR ,,b,PDS2FTB1\n.*\n.* PDS2FTB2 - BYTE 2 OF PDS2FTBO\nPDS2ALTP EQUOVR ,,b,PDS2FTB2\nPDSLRMOD EQUOVR ,,b,PDS2FTB2\nPDSAAMOD EQUOVR ,,b,PDS2FTB2\nPDSMAMOD EQUOVR ,,b,PDS2FTB2\n.*\n.* PDS2FTB3 - BYTE 3 OF PDS2FTBO\nPDS2NMIG EQUOVR ,,b,PDS2FTB3\nPDS2PRIM EQUOVR ,,b,PDS2FTB3\nPDS2PACK EQUOVR ,,b,PDS2FTB3\n.*\n.* PDSSSIFB - SSI FLAG BYTE\nPDSFORCE EQUOVR ,,b,PDSSSIFB\nPDSUSRCH EQUOVR ,,b,PDSSSIFB\nPDSEMFIX EQUOVR ,,b,PDSSSIFB\nPDSDEPCH EQUOVR ,,b,PDSSSIFB\nPDSSYSGN EQUOVR ,,b,PDSSSIFB\nPDSNOSGN EQUOVR ,,v,PDSSSIFB\nPDSCMSGN EQUOVR ,,b,PDSSSIFB\nPDSPTSGN EQUOVR ,,b,PDSSSIFB\nPDSIBMMB EQUOVR ,,b,PDSSSIFB\n.*\n         MNOTE *,'Including IHAPDS mapping macro'\n         IHAPDS ,                      *\n         EQUOVR *END\n.*\nPDS2     DSECT ,                       * Resume PDS Direntry\n         ORG\nPDS2_LEN EQU   *-PDS2                  * Length of PDS2\n.*\n.* TTRN mapping\n.*\nTTRN     DSECT ,                       *\nTTRNTTR  DS    0XL3                    * TTR of member\nTTRNTT   DS    XL2                     * Relative track adress\nTTRNR    DS    XL1                     * Record number (Block address)\nTTRNINDC DS    XL1                     * Indicator byte\nTTRNALIA EQUOVR ,,b,TTRNINDC           *\nTTRNALIA EQU   BIT0                    * On if name is an alias\nTTRNCNT  EQU   BIT1+BIT2               * Nr of user TTRNs in entry\nTTRNUSLN EQU   BIT3+BIT4+BIT5+BIT6+BIT7 * Length of user data in Hwords\n.*\n         ORG\nTTRN_LEN EQU   *-TTRN                  * Length of TTRN\n         EQUOVR *END                   *\n.*\n.* TTRX mapping\n.*\nTTRX     DSECT ,                       *\nTTRXTTR  DS    0XL3                    * TTR of member\nTTRXTT   DS    XL2                     * Relative track adress\nTTRXR    DS    XL1                     * Record number (Block address)\nTTRXFILL DS    XL1                     * Available for any use\n.*\n         ORG\nTTRX_LEN EQU   *-TTRX                  * Length of TTRX\n.*\n.* PDS directory entry as it exists in the PDS\n.*\nPDS      DSECT ,                       *\nPDSNAME  DS    CL8                     * Member name 8X'FF' for EOD\nPDSTTRN  DCL   TTRN                    * TTRN of member 4X'00' for EOD\n.*\nPDSDIRBS EQU   256                     * Size of directory block\n.*\n         ORG\nPDS_LEN  EQU   *-PDS                   * Length of PDS\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPEL   0100-20096-20096-0111-00147-00147-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Parameter Element List (for ENQ/DEQ/RESERVE)\n.*\n&LABEL   MAPPEL &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPEL                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPEL         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PEL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPEL).MEND\n&BXA_MAC_MAPPEL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PEL\n&BXA_CB_PEL SETC 'PEL'\n.*\n.* PELLAST - FLAG BYTE 1\nPELEOL   EQUOVR ,,b,PELLAST\nPELIGNOR EQUOVR ,,b,PELLAST\nPELOCANY EQUOVR ,,b,PELLAST\nPELSHR   EQUOVR ,,b,PELLAST\nPELSAVE  EQUOVR ,,b,PELLAST\nPELNORNL EQUOVR ,,b,PELLAST\nPELGEN2  EQUOVR ,,b,PELLAST\nPELTCBF  EQUOVR ,,b,PELLAST\n.*\n.* PELFLAG - FLAG BYTE 2\nPELSHARE EQUOVR ,,b,PELFLAG\nPELSCPE1 EQUOVR ,,b,PELFLAG\nPELSYSMC EQUOVR ,,b,PELFLAG\nPELSTPMC EQUOVR ,,b,PELFLAG\nPELSCPE2 EQUOVR ,,b,PELFLAG\nPELRET1  EQUOVR ,,b,PELFLAG\nPELRET2  EQUOVR ,,b,PELFLAG\nPELRET3  EQUOVR ,,b,PELFLAG\n.*\n.* PELXFLG1 - PEL EXTENSION FLAGS\nPELXSIEX EQUOVR ,,b,PELXFLG1\nPELXRCEX EQUOVR ,,b,PELXFLG1\nPELXSEEX EQUOVR ,,b,PELXFLG1\nPELXGLBL EQUOVR ,,b,PELXFLG1\nPELXLAST EQUOVR ,,b,PELXFLG1\nPELXRESV EQUOVR ,,b,PELXFLG1\nPELXERR  EQUOVR ,,b,PELXFLG1\nPELXREQF EQUOVR ,,b,PELXFLG1\n.*\n.* PELXFLG2 - FLAG-BYTE\nPELXERSV EQUOVR ,,b,PELXFLG2\nPELXTOKN EQUOVR ,,b,PELXFLG2\n.* PELXRS26 EQUOVR ,,b,PELXFLG2        * Last seen in OS/390 V2R6\nPELXCBEX EQUOVR ,,b,PELXFLG2           * First seen in z/OS V1R4\nPELXRS25 EQUOVR ,,b,PELXFLG2\nPELXRS24 EQUOVR ,,b,PELXFLG2\nPELXRS23 EQUOVR ,,b,PELXFLG2\nPELXRS22 EQUOVR ,,b,PELXFLG2\nPELXRS21 EQUOVR ,,b,PELXFLG2\n.*\n         MNOTE *,'Including ISGPEL mapping macro'\n         ISGPEL ,                      *\n         EQUOVR *END\n.*\nPEL      DSECT ,                       * Resume PEL DSECT\n         ORG\nPEL_LEN  EQU   *-PEL                   * Length of PEL\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPMAR  0100-20096-20096-0111-00204-00204-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Program Management Attribute Record\n.*      (associated with SMDE)\n.* Warning: field PMARA_LEN is renamed to PMARA_SIZE\n.*\n&LABEL   MAPPMAR &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPMAR                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPMAR        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PMAR').EMBED\n         AIF   ('&CB' EQ 'PMARA').EMBED\n         AIF   ('&CB' EQ 'PMARL').EMBED\n         AIF   ('&CB' EQ 'PMARR').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPMAR).MEND\n&BXA_MAC_MAPPMAR SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PMAR\n         GBLC  &BXA_CB_PMARA\n         GBLC  &BXA_CB_PMARL\n         GBLC  &BXA_CB_PMARR\n&BXA_CB_PMAR  SETC 'PMAR'\n&BXA_CB_PMARA SETC 'PMAR'\n&BXA_CB_PMARL SETC 'PMAR'\n&BXA_CB_PMARR SETC 'PMAR'\n.*\n.* PMAR_LVL - PMAR format level\nPMAR_LVL_VAL       EQUOVR ,,v,PMAR_LVL\nPMAR_PM1_VAL       EQUOVR ,,v,PMAR_LVL\nPMAR_PM2_VAL       EQUOVR ,,v,PMAR_LVL\nPMAR_PM3_VAL       EQUOVR ,,v,PMAR_LVL\n.*\n.* PMAR_PLVL - Bind processor creating object\nPMAR_PLVL_E_VAL    EQUOVR ,,v,PMAR_PLVL\nPMAR_PLVL_F_VAL    EQUOVR ,,v,PMAR_PLVL\nPMAR_PLVL_AOS_VAL  EQUOVR ,,v,PMAR_PLVL\nPMAR_PLVL_XA_VAL   EQUOVR ,,v,PMAR_PLVL\nPMAR_PLVL_B1_VAL   EQUOVR ,,v,PMAR_PLVL\nPMAR_PLVL_B2_VAL   EQUOVR ,,v,PMAR_PLVL\nPMAR_PLVL_B3_VAL   EQUOVR ,,v,PMAR_PLVL\n.*\n.* PMAR_ATR1 - First attribute byte.\nPMAR_RENT          EQUOVR ,,b,PMAR_ATR1\nPMAR_REUS          EQUOVR ,,b,PMAR_ATR1\nPMAR_OVLY          EQUOVR ,,b,PMAR_ATR1\nPMAR_TEST          EQUOVR ,,b,PMAR_ATR1\nPMAR_LOAD          EQUOVR ,,b,PMAR_ATR1\nPMAR_SCTR          EQUOVR ,,b,PMAR_ATR1\nPMAR_EXEC          EQUOVR ,,b,PMAR_ATR1\nPMAR_1BLK          EQUOVR ,,b,PMAR_ATR1\n.*\n.* PMAR_ATR2 - Second attribute byte.\nPMAR_FLVL          EQUOVR ,,b,PMAR_ATR2\nPMAR_ORG0          EQUOVR ,,b,PMAR_ATR2\nPMAR_NRLD          EQUOVR ,,b,PMAR_ATR2\nPMAR_NREP          EQUOVR ,,b,PMAR_ATR2\nPMAR_TSTN          EQUOVR ,,b,PMAR_ATR2\nPMAR_REFR          EQUOVR ,,b,PMAR_ATR2\n.*\n.* PMAR_FTB1 - Alternative name for flags byte\nPMAR_BIG           EQUOVR ,,b,PMAR_FTB1\nPMAR_PAGA          EQUOVR ,,b,PMAR_FTB1\nPMAR_XSSI          EQUOVR ,,b,PMAR_FTB1\nPMAR_XAPF          EQUOVR ,,b,PMAR_FTB1\nPMAR_LFMT          EQUOVR ,,b,PMAR_FTB1\n.*\n.* PMAR_FTB2 - Alternative name for flags byte\nPMAR_ALTP          EQUOVR ,,b,PMAR_FTB2\nPMAR_RMOD          EQUOVR ,,b,PMAR_FTB2\nPMAR_MAMD          EQUOVR ,,b,PMAR_FTB2\n.*\n.* PMARL_ATR1 - Fifth attribute byte\nPMARL_NMIG         EQUOVR ,,b,PMARL_ATR1\nPMARL_PRIM         EQUOVR ,,b,PMARL_ATR1\nPMARL_PACK         EQUOVR ,,b,PMARL_ATR1\n.*\n.* PMARL_ATR2 - Sixth attribute byte\nPMARL_CMPR         EQUOVR ,,b,PMARL_ATR2\nPMARL_1RMOD        EQUOVR ,,b,PMARL_ATR2\nPMARL_2RMOD        EQUOVR ,,b,PMARL_ATR2\nPMARL_1ALIN        EQUOVR ,,b,PMARL_ATR2\nPMARL_2ALIN        EQUOVR ,,b,PMARL_ATR2\nPMARL_FILL         EQUOVR ,,b,PMARL_ATR2\n.*\n.* PMARL_PM3FL1 - Flag byte\nPMARL_HIDE         EQUOVR ,,b,PMARL_PM3FL1\nPMARL_DLLENA       EQUOVR ,,b,PMARL_PM3FL1\nPMARL_MUSTDELET    EQUOVR ,,b,PMARL_PM3FL1\nPMARL_IEWBLITP     EQUOVR ,,b,PMARL_PM3FL1\nPMARL_MANGLED      EQUOVR ,,b,PMARL_PM3FL1\n.*\n.* PMARA_LEN - Section length\nPMARA_LEN          DSOVR  *NEWNAME,PMARA_SIZE\n.*\n.* PMARA_FTB2 - Alternative name for flags byte\nPMARA_ALTP         EQUOVR ,,b,PMARA_FTB2\nPMARA_HIDE         EQUOVR ,,b,PMARA_FTB2\nPMARA_NEXEC        EQUOVR ,,b,PMARA_FTB2\nPMARA_MANGLED      EQUOVR ,,b,PMARA_FTB2\n.*\n         MNOTE *,'Including IEWPMAR mapping macro'\n         IEWPMAR ,                     * Generate IEWPMAR\n         DSOVR  *END\n         EQUOVR *END\n*\nPMAR     DSECT ,                       * Resume PMAR DSECT\n         ORG   ,                       *\nPMAR_LEN EQU   *-PMAR                  * Length of PMAR\n*\nPMARL    DSECT ,                       * Resume PMARL DSECT\n         ORG   ,                       *\nPMARL_LEN EQU  *-PMARL                 * Length of PMARL\n*\nPMARR    DSECT ,                       * Resume PMARR DSECT\n         ORG   ,                       *\nPMARR_LEN EQU  *-PMARR                 * Length of PMARR\n*\nPMARA    DSECT ,                       * Resume PMARA DSECT\n         ORG   ,                       *\nPMARA_LEN EQU  *-PMARA                 * Length of PMARA\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPRB   0100-20096-20096-0111-00105-00105-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps a Program Request Block\n.*\n&LABEL   MAPPRB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPRB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPRB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PRB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPRB).MEND\n&BXA_MAC_MAPPRB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PRB\n&BXA_CB_PRB SETC 'PRB'\n.*\n         GENMAPS RB                    * Generate RB mapping\n*\nRBPRFX   DSECT ,                       * Reset to RB DSECT\nPRB      EQU   RBBASIC                 * Start of PRB proper\n         ORG\nPRB_LEN  EQU   *-PRB                   * Length of PRB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPRMLB 0100-20096-20096-0111-00138-00138-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the return and reason codes for IEFPRMLB as well as\n.* its parameter areas\n.*\n&LABEL   MAPPRMLB &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPRMLB               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_MAPS_LST           * Maps listing option\n         GBLC  &BXA_PGM_TITLE          * Title for the listing\n         GBLB  &SP_SHOWALL             * Show all statements?\n         GBLB  &BXA_MAC_MAPPRMLB       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PRM_LIST_BUFFER').EMBED\n         AIF   ('&CB' EQ 'PRM_MESSAGE_BUFFER').EMBED\n         AIF   ('&CB' EQ 'PRM_READ_BUFFER').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPRMLB).MEND\n&BXA_MAC_MAPPRMLB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PRM_LIST_BUFFER\n         GBLC  &BXA_CB_PRM_MESSAGE_BUFFER\n         GBLC  &BXA_CB_PRM_READ_BUFFER\n&BXA_CB_PRM_LIST_BUFFER    SETC 'PRMLB'\n&BXA_CB_PRM_MESSAGE_BUFFER SETC 'PRMLB'\n&BXA_CB_PRM_READ_BUFFER    SETC 'PRMLB'\n.*\n.* PRM_MSG_BUFFER_FLAGS\nPRM_MSG_BUFFER_FULL EQUOVR ,,b,PRM_MSG_BUFFER_FLAGS\n.*\n         MNOTE *,'Including IEFZPMAP mapping macro'\n         IEFZPMAP DSECT=YES,           * Include IEFPRMLB areas        *\n               LIST=&BXA_MAPS_LST      *\n         EQUOVR *END\n.*\n.* Length equates not included here: IBM supplies them in IEFZPMAP\n* Length of PRM_LIST_BUFFER is to be incremented by 56 for each        *\n                                     additional entry\n* Length of PRM_READ_BUFFER is to be incremented by 80 for each        *\n                                     additional entry\n* Length of PRM_MESSAGE_BUFFER is to be incremented by 256 for each    *\n                                        additional entry\n.*\n.* Add equates from IEFZPRC\n         MNOTE *,'Including IEFZPRC mapping macro'\nBXA_EQU  DSECT ,                       * Fancy dsect name\n         IEFZPRC ,                     * Include IEFPRMLB equates\n.*\n.* Return to our original CSECT name\n.* Since IEFZPMAP changes the listing's title: reset title too\n&SYSECT  &SYSSTYP\n         TITLE '&BXA_PGM_TITLE'\n         AIF   (&SP_SHOWALL).TITLE\n.* Generate comment line in stead of a MNOTE line\n*\n         AGO   .TITLEOK\n.TITLE   ANOP\n         MNOTE *,'Previous STMT: TITLE ''&BXA_PGM_TITLE'''\n.TITLEOK ANOP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPSA   0100-20096-20096-0111-00314-00314-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Prefixed Storage Area (Virtual 1st page)\n.* Since the PSA is always addressable thru R0, a USING is\n.* included in the expansion, setting the PSA addressable troughout\n.* the program.\n.*\n&LABEL   MAPPSA &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPSA                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPSA         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PSA').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPSA).MEND\n&BXA_MAC_MAPPSA SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PSA\n&BXA_CB_PSA SETC 'PSA'\n.*\n.* FLCSVILC - SVC INSTRUCTION LENGTH COUNTER - NUMBER OF BYTES\nFLCSILCB EQUOVR ,,b,FLCSVILC\n.*\n.* FLCPIILC - PROGRAM INTERRUPT LENGTH COUNTER\nFLCPILCB EQUOVR ,,b,FLCPIILC\n.*\n.* PSAPICOD - 8-BIT INTERRUPT CODE.\nPSAPIPER EQUOVR ,,b,PSAPICOD\nPSAPIMC  EQUOVR ,,b,PSAPICOD\nPSAPIPC  EQUOVR ,,b,PSAPICOD\n.*\n.* FLCTEA - TRANSLATION EXCEPTION ADDRESS.\nFLCTEAXM EQUOVR ,,b,FLCTEA\n.*\n.* FLCTEAB3 - LAST BYTE OF TEA.\nFLCSOPI  EQUOVR ,,b,FLCTEAB3\nFLCTSTDP EQUOVR ,,v,FLCTEAB3\nFLCTSTDA EQUOVR ,,b,FLCTEAB3\nFLCTSTDS EQUOVR ,,b,FLCTEAB3\nFLCTSTDH EQUOVR ,,b,FLCTEAB3\n.*\n.* PSASUP1 - FIRST BYTE OF PSASUPER\nPSAIO    EQUOVR ,,b,PSASUP1\nPSASVC   EQUOVR ,,b,PSASUP1\nPSAEXT   EQUOVR ,,b,PSASUP1\nPSAPI    EQUOVR ,,b,PSASUP1\nPSALOCK  EQUOVR ,,b,PSASUP1\nPSADISP  EQUOVR ,,b,PSASUP1\nPSATCTL  EQUOVR ,,b,PSASUP1\nPSATYPE6 EQUOVR ,,b,PSASUP1\n.*\n.* PSASUP2 - SECOND BYTE OF PSASUPER\nPSAIPCRI EQUOVR ,,b,PSASUP2\nPSASVCR  EQUOVR ,,b,PSASUP2\nPSASVCRR EQUOVR ,,b,PSASUP2\nPSAACR   EQUOVR ,,b,PSASUP2\nPSARTM   EQUOVR ,,b,PSASUP2\nPSALCR   EQUOVR ,,b,PSASUP2\n.*\n.* PSASUP3 - THIRD BYTE OF PSASUPER\nPSAIOSUP EQUOVR ,,b,PSASUP3\nPSASPR   EQUOVR ,,b,PSASUP3\nPSAESTA  EQUOVR ,,b,PSASUP3\nPSARSM   EQUOVR ,,b,PSASUP3\nPSAULCMS EQUOVR ,,b,PSASUP3\nPSASLIP  EQUOVR ,,b,PSASUP3\n.*\n.* PSASUP4 - FOURTH BYTE OF PSASUPER\nPSALDWT  EQUOVR ,,b,PSASUP4\nPSASMF   EQUOVR ,,b,PSASUP4\nPSAESAR  EQUOVR ,,b,PSASUP4\n.*\n.* PSAPTYPE - PROCESSOR TYPE INDICATOR\nPSAAXP   EQUOVR ,,b,PSAPTYPE\n.*\n.* PSAILS - INTERRUPT HANDLER LINKAGE STACK INDICATORS.\nPSAILSIO EQUOVR ,,b,PSAILS\nPSAILSEX EQUOVR ,,b,PSAILS\nPSAILSPC EQUOVR ,,b,PSAILS\nPSAILSDS EQUOVR ,,b,PSAILS\nPSAILSRS EQUOVR ,,b,PSAILS\nPSAILSOR EQUOVR ,,b,PSAILS\nPSAILST6 EQUOVR ,,b,PSAILS\nPSAILSLK EQUOVR ,,b,PSAILS\n.*\n.* PSAFLAGS - SYSTEM FLAGS\nPSAAEIT  EQUOVR ,,b,PSAFLAGS\n.*\n.* PSAMPSW - SETLOCK MODEL PSW\nPSAPIOM  EQUOVR ,,b,PSAMPSW+1\nPSAPEXM  EQUOVR ,,b,PSAMPSW+1\n.*\n.* PSARSML - RSM GLOBAL FUNCTION/RECOVERY\nPSARSMEX EQUOVR ,,b,PSARSML\n.*\n.* PSATRCEL - TRACE BUFFER MANAGEMENT LOCK\nPSATRCEX EQUOVR ,,b,PSATRCEL\n.*\n.* PSAIOSL - IOS LOCK\nPSAIOSEX EQUOVR ,,b,PSAIOSL\n.*\n.* PSACLHS1 - FIRST BYTE OF PSACLHS. (MDC384)\nPSACPULI EQUOVR ,,b,PSACLHS1\nPSASUM   EQUOVR ,,b,PSACLHS1\nPSARSMLI EQUOVR ,,b,PSACLHS1\nPSATRCEI EQUOVR ,,b,PSACLHS1\nPSAIOSI  EQUOVR ,,b,PSACLHS1\n.*\n.* PSACLHS2 - SECOND BYTE OF PSACLHS. (MDC385)\nPSARSMCI EQUOVR ,,b,PSACLHS2\nPSARSMGI EQUOVR ,,b,PSACLHS2\nPSAVFIXI EQUOVR ,,b,PSACLHS2\nPSAASMGI EQUOVR ,,b,PSACLHS2\nPSARSMSI EQUOVR ,,b,PSACLHS2\n.*\n.* PSACLHS3 - THIRD BYTE OF PSACLHS  (MDC386)\nPSARSMXI EQUOVR ,,b,PSACLHS3\nPSARSMAI EQUOVR ,,b,PSACLHS3\nPSAVPAGI EQUOVR ,,b,PSACLHS3\nPSADSPLI EQUOVR ,,b,PSACLHS3\nPSAASMLI EQUOVR ,,b,PSACLHS3\nPSASALLI EQUOVR ,,b,PSACLHS3\nPSAIOSLI EQUOVR ,,b,PSACLHS3\nPSARSMDI EQUOVR ,,b,PSACLHS3\n.*\n.* PSACLHS4 - FOURTH BYTE OF PSACLHS  (MDC392)\nPSAIOULI EQUOVR ,,b,PSACLHS3\nPSATPALI EQUOVR ,,b,PSACLHS3\nPSASRMLI EQUOVR ,,b,PSACLHS3\nPSACMSLI EQUOVR ,,b,PSACLHS3\nPSALCLLI EQUOVR ,,b,PSACLHS3\n.*\n.* PSAINTE - FLAGS FOR CPU TIMER  (MDC466)\nPSANUIN  EQUOVR ,,b,PSAINTE\n.*\n.* PSAPCFB1 - FUNCTION VALUE  (MDC484)\nPSAPCMC  EQUOVR ,,v,PSAPCFB1\nPSAPCPF  EQUOVR ,,v,PSAPCFB1\nPSAPCPS  EQUOVR ,,v,PSAPCFB1\nPSAPCAD  EQUOVR ,,v,PSAPCFB1\nPSAPCTR  EQUOVR ,,v,PSAPCFB1\nPSAPCPC  EQUOVR ,,v,PSAPCFB1\nPSAPCTRC EQUOVR ,,v,PSAPCFB1\nPSAPCAF  EQUOVR ,,v,PSAPCFB1\nPSAPCLS  EQUOVR ,,v,PSAPCFB1\nPSAPCART EQUOVR ,,v,PSAPCFB1\nPSAPCDPF EQUOVR ,,v,PSAPCFB1\nPSAPCDAR EQUOVR ,,v,PSAPCFB1\nPSAPCPRT EQUOVR ,,v,PSAPCFB1\nPSAPCMAX EQUOVR ,,v,PSAPCFB1\n.*\n.* PSAPCFB2 - FUNCTION FLAGS  (MDC491)\nPSAPCTRR EQUOVR ,,b,PSAPCFB2\nPSAPCMT  EQUOVR ,,b,PSAPCFB2\n.*\n.* PSAPCFB3 - RECURSION FLAGS  (MDC494)\nPSAPCP1  EQUOVR ,,b,PSAPCFB3\nPSAPCP2  EQUOVR ,,b,PSAPCFB3\nPSAPCDE  EQUOVR ,,b,PSAPCFB3\nPSAPCLV  EQUOVR ,,b,PSAPCFB3\nPSAPCP3  EQUOVR ,,b,PSAPCFB3\nPSAPCP4  EQUOVR ,,b,PSAPCFB3\nPSAPCPFR EQUOVR ,,b,PSAPCFB3\nPSAPCAVR EQUOVR ,,b,PSAPCFB3\n.*\n.* PSAPCFB4 - RECURSION FLAGS\nPSAPCDNV EQUOVR ,,b,PSAPCFB4\nPSAPCLSR EQUOVR ,,b,PSAPCFB4\n.*\n.* PSAMFLGS - SECOND BYTE OF PSAMODEW (MDC604)\nPSANSS   EQUOVR ,,b,PSAMFLGS\nPSAPRSRB EQUOVR ,,b,PSAMFLGS\n.*\n.* PSAMODE - SYSTEM MODE INDICATOR\nPSATASKM EQUOVR ,,v,PSAMODE\nPSASRBM  EQUOVR ,,b,PSAMODE\nPSAWAITM EQUOVR ,,b,PSAMODE\nPSADISPM EQUOVR ,,b,PSAMODE\nPSAPSRBM EQUOVR ,,b,PSAMODE\n.*\n.* PSALHEB0 - BYTE 0 OF THE CURRENT LOCK HELD\nPSABLSDI EQUOVR ,,b,PSALHEB0\nPSAXDSI  EQUOVR ,,b,PSALHEB0\nPSAXRESI EQUOVR ,,b,PSALHEB0\nPSAXQI   EQUOVR ,,b,PSALHEB0\nPSAESETI EQUOVR ,,b,PSALHEB0\nPSAIXSCI EQUOVR ,,b,PSALHEB0\nPSAIXSHI EQUOVR ,,b,PSALHEB0\nPSAIXDSI EQUOVR ,,b,PSALHEB0\n.*\n.* PSALHEB1 - BYTE 1 OF THE CURRENT LOCK HELD\nPSAIXLLI EQUOVR ,,b,PSALHEB1\nPSAULUTI EQUOVR ,,b,PSALHEB1\nPSAIXLRI EQUOVR ,,b,PSALHEB1\nPSAWLMRI EQUOVR ,,b,PSALHEB1\nPSAWLMQI EQUOVR ,,b,PSALHEB1\nPSACNTXI EQUOVR ,,b,PSALHEB1\nPSAREGSI EQUOVR ,,b,PSALHEB1\n.*\n.* PSACR0CB - CR0 CONTROL BYTE USED BY PROTPSA MACRO\nPSAENABL EQUOVR ,,b,PSACR0CB\nPSADSABL EQUOVR ,,v,PSACR0CB\n.*\n.* PSACR0SV - CR0 SAVE AREA USED BY PROTPSA MACRO\nPSACR0EN EQUOVR ,,b,PSACR0SV\nPSACR0FP EQUOVR ,,b,PSACR0SV\nPSACR0VI EQUOVR ,,b,PSACR0SV\n.*\n.* PSARCR0 - RESTART FLIH CR0 SAVE AREA\nPSARPEN  EQUOVR ,,b,PSARCR0\n.*\n.* PSASCFB - SUPERVISOR CONTROL FLAG BYTE.\nPSAIOPR  EQUOVR ,,b,PSASCFB\nPSAIORTY EQUOVR ,,b,PSASCFB\n.*\n.* PSATRACE - SYSTEM TRACE FLAGS.\nPSATROFF EQUOVR ,,b,PSATRACE\n.*\n.* PSASFLGS - Schedule flags\nPSASCHDA EQUOVR ,,b,PSASFLGS\nPSAMCHA  EQUOVR ,,b,PSASFLGS\nPSARSTA  EQUOVR ,,b,PSASFLGS\nPSAEGRA  EQUOVR ,,b,PSASFLGS\nPSARTMA  EQUOVR ,,b,PSASFLGS\n.*\n         MNOTE *,'Including IHAPSA mapping macro'\n         IHAPSA DSECT=YES,             * Generate as a DSECT           *\n               LIST=YES                * with unchanged PRINT-settings\n         EQUOVR *END\n*\n         ORG\nPSA_LEN  EQU   *-PSA                   * Length of PSA\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPSL   0100-20096-20096-0111-00128-00128-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Page Service List entry\n.*\n&LABEL   MAPPSL &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPSL                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPSL         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PSL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPSL).MEND\n&BXA_MAC_MAPPSL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PSL\n&BXA_CB_PSL SETC 'PSL'\n.*\n.* PSLFLGS1 - FLAGS SET BY CALLER\nPSLAST   EQUOVR ,,b,PSLFLGS1\nPSLNULL  EQUOVR ,,b,PSLFLGS1\nPSLCHAIN EQUOVR ,,b,PSLFLGS1\n.*\n.* PSLFUNC - RESERVED. SET BY PGSER MACRO\nPSLFFIX  EQUOVR ,,v,PSLFUNC\nPSLFFREE EQUOVR ,,v,PSLFUNC\nPSLFANYW EQUOVR ,,v,PSLFUNC\nPSLFLOAD EQUOVR ,,v,PSLFUNC\nPSLFOUT  EQUOVR ,,v,PSLFUNC\nPSLFRELS EQUOVR ,,v,PSLFUNC\nPSLFPROT EQUOVR ,,v,PSLFUNC\nPSLFUNP  EQUOVR ,,v,PSLFUNC\n.*\n.* PSLFLGS2 - RESERVED. SET BY PGSER MACRO\nPSLRLSE  EQUOVR ,,b,PSLFLGS2\nPSLKEPRL EQUOVR ,,b,PSLFLGS2\nPSLANYW  EQUOVR ,,b,PSLFLGS2\nPSLONG   EQUOVR ,,b,PSLFLGS2\nPSLBACK  EQUOVR ,,b,PSLFLGS2\n.*\n         MNOTE *,'Including IHAPSL mapping macro'\n         IHAPSL ,\n         EQUOVR *END\n*\nPSL      DSECT ,                       * Resume PSL DSECT\n         ORG\nPSL_LEN  EQU   *-PSL                   * Length of PSL\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPPVT   0100-20096-20096-0111-00119-00119-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the RSM Page Vector Table\n.*\n&LABEL   MAPPVT &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPPVT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPPVT         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'PVT').EMBED\n         AIF   ('&CB' EQ 'PVTEXT').EMBED\n         AIF   ('&CB' EQ 'PVTVVTAB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPPVT).MEND\n&BXA_MAC_MAPPVT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_PVT\n         GBLC  &BXA_CB_PVTEXT\n         GBLC  &BXA_CB_PVTVVTAB\n&BXA_CB_PVT      SETC 'PVT'\n&BXA_CB_PVTEXT   SETC 'PVT'\n&BXA_CB_PVTVVTAB SETC 'PVT'\n.*\n         MNOTE *,'Including IHAPVT mapping macro'\n         IHAPVT ,\n*\nPVT      DSECT ,                       * Resume PVT DSECT\n         ORG\nPVT_LEN  EQU   *-PVT                   * Length of PVT\n*\nPVTVVTAB DSECT ,                       * Resume PVTVVTAB DSECT\n         ORG\nPVTVVTAB_LEN EQU *-PVTVVTAB            * Length of PVTVVTAB\n*\nPVTEXT   DSECT ,                       * Resume PVTEXT DSECT\n         ORG\nPVTEXT_LEN EQU *-PVTEXT                * Length of PVTEXT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPQCB   0100-20096-20096-0111-00125-00125-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the GRS Queue Control Block\n.*\n&LABEL   MAPQCB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPQCB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPQCB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'QCB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPQCB).MEND\n&BXA_MAC_MAPQCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_QCB\n&BXA_CB_QCB SETC 'QCB'\n.*\n.* QCBRFLGS - RESOURCE DESCRIPTION FLAGS\nQCBSYS   EQUOVR ,,b,QCBRFLGS\nQCBSYSS  EQUOVR ,,b,QCBRFLGS\nQCBSTEP  EQUOVR ,,b,QCBRFLGS\nQCBGLOBL EQUOVR ,,b,QCBRFLGS\nQCBNOENQ EQUOVR ,,b,QCBRFLGS\nQCBPHLDR EQUOVR ,,b,QCBRFLGS\nQCBQM    EQUOVR ,,b,QCBRFLGS\nQCBMASF  EQUOVR ,,b,QCBRFLGS\n.*\n.* QCBFLGS2 - Second flag byte\nQCBSOC   EQUOVR ,,b,QCBFLGS2\n.*\n.* QCBRNAML - LENGTH OF RNAME\nQCBRNSZ1 EQUOVR ,,v,QCBRNAML\nQCBRNSZ2 EQUOVR ,,v,QCBRNAML\nQCBRNS2A EQUOVR ,,v,QCBRNAML\nQCBRNSZ3 EQUOVR ,,v,QCBRNAML\n.*\n         MNOTE *,'Including ISGQCB mapping macro'\n         ISGQCB ,\n         EQUOVR *END\n*\nQCB      DSECT ,                       * Resume QCB DSECT\n         ORG\nQCB_LEN  EQU   *-QCB                   * Length of QCB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPQEL   0100-20096-20096-0111-00134-00134-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the GRS Queue ELement\n.*\n&LABEL   MAPQEL &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPQEL                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPQEL         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'QEL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPQEL).MEND\n&BXA_MAC_MAPQEL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_QEL\n&BXA_CB_QEL SETC 'QEL'\n.*\n.* QELQFLGS - THESE FLAGS PERTAIN TO THE QEL\nQELSHARE EQUOVR ,,b,QELQFLGS\nQELMC    EQUOVR ,,b,QELQFLGS\nQELRESV  EQUOVR ,,b,QELQFLGS\nQELRESVC EQUOVR ,,b,QELQFLGS\nQELAUTH  EQUOVR ,,b,QELQFLGS\nQELTCBFA EQUOVR ,,b,QELQFLGS\nQELQMADQ EQUOVR ,,b,QELQFLGS\nQELQMATD EQUOVR ,,b,QELQFLGS\n.*\n.* QELLFLGS - THESE FLAGS PERTAIN TO LIST REQUESTS\nQELPOST  EQUOVR ,,b,QELLFLGS\nQELECBF  EQUOVR ,,b,QELLFLGS\nQELECBZ  EQUOVR ,,b,QELLFLGS\nQELLERSV EQUOVR ,,b,QELLFLGS\nQELGQSIR EQUOVR ,,b,QELLFLGS\nQELRNLNO EQUOVR ,,b,QELLFLGS\nQELFDTRY EQUOVR ,,b,QELLFLGS\nQELAFRES EQUOVR ,,b,QELLFLGS\n.*\n.* QELFLGS3 - Third flag byte\nQELOWNER EQUOVR ,,b,QELFLGS3\nQELSEHLD EQUOVR ,,b,QELFLGS3\nQELMC2E  EQUOVR ,,b,QELFLGS3\nQELMTARG EQUOVR ,,b,QELFLGS3\nQELNOHLD EQUOVR ,,b,QELFLGS3\nQELUCBER EQUOVR ,,b,QELFLGS3\n.*\n         MNOTE *,'Including ISGQEL mapping macro'\n         ISGQEL ,                      *\n         EQUOVR *END\n*\nQEL      DSECT ,                       * Resume QEL DSECT\n         ORG   ,\nQEL_LEN  EQU   *-QEL                   * Length of QEL\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPQHT   0100-20096-20096-0111-00116-00116-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the GRS Queue Hash Table\n.*\n&LABEL   MAPQHT &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPQHT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPQHT         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'QHT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPQHT).MEND\n&BXA_MAC_MAPQHT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_QHT\n         GBLC  &BXA_CB_QHTENT\n&BXA_CB_QHT SETC 'QHT'\n&BXA_CB_QHTENT SETC 'QHT'\n.*\n.* QHTEFQCB - ADDRESS OF FIRST QCB ON SYNONYM CHAIN OF FIRST RSES\nQHTEQDMG EQUOVR ,,b,QHTEFQCB\nQHTERSV1 EQUOVR ,,b,QHTEFQCB\n.*\n         MNOTE *,'Including ISGQHT mapping macro'\n         ISGQHT ,\n         EQUOVR *END\n*\nQHT      DSECT ,                       * Resume QHT header DSECT\n         ORG\nQHT_LEN  EQU   *-QHT                   * Length of QHT\n*\nQHTENT   DSECT ,                       * Resume QHT ENTry DSECT\n         ORG\nQHTENT_LEN EQU *-QHTENT                * Length of QHTENT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPQMIDS 0100-20096-20096-0111-00113-00113-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro with equates for SWAREQ\n.*\n         MAPQMIDS\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPQMIDS               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* &BXA_QMIDS is used to indicate MAPQMIDS has been expanded\n         GBLB  &BXA_MAC_MAPQMIDS\n         AIF   (&BXA_MAC_MAPQMIDS).MEND\n&BXA_MAC_MAPQMIDS SETB 1\n.*\n         GENMAPS (EPAL)                * EPAL contains related fields\n.*\n         MNOTE *,'Including IEFQMIDS mapping macro'\n.*\n.* Declare Block id's for use with EPAL/EPAX\nSWJCTID  EQUOVR ,,v,SWBLKID\nSWACTID  EQUOVR ,,v,SWBLKID\nSWSCTID  EQUOVR ,,v,SWBLKID\nSWSIOTID EQUOVR ,,v,SWBLKID\nSWDSNTID EQUOVR ,,v,SWBLKID\nSWPOTID  EQUOVR ,,v,SWBLKID\nSWSCTXID EQUOVR ,,v,SWBLKID\nSWDSENID EQUOVR ,,v,SWBLKID\nSWJMRID  EQUOVR ,,v,SWBLKID\nSWJFCBID EQUOVR ,,v,SWBLKID\nSWJFCXID EQUOVR ,,v,SWBLKID\nSWPDIDID EQUOVR ,,v,SWBLKID\nSWPDIBID EQUOVR ,,v,SWBLKID\nSWPDIQID EQUOVR ,,v,SWBLKID\nSWGDGNID EQUOVR ,,v,SWBLKID\nSWIWABID EQUOVR ,,v,SWBLKID\nSWVUTID  EQUOVR ,,v,SWBLKID\nSWDDNTID EQUOVR ,,v,SWBLKID\nSWAMPXID EQUOVR ,,v,SWBLKID\nSWJFCEID EQUOVR ,,v,SWBLKID\nSWJCTXID EQUOVR ,,v,SWBLKID\nSWSSWAID EQUOVR ,,v,SWBLKID\nSWSWBID  EQUOVR ,,v,SWBLKID\nSWSIOTBL EQUOVR ,,v,SWBLKID\nSWJFCBBL EQUOVR ,,v,SWBLKID\nSWJFCEBL EQUOVR ,,v,SWBLKID\nSWIFBID  EQUOVR ,,v,SWBLKID\n.*\n.* Put equates in a DSECT to prevent warning messages in ASM listing\nZB505    DSECT\n         IEFQMIDS\n         EQUOVR *END\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPRB    0100-20096-20096-0111-00281-00281-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps a Request Block\n.*\n&LABEL   MAPRB &DSECT=YES,             * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPRB                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPRB          * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'RB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPRB).MEND\n&BXA_MAC_MAPRB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_RB\n&BXA_CB_RB SETC 'RB'\n.*\n.* RBTMFLD - INDICATORS FOR TIMER ROUTINES.\nRBTMQUE  EQUOVR ,,b,RBTMFLD\nRBTMTOD  EQUOVR ,,b,RBTMFLD\nRBRSV005 EQUOVR ,,b,RBTMFLD\nRBWLIM   EQUOVR ,,b,RBTMFLD\nRBTMCMP  EQUOVR ,,b,RBTMFLD\nRBTMIND2 EQUOVR ,,b,RBTMFLD\nRBTMIND3 EQUOVR ,,b,RBTMFLD\nRBTREQ   EQUOVR ,,v,RBTMFLD\nRBWREQ   EQUOVR ,,b,RBTMFLD\nRBRREQ   EQUOVR ,,b,RBTMFLD\n.*\n.* RBSTAB1 - FIRST BYTE OF STATUS AND ATTRIBUTE BITS\nRBFTCKPT EQUOVR ,,b,RBSTAB1\nXRBCKPT  EQUOVR ,,b,RBSTAB1\n.*\n.* RBSTAB2 - SECOND BYTE OF STATUS AND ATTRIBUTE BITS\nRBTCBNXT EQUOVR ,,b,RBSTAB2\nXRBTCBP  EQUOVR ,,b,RBSTAB2\nRBFACTV  EQUOVR ,,b,RBSTAB2\nXRBACTV  EQUOVR ,,b,RBSTAB2\nRBFDYN   EQUOVR ,,b,RBSTAB2\nXRBFRRB  EQUOVR ,,b,RBSTAB2\nRBECBWT  EQUOVR ,,b,RBSTAB2\nXRBWAIT  EQUOVR ,,b,RBSTAB2\n.*\n.* RBOPSWB1 - OLD PSW BYTE 1\nRBOPER   EQUOVR ,,b,RBOPSWB1\n.*\n.* RBOPSWB2 - OLD PSW BYTE 2  (MDC304)\nRBOPSWPS EQUOVR ,,b,RBOPSWB2\n.*\n.* RBOPSWA - OLD PSW BYTES 5-8 (ADDRESS)\nRBOPSWM  EQUOVR ,,b,RBOPSWA\n.*\n.* RBRSV019 - RESERVED\nRBRSV020 EQUOVR ,,b,RBRSV019\nRBRSV021 EQUOVR ,,b,RBRSV019\nRBRSV022 EQUOVR ,,b,RBRSV019\nRBRSV023 EQUOVR ,,b,RBRSV019\nRBRSV024 EQUOVR ,,b,RBRSV019\nRBRSV025 EQUOVR ,,b,RBRSV019\nRBRSV026 EQUOVR ,,b,RBRSV019\nRBRSV027 EQUOVR ,,b,RBRSV019\n.*\n.* RBRSV028 - RESERVED\nRBRSV029 EQUOVR ,,b,RBRSV028\nRBRSV030 EQUOVR ,,b,RBRSV028\nRBRSV031 EQUOVR ,,b,RBRSV028\nRBRSV032 EQUOVR ,,b,RBRSV028\nRBRSV033 EQUOVR ,,b,RBRSV028\nRBRSV034 EQUOVR ,,b,RBRSV028\nRBRSV035 EQUOVR ,,b,RBRSV028\nRBRSV036 EQUOVR ,,b,RBRSV028\n.*\n.* RBRSV041 - RESERVED\nRBRSV042 EQUOVR ,,b,RBRSV041\nRBRSV043 EQUOVR ,,b,RBRSV041\nRBRSV044 EQUOVR ,,b,RBRSV041\nRBRSV045 EQUOVR ,,b,RBRSV041\nRBRSV046 EQUOVR ,,b,RBRSV041\nRBRSV047 EQUOVR ,,b,RBRSV041\nRBRSV048 EQUOVR ,,b,RBRSV041\nRBRSV049 EQUOVR ,,b,RBRSV041\n.*\n.* RBKEYSTA - THE KEY AND STATE OF THE IRB ROUTINE\nRBKEY    EQUOVR ,,b,RBKEYSTA\nRBCIRB   EQUOVR ,,b,RBKEYSTA\nRBSTATE  EQUOVR ,,b,RBKEYSTA\n.*\n.* RBFLAGS2 - SECOND FLAG BYTE\nRBXWAITA EQUOVR ,,b,RBFLAGS2\nRBRSV056 EQUOVR ,,b,RBFLAGS2\nRBRSV057 EQUOVR ,,b,RBFLAGS2\nRBRSV058 EQUOVR ,,b,RBFLAGS2\nRBRSV059 EQUOVR ,,b,RBFLAGS2\nRBRSV060 EQUOVR ,,b,RBFLAGS2\nRBRSV061 EQUOVR ,,b,RBFLAGS2\nRBRSV062 EQUOVR ,,b,RBFLAGS2\n.*\n.* RBFLAGS1 - FLAG BYTE\nRBSLOCK  EQUOVR ,,b,RBFLAGS1\nRBXWAIT  EQUOVR ,,b,RBFLAGS1\nRBABEND  EQUOVR ,,b,RBFLAGS1\nRBXWPRM  EQUOVR ,,b,RBFLAGS1\nRBASIR   EQUOVR ,,b,RBFLAGS1\nRBLONGWT EQUOVR ,,b,RBFLAGS1\nRBSCB    EQUOVR ,,b,RBFLAGS1\nRBSSSYN  EQUOVR ,,b,RBFLAGS1\n.*\n.* RBFLAGS3 - FLAG BYTE. SERIALIZATION:LOCAL LOCK\nRBWTECB  EQUOVR ,,b,RBFLAGS3\n.*\n.* RBSTAB1 - FIRST BYTE OF STATUS AND ATTRIBUTE BITS\nRBFTP    EQUOVR ,,b,RBSTAB1\nRBFTPRB  EQUOVR ,,v,RBSTAB1\nRBFTTIRB EQUOVR ,,b,RBSTAB1\nRBFTIRB  EQUOVR ,,b,RBSTAB1\nRBFTSIRB EQUOVR ,,b,RBSTAB1\nRBFTSVRB EQUOVR ,,b,RBSTAB1\nRBTRSVRB EQUOVR ,,b,RBSTAB1\nRBFNSVRB EQUOVR ,,b,RBSTAB1\nRBWAITP  EQUOVR ,,b,RBSTAB1\nRBATNXIT EQUOVR ,,b,RBSTAB1\nRBPMSVRB EQUOVR ,,b,RBSTAB1\n.*\n.* RBSTAB2 - SECOND BYTE OF STATUS AND ATTRIBUTE BITS\nRBATTN   EQUOVR ,,b,RBSTAB2\nRBETXR   EQUOVR ,,b,RBSTAB2\nRBUSIQE  EQUOVR ,,b,RBSTAB2\nRBIQETP  EQUOVR ,,b,RBSTAB2\nRBRQENR  EQUOVR ,,v,RBSTAB2\nRBIRBAER EQUOVR ,,b,RBSTAB2\nRBIQENR  EQUOVR ,,b,RBSTAB2\nRBIRBAIQ EQUOVR ,,b,RBSTAB2\n.*\n.* RBEP - ENTRY POINT ADDRESS OF ASYNCHRONOUSLY EXECUTED ROUTINE\nRBEPM    EQUOVR ,,b,RBEP\n.*\n.* RBEPLBYT - BITS 0-6 = BITS 24-30 OF EP ADDR         *\nRBEPPD   EQUOVR ,,b,RBEPLBYT\n.*\n.* RBRSV138 - RESERVED\nRBRSV139 EQUOVR ,,b,RBRSV138\nRBRSV140 EQUOVR ,,b,RBRSV138\nRBRSV141 EQUOVR ,,b,RBRSV138\nRBRSV142 EQUOVR ,,b,RBRSV138\nRBRSV143 EQUOVR ,,b,RBRSV138\nRBRSV144 EQUOVR ,,b,RBRSV138\nRBRSV145 EQUOVR ,,b,RBRSV138\nRBRSV146 EQUOVR ,,b,RBRSV138\n.*\n.* RBSFLGS1 - FIRST FLAG BYTE\nRBSSTAI  EQUOVR ,,b,RBSFLGS1\nRBSSTAR  EQUOVR ,,b,RBSFLGS1\nRBSDUMMY EQUOVR ,,b,RBSFLGS1\nRBSESTAE EQUOVR ,,b,RBSFLGS1\nRBRSV162 EQUOVR ,,b,RBSFLGS1\nRBSASYNC EQUOVR ,,b,RBSFLGS1\nRBSIOPRC EQUOVR ,,b,RBSFLGS1\nRBSNOIOP EQUOVR ,,b,RBSFLGS1\nRBSHALT  EQUOVR ,,b,RBSFLGS1\n.*\n.* RBSFLGS2 - SECOND FLAG BYTE\nRBSAMODE EQUOVR ,,b,RBSFLGS2\nRBSXCTL2 EQUOVR ,,b,RBSFLGS2\nRBRSV164 EQUOVR ,,b,RBSFLGS2\nRBSINUSE EQUOVR ,,b,RBSFLGS2\nRBRSV165 EQUOVR ,,b,RBSFLGS2\nRBRSV166 EQUOVR ,,b,RBSFLGS2\nRBSKEY0  EQUOVR ,,b,RBSFLGS2\nRBSSUPER EQUOVR ,,b,RBSFLGS2\n.*\n.* RBSFLG3 - OPTION FLAGS\nRBRSV167 EQUOVR ,,b,RBSFLG3\nRBSTERMI EQUOVR ,,b,RBSFLG3\nRBSRECRD EQUOVR ,,b,RBSFLG3\nRBSCNCEL EQUOVR ,,b,RBSFLG3\nRBSPRNTR EQUOVR ,,b,RBSFLG3\nRBSBRNTR EQUOVR ,,b,RBSFLG3\nRBSTERMO EQUOVR ,,b,RBSFLG3\nRBRSV168 EQUOVR ,,b,RBSFLG3\n.*\n.* RBCDFLGS - CONTROL FLAGS\nRBNOCELL EQUOVR ,,b,RBCDFLGS\nRBRSV009 EQUOVR ,,b,RBCDFLGS\nRBCDATCH EQUOVR ,,b,RBCDFLGS\nRBCDSAVE EQUOVR ,,b,RBCDFLGS\nRBCDNODE EQUOVR ,,b,RBCDFLGS\nRBCDSYNC EQUOVR ,,b,RBCDFLGS\nRBCDXCTL EQUOVR ,,b,RBCDFLGS\nRBCDLOAD EQUOVR ,,b,RBCDFLGS\n.*\n         MNOTE *,'Including IHARB mapping macro'\n         IHARB DSECT=YES,              * Generate RB                   *\n               LIST=YES                * with unchanged PRINT option\n         EQUOVR *END\n*\nRBPRFX   DSECT ,                       * Reset to RB DSECT\n         ORG\nRBPRFX_LEN EQU RBBASIC-RBPRFX          * Length of RB prefix area\nRB_LEN   EQU   *-RBBASIC               * Length of RB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPRCTD  0100-20096-20096-0111-00188-00188-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Region Control Task Data area\n.*\n&LABEL   MAPRCTD &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPRCTD                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPRCTD        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'RCTD').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPRCTD).MEND\n&BXA_MAC_MAPRCTD SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_RCTD\n&BXA_CB_RCTD SETC 'RCTD'\n.*\n.* RCTDFLG1 - FLAGS\nRCTDCLAS EQUOVR ,,b,RCTDFLG1\n.*\n.* RCTDWPTR - POINTER TO ASCBECB\nRCTDECBE EQUOVR ,,b,RCTDWPTR\n.*\n.* RCTDTECB - RCT TERMINATION ECB\nRCTDPOST EQUOVR ,,b,RCTDTECB\n.*\n.* RCTDMOID - MODULE IDENTIFIER\nRCTDINIT EQUOVR ,,b,RCTDMOID\nRCTDCOMN EQUOVR ,,b,RCTDMOID\nRCTDQUIS EQUOVR ,,b,RCTDMOID\nRCTDREST EQUOVR ,,b,RCTDMOID\nRCTDATTN EQUOVR ,,b,RCTDMOID\nRCTDTERM EQUOVR ,,b,RCTDMOID\nRCTDDUMP EQUOVR ,,b,RCTDMOID\n.*\n.* RCTDFLGS - RECOVERY FLAGS\nRCTDATTD EQUOVR ,,b,RCTDFLGS\nRCTDRES3 EQUOVR ,,b,RCTDFLGS\nRCTDATTS EQUOVR ,,b,RCTDFLGS\nRCTDBRCP EQUOVR ,,b,RCTDFLGS\nRCTDWAIT EQUOVR ,,b,RCTDFLGS\nRCTDLOOP EQUOVR ,,b,RCTDFLGS\nRCTDBR2T EQUOVR ,,b,RCTDFLGS\nRCTDBR2Q EQUOVR ,,b,RCTDFLGS\nRCTDBR2R EQUOVR ,,b,RCTDFLGS\nRCTDBR2A EQUOVR ,,b,RCTDFLGS\nRCTDRES4 EQUOVR ,,b,RCTDFLGS\nRCTDDETS EQUOVR ,,b,RCTDFLGS\nRCTDDETD EQUOVR ,,b,RCTDFLGS\nRCTDCANE EQUOVR ,,b,RCTDFLGS\nRCTDAFPE EQUOVR ,,b,RCTDFLGS\nRCTDAFPC EQUOVR ,,b,RCTDFLGS\nRCTDPMSG EQUOVR ,,b,RCTDFLGS\nRCTDIGAT EQUOVR ,,b,RCTDFLGS\nRCTDENQ  EQUOVR ,,b,RCTDFLGS\nRCTDOLL1 EQUOVR ,,b,RCTDFLGS\nRCTDRLL1 EQUOVR ,,b,RCTDFLGS\nRCTDPSUB EQUOVR ,,b,RCTDFLGS\nRCTDSY12 EQUOVR ,,b,RCTDFLGS\nRCTDSV16 EQUOVR ,,b,RCTDFLGS\nRCTDDEQ  EQUOVR ,,b,RCTDFLGS\nRCTDPSRB EQUOVR ,,b,RCTDFLGS\nRCTDSY13 EQUOVR ,,b,RCTDFLGS+1\nRCTDSSUB EQUOVR ,,b,RCTDFLGS+1\nRCTDSSRB EQUOVR ,,b,RCTDFLGS+1\nRCTDSWOT EQUOVR ,,b,RCTDFLGS+1\nRCTDQWAI EQUOVR ,,b,RCTDFLGS+1\nRCTDSLFL EQUOVR ,,b,RCTDFLGS+1\nRCTDPRGF EQUOVR ,,b,RCTDFLGS+1\nRCTDSYBC EQUOVR ,,b,RCTDFLGS+1\nRCTDSWPF EQUOVR ,,b,RCTDFLGS+2\nRCTDOLL2 EQUOVR ,,b,RCTDFLGS+2\nRCTDRLL2 EQUOVR ,,b,RCTDFLGS+2\nRCTDOGL1 EQUOVR ,,b,RCTDFLGS+2\nRCTDRGL1 EQUOVR ,,b,RCTDFLGS+2\nRCTDQABD EQUOVR ,,b,RCTDFLGS+2\nRCTDRS17 EQUOVR ,,b,RCTDFLGS\nRCTDOBLK EQUOVR ,,b,RCTDFLGS\nRCTDSTAT EQUOVR ,,b,RCTDFLGS\nRCTDRLLK EQUOVR ,,b,RCTDFLGS\nRCTDSY19 EQUOVR ,,b,RCTDFLGS\nRCTDSY18 EQUOVR ,,b,RCTDFLGS\nRCTDFAIL EQUOVR ,,b,RCTDFLGS\nRCTDRSLW EQUOVR ,,b,RCTDFLGS\nRCTDRIOC EQUOVR ,,b,RCTDFLGS+1\nRCTDWTLB EQUOVR ,,b,RCTDFLGS+1\nRCTDSTAC EQUOVR ,,b,RCTDFLGS+1\nRCTDRLWC EQUOVR ,,b,RCTDFLGS+1\nRCTDRLWB EQUOVR ,,b,RCTDFLGS+1\nRCTDWTLC EQUOVR ,,b,RCTDFLGS+2\nRCTDOPTC EQUOVR ,,b,RCTDFLGS+2\n.*\n.* RCTDRCTF - RCT'S CROSS COMMUNICATIONS RECOVERRY FLAGS\nRCTDRSBO EQUOVR ,,b,RCTDRCTF\nRCTDSUBN EQUOVR ,,b,RCTDRCTF\nRCTDPRGR EQUOVR ,,b,RCTDRCTF\nRCTDSRBN EQUOVR ,,b,RCTDRCTF\nRCTDDLCK EQUOVR ,,b,RCTDRCTF\n.*\n         MNOTE *,'Including IEARCTD mapping macro'\n         IEARCTD LIST=YES              * Keep current listing options\n         EQUOVR *END\n*\nRCTD     DSECT ,                       * Resume RCTD DSECT\n         ORG   ,\nRCTD_LEN EQU   *-RCTD                  * Length of RCTD\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPREGS  0100-20096-20096-0111-00140-00140-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the registers onto mnemonic names\n.*\n         MAPREGS\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPREGS                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Expand only once\n         GBLB  &BXA_MAC_MAPREGS\n         AIF   (&BXA_MAC_MAPREGS).MEND\n&BXA_MAC_MAPREGS SETB 1\n.*\n.* Put equates in a DSECT to prevent warning messages in ASM listing\nBXA_EQU  DSECT\n.*\n         MNOTE *,'Generating register equates'\n*\n* Register equates\nR0       EQU   0,4,C'g'                *\nR1       EQU   1,4,C'g'                *\nR2       EQU   2,4,C'g'                *\nR3       EQU   3,4,C'g'                *\nR4       EQU   4,4,C'g'                *\nR5       EQU   5,4,C'g'                *\nR6       EQU   6,4,C'g'                *\nR7       EQU   7,4,C'g'                *\nR8       EQU   8,4,C'g'                *\nR9       EQU   9,4,C'g'                *\nR10      EQU   10,4,C'g'               *\nR11      EQU   11,4,C'g'               *\nR12      EQU   12,4,C'g'               *\nR13      EQU   13,4,C'g'               *\nR14      EQU   14,4,C'g'               *\nR15      EQU   15,4,C'g'               *\n*\n* Access register equates\nAR0      EQU   0,4,C'a'                *\nAR1      EQU   1,4,C'a'                *\nAR2      EQU   2,4,C'a'                *\nAR3      EQU   3,4,C'a'                *\nAR4      EQU   4,4,C'a'                *\nAR5      EQU   5,4,C'a'                *\nAR6      EQU   6,4,C'a'                *\nAR7      EQU   7,4,C'a'                *\nAR8      EQU   8,4,C'a'                *\nAR9      EQU   9,4,C'a'                *\nAR10     EQU   10,4,C'a'               *\nAR11     EQU   11,4,C'a'               *\nAR12     EQU   12,4,C'a'               *\nAR13     EQU   13,4,C'a'               *\nAR14     EQU   14,4,C'a'               *\nAR15     EQU   15,4,C'a'               *\n*\n* Floating point register equates\nFPR0     EQU   0,8,C'f'                *\nFPR2     EQU   2,8,C'f'                *\nFPR4     EQU   4,8,C'f'                *\nFPR6     EQU   6,8,C'f'                *\n*\n* Control register equates\nCR0      EQU   0,4,C'c'                *\nCR1      EQU   1,4,C'c'                *\nCR2      EQU   2,4,C'c'                *\nCR3      EQU   3,4,C'c'                *\nCR4      EQU   4,4,C'c'                *\nCR5      EQU   5,4,C'c'                *\nCR6      EQU   6,4,C'c'                *\nCR7      EQU   7,4,C'c'                *\nCR8      EQU   8,4,C'c'                *\nCR9      EQU   9,4,C'c'                *\nCR10     EQU   10,4,C'c'               *\nCR11     EQU   11,4,C'c'               *\nCR12     EQU   12,4,C'c'               *\nCR13     EQU   13,4,C'c'               *\nCR14     EQU   14,4,C'c'               *\nCR15     EQU   15,4,C'c'               *\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPRMCT  0100-20096-20096-0111-00148-00148-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the System Resources Manager Control Table\n.*\n&LABEL   MAPRMCT &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPRMCT                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPRMCT        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'RMCT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPRMCT).MEND\n&BXA_MAC_MAPRMCT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_RMCT\n&BXA_CB_RMCT SETC 'RMCT'\n.*\n.* RMCTFLGS - PROCESSING CONTROL FLAGS\nRMCTMFA  EQUOVR ,,b,RMCTFLGS\nRMCTCPS1 EQUOVR ,,b,RMCTFLGS\nRMCTICS  EQUOVR ,,b,RMCTFLGS\nRMCTINIT EQUOVR ,,b,RMCTFLGS\nRMCTREPT EQUOVR ,,b,RMCTFLGS\nRMCTSTW  EQUOVR ,,b,RMCTFLGS\nRMCTTSAC EQUOVR ,,b,RMCTFLGS\nRMCTWLM  EQUOVR ,,b,RMCTFLGS\n.*\n.* OVERRIDE CONDITION FLAGS\nRMCTREP1 EQUOVR ,,b,RMCTFLGS+1\nRMCTMFS  EQUOVR ,,b,RMCTFLGS+1\nRMCTCNSW EQUOVR ,,b,RMCTFLGS+1\nRMCTCLST EQUOVR ,,b,RMCTFLGS+1\nRMCTRTSO EQUOVR ,,b,RMCTFLGS+1\nRMCTDMTI EQUOVR ,,b,RMCTFLGS+1\nRMCTOKCP EQUOVR ,,b,RMCTFLGS+1\nRMCTREP2 EQUOVR ,,b,RMCTFLGS+1\n.*\n.* RMCTTAPE - (OPT PARM) TAPE SELECTION:\nRMCTSLTN EQUOVR ,,b,RMCTTAPE\nRMCTSLTR EQUOVR ,,b,RMCTTAPE\nRMCTSLTL EQUOVR ,,b,RMCTTAPE\nRMCTSLTF EQUOVR ,,b,RMCTTAPE\n.*\n.* RMCTFLG2 - PROCESSING FLAGS\nRMCTOVFL EQUOVR ,,b,RMCTFLG2\nRMCTUNTR EQUOVR ,,b,RMCTFLG2\nRMCTSRNG EQUOVR ,,b,RMCTFLG2\nRMCTSQMR EQUOVR ,,b,RMCTFLG2\n.*\n.* RMCTCSB - RMCT COMPARE/SWAP BIT\nRMCTUTQE EQUOVR ,,b,RMCTCSB\nRMCTSIMT EQUOVR ,,b,RMCTCSB\nRMCTNOBQ EQUOVR ,,b,RMCTCSB\nRMCTNOEQ EQUOVR ,,b,RMCTCSB\nRMCTTPP  EQUOVR ,,b,RMCTCSB\nRMCTSTGF EQUOVR ,,b,RMCTCSB\nRMCTWSMF EQUOVR ,,b,RMCTCSB\nRMCTSSMF EQUOVR ,,b,RMCTCSB\n.*\n         MNOTE *,'Including IRARMCT mapping macro'\n         IRARMCT ,\n         EQUOVR *END\n*\nRMCT     DSECT ,                       * Resume RMCT DSECT\n         ORG\nRMCT_LEN EQU   *-RMCT                  * Length of RMCT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPRMPL  0100-20096-20096-0111-00135-00135-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Resource Manager Parameter List\n.*\n&LABEL   MAPRMPL &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPRMPL                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPRMPL        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'RMPL').EMBED\n         AIF   ('&CB' EQ 'RMPLPT').EMBED\n         AIF   ('&CB' EQ 'RMPLP2').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPRMPL).MEND\n&BXA_MAC_MAPRMPL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_RMPL\n         GBLC  &BXA_CB_RMPLPT\n         GBLC  &BXA_CB_RMPLP2\n&BXA_CB_RMPL   SETC 'RMPL'\n&BXA_CB_RMPLPT SETC 'RMPL'\n&BXA_CB_RMPLP2 SETC 'RMPL'\n.*\n.* DSECT of pointer to RMPL, as passed on invocation of resmgr routine\nRMPLPT   DSECT ,                       *\nRMPLPTA  DS    A                       * Ptr to RMPL\nRMPLPTU  DS    A                       * Ptr to RMPLP2 area\nRMPLPT_LEN EQU *-RMPLPT                *\n.*\n.* DSECT of pointer to user parmlist, as defined on resmgr add macro\nRMPLP2   DSECT ,                       *\nRMPLP2F1 DS    A                       * First fullword\nRMPLP2F2 DS    A                       * Second fullword\nRMPLP2_LEN EQU *-RMPLP2                *\n.*\n.* RMPLFLG1 - FLAGS INDICATING TYPE OF TERMINATION\nRMPLTYPE EQUOVR ,,b,RMPLFLG1\nRMPLTERM EQUOVR ,,b,RMPLFLG1\nRMPLRBPP EQUOVR ,,b,RMPLFLG1\nRMPLIPUF EQUOVR ,,b,RMPLFLG1\nRMPLRCOV EQUOVR ,,b,RMPLFLG1\nRMPLJST  EQUOVR ,,b,RMPLFLG1\nRMPLWT1M EQUOVR ,,b,RMPLFLG1\nRMPLMTC  EQUOVR ,,b,RMPLFLG1\nRMPLIOPG EQUOVR ,,b,RMPLFLG1\n.*\n         MNOTE *,'Including IHARMPL mapping macro'\n         IHARMPL DSECT=YES             * Include DSECT statement\n         EQUOVR *END\n*\nRMPL     DSECT ,                       * Restart RMPL\n         ORG   ,                       *\nRMPL_LEN EQU   *-RMPL                  * Length of RMPL\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPRPL   0100-20096-20096-0111-00835-00835-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Request Parameter List\n.*\n&LABEL   MAPRPL &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPRPL                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPRPL         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'RPL').EMBED\n         AIF   ('&CB' EQ 'RPL6').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPRPL).MEND\n&BXA_MAC_MAPRPL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_RPL\n         GBLC  &BXA_CB_RPL6\n&BXA_CB_RPL SETC 'RPL'\n&BXA_CB_RPL6 SETC 'RPL'\n.*\n.* RPLID - RPL IDENTIFIER\nRPLIDD   EQUOVR ,,v,RPLID\n.*\n.* RPLSTYP - RPL SUBTYPE\nRPLSVSAM EQUOVR ,,v,RPLSTYP\nRPLSTERM EQUOVR ,,v,RPLSTYP\nRPLSVTAM EQUOVR ,,v,RPLSTYP\nRPLS3540 EQUOVR ,,v,RPLSTYP\nRPLCRID  EQUOVR ,,v,RPLSTYP\n.*\n.* RPLREQ - RPL REQUEST TYPE\nRPLGET   EQUOVR ,,v,RPLREQ\nRPLPUT   EQUOVR ,,v,RPLREQ\nRPLPOINT EQUOVR ,,v,RPLREQ\nRPLERASE EQUOVR ,,v,RPLREQ\nRPLJSFMT EQUOVR ,,v,RPLREQ\nRPLCHECK EQUOVR ,,v,RPLREQ\nRPLENDRE EQUOVR ,,v,RPLREQ\nRPLVERIF EQUOVR ,,v,RPLREQ\nRPLIMPRT EQUOVR ,,v,RPLREQ\nRPLPFMTD EQUOVR ,,v,RPLREQ\nRPLPFMTI EQUOVR ,,v,RPLREQ\nRPLFRCIO EQUOVR ,,v,RPLREQ\nRPLCNVTA EQUOVR ,,v,RPLREQ\nRPLMNTAC EQUOVR ,,v,RPLREQ\nRPLWRITE EQUOVR ,,v,RPLREQ\nRPLACQRA EQUOVR ,,v,RPLREQ\nRPLRESET EQUOVR ,,v,RPLREQ\nRPLTERM  EQUOVR ,,v,RPLREQ\nRPLDO    EQUOVR ,,v,RPLREQ\nRPLVERRF EQUOVR ,,v,RPLREQ\nRPLLKADD EQUOVR ,,v,RPLREQ\nRPLLKREL EQUOVR ,,v,RPLREQ\nRPLLKCD  EQUOVR ,,v,RPLREQ\nRPLINQRC EQUOVR ,,v,RPLREQ\nRPLRETLK EQUOVR ,,v,RPLREQ\nRPLRECOV EQUOVR ,,v,RPLREQ\nRPLQUI   EQUOVR ,,v,RPLREQ\nRPLEADD  EQUOVR ,,v,RPLREQ\nRPLQUISE EQUOVR ,,v,RPLREQ\nRPLSMLGO EQUOVR ,,v,RPLREQ\nRPLOPNDS EQUOVR ,,v,RPLREQ\nRPLCHNG  EQUOVR ,,v,RPLREQ\nRPLINQIR EQUOVR ,,v,RPLREQ\nRPLINTPT EQUOVR ,,v,RPLREQ\nRPLREAD  EQUOVR ,,v,RPLREQ\nRPLSLICT EQUOVR ,,v,RPLREQ\nRPLCLOSE EQUOVR ,,v,RPLREQ\nRPLCLACB EQUOVR ,,v,RPLREQ\nRPLSNDCD EQUOVR ,,v,RPLREQ\nRPLRCVCD EQUOVR ,,v,RPLREQ\nRPLRSRCD EQUOVR ,,v,RPLREQ\nRPLSSCCD EQUOVR ,,v,RPLREQ\nRPLSDCMD EQUOVR ,,v,RPLREQ\nRPLRVCMD EQUOVR ,,v,RPLREQ\nRPLTREQS EQUOVR ,,v,RPLREQ\nRPLTOPNS EQUOVR ,,v,RPLREQ\nRPLTCLSS EQUOVR ,,v,RPLREQ\nRPLTRMS  EQUOVR ,,v,RPLREQ\n.*\n.* RPLECB - INTERNAL ECB\nRPLWAIT  EQUOVR ,,b,RPLECB\nRPLPOST  EQUOVR ,,b,RPLECB\n.*\n.* RPLRTNCD - RPL RETURN CODE\nRPLNOERR EQUOVR ,,v,RPLRTNCD\nRPLBLKER EQUOVR ,,v,RPLRTNCD\nRPLCBLKE EQUOVR ,,v,RPLRTNCD\nRPLLOGER EQUOVR ,,v,RPLRTNCD\nRPLLOGIC EQUOVR ,,v,RPLRTNCD\nRPLPHYER EQUOVR ,,v,RPLRTNCD\nRPLPHYSC EQUOVR ,,v,RPLRTNCD\nRPLNGRCC EQUOVR ,,v,RPLRTNCD\nRPLNOVAS EQUOVR ,,v,RPLRTNCD\nRPLSPECC EQUOVR ,,v,RPLRTNCD\nRPLCMDRT EQUOVR ,,v,RPLRTNCD\nRPLPURGE EQUOVR ,,v,RPLRTNCD\nRPLVTMNA EQUOVR ,,v,RPLRTNCD\nRPLSYERR EQUOVR ,,v,RPLRTNCD\nRPLDEVDC EQUOVR ,,v,RPLRTNCD\nRPLLIMEX EQUOVR ,,v,RPLRTNCD\nRPLEXRQ  EQUOVR ,,v,RPLRTNCD\nRPLEXRS  EQUOVR ,,v,RPLRTNCD\nRPLNOIN  EQUOVR ,,v,RPLRTNCD\nRPLVABND EQUOVR ,,v,RPLRTNCD\n.*\n.* RPLFDB2 - REASON CODE(VTAM)\nRPLERLK  EQUOVR ,,b,RPLFDB2\nRPLRVID  EQUOVR ,,b,RPLFDB2\nRPLATND  EQUOVR ,,b,RPLFDB2\nRPLDVUNS EQUOVR ,,b,RPLFDB2\nRPLIOERR EQUOVR ,,b,RPLFDB2\nRPLDLGFL EQUOVR ,,b,RPLFDB2\nRPLCUERR EQUOVR ,,b,RPLFDB2\nRPLSTSAV EQUOVR ,,b,RPLFDB2\n.*\n.* RPLFDB3 - DATA FLAGS(VTAM)\nRPLUINPT EQUOVR ,,b,RPLFDB3\nRPLSV32  EQUOVR ,,b,RPLFDB3\nRPLREOB  EQUOVR ,,b,RPLFDB3\nRPLREOM  EQUOVR ,,b,RPLFDB3\nRPLREOT  EQUOVR ,,b,RPLFDB3\nRPLLGFRC EQUOVR ,,b,RPLFDB3\nRPLRLG   EQUOVR ,,b,RPLFDB3\nRPLRDSOH EQUOVR ,,b,RPLFDB3\n.*\n.* RPLOPT1 - OPTION BYTE 1\nRPLLOC   EQUOVR ,,b,RPLOPT1\nRPLDIR   EQUOVR ,,b,RPLOPT1\nRPLSEQ   EQUOVR ,,b,RPLOPT1\nRPLSKP   EQUOVR ,,b,RPLOPT1\nRPLASY   EQUOVR ,,b,RPLOPT1\nRPLKGE   EQUOVR ,,b,RPLOPT1\nRPLGEN   EQUOVR ,,b,RPLOPT1\nRPLECBSW EQUOVR ,,b,RPLOPT1\nRPLECBIN EQUOVR ,,b,RPLOPT1\n.*\n.* RPLOPT2 - OPTION BYTE 2\nRPLKEY   EQUOVR ,,b,RPLOPT2\nRPLADR   EQUOVR ,,b,RPLOPT2\nRPLADD   EQUOVR ,,b,RPLOPT2\nRPLCNV   EQUOVR ,,b,RPLOPT2\nRPLBWD   EQUOVR ,,b,RPLOPT2\nRPLLRD   EQUOVR ,,b,RPLOPT2\nRPLWAITX EQUOVR ,,b,RPLOPT2\nRPLUPD   EQUOVR ,,b,RPLOPT2\nRPLNSP   EQUOVR ,,b,RPLOPT2\n.*\n.* RPLOPT3 - OPTION BYTE 3\nRPLEODS  EQUOVR ,,b,RPLOPT3\nRPLSFORM EQUOVR ,,b,RPLOPT3\nRPLBLK   EQUOVR ,,b,RPLOPT3\nRPLVFY   EQUOVR ,,b,RPLOPT3\nRPLFLD   EQUOVR ,,b,RPLOPT3\nRPLFMT   EQUOVR ,,b,RPLOPT3\nRPLFRMT  EQUOVR ,,b,RPLOPT3\nRPLALIGN EQUOVR ,,b,RPLOPT3\n.*\n.* RPLOPTRL - VSAM-RLS OPTIONS\nRPLKL    EQUOVR ,,b,RPLOPTRL\nRPLRDNRI EQUOVR ,,b,RPLOPTRL\nRPLRDCR  EQUOVR ,,b,RPLOPTRL\nRPLRDCRE EQUOVR ,,b,RPLOPTRL\nRPLRTYP  EQUOVR ,,b,RPLOPTRL\nRPLRTIND EQUOVR ,,b,RPLOPTRL\nRPLRTYP1 EQUOVR ,,b,RPLOPTRL\n.*\n.* RPLOPT4 - OPTCD BYTE 4\nRPLENDTR EQUOVR ,,b,RPLOPT4\nRPLXRBA  EQUOVR ,,b,RPLOPT4\nRPLMKFRM EQUOVR ,,b,RPLOPT4\nRPLNOCIR EQUOVR ,,b,RPLOPT4\nRPLCTA   EQUOVR ,,b,RPLOPT4\nRPLCTM   EQUOVR ,,b,RPLOPT4\nRPLCTO   EQUOVR ,,b,RPLOPT4\n.*\n.* RPLOPT5 - OPTION BYTE 5\nRPLDLGIN EQUOVR ,,b,RPLOPT5\nRPLSSNIN EQUOVR ,,b,RPLOPT5\nRPLPSOPT EQUOVR ,,b,RPLOPT5\nRPLNERAS EQUOVR ,,b,RPLOPT5\nRPLEAU   EQUOVR ,,b,RPLOPT5\nRPLERACE EQUOVR ,,b,RPLOPT5\nRPLNODE  EQUOVR ,,b,RPLOPT5\nRPLWROPT EQUOVR ,,b,RPLOPT5\n.*\n.* RPLOPT6 - OPTION BYTE 6\nRPLEOB   EQUOVR ,,b,RPLOPT6\nRPLEOM   EQUOVR ,,b,RPLOPT6\nRPLEOT   EQUOVR ,,b,RPLOPT6\nRPLCOND  EQUOVR ,,b,RPLOPT6\nRPLNCOND EQUOVR ,,b,RPLOPT6\nRPLLOCK  EQUOVR ,,b,RPLOPT6\nRPLRSV67 EQUOVR ,,b,RPLOPT6\nRPLRSV68 EQUOVR ,,b,RPLOPT6\n.*\n.* RPLOPT7 - OPTION BYTE 7\nRPLCNALL EQUOVR ,,b,RPLOPT7\nRPLCNANY EQUOVR ,,b,RPLOPT7\nRPLCNIMM EQUOVR ,,b,RPLOPT7\nRPLQOPT  EQUOVR ,,b,RPLOPT7\nRPLTPOST EQUOVR ,,b,RPLOPT7\nRPLRLSOP EQUOVR ,,b,RPLOPT7\nRPLTCRNO EQUOVR ,,b,RPLOPT7\nRPLRSV78 EQUOVR ,,b,RPLOPT7\n.*\n.* RPLOPT8 - OPTION BYTE 8\nRPLODACQ EQUOVR ,,b,RPLOPT8\nRPLODACP EQUOVR ,,b,RPLOPT8\nRPLODPRM EQUOVR ,,b,RPLOPT8\nRPLPEND  EQUOVR ,,b,RPLOPT8\nRPLSESS  EQUOVR ,,b,RPLOPT8\nRPLACTV  EQUOVR ,,b,RPLOPT8\nRPLUNCON EQUOVR ,,b,RPLOPT8\nRPLRSV88 EQUOVR ,,b,RPLOPT8\n.*\n.* RPLAIXID - AIX POINTER TYPE\nRPLAXPKP EQUOVR ,,b,RPLAIXID\n.*\n.* RPLEXTD1 - EXIT DEFINITIONS\nRPLEXSCH EQUOVR ,,b,RPLEXTD1\nRPLNEXIT EQUOVR ,,b,RPLEXTD1\nRPLEXIT  EQUOVR ,,b,RPLEXTD1\nRPLTCRYP EQUOVR ,,b,RPLEXTD1\nRPLNIB   EQUOVR ,,b,RPLEXTD1\nRPLBRANC EQUOVR ,,b,RPLEXTD1\n.*\n         MNOTE *,'Including IFGRPL mapping macro'\n         IFGRPL DSECT=YES              *\n         EQUOVR *END                   *\n*\nIFGRPL   DSECT ,                       * Resume RPL DSECT\nRPL      EQU   IFGRPL                  * Label for USINGs\n         ORG   ,                       *\nRPL_LEN  EQU   *-RPL                   * Length of RPL\n.*\n.* Adding overrides for VTAM extension of RPL\n.* RPLSSEI - SYSTEM SENSE ERROR CODES\nRPLPATHI EQUOVR ,,b,RPLSSEI\nRPLCPMI  EQUOVR ,,b,RPLSSEI\nRPLSTATI EQUOVR ,,b,RPLSSEI\nRPLFII   EQUOVR ,,b,RPLSSEI\nRPLRRI   EQUOVR ,,b,RPLSSEI\n.*\n.* RPLOPT9 - OPTION BYTE 9\nRPLLOGON EQUOVR ,,b,RPLOPT9\nRPLDEVCH EQUOVR ,,b,RPLOPT9\nRPLTERMS EQUOVR ,,b,RPLOPT9\nRPLCOUNT EQUOVR ,,b,RPLOPT9\nRPLAPPST EQUOVR ,,b,RPLOPT9\nRPLRNNM  EQUOVR ,,v,RPLOPT9\nRPLINQST EQUOVR ,,b,RPLOPT9\nRPLCIDE  EQUOVR ,,b,RPLOPT9\nRPLTOPL  EQUOVR ,,b,RPLOPT9\n.*\n.* RPLOPT10 - OPTION BYTE 10\nRPLBSCID EQUOVR ,,b,RPLOPT10\nRPLDSPLY EQUOVR ,,b,RPLOPT10\nRPLSPARM EQUOVR ,,b,RPLOPT10\nRPLTSKY  EQUOVR ,,b,RPLOPT10\nRPLUSVAR EQUOVR ,,b,RPLOPT10\nRPLUNBND EQUOVR ,,b,RPLOPT10\nRPLSONOP EQUOVR ,,b,RPLOPT10\nRPLSENOP EQUOVR ,,b,RPLOPT10\n.*\n.* RPLOPT11 - OPTION BYTE 11\nRPLQUIES EQUOVR ,,b,RPLOPT11\nRPLSTART EQUOVR ,,b,RPLOPT11\nRPLSTOP  EQUOVR ,,b,RPLOPT11\nRPLHOLD  EQUOVR ,,b,RPLOPT11\nRPLCNTRU EQUOVR ,,b,RPLOPT11\nRPLMTS   EQUOVR ,,b,RPLOPT11\nRPLTERMQ EQUOVR ,,b,RPLOPT11\nRPLKPSRB EQUOVR ,,b,RPLOPT11\nRPLFORCE EQUOVR ,,v,RPLOPT11\n.*\n.* RPLOPT12 - OPTION BYTE 12\nRPLRSPQD EQUOVR ,,b,RPLOPT12\nRPLKEEP  EQUOVR ,,b,RPLOPT12\nRPLTRUNC EQUOVR ,,b,RPLOPT12\nRPLNIBTK EQUOVR ,,b,RPLOPT12\nRPLQSESS EQUOVR ,,b,RPLOPT12\nRPLQNOTE EQUOVR ,,b,RPLOPT12\nRPLQALL  EQUOVR ,,b,RPLOPT12\nRPLFMHDR EQUOVR ,,b,RPLOPT12\n.*\n.* RPLSSEO - SYSTEM SENSE ERROR\nRPLCPMO  EQUOVR ,,b,RPLSSEO\nRPLSTATO EQUOVR ,,b,RPLSSEO\nRPLFIO   EQUOVR ,,b,RPLSSEO\nRPLRRO   EQUOVR ,,b,RPLSSEO\n.*\n.* RPLECB - INTERNAL ECB\nRPLAMOD2 EQUOVR ,,b,RPLECB\n.*\n.* RPLRH3 - THIRD REQUEST HEADER BYTE\nRPLBB    EQUOVR ,,b,RPLRH3\nRPLEB    EQUOVR ,,b,RPLRH3\nRPLCMD   EQUOVR ,,b,RPLRH3\nRPLCHREQ EQUOVR ,,b,RPLRH3\nRPLCSI   EQUOVR ,,b,RPLRH3\nRPLCEB   EQUOVR ,,b,RPLRH3\n.*\n.* RPLSRTYP - SEND OR RECEIVE TYPE\nRPLSRESP EQUOVR ,,b,RPLSRTYP\nRPLRRESP EQUOVR ,,b,RPLSRTYP\nRPLNFSYN EQUOVR ,,b,RPLSRTYP\nRPLDFASY EQUOVR ,,b,RPLSRTYP\n.*\n.* RPLCHN - POSITION IN REQUEST UNIT CHAIN\nRPLFIRST EQUOVR ,,b,RPLCHN\nRPLMIDLE EQUOVR ,,b,RPLCHN\nRPLLAST  EQUOVR ,,b,RPLCHN\nRPLONLY  EQUOVR ,,b,RPLCHN\nRPLVACS  EQUOVR ,,b,RPLCHN\nRPLAPPC  EQUOVR ,,b,RPLCHN\n.*\n.* RPLVTFL1 - VTAM FLAGS\nRPLXMEM  EQUOVR ,,b,RPLVTFL1\nRPLVTUSE EQUOVR ,,b,RPLVTFL1\nRPLAUTUS EQUOVR ,,b,RPLVTFL1\nRPLTNDSP EQUOVR ,,b,RPLVTFL1\nRPLTLGAC EQUOVR ,,b,RPLVTFL1\nRPLAMODE EQUOVR ,,b,RPLVTFL1\nRPLRSPNM EQUOVR ,,b,RPLVTFL1\nRPLRSPQR EQUOVR ,,b,RPLVTFL1\n.*\n.* RPLVTFL2 - POST/RESPOND FLAGS\nRPLSCHED EQUOVR ,,b,RPLVTFL2\nRPLQRI   EQUOVR ,,b,RPLVTFL2\nRPLEX    EQUOVR ,,b,RPLVTFL2\nRPLNFME  EQUOVR ,,b,RPLVTFL2\nRPLRRN   EQUOVR ,,b,RPLVTFL2\n.*\n.* RPLCNTDF - DATA FLOW CONTROL CODES\nRPLDATA  EQUOVR ,,b,RPLCNTDF\nRPLCNCEL EQUOVR ,,b,RPLCNTDF\nRPLQC    EQUOVR ,,b,RPLCNTDF\nRPLQEC   EQUOVR ,,b,RPLCNTDF\nRPLCHASE EQUOVR ,,b,RPLCNTDF\nRPLRELQ  EQUOVR ,,b,RPLCNTDF\nRPLQI    EQUOVR ,,b,RPLCNTDF\n.*\n.* RPLCNTDC - DATA FLOW CONTROL CODES\nRPLBID   EQUOVR ,,b,RPLCNTDC\nRPLRTR   EQUOVR ,,b,RPLCNTDC\nRPLLUS   EQUOVR ,,b,RPLCNTDC\nRPLSIGNL EQUOVR ,,b,RPLCNTDC\nRPLTBIND EQUOVR ,,b,RPLCNTDC\nRPLTUNBD EQUOVR ,,b,RPLCNTDC\nRPLSBI   EQUOVR ,,b,RPLCNTDC\nRPLBIS   EQUOVR ,,b,RPLCNTDC\n.*\n.* RPLCNTSC - SESSION CONTROL CODES\nRPLSDT   EQUOVR ,,b,RPLCNTSC\nRPLCLEAR EQUOVR ,,b,RPLCNTSC\nRPLSTSN  EQUOVR ,,b,RPLCNTSC\nRPLSHUTD EQUOVR ,,b,RPLCNTSC\nRPLSHUTC EQUOVR ,,b,RPLCNTSC\nRPLRQR   EQUOVR ,,b,RPLCNTSC\nRPLRSHUT EQUOVR ,,b,RPLCNTSC\nRPLSWTCH EQUOVR ,,b,RPLCNTSC\n.*\n.* RPLO4 - VTAM OPTION BYTE 4\nRPLPERS  EQUOVR ,,b,RPLO4\nRPLNPERS EQUOVR ,,b,RPLO4\nRPLINQPS EQUOVR ,,b,RPLO4\nRPLOPRES EQUOVR ,,b,RPLO4\nRPLSLTMR EQUOVR ,,b,RPLO4\nRPLNQN   EQUOVR ,,b,RPLO4\nRPLEXTOP EQUOVR ,,b,RPLO4\n.*\n.* RPLOPT4X - EXTENDED OPTCD VALUE BYTE\nRPLSTGNA EQUOVR ,,v,RPLOPT4X\nRPLSTGND EQUOVR ,,v,RPLOPT4X\nRPLSTGNS EQUOVR ,,v,RPLOPT4X\nRPLIQSNM EQUOVR ,,v,RPLOPT4X\nRPLCGEAF EQUOVR ,,v,RPLOPT4X\n.*\n.* RPLO5 - VTAM OPTION BYTE 5\nRPLTNFY  EQUOVR ,,b,RPLO5\nRPLTHRDC EQUOVR ,,b,RPLO5\nRPLCNDCS EQUOVR ,,b,RPLO5\n.*\n.* RPLO6 - VTAM OPTION BYTE 6\nRPLXBFL  EQUOVR ,,b,RPLO6\nRPLBUFFL EQUOVR ,,b,RPLO6\nRPLCONTC EQUOVR ,,b,RPLO6\n.*\n.* RPLO7 - VTAM OPTION BYTE 7\nRPLBCKUP EQUOVR ,,b,RPLO7\nRPLLMPEO EQUOVR ,,b,RPLO7\n.*\n.* RPLO8 - VTAM OPTION BYTE 8\nRPLMAXSP EQUOVR ,,b,RPLO8\nRPLUSRRH EQUOVR ,,b,RPLO8\n.*\n.* RPLOBSQ - STSN OUTBOUND ACTION CODES\nRPLOSET  EQUOVR ,,b,RPLOBSQ\nRPLOTST  EQUOVR ,,b,RPLOBSQ\nRPLORSET EQUOVR ,,b,RPLOBSQ\nRPLOIGN  EQUOVR ,,b,RPLOBSQ\nRPLOPOS  EQUOVR ,,b,RPLOBSQ\nRPLONEG  EQUOVR ,,b,RPLOBSQ\nRPLOINV  EQUOVR ,,b,RPLOBSQ\n.*\n.* RPLIBSQ - STSN INBOUND ACTION CODES\nRPLISET  EQUOVR ,,b,RPLIBSQ\nRPLITST  EQUOVR ,,b,RPLIBSQ\nRPLIRSET EQUOVR ,,b,RPLIBSQ\nRPLIIGN  EQUOVR ,,b,RPLIBSQ\nRPLIPOS  EQUOVR ,,b,RPLIBSQ\nRPLINEG  EQUOVR ,,b,RPLIBSQ\nRPLIINV  EQUOVR ,,b,RPLIBSQ\n.*\n.* RPLOF68 -\nRPLXSRV  EQUOVR ,,b,RPLOF68\n.*\n.* RPLREQ - RPL REQUEST TYPE\nRPL6APPC EQUOVR ,,v,RPLREQ\nRPL6CHEK EQUOVR ,,v,RPLREQ\nRPL3VCNS EQUOVR ,,v,RPLREQ\nRPL3CHEK EQUOVR ,,v,RPLREQ\n.*\n.* RPLFDB2 - REASON CODE(VTAM)\nRPLAOK   EQUOVR ,,v,RPLFDB2\nRPLRCDPR EQUOVR ,,v,RPLFDB2\nRPLCBERR EQUOVR ,,v,RPLFDB2\nRPLEXERR EQUOVR ,,v,RPLFDB2\nRPLCLSIP EQUOVR ,,v,RPLFDB2\nRPLCIDNG EQUOVR ,,v,RPLFDB2\nRPLILDOP EQUOVR ,,v,RPLFDB2\nRPLWANCR EQUOVR ,,v,RPLFDB2\nRPLSANOD EQUOVR ,,v,RPLFDB2\nRPLSANDA EQUOVR ,,v,RPLFDB2\nRPLSTOOD EQUOVR ,,v,RPLFDB2\nRPLBUFTE EQUOVR ,,v,RPLFDB2\nRPLRTOOD EQUOVR ,,v,RPLFDB2\nRPLWTOI  EQUOVR ,,v,RPLFDB2\nRPLEWNS  EQUOVR ,,v,RPLFDB2\nRPLEWAU3 EQUOVR ,,v,RPLFDB2\nRPLCWTOO EQUOVR ,,v,RPLFDB2\nRPLCWB   EQUOVR ,,v,RPLFDB2\nRPLCCCPY EQUOVR ,,v,RPLFDB2\nRPLIDA   EQUOVR ,,v,RPLFDB2\nRPLILDOA EQUOVR ,,v,RPLFDB2\nRPLJTOJ  EQUOVR ,,v,RPLFDB2\nRPLM255  EQUOVR ,,v,RPLFDB2\nRPLRILCP EQUOVR ,,v,RPLFDB2\nRPLCRIRT EQUOVR ,,v,RPLFDB2\nRPLRIOCC EQUOVR ,,v,RPLFDB2\nRPLEWBLK EQUOVR ,,v,RPLFDB2\nRPLCRSDC EQUOVR ,,v,RPLFDB2\nRPLIREST EQUOVR ,,v,RPLFDB2\nRPLWBT32 EQUOVR ,,v,RPLFDB2\nRPLRMOBN EQUOVR ,,v,RPLFDB2\nRPLCTN32 EQUOVR ,,v,RPLFDB2\nRPLWCVDE EQUOVR ,,v,RPLFDB2\nRPLRNFT3 EQUOVR ,,v,RPLFDB2\nRPLRCINV EQUOVR ,,v,RPLFDB2\nRPLINVRM EQUOVR ,,v,RPLFDB2\nRPLATSFI EQUOVR ,,v,RPLFDB2\nRPLIIINA EQUOVR ,,v,RPLFDB2\nRPLICNDN EQUOVR ,,v,RPLFDB2\nRPLILSIN EQUOVR ,,v,RPLFDB2\nRPLIICBE EQUOVR ,,v,RPLFDB2\nRPLOLIPT EQUOVR ,,v,RPLFDB2\nRPLINTNA EQUOVR ,,v,RPLFDB2\nRPLRCLCK EQUOVR ,,v,RPLFDB2\nRPLOCE01 EQUOVR ,,v,RPLFDB2\nRPLOCE02 EQUOVR ,,v,RPLFDB2\nRPLOCE03 EQUOVR ,,v,RPLFDB2\nRPLOCE05 EQUOVR ,,v,RPLFDB2\nRPLOCE07 EQUOVR ,,v,RPLFDB2\nRPLOCE08 EQUOVR ,,v,RPLFDB2\nRPLOCE09 EQUOVR ,,v,RPLFDB2\nRPLOCE10 EQUOVR ,,v,RPLFDB2\nRPLOCE11 EQUOVR ,,v,RPLFDB2\nRPLOCE12 EQUOVR ,,v,RPLFDB2\nRPLOCE13 EQUOVR ,,v,RPLFDB2\nRPLOCE14 EQUOVR ,,v,RPLFDB2\nRPLOCE16 EQUOVR ,,v,RPLFDB2\nRPLOCE19 EQUOVR ,,v,RPLFDB2\nRPLOCE21 EQUOVR ,,v,RPLFDB2\nRPLOCE22 EQUOVR ,,v,RPLFDB2\nRPLOCE25 EQUOVR ,,v,RPLFDB2\nRPLOCE27 EQUOVR ,,v,RPLFDB2\nRPLOCE28 EQUOVR ,,v,RPLFDB2\nRPLOCE29 EQUOVR ,,v,RPLFDB2\nRPLOCE32 EQUOVR ,,v,RPLFDB2\nRPLOCE33 EQUOVR ,,v,RPLFDB2\nRPLRNONA EQUOVR ,,v,RPLFDB2\nRPLOCE34 EQUOVR ,,v,RPLFDB2\nRPLOCE35 EQUOVR ,,v,RPLFDB2\nRPLOCE36 EQUOVR ,,v,RPLFDB2\nRPLOCE37 EQUOVR ,,v,RPLFDB2\nRPLOCE39 EQUOVR ,,v,RPLFDB2\nRPLRNOEL EQUOVR ,,v,RPLFDB2\nRPLRNOSE EQUOVR ,,v,RPLFDB2\nRPLRNOIA EQUOVR ,,v,RPLFDB2\nRPLRNOCL EQUOVR ,,v,RPLFDB2\nRPLRNOCE EQUOVR ,,v,RPLFDB2\nRPLPCIT  EQUOVR ,,v,RPLFDB2\nRPLLGCNT EQUOVR ,,v,RPLFDB2\nRPLCPCNT EQUOVR ,,v,RPLFDB2\nRPLILRS  EQUOVR ,,v,RPLFDB2\nRPLUSELE EQUOVR ,,v,RPLFDB2\nRPLCRNF  EQUOVR ,,v,RPLFDB2\nRPLNORD  EQUOVR ,,v,RPLFDB2\nRPLOLIPX EQUOVR ,,v,RPLFDB2\nRPLCPYE2 EQUOVR ,,v,RPLFDB2\nRPLRELNP EQUOVR ,,v,RPLFDB2\nRPLCPYE1 EQUOVR ,,v,RPLFDB2\nRPLDFIBH EQUOVR ,,v,RPLFDB2\nRPLDFIPO EQUOVR ,,v,RPLFDB2\nRPLRCWNP EQUOVR ,,v,RPLFDB2\nRPLYTCTN EQUOVR ,,v,RPLFDB2\nRPLYADIF EQUOVR ,,v,RPLFDB2\nRPLSTALF EQUOVR ,,v,RPLFDB2\nRPLUSRES EQUOVR ,,v,RPLFDB2\nRPLSSTRM EQUOVR ,,v,RPLFDB2\nRPLUNTRM EQUOVR ,,v,RPLFDB2\nRPLNCPAN EQUOVR ,,v,RPLFDB2\nRPLPCF   EQUOVR ,,v,RPLFDB2\nRPLANS   EQUOVR ,,v,RPLFDB2\nRPLCLOCC EQUOVR ,,v,RPLFDB2\nRPLVOFOC EQUOVR ,,v,RPLFDB2\nRPLDISCO EQUOVR ,,v,RPLFDB2\nRPLBTHEX EQUOVR ,,v,RPLFDB2\nRPLOCS01 EQUOVR ,,v,RPLFDB2\nRPLOCS02 EQUOVR ,,v,RPLFDB2\nRPLOCS03 EQUOVR ,,v,RPLFDB2\nRPLOCS04 EQUOVR ,,v,RPLFDB2\nRPLOCS05 EQUOVR ,,v,RPLFDB2\nRPLOCS06 EQUOVR ,,v,RPLFDB2\nRPLOCS07 EQUOVR ,,v,RPLFDB2\nRPLOCS08 EQUOVR ,,v,RPLFDB2\nRPLOCS09 EQUOVR ,,v,RPLFDB2\nRPLDIDOL EQUOVR ,,v,RPLFDB2\nRPLDIDIL EQUOVR ,,v,RPLFDB2\n.*\n.* RPLFDB3 - DATA FLAGS(VTAM)\nRPLIACT  EQUOVR ,,v,RPLFDB3\nRPLIINA  EQUOVR ,,v,RPLFDB3\nRPLINA   EQUOVR ,,v,RPLFDB3\nRPLITNA  EQUOVR ,,v,RPLFDB3\nRPLIQUIE EQUOVR ,,v,RPLFDB3\n.*\n.* RPL6FLG1 - FIRST INDICATORS BYTE\nRPL6FILL EQUOVR ,,b,RPL6FLG1\nRPL6CD   EQUOVR ,,b,RPL6FLG1\nRPL6SLS  EQUOVR ,,b,RPL6FLG1\nRPL6CFTX EQUOVR ,,b,RPL6FLG1\nRPL6LIST EQUOVR ,,b,RPL6FLG1\n.*\n.* RPL6FLG2 - SECOND INDICATORS BYTE\nRPL6BISC EQUOVR ,,b,RPL6FLG2\nRPL6RTSX EQUOVR ,,b,RPL6FLG2\nRPL6CXMD EQUOVR ,,b,RPL6FLG2\nRPL6TYPE EQUOVR ,,b,RPL6FLG2\nRPL6NAMU EQUOVR ,,b,RPL6FLG2\n.*\n.* RPL6FLG3 - THIRD INDICATORS BYTE\nRPL6LOCK EQUOVR ,,b,RPL6FLG3\nRPL6DERC EQUOVR ,,b,RPL6FLG3\nRPL6EXDR EQUOVR ,,b,RPL6FLG3\nRPL6CMOD EQUOVR ,,b,RPL6FLG3\nRPL6LAST EQUOVR ,,b,RPL6FLG3\n.*\n.* RPL6RCV1 - WHAT RECEIVED INDICATOR\nRPL6WDAT EQUOVR ,,b,RPL6RCV1\nRPL6WDAC EQUOVR ,,b,RPL6RCV1\nRPL6WDAI EQUOVR ,,b,RPL6RCV1\nRPL6WSND EQUOVR ,,b,RPL6RCV1\nRPL6WCFM EQUOVR ,,b,RPL6RCV1\nRPL6WDAL EQUOVR ,,b,RPL6RCV1\nRPL6WLOG EQUOVR ,,b,RPL6RCV1\nRPL6WPSH EQUOVR ,,b,RPL6RCV1\n.*\n.* RPL6RCV2 - RESERVED FOR BIT MASK\nRPL6WPSI EQUOVR ,,b,RPL6RCV2\n.*\n.* RPL6RTUN - RETURNED INDICATORS\nRPL6RMH5 EQUOVR ,,b,RPL6RTUN\nRPL6RLOG EQUOVR ,,b,RPL6RTUN\nRPL6RSIG EQUOVR ,,b,RPL6RTUN\nRPL6CLSA EQUOVR ,,b,RPL6RTUN\nRPL6AVFA EQUOVR ,,b,RPL6RTUN\nRPL6PV   EQUOVR ,,b,RPL6RTUN\nRPL6CRYP EQUOVR ,,b,RPL6RTUN\n.*\n.* RPL6CBID - CONTROL BLOCK IDENTIFIER\n.*RPL6ID EQUOVR ,,v,RPL6CBID             Value exceeds X'FFFF'\n.*\n.* RPL6REQ - TYPE OF APPCCMD\nRPL6ALLC EQUOVR ,,v,RPL6REQ\nRPL6PLOC EQUOVR ,,v,RPL6REQ\nRPL6SFM5 EQUOVR ,,v,RPL6REQ\nRPL6RSRV EQUOVR ,,v,RPL6REQ\nRPL6DEAL EQUOVR ,,v,RPL6REQ\nRPL6DEAQ EQUOVR ,,v,RPL6REQ\nRPL6OPER EQUOVR ,,v,RPL6REQ\nRPL6PREC EQUOVR ,,v,RPL6REQ\nRPL6RFH5 EQUOVR ,,v,RPL6REQ\nRPL6RCV  EQUOVR ,,v,RPL6REQ\nRPL6RCVX EQUOVR ,,v,RPL6REQ\nRPL6RJCT EQUOVR ,,v,RPL6REQ\nRPL6SEND EQUOVR ,,v,RPL6REQ\nRPL6SNDX EQUOVR ,,v,RPL6REQ\nRPL6SNRC EQUOVR ,,v,RPL6REQ\nRPL6SETS EQUOVR ,,v,RPL6REQ\nRPL6TSTS EQUOVR ,,v,RPL6REQ\n.*\n.* RPL6QUAL - SUBTYPE OF APPCCMD\nRPL6NQUA EQUOVR ,,v,RPL6QUAL\nRPL6APRG EQUOVR ,,v,RPL6QUAL\nRPL6ASRV EQUOVR ,,v,RPL6QUAL\nRPL6ATIM EQUOVR ,,v,RPL6QUAL\nRPL6AUSR EQUOVR ,,v,RPL6QUAL\nRPL6ANY  EQUOVR ,,v,RPL6QUAL\nRPL6CNOS EQUOVR ,,v,RPL6QUAL\nRPL6CFRM EQUOVR ,,v,RPL6QUAL\nRPL6CFMD EQUOVR ,,v,RPL6QUAL\nRPL6DATA EQUOVR ,,v,RPL6QUAL\nRPL6DCON EQUOVR ,,v,RPL6QUAL\nRPL6DFLU EQUOVR ,,v,RPL6QUAL\nRPL6DFIN EQUOVR ,,v,RPL6QUAL\nRPL6DSPY EQUOVR ,,v,RPL6QUAL\nRPL6ERR  EQUOVR ,,v,RPL6QUAL\nRPL6FLSH EQUOVR ,,v,RPL6QUAL\nRPL6RQSD EQUOVR ,,v,RPL6QUAL\nRPL6SPEC EQUOVR ,,v,RPL6QUAL\nRPL6ACT  EQUOVR ,,v,RPL6QUAL\nRPL6DACT EQUOVR ,,v,RPL6QUAL\nRPL6ALCD EQUOVR ,,v,RPL6QUAL\nRPL6IMED EQUOVR ,,v,RPL6QUAL\nRPL6CWIN EQUOVR ,,v,RPL6QUAL\nRPL6SESN EQUOVR ,,v,RPL6QUAL\nRPL6CONV EQUOVR ,,v,RPL6QUAL\nRPL6SUSP EQUOVR ,,v,RPL6QUAL\nRPL6RESM EQUOVR ,,v,RPL6QUAL\nRPL6REST EQUOVR ,,v,RPL6QUAL\nRPL6SYNB EQUOVR ,,v,RPL6QUAL\nRPL6SYNE EQUOVR ,,v,RPL6QUAL\nRPL6CNGP EQUOVR ,,v,RPL6QUAL\nRPL6SESF EQUOVR ,,v,RPL6QUAL\nRPL6IANY EQUOVR ,,v,RPL6QUAL\nRPL6ISPC EQUOVR ,,v,RPL6QUAL\nRPL6QALL EQUOVR ,,v,RPL6QUAL\nRPL6IALL EQUOVR ,,v,RPL6QUAL\nRPL6QUE  EQUOVR ,,v,RPL6QUAL\nRPL6DQUE EQUOVR ,,v,RPL6QUAL\n.*\n.* RPL6FLG1 - FIRST INDICATORS BYTE\nRPL6BUFF EQUOVR ,,v,RPL6FLG1\nRPL6LL   EQUOVR ,,b,RPL6FLG1\n.*\n.* RPL6FLG1 - FIRST INDICATORS BYTE\nRPL6CDIM EQUOVR ,,v,RPL6FLG1\nRPL6CDDE EQUOVR ,,b,RPL6FLG1\n.*\n.* RPL6FLG1 - FIRST INDICATORS BYTE\nRPL6CFT  EQUOVR ,,b,RPL6FLG1\nRPL6NCFT EQUOVR ,,v,RPL6FLG1\n.*\n.* RPL6FLG2 - SECOND INDICATORS BYTE\nRPL6TBIT EQUOVR ,,b,RPL6FLG2\nRPL6USER EQUOVR ,,b,RPL6FLG2\nRPL6PRGM EQUOVR ,,b,RPL6FLG2\nRPL6SVC  EQUOVR ,,b,RPL6FLG2\n.*\n.* RPL6FLG2 - SECOND INDICATORS BYTE\nRPL6NUNS EQUOVR ,,v,RPL6FLG2\nRPL6ANAM EQUOVR ,,b,RPL6FLG2\nRPL6GNAM EQUOVR ,,b,RPL6FLG2\n.*\n.* RPL6FLG3 - THIRD INDICATORS BYTE\nRPL6LONG EQUOVR ,,v,RPL6FLG3\nRPL6SHRT EQUOVR ,,b,RPL6FLG3\n.*\n.* RPL6FLG3 - THIRD INDICATORS BYTE\nRPL6RNRM EQUOVR ,,v,RPL6FLG3\nRPL6RABN EQUOVR ,,b,RPL6FLG3\nRPL6RANR EQUOVR ,,b,RPL6FLG3\n.*\n.* RPL6FLG3 - THIRD INDICATORS BYTE\nRPL6CBIT EQUOVR ,,b,RPL6FLG3\nRPL6LLCA EQUOVR ,,v,RPL6FLG3\nRPL6BFCA EQUOVR ,,b,RPL6FLG3\nRPL6CS   EQUOVR ,,b,RPL6FLG3\nRPL6SAME EQUOVR ,,b,RPL6FLG3\n.*\n.* RPL6FLG2 - SECOND INDICATORS BYTE\nRPL6CXBT EQUOVR ,,b,RPL6FLG2\nRPL6CSCX EQUOVR ,,v,RPL6FLG2\nRPL6CACX EQUOVR ,,b,RPL6FLG2\nRPL6SAMX EQUOVR ,,b,RPL6FLG2\n.*\n.* RPL6FLG3 - THIRD INDICATORS BYTE\nRPL6NLST EQUOVR ,,v,RPL6FLG3\nRPL6LMOD EQUOVR ,,b,RPL6FLG3\nRPL6NCTL EQUOVR ,,b,RPL6FLG3\nRPL6ALL  EQUOVR ,,b,RPL6FLG3\n.*\n.* RPL6FLG1 - FIRST INDICATORS BYTE\nRPL6LINO EQUOVR ,,v,RPL6FLG1\nRPL6LINS EQUOVR ,,b,RPL6FLG1\nRPL6LIAL EQUOVR ,,b,RPL6FLG1\n.*\n.* RPL6CCST - CURRENT CONVERSATION STATE\nRPL6RSET EQUOVR ,,v,RPL6CCST\nRPL6SND  EQUOVR ,,v,RPL6CCST\nRPL6RECV EQUOVR ,,v,RPL6CCST\nRPL6RVCF EQUOVR ,,v,RPL6CCST\nRPL6RVCS EQUOVR ,,v,RPL6CCST\nRPL6RVCD EQUOVR ,,v,RPL6CCST\nRPL6PNDD EQUOVR ,,v,RPL6CCST\nRPL6PECL EQUOVR ,,v,RPL6CCST\nRPL6ENDC EQUOVR ,,v,RPL6CCST\nRPL6PNDS EQUOVR ,,v,RPL6CCST\nRPL6PRVL EQUOVR ,,v,RPL6CCST\nRPL6FDRS EQUOVR ,,v,RPL6CCST\nRPL6FDSR EQUOVR ,,v,RPL6CCST\nRPL6FDSO EQUOVR ,,v,RPL6CCST\nRPL6FDRO EQUOVR ,,v,RPL6CCST\nRPL6FSRL EQUOVR ,,v,RPL6CCST\nRPL6FROL EQUOVR ,,v,RPL6CCST\nRPL6FRSL EQUOVR ,,v,RPL6CCST\nRPL6PALC EQUOVR ,,v,RPL6CCST\n.*\n.* RPL6DETP - DEACTIVATION TYPE CODE\nRPL6TCLP EQUOVR ,,v,RPL6DETP\nRPL6TPVL EQUOVR ,,v,RPL6DETP\n.*\n.* RPL6RTUN - RETURNED INDICATORS\nRPL6CNON EQUOVR ,,v,RPL6RTUN\nRPL6CSEL EQUOVR ,,v,RPL6RTUN\nRPL6CMAN EQUOVR ,,v,RPL6RTUN\n.*\n         MNOTE *,'Including ISTRPLEX mapping macro'\nIFGRPL   DSECT ,                       * Resume RPL DSECT\n         ORG   RPL+RPL_LEN             * At end of base RPL\n         ISTRPLEX ,                    *\n         EQUOVR *END                   *\n*\nIFGRPL   DSECT ,                       * Resume RPL DSECT\n         ORG   ,                       *\nVTAMRPL_LEN EQU *-RPL                  * Length of VTAM RPL\n*\nISTRPL6X DSECT ,                       * Resume LU 6.2 extension\nRPL6     EQU   ISTRPL6X                * Label for usings\n         ORG   ,                       *\nRPL6_LEN EQU   *-RPL6                  * Length of RPL eXtension\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPRQE   0100-20096-20096-0111-00146-00146-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the EXCP Request Queue Element\n.*\n&LABEL   MAPRQE &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPRQE                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPRQE         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'RQE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPRQE).MEND\n&BXA_MAC_MAPRQE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_RQE\n&BXA_CB_RQE SETC 'RQE'\n.*\n.* RQEPRT - Protect key from SVC old PSW\nRQEPKEY  EQUOVR ,,b,RQEPRT\nRQEPRT4R EQUOVR ,,b,RQEPRT\nRQEPRT5R EQUOVR ,,b,RQEPRT\nRQEK0BYP EQUOVR ,,b,RQEPRT\nRQEPRT7R EQUOVR ,,b,RQEPRT\n.*\n.* RQETYPE - Request type flags\nRQE114   EQUOVR ,,b,RQETYPE\nRQEVIRT  EQUOVR ,,b,RQETYPE\nRQE1TO1  EQUOVR ,,b,RQETYPE\nRQEVAM   EQUOVR ,,b,RQETYPE\nRQEEOEE  EQUOVR ,,b,RQETYPE\nRQEDIE   EQUOVR ,,b,RQETYPE\nRQERRTYP EQUOVR ,,b,RQETYPE\nRQETYP3  EQUOVR ,,b,RQETYPE\nRQETYP2  EQUOVR ,,b,RQETYPE\nRQETYP1  EQUOVR ,,b,RQETYPE\n.*\n.* RQEFLAG - RQE flag byte\nRQERETRY EQUOVR ,,b,RQEFLAG\nRQENOPST EQUOVR ,,b,RQEFLAG\nRQENOFRE EQUOVR ,,b,RQEFLAG\nRQEFIXST EQUOVR ,,b,RQEFLAG\nRQESTBL  EQUOVR ,,b,RQEFLAG\nRQESRBS  EQUOVR ,,b,RQEFLAG\nRQEPURGE EQUOVR ,,b,RQEFLAG\nRQECHEAC EQUOVR ,,b,RQEFLAG\n.*\n.* RQEFLAG3 - RQEFLAG3 flag byte\nRQEINIOS EQUOVR ,,b,RQEFLAG3\nRQEPCEDE EQUOVR ,,b,RQEFLAG3\nRQEXDERP EQUOVR ,,b,RQEFLAG3\nRQESMFCT EQUOVR ,,b,RQEFLAG3\nRQEACDCT EQUOVR ,,b,RQEFLAG3\nRQEPSDCT EQUOVR ,,b,RQEFLAG3\nRQEFLG6R EQUOVR ,,b,RQEFLAG3\nRQEXCPS  EQUOVR ,,b,RQEFLAG3\n.*\n         MNOTE *,'Including IECDRQE mapping macro'\n.*\n         IECDRQE ,                     *\n         EQUOVR *END\n*\nRQE      DSECT ,                       * Reset to RQE\n         ORG\nRQE_LEN  EQU   *-RQE                   * Length of RQE\n*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPRT1W  0100-20096-20096-0111-00219-00219-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the RTM1 Work Area\n.*\n&LABEL   MAPRT1W &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPRT1W                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPRT1W        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'RTMW').EMBED\n         AIF   ('&CB' EQ 'RT1TRACK').EMBED\n         AIF   ('&CB' EQ 'RT1TRECC').EMBED\n         AIF   ('&CB' EQ 'RT1W').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPRT1W).MEND\n&BXA_MAC_MAPRT1W SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_RTMW\n         GBLC  &BXA_CB_RT1TRACK\n         GBLC  &BXA_CB_RT1TRECC\n         GBLC  &BXA_CB_RT1W\n&BXA_CB_RTMW SETC 'RT1W'\n&BXA_CB_RT1TRACK SETC 'RT1W'\n&BXA_CB_RT1TRECC SETC 'RT1W'\n&BXA_CB_RT1W SETC 'RT1W'\n.*\n.* RT1WCOVR - PRESERVED CARRY OVER INFORMATION ON VALID RECURSIONS\nRT1WRCDR EQUOVR ,,b,RT1WCOVR\nRT1WRTM  EQUOVR ,,b,RT1WCOVR\nRT1WFAIL EQUOVR ,,b,RT1WCOVR\nRT1WRMGR EQUOVR ,,b,RT1WCOVR\nRT1WEREX EQUOVR ,,b,RT1WCOVR\nRT1WGFAI EQUOVR ,,b,RT1WCOVR\nRT1WRCRD EQUOVR ,,b,RT1WCOVR\n.*\n.* RT1WCOV2 - PRESERVED CARRY OVER INFORMATION ON VALID RECURSIONS\nRT1NODMP EQUOVR ,,b,RT1WCOV2\nRT1WNOSP EQUOVR ,,b,RT1WCOV2\nRT1WNOSV EQUOVR ,,b,RT1WCOV2\nRT1WNOSA EQUOVR ,,b,RT1WCOV2\nRT1WNOSM EQUOVR ,,b,RT1WCOV2\nRT1WNOSU EQUOVR ,,b,RT1WCOV2\n.*\n.* RT1WCOV3 - FLAGS\nRT1WSKIP EQUOVR ,,b,RT1WCOV3\nRT1WSLST EQUOVR ,,b,RT1WCOV3\nRT1WCPOB EQUOVR ,,b,RT1WCOV3\n.*\n.* RT1WCOV4 - FLAGS\nRT1WRSTW EQUOVR ,,b,RT1WCOV4\nRT1WNCNL EQUOVR ,,b,RT1WCOV4\nRT1WCLUP EQUOVR ,,b,RT1WCOV4\n.*\n.* RT1WCMPF - FLAG BITS IN COMPLETION CODE.\nRT1WREQ  EQUOVR ,,b,RT1WCMPF\nRT1WSTEP EQUOVR ,,b,RT1WCMPF\nRT1WRCF  EQUOVR ,,b,RT1WCMPF\n.*\n.* RT1TACQR - RESOURCES ACQUIRED BY RTM1\nRT1TDISP EQUOVR ,,b,RT1TACQR\nRT1TLLCK EQUOVR ,,b,RT1TACQR\nRT1TRETY EQUOVR ,,b,RT1TACQR\nRT1TCINV EQUOVR ,,b,RT1TACQR\nRT1TSERP EQUOVR ,,b,RT1TACQR\nRT1TTRTS EQUOVR ,,b,RT1TACQR\nRT1TNSS  EQUOVR ,,b,RT1TACQR\nRT1TBINV EQUOVR ,,b,RT1TACQR\n.*\n.* LOGICAL PHASE NUMBERS USED WITH THE RT1TLPN FIELD.\nVALIDREC EQUOVR ,,v,RT1TLPN\nFRRRECUR EQUOVR ,,v,RT1TLPN\nRMGRCML  EQUOVR ,,v,RT1TLPN\nRCRDREC  EQUOVR ,,v,RT1TLPN\nRT1MGRLO EQUOVR ,,v,RT1TLPN\nMGRINIT  EQUOVR ,,v,RT1TLPN\nPOSTRTS  EQUOVR ,,v,RT1TLPN\nNORTS    EQUOVR ,,v,RT1TLPN\nCPURSTRT EQUOVR ,,v,RT1TLPN\nNORSTRT  EQUOVR ,,v,RT1TLPN\nRT1MGRHI EQUOVR ,,v,RT1TLPN\nRT1MCHLO EQUOVR ,,v,RT1TLPN\nRTHEEDS  EQUOVR ,,v,RT1TLPN\nRTHTIMER EQUOVR ,,v,RT1TLPN\nRTHSTRG1 EQUOVR ,,v,RT1TLPN\nRTHPARMS EQUOVR ,,v,RT1TLPN\nRTHSTRG2 EQUOVR ,,v,RT1TLPN\nRTHRECRD EQUOVR ,,v,RT1TLPN\nRTHSOFTW EQUOVR ,,v,RT1TLPN\nRTHEXIT  EQUOVR ,,v,RT1TLPN\nRT1MCHHI EQUOVR ,,v,RT1TLPN\nRT1SRMLO EQUOVR ,,v,RT1TLPN\nRT1SRMHI EQUOVR ,,v,RT1TLPN\nRT1RESLO EQUOVR ,,v,RT1TLPN\nRESRTYLO EQUOVR ,,v,RT1TLPN\nSRBEED   EQUOVR ,,v,RT1TLPN\nXMEEDS   EQUOVR ,,v,RT1TLPN\nRT2EEDS  EQUOVR ,,v,RT1TLPN\nRT1EEDS  EQUOVR ,,v,RT1TLPN\nRETRYRS1 EQUOVR ,,v,RT1TLPN\nRESRTYHI EQUOVR ,,v,RT1TLPN\nRESCHED  EQUOVR ,,v,RT1TLPN\nFREESRB  EQUOVR ,,v,RT1TLPN\nSRBCOMP  EQUOVR ,,v,RT1TLPN\nRESRTM2  EQUOVR ,,v,RT1TLPN\nTCBTERM  EQUOVR ,,v,RT1TLPN\nRESRTM1  EQUOVR ,,v,RT1TLPN\nMEMTERM  EQUOVR ,,v,RT1TLPN\nMEMTCOMP EQUOVR ,,v,RT1TLPN\nRT1RESHI EQUOVR ,,v,RT1TLPN\nRT1EXTLO EQUOVR ,,v,RT1TLPN\nEEDFREE  EQUOVR ,,v,RT1TLPN\nFREERTCA EQUOVR ,,v,RT1TLPN\nEEDFREE2 EQUOVR ,,v,RT1TLPN\nEEDFREE3 EQUOVR ,,v,RT1TLPN\nEEDFREE4 EQUOVR ,,v,RT1TLPN\nMEMSLIP  EQUOVR ,,v,RT1TLPN\nRT1EXTHI EQUOVR ,,v,RT1TLPN\n.*\n         MNOTE *,'Including IHART1W mapping macro'\n         IHART1W ,                     *\n         EQUOVR *END\n*\nRT1W     DSECT ,                       * Restart RT1W DSECT\n         ORG   ,                       *\nRT1W_LEN EQU   *-RT1W                  * Length of RT1W\n*\nRT1TRECC DSECT ,                       * Restart recursion control data\n         ORG   ,                       *                          area\nRT1TRECC_LEN EQU *-RT1TRECC            * Length of RT1TRECC\n*\nRT1TRACK DSECT ,                       * Restart Tracking area\n         ORG   ,                       *\nRT1TRACK_LEN EQU *-RT1TRACK            * Length of RT1TRACK\n*\nRTMW     DSECT ,                       * Restart RTM save/work area\n         ORG   ,                       *\nRTMW_LEN EQU   *-RTMW                  * Length of RTMW\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSAVE  0100-20096-20096-0111-00163-00163-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro for standard MVS save-areas\n.*           and for Bixoft internal/external save-areas\n.*\n&LABEL   MAPSAVE &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSAVE                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSAVE        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'BXASAVE').EMBED\n         AIF   ('&CB' EQ 'SAVEAREA').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSAVE).MEND\n&BXA_MAC_MAPSAVE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_BXASAVE\n         GBLC  &BXA_CB_SAVEAREA\n&BXA_CB_BXASAVE  SETC 'SAVE'\n&BXA_CB_SAVEAREA SETC 'SAVE'\n.*\n         MNOTE *,'Generating BXASAVE Dsect'\n*\n* DSECT for save areas\n*\n* Issue USING SAVEAREA,R13\n*\n* In ESTAE-type subroutines, 2 internal SA's are used to copy the\n* contents of the external SA, and the save info from entry into the\n* ESTAE-type subroutine. The external SA is thus available again for\n* any invoked functions that require R13 to point to a save area.\n*\nBXASAVE  DSECT ,                       *\nSAVEPRFX DS    0XL16                   * Bixoft prefix for save-areas\nSAVEID   DS    CL8                     * Only used by Bixoft, valid\n*                                      *   only for external SA's and\n*                                      *   on 1st SA of an SA-subchain\nSAVEPTPT DS    A                       * Ptr to ptr to this area\nSAVEPTSA DS    A                       * Ptr to SA used on entry\nSAVEPRFX_LEN EQU *-SAVEPRFX            * Length of prefix\n*\nSAVEAREA DS    0XL72                   * Standard save-area\nSAVEPTRS DS    0XL12                   * Define first 3 words at once\nSAVEHDR  DS    F                       * External SA: reserved for PL1 *\n                                       *     for SRB: saved ret.addr.  *\n                                       * Internal SA: address of BEGSR\nSAVEPREV DS    F                       * Backward pointer\nSAVEF1SA EQU   SAVEPREV,,C'C'          * Character value F1SA in first *\n                                       *   savearea on chain\nSAVENEXT DS    F                       * Forward pointer\nSAVEDR13 EQU   SAVEPREV                * Saved value of reg 13\nSAVEDR14 DS    F                       * Saved value of reg 14\nSAVEDR15 DS    F                       * Saved value of reg 15\nSAVEDR0  DS    F                       * Saved value of reg 0\nSAVEDR1  DS    F                       * Saved value of reg 1\nSAVEDR2  DS    F                       * Saved value of reg 2\nSAVEDR3  DS    F                       * Saved value of reg 3\nSAVEDR4  DS    F                       * Saved value of reg 4\nSAVEDR5  DS    F                       * Saved value of reg 5\nSAVEDR6  DS    F                       * Saved value of reg 6\nSAVEDR7  DS    F                       * Saved value of reg 7\nSAVEDR8  DS    F                       * Saved value of reg 8\nSAVEDR9  DS    F                       * Saved value of reg 9\nSAVEDR10 DS    F                       * Saved value of reg 10\nSAVEDR11 DS    F                       * Saved value of reg 11\nSAVEDR12 DS    F                       * Saved value of reg 12\n*\nSAVEAREA_END EQU *                     * End of standard MVS save-area\nSAVEAREA_LEN EQU *-SAVEAREA            * Length of standard save-area\n*\n* Following fields are used only by Bixoft. These are defined only for\n*    external save-areas, and serve to tie the chain of internal SA's\n*    to the external SA.\n*\nSAVEINT  DS    0XL8                    * Defines both pointers at once\nSAVEINTF DS    A                       * Pointer to first internal SA\nSAVEINTU DS    A                       * Pointer to last-used int. SA\n*\n         ORG   ,                       *\n         DS    0D                      * Align for internal Save areas\nBXASAVE_LEN EQU *-BXASAVE              * Length of complete DSECT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSCCB  0100-20096-20096-0111-00181-00181-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Service Call Control Block\n.*\n.* --> The SCCB can be found through the CVTSCPIN pointer\n.*\n&LABEL   MAPSCCB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSCCB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSCCB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SCCB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSCCB).MEND\n&BXA_MAC_MAPSCCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SCCB\n&BXA_CB_SCCB SETC 'SCCB'\n.*\n.* SCCBIFM1 - INSTALLED FACILITY MAP BYTE 1.\nSCCBCHPI EQUOVR ,,b,SCCBIFM1\nSCCBCHPS EQUOVR ,,b,SCCBIFM1\nSCCBCHPR EQUOVR ,,b,SCCBIFM1\nSCCBCPUI EQUOVR ,,b,SCCBIFM1\nSCCBCPUR EQUOVR ,,b,SCCBIFM1\n.*\n.* SCCBIFM2 - INSTALLED FACILITY MAP BYTE 2.\nSCCBSGNL EQUOVR ,,b,SCCBIFM2\nSCCBOMR  EQUOVR ,,b,SCCBIFM2\nSCCBSTST EQUOVR ,,b,SCCBIFM2\nSCCBRSTR EQUOVR ,,b,SCCBIFM2\nSCCBITRC EQUOVR ,,b,SCCBIFM2\nSCCBLPRM EQUOVR ,,b,SCCBIFM2\nSCCBWDAT EQUOVR ,,b,SCCBIFM2\n.*\n.* SCCBIFM3 - INSTALLED FACILITY MAP BYTE 3.\nSCCBSIR  EQUOVR ,,b,SCCBIFM3\nSCCBSEI  EQUOVR ,,b,SCCBIFM3\nSCCBSER  EQUOVR ,,b,SCCBIFM3\nSCCBCARS EQUOVR ,,b,SCCBIFM3\nSCCBESUM EQUOVR ,,b,SCCBIFM3\nSCCBESEI EQUOVR ,,b,SCCBIFM3\nSCCBESER EQUOVR ,,b,SCCBIFM3\nSCCBCARL EQUOVR ,,b,SCCBIFM3\n.*\n.* SCCBIFM4 - INSTALLED FACILITY MAP BYTE 4\nSCCBVFR  EQUOVR ,,b,SCCBIFM4\nSCCBEVNT EQUOVR ,,b,SCCBIFM4\nSCCBRRGI EQUOVR ,,b,SCCBIFM4\n.*\n.* SCCBCON1 - BITS 0-7 OF CONFIGURATION\nSCCBBFY  EQUOVR ,,b,SCCBCON1\nSCCBSOPF EQUOVR ,,b,SCCBCON1\nSCCBIRIN EQUOVR ,,b,SCCBCON1\nSCCBCSCF EQUOVR ,,b,SCCBCON1\n.*\n.* SCCBCON2 - BITS 8-15 OF CONFIGURATION\nSCCBCSLO EQUOVR ,,b,SCCBCON2\n.*\n.* SCCBCON3 - BITS 16-23 OF CONFIGURATION\nSCCBDAOM EQUOVR ,,b,SCCBCON3\nSCCBCKSM EQUOVR ,,b,SCCBCON3\n.*\n.* SCCBCON4 - BITS 24-31 OF CONFIGURATION\nSCCBPLO  EQUOVR ,,b,SCCBCON4\nSCCBBFP  EQUOVR ,,b,SCCBCON4\n.*\n.* SCCBCPFL - CPU CHARACTERISTIC FLAGS BYTE 1.\nSCCBVFIN EQUOVR ,,b,SCCBCPFL\nSCCBVFCN EQUOVR ,,b,SCCBCPFL\nSCCBVFSB EQUOVR ,,b,SCCBCPFL\nSCCBCRIN EQUOVR ,,b,SCCBCPFL\n.*\n.* SCCBCPF2 - CPU CHARACTERISTIC FLAGS BYTE 2.\nSCCBMPSB EQUOVR ,,b,SCCBCPF2\nSCCBPER2 EQUOVR ,,b,SCCBCPF2\n.*\n.* Unnamed field at SCCBCPF2+10\nSCCBKSID EQUOVR ,,b,SCCBCPF2+10\n.*\n         MNOTE *,'Including IHASCCB mapping macro'\n         IHASCCB ,                     * Generate SCCB\n         EQUOVR *END\n*\nSCCB     DSECT ,                       * Reset to SCCB DSECT\n         ORG\nSCCB_LEN EQU   *-SCCB                  * Length of SCCB\n*\nSCCBCP   DSECT ,                       * Reset to SCCBCP DSECT\n         ORG\nSCCBCP_LEN EQU *-SCCBCP                * Length of SCCBCP\n*\nSCCBHSA  DSECT ,                       * Reset to SCCBHSA DSECT\n         ORG\nSCCBHSA_LEN EQU *-SCCBHSA              * Length of SCCBHSA\n*\nSCCBMPF  DSECT ,                       * Reset to SCCBMPF DSECT\n         ORG\nSCCBMPF_LEN EQU *-SCCBMPF              * Length of SCCBMPF\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSCT   0100-20096-20096-0111-00166-00166-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Step Control Table\n.*\n&LABEL   MAPSCT &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSCT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSCT         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SCT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSCT).MEND\n&BXA_MAC_MAPSCT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SCT\n&BXA_CB_SCT SETC 'SCT'\n.*\n.* SCTTBLID - TABLE ID OF SCT=2\nSCTTBLID DSOVR XL1\nSCTID    EQUOVR ,,v,SCTTBLID\n.*\n.* SCTSSTAT - INTERNAL STEP STATUS\nEAADDRBT EQUOVR ,,b,SCTSSTAT\nEACAUSER EQUOVR ,,b,SCTSSTAT\nSCTNORST EQUOVR ,,b,SCTSSTAT\nSCTNOCKP EQUOVR ,,b,SCTSSTAT\nSCTDORST EQUOVR ,,b,SCTSSTAT\nSCTKEY0  EQUOVR ,,b,SCTSSTAT\nSCTGRPH  EQUOVR ,,b,SCTSSTAT\nINCMSSTS EQUOVR ,,b,SCTSSTAT\n.*\n.* SCTFSIOT - SVA of first SIOT\nSCTFSIOT DSOVR XL4                     SVA of first SIOT. SVA is\n.* SCTLSIOT - SVA of last SIOT for step\nSCTLSIOT DSOVR XL4                     SVA of last SIOT for step. SVA\n.*\n.* SCTSSYSC - Step SYStem Code.\nSCTUSYSC EQUOVR ,,b,SCTSSYSC\n.*\n.* SCTSTYPE - STEP TYPE\nSCTGOSTP EQUOVR ,,b,SCTSTYPE\nSCTINPUT EQUOVR ,,b,SCTSTYPE\nSCTOUTMC EQUOVR ,,b,SCTSTYPE\nSCTSJFHK EQUOVR ,,b,SCTSTYPE\nSCTINITB EQUOVR ,,b,SCTSTYPE\nSCTJSCAT EQUOVR ,,b,SCTSTYPE\n.*\n.* SCTSDP - STEP DISPATCHING PRIORITY\nSCTEPRFM EQUOVR ,,b,SCTSDP\nSCTPRFM2 EQUOVR ,,b,SCTSDP\nSCTFSTEP EQUOVR ,,b,SCTSDP\n.*\n.* SCTSTAT2 - EXTENSION OF STEP STATUS INDICATORS\nSCTMCVOL EQUOVR ,,b,SCTSTAT2\nSCTSTPLB EQUOVR ,,b,SCTSTAT2\nSCTSPSYS EQUOVR ,,b,SCTSTAT2\nSCTJBEND EQUOVR ,,b,SCTSTAT2\nSCTRSTST EQUOVR ,,b,SCTSTAT2\n.*\n.* SCTABCND - 8TH CONDITION CODE SLOT\nSCTABCAN EQUOVR ,,b,SCTABCND\nSCTONLYC EQUOVR ,,b,SCTABCND\nSCTABEND EQUOVR ,,b,SCTABCND\nSCTEVEN  EQUOVR ,,b,SCTABCND\nSCTONLY  EQUOVR ,,b,SCTABCND\n.*\n.* SCTSTEND -\nSCTSTSRT EQUOVR ,,b,SCTSTEND\nSCTSTPND EQUOVR ,,b,SCTSTEND\nSCTSYSCK EQUOVR ,,b,SCTSTEND\nSCTSTNRN EQUOVR ,,b,SCTSTEND\nSCTNDSI  EQUOVR ,,b,SCTSTEND\nSCTTEXEC EQUOVR ,,b,SCTSTEND\n.*\n.* IEFASCTB does not generate a DSECT-statement\n         MNOTE *,'Including IEFASCTB mapping macro'\nSCT      DSECT ,                       * Start of SCT  DSECT\n         IEFASCTB ,\n         DSOVR *END\n         EQUOVR *END\n*\nSCT      DSECT ,                       * Resume SCT DSECT\n         ORG\nSCT_LEN  EQU   *-SCT                   * Length of SCT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSCTX  0100-20096-20096-0111-00106-00106-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Step Control Table eXtension\n.*\n&LABEL   MAPSCTX &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSCTX                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSCTX        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SCTX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSCTX).MEND\n&BXA_MAC_MAPSCTX SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SCTX\n&BXA_CB_SCTX SETC 'SCTX'\n.*\n         MNOTE *,'Including IEFSCTX mapping macro'\n         IEFSCTX ,\n*\nSCTXIN   DSECT ,                       * Resume SCTX DSECT\nSCTX     EQU   SCTXIN                  * Label for USINGs\n         ORG\nSCTX_LEN EQU   *-SCTX                  * Length of SCTX\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSCVT  0100-20096-20096-0111-00106-00106-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Secondary Communication Vector Table\n.*\n&LABEL   MAPSCVT &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSCVT                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSCVT        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SCVT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSCVT).MEND\n&BXA_MAC_MAPSCVT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SCVT\n&BXA_CB_SCVT SETC 'SCVT'\n.*\n         MNOTE *,'Including IHASCVT mapping macro'\n         IHASCVT LIST=YES              * Use unchanged PRINT option\n*\nSCVTSECT DSECT ,\nSCVT     EQU   SCVTSECT                * Label for USINGs\n         ORG\nSCVT_LEN EQU   *-SCVT                  * Length of SCVT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSDWA  0100-20096-20096-0111-00501-00501-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the System Diagnostic Work Area\n.*\n&LABEL   MAPSDWA &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSDWA                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSDWA        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SDWA').EMBED\n         AIF   ('&CB' EQ 'SDWANRC1').EMBED\n         AIF   ('&CB' EQ 'SDWANRC2').EMBED\n         AIF   ('&CB' EQ 'SDWANRC3').EMBED\n         AIF   ('&CB' EQ 'SDWAPTRS').EMBED\n         AIF   ('&CB' EQ 'SDWARC1').EMBED\n         AIF   ('&CB' EQ 'SDWARC2').EMBED\n         AIF   ('&CB' EQ 'SDWARC3').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSDWA).MEND\n&BXA_MAC_MAPSDWA SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SDWA\n         GBLC  &BXA_CB_SDWANRC1\n         GBLC  &BXA_CB_SDWANRC2\n         GBLC  &BXA_CB_SDWANRC3\n         GBLC  &BXA_CB_SDWAPTRS\n         GBLC  &BXA_CB_SDWARC1\n         GBLC  &BXA_CB_SDWARC2\n         GBLC  &BXA_CB_SDWARC3\n&BXA_CB_SDWA SETC 'SDWA'\n&BXA_CB_SDWANRC1 SETC 'SDWA'\n&BXA_CB_SDWANRC2 SETC 'SDWA'\n&BXA_CB_SDWANRC3 SETC 'SDWA'\n&BXA_CB_SDWAPTRS SETC 'SDWA'\n&BXA_CB_SDWARC1 SETC 'SDWA'\n&BXA_CB_SDWARC2 SETC 'SDWA'\n&BXA_CB_SDWARC3 SETC 'SDWA'\n.*\n.* SDWACMPF - FLAG BITS IN COMPLETION CODE.\nSDWAREQ  EQUOVR ,,b,SDWACMPF\nSDWASTEP EQUOVR ,,b,SDWACMPF\nSDWASTCC EQUOVR ,,b,SDWACMPF\nSDWARCF  EQUOVR ,,b,SDWACMPF\n.*\n.* SDWACMKA - CHANNEL INTERRUPT MASKS.\nSDWAIOA  EQUOVR ,,b,SDWACMKA\nSDWAEXTA EQUOVR ,,b,SDWACMKA\n.*\n.* SDWAMWPA - PSW KEY AND 'M-W-P'.\nSDWAKEYA EQUOVR ,,b,SDWAMWPA\nSDWAMCKA EQUOVR ,,b,SDWAMWPA\nSDWAWATA EQUOVR ,,b,SDWAMWPA\nSDWASPVA EQUOVR ,,b,SDWAMWPA\n.*\n.* SDWAPMKA - INSTRUCTION LENGTH CODE, CONDITION CODE\nSDWAILA  EQUOVR ,,b,SDWAPMKA\nSDWACCA  EQUOVR ,,b,SDWAPMKA\nSDWAFPA  EQUOVR ,,b,SDWAPMKA\nSDWADOA  EQUOVR ,,b,SDWAPMKA\nSDWAEUA  EQUOVR ,,b,SDWAPMKA\nSDWASGA  EQUOVR ,,b,SDWAPMKA\n.*\n.* SDWACMKP - CHANNEL INTERRUPT MASKS.\nSDWAIOP  EQUOVR ,,b,SDWACMKP\nSDWAEXTP EQUOVR ,,b,SDWACMKP\n.*\n.* SDWAMWPP - PSW KEY AND 'M-W-P'.\nSDWAKEYP EQUOVR ,,b,SDWAMWPP\nSDWAMCKP EQUOVR ,,b,SDWAMWPP\nSDWAWATP EQUOVR ,,b,SDWAMWPP\nSDWASPVP EQUOVR ,,b,SDWAMWPP\n.*\n.* SDWAPMKP - INSTRUCTION LENGTH CODE, CONDITION CODE\nSDWAILP  EQUOVR ,,b,SDWAPMKP\nSDWACCP  EQUOVR ,,b,SDWAPMKP\nSDWAFPP  EQUOVR ,,b,SDWAPMKP\nSDWADOP  EQUOVR ,,b,SDWAPMKP\nSDWAEUP  EQUOVR ,,b,SDWAPMKP\nSDWASGP  EQUOVR ,,b,SDWAPMKP\n.*\n.* SDWAEMK1 - INTERRUPT INFORMATION MASKS\nSDWAPER1 EQUOVR ,,b,SDWAEMK1\nSDWATRM1 EQUOVR ,,b,SDWAEMK1\nSDWAIO1  EQUOVR ,,b,SDWAEMK1\nSDWAEXT1 EQUOVR ,,b,SDWAEMK1\n.*\n.* SDWAMWP1 - PSW KEY AND 'M-W-P'\nSDWAKEY1 EQUOVR ,,b,SDWAMWP1\nSDWAECT1 EQUOVR ,,b,SDWAMWP1\nSDWAMCK1 EQUOVR ,,b,SDWAMWP1\nSDWAWAT1 EQUOVR ,,b,SDWAMWP1\nSDWAPGM1 EQUOVR ,,b,SDWAMWP1\n.*\n.* SDWAINT1 - CONDITION CODE AND PROGRAM MASK\nSDWAASCM EQUOVR ,,b,SDWAINT1\nSDWAS1   EQUOVR ,,b,SDWAINT1\nSDWACC1  EQUOVR ,,b,SDWAINT1\nSDWAFPO1 EQUOVR ,,b,SDWAINT1\nSDWADEC1 EQUOVR ,,b,SDWAINT1\nSDWAEXP1 EQUOVR ,,b,SDWAINT1\nSDWASGN1 EQUOVR ,,b,SDWAINT1\n.*\n.* SDWAAMF1 - ADDRESSING MODE FLAG\nSDWAMOD1 EQUOVR ,,b,SDWAAMF1\n.*\n.* SDWAILC1 - INSTRUCTION LENGTH CODE FOR PSW DEFINED\nSDWAIL1  EQUOVR ,,b,SDWAILC1\n.*\n.* SDWAICD1 - 8 BIT INTERRUPT CODE\nSDWAIPR1 EQUOVR ,,b,SDWAICD1\nSDWAIMC1 EQUOVR ,,b,SDWAICD1\nSDWAIPC1 EQUOVR ,,b,SDWAICD1\n.*\n.* SDWAEMK2 - INTERRUPT INFORMATION MASKS\nSDWAPER2 EQUOVR ,,b,SDWAEMK2\nSDWATRM2 EQUOVR ,,b,SDWAEMK2\nSDWAIO2  EQUOVR ,,b,SDWAEMK2\nSDWAEXT2 EQUOVR ,,b,SDWAEMK2\n.*\n.* SDWAMWP2 - PSW KEY AND 'M-W-P'\nSDWAKEY2 EQUOVR ,,b,SDWAMWP2\nSDWAECT2 EQUOVR ,,b,SDWAMWP2\nSDWAMCK2 EQUOVR ,,b,SDWAMWP2\nSDWAWAT2 EQUOVR ,,b,SDWAMWP2\nSDWAPGM2 EQUOVR ,,b,SDWAMWP2\n.*\n.* SDWAINT2 - CONDITION CODE AND PROGRAM MASK\nSDWAS2   EQUOVR ,,b,SDWAINT2\nSDWACC2  EQUOVR ,,b,SDWAINT2\nSDWAFPO2 EQUOVR ,,b,SDWAINT2\nSDWADEC2 EQUOVR ,,b,SDWAINT2\nSDWAEXP2 EQUOVR ,,b,SDWAINT2\nSDWASGN2 EQUOVR ,,b,SDWAINT2\n.*\n.* SDWAAMF2 - ADDRESSING MODE FLAG\nSDWAMOD2 EQUOVR ,,b,SDWAAMF2\n.*\n.* SDWAILC2 - INSTRUCTION LENGTH CODE FOR PSW DEFINED\nSDWAIL2  EQUOVR ,,b,SDWAILC2\n.*\n.* SDWAICD2 - 8 BIT INTERRUPT CODE\nSDWAIPR2 EQUOVR ,,b,SDWAICD2\nSDWAIMC2 EQUOVR ,,b,SDWAICD2\nSDWAIPC2 EQUOVR ,,b,SDWAICD2\n.*\n.* SDWAMCHS - MCH FLAG BYTE\nSDWASRVL EQUOVR ,,b,SDWAMCHS\nSDWARCDF EQUOVR ,,b,SDWAMCHS\nSDWATSVL EQUOVR ,,b,SDWAMCHS\nSDWAINVP EQUOVR ,,b,SDWAMCHS\nSDWARSRC EQUOVR ,,b,SDWAMCHS\nSDWARSRF EQUOVR ,,b,SDWAMCHS\nSDWAVRIV EQUOVR ,,b,SDWAMCHS\nSDWAARGU EQUOVR ,,b,SDWAMCHS\n.*\n.* SDWAMCHD - INPUT INFORMATION TO RECOVERY ROUTINE\nSDWASKYF EQUOVR ,,b,SDWAMCHD\nSDWAREGU EQUOVR ,,b,SDWAMCHD\nSDWAPSWU EQUOVR ,,b,SDWAMCHD\nSDWASCK  EQUOVR ,,b,SDWAMCHD\nSDWAACR  EQUOVR ,,b,SDWAMCHD\nSDWAINSF EQUOVR ,,b,SDWAMCHD\nSDWAFPRX EQUOVR ,,b,SDWAMCHD\nSDWATERR EQUOVR ,,b,SDWAMCHD\n.*\n.* SDWARSR1 - ADDITIONAL STORAGE FRAME ERROR INDICATORS\nSDWAPREF EQUOVR ,,b,SDWARSR1\nSDWAVRCN EQUOVR ,,b,SDWARSR1\nSDWANSWP EQUOVR ,,b,SDWARSR1\nSDWANSWA EQUOVR ,,b,SDWARSR1\nSDWAMSER EQUOVR ,,b,SDWARSR1\nSDWACHNG EQUOVR ,,b,SDWARSR1\n.*\n.* SDWARSR2 - ADDITIONAL STORAGE ERROR INDICATORS.\nSDWAOFLN EQUOVR ,,b,SDWARSR2\nSDWAINTC EQUOVR ,,b,SDWARSR2\nSDWASPER EQUOVR ,,b,SDWARSR2\nSDWANUCL EQUOVR ,,b,SDWARSR2\nSDWAFSQA EQUOVR ,,b,SDWARSR2\nSDWAFLSQ EQUOVR ,,b,SDWARSR2\nSDWAPGFX EQUOVR ,,b,SDWARSR2\nSDWAVEQR EQUOVR ,,b,SDWARSR2\n.*\n.* SDWAMCHO - OTHER MACHINE CHECK FLAGS\nSDWASKPR EQUOVR ,,b,SDWAMCHO\n.*\n.* SDWAERRA - ERROR TYPE CAUSING ENTRY TO RECOVERY EXIT\nSDWAMCHK EQUOVR ,,b,SDWAERRA\nSDWAPCHK EQUOVR ,,b,SDWAERRA\nSDWARKEY EQUOVR ,,b,SDWAERRA\nSDWASVCD EQUOVR ,,b,SDWAERRA\nSDWAABTM EQUOVR ,,b,SDWAERRA\nSDWASVCE EQUOVR ,,b,SDWAERRA\nSDWATEXC EQUOVR ,,b,SDWAERRA\nSDWAPGIO EQUOVR ,,b,SDWAERRA\nSDWASTRM EQUOVR ,,b,SDWAERRA\n.*\n.* SDWAERRB - ADDITIONAL ERROR ENTRY INFORMATION\nSDWAPDIP EQUOVR ,,b,SDWAERRB\nSDWATYP1 EQUOVR ,,b,SDWAERRB\nSDWAENRB EQUOVR ,,b,SDWAERRB\nSDWALDIS EQUOVR ,,b,SDWAERRB\nSDWASRBM EQUOVR ,,b,SDWAERRB\n.*\n.* SDWAERRC - ADDITIONAL ERROR ENTRY INFORMATION\nSDWASTAF EQUOVR ,,b,SDWAERRC\nSDWASTAI EQUOVR ,,b,SDWAERRC\nSDWAIRB  EQUOVR ,,b,SDWAERRC\nSDWAPERC EQUOVR ,,b,SDWAERRC\nSDWAEAS  EQUOVR ,,b,SDWAERRC\nSDWASKIP EQUOVR ,,b,SDWAERRC\nSDWALCL  EQUOVR ,,b,SDWAERRC\nSDWAGLBL EQUOVR ,,b,SDWAERRC\n.*\n.* SDWAERRD - ADDITIONAL ERROR ENTRY INFORMATION\nSDWACLUP EQUOVR ,,b,SDWAERRD\nSDWANRBE EQUOVR ,,b,SDWAERRD\nSDWASTAE EQUOVR ,,b,SDWAERRD\nSDWACTS  EQUOVR ,,b,SDWAERRD\nSDWAMABD EQUOVR ,,b,SDWAERRD\nSDWARPIV EQUOVR ,,b,SDWAERRD\nSDWAMCIV EQUOVR ,,b,SDWAERRD\nSDWAERFL EQUOVR ,,b,SDWAERRD\n.*\n.* SDWAIOFS - THIS IS THE CURRENT I/O STATUS\nSDWAIOQR EQUOVR ,,b,SDWAIOFS\nSDWAIOHT EQUOVR ,,b,SDWAIOFS\nSDWANOIO EQUOVR ,,b,SDWAIOFS\nSDWANIOP EQUOVR ,,b,SDWAIOFS\n.*\n.* SDWARTYF - ADDRESSING MODE INDICATOR BYTE\nSDWAAMOD EQUOVR ,,b,SDWARTYF\n.*\n.* SDWARCDE - RETURN CODE FROM RECOVERY ROUTINE\nSDWACWT  EQUOVR ,,v,SDWARCDE\nSDWARETY EQUOVR ,,v,SDWARCDE\nSDWAPSTI EQUOVR ,,v,SDWARCDE\n.*\n.* SDWAACF2 - FLAGS TO INDICATE ADDITIONAL PROCESSING\nSDWARCRD EQUOVR ,,b,SDWAACF2\nSDWARFXM EQUOVR ,,b,SDWAACF2\nSDWASPIN EQUOVR ,,b,SDWAACF2\nSDWARERR EQUOVR ,,b,SDWAACF2\nSDWAUPRG EQUOVR ,,b,SDWAACF2\nSDWAFREE EQUOVR ,,b,SDWAACF2\nSDWASERP EQUOVR ,,b,SDWAACF2\nSDWACML  EQUOVR ,,b,SDWAACF2\n.*\n.* SDWAACF3 - FLAGS INDICATING SOME GLOBAL LOCKS TO BE FREED.\nSDWAFRSX EQUOVR ,,b,SDWAACF3\nSDWAFRSA EQUOVR ,,b,SDWAACF3\nSDWAFVSP EQUOVR ,,b,SDWAACF3\nSDWADISP EQUOVR ,,b,SDWAACF3\nSDWAASMP EQUOVR ,,b,SDWAACF3\nSDWASALL EQUOVR ,,b,SDWAACF3\nSDWAIPRG EQUOVR ,,b,SDWAACF3\nSDWAFRSD EQUOVR ,,b,SDWAACF3\n.*\n.* SDWAACF4 - ADDITIONAL LOCKS TO BE FREED  FOR FRRS\nSDWAIUCB EQUOVR ,,b,SDWAACF4\nSDWATADB EQUOVR ,,b,SDWAACF4\nSDWAOPTM EQUOVR ,,b,SDWAACF4\nSDWACMS  EQUOVR ,,b,SDWAACF4\nSDWAFLLK EQUOVR ,,b,SDWAACF4\n.*\n.* SDWADPFS - DUMP FLAGS\nSDWADPT  EQUOVR ,,b,SDWADPFS\nSDWADLST EQUOVR ,,b,SDWADPFS\nSDWAENSN EQUOVR ,,b,SDWADPFS\nSDWASLST EQUOVR ,,b,SDWADPFS\n.*\n.* SDWADPF2 - DUMP FLAGS 2\nSDWADVS3 EQUOVR ,,b,SDWADPF2\nSDWAXLST EQUOVR ,,b,SDWADPF2\nSDWALVL2 EQUOVR ,,b,SDWADPF2\nSDWASUBL EQUOVR ,,b,SDWADPF2\n.*\n.* SDWASDA0 - SDATA OPTIONS FLAG ONE\nSDWANUC  EQUOVR ,,b,SDWASDA0\nSDWASQA  EQUOVR ,,b,SDWASDA0\nSDWALSQA EQUOVR ,,b,SDWASDA0\nSDWASWA  EQUOVR ,,b,SDWASDA0\nSDWAGTF  EQUOVR ,,b,SDWASDA0\nSDWACBS  EQUOVR ,,b,SDWASDA0\nSDWAQQS  EQUOVR ,,b,SDWASDA0\nSDWADM   EQUOVR ,,b,SDWASDA0\n.*\n.* SDWASDA1 - SDATA OPTIONS\nSDWAIO   EQUOVR ,,b,SDWASDA1\nSDWAERR  EQUOVR ,,b,SDWASDA1\nSDWASUM  EQUOVR ,,b,SDWASDA1\nSDWAALLN EQUOVR ,,b,SDWASDA1\n.*\n.* SDWAPDAT - PDATA OPTIONS\nSDWADSAS EQUOVR ,,b,SDWAPDAT\nSDWADSAH EQUOVR ,,b,SDWAPDAT\nSDWADREG EQUOVR ,,b,SDWAPDAT\nSDWATLPA EQUOVR ,,b,SDWAPDAT\nSDWATJPA EQUOVR ,,b,SDWAPDAT\nSDWADPSW EQUOVR ,,b,SDWAPDAT\nSDWAUSPL EQUOVR ,,b,SDWAPDAT\n.*\n.* SDWAVID - VERSION INDICATOR\nSDWAVS3  EQUOVR ,,v,SDWAVID\nSDWAVS4  EQUOVR ,,v,SDWAVID\nSDWAVS5  EQUOVR ,,v,SDWAVID\nSDWAVS6  EQUOVR ,,v,SDWAVID\nSDWAVS7  EQUOVR ,,v,SDWAVID\nSDWAVS8  EQUOVR ,,v,SDWAVID\nSDWAVSN  EQUOVR ,,v,SDWAVID\n.*\n.* SDWADPVA - BITS THAT DEFINE DATA IN VARIABLE AREA\nSDWAHEX  EQUOVR ,,b,SDWADPVA\nSDWAEBC  EQUOVR ,,b,SDWADPVA\nSDWAVRAM EQUOVR ,,b,SDWADPVA\n.*\n.* SDWACRC - THIS FIELD CONTAINS THE ABEND REASON CODE\nSDWACRC  DSOVR 0XL4\n.*\n.* SDWACCRC - FLAGS FOR COMPCODE AND REASON CODE\nSDWACCF  EQUOVR ,,b,SDWACCRC\nSDWAREAF EQUOVR ,,b,SDWACCRC\n.*\n.* SDWARETF - SDWA RETRY FLAGS\nSDWART15 EQUOVR ,,b,SDWARETF\nSDWAREMR EQUOVR ,,b,SDWARETF\nSDWAFRLK EQUOVR ,,b,SDWARETF\n.*\n.* SDWATYPE - TYPE OF RECOVERY ROUTINE THAT RTM GAVE CONTROL\nSDWANREC EQUOVR ,,v,SDWATYPE\nSDWATFRR EQUOVR ,,v,SDWATYPE\nSDWATEST EQUOVR ,,v,SDWATYPE\nSDWATARR EQUOVR ,,v,SDWATYPE\n.*\n.* SDWAOABF - FLAGS IN COMPLETION CODE REGISTER.\nSDWAOREQ EQUOVR ,,b,SDWAOABF\nSDWAOSTP EQUOVR ,,b,SDWAOABF\nSDWAOSTC EQUOVR ,,b,SDWAOABF\nSDWAORCF EQUOVR ,,b,SDWAOABF\n.*\n.* SDWAXFLG - EXTENDED FLAG AREA\nSDWAINTF EQUOVR ,,b,SDWAXFLG\nSDWATEAV EQUOVR ,,b,SDWAXFLG\nSDWATEIV EQUOVR ,,b,SDWAXFLG\nSDWAESTX EQUOVR ,,b,SDWAXFLG\n.*\n.* SDWASFLG - SUBSPACE FLAG AREA\nSDWASVLD EQUOVR ,,b,SDWASFLG\nSDWASSA  EQUOVR ,,b,SDWASFLG\nSDWASSRS EQUOVR ,,b,SDWASFLG\n.*\n.* SDWAFLK1 - FLAGS INDICATING WHAT LOCKS ARE TO BE FREED\nSDWAFCPU EQUOVR ,,b,SDWAFLK1\nSDWAFRSM EQUOVR ,,b,SDWAFLK1\nSDWAFTRC EQUOVR ,,b,SDWAFLK1\nSDWAIOCB EQUOVR ,,b,SDWAFLK1\n.*\n.* SDWAFLK2 - FLAGS INDICATING WHAT LOCKS ARE TO BE FREED\nSDWAFRSC EQUOVR ,,b,SDWAFLK2\nSDWAFRSG EQUOVR ,,b,SDWAFLK2\nSDWAFVSF EQUOVR ,,b,SDWAFLK2\nSDWAFASG EQUOVR ,,b,SDWAFLK2\nSDWAFRSS EQUOVR ,,b,SDWAFLK2\n.*\n.* SDWAFLE1 - FLAGS FOR LOCKS TO BE FREED IN FIRST BYTE OF EXTENSION\nSDWABLSD EQUOVR ,,b,SDWAFLE1\nSDWAXDS  EQUOVR ,,b,SDWAFLE1\nSDWAXRES EQUOVR ,,b,SDWAFLE1\nSDWAXQ   EQUOVR ,,b,SDWAFLE1\nSDWAESET EQUOVR ,,b,SDWAFLE1\nSDWAIXSC EQUOVR ,,b,SDWAFLE1\nSDWAIXSR EQUOVR ,,b,SDWAFLE1\nSDWAIXDS EQUOVR ,,b,SDWAFLE1\n.*\n.* SDWAFLE2 - FLAGS FOR LOCKS TO BE FREED IN SECOND BYTE OF EXTENSION\nSDWAIXSH EQUOVR ,,b,SDWAFLE2\nSDWAULUT EQUOVR ,,b,SDWAFLE2\nSDWAIXRE EQUOVR ,,b,SDWAFLE2\nSDWAWLMR EQUOVR ,,b,SDWAFLE2\nSDWAWLMQ EQUOVR ,,b,SDWAFLE2\nSDWACNTX EQUOVR ,,b,SDWAFLE2\nSDWARGSV EQUOVR ,,b,SDWAFLE2\n.*\n         MNOTE *,'Including IHASDWA mapping macro'\n         IHASDWA DSECT=YES,            * Include DSECT statement       *\n               VRAMAP=NO               * Omit VRAMAP\n         DSOVR *END                    *\n         EQUOVR *END                   *\n*\nSDWA     DSECT ,                       * Restart SDWA\n         ORG   ,                       *\nSDWA_LEN EQU   *-SDWA                  * Length of SDWA\n*\nSDWARC1  DSECT ,                       * Restart SDWARC1\n         ORG   ,                       *\nSDWARC1_LEN EQU *-SDWARC1              * Length of SDWARC1\nSDWARC2  DSECT ,                       * Restart SDWARC2\n         ORG   ,                       *\nSDWARC2_LEN EQU *-SDWARC2              * Length of SDWARC2\nSDWARC3  DSECT ,                       * Restart SDWARC3\n         ORG   ,                       *\nSDWARC3_LEN EQU *-SDWARC3              * Length of SDWARC3\n*\nSDWAPTRS DSECT ,                       * Restart SDWAPTRS\n         ORG   ,                       *\nSDWAPTRS_LEN EQU *-SDWAPTRS            * Length of SDWAPTRS\n*\nSDWANRC1 DSECT ,                       * Restart SDWANRC1\n         ORG   ,                       *\nSDWANRC1_LEN EQU *-SDWANRC1            * Length of SDWANRC1\nSDWANRC2 DSECT ,                       * Restart SDWANRC2\n         ORG   ,                       *\nSDWANRC2_LEN EQU *-SDWANRC2            * Length of SDWANRC2\nSDWANRC3 DSECT ,                       * Restart SDWANRC3\n         ORG   ,                       *\nSDWANRC3_LEN EQU *-SDWANRC3            * Length of SDWANRC3\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.* Include the VRA as well\n         GENMAPS VRA\n.*\n.MEND    MEND\n./ ADD NAME=MAPSIOT  0100-20096-20096-0111-00264-00264-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Step Input/Output Table\n.*\n&LABEL   MAPSIOT &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSIOT                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSIOT        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SIOT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSIOT).MEND\n&BXA_MAC_MAPSIOT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SIOT\n&BXA_CB_SIOT SETC 'SIOT'\n.*\n.* SIOTTYPE - TABLE ID OF SIOT =3\nSIOTID   EQUOVR ,,v,SIOTTYPE\nDSNID    EQUOVR ,,v,SIOTTYPE\n.*\n.* SIOTBYT1 - MVM INDICATORS\nSIOTOCKP EQUOVR ,,b,SIOTBYT1\nSIOTHOLD EQUOVR ,,b,SIOTBYT1\nSIOVAMDS EQUOVR ,,b,SIOTBYT1\nSIODUNAL EQUOVR ,,b,SIOTBYT1\nSIOTDADR EQUOVR ,,b,SIOTBYT1\nSIODADSM EQUOVR ,,b,SIOTBYT1\nSIOTALCD EQUOVR ,,b,SIOTBYT1\nSIOTDDNT EQUOVR ,,b,SIOTBYT1\n.*\n.* SIOTBYT3 - ALLOCATION INDICATOR BYTE\nSIOALIAS EQUOVR ,,b,SIOTBYT3\nSIOCDEVT EQUOVR ,,b,SIOTBYT3\nSIOTJES3 EQUOVR ,,b,SIOTBYT3\nS3400OFF EQUOVR ,,b,SIOTBYT3\nSIOTDSID EQUOVR ,,b,SIOTBYT3\nSIOUCVTD EQUOVR ,,b,SIOTBYT3\nSIOTDSOP EQUOVR ,,b,SIOTBYT3\nSIOTHLD  EQUOVR ,,b,SIOTBYT3\n.*\n.* SIOTTSTC - INDICATORS FOR TIME SHARING AND TCAM\nSIOTINFC EQUOVR ,,b,SIOTTSTC\nSIOTTERM EQUOVR ,,b,SIOTTSTC\nSIOTSSGP EQUOVR ,,b,SIOTTSTC\nSIOTSSMG EQUOVR ,,b,SIOTTSTC\nSIOTTRKM EQUOVR ,,b,SIOTTSTC\nSIOTDSNM EQUOVR ,,b,SIOTTSTC\nSIOTQNAM EQUOVR ,,b,SIOTTSTC\n.*\n.* SIOTBYT0 - EXTENDED ALLOCATION INDICATORS\nSIOTSSDS EQUOVR ,,b,SIOTBYT0\nSIOTDYAL EQUOVR ,,b,SIOTBYT0\nSIOTNOPV EQUOVR ,,b,SIOTBYT0\nSIOTPUPV EQUOVR ,,b,SIOTBYT0\n.*\n.* SCTSDISP - SCHEDULER DISPOSITION OF THE DATA SET INDICATORS\nSIOTRETN EQUOVR ,,b,SCTSDISP\nS3400DSP EQUOVR ,,b,SCTSDISP\nPRIVATE  EQUOVR ,,b,SCTSDISP\nSIOTPRIV EQUOVR ,,b,SCTSDISP\nSIOTPASS EQUOVR ,,b,SCTSDISP\nSIOTKEEP EQUOVR ,,b,SCTSDISP\nSIOTDLET EQUOVR ,,b,SCTSDISP\nSIOTCTLG EQUOVR ,,b,SCTSDISP\nSIOTUNCT EQUOVR ,,b,SCTSDISP\n.*\n.* SCTSBYT1 - INDICATOR BYTE NUMBER 1\nSCTDUMMY EQUOVR ,,b,SCTSBYT1\nSCTSYSIN EQUOVR ,,b,SCTSBYT1\nSIOTCCAT EQUOVR ,,b,SCTSBYT1\nSIOTGDSN EQUOVR ,,b,SCTSBYT1\nSIOTQDSN EQUOVR ,,b,SCTSBYT1\nSCTPARLM EQUOVR ,,b,SCTSBYT1\nSCTUNAFF EQUOVR ,,b,SCTSBYT1\nSIOTJSCT EQUOVR ,,b,SCTSBYT1\n.*\n.* SCTSBYT2 - INDICATOR BYTE NUMBER 2\nSIOCLUNL EQUOVR ,,b,SCTSBYT2\nSIOTCATL EQUOVR ,,b,SCTSBYT2\nSCTVOLAF EQUOVR ,,b,SCTSBYT2\nSCTJOBLB EQUOVR ,,b,SCTSBYT2\nSCTUNLBD EQUOVR ,,b,SCTSBYT2\nSCTLABEL EQUOVR ,,b,SCTSBYT2\nSCTDEFER EQUOVR ,,b,SCTSBYT2\nSCTRECVD EQUOVR ,,b,SCTSBYT2\n.*\n.* SCTSBYT3 - INDICATOR BYTE NUMBER 3\nSCTDSNRF EQUOVR ,,b,SCTSBYT3\nSCTSYSNE EQUOVR ,,b,SCTSBYT3\nSCTALCHK EQUOVR ,,b,SCTSBYT3\nSCTVREF  EQUOVR ,,b,SCTSBYT3\nSCTSYSOU EQUOVR ,,b,SCTSBYT3\nSCTSNEW  EQUOVR ,,b,SCTSBYT3\nSCTSMOD  EQUOVR ,,b,SCTSBYT3\nSCTSOLD  EQUOVR ,,b,SCTSBYT3\n.*\n.* SCTSBYT4 DS    CL1    INDICATOR BYTE NUMBER 4\nSCTSGDGS EQUOVR ,,b,SCTSBYT4\nSIOTGDGA EQUOVR ,,b,SCTSBYT4\nSIOTAFF  EQUOVR ,,b,SCTSBYT4\nSIOTASCI EQUOVR ,,b,SCTSBYT4\nSIOTSTEP EQUOVR ,,b,SCTSBYT4\nSIOTVAFF EQUOVR ,,b,SCTSBYT4\nSIOTIPDI EQUOVR ,,b,SCTSBYT4\nSIOTOMN  EQUOVR ,,b,SCTSBYT4\n.*\n.* SIOUBYT3 - DEVICE CLASS\nSIO3TAPE EQUOVR ,,b,SIOUBYT3\nSIO3COMM EQUOVR ,,b,SIOUBYT3\nSIO3DACC EQUOVR ,,b,SIOUBYT3\nSIO3DISP EQUOVR ,,b,SIOUBYT3\nSIO3UREC EQUOVR ,,b,SIOUBYT3\n.*\n.* SIOTBYT4 - SIOT INDICATORS BYTE 4\nSIOTPROT EQUOVR ,,b,SIOTBYT4\nSIOTRACD EQUOVR ,,b,SIOTBYT4\nSIOTRACT EQUOVR ,,b,SIOTBYT4\nSIOTGPRV EQUOVR ,,b,SIOTBYT4\nSIOTHIER EQUOVR ,,b,SIOTBYT4\nSIOTDSQU EQUOVR ,,b,SIOTBYT4\nSIOTUCNT EQUOVR ,,b,SIOTBYT4\nSIOTVCNT EQUOVR ,,b,SIOTBYT4\n.*\n.* SIOTSMS - STORAGE MANAGEMENT SUBSYSTEM INDICATORS\nSIOTSMSM EQUOVR ,,b,SIOTSMS\nSIOTSMS1 EQUOVR ,,b,SIOTSMS\nSIOTSMS2 EQUOVR ,,b,SIOTSMS\nSIOTSMS3 EQUOVR ,,b,SIOTSMS\nSIOTSMS4 EQUOVR ,,b,SIOTSMS\nSIOTSMS5 EQUOVR ,,b,SIOTSMS\nSIOTSMS6 EQUOVR ,,b,SIOTSMS\nSIOTSMS7 EQUOVR ,,b,SIOTSMS\n.*\n.* SIOTALTD - CONDITIONAL DISPOSITION\nSIOTREDT EQUOVR ,,b,SIOTALTD\nSIOTOPEN EQUOVR ,,b,SIOTALTD\nSIOJCATS EQUOVR ,,b,SIOTALTD\nSIOTNPRV EQUOVR ,,b,SIOTALTD\nSIOTAKEP EQUOVR ,,b,SIOTALTD\nSIOTADEL EQUOVR ,,b,SIOTALTD\nSIOTACAT EQUOVR ,,b,SIOTALTD\nSIOTAUNC EQUOVR ,,b,SIOTALTD\n.*\n.* SIOTBYT5 - SIOT INDICATOR BYTE 5\nSIOTDEFC EQUOVR ,,b,SIOTBYT5\nSIOTDCLA EQUOVR ,,b,SIOTBYT5\nSIOTDDST EQUOVR ,,b,SIOTBYT5\nSIOTADUN EQUOVR ,,b,SIOTBYT5\nSIOTDYNU EQUOVR ,,b,SIOTBYT5\nSIOTOVES EQUOVR ,,b,SIOTBYT5\nSIOTBLKD EQUOVR ,,b,SIOTBYT5\nSIOTWTRN EQUOVR ,,b,SIOTBYT5\n.*\n.* SIOTSMSF - STORAGE MANAGEMENT SUBSYSTEM INDICATORS\nSIOTUSEQ EQUOVR ,,b,SIOTSMSF\nSIOTULAB EQUOVR ,,b,SIOTSMSF\nSIOTUTRT EQUOVR ,,b,SIOTSMSF\nSIOTTRTD EQUOVR ,,b,SIOTSMSF\nSIOTKEYD EQUOVR ,,b,SIOTSMSF\nSIOTRESL EQUOVR ,,b,SIOTSMSF\n.*\n.* SIOTBYT2 - MVM INDICATOR BYTE\nSIOTDMND EQUOVR ,,b,SIOTBYT2\nSIOTDSPD EQUOVR ,,b,SIOTBYT2\nSIOTGALL EQUOVR ,,b,SIOTBYT2\nSIOTCALC EQUOVR ,,b,SIOTBYT2\nSIOTCNEW EQUOVR ,,b,SIOTBYT2\nSIOTCVOL EQUOVR ,,b,SIOTBYT2\nSIOTSACP EQUOVR ,,b,SIOTBYT2\nSIOTPTTS EQUOVR ,,b,SIOTBYT2\n.*\n.* Macro IEFASIOT does not generate a DSECT statement\nSIOT     DSECT ,\n.*\n         MNOTE *,'Including IEFASIOT mapping macro'\n         IEFASIOT ,\n         EQUOVR *END\n*\nSIOT     DSECT ,                       * Resume SIOT DSECT\n         ORG\nSIOT_LEN EQU   *-SIOT                  * Length of SIOT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSMCA  0100-20096-20096-0111-00213-00213-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the SMf Control tAble\n.*\n&LABEL   MAPSMCA &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSMCA                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSMCA        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SMCA').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSMCA).MEND\n&BXA_MAC_MAPSMCA SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SMCA\n&BXA_CB_SMCA SETC 'SMCA'\n.*\n.* SMCAOPT - SMFDEFLT OPTIONS\nSMCAOPT1 EQUOVR ,,b,SMCAOPT\nSMCAOPT2 EQUOVR ,,b,SMCAOPT\nSMCAEXT  EQUOVR ,,b,SMCAOPT\nSMCADSA  EQUOVR ,,b,SMCAOPT\nSMCAVOL  EQUOVR ,,b,SMCAOPT\nSMCAUDCS EQUOVR ,,b,SMCAOPT\nSMCARS01 EQUOVR ,,b,SMCAOPT\nSMCATDS  EQUOVR ,,b,SMCAOPT\nSMCAFGND EQUOVR ,,b,SMCAOPT\n.*\n.* SMCAMISC - MISCELLANEOUS INDICATORS\nSMCAUSER EQUOVR ,,b,SMCAMISC\nSMCAMAN  EQUOVR ,,b,SMCAMISC\nSMCADSIC EQUOVR ,,b,SMCAMISC\nSMCAFIRT EQUOVR ,,b,SMCAMISC\nSMCAPSDP EQUOVR ,,b,SMCAMISC\nSMCADBSY EQUOVR ,,b,SMCAMISC\nSMCABSW  EQUOVR ,,b,SMCAMISC\nSMCADUMP EQUOVR ,,b,SMCAMISC\n.*\n.* SMCAENDI - A COMMUNICATION FIELD\nSMCARS14 EQUOVR ,,b,SMCAENDI\nSMCARS15 EQUOVR ,,b,SMCAENDI\nSMCARS16 EQUOVR ,,b,SMCAENDI\nSMCARS17 EQUOVR ,,b,SMCAENDI\nSMCARS18 EQUOVR ,,b,SMCAENDI\nSMCARS19 EQUOVR ,,b,SMCAENDI\nSMCADSPO EQUOVR ,,b,SMCAENDI\nSMCADSNF EQUOVR ,,b,SMCAENDI\n.*\n.* SMCABITS - BIT INDICATORS\nSMCADAR  EQUOVR ,,b,SMCABITS\nSMCADSNM EQUOVR ,,b,SMCABITS\n.*\n.* SMCAPRMT - REPLACES OPI BIT\nSMCAIPLR EQUOVR ,,b,SMCAPRMT\nSMCALIST EQUOVR ,,b,SMCAPRMT\nSMCALDSN EQUOVR ,,b,SMCAPRMT\nSMCAMXDM EQUOVR ,,b,SMCAPRMT\nSMCASTUS EQUOVR ,,b,SMCAPRMT\nSMCARUN  EQUOVR ,,b,SMCAPRMT\nSMCASKD  EQUOVR ,,b,SMCAPRMT\nSMCACONS EQUOVR ,,b,SMCAPRMT\n.*\n.* SMCAFLGS - WRITER STATUS FLAGS\nSMCAINIT EQUOVR ,,b,SMCAFLGS\nSMCARSTR EQUOVR ,,b,SMCAFLGS\nSMCADTLS EQUOVR ,,b,SMCAFLGS\nSMCASETP EQUOVR ,,b,SMCAFLGS\nSMCADISP EQUOVR ,,b,SMCAFLGS\nSMCALL   EQUOVR ,,b,SMCAFLGS\nSMCALATE EQUOVR ,,b,SMCAFLGS\nSMCASETS EQUOVR ,,b,SMCAFLGS\n.*\n.* SMCAFLGR - RECOVERY FOOTPRINTS\nSMCATERM EQUOVR ,,b,SMCAFLGR\nSMCAPGFX EQUOVR ,,b,SMCAFLGR\nSMCASRBF EQUOVR ,,b,SMCAFLGR\nSMCAPSUS EQUOVR ,,b,SMCAFLGR\nSMCAPCDT EQUOVR ,,b,SMCAFLGR\nSMCAU29  EQUOVR ,,b,SMCAFLGR\nSMCANOST EQUOVR ,,b,SMCAFLGR\nSMCAPREV EQUOVR ,,b,SMCAFLGR\nSMCANMRE EQUOVR ,,b,SMCAFLGR\n.*\n.* SMCARCUR - RECOVERY RECURSION BITS\nSMCAMXDR EQUOVR ,,b,SMCARCUR\nSMCASTTR EQUOVR ,,b,SMCARCUR\nSMCASUSR EQUOVR ,,b,SMCARCUR\nSMCATIMR EQUOVR ,,b,SMCARCUR\nSMCASETR EQUOVR ,,b,SMCARCUR\nSMCASETC EQUOVR ,,b,SMCARCUR\n.*\n.* SMCAIOMC - NUMBER OF TIMES I/O MEASUREMENTS\nSMCAIOMS EQUOVR ,,b,SMCAIOMC\n.*\n.* SMCAEXFL - USER EXIT FLAGS\nSMCAEXR1 EQUOVR ,,b,SMCAEXFL\nSMCAEXR3 EQUOVR ,,b,SMCAEXFL\nSMCAEXR4 EQUOVR ,,b,SMCAEXFL\nSMCAEXR5 EQUOVR ,,b,SMCAEXFL\n.*\n.* SMCASIDB - SMF SID Syntax Used\nSMCASDFT EQUOVR ,,b,SMCASIDB\nSMCASONL EQUOVR ,,b,SMCASIDB\nSMCASSER EQUOVR ,,b,SMCASIDB\nSMCASSYS EQUOVR ,,b,SMCASIDB\nSMCASSYM EQUOVR ,,b,SMCASIDB\nSMCASCOM EQUOVR ,,b,SMCASIDB\nSMCASRSV EQUOVR ,,b,SMCASIDB\n.*\n.* SMCAUFLG - Usage Data Collection Services Flags\nSMCAUT89 EQUOVR ,,b,SMCAUFLG\nSMCAT892 EQUOVR ,,b,SMCAUFLG\n.*\n.* SMCADLFL - DATA LOST CONTROL FLAGS\nSMCADLWT EQUOVR ,,b,SMCADLFL\nSMCADLHL EQUOVR ,,b,SMCADLFL\nSMCADLLD EQUOVR ,,b,SMCADLFL\nSMCADLR1 EQUOVR ,,b,SMCADLFL\nSMCADLR2 EQUOVR ,,b,SMCADLFL\nSMCADLR3 EQUOVR ,,b,SMCADLFL\nSMCADLR4 EQUOVR ,,b,SMCADLFL\nSMCADLR5 EQUOVR ,,b,SMCADLFL\n.*\n         MNOTE *,'Including IEESMCA mapping macro'\n         IEESMCA ,\n         EQUOVR *END\n*\nSMCABASE DSECT ,                       * Resume SMCA DSECT\nSMCA     EQU   SMCABASE                * Label for USINGs\n         ORG\nSMCA_LEN EQU   *-SMCA                  * Length of SMCA\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSMDE  0100-20096-20096-0111-00142-00142-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the System Managed Directory Entry\n.*\n.* Warning: Field SMDE_LEN has been renamed to SMDE_SIZE\n.*\n&LABEL   MAPSMDE &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSMDE                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSMDE        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SMDE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSMDE).MEND\n&BXA_MAC_MAPSMDE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SMDE\n         GBLC  &BXA_CB_SMDE_FD\n         GBLC  &BXA_CB_SMDE_NAME\n         GBLC  &BXA_CB_SMDE_NLST\n         GBLC  &BXA_CB_SMDE_PNAME\n         GBLC  &BXA_CB_SMDE_TOKEN\n&BXA_CB_SMDE SETC 'SMDE'\n&BXA_CB_SMDE_FD SETC 'SMDE'\n&BXA_CB_SMDE_NAME SETC 'SMDE'\n&BXA_CB_SMDE_NLST SETC 'SMDE'\n&BXA_CB_SMDE_PNAME SETC 'SMDE'\n&BXA_CB_SMDE_TOKEN SETC 'SMDE'\n.*\n         GENMAPS (PMAR)\n.*\n.* SMDE_LEN - LENGTH OF CONTROL BLOCK.\nSMDE_LEN           DSOVR  *NEWNAME,SMDE_SIZE\n.*\n.* SMDE_LVL - SMDE VERSION NUMBER\nSMDE_LVL_VAL       EQUOVR ,,v,SMDE_LVL\n.*\n.* SMDE_LIBTYPE - SOURCE LIBRARY TYPE.\nSMDE_LIBTYPE_C370LIB EQUOVR ,,v,SMDE_LIBTYPE\nSMDE_LIBTYPE_HFS   EQUOVR ,,v,SMDE_LIBTYPE\nSMDE_LIBTYPE_PDSE  EQUOVR ,,v,SMDE_LIBTYPE\nSMDE_LIBTYPE_PDS   EQUOVR ,,v,SMDE_LIBTYPE\n.*\n.* SMDE_FLAG - FLAG BYTE\nSMDE_FLAG_ALIAS    EQUOVR ,,b,SMDE_FLAG\nSMDE_FLAG_LMOD     EQUOVR ,,b,SMDE_FLAG\nSMDE_SYSTEM_DCB    EQUOVR ,,b,SMDE_FLAG\n.*\n.* SMDE_LIBF - LIBRARY FLAG (Z-BYTE)\nSMDE_LIBF_TASKLIB  EQUOVR ,,v,SMDE_LIBF\nSMDE_LIBF_LINKLIB  EQUOVR ,,v,SMDE_LIBF\nSMDE_LIBF_PRIVATE  EQUOVR ,,v,SMDE_LIBF\n.*\n         MNOTE *,'Including IGWSMDE mapping macro'\n         IGWSMDE ,                     * Generate IGWSMDE\n         EQUOVR *END\n*\nSMDE     DSECT ,                       * Resume SMDE DSECT\n         ORG   ,                       *\nSMDE_LEN EQU   *-SMDE                  * Length of SMDE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSNAP  0100-20096-20096-0111-00133-00133-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro describing SNAP storage areas list and headers list\n.* The SNAP Plist itself is described in macro's\n.*     IHASNAP, IHASNAPX, and IHASNP\n.*\n&LABEL   MAPSNAP &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSNAP                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSNAP        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SNAPDLIST').EMBED\n         AIF   ('&CB' EQ 'SNAPHLIST').EMBED\n         AIF   ('&CB' EQ 'SNAPLIST').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSNAP).MEND\n&BXA_MAC_MAPSNAP SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SNAPDLIST\n         GBLC  &BXA_CB_SNAPHLIST\n         GBLC  &BXA_CB_SNAPLIST\n&BXA_CB_SNAPDLIST SETC 'SNAP'\n&BXA_CB_SNAPHLIST SETC 'SNAP'\n&BXA_CB_SNAPLIST SETC 'SNAP'\n.*\n         MNOTE *,'Generating BXASNAP Dsects'\n*\nSNAPLIST DSECT\nSNAPFROM DS    A                       * Start address of dump-range\nSNAPSTAT DS    0X                      * Bit0 on to mark end-of-list\nSNAPTO   DS    A                       * End address of dump-range\n*\n         ORG   ,                       *\nSNAPLIST_LEN EQU *-SNAPLIST            *\n*\nSNAPHLIST DSECT\nSNAPHSTAT DS   0X                      * Bit0 on to mark end-of-list\nSNAPHPTR DS    A                       * Pointer to header text\n*\n         ORG   ,                       * Reset to end of dsect\nSNAPHLIST_LEN EQU *-SNAPHLIST\n*\nSNAPDLIST DSECT\nSNAPDFROM DS   A                       * Start address of dump-range\nSNAPDSTAT DS   0X                      * Bit0 on to mark end-of-list\nSNAPDTO  DS    A                       * End address of dump-range\nSNAPDSTK DS    XL8                     * STOKEN of dataspace\n*\n         ORG   ,                       *\nSNAPDLIST_LEN EQU *-SNAPDLIST          *\n*\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSRB   0100-20096-20096-0111-00138-00138-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Service Request Block\n.*\n&LABEL   MAPSRB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSRB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSRB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SRB').EMBED\n         AIF   ('&CB' EQ 'XSRB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSRB).MEND\n&BXA_MAC_MAPSRB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SRB\n&BXA_CB_SRB SETC 'SRB'\n.*\n.* SRBEPA - ADDRESS OF ENTRY POINT (31-BIT USERS)\nSRBMODE  EQUOVR ,,b,SRBEPA\n.*\n.* SRBRMTRA - ADDRESS OF RESOURCE MANAGER  ROUTINE (31-BIT USERS)\nSRBRMODE EQUOVR ,,b,SRBRMTRA\n.*\n.* SRBFLGS - SRB OPTION FLAGS\nSRBLLREQ EQUOVR ,,b,SRBFLGS\nSRBLLHLD EQUOVR ,,b,SRBFLGS\nSRBFRREQ EQUOVR ,,b,SRBFLGS\nSRBFRRCL EQUOVR ,,b,SRBFLGS\nSRBSUSP  EQUOVR ,,b,SRBFLGS\nSRBPNONQ EQUOVR ,,b,SRBFLGS\nSRBPSYS  EQUOVR ,,v,SRBFLGS\n.*\n.* SRBFLGS1 - SRB TYPE FLAGS.\nSRBMAIN  EQUOVR ,,b,SRBFLGS1\nSRBSP245 EQUOVR ,,b,SRBFLGS1\nSRBBLK24 EQUOVR ,,b,SRBFLGS1\nSRBXESF  EQUOVR ,,b,SRBFLGS1\nSRB1STS  EQUOVR ,,b,SRBFLGS1\nSRBPMCS  EQUOVR ,,b,SRBFLGS1\nSRBMSCHD EQUOVR ,,b,SRBFLGS1\nSRBTOKNP EQUOVR ,,b,SRBFLGS1\n.*\n         MNOTE *,'Including IHASRB mapping macro'\n         IHASRB LIST=YES               *\n         EQUOVR *END                   *\n*\nSRBSECT  DSECT ,                       * Resume SRB DSECT\n         ORG   ,                       *\nSRB_LEN  EQU   *-SRB                   * Length of SRB\n*\nXSRB     EQU   SRB                     * eXtended SRB\n         ORG   ,                       * Position to end of SRB\nXSRBNX   DS    A                       * Addr. of next free XSRB+SRBPL\n         DS    0D                      * Round up to doubleword boundry\nXSRB_LEN EQU   *-XSRB                  *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSSDR  0100-20096-20096-0111-00130-00130-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the SSOB extension for Dynamic device\n.*                                        Reconfiguration\n.*\n&LABEL   MAPSSDR &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSSDR                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSSDR        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SSDR').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSSDR).MEND\n&BXA_MAC_MAPSSDR SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SSDR\n&BXA_CB_SSDR SETC 'SSDR'\n.*\n.* SSOB mapping is required before SSDR can be mapped\n         GENMAPS SSOB\n.*\n.* DYNAMIC DEVICE RECONFIGURATION JES3 FUNCTION IDS (SSOBFUNC)\nSSOBDDR1 EQUOVR ,,v,SSOBFUNC\nSSOBDDR2 EQUOVR ,,v,SSOBFUNC\nSSOBDDR3 EQUOVR ,,v,SSOBFUNC\nSSOBDDR4 EQUOVR ,,v,SSOBFUNC\n.*\n.* DYNAMIC DEVICE RECONFIGURATION/JES3 RETURN CODES (SSOBRETN)\nSSDR1EDL EQUOVR ,,v,SSOBRETN\nSSDR1IDL EQUOVR ,,v,SSOBRETN\nSSDR1NOL EQUOVR ,,v,SSOBRETN\nSSDR2ED  EQUOVR ,,v,SSOBRETN\nSSDR2ID  EQUOVR ,,v,SSOBRETN\n.*\n.* SSDRFLG2 - SSDR FLAG BYTE FUNCTION 3&4\nSSDR4SWP EQUOVR ,,b,SSDRFLG2\n.*\n.* IEFSSDR maps 1 of many overlays for the SSOB extension\nSSOBEXT  DSECT ,                       * Resume SSOB extension DSECT\n.*\n         MNOTE *,'Including IEFSSDR mapping macro'\n         IEFSSDR ,\n         EQUOVR *END\n*\nSSOBEXT  DSECT ,                       * Resume SSOB extension DSECT\nSSDR     EQU   SSOBEXT                 * Label for USING\n         ORG\nSSDR_LEN EQU   *-SSDRBGN               * Length of SSDR\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSSL   0100-20096-20096-0111-00109-00109-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Short page Service List\n.*\n&LABEL   MAPSSL &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSSL                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSSL         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SSL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSSL).MEND\n&BXA_MAC_MAPSSL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SSL\n&BXA_CB_SSL SETC 'SSL'\n.*\n.* SSLFLG -\nSSLAST   EQUOVR ,,b,SSLFLG\n.*\n         MNOTE *,'Including IHASSL mapping macro'\n         IHASSL ,\n         EQUOVR *END\n*\nSSL      DSECT ,                       * Resume SSL DSECT\n         ORG\nSSL_LEN  EQU   *-SSL                   * Length of SSL\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSSOB  0100-20096-20096-0111-00122-00122-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the SubSystem Options Block\n.*\n&LABEL   MAPSSOB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSSOB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSSOB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SSOB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSSOB).MEND\n&BXA_MAC_MAPSSOB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SSOB\n&BXA_CB_SSOB SETC 'SSOB'\n.*\n.* SSOBRETN - RETURN CODE FROM SUBSYSTEM\nSSRTOK   EQUOVR ,,v,SSOBRETN\nSSRTNSUP EQUOVR ,,v,SSOBRETN\nSSRTNTUP EQUOVR ,,v,SSOBRETN\nSSRTNOSS EQUOVR ,,v,SSOBRETN\nSSRTDIST EQUOVR ,,v,SSOBRETN\nSSRTLERR EQUOVR ,,v,SSOBRETN\nSSRTNSSI EQUOVR ,,v,SSOBRETN\n.*\n.* SSOBFLG1 - Flag Byte\nSSOBRTRY EQUOVR ,,b,SSOBFLG1\n.*\n         MNOTE *,'Including IEFSSOBH mapping macro'\n         IEFSSOBH ,\n         EQUOVR *END\n*\nSSOB     DSECT ,                       * Resume SSOB DSECT\n         ORG\nSSOB_LEN EQU   *-SSOB                  * Length of SSOB\n*\n* Define DSECT for function-dependent extension(s)\nSSOBEXT  DSECT ,                       * Start SSOB extension\nSSOBGN   EQU   *                       * Label for USINGs\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSSRB  0100-20096-20096-0111-00128-00128-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Suspended Service Request Block\n.*\n&LABEL   MAPSSRB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSSRB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSSRB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SSRB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSSRB).MEND\n&BXA_MAC_MAPSSRB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SSRB\n&BXA_CB_SSRB SETC 'SSRB'\n.*\n.* Include required SRB mapping\n         GENMAPS (SRB)\n.*\n.* Include OPSYN for IHASRB to prevent re-expansion by IHASSRB\nIHASRB   OPSYN   ORG                   * Change to harmless ORG-opcode\n.*\n.* SSRBCPUT - CPU TIMER SAVEAREA\nSSRBNTMR EQUOVR ,,b,SSRBCPUT\n.*\n.* SSRBORMT - OLD SRB RMTR VALUE\nSSRBSSTD EQUOVR ,,b,SSRBORMT\nSSRBSSTA EQUOVR ,,b,SSRBORMT\nSSRBSSTE EQUOVR ,,b,SSRBORMT\n.*\n.* SSRBFPFL - FP Flags\nSSRBBFP  EQUOVR ,,b,SSRBFPFL\n.*\n         MNOTE *,'Including IHASSRB mapping macro'\nSRBSECT  DSECT ,                       * Resume SRB DSECT\n         ORG   ,                       *\n         IHASSRB LIST=YES              *\n         EQUOVR *END                   *\n*\nSRBSECT  DSECT ,                       * Resume SRB DSECT\n         ORG   ,                       *\nSSRB_LEN EQU   *-SRBSECT               * Length of SSRB\n.*\n.* Undo the OPSYN for IHASRB\nIHASRB   OPSYN ,                       *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSTCB  0100-20096-20096-0111-00158-00158-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Secondary Task Control Block\n.*\n&LABEL   MAPSTCB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSTCB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSTCB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'STCB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSTCB).MEND\n&BXA_MAC_MAPSTCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_STCB\n&BXA_CB_STCB SETC 'STCB'\n.*\n.* STCBVAFN - VECTOR AFFINITY AND STATUS SAVED\nSTCBVMCK EQUOVR STCBVAFN\nSTCBSLID EQUOVR STCBVAFN\nSTCBVISA EQUOVR STCBVAFN\nSTCBSLCI EQUOVR STCBVAFN\n.*\n.* STCBFLG1 - FLAG BYTE\nSTCBPIQ  EQUOVR STCBFLG1\nSTCBVFRV EQUOVR STCBFLG1\nSTCBVFRD EQUOVR STCBFLG1\nSTCBSST  EQUOVR STCBFLG1\n.*\n.* STCBFLG2 - FLAG BYTE\nSTCBRMET EQUOVR STCBFLG2\nSTCBINRT EQUOVR STCBFLG2\n.*\n.* STCBFLG3 - FLAG BYTE\nSTCBNCNL EQUOVR STCBFLG3\nSTCBRTNC EQUOVR STCBFLG3\n.*\n.* STCBXCFF - XCF FLAG.\nSTCBSUSM EQUOVR STCBXCFF\n.*\n.* STCBFLG4 - Flag byte 4.\nSTCBENFL EQUOVR STCBFLG4\n.*\n.* STCBFLG5 - Flag byte 5.\nSTCBUNCK EQUOVR STCBFLG5\nSTCBENCK EQUOVR STCBFLG5\nSTCBOPTC EQUOVR STCBFLG5\n.*\n.* STCBFLG6 - Flag byte 6.\nSTCBSATF EQUOVR STCBFLG6\n.*\n.* STCBRGS1 - First Byte of Indicators\nSTCBRGRM EQUOVR STCBRGS1\nSTCBRGEM EQUOVR STCBRGS1\n.*\n.* STCBDFP - RESERVED FOR USE BY DFP.\nSTCBOAM  EQUOVR STCBDFP\n.*\n.* STCBCONS - Console Flag.\nSTCBWTO  EQUOVR STCBCONS\n.*\n.* STCBFLG7 - Flag byte 7.\nSTCBRTLS EQUOVR STCBFLG7\nSTCBRTLA EQUOVR STCBFLG7\n.*\n.* STCBFPFL - FP Flags\nSTCBBFP  EQUOVR STCBFPFL\nSTCBVSS  EQUOVR STCBFPFL\n.*\n         MNOTE *,'Including IHASTCB mapping macro'\n         IHASTCB LIST=YES              * Use unchanged PRINT option\n         EQUOVR *END\n*\nSTCB     DSECT ,                       * Reset to STCB DSECT\n         ORG\nSTCB_LEN EQU *-STCB                    * Length of STCB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSVCE  0100-20096-20096-0111-00143-00143-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the entries of the SVC table and the entries of\n.*      the SVC Udate Recording Table\n.*\n&LABEL   MAPSVCE &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSVCE                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSVCE        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SVCENTRY').EMBED\n         AIF   ('&CB' EQ 'SVCURT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSVCE).MEND\n&BXA_MAC_MAPSVCE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SVCENTRY\n         GBLC  &BXA_CB_SVCURT\n&BXA_CB_SVCENTRY SETC 'SVCE'\n&BXA_CB_SVCURT SETC 'SVCE'\n.*\n.* SVCEP - SVC ENTRY POINT ADDRESS\nSVCAMODE EQUOVR ,,b,SVCEP\n.*\n.* SVCTP - TYPE FIELD\nSVCTP1   EQUOVR ,,v,SVCTP\nSVCTP2   EQUOVR ,,b,SVCTP\nSVCTP34  EQUOVR ,,b,SVCTP\nSVCTP6   EQUOVR ,,b,SVCTP\nSVCAPF   EQUOVR ,,b,SVCTP\nSVCESR   EQUOVR ,,b,SVCTP\nSVCNP    EQUOVR ,,b,SVCTP\nSVCASF   EQUOVR ,,b,SVCTP\n.*\n.* SVCATTR3 - ATTRIBUTES\nSVCAR    EQUOVR ,,b,SVCATTR3\n.*\n.* SVCLOCKS - LOCK ATTRIBUTES\nSVCLL    EQUOVR ,,b,SVCLOCKS\nSVCCMS   EQUOVR ,,b,SVCLOCKS\nSVCOPT   EQUOVR ,,b,SVCLOCKS\nSVCALLOC EQUOVR ,,b,SVCLOCKS\nSVCDISP  EQUOVR ,,b,SVCLOCKS\n.*\n         MNOTE *,'Including IHASVC mapping macro'\n         IHASVC LIST=YES,              * Use unchanged PRINT option    *\n               UPDATE=YES              * and include update recording\n         EQUOVR *END\n*\nSVCENTRY DSECT ,                       * Resume SVCENTRY DSECT\nSVC      EQU   SVCENTRY                * Label for USINGs\n         ORG\nSVC_LEN  EQU   *-SVC                   * Length of SVC entry\n*\nSVCURT   DSECT ,                       * Resume SVCURT DSECT\n         ORG\nSVCURT_LEN EQU *-SVCURT                * Length of URT entry\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.* Qname and Rname for ENQ on SVC table\nSVC_QNAME RDATA DC,CL8'SYSZSVC'        *\nSVC_RNAME RDATA DC,C'TABLE'            *\n.*\n.MEND    MEND\n./ ADD NAME=MAPSVRB  0100-20096-20096-0111-00105-00105-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps a SuperVisor Request Block\n.*\n&LABEL   MAPSVRB &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSVRB                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSVRB        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SVRB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSVRB).MEND\n&BXA_MAC_MAPSVRB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SVRB\n&BXA_CB_SVRB SETC 'SVRB'\n.*\n         GENMAPS RB                    * Generate RB mapping\n*\nRBPRFX   DSECT ,                       * Reset to RB DSECT\nSVRB     EQU   RBBASIC                 * Start of SVRB proper\n         ORG\nSVRB_LEN EQU   *-SVRB                  * Length of SVRB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSVT   0100-20096-20096-0111-00153-00153-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Supervisor Vector Table\n.*\n&LABEL   MAPSVT &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSVT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSVT         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SVT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSVT).MEND\n&BXA_MAC_MAPSVT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SVT\n&BXA_CB_SVT SETC 'SVT'\n.*\n.* SVTSRQ1 - FIRST BYTE OF SVTDSREQ\nSVTDSG4  EQUOVR ,,b,SVTSRQ1\nSVTDFLT  EQUOVR ,,b,SVTSRQ1\n.*\n.* SVTSRQ2 - SECOND BYTE OF SVTDSREQ\nSVTDSG3  EQUOVR ,,b,SVTSRQ2\nSVTSRM1  EQUOVR ,,b,SVTSRQ2\nSVTQVER  EQUOVR ,,b,SVTSRQ2\n.*\n.* SVTSRQ3 - THIRD BYTE OF SVTDSREQ\nSVTDSG2  EQUOVR ,,b,SVTSRQ3\nSVTRCTI  EQUOVR ,,b,SVTSRQ3\nSVTTCBV  EQUOVR ,,b,SVTSRQ3\nSVTACHA  EQUOVR ,,b,SVTSRQ3\nSVTMTER  EQUOVR ,,b,SVTSRQ3\nSVTMINI  EQUOVR ,,b,SVTSRQ3\nSVTCBVE  EQUOVR ,,b,SVTSRQ3\n.*\n.* SVTSRQ4 - FOURTH BYTE OF SVTDSREQ\nSVTDSG1  EQUOVR ,,b,SVTSRQ4\nSVTDETA  EQUOVR ,,b,SVTSRQ4\nSVTATTA  EQUOVR ,,b,SVTSRQ4\nSVTRTM2  EQUOVR ,,b,SVTSRQ4\nSVTRTM1  EQUOVR ,,b,SVTSRQ4\nSVTCHAP  EQUOVR ,,b,SVTSRQ4\nSVTSTAT  EQUOVR ,,b,SVTSRQ4\nSVTPURD  EQUOVR ,,b,SVTSRQ4\n.*\n.* SVTDSBCT - MAXIMUM NUMBER OF WEBs the DISPATCHER CAN PROCESS\nSVTCHKWP EQUOVR ,,b,SVTDSBCT+1\nSVTAWM   EQUOVR ,,b,SVTDSBCT+3\n.*\n.* SVTCS1 - FIRST BYTE OF CS WORD.\nSVTXMSOP EQUOVR ,,b,SVTCS1\nSVTXMSUP EQUOVR ,,b,SVTCS1\nSVTXMCMF EQUOVR ,,b,SVTCS1\n.* SVTPNFP  EQUOVR ,,b,SVTCS1          * Last seen in OS/390 V2R6\n.*\n.* SVTDACTV - DISPATCHER ACTIVE INDICATOR\nSVTDLID  EQUOVR ,,b,SVTDACTV\nSVTDPRMT EQUOVR ,,b,SVTDACTV\nSVTDSCAN EQUOVR ,,b,SVTDACTV\n.*\n.* SVTPWAIT - PROCESSOR WAITING INDICATOR\nSVTPWTCK EQUOVR ,,b,SVTPWAIT\nSVTPWSTS EQUOVR ,,b,SVTPWAIT\n.*\n         MNOTE *,'Including IHASVT mapping macro'\n         IHASVT LIST=YES               * Keep current listing options\n         EQUOVR *END\n*\nSVT      DSECT ,                       * Resume SVT DSECT\n         ORG   ,\nSVT_LEN  EQU   *-SVT                   * Length of SVT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPSWAPX 0100-20096-20096-0111-00109-00109-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the SWA prefix area\n.*\n&LABEL   MAPSWAPX &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPSWAPX               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPSWAPX       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'SWAPRFX').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPSWAPX).MEND\n&BXA_MAC_MAPSWAPX SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_SWAPRFX\n&BXA_CB_SWAPRFX SETC 'SWAPX'\n.*\n         MNOTE *,'Generating DSECT for SWAPRFX'\n.*\nSWAPRFX  DSECT ,\nSWAWORD0 DS    F                       *\nSWASELF  DS    A                       * Ptr (or SVA?) of this prefix\nSWAWORD2 DS    F                       *\nSWANAME  DS    CL4                     * Acronym of following block\n*\n         ORG\nSWAPRFX_LEN EQU *-SWAPRFX              * Length of SWA prefix\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPS99   0100-20096-20096-0111-00651-00651-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Control Blocks used with SVC 99 (DYNALLOC)\n.*\n&LABEL   MAPS99 &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPS99                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPS99         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'EMDSECT1').EMBED\n         AIF   ('&CB' EQ 'EMDSECT2').EMBED\n         AIF   ('&CB' EQ 'EMDSECT3').EMBED\n         AIF   ('&CB' EQ 'S99RB').EMBED\n         AIF   ('&CB' EQ 'S99RBP').EMBED\n         AIF   ('&CB' EQ 'S99RBX').EMBED\n         AIF   ('&CB' EQ 'S99TUFLD').EMBED\n         AIF   ('&CB' EQ 'S99TUNIT').EMBED\n         AIF   ('&CB' EQ 'S99TUPL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPS99).MEND\n&BXA_MAC_MAPS99 SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_EMDSECT1\n         GBLC  &BXA_CB_EMDSECT2\n         GBLC  &BXA_CB_EMDSECT3\n         GBLC  &BXA_CB_S99RB\n         GBLC  &BXA_CB_S99RBP\n         GBLC  &BXA_CB_S99RBX\n         GBLC  &BXA_CB_S99TUFLD\n         GBLC  &BXA_CB_S99TUNIT\n         GBLC  &BXA_CB_S99TUPL\n&BXA_CB_EMDSECT1 SETC 'S99'\n&BXA_CB_EMDSECT2 SETC 'S99'\n&BXA_CB_EMDSECT3 SETC 'S99'\n&BXA_CB_S99RB SETC 'S99'\n&BXA_CB_S99RBP SETC 'S99'\n&BXA_CB_S99RBX SETC 'S99'\n&BXA_CB_S99TUFLD SETC 'S99'\n&BXA_CB_S99TUNIT SETC 'S99'\n&BXA_CB_S99TUPL SETC 'S99'\n.*\n.* S99RBPTR - REQUEST BLOCK POINTER\nS99RBPTR DSOVR  A\nS99RBPND EQUOVR ,,b,S99RBPTR\n.*\n.* S99VERB - VERB CODE\nS99VRBAL EQUOVR ,,v,S99VERB\nS99VRBUN EQUOVR ,,v,S99VERB\nS99VRBCC EQUOVR ,,v,S99VERB\nS99VRBDC EQUOVR ,,v,S99VERB\nS99VRBRI EQUOVR ,,v,S99VERB\nS99VRBDN EQUOVR ,,v,S99VERB\nS99VRBIN EQUOVR ,,v,S99VERB\n.*\n.* S99FLG11 - FIRST FLAGS BYTE\nS99ONCNV EQUOVR ,,b,S99FLG11\nS99NOCNV EQUOVR ,,b,S99FLG11\nS99NOMNT EQUOVR ,,b,S99FLG11\nS99JBSYS EQUOVR ,,b,S99FLG11\nS99CNENQ EQUOVR ,,b,S99FLG11\nS99GDGNT EQUOVR ,,b,S99FLG11\nS99MSGL0 EQUOVR ,,b,S99FLG11\nS99NOMIG EQUOVR ,,b,S99FLG11\n.*\n.* S99FLG12 - SECOND BYTE OF FLAGS\nS99NOSYM EQUOVR ,,b,S99FLG12\nS99ACUCB EQUOVR ,,b,S99FLG12\n.*\n.* S99TXTPP - ADDR OF LIST OF TEXT UNIT PTRS\nS99TXTPP DSOVR  A\n.*\n.* S99S99X - ADDR OF REQ BLK EXTENSION\nS99S99X  DSOVR  A\n.*\n.* S99FLG21 - FIRST BYTE OF FLAGS\nS99WTVOL EQUOVR ,,b,S99FLG21\nS99WTDSN EQUOVR ,,b,S99FLG21\nS99NORES EQUOVR ,,b,S99FLG21\nS99WTUNT EQUOVR ,,b,S99FLG21\nS99OFFLN EQUOVR ,,b,S99FLG21\nS99TIONQ EQUOVR ,,b,S99FLG21\nS99CATLG EQUOVR ,,b,S99FLG21\nS99MOUNT EQUOVR ,,b,S99FLG21\n.*\n.* S99FLG22 - SECOND BYTE OF FLAGS\nS99UDEVT EQUOVR ,,b,S99FLG22\nS99PCINT EQUOVR ,,b,S99FLG22\nS99DYNDI EQUOVR ,,b,S99FLG22\nS99TIOEX EQUOVR ,,b,S99FLG22\n.*\n.* Masks for defined bits in flag fields\nS99MSK11 EQUOVR ,,b,S99FLG11\nS99MSK12 EQUOVR ,,b,S99FLG12\nS99MSK21 EQUOVR ,,b,S99FLG21\nS99MSK22 EQUOVR ,,b,S99FLG22\nS99MSK23 EQUOVR ,,v,S99FLG23\nS99MSK24 EQUOVR ,,v,S99FLG24\n.*\nS99NOT11 EQUOVR ,,v,S99FLG11\nS99NOT12 EQUOVR ,,b,S99FLG12\nS99NOT21 EQUOVR ,,v,S99FLG21\nS99NOT22 EQUOVR ,,b,S99FLG22\nS99NOT23 EQUOVR ,,b,S99FLG23\nS99NOT24 EQUOVR ,,b,S99FLG24\n.*\n.* S99TUPTR - TEXT UNIT POINTER\nS99TUPLN EQUOVR ,,b,S99TUPTR\n.*\n.* S99EVER - VERSION NUMBER\nS99EVER  DSOVR  XL1\nS99RBXVR EQUOVR ,,v,S99EVER\n.*\n.* S99EOPTS - PROCESSING OPTIONS\nS99EIMSG EQUOVR ,,b,S99EOPTS\nS99ERMSG EQUOVR ,,b,S99EOPTS\nS99ELSTO EQUOVR ,,b,S99EOPTS\nS99EMKEY EQUOVR ,,b,S99EOPTS\nS99EMSUB EQUOVR ,,b,S99EOPTS\nS99EWTP  EQUOVR ,,b,S99EOPTS\n.*\n.* S99EMGSV - SEVERITY LEVEL FOR MESSAGES PROCESSING\nS99XINFO EQUOVR ,,v,S99EMGSV\nS99XWARN EQUOVR ,,b,S99EMGSV\nS99XSEVE EQUOVR ,,b,S99EMGSV\n.*\n         MNOTE *,'Including IEFZB4D0 mapping macro'\n         IEFZB4D0 ,                    *\n         EQUOVR *END\n         DSOVR *END\n*\nS99RBP   DSECT ,                       *\n         ORG   ,                       *\nS99RBP_LEN EQU *-S99RBP                *\n*\nS99RB    DSECT ,                       *\n         ORG   ,                       *\nS99RB_LEN EQU  *-S99RB                 *\n*\nS99TUPL  DSECT ,                       *\n         ORG   ,                       *\nS99TUPL_LEN EQU *-S99TUPL              *\n*\nS99TUNIT DSECT ,                       *\nS99TUFIX_LEN EQU S99TUPAR-S99TUNIT     * Length of fixed part\n         ORG   ,                       *\nS99TUNIT_LEN EQU *-S99TUNIT            *\n*\nS99TUFLD DSECT ,                       *\n         ORG   ,                       *\nS99TUFLD_LEN EQU *-S99TUFLD            *\n*\nS99RBX   DSECT ,                       *\n         ORG   ,                       *\nS99RBX_LEN EQU *-S99RBX                *\n*\n         MNOTE *,'Including IEFZB4D2 mapping macro'\n         IEFZB4D2 ,                    *\n*\nSVC99KYS DSECT ,                       *\n*\n* Constants missing in IEFZB4D2\nDALSTATS_OLD EQU X'01'                 * DISP=OLD\nDALSTATS_MOD EQU X'02'                 * DISP=MOD\nDALSTATS_NEW EQU X'04'                 * DISP=NEW\nDALSTATS_SHR EQU X'08'                 * DISP=SHR\n*\nDALNDISP_UNCATLG EQU X'01'             * DISP=(,UNCATLG)\nDALNDISP_CATLG   EQU X'02'             * DISP=(,CATLG)\nDALNDISP_DELETE  EQU X'04'             * DISP=(,DELETE)\nDALNDISP_KEEP    EQU X'08'             * DISP=(,KEEP)\n*\nDALCDISP_UNCATLG EQU X'01'             * DISP=(,,UNCATLG)\nDALCDISP_CATLG   EQU X'02'             * DISP=(,,CATLG)\nDALCDISP_DELETE  EQU X'04'             * DISP=(,,DELETE)\nDALCDISP_KEEP    EQU X'08'             * DISP=(,,KEEP)\n*\nDALSPFRM_ALX    EQU X'02'              * Allow different areas of\n*                                      *  contiguous space\nDALSPFRM_MXIG   EQU X'04'              * Alloc max. contiguous\nDALSPFRM_CONTIG EQU X'08'              * Contiguous alloc required\n*\nDALLABEL_NL  EQU X'01'                 * No Label\nDALLABEL_SL  EQU X'02'                 * Standard Label\nDALLABEL_NSL EQU X'04'                 * Non-Standard Label\nDALLABEL_SUL EQU X'0A'                 * Standard & User Label\nDALLABEL_BLP EQU X'10'                 * Bypass Label Processing\nDALLABEL_LTM EQU X'21'                 * Check/bypass Leading Tape Mark\nDALLABEL_AL  EQU X'40'                 * ANSI Label\nDALLABEL_AUL EQU X'48'                 * ANSI & User Label\n*\nDALPASPR_YES EQU X'10'                 * Password protected dataset\nDALPASPR_NO  EQU X'30'                 * Unprotected dataset\n*\nDALINOUT_OUT EQU X'40'                 * Output-only\nDALINOUT_IN  EQU X'80'                 * Input-only\n*\nDALFCBAV_VERIFY EQU X'04'              * Verigication\nDALFCBAV_ALIGN  EQU X'08'              * Alignment\n*\nDALBURST_BURST EQU X'02'               * Burster-Trimmer Stacker\nDALBURST_CONT  EQU X'04'               * Continuous Form Stacking\n*\nDALMTRC_1ST EQU X'00'                  * First char arrangement table\nDALMTRC_2ND EQU X'01'                  * Second table\nDALMTRC_3ND EQU X'02'                  * Third table\nDALMTRC_4ND EQU X'03'                  * Fourth table\n*\nDALRECO_KSDS EQU X'80'                 * VSAM KSDS\nDALRECO_ESDS EQU X'40'                 * VSAM ESDS\nDALRECO_RRDS EQU X'20'                 * VSAM RRDS\nDALRECO_LDS  EQU X'10'                 * VSAM LDS\n*\nDALAVGR_U EQU X'80'                    * Allocate in units of 1 record\nDALAVGR_K EQU X'40'                    * Allocate per 1,000 records\nDALAVGR_M EQU X'20'                    * Allocate per 1,000,000 records\n*\nDALDSNT_PDSE EQU X'80'                 * PDSE dataset\nDALDSNT_PDS  EQU X'40'                 * PDS dataset\nDALDSNT_PIPE EQU X'20'                 * PIPE dataset\nDALDSNT_HFS  EQU X'10'                 * HFS dataset\n*\nDALSPIN_IMMED EQU X'80'                * Print on deallocation\nDALSPIN_EOJ   EQU X'40'                * Print at end-of-job\n*\nDALPOPT_OSYNC     EQU X'00000100'      * HFS data set open options\nDALPOPT_OCREAT    EQU X'00000080'      *\nDALPOPT_OEXCL     EQU X'00000040'      *\nDALPOPT_ONOCTTY   EQU X'00000020'      *\nDALPOPT_OTRUNC    EQU X'00000010'      *\nDALPOPT_OAPPEND   EQU X'00000008'      *\nDALPOPT_ONONBLOCK EQU X'00000004'      *\nDALPOPT_ORDWR     EQU X'00000003'      *\nDALPOPT_ORDONLY   EQU X'00000002'      *\nDALPOPT_OWRONLY   EQU X'00000001'      *\n*\nDALPMDE_SISUID EQU X'00000800'         * HFS data set access attributes\nDALPMDE_SISGID EQU X'00000400'         *\nDALPMDE_SIRUSR EQU X'00000100'         *\nDALPMDE_SIWUSR EQU X'00000080'         *\nDALPMDE_SIXUSR EQU X'00000040'         *\nDALPMDE_SIRWXU EQU X'000001C0'         *\nDALPMDE_SIRGRP EQU X'00000020'         *\nDALPMDE_SIWGRP EQU X'00000010'         *\nDALPMDE_SIXGRP EQU X'00000008'         *\nDALPMDE_SIRWXG EQU X'00000038'         *\nDALPMDE_SIROTH EQU X'00000004'         *\nDALPMDE_SIWOTH EQU X'00000002'         *\nDALPMDE_SIXOTH EQU X'00000001'         *\nDALPMDE_SIRWXO EQU X'00000007'         *\n*\nDALPNDS_DELETE EQU X'04'               * HFS normal disp: DELETE\nDALPNDS_KEEP   EQU X'08'               * HFS normal disp: KEEP\n*\nDALPCDS_DELETE EQU X'04'               * HFS cond.  disp: DELETE\nDALPCDS_KEEP   EQU X'08'               * HFS cond.  disp: KEEP\n*\nDALRLS_NRI EQU X'80'                   * No Read Integrity\nDALRLS_CR  EQU X'40'                   * Consistent Read\n*\nDALFDAT_BIN EQU X'80'                  * Binary HFS file\nDALFDAT_TXT EQU X'40'                  * Text HFS file\n*\nDALBFALN_F EQU X'01'                   * Fullword alignment\nDALBFALN_D EQU X'02'                   * Doubleword alignment\n*\nDALBFTEK_D EQU X'80'                   * Dynamic buffering\nDALBFTEK_E EQU X'10'                   * Exchange buffering\nDALBFTEK_R EQU X'20'                   * Record buffering\nDALBFTEK_S EQU X'40'                   * Simple buffering\nDALBFTEK_A EQU X'60'                   * Record Area buffering\n*\nDALBUFOF_L EQU X'80'                   * Block prefix is 4 bytes and\n*                                      *  contains block length\n*\nDALCODE_T EQU X'02'                    * Teletype 5-track\nDALCODE_A EQU X'04'                    * USASCII 8-track\nDALCODE_C EQU X'08'                    * National Cash register 8-track\nDALCODE_B EQU X'10'                    * Burroughs 7-track\nDALCODE_F EQU X'20'                    * Friden 8-track\nDALCODE_I EQU X'40'                    * IBM BCD 8-track\nDALCODE_N EQU X'80'                    * No conversion\n*\nDALCPRI_S EQU X'01'                    * Send priority\nDALCPRI_E EQU X'02'                    * Equal priority\nDALCPRI_R EQU X'04'                    * Receiving priority\n*\nDALDEN_0 EQU X'03'                     * 200 bpi 7-track\nDALDEN_1 EQU X'43'                     * 556 bpi 7-track\nDALDEN_2 EQU X'83'                     * 800 bpi 7- or 9-track\nDALDEN_3 EQU X'C3'                     * 1600 bpi 9-track\nDALDEN_4 EQU X'D3'                     * 6250 bpi 9-track\n*\nDALDSORG_TR   EQU X'0004'              * TCAM 3705\nDALDSORG_VSAM EQU X'0008'              * VSAM\nDALDSORG_TQ   EQU X'0020'              * TCAM message queue\nDALDSORG_TX   EQU X'0040'              * TCAM line group\nDALDSORG_GS   EQU X'0080'              * Graphics\nDALDSORG_PO   EQU X'0200'              * Partitioned\nDALDSORG_POU  EQU X'0300'              * Partitioned Unmovable\nDALDSORG_MQ   EQU X'0400'              * Government of telecom msg xfer\nDALDSORG_CQ   EQU X'0800'              * Direct Access Message Queue\nDALDSORG_CX   EQU X'1000'              * Communication line group\nDALDSORG_DA   EQU X'2000'              * Direct Access\nDALDSORG_DAU  EQU X'2100'              * Direct Access Unmovable\nDALDSORG_PS   EQU X'4000'              * Physical Sequential\nDALDSORG_PSU  EQU X'4100'              * Physical Sequential Unmovable\n*\nDALEROPT_T   EQU X'10'                 * Online BSAM testing\nDALEROPT_ABE EQU X'20'                 * Abend\nDALEROPT_SKP EQU X'40'                 * Skip block\nDALEROPT_ACC EQU X'80'                 * Accept block\n*\nDALLRECL_X EQU X'8000'                 * Variable Spanned records,\n*                                      *  longer than 32,756 bytes\n*\nDALMODE_E  EQU X'40'                   * EBCDIC mode\nDALMODE_ER EQU X'50'                   * EBCDIC read col.eliminate mode\nDALMODE_EO EQU X'60'                   * EBCDIC optical mark read mode\nDALMODE_C  EQU X'80'                   * Card image mode\nDALMODE_CR EQU X'90'                   * Card read col. eliminate mode\nDALMODE_CO EQU X'A0'                   * Card optical mark read mode\n*\n* Add required OPTCD-values\nDALOPTCD_R EQU X'01'                   * Relative block addressing\nDALOPTCD_J EQU X'01'                   * Char. arrangement tables\nDALOPTCD_T EQU X'02'                   * User Totalling facility\nDALOPTCD_Z EQU X'04'                   * Reduced tape error recovery\n*                                      *  or direct DASD search\nDALOPTCD_A EQU X'08'                   * Direct addressing\nDALOPTCD_Q EQU X'08'                   * Translate ASCII-EBCDIC\nDALOPTCD_F EQU X'10'                   * Feedback\nDALOPTCD_H EQU X'10'                   * Hopper empty exit\nDALOPTCD_O EQU X'10'                   * Online corr.for optical reader\nDALOPTCD_C EQU X'20'                   * Chained scheduling or\n*                                      *  TCAM segement identification\nDALOPTCD_E EQU X'20'                   * Extended search\nDALOPTCD_B EQU X'40'                   * Disregard EOF for tape\nDALOPTCD_U EQU X'40'                   * Allow invalild character or\n*                                      *  handle TCAM workunit as MSG\nDALOPTCD_W EQU X'80'                   * Write validity check or\n*                                      *  put TCAM msg src in work area\n*\nDALPCIR_R EQU X'02'                    * PCI & no new buffer\nDALPCIR_N EQU X'08'                    * No PCI\nDALPCIR_A EQU X'20'                    * PCI & new buffer\nDALPCIR_X EQU X'80'                    * PCI & new buffer, 1st buffer\n*                                      *  remains allocated\n*\nDALPCIS_R EQU X'01'                    * PCI & no new buffer\nDALPCIS_N EQU X'04'                    * No PCI\nDALPCIS_A EQU X'10'                    * PCI & new buffer\nDALPCIS_X EQU X'40'                    * PCI & new buffer, 1st buffer\n*                                      *  remains allocated\n*\nDALPRTSP_0 EQU X'01'                   * No spacing\nDALPRTSP_1 EQU X'09'                   * 1-line spacing\nDALPRTSP_2 EQU X'11'                   * 2-line spacing\nDALPRTSP_3 EQU X'19'                   * 3-line spacing\n*\n* Add required RECFM-values\nDALRECFM_M EQU X'02'                   * Machine code printer control\nDALRECFM_R EQU X'02'                   * Complete QTAM record\nDALRECFM_A EQU X'04'                   * ASA printer control\nDALRECFM_G EQU X'04'                   * Complete QTAM message\nDALRECFM_S EQU X'08'                   * Standard fixed records or\n*                                      *  spanned variable records or\n*                                      *  segment of QTAM message\nDALRECFM_B EQU X'10'                   * Blocked\nDALRECFM_D EQU X'20'                   * Variable ASCII\nDALRECFM_T EQU X'20'                   * Track overflow\nDALRECFM_V EQU X'40'                   * Variable records\nDALRECFM_F EQU X'80'                   * Fixed records\nDALRECFM_U EQU X'C0'                   * Undiefined\n*\nDALSTACK_1 EQU X'01'                   * Bin 1\nDALSTACK_2 EQU X'02'                   * Bin 2\n*\nDALTRTCH_NOCOMPACT EQU X'04'           * Non-compaction mode\nDALTRTCH_COMPACT   EQU X'08'           * Compaction mode\nDALTRTCH_C         EQU X'13'           * Data conversion\nDALTRTCH_E         EQU X'23'           * Even parity\nDALTRTCH_ET        EQU X'2B'           * Even parity + BCD/EBCDIC xlate\nDALTRTCH_T         EQU X'3B'           * BCD/EBCDIC translation\n*\nDALFUNC_W     EQU X'10'                * Interpret codes as follows:\nDALFUNC_WT    EQU X'12'                * D=data protection for punch\nDALFUNC_WX    EQU X'14'                *        data set\nDALFUNC_WXT   EQU X'16'                * I=interpret punch data set\nDALFUNC_P     EQU X'20'                * P=punch\nDALFUNC_PW    EQU X'30'                * R=read\nDALFUNC_PWX   EQU X'34'                * T=two-line printer\nDALFUNC_PWXT  EQU X'36'                * W=print\nDALFUNC_R     EQU X'40'                * X=printer\nDALFUNC_RW    EQU X'50'                *\nDALFUNC_RWT   EQU X'52'                *\nDALFUNC_RWX   EQU X'54'                *\nDALFUNC_RWXT  EQU X'56'                *\nDALFUNC_RP    EQU X'60'                *\nDALFUNC_RPD   EQU X'68'                *\nDALFUNC_RPW   EQU X'70'                *\nDALFUNC_RPWX  EQU X'74'                *\nDALFUNC_RPWXT EQU X'76'                *\nDALFUNC_RPWD  EQU X'78'                *\nDALFUNC_I     EQU X'80'                *\n*\nDALRTORG_UNK  EQU X'0000'              * Could not determine DSORG\nDALRTORG_TR   EQU X'0004'              * TCAM 3705\nDALRTORG_VSAM EQU X'0008'              * VSAM\nDALRTORG_TQ   EQU X'0020'              * TCAM message queue\nDALRTORG_TX   EQU X'0040'              * TCAM line group\nDALRTORG_GS   EQU X'0080'              * Graphics\nDALRTORG_PO   EQU X'0200'              * Partitioned\nDALRTORG_POU  EQU X'0300'              * Partitioned Unmovable\nDALRTORG_MQ   EQU X'0400'              * Government of telecom msg xfer\nDALRTORG_CQ   EQU X'0800'              * Direct Access Message Queue\nDALRTORG_CX   EQU X'1000'              * Communication line group\nDALRTORG_DA   EQU X'2000'              * Direct Access\nDALRTORG_DAU  EQU X'2100'              * Direct Access Unmovable\nDALRTORG_PS   EQU X'4000'              * Physical Sequential\nDALRTORG_PSU  EQU X'4100'              * Physical Sequential Unmovable\nDALRTORG_IS   EQU X'8000'              * Indexed Sequential\nDALRTORG_ISU  EQU X'8100'              * Indexed Sequential Unmovable\n*\nDALINCHG_CST     EQU X'00'             * Cartridge System Tape (any)\nDALINCHG_CST18   EQU X'00'             * Cartridge System Tape 18-track\nDALINCHG_CST36   EQU X'00'             * Cartridge System Tape 36-track\nDALINCHG_ECCST36 EQU X'00'             * Enhanced Capacity CST 36-track\nDALINCHG_HPCT128 EQU X'00'             * High Performance Cartridge\n*                                      *  Tape 128-track\n*\nDUNOVDSP_UNCATLG EQU X'01'             * Uncatalog\nDUNOVDSP_CATLG   EQU X'02'             * Catalog\nDUNOVDSP_DELETE  EQU X'04'             * Delete\nDUNOVDSP_KEEP    EQU X'08'             * Keep\n*\nDUNSPIN_IMMED EQU X'80'                * Print on deallocation\nDUNSPIN_EOJ   EQU X'40'                * Print at end-of-job\n*\nDUNOVPDS_DELETE EQU X'04'              * Delete\nDUNOVPDS_KEEP   EQU X'08'              * Keep\n*\nDDNRTDUM_YES EQU X'80'                 * Dataset is a Dummy dataset\nDDNRTDUM_NO  EQU X'00'                 * Dataset is not a Dummy dataset\n*\nDINRTSTA_OLD EQU X'01'                 * OLD\nDINRTSTA_MOD EQU X'02'                 * MOD\nDINRTSTA_NEW EQU X'04'                 * NEW\nDINRTSTA_SHR EQU X'08'                 * SHR\n*\nDINRTNDP_UNCATLG EQU X'01'             * Uncatalog\nDINRTNDP_CATLG   EQU X'02'             * Catalog\nDINRTNDP_DELETE  EQU X'04'             * Delete\nDINRTNDP_KEEP    EQU X'08'             * Keep\nDINRTNDP_PASS    EQU X'10'             * Pass\n*\nDINRTCDP_UNDEF   EQU X'00'             * Undefined\nDINRTCDP_UNCATLG EQU X'01'             * Uncatalog\nDINRTCDP_CATLG   EQU X'02'             * Catalog\nDINRTCDP_DELETE  EQU X'04'             * Delete\nDINRTCDP_KEEP    EQU X'08'             * Keep\nDINRTCDP_PASS    EQU X'10'             * Pass\n*\nDINRTORG_UNK  EQU X'0000'              * Could not determine DSORG\nDINRTORG_TR   EQU X'0004'              * TCAM 3705\nDINRTORG_VSAM EQU X'0008'              * VSAM\nDINRTORG_TQ   EQU X'0020'              * TCAM message queue\nDINRTORG_TX   EQU X'0040'              * TCAM line group\nDINRTORG_GS   EQU X'0080'              * Graphics\nDINRTORG_PO   EQU X'0200'              * Partitioned\nDINRTORG_POU  EQU X'0300'              * Partitioned Unmovable\nDINRTORG_MQ   EQU X'0400'              * Government of telecom msg xfer\nDINRTORG_CQ   EQU X'0800'              * Direct Access Message Queue\nDINRTORG_CX   EQU X'1000'              * Communication line group\nDINRTORG_DA   EQU X'2000'              * Direct Access\nDINRTORG_DAU  EQU X'2100'              * Direct Access Unmovable\nDINRTORG_PS   EQU X'4000'              * Physical Sequential\nDINRTORG_PSU  EQU X'4100'              * Physical Sequential Unmovable\nDINRTORG_IS   EQU X'8000'              * Indexed Sequential\nDINRTORG_ISU  EQU X'8100'              * Indexed Sequential Unmovable\n*\nDINRTATT_PCON  EQU X'80'               * Permanently concatenated\nDINRTATT_INUSE EQU X'40'               * In use\nDINRTATT_PALL  EQU X'20'               * Permanently allocated\nDINRTATT_CONV  EQU X'10'               * Convertible\nDINRTATT_DYN   EQU X'08'               * Dynamically allocated\n*\nDINRTLST_LAST  EQU X'80'               * Last relative entry\nDINRTLST_NLAST EQU X'00'               * Not last relative entry\n*\nDINRTTYP_DUMMY EQU X'80'               * Dummy data set\nDINRTTYP_TERM  EQU X'40'               * Terminal data set\nDINRTTYP_IN    EQU X'20'               * SYSIN\nDINRTTYP_OUT   EQU X'10'               * SYSOUT\nDINRTTYP_OTHER EQU X'00'               * Other\n*\nDINRRECO_KSDS EQU X'80'                * KSDS\nDINRRECO_ESDS EQU X'40'                * ESDS\nDINRRECO_RRDS EQU X'20'                * RRDS\nDINRRECO_LDS  EQU X'10'                * LDS\n*\nDINRAVGR_U EQU X'80'                   * In record units\nDINRAVGR_K EQU X'40'                   * In units of 1,000 records\nDINRAVGR_M EQU X'20'                   * In units of 1,000,000 records\n*\nDINRDSNT_PDSE EQU X'80'                * PDSE data set\nDINRDSNT_PDS  EQU X'40'                * PDS data set\nDINRDSNT_PIPE EQU X'20'                * PIPE data set\nDINRDSNT_HFS  EQU X'10'                * HFS data set\n*\nDINSPIN_IMMED EQU X'80'                * Print on deallocation\nDINSPIN_EOJ   EQU X'40'                * Print at end-of-job\n*\nDINPOPT_OCREAT    EQU X'00000080'      * HFS data set open options\nDINPOPT_OEXCL     EQU X'00000040'      *\nDINPOPT_ONOCTTY   EQU X'00000020'      *\nDINPOPT_OTRUNC    EQU X'00000010'      *\nDINPOPT_OAPPEND   EQU X'00000008'      *\nDINPOPT_ONONBLOCK EQU X'00000004'      *\nDINPOPT_ORDWR     EQU X'00000003'      *\nDINPOPT_ORDONLY   EQU X'00000002'      *\nDINPOPT_OWRONLY   EQU X'00000001'      *\n*\nDINPMDE_SISUID EQU X'00000800'         * HFS data set access attributes\nDINPMDE_SISGID EQU X'00000400'         *\nDINPMDE_SIRUSR EQU X'00000100'         *\nDINPMDE_SIWUSR EQU X'00000080'         *\nDINPMDE_SIXUSR EQU X'00000040'         *\nDINPMDE_SIRWXU EQU X'000001C0'         *\nDINPMDE_SIRGRP EQU X'00000020'         *\nDINPMDE_SIWGRP EQU X'00000010'         *\nDINPMDE_SIXGRP EQU X'00000008'         *\nDINPMDE_SIRWXG EQU X'00000038'         *\nDINPMDE_SIROTH EQU X'00000004'         *\nDINPMDE_SIWOTH EQU X'00000002'         *\nDINPMDE_SIXOTH EQU X'00000001'         *\nDINPMDE_SIRWXO EQU X'00000007'         *\n*\nDINPNDS_DELETE EQU X'04'               * HFS normal disp: DELETE\nDINPNDS_KEEP   EQU X'08'               * HFS normal disp: KEEP\n*\nDINPCDS_DELETE EQU X'04'               * HFS cond.  disp: DELETE\nDINPCDS_KEEP   EQU X'08'               * HFS cond.  disp: KEEP\n*\nDINFDAT_BIN EQU X'80'                  * Binary HFS file\nDINFDAT_TXT EQU X'40'                  * Text HFS file\n*\n.*\n.* EMFUNCT - Function indicator flags\nEMPUTLIN EQUOVR ,,b,EMFUNCT\nEMWTP    EQUOVR ,,b,EMFUNCT\nEMRETURN EQUOVR ,,b,EMFUNCT\nEMKEEP   EQUOVR ,,b,EMFUNCT\n.*\n         MNOTE *,'Including IEFZB476 mapping macro'\n         IEFZB476 EMDSEC1=YES,         * Generate DSECT statement 1    *\n               EMDSEC2=YES             * Generate DSECT statement 2\n         EQUOVR *END\n*\nEMDSECT1 DSECT ,                       *\n         ORG   ,                       *\nEMDSECT1_LEN EQU *-EMDSECT1            *\n*\nEMDSECT2 DSECT ,                       *\n         ORG   ,                       *\nEMDSECT2_LEN EQU *-EMDSECT2            *\n*\nEMDSECT3 DSECT ,                       *\n         ORG   ,                       *\nEMDSECT3_LEN EQU *-EMDSECT3            *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPTAXE  0100-20096-20096-0111-00123-00123-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the TSO Terminal Attention eXit Element\n.*\n&LABEL   MAPTAXE &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPTAXE                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPTAXE        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'TAXE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPTAXE).MEND\n&BXA_MAC_MAPTAXE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_TAXE\n&BXA_CB_TAXE SETC 'TAXE'\n.*\n.* TAXEEXIT - PTR TO USER ATTENTION EXIT RTN\nTAXEEXM  EQUOVR ,,b,TAXEEXIT\n.*\n.* TAXESTAT - STATUS OF PROGRAM ISSUING STAX\nTAXEFKEY EQUOVR ,,b,TAXESTAT\nTAXEFMOD EQUOVR ,,b,TAXESTAT\nTAXEFREQ EQUOVR ,,b,TAXESTAT\nTAXERESM EQUOVR ,,b,TAXESTAT\nTAXESCHD EQUOVR ,,b,TAXESTAT\nTAXEATTN EQUOVR ,,b,TAXESTAT\nTAXECLST EQUOVR ,,b,TAXESTAT\nTAXEIGNI EQUOVR ,,b,TAXESTAT\n.*\n.* TAXEST2 - SECOND STATUS BYTE\nTAXEIGNC EQUOVR ,,b,TAXEST2\nTAXETPLV EQUOVR ,,b,TAXEST2\n.*\n         MNOTE *,'Including IKJTAXE mapping macro'\n         IKJTAXE ,\n         EQUOVR *END\n*\nTAXE     DSECT ,                       * Resume TAXE DSECT\n         ORG   ,\nTAXE_LEN EQU   *-TAXE                  * Length of TAXE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPTCB   0100-20096-20096-0111-00394-00394-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Task Control Block\n.*\n&LABEL   MAPTCB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPTCB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPTCB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'TCB').EMBED\n         AIF   ('&CB' EQ 'TCBFIX').EMBED\n         AIF   ('&CB' EQ 'TCBXTNT2').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPTCB).MEND\n&BXA_MAC_MAPTCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_TCB\n         GBLC  &BXA_CB_TCBFIX\n         GBLC  &BXA_CB_TCBXTNT2\n&BXA_CB_TCB SETC 'TCB'\n&BXA_CB_TCBFIX SETC 'TCB'\n&BXA_CB_TCBXTNT2 SETC 'TCB'\n.*\n.* TCBPMASK - SPIE BITS\n.* TCBPM    EQUOVR ,,b,TCBPMASK        * Last seen in OS/390 V2R6\n.*\n.* TCBCMPF - INDICATOR FLAGS\nTCBCREQ  EQUOVR ,,b,TCBCMPF\nTCBCSTEP EQUOVR ,,b,TCBCMPF\nTCBCPP   EQUOVR ,,b,TCBCMPF\nTCBDMPO  EQUOVR ,,b,TCBCMPF\nTCBSTCC  EQUOVR ,,b,TCBCMPF\nTCBNOCC  EQUOVR ,,b,TCBCMPF\nTCBCDBL  EQUOVR ,,b,TCBCMPF\nTCBCASID EQUOVR ,,b,TCBCMPF\nTCBCWTO  EQUOVR ,,b,TCBCMPF\nTCBRV316 EQUOVR ,,b,TCBCMPF\nTCBCIND  EQUOVR ,,b,TCBCMPF\nTCBCMSG  EQUOVR ,,b,TCBCMPF\n.*\n.* TCBABF - FLAG BYTE\nTCBMOD91 EQUOVR ,,b,TCBABF\nTCBNOCHK EQUOVR ,,b,TCBABF\nTCBGRPH  EQUOVR ,,b,TCBABF\nTCBTCPP  EQUOVR ,,b,TCBABF\nTCBTCP   EQUOVR ,,b,TCBABF\nTCBOLTEP EQUOVR ,,b,TCBABF\n.*\n.* TCBPKF - STORAGE PROTECTION KEY FOR THIS TASK.\nTCBFLAG  EQUOVR ,,b,TCBPKF\nTCBZERO  EQUOVR ,,b,TCBPKF\n.*\n.* TCBFLGS1 - FIRST TCB FLAG BYTE\nTCBFA    EQUOVR ,,b,TCBFLGS1\nTCBFE    EQUOVR ,,b,TCBFLGS1\nTCBFERA  EQUOVR ,,b,TCBFLGS1\nTCBNONPR EQUOVR ,,b,TCBFLGS1\nTCBPDUMP EQUOVR ,,b,TCBFLGS1\nTCBFT    EQUOVR ,,b,TCBFLGS1\nTCBFS    EQUOVR ,,b,TCBFLGS1\nTCBFX    EQUOVR ,,b,TCBFLGS1\n.*\n.* TCBFLGS2 - SECOND FLAG BYTE\nTCBFOINP EQUOVR ,,b,TCBFLGS2\nTCBFSTI  EQUOVR ,,b,TCBFLGS2\nTCBFABOP EQUOVR ,,b,TCBFLGS2\nTCBFSMC  EQUOVR ,,b,TCBFLGS2\nTCBFJMC  EQUOVR ,,b,TCBFLGS2\nTCBFDSOP EQUOVR ,,b,TCBFLGS2\nTCBFETXR EQUOVR ,,b,TCBFLGS2\nTCBFTS   EQUOVR ,,b,TCBFLGS2\n.*\n.* TCBFLGS3 - THIRD FLAG BYTE.\nTCBFSM   EQUOVR ,,b,TCBFLGS3\nTCBRT1S  EQUOVR ,,b,TCBFLGS3\nTCBABTRM EQUOVR ,,b,TCBFLGS3\nTCBFXSET EQUOVR ,,b,TCBFLGS3\nTCBENQRM EQUOVR ,,b,TCBFLGS3\nTCBDWSTA EQUOVR ,,b,TCBFLGS3\n.*\n.* TCBFLGS4 - NONDISPATCHABILITY FLAGS\nTCBNDUMP EQUOVR ,,b,TCBFLGS4\nTCBSER   EQUOVR ,,b,TCBFLGS4\nTCBRQENA EQUOVR ,,b,TCBFLGS4\nTCBHNDSP EQUOVR ,,b,TCBFLGS4\nTCBUXNDV EQUOVR ,,b,TCBFLGS4\nTCBRBWF  EQUOVR ,,b,TCBFLGS4\nTCBONDSP EQUOVR ,,b,TCBFLGS4\n.*\n.* TCBFLGS5 - MORE NONDISPATCHABILITY FLAGS.\nTCBFC    EQUOVR ,,b,TCBFLGS5\nTCBABWF  EQUOVR ,,b,TCBFLGS5\nTCBUXNDF EQUOVR ,,b,TCBFLGS5\nTCBPAGE  EQUOVR ,,b,TCBFLGS5\nTCBANDSP EQUOVR ,,b,TCBFLGS5\nTCBSYS   EQUOVR ,,b,TCBFLGS5\nTCBSTP   EQUOVR ,,b,TCBFLGS5\nTCBFCD1  EQUOVR ,,b,TCBFLGS5\nTCBPNDSP EQUOVR ,,b,TCBFLGS5\n.*\n.* TCBPURGE - HIGH ORDER BYTE\nTCBJPQF  EQUOVR ,,b,TCBPURGE\n.*\n.* TCBTME - ADDRESS OF THE TIMER QUEUE ELEMENT (TQE)\nTCBTQET  EQUOVR ,,b,TCBTME\n.*\n.* TCBTSFLG - TIME SHARING FLAGS\nTCBTSTSK EQUOVR ,,b,TCBTSFLG\nTCBSTPPR EQUOVR ,,b,TCBTSFLG\nTCBATT   EQUOVR ,,b,TCBTSFLG\nTCBTIOTG EQUOVR ,,b,TCBTSFLG\nTCBSMCP  EQUOVR ,,b,TCBTSFLG\nTCBDYDSP EQUOVR ,,b,TCBTSFLG\nTCBCPUBN EQUOVR ,,b,TCBTSFLG\n.*\n.* TCBNSTAE - FLAGS INTERNAL TO STAE ROUTINE\nTCBSTABE EQUOVR ,,b,TCBNSTAE\nTCBQUIES EQUOVR ,,b,TCBNSTAE\nTCB33E   EQUOVR ,,b,TCBNSTAE\nTCBPPSUP EQUOVR ,,b,TCBNSTAE\nTCBHALT  EQUOVR ,,b,TCBNSTAE\nTCBSYNCH EQUOVR ,,b,TCBNSTAE\nTCBSTCUR EQUOVR ,,b,TCBNSTAE\n.*\n.* TCBTCTGF - FLAG BYTE FOR TIMING CONTROL TABLE\nTCBSMFGF EQUOVR ,,b,TCBTCTGF\n.*\n.* TCBNDSP1 - BYTE 1\nTCBDARTN EQUOVR ,,b,TCBNDSP1\nTNONDISP EQUOVR ,,b,TCBNDSP1\nTCBDARPN EQUOVR ,,b,TCBNDSP1\nPNONDISP EQUOVR ,,b,TCBNDSP1\nTCBRSTND EQUOVR ,,b,TCBNDSP1\nTCBRSPND EQUOVR ,,b,TCBNDSP1\nTCBDDRND EQUOVR ,,b,TCBNDSP1\nTCBTPSP  EQUOVR ,,b,TCBNDSP1\nTCBPIEND EQUOVR ,,b,TCBNDSP1\nTCBABTIN EQUOVR ,,b,TCBNDSP1\n.*\n.* TCBNDSP2 - BYTE 2\nTCBABD   EQUOVR ,,b,TCBNDSP2\nTCBSTPP  EQUOVR ,,b,TCBNDSP2\nTCBNDSVC EQUOVR ,,b,TCBNDSP2\nTCBNDTS  EQUOVR ,,b,TCBNDSP2\nTCBIWAIT EQUOVR ,,b,TCBNDSP2\nTCBOWAIT EQUOVR ,,b,TCBNDSP2\nTCBDSS   EQUOVR ,,b,TCBNDSP2\nTCBABE   EQUOVR ,,b,TCBNDSP2\n.*\n.* TCBNDSP3 - BYTE 3\nTCBLJSND EQUOVR ,,b,TCBNDSP3\nTCBNDNYI EQUOVR ,,b,TCBNDSP3\nTCBSRBND EQUOVR ,,b,TCBNDSP3\nTCBSLPER EQUOVR ,,b,TCBNDSP3\nTCBS3MR  EQUOVR ,,b,TCBNDSP3\nTCBAREQ  EQUOVR ,,b,TCBNDSP3\nTCBNDSMF EQUOVR ,,b,TCBNDSP3\nTCBNDINT EQUOVR ,,b,TCBNDSP3\n.*\n.* TCBRECDE - ABEND RECURSION BYTE\nTCBREC   EQUOVR ,,b,TCBRECDE\nTCBOPEN  EQUOVR ,,v,TCBRECDE\nTCBCLOSD EQUOVR ,,v,TCBRECDE\nTCBCLOSE EQUOVR ,,v,TCBRECDE\nTCBCLOSF EQUOVR ,,v,TCBRECDE\nTCBGREC  EQUOVR ,,v,TCBRECDE\nTCBADUMP EQUOVR ,,v,TCBRECDE\nTCBPTAXE EQUOVR ,,v,TCBRECDE\nTCBMESG  EQUOVR ,,v,TCBRECDE\nTCBDYNAM EQUOVR ,,v,TCBRECDE\nTCBDAMSG EQUOVR ,,v,TCBRECDE\nTCBQTIP  EQUOVR ,,v,TCBRECDE\nTCBTCAMP EQUOVR ,,v,TCBRECDE\nTCBINDRC EQUOVR ,,v,TCBRECDE\nTCBSAVCD EQUOVR ,,v,TCBRECDE\nTCBTYP1W EQUOVR ,,v,TCBRECDE\nTCBWTPSE EQUOVR ,,v,TCBRECDE\nTCBVTAM1 EQUOVR ,,v,TCBRECDE\nTCBVTAM2 EQUOVR ,,v,TCBRECDE\nTCBVTAM3 EQUOVR ,,v,TCBRECDE\nTCBVTAM4 EQUOVR ,,v,TCBRECDE\nTCBNOSTA EQUOVR ,,v,TCBRECDE\nTCBSTRET EQUOVR ,,v,TCBRECDE\nTCBCONVR EQUOVR ,,v,TCBRECDE\nTCBDARET EQUOVR ,,v,TCBRECDE\nTCBTYP1R EQUOVR ,,v,TCBRECDE\nTCBNEWRB EQUOVR ,,v,TCBRECDE\nTCBMCCNS EQUOVR ,,v,TCBRECDE\n.*\n.* TCBFLGS6 - TASK-RELATED FLAGS\nTCBRV    EQUOVR ,,b,TCBFLGS6\nTCBPIE17 EQUOVR ,,b,TCBFLGS6\nTCBCPU   EQUOVR ,,b,TCBFLGS6\nTCBSPVLK EQUOVR ,,b,TCBFLGS6\nTCBMIGR  EQUOVR ,,b,TCBFLGS6\nTCBAPG   EQUOVR ,,b,TCBFLGS6\nTCBNTJS  EQUOVR ,,b,TCBFLGS6\n.*\n.* TCBFLGS7 - TASK-RELATED FLAGS\nTCBGPECB EQUOVR ,,b,TCBFLGS7\nTCBSVCSP EQUOVR ,,b,TCBFLGS7\nTCBSTACK EQUOVR ,,b,TCBFLGS7\nTCBSVCS  EQUOVR ,,b,TCBFLGS7\nTCBRSTSK EQUOVR ,,b,TCBFLGS7\nTCBADMP  EQUOVR ,,b,TCBFLGS7\nTCBGTOFM EQUOVR ,,b,TCBFLGS7\n.*\n.* TCBDAR - DAMAGE ASSESSMENT ROUTINE (DAR) FLAGS\nTCBDARP  EQUOVR ,,b,TCBDAR\nTCBDARS  EQUOVR ,,b,TCBDAR\nTCBDARD  EQUOVR ,,b,TCBDAR\nTCBDARC  EQUOVR ,,b,TCBDAR\nTCBDARMC EQUOVR ,,b,TCBDAR\nTCBDARO  EQUOVR ,,b,TCBDAR\nTCBDARWT EQUOVR ,,b,TCBDAR\nTCBDARMS EQUOVR ,,b,TCBDAR\nTCBEXSVC EQUOVR ,,b,TCBDAR\n.*\n.* TCBNSSP - NORMAL STACK SAVE AREA POINTER.\nTCBNSSQA EQUOVR ,,b,TCBNSSP\n.*\n.* TCBTID - TASK ID NUMBER\nTCBTID   DSOVR HL1\nTCBPAGID EQUOVR ,,v,TCBTID\nTCBSYERR EQUOVR ,,v,TCBTID\nTCBCOMM  EQUOVR ,,v,TCBTID\nTCBIORMS EQUOVR ,,v,TCBTID\nTCBMASTR EQUOVR ,,v,TCBTID\nTCBJES   EQUOVR ,,v,TCBTID\nTCBDSSID EQUOVR ,,v,TCBTID\nTCBLOGID EQUOVR ,,v,TCBTID\n.*\n.* TCBFLGS8 - GUPI FLAG BYTE FIELD\nTCBDYING EQUOVR ,,b,TCBFLGS8\n.*\n.* TCBXSCT1 - FLAG BYTE\nTCBACTIV EQUOVR ,,b,TCBXSCT1\nTCBS3A   EQUOVR ,,b,TCBXSCT1\nTCBLLREQ EQUOVR ,,b,TCBXSCT1\nTCBTDORM EQUOVR ,,b,TCBXSCT1\n.*\n.* TCBXSCT2 - FLAG BYTE\nTCBCMLF  EQUOVR ,,b,TCBXSCT2\nTCBLLNEW EQUOVR ,,b,TCBXSCT2\n.*\n.* TCBESTRM - ESTAE TERM OPTIONS\nTCBETERM EQUOVR ,,b,TCBESTRM\nTCBSTAFX EQUOVR ,,b,TCBESTRM\n.*\n.* TCBFBYT1 - FLAG BYTE.\nTCBEOTFM EQUOVR ,,b,TCBFBYT1\nTCBRTM1E EQUOVR ,,b,TCBFBYT1\nTCBNDIOS EQUOVR ,,b,TCBFBYT1\nTCBPGNLY EQUOVR ,,b,TCBFBYT1\nTCBRTM2  EQUOVR ,,b,TCBFBYT1\nTCBEOT   EQUOVR ,,b,TCBFBYT1\nTCBSATTN EQUOVR ,,b,TCBFBYT1\nTCBLLH   EQUOVR ,,b,TCBFBYT1\n.*\n.* TCBFBYT2 - FLAG BYTE.\nTCBCNCB  EQUOVR ,,b,TCBFBYT2\nTCBFMW   EQUOVR ,,b,TCBFBYT2\nTCBFDW   EQUOVR ,,b,TCBFBYT2\nTCBFPRAP EQUOVR ,,b,TCBFBYT2\nTCBRT1NR EQUOVR ,,b,TCBFBYT2\nTCBECBNV EQUOVR ,,b,TCBFBYT2\nTCBSSPC  EQUOVR ,,b,TCBFBYT2\nTCBRTM1C EQUOVR ,,b,TCBFBYT2\n.*\n.* TCBFBYT3 - FLAG BYTE\nTCBEXP   EQUOVR ,,b,TCBFBYT3\nTCBNCTL  EQUOVR ,,b,TCBFBYT3\nTCBRTMDE EQUOVR ,,b,TCBFBYT3\n.*\n.* TCBFBYT4 - FLAG BYTE.\nTCBPMC   EQUOVR ,,b,TCBFBYT4\nTCBNOJLB EQUOVR ,,b,TCBFBYT4\n.*\n.* TCBRBYT1 - RTM Flag byte\nTCBPVICT EQUOVR ,,b,TCBRBYT1\nTCBPKING EQUOVR ,,b,TCBRBYT1\nTCBPCAND EQUOVR ,,b,TCBRBYT1\nTCBPTOP  EQUOVR ,,b,TCBRBYT1\n.*\n.* TCBLEVEL - LEVEL NUMBER OF TCB\nTCBVS02A EQUOVR ,,v,TCBLEVEL\nTCBVS02B EQUOVR ,,v,TCBLEVEL\nTCBVS03  EQUOVR ,,v,TCBLEVEL\nTCBVERS  EQUOVR ,,v,TCBLEVEL\n.*\n.* TCBTFLG - GTF FLAG BYTE\nTCBASYNC EQUOVR ,,b,TCBTFLG\nTCBERRTN EQUOVR ,,b,TCBTFLG\nTCBDSPIT EQUOVR ,,b,TCBTFLG\n.*\n.* TCBPERCP - POINTER TO A QUEUE OF SPIS.\nTCBRCVRY EQUOVR ,,b,TCBPERCP\n.*\n         MNOTE *,'Including IKJTCB mapping macro'\n         IKJTCB DSECT=YES,             * Generate TCB                  *\n               LIST=YES                * with unchanged PRINT option\n         EQUOVR *END\n         DSOVR *END\n*\nTCBFIX   DSECT ,                       * Reset to TCB DSECT\n         ORG\nTCBFIX_LEN EQU TCB-TCBFIX              * Length of TCB prefix\nTCB_LEN  EQU *-TCB                     * Length of TCB proper\n*\nTCBXTNT2 DSECT ,                       * Reset to TCB extension\n         ORG\nTCBXTNT2_LEN EQU *-TCBXTNT2            * Length of TCB extension\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPTCCW  0100-20096-20096-0111-00132-00132-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the EXCP Translation Control Block\n.*\n&LABEL   MAPTCCW &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPTCCW                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPTCCW        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'TCCW').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPTCCW).MEND\n&BXA_MAC_MAPTCCW SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_TCCW\n&BXA_CB_TCCW SETC 'TCCW'\n.*\n.* TCCWOPTN - CCW Translation option byte and TCCW error return codes\nTCCWXLAT EQUOVR ,,v,TCCWOPTN\nTCCWCSWX EQUOVR ,,v,TCCWOPTN\nTCCWUNFX EQUOVR ,,v,TCCWOPTN\nTCCWGTMN EQUOVR ,,v,TCCWOPTN\nTCCWSATR EQUOVR ,,v,TCCWOPTN\nTCCWPGER EQUOVR ,,v,TCCWOPTN\nTCCWTRER EQUOVR ,,v,TCCWOPTN\nTCCWIDAE EQUOVR ,,v,TCCWOPTN\nTCCWPRIV EQUOVR ,,v,TCCWOPTN\nTCCWERRC EQUOVR ,,v,TCCWOPTN\nTCCWVMER EQUOVR ,,v,TCCWOPTN\nTCCWVLER EQUOVR ,,v,TCCWOPTN\nTCCWERRF EQUOVR ,,v,TCCWOPTN\n.*\n.* TCCWMODB - Translator flag byte\nTCCWFCHN EQUOVR ,,b,TCCWMODB\nTCCWVLCK EQUOVR ,,b,TCCWMODB\nTCCWLBLK EQUOVR ,,b,TCCWMODB\nTCCWNVAL EQUOVR ,,b,TCCWMODB\n.* TCCWRSV5 EQUOVR ,,b,TCCWMODB        * Last seen in OS/390 V2R6\nTCCWIDAX EQUOVR ,,b,TCCWMODB           * First seen in z/OS V1R4\nTCCWPC10 EQUOVR ,,b,TCCWMODB\nTCCWPGCK EQUOVR ,,b,TCCWMODB\nTCCWVIDA EQUOVR ,,b,TCCWMODB\n.*\n         MNOTE *,'Including IECDTCCW mapping macro'\n         IECDTCCW ,\n         EQUOVR *END\n*\nTCCW     DSECT ,                       * Resume TCCW DSECT\n         ORG\nTCCW_LEN EQU   *-TCCW                  * Length of TCCW\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPTCT   0100-20096-20096-0111-00159-00159-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the SMF Timing Control Table\n.*\n&LABEL   MAPTCT &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPTCT                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPTCT         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'TCT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPTCT).MEND\n&BXA_MAC_MAPTCT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_TCT\n&BXA_CB_TCT SETC 'TCT'\n.*\n.* TCTSW - TCT SWITCHES\nTCTJSTI  EQUOVR ,,b,TCTSW\nTCTIEX   EQUOVR ,,b,TCTSW\nTCTISK30 EQUOVR ,,b,TCTSW\nTCTISK32 EQUOVR ,,b,TCTSW\nTCTIABD  EQUOVR ,,b,TCTSW\nTCTSTPRN EQUOVR ,,b,TCTSW\nTCTACTRT EQUOVR ,,b,TCTSW\nTCTDCOPN EQUOVR ,,b,TCTSW\n.*\n.* TCTMSCT - NUMBER OF TIMES I/O MEASUREMENTS TURNED OFF AT JOB START\nTCTMSOFF EQUOVR ,,b,TCTMSCT\n.*\n.* TCTEFLGS - ETCTIOT FLAGS\nTCTCOMP  EQUOVR ,,b,TCTEFLGS\n.*\n.* TCTTMRFL - PREVIOUS INTERVAL TIMER BIT FLAGS\nTCTCTF   EQUOVR ,,b,TCTTMRFL\nTCTCSF   EQUOVR ,,b,TCTTMRFL\nTCTVUF   EQUOVR ,,b,TCTTMRFL\nTCTVAF   EQUOVR ,,b,TCTTMRFL\nTCTISF   EQUOVR ,,b,TCTTMRFL\nTCTICF   EQUOVR ,,b,TCTTMRFL\nTCTIVF   EQUOVR ,,b,TCTTMRFL\nTCTIAF   EQUOVR ,,b,TCTTMRFL\n.*\nTCTIIF   EQUOVR ,,b,TCTTMRFL+1\nTCTHPF   EQUOVR ,,b,TCTTMRFL+1\nTCTRCF   EQUOVR ,,b,TCTTMRFL+1\nTCTASF   EQUOVR ,,b,TCTTMRFL+1\nTCTENF   EQUOVR ,,b,TCTTMRFL+1\nTCTDEF   EQUOVR ,,b,TCTTMRFL+1\n.*\n.* TCTFLAGS - TCT Flags\nTCTTCT2  EQUOVR ,,b,TCTFLAGS\n.*\n.* TCTFLGS - FLAG BYTE\nTCTDDIND EQUOVR ,,b,TCTFLGS\nTCTVAMDS EQUOVR ,,b,TCTFLGS\nTCTNOCNT EQUOVR ,,b,TCTFLGS\nTCTRSV22 EQUOVR ,,b,TCTFLGS\nTCTRSV23 EQUOVR ,,b,TCTFLGS\nTCTRSV24 EQUOVR ,,b,TCTFLGS\nTCTRSV25 EQUOVR ,,b,TCTFLGS\nTCTRSV26 EQUOVR ,,b,TCTFLGS\n.*\n.* TCTBLKSZ - BLOCK SIZE FOR THIS DD NAME\nTCTCBSZ  EQUOVR ,,b,TCTBLKSZ\n.*\n.* ETCTNEXT - NEXT TOKEN\nETCTIUSE EQUOVR ,,b,ETCTNEXT\n.*\n         MNOTE *,'Including IEFTCT mapping macro'\n         IEFTCT ,\n         EQUOVR *END\n*\nSMFTCT   DSECT ,                       * Resume TCT DSECT\nTCT      EQU   SMFTCT                  * Label for USINGs\n         ORG\nTCT_LEN  EQU   *-TCT                   * Length of TCT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPTIOT  0100-20096-20096-0111-00172-00172-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Task I/O Table\n.*\n&LABEL   MAPTIOT &DSECT=YES,           * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPTIOT                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPTIOT        * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'TIOENTRY').EMBED\n         AIF   ('&CB' EQ 'TIOTHDR').EMBED\n         AIF   ('&CB' EQ 'TIOTPOOL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPTIOT).MEND\n&BXA_MAC_MAPTIOT SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_TIOENTRY\n         GBLC  &BXA_CB_TIOTHDR\n         GBLC  &BXA_CB_TIOTPOOL\n&BXA_CB_TIOENTRY SETC 'TIOT'\n&BXA_CB_TIOTHDR SETC 'TIOT'\n&BXA_CB_TIOTPOOL SETC 'TIOT'\n.*\n.* TIOELNGH - LENGTH, IN BYTES, OF THIS ENTRY\nTIOELNGH DSOVR AL1\n.*\n.* TIOESTTA - STATUS BYTE A\nTIOSLTYP EQUOVR ,,b,TIOESTTA\nTIOSPLTP EQUOVR ,,b,TIOESTTA\nTIOSPLTS EQUOVR ,,b,TIOESTTA\nTIOSJBLB EQUOVR ,,b,TIOESTTA\nTIOSDADS EQUOVR ,,b,TIOESTTA\nTIOSLABL EQUOVR ,,b,TIOESTTA\nTIOSDSP1 EQUOVR ,,b,TIOESTTA\nTIOSDSP2 EQUOVR ,,b,TIOESTTA\n.*\n.* TIOELINK - DURING ALLOCATION\nTIOSYOUT EQUOVR ,,b,TIOELINK\nTIOTRV01 EQUOVR ,,b,TIOELINK\nTIOTTERM EQUOVR ,,b,TIOELINK\nTIOEDYNM EQUOVR ,,b,TIOELINK\nTIOEQNAM EQUOVR ,,b,TIOELINK\nTIOESYIN EQUOVR ,,b,TIOELINK\nTIOESYOT EQUOVR ,,b,TIOELINK\nTIOESSDS EQUOVR ,,b,TIOELINK\nTIOTREM  EQUOVR ,,b,TIOELINK\n.*\n.* TIOESTTC - STATUS BYTE C.\nTIOSDKCR EQUOVR ,,b,TIOESTTC\nTIOSDEFR EQUOVR ,,b,TIOESTTC\nTIOSAFFP EQUOVR ,,b,TIOESTTC\nTIOSAFFS EQUOVR ,,b,TIOESTTC\nTIOSVOLP EQUOVR ,,b,TIOESTTC\nTIOSVOLS EQUOVR ,,b,TIOESTTC\nTIOSBALP EQUOVR ,,b,TIOESTTC\nTIOSBALS EQUOVR ,,b,TIOESTTC\n.*\n.* TIOESTTB - STATUS BYTE B\nTIOSUSED EQUOVR ,,b,TIOESTTB\nTIOSREQD EQUOVR ,,b,TIOESTTB\nTIOSPVIO EQUOVR ,,b,TIOESTTB\nTIOSVLSR EQUOVR ,,b,TIOESTTB\nTIOSSETU EQUOVR ,,b,TIOESTTB\nTIOSMNTD EQUOVR ,,b,TIOESTTB\nTIOSUNLD EQUOVR ,,b,TIOESTTB\nTIOSVERF EQUOVR ,,b,TIOESTTB\n.*\n.* IEFTIOT1 does not generate a DSECT-statement\n         MNOTE *,'Including IEFTIOT1 mapping macro'\nTIOT     DSECT ,                       * Start of TIOT\n         IEFTIOT1 ,                    *\n         DSOVR  *END\n         EQUOVR *END\n*\n* Notes:\n* - TIOT DSECT contains several parts, that should have been coded as\n*   separate DSECTs. Alas IBM has chosen not to.\n* - TIOT header      : USING TIOT              24 bytes\n* - TIOT entry       : USING TIOENTRY          Length in first byte\n* - TIOT pool entry  : USING POOLSTAR          20 bytes\n* - Last TIOT entry is marked by 4 hex zeroes in the first 4 bytes,\n*   including the length byte\n* - Concatenated data sets have a ddname only in the first TIOT entry,\n*   all other entries contain blanks for their ddname\n* - Bit TIOSLTYP in TIOESTTA is on, when a TIOT entry has been freed\n*\n         ORG\nTIOT_LEN EQU   TIOENTRY-TIOT           * Length of TIOT\nTIOE_LEN EQU   POOLSTAR-TIOENTRY       * Length of TIOT entry\nTIOP_LEN EQU   *-POOLSTAR              * Length of TIOT pool entry\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPTQE   0100-20096-20096-0111-00133-00133-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Timer Queue Element\n.*\n&LABEL   MAPTQE &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPTQE                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPTQE         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'TQE').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPTQE).MEND\n&BXA_MAC_MAPTQE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_TQE\n&BXA_CB_TQE SETC 'TQE'\n.*\n.* TQEFLGS - TQE FLAG BYTE 1\nTQEOFF   EQUOVR ,,b,TQEFLGS\nTQETOD   EQUOVR ,,b,TQEFLGS\nTQEGMT   EQUOVR ,,b,TQEFLGS\nTQEWLIM  EQUOVR ,,b,TQEFLGS\nTQEINCOM EQUOVR ,,b,TQEFLGS\nTQEXITSP EQUOVR ,,b,TQEFLGS\nTQETYPE  EQUOVR ,,b,TQEFLGS\n.*\n.* TQEFLGS2 - TQE FLAG BYTE 2\nTQECOMP  EQUOVR ,,b,TQEFLGS2\nTQEUSER  EQUOVR ,,b,TQEFLGS2\nTQEETRSS EQUOVR ,,b,TQEFLGS2\nTQEDUM   EQUOVR ,,b,TQEFLGS2\nTQELM    EQUOVR ,,b,TQEFLGS2\nTQEOPT   EQUOVR ,,b,TQEFLGS2\nTQEMF1   EQUOVR ,,b,TQEFLGS2\nTQEMIDN  EQUOVR ,,b,TQEFLGS2\n.*\n.* TQEEXIT - ADDRESS OF USER EXIT RTN\nTQEXMODE EQUOVR ,,b,TQEEXIT\n.*\n.* TQEFLGS3 - TQE FLAG BYTE 3\nTQEDIE   EQUOVR ,,b,TQEFLGS3\nTQEAMODE EQUOVR ,,b,TQEFLGS3\nTQEPURGE EQUOVR ,,b,TQEFLGS3\n.*\n         MNOTE *,'Including IHATQE mapping macro'\n         IHATQE ,\n         EQUOVR *END\n*\nTQE      DSECT ,                       * Resume TQE DSECT\n         ORG\nTQE_LEN  EQU   *-TQE                   * Length of TQE\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPUCB   0100-20096-20096-0111-00505-00505-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Unit Control Block\n.*\n&LABEL   MAPUCB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPUCB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPUCB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'UCB').EMBED\n         AIF   ('&CB' EQ 'UCBOCR').EMBED\n         AIF   ('&CB' EQ 'UCBPDCTA').EMBED\n         AIF   ('&CB' EQ 'UCBUCS').EMBED\n         AIF   ('&CB' EQ 'UCB3540X').EMBED\n         AIF   ('&CB' EQ 'UCB3800X').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPUCB).MEND\n&BXA_MAC_MAPUCB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_UCB\n         GBLC  &BXA_CB_UCBOCR\n         GBLC  &BXA_CB_UCBPDCTA\n         GBLC  &BXA_CB_UCBUCS\n         GBLC  &BXA_CB_UCB3540X\n         GBLC  &BXA_CB_UCB3800X\n&BXA_CB_UCB SETC 'UCB'\n&BXA_CB_UCBOCR SETC 'UCB'\n&BXA_CB_UCBPDCTA SETC 'UCB'\n&BXA_CB_UCBUCS SETC 'UCB'\n&BXA_CB_UCB3540X SETC 'UCB'\n&BXA_CB_UCB3800X SETC 'UCB'\n.*\n.* UCBFL6 - Device features byte\nUCBASUN  EQUOVR ,,b,UCBFL6\nUCBMDISP EQUOVR ,,b,UCBFL6\nUCBDBUF  EQUOVR ,,b,UCBFL6\nUCBIDS   EQUOVR ,,b,UCBFL6\nUCBSELFD EQUOVR ,,b,UCBFL6\nUCBSMSMM EQUOVR ,,b,UCBFL6\nUCBLERP  EQUOVR ,,b,UCBFL6\nUCBIOT   EQUOVR ,,b,UCBFL6\n.*\n.* UCBATI - Index to the attention table (ANTAB)\nUCBRSV04 EQUOVR ,,b,UCBATI\nUCBRSV05 EQUOVR ,,b,UCBATI\nUCBRSV06 EQUOVR ,,b,UCBATI\nUCBRSV07 EQUOVR ,,b,UCBATI\nUCBRSV08 EQUOVR ,,b,UCBATI\nUCBRSV09 EQUOVR ,,b,UCBATI\nUCBHALI  EQUOVR ,,b,UCBATI\nUCBHPDV  EQUOVR ,,b,UCBATI\n.*\n.* UCBFLP1 - Flag byte\nUCBNSRCH EQUOVR ,,b,UCBFLP1\nUCBSHRUP EQUOVR ,,b,UCBFLP1\nUCBRERP  EQUOVR ,,b,UCBFLP1\nUCBINHIO EQUOVR ,,b,UCBFLP1\nUCBSWAPF EQUOVR ,,b,UCBFLP1\nUCBERLOG EQUOVR ,,b,UCBFLP1\nUCBDYNPH EQUOVR ,,b,UCBFLP1\nUCBRALOC EQUOVR ,,b,UCBFLP1\n.*\n.* UCBFL7 - Miscellaneous usage flags\nUCBMASGN EQUOVR ,,b,UCBFL7\nUCBSSPND EQUOVR ,,b,UCBFL7\nUCBAUTOS EQUOVR ,,b,UCBFL7\nUCBNOSEL EQUOVR ,,b,UCBFL7\n.*\n.* UCBCSFLG - Miscellaneous flags\nUCBNCC3  EQUOVR ,,b,UCBCSFLG\n.*\n.* UCBJBNR  - Flag byte\nUCBVRDEV EQUOVR ,,b,UCBJBNR\nUCBJES3  EQUOVR ,,b,UCBJBNR\nUCBDUC   EQUOVR ,,b,UCBJBNR\nUCBJ3DV  EQUOVR ,,b,UCBJBNR\nUCBOLDSM EQUOVR ,,b,UCBJBNR\nUCBMMSGP EQUOVR ,,b,UCBJBNR\nUCBDCONS EQUOVR ,,b,UCBJBNR\nUCBMONT  EQUOVR ,,b,UCBJBNR\n.*\n.* UCBFL5 - Flags\nUCBDCC   EQUOVR ,,b,UCBFL5\nUCBAF    EQUOVR ,,b,UCBFL5\nUCBAMV   EQUOVR ,,b,UCBFL5\nUCBSMS   EQUOVR ,,b,UCBFL5\nUCBVSDR  EQUOVR ,,b,UCBFL5\nUCBENVRD EQUOVR ,,b,UCBFL5\nUCBNALOC EQUOVR ,,b,UCBFL5\nUCBALTCU EQUOVR ,,b,UCBFL5\nUCBCUIR  EQUOVR ,,b,UCBFL5\n.*\n.* UCBID - UCB identification (FF)\nUCBSTND  EQUOVR ,,v,UCBID\nUCBIDCPY EQUOVR ,,v,UCBID\nUCBGUCB  EQUOVR ,,v,UCBID\nUCBST1   EQUOVR ,,v,UCBID\nUCBST3   EQUOVR ,,v,UCBID\n.*\n.* UCBSTAT - Device status\nUCBONLI  EQUOVR ,,b,UCBSTAT\nUCBCHGS  EQUOVR ,,b,UCBSTAT\nUCBRESV  EQUOVR ,,b,UCBSTAT\nUCBUNLD  EQUOVR ,,b,UCBSTAT\nUCBALOC  EQUOVR ,,b,UCBSTAT\nUCBPRES  EQUOVR ,,b,UCBSTAT\nUCBSYSR  EQUOVR ,,b,UCBSTAT\nUCBDADI  EQUOVR ,,b,UCBSTAT\n.*\n.* UCBFLA - I/O supervisor flag byte A\nUCBDEFER EQUOVR ,,b,UCBFLA\nUCBNRY   EQUOVR ,,b,UCBFLA\nUCBNOTRD EQUOVR ,,b,UCBFLA\nUCBPERM  EQUOVR ,,b,UCBFLA\nUCBPSNS  EQUOVR ,,b,UCBFLA\nUCBSTRT  EQUOVR ,,b,UCBFLA\nUCBHALT  EQUOVR ,,b,UCBFLA\nUCBCLEAR EQUOVR ,,b,UCBFLA\nUCBBOX   EQUOVR ,,b,UCBFLA\n.*\n.* UCBFLB - I/O supervisor flag byte B\nUCBINCPT EQUOVR ,,b,UCBFLB\nUCBNOPTH EQUOVR ,,b,UCBFLB\nUCBNOCON EQUOVR ,,b,UCBFLB\nUCBHILVL EQUOVR ,,b,UCBFLB\nUCBHDET  EQUOVR ,,b,UCBFLB\nUCBIOSN  EQUOVR ,,b,UCBFLB\n.*\n.* UCBWGT - Flags\nUCBIN    EQUOVR ,,b,UCBWGT\nUCBOUT   EQUOVR ,,b,UCBWGT\nUCBPUB   EQUOVR ,,b,UCBWGT\nUCBREW   EQUOVR ,,b,UCBWGT\nUCBMTPXP EQUOVR ,,b,UCBWGT\nUCBVORSN EQUOVR ,,b,UCBWGT\nUCBVHRSN EQUOVR ,,b,UCBWGT\nUCBVLRSN EQUOVR ,,b,UCBWGT\n.*\n.* UCBTBYT1 - Model bits\nUCB1FEA0 EQUOVR ,,b,UCBTBYT1\nUCB1FEA1 EQUOVR ,,b,UCBTBYT1\nUCB1FEA2 EQUOVR ,,b,UCBTBYT1\nUCB1FEA3 EQUOVR ,,b,UCBTBYT1\nUCB1FEA4 EQUOVR ,,b,UCBTBYT1\nUCB1FEA5 EQUOVR ,,b,UCBTBYT1\nUCB1FEA6 EQUOVR ,,b,UCBTBYT1\nUCB1FEA7 EQUOVR ,,b,UCBTBYT1\n.*\n.* UCBTBYT2 - Option flags\nUCB2OPT0 EQUOVR ,,b,UCBTBYT2\nUCB2OPT1 EQUOVR ,,b,UCBTBYT2\nUCB2OPT2 EQUOVR ,,b,UCBTBYT2\nUCB2OPT3 EQUOVR ,,b,UCBTBYT2\nUCB2OPT4 EQUOVR ,,b,UCBTBYT2\nUCB2OPT5 EQUOVR ,,b,UCBTBYT2\nUCB2OPT6 EQUOVR ,,b,UCBTBYT2\nUCBVLPWR EQUOVR ,,b,UCBTBYT2\nUCB2OPT7 EQUOVR ,,b,UCBTBYT2\nUCBDVPWR EQUOVR ,,b,UCBTBYT2\n.*\n.* UCBTBYT3 - Class bits\nUCB3TAPE EQUOVR ,,b,UCBTBYT3\nUCB3COMM EQUOVR ,,b,UCBTBYT3\nUCB3CTC  EQUOVR ,,b,UCBTBYT3\nUCB3DACC EQUOVR ,,b,UCBTBYT3\nUCB3DISP EQUOVR ,,b,UCBTBYT3\nUCB3UREC EQUOVR ,,b,UCBTBYT3\nUCB3CHAR EQUOVR ,,b,UCBTBYT3\nUCBRSV10 EQUOVR ,,b,UCBTBYT3\nUCBRSV11 EQUOVR ,,b,UCBTBYT3\n.*\n.* UCBFLC - I/O supervisor flag byte C\nUCBATTP  EQUOVR ,,b,UCBFLC\nUCBITFP  EQUOVR ,,b,UCBFLC\nUCBUDE   EQUOVR ,,b,UCBFLC\nUCBIVRS  EQUOVR ,,b,UCBFLC\nUCBIVRR  EQUOVR ,,b,UCBFLC\nUCBDDRSW EQUOVR ,,b,UCBFLC\n.*\n.* UCBSTAB - Volume status\nUCBBSVL  EQUOVR ,,b,UCBSTAB\nUCBDVSHR EQUOVR ,,b,UCBSTAB\nUCBPGFL  EQUOVR ,,b,UCBSTAB\nUCBPRSRS EQUOVR ,,b,UCBSTAB\nUCBBALB  EQUOVR ,,b,UCBSTAB\nUCBBPRV  EQUOVR ,,b,UCBSTAB\nUCBBPUB  EQUOVR ,,b,UCBSTAB\nUCBBSTR  EQUOVR ,,b,UCBSTAB\nUCBSHAR  EQUOVR ,,b,UCBSTAB\nUCBBNUL  EQUOVR ,,b,UCBSTAB\n.*\n.* UCBDMCT - Volume use byte\nUCBMOUNT EQUOVR ,,b,UCBDMCT\nUCBDMC   EQUOVR ,,b,UCBDMCT\n.*\n.* UCBFL4 - Direct access flag byte\nUCBMDSE1 EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4\nUCBWDAV  EQUOVR ,,b,UCBFL4\n.* UCBATTN  EQUOVR ,,b,UCBFL4          * Last seen in OS/390 V2R6\n.* UCBHOLD  EQUOVR ,,b,UCBFL4          * Last seen in OS/390 V2R6\n.* UCBMAT   EQUOVR ,,b,UCBFL4          * Last seen in OS/390 V2R6\nUCBDPAVB EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4\nUCBDPAVA EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4\nUCBSDSE1 EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4\nUCBDCMBU EQUOVR ,,b,UCBFL4             * First seen in z/OS V1R4\n.*\n.* UCBTBYT2 flags\nUCBRR    EQUOVR ,,b,UCBTBYT2\nUCBRPS   EQUOVR ,,b,UCBTBYT2\nUCBRVDEV EQUOVR ,,b,UCBTBYT2\n.*\n.* UCBTFL2 - Flag byte\nUCBTXMS  EQUOVR ,,b,UCBTFL2\nUCBTPSF  EQUOVR ,,b,UCBTFL2\nUCBTVCMP EQUOVR ,,b,UCBTFL2\nUCBTLPOS EQUOVR ,,b,UCBTFL2\n.*\n.* UCBTFL1 - Flag byte\nUCBNLTP  EQUOVR ,,b,UCBTFL1\nUCBNSLTP EQUOVR ,,b,UCBTFL1\nUCBDQDSP EQUOVR ,,b,UCBTFL1\nUCBTFL1S EQUOVR ,,b,UCBTFL1\nUCBRV005 EQUOVR ,,b,UCBTFL1\nUCBCSL   EQUOVR ,,b,UCBTFL1\nUCBCSLAC EQUOVR ,,b,UCBTFL1\nUCBLKAHP EQUOVR ,,b,UCBTFL1\nUCBBLP   EQUOVR ,,b,UCBTFL1\n.*\n.* UCBVOPT - VOLUME STATISTICS OPTION BITS\nUCBESV   EQUOVR ,,b,UCBVOPT\nUCBEVA   EQUOVR ,,b,UCBVOPT\nUCBESVC  EQUOVR ,,b,UCBVOPT\nUCBERPC  EQUOVR ,,b,UCBVOPT\nUCBESVE  EQUOVR ,,b,UCBVOPT\nUCBPERR  EQUOVR ,,b,UCBVOPT\nUCBRSV21 EQUOVR ,,b,UCBVOPT\nUCBRSV22 EQUOVR ,,b,UCBVOPT\n.*\n.* UCBMTFL1 - MSGDISP dismount request\nUCBMTDSM EQUOVR ,,b,UCBMTFL1\nUCBMTKEP EQUOVR ,,b,UCBMTFL1\nUCBMTRET EQUOVR ,,b,UCBMTFL1\n.*\n.* UCBTBYT1 flags\nUCBD1600 EQUOVR ,,b,UCBTBYT1\nUCBD6250 EQUOVR ,,b,UCBTBYT1\n.*\n.* UCBTBYT2 flags\nUCBDUDN1 EQUOVR ,,b,UCBTBYT2\nUCBDUDN2 EQUOVR ,,b,UCBTBYT2\nUCBRWTAU EQUOVR ,,b,UCBTBYT2\nUCBCOMPA EQUOVR ,,b,UCBTBYT2\n.*\n.* UCBTBYT4 (UCBUNTYP) values\nUCB3400  EQUOVR ,,v,UCBTBYT4\nUCB3423  EQUOVR ,,v,UCBTBYT4\nUCB3480  EQUOVR ,,v,UCBTBYT4\nUCB3490  EQUOVR ,,v,UCBTBYT4\nUCB3591  EQUOVR ,,v,UCBTBYT4\n.*\n.* UCBDKBYT - Flag byte\nUCBDKAMX EQUOVR ,,b,UCBDKBYT\nUCBVLVER EQUOVR ,,b,UCBDKBYT\nUCBRV067 EQUOVR ,,b,UCBDKBYT\nUCBRV068 EQUOVR ,,b,UCBDKBYT\nUCBRV069 EQUOVR ,,b,UCBDKBYT\nUCBRV070 EQUOVR ,,b,UCBDKBYT\nUCBRV071 EQUOVR ,,b,UCBDKBYT\nUCBRV072 EQUOVR ,,b,UCBDKBYT\n.*\n.* UCBOPTNS - Optional features installed on\nUCBMDLBT EQUOVR ,,b,UCBOPTNS\nUCBRV055 EQUOVR ,,b,UCBOPTNS\nUCBRV056 EQUOVR ,,b,UCBOPTNS\nUCBBRSTR EQUOVR ,,b,UCBOPTNS\nUCBRV083 EQUOVR ,,b,UCBOPTNS\n.*\n.* UCBGRAFS - Graphic character flag byte\nUCBRV046 EQUOVR ,,b,UCBGRAFS\nUCBRV047 EQUOVR ,,b,UCBGRAFS\nUCBRV048 EQUOVR ,,b,UCBGRAFS\nUCBRV049 EQUOVR ,,b,UCBGRAFS\nUCBGRAF0 EQUOVR ,,b,UCBGRAFS\nUCBGRAF1 EQUOVR ,,b,UCBGRAFS\nUCBGRAF2 EQUOVR ,,b,UCBGRAFS\nUCBGRAF3 EQUOVR ,,b,UCBGRAFS\n.*\n.* UCBACTIV - Active features\nUCBRV057 EQUOVR ,,b,UCBACTIV\nUCBRV058 EQUOVR ,,b,UCBACTIV\nUCBRV059 EQUOVR ,,b,UCBACTIV\nUCBRV060 EQUOVR ,,b,UCBACTIV\nUCBRV061 EQUOVR ,,b,UCBACTIV\nUCBRV062 EQUOVR ,,b,UCBACTIV\nUCBRV063 EQUOVR ,,b,UCBACTIV\nUCBBRSTA EQUOVR ,,b,UCBACTIV\n.*\n.* UCBUCSOP - Format of UCS image in buffer\nUCBUCSO1 EQUOVR ,,b,UCBUCSOP\nUCBUCSO2 EQUOVR ,,b,UCBUCSOP\nUCBRSV39 EQUOVR ,,b,UCBUCSOP\nUCBRSV40 EQUOVR ,,b,UCBUCSOP\nUCBRSV41 EQUOVR ,,b,UCBUCSOP\nUCBRSV42 EQUOVR ,,b,UCBUCSOP\nUCBRSV43 EQUOVR ,,b,UCBUCSOP\nUCBUCSPE EQUOVR ,,b,UCBUCSOP\n.*\n.* UCBFCBOP - Reserved (1403) or FCB options\nUCBFCBO1 EQUOVR ,,b,UCBFCBOP\nUCBRSV44 EQUOVR ,,b,UCBFCBOP\nUCBRSV45 EQUOVR ,,b,UCBFCBOP\nUCBRSV46 EQUOVR ,,b,UCBFCBOP\nUCBFCBPS EQUOVR ,,b,UCBFCBOP\nUCBRSV49 EQUOVR ,,b,UCBFCBOP\nUCBFCBPE EQUOVR ,,b,UCBFCBOP\n.*\n.* UCBUNTYP (UCBTBYT4) Flag Byte\nUCBAFP1  EQUOVR ,,v,UCBUNTYP\nUCBDSM   EQUOVR ,,v,UCBUNTYP\nUCB3211  EQUOVR ,,v,UCBUNTYP\nUCB3263  EQUOVR ,,v,UCBUNTYP\nUCB3800  EQUOVR ,,v,UCBUNTYP\nUCB3838  EQUOVR ,,v,UCBUNTYP\nUCB3895  EQUOVR ,,v,UCBUNTYP\nUCB4245  EQUOVR ,,v,UCBUNTYP\nUCB4248  EQUOVR ,,v,UCBUNTYP\n.*\n.* UCBAOF1 - First byte of UCBAOF\nUCBOFMCR EQUOVR ,,b,UCBAOF1\nUCBOFSP  EQUOVR ,,b,UCBAOF1\nUCBOFNL  EQUOVR ,,b,UCBAOF1\nUCBOFPTR EQUOVR ,,b,UCBAOF1\nUCBRSV65 EQUOVR ,,b,UCBAOF1\nUCBRSV66 EQUOVR ,,b,UCBAOF1\nUCBRSV67 EQUOVR ,,b,UCBAOF1\nUCBRSV68 EQUOVR ,,b,UCBAOF1\n.*\n.* UCBAOF2 - Second byte of UCBAOF\nUCBRSV69 EQUOVR ,,b,UCBAOF2\nUCBRSV70 EQUOVR ,,b,UCBAOF2\nUCBRSV71 EQUOVR ,,b,UCBAOF2\nUCBRSV72 EQUOVR ,,b,UCBAOF2\nUCBRSV73 EQUOVR ,,b,UCBAOF2\nUCBRSV74 EQUOVR ,,b,UCBAOF2\nUCBRSV75 EQUOVR ,,b,UCBAOF2\nUCBRSV76 EQUOVR ,,b,UCBAOF2\n.*\n.* UCBGCB - control byte.\nUCBOLTEP EQUOVR ,,b,UCBGCB\nUCBRSV77 EQUOVR ,,b,UCBGCB\nUCBRSV78 EQUOVR ,,b,UCBGCB\nUCBRSV79 EQUOVR ,,b,UCBGCB\nUCBRTIAC EQUOVR ,,b,UCBGCB\nUCBRIPND EQUOVR ,,b,UCBGCB\nUCBSKPFG EQUOVR ,,b,UCBGCB\nUCBATRCD EQUOVR ,,b,UCBGCB\n.*\n.* UCBGRAF - Graphics status flags (BTAM)\nUCBOIP   EQUOVR ,,b,UCBGRAF\nUCBDRO   EQUOVR ,,b,UCBGRAF\nUCBDRNO  EQUOVR ,,b,UCBGRAF\nUCBBTAM  EQUOVR ,,b,UCBGRAF\nUCBUPM   EQUOVR ,,b,UCBGRAF\nUCBRPND  EQUOVR ,,b,UCBGRAF\nUCBDWNR  EQUOVR ,,b,UCBGRAF\nUCBRV039 EQUOVR ,,b,UCBGRAF\n.*\n.* UCBTBYT4 Flag Byte\nUCB3791L  EQUOVR ,,v,UCBTBYT4\nUCB42AD1  EQUOVR ,,v,UCBTBYT4\n.*\n.* UCBCTCF1 - Channel-to-channel (CTC) device flag\nUCBCTC80 EQUOVR ,,b,UCBCTCF1\nUCBRV076 EQUOVR ,,b,UCBCTCF1\nUCBRV077 EQUOVR ,,b,UCBCTCF1\nUCBRV078 EQUOVR ,,b,UCBCTCF1\nUCBRV079 EQUOVR ,,b,UCBCTCF1\nUCBRV080 EQUOVR ,,b,UCBCTCF1\nUCBRV081 EQUOVR ,,b,UCBCTCF1\nUCBRV082 EQUOVR ,,b,UCBCTCF1\n.*\n.* UCBCTCF2 - IOS CTC Flags, serialized via\nUCBCCLAW EQUOVR ,,b,UCBCTCF2\nUCBCABYP EQUOVR ,,b,UCBCTCF2\n.*\n.* UCBTBYT4 mapping\nUCBPCTC  EQUOVR ,,v,UCBTBYT4\nUCBSCTC  EQUOVR ,,v,UCBTBYT4\nUCBBCTC  EQUOVR ,,v,UCBTBYT4\nUCBRS6K  EQUOVR ,,v,UCBTBYT4\nUCB3172  EQUOVR ,,v,UCBTBYT4\nUCBOSA   EQUOVR ,,v,UCBTBYT4\nUCBOSAD  EQUOVR ,,v,UCBTBYT4\nUCBOSAF  EQUOVR ,,v,UCBTBYT4\n.*\n         MNOTE *,'Including IEFUCBOB mapping macro'\n         IEFUCBOB SSMD=YES,            * Include prefix area mapping   *\n               LIST=YES                * With unchanged list-options\n         EQUOVR *END\n*\nUCB      DSECT ,                       * Reset to UCB\n         ORG   ,                       *\nUCB_LEN  EQU   *-UCB                   * Length of UCB\n*\nUCBOCR   DSECT ,                       * Reset to UCB OCR extension\n         ORG   ,                       *\nUCBOCR_LEN EQU *-UCBOCR                * Length of UCBOCR\n*\nUCB3540X DSECT ,                       * Reset to UCB 3540 extension\n         ORG   ,                       *\nUCB3540X_LEN EQU *-UCB3540X            * Length of UCB3540X\n*\nUCB3800X DSECT ,                       * Reset to UCB 3800 extension\n         ORG   ,                       *\nUCB3800_LEN EQU *-UCB3800X             * Length of UCB3800X\n*\nUCBUCS   DSECT ,                       * Reset to UCB UCS\n         ORG   ,                       *\nUCBUCS_LEN EQU *-UCBUCS                * Length of UCBUCS\n*\nUCBPDCTA DSECT ,                       * Reset to UCB PDCTA\n         ORG   ,                       *\nUCBPDCTA_LEN EQU *-UCBPDCTA            * Length of UCBPDCTA\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPUCM   0100-20096-20096-0111-00571-00571-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Unit Control Module definition\n.*\n&LABEL   MAPUCM &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPUCM                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPUCM         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'UCM').EMBED\n         AIF   ('&CB' EQ 'UCMEFEXT').EMBED\n         AIF   ('&CB' EQ 'UCMEIL').EMBED\n         AIF   ('&CB' EQ 'UCMEPEXT').EMBED\n         AIF   ('&CB' EQ 'UCMFEXTA').EMBED\n         AIF   ('&CB' EQ 'UCMFSAVE').EMBED\n         AIF   ('&CB' EQ 'UCMLIST').EMBED\n         AIF   ('&CB' EQ 'UCMPEXTA').EMBED\n         AIF   ('&CB' EQ 'UCMPRFX').EMBED\n         AIF   ('&CB' EQ 'UCM2EXT').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPUCM).MEND\n&BXA_MAC_MAPUCM SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_UCM\n         GBLC  &BXA_CB_UCMEFEXT\n         GBLC  &BXA_CB_UCMEIL\n         GBLC  &BXA_CB_UCMEPEXT\n         GBLC  &BXA_CB_UCMFEXTA\n         GBLC  &BXA_CB_UCMFSAVE\n         GBLC  &BXA_CB_UCMLIST\n         GBLC  &BXA_CB_UCMPEXTA\n         GBLC  &BXA_CB_UCMPRFX\n         GBLC  &BXA_CB_UCM2EXT\n&BXA_CB_UCM SETC 'UCM'\n&BXA_CB_UCMEFEXT SETC 'UCM'\n&BXA_CB_UCMEIL SETC 'UCM'\n&BXA_CB_UCMEPEXT SETC 'UCM'\n&BXA_CB_UCMFEXTA SETC 'UCM'\n&BXA_CB_UCMFSAVE SETC 'UCM'\n&BXA_CB_UCMLIST SETC 'UCM'\n&BXA_CB_UCMPEXTA SETC 'UCM'\n&BXA_CB_UCMPRFX SETC 'UCM'\n&BXA_CB_UCM2EXT SETC 'UCM'\n.*\n.* UCM2SFLG - IEAVSTAA CONTROL FLAGS\nUCM2SDWA EQUOVR ,,b,UCM2SFLG\nUCM2SENT EQUOVR ,,b,UCM2SFLG\nUCM2DTAK EQUOVR ,,b,UCM2SFLG\nUCM2DSTR EQUOVR ,,b,UCM2SFLG\nUCM2WTOI EQUOVR ,,b,UCM2SFLG\nUCM2REC  EQUOVR ,,b,UCM2SFLG\nUCM2FAIL EQUOVR ,,b,UCM2SFLG\nUCMRV008 EQUOVR ,,b,UCM2SFLG\n.*\n.* UCMSFLG1 - BYTE 1 OF SYSTEM CONTROL FLAGS\nUCMSYSHC EQUOVR ,,b,UCMSFLG1\nUCMSYSB  EQUOVR ,,b,UCMSFLG1\nUCMSYSC  EQUOVR ,,b,UCMSFLG1\nUCMSYSD  EQUOVR ,,b,UCMSFLG1\nUCMSYSE  EQUOVR ,,b,UCMSFLG1\nUCMSYSF  EQUOVR ,,b,UCMSFLG1\nUCMSYSG  EQUOVR ,,b,UCMSFLG1\nUCMSYSH  EQUOVR ,,b,UCMSFLG1\n.*\n.* UCMSFLG2 - BYTE 2 OF SYSTEM CONTROL FLAGS\nUCMSYSI  EQUOVR ,,b,UCMSFLG2\nUCMSYSJ  EQUOVR ,,b,UCMSFLG2\nUCMSYSK  EQUOVR ,,b,UCMSFLG2\nUCMSYSL  EQUOVR ,,b,UCMSFLG2\nUCMSYSM  EQUOVR ,,b,UCMSFLG2\nUCMSYSN  EQUOVR ,,b,UCMSFLG2\nUCMSYSO  EQUOVR ,,b,UCMSFLG2\nUCMSYSP  EQUOVR ,,b,UCMSFLG2\n.*\n.* UCMMFLG3 - MISCELLANEOUS CONTROL FLAGS\nUCMREFSH EQUOVR ,,b,UCMMFLG3\nUCMLOGSW EQUOVR ,,b,UCMMFLG3\nUCMMRSV2 EQUOVR ,,b,UCMMFLG3\nUCMMRSV3 EQUOVR ,,b,UCMMFLG3\nUCMMRSV4 EQUOVR ,,b,UCMMFLG3\nUCMMRSV5 EQUOVR ,,b,UCMMFLG3\nUCMMRSV6 EQUOVR ,,b,UCMMFLG3\nUCMMRSV7 EQUOVR ,,b,UCMMFLG3\n.*\n.* UCMMFLG4 - Miscellaneous flags\nUCMOPSS  EQUOVR ,,b,UCMMFLG4\nUCMOPSA  EQUOVR ,,b,UCMMFLG4\nUCMOPSV  EQUOVR ,,b,UCMMFLG4\nUCMOPSD  EQUOVR ,,b,UCMMFLG4\nUCMOPSEA EQUOVR ,,b,UCMMFLG4\nUCMOPS5  EQUOVR ,,b,UCMMFLG4\nUCMOPS6  EQUOVR ,,b,UCMMFLG4\nUCMOPS7  EQUOVR ,,b,UCMMFLG4\n.*\n.* UCMSDS1 - SDS FLAGS\nUCMSDS1A EQUOVR ,,b,UCMSDS1\nUCMSDS1B EQUOVR ,,b,UCMSDS1\nUCMSDS1C EQUOVR ,,b,UCMSDS1\nUCMSDS1D EQUOVR ,,b,UCMSDS1\nUCMSDS1E EQUOVR ,,b,UCMSDS1\nUCMPRTHC EQUOVR ,,b,UCMSDS1\nUCMRSV08 EQUOVR ,,b,UCMSDS1\nUCMRSV09 EQUOVR ,,b,UCMSDS1\n.*\n.* UCMMISCF - MISCELLANEOUS BITS\nUCMJ3CBS EQUOVR ,,b,UCMMISCF\nUCMJ3SAE EQUOVR ,,b,UCMMISCF\nUCMWU100 EQUOVR ,,b,UCMMISCF\nUCMENFDM EQUOVR ,,b,UCMMISCF\nUCMWU400 EQUOVR ,,b,UCMMISCF\n.* UCMRSV0A EQUOVR ,,b,UCMMISCF        * Last seen in OS/390 V2R6\nUCMWDONE EQUOVR ,,b,UCMMISCF           * First seen in z/OS V1R4\nUCMRSV0B EQUOVR ,,b,UCMMISCF\nUCMRSV0C EQUOVR ,,b,UCMMISCF\n.*\n.* UCMRPYF1 - First byte of Reply Flags\nUCMRPY0I EQUOVR ,,b,UCMRPYF1\nUCMENHR  EQUOVR ,,b,UCMRPYF1\n.*\n.* UCMMODE - MODE FLAGS\nUCMCTIC  EQUOVR ,,b,UCMMODE\nUCMSPLXQ EQUOVR ,,b,UCMMODE\nUCMTPUTA EQUOVR ,,b,UCMMODE\nUCMSYPLX EQUOVR ,,b,UCMMODE\nUCMAMFA  EQUOVR ,,b,UCMMODE\nUCMOGCE  EQUOVR ,,b,UCMMODE\nUCMFSTAT EQUOVR ,,b,UCMMODE\nUCM1SYS  EQUOVR ,,b,UCMMODE\n.*\n.* UCMAMRF - ACTION MESSAGE RETENTION FACILITY FLAGS\nUCMAMRFA EQUOVR ,,b,UCMAMRF\nUCMAMRFF EQUOVR ,,b,UCMAMRF\nUCMRSV78 EQUOVR ,,b,UCMAMRF\nUCMABUFF EQUOVR ,,b,UCMAMRF\nUCMAMRFC EQUOVR ,,b,UCMAMRF\nUCMEXSSI EQUOVR ,,b,UCMAMRF\n.* UCMRSV80 EQUOVR ,,b,UCMAMRF         * Last seen in OS/390 V2R6\nUCMAMRFR EQUOVR ,,b,UCMAMRF            * First seen in z/OS V1R4\nUCMRSV81 EQUOVR ,,b,UCMAMRF\n.*\n.* UCMVRSN - VERSION LEVEL\nUCMSP13  EQUOVR ,,v,UCMVRSN\nUCMSP211 EQUOVR ,,v,UCMVRSN\nUCMSP220 EQUOVR ,,v,UCMVRSN\nUCMSP410 EQUOVR ,,v,UCMVRSN\nUCMSP420 EQUOVR ,,v,UCMVRSN\nUCMSP422 EQUOVR ,,v,UCMVRSN\nUCMSP440 EQUOVR ,,v,UCMVRSN\nUCMSP51X EQUOVR ,,v,UCMVRSN\nUCMVRID  EQUOVR ,,v,UCMVRSN\n.*\n.* UCMMODE2 - MODE FLAGS #2\nUCMOVRDE EQUOVR ,,b,UCMMODE2\nUCMLOGS  EQUOVR ,,b,UCMMODE2\nUCMMD202 EQUOVR ,,b,UCMMODE2\nUCMHCENT EQUOVR ,,b,UCMMODE2\nUCMMD204 EQUOVR ,,b,UCMMODE2\nUCMMD205 EQUOVR ,,b,UCMMODE2\n.* UCMMD206 EQUOVR ,,b,UCMMODE2        * Last seen in OS/390 V2R6\nUCM_Default_RC11 EQUOVR ,,b,UCMMODE2   * First seen in z/OS V1R4\nUCMMD207 EQUOVR ,,b,UCMMODE2\n.*\n.* UCMRSV42 - RESERVED  (MDC033)\nUCMRSV43 EQUOVR ,,b,UCMRSV42\nUCMRSV44 EQUOVR ,,b,UCMRSV42\nUCMRSV45 EQUOVR ,,b,UCMRSV42\nUCMRSV46 EQUOVR ,,b,UCMRSV42\nUCMRSV47 EQUOVR ,,b,UCMRSV42\nUCMRSV48 EQUOVR ,,b,UCMRSV42\nUCMRSV49 EQUOVR ,,b,UCMRSV42\nUCMRSV50 EQUOVR ,,b,UCMRSV42\n.*\n.* UCMRSV51 - RESERVED  (MDC033)\nUCMRSV52 EQUOVR ,,b,UCMRSV51\nUCMRSV53 EQUOVR ,,b,UCMRSV51\nUCMRSV54 EQUOVR ,,b,UCMRSV51\nUCMRSV55 EQUOVR ,,b,UCMRSV51\nUCMRSV56 EQUOVR ,,b,UCMRSV51\nUCMRSV57 EQUOVR ,,b,UCMRSV51\nUCMRSV58 EQUOVR ,,b,UCMRSV51\nUCMRSV59 EQUOVR ,,b,UCMRSV51\n.*\n.* UCMECB - I/O COMPLETION ECB OR ADDRESS OF I/O COMPLETION ECB\nUCMECBFB EQUOVR ,,v,UCMECB+3\nUCMECBFC EQUOVR ,,v,UCMECB+3\nUCMECBFD EQUOVR ,,v,UCMECB+3\nUCMECBFE EQUOVR ,,v,UCMECB+3\nUCMECBFF EQUOVR ,,v,UCMECB+3\n.*\n.* UCMSTS - STATUS FLAGS\nUCMAF    EQUOVR ,,b,UCMSTS\nUCMPF    EQUOVR ,,b,UCMSTS\nUCMBF    EQUOVR ,,b,UCMSTS\nUCMCF    EQUOVR ,,b,UCMSTS\nUCMTA    EQUOVR ,,b,UCMSTS\nUCMTB    EQUOVR ,,b,UCMSTS\nUCMEMCLS EQUOVR ,,b,UCMSTS\nUCMTC    EQUOVR ,,b,UCMSTS\n.*\n.* UCMATR - ATTRIBUTE FLAGS\nUCMOF    EQUOVR ,,b,UCMATR\nUCMIF    EQUOVR ,,b,UCMATR\nUCMXF    EQUOVR ,,b,UCMATR\nUCMUF    EQUOVR ,,b,UCMATR\nUCMLF    EQUOVR ,,b,UCMATR\nUCMAT04  EQUOVR ,,b,UCMATR\nUCMINCLR EQUOVR ,,b,UCMATR\nUCMGLBCH EQUOVR ,,b,UCMATR\n.*\n.* UCMEDEVX - DEVICE TYPE INDEX\nUCM2540  EQUOVR ,,v,UCMEDEVX\nUCM2740  EQUOVR ,,v,UCMEDEVX\nUCM3211  EQUOVR ,,v,UCMEDEVX\nUCM3215  EQUOVR ,,v,UCMEDEVX\nUCM32772 EQUOVR ,,v,UCMEDEVX\nUCM32782 EQUOVR ,,v,UCMEDEVX\nUCM3782A EQUOVR ,,v,UCMEDEVX\nUCM32783 EQUOVR ,,v,UCMEDEVX\nUCM32784 EQUOVR ,,v,UCMEDEVX\nUCM3792A EQUOVR ,,v,UCMEDEVX\nUCM3792B EQUOVR ,,v,UCMEDEVX\nUCM3793A EQUOVR ,,v,UCMEDEVX\nUCM3793B EQUOVR ,,v,UCMEDEVX\nUCM3284  EQUOVR ,,v,UCMEDEVX\nUCM3792C EQUOVR ,,v,UCMEDEVX\nUCM3270X EQUOVR ,,v,UCMEDEVX\nUCM2732E EQUOVR ,,v,UCMEDEVX\nUCM3180E EQUOVR ,,v,UCMEDEVX\nUCM3160E EQUOVR ,,v,UCMEDEVX\nUCM4380E EQUOVR ,,v,UCMEDEVX\nUCM6280E EQUOVR ,,v,UCMEDEVX\nUCM6260E EQUOVR ,,v,UCMEDEVX\nUCM5006E EQUOVR ,,v,UCMEDEVX\n.*\n.* UCMSDS5 - SDS FLAGS\nUCMSDS5A EQUOVR ,,b,UCMSDS5\nUCMSDS5B EQUOVR ,,b,UCMSDS5\nUCMSDS5C EQUOVR ,,b,UCMSDS5\nUCMSDS5D EQUOVR ,,b,UCMSDS5\nUCMRSV30 EQUOVR ,,b,UCMSDS5\nUCMSDS5F EQUOVR ,,b,UCMSDS5\nUCMSDS5G EQUOVR ,,b,UCMSDS5\nUCMRSV31 EQUOVR ,,b,UCMSDS5\n.*\n.* UCMDIDCS - DIDOCS GLOBAL UPDATE FLAGS\nUCMEGCHG EQUOVR ,,b,UCMDIDCS\nUCMENGUP EQUOVR ,,b,UCMDIDCS\nUCMAHERE EQUOVR ,,b,UCMDIDCS\nUCMINUSE EQUOVR ,,b,UCMDIDCS\nUCMEFAIL EQUOVR ,,b,UCMDIDCS\n.*\n.* UCMAUTHA - 1ST BYTE OF COMMAND CODE AUTH FLAGS\nUCMAUTH1 EQUOVR ,,b,UCMAUTHA\nUCMAUTH2 EQUOVR ,,b,UCMAUTHA\nUCMAUTH3 EQUOVR ,,b,UCMAUTHA\nUCMRSV19 EQUOVR ,,b,UCMAUTHA\nUCMRSV20 EQUOVR ,,b,UCMAUTHA\nUCMRSV21 EQUOVR ,,b,UCMAUTHA\nUCMRSV22 EQUOVR ,,b,UCMAUTHA\nUCMRSV23 EQUOVR ,,b,UCMAUTHA\n.*\n.* UCMDISP1 - FIRST BYTE - DISPOSITION FLAGS\nUCMDISPA EQUOVR ,,b,UCMDISP1\nUCMDISPB EQUOVR ,,b,UCMDISP1\nUCMDISPC EQUOVR ,,b,UCMDISP1\nUCMDISPD EQUOVR ,,b,UCMDISP1\nUCMDISPE EQUOVR ,,b,UCMDISP1\nUCMDISPF EQUOVR ,,b,UCMDISP1\nUCMDISPG EQUOVR ,,b,UCMDISP1\nUCMDISPH EQUOVR ,,b,UCMDISP1\n.*\n.* UCMDISP2 - SECOND BYTE - DISPOSITION FLAGS\nUCMDISPI EQUOVR ,,b,UCMDISP2\nUCMDISPJ EQUOVR ,,b,UCMDISP2\nUCMDISPK EQUOVR ,,b,UCMDISP2\nUCMDISPL EQUOVR ,,b,UCMDISP2\nUCMDISPM EQUOVR ,,b,UCMDISP2\nUCMDISPN EQUOVR ,,b,UCMDISP2\nUCMDISPX EQUOVR ,,b,UCMDISP2\n.*\n.* UCMMSG1 - FIRST BYTE - MESSAGE FLAGS\nUCMMSGA  EQUOVR ,,b,UCMMSG1\nUCMMSGB  EQUOVR ,,b,UCMMSG1\nUCMRSV70 EQUOVR ,,b,UCMMSG1\nUCMMSGD  EQUOVR ,,b,UCMMSG1\nUCMRSV71 EQUOVR ,,b,UCMMSG1\nUCMMSGF  EQUOVR ,,b,UCMMSG1\nUCMMSGG  EQUOVR ,,b,UCMMSG1\nUCMRSV27 EQUOVR ,,b,UCMMSG1\n.*\n.* UCMDEVC - DEVICE CONTROL FLAGS\nUCMDEVA  EQUOVR ,,b,UCMDEVC\nUCMDEVB  EQUOVR ,,b,UCMDEVC\nUCMDEVCC EQUOVR ,,b,UCMDEVC\nUCMDEVD  EQUOVR ,,b,UCMDEVC\nUCMDEVE  EQUOVR ,,b,UCMDEVC\nUCMDEVF  EQUOVR ,,b,UCMDEVC\nUCMDEVG  EQUOVR ,,b,UCMDEVC\nUCMVHRSN EQUOVR ,,b,UCMDEVC\n.*\n.* UCMFFLG1 - MESSAGE FLAGS\nUCMFMSGE EQUOVR ,,b,UCMFFLG1\nUCMFMSGA EQUOVR ,,b,UCMFFLG1\nUCMFMSGN EQUOVR ,,b,UCMFFLG1\nUCMFMSG1 EQUOVR ,,b,UCMFFLG1\nUCMFMSG2 EQUOVR ,,b,UCMFFLG1\nUCMFMSG3 EQUOVR ,,b,UCMFFLG1\nUCMFMSG4 EQUOVR ,,b,UCMFFLG1\nUCMFMSG5 EQUOVR ,,b,UCMFFLG1\n.*\n.* UCMFFLG2 - MESSAGE FLAGS\nUCMFMSG6 EQUOVR ,,b,UCMFFLG2\nUCMFMSG7 EQUOVR ,,b,UCMFFLG2\nUCMFMSG8 EQUOVR ,,b,UCMFFLG2\nUCMFMSG9 EQUOVR ,,b,UCMFFLG2\nUCMFMSGB EQUOVR ,,b,UCMFFLG2\nUCMFUMPF EQUOVR ,,b,UCMFFLG2\nUCMFMSGC EQUOVR ,,b,UCMFFLG2\nUCMNHOLD EQUOVR ,,b,UCMFFLG2\n.*\n.* UCMFFLG3 - QUEUE SCANNED FLAGS FOR ACTION MESSAGE\nUCMFRQSD EQUOVR ,,b,UCMFFLG3\nUCMFIQSD EQUOVR ,,b,UCMFFLG3\nUCMFEQSD EQUOVR ,,b,UCMFFLG3\nUCMFCQSD EQUOVR ,,b,UCMFFLG3\nUCMFRSVD EQUOVR ,,b,UCMFFLG3\nUCMFRSVE EQUOVR ,,b,UCMFFLG3\nUCMFRSVF EQUOVR ,,b,UCMFFLG3\nUCMFRSVG EQUOVR ,,b,UCMFFLG3\n.*\n.* UCMFMISC - MISCELLANEOUS FLAGS\nUCMFWRID EQUOVR ,,b,UCMFMISC\nUCMFCMIN EQUOVR ,,b,UCMFMISC\nUCMFRSVH EQUOVR ,,b,UCMFMISC\nUCMFHOLD EQUOVR ,,b,UCMFMISC\nUCMF4RSV EQUOVR ,,b,UCMFMISC\nUCMFLOGR EQUOVR ,,b,UCMFMISC\nUCMFLOGA EQUOVR ,,b,UCMFMISC\nUCMFRACT EQUOVR ,,b,UCMFMISC\n.*\n.* UCMFMIS2 - MISCELLANEOUS FLAG BYTE 2\nUCMFPCOK EQUOVR ,,b,UCMFMIS2\nUCMFUD1  EQUOVR ,,b,UCMFMIS2\nUCMFHCUD EQUOVR ,,b,UCMFMIS2\nUCMFMLSS EQUOVR ,,b,UCMFMIS2\nUCMFSYNL EQUOVR ,,b,UCMFMIS2\nUCMFMIX  EQUOVR ,,b,UCMFMIS2\nUCMFPCMP EQUOVR ,,b,UCMFMIS2\nUCMF440  EQUOVR ,,b,UCMFMIS2\n.*\n.* UCMFXBYT - HIGH-ORDER BYTE OF UCMFXECB\nUCMFXB0  EQUOVR ,,b,UCMFXBYT\n.*\n.* UCMFMIS3 - MISCELLANEOUS FLAG BYTE 3\nUCMF65BL EQUOVR ,,b,UCMFMIS3\nUCMF85BL EQUOVR ,,b,UCMFMIS3\n.*\n.* UCMPSNQB - QUEUE SCANNED FLAGS FOR ACTION MESSAGE\nUCMPRQSD EQUOVR ,,b,UCMPSNQB\nUCMPIQSD EQUOVR ,,b,UCMPSNQB\nUCMPEQSD EQUOVR ,,b,UCMPSNQB\nUCMPCQSD EQUOVR ,,b,UCMPSNQB\nUCMPRSV4 EQUOVR ,,b,UCMPSNQB\nUCMPRSV5 EQUOVR ,,b,UCMPSNQB\nUCMPRSV6 EQUOVR ,,b,UCMPSNQB\nUCMPRSV7 EQUOVR ,,b,UCMPSNQB\n.*\n.* UCMPFLG1 - MISCELLANEOUS FLAGS\nUCMPWERA EQUOVR ,,b,UCMPFLG1\nUCMPUXIT EQUOVR ,,b,UCMPFLG1\nUCMPPFKC EQUOVR ,,b,UCMPFLG1\nUCMPSWCH EQUOVR ,,b,UCMPFLG1\nUCMPSWCC EQUOVR ,,b,UCMPFLG1\nUCMPLOCO EQUOVR ,,b,UCMPFLG1\nUCMPXITA EQUOVR ,,b,UCMPFLG1\nUCMPXTDF EQUOVR ,,b,UCMPFLG1\n.*\n.* UCMEFLG1 - FLAGS FOR UCME FIXED EXTENSION\nUCMEFLGA EQUOVR ,,b,UCMEFLG1\nUCMEFLGB EQUOVR ,,b,UCMEFLG1\nUCMEFLGC EQUOVR ,,b,UCMEFLG1\nUCMEFLGD EQUOVR ,,b,UCMEFLG1\nUCMEFLGE EQUOVR ,,b,UCMEFLG1\n.* UCMEFLGF EQUOVR ,,b,UCMEFLG1        * Last seen in OS/390 V2R6\n.* UCMEFLGG EQUOVR ,,b,UCMEFLG1        * Last seen in OS/390 V2R6\n.* UCMEFLGH EQUOVR ,,b,UCMEFLG1        * Last seen in OS/390 V2R6\nUCMEF_Logon_Optional   EQUOVR ,,b,UCMEFLG1 * First seen in z/OS V1R4\nUCMEF_Logon_Required   EQUOVR ,,b,UCMEFLG1 * First seen in z/OS V1R4\nUCMEF_AutoLog_Required EQUOVR ,,b,UCMEFLG1 * First seen in z/OS V1R4\n.*\n.* UCMEFLG2 - FLAG FIELD\nUCMEFSTW EQUOVR ,,b,UCMEFLG2\nUCMEFLRQ EQUOVR ,,b,UCMEFLG2\nUCMEFALG EQUOVR ,,b,UCMEFLG2\nUCMEFLOG EQUOVR ,,b,UCMEFLG2\nUCMEALOG EQUOVR ,,b,UCMEFLG2\nUCMEFALL EQUOVR ,,b,UCMEFLG2\nUCMEFPAL EQUOVR ,,b,UCMEFLG2\n.*\n.* UCMEFL1 - FIRST BYTE OF THE MESSAGE LEVEL FLAGS\nUCMEFLR  EQUOVR ,,b,UCMEFL1\nUCMEFLIA EQUOVR ,,b,UCMEFL1\nUCMEFLCE EQUOVR ,,b,UCMEFL1\nUCMEFLE  EQUOVR ,,b,UCMEFL1\nUCMEFLI  EQUOVR ,,b,UCMEFL1\nUCMEFLBC EQUOVR ,,b,UCMEFL1\n.*\n.* UCMEFMSC - MISCELLANEOUS ROUTING INFORMATION\nUCMEFUD  EQUOVR ,,b,UCMEFMSC\nUCMEFUDO EQUOVR ,,b,UCMEFMSC\nUCMEFMS3 EQUOVR ,,b,UCMEFMSC\nUCMEFAUT EQUOVR ,,b,UCMEFMSC\nUCMEFHCY EQUOVR ,,b,UCMEFMSC\n.*\n.* UCMEFL3 - Reserved for IBM use\nUCMEFMSA EQUOVR ,,b,UCMEFL3\nUCMEFCSA EQUOVR ,,b,UCMEFL3\n.*\n.* UCMEPFG1 - MISCELLANEOUS FLAGS\nUCMEPAIN EQUOVR ,,b,UCMEPFG1\nUCMEPTFL EQUOVR ,,b,UCMEPFG1\nUCMEPPOB EQUOVR ,,b,UCMEPFG1\nUCMEPASY EQUOVR ,,b,UCMEPFG1\n.*\n.* UCMEPMON - MONITOR SAVE FLAGS, FIRST BYTE\nUCMEPMJ  EQUOVR ,,b,UCMEPMON\nUCMEPMST EQUOVR ,,b,UCMEPMON\nUCMEPM02 EQUOVR ,,b,UCMEPMON\nUCMEPM03 EQUOVR ,,b,UCMEPMON\nUCMEPM04 EQUOVR ,,b,UCMEPMON\nUCMEPMS  EQUOVR ,,b,UCMEPMON\nUCMEPMTM EQUOVR ,,b,UCMEPMON\nUCMEPM07 EQUOVR ,,b,UCMEPMON\n.*\n.* UCMEPA - ARRAY OF 11 BYTES CORRESPONDING TO EACH AREA IN UCMEPARE\nUCMEPUSE EQUOVR ,,b,UCMEPA\nUCMEPADD EQUOVR ,,b,UCMEPA\n.*\n.* UCMEND - ADDR OF LAST DEVICE ENTRY\nUCMEND   EQUOVR ,,U                    * Prevent defaulting to type 0\n.*\n.* Override EJECT-statements (with 'arguments' in the IEECUCM macro)\n.*       EJECTOVR *NOERR,9             * Last seen in OS/390 V2R6\n         EJECTOVR *NOERR,12            * First seen in z/OS V1R4\n.*\n         MNOTE *,'Including IEECUCM mapping macro'\n         IEECUCM LIST=YES              * Keep current LIST options\n         EQUOVR *END\n         EJECTOVR *END\n*\nUCM      DSECT ,                       * Resume UCM DSECT\n         ORG\nUCM_LEN  EQU   *-UCM                   * Length of UCM\n*\nUCMEFEXT DSECT ,                       * Resume UCM inividual device\n         ORG   ,                       *          Entry Fixed EXTension\nUCMEFEXT_LEN EQU *-UCMEFEXT            * Length of UCMEFEXT\n*\nUCMEIL   DSECT ,                       * Resume UCM Event Indication\n         ORG   ,                       *                        List\nUCMEIL_LEN EQU *-UCMEIL                * Length of UCMEIL\n*\nUCMEPEXT DSECT ,                       * Resume UCM individual device\n         ORG   ,                       *       Entry Pageable EXTension\nUCMEPEXT_LEN EQU *-UCMEPEXT            * Length of UCMEPEXT\n*\nUCMFEXTA DSECT ,                       * Resume UCM Fixed EXTension\n         ORG   ,                       *                       bAse\nUCMFEXTA_LEN EQU *-UCMFEXTA            * Length of UCMFEXTA\n*\nUCMFSAVE DSECT ,                       * Resume UCM Fixed extension\n         ORG   ,                       *                     SAVE area\nUCMFSAVE_LEN EQU *-UCMFSAVE            * Length of UCMFSAVE\n*\nUCMLIST  DSECT ,                       * Resume LIST of individual\n         ORG   ,                       *            device entry maps\nUCMLIST_LEN EQU *-UCMLIST              * Length of UCMLIST\n*\nUCMPEXTA DSECT ,                       * Resume UCM Pageable EXTension\n         ORG   ,                       *                         bAse\nUCMPEXTA_LEN EQU *-UCMPEXTA            * Length of UCMPEXTA\n*\nUCMPRFX  DSECT ,                       * Resume MCS Prefix area\n         ORG\nUCMPRFX_LEN EQU *-UCMPRFX              * Length of UCMPRFX\n*\nUCM2EXT  DSECT ,                       * Resume OS/VS2 extension\n         ORG\nUCM2EXT_LEN EQU *-UCM2EXT              * Length of UCM2EXT\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPVRA   0100-20096-20096-0111-00235-00235-00000-BIXSMAC 34\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Variable Recording Area (part of SDWA)\n.*\n&LABEL   MAPVRA &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPVRA                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPVRA         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'VRA').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPVRA).MEND\n&BXA_MAC_MAPVRA SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_VRA\n&BXA_CB_VRA SETC 'VRA'\n.*\n.* VRAKEY - KEY TO IDENTIFY THE DATA THAT FOLLOWS.\nVRACOM   EQUOVR ,,v,VRAKEY\nVRASC    EQUOVR ,,v,VRAKEY\nVRALVL   EQUOVR ,,v,VRAKEY\nVRADT    EQUOVR ,,v,VRAKEY\nVRAPTF   EQUOVR ,,v,VRAKEY\nVRARC    EQUOVR ,,v,VRAKEY\nVRAQVOD  EQUOVR ,,v,VRAKEY\nVRAQERR  EQUOVR ,,v,VRAKEY\nVRALVLS  EQUOVR ,,v,VRAKEY\nVRARRP   EQUOVR ,,v,VRAKEY\nVRACBM   EQUOVR ,,v,VRAKEY\nVRACB    EQUOVR ,,v,VRAKEY\nVRACBF   EQUOVR ,,v,VRAKEY\nVRACBA   EQUOVR ,,v,VRAKEY\nVRACBO   EQUOVR ,,v,VRAKEY\nVRACBL   EQUOVR ,,v,VRAKEY\nVRACBI   EQUOVR ,,v,VRAKEY\nVRACBIA  EQUOVR ,,v,VRAKEY\nVRACBI2  EQUOVR ,,v,VRAKEY\nVRAPLI   EQUOVR ,,v,VRAKEY\nVRAPL    EQUOVR ,,v,VRAKEY\nVRAFPI   EQUOVR ,,v,VRAKEY\nVRAFP    EQUOVR ,,v,VRAKEY\nVRAPA    EQUOVR ,,v,VRAKEY\nVRAP2    EQUOVR ,,v,VRAKEY\nVRALK    EQUOVR ,,v,VRAKEY\nVRAWAI   EQUOVR ,,v,VRAKEY\nVRAWA    EQUOVR ,,v,VRAKEY\nVRAWAP   EQUOVR ,,v,VRAKEY\nVRALBL   EQUOVR ,,v,VRAKEY\nVRARRL   EQUOVR ,,v,VRAKEY\nVRAMID   EQUOVR ,,v,VRAKEY\nVRAMSG   EQUOVR ,,v,VRAKEY\nVRAERR   EQUOVR ,,v,VRAKEY\nVRAEHX   EQUOVR ,,v,VRAKEY\nVRAHID   EQUOVR ,,v,VRAKEY\nVRAHEX   EQUOVR ,,v,VRAKEY\nVRAEBC   EQUOVR ,,v,VRAKEY\nVRAAID   EQUOVR ,,v,VRAKEY\nVRATCB   EQUOVR ,,v,VRAKEY\nVRACA    EQUOVR ,,v,VRAKEY\nVRACAN   EQUOVR ,,v,VRAKEY\nVRAOA    EQUOVR ,,v,VRAKEY\nVRAPSW   EQUOVR ,,v,VRAKEY\nVRAINS   EQUOVR ,,v,VRAKEY\nVRAREGS  EQUOVR ,,v,VRAKEY\nVRAREGA  EQUOVR ,,v,VRAKEY\nVRAOR15  EQUOVR ,,v,VRAKEY\nVRADSN   EQUOVR ,,v,VRAKEY\nVRADEV   EQUOVR ,,v,VRAKEY\nVRASN    EQUOVR ,,v,VRAKEY\nVRAST    EQUOVR ,,v,VRAKEY\nVRAU     EQUOVR ,,v,VRAKEY\nVRACCW   EQUOVR ,,v,VRAKEY\nVRACSW   EQUOVR ,,v,VRAKEY\nVRADVT   EQUOVR ,,v,VRAKEY\nVRAVOL   EQUOVR ,,v,VRAKEY\nVRAREQ   EQUOVR ,,v,VRAKEY\nVRAOPT   EQUOVR ,,v,VRAKEY\nVRAMINSC EQUOVR ,,v,VRAKEY\nVRADAE   EQUOVR ,,v,VRAKEY\nVRAMINSL EQUOVR ,,v,VRAKEY\nVRAFREG  EQUOVR ,,v,VRAKEY\nVRACSCB  EQUOVR ,,v,VRAKEY\nVRACSCBA EQUOVR ,,v,VRAKEY\nVRAJOB   EQUOVR ,,v,VRAKEY\nVRASTP   EQUOVR ,,v,VRAKEY\nVRACMD   EQUOVR ,,v,VRAKEY\nVRAJCL   EQUOVR ,,v,VRAKEY\nVRANODAE EQUOVR ,,v,VRAKEY\nVRAEPN   EQUOVR ,,v,VRAKEY\nVRAETF   EQUOVR ,,v,VRAKEY\nVRACTF   EQUOVR ,,v,VRAKEY\nVRALTF   EQUOVR ,,v,VRAKEY\nVRAMO    EQUOVR ,,v,VRAKEY\nVRAILO   EQUOVR ,,v,VRAKEY\nVRAIMO   EQUOVR ,,v,VRAKEY\nVRAFID   EQUOVR ,,v,VRAKEY\nVRAPID   EQUOVR ,,v,VRAKEY\nVRAIAP   EQUOVR ,,v,VRAKEY\nVRAIAL   EQUOVR ,,v,VRAKEY\nVRAICL   EQUOVR ,,v,VRAKEY\nVRAIDP   EQUOVR ,,v,VRAKEY\nVRALKWA  EQUOVR ,,v,VRAKEY\nVRARRK   EQUOVR ,,v,VRAKEY\nVRARRK1  EQUOVR ,,v,VRAKEY\nVRARRK2  EQUOVR ,,v,VRAKEY\nVRARRK3  EQUOVR ,,v,VRAKEY\nVRARRK4  EQUOVR ,,v,VRAKEY\nVRARRK5  EQUOVR ,,v,VRAKEY\nVRARRK6  EQUOVR ,,v,VRAKEY\nVRARRK7  EQUOVR ,,v,VRAKEY\nVRARRK8  EQUOVR ,,v,VRAKEY\nVRARRK9  EQUOVR ,,v,VRAKEY\nVRARRK10 EQUOVR ,,v,VRAKEY\nVRARRK11 EQUOVR ,,v,VRAKEY\nVRARRK12 EQUOVR ,,v,VRAKEY\nVRARRK13 EQUOVR ,,v,VRAKEY\nVRARRK14 EQUOVR ,,v,VRAKEY\nVRARRK15 EQUOVR ,,v,VRAKEY\nVRARRK16 EQUOVR ,,v,VRAKEY\nVRARRK17 EQUOVR ,,v,VRAKEY\nVRARRK18 EQUOVR ,,v,VRAKEY\nVRARRK19 EQUOVR ,,v,VRAKEY\nVRARRK20 EQUOVR ,,v,VRAKEY\nVRARRK21 EQUOVR ,,v,VRAKEY\nVRARRK22 EQUOVR ,,v,VRAKEY\nVRARRK23 EQUOVR ,,v,VRAKEY\nVRARRK24 EQUOVR ,,v,VRAKEY\nVRARRK25 EQUOVR ,,v,VRAKEY\nVRARRK26 EQUOVR ,,v,VRAKEY\nVRARRK27 EQUOVR ,,v,VRAKEY\nVRARRK28 EQUOVR ,,v,VRAKEY\nVRARRK29 EQUOVR ,,v,VRAKEY\nVRARRK30 EQUOVR ,,v,VRAKEY\nVRARRK31 EQUOVR ,,v,VRAKEY\nVRARRK32 EQUOVR ,,v,VRAKEY\nVRARRK33 EQUOVR ,,v,VRAKEY\nVRARRK34 EQUOVR ,,v,VRAKEY\nVRARRK35 EQUOVR ,,v,VRAKEY\nVRARRK36 EQUOVR ,,v,VRAKEY\nVRARRK37 EQUOVR ,,v,VRAKEY\nVRARRK38 EQUOVR ,,v,VRAKEY\nVRARRK39 EQUOVR ,,v,VRAKEY\nVRASKP   EQUOVR ,,v,VRAKEY\nVRAEND   EQUOVR ,,v,VRAKEY\n.*\n         MNOTE *,'Including IHAVRA mapping macro'\n         IHAVRA DSECT=YES              * Include DSECT statement\n         EQUOVR *END\n*\nVRAMAP   DSECT ,                       * Restart VRA\nVRA      EQU   VRAMAP                  * Alias of VRAMAP\n         ORG   ,                       *\nVRA_LEN  EQU   *-VRA                   * Length of VRA\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPVSL   0100-20096-20096-0111-00126-00126-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the Virtual Subarea List entry\n.*\n&LABEL   MAPVSL &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPVSL                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPVSL         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'VSL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPVSL).MEND\n&BXA_MAC_MAPVSL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_VSL\n&BXA_CB_VSL SETC 'VSL'\n.*\n.* VSLFLAG1 - FIRST FLAG FIELD\nVSLCONT  EQUOVR ,,b,VSLFLAG1\nVSLFIX   EQUOVR ,,b,VSLFLAG1\nVSLFREE  EQUOVR ,,b,VSLFLAG1\nVSLOAD   EQUOVR ,,b,VSLFLAG1\nVSLRLS   EQUOVR ,,b,VSLFLAG1\nVSLANYW  EQUOVR ,,b,VSLFLAG1\nVSLONG   EQUOVR ,,b,VSLFLAG1\nVSLRSV2  EQUOVR ,,b,VSLFLAG1\n.*\n.* VSLFLAG2 - SECOND FLAG FIELD\nVSLAST   EQUOVR ,,b,VSLFLAG2\nVSLNULL  EQUOVR ,,b,VSLFLAG2\nVSLRAO   EQUOVR ,,b,VSLFLAG2\nVSLERR   EQUOVR ,,b,VSLFLAG2\nVSLRSV3  EQUOVR ,,b,VSLFLAG2\nVSLPGOUT EQUOVR ,,b,VSLFLAG2\nVSLKEPRL EQUOVR ,,b,VSLFLAG2\nVSLEXTRS EQUOVR ,,b,VSLFLAG2\n.*\n         MNOTE *,'Including IHAVSL mapping macro'\n         IHAVSL ,\n         EQUOVR *END\n*\nVSL      DSECT ,                       * Resume VSL DSECT\n         ORG\nVSL_LEN  EQU   *-VSL                   * Length of VSL\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPWQE   0100-20096-20096-0111-01040-01040-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the WTO Queue ELement\n.*\n&LABEL   MAPWQE &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPWQE                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPWQE         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'WQE').EMBED\n         AIF   ('&CB' EQ 'WQEMAJ').EMBED\n         AIF   ('&CB' EQ 'WQEMIN').EMBED\n         AIF   ('&CB' EQ 'WQESYAR').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPWQE).MEND\n&BXA_MAC_MAPWQE SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_WQE\n         GBLC  &BXA_CB_WQEMAJ\n         GBLC  &BXA_CB_WQEMIN\n         GBLC  &BXA_CB_WQESYAR\n&BXA_CB_WQE SETC 'WQE'\n&BXA_CB_WQEMAJ SETC 'WQE'\n&BXA_CB_WQEMIN SETC 'WQE'\n&BXA_CB_WQESYAR SETC 'WQE'\n.*\n.* WQEXA - DISPOSITION FLAGS\nWQEPURGE EQUOVR ,,b,WQEXA\nWQEQFHC  EQUOVR ,,b,WQEXA\nWQEORE   EQUOVR ,,b,WQEXA\nWQEQDFHC EQUOVR ,,b,WQEXA\nWQEWTOR  EQUOVR ,,b,WQEXA\nWQEDOM   EQUOVR ,,b,WQEXA\nWQESUSP  EQUOVR ,,b,WQEXA\nWQEAUTH  EQUOVR ,,b,WQEXA\n.*\n.* WQEAVAIL - BUFFER STATUS FLAGS\nWQEBUFA  EQUOVR ,,b,WQEAVAIL\nWQEBUFB  EQUOVR ,,b,WQEAVAIL\nWQEBUFC  EQUOVR ,,b,WQEAVAIL\nWQEBUFD  EQUOVR ,,b,WQEAVAIL\nWQEBUFE  EQUOVR ,,b,WQEAVAIL\nWQEBUFF  EQUOVR ,,b,WQEAVAIL\nWQEBUFG  EQUOVR ,,b,WQEAVAIL\nWQEMTRCD EQUOVR ,,b,WQEAVAIL\n.*\n.* WQEMCSF1 - FIRST BYTE OF MCS FLAGS\nWQEMCSA  EQUOVR ,,b,WQEMCSF1\nWQEMCSB  EQUOVR ,,b,WQEMCSF1\nWQEMCSC  EQUOVR ,,b,WQEMCSF1\nWQEMCSD  EQUOVR ,,b,WQEMCSF1\nWQEMCSE  EQUOVR ,,b,WQEMCSF1\nWQEMCSFF EQUOVR ,,b,WQEMCSF1\nWQEMCSG  EQUOVR ,,b,WQEMCSF1\nWQEMCSH  EQUOVR ,,b,WQEMCSF1\n.*\n.* WQEMCSF2 - SECOND BYTE OF MCS FLAGS\nWQEMCSI  EQUOVR ,,b,WQEMCSF2\nWQEMCSJ  EQUOVR ,,b,WQEMCSF2\nWQEMCSK  EQUOVR ,,b,WQEMCSF2\nWQEMCSL  EQUOVR ,,b,WQEMCSF2\nWQEMCSM  EQUOVR ,,b,WQEMCSF2\nWQEMCSN  EQUOVR ,,b,WQEMCSF2\nWQEMCSO  EQUOVR ,,b,WQEMCSF2\nWQEMCSP  EQUOVR ,,b,WQEMCSF2\n.*\n.* WQEMSGTP - FIRST BYTE OF MESSAGE TYPE FLAGS\nWQEMSGTA EQUOVR ,,b,WQEMSGTP\nWQEMSGTB EQUOVR ,,b,WQEMSGTP\nWQEMSGTC EQUOVR ,,b,WQEMSGTP\nWQEMSGTD EQUOVR ,,b,WQEMSGTP\nWQERSV13 EQUOVR ,,b,WQEMSGTP\nWQEMSGTF EQUOVR ,,b,WQEMSGTP\nWQERSV14 EQUOVR ,,b,WQEMSGTP\nWQERSV15 EQUOVR ,,b,WQEMSGTP\n.*\n.* WQEROUT1 - 1ST BYTE OF ROUTING CODES\nWQEROUTA EQUOVR ,,b,WQEROUT1\nWQEROUTB EQUOVR ,,b,WQEROUT1\nWQEROUTC EQUOVR ,,b,WQEROUT1\nWQEROUTD EQUOVR ,,b,WQEROUT1\nWQEROUTE EQUOVR ,,b,WQEROUT1\nWQEROUTF EQUOVR ,,b,WQEROUT1\nWQEROUTG EQUOVR ,,b,WQEROUT1\nWQEROUTH EQUOVR ,,b,WQEROUT1\n.*\n.* WQEROUT2 - 2ND BYTE OF ROUTING CODES\nWQEROUTI EQUOVR ,,b,WQEROUT2\nWQEROUTJ EQUOVR ,,b,WQEROUT2\nWQEROUTK EQUOVR ,,b,WQEROUT2\nWQEROUTL EQUOVR ,,b,WQEROUT2\nWQEROUTM EQUOVR ,,b,WQEROUT2\nWQEROUTN EQUOVR ,,b,WQEROUT2\nWQEROUTO EQUOVR ,,b,WQEROUT2\nWQEROUTP EQUOVR ,,b,WQEROUT2\n.*\n.* WQEFLG3 - MISCELLANEOUS FLAGS\nWQEDLVRD EQUOVR ,,b,WQEFLG3\nWQEDNDWQ EQUOVR ,,b,WQEFLG3\nWQENSYL  EQUOVR ,,b,WQEFLG3\nWQEJ3B1  EQUOVR ,,b,WQEFLG3\nWQEJ3B2  EQUOVR ,,b,WQEFLG3\n.*\n.* WQEFLG1 - MISCELLANEOUS FLAGS\nWQEFLG11 EQUOVR ,,b,WQEFLG1\nWQERETAN EQUOVR ,,b,WQEFLG1\nWQENMOD  EQUOVR ,,b,WQEFLG1\nWQESQMC  EQUOVR ,,b,WQEFLG1\nWQENOJLG EQUOVR ,,b,WQEFLG1\nWQEAUTOV EQUOVR ,,b,WQEFLG1\nWQEPPNA  EQUOVR ,,b,WQEFLG1\nWQERISS  EQUOVR ,,b,WQEFLG1\n.*\n.* WQEDC1 - FIRST BYTE OF DESCRIPTOR CODES\nWQEDCA   EQUOVR ,,b,WQEDC1\nWQEDCB   EQUOVR ,,b,WQEDC1\nWQEDCC   EQUOVR ,,b,WQEDC1\nWQEDCD   EQUOVR ,,b,WQEDC1\nWQEDCE   EQUOVR ,,b,WQEDC1\nWQEDCF   EQUOVR ,,b,WQEDC1\nWQEDCG   EQUOVR ,,b,WQEDC1\nWQEDCH   EQUOVR ,,b,WQEDC1\n.*\n.* WQEDC2 - SECOND BYTE OF DESCRIPTOR CODES\nWQEDCI   EQUOVR ,,b,WQEDC2\nWQEDCJ   EQUOVR ,,b,WQEDC2\nWQEDCK   EQUOVR ,,b,WQEDC2\nWQEDCL   EQUOVR ,,b,WQEDC2\nWQEDCM   EQUOVR ,,b,WQEDC2\nWQERSV23 EQUOVR ,,b,WQEDC2\nWQERSV24 EQUOVR ,,b,WQEDC2\nWQERSV25 EQUOVR ,,b,WQEDC2\n.*\n.* WQEVRSN - VERSION LEVEL\nWQESP211 EQUOVR ,,v,WQEVRSN\nWQESP220 EQUOVR ,,v,WQEVRSN\nWQESP410 EQUOVR ,,v,WQEVRSN\nWQESP422 EQUOVR ,,v,WQEVRSN\nWQESP440 EQUOVR ,,v,WQEVRSN\nWQEVRID  EQUOVR ,,v,WQEVRSN\n.*\n.* WQEFLG2 - MISC FLAGS BYTE 2\nWQEHNDL  EQUOVR ,,b,WQEFLG2\nWQERSV98 EQUOVR ,,b,WQEFLG2\nWQEFORN  EQUOVR ,,b,WQEFLG2\nWQETRANS EQUOVR ,,b,WQEFLG2\nWQESUPSJ EQUOVR ,,b,WQEFLG2\nWQEQXSYS EQUOVR ,,b,WQEFLG2\nWQEQEXT  EQUOVR ,,b,WQEFLG2\nWQEQMCS  EQUOVR ,,b,WQEFLG2\n.*\n.* WQEMCSE1 - FIRST BYTE\nWQEEBUSY EQUOVR ,,b,WQEMCSE1\nWQEECONS EQUOVR ,,b,WQEMCSE1\nWQEEDOMI EQUOVR ,,b,WQEMCSE1\nWQEECONN EQUOVR ,,b,WQEMCSE1\nWQEEWTOR EQUOVR ,,b,WQEMCSE1\nWQEEPRIO EQUOVR ,,b,WQEMCSE1\nWQECNM   EQUOVR ,,b,WQEMCSE1\n.*\n.* WQEMCSE2 - SECOND BYTE OF EXT MCS FLAGS\nWQEETXTA EQUOVR ,,b,WQEMCSE2\nWQERSV99 EQUOVR ,,b,WQEMCSE2\nWQEEDBCS EQUOVR ,,b,WQEMCSE2\nWQEEIDBC EQUOVR ,,b,WQEMCSE2\nWQERSV1B EQUOVR ,,b,WQEMCSE2\nWQEESYNC EQUOVR ,,b,WQEMCSE2\nWQERSV1C EQUOVR ,,b,WQEMCSE2\nWQERSV1D EQUOVR ,,b,WQEMCSE2\n.*\n.* WQERFB1 - REQUEST FLAGS BYTE ONE\nWQERCMT  EQUOVR ,,b,WQERFB1\nWQERCRC  EQUOVR ,,b,WQERFB1\nWQERCDC  EQUOVR ,,b,WQERFB1\nWQERQPC  EQUOVR ,,b,WQERFB1\nWQERQUN  EQUOVR ,,b,WQERFB1\nWQERQRC  EQUOVR ,,b,WQERFB1\nWQERCCN  EQUOVR ,,b,WQERFB1\nWQERPML  EQUOVR ,,b,WQERFB1\n.*\n.* WQERFB2 - REQUEST FLAGS BYTE TWO\nWQERDTM  EQUOVR ,,b,WQERFB2\nWQEROMS  EQUOVR ,,b,WQERFB2\nWQERFHC  EQUOVR ,,b,WQERFB2\nWQERNHC  EQUOVR ,,b,WQERFB2\nWQERHCO  EQUOVR ,,b,WQERFB2\nWQERBCA  EQUOVR ,,b,WQERFB2\nWQERBCN  EQUOVR ,,b,WQERFB2\nWQERNRT  EQUOVR ,,b,WQERFB2\n.*\n.* WQERFB3 - REQUEST FLAGS BYTE THREE\nWQERRET  EQUOVR ,,b,WQERFB3\nWQERCKY  EQUOVR ,,b,WQERFB3\nWQERCFC  EQUOVR ,,b,WQERFB3\nWQERCMF  EQUOVR ,,b,WQERFB3\nWQERANO  EQUOVR ,,b,WQERFB3\nWQERAYS  EQUOVR ,,b,WQERFB3\nWQEQHCO  EQUOVR ,,b,WQERFB3\nWQEHUD   EQUOVR ,,b,WQERFB3\n.*\n.* WQESUPB - SUPPRESSION BYTE\nWQESNSV  EQUOVR ,,b,WQESUPB\nWQESEER  EQUOVR ,,b,WQESUPB\nWQESNSI  EQUOVR ,,b,WQESUPB\nWQESAUT  EQUOVR ,,b,WQESUPB\nWQESQED  EQUOVR ,,b,WQESUPB\nWQESSSI  EQUOVR ,,b,WQESUPB\nWQESWTO  EQUOVR ,,b,WQESUPB\nWQESMPF  EQUOVR ,,b,WQESUPB\n.*\n.* WQEML1 - FIRST BYTE OF LEVEL INDICATOR\nWQEMLR   EQUOVR ,,b,WQEML1\nWQEMLIA  EQUOVR ,,b,WQEML1\nWQEMLCE  EQUOVR ,,b,WQEML1\nWQEMLE   EQUOVR ,,b,WQEML1\nWQEMLI   EQUOVR ,,b,WQEML1\nWQEMLBC  EQUOVR ,,b,WQEML1\n.*\n.* WQEERC1 - BYTE 1  - EXTENDED ROUTING CODES\nWQERC1   EQUOVR ,,b,WQEERC1\nWQERC2   EQUOVR ,,b,WQEERC1\nWQERC3   EQUOVR ,,b,WQEERC1\nWQERC4   EQUOVR ,,b,WQEERC1\nWQERC5   EQUOVR ,,b,WQEERC1\nWQERC6   EQUOVR ,,b,WQEERC1\nWQERC7   EQUOVR ,,b,WQEERC1\nWQERC8   EQUOVR ,,b,WQEERC1\n.*\n.* WQEERC2 - BYTE 2  - EXTENDED ROUTING CODES\nWQERC9   EQUOVR ,,b,WQEERC2\nWQERC10  EQUOVR ,,b,WQEERC2\nWQERC11  EQUOVR ,,b,WQEERC2\nWQERC12  EQUOVR ,,b,WQEERC2\nWQERC13  EQUOVR ,,b,WQEERC2\nWQERC14  EQUOVR ,,b,WQEERC2\nWQERC15  EQUOVR ,,b,WQEERC2\nWQERC16  EQUOVR ,,b,WQEERC2\n.*\n.* WQEERC3 - BYTE 3  - EXTENDED ROUTING CODES\nWQERC17  EQUOVR ,,b,WQEERC3\nWQERC18  EQUOVR ,,b,WQEERC3\nWQERC19  EQUOVR ,,b,WQEERC3\nWQERC20  EQUOVR ,,b,WQEERC3\nWQERC21  EQUOVR ,,b,WQEERC3\nWQERC22  EQUOVR ,,b,WQEERC3\nWQERC23  EQUOVR ,,b,WQEERC3\nWQERC24  EQUOVR ,,b,WQEERC3\n.*\n.* WQEERC4 - BYTE 4  - EXTENDED ROUTING CODES\nWQERC25  EQUOVR ,,b,WQEERC4\nWQERC26  EQUOVR ,,b,WQEERC4\nWQERC27  EQUOVR ,,b,WQEERC4\nWQERC28  EQUOVR ,,b,WQEERC4\nWQERC29  EQUOVR ,,b,WQEERC4\nWQERC30  EQUOVR ,,b,WQEERC4\nWQERC31  EQUOVR ,,b,WQEERC4\nWQERC32  EQUOVR ,,b,WQEERC4\n.*\n.* WQEERC5 - BYTE 5  - EXTENDED ROUTING CODES\nWQERC33  EQUOVR ,,b,WQEERC5\nWQERC34  EQUOVR ,,b,WQEERC5\nWQERC35  EQUOVR ,,b,WQEERC5\nWQERC36  EQUOVR ,,b,WQEERC5\nWQERC37  EQUOVR ,,b,WQEERC5\nWQERC38  EQUOVR ,,b,WQEERC5\nWQERC39  EQUOVR ,,b,WQEERC5\nWQERC40  EQUOVR ,,b,WQEERC5\n.*\n.* WQEERC6 - BYTE 6  - EXTENDED ROUTING CODES\nWQERC41  EQUOVR ,,b,WQEERC6\nWQERC42  EQUOVR ,,b,WQEERC6\nWQERC43  EQUOVR ,,b,WQEERC6\nWQERC44  EQUOVR ,,b,WQEERC6\nWQERC45  EQUOVR ,,b,WQEERC6\nWQERC46  EQUOVR ,,b,WQEERC6\nWQERC47  EQUOVR ,,b,WQEERC6\nWQERC48  EQUOVR ,,b,WQEERC6\n.*\n.* WQEERC7 - BYTE 7  - EXTENDED ROUTING CODES\nWQERC49  EQUOVR ,,b,WQEERC7\nWQERC50  EQUOVR ,,b,WQEERC7\nWQERC51  EQUOVR ,,b,WQEERC7\nWQERC52  EQUOVR ,,b,WQEERC7\nWQERC53  EQUOVR ,,b,WQEERC7\nWQERC54  EQUOVR ,,b,WQEERC7\nWQERC55  EQUOVR ,,b,WQEERC7\nWQERC56  EQUOVR ,,b,WQEERC7\n.*\n.* WQEERC8 - BYTE 8  - EXTENDED ROUTING CODES\nWQERC57  EQUOVR ,,b,WQEERC8\nWQERC58  EQUOVR ,,b,WQEERC8\nWQERC59  EQUOVR ,,b,WQEERC8\nWQERC60  EQUOVR ,,b,WQEERC8\nWQERC61  EQUOVR ,,b,WQEERC8\nWQERC62  EQUOVR ,,b,WQEERC8\nWQERC63  EQUOVR ,,b,WQEERC8\nWQERC64  EQUOVR ,,b,WQEERC8\n.*\n.* WQEERC9 - BYTE 9  - EXTENDED ROUTING CODES\nWQERC65  EQUOVR ,,b,WQEERC9\nWQERC66  EQUOVR ,,b,WQEERC9\nWQERC67  EQUOVR ,,b,WQEERC9\nWQERC68  EQUOVR ,,b,WQEERC9\nWQERC69  EQUOVR ,,b,WQEERC9\nWQERC70  EQUOVR ,,b,WQEERC9\nWQERC71  EQUOVR ,,b,WQEERC9\nWQERC72  EQUOVR ,,b,WQEERC9\n.*\n.* WQEERC10 - BYTE 10 - EXTENDED ROUTING CODES\nWQERC73  EQUOVR ,,b,WQEERC10\nWQERC74  EQUOVR ,,b,WQEERC10\nWQERC75  EQUOVR ,,b,WQEERC10\nWQERC76  EQUOVR ,,b,WQEERC10\nWQERC77  EQUOVR ,,b,WQEERC10\nWQERC78  EQUOVR ,,b,WQEERC10\nWQERC79  EQUOVR ,,b,WQEERC10\nWQERC80  EQUOVR ,,b,WQEERC10\n.*\n.* WQEERC11 - BYTE 11 - EXTENDED ROUTING CODES\nWQERC81  EQUOVR ,,b,WQEERC11\nWQERC82  EQUOVR ,,b,WQEERC11\nWQERC83  EQUOVR ,,b,WQEERC11\nWQERC84  EQUOVR ,,b,WQEERC11\nWQERC85  EQUOVR ,,b,WQEERC11\nWQERC86  EQUOVR ,,b,WQEERC11\nWQERC87  EQUOVR ,,b,WQEERC11\nWQERC88  EQUOVR ,,b,WQEERC11\n.*\n.* WQEERC12 - BYTE 12 - EXTENDED ROUTING CODES\nWQERC89  EQUOVR ,,b,WQEERC12\nWQERC90  EQUOVR ,,b,WQEERC12\nWQERC91  EQUOVR ,,b,WQEERC12\nWQERC92  EQUOVR ,,b,WQEERC12\nWQERC93  EQUOVR ,,b,WQEERC12\nWQERC94  EQUOVR ,,b,WQEERC12\nWQERC95  EQUOVR ,,b,WQEERC12\nWQERC96  EQUOVR ,,b,WQEERC12\n.*\n.* WQEERC13 - BYTE 13 - EXTENDED ROUTING CODES\nWQERC97  EQUOVR ,,b,WQEERC13\nWQERC98  EQUOVR ,,b,WQEERC13\nWQERC99  EQUOVR ,,b,WQEERC13\nWQERC100 EQUOVR ,,b,WQEERC13\nWQERC101 EQUOVR ,,b,WQEERC13\nWQERC102 EQUOVR ,,b,WQEERC13\nWQERC103 EQUOVR ,,b,WQEERC13\nWQERC104 EQUOVR ,,b,WQEERC13\n.*\n.* WQEERC14 - BYTE 14 - EXTENDED ROUTING CODES\nWQERC105 EQUOVR ,,b,WQEERC14\nWQERC106 EQUOVR ,,b,WQEERC14\nWQERC107 EQUOVR ,,b,WQEERC14\nWQERC108 EQUOVR ,,b,WQEERC14\nWQERC109 EQUOVR ,,b,WQEERC14\nWQERC110 EQUOVR ,,b,WQEERC14\nWQERC111 EQUOVR ,,b,WQEERC14\nWQERC112 EQUOVR ,,b,WQEERC14\n.*\n.* WQEERC15 - BYTE 15 - EXTENDED ROUTING CODES\nWQERC113 EQUOVR ,,b,WQEERC15\nWQERC114 EQUOVR ,,b,WQEERC15\nWQERC115 EQUOVR ,,b,WQEERC15\nWQERC116 EQUOVR ,,b,WQEERC15\nWQERC117 EQUOVR ,,b,WQEERC15\nWQERC118 EQUOVR ,,b,WQEERC15\nWQERC119 EQUOVR ,,b,WQEERC15\nWQERC120 EQUOVR ,,b,WQEERC15\n.*\n.* WQEERC16 - BYTE 16 - EXTENDED ROUTING CODES\nWQERC121 EQUOVR ,,b,WQEERC16\nWQERC122 EQUOVR ,,b,WQEERC16\nWQERC123 EQUOVR ,,b,WQEERC16\nWQERC124 EQUOVR ,,b,WQEERC16\nWQERC125 EQUOVR ,,b,WQEERC16\nWQERC126 EQUOVR ,,b,WQEERC16\nWQERC127 EQUOVR ,,b,WQEERC16\nWQERC128 EQUOVR ,,b,WQEERC16\n.*\n.* WQEERF1 - REQUEST FLAGS BYTE ONE\nWQEEMRY  EQUOVR ,,b,WQEERF1\nWQEEMRN  EQUOVR ,,b,WQEERF1\nWQEEMCO  EQUOVR ,,b,WQEERF1\nWQEEMHI  EQUOVR ,,b,WQEERF1\nWQEEMIN  EQUOVR ,,b,WQEERF1\n.*\n.* WQEXIF1 - MISC AND MINOR ERROR FLAG BYTE 1\nWQEXTTR  EQUOVR ,,b,WQEXIF1\nWQEXNVT  EQUOVR ,,b,WQEXIF1\nWQEXMER  EQUOVR ,,b,WQEXIF1\nWQEXIRM  EQUOVR ,,b,WQEXIF1\nWQEDMDB  EQUOVR ,,b,WQEXIF1\n.*\n.* WQEXIF2 - MISC AND MINOR ERROR FLAG BYTE 2\nWQEQONLY EQUOVR ,,b,WQEXIF2\nWQEAMRFO EQUOVR ,,b,WQEXIF2\nWQEAMRFA EQUOVR ,,b,WQEXIF2\nWQEQD    EQUOVR ,,b,WQEXIF2\nWQEWTPR  EQUOVR ,,b,WQEXIF2\nWQEMFR   EQUOVR ,,b,WQEXIF2\nWQEAMRFR EQUOVR ,,b,WQEXIF2\nWQEQTSYS EQUOVR ,,b,WQEXIF2\n.*\n.* WQEBENIP -  BRANCH ENTRY/NIP FLAGS\nWQEDOMD  EQUOVR ,,b,WQEBENIP\nWQENBEW  EQUOVR ,,b,WQEBENIP\nWQENHABD EQUOVR ,,b,WQEBENIP\nWQEASCB  EQUOVR ,,b,WQEBENIP\n.*\n.* WQEMISC - MISCELLANEOUS ROUTING INFORMATION\nWQEUD    EQUOVR ,,b,WQEMISC\nWQEFUDO  EQUOVR ,,b,WQEMISC\nWQEFIDO  EQUOVR ,,b,WQEMISC\nWQEAUTO  EQUOVR ,,b,WQEMISC\nWQEHC    EQUOVR ,,b,WQEMISC\n.*\n.* WQEMISCC - MISCELLANEOUS CONTROL PROGRAM FLAGS\nWQESPVD  EQUOVR ,,b,WQEMISCC\nWQEPRIV  EQUOVR ,,b,WQEMISCC\nWQEQNLY  EQUOVR ,,b,WQEMISCC\n.*\n.* WMJMMLW - MLWTO FLAGS\nWMJMMLWA EQUOVR ,,b,WMJMMLW\nWMJMMLWB EQUOVR ,,b,WMJMMLW\nWMJMMLWC EQUOVR ,,b,WMJMMLW\nWMJMMLWD EQUOVR ,,b,WMJMMLW\nWMJMMLWE EQUOVR ,,b,WMJMMLW\nWMJMMLWF EQUOVR ,,b,WMJMMLW\nWMJMMLWG EQUOVR ,,b,WMJMMLW\nWMJMMLWH EQUOVR ,,b,WMJMMLW\n.*\n.* WMJMSER1 - 1ST BYTE OF LINE CONTROL FLAGS\nWMJMSERA EQUOVR ,,b,WMJMSER1\nWMJMSERB EQUOVR ,,b,WMJMSER1\nWMJMSERC EQUOVR ,,b,WMJMSER1\nWMJMSERD EQUOVR ,,b,WMJMSER1\nWMJMSERE EQUOVR ,,b,WMJMSER1\nWQERSV31 EQUOVR ,,b,WMJMSER1\nWQERSV32 EQUOVR ,,b,WMJMSER1\nWQERSV33 EQUOVR ,,b,WMJMSER1\n.*\n.* WMJMLTY1 - 1ST BYTE OF LINE TYPE FLAGS\nWMJMLTYA EQUOVR ,,b,WMJMLTY1\nWMJMLTYB EQUOVR ,,b,WMJMLTY1\nWMJMLTYC EQUOVR ,,b,WMJMLTY1\nWMJMLTYD EQUOVR ,,b,WMJMLTY1\nWQERSV35 EQUOVR ,,b,WMJMLTY1\nWQERSV36 EQUOVR ,,b,WMJMLTY1\nWQERSV37 EQUOVR ,,b,WMJMLTY1\nWQERSV38 EQUOVR ,,b,WMJMLTY1\n.*\n.* WMJMECBF - STATUS FLAGS\nWMJMWAIT EQUOVR ,,b,WMJMECBF\nWMJMMAJD EQUOVR ,,b,WMJMECBF\nWMJMCONS EQUOVR ,,b,WMJMECBF\nWMJMPSB1 EQUOVR ,,b,WMJMECBF\nWMJMRV9A EQUOVR ,,b,WMJMECBF\nWMJMWTP  EQUOVR ,,b,WMJMECBF\nWQERSVD6 EQUOVR ,,b,WMJMECBF\nWQERSVD7 EQUOVR ,,b,WMJMECBF\n.*\n.* WMJMDSP - DISPOSITION FLAGS\nWMJMDSPA EQUOVR ,,b,WMJMDSP\nWMJMDSPB EQUOVR ,,b,WMJMDSP\nWMJMDSPC EQUOVR ,,b,WMJMDSP\nWMJMDSPD EQUOVR ,,b,WMJMDSP\nWMJMDSPE EQUOVR ,,b,WMJMDSP\nWMJMDSPF EQUOVR ,,b,WMJMDSP\nWMJMDSPG EQUOVR ,,b,WMJMDSP\nWMJMDSPH EQUOVR ,,b,WMJMDSP\n.*\n.* WMJMBUF - BUFFER STATUS FLAGS\nWMJMBUFA EQUOVR ,,b,WMJMBUF\nWMJMBUFB EQUOVR ,,b,WMJMBUF\nWMJMBUFC EQUOVR ,,b,WMJMBUF\nWMJMBUFD EQUOVR ,,b,WMJMBUF\nWMJMBUFE EQUOVR ,,b,WMJMBUF\nWMJMBUFF EQUOVR ,,b,WMJMBUF\nWMJMBUFG EQUOVR ,,b,WMJMBUF\nWMJMTRCD EQUOVR ,,b,WMJMBUF\n.*\n.* WMJMCS1 - 1ST BYTE OF MCS FLAGS\nWMJMCS1A EQUOVR ,,b,WMJMCS1\nWMJMCS1B EQUOVR ,,b,WMJMCS1\nWMJMCS1C EQUOVR ,,b,WMJMCS1\nWMJMCS1D EQUOVR ,,b,WMJMCS1\nWMJMCS1E EQUOVR ,,b,WMJMCS1\nWMJMCS1F EQUOVR ,,b,WMJMCS1\nWMJMCS1G EQUOVR ,,b,WMJMCS1\nWMJMCS1H EQUOVR ,,b,WMJMCS1\n.*\n.* WMJMCS2 - 2ND BYTE OF MCS FLAGS\nWMJMCS2A EQUOVR ,,b,WMJMCS2\nWMJMCS2B EQUOVR ,,b,WMJMCS2\nWMJMCS2C EQUOVR ,,b,WMJMCS2\nWMJMCS2D EQUOVR ,,b,WMJMCS2\nWMJMCS2E EQUOVR ,,b,WMJMCS2\nWMJMCS2F EQUOVR ,,b,WMJMCS2\nWMJMCS2G EQUOVR ,,b,WMJMCS2\nWMJMCS2H EQUOVR ,,b,WMJMCS2\n.*\n.* WMJMMT1 - 1ST BYTE OF MESSAGE TYPE FLAGS\nWMJMMT1A EQUOVR ,,b,WMJMMT1\nWMJMMT1B EQUOVR ,,b,WMJMMT1\nWQERSVA6 EQUOVR ,,b,WMJMMT1\nWMJMMT1D EQUOVR ,,b,WMJMMT1\nWQERSV50 EQUOVR ,,b,WMJMMT1\nWMJMMT1F EQUOVR ,,b,WMJMMT1\nWQERSV51 EQUOVR ,,b,WMJMMT1\nWQERSV52 EQUOVR ,,b,WMJMMT1\n.*\n.* WMJMRCT1 - 1ST BYTE OF ROUTING CODES\nWMJMRCTA EQUOVR ,,b,WMJMRCT1\nWMJMRCTB EQUOVR ,,b,WMJMRCT1\nWMJMRCTC EQUOVR ,,b,WMJMRCT1\nWMJMRCTD EQUOVR ,,b,WMJMRCT1\nWMJMRCTE EQUOVR ,,b,WMJMRCT1\nWMJMRCTF EQUOVR ,,b,WMJMRCT1\nWMJMRCTG EQUOVR ,,b,WMJMRCT1\nWMJMRCTH EQUOVR ,,b,WMJMRCT1\n.*\n.* WMJMRCT2 - 2ND BYTE OF ROUTING CODES\nWMJMRCTI EQUOVR ,,b,WMJMRCT2\nWMJMRCTJ EQUOVR ,,b,WMJMRCT2\nWMJMRCTK EQUOVR ,,b,WMJMRCT2\nWMJMRCTL EQUOVR ,,b,WMJMRCT2\nWMJMRCTM EQUOVR ,,b,WMJMRCT2\nWMJMRCTN EQUOVR ,,b,WMJMRCT2\nWMJMRCTO EQUOVR ,,b,WMJMRCT2\nWMJMRCTP EQUOVR ,,b,WMJMRCT2\n.*\n.* WMJMFLG3 - MISCELLANEOUS FLAGS\nWMJDLVRD EQUOVR ,,b,WMJMFLG3\nWMJDNDWQ EQUOVR ,,b,WMJMFLG3\nWMJNSYL  EQUOVR ,,b,WMJMFLG3\nWMJJ3B1  EQUOVR ,,b,WMJMFLG3\nWMJJ3B2  EQUOVR ,,b,WMJMFLG3\n.*\n.* WMJFLG1 - MISCELLANEOUS FLAGS\nWMJFLG11 EQUOVR ,,b,WMJFLG1\nWMJMRETN EQUOVR ,,b,WMJFLG1\nWMJMNMOD EQUOVR ,,b,WMJFLG1\nWMJMSQMC EQUOVR ,,b,WMJFLG1\nWMJNOJLG EQUOVR ,,b,WMJFLG1\nWMJAUTOV EQUOVR ,,b,WMJFLG1\nWMJPPNA  EQUOVR ,,b,WMJFLG1\nWMJMRISS EQUOVR ,,b,WMJFLG1\n.*\n.* WMJMDEC1 - 1ST BYTE OF DESCRIPTOR CODES\nWMJMDECA EQUOVR ,,b,WMJMDEC1\nWMJMDECB EQUOVR ,,b,WMJMDEC1\nWMJMDECC EQUOVR ,,b,WMJMDEC1\nWMJMDECD EQUOVR ,,b,WMJMDEC1\nWMJMDECE EQUOVR ,,b,WMJMDEC1\nWMJMDECF EQUOVR ,,b,WMJMDEC1\nWMJMDECG EQUOVR ,,b,WMJMDEC1\nWMJMDECH EQUOVR ,,b,WMJMDEC1\n.*\n.* WMJMDEC2 - 2ND BYTE OF DESCRIPTOR CODES\nWMJMDECI EQUOVR ,,b,WMJMDEC2\nWMJMDECJ EQUOVR ,,b,WMJMDEC2\nWMJMDECK EQUOVR ,,b,WMJMDEC2\nWMJMDECL EQUOVR ,,b,WMJMDEC2\nWMJMDECM EQUOVR ,,b,WMJMDEC2\nWQERSV59 EQUOVR ,,b,WMJMDEC2\nWQERSV60 EQUOVR ,,b,WMJMDEC2\nWQERSV61 EQUOVR ,,b,WMJMDEC2\n.*\n.* WMJMFLG2 - MISC FLAGS BYTE 2\nWMJMHNDL EQUOVR ,,b,WMJMFLG2\nWMJMLCPL EQUOVR ,,b,WMJMFLG2\nWMJMFORN EQUOVR ,,b,WMJMFLG2\nWMJMTRAN EQUOVR ,,b,WMJMFLG2\nWMJSUPSJ EQUOVR ,,b,WMJMFLG2\nWMJQXSYS EQUOVR ,,b,WMJMFLG2\nWMJQEXT  EQUOVR ,,b,WMJMFLG2\nWMJQMCS  EQUOVR ,,b,WMJMFLG2\n.*\n.* WMJMCE1 - FIRST BYTE\nWMJEBUSY EQUOVR ,,b,WMJMCE1\nWMJECONS EQUOVR ,,b,WMJMCE1\nWMJEDOMI EQUOVR ,,b,WMJMCE1\nWMJECONN EQUOVR ,,b,WMJMCE1\nWMJEWTOR EQUOVR ,,b,WMJMCE1\nWMJEPRIO EQUOVR ,,b,WMJMCE1\nWMJMCNM  EQUOVR ,,b,WMJMCE1\n.*\n.* WMJMCE2 - SECOND BYTE OF EXT MCS FLAGS\nWMJMTXTA EQUOVR ,,b,WMJMCE2\nWMJMRV99 EQUOVR ,,b,WMJMCE2\nWMJMRV9B EQUOVR ,,b,WMJMCE2\nWMJMRV9C EQUOVR ,,b,WMJMCE2\nWMJMRV1A EQUOVR ,,b,WMJMCE2\nWMJMRV1B EQUOVR ,,b,WMJMCE2\nWMJMRV1C EQUOVR ,,b,WMJMCE2\nWMJMRV1D EQUOVR ,,b,WMJMCE2\n.*\n.* WMJMRFB1 - REQUEST FLAGS BYTE ONE\nWMJMRCMT EQUOVR ,,b,WMJMRFB1\nWMJMRCRC EQUOVR ,,b,WMJMRFB1\nWMJMRCDC EQUOVR ,,b,WMJMRFB1\nWMJMRQPC EQUOVR ,,b,WMJMRFB1\nWMJMRQUN EQUOVR ,,b,WMJMRFB1\nWMJMRQRC EQUOVR ,,b,WMJMRFB1\nWMJMRCCN EQUOVR ,,b,WMJMRFB1\nWMJMRPML EQUOVR ,,b,WMJMRFB1\n.*\n.* WMJMRFB2 - REQUEST FLAGS BYTE TWO\nWMJMRDTM EQUOVR ,,b,WMJMRFB2\nWMJMROMS EQUOVR ,,b,WMJMRFB2\nWMJMRFHC EQUOVR ,,b,WMJMRFB2\nWMJMRFNC EQUOVR ,,b,WMJMRFB2\nWMJMRHCO EQUOVR ,,b,WMJMRFB2\nWMJMRBCA EQUOVR ,,b,WMJMRFB2\nWMJMRBCN EQUOVR ,,b,WMJMRFB2\nWMJMRNRT EQUOVR ,,b,WMJMRFB2\n.*\n.* WMJMRFB3 - REQUEST FLAGS BYTE THREE\nWMJMRRET EQUOVR ,,b,WMJMRFB3\nWMJMRCKY EQUOVR ,,b,WMJMRFB3\nWMJMRCFC EQUOVR ,,b,WMJMRFB3\nWMJMRCMF EQUOVR ,,b,WMJMRFB3\nWMJRANO  EQUOVR ,,b,WMJMRFB3\nWMJRAYS  EQUOVR ,,b,WMJMRFB3\nWMJMQHCO EQUOVR ,,b,WMJMRFB3\nWMJMHUD  EQUOVR ,,b,WMJMRFB3\n.*\n.* WMJMSUPB - SUPPRESSION BYTE\nWMJMSNSV EQUOVR ,,b,WMJMSUPB\nWMJMSEER EQUOVR ,,b,WMJMSUPB\nWMJMSNSI EQUOVR ,,b,WMJMSUPB\nWMJMSAUT EQUOVR ,,b,WMJMSUPB\nWMJMSQED EQUOVR ,,b,WMJMSUPB\nWMJMSSSI EQUOVR ,,b,WMJMSUPB\nWMJMSWTO EQUOVR ,,b,WMJMSUPB\nWMJMSMPF EQUOVR ,,b,WMJMSUPB\n.*\n.* WMJMML1 - FIRST BYTE OF LEVEL INDICATORS\nWMJMMLR  EQUOVR ,,b,WMJMML1\nWMJMMLIA EQUOVR ,,b,WMJMML1\nWMJMMLCE EQUOVR ,,b,WMJMML1\nWMJMMLE  EQUOVR ,,b,WMJMML1\nWMJMMLI  EQUOVR ,,b,WMJMML1\nWMJMMLBC EQUOVR ,,b,WMJMML1\n.*\n.* WMJMRC1 - BYTE 1  - EXTENDED ROUTING CODES\nWMJRC1   EQUOVR ,,b,WMJMRC1\nWMJRC2   EQUOVR ,,b,WMJMRC1\nWMJRC3   EQUOVR ,,b,WMJMRC1\nWMJRC4   EQUOVR ,,b,WMJMRC1\nWMJRC5   EQUOVR ,,b,WMJMRC1\nWMJRC6   EQUOVR ,,b,WMJMRC1\nWMJRC7   EQUOVR ,,b,WMJMRC1\nWMJRC8   EQUOVR ,,b,WMJMRC1\n.*\n.* WMJMRC2 - BYTE 2  - EXTENDED ROUTING CODES\nWMJRC9   EQUOVR ,,b,WMJMRC2\nWMJRC10  EQUOVR ,,b,WMJMRC2\nWMJRC11  EQUOVR ,,b,WMJMRC2\nWMJRC12  EQUOVR ,,b,WMJMRC2\nWMJRC13  EQUOVR ,,b,WMJMRC2\nWMJRC14  EQUOVR ,,b,WMJMRC2\nWMJRC15  EQUOVR ,,b,WMJMRC2\nWMJRC16  EQUOVR ,,b,WMJMRC2\n.*\n.* WMJMRC3 - BYTE 3  - EXTENDED ROUTING CODES\nWMJRC17  EQUOVR ,,b,WMJMRC3\nWMJRC18  EQUOVR ,,b,WMJMRC3\nWMJRC19  EQUOVR ,,b,WMJMRC3\nWMJRC20  EQUOVR ,,b,WMJMRC3\nWMJRC21  EQUOVR ,,b,WMJMRC3\nWMJRC22  EQUOVR ,,b,WMJMRC3\nWMJRC23  EQUOVR ,,b,WMJMRC3\nWMJRC24  EQUOVR ,,b,WMJMRC3\n.*\n.* WMJMRC4 - BYTE 4  - EXTENDED ROUTING CODES\nWMJRC25  EQUOVR ,,b,WMJMRC4\nWMJRC26  EQUOVR ,,b,WMJMRC4\nWMJRC27  EQUOVR ,,b,WMJMRC4\nWMJRC28  EQUOVR ,,b,WMJMRC4\nWMJRC29  EQUOVR ,,b,WMJMRC4\nWMJRC30  EQUOVR ,,b,WMJMRC4\nWMJRC31  EQUOVR ,,b,WMJMRC4\nWMJRC32  EQUOVR ,,b,WMJMRC4\n.*\n.* WMJMRC5 - BYTE 5  - EXTENDED ROUTING CODES\nWMJRC33  EQUOVR ,,b,WMJMRC5\nWMJRC34  EQUOVR ,,b,WMJMRC5\nWMJRC35  EQUOVR ,,b,WMJMRC5\nWMJRC36  EQUOVR ,,b,WMJMRC5\nWMJRC37  EQUOVR ,,b,WMJMRC5\nWMJRC38  EQUOVR ,,b,WMJMRC5\nWMJRC39  EQUOVR ,,b,WMJMRC5\nWMJRC40  EQUOVR ,,b,WMJMRC5\n.*\n.* WMJMRC6 - BYTE 6  - EXTENDED ROUTING CODES\nWMJRC41  EQUOVR ,,b,WMJMRC6\nWMJRC42  EQUOVR ,,b,WMJMRC6\nWMJRC43  EQUOVR ,,b,WMJMRC6\nWMJRC44  EQUOVR ,,b,WMJMRC6\nWMJRC45  EQUOVR ,,b,WMJMRC6\nWMJRC46  EQUOVR ,,b,WMJMRC6\nWMJRC47  EQUOVR ,,b,WMJMRC6\nWMJRC48  EQUOVR ,,b,WMJMRC6\n.*\n.* WMJMRC7 - BYTE 7  - EXTENDED ROUTING CODES\nWMJRC49  EQUOVR ,,b,WMJMRC7\nWMJRC50  EQUOVR ,,b,WMJMRC7\nWMJRC51  EQUOVR ,,b,WMJMRC7\nWMJRC52  EQUOVR ,,b,WMJMRC7\nWMJRC53  EQUOVR ,,b,WMJMRC7\nWMJRC54  EQUOVR ,,b,WMJMRC7\nWMJRC55  EQUOVR ,,b,WMJMRC7\nWMJRC56  EQUOVR ,,b,WMJMRC7\n.*\n.* WMJMRC8 - BYTE 8  - EXTENDED ROUTING CODES\nWMJRC57  EQUOVR ,,b,WMJMRC8\nWMJRC58  EQUOVR ,,b,WMJMRC8\nWMJRC59  EQUOVR ,,b,WMJMRC8\nWMJRC60  EQUOVR ,,b,WMJMRC8\nWMJRC61  EQUOVR ,,b,WMJMRC8\nWMJRC62  EQUOVR ,,b,WMJMRC8\nWMJRC63  EQUOVR ,,b,WMJMRC8\nWMJRC64  EQUOVR ,,b,WMJMRC8\n.*\n.* WMJMRC9 - BYTE 9  - EXTENDED ROUTING CODES\nWMJRC65  EQUOVR ,,b,WMJMRC9\nWMJRC66  EQUOVR ,,b,WMJMRC9\nWMJRC67  EQUOVR ,,b,WMJMRC9\nWMJRC68  EQUOVR ,,b,WMJMRC9\nWMJRC69  EQUOVR ,,b,WMJMRC9\nWMJRC70  EQUOVR ,,b,WMJMRC9\nWMJRC71  EQUOVR ,,b,WMJMRC9\nWMJRC72  EQUOVR ,,b,WMJMRC9\n.*\n.* WMJMRC10 - BYTE 10 - EXTENDED ROUTING CODES\nWMJRC73  EQUOVR ,,b,WMJMRC10\nWMJRC74  EQUOVR ,,b,WMJMRC10\nWMJRC75  EQUOVR ,,b,WMJMRC10\nWMJRC76  EQUOVR ,,b,WMJMRC10\nWMJRC77  EQUOVR ,,b,WMJMRC10\nWMJRC78  EQUOVR ,,b,WMJMRC10\nWMJRC79  EQUOVR ,,b,WMJMRC10\nWMJRC80  EQUOVR ,,b,WMJMRC10\n.*\n.* WMJMRC11 - BYTE 11 - EXTENDED ROUTING CODES\nWMJRC81  EQUOVR ,,b,WMJMRC11\nWMJRC82  EQUOVR ,,b,WMJMRC11\nWMJRC83  EQUOVR ,,b,WMJMRC11\nWMJRC84  EQUOVR ,,b,WMJMRC11\nWMJRC85  EQUOVR ,,b,WMJMRC11\nWMJRC86  EQUOVR ,,b,WMJMRC11\nWMJRC87  EQUOVR ,,b,WMJMRC11\nWMJRC88  EQUOVR ,,b,WMJMRC11\n.*\n.* WMJMRC12 - BYTE 12 - EXTENDED ROUTING CODES\nWMJRC89  EQUOVR ,,b,WMJMRC12\nWMJRC90  EQUOVR ,,b,WMJMRC12\nWMJRC91  EQUOVR ,,b,WMJMRC12\nWMJRC92  EQUOVR ,,b,WMJMRC12\nWMJRC93  EQUOVR ,,b,WMJMRC12\nWMJRC94  EQUOVR ,,b,WMJMRC12\nWMJRC95  EQUOVR ,,b,WMJMRC12\nWMJRC96  EQUOVR ,,b,WMJMRC12\n.*\n.* WMJMRC13 - BYTE 13 - EXTENDED ROUTING CODES\nWMJRC97  EQUOVR ,,b,WMJMRC13\nWMJRC98  EQUOVR ,,b,WMJMRC13\nWMJRC99  EQUOVR ,,b,WMJMRC13\nWMJRC100 EQUOVR ,,b,WMJMRC13\nWMJRC101 EQUOVR ,,b,WMJMRC13\nWMJRC102 EQUOVR ,,b,WMJMRC13\nWMJRC103 EQUOVR ,,b,WMJMRC13\nWMJRC104 EQUOVR ,,b,WMJMRC13\n.*\n.* WMJMRC14 - BYTE 14 - EXTENDED ROUTING CODES\nWMJRC105 EQUOVR ,,b,WMJMRC14\nWMJRC106 EQUOVR ,,b,WMJMRC14\nWMJRC107 EQUOVR ,,b,WMJMRC14\nWMJRC108 EQUOVR ,,b,WMJMRC14\nWMJRC109 EQUOVR ,,b,WMJMRC14\nWMJRC110 EQUOVR ,,b,WMJMRC14\nWMJRC111 EQUOVR ,,b,WMJMRC14\nWMJRC112 EQUOVR ,,b,WMJMRC14\n.*\n.* WMJMRC15 - BYTE 15 - EXTENDED ROUTING CODES\nWMJRC113 EQUOVR ,,b,WMJMRC15\nWMJRC114 EQUOVR ,,b,WMJMRC15\nWMJRC115 EQUOVR ,,b,WMJMRC15\nWMJRC116 EQUOVR ,,b,WMJMRC15\nWMJRC117 EQUOVR ,,b,WMJMRC15\nWMJRC118 EQUOVR ,,b,WMJMRC15\nWMJRC119 EQUOVR ,,b,WMJMRC15\nWMJRC120 EQUOVR ,,b,WMJMRC15\n.*\n.* WMJMRC16 - BYTE 16 - EXTENDED ROUTING CODES\nWMJRC121 EQUOVR ,,b,WMJMRC16\nWMJRC122 EQUOVR ,,b,WMJMRC16\nWMJRC123 EQUOVR ,,b,WMJMRC16\nWMJRC124 EQUOVR ,,b,WMJMRC16\nWMJRC125 EQUOVR ,,b,WMJMRC16\nWMJRC126 EQUOVR ,,b,WMJMRC16\nWMJRC127 EQUOVR ,,b,WMJMRC16\nWMJRC128 EQUOVR ,,b,WMJMRC16\n.*\n.* WMJMERF1 - REQUEST FLAGS BYTE ONE\nWMJEMRY  EQUOVR ,,b,WMJMERF1\nWMJEMRN  EQUOVR ,,b,WMJMERF1\nWMJEMCO  EQUOVR ,,b,WMJMERF1\nWMJEMHI  EQUOVR ,,b,WMJMERF1\nWMJEMIN  EQUOVR ,,b,WMJMERF1\n.*\n.* WMJMXIF1 - MISC AND MINOR ERROR FLAG BYTE 1\nWMJMTXTR EQUOVR ,,b,WMJMXIF1\nWMJMXNVT EQUOVR ,,b,WMJMXIF1\nWMJMXMER EQUOVR ,,b,WMJMXIF1\nWMJMXIRM EQUOVR ,,b,WMJMXIF1\nWMJMDMDB EQUOVR ,,b,WMJMXIF1\n.*\n.* WMJMXIF2 - MISC AND MINOR ERROR FLAG BYTE 2\nWMJQONLY EQUOVR ,,b,WMJMXIF2\nWMJAMRFO EQUOVR ,,b,WMJMXIF2\nWMJAMRFA EQUOVR ,,b,WMJMXIF2\nWMJMQD   EQUOVR ,,b,WMJMXIF2\nWMJMWTPR EQUOVR ,,b,WMJMXIF2\nWMJMMFR  EQUOVR ,,b,WMJMXIF2\nWMJAMRFR EQUOVR ,,b,WMJMXIF2\nWMJQTSYS EQUOVR ,,b,WMJMXIF2\n.*\n.* WMJBENIP - BRANCH ENTRY/NIP FLAGS\nWMJMDOMD EQUOVR ,,b,WMJBENIP\nWMJMNBEW EQUOVR ,,b,WMJBENIP\nWMJMHABD EQUOVR ,,b,WMJBENIP\nWMJMASCB EQUOVR ,,b,WMJBENIP\n.*\n.* WMJMMISC - MISCELLANEOUS ROUTING INFORMATION\nWMJMUD   EQUOVR ,,b,WMJMMISC\nWMJMFUDO EQUOVR ,,b,WMJMMISC\nWMJMFIDO EQUOVR ,,b,WMJMMISC\nWMJMAUTO EQUOVR ,,b,WMJMMISC\nWMJMHC   EQUOVR ,,b,WMJMMISC\n.*\n.* WMJMISCC - MISCELLANEOUS CONTROL PROGRAM FLAGS\nWMJMSPVD EQUOVR ,,b,WMJMISCC\nWMJMPRIV EQUOVR ,,b,WMJMISCC\nWMJMQNLY EQUOVR ,,b,WMJMISCC\n.*\n.* WMNMML1 - MLWTO FLAGS FOR FIRST MESSAGE\nWQERSV62 EQUOVR ,,b,WMNMML1\nWMNMML1B EQUOVR ,,b,WMNMML1\nWMNMML1C EQUOVR ,,b,WMNMML1\nWMNMML1D EQUOVR ,,b,WMNMML1\nWMNMML1E EQUOVR ,,b,WMNMML1\nWMNMML1F EQUOVR ,,b,WMNMML1\nWMNMML1G EQUOVR ,,b,WMNMML1\nWMNMML1H EQUOVR ,,b,WMNMML1\n.*\n.* WMNMLT1 -  LINE TYPE FLAGS FOR FIRST MESSAGE\nWMNMLT1A EQUOVR ,,b,WMNMLT1\nWMNMLT1B EQUOVR ,,b,WMNMLT1\nWMNMLT1C EQUOVR ,,b,WMNMLT1\nWMNMLT1D EQUOVR ,,b,WMNMLT1\nWQERSV63 EQUOVR ,,b,WMNMLT1\nWQERSV64 EQUOVR ,,b,WMNMLT1\nWQERSV65 EQUOVR ,,b,WMNMLT1\nWQERSV66 EQUOVR ,,b,WMNMLT1\n.*\n.* WMNMST1 - STATUS FLAGS\nWMNMTPD1 EQUOVR ,,b,WMNMST1\nWMNMTRC1 EQUOVR ,,b,WMNMST1\nWMNMWTP1 EQUOVR ,,b,WMNMST1\nWQERSVB1 EQUOVR ,,b,WMNMST1\nWQERSVB2 EQUOVR ,,b,WMNMST1\nWQERSVB3 EQUOVR ,,b,WMNMST1\nWQERSVB4 EQUOVR ,,b,WMNMST1\nWQERSVB5 EQUOVR ,,b,WMNMST1\n.*\n.* WMNMMSF1 - MISCELLANEOUS FLAGS\nWMNMRV99 EQUOVR ,,b,WMNMMSF1\nWMNMRV9A EQUOVR ,,b,WMNMMSF1\nWMNMTRAN EQUOVR ,,b,WMNMMSF1\n.*\n.* WMN1RFB1 - REQUEST FLAGS BYTE ONE\nWMN1RCMT EQUOVR ,,b,WMN1RFB1\nWMN1RPML EQUOVR ,,b,WMN1RFB1\n.*\n.* WMN1SUPB - SUPPRESSION BYTE\nWMN1SNSV EQUOVR ,,b,WMN1SUPB\nWMN1SEER EQUOVR ,,b,WMN1SUPB\nWMN1SNSI EQUOVR ,,b,WMN1SUPB\nWMN1SAUT EQUOVR ,,b,WMN1SUPB\nWMN1SQED EQUOVR ,,b,WMN1SUPB\nWMN1SSSI EQUOVR ,,b,WMN1SUPB\nWMN1SWTO EQUOVR ,,b,WMN1SUPB\nWMN1SMPF EQUOVR ,,b,WMN1SUPB\n.*\n.* WMNMML2 - MLWTO FLAGS FOR SECOND MESSAGE\nWQERSV68 EQUOVR ,,b,WMNMML2\nWMNMML2B EQUOVR ,,b,WMNMML2\nWMNMML2C EQUOVR ,,b,WMNMML2\nWMNMML2D EQUOVR ,,b,WMNMML2\nWMNMML2E EQUOVR ,,b,WMNMML2\nWQERSV69 EQUOVR ,,b,WMNMML2\nWMNMML2G EQUOVR ,,b,WMNMML2\nWMNMML2H EQUOVR ,,b,WMNMML2\n.*\n.* WMNMLT2 - LINE TYPE FLAGS FOR SECOND MESSAGE\nWMNMLT2A EQUOVR ,,b,WMNMLT2\nWMNMLT2B EQUOVR ,,b,WMNMLT2\nWMNMLT2C EQUOVR ,,b,WMNMLT2\nWMNMLT2D EQUOVR ,,b,WMNMLT2\nWQERSV70 EQUOVR ,,b,WMNMLT2\nWQERSV71 EQUOVR ,,b,WMNMLT2\nWQERSV72 EQUOVR ,,b,WMNMLT2\nWQERSV73 EQUOVR ,,b,WMNMLT2\n.*\n.* WMNMST2 - STATUS FLAGS\nWMNMTPD2 EQUOVR ,,b,WMNMST2\nWMNMTRC2 EQUOVR ,,b,WMNMST2\nWMNMWTP2 EQUOVR ,,b,WMNMST2\nWQERSVC1 EQUOVR ,,b,WMNMST2\nWQERSVC2 EQUOVR ,,b,WMNMST2\nWQERSVC3 EQUOVR ,,b,WMNMST2\nWQERSVC4 EQUOVR ,,b,WMNMST2\nWQERSVC5 EQUOVR ,,b,WMNMST2\n.*\n.* WMN2RFB1 - REQUEST FLAGS BYTE ONE\nWMN2RCMT EQUOVR ,,b,WMN2RFB1\nWMN2RPML EQUOVR ,,b,WMN2RFB1\n.*\n.* WMN2SUPB - SUPPRESSION BYTE\nWMN2SNSV EQUOVR ,,b,WMN2SUPB\nWMN2SEER EQUOVR ,,b,WMN2SUPB\nWMN2SNSI EQUOVR ,,b,WMN2SUPB\nWMN2SAUT EQUOVR ,,b,WMN2SUPB\nWMN2SQED EQUOVR ,,b,WMN2SUPB\nWMN2SSSI EQUOVR ,,b,WMN2SUPB\nWMN2SWTO EQUOVR ,,b,WMN2SUPB\nWMN2SMPF EQUOVR ,,b,WMN2SUPB\n.*\n         MNOTE *,'Including IHAWQE mapping macro'\n         IHAWQE FORMAT=NEW             *\n         EQUOVR *END\n*\nWQE      DSECT ,                       * Resume WQE DSECT\n         ORG   ,\nWQE_LEN  EQU   *-WQE                   * Length of WQE\n*\nWQEMAJ   DSECT ,                       * Resume WQE-major DSECT\n         ORG   ,\nWQEMAJ_LEN EQU *-WQEMAJ                * Length of WQE-major\n*\nWQEMIN   DSECT ,                       * Resume WQE-minor DSECT\n         ORG   ,\nWQEMIN_LEN EQU *-WQEMIN                * Length of WQE-minor\n*\nWQESYAR  DSECT ,                       * Resume WQE SYSID-array DSECT\n         ORG   ,\nWQESYAR_LEN EQU *-WQESYAR              * Length of WQESYAR\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPWTOPL 0100-20096-20096-0111-00108-00108-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Mapping macro describing WTO parameter list\n.*\n&LABEL   MAPWTOPL &DSECT=YES,          * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPWTOPL               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPWTOPL       * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'WTOPL').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPWTOPL).MEND\n&BXA_MAC_MAPWTOPL SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_WTOPL\n&BXA_CB_WTOPL SETC 'WTOPL'\n.*\n         MNOTE *,'Generating WTO plist Dsect'\n*\nWTOPL    DSECT\nWTOPLLEN DS    H                       * Total length of WTOPL (=TXT+4)\nWTOPL000 DS    H                       * Always zeroes\nWTOPLTXT DS    C                       * Text to be displayed\n*\n         ORG   ,                       *\nWTOPL_LEN EQU  *-WTOPL                 *\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MAPXSB   0100-20096-20096-0111-00111-00111-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro maps the eXtended Status Block\n.*\n&LABEL   MAPXSB &DSECT=YES,            * YES or NO                     *\n               &CB=,                   * Control block to generate     *\n               &PRFX=                  * Prefix to use\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MAPXSB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_MAC_MAPXSB         * Map has been generated?\n.*\n.* Check parameters\n&LABEL   CHKMAP DSECT=&DSECT,          *                               *\n               CB=&CB,                 *                               *\n               PRFX=&PRFX              *\n         AIF   (&BXA_RC GT 4).MEND\n.*\n.* Check the CB parameter\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&CB' EQ 'XSB').EMBED\n.ERR5    MNOTE 8,'&CB control block not supported'\n         MEXIT\n.*\n.* Generate embedded definition\n.EMBED   ANOP\n&LABEL   NESTCB &CB,X,&PRFX\n         MEXIT\n.*\n.DSECT   ANOP\n         AIF   (&BXA_MAC_MAPXSB).MEND\n&BXA_MAC_MAPXSB SETB 1\n.* Set up translation from control block to macro for DCL\n         GBLC  &BXA_CB_XSB\n&BXA_CB_XSB SETC 'XSB'\n.*\n.* XSBFLAG2 - FLAG BYTE.\nXSBLSUSB EQUOVR ,,b,XSBFLAG2\nXSBLSRST EQUOVR ,,b,XSBFLAG2\nXSBLSESB EQUOVR ,,b,XSBFLAG2\n.*\n         MNOTE *,'Including IHAXSB mapping macro'\n         IHAXSB LIST=YES               * Generate XSB\n         EQUOVR *END\n*\nXSB      DSECT ,                       * Resume XSB DSECT\n         ORG   ,                       *\nXSB_LEN  EQU   *-XSB                   * Length of XSB\n.*\n.* Return to our original CSECT name\n&SYSECT  &SYSSTYP\n.*\n.MEND    MEND\n./ ADD NAME=MVPL     0100-20096-20096-0111-00098-00098-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Copy a parameter list from program storage to dynamic storage\n.*\n&LABEL   MVPL  &TO,                    * Destination                   *\n               &FROM                   * Source\n.*\n.* &TO   specifies the destination location label. No length should be\n.*       specified.\n.* &FROM specifies the label of the prototype plist in the program.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC MVPL                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &SYSASCE                * ASC environment AR or P\n         LCLC  &LEN                    * Name of length equate\n.*\n.* Check the TO parameter\n         AIF   (K'&TO NE 0).NOERR1\n.ERR1A   MNOTE 8,'No first operand specified'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check the FROM parameter\n         AIF   (K'&FROM NE 0).NOERR2\n.ERR2A   MNOTE 8,'No second operand specified'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* Determine length field\n&LEN     SETC  '&TO'.'_LEN'\n.*\n.* Generate code\n&LABEL   L     R1,=AL4(&FROM)          * Point to prototype plist\n         AIF   ('&SYSASCE' NE 'AR').NOTAR\n         CPY   AR1,AR12                * Plist in primary space!\n.NOTAR   ANOP  ,\n         MVC   &TO.(&LEN),0(R1)        * Copy prototype to dyn storage\n.*\n.MEND    MEND\n./ ADD NAME=NESTCB   0100-20096-20096-0111-00147-00147-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro creates a nested control block within another one\n.*\n&LABEL   NESTCB &CB,                   * Nested control block id       *\n               &TYPE,                  * Type - defaults to hex        *\n               &PRFX,                  * Prefix to use if label blank  *\n               &INIT=,                 * Initialization value          *\n               &LEN=                   * Length in parentheses\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC NESTCB                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &_LABEL                 *\n         LCLC  &_INIT                  *\n         LCLC  &_LEN                   * Length as a modifier\n         LCLA  &I                      *\n.*\n.* Check the CB parameter\n         AIF   (K'&CB GT 0).NOERR1\n.ERR1    MNOTE 8,'CB parameter omitted'\n.NOERR1  ANOP\n.*\n.* Check the TYPE parameter\n         AIF   ('&TYPE' EQ 'X').NOERR2\n         AIF   ('&TYPE' EQ 'C').NOERR2\n         AIF   ('&TYPE' EQ 'F').NOERR2\n         AIF   ('&TYPE' EQ 'H').NOERR2\n         AIF   ('&TYPE' EQ 'D').NOERR2\n         AIF   ('&TYPE' EQ 'B').NOERR2\n.ERR2    MNOTE 8,'Type parameter specifies invalid literal type'\n.NOERR2  ANOP\n.*\n.* Prefix and label must not both be omitted\n         AIF   (K'&LABEL GT 0).NOERR3\n         AIF   (K'&PRFX GT 0).NOERR3\n.ERR3    MNOTE 8,'Label is blank and prefix is omitted'\n.NOERR3  ANOP\n.*\n.* Check the LEN parameter\n         AIF   (K'&LEN EQ 0).NOERR4\n         AIF   (K'&LEN LT 3).ERR4\n         AIF   ('&LEN'(1,1) NE '(').ERR4\n         AIF   ('&LEN'(K'&LEN,1) NE ')').ERR4\n         AGO   .NOERR4\n.ERR4    MNOTE 8,'LEN parameter not specified in parentheses'\n.NOERR4  ANOP\n.*\n.* Decide which label to generate\n&_LABEL  SETC  '&LABEL'\n         AIF   (K'&_LABEL NE 0).LABELOK\n&_LABEL  SETC  '&PRFX'.'&CB'\n.LABELOK ANOP\n.*\n.* Extract correct length value\n&_LEN    SETC  '&LEN'\n         AIF   (K'&_LEN NE 0).LENOK\n&_LEN    SETC  '(&CB._LEN)'\n.LENOK   ANOP\n&_LEN    SETC  'L&_LEN'                * Add L for length modifier\n.*\n.* DSECT requires DS, CSECT or RSECT requires DC\n         AIF   ('&SYSSTYP' EQ 'DSECT').GENDS\n         AIF   ('&SYSSTYP' EQ 'CSECT').GENDC\n         AIF   ('&SYSSTYP' EQ 'RSECT').GENDC\n         MNOTE 12,'Internal error &&SYSSTYP=&SYSSTYP'\n         MEXIT ,\n.*\n.* Generate a DS statement\n.GENDS   ANOP  ,                       *\n&_LABEL  DS    &TYPE.&_LEN             *\n         MEXIT ,                       *\n.*\n.* Generate a DC with appropriate initialization\n.GENDC   ANOP  ,                       *\n&_INIT   SETC  '&INIT'                 *\n         AIF   (K'&_INIT NE 0).INITOK  *\n&_INIT   SETC  '00'                    *\n         AIF   ('&TYPE' NE 'C').INITOK *\n&_INIT   SETC  ' '                     *\n.INITOK  ANOP  ,                       *\n.*\n.* Check the init string format\n         AIF   ('&_INIT'(1,1) EQ '''').INITOK2\n&_INIT   SETC  (DOUBLE '&_INIT')       *\n&_INIT   SETC  ''''.'&_INIT'.''''      *\n.INITOK2 ANOP  ,                       *\n&_LABEL  DC    &TYPE.&_LEN.&_INIT      *\n.*\n.MEND    MEND\n./ ADD NAME=NTCR     0100-20096-20096-0111-00620-00620-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Create a name/token pair\n.*\n&LABEL   NTCR  &PAR1,                  * Parameter 1                   *\n               &PAR2,                  * Parameter 2                   *\n               &PAR3,                  * Parameter 3                   *\n               &PAR4,                  * Parameter 4                   *\n               &PAR5,                  * Parameter 5                   *\n               &LVL=,                  * Value for level parameter     *\n               &NAME=,                 * Value for token name          *\n               &TOKEN=,                * Value for token value         *\n               &PERSIST=,              * Value for persist option      *\n               &MF=                    * MF=L or MF=(E,list_addr)      *\n                                       *      or MF=(G,list_addr)\n.*\n.* &PAR1 (reg) or name of a fullword, containing the level\n.*       if omitted LVL= must be specified.\n.* &PAR2 (reg) or name of a 16-byte area, containing the token name\n.*       if omitted NAME= must be specified.\n.* &PAR3 (reg) or name of a 16-byte area, containing the token value\n.*       if omitted TOKEN= must be specified.\n.* &PAR4 (reg) or name of a fullword, containing the persist option\n.*       if omitted PERSIST= must be specified.\n.* &PAR5 (reg) or name of a fullword, where the returncode will go\n.*       must not be omitted.\n.*\n.* &LVL     Literal, constant, or (reg). If specified, will be moved\n.*          into the level parameter fullword.\n.* &NAME    Literal, constant, or (reg). If specified, will be moved\n.*          into the token name parameter 16-byte area.\n.* &TOKEN   Literal, constant, or (reg). If specified, will be moved\n.*          into the token value parameter 16-byte area.\n.* &PERSIST Literal, constant, or (reg). If specified, will be moved\n.*          into the persistence option parameter fullword.\n.* &MF      L or (L) for the list-form\n.*          (E,list_addr) for the execute form\n.*          (G,list_addr) for the generate form\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC NTCR                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_AMODE              * Current amode\n         LCLC  &_LABEL                 *\n         LCLC  &_MF1                   * 1st MF-subparm: L or E\n         LCLC  &_MF2                   * 2nd MF-subparm: plist_address\n         LCLB  &_MFL                   * On if MF=L\n         LCLB  &_MFE                   * On if MF=E\n         LCLB  &_MFG                   * On if MF=G\n         LCLB  &APPEND                 * On if fields appended to plist\n         LCLA  &CTR                    * Counter for allocating fields\n         LCLC  &_PAR1                  * &PAR1 or default\n         LCLC  &_PAR2                  * &PAR2 or default\n         LCLC  &_PAR3                  * &PAR3 or default\n         LCLC  &_PAR4                  * &PAR4 or default\n         LCLC  &_PAR5                  * &PAR5 or default\n         LCLC  &_NAME                  * &NAME as unquoted string\n         LCLC  &_TOKEN                 * &TOKEN as unquoted hex string\n         LCLA  &I                      * Index into substrings\n         LCLC  &BREG                   * Base register for plist\n         LCLC  &PREG                   * Pointer register\n         LCLC  &VREG                   * Value register\n         LCLC  &UNAM                   * USING name\n.*\n.* Check positional parameters\n         AIF   (N'&SYSLIST LE 5).NOERR1\n         MNOTE 4,'Too many positional parameters: ignored'\n.NOERR1  ANOP\n.*\n.* Check the MF parameter\n         AIF   (K'&MF EQ 0).ERR2A\n&_MF1    SETC  '&MF'                   * Copy MF-value\n         AIF   ('&MF' EQ 'L').SETMFL   * MF=L: ok\n         AIF   ('&MF'(1,1) NE '(').ERR2B * MF=E must be in sublist\n         AIF   (N'&MF EQ 0).ERR2B      *\n&_MF1    SETC  '&MF(1)'                * Copy MF-value\n         AIF   ('&_MF1' EQ 'L' AND N'&MF NE 1).ERR2B\n         AIF   ('&_MF1' EQ 'L').SETMFL * MF=(L): ok\n         AIF   (N'&MF NE 2).ERR2B      * Must have two sub-operands\n&_MF2    SETC  '&MF(2)'                * Copy plist_address\n         AIF   ('&_MF1' EQ 'E').SETMFE\n         AIF   ('&_MF1' EQ 'G').SETMFG\n         AGO   .ERR2B\n.SETMFG  ANOP\n&_MFG    SETB  1                       * Signal MF=G\n         AGO   .NOERR2\n.SETMFE  ANOP\n&_MFE    SETB  1                       * Signal MF=E\n         AGO   .NOERR2\n.SETMFL  ANOP\n&_MFL    SETB  1                       * Signal MF=E\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'Required parameter MF omitted'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Parameter MF must be L, (L), (E,plist_addr) or (G,pli*\n               st_addr)'\n.NOERR2  ANOP\n.*\n.* Check PAR1 (level field)\n         AIF   (&_MFE).NOERR3\n         AIF   (&_MFG AND K'&PAR1 NE 0 AND K'&LVL NE 0).NOERR3A\n         AIF   (K'&PAR1 EQ 0 AND K'&LVL EQ 0).ERR3A\n         AIF   (K'&PAR1 NE 0 AND K'&LVL NE 0).ERR3A\n         AGO   .NOERR3A\n.ERR3A   MNOTE 8,'Either the first positional parameter or the LVL-para*\n               meter must be specified'\n.NOERR3A ANOP\n         AIF   (K'&PAR1 EQ 0).NOERR3B\n         AIF   (&_MFG).NOERR3B\n         AIF   ('&PAR1'(1,1) EQ '(').ERR3B\n         AGO   .NOERR3B\n.ERR3B   MNOTE 8,'Positional parameter 1 must not specify (reg) with MF*\n               =L'\n.NOERR3B ANOP\n.NOERR3  ANOP\n.*\n.* Check PAR2 (name field)\n         AIF   (&_MFE).NOERR4\n         AIF   (&_MFG AND K'&PAR2 NE 0 AND K'&NAME NE 0).NOERR4A\n         AIF   (K'&PAR2 EQ 0 AND K'&NAME EQ 0).ERR4A\n         AIF   (K'&PAR2 NE 0 AND K'&NAME NE 0).ERR4A\n         AGO   .NOERR4A\n.ERR4A   MNOTE 8,'Either the second positional parameter or the NAME-pa*\n               rameter must be specified'\n.NOERR4A ANOP\n         AIF   (K'&PAR2 EQ 0).NOERR4B\n         AIF   (&_MFG).NOERR4B\n         AIF   ('&PAR2'(1,1) EQ '(').ERR4B\n         AGO   .NOERR4B\n.ERR4B   MNOTE 8,'Positional parameter 2 must not specify (reg) with MF*\n               =L'\n.NOERR4B ANOP\n.NOERR4  ANOP\n.*\n.* Check PAR3 (token field)\n         AIF   (&_MFE).NOERR5\n         AIF   (&_MFG AND K'&PAR3 NE 0 AND K'&TOKEN NE 0).NOERR5A\n         AIF   (K'&PAR3 EQ 0 AND K'&TOKEN EQ 0).ERR5A\n         AIF   (K'&PAR3 NE 0 AND K'&TOKEN NE 0).ERR5A\n         AGO   .NOERR5A\n.ERR5A   MNOTE 8,'Either the third positional parameter or the TOKEN-pa*\n               rameter must be specified'\n.NOERR5A ANOP\n         AIF   (K'&PAR3 EQ 0).NOERR5B\n         AIF   (&_MFG).NOERR5B\n         AIF   ('&PAR3'(1,1) EQ '(').ERR5B\n         AGO   .NOERR5B\n.ERR5B   MNOTE 8,'Positional parameter 3 must not specify (reg) with MF*\n               =L'\n.NOERR5B ANOP\n.NOERR5  ANOP\n.*\n.* Check PAR4 (persist field)\n         AIF   (&_MFE).NOERR6\n         AIF   (&_MFG AND K'&PAR4 NE 0 AND K'&PERSIST NE 0).NOERR6A\n         AIF   (K'&PAR4 EQ 0 AND K'&PERSIST EQ 0).ERR6A\n         AIF   (K'&PAR4 NE 0 AND K'&PERSIST NE 0).ERR6A\n         AGO   .NOERR6A\n.ERR6A   MNOTE 8,'Either the fourth positional parameter or the PERSIST*\n               -parameter must be specified'\n.NOERR6A ANOP\n         AIF   (K'&PAR4 EQ 0).NOERR6B\n         AIF   (&_MFG).NOERR6B\n         AIF   ('&PAR4'(1,1) EQ '(').ERR6B\n         AGO   .NOERR6B\n.ERR6B   MNOTE 8,'Positional parameter 4 must not specify (reg) with MF*\n               =L'\n.NOERR6B ANOP\n.NOERR6  ANOP\n.*\n.* Check PAR5 (returncode field)\n         AIF   (&_MFE).NOERR7\n         AIF   (K'&PAR5 EQ 0).ERR7A\n         AGO   .NOERR7A\n.ERR7A   MNOTE 8,'The fifth positional parameter must be specified'\n.NOERR7A ANOP\n         AIF   (K'&PAR5 EQ 0).NOERR7B\n         AIF   (&_MFG).NOERR7B\n         AIF   ('&PAR5'(1,1) EQ '(').ERR7B\n         AGO   .NOERR7B\n.ERR7B   MNOTE 8,'Positional parameter 5 must not specify (reg) with MF*\n               =L'\n.NOERR7B ANOP\n.NOERR7  ANOP\n.*\n.* Check the LVL parameter\n         AIF   (K'&LVL EQ 0).NOERR8\n         AIF   (&_MFL AND '&LVL'(1,1) EQ '(').ERR8A\n         AGO   .NOERR8\n.ERR8A   MNOTE 8,'LVL-parameter must not specify (reg) when MF=L'\n.NOERR8  ANOP\n.*\n.* Check the NAME parameter\n         AIF   (K'&NAME EQ 0).NOERR9\n         AIF   (&_MFL AND '&NAME'(1,1) EQ '(').ERR9A\n         AGO   .NOERR9A\n.ERR9A   MNOTE 8,'NAME-parameter must not specify (reg) when MF=L'\n.NOERR9A ANOP\n         AIF   ('&NAME'(1,1) EQ '(').NOERR9 * (reg): no literal check\n&_NAME   SETC  '&NAME'                 * Assume name correct\n&I       SETA  K'&NAME                 *\n         AIF   ('&NAME'(&I,1) NE '''').NOERR9 * Unquoted string ok\n         AIF   ('&NAME'(1,1) NE 'C').NAMNOTC\n&_NAME   SETC  '&_NAME'(2,&I-1)        * Remove leading C\n&I       SETA  &I-1                    *\n.NAMNOTC ANOP\n         AIF   ('&NAME'(1,1) NE '''').ERR9B\n&_NAME   SETC  '&_NAME'(2,&I-2)        * Remove lead/trail quotes\n         AGO   .NOERR9\n.ERR9B   MNOTE 8,'Name must be specified as (un)quoted string or C-type*\n                constant without L-modifier'\n.NOERR9  ANOP\n.*\n.* Check the TOKEN parameter\n         AIF   (K'&TOKEN EQ 0).NOERR10\n         AIF   (&_MFL AND '&TOKEN'(1,1) EQ '(').ERR10A\n         AGO   .NOERR10A\n.ERR10A  MNOTE 8,'TOKEN-parameter must not specify (reg) when MF=L'\n.NOERR10A ANOP\n         AIF   ('&TOKEN'(1,1) NE '(').NOERR10 * (reg) no literal check\n&_TOKEN  SETC  '&TOKEN'                * Assume token correct\n&I       SETA  K'&TOKEN                *\n         AIF   ('&TOKEN'(&I,1) NE '''').NOERR10B * Unquoted string ok\n         AIF   ('&TOKEN'(1,1) NE 'X').TOKNOTX\n&_TOKEN  SETC  '&_TOKEN'(2,&I-1)       * Remove leading X\n&I       SETA  &I-1                    *\n.TOKNOTX ANOP\n         AIF   ('&TOKEN'(1,1) NE '''').ERR10B\n&_TOKEN  SETC  '&_TOKEN'(2,&I-2)       * Remove lead/trail quotes\n         AGO   .NOERR10B\n.ERR10B  MNOTE 8,'Name must be specified as (un)quoted string or C-type*\n                constant without L-modifier'\n.NOERR10B ANOP\n         CHKNUM MACRO=NTCR,            * Check the resulting string    *\n               NAME=TOKEN,             * in parameter TOKEN            *\n               VAL=&_TOKEN             *\n.NOERR10 ANOP\n.*\n.* Check the PERSIST parameter\n         AIF   (K'&PERSIST EQ 0).NOERR11\n         AIF   (&_MFL AND '&PERSIST'(1,1) EQ '(').ERR11A\n         AGO   .NOERR11\n.ERR11A  MNOTE 8,'PERSIST-parameter must not specify (reg) when MF=L'\n.NOERR11 ANOP\n.*\n.* Check the current amode\n         AIF   ('&BXA_AMODE' EQ '31').NOERR12\n.ERR12   MNOTE 8,'NTCR-macro cannot be issued when in Amode 24'\n.NOERR12 ANOP\n.*\n.* Include mapping macro for plist\n         GENMAPS IEANT                 * Map unless already mapped\n         AIF   (&_MFE).MFE\n.**********************************************************************\n.*\n.* Generate code for MF=L\n.* First part also used for MF=G\n.*\n.**********************************************************************\n.*\n.* All fields not specified on the positional parameter by default\n.* will be appended to the Plist proper\n         AIF   (K'&PAR1 EQ 0 OR K'&PAR2 EQ 0 OR K'&PAR3 EQ 0).APPEND\n         AIF   (K'&PAR4 EQ 0 OR K'&PAR5 EQ 0).APPEND\n         AGO   .NOAPPEND\n.APPEND  ANOP\n&APPEND  SETB  1\n.NOAPPEND ANOP\n.*\n.* For defaulted fields a label is required\n         AIF   (NOT &_MFG).LABEL       * MF=L? normal label processing\n         AIF   ('&_MF2'(1,1) EQ '(').GLBLREG * MF=(G,(reg)): register!\n&_LABEL  SETC  'CRPL.NTCRPL'\n         AGO   .LABELOK\n.GLBLREG ANOP  ,                       * Plist addressed with register\n&_BREG   SETC  '&MF(2,1)'              * Extract pointer register\n&_LABEL  SETC  '(&_BREG)'              * Points to plist\n         AGO   .LABELOK\n.LABEL   ANOP\n&_LABEL  SETC  '&LABEL'\n         AIF   (NOT &APPEND).LABELOK\n         AIF   (K'&LABEL NE 0).LABELOK\n&_LABEL  SETC  '_NTCR&SYSNDX'\n.LABELOK ANOP\n&CTR     SETA  20                      * Plist length\n.*\n.* Determine defaulted positions for unspecified fields\n.* PAR1: level field (fullword)\n&_PAR1   SETC  '&PAR1'                 * Copy specified field location\n         AIF   (K'&PAR1 NE 0).LPAR1OK  * If not specified\n&_PAR1   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR1AD * Unless (reg)\n&_PAR1   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR1AD ANOP\n&CTR     SETA  &CTR+4                  * Advance to next free position\n.LPAR1OK ANOP\n.*\n.* PAR2: name field (16 characters)\n&_PAR2   SETC  '&PAR2'                 * Copy specified field location\n         AIF   (K'&PAR2 NE 0).LPAR2OK  * If not specified\n&_PAR2   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR2AD * Unless (reg)\n&_PAR2   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR2AD ANOP\n&CTR     SETA  &CTR+16                 * Advance to next free position\n.LPAR2OK ANOP\n.*\n.* PAR3: token field (16 bytes)\n&_PAR3   SETC  '&PAR3'                 * Copy specified field location\n         AIF   (K'&PAR3 NE 0).LPAR3OK  * If not specified\n&_PAR3   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR3AD * Unless (reg)\n&_PAR3   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR3AD ANOP\n&CTR     SETA  &CTR+16                 * Advance to next free position\n.LPAR3OK ANOP\n.*\n.* PAR4: persist field (fullword)\n&_PAR4   SETC  '&PAR4'                 * Copy specified field location\n         AIF   (K'&PAR4 NE 0).LPAR4OK  * If not specified\n&_PAR4   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR4AD * Unless (reg)\n&_PAR4   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR4AD ANOP\n&CTR     SETA  &CTR+4                  * Advance to next free position\n.LPAR4OK ANOP\n.*\n.* PAR5: return field (fullword)\n&_PAR5   SETC  '&PAR5'                 * Copy specified field location\n         AIF   (K'&PAR5 NE 0).LPAR5OK  * If not specified\n&_PAR5   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR5AD * Unless (reg)\n&_PAR5   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR5AD ANOP\n&CTR     SETA  &CTR+4                  * Advance to next free position\n.LPAR5OK ANOP\n.*\n.* Plist generation for MF=G follows rules of MF=E\n.* If there are any defaulted positional parameters: reinvoke NTCR\n         AIF   (&_MFL).MFL\n         AIF   (NOT &APPEND).MFE\n&LABEL   NTCR  &_PAR1,&_PAR2,&_PAR3,&_PAR4,&_PAR5,                     *\n               LVL=&LVL,               *                               *\n               NAME=&NAME,             *                               *\n               TOKEN=&TOKEN,           *                               *\n               PERSIST=&PERSIST,       *                               *\n               MF=(G,&_MF2)            *\n         AGO   .LWARN\n.*\n.MFL     ANOP\n.*\n.* Generate code for MF=L\n         DS    0F                      * Align on fullword\n&_LABEL  EQU   *,&CTR                  *\n         DC    AL4(&_PAR1)             * Level pointer\n         DC    AL4(&_PAR2)             * Name pointer\n         DC    AL4(&_PAR3)             * Token pointer\n         DC    AL4(&_PAR4)             * Persist option pointer\n         DC    AL4(&_PAR5)             * Returncode pointer\n.*\n.* Generate defaulted level field\n         AIF   ('&_PAR1' EQ '&PAR1').LNOPAR1\n         DC    AL4(&LVL)\n.LNOPAR1 ANOP\n.*\n.* Generate defaulted name field\n         AIF   ('&_PAR2' EQ '&PAR2').LNOPAR2\n         DC    CL16'&_NAME'\n.LNOPAR2 ANOP\n.*\n.* Generate defaulted token field\n         AIF   ('&_PAR3' EQ '&PAR3').LNOPAR3\n         DC    XL16'&_TOKEN'\n.LNOPAR3 ANOP\n.*\n.* Generate defaulted persist option field\n         AIF   ('&_PAR4' EQ '&PAR4').LNOPAR4\n         DC    AL4(&PERSIST)\n.LNOPAR4 ANOP\n.*\n.* Generate defaulted return code field (violates reentrancy)\n         AIF   ('&_PAR5' EQ '&PAR5').LNOPAR5\n         DC    AL4(0)\n.LNOPAR5 ANOP\n.*\n.* Generate warning with length of plist\n.LWARN   ANOP\n         AIF   (NOT &APPEND).MEND\n         MNOTE *,'Generated Plist and areas for NTCR: &CTR bytes'\n         AGO   .MEND\n.*********************************************************************\n.*\n.* Generate coding for MF=E\n.*\n.*********************************************************************\n.MFE     ANOP\n&LABEL   LABEL ,                       *\n.*\n.* If no overriding parameters are specified: skip plist modification\n         AIF   (K'&PAR1 NE 0).EMODPL\n         AIF   (K'&PAR2 NE 0 OR K'&LVL NE 0).EMODPL\n         AIF   (K'&PAR3 NE 0 OR K'&NAME NE 0).EMODPL\n         AIF   (K'&PAR4 NE 0 OR K'&TOKEN NE 0).EMODPL\n         AIF   (K'&PAR5 NE 0 OR K'&PERSIST NE 0).EMODPL\n         AGO   .ENOMOD\n.*\n.* Make parmlist addressable\n.EMODPL  ANOP  ,                       * Modify Plist before call\n         AIF   ('&_MF2'(1,1) EQ '(').EREG\nCRPL     USE   NTCRPL,&_MF2            * Set plist addressable\n&UNAM    SETC  'CRPL.'\n         AGO   .EUSEOK\n.EREG    ANOP\n&BREG    SETC  '&MF(2,1)'              * Extract register number\n         USE   NTCRPL,&BREG            * And set plist addressable\n.EUSEOK  ANOP\n.*\n.* If PAR1 specified insert address of level field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR1 EQ 0).ENOPAR1\n         AIF   ('&PAR1'(1,1) EQ '(').EPAR1R * Register specified?\n         LA    &PREG,&PAR1             * Point to level field\n         AGO   .EPAR1OK\n.EPAR1R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR1(1)'              * Extract level field pointer\n.EPAR1OK ANOP\n         ST    &PREG,&UNAM.NTCRLVL     * Put pointer into plist\n.ENOPAR1 ANOP\n.*\n.* If LVL specified insert value into field\n         AIF   (K'&LVL EQ 0).ENOLVL\n         AIF   (K'&PAR1 NE 0).EPTR1OK  * Pointer already loaded?\n         L     &PREG,NTCRLVL           * Point to level field\n.EPTR1OK ANOP\n         AIF   ('&LVL'(1,1) EQ '(').ELVLR * Register specified?\n         LA    &VREG,&LVL              * Load level value\n         AGO   .ELVLOK\n.ELVLR   ANOP  ,                       * Specified as (reg)\n&VREG    SETC  '&LVL(1)'               * Extract level value register\n.ELVLOK  ANOP\n         ST    &VREG,0(,&PREG)         * And put into level field\n.ENOLVL  ANOP\n.*\n.* If PAR2 specified insert address of name field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR2 EQ 0).ENOPAR2\n         AIF   ('&PAR2'(1,1) EQ '(').EPAR2R * Register specified?\n         LA    &PREG,&PAR2             * Point to name field\n         AGO   .EPAR2OK\n.EPAR2R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR2(1)'              * Extract name field pointer\n.EPAR2OK ANOP\n         ST    &PREG,&UNAM.NTCRNAM     * Put pointer into plist\n.ENOPAR2 ANOP\n.*\n.* If NAME specified insert value into field\n         AIF   (K'&NAME EQ 0).ENONAM\n         AIF   (K'&PAR2 NE 0).EPTR2OK  * Pointer already loaded?\n         L     &PREG,NTCRNAM           * Point to name field\n.EPTR2OK ANOP\n         AIF   ('&NAME'(1,1) EQ '(').ENAMR * Register specified?\n         MVC   0(16,&PREG),=CL16'&_NAME' * Move name into field\n         AGO   .ENONAM\n.ENAMR   ANOP  ,                       * Specified as (reg)\n&VREG    SETC  '&NAME(1)'              * Extract name value register\n         MVC   0(16,&PREG),0(&VREG)    * Move name into field\n.ENONAM  ANOP\n.*\n.* If PAR3 specified insert address of token field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR3 EQ 0).ENOPAR3\n         AIF   ('&PAR3'(1,1) EQ '(').EPAR3R * Register specified?\n         LA    &PREG,&PAR3             * Point to token field\n         AGO   .EPAR3OK\n.EPAR3R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR3(1)'              * Extract token field pointer\n.EPAR3OK ANOP\n         ST    &PREG,&UNAM.NTCRTOK     * Put pointer into plist\n.ENOPAR3 ANOP\n.*\n.* If TOKEN specified insert value into field\n         AIF   (K'&TOKEN EQ 0).ENOTOK\n         AIF   (K'&PAR3 NE 0).EPTR3OK  * Pointer already loaded?\n         L     &PREG,NTCRTOK           * Point to token field\n.EPTR3OK ANOP\n         AIF   ('&TOKEN'(1,1) EQ '(').ETOKR * Register specified?\n         MVC   0(16,&PREG),=XL16'&_TOKEN' * Move token into field\n         AGO   .ENOTOK\n.ETOKR   ANOP  ,                       * Specified as (reg)\n&VREG    SETC  '&TOKEN(1)'             * Extract token value register\n         MVC   0(16,&PREG),0(&VREG)    * Move token into field\n.ENOTOK  ANOP\n.*\n.* If PAR4 specified insert address of persist option field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR4 EQ 0).ENOPAR4\n         AIF   ('&PAR4'(1,1) EQ '(').EPAR4R * Register specified?\n         LA    &PREG,&PAR4             * Point to option field\n         AGO   .EPAR4OK\n.EPAR4R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR4(1)'              * Extract option field pointer\n.EPAR4OK ANOP\n         ST    &PREG,&UNAM.NTCRPOPT    * Put pointer into plist\n.ENOPAR4 ANOP\n.*\n.* If PERSIST specified insert value into field\n         AIF   (K'&PERSIST EQ 0).ENOPER\n         AIF   (K'&PAR4 NE 0).EPTR4OK  * Pointer already loaded?\n         L     &PREG,NTCRPOPT          * Point to option field\n.EPTR4OK ANOP\n         AIF   ('&PERSIST'(1,1) EQ '(').EPERR * Register specified?\n         LA    &VREG,&PERSIST          * Load persistence option value\n         AGO   .EPEROK\n.EPERR   ANOP  ,                       * Specified as (reg)\n&VREG    SETC  '&PERSIST(1)'           * Extract option value register\n.EPEROK  ANOP\n         ST    &VREG,0(,&PREG)         * And put into option field\n.ENOPER  ANOP\n.*\n.* If PAR5 specified insert address of returncode field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR5 EQ 0).ENOPAR5\n         AIF   ('&PAR5'(1,1) EQ '(').EPAR5R * Register specified?\n         LA    &PREG,&PAR5             * Point to retcode field\n         AGO   .EPAR5OK\n.EPAR5R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR5(1)'              * Extract retcode pointer\n.EPAR5OK ANOP\n         ST    &PREG,&UNAM.NTCRRCD     * Put pointer into plist\n.ENOPAR5 ANOP\n.*\n.* Plist is now complete\n         AIF   ('&_MF2'(1,1) EQ '(').EDROPR\n         DROP  CRPL                    * NTCRPL\n         AGO   .EDROPOK\n.EDROPR  DROP  &BREG                   * NTCRPL\n.EDROPOK ANOP\n.ENOMOD  ANOP  ,                       * No modifications to plist\n.*\n.* For MF=G we're done\n         AIF   (&_MFG).MEND\n.*\n.* Invoke Name/Token service IEANTCR\n         AIF   (K'&BREG EQ 0).ELAR1\n         LR    R1,&BREG                * R1 must point to plist\n         AGO   .ER1OK\n.ELAR1   ANOP\n         LA    R1,&_MF2                * R1 must point to plist\n.ER1OK   ANOP\n.*\n         L     R15,X'010'              * Retrieve\n         L     R15,X'220'(,R15)        *  address\n         L     R15,X'014'(,R15)        *   of\n         L     R15,X'004'(,R15)        *    IEANTCR\n         BASR  R14,R15                 * And call it\n.*\n.MEND    MEND\n./ ADD NAME=NTDL     0100-20096-20096-0111-00447-00447-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Delete a name/token pair\n.*\n&LABEL   NTDL  &PAR1,                  * Parameter 1                   *\n               &PAR2,                  * Parameter 2                   *\n               &PAR3,                  * Parameter 3                   *\n               &LVL=,                  * Value for level parameter     *\n               &NAME=,                 * Value for token name          *\n               &MF=                    * MF=L or MF=(E,list_addr)      *\n                                       *      or MF=(G,list_addr)\n.*\n.* &PAR1 (reg) or name of a fullword, containing the level\n.*       if omitted LVL= must be specified.\n.* &PAR2 (reg) or name of a 16-byte area, containing the token name\n.*       if omitted NAME= must be specified.\n.* &PAR3 (reg) or name of a fullword, where the returncode will go\n.*       must not be omitted.\n.*\n.* &LVL     Literal, constant, or (reg). If specified, will be moved\n.*          into the level parameter fullword.\n.* &NAME    Literal, constant, or (reg). If specified, will be moved\n.*          into the token name parameter 16-byte area.\n.* &MF      L or (L) for the list-form\n.*          (E,list_addr) for the execute form\n.*          (G,list_addr) for the generate form\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC NTDL                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_AMODE              * Current amode\n         LCLC  &_LABEL                 *\n         LCLC  &_MF1                   * 1st MF-subparm: L or E\n         LCLC  &_MF2                   * 2nd MF-subparm: plist_address\n         LCLB  &_MFL                   * On if MF=L\n         LCLB  &_MFE                   * On if MF=E\n         LCLB  &_MFG                   * On if MF=G\n         LCLB  &APPEND                 * On if fields appended to plist\n         LCLA  &CTR                    * Counter for allocating fields\n         LCLC  &_PAR1                  * &PAR1 or default\n         LCLC  &_PAR2                  * &PAR2 or default\n         LCLC  &_PAR3                  * &PAR3 or default\n         LCLC  &_NAME                  * &NAME as unquoted string\n         LCLA  &I                      * Index into substrings\n         LCLC  &BREG                   * Base register for plist\n         LCLC  &PREG                   * Pointer register\n         LCLC  &VREG                   * Value register\n         LCLC  &UNAM                   * USING name\n.*\n.* Check positional parameters\n         AIF   (N'&SYSLIST LE 3).NOERR1\n         MNOTE 4,'Too many positional parameters: ignored'\n.NOERR1  ANOP\n.*\n.* Check the MF parameter\n         AIF   (K'&MF EQ 0).ERR2A\n&_MF1    SETC  '&MF'                   * Copy MF-value\n         AIF   ('&MF' EQ 'L').SETMFL   * MF=L: ok\n         AIF   ('&MF'(1,1) NE '(').ERR2B * MF=E must be in sublist\n         AIF   (N'&MF EQ 0).ERR2B      *\n&_MF1    SETC  '&MF(1)'                * Copy MF-value\n         AIF   ('&_MF1' EQ 'L' AND N'&MF NE 1).ERR2B\n         AIF   ('&_MF1' EQ 'L').SETMFL * MF=(L): ok\n         AIF   (N'&MF NE 2).ERR2B      * Must have two sub-operands\n&_MF2    SETC  '&MF(2)'                * Copy plist_address\n         AIF   ('&_MF1' EQ 'E').SETMFE\n         AIF   ('&_MF1' EQ 'G').SETMFG\n         AGO   .ERR2B\n.SETMFG  ANOP\n&_MFG    SETB  1                       * Signal MF=G\n         AGO   .NOERR2\n.SETMFE  ANOP\n&_MFE    SETB  1                       * Signal MF=E\n         AGO   .NOERR2\n.SETMFL  ANOP\n&_MFL    SETB  1                       * Signal MF=E\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'Required parameter MF omitted'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Parameter MF must be L, (L), (E,plist_addr) or (G,pli*\n               st_addr)'\n.NOERR2  ANOP\n.*\n.* Check PAR1 (level field)\n         AIF   (&_MFE).NOERR3\n         AIF   (&_MFG AND K'&PAR1 NE 0 AND K'&LVL NE 0).NOERR3A\n         AIF   (K'&PAR1 EQ 0 AND K'&LVL EQ 0).ERR3A\n         AIF   (K'&PAR1 NE 0 AND K'&LVL NE 0).ERR3A\n         AGO   .NOERR3A\n.ERR3A   MNOTE 8,'Either the first positional parameter or the LVL-para*\n               meter must be specified'\n.NOERR3A ANOP\n         AIF   (K'&PAR1 EQ 0).NOERR3B\n         AIF   (&_MFG).NOERR3B\n         AIF   ('&PAR1'(1,1) EQ '(').ERR3B\n         AGO   .NOERR3B\n.ERR3B   MNOTE 8,'Positional parameter 1 must not specify (reg) with MF*\n               =L'\n.NOERR3B ANOP\n.NOERR3  ANOP\n.*\n.* Check PAR2 (name field)\n         AIF   (&_MFE).NOERR4\n         AIF   (&_MFG AND K'&PAR2 NE 0 AND K'&NAME NE 0).NOERR4A\n         AIF   (K'&PAR2 EQ 0 AND K'&NAME EQ 0).ERR4A\n         AIF   (K'&PAR2 NE 0 AND K'&NAME NE 0).ERR4A\n         AGO   .NOERR4A\n.ERR4A   MNOTE 8,'Either the second positional parameter or the NAME-pa*\n               rameter must be specified'\n.NOERR4A ANOP\n         AIF   (K'&PAR2 EQ 0).NOERR4B\n         AIF   (&_MFG).NOERR4B\n         AIF   ('&PAR2'(1,1) EQ '(').ERR4B\n         AGO   .NOERR4B\n.ERR4B   MNOTE 8,'Positional parameter 2 must not specify (reg) with MF*\n               =L'\n.NOERR4B ANOP\n.NOERR4  ANOP\n.*\n.* Check PAR3 (returncode field)\n         AIF   (&_MFE).NOERR6\n         AIF   (K'&PAR3 EQ 0).ERR6A\n         AGO   .NOERR6A\n.ERR6A   MNOTE 8,'The third positional parameter must be specified'\n.NOERR6A ANOP\n         AIF   (K'&PAR3 EQ 0).NOERR6B\n         AIF   (&_MFG).NOERR6B\n         AIF   ('&PAR3'(1,1) EQ '(').ERR6B\n         AGO   .NOERR6B\n.ERR6B   MNOTE 8,'Positional parameter 3 must not specify (reg) with MF*\n               =L'\n.NOERR6B ANOP\n.NOERR6  ANOP\n.*\n.* Check the LVL parameter\n         AIF   (K'&LVL EQ 0).NOERR8\n         AIF   (&_MFL AND '&LVL'(1,1) EQ '(').ERR8A\n         AGO   .NOERR8\n.ERR8A   MNOTE 8,'LVL-parameter must not specify (reg) when MF=L'\n.NOERR8  ANOP\n.*\n.* Check the NAME parameter\n         AIF   (K'&NAME EQ 0).NOERR9\n         AIF   (&_MFL AND '&NAME'(1,1) EQ '(').ERR9A\n         AGO   .NOERR9A\n.ERR9A   MNOTE 8,'NAME-parameter must not specify (reg) when MF=L'\n.NOERR9A ANOP\n         AIF   ('&NAME'(1,1) EQ '(').NOERR9 * (reg): no literal check\n&_NAME   SETC  '&NAME'                 * Assume name correct\n&I       SETA  K'&NAME                 *\n         AIF   ('&NAME'(&I,1) NE '''').NOERR9 * Unquoted string ok\n         AIF   ('&NAME'(1,1) NE 'C').NAMNOTC\n&_NAME   SETC  '&_NAME'(2,&I-1)        * Remove leading C\n&I       SETA  &I-1                    *\n.NAMNOTC ANOP\n         AIF   ('&NAME'(1,1) NE '''').ERR9B\n&_NAME   SETC  '&_NAME'(2,&I-2)        * Remove lead/trail quotes\n         AGO   .NOERR9\n.ERR9B   MNOTE 8,'Name must be specified as (un)quoted string or C-type*\n                constant without L-modifier'\n.NOERR9  ANOP\n.*\n.* Check the current amode\n         AIF   ('&BXA_AMODE' EQ '31').NOERR12\n.ERR12   MNOTE 8,'NTDL-macro cannot be issued when in Amode 24'\n.NOERR12 ANOP\n.*\n.* Include mapping macro for plist\n         GENMAPS IEANT                 * Map unless already mapped\n         AIF   (&_MFE).MFE\n.**********************************************************************\n.*\n.* Generate code for MF=L\n.* First part also used for MF=G\n.*\n.**********************************************************************\n.*\n.* All fields not specified on the positional parameter by default\n.* will be appended to the Plist proper\n         AIF   (K'&PAR1 EQ 0 OR K'&PAR2 EQ 0 OR K'&PAR3 EQ 0).APPEND\n         AGO   .NOAPPEND\n.APPEND  ANOP\n&APPEND  SETB  1\n.NOAPPEND ANOP\n.*\n.* For defaulted fields a label is required\n         AIF   (NOT &_MFG).LABEL       * MF=L? normal label processing\n         AIF   ('&_MF2'(1,1) EQ '(').GLBLREG * MF=(G,(reg)): register!\n&_LABEL  SETC  'DLPL.NTDLPL'\n         AGO   .LABELOK\n.GLBLREG ANOP  ,                       * Plist addressed with register\n&_BREG   SETC  '&MF(2,1)'              * Extract pointer register\n&_LABEL  SETC  '(&_BREG)'              * Points to plist\n         AGO   .LABELOK\n.LABEL   ANOP\n&_LABEL  SETC  '&LABEL'\n         AIF   (NOT &APPEND).LABELOK\n         AIF   (K'&LABEL NE 0).LABELOK\n&_LABEL  SETC  '_NTDL&SYSNDX'\n.LABELOK ANOP\n&CTR     SETA  12                      * Plist length\n.*\n.* Determine defaulted positions for unspecified fields\n.* PAR1: level field (fullword)\n&_PAR1   SETC  '&PAR1'                 * Copy specified field location\n         AIF   (K'&PAR1 NE 0).LPAR1OK  * If not specified\n&_PAR1   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR1AD * Unless (reg)\n&_PAR1   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR1AD ANOP\n&CTR     SETA  &CTR+4                  * Advance to next free position\n.LPAR1OK ANOP\n.*\n.* PAR2: name field (16 characters)\n&_PAR2   SETC  '&PAR2'                 * Copy specified field location\n         AIF   (K'&PAR2 NE 0).LPAR2OK  * If not specified\n&_PAR2   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR2AD * Unless (reg)\n&_PAR2   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR2AD ANOP\n&CTR     SETA  &CTR+16                 * Advance to next free position\n.LPAR2OK ANOP\n.*\n.* PAR3: return field (fullword)\n&_PAR3   SETC  '&PAR3'                 * Copy specified field location\n         AIF   (K'&PAR3 NE 0).LPAR3OK  * If not specified\n&_PAR3   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR3AD * Unless (reg)\n&_PAR3   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR3AD ANOP\n&CTR     SETA  &CTR+4                  * Advance to next free position\n.LPAR3OK ANOP\n.*\n.* Plist generation for MF=G follows rules of MF=E\n.* If there are any defaulted positional parameters: reinvoke NTCR\n         AIF   (&_MFL).MFL\n         AIF   (NOT &APPEND).MFE\n&LABEL   NTDL  &_PAR1,&_PAR2,&_PAR3,   *                               *\n               LVL=&LVL,               *                               *\n               NAME=&NAME,             *                               *\n               MF=(G,&_MF2)            *\n         AGO   .LWARN\n.*\n.MFL     ANOP\n.*\n.* Generate code for MF=L\n         DS    0F                      * Align on fullword\n&_LABEL  EQU   *,&CTR                  *\n         DC    AL4(&_PAR1)             * Level pointer\n         DC    AL4(&_PAR2)             * Name pointer\n         DC    AL4(&_PAR3)             * Returncode pointer\n.*\n.* Generate defaulted level field\n         AIF   ('&_PAR1' EQ '&PAR1').LNOPAR1\n         DC    AL4(&LVL)\n.LNOPAR1 ANOP\n.*\n.* Generate defaulted name field\n         AIF   ('&_PAR2' EQ '&PAR2').LNOPAR2\n         DC    CL16'&_NAME'\n.LNOPAR2 ANOP\n.*\n.* Generate defaulted return code field (violates reentrancy)\n         AIF   ('&_PAR3' EQ '&PAR3').LNOPAR3\n         DC    AL4(0)\n.LNOPAR3 ANOP\n.*\n.* Generate warning with length of plist\n.LWARN   ANOP\n         AIF   (NOT &APPEND).MEND\n         MNOTE *,'Generated Plist and areas for NTDL: &CTR bytes'\n         AGO   .MEND\n.*********************************************************************\n.*\n.* Generate coding for MF=E\n.*\n.*********************************************************************\n.MFE     ANOP\n&LABEL   LABEL ,                       *\n.*\n.* If no overriding parameters are specified: skip plist modification\n         AIF   (K'&PAR1 NE 0).EMODPL\n         AIF   (K'&PAR2 NE 0 OR K'&LVL NE 0).EMODPL\n         AIF   (K'&PAR3 NE 0 OR K'&NAME NE 0).EMODPL\n         AGO   .ENOMOD\n.*\n.* Make parmlist addressable\n.EMODPL  ANOP  ,                       * Modify Plist before call\n         AIF   ('&_MF2'(1,1) EQ '(').EREG\nDLPL     USE   NTDLPL,&_MF2            * Set plist addressable\n&UNAM    SETC  'DLPL.'\n         AGO   .EUSEOK\n.EREG    ANOP\n&BREG    SETC  '&MF(2,1)'              * Extract register number\n         USE   NTDLPL,&BREG            * And set plist addressable\n.EUSEOK  ANOP\n.*\n.* If PAR1 specified insert address of level field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR1 EQ 0).ENOPAR1\n         AIF   ('&PAR1'(1,1) EQ '(').EPAR1R * Register specified?\n         LA    &PREG,&PAR1             * Point to level field\n         AGO   .EPAR1OK\n.EPAR1R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR1(1)'              * Extract level field pointer\n.EPAR1OK ANOP\n         ST    &PREG,&UNAM.NTDLLVL     * Put pointer into plist\n.ENOPAR1 ANOP\n.*\n.* If LVL specified insert value into field\n         AIF   (K'&LVL EQ 0).ENOLVL\n         AIF   (K'&PAR1 NE 0).EPTR1OK  * Pointer already loaded?\n         L     &PREG,NTDLLVL           * Point to level field\n.EPTR1OK ANOP\n         AIF   ('&LVL'(1,1) EQ '(').ELVLR * Register specified?\n         LA    &VREG,&LVL              * Load level value\n         AGO   .ELVLOK\n.ELVLR   ANOP  ,                       * Specified as (reg)\n&VREG    SETC  '&LVL(1)'               * Extract level value register\n.ELVLOK  ANOP\n         ST    &VREG,0(,&PREG)         * And put into level field\n.ENOLVL  ANOP\n.*\n.* If PAR2 specified insert address of name field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR2 EQ 0).ENOPAR2\n         AIF   ('&PAR2'(1,1) EQ '(').EPAR2R * Register specified?\n         LA    &PREG,&PAR2             * Point to name field\n         AGO   .EPAR2OK\n.EPAR2R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR2(1)'              * Extract name field pointer\n.EPAR2OK ANOP\n         ST    &PREG,&UNAM.NTDLNAM     * Put pointer into plist\n.ENOPAR2 ANOP\n.*\n.* If NAME specified insert value into field\n         AIF   (K'&NAME EQ 0).ENONAM\n         AIF   (K'&PAR2 NE 0).EPTR2OK  * Pointer already loaded?\n         L     &PREG,NTDLNAM           * Point to name field\n.EPTR2OK ANOP\n         AIF   ('&NAME'(1,1) EQ '(').ENAMR * Register specified?\n         MVC   0(16,&PREG),=CL16'&_NAME' * Move name into field\n         AGO   .ENONAM\n.ENAMR   ANOP  ,                       * Specified as (reg)\n&VREG    SETC  '&NAME(1)'              * Extract name value register\n         MVC   0(16,&PREG),0(&VREG)    * Move name into field\n.ENONAM  ANOP\n.*\n.* If PAR3 specified insert address of returncode field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR3 EQ 0).ENOPAR3\n         AIF   ('&PAR3'(1,1) EQ '(').EPAR3R * Register specified?\n         LA    &PREG,&PAR3             * Point to retcode field\n         AGO   .EPAR3OK\n.EPAR3R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR3(1)'              * Extract retcode pointer\n.EPAR3OK ANOP\n         ST    &PREG,&UNAM.NTDLRCD     * Put pointer into plist\n.ENOPAR3 ANOP\n.*\n.* Plist is now complete\n         AIF   ('&_MF2'(1,1) EQ '(').EDROPR\n         DROP  DLPL                    * NTDLPL\n         AGO   .EDROPOK\n.EDROPR  DROP  &BREG                   * NTDLPL\n.EDROPOK ANOP\n.ENOMOD  ANOP  ,                       * No modifications to plist\n.*\n.* For MF=G we're done\n         AIF   (&_MFG).MEND\n.*\n.* Invoke Name/Token service IEANTDL\n         AIF   (K'&BREG EQ 0).ELAR1\n         LR    R1,&BREG                * R1 must point to plist\n         AGO   .ER1OK\n.ELAR1   ANOP\n         LA    R1,&_MF2                * R1 must point to plist\n.ER1OK   ANOP\n.*\n         L     R15,X'010'              * Retrieve\n         L     R15,X'220'(,R15)        *  address\n         L     R15,X'014'(,R15)        *   of\n         L     R15,X'00C'(,R15)        *    IEANTDL\n         BASR  R14,R15                 * And call it\n.*\n.MEND    MEND\n./ ADD NAME=NTRT     0100-20096-20096-0111-00497-00497-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Retrieve a name/token pair\n.*\n&LABEL   NTRT  &PAR1,                  * Parameter 1                   *\n               &PAR2,                  * Parameter 2                   *\n               &PAR3,                  * Parameter 3                   *\n               &PAR4,                  * Parameter 4                   *\n               &LVL=,                  * Value for level parameter     *\n               &NAME=,                 * Value for token name          *\n               &MF=                    * MF=L or MF=(E,list_addr)      *\n                                       *      or MF=(G,list_addr)\n.*\n.* &PAR1 (reg) or name of a fullword, containing the level\n.*       if omitted LVL= must be specified.\n.* &PAR2 (reg) or name of a 16-byte area, containing the token name\n.*       if omitted NAME= must be specified.\n.* &PAR3 (reg) or name of a 16-byte area, where the token value is to\n.*       be returned by name/token services.\n.* &PAR4 (reg) or name of a fullword, where the returncode will go\n.*       must not be omitted.\n.*\n.* &LVL     Literal, constant, or (reg). If specified, will be moved\n.*          into the level parameter fullword.\n.* &NAME    Literal, constant, or (reg). If specified, will be moved\n.*          into the token name parameter 16-byte area.\n.* &MF      L or (L) for the list-form\n.*          (E,list_addr) for the execute form\n.*          (G,list_addr) for the generate form\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC NTRT                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_AMODE              * Current amode\n         LCLC  &_LABEL                 *\n         LCLC  &_MF1                   * 1st MF-subparm: L or E\n         LCLC  &_MF2                   * 2nd MF-subparm: plist_address\n         LCLB  &_MFL                   * On if MF=L\n         LCLB  &_MFE                   * On if MF=E\n         LCLB  &_MFG                   * On if MF=G\n         LCLB  &APPEND                 * On if fields appended to plist\n         LCLA  &CTR                    * Counter for allocating fields\n         LCLC  &_PAR1                  * &PAR1 or default\n         LCLC  &_PAR2                  * &PAR2 or default\n         LCLC  &_PAR3                  * &PAR3 or default\n         LCLC  &_PAR4                  * &PAR4 or default\n         LCLC  &_NAME                  * &NAME as unquoted string\n         LCLA  &I                      * Index into substrings\n         LCLC  &BREG                   * Base register for plist\n         LCLC  &PREG                   * Pointer register\n         LCLC  &VREG                   * Value register\n         LCLC  &UNAM                   * USING name\n.*\n.* Check positional parameters\n         AIF   (N'&SYSLIST LE 4).NOERR1\n         MNOTE 4,'Too many positional parameters: ignored'\n.NOERR1  ANOP\n.*\n.* Check the MF parameter\n         AIF   (K'&MF EQ 0).ERR2A\n&_MF1    SETC  '&MF'                   * Copy MF-value\n         AIF   ('&MF' EQ 'L').SETMFL   * MF=L: ok\n         AIF   ('&MF'(1,1) NE '(').ERR2B * MF=E must be in sublist\n         AIF   (N'&MF EQ 0).ERR2B      *\n&_MF1    SETC  '&MF(1)'                * Copy MF-value\n         AIF   ('&_MF1' EQ 'L' AND N'&MF NE 1).ERR2B\n         AIF   ('&_MF1' EQ 'L').SETMFL * MF=(L): ok\n         AIF   (N'&MF NE 2).ERR2B      * Must have two sub-operands\n&_MF2    SETC  '&MF(2)'                * Copy plist_address\n         AIF   ('&_MF1' EQ 'E').SETMFE\n         AIF   ('&_MF1' EQ 'G').SETMFG\n         AGO   .ERR2B\n.SETMFG  ANOP\n&_MFG    SETB  1                       * Signal MF=G\n         AGO   .NOERR2\n.SETMFE  ANOP\n&_MFE    SETB  1                       * Signal MF=E\n         AGO   .NOERR2\n.SETMFL  ANOP\n&_MFL    SETB  1                       * Signal MF=E\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'Required parameter MF omitted'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Parameter MF must be L, (L), (E,plist_addr) or (G,pli*\n               st_addr)'\n.NOERR2  ANOP\n.*\n.* Check PAR1 (level field)\n         AIF   (&_MFE).NOERR3\n         AIF   (&_MFG AND K'&PAR1 NE 0 AND K'&LVL NE 0).NOERR3A\n         AIF   (K'&PAR1 EQ 0 AND K'&LVL EQ 0).ERR3A\n         AIF   (K'&PAR1 NE 0 AND K'&LVL NE 0).ERR3A\n         AGO   .NOERR3A\n.ERR3A   MNOTE 8,'Either the first positional parameter or the LVL-para*\n               meter must be specified'\n.NOERR3A ANOP\n         AIF   (K'&PAR1 EQ 0).NOERR3B\n         AIF   (&_MFG).NOERR3B\n         AIF   ('&PAR1'(1,1) EQ '(').ERR3B\n         AGO   .NOERR3B\n.ERR3B   MNOTE 8,'Positional parameter 1 must not specify (reg) with MF*\n               =L'\n.NOERR3B ANOP\n.NOERR3  ANOP\n.*\n.* Check PAR2 (name field)\n         AIF   (&_MFE).NOERR4\n         AIF   (&_MFG AND K'&PAR2 NE 0 AND K'&NAME NE 0).NOERR4A\n         AIF   (K'&PAR2 EQ 0 AND K'&NAME EQ 0).ERR4A\n         AIF   (K'&PAR2 NE 0 AND K'&NAME NE 0).ERR4A\n         AGO   .NOERR4A\n.ERR4A   MNOTE 8,'Either the second positional parameter or the NAME-pa*\n               rameter must be specified'\n.NOERR4A ANOP\n         AIF   (K'&PAR2 EQ 0).NOERR4B\n         AIF   (&_MFG).NOERR4B\n         AIF   ('&PAR2'(1,1) EQ '(').ERR4B\n         AGO   .NOERR4B\n.ERR4B   MNOTE 8,'Positional parameter 2 must not specify (reg) with MF*\n               =L'\n.NOERR4B ANOP\n.NOERR4  ANOP\n.*\n.* Check PAR3 (token field)\n         AIF   (&_MFE).NOERR5\n         AIF   (K'&PAR3 EQ 0).ERR5A\n         AGO   .NOERR5A\n.ERR5A   MNOTE 8,'The third positional parameter must be specified'\n.NOERR5A ANOP\n         AIF   (K'&PAR3 EQ 0).NOERR5B\n         AIF   (&_MFG).NOERR5B\n         AIF   ('&PAR3'(1,1) EQ '(').ERR5B\n         AGO   .NOERR5B\n.ERR5B   MNOTE 8,'Positional parameter 3 must not specify (reg) with MF*\n               =L'\n.NOERR5B ANOP\n.NOERR5  ANOP\n.*\n.* Check PAR4 (returncode field)\n         AIF   (&_MFE).NOERR7\n         AIF   (K'&PAR4 EQ 0).ERR7A\n         AGO   .NOERR7A\n.ERR7A   MNOTE 8,'The fourth positional parameter must be specified'\n.NOERR7A ANOP\n         AIF   (K'&PAR4 EQ 0).NOERR7B\n         AIF   (&_MFG).NOERR7B\n         AIF   ('&PAR4'(1,1) EQ '(').ERR7B\n         AGO   .NOERR7B\n.ERR7B   MNOTE 8,'Positional parameter 4 must not specify (reg) with MF*\n               =L'\n.NOERR7B ANOP\n.NOERR7  ANOP\n.*\n.* Check the LVL parameter\n         AIF   (K'&LVL EQ 0).NOERR8\n         AIF   (&_MFL AND '&LVL'(1,1) EQ '(').ERR8A\n         AGO   .NOERR8\n.ERR8A   MNOTE 8,'LVL-parameter must not specify (reg) when MF=L'\n.NOERR8  ANOP\n.*\n.* Check the NAME parameter\n         AIF   (K'&NAME EQ 0).NOERR9\n         AIF   (&_MFL AND '&NAME'(1,1) EQ '(').ERR9A\n         AGO   .NOERR9A\n.ERR9A   MNOTE 8,'NAME-parameter must not specify (reg) when MF=L'\n.NOERR9A ANOP\n         AIF   ('&NAME'(1,1) EQ '(').NOERR9 * (reg): no literal check\n&_NAME   SETC  '&NAME'                 * Assume name correct\n&I       SETA  K'&NAME                 *\n         AIF   ('&NAME'(&I,1) NE '''').NOERR9 * Unquoted string ok\n         AIF   ('&NAME'(1,1) NE 'C').NAMNOTC\n&_NAME   SETC  '&_NAME'(2,&I-1)        * Remove leading C\n&I       SETA  &I-1                    *\n.NAMNOTC ANOP\n         AIF   ('&NAME'(1,1) NE '''').ERR9B\n&_NAME   SETC  '&_NAME'(2,&I-2)        * Remove lead/trail quotes\n         AGO   .NOERR9\n.ERR9B   MNOTE 8,'Name must be specified as (un)quoted string or C-type*\n                constant without L-modifier'\n.NOERR9  ANOP\n.*\n.* Check the current amode\n         AIF   ('&BXA_AMODE' EQ '31').NOERR12\n.ERR12   MNOTE 8,'NTRT-macro cannot be issued when in Amode 24'\n.NOERR12 ANOP\n.*\n.* Include mapping macro for plist\n         GENMAPS IEANT                 * Map unless already mapped\n         AIF   (&_MFE).MFE\n.**********************************************************************\n.*\n.* Generate code for MF=L\n.* First part also used for MF=G\n.*\n.**********************************************************************\n.*\n.* All fields not specified on the positional parameter by default\n.* will be appended to the Plist proper\n         AIF   (K'&PAR1 EQ 0 OR K'&PAR2 EQ 0 OR K'&PAR3 EQ 0).APPEND\n         AIF   (K'&PAR4 EQ 0).APPEND\n         AGO   .NOAPPEND\n.APPEND  ANOP\n&APPEND  SETB  1\n.NOAPPEND ANOP\n.*\n.* For defaulted fields a label is required\n         AIF   (NOT &_MFG).LABEL       * MF=L? normal label processing\n         AIF   ('&_MF2'(1,1) EQ '(').GLBLREG * MF=(G,(reg)): register!\n&_LABEL  SETC  'RTPL.NTRTPL'\n         AGO   .LABELOK\n.GLBLREG ANOP  ,                       * Plist addressed with register\n&_BREG   SETC  '&MF(2,1)'              * Extract pointer register\n&_LABEL  SETC  '(&_BREG)'              * Points to plist\n         AGO   .LABELOK\n.LABEL   ANOP\n&_LABEL  SETC  '&LABEL'\n         AIF   (NOT &APPEND).LABELOK\n         AIF   (K'&LABEL NE 0).LABELOK\n&_LABEL  SETC  '_NTRT&SYSNDX'\n.LABELOK ANOP\n&CTR     SETA  16                      * Plist length\n.*\n.* Determine defaulted positions for unspecified fields\n.* PAR1: level field (fullword)\n&_PAR1   SETC  '&PAR1'                 * Copy specified field location\n         AIF   (K'&PAR1 NE 0).LPAR1OK  * If not specified\n&_PAR1   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR1AD * Unless (reg)\n&_PAR1   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR1AD ANOP\n&CTR     SETA  &CTR+4                  * Advance to next free position\n.LPAR1OK ANOP\n.*\n.* PAR2: name field (16 characters)\n&_PAR2   SETC  '&PAR2'                 * Copy specified field location\n         AIF   (K'&PAR2 NE 0).LPAR2OK  * If not specified\n&_PAR2   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR2AD * Unless (reg)\n&_PAR2   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR2AD ANOP\n&CTR     SETA  &CTR+16                 * Advance to next free position\n.LPAR2OK ANOP\n.*\n.* PAR3: token field (16 bytes)\n&_PAR3   SETC  '&PAR3'                 * Copy specified field location\n         AIF   (K'&PAR3 NE 0).LPAR3OK  * If not specified\n&_PAR3   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR3AD * Unless (reg)\n&_PAR3   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR3AD ANOP\n&CTR     SETA  &CTR+16                 * Advance to next free position\n.LPAR3OK ANOP\n.*\n.* PAR4: return field (fullword)\n&_PAR4   SETC  '&PAR4'                 * Copy specified field location\n         AIF   (K'&PAR4 NE 0).LPAR4OK  * If not specified\n&_PAR4   SETC  '&_LABEL.+&CTR'         *  append field to plist\n         AIF   ('&_LABEL'(1,1) NE '(').LPAR4AD * Unless (reg)\n&_PAR4   SETC  '&CTR.&_LABEL'          *  append field to plist\n.LPAR4AD ANOP\n&CTR     SETA  &CTR+4                  * Advance to next free position\n.LPAR4OK ANOP\n.*\n.* Plist generation for MF=G follows rules of MF=E\n.* If there are any defaulted positional parameters: reinvoke NTRT\n         AIF   (&_MFL).MFL\n         AIF   (NOT &APPEND).MFE\n&LABEL   NTRT  &_PAR1,&_PAR2,&_PAR3,&_PAR4,                            *\n               LVL=&LVL,               *                               *\n               NAME=&NAME,             *                               *\n               MF=(G,&_MF2)            *\n         AGO   .LWARN\n.*\n.MFL     ANOP\n.*\n.* Generate code for MF=L\n         DS    0F                      * Align on fullword\n&_LABEL  EQU   *,&CTR                  *\n         DC    AL4(&_PAR1)             * Level pointer\n         DC    AL4(&_PAR2)             * Name pointer\n         DC    AL4(&_PAR3)             * Token pointer\n         DC    AL4(&_PAR4)             * Returncode pointer\n.*\n.* Generate defaulted level field\n         AIF   ('&_PAR1' EQ '&PAR1').LNOPAR1\n         DC    AL4(&LVL)\n.LNOPAR1 ANOP\n.*\n.* Generate defaulted name field\n         AIF   ('&_PAR2' EQ '&PAR2').LNOPAR2\n         DC    CL16'&_NAME'\n.LNOPAR2 ANOP\n.*\n.* Generate defaulted token field (violates reentrancy)\n         AIF   ('&_PAR3' EQ '&PAR3').LNOPAR3\n         DC    XL16'00'\n.LNOPAR3 ANOP\n.*\n.* Generate defaulted return code field (violates reentrancy)\n         AIF   ('&_PAR4' EQ '&PAR4').LNOPAR4\n         DC    AL4(0)\n.LNOPAR4 ANOP\n.*\n.* Generate warning with length of plist\n.LWARN   ANOP\n         AIF   (NOT &APPEND).MEND\n         MNOTE *,'Generated Plist and areas for NTRT: &CTR bytes'\n         AGO   .MEND\n.*********************************************************************\n.*\n.* Generate coding for MF=E\n.*\n.*********************************************************************\n.MFE     ANOP\n&LABEL   LABEL ,                       *\n.*\n.* If no overriding parameters are specified: skip plist modification\n         AIF   (K'&PAR1 NE 0).EMODPL\n         AIF   (K'&PAR2 NE 0 OR K'&LVL NE 0).EMODPL\n         AIF   (K'&PAR3 NE 0 OR K'&NAME NE 0).EMODPL\n         AIF   (K'&PAR4 NE 0).EMODPL\n         AGO   .ENOMOD\n.*\n.* Make parmlist addressable\n.EMODPL  ANOP  ,                       * Modify Plist before call\n         AIF   ('&_MF2'(1,1) EQ '(').EREG\nRTPL     USE   NTRTPL,&_MF2            * Set plist addressable\n&UNAM    SETC  'RTPL.'\n         AGO   .EUSEOK\n.EREG    ANOP\n&BREG    SETC  '&MF(2,1)'              * Extract register number\n         USE   NTRTPL,&BREG            * And set plist addressable\n.EUSEOK  ANOP\n.*\n.* If PAR1 specified insert address of level field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR1 EQ 0).ENOPAR1\n         AIF   ('&PAR1'(1,1) EQ '(').EPAR1R * Register specified?\n         LA    &PREG,&PAR1             * Point to level field\n         AGO   .EPAR1OK\n.EPAR1R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR1(1)'              * Extract level field pointer\n.EPAR1OK ANOP\n         ST    &PREG,&UNAM.NTRTLVL     * Put pointer into plist\n.ENOPAR1 ANOP\n.*\n.* If LVL specified insert value into field\n         AIF   (K'&LVL EQ 0).ENOLVL\n         AIF   (K'&PAR1 NE 0).EPTR1OK  * Pointer already loaded?\n         L     &PREG,NTRTLVL           * Point to level field\n.EPTR1OK ANOP\n         AIF   ('&LVL'(1,1) EQ '(').ELVLR * Register specified?\n         LA    &VREG,&LVL              * Load level value\n         AGO   .ELVLOK\n.ELVLR   ANOP  ,                       * Specified as (reg)\n&VREG    SETC  '&LVL(1)'               * Extract level value register\n.ELVLOK  ANOP\n         ST    &VREG,0(,&PREG)         * And put into level field\n.ENOLVL  ANOP\n.*\n.* If PAR2 specified insert address of name field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR2 EQ 0).ENOPAR2\n         AIF   ('&PAR2'(1,1) EQ '(').EPAR2R * Register specified?\n         LA    &PREG,&PAR2             * Point to name field\n         AGO   .EPAR2OK\n.EPAR2R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR2(1)'              * Extract name field pointer\n.EPAR2OK ANOP\n         ST    &PREG,&UNAM.NTRTNAM     * Put pointer into plist\n.ENOPAR2 ANOP\n.*\n.* If NAME specified insert value into field\n         AIF   (K'&NAME EQ 0).ENONAM\n         AIF   (K'&PAR2 NE 0).EPTR2OK  * Pointer already loaded?\n         L     &PREG,NTRTNAM           * Point to name field\n.EPTR2OK ANOP\n         AIF   ('&NAME'(1,1) EQ '(').ENAMR * Register specified?\n         MVC   0(16,&PREG),=CL16'&_NAME' * Move name into field\n         AGO   .ENONAM\n.ENAMR   ANOP  ,                       * Specified as (reg)\n&VREG    SETC  '&NAME(1)'              * Extract name value register\n         MVC   0(16,&PREG),0(&VREG)    * Move name into field\n.ENONAM  ANOP\n.*\n.* If PAR3 specified insert address of token field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR3 EQ 0).ENOPAR3\n         AIF   ('&PAR3'(1,1) EQ '(').EPAR3R * Register specified?\n         LA    &PREG,&PAR3             * Point to token field\n         AGO   .EPAR3OK\n.EPAR3R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR3(1)'              * Extract token field pointer\n.EPAR3OK ANOP\n         ST    &PREG,&UNAM.NTRTTOK     * Put pointer into plist\n.ENOPAR3 ANOP\n.*\n.* If PAR4 specified insert address of returncode field into plist\n&PREG    SETC  'R15'                   * Set register to use as pointer\n&VREG    SETC  'R0'                    * Set register to use for value\n         AIF   (K'&PAR4 EQ 0).ENOPAR4\n         AIF   ('&PAR4'(1,1) EQ '(').EPAR4R * Register specified?\n         LA    &PREG,&PAR4             * Point to retcode field\n         AGO   .EPAR4OK\n.EPAR4R  ANOP  ,                       * Specified as (reg)\n&PREG    SETC  '&PAR4(1)'              * Extract retcode pointer\n.EPAR4OK ANOP\n         ST    &PREG,&UNAM.NTRTRCD     * Put pointer into plist\n.ENOPAR4 ANOP\n.*\n.* Plist is now complete\n         AIF   ('&_MF2'(1,1) EQ '(').EDROPR\n         DROP  RTPL                    * NTRTPL\n         AGO   .EDROPOK\n.EDROPR  DROP  &BREG                   * NTRTPL\n.EDROPOK ANOP\n.ENOMOD  ANOP  ,                       * No modifications to plist\n.*\n.* For MF=G we're done\n         AIF   (&_MFG).MEND\n.*\n.* Invoke Name/Token service IEANTRT\n         AIF   (K'&BREG EQ 0).ELAR1\n         LR    R1,&BREG                * R1 must point to plist\n         AGO   .ER1OK\n.ELAR1   ANOP\n         LA    R1,&_MF2                * R1 must point to plist\n.ER1OK   ANOP\n.*\n         L     R15,X'010'              * Retrieve\n         L     R15,X'220'(,R15)        *  address\n         L     R15,X'014'(,R15)        *   of\n         L     R15,X'008'(,R15)        *    IEANTRT\n         BASR  R14,R15                 * And call it\n.*\n.MEND    MEND\n./ ADD NAME=OPSYNS   0100-20096-20096-0111-00110-00110-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates OPSYNs for a list of opcodes\n.*\n         OPSYNS ,                      * Arguments in &SYSLIST\n.*\n.* &SYSLIST - each entry specifies an opcode or directive which will\n.*            be replaced by its underscore-prefixed equivalent\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC OPSYNS                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &SP_SHOWALL             * SHOWALL option from SYSPARM\n         LCLA  &I                      * Index for SYSLIST\n         LCLC  &ARG                    * Argument from SYSLIST\n         LCLC  &_PROPT                 * NOPRINT option for PUSH/POP\n         LCLC  &_PRINT                 * NOPRINT option for PRINT\n.*\n.* Set NOPRINT options\n&_PRINT  SETC  'ON'                    * SHOWALL: show PRINT lines\n         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP lines\n&_PRINT  SETC  'OFF,NOPRINT'           * Not ALL: omit PRINT lines\n&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines\n.PRINTOK ANOP\n.*\n.* Change print options\n         PUSH  PRINT&_PROPT\n         PRINT &_PRINT\n.*\n.* Loop thru SYSLIST to generate OPSYNs\n&I       SETA  0                       * I indexes SYSLIST\n.LOOP1   ANOP  ,\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK\n&ARG     SETC  '&SYSLIST(&I)'          * Extract opcode\n         AIF   ('&ARG'(1,1) EQ '_').RESET\n.SET     ANOP  ,                       * Replace opcode by macro\n         AIF   (K'&ARG EQ 0).LOOP1     * Skip omitted opcode\n_&ARG    OPSYN &ARG                    * Create underscore version\n&ARG     OPSYN ,                       * Delete original opcode\n         AGO   .LOOP1                  * Go process next entry\n.RESET   ANOP  ,                       * Replace macro by org. opcode\n&ARG     SETC  '&ARG'(2,*)             * Extract original opcode\n&ARG     OPSYN _&ARG                   * Re-enable original opcode\n_&ARG    OPSYN ,                       * Disable replacement macro\n         AGO   .LOOP1                  * Go process next entry\n.LOOP1OK ANOP  ,\n.*\n.* Restore printing options\n         POP   PRINT&_PROPT\n.*\n.MEND    MEND\n./ ADD NAME=PGM      0100-20096-20096-0111-01019-01019-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates entry logic for a CSECT\n.*\n&LABEL   PGM   &VERSION=,              * Version id: VnnRnnMnn         *\n               &AMODE=31,              * Amode default=31              *\n               &RMODE=ANY,             * Rmode default=ANY             *\n               &ENTRY=MAIN,            * MAIN/SUBR/SUBPGM/SVC          *\n               &SAVES=,                * Nr of internal saveareas      *\n               &MAPS=,                 * Mapping macro's to include    *\n               &LIST=NO,               * List maps (YES/NO)            *\n               &WORKPTR=,              * Pointer to dyn.area           *\n               &WORKAREA=,             * Descriptor of dyn.area        *\n               &HDRTXT='No description', * Description for list-headers*\n               &DBG=,                  * Name of ptrs for debugging    *\n               &ABND=                  * Info for Abend service rout.\n.*\n.* &LABEL      CSECT name to be used. Defaults to member name.\n.* &VERSION    must be in the format VnnRnnMnn\n.* &AMODE      must be 24 or 31\n.* &RMODE      must be 24, 31, or ANY\n.* &ENTRY      Type of program (see below) or (Type,ASC-mode)\n.*             ASC-mode defaults to PRIM, but may be specified as AR\n.*             as well. The following types of program are defined:\n.*             MAIN:   Generates linkage using a stack-entry (BAKR).\n.*                     Intended for main programs\n.*             SUBPGM: Generates normal linkage using savearea at R13.\n.*                     Intended for sub-programs\n.*             SUBR:   Generates normal linkage using internal savearea\n.*                     Intended for CSECTS that share their R13 with\n.*                       their caller.\n.*             SVC:    Generates linkage appropriate for SVC-entry.\n.*                     Intended for SVC's and SVC-screening routines\n.*             SPCR:   Generates linkage appropriate for stacking\n.*                     PC-routines. Assumes routine is entered\n.*                     in supervisor mode.\n.*             SRB:    Generates linkage appropriate for SRB-entry.\n.*                     Sets up FRR parmlist with ptr to SRB and passes\n.*                     the SRB parmlist ptr in R1 to the mainline.\n.*             FRR     Generates linkage appropriate for FRR routines.\n.*             RMTR    Generates linkage appropriate for RMTR routines.\n.*                     Passes the SRB address in R1 to the mainline.\n.*             RESMGR  Generates linkage appropriate for a resource\n.*                     manager routine. Sets up MAIN linkage and\n.*                     establishes addressability to the RMPL.\n.* &SAVES      The number of internal save-areas to allocate\n.* &MAPS       Mapping macro's to be generated, must be a sublist\n.* &LIST       NO: no listings are generated from the MAPS parameter\n.*             YES: listings are generated from the MAPS parameter\n.* &WORKPTR    Either one or three sub-operands.\n.*             When omitted, no pointer is assumed to exist and a\n.*             workarea will be allocated, as specified in &WORKAREA.\n.*             If specified as three operands, they must be specified\n.*             as follows:\n.*           - The label of the pointer field\n.*           - The label of a using-location\n.*           - The register that contains the address of the using loc.\n.*             If there is only 1 sub-operand, must be a (register),\n.*             unless ENTRY=SUBR, in which case the sub-operand may\n.*             specify a field in the workarea, passed thru R13.\n.* &WORKAREA   DSECT name or sublist with two to four sub-operands:\n.*           - DSECT name for using with R13. This DSECT must start\n.*             with a DCL BXASAVE. It also must contain an\n.*             equate for DSECTname_LEN. The DSECT must be specified on\n.*             the MAPS-parameter of the macro invocation.\n.*           - Length of the work-area to be allocated\n.*             This parameter may be omitted for ENTRY=SUBR\n.*           - An optional 8-character id for the first 8 positions of\n.*             the work-area. Defaults to &_LABEL.\n.*           - An optional fieldname in the workarea, which is to\n.*             contain the total amount of storage allocated for\n.*             the workarea plus internal saveareas.\n.* &HDRTXT     Header text for use on the listing's header lines\n.* &DBG        Valid only with ENTRY=SUBR. Names of 2 fields with:\n.*           - pointer to debug module\n.*           - plist for debug module\n.* &ABND       One or two sub-operands\n.*           - User abend code to use for this program\n.*           - Label to use for the abend service routine (dft: _ABND)\n.*\n.* Work-area requirements: (See macro MAPSAVE)\n.* at offset  0: a doubleword reserved for an area ID\n.* at offset  8: a standard MVS save-area of 18 fullwords\n.* at offset 80: two pointers to internal save-areas, see MAPSAVE\n.*\n.* Define global variables\n         GBLC  &SYSASCE                * SYSSTATE's ASC mode variable\n         GBLC  &BXA_WALAB              * Work label (for using)\n         GBLC  &BXA_WALEN              * Work area length\n         GBLC  &BXA_ENTRY              * Entry mode\n         GBLA  &BXA_SAVES              * Nr of internal save-areas\n         GBLC  &BXA_WORKPTR(3)         * Pointer to dyn.storage\n         GBLB  &BXA_SVCMODE            * On when in supervisor mode\n         GBLC  &BXA_SUBR               * Current subroutine name\n         GBLC  &BXA_SUBRTP             * Current subroutine type\n         GBLC  &BXA_AMODE              * Current Amode\n         GBLC  &BXA_USE_R12            * USING label for R12\n         GBLC  &BXA_USE_DS(50)         * DSECT names with DCL's\n         GBLC  &BXA_USE_SDS(50)        * Sub-DSECTs\n         GBLC  &BXA_USE_LBL(50)        * Labels for the Sus-DSECTs\n         GBLB  &BXA_PGM                * On if expanded before\n         GBLC  &BXA_PGM_LABEL          * Label used by PGM-expansion\n         GBLC  &BXA_PGM_TITLE          * Title used for the listing\n         GBLC  &BXA_ABND(50)           * Labels used by ABND macro\n         GBLB  &SP_SHOWALL             * On if all lines to show\n         GBLB  &SP_OPT                 * On for optimize mode\n         GBLC  &BXA_DBG_PTR            * Fieldname of ptr to dbg-mod\n         GBLC  &BXA_DBG_PLIST          * Fieldname of plist for dbg-mod\n         GBLA  &BXA_USENDX             * Master index for USING tables\n         GBLB  &BXA_MAC_MAPPSA         * PSA mapped?\n         GBLA  &BXA_NUMVAL             * Retvalue from CHKREG/CHKNUM\n.*\n.* &BXA_ENTRY is given a value after validity check at error6\n.* &BXA_WALAB is given a value after validity check at error7\n.* &BXA_WALEN is given a value after validity check at error7\n.* &BXA_SAVES is given a value after validity check at error10\n&BXA_WORKPTR(1) SETC '&WORKPTR(1)'     * Copy\n&BXA_WORKPTR(2) SETC '&WORKPTR(2)'     *   workptr\n&BXA_WORKPTR(3) SETC '&WORKPTR(3)'     *     values\n&BXA_SUBR SETC '*MAIN'                 * Start with open code\n&BXA_SUBRTP SETC ''                    * Start with normal type routine\n&BXA_AMODE SETC '&AMODE'               * Start with 31-bit Amode\n&BXA_USENDX SETA 1                     * Init index BXA_USENDX0/1 to 1\n.*\n.* Define local variables\n         LCLC  &_ENTRY1                * Type of program\n         LCLC  &_ENTRY2                * ASC-mode of program on entry\n         LCLC  &_WORKA1                * Label for USING for workarea\n         LCLC  &_WORKA2                * Length of workarea\n         LCLC  &_WORKA3                * Id for workarea\n         LCLC  &_WORKA4                * Fieldname for total size\n         LCLB  &_WORKP1REG             * On if &WORKPTR(1) is a reg.\n         LCLC  &_WORKP1                * First sub-operand of WORKPTR\n         LCLC  &_WORKP3                * Basereg. for area with ptr\n         LCLC  &_HDRTXT                * Text for headers\n         LCLC  &_LABEL                 * Entry point label\n         LCLC  &_STOR_LEN              * Size of getmain\n         LCLC  &_STOR_LOC              * Location for getmained area\n         LCLA  &LEN                    * Length of HDRTXT\n         LCLC  &CC,&YY,&MM,&DD         * Century, year, month, day\n         LCLC  &HR,&MIN                * Hours and minutes\n         LCLC  &_LIST1,&_LIST2         * LIST sub-option 1 and 2\n         LCLC  &_MCALL                 * Print option MCALL/NOMCALL\n         LCLC  &_PROPT                 * Print option for PUSH/POP\n         LCLC  &_ABND1                 * Abend code to generate\n         LCLC  &_ABND2                 * Abend label to generate\n         LCLA  &I                      * Index for &BXA_USE_... arrays\n         LCLC  &SA                     * Savearea prefix\n         LCLC  &_ID                    * Identifier for workarea\n         LCLC  &_REG                   * reg with ptr to WA after alloc\n         LCLC  &_CLRSZ                 * Size of area to clear\n.*\n.* PGM used before?\n         AIF   (&BXA_PGM).ERR0A\n         AGO   .NOERR0A\n.ERR0A   MNOTE 8,'You cannot issue PGM more than once in a program'\n         MEXIT\n.NOERR0A ANOP\n&BXA_PGM SETB 1\n.*\n.* Extract assembly options from SYSPARM\n         SYSPARM\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC PGM                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Set listing options\n&_MCALL  SETC  'MCALL'                 * SHOWALL: show MCALL lines\n         AIF   (&SP_SHOWALL).PRINTOK   * SHOWALL: show PUSH/POP lines\n&_MCALL  SETC  'NOMCALL'               * Not ALL: omit MCALL lines\n&_PROPT  SETC  ',NOPRINT'              * Not ALL: omit PUSH/POP lines\n.PRINTOK ANOP\n         PRINT GEN,DATA,&_MCALL,UHEAD&_PROPT\n.*\n.* Check Label parameter\n&_LABEL  SETC  '&LABEL'\n         AIF   (K'&LABEL NE 0).LABELOK\n&_LABEL  SETC  '&SYSIN_MEMBER'\n.LABELOK ANOP\n&BXA_PGM_LABEL SETC '&_LABEL'\n.*\n.* Check hdrtxt parameter - remove quotes if necessary\n&_HDRTXT SETC  '&HDRTXT'\n         AIF   ('&HDRTXT'(1,1) NE '''').NOQUOTE\n&LEN     SETA  K'&HDRTXT\n&LEN     SETA  &LEN-2\n&_HDRTXT SETC  '&HDRTXT'(2,&LEN)\n.NOQUOTE ANOP\n.*\n.* Set title for listing\n&BXA_PGM_TITLE SETC  '&_LABEL - Copyright B.V. Bixoft - &_HDRTXT'\n         TITLE '&BXA_PGM_TITLE'\n         AIF   (&SP_SHOWALL).TITLE\n.* Generate comment line in stead of a MNOTE line\n*\n         AGO   .TITLEOK\n.TITLE   ANOP\n         MNOTE *,'Previous STMT: TITLE ''&BXA_PGM_TITLE'''\n.TITLEOK ANOP\n.*\n.* PGM used as first macro?\n         AIF   (&SYSNDX NE 1).ERR0B\n         AGO   .NOERR0B\n.ERR0B   MNOTE 8,'PGM must be the first macro in your program'\n         MEXIT\n.NOERR0B ANOP\n.*\n.* Check version parameter\n         AIF   (K'&VERSION NE 9).ERROR1\n         AIF   ('&VERSION'(1,1) NE 'V').ERROR1\n         AIF   ('&VERSION'(2,1) LT '0').ERROR1\n         AIF   ('&VERSION'(3,1) LT '0').ERROR1\n         AIF   ('&VERSION'(4,1) NE 'R').ERROR1\n         AIF   ('&VERSION'(5,1) LT '0').ERROR1\n         AIF   ('&VERSION'(6,1) LT '0').ERROR1\n         AIF   ('&VERSION'(7,1) NE 'M').ERROR1\n         AIF   ('&VERSION'(8,1) LT '0').ERROR1\n         AIF   ('&VERSION'(9,1) LT '0').ERROR1\n         AGO   .NOERR1\n.ERROR1  MNOTE 8,'Parameter VERSION must be present with format VnnRnnM*\n               nn'\n.NOERR1  ANOP\n.*\n.* Check amode parameter\n         AIF   ('&AMODE' EQ '24').NOERR2\n         AIF   ('&AMODE' EQ '31').NOERR2\n         AIF   ('&AMODE' EQ 'ANY').NOERR2\n.ERROR2  MNOTE 8,'Parameter AMODE must be 24, 31 or ANY'\n.NOERR2  ANOP\n.*\n.* Check rmode parameter\n         AIF   ('&RMODE' EQ '24').NOERR3\n         AIF   ('&RMODE' EQ 'ANY').NOERR3\n.ERROR3  MNOTE 8,'Parameter RMODE must be 24 or ANY'\n.NOERR3  ANOP\n.*\n.* For amode 24, rmode must 24 as well\n         AIF   ('&AMODE' NE '24').NOERR4\n         AIF   ('&RMODE' EQ '24').NOERR4\n.ERROR4  MNOTE 8,'For Amode 24 Rmode must be 24 as well'\n.NOERR4  ANOP\n.*\n.* For rmode any, amode must not be 24\n         AIF   ('&RMODE' NE 'ANY').NOERR5\n         AIF   ('&AMODE' NE '24').NOERR5\n.ERROR5  MNOTE 8,'For Rmode ANY Amode must not be 24'\n.NOERR5  ANOP\n.*\n.* Check entry parameter\n         AIF   (K'&ENTRY EQ 0).ERR6A\n&_ENTRY1 SETC  '&ENTRY'\n&_ENTRY2 SETC  'PRIM'\n         AIF   ('&ENTRY'(1,1) NE '(').NOERR6A\n&_ENTRY1 SETC  '&ENTRY(1)'             * Extract type of program\n&_ENTRY2 SETC  '&ENTRY(2)'             * Extract initial ASC-mode\n         AIF   (N'&ENTRY GE 2).NOERR6A\n&_ENTRY2 SETC  'PRIM'                  * Default to primary mode\n         AGO   .NOERR6A\n.ERR6A   MNOTE 8,'Required ENTRY-parameter missing'\n         AGO   .NOERR6\n.NOERR6A ANOP  ,\n         AIF   ('&_ENTRY1' EQ 'FRR').NOERR6B\n         AIF   ('&_ENTRY1' EQ 'MAIN').NOERR6B\n         AIF   ('&_ENTRY1' EQ 'RESMGR').NOERR6B\n         AIF   ('&_ENTRY1' EQ 'RMTR').NOERR6B\n         AIF   ('&_ENTRY1' EQ 'SPCR').NOERR6B\n         AIF   ('&_ENTRY1' EQ 'SRB').NOERR6B\n         AIF   ('&_ENTRY1' EQ 'SUBPGM').NOERR6B\n         AIF   ('&_ENTRY1' EQ 'SUBR').NOERR6B\n         AIF   ('&_ENTRY1' EQ 'SVC').NOERR6B\n.ERR6B   MNOTE 8,'ENTRY parameter must specify a valid program type'\n.NOERR6B ANOP  ,\n         AIF   ('&_ENTRY2' EQ 'PRIM').NOERR6C\n         AIF   ('&_ENTRY2' EQ 'AR').NOERR6C\n.ERR6C   MNOTE 8,'ENTRY parameter must specify mode AR or PRIM'\n.NOERR6C ANOP  ,\n.NOERR6  ANOP\n&BXA_ENTRY SETC '&_ENTRY1'             * Copy entry parameter value\n.*\n.* Check workarea parameter\n         AIF   (K'&WORKAREA EQ 0)._WORKAX\n         AIF   ('&WORKAREA'(1,1) EQ '(')._WORKA\n&_WORKA1 SETC  '&WORKAREA'             * Id of DSECT to use with R13\n&_WORKA2 SETC  '&WORKAREA'.'_LEN'      * Length of DSECT to allocate\n         AGO   ._WORKAX\n._WORKA  ANOP\n&_WORKA1 SETC  '&WORKAREA(1)'          * Field that R13 will point to\n&_WORKA2 SETC  '&WORKAREA(2)'          * Length of DSECT to allocate\n&_WORKA3 SETC  '&WORKAREA(3)'          * Identifier for DSECT\n&_WORKA4 SETC  '&WORKAREA(4)'          * Total length field\n._WORKAX ANOP\n.*\n.* For ENTRY=SUBR, the id must be specified\n         AIF   ('&_ENTRY1' NE 'SUBR').NOERR7E\n         AIF   (K'&_WORKA1 NE 0 AND K'&_WORKA3 NE 0).NOERR7E\n.ERR7E   MNOTE 8,'WORKAREA parameter misses USING label or identifier c*\n               ontent'\n.NOERR7E ANOP  ,\n.*\n.* If length field specified, &WORKPTR must be specifie too\n         AIF   (K'&_WORKA4 EQ 0).NOERR7F\n         AIF   (K'&WORKPTR NE 0).NOERR7F\n.ERR7F   MNOTE 8,'WORKAREA specifies a length field, but WORKPTR was no*\n               t specified'\n.NOERR7F ANOP  ,\n.*\n.* If WORKAREA completely omitted, use BXASAVE as a default\n         AIF   (K'&WORKAREA NE 0).NODFT7\n&_WORKA1 SETC  'BXASAVE'\n&_WORKA2 SETC  'BXASAVE_LEN'\n&_WORKA3 SETC  '&_LABEL'\n         AGO   .DFT7OK\n.NODFT7  ANOP  ,\n.*\n.* If Workarea is not a list of four parms: issue error message\n         AIF   (N'&WORKAREA GT 4).ERROR7B\n         AGO   .NOERR7B\n.ERROR7B MNOTE 4,'WORKAREA parameter contains too many subparameters'\n.NOERR7B ANOP\n.*\n.* If Label omitted: use SAVEAREA as a default\n         AIF   (K'&_WORKA1 NE 0).NODFT7B\n&_WORKA1 SETC  'SAVEAREA'\n.NODFT7B ANOP\n.*\n.* If length omitted: use label with _LEN appended\n         AIF   (K'&_WORKA2 NE 0).NODFT7C\n&_WORKA2 SETC  '&_WORKA1'.'_LEN'\n.NODFT7C ANOP\n.*\n.* If id omitted: use csect name\n         AIF   (K'&_WORKA3 NE 0).NODFT7D\n&_WORKA3 SETC  '&_LABEL'\n.NODFT7D ANOP\n.*\n.DFT7OK  ANOP\n&BXA_WALAB SETC '&_WORKA1'\n&BXA_WALEN SETC '&_WORKA2'\n.*\n.* Check workid parameter\n         AIF   (K'&_WORKA3 LE 8).NOERR7C\n.ERROR7C MNOTE 8,'Workid parameter truncated to 8 characters'\n&_WORKA3 SETC  '&_WORKA3'(1,8)         * Use first 8 chars\n.NOERR7C ANOP\n.*\n.* Check list parameter\n&_LIST1  SETC  '&LIST'\n         AIF   ('&LIST' EQ 'YES').NOERR8\n         AIF   ('&LIST' EQ 'NO').NOERR8\n.ERR8A   MNOTE 8,'List parameter must specify either YES or NO'\n.NOERR8  ANOP\n.*\n.* Check workptr parameter\n         AIF   (K'&WORKPTR EQ 0).NOERR9\n         AIF   ('&_ENTRY1' EQ 'SUBPGM').NOERR9A\n         AIF   ('&_ENTRY1' EQ 'SUBR').NOERR9A\n.ERR9A   MNOTE 8,'WORKPTR parameter valid only when ENTRY=SUBPGM or ENT*\n               RY=SUBR'\n.NOERR9A ANOP\n         AIF   (K'&WORKPTR(1) NE 0).NOERR9B\n.ERR9B   MNOTE 8,'First operand of Workptr must specify a label or a re*\n               gister'\n.NOERR9B ANOP\n         AIF   (N'&WORKPTR EQ 1).NOERR9E\n         AIF   (K'&WORKPTR(2) NE 0).NOERR9C\n.ERR9C   MNOTE 8,'Second operand of Workptr must specify a using label'\n.NOERR9C ANOP\n         AIF   (K'&WORKPTR(3) NE 0).NOERR9D\n.ERR9D   MNOTE 8,'Third operand of Workptr must specify a register'\n.NOERR9D ANOP\n         AIF   (N'&WORKPTR EQ 3).NOERR9E\n.ERR9E   MNOTE 8,'Workptr must have either 1 or 3 sub-operands'\n.NOERR9E ANOP\n         AIF   (N'&WORKPTR NE 1).NOERR9F\n         AIF   ('&WORKPTR(1)'(1,1) EQ '(').NOERR9F\n         AIF   ('&_ENTRY1' EQ 'SUBR').NOERR9F\n.ERR9F   MNOTE 8,'Workptr with only one sub-operand must specify a (reg*\n               ister)'\n.NOERR9F ANOP\n.* Check whether the WORKPTR(1) subparameter (if specified) designates\n.* a register or a field.\n         AIF   (N'&WORKPTR LT 1).NOERR9 * No sub-operands\n&_WORKP1 SETC  '&WORKPTR(1)'           * Extract first sub-operand\n         AIF   ('&_WORKP1'(1,1) NE '(').NOERR9\n&_WORKP1REG SETB 1                     * Indicate it's a register\n&_WORKP1 SETC  '&WORKPTR(1,1)'         * Extract register to use\n.NOERR9  ANOP\n.*\n.* Check saves parameter\n         AIF   (K'&SAVES EQ 0).NOERR10\n         CHKNUM MACRO=PGM,NAME=SAVES,VAL=&SAVES\n&BXA_SAVES SETA &SAVES\n.NOERR10 ANOP\n.*\n.* Check nesting level\n         AIF   (&SYSNEST EQ 1).NOERR11\n.ERR11   MNOTE 8,'PGM must not be issued from within another macro'\n.NOERR11 ANOP\n.*\n.* Check ABND-parameter\n         AIF   (K'&ABND EQ 0).ERR12A\n         AIF   ('&ABND'(1,1) EQ '(').ERR12LST\n&_ABND1  SETC  '&ABND'\n         AGO   .ERR12CHK\n.ERR12LST ANOP\n         AIF   (N'&ABND EQ 0).ERR12B\n&_ABND1  SETC  '&ABND(1)'\n         AIF   (N'&ABND EQ 1).ERR12CHK\n&_ABND2  SETC  '&ABND(2)'\n         AIF   (N'&ABND GT 2).ERR12C\n.ERR12CHK ANOP\n         CHKNUM MACRO=PGM,            * Abend code must be a valid     *\n               NAME=_ABND1,           *  number, maximum 4095          *\n               VAL=&_ABND1            *\n         AIF   (&BXA_NUMVAL EQ 0).ERR12D\n         AIF   (&BXA_NUMVAL GT 4095).ERR12E\n         AGO   .NOERR12\n.*\n.ERR12A  MNOTE 8,'ABND-parameter omitted'\n         AGO   .NOERR12\n.ERR12B  MNOTE 8,'ABND-parameter specifies empty sublist'\n         AGO   .NOERR12\n.ERR12C  MNOTE 4,'ABND-parameter too many sub-parameters'\n         AGO   .NOERR12\n.ERR12D  MNOTE 8,'ABND-parameter specifies a code that is zero or not n*\n               umeric'\n         AGO   .NOERR12\n.ERR12E  MNOTE 8,'ABND-parameter specifies a code that is more than 409*\n               5'\n.NOERR12 ANOP\n         AIF   (K'&_ABND2 NE 0).NODFT12\n&_ABND2  SETC  '_ABND'\n.NODFT12 ANOP\n.*\n.* Check DBG-parameter\n         AIF   (K'&DBG EQ 0).NOERR13\n         AIF   ('&_ENTRY1' NE 'SUBR').ERR13A\n         AIF   ('&DBG'(1,1) NE '(').ERR13B\n         AIF   (N'&DBG EQ 0).ERR13B\n         AIF   (N'&DBG EQ 1).ERR13B\n         AIF   (N'&DBG GT 2).ERR13B\n&BXA_DBG_PTR SETC '&DBG(1)'\n&BXA_DBG_PLIST SETC '&DBG(2)'\n         AIF   (K'&BXA_DBG_PTR EQ 0).ERR13B\n         AIF   (K'&BXA_DBG_PLIST EQ 0).ERR13B\n         AGO   .NOERR13\n.ERR13A  MNOTE 4,'DBG parameter ignored, valid only with ENTRY=SUBR'\n         AGO   .NOERR13\n.ERR13B  MNOTE 8,'DBG parameter must specify (dbg_ptr,dbg_plist)'\n.NOERR13 ANOP\n.*\n.* Extract date and time from system variables\n&YY      SETC  '&SYSDATE'(7,2)         * Extract year number\n&MM      SETC  '&SYSDATE'(1,2)         * Extract month number\n&DD      SETC  '&SYSDATE'(4,2)         * Extract day number\n&CC      SETC  '20'                    * Default 21st century\n         AIF   ('&YY' NE '99').CC20    * Default ok?\n&CC      SETC  '19'                    * No: use 20th century\n.CC20    ANOP  ,                       *\n.*\n&HR      SETC  '&SYSTIME'(1,2)         * Extract hours\n&MIN     SETC  '&SYSTIME'(4,2)         * Extract minutes\n.*\n.* Replace assembler directives and opcodes with our own macros\n         OPSYNS DROP,EJECT,END,EQU,LTORG,POP,PUSH,SPACE,USING\n         OPSYNS IPK,TRT                *\n         AIF   (NOT &SP_OPT).START     *\n         OPSYNS LA,LR                  *\n.START   ANOP  ,                       *\n.*\n.* Define internal macro's\n         PGM0  ,                       * Define CHK_STACK\n*\n* Program setup\n&_LABEL  START ,                       *\n&_LABEL  AMODE &AMODE                  *\n&_LABEL  RMODE &RMODE                  *\n*\n* Mapping macros\n         GENMAPS (MAPEQU,MAPSAVE),     * Include standard map-macro's  *\n               LIST=&_LIST1            *\n         AIF   (K'&MAPS EQ 0).NOMAPS   *\n         GENMAPS &MAPS,                * Include specified map-macro's *\n               LIST=&_LIST1            *\n.NOMAPS  ANOP  ,                       *\n.*\n.* Check that the supplied DSECT name begins with a BXASAVE-subarea\n.* and find the label used to set the savearea addressable\n         AIF   ('&_WORKA1' EQ 'BXASAVE').LOOP7OK\n&I       SETA  0                       * I is index in &BXA_USE_...\n.LOOP7   ANOP  ,                       * Loop until first match\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&BXA_USE_DS).LOOP7NF * End-of-table: not found\n         AIF   ('&BXA_USE_DS(&I)' NE '&_WORKA1').LOOP7 * Skip mismatch\n.LOOP7F  ANOP  ,                       * Found: check entry\n         AIF   ('&BXA_USE_SDS(&I)' NE 'BXASAVE').LOOP7R1\n&SA      SETC  '&BXA_USE_LBL(&I)'      * Copy label for USING\n         AIF   (K'&SA EQ 0).LOOP7OK\n&SA      SETC  '&SA'.'.'               * Add period to prefix-label\n         AGO   .LOOP7OK\n.LOOP7R1 MNOTE 8,'BXASAVE area in DSECT &_WORKA1 is not the on the firs*\n               t DCL-statement'\n         AGO   .LOOP7OK\n.LOOP7NF MNOTE 8,'No BXASAVE area found in DSECT &_WORKA1'\n.LOOP7OK ANOP\n.*\n.* If &ENTRY=MAIN:        generate BAKR to save regs\n.* If &ENTRY=SVC:         Store registers in RBEXSAVE\n.* If &ENTRY=SUBR/SUBPGM/FRR/RESMGR: generate STM to save regs\n.* If &ENTRY=SRB/RMTR:    No save is required\n*\n* Initialization code\n         AIF   ('&_ENTRY2' EQ 'AR').SETM_AR\n         SYSSTATE ASCENV=P             * Signal we're in primary mode\n         AGO   .SETM_OK\n.SETM_AR ANOP  ,\n         SYSSTATE ASCENV=AR            * Signal we're in AR mode\n.SETM_OK ANOP  ,\n.*\n         AIF   ('&_ENTRY1' EQ 'SVC').USER6\n         AIF   ('&_ENTRY1' EQ 'SPCR').USESPCR\n.* Init for SUBR/SUBPGM/MAIN/SRB/RMTR/RESMGR\n         USE   &_LABEL,R15             * R15 contains Entry Point Addr\n         AGO   .USEOK                  *\n.* Init for SVC\n.USER6   ANOP  ,                       *\n&BXA_SVCMODE SETB 1                    * Signal we're in SVC mode\n         USE   &_LABEL,R6              * R6 contains entry point addr\n         AGO   .USEOK\n.* Init for SPCR\n.USESPCR ANOP  ,                       *\n&BXA_SVCMODE SETB 1                    * Signal we're in SVC mode\n         BASR  R12,R0                  * Retrieve current address\n         USE   &_LABEL+2,R12           * R12 now contains EP address\n.USEOK   ANOP  ,                       *\n.* Init code common to all ENTRY types\n         B     _&_LABEL._START         * Skip CSECT identification\n*\n         DC    C'&_LABEL',C','         * CSECT name\n         DC    C'&CC.&YY',C'-'         * Compile year\n         DC    C'&MM',C'-'             * Compile month\n         DC    C'&DD',C','             * Compile day\n         DC    C'&HR',C':'             * Compile hour\n         DC    C'&MIN',C','            * Compile minute\n         DC    C'&VERSION',C'. '       * Version id\n         DC    C'(C) Copyright B.V. Bixoft, '\n         DC    C'The Netherlands, 1999-2000. '\n         DC    C'All rights reserved. '\n         DS    0F                      * Re-align on fullword boundary\n*\n* Constants used in PGM-generated code\n_&_LABEL._ID LABEL ,                   *\n         DC    CL8'&_WORKA3'           * Id-literal for dyn. workarea\n         AIF   ('&_ENTRY1' EQ 'FRR').NOABND\n         AIF   ('&_ENTRY1' EQ 'RMTR').NOABND\n*\n* Abend service routine\n&_ABND2  ABNDPGM CODE=&_ABND1          * Insert abend service routine\n         ABND  SETDFT,&_ABND2          * And set default abend label\n.*\n.* Add &_ABND2 to BXA_ABND table\n&BXA_ABND(1) SETC '&_ABND2'            * Put label into first element\n.NOABND  ANOP  ,                       *\n.*\n_&_LABEL._START LABEL ,                * Start of program code\n         AIF   ('&_ENTRY1' EQ 'FRR').INITSPGM\n         AIF   ('&_ENTRY1' EQ 'MAIN').INITMAIN\n         AIF   ('&_ENTRY1' EQ 'RESMGR').INITRESM\n         AIF   ('&_ENTRY1' EQ 'RMTR').INITRMTR\n         AIF   ('&_ENTRY1' EQ 'SPCR').INITSPCR\n         AIF   ('&_ENTRY1' EQ 'SRB').INITSRB\n         AIF   ('&_ENTRY1' EQ 'SUBPGM').INITSPGM\n         AIF   ('&_ENTRY1' EQ 'SUBR').INITSUBR\n         AIF   ('&_ENTRY1' EQ 'SVC').INITSVC\n         MNOTE 12,'Internal error'\n         MEXIT\n.*\n.* Init for SUBR\n.INITSUBR ANOP\nOUR      USE   SAVEAREA,R13            * Set external SA addressable\n         ST    R14,OUR.SAVEDR14        * Save return address\n         LAE   R14,0(,R13)             * Copy workarea pointer\n         SH    R14,=AL2(SAVEPRFX_LEN)  * Point to start of BXASAVE\nWORK     USE   BXASAVE,R14             * And set addressable as such\n         CLC   WORK.SAVEID,_&_LABEL._ID * Identifier correct?\n         ABND  NE                      * If not: big trouble\n         DROP  WORK                    * BXASAVE,R14\n         LT    R14,OUR.SAVEINTU        * Point to last-used SA\n         BZ    _SUBR1ST_&SYSNDX        * Zero-ptr: use 1st SA\nINT      USE   SAVEAREA,R14            * Set internal SA addressable\n         LT    R14,INT.SAVENEXT        * Point to available SA\n         ABND  Z                       * If it's not there: error!\n         B     _SUBR_OK_&SYSNDX        * Go use this SA\n_SUBR1ST_&SYSNDX LABEL\n         L     R14,OUR.SAVEINTF        * Set 1st internal SA usable\n_SUBR_OK_&SYSNDX LABEL\n         STM   R15,R12,INT.SAVEDR15    * Save registers 15, 0-12\n*                                      * R13 need not be saved\n         MVC   INT.SAVEDR14,OUR.SAVEDR14 * Copy saved R14 (ret-addr)\n         ST    R14,OUR.SAVEINTU        * Update ptr to last used SA\n         DROP  OUR                     * SAVEAREA,R13 external SA\n         DROP  INT                     * SAVEAREA,R14\n         LAE   R12,0(,R15)             * Copy entry point address\n         DROP  R15                     * Temp. base\n         USE   &_WORKA1,R13,           * Make acquired area addressable*\n               START=&_WORKA1+SAVEPRFX_LEN * upward from savearea\n         AGO   .INITOK\n.*\n.* Init for SUBPGM\n.INITSPGM ANOP\n         USE   SAVEAREA,R13            * R13 assumed valid SA-pointer\n         STM   R14,R12,SAVEDR14        * Save registers\n         DROP  R13                     * SAVEAREA not needed anymore\n         LAE   R12,0(,R15)             * Copy entry point address\n         DROP  R15                     * Drop temporary base\n         AGO   .INITOK                 *\n.*\n.* Init for RESMGR\n.INITRESM ANOP ,                       *\n&BXA_SVCMODE SETB 1                    * Signal we're in SVC mode\n         GENMAPS (RMPL)                * Make sure mappings are active\n         USE   SAVEAREA,R13            * R13 assumed valid SA-pointer\n         STM   R14,R12,SAVEDR14        * Save registers\n         DROP  R13                     * SAVEAREA not needed anymore\n         LAE   R12,0(,R15)             * Copy entry point address\n         DROP  R15                     * Drop temporary base\n         AGO   .INITOK\n.*\n.* Init for MAIN\n.INITMAIN ANOP\n         BAKR  R14,R0                  * Save all registers\n         LAE   R12,0(,R15)             * Copy entry point address\n         DROP  R15                     * Drop temporary base\n         AGO   .INITOK\n.*\n.* Init for SPCR\n.INITSPCR ANOP\n         LAE   R12,0(R12,R0)           * Wipe high-order bits and ALET\n         AGO   .INITOK2\n.*\n.* Init for SRB\n.INITSRB ANOP  ,                       *\n         GENMAPS (FRRPL,SRB)           * Make sure mappings are active\n         CPY   R12,R15                 * Copy entry point address\n         DROP  R15                     * Temp base no longer needed\n         USE   &_LABEL,R12             * Start using real base\n         CPY   R11,R0                  * Get SRB pointer\n         USE   SRB,R11                 * And set SRB addressable\n         GOTO  (R14),SRBFRRCL          * Quit if caller not waiting\n         CPY   R8,R14                  * Save return address\n         CPY   R1,SRBPARM              * Retrieve ptr to parmlist\n         USE   FRRPL,R2                * R2 contains FRR parmarea ptr\n         ST    R1,FRRPLPRM             * Set up FRR parmlist (SRBPARM)\n         ST    R11,FRRPLSRB            * Set up FRR parmlist (SRB)\n         DROP  R11                     * SRB no longer needed\n         AGO   .INITOK2                *\n.*\n.* Init for RMTR\n.INITRMTR ANOP ,                       *\n         CPY   R12,R15                 * Copy entry point address\n         DROP  R15                     * Temp base no longer needed\n         USE   &_LABEL,R12             * Start using real base\n         CPY   R8,R14                  * Save return address\n         AGO   .INITOK2                *\n.*\n.* Init for SVC\n.INITSVC ANOP  ,                       *\n         USE   SVRB,R5                 * Set SVRB addressable\n         STM   R0,R2,RBEXSAVE          * Save R0-R2\n*                                      * R3-R5 need not be saved\n         ST    R6,RBEXSAVE+12          * Save R6\n*                                      * R7 need not be saved\n         STM   R8,R15,RBEXSAVE+16      * Save R8-R15\n         DROP  R5                      * SVRB not needed anymore\n*\n         LAE   R12,0(,R6)              * Copy entry point address\n         DROP  R6                      * Drop temporary base\n.*\n.* Init code common to all ENTRY types\n.INITOK  ANOP\n         USE   &_LABEL,R12             * And use it\n.INITOK2 ANOP\n         CPY   (R11,AR11),(R1,AR1)     * Save parm pointer\n         CPY   R9,R0                   * Copy second input register\n         CPY   AR9,AR0                 * and its ALET\n.*\n.* Assign ID for dynamic workarea and register for initializing\n.* workarea\n&_ID     SETC  '_&_LABEL._ID'          * Address of identifier\n&_REG    SETC  'R10'                   * Normally use R10 as ptr\n&_CLRSZ  SETC  'SAVEPRFX_LEN-L''SAVEID' * Area to clear after obtain\n         AIF   ('&_ENTRY1' NE 'SUBR').IDOK * For SUBR's:\n&_ID     SETC  '=CL8''&_LABEL'''       * Use literal program name\n&_REG    SETC  'R1'                    *  and keep ptr in R1\n&_CLRSZ  SETC  'SAVEPRFX_LEN-L''SAVEID+L''SAVEPTRS'\n.IDOK    ANOP\n.*\n.* If &workptr specified, include logic to test the pointer\n         AIF   (K'&WORKPTR EQ 0).NOWRKPT\n*\n* Check if dynamic work area has been allocated\n         AIF   (K'&WORKPTR(3) EQ 0).WORKPT1\n.* If &WORKPTR(3) specifies R1, replace it by R11, which currently\n.* holds that register's entry value.\n&_WORKP3 SETC  '&WORKPTR(3)'\n         CHKREG &_WORKP3,g\n         AIF   (&BXA_RC NE 0).NOTR11\n         AIF   (&BXA_NUMVAL NE 1).NOTR11\n&_WORKP3 SETC  'R11'                   * Replace value for ptr reg R1\n.NOTR11  ANOP\n.*\n         ABND  Z,TSTREG=&_WORKP3       * Pointer register zero?\n         USE   &WORKPTR(2),&_WORKP3    * Address area with pointer\n         LT    R1,&WORKPTR(1)          * Load pointer to work-area\n         BZ    _&_LABEL._OBTAIN        * Not valid: go allocate\n         AGO   .WORKPTOK\n.WORKPT1 ANOP  ,\n         AIF   (&_WORKP1REG).WORKPTR   * Pointer is a register?\n         LT    R1,&_WORKP1             * Pointer is valid?\n         BZ    _&_LABEL._OBTAIN        * No: go allocate workarea\n         AGO   .WORKPTOK\n.WORKPTR ANOP  ,                       * Check pointer register\n         ABND  Z,TSTREG=(R1,&_WORKP1)  * Load pointer to work-area\n.WORKPTOK ANOP  ,                      * Pointer in R1. Valid?\n         CLEAR AR1                     * Reset AR1 to primary space\nTMP      USE   BXASAVE,R1              * Set area addressable\n         CLC   TMP.SAVEID,&_ID         * Correct work-area?\n         BE    _&_LABEL._OBTAINED      * Yes: go use it\n         ABND\n         DROP  TMP                     * BXASAVE,R1 no longer needed\n.*\n.* If WORKPTR specifies no third arg. then _WORKP3 has not been set in\n.* USE and should not be DROPped. If the first and only sub-argument is\n.* a register, we need no _OBTAIN label. If the first sub-argument\n.* (either the only or the first of three) is a field, we do need the\n.* _OBTAIN label.\n.*\n         AIF   (K'&WORKPTR(3) EQ 0 AND NOT &_WORKP1REG).OBTAIN\n         AIF   (K'&WORKPTR(3) EQ 0).NOWRKPT\n         DROP  &_WORKP3                * Area with pointer\n*\n.OBTAIN  ANOP\n_&_LABEL._OBTAIN LABEL ,               * Do allocate a work area\n.NOWRKPT ANOP\n*\n* Allocate dynamic work area (WA) and set up save-area (SA) chaining\n&_STOR_LEN SETC ''\n&_STOR_LOC SETC 'BELOW'\n         AIF   ('&_ENTRY1' EQ 'SUBR' AND &BXA_SAVES EQ 0).USER13\n         AIF   ('&_ENTRY1' EQ 'SUBR').ALCSUBR\n.* Not SUBR linkage\n&_STOR_LEN SETC '&_WORKA2'             * Size of dynamic workarea\n         AIF   (&BXA_SAVES EQ 0).STOROBT\n&_STOR_LEN SETC '&_WORKA2'.'+SAVEAREA_LEN*&BXA_SAVES' * +internal SA's\n         AGO   .STOROBT                *\n.ALCSUBR ANOP  ,                       *\n&_STOR_LEN SETC 'SAVEPRFX_LEN+SAVEAREA_LEN*&BXA_SAVES' * prefix+int.SAs\n&_STOR_LOC SETC 'ANY'\n*\n.STOROBT ANOP  ,                       *\n&BXA_WALEN SETC '&_STOR_LEN'           * Total allocation\n         STORAGE OBTAIN,               * Allocate SA, Abend on error   *\n               LOC=&_STOR_LOC,         *                               *\n               LENGTH=&_STOR_LEN       *\n.*\n.* For SRB's: save ptr and length of area in FRR parmlist\n         AIF   ('&_ENTRY1' NE 'SRB').SKIPFRRP\n         CPY   FRRPLWRK,R1             * Insert ptr to wrkarea in FRRPL\n         LA    R0,&BXA_WALEN           * Retrieve length of allocation\n         CPY   FRRPLWSZ,R0             * Save size of allocated area\n         DROP  R2                      * FRR parameter area now set up\n.SKIPFRRP ANOP ,                       *\n*\n* Wipe allocated area except id and save-area\n         AIF   ('&_REG' EQ 'R1').EXTUSE * &_REG = R1 for ENTRY=SUBR\n         LAE   &_REG,0(R1,R0)          * Save pointer to new area\n.EXTUSE  ANOP  ,                       *\nEXT      USE   BXASAVE,&_REG           * Set savearea addressable\n         MVC   EXT.SAVEID,&_ID         * Identifier into workarea\n         CLEAR (EXT.SAVEPRFX+L'SAVEID,&_CLRSZ),,XC * Wipe remainder of *\n                                       * prefix + saveptrs (if SUBR)\n         AIF   ('&_ENTRY1' EQ 'SUBR').NOWIPE\n         AIF   ('&_WORKA1' EQ 'BXASAVE').NOWIPE\n         LAE   R14,EXT.SAVEAREA_END    * Point beyond save-area + id.\n         LA    R15,&_WORKA2-(SAVEAREA_LEN+SAVEPRFX_LEN) * unwiped size\n         SR    R0,R0                   * Set source to zero\n         LR    R1,R0                   * Source length + pad: zeroes\n         MVCL  R14,R0                  * Set unused part to zeroes\n.NOWIPE  ANOP\n.*\n.* If &workptr specified: store address of area in pointer field\n         AIF   (K'&WORKPTR(1) EQ 0).DROPEXT\n         AIF   (&_WORKP1REG).DROPEXT   * Cannot keep ptr in a reg\n         AIF   ('&_ENTRY1' EQ 'SUBR').SKIPUSE * for SUBR no USE needed\n         USE   &WORKPTR(2),&_WORKP3    * Re-establish addressability\n.SKIPUSE ANOP\n         ST    &_REG,&WORKPTR(1)       * Store address in ptr field\n         LA    R0,&WORKPTR(1)          * Get address of pointer\n         ST    R0,EXT.SAVEPTPT         * And save pointer to pointer\n         AIF   ('&_ENTRY1' EQ 'SUBR').DROPEXT * for SUBR no DROP needed\n         DROP  &_WORKP3                * End addressability\n.DROPEXT ANOP\n         AIF   ('&_ENTRY1' NE 'SUBR').NOPTSA * for SUBR ...\n         MVC   EXT.SAVEPTSA,&SA.SAVEINTU * set ptr to SA used on entry\n.NOPTSA  ANOP\n         DROP  EXT                     * BXASAVE\n         AIF   ('&_REG' EQ 'R1').OBTAINED\n         LAE   R1,0(,&_REG)            * Restore pointer to new area\n.OBTAINED ANOP ,                       *\n         AIF   (K'&_WORKA4 EQ 0).NOLENFLD * Need to save length?\n         USE   &_WORKA1,R1             * Set workarea addressable\n         LA    R0,&_STOR_LEN           * Length allocated\n         CPY   &_WORKA4,R0             * Save length in field\n         DROP  R1                      * Drop to swap using status\n.NOLENFLD ANOP ,                       *\n         AIF   (K'&WORKPTR EQ 0).SKIPLAB\n_&_LABEL._OBTAINED LABEL ,             * Use allocated work area\n.SKIPLAB ANOP\n         AIF   ('&_ENTRY1' EQ 'SUBR').USER13\n*\n* Save-area linkage (R1 points to work-area)\n         USE   BXASAVE,R1              * Make new storage addressable\n         LAE   R1,SAVEAREA             * Point to new save-area\n         DROP  R1                      * BXASAVE no longer pointed to\n.* Address old & new saveareas, store pointer old SA --> new SA\nNEW      USE   SAVEAREA,R1             * R1 addresses our new SA\n         AIF   ('&_ENTRY1' NE 'SRB' AND '&_ENTRY1' NE 'RMTR').NOR8SAV\n         ST    R8,NEW.SAVEHDR          * Save return address from SRB\n.NOR8SAV ANOP  ,                       *\n         AIF   ('&_ENTRY1' EQ 'SVC').NOPREV\n         AIF   ('&_ENTRY1' EQ 'SRB').NOPREV\n         AIF   ('&_ENTRY1' EQ 'RMTR').NOPREV\n         AIF   ('&_ENTRY1' EQ 'SPCR').PUTF1SA\nPREV     USE   SAVEAREA,R13            * R13 addresses previous SA\n         ST    R1,PREV.SAVENEXT        * Store forward pointer\n.* Store pointer new savearea --> old savearea\n         AIF   ('&_ENTRY1' NE 'SUBPGM' AND                             *\n               '&_ENTRY1' NE 'RESMGR' AND                              *\n               '&_ENTRY1' NE 'FRR').PUTF1SA\n         ST    R13,NEW.SAVEPREV        * Store backward pointer\n         AGO   .PUTOK\n.PUTF1SA ANOP\n         MVC   NEW.SAVEPREV,=CL4'F1SA' * Identify as 1st in chain\n         AIF   ('&_ENTRY1' EQ 'SPCR').NOPREV\n.PUTOK   ANOP\n         DROP  PREV                    * R13 (SAVEAREA)\n.NOPREV  ANOP\n         LAE   R13,NEW.SAVEAREA        * Address new SA\n         DROP  NEW                     * R1 (SAVEAREA)\n.USER13  ANOP\n*\n* Set up USING for dynamic area\n         AIF   (K'&_WORKA1 EQ 0).NODSECT\n         AIF   ('&_ENTRY1' EQ 'SUBR').NODSECT * SUBR has USE R13\n         USE   &_WORKA1,R13,           * Make acquired area addressable*\n               START=&_WORKA1+SAVEPRFX_LEN * upward from savearea\n.NODSECT ANOP  ,\n.*\n.* If saves-parameter was specified, include logic to allocate\n.* and initialize internal save-areas. If workptr was specified,\n.* allocation and initialization are to be performed only when\n.* the the internal SAs have not yet been allocated and initialized.\n         AIF   (&BXA_SAVES EQ 0).NOSAVES\n         AIF   ('&_ENTRY1' NE 'SUBR').NONEWID\nNEW      USE   BXASAVE,R1              * R1 points to allocated area\n         LA    R1,NEW.SAVEAREA         * Point beyond prefix area\n         DROP  NEW                     * BXASAVE,R1 - prefix complete\nNEW      USE   SAVEAREA,R1             * R1 now points to 1st new SA\n         L     R14,&SA.SAVEINTU        * Point to SA used for saving\n_LOOP_&SYSNDX LABEL\n         LAE   R15,0(,R14)             * Next on chain in R14\nOLD      USE   SAVEAREA,R15            * Set last-used SA addressable\n         LT    R14,OLD.SAVENEXT        * Is there another SA on chain?\n         BNZ   _LOOP_&SYSNDX           * Yes: runchain\n         ST    R15,NEW.SAVEPREV        * Append new chain to last entry\n         ST    R1,OLD.SAVENEXT         *  of existing chain\n         DROP  OLD                     * SAVEAREA,R15\n         DROP  NEW                     * SAVEAREA,R1\n.*\n         AIF   (&BXA_SAVES EQ 1).JUST1SA\nNEW      USE   SAVEAREA,R1             * R1 now points to 1st new SA\n         LT    R0,NEW.SAVENEXT         * Retrieve ptr to next SA\n         BNZ   _RESETR1                * Valid: skip SA allocation\n         DROP  NEW                     * SAVEAREA,R1\n.NONEWID ANOP\n*\n* Set up a chain of save-areas for internal use\n         AIF   (K'&WORKPTR EQ 0).INITSA\n         AIF   ('&_ENTRY1' EQ 'SUBR').INITSA\n         LT    R0,&SA.SAVEINTF         * Retrieve ptr to first SA\n         BNZ   _RESETR1                * Valid: skip SA allocation\n.INITSA  ANOP\n.*\n         AIF   ('&_ENTRY1' EQ 'SUBR').INILOOP\n         LAE   R1,&SA.SAVEAREA+&_WORKA2-SAVEPRFX_LEN * Pt to 1st int SA\n         ST    R1,&SA.SAVEINTF         * Store address in ptr field\n         CLEAR &SA.SAVEINTU,,XC        * Set last used to zero\n         AIF   (&BXA_SAVES EQ 1).JUST1SA\n.INILOOP ANOP\nTHIS     USE   SAVEAREA,R1             * Set current SA adressable\n         AIF   ('&_ENTRY1' EQ 'SUBR').NOCLEAR * Not for SUBR-logic:\n         CLEAR THIS.SAVEPREV,,XC       * Set prv.ptr in 1st int.SA to 0\n.NOCLEAR ANOP\n         LAE   R2,0(,R1)               * Init next-ptr to current\n         LA    R3,&SAVES-1             * Nr of SA's to initialize\n_LOOP&SYSNDX LABEL\n         INC   R2,SAVEAREA_LEN         * Point to next save-area\nNEXT     USE   SAVEAREA,R2             * Set next SA adressable\n         CLEAR THIS.SAVEHDR,,XC        * Reset 1stword\n         ST    R2,THIS.SAVENEXT        * Save as forward pointer\n         ST    R1,NEXT.SAVEPREV        * Save as backward pointer\n*\n         DROP  NEXT                    * R2 (SAVEAREA)\n         DROP  THIS                    * R1 (SAVEAREA)\n         LAE   R1,0(,R2)               * Copy next ptr to current\n         BCT   R3,_LOOP&SYSNDX         * Repeat\n*\nINT      USE   SAVEAREA,R2             * Last SA in chain\n         CLEAR INT.SAVEHDR,,XC         * set 1stword to zeros\n         CLEAR INT.SAVENEXT,,XC        * set nextpointer to 0\n         DROP  INT                     * R2 (SAVEAREA)\n         AGO   .RESETR1\n.*\n.* If there's only 1 save-area we don't have any pointers\n.JUST1SA ANOP\nTMP      USE   SAVEAREA,R1             * Only SA in chain\n         AIF   ('&_ENTRY1' EQ 'SUBR').SA1SUBR\n         CLEAR TMP.SAVEPTRS,,XC        * Set 3 pointers to zero\n         AGO   .SA1DONE\n.SA1SUBR ANOP\n         CLEAR TMP.SAVEHDR,,XC         * Set header field to zero\n         CLEAR TMP.SAVENEXT,,XC        * and set next pointer to zero\n.SA1DONE ANOP\n         DROP  TMP                     * SAVEAREA,R1\n.*\n.RESETR1 ANOP\n         AIF   (K'&WORKPTR NE 0)._RESETR1 * If workptr spec'd: do label\n         AIF   ('&_ENTRY1' NE 'SUBR').NOSAVES * Label needed for SUBR..\n         AIF   (&BXA_SAVES LE 1)._RESETR1 * when there's more than 1 SA\n._RESETR1 ANOP\n_RESETR1 EQU   *                       * Target if intSAs pre-allocated\n.NOSAVES ANOP\n*\n* Restore original contents of register 1\n         CPY   (R1,AR1),(R11,AR11)     * Restore parm pointer\n         CPY   (R0,AR0),(R9,AR9)       * Restore parameter\n*\n* Set up literal pool and USING for CSECT\n&BXA_USE_R12 SETC '_&_LABEL._USE_R12'  *\n         B     &BXA_USE_R12            * branch over literals\n         LTORG ,                       *\n&BXA_USE_R12 LABEL ,                   *\n         LAE   R12,&BXA_USE_R12        * Load new base address\n         DROP  R12                     * End addressablity\n         USE   &BXA_USE_R12,R12        * And restart addressability\n         EJECT ,                       * Force heading with USINGs\n.*\n.* If PSA was mapped, include USE for PSA\n         AIF   (NOT &BXA_MAC_MAPPSA).NOPSA\n         USE   PSA,R0                  * PSA always valid at 0\n.NOPSA   ANOP  ,\n.*\n.MEND    MEND\n./ ADD NAME=PGM0     0100-20096-20096-0111-00079-00079-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Define internal subroutine for structured programming macro's\n.*\n         PGM0  ,                       *\n.*\n.* Include sub-macro\n         PUSH  PRINT,NOPRINT\n         PRINT OFF,NOPRINT\n.*\n         MACRO\n         CHK_STACK &RESET=NO           * NO or YES\n.*\n.* Declare variables\n         GBLA  &BXA_STK                * Stack ptr for if-then-else\n         GBLC  &BXA_STK_OP(5)          * Stack of open opcodes\n         GBLC  &BXA_STK_LBL(5)         * Stack of labels\n         GBLA  &BXA_STK_LVL(5)         * Stack of levels\n         LCLA  &I                      * Stack pointer\n.*\n.* Check that the structured programming stack is empty\n         AIF   (&BXA_STK EQ 0).NOERR1  * Ok: stack empty\n&I       SETA  &BXA_STK+1              * I is index in stack\n.LOOP1   ANOP  ,                       * Loop backward thru stack\n&I       SETA  &I-1                    * Point previous entry\n         AIF   (&I LT 1).NOERR1        * At end: no more error messages\n         MNOTE 8,'Preceding &BXA_STK_OP(&I).-statement with label &BXA_*\n               STK_LBL(&I) at level &BXA_STK_LVL(&I) not terminated'\n         AGO   .LOOP1\n.NOERR1  ANOP\n.*\n         AIF   ('&RESET' NE 'YES').NORESET * If RESET=YES was specified\n&BXA_STK SETA  0                       * Reset stack to empty status\n.NORESET ANOP  ,\n.*\n.MEND    MEND  ,                       * End of internal macro\n         POP   PRINT,NOPRINT\n.*\n.MEND    MEND\n./ ADD NAME=POP      0100-20096-20096-0111-00128-00128-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's POP statement\n.*\n&LABEL   POP   ,                       * Arguments in SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC POP                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15\n         GBLB  &SP_SHOWALL             * SHOWALL option\n         GBLC  &BXA_USELBL(50)         * Using labels ...\n         GBLA  &BXA_USEREG(50)         *   and their register indexes\n         GBLC  &BXA_USEFLD(50)         *   and associated base fields\n         GBLA  &BXA_USENDX0(5)         * Low valid pointers BXA_USE...\n         GBLA  &BXA_USENDX1(5)         * High valid pointers BXA_USE...\n         GBLA  &BXA_USENDX             * Index into &BXA_USENDX0/1\n         LCLA  &N                      * Index for BXA_USE...\n         LCLA  &I                      * Index into &SYSLIST\n         LCLA  &R                      * Index into &BXA_USED_REGS\n         LCLC  &ARG                    * 1 argument from SYSLIST\n         LCLC  &ARGS                   * Arguments from SYSLIST\n         LCLB  &POPUSE                 * USING status is to be popped\n.*\n.* Build ARGS from &SYSLIST\n&I       SETA  0                       * I indexes &SYSLIST\n.LOOP1   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&ARG     SETC  '&SYSLIST(&I)'          * Extract 1 argument\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AIF   ('&ARG' NE 'USING').LOOP1 * Not USING: get next arguemnt\n&POPUSE  SETB  1                       * Indicate USING is popped\n         AGO   .LOOP1                  * And go process next entry\n.LOOP1OK ANOP\n         AIF   (K'&ARGS LT 2).ARGSOK\n&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma\n.ARGSOK  ANOP\n.*\n.* If Using status is being popped:\n.* pop the table of active usings and rebuild &BXA_USED_REGS\n         AIF   (NOT &POPUSE).NOTUSE\n         AIF   (&BXA_USENDX LE 0).ERR2A\n&BXA_USENDX SETA &BXA_USENDX-1         * Pop table of active usings\n.*\n.* Rebuild BXA_USED_REGS from BXA_USEREG table\n.* Skip any USINGs for PSA,R0\n&BXA_USED_REGS(1) SETB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Search tables to mark\n.LOOP4   ANOP  ,                       *    all used registers\n&N       SETA  &N+1                    *    unavailable.\n         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP4OK * At end: done\n&R       SETA  &BXA_USEREG(&N)         * Obtain index\n         AIF   (&R EQ 1 AND '&BXA_USEFLD(&N)' EQ 'PSA').LOOP4\n&BXA_USED_REGS(&R) SETB 1              * Set designated register in use\n         AGO   .LOOP4\n.LOOP4OK ANOP\n         AGO   .NOTUSE                 * Skip error messages\n.*\n.ERR2A   MNOTE 8,'You''re POPping an unPUSHed USING status'\n.NOTUSE  ANOP\n.*\n.* Generate _POP statement\n&LABEL   _POP  &ARGS\n.*\n.* Report current USING status\n         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested\n         AIF   (NOT &POPUSE).MEND      * And only if USING was popped\n         USEDREGS\n.*\n.MEND    MEND\n./ ADD NAME=PUSH     0100-20096-20096-0111-00125-00125-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's PUSH statement\n.*\n&LABEL   PUSH  ,                       * Arguments in SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC PUSH                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15\n         GBLB  &SP_SHOWALL             * SHOWALL option\n         GBLC  &BXA_USELBL(50)         * Using labels ...\n         GBLA  &BXA_USEREG(50)         *   and their register indexes\n         GBLC  &BXA_USEFLD(50)         *   and associated base fields\n         GBLA  &BXA_USENDX0(5)         * Low valid pointers BXA_USE...\n         GBLA  &BXA_USENDX1(5)         * High valid pointers BXA_USE...\n         GBLA  &BXA_USENDX             * Index into &BXA_USENDX0/1\n         LCLA  &N                      * Index for BXA_USE...\n         LCLA  &I                      * Index into &SYSLIST\n         LCLA  &R                      * Index into &BXA_USED_REGS\n         LCLC  &ARG                    * 1 argument from SYSLIST\n         LCLC  &ARGS                   * Arguments from SYSLIST\n         LCLB  &PUSHUSE                * USING status is to be pushed\n.*\n.* Build ARGS from &SYSLIST\n&I       SETA  0                       * I indexes &SYSLIST\n.LOOP1   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&ARG     SETC  '&SYSLIST(&I)'          * Extract 1 argument\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AIF   ('&ARG' NE 'USING').LOOP1 * Not USING: get next arguemnt\n&PUSHUSE SETB  1                       * Indicate USING is pushed\n         AGO   .LOOP1                  * And go process next entry\n.LOOP1OK ANOP\n         AIF   (K'&ARGS LT 2).ARGSOK\n&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma\n.ARGSOK  ANOP\n.*\n.* If Using status is being pushed: copy BXA_USED_REGS\n         AIF   (NOT &PUSHUSE).NOTUSE\n&R       SETA  &BXA_USENDX             * R indexes BXA_USELBL/USEREG\n&N       SETA  &BXA_USENDX0(&R)        * N indexes existing tables\n&I       SETA  &BXA_USENDX1(&R)        * I indexes new part of tables\n.LOOP3   ANOP\n&N       SETA  &N+1\n&I       SETA  &I+1\n         AIF   (&N GT &BXA_USENDX1(&R)).LOOP3OK\n&BXA_USELBL(&I) SETC '&BXA_USELBL(&N)' * Copy label\n&BXA_USEREG(&I) SETA &BXA_USEREG(&N)   * Copy register index\n&BXA_USEFLD(&I) SETC '&BXA_USEFLD(&N)' * Copy base field/location\n         AGO   .LOOP3\n.LOOP3OK ANOP  ,                       * Add entry to BXA_USENDX0/1\n&R       SETA  &R+1                    * Point next index entry\n&BXA_USENDX0(&R) SETA &N-1             * Point before 1st valid entry\n&BXA_USENDX1(&R) SETA &I-1             * Point last valid entry\n&BXA_USENDX SETA &R                    * And update index pointer\n.NOTUSE  ANOP\n.*\n.* Generate _PUSH statement\n&LABEL   _PUSH  &ARGS\n.*\n.* Report current USING status\n         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested\n         AIF   (NOT &PUSHUSE).MEND     * And only if USING was pushed\n         USEDREGS\n.*\n.MEND    MEND\n./ ADD NAME=RDATA    0100-20096-20096-0111-00261-00261-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Define Remote DATA\n.*\n.* All data defined thru the RDATA macro will be put into a remote\n.* literal pool, which is created by the END-macro, using the RLTORG\n.* macro.\n.*\n&LABEL   RDATA &OPCD,                  * Defining opcode               *\n               &RD_MODE=ADD,           * COND for conditional entries  *\n               &ALIGN=,                * Alignment                     *\n               &MF=X                   * MF should not be specified\n.*\n.* &LABEL specifies the label of the data\n.*        if specified as two dashes (--) no label will be generated\n.* &OPCD  specifies the defining opcode. The following opcodes are\n.*        currently supported:\n.*        - CNOP,DC,DS,EQU\n.*        - SNAPHDR\n.*        - Any other opcode that requires no keyword parmaters\n.**!!     - DCB\n.**!!     For keyword parameters the following applies:\n.**!!     In stead of separating the keyword parameter name and its\n.**!!     value with an equal sign(=), separate them with a slash(/).\n.**!!     E.g.: RDATA DCB,DSORG/PS,RECFM/VBA,.....   etc.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC RDATA                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Define variables\n         GBLC  &BXA_RD_RETVAL          * RD_MODE=COND: orig. data label\n         GBLC  &BXA_RD_LAB(50)         * table of defined remote labels\n         GBLC  &BXA_RD_OPC(50)         * table of defined remote opcd's\n         GBLC  &BXA_RD_ALG(50)         * table of defined remote align\n         GBLC  &BXA_RD_ARG(50)         * table of defined remote data  *\n               *                       *        positional parameters\n.**!!    GBLA  &BXA_RD_NDX(50)         * table of remote indexes\n.**!!    GBLC  &BXA_RD_KEY(50)         * table of remote keywords\n.**!!    GBLC  &BXA_RD_VAL(50)         * table of remote keyword values\n         LCLA  &I,&I1                  * Index into BXA_RD_LAB/OPC/ARG\n.**!!    LCLA  &J                      * Index into BXA_RD_NDX/KEY/VAL\n         LCLA  &S                      * Index into SYSLIST\n         LCLC  &PRM                    * Parameter (1 SYSLIST-entry)\n         LCLC  &ARG                    * Used to build BXA_RD_ARG entry\n.**!!    LCLA  &P                      * Character index into PRM\n.**!!    LCLA  &P1,&P2,&P3             * Character indices into PRM\n.*\n.* Check LABEL parameter\n         AIF   (K'&LABEL NE 0).NOERR1\n.ERR1    MNOTE 8,'Label for remote data not specified'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check OPCD parameter\n         AIF   (K'&OPCD EQ 0).ERR2A\n         AIF   ('&OPCD' EQ 'CLOSE').NOERR2\n         AIF   ('&OPCD' EQ 'CMDTXT').NOERR2\n         AIF   ('&OPCD' EQ 'CNOP').NOERR2\n         AIF   ('&OPCD' EQ 'DC').NOERR2\n.**!!    AIF   ('&OPCD' EQ 'DCB').NOERR2\n         AIF   ('&OPCD' EQ 'DS').NOERR2\n         AIF   ('&OPCD' EQ 'EQU').NOERR2\n         AIF   ('&OPCD' EQ 'MGCRE').NOERR2\n         AIF   ('&OPCD' EQ 'OPEN').NOERR2\n         AIF   ('&OPCD' EQ 'SNAPHDR').NOERR2\n         AIF   ('&OPCD' EQ 'WTO').NOERR2\n         AGO   .ERR2B\n.ERR2A   MNOTE 8,'Missing opcode for remote data definition'\n         MEXIT\n.ERR2B   MNOTE 4,'Opcode &OPCD not supported by RDATA macro'\n.NOERR2  ANOP\n.*\n.* Check SYSLIST contents\n         AIF   ('&OPCD' EQ 'MGCRE').NOERR3\n         AIF   (N'&SYSLIST LT 2).ERR3A\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'Missing operand(s) for remote data definition'\n.NOERR3  ANOP\n.*\n         AIF   ('&OPCD' NE 'MGCRE').NOERR4\n         AIF   (N'&SYSLIST GE 2).ERR4A\n         AGO   .NOERR4\n.ERR4A   MNOTE 4,'RDATA &OPC does not accept any additional parameters'\n.NOERR4  ANOP\n.*\n.* Check the RD_MODE parameter\n         AIF   ('&RD_MODE' EQ 'ADD').NOERR5\n         AIF   ('&RD_MODE' EQ 'COND').NOERR5\n.ERR5A   MNOTE 8,'RD_MODE must be COND or default to ADD'\n.NOERR5  ANOP\n.*\n.* Check the MF parameter\n         AIF   ('&MF' EQ 'X').NOERR6\n.ERR6A   MNOTE 4,'MF-parameter not needed with RDATA &OPC'\n.NOERR6  ANOP\n.*\n.* Check the ALIGN parameter\n         AIF   (K'&ALIGN EQ 0).NOERR7\n         AIF   ('&ALIGN'  EQ 'D').NOERR7\n         AIF   ('&ALIGN'  EQ 'F').NOERR7\n         AIF   ('&ALIGN'  EQ 'H').NOERR7\n         AIF   ('&ALIGN'  EQ 'X').ERR7B\n         AIF   ('&ALIGN'  EQ 'C').ERR7B\n         AIF   ('&ALIGN'  EQ 'B').ERR7B\n.ERR7A   MNOTE 8,'ALIGN parameter specifies unknown data type'\n         AGO   .NOERR7\n.ERR7B   MNOTE 4,'ALIGN parameter specifies byte-aligned data type'\n.NOERR7  ANOP\n.*\n.* Check that LABEL is not duplicate\n         AIF   ('&LABEL' EQ '--').LOOP1OK\n&I       SETA  1                       * I indexes defined RDATA labels\n.LOOP1   ANOP\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&BXA_RD_LAB).LOOP1OK * End of loop\n         AIF   ('&LABEL' EQ '&BXA_RD_LAB(&I)').LOOP1F\n         AGO   .LOOP1                  * Go compare next entry\n.LOOP1F  ANOP  ,                       * Label found: duplicate\n         MNOTE 4,'Duplicate RDATA label: &LABEL. This occurrence ignore*\n               d'\n         MEXIT\n.LOOP1OK ANOP\n.*\n.* Loop thru SYSLIST to build ARG from available arguments\n&ARG     SETC  ''                      * ARG will contain new entry\n&S       SETA  1                       * Index 1 --> opcode\n.LOOP2   ANOP  ,                       * Loop thru remaining SYSLIST\n&S       SETA  &S+1                    * Point next SYSLIST entry\n         AIF   (&S GT N'&SYSLIST).LOOP2OK\n&PRM     SETC  '&SYSLIST(&S)'          * Extract parameter from syslist\n.* Is this a truly positional parameter, or an intended keyword?\n         AGO   .LOOP3LIT              .**!!\n&P       SETA  0                       * Character index into PRM\n.LOOP3   ANOP\n&P       SETA  &P+1                    * Point to next character\n         AIF   (&P GT K'&PRM).LOOP3LIT * End of string?\n&CH      SETC  '&PRM'(&P,1)            * Extract 1 character\n         AIF   ('&CH' EQ '''').LOOP3LIT * Literal: positional parm\n         AIF   ('&CH' EQ '(').LOOP3LIT * Sublist: positional parm\n         AIF   ('&CH' EQ '/').LOOP3F   * Go process slash\n         AGO   .LOOP3                  * Go process next character\n.LOOP3F  ANOP\n.* Extract keyword name and value from &PRM\n&P1      SETA  &P-1                    * Length of keyword name\n&P2      SETA  &P+1                    * Start of kwyword value\n&P3      SETA  1+K'&PRM-&P2            * Length of kewyword value\n         AIF   (&P1 EQ 0).LOOP3LIT     * Empty keyword name: positional\n         AIF   ('&PRM'(1,&P1) EQ 'MF').LOOP3MF\n&J       SETA  1+N'&BXA_RD_NDX         * Point to empty entry\n&BXA_RD_NDX(&J) SETA &I                * Entry index into BXA_RD_OPC\n&BXA_RD_KEY(&J) SETC '&PRM'(1,&P1)     * Extract keyword name\n&BXA_RD_VAL(&J) SETC '&PRM'(&P2,&P3)   * Extract value (or null)\n         AGO   .LOOP2                  * Go process next SYSLIST entry\n.*\n.LOOP3MF ANOP\n         MNOTE 4,'MF-parameter skipped: not needed with RDATA'\n         AGO   .LOOP2                  * Go process next SYSLIST entry\n.*\n.LOOP3LIT ANOP\n.* PRM is a positional parameter: put into ARG with a comma\n         AIF   (K'&ARG EQ 0).LOOP3FLIT\n&ARG     SETC '&ARG'.','.'&SYSLIST(&S)'\n         AGO   .LOOP2\n.LOOP3FLIT ANOP\n&ARG     SETC '&SYSLIST(&S)'           * First literal into ARG\n         AGO   .LOOP2\n.LOOP2OK ANOP\n.*\n.* Put remote data definition into tables for use by LTORG macro\n&BXA_RD_RETVAL SETC ''                 * Set return value to nothing\n&I       SETA  1+N'&BXA_RD_OPC         * First free entry in tables\n.*\n.* For a labeled literal, we must check that no duplicates exist\n         AIF   ('&LABEL' EQ '--').LOOP4NF * Unlabeled: always ok\n&I1      SETA  0                       * I1 indexes BXA_RD_OPC/ARG\n.LOOP4   ANOP  ,                       * Loop thru BXA_RD_OPC/ARG\n&I1      SETA  &I1+1                   * Point next entry\n         AIF   (&I1 GE &I).LOOP4NF     * End of table reached: no match\n         AIF   ('&BXA_RD_OPC(&I1)' NE '&OPCD').LOOP4 * NE: next entry\n         AIF   ('&BXA_RD_ARG(&I1)' NE '&ARG').LOOP4 * NE: next entry\n         AIF   ('&BXA_RD_ALG(&I1)' NE '&ALIGN').LOOP4 * NE: next entry\n         AIF   ('&BXA_RD_LAB(&I1)' EQ '').LOOP4 * No label: next entry\n.*\n.LOOP4F  ANOP  ,                       * Found match: replace by EQU\n         AIF   ('&RD_MODE' EQ 'ADD').LOOP4AD\n&BXA_RD_RETVAL SETC '&BXA_RD_LAB(&I1)' * Return matched label\n         AGO   .LOOP4OK                * No changes to RD-tables\n.*\n.LOOP4AD ANOP  ,                       * Found match, mode=ADD:\n&BXA_RD_OPC(&I) SETC 'EQU'             * Operation changes to EQU\n&BXA_RD_ARG(&I) SETC '&BXA_RD_LAB(&I1)' *  to the original label\n         AGO   .LOOP4LAB\n.*\n.LOOP4NF ANOP  ,                       * Not found\n&BXA_RD_OPC(&I) SETC '&OPCD'           * Put opcode into table\n&BXA_RD_ARG(&I) SETC '&ARG'            *   and arguments\n&BXA_RD_ALG(&I) SETC '&ALIGN'          *   and alignment too\n.*\n.LOOP4LAB ANOP ,                       * Add label\n         AIF   ('&LABEL' EQ '--').LOOP4OK * Unlabeled?\n&BXA_RD_LAB(&I) SETC '&LABEL'          * Put label into table\n.LOOP4OK ANOP\n.*\n.MEND    MEND\n./ ADD NAME=RETRN    0100-20096-20096-0111-00610-00610-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates code for exiting the active module\n.*\n&LABEL   RETRN &RC=0,                  * Returncode, (reg), or *       *\n               &REASON=,               * Reasoncode, (reg), or *       *\n               &RETPTR=,               * Return ptr value, (reg), or * *\n               &WORKAREA=FREE,         * FREE or NOFREE                *\n               &INLINE=YES             * YES or NO\n.*\n.* &RC   specifies the returncode. Specification of * equals to (R15)\n.*       If omitted a returncode of 0 will be generated by default.\n.* &REASON specifies the reasoncode. Specification of * equals to (R0)\n.*         If omitted, R0 will be restored to the contents at entry.\n.* &RETPTR specifies a pointer value to be returned in R1.\n.*         Specification of * equals to (R1).\n.*         If omitted, R1 will be restored to the contents at entry.\n.* &WORKAREA specifies whether or not the area allocated by PGM\n.*           is to be released.\n.* &INLINE if specified as YES, a branch will be generated to an\n.*         out-of-line routine which performs the requested function.\n.*         if specified as NO the required out-of-line routine will\n.*         be generated. INLINE=NO should be specified only by the END\n.*         macro.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC RETRN                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Define variables\n         GBLB  &SP_SHOWALL             * Option from PGM\n         GBLC  &SYSASCE                * ASC-environment: P or AR\n         GBLC  &BXA_WALEN              * Worka area length\n         GBLC  &BXA_ENTRY              * Entry mode\n         GBLA  &BXA_SAVES              * Nr of internal save areas\n         GBLC  &BXA_WORKPTR(3)         * Pointer to work area\n         GBLC  &BXA_SUBR               * Current subroutine name\n         GBLC  &BXA_PGM_LABEL          * Label of CSECT from PGM macro\n         GBLC  &BXA_WALAB              * Label of workarea\n         LCLA  &I                      * INDEX for BXA_RETRN_...\n         GBLC  &BXA_RETRN_RC(5)        * Returncodes\n         GBLC  &BXA_RETRN_RP(5)        * Return pointers\n         GBLC  &BXA_RETRN_RS(5)        * Reasoncodes\n         GBLC  &BXA_RETRN_WA(5)        * WORKAREA parameters\n         GBLC  &BXA_RETRN_LBL(5)       * Labels for out-of-line rout.\n         GBLA  &BXA_NUMVAL             * Returnvalue from EQUREG\n         LCLC  &ARG                    * Some argument\n         LCLC  &_RC                    * Returncode register\n         LCLC  &_RS                    * Reasoncode register\n         LCLC  &_RP                    * Return pointer register\n         LCLC  &_WR1                   * Work register 1\n         LCLC  &_WR2                   * Work register 2\n.*\n.* Check workarea parameter\n         AIF   ('&WORKAREA' EQ 'FREE').NOERR1\n         AIF   ('&WORKAREA' EQ 'NOFREE').NOERR1A\n.ERR1A   MNOTE 8,'Workarea parameter must specify FREE or NOFREE'\n         AGO   .NOERR1\n.NOERR1A ANOP\n         AIF   ('&BXA_ENTRY' EQ 'FRR').ERR1B\n         AIF   ('&BXA_ENTRY' EQ 'RESMGR').ERR1B\n         AIF   ('&BXA_ENTRY' EQ 'RMTR').ERR1B\n         AIF   ('&BXA_ENTRY' EQ 'SPCR').ERR1B\n         AIF   ('&BXA_ENTRY' EQ 'SRB').ERR1B\n         AIF   ('&BXA_ENTRY' EQ 'SVC').ERR1B\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'Workarea parameter must specify FREE for &BXA_ENTRY p*\n               rograms'\n.NOERR1  ANOP  ,\n.*\n.* Check subroutine name\n         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR2\n.ERR2    MNOTE 8,'RETRN must not be issued within a subroutine'\n.NOERR2  ANOP\n.*\n.* Check nesting level\n         AIF   (&SYSNEST EQ 1).NOERR3\n         AIF   ('&INLINE' EQ 'NO').NOERR3\n.ERR3    MNOTE 8,'RETRN must not be issued from within another macro'\n.NOERR3  ANOP\n.*\n.* Check inline parameter\n         AIF   ('&INLINE' EQ 'NO').NOERR4\n         AIF   ('&INLINE' EQ 'YES').NOERR4\n.ERR4    MNOTE 8,'INLINE parameter must specify either YES or NO'\n         MEXIT\n.NOERR4  ANOP\n.*\n.* Check RC parameter\n         AIF   (K'&RC EQ 0).NOERR5\n         AIF   ('&BXA_ENTRY' EQ 'SRB').ERR5C\n         AIF   ('&BXA_ENTRY' EQ 'RMTR').ERR5C\n         AIF   ('&RC'(1,1) NE '(').NOERR5\n         AIF   (N'&RC NE 1).ERR5A\n         CHKREG &RC(1),g\n         AIF   (&BXA_RC EQ 8).ERR5B\n         AGO   .NOERR5\n.ERR5A   MNOTE 4,'Only 1 register can be specified on RC, remainder ign*\n               ored'\n         AGO   .NOERR5\n.ERR5B   ANOP\n&ARG     SETC  (DOUBLE '&RC(1)')\n         MNOTE 8,'Register &ARG is not a valid register'\n         MEXIT\n.ERR5C   ANOP  ,\n         AIF   ('&RC' EQ '0').NOERR5\n         MNOTE 8,'RC-parameter not allowed for SRB/RMTR-type routines'\n.NOERR5  ANOP\n.*\n.* Check REASON parameter\n         AIF   (K'&REASON EQ 0).NOERR6\n         AIF   ('&BXA_ENTRY' EQ 'FRR').ERR6C\n         AIF   ('&BXA_ENTRY' EQ 'SRB').ERR6C\n         AIF   ('&BXA_ENTRY' EQ 'RESMG').ERR6C\n         AIF   ('&BXA_ENTRY' EQ 'RMTR').ERR6C\n         AIF   ('&REASON'(1,1) NE '(').NOERR6\n         AIF   (N'&REASON NE 1).ERR6A\n         CHKREG &REASON(1),g\n         AIF   (&BXA_REASON EQ 8).ERR6B\n         AGO   .NOERR6\n.ERR6A   MNOTE 4,'Only 1 register can be specified on REASON, remainder*\n                ignored'\n         AGO   .NOERR6\n.ERR6B   ANOP\n&ARG     SETC  (DOUBLE '&REASON(1)')\n         MNOTE 8,'Register &ARG is not a valid register'\n         MEXIT\n.ERR6C   MNOTE 8,'REASON-parameter not allowed for &BXA_ENTRY type of r*\n               outine'\n.NOERR6  ANOP\n.*\n.* Check RETPTR parameter\n         AIF   (K'&RETPTR EQ 0).NOERR7\n         AIF   ('&BXA_ENTRY' EQ 'FRR').ERR7C\n         AIF   ('&BXA_ENTRY' EQ 'SRB').ERR7C\n         AIF   ('&BXA_ENTRY' EQ 'RMTR').ERR7C\n         AIF   ('&BXA_ENTRY' EQ 'RESMGR').ERR7C\n         AIF   ('&RETPTR'(1,1) NE '(').NOERR7\n         AIF   (N'&RETPTR NE 1).ERR7A\n         CHKREG &RETPTR(1),g\n         AIF   (&BXA_RC EQ 8).ERR7B\n         AGO   .NOERR7\n.ERR7A   MNOTE 4,'Only 1 register can be specified on RETPTR, remainder*\n                ignored'\n         AGO   .NOERR7\n.ERR7B   ANOP\n&ARG     SETC  (DOUBLE '&RETPTR(1)')\n         MNOTE 8,'Register &ARG is not a valid register'\n         MEXIT\n.ERR7C   MNOTE 8,'RETPTR-parameter not allowed for &BXA_ENTRY type of r*\n               outine'\n.NOERR7  ANOP\n.*\n.* INLINE-parameter determines further expansion of this macro\n         AIF   ('&INLINE' EQ 'YES').INLINE\n         AIF   ('&INLINE' EQ 'NO').OUTLINE\n         MNOTE 12,'Internal error'\n         MEXIT\n.*\n.INLINE  ANOP\n&I       SETA  N'&BXA_RETRN_LBL+1      * Point firrst free element\n&BXA_RETRN_LBL(&I) SETC '_RETRN&SYSNDX' * Generate label for routine\n&BXA_RETRN_RC(&I)  SETC '&RC'          * Copy returncode parameter\n&BXA_RETRN_RS(&I)  SETC '&REASON'      * Copy reasoncode parameter\n&BXA_RETRN_RP(&I)  SETC '&RETPTR'      * Copy returnpointer parameter\n&BXA_RETRN_WA(&I)  SETC '&WORKAREA'    * Copy workarea parameter\n.*\n.* Now replace R12 with the intended target address and branch to it\n         L     R12,=AL4(_RETRN&SYSNDX) * Load out-of-line routine addr\n         BR    R12                     * And execute it\n         MEXIT\n.*\n.* Generate label if one is specified\n.OUTLINE ANOP\n&LABEL   LABEL H                       * Re-align on halfword boundary\n         DROP  ,                       * Drop all USINGs\n         USE   &LABEL,R12              * Set code addressable\n         USE   &BXA_WALAB,R13,         * Set workarea addressable      *\n               START=&BXA_WALAB+SAVEPRFX_LEN * upward from savearea\n.*\n.* We must assign 5 registers:\n.* 1 for the returncode to be returned in R15    - &_RC\n.* 1 for the reasoncode to be returned in R0     - &_RS\n.* 1 for the return pointer to be returned in R1 - &_RP\n.* 2 work registers                              - &_WR1, &_WR2\n.* Defaults are as follows:\n.* &_RC: register specified, otherwise lowest available in range R1-R11\n.* &_RS: register specified, otherwise lowest available in range R1-R11\n.* &_RP: register specified, otherwise lowest available in range R1-R11\n.* &_WR1,&_WR2: lowest available in range R1-R11 after assigning\n.*              &_RC, &_RS, and &_RP\n.*\n.* Check which register has been assigned to the return code\n         AIF   ('&RC' EQ '*').TSTRC_R15 * R15\n         AIF   ('&RC'(1,1) EQ '(').TSTRC_REG * Register\n         AGO   .TSTRC_OK               * No register to USE\n.TSTRC_R15 ANOP ,                      *\n&_RC     SETC  'R15'                   * Assign R15 for returncode\n         USE   R15                     * R15 contains return code\n         AGO   .TSTRC_OK               *\n.TSTRC_REG ANOP ,                      *\n&_RC     SETC  '&RC(1)'                * Assign reg for returncode\n         USE   &RC(1)                  * Some register contains retcd\n.TSTRC_OK ANOP ,                       *\n.*\n.* Check which register has been assigned to the reason code\n         AIF   (K'&REASON EQ 0).TSTRS_OK * No reason code?\n         AIF   ('&REASON' EQ '*').TSTRS_R0 * R0\n         AIF   ('&REASON'(1,1) EQ '(').TSTRS_REG * Register\n         AGO   .TSTRS_OK               * No register to USE\n.TSTRS_R0 ANOP ,                       *\n&_RS     SETC  'R0'                    * Assign R0 for reasoncode\n         USE   R0                      * R0 contains reason code\n         AGO   .TSTRS_OK               *\n.TSTRS_REG ANOP ,                      *\n&_RS     SETC  '&REASON(1)'            * Assign reg for reasoncode\n         USE   &REASON(1)              * Some register contains reason\n.TSTRS_OK ANOP ,                       *\n.*\n.* Check which register has been assigned to the return pointer value\n         AIF   (K'&RETPTR EQ 0).TSTRP_OK * Return pointer specified?\n         AIF   ('&RETPTR' EQ '*').TSTRP_R1 * R1\n         AIF   ('&RETPTR'(1,1) EQ '(').TSTRP_REG * Register\n         AGO   .TSTRP_OK               * No register to USE\n.TSTRP_R1 ANOP ,                       *\n&_RP     SETC  'R1'                    * Assign R1 for returnpointer\n         USE   R1                      * R1 contains return pointer\n         AGO   .TSTRP_OK               *\n.TSTRP_REG ANOP ,                      *\n&_RP     SETC  '&RETPTR(1)'            * Assign reg for return pointer\n         USE   &RETPTR(1)              * Some register contains retptr\n.TSTRP_OK ANOP ,                       *\n.*\n.* Assign two work registers (used for addressing)\n         EQUREG R0=NO                  * Find a work register\n&_WR1    SETC  'R&BXA_NUMVAL'          *  create register name\n         USE   &_WR1                   * and set it in use\n         EQUREG R0=NO                  * And another one\n&_WR2    SETC  'R&BXA_NUMVAL'          *  create register name\n         USE   &_WR2                   * and set it in use\n.*\n.* When in access register mode, the associated ARs must be cleared\n         AIF   ('&SYSASCE' NE 'AR').NOTAR\n         CLEAR A&_WR1\n         CLEAR A&_WR2\n.NOTAR   ANOP  ,\n.*\n.* Assign register for return code (unless already valid)\n         AIF   (K'&_RC GT 0)._RCREG    * Returncode in a register?\n         EQUREG ,                      * No: find a register\n&_RC     SETC  'R&BXA_NUMVAL'          * Create register name\n         AIF   ('&RC' EQ '0').RC_0     * Set to 0\n         LA    &_RC,&RC                * Load return code into register\n         USE   &_RC                    * Set register in use\n         AGO   ._RCOK\n.RC_0    ANOP\n         CLEAR &_RC                    * Set returncode to zero\n         USE   &_RC                    * Set register in use\n         AGO   ._RCOK\n._RCREG  ANOP  ,                       * Check validity of register\n.* For WORKAREA=FREE registers 14 thru 1 cannot be used\n         AIF   ('&WORKAREA' EQ 'NOFREE')._RCOK * Nofree: no requirement\n         CHKREG &_RC,g                 * Valid register?\n         AIF   (&BXA_NUMVAL LT 2).RCREG * Allocate another\n         AIF   (&BXA_NUMVAL GT 13).RCREG * Allocate another\n         AGO   ._RCOK                  * Reg 2-13: OK\n.RCREG   ANOP\n         EQUREG ,                      * No: find a register\n&I       SETA  &BXA_NUMVAL             * Save new register nr\n         LR    R&I,&_RC                * Copy retcd to safe register\n         DROP  &_RC                    * Set register available\n&_RC     SETC  'R&I'                   * Create register name\n         USE   &_RC                    * And set register in use\n._RCOK   ANOP\n.*\n.* Assign register for reason code (unless already done)\n         AIF   (K'&REASON EQ 0)._RSOK  * Reasoncode specified?\n         AIF   (K'&_RS GT 0)._RSREG    * Reasoncode in register?\n         EQUREG ,                      * No: find a register\n&_RS     SETC  'R&BXA_NUMVAL'          * Create register name\n         AIF   ('&REASON' EQ '0').RS_0 * Set to 0\n         LA    &_RS,&REASON            * Load reason code into register\n         USE   &_RS                    * Set register in use\n         AGO   ._RSOK\n.RS_0    ANOP\n         CLEAR &_RS                    * Set reasoncode to zero\n         USE   &_RS                    * Set register in use\n         AGO   ._RSOK\n._RSREG  ANOP  ,                       * Check validity of register\n.* For WORKAREA=FREE registers 14 thru 1 cannot be used\n         AIF   ('&WORKAREA' EQ 'NOFREE')._RSOK * Nofree: no requirement\n         CHKREG &_RS,g                 * Valid register?\n         AIF   (&BXA_NUMVAL LT 2).RSREG * Allocate another\n         AIF   (&BXA_NUMVAL GT 13).RSREG * Allocate another\n         AGO   ._RSOK                  * Reg 2-13: OK\n.RSREG   ANOP\n         EQUREG ,                      * No: find a register\n&I       SETA  &BXA_NUMVAL             * Save new register nr\n         LR    R&I,&_RS                * Copy reason to safe register\n         DROP  &_RS                    * Set register available\n&_RS     SETC  'R&I'                   * Create register name\n         USE   &_RS                    * And set register in use\n._RSOK   ANOP\n.*\n.* Assign register for return pointer (unless already done)\n         AIF   (K'&RETPTR EQ 0)._RPOK  * Return ptr specified?\n         AIF   (K'&_RP GT 0)._RPREG    * Return ptr in register?\n         EQUREG ,                      * No: find a register\n&_RP     SETC  'R&BXA_NUMVAL'          * Create register name\n         AIF   ('&RETPTR' EQ '0').RP_0 * Set to 0\n         LA    &_RP,=AL4(&RETPTR)      * Load return ptr into register\n         USE   &_RP                    * Set register in use\n         AGO   ._RPOK\n.RP_0    ANOP\n         CLEAR &_RP                    * Set return pointer to zero\n         USE   &_RP                    * Set register in use\n         AGO   ._RPOK\n._RPREG  ANOP  ,                       * Check validity of register\n.* For WORKAREA=FREE registers 14 thru 1 cannot be used\n         AIF   ('&WORKAREA' EQ 'NOFREE')._RPOK * Nofree: no requirement\n         CHKREG &_RP,g                 * Valid register?\n         AIF   (&BXA_NUMVAL LT 2).RPREG * Allocate another\n         AIF   (&BXA_NUMVAL GT 13).RPREG * Allocate another\n         AGO   ._RPOK                  * Reg 2-13: OK\n.RPREG   ANOP\n         EQUREG ,                      * No: find a register\n&I       SETA  &BXA_NUMVAL             * Save new register nr\n         LR    R&I,&_RP                * Copy retptr to safe register\n         DROP  &_RP                    * Set register available\n&_RP     SETC  'R&I'                   * Create register name\n         USE   &_RP                    * And set register in use\n._RPOK   ANOP\n.*\n.* Check the internal save-areas\n         AIF   ('&BXA_ENTRY' EQ 'SUBR' AND &BXA_SAVES EQ 0).SUBRSAV\n         AIF   (&BXA_SAVES EQ 0).NOSAVES\n* All subroutines must have completed\n         LT    &_WR1,SAVEINTF          * Retrieve ptr to internal SA's\n         ABND  Z                       * If invalid: abend!\n         AIF   ('&BXA_ENTRY' EQ 'SUBR').SUBRSAV\n         LT    &_WR2,SAVEINTU          * Pointer to last used is zero?\n         ABND  NZ                      * No: not all subr's ended!\n         AGO   .NOSAVES                * Skip SUBR logic\n.*\n.SUBRSAV ANOP\n         LT    &_WR1,SAVEINTU          * Pointer to last used is zero?\n         ABND  Z                       * Yes: invalid for SUBR-type pgm\n_LOOP&SYSNDX LABEL ,\n         DROP  &_WR2                   * Drop reg to change it\n         AIF   (&BXA_SAVES EQ 0).NOSAVES\n         LR    &_WR2,&_WR1             * Point to SA on chain\nSA       USE   SAVEAREA,&_WR2          * and set it addressable\n         LT    &_WR1,SA.SAVENEXT       * Is there a next SA?\n         BNZ   _LOOP&SYSNDX            * Yes: runchain\n         LA    &_WR1,&BXA_WALEN-SAVEAREA_LEN * Offset in dynamic area\n         SR    &_WR2,&_WR1             * Point to start of area\n         DROP  SA\nINT      USE   BXASAVE,&_WR2           * Set area addressable\n         CLC   INT.SAVEID,=CL8'&BXA_PGM_LABEL' * Id is correct?\n         ABND  NE                      * If not: internal error\n         CLC   SAVEINTU,INT.SAVEPTSA   * all subrs ended?\n         ABND  NE                      * No: must be an error!\n         DROP  &_WR1                   * Drop register to change it\n         L     &_WR1,INT.SAVEPREV      * Point to preceding SA on chain\nPRV      USE   SAVEAREA,&_WR1          * and set it addressable\n         CLEAR PRV.SAVENEXT,,XC        * Detach our subchain\n         DROP  PRV                     * SAVEAREA,R4 (now end-of-chain)\n         USE   &_WR1                   * Tell asm not to realloc reg.\n         DROP  INT                     * BXASAVE,R5 = whole dyn.area\n         USE   &_WR2                   * Tell asm not to realloc reg.\n.NOSAVES ANOP\n.*\n         AIF   ('&WORKAREA' EQ 'NOFREE').NOFREE\n         AIF   ('&BXA_ENTRY' EQ 'SUBR' AND &BXA_SAVES EQ 0).NOFREE\n*\n* Release dynamically allocated storage\n         AIF   ('&BXA_ENTRY' EQ 'SUBR').WR2OK * For SUBR WR2 is ok\n         DROP  &_WR2                   * Drop reg to change it\n         LR    &_WR2,R13               * Copy workarea pointer\n         DEC   &_WR2,SAVEPRFX_LEN      * And adjust for prefix area\n.WR2OK   ANOP  ,                       *\n.*\n.* If a pointer is known to exist: reset it to zeros\n         AIF   (K'&BXA_WORKPTR(3) EQ 0)._NOPTR\n* First reset pointer to zeros\nHDR      USE   BXASAVE,&_WR2           * Set area addressable\n         LT    &_WR1,HDR.SAVEPTPT      * Get ptr to area with ptr to us\n         ABND  Z                       * If invalid abend program\n         XC    0(4,&_WR1),0(&_WR1)     * Reset pointer to zero\n         DROP  HDR                     * BXASAVE,R5 = whole dyn.area\n         USE   &_WR2                   * Tell asm not to change this 1\n* Then free allocated storage\n._NOPTR  ANOP\n.* Free allocated storage\n.* For SUBPGM's with FREE: Hold address of previous save-area in WR1\n         AIF   ('&BXA_ENTRY' NE 'SUBPGM' AND                           *\n               '&BXA_ENTRY' NE 'RESMGR' AND                            *\n               '&BXA_ENTRY' NE 'FRR').NOSUB\n         L     &_WR1,SAVEPREV          * Save address of previous SA\n.NOSUB   ANOP  ,                       *\n         AIF   ('&BXA_ENTRY' NE 'SRB' AND '&BXA_ENTRY' NE 'RMTR').NOSRB\n         L     &_WR1,SAVEHDR           * Reload return address\n         CLEAR SAVEHDR                 * Wipe header of save area\n.NOSRB   ANOP  ,                       *\n.*\n         STORAGE RELEASE,              * Free the acquired             *\n               ADDR=(&_WR2),           *    storage area               *\n               LENGTH=&BXA_WALEN       *\n.NOFREE  ANOP  ,                       *\n.*\n.* Generate different code for returning to caller depending on ENTRY\n         AIF   ('&BXA_ENTRY' EQ 'FRR').SUBPGM\n         AIF   ('&BXA_ENTRY' EQ 'MAIN').MAIN\n         AIF   ('&BXA_ENTRY' EQ 'RESMGR').SUBPGM\n         AIF   ('&BXA_ENTRY' EQ 'RMTR').SRB\n         AIF   ('&BXA_ENTRY' EQ 'SPCR').MAIN\n         AIF   ('&BXA_ENTRY' EQ 'SRB').SRB\n         AIF   ('&BXA_ENTRY' EQ 'SUBPGM').SUBPGM\n         AIF   ('&BXA_ENTRY' EQ 'SUBR').SUBR\n         AIF   ('&BXA_ENTRY' EQ 'SVC').SVC\n         MNOTE 12,'Internal error'\n         MEXIT\n.*\n.SUBPGM  ANOP\n*\n* Set ret/reason-codes in R15/R0, restore registers, then return\n.* If WORKAREA=FREE, ptr to previous SA in &_WR1\n.*        otherwise, ptr to previous SA in current SA\n         AIF   ('&WORKAREA' EQ 'FREE').FROMWR1\n         L     R13,SAVEPREV            * Point to previous SA\n         AGO   .R13OK\n.FROMWR1 ANOP\n         LR    R13,&_WR1               * Restore R13 (prev.savearea)\n.R13OK   ANOP\n         DROP  R13                     * Drop to swap using status\n         USE   SAVEAREA,R13            * R13 now points to prev.SA\n         L     R14,SAVEDR14            * Restore R14\n         CPY   R15,&_RC,NOWARN         * Copy returncode to R15\n.* Determine how to load R0 and R1\n&_WR2    SETC  'R2'                    * Start register for LM\n         AIF   (K'&REASON GT 0 AND K'&RETPTR GT 0).SPRSRP\n         AIF   (K'&REASON GT 0 AND K'&RETPTR EQ 0).SPRS\n         AIF   (K'&REASON EQ 0 AND K'&RETPTR GT 0).SPRP\n.* Neither reason nor retptr specified\n&_WR2    SETC  'R0'                    * Reload registers 0-12\n         AGO   .SP_LM                  *\n.SPRSRP  ANOP  ,                       * Both reason and retptr\n         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0\n         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1\n         AGO   .SP_LM                  *\n.SPRS    ANOP  ,                       * Only reason specified\n         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0\n&_WR2    SETC  'R1'                    * Reload registers 1-12\n         AGO   .SP_LM                  *\n.SPRP    ANOP  ,                       * Only retptr specified\n         L     R0,SAVEDR0              * Restore caller's R0\n         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1\n.SP_LM   ANOP  ,                       *\n         LM    &_WR2,R12,SAVED&_WR2    * Restore all other registers\n         BR    R14                     * Return to caller\n         DROP  R13                     * SAVEAREA no longer needed\n.*\n         AGO   .LTORG\n.*\n.SUBR    ANOP\n*\n* Set return/reason-codes in R15/R0, restore registers, then return\n         DROP  &_WR1                   * Drop register to change it\n         L     &_WR1,SAVEINTU          * Point to last-used internal SA\nSA       USE   SAVEAREA,&_WR1          * Set previous SA addressable\n         MVC   SAVEINTU,SA.SAVEPREV    * Set previous SA last-used\n         L     R14,SA.SAVEDR14         * Restore R14\n         CPY   R15,&_RC,NOWARN         * Copy returncode to R15\n.* Determine how to load R0 and R1\n&_WR2    SETC  'R2'                    * Start register for LM\n         AIF   (K'&REASON GT 0 AND K'&RETPTR GT 0).SRRSRP\n         AIF   (K'&REASON GT 0 AND K'&RETPTR EQ 0).SRRS\n         AIF   (K'&REASON EQ 0 AND K'&RETPTR GT 0).SRRP\n.* Neither reason nor retptr specified\n&_WR2    SETC  'R0'                    * Reload registers 0-12\n         AGO   .SR_LM                  *\n.SRRSRP  ANOP  ,                       * Both reason and retptr\n         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0\n         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1\n         AGO   .SR_LM                  *\n.SRRS    ANOP  ,                       * Only reason specified\n         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0\n&_WR2    SETC  'R1'                    * Reload registers 1-12\n         AGO   .SR_LM                  *\n.SRRP    ANOP  ,                       * Only retptr specified\n         L     R0,SA.SAVEDR0           * Restore caller's R0\n         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1\n.SR_LM   ANOP  ,\n         LM    &_WR2,R12,SA.SAVED&_WR2 * Restore all other registers\n         BR    R14                     * Return to caller\n         DROP  SA                      * SAVEAREA,R4 no longer needed\n         USE   &_WR1                   * Tell asm not to reallocate reg\n         AGO   .LTORG\n.*\n.MAIN    ANOP\n*\n* Load returncode and return to caller\n         CPY   R15,&_RC,NOWARN         * Load returncode\n.* Determine how to load R0 and R1\n         AIF   (K'&REASON GT 0 AND K'&RETPTR GT 0).MNRSRP\n         AIF   (K'&REASON GT 0 AND K'&RETPTR EQ 0).MNRS\n         AIF   (K'&REASON EQ 0 AND K'&RETPTR GT 0).MNRP\n.* Neither reason nor retptr specified\n         EREG  R0,R1                   * Reload registers 0-1\n         AGO   .MN_PR\n.MNRSRP  ANOP  ,                       * Both reason and retptr\n         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0\n         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1\n         AGO   .MN_PR                  *\n.MNRS    ANOP  ,                       * Only reason specified\n         CPY   R0,&_RS,NOWARN          * Copy reasoncode to R0\n         EREG  R1,R1                   * Restore caller's R1\n         AGO   .MN_PR                  *\n.MNRP    ANOP  ,                       * Only retptr specified\n         EREG  R0,R0                   * Restore caller's R0\n         CPY   R1,&_RP,NOWARN          * Copy return ptr to R1\n.MN_PR   ANOP  ,\n         PR    ,                       *  and return to caller\n         AGO   .LTORG\n.*\n.SVC     ANOP\n*\n* Load returncode and return to caller\n         CPY   R15,&_RC,NOWARN         * Load returncode\n.* Reasoncode specified for R0?\n         AIF   (K'&REASON EQ 0).SVCNORS\n         CPY   R0,&_RS,NOWARN          * Load reasoncode\n.SVCNORS ANOP  ,\n.* Return pointer specified for R1?\n         AIF   (K'&RETPTR EQ 0).SVCNORP\n         CPY   R1,&_RP,NOWARN          * Load return pointer\n.SVCNORP ANOP  ,\n*\n* Return to caller\n         SVC   3                       * Pop RB\n         MEXIT ,                       *\n*\n.SRB     ANOP  ,                       *\n*\n* Clear retcode register and return to system\n         CPY   R15,&_RC,NOWARN         * Copy saved retcode 0\n         CPY   R14,&_WR1               * Copy return register\n         BR    R14                     * and return\n*\n.LTORG   ANOP  ,                       *\n         LTORG ,                       * Literal pool for this routine\n         DROP  ,                       * Drop all registers\n.*\n.MEND    MEND\n./ ADD NAME=RLTORG   0100-20096-20096-0111-00380-00380-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Create a literal pool. This macro replaces the normal LTORG\n.* instruction. The required OPSYN is issued by the PGM macro.\n.*\n&LABEL   RLTORG\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC RLTORG                 * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_SUBR               * Current subroutine\n         GBLC  &BXA_RD_LAB(50)         * Labels for remote data\n         GBLC  &BXA_RD_OPC(50)         * Opcodes for remote data\n         GBLC  &BXA_RD_ARG(50)         * Pos Arguments for remote data\n         GBLC  &BXA_RD_ALG(50)         * Alignment for remote data\n         LCLA  &I                      * Index for BXA_RD_xxx\n.*\n.**!!    GBLA  &BXA_RD_NDX(50)         * Indexes for keywords\n.**!!    GBLC  &BXA_RD_KEY(50)         * Keyword names\n.**!!    GBLC  &BXA_RD_VAL(50)         * Keyword values\n.*       LCLA  &I                      * Index for BXA_RD_LAB/OPC/ARG\n.**!!    LCLA  &J                      * Index for BXA_RD_NDX/KEY/VAL\n         LCLC  &LAB                    * Entry from BXA_RD_LAB\n         LCLC  &OPC                    * Entry from BXA_RD_OPC\n         LCLC  &ARG                    * Entry from BXA_RD_ARG\n         LCLC  &ALG                    * Entry from BXA_RD_ALG\n.**!!    LCLC  &KEY                    * Entry from BXA_RD_KEY\n.**!!    LCLC  &VAL                    * Entry from BXA_RD_VAL\n.**!!    LCLC  &K1                     * First character from &KEY\n.*\n.* Define DCB-parameters\n.**!!    LCLC  &BFALN,&BFTEK,&BLKSIZE,&BUFCB,&BUFOFF,&BUFL,&BUFNO,     *\n               &CYLOFL,&DCBE,&DDNAME,&DEVD,&DSORG,&EODAD,&EROPT,&EXLST,*\n               &KEYLEN,&LIMCT,&LRECL,&MACRF,&MSHI,&MSWA,&NCP,&NTM,     *\n               &OPTCD,&RECFM,&RKP,&SMSI,&SMSW,&SYNAD\n.*\n.* Check that we're not in the midst of a subroutine\n         AIF   ('&BXA_SUBR' EQ '*MAIN').NOERR1\n.ERR1    MNOTE 8,'Missing ENDSR statement'\n.NOERR1  ANOP\n.*\n.* Generate code\n&LABEL   LABEL H                       * Align on halfword\n.*\n.* Insert remote data\n         AIF   (N'&BXA_RD_LAB EQ 0).LOOP2OK * Skip RDATA loop\n**********************************************************************\n*\n* Remote data definitions\n*\n**********************************************************************\n.* Generate remote data definitions from tables\n&I       SETA  0                       * &I indexes BXA_RD_LAB/OPC/ARG\n&J       SETA  1                       * &J indexes BXA_RD_NDX/KEY/VAL\n.LOOP2   ANOP\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&BXA_RD_LAB).LOOP2OK * End of loop\n&LAB     SETC  '&BXA_RD_LAB(&I)'       * Extract Label for remote data\n&OPC     SETC  '&BXA_RD_OPC(&I)'       * Extract Remote opcode\n&ARG     SETC  '&BXA_RD_ARG(&I)'       * Extract Remote data operands\n&ALG     SETC  '&BXA_RD_ALG(&I)'       * Extract Remote data alignment\n.*\n         AIF   (K'&ALG EQ 0).LOOP2GO   * No alignment\n         DS    0&ALG                   * Align\n.LOOP2GO ANOP\n.**!!    AIF   ('&OPC' EQ 'DCB').KEY   * Go process macro with keywords\n         AIF   ('&OPC' EQ 'CLOSE').LOOP2MFL * Go process macro, MF=L\n         AIF   ('&OPC' EQ 'MGCRE').LOOP2MFL * Go process macro, MF=L\n         AIF   ('&OPC' EQ 'OPEN').LOOP2MFL * Go process macro with MF=L\n         AIF   ('&OPC' EQ 'WTO').LOOP2MFL * Go process macro with MF=L\n&LAB     &OPC  &ARG\n         AGO   .LOOP2                  * Go process next entry\n.LOOP2MFL ANOP\n&LAB     &OPC  &ARG,MF=L\n         AGO   .LOOP2                  * Go process next entry\n.LOOP2OK ANOP\n         AGO   .MEND\n.*\n.* KEYwords section: extract keyword parameters from tables\n.* - Select all entries from BXA_RD_NDX/KEY/VAL with an index value\n.*   equal to the current index for BXA_RD_LAB/OPC/ARG. These entries\n.*   specify the keywords for this macro expansion.\n.*   All entries are copied to locals, which are ultimately used\n.*   to generate the macro specified in BXA_RD_OPC.\n.*\n.KEY     ANOP  ,                       * Init: Wipe all keywords\n&BFALN   SETC  ''\n&BFTEK   SETC  ''\n&BLKSIZE SETC ''\n&BUFCB   SETC  ''\n&BUFOFF  SETC  ''\n&BUFL    SETC  ''\n&BUFNO   SETC  ''\n&CYLOFL  SETC  ''\n&DCBE    SETC  ''\n&DDNAME  SETC  ''\n&DEVD    SETC  ''\n&DSORG   SETC  ''\n&EODAD   SETC  ''\n&EROPT   SETC  ''\n&EXLST   SETC  ''\n&KEYLEN  SETC  ''\n&LIMCT   SETC  ''\n&LRECL   SETC  ''\n&MACRF   SETC  ''\n&MSHI    SETC  ''\n&MSWA    SETC  ''\n&NCP     SETC  ''\n&NTM     SETC  ''\n&OPTCD   SETC  ''\n&RECFM   SETC  ''\n&RKP     SETC  ''\n&SMSI    SETC  ''\n&SMSW    SETC  ''\n&SYNAD   SETC  ''\n.*\n.LOOP3   ANOP\n         AIF   (&J GT N'&BXA_RD_NDX).LOOP3OK * End of table\n         AIF   (&BXA_RD_NDX(&J) NE &I).LOOP3OK * End of loop\n.* Valid entry: extract values from tables\n&VAL     SETC  '&BXA_RD_VAL(&J)'       * Extract keyword value\n&KEY     SETC  '&BXA_RD_KEY(&J)'       * Extract keyword name\n&KEY     SETC  (UPPER '&KEY')          * Convert to upper case\n&K1      SETC  '&KEY'(1,1)             * Extract first character\n         AIF   ('&K1' EQ 'B').LOOP3B\n         AIF   ('&K1' EQ 'C').LOOP3C\n         AIF   ('&K1' EQ 'D').LOOP3D\n         AIF   ('&K1' EQ 'E').LOOP3E\n         AIF   ('&K1' EQ 'K').LOOP3K\n         AIF   ('&K1' EQ 'L').LOOP3L\n         AIF   ('&K1' EQ 'M').LOOP3M\n         AIF   ('&K1' EQ 'N').LOOP3N\n         AIF   ('&K1' EQ 'O').LOOP3O\n         AIF   ('&K1' EQ 'R').LOOP3R\n         AIF   ('&K1' EQ 'S').LOOP3S\n.LOOP3ERR ANOP\n&KEY     SETC  (DOUBLE '&KEY')         * Double embedded quotes\n         MNOTE 8,'RDATA &OPC specified unknown keyword: &KEY'\n         AGO   .LOOP3\n.*\n.LOOP3B  ANOP\n         AIF   ('&KEY' EQ 'BFALN').BFALN\n         AIF   ('&KEY' EQ 'BFTEK').BFTEK\n         AIF   ('&KEY' EQ 'BLKSIZE').BLKSIZE\n         AIF   ('&KEY' EQ 'BUFCB').BUFCB\n         AIF   ('&KEY' EQ 'BUFOFF').BUFOFF\n         AIF   ('&KEY' EQ 'BUFL').BUFL\n         AIF   ('&KEY' EQ 'BUFNO').BUFNO\n         AGO   .LOOP3ERR\n.*\n.LOOP3C  ANOP\n         AIF   ('&KEY' EQ 'CYLOFL').CYLOFL\n         AGO   .LOOP3ERR\n.*\n.LOOP3D  ANOP\n         AIF   ('&KEY' EQ 'DCBE').DCBE\n         AIF   ('&KEY' EQ 'DDNAME').DDNAME\n         AIF   ('&KEY' EQ 'DEVD').DEVD\n         AIF   ('&KEY' EQ 'DSORG').DSORG\n         AGO   .LOOP3ERR\n.*\n.LOOP3E  ANOP\n         AIF   ('&KEY' EQ 'EODAD').EODAD\n         AIF   ('&KEY' EQ 'EROPT').EROPT\n         AIF   ('&KEY' EQ 'EXLST').EXLST\n         AGO   .LOOP3ERR\n.*\n.LOOP3K  ANOP\n         AIF   ('&KEY' EQ 'KEYLEN').KEYLEN\n         AGO   .LOOP3ERR\n.*\n.LOOP3L  ANOP\n         AIF   ('&KEY' EQ 'LIMCT').LIMCT\n         AIF   ('&KEY' EQ 'LRECL').LRECL\n         AGO   .LOOP3ERR\n.*\n.LOOP3M  ANOP\n         AIF   ('&KEY' EQ 'MACRF').MACRF\n         AIF   ('&KEY' EQ 'MSHI').MSHI\n         AIF   ('&KEY' EQ 'MSWA').MSWA\n         AGO   .LOOP3ERR\n.*\n.LOOP3N  ANOP\n         AIF   ('&KEY' EQ 'NCP').NCP\n         AIF   ('&KEY' EQ 'NTM').NTM\n         AGO   .LOOP3ERR\n.*\n.LOOP3O  ANOP\n         AIF   ('&KEY' EQ 'OPTCD').OPTCD\n         AGO   .LOOP3ERR\n.*\n.LOOP3R  ANOP\n         AIF   ('&KEY' EQ 'RECFM').RECFM\n         AIF   ('&KEY' EQ 'RKP').RKP\n         AGO   .LOOP3ERR\n.*\n.LOOP3S  ANOP\n         AIF   ('&KEY' EQ 'SMSI').SMSI\n         AIF   ('&KEY' EQ 'SMSW').SMSW\n         AIF   ('&KEY' EQ 'SYNAD').SYNAD\n         AGO   .LOOP3ERR\n.*\n.BFALN   ANOP\n&BFALN   SETC  '&VAL'\n         AGO   .LOOP3NX\n.BFTEK   ANOP\n&BFTEK   SETC  '&VAL'\n         AGO   .LOOP3NX\n.BLKSIZE ANOP\n&BLKSIZE SETC  '&VAL'\n         AGO   .LOOP3NX\n.BUFCB   ANOP\n&BUFCB   SETC  '&VAL'\n         AGO   .LOOP3NX\n.BUFOFF  ANOP\n&BUFOFF  SETC  '&VAL'\n         AGO   .LOOP3NX\n.BUFL    ANOP\n&BUFL    SETC  '&VAL'\n         AGO   .LOOP3NX\n.BUFNO   ANOP\n&BUFNO   SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.CYLOFL  ANOP\n&CYLOFL  SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.DCBE    ANOP\n&DCBE    SETC  '&VAL'\n         AGO   .LOOP3NX\n.DDNAME  ANOP\n&DDNAME  SETC  '&VAL'\n         AGO   .LOOP3NX\n.DEVD    ANOP\n&DEVD    SETC  '&VAL'\n         AGO   .LOOP3NX\n.DSORG   ANOP\n&DSORG   SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.EODAD   ANOP\n&EODAD   SETC  '&VAL'\n         AGO   .LOOP3NX\n.EROPT   ANOP\n&EROPT   SETC  '&VAL'\n         AGO   .LOOP3NX\n.EXLST   ANOP\n&EXLST   SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.KEYLEN  ANOP\n&KEYLEN  SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.LIMCT   ANOP\n&LIMCT   SETC  '&VAL'\n         AGO   .LOOP3NX\n.LRECL   ANOP\n&LRECL   SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.MACRF   ANOP\n&MACRF   SETC  '&VAL'\n         AGO   .LOOP3NX\n.MSHI    ANOP\n&MSHI    SETC  '&VAL'\n         AGO   .LOOP3NX\n.MSWA    ANOP\n&MSWA    SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.NCP     ANOP\n&NCP     SETC  '&VAL'\n         AGO   .LOOP3NX\n.NTM     ANOP\n&NTM     SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.OPTCD   ANOP\n&OPTCD   SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.RECFM   ANOP\n&RECFM   SETC  '&VAL'\n         AGO   .LOOP3NX\n.RKP     ANOP\n&RKP     SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.SMSI    ANOP\n&SMSI    SETC  '&VAL'\n         AGO   .LOOP3NX\n.SMSW    ANOP\n&SMSW    SETC  '&VAL'\n         AGO   .LOOP3NX\n.SYNAD   ANOP\n&SYNAD   SETC  '&VAL'\n         AGO   .LOOP3NX\n.*\n.* Go process next entry\n.LOOP3NX ANOP\n&J       SETA  &J+1                    * point next entry\n         AGO   .LOOP3\n.*\n.* Select macro to expand\n.LOOP3OK ANOP\n         AIF   ('&OPC' EQ 'DCB').DCB\n         MNOTE 8,'RDATA &OPC not supported'\n         AGO   .LOOP2\n.*\n.DCB     ANOP\n&LAB     DCB   BFALN=&BFALN,BFTEK=&BFTEK,BLKSIZE=&BLKSIZE,             *\n               BUFCB=&BUFCB,BUFOFF=&BUFOFF,BUFL=&BUFL,BUFNO=&BUFNO,    *\n               CYLOFL=&CYLOFL,DCBE=&DCBE,DDNAME=&DDNAME,DEVD=&DEVD,    *\n               DSORG=&DSORG,EODAD=&EODAD,EROPT=&EROPT,EXLST=&EXLST,    *\n               KEYLEN=&KEYLEN,LIMCT=&LIMCT,LRECL=&LRECL,               *\n               MACRF=&MACRF,MSHI=&MSHI,MSWA=&MSWA,NCP=&NCP,            *\n               NTM=&NTM,OPTCD=&OPTCD,RECFM=&RECFM,RKP=&RKP,            *\n               SMSI=&SMSI,SMSW=&SMSW,SYNAD=&SYNAD\n         AGO   .LOOP2\n.*\n.MEND    MEND\n./ ADD NAME=RWTO     0100-20096-20096-0111-00118-00118-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* WTO with remote text\n.*\n&LABEL   RWTO  &TEXT                   * Text for WTO\n.*\n.* &LABEL specifies an optional label\n.* &TEXT  specifies the text for the WTO. Must specify one of the\n.*        following:\n.*        - Literal text, enclosed in apostrophes\n.*        - Fieldname of the field containing the parmlist (MAPWTOPL)\n.*        - (reg) pointing to the parmlist (MAPWTOPL)\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC RWTO                   * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Define variables\n         GBLA  &BXA_NUMVAL             * Result from CHKREG\n         LCLC  &RLBL                   * Remote label\n         LCLC  &_REG                   * Register to plist\n.*\n.* Check TEXT parameter\n         AIF   (K'&TEXT EQ 0).ERR1A    *\n         AIF   ('&TEXT'(1,1) NE '(').NOERR1\n&_REG    SETC  '&TEXT(1)'              *\n         CHKREG &_REG,g                * Valid GPR?\n         AIF   (&BXA_RC GT 4).ERR1B    *\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'Missing text for WTO'\n         MEXIT\n.ERR1B   MNOTE 8,'&_REG is not a valid general purpose register'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check nr of arguments\n         AIF   (N'&SYSLIST EQ 1).NOERR2\n.ERR2A   MNOTE 4,'Expected only 1 argument: remainder ignored'\n.NOERR2  ANOP\n.*\n.* Generate code\n         AIF   ('&TEXT'(1,1) EQ '''').GENLIT\n         AIF   ('&TEXT'(1,1) EQ '(').GENREG\n         AGO   .GENLOC                 *\n.*\n.GENLIT  ANOP  ,                       * Generate for literal argument\n&RLBL    SETC  'RWTO&SYSNDX'           *\n&RLBL    RDATA WTO,&TEXT               * Define message text (remote)\n&LABEL   L     R1,=AL4(&RLBL)          * Point remote plist\n         AGO   .WTO                    *\n.*\n.GENREG  ANOP  ,                       * Generate for register argument\n&LABEL   CPY   R1,&_REG,NOWARN         * Point remote plist\n         AGO   .WTO                    *\n.*\n.GENLOC  ANOP  ,                       * Generate for location argument\n&LABEL   LA    R1,&TEXT                * Point remote plist\n.*\n.WTO     ANOP  ,                       *\n         SVC   35                      * Issue WTO\n.*\n.MEND    MEND\n./ ADD NAME=SET      0100-20096-20096-0111-00189-00189-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Turn on a value in a code field\n.*\n&LABEL   SET   &CODE                   * Name of code to be SET\n.*                                     * More codes are in SYSLIST\n.*\n.* Alternative syntax: SET field1,field2\n.*\n.* &CODE specifies the name of a DCL-declared code value. Any number of\n.*       arguments may follow, but they all have to be DCL-declared\n.*       value names too.\n.* fld1  Name of an A-type or V-type field\n.* fld2  Name of a field, or a register\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC SET                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_NUMVAL             * Retvalue from CHKREG\n         LCLC  &_LABEL                 * Copy of &LABEL\n         LCLA  &I                      * Index for SYSLIST\n         LCLA  &J                      * Pointer to period in &ARG\n         LCLC  &ARG                    * 1 argument from SYSLIST\n         LCLC  &_LOC                   * Current location\n.*\n.* Check the LABEL parameter\n&_LABEL  SETC  '&LABEL'                *\n.*\n.* Check the CODE parameter\n         AIF   (K'&CODE NE 0).NOERR1   *\n.ERR1A   MNOTE 8,'Missing argument(s)' *\n         MEXIT ,                       *\n.NOERR1  ANOP  ,                       *\n.*\n.* Check field type to determine syntax type\n         AIF   (T'&CODE EQ 'v').SYNTAX1 * Ok: process code value names\n.*\n.* CODE parameter must be of type A, V, or R\n         AIF   (T'&CODE EQ 'A').NOERR3  *\n         AIF   (T'&CODE EQ 'V').NOERR3  *\n         AIF   (T'&CODE EQ 'R').NOERR3A *\n.ERR3A   MNOTE 8,'Cannot SET &CODE: field type not supported'\n         MEXIT ,\n.NOERR3A ANOP  ,\n         AIF   (L'&CODE EQ 4).NOERR3\n         AIF   (L'&CODE EQ 3).NOERR3\n.ERR3B   MNOTE 8,'Cannot SET &CODE: length must be 3 or 4 bytes'\n         MEXIT ,\n.NOERR3  ANOP  ,\n.*\n.* Check second argument\n&ARG     SETC  '&SYSLIST(2)'           * Extract argument\n         AIF   (K'&ARG NE 0).NOERR4    *\n.ERR4A   MNOTE 8,'Pointed field missing'\n         MEXIT ,                       *\n.NOERR4  ANOP  ,                       *\n.*\n.* Check nr of arguments\n         AIF   (N'&SYSLIST LE 2).NOERR5\n.ERR5A   MNOTE 4,'More than 2 arguments: remainder ignored'\n         MEXIT ,                       *\n.NOERR5  ANOP  ,                       *\n.*\n.* Obtain ptr to &ARG\n         CHKREG &ARG,g                 * Is this a valid register?\n         AIF   (&BXA_RC EQ 0).SAVARG   *\n&_LABEL  LA    R0,&ARG                 * Obtain pointer\n&_LABEL  SETC  ''                      * Wipe label after use\n&ARG     SETC  'R0'                    * Pointer now in R0\n.*\n.* Save pointer in &ARG into &CODE field\n.SAVARG  ANOP  ,                       *\n         AIF   (T'&CODE EQ 'A').SAVST  *\n         AIF   (T'&CODE EQ 'V').SAVST  *\n.* Must be type R: unaligned, explicit length\n         AIF   (L'&CODE EQ 3).SAVST3   *\n         AIF   (L'&CODE EQ 4).SAVST4   *\n         MNOTE 12,'Internal error'     *\n         MEXIT ,                       *\n.*\n.* Store pointer into field\n.SAVST   ANOP  ,                       *\n&_LABEL  ST    &ARG,&CODE              * Set up pointer\n         MEXIT ,                       *\n.*\n.SAVST3  ANOP  ,                       *\n&_LABEL  STCM  &ARG,NYYY,&CODE         * Set up 24-bit pointer\n         MEXIT ,                       *\n.*\n.SAVST4  ANOP  ,                       *\n&_LABEL  STCM  &ARG,YYYY,&CODE         * Set up 31-bit pointer\n         MEXIT ,                       *\n.*\n.* Handling of syntax 1: any number of value-names\n.*\n.SYNTAX1 ANOP  ,                       *\n.*\n.* Loop to process all arguments given\n&I       SETA  0                       * I indexes into SYSLIST\n.LOOP1   ANOP  ,                       * Loop thru syslist\n&I       SETA  &I+1                    * Point next argument\n         AIF   (&I GT N'&SYSLIST).LOOP1OK *\n&ARG     SETC  '&SYSLIST(&I)'          * Extract argument\n.* &ARG is a valid code name?\n         AIF   (K'&ARG EQ 0).LOOP1     * Omitted argument: skip\n         AIF   (T'&ARG NE 'v').ERR2A   * Not a code value\n&J       SETA  ('&ARG' INDEX '.')      * Search for a period\n         AIF   (&J EQ 0).LOOP1NP       * Unqualified name\n&_LOC    SETC  '&ARG'(1,&J-1).'.'      * Extract USING name from ARG\n&ARG     SETC  '&ARG'(&J+1,*)          * Extract code value name\n.LOOP1NP ANOP  ,                       *\n         GBLC  &(BXA_BITF_&ARG)        * Declare code location variable\n&_LOC    SETC  '&_LOC'.'&(BXA_BITF_&ARG)' * Create location name\n&J       SETA  L'&_LOC                 * Determine length of field\n         AIF   (&J EQ 1).LOOP1MI       * 1 byte: use Move Immediate\n&_LABEL  MVC   &_LOC,=AL&J.(&ARG)      * Set field to desired value\n&_LABEL  SETC  ''                      * Wipe label after use\n         AGO   .LOOP1                  * And go process next arg\n.LOOP1MI ANOP  ,                       *\n&_LABEL  MVI   &_LOC,&ARG              * Set field to desired value\n&_LABEL  SETC  ''                      * Wipe label after use\n         AGO   .LOOP1                  * And go process next arg\n.ERR2A   ANOP  ,                       *\n&ARG     SETC  (DOUBLE '&ARG')         *\n         MNOTE 8,'&ARG is not a DCL declared code value: skipped'\n         AGO   .LOOP1                  *\n.LOOP1OK ANOP  ,                       *\n         AIF   (K'&_LABEL EQ 0).MEND   * Label has been generated?\n&_LABEL  LABEL ,                       * No: do so now\n.*\n.MEND    MEND\n./ ADD NAME=SETMODE  0100-20096-20096-0111-00287-00287-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Turn off a bit in a bit-field\n.*\n&LABEL   SETMODE &MODE,                * Mode indicator                *\n               &OPTION,                * Option indicator              *\n               &KEY=,                  * Desired storage key           *\n               &SAVE=                  * (reg) to save current PSW key\n.*\n.* &MODE   specifies the desired mode. Valid values are:\n.*       - SUP    to switch to supervisor mode\n.*       - PROB   to switch to problem program mode\n.*       - AR     to switch to access register mode\n.*       - PRIM   to switch to primary mode\n.*       - PSWKEY to change the current PSW key\n.*       - SMC    to switch to step-must-complete status\n.*       - NOSMC  to cancel step-must-complete status\n.* &OPTION specifies an option for the specified MODE. Valid are:\n.*       - PSWKEY,SAVE to save the PSW key in R2\n.*       - PSWKEY,RESET to reset the PSW key to its former value\n.* &KEY    specifies the desired storage key. Used with SUP/PROB/PSWKEY\n.*         For SUP the default is ZERO, for PROB the default is NZERO.\n.*         For PSWKEY there is no default.\n.* &SAVE   Specifies a (reg) which must contain the current PSW key\n.*         Used with PSWKEY and SUP\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC SETMODE                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declarations\n         GBLC  &BXA_SETMODE_SAVE       * Register with saved PSW key\n         GBLB  &BXA_SETMODE            * On if SETMODE expanded before\n         GBLB  &BXA_SVCMODE            * On when in supervisor mode\n         GBLC  &SYSASCE                * Used by SYSSTATE\n.*\n         LCLC  &_KEY\n         LCLC  &_SAVE\n         LCLC  &_MODE\n         LCLC  &_ASCE                  * Local copy of &SYSASCE\n.*\n.* Check the MODE parameter\n         AIF   (K'&MODE EQ 0 AND K'&KEY NE 0).ERR1DFT\n&_MODE   SETC  '&MODE'                 * Copy supplied MODE value\n         AIF   (K'&MODE EQ 0).ERR1A\n         AIF   ('&MODE' EQ 'SUP').NOERR1\n         AIF   ('&MODE' EQ 'PROB').NOERR1\n         AIF   ('&MODE' EQ 'AR').NOERR1\n         AIF   ('&MODE' EQ 'PRIM').NOERR1\n         AIF   ('&MODE' EQ 'PSWKEY').NOERR1\n         AIF   ('&MODE' EQ 'SMC').NOERR1\n         AIF   ('&MODE' EQ 'NOSMC').NOERR1\n         AGO   .ERR1B\n.ERR1A   MNOTE 8,'First positional parameter must specify desired mode'\n         MEXIT\n.ERR1B   MNOTE 8,'Unknown mode specified on first positional parameter'\n         MEXIT\n.ERR1DFT ANOP\n&_MODE   SETC  'PSWKEY'                * Supply default for KEY=\n.NOERR1  ANOP\n.*\n.* Check the KEY parameter\n         AIF   (K'&KEY EQ 0 AND '&_MODE' EQ 'PSWKEY' AND '&OPTION' NE '*\n               RESET').ERR2B\n         AIF   (K'&KEY EQ 0).NOERR2\n         AIF   ('&_MODE' NE 'SUP' AND '&_MODE' NE 'PROB' AND '&_MODE' N*\n               E 'PSWKEY').ERR2A\n&_KEY    SETC  '&KEY'\n         AGO   .NOERR2\n.ERR2A   MNOTE 4,'KEY parameter ignored: valid only with SUP, PROB, or *\n               PSWKEY'\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'Key parameter missing: required with PSWKEY'\n.NOERR2  ANOP\n.*\n.* Check the SAVE parameter\n         AIF   (K'&SAVE EQ 0).NOERR3\n         AIF   ('&_MODE' NE 'PSWKEY' AND '&_MODE' NE 'SUP').ERR3A\n         AIF   ('&SAVE'(1,1) NE '(').ERR3B\n&_SAVE   SETC  '&SAVE(1)'\n         AGO   .NOERR3\n.ERR3A   MNOTE 4,'SAVE parameter ignored: valid only with PSWKEY/SUP'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'SAVE parameter must specify a (register)'\n.NOERR3  ANOP\n.*\n.* Check the OPTION parameter\n         AIF   (K'&OPTION EQ 0).NOERR4\n         AIF   ('&OPTION' NE 'RESET' AND '&OPTION' NE 'SAVE').ERR4A\n         AIF   ('&OPTION' EQ 'RESET' AND '&_MODE' NE 'PSWKEY').ERR4B\n         AIF   ('&OPTION' EQ 'SAVE' AND '&_MODE' NE 'PSWKEY' AND '&_MOD*\n               E' NE 'SUP').ERR4B\n         AIF   ('&OPTION' EQ 'RESET' AND K'&SAVE NE 0).ERR4C\n         AIF   ('&OPTION' EQ 'RESET' AND '&BXA_SETMODE_SAVE' EQ '').ERR*\n               4D\n         AGO   .NOERR4\n.ERR4A   MNOTE 8,'Second positional parameter must be omitted or ''RESE*\n               T'' or ''SAVE'''\n         AGO   .NOERR4\n.ERR4B   MNOTE 4,'&OPTION ignored: not valid with &_MODE'\n         AGO   .NOERR4\n.ERR4C   MNOTE 4,'SAVE-parameter must not be specified for PSWKEY,RESET*\n               : ignored'\n         AGO   .NOERR4\n.ERR4D   MNOTE 8,'Cannot RESET: previous operation did not SAVE'\n.NOERR4  ANOP\n.*\n.* Define sub-macro SAVE_PSWKEY\n         SETMODE0 ,                    * Define inner macro\n.*\n.* Select the correct expansion\n         AIF   ('&_MODE' EQ 'SUP').SUP\n         AIF   ('&_MODE' EQ 'PROB').PROB\n         AIF   ('&_MODE' EQ 'AR').AR\n         AIF   ('&_MODE' EQ 'PRIM').PRIM\n         AIF   ('&_MODE' EQ 'PSWKEY').PSWKEY\n         AIF   ('&_MODE' EQ 'SMC').SMC\n         AIF   ('&_MODE' EQ 'NOSMC').NOSMC\n         MNOTE 12,'Internal error'\n         MEXIT\n.*\n.* Switch to supervisor mode\n.SUP     ANOP\n         AIF   (K'&KEY NE 0).SUPKEY    * If key parm not specified\n&_KEY    SETC  'ZERO'                  * Use default\n.SUPKEY  ANOP\n         AIF   (NOT &BXA_SVCMODE).SUPNMSG\n         MNOTE 4,'You are in supervisor mode. Why switch to it?'\n.SUPNMSG ANOP\n.*\n.* Generate code\n&LABEL   LABEL\n&BXA_SETMODE_SAVE SETC ''              * Reset saved-pswkey register\n         AIF   ('&OPTION' EQ 'SAVE').SUPSAVE\n         AIF   (K'&SAVE NE 0).SUPSAVE\n         AGO   .SUPNSAV\n.SUPSAVE ANOP\n         SAVE_PSWKEY &_SAVE            * Insert current PSW key in reg\n.SUPNSAV ANOP\n&_ASCE   SETC  '&SYSASCE'              * Copy current ASC AR mode\n         AIF   ('&_ASCE' EQ 'P').SUPGO * Primary: ok issue MODESET\n         SETMODE PRIM                  * Switch to primary mode, then\n.SUPGO   ANOP\n         MODESET MODE=SUP,             * Switch to supervisor mode     *\n               KEY=&_KEY               *\n         AIF   ('&_ASCE' EQ 'P').SUPOK * Primary: ok terminate\n         SETMODE AR                    * And back again to primary mode\n.SUPOK   ANOP\n&BXA_SVCMODE SETB 1                    * Signal we're in SVC mode\n         MEXIT\n.*\n.* Switch to problem program mode\n.PROB    ANOP\n         AIF   (K'&KEY NE 0).PRBKEY    * If key parm not specified\n&_KEY    SETC  'NZERO'                 * Use default\n.PRBKEY  ANOP\n         AIF   (&BXA_SVCMODE).PRBNMSG\n         MNOTE 4,'You are in problem mode. Why switch to it?'\n.PRBNMSG ANOP\n.* Generate code\n&LABEL   LABEL\n&_ASCE   SETC  '&SYSASCE'              * Copy current ASC AR mode\n         AIF   ('&_ASCE' EQ 'P').PRBGO * Primary: ok issue MODESET\n         SETMODE PRIM                  * Switch to primary mode, then\n.PRBGO   ANOP\n         MODESET MODE=PROB,            * Switch to problem mode        *\n               KEY=&_KEY               *\n         AIF   ('&_ASCE' EQ 'P').PRBOK * Primary: ok terminate\n         SETMODE AR                    * And back again to primary mode\n.PRBOK   ANOP\n&BXA_SVCMODE SETB 0                    * Signal we're in problem mode\n&BXA_SETMODE_SAVE SETC ''              * Reset saved-pswkey register\n         MEXIT\n.*\n.* Switch to ASC AR mode (Access Register mode)\n.AR      ANOP\n         AIF   ('&SYSASCE' NE 'AR').ARNMSG\n         MNOTE 4,'You are in ASC AR mode. Why switch to it?'\n.ARNMSG  ANOP\n         SAC   512                     * Switch to AR mode\n         SYSSTATE ASCENV=AR            * Signal we're in AR mode\n         MEXIT\n.*\n.* Switch to Primary mode (Non-Access Register mode)\n.PRIM    ANOP\n         AIF   ('&SYSASCE' NE 'P').PRMNMSG\n         MNOTE 4,'You are in primary mode. Why switch to it?'\n.PRMNMSG ANOP\n         SAC   0                       * Switch to primary mode\n         SYSSTATE ASCENV=P             * Signal we're in primary mode\n         MEXIT\n.*\n.* Set new PSW key\n.PSWKEY  ANOP\n&LABEL   LABEL\n         AIF   ('&OPTION' EQ 'RESET').PSWRESET\n&BXA_SETMODE_SAVE SETC ''              * Reset saved-pswkey register\n         AIF   ('&OPTION' EQ 'SAVE').PSWSAVE\n         AIF   (K'&SAVE NE 0).PSWSAVE\n         AGO   .PSWNSAV\n.PSWSAVE ANOP\n         SAVE_PSWKEY &_SAVE            * Insert current PSW key in reg\n.PSWNSAV ANOP\n.*\n.* Set new PSW key from literal or from (reg)\n         AIF   ('&KEY'(1,1) NE '(').PSWLIT\n&_KEY    SETC  '&KEY(1)'\n         SPKA  0(&_KEY)                * Set new PSW key value\n         MEXIT\n.*\n.PSWLIT  ANOP\n         SPKA  16*&KEY                 * Set new PSW key value\n         MEXIT\n.*\n.* Reset PSW key to saved value\n.PSWRESET ANOP\n         SPKA  0(&BXA_SETMODE_SAVE)    * Reset PSW key to saved value\n&BXA_SETMODE_SAVE SETC ''              * Reset saved-pswkey register\n         MEXIT\n.*\n.* Set Step-Must-Complete mode\n.SMC     ANOP  ,\n         STATUS SET,MC,PROCESS         * Set step-must-complete status\n         MEXIT\n.*\n.* Reset Step-Must-Complete mode\n.NOSMC   ANOP  ,\n         STATUS RESET,MC,PROCESS       * Cancel SMC status\n         MEXIT\n.*\n.MEND    MEND\n./ ADD NAME=SETMODE0 0100-20096-20096-0111-00082-00082-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Define internal subroutine for SETMODE\n.*\n         SETMODE0 ,                    *\n.*\n.* Declarations\n         GBLB  &BXA_SETMODE            * On if SETMODE expanded before\n.*\n.* Include sub-macro on first invocation\n         AIF   (&BXA_SETMODE).MEND\n&BXA_SETMODE SETB 1                    * Signal macro is defined\n         PUSH  PRINT,NOPRINT\n         PRINT OFF,NOPRINT\n.*\n         MACRO\n         SAVE_PSWKEY &REG              * Register (no parentheses)\n.*\n.* Declare variables\n         GBLC  &BXA_SETMODE_SAVE       * Register with saved psw key\n         LCLC  &_REG                   * &REG or default: R2\n.*\n.* Check REG parameter\n&_REG    SETC  '&REG'                  * Copy specified register\n         AIF   (K'&REG NE 0).NOERR1    * Register was specified?\n&_REG    SETC  'R2'                    * No: apply default\n.NOERR1  ANOP\n.*\n.* Generate code\n         IPK   ,                       * Insert current PSW key in R2\n         AIF   ('&_REG' EQ 'R2').SAVEOK\n         AIF   ('&_REG' EQ 'R02').SAVEOK\n         AIF   ('&_REG' EQ '2').SAVEOK\n         AIF   ('&_REG' EQ '02').SAVEOK\n         LR    &_REG,R2                * Copy PSW key to save register\n.SAVEOK  ANOP\n&BXA_SETMODE_SAVE SETC '&_REG'         * Set saved-pswkey register\n.*\n.MEND    MEND  ,                       * End of internal macro\n         POP   PRINT,NOPRINT\n.*\n.MEND    MEND\n./ ADD NAME=SETOF    0100-20096-20096-0111-00194-00194-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Turn off a bit in a bit-field\n.*\n&LABEL   SETOF &ADR,                   * Address of bit-field          *\n               &MASK                   * Bit field mask\n.*\n.* Syntax 1:\n.* &ADR  specifies the location in storage where the bit-field resides\n.*       must be in offset(register) notation, or a symbolic name.\n.* &MASK specifies which bits are to be turned off\n.*\n.* Syntax 2:\n.* &ADR  specifies the name of a DCL-declared bit. Any number of\n.*       arguments may follow, but they all have to be DCL-declared\n.*       bit names too.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC SETOF                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLB  &BITS                   * On for syntax 2\n         LCLA  &I                      * Index for SYSLIST\n         LCLA  &J                      * Index for BIT and LOC\n         LCLA  &MASKVAL                * Calculated mask value\n         LCLA  &VAL                    * Mask value for any 1 bit\n         LCLC  &ARG                    * 1 argument from SYSLIST\n         LCLC  &ARG1                   * Using label preceding dot\n         LCLC  &ARG2                   * Field name following dot\n         LCLC  &LOC(5)                 * Locations with bits\n         LCLC  &_LOC                   * Current location\n         LCLC  &BIT(5)                 * Bit names\n.*\n.* Check the ADR parameter\n         AIF   (K'&ADR NE 0).NOERR1\n.ERR1A   MNOTE 8,'Missing argument(s)'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* &ADR is a defined bit-field?\n         AIF   (T'&ADR NE 'b').NOTABIT\n&BITS    SETB  1\n.NOTABIT ANOP\n.*\n.* Check the MASK parameter\n         AIF   (&BITS).NOERR2\n         AIF   (K'&MASK NE 0).NOERR2\n.ERR2    MNOTE 8,'Mask of bits to turn off not specified'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* Check nr of parameters\n         AIF   (&BITS).NOERR3\n         AIF   (N'&SYSLIST LE 2).NOERR3\n.ERR3    MNOTE 4,'You cannot specify more than 1 mask with &ADR: remain*\n               der ignored'\n.NOERR3  ANOP\n.*\n.* Generate code for syntax 1\n         AIF   (&BITS).CHKBITS\n&LABEL   NI    &ADR,ALLBITS-&MASK      * Turn bit(s) off\n         MEXIT\n.*\n.* Check all bit-names in &SYSLIST\n.CHKBITS ANOP\n&I       SETA  0                       * I is index to SYSLIST\n.LOOP1   ANOP  ,                       * Loop thru all SYSLIST entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&ARG     SETC  '&SYSLIST(&I)'          * Extract argument\n         AIF   (T'&ARG NE 'b').LOOP1R1 * Wrong type: error 1\n.* Retrieve bit mask value\n&ARG1    SETC  ''                      * Assume no using label in &ARG\n&ARG2    SETC  '&ARG'                  *\n&J       SETA  ('&ARG2' FIND '.')      * Find location of dot\n         AIF   (&J EQ 0).LOOP1ND       * No dot found in arg\n         AIF   (&J EQ 1).LOOP1R3       * Starting dot is an error\n&ARG1    SETC  '&ARG'(1,&J-1)          * Extract using label\n         AIF   (&J EQ K'&ARG).LOOP1R3  * Trailing dot is an error\n&ARG2    SETC  '&ARG'(&J+1,*)          * Extract field name\n.LOOP1ND ANOP  ,                       * ARG2 now contans field name\n         GBLC  &(BXA_BITF_&ARG2)       * Name for byte location\n         AIF   (K'&(BXA_BITF_&ARG2) EQ 0).LOOP1R2 * No location: error\n&BIT(&I) SETC  '&ARG2'                 * Put bit name in table\n&LOC(&I) SETC  '&(BXA_BITF_&ARG2)'     * And byte location too\n         AIF   (K'&ARG1 EQ 0).LOOP1    * Unlabeled: ok\n&LOC(&I) SETC  '&ARG1'.'.&LOC(&I)'     * Prefix with label\n         AGO   .LOOP1\n.*\n.LOOP1R1 ANOP\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not defined as a bit field: ignored'\n         AGO   .LOOP1\n.LOOP1R2 ANOP\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG bit has no known location: ignored'\n         AGO   .LOOP1\n.LOOP1R3 ANOP\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not a valid bitfield name: ignored'\n         AGO   .LOOP1\n.LOOP1OK ANOP\n.*\n.* Validated bit-names and byte locations now in BIT() and LOC()\n.* Empty entries may exist for erroneous operands.\n.* Entries with equal byte locations will be taken together,\n.* and processed entries will be wiped.\n.* Arguments are taken together by ORing their bit masks.\n&LABEL   LABEL ,\n.*\n&I       SETA  0                       * I indexes LOC/BIT\n.LOOP2   ANOP  ,                       * For all entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop\n&_LOC    SETC  '&LOC(&I)'              * Extract byte location\n         AIF   (K'&_LOC EQ 0).LOOP2    * Skip processed records\n&ARG     SETC  '&BIT(&I)'              * Create argument from bit names\n&MASKVAL SETA  L'&BIT(&I)              * Length attrib = mask value!\n.*\n&J       SETA  &I                      * J indexes LOC/BIT (inner loop)\n.LOOP3   ANOP  ,                       * For all remaining entries\n&J       SETA  &J+1                    * Point next entry\n         AIF   (&J GT N'&SYSLIST).LOOP3OK * At end: quit loop\n         AIF   ('&LOC(&J)' NE '&_LOC').LOOP3 * Skip mismatch\n&VAL     SETA  L'&BIT(&J)              * Retrieve mask bit value\n&MASKVAL SETA  (&MASKVAL OR &VAL)      * Take bit masks together\n&ARG     SETC  '&MASKVAL'              * Create completed argument\n&LOC(&J) SETC  ''                      * Wipe entry\n         AGO   .LOOP3\n.LOOP3OK ANOP  ,                       * ARG is now complete\n.*\n.* Generate NI instruction to turn bits off\n         NI    &_LOC,ALLBITS-&ARG      * Turn bit(s) off\n         AGO   .LOOP2\n.LOOP2OK ANOP\n.*\n.MEND    MEND\n./ ADD NAME=SETON    0100-20096-20096-0111-00194-00194-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Turn on a bit in a bit-field\n.*\n&LABEL   SETON &ADR,                   * Address of bit-field          *\n               &MASK                   * Bit field mask\n.*\n.* Syntax 1:\n.* &ADR  specifies the location in storage where the bit-field resides\n.*       must be in offset(register) notation, or a symbolic name.\n.* &MASK specifies which bits are to be turned on\n.*\n.* Syntax 2:\n.* &ADR  specifies the name of a DCL-declared bit. Any number of\n.*       arguments may follow, but they all have to be DCL-declared\n.*       bit names too.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC SETON                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLB  &BITS                   * On for syntax 2\n         LCLA  &I                      * Index for SYSLIST\n         LCLA  &J                      * Index for BIT and LOC\n         LCLA  &MASKVAL                * Calculated mask value\n         LCLA  &VAL                    * Mask value for any one bit\n         LCLC  &ARG                    * 1 argument from SYSLIST\n         LCLC  &ARG1                   * Using label preceding dot\n         LCLC  &ARG2                   * Field name following dot\n         LCLC  &LOC(5)                 * Locations with bits\n         LCLC  &_LOC                   * Current location\n         LCLC  &BIT(5)                 * Bit names\n.*\n.* Check the ADR parameter\n         AIF   (K'&ADR NE 0).NOERR1\n.ERR1A   MNOTE 8,'Missing argument(s)'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* &ADR is a defined bit-field?\n         AIF   (T'&ADR NE 'b').NOTABIT\n&BITS    SETB  1\n.NOTABIT ANOP\n.*\n.* Check the MASK parameter\n         AIF   (&BITS).NOERR2\n         AIF   (K'&MASK NE 0).NOERR2\n.ERR2    MNOTE 8,'Mask of bits to turn on not specified'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* Check nr of parameters\n         AIF   (&BITS).NOERR3\n         AIF   (N'&SYSLIST LE 2).NOERR3\n.ERR3    MNOTE 4,'You cannot specify more than 1 mask with &ADR: remain*\n               der ignored'\n.NOERR3  ANOP\n.*\n.* Generate code for syntax 1\n         AIF   (&BITS).CHKBITS\n&LABEL   OI    &ADR,&MASK              * Turn bit(s) on\n         MEXIT\n.*\n.* Check all bit-names in &SYSLIST\n.CHKBITS ANOP\n&I       SETA  0                       * I is index to SYSLIST\n.LOOP1   ANOP  ,                       * Loop thru all SYSLIST entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&ARG     SETC  '&SYSLIST(&I)'          * Extract argument\n         AIF   (T'&ARG NE 'b').LOOP1R1 * Wrong type: error 1\n.* Retrieve bit mask value\n&ARG1    SETC  ''                      * Assume no using label in &ARG\n&ARG2    SETC  '&ARG'                  *\n&J       SETA  ('&ARG2' FIND '.')      * Find location of dot\n         AIF   (&J EQ 0).LOOP1ND       * No dot found in arg\n         AIF   (&J EQ 1).LOOP1R3       * Starting dot is an error\n&ARG1    SETC  '&ARG'(1,&J-1)          * Extract using label\n         AIF   (&J EQ K'&ARG).LOOP1R3  * Trailing dot is an error\n&ARG2    SETC  '&ARG'(&J+1,*)          * Extract field name\n.LOOP1ND ANOP  ,                       * ARG2 now contans field name\n         GBLC  &(BXA_BITF_&ARG2)       * Name for byte location\n         AIF   (K'&(BXA_BITF_&ARG2) EQ 0).LOOP1R2 * No location: error2\n&BIT(&I) SETC  '&ARG2'                 * Put bit name in table\n&LOC(&I) SETC  '&(BXA_BITF_&ARG2)'     * And byte location too\n         AIF   (K'&ARG1 EQ 0).LOOP1    * Unlabeled: ok\n&LOC(&I) SETC  '&ARG1'.'.&LOC(&I)'     * Prefix with label\n         AGO   .LOOP1                  *\n.*\n.LOOP1R1 ANOP\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not defined as a bit field: ignored'\n         AGO   .LOOP1\n.LOOP1R2 ANOP\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG bit has no known location: ignored'\n         AGO   .LOOP1\n.LOOP1R3 ANOP\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'&ARG is not a valid bitfield name: ignored'\n         AGO   .LOOP1\n.LOOP1OK ANOP\n.*\n.* Validated bit-names and byte locations now in BIT() and LOC()\n.* Empty entries may exist for erroneous operands.\n.* Entries with equal byte locations will be taken together,\n.* and processed entries will be wiped.\n.* Arguments are taken together by ORing their bit masks.\n&LABEL   LABEL ,\n.*\n&I       SETA  0                       * I indexes LOC/BIT\n.LOOP2   ANOP  ,                       * For all entries\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP2OK * At end: quit loop\n&_LOC    SETC  '&LOC(&I)'              * Extract byte location\n         AIF   (K'&_LOC EQ 0).LOOP2    * Skip processed records\n&ARG     SETC  '&BIT(&I)'              * Create argument from bit name\n&MASKVAL SETA  L'&BIT(&I)              * Length attrib = mask value!\n.*\n&J       SETA  &I                      * J indexes LOC/BIT (inner loop)\n.LOOP3   ANOP  ,                       * For all remaining entries\n&J       SETA  &J+1                    * Point next entry\n         AIF   (&J GT N'&SYSLIST).LOOP3OK * At end: quit loop\n         AIF   ('&LOC(&J)' NE '&_LOC').LOOP3 * Skip mismatch\n&VAL     SETA  L'&BIT(&J)              * Retrieve mask bit value\n&MASKVAL SETA  (&MASKVAL OR &VAL)      * Take bit masks together\n&ARG     SETC  '&MASKVAL'              * Create completed argument\n&LOC(&J) SETC  ''                      * Wipe entry\n         AGO   .LOOP3                  *\n.LOOP3OK ANOP  ,                       * ARG is now complete\n.*\n.* Generate OI instruction to turn bits on\n         OI    &_LOC,&ARG\n         AGO   .LOOP2\n.LOOP2OK ANOP\n.*\n.MEND    MEND\n./ ADD NAME=SNAPHDR  0100-20096-20096-0111-00094-00094-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates a header-text for use with STRHDR operand of\n.*  the SNAP macro\n.*\n&LABEL   SNAPHDR &TXT                  * Text for the header\n.*\n.* &LABEL Specifies the label for the text-parameter\n.* &TXT   Specifies the text to be used, enclosed in single quotation\n.*        marks\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC SNAPHDR                * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Check the LABEL parameter\n         AIF   (K'&LABEL EQ 0).ERR1A\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'Label parameter not specified'\n.NOERR1  ANOP\n.*\n.* Check the TXT parameter\n         AIF   (K'&TXT EQ 0).ERR2A\n         AIF   (K'&TXT LT 3).ERR2B\n         AIF   ('&TXT'(1,1) NE '''').ERR2B\n         AIF   ('&TXT'(N'&TXT,1) NE '''').ERR2B\n         AGO   .NOERR2\n.ERR2A   MNOTE 8,'TXT parameter not specified'\n         MEXIT\n.ERR2B   MNOTE 8,'TXT parameter not properly enclosed in quotes'\n.NOERR2  ANOP\n.*\n.* Generate header text constant\n&LABEL   DC    AL1(_HDR&SYSNDX-1)      * Length of text header\n         DC    C&TXT                   * Text of SNAP header\n_HDR&SYSNDX EQU *-&LABEL\n.*\n.MEND    MEND\n./ ADD NAME=SNAPNTRY 0100-20096-20096-0111-00242-00242-00000-BIXSMAC 35\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates entries in the STORAGE and STRHDR lists and is\n.*  intended for use with BXADBG00 only.\n.* It is required that the calling program include the MAPSNAP macro.\n.* There must be an active USING SNAPLIST,R2\n.*           and an active USING SNAPHLIST,R3\n.*\n&LABEL   SNAPNTRY &ADR,                * Starting address or (reg)     *\n               &LEN=,                  * Length or (reg)               *\n               &END=,                  * (reg)                         *\n               &HDR=                   * Address of header or (reg)\n.*\n.* &ADR   Specifies the starting address of a storage area to be dumped\n.* &LEN   Specifies the length of the storage area to be dumped\n.* &END   Specifies a register contining the end-address\n.* &HDR   Specifies the address of the header for the storage area dump\n.*        or specifies a the header, enclosed in single quotes\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC SNAPNTRY               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_USELBL(50)         * Using labels ...\n         GBLA  &BXA_USEREG(50)         *   and their register indexes\n         GBLC  &BXA_USEFLD(50)         *   and associated base fields\n         GBLA  &BXA_USENDX0(5)         * Index into &BXA_USELBL/USEREG\n         GBLA  &BXA_USENDX1(5)         * Index into &BXA_USELBL/USEREG\n         GBLA  &BXA_USENDX             * Index into &BXA_USENDX1\n         LCLA  &N                      * Index for BXA_USE...\n         LCLC  &REG                    * Register name\n         GBLC  &BXA_RD_RETVAL          * label of dup.data\n         LCLC  &LAB                    * Label to use for RDATA tables\n.*\n.* Check the ADR parameter\n         AIF   (K'&ADR EQ 0).ERR1A\n         AIF   ('&ADR'(1,1) NE '(').NOERR1\n         AIF   (N'&ADR EQ 0).ERR1B\n         AIF   (N'&ADR GT 1).ERR1C\n         AGO   .NOERR1\n.ERR1A   MNOTE 8,'ADR parameter not specified'\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'ADR parameter contains no registers in sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'ADR parameter contains more than 1 register in sublis*\n               t'\n.NOERR1  ANOP\n.*\n.* Check the LEN parameter\n         AIF   (K'&LEN EQ 0).NOERR2\n         AIF   ('&LEN'(1,1) NE '(').NOERR2\n         AIF   (N'&LEN EQ 0).ERR2B\n         AIF   (N'&LEN GT 1).ERR2C\n         AGO   .NOERR2\n.ERR2B   MNOTE 8,'LEN parameter contains no registers in sublist'\n         AGO   .NOERR2\n.ERR2C   MNOTE 8,'LEN parameter contains more than 1 register in sublis*\n               t'\n.NOERR2  ANOP\n.*\n.* Check the HDR parameter\n         AIF   (K'&HDR EQ 0).ERR3A\n         AIF   ('&HDR'(1,1) EQ '(' AND N'&HDR EQ 0).ERR3B\n         AIF   ('&HDR'(1,1) EQ '(' AND N'&HDR GT 1).ERR3C\n         AIF   ('&HDR'(1,1) EQ '''' AND '&HDR'(K'&HDR,1) NE '''').ERR3D\n         AIF   ('&HDR'(1,1) NE '''' AND '&HDR'(K'&HDR,1) EQ '''').ERR3D\n         AGO   .NOERR3\n.ERR3A   MNOTE 8,'HDR parameter not specified'\n         AGO   .NOERR3\n.ERR3B   MNOTE 8,'HDR parameter contains no registers in sublist'\n         AGO   .NOERR3\n.ERR3C   MNOTE 8,'HDR parameter contains more than 1 register in sublis*\n               t'\n         AGO   .NOERR3\n.ERR3D   MNOTE 8,'HDR parameter not properly enclosed in parmaeters'\n.NOERR3  ANOP\n.*\n.* Check the END parameter\n         AIF   (K'&END EQ 0).NOERR4\n         AIF   ('&END'(1,1) NE '(').ERR4A\n         AIF   (N'&END EQ 0).ERR4B\n         AIF   (N'&END GT 1).ERR4C\n         AGO   .NOERR4\n.ERR4A   MNOTE 8,'END parameter must specify a (reg)'\n         AGO   .NOERR4\n.ERR4B   MNOTE 8,'END parameter contains no registers in sublist'\n         AGO   .NOERR4\n.ERR4C   MNOTE 8,'END parameter contains more than 1 register in sublis*\n               t'\n.NOERR4  ANOP\n.*\n.* LEN and END are mutually exclusive, 1 must be specified\n         AIF   (K'&LEN EQ 0 AND K'&END EQ 0).ERR5A\n         AIF   (K'&LEN NE 0 AND K'&END NE 0).ERR5B\n         AGO   .NOERR5\n.ERR5A   MNOTE 8,'Either LEN or END parameter must be specified'\n         AGO   .NOERR5\n.ERR5B   MNOTE 8,'Cannot specify both LEN and END parameters'\n.NOERR5  ANOP\n.*\n.* Generate start address or use (reg)\n         AIF   ('&ADR'(1,1) EQ '(').ADR_REG\n&LABEL   LA    R1,&ADR                 * Get start-address\n         ST    R1,SNAPFROM             *  and put into list\n         AGO   .ADR_OK\n.ADR_REG ANOP\n&LABEL   ST    &ADR(1),SNAPFROM        * Put pointer into list\n         LR    R1,&ADR(1)              * Copy ptr to calculate end addr\n.ADR_OK  ANOP\n.*\n.* Generate end address or use (reg)\n         AIF   (K'&LEN NE 0).USELEN\n         ST    &END(1),SNAPTO          * Put end-address into snaplist\n         AGO   .ENDOK\n.*\n.USELEN  ANOP\n         AIF   ('&LEN'(1,1) EQ '(').ENDR\n         INC   R1,&LEN-1\n         AGO   .ENDST\n.ENDR    ANOP\n         INC   R1,&LEN                 * Address area + 1\n         DEC   R1                      * Decrement to point to end-byte\n.ENDST   ANOP\n         ST    R1,SNAPTO               *  and put into list\n.ENDOK   ANOP\n.*\n.* Find pointer to SNAPLIST entry\n&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Get pointer to first entry\n.LOOP1   ANOP  ,                       * Search current part of tables\n&N       SETA  &N+1                    * Point next entry\n         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP1NF\n         AIF   ('&BXA_USEFLD(&N)' NE 'SNAPLIST').LOOP1\n&N       SETA  &BXA_USEREG(&N)-1       * Create reg.nr from index\n&REG     SETC  'R&N'                   * Set up register name\n         AGO   .LOOP1OK                * Quit loop\n.LOOP1NF ANOP  ,\n         MNOTE 8,'No USING established for SNAPLIST'\n         MEXIT ,\n.LOOP1OK ANOP  ,\n.*\n.* Increment pointer for list\n         INC   &REG,SNAPLIST_LEN       * Point to next free entry\n.*\n.* Generate header address or use (reg)\n         AIF   ('&HDR'(1,1) EQ '(').HDR_REG\n         AIF   ('&HDR'(1,1) EQ '''').HDR_TXT\n         L     R1,=AL4(&HDR)           * Get start-address\n         ST    R1,SNAPHPTR             *  and put into list\n         AGO   .HDR_OK\n.HDR_REG ANOP\n         ST    &HDR(1),SNAPHPTR        * Put pointer into list\n         AGO   .HDR_OK\n.HDR_TXT ANOP\n.* The header-text will be defined using RDATA. If RDATA finds a\n.* duplicate entry, it will replace that entry with an EQU. If this\n.* is the case, we will use the original label. Since all remote data\n.* is accessed thru an AL4(..)-literal this saves on literal pool size.\n&LAB     SETC  '_HDR&SYSNDX'           * Label for the remote header\n&LAB     RDATA SNAPHDR,&HDR,           * Define the header text        *\n               RD_MODE=COND            *   unless pre-allocated\n         AIF   (K'&BXA_RD_RETVAL EQ 0).LABOK * No duplicate: keep &LAB\n&LAB     SETC  '&BXA_RD_RETVAL'        * Duplicate: use actual label\n.LABOK   ANOP\n         L     R1,=AL4(&LAB)           * Get start-address\n         ST    R1,SNAPHPTR             *  and put into list\n.HDR_OK  ANOP\n.*\n.* Find pointer to SNAPHLIST entry\n&N       SETA  &BXA_USENDX0(&BXA_USENDX) * Get pointer to first entry\n.LOOP2   ANOP  ,                       * Search current part of tables\n&N       SETA  &N+1                    * Point next entry\n         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP2NF\n         AIF   ('&BXA_USEFLD(&N)' NE 'SNAPHLIST').LOOP2\n&N       SETA  &BXA_USEREG(&N)-1       * Create reg.nr from index\n&REG     SETC  'R&N'                   * Set up register name\n         AGO   .LOOP2OK                * Quit loop\n.LOOP2NF ANOP  ,\n         MNOTE 8,'No USING established for SNAPHLIST'\n         MEXIT ,\n.LOOP2OK ANOP  ,\n.*\n.* Increment pointer for header-list\n         INC   &REG,SNAPHLIST_LEN      * Point to next free entry\n.*\n.MEND    MEND\n./ ADD NAME=SPACE    0100-20096-20096-0112-00100-00100-00000-BIXSMAC 25\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's SPACE statement\n.*\n&LABEL   SPACE ,                       * Arguments in SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC SPACE                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLA  &I                      * Index into &SYSLIST\n         LCLC  &ARG                    * 1 Argument from SYSLIST\n         LCLC  &ARGS                   * Arguments from SYSLIST\n.*\n.* Check LABEL parameter\n         AIF   (K'&LABEL EQ 0).NOERR1\n         AIF   (&SYSNEST GT 1).NOERR1\n.ERR1A   MNOTE 4,'No label parameter allowed with SPACE: label ignored'\n.NOERR1  ANOP\n.*\n.* Build ARGS from &SYSLIST\n&I       SETA  0                       * I indexes &SYSLIST\n.LOOP1   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n         AIF   (K'&ARG GT 0 AND &I GT 1).ERR2A\n&ARG     SETC  '&SYSLIST(&I)'          * Extract 1 argument\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AGO   .LOOP1\n.ERR2A   MNOTE 4,'Only 1 argument allowed on SPACE: remainder ignored'\n.LOOP1OK ANOP\n         AIF   (K'&ARGS LT 2).ARGSOK\n&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma\n.ARGSOK  ANOP\n.*\n.* Generate _SPACE statement\n         AIF   (K'&ARGS EQ 0).NOARGS\n         _SPACE &ARGS\n         MEXIT\n.*\n.NOARGS  ANOP\n         _SPACE\n.*\n.MEND    MEND\n./ ADD NAME=SPLIT    0100-20096-20096-0112-00163-00163-00000-BIXSMAC 25\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro splits a parameter string in its constituent parts\n.*\n.* The number of parameters found is returned in BXA_NUMVAL\n.* The parameters are returned in BXA_PRM(n)\n.*\n&LABEL   SPLIT &INPUT                  * Parameter to be split\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC SPLIT                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLC  &BXA_PRM(3)             * Output parameters\n         GBLA  &BXA_NUMVAL             * Nr of parameters found\n         LCLC  &IN                     * Copy of INPUT\n         LCLC  &C                      * Single character from input\n         LCLC  &PRM(3)                 * Parameters found\n         LCLA  &P                      * Index for BXA_PRM\n         LCLA  &I,&J                   * Work var.\n         LCLA  &PAR                    * Nr of parentheses levels\n         LCLA  &COMMA                  * Comma location\n         LCLB  &STRING                 * On if scanning within quotes\n.*\n.* Input string is empty?\n         AIF   (K'&INPUT LE 0).EXIT    * Skip all if input empty\n.*\n.* Remove leading blanks\n&IN      SETC  '&INPUT'                * Copy input string\n.LOOP0   ANOP  ,                       *\n         AIF   ('&IN'(1,1) NE ' ').LOOP0OK\n         AIF   (K'&IN LE 1).EXIT       * Skip all if nothing remains\n&IN      SETC  '&IN'(2,*)              * Remove leading blank\n         AGO   .LOOP0                  *\n.LOOP0OK ANOP  ,                       *\n.*\n.* Remove trailing commas\n.LOOP1   ANOP  ,                       *\n         AIF   ('&IN'(K'&IN,1) NE ',').LOOP1OK\n         AIF   (K'&IN LE 1).EXIT       * Skip all if nothing remains\n&IN      SETC  '&IN'(1,K'&IN-1)        * Remove trailing comma\n         AGO   .LOOP1                  *\n.LOOP1OK ANOP  ,                       *\n.*\n.* Arguments are passed as a single string without trailing commas.\n.* Decompose the INPUT field in its constituent parameters.\n.* Discard trailing comments - if any.\n&P       SETA  1                       * First output string is target\n.LOOP2   ANOP  ,                       * Search next character\n&I       SETA  ('&IN' FIND '(, '')')   * Locate comma or parenthesis\n         AIF   (&I EQ 0).LOOP2ND       * End: go copy remainder\n&C       SETC  '&IN'(&I,1)             * Extract character found\n         AIF   ('&C' EQ '''').LOOP2QU  * Quote\n         AIF   (&STRING).LOOP2CP       * Within string: just copy\n         AIF   ('&C' EQ '(').LOOP2LP   * Left Parenthesis\n         AIF   ('&C' EQ ')').LOOP2RP   * Right Parenthesis\n         AIF   ('&C' EQ ' ').LOOP2SP   * Space\n.* Must be a comma: check parentheses level\n         AIF   (&PAR GT 0).LOOP2CP     * Within parentheses: copy\n         AIF   (&I EQ 1).LOOP2C1       * Leading comma?\n&PRM(&P) SETC  '&PRM(&P)'.'&IN'(1,&I-1) * Up to & excluding comma\n.LOOP2C1 ANOP  ,                       *\n&IN      SETC  '&IN'(&I+1,*)           * Remainder remains in IN\n&P       SETA  &P+1                    * Point next parameter\n         AGO   .LOOP2                  *\n.*\n.LOOP2LP ANOP  ,                       * Found Left Parenthesis\n&PAR     SETA  &PAR+1                  * Increment parenthesis level\n         AGO   .LOOP2CP                * Go copy up to parenthesis\n.LOOP2RP ANOP  ,                       * Found Right Parenthesis\n&PAR     SETA  &PAR-1                  * Increment parenthesis level\n         AGO   .LOOP2CP                * Go copy up to parenthesis\n.LOOP2SP ANOP  ,                       * Found a space\n&IN      SETC  '&IN'(1,&I-1)           * Discard all comments\n         AGO   .LOOP2ND                * Go copy remainder\n.LOOP2QU ANOP  ,                       * Found a quote\n&STRING  SETB  (&STRING XOR 1)         * Flip String status\n         AGO   .LOOP2CP                * Go copy up to quote\n.LOOP2CP ANOP  ,                       * Copy part of input\n         AIF   (&I GE K'&IN).LOOP2ND   * Copy up to end of string?\n&PRM(&P) SETC  '&PRM(&P)'.'&IN'(1,&I)  * Up to & including delimiter\n&IN      SETC  '&IN'(&I+1,*)           * Remainder remains in IN\n         AGO   .LOOP2                  *\n.LOOP2ND ANOP  ,                       *\n&PRM(&P) SETC  '&PRM(&P)'.'&IN'        * Copy remainder of input\n.*\n.* Copy results to global variables\n.EXIT    ANOP  ,                       *\n&BXA_NUMVAL SETA &P                    * Nr of parms found\n&I       SETA  0                       * Index for BXA_PRM\n.LOOP3   ANOP  ,                       *\n&I       SETA  &I+1                    * Point next parm\n         AIF   (&I GT &P).LOOP3OK      * End-of-parmlist?\n&BXA_PRM(&I) SETC '&PRM(&I)'           * Copy parameter\n         AGO   .LOOP3                  *\n.LOOP3OK ANOP  ,                       *\n.*\n.* Wipe any remaining entries in BXA_PRM\n&I       SETA  &P                      * Point last valid\n.LOOP4   ANOP  ,                       *\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&BXA_PRM).LOOP4OK * End-of-table?\n&BXA_PRM(&I) SETC ''                   * Wipe parameter\n         AGO   .LOOP4                  *\n.LOOP4OK ANOP  ,                       *\n.*\n.MEND    MEND\n./ ADD NAME=STA24    0100-20096-20096-0112-00108-00108-00000-BIXSMAC 25\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* Store a 24-bit address from a register into memory\n.*\n&LABEL   STA24 &REG,                   * Register to store             *\n               &LOC,                   * Location of address           *\n               &MASK                   * Mask for STCM (default=YNNN)\n.*\n.* &REG  specifies the register to load\n.* &LOC  specifies the location of the address to be loaded\n.* &MASK specifies which bytes of the register are to be loaded\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC STA24                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         LCLC  &_MASK\n.*\n.* Check the REG parameter\n         AIF   (K'&REG NE 0).NOERR1A\n.ERR1A   MNOTE 8,'No register specified'\n         AGO   .NOERR1\n.NOERR1A ANOP\n         AIF   ('&REG'(1,1) NE '(').NOERR1\n         AIF   (N'&REG EQ 0).ERR1B\n         AIF   (N'&REG GT 1).ERR1C\n         AGO   .NOERR1\n.ERR1B   MNOTE 8,'No register specified within sublist'\n         AGO   .NOERR1\n.ERR1C   MNOTE 8,'More than 1 register specified in sublist'\n.NOERR1  ANOP\n.*\n.* Check the LOC parameter\n         AIF   (K'&LOC NE 0).NOERR2\n.ERR2    MNOTE 8,'LOC parameter not specified'\n.NOERR2  ANOP\n.*\n.* Check the MASK parameter\n&_MASK   SETC  '&MASK'\n         AIF   (K'&MASK NE 0).MASKOK\n&_MASK   SETC  'NYYY'\n.MASKOK  ANOP\n.*\n.* Check the number of parameters\n         AIF   (N'&SYSLIST LE 3).NOERR3\n.ERR3    MNOTE 4,'Too many parameters specified: ignored'\n.NOERR3  ANOP\n.*\n&LABEL   STCM  &REG,&_MASK,&LOC        * Save 24-bit address\n.*\n.MEND    MEND\n./ ADD NAME=SYSPARM  0100-20096-20096-0112-00225-00225-00000-BIXSMAC 25\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* The assembler program accepts as a JCL-parameter a specification\n.* for the variable SYSPARM. The value entered in the JCL will be\n.* passed to a global set symbol named &SYSPARM. The value specified\n.* in the JCL is passed as a single string. This macro decomposes the\n.* string into separate parameters. Then the parameters are checked\n.* and handled. 7 different keywords are allowed:\n.* - DBG     : Generate debugging code (DBG-macro expansion)\n.* - NODBG   : Do not generate debugging code\n.* - NOSRLIST: Do not generate a list of subroutines\n.* - SRLIST  : Generate a list of subroutines\n.* - SRXREF  : Generate a cross reference of subroutines\n.* - SHOWALL : Do not suppress any statement, report EJECT statements\n.* - OPT     : Optimize generated code\n.* - NOOPT   : Do not optimize generated code\n.* - LICENSE=...... Name and version of the license for this software\n.* - LICSTAT=IAGREE If you agree to the license terms\n.*\n.* The default is: NODBG,SRXREF,NOOPT,LICENSE(NONE),LICSTAT(NOTOK)\n.* If conflicting options are entered, the last one specified will\n.* take precedence.\n.*\n         SYSPARM\n.*\n.* Declare variables\n.*\n         GBLB  &SP_DBG                 * On for DBG\n         GBLB  &SP_OPT                 * On for OPT\n         GBLB  &SP_SRLIST              * On for SRLIST or SRXREF\n         GBLB  &SP_SRXREF              * On for SRXREF\n         GBLB  &SP_SHOWALL             * On for SHOWALL\n         GBLB  &SP_LICOK               * On if valid license accepted\n         GBLC  &SP_LICENSE             * License name / version\n         GBLC  &SP_LICSTAT             * License status\n         LCLC  &P(5)                   * Array to contain parms\n         LCLA  &I                      * Character index for &SYSPARM\n         LCLA  &J                      * Character index for &PARM\n         LCLA  &N                      * Next character to extract\n         LCLA  &X                      * Index into array &P\n         LCLC  &PARM                   * Current entry from array &P\n         LCLC  &NAME                   * Name contained in &PARM\n         LCLC  &VALUE                  * Value contained in &PARM\n.*\n.* Set defaults\n.*\n&SP_DBG  SETB  0                       * Default: no debugging code\n&SP_OPT  SETB  0                       * Default: no optimization\n&SP_SRLIST SETB 1                      * Default: produces subroutine\n&SP_SRXREF SETB 1                      *          cross reference\n&SP_LICOK  SETB 0                      * Default: license not ok\n&SP_LICENSE SETC 'NONE'                * Default license name\n&SP_LICSTAT SETC 'NOTOK'               * Default license status\n         AIF   (K'&SYSPARM EQ 0).MEND\n.*\n.* First the sysparm string is to be split into substrings\n.*\n&I       SETA  0                       * Initialize for\n&N       SETA  1                       *   extraction of parameters\n&X       SETA  1                       *   from &SYSPARM\n.LOOP1   ANOP\n&I       SETA  &I+1                    * Increment character index\n         AIF   (&I GT K'&SYSPARM).LOOP1OK * end of string\n         AIF   ('&SYSPARM'(&I,1) NE ',').LOOP1 * end of substring\n&P(&X)   SETC  '&SYSPARM'(&N,&I-&N)    * Extract substring\n&N       SETA  &I+1                    * Point to next substring\n&X       SETA  &X+1                    * Increment substring counter\n         AGO   .LOOP1                  * Go check next character\n.LOOP1OK ANOP\n&P(&X)   SETC  '&SYSPARM'(&N,&I-&N)    * Extract last substring\n.*\n.* Now check that keywords are valid\n.* &X now is count of parms to check\n&I       SETA  0                       * Index into array &P\n.LOOP2   ANOP\n&I       SETA  &I+1                    * Point to next parameter\n         AIF   (&I GT &X).LOOP2OK      * End of loop\n&PARM    SETC  '&P(&I)'                * Copy current entry\n         AIF   ('&PARM' EQ '').LOOP2   * Skip empty parameter\n         AIF   ('&PARM' EQ 'DBG').DBG  * Set debug mode on\n         AIF   ('&PARM' EQ 'NODBG').NODBG * Turn debug mode off\n         AIF   ('&PARM' EQ 'OPT').OPT  * Set optimization on\n         AIF   ('&PARM' EQ 'NOOPT').NOOPT * Turn optimization off\n         AIF   ('&PARM' EQ 'SHOWALL').SHOWALL * Set SHOWALL mode on\n         AIF   ('&PARM' EQ 'SRLIST').SRLIST * Set SRLIST mode on\n         AIF   ('&PARM' EQ 'SRXREF').SRXREF * Set SRXREF mode on\n         AIF   ('&PARM' EQ 'NOSRLIST').NOSRLIST * Turn SRLIST off\n.* Check to see if parameter can be split into name=value pair\n&J       SETA  ('&PARM' FIND '=')      * Contains =sign?\n         AIF   (&J EQ 0).LOOP2ER       * No =sign: signal error\n&NAME    SETC  '&PARM'(1,&J-1)         * Extract parameter name\n&VALUE   SETC  '&PARM'(&J+1,*)         * Extract parameter value\n         AIF   ('&NAME' EQ 'LICENSE').LICENSE * Select license id\n         AIF   ('&NAME' EQ 'LICSTAT').LICSTAT * Register license status\n.LOOP2ER MNOTE 8,'Invalid sysparm operand: &PARM'\n         AGO   .LOOP2                  * Go try next parameter\n.*\n.DBG     ANOP\n&SP_DBG  SETB  1                       * Enable debugging\n         AGO   .LOOP2\n.*\n.NODBG   ANOP\n&SP_DBG  SETB  0                       * Disable debugging\n         AGO   .LOOP2\n.*\n.OPT     ANOP\n&SP_OPT  SETB  1                       * Enable optimization\n         AGO   .LOOP2\n.*\n.NOOPT   ANOP\n&SP_OPT  SETB  0                       * Disable optimization\n         AGO   .LOOP2\n.*\n.SHOWALL ANOP\n&SP_SHOWALL SETB 1                     * Do not suppress any statement\n         AGO   .LOOP2\n.*\n.SRLIST  ANOP\n&SP_SRLIST SETB 1                      * Create a list of subroutines\n&SP_SRXREF SETB 0                      * But no cross reference\n         AGO   .LOOP2\n.*\n.SRXREF  ANOP\n&SP_SRLIST SETB 1                      * Create a list of subroutines\n&SP_SRXREF SETB 1                      * And a cross reference\n         AGO   .LOOP2\n.*\n.NOSRLIST ANOP\n&SP_SRLIST SETB 0                      * Create no list of subroutines\n&SP_SRXREF SETB 0                      * And no cross reference\n         AGO   .LOOP2\n.*\n.LICENSE ANOP\n&SP_LICENSE SETC '&VALUE'              * Register license name\n         AGO   .LOOP2\n.*\n.LICSTAT ANOP\n&SP_LICSTAT SETC '&VALUE'              * Register license status\n         AGO   .LOOP2\n.LOOP2OK ANOP  ,\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n.*\n.* Check that a valid license id was entered\n         AIF   ('&SP_LICENSE' EQ 'BXAPL1.0').LICOK\n         AIF   ('&SP_LICENSE' EQ 'GPL2.0').LICOK\n         MNOTE 4,'License id &SP_LICENSE entered: not valid, BXA macros*\n                are disabled'\n         AGO   .MEND\n.LICOK   ANOP  ,\n.*\n.* Check whether the license was accepted\n         AIF   ('&SP_LICSTAT' EQ 'IAGREE').LICSOK\n         MNOTE 4,'License status &SP_LICSTAT entered: you did not agree*\n                to the terms in license &SP_LICENSE, BXA macros are dis*\n               abled'\n         AGO   .MEND\n.LICSOK  ANOP  ,\n         MNOTE 1,'For usage of the BXA macros you have agreed to the te*\n               rms of license &SP_LICENSE'\n***********************************************************************\n**\n** For the terms and conditions of the license you have selected\n** please check the text of the license, which should be in the\n** macro library. Alternatively, you can find a copy on our site:\n** GPL2.0   - http://www.hlasm.com/english/gpl\n** BXAPL1.0 - http://www.hlasm.com/english/license\n**\n***********************************************************************\n&SP_LICOK  SETB 1                      * License was accepted\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.MEND    MEND\n./ ADD NAME=TRT      0100-20096-20096-0112-00167-00167-00000-BIXSMAC 25\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the TRT instruction\n.*\n&LABEL   TRT   ,                       * Parameters in SYSLIST\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC TRT                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLA  &BXA_NUMVAL             * Output from CHKREG\n         GBLC  &BXA_PRM(3)             * Parameters\n         GBLB  &BXA_USED_REGS(16)      * USE status of registers 0-15\n         LCLC  &FROM                   * Second parameter\n         LCLC  &TO                     * First parameter\n         LCLC  &_FROMD                 * Source displacement value\n         LCLC  &_FROMB                 * Source base register\n         LCLC  &_TOD                   * Destination displacement value\n         LCLC  &_TOL                   * Destination length\n         LCLC  &_TOB                   * Destination base register\n         LCLA  &I                      * Work var.\n         LCLC  &TXT                    * Text variable for errors\n         LCLA  &REG1                   * To register number\n         LCLA  &REG2                   * From register number\n.*\n.* Extract TO and FROM from SYSLIST\n&TO      SETC  '&SYSLIST(1)'\n&FROM    SETC  '&SYSLIST(2)'\n.*\n.* If FROM is not specified try to split the TO field\n         AIF   (K'&FROM NE 0).NOSPLIT  *\n         SPLIT &TO                     *\n&TO      SETC  ''                      *\n         AIF   (&BXA_NUMVAL LT 1).NOSPLIT\n&TO      SETC  '&BXA_PRM(1)'           * TO field is first parameter\n         AIF   (&BXA_NUMVAL LT 2).NOSPLIT\n&FROM    SETC  '&BXA_PRM(2)'           * FROM field is second parameter\n.NOSPLIT ANOP  ,                       *\n.*\n.* Decompose FROM field\n         DISSECT DB,&FROM              *\n&_FROMD  SETC  '&BXA_PRM(1)'           * Displacement\n&_FROMB  SETC  '&BXA_PRM(2)'           * Base register\n.*\n.* Decompose TO field\n         DISSECT DLB,&TO               *\n&_TOD    SETC  '&BXA_PRM(1)'           * Displacement\n&_TOL    SETC  '&BXA_PRM(2)'           * Length\n&_TOB    SETC  '&BXA_PRM(3)'           * Base\n.*\n.* Check the destination field\n         AIF   (K'&_TOD NE 0).NOERR1   * Must not be empty\n.ERR1A   MNOTE 8,'First argument missing or invalid'\n.NOERR1  ANOP  ,                       *\n.*\n.* Check the Destination register\n         AIF   (K'&_TOB EQ 0).NOERR2   * May be empty\n         CHKREG &_TOB,g                * A register was specified?\n         AIF   (&BXA_RC EQ 8).ERR2B    * Not a register\n&REG1    SETA  &BXA_NUMVAL             * Save register number\n         AIF   (&BXA_RC EQ 0).NOERR2   * This is a defined register\n.* BXA_RC = 4: a  literal number was specified\n         AIF   (&SYSNEST EQ 1).ERR2C   * TRT occurred in open code?\n         AGO   .NOERR2                 *\n.ERR2A   MNOTE 8,'Missing destination register'\n         AGO   .NOERR2                 *\n.ERR2B   ANOP  ,                       *\n&TXT     SETC  (DOUBLE '&_TOB')        *\n         MNOTE 4,'&TXT is not a valid general purpose register'\n         AGO   .NOERR2                 *\n.ERR2C   MNOTE 4,'You should use a register in stead of &_TOB'\n.NOERR2  ANOP  ,                       *\n.*\n.* Check the FROM parameter\n         AIF   (K'&_FROMD GT 0).NOERR3 * Displacement specified?\n.ERR3A   MNOTE 4,'Second argument missing or invalid'\n.NOERR3  ANOP  ,                       *\n.*\n.* Check the Source base register\n         AIF   (K'&_FROMB EQ 0).NOERR4 * Omitted?\n         CHKREG &_FROMB,g              * A register was specified?\n         AIF   (&BXA_RC EQ 8).ERR4A    * Not a register\n&REG2    SETA  &BXA_NUMVAL             * Save nr of specified register\n         AIF   (&BXA_RC EQ 0).NOERR4   * This is a real register\n.* BXA_RC = 4: a  literal number was specified\n         AIF   (&SYSNEST EQ 1).ERR4B   * TRT occurred in open code?\n         AGO   .NOERR4                 *\n.ERR4A   ANOP  ,                       *\n&TXT     SETC  (DOUBLE '&_FROMB')      *\n         MNOTE 4,'&TXT is not a valid general purpose register'\n         AGO   .NOERR4                 *\n.ERR4B   MNOTE 4,'You should use a register in stead of &_FROMB'\n.NOERR4  ANOP  ,                       *\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST LE 2).NOERR5\n.ERR5A   MNOTE 4,'Expected two arguments: remainder ignored'\n.NOERR5  ANOP  ,\n.*\n.* Check that registers 1 and 2 are not currently in use\n         AIF   (NOT &BXA_USED_REGS(2)).NOERR6A * R1 available?\n.ERR6A   MNOTE 4,'Register 1 will be modified but is not available'\n.NOERR6A ANOP  ,                       *\n         AIF   (NOT &BXA_USED_REGS(3)).NOERR6B * R2 available?\n.ERR6B   MNOTE 4,'Register 2 will be modified but is not available'\n.NOERR6B ANOP  ,                       *\n.*\n.* Generate code with indentation\n&LABEL   GEN   _TRT,&TO,&FROM\n.*\n.MEND    MEND\n./ ADD NAME=TRTAB    0100-20096-20096-0112-00356-00356-00000-BIXSMAC 25\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro generates tables for use wit TR and/or TRT instructions\n.*\n&LABEL   TRTAB &TYPE,                  * Base type of table            *\n               &CHARS=                 * Other valid characters\n.*\n.* &TYPE:  UC       for uppercase characters (A-Z)\n.*         LC       for lowercase characters (a-z)\n.*         ALPHA    for lower and/or uppercase characters (A-Z, a-z)\n.*         DIGITS   for decimal digits (0-9)\n.*         HEX      for hex digits (0-9, A-F)\n.*         NOT      for anything except specified &CHARS\n.*         NOTUC    for anything except uppercase\n.*         NOTLC    for anything except lowercase\n.*         NOTALPHA for anything except upper and/or lowercase chars\n.*         NOTDIGIT for anything except decimal digits\n.*         NOTHEX   for anything except hex digits\n.*         TOHEX    for translation from X'00'-X'0F' to readable hex\n.*         TOLOWER  for translation from uppercase to lowercase\n.*         TOUPPER  for translation from lowercase to uppercase\n.* &CHARS: a sublist of allowable characters, decimal codes, or hex\n.*         codes in the range 0-255 (X'00'-X'FF'). In singles or in\n.*         pairs for translation.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC TRTAB                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare locals\n         LCLC  &UC,&LC,&DIG,&NOT,&TOHEX\n.*\n.* Check the validity of the LABEL parameter\n         AIF   (K'&LABEL NE 0).NOERR1\nERROR1   MNOTE 8,'Missing label parameter on TRTAB macro'\n.NOERR1  ANOP\n.*\n.* Check validity of TYPE pararmeter\n         AIF   ('&TYPE' EQ 'UC').UC\n         AIF   ('&TYPE' EQ 'LC').LC\n         AIF   ('&TYPE' EQ 'ALPHA').ALPHA\n         AIF   ('&TYPE' EQ 'DIGITS').DIGITS\n         AIF   ('&TYPE' EQ 'HEX').HEX\n         AIF   ('&TYPE' EQ 'NOT').NOT\n         AIF   ('&TYPE' EQ 'NOTUC').NOTUC\n         AIF   ('&TYPE' EQ 'NOTLC').NOTLC\n         AIF   ('&TYPE' EQ 'NOTALPHA').NOTALPHA\n         AIF   ('&TYPE' EQ 'NOTDIGIT').NOTDIGIT\n         AIF   ('&TYPE' EQ 'NOTHEX').NOTHEX\n         AIF   ('&TYPE' EQ 'TOHEX').TOHEX\n         AIF   ('&TYPE' EQ 'TOLOWER').TOLOWER\n         AIF   ('&TYPE' EQ 'TOUPPER').TOUPPER\n         AIF   ('&TYPE' EQ '').NOTYPE\n         MNOTE 8,'Invalid TYPE specified on TRTAB macro'\n         MEXIT\n.*\n.* Set locals, depending on TYPE parameter\n.UC      ANOP\n&UC      SETC  'UC'\n         AGO   .NOTYPE\n.LC      ANOP\n&LC      SETC  'LC'\n         AGO   .NOTYPE\n.ALPHA   ANOP\n&UC      SETC  'UC'\n&LC      SETC  'LC'\n         AGO   .NOTYPE\n.DIGITS  ANOP\n&DIG     SETC  'DIG'\n         AGO   .NOTYPE\n.HEX     ANOP\n&UC      SETC  'HEX'\n&DIG     SETC  'DIG'\n         AGO   .NOTYPE\n.NOT     ANOP\n&NOT     SETC  'YES'\n         AGO   .NOTYPE\n.NOTUC   ANOP\n&UC      SETC  'UC'\n&NOT     SETC  'YES'\n         AGO   .NOTYPE\n.NOTLC   ANOP\n&LC      SETC  'LC'\n&NOT     SETC  'YES'\n         AGO   .NOTYPE\n.NOTALPHA ANOP\n&UC      SETC  'UC'\n&LC      SETC  'LC'\n&NOT     SETC  'YES'\n         AGO   .NOTYPE\n.NOTDIGIT ANOP\n&DIG     SETC  'DIG'\n&NOT     SETC  'YES'\n         AGO   .NOTYPE\n.NOTHEX  ANOP\n&UC      SETC  'HEX'\n&DIG     SETC  'DIG'\n&NOT     SETC  'YES'\n         AGO   .NOTYPE\n.TOHEX   ANOP\n&TOHEX   SETC  'YES'\n         AGO   .NOTYPE\n.TOLOWER ANOP\n&UC      SETC  'LC'\n&LC      SETC  'LC'\n         AGO   .NOTYPE\n.TOUPPER ANOP\n&UC      SETC  'UC'\n&LC      SETC  'UC'\n         AGO   .NOTYPE\n.NOTYPE  ANOP\n.*\n.* Variable NOT must be either YES or NO\n         AIF   ('&NOT' EQ 'YES').NOTOK\n&NOT     SETC  'NO'\n.NOTOK   ANOP\n.*\n         PUSH  PRINT\n         PRINT NODATA\n.*\n.* Pre-fill table, depending on NOT-parameter\n         AIF   ('&NOT' EQ 'YES').LABELNO\n&LABEL   DC    256X'00'                * All codes invalid, except:\n         AGO   .LABELOK\n.LABELNO ANOP\n&LABEL   DC    256X'FF'                * All codes valid, except:\n.LABELOK ANOP\n.*\n.* Generate allowed uppercase characters\n         AIF   ('&UC' NE 'HEX').NOTUCHEX\n         AIF   ('&NOT' EQ 'YES').UCHEXNO\n         ORG   &LABEL+C'A'             * Starting with 'A'\n         DC    C'ABCDEF'               * 6 valid chars\n         AGO   .NOTUCHEX\n.UCHEXNO ANOP\n         ORG   &LABEL+C'A'             * Starting with 'A'\n         DC    6X'00'                  * 6 invalid chars\n.NOTUCHEX ANOP\n.*\n         AIF   ('&UC' NE 'UC').NOTUCUC\n         AIF   ('&NOT' EQ 'YES').UCUCNO\n         ORG   &LABEL+C'A'             * Starting with 'A'\n         DC    C'ABCDEFGHI'            * 9 valid chars\n         ORG   &LABEL+C'J'             * Starting with 'J'\n         DC    C'JKLMNOPQR'            * 9 more valid chars\n         ORG   &LABEL+C'S'             * Starting with 'S'\n         DC    C'STUVWXYZ'             * the last 8 valid chars\n         AGO   .NOTUCUC\n.UCUCNO  ANOP\n         ORG   &LABEL+C'A'             * Starting with 'A'\n         DC    9X'00'                  * 9 invalid chars\n         ORG   &LABEL+C'J'             * Starting with 'J'\n         DC    9X'00'                  * 9 more invalid chars\n         ORG   &LABEL+C'S'             * Starting with 'S'\n         DC    8X'00'                  * the last 8 invalid chars\n.NOTUCUC ANOP\n.*\n         AIF   ('&UC' NE 'LC').NOTUCLC\n         ORG   &LABEL+C'A'             * Starting with 'A'\n         DC    C'abcdefghi'            * 9 valid chars\n         ORG   &LABEL+C'J'             * Starting with 'J'\n         DC    C'jklmnopqr'            * 9 more valid chars\n         ORG   &LABEL+C'S'             * Starting with 'S'\n         DC    C'stuvwxyz'             * the last 8 valid chars\n.NOTUCLC ANOP\n.*\n.* Generate allowed lowercase characters\n         AIF   ('&LC' NE 'LC').NOTLCLC\n         AIF   ('&NOT' EQ 'YES').LCLCNO\n         ORG   &LABEL+C'a'             * Starting with 'a'\n         DC    C'abcdefghi'            * 9 valid chars\n         ORG   &LABEL+C'j'             * Starting with 'j'\n         DC    C'jklmnopqr'            * 9 more valid chars\n         ORG   &LABEL+C's'             * Starting with 's'\n         DC    C'stuvwxyz'             * the last 8 valid chars\n         AGO   .NOTLCLC\n.LCLCNO  ANOP\n         ORG   &LABEL+C'a'             * Starting with 'a'\n         DC    9X'00'                  * 9 invalid chars\n         ORG   &LABEL+C'j'             * Starting with 'j'\n         DC    9X'00'                  * 9 more invalid chars\n         ORG   &LABEL+C's'             * Starting with 's'\n         DC    8X'00'                  * the last 8 invalid chars\n.NOTLCLC ANOP\n.*\n         AIF   ('&LC' NE 'UC').NOTLCUC\n         ORG   &LABEL+C'a'             * Starting with 'a'\n         DC    C'ABCDEFGHI'            * 9 valid chars\n         ORG   &LABEL+C'j'             * Starting with 'j'\n         DC    C'JKLMNOPQR'            * 9 more valid chars\n         ORG   &LABEL+C's'             * Starting with 's'\n         DC    C'STUVWXYZ'             * the last 8 valid chars\n.NOTLCUC ANOP\n.*\n.* Generate allowed digit-characters\n         AIF   ('&DIG' NE 'DIG').NOTDIG\n         AIF   ('&NOT' EQ 'YES').DIGNO\n         ORG   &LABEL+C'0'             * Starting with '0'\n         DC    C'0123456789'           * 10 valid chars\n         AGO   .NOTDIG\n.DIGNO   ANOP\n         ORG   &LABEL+C'0'             * Starting with '0'\n         DC    10X'00'                 * 10 invalid chars\n.NOTDIG  ANOP\n.*\n.* Generate allowed tohex-characters\n         AIF   ('&TOHEX' NE 'YES').NOTTOHEX\n         ORG   &LABEL                  * Starting with X'00'\n         DC    C'0123456789ABCDEF'     * 16 valid chars\n.NOTTOHEX ANOP ,                       *\n.*\n.* If &CHARS has no value, we're done\n         AIF   (K'&CHARS EQ 0).ENDMAC\n.*\n.* &CHARS must be in sublist notation\n         AIF   ('&CHARS'(1,1) EQ '(').NOERR2\n.ERROR2  MNOTE 8,'CHARS parameter must be specified in sublist notation*\n               '\n.NOERR2  ANOP\n.*\n.* Initialize locals for looping thru the &CHARS table\n         LCLA  &I\n         LCLC  &ARG1,&ARG2\n&I       SETA  0\n.*\n.* Loop thru all the CHARS-entries. Each entry is a self-defining term\n.* or a sublist of two self-defining term. Each term should represent\n.* a 1-byte value. If 1 term is defined, it will be translated unto\n.* itself, otherwise the first term will be translated into the second.\n.*\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&CHARS).LOOPEND\n.* ARG can be a single argument or a sublist of two arguments\n         AIF   ('&CHARS(&I)'(1,1) EQ '(').SUBLIST\n.* ARG is a single argument\n&ARG1    SETC  '&CHARS(&I)'\n&ARG2    SETC  ''\n.* If NOT is specified, ARG2 must be X'00'\n         AIF   ('&NOT' EQ 'NO').ARG_OK\n&ARG2    SETC  'X''00'''\n         AGO   .ARG_OK\n.*\n.SUBLIST ANOP\n         AIF   (N'&CHARS(&I) EQ 0).ERROR3A\n         AIF   (N'&CHARS(&I) EQ 1).ERROR3B\n         AIF   (N'&CHARS(&I) GT 2).ERROR3C\n         AGO   .NOERR3\n.ERROR3A MNOTE 8,'Empty sublist on CHARS-parameter: ignored'\n         AGO   .LOOP\n.ERROR3B MNOTE 8,'Sublist with only one sub-parm on CHARS-parameter: ig*\n               nored'\n         AGO   .LOOP\n.ERROR3C MNOTE 8,'Sublist on CHARS-parameter with more than 2 sub-parms*\n               : ignored'\n         AGO   .LOOP\n.ERROR3D MNOTE 8,'Sublist on CHARS-parameter contains empty sub-paramet*\n               er: ignored'\n         AGO   .LOOP\n.NOERR3  ANOP\n.* ARG is a valid double argument\n&ARG1    SETC  '&CHARS(&I,1)'\n         AIF   (K'&ARG1 EQ 0).ERROR3D\n&ARG2    SETC  '&CHARS(&I,2)'\n         AIF   (K'&ARG2 EQ 0).ERROR3D\n.ARG_OK  ANOP\n.* If ARG1 has only 1 character, change it to C'x'\n         AIF   (K'&ARG1 GT 1).ARG1OK1\n&ARG1    SETC  'C'''.'&ARG1'.''''\n.ARG1OK1 ANOP  ,\n         AIF   ('&ARG1'(1,1) NE '''').ARG1OK2\n&ARG1    SETC  'C'.'&ARG1'\n.ARG1OK2 ANOP  ,\n.* If ARG2 is empty, copy ARG1\n         AIF   (K'&ARG2 GT 0).ARG2OK1\n&ARG2    SETC  '&ARG1'\n.ARG2OK1 ANOP  ,\n.* If ARG2 has only 1 character, change it to C'x'\n         AIF   (K'&ARG2 GT 1).ARG2OK2\n&ARG2    SETC  'C'''.'&ARG2'.''''\n.ARG2OK2 ANOP  ,\n         AIF   ('&ARG2'(1,1) NE '''').ARG2OK3\n&ARG2    SETC  'C'.'&ARG2'\n.ARG2OK3 ANOP  ,\n.*\n.* Generate table entry\n         ORG   &LABEL+&ARG1            * Translatable code\n         DC    &ARG2                   * resulting code\n.*\n.* And go process next CHARS-entry\n         AGO   .LOOP\n.*\n.LOOPEND ANOP\n.ENDMAC  ANOP\n* Reset program counter to end-of-table\n         ORG\n.*\n         POP   PRINT\n.*\n.MEND    MEND\n./ ADD NAME=USE      0100-20096-20096-0112-00456-00456-00000-BIXSMAC 25\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro sets up USING statements with labeled dependent USINGs\n.* for all of its DCL-declared subfields.\n.*\n.* May either specify a 'normal' USE statement, which has either the\n.*     lay-out of a labeled or unlabeled USING, or the lay-out of a\n.*     labeled or unlabeled dependent USING.\n.* May also specify a 'register' USE statement, which has no label and\n.*     specifies only a register.\n.* May also specify an 'automatic' USE statement, in which case\n.*     only the label and the field to be set addressable are\n.*     supplied. A labeled dependent USING will be generated. The\n.*     field to be set addressable is identified by supplying the\n.*     DSECT-name and the field-name within that DSECT, separated by a\n.*     period.\n.* Note: Automatically generated USE-statements for sub-structures are\n.*     always normal USE-statements. Automatic USE-statements therefore\n.*     are never generated automatically. An automatic USE-statement\n.*     generates its own normal USE-statement automatically.\n.*\n&LABEL   USE   &DSECT,                 * Control block name            *\n               &BASE,                  * Register (or field) for using *\n               &START=,                * 1st addressable field         *\n               &OVR=,                  * Overriding labels             *\n               &SCOPE=LOCAL            * LOCAL/CALLED\n.*\n.* &LABEL specifies a USING label, to be used on the main USING\n.*        generated to establish addressability to &DSECT\n.* &DSECT specifies the control block to be set addressable.\n.*        If specified as DSECTname.fieldname then a dependent using\n.*        for that field in the specified DSECT will be generated. The\n.*        label for the dependent using will be taken from the label\n.*        parm in the USE-statement. For this type of USE-statement\n.*        the parameters BASE, PRFX, START, and OVR are ignored.\n.* &BASE  specifies either a register that points to &DSECT or a field\n.*        that contains a control block of type &DSECT.\n.* &START specifies the name of a field in the dsect, where\n.*        addressability starts. If omitted, defaults to the control\n.*        block name.\n.* &OVR   specifies overriding labels as follows:\n.*        OVR=((field,label),(field,label)...)\n.*        If the specified field is a DCL-declared structure, then the\n.*        specified label will override the USING-label specified on\n.*        the DCL-statement. If the label field is omitted, an\n.*        unlabeled dependent USING will be generated. If a *NOUSE\n.*        is specified for the overriding label, the no USING will\n.*        be generated for the specified field.\n.* &SCOPE specifies the scope of the USE-statement:\n.*        LOCAL  - valid until DROPped\n.*        CALLED - valid for all subroutines called from the remainder\n.*                 of this subroutine.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC USE                    * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &SP_SHOWALL             * Showall option activated?\n         LCLC  &_START                 * Start of addressable area\n         LCLA  &REG                    * Register number\n         LCLB  &BASREG                 * Base is a register Y/N\n         LCLB  &EQUREG                 * Base is an equated reg\n         LCLC  &FLD                    * 1 entry from BXA_USE_FLD\n         LCLC  &LBL                    * 1 entry from BXA_USE_LBL\n         LCLC  &SDS                    * 1 entry from BXA_USE_SDS\n         LCLC  &_OVR                   * 1 entry from OVR-parm\n         LCLC  &OVR1(5)                * Field names from OVR-parm\n         LCLC  &OVR2(5)                * Overriding labels from OVR\n         LCLA  &I                      * index for &BXA_USE_...\n         LCLA  &J                      * extra numeric var\n         LCLA  &R                      * Index value for BXA_USED_REGS\n         GBLC  &BXA_USE_DS(50)         * Enclosing DSECT names\n         GBLC  &BXA_USE_FLD(50)        * Defined complex fields\n         GBLC  &BXA_USE_LBL(50)        * Labels to be used\n         GBLC  &BXA_USE_SDS(50)        * Enclosed DSECT names\n         GBLC  &BXA_USEC_ROUT(50)      * Routines for SCOPE=CALLED\n         GBLC  &BXA_USEC_ARGL(50)      * Labels for SCOPE=CALLED\n         GBLC  &BXA_USEC_ARG1(50)      * CB-names for SCOPE=CALLED\n         GBLC  &BXA_USEC_ARG2(50)      * Bases for SCOPE=CALLED\n         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15\n         GBLC  &BXA_USELBL(50)         * Labels of active USINGs\n         GBLA  &BXA_USEREG(50)         * Associated registers\n         GBLC  &BXA_USEFLD(50)         * And associated base fields\n         GBLA  &BXA_USENDX0(5)         * Low valid pointer\n         GBLA  &BXA_USENDX1(5)         * High valid pointer\n         GBLA  &BXA_USENDX             * Current entry pointer\n         GBLC  &BXA_SUBR               * Current subroutine or *MAIN\n         GBLA  &BXA_NUMVAL             * Output from CHKREG\n         LCLA  &DOTLOC                 * Location of dot in &DSECT\n         LCLC  &_DSECT1                * Control block name before dot\n         LCLC  &_DSECT2                * Field name following dot\n.*\n.* Check the SCOPE parameter\n         AIF   ('&SCOPE' EQ 'LOCAL').NOERR8\n         AIF   ('&SCOPE' EQ 'CALLED').NOERR8\n.ERR8    MNOTE 8,'SCOPE-parameter must specify either LOCAL or CALLED'\n.NOERR8  ANOP\n.*\n.* Check the DSECT parameter\n         AIF   (K'&DSECT EQ 0).ERR1A   * Must not be empty\n&DOTLOC  SETA  ('&DSECT' INDEX '.')    * Is there a dot in &DSECT?\n         AIF   (&DOTLOC GT 0).NOERR1   * Ok: automatic use statement\n         CHKREG &DSECT                 * Was a register specified?\n         AIF   (&BXA_RC GT 4).NOERR1   * No: normal use statement\n.* Should be a register use statement\n         AIF   (K'&BASE GT 0).ERR1B    * Base? Coding error\n         AIF   (K'&LABEL GT 0).ERR1C   * Label not allowed\n         AIF   (K'&START GT 0).ERR1D   * START not allowed\n         AIF   (K'&OVR GT 0).ERR1D     * OVR not allowed\n         AGO   .REGUSE                 * Ok: register-USE\n.ERR1A   MNOTE 8,'First operand missing (control block name)'\n         MEXIT\n.ERR1B   MNOTE 8,'You specified a register for a DSECT name'\n         MEXIT\n.ERR1C   MNOTE 4,'Label not allowed on a register-USE: ignored'\n         AGO   .NOERR1\n.ERR1D   MNOTE 8,'On a register-USE no parms but SCOPE are allowed'\n.NOERR1  ANOP\n.*\n.* Check the BASE parameter\n         AIF   (K'&BASE EQ 0).ERR2A    * Must not be empty\n         AIF   (&DOTLOC GT 0).ERR2B    * Will be ignored\n.* Should be a normal use statement\n         CHKREG &BASE                  * A register was specified?\n         AIF   (&BXA_RC EQ 8).NOERR2   * Not a reg: dependent USING\n         AIF   (&BXA_RC EQ 0).EQUREG   * Ok: USE an undefined reg\n.* NUMVAL = 4: a literal number 0-15 was specified\n&REG     SETA  &BASE                   * Extract register number\n         AGO   .USEREG\n.*\n.* &BASE is a known register: check its type\n.EQUREG  ANOP  ,                       * Check EQUated register\n&EQUREG  SETB  1                       * Indicate EQUated reg\n         GBLC  &(BXA_REGT_&BASE)       * Declare type field for reg\n         GBLA  &(BXA_REGN_&BASE)       * Declare number field for reg\n&REG     SETA  &(BXA_REGN_&BASE)       * Extract register number\n         AIF   ('&(BXA_REGT_&BASE)' NE 'g').ERR2C * Invalid reg type\n.USEREG  ANOP  ,                       * Second operand valid register\n&BASREG  SETB  1                       * Indicate basing on a reg\n.*\n.* The register is available?\n         CHKREG &BASE,g                * Valid GPR?\n         AIF   (&BXA_RC GT 4).ERR2D    * No: error\n&R       SETA  &BXA_NUMVAL+1           * Increment reg to obtain index\n         AIF   (&BXA_USED_REGS(&R)).ERR2E * In use!\n.*\n         AIF   (&REG NE 0).NOERR2      * Using Register 0?\n         AIF   ('&DSECT' EQ 'PSA').NOERR2 * R0 can be used only for PSA\n         AGO   .ERR2F\n.*\n.ERR2A   ANOP\n         AIF   (&DOTLOC GT 0).NOERR2\n         MNOTE 8,'Second operand missing (register or complex field nam*\n               e)'\n         MEXIT\n.ERR2B   MNOTE 4,'BASE parameter ignored for automatic USE statement'\n         AGO   .NOERR2\n.ERR2C   MNOTE 8,'Register &BASE is not a general purpose register'\n         MEXIT\n.ERR2D   MNOTE 8,'&BASE is not a valid general purpose regiter'\n         MEXIT\n.ERR2E   MNOTE 8,'Register &BASE is currently not available'\n         MEXIT\n.ERR2F   MNOTE 8,'With register 0 you cannot address &DSECT'\n         MEXIT\n.NOERR2  ANOP\n.*\n.* Check number of parameters\n         AIF   (N'&SYSLIST GT 2).ERR3A\n         AIF   (&DOTLOC EQ 0).NOERR3\n         AIF   (N'&SYSLIST GT 1).ERR3B\n         AGO   .NOERR3\n.ERR3A   MNOTE 4,'More than 2 parameters specified: ignored'\n         AGO   .NOERR3\n.ERR3B   MNOTE 4,'More than 1 parameter specified: ignored'\n.NOERR3  ANOP\n.*\n.* Check the LABEL parameter\n         AIF   (K'&LABEL EQ 0).NOERR4  *\n&I       SETA  &BXA_USENDX0(&BXA_USENDX) * Start loop counter\n.LOOP5   ANOP  ,                       * Search for active label\n&I       SETA  &I+1                    * Point next active label\n         AIF   (&I GT &BXA_USENDX1(&BXA_USENDX)).NOERR4 * Not found: ok\n         AIF   ('&LABEL' NE '&BXA_USELBL(&I)').LOOP5 * Skip mismatch\n.ERR4A   MNOTE 8,'Label &LABEL is currently active: use OVR parameter'\n         MEXIT ,                       *\n.NOERR4  ANOP  ,                       *\n.*\n.* Check the START parameter\n         AIF   (&DOTLOC NE 0 AND K'&START NE 0).ERR5A\n         AIF   (K'&START EQ 0).NOERR5\n         AIF   ('&SCOPE' EQ 'CALLED').ERR5C\n         AIF   (NOT &BASREG).ERR5B\n         AGO   .NOERR5\n.ERR5A   MNOTE 4,'START parameter ignored for automatic USE statement'\n         AGO   .NOERR5\n.ERR5B   MNOTE 8,'START specified, but second argument is not a registe*\n               r'\n         AGO   .NOERR5\n.ERR5C   MNOTE 8,'START specified, not valid with SCOPE=CALLED'\n.NOERR5  ANOP\n.*\n.* Check the OVR-parameter\n         AIF   (K'&OVR EQ 0).NOERR7\n         AIF   (&DOTLOC NE 0).ERR7H\n         AIF   ('&SCOPE' EQ 'CALLED').ERR7I\n         AIF   ('&OVR'(1,1) NE '(').ERR7A\n         AIF   (N'&OVR EQ 0).ERR7B\n.* Check all sub-parameters and copy to &OVR1 and &OVR2\n&I       SETA  0\n.LOOP0   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT N'&OVR).LOOP0OK\n&_OVR    SETC  '&OVR(&I)'              * Copy i-th parameter\n         AIF   (K'&_OVR EQ 0).ERR7C\n         AIF   ('&_OVR'(1,1) NE '(').ERR7D\n         AIF   (N'&OVR(&I) EQ 0).ERR7E\n         AIF   (K'&OVR(&I,1) EQ 0).ERR7F\n&OVR1(&I) SETC '&OVR(&I,1)'            * Copy field name\n&OVR2(&I) SETC '&OVR(&I,2)'            * Copy label for using\n         AIF   (N'&OVR(&I) GT 2).ERR7G\n         AGO   .LOOP0                  * And process next entry\n.LOOP0OK ANOP\n         AGO   .NOERR7\n.ERR7A   MNOTE 8,'OVR-parameter must be specified as a sublist'\n         AGO   .NOERR7\n.ERR7B   MNOTE 4,'OVR-parameter is specified with an empty sublist'\n         AGO   .NOERR7\n.ERR7C   MNOTE 4,'OVR-parameter contains empty sub-parameter'\n         AGO   .LOOP0\n.ERR7D   MNOTE 8,'OVR-parameter ''&_OVR'' is not enclosed in parenthese*\n               s'\n         AGO   .LOOP0\n.ERR7E   MNOTE 4,'OVR-parameter ''&_OVR'' is an empty sub-parameter'\n         AGO   .LOOP0\n.ERR7F   MNOTE 8,'OVR-parameter ''&_OVR'' does not specify a field name*\n                (first sub-parm)'\n         AGO   .LOOP0\n.ERR7G   MNOTE 4,'OVR-parameter ''&_OVR'' contains more than 2 sub-parm*\n               s: remainder ignored'\n         AGO   .LOOP0\n.ERR7H   MNOTE 4,'OVR parameter ignored for automatic USE statement, us*\n               e the label field instead'\n         AGO   .NOERR7\n.ERR7I   MNOTE 8,'OVR specified, not valid with SCOPE=CALLED'\n.NOERR7  ANOP\n.*\n.* For automatic USE-statements the LABEL parameter must be supplied\n         AIF   (&DOTLOC EQ 0).NOERR9\n         AIF   (K'&LABEL GT 0).NOERR9\n.ERR9    MNOTE 4,'LABEL-field must not be blank on an automatic USE'\n.NOERR9  ANOP\n.*\n.* For SCOPE=CALLED insert parameters into tables\n         AIF   ('&SCOPE' NE 'CALLED').LOCAL\n&I       SETA  N'&BXA_USEC_ROUT+1      * Point to empty entry\n&BXA_USEC_ROUT(&I) SETC '&BXA_SUBR'    * Set up new\n&BXA_USEC_ARGL(&I) SETC '&LABEL'       *  entries in tables\n&BXA_USEC_ARG1(&I) SETC '&DSECT'       *   for use by ENDUSE\n&BXA_USEC_ARG2(&I) SETC '&BASE'        *    and BEGSR\n.LOCAL   ANOP\n.*\n.* For automatic USE statements the field-name must be separated from\n.* the DSECT name, and the field's DSECT must be located.\n.*\n         AIF   (&DOTLOC EQ 0).NORMAL   * No dot: normal USE\n&_DSECT1 SETC  '&DSECT'(1,&DOTLOC-1)   * Extract control block name\n&_DSECT2 SETC  '&DSECT'(&DOTLOC+1,*)   * Extract complex field name\n&I       SETA  0                       * I indexes &BXA_USE_... arrays\n.LOOP4   ANOP  ,                       * Search\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&BXA_USE_DS).LOOP4NF * At end: not found\n         AIF   ('&BXA_USE_DS(&I)' NE '&_DSECT1').LOOP4 * Skip mismatch\n         AIF   ('&BXA_USE_FLD(&I)' NE '&_DSECT2').LOOP4 * Skip mismatch\n.* We found the entry we're looking for.\n         AIF   ('&BXA_USE_LBL(&I)' NE '*NOUSE').LOOP4R1\n&LABEL   USE   &BXA_USE_SDS(&I),&_DSECT2 * Set area addressable\n         MEXIT\n.LOOP4NF ANOP\n         MNOTE 8,'Field &_DSECT2 in &_DSECT1 not defined with a DCL-sta*\n               tement'\n         MEXIT\n.LOOP4R1 MNOTE 4,'Statement ignored: &_DSECT2 is always generated with *\n               &_DSECT1'\n         MEXIT\n.*\n.* Generate first USING\n.NORMAL  ANOP  ,                       * Start for normal USE statement\n&_START  SETC  '&START'\n         AIF   (K'&_START NE 0).USING  * Use START if specified\n&_START  SETC  '&DSECT'                * Otherwise use dsect name\n.USING   ANOP\n&LABEL   USING &_START,&BASE\n.*\n.* Now look up the dsect name used, to see if there are any dependent\n.* USINGs to be generated.\n&I       SETA  0                       * &I indexes &BXA_USE_... tables\n.LOOP1   ANOP  ,                       * Search &BXA_USE_DS for &DSECT\n&I       SETA  &I+1                    * Point next element\n         AIF   (&I GT N'&BXA_USE_DS).LOOP1OK * At end-of-table quit\n         AIF   ('&BXA_USE_DS(&I)' NE '&DSECT').LOOP1 * Skip mismatch\n&FLD     SETC  '&BXA_USE_FLD(&I)'\n&LBL     SETC  '&BXA_USE_LBL(&I)'\n&SDS     SETC  '&BXA_USE_SDS(&I)'\n.*\n.* If the field-name in &FLD occurs in the OVR-parameter (OVR1-array)\n.* then the USING label in &LBL must be overridden with the value in\n.* the OVR2-array. Used-up entries in OVR1 must be removed, so\n.* we can issue error messages for any overrides 'not used'\n         AIF   (K'&OVR EQ 0).LOOP2OK\n&J       SETA  0                       * Index for OVR1/OVR2\n.LOOP2   ANOP  ,                       * Scan OVR1 until FLD found\n&J       SETA  &J+1                    * Point next entry\n         AIF   (&J GT N'&OVR1).LOOP2OK * On end: quit loop\n         AIF   ('&FLD' NE '&OVR1(&J)').LOOP2 * Skip mismatch\n&LBL     SETC  '&OVR2(&J)'             * Override default label\n&OVR1(&J) SETC ''                      * Remove entry from table\n.LOOP2OK ANOP  ,                       * Drop-thru on located entry\n.*\n.* If R13 is used as a base register and it has &DSECT specified with\n.* an offset (presumably 16), and the sub-dsect to generate is BXASAVE,\n.* then BXASAVE is to be replaced by SAVEAREA.\n         AIF   (NOT &BASREG).LOOP1DO   * Not a register\n         AIF   (&REG NE 13).LOOP1DO    * Not register 13\n         AIF   ('&SDS' NE 'BXASAVE').LOOP1DO * Some other DSECT\n&J       SETA  ('&START' INDEX '+')    * Position of '+' in START parm\n         AIF   (&J EQ 0).LOOP1DO       * + not occurring\n&SDS     SETC  'SAVEAREA'              * Replace BXASAVE with SAVEAREA\n&FLD     SETC  '&START'                * Replace basing field as well\n.*\n.LOOP1DO ANOP  ,                       *\n         AIF   ('&LBL' EQ '*NOUSE').LOOP1 * Skip non-automatic entries\n         AIF   (K'&LABEL EQ 0).LOOP1US * Skip non-automatic entries\n&FLD     SETC  '&LABEL'.'.'.'&FLD'     *\n.LOOP1US ANOP  ,                       *\n&LBL     USE   &SDS,&FLD               * Recursive invocation\n         AGO   .LOOP1                  * And go check remaining entries\n.LOOP1OK ANOP\n.*\n.* Any entries remaining in the OVR1-array are field names not found\n.* in &DSECT. I.e. they are not defined thru the DCL macro.\n         AIF   (K'&OVR EQ 0).LOOP3OK\n&J       SETA  0                       * Index for OVR1/OVR2\n.LOOP3   ANOP  ,                       * Scan OVR1\n&J       SETA  &J+1                    * Point next entry\n         AIF   (&J GT N'&OVR1).LOOP3OK * On end: quit loop\n         AIF   (K'&OVR1(&J) EQ 0).LOOP3 * Skip used entries\n         MNOTE 8,'Field &OVR1(&J) not DCL-defined in &DSECT'\n         AGO   .LOOP3\n.LOOP3OK ANOP\n         MEXIT\n.*\n.* Handling of register-USE\n.REGUSE  ANOP\n.*\n.* Label not allowed on register USE\n         AIF   (K'&LABEL EQ 0).NOERR6A\n.ERR6A   MNOTE 4,'Label parameter is not allowed on register USE: ignor*\n               ed'\n.NOERR6A ANOP\n.*\n.* The register is available?\n         CHKREG &DSECT,g               * Valid GPR?\n         AIF   (&BXA_RC GT 4).ERR6C    * No: error\n&R       SETA  &BXA_NUMVAL+1           * Increment reg to obtain index\n         AIF   (&BXA_USED_REGS(&R)).ERR6B\n.*\n.* For SCOPE=CALLED insert parameters into tables\n         AIF   ('&SCOPE' NE 'CALLED').LOCAL2\n&I       SETA  N'&BXA_USEC_ROUT+1      * Point to empty entry\n&BXA_USEC_ROUT(&I) SETC '&BXA_SUBR'    * Set up new\n&BXA_USEC_ARGL(&I) SETC ''             *  entries in tables\n&BXA_USEC_ARG1(&I) SETC '&DSECT'       *   for use by ENDUSE\n&BXA_USEC_ARG2(&I) SETC '&BASE'        *    and BEGSR\n.LOCAL2  ANOP\n.*\n.* Set the designated register in use (&R still contains reg-index)\n&BXA_USED_REGS(&R) SETB 1              * Indicate register is in use\n&N       SETA  &BXA_USENDX1(&BXA_USENDX)+1 * Get pointer to free entry\n&BXA_USELBL(&N) SETC ''                * Save label in table\n&BXA_USEREG(&N) SETA &R                * and register index value\n&BXA_USEFLD(&N) SETC ''                * Set no field name\n&BXA_USENDX1(&BXA_USENDX) SETA &N      * And update high valid ptr\n.*\n.* Report current USING status\n         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested\n         USEDREGS\n         MEXIT\n.*\n.ERR6B   ANOP\n&ARG     SETC  (DOUBLE '&DSECT')\n         MNOTE 8,'Register &ARG currently not available'\n         MEXIT\n.ERR6C   ANOP\n&ARG     SETC  (DOUBLE '&DSECT')\n         MNOTE 8,'Register &ARG is not a valid general purpose register*\n               '\n.*\n.MEND    MEND\n./ ADD NAME=USEDREGS 0100-20096-20096-0112-00132-00132-00000-BIXSMAC 25\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro lists all registers currently in use\n.*\n         USEDREGS &OPT                 * DETAILS or nothing\n.*\n.* &OPT  If specified as DETAILS, active entries from the\n.*       BXA_USELBL and BXA_USEREG tables will be shown\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC USEDREGS               * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15\n         GBLC  &BXA_USELBL(50)         * Used labels ...\n         GBLC  &BXA_USEFLD(50)         *   and fields...\n         GBLA  &BXA_USEREG(50)         *   and associated registers\n         GBLA  &BXA_USENDX0(5)         * Low valid pointers\n         GBLA  &BXA_USENDX1(5)         * High valid pointers\n         GBLA  &BXA_USENDX             * Pointer for USENDX0/USENDX1\n         LCLA  &N                      * Pointer for BXA_USE...\n         LCLA  &REG                    * Register number\n         LCLC  &LBL                    * Label from table\n         LCLC  &FLD                    * Field name from table\n         LCLC  &ARG                    * 1 argument from SYSLIST\n         LCLC  &ARGS                   * Arguments from SYSLIST\n         LCLA  &I                      * Index into &SYSLIST\n         LCLA  &R                      * Index into &BXA_USED_REGS\n         LCLC  &USEDREGS               * Used regs on labeled USING\n         LCLC  &USEDREG                * 1 index from USEDREGS\n.*\n.* Check the OPT parameter\n         AIF   (K'&OPT EQ 0).NOERR1\n         AIF   ('&OPT' EQ 'DETAILS').NOERR1\n.ERR1A   MNOTE 8,'&OPT is an unsupported option: ignored'\n.NOERR1  ANOP\n.*\n.* Create list of registers currently in use\n&ARGS    SETC  ''                      * Empty list of regs\n&I       SETA  0                       * Index BXA_USED_REGS\n.LOOPR   ANOP  ,                       * For all registers\n&I       SETA  &I+1                    * Point next register\n         AIF   (&I GT 16).LOOPROK      * At end: issue message\n         AIF   (NOT &BXA_USED_REGS(&I)).LOOPR * Unused reg: no action\n&R       SETA  &I-1                    * Obtain register number\n&ARGS    SETC  '&ARGS'.',R'.'&R'       * Add register to list\n         AGO   .LOOPR                  * And go check next register\n.LOOPROK ANOP\n         AIF   (K'&ARGS GT 0).LOOPRN0\n&ARGS    SETC  ',None'\n.LOOPRN0 ANOP  ,                       * ARGS not empty\n&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma\n         MNOTE *,'Registers in use: &ARGS'\n.*\n.* If DETAILS not specified: we're done\n         AIF   ('&OPT' NE 'DETAILS').LOOP2OK\n&N       SETA  &BXA_USENDX0(&BXA_USENDX)\n.LOOP2   ANOP\n&N       SETA  &N+1\n         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP2OK\n&REG     SETA  &BXA_USEREG(&N)-1       * Create reg.nr. from index\n&FLD     SETC  '&BXA_USEFLD(&N)'       * Copy fieldname\n&LBL     SETC  '&BXA_USELBL(&N)'       * Copy label\n         AIF   (K'&LBL GE 8).LOOP2M    * Go issue message\n&LBL     SETC  '&LBL'.(8-K'&LBL)' '    * Fill up to 8 chars\n.LOOP2M  ANOP  ,                       *\n         AIF   (K'&FLD GT 0).LOOP2M2   * With field: issue msg 2\n         MNOTE *,'&LBL USE R&REG'      * Report register use\n         AGO   .LOOP2                  *\n.LOOP2M2 ANOP  ,                       * Message 2:\n         MNOTE *,'&LBL USE &FLD.,R&REG' * Report normal use\n         AGO   .LOOP2                  *\n.LOOP2OK ANOP  ,                       *\n.*\n.MEND    MEND\n./ ADD NAME=USING    0100-20096-20096-0112-00256-00256-00000-BIXSMAC 25\n.*\n.* This macro is free software; you can redistribute it and/or modify\n.* it under the terms of the GNU General Public License as published by\n.* the Free Software Foundation; either version 2 of the License\n.* or (at your option) any later version.\n.* The license text is available at the following internet addresses:\n.* - http://www.bixoft.com/english/gpl.htm\n.* - http://fsf.org\n.* - http://opensource.org\n.*\n.* This macro is distributed in the hope that it will be useful,\n.* but WITHOUT ANY WARRANTY; without even the implied warranty of\n.* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n.* See the GNU General Public License for more details.\n.*\n.* You should have received a copy of the GNU General Public License\n.* along with this program; if not, write to either of the following:\n.* the Free Software Foundation, Inc.      B.V. Bixoft\n.* 59 Temple Place, Suite 330              Rogge 9\n.* Boston, MA 02111-1307                   7261 JA Ruurlo\n.* United States of America                The Netherlands\n.*\n.*                                         e-mail: bixoft@bixoft.nl\n.*                                         phone : +31-6-22755401\n.*\n.**********************************************************************\n.*\n.* Bixoft eXtended Assembly language\n.* Licensed material - Property of B.V. Bixoft\n.*\n.* This macro can be licensed or used on an as-is basis.\n.* No warranty, neither implicit nor explicit, is given.\n.* It remains your own responsibility to ensure the correct\n.* working of any program using this macro.\n.*\n.* Suggestions for improvement are always welcome at\n.* http://www.bixoft.com  or mail to  bixoft@bixoft.nl\n.*\n.* (C) Copyright B.V. Bixoft, 1999\n.**********************************************************************\n         MACRO\n.*\n.* This macro replaces the assembler's USING statement\n.*\n&LABEL   USING &DSECT,                 * Control block name            *\n               &BASE                   * Register (or field) for using\n.*\n.* &LABEL optional USING label\n.* &DSECT specifies the control block to be set addressable.\n.* &BASE  specifies either a register that points to &DSECT or a field\n.*        that contains a &DSECT as a label. If specified as a register\n.*        other registers may follow.\n.*\n.**********************************************************************\n.*\n.*       IMPORTANT NOTICE\n.*       ========= ======\n.*\n.* Code below checks whether 'USER' accepted the terms and conditions\n.* of the license for the BXA macro library. This code is to be treated\n.* as part of the Copyright Notice and therefore may not be changed\n.* or disabled in any way.\n.*\n.**********************************************************************\n         GBLA  &BXA_RC                 * Returncode from CHKLIC\n         CHKLIC USING                  * Check license acceptance\n         AIF   (&BXA_RC NE 0).MEND\n.**********************************************************************\n.*\n.* End of special code that is part of the Copyright Notice\n.*\n.**********************************************************************\n.*\n.* Declare variables\n         GBLB  &BXA_USED_REGS(16)      * Use status of regs R0-R15\n         GBLB  &SP_SHOWALL             * SHOWALL option\n         GBLC  &BXA_USELBL(50)         * Using labels ...\n         GBLA  &BXA_USEREG(50)         *   and their register indexes\n         GBLC  &BXA_USEFLD(50)         *   and associated base fields\n         GBLA  &BXA_USENDX0(5)         * Index into &BXA_USELBL/USEREG\n         GBLA  &BXA_USENDX1(5)         * Index into &BXA_USELBL/USEREG\n         GBLA  &BXA_USENDX             * Index into &BXA_USENDX1\n         LCLA  &N                      * Index for BXA_USE...\n         LCLA  &REG                    * Register number\n         LCLC  &ARG                    * 1 argument from SYSLIST\n         LCLC  &ARGS                   * Arguments from SYSLIST\n         LCLA  &I                      * Index into &SYSLIST\n         LCLA  &O                      * Offset for 2nd 3d.. base regs\n         LCLA  &R                      * Index into &BXA_USED_REGS\n         LCLB  &BASREG                 * Basing on a register\n.*\n.* Check the LABEL parameter\n.* If an existing label is specified, that label must be dropped\n         AIF   (K'&LABEL EQ 0).NOERR0\n&N       SETA  &BXA_USENDX0(&BXA_USENDX)\n.LOOP0   ANOP\n&N       SETA  &N+1\n         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).LOOP0OK\n         AIF   ('&BXA_USELBL(&N)' NE '&LABEL').LOOP0\n.* Match found: issue message, unless within a macro\n         AIF   (&NESTLVL GT 1).NOERR0A\n.ERR0A   MNOTE 1,'Label &LABEL currently in use: issuing DROP for you'\n.NOERR0A ANOP\n         DROP  &LABEL\n.LOOP0OK ANOP\n.NOERR0  ANOP\n.*\n.* Check the DSECT parameter\n         AIF   (K'&DSECT EQ 0).ERR1A   * Must not be empty\n         CHKREG &DSECT                 * A register specified?\n         AIF   (&BXA_RC EQ 0).ERR1B    * Yes: issue error\n         AGO   .NOERR1                 * A register was specified!\n.ERR1A   MNOTE 8,'First operand missing (control block name)'\n         MEXIT\n.ERR1B   MNOTE 8,'You specified a register for a DSECT name'\n         MEXIT\n.NOERR1  ANOP\n.*\n.* Check the BASE parameter\n         AIF   (K'&BASE EQ 0).ERR2A    * Must not be empty\n         CHKREG &BASE                  * A register was specified?\n         AIF   (&BXA_RC EQ 8).NOERR2   * Not a reg: dependent USING\n         AIF   (&BXA_RC EQ 0).EQUREG   * Ok: USE a defined reg\n.* NUMVAL = 4: a literal number 0-15 was specified\n&REG     SETA  &BASE                   * Extract register number\n         AGO   .USEREG\n.*\n.* &BASE is a known register: check its type\n.EQUREG  ANOP  ,                       * Check EQUated register\n         GBLC  &(BXA_REGT_&BASE)       * Declare type field for reg\n         GBLA  &(BXA_REGN_&BASE)       * Declare number field for reg\n&REG     SETA  &(BXA_REGN_&BASE)       * Extract register number\n         AIF   ('&(BXA_REGT_&BASE)' NE 'g').ERR2C * Invalid reg type\n.*\n.* Set specified register 'in use' and add label/reg to tables\n.USEREG  ANOP  ,                       * Second operand valid register\n&BASREG  SETB  1                       * Indicate basing on a reg\n&R       SETA  &REG+1                  * Increment reg to obtain index\n         AIF   (NOT &BXA_USED_REGS(&R)).NOERR2B\n.* If unlabeled USING overriding a prior unlabeled USING: drop prior\n         AIF   (K'&LABEL NE 0).ERR2B   * Not unlabeled\n         AIF   (K'&SYSLIST(3) NE 0).ERR2B * More than 1 register\n&N       SETA  &BXA_USENDX0(&BXA_USENDX)\n.LOOP4   ANOP\n&N       SETA  &N+1\n         AIF   (&N GT &BXA_USENDX1(&BXA_USENDX)).ERR2B * Not found\n         AIF   ('&BXA_USELBL(&N)' NE '').LOOP4 * Skip mismatch\n         AIF   (&BXA_USEREG(&N) NE &R).LOOP4 * Skip mismatch\n.ERR2E   ANOP\n         AIF   (&SYSNEST GT 1).GENDROP\n&ARG     SETC  (DOUBLE '&BASE')\n         MNOTE 1,'Register &ARG currently in use: issuing DROP for you'\n.GENDROP ANOP\n         DROP  &BASE\n         AGO   .NOERR2B\n.ERR2B   ANOP\n&ARG     SETC  (DOUBLE '&BASE')\n         MNOTE 4,'Register &ARG currently not available for USING'\n.NOERR2B ANOP\n.*\n.* Set register in use excpt for USING PSA,R0\n         AIF   (&R EQ 1 AND '&DSECT' EQ 'PSA').NOSET\n&BXA_USED_REGS(&R) SETB 1              * Indicate register is in use\n.NOSET   ANOP  ,                       *\n&N       SETA  &BXA_USENDX1(&BXA_USENDX)+1 * Get pointer to free entry\n&BXA_USELBL(&N) SETC '&LABEL'          * Save label in table\n&BXA_USEREG(&N) SETA &R                * and register index value\n&BXA_USEFLD(&N) SETC '&DSECT'          * and base field name\n&BXA_USENDX1(&BXA_USENDX) SETA &N      * And update high valid ptr\n.*\n.CHKR0   ANOP  ,                       * R0 can be used for PSA only\n         AIF   (&REG NE 0).NOERR2      * Using Register 0?\n         AIF   ('&DSECT' EQ 'PSA').NOERR2 * Yes. For PSA?\n         AGO   .ERR2D                  * No: error\n.*\n.ERR2A   ANOP\n         AIF   (&DOTLOC GT 0).NOERR2\n         MNOTE 8,'Second operand missing (register or location)'\n         MEXIT\n.ERR2C   ANOP\n&ARG     SETC  (DOUBLE '&BASE')\n         MNOTE 8,'Register &ARG is not a general purpose register'\n         MEXIT\n.ERR2D   MNOTE 8,'With register 0 you cannot address &DSECT'\n.NOERR2  ANOP\n.*\n.* Check extra base registers (if any)\n         AIF   (NOT &BASREG).NOERR3    * Not basing on a register!\n&I       SETA  2                       * SYSLIST 1 & 2 checked ok\n.LOOP3   ANOP  ,                       * For all remaining arguments\n&I       SETA  &I+1                    * Point next argument\n         AIF   (&I GT N'&SYSLIST).LOOP3OK * At end: all args checked ok\n&ARG     SETC  '&SYSLIST(&I)'          * Extract argument from SYSLIST\n         AIF   (K'&ARG EQ 0).ERR3A     * Omitted register\n         CHKREG &ARG                   * A register was specified?\n         AIF   (&BXA_RC EQ 8).ERR3B    * Not a register\n         AIF   (&BXA_RC EQ 0).LOOP3RG  * Ok: defined register\n.* NUMVAL = 4: a literal number 0-15 was specified\n&REG     SETA  &ARG                    * Extract register number\n         AGO   .LOOP3AD                * and go add to tables\n.LOOP3RG ANOP  ,                       * Check EQUated register\n         GBLC  &(BXA_REGT_&ARG)        * Declare type field for reg\n         GBLA  &(BXA_REGN_&ARG)        * Declare number field for reg\n&REG     SETA  &(BXA_REGN_&ARG)        * Extract register number\n         AIF   ('&(BXA_REGT_&ARG)' NE 'g').ERR3B * Invalid reg type\n.*\n.LOOP3AD ANOP  ,                       * Valid reg. Add to tables\n&R       SETA  &REG+1                  * Increment reg, to obtain index\n         AIF   (NOT &BXA_USED_REGS(&R)).NOERR3D\n&ARG     SETC  (DOUBLE '&ARG')\n.ERR3D   MNOTE 4,'Register &ARG currently not available for USING'\n.NOERR3D ANOP\n&O       SETA  &I-2                    * Ordinal-1 of this base reg.\n&O       SETA  4096*&O                 * Determine offset from &DSECT\n&BXA_USED_REGS(&R) SETB 1              * Indicate register is in use\n&N       SETA  &BXA_USENDX1(&BXA_USENDX)+1 * Get pointer to free entry\n&BXA_USELBL(&N) SETC '&LABEL'          * Save label in table\n&BXA_USEREG(&N) SETA &R                * and register index value\n&BXA_USEFLD(&N) SETC '&DSECT+&O'       * and base location\n&BXA_USENDX1(&BXA_USENDX) SETA &N      * And update high valid ptr\n.*\n.LOOP3R0 ANOP  ,                       * Check for using R0\n         AIF   (&REG EQ 0).ERR3C       * Cannot use register 0\n         AGO   .LOOP3\n.*\n.ERR3A   MNOTE 8,'Missing argument in list of registers'\n         AGO   .LOOP3\n.ERR3B   ANOP\n&ARG     SETC  (DOUBLE '&ARG')\n         MNOTE 8,'Specified argument &ARG is not a general purpose regi*\n               ster'\n         AGO   .LOOP3\n.ERR3C   MNOTE 8,'You cannot use register 0 to address the specified ar*\n               ea of storage'\n         AGO   .LOOP3\n.LOOP3OK ANOP\n.NOERR3  ANOP\n.*\n.* Build &ARGS from &SYSLIST\n&I       SETA  0                       * I indexes &SYSLIST\n.LOOP1   ANOP  ,                       * For all entries in SYSLIST\n&I       SETA  &I+1                    * Point next entry\n         AIF   (&I GT N'&SYSLIST).LOOP1OK * At end: quit loop\n&ARGS    SETC  '&ARGS'.','.'&SYSLIST(&I)' * Add entry to ARGS\n         AGO   .LOOP1                  * And go process next entry\n.LOOP1OK ANOP\n&ARGS    SETC  '&ARGS'(2,*)            * Remove leading comma\n.*\n.* Generate _USING statement\n&LABEL   _USING &ARGS\n.*\n.* Report current USING status\n         AIF   (NOT &SP_SHOWALL).MEND * Only if SHOWALL requested\n         USEDREGS\n.*\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD": {"ttr": 25862, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x08\\x01\\x17\\x05?\\x01\\x17\\x05?  \\x00}\\x00}\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-02-22T00:00:00", "modifydate": "2017-02-22T20:20:08", "lines": 125, "newlines": 125, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PROCLIB": {"ttr": 25865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x01 \\x11\\x1f\\x01 \\x11\\x1f\\x01\\x00\\x00\\xd4\\x00\\xd4\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-04-20T00:00:00", "modifydate": "2020-04-20T01:00:21", "lines": 212, "newlines": 212, "modlines": 0, "user": "SAMPLIB"}, "text": "./ ADD NAME=BXAASM   0100-20111-20111-0059-00079-00079-00000-BXAPROC 22\n//BXAASM   PROC MEMB=,PROJ=,LVL=\n//*\n//* Assembler\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//* Test-level assembly?\n//TEST     EXEC PGM=BXATEST,PARM='&LVL EQ TEST'\n//STEPLIB  DD   DSN=&HLQ..GOODIES.PROD.LINKLIB,DISP=SHR\n//*\n//* Prod-level assembly?\n//PROD     EXEC PGM=BXATEST,PARM='&LVL EQ PROD'\n//STEPLIB  DD   DSN=&HLQ..GOODIES.PROD.LINKLIB,DISP=SHR\n//*\n//* Copy source member to be used\n//*\n//COPY     EXEC PGM=BXACOPY,PARM='MEMBER=&MEMB'\n//STEPLIB  DD   DSN=&HLQ..GOODIES.PROD.LINKLIB,DISP=SHR\n//INPUT    DD   DSN=&HLQ..&PROJ..&LVL..ASM,DISP=SHR\n//         DD   DSN=&HLQ..&PROJ..PROD.ASM,DISP=SHR\n//OUTPUT   DD   SPACE=(TRK,(10,10,1),RLSE),DISP=(NEW,PASS,DELETE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920),\n//             DSN=&&ASM(&MEMB),UNIT=SYSALLDA\n//*\n//* Invoke assembler, using default parms for TEST\n//*\n//         IF   (TEST.RC = 0) THEN\n//ASMTEST  EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,TERM,\n//             'SYSPARM(SRLIST,DBG,OPT)')\n//*             Primary input: assembly source code\n//SYSIN    DD   DSN=&&ASM(&MEMB),DISP=(OLD,DELETE,DELETE)\n//*             Macro libraries\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=&HLQ..ASMPLUS.&LVL..MACLIB,DISP=SHR\n//         DD   DSN=&HLQ..ASMPLUS.PROD.MACLIB,DISP=SHR\n//         DD   DSN=&HLQ..&PROJ..&LVL..MACLIB,DISP=SHR\n//         DD   DSN=&HLQ..&PROJ..PROD.MACLIB,DISP=SHR\n//*             Assembler temp work dataset\n//SYSUT1   DD   DSN=&&SYSUT1,SPACE=(4096,(256,256),,,ROUND),\n//             UNIT=VIO,DCB=BUFNO=1\n//*             Listing data set\n//SYSPRINT DD   DSN=&HLQ..&PROJ..&LVL..ASM.LIST(&MEMB),DISP=SHR\n//*             Terminal listing data set\n//SYSTERM  DD   SYSOUT=*\n//*             Deck output data set\n//SYSPUNCH DD   DUMMY\n//*             Object output data set\n//SYSLIN   DD   DSN=&HLQ..&PROJ..&LVL..OBJ(&MEMB),DISP=SHR\n//*\n//         ENDIF\n//*\n//* Invoke assembler, using default parms for PROD\n//*\n//         IF   (PROD.RC = 0) THEN\n//ASMPROD  EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,TERM,\n//             'SYSPARM(SRLIST,NODBG,OPT)')\n//*             Primary input: assembly source code\n//SYSIN    DD   DSN=&&ASM(&MEMB),DISP=(OLD,DELETE,DELETE)\n//*             Macro libraries\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=&HLQ..ASMPLUS.PROD.MACLIB,DISP=SHR\n//         DD   DSN=&HLQ..&PROJ..PROD.MACLIB,DISP=SHR\n//*             Assembler temp work dataset\n//SYSUT1   DD   DSN=&&SYSUT1,SPACE=(4096,(256,256),,,ROUND),\n//             UNIT=VIO,DCB=BUFNO=1\n//*             Listing data set\n//SYSPRINT DD   DSN=&HLQ..&PROJ..PROD.ASM.LIST(&MEMB),DISP=SHR\n//*             Terminal listing data set\n//SYSTERM  DD   SYSOUT=*\n//*             Deck output data set\n//SYSPUNCH DD   DUMMY\n//*             Object output data set\n//SYSLIN   DD   DSN=&HLQ..&PROJ..PROD.OBJ(&MEMB),DISP=SHR\n//*\n//         ENDIF\n//*\n//         PEND\n./ ADD NAME=BXAASMA  0100-20111-20111-0059-00030-00030-00000-BXAPROC 22\n//BXAASMA  PROC MEMB=,PROJ=,LVL=\n//*\n//* Assembler for CRTxxxxx jobs\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//* Invoke assembler, using default parms for PROD\n//*\n//ASM      EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,TERM,\n//             'SYSPARM(SRLIST,NODBG,OPT)')\n//*             Primary input: assembly source code\n//SYSIN    DD   DSN=&HLQ..&PROJ..&LVL..ASM(&MEMB),DISP=SHR\n//*             Macro libraries\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=&HLQ..ASMPLUS.&LVL..MACLIB,DISP=SHR\n//         DD   DSN=&HLQ..&PROJ..&LVL..MACLIB,DISP=SHR\n//*             Assembler temp work dataset\n//SYSUT1   DD   DSN=&&SYSUT1,SPACE=(4096,(256,256),,,ROUND),\n//             UNIT=VIO,DCB=BUFNO=1\n//*             Listing data set\n//SYSPRINT DD   DSN=&HLQ..&PROJ..&LVL..ASM.LIST(&MEMB),DISP=SHR\n//*             Terminal listing data set\n//SYSTERM  DD   SYSOUT=*\n//*             Deck output data set\n//SYSPUNCH DD   DUMMY\n//*             Object output data set\n//SYSLIN   DD   DSN=&HLQ..&PROJ..&LVL..OBJ(&MEMB),DISP=SHR\n//*\n//         PEND\n./ ADD NAME=BXACBL   0100-20111-20111-0059-00038-00038-00000-BXAPROC 22\n//BXACBL   PROC MEMB=,PROJ=,LVL=\n//*\n//* Cobol compiler\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//* Copy source member to be used\n//*\n//COPY     EXEC PGM=BXACOPY,PARM='MEMBER=&MEMB'\n//STEPLIB  DD   DSN=&HLQ..GOODIES.PROD.LINKLIB,DISP=SHR\n//INPUT    DD   DSN=&HLQ..&PROJ..&LVL..CBL,DISP=SHR\n//         DD   DSN=&HLQ..&PROJ..PROD.CBL,DISP=SHR\n//OUTPUT   DD   SPACE=(TRK,(10,10,1),RLSE),DISP=(NEW,PASS,DELETE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920),\n//             DSN=&&CBL(&MEMB),UNIT=SYSALLDA\n//*\n//* Invoke Cobol compiler using default parms\n//*\n//CBL      EXEC PGM=IGYCRCTL,REGION=4096K,\n//             PARM=('RENT')\n//STEPLIB  DD   DSNAME=IGY.SIGYCOMP,DISP=SHR\n//*\n//*        Primary input: cobol source code\n//SYSIN    DD   DSN=&&CBL(&MEMB),DISP=(OLD,DELETE,DELETE)\n//*        Compiler temp work datasets\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT2   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT4   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT5   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT6   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT7   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//*        Listing dataset\n//SYSPRINT DD   DSN=&HLQ..&PROJ..&LVL..CBL.LIST(&MEMB),DISP=SHR\n//*        Object output dataset\n//SYSLIN   DD   DSN=&HLQ..&PROJ..&LVL..OBJ(&MEMB),DISP=SHR\n//*\n//         PEND\n./ ADD NAME=BXAIEWL  0100-20111-20111-0059-00023-00023-00000-BXAPROC 23\n//BXAIEWL  PROC MEMB=,PROJ=,LVL=\n//*\n//* Linkage-editor for CRTxxxxx jobs\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//* Invoke linkage editor, using default parms\n//*\n//LKED     EXEC PGM=IEWL,PARM=('MAP,XREF,LIST')\n//*             Primary input: LKED source member\n//SYSLIN   DD   DSN=&HLQ..&PROJ..&LVL..LKED(&MEMB),DISP=SHR\n//*             Additional input: object libraries\n//OBJECTS  DD   DSN=&HLQ..&PROJ..&LVL..OBJ,DISP=SHR\n//         DD   DSN=&HLQ..&PROJ..PROD.OBJ,DISP=SHR\n//*             Linkage editor work data set\n//SYSUT1   DD   DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),\n//             UNIT=VIO,DCB=BUFNO=1\n//*             Listing data set\n//SYSPRINT DD   DSN=&HLQ..&PROJ..&LVL..LKED.LIST(&MEMB),DISP=SHR\n//*             Load module output data set\n//SYSLMOD  DD   DSN=&HLQ..&PROJ..&LVL..LINKLIB(&MEMB),DISP=SHR\n//*\n//         PEND\n./ ADD NAME=BXALKED  0100-20111-20111-0059-00037-00037-00000-BXAPROC 23\n//BXALKED  PROC MEMB=,PROJ=,LVL=\n//*\n//* Linkage-editor\n//*\n//         SET  HLQ=TCL2KOR.BXA          High Level Qualifiers\n//*\n//* Copy source member to be used\n//*\n//COPY     EXEC PGM=BXACOPY,PARM='MEMBER=&MEMB'\n//STEPLIB  DD   DSN=&HLQ..GOODIES.PROD.LINKLIB,DISP=SHR\n//INPUT    DD   DSN=&HLQ..&PROJ..&LVL..LKED,DISP=SHR\n//         DD   DSN=&HLQ..&PROJ..PROD.LKED,DISP=SHR\n//OUTPUT   DD   SPACE=(TRK,(10,10,1),RLSE),DISP=(NEW,PASS,DELETE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920),\n//             DSN=&&LKED(&MEMB),UNIT=SYSALLDA\n//*\n//* Invoke linkage editor, using default parms\n//*\n//LKED     EXEC PGM=IEWL,PARM=('MAP,XREF,LIST')\n//*             Primary input: LKED source member\n//SYSLIN   DD   DSN=&&LKED(&MEMB),DISP=(OLD,DELETE,DELETE)\n//*             Additional input: object libraries\n//OBJECTS  DD   DSN=&HLQ..&PROJ..&LVL..OBJ,DISP=SHR\n//         DD   DSN=&HLQ..&PROJ..PROD.OBJ,DISP=SHR\n//*             Additional input: cobol modules\n//COBOL    DD   DSN=CEE.SCEELKED,DISP=SHR\n//*             Additional input: language environment modules\n//LE       DD   DSN=CEE.SCEELKED,DISP=SHR\n//*             Linkage editor work data set\n//SYSUT1   DD   DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),\n//             UNIT=VIO,DCB=BUFNO=1\n//*             Listing data set\n//SYSPRINT DD   DSN=&HLQ..&PROJ..&LVL..LKED.LIST(&MEMB),DISP=SHR\n//*             Load module output data set\n//SYSLMOD  DD   DSN=&HLQ..&PROJ..&LVL..LINKLIB(&MEMB),DISP=SHR\n//*\n//         PEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT884/FILE884.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT884", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}