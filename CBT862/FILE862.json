{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013128000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 11698414, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE862.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 11698414, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 11698414, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE862.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\xb2\\n'", "DS1TRBAL": "b'\\x0b\\xb0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07O\\x00\\x06\\x07[\\x00\\x04\\x00\\xb3'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00C\\x01\\x191\\x7f\\x01\\x191\\x7f\\x11\\x18\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-11-13T00:00:00", "modifydate": "2019-11-13T11:18:43", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  862\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE862\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 11 MEMBERS COUNTED; CUMULATIVE SIZE IS 111,122 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/13/19    11:18:43    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE862": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x005\\x01\\x191\\x7f\\x01\\x191\\x7f\\x11\\x18\\x00>\\x00>\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-11-13T00:00:00", "modifydate": "2019-11-13T11:18:35", "lines": 62, "newlines": 62, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 862 is from Gerhard Postpischil and contains members      *   FILE 862\n//*           which are each really IEBUPDTE (PDSLOAD) unloaded     *   FILE 862\n//*           pds'es.  These are related to Gerhard's contributions *   FILE 862\n//*           on Files 860 and 861, but they are in addition to     *   FILE 862\n//*           them.  And some of his documentation in the DOC       *   FILE 862\n//*           member, may apply to the materials in File 860.       *   FILE 862\n//*                                                                 *   FILE 862\n//*       My dear friend, and programmer par excellence, Gerhard    *   FILE 862\n//*       Postpischil, has passed away.  Please send support        *   FILE 862\n//*       requests to:   Sam Golob  email: sbgolob@cbttape.org      *   FILE 862\n//*                                                                 *   FILE 862\n//*           Member LOADLIB is in TSO XMIT format.                 *   FILE 862\n//*                                                                 *   FILE 862\n//*           Member REVLMOD is in REVIEW REVLMOD format, to help   *   FILE 862\n//*           the MVS 3.8 people recreate the load library.         *   FILE 862\n//*                                                                 *   FILE 862\n//*     - - - - - - - - - - - - - - - - - - - - - - - - - - - -     *   FILE 862\n//*                                                                 *   FILE 862\n//*     Description and Notes for use:                              *   FILE 862\n//*                                                                 *   FILE 862\n//*     Files 860, 861, and 862 should really be looked at          *   FILE 862\n//*     together.                                                   *   FILE 862\n//*                                                                 *   FILE 862\n//*     This file (860) contains (mostly) assembler programs        *   FILE 862\n//*     without JCL.                                                *   FILE 862\n//*                                                                 *   FILE 862\n//*     File 861 contains most macros required for proper           *   FILE 862\n//*     assembly.                                                   *   FILE 862\n//*                                                                 *   FILE 862\n//*     File 862 contains additional files with procedures,         *   FILE 862\n//*     parmlib data, and other supporting material. It also        *   FILE 862\n//*     contains auxiliary macros, as PVTMACS, once available       *   FILE 862\n//*     from IBM on optional source material tapes. Some            *   FILE 862\n//*     macros not available have been concocted from dumps         *   FILE 862\n//*     or IBM documentation.                                       *   FILE 862\n//*                                                                 *   FILE 862\n//*     The programs all ran in production at some point, but       *   FILE 862\n//*     some were used under OS/360 only, and some only under       *   FILE 862\n//*     MVS/ESA and later. A few members came straight from the     *   FILE 862\n//*     CBT for me to look at, but haven't been used yet (e.g.,     *   FILE 862\n//*     the HASPX exits, DSAT9).                                    *   FILE 862\n//*                                                                 *   FILE 862\n//*     Before assembling anything, look at members OPTIONGB and    *   FILE 862\n//*     SYSPARM in the macro file. If you have any of the SVCs      *   FILE 862\n//*     installed, set their SVC numbers correctly (OS/360,         *   FILE 862\n//*     pre-XA only - not used in later systems).  The exception    *   FILE 862\n//*     is @SERVICE, described later. Note that the options have    *   FILE 862\n//*     provision for ESA and later systems, but only a few         *   FILE 862\n//*     members will function correctly. Note that large 3390s      *   FILE 862\n//*     were never used nor tested.  If you wish to start from      *   FILE 862\n//*     scratch and assemble/link everything, run the SUBnnnnn      *   FILE 862\n//*     modules first, then the @nnnnnnn modules (only one of       *   FILE 862\n//*     the @SRVJnnn module, matching your JES2 release; this       *   FILE 862\n//*     module needs the alias @SRVJES2). Then do individual        *   FILE 862\n//*     programs as desired.                                        *   FILE 862\n//*                                                                 *   FILE 862\n//*     Some modules will not assemble because the macros they      *   FILE 862\n//*     reference (USERCVT, USERVOLT, A$GDA, ...) are parts of      *   FILE 862\n//*     a proprietary security and accounting system. However,      *   FILE 862\n//*     the code may still be useful as groundwork for your own     *   FILE 862\n//*     adaptations.                                                *   FILE 862\n//*                                                                 *   FILE 862\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x13#\\x7f\\x01\\x13#\\x7f\\x12\\x11/;/;\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-08-25T00:00:00", "modifydate": "2013-08-25T12:11:00", "lines": 12091, "newlines": 12091, "modlines": 0, "user": "GERHARD"}, "text": "./ ADD NAME=SYSGUIDE 0100-13237-13237-1202-09779-09779-00000-GERHARD\n1                                    Start on third or fourth print line\n\n\n \u00d0\u00d7\u00d7\u00d7\u00af\n |   |\n \u00bf\u00d7\u00d7\u00d7]                              Right edge should be at or over perforation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u00d0\u00d7\u00d7\u00d7\u00af\n |   |\n |   |\n \u00bf\u00d7\u00d7\u00d7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u00d0\u00d7\u00d7\u00d7\u00af\n |   |\n \u00bf\u00d7\u00d7\u00d7]\n\n1                                    Start on third or fourth print line\n\n\n \u00d0\u00d7\u00d7\u00d7\u00af\n |   |\n \u00bf\u00d7\u00d7\u00d7]                              Right edge should be at or over perforation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u00d0\u00d7\u00d7\u00d7\u00af\n |   |\n |   |\n \u00bf\u00d7\u00d7\u00d7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \u00d0\u00d7\u00d7\u00d7\u00af\n |   |\n \u00bf\u00d7\u00d7\u00d7]\n\n1\n-\n0\n-\n-\n-\n-                                    Technical Guide\n0                                           to\n0                             Operating System Modifications\n0                                  and System Utilities\n-\n0                                   ******************\n                                   *                  *\n                                   * ****   ***  ***  *\n                                   * *     *     *  * *\n                                   * ***    **   ***  *\n                                   * *        *  *    *\n                                   * ****  ***   *    *\n                                   *                  *\n                                   ********************\n                                  *.::::::::::::::::::.*\n                                 ************************\n-\n-\n                                     Copyright -7 by\n                             Expert System Programming, Inc.\n                                    347 Orchard Street\n                                    Vienna, Va. 22180\n0                                     (703) 938-1928\n-\n                                  Printed on May 5, 1991\n1\n-\n0                                 INTRODUCTION\n+                                 INTRODUCTION\n-    This manual describes the system modifications  that have been made by\n     ESP  at  the  Dial-Tyme computer  facility  (DTS),   and  additionally\n     describes the procedures,  macros,  subroutines  and programs used for\n     maintenance.\n0    The  installation  instructions  refer  to  a  tape  labelled  ESPDTR,\n     available from  ESP,  which is distributed  subject to the  same rules\n     used by SHARE, Inc. for program and modifications exchange.\n0    The programs and this manual contain proprietary material, and may not\n     be copied without the consent of Expert System Programming,  Inc.,  as\n     described in member $$RIGHTS contained in the primary source and macro\n     files.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    ii\n1                        Technical Guide to System Modifications\n          Installation and Maintenance\n-\n                                        Section 1\n+                                       Section 1\n0                              INSTALLATION AND MAINTENANCE\n+                              INSTALLATION AND MAINTENANCE\n-         The programs,  macros and system changes  described in this manual are\n          available  to any  requesting  installation.    Note that  distributed\n          load-module   libraries   contain  programs   assembled   with   local\n          dependencies,   and may  need  to be  re-assembled.   Before any  such\n          re-assembly, you must update member SYSPARM in the macro library.  Set\n+                          must\n          the defaults to suit your installation.\n0         Distribution  is  made  on  a requestor's  tape;   the  tape  will  be\n          accompanied by  the listing of the  job that produced  it.   Formatted\n          documentation is included in duplex mode  (intended to be printed on a\n          printer producing both sides of a page);   if you have no such access,\n          you  need to  restore the  Waterloo SCRIPT  files and  use SCRIPTW  to\n          produce documentation (remove \"SIDES=BOTH\" from the SYSPUB invokations\n          and change \".et\" and \".eb\" titles/footers as desired).\n0         With the exception of the formatted print files,  all other tape files\n          are in  IEBCOPY format  and generally  have blocksizes  appropriate to\n          3380s.\n0         ESP continually improves and fixes this code, but has no provision for\n          automatic distribution of  updates.  Should you want  an update,  just\n          complete the USER REGISTRATION form in  back of this manual and return\n          it with a 2400-foot 9-track tape.\n0         ESP makes no warranties,  assumed or  implied,  for the correctness or\n+         ESP makes no warranties   assumed or  implied   for the correctness or\n          validity of the distributed code.\n+         validity of the distributed code\n-\n-\n-\n-\n-\n-\n-\n-                                                                              1\n1                   Technical Guide to System Modifications\n     Program Services\n-\n                                   Section 2\n+                                  Section 2\n0                               PROGRAM SERVICES\n+                               PROGRAM SERVICES\n-    2.1   PROGRAM ORGANIZATION\n+    2.1   PROGRAM ORGANIZATION\n+          _______ ____________\n0    The  utility routines  consist  of a  set  of  common subroutines  and\n     subprograms,  and the utility programs  proper.  Also included in this\n     description are routines  which are maintained,  but not  used by ESP,\n     such as the RANDU random number subroutine for FORTRAN users.\n0    With the exception of big letter  routine IEFSD095,  which is based on\n     the OS Writer subroutine of the same name, all subprograms have a name\n     starting with an at sign, \"@\".  The newer routines are re-entrant, and\n     may be  placed in  the Pageable  Link-Pack area.   The basic  @SERVICE\n     routine has an optional SVC entry point,  as determined by the setting\n     of &SVC@SVC  in macro SYSPARM.  When  the SVC number is  set non-zero,\n     then the @SERVICE routine  must be added to LPA (either  PLPA or MLPA)\n     along with its SVC entry name alias.\n0    When the ESP macro library is installed, the contents of macro library\n     members OPTIONGB and SYSPARM should be reviewed.  COPY member OPTIONGB\n     contains global SET definitions; SYSPARM assigns values to these based\n     on the SYSPARM,  if any,  and its  own defaults.   It is required that\n     variable &LOCAL be changed;   it should be set to your  SHARE or GUIDE\n     installation code,   else to a five  to eight character  string.   The\n     values ESP and CCSI are reserved.\n-\n     2.2   UTILITY PROGRAMS\n+    2.2   UTILITY PROGRAMS\n+          _______ ________\n-\n-\n-\n-\n-\n-\n-\n0    2\n1                        Technical Guide to System Modifications\n          Utility Programs                                              ALTTRACK\n-         2.2.1   Alternate Track List .................................ALTTRACK\n+         2.2.1   Alternate Track List                                  ALTTRACK\n+                 _________ _____ ____                                  ________\n0         The ALTTRACK program has four functions.\n0            1.  With  PARM=QUICK,  it  prints a  listing  of used  alternate\n                 tracks, as read from the alternate track area on disk.\n0            2.  With a  null PARM,  it  reads each  track on the  disk,  and\n                 prints alternate track assignments.\n0            3.  With PARM=SKIP, valid for modulo devices only, it reads each\n                 track and prints non-standard skip offsets. This mode may be\n                 used to help anticipate failing tracks.\n0            4.  When  invoked as  PGM=FIXTRACK,   with a  PARM  of the  form\n                 \"cccchhhh\",  it reads the specified  track,  and invokes the\n                 ATLAS SVC to assign an alternate track and copy any readable\n                 data to the new track.\n-                Note that  correct execution of  FIXTRACK requires a  ZAP to\n                 the ATLAS SVC (see member MVSATLAS for details),  to prevent\n                 ATLAS from assigning excessive alternate tracks.\n-         JCL required:\n           //      EXEC  PGM=ALTTRACK,REGION=128K,PARM= none QUICK or SKIP\n           //      EXEC  PGM=FIXTRACK,REGION=128K,PARM=cccchhhh\n           //SYSPRINT DD SYSOUT=A\n           //SYSUT1   DD UNIT=...,VOL=SER=...,DISP=OLD\n           //SYSUTnnn DD ... for ALTTRACK, but not FIXTRACK, additional DDs.\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                               3\n1                   Technical Guide to System Modifications\n     ASMANY                                                Utility Programs\n-    2.2.2   Multiple Assembler ...................................ASMANY\n+    2.2.2   Multiple Assembler                                    ASMANY\n+            ________ _________                                    ______\n0    The ASMANY utility program is used to maintain all local modules.   It\n     invokes the  assemblers (G,  H and  XF)  and the  linkage-editor,  and\n     assembles modules from diverse partitioned datasets. Multiple assembly\n     and link requests  may be satisfied in  one step.  The program  may be\n     used either to assemble, (and assemble...), then link-edit one module,\n     or it may be used to run  multiple assemblies,  followed by a discrete\n     link-edit  step (normally  with a  condition-code test)   to link  all\n     assembled members into one or more modules.\n0    Required JCL:\n      //      EXEC  PGM=ASMANY,REGION=...,TIME=...,PARM=asm-options\n                     the region should be set according to the assembler\n                     and the time should be set depending on the work load\n      //MSGPRINT DD SYSOUT=A      optional processing message file\n      //ASMTERM, //ASMLIB, //ASMUT1, //ASMUT2, //ASMUT3, //ASMPRINT,\n      //ASMPUNCH, //ASMGO all like the ASM PROC's SYSxxxxx files.\n      //ASMIN    DD DISP=SHR,DSN=...  partitioned dataset\n      //SYSIN    DD *             ASMANY control cards\n      //LNKLMOD  DD               like LKED SYSLMOD\n      //LNKLIB   DD               like LKED SYSLIB\n-    The PGM name may be ASMANY (defaults to IFOX00, the XF Assembler),  or\n     ASMANYG for the U.  of Waterloo assembler,  or ASMANYH for the H-level\n     assembler.\n0    Control cards:\n     Any unrecognized character string beginning in  column 1 is treated as\n     a member  name.  The  card scan  is limited  to columns  1-72,  and  a\n     trailing plus or minus sign may be used as a continuation indicator.\n0        member\n         member sub1 sub2 sub3\n         member: module\n         member: module sub1 sub2\n0    The first  of the above  forms would  cause ASMANY to  assembly source\n     module  \"member\",  and  create link-edit  information for  load-module\n     \"member\".  The second form assembles source modules \"member\",  \"sub1\",\n     \"sub2\" and \"sub3\",  and creates  link-edit information for load-module\n     \"member\".  The third form would  assemble source member \"module\",  and\n     create link-edit information for load-module \"member\". The fourth form\n     assembles \"module\", \"sub1\" and \"sub2\",  and creates link-edit controls\n     for load-module \"member\".\n0    When the LNKLIB and LNKLMOD DD cards are provided,  additional options\n     may be used:\n          %LINK   member\u00dd:\u00a8 module...\n          %RELINK member\u00dd:\u00a8 module...\n          %NEWLINK member\u00dd:\u00a8 module...\n-\n     4\n1                        Technical Guide to System Modifications\n          Utility Programs                                                ASMANY\n-         The form %LINK causes assembly and link-edit controls as described for\n          the plain \"member\" cards,  but the link-edit control information (SSI,\n          PAGE, AC, RENT,  REFR,  REUS,  OVLY,  TEST,  etc.)  are taken from the\n          existing load-module  \"member\" in LNKLMOD,   if found there,   or from\n          LNKLIB. Processing ceases if the module is not found. The form %RELINK\n          works like %LINK, but also copies all ALIAS entries.  Note that due to\n          local conventions for SSI (the form is 000yyddd),  when the old member\n          has an SSI of this form,  the new SSI will not be copied,  but changed\n          to  the current  date.   %NEWLINK  works  as %RELINK  for an  existing\n          member,   but uses  current  link-edit options  for  new members  (see\n          %LKEDPARM).\n-         Processing control options:\n          * in column 1 causes a WTOR to be generated. The operator is given the\n          opportunity to respond to the WTOR  to cause program termination after\n          the next assembly. This is mainly used for attended job execution, not\n          operator intervention. Note that ASMANY responds to OS MODIFY commands\n          (F jobname,?   to solicit  the current member  name,  STOP  jobname to\n          quit).\n0         DSN=datasetname causes the subsequent assemblies  to run from the JFCB\n          determined by the DD card in control (ASMIN by default),  with the DSN\n          altered. It may be used to change PDSs that reside on the same volume.\n0         DDN=ddname causes all  assemblies to be run from the  PDS specified on\n          the DD card with the specified name.\n0         DDLMOD=ddname causes subsequent assemblies to use the specified DD for\n          load-module output.   The special form  DDLMOD=DYNALLOC may be used to\n          request dynamic allocation (creation) of a DD for the library in which\n          %LINK,  %NEWLINK or  %RELINK located the member,  or  the first LNKLIB\n          concatenated library when %NEWLINK is requested for a new member.\n0         % in column 1, with no operands,  causes generation of SSI and NAME(R)\n          cards for \"member\"  assemblies (i.e.,  when the  %LINK/%RELINK options\n          are not used).  This mode is the default,  and the generated SSI is of\n          the form 000yyddd.\n0         %OFF     in column 1 suppresses generation  of the SSI and NAME cards.\n          This form must be used when a module consists of subroutines that need\n          to be assembled from different libraries. For instance:\n                   DSN=SYS1.SUBRTNE\n                   %OFF\n                   sub1\n                   sub2\n                   DSN=SYS1.MAINSRC\n                   %\n                   main\n0         The above sequence would assemble subroutines \"sub1\" and \"sub2\" from a\n          PDS  named  SYS1.SUBRTNE,   then  assemble   member  \"main\"  from  PDS\n          SYS1.MAINSRC, and generate an SSI and NAME main(R) control cards.   In\n-                                                                              5\n1                   Technical Guide to System Modifications\n     ASMANY                                                Utility Programs\n-    the above case, an ORDER and ENTRY card would be strongly recommended.\n     %LKEDPARM  sets   common  link-edit   options  (unaffected   by  other\n     modifications).  Default is  TERM,LET,LIST,MAP,SIZE=(400K,100K).   The\n     default is  used when no  operands appear;  otherwise,   the specified\n     string is moved into the PARM field as is.\n0    %LKEDDFLT specifies  options to  be appended to  the LKEDPARM  for new\n     members processed with the %NEWLINK option.   Permissible operands are\n     RENT, TEST, LOAD, OLAY, SCTR, OVLY,  REFR,  RENT,  REUS,  OL,  and DC.\n     Specified options must be separated only by blanks.  With no operands,\n     the card nullifies all options.\n0    %LKEDON  specifies options  (as  above for  LKEDDFLT)   for %LINK  and\n     %RELINK members.  The  specified options are ORed  against those found\n     for the member.\n0    %LKEDOFF specifies options (as described for LKEDDFLT)  that are to be\n     turned  off in  %LINK  and %RELINK  members.    Typical  use might  be\n     %LKEDOFF OLAY to relink IEBCOPY (or some other IBM utilities)  without\n     the Overlay option.\n0    %XEROX or  %9700 specifies that  this output will  go to a  XEROX 9700\n     family LASER printer,  and that slightly different EJECT processing is\n     needed at  the beginning of each  member (sheet feed).    This options\n     requires co-requisite  changes in module  @PRINTER.   The  form %XEROX\n     AUXILIARY TRAY causes separator pages to  be picked from the alternate\n     feed tray.\n0    blank or hex '02' in column 1  is used for link-edit input and control\n     cards.  In the above sequence,  a card  with a blank in column 1,  and\n     text of  \"ENTRY MAIN\",   could have  been used  anywhere prior  to the\n     \"main\" card. This option also supports inclusion of object decks.\n0    + in column 1  indicates a control card which is  written to the ASMGO\n     file after the current assembly completes, but before the SSI and NAME\n     cards are generated.  The  plus is changed to a blank.   Up to sixteen\n     cards may be stacked.\n0    %NOSVC inhibits name conversion.  By default, the trailing zero in the\n     source  member name  IGCnnnn0 is  converted  to hex  'C0',  under  the\n     assumption that the name is that of an SVC.\n0    SSI=blanks suppresses generation of SSI cards, but not of NAME cards.\n0    SSI=value causes all SSI cards to be punched with the indicated value.\n0    %SEP causes  a two-page  separator to  be written  between assemblies.\n     The separator  is suppressed  when the  ASMPRINT file  is a  PDS.  The\n     separator is written  by default.  Contents are the  date,  the module\n     name, and the abbreviated datasetname.\n0    %NOSEP inhibits separator production.\n0    SEP=2 causes production of a two-line separator, the default at CCSI.\n0    6\n1                        Technical Guide to System Modifications\n          Utility Programs                                                ASMANY\n-         SEP=3 causes production of a three-line separator, the standard mode.\n0         SEP=NO and SEP=YES are alternate forms of %SEP and %NOSEP.\n0         ID=data  may be  used  to set  the  data  for the  third  line of  the\n          separator page, and is specified as one to eight characters.  The DDN=\n          and DSN= options reset the name.\n0         %PAGE causes generation of a \"  PAGE member\" control card whenever the\n          NAME card is written.\n0         %NOPAGE inhibits production of the PAGE card.\n0         COND=value  or   CODE=value  may  be   used  to   control  consecutive\n          assemblies.   The  value specified is  the lowest  unacceptable return\n          code.  There  is no  default.  Note that  an abend  in an  assembly is\n          reported as a return code of 4095.\n0         COND=RESET may  be used  to clear the  current condition  code.   This\n          request does not change the eventual step completion code,  which will\n          be  the  highest  code encountered.    It  solely  affects  subsequent\n          assembly/link tests.   This  option is used when  errors are expected,\n          and continued processing is required; as for instance when a link-edit\n          yields  a  return  code  of   four  due  to  intentionally  unresolved\n          references.   Note that this option also requires that the appropriate\n          COND and LKEDCOND vaues be set to prevent program termination prior to\n          reaching the RESET request.  For example:\n                   COND=12             expect assembly rc of 8\n                   BADASM              assemble bad module\n                   COND=RESET          ignore the error\n                   COND=0              reset of assemblies must be good\n0         LKEDCOND=value  or  LKEDCODE=value  may  be used  to  set  the  lowest\n          unacceptable  return  code   that  will  inhibit  invokation   of  the\n          linkage-editor. The default is 4.\n0         Note that the MSGPRINT DD card may be replaced by a DD named CONPRINT.\n          The  presence of  CONPRINT causes  all messages  to be  echoed to  the\n          console, as well as written to the CONPRINT file.\n0         The ASMPRINT and ASMPUNCH datasets may be partitioned.  When they are,\n          separators are not written, and the output is stowed with the member's\n          source name.  The PDS option requires that the MODJFCB SVC (by default\n          SVC 240)  be installed in the system,  and that the &SVCJFCB parameter\n          in macro SYSPARM be set accordingly.\n0         The  ASMIN dataset  specifies  the PDS  containing  the  member to  be\n          assembled.  In order to make maintenance and testing easier,  any step\n          assembling only  a single module may  use a sequential  ASMIN dataset,\n          including a DD * or DD DATA.\n-\n-                                                                              7\n1                   Technical Guide to System Modifications\n     BLOCKPRT                                              Utility Programs\n-    2.2.3   Tape Print ...........................................BLOCKPRT\n+    2.2.3   Tape Print                                            BLOCKPRT\n+            ____ _____                                            ________\n0    The BLOCKPRT  program prints tape  or disk  resident print files  on a\n     dedicated  printer.  Options  for  restart,   backspacing and  forward\n     spacing are available on a run and page basis, providing the user uses\n     channel 1 (or other channel skips) that may be used for page counting.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    8\n1                        Technical Guide to System Modifications\n          Utility Programs                                              CAPACITY\n-         2.2.4   DASD Capacity ........................................CAPACITY\n+         2.2.4   DASD Capacity                                         CAPACITY\n+                 ____ ________                                         ________\n0         The CAPACITY program requires a SYSPRINT  DD card,  and produces track\n          capacity  listings  for all  DASD  devices  supported by  the  current\n          system.  The information is produced for keyed and unkeyed blocks, and\n          for different key lengths for modulo devices.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                              9\n1                   Technical Guide to System Modifications\n     CATCLEAN                                              Utility Programs\n-    2.2.5   Catalog Clean-up .....................................CATCLEAN\n+    2.2.5   Catalog Clean-up                                      CATCLEAN\n+            _______ ________                                      ________\n0    CATCLEAN  is used  in  the weekly  clean-up  of  the system  catalogs.\n     Non-VSAM entries in the master catalog (on each system) are restricted\n     to CVOL pointers  and the associated index alias  entries.  Entries in\n     the WYLBUR  catalog are restricted  to existing WYLBUR  datasets,  and\n     entries on the  TSO and LIBPAK volumes are  similarly restricted.  The\n     program reads through  all catalogs specified on  //CATALOGn DD cards,\n     sends the result to be sorted by volume serial,  and then verifies the\n     existence of  each dataset.  Entries  for volumes  not in the  TMC are\n     deleted unconditionally.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    10\n1                        Technical Guide to System Modifications\n          Utility Programs                                               CATEDIT\n-         2.2.6   Catalog Clean-up .....................................CATEDIT\n+         2.2.6   Catalog Clean-up                                      CATEDIT\n+                 _______ ________                                      _______\n0         The CATEDIT program is used as necessary to update non-VSAM entries in\n          the master catalog. The default invokation searches the master catalog\n          and all  connected CVOLs.  With  PARM=QUICK,  only the  master catalog\n          search is performed.  Datasets that  are not located are uncatalogued.\n          For the  master catalog,  entries are  recatalogued when the  DSCB TTR\n          field is zero or incorrect.\n0         Suggested JCL:\n           //     EXEC  PGM=CATEDIT,REGION=2048K,PARM=QUICK\n           //SYSPRINT DD SYSOUT=A\n           //SYSUT1   DD UNIT=VIO,SPACE=(CYL,(8,2)),DCB=BLKSIZE=3120\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              11\n1                   Technical Guide to System Modifications\n     CATLIST                                               Utility Programs\n-    2.2.7   VSAM Catalog Lister ..................................CATLIST\n+    2.2.7   VSAM Catalog Lister                                   CATLIST\n+            ____ _______ ______                                   _______\n0    Program CATLIST  provies a summary listing  of VSAM and  ICF catalogs.\n     Catalogs other than  the master catalog,  the default,   may be listed\n     using a STEPCAT DD with the correct catalog DSN.\n-    Suggested JCL:\n      //      EXEC  PGM=CATLIST,PARM=volser  default PARM is master\n      //SYSPRINT DD SYSOUT=A\n      //STEPCAT DD DISP=SHR,DSN=catalog.dsn   \u00ddnon-master catalogs only\u00a8\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    12\n1                        Technical Guide to System Modifications\n          Utility Programs                                               CDSLIST\n-         2.2.8   SMP Lister ...........................................CDSLIST\n+         2.2.8   SMP Lister                                            CDSLIST\n+                 ___ ______                                            _______\n0         This program  lists SMP Version 4  CDS information,  and has  not been\n          upgraded for SMP/E\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              13\n1                   Technical Guide to System Modifications\n     CLEARDSN                                              Utility Programs\n-    2.2.9   Dataset Initialization ...............................CLEARDSN\n+    2.2.9   Dataset Initialization                                CLEARDSN\n+            _______ ______________                                ________\n0    Entry CLEARDA initializes Direct Access datasets.    It may be used to\n     initialize FORTRAN Direct files (faster).\n0    Entry CLEARDSN of this program erases all tracks of a dataset.   Entry\n     CLEAREOF locates the last record in a pre-cleared dataset, and adds an\n     end-file (and updates LSTAR)  as necessary.   In combination,  the two\n     functions may be used to maintain sequential datasets over system/line\n     crashes.\n0       1.  Allocate  the dataset  with a  unique  DD name  of the  form\n            SYSUTnnn.\n0       2.  Run  CLEARDSN to  initialize all  allocated SYSUT  datasets;\n            CLEARDSN will write an end-file on each track, and erase the\n            remainder of the track.\n0       3.  Using DISP=MOD or OLD, add new records.\n0       4.  Prior to next use (before or after a crash), allocate SYSUTs\n            and run CLEAREOF to ensure correct LSTAR and DISP=MOD usage.\n0    Note that  the SPACE for  these datasets  should not include  the RLSE\n     parameter,  and should be sufficiently large so that normal processing\n     will not allocate additional extents.  When CLEAREOF is run against an\n     uninitialized secondary extent,  it will examine the blocksizes of any\n     records found.   If the sizes are  plausible for the DCB  values,  the\n     records will be considered part of the data;  i.e.,  CLEAREOF may fail\n     to detect  the true end  of the dataset and  include a portion  of the\n     uninitialized section.\n0    CLEARDA  initializes DSORG=DA  datasets specified  with a  DD name  of\n+    CLEARDA\n     SYSUTnnn (as above). Multiple datasets may be processed in one program\n     invokation,  but  the fill character  will be  the same for  all.   By\n     default,  the program uses hex zero for padding.   This may be changed\n     by specifying PARM='FILLc',  where 'c' is a character other than blank\n     or a comma, or PARM=FILLxx,  where 'xx' is the hexadecimal code of the\n     fill character (e.g., PARM=FILL40 for blank fill).\n-\n-\n-\n-\n-\n0    14\n1                        Technical Guide to System Modifications\n          Utility Programs                                              CLEARPDS\n-         2.2.10   Partitioned Dataset Initialization ..................CLEARPDS\n+         2.2.10   Partitioned Dataset Initialization                   CLEARPDS\n+                  ___________ _______ ______________                   ________\n0         This  program physically  re-initializes  the  directory blocks  of  a\n          partitioned dataset, and logically erases the contents.  Use EXPDIR to\n+                                            erases                    EXPDIR\n          change the  number of  directory blocks  in a  PDS without  losing the\n+                                                            without\n          contents.\n0            1.  The program  may be used to  change the number  of directory\n                 blocks in a  PDS by specifying the new number  as PARM=nn on\n                 the EXEC card, and the dataset as SYSLIB.\n0            2.  Multiple  datasets  may be  initialized  (without  directory\n                 block change) using unique SYSLIBnn DD cards.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              15\n1                   Technical Guide to System Modifications\n     COMMENT                                               Utility Programs\n-    2.2.11   Operator Communication ..............................COMMENT\n+    2.2.11   Operator Communication                               COMMENT\n+             ________ _____________                               _______\n0    This program  may be  used to send  messages to  the operator  from an\n     executing job. It may also solicit one response.\n0    Suggested JCL is:\n      //      EXEC  PGM=COMMENT\n      //SYSPRINT DD SYSOUT=A      optional\n      //SYSIN    DD               required\n-    The input data  may consist of free  form comments in columns  1-72 of\n     each card image.  An  asterisk in column 1 will cause  the contents of\n     that card to be  issued as a WTOR;  after the  operator responds,  the\n     program terminates.\n0    Because the cards read are written to the console as DOMable messages,\n     no more than 10 lines should be used to avoid locking up the console.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    16\n1                        Technical Guide to System Modifications\n          Utility Programs                                               CONVERT\n-         2.2.12   Code Conversion .....................................CONVERT\n+         2.2.12   Code Conversion                                      CONVERT\n+                  ____ __________                                      _______\n0         This program converts card images produced  on an IBM 026 keypunch (or\n          with an equivalent character set)  to their IBM 029 equivalents.   The\n          input file is specified on a SYSIN DD, and the output as SYSOUT.  Only\n          record  lengths  up   to  80  bytes  are  supported,    and  full  DCB\n          specifications must be provided from external sources.\n0         The program converts the left and right parentheses, plus sign,  equal\n          sign and apostrophe.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              17\n1                   Technical Guide to System Modifications\n     COPYCAT                                               Utility Programs\n-    2.2.13   Catalog Copy ........................................COPYCAT\n+    2.2.13   Catalog Copy                                         COPYCAT\n+             _______ ____                                         _______\n0    This utility copies, merges or splits OS CVOL catalogs.  It originated\n     at Argonne  National Lab,  and has  since been corrected to  run under\n     MVS.\n-\n0                     COPYCAT - OS CATALOG UTILITY PROGRAM\n                                       BY\n                               DOUGLAS E. ENGERT\n                          APPLIED MATHEMATICS DIVISION\n                          ARGONNE NATIONAL LABORATORY\n                             9700 SOUTH CASS AVENUE\n                            ARGONNE, ILLINOIS 60439\n-     THIS 12-77 VERSION CONTAINS SEVERAL MINOR FIXES FROM ARGONNE\n      (\"F00001\" & \"F00003\") AND A MAJOR SPEED ENHANCEMENT TO THIS\n      ALREADY FAST PROGRAM IN THAT THE CATALOG I/O IS NOW DONE AT\n      EXCP LEVEL (\"EXCP01\").  A FIX FROM UCLA FOR A LITTLE MORE\n      SPEED YET IS ALSO INCLUDED (\"CCN\").  THE HARDCODED BLKSIZES\n      FOR SYSIN AND SYSPRINT HAVE BEEN CHANGED TO 3200 AND 605.\n                                F. PAJERSKI   NASA/GSFC   01DEC77\n-                              TABLE OF CONTENTS\n0       ABSTRACT\n0       1.0 INTRODUCTION\n0       2.0 USER MANUAL\n0         2.1 FUNCTIONS\n0           2.1.1 REDISTRIBUTION\n            2.1.2 RESTRUCTURING\n            2.2.3 MASTER AND SECONDARY CATALOGS\n            2.1.4 MASTER MODE\n            2.1.5 SECONDARY MODE\n            2.1.6 MODEL GENERATION DATA GROUP DSCBS\n            2.1.7 ADDITIONAL CVOL PROCESSING\n            2.1.8 ALIAS PROCESSING\n            2.1.9 MULTIPLE INPUTS\n0         2.2 CONTROL CARDS\n0           2.2.1 CONTROL\n            2.2.2 INPUT\n            2.2.3 OUTPUT\n            2.2.4 CVOL\n            2.2.5 LEVEL\n0    18\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYCAT\n-              2.3 JOB CONTROL STATEMENTS\n0              2.4 MESSAGES AND CODES\n0              2.5 EXAMPLES\n0                2.5.1 COPY A CATALOG FROM ONE VOLUME TO ANOTHER\n                 2.5.2 BACK UP A CATALOG\n                 2.5.3 REDISTRIBUTE A CATALOG\n0            3.0 PROGRAM LOGIC\n-                      COPYCAT IS AN  OS  UTILITY  PROGRAM  DESIGNED  TO\n                  IMPROVE   PERFORMANCE  OF  OS  CATALOG  MANAGEMENT  BY\n                  PRODUCING A RESTRUCTURED COPY OF A CATALOG IN ORDER TO\n                  USE  THE  EXISTING  ACCESS  METHODS  MOST EFFECTIVELY.\n                  MULTIPLE INPUT AND OUTPUT CATALOGS ARE  PROCESSED  AND\n                  THE  REDISTRIBUTION  OF  THE  ENTRIES  IS  UNDER  USER\n                  CONTROL. MODEL DSCBS FOR GENERATION  DATA  GROUPS  AND\n                  ALIAS  ENTRIES  ARE  ALSO  PROCESSED.  CATALOGS ON ALL\n                  DIRECT  ACCESS  DEVICES,  INCLUDING  DATA  CELLS,  ARE\n                  SUPPORTED. BACKUP COPIES MAY ALSO BE MADE.\n-            1.0 INTRODUCTION\n0                 COPYCAT IS AN OS UTILITY PROGRAM  DESIGNED  TO  PRODUCE  AN\n             EFFICENT  SYSTEM  WIDE CATALOG WHICH MAY RESIDE ON MANY VOLUMES.\n             SUBSTANTIAL IMPROVEMENT IN PERFORMANCE MAY ALSO BE OBTAINED ON A\n             SYSTEM  WITH  ONLY  A  SINGLE CATALOG. THIS IS ACCOMPLISHED IN A\n             NUMBER OF WAYS.  FIRST,  CATALOG  ENTRIES  FROM  MANY  DIFFERENT\n             CATALOGS  MAY  BE  REDISTRIBUTED  TO  EQUALIZE  THE LOAD ON EACH\n             INDIVIDUAL  CATALOG.  SECOND,   EACH   INDIVIDUAL   CATALOG   IS\n             RESTRUCTURED IN A WAY DESIGNED TO MINIMIZE THE I/O TIME REQUIRED\n             BOTH  FOR  SEARCHING  AND  UPDATING.  THE   REDISTRIBUTION   AND\n             RESTRUCTURING  PARAMETERS  ARE UNDER THE CONTROL OF THE USER WHO\n             SHOULD HAVE SOME KNOWLEDGE OF OS CATALOG MANAGEMENT.\n0                 OUR INSTALLATION AT ARGONNE CONSISTS OF A 370/195, USED FOR\n             BATCH  PROCESSING,  AND A 360/75 USED FOR TIME SHARING. THE TIME\n             SHARING SYSTEM, TSO, SHARES ALL ITS ONLINE DEVICES WITH THE 195.\n             SINCE  ALL  DATASETS  USED  BY  TSO  MUST BE CATALOGED, THEY ARE\n             CATALOGED ON THE RESIDENT VOLUME FOR THE 75 TO ALLOW BATCH  JOBS\n             TO  ACCESS TSO DATASETS. THIS HAS PLACED AN EXTREMELY HEAVY LOAD\n             ON THIS SHARED CATALOG, WHICH OCCUPIES ABOUT 20 CYLINDERS  ON  A\n             2314.  AFTER  SOME  STUDY OF THE SITUATION IT WAS FOUND THAT THE\n             ORGANIZATION OF THE  SHARED  CATALOG  WAS  ONE  OF  OUR  BIGGEST\n             BOTTLENECKS.  AFTER  RUNNING COPYCAT, SOFTWARE MONITORING SHOWED\n             THE PERCENT OF UNIT BUSY TIME OF THE SYSTEM RESIDENT VOLUME  FOR\n             THE  75  DROPPED  FROM  ABOUT  80%  TO ABOUT 20%, THE PERCENT OF\n             ENQUEUE WAIT FOR THE CATALOG DROPPED FROM  ABOUT  10%  TO  ABOUT\n             .1%,  AND  THE  NUMBER OF EXCPS REQUIRED TO LOGON TO TSO DROPPED\n             FROM ABOUT 120 TO 70.\n0                                                                             19\n1                   Technical Guide to System Modifications\n     COPYCAT                                               Utility Programs\n-       2.0 USER MANUAL\n0       2.1 FUNCTIONS\n0            TWO DIFFERENT TYPES OF CATALOG SYSTEMS CAN BE PROCESSED  BY\n        COPYCAT.  THE FIRST IS THE STANDARD OS CATALOG SYSTEM CONSISTING\n        OF THE MASTER CATALOG ON THE SYSTEM RESIDENT VOLUME AND ZERO  OR\n        MORE  CATALOGS  ON  OTHER  VOLUMES.  THE  SECOND TYPE OF CATALOG\n        SYSTEM DOES NOT HAVE A MASTER CATALOG, BUT INSTEAD HAS  A  TABLE\n        BUILT  INTO  THE  CATALOG MANAGEMENT ROUTINES USED TO SELECT THE\n        FIRST CATALOG TO BE SEARCHED. THE CHANGES NEEDED FOR  THIS  TYPE\n        OF CATALOG SYSTEM MUST BE LOCALLY WRITTEN.\n-       2.1.1 REDISTRIBUTION\n0            WHEN MORE THAN ONE CATALOG IS BEING CREATED, REDISTRIBUTION\n        PARAMETERS  ARE  REQUIRED.  THESE PARAMETERS ARE SUPPLIED ON THE\n        OUTPUT CARDS IN THE FORM OF A RANGE OF NAMES. THE UPPER BOUND IS\n        DEFINED  ON  EACH  OUTPUT  CARD,  AND THE RANGE EXTENDS FROM THE\n        UPPER BOUND OF THE PREVIOUS CARD TO THIS UPPER BOUND. AN  EBCDIC\n        COLLATING SEQUENCE IS USED.\n0       2.1.2 RESTRUCTURING\n0            THE MAIN FUNCTION OF COPYCAT IS TO RESTRUCTURE A CATALOG SO\n        AS  TO TAKE ADVANTAGE OF THE CATALOG MANAGEMENT I/O ROUTINES. TO\n        DO THIS THREE PARAMETERS MAY BE SPECIFIED FOR EACH INDEX  LEVEL.\n        THE  FIRST  IS  THE  NUMBER  OF BYTES TO LEAVE IN EACH BLOCK FOR\n        EXPANSION.  BY  LEAVING  ENOUGH  ROOM,  THE  CATALOG  MANAGEMENT\n        ROUTINES  WILL  BE ABLE TO ADD ENTRIES WITHOUT HAVING TO ADD NEW\n        BLOCKS. EACH CVOL  POINTER  TAKES  TWENTY-TWO  (22)  BYTES,  AND\n        SINGLE  VOLUME  DATASET  ENTRIES  TAKE  TWENTY-SIX  (26)  BYTES.\n        SECOND, THE NUMBER OF DUMMY BLOCKS TO BE LEFT AFTER AN INDEX MAY\n        BE SPECIFIED SO THE INDEX CAN EXPAND AND NEW LOWER LEVEL INDEXES\n        CAN BE ADDED IN CLOSE PROXIMITY. THIRD,  THE  NUMBER  OF  BLOCKS\n        THAT  MUST  BE  ON A TRACK BEFORE STARTING THE NEXT INDEX MAY BE\n        GIVEN. SINCE INDEXES MAY REQUIRE MORE THEN  ONE  BLOCK,  AND  AN\n        INDEX  CAN  BE  SEARCHED  IN  ONE  I/O OPERATION IF IT IS ON ONE\n        TRACK, THIS NUMBER SHOULD BE SET LARGE ENOUGH SO MOST INDEXES AT\n        A PARTICULAR LEVEL CAN FIT ON ONE TRACK.\n0       2.1.3 MASTER AND SECONDARY CATALOGS\n0            WHEN MORE THEN ONE  OUTPUT  CATALOG  IS  PRODUCED,  ONE  IS\n        USUALLY  DEFINED  AS  THE  MASTER  CATALOG,  AND  THE  OTHERS AS\n        SECONDARY CATALOGS. IN THE CASE OF ONLY ONE OUTPUT  CATALOG,  IT\n        IS  ALWAYS A MASTER CATALOG. COPYCAT MUST BE RUN ONCE TO PRODUCE\n        THE MASTER CATALOG IN MASTER MODE, AND IF  THERE  ARE  SECONDARY\n        CATALOGS, ONCE IN SECONDARY MODE.\n0       2.1.4 MASTER MODE\n0            WHEN COPYCAT IS OPERATING IN MASTER MODE, ONLY  THE  MASTER\n0    20\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYCAT\n-            CATALOG  IS  PRODUCED  BASED  ON THE OUTPUT MASTER CARD(S). CVOL\n             POINTERS FOR INDEXES COVERED BY THE OUTPUT SECONDARY  CARDS,  IF\n             ANY, ARE ALSO ADDED TO THE MASTER CATALOG.\n0            2.1.5 SECONDARY MODE\n0                 SECONDARY MODE IS USED TO PRODUCE THE  SECONDARY  CATALOGS.\n             THE  CHOICE  OF  WHICH  INDEXES ARE PLACED ON WHICH CATALOGS ARE\n             DEFINED ON THE OUTPUT CARDS.\n0            2.1.6 MODEL GENERATION DATA GROUP DSCBS\n0                 MODEL DSCBS FOR GENERATION DATA GROUPS  ARE  ALSO  HANDLED.\n             SINCE THE MODEL DSCB MUST RESIDE ON THE VOLUME THAT CONTAINS THE\n             GENERATION INDEX, COPYCAT WILL MOVE OR  COPY  THESE  DSCBS.  THE\n             CHOICE  OF  WHETHER TO MOVE OR COPY THE DSCBS SHOULD BE BASED ON\n             THE APPLICATION. WHEN A SINGLE CATALOG IS BEING REBUILT  ON  THE\n             SAME PHYSICAL VOLUME, NOTHING NEED BE DONE, SINCE THE DSCBS WILL\n             STILL BE ON THE VOLUME. WHEN A CATALOG  IS  BEING  COPIED  TO  A\n             REPLACEMENT  VOLUME, SUCH AS A NEW RELEASE OF A SYSTEM, THEN THE\n             DSCBS SHOULD BE COPIED. WHEN THE WHOLE CATALOG SYSTEM  IS  BEING\n             REORGINIZED, THEN THE DSCBS SHOULD BE MOVED.\n0            2.1.7 ADDITIONAL CVOL PROCESSING\n0                 SINCE EVERY DIRECT ACCESS VOLUME CAN HAVE A CATALOG, OR ONE\n             SYSTEM MAY HAVE ACCESS TO ANOTHER SYSTEMS CATALOG, IT MAY BECOME\n             NECESSARY TO CHANGE MANY CVOL POINTERS  ON  ONE  SYSTEM  IF  THE\n             OTHER SYSTEMS CATALOG IS REDISTRIBULED. THE CVOL CARDS HAVE BEEN\n             PROVIDED TO ACCOMPLISH THIS.\n0            2.1.8 ALIAS PROCESSING\n0                 SPECIAL HANDLING OF ALIAS  ENTRIES  HAS  BEEN  INCLUDED  IN\n             COPYCAT.  IN  A  MULTIPLE  CATALOG SYSTEM, AN ALIAS NAME AND ITS\n             TRUE NAME SOMETIMES RESIDE IN DIFFERENT CATALOGS. CVOL  POINTERS\n             WITH  THE  ALIAS  NAME ARE PLACED IN THE MASTER CATALOG DURING A\n             MASTER OPERATION AND IN A SECONDARY CATALOG DURING  A  SECONDARY\n             OPERATION, POINTING AT THE TRUE NAMES VOLUME. THE ALIAS ENTRY IS\n             THEN PLACED IN THE TRUE NAMES CATALOG.\n0            2.1.9 MULTIPLE INPUTS\n0                 THIRTY-TWO (32) CATALOGS MAY BE DEFINED AS  INPUT.  COPYCAT\n             HAS BEEN DESIGNED TO WORK ON A CATALOG SYSTEM WHERE A HIGH LEVEL\n             INDEX NAME, OTHER THAN A CVOL POINTER, MAY ONLY  APPEAR  IN  ONE\n             CATALOG.  WHEN  A  CONFLICT  IS  FOUND, THE ENTRY FROM THE FIRST\n             DEFINED INPUT CATALOG IS USED. AN EXAMPLE OF THIS WOULD BE IN  A\n             TWO  CPU  SYSTEM,  AND  BOTH SYSTEM RESIDENT VOLUME CATALOGS ARE\n             DEFINED AS INPUT TO COPYCAT. IF BOTH CATALOGS HAVE  ENTRIES  FOR\n             SYS1, THEN ONLY THE ENTRIES FROM THE FIRST DEFINED CATALOG WOULD\n             BE USED.\n0            2.2 CONTROL CARDS\n0                                                                             21\n1                   Technical Guide to System Modifications\n     COPYCAT                                               Utility Programs\n-            THE FORMAT FOR ALL CONTROL CARDS IS:\n0         \u00ddNAME\u00a8 OPERATION OPERANDS COMMENTS\n0            THE NAME FIELD, IF PRESENT, MUST BEGIN IN COLUMN  ONE.  THE\n        OPERATION  MUST  BE  SEPARATED  FROM THE NAME AND OPERANDS BY AT\n        LEAST ONE BLANK, AND MAY START ANYWHERE AFTER  COLUMN  ONE.  THE\n        OPERANDS MUST BE SEPARATED BY COMMAS WITH NO INTERVENING BLANKS.\n        A NULL OPERAND MUST BE DELIMITED BY COMMAS UNLESS IT IS THE LAST\n        OPERAND.  THE  COMMENTS  ARE  SEPARATED  FROM THE OPERANDS BY AT\n        LEAST ONE BLANK, AND ANY CARD WITH AN ASTERISK '*' IN COLUMN ONE\n        IS TREATED AS A COMMENT CARD.\n0       2.2.1 CONTROL\n0            THE  CONTROL  CARD  SPECIFIES  THE  MAIN  FUNCTIONS  TO  BE\n        PERFORMED, AND MUST BE THE FIRST NON-COMMENT CARD.\n0         \u00ddNAME\u00a8 CONTROL \u00bbMASTER|SECONDARY\u00ba,\u00bbGDGMOVE|GDGCOPY\u00ba,\n                  \u00bbKEEP|SPLIT|UNCATLG\u00ba\n0            MASTER|SECONDARY - COPYCAT IS TO BE EXECUTED IN THE  MASTER\n                       MODE  TO  PRODUCE  THE  MASTER CATALOG, OR IN THE\n                       SECONDARY MODE TO PRODUCE THE SECONDARY CATALOGS.\n0            GDGMOVE|GDGCOPY - GENERATION DATA GROUP MODEL DSCBS ARE  TO\n                       BE  MOVED OR COPIED. IF THIS OPERAND IS NULL THEN\n                       THEY ARE NOT PROCESSED.\n0            KEEP|SPLIT|UNCATLG - THE FUNCTION TO BE PERFORMED ON SINGLE\n                       NAME  DATASETS.  THEY  MAY  BE KEPT IN THE MASTER\n                       CATALOG (KEEP),  THEY  MAY  BE  REDISTRIBUTED  TO\n                       SECONDARY   CATALOGS  (SPLIT),  OR  THEY  MAY  BE\n                       UNCATALOGED (UNCATLG).\n0            WHEN  COPYCAT  IS  RUN  TWICE  FOR  A  MASTER  CATALOG  AND\n        SECONDARY  CATALOGS,  THESE LAST TWO OPERANDS SHOULD BE THE SAME\n        FOR BOTH RUNS. IF LOCAL MODIFICATIONS TO THE CATALOG  MANAGEMENT\n        ROUTINES  HAVE  BEEN  ADDED SO A MASTER CATALOG IS NOT REQUIRED,\n        COPYCAT NEED ONLY BE RUN ONCE IN SECONDARY MODE, AND  THE  THIRD\n        CONTROL CARD PARAMETER MUST BE SPLIT.\n0       2.2.2 INPUT\n0            THE INPUT CARD DEFINES AN INPUT CATALOG  TO  BE  PROCESSED.\n        THERE  MUST BE AT LEAST ONE AND AS MANY AS THIRTY-TWO (32) INPUT\n        CARDS. THE INPUT DATASETS  DEFINED  BY  THESE  CARDS  ARE  NEVER\n        CHANGED  BY THE PROGRAM. THEY MUST NOT BE THE SAME DATASETS USED\n        FOR OUTPUT. THE INPUT CARD(S) MUST FOLLOW THE CONTROL CARD.\n0         \u00ddNAME\u00a8 INPUT DDNAME,VOLID\n0            DDNAME - THE NAME OF A DD STATEMENT THAT DEFINES THIS INPUT\n                       DATASET.\n0    22\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYCAT\n-                 VOLID - THE VOLUME NAME ON WHICH THIS CATALOG RESIDES  WHEN\n                            USED  BY  THE SYSTEM. THIS VOLUME NEED NOT BE THE\n                            SAME AS THAT DEFINED BY DDNAME.\n0            2.2.3 OUTPUT\n0                 THE  OUTPUT  CARDS  DEFINE  THE  OUTPUT  DATASETS  AND  THE\n             REDISTRIBUTION TABLE. THESE CARDS MUST FOLLOW THE INPUT CARDS.\n0              \u00ddNAME\u00a8 OUTPUT \u00bbMASTER|SECONDARY\u00ba,DDNAME,VOLID\u00dd,MAXNAME\u00a8\n0                 MASTER - THIS CARD DEFINES THE MASTER CATALOG, OR THE  ONLY\n                            CATALOG IF ONLY ONE IS BEING PRODUCED.\n0                 SECONDARY - THIS CARD DEFINES A SECONDARY CATALOG.\n0                 DDNAME - THE NAME OF A DD STATEMENT THAT DEFINES THE OUTPUT\n                            DATASET.\n0                 VOLID - THE VOLUME NAME ON WHICH THIS CATALOG WILL BE  USED\n                            BY  THE SYSTEM. THE CATALOG MAY BE PLACED ON SOME\n                            OTHER   VOLUME   TEMPORARILY   FOR   BACKUP    OR\n                            CONVENIENCE.\n0                 MAXNAME - THE HIGHEST NAME IN EBCDIC COLLATING SEQUENCE  TO\n                            WHICH THIS OUTPUT CARD APPLIES. THIS MAXNAME MUST\n                            BE GREATER  THEN  THE  MAXNAME  ON  THE  PREVIOUS\n                            OUTPUT  CARD, AND ON THE LAST OUTPUT CARD IT MUST\n                            BE NULL.\n0                 EACH OUTPUT CARD DEFINES A RANGE OF INDEX NAMES THAT ARE TO\n             BE  PLACED  IN ITS CATALOG. THIS RANGE EXTENDS FROM THE PREVIOUS\n             MAXNAME UP TO AND INCLUDING THE CURRENT MAXNAME. THE SAME DDNAME\n             AND  VOLID  PAIR  MAY  APPEAR ON MORE THEN ONE CARD. THIS ALLOWS\n             MORE THEN ONE RANGE OF INDEX NAMES TO BE PLACED ON ONE  CATALOG.\n             ALL MASTER CARDS MUST HAVE THE SAME DDNAME AND VOLID SINCE THERE\n             CAN ONLY BE ONE MASTER CATALOG. THE LAST OUTPUT CARD MUST HAVE A\n             NULL MAXNAME.\n0            2.2.4 CVOL\n0                 THE CVOL CARD MAY BE USED TO ALTER CONTROL  VOLUME  POINTER\n             ENTRIES THAT POINT TO CATALOGS OUTSIDE THE CURRENT SYSTEM.\n0              \u00ddNAME\u00a8 CVOL \u00ddVOLID\u00a8,NEWVOL,\u00ddMAXNAME\u00a8,DDNAME\n0                 VOLID - THE VOLUME NAME THAT IS BEING CHANGED.\n0                 NEWVOL - THE NEW VOLUME NAME FOR THE CVOL ENTRY.\n0                 MAXNAME - THE HIGHEST NAME IN  THE  RANGE  OF  INDEX  NAMES\n                            COVERED  BY THIS CVOL CARD. ALL THE CVOL POINTERS\n                            THAT POINT AT THIS VOLUME, WHOSE NAME IS  GREATER\n                            THAN  THE PREVIOUS MAXNAME AND LESS THEN OR EQUAL\n0                                                                             23\n1                   Technical Guide to System Modifications\n     COPYCAT                                               Utility Programs\n-                      TO THIS MAXNAME, WILL  BE  CHANGED  TO  POINT  AT\n                       NEWVOL.  THE  LAST CVOL CARD IN A SET MUST HAVE A\n                       NULL VALUE FOR MAXNAME, WHICH IS THE  HIGHEST  IN\n                       THE COLLATING SEQUENCE.\n0            DDNAME - THE NAME OF A DD STATEMENT USED  FOR  DEVICE  TYPE\n                       INFORMATION. THIS DD STATEMENT MUST DEFINE A UNIT\n                       OF THE SAME TYPE AS NEWVOL.\n0            MANY SETS OF CVOL CARDS MAY BE DEFINED. EACH SET MUST  HAVE\n        VOLID  SPECIFIED  ON THE FIRST CARD, AND MAXNAME MUST BE NULL ON\n        THE LAST. CVOL CARDS MUST FOLLOW THE OUTPUT CARDS.\n0       2.2.5 LEVEL\n0            THE  LEVEL  CARD  IS  USED  TO  SPECIFY  THE  RESTRUCTURING\n        INFORMATION.  THE GREATEST PERFORMANCE IMPROVEMENTS DERIVED FROM\n        RUNNING COPYCAT DEPEND ON PROPERLY CHOOSING THESE PARAMETERS. UP\n        TO TWENTY-TWO LEVEL CARDS MAY BE DEFINED.\n0         \u00ddNAME\u00a8 LEVEL LEVEL,BYTES,DUMMIES,BLOCKS\n0            LEVEL - THE INDEX LEVEL BETWEEN ONE AND TWENTY-TWO TO WHICH\n                       THIS CARD APPLIES.\n0            BTYES - THE NUMBER OF BYTES TO  LEAVE  IN  EACH  BLOCK  FOR\n                       FUTURE EXPANSION, BETWEEN 0 AND 200.\n0            DUMMIES - THE NUMBER OF DUMMY BLOCKS TO  LEAVE  AFTER  THIS\n                       INDEX FOR FUTURE EXPANSION.\n0            BLOCKS - THE NUMBER OF BLOCKS THAT MUST BE ON  THE  CURRENT\n                       OUTPUT TRACK BEFORE STARTING THIS INDEX.\n0            THE LEVEL CARDS MUST FOLLOW  THE  CVOL  CARDS,  IF  ANY.  A\n        DEFAULT VALUE OF ZERO IS APPLIED FOR ANY NULL OR MISSING VALUES.\n0       2.3 JOB CONTROL STATEMENTS\n0            A JOB CARD AND AN EXEC CARD ARE  REQUIRED.  A  SYSPRINT  DD\n        STATEMENT  IS REQUIRED FOR A LISTING OF THE INPUT, INFORMATIONAL\n        MESSAGES AND ERROR MESSAGES. THE DCB  PARAMETERS  ARE  FIXED  AT\n        RECFM=FBA,LRECL=605,BLKSIZE=121. THE CONTROL CARDS ARE READ FROM\n        THE   SYSIN   FILE   WHICH   HAS   FIXED   DCB   PARAMETERS   OF\n        RECFM=FB,LRECL=80,BLKSIZE=3200.  ADDITIONAL  DD  STATEMENTS  ARE\n        REQUIRED AS SPECIFIED BY THE INPUT, OUTPUT AND CVOL  CARDS.  THE\n        DATASETS  DEFINED  BY  THESE  DD  STATEMENTS  NEED  NOT BE NAMED\n        SYSCTLG, BUT THEY MUST BE  ON  A  DIRECT  ACCESS  VOLUME.  IF  A\n        CATALOG  IS  CREATED  ON A VOLUME OTHER THEN THE ONE ON WHICH IT\n        WILL BE USED BY THE SYSTEM, THE TEMPORARY VOLUME  SHOULD  BE  OF\n        THE SAME DEVICE TYPE AS THE FINAL VOLUME.\n-       2.4 MESSAGES AND CODES\n0    24\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYCAT\n-                 AFTER A SUCCESSFUL RUN OF COPYCAT CERTAIN STATISTICS  ABOUT\n             EACH  OUTPUT  DATASET  ARE  LISTED. THE LAST TTR PLUS ONE IN THE\n             DATASET AND THE TTR OF THE LAST USED BLOCK PLUS ONE  ARE  LISTED\n             IN  HEXADECIMAL.  THE  NUMBER OF CONTROL VOLUME POINTER ENTRIES,\n             DUMMY BLOCKS,  BLOCKS  AT  LEVELS  ONE  AND  TWO,  AND  DATASETS\n             CATALOGED ARE LISTED IN DECIMAL.\n0                 THE FOLLOWING IS A LIST OF ERROR  MESSAGES  AND  COMPLETION\n             CODES. THE MAXIMUM COMPLETION CODE FOUND DURING EXECUTION OF THE\n             PROGRAM IS RETURNED TO OS.\n0            ERR01 ERROR FOUND IN PARAMETER AT '$'\n0                 AN ERROR WAS FOUND IN A PARAMETER OR A  REQUIRED  PARAMETER\n                  WAS MISSING. THE PREVIOUS LINE WILL CONTAIN A '$' UNDER THE\n                  ERROR.\n                  (COMPLETION CODE = 8)\n0            ERR02 ERROR PROCESSING DDNAME='DDNAME'\n0                 A PROBLEM WAS FOUND WITH A DD STATEMENT. EITHER IT WAS  NOT\n                  FOUND,  COULD  NOT BE OPENED, OR WAS NOT ON A DIRECT ACCESS\n                  VOLUME.\n                  (COMPLETION CODE = 8)\n0            ERR03 UNEXPECTED END OF FILE ON SYSIN\n0                 MORE CONTROL CARDS WERE EXPECTED, BUT WERE NOT FOUND.\n                  (COMPLETION CODE = 8)\n0            ERR04 NAME=TRUENAME NOT FOUND FOR ALIAS=ALIASNAME\n0                 WHILE PROCESSING AN ALIAS ENTRY,  THE  TRUE  NAME  FOR  THE\n                  ALIAS COULD NOT BE FOUND.\n                  (COMPLETION CODE = 12)\n0            ERR05 ALIAS COUNT ERROR FOUND FOR NAME=TRUENAME\n0                 THE ALIAS COUNT FIELD IN THE NAMED INDEX IS  NOT  EQUAL  TO\n                  THE NUMBER OF ALIASES FOUND FOR THE NAME.\n                  (COMPLETION CODE = 12)\n0            ERR06 TOO MANY INPUT DATASETS\n0                 MORE THEN 32 INPUT CARDS WERE FOUND.\n                  (COMPLETION CODE = 8)\n0            ERR07 INDEX=INDEX FOUND ON VOLS=(X,Y) THE ENTRY  ON  X  WILL  BE\n             USED\n0                 THE SAME HIGH  LEVEL  INDEX  WAS  FOUND  ON  TWO  DIFFERENT\n                  CATALOGS. THE ONE ON THE X VOLUME WILL BE USED.\n                  (COMPLETION CODE = 4)\n-                                                                             25\n1                   Technical Guide to System Modifications\n     COPYCAT                                               Utility Programs\n-       ERR08 NO INPUT CARDS FOUND\n0            NO INPUT CARDS WERE FOUND,  OR  THEY  DID  NOT  FOLLOW  THE\n             CONTROL CARD.\n             (COMPLETION CODE = 8)\n0       ERR09 FUNCTION FAILED  WITH  (CODE)  ON  VOLUME  FOR  GDG  MODEL\n        DSCB=NAME\n0            WHILE MOVING OR COPYING MODEL DSCBS, AN OBTAIN, ALLOCATE OR\n             SCRATCH  OPERATION  FAILED  WITH  THE RETURN CODE OF 'CODE'\n             (DECIMAL).\n             (COMPLETION CODE = 4)\n0       ERR10 MODEL DSCB FOR GDG DOES NOT HAVE ZERO EXTENTS DSN=NAME\n0            THE NAMED MODEL DSCB IS NOT COPIED BECAUSE IT DOES NOT HAVE\n             ZERO EXTENTS.\n             (COMPLETION CODE = 4)\n0       ERR11 MODEL DSCB FOR GDG EXISTS ON OUTPUT VOLUME WITH  DIFFERENT\n        ATTRIBUTES FOR DSN=NAME\n0            WHILE MOVING OR COPYING MODEL DSCBS A DSCB  WITH  THE  SAME\n             NAME  WAS  FOUND  ON  THE OUTPUT VOLUME, BUT THE ATTRIBUTES\n             DEFINED BY THE TWELVE  BYTES  IN  THE  DSCB  AT  OFFSET  82\n             (DECIMAL)  ARE  NOT  THE  SAME.  THE  DSCB  IS NOT MOVED OR\n             COPIED.\n             (COMPLETION CODE = 4)\n0       ERR12 ABEND - NNN - OCCURED. SEE SYSMSG. CURRENT OR LAST NAME IS\n        NAME\n0            A D37, B37 OR 213 ABEND OCCURED. THE LAST  INDEX  STRUCTURE\n             BEING PROCESSED IS GIVEN.\n             (COMPLETION CODE = 16)\n0       ERR13 I/O ERROR - SYNAD MESSAGE\n        ERR13 I/O ERROR CURRENT OR LAST NAME IS NAME\n0            AN I/O ERROR OCCURED. THE STANDARD MESSAGE  PRODUCED  BY  A\n             SYNAD  MACRO  IS GIVEN, ALONG WITH THE LAST INDEX STRUCTURE\n             PROCESSED.\n             (COMPLETION CODE = 16)\n0       ERR14 NO OUTPUT MASTER CARD WAS FOUND\n0            WHEN IN MASTER MODE, AT LEAST ONE OUTPUT MASTER  CARD  MUST\n             BE DEFINED.\n             (COMPLETION CODE = 8)\n0       THE COMPLETION CODES ARE AS FOLLOWS:\n0           0 - NO ERRORS.\n0    26\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYCAT\n-                4 - ALL CATALOGS ARE USEABLE, BUT DUPLICATE INDEXES HAVE\n                     BEEN  LEFT  OUT  OR  MODEL  DSCBS HAVE NOT BEEN MOVED OR\n                     COPIED.\n0                8 - ERRORS IN PROCESSING CONTROL CARDS. THE OUTPUT DATASETS\n                     HAVE NOT BEEN CHANGED.\n0         12 - ALL CATALOGS ARE USEABLE, BUT PROBLEMS EXIST WITH ALIAS\n                     ENTRIES.\n0         16 - OUTPUT CATALOGS HAVE BEEN PARTLY BUILT, AND ARE NOT\n                     USEABLE.\n0            2.5 EXAMPLES\n0            2.5.1 COPY A CATALOG FROM ONE VOLUME TO ANOTHER\n0                 THIS FIRST EXAMPLE  ILLUSTRATES  THE  MOST  COMMON  USE  OF\n             COPYCAT.  A  CATALOG  ON  ONE  VOLUME IS TO BE COPIED TO ANOTHER\n             VOLUME, SUCH AS WHEN A NEW SYSTEM IS BEING INSTALLED.  THIS  JOB\n             WOULD  BE RUN UNDER THE OLD SYSTEM TO COPY THE CATALOG ON SYSRES\n             TO THE NEW SYSTEM PACK, NEWRES, WHICH WILL  LATER  BE  RELABELED\n             SYSRES.\n0            //EX1    JOB   XXX\n             //       EXEC  PGM=COPYCAT,REGION=60K\n             //SYSPRINT DD  SYSOUT=A\n             //OLDRES DD    DSN=SYSCTLG,VOL=SER=SYSRES,\n             //             DISP=OLD,UNIT=DISK\n             //NEWRES DD    DSN=SYSCTLG,VOL=SER=NEWRES,\n             //             DISP=OLD,UNIT=DISK\n             //SYSIN  DD    *\n             *              EXAMPLE ONE\n                      CONTROL MASTER,GDGCOPY,KEEP\n                      INPUT OLDRES,SYSRES\n                      OUTPUT MASTER,NEWRES,SYSRES\n                      LEVEL 1,26,100\n                      LEVEL 2,52,5,5\n0                 IN THIS EXAMPLE MODEL DSCBS FOR GENERATION DATA GROUPS  ARE\n             COPIED. 100 DUMMY BLOCKS ARE LEFT AFTER THE HIGHEST LEVEL INDEX,\n             WITH 26 BYTES LEFT IN EACH BLOCK FOR FUTURE EXPANSION. 52  BYTES\n             ARE  LEFT  IN  EACH  SECOND LEVEL INDEX BLOCK, 5 BLOCKS ARE LEFT\n             AFTER EACH INDEX, AND A SECOND LEVEL INDEX WILL NOT  BE  STARTED\n             ON A TRACK WITHIN 5 BLOCKS OF THE END.\n0            2.5.2 BACK UP A CATALOG\n0                 THIS EXAMPLE DEMONSTRATES THE USE OF COPYCAT FOR BACKING UP\n             A  CATALOG.  NOTE  THAT  THE  BACKUP DATASET DOES NOT NEED TO BE\n             CALLED SYSCTLG, THUS MANY CATALOGS COULD BE  BACKED  UP  ON  THE\n             SAME VOLUME.\n0            //EX2    JOB   XXX,REGION=60K\n0                                                                             27\n1                   Technical Guide to System Modifications\n     COPYCAT                                               Utility Programs\n-       //       EXEC  PGM=COPYCAT\n        //SYSPRINT DD  SYSOUT=A\n        //CATALOG DD   DSNAME=SYSCTLG,VOL=SER=PACK01,\n        //             UNIT=DISK,DISP=OLD\n        //BACKUP DD    DSNAME=CAT.PACK01,VOL=SER=BACKUP,\n        //             UNIT=DISK,SPACE=(CYL,(3,2)),DISP=(NEW,KEEP)\n        //SYSIN  DD    *\n        *              EXAMPLE 2\n                 CONTROL MASTER,GDGCOPY,KEEP\n                 INPUT CATALOG,PACK01\n                 OUTPUT MASTER,BACKUP,PACK01\n        /*\n0       2.5.3 REDISTRIBUTE A CATALOG\n0            IN THIS EXAMPLE A SINGLE CATALOG IS TO  BE  SPLIT  UP  INTO\n        FOUR  SEPARATE  CATALOGS.  THE FIRST STEP PRODUCES THE SECONDARY\n        CATALOGS, AND THE SECOND STEP PRODUCES THE MASTER  CATALOG.  THE\n        LAST  STEP IS EXECUTED ONLY IF THE FIRST TWO STEPS RAN PROPERLY,\n        AND IT RENAMES THE DATASET ON RES075.\n0       //EX3    JOB   XXX\n        //STEP1  EXEC  PGM=COPYCAT,REGION=60K\n        //SYSPRINT DD  SYSOUT=A\n        //INPUT  DD    VOL=SER=RES075,UNIT=DISK,DISP=OLD,\n        //             DSNAME=SYSCTLG\n        //OLDRES DD    VOL=SER=RES075,UNIT=DISK,\n        //             DSNAME=NEWCAT,DISP=(NEW,KEEP),\n        //             SPACE=(CYL,(5,2))\n        //P87    DD    UNIT=DISK,VOL=SER=PACK87,\n        //             DSNAME=SYSCTLG,DISP=(NEW,KEEP),\n        //             SPACE=(CYL,(5,2))\n        //P88    DD    UNIT=DISK,VOL=SER=PACK88,\n        //             DSNAME=SYSCTLG,DISP=(NEW,KEEP),\n        //             SPACE=(CYL,(5,2))\n        //P89    DD    UNIT=DISK,VOL=SER=PACK89,\n        //             DSNAME=SYSCTLG,DISP=(NEW,KEEP),\n        //             SPACE=(CYL,(5,2))\n        //SYSIN  DD    *\n        *              EXAMPLE 3\n        *              PRODUCE THE SECONDARY CATALOGS\n                 CONTROL SECONDARY,GDGMOVE,KEEP\n                 INPUT INPUT,RES075\n                 OUTPUT SECONDARY,P87,PACK87,B9999999\n                 OUTPUT SECONDARY,P88,PACK88,H9999999\n                 OUTPUT MASTER,OLDRES,RES075,K9999999\n                 OUTPUT SECONDARY,P89,PACK89,R9999999\n                 OUTPUT MASTER,OLDRES,RES075,S9999999\n                 OUTPUT SECONDARY,P88,PACK88\n                 LEVEL 1,26,100\n                 LEVEL 2,54,5,5\n                 LEVEL 3,,2,2\n        /*\n        //STEP2  EXEC  PGM=COPYCAT,REGION=60K\n0    28\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYCAT\n-            //SYSPRINT DD  SYSOUT=A\n             //INPUT  DD    VOL=SER=RES075,UNIT=DISK,DISP=OLD,\n                            DSNAME=SYSCTLG\n             //OLDRES DD    VOL=SER=RES075,UNIT=DISK,\n                            DSNAME=NEWCAT,DISP=OLD\n             //P87    DD    UNIT=DISK,VOL=SER=PACK87,\n                            DSNAME=SYSCTLG,DISP=OLD\n             //P88    DD    UNIT=DISK,VOL=SER=PACK88,\n                            DSNAME=SYSCTLG,DISP=OLD\n             //P89    DD    UNIT=DISK,VOL=SER=PACK89,\n                            DSNAME=SYSCTLG,DISP=OLD\n             //SYSIN  DD    *\n             *              EXAMPLE 3\n             *              PRODUCE THE MASTER CATALOG\n                      CONTROL MASTER,GDGMOVE,KEEP\n                      INPUT INPUT,RES075\n                      OUTPUT SECONDARY,P87,PACK87,B9999999\n                      OUTPUT SECONDARY,P88,PACK88,H9999999\n                      OUTPUT MASTER,OLDRES,RES075,K9999999\n                      OUTPUT SECONDARY,P89,PACK89,R9999999\n                      OUTPUT MASTER,OLDRES,RES075,S9999999\n                      OUTPUT SECONDARY,P88,PACK88\n                      LEVEL 1,26,50\n                      LEVEL 2,54,10,10\n             /*\n             //STEP3  EXEC  PGM=IEHPROGM,COND=(5,LT)\n             //SYSPRINT DD  SYSOUT=A\n             //OLDRES DD    UNIT=DISK,VOL=SER=RES075,DISP=OLD\n             //SYSIN  DD    *\n                      RENAME VOL=2314=RES075,DSNAME=SYSCTLG,\n                            NEWNAME=OLDCATLG\n                      RENAME VOL=2314=RES075,DSNAME=NEWCAT,\n                            NEWNAME=SYSCTLG\n             /*\n0                 ALL INDEXES UP TO C WILL BE ON PACK87, INDEXES FROM C TO  I\n             AND FROM T UPWARDS WILL BE ON PACK88, AND FROM L TO S WILL BE ON\n             PACK89. CVOL POINTERS FOR THESE INDEXES WILL BE PLACED ON RES075\n             ALONG  WITH  ALL  THE  OTHER INDEXES. STEP 3 WILL BE EXECUTED IF\n             THERE ARE NO SEVERE ERRORS.\n0            3.0 PROGRAM LOGIC\n0                 COPYCAT IS WRITTEN ENTIRELY IN ASSEMBLER LANGUAGE. QSAM  IS\n             USED FOR SYSPRINT AND SYSIN, WHILE BSAM IN THE LOAD MODE IS USED\n             FOR THE OUTPUT DATASETS. BDAM IS  USED  FOR  THE  INPUT  AND  TO\n             ACCESS PREVIOUSLY WRITTEN OUTPUT BLOCKS.\n0                 THE HEART OF THE PROGRAM CONSISTS OF  A  RECURSIVE  ROUTINE\n             CALLED  RR, WHICH IS CALLED FOR EACH LEVEL. THE TTR OF THE FIRST\n             BLOCK OF THE LEVEL IS PASSED TO RR. AFTER AN  INDEX  IS  WRITTEN\n             WITH  THE OLD TTRS, IT IS REREAD AND FOR EACH ENTRY WITH A LOWER\n             LEVEL, RR IS RECURSIVELY CALLED. UPON RETURN,  THE  NEW  TTR  IS\n             PLACED IN THE ENTRY AND THE BLOCK IS REWRITTEN.\n0                                                                             29\n1                   Technical Guide to System Modifications\n     COPYCAT                                               Utility Programs\n-            WHEN PROCESSING THE HIGHEST  LEVEL  INDEX,  THE  ADDITIONAL\n        INFORMATION  OF  WHICH  INPUT  DATASET THIS ENTRY CAME FROM MUST\n        ALSO BE SAVED. THIS IS DONE BY CHANGING THE COUNT FIELD  OF  THE\n        INDEX.  ONLY THREE TYPES OF ENTRIES NEED THIS INFORMATION SAVED:\n        THE INDEX POINTER ENTRY, THE VOLUME CONTROL BLOCK POINTER ENTRY,\n        AND THE GENERATION INDEX POINTER ENTRY. BY MAKING THE LAST THREE\n        BITS OF THE VOLUME CONTROL BLOCK POINTER ENTRY '110',  ONLY  THE\n        ENTRIES  WITH  A LAST BIT OF '0' CONTAIN ADDITIONAL INFORMATION.\n        TWO BITS ARE USED TO DISTINGUISH  BETWEEN  THE  THREE  TYPES  OF\n        ENTRIES,  AND  THE  OTHER FIVE BITS IN THE LENGTH FIELD ARE THEN\n        USED TO LOCATE THE PROPER INPUT DATASET.\n0            WHEN PROCESSING  MODEL  DSCBS,  THE  OBTAIN,  ALLOCATE  AND\n        SCRATCH   SVCS   ARE   USED.   BEFORE   RUNNING  COPYCAT,  LOCAL\n        RESTRICTIONS ON ALLOCATING AND  SCRATCHING  DATASETS  SHOULD  BE\n        CONSIDERED.  THESE  SVCS  ARE  ONLY  USED  IN THE ROUTINE CALLED\n        GDSPROC.\n0            TWO OTHER IMPORTANT ROUTINES ARE INR AND  PUTC.  INR  FINDS\n        THE  NEXT NAME IN THE HIGHEST LEVEL INDEXES TO BE PROCESSED FROM\n        AMONG ALL THE INPUTS. IT IS CALLED BY  RR  AND  IT  HANDLES  THE\n        PROBLEM  OF DUPLICATE INDEX NAMES. PUTC IS ALSO CALLED BY RR AND\n        IT TAKES AN INDEX AND ADDS IT TO THE NEXT BLOCK FOR OUTPUT. PUTC\n        PROCESSES THE PARAMETERS OF THE LEVEL CARDS.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    30\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYJES\n-         2.2.14   HASP Print/Punch ....................................COPYJES\n+         2.2.14   HASP Print/Punch                                     COPYJES\n+                  ____ ___________                                     _______\n0         This program copies a card file from SYSIN to SYSPRINT, and forces the\n          output unblocked. The program was used with the HASP batched execution\n          facility  to provide  quick card-to-print  and card-to-punch  services\n          (using job classes L and K, respectively).\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                             31\n1                   Technical Guide to System Modifications\n     COPYTAPE                                              Utility Programs\n-    2.2.15   Tape Copy ...........................................COPYTAPE\n+    2.2.15   Tape Copy                                            COPYTAPE\n+             ____ ____                                            ________\n0    COPYTAPE  copies  single tape  files,   with  support for  64K  blocks\n     produced by FDR, and skipping of bad blocks.\n0    This program is based on one written by Dick Oxley,  as distributed by\n     Share,  Inc.   This version written from scratch for VS.  EXCP is used\n     with BSAM OPEN/CLOSE/EOV because it makes a few things easier (reading\n     64K blocks  on FDR  tapes).  EXCP is  not used  to due  differences in\n     OPEN/CLOSE processing  (RDJFCB with OPENJ will  not quite do  the same\n     thing).\n0    Input: Tape file (normal sequential specification) on SYSUT1\n     Output:  SYSUT2.   DCB attributes copied  from input unless explicitly\n     specified.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    32\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYVOL\n-         2.2.16   DASD Copy ...........................................COPYVOL\n+         2.2.16   DASD Copy                                            COPYVOL\n+                  ____ ____                                            _______\n0         Program COPYVOL is from Bell Tel Labs/Karl Barnhardt (SQUISH utility).\n          Modified by G.  Postpischil for RPS, 3350 support, extent checking and\n          compression.   Other changes suggested by S.  Metz and various members\n          of Share, Inc.\n0         Further modified by Jacob Unger,  Technion,  Haifa,  Israel:   IEBCOPY\n          interface added;  SVS supported;   deleted IGG019WA appendage.   Again\n          modified by G. Postpischil.   PARM field processing extended; DSN/mask\n          processing added..   Extent  compression option put back  in following\n          IEBCOPY.  Support for multiple format 5 DSCBs completed.\n0         In February 1981, the program was rewritten and restructured (by G.P.)\n          to add  VSAM and MVS support,   and to drop MFT/MVT  support.   Rename\n          facility was extended,  up to eight input volumes (to be merged to one\n          output volume) are permitted, and error message handling was improved.\n0         Additions:  VTOC= SYSIN card support added\n0         Entry CLEARVOL added - clobbers VTOC (re-initializes)\n-         DESCRIPTION\n0         THE COPYVOL (SQUISH) UTILITY COPIES DIRECT ACCESS VOLUMES.  THE SOURCE\n          AND TARGET DISKS MUST BE COMPATIBLE TYPES.\n0         ENTRY POINT CLEARVOL CLEARS THE VTOC (FASTER THAN IEHPROGM).\n           IT REQUIRES AN OUTPUT DD CARD (SYSUT2/OUTDISK/DISKOUT).\n           THE VTOC=/EXTENT SYSIN CARD IS MEANINGFUL. ALL OTHER OPTIONS ARE\n             IGNORED.\n           DEFAULT  PROCESSING :    VSAM DATASETS  -  DSCB COPIED  TO SAME  VTOC\n          LOCATION (WHEN FREE)\n           DATA COPIED TO SAME VOLUME LOCATION (ABSTRK)\n           ISAM/TCAM -     DATA COPIED TO SAME VOLUME LOCATION\n           SAM (PO & PS) - UNUSED EXTENTS ARE RELEASED AFTER COPY\n                           CONTIGUOUS EXTENTS ARE MERGED\n           OTHER -         COPIED TO AVAILABLE SPACE RESTRICTIONS :\n0          SPLIT CYLINDER/SUBALLOCATION CONVERTED TO SEQUENTIAL DATASETS.\n           END-FILE RECORDS WITH KEYS ARE COPIED WITHOUT KEYS.\n           ALTERNATE TRACK ASSIGNMENTS ON THE OUTPUT VOLUME ARE NOT TESTED;\n             THEY MAY BE HONORED FOR DATA TRACKS. FOR ALTERNATE TRACKS IN\n             THE OUTPUT VTOC, PERMANENT I/O ERRORS ARE POSSIBLE.\n0         MAJOR OPTIONS :\n0          UNUSED TRACKS OF PS DATASETS MAY BE RELEASED (FREE)\n           IEBCOPY MAY BE USED TO COMPRESS PO DATASETS (COMP), OR\n           IEBCOPY MAY BE USED FOR ALTERED PO DATASETS (CHGD).\n0          THE CATALOG AND PASSWORD DATASETS ARE COPIED NORMALLY FOLLOWING THE\n           COPIES OF ISAM AND OTHER UNMOVABLE DATASETS.  IF THE CATALOG IS TO\n0                                                                             33\n1                   Technical Guide to System Modifications\n     COPYVOL                                               Utility Programs\n-     BE PLACED IMMEDIATELY FOLLOWING THE VTOC, A CODE CHANGE IS REQUIRED-\n      SEE LABEL SPCLOK1 AND EXPAND THE COMMENTED CODE.\n      THE VOLUME MUST BE ANALYZED/FORMATTED AT LEAST ONCE PRIOR TO USE;\n      THE VTOC CONTENTS IS IRRELEVANT. THE VTOC WILL BE OVERWRITTEN IN\n      ITS ENTIRETY BY COPYVOL.\n0     COPYVOL PERFORMS NO ERROR RECOVERY AT ALL. WHEN AN ERROR OCCURS,\n       DIAGNOSTIC INFORMATION IS PRINTED, AND THE PROGRAM ABENDED.\n      RUNNING TIME FOR THIS PROGRAM FOR A 3330-11 IS ABOUT 25 MINUTES\n       UNDER SVS ON A 158 (4 MEG, NO PAGING).  THE COMP/CHGD OPTIONS\n       WILL INCREASE THIS TIME DEPENDING ON THE AMOUNT OF PDS DATA COPIED.\n      WHEN IEBCOPY FAILS FOR ANY REASON, THE DATASET IS COPIED NORMALLY.\n      THE PROGRAM SHOULD NOT BE USED TO COPY A DISK CONTAINING SYSTEM\n       DATASETS THAT WERE CAREFULLY ALLOCATED TO OPTIMIZE DISK PERFORMANCE\n       UNLESS THESE DATASETS ARE FLAGGED NOT MOVABLE (EITHER VIA DSORG,\n       BY SPECIFICATION OF PARM=ASIS OR PARM=SYSU, OR BY INCLUDING A SYSIN\n       OPTION 'U' CARD FOR THE APPROPRIATE DATASETS).\n      WHEN USING THE COMPRESS FUNCTION, AN OPEN IS PERFORMED 4 TIMES FOR\n       EACH LIBRARY COPIED BY IEBCOPY. IF THE DATASET IS PASSWORD PROTECTED\n       THE OPERATOR MAY HAVE TO ENTER THE PASSWORD OF THE PROTECTED\n       DATASET FOUR TIMES. IN THIS VERSION THE JSCBPASS BIT IS SET IN THE\n       JSCB (AND LOCALLY IN TCBUSER).\n      THESE TWO BITS WILL NOT PREVENT THE PASSWORD PROMPTING UNLESS THE\n       CORRECT MODIFICATION IS MADE TO BYPASS PASSWORD PROTECTION FOR THIS\n       PROGRAM (JSCBPASS IS ORIGINALLY EFFECTIVE ONLY FOR TSO TASKS).\n        RUN A SUPERZAP DUMP FOR IFG0195T. AT OFFSET 26 HEX (MVT/SVS) LOOK\n        FOR TM TCBTSFLG-TCB(15),TCBTSTSK\n            BZ *+16             *** CHANGE TO NOP ***\n            L  15,TCBJSCB-TCB(15)\n            TM JSCBSWT1-IEZJSCB(15),JSCBPASS\n       THE USERTCB BIT SETTING HAS BEEN SKIPPED VIA AIF, DEPENDING ON THE\n       INSTALLATION NAME IN &LOCAL.\n0    REQUIREMENTS\n0     THE PROGRAM USES THE 370 INSTRUCTION SET AND BYTE ALIGNMENT FEATURE.\n      TO RUN UNDER VS, THE MODULE MUST BE APF AUTHORIZED AND MUST RESIDE\n       IN AN AUTHORIZED LIBRARY.\n0    STORAGE:\n0     FOR NORMAL COPY, WITH 'NUMBUFFS' 5 OR LESS, 128K SUFFICE FOR MOST\n       INPUT VOLUMES. SPACE FOR THE FORMAT 5 TABLE, AND THE INPUT DSCBS\n       IS ACQUIRED DYNAMICALLY; HENCE THE REGION MAY NEED TO BE INCREASED.\n       196K IS SUFFICIENT FOR TYPICAL RUNS. THIS SIZE WILL NOT SUFFICE FOR\n       3380 PACKS (NOT TESTED YET).\n      WHEN THE COMPRESS OPTION IS SPECIFIED, THE REGION SIZE MUST BE LARGE\n       ENOUGH TO LET IEBCOPY WORK EFFICIENTLY. A REGION SIZE OF 512K IS\n       RECOMMENDED; THIS SUFFICES FOR ALL EXCEPT VERY LARGE DATASETS\n        (E.G. THE SMP DATASET SYS1.CDS AND SIMILAR KLUNKERS).\n0     DDNAMES:\n       SYSUT1 - THE INPUT VOLUME, SPECIFIES UNIT AND VOLSER. DISP=OLD\n       SYSUT2 - THE OUTPUT VOLUME, SPECIFIES UNIT AND VOLSER. DISP=OLD\n0    34\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYVOL\n-                  THIS VOLUME MUST BE MOUNTED PRIVATE, OR MUST HAVE PRIVATE\n                   ON THE DD CARD. PERM.RESIDENT ATTRIBUTE CAUSES ERROR FOR\n                   MOUNTABLE DRIVES, BUT IS PERMITTED FOR 3350, 3375 AND 3380.\n0           FOR USERS WHO DISLIKE SYSUT DD NAMES, THERE ARE ALTERNATE PAIRS:\n                   DISKIN/DISKOUT\n                   INDISK/OUTDISK\n                   DISKIN1/DISKOUT\n                   INDISK1/OUTDISK\n              WHEN ONE OF THESE PAIRS IS SPECIFIED, UP TO SEVEN ADDITIONAL\n                   INPUT VOLUMES MAY BE SPECIFIED (USING THE SAME PREFIX)\n                   AS DISKIN2-DISKIN8 OR INDISK2-INDISK8.\n0           COMPIN - IEBCOPY SYSIN - MUST BE DD DUMMY\n            COMPOUT - IEBCOPY SYSPRINT FILE. SHOULD BE DD DUMMY.\n            SYSUT3/4 - MAY BE USED FOR IEBCOPY WORK FILES WHEN THE SUPPLIED\n                       STORAGE IS NOT ENOUGH.\n            SYSUDUMP - OPTIONAL, RECOMMENDED TO ANALYZE I/O ERRORS.\n            SYSPRINT - VBA FORMAT PRINT FILE; REQUIRED - MUST NOT BE DUMMY\n            SYSIN    - OPTIONAL INPUT SPECIFICATIONS, ONE DSN PER CARD\n           PARM OPTIONS (DEFAULT  - COPY,LIST,RLSE) :\n            NONE OR MORE VALUES, OPTIONALLY SEPARATED BY COMMAS :\n0          COPY - (DEFAULT) NORMAL COPYVOL PROCESSING (NO IEBCOPY)\n           COMP - USE IEBCOPY TO COMPRESS PARTITIONED DATASETS.\n                    NOTE THAT LIBRARIES WITH DSORG=POU ARE NOT\n                    PROCESSED BY IEBCOPY, BUT ARE COPIED AS IS.\n           CHGD - USE IEBCOPY ONLY FOR PDSS WITH THE DS1DSCHA BIT IN    79325\n                DS1DSIND ON (MVS SU/SVS LOCAL MOD - MEMBER OPENDATE)    79325\n                IF USED, AND LOCAL=CCSI, DS1DSCHA IS TURNED OFF IN ALL\n                  DATASETS THAT ARE COPIED.\n           CONV - (CCSI ONLY); CONVERT AMS/RAND/OSI WYLBUR LINE NUMBERS TO\n                     OBS WYLBUR FORMAT.  MUTUALLY EXCLUSIVE WITH 'COMP'.\n           VTOC - USE INPUT VTOC EXTENTS ON OUTPUT VOLUME\n           EVEN - CONTINUE PROCESSING EVEN WITH I/O ERRORS. GENERALLY WILL\n                     COPY A TRACK, SKIPPING RECORDS WITH DATACHECKS (THOSE ARE\n                     COPIED AS READ). MORE SEVERE ERRORS CAUSE THE TRACK TO\n                     BE SKIPPED (TREATED AS EMPTY) OR TRUNCATED TO THE LAST\n                     PROCESSED RECORD.\n           LIST - (DEFAULT) LIST ALL MESSAGES\n           TERS (OR MSGS) - LIST INDICATIVE, WARNING AND ERROR MESSAGES ONLY\n                   SUPPRESSES 'SUCCESSFULLY COPIED' MESSAGES\n           LOTS - PRINTS NORMALLY UNWANTED MESSAGES; E.G. SKIP OF TEMP FILES\n           ASIS - TREAT ALL DATASETS ON THE PACK AS UNMOVABLE\n           SYSU - TREAT ALL SYS1. DATASETS AS UNMOVABLE\n           SYSP - COPY ALL SYS1. DATASETS PRIOR TO OTHERS OF SAME TYPE\n                 (I.E. CYLINDER ALIGNED DATASETS COPIED AFTER ISAM, UNMOVABLE\n                 AND CATLG/PASSWORD, BUT PRIOR TO OTHER CYLINDER/TRACK ALIGNED\n                 DATA; TRACK ALIGNED ONES COPIED PRIOR TO OTHER TRACK ALIGNED)\n           RLSE - (DEFAULT) RELEASE UNUSED EXTENTS FROM PS/PO DATASETS\n           KEEP - KEEP ALL EXTENTS (ALSO PREVENTS MERGING CONTIGUOUS EXTENTS)\n           FREE (OR TREL) - RELEASE ALL UNUSED TRACKS FOR P.S. DATASETS\n           IPLT (OR TRK0) - COPY IPL TRACK ALSO (EXCEPT RECORD 3).\n           SWAP - FOLLOWING PACK COPY, EXCHANGE VOLUME LABELS BETWEEN PACKS.\n0                                                                             35\n1                   Technical Guide to System Modifications\n     COPYVOL                                               Utility Programs\n-            EASIER WHEN INPUT AND OUTPUT ARE ON SAME BANK AND ONLY PLUGS\n             NEED TO BE SWITCHED. SUPPORTED ONLY FOR REMOVABLE DISK TYPES\n             FOR SINGLE INPUT VOLUME. AN EARLIER RESTRICTION THAT INPUT\n             AND OUTPUT VTOC START ADDRESSES BE EQUAL HAS BEEN REMOVED.\n      >YYDDD - COPY IF ACCESS DATE HIGHER THAN OR EQUAL YYDDD\n      <YYDDD - COPY IF ACCESS DATE < THAN YYDDD\n           ACCESS DATE IS DEFINED AS MAX(DS1EXPDT,DS1CREDT,DS1REFD)\n      DUMP - PRODUCE DUMP AFTER ABNORMAL TERMINATION\n                 THIS OPTION IS FORCED FOR AN I/O ERROR.\n      DBUG - PRODUCE DUMP ON ANY TERMINATION (INCLUDING NORMAL)\n0    PLUG : IF YOUR INSTALLATION HAS 'FDR', LOOK INTO THE 'COMPAKTOR'.\n      IT IS NOT QUITE AS CHEAP, BUT IT DOES SOME COPYVOL FUNCTIONS\n      FASTER AND BETTER.\n0     SYSIN CARDS (FREE FORMAT, COLUMNS 1-80)\n           SPECIAL PURPOSE CARDS :\n0          VTOC=ABSTRK,EXTENT=TRACKS  SPECIFIES OUTPUT VTOC LOC/SIZE\n             WHERE ABSTRK IS THE TRACK NUMBER RELATIVE TO ZERO\n             (AND GREATER THAN ZERO); TRACKS SPECIFIES THE NUMBER\n              OF TRACKS IN THE NEW VTOC.\n0          COND=VALUE    OR CODE=VALUE   - SET AN ERROR CODE AT AND\n             ABOVE WHICH EXECUTION WILL TERMINATE, AND SWAP REQUESTS\n             WILL NOT BE HONORED. NO DEFAULT EXISTS.\n0     GENERAL FORMAT:\n       FIRST NON-BLANK FIELD - OPTIONS\n       SECOND NON-BLANK FIELD - DATASET NAME, DSN PREFIX, OR MASK\n       THIRD NON-BLANK FIELD - RENAME OPTION REPLACEMENT STRING\n0     OPTIONS BYTES :\n       * - COMMENTS CARD - PRINTED AS READ\n       S - SELECT DSN   (ALTERNATE FORM)\n       I - INCLUDE DATASET\n       X - EXCLUDE DSN  (ALTERNATE FORM)\n       E - EXCLUDE DATASET\n       R - RENAME DATASET\n       U - TREAT DSN AS UNMOVABLE\n       K - KEEP UNUSED EXTENTS (EXTENTS STILL COMPRESSED)\n       F - FREE ALL UNUSED TRACKS FOR P.S. DATASETS\n       P - PRIORITY COPY (IF CYL BOUND, PRIOR TO OTHER CYL; IF TRK BOUND,\n                          PRIOR TO OTHERS ON TRK BOUNDARY)\n       N - NORMAL COPY; TURNS OFF PRIORITY AND UNMOVABLE BITS.\n             ALSO RESETS UNMOVABLE RESULTING FROM DSORG=POU\n             BUT DOES NOT INVOKE IEBCOPY TO BE USED FOR DSORG=U\n       A - COPY BY ALLOCATION/ACCESS DATE (IF < OR > OPTION USED)\n       B - BYPASS/RESET DATE CHECK\n           A AND B ARE VALID ONLY ON INCLUDE/EXCLUDE CARDS\n       O - PLACE DSCB IN LOWEST FREE VTOC POSITION (AFTER VSAM DONE)\n       1-8 - ONE OR MORE DIGITS - THE CARD APPLIES ONLY TO THE DD\n             CARD(S) SPECIFIED. IF OMITTED, CARD APPLIES TO ALL PACKS.\n-    36\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYVOL\n-          MASK FIELD\n            1 TO 44 CHARACTERS.  EITHER A QUESTION MARK OR A QUOTE (\")\n               REQUEST BYPASS OF CHECK IN THAT POSITION (GENERAL MATCH).\n               COMPARE STARTS WITH LEFT-MOST BYTE FOR DATASETS WHOSE NAME\n               LENGTH IS NO LESS THAN THE MASK LENGTH.\n                A QUOTE SPECIFIES A GENERAL MATCH CHARACTER WHICH WILL BE\n                COPIED TO THE CORRESPONDING MATCH CHARACTER IN THE RENAME\n                OUTPUT STRING. QUESTION MARKS ARE FOR INPUT SCANNING ONLY,\n                AND ARE NOT VALID IN RENAME OUTPUT STRINGS.\n               EITHER A SEMI-COLON OR AN EXCLAMATION POINT MAY BE USED\n                AS A TERMINAL CHARACTER TO INDICATE A PRECISE NAME;\n                EITHER IS REPLACED BY A BLANK FOR MASK TESTING.\n0          REPLACEMENT STRING\n            1 TO 44 CHARACTERS TO REPLACE MATCHING ONES IN THE MASK FIELD.\n               TRUNCATION OF A NAME DOES NOT RESULT IN AN ERROR.  QUOTES\n               MAY BE USED TO INDICATE REPLACEMENT FROM OLD NAME, AND ARE\n               LIMITED TO THE NUMBER OF QUOTES IN THE INPUT STRING.\n                QUESTION MARKS, SEMI-COLONS AND EXCLAMATION MARKS ARE\n                NOT VALID FOR REPLACEMENT NAMES.\n0         PROCESSING :\n0         INCLUDES/EXCLUDES ARE HANDLED SEPARATELY FOR EACH PACK.\n           FOR EACH PACK, AS DETERMINED BY EXPLICIT DIGITS (ALL IF NONE),\n           GLOBAL PROCESSING MODE IS SET BY THE FIRST INCLUDE/EXCLUDE CARD\n           FOUND.  IF FIRST IS INCLUDE, ONLY DATASETS WHICH MATCH ONE OF\n           THE REQUESTS ARE COPIED.  IF FIRST ONE IS EXCLUDE, DATASETS WILL\n           BE COPIED UNLESS AN EXCLUDE IS FOUND TO MATCH.\n           BOTH INCLUDES AND EXCLUDES MAY BE SUPPLIED IN THE SAME RUN.\n           WHEN A MATCH IS FOUND, COMPARISON CONTINUES UNTIL END OF INPUT.\n           E.G. IF GLOBAL OPTION IS INCLUDE, AND ONLY A MATCH ON INCLUDE IS\n           FOUND, THE DATASET IS COPIED.  IF FOLLOWING THE INCLUDE MATCH\n           ANOTHER MATCH OCCURS ON AN EXCLUDE, THE DATASET WILL BE SKIPPED,\n           BUT COMPARISON CONTINUES; IF THERE IS ANOTHER INCLUDE MATCH, IT\n           WOULD GET COPIED.\n0         EXAMPLES :\n0          PI  SYS?.   INCLUDE SYSA./SYSB./.../SYS9. DATASETS WITH PRIORITY\n             X  SYS#.   BUT EXCLUDE SYS#. DATASETS\n           IU  SYS#.COPY  BUT INCLUDE SYS#.COPY; TREAT AS UNMOVABLE\n0           RU    SYS1.  OLDSYS1.\n            * ABOVE RENAMES ALL SYS1. DATASETS TO OLDSYS1. AND TREATS\n            *    THEM AS UNMOVABLE.\n            R SYS\".   OLD\".\n            * ABOVE RENAMES ALL DATASETS STARTING WITH 'SYS' HAVING A FOUR\n            * BYTE INDEX LENGTH TO OLD, AND COPIES THE FOURTH BYTE, E.G.\n            * SYS1.SVCLIB IS RENAMED OLD1.LPALIB; SYS2.PROCLIB TO\n            * OLD2.PROCLIB, ETC.\n            R1 SYS\". NEW\".       RENAMES ALL SYS DATASETS TO NEW\n            R2345678 SYS\". OLD\". EXCEPT ON SECOND THROUGH EIGHTH PACK\n-                                                                             37\n1                   Technical Guide to System Modifications\n     COPYVOL                                               Utility Programs\n-    DEPENDENCIES:\n0     SUBROUTINES @SERVICE, @DCBEXIT, @PRINTER AND @INPREAD\n      MACROS : AS DISTRIBUTED WITH TSMDTR AND DTSDTR.\n        COPY MEMBER SYSPARM SHOULD BE SET CORRECTLY FOR YOUR\n        INSTALLATION (&SYSTEM, &LOCAL, &MVS/&SVS SETB)             82271\n0    UNBELIEVABLY UNSURPASSABLE ERROR MESSAGES :\n0     ABEND USER 1  (PRECEDED BY DIAGNOSTIC MESSAGES)\n        ERROR IN PARM FIELD    (NO DUMP)\n        ERROR IN SYSIN CARDS   (NO DUMP)\n        SYNSIZE VALUE TOO SMALL FOR INPUT (TABLE OVERFLOW)\n        INPUT/OUTPUT VOLUMES NOT COMPATIBLE\n        INPUT/OUTPUT VOLUME NOT SUPPORTED\n        OUTPUT VOLUME IS PERM. RESIDENT OR NOT PRIVATE\n        OPERATOR DENIED COPY REQUEST\n        FREE EXTENT LIST PROCESSING ERROR IN IEBCOPY PORTION OF CODE\n        MORE THAN MAXFREE EXTENTS REQUIRED (SEE NUMDSCB5)\n        LOGIC OR PROCESSING ERROR ALLOCATING DATASET OR IN FREE\n          EXTENT TABLE\n0     ABEND USER 2             (DUMP FORCED)\n        UNRECOVERABLE I/O ERROR ON INPUT OR OUTPUT VOLUME\n0     ABEND USER 8\n        CONDITION CODE REACHED/EXCEEDED USER'S REQUESTED STOP CODE\n0     ABEND USER 666\n        TAKEN AT END OF PROGRAM WHEN DBUG OPTION IS CHOSEN\n0     ABEND USER 1403\n        SYSPRINT DD MISSING OR DUMMY\n0    COMPLETION CODES\n0     CODE 0 - EVERYTHING WORKED ?\n      CODE 1 - ERROR WRITING FMT 5 DSCBS; PACK USABLE BUT NOT PERFECT\n                 OR ALTERNATE TRACK USED FOR DATA.\n      CODE 2 - ANY ERROR IN IEBCOPY; DATASET COPIED ASIS\n      CODE 4 - AT LEAST ONE DATASET WITH BAD OR SPLIT EXTENTS UNCOPIED\n      CODE 8 - UNMOVABLE/ISAM DATASET NOT COPIED - UNABLE TO ALLOCATE\n                 OR ALTERNATE TRACK USED IN OUTPUT VTOC.\n       ANY OF THE ABOVE ARE OR'ED TOGETHER\n      CODE 16 - I/O ERROR DURING SWAP LABEL REWRITE.\n-    ASSEMBLY OPTIONS\n      SYNSIZE - GETMAIN SIZE OF THE CONTROL CARD TABLE.\n                DEFAULT IS 4K, WHICH IS MORE THAN ENOUGH FOR\n                MOST APPLICATIONS.  MAY BE ZAPPED.\n0     NUMCCWS - THIS IS THE MAXIMUM NUMBER OF DATA RECORDS\n                WHICH WILL OCCUR ON ANY ONE TRACK. FOR CURRENTLY\n0    38\n1                        Technical Guide to System Modifications\n          Utility Programs                                               COPYVOL\n-                    SUPPORTED DEVICES, THIS IS THE NUMBER OF UNKEYED\n                     BLOCKS OF LENGTH 1 (!) WHICH FIT ON THE TRACK.\n                     NOT ZAPPABLE.\n0          NUMBUFFS - NUMBER OF FULL-TRACK I/O BUFFERS.  THIS VALUE\n                      MUST BE AT LEAST TWO, AND SHOULD NOT BE SET TOO\n                      HIGH. IF YOU HAVE MANY LARGE DATASETS, AND NO\n                      OR EXTREMELY LOW PAGING, THE VALUE MAY BE UPPED.\n                      NOT ZAPPABLE.\n0          NUMDSCB5 - NUMBER OF FORMAT 5 DSCBS MAINTAINED IN STORAGE.\n                      MINIMUM IS 1, MAXIMUM IS 157.\n0          WYLBLOCK/WYLRECL - USED BY DTS FOR OBS WYLBUR SUPPORT.\n           VTOC RELOCATION OPTION:\n              VTOC=ABSTRK,EXTENT=TRACKS\n0          COND= / CODE= TASK TERMINATION OPTION\n              VALUE SPECIFIES LOWEST ERROR CODE CAUSING TERMINATION.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              39\n1                   Technical Guide to System Modifications\n     CRTNASTY                                              Utility Programs\n-    2.2.17   3270 Message Facility ...............................CRTNASTY\n+    2.2.17   3270 Message Facility                                CRTNASTY\n+             ____ _______ ________                                ________\n0    This program is used as a start task, and as the final step in certain\n     3270 programs,  to  clear the screen.  Some  applications normally may\n     leave  sensitive data  displayed when  they  are shut  down or  crash.\n     CRTNASTY writes a  message,  consisting of up  to 23 lines of  80 byte\n     data supplied on a SYSIN DD,  to every 3277,  3278 and 3279 defined as\n     local non-SNA CRTs in the system.  The write is bypassed if the CRT is\n+          non SNA\n     allocated,   has  pending  interrupts  or   any  other  control  block\n     information  that might  indicate  it is  being used  by  a task  that\n     bypassed allocation.   The top  line of the  screen indicates  the CRT\n     address and the current time.\n0    The program may also be used to identify stray CRTs.\n0    An  optional SYSPRINT  DD  will  receive status  messages,   including\n     unallocated CRTs that  were bypassed because of UCB  flags,  and error\n     results encountered on WRITE completion.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    40\n1                        Technical Guide to System Modifications\n          Utility Programs                                              DATEEDIT\n-         2.2.18   Date Insertion ......................................DATEEDIT\n+         2.2.18   Date Insertion                                       DATEEDIT\n+                  ____ _________                                       ________\n0         DATEEDIT is  a filter for inserting  dates into a card-format  data or\n          JCL  stream.   Input  is  read  from  SYSUT1(SYSIN)   and  written  to\n          SYSUT2(SYSOUT).\n-         The following strings are replaced:\n0          ##/##/## or ##/#D/##    replaced by current date\n           ##/#P/##                replaced by previous day's date\n           ##/#B/##                replaced by last preceding business day\n           #M/##/##                replaced by first day of the current month\n           #M/31/##                replaced by last day of current month\n           #P/##/##                replaced by first day of the prior month\n           #P/31/##                replaced by last day of the prior month\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              41\n1                   Technical Guide to System Modifications\n     DEFORMAT                                              Utility Programs\n-    2.2.19   FORMAT to SCRIPT conversion .........................DEFORMAT\n+    2.2.19   FORMAT to SCRIPT conversion                          DEFORMAT\n+             ______ __ ______ __________                          ________\n0    This program reads text written for the FORMAT text formatter (see IBM\n     Washington Scientific Center Report 320-3501) on SYSIN and converts it\n     to (Waterloo)  SCRIPT format on SYSPUNCH,   with an optional input and\n     output listing on SYSPRINT.\n0    The  conversion is  not completely  correct,   but generally  produces\n     output that requires only minor massaging to produce usable output.\n0    By default,   all input data  are converted  from upper case  to lower\n     case.   The program  detects  SPECIAL PUNCH  and  PARAGRAPH INDENT  IS\n     control cards, but ignores others (e.g., TABS).\n0    The  )F control  word does  not produce  correct output  (there is  no\n     direct SCRIPT equivalent)\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     42\n1                        Technical Guide to System Modifications\n          Utility Programs                                               DELINK0\n-         2.2.20   De-Link Edit ........................................DELINK0\n+         2.2.20   De-Link Edit                                         DELINK0\n+                  _______ ____                                         _______\n0         This program  is offered  as-is.   Input is  a load-module  library as\n          SYSLIB,  the object  deck output specification (SYSPUNCH)   and a list\n          file (SYSPRINT).\n0         Sample JCL:\n0          //DELINK JOB ...\n           //UNDO EXEC PGM=DELINK0,REGION=80K\n           //SYSPRINT DD SYSOUT=A\n           //SYSPUNCH DD DSN=&&DECK,UNIT=SYSDA,DISP=(,PASS),\n           // SPACE=(CYL,(1,1),RLSE,CONTIG),DCB=(RECFM=F,LRECL=80,BLKSIZE=80)\n           //SYSLIB DD DSN=SYS1.LPALIB,DISP=SHR\n            IFG0196W IFG0196W\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                             43\n1                   Technical Guide to System Modifications\n     DEVTABLE                                              Utility Programs\n-    2.2.21   Device Mask Table Lister ............................DEVTABLE\n+    2.2.21   Device Mask Table Lister                             DEVTABLE\n+             ______ ____ _____ ______                             ________\n0    UNTDEVTB -- SYMBOLIC SUPERZAP OF DEVICE  NAME AND MASK TABLES SUPPLIED\n     TO THE SHARE OS PROJECT BY THE UNIV. OF TENNESSEE\n0    For  listing/modification  of  the  Elegible  Device  Table  refer  to\n     DYNALIST/DYNAMASK.\n0    DEVTABLE - Preliminary User's Guide\n0    DEVTABLE is a program which can be  used to list and modify the Device\n     Name Table and the Device Mask Table.   The current version is capable\n     only of modifying the mask bits in the Mask Table.  Modifying of names\n     or device types still requires the use of SUPERZAP.\n0    The following JCL is required to run DEVTABLE:\n0       //  EXEC  PGM=DEVTABLE\n0    The program does not  accept any PARM information and will  run in the\n     default of 64K.\n0       //DEVPRINT  DD  SYSOUT=A\n0    The output file from the program typically is directed to the printer.\n     The DCB is  device independent and specifies  RECFM=FBA and LRECL=121.\n     BLKSIZE may specified on the DD card  as any integral multiple of 121.\n     If not specifed on the DD card, 121 is assumed.\n0       //SYSPRINT  DD DUMMY\n0    The output file  from SUPERZAP is normally not  printed.  SYSOUT=A (or\n     whatever) may be specified if desired.   This card is only required if\n     the  mask table  is to  be modified;    it  is not  required for  list\n     functions.\n0       //SYSLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR\n0    The SUPERZAP  SYSLIB card is required  for both list  and modification\n     functions.   Even  when SUPERZAP  is not  invoked,  DEVTABLE  uses the\n     SYSLIB DD card to LOAD the tables.    It will not accept a module from\n     link pack, nor from logical LINKLIB nor from STEPLIB.   The tables are\n     reloaded for  every list  or modification  function and  thus listings\n     reflect modifications immediately.\n0       //SYSIN  DD  UNIT=SYSDA,SPACE=(TRK,(10,10))\n0    The SUPERZAP input file  is a temporary and is required  only if table\n     modifications are made.   The DCB  specifies RECFM=FB and LRECL=80.  A\n     BLKSIZE will be accepted from either the data set label or from the DD\n     If unavailable from any other source, a value of 800 will be assumed.\n0       //DEVIN  DD  *\n-    44\n1                        Technical Guide to System Modifications\n          Utility Programs                                              DEVTABLE\n-         The DEVTABLE input file is optional.   If omitted, DUMMY,  or null,  a\n          listing of the  entire table is printed.   The  DCB specifies RECFM=FB\n          and LRECL=80.   The BLKSIZE is normally taken from either the data set\n          label or the DD card. If BLKSIZE is unavailable from any source (e.g.,\n          the input is an unlabeled tape),  a value of 80 is assumed.   DEVTABLE\n          control cards have an operation field in  columns 1-7 and zero or more\n          operand fields beginning in colums 8, 16,  24 and so on through column\n          64.    Both  operations  and  operands are  left  justified  in  their\n          respective fields.   Continuations are failed,   but as many UCB cards\n          (see below) as are necessary may be specified.\n0         EJECT card.  An EJECT card may appear at any point in the input stream\n          to  cause a  page  eject in  the  output listing.    The  card has  no\n          operands.\n0         LIST card. The LIST card may be used to list the UCB's associated with\n          one or more device  names.   The operands are the names  to be listed.\n          If no operands are  specifed,  all the names in the  table are listed.\n          Example:\n0          LIST\n0         The entire table is listed.\n0          LIST   TAPE    2400    3400-4  TAPE9\n0         The entries for TAPE, 2400, 3400-4, and TAPE9 are listed.\n0         ZAP card.   The ZAP card is used to specify the device names for which\n          new UCB's will be  set.   The format is the same as  for the LIST card\n          except that there must be at least one operand.   The ZAP card must be\n          followed by one or more UCB card which specify the new values.\n0         UCB card.  The UCB card is used to specify the values for a preceeding\n          ZAP card.   The operands are  either UCB addresses  or a range  of UCB\n          addresses.   A UCB range consists of a beginning address and an ending\n          address separated by commas.\n0         Examples:\n0          LIST   SYSDA   WORK\n           ZAP    SYSDA   WORK\n           UCB    150     153-154\n           LIST   SYSDA   WORK\n           LIST   TAPE    2400    TAPE9   3400-4\n           ZAP    TAPE    2400    TAPE9   3400-4\n           UCB    380-383\n           LIST   TAPE    2400    TAPE9   3400-4\n           LIST   2314\n           ZAP    2314\n           UCB    230\n           UCB    231\n           UCB    232\n           UCB    233     234-237\n0                                                                             45\n1                   Technical Guide to System Modifications\n     DEVTABLE                                              Utility Programs\n-     LIST   2314\n0    A proc called DEVTABLE may be used to invoke the program.  It contains\n     the  cards  described  above  execpt that  the  DEVIN  card  specifies\n     DDNAME=DEVIN.\n0            Local modifications (G.P.)\n0            A CARD WITH '*' IN COLUMN ONE WILL BE TREATED AS COMMENTS\n                   AND IS PRINTED WHEN READ.\n0            A DD CARD TO DEFINE AN ALTERNATE NUCLEUS MAY BE USED.\n             //NUCLEUS DD DSN=SYS1.NUCLEUS(MEMBER),VOL=SER=...\n0            IF THIS CARD IS OMITTED OR DUMMY, THE RUNNING NUCLEUS IS\n             REFERENCED.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     46\n1                        Technical Guide to System Modifications\n          Utility Programs                                              DIPLOMAT\n-         2.2.22   Diplomacy Game ......................................DIPLOMAT\n+         2.2.22   Diplomacy Game                                       DIPLOMAT\n+                  _________ ____                                       ________\n0         This program is a computerized adjunct  to the game of DIPLOMACY.   It\n          validates moves,  supplies defaults as required,  and produces updated\n          maps and order sheets.\n0         The program  is DIPLOMAT,  and  uses subroutines  DIPLINIT,  DIPLMAPS,\n          DIPLPRNT and DIPLPROV\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                                                             47\n1                   Technical Guide to System Modifications\n     DISASM                                                Utility Programs\n-    2.2.23   Disassembler ........................................DISASM\n+    2.2.23   Disassembler                                         DISASM\n+             ____________                                         ______\n0    The DISASM program creates an assembler language source program from a\n     Load-Module PDS member.   DD cards required are  SYSPRINT for messages\n     and diagnostics (BLKSIZE is a multiple of 121),  SYSLIB specifying the\n     PDS containing the member (PDS  concatenation is supported),  SYSPUNCH\n     for the produced  assembler source code (card format,   with BLKSIZE a\n     multiple of 80),  and SYSIN for the control card input.  Control input\n     may optionally  be entered  via the  PARM on  the EXEC  card.  Control\n     information includes the member and CSECT name to be disassembled.  If\n     the CSECT name is omitted, the CSECT for ESD-ID 0001 will be used.\n-    Files:\n0     DDNAME SYSLIB: RECFM=U. INPUT LOAD MODULE LIBRARY.\n0     DDNAME SYSPUNCH: RECFM=FB,LRECL=80. OUTPUT FILE CONTAINING\n                      DISASSEMBLED TEXT. (MAXBLK=18,960)\n0     DDNAME SYSPRINT: RECFM=FBA,LRECL=121.  PRINTED OUTPUT CONTAINING A\n                     LIST OF THE ESD TABLE, RLD TABLE, AND TEXT.\n                     (MAXBLK=18997)\n      DDNAME LOADLIB: (OPTIONAL) NAMES A PDS CONTAINING THE\n                      MODULES OF DISASM IF DIFFERENT FROM\n                      THE STEPLIB. USED PRIMARILY FOR TSO.\n0     DDNAME SYSIN: RECFM=FB, LRECL=80. CONTROL CARD INPUT.\n-    The control card provides the member and  CSECT name of the program to\n     be disassembled.   The member  name is  required,  the  CSECT name  is\n     optional and  defaults to the first  CSECT in the module.    Note that\n     specification of  a CSECT  which originally was  part of  an assembly,\n     rather than the  only CSECT,  may produce  erroneous results.  Control\n     card contents is free format, and the CSECT may be separated by blanks\n     or one comma from the member name.\n0    The EXEC card  PARM may be used  to include additional code  points as\n     instructions rather than data.  When specified, the optional code sets\n     will be interpreted as instructions:\n          PARM=(SUPVR)      PRIVILEGED INSTRUCTIONS\n          PARM=(FLTPT)      FLOATING POINT INSTRUCTIONS\n          PARM=(SUPVR,FLTPT) BOTH\n-    PROCESSING FLOW:\n      1. PROCESS THE CONTROL INFORMATION TO OBTAIN THE MEMBER\n         AND CSECT NAMES.\n      2. ISSUE BLDL AGAINST SYSLIB TO OBTAIN DIRECTORY INFO FOR\n         THE MEMBER SPECIFIED. IF THE SPECIFIED MEMBER IS AN\n         ALIAS, RE-ISSUE A BLDL FOR THE REAL MEMBER. PRINT\n         DIRECTORY INFORMATION.\n      3. POINT TO THE MEMBER IN THE SYSLIB PDS, AND PROCESS THE\n0    48\n1                        Technical Guide to System Modifications\n          Utility Programs                                                DISASM\n-             MEMBER. LOAD MODULES CONTAIN AN EXTERNAL SYMBOL DICTIONARY\n              FOLLOWED BY TEXT AND RELOCATION DICTIONARY INFORMATION.\n              ALL ESD INFO FOR THE MODULE PRECEDES THE FIRST CONTROL\n              RECORD. A CONTROL RECORD PRECEDES EACH BLOCK OF TEXT.\n              RLD INFO FOR THE TEXT FOLLOWS EACH TEXT BLOCK. PROCESSING\n              OF LOAD MODULE INFORMATION IS AS FOLLOWS:\n              A. BUILD AN EXTERNAL SYMBOL TABLE, USING THE CESD BLOCKS.\n              B. SEARCH FOR THE DESIRED CSECT AS THE TABLE IS BEING\n                 BUILT. THIS CSECT MUST BE FOUND BEFORE THE FIRST\n                 CONTROL RECORD.\n              C. READ BLOCKS UNTIL A CONTROL RECORD FOR THE DESIRED\n                 CSECT IS FOUND (BY ESD-ID). WHEN FOUND, SAVE THE\n                 TEXT FOR DISASSEMBLY, AND USE THE FOLLOWING RLD\n                 INFORMATION TO BUILD A RELOCATION DICTIONARY TO BE USED\n                 DURING DISASSEMBLY.\n           4. DISASSEMBLY USES THE EXTERNAL SYMBOL TABLE, RELOCATION\n              DICTIONARY, AND TEXT BUILT BY THE PREVIOUS STEPS.\n-          AUTHOR R THORNTON - NOV 1977\n0          UPDATES BY G. POSTPISCHIL\n             MINOR  ERRORS FIXED;   OUTPUT  FORMAT  FLIPPED TO  MATCH  ASSEMBLER\n          LISTING\n             HORRIBLE ERROR FIXED - HAD POINT RATHER THAN FIND\n                    IN ORIGINAL CODE - FAILS FOR CONCATENATION.\n             GETMAIN SIZES INCREASED FOR MVS/SP1.3 NUCLEUS\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                             49\n1                   Technical Guide to System Modifications\n     DISASTER                                              Utility Programs\n-    2.2.24   Distribution Tape Catalog Builder ...................DISASTER\n+    2.2.24   Distribution Tape Catalog Builder                    DISASTER\n+             ____________ ____ _______ _______                    ________\n0    This PL/I  routine,  supplied  by Seymour  Metz,  reads  multiple file\n     IEBUPDTE format input  tapes and builds a module  directory later used\n     by DIST.   This program requires MODJFCB  support (SVC 240 at E.S.P.).\n     Member DISTBLD  contains the PL/I  program;  member  DISASTER includes\n     (now obsolete) JCL and control cards.   Input cards specify the volume\n     serial (IBM distribution tapes are unlabelled)  and the maximum number\n     of files, separated by blanks.  The output file consists of the member\n     name, volume serial,  and file number on the volume.  After the output\n     file is  sorted by member  name,  it  becomes a \"permanent\"  disk file\n     (kept on the DLIB pack) for that system.\n0    Note that  some files on  each tape  contain only macros;   at E.S.P.,\n     these are copied  to SYS1.PVTMACS,  a library  established for release\n     dependent system macros.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     50\n1                        Technical Guide to System Modifications\n          Utility Programs                                                  DIST\n-         2.2.25   Distribution Tape Retrieval .........................DIST\n+         2.2.25   Distribution Tape Retrieval                          DIST\n+                  ____________ ____ _________                          ____\n0         This  assembler module  has  been written  based  on  an earlier  PL/I\n          routine  of the  same name  supplied  by Seymour  Metz.   The  program\n          retrieves members from tape files in  IEBUPDTE format.   It is used in\n          combination with  DISTBLD and  DISTFIND to  build an  IBM distribution\n          tape member directory, and to retrieve and assemble these members.\n0         OUTPUT APPEARS ON SYSPRINT  (REQUIRED)  AND SYSUT2/SYSPUNCH (OPTIONAL;\n          DD DUMMY IF NOT WANTED).   THE IBM  INPUT TAPES ARE SUPPLIED ON SYSUT1\n          WITH DISP=PASS FOR ANY ONE VALID  FILE.  ADDITIONAL FILES WILL BE READ\n          BY JFCB MODIFICATION.\n0         SYSIN CONTROL CARDS:\n0         DSN=DATASET NAME              REQUIRED FOR SL TAPES\n0         VOLSER FILESEQ (MEMBER)\n                OTHER CARDS SPECIFY THE VOLUME SERIAL IN COLUMN 1\n                OR * FOR THE PREVIOUS VOLUME\n                THE SECOND OPERAND SPECIFIES THE FILE NUMBER\n                THE OPTIONAL THIRD OPERAND SPECIFIES THE MEMBER TO BE\n                COPIED. OMISSION OF THE MEMBER NAME RESULTS IN A LIST\n                OF MEMBERS PASSED OVER.\n0         Sample JCL:\n0          //ASMIBM  JOB ...\n           //SYSADIST PROC CC=0,DUMMY='DUMMY,',SYS=S13\n           //LOC     EXEC PGM=DISTFIND,REGION=128K,COND=(&CC,LT)\n           //STEPLIB  DD  DSN=SYS1.DTSLIB,DISP=SHR\n           //SYSPRINT DD  &DUMMY.SYSOUT=*\n           //DISTOUT  DD  DSN=&&DISTIN,DISP=(,PASS),UNIT=VIO,\n           //             SPACE=(6447,(10,10),RLSE,CONTIG),\n           //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)\n           //ASMOUT   DD  DSN=&&ASMIN,DISP=(,PASS),UNIT=VIO,\n           //             SPACE=(6447,(10,10),RLSE,CONTIG),\n           //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=800)\n           //INDEX    DD  DSN=SYS1.&SYS.INDEX,DISP=SHR(Sorted DISTBLD output)\n           //*\n           //DIST    EXEC PGM=DIST,REGION=150K,COND=(&CC,LT)\n           //STEPLIB  DD  DSN=SYS1.DTSLIB,DISP=SHR\n           //SYSUT1   DD  UNIT=(3400-6,,DEFER),VOL=SER=IBMS,DSN=MVSTAP,DISP=OLD,\n           //   LABEL=(,NL),DCB=(EROPT=SKP,RECFM=FB,LRECL=80,BLKSIZE=14400)\n           //SYSUT2   DD  UNIT=VIO,DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),\n           //             SPACE=(CYL,(5,5),RLSE,CONTIG),DSN=&&TEMP,DISP=(,PASS)\n           //SYSPRINT DD  SYSOUT=*\n           //SYSIN    DD  DSN=&&DISTIN,DISP=(OLD,DELETE)\n           //         PEND\n           //*\n           //SYSTUC   PROC WORK=VIO,CC=0,LIB='Z904.GPPSRC',DUMMY='DUMMY,',US=2,\n           //             BLK=12960,LOAD=,DECK=NO,LIST=,TEST=NO,XREF=,LCT=55,\n           //             RENT=NO,TERM=,NUM=NO,PB=605,PS=10,ESD=,\n           //             RLD=NO,SPRM='MVS/SP',REF=SHORT,ASMPRM=,ASMREG=450K,\n0                                                                             51\n1                   Technical Guide to System Modifications\n     DIST                                                  Utility Programs\n-     //             TS='TERM=TS,'\n      //*\n      //*            FOR UPDATE COMPILE - TESTING\n      //*\n      //UP      EXEC PGM=IEBUPDTE,COND=(&CC,LT)\n      //SYSPRINT DD  &DUMMY.SYSOUT=*,SPACE=(CYL,(&US,&US))\n      //SYSUT1   DD  DSN=&LIB,DISP=SHR\n      //*\n      //SYSUT2   DD  DSN=&&UPSET,DISP=(,PASS),UNIT=&WORK,DCB=(RECFM=FB,\n      //             LRECL=80,BLKSIZE=&BLK),\n      //             SPACE=(CYL,(&US,&US,17),RLSE,CONTIG)\n      //*\n      //ASM     EXEC PGM=ASMANY,COND=(&CC,LT),TIME=120,REGION=&ASMREG,\n      //             PARM=(&LOAD.OBJ,&DECK.DECK,&LIST.LIST,&TEST.TEST,\n      //             '&XREF.XREF(&REF)','LINECOUNT(&LCT)',&RENT.RENT,\n      //             &ESD.ESD,&TERM.TERM,&TERM.STMT,\n      //             &NUM.NUM,&RLD.RLD&ASMPRM,\n      //             'SYSPARM(&SPRM)')\n      //CONPRINT DD  &TS.SYSOUT=*\n      //ASMTERM  DD  &TS.SYSOUT=*\n      //ASMLIB   DD  DSN=*.UP.SYSUT2,VOL=REF=*.UP.SYSUT2,DISP=(OLD,PASS)\n      //         DD  DISP=SHR,DSN=SYS1.AMODGEN\n      //         DD  DISP=SHR,DSN=SYS1.PVTMACS\n      //         DD  DISP=SHR,DSN=Z904.GPPMAC\n      //         DD  DISP=SHR,DSN=SYS1.JES2SRC\n      //         DD  DISP=SHR,DSN=SYS1.MACLIB\n      //ASMUT1   DD  UNIT=(&WORK,SEP=ASMLIB),SPACE=(1700,(800,100))\n      //ASMUT2   DD  UNIT=(&WORK,SEP=ASMUT1),SPACE=(1700,(800,100))\n      //ASMUT3   DD  UNIT=(&WORK,SEP=(ASMUT2,ASMUT1,ASMLIB)),\n      //             SPACE=(1700,(800,100))\n      //ASMPRINT DD  SYSOUT=*,DCB=(RECFM=FBM,LRECL=121,BLKSIZE=&PB,\n      //             BUFNO=5),SPACE=(CYL,(&PS,&PS),,CONTIG)\n      //ASMPUNCH DD  SYSOUT=B,DCB=(RECFM=FB,LRECL=80,BLKSIZE=400,BUFNO=3)\n      //ASMGO    DD  DSN=&&LOADSET,SPACE=(80,(400,400)),DISP=(MOD,PASS),\n      //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=400,BUFNO=3),\n      //             UNIT=(&WORK,SEP=(ASMUT3,ASMUT2,ASMUT1,ASMLIB))\n      //ASMIN    DD  DSN=*.UP.SYSUT2,VOL=REF=*.UP.SYSUT2,DISP=(OLD,PASS)\n      //OLDLIB   DD  DSN=&LIB,DISP=SHR\n      //         PEND\n      //*\n      /*SETUP       LOTS OF TAPES; MVS00X, SYSD8J - ALL READ ONLY\n      //A EXEC SYSADIST,DUMMY=\n      member name to be retrieved/assembled; one per card image (col. 1-8)\n        (see specifications for ASMANY input for other options)\n      //B EXEC SYSTUC,CC=0,DUMMY='DUMMY,'\n      //SYSIN DD DSN=&&TEMP,DISP=(OLD,DELETE)\n      //ASM.SYSIN DD DSN=&&ASMIN,DISP=(OLD,DELETE)\n-\n-\n-    52\n1                        Technical Guide to System Modifications\n          Utility Programs                                               DISTBLD\n-         2.2.26   Distribution Tape Catalog Builder ...................DISTBLD\n+         2.2.26   Distribution Tape Catalog Builder                    DISTBLD\n+                  ____________ ____ _______ _______                    _______\n0         This PL/I  routine,  supplied  by Seymour  Metz,  reads  multiple file\n          IEBUPDTE format input  tapes and builds a module  directory later used\n          by DIST.   This program requires MODJFCB  support (SVC 240 at E.S.P.).\n          Member DISTBLD  contains the PL/I  program;  member  DISASTER includes\n          (now obsolete) JCL and control cards.   Input cards specify the volume\n          serial (IBM distribution tapes are unlabelled)  and the maximum number\n          of files, separated by blanks.  The output file consists of the member\n          name, volume serial,  and file number on the volume.  After the output\n          file is  sorted by member  name,  it  becomes a \"permanent\"  disk file\n          (kept on the DLIB pack) for that system.\n0         Note that  some files on  each tape  contain only macros;   at E.S.P.,\n          these are copied  to SYS1.PVTMACS,  a library  established for release\n          dependent system macros.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              53\n1                   Technical Guide to System Modifications\n     DISTFIND                                              Utility Programs\n-    2.2.27   Distribution Tape Lookup ............................DISTFIND\n+    2.2.27   Distribution Tape Lookup                             DISTFIND\n+             ____________ ____ ______                             ________\n0    This program accepts input in 'ASMANY' input format.   Input is copied\n     as-is to  temporary file &&ASMIN for  ASMANY input;  member  names are\n     extracted and sorted  in storage.   The sorted names  are then checked\n     against  the sorted  index of  the  OS optional  source tapes,   built\n     earlier by program DISTBLD (or see DISASTER).  The resulting output is\n     sorted  again on  volume and  file,   then written  to temporary  file\n     &&DISTIN for subsequent input to 'DIST'.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    54\n1                        Technical Guide to System Modifications\n          Utility Programs                                              DOSUPDTE\n-         2.2.28   DOS Tape to OS PDS Conversion .......................DOSUPDTE\n+         2.2.28   DOS Tape to OS PDS Conversion                        DOSUPDTE\n+                  ___ ____ __ __ ___ __________                        ________\n0         This program reads DOS and DOS/VSE format source dump tapes.   The DOS\n          \"CATAL C.\" cards  are read from SYSUT1  (or SYSIN),  and  converted to\n          IEBUPDTE \"./ ADD\"  cards on SYSUT2  (or SYSOUT).   \" BKEND\"  cards are\n          suppressed (end of member); other cards are copied as-is.\n0         A SYSPRINT or SYSTERM  DD may be specified to obtain  a listing of the\n          output.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                             55\n1                   Technical Guide to System Modifications\n     DOWNDATE                                              Utility Programs\n-    2.2.29   Builds IEBUPDTE Deck ................................DOWNDATE\n+    2.2.29   Builds IEBUPDTE Deck                                 DOWNDATE\n+             ______ ________ ____                                 ________\n0    This program was  contributed by the University of  Waterloo under the\n     name UNUPDATE.   For card decks maintained by sequence number (columns\n     73-80),  it will reconstruct the update deck used to go from a version\n     of the deck  to a later one;  this  is used when the  update packet is\n     unavailable.\n0    The original data are specified by a SYSUT1 DD, the current (modified)\n     file by a SYSUT2 DD.  Either file may  be in record format F,  V or in\n     Wylbur Edit  (RECFM=U)  form,   but whichever  form is  supplied,  the\n     sequence numbers must  be available (i.e.,  CLISTs  with left sequence\n     numbers are not supported).\n0    Either or both a SYSPRINT and SYSPUNCH  DD may be supplied for printed\n     and punched output of the update deck.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     56\n1                        Technical Guide to System Modifications\n          Utility Programs                                              DRIPCLIP\n-         2.2.30   Stand-alone DASD Label List/Change ..................DRIPCLIP\n+         2.2.30   Stand-alone DASD Label List/Change                   DRIPCLIP\n+                  ___________ ____ _____ ___________                   ________\n0         This stand-alone  utility program  is used  to display  and alter  the\n+              stand alone\n          volume serial of DASD devices without assistance from an IBM operating\n          system.   It  has been tested  only on  processors running in  360 and\n          early 370 mode; it will run on a 43xx in MVS (pre-XA) mode.\n0         After this program is assembled, the object deck must be preceded by a\n          three card  stand-alone loader.   The loader  code can be  copied from\n          module DRIPLOAD,   which contains  three REPRO  cards paired  with the\n          loader text.\n0         After loading from  a card reader or  tape,  hit ENTER on  the desired\n          console.\n0         To the response of INPUT= reply with four characters (xyyy), where \"x\"\n          is \"T\" for tape input, \"R\" for card reader, and \"C\" for console input.\n0         Type HELP to get a list of options.\n0         Altering a label requires two lines of input:\n0          DISK=cuu    (specifies the DASD address)\n           LABEL=SER=volser,NAME='owner id'\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                             57\n1                   Technical Guide to System Modifications\n     DRIPFREN                                              Utility Programs\n-    2.2.31   Stand-alone I/O Tester ..............................DRIPFREN\n+    2.2.31   Stand-alone I/O Tester                               DRIPFREN\n+             ___________ ___ ______                               ________\n0    This stand-alone program was disassembled  from a Memorex utility (now\n+         stand alone\n     obsolete) used to perform device testing.  Our use is to check devices\n     when the  machine is (mostly)   down after changing  device addresses,\n     re-arranging channel cables, and the like.\n0    After tape or card-reader IPL (copy  REPRO text from DRIPLOAD prior to\n     the  DRIPFREN  object  deck)   the program  loops  until  it  gets  an\n     attention.   The device  issuing the  attention  will be  used as  the\n     console.\n0    Enter DEV=cuu to specify the device to be tested.\n0    Enter TIO to get  a Test I/O performed.  Use Attention  and type-in of\n     \"I\" to interrupt repeated tests.\n0    Instead of TIO, you may enter requests (e.g., SEEK,  READ,  etc.)   to\n     build a CCW chain. Input of GO then starts the test.\n0    The program supports  \"variables\" with a dollar-sign prefix  and a one\n     character name (e.g.,  $Q).  These may be used to contain data as they\n     are read, and may later be displayed.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    58\n1                        Technical Guide to System Modifications\n          Utility Programs                                              DRIPLOAD\n-         2.2.32   Stand-alone Loader ..................................DRIPLOAD\n+         2.2.32   Stand-alone Loader                                   DRIPLOAD\n+                  ___________ ______                                   ________\n0         THIS  PROGRAM  IS INTENDED  TO  EASE  THE  PAINS OF  RUNNING  PROGRAMS\n          DESIGNED FOR CARD-READER OR TAPE IPL.\n0         REQUIREMENTS :\n0         ALLOCATE  A SINGLE  EXTENT PDS  NAMED  SYS1.IPLDECKS ON  ANY DISK  NOT\n          HAVING IPL  TEXT.   FORMAT  IS FIXED  BLOCKED,  RECORD  LENGTH OF  80,\n          BLOCKSIZE TO OPTIMIZE (3520 ON 2314, OR 3120 ON 3330;  LARGER SIZES UP\n          TO TRACK CAPACITY ARE FULLY SUPPORTED).    MEMBERS OF THIS PDS WILL BE\n          ALL DECKS TO BE IPL'D;  NAMES SHOULD BE MNEMONIC AND MEANINGFUL TO THE\n          OPERATORS.   DECKS ARE PLACED IN THE  PDS USING NORMAL OS BPAM/QSAM IN\n          THE FORM  OF OBJECT DECKS FROM  ASSEMBLIES,  OR EXISTING DECKS  MAY BE\n          USED.\n0         EXISTING DECKS :  SEREP\n                THE SEREP DECKS REQUIRES SPECIAL PREPARATION\n                USE IEBGENER TO PLACE AN UNBLOCKED COPY OF SEREP ON A\n                DISK DATASET.  USE IEHDASDR TO SYSPRINT TO DUMP THE\n                DATA. (OR USE THE PRINTALL PROGRAM ALSO ON THIS TAPE).\n                UNLESS YOUR VERSION IS RADICALLY DIFFERENT, NOTE THAT\n                THE NEXT TO THE LAST CARD IS AN 'END' CARD CONTAINING\n                TWO LOW CORE ADDRESSES (IN OUR DECK, A030 AND 0850);\n                THE SECOND ADDRESS IS IN COLUMNS 30/31 - THIS IS THE\n                PROGRAM ENTRY POINT ADDRESS.  AFTER YOU HAVE COPIED\n                SEREP AS IS TO SYS1.IPLDECKS(SEREPXXX), SUPERZAP THE END\n                CARD COLUMNS 4-7 TO THIS ADDRESS (LEADING ZEROES).\n                NOTE THAT THE LAST CARD IN THE DECK CONTAINS EBCDIC\n                DATA; THE FIRST FOUR BYTES ARE THE PRINTER ADDRESS.\n                IN OUR DECK, THIS CARD IMAGE MUST BE ZAPPED INTO THE\n                TEXT CARDS LOADING ADDRESSES 0800-084F.  IF THESE\n                ADDRESSES ARE NOT CORRECT, THEY MAY BE FOUND BY UNDOING\n                THE ZAP, AND RUNNING DRIP REQUESTING SEREP.  SEREP WILL\n                BOMB DOING AN IPL READ FROM THE IPL DISK - CHECK THE\n                CAW IN LOW CORE TO GET THE CCW AND THE CORRESPONDING\n                INPUT ADDRESSES.  YOU MAY WISH TO MAKE MULTIPLE COPIES\n                OF THE SEREP DECK FOR EACH PRINTER (IN CASE YOUR PRIMARY\n                PRINTER IS DOWN) - JUST ZAP THE ADDRESS AFTER RENAMING\n                AN ADDITIONAL COPY.  NO DRIP SUPPORT FOR THIS IS PLANNED\n             SEREP NAMES ARE OBTAINED DYNAMICALLY - A STORE CPU ID\n                INSTRUCTION IS ISSUED - IF IT FAILS, INPUT OF 'SEREP'\n                IS TREATED AS SEREP360; ELSE THE CPU MODEL IS\n                USED IN PLACE OF 360, E.G. SEREP165.\n0         CLIP,  DEBE,  STAND-ALONE DUMP/RESTORE AND DASDR CONTAIN IPL BOOTSTRAP\n          CARDS,  A BPS LOADER DECK AND THE  PROGRAM DECK.   REMOVE ALL CARDS UP\n          TO,  BUT NOT  INCLUDING THE FIRST PROGRAM TEXT CARD.    THE 'END' CARD\n          MUST BE PRESENT AND SHOULD BE THE LAST IN THE DECK;  IF NECESSARY,  AN\n          ENTRY ADDRESS MUST BE ZAPPED IN.  FOR MOST PROGRAMS, THIS ADDRESS WILL\n          BE HEX 1000.\n                IF FINISHED WHEN THIS TAPE IS PREPARED, A VERSION OF\n                CLIP AND IMDSADMP WILL BE INCLUDED UNDER THE NAMES\n                DRIPCLIP AND DRIPDUMP.  THIS VERSION OF CLIP WILL\n0                                                                             59\n1                   Technical Guide to System Modifications\n     DRIPLOAD                                              Utility Programs\n-          PROVIDE 3270 CONSOLE SUPPORT, UPPER CASE TRANSLATE ON\n           ALL INPUT, AND HOPEFULLY OTHER IMPROVEMENTS.\n-    FOR ASSEMBLY DECKS, 'START ADDR' MUST BE USED IN PLACE OF 'CSECT'; THE\n     'ADDR' BEING THE ABSOLUTE LOAD ADDRESS.  THIS ADDRESS, AND NONE OF THE\n     PROGRAM,  MAY BE  HIGHER THAN 236K IN CORE.   THE  ASSEMBLY 'END' CARD\n     MUST SPECIFY AN ENTRY POINT NAME.    THE DRIP PROGRAM WILL NOT PERFORM\n     LINKAGE-EDITOR  NOR LOADER  FUNCTIONS;  ALL  TEXT IS  LOADED INTO  THE\n     ADDRESSES SPECIFIED ON  TEXT CARDS,  AND CONTROL WILL BE  GIVEN TO THE\n     ENTRY  POINT ON  THE  END  CARD.   NO  RELOCATION  OF  RLD RECORDS  IS\n     PERFORMED.\n0    OPERATION :   THIS PROGRAM  IS LOADED AT 236K IN CORE;   MEMORY IS NOT\n     CLEARED.   THE OPERATOR IS PROMPTED FOR THE  NAME OF THE PROGRAM TO BE\n     RUN  DATASET 'SYS1.DRIPLOAD'  IS LOCATED  ON  THE IPL  VOLUME AND  THE\n     REQUESTED MEMBER IS SCANNED FOR.   IF FOUND,  TEXT CARDS ARE READ INTO\n     CORE UNTIL AN  END CARD IS ENCOUNTERED.    LOW CORE IS SET  TO THE IPL\n     UNIT ADDRESS (LOC 2-3), THE ENTRY POINT (LOC 5-7), THE TIMER IS SET TO\n     FFFFFFFF TO  DISABLE IT,   AND TIMER+4  IS USED  TO STORE  THE CONSOLE\n     ADDRESS/TYPE;  THE REMAINDER  OF CORE OUTSIDE THE DRIP  PROGRAM IS NOT\n     CHANGED.   CONTROL  IS GIVEN TO THE  ENTRY POINT SPECIFIED ON  THE END\n     CARD.  IF 'WAIT' WAS SPECIFIED, CONTROL TRANSFER WILL BE DELAYED UNTIL\n     AN EXTERNAL INTERRUPT IS ISSUED.\n0    PREPARATION :   ASSEMBLE THIS PROGRAM,  OVERRIDING LOCAL OPTIONS WHERE\n     DESIRED.   THE  OBJECT DECK FROM  THIS ASSEMBLY  MAY BE PLACED  INTO A\n     CARD- READER AND IPL'ED.  IPL TEXT AND A COPY OF THIS PROGRAM ARE THEN\n     WRITTEN  TO THE  IPL DISK.    THE DISK  ADDRESS MUST  BE SPECIFIED  IN\n     VARIABLE &IPL;   THIS  ADDRESS IS USED ONLY FOR  IPL TEXT PREPARATION;\n     ONCE THIS PREPARATION IS  COMPLETE,  THE DISK PACK MAY BE  USED ON ANY\n     ADDRESS.  THIS  SECTION OF  CODE HAS BEEN  LIFTED FROM  IBM'S IMDSADMP\n     PROGRAM, WHICH IS DESCRIBED IN THE 'SERVICE AIDS' MANUAL.  MOST OF THE\n     CODE HAS BEEN LIFTED FROM THE OS IPL PROGRAM IEAIPL.   WARNING :  THIS\n     PROGRAM IS LIMITED TO A MAXIMUM SIZE OF HEX 'E29' TO FIT ON A 2311 IPL\n     TRACK, AND SHOULD NOT EXCEED THIS SIZE ON OTHER DEVICES UNLESS CHECKED\n     BEFORE CLOBBERING A GOOD DISK.\n0    THE  PROGRAM SUPPORTS  UP TO  THREE  CONSOLES;  THE  BASIC TYPES  ALSO\n     SUPPORTED  BY  IMDSADMP  (1052/3215 AND  3066/5450),   AND  THE  ADDED\n     3272/3277 MOD 2 CRT.  CONSOLES WILL BE USED IN THE ORDER IN WHICH THEY\n     ARE DEFINED IN &CONS;  A NOT-READY  OR PROLONGED 'BUSY' CONDITION WILL\n     CAUSE ANOTHER CONSOLE TO BE USED.\n0    A CONSOLE TYPE OF '4341' SHOULD BE USED  FOR A 20-LINE 3278 OR 3279 ON\n     A 43XX PROCESSOR.\n0     EXITS  -ERROR-    ERROR CONDITIONS RESULT IN A WAIT PSW BEING LOADED\n          WITH THE FOLLOWING ERROR CODES STORED IN THE ADDRESS FIELD OF THE\n          PSW FOR DISPLAY IN THE CONSOLE LIGHTS-\n        ERROR CODE-  1  (0001)    I/O IS NOT OPERATIONAL.\n            2  (0010)    I/O OPERATION IS NOT INITIATED. CSW IS\n                         STORED BUT UNIT IS NOT BUSY.\n            3  (0011)    I/O OPERATION IS NOT INITIATED. CSW IS\n0    60\n1                        Technical Guide to System Modifications\n          Utility Programs                                              DRIPLOAD\n-                             NOT STORED AND THE CHANNEL IS NOT BUSY.\n                 4  (0100)    CHANNEL IS NOT BUSY AND CSW IS NOT STORED\n                 5  (0101)    UNIT CHECK CONDITION IS INDICATED.\n                 6  (0110)    ANY OF THE FOLLOWING CONDITIONS -\n                                PROGRAM CHECK\n                                CHANNEL DATA CHECK\n                                CHANNEL CONTROL CHECK\n                                CHANNEL CHAINING CHECK\n                                INTERFACE CONTROL CHECK\n                18  (00011000) AVAILABLE SPACE FOR RLD RCDS HAS BEEN\n                              EXCEEDED.\n              C0XX  (NNNNNNNN) UNEXPECTED PGM CHK INTERRUPT, IPL\n                              CONTAMINATED.\n0             FFFF     NO CONSOLE OPERATIONAL\n0         NUMBERED MESSAGES\n0         'ERROR CODE X'  X=\n0               2 - TEXT ADDRESS OVERLAPS DRIP CORE\n                3 - NO VALID TEXT CARD WAS READ\n                4 - END CARD NOT FOUND OR END CONTAINS NO ENTRY ADDRESS\n0         IPL TRACK CREATION WAIT STATE CODES - C900XX\n0               01 - NORMAL COMPLETION\n                04 - VTOC OVERLAPS IPL TRACK(S)\n                08 - INSUFFICIENT TRACK SPACE TO WRITE\n              F0F0 - I/O ERROR\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                             61\n1                   Technical Guide to System Modifications\n     EDTPRINT                                              Utility Programs\n-    2.2.33   Elegible Device Table Listing .......................EDTPRINT\n+    2.2.33   Elegible Device Table Listing                        EDTPRINT\n+             ________ ______ _____ _______                        ________\n0    EDTPRINT formats  the contents  of the Elegible  Device table  for the\n     current system on SYSPRINT.\n0    For alternate formatting,  and EDT  alteration,  refer to DYNALIST and\n     DYNAMASK.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     62\n1                        Technical Guide to System Modifications\n          Utility Programs                                                EXPDIR\n-         2.2.34   Expand PDS Directory ................................EXPDIR\n+         2.2.34   Expand PDS Directory                                 EXPDIR\n+                  ______ ___ _________                                 ______\n0         EXPDIR  is a  program  used  to change  the  number  of entries  in  a\n          Partitioned Data Set directory without  losing any data.  Use CLEARPDS\n+                                        without\n          to clear and re-initialize a PDS.\n0         EXPDIR produces output on SYSPRINT showing action(s)  taken.   The PDS\n          to be operated on is specified on a PDS DD card;  the disposition must\n          be OLD.\n0         The action to be taken is specified by the EXEC card PARM field, which\n          is of the form PARM=nn,  PARM='+nn',  PARM='-nn' or PARM='=nn'.   \"nn\"\n          may be a one to eight digit integer.\n0         The  form  PARM=nn  and  PARM='=nn'  specify  the  desired  number  of\n          directory blocks\u00a3 If this number is  larger than the current directory\n          size,  then the program attempts to  move any programs residing in the\n          required space to  the end of the  used space (this requires  that the\n          dataset have free space; however, more work may have to be done if the\n          dataset is compressed before running EXPDIR, since then any free space\n          adjacent to the directory will be filled). The SYSPRINT file will show\n          which members were moved.\n0         The form PARM='+nn'  is used to request the addition  of the specified\n          number of  blocks to  the current  directory.   The  program works  as\n          described in the paragraph above,  by relocating members residing next\n          to the directory.\n0         The form PARM='-nn' is used to decrease the directory by the number of\n          blocks specified.  Reduction is also  performed with the forms PARM=nn\n          and PARM='=nn'  when the  specified count  is lower  than the  current\n          size.   For directory decrease,  the program simply replaces the first\n          unused directory block by an end-file record, and rewrites any data on\n          that  track.  Dataset  compression is  recommended  after a  directory\n          decrease.\n-\n-\n-\n-\n0         --------------------\n-         \u00a3One  block  may  contain  from  three  to  twenty-one  member  names,\n           dependent on PDS use.  A typical  load-module library might have five\n           members per block, a source library twenty-one.\n0                                                                             63\n1                   Technical Guide to System Modifications\n     EXSTATIC                                              Utility Programs\n-    2.2.35   PDS Concordance .....................................EXSTATIC\n+    2.2.35   PDS Concordance                                      EXSTATIC\n+             ___ ___________                                      ________\n0    This module produces collated information for libraries.  Each library\n     presented  by a  DD is  scanned  for member  information.  For  source\n     libraries,  a date is obtained either for ISPF/PDF and IEBUPDTX files,\n     the last change date;  for other files (WYLBUR, local), SSI is assumed\n     to be in 000yyddd or 00yydddf  form.   For object libraries,  the date\n     extracted from the ESD card is used.   For load-module libraries,  the\n     link-edit  date and  the  assembly/compile dates  for  each CSECT  are\n     extracted. The SSI (if in date format) is used as by default.   Output\n     is produced to the SYSPRINT DD.\n0    Up  to twelve  libraries  may be  specified in  one  step,  using  any\n     non-reserved DD name.  Names beginning with SYS0, SORT, STEP,  JOB are\n     reserved, as are SYSxDUMP and SYSABEND, SYSPRINT and SYSPUNCH.\n0    Source libraries should precede object libraries, and object libraries\n     should, but need not precede load-module libraries.\n0    For any matching name (source name=object name=module name), the dates\n     are listed  and compared.   When the  source module has a  higher date\n     than the corresponding object or load entry,  the \"back-level\" entries\n     are flagged with a less-than (\"<\") sign.\n0    For load-modules,   CSECTs and  alias entries  are processed.    Alias\n     entries are shown with an asterisk  preceding the name,  CSECTs with a\n     period preceding the name.\n0    Macro libraries may be  included when it is desired to  have a list of\n     change dates (also see IEBPDS for this).\n0    The program invokes  the SORT,  and requires SORTWK01  to SORTWK03 (at\n     least)  word files,  SYSOUT for SORT  messages,  and a SORTLIB for the\n     SORT program proper (may not be needed;   omit if SORT in LPA).   Also\n     required are SORTIN/SORTOUT temporary SYSDA or VIO files.\n0    A sample job to compare a simple set of libraries:\n0     //STATUS  JOB ...\n      //STATUS EXEC PGM=EXSTATIC,REGION=250K\n      //STEPLIB   DD DISP=SHR,DSN=SYS1.SORTLIB\n      //SYSPRINT DD  SYSOUT=*\n      //SOURCE   DD  DISP=SHR,DSN=source library (precedes obj/link)\n      //OBJECT   DD  DISP=SHR,DSN=object library (optional)\n      //LOAD     DD  DISP=SHR,DSN=load-module library\n      //SORTIN   DD  UNIT=SYSDA,SPACE=(CYL,(10,10))\n      //SORTOUT  DD  UNIT=SYSDA,SPACE=(CYL,(10,10)),\n      //             DCB=(RECFM=FB,LRECL=27,BLKSIZE=0)\n      //SORTLIB  DD  DSN=SYS1.SORTLIB,DISP=SHR\n      //SYSOUT   DD  SYSOUT=Z\n      //SORTWK01 DD  UNIT=SYSDA,SPACE=(CYL,15)\n      //SORTWK02 DD  UNIT=SYSDA,SPACE=(CYL,15)\n      //SORTWK03 DD  UNIT=SYSDA,SPACE=(CYL,15)\n-    64\n1                        Technical Guide to System Modifications\n          Utility Programs                                              EXTRACTS\n-         2.2.36   Distribution Tape Update Extraction .................EXTRACTS\n+         2.2.36   Distribution Tape Update Extraction                  EXTRACTS\n+                  ____________ ____ ______ __________                  ________\n0         This  program  is used  to  compare  different  versions of  the  same\n          libraries solely by  change date.   To compare  libraries by contents,\n+                   solely by  change date\n          see YALECOMP.\n0         For source libraries,  this process requires  strict use of change and\n          add dates in  the SSI (either ISPF/PDF or IEBUPDTX  format,  or WYLBUR\n          and our local 000yyddd form).\n0         Each library  additionally contains a member  named \"$\" having  an SSI\n          with the date of distribution of that library.  This member allows the\n          program to  check for modules changed  after the distribution  date by\n          the receiving installation.\n0         Multiple libraries  may be processed  in one  step only for  the basic\n          Exhibit package, due to built-in DD names and special functions.\n0         For general use:\n           //     EXEC PGM=EXTRACTS,REGION=150K,TIME=5\n           //STEPLIB DD DISP=SHR,DSN= LOAD MODULE LIBRARY (if not in a linklib)\n           //SYSPRINT DD SYSOUT=A                  PROCESSING MESSAGES\n           //TAPE     DD UNIT=3400-n,VOL=SER=serial,LABEL=(n,SL,EXPDT=98000),\n           //           DSN=new.source,DISP=(OLD,PASS)  DISTRIBUTION FILE\n           //PDS      DD DISP=SHR,DSN=your.source\n           //*    TEMPORARY FILES FOR SUBSEQUENT IEBUPDTE RUNS\n           //UPPDS    DD DISP=(,PASS),UNIT=SYSDA,DSN=&&PDS,\n           //             SPACE=(CYL,(5,5),,CONTIG)\n           //*    FILES TO CONTAIN UPDATED SOURCE FOR USER MODIFIED CODE\n           //*     THESE SHOULD BE RUN AS IEBUPDTE JOBS ALSO AND APPLIED\n           //*     AS NECESSARY\n           //REPDS    DD DISP=(,KEEP),DSN=tempsave.source,VOL=SER=...\n           //           SPACE=(CYL,(1,5),RLSE,CONTIG)\n           //*          IF ONLY THE FIRST STEP IS RUN (WITH PARM=TEST)\n           //*          THEN ADDITIONAL CARDS MAY BE INSERTED TO PRINT OUT\n           //*          THE MODIFIED INFORMATION (INSTEAD OF THE IEBUPDTE\n           //*          SYSPRINT LISTING)\n           //PRPDS    DD SYSOUT=A      status listing\n           //*      COMPRESSION OF FILES TO MINIMIZE X37 ABENDS\n           //     EXEC PGM=IEBCOPY,REGION=300K,TIME=15\n           //SYSPRINT DD SYSOUT=A\n           //SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,3)\n           //SYSUT4   DD UNIT=SYSDA,SPACE=(CYL,3)\n           //PDS      DD DISP=OLD,DSN=your.source\n             COPY I=PDS,O=PDS\n           //*     PDS UPDATE RUNS\n           //UPPDS    EXEC PGM=IEBUPDTE,PARM=NEW\n           //SYSPRINT DD SYSOUT=A\n           //SYSUT2  DD DISP=OLD,DSN=your.source,SPACE=(CYL,(5,5,57),,CONTIG)\n           //SYSIN  DD DSN=&&PDS,DISP=(OLD,DELETE)\n           //*    LAST STEP TO BE EXECUTED ONLY IF EVERYTHING WORKED\n           //FINAL  EXEC PGM=IEHPROGM\n           //DISK DD VOL=REF=your.source,DISP=OLD\n           //SYSPRINT DD SYSOUT=A\n0                                                                             65\n1                   Technical Guide to System Modifications\n     EXTRACTS                                              Utility Programs\n-       SCRATCH MEMBER=$,DSNAME=your.source,VOL=unit=serial\n        RENAME MEMBER=$$,DSNAME=your.source,VOL=unit=serial,NEWNAME=$\n0    At  the   conclusion  of  this  job,    all  members  on   the  update\n     (distribution) file will be in \"your.source\",  and members with change\n     dates higher than  the distribution date will have been  copied to the\n     REPDS file for manual processing.\n0    The processing is arranged so as  to allow restart without JCL changes\n     on  any error  that  does not  occur  in  the middle  of  a STOW;   in\n     particular,  x37 abends may be recovered  from by increasing space for\n     temporary and intermediary  files or by just rerunning the  job if the\n     error occurred on \"your.source\".\n0    Listings from all jobs should be saved.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    66\n1                        Technical Guide to System Modifications\n          Utility Programs                                               FCBLIST\n-         2.2.37   FCB Lister ..........................................FCBLIST\n+         2.2.37   FCB Lister                                           FCBLIST\n+                  ___ ______                                           _______\n0         This program, written by Art Brown at Southern California Edison,  was\n          modified from the version distributed on the MVS Mods tape.\n0         It lists  carriage tape \"punches\"  for 3211,   3203 and 3800  line and\n          LASER printers, and shows physical spacing.\n0         By default,  all FCBs are listed;   selection may be made by including\n          the name of the desired FCBs in the PARM field, separated by commas.\n0         The program requires a SYSUT1 DD pointing to the SYS1.IMAGELIB dataset\n          to be listed, and a SYSPRINT DD for the output.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              67\n1                   Technical Guide to System Modifications\n     HOB                                                   Utility Programs\n-    2.2.38   Canned Job Submission ...............................HOB\n+    2.2.38   Canned Job Submission                                HOB\n+             ______ ___ __________                                ___\n0    This program  reads JCL  and control  cards from  sequential and  VSAM\n     files, and from PDS members, for batch job submission.  Submission may\n     be modified by date,   and may be set to prevent  duplicates (prior to\n     purging  earlier jobs  from  the system).    We use  it  to allow  the\n     operator an easy way to run ancillary jobs.\n-    Operator job submission is started with 'START HOB,NAME=xxxx'\n0    JCL brought in from disk is subject to modification :\n          account may be ????,???? to request operator supplied\n               values (account field begins with parenthesis)\n         jobs should not be mixed unless each terminates with a null\n         job card within a DD DATA will start a new job\n0        PARM options :\n0        RESTART=jobname     locate specified job in member, and submit\n               it and following jobs (subject to //*PICK & //*SKIP)\n         PICK=jobname        locate and submit the single named job\n               only.  //*PICK and //*SKIP are ignored.\n         DATE=yyddd          process input using the specified, rather\n               than the current date.\n         TEST=ANY            look for job on any JES queue, suppress\n                             duplicates\n         TEST=INP            look for job on in/exec/jcl-scan queues\n               (default)     only, and suppress duplicates.\n         TEST=NONE           bypass job-queue checking\n0        Control cards in input member :\n0        //*PICK      options\n               submit following jobs if match in all specified\n               categories.\n         //*SKIP      options\n               submit unless match in all specified categories\n         //*SKIPANY   options\n               submit unless match in any option value\n0        Note that successive //*PICK and //*SKIP cards (without\n               intervening //, /* and data cards) form a cluster.\n               In a cluster, a PICK card following a matched PICK\n               is ignored; a SKIP following a matched SKIP is ignored;\n               a matched card of opposite type resets the match type;\n               and an unmatched card of the opposite type is ignored.\n0        //*EDIT  scan for scan character (hex E0), replace it and\n               next letter/digit by replacement string (default)\n         //*ASIS  do not perform edit replacement\n         //*SET   X=TEXT  Y='DON''T'  Z=\"DON'T\"\n               set variable (X, Y, Z) to specified string\n         //*PRESET X= ...    set the variable only if not previously\n0    68\n1                        Technical Guide to System Modifications\n          Utility Programs                                                   HOB\n-                   defined (e.g., default for PARM override)\n              //*RUN  dsn(member),volser  '' x=text ...\n              //*SUB  dsn(member),volser  '' x=text ...\n                    open the dataset specified by 'dsn' (member and volser\n                    are optional), and process like SYSIN until EOF, then\n                    resume. Note that these cards should be followed by\n                    PICK or SKIP, because they may invoke undesirable PICK\n                    and SKIP requests.  Note that a doubled scan character\n                    may appear as a separator for optional //*SET text.\n              //*NAME jobname\n                    trigger same processing as though //xxx JOB card present\n0             //*CMD text... (until column 72)\n                    this card is honored except when a PICK/SKIP fails.\n                    The text is issued as a 'master console' command\n              //*MSG text... (until column 72)\n                    this card is honored except when a PICK/SKIP fails.\n                    The text is issued as a WTO with DESC=2, ROUT=1\n0             //*SUBMIT dsn(member),volser '' x=text ...\n                    SUBMIT functions similar to //*SUB, but is processed only\n                    within a job, i.e., a PARM=PICK=job request will not\n                    read it before finding the named job. Jobs contained\n                    in it will not be submitted after the PARM request is\n                    matched.\n              //*WTO text... (until column 72)\n                    this card is honored within a job only; it issues the\n                    specified text to the operator with ROUT=1,DESC=2.\n0             Options are :\n0             CPU selection:  CPU=syst  where 'syst' is the SMCASID\n                   (CL4) field.  More than one id may be specified\n                   on a card. Any match results in the appropriate\n                   PICK or SKIP option. CPU=, cancels selction.\n              Day of week:  name of day, or three letter abreviation\n              Day of month:  day+number, e.g., day1, day01, day11...\n                   special - last day of month  dayl\n              Week of month:  month1, month2,...month5\n                   special- last week of month  monthl\n              Week of year:   week1, week2, ... week53\n                Note that week starts with first day of period, not\n              Sunday or Monday.  Also, year has fractional week 53.\n0             Examples :\n              run on tuesdays only   //*PICK TUESDAY\n              run on first monday of month   //*PICK MONDAY MONTH1\n              run on last friday of month    //*PICK FRI MONTHL\n              run on specific system    //*PICK CPU=(155A,158B)\n                  Selection criteria may be negated (limited to once per\n                    type (one occurrence of day/week/month/etc.)\n              run mon-sat       //*PICK SUN   or  //*SKIP \u00acSUN\n                Note that //*PICK \u00acTUE \u00acTHU is meaningful, but fails.\n-                                                                             69\n1                   Technical Guide to System Modifications\n     HOB                                                   Utility Programs\n-    Input dataset SYSUT1 may be in card format, variable, WYLBUR edit,  or\n     a VSAM file.  For SAM files (PDS member, sequential,  WYLBUR),  SYSUT1\n     may  be concatenated  (including unlike  concatenation).   The  output\n     dataset SYSPRINT (or SYSTERM)  is  optional.   All JES2 dependent code\n     funnels through  the @SERVICE  routines,  and  is then  routed to  the\n     @SRVxxxx modules  for the  JES2 subsystem  \"xxxx\" under  which HOB  is\n     executing.\n0        Sample procedure JCL:\n0      //HOB PROC PDS='sys1.jobjcl',NAME=help,RESTART=,PICK=,DAY=,TEST=IN,\n       //             SET=,LIST='DUMMY,',U=,V=\n       //*      use:  START HOB,NAME=member   to submit canned job(s)\n       //*\n       //*      use:  START HOB,NAME=member,PICK=jobname   to submit a\n       //*                          single job in the member\n       //*      use:  START HOB,NAME=member,RESTART=jobname   to submit\n       //*                          the specified and all following jobs.\n       //*            use DAY=yyddd to force date specific processing.\n       //*            use TEST=NO to bypass jobqueue tests; TEST=ANY to\n       //*              suppress submission of jobs already on 'any' queue\n       //*              default is TEST=IN, suppresses for dupe on input\n       //*    If a start hob does not read anything, check the member for\n       //*      //*PICK and //*SKIP cards - some jobs will be submitted\n       //*      on specific days (weeks, etc.) only, and will not work\n       //*      when started at the wrong time.\n       //*\n       //IEFPROC EXEC PGM=HOB,PARM='R=&RESTART,P=&PICK,D=&DAY,\n       //             T=&TEST &SET'    (hex E0 separator)\n       //SYSPRINT DD  &LIST.SYSOUT=A\n       //SYSUT1   DD  DDNAME=IEFRDER\n       //IEFRDER  DD  DISP=SHR,DSN=&PDS.(&NAME),UNIT=&U,VOL=SER=&V\n       //SYSUDUMP DD  SYSOUT=A\n       //SYSUT2   DD  SYSOUT=(A,INTRDR)   pre-MVS: UNIT=INTRDR\n-\n-\n-\n-\n-\n-\n-\n     70\n1                        Technical Guide to System Modifications\n          Utility Programs                                              HSPMERGE\n-         2.2.39   NIH Merge ...........................................HSPMERGE\n+         2.2.39   NIH Merge                                            HSPMERGE\n+                  ___ _____                                            ________\n0         Program  HSPMERGE,  alias  HASPMERG,  allows  for  source (and  MACRO)\n          maintenance of multiple change decks against  the same member.   It is\n          generally used  for change library  maintenance for  large components,\n          e.g., JES2 and WYLBUR.\n0         The program was recently modified to update  MACROs in the same run as\n          source members by addition of SYSUT3/4  DDs and MACR= instead of NAME=\n          on the ./ control cards.\n0         The HASP 3.98  Merge program was developed jointly  by Jim Oberthaler,\n          National  Institutes of  Health Computer  Center,   and Roger  Fajman,\n          WYLBUR Systems Incorporated.\n0         Modifications (by G. Postpischil) :\n0          LEVEL INSERTION INTO CARDS CORRECTED - NO LONGER INSERTS\n                LEVEL INTO WTO STRINGS, ETC.\n                ADDS COMMA ON VERY BLANK CARDS (END, MACRO, ETC.)\n           ./ SKIP CARDS WITH LEVELS OMITTED SUPERCEDE LOWER LEVELS ONLY\n0          NEW FACILITY ADDED :  ./ COPY NAME=\n                REQUESTED MEMBERS (INPUT TYPE) ARE ADDED FROM THE\n                PDS(S) DEFINED BY INPDS.     EACH MEMBER MUST BE\n                COMPLETE IN ITSELF (LEVEL, LOG, CHANGE, ETC.)\n                COPY STATEMENTS MAY BE INCLUDED IN OTHER MEMBERS\n                PRIOR TO THE FIRST LEVEL/ADD/CHANGE CARD, OR MAY BE\n                ADDED ELSEWHERE IF THE SEQUENCE NUMBER IS CORRECT.\n0          PGM=HASPMRGE   :   LEVELS PROCESSED IN THE ORDER SUPPLIED\n           PGM=HSPMERGE   :   LEVELS PROCESSED IN COLLATING SEQUENCE\n0          JCL :\n0           // EXEC PGM=HSPMERGE,REGION=512K\n            //SYSPRINT DD SYSOUT=A        MERGED OUTPUT LISTING\n            //ERRORS   DD SYSOUT=A        ERROR AND MESSAGE LOG\n            //SYSUT1 DD DSN=SYS1.HASPSRC,DISP=SHR   LIBRARY TO BE UPDATED\n            //SYSUT2 DD DSN=SYS1.HASPNEW,DISP=(,KEEP)...  NEW LIBRARY\n            //WORK  DD UNIT=SYSDA,SPACE=(CYL,(1,1),RLSE,CONTIG) INPUT COPY\n            //INPDS DD DSN=SYS1.HASPMODS,DISP=SHR LIBRARY OF MODIFICATIONS\n            //SYSIN DD          ONE OR MORE SEQUENTIAL DISK DATASETS\n                                MAY BE UNLIKE, CONCATENATED, ETC.\n                              WILL BE COPIED TO 'WORK' FOR PROCESSING\n            ./    COPY  NAME=HASPMODS  USE CHANGES IN MEMBER HASPMODS\n                          IN INPDS DATASET (MAY CONTAIN OTHER COPY STMTS)\n            ./    LEVEL NEWSTUFF    TEMPORARY MODS\n            ./    ADD/CHANGE      CONTROL/UPDATE CARDS PROPERLY SEQUENCED\n0           A SUCCESSFUL RUN SHOULD BE FOLLOWED BY AN IEBCOPY FROM THE\n                OLD PDS TO THE NEW PDS IF SYSUT2 IS TO BE USED FOR\n                ASSEMBLIES - IT'S EASIER THAN TRYING TO CONCATENATE\n                MACLIBS AND SWITCHING BETWEEN TWO SYSINS ON SUBSEQUENT\n0                                                                             71\n1                   Technical Guide to System Modifications\n     HSPMERGE                                              Utility Programs\n-          ASSEMBLIES.\n0      ./    NUMBER NEW1=SEQ,INCR=NUM   HEADER FOR UNNUMBERED CARDS\n       ./    INSERT SEQ1=SEQ,NEW1=SEQ,INCR=NUM   DITTO\n0    UNNUMBERED CARDS MAY BE USED FOLLOWING  A SKIP AND DELETE CARD,  (WITH\n     DEFAULT INCR OF 1),  OR AN EXPLICIT  NUMBER OR INSERT CARD NEW1,  SEQ1\n     MAY BE OMITTED (DEFAULT TO 73/80 SEQ  - 1);  INCR DEFAULTS TO 1.   ALL\n     SEQUENCES  MAY BE  ALPHAMERIC,  BUT  INCREMENTED  POSITIONS SHOULD  BE\n     NUMERIC (NOT CHECKED).\n0    SUPPORT FOR MACRO LIBRARY ADDED (SYSUT3=>SYSUT4; USE ADD/CHG\n           MACR= INSTEAD OF NAME=).  THIS CHANGE ALLOWS PARALLEL\n           MACRO AND SOURCE CHANGES IN THE SAME UPDATES.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    72\n1                        Technical Guide to System Modifications\n          Utility Programs                                                IEBPDS\n-         2.2.40   PDS Directory Lister ................................IEBPDS\n+         2.2.40   PDS Directory Lister                                 IEBPDS\n+                  ___ _________ ______                                 ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              73\n1                   Technical Guide to System Modifications\n     IEHVTOC                                               Utility Programs\n-    2.2.41   VTOC and PDS Lister .................................IEHVTOC\n+    2.2.41   VTOC and PDS Lister                                  IEHVTOC\n+             ____ ___ ___ ______                                  _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     74\n1                        Technical Guide to System Modifications\n          Utility Programs                                                JOBWTR\n-         2.2.42   MVT External Writer .................................JOBWTR\n+         2.2.42   MVT External Writer                                  JOBWTR\n+                  ___ ________ ______                                  ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              75\n1                   Technical Guide to System Modifications\n     LOADFIX                                               Utility Programs\n-    2.2.43   EXEC and Page-fix ...................................LOADFIX\n+    2.2.43   EXEC and Page-fix                                    LOADFIX\n+             ____ ___ ________                                    _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     76\n1                        Technical Guide to System Modifications\n          Utility Programs                                              LOADMAPS\n-         2.2.44   Build LKED Control Cards ............................LOADMAPS\n+         2.2.44   Build LKED Control Cards                             LOADMAPS\n+                  _____ ____ _______ _____                             ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              77\n1                   Technical Guide to System Modifications\n     LOADZAP                                               Utility Programs\n-    2.2.45   ZAP and EXEC Program ................................LOADZAP\n+    2.2.45   ZAP and EXEC Program                                 LOADZAP\n+             ___ ___ ____ _______                                 _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     78\n1                        Technical Guide to System Modifications\n          Utility Programs                                               MAPDISK\n-         2.2.46   VTOC Lister .........................................MAPDISK\n+         2.2.46   VTOC Lister                                          MAPDISK\n+                  ____ ______                                          _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              79\n1                   Technical Guide to System Modifications\n     MCPINIT                                               Utility Programs\n-    2.2.47   WYLBUR Initialization ...............................MCPINIT\n+    2.2.47   WYLBUR Initialization                                MCPINIT\n+             ______ ______________                                _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     80\n1                        Technical Guide to System Modifications\n          Utility Programs                                                 MICRO\n-         2.2.48   Microfiche Writer ...................................MICRO\n+         2.2.48   Microfiche Writer                                    MICRO\n+                  __________ ______                                    _____\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              81\n1                   Technical Guide to System Modifications\n     MICROJOB                                              Utility Programs\n-    2.2.49   Microfiche External Writer ..........................MICROJOB\n+    2.2.49   Microfiche External Writer                           MICROJOB\n+             __________ ________ ______                           ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     82\n1                        Technical Guide to System Modifications\n          Utility Programs                                              MICROSUB\n-         2.2.50   Microfiche Subroutine ...............................MICROSUB\n+         2.2.50   Microfiche Subroutine                                MICROSUB\n+                  __________ __________                                ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              83\n1                   Technical Guide to System Modifications\n     MIGRATE                                               Utility Programs\n-    2.2.51   Move Dataset Groups .................................MIGRATE\n+    2.2.51   Move Dataset Groups                                  MIGRATE\n+             ____ _______ ______                                  _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     84\n1                        Technical Guide to System Modifications\n          Utility Programs                                               MIMSTOW\n-         2.2.52   Process Michigan Mods Tape ..........................MIMSTOW\n+         2.2.52   Process Michigan Mods Tape                           MIMSTOW\n+                  _______ ________ ____ ____                           _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              85\n1                   Technical Guide to System Modifications\n     MVTDEBE                                               Utility Programs\n-    2.2.53   Operator Print/Copy Functions .......................MVTDEBE\n+    2.2.53   Operator Print/Copy Functions                        MVTDEBE\n+             ________ __________ _________                        _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     86\n1                        Technical Guide to System Modifications\n          Utility Programs                                              NISRELSE\n-         2.2.54   Sequential Job Release ..............................NISRELSE\n+         2.2.54   Sequential Job Release                               NISRELSE\n+                  __________ ___ _______                               ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              87\n1                   Technical Guide to System Modifications\n     NIS0HALT                                              Utility Programs\n-    2.2.55   Automatic System Shut-down ..........................NIS0HALT\n+    2.2.55   Automatic System Shut-down                           NIS0HALT\n+             _________ ______ _________                           ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     88\n1                        Technical Guide to System Modifications\n          Utility Programs                                              NIS0UJVT\n-         2.2.56   IEFUJV Tester .......................................NIS0UJVT\n+         2.2.56   IEFUJV Tester                                        NIS0UJVT\n+                  ______ ______                                        ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              89\n1                   Technical Guide to System Modifications\n     OSRIPPLE                                              Utility Programs\n-    2.2.57   On-line Printer Exerciser ...........................OSRIPPLE\n+    2.2.57   On-line Printer Exerciser                            OSRIPPLE\n+             _______ _______ _________                            ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     90\n1                        Technical Guide to System Modifications\n          Utility Programs                                              OVLYTREE\n-         2.2.58   Overlay Control Card Builder ........................OVLYTREE\n+         2.2.58   Overlay Control Card Builder                         OVLYTREE\n+                  _______ _______ ____ _______                         ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              91\n1                   Technical Guide to System Modifications\n     POD                                                   Utility Programs\n-    2.2.59   PDS Print/Punch .....................................POD\n+    2.2.59   PDS Print/Punch                                      POD\n+             ___ ___________                                      ___\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     92\n1                        Technical Guide to System Modifications\n          Utility Programs                                               PODHELP\n-         2.2.60   PDS Print/Punch .....................................PODHELP\n+         2.2.60   PDS Print/Punch                                      PODHELP\n+                  ___ ___________                                      _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              93\n1                   Technical Guide to System Modifications\n     PRINTALL                                              Utility Programs\n-    2.2.61   Dataset Lister ......................................PRINTALL\n+    2.2.61   Dataset Lister                                       PRINTALL\n+             _______ ______                                       ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     94\n1                        Technical Guide to System Modifications\n          Utility Programs                                                PROCUP\n-         2.2.62   PROCLIB Update ......................................PROCUP\n+         2.2.62   PROCLIB Update                                       PROCUP\n+                  _______ ______                                       ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              95\n1                   Technical Guide to System Modifications\n     PUNK                                                  Utility Programs\n-    2.2.63   PDS & DS Print/Punch ................................PUNK\n+    2.2.63   PDS & DS Print/Punch                                 PUNK\n+             ___ _ __ ___________                                 ____\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     96\n1                        Technical Guide to System Modifications\n          Utility Programs                                               RELEASE\n-         2.2.64   DASD Space Release ..................................RELEASE\n+         2.2.64   DASD Space Release                                   RELEASE\n+                  ____ _____ _______                                   _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              97\n1                   Technical Guide to System Modifications\n     SAMSGREF                                              Utility Programs\n-    2.2.65   Message Cross-Reference .............................SAMSGREF\n+    2.2.65   Message Cross-Reference                              SAMSGREF\n+             _______ _______________                              ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     98\n1                        Technical Guide to System Modifications\n          Utility Programs                                              SAVETAPE\n-         2.2.66   Tape Copy ...........................................SAVETAPE\n+         2.2.66   Tape Copy                                            SAVETAPE\n+                  ____ ____                                            ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                              99\n1                   Technical Guide to System Modifications\n     SCRATCHS                                              Utility Programs\n-    2.2.67   DASD Scratch ........................................SCRATCHS\n+    2.2.67   DASD Scratch                                         SCRATCHS\n+             ____ _______                                         ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     100\n1                        Technical Guide to System Modifications\n          Utility Programs                                               SEEKMON\n-         2.2.68   DASD Access Monitor .................................SEEKMON\n+         2.2.68   DASD Access Monitor                                  SEEKMON\n+                  ____ ______ _______                                  _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             101\n1                   Technical Guide to System Modifications\n     SERIAL                                                Utility Programs\n-    2.2.69   Serialize Decks .....................................SERIAL\n+    2.2.69   Serialize Decks                                      SERIAL\n+             _________ _____                                      ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     102\n1                        Technical Guide to System Modifications\n          Utility Programs                                              SLANALYZ\n-         2.2.70   Tape Label Analysis/Copy ............................SLANALYZ\n+         2.2.70   Tape Label Analysis/Copy                             SLANALYZ\n+                  ____ _____ _____________                             ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             103\n1                   Technical Guide to System Modifications\n     SMFDUMP                                               Utility Programs\n-    2.2.71   SMF Dump & Switch ...................................SMFDUMP\n+    2.2.71   SMF Dump & Switch                                    SMFDUMP\n+             ___ ____ _ ______                                    _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     104\n1                        Technical Guide to System Modifications\n          Utility Programs                                              SMFMERGE\n-         2.2.72   SMF Merge ...........................................SMFMERGE\n+         2.2.72   SMF Merge                                            SMFMERGE\n+                  ___ _____                                            ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             105\n1                   Technical Guide to System Modifications\n     SMFSELCT                                              Utility Programs\n-    2.2.73   SMF Extraction ......................................SMFSELCT\n+    2.2.73   SMF Extraction                                       SMFSELCT\n+             ___ __________                                       ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     106\n1                        Technical Guide to System Modifications\n          Utility Programs                                              SMFSTATS\n-         2.2.74   SMF Statistics ......................................SMFSTATS\n+         2.2.74   SMF Statistics                                       SMFSTATS\n+                  ___ __________                                       ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             107\n1                   Technical Guide to System Modifications\n     SMFTERMS                                              Utility Programs\n-    2.2.75   SMF Terminal Statistics .............................SMFTERMS\n+    2.2.75   SMF Terminal Statistics                              SMFTERMS\n+             ___ ________ __________                              ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     108\n1                        Technical Guide to System Modifications\n          Utility Programs                                              SMFXTRCT\n-         2.2.76   SMF Extraction ......................................SMFXTRCT\n+         2.2.76   SMF Extraction                                       SMFXTRCT\n+                  ___ __________                                       ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             109\n1                   Technical Guide to System Modifications\n     STEPSEP                                               Utility Programs\n-    2.2.77   Big Letters on JCL ..................................STEPSEP\n+    2.2.77   Big Letters on JCL                                   STEPSEP\n+             ___ _______ __ ___                                   _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     110\n1                        Technical Guide to System Modifications\n          Utility Programs                                              TAGCOBOL\n-         2.2.78   COBOL Resequencing ..................................TAGCOBOL\n+         2.2.78   COBOL Resequencing                                   TAGCOBOL\n+                  _____ ____________                                   ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             111\n1                   Technical Guide to System Modifications\n     TAPEMARK                                              Utility Programs\n-    2.2.79   Operator WTM ........................................TAPEMARK\n+    2.2.79   Operator WTM                                         TAPEMARK\n+             ________ ___                                         ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     112\n1                        Technical Guide to System Modifications\n          Utility Programs                                              TESTSD95\n-         2.2.80   IEFSD095 Tester .....................................TESTSD95\n+         2.2.80   IEFSD095 Tester                                      TESTSD95\n+                  ________ ______                                      ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             113\n1                   Technical Guide to System Modifications\n     TMSBACKS                                              Utility Programs\n-    2.2.81   CCSI TMS DASD Lister ................................TMSBACKS\n+    2.2.81   CCSI TMS DASD Lister                                 TMSBACKS\n+             ____ ___ ____ ______                                 ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     114\n1                        Technical Guide to System Modifications\n          Utility Programs                                              TMSULIST\n-         2.2.82   CCSI TMS Lister .....................................TMSULIST\n+         2.2.82   CCSI TMS Lister                                      TMSULIST\n+                  ____ ___ ______                                      ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             115\n1                   Technical Guide to System Modifications\n     UCBPRINT                                              Utility Programs\n-    2.2.83   UCB Lister ..........................................UCBPRINT\n+    2.2.83   UCB Lister                                           UCBPRINT\n+             ___ ______                                           ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     116\n1                        Technical Guide to System Modifications\n          Utility Programs                                               VARLINK\n-         2.2.84   Variable Link-Edit ..................................VARLINK\n+         2.2.84   Variable Link-Edit                                   VARLINK\n+                  ________ _________                                   _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             117\n1                   Technical Guide to System Modifications\n     WYLCLEAN                                              Utility Programs\n-    2.2.85   WYLBUR DASD Maintenance .............................WYLCLEAN\n+    2.2.85   WYLBUR DASD Maintenance                              WYLCLEAN\n+             ______ ____ ___________                              ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     118\n1                        Technical Guide to System Modifications\n          Utility Programs                                               WYLCOMP\n-         2.2.86   WYLBUR Compress .....................................WYLCOMP\n+         2.2.86   WYLBUR Compress                                      WYLCOMP\n+                  ______ ________                                      _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             119\n1                   Technical Guide to System Modifications\n     WYLDCOMP                                              Utility Programs\n-    2.2.87   WYLBUR Decompression ................................WYLDCOMP\n+    2.2.87   WYLBUR Decompression                                 WYLDCOMP\n+             ______ _____________                                 ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     120\n1                        Technical Guide to System Modifications\n          Utility Programs                                              WYLPASWD\n-         2.2.88   WYLBUR Password Lister ..............................WYLPASWD\n+         2.2.88   WYLBUR Password Lister                               WYLPASWD\n+                  ______ ________ ______                               ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             121\n1                   Technical Guide to System Modifications\n     WYLVTOC                                               Utility Programs\n-    2.2.89   WYLBUR VTOC & PDS Lister ............................WYLVTOC\n+    2.2.89   WYLBUR VTOC & PDS Lister                             WYLVTOC\n+             ______ ____ _ ___ ______                             _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     122\n1                        Technical Guide to System Modifications\n          Utility Programs                                              YALECOMP\n-         2.2.90   Deck Compare Program ................................YALECOMP\n+         2.2.90   Deck Compare Program                                 YALECOMP\n+                  ____ _______ _______                                 ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             123\n1                   Technical Guide to System Modifications\n     YALECOMP                                              Utility Programs\n-    2.3   SERVICE ROUTINES\n+    2.3   SERVICE ROUTINES\n+          _______ ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     124\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-         2.3.1   Service Routines .....................................@SERVICE\n+         2.3.1   Service Routines                                      @SERVICE\n+                 _______ ________                                      ________\n0         To use  the @SERVICE  routine in any  environment,  providing  the SVC\n          interface  is available,   code  a SERVICE  macro  for the  applicable\n          function.  This  method is less efficient  than calling @SERVICE  as a\n          subroutine, hence should be used only when mandated by the environment\n          (see the  reference to  TCBFSA later  on in  this section).    For the\n          routine task,  macro SERVINIT is used  to initialize the interface and\n          to  include  appropriate  mapping  code (see  SERVFLAG  in  the  MACRO\n          section).  The inclusion  of mapping equates is optional,   and may be\n          suppressed;  when the mapping is not suppressed, then SERVINIT must be\n          used prior to other SERVCALL macros.  Any module containing a SERVxxxx\n          type macro  must be  logically and physically  preceded by  a SERVINIT\n          macro.   A  program using SERVINIT should  be terminated by  using the\n          SERVTERM  macro.   SERVTERM  closes files  opened  through  controlled\n          facilities (routines  starting with @);   causes gotten storage  to be\n          freed;   and results  in deletion  of loaded  modules.   For  programs\n          terminating with explicit ABENDs,  SERVTERM or PRTCLOSE should be used\n          to get  print buffers processed;   otherwise a critical  error message\n          might be overlooked in the dump, or not appear at all if no dump DD is\n          supplied.\n0         To use the SERVCALL macros, you need to define a full-word field named\n          @SERVICE in your program.  This value is set by using a SERVINIT macro\n          (no  operands).  SERVINIT  loads  the @SERVICE  routine  and sets  its\n          address into @SERVICE. The macro also forces expansion of the SERVFLAG\n          definitions used by SERVCALL.  If @SERVICE is not available as an SVC,\n          then the program  must include a macro  expansion for the CVT  and the\n          CDE:\n                   CVT   DSECT=YES\n                   IHACDE ,\n0         Use of  the @SERVICE  routine is terminated  with the  SERVTERM macro.\n          See the CLOSE operand for further details.\n0         The @SERVICE routine,  and many  related programs (e.g.,  the @PRINTER\n          routine) avoid GETMAINs.  This is accomplished by doing a GETMAIN once\n          when  the function  is initialized,   and  using the  gotten area  for\n          subsequent calls.  Areas  gotten in this fashion  are chained together\n          using the high word of the task's save area pointed to by TCBFSA.\n0         For tasks  where TCBFSA  is not  available or  may not  be used,   the\n          SERVICE macro may be used.  SERVICE invokes the @SERVICE routine as an\n          SVC,  providing that the global parameter &SVC@SVC has been set to the\n          SVC number (255 on CCSI's MVS system). Note that a number of functions\n          return pointers to return areas (e.g.,  DSABB);  when the SVC is used,\n          the area  pointed to  is freed,  and  attempts to  use the  result may\n          result  in abends.   The  detailed discussion  of  the functions  will\n          describe those that may not be called as an SVC.\n0         The general CALL convention is:\n0            name SERVCALL function,parm\u00dd,LEN=\u00a8,\u00ddERR=|CC0=|CC4=|CC8=\u00a8\n-                                                                            125\n1                   Technical Guide to System Modifications\n     @SERVICE                                              Service Routines\n-    where the function  name is always five characters;   the parameter or\n     its address will be loaded into register 1.   LEN= defines an optional\n     length to be loaded into the high  byte of register 1;  the value must\n     be valid inside an AL1().  Registers 14, 15 and 0 are used to pass the\n     function code  with a  standard OS subroutine  call;  for  the SERVICE\n     call, only R0 is used to pass the function code.   ERR= may be used to\n     set and  reset an assembly-time global  error exit,  invoked by  a BXH\n+                                    ______\n     generated as part of the macro expansion.  When ERR= is not used, CC0,\n     CC4, and CC8 may be used as local branch addresses. When none of these\n     are used, the condition code is not defined.\n0    In general, @SERVICE sets a return code in register 15, and may return\n     other values in  registers 0 and 1.   Register 15 is generally  set to\n     zero when the request completed satisfactorily,   to four when a minor\n     problem occurred,  an eight or twelve  for more severe errors,  and to\n     sixteen when a major error is detected (e.g., failed GETMAIN,  invalid\n     parameter address).\n0    The calling parameters for the SVC are similar,  except that the macro\n     name  is SERVICE,   and the  CLOSE function  is used  to initialize  a\n     permanent work area as though SERVINIT  had been used.  Note that this\n     does not cause inclusion of required COPY and MACRO code that SERVINIT\n     handles. The INITG function is useless with the SVC entry.\n0    The @SERVICE routine is normally resident in PLPA,  and is re-entrant.\n     When variable &SVC@SVC in macro SYSPARM is set non-zero, @SERVICE will\n     contain an additional entry point for a type 4 SVC, e.g.,  if &SVC@SVC\n     is set to 255, entry name IGC0025E would be expanded.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | CLOSE                                           |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This entry frees  storage obtained within @SERVICE,   and issues CLOSE\n     (or other termination  calls)  to any known  (related)  modules loaded\n     with the LPALD function.\n0\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | CLOSE                                           |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     When  CLOSE is  used  with the  SVC  entry,  it  is  a special  signal\n     'closing' SVC use;  it returns the  address of the @SERVICE routine in\n     R0.   The user is expected to store this value in a full-word labelled\n     @SERVICE,   addressable from  all SERVxxxx  expansions,   and use  the\n     SERVCALL macro for subsequent calls, not the SVC. The work area is not\n     freed by the SVC, and TCBFSA availability is required.\n-\n-\n-    126\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | FREEM                                           |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This entry acts  as an expensive NOP  for the SVC;  for  @SERVICE,  it\n          frees storage  and closes and  deletes everything except  the @PRINTER\n          service routine.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | INITG                                           |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This entry  loads the @PROTECS  subroutine,  and  GETMAINs substantial\n          storage (100K to 800K).  The entire  WYLBUR PASSWORD dataset is placed\n          into storage for extremely rapid access for batched validity checking.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | LPALD,name-addr                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This entry causes a search for the requested module in the MLPA,  then\n          the PLPA.  If not found,  a LOAD is issued.  At DTS,  the addresses of\n          IGPACCT and IGPVOLT are obtained from the User CVT extension.\n0         R1 points to the  CL8 name of a module to be  loaded.  For modules not\n          known to be special, LPALD returns the load address, but does not keep\n          track of the module. For special modules, currently including IGPACCT,\n          IGPVOLT, @PROTECS, @CATREAD, @DCBEXIT, @INPREAD,  @OBTAINS,  @TMSREAD,\n          @VOLREAD and @PRINTER,  a module responsibility count is kept.  Unlike\n          OS,  @SERVICE supports only a maximum of 127 per module.   The current\n          version of  the code does  not check  for excession.   Note  that this\n          function may  result in  an abend when  invoked for  a missing  or bad\n          module.  R15 is returned as 0 unless  the pointer was zero or @SERVICE\n          initialization failed. R0 is set to zero if the LOAD failed. If a LOAD\n          was issued,  R0 returns the LOAD address;  for an LPA resident module,\n          the X'80' bit is set on in the high byte to indicate LPA residence.\n0         Note that this function, if invoked using SERVICE, will load a module;\n          however,  the corresponding  control information is lost  upon return,\n          and the LPADL function will not  DELETE the module.   An explicit (OS)\n          DELETE would need to be issued for modules not in the LPA.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | LPADL,name-addr                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          For modules not known to the program, a DELETE is issued.  For modules\n          known to be special,  the responsibility count is decremented for each\n          LPADL  call.   When  the  count reaches  zero,   then  any  applicable\n          termination calls are issued,  then the  module is DELETEd.  For the @\n          modules listed above,   termination includes closing of  all open data\n          control blocks, and freeing of all gotten storage.  LPADL is used with\n          R1 pointing to the CL8 module name. No return code is set.\n-\n                                                                             127\n1                   Technical Guide to System Modifications\n     @SERVICE                                              Service Routines\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | UCBUM,0|ucb-addr                                |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | UCBUM,0|ucb-addr                                |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     Entry UCBUM provides sequential UCB lookup.   When register 1 contains\n     zero,  lookup  begins with the  first (lowest named)   UCB;  otherwise\n     register 1 is assumed to contain a valid UCB address, and the next UCB\n     address in the system is returned.  A  value of zero is returned after\n     the last  UCB.   The UCB  address is returned  in register 0  when the\n     return code in  register 15 is 0;  the  last UCB is signalled  by 0 in\n     register  zero and  8 in  register 15.   A value  of 16  is passed  in\n     register 15 when the supplied address is not a valid UCB (e.g.,  a VIO\n     UCB).    The subsequent  UCB  lookup routines  use  the same  register\n     convention.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | UCBNM,ucbname-addr                              |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | UCBNM,ucbname-addr                              |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     For this function, R1 should point to the name of a UCB to be located.\n     When a match is found,  R15 is  returned as zero,  R0 contains the UCB\n     address.  If the name is not found,   R15 will contain 8,  and R0 will\n     contain 0. If R1 is zero, R15 will return 16 and R0 is undefined.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | UCBVS,volser-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | UCBVS,volser-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     Register  1 should  point to  a  six-byte volume  serial.  UCBVS  then\n     returns zero for no match,  or the UCB address of the tape or DASD UCB\n     with that serial. Offline devices are not considered.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | UCBDK,volser-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | UCBDK,volser-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     UCBDK performs the  same functions as UCBVS,  but  considers only DASD\n     UCBs for processing.\n-\n-\n     128\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | UCBGN,ucb-addr                                  |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | UCBGN,ucb-addr                                  |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          UCBGN returns in  register 1 the address of an  eight-byte string that\n          describes the device type corresponding to  the passed address.  R1 on\n          entry need not contain a valid UCB address; only the UCBTBYT1-4 fields\n          are inspected. Assuming a field\n           TYPE DC X'3050200D'  and a SERVCALL UCBGN,TYPE-(UCBTBYT1-UCBOB)\n           then the return would  be R1 pointing to CL8'3330-1  ',   the value a\n          user would specify on JCL.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | TIOLP,tioentry-addr|0                           |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | TIOLP,tioentry-addr|0                           |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function does a TIOT entry lookup.   When it is called with R1=0,\n          the first  TIOT entry address  is returned in R0,   and R15 is  set to\n          zero.  When R1 is non-zero, it must be a valid TIOT entry address, and\n          the next entry  address is returned in  R0,  R15 is set  to zero.   If\n          there is no other entry, R15 and R0 are both returned as zero.\n0         The returned  address may be copied  to another register,  and  may be\n          mapped with USING TIOELNGH,Rx. Macro IEFTIOT1 must be requested.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | TIOLK,tioentry-addr|0                           |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | TIOLK,tioentry-addr|0                           |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function  ignores special TIOT  entries,  and otherwise  works as\n          TIOLP.  An entry is skipped if the DDNAME is blank (concatenation), if\n          it is PGM=*., if it is SYSABEND, SYSUDUMP,  JOBLIB,  STEPLIB,  JOBCAT,\n          STEPCAT, xxxPRINT, xxxPUNCH, or SYSTERM. Entries for DD DUMMY, SYSOUT,\n          TERM=TS, and dynamically allocated catalogs are returned.\n+                                                     ___\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | TIODD,ddname-addr                               |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | TIODD,ddname-addr                               |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This entry searches for the requested DDNAME (passed via R1); the name\n          must be  defined as  an eight-byte string.   R15 is set  to 16  for an\n          invalid parameter address,  else R15 is set to zero and R0 returns the\n-                                                                            129\n1                   Technical Guide to System Modifications\n     @SERVICE                                              Service Routines\n-    TIOT entry address, or zero if it is not found. Note that an all-blank\n     DDNAME is not  treated as an invalid request,  but  may give incorrect\n     results.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | TIOUA,ucb-addr                                  |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | TIOUA,ucb-addr                                  |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This  function  searches for  a  TIOT  entry  for the  requested  UCB.\n     Entries considered for a match must determine only a single UCB,  must\n     not  be concatenated,   and  must not  have a  special  DD name  (same\n     considerations as the  TIOLK function).   Return codes  and conditions\n     are as for TIODD above.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | SORTB,parm-addr                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | SORTB,parm-addr                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This entry performs a bubble (triangular)  sort of the in-storage data\n     described by the  sort parameter block passed via R1.   Note that this\n     sort is  slow and  inefficient,  and should  be used  only when  it is\n     required to keep equal key entries in their original sequence.\n0    The sort parameter block may be  mapped or generated with the SERVSORT\n     macro.  The first word of the block  contains the address of the first\n     entry to be sorted,  the second word contains the number of entries to\n     be sorted if it is positive,  else it contains the address of the last\n     entry to be sorted  and the X'80' bit on in the  high byte.  The third\n     word is  treated as  single byte entries;   the first  byte must  be a\n     character C'A' or C'D' for ascending or descending sorting, the second\n     byte specifies the  (binary)  offset of the  key from the start  of an\n     entry,  the third byte specifies the  key length,  and the fourth byte\n     specifies  the entry  length  (<256 bytes).    For  the binary  lookup\n     routine  described below,   the user  must add  one more  word to  the\n     expansion to pass the address of the key to be located.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | SORTH,parm-addr                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | SORTH,parm-addr                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     The  SORTH function  performs an  in-storage sort  using the  Heapsort\n     algorithm discovered by Williams and Floyd,  as adapted from Nijenhuis\n     and Wilf in 'Combinatorial Algorithms' (Acad.  Press).\n-\n     130\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-         This sort should be used whenever the sequence of equal key entries is\n          not critical. For a table with more than a thousand entries, SORTH can\n          be several hundred times as fast as SORTB.\n0         Please note that no provision exists (yet) for multiple key sorts.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | BINLK,parm-addr                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | BINLK,parm-addr                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function performs a binary table  lookup.  The table is specified\n          with the  SERVSORT macro,  augmented by  one more word  specifying the\n          address of the key  to be located.  Return codes are:    R15=16 for an\n          invalid parameter address, R15=4 and R0=0 when no match is found,  and\n          R15=0 and R0=entry address for a match.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | DVTBL,dcb-addr|calc-addr                        |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | DVTBL,dcb-addr|calc-addr                        |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function locates the  device table entry for either a  DCB or the\n          unit specified by a TRKCALC (SERVCALC)  control block expansion.  When\n          the X'80' bit in  R1 is on,  the address is taken to  be a DCB address\n          for an open DCB  (no check is made);  otherwise the  address should be\n          for a parameter  list matching that defined for  the TRKCALC function.\n          An invalid parameter  address results in a  return code of 16  in R15,\n          otherwise the device table entry address is  passed in R0,  and R15 is\n          set to 0 if the address was obtained from the system table (IECZDTAB),\n          or to  4 if  the address  is for  a device  supported by  the @SERVICE\n          routine, but not generated in the running system.\n0         The contents  of a device entry,   and IECZDTAB,  are mapped  by macro\n          IHADVCT, a modified copy of which is distributed on ESPDTR.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | DVCAP,calc-addr                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | DVCAP,calc-addr                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function duplicates that of TRKCALC,  and is provided in @SERVICE\n          for Operating System releases not supporting TRKCALC,  and for support\n          of devices not  generated in the current system.    The SERVCALC macro\n          may be used  the way TRKCALC is documented,  and  will perform similar\n          functions.  The user may expand the work area manually, use TRKCALC or\n          SERVCALC  MF=D to  provide a  mapping,   and call  the DVCAP  function\n          directly.\n0                                                                            131\n1                   Technical Guide to System Modifications\n     @SERVICE                                              Service Routines\n-    Note that IBM changed the format of the device entries for Fixed Block\n     devices;  the new entry has a two-byte modulus field at the end of the\n     entry,  the old format used one byte.  DVCAP relies on the new format,\n     and may abend with an old entry.\n0    The basic mapping for the work area specifies:\n      STARUCBA - a full-word UCB address for a DASD device (2006-200E)\n        or STARDCTA - full-word address of the device table entry\n        or XL3'0' plus one byte device subtype (06-0E)\n      STARFLGS - function and flag bytes\n        X'80' STARFUNC off:track balance; on:track capacity requested\n        X'40' STARMAXS maximum size requested\n        X'20' STARREMV calculate residuals after removing last record\n        X'10' STARUBAL current track balance has been provided\n        X'08' STARLAST use ISAM style last record/track calculation\n                  (note that this applies only to 2314s and older\n                   devices)\n        X'06' STARDTU  caller has provided the device type in STARTYPE\n        X'04'          the UCB address has been provided in STARUCBA\n        X'02'          ...reserved...\n        X'00'          the device table entry address is in STARDCTA.\n          The STARDTU flags must correspond to the contents of field\n          (STARDCTA/STARUCBA/STARTYPE)\n      STARBAL  track balance after request; balance before request may\n                  be set if STARUBAL is turned on. This field is in\n                  unsigned halfword format, and may appear to be negative\n                  for 3375/3380 devices.\n      STARRKDD the last four bytes of a count field, redefined as\n      STARR    current record number\n      STARKL   key length\n      STARDL   data length (unsigned halfword format).\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | DVEXT,parm-addr                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | DVEXT,parm-addr                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This function  calculates the number of  tracks defined by a  table of\n     contiguous DASD extent  entries,  or from the in-storage  address of a\n     format 1 and 3 DSCB. The parameter area consists of three words:\n      type information - device table entry if X'80' is turned on,\n              device type if < 256, else UCB address.\n      words 2/3 - address of format 1 and format 3 (format 3 address\n              may be zero),\n      or X'80' on in word 2, in which case word 2 has address of a\n              set of contiguous entries of length 10, and word 3 has\n              the number of entries.\n0    Note that the number of extents is not determined by DS1NOEPV;  when a\n     dataset is allocated  with user labels,  the label extent  is added as\n     the first entry in the format 1 DSCB,  but is not counted in DS1NOEPV.\n-    132\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-         The  DVEXT  function   will  treat  an  all  zero   extent  as  normal\n          termination,   overriding the  supplied count.    For  the format  1/3\n          convention, DS1NOEPV is ignored.\n0         R15 is set to 16 for a  bad parameter list.  For an invalid,  non-zero\n          extent,  R15 is set to 8,  R0 to the number of tracks counted prior to\n          the bad extent, and R1 pointing to the (first) extent in error.   When\n          all extents  are valid,   R15 will contain  0,  and  R0 the  number of\n          tracks.  R15  will be  set to  4 if a  format 3  was required  but not\n          supplied,  and  when an all  zero entry is  found before the  count is\n          exhausted.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | DVSPC,parm-addr                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | DVSPC,parm-addr                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function performs DASD space  calculations,  and requires a three\n          word parameter  area.  The first word  of the area specifies  the UCB,\n          type or device table entry as described for DVEXT; word two contains a\n          flag byte,  followed  by three bytes containing  the amount requested.\n          For an 'Average Block' request, the third word contains the blocksize.\n0         The required space is returned in R0,  with R15 set to zero.   R15 may\n          be set to 8 or 16 for invalid requests.\n0         The supported functions,  determined by the  first byte in word2,  are\n          mapped by JFCBCTRI field values defined in macro IEFJFCBN:\n           X'C0' JFCBCYL supplied value is in cylinders, return as tracks\n           X'80' JFCBTRK supplied value is in tracks, return as tracks\n           X'40' JFCBAVR supplied value is in number of blocks, the third\n                    word contains the average blocksize, return as tracks\n           X'FF' (special) supplied value is in tracks, return number of\n                    whole cylinders required (i.e., rounded up).\n0         Note that  no warning  is given  if the  specified number  exceeds the\n          device capacity.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | SCHFR                                           |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This  function is  the last  one  called of  the Cross-Memory  Service\n          routines.  Normal sequence is SCHIN to  obtain space in CSA,  SCHMV to\n          copy the program and data to CSA,  SCHED to pass the ASID and schedule\n          an SRB,  then SCHFR to free the CSA.   Note that SCHIN issues an ESTAE\n          that  is only  freed  by SCHFR.    The ESTAE  exit  schedules the  CSA\n          FREEMAIN code in SCHFR, then returns control to the user with R15=4 if\n          the error is in SCHED (while waiting for SRB completion),  else a user\n          abend 999 is issued.\n-\n                                                                             133\n1                   Technical Guide to System Modifications\n     @SERVICE                                              Service Routines\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | SCHIN,length                                    |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This function is the first one called for Cross-Memory services.   The\n     parameter passed  in R1  (register or  length value,   not label  of a\n     location  containing the  length)   specifies  the amount  of  storage\n     required in  CSA for  execution of  the user's  code.   See  below for\n     details.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | SCHMV,address length                            |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This function  moves the user's pattern  code and data,   beginning at\n     \"address\" with a length of \"length\" to the gotten CSA space.   This is\n     optional (the user  could obtain the appropriate storage  key and move\n     the data), but convenient.  At later times, data may be moved from CSA\n     without special processing (not FETCH  protected),  but moving data to\n     the CSA requires key zero.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | SCHED,asid                                      |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This entry  schedules the SRB  to execute the  user's CSA code  in the\n     address space identified by its id.  A zero return code is issued when\n     the SRB completes;  a return code of  eight indicates a failure of the\n     SCHEDULE request (ASID no longer valid,   etc.).   Note that the SCHED\n     entry may be called  more than once for the same  or different address\n     spaces without intervening SCHIN or SCHMV calls.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | ACGET,result-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | ACGET,result-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This local function obtains the account  number and privileges for the\n     calling task (note that the result is misleading for CICS,  WYLBUR and\n     similar multi-user processes).\n0    The  result address  passed  will be  set to  the  8-byte account  and\n     subaccount entry.   The low byte  of R0 will  be set to  the account's\n     privileges.  For a task with a JMR,   the JMRUSEID field is assumed to\n     contain the account (set by JES2);  if there is no JMR,  the code will\n     try to locate the $JCT (and the JCTACCTN field) if the current task is\n     running under the  primary JES2 subsystem.  When neither  is the case,\n     the unprivileged system overhead number  is returned,  and flag VAASTC\n     is set to indicate that the default number was used.  Other flags that\n     may be set are VAAINH for in-house users, VAASUP for technical support\n     staff,  VAASYS for systems staff,  and  VAAOHD for other overhead.  If\n     none of these applies, then VAAUSER is set. All VAA flags are expanded\n     by member SERVFLAG, which is included by SERVINIT by default.\n0    134\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | ACTST,acct-addr \u00dd,LEN=4|,LEN=8\u00a8                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | ACTST,acct-addr \u00dd,LEN=4|,LEN=8\u00a8                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          The ACTST function  performs a validity check on  the supplied account\n          number. The default of LEN=8 specifies the length to be checked; LEN=4\n          should  be used  only when  the  subaccount number  is not  available.\n          Account numbers in  external and internal format  are considered valid\n          by this  function (internal  format uses  a digit  as the  first byte,\n          external  format the  corresponding  alphabetic  character.  Digits  1\n          through 9 are equivalent to A through I, and Z is used for 0).\n0         R15 returns 16 if the parameter address is invalid.  R15 returns 8 for\n          a disabled or unassigned account,  a reason code is placed in R0,  and\n          is mapped by VRxxxx flags (e.g.,   VRACCT - invalid account,  VRSYNT -\n          syntax error).   R15 is returned as 0  (valid)  or 4 (valid,  no batch\n          runs)  for enabled accounts,  and R0 will contain an internal,  binary\n          form of the account  number in the high two bytes,   and the privilege\n          flags (discussed under  ACGET)  in the low byte.    The internal value\n          produces a unique half-word for each four-byte account number,  and is\n          used  for SYS1.USERPROC  SSI maintenance.   The  low two  bytes of  an\n          account must be numeric, producing a value of 0 to 99; the second byte\n          is alphabetic or numeric, and is converted using 100 for 1, 200 for 2,\n          1000 for A,  up to 3500 for Z;  the first digit is multiplied by 3600,\n          yielding numbers in the range 0 to 35999.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | ACTSM,acct-addr \u00dd,LEN=8|,LEN=4\u00a8                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | ACTSM,acct-addr \u00dd,LEN=8|,LEN=4\u00a8                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function converts the supplied  account number to internal EBCDIC\n          form,  writes the resulting 4 or 8 bytes back to the user's area,  and\n          invokes  the ACTST  function,  described  previously,   to return  the\n          internal binary form of the account, and the privilege flags.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | ACCON,acct-value                                |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | ACCON,acct-value                                |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This local function converts the internal,   binary form of an account\n          number into  the internal  EBCDIC equivalent.  R15  is returned  as 16\n          unless the supplied  value is in the  range 0 to 35999.   The returned\n          account is placed in R0,  with the first character a numeric (internal\n          form).\n-\n                                                                             135\n1                   Technical Guide to System Modifications\n     @SERVICE                                              Service Routines\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | ACCNX,acct-value                                |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | ACCNX,acct-value                                |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This local  function performs as ACCON,   except that the R0  value is\n     returned in  external EBCDIC (dataset  name)  format,  with  a leading\n     character (Z, A-I).\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | FMTAC,acct-addr                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This local  function checks the  syntax,  but  not the status,   of an\n     account. R0 will be set to a result area of the form:\n      X - return byte / account privileges as set by ACGET (exc. STC)\n      CL8 - account number in internal EBCDIC form (numeric first byte)\n      CL8 - userid :    eight bytes for WYLBUR (local)\n                        seven bytes+one blank for TSO\n                        all blank, e.g., for FMTAC\n0    This area is also  used by the functions described below.   Due to the\n     location of this area,  these functions may not be used with a SERVICE\n     call.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | FMTLB,dsname-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This local  function extracts the  account prefix from  datasets under\n     the assumption that they are in the format used for controlled library\n     storage (volume serials of LIBPAx). Return is as for FMTAC, except for\n     the additional error return indicating a bad (dataset name) index.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | FMTWY,dsname-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This local function extracts the account number and WYLBUR userid from\n     the passed  string,  under the  assumption that  it is a  dataset name\n     valid for WYLBUR use. Index levels are checked, but the userid is not.\n     Return codes are as described for FMTAC and FMTLB.\n-\n-\n-\n-\n     136\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | DSTST,dsname-addr \u00dd,LEN=\u00a8                       |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | DSTST,dsname-addr \u00dd,LEN=\u00a8                       |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function  validity checks  the form of  a presumed  dataset name,\n          under the  assumption that  it is not  the name  of a  Generation Data\n          Group entry with flipped zone bits in the last level of the name.  The\n          LEN=  operand may  be used  to specify  that  the area  supplied as  a\n          parameter is shorter than 44 bytes.  The return codes produced by this\n          function (with  R15=8 or 16)  are  mapped by VRxxxx codes  expanded by\n          SERVFLAG.  A  syntactically valid name  (catalogable)  will  produce a\n          return code of zero, with two exceptions.  When the name is unindexed,\n          e.g., PASSWORD,  SYSCTLG or SHORTDSN,  the return code is set to four.\n          For a local copy of @SERVICE, R15 is set to 0, and R0 to VRNWYL,  when\n          the  high-level  index is  a  supported  WYLBUR dataset  index;   this\n          indicates to the  caller that a WYLBUR name check  may be appropriate.\n          Due to this return, the caller should check both R15 and R0.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | DSCAT,dsname-addr \u00dd,LEN=\u00a8                       |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | DSCAT,dsname-addr \u00dd,LEN=\u00a8                       |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function checks  the supplied dataset name for  possible zone bit\n          inversion in  a GDG-style  name.  If  the last  level is  of the  form\n          GnnnnVnn, and the zone bits are flipped, then a local copy of the name\n          is made with  the zones flipped back  to valid EBCDIC form.   The code\n          then finishes as described for DSTST above.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | DSABB,dsname-addr \u00dd,LEN=\u00a8                       |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function, when no errors are diagnosed, returns in R1 the address\n          of an  eight-byte field containing a  shortened version of  the passed\n          dataset name.  Because of this return, the function should not be used\n          with a SERVICE call.\n0         For an invalid address parameter, R1 is left as is, and R15 set to 16.\n          Under all other conditions R1 is set to a return address;  for a major\n          error, R1 will point to CL8' BAD DSN', and R15 will be set to 8,  with\n          R0 containing the reason code.  Normal return  has R15 and R0 equal to\n          zero, and R1 pointing to:\n0            1.  The last or only level of the  name,  if the name has one or\n                 no   index  levels   (e.g.,    PASSWORD  returns   PASSWORD,\n                 SYS5.PROCLIB returns  PROCLIB ).  The  last level  is always\n                 returned at CCSI.\n-\n                                                                             137\n1                   Technical Guide to System Modifications\n     @SERVICE                                              Service Routines\n-       2.  For datasets with exactly three levels,  other than with the\n            local assembly option,  the middle  level is returned (e.g.,\n            USER.PROJECT.DATA returns PROJECT ).\n0       3.  The last level when more than three levels are found, unless\n            the dataset name has the form  of a system created temporary\n            name.    For  a  temporary name,   the  return  includes  an\n            ampersand  (e.g.,    SYS87123.T012345.RA000.@SERVICE.LOADSET\n            yields &LOADSET).\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | DSDS1,voldsn-addr \u00dd,LEN=\u00a8                       |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | DSDJ1,jfcb-addr                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This function issues a system OBTAIN call. R15 is returned as received\n     from OBTAIN,  thus a request for the  VTOC name may result in a return\n     code of zero or eight, depending on the operating system level.  R1 is\n     set to the work  area receiving the DSCB,  hence the  SERVICE call may\n     not be used.\n0    The DSDS1  form may be  used when the  volumer serial (CL6),   and the\n     dataset name (CL1-44) are contiguous. The DSDJ1 entry is used when the\n     JFCB is available.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | DSFMT,jfcb-dsorg-addr|dscb1-dsorg-addr          |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This function  converts the common  DSCB/JFCB DCB related  values from\n     internal to  printable form.  Unless  the supplied address  is invalid\n     (return with R15=16), R1 will be pointed at an output area containing:\n      CL3 DSORG - dataset organization\n      CL6 RECFM - record format\n      CL8 OPTCD - processing options\n      CL5 BLKL  - blocksize\n      CL5 LRECL - record length (may be CL5'X' for long spanned)\n0    Due to the use of a return area, the SERVICE call may not be used.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | DSMEM,member-name-addr \u00dd,LEN=\u00a8                  |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | DSMEM,member-name-addr \u00dd,LEN=\u00a8                  |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This function performs syntax checks on  an intended member name.  The\n     checks are similar  to those performed for an  unindexed dataset name,\n     except that a value of X'C0' is  permitted for the eighth character of\n     the name. This permits use of SVC names, which are kept in SYS1.SVCLIB\n     and SYS1.LPALIB with a zoned last digit.\n0    138\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | RJFCB,ddname-addr \u00dd,LEN=\u00a8                       |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function,   not available  with SERVICE,   reads a  JFCB for  the\n          requested DDNAME. When the JFCB is read correctly, R15 is set to zero,\n          and R1 to the address of the JFCB in the work area.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | PDSDE,servpds-addr                              |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | PDSDE,servpds-addr                              |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This  function  is  used  to extract  members  and  member  data  from\n          directory blocks.   The address supplied in  R1 corresponds to  a work\n          area mapped  or created by SERVPDS;   the RETURN=YES parameter  on the\n          macro corresponds  to an  optional return  area which  will not  yield\n          useful information with the SERVICE call.  Two fields in the parameter\n          block must be completed by the user;  these include the address of the\n          current member entry in the directory  block (PDDBXLE),  and a copy of\n          the dataset record format in PDDRECFM. The other two fields in PDDBXLE\n          are supplied for user  BXLE processing.  The third word is  set to the\n          end of the directory block less one;   the second word is set by PDSDE\n          to the length of the current directory entry.\n0         On return, R0 will be set to the extended return area (useless for the\n          SVC entry). Basic information includes type flag (Load-module, WYLBUR,\n          IEBUPDTX,  SPF,  none),  and for a load-module the options flags (Main\n          member name, SSI, APF, SCTR data present),  offset in the entry to SSI\n          and APF, and the length.\n0         The extended return  area contains a flag (C'*')  for  an alias entry,\n          the member  name (a  trailing X'C0' is  converted to  C'+' for  an SVC\n          name), the SSI in printable form (or blanks),  the DATE in CL5 'yyddd'\n          form if available from SPF or SSI,  the  APF code in the form AC=n (or\n          blank for AC=0),  and the main member name (for load-module alias)  or\n          userid (SPF, soon WYLBUR).\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | DSLIB,dsname-addr \u00dd,LEN=\u00a8                       |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | DSLIB,dsname-addr \u00dd,LEN=\u00a8                       |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This local  function checks the name  of a dataset for  validity under\n          the assumption that the dataset will be placed on a controlled library\n          volume (LIBPAx).  Return codes are mapped by VRxxxx, with the addition\n          of  VRNWYL (malformed  name)   and  VRACCT (invalid  account  number),\n          similar to those issued by DSTST validity checking.\n-\n0                                                                            139\n1                   Technical Guide to System Modifications\n     @SERVICE                                              Service Routines\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | DSLIX,dsname-addr \u00dd,LEN=\u00a8                       |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | DSLIX,dsname-addr \u00dd,LEN=\u00a8                       |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This local function  validity checks the high-level index  of a LIBPAK\n     dataset name (the first period in the name is required).  Return codes\n     are as for DSLIB.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | DSWYL,dsname-addr \u00dd,LEN=\u00a8                       |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | DSWYL,dsname-addr \u00dd,LEN=\u00a8                       |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This local  function performs full validity  checking on a name  to be\n     used with a (dedicated) WYLBUR high-level index,  or to be placed on a\n     WYLBUR storage  volume.  The  check includes  the DSTST  syntax check,\n     high-level index  test,  account number  validity,  and presence  of a\n     WYLBUR  password  record  for  the  account/userid  combination.   The\n     password record  is obtained  with the  PROTECT SVC  (containing local\n     changes),  or  from a  resident list (if  INITG function  was called);\n     volume  WYL001 must  be available  in either  case -  it contains  the\n     password dataset. Return codes are as listed for DSLIB.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | WYLDX,index-addr \u00dd,LEN=\u00a8                        |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | WYLDX,index-addr \u00dd,LEN=\u00a8                        |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This local function checks a presumed  index against the list of valid\n     WYLBUR indices kept in LPA module IGPVOLT.   The period delimiting the\n     index level is required unless LEN=3 is used on the call. Return codes\n     are set as for DSWYL.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | DSGET,dsname-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n+     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVICE  | DSGET,dsname-addr                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This  local function  converts a  short name  to a  long WYLBUR  name,\n     leaves a WYLBUR  name unchanged,  and passes either form  to the DSWYL\n     function for validity checking. A short name is defined as a one to 17\n     character name  containing at  most one  period.   A  correct name  is\n     expanded  only  when the  account  number  has  been placed  into  the\n     JMRUSEID field (and  the JMR is available),  and the  WYLBUR userid is\n     used as a jobname.\n-    140\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-         For a syntactically  valid name,  R1 is returned pointing  to the data\n          portion of the password record except  when the SERVICE entry is used,\n          and when @PROTECT is  invoked via INITG.  This feature is  used by the\n          WYLCOMP dataset compression utility.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | VSNFG,volser-addr                               |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | VSNFG,volser-addr                               |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This local function performs a masked lookup of the volumes defined in\n          LPA module  IGPVOLT,  and returns the  attribute flags in the  low two\n          bytes of R0. R0 is returned as zero when the volume is not found.  The\n          passed parameter is taken to be six bytes long.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | VSTMS,volser-addr                               |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n+          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVICE  | VSTMS,volser-addr                               |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This  function  is  used  in  conjunction  with  systems  running  the\n          University Computing Company's Tape Management System (UCC-1 TMS).  To\n          obtain correct code, the TMS SVC-X and SVC-Y numbers (binary)  must be\n          set in member SYSPARM.  R15 is returned  as 16 when the volser address\n          is bad, as 8 when the TMS LPA resident module could not be found, as 4\n          when the  specified volume  does not have  a TMS name,   and 0  if the\n          volume is controlled by TMS (but note  that the status is not checked,\n          hence the  volume serial may  be valid,   but correspond to  a deleted\n          volume).\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | WCOMP,servcomp-addr                             |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This   function  performs   compression  and   encryption  of   WYLBUR\n          edit-format  records.   It uses  a  special  control block  built  and\n          initialized by  the SERVCOMP  macro.  R15 will  be set  to 16  when an\n          invalid parameter  address is  passed,  or  when one  of the  required\n          addresses in the control block is invalid.   R15 will be set to 8, and\n          a VRxxxx error code in R0 for expected error conditions (some of these\n          may be recoverable).  R15 is returned as 0 when the current line fits,\n          R0 may  be set non-zero  for warning  conditions.  When the  buffer is\n          full,  R15  is set to 4,   and R0 is set  to the logical length  to be\n          written.  For proper operation,  this return  must be forced after the\n          last record is written by setting the record address to zero. When the\n          current block  is empty,  R0 will  also be zero,  indicating  that the\n          final write may be bypassed.\n-\n0                                                                            141\n1                   Technical Guide to System Modifications\n     @SERVICE                                              Service Routines\n-    The names  in the following description  begin with WCM.  This  is the\n     default prefix,  and  may be changed to any valid  three characters in\n     the PFX= operand of the SERVCOMP macro.\n0    Normal use consists of initializing the control block with the address\n     and size of  the next output buffer  (WCMBUFAD/WCMBUFMX),  an optional\n     encryption password  (CL16 address to  WCMCODAD),  and  the processing\n     options to be used.  For each record, the user must supply the address\n     and  length of  the line  (WCMRECAD/WCMRECLN).   Supported  processing\n     options consist of creating line numbers, or to extract them from each\n     line.   NIH-format compression is supported,  but requires the user to\n     set the WCMFG3 flag byte repeatedly for each record.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | WDCOM,servcomp-addr                             |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This function decompresses and decrypts WYLBUR edit-format blocks. The\n     address and size of each input buffer are stored in WCMBUFAD/WCMBUFMX,\n     WCMCODAD is set to zero, or the address of a CL16 codeword address for\n     decryption,  and the WCMFG flags are set.  WCMRECMX must be set to the\n     maximum  record size  to accept  (excess  is truncated  with no  error\n     indication);  if the  user choses to set the  WCMRECAD (record address\n     field) to zero prior to each call,  then a buffer in the @SERVICE work\n     area will be used.  Buffer capacity provides for the maximum supported\n     data  length of  500 for  NIH-format  records,  plus  eight bytes  for\n     sequence numbers,  plus four for a  record descriptor word.   For each\n     record, zero or the intended record address is placed into WCMRECAD. A\n     return code of 0 indicates that a  record was unpacked;  a return of 4\n     indicates that the buffer is exhausted.\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | SERVCALL | ALCVS,jfcb-addr                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n     This function  locates or  obtains a  TIOT entry  for the  DASD volume\n     specified as the first entry in JFCBVOLS of the passed JFCB address. A\n     return  code of  8 in  R15 indicates  that  the request  could not  be\n     satisfied;  e.g.,  a return of 4 in R0 indicates that the volume could\n     not be  mounted.  SVC  99 is  used to  allocate the  requested volume.\n     @SERVICE  supports  allocation  of  only one  volume  at  a  time;   a\n     subsequent ALCVS call  will automatically issue a request  to free the\n     prior allocation (but will continue if that fails).\n-\n-\n-\n-\n     142\n1                        Technical Guide to System Modifications\n          Service Routines                                              @SERVICE\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | ALCDS,jfcb-addr                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This function  will allocate the dataset  with the name passed  in the\n          JFCB.  For an  authorized caller,  the function calls SVC  32 with the\n          JFCB parameter,  and the UCB address corresponding to the first serial\n          in JFCBVOLS.  No  volume mounting is attempted.    For an unauthorized\n          caller,  SVC 99 is used.  Note that this function allocates DASD space\n          for a new  dataset,  it does not  invoke dynamic allocation to  make a\n          dataset accessible.  Note that this function makes an internal call to\n          the volume allocation function ALCVS,   hence any user TIOT allocation\n          is lost.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | ALCFR                                           |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This optional entry unallocates the prior TIOT allocation, if any.  It\n          is called internally by the CLOSE function,  and invoked indirectly by\n          the SERVTERM macro.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | SERVCALL | ALCFD,ddname                                    |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n          This entry removes the allocated DD by DDNAME (address).  Registers 15\n          and 0 are returned from the SVC 99 result.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                            143\n1                   Technical Guide to System Modifications\n     @SRVJ220                                              Service Routines\n-    2.3.2   JES2 @SERVICE extension ..............................@SRVJ220\n+    2.3.2   JES2 @SERVICE extension                               @SRVJ220\n+            ____ ________ _________                               ________\n0    All JES2  dependent code has been  moved from the @SERVICE  routine to\n     the @SRV extensions.   The source modules are  distributed for several\n     versions of JES2,  from MVS (@SRVJ041)  to  SP 1.3 (@SRVJ133)  to SP 2\n     (@SRVJ220).  The  SP 2  version also supports  JES2 1.3.5/1.3.6  in SP\n     1.3.5.\n0    The module appropriate to your version of JES2 is assembled,  and then\n     linked with the name of the matching subsystem.  For instance, if your\n+                                         subsystem\n     installation runs JES2  1.3.3 as the production JES,  with  a PROC and\n     subsystem name of JES2, and a JES 1.3.6 test system using PROC JESB:\n        assemble @SRVJ133\n        link as  @SRVJES2\n        assemble @SRVJ136\n        link as  @SRVJESB\n     Note that  each assembly must be  run with overriding  SYSPARM options\n+    Note\n     and the appropriate JES2 MACLIB and MTS (if any).\n0    The functions  performed by  the @SRV routines  are documented  in the\n     @SERVICE routine description.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    144\n1                        Technical Guide to System Modifications\n          Service Routines                                              @PRINTER\n-         2.3.3   Print and Punch Routines .............................@PRINTER\n+         2.3.3   Print and Punch Routines                              @PRINTER\n+                 _____ ___ _____ ________                              ________\n0         The @PRINTER program performs common services related to producing and\n          formatting print  and punch  format output.    Note that  the @PRINTER\n          program uses  unprotected storage it chains  from the TCB  First level\n          Save Area  (TCBFSA),  hence  cannot be used  in any  environment where\n          SERVCALL cannot be used.  In a multi-tasking environment, @PRINTER may\n          be used  with due caution.   To  use the @PRINTER routines,   you must\n          define  a full-word  named  @PRINTER to  contain  the  address of  the\n          program.   This word must be addressable whenever a PRTxxxx or PUNxxxx\n          macro  is used.   The @PRINTER  program is  then loaded  by using  the\n          LOADLPA macro (inefficient),  or  SERVCALL LPALD,=CL8'@PRINTER'.   The\n          resulting load  address (in R0)   is then  stored in @PRINTER.    In a\n          multi-tasking environment,  the address in  @PRINTER must be passed to\n          the subtasks,  and again stored (or mapped via DSECT)  in a word named\n          @PRINTER.  A file opened by a task may be accessed only by lower tasks\n          in the direct line of descent;  e.g.,   task A attaches tasks B and C.\n          Task C then attaches  tasks D and E.   A file opened by  task A may be\n          used by all lower tasks B through E.   A file opened by task B may not\n          be used by any  other tasks.   A file opened by task C  may be used by\n          tasks D and E.   The CLOSE function is honored only when issued by the\n          task that performed the OPEN;  other  callers receive a level 4 return\n          code.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | PRTOPEN  | work-addr                         \u00dd,DEV=number\u00a8 |\n           |      |          | \u00dd,OPT=\u00bb''|ABEND|DUMMY|NOWTO\u00ba\u00a8                   |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         Print  and punch  files are  opened using  the PRTOPEN  macro,  and  a\n          PRTWORK or PUNWORK generated work area.\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | PRTF     | text-addr   \u00dd,length\u00a8   \u00dd,DEV=list\u00a8   \u00dd,TITLE=\u00a8 |\n           |      |          | \u00dd,FOOTER=\u00a8 \u00dd,CC=\u00bb''|ASA|MC|NO\u00ba\u00a8                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | PRTV     | rdw-addr   \u00dd,DEV=list\u00a8   \u00dd,TITLE=\u00a8   \u00dd,FOOTER=\u00a8 |\n           |      |          | \u00dd,CC=\u00bb''|ASA|MC|NO\u00ba\u00a8                            |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | PRTLIST  | fd-addr   \u00dd,DEV=list\u00a8    \u00dd,TITLE=\u00a8   \u00dd,FOOTER=\u00a8 |\n           |      |          | \u00dd,CC=\u00bb''|ASA|MC|NO\u00ba\u00a8                            |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         Three macros are  used to print/punch data.  They are  PRTF (for fixed\n          length strings);  PRTV (for text  beginning with a record descriptor);\n          and PRTLIST  (which supplies  a list  of FD  macros describing  output\n          formatting and conversion to be done).\n-                                                                            145\n1                   Technical Guide to System Modifications\n     @PRINTER                                              Service Routines\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | PRTBIG   | item|list-addr \u00dd,DEV=list\u00a8 \u00dd,OPT=\u00bbCENT|NEG\u00ba\u00a8    |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | PRTSNAP  | snaplist-addr \u00dd,DEV=list\u00a8                       |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    Special  output is  produced  by  PRTBIG (big-letter  printout),   and\n     PRTSNAP (storage snapshots).\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | PRTROOM  | count \u00dd,DEV=list\u00a8                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | PRTSPACE | count \u00dd,DEV=list\u00a8                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    Control over  output appearance  is provided  by PRTSPACE  (print-line\n     spacing) and PRTROOM (conditional page eject).\n-     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | PRTCLOSE | \u00bbomitted|TCLOSE|SPIN\u00ba \u00dd,DEV=list\u00a8               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    Output  files  may  be  closed permanently  or  temporarily  with  the\n     PRTCLOSE macro.  At task termination,  PRTCLOSE need not be invoked if\n     SERVTERM  is used;   SERVTERM  will invoke  PRTCLOSE  if the  @PRINTER\n     routine was  loaded with  a SERVCALL LPALD,   and delete  the @PRINTER\n     module. Note that SERVCALL has a special close entry FREEM which frees\n     and closes everything except the @PRINTER files.\n+                          ______\n0    @PRINTER supports a maximum of eight output files at any one time. The\n     file for which  an operation applies is specified with  a DEV= operand\n     on each macro  use.  An omitted DEV=  operand results in the  use of a\n     default value of 1.  Except on PRTOPEN, DEV= may be used with sub-list\n     notation  to  perform a  request  for  several devices;   e.g.,   PRTV\n     record,DEV=(1,3,4).  PRTOPEN is used to open a single file (passed via\n     the PRTWORK  or PUNWORK  address);  when  DEV= is  not specified,   it\n     defaults to 1, but any single value from 1 to 8 may be specified.  The\n     DEV= operand  may be written in  a special form  DEV==byte-addr.  This\n     special form,  not to be confused with  a request for a literal value,\n     denotes that the operand is a storage location in which bit flags have\n     been set to indicate the desired devices.  A value of X'01' (or an all\n     zero byte),  indicates device 1;  X'02' indicates device 2,  and X'80'\n     indicates device  8.  Except on PRTOPEN,   these bits may  appear ORed\n     together to perform multiple operations. A DEV of X'FF', for instance,\n     would perform the request on all eight files. When a requested file is\n     not open, @PRINTER just sets a non-zero return code, but continues the\n     request for  other devices.   Only a major  error would  terminate the\n-    146\n1                        Technical Guide to System Modifications\n          Service Routines                                              @PRINTER\n-         request immediately (e.g.,  specifying more than one device number for\n          PRTOPEN).\n-          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | NAME | PRTWORK  | ddname\u00dd,alt-ddname\u00a8    \u00dd,TITLE=\u00a8     \u00dd,FOOTER=\u00a8 |\n           |      |          | \u00dd,LPP=\u00a8 \u00dd,WIDTH=\u00a8  \u00dd,FILL=\u00a8 \u00dd,RECFM=\u00a8  \u00dd,PAGE=\u00a8 |\n           |      |          | \u00dd,SPAGE=\u00a8                                       |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | NAME | PUNWORK  | ddname\u00dd,alt-ddname\u00a8 \u00dd,LPP=\u00a8 \u00dd,WIDTH=\u00a8 \u00dd,RECFM=\u00a8 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         For print-format files,   macro PRTWORK is used to  describe the file.\n          When  the PAGE  and SPAGE  operands are  not  used,  the  area is  not\n          modified, and may be directly incorporated in re-entrant programs. The\n          first positional operand of PRTWORK specifies  the DDNAME for the file\n          to be written,  and the second specifies an optional alternate name to\n          be used  when the first  choice is not  usable (missing or  DD DUMMY).\n          Special options for the DDNAME exist;  the name *CONSOLE causes output\n          to be written as a WTO;  a name beginning with a percent sign is taken\n          as an in-storage file request,  the second word of the DDNAME contains\n          the address  of a  routine to  be called  as though  it were  a DCBPUT\n          routine,  and the alternate DDNAME area is used to specify UCS and FCB\n          overrides,  the byte following the percent sign may be used to request\n          lines per page.   Keyword operands  permit specification of the number\n          of lines reserved for top title lines (TITLE=), for bottom title lines\n          (FOOTER=),   the number  of lines  per  page (LPP=),   the line  width\n          (WIDTH=), the character to be used instead of an unprintable character\n          (FILL=),   and  the  record  format  (RECFM=  in  DCB  format,   e.g.,\n          RECFM=FBA).  Two  operands exist which  cause the @PRINTER  routine to\n          replace information in the work area: PAGE= specifies that the current\n          page number will be placed into the work area whenever it changes, and\n          SPAGE= requests the same for sub-pages  (counted since the last time a\n          TITLE  was changed).   Note  that re-entrant  programs  may use  these\n          functions only when the work area  is moved into gotten storage.  Also\n          note that the page number may be off by one due to the way the program\n          handles page ejects.  When a page eject is requested or forced, a flag\n          is set. The eject processing does not actually take place until a line\n          must be placed on that page. A convenient way of handling this problem\n          consists of clearing a half-word to  zeroes,  and after a PRTx request\n          testing the value, and replacing it if it is zero.\n0         The  PUNWORK  area is  essentially  the  same  as PRTWORK,   but  some\n          functions  and  corresponding  operands are  ignored.   Supported  are\n          DDNAME/alternate,  and  % internal file,   but not  *CONSOLE.   TITLE,\n          FOOTER,  LPP,  FILL,  PAGE and SPAGE  should not be used.   While FILL\n          appears to be meaningful, all character translation for PUNCH files is\n          skipped,  primarily to preserve object decks,  and secondarily because\n          the translation table is built dynamically based on the UCS train used\n          for the file,  something that applies  only to some print files.  Note\n          that neither ASA nor control codes  may give correct results when used\n          with punch files.\n0                                                                            147\n1                   Technical Guide to System Modifications\n     @CATREAD                                              Service Routines\n-    2.3.4   Catalog Reader .......................................@CATREAD\n+    2.3.4   Catalog Reader                                        @CATREAD\n+            _______ ______                                        ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     148\n1                        Technical Guide to System Modifications\n          Service Routines                                              @DCBEXIT\n-         2.3.5   DCB Exit Services ....................................@DCBEXIT\n+         2.3.5   DCB Exit Services                                     @DCBEXIT\n+                 ___ ____ ________                                     ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             149\n1                   Technical Guide to System Modifications\n     @FDRREAD                                              Service Routines\n-    2.3.6   FDR Pseudo-DASD ......................................@FDRREAD\n+    2.3.6   FDR Pseudo-DASD                                       @FDRREAD\n+            ___ ___________                                       ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     150\n1                        Technical Guide to System Modifications\n          Service Routines                                              @INPREAD\n-         2.3.7   Generalized Input Service ............................@INPREAD\n+         2.3.7   Generalized Input Service                             @INPREAD\n+                 ___________ _____ _______                             ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             151\n1                   Technical Guide to System Modifications\n     @OBTAINS                                              Service Routines\n-    2.3.8   Full-track OBTAINs ...................................@OBTAINS\n+    2.3.8   Full-track OBTAINs                                    @OBTAINS\n+            __________ _______                                    ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     152\n1                        Technical Guide to System Modifications\n          Service Routines                                              @PROTECS\n-         2.3.9   Full-track PROTECT ...................................@PROTECS\n+         2.3.9   Full-track PROTECT                                    @PROTECS\n+                 __________ _______                                    ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             153\n1                   Technical Guide to System Modifications\n     @TMSREAD                                              Service Routines\n-    2.3.10   Fast TMS Reader .....................................@TMSREAD\n+    2.3.10   Fast TMS Reader                                      @TMSREAD\n+             ____ ___ ______                                      ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     154\n1                        Technical Guide to System Modifications\n          Service Routines                                              @VOLREAD\n-         2.3.11   Full-track DASD Reader ..............................@VOLREAD\n+         2.3.11   Full-track DASD Reader                               @VOLREAD\n+                  __________ ____ ______                               ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             155\n1                   Technical Guide to System Modifications\n     FINIT                                                 Service Routines\n-    2.3.12   FORTRAN Interface Initialization ....................FINIT\n+    2.3.12   FORTRAN Interface Initialization                     FINIT\n+             _______ _________ ______________                     _____\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     156\n1                        Technical Guide to System Modifications\n          Service Routines                                                 FSORT\n-         2.3.13   FORTRAN/SORT Interface ..............................FSORT\n+         2.3.13   FORTRAN/SORT Interface                               FSORT\n+                  ____________ _________                               _____\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             157\n1                   Technical Guide to System Modifications\n     GOPARM                                                Service Routines\n-    2.3.14   EXEC PARM Extraction ................................GOPARM\n+    2.3.14   EXEC PARM Extraction                                 GOPARM\n+             ____ ____ __________                                 ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     158\n1                        Technical Guide to System Modifications\n          Service Routines                                                  ICPU\n-         2.3.15   CPU and Time Routine ................................ICPU\n+         2.3.15   CPU and Time Routine                                 ICPU\n+                  ___ ___ ____ _______                                 ____\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             159\n1                   Technical Guide to System Modifications\n     IEFSD095                                              Service Routines\n-    2.3.16   Big Letter Routine ..................................IEFSD095\n+    2.3.16   Big Letter Routine                                   IEFSD095\n+             ___ ______ _______                                   ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     160\n1                        Technical Guide to System Modifications\n          Service Routines                                                LOOKDD\n-         2.3.17   DD Card Routine .....................................LOOKDD\n+         2.3.17   DD Card Routine                                      LOOKDD\n+                  __ ____ _______                                      ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             161\n1                   Technical Guide to System Modifications\n     MADS                                                  Service Routines\n-    2.3.18   MADS Support/Simulator Routine ......................MADS\n+    2.3.18   MADS Support/Simulator Routine                       MADS\n+             ____ _________________ _______                       ____\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     162\n1                        Technical Guide to System Modifications\n          Service Routines                                               MODJFCB\n-         2.3.19   JFCB Modification ...................................MODJFCB\n+         2.3.19   JFCB Modification                                    MODJFCB\n+                  ____ ____________                                    _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             163\n1                   Technical Guide to System Modifications\n     NOSTAE                                                Service Routines\n-    2.3.20   FORTRAN Dump Support ................................NOSTAE\n+    2.3.20   FORTRAN Dump Support                                 NOSTAE\n+             _______ ____ _______                                 ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     164\n1                        Technical Guide to System Modifications\n          Service Routines                                               RANDOMS\n-         2.3.21   Random Number Generator .............................RANDOMS\n+         2.3.21   Random Number Generator                              RANDOMS\n+                  ______ ______ _________                              _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             165\n1                   Technical Guide to System Modifications\n     REREAD                                                Service Routines\n-    2.3.22   FORTAN Record Reread Routine ........................REREAD\n+    2.3.22   FORTAN Record Reread Routine                         REREAD\n+             ______ ______ ______ _______                         ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     166\n1                        Technical Guide to System Modifications\n          Service Routines                                               SETDISP\n-         2.3.23   Disposition Change ..................................SETDISP\n+         2.3.23   Disposition Change                                   SETDISP\n+                  ___________ ______                                   _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             167\n1                   Technical Guide to System Modifications\n     TIMEDAY                                               Service Routines\n-    2.3.24   Time & Date Formatting ..............................TIMEDAY\n+    2.3.24   Time & Date Formatting                               TIMEDAY\n+             ____ _ ____ __________                               _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     168\n1                        Technical Guide to System Modifications\n          Macro description\n-\n                                        Section 3\n+                                       Section 3\n0                                   MACRO DESCRIPTION\n+                                   MACRO DESCRIPTION\n-         This section describes macros used by ESP programs, functions, and the\n          documentation processing. The following conventions are used:\n0         Three forms of statement labels are documented -\n          no label field - label does not apply (e.g., SCRIPT macros)\n          \"none\" - only a sequence symbol may be used in the label field\n          \"name\" - the user may supply a label\n0         The operand fields follow IBM conventions -\n0         Upper case items, when used, must be supplied as shown.\n          Parentheses, equal signs, and the like, are used as shown.\n          Lower case items are to be supplied by the user.\n          Items separated by a stroke | are chosen from the available options.\n          Items enclosed in braces \u00bb \u00ba are required;  this form is used when one\n             or more mutually exclusive options exist for a mandatory parameter.\n          Items enclosed  in brackets  \u00dd \u00a8  are optional.    Enclosed parameters\n             separated by strokes represent mutually exclusive options.\n          An ellipsis ... indicates that items may be repeated.\n          A complete repetition of  the macro indicates an  alternate form which\n             is incompatible with the prior one.\n-\n          3.1   GENERAL MACROS\n+         3.1   GENERAL MACROS\n+               _______ ______\n0         This  section contains  all macros  which do  not fit  into a  special\n          category.\n-\n-\n-\n-\n-\n-\n-\n                                                                             169\n1                   Technical Guide to System Modifications\n     @OBTAIN                                              Macro Description\n-    3.1.1   @OBTAIN\n+    3.1.1   @OBTAIN\n+            _______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | @OBTAIN  | camlst-addr \u00dd,OPT=LOADED\u00a8                       |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | @OBTAIN  | storage-value,OPT=SIZE                          |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | @OBTAIN  | OPT=CLOSE                                       |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This macro  invokes the  @OBTAINS service  program,  and  performs all\n     functions done by the OBTAIN macro it replaces. The capability is used\n     as a speed versus storage trade-off. @OBTAIN will read the entire VTOC\n     into storage,  optionally  sort it by dataset name,   and provide both\n     SEEK and SEARCH support.  At CCSI, approximately 900K are required for\n     the largest VTOC.\n0    The OPT=  keyword may  be used  only on  the last  logical request(for\n     OPT=CLOSE),   or on  the  first physical  and  logical  request in  an\n     assembly.   OPT=LOADED specifies  that the  @OBTAINS  module has  been\n     loaded already,  and  that its address has been stored  in a full-word\n     named @OBTAIN.  In the absence of  this parameter,  @OBTAIN will use a\n     weak external reference to @OBTAINS,  and  use the IBM SVC (number 27)\n     when the reference is unresolved.\n0    OPT=SIZE specifies that  the function is used prior to  the first VTOC\n     request to  set the  storage reserve  size.  The  value passed  is the\n     storage amount  not to be allocated  by the @OBTAINS code.   When this\n+                    ___\n     value is too large,  all @OBTAINS calls will be passed to the IBM SVC.\n     When storage is insufficient for the entire VTOC, but large enough for\n     one track and  a work area,  then @OBTAINS will  support all functions\n     slowly, and will not sort the VTOC.\n0    When @OBTAINS is used to access  the VTOC sequentially with successive\n     SEEK requests,  the VTOC end address  and format 1 high-water mark may\n     be used as  with OS.  When a  sorted VTOC is processed,   indicated by\n     setting X'A2' into the  DS1FMTID prior to a SEEK call,   then the user\n     must terminate  the loop  when @OBTAINS  returns a  DS1FMTID field  of\n     X'FF'. No indication is given when the sort request fails.\n0    When the  @OBTAINS routine  is loaded via  the @SERVICE  routine LPALD\n     function, then the CLOSE call will be made by @SERVICE when a SERVTERM\n     macro, or a SERVCALL FREEM or CLOSE are issued.\n0    For search  processing,  the user may  supply a prefix mask.   This is\n     specified  by  turning on  the  X'10'  bit  in  the first  byte  of  a\n     SEARCH-type CAMLST, and following it with the length (AL1) and address\n     of the mask (AL3).  Only matching  DSCB entries are returned,  and the\n     end-file entry.\n-    170\n1                        Technical Guide to System Modifications\n          Macro Description                                             @PROTECT\n-         3.1.2   @PROTECT\n+         3.1.2   @PROTECT\n+                 ________\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | @PROTECT | request-addr                                    |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This function invokes the fast @PROTECS service program,  and provides\n          all functions documented for SVC 98, and the PROTECT macro.\n0         This macro expands a weak external reference for module @PROTECS,  and\n          invokes SVC 98 when the reference is not resolved.  @PROTECS reads the\n          entire PASSWORD  dataset into storage;  this  requires the user  to be\n          privileged to avoid a 913 abend.\n0         When feasible,  the functions provided  by the @SERVICE routine should\n          used instead of @PROTECT; in particular, note the INITG function.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             171\n1                   Technical Guide to System Modifications\n     BIX                                                  Macro Description\n-    3.1.3   BIX\n+    3.1.3   BIX\n+            ___\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | BIX      | VAL=r0,WORK=r15,WORK2=r14,PRE=0,BHI=            |\n      |      |          | BASE=,LOC=,ERR=,PFX=,SIZE=16,MASK=15            |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This  macro expands  code for  multiple  branching based  on an  index\n     value.   The  index   values  should  begin  with   0,   and  increase\n     consecutively until they reach a maximum  (either the number of branch\n     addresses supplied, or a number less then that specified by SIZE).  By\n     default, values from 0 to 15 are supported.  When SIZE is changed, the\n     MASK value should also be changed.\n0    VAL= specifies the register which has been loaded by the user with the\n     index value. The contents of this register are not changed, unless the\n     register is also used  for one of the other register  keywords (but R0\n     should not be used for others).\n0    PRE= specifies a bit  count by which the index value  is shifted right\n     before masking and other processing.\n0    MASK= is a mask which is ANDed to a copy of the index value to isolate\n     the significant portion.  MASK should always  be one less than a power\n     of two.  Note that the MASK is applied after the right-shift specified\n     by PRE=.\n0    SIZE= specifies the maximum number of branch addresses supported.   No\n     validity  checking is  made  on the  number if  the  number of  branch\n     addresses reach or exceed the SIZE value.\n0    WORK= and WORK2=  specify two discrete work registers,   which must be\n     different from VAL=, and should not specify register zero.   WORK2 may\n     specify the register  specified in VAL,  providing it is  not zero (or\n     defaulted to zero).\n0    BHI= specifies an  address valid on BE,  not a  register value,  which\n     will be executed when, after PRE shifting and MASK masking, the result\n     matches the  mask value.   This test  is executed  before any  SIZE or\n     number of branch address checks are made.   The function is useful for\n     the special  case were  an index may  either be a  value in  the lower\n     range, or the maximum (e.g., to indicate a special condition).\n0    BASE= specifies the base value to use for branch table entries.  BASE=\n     and BASE=*  request the  current control  section.  When  this is  not\n     addressable,  BASE may be set to any  label that is addressable and in\n     the same control section as the  branch addresses.  The code generates\n     half-word displacement entries for the addresses, and does not support\n     labels in different control sections.\n0    ERR= specifies a label, subject to the same addressing restrictions as\n     branch addresses,  which will be executed when the index value exceeds\n     the number of  supplied addresses,  or reaches the  value specified by\n     SIZE. A register designation is not supported.\n0    172\n1                        Technical Guide to System Modifications\n          Macro Description                                                  BIX\n-         PFX= specifies a  zero to seven byte  prefix which will be  applied to\n          all address labels, other than the ones specified by BHI and ERR.  Use\n          is optional, and is intended to make for shorter lists.\n0         LOC= is the sublist which specifies the branch labels corresponding to\n          each index value.  The first label corresponds to an index value of 0,\n          the next to 1,  etc.   Omitted entries (i.e.,  successive commas)  are\n          replaced by a branch to the ERR= address.\n0         For example, the return from OBTAIN could be checked:\n                   OBTAIN SEEK         READ DSCB AT TTR\n                   BIX   VAL=R15,WORK=R1,PRE=2,SIZE=3,ERR=BADSEEK,       *\n                         PFX=SEEK,LOC=(0,4,8)\n           SEEK8   CLI   DS1FMTID,C'4'  READ/REQUESTED VTOC ?\n                   ...\n           SEEK4   ...                 VOLUME NOT MOUNTED OR ?\n                   ...\n           BADSEEK ...                 OTHER ERROR\n                   ...\n           SEEK0   ...                 HAVE DSCB\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                                                            173\n1                   Technical Guide to System Modifications\n     CLRL                                                 Macro Description\n-    3.1.4   CLRL\n+    3.1.4   CLRL\n+            ____\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | CLRL     | addr,len \u00dd,WORK1=14\u00a8 \u00dd,WORK2=0\u00a8 \u00dd,FILL=\u00a8        |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This macro expands into an MVCL  instruction to clear or initialize an\n     area.\n0    WORK1= and WORK2= specify discrete registers, which represent both the\n     even and odd register of a pair.\n0    The address operand specifies the label  or (register)  with the start\n     address to be cleared.\n0    The second operand specifies the value of the length,  or a (register)\n     preloaded with the desired length.\n0    FILL=  may specify  a self-defining  term representing  the byte  with\n     which the area will be filled.  By default, the area is cleared to hex\n     zeroes.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    174\n1                        Technical Guide to System Modifications\n          Macro Description                                               CRMEND\n-         3.1.5   CRMEND\n+         3.1.5   CRMEND\n+                 ______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | CRMEND   | \u00ddPFX=\u00a8                                          |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro  is used at  the logical and physical  end of a  section of\n          code that will  be relocated to CSA  for execution by a  SCHEDULEd SRB\n          (see @SERVICE SCHxx functions). The value supplied for PFX defaults to\n          the PFX value  used in a prior  CRMxxx macro.  The macro  expands a 0D\n          with label \"pfxLAST\",  and an equate for \"pfxSIZE\" defining the length\n          of the code moved to the CSA.   See also CRMHEAD.   In a program using\n          only one CSA routine, PFX is normally defaulted.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             175\n1                   Technical Guide to System Modifications\n     CRMEXIT                                              Macro Description\n-    3.1.6   CRMEXIT\n+    3.1.6   CRMEXIT\n+            _______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | CRMEXIT  | ret-code \u00dd,PFX=\u00a8                                |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    Macro CRMEXIT may be used one or  more times between the occurrence of\n     a CRMHEAD and  CRMEND macro with the same (or  defaulted)  PFX= value.\n     The expanded code sets  a return code into register 15  and returns to\n     the @SERVICE supervisory  code residing in CSA.  Register  14 need not\n     have been saved by the user.\n0    The  \"ret-code\" operand  is  mandatory,  and  may  be a  self-defining\n     integer, an expression valid on LA, or a register specification.   The\n     value is used to post the SCHEDULE ECB.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    176\n1                        Technical Guide to System Modifications\n          Macro Description                                              CRMHEAD\n-         3.1.7   CRMHEAD\n+         3.1.7   CRMHEAD\n+                 _______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | CRMHEAD  | \u00ddPFX=\u00a8                                          |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro  begins the logical  and physical sequence  of instructions\n          that define code and data which will be relocated to CSA for execution\n          by  the  @SERVICE SCHxx  functions.   The  physical sequence  must  be\n          terminated  by a  CRMEND macro.   PFX defaults  to 'USER'  and may  be\n          omitted in programs using only  one CRMHEAD/CRMEND sequence.   If more\n          than  one  sequence  is  supplied,   the  CRM  macros  must  not  have\n          overlapping ranges (you  must code CRMEND prior to  the next CRMHEAD),\n          and all but the first CRMHEAD must have a unique PFX operand. PFX must\n          have 1 to 4  characters.  Once PFX is used,  it  remains as the global\n          default until the next  occurrence of a PFX operand,  and  need not be\n          specified  explicitly on  other  CRMxxx macros  (other  than the  next\n          CRMHEAD).\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                            177\n1                   Technical Guide to System Modifications\n     CRMSPIE                                              Macro Description\n-    3.1.8   CRMSPIE\n+    3.1.8   CRMSPIE\n+            _______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | CRMSPIE  | address|0 ,\u00ddPFX=\u00a8                               |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    Macro CRMSPIE  establishes and cancels  error recovery support  in CSA\n     code invoked by @SERVICE SCHxx functions.   See CRMHEAD and CRMEND for\n     defining a CSA  code segment.  When CRMSPIE is issued  with an address\n     (which must be in the CRMHEAD/CRMEND range),  the specified address is\n     given control when an error occurs.   An explicit address of 0 cancels\n     the recovery request.\n0    When \"address\" is invoked, the source of error is not specified.   All\n     registers are set as they were when CRMSPIE was issued,  not what they\n+                                                             ___\n     were at the time of error.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     178\n1                        Technical Guide to System Modifications\n          Macro Description                                             DCBEXITD\n-         3.1.9   DCBEXITD\n+         3.1.9   DCBEXITD\n+                 ________\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | DCBEXITD | DSECT=no,PREFIX=dx,LEVEL2=                      |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         The  DCBEXITD macro  expands the  parameter list(s)   required by  the\n          @DCBEXIT DCB exit list processing code.   When @DCBEXIT is invoked, it\n          stores information in the list, hence the expansion should not be used\n          in refreshable or re-entrant storage.  Generally, DCBEXITD is used one\n          or more times in a DSECT definition,   with a unique prefix each time,\n          and a pattern expansion in a  CSECT.   The DSECT areas,  after storage\n          has been obtained,  may then be initialized by moving the pattern,  or\n          by explicit MVI and ST instructions. Not all keywords are shown in the\n          pattern above,  only the critically  important ones.  Descriptions for\n          all keywords follows:\n0         DSECT=YES specifies that  a DSECT statement will  be generated,  using\n          the supplied \"name\", or defaulting to DCBEXITD.   DSECT=NO or anything\n          other than YES causes the DSECT card  to be skipped.  If \"name\" is not\n          null, it will be used on a DS    0D expansion,  otherwise the label is\n          skipped.  A displacement error will occur when the label and DSECT are\n          skipped,  unless a double-word boundary address is forced prior to the\n          expansion.\n0         PFX= specifies a  one or two character prefix,  which  defaults to DX.\n          The keyword is  required when more than one DCBEXITD  macro appears in\n          one assembly.\n0         LEVEL2= specifies a  self-defining value corresponding to  the maximum\n          second-level exit  or parameter  addresses that may  be used  with the\n          control block.  DCBEXITD does not provide  a mechanism for setting the\n          flags and addresses for these.\n0         USER= specifies an  address or self-defining term valid  in an address\n          constant.  The value is placed into field  DXUSER,  and may be used by\n          the user for any purpose.\n0         FLAG1=0 may be used to set DXFLAG1\n           X'80' DX1RCINT Causes use of record interface (BFTEK=A) with the\n                          proper RECFM, LRECL for QSAM input. Note that the\n                          DCB must have BFTEK=A specified prior to each OPEN.\n           X'40' DX1BLOCK This flag creates an error when BLKSIZE is not a\n                          multiple of LRECL for RECFM=FB.\n           X'20' DX1NOFBS Turns off Standard (S) if RECFM=FBS; does not change\n                          VBS.\n           X'10' DX1NOPCI Turns off OPTCD=C.\n           X'08' DX1NOSD  Turns off OPTCD=Z for direct access files.\n           X'04' DX1FULLT Defaults BLKSIZE to full track (DASD) or OS maximum.\n           X'02' DX1TRUNC Reduces BLKSIZE to full track or other maximum.\n           X'01'   open\n0         FLAG2=0 may be used to set DXFLAG2\n           X'80' DX2CONCT The user wants unlike concatenation support.\n0                                                                            179\n1                   Technical Guide to System Modifications\n     DCBEXITD                                             Macro Description\n-     X'40' DX2REGET Set by @DCBEXIT when a READ or GET must be re-issued\n                     after a CLOSE/OPEN for a new concatenation. This flag\n                     must be turned off by the caller.\n      X'04' DX2CCERR When the DCB/JFCB/label make a control character\n                     specification which does not match the DCBEXITD\n                     specified preferences, the OPEN is failed. This\n                     is triggered by one source specifying control, the\n                     other not. Note that ASA and machine control are\n                     considered the same.\n      X'02' DX2CCADJ When the control character specifications do not\n                     match, the LRECL and BLKSIZE will be adjusted by\n                     one to match the final processing option.\n      X'01' DX2TARER Turns off OPTCD=Z except for tape files.\n0    FLAG3=0 may be used to set DXFLAG3\n      X'08' DX3BLKTB For BLKSIZE defaults, use the @DCBEXIT resident\n                     device/blocksize table.\n      X'04' DX3BLKWY For BLKSIZE defaults and maxima, use the @DCBEXIT\n                     resident table of WYLBUR default and maximum sizes.\n      X'02' DX3ISWYL Set by @DCBEXIT when the file's RECFM is U, the\n                     LRECL and BLKSIZE are valid for a WYLBUR compressed\n                     (edit format) file, and the device is supported by\n                     WYLBUR. This flag should be reset by the user.\n      X'01' DX3DFWYL Causes file attributes to default to WYLBUR type.\n0    FLAG4=0 is not presently being used.\n0    DXRETCOD is a reserved  byte to receive the return code  from a failed\n     OPEN. Currently @DCBEXIT abends an unprocessable request.\n0    DRECFM=0 specifies a  self-defining term valid as a  RECFM value.   Do\n     not use the JCL/DCB characters (F,  V,  B,  etc.).   The value will be\n     used as  the default if  no RECFM is supplied  from the DCB,   JFCB or\n     dataset label.\n0    BLOCKF=0 supplies a  default blocking factor for RECFM=F  and V files.\n     When left 0, this value causes @DCBEXIT to use a factor of 10,  unless\n     some other  source for a BLKSIZE  value is found (e.g.,   the DX3DFWYL\n     flag).  When the product of the  record length and this factor exceeds\n     the device blocksize,  the value is reduced only when the DX1TRUNC bit\n     is on.\n0    LRECLF=0 specifies the default LRECL value for RECFM=Fxx\n0    LRECLV=0 specifies the default LRECL value for RECFM=Vxx\n0    LRECLD=0 specifies the default LRECL value for RECFM=Dxx\n0    LRECLU=0 specifies the default BLKSIZE (and LRECL) for RECFM=U\n0    The remaining  fields in  the expansion  are to  be maintained  by the\n     user.  The fields begin at label DXOPLIST,  and terminate when a X'80'\n     is found in  the high byte of an  entry.  The high byte  of each entry\n-    180\n1                        Technical Guide to System Modifications\n          Macro Description                                             DCBEXITD\n-         designates the function, the low three bytes the address of a table or\n          exit. The functions are:\n0          X'00' or X'80' DXTNOP empty/last entry. An NI with X'80' may be\n                          used to de-activate any entry. The X'80' bit may\n                          be on in any of the entries described below to\n                          designate the end of the list, and is not\n                          mentioned in the description again.\n           X'01' DXTEXIT/exit-address  This entry causes an exit to a user\n                          routine to be made after @DCBEXIT has processed\n                          the basic RECFM, LRECL and BLKSIZE parameters.\n                          These, and OPTCD and similar fields may still be\n                          altered by the user. The parameter and register\n                          convention for all exits is described below.\n           X'02' DXTBLOCK/table-address  This entry supplies a default list\n                          of blocksizes by device type. There are eight bytes\n                          per entry. Byte one corresponds to UCBTBYT3, or is\n                          X'FF' for the last entry. Byte two corresponds to\n                          UCBTBYT4, and is X'FF' in the last entry, and in\n                          any entry where the device sub-type is irrelevant.\n                          The second half-word contains 0 or the preferred\n                          BLKSIZE (e.g., the WYLBUR edit size for the device).\n                          The third half-word contains the minimum desired\n                          BLKSIZE (this is 512 for the default table); the\n                          last half-word specifies the maximum BLKSIZE\n                          supported (this may be smaller than the OS or\n                          device limit). The DX1TRUNC flag should be on to\n                          ensure that the BLKSIZE will be adjusted to be\n                          valid with the record length.\n           X'03' DXTWYLBK/table-address  This entry specifies a table where\n                          both the default and the limits are to be used.\n                          The table has the format described for DXTBLOCK, but\n                          all entries are used.\n           X'04' DXTPREX/exit-address  This entry specifies an exit taken\n                          from @DCBEXIT after setup is complete, but before\n                          any fields have been examined or altered. See below\n                          for register and parameter format.\n           X'05' DXTMAXBK/table-address  The address specifies a table in the\n                          format described under DXTBLOCK, but only the\n                          maximum BLKSIZE value will be used and enforced.\n           X'06' DXTEXITF/exit-address  This entry takes an exit after\n                          @DCBEXIT has finished setting DCB parameters.\n                          The exit is taken as follows:\n                            R14 - return address\n                            R15 - exit address\n                            R0  - DCBEXITD address, where\n                                    DXDCBPTR contains the DCB address\n                                    DXUSER the user specified value\n                                    DXDOUBLE the UCB address for the file\n                                      (this may be 0 for JES, TERM and DUMMY\n                                      files, or an address not in the system\n                                      UCB chain for a VIO file)\n                                    DXDOUBLE+4 contains the TIOT entry address\n                                    DXFLAG2 may have DX2REGET on\n0                                                                            181\n1                   Technical Guide to System Modifications\n     DCBEXITD                                             Macro Description\n-                              DXFLAG3 may have DX3ISWYL on\n                       R1  - DCB address\n0    Note that in most versions of OS,  it  is too late to change the MACRF\n     in any of the exits.  In MVS,  even chaining may not be turned off for\n     some files.  The DCBDEVT field is filled in only for some devices, but\n     not DASD or tape.\n0    @DCBEXIT may  be used to process  a closed DCB,  providing  the DDNAME\n     field is not blank,   and the name appears in the  TIOT.   Turn on bit\n     DCBOFUEX in DCBOFLGS,  and call @DCBEXIT as a subroutine,  passing the\n     DCB address in R1.\n0    Due to the modification of fields in the DCBEXITD expansion, it should\n     be dedicated to a particular DCB while that DCB remains OPEN.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    182\n1                        Technical Guide to System Modifications\n          Macro Description                                             DELETEST\n-         3.1.10   DELETEST\n+         3.1.10   DELETEST\n+                  ________\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | DELETEST | \u00bbEP=|EPLOC=\u00ba \u00dd,LEN=3|4\u00a8                         |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro examines  the contents of the three-byte DC  with the label\n          specified by the EP or EPLOC operand, and issues an OS DELETE with the\n          same EP or EPLOC when the contents is non-zero.  When the LEN= keyword\n          specifies  a value  other  than 3,   then  the  expansion expects  the\n          labelled field to be four bytes long,  and issues the DELETE only when\n          the contents is positive.   A negative value results from the @SERVICE\n          LPALD routine for a module residing in LPA (or located in CSA).\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             183\n1                   Technical Guide to System Modifications\n     EBCDIG                                               Macro Description\n-    3.1.11   EBCDIG\n+    3.1.11   EBCDIG\n+             ______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | EBCDIG   | value,length                                    |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This macro  is used to generate  DC constants for numeric  or absolute\n     values that  are not  defined (or not  convenient)  at  assembly time.\n     \"value\"  specifies  a  SETA  symbol,    self-defining  number,   or  a\n     non-relocatable expression. The value must be non-negative.\n0    \"length\" specifies  the desired DC length,   and must be written  as a\n+                                                     ____\n     single digit (1-9).\n-    For example:\n      SORTREC  EQU   *            beginning of a SORT record\n      SORTKEY  DS    CL44the SORT key\n      SORTDATA DS    ...          other data\n      SORTLEN  EQU   *-SORTREC    length of data\n               SPACE 1\n      SORTREC1 DC    C' SORT FIELDS=(1,'\n               EBCDIG L'SORTKEY,3  produces DC C'0' / DC C'4' / DC C'4'\n               DC    C',CH,A)'\n      SORTREC2 DC    C' RECORD SIZE=('\n               EBCDIG SORTLEN,4    expands appropriate DCs\n               DC    C')'\n-    When a name field is used, the macro expansion includes\n              name     DC    0CL(length)\n-\n-\n-\n-\n-\n-\n-\n-\n     184\n1                        Technical Guide to System Modifications\n          Macro Description                                                 ENDM\n-         3.1.12   ENDM\n+         3.1.12   ENDM\n+                  ____\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | ENDM     | PFX=save RC= RC0=  RC1= COPYRET=addr|(addr,len) |\n           |      |          | RETADDR=(r14) DISP=\u00bbFREEMAIN|TEST|RETAIN\u00ba NEXT= |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         The ENDM  macro is  used to terminate  a module  begun with  the SAVEM\n          macro. It is dependent on SAVEM only to the extent that the first word\n          of the  caller's save  area is used  to stash  a GETMAIN  sub-pool and\n          length,  and  that the first SAVEM  in an assembly declares  a mapping\n          DSECT for the save area.\n0         PFX specifies the one to four bytes used  as a prefix in SAVEM for the\n          save area mapping.  It  may be omitted if SAVEM was  also defaulted or\n          set to SAVE.\n0         RC=  may  be used  to  pass  a return  code.   The  operand may  be  a\n          self-defining  value  valid  in  an LA  instruction,   or  a  register\n          specification for a register other than  R13,  R0 and R1.   With NEXT=\n          null, a numeric operand is allowed (0-4095).\n0         RC0= may be  used to return a  value in register 0.   The operand must\n          specify a register other  than R13,  R0 and R1.   With  NEXT= null,  a\n          numeric operand is allowed (0-4095).\n0         RC1= may be  used to return a  value in register 1.   The operand must\n          specify a register other  than R13,  R0 and R1.   With  NEXT= null,  a\n          numeric operand is allowed (0-4095).\n0         COPYRET=  provides  an  alternate  means  for  setting  return  codes.\n          COPYRET=address specifies the  name of a word  containing the intended\n          return code for register 15. The form COPYRET=(addr,len) specifies the\n          starting address, and self-defining length to be moved, beginning with\n          register 15. A length of 8 would copy values for registers 15 and 0, a\n          length of 12  would copy 15,  0  and 1.   The address  operand may not\n          specify  an address  that requires  register 13  for resolution;   the\n          expanded code no longer has a valid R13 at the time of the move.\n0         DISP=RETAIN indicates that R13 is not to be changed.  Any return codes\n          are placed into the current save area,  and the registers are reloaded\n          from there. This operand is commonly used with a NEXT= operand.\n0         DISP=FREEMAIN  indicates  that word  one  of  the caller's  save  area\n          contains the  sub-pool and length of  the current save and  work area,\n          and are to be FREEMAINed.\n0         DISP=TEST indicates that  word one of the caller's  save area contains\n          the sub-pool and length of the current save area, or a length of zero.\n          For a non-zero length, the area is freed.\n0         NEXT=module-name  specifies that  after the  FREEMAIN,   if any,   and\n          register reloading, an XCTL to the named module is to be performed.\n-                                                                            185\n1                   Technical Guide to System Modifications\n     ENDM                                                 Macro Description\n-    If NEXT is  omitted or null,  then after registers  are reloaded,  the\n     code branches to the address specified  in RETADDR,  which defaults to\n     (R14). Note the restriction for an address branch - the registers have\n     been reloaded, but the USING environment has not been altered.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     186\n1                        Technical Guide to System Modifications\n          Macro Description                                              FDRREAD\n-         3.1.13   FDRREAD\n+         3.1.13   FDRREAD\n+                  _______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | FDRREAD  | type,operand \u00dd,USE=VTOC\u00a8                        |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro invokes the @FDRREAD routine,  which reads tapes created by\n          Innovation Data Processing,  Inc.'s  Fast Dump/Restore (FDR)  program.\n          The  function  is  used  by  @OBTAINS  and  IEHVTOC  to  perform  VTOC\n          processing for an unrestored volume.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             187\n1                   Technical Guide to System Modifications\n     FSAWORK                                              Macro Description\n-    3.1.14   FSAWORK\n+    3.1.14   FSAWORK\n+             _______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | FSAWORK  |                                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This macro creates a DSECT and the header data for a work area chained\n     from TCBFSA, as used by @PRINTER and @SERVICE.  When the name field is\n     omitted,  FSAWORK  is generated.    The PFX=  keyword may  be used  to\n     specify a one to three byte prefix. Expanded are:\n0     FSALINK  A    pointer to next FSA area or zero for last entry\n      FSAID    CL4  name of this work area (SERV for @SERVICE, PRTW,\n                    PRT1-8 for @PRINTER areas, etc.)\n      FSASPLEN X/AL3  Sub-pool and GETMAIN length for this area\n      FSATCB   A    TCB address of owner\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     188\n1                        Technical Guide to System Modifications\n          Macro Description                                              IHADVCT\n-         3.1.15   IHADVCT\n+         3.1.15   IHADVCT\n+                  _______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | none | IHADVCT  | \u00ddDSECT=YES|NO\u00a8                                  |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro  is a modification  of the IBM  supplied macro of  the same\n          name, upgraded to expand correctly both for SVS and MVS/SP1.3.\n0         Note that the  SP version contains a half-word  modulus value appended\n          to the RPS  section.  In earlier releases,  the modulus  was stored in\n          DVCOVHD.\n0         This macro  also contains both old  and new names for  changed fields,\n          for instance it declares both DVCDSECT and DVCSECTD.\n0         When  DSECT=NO  is specified,   then  the  DVCTI prefix  expansion  is\n          skipped, and the mapping begins with the DVCCYL field (device entry).\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                            189\n1                   Technical Guide to System Modifications\n     INC                                                  Macro Description\n-    3.1.16   INC\n+    3.1.16   INC\n+             ___\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | INC      | word-address \u00dd,INC=\u00a8 \u00dd,WORK=r0\u00a8                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    The INC macro permits convenient manipulation of full-word counters.\n0    WORK=  specifies a  temporary work  register.   When the  word-address\n     (first parameter)  is  supplied in register form,   then the registers\n     must  be distinct  unless  the INC  operand  is  also specified,   and\n     specifies either -1 or a register.\n0    INC= may specify an increment in self-defining or (register)  form.  A\n     leading minus sign  designates a decrementation,  and  will be honored\n     correctly,   including  the   case  when  it  precedes   a  (register)\n     specification.\n0    Examples:\n      A INC   maxnum      B INC   (R0),INC=-(R2)   C INC   maxcnt,INC=(R2)\n      A LA    R0,1        B SR    R0,R2            C L     R0,maxcnt\n        A     R0,maxnum                              AR    R0,R2\n        ST    R0,maxnum                              ST    R0,maxcnt\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    190\n1                        Technical Guide to System Modifications\n          Macro Description                                                 INCH\n-         3.1.17   INCH\n+         3.1.17   INCH\n+                  ____\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | INCH     | word-address \u00dd,INC=\u00a8 \u00dd,WORK=r0\u00a8                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         The INCH macro permits convenient manipulation of half-word counters.\n0         WORK=  specifies a  temporary work  register.   When the  word-address\n          (first parameter)  is  supplied in register form,   then the registers\n          must  be distinct  unless  the INC  operand  is  also specified,   and\n          specifies either -1 or a register.\n0         INC= may specify an increment in self-defining or (register)  form.  A\n          leading minus sign  designates a decrementation,  and  will be honored\n          correctly,   including  the   case  when  it  precedes   a  (register)\n          specification.\n0         Examples:\n           A INCH  maxnum     B INCH  (R0),INC=-(R2)   C INCH  maxcnt,INC=(R2)\n           A LA    R0,1       B SR    R0,R2            C LH    R0,maxcnt\n             AH    R0,maxnum                             AR    R0,R2\n             STH   R0,maxnum                             STH   R0,maxcnt\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                                                            191\n1                   Technical Guide to System Modifications\n     INPCLOSE                                             Macro Description\n-    3.1.18   INPCLOSE\n+    3.1.18   INPCLOSE\n+             ________\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | INPCLOSE | omitted|TCLOSE \u00dd,DEV=list\u00a8                      |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    The INPCLOSE macro calls the @INPREAD (input read) function to perform\n     a temporary (with operand TCLOSE) or permanent CLOSE (omitted operand)\n     of one  or more  files.  It operates  on file  1 unless  DEV specifies\n     another number, or a list of numbers.\n-    3.1.19   INPCOM\n+    3.1.19   INPCOM\n+             ______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | INPCOM   | b0,b1,fn,a0,a1,DEV                              |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This is an internal macro called by INPxxxx macros other than INPWORK.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     192\n1                        Technical Guide to System Modifications\n          Macro Description                                               INPGET\n-         3.1.20   INPGET\n+         3.1.20   INPGET\n+                  ______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | INPGET   |                                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro invokes @INPREAD to get  another record.   A return code is\n          placed into register 15;  a code of 4 signals an end-file,  and a code\n          of 8 signals a logic or I/O error.   For a good return, the address of\n          the record is in R1, the length in R0, and a zero code in R15.\n-         3.1.21   INPKEEP\n+         3.1.21   INPKEEP\n+                  _______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | INPKEEP  |                                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro  invokes @INPREAD to signal  that the last  record returned\n          (on a prior INPGET) should be returned again on the next INPGET.  Note\n          that this is a re-read function,  not  a backspace.  If used more than\n          once, no additional processing takes place.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             193\n1                   Technical Guide to System Modifications\n     INPOPEN                                              Macro Description\n-    3.1.22   INPOPEN\n+    3.1.22   INPOPEN\n+             _______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | INPOPEN  | work-addr \u00dd,DEV=number\u00a8 \u00dd,OPT=\u00a8                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This macro calls @INPREAD to open a  file defined by the INPWORK macro\n     with label \"work-addr\".  DEV= specifies the  logical file number to be\n     used, with a default of 1. Subsequent INPxxxx macros will use the file\n     number to correlate requests.\n0    OPT= specifies one or more (sub-list form) processing options:\n0    ABE or ABEND  requests an abnormal termination,  with  dump,  and user\n     code 2540,   when the  requested file  cannot be  opened.   Note  that\n     another abend  may occur in @DCBEXIT  when the DCB parameters  are not\n     resolvable.   Other   than  this,   in   the  absence  of   the  ABEND\n     specification, INPOPEN will return a value of 8,  12 or 16 to indicate\n     an error.  The abend  would be taken only for the  level 8 error.  The\n     others are  issued before the OPEN  code gets control (bad  work area,\n     duplicate file number, etc.).\n0    DUMMY signals  that a DD  DUMMY will not cause  an error;  it  will be\n     treated as an empty file.\n0    NOWTO requests that a missing primary DDNAME, or a DD DUMMY,  will not\n     cause a WTO/WTP message to the  user.  OPEN processing is not affected\n     by this option.\n0    JFCB  or  OPENJ indicates  that  a  pre-read or  pre-constructed  JFCB\n     address has  been supplied  in the  INPWORK area.    This function  is\n     generally used for re-opening a PDS  with modified member names.  This\n     option may cause problems when used without additional checks;  it may\n     cause problems with concatenated files.\n-\n-\n-\n-\n-\n-\n-\n     194\n1                        Technical Guide to System Modifications\n          Macro Description                                              INPWORK\n-         3.1.23   INPWORK\n+         3.1.23   INPWORK\n+                  _______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | INPWORK  | ddname,alt-ddname EDIT=0 JFCB=                  |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         The INPWORK macro expands a refreshable,  re-entrant control block for\n          use  by the  @INPREAD routine.   While  it is  intended primarily  for\n          card-format files, it will work with record lengths up to 500 bytes.\n0         The \"ddname\" field  specifies a primary DD name,   the \"alt-ddname\" an\n          alternate name to  be used when the  first DD is missing  or defines a\n          DUMMY.  The OPT=DUMMY operand is meaningful only when the alternate DD\n          is also not usable.\n0         Both like and unlike concatenation of files is accepted,  subject only\n          to the restriction  that the largest blocksize  be declared explicitly\n          on the first  DD of the concatenation  whenever a file with  a smaller\n          blocksize precedes the file with the largest size.\n0         WIDTH specifies the  desired width of the records.   @INPREAD will pad\n          each record  to this width,  using  the character defined by  the FILL\n          keyword as the padding byte.  When WIDTH is set to zero,  then records\n          are passed back as  read,  with the current length passed  back in R0.\n          This mode of  operation is somewhat faster,  since  short records need\n          not be moved to a work area for padding.\n0         EODAD=1 specifies an end-file exit address.  This is taken just as the\n          exit defined by DCBEODAD, except that an address of 0 is also taken as\n          a null exit.  EODAD need not be used if the user tests for return code\n          4 after each input request.\n0         EDIT=0  specifies optional  processing  flags with  the  same use  and\n          meaning as those  defined for WCMFG1 in the SERVCOMP  workarea used by\n          the @SERVICE  decompression function WDCOM.   @INPREAD uses  WDCOM for\n          WYLBUR compressed (edit-format) files,  and honors the 'TSO' flags for\n          variable  length  (RECFM=Vxx)   files relating  to  the  presence  and\n          location of sequence numbers.\n-\n-\n-\n-\n-\n-                                                                            195\n1                   Technical Guide to System Modifications\n     LAT                                                  Macro Description\n-    3.1.24   LAT\n+    3.1.24   LAT\n+             ___\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | LAT      | reg,addr,\u00ddbz\u00a8,\u00ddbnz\u00a8 \u00dd,LA=\u00bbnone|FW|0|RX\u00ba\u00a8        |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    LAT is intended to load the low  three bytes of a four-byte field into\n     a register. The LA= parameter controls expansion :\n0    LA= (omitted) expands                           ICM reg,7,1+addr\n0    LA=FW loads all four bytes                      ICM reg,15,addr\n0    LA=0 zeroes the register prior to the ICM       SLR reg,reg\n      (use LA=RX if \"addr\" depends on \"reg\")         ICM reg,7,1+addr\n0    LA=RX indicates that the \"addr\" parameter       LA  reg,addr\n      may be an RX expression.                       ICM reg,7,1(reg)\n0    Optional  parameters  \"bz\"  and \"bnz\"  specify  registers  or  address\n     expressions  which  will  be  the target  of  a  generated  branch  on\n     condition.\n0    Example :\n0     name   LAT   R3,TCBTCB,,DOMORE   generates :\n0     name   ICM   R3,7,1+TCBTCB\n             BNZ   DOMORE\n-\n-\n-\n-\n-\n-\n-\n-\n-    196\n1                        Technical Guide to System Modifications\n          Macro Description                                              LOADLPA\n-         3.1.25   LOADLPA\n+         3.1.25   LOADLPA\n+                  _______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | LOADLPA  | \u00bbEP=name|EPLOC=name-addr\u00ba       \u00dd,DCB=dcb-addr\u00a8 |\n           |      |          | \u00ddMLPA=\u00bbYES|NO\u00ba\u00a8                                 |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro is  used to locate an  LPA resident module,  or  to LOAD it\n          when it is not in LPA.  This is  used by SERVINIT to load the @SERVICE\n          routine. The user must supply a CVT (macro CVT) and CDE (macro IHACDE)\n          mapping in the same assembly.\n0         EP and  EPLOC have  the same meaning  as on  the OS  LOAD instruction.\n          DCB= may be specified, but is ignored for the LPA search.\n0         The code searches the MLPA chain,   unless MLPA=NO is requested,  then\n          uses the  CVTQLPAQ lookup  routine to  test the  PLPA.   When  neither\n          search is successfull, an OS LOAD is issued.\n0         After executing the expanded code, register 0 will contain zero if the\n          module was not found, the module address if it was loaded,  or the LPA\n          address and a high X'80' bit.  Registers  14 through 1 are used by the\n          code.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                                                            197\n1                   Technical Guide to System Modifications\n     LOOKLPA                                              Macro Description\n-    3.1.26   LOOKLPA\n+    3.1.26   LOOKLPA\n+             _______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | LOOKLPA  | \u00bbEP=name|EPLOC=name-addr\u00ba                       |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This function invokes the CVT resident LPA lookup routine.  Unlike the\n     LOADLPA function, an MLPA search is not made.\n0    On return,  R0  contains 0 if the  module was not found,   or else the\n     entry address of the module.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    198\n1                        Technical Guide to System Modifications\n          Macro Description                                              MACPARM\n-         3.1.27   MACPARM\n+         3.1.27   MACPARM\n+                  _______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | MACPARM  | expr,addr     \u00dd,OP=LA\u00a8    \u00dd,OPR=LR\u00a8     \u00dd,OPM=\u00a8 |\n           |      |          | \u00dd,OPMR=LNR\u00a8 \u00dd,MODE=\u00bbnone|EQU|ONE|REV\u00ba\u00a8          |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         MACPARM is used to expand code inside other macros.  The intended name\n          field is set into global &MACPLAB;  the  name field on MACPARM is used\n          only if &MACPLAB is null.  If code  is expanded,  &MACPLAB is set to a\n          null string.\n0         MODE=ONE requests expansion  of a single operand  instruction.  \"expr\"\n          may be omitted (no code expanded), a register value, or an expression.\n          The code expanded will be OP expr  or OPR expr (register form).\n0         With a MODE value other than ONE, \"expr\" must be a register, either in\n          nn  or Rnn  form,  \"addr\"  may be  any valid  expression,  or  another\n          register specification (either (nn) or (Rnn)).\n0         With  MODE  omitted,   if  the  \"expr\"  register  matches  a  register\n          specification for \"addr\",  no code  is expanded.  MODE=EQU forces such\n          expansion, and is used with OPR=LTR,  and similar requests.   If there\n          is no  match,  the code  expands as  OPR expr,addr unless  MODE=REV is\n          specified;  reverse mode expands OPR addr,expr.   When \"addr\" is not a\n          register expression, the code expands as  OP expr,addr.  For all modes\n          other than ONE,  the value specified  for the \"addr\" operand may begin\n          with a minus sign.   In this case the register form  of the expansions\n          will use the OPMR code;  for an expression the code will expand OPM if\n          it was specified.  If OPM was not  specified,  the code expands the OP\n          instruction followed by LNR.\n0         For example, given the definition of SAMPLE :\n0                 MACRO\n           &NAME  SAMPLE &R,&A,&BZ\n                  GBLC  &MACPLAB\n           &MACPLAB SETC '&NAME'\n                  MACPARM R0,&R,OP=L\n                  MACPARM R0,&A,OP=S,OPR=SR,OPM=A,OPMR=AR\n                  MACPARM &BZ,OP=BZ,OPR=BZR,MODE=ONE\n                  MACPARM R0,&R,OP=ST,MODE=REV\n                  MEND\n0         the following code would be expanded :\n0          A      SAMPLE (5),XYZ,ZERO\n           A      LR    R0,R5\n                  S     R0,XYZ\n                  BZ    ZERO\n                  LR    R5,R0\n0         or :\n-                                                                            199\n1                   Technical Guide to System Modifications\n     MACPARM                                              Macro Description\n-     B      SAMPLE VAL,(4)\n      B      L     R0,VAL\n             SR    R0,R4\n             ST    R0,VAL\n0    or :\n0     C     SAMPLE ((X+4)),-(R4)\n      C     L     R0,((X+4))\n            AR    R0,R4\n            ST    R0,((X+4))\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    200\n1                        Technical Guide to System Modifications\n          Macro Description                                             MAPEXTNT\n-         3.1.28   MAPEXTNT\n+         3.1.28   MAPEXTNT\n+                  ________\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | MAPEXTNT | \u00ddDSECT=\u00bbYES|NO\u00ba\u00a8                                |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro  maps the  contents of a  single extent in  a format  1 and\n          format 3 DSCB.\n0         When a \"name\" field is supplied,  it  is used as a label.  The default\n          name is MAPEXTNT.  DSECT=NO causes a DS  0H to be expanded. The fields\n          are:\n0          XTWHOLE 0XL10  label for MVC/CLC use - entire extent\n           XTTYPE  X      extent type descripter byte\n            XTTTRK    X'01' track aligned extent\n            XTTLABEL  X'40' user-label extent\n            XTTSPLIT  X'80' split-cylinder allocation\n            XTTCYL    X'81' cylinder aligned extent\n           XTSEQ   X      extent sequence number (0-15)\n           XTLOCYL H      beginning cylinder address\n           XTLOTRK H      beginning track address\n           XTHICYL H      ending cylinder address\n           XTHITRK H      ending track address\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                            201\n1                   Technical Guide to System Modifications\n     MAPINP                                               Macro Description\n-    3.1.29   MAPINP\n+    3.1.29   MAPINP\n+             ______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | MAPINP   | \u00ddPREFIX=pn\u00a8 \u00dd,DSECT=\u00bbYES|NO\u00ba\u00a8                   |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This macro  maps the contents  of the  expansion of an  INPWORK macro.\n     The label, in the absence of a user supplied one,  is constructed from\n     the prefix and 'PARM', i.e., PNPARM for the default prefix.\n0    PREFIX= specifies an optional one to two byte prefix.\n0    DSECT= may be used to request or suppress expansion of a DSECT card.\n      PNDDNAM  DC   CL8' '   Primary DDNAME\n      PNDDALT  DC   CL8' '   Alternate DDNAME\n      PNEODAD  DC   A(1)     EODAD or 0,1 if none\n               DC   A(0)          Reserved\n      PNWIDTH  DC   H'0'     Line width for truncation/padding\n               DC   H'0'          Reserved\n      PNPRFG   DC   X'00'    Option flags\n      PNFGABE  EQU  X'80'      ABEND if OPEN fails/DD missing\n      PNFGDUM  EQU  X'40'      Allow DD DUMMY (else ABEND)\n      PNFGNWTO EQU  X'20'      Suppress WTO if bad OPEN and no ABEND\n      PNFGJFCB EQU  X'10'      JFCB address present (long expansion)\n      PNFILL   DC   X'00'    Fill byte for padded records\n      PNEDIT   DC   X'80'    Edit options (match WCMFG1)\n      PNFESET  EQU  X'80'      Option bits set (else use defaults)\n      PNFEOSI  EQU  X'40'      OSI line number format\n      PNFEHWD  EQU  X'20'      Half-word line numbers\n      PNFEINT  EQU  X'10'      Create integer line numbers (N/A)\n      PNFEEDT  EQU  X'08'      Create edit line numbers 4C.3C (N/A)\n      PNFETSO  EQU  X'04'      Line numbers left-adjusted in RECFM=V\n      PNFENB#  EQU  X'01'      Insert line numbers even if non-blank\n               DC   X'00'         Reserved\n      PNJFCB   DC   0A(0)    Optional JFCB address for OPENJ\n-\n-\n-\n-\n-\n-\n-    202\n1                        Technical Guide to System Modifications\n          Macro Description                                               MAPPDS\n-         3.1.30   MAPPDS\n+         3.1.30   MAPPDS\n+                  ______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | MAPPDS   | \u00ddPDSBLDL=\u00bbNO|YES\u00ba\u00a8                              |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro  is used to expand  special directory entry  mappings.   It\n          should be placed immediately following an IHAPDS macro to redefine the\n          user portion of  the directory entry.  Currently  expanded are entries\n          for IBM's SPF product,  and  the Cornell University's IEBUPDTX utility\n          program.\n           *       User data for SPF entries\n           *\n                    ORG   PDS2USRD      Redefine user data\n           SPFVERL  DS    X             Version number\n           SPFMODL  DS    X             Modification level\n                    DS    XL2             Reserved (zeroes)\n           SPFCRTDT DS    PL4           Creation date\n           SPFMODDT DS    PL4           Modification date\n           SPFMODTM DS    XL2           Modification time (packed, no sign)\n           SPFCURLN DS    XL2           Current line count\n           SPFINILN DS    XL2           Initial line count\n           SPFMODLN DS    XL2           Number modified\n           SPFUID   DS    CL7           User Id\n                    DS    C' '            Reserved (blank)\n                    DS    CL2' '          Reserved (blank)\n           SPFUDLEN EQU   (*-PDS2USRD+1)/2   Half-word length of entry\n           *        User data portion for IEBUPDTX chained entries\n           *\n                    ORG   PDS2USRD\n           DTXSSI   DS    XL4           SSI or FF200000\n           DTXMODNM DS    CL8           Production member name\n           DTXID    DS    CL2           Library Id\n           DTXMODNO DS    PL2           Module number\n           DTXVER   DS    PL2           Version number\n           DTXUDLEN EQU   (*-PDS2USRD+1)/2   Half-word length of short entry\n           DTXTIMES DS    XL4           (Optional) time stamp YYDDDHHF\n           DTXUDLTM EQU   (*-PDS2USRD+1)/2   Half-word length of special entry\n                    ORG   ,\n-\n-\n-\n-\n-\n0                                                                            203\n1                   Technical Guide to System Modifications\n     MAPPRT                                               Macro Description\n-    3.1.31   MAPPRT\n+    3.1.31   MAPPRT\n+             ______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | MAPPRT   | \u00ddPREFIX=pu\u00a8 \u00dd,DSECT=\u00bbYES|NO\u00ba\u00a8                   |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This macro expands a mapping for PRTWORK and PUNWORK work areas.  When\n     the name field is omitted, a label is create from the specified prefix\n     and 'PARM'.\n      PUDDNAM  DC   CL8' '        Primary DDNAME\n      PUDDALT  DC   CL8' '        Alternate DDNAME\n      PULPP    DC   H'0'          Lines per page\n      PUFILL   DC   X'0'          Translate table unprintable character\n      PUWIDTH  DC   X'0'          Line width for truncation\n      PUTIT#   DC   X'00'         Number of titles\n      PUFOOT#  DC   X'00'         Number of footers\n      PUCCFG   DC   X'00'         Global carriage control flag\n      PUPRFG   DC   X'00'         Option flags\n      PUPUNCH  EQU  X'80'           Punch file\n      PUPGPAGE EQU  X'01'           Page number feed-back\n      *        Page numbers present only if user requested feed-back\n      PUPAGE   DC   H'0'          Current page number\n      PUSPAGE  DC   H'0'          Page number since last TITLE request\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-    204\n1                        Technical Guide to System Modifications\n          Macro Description                                             MAPPRTWK\n-         3.1.32   MAPPRTWK\n+         3.1.32   MAPPRTWK\n+                  ________\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | MAPPRTWK | \u00ddPREFIX=pw\u00a8 \u00dd,WIDTH=\u00a8                           |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro  maps the work  area used  by the @PRINTER  routine.   This\n          mapping may be useful for FD user-exit routines.\n           PWLINK   DS   F             Link to next GETMAINed area\n           PWID     DS   C'PRTn'       Id of print file 'n'\n           PWSPLEN  DS   F             Subpool/length of this area\n           PWTCB    DS   A             Address of owning TCB\n           PWDCB@   DS   X'BF',AL3(PWDCB)  DCB pointer and OPEN list\n           PWPU@    DS   A             Address of user's OPEN work area\n           PWTRAN   DC   F'0'          Address of translate table or 0\n           PWDDNAM  DS   CL8           DDNAME\n           PWUCS    DS   CL4           UCS name\n           PWFCB    DS   CL4           FCB name\n           PWLSTWRK DS   0XL14         Work area for each FD entry\n           PWLSTLEN DS   A             Field length\n           PWLSTLTX DS   A             Item length\n           PWLSTADD DS   A             Item address\n           PWLSTDAT DS   X             Data type\n           PWCUROPT DS   X             Current processing options\n           PWPREOPT DS   X             Prior options\n           PWLSTEDT DS   X             Edit options\n           PWBUFNXT DS   A             Address of next byte\n           PWSCRCUR DS   H             Bytes used in current line\n           PWFLAG   DS   X             Processing flag\n           PWFPUN   EQU  X'80' =PUPUNCH   This is a punch file\n           PWFAKE   EQU  X'20'         In-storage access method\n           PWFCON   EQU  X'10'         Output routed to console\n           PWFHEAD  EQU  X'04'         Title printed on this page\n           PWFPRINT EQU  X'02'         Buffer contains text\n           PWFGPAGE EQU  X'01' =PUPGPAGE   User page # feed-bacl option\n           PWFILL   DC   AL1(0)        Unprintable character replacement\n           PWDCB    DCB  DDNAME=ANY,DSORG=PS,MACRF=PM,EROPT=ACC,     *\n                          RECFM=VBSA,LRECL=137,EXLST=PWEXLIST\n           PWEXLIST DC   0A(0),X'87',AL3(0),A(0,0) +JFCB+@DCBEXIT\n           PWTOPPG  DC   F'0'          Edit len/address for page number\n           PWTOPPS  DC   F'0'             ditto for sub-page\n           PWTOPDT  DC   F'0'             ditto for date\n           PWTOPTM  DC   F'0'             and time\n           PWBOTPG  DC   F'0'          Edit len/address for page number\n           PWBOTPS  DC   F'0'             ditto for sub-page\n           PWBOTDT  DC   F'0'             ditto for date\n           PWBOTTM  DC   F'0'             and time\n           PWCURLN  DC   H'-1'         Line on current page\n           PWMAXLN  DC   H'60'         Maximum lines per page (incl. titles)\n           PWWIDTH  DC   H'0'          Data width for truncation\n           PWTIT#   DC   H'0'          Number of title lines\n           PWFOOT#  DC   H'0'          Number of footer lines\n           PWPAGE   DC   H'0'          Current page number\n           PWSPAGE  DC   H'0'          Page since last title change\n0                                                                            205\n1                   Technical Guide to System Modifications\n     MAPPRTWK                                             Macro Description\n-     PWTRTAB  DC   256AL1(0)     Translate table\n      PWCCSAV  DC   C' '          Save PWRECCC over PUT\n      PWBUFSP  DC   AL1(0)        Sub-pool of GETPOOL request\n      PWVCON   DC   F'0'          V-format record header\n      PWRECCC  DC   C' '          Carriage control\n               AIF   ('&WIDTH' NE '').HAVEW\n      PWREC    EQU  *             Data record\n               AGO   .MEND         Truncate the mapping\n      .HAVEW   ANOP  ,\n      PWREC    DC   CL(&WIDTH)' '   Text record\n               DS    0F\n      PWMCREC  DC   CL((&WIDTH+5+3)/4*4)' '   Machine control save record\n      PWMCC    EQU  PWMCREC+4,1,C'C'        Carriage control\n               DS    0F\n      PWSIZE  EQU   *-&DS         Length of fixed area\n      PWULOP   DC   CL((&WIDTH+5+3)/4*4)' '   Underline/overprint rcd\n               DS    0F\n      PWTIT1   DC   CL((&WIDTH+5+3)/4*4)' '   1-14 Title/footer records\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    206\n1                        Technical Guide to System Modifications\n          Macro Description                                                 MOTE\n-         3.1.33   MOTE\n+         3.1.33   MOTE\n+                  ____\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | none | MOTE     | \u00ddlevel\u00a8,\"'text'\"                                |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This macro is supplied to permit an MNOTE request from open code.  The\n          level and text operands are defined as for MNOTE.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                                                            207\n1                   Technical Guide to System Modifications\n     MTITL                                                Macro Description\n-    3.1.34   MTITL\n+    3.1.34   MTITL\n+             _____\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | none | MTITL    | 'string' \u00dd,LEN=40\u00a8                              |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    This macro sets the left half of a title,  usually the program name or\n     description.  A subsequent STITL macro will  set the right halt of the\n     title and generate a TITLE card.\n0    LEN may be specified to set the length  of the left half of the title.\n     When  the specified  text  string is  shorter,  it  is  padded to  the\n     specified length.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     208\n1                        Technical Guide to System Modifications\n          Macro Description                                             OPTIONGB\n-         3.1.35   OPTIONGB\n+         3.1.35   OPTIONGB\n+                  ________\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | none | COPY     | OPTIONGB                                        |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n0         This member contains the GBLA, GBLB and GBLC definitions for variables\n          set by the SYSPARM macro.  It is commonly used, after a TITLE card and\n          macro definitions, at the beginning of an assembly.  Note that SYSPARM\n          does  not  work in  assemblies  also  using  the JES2  $SYSPARM  macro\n          explicitly or implicitly via $HASPCBS.\n           GBLA  &SYSPRM#            Number of SYSPARM tokens\n           GBLA  &SVCJFCB            0 or MODJFCB SVC number\n           GBLA  &SVC@SVC            0 or @SERVICE routine SVC\n           GBLA  &SVCTMSX,&SVCTMSY   0 or UCC-1 (TMS) SVC X/Y numbers\n           GBLB  &BUGBEAR      (was &DEBUG - same as HASP)\n           GBLB  &MVS                1 if OS/VS2 MVS\n           GBLB  &MVSSP              1 if OS/VS2 MVS/SP\n           GBLB  &MVSXA              1 if OS/VS2 MVS/XA (SP2)\n           GBLB  &SVS                1 if OS/VS2 SVS\n           GBLB  &VS1                1 if OS/VS1\n           GBLC  &CPU                360/370/470\n           GBLC  &LOCAL              Installation acronym/name\n           GBLC  &MODEL              360/370/470\n           GBLC  &SPVEREL            MVS/SP Version/release/level\n           GBLC  &SYSPRMS(10)        SYSPARM tokens\n           GBLC  &PRTMAC             GEN option for local mappings\n           GBLC  &PRTSOR             GEN option for source code\n           GBLC  &PRTSYS             GEN option for system mappings\n           GBLC  &SYSTEM             MVT/SVS/MVS\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                            209\n1                   Technical Guide to System Modifications\n     ST@                                                  Macro Description\n-    3.1.36   ST@\n+    3.1.36   ST@\n+             ___\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | ST@      | reg,addr \u00dd,MVI=\u00a8                                |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n0    ST@ stores the low three bytes of a register in the low three bytes of\n     the four-byte address specified by \"addr\".\n0    MVI= may specify  a self-defining term,  or a register.   The value is\n     placed into the high byte of \"addr\".\n0    Examples:\n0             ST@   R3,DWCWDATA,MVI=6  (set CCW address and read opcode)\n      expands STCM  R3,7,1+DWCWDATA\n              MVI   DWCWDATA,6\n0             ST@   R3,(R4),MVI=(R5)\n      expands STCM  R3,7,1(R4)\n              STC   R5,0(R4)\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    210\n1                        Technical Guide to System Modifications\n          Macro Description                                                TRTAB\n-         3.1.37   TRTAB\n+         3.1.37   TRTAB\n+                  _____\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | TRTAB    | CODE=\u00bb2260|3270|PN|TN\u00ba,\u00ddFILL=C'.'\u00a8,             |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n-\n          3.1.38   TRTAB\n+         3.1.38   TRTAB\n+                  _____\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | TRTAB    | TYPE=\u00bbATOE\u00dd,OPT=SHORT\u00a8|ETOA|ITOE|ETOI\u00ba          |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n-         TRTAB is used to expand tables other than the standard translations in\n          the work area. The name field is required.\n0         CODE= specifies the type of device or  print train for which the basic\n          code is to be expanded.\n0         FILL= specifies a self-defining term (one byte) which will be used for\n          untranslatable characters.\n0         OPT= specifies additional options.\n           FOLD   folds lower to upper case\n           UP     upper case only; lower case replaced by FILL character.\n           LOW    leaves lower case data even though not supported (PN, 2260)\n           SVC    converts X'C0' to C'+'\n           ERR    converts X'3F' to C'\"' (2260 error symbol)\n-         TRTAB with the TYPE keyword  expands IBM compatible tables translating\n          EBCDIC to 7-bit  ASCII code (ETOA,  and  back with ATOE),  as  well as\n          EBCDIC to  8-bit ISCII code (ETOI,   back with ITOE).   Note  that the\n          ISCII translation is reversible,  the ASCII is not.   OPT=SHORT may be\n          used  with ATOE  to generate  only  the valid  codes;  two  successive\n          ATOE,OPT=SHORT  requests could  be used  to translate  ASCII with  and\n          without parity bits.\n-\n-\n-\n-\n-\n0                                                                            211\n1                   Technical Guide to System Modifications\n     Macro description\n-    3.2   FIELD DESCRIPTOR MACROS\n+    3.2   FIELD DESCRIPTOR MACROS\n+          _____ __________ ______\n0    The Field Descriptor (FD)  macros are used to provide data on a field,\n     rather than record, level to the print routine @PRINTER,  and the 3270\n     series  CRT support  routines (proprietary,   not distributed).    For\n     @PRINTER  service,  extended  high-lighting,   color,   and other  CRT\n     capabilities  are ignored,   with  the  exception of  underlining  and\n     intense display. These are supported for print files declared with ASA\n     or machine control characters (RECFM=xxA or xxM). Note that as part of\n     the CRT  simulation,  an  attribute change  always takes  a separating\n     space (attribute byte) even on the printer.   The FD macro will expand\n     a  shorter entry  when no  3278/3279  options are  used.  This  output\n     matches  that  produced by  the  FDPRT  macro,  which  treats  3278/79\n     requests as comments.\n0    All FD macros expand flags, values and addresses. Addresses are always\n     in S format  (base/displacement),  hence the registers  defined at the\n     point the FD macros are invoked must contain the expected value. FDOPT\n     and  FD macros  are  not  modified (except  by  the  user);  the  FDIN\n     expansions are always modified and must  not be placed in refreshable,\n     re-entrant storage.   FDIN  is not supported by  the @PRINTER routine.\n     Note that  FD entries expand  to different lengths;   hence references\n     should be made only after testing the entry type.  The contents of the\n     entries is mapped by macro FDSECT;   it expands all entry types.  Only\n     the first two bytes appear in all entries; the first byte contains the\n     offset to the next FD entry in the list,  the second byte contains the\n     FD type.  Note that all types have a NOP bit,  which causes them to be\n     ignored. The basic types are FD (output data description), FDIN (input\n     field), FDOPT (screen options),  and FDGOTO (transfers to another FD).\n     All FD chains must be terminated by  an ending FD entry specified with\n     FD *END.  FDIN must  be used for output fields which  are intended for\n     light-pen selection to provide feedback when the field is selected.\n0    Common options :\n0    SKIP - the SKIP option causes cursor movement  by field keys to ignore\n              the specified field.  This is  the default for output fields.\n              It  may be  used  for  input fields  which  are  meant to  be\n              light-pen detectable only.\n     PROTECT - by default,  output fields are  protected,  input fields are\n              not.  PROTECT  may be specified  to set protection,   but not\n              SKIP.\n     NUMERIC - hardware support permitting, NUMERIC or NUM will set a field\n              to numeric  input only.  Note  that the hardware  permits the\n              terminal user to  override this;  hence numeric  input is not\n              guaranteed; valid on FDIN only.\n     INTENSE - by default, fields are displayed at normal screen intensity.\n              INTENSE  or  INT  may be  specified  to  produce  intensified\n              fields.  Note that INTENSE fields are light-pen detectable by\n              default.\n     DETECT - all fields  may be  specified for  light-pen selection  using\n              DETECT or LP.   For detection,  field data must  start with a\n              blank (LP attention),  question mark (selection),  or at sign\n-    212\n1                        Technical Guide to System Modifications\n          Macro description\n-                  (3278/79  LP   enter).   DETECT  and  INTENSE   are  mutually\n                   exclusive.\n          NONDISP - NDISP  and NONDISP  prevent user  data keyed  into an  input\n                   field from being displayed on the screen.\n          DFLT - establishes default options,  and may  be used to document that\n                   defaults are in use.\n          PREVIOUS or PREV - use the options from  the last executed FD entry in\n                   the  current  chain  (acts  as DFLT  if  it  appears  in  the\n                   beginning of a chain). Only the options are used, type (input\n                   or output) is not.\n0         On  3278  and 3279  CRTs  with  the extended  high-lighting  facility,\n          additional options  are supported;   these specifications  are ignored\n          unless the hardware supports them :\n0         UNDER - causes the field to be underlined.\n          BLINK - the field will blink on and off.\n          REVERSE - the  background  and  character  color   in  the  field  are\n                   reversed.   According  to the hardware  manual,  only  one of\n                   these three  options may be used  for any one field.   The FD\n                   expansions do not check  (at this time - I need  a CRT to try\n                   it out on, first).\n0         On 3279 CRTs, the FD may be used to specify color.  Two types of color\n          support are available - basic and full. In basic mode, four colors are\n          available,  and  are assigned  on the  basis of  the field  attributes\n          (protected/unprotected, intense/normal).   With full color support,  7\n          color specifications are honored.   They are BLUE, RED,  PINK,  GREEN,\n          TURQ(qoise), YELLOW and WHITE.   By default, GOSSIP will use the basic\n          color scheme.\n0         Extended 3278/3279 options (graphics,   multi-color characters,  etc.)\n          are not  supported by the GOSSIP  control code,  although they  may be\n          used by the caller. The presence of additional features is established\n          during CRT initialization,   and is saved in encoded form  in the work\n          area.\n0         Editing options :\n0         NL and NEWLINE - force the  entry to start on a new  line.   Note that\n                 the entry may start  on the second byte of the  line if a Start\n                 Field order must be inserted.\n          DEB  - removes both  leading and trailing  blanks and hex  zeroes from\n                 the data; by default, the remaining text is left-justified.\n          DEBL - only strips leading blanks and hex zeroes.\n          DEBR - only removes trailing blanks and hex zeroes.\n          DEBZ - removes leading EBCDIC zeroes from a  string (a leading sign is\n                 supported and processed correctly).\n          RADJ - right-justifies data.\n          PAD  - the  field  will  be  preceded and  followed  by  a  blank  (or\n                 undisplayed SF  attribute byte).  By  default,  fields  are not\n                 separated unless the options force presence of an SF (such as a\n                 transition  from input  to output,   change  in intensity,   or\n-                                                                            213\n1                   Technical Guide to System Modifications\n     Macro description\n-           similar;  color and extended high-lighting changes do not force\n            such a change).\n     PADL - field to be  separated by a leading space;  this  option may be\n            ignored if the  item is the first  on a display line  and an SF\n            need not precede it on that line.\n     PADR - field is  to be  separated by  a trailing  space;  this  may be\n            ignored for the last field on a line.\n     UPPER - the field  (on input and output)   is converted to  upper case\n            regardless of the user's current case specification.   UPPER is\n            assumed by the code for non-character fields.\n     NULL - this  option  causes leading  and  trailing  hex zeroes  to  be\n            removed  from a  field (on  output)  independently  of the  DEB\n            options.  In addition, when the text length is shorter than the\n            field length,  the  hardware erases the remainder  of the field\n            (EUA order).  Without NULL, input fields are padded with blanks\n            (RA order).  NULL enables use of the INSERT key;  without NULL,\n            the user would need to DELETE  prior to insertion.  NULL should\n            not be used when the output (and input) field contains position\n            dependent data.\n0    Fields  specified  on FDIN  macros  are  always treated  as  character\n     fields, regardless of the type specification.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     214\n1                        Technical Guide to System Modifications\n          Macro Description                                                   FD\n-         3.2.1   FD\n+         3.2.1   FD\n+                 __\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | FD       | value,length,type,options \u00dd,LEN=\u00a8               |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n-         The FD macro defines an output field.  All options described under the\n          FD introductory description are valid;  but input related options will\n          be ignored.\n0         Supported character types :\n0         Character  literal -  the  first field  specifies  a character  string\n                delimited by  apostrophes;  embedded apostrophes  and ampersands\n                must  be  doubled  as per  normal  assembler  convention.    The\n                'length' and 'type'  fields are ignored;  the  second positional\n                operand will be assumed to be  an option.   Note that the string\n                must start with the apostrophe; the form C' is not supported.\n0         All  others  - the  first  operand  specifies  a  variable name  or  a\n          relocatable expression of the address.    The 'length' field specifies\n          the length  of the  source field;  if  omitted,  the  assembler length\n          attribute L' must be valid.\n0         The 'type' operand specifies the input data type:\n0         CHAR (default if omitted)  - character string which will be translated\n                 to terminal  code.  Embedded  device orders  and other  special\n                 characters will appear as periods.\n          CON  - the field contains only terminal  control characters and should\n                 not be  modified;  it is translated  to terminal code  with all\n                 orders and special codes valid.\n          ASIS - the field contains data (and orders) already in the code of the\n                 device. Not supported at present.\n          ADDR - the  address specified  by the  first operand  is formatted  in\n                 hexadecimal.  Unless overridden, the output length is twice the\n                 input length, but not longer than eight bytes.\n          HEX  - the  field is  converted  to  displayable hexadecimal;   output\n                 length defaults to twice the input length.\n          SHEX - the field is treated as signed, and is displayed in hexadecimal\n                 with a leading sign.\n          BIT  - the input field is displayed as a string of 0s and 1s.\n          I    - the field is displayed as a signed integer.\n          $I   - the field  is treated  as an  integer value  of cents,   and is\n                 displayed with a decimal point and commas.\n          D    - the input item is packed decimal.\n          $D   - the input is   assumed to be packed decimal,   and is displayed\n                 with a period and two trailing decimals.\n          F    - general floating point conversion. Input length may be length 4\n                 (short floating point)   or 8 (long floating  point).  Extended\n                 floating point  numbers (length > 8  will be treated  as long).\n                 Output length will be one to  twenty-two bytes.  For numbers in\n-                                                                            215\n1                   Technical Guide to System Modifications\n     FD                                                   Macro Description\n-           the range  10\u00a3\u00a7 to  10\u00b5\u00a3  no exponent  field  is printed.   For\n            others, the general form is -.mantissaE\u00c6xp;  where the mantissa\n            consists  of  one to  sixteen  digits  (leading plus  sign  and\n            trailing zeroes suppressed),  and \"xp\"  is the base 10 exponent\n            (approximate range is 10\u00bc\u00bd to 10\u00b5\u00be\u00b7).\n0    LEN= may  specify an absolute value  or expression not  exceeding 132.\n     The specified value will  be used as the output length  instead of the\n     length derived  from the item's input  length.  Note that a  LEN value\n     shorter  than the  item's significant  length  results in  truncation.\n     Truncation is normally  done on the right,   but may be forced  on the\n     left by requesting RADJ.  This feature may be used to display low bits\n     in a byte, for instance.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     216\n1                        Technical Guide to System Modifications\n          Macro Description                                               FDGOTO\n-         3.2.2   FDGOTO\n+         3.2.2   FDGOTO\n+                 ______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           | name | FDGOTO   | FD-address                                      |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n-         FDGOTO causes the processing routine (PRTLIST, SCLIST...)  to transfer\n          from the  current FD to the  one specified in the  relocatable address\n          expression of the first (and only)  operand.   The destination address\n          must be another valid FD chain.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                                                            217\n1                   Technical Guide to System Modifications\n     FDIN                                                 Macro Description\n-    3.2.3   FDIN\n+    3.2.3   FDIN\n+            ____\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | FDIN     | value,length,options \u00dd,LEN=\u00a8                    |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n-    FDIN describes  an input  field,  or an  output field  which is  to be\n     light-pen detectable with feedback.  Even though data types other than\n     character are  allowed on the  macro,  the processing  routines ignore\n     such specification except for selecting case conversion.\n0    Other operands are as described for the FD macro,  except that certain\n     operands should  not be used  except for output  (detectable)  fields;\n     these include  SKIP and PROTECT.    The LEN=  operand must be  used to\n     obtain repeatable  screen position.    In general,   both FD  and FDIN\n     fields which have  been designed to look nice,  should  contain a LEN=\n     operand.\n0    Note that  the contents of an  FDIN expansion is always  modified when\n     the FDIN request is processed by an SC function;  it must therefore be\n     coded in (or copied to)  work or stack storage,  and must not occur in\n     refreshable programs except  as a pattern.  This precludes  the use of\n     literals as FDIN data items. The input variable \"value\" is replaced by\n     SCINDATA when the user modifies the  field;  the \"length\" field FDILEN\n     is set to the input length;  and  the field modification bit is turned\n     on (or off).\n0    When the user replaces the contents of the \"value\" field, the value in\n     FDILEN must be updated to the new string length, using MVI or STC:\n      STC reg,name+FDILEN-FDSECT  sets the new length\n0    The following modifications are made :\n0    SC routines formatting  an FDIN field for display save  the address of\n     the attribute byte in symbolic field  FDCADD (mapped by FDSECT);  this\n     address may be  used to modify the  cursor or SBA address  in an FDOPT\n     entry.  The value is stored as a half-word binary item.   The field is\n     not modified if both 'length' and LEN= are zero.\n0    The SCINDATA  service routine  scans through all  FDIN entries  in the\n     chain passed to it, and turns off the FDDLIT bit in byte FDDATA.  Byte\n     FDOLEN is set (remains)  the maximum length of the field;  byte FDILEN\n     receives the  actual length  of the  data (if  any).  The  actual data\n     length is derived after all editing  options (DEBL,  DEBR,  RADJ)  are\n     performed.  When  the WASCRPEN option was  used on SCINIT,   the above\n     processing  is performed  for  all  detectable \"output\"  fields;   for\n     instance a field containing \"?option\" would be replaced with \">option\"\n     after selection.  When  WASCRPEN was not chosen,   detected fields are\n     indicated  by setting  the FDDLIT  bit;   neither the  length nor  the\n     contents of the field is changed in storage.\n0    Data are translated to upper case when any of three conditions hold:\n      The user issued a SET UPPER case command.\n0    218\n1                        Technical Guide to System Modifications\n          Macro Description                                                 FDIN\n-          The specified field type is not a character field (e.g., HEX)\n           The UPPER option was specified on the FDIN entry.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                                                            219\n1                   Technical Guide to System Modifications\n     FDOPT                                                Macro Description\n-    3.2.4   FDOPT\n+    3.2.4   FDOPT\n+            _____\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | FDOPT    | options \u00ddCUR=(row,column)\u00a8 \u00ddSBA=(row,column)\u00a8   |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n-    FDOPT may be used to change  immediate options,  to set future default\n     options,  and to control screen and cursor positioning.  All color and\n     high-lighting options  described on  the FD macro  may be  used;  they\n     establish defaults for subsequently executed  FD macros in the current\n     chain.\n0       ALARM - on the next CRT write, sound the alarm.   The alarm request\n               is turned off after the write.\n0       SBA=(row,column)  this parameter may be used to set the address for\n               the next field.\n0       CUR=(row,column)  this parameter may be used to set the location of\n               the cursor on the next  written screen.   The address should\n               occur in an input field.\n0    For both SBA and CUR, the row and column address must be valid for the\n     current  device.  A  special  value of  *  or CURR  for  the field  is\n     permitted to  specify the current  row or column;   + and NEXT  may be\n     specified for the next row/column,  and - or PREV for the previous row\n     or column.   A negative  value for the  column number  may be  used to\n     position that number of columns,  less one,   from the end of the row,\n     and  a negative  row value  to position  from  the end  of the  screen\n     (\"backspace\" option below).   All  other specifications are restricted\n     to unsigned  numbers,  and are specified  starting with (1,1)   as the\n     first byte on the screen.\n0    Buffer, cursor, and attribute byte addresses generated by the code are\n     always half-word binary  fields (CRT linesize dependent).    The FDOPT\n     and SCOPT services  permit specification of an optional  form of these\n     fields not  dependent on the  size.  The two  bytes in an  address may\n     assume the following values :\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                                       \u00af\n      |      Byte 0                     |      Byte 1                     |\n      |                                 |                                 |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                                 \u00bf                                 ]\n      | 0-63  Bytes 0 and 1 are a halfword binary offset from the start   |\n      |     of the screen. Combined value is 0 to screen size less one.   |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                                 \u00af                                 ]\n      | 64 to (63+#lines) row number    | 1-132 column number             |\n      | 209-252  backspace (253-value)  | 133-252  backspace (253-value)  |\n      | 253  previous row               | 253  previous column            |\n      | 254  current row                | 254  current column             |\n      | 255  next row                   | 255  next column                |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                                       \u00bf\n-    220\n1                        Technical Guide to System Modifications\n          Macro Description                                                FDOPT\n-         Invalid requests  are ignored;  SBA  requests falling into  the Prompt\n          area are ignored in memory mapped mode unless requested by SCPROMPT or\n          SCWRITE.  In scroll mode,  a request for  \"next row\" and a request for\n          \"next column\" which goes to a new row results in scrolling a row.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             221\n1                   Technical Guide to System Modifications\n     FDSECT                                               Macro Description\n-    3.2.5   FDSECT\n+    3.2.5   FDSECT\n+            ______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      | name | FDSECT   |                                                 |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n-    This macro expands the mappings for all other FD macros.   By default,\n     this macro is expanded by MSECT.    It is the user's responsibility to\n     refer only to those fields present in the corresponding FD entry.   If\n     the name field is omitted, the macro expands as DSECT FDSECT.\n0    FDGOTO expands exactly four bytes.\n0    FDIN expands up to field FDCADD.\n0    FDOPT expands up to FDOCUR.\n0    FD expands at least to FDOLEN,  and  is followed by either an S format\n     address or a literal (which may be null).\n0    FDSECT   DSECT ,             FD item mapping\n     FDLINK   DS    AL1           length to next entry, or 0\n     FDTYPE   DS    X             entry type (IN, OUT, NOP)\n     FDFNOP   EQU   X'40'           ignore this entry\n     FDFIN    EQU   X'80'           input entry (non-RENT)\n     FDFOPT   EQU   X'20'           option list\n     FDFGOTO  EQU   X'10'           branch to another FD entry\n     FDGOTO   DS    0SL2(0)       address of target FD of GO TO\n     FDEDIT   DS    X             editing options\n     FDFNL    EQU   X'80'           position to new line\n     FDFDEBL  EQU   X'40'           strip leading blanks and hex zeroes\n     FDFDEBR  EQU   X'20'           strip trailing blanks and hex zeroes\n     FDFDEBZ  EQU   X'10'           strip leading (EBCDIC) zeroes\n     FDFPADL  EQU   X'08'           leading blank or SF\n     FDFPADR  EQU   X'04'           trailing blank or SF\n     FDFRADJ  EQU   X'02'           right-adjust output\n     FDFUP    EQU   X'01'           upper case translation\n                                  FDOPT option bits :\n     FDOWCCP  EQU   X'40'           WCC options present\n     FDOSBAP  EQU   X'20'           SBA present\n     FDOCURP  EQU   X'08'           cursor address present\n     FDOPTP   EQU   X'02'           color or display options present\n     FDOPT9   DS    X             3279 options\n     FDFCOLOR EQU   X'70'           00 default,10 blue,20 red,30 pink\n                                    40 green,50 turquoise,60 yellow,70 white\n     FDFUNDER EQU   X'04'           underline\n     FDFREV   EQU   X'02'           reverse\n     FDFBLINK EQU   X'01'           blink\n     FDOPT7   DS    X             3277/3278 options\n     FDFINT   EQU   X'08'           intensified\n     FDFLPEN  EQU   X'04'           light-pen detectable\n     FDFNDISP EQU   X'0C'           non-display\n     FDFNUM   EQU   X'10'           numeric input\n0    222\n1                        Technical Guide to System Modifications\n          Macro Description                                               FDSECT\n-         FDFSKIP  EQU   X'30'           skip field\n          FDFPROT  EQU   X'20'           protected\n          FDFDFLT  EQU   X'80'           default options/colors\n          FDFPREV  EQU   X'40'           previous options/colors\n          FDFNULL  EQU   X'02'           Input field is to be displayed with\n                                          trailing nulls rather than blanks.\n          FDDATA   DS    X             data type\n          FDDLIT   EQU   X'80'      FD - FD contains literal, not address\n                                    FDIN - field changed by user\n          FDDCHAR  EQU   1               EBCDIC, translated\n          FDDCON   EQU   2               EBCDIC with control characters\n          FDDASIS  EQU   3               EBCDIC(?), no translate\n          FDDADDR  EQU   4               address\n          FDDHEX   EQU   5               hexadecimal\n          FDDSHEX  EQU   6               hexadecimal with explicit sign\n          FDDBIT   EQU   7               bit string\n          FDDINT   EQU   8               integer\n          FDD$INT  EQU   9               integer.dd\n          FDDDEC   EQU   10              packed decimal\n          FDD$DEC  EQU   11              packed decimal.dd\n          FDDFIX   EQU   12              floating point\n          FDOLEN   DS    AL1           output length, or 0 for default\n          FDILEN   DS    AL1           input data length\n          FDTEXT   DS    0CL132        literal\n          FDSADD   DS    SL2           data address\n          FDCADD   DS    AL2           input field - attribute address\n                   ORG   FDDATA       redefinition for FDOPT\n          FDOWCC   DC    X'0'          WCC options\n          FDOSBA   DC    XL2'0'        SBA address\n          FDOCUR   DC    XL2'0'        cursor address\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                            223\n1                   Technical Guide to System Modifications\n     Macro description\n-    3.3   DOCUMENTATION MACROS\n+    3.3   DOCUMENTATION MACROS\n+          _____________ ______\n0    The GOSSIP  User's Guide and this  Technical Guide are  prepared using\n     the SCRIPT  package distributed by  the University of  Waterloo.   The\n     version used is 3.2, which is the last free version available.\n0    The  general  layout of  the  manuals  is  produced using  the  SYSPUB\n     facility distributed with SCRIPT.  Additional  macros were written for\n     specific  combinations of  functions,  e.g.,   combining page  ejects,\n     sub-titles, boxes, and indexing.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     224\n1                        Technical Guide to System Modifications\n          Macro Description                                              HAILFUN\n-         3.3.1   HAILFUN\n+         3.3.1   HAILFUN\n+                 _______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           |      | HAILFUN  | name offset \u00ddregisters\u00a8                         |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n-         This macro  expands the code for  HAIL function calls.   One  to three\n          'register' operands may  be specified to indicate the type  of data to\n          be supplied by the user. The operands are positional and correspond to\n          registers zero to two.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                                                            225\n1                   Technical Guide to System Modifications\n     HAILOG                                               Macro Description\n-    3.3.2   HAILOG\n+    3.3.2   HAILOG\n+            ______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      |      | HAILOG   | module title                                    |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n-\n     3.3.3   HAILOG\n+    3.3.3   HAILOG\n+            ______\n0     \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+            \u00af          \u00af\n      |      | HAILOG   | module title                                    |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+            \u00bf          \u00bf\n-    These two functions  are used in the logic  and function descriptions.\n     'module' is  the program name of  the code described;  'title'  is the\n     quoted title for the module.\n0    HAILOG is used for the function descriptions.\n0    HAILOG is used for the program logic section.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     226\n1                        Technical Guide to System Modifications\n          Macro Description                                               MACDEF\n-         3.3.4   MACDEF\n+         3.3.4   MACDEF\n+                 ______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           |      | MACDEF   | one to ten operands                             |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n-\n          3.3.5   MACALT\n+         3.3.5   MACALT\n+                 ______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           |      | MACALT   | one to ten operands                             |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n-\n          3.3.6   MACTWO\n+         3.3.6   MACTWO\n+                 ______\n0          \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                 \u00af          \u00af\n           |      | MACTWO   | one to ten operands                             |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                 \u00bf          \u00bf\n-         This group of macros expands the  code for COPY and MACRO definitions.\n          One  to ten  operands  (quoted or  unquoted)   may  be supplied.    If\n          insufficient  space is  available on  the  \".mac...\" invokation  line,\n          additional parameters  MCL1-MCL5 may be set  with .SR prior  to coding\n          the .MAC... line. These values are reset to null strings after use.\n0         MACDEF generates  a page eject,   and places  the macro name  into the\n          subtitle.\n0         MACTWO skips five lines, then draws the box.  No page eject is issued,\n          and the subtitle is not altered.\n0         MACALT skips one line.  It does not  alter the subtitle,  and does not\n          index the macro name.  It is intended to provide an additional box for\n          ALTernate invokations of the macro.\n-\n-\n-\n-\n-\n-                                                                            227\n1                   Technical Guide to System Modifications\n     System Modifications\n-\n                                   Section 4\n+                                  Section 4\n0                             SYSTEM MODIFICATIONS\n+                             SYSTEM MODIFICATIONS\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     228\n1                        Technical Guide to System Modifications\n          Macro Description                                              IEDQ21L\n-         4.0.7   TCAM Lower-case Translation ..........................IEDQ21L\n+         4.0.7   TCAM Lower-case Translation                           IEDQ21L\n+                 ____ __________ ___________                           _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             229\n1                   Technical Guide to System Modifications\n     IEFDB401                                             Macro Description\n-    4.0.8   I/O Counts ...........................................IEFDB401\n+    4.0.8   I/O Counts                                            IEFDB401\n+            ___ ______                                            ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     230\n1                        Technical Guide to System Modifications\n          Macro Description                                               IEFUJI\n-         4.0.9   SMF Job Initiation ...................................IEFUJI\n+         4.0.9   SMF Job Initiation                                    IEFUJI\n+                 ___ ___ __________                                    ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             231\n1                   Technical Guide to System Modifications\n     IEFUJT$$                                             Macro Description\n-    4.0.10   SMF Job Termination .................................IEFUJT$$\n+    4.0.10   SMF Job Termination                                  IEFUJT$$\n+             ___ ___ ___________                                  ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     232\n1                        Technical Guide to System Modifications\n          Macro Description                                               IEFUSI\n-         4.0.11   SMF Step Initiation .................................IEFUSI\n+         4.0.11   SMF Step Initiation                                  IEFUSI\n+                  ___ ____ __________                                  ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             233\n1                   Technical Guide to System Modifications\n     IEFUTL                                               Macro Description\n-    4.0.12   SMF Time Expiration .................................IEFUTL\n+    4.0.12   SMF Time Expiration                                  IEFUTL\n+             ___ ____ __________                                  ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     234\n1                        Technical Guide to System Modifications\n          Macro Description                                             IGCMILTN\n-         4.0.13   MILTEN SVC ..........................................IGCMILTN\n+         4.0.13   MILTEN SVC                                           IGCMILTN\n+                  ______ ___                                           ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             235\n1                   Technical Guide to System Modifications\n     IGC0024A                                             Macro Description\n-    4.0.14   SVC .................................................IGC0024A\n+    4.0.14   SVC                                                  IGC0024A\n+             ___                                                  ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     236\n1                        Technical Guide to System Modifications\n          Macro Description                                             IGC0024G\n-         4.0.15   WYLBUR NOTIFY SVC ...................................IGC0024G\n+         4.0.15   WYLBUR NOTIFY SVC                                    IGC0024G\n+                  ______ ______ ___                                    ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             237\n1                   Technical Guide to System Modifications\n     IGPACCT                                              Macro Description\n-    4.0.16   CCSI Account Status Table ...........................IGPACCT\n+    4.0.16   CCSI Account Status Table                            IGPACCT\n+             ____ _______ ______ _____                            _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     238\n1                        Technical Guide to System Modifications\n          Macro Description                                              IGPVOLT\n-         4.0.17   CCSI Volume Status Table ............................IGPVOLT\n+         4.0.17   CCSI Volume Status Table                             IGPVOLT\n+                  ____ ______ ______ _____                             _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             239\n1                   Technical Guide to System Modifications\n     IGC00240                                             Macro Description\n-    4.0.18   Mod-JFCB SVC ........................................IGC00240\n+    4.0.18   Mod-JFCB SVC                                         IGC00240\n+             ________ ___                                         ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     240\n1                        Technical Guide to System Modifications\n          Macro Description                                             IGC0025C\n-         4.0.19   SMF SVC .............................................IGC0025C\n+         4.0.19   SMF SVC                                              IGC0025C\n+                  ___ ___                                              ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             241\n1                   Technical Guide to System Modifications\n     IGC237                                               Macro Description\n-    4.0.20   SVC .................................................IGC237\n+    4.0.20   SVC                                                  IGC237\n+             ___                                                  ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     242\n1                        Technical Guide to System Modifications\n          Macro Description                                               IGC251\n-         4.0.21   SVC .................................................IGC251\n+         4.0.21   SVC                                                  IGC251\n+                  ___                                                  ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             243\n1                   Technical Guide to System Modifications\n     IGG0CLCT                                             Macro Description\n-    4.0.22   Catalog Validity-check ..............................IGG0CLCT\n+    4.0.22   Catalog Validity-check                               IGG0CLCT\n+             _______ ______________                               ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     244\n1                        Technical Guide to System Modifications\n          Macro Description                                             LEXSVC99\n-         4.0.23   SVC 99 Local Exit ...................................LEXSVC99\n+         4.0.23   SVC 99 Local Exit                                    LEXSVC99\n+                  ___ __ _____ ____                                    ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             245\n1                   Technical Guide to System Modifications\n     MVSAB4B0                                             Macro Description\n-    4.0.24   IEF message .........................................MVSAB4B0\n+    4.0.24   IEF message                                          MVSAB4B0\n+             ___ _______                                          ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     246\n1                        Technical Guide to System Modifications\n          Macro Description                                             MVSAB4EE\n-         4.0.25   IEF message .........................................MVSAB4EE\n+         4.0.25   IEF message                                          MVSAB4EE\n+                  ___ _______                                          ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             247\n1                   Technical Guide to System Modifications\n     MVSALLOC                                             Macro Description\n-    4.0.26   SVC 32 Validity-checking ............................MVSALLOC\n+    4.0.26   SVC 32 Validity-checking                             MVSALLOC\n+             ___ __ _________________                             ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     248\n1                        Technical Guide to System Modifications\n          Macro Description                                             MVSATTCH\n-         4.0.27   TCBUSER Propagation .................................MVSATTCH\n+         4.0.27   TCBUSER Propagation                                  MVSATTCH\n+                  _______ ___________                                  ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             249\n1                   Technical Guide to System Modifications\n     MVSIPLST                                             Macro Description\n-    4.0.28   IPL Services ........................................MVSIPLST\n+    4.0.28   IPL Services                                         MVSIPLST\n+             ___ ________                                         ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     250\n1                        Technical Guide to System Modifications\n          Macro Description                                             MVSMB813\n-         4.0.29   Unload by VolSer ....................................MVSMB813\n+         4.0.29   Unload by VolSer                                     MVSMB813\n+                  ______ __ ______                                     ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             251\n1                   Technical Guide to System Modifications\n     MVSSVC98                                             Macro Description\n-    4.0.30   PROTECT SVC Mods ....................................MVSSVC98\n+    4.0.30   PROTECT SVC Mods                                     MVSSVC98\n+             _______ ___ ____                                     ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     252\n1                        Technical Guide to System Modifications\n          Macro Description                                              MVSVIPL\n-         4.0.31   IEEVIPL Mods ........................................MVSVIPL\n+         4.0.31   IEEVIPL Mods                                         MVSVIPL\n+                  _______ ____                                         _______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             253\n1                   Technical Guide to System Modifications\n     MVSVMNT1                                             Macro Description\n-    4.0.32   IEEVMNT1 Mods .......................................MVSVMNT1\n+    4.0.32   IEEVMNT1 Mods                                        MVSVMNT1\n+             ________ ____                                        ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     254\n1                        Technical Guide to System Modifications\n          Macro Description                                             MVS00123\n-         4.0.33   OPEN Password Checking ..............................MVS00123\n+         4.0.33   OPEN Password Checking                               MVS00123\n+                  ____ ________ ________                               ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             255\n1                   Technical Guide to System Modifications\n     SVCDUMMY                                             Macro Description\n-    4.0.34   Dummy SVC ...........................................SVCDUMMY\n+    4.0.34   Dummy SVC                                            SVCDUMMY\n+             _____ ___                                            ________\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     256\n1                        Technical Guide to System Modifications\n          Macro Description                                               SVCMIL\n-         4.0.35   MILTEN SVC ..........................................SVCMIL\n+         4.0.35   MILTEN SVC                                           SVCMIL\n+                  ______ ___                                           ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             257\n1                   Technical Guide to System Modifications\n     UCS1UN                                               Macro Description\n-    4.0.36   Amer. Library Assoc. UCS Image ......................UCS1UN\n+    4.0.36   Amer. Library Assoc. UCS Image                       UCS1UN\n+             ____  _______ _____  ___ _____                       ______\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     258\n1                        Technical Guide to System Modifications\n          Macro Description                                               UCS1UN\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                                                             259\n1                   Technical Guide to System Modifications\n     Index\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n     260\n1                        Technical Guide to System Modifications\n                                                                           Index\n-\n                                          Index\n+                                         Index\n-         @CATREAD                             ALTTRACK\n             logic ... 148                        logic ... 3\n          @DCBEXIT                             Amer. Library Assoc. UCS Image\n             logic ... 149                        logic ... 258\n          @FDRREAD                             ASMANY\n             logic ... 150                        logic ... 4\n          @INPREAD                             Automatic System Shut-down\n             logic ... 151                        logic ... 88\n          @OBTAIN ... 170\n          @OBTAINS                             Big Letter Routine\n             logic ... 152                        logic ... 160\n          @PRINTER                             Big Letters on JCL\n             logic ... 145                        logic ... 110\n          @PROTECS                             BINLK\n             logic ... 153                        SERVCALL ... 131\n          @PROTECT ... 171                        SERVICE ... 131\n          @SERVICE                             BIX ... 172\n             logic ... 125                     BLOCKPRT\n          @SRVJ220                                logic ... 8\n             logic ... 144                     Build LKED Control Cards\n          @TMSREAD                                logic ... 77\n             logic ... 154                     Builds IEBUPDTE Deck\n          @VOLREAD                                logic ... 56\n             logic ... 155\n                                               Canned Job Submission\n          ACCNX                                   logic ... 68\n             SERVCALL ... 136                  CAPACITY\n             SERVICE ... 136                      logic ... 9\n          ACCON                                Catalog Clean-up\n             SERVCALL ... 135                     logic ... 10, 11\n             SERVICE ... 135                   Catalog Copy\n          ACGET                                   logic ... 18\n             SERVCALL ... 134                  Catalog Reader\n             SERVICE ... 134                      logic ... 148\n          ACTSM                                Catalog Validity-check\n             SERVCALL ... 135                     logic ... 244\n             SERVICE ... 135                   CATCLEAN\n          ACTST                                   logic ... 10\n             SERVCALL ... 135                  CATEDIT\n             SERVICE ... 135                      logic ... 11\n          ALCDS                                CATLIST\n             SERVCALL ... 143                     logic ... 12\n          ALCFD                                CCSI Account Status Table\n             SERVCALL ... 143                     logic ... 238\n          ALCFR                                CCSI TMS DASD Lister\n             SERVCALL ... 143                     logic ... 114\n          ALCVS                                CCSI TMS Lister\n             SERVCALL ... 142                     logic ... 115\n          Alternate Track List                 CCSI Volume Status Table\n             logic ... 3\n0                                                                            261\n1                   Technical Guide to System Modifications\n     Index\n-       logic ... 239                     Dataset Initialization\n     CDSLIST                                 logic ... 14\n        logic ... 13                      Dataset Lister\n     CLEARDA                                 logic ... 94\n        Direct Access                     Date Insertion\n           Initialization ... 14             logic ... 41\n     CLEARDSN                             DATEEDIT\n        logic ... 14                         logic ... 41\n     CLEAREOF                             DCB Exit Services\n        Direct Access                        logic ... 149\n           Initialization ... 14          DCBEXITD ... 179\n     CLEARPDS                             DD Card Routine\n        logic ... 15                         logic ... 161\n     CLEARVOL                             De-Link Edit\n        VTOC Initialization ... 33           logic ... 43\n     CLOSE                                Deck Compare Program\n        SERVCALL ... 126                     logic ... 123\n        SERVICE ... 126                   DEFORMAT\n     CLRL ... 174                            logic ... 42\n     COBOL Resequencing                   DELETEST ... 183\n        logic ... 111                     DELINK0\n     Code Conversion                         logic ... 43\n        logic ... 17                      Device Mask Table Lister\n     COMMENT                                 logic ... 44\n        logic ... 16                      DEVTABLE\n     CONVERT                                 logic ... 44\n        logic ... 17                      Diplomacy Game\n     COPYCAT                                 logic ... 47\n        logic ... 18                      DIPLOMAT\n     COPYJES                                 logic ... 47\n        logic ... 31                      DISASM\n     COPYTAPE                                logic ... 48\n        logic ... 32                      Disassembler\n     COPYVOL                                 logic ... 48\n        logic ... 33                      DISASTER\n     CPU and Time Routine                    logic ... 50\n        logic ... 159                     Disposition Change\n     CRMEND ... 175                          logic ... 167\n     CRMEXIT ... 176                      DIST\n     CRMHEAD ... 177                         logic ... 51\n     CRMSPIE ... 178                      DISTBLD\n     CRTNASTY                                logic ... 53\n        logic ... 40                      DISTFIND\n                                             logic ... 54\n     DASD Access Monitor                  Distribution Tape Catalog Builder\n        logic ... 101                        logic ... 50, 53\n     DASD Capacity                        Distribution Tape Lookup\n        logic ... 9                          logic ... 54\n     DASD Copy                            Distribution Tape Retrieval\n        logic ... 33                         logic ... 51\n     DASD Scratch                         Distribution Tape Update\n        logic ... 100                        Extraction\n     DASD Space Release                      logic ... 65\n        logic ... 97                      DOS Tape to OS PDS Conversion\n0    262\n1                        Technical Guide to System Modifications\n                                                                           Index\n-            logic ... 55                      EBCDIG ... 184\n          DOSUPDTE                             EDTPRINT\n             logic ... 55                         logic ... 62\n          DOWNDATE                             Elegible Device Table Listing\n             logic ... 56                         logic ... 62\n          DRIPCLIP                             ENDM ... 185\n             logic ... 57                      EXEC and Page-fix\n          DRIPFREN                                logic ... 76\n             logic ... 58                      EXEC PARM Extraction\n          DRIPLOAD                                logic ... 158\n             logic ... 59                      Expand PDS Directory\n          DSABB                                   logic ... 63\n             SERVCALL ... 137                  EXPDIR\n          DSCAT                                   logic ... 63\n             SERVCALL ... 137                  EXSTATIC\n             SERVICE ... 137                      logic ... 64\n          DSDJ1                                EXTRACTS\n             SERVCALL ... 138                     logic ... 65\n          DSDS1\n             SERVCALL ... 138                  Fast TMS Reader\n          DSFMT                                   logic ... 154\n             SERVCALL ... 138                  FCB Lister\n          DSGET                                   logic ... 67\n             SERVCALL ... 140                  FCBLIST\n             SERVICE ... 140                      logic ... 67\n          DSLIB                                FD ... 215\n             SERVCALL ... 139                  FDGOTO ... 217\n             SERVICE ... 139                   FDIN ... 218\n          DSLIX                                FDOPT ... 220\n             SERVCALL ... 140                  FDR Pseudo-DASD\n             SERVICE ... 140                      logic ... 150\n          DSMEM                                FDRREAD ... 187\n             SERVCALL ... 138                  FDSECT ... 222\n             SERVICE ... 138                   FINIT\n          DSTST                                   logic ... 156\n             SERVCALL ... 137                  FIXTRACK ... 3\n             SERVICE ... 137                   FMTAC\n          DSWYL                                   SERVCALL ... 136\n             SERVCALL ... 140                  FMTLB\n             SERVICE ... 140                      SERVCALL ... 136\n          Dummy SVC                            FMTWY\n             logic ... 256                        SERVCALL ... 136\n          DVCAP                                FORMAT to SCRIPT conversion\n             SERVCALL ... 131                     logic ... 42\n             SERVICE ... 131                   FORTAN Record Reread Routine\n          DVEXT                                   logic ... 166\n             SERVCALL ... 132                  FORTRAN Dump Support\n             SERVICE ... 132                      logic ... 164\n          DVSPC                                FORTRAN Interface Initialization\n             SERVCALL ... 133                     logic ... 156\n             SERVICE ... 133                   FORTRAN/SORT Interface\n          DVTBL                                   logic ... 157\n             SERVCALL ... 131                  FREEM\n             SERVICE ... 131                      SERVCALL ... 127\n0                                                                            263\n1                   Technical Guide to System Modifications\n     Index\n-    FSAWORK ... 188                      IEHVTOC\n     FSORT                                   logic ... 74\n        logic ... 157                     IGCMILTN\n     Full-track DASD Reader                  logic ... 235\n        logic ... 155                     IGC0024A\n     Full-track OBTAINs                      logic ... 236\n        logic ... 152                     IGC0024G\n     Full-track PROTECT                      logic ... 237\n        logic ... 153                     IGC00240\n                                             logic ... 240\n     Generalized Input Service            IGC0025C\n        logic ... 151                        logic ... 241\n     GOPARM                               IGC237\n        logic ... 158                        logic ... 242\n                                          IGC251\n     HAILFUN ... 225                         logic ... 243\n     HAILOG ... 226                       IGG0CLCT\n     HASP Print/Punch                        logic ... 244\n        logic ... 31                      IGPACCT\n     HOB                                     logic ... 238\n        logic ... 68                      IGPVOLT\n     HSPMERGE                                logic ... 239\n        logic ... 71                      IHADVCT ... 189\n                                          INC ... 190\n     I/O Counts                           INCH ... 191\n        logic ... 230                     INITG\n     ICPU                                    SERVCALL ... 127\n        logic ... 159                     INPCLOSE ... 192\n     IEBPDS                               INPCOM ... 192\n        logic ... 73                      INPGET ... 193\n     IEDQ21L                              INPKEEP ... 193\n        logic ... 229                     INPOPEN ... 194\n     IEEVIPL Mods                         INPWORK ... 195\n        logic ... 253                     IPL Services\n     IEEVMNT1 Mods                           logic ... 250\n        logic ... 254\n     IEF message                          JES2 @SERVICE extension\n        logic ... 246, 247                   logic ... 144\n     IEFDB401                             JFCB Modification\n        logic ... 230                        logic ... 163\n     IEFSD095                             JOBWTR\n        logic ... 160                        logic ... 75\n     IEFSD095 Tester\n        logic ... 113                     LAT ... 196\n     IEFUJI                               LEXSVC99\n        logic ... 231                        logic ... 245\n     IEFUJT$$                             LOADFIX\n        logic ... 232                        logic ... 76\n     IEFUJV Tester                        LOADLPA ... 197\n        logic ... 89                      LOADMAPS\n     IEFUSI                                  logic ... 77\n        logic ... 233                     LOADZAP\n     IEFUTL                                  logic ... 78\n        logic ... 234                     logic\n0    264\n1                        Technical Guide to System Modifications\n                                                                           Index\n-            @CATREAD ... 148                     DASD Copy ... 33\n             @DCBEXIT ... 149                     DASD Scratch ... 100\n             @FDRREAD ... 150                     DASD Space Release ... 97\n             @INPREAD ... 151                     Dataset Initialization ... 14\n             @OBTAINS ... 152                     Dataset Lister ... 94\n             @PRINTER ... 145                     Date Insertion ... 41\n             @PROTECS ... 153                     DATEEDIT ... 41\n             @SERVICE ... 125                     DCB Exit Services ... 149\n             @SRVJ220 ... 144                     DD Card Routine ... 161\n             @TMSREAD ... 154                     De-Link Edit ... 43\n             @VOLREAD ... 155                     Deck Compare Program ... 123\n             Alternate Track List ... 3           DEFORMAT ... 42\n             ALTTRACK ... 3                       DELINK0 ... 43\n             Amer. Library Assoc. UCS             Device Mask Table\n                Image ... 258                        Lister ... 44\n             ASMANY ... 4                         DEVTABLE ... 44\n             Automatic System Shut-               Diplomacy Game ... 47\n                down ... 88                       DIPLOMAT ... 47\n             Big Letter Routine ... 160           DISASM ... 48\n             Big Letters on JCL ... 110           Disassembler ... 48\n             BLOCKPRT ... 8                       DISASTER ... 50\n             Build LKED Control                   Disposition Change ... 167\n                Cards ... 77                      DIST ... 51\n             Builds IEBUPDTE Deck ... 56          DISTBLD ... 53\n             Canned Job Submission ... 68         DISTFIND ... 54\n             CAPACITY ... 9                       Distribution Tape Catalog\n             Catalog Clean-up ... 10, 11             Builder ... 50, 53\n             Catalog Copy ... 18                  Distribution Tape\n             Catalog Reader ... 148                  Lookup ... 54\n             Catalog Validity-check ... 244       Distribution Tape\n             CATCLEAN ... 10                         Retrieval ... 51\n             CATEDIT ... 11                       Distribution Tape Update\n             CATLIST ... 12                          Extraction ... 65\n             CCSI Account Status                  DOS Tape to OS PDS\n                Table ... 238                        Conversion ... 55\n             CCSI TMS DASD Lister ... 114         DOSUPDTE ... 55\n             CCSI TMS Lister ... 115              DOWNDATE ... 56\n             CCSI Volume Status                   DRIPCLIP ... 57\n                Table ... 239                     DRIPFREN ... 58\n             CDSLIST ... 13                       DRIPLOAD ... 59\n             CLEARDSN ... 14                      Dummy SVC ... 256\n             CLEARPDS ... 15                      EDTPRINT ... 62\n             COBOL Resequencing ... 111           Elegible Device Table\n             Code Conversion ... 17                  Listing ... 62\n             COMMENT ... 16                       EXEC and Page-fix ... 76\n             CONVERT ... 17                       EXEC PARM Extraction ... 158\n             COPYCAT ... 18                       Expand PDS Directory ... 63\n             COPYJES ... 31                       EXPDIR ... 63\n             COPYTAPE ... 32                      EXSTATIC ... 64\n             COPYVOL ... 33                       EXTRACTS ... 65\n             CPU and Time Routine ... 159         Fast TMS Reader ... 154\n             CRTNASTY ... 40                      FCB Lister ... 67\n             DASD Access Monitor ... 101          FCBLIST ... 67\n             DASD Capacity ... 9                  FDR Pseudo-DASD ... 150\n0                                                                            265\n1                   Technical Guide to System Modifications\n     Index\n-       FINIT ... 156                        LOOKDD ... 161\n        FORMAT to SCRIPT                     MADS ... 162\n           conversion ... 42                 MADS Support/Simulator\n        FORTAN Record Reread                    Routine ... 162\n           Routine ... 166                   MAPDISK ... 79\n        FORTRAN Dump Support ... 164         MCPINIT ... 80\n        FORTRAN Interface                    Message Cross-Reference ... 98\n           Initialization ... 156            MICRO ... 81\n        FORTRAN/SORT Interface ... 157       Microfiche External\n        FSORT ... 157                           Writer ... 82\n        Full-track DASD Reader ... 155       Microfiche Subroutine ... 83\n        Full-track OBTAINs ... 152           Microfiche Writer ... 81\n        Full-track PROTECT ... 153           MICROJOB ... 82\n        Generalized Input                    MICROSUB ... 83\n           Service ... 151                   MIGRATE ... 84\n        GOPARM ... 158                       MILTEN SVC ... 235, 257\n        HASP Print/Punch ... 31              MIMSTOW ... 85\n        HOB ... 68                           Mod-JFCB SVC ... 240\n        HSPMERGE ... 71                      MODJFCB ... 163\n        I/O Counts ... 230                   Move Dataset Groups ... 84\n        ICPU ... 159                         Multiple Assembler ... 4\n        IEBPDS ... 73                        MVSAB4B0 ... 246\n        IEDQ21L ... 229                      MVSAB4EE ... 247\n        IEEVIPL Mods ... 253                 MVSALLOC ... 248\n        IEEVMNT1 Mods ... 254                MVSATTCH ... 249\n        IEF message ... 246, 247             MVSIPLST ... 250\n        IEFDB401 ... 230                     MVSMB813 ... 251\n        IEFSD095 ... 160                     MVSSVC98 ... 252\n        IEFSD095 Tester ... 113              MVSVIPL ... 253\n        IEFUJI ... 231                       MVSVMNT1 ... 254\n        IEFUJT$$ ... 232                     MVS00123 ... 255\n        IEFUJV Tester ... 89                 MVT External Writer ... 75\n        IEFUSI ... 233                       MVTDEBE ... 86\n        IEFUTL ... 234                       NIH Merge ... 71\n        IEHVTOC ... 74                       NISRELSE ... 87\n        IGCMILTN ... 235                     NIS0HALT ... 88\n        IGC0024A ... 236                     NIS0UJVT ... 89\n        IGC0024G ... 237                     NOSTAE ... 164\n        IGC00240 ... 240                     On-line Printer\n        IGC0025C ... 241                        Exerciser ... 90\n        IGC237 ... 242                       OPEN Password Checking ... 255\n        IGC251 ... 243                       Operator Communication ... 16\n        IGG0CLCT ... 244                     Operator Print/Copy\n        IGPACCT ... 238                         Functions ... 86\n        IGPVOLT ... 239                      Operator WTM ... 112\n        IPL Services ... 250                 OSRIPPLE ... 90\n        JES2 @SERVICE                        Overlay Control Card\n           extension ... 144                    Builder ... 91\n        JFCB Modification ... 163            OVLYTREE ... 91\n        JOBWTR ... 75                        Partitioned Dataset\n        LEXSVC99 ... 245                        Initialization ... 15\n        LOADFIX ... 76                       PDS & DS Print/Punch ... 96\n        LOADMAPS ... 77                      PDS Concordance ... 64\n        LOADZAP ... 78                       PDS Directory Lister ... 73\n0    266\n1                        Technical Guide to System Modifications\n                                                                           Index\n-            PDS Print/Punch ... 92, 93           SVCDUMMY ... 256\n             POD ... 92                           SVCMIL ... 257\n             PODHELP ... 93                       TAGCOBOL ... 111\n             Print and Punch                      Tape Copy ... 32, 99\n                Routines ... 145                  Tape Label\n             PRINTALL ... 94                         Analysis/Copy ... 103\n             Process Michigan Mods                Tape Print ... 8\n                Tape ... 85                       TAPEMARK ... 112\n             PROCLIB Update ... 95                TCAM Lower-case\n             PROCUP ... 95                           Translation ... 229\n             PROTECT SVC Mods ... 252             TCBUSER Propagation ... 249\n             PUNK ... 96                          TESTSD95 ... 113\n             Random Number                        Time & Date Formatting ... 168\n                Generator ... 165                 TIMEDAY ... 168\n             RANDOMS ... 165                      TMSBACKS ... 114\n             RELEASE ... 97                       TMSULIST ... 115\n             REREAD ... 166                       UCB Lister ... 116\n             SAMSGREF ... 98                      UCBPRINT ... 116\n             SAVETAPE ... 99                      UCS1UN ... 258\n             SCRATCHS ... 100                     Unload by VolSer ... 251\n             SEEKMON ... 101                      Variable Link-Edit ... 117\n             Sequential Job Release ... 87        VARLINK ... 117\n             SERIAL ... 102                       VSAM Catalog Lister ... 12\n             Serialize Decks ... 102              VTOC and PDS Lister ... 74\n             Service Routines ... 125             VTOC Lister ... 79\n             SETDISP ... 167                      WYLBUR Compress ... 119\n             SLANALYZ ... 103                     WYLBUR DASD\n             SMF Dump & Switch ... 104               Maintenance ... 118\n             SMF Extraction ... 106, 109          WYLBUR Decompression ... 120\n             SMF Job Initiation ... 231           WYLBUR Initialization ... 80\n             SMF Job Termination ... 232          WYLBUR NOTIFY SVC ... 237\n             SMF Merge ... 105                    WYLBUR Password Lister ... 121\n             SMF Statistics ... 107               WYLBUR VTOC & PDS\n             SMF Step Initiation ... 233             Lister ... 122\n             SMF SVC ... 241                      WYLCLEAN ... 118\n             SMF Terminal                         WYLCOMP ... 119\n                Statistics ... 108                WYLDCOMP ... 120\n             SMF Time Expiration ... 234          WYLPASWD ... 121\n             SMFDUMP ... 104                      WYLVTOC ... 122\n             SMFMERGE ... 105                     YALECOMP ... 123\n             SMFSELCT ... 106                     ZAP and EXEC Program ... 78\n             SMFSTATS ... 107                     3270 Message Facility ... 40\n             SMFTERMS ... 108                  LOOKDD\n             SMFXTRCT ... 109                     logic ... 161\n             SMP Lister ... 13                 LOOKLPA ... 198\n             Stand-alone DASD Label            LPADL\n                List/Change ... 57                SERVCALL ... 127\n             Stand-alone I/O Tester ... 58     LPALD\n             Stand-alone Loader ... 59            SERVCALL ... 127\n             STEPSEP ... 110\n             SVC ... 236, 242, 243             MACALT ... 227\n             SVC 32 Validity-                  MACDEF ... 227\n                checking ... 248               MACPARM ... 199\n             SVC 99 Local Exit ... 245         MACTWO ... 227\n0                                                                            267\n1                   Technical Guide to System Modifications\n     Index\n-    MADS                                    logic ... 251\n        logic ... 162                     MVSSVC98\n     MADS Support/Simulator Routine          logic ... 252\n        logic ... 162                     MVSVIPL\n     MAPDISK                                 logic ... 253\n        logic ... 79                      MVSVMNT1\n     MAPEXTNT ... 201                        logic ... 254\n     MAPINP ... 202                       MVS00123\n     MAPPDS ... 203                          logic ... 255\n     MAPPRT ... 204                       MVT External Writer\n     MAPPRTWK ... 205                        logic ... 75\n     MCPINIT                              MVTDEBE\n        logic ... 80                         logic ... 86\n     Message Cross-Reference\n        logic ... 98                      NIH Merge\n     MICRO                                   logic ... 71\n        logic ... 81                      NISRELSE\n     Microfiche External Writer              logic ... 87\n        logic ... 82                      NIS0HALT\n     Microfiche Subroutine                   logic ... 88\n        logic ... 83                      NIS0UJVT\n     Microfiche Writer                       logic ... 89\n        logic ... 81                      NOSTAE\n     MICROJOB                                logic ... 164\n        logic ... 82\n     MICROSUB                             On-line Printer Exerciser\n        logic ... 83                         logic ... 90\n     MIGRATE                              OPEN Password Checking\n        logic ... 84                         logic ... 255\n     MILTEN SVC                           Operator Communication\n        logic ... 235, 257                   logic ... 16\n     MIMSTOW                              Operator Print/Copy Functions\n        logic ... 85                         logic ... 86\n     Mod-JFCB SVC                         Operator WTM\n        logic ... 240                        logic ... 112\n     MODJFCB                              OPTIONGB ... 209\n        logic ... 163                     OSRIPPLE\n     MOTE ... 207                            logic ... 90\n     Move Dataset Groups                  Overlay Control Card Builder\n        logic ... 84                         logic ... 91\n     MTITL ... 208                        OVLYTREE\n     Multiple Assembler                      logic ... 91\n        logic ... 4\n     MVSAB4B0                             Partitioned Dataset\n        logic ... 246                        Initialization\n     MVSAB4EE                                logic ... 15\n        logic ... 247                     PDS & DS Print/Punch\n     MVSALLOC                                logic ... 96\n        logic ... 248                     PDS Concordance\n     MVSATTCH                                logic ... 64\n        logic ... 249                     PDS Directory Lister\n     MVSIPLST                                logic ... 73\n        logic ... 250                     PDS Print/Punch\n     MVSMB813                                logic ... 92, 93\n0    268\n1                        Technical Guide to System Modifications\n                                                                           Index\n-         PDSDE                                SCHMV\n             SERVCALL ... 139                     SERVCALL ... 134\n             SERVICE ... 139                   SCRATCHS\n          POD                                     logic ... 100\n             logic ... 92                      SEEKMON\n          PODHELP                                 logic ... 101\n             logic ... 93                      Sequential Job Release\n          Print and Punch Routines                logic ... 87\n             logic ... 145                     SERIAL\n          PRINTALL                                logic ... 102\n             logic ... 94                      Serialize Decks\n          Process Michigan Mods Tape              logic ... 102\n             logic ... 85                      SERVCALL\n          PROCLIB Update                          ACCNX ... 136\n             logic ... 95                         ACCON ... 135\n          PROCUP                                  ACGET ... 134\n             logic ... 95                         ACTSM ... 135\n          PROTECT SVC Mods                        ACTST ... 135\n             logic ... 252                        ALCDS ... 143\n          PRTBIG ... 146                          ALCFD ... 143\n          PRTCLOSE ... 146                        ALCFR ... 143\n          PRTF ... 145                            ALCVS ... 142\n          PRTLIST ... 145                         BINLK ... 131\n          PRTOPEN ... 145                         CLOSE ... 126\n          PRTROOM ... 146                         DSABB ... 137\n          PRTSNAP ... 146                         DSCAT ... 137\n          PRTSPACE ... 146                        DSDJ1 ... 138\n          PRTV ... 145                            DSDS1 ... 138\n          PRTWORK ... 147                         DSFMT ... 138\n          PUNK                                    DSGET ... 140\n             logic ... 96                         DSLIB ... 139\n          PUNWORK ... 147                         DSLIX ... 140\n                                                  DSMEM ... 138\n          Random Number Generator                 DSTST ... 137\n             logic ... 165                        DSWYL ... 140\n          RANDOMS                                 DVCAP ... 131\n             logic ... 165                        DVEXT ... 132\n          RELEASE                                 DVSPC ... 133\n             logic ... 97                         DVTBL ... 131\n          REREAD                                  FMTAC ... 136\n             logic ... 166                        FMTLB ... 136\n          RJFCB                                   FMTWY ... 136\n             SERVCALL ... 139                     FREEM ... 127\n                                                  INITG ... 127\n          SAMSGREF                                LPADL ... 127\n             logic ... 98                         LPALD ... 127\n          SAVETAPE                                PDSDE ... 139\n             logic ... 99                         RJFCB ... 139\n          SCHED                                   SCHED ... 134\n             SERVCALL ... 134                     SCHFR ... 133\n          SCHFR                                   SCHIN ... 134\n             SERVCALL ... 133                     SCHMV ... 134\n          SCHIN                                   SORTB ... 130\n             SERVCALL ... 134                     SORTH ... 130\n0                                                                            269\n1                   Technical Guide to System Modifications\n     Index\n-       TIODD ... 129                     SMF Dump & Switch\n        TIOLK ... 129                        logic ... 104\n        TIOLP ... 129                     SMF Extraction\n        TIOUA ... 130                        logic ... 106, 109\n        UCBDK ... 128                     SMF Job Initiation\n        UCBGN ... 129                        logic ... 231\n        UCBNM ... 128                     SMF Job Termination\n        UCBUM ... 128                        logic ... 232\n        UCBVS ... 128                     SMF Merge\n        VSNFG ... 141                        logic ... 105\n        VSTMS ... 141                     SMF Statistics\n        WCOMP ... 141                        logic ... 107\n        WDCOM ... 142                     SMF Step Initiation\n        WYLDX ... 140                        logic ... 233\n     SERVICE                              SMF SVC\n        ACCNX ... 136                        logic ... 241\n        ACCON ... 135                     SMF Terminal Statistics\n        ACGET ... 134                        logic ... 108\n        ACTSM ... 135                     SMF Time Expiration\n        ACTST ... 135                        logic ... 234\n        BINLK ... 131                     SMFDUMP\n        CLOSE ... 126                        logic ... 104\n        DSCAT ... 137                     SMFMERGE\n        DSGET ... 140                        logic ... 105\n        DSLIB ... 139                     SMFSELCT\n        DSLIX ... 140                        logic ... 106\n        DSMEM ... 138                     SMFSTATS\n        DSTST ... 137                        logic ... 107\n        DSWYL ... 140                     SMFTERMS\n        DVCAP ... 131                        logic ... 108\n        DVEXT ... 132                     SMFXTRCT\n        DVSPC ... 133                        logic ... 109\n        DVTBL ... 131                     SMP Lister\n        PDSDE ... 139                        logic ... 13\n        SORTB ... 130                     SORTB\n        SORTH ... 130                        SERVCALL ... 130\n        TIODD ... 129                        SERVICE ... 130\n        TIOLK ... 129                     SORTH\n        TIOLP ... 129                        SERVCALL ... 130\n        TIOUA ... 130                        SERVICE ... 130\n        UCBDK ... 128                     ST@ ... 210\n        UCBGN ... 129                     Stand-alone DASD Label\n        UCBNM ... 128                        List/Change\n        UCBUM ... 128                        logic ... 57\n        UCBVS ... 128                     Stand-alone I/O Tester\n        VSNFG ... 141                        logic ... 58\n        VSTMS ... 141                     Stand-alone Loader\n        WYLDX ... 140                        logic ... 59\n     Service Routines                     STEPSEP\n        logic ... 125                        logic ... 110\n     SETDISP                              SVC\n        logic ... 167                        logic ... 236, 242, 243\n     SLANALYZ                             SVC 32 Validity-checking\n        logic ... 103                        logic ... 248\n0    270\n1                        Technical Guide to System Modifications\n                                                                           Index\n-         SVC 99 Local Exit                       SERVCALL ... 128\n             logic ... 245                        SERVICE ... 128\n          SVCDUMMY                             UCBPRINT\n             logic ... 256                        logic ... 116\n          SVCMIL                               UCBUM\n             logic ... 257                        SERVCALL ... 128\n                                                  SERVICE ... 128\n          TAGCOBOL                             UCBVS\n             logic ... 111                        SERVCALL ... 128\n          Tape Copy                               SERVICE ... 128\n             logic ... 32, 99                  UCS1UN\n          Tape Label Analysis/Copy                logic ... 258\n             logic ... 103                     Unload by VolSer\n          Tape Print                              logic ... 251\n             logic ... 8\n          TAPEMARK                             Variable Link-Edit\n             logic ... 112                        logic ... 117\n          TCAM Lower-case Translation          VARLINK\n             logic ... 229                        logic ... 117\n          TCBUSER Propagation                  VSAM Catalog Lister\n             logic ... 249                        logic ... 12\n          TESTSD95                             VSNFG\n             logic ... 113                        SERVCALL ... 141\n          Time & Date Formatting                  SERVICE ... 141\n             logic ... 168                     VSTMS\n          TIMEDAY                                 SERVCALL ... 141\n             logic ... 168                        SERVICE ... 141\n          TIODD                                VTOC and PDS Lister\n             SERVCALL ... 129                     logic ... 74\n             SERVICE ... 129                   VTOC Lister\n          TIOLK                                   logic ... 79\n             SERVCALL ... 129\n             SERVICE ... 129                   WCOMP\n          TIOLP                                   SERVCALL ... 141\n             SERVCALL ... 129                  WDCOM\n             SERVICE ... 129                      SERVCALL ... 142\n          TIOUA                                WYLBUR Compress\n             SERVCALL ... 130                     logic ... 119\n             SERVICE ... 130                   WYLBUR DASD Maintenance\n          TMSBACKS                                logic ... 118\n             logic ... 114                     WYLBUR Decompression\n          TMSULIST                                logic ... 120\n             logic ... 115                     WYLBUR Initialization\n          TRTAB ... 211                           logic ... 80\n                                               WYLBUR NOTIFY SVC\n          UCB Lister                              logic ... 237\n             logic ... 116                     WYLBUR Password Lister\n          UCBDK                                   logic ... 121\n             SERVCALL ... 128                  WYLBUR VTOC & PDS Lister\n             SERVICE ... 128                      logic ... 122\n          UCBGN                                WYLCLEAN\n             SERVCALL ... 129                     logic ... 118\n             SERVICE ... 129                   WYLCOMP\n          UCBNM                                   logic ... 119\n0                                                                            271\n1                   Technical Guide to System Modifications\n     Index\n-    WYLDCOMP                             YALECOMP\n        logic ... 120                        logic ... 123\n     WYLDX\n        SERVCALL ... 140                  ZAP and EXEC Program\n        SERVICE ... 140                      logic ... 78\n     WYLPASWD\n        logic ... 121                     3270 Message Facility\n     WYLVTOC                                 logic ... 40\n        logic ... 122\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0    272\n1                        Technical Guide to System Modifications\n-\n0                                   TABLE OF CONTENTS\n-         INTRODUCTION  . . . . . . . . . . . . . . . . . . . . . . . . . . . ii\n-         Section                                                           page\n0         1.  INSTALLATION AND MAINTENANCE  . . . . . . . . . . . . . . . . .  1\n0         2.  PROGRAM SERVICES  . . . . . . . . . . . . . . . . . . . . . . .  2\n0                Program Organization . . . . . . . . . . . . . . . . . . . .  2\n                 Utility Programs . . . . . . . . . . . . . . . . . . . . . .  2\n                 Service Routines . . . . . . . . . . . . . . . . . . . . .  124\n0         3.  MACRO DESCRIPTION . . . . . . . . . . . . . . . . . . . . . .  169\n0                General Macros . . . . . . . . . . . . . . . . . . . . . .  169\n                 Field Descriptor Macros  . . . . . . . . . . . . . . . . .  212\n                 Documentation Macros . . . . . . . . . . . . . . . . . . .  224\n0         4.  SYSTEM MODIFICATIONS  . . . . . . . . . . . . . . . . . . . .  228\n-         Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  261\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                                                            iii\n./ ADD NAME=TPGUIDE  0100-13237-13237-1205-02310-02310-00000-GERHARD\n1                                     Start on third or fourth print line\n\n\n  \u00d0\u00d7\u00d7\u00d7\u00af\n  |   |\n  \u00bf\u00d7\u00d7\u00d7]                              Right edge should be at or over perforation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u00d0\u00d7\u00d7\u00d7\u00af\n  |   |\n  |   |\n  \u00bf\u00d7\u00d7\u00d7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u00d0\u00d7\u00d7\u00d7\u00af\n  |   |\n  \u00bf\u00d7\u00d7\u00d7]\n\n1                                     Start on third or fourth print line\n\n\n  \u00d0\u00d7\u00d7\u00d7\u00af\n  |   |\n  \u00bf\u00d7\u00d7\u00d7]                              Right edge should be at or over perforation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u00d0\u00d7\u00d7\u00d7\u00af\n  |   |\n  |   |\n  \u00bf\u00d7\u00d7\u00d7]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \u00d0\u00d7\u00d7\u00d7\u00af\n  |   |\n  \u00bf\u00d7\u00d7\u00d7]\n\n1\n-\n0\n-\n-\n-\n-                                      User's Guide\n0                                           to\n0                               Tele-Processing Facilities\n-\n-                                            *\n                                         *       *\n\n                                ______ *           * ______\n                                ______      PIDI     ______\n                                       *           *\n\n                                         *       *\n                                             *\n-\n-\n                                  Copyright 1992-1993 by\n                                Public Interest Data, Inc.\n                                    5113 Leesburg Pike\n                               Baileys Crossroads, VA 22041\n0                                     (703) 931-9500\n-\n0                               Printed on February 7, 1993\n1\n-\n0                                 INTRODUCTION\n+                                 INTRODUCTION\n-     This manual describes the facilities  available for remote processing\n      at the  PID computer  center.   This  document should  enable you  to\n      select and use equipment intended for Tele-Processing.\n0     The Public Interest Data (PID)   service supports the following types\n      of remote communication:\n0        1.  Asynchronous (Start-Stop):  supports TeleTypes  (TWX by IBM\n             terminology,  abbreviated  TTY here-after)   and compatible\n             terminals.\n0        2.  Synchronous type 1 (BSC1): supports 2780, 3780, and similar\n             devices with a direct line to the PID Computer Center.\n0        3.  Synchronous type 2 (BSC2): supports 2780, 3780, and similar\n             devices with a dial-up line to the PID Computer Center.\n0        4.  Synchronous type 3 (BSC3; multi-drop line): supports direct\n             lines to 3271, 3274 (BSC mode) and 3275 control units.\n0        5.  Synchronous Data Link Control (SDLC): supports direct lines\n             to 3274 (SDLC mode) and 3276 control units.\n0        6.  SDLC non-CRT SNA controllers (e.g., 3790; used for JES2 job\n             submission).\n0        7.  Personal   Computers   using    BARR/SNA,    BARR/3270   or\n             BARR/Gateway or similar software that appears to the system\n             as an SDLC controller.\n0        8.  Dial-up 3174,   3274 and 3276   controllers (either  BSC or\n             SDLC), also AS/400s and P/Cs in 3x74 mode, and dial-up JES2\n             RJE terminals using SDLC.\n0     The PID center currently does not support the following:\n0        1.  Devices or control units requiring HDLC.\n0        2.  The IBM 3767 and similar  SNA remote terminals.   Note that\n             the Network  Terminal Option  (a VTAM  component)  supports\n             only 3767  terminals.  The  PID Tele-Processing  controller\n             converts TTY I/O  to 3767 mode,  but is  not configured for\n             native 3767s.\n0        3.  Asynchronous terminals that are not TTY compatible, such as\n             the IBM 1050, IBM 2740, and IBM 2741.\n0     This manual also includes a short section describing logon procedures\n      for CRT devices (327x and compatibles, remote or local).\n1                              PID Tele-Processing Services\n-\n0                                        Section 1\n+                                        Section 1\n0                               ASYNCHRONOUS COMMUNICATION\n+                               ASYNCHRONOUS COMMUNICATION\n-          Asynchronous communication  supports directly  connected and  dial-up\n           terminals that are TeleType\u00a3 compatible.   PID does not support other\n           asynchronous protocols and devices,  such as the IBM\u00a5 1050,  2740 and\n           2741.\n-\n           1.1   COMMUNICATIONS PARAMETERS\n+          1.1   COMMUNICATIONS PARAMETERS\n+                ______________ __________\n0            \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                                \u00af\n             |   Modem/Line      |  Full duplex                            |\n             |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+            \u00bf                   \u00d7                                         ]\n             |   Terminal device |  TTY: local echo on (half duplex)       |\n             |                   |  CRT: local echo off(full duplex)       |\n             |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+            \u00bf                   \u00d7                                         ]\n             |   Character length|  7 bits                                 |\n             |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+            \u00bf                   \u00d7                                         ]\n             |   Stop bits       |  1                                      |\n             |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+            \u00bf                   \u00d7                                         ]\n             |   Parity          |  even                                   |\n             |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+            \u00bf                   \u00d7                                         ]\n             |   Flow control    |  XOn-XOff                               |\n             |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+            \u00bf                   \u00d7                                         ]\n             |   Handshaking     |  none                                   |\n             |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+            \u00bf                   \u00d7                                         ]\n             |   Speed           |  1200, 2400 or 9600                     |\n             \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                                \u00bf\n0          PID uses full-duplex transmission with local echo,  using 7 bits with\n           even parity, and one start and stop bit, and hand-shaking (X-On/X-Off\n           flow control) on all asynchronous (Start/Stop) lines.\n0          PID also  supports asynchronous  devices,  connecting  to a  protocol\n           converter,  that  appear to  the system as  remote 3270  CRTs.   This\n           process  is  described  in  a   separate  section.\u00b7  (The  parameters\n           described in  this section  apply with the  exception that  the local\n           echo option should be disabled.   The protocol converter, or the host\n           system, provides all information displayed on your screen.)\n-          --------------------\n-          \u00a3TeleType is a trademark of Western Union\n0          \u00a5IBM is a trademark of International Business Machines Corporation\n0          \u00b7See \"Protocol conversion\"\n0                                           -1-\n1                         PID Tele-Processing Services\n      Asynchronous Communication\n-     Asynchronous communication  derives its name  from the fact  that the\n      beginning of a character on the transmission line is not synchronized\n      to any other event.  When idle, a constant \"mark\" level is maintained\n      (the same as continuous \"1\" bits). To signal the start of a new byte,\n      a bit of \"0\" is sent; this is known as the START bit.\n0     The Start bit is followed by the data character (byte), consisting of\n      seven bits.  A value of all ones (X'7F') has a special meaning; it is\n      a padding  character that is  stripped either  by the hardware  or by\n      software.\n-     The data character is followed by a PARITY bit.  This bit is on (\"1\")\n      if the preceding data byte had an odd number of one bits,  else it is\n      zero if the  number of bits was  even.  The total number  of non-zero\n      bits sent in this  fashion for each byte is always  even,  hence EVEN\n      parity.\n-     To introduce a small processing delay, and to guarantee a non-zero to\n      zero transition  for the next character's  start bit,  a STOP  bit is\n      sent.  This  makes the total transmission  length ten bits  per byte;\n      references to two stop bits are obsolete, and applied only to 110 bps\n      transmission. If your equipment will only send two stop bits, the PID\n      hardware will accept  this;  if the equipment expects  to receive two\n      stop bits, it should work (but run more slowly).\n0     Full-duplex  transmission refers  to the  fact that  either side  may\n      transmit and receive at the same time.  In practice, one side will be\n      transmitting,  and the other receiving,  with mode switching based on\n      control characters.  Either side may interrupt the other by sending a\n      BREAK signal.   A hardware  break is indicated  by dropping  the mark\n      state of the line (i.e., sending zeroes) for 200 to 500 milliseconds,\n      with 250 the preferred value. This break interrupts the other side. A\n      software  break  is   also  available  (Control-D  or   EOT  on  most\n      terminals),  that does  not interrupt;  it may be used  only when the\n      issuer is in transmit mode.\n-     Any character sent to PID is not sent  back to the user;  if you wish\n      to see what you  type,  you must place your device  into \"Local Echo\"\n      mode - this causes the terminal  to echo your type-in locally.   Note\n      that  some  manufacturers  refer  to   this  as  \"Half-duplex\"  mode,\n      confusing  it  with  transmission line  capabilities.   If  all  your\n      equipment has xxx-duplex switches,  place  the modem into full-duplex\n      mode,  and the terminal into half-duplex (do not use half-duplex with\n      the protocol converter).\n-     Origination  of   transmission  is   controlled  by   pacing  control\n      characters.   When a carriage return  (enter)  or control-D (EOT)  is\n      received  by  PID,   then  the user  is  placed  into  receive  mode.\n      Transmissions  from TCAM  always terminate  with  an X-On  character;\n-                                      -2-\n1                              PID Tele-Processing Services\n           Asynchronous Communication\n-          transmissions  from WYLBUR  terminate  with an  X-On  only when  this\n           option is chosen by the user.  Transmissions from VTAM terminate with\n           a  carriage return  (for compatibility  with TCAM,   the KERMIT  file\n           transfer program inserts X-Ons at the end of its buffers).\n0               There exists  a tendency to start  typing input as  soon as\n                the prompt (e.g., COMMAND ?) appears on the terminal.  When\n                the X-On option is in effect,  then all characters received\n                at PID before  the X-On is sent are lost;   the user cannot\n                see when the X-On arrives...\n0               When you run with X-On,  try to allow at least a tenth of a\n                second  before typing  your  response  to a  prompt.   This\n                potential loss of input is the reason that X-On is not used\n                by default.\n0          If you have a programmable device,  do not use either a time delay or\n           a character string (such as \"?  \") as the line turnaround.  Only X-On\n           is reasonably safe for this purpose. The time delay can be overrun by\n           a busy system,  and a character string might appear in an operator or\n           system message.\n0          X-On/X-Off protocol, also known as flow control,  and referenced as a\n           hand-shaking mode,   permits a device to  get the other side  to stop\n           sending until it  is ready for more data (an  X-Off requests stopping\n           transmission, an X-On resumption). This is normally used when devices\n           with disparate processing speeds need  to communicate.   Flow control\n           is supported by  PID on all of  its lines,  and is  required for fast\n           (2400-9600 bps) lines, as well as long WYLBUR LIST commands and other\n           unpaginated output.\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           -3-\n1                         PID Tele-Processing Services\n      Asynchronous Communication\n-     1.2   CALLING PID\n+     1.2   CALLING PID\n+           _______ ___\n0     One parameter was left out of the preceding section, that of the line\n      speed.  The speed  may usually be changed depending  on your hardware\n      (device and modem).  For a direct connection, the speed is fixed, and\n      is determined when the  line is installed.  It is usually  set to the\n      highest value  the terminal  device can  handle.   In  this document,\n      transmission speed is  described in bits per second  (bps).  The term\n      \"baud\" is sometimes  used for transmission speed;   baud measures the\n      number  of  carrier  signal  transitions  per  second,   and  is  not\n      necessarily related to  the number of data bits  sent.   For example,\n      300 bps modems also run at 300 baud, but 1200 and 2400 bps modems run\n      at 600 baud.\n-     For direct  connection,  speeds  up to 9600  bps are  available.  For\n      direct lines  to be  installed by  a telephone  company,  one  to two\n      months may be required.\n0     Dial-up service is available as follows:\n0        1.  1200, 2400, 9600 with MNP-4, MNP-5 - call   (703) 931-9105.\n             This is a rotary with FastComm 9696 modems.  9600 uses V.32\n             mode,  and  is not  compatible with  older 9600  bps modems\n+                           not\n             using V.29 mode.   All modems on this line offer negotiated\n             MNP-4\u00a9  (error correction)   and  MNP-5 (data  compression)\n             protocols at all speeds.\n0        2.  for other speeds and services, contact Technical Support at\n             (703) 931-9500x48. Note that we no longer support 110 bps.\n0        3.  300, 1200, 2400 bps (Bell 212A) - call (703) 931-9108\n-\n      PID currently runs only one production machine,  the B-system.   When\n      you use any of the above numbers to call PID:\n0          After the connection is established, hit ENTER (or RETURN)\n           Type the name of the subsystem you wish to be connected to,\n           or another carriage return - you will be prompted with some\n           of the valid subsystem identifiers (in message CMT405):\n0        1.  WYLB - WYLBUR on the B machine (currently a 4381-R14)\n0        2.  SYSB - VTAM services on the B machine in NTO mode. Use for:\n0            KERMIT (the non-TSO file transfer program),\n             TSO (including KERMIT file transfer),\n      --------------------\n-     \u00a9Microcom Networking Protocol  (MNP)  is a trademark  and proprietary\n       product of Microcom, Inc.\n0                                      -4-\n1                              PID Tele-Processing Services\n           Asynchronous Communication\n-                 CICS (by special arrangement only),\n                  WYLBUR (\"new\" WYLBUR; also supports KERMIT).\n-          Next you  may receive  a CMT411 or  CMT413 prompt  message soliciting\n           your terminal type.  This entry is  required but presently ignored by\n           non-WYLBUR subsystems (e.g., TSO).  Note that an improper, but valid,\n           entry may cause  problems subsequently - please ensure  that you have\n           the correct type or option:\n0             1.  (CR) - carriage return (or enter) indicates a standard TTY,\n                  without special support.  WYLBUR will not support automatic\n                  tab setting,  screen clearing,  etc.   For a CRT,  a screen\n                  capacity of  80 by 24  is assumed.   The user will  not use\n                  SAS/Graph\u00a7 files.\n0             2.  XON -  as above,  but every  prompt sent by WYLBUR  will be\n                  terminated by an X-On character.  This mode is required for\n                  most intelligent terminals used for file transmission;  the\n                  X-On serves as a pacing character informing the device that\n                  the next line may be sent.\n0             3.  SAS - same  as the (CR)  entry,  but  the translation table\n                  used for  output is the one  supplied by the  SAS Institute\n                  for SAS/Graph.   If an XON is required, it may be requested\n                  with a 'SET XON' command  after the LOGON sequence.   These\n                  translation  services   are  not  available  in   NTO  mode\n+                                              ___\n                  (connection to new WYLBUR via SYSA|SYSB).\n0                 Note that the character codes for the caret, tilde, reverse\n                  slash,  reverse quote,  and left  bracket differ from those\n                  used by WYLBUR.  Both the WYLBUR and SAS code for the right\n                  bracket are supported,   but on input,  all  characters are\n                  translated to WYLBUR codes, not SAS codes.\n0             4.  TEK  - SAS/Graph  support for  the Tektronix  4100 CRT  and\n                  printer.\n0             5.  HP - SAS/Graph support for the Hewlett-Packard plotter.\n0             6.  FOX - for the Perkin-Elmer 1100 and 1200 CRTs\n0             7.  IMS - for the IMS Ultima II, Tele-Video 950, and compatible\n                  CRTs.\n0             8.  DM10 - for the Datamedia  Colorscan terminals (CS10 through\n                  CS60).\n0             9.  ESP - for the Hazeltine Esprit III Color terminal.\n0          --------------------\n-          \u00a7SAS/Graph and SAS are registered trademarks of SAS Institute Inc.\n0                                           -5-\n1                         PID Tele-Processing Services\n      Asynchronous Communication\n-        10. IBM3101  - supported  in character,   but  not block  mode.\n             Special screen attributes (intense,   non-display)  are not\n             supported   in   this   mode.    Only   tab   support   and\n             screen-clearing are available.\n0        11. DEC - for the Digital Equipment Corporation's DEC-Writers.\n0        12. VT100 - supports the DEC VT100+, VT131, etc.,  the WYSE-75,\n             and other  compatible terminals.   Suppression  of password\n             input is available for the WYSE, but not for the DEC CRTs.\n0        13. VT200  -   supports  the  DEC   VT220,   the   WYSE-85  and\n             compatibles.\n0        14. WYSE - for the WYSE 50 and 350 terminal. Note that the WYSE\n             75, 100, etc. are not compatible with this (for the 75, use\n             VT100;  for the 85, use VT200).   Please make sure that the\n             terminal is set to WYSE mode,   and not one of the optional\n             modes, such as TV925, HZ1500,  etc.   Use this mode for the\n             Datalink 125 terminal (in WYSE-50 mode).   If you are using\n             a PC running ProComm Plus,   this is the preferred terminal\n             type (tab support, auxiliary print support, etc.).\n0        15. WY60 -  supports the  WYSE 60  when it  is set  to WYSE-50+\n             mode, but not when it is set to WYSE-50 or other mode.\n0        16. WY300 - supports  the WYSE 300 color  terminal.   Note that\n             the terminal  should be set to  full color mode  (with both\n             foreground  and   background  colors   settable).    Member\n             LOGONWY3 in the public library  has sample instructions for\n             loading user designed characters  and maintaining a display\n             showing tab positions and a column scale.\n0        17. TV920 - supports  the TeleVideo 920 and 925,   and WYSE and\n             Datalink terminals in compatibility mode.\n0        18. TVPT - supports the TeleVideo Personal Terminal.\n0        19. 5150 - for  the IBM P/C running  the communications package\n             supplied by  PID (in order to  obtain this,  you  must show\n             proof of  purchase of  the IBM  Asynchronous communications\n             package,  and supply a  floppy;  call (703) 931-9500x50 for\n             details).    This package  is obsolete.   We now  recommend\n+                         This package  is obsolete    We now  recommend\n             KERMIT and  ProComm.   Either is  available for  copying to\n+            KERMIT and  ProComm    Either is  available for  copying to\n             your preformatted 360K floppy.\n+            your preformatted 360K floppy\n-     If  your terminal  has  control sequences  for  tab setting,   screen\n      clearing,  and  the like,   but is  not presently  supported,  please\n      contact the systems group for  support.  Call (703) 931-9500x50,  and\n      provide the  detailed control  sequence information  (or lend  us the\n      manual for a few days).\n-\n                                       -6-\n1                              PID Tele-Processing Services\n           Asynchronous Communication\n-          Some of  the terminals listed  above have auxiliary  printer support.\n           This allows  you to  attach a  printer to  your terminal,   and print\n           output using manual intervention,  or defined commands.   Known print\n           sequences are listed in Appendix C as \"Auxiliary...\"  Simple listings\n           on such a  printer may be obtained  by using a LIST  command with the\n           AUXILIARY subcommand.   More complex listings may be obtained by also\n           using MARKER and PAGE, or by FETCHing and LISTing with the CC option.\n0          To list a  two-page document (with a  pause after 40 lines  to change\n           paper):    LIST PAGE 40 AUX\n           After 40 lines  are printed,  you will be prompted  to \"HIT ENTER\" to\n           continue.\n0          For devices having both transparent (no terminal list while printing)\n           and non-transparent (terminal  echoes all printing)  modes,   AUX and\n           AUX1 will select transparent mode, AUX2 selects non-transparent.\n0          In order  to issue  your own  control sequences  to a  terminal or  a\n           printer,  you may  use the transparent type (TTYPE  or TTY)  command.\n           The operands on TTYPE are character or hexadecimal strings.   To send\n           ASCII control characters,  locate the ASCII value in Appendix A,  and\n           use the value shown in the  last column.   Note that functions listed\n           in the  appendix are  device dependent,   and may  not exist  on your\n           terminal.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                           -7-\n1                         PID Tele-Processing Services\n      Asynchronous Communication\n-     1.3   KERMIT FILE TRANSFER\n+     1.3   KERMIT FILE TRANSFER\n+           ______ ____ ________\n0     KERMIT (KL10  Error-free Reciprocal Micro  Interface Transfer)   is a\n      proprietary file transfer system provided by Columbia University.  It\n      is available for the IBM P/C, compatibles,  and many non-IBM systems.\n      The technical  group provides  copies of the  P/C version  on request\n      (please supply a  3\" or 5\" floppy in PC-DOS  format);  other versions\n      may be made available - call (703) 931-9500x48 for information.\n0     Currently the  IBM mainframe version of  KERMIT is supported  under a\n      VTAM application (KERMIT), WYLBUR  and TSO; you must have a WYLBUR or\n      TSO  userid to  use it.    WYLBUR-style allocation  and dataset  name\n      validity-checking is  not completely implemented.  Allocation  of new\n      files on a pack other than that specified in your user definition may\n      not be available.\n0     Note:    KERMIT  is  accessible  from WYLBUR,   TSO  and  as  a  VTAM\n+     Note\n      application.   Due to the environment, there are minor differences in\n      available commands and features.   However,   if you are transmitting\n+                                        However\n      large files and you are using  P/C KERMIT,  ProComm Plus,  or another\n+                 and\n      package supporting long packets,  then VTAM KERMIT is the fastest and\n      most economical choice.\n0     To prepare KERMIT,  examine your  floppy.  File MSKERMIT.INI contains\n      initialization  statements;   double-check  that  the  communications\n      parameters are  set to match  your modem  and TSO (7-bit  data,  even\n      parity, local echo, 1 or 2 stop bits, and correct speed).\n0     A sample MSKERMIT.INI file might look like this:\n        SET PORT 1                 Specify the serial connection (you may\n                        need PORT 2 if you have a serial printer or mouse)\n        SET TERMINAL VT102         Use \"advanced\" VT-100 mode\n        SET LOCAL ON               Local echo on\n        SET BAUD 1200              Modem speed\n        SET PARITY EVEN            Transmission parity\n        SET FLOW XON               X-On/X-Off flow-control is required\n        SET HAND NONE                hence no X-On for line turn-around\n        SET RETRY 63               set error limit for noisy phone lines\n        SET KEY SCAN 177           1/2 instead of \"DELETE\" make backspace\n        8                          2/2 key send a backspace code.\n        DIAL 703931910x            doesn't work on all modems\n        COMMENT  To CMT41x prompt respond with VT100 as the terminal type\n0     On the P/C, make the default drive the one KERMIT resides on.  Invoke\n      KERMIT;  wait  for initialization  messages (note  that the  Columbia\n      University version of HAYES.TAK changes the speed)  to complete.  You\n      may issue a SHOW command to check  the options.  Note that the option\n      labelled IBM is really  for an IBM/VM system running odd  parity - do\n      not use it.\n0     Type CONNECT  to get  into terminal  and dial  mode.   Establish  the\n      connection (either  type the  dial command for  your modem,   or dial\n      manually),  and  hit Carriage Return  twice.  You should  receive the\n-                                      -8-\n1                              PID Tele-Processing Services\n           Asynchronous Communication\n-          standard COMTEN prompt message number CMT410 asking for the system to\n           connect you to (WYLA, WYLB,  SYSB).  In the event the B-system is out\n           of service for an extended period,   operations may run everything on\n           the A-system;  in this case use SYSA as the response).   Issue KERMIT\n           (non-TSO; KERMIT file-transfer only) or a\n                                   LOGON userid/password\n           command,  and wait for the TSO READY response.   You may also connect\n           to WYLBUR normally,  and then type KERMIT (after KERMIT,  type WYLBUR\n           to return to WYLBUR).\n0          If you have not done so before, or are not sure, issue a\n                                     PROFILE CHAR(BS)\n           TSO  command  to  support  the backspace  character  as  a  backspace\n           function.\n0          If you invoke  KERMIT outside of TSO,   you may be prompted  for your\n           userid  and  password.   Valid  signon   results  in  a  response  of\n           KERMIT-NET> or KERMIT-Wyl>, as appropriate.\n0          Invoke KERMIT;  wait for the KERMIT-TSO> response.   For exporting of\n           files, you may set the DCB options now, or just prior to the transfer\n           of each  file.   When  a file is  sent to the  mainframe with  a name\n           already in use, you will be prompted to permit destruction of the old\n           file.   In SERVER  mode,  duplicates  fail  unless you  issue a  \"SET\n           REPLACE\" command beforehand.   Replaced files will keep their old DCB\n           characteristics (RECFM,  LRECL  and BLKSIZE).   To replace  a dataset\n           using currently set options, use \"SET UPDATE\".\n0          To display the option settings, type STATUS.\n0          Settings may  be changed  with 'SET option  value';  where  option is\n           RECFM,  LRECL or BLKSIZE.  For RECFM,   the only supported values are\n           'F', 'V' and 'W';  for LRECL and BLKSIZE any valid combination may be\n           used.\n-          To transmit a file to the host system from the P/C\n+             ________ _ ____\n0          In terminal mode (after a CONNECT), issue a RECEIVE dsn or RECEIVE *\n           command.  The form \"RECEIVE *\" is used  when you are sending multiple\n           files,  or when you wish to use the  same name for the file (the name\n           is taken from  the SEND command on  the P/C side).   Note  that valid\n           characters in a P/C name are not  necessarily valid on the host.  All\n           invalid characters are  converted to dollar signs  (this could result\n           in inadvertant  duplicate names),   periods are  inserted to  prevent\n           index names longer than eight characters,  and the first character of\n           a level may not be a digit (1-9 are changed to A-I, and 0 to Z).\n0          Note that  an unquoted \"dsn\"  will be  prefixed by your  current TSO,\n           WYLBUR or explicitly set prefix; a name in paired apostrophes will be\n           used as is (with apostrophes edited out and translated/converted into\n           a valid host  name).   Unlike WYLBUR,  quotes may not  be used,  only\n           apostrophes.    If the  reference is  to  a member  of a  partitioned\n-                                           -9-\n1                         PID Tele-Processing Services\n      Asynchronous Communication\n-     dataset  (PDS),   then  the  member name  is  placed  in  parentheses\n      following the dsname, but inside any quotes.  KERMIT-TSO will respond\n      with one or more messages, and will be ready for reception only if it\n      says so.  You  now have twenty seconds  to get the P/C  to begin file\n      transmission:  type Control-\u00a8 (using the control key as a shift key),\n      then type C; if you have KERMIT 3 or later, just use Alt-X to switch.\n      You will get a KERMIT-MS prompt. Type\n                                  SEND file.ext\n      where \"file\" may  be a file name  prefixed by a drive  letter,  e.g.,\n      \"SEND A:ANYOLD.TXT\".  The P/C will either produce error messages,  or\n      display  a new  screen with  file transfer  messages and  statistics.\n      When transfer completes, remember to CONNECT to the mainframe to EXIT\n      KERMIT and LOGOFF TSO, unless you have additional transfers to do.\n-     To receive a file from the host\n+        _______ _ ____\n0     CONNECT to KERMIT-TSO; type\n                                   SEND dsname\n      and wait for  a response.  Normal response is \"Waiting  10 seconds to\n      send\". Note that KERMIT-TSO only locates cataloged files.   For newer\n      KERMITs (3 and later), issue Alt-X;  for older ones use Control-\u00a8 and\n      C to return to the P/C KERMIT, and issue a\n                                RECEIVE file.ext\n      command to specify the filename on the P/C. Note that the name may be\n      prefixed  by  a  drive  specification,   but  not  a  directory  name\n      (A:ANYOLD.TXT is valid,  but A:WP\\DOCUMENT.TXT  is not).   The screen\n      will display file transfer status messages and statistics.  Note that\n      KERMIT will  not replace an  existing file on  the P/C side  (it will\n      prompt you on  the TSO side),  and  has no provision for  deleting an\n      existing file.  When file transfer  completes,  remember to return to\n      terminal mode to EXIT from KERMIT-TSO  and to LOGOFF TSO,  unless you\n      plan additional file transfers.\n-     SERVER mode:\n+     ______ ____\n0     The current  version of  KERMIT has been  modified to  support SERVER\n      mode.  Whenever you have the KERMIT-TSO> prompt, type SERVER.  On the\n      PC, return to PC-KERMIT mode (Control-right bracket,  then C).  Files\n      may be transferred to the mainframe by typing \"SEND filemask\";  files\n      may be copied to the PC by typing \"GET filename\".\n0     \"filemask\" may be any wild-card selection (or a simple name) valid on\n      the PC,  but note that resulting filenames that are not syntactically\n      valid on the mainframe side will be rejected, or changed to meet host\n      standards.\n0     The command  \"REMOTE TYPE  filename\",  if supported  on the  PC side,\n      causes a mainframe file to be typed on the PC.\n0     The command QUIT terminates SERVER  mode;  the command BYE terminates\n      SERVER mode, KERMIT and causes a LOGOFF from TSO.\n-                                     -10-\n1                              PID Tele-Processing Services\n           Asynchronous Communication\n-          The  host  KERMIT  supports a  TAKE dsname  command;   the  specified\n           \"dsname\"  is a  file or  member  containing KERMIT  commands in  text\n           format.\n0          The host KERMIT now supports a DELETE dsname, DELETE pds(member)  and\n           DELETE dsname,volser command.  Input parameters are as documented for\n           batch program DELETER.\n0          The  host KERMIT  program  has been  modified  to  support the  \"long\n           packet\"  protocol extension.    In  addition to  the  normal 94  byte\n           packets,  the  long protocol is able  to send and receive  packets of\n           lengths up to 2000 bytes.  Long packets are supported by KERMIT 3 and\n           later (PC side),  and ProComm Plus version 2.   On noisy lines,  long\n           packets may require a significantly longer transmission time.  If you\n+                                              longer\n           use long packets, monitor retransmissions or total throughput values;\n           reduce the packet size when you get too many retransmissions.\n-          Under the  license issued by  Columbia University,  KERMIT  is freely\n           available to all requesters for  non-commercial use.  The P/C version\n           and the machine readable documentation are available for copying to a\n           floppy disk you supply;  additional documentation,  other versions of\n           KERMIT,  or the entire distribution tape,  are available for the cost\n           of reproduction.\n-          Special SET options:\n+          _______ ___ _______\n0          SET VOL  serial - allows  you to save  new datasets on  the specified\n           volume serial.  You must be authorized to use the pack.   SET VOL CAT\n           reverts to  normal mode.   Setting  a volume may  cause unintentional\n           problems when a dataset already exists, but on a different volume.\n0          SET  STRIP ON|OFF|SEnd|REceive|BOth  -  this  option causes  trailing\n           blanks to be removed when text files are transmitted;  either in BOth\n           directions,  or  specifically for SEnd  or REceive files  only.   The\n           default is not to strip.\n0          SET TAB ON|OFF - this option,  when turned on,  causes tab characters\n           in  received files  to  be  replaced by  one  or  more blanks.    Tab\n           positions are assumed to be in  the P/C standard positions,  spaced 8\n           characters  apart.    This   option  may  be  helpful   when  sending\n           documentation files to the host.\n0          SET  UPDate|REPlace|ADD -  SET ADD,   the default,   allows only  the\n           creation of  new files on  the host  side;  duplicate file  names are\n           rejected (SERVER mode), or the user is prompted.   SET REPlace causes\n           duplicate files to  be replaced with the existing  DCB options.   SET\n           UPDate  will  replace existing  files  using  the currently  SET  DCB\n           options (RECFM, LRECL and BLKSIZE).  No option will allow replacement\n           of a partitioned dataset with a sequential, and vice versa.\n-\n0                                          -11-\n1                         PID Tele-Processing Services\n      Asynchronous Communication\n-     1.4   PROCOMM PLUS CONSIDERATIONS\n+     1.4   PROCOMM PLUS CONSIDERATIONS\n+           _______ ____ ______________\n0     Unlike ProComm,  described in the next section,  ProComm Plus\u00b6 is not\n      Shareware,   but   is  a  proprietary   product  sold   by  Datastorm\n      Technologies, Inc..\n0     The following options are suggested for WYLBUR and KERMIT use:\n0       Modem Options (Alt-S, first line)\n        General Options\n0       A - Wait for connection       45  (45-60 seconds recommended)\n        C - Auto baud detect         OFF* (must be OFF for dial-out)\n0       Modem commands\n0       B - Dialing command         ATDT  (use ATDT9, for outside line\n                                           or prepend 9, to phone numbers)\n0       Terminal options (Alt-S, line 2)\n0       A - Terminal emulation   WYSE 50* (if you prefer, VT-100)\n        B - Duplex                  HALF* (TTY mode; use FULL for CRT)\n        C - Flow control        XON/XOFF*\n        D - Hard flow control        OFF  (depends on your modem)\n        E - Line wrap                 ON  (required in TTY and CRT mode)\n        F - Screen scroll             ON  in TTY mode; OFF in CRT mode\n        G - CR translation (in/out)   CR\n        H - BS translation      NON-DEST*\n0       KERMIT setup (Alt-S, line 8, KERMIT protocol)\n0       A - Control quote char        35\n        B - Maximum packet size     1024 (long packets; 94 short)\n        C - Pad character              0\n        D - Number of pad chars        0\n        E - 8th bit quote             38\n        F - Handshake character        0  Handshake must not be same as\n        G - End of line char          13    End-of-line character\n        H - File type               TEXT* (use BINARY at own risk)\n        I - Block check type           3* (best; insignificant overhead)\n        J - Block start                1\n0     * indicates non-default (altered) entries\n-     On the host,  enter SERVER mode  (connect to KERMIT and type SERVER).\n      To exit server mode,  use Alt-K and function 3(FINISH)  or 4(LOGOFF);\n      note that these may  have to be issued twice if  a file transfer left\n      the server unsynchronized.\n      --------------------\n-     \u00b6ProComm Plus is a trademark of Datastorm Technologies, Inc.\n0                                     -12-\n1                              PID Tele-Processing Services\n           Asynchronous Communication\n-          To send files to the host,  issue  Alt-K function 2 or press the PgUp\n           key (then specify 2 for KERMIT). When prompted, specify the file name\n           or mask.  Remember  to set the REPLACE option before  starting if you\n           wish  to replace  existing files.   ProComm failures  are not  always\n           indicated  as such  (notably when  file  allocation fails  due to  an\n           invalid or duplicate name).\n0          To receive files from the host in SERVER mode, issue Alt-K function 1\n           and respond with  the file name.  When  not in SERVER mode,   issue a\n           \"SEND filename\" command on the host side, then use the PgDwn key with\n           option 2 (KERMIT).  Wait  about 5 seconds before pushing the  2 - the\n           mainframe KERMIT has a built-in 10 second delay.\n-          The WYLBUR AUX options on LIST (ONLINE) have been tested with VT-100,\n           TeleVideo 925 and WYSE-50 modes.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                           -13-\n1                         PID Tele-Processing Services\n      Asynchronous Communication\n-     1.5   PROCOMM CONSIDERATIONS\n+     1.5   PROCOMM CONSIDERATIONS\n+           _______ ______________\n0     ProComm\u00bc is one of the popular PC telecommunications packages.  It is\n      available  from  PID  for  copying  on a  user's  3\"  or  5\"  floppy;\n      documentation  is   available  only   from  Datastorm   upon  product\n      registration.\n0     The following options are suggested for WYLBUR and KERMIT use:\n0       Terminal options (Alt-S, option 2)\n0       Terminal emulation        VT-100* (use ANSI-BBS on color P/Cs)\n        Duplex                      HALF* (TTY mode; use FULL in CRT mode)\n        Flow control            XON/XOFF*\n        CR translation (in/out)       CR\n        BS translation          NON-DEST*\n        BS key definition             BS\n        Line wrap                     ON*\n        Scroll                        ON  (ON in TTY mode; OFF in CRT mode)\n        Break length                 350\n        Enquiry (Ctrl-E)             OFF\n0       KERMIT setup (Alt-S, option 3)\n0       Control quote char            35\n        Maximum packet size           94*\n        Pad character                  0\n        Number of pad chars            0\n        Handshake character            0  Handshake must not be same as\n        End of line char              13    End-of-line character\n        File type                   TEXT*\n        Block check type               2* (Host KERMIT supports 1-3)\n0     * indicates non-default (altered) entries\n-     On the host,  enter SERVER mode  (connect to KERMIT and type SERVER).\n      To exit server mode,  use Alt-K and function 3(FINISH)  or 4(LOGOFF);\n      note that these may  have to be issued twice if  a file transfer left\n      the server unsynchronized.\n0     To send files to the host,  issue  Alt-K function 2 or press the PgUp\n      key (then specify 2 for KERMIT). When prompted, specify the file name\n      or mask.  Remember  to set the REPLACE option before  starting if you\n      wish  to replace  existing files.   ProComm failures  are not  always\n      indicated  as such  (notably when  file  allocation fails  due to  an\n      invalid or duplicate name).\n-\n      --------------------\n-     \u00bcProComm is a trademark of Datastorm Technologies, Inc.\n0                                     -14-\n1                              PID Tele-Processing Services\n           Asynchronous Communication\n-          To receive files from the host in SERVER mode, issue Alt-K function 1\n           and respond with  the file name.  When  not in SERVER mode,   issue a\n           \"SEND filename\" command on the host side, then use the PgDwn key with\n           option 2 (KERMIT).  Wait  about 5 seconds before pushing the  2 - the\n           mainframe KERMIT has a built-in 10 second delay.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                          -15-\n1                         PID Tele-Processing Services\n      Asynchronous Communication\n-     1.6   PROTOCOL CONVERSION\n+     1.6   PROTOCOL CONVERSION\n+           ________ __________\n0     Protocol  conversion provides  remote 3270  compatible support  using\n      asynchronous terminals, usually over dial-up lines.\n0     The control settings for your terminal are: full-duplex for the modem\n      and terminal (no local echo), 7 data bits, even parity, one start and\n      one stop bit and X-On/X-Off hand-shaking.    If you have a WYSE-50 or\n      Datalink  125   terminal,   it  should   be  set  to   TeleVideo  925\n      compatibility mode.   If you have a PC and ProComm Plus, use 3270/950\n      for the \"terminal\" type; this setting provides convenient support for\n      3270 keys and has a 24*80 screen with the 25th status line.\n0     For each 3270 function, there is an equivalent key, or combination of\n      keys, to produce the function on your terminal.   The list of control\n      sequences, and some for interaction with the protocol converter,  are\n      available   on  request   from  the   Technical   support  staff   at\n      (703) 931-9500x48.\n-\n         1.  For terminals  with function keys,   try them  (shifted and\n             unshifted),  or use ESCape,  the  one or two digit function\n             key number, then CR (carriage return), e.g., ESC 1 2 CR for\n             PFK 12.\n0        2.  Use ESC A (upper case)  for PA1,  ESC B for PA2,  and ESC Z\n             for CLEAR.   In DEC VT mode,  use Control-A A for PA1,  and\n             Control-A B for PA2 (upper case is required).\n0        3.  Use Control-R (the control key is  used as a shift key)  to\n             RESET the keyboard.\n0        4.  Use Control-Y to return control  to the protocol converter;\n             this  allows you  to  switch from  one  host  to the  other\n             without disconnection.\n0     Connection  with the  protocol converter  is  established by  calling\n      (703) 931-9497 (1200, 2400, 9600 bps FastComm modems MNP-4/5).\n0     Once  the connection  is  established,   repeatedly type  the  single\n      character that defines your terminal  type.   Several repetitions are\n      required  to establish  your  linespeed  and options.    The  correct\n      response is \"MDS-8070\" centered on your screen.\n0     If you  do not know your  terminal type,  repeatedly type  a carriage\n      return; you will be prompted through supported device types.   Please\n      note that the (Hazeltine)  Esprit Color terminal is compatible with a\n      TeleVideo 925,  but not a monochrome Esprit.   Also note that the DEC\n      VT-100 is not compatible with the VT-100+, the VT-102 or VT-131.  The\n      \"advanced\" VT-100s produce faster code.\n-\n0                                     -16-\n1                              PID Tele-Processing Services\n           Asynchronous Communication\n-          The next page shows a menu of options.   Under normal conditions, the\n           third menu  option is to  be chosen  (connection with host  B)  using\n           (simulated) Program Function Key 3.  The other supported interface is\n           host A (PFK 1).  Use this first one  only when instructed to do so by\n           PID staff.\n0          After this step, connection is established with the host,  and normal\n           3270 mode becomes  effective.   When you see the  SYS RDY response on\n           the bottom line  of your screen,  hit carriage  return;  the response\n           will be the logon page of the  VTAM Network Solicitor (the VTAM logon\n           process is discussed  in a separate chapter).   Please  note that not\n           all listed systems are available at all times or on all machines.  If\n           you must connect to a program on another machine, use the first three\n+              ____\n           characters of the name followed by the desired machine id,  e.g.,  if\n           you are authorized for EXHIBIT on the A-system, use EXHA.\n0          Also refer to the section on BSC3 for 3270 support.\n0          To determine the character defining your device type, and to obtain a\n           sheet showing the normal terminal  settings and 3270 equivalent keys,\n           contact the systems group at (703) 931-9500x50.\n0          Due to  repeated problems with users  failing to log  off completely,\n           the  Network Solicitor  global logon  option  has been  disabled -  a\n           userid and password will be solicited for all connections.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                           -17-\n1                         PID Tele-Processing Services\n      Synchronous Communication                              Point-to-Point\n-\n                                    Section 2\n+                                   Section 2\n0                   POINT-TO-POINT SYNCHRONOUS COMMUNICATIONS\n+                   POINT-TO-POINT SYNCHRONOUS COMMUNICATIONS\n-     This chapter describes  devices used in conjunction with  the PID Job\n      Entry System (JES2).  The  supported Binary Synchronous Communication\n      (BSC)  modes consist of BSC1 (direct connection)  and BSC2 (dial-up).\n      Also supported are Synchronous Data  Link Control (SDLC)  connections\n      on dial-up  or direct  lines.   SDLC  requires,  in  addition to  the\n      registration   information  noted   below,   the   device  type   and\n      identification number (XID) necessary for VTAM connection.\n-     Binary   Synchronous  communication   derives  its   name  from   the\n      implementation,  which sends  bits and bytes in  synchronicity with a\n      clock  (usually  contained in  the  modem).    The  first byte  of  a\n      transmission may  still occur at a  random time,  but  all subsequent\n      characters  are  transmitted  at fixed  intervals.    BSC1  and  BSC2\n      transmissions consist entirely  of control characters,  or  begin and\n      end with control characters,  and contain 16-bit error checking codes\n      following data.   Error checking is provided on both the hardware and\n      software  levels,   with  automatic retransmission  when  errors  are\n      detected.\n0     If your terminal has a punch or  tape drive,  or you plan to transmit\n      object decks or  other data possibly containing  transmission control\n      characters,  then your  hardware must be able  to support transparent\n      transmission.  In transparent mode, control characters encountered in\n      data  are  treated  as  data  -  the  entire  transmission  block  is\n      surrounded by  special controls.    This option,   and some  terminal\n      dependent modes,  must match the options used when your remote number\n      is assigned.\n0     Prior to using JES2 services,  you  must obtain a remote number,  and\n      complete,  or  have your marketing  representative complete,   an RJE\n      (Remote  Job Entry)   User  registration.    This form  provides  the\n      terminal  features and  options  necessary  to establish  the  remote\n      definition in JES2.  Once the form is processed by the systems group,\n      the  options become  effective  within 24  hours,   and  you will  be\n      assigned a remote number.\n-     Direct connect lines are available by  prior arrangement with PID and\n      a telephone company.   Your marketing representative can  provide the\n      necessary information.\n0     Direct connect lines are currently supported at speeds of 2000, 2400,\n      4800, 7200,  9600 and 19200 bps.  Direct connect lines do not require\n      dialing up  the host computer,   and do  not require that  a /*SIGNON\n      identification card be supplied.   Otherwise,   the remainder of this\n      section applies to both direct and dial-up connections.\n-                                     -18-\n1                              PID Tele-Processing Services\n           Synchronous Communication                              Point-to-Point\n-          PID currently supports the following BSC devices:\n0             1.  IBM 2770\n0             2.  IBM 2780\n0             3.  IBM 3740 (supported as a 2780)\n0             4.  IBM 3780\n0             5.  Any  compatible  device.   Note  that  some  devices  offer\n                  software to  simulate either a 2780  or a 3780.   With this\n                  choice, use 3780.  Software that simulates a 360 or 370 CPU\n                  should  be  chosen  in  preference  to  any  of  the  above\n                  (\"multi-leaving\"  mode  supports concurrent  processing  of\n                  sending and receiving datastreams;  e.g.  seven print files\n                  could be processed while sending data to the JES2 reader).\n0          The above devices are all either  in transmit or receive state,  with\n           direction of  data flow  alternating under  control of  the terminal.\n           The  BSC  devices  listed   below  support  \"Multi-leaving\"  (two-way\n           transmission of  data streams  for multiple  devices,  e.g.,   a card\n           reader, a printer and a punch):\n0             1.  IBM 2922\n0             2.  IBM 360/20 models 2, 4, 5, 6.   Some models of the DATA/100\n                  run in this mode, some run in 2780 mode.\n0             3.  IBM 360 or  370,  dedicated as a remote.   You  may run the\n                  system dedicated using the IBM provided program, or you may\n                  run program RMT370  in one address space  using a dedicated\n                  or  dial-up line.   RMT370 is  available  from the  systems\n                  group; it runs under MVS, MVS/SP and MVS/XA).\n0             4.  IBM 1130\n0             5.  System 3\n0          The following are available SDLC devices:\n0             1.  IBM 3770\n0             2.  IBM 3790\n0             3.  System/32\n0          P/Cs  and  P/C  networks  may  be used  as  JES2  RJE  devices  using\n           BARR/HASP, BARR/RJE or similar software.\n-\n-\n                                           -19-\n1                         PID Tele-Processing Services\n      Synchronous Communication                              Point-to-Point\n-     2.1   DIAL-UP SIGNON\n+     2.1   DIAL-UP SIGNON\n+           _______ ______\n0     The following dial-up service is available:\n0        1.  4800 bps BSC - call (703) 931-9788\n0        2.  9600/4800/2400 bps SDLC - call (703) 931-9789\n0     Modems used for dial-up service should be placed in half-duplex mode.\n0     Make sure your equipment is ready to send;  at a minimum, you must be\n      ready to send the /*SIGNON card described below.\n0     Place your phone into Voice/Talk mode;  dial, and wait for a response\n      tone. When the data tone is issued, place your phone into DATA mode.\n0     On dial-up lines,   the user must supply the remote's  number and the\n      corresponding password, and specify the system to which the remote is\n      to be connected. The required control card is:\n0           /*SIGNON JESx  RMTnnn lpsw                   password\n0     The subsystem selection must be JESA (4381-A system)  or JESB (4381-B\n      system),  and  must start  in column  10.  The  remote number  may be\n      specified as REMOTEnn or RMTnnn with 1 or 2 digits for the long form,\n      and 1 to 3  digits for the short form.  Either  operand must begin in\n      column 16. The \"lpsw\" field is reserved for a line password, which is\n      not presently  used by  PID.  Your  remote's password  must start  in\n+                                                            ____\n      column 73.\n0     An invalid entry  prior to column 16  may result in the  loss of your\n      connection without an error message, depending on the severity of the\n      error.   Invalid remote  numbers or  passwords usually  result in  an\n      appropriate error message.\n-\n-\n-\n-\n-\n-\n-\n                                      -20-\n1                              PID Tele-Processing Services\n           Synchronous Communication                         Multi-dropped lines\n-\n                                         Section 3\n+                                        Section 3\n0                                 SYNCHRONOUS - 3270 MODE\n+                                 SYNCHRONOUS - 3270 MODE\n-          Multiple  control units  and devices  may  be connected  to the  same\n           communications line  with BSC3 protocol.  This  mode is used  for IBM\n           3270 control units, 3277,  3278,  3279 CRTs,  and 3262,  3267,  3284,\n           3286, 3287, and 3289 printers.\n0          Synchronous protocol  is also available in  SDLC mode.  This  mode is\n           available with IBM 3274 and 3276 control  units,  and at speeds up to\n           19,200 bps.\n-          Dial-up  SDLC   support  is  available,   and   requires  appropriate\n           pre-registration.    Dial-up BSC  support can  be  made available  by\n           special  arrangement;   consult  your  marketing  representative  for\n           particulars.\n-          \"3270\" will be used from now on to indicate devices with control unit\n           types 3271, 3272, 3274, 3275 and 3276,  CRT types 3277,  3278,  3279,\n           3178, 3179, and 3180, and printer types 3262,  3284,  3286,  3287 and\n           3289, and all similar and compatible devices.\n-          Support for 3270s  is available from WYLBUR,  TSO and  CICS.   All of\n           these require prior notification of  the support staff.   Support for\n           some TTYs, running into a (dial-up) protocol converter,  and behaving\n           as 3270s, is also available.   Contact your marketing representative,\n           or customer support at (703) 931-9500x48.\n-\n-\n-\n-\n-\n-\n-\n0                                          -21-\n1                         PID Tele-Processing Services\n      Synchronous Communication                         Multi-dropped lines\n-     3.1   NETWORK SOLICITOR\n+     3.1   NETWORK SOLICITOR\n+           _______ _________\n0     The Network Solicitor  (an application running under  VTAM)  controls\n      connection  to devices  managed  by VTAM.    Under  control of  local\n      parameters, an individual device:\n0        1.  may be  available to anyone  subject to the  user's logging\n             on.   The screen will display  a logon request with prompts\n             for the user id, password and optional account number.  All\n             entries must be made at one time (the current software does\n             not save field contents between screen entries).\n0            Global logon:   the account number is optional,  and should\n             be used when  you wish to use a different  account than the\n             one in your  userid record (subject to  authorization),  or\n             when you will switch between  VTAM applications and wish to\n             avoid multiple logons (currently honored by TSO, WYLBUR and\n             Exhibit),   and  prior  to  invoking  Exhibit  (for  forced\n             commands).   Note that global logon  works only on the same\n+                                                       ____\n             system that your terminal is connected to (the system id is\n             displayed on  the NETSOL  screens and  on some  application\n             logon screens). In particular, CICS and TSO are normally on\n             the \"B\" system.\n0            Automatic logons must be cancelled by the user (except from\n+            Automatic logons must be cancelled by the user\n             dial-up  devices  where  disconnect  is  made  on  loss  of\n             connection).    From  TSO  and Exhibit,   use  the  SIGNOFF\n             command.   From  Wylbur  and  other  applications,   logoff\n             normally, then use a LOCK command in NETSOL.\n0            Due  to repeated  problems with  incomplete  log off,   the\n             global  (automatic)  logon  option has  been disabled  from\n             dial-up devices.\n0        2.  may be available to any user (mostly local devices).  These\n             terminals,  and those  receiving a required LOGON,   show a\n             menu  of  supported  applications.   You  may  request  any\n             application you are authorized for (if you have logged on);\n             if you  are not  logged on,   the invoked  application will\n             request its  logon.  To facilitate automatic  connect mode,\n             you may type \"PASS\" to obtain a  logon screen and log on to\n             NETSOL.\n0            Note that not all applications are listed on your menu, and\n             some listed applications may not be available.\n0        3.  may  be  forced  to  a   specific  application.   When  the\n             application  is  available,    the  terminal  automatically\n             connects to it.   At other times the  screen reads \"CLOSED\"\n             and rejects  all attempts  with an  \"APPLICATION xxxxx  NOT\n             AVAILABLE\"  message,  where  \"xxxxx\"  is  the name  of  the\n             dedicated application.\n-\n                                      -22-\n1                              PID Tele-Processing Services\n           Synchronous Communication                         Multi-dropped lines\n-             4.  may not be available at all.   This is the case when system\n                  maintenance  is  in  progress,   and  when  the  center  is\n                  scheduled to be unavailable.   Normal maintenance hours are\n                  posted on the HELP screen;   special messages may appear in\n                  the middle  of the screen (or  as an additional line  on an\n                  NTO device).\n0          It should be noted  that whenever a logon is made  with a userid that\n           is  authorized for  only  one application,   and  the application  is\n           available,   NETSOL will  connect the  terminal  to that  application\n           without notification.   Notification is made  only if  the connection\n           fails.\n0          The  user-id  record may  additionally  be  defined with  an  initial\n           command;  if  so,  after logon  you may  be placed directly  within a\n           program in an application.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                           -23-\n1                         PID Tele-Processing Services\n      Synchronous Communication                         Multi-dropped lines\n-     3.2   REMOTE PRINTER CONTROL\n+     3.2   REMOTE PRINTER CONTROL\n+           ______ _______ _______\n0     327x attached printers can be made  available as JES2 output devices.\n      Normally,   these can  only be  controlled by  the central  operator.\n      Partial printer  control may  be made  available on  request \u00ddcontact\n      systems or technical support (703) 931-9500x48 or (703) 931-9500x50\u00a8.\n      The remote printer  must be defined to  VTAM,  and to JES2  as an SNA\n      device and remote.   The remote number is added to  a user-id record,\n      and the user is authorized to  use Exhibit command $PRT (normally the\n      $PRT  command  is  invoked automatically).   The  user-id  record  so\n      modified may be created specifically for  printer support,  or may be\n      an existing one.\n0     To  use  Exhibit  from  NETSOL,  use  function  key  5,   or  request\n      application EXHI.  Note that you must be logged on at the same system\n      as your  printer.   If your  user-id record  is locked to  Exhibit or\n      specifies a forced  command (e.g.,  $PRT),  then you  must complete a\n+                                                           ____\n      global logon in NETSOL (see previous section).\n0     Exhibit was recently changed to permit $PRT  to be used from within a\n      TSO session (including menu option 6  in ISPF).   Use command EXHIBIT\n      or EXH without operands.  In this mode, your TSO logon information is\n      used for authorization checking,  and a global logon is not required.\n      Note that the TSO  session rates are very much higher  than those for\n+     Note that the TSO  session rates are very much higher  than those for\n      the VTAM Exhibit.\n+     the VTAM Exhibit\n0     Exhibit normally  loops displaying  a screen every  5 to  30 seconds.\n      Before entering  input,  hit  PA2 to  stop looping.   If the  request\n      produces a logon screen, follow normal procedures to connect.  If you\n      are not  in the $PRT  command,  issue  $PRT (Exhibit will  supply the\n      printer id from your user-id record).\n0     The $PRT command may fail (unauthorized, invalid input, etc.); if you\n      are certain  that you  are using it  correctly,  contact  support for\n      assistance \u00dd(703) 931-9500x48 or -x50\u00a8.\n0     To exit from LOOP mode, use PA2.  To exit from $PRT,  use PF3 or type\n      END in the command line.  Upon exit from $PRT,  type SIGNOFF to leave\n      Exhibit.\n0     $PRT permits three modes of input:\n0        1.  You may place data into an  input field,  and hit the Enter\n             key.    Input   into  the  \"Command\"   field  may   not  be\n             acknowledged (e.g., END).\n0        2.  You may place  the cursor into an option field  and use the\n             \"Cursor Select\"  key   (or  a  light-pen)   to   create  an\n             attention.  These fields are setup and control options, and\n             the  queue  display  lines.   If a  field  begins  with  an\n             ampersand, you may also enter data into input fields before\n             generating  the  attention  (if   the  ampersand  is  used,\n             modified  data are  saved).   Detectable  fields are  those\n-                                     -24-\n1                              PID Tele-Processing Services\n           Synchronous Communication                         Multi-dropped lines\n-                 locked  fields  that you  may  space  to using  the  cursor\n                  field-skip (tab) keys.  $PRT was recently modified to honor\n                  an  Enter-key  only  in  most  fields  as  a  cursor-select\n                  function.\n0             3.  You may modify  input fields,  and then use  a function key\n                  (shown in angle-brackets,  e.g.,   <PF2> represents Program\n                  Function key 2.\n0          Normal operation of the printer consists of these steps:\n0             1.  If the  printer is idle  (or preferably drained),   set the\n                  printer work  selection criteria  to match  the jobs  to be\n                  printed.    This  may  be  done  by  manually  placing  the\n                  appropriate information into the work  select lines,  or by\n                  selecting  on a  displayed  queue  of waiting  jobs.    The\n+                                                                         The\n                  current version of JES2 requires  the printer to be drained\n+                 current version of JES2 requires  the printer to be drained\n                  before  it will  let  you  change major  selection  options\n+                 before  it will  let  you  change major  selection  options\n                  (e.g., forms, classes...).\n0                 When  work  selection  is  by   queue  (cursor  is  in  the\n                  FORM/FCB/UCS/CLASS portion of the  jobqueue line)  only the\n                  queue  characteristics are  changed  when  an attention  is\n                  generated (Light-pen/Cursor-select or Enter key).  When the\n                  cursor points at a job number or job name,  then the record\n                  limits are also changed to allow  that job to print,  and a\n                  job in HOLD mode is released.  Note that any other job with\n                  the same  characteristics having  a line  count within  the\n                  limits will also become elegible for printing.   To set the\n                  printer for a  single job,  position the cursor  to the job\n                  name or number, and press PF1; this action sets the low and\n                  high limit to the job's count (if another job has the exact\n                  limit, it may also print).\n0             2.  After  work selection,   start the  printer  (using PF2  or\n                  selecting  on  the  Start  field).  In  the  case  of  line\n                  problems,  modem problems,  or  other hangups,  the printer\n                  will  not start.   In this  case,   contact operations  for\n                  assistance at  (703) 931-9500x43;  they  will need  to know\n                  your printer id (top line of  display)  and the VTAM device\n                  name.\n0                 If no  problems occur,  the  printer should start  to print\n                  within one minute.\n0             3.  When a job  is selected,  the system may pause  to wait for\n                  forms to be changed in the printer;  if so, the top line in\n                  the  display will  read \"AWAITING  START/SETUP\"  - you  may\n                  start  again,   or  change the  setup  for  alternate  work\n                  selection.   If a  job was submitted with  incorrect FCB or\n                  UCS  information,  this  message may  appear,   but is  not\n                  amenable  to  correction  from the  remote  -  the  central\n                  operator must intervene.\n-                                          -25-\n1                         PID Tele-Processing Services\n      Synchronous Communication                         Multi-dropped lines\n-        4.  Other command functions are as  documented for JES2 remotes\n             in the User Guide.  Your remote number and device name will\n             appear in the $PRT title.\n0     You may delete a  job from the system in its  entirety by placing the\n      cursor at  the job  entry and  pressing PF13.    Note that  no option\n      exists  in the  current  system to  delete  only  specific queues  or\n      specific forms from a  job.   Note that a job active  on a device may\n      continue printing until the buffers are emptied.\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                     -26-\n1                              PID Tele-Processing Services\n-\n0                                       Appendix A\n+                                       Appendix A\n0                     TTY CHARACTER AND CONTROL CODES - ANSI SEQUENCE\n+                     TTY CHARACTER AND CONTROL CODES - ANSI SEQUENCE\n-\n0             Device     Device          Function     Even     WYLBUR\n               code      entry             or        parity    List &\n                                         name       line code  TTYPE\n0               00       CTRL-@          NULL          00        00\n                01       CTRL-A          SOH           81        01\n                02       CTRL-B          STX           41        02\n                03       CTRL-C          ETX           C0        03\n                04       CTRL-D          EOT           21        37\n                05       CTRL-E          ENQ           A0        2D\n                06       CTRL-F          ACK           60        2E\n                07       CTRL-G          BELL          E1        2F\n                08       CTRL-H          BSP           11        16\n                09       CTRL-I          Tab           90        05\n                0A       CTRL-J          LF            50        25\n                0B       CTRL-K          VT            D1        0B\n                0C       CTRL-L          FF            30        0C\n                0D       CTRL-M          CR            B1        0D\n                0E       CTRL-N          SO            71        0E\n                0F       CTRL-O          SI            F0        0F\n                10       CTRL-P          DLE           09        10\n                11       CTRL-Q          DC1 (X-On)    88        11\n                12       CTRL-R          DC2           48        12\n                13       CTRL-S          DC3 (X-Off)   C9        13\n                14       CTRL-T          DC4           28        3C or 14\n                15       CTRL-U          NAK           A9        3D\n                16       CTRL-V          SYN           69        32\n                17       CTRL-W          ETB           E8        26\n                18       CTRL-X          CAN           18        18\n                19       CTRL-Y          EM            99        19\n                1A       CTRL-Z          SUB           59        3F\n                1B       CTRL-\u00dd (L Brkt) ESC           D8        27\n                1C       CTRL-\\  (Rev /) FS            39        1C\n                1D       CTRL-\u00a8 (R Brkt) GS            B8        1D\n                1E       CTRL-\u00ac  (Tilde) RS            78        1E\n                1F       CTRL-DEL        US            F9        1F\n                20       space           SP            05        40\n                21       !               Excl. Pt.     84        5A\n                22       \"               Quote         44        7F\n                23       #               Pound sign    C5        7B\n                24       $               Dollar sign   24        5B\n                25       %               Percent sign  A5        6C\n                26       &               Ampersand     65        50\n                27       '               Apostrophe    E4        7D\n                28       (               L. Paren.     14        4D\n                29       )               R. Paren.     95        5D\n0                                          -27-\n1                         PID Tele-Processing Services\n      WYLBUR TTY Character and Control Codes                           ANSI\n-          2A       *               Asterisk      55        5C\n           2B       +               Plus          D4        4E\n           2C       ,               Comma         35        6B\n           2D       -               Minus         B4        60\n           2E       .               Period        74        4B\n           2F       /               Slash         F5        61\n           30       0               Zero          0C        F0\n           31       1               One           8D        F1\n           32       2               Two           4D        F2\n           33       3               Three         CC        F3\n           34       4               Four          2D        F4\n           35       5               Five          AC        F5\n           36       6               Six           6C        F6\n           37       7               Seven         ED        F7\n           38       8               Eight         1D        F8\n           39       9               Nine          9C        F9\n           3A       :               Colon         5C        7A\n           3B       ;               Semi-colon    DD        5E\n           3C       <               Less than     3C        4C\n           3D       =               Equal sign    BD        7E\n           3E       >               Greater than  7D        6E\n           3F       ?               Question mark FC        6F\n           40       @               At sign       03        7C\n           41       A               A             82        C1\n           42       B               B             42        C2\n           43       C               C             C3        C3\n           44       D               D             22        C4\n           45       E               E             A3        C5\n           46       F               F             63        C6\n           47       G               G             E2        C7\n           48       H               H             12        C8\n           49       I               I             93        C9\n           4A       J               J             53        D1\n           4B       K               K             D2        D2\n           4C       L               L             33        D3\n           4D       M               M             B2        D4\n           4E       N               N             72        D5\n           4F       O               O             F3        D6\n           50       P               P             0A        D7\n           51       Q               Q             8B        D8\n           52       R               R             4B        D9\n           53       S               S             CA        E2\n           54       T               T             2B        E3\n           55       U               U             AA        E4\n           56       V               V             6A        E5\n           57       W               W             EB        E6\n           58       X               X             1B        E7\n           59       Y               Y             9A        E8\n           5A       Z               Z             5A        E9\n           5B       \u00dd               L. Bracket    DB        AD\n           5C       \\               Rev. Slash    3A        E0  Not IBM\n           5D       \u00a8               R. Bracket    BB        BD\n           5E       \u00a2               Caret         7B        4A  Cent sign\n           5F       _               Underline     FA        6D\n0                                     -28-\n1                              PID Tele-Processing Services\n           WYLBUR TTY Character and Control Codes                           ANSI\n-               60       `               Rev. Apostr.  06        79  Not IBM\n                61       a               Lower case a  87        81\n                62       b               Lower case b  47        82\n                63       c               Lower case c  C6        83\n                64       d               Lower case d  27        84\n                65       e               Lower case e  A6        85\n                66       f               Lower case f  66        86\n                67       g               Lower case g  E7        87\n                68       h               Lower case h  17        88\n                69       i               Lower case i  96        89\n                6A       j               Lower case j  56        91\n                6B       k               Lower case k  D7        92\n                6C       l               Lower case l  36        93\n                6D       m               Lower case m  B7        94\n                6E       n               Lower case n  77        95\n                6F       o               Lower case o  F6        96\n                70       p               Lower case p  0F        97\n                71       q               Lower case q  8E        98\n                72       r               Lower case r  4E        99\n                73       s               Lower case s  CF        A2\n                74       t               Lower case t  2E        A3\n                75       u               Lower case u  AF        A4\n                76       v               Lower case v  6F        A5\n                77       w               Lower case w  EE        A6\n                78       x               Lower case x  1E        A7\n                79       y               Lower case y  9F        A8\n                7A       z               Lower case z  5F        A9\n                7B       \u00bb               L. Brace      DE        8B\n                7C       |               Stroke        3F        4F\n                7D       \u00ba               R. Brace      BE        9B\n                7E       \u00ac               Tilde         7E        5F  Not sign\n                7F       DEL             DEL (Pad)     FF        07\n-\n-\n-\n-\n-\n-\n-\n-                                          -29-\n1                         PID Tele-Processing Services\n-\n0                                  Appendix B\n+                                  Appendix B\n0                TTY CHARACTER AND CONTROL CODES - IBM SEQUENCE\n+                TTY CHARACTER AND CONTROL CODES - IBM SEQUENCE\n-\n0        Device     Device          Function     Even     WYLBUR\n          code      entry             or        parity    List &\n                                    name       line code  TTYPE\n0          00       CTRL-@          NULL          00        00\n           01       CTRL-A          SOH           81        01\n           02       CTRL-B          STX           41        02\n           03       CTRL-C          ETX           C0        03\n           09       CTRL-I          Tab           90        05\n           7F       DEL             DEL (Pad)     FF        07\n           0B       CTRL-K          VT            D1        0B\n           0C       CTRL-L          FF            30        0C\n           0D       CTRL-M          CR            B1        0D\n           0E       CTRL-N          SO            71        0E\n           0F       CTRL-O          SI            F0        0F\n           10       CTRL-P          DLE           09        10\n           11       CTRL-Q          DC1 (X-On)    88        11\n           12       CTRL-R          DC2           48        12\n           13       CTRL-S          DC3 (X-Off)   C9        13\n           14       CTRL-T          DC4           28        14 or 3C\n           08       CTRL-H          BSP           11        16\n           18       CTRL-X          CAN           18        18\n           19       CTRL-Y          EM            99        19\n           1C       CTRL-\\  (Rev /) FS            39        1C\n           1D       CTRL-\u00a8 (R Brkt) GS            B8        1D\n           1E       CTRL-\u00ac  (Tilde) RS            78        1E\n           1F       CTRL-DEL        US            F9        1F\n           0A       CTRL-J          LF            50        25\n           17       CTRL-W          ETB           E8        26\n           1B       CTRL-\u00dd (L Brkt) ESC           D8        27\n           05       CTRL-E          ENQ           A0        2D\n           06       CTRL-F          ACK           60        2E\n           07       CTRL-G          BELL          E1        2F\n           16       CTRL-V          SYN           69        32\n           04       CTRL-D          EOT           21        37\n           14       CTRL-T          DC4           28        3C or 14\n           15       CTRL-U          NAK           A9        3D\n           1A       CTRL-Z          SUB           59        3F\n           20       space           SP            05        40\n           5E       \u00a2               Caret         7B        4A  Cent sign\n           2E       .               Period        74        4B\n           3C       <               Less than     3C        4C\n           28       (               L. Paren.     14        4D\n           2B       +               Plus          D4        4E\n           7C       |               Stroke        3F        4F\n           26       &               Ampersand     65        50\n0                                     -30-\n1                              PID Tele-Processing Services\n           WYLBUR TTY Character and Control Codes                            IBM\n-               21       !               Excl. Pt.     84        5A\n                24       $               Dollar sign   24        5B\n                2A       *               Asterisk      55        5C\n                29       )               R. Paren.     95        5D\n                3B       ;               Semi-colon    DD        5E\n                7E       \u00ac               Tilde         7E        5F  Not sign\n                2D       -               Minus         B4        60\n                2F       /               Slash         F5        61\n                2C       ,               Comma         35        6B\n                25       %               Percent sign  A5        6C\n                5F       _               Underline     FA        6D\n                3E       >               Greater than  7D        6E\n                3F       ?               Question mark FC        6F\n                60       `               Rev. Apostr.  06        79  Not IBM\n                3A       :               Colon         5C        7A\n                23       #               Pound sign    C5        7B\n                40       @               At sign       03        7C\n                27       '               Apostrophe    E4        7D\n                3D       =               Equal sign    BD        7E\n                22       \"               Quote         44        7F\n                61       a               Lower case a  87        81\n                62       b               Lower case b  47        82\n                63       c               Lower case c  C6        83\n                64       d               Lower case d  27        84\n                65       e               Lower case e  A6        85\n                66       f               Lower case f  66        86\n                67       g               Lower case g  E7        87\n                68       h               Lower case h  17        88\n                69       i               Lower case i  96        89\n                7B       \u00bb               L. Brace      DE        8B\n                6A       j               Lower case j  56        91\n                6B       k               Lower case k  D7        92\n                6C       l               Lower case l  36        93\n                6D       m               Lower case m  B7        94\n                6E       n               Lower case n  77        95\n                6F       o               Lower case o  F6        96\n                70       p               Lower case p  0F        97\n                71       q               Lower case q  8E        98\n                72       r               Lower case r  4E        99\n                7D       \u00ba               R. Brace      BE        9B\n                73       s               Lower case s  CF        A2\n                74       t               Lower case t  2E        A3\n                75       u               Lower case u  AF        A4\n                76       v               Lower case v  6F        A5\n                77       w               Lower case w  EE        A6\n                78       x               Lower case x  1E        A7\n                79       y               Lower case y  9F        A8\n                7A       z               Lower case z  5F        A9\n                5B       \u00dd               L. Bracket    DB        AD\n                5D       \u00a8               R. Bracket    BB        BD\n                41       A               A             82        C1\n                42       B               B             42        C2\n                43       C               C             C3        C3\n                44       D               D             22        C4\n0                                          -31-\n1                         PID Tele-Processing Services\n      WYLBUR TTY Character and Control Codes                            IBM\n-          45       E               E             A3        C5\n           46       F               F             63        C6\n           47       G               G             E2        C7\n           48       H               H             12        C8\n           49       I               I             93        C9\n           4A       J               J             53        D1\n           4B       K               K             D2        D2\n           4C       L               L             33        D3\n           4D       M               M             B2        D4\n           4E       N               N             72        D5\n           4F       O               O             F3        D6\n           50       P               P             0A        D7\n           51       Q               Q             8B        D8\n           52       R               R             4B        D9\n           5C       \\               Rev. Slash    3A        E0  Not IBM\n           53       S               S             CA        E2\n           54       T               T             2B        E3\n           55       U               U             AA        E4\n           56       V               V             6A        E5\n           57       W               W             EB        E6\n           58       X               X             1B        E7\n           59       Y               Y             9A        E8\n           5A       Z               Z             5A        E9\n           30       0               Zero          0C        F0\n           31       1               One           8D        F1\n           32       2               Two           4D        F2\n           33       3               Three         CC        F3\n           34       4               Four          2D        F4\n           35       5               Five          AC        F5\n           36       6               Six           6C        F6\n           37       7               Seven         ED        F7\n           38       8               Eight         1D        F8\n           39       9               Nine          9C        F9\n-\n-\n-\n-\n-\n-\n-\n0                                     -32-\n1                              PID Tele-Processing Services\n-\n0                                       Appendix C\n+                                       Appendix C\n0                                  TTY CONTROL SEQUENCES\n+                                  TTY CONTROL SEQUENCES\n-\n0          This appendix  lists the  control codes used  by WYLBUR  for specific\n           TTY-compatible terminal types.\n0          The  tab sequences  precede  and follow  a  terminal specific  column\n           specification.   For terminals with tab option one,  the physical tab\n           position is  converted to  a single  character (tab  column plus  31,\n           converted to hex, is the device code - see preceding appendix for the\n           corresponding character and  WYLBUR value).   For terminals  with tab\n           option 2,  the tab column is  converted to printable numerics (device\n           code, or EBCDIC on WYLBUR). WYLBUR removes leading zeroes.  Terminals\n           with tab option 3 are similar to those with option 2, but require the\n           tab  position relative  to column  0 (i.e.,   1 is  added before  the\n           conversion to printable form).\n-           Perkin-Elmer 1100 (FOX).  WYLBUR terminal number 1\n+           Perkin-Elmer 1100 (FOX).  WYLBUR terminal number 1\n0           Tab option 1 (single character)\n                                Clear Tabs: 27D20727D10707\n                              Clear Device: 27D20727D10707\n                              Clear Screen: 27C80727D10707\n                        First Tab Sequence: 27E8\n                       Second Tab Sequence: 0727F107\n-           DECWRITER.  WYLBUR terminal number 2\n+           DECWRITER.  WYLBUR terminal number 2\n0           Tab option 2 (Decimal Tabs)\n                                Clear Tabs: 27F207\n                        First Tab Sequence: 27AD\n                       Second Tab Sequence: A407\n-           DATAMEDIA Color-Scan 10-60. WYLBUR terminal number 3\n+           DATAMEDIA Color-Scan 10-60. WYLBUR terminal number 3\n0           Tab option 2 (Decimal Tabs)\n                                Clear Tabs: 27ADF2D10727ADF3870727ADC80707\n                              Clear Device: 27ADF2D10727ADF3870727ADC80707\n                              Clear Screen: 27ADF1D10727ADC8\n                     Normal Text Rendition: 27ADF2F05EF1F394\n                   Error Message Rendition: 27ADF2F05EF1F294\n                   Non-Display Input Field: 27ADF2F05EF1F094\n                 Warning Message Rendition: 27ADF2F05EF1F594\n                           Narrow Width=80: 27AD6FF39307\n                            Wide Width=132: 27AD6FF38807\n                        First Tab Sequence: 27ADF15E\n0                                          -33-\n1                         PID Tele-Processing Services\n      WYLBUR TTY Character and Control Codes\n-                 Second Tab Sequence: C8070727C8\n-      (Hazeltine) ESPRIT-III Color. WYLBUR terminal number 4\n+      (Hazeltine) ESPRIT-III Color. WYLBUR terminal number 4\n0      Tab option 1 (single byte); color attributes take a display position\n                           Clear Tabs: 275C0727F307\n                         Clear Device: 275C0727F307\n                         Clear Screen: 275C07\n                Normal Text Rendition: 27C7F0\n              Error Message Rendition: 27C77A\n              Non-Display Input Field: 27C7F8\n            Warning Message Rendition: 27C7F2\n                   First Tab Sequence: 277E40\n                  Second Tab Sequence: 0727F107\n         Auxiliary Port On/Device Off: 2779\n        Reset Device On/Auxiliary Off: 2781\n              Set Device+Auxiliary On: 277C\n        Reset Device On/Auxiliary Off: 27C1\n-      IMS ULTIMA2.  WYLBUR terminal number 5\n+      IMS ULTIMA2.  WYLBUR terminal number 5\n0      Tab option 1 (single byte); field attribute takes a display position\n                           Clear Tabs: 275C0727F30707\n                         Clear Device: 275C0727F30707\n                         Clear Screen: 275C0707\n                Normal Text Rendition: 27C7F0\n              Error Message Rendition: 27C7F4\n              Non-Display Input Field: 27C7F1\n            Warning Message Rendition: 27C7F8\n                   First Tab Sequence: 277E40\n                  Second Tab Sequence: 0727F107\n         Auxiliary Port On/Device Off: 2779\n        Reset Device On/Auxiliary Off: 2781\n              Set Device+Auxiliary On: 277C\n        Reset Device On/Auxiliary Off: 27C1\n-      IBM P/C (with PID/ESP provided software).  WYLBUR terminal no. 6\n+      IBM P/C (with PID/ESP provided software).  WYLBUR terminal no. 6\n0      Final options not yet settled on. Currently:\n0      Tab option 2 (Decimal Tabs)\n                           Clear Tabs:27ADF2D127ADF387\n                         Clear Device:27ADF2D127ADF387\n                         Clear Screen:27ADF2D1\n                Normal Text Rendition:27ADF094\n              Error Message Rendition:27ADF794\n              Non-Display Input Field:27ADF894\n            Warning Message Rendition:27ADF494\n                   First Tab Sequence:27ADF15E\n                  Second Tab Sequence:C827C8\n         Auxiliary Port On/Device Off:27ADF489\n0                                     -34-\n1                              PID Tele-Processing Services\n           WYLBUR TTY Character and Control Codes\n-            Reset Device On/Auxiliary Off:27ADF589\n                   Set Device+Auxiliary On:27AD6FF489\n             Reset Device On/Auxiliary Off:27AD6FF589\n-           TEKTRONIX 4105.  WYLBUR terminal number 7\n+           TEKTRONIX 4105.  WYLBUR terminal number 7\n0           Tab option 2 (Decimal tabs)\n                                Clear Tabs: 27ADF2D127ADF28727AD6FF693\n                              Clear Device: 276C5AF12783276C5AF1\n                              Clear Screen: 276C5AF127ADF2D127AD6FF693\n                  Plot command BREAK Reset: 3127D3E5276C5AF1\n                     Normal Text Rendition: 27ADF3F25EF4F094\n                   Error Message Rendition: 27ADF3F15EF4F094\n                   Non-Display Input Field: 27ADF3F05EF4F094\n                 Warning Message Rendition: 27ADF3F35EF4F094\n                           Narrow Width=80: 27AD6FF39307\n                            Wide Width=132: 27AD6FF38807\n                        First Tab Sequence: 27ADF15E\n                       Second Tab Sequence: 8627C8\n-           Hewlett-Packard 2621.  WYLBUR terminal number 8\n+           Hewlett-Packard 2621.  WYLBUR terminal number 8\n0           Tab option 3 (Decimal tabs, offset by one)\n                                Clear Tabs: 27C827D127F3\n                              Clear Device: 27C827D127F3\n                              Clear Screen: 27C827D1\n                  Plot command BREAK Reset: 274BD2274BE9\n                        First Tab Sequence: 275081F1A8\n                       Second Tab Sequence: C327F107\n              Auxiliary Port On/Device Off: 274BE8\n             Reset Device On/Auxiliary Off: 274BE9\n-           WYSE-50 and Datalink 125 (in WYSE mode).  WYLBUR terminal no. 9\n+           WYSE-50 and Datalink 125 (in WYSE mode).  WYLBUR terminal no. 9\n0           Tab  option  2 (Decimal  Tabs);   field  attribute takes  a  display\n           position\n                                Clear Tabs: 275C0727F00707\n                              Clear Device: 275C0727F00707\n                              Clear Screen: 275C0707\n                     Normal Text Rendition: 27C7F0\n                   Error Message Rendition: 27C7F4\n                   Non-Display Input Field: 27C7F1\n                 Warning Message Rendition: 27C7F8\n                           Narrow Width=80: 27797A0707070707\n                            Wide Width=132: 27795E0707070707\n                        First Tab Sequence: 2781F1D9\n                       Second Tab Sequence: C327F107\n              Auxiliary Port On/Device Off: 18\n             Reset Device On/Auxiliary Off: 14\n                   Set Device+Auxiliary On: 12\n             Reset Device On/Auxiliary Off: 14\n0                                          -35-\n1                         PID Tele-Processing Services\n+                         PID Tele-Processing Services\n      WYLBUR TTY Character and Control Codes\n+     WYLBUR TTY Character and Control Codes\n\n+\n0      IBM 3101.  WYLBUR terminal number 10\n+      IBM 3101.  WYLBUR terminal number 10\n0      Tab option 1 (single byte); block mode not supported.\n                           Clear Tabs: 27C80727D307\n                         Clear Device: 27C80727D307\n                         Clear Screen: 27C80727D207\n                   First Tab Sequence: 27E840\n                  Second Tab Sequence: 0727F007\n0      DEC VT-100 and WYSE-75.  WYLBUR terminal number 11\n+      DEC VT-100 and WYSE-75.  WYLBUR terminal number 11\n0      Tab option 2 (Decimal Tabs)\n                           Clear Tabs:27ADC80727ADF2D10727ADF387\n                         Clear Device:27ADC80727ADF2D10727ADF387\n                         Clear Screen:27ADC80727ADF2D1\n                Normal Text Rendition:27ADF094\n              Error Message Rendition:27ADF194\n              Non-Display Input Field:27ADF497\n            Warning Message Rendition:27ADF294\n                      Narrow Width=80:27AD6FF39307\n                       Wide Width=132:27AD6FF38807\n                   First Tab Sequence:27ADF15E\n                  Second Tab Sequence:C827C8\n         Auxiliary Port On/Device Off:27ADF589\n        Reset Device On/Auxiliary Off:27ADF489\n              Set Device+Auxiliary On:27AD6FF589\n        Reset Device On/Auxiliary Off:27AD6FF489\n-      WYSE-300 (and WYSE-100). WYLBUR terminal number 12\n+      WYSE-300 (and WYSE-100). WYLBUR terminal number 12\n0      Tab option 1 (single character); field attribute takes one position.\n                           Clear Tabs:27F007274E0707\n                         Clear Device:27F007274E0707\n                         Clear Screen:274E0707\n                Normal Text Rendition:27C7F0\n              Error Message Rendition:27C7F4\n              Non-Display Input Field:27C7F1\n            Warning Message Rendition:27C797\n                   First Tab Sequence:277E40\n                  Second Tab Sequence:0727F107\n         Auxiliary Port On/Device Off:12\n        Reset Device On/Auxiliary Off:14\n0      DEC VT-200 and WYSE-85.  WYLBUR terminal number 13\n+      DEC VT-200 and WYSE-85.  WYLBUR terminal number 13\n0      Tab option 2 (Decimal Tabs)\n                           Clear Tabs:27ADC80727ADF2D10727ADF387\n                         Clear Device:27ADC80727ADF2D10727ADF387\n                         Clear Screen:27ADC80727ADF2D1\n                Normal Text Rendition:27ADF094\n              Error Message Rendition:27ADF05EF194\n              Non-Display Input Field:27ADF294\n            Warning Message Rendition:27ADF494\n0                                     -36-\n1                              PID Tele-Processing Services\n           WYLBUR TTY Character and Control Codes\n-                          Narrow Width=80:27AD6FF39307\n                            Wide Width=132:27AD6FF38807\n                        First Tab Sequence:27ADF15E\n                       Second Tab Sequence:C827C8\n              Auxiliary Port On/Device Off:27ADF589\n             Reset Device On/Auxiliary Off:27ADF489\n                   Set Device+Auxiliary On:27AD6FF589\n             Reset Device On/Auxiliary Off:27AD6FF489\n0           TeleVideo 920, 925, 950.  WYLBUR terminal number 14\n+           TeleVideo 920, 925, 950.  WYLBUR terminal number 14\n0           Tab option 1 (single byte); field attribute takes one position\n                                Clear Tabs:275C070727F00707\n                              Clear Device:275C070727F00707\n                              Clear Screen:275C0707\n                     Normal Text Rendition:27C7F0\n                   Error Message Rendition:27C7F4\n                   Non-Display Input Field:27C7F1\n                 Warning Message Rendition:27C7F8\n                        First Tab Sequence:277E40\n                       Second Tab Sequence:0727F1\n              Auxiliary Port On/Device Off:2779\n             Reset Device On/Auxiliary Off:2781\n                   Set Device+Auxiliary On:277C\n             Reset Device On/Auxiliary Off:27C1\n0           TeleVideo Personal Terminal.  WYLBUR terminal number 15\n+           TeleVideo Personal Terminal.  WYLBUR terminal number 15\n0           Tab option 1 (single byte)\n                                Clear Tabs:275C0727F307\n                              Clear Device:27A407275C0727F307\n                              Clear Screen:275C0707\n                     Normal Text Rendition:27C7F07C7C27C6\n                   Error Message Rendition:27C7F17CC127C8\n                   Non-Display Input Field:27C7F1C47C27C8\n                 Warning Message Rendition:27C7F0C27C27C6\n                        First Tab Sequence:277E40\n                       Second Tab Sequence:27F1\n              Auxiliary Port On/Device Off:2779\n             Reset Device On/Auxiliary Off:2781\n                   Set Device+Auxiliary On:277C\n             Reset Device On/Auxiliary Off:27C1\n-           WYSE-60 (in WYSE50+ mode).  WYLBUR terminal number 16\n+           WYSE-60 (in WYSE50+ mode).  WYLBUR terminal number 16\n0           Tab  option  2 (Decimal  Tabs);   field  attribute takes  a  display\n           position\n                                Clear Tabs: 275C0727F00707\n                              Clear Device: 275C0727F00707\n                              Clear Screen: 275C0707\n                     Normal Text Rendition: 27C7F0\n                   Error Message Rendition: 27C7F4\n                   Non-Display Input Field: 27C7F1\n0                                          -37-\n1                         PID Tele-Processing Services\n      WYLBUR TTY Character and Control Codes\n-           Warning Message Rendition: 27C7F8\n                      Narrow Width=80: 27797A0707070707\n                       Wide Width=132: 27795E0707070707\n                   First Tab Sequence: 2781F1D9\n                  Second Tab Sequence: C327F107\n         Auxiliary Port On/Device Off: 18\n        Reset Device On/Auxiliary Off: 14\n              Set Device+Auxiliary On: 12\n        Reset Device On/Auxiliary Off: 14\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n0                                     -38-\n1                              PID Tele-Processing Services\n-\n0                                       Appendix D\n+                                       Appendix D\n0                             BSC/SDLC LINE REGISTRATION FORM\n+                             BSC/SDLC LINE REGISTRATION FORM\n-\n            Account # ________     Add/Change _    Effective date ___/___/___\n0           Company name ____________________________________________________\n0           Address      ____________________________________________________\n0                        ____________________________________________________\n0                        ____________________________________________________\n0           Contact _____________________________________ Phone _____________\n-          For direct-connect remotes only: Host Line # ____ Host A|B ____\n0          Line speed (1200,2000,2400,4800,7200,9600,19200) ______\n0          BSC mode: Transparency Y | N ___   SDLC mode:  Half | Full duplex\n0                                             SDLC mode:  NRZ | NRZI\n0          BSC mode: point-to-point (RJE) or multi-drop (327x) _____________\n0          If 3270-type controllers will be used  on this line,  please complete\n           the reverse side also.\n-\n-\n-\n-\n-\n-\n-\n-                                          -39-\n1                         PID Tele-Processing Services\n-\n0                                  Appendix E\n+                                  Appendix E\n0                       3270 CONTROLLER REGISTRATION FORM\n+                       3270 CONTROLLER REGISTRATION FORM\n-\n       Account # ________     Add/Change _    Effective date ___/___/___\n0      Company name ____________________________________________________\n0      Address      ____________________________________________________\n0                   ____________________________________________________\n0                   ____________________________________________________\n0      Contact _____________________________________ Phone _____________\n-     3270-type controllers:  Manufacturer _______________ Model ______\n0     Control Unit address  _ _    SNA/SDLC network id  _ _ _  _ _ _ _ _\n0     Number of CRTs __  Number of LUs __\n0     Number of printers __  LU|position for each _____________________\n0     VTAM Line id ________  PU ________  LU range ________/________\n-\n-\n-\n-\n-\n-\n-\n-\n-                                     -40-\n1                              PID Tele-Processing Services\n-\n0                                       Appendix F\n+                                       Appendix F\n0                             RJE TERMINAL REGISTRATION FORM\n+                             RJE TERMINAL REGISTRATION FORM\n-\n            Account # ________     Add/Change _    Effective date ___/___/___\n0           Company name ____________________________________________________\n0           Address      ____________________________________________________\n0                        ____________________________________________________\n0                        ____________________________________________________\n0           Contact _____________________________________ Phone _____________\n0           For direct-connect remotes only: Comten Line # ____ Host A|B ____\n            Line speed (1200,2000,2400,4800,7200,9600,19200) ______\n0           BSC mode: Transparency Y | N ___   SDLC mode:  Half | Full duplex\n0          Mnemonic remote name: _____________  SNA/SDLC id: _ _ _  _ _ _ _ _\n0           Circle your terminal type, and all options with the same symbol:\n0           -             IBM 2770\n              +           IBM 2780, IBM 3740 and compatibles\n                *         IBM 3780\n                  :       IBM 2922\n                  :       S360/20 model 2 (M20-2)\n                  :       S360/20 model 4 (M20-4)\n                  :       S360/20 model 5 (M20-5)\n                  :       S360/20 model 6 (M20-6)\n                  :       S360 model 30 and up\n                  :       S370 model 145 and up\n                  :       11/30\n                  :       System/3\n                    @     SNA (LUTYPE1) 3770, 3791, System/32\n                    @     SNA (LUTYPE1) 3287 (local SNA, remote SDLC)\n                    @     BSC (LUTYPE3) 3286, 3287 type printer (remote BSC)\n                    @     lcl (LUTYPE0) 3286, 3287 type printer (local  SNA)\n-           -         ABUFEX|NOABUFEX   2770 additional buffer-expansion\n            -         BUFEX|NOBUFEX     2770 buffer-expansion feature\n                    @ BUFSIZE=nnnn      Maximum RU size (256 to 520)\n                    @ CMPCT|NOCMPCT     Printer compaction feature\n            -   *     COMP|NOCOMP       2770, 3780 compression/expansion\n                                        feature (mutually exclusive of TABS)\n            - + * : @ CONDEST=nnn       Routing code for command responses\n                  : @ CONSOLE|NOCON     Operator console function\n0                                          -41-\n1                         PID Tele-Processing Services\n      RJE Terminal Registration                                 Rmt # _ _ _\n-      - + * : @ DISCINTV=nnnn     Disconnect time in seconds; line is\n                                   disconnected when no text is sent.\n                                   Installation default of 600 for dial-\n                                   up lines, 0 for direct lines, and 60\n                                   for SNA printers (328x)\n       - + *   @ FIXED|VARIABLE    Data record type\n       - + * : @ LINE=___          For direct lines, same as remote #\n               @ LUNAME=________   VTAM device name\n         +       MRF|NOMRF         Multiple record feature\n             :   MULTI|HARDWARE    Must be MULTI for multi-leaving\n       - + * : @ NUMPR=1|__        Number of printers\n       - + * : @ NUMPU=1|__        Number of punches (NUMPU+NUMPR<9)\n       - + * : @ NUMRD=1|__        Number of readers\n       - + * : @ PASSWORD ________  Required for dial-up remotes\n       - + * : @ ROUTCDE=___       Input and output routing code\n                                   defaulted to remote number\n               @ SETUPHDR|SETUPMSG  Use HDR for smart remote (handles\n                                   setup and multiple copies)\n       - + * : @ SETUPINF|SETUPACT  SETUPACT required by PID\n       - + *     TABS|NOTABS       Horizontal format control (mutually\n                                   exclusive of COMP option)\n       - + * :   TRANS|NOTRANS     Text-transparency feature\n       - + *     UNBLOCKED|BLOCKED  Record format (from reader)\n       - + *     WAITIME=0|__      Delay for reading input after an\n                                   input or output data-stream finishes.\n-      Reader # __ setup (please copy for additional readers)\n0      CLASS=A|_     Default job class\n       DRAIN|START   Reader status when JES2 begins processing\n       HOLD|NOHOLD   After JCL conversion, jobs may be held.\n       MSGCLASS=A|_  Default message class\n       PRDEST=___    Default print destination; default is remote number\n       PRIOINC=__    PID requires 0\n       PRIOLIM=__    PID requires 6\n       PRLCL|PRRMT   LCL if PRDEST is local, RMT otherwise\n       PUDEST=___    Default punch destination; default is remote number\n       PULCL|PURMT   LCL if PUDEST is local, RMT otherwise\n-      Punch # __ setup (please copy for additional punches).  Note that\n       this definition may be used for devices (e.g., DATA-100) with\n       tape drives. Punched output can be routed to tape without\n       the carriage controls normally written for printer files.\n0      AUTO|OPERATOR  Default is recommended for manual output control\n                     AUTO can result in terminal hangs unless a console\n                     is available.\n       CCTL|NOCCTL   SNA operand; NOCCTL used with SELECT=BASICn or when\n                     output device cannot handle carriage controls\n       CHAINSIZ=1|___  SNA only; number of pages (channel 1 skips) in\n                     a transmission chain. 0 suppresses breaks.\n       CLASS=________  Up to eight output classes; at PID, use B.\n0                                     -42-\n1                              PID Tele-Processing Services\n           RJE Terminal Registration                                 Rmt # _ _ _\n-           CMPCT|NOCMPCT  SNA compaction capability\n            COMP|NOCOMP    SNA compression/expansion feature\n            COMPACT=0|__  SNA compaction table number; requires CMPCT option\n            DRAIN|START   Manual or automatic start-up\n            FORMS=STD|____  Name of forms loaded initially\n            LRECL=80|___  Punch width; <256\n            NOSEP|SEP     Job separator option\n            NOSUSPND|SUSPND  Specify SUSPND for 27xx/37xx terminals with the\n                          punch-interrupt feature. Invalid for SNA and CPUs\n            ROUTCDE=___   Output routing; default is remote number\n            SELECT=PUNCHn|EXCHn|BASICn  SNA routing selection for device\n                          subaddress 'n'; PUNCH, EXCHange diskette, or\n                          BASIC exchange diskette. BASIC requires NOCCTL and\n                          LRECL<129\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-                                          -43-\n1                         PID Tele-Processing Services\n      RJE Terminal Registration                                 Rmt # _ _ _\n-      Printer # __ setup (please copy for additional printers)\n0      AUTO|OPERATOR  Default is recommended for manual output control\n                     AUTO can result in terminal hangs unless a console\n                     is available.\n0      CCTL|NOCCTL   SNA operand; NOCCTL used with SELECT=BASICn or when\n                     output device cannot handle carriage controls\n0      CHAINSIZ=1|___  SNA only; number of pages (channel 1 skips) in\n                     a transmission chain. 0 suppresses breaks.\n0      CLASS=________  Up to eight output classes; at PID, use A for\n                     standard forms, C for user forms, P for TSO output.\n0      CMPCT|NOCMPCT  SNA compaction capability\n0      COMP|NOCOMP    SNA compression/expansion feature\n0      COMPACT=0|__  SNA compaction table number; requires CMPCT option\n0      DRAIN|START   Manual or automatic start-up\n0      FCB=6LPI|____ Carriage control tape or forms buffer image name\n                     6LPI is used for 66 lines per page, standard forms.\n0      FCBLOAD|NOFCBLOD  Use with S/360 and S/370 having a 3203 or 3211\n                     printer, and text-transparency, and for SNA remotes\n                     (limited to one stop per channel, 12 stops maximum)\n                     The SETUPHDR option forces NOFCBLOD\n0      FORMS=STD|____  Name of forms loaded initially\n0      LIM=______ to ______ Print line limits (default is 0-*, *-no lim)\n0      LRECL=___     SNA printer width (or use PRWIDTH); <256\n0      NOSEP|SEP     Job separator option\n0      NOSUSPND|SUSPND  Specify SUSPND for 27xx/37xx terminals with the\n                     printer-interrupt feature. Invalid for SNA and CPUs\n0      PRWIDTH=120|___  Print width\n0      ROUTCDE=___   Output routing; default is remote number\n0      SELECT=PRINTn|EXCHn|BASICn  SNA routing selection for device\n                     subaddress 'n'; PRINTer, EXCHange diskette, or\n                     BASIC exchange diskette. BASIC requires NOCCTL and\n                     LRECL<129\n0      UCS=P11|____  Print train and character translation. P11 is the\n                     PID default upper case set; for lower case, use T11.\n                     To bypass translation completely, use U11.\n0                                     -44-\n1                              PID Tele-Processing Services\n-\n0                                       Appendix G\n+                                       Appendix G\n0                           PROTOCOL CONVERTER KEY ASSIGNMENTS\n+                           PROTOCOL CONVERTER KEY ASSIGNMENTS\n-\n           \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                                   \u00af             \u00af             \u00af\n           | 3270                   |DEC          |IBM          |TeleVideo    |\n           | Key/Function           |VT100+       |3101         |925, 950     |\n           |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+          \u00bf                        \u00d7             \u00d7             \u00d7             ]\n           | Converter Device Type  |32           |11           |24           |\n           | (or repeat character)  |\u00ba            |)            |\u00a8            |\n           |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+          \u00bf                        \u00bf             \u00bf             \u00bf             ]\n           | Program Function and Attention Keys                              |\n           |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+          \u00bf                        \u00af             \u00af             \u00af             ]\n           | Enter                  |Return       |New Line     |Return       |\n           | PA1                    |PF1          |Alt-A A      |Esc A        |\n           |                        |Ctl-A A      |             |             |\n           | PA2                    |PF2          |Alt-A B      |Esc B        |\n           |                        |Ctl-A B      |             |             |\n           | PA3                    |PF3          |Alt-A C      |Esc C        |\n           |                        |Ctl-A C      |             |             |\n           | PF1                    |Esc 1 Rtn    |PF1          |F1           |\n           | PF2                    |Esc 2 Rtn    |PF2          |F2           |\n           | PF3                    |Esc 3 Rtn    |PF3          |F3           |\n           | PF4                    |Esc 4 Rtn    |PF4          |F4           |\n           | PF5                    |Esc 5 Rtn    |PF5          |F5           |\n           | PF6                    |Esc 6 Rtn    |PF6          |F6           |\n           | PF7                    |Esc 7 Rtn    |PF7          |F7           |\n           | PF8                    |Esc 8 Rtn    |PF8          |F8           |\n           | PF9                    |Esc 9 Rtn    |Esc 9 NwLn   |F9           |\n           | PF10                   |Esc 1 0 Rtn  |Esc 1 0 NwLn |F10          |\n           | PF11                   |Esc 1 1 Rtn  |Esc 1 1 NwLn |F11          |\n           | PF12                   |Esc 1 2 Rtn  |Esc 1 2 NwLn |Shift-F2     |\n           | PF13                   |Esc 1 3 Rtn  |Esc 1 3 NwLn |Shift-F3     |\n           | PF14                   |Esc 1 4 Rtn  |Esc 1 4 NwLn |Shift-F4     |\n           | PF15                   |Esc 1 5 Rtn  |Esc 1 5 NwLn |Shift-F5     |\n           | PF16                   |Esc 1 6 Rtn  |Esc 1 6 NwLn |Shift-F6     |\n           | PF17                   |Esc 1 7 Rtn  |Esc 1 7 NwLn |Shift-F7     |\n           | PF18                   |Esc 1 8 Rtn  |Esc 1 8 NwLn |Shift-F8     |\n           | PF19                   |Esc 1 9 Rtn  |Esc 1 9 NwLn |Shift-F9     |\n           | PF20                   |Esc 2 0 Rtn  |Esc 2 0 NwLn |Shift-F10    |\n           | PF21                   |Esc 2 1 Rtn  |Esc 2 1 NwLn |Shift-F11    |\n           | PF22                   |Esc 2 2 Rtn  |Esc 2 2 NwLn |Esc 2 2 Rtn  |\n           | PF23                   |Esc 2 3 Rtn  |Esc 2 3 NwLn |Esc 2 3 Rtn  |\n           | PF24                   |Esc 2 4 Rtn  |Esc 2 4 NwLn |Esc 2 4 Rtn  |\n           | Test-Request           |Esc T        |Alt-A T      |Shift-F1     |\n           | Clear                  |PF4          |Clear        |Clear Space  |\n           |                        |Alt-A Z      |             |Esc Z        |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                                   \u00bf             \u00bf             \u00bf\n                                                                        more ...\n-\n                                           -45-\n1                         PID Tele-Processing Services\n-\n      \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                              \u00af             \u00af             \u00af\n      | 3270                   |DEC          |IBM          |TeleVideo    |\n      | Key/Function           |VT100+       |3101         |925, 950     |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                        \u00bf             \u00bf             \u00bf             ]\n      |Cursor Control Keys                                               |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                        \u00af             \u00af             \u00af             ]\n      |   Left                 |Left Arrow   |Left Arrow   |Left Arrow   |\n      |   Right                |Right Arrrow |Right Arrow  |Right Arrow  |\n      |   Up                   |Up Arrow     |Up Arrow     |Up Arrow     |\n      |   Down                 |Down Arrow   |Down Arrow   |Down Arrow   |\n      |   New Line             |Ctl-W        |Alt-W        |Line Feed    |\n      |   Tab right            |Tab          |Tab Right    |Tab          |\n      |   Tab left             |Ctl-G        |Alt-G        |Back Tab     |\n      |   Home                 |Esc H        |Home         |Home         |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                        \u00bf             \u00bf             \u00bf             ]\n      |Editing Keys                                                      |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                        \u00af             \u00af             \u00af             ]\n      |   Erase input          |Ctl-B        |Erase input  |Pg Erase     |\n      |   Erase EOF            |Ctl-C        |Erase EOF    |Ln Erase     |\n      |   Insert               |Ctl-V        |Alt-V        |Char Ins     |\n      |   Delete               |Delete       |DEL          |Char Del     |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                        \u00bf             \u00bf             \u00bf             ]\n      |Miscellaneous Functions                                           |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                        \u00af             \u00af             \u00af             ]\n      | Reset                  |Ctl-R        |Cancel       |Ctl-R        |\n      | Field Mark             |Ctl-F        |Alt-F        |Ctl-F        |\n      | Dup                    |Ctl-D        |Alt-D        |Ctl-D        |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                        \u00bf             \u00bf             \u00bf             ]\n      |Protocol Converter Functions                                      |\n      |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+     \u00bf                        \u00af             \u00af             \u00af             ]\n      | Refresh screen         |Ctl-Z        |Alt-Z        |Ctl-C        |\n      | Display status line    |Ctl-E        |Alt-E        |Ctl-E        |\n      | Remove status line     |Ctl-X        |Alt-X        |Ctl-X        |\n      | Supervisor request     |             |             |             |\n      |  (disconnects; returns |             |             |             |\n      |  to initial menu)      |Ctl-Y        |Alt-Y        |Ctl-Y        |\n      \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                              \u00bf             \u00bf             \u00bf\n0      A hyphen \"-\" indicates that both  keys must be depressed;  the first\n       is used as a \"shift\" key.\n0      Letters shown in upper case must by typed upper case;  e.g., the PA1\n+                                  ____\n       sequence for an emulated VT-100 is \"Control-A A\" - \"Ctl-a a\" or some\n       variation will not work.\n-      The WYSE-50, Datalink 125 and compatibles use the same keystrokes as\n       the Televideo 925, but are also usable with device type 73.\n-\n-\n0                                     -46-\n1                              PID Tele-Processing Services\n-\n0                                       Appendix H\n+                                       Appendix H\n0                                    TELEPHONE NUMBERS\n+                                    TELEPHONE NUMBERS\n-\n           \u00d0\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00af\n+                         \u00af           \u00af\n           | 703-931-9500 | Voice     | P.I.D. switchboard; Mon-Fri 9 to 5     |\n           |     ext. 43  | Voice     | Computer Operations; open except       |\n           |              |           |   Sunday midnight-8 a.m.               |\n           |              |           |   Monday midnight-8 a.m.               |\n           |              |           |   Thursday 6 - 8 a.m.                  |\n           |     ext. 48  | Voice     | Technical Support; open                |\n           |              |           |   Weekdays 8 a.m. to 8 p.m.            |\n           |     ext. 33  | Voice     | Production Control (front counter)     |\n           |     ext. 50  | Voice     | Systems Support; Tue-Fri 6 to 2        |\n           | 703-931-8130 | Fax       | Facsimile transmission                 |\n           |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+          \u00bf              \u00d7           \u00d7                                        ]\n           | 703-931-9108 | TTY   300 | Asynchronous services (line mode)      |\n           |              | TTY  1200 | WYLBUR; through VTAM: KERMIT, TSO      |\n           |              | TTY  2400 | X-On/X-Off recommended                 |\n           |              |           |                                        |\n           | 703-931-9105 | MNP  1200 | FastComm modems with MNP-4 and MNP-5   |\n           |              | MNP  2400 | X-On/X-Off required for this rotary    |\n           |              | TTY  2400 | asynchronous services: WYLBUR; through |\n           |              | MNP  9600 | VTAM (NTO): KERMIT, TSO                |\n           |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+          \u00bf              \u00d7           \u00d7                                        ]\n           | 703-931-9497 | MNP  1200 | Protocol Conversion (TTY support for   |\n           |              | MNP  2400 | full-screen mode) CICS, TSO, WYLBUR    |\n           |              | MNP  9600 | FastComm modems with MNP-4 and MNP-5   |\n           |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+          \u00bf              \u00d7           \u00d7                                        ]\n           | 703-931-9788 | BSC2 4800 | JES2 Remote Job Entry                  |\n           |\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7|\n+          \u00bf              \u00d7           \u00d7                                        ]\n           | 703-931-9789 | SDLC 4800 | VTAM: JES2 RJE, CICS, TSO, WYLBUR      |\n           |              | SDLC 9600 | LU1 and LU2(3270 mode) support         |\n           \u00bf\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7]\n+                         \u00bf           \u00bf\n-\n-\n-\n-\n-\n-\n                                           -47-\n1                         PID Tele-Processing Services\n-\n\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n                                      -48-\n1                              PID Tele-Processing Services\n-\n0                                    TABLE OF CONTENTS\n-          INTRODUCTION  . . . . . . . . . . . . . . . . . . . . . . . . . .  ii\n-          Section                                                          page\n0          1.  ASYNCHRONOUS COMMUNICATION  . . . . . . . . . . . . . . . . . . 1\n0                 Communications Parameters  . . . . . . . . . . . . . . . . . 1\n                  Calling PID  . . . . . . . . . . . . . . . . . . . . . . . . 4\n                  KERMIT File Transfer . . . . . . . . . . . . . . . . . . . . 8\n                  ProComm Plus considerations  . . . . . . . . . . . . . . .  12\n                  ProComm considerations . . . . . . . . . . . . . . . . . .  14\n                  Protocol Conversion  . . . . . . . . . . . . . . . . . . .  16\n0          2.  POINT-TO-POINT SYNCHRONOUS COMMUNICATIONS . . . . . . . . . .  18\n0                 Dial-up SIGNON . . . . . . . . . . . . . . . . . . . . . .  20\n0          3.  SYNCHRONOUS - 3270 MODE . . . . . . . . . . . . . . . . . . .  21\n0                 Network Solicitor  . . . . . . . . . . . . . . . . . . . .  22\n                  Remote printer control . . . . . . . . . . . . . . . . . .  24\n-          Appendix                                                         page\n0          A.  TTY CHARACTER AND CONTROL CODES - ANSI SEQUENCE . . . . . . .  27\n0          B.  TTY CHARACTER AND CONTROL CODES - IBM SEQUENCE  . . . . . . .  30\n0          C.  TTY CONTROL SEQUENCES . . . . . . . . . . . . . . . . . . . .  33\n0          D.  BSC/SDLC LINE REGISTRATION FORM . . . . . . . . . . . . . . .  39\n0          E.  3270 CONTROLLER REGISTRATION FORM . . . . . . . . . . . . . .  40\n0          F.  RJE TERMINAL REGISTRATION FORM  . . . . . . . . . . . . . . .  41\n0          G.  PROTOCOL CONVERTER KEY ASSIGNMENTS  . . . . . . . . . . . . .  45\n0          H.  TELEPHONE NUMBERS . . . . . . . . . . . . . . . . . . . . . .  47\n-\n-\n-\n0                                          -iii-\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ESPJOB": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x13#\\x7f\\x01\\x13#\\x7f\\x12\\x12\\x00\\x97\\x00\\x97\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-08-25T00:00:00", "modifydate": "2013-08-25T12:12:00", "lines": 151, "newlines": 151, "modlines": 0, "user": "GERHARD"}, "text": "./ ADD NAME=CLRDUMP  8000-08124-08124-1704-00012-00012-00000-GERHARD\n//* CLRDUMP   ERASES ALL SYSTEM DUMP DATASETS\n//*\n//CLRDUMP  JOB (Z906,0012),'OPERATIONS',CLASS=S,MSGCLASS=Z\n//        EXEC PGM=CLEARDSN\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.DUMP00,DISP=MOD\n//SYSLIB1  DD  DSN=SYS1.DUMP01,DISP=MOD\n//SYSLIB2  DD  DSN=SYS1.DUMP02,DISP=MOD\n//*\n//*\n//*\n//*\n./ ADD NAME=CLRDUMP0 8000-08124-08124-1702-00010-00010-00000-GERHARD\n//* CLRDUMP0  ERASES THE SYSTEM DUMP DATASET DUMP00\n//*\n//CLRDUMP0 JOB (Z906,0012),'OPERATIONS',CLASS=S,MSGCLASS=Z\n//        EXEC PGM=CLEARDSN\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.DUMP00,DISP=MOD\n//*\n//*\n//*\n//*\n./ ADD NAME=CLRDUMP1 8000-08124-08124-1703-00010-00010-00000-GERHARD\n//* CLRDUMP1  ERASES THE SYSTEM DUMP DATASET DUMP01\n//*\n//CLRDUMP1 JOB (Z906,0012),'OPERATIONS',CLASS=S,MSGCLASS=Z\n//        EXEC PGM=CLEARDSN\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.DUMP01,DISP=MOD\n//*\n//*\n//*\n//*\n./ ADD NAME=CLRDUMP2 8000-08124-08124-1703-00010-00010-00000-GERHARD\n//* CLRDUMP2  ERASES THE SYSTEM DUMP DATASET DUMP02\n//*\n//CLRDUMP2 JOB (Z906,0012),'OPERATIONS',CLASS=S,MSGCLASS=Z\n//        EXEC PGM=CLEARDSN\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.DUMP02,DISP=MOD\n//*\n//*\n//*\n//*\n./ ADD NAME=COMPRESS 0107-02299-10202-0022-00032-00017-00003-GERHARD\n//* COMPRESS   COMPRESSES PARTITIONED DATA SETS ON SELECTED VOLUMES\n//COMPRESS JOB (Z904,0012),'GERHARD',CLASS=A,MSGCLASS=Z,MSGLEVEL=(1,1),\n//   NOTIFY=GERHARD,TIME=20,REGION=4096K\n//*\n/*JOBPARM L=999\n//       EXEC  PURGEME       *DELETE OLD OUTPUT*\n//*JOBPROC JCLLIB ORDER=('GERHARD.ESPPROC')\n//*\n//       EXEC  PGM=WYLCOPDS\n//SYSPRINT DD  SYSOUT=*\n//COMPFILE DD  SYSOUT=(A,INTRDR)     SUBMITS COMPRESSION JOBS\n//VOLMOUNT DD  DUMMY\n//DDPGM001 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=PGM001\n//DDPGM002 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=PGM002\n//DDPGM003 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=PGM003\n//DDREL001 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=REL001\n//DDESA001 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=ESA001\n//DDPUB000 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=PUB000\n//*DPUB001 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=PUB001\n//DDWORK00 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=WORK00\n//DDWORK01 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=WORK01\n//DDWORK02 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=WORK02\n//DDWORK03 DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=WORK03\n//DDEXPORT DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=EXPORT\n//**       DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=\n//**       DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=\n//**       DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=\n//**       DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=\n//**       DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=\n//**       DD  DISP=OLD,UNIT=SYSALLDA,VOL=SER=\n//SYSUDUMP DD  SYSOUT=*\n//       EXEC  PURGOUT       *DELETE THIS*\n./ ADD NAME=FIXPACKS,SSI=00079064\n//*           CORRECTS VTOC ERRORS FOR RESIDENT PACKS\n//FIXPACKS JOB (0904,0012,TIME,50),GERHARD,CLASS=E,PRTY=6\n/*NOSETUP\n/*MESSAGE   REPLY 'U' TO CCHHR MESSAGE\n// EXEC FIXPACK,VS=MVS001\n// EXEC FIXPACK,VS=MVS002\n// EXEC FIXPACK,VS=MVS003\n// EXEC FIXPACK,VS=MVS004\n// EXEC FIXPACK,VS=IGP001\n//*EXEC FIXPACK,VS=WYLBUR\n//*EXEC FIXPACK,VS=WYL001\n//*EXEC FIXPACK,VS=WYL002\n//*EXEC FIXPACK,VS=WYL003\n//*EXEC FIXPACK,VS=WYL004\n//*EXEC FIXPACK,VS=WYL005\n//*EXEC FIXPACK,VS=WYL006\n//*EXEC FIXPACK,VS=WYL007\n//*EXEC FIXPACK,VS=WYL008\n./ ADD NAME=GTFPRINT,SSI=00092314\n//*           PRINTS A GTF TRACE (TAPE OR DISK)\n//GTFPRINT JOB (Z904,0012,1440,200),GERHARD,CLASS=E\n//        EXEC PGM=IKJEFT01,REGION=2048K,PARM=AMDPRDMP,TIME=120\n//*\n//SYSTSIN  DD  DUMMY,DCB=(RECFM=F,LRECL=80,BLKSIZE=80)\n//SYSTSPRT DD  DUMMY\n//*\n//INDEX    DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*\n//TAPE     DD  DISP=OLD,DSN=SYS1.TRACED\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,4)\n//*\n//PRINTER  DD  SYSOUT=*,DCB=(RECFM=FBA,LRECL=133,BLKSIZE=3990)\n//*\nEDIT DDNAME=TAPE,SYS,SLIP,CCW,USR=ALL FEF\nEND\n//*\n//*\n./ ADD NAME=LOGDATE  0104-03114-10202-0023-00009-00012-00003-GERHARD\n//* LOGDATE  PLACES THE CURRENT DATE IN THE LOG, USING LARGE LETTERS\n//LOGDATE  JOB (Z906,0020),OPERATOR,CLASS=A,MSGCLASS=Z\n//*\n//NOTE    EXEC PGM=LOGDATE\n//SYSABEND DD  SYSOUT=C\n//*\n//*\n//      EXEC PURGOUT,COND=(0,LT)\n//*\n./ ADD NAME=LOGINIT  8000-05034-05034-1545-00004-00004-00000-GERHARD\n//* LOGINITT   RE-INITIALIZES SYS1.LOGREC AFTER AN I/O ERROR\n//LOGINIT JOB (Z904,0012,1439,20),GERHARD,CLASS=E,PRTY=14\n//LINIT EXEC PGM=IFCDIP00\n//SERERDS DD   DSN=SYS1.LOGREC,DISP=OLD\n./ ADD NAME=SCRATCHS 0105-02299-10202-0027-00017-00007-00015-GERHARD\n//* SCRATCHS DELETES OBSOLETE DATA SETS FROM PUBLIC/STORAGE PACKS\n//SCRATCHS JOB (Z906,0000),OPERATOR,CLASS=A,MSGCLASS=C,\n//             TIME=12,REGION=6144K\n//*\n//         EXEC PURGEME      DELETE OLD RUNS\n//*\n//*JOBPROC JCLLIB ORDER=('GERHARD.ESPPROC')\n//*\n//SYSALL  EXEC PGM=SCRATCHS,PARM=DELETE  SCAN ALL PACKS\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY         ** LOOP THROUGH UCBS **\n//VOLMOUNT DD  DUMMY         ** READ ENTIRE VTOC INTO STORAGE **\n//*\n//OVERRIDE DD  DUMMY         ** SET OVERRIDE MODE **\n//*\n//         EXEC PURGOUT,COND=(0,LT)\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESPPARM": {"ttr": 5386, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x13#\\x7f\\x01\\x13#\\x7f\\x13\\x05\\x1d\\x1b\\x1d\\x1b\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-08-25T00:00:00", "modifydate": "2013-08-25T13:05:00", "lines": 7451, "newlines": 7451, "modlines": 0, "user": "GERHARD"}, "text": "./ ADD NAME=APPLEXH\n***********************************************************************\n*                                                                     *\n*        EXHIBIT PRODUCTION (16) AND TEST                             *\n*                                                                     *\n***********************************************************************\nEXHIBIT  VBUILD TYPE=APPL\nEXORB    APPL  ACBNAME=EXORCIST,AUTH=(ACQ,SPO,PASS)  TEST MODE EXHIBIT *\n*\n*\nEXHB     APPL  ACBNAME=EXHI,AUTH=(ACQ,SPO,PASS)\n*\n*\nEXHOP    APPL  AUTH=(SPO,NVPACE)        'NET' FUNCTION\n./ ADD NAME=ASMXTEST 8000-08079-08079-1536-00001-00001-00000-GERHARD\nTESTPGM\n./ ADD NAME=AUTOCMD  8001-11224-11224-2120-00030-00014-00000-GERHARD\n***********************************************************************\n**                                                                   **\n**   THIS IS LIST OF DEVICES FOR WHICH AN UNSOLICITED INTERRUPT      **\n**   WILL ISSUE AN OS COMMAND (NORMALLY A START FOR THE UNIT)        **\n**   USED BY PROC ATTNCMD                                            **\n**                                                                   **\n***********************************************************************\n\n03C6 S EXHIBIT,3C6\n03C5 S EXHIBIT,3C5\n03C4 S EXHIBIT,3C4\n03C3 S EXHIBIT,3C3\n\n02C6 S EXHIBIT,2C6\n02C5 S EXHIBIT,2C5\n02C4 S EXHIBIT,2C4\n02C3 S EXHIBIT,2C3\n\n01C6 S EXHIBIT,1C6\n01C5 S EXHIBIT,1C5\n01C4 S EXHIBIT,1C4\n01C3 S EXHIBIT,1C3\n\n00C6 S EXHIBIT,0C6\n00C5 S EXHIBIT,0C5\n00C4 S EXHIBIT,0C4\n00C3 S EXHIBIT,0C3\n00C2 S EXHIBIT,0C2\n\n\n./ ADD NAME=CICSTART,SSI=00084319\n/*$VS,'S CICS '\n./ ADD NAME=CRTNASTY 0101-03074-03074-1907-00008-00001-00008-GERHARD\n***********************************************************************\n**                                                                   **\n**   THIS DISPLAY IS PRODUCED BY CRTNASTY TO DIAGNOSE FAILING        **\n**   DEVICES, AND TO DISPLAY THE ADDRESS FOR CABLING VERIFICATION.   **\n**                                                                   **\n**                                        THE MANAGEMENT             **\n**                                                                   **\n***********************************************************************\n./ ADD NAME=DSSVDUMP 0100-01007-01007-1447-00003-00003-00000-GERHARD\n  DUMP INDD(DASD1) ODD(TAPE1) ALLDATA(*)  ALLEXCP -\n     OPTIMIZE(4) -\n     TOL(IOER) COMPRESS\n./ ADD NAME=EDT00    8001-74135-08256-1921-00026-00023-00000-GERHARD\n* IF CC1=*, THEN THIS IS A COMMENT\n* CC1=UNITNAME YOU WISH TO UPDATE/ADD\n*   FOLLOWED BY A SPACE AND THE VOLSER (1-6 CHARS \"*\" FOR WILDCARD OK)\n*   OR FOLLOWED BY /CUU OR /CUU-CUU OR (\"*\" FOR WILDCARDS OK)\n* EX:  12345678901234567890\n*      * THIS IS A COMMENT\n*      * ADD PUB003 TO SYSDA UNITNAME POOL\n*      SYSDA PUB003\n*      * ADD ALL PUB VOLUMES TO SYSDA UNITNAME POOL\n*      SYSDA PUB*\n*      * ADD UNIT 247 TO SYSDA POOL\n*      SYSDA /247\n*      * ADD UNITS 240 THROUGH 24F TO SYSDA UNITNAME POOL\n*      SYSDA /24*\n*      * ADD UNITS 240 THROUGH 244 TO SYSDA UNITNAME POOL\n*      SYSDA /240-244\n*      * REMOVE UNIT 443 FROM TAPE9 UNITNAME POOL\n*      -TAPE9 /443\n*      * ADD X'420-42F' ALL X'5XX' AND X'440-45F' TO TAPE1 UNITNAME\n*      TAPE1  /42*,/5*,/440-45F\nTEMP     WORK*\nSYSDA    WORK*\nSYSSQ    WORK*\nPUBLIC   PUB*\nTSO      PUB*\nSPOOL    HASP*\n./ ADD NAME=EXHOPTS  8000-08097-08097-0240-00014-00014-00000-GERHARD\n***********************************************************************\n**                                                                   **\n**   THIS IS THE MINIMUM STUB MEMBER FOR EXHIBIT OPTIONS.            **\n**   IT SPECIFIES THE LANGUAGE MODULE, AND THE LIBRARY FOR ALL       **\n**   OTHER OPTIONS                                                   **\n**                                                                   **\n***********************************************************************\n\nLANGUAGE=ENU                 U.S. ENGLISH\n\n\nOPTLIB=GERHARD.MVS.EXHOPT    ALL OTHER OPTIONS\n\n\n./ ADD NAME=FDRDUMPM,SSI=00084127\n DUMP TYPE=FDR,MAXERR=1,BUFNO=MAX\n./ ADD NAME=F4ZAPDOS,SSI=00080281\n CCHHR 0000000101  * VTOC ADDRESS\n VER     2C    F4  * REALLY DSCB 4 ?\n VER     3A    06  * MVS VERSION OF DIRF ?\n REP     3A    04  * YES; REPLACE BY SVS/MVT VERSION\n*\n CCHHR 0000000101  * VTOC ADDRESS\n VER     2C    F4  * REALLY DSCB 4 ?\n VER     3A    02  * RECLAIM ONLY ?\n REP     3A    04  * YES; SET FMT 5 BAD\n*\n./ ADD NAME=F4ZAPOS,SSI=00079062\n CCHHR 0000000101  * TOC ADDRESS\n VER     2C    F4  * REALLY DSCB 4 ?\n VER     3A    02  * RECLAIMED ?\n REP     3A    00  * FIX IT\n*\n./ ADD NAME=GCCINCL  8001-08204-08204-1224-00015-00090-00000-GERHARD\n ENTRY @@MVSTRT\n INCLUDE SYSLIB(MVSSTART)\n INCLUDE SYSLIB(START)\n INCLUDE SYSLIB(MVSSUPA)\n INCLUDE SYSLIB(STDIO)\n INCLUDE SYSLIB(STDLIB)\n INCLUDE SYSLIB(CTYPE)\n INCLUDE SYSLIB(STRING)\n INCLUDE SYSLIB(TIME)\n INCLUDE SYSLIB(ERRNO)\n INCLUDE SYSLIB(ASSERT)\n INCLUDE SYSLIB(LOCALE)\n INCLUDE SYSLIB(MATH)\n INCLUDE SYSLIB(SETJMP)\n INCLUDE SYSLIB(SIGNAL)\n./ ADD NAME=GCCTRAN  8001-08204-08204-1441-00009-00015-00000-GERHARD\n*  TRANSLATE SQUARE BRACKETS\nTRAN BA AD\nTRAN BB BD\n*RAN\n*RAN\n*RAN\n*RAN\n*RAN\n*RAN\n./ ADD NAME=GTFVTAM  8002-11251-11251-2145-00004-00004-00000-GERHARD\nTRACE=RNIO,IOP,SIOP\nIO=SIO=044\nEND\nUSR=(FE1,FE2,FE3,FE4,FEF,FF0,FF1,FF2)\n./ ADD NAME=IEAAPFA2\n SYS1.XAESPLIB          LIBPAK,\n SYS1.EXHIBIT           ESP001,   * LOCAL MODS TO EXHIBIT\n EXH.LOAD220            ESP001,   * BASE 2.2.0 EXHIBIT\n EXH.TESTLIB            ESP001,   * EXHNUT TEST LIBRARY\n./ ADD NAME=IEALPA00 8001-08149-08149-0915-00002-00004-00000-GERHARD\nSYS1.LINKLIB   @DCBEXIT,@DCBXLST,@FORMATS,@INPREAD,@PARSER,@PRINTER,\n               @SERVICE,@SRVJES2\n./ ADD NAME=IEASYS54 8001-08106-08106-1832-00032-00031-00000-GERHARD\n APF=00,                      Suffix for authorized lib list IEAAPFxx\n APG=07,                      Automatic Prority Group\n BLDLF=BA,                    Suffix for BLDL list IEABLDxx\n CMD=00,                      Automatic commands from COMMND00\n CSA=2048,                    Size of CSA  (2M minimum because VTAM)\n CVIO,                        clear VIO datasets on IPL\n DUMP=DASD,                   place dumps on DASD, list at IPL\n DUPLEX=SYS1.DUPLEX,          name of DUPLEX dataset\n FIX=00,                      list of fixed modules IEAFIXxx\n HARDCPY=(30E,ALL,CMDS),      Provide hardcopy on 30E device\n IPS=00,                      Performace options from IEAIPSxx\n LNK=00,                      Use link list from LNKLSTxx\n MLPA=00,                     LPA resident modules\n LOGCLS=L,                    JES2 log sysout class\n LOGLMT=999999,               WTL messages queued\n MAXUSER=50,                  System tasks+Initiators+TSO users max\n OPI=YES,                     OPeration Intervention is allowed\n OPT=00,                      Tuning parms from IEAOPTxx\n PAGE=(SYS1.PAGELPA,          LPA page dataset name                    X\n               SYS1.PAGECSA,  COMMON page dataset name                 X\n               SYS1.PAGEL01,  LOCAL 1 page dataset                     X\n               SYS1.PAGEL02,  LOCAL 2 page dataset                     X\n               L)             list page datsets at IPL time\n REAL=128,                    allow at most 128K for V=R address spaces\n RSU=0,                       no reconfigureable storage units\n SMF=00,                      use smf parameters from SMFPRMxx\n SQA=3,                       add 3 64K areas to SQA\n SWAP=SYS1.PAGES01,           name of swap dataset\n VAL=00,                      Volume Attribute List VATLSTxx\n VRREGN=64,                   Default region size for V=R\n WTOBFRS=250,                 Number of WTO buffers\n WTOEPLY=10                   Number of WTOR buffers\n./ ADD NAME=IEBCOMPR 8001-06268-06268-1116-00001-00015-00000-GERHARD\n COMPARE TYPORG=PO\n./ ADD NAME=IEFSSN00 8002-05050-05199-1307-00029-00022-00000-GERHARD\n         /* Sample SubSystem definitions in keyword format */\n                                                                  /* */\nSUBSYS SUBNAME(JES2) /* JES2 AS PRIMARY SUBSYSTEM */\n  PRIMARY(YES)  START(YES)    /* JES2 ignored by BSPSSADD */\n                                                                  /* */\nSUBSYS SUBNAME(JESB) /* JESB AS SECONDARY SUBSYSTEM */\n  PRIMARY(NO)  START(NO)\n                                                                  /* */\nSUBSYS SUBNAME(SMS) /* DEFINE SMS SUBSYSTEM */\n  INITRTN(IGDSSIIN)\n  INITPARM('ID=02,PROMPT=DISPLAY')\n                                                                  /* */\n/* SUBSYS SUBNAME(CICS)                                              */\n/* SUBSYS SUBNAME(RACF) INITRTN(IRRSSI00) INITPARM('#')              */\n/* SUBSYS SUBNAME(TNF)                                               */\n/* SUBSYS SUBNAME(VMCF)                                              */\n                                                                  /* */\nSUBSYS SUBNAME(CCSS)         /* CONTROL CARD SUBSYS */\nSUBSYS SUBNAME(ETPS)         /* EMERGENCY TP SYSTEM */\nSUBSYS SUBNAME(EXHI)         /* STAND-ALONE EXHIBIT */\nSUBSYS SUBNAME(GPSM)         /* YALE ACCESS METHOD  */\n/*BSYS SUBNAME(JRP)  */      /* JES2 REMOTE PRINT   */\nSUBSYS SUBNAME(MTSS)         /* DYNAMIC SUBSYS      */\nSUBSYS SUBNAME(SSSH)         /* SVC SCREENING       */\nSUBSYS SUBNAME(TSSO) /* LATER INITRTN(TSSOINIT)     START(YES)  */\nSUBSYS SUBNAME(ZAP1)\nSUBSYS SUBNAME(ZAP2)\nSUBSYS SUBNAME(ZAP3)\nSUBSYS SUBNAME(ZAP4)\n./ ADD NAME=IKJPRM00\nTS      TERMAX=16\nTS      REGNMAX=1\nTS      MAP=50\nTS      REGSIZE(1)=(200K,16K)\nTS      LPA=(IKJPTGT,IKJSCAN,IKJEFT02,IKJEFT25)\nTS      LPA=(IKJPARS)\nDRIVER  AVGSERVICE PREEMPT SUBQUEUES(1)=3\nDRIVER  CYCLES(1,1)=0\nDRIVER  CYCLES(1,2)=0\nDRIVER  CYCLES(1,3)=0\nDRIVER  MAXOCCUPANCY(1,1)=2500\nDRIVER  MINSLICE(1,1)=450\nDRIVER  MAXOCCUPANCY(1,2)=4500\nDRIVER  MINSLICE(1,2)=750\nDRIVER  MAXOCCUPANCY(1,3)=4500\nDRIVER  MINSLICE(1,3)=4500\nDRIVER  SERVICE(1,1)=450\nDRIVER  SERVICE(1,2)=1500\nDRIVER  SERVICE(1,3)=6000\nTIOC    BUFSIZE=44\nTIOC    BUFFERS=80\nTIOC    OWAITHI=8\nTIOC    OWAITLO=4\nTIOC    INLOCKHI=4\nTIOC    INLOCKLO=2\nTIOC    SLACK=01\nTIOC    RESVBUF=10\nTIOC    USERCHG=99\n./ ADD NAME=JES36LNA,SSI=00088081\n/*          JES2 RJE DEFINITIONS FOR 4341-II SYSTEM A            86190\n*\n*CPU=434A                           CPU IDS FOR SMF STATISTICS\n*                                                                   */\nTPDEF    BUFNUM=30,BUFSIZE=520,MBUFSIZE=400,RMTMSG=25,RMTNUM=75,       *\n               SESSION=3                                  /*  88081  */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\nDESTID NAME=Z3270LOW,DEST=R18  /* 328X REMOTE RANGE START            */\nDESTID NAME=Z3270HIG,DEST=R32  /* 328X REMOTE RANGE END              */\n/*STID NAME=Z3270TST,DEST=R19         GTF/VTAM DEBUGGING             */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*        UCB ADDRESS:  0AC-0AF    ***  BSC1  DIRECT LINES  ***      */\n/*                                                                   */\nLINE1    UNIT=0A0,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE2    UNIT=0A1,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE3    UNIT=0A2,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE4    UNIT=0A3,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE5    UNIT=0A4,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE6    UNIT=0A5,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE7    UNIT=0A6,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE8    UNIT=0A7,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE9    UNIT=0A8,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE10   UNIT=0A9,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE11   UNIT=0AA,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE12   UNIT=0AB,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE13   UNIT=0AC,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE14   UNIT=0AD,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE15   UNIT=0AE,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE16   UNIT=0AF,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE17   UNIT=SNA            /* ISC REMOTE PRINTER ON B-SYSTEM       */\nLINE18   UNIT=SNA           /*  PHS A PRINTER                        */\nLINE19   UNIT=SNA           /*  PHS B PRINTER                        */\n/*                                                                   */\n/***********REMOTE1  MARK-SENSE READER (B COATES) 2/3/86             */\nRMT1     3780,BLOCKED,VARIABLE,NUMPR=0,NUMPU=0,TABS,DISCINTV=1200\nRMT1     NUMRD=1,PASSWORD=DIALTYME\nR1.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=0,PRIOINC=0\nR1.RD1   PRIOLIM=10,PUDEST=0\n/*.PR1   CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132                      */\n/***********REMOTE2                                                  */\nRMT2     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT2     NUMRD=1,PASSWORD=DIALTYME\nR2.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=2,PRIOINC=0\nR2.RD1   PRIOLIM=10,PUDEST=0\nR2.PR1   CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE3                                                  */\nRMT3     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT3     NUMRD=1,PASSWORD=DIALTYME\nR3.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=3,PRIOINC=0\nR3.RD1   PRIOLIM=10,PUDEST=0\nR3.PR1   CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE4                                                  */\nRMT4     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT4     NUMRD=1,PASSWORD=DIALTYME\nR4.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=4,PRIOINC=0\nR4.RD1   PRIOLIM=10,PUDEST=0\nR4.PR1   CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE5                                                  */\nRMT5     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT5     NUMRD=1,PASSWORD=DIALTYME\nR5.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=5,PRIOINC=0\nR5.RD1   PRIOLIM=10,PUDEST=0\nR5.PR1   CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE6                                                  */\nRMT6     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT6     NUMRD=1,PASSWORD=DIALTYME\nR6.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=6,PRIOINC=0\nR6.RD1   PRIOLIM=10,PUDEST=0\nR6.PR1   CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE7                                                  */\nRMT7     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT7     NUMRD=1,PASSWORD=DIALTYME\nR7.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=7,PRIOINC=0\nR7.RD1   PRIOLIM=10,PUDEST=0\nR7.PR1   CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE8                                                  */\nRMT8     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT8     NUMRD=1,PASSWORD=DIALTYME\nR8.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=8,PRIOINC=0\nR8.RD1   PRIOLIM=10,PUDEST=0\nR8.PR1   CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE9                                                  */\nRMT9     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT9     NUMRD=1,PASSWORD=DIALTYME\nR9.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=9,PRIOINC=0\nR9.RD1   PRIOLIM=10,PUDEST=0\nR9.PR1   CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE10                                                 */\nRMT10    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT10    NUMRD=1,PASSWORD=DIALTYME\nR10.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=10,PRIOINC=0\nR10.RD1  PRIOLIM=10,PUDEST=0\nR10.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE11                                                 */\nRMT11    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT11    NUMRD=1,PASSWORD=DIALTYME\nR11.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=11,PRIOINC=0\nR11.RD1  PRIOLIM=10,PUDEST=0\nR11.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE12                                                 */\nRMT12    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT12    NUMRD=1,PASSWORD=DIALTYME\nR12.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=12,PRIOINC=0\nR12.RD1  PRIOLIM=10,PUDEST=0\nR12.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE13                                                 */\nRMT13    3780,BLOCKED,VARIABLE,NUMPR=0,NUMPU=0,TABS\nRMT13    NUMRD=1\nR13.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=0,PRIOINC=0 /* 87165 */\nR13.RD1  PRIOLIM=10,PUDEST=0\n/*3.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132                      */\n/***********REMOTE14   B. COATES - MARK SENSE READER(CMT 1C/0AD)\nRMT14    3780,BLOCKED,VARIABLE,NUMPR=0,NUMPU=0,TABS\nRMT14    NUMRD=1,NUMPR=0,NUMPU=0,LINE=14\nR14.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=0,PRIOINC=0\nR14.RD1  PRIOLIM=10,PUDEST=0\n/*4.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132                      */\n/***********REMOTE15                                                 */\nRMT15    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT15    NUMRD=1,PASSWORD=DIALTYME\nR15.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=15,PRIOINC=0\nR15.RD1  PRIOLIM=10,PUDEST=0\nR15.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE16                                                 */\nRMT16    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT16    NUMRD=1,PASSWORD=DIALTYME\nR16.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=16,PRIOINC=0\nR16.RD1  PRIOLIM=10,PUDEST=0\nR16.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE17 - ISC (BALTO. ISC31 VIA JRP)                    */\nRMT17    LUTYPE1,LINE=17,DISCINTV=0\nRMT17    NUMRD=0,NUMPU=0\n/*7.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=17,PRIOINC=0         */\n/*7.RD1  PRIOLIM=10,PUDEST=0                                         */\nR17.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE18 - PHS A 328X                                    */\nDESTID NAME=MEMO,DEST=R18\nRMT18    LUTYPE1,LINE=18,LUNAME=L0DF,DISCINTV=60,CONSOLE,SETUPMSG\nRMT18    NUMRD=0,NUMPU=0,BUFSIZE=512\n/*8.RD1  PRIOLIM=10,PUDEST=0                                         */\nR18.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE19 - PHS B 328X                                    */\nRMT19    LUTYPE1,LINE=19,LUNAME=LD33,DISCINTV=60,CONSOLE,SETUPMSG\nRMT19    NUMRD=0,NUMPU=0,BUFSIZE=512\n/*9.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=19,PRIOINC=0         */\n/*9.RD1  PRIOLIM=10,PUDEST=0                                         */\nR19.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE20                                                 */\nRMT20    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT20    NUMRD=1,PASSWORD=DIALTYME\nR20.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=20,PRIOINC=0\nR20.RD1  PRIOLIM=10,PUDEST=0\nR20.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE21  THE WYATT COMPANY  04/25/84                    */\nRMT21    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=0 /* TRANSP */\nRMT21    NUMRD=1,PASSWORD=RIC\nR21.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=21,PRIOINC=0\nR21.RD1  PRIOLIM=10,PUDEST=0\nR21.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE22   IMSL TEST REMOTE    05/06/84                  */\nRMT22    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=1,DISCINTV=600,TRANSP\nRMT22    NUMRD=1,PASSWORD=IMSL\nR22.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=22,PRIOINC=0\nR22.RD1  PRIOLIM=10,PUDEST=0\nR22.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE23                                                 */\nRMT23    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT23    NUMRD=1,PASSWORD=DIALTYME\nR23.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=23,PRIOINC=0\nR23.RD1  PRIOLIM=10,PUDEST=0\nR23.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE24                                                 */\nRMT24    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT24    NUMRD=1,PASSWORD=DIALTYME\nR24.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=24,PRIOINC=0\nR24.RD1  PRIOLIM=10,PUDEST=0\nR24.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n./ ADD NAME=JES36LNB,SSI=00090281\n/*          JES2 RJE DEFINITIONS FOR 3081-2G SYSTEM B            86190\n\n*CPU=308B                           CPU IDS FOR SMF STATISTICS\n                                                                     */\nTPDEF    BUFNUM=30,BUFSIZE=520,MBUFSIZE=520,RMTMSG=25,RMTNUM=75,       *\n               SESSION=3\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\nDESTID NAME=Z3270LOW,DEST=R17  /* 328X REMOTE RANGE START            */\nDESTID NAME=Z3270HIG,DEST=R17  /* 328X REMOTE RANGE END              */\n/*STID NAME=Z3270TST,DEST=R17         GTF/VTAM DEBUGGING             */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*                                                                   */\n/*        UCB ADDRESS:  0AC-0AF    ***  BSC1  DIRECT LINES  ***      */\n/*                                                                   */\nLINE1    UNIT=0A0,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE2    UNIT=0A1,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE3    UNIT=0A2,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE4    UNIT=0A3,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE5    UNIT=0A4,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE6    UNIT=0A5,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE7    UNIT=0A6,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE8    UNIT=0A7,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE9    UNIT=0A8,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE10   UNIT=0A9,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE11   UNIT=0AA,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE12   UNIT=0AB,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE13   UNIT=0AC,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE14   UNIT=0AD,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE15   UNIT=0AE,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE16   UNIT=0AF,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE17   UNIT=SNA            /* ISC REMOTE PRINTER ON B-SYSTEM       */\nLINE18   UNIT=SNA            /* PHS A PRINTER                        */\nLINE19   UNIT=SNA            /* PHS B PRINTER                        */\n/*                                                                   */\n/***********REMOTE1  MARK-SENSE READER (B COATES) 2/3/86             */\nRMT1     3780,BLOCKED,VARIABLE,NUMPR=0,NUMPU=0,TABS,DISCINTV=1200\nRMT1     NUMRD=1,PASSWORD=DIALTYME\nR1.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=0,PRIOINC=0\nR1.RD1   PRIOLIM=10,PUDEST=0\n/*.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132                          */\n/***********REMOTE2                                                  */\nRMT2     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT2     NUMRD=1,PASSWORD=DIALTYME\nR2.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=2,PRIOINC=0\nR2.RD1   PRIOLIM=10,PUDEST=0\nR2.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE3                                                  */\nRMT3     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT3     NUMRD=1,PASSWORD=DIALTYME\nR3.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=3,PRIOINC=0\nR3.RD1   PRIOLIM=10,PUDEST=0\nR3.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE4                                                  */\nRMT4     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT4     NUMRD=1,PASSWORD=DIALTYME\nR4.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=4,PRIOINC=0\nR4.RD1   PRIOLIM=10,PUDEST=0\nR4.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE5                                                  */\nRMT5     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT5     NUMRD=1,PASSWORD=DIALTYME\nR5.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=5,PRIOINC=0\nR5.RD1   PRIOLIM=10,PUDEST=0\nR5.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE6                                                  */\nRMT6     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT6     NUMRD=1,PASSWORD=DIALTYME\nR6.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=6,PRIOINC=0\nR6.RD1   PRIOLIM=10,PUDEST=0\nR6.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE7                                                  */\nRMT7     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT7     NUMRD=1,PASSWORD=DIALTYME\nR7.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=7,PRIOINC=0\nR7.RD1   PRIOLIM=10,PUDEST=0\nR7.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE8                                                  */\nRMT8     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT8     NUMRD=1,PASSWORD=DIALTYME\nR8.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=8,PRIOINC=0\nR8.RD1   PRIOLIM=10,PUDEST=0\nR8.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE9                                                  */\nRMT9     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT9     NUMRD=1,PASSWORD=DIALTYME\nR9.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=9,PRIOINC=0\nR9.RD1   PRIOLIM=10,PUDEST=0\nR9.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n/*T10    LUTYPE1,LINE=10,LUNAME=P00B,NUMRD=0,SETUPMSG                */\nRMT10    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT10    NUMRD=1,PASSWORD=DIALTYME\nR10.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=10,PRIOINC=0\nR10.RD1  PRIOLIM=10,PUDEST=0\nR10.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE11                                                 */\nRMT11    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT11    NUMRD=1,PASSWORD=DIALTYME\nR11.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=11,PRIOINC=0\nR11.RD1  PRIOLIM=10,PUDEST=0\nR11.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE12                                                 */\nRMT12    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT12    NUMRD=1,PASSWORD=DIALTYME\nR12.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=12,PRIOINC=0\nR12.RD1  PRIOLIM=10,PUDEST=0\nR12.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE13  WESTAT DIRECT LINE - CPU B ONLY (CMT 1B/0AC)   */\nRMT13    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI\nRMT13    NUMRD=1,LINE=13\nR13.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=13,PRIOINC=0\nR13.RD1  PRIOLIM=10,PUDEST=0\nR13.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE14   ACE DIRECT LINE - CPU B ONLY (CMT 1D/0AD) 853 */\nRMT14    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI\nRMT14    NUMRD=1,LINE=14\nR14.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=14,PRIOINC=0\nR14.RD1  PRIOLIM=10,PUDEST=0\nR14.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE15                                                 */\nRMT15    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT15    NUMRD=1,PASSWORD=DIALTYME\nR15.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=15,PRIOINC=0\nR15.RD1  PRIOLIM=10,PUDEST=0\nR15.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE16                                                 */\nRMT16    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT16    NUMRD=1,PASSWORD=DIALTYME\nR16.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=16,PRIOINC=0\nR16.RD1  PRIOLIM=10,PUDEST=0\nR16.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE17 - ISC (BALTO. ISC31 VIA JRP)                    */\nRMT17    LUTYPE1,LINE=17,DISCINTV=0\nRMT17    NUMRD=0,NUMPU=0\n/*7.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=17,PRIOINC=0         */\n/*7.RD1  PRIOLIM=10,PUDEST=0                                         */\nR17.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE18 - PHS A 328X                                    */\nDESTID NAME=MEMO,DEST=R18\nRMT18    LUTYPE1,LUNAME=L3DD,DISCINTV=60,CONSOLE,SETUPMSG,LINE=18\nRMT18    NUMRD=0,NUMPU=0,BUFSIZE=512\n/*8.RD1  PRIOLIM=10,PUDEST=0                                         */\nR18.PR1  AUTO,CLASS=A,START,PRWIDTH=132\n/***********REMOTE19 - PHS B 328X                                    */\nRMT19    LUTYPE1,LUNAME=LB33,DISCINTV=60,CONSOLE,SETUPMSG,LINE=19\nRMT19    NUMRD=0,NUMPU=0,BUFSIZE=512\n/*9.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=19,PRIOINC=0         */\n/*9.RD1  PRIOLIM=10,PUDEST=0                                         */\nR19.PR1  AUTO,CLASS=A,START,PRWIDTH=132\n/***********REMOTE20                                                 */\nRMT20    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT20    NUMRD=1,PASSWORD=DIALTYME\nR20.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=20,PRIOINC=0\nR20.RD1  PRIOLIM=10,PUDEST=0\nR20.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE21                                                 */\nRMT21    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=0 TRANSP\nRMT21    NUMRD=1,PASSWORD=DIALTYME\nR21.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=21,PRIOINC=0\nR21.RD1  PRIOLIM=10,PUDEST=0\nR21.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE22   IMSL TEST REMOTE    05/06/84                  */\nRMT22    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=1,DISCINTV=600,TRANSP\nRMT22    NUMRD=1,PASSWORD=IMSL\nR22.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=22,PRIOINC=0\nR22.RD1  PRIOLIM=10,PUDEST=0\nR22.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE23                                                 */\nRMT23    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT23    NUMRD=1,PASSWORD=DIALTYME\nR23.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=23,PRIOINC=0\nR23.RD1  PRIOLIM=10,PUDEST=0\nR23.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE24                                                 */\nRMT24    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT24    NUMRD=1,PASSWORD=DIALTYME\nR24.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=24,PRIOINC=0\nR24.RD1  PRIOLIM=10,PUDEST=0\nR24.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/***********REMOTE25                                                 */\nRMT25    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT25    NUMRD=1,PASSWORD=DIALTYME\nR25.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=25,PRIOINC=0\nR25.RD1  PRIOLIM=10,PUDEST=0\nR25.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n/*                                                               880 */\n./ ADD NAME=JES36NCI,SSI=00088081\n*              NON-CICS STANDARD START (SYSP=00, CMD=MR)\n*\n$VS,'K M,AMRF=N '\n*TOSC1,D=T; TOSC2,D=T; TOSC3,D=T; TOSC4,D=T\n*TOSC5,D=T; TOSC6,D=T; TOSC7,D=T\n*\n$S\n*\n*VS,'S DYNAMASK '\n*VS,'S TSSO,SUB=JES2 '\n$VS,'S EXHIBIT.U '\n*VS,'S TMSINIT '\n*VS,'S VTAM '\n*VS,'S NETINIT,CMD=MR '\n*        NOTE THAT NETINIT STARTS EVERYTHING ELSE EXCEPT EXHIBIT\n*\n*\n*SLNE1,LNE2,LNE3,LNE4,LNE5,LNE6,LNE11,LNE12\n*\n*VS,'S ???????? '\n*VS,'S ???????? '\n*VS,'S ???????? '\n*VS,'S ???????? '\n./ ADD NAME=JES36PPM,SSI=00088081\n/*       C.E. SERVICING - SYSTEM STARTS (SYSP=00, CMD=PM)\n*\n*TOSC1,D=T; TOSC2,D=T; TOSC3,D=T; TOSC4,D=T\n*TOSC5,D=T; TOSC6,D=T; TOSC7,D=T                                     */\n$VS,'S TSSO,SUB=JES2 '\n$VS,'S EXHIBIT.U '\n$VS,'S TMSINIT '\n$VS,'K M,AMRF=N '\n/* */\n/* */\n/* */\n$S\n/* */\n/* */\n./ ADD NAME=JES36PRM,SSI=00089306\n/********************************************************************/\n/*                                                                  */\n/* NOTE:  CHANGING ANY OF THE FOLLOWING PARAMETERS WILL PREVENT A   */\n/*        JES2 WARMSTART;  THEY CAN ONLY BE CHANGED ON A COLDSTART  */\n/*                                                                  */\n/*                                                                  */\n/* CKPTDEF   DSNAME=                                                */\n/* JOBDEF    JOBNUM=                                                */\n/* NJEDEF    OWNNODE=                                               */\n/* OUTDEF    JOENUM=                                                */\n/* SPOOLDEF  BUFSIZE=, DSNAME=, RECINCR=, SPOOLNUM=, TGNUM=,        */\n/*           TRKCELL=, VOLUME=                                      */\n/* TPDEF     RMTNUM=                                                */\n/********************************************************************/\n                              /********* CONSOLE PARAMETERS *********/\nCONDEF  AUTOCMD=20,           /* NUMBER OF AUTOMATIC COMMANDS       */\n        BSPACE=16,            /* BACKSPACE CHARACTER 88067 NOT NOT! */\n        BUFNUM=400,           /* NUMBER OF CMB'S                    */\n        BUFWARN=80,           /* WARNING THRESHOLD %                */\n        CONCHAR=\u00a2,            /* CONSOLE COMMAND CHARACTER          */\n        MASMSG=200,           /* NUMBER OF QUEUED MESSAGES          */\n        MSGID=YES,            /* PREFIX MSG W/HASP ID               */\n        RDRCHAR=$             /* READER COMMAND CHARACTER           */\nHASPSSSM=HASPO136            /* OLD SP 1.3.6 SYSTEM */\n                              /*                                    */\n                              /********* SPOOL DEFINITIONS **********/\nSPOOLDEF BUFSIZE=3856,        /* RECOMMENDED SIZE FOR 3380          */\n         DSNAME=SYS1.HASPACE, /* SPOOL DATA SETS' NAME              */\n         FENCE=YES,           /* USE SINGLE VOLUME PER JOB          */\n         SPOOLNUM=3,          /* MORE THAN ANTICIPATED SPOOLS       */\n         RECINCR=1,           /* USE ADJACENT RECORDS               */\n         TGBENUM=10,          /* TRACK GROUPS/BLOB                  */\n         TGNUM=16288,         /* FITS TGMS INTO 4K PAGE             */\n         TGSIZE=22,           /* BUFFERS/TRACK GROUP                */\n         TGWARN=80,           /* WARNING THRESHOLD                  */\n         TRKCELL=4,           /* BUFFERS/TRACK-CELL                 */\n         VOLUME=MVSCA         /* SPOOL VOLUME SERIAL                */\n                              /*                                    */\n                              /********** CHECKPOINT PARAMETERS *****/\nCKPTDEF  DSNAME=SYS1.HASPCKPT,/* DATA SET NAME FOR CHECKPOINT       */\n         DUPLEX=,             /* NO DUPLEXING                       */\n         PRIMARY=MVSCAT       /* PRIMARY CHECKPOINT VOLUME          */\n                              /*                                    */\n                              /***** OUTPUT CHARACTERISTICS *********/\nOUTDEF  COPIES=30,            /*     NUMBER OF COPIES ALLOWED       */\n        DMNDSET=YES,          /* DEMAND SETUP (NEED FIX FOR UCS)    */\n        JOENUM=1500,          /* MAX NUMBER OF JOES                 */\n        JOEWARN=80,           /* WARNING THRESHOLD %                */\n        PRTYHIGH=10,          /* CEILING FOR PRTY AGING             */\n        PRTYLOW=1,            /* FLOOR FOR PRTY AGING               */\n        PRTYOUT=NO,           /* NO PRTY= ON // OUTPUT              */\n        STDFORM=STD,          /* DEFAULT FORMS ID                   */\n        USERSET=NO            /* NO USER DEMAND-SETUP               */\n                              /*                                    */\n                              /** DEFAULT ESTIMATED SYSOUT LINES/JOB*/\nESTLNCT NUM=10,               /* # OF LINES FOR FIRST MESSAGE       */\n        INT=5000,             /*  THEN AT 5000 LINE INTERVALS       */\n        OPT=2                 /* ALLOW USER TO READ A DUMP          */\nESTPAGE  NUM=999999,INT=100,OPT=2  /* NO PAGE NUMBER CHECKING       */\n                              /*                                    */\n                              /** DEFAULT ESTIMATED SYSOUT CARDS/JOB*/\nESTPUN  NUM=10000,            /* 10,000 CARDS FOR FIRST MESSAGE     */\n        INT=2000,             /*  THEN AT 2000 CARD INTERVALS       */\n        OPT=2                 /* ALLOW JOBS TO ABEND                */\n                              /*                                    */\n                              /***** JOB CHARACTERISTICS ************/\nJOBDEF  ACCTFLD=REQUIRED,     /* ACCOUNTING FIELD MANDATORY         */\n        JCLERR=YES,           /* TERMINATE JOB W/JCL ERROR          */\n        JOBNUM=1000,          /* JOB QUEUE SIZE                     */\n        JOBWARN=80,           /* WARNING THRESHOLD %                */\n        PRTYHIGH=10,          /* UPPER LIMIT FOR AGING              */\n        PRTYJECL=NO,          /* PRIORITY JECL NOT SPPORTED         */\n        PRTYJOB=YES,          /* PRTY= ON JOB IS SUPPORTED          */\n        PRTYLOW=1,            /* LOWER LIMIT FOR AGING              */\n        PRTYRATE=3,           /* PRTY AGING RATE 1-4 IN ONE DAY     */\n        RANGE=(1-9999),       /* LOCAL JOB NUMBER RANGE             */\n        XBATCH=$$$$$          /* XBM JOB NAME PREFIX                */\n                              /*                                    */\n                              /********* INITIATORS *****************/\nINITDEF PARTNUM=9             /* NUMBER OF INITIATORS               */\n                              /*                                    */\n                              /***** DEFAULT OUTPUT PRIORITY ********/\nOUTPRTY1 PRIORITY=9,          /* OUTPUT PRTY IS 9 IF                */\n         RECORD=600           /* < 600 RECORDS                      */\nOUTPRTY2 PRIORITY=8,          /* OUTPUT PRTY IS 8 IF                */\n         RECORD=1200          /* < 1200 RECORDS                     */\nOUTPRTY3 PRIORITY=7,          /* OUTPUT PRTY IS 7 IF                */\n         RECORD=2400          /* < 2400 RECORDS                     */\nOUTPRTY4 PRIORITY=6,          /* OUTPUT PRTY IS 6 IF                */\n         RECORD=4800          /* < 4800 RECORDS                     */\nOUTPRTY5 PRIORITY=5,          /* OUTPUT PRTY IS 5 IF                */\n         RECORD=9600          /* < 9600 RECORDS                     */\nOUTPRTY6 PRIORITY=4,          /* OUTPUT PRTY IS 4 IF                */\n         RECORD=20000         /* < 20000 RECORDS                    */\nOUTPRTY7 PRIORITY=3,          /* OUTPUT PRTY IS 3 IF                */\n         RECORD=40000         /* < 40000 RECORDS                    */\nOUTPRTY8 PRIORITY=2,          /* OUTPUT PRTY IF 2 IF                */\n         RECORD=80000         /* < 80000 RECORDS                    */\nOUTPRTY9 PRIORITY=1,          /* OUTPUT PRTY IS 1 IF                */\n         RECORD=16777215      /* < 16777215 RECORDS                 */\n                              /*                                    */\n                              /***** INTERNAL READER ****************/\nINTRDR RDINUM=12              /* NUMBER OF INTERNAL READERS         */\n                              /*                                    */\n                              /***** PRINTING CHARACTERISTICS *******/\nPRINTDEF CCWNUM=50,           /* # OF CCWS / PRINT BUFFER           */\n         DBLBUFR=YES,         /* DOUBLE BUFFER LOCAL PRINTERS       */\n         FCB=6,               /* INITIAL FCB LOADED                 */\n         LINECT=61,           /* 61 LINES PER PAGE                  */\n         NIFCB=6,             /* DEFAULT FCB                        */\n         NIUCS=PN,            /* DEFAULT UCS                        */\n         UCS=PN               /* STANDARD UCS                       */\n                              /*                                    */\n                              /***** PRINTER PARAMETERS *************/\nPRINTER1 CLASS=ALP,           /* STANDARD OUTPUT CLASSES            */\n         CKPTPAGE=20,         /* CHECKPOINT INTERVAL                */\n         DRAIN,               /* WAIT FOR OPSIE TO START            */\n         DSPLTCEL,            /* SUPPORT TRACK CELLS                */\n         FCB=6,               /* DEFAULT (INITIAL) FCB              */\n         FORMS=STD,           /* DEFAULT FORMS                      */\n         LIMIT=0-10000,       /* DEFAULT LIMIT                      */\n         NOMARK,              /* FILLER                             */\n         SEP,                 /* PROVIDE SEPARATOR PAGES            */\n         NOPAUSE,             /* DON'T STOP ON GROUP CHANGE         */\n         UCS=PN,              /* DEFAULT TRAIN                      */\n         UNIT=004             /* MEMOREX #1                         */\n                              /* SECOND PRINTER                     */\nPRINTER2 CLASS=ALP,           /* STANDARD OUTPUT CLASSES            */\n         CKPTPAGE=20,         /* CHECKPOINT INTERVAL                */\n         DRAIN,               /* WAIT FOR OPSIE TO START            */\n         DSPLTCEL,            /* SUPPORT TRACK CELLS                */\n         FCB=6,               /* DEFAULT (INITIAL) FCB              */\n         FORMS=STD,           /* DEFAULT FORMS                      */\n         LIMIT=0-10000,       /* DEFAULT LIMIT                      */\n         NOMARK,              /* FILLER                             */\n         SEP,                 /* PROVIDE SEPARATOR PAGES            */\n         NOPAUSE,             /* DON'T STOP ON GROUP CHANGE         */\n         UCS=PN,              /* DEFAULT TRAIN                      */\n         UNIT=003             /* MEMOREX #2                         */\n/********************************************************************/\n/*   EXAMPLE OF SPECIFICATIONS FOR A 3800 PRINTER                   */\n/* PRINTER3 UNIT=C18,CLASS=ADOY46,                                  */\n/*          CKPTPAGE=100,DRAIN,DSPLTCEL,                            */\n/*          UCS=GF10,FCB=STD3,MARK,                                 */\n/*          WS=(W,R,Q,PMD,LIM,F/T,C,P)     *ALLOW ENTRY FOR UCS,    */\n/*                                         *FCB, AND PRIORITY       */\n/********************************************************************/\n                              /*                                    */\n                              /***** LOGICAL INITIATORS *************/\nINIT1    NAME=1,DRAIN,CLASS=E /*   FAST NON-SETUP                   */\nINIT2    NAME=2,DRAIN,CLASS=E /*   FAST NON-SETUP                   */\nINIT3    NAME=3,DRAIN,CLASS=D /*  FAST SETUP (2 DEVICES)            */\nINIT4    NAME=4,DRAIN,CLASS=AD  /*  SLOW/FAST 4/2 DEVICES           */\nINIT5    NAME=5,DRAIN,CLASS=BD /*   SLOW FAST (2 DEVICES)           */\nINIT6    NAME=6,DRAIN,CLASS=CD /*   FAST (4 / 2 DEVICES)            */\nINIT7    NAME=7,DRAIN,CLASS=FGHIE  /*  HOGS                         */\nINIT8    NAME=8,DRAIN,CLASS=P /*  DEDICATED PRINT JOBS              */\nINIT9    NAME=9,DRAIN,CLASS=Z /*  SYSTEMS AND SPECIAL EFFECTS       */\n                              /*                                    */\n                              /***** JOB CLASS DEFINITIONS **********/\nJOBCLASS(A-C)  ACCT=YES,PGMRNAME=YES,TIME=(30,0),REGION=128,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=NO\nJOBCLASS(D-E)  ACCT=YES,PGMRNAME=YES,TIME=(5,0),REGION=128,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=NO\nJOBCLASS(F-I)  ACCT=YES,PGMRNAME=YES,TIME=(60,0),REGION=128,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=NO\nJOBCLASS(J)    ACCT=YES,PGMRNAME=YES,TIME=(0,1),REGION=2,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=NO\nJOBCLASS(K-L)  ACCT=YES,PGMRNAME=YES,TIME=(1,0),REGION=64,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=NO,COPY=YES   /* TYPRUN=COPY    */\nJOBCLASS(M-O)  ACCT=YES,PGMRNAME=YES,TIME=(0,1),REGION=2,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=NO\nJOBCLASS(P)    ACCT=YES,PGMRNAME=YES,TIME=(120,0),REGION=128,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=NO\nJOBCLASS(Q-Y)  ACCT=YES,PGMRNAME=YES,TIME=(0,1),REGION=2,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=NO\nJOBCLASS(Z)    ACCT=YES,PGMRNAME=YES,TIME=(120,0),REGION=128,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=NO\nJOBCLASS(0-3)  ACCT=YES,PGMRNAME=YES,TIME=(30,0),REGION=128,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=YES   /*  TYPRUN=SCAN           */\nJOBCLASS(4-5)  ACCT=YES,PGMRNAME=YES,TIME=(5,0),REGION=128,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=YES\nJOBCLASS(6-9)  ACCT=YES,PGMRNAME=YES,TIME=(60,0),REGION=128,\n         COMMAND=IGNORE,BLP=NO,MSGLEVEL=(1,1),PERFORM=1,\n         JOURNAL=NO,RESTART=NO,SCAN=YES\n                              /*                                    */\n                              /***** OUTPUT CLASS ATTRIBUTES ********/\nOUTCLASS(A)    BLNKTRNC=NO,OUTPUT=PRINT,TRKCELL=YES\nOUTCLASS(B)    BLNKTRNC=NO,OUTPUT=PUNCH,TRKCELL=NO\nOUTCLASS(C)    BLNKTRNC=NO,OUTPUT=PRINT,TRKCELL=NO\nOUTCLASS(D-K)  BLNKTRNC=NO,OUTPUT=DUMMY,TRKCELL=NO\nOUTCLASS(L)    BLNKTRNC=NO,OUTPUT=PRINT,TRKCELL=NO\nOUTCLASS(M-O)  BLNKTRNC=NO,OUTPUT=DUMMY,TRKCELL=NO\nOUTCLASS(P)    BLNKTRNC=NO,OUTPUT=PRINT,HOLD=YES,TRKCELL=NO\nOUTCLASS(Q-9)  BLNKTRNC=NO,OUTPUT=DUMMY,TRKCELL=NO\n                              /*                                    */\n                              /***** STC DEFAULTS *******************/\nSTCCLASS AUTH=ALL,BLP=YES,COMMAND=EXECUTE,\n         MSGCLASS=Z,MSGLEVEL=(1,1),\n         PERFORM=5,\n         PROCLIB=01,\n         REGION=768,TIME=(1439,59)\n                              /*                                    */\n                              /***** TSU DEFAULTS *******************/\n                              /*                                    */\n                              /***** TSU DEFAULTS *******************/\nTSUCLASS BLP=NO,COMMAND=IGNORE,MSGCLASS=P,MSGLEVEL=(1,1),\n         PERFORM=13,PROCLIB=02,\n         REGION=768,TIME=(60,0)\n                              /**************************************/\nBUFDEF   BUFNUM=200,BUFWARN=80\nESTIME   NUM=60,INT=15         /* WRITE WARNING MESSAGE ???         */\nSMFDEF   BUFNUM=20,BUFWARN=80\nDISPLAY SPOOLDEF VOLUME\nDISPLAY CKPTDEF PRIMARY\n/********      JES2 SP 1.3.6 DIALTYME EXITS      */\n/*                                               */\n/* LOAD=DTSXIT20            DTSXIT20   $MODULE     */\n/* EXIT020  ROUTINE=RDRXIT20,DISABLE,TRACE=NO    RDRXIT20  $ENTRY  */\n/* LOAD=DTSXIT04            DTSXIT04   $MODULE     */\n/* EXIT020  ROUTINE=RDRXIT04,DISABLE,TRACE=NO    RDRXIT04  $ENTRY  */\n/* LOAD=DTSXIT02            DTSXIT02   $MODULE     */\n/* EXIT020  ROUTINE=RDRXIT02,DISABLE,TRACE=NO    RDRXIT02  $ENTRY  */\n./ ADD NAME=JES36PRO,SSI=00089156\n/*             STANDARD SYSTEM STARTS (SYSP=00, CMD=00)             */\n/*    */\n$VS,'K M,AMRF=N '\n/*TOSC1,D=T; TOSC2,D=T; TOSC3,D=T; TOSC4,D=T\n*TOSC5,D=T; TOSC6,D=T; TOSC7,D=T                      */\n/* */\n$S\n/* */\n/* */\n$VS,'S TSSO,SUB=JES2 '\n$VS,'S EXHIBIT.U '\n$VS,'S TMSINIT '\n$VS,'S NETINIT,CMD=00 '\n/*       NOTE THAT NETINIT STARTS EVERYTHING ELSE EXCEPT EXHIBIT    */\n/* */\n/* */\n/*$SLNE1,LNE2,LNE3,LNE4,LNE5,LNE6,LNE11,LNE12    */\n/* */\n/*VS,'S ???????? '  */\n/*VS,'S ???????? '  */\n/* */\n/* */\n./ ADD NAME=JES36RJE,SSI=00088081\n/*       JES REMOTE DEFINITIONS FOR REMOTES 25 AND UP            86190\n*              NOTE THAT LINE DEFINITIONS ARE IN SYSTEM DEPENDENT\n*              MEMBER NAMED JES41LNX, WITH 'X' BEING SYSTEM ID OF\n*              'A' OR 'B'\n*CPU=434A308B        SYSTEM IDS FOR SMFTERMS PROGRAM\n*                                                                    */\n/***********REMOTE25   WYATT 8132  09/23/86                          */\nRMT25    2770,BUFEX,NOTABS,NOTRANSP,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT25    NUMRD=1,PASSWORD=RIC\nR25.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=25,PRIOINC=0\nR25.RD1  PRIOLIM=10,PUDEST=0\nR25.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE26   AMERICAN GAS - PCP                            */\nRMT26    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT26    NUMRD=1,PASSWORD=AGAS\nR26.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=26,PRIOINC=0\nR26.RD1  PRIOLIM=10,PUDEST=0\nR26.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE27   CEIP - PCP                                    */\nRMT27    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT27    NUMRD=1,PASSWORD=CEIP\nR27.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=27,PRIOINC=0\nR27.RD1  PRIOLIM=10,PUDEST=0\nR27.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE28   NATIONAL WILDLIFE FEDERATION - PCP            */\nRMT28    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT28    NUMRD=1,PASSWORD=WILD\nR28.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=28,PRIOINC=0\nR28.RD1  PRIOLIM=10,PUDEST=0\nR28.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE29   PORTCITY PRESS 8280                           */\nRMT29    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT29    NUMRD=1,PASSWORD=OFFSITE\nR29.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=29,PRIOINC=0\nR29.RD1  PRIOLIM=10,PUDEST=0\nR29.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE30   PORT CITY PRESS 8280                          */\nRMT30    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT30    NUMRD=1,PASSWORD=PCP,TRANSP\nR30.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=30,PRIOINC=0\nR30.RD1  PRIOLIM=10,PUDEST=0\nR30.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE31                                                 */\nRMT31    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT31    NUMRD=1,PASSWORD=DIALTYME\nR31.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=31,PRIOINC=0\nR31.RD1  PRIOLIM=10,PUDEST=0\nR31.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE32                                                 */\nRMT32    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT32    NUMRD=1,PASSWORD=DIALTYME\nR32.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=32,PRIOINC=0\nR32.RD1  PRIOLIM=10,PUDEST=0\nR32.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE33                                                 */\nRMT33    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT33    NUMRD=1,PASSWORD=DIALTYME\nR33.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=33,PRIOINC=0\nR33.RD1  PRIOLIM=10,PUDEST=0\nR33.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE34                                                 */\nRMT34    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT34    NUMRD=1,PASSWORD=DIALTYME\nR34.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=34,PRIOINC=0\nR34.RD1  PRIOLIM=10,PUDEST=0\nR34.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE35                                                 */\nRMT35    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT35    NUMRD=1,PASSWORD=DIALTYME\nR35.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=35,PRIOINC=0\nR35.RD1  PRIOLIM=10,PUDEST=0\nR35.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE36                                                 */\nRMT36    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT36    NUMRD=1,PASSWORD=DIALTYME\nR36.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=36,PRIOINC=0\nR36.RD1  PRIOLIM=10,PUDEST=0\nR36.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE37                                                 */\nRMT37    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT37    NUMRD=1,PASSWORD=DIALTYME\nR37.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=37,PRIOINC=0\nR37.RD1  PRIOLIM=10,PUDEST=0\nR37.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE38                                                 */\nRMT38    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT38    NUMRD=1,PASSWORD=DIALTYME\nR38.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=38,PRIOINC=0\nR38.RD1  PRIOLIM=10,PUDEST=0\nR38.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE39                                                 */\nRMT39    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT39    NUMRD=1,PASSWORD=DIALTYME\nR39.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=39,PRIOINC=0\nR39.RD1  PRIOLIM=10,PUDEST=0\nR39.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE40                                                 */\nRMT40    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT40    NUMRD=1,PASSWORD=DIALTYME\nR40.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=40,PRIOINC=0\nR40.RD1  PRIOLIM=10,PUDEST=0\nR40.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE41                                                 */\nRMT41    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT41    NUMRD=1,PASSWORD=DIALTYME\nR41.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=41,PRIOINC=0\nR41.RD1  PRIOLIM=10,PUDEST=0\nR41.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE42                                                 */\nRMT42    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT42    NUMRD=1,PASSWORD=DIALTYME\nR42.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=42,PRIOINC=0\nR42.RD1  PRIOLIM=10,PUDEST=0\nR42.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE43                                                 */\nRMT43    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT43    NUMRD=1,PASSWORD=DIALTYME\nR43.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=43,PRIOINC=0\nR43.RD1  PRIOLIM=10,PUDEST=0\nR43.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE44                                                 */\nRMT44    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT44    NUMRD=1,PASSWORD=DIALTYME\nR44.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=44,PRIOINC=0\nR44.RD1  PRIOLIM=10,PUDEST=0\nR44.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE45   PROGRESSIVE WORD PROCESSING - 6737  10/31/85  */\nRMT45    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT45    NUMRD=1,PASSWORD=PWPC\nR45.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=45,PRIOINC=0\nR45.RD1  PRIOLIM=10,PUDEST=0\nR45.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE46   CENTER FOR HEALTH POLICY STUDIES     86100    */\nRMT46    S/370,CONSOLE,MULTI,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT46    NUMRD=1,PASSWORD=RWJF\nR46.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=46,PRIOINC=0\nR46.RD1  PRIOLIM=10,PUDEST=0\nR46.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE47  NCHE NETWORK     11/22/83                      */\nRMT47    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT47    NUMRD=1,MRF,PASSWORD=NCHE\nR47.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=47,PRIOINC=0\nR47.RD1  PRIOLIM=10,PUDEST=0\nR47.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE48  NORMAN DATA 8096  3/22/85                      */\nRMT48    S/370,CONSOLE,MULTI,NUMPR=2,NUMPU=2,DISCINTV=600,TRANSP\nRMT48    NUMRD=2,PASSWORD=SIGNET\nR48.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=48,PRIOINC=0\nR48.RD1  PRIOLIM=10,PUDEST=48\nR48.RD2  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=48,PRIOINC=0\nR48.RD2  PRIOLIM=10,PUDEST=48\nR48.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR48.PR2  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR48.PU1  CLASS=B,DRAIN,FORMS=STD,SEP,SUSPEND\nR48.PU2  CLASS=B,DRAIN,FORMS=STD,SEP,SUSPEND\n/***********REMOTE49   O.S.I. SYSTEM/3                               */\nRMT49    SYSTEM/3,NUMPR=1,NUMPU=1,DISCINTV=600,CONSOLE,MULTI\nRMT49    NUMRD=1,PASSWORD=OSI2\nR49.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=49,PRIOINC=0\nR49.RD1  PRIOLIM=10,PUDEST=49\nR49.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR49.PU1  CLASS=B,DRAIN,FORMS=STD,SEP,SUSPEND\n/***********REMOTE50  BRACH CANDIES--NOTTO                           */\nRMT50    3780,TRANSP,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT50    NUMRD=1,PASSWORD=BRACH\nR50.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=50,PRIOINC=0\nR50.RD1  PRIOLIM=10,PUDEST=0\nR50.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE51  SRA ACCT 8083                                  */\nRMT51    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=0,DISCINTV=600,TRANSP\nRMT51    NUMRD=1,PASSWORD=ECON\nR51.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=51,PRIOINC=0\nR51.RD1  PRIOLIM=10,PUDEST=0\nR51.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE52  NERA DIALUP LINE                               */\nRMT52    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT52    NUMRD=1,PASSWORD=NERA\nR52.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=52,PRIOINC=0\nR52.RD1  PRIOLIM=10,PUDEST=0\nR52.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE53  MATHEMATICA                                    */\nRMT53    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,COMP\nRMT53    NUMRD=1,DISCINTV=600,PASSWORD=SSSI\nR53.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=53,PRIOINC=0\nR53.RD1  PRIOLIM=10,PUDEST=0\nR53.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE54  GROUP OPERATIONS                               */\nRMT54    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=0,DISCINTV=600,TRANSP\nRMT54    NUMRD=1,PASSWORD=GOPS\nR54.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=54,PRIOINC=0\nR54.RD1  PRIOLIM=10,PUDEST=0\nR54.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE55  URBAN INSTITUTE                                */\nRMT55    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,DISCINTV=600,TRANSP\nRMT55    NUMRD=1,PASSWORD=URBN\nR55.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=55,PRIOINC=0\nR55.RD1  PRIOLIM=10,PUDEST=55\nR55.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR55.PU1  CLASS=B,DRAIN,FORMS=STD,SEP,SUSPEND\n/***********REMOTE56  HERNER CO.                                     */\nRMT56    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT56    NUMRD=1,PASSWORD=HERN\nR56.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=56,PRIOINC=0\nR56.RD1  PRIOLIM=10,PUDEST=0\nR56.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE57  NICE - HANS                                    */\nRMT57    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,COMP,DISCINTV=600\nRMT57    NUMRD=1,PASSWORD=NICE\nR57.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=57,PRIOINC=0\nR57.RD1  PRIOLIM=10,PUDEST=0\nR57.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE58  WEST VIRGINIA - TATC    11/09/83               */\nRMT58    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT58    NUMRD=1,PASSWORD=WVATATC\nR58.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=58,PRIOINC=0\nR58.RD1  PRIOLIM=10,PUDEST=0\nR58.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE59  WHC                                            */\nRMT59    SYSTEM/3,NUMPR=1,NUMPU=0,DISCINTV=600,CONSOLE,MULTI\nRMT59    NUMRD=1,PASSWORD=WHS\nR59.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=59,PRIOINC=0\nR59.RD1  PRIOLIM=10,PUDEST=0\nR59.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE60  SSI INC.                                       */\nRMT60    M20-5,CONSOLE,TRANSP,NUMPR=2,NUMPU=1,MULTI,DISCINTV=600\nRMT60    NUMRD=1,PASSWORD=SSSI\nR60.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=60,PRIOINC=0\nR60.RD1  PRIOLIM=10,PUDEST=60\nR60.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR60.PR2  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR60.PU1  CLASS=B,DRAIN,FORMS=STD,SEP,SUSPEND\n/***********REMOTE61 ICS                                             */\nRMT61    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT61    NUMRD=1,PASSWORD=FINC\nR61.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=61,PRIOINC=0\nR61.RD1  PRIOLIM=10,PUDEST=0\nR61.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE62  WESTAT                                         */\nRMT62    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI,DISCINTV=600\nRMT62    NUMRD=1,PASSWORD=WEST\nR62.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=62,PRIOINC=0\nR62.RD1  PRIOLIM=10,PUDEST=0\nR62.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE63  PEAT, MARWICK, M                               */\nRMT63    S/360,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI,DISCINTV=600\nRMT63    NUMRD=1,PASSWORD=PMMC\nR63.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=63,PRIOINC=0\nR63.RD1  PRIOLIM=10,PUDEST=0\nR63.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE64  DATA SOFT 8133                                 */\nRMT64    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,MRF\nRMT64    NUMRD=1,DISCINTV=600,PASSWORD=MACR\nR64.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=64,PRIOINC=0\nR64.RD1  PRIOLIM=10,PUDEST=0\nR64.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE65  URBAN INSTITUTE VAX 5/20/85                    */\nRMT65    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,COMP,DISCINTV=600\nRMT65    NUMRD=1,PASSWORD=URB1\nR65.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=65,PRIOINC=0\nR65.RD1  PRIOLIM=10,PUDEST=65\nR65.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR65.PU1  CLASS=B,DRAIN,FORMS=STD,SEP,SUSPEND\n/***********REMOTE66  APP. MANG.                                     */\nRMT66    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI,DISCINTV=600\nRMT66    NUMRD=1,PASSWORD=RLDC\nR66.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=66,PRIOINC=0\nR66.RD1  PRIOLIM=10,PUDEST=0\nR66.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE67  ST. JUDE                                       */\nRMT67    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,TABS,COMP\nRMT67    NUMRD=1,DISCINTV=600,PASSWORD=JUDE\nR67.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=67,PRIOINC=0\nR67.RD1  PRIOLIM=10,PUDEST=67\nR67.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR67.PU1  CLASS=B,DRAIN,FORMS=STD,SEP,SUSPEND\n/***********REMOTE68  NERA                                           */\nRMT68    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,MRF\nRMT68    NUMRD=1,DISCINTV=600,PASSWORD=NERA\nR68.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=68,PRIOINC=0\nR68.RD1  PRIOLIM=10,PUDEST=0\nR68.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE69  AUT. COUNCELORS                                */\nRMT69    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,TRANSP,DISCINTV=600\nRMT69    NUMRD=1,PASSWORD=ROSS\nR69.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=69,PRIOINC=0\nR69.RD1  PRIOLIM=10,PUDEST=69\nR69.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR69.PU1  CLASS=B,DRAIN,FORMS=STD,SEP,SUSPEND\n/***********REMOTE70  ISC                                            */\nRMT70    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,COMP\nRMT70    NUMRD=1,DISCINTV=600,PASSWORD=ISCI\nR70.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=70,PRIOINC=0\nR70.RD1  PRIOLIM=10,PUDEST=0\nR70.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE71  AM. CHIROPRACTIC ASSOC.                        */\nRMT71    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,TABS,DISCINTV=600\nRMT71    NUMRD=1,PASSWORD=ACHA,TRANSP\nR71.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=71,PRIOINC=0\nR71.RD1  PRIOLIM=10,PUDEST=0\nR71.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE72  EBASCO                                         */\nRMT72    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TABS,COMP\nRMT72    NUMRD=1,DISCINTV=600,PASSWORD=EBAS\nR72.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=72,PRIOINC=0\nR72.RD1  PRIOLIM=10,PUDEST=0\nR72.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE73  DAIS                                           */\nRMT73    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI,DISCINTV=600\nRMT73    NUMRD=1,PASSWORD=OAIS\nR73.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=73,PRIOINC=0\nR73.RD1  PRIOLIM=10,PUDEST=0\nR73.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE74  BEVERAGE MEDIA                                 */\nRMT74    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=0\nRMT74    NUMRD=1,PASSWORD=BEVM\nR74.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=74,PRIOINC=0\nR74.RD1  PRIOLIM=10,PUDEST=0\nR74.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\n/***********REMOTE75  CLARITAS CORP.                                 */\nRMT75    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,COMP,DISCINTV=600\nRMT75    NUMRD=1,PASSWORD=CLAR\nR75.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=75,PRIOINC=0\nR75.RD1  PRIOLIM=10,PUDEST=75\nR75.PR1  CLASS=A,START,FCB=6,UCS=PN,PRWIDTH=132\nR75.PU1  CLASS=B,DRAIN,FORMS=STD,SEP,SUSPEND\n/*                                                                   */\n/*********** END REMOTE RJE DEFINITIONS ************                 */\n./ ADD NAME=JES36SYS,SSI=00088081\n/*             SYSTEM'S SYSTEM STARTS (SYSP=00,GP,99, CMD=GP)\n*                                                                    */\n$VS,'K M,AMRF=N '\n/*TOSC1,D=T; TOSC2,D=T; TOSC3,D=T; TOSC4,D=T           */\n/*TOSC5,D=T; TOSC6,D=T; TOSC7,D=T                      */\n/* */\n$S\n/* */\n$VS,'S TSSO,SUB=JES2 '\n$VS,'S EXHIBIT.U '\n$VS,'S TMSINIT '\n$VS,'S NETINIT,CMD=GP '\n/*       NOTE THAT NETINIT STARTS EVERYTHING ELSE EXCEPT EXHIBIT     */\n/* */\n/* */\n/* */\n/* */\n/* */\n/* */\n./ ADD NAME=JES36TST,SSI=00088081\n*              STANDARD SYSTEM STARTS (SYSP=00, CMD=00)\n*              FOR TESTING\n$VS,'K M,AMRF=N '\n*TOSC1,D=T; TOSC2,D=T; TOSC3,D=T; TOSC4,D=T\n*TOSC5,D=T; TOSC6,D=T; TOSC7,D=T\n*\n$S\n*\n$VS,'S EXHIBIT.U '\n./ ADD NAME=JES41LNA,SSI=00091353\n*           JES2 RJE DEFINITIONS FOR 4341-II SYSTEM A            86190\n*\n*CPU=434A                           CPU IDS FOR SMF STATISTICS\n&NUMLNES=24           WAS * 3 *            UPPED FROM 19 ON      89113\n&NUMRJE=125                                UPPED FROM 75 ON      89359\n*&BSCCPU=YES\n*&BSC2770=YES\n*&BSC2780=YES\n*&BSC3780=YES\n*&BSHPRES=YES\n*&BSHTAB=YES\n*$DELAYTM=100       MICROSECONDS\n&MLBFSIZ=400\n&TPBFSIZ=520\n&BSVBOPT=YES\n*&NUMTPPR=10\n*&NUMTPPU=10\n*&NUMTPRD=10\n&NUMTPBF=30     # TP BUFFERS\n*\n*\n*\n*\n*\nDESTID NAME=Z3270LOW,DEST=R17     328X REMOTE RANGE START\nDESTID NAME=Z3270HIG,DEST=R24     328X REMOTE RANGE END          89113\n*ESTID NAME=Z3270TST,DEST=R17         GTF/VTAM DEBUGGING\nDESTID NAME=XEROX,DEST=R13\nDESTID NAME=CCSI,DEST=R13\n*\n*\n*\n*         UCB ADDRESS:  0AC-0AF    ***  BSC1  DIRECT LINES  ***\n*\nLINE1    UNIT=0A0,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE2    UNIT=0A1,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE3    UNIT=0A2,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE4    UNIT=0A3,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE5    UNIT=0A4,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE6    UNIT=0A5,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE7    UNIT=0A6,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE8    UNIT=0A7,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE9    UNIT=0A8,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE10   UNIT=0A9,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE11   UNIT=0AA,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE12   UNIT=0AB,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE13   UNIT=0AC,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE14   UNIT=0AD,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\n************ BARR/SNA-RJE LINE(S) *****************************  90136\nLINE15   UNIT=SNA            C.M.S. MULTIPLEXOR PORT #1          90142\nRMT15    LUTYPE1,BUFSIZE=512,CMPCT,COMP,CONSOLE, MFORM=J,              *\n               NUMRD=2,NUMPR=2,NUMPU=1,SETUPHDR,LINE=15          90142\nR15.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=15,PRIOINC=0     90142\nR15.RD1  PRIOLIM=10,PUDEST=15                                    90142\nR15.RD2  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=15,PRIOINC=0     90142\nR15.RD2  PRIOLIM=10,PUDEST=15                                    90142\nR15.PR1        CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1   90142\nR15.PR2        CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1   90142\nR15.PU1        SELECT=PUNCH1                                     90142\nLINE16   UNIT=SNA            NCP22 (DIRECT LINK)                 90136\nRMT16    LUTYPE1,BUFSIZE=512,CMPCT,COMP,CONSOLE, MFORM=J,              *\n               NUMPR=1,NUMPU=1,SETUPHDR                          90136\nR16.PR1        CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1   90136\nR16.PU1        SELECT=PUNCH1                                     90136\n********** VTAM LINES (17-24 327X ATTACHED PRINTERS)             89113\nLINE17   UNIT=SNA            IBM 6262 IN COMPUTER CENTER         89113\nLINE18   UNIT=SNA            ISC (BALTO.)                        89113\nLINE19   UNIT=SNA                                                89113\nLINE20   UNIT=SNA                                                89113\nLINE21   UNIT=SNA                                                89113\nLINE22   UNIT=SNA                                                89113\nLINE23   UNIT=SNA                                                89113\nLINE24   UNIT=SNA                                                89113\n*\n************REMOTE1\nRMT1     3780,BLOCKED,VARIABLE,NUMPR=0,NUMPU=0,TABS,DISCINTV=1200\nRMT1     NUMRD=1,PASSWORD=DIALTYME\nR1.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=0,PRIOINC=0\nR1.RD1   PRIOLIM=10,PUDEST=0\n*1.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE2\nRMT2     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT2     NUMRD=1,PASSWORD=DIALTYME\nR2.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=2,PRIOINC=0\nR2.RD1   PRIOLIM=10,PUDEST=0\nR2.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE3\nRMT3     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT3     NUMRD=1,PASSWORD=DIALTYME\nR3.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=3,PRIOINC=0\nR3.RD1   PRIOLIM=10,PUDEST=0\nR3.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE4\nRMT4     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT4     NUMRD=1,PASSWORD=DIALTYME\nR4.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=4,PRIOINC=0\nR4.RD1   PRIOLIM=10,PUDEST=0\nR4.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE5\nRMT5     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT5     NUMRD=1,PASSWORD=DIALTYME\nR5.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=5,PRIOINC=0\nR5.RD1   PRIOLIM=10,PUDEST=0\nR5.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE6\nRMT6     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT6     NUMRD=1,PASSWORD=DIALTYME\nR6.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=6,PRIOINC=0\nR6.RD1   PRIOLIM=10,PUDEST=0\nR6.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE7\nRMT7     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT7     NUMRD=1,PASSWORD=DIALTYME\nR7.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=7,PRIOINC=0\nR7.RD1   PRIOLIM=10,PUDEST=0\nR7.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE8\nRMT8     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT8     NUMRD=1,PASSWORD=DIALTYME\nR8.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=8,PRIOINC=0\nR8.RD1   PRIOLIM=10,PUDEST=0\nR8.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE9\nRMT9     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT9     NUMRD=1,PASSWORD=DIALTYME\nR9.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=9,PRIOINC=0\nR9.RD1   PRIOLIM=10,PUDEST=0\nR9.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE10\nRMT10    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT10    NUMRD=1,PASSWORD=DIALTYME\nR10.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=10,PRIOINC=0\nR10.RD1  PRIOLIM=10,PUDEST=0\nR10.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE11\nRMT11    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT11    NUMRD=1,PASSWORD=DIALTYME\nR11.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=11,PRIOINC=0\nR11.RD1  PRIOLIM=10,PUDEST=0\nR11.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE12\nRMT12    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT12    NUMRD=1,PASSWORD=DIALTYME\nR12.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=12,PRIOINC=0\nR12.RD1  PRIOLIM=10,PUDEST=0\nR12.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE13  --- DEDICATED LINE (MULTIPLEXOR) TO MACARTHUR\nRMT13    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=1,DISCINTV=600,TRANSP 91353\nRMT13    NUMRD=1 PASSWORD=DIALTYME                               91353\nR13.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=13,PRIOINC=0     91353\nR13.RD1  PRIOLIM=10,PUDEST=0                                     91353\n*13.RD2  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=13,PRIOINC=0     91353\n*13.RD2  PRIOLIM=10,PUDEST=0                                     91353\nR13.PR1  OPERATOR,CLASS=A,DRAIN,PRWIDTH=205                      91353\n*13.PR2  OPERATOR,CLASS=A,START,PRWIDTH=205                      91353\n*13.PR3  OPERATOR,CLASS=A,START,PRWIDTH=205                      91353\n*13.PR4  OPERATOR,CLASS=A,START,PRWIDTH=205                      91353\n*13.PR5  OPERATOR,CLASS=A,START,PRWIDTH=205                      91353\n*13.PR6  OPERATOR,CLASS=A,START,PRWIDTH=132                      91353\n*13.PR7  OPERATOR,CLASS=A,START,PRWIDTH=132                      91353\nR13.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND               91353\n*13.PU2  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND               91353\n*13.PU3  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND               91353\n*13.PU4  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND               91353\n*13.PU5  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND               91353\n*13.PU6  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND               91353\n*13.PU7  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND               91353\n************REMOTE14\nRMT14    3780,BLOCKED,VARIABLE,NUMPR=0,NUMPU=0,TABS\nRMT14    NUMRD=1,NUMPR=0,NUMPU=0,LINE=14\nR14.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=0,PRIOINC=0\nR14.RD1  PRIOLIM=10,PUDEST=0\n*14.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE17 AND UP ARE IN MEMBER JES41RJE               89113\n./ ADD NAME=JES41LNB,SSI=00091087\n*           JES2 RJE DEFINITIONS FOR 3081-2G SYSTEM B            86190\n*\n*CPU=308B                           CPU IDS FOR SMF STATISTICS\n&NUMLNES=24           WAS * 3 *                                  89113\n&NUMRJE=125\n*&BSCCPU=YES\n*&BSC2770=YES\n*&BSC2780=YES\n*&BSC3780=YES\n*&BSHPRES=YES\n*&BSHTAB=YES\n*$DELAYTM=100       MICROSECONDS\n&MLBFSIZ=400\n&TPBFSIZ=520\n&BSVBOPT=YES\n*&NUMTPPR=10\n*&NUMTPPU=10\n*&NUMTPRD=10\n&NUMTPBF=60     # TP BUFFERS\n*\n*\n*\n*\n*\nDESTID NAME=Z3270LOW,DEST=R17     328X REMOTE RANGE START\nDESTID NAME=Z3270HIG,DEST=R24     328X REMOTE RANGE END          89113\n*ESTID NAME=Z3270TST,DEST=R17         GTF/VTAM DEBUGGING\n*\n*\n*\n*\n*\n*         UCB ADDRESS:  0AC-0AF    ***  BSC1  DIRECT LINES  ***\n*\nLINE1    UNIT=5A0,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE2    UNIT=5A1,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE3    UNIT=5A2,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE4    UNIT=5A3,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE5    UNIT=5A4,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE6    UNIT=5A5,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE7    UNIT=5A6,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE8    UNIT=5A7,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE9    UNIT=5A8,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE10   UNIT=5A9,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE11   UNIT=5AA,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE12   UNIT=5AB,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE13   UNIT=5AC,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE14   UNIT=5AD,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\n************ BARR/SNA-RJE LINE(S) *****************************  90136\nLINE15   UNIT=SNA            C.M.S. MULTIPLEXOR PORT #1          90142\nRMT15    LUTYPE1,BUFSIZE=512,CMPCT,COMP,CONSOLE, MFORM=J,              *\n               NUMRD=2,NUMPR=2,NUMPU=1,SETUPHDR,LINE=15          90142\nR15.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=15,PRIOINC=0     90142\nR15.RD1  PRIOLIM=10,PUDEST=15                                    90142\nR15.RD2  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=15,PRIOINC=0     90142\nR15.RD2  PRIOLIM=10,PUDEST=15                                    90142\nR15.PR1        CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1   90142\nR15.PR2        CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1   90142\nR15.PU1        SELECT=PUNCH1                                     90142\nLINE16   UNIT=SNA            NCP22 (DIRECT LINK)                 90136\nRMT16    LUTYPE1,BUFSIZE=512,CMPCT,COMP,CONSOLE, MFORM=J,              *\n               NUMPR=1,NUMPU=1,SETUPHDR                          90136\nR16.PR1        CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1   90136\nR16.PU1        SELECT=PUNCH1                                     90136\n********** VTAM LINES (17-24 327X ATTACHED PRINTERS)             89113\nLINE17   UNIT=SNA            IBM 6262 IN COMPUTER CENTER         89113\nLINE18   UNIT=SNA                                                89113\nLINE19   UNIT=SNA                                                89113\nLINE20   UNIT=SNA                                                89113\nLINE21   UNIT=SNA                                                89113\nLINE22   UNIT=SNA                                                89113\nLINE23   UNIT=SNA                                                89113\nLINE24   UNIT=SNA                                                89113\n*\n************REMOTE1  MARK-SENSE READER (B COATES) 2/3/86\nRMT1     3780,BLOCKED,VARIABLE,NUMPR=0,NUMPU=0,TABS,DISCINTV=1200\nRMT1     NUMRD=1,PASSWORD=DIALTYME\nR1.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=0,PRIOINC=0\nR1.RD1   PRIOLIM=10,PUDEST=0\n*1.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE2\nRMT2     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT2     NUMRD=1,PASSWORD=DIALTYME\nR2.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=2,PRIOINC=0\nR2.RD1   PRIOLIM=10,PUDEST=0\nR2.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE3\nRMT3     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT3     NUMRD=1,PASSWORD=DIALTYME\nR3.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=3,PRIOINC=0\nR3.RD1   PRIOLIM=10,PUDEST=0\nR3.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE4\nRMT4     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT4     NUMRD=1,PASSWORD=DIALTYME\nR4.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=4,PRIOINC=0\nR4.RD1   PRIOLIM=10,PUDEST=0\nR4.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE5\nRMT5     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT5     NUMRD=1,PASSWORD=DIALTYME\nR5.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=5,PRIOINC=0\nR5.RD1   PRIOLIM=10,PUDEST=0\nR5.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE6\nRMT6     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT6     NUMRD=1,PASSWORD=DIALTYME\nR6.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=6,PRIOINC=0\nR6.RD1   PRIOLIM=10,PUDEST=0\nR6.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE7\nRMT7     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT7     NUMRD=1,PASSWORD=DIALTYME\nR7.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=7,PRIOINC=0\nR7.RD1   PRIOLIM=10,PUDEST=0\nR7.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE8\nRMT8     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT8     NUMRD=1,PASSWORD=DIALTYME\nR8.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=8,PRIOINC=0\nR8.RD1   PRIOLIM=10,PUDEST=0\nR8.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE9\nRMT9     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT9     NUMRD=1,PASSWORD=DIALTYME\nR9.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=9,PRIOINC=0\nR9.RD1   PRIOLIM=10,PUDEST=0\nR9.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n*MT10    LUTYPE1,LINE=10,LUNAME=P00B,NUMRD=0,SETUPMSG\nRMT10    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT10    NUMRD=1,PASSWORD=DIALTYME\nR10.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=10,PRIOINC=0\nR10.RD1  PRIOLIM=10,PUDEST=0\nR10.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE11\nRMT11    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT11    NUMRD=1,PASSWORD=DIALTYME\nR11.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=11,PRIOINC=0\nR11.RD1  PRIOLIM=10,PUDEST=0\nR11.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE12\nRMT12    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT12    NUMRD=1,PASSWORD=DIALTYME\nR12.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=12,PRIOINC=0\nR12.RD1  PRIOLIM=10,PUDEST=0\nR12.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE13  WESTAT DIRECT LINE - CPU B ONLY (CMT 1B/0AC)\nRMT13    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI\nRMT13    NUMRD=1,LINE=13\nR13.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=13,PRIOINC=0\nR13.RD1  PRIOLIM=10,PUDEST=0\nR13.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE14   ACE DIRECT LINE - CPU B ONLY (CMT 1D/0AD) 85343\nRMT14    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI\nRMT14    NUMRD=1,LINE=14\nR14.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=14,PRIOINC=0\nR14.RD1  PRIOLIM=10,PUDEST=0\nR14.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE17 AND UP IN MEMBER JES41RJE                   89113\n./ ADD NAME=JES41RJE,SSI=00091321\n*        JES REMOTE DEFINITIONS FOR REMOTES 17 AND UP            86190\n*              NOTE THAT LINE DEFINITIONS ARE IN SYSTEM DEPENDENT\n*              MEMBER NAMED JES41LNX, WITH 'X' BEING SYSTEM ID OF\n*              'A' OR 'B'\n*        RMT 17-24 ARE 327X ATTACHED PRINTERS DRIVEN BY BW328X   89113\n*CPU=434A308B        SYSTEM IDS FOR SMFTERMS PROGRAM\n*\n************REMOTE17 - IBM 6262 PRINTER                          89113\nRMT17    LUTYPE1,LINE=17,DISCINTV=600,CONSOLE,SETUPMSG,LUNAME=A3DD\nRMT17    NUMRD=0,NUMPU=0                                         89113\nDESTID NAME=MEMB,DEST=R17                                        89113\nR17.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132,CKPTLNS=5            89113\n************REMOTE18 - CMC 3268 PRINTER                          89113\nRMT18    LUTYPE1,LINE=18,DISCINTV=600,CONSOLE,SETUPMSG,LUNAME=CMC15\nRMT18    NUMRD=0,NUMPU=0,BUFSIZE=400                             89113\nDESTID NAME=CMC,DEST=R18                                         89113\nR18.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132,CKPTLNS=3            89113\n************REMOTE19 - BIO. RESEARCH INST.                       90197\nRMT19    LUTYPE1,LINE=19,DISCINTV=600,CONSOLE,SETUPMSG,LUNAME=BR14\nRMT19    NUMRD=0,NUMPU=0                                         90197\nDESTID NAME=BRIPRINT,DEST=R19                                    90197\nR19.PR1  OPERATOR,CLASS=A,START,PRWIDTH=220 CKPTLNS=2            91221\n************REMOTE20 -                                           89113\nRMT20    LUTYPE1,LINE=20,DISCINTV=600,CONSOLE,SETUPMSG,LUNAME=BR15\nRMT20    NUMRD=0,NUMPU=0                                         90197\nDESTID NAME=BRIPRT,DEST=R20                                      90197\nR20.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132 CKPTLNS=2            89113\n************REMOTE21 -                                           89113\nRMT21    LUTYPE1,LINE=21,DISCINTV=600,CONSOLE,SETUPMSG,LUNAME=CHMA31\nRMT21    NUMRD=0,NUMPU=0                                         89113\nDESTID NAME=CHMA,DEST=R21                                        89113\nR21.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132 CKPTLNS=2            89113\n************REMOTE22 -                                           89113\nRMT22    LUTYPE1,LINE=22,DISCINTV=600,CONSOLE,SETUPMSG,LUNAME=CS31\nRMT22    NUMRD=0,NUMPU=0                                         89113\nDESTID NAME=CMSBIG,DEST=R22                                      89113\nR22.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132 CKPTLNS=2            89113\n************REMOTE23 -                                           89113\nRMT23    LUTYPE1,LINE=23,DISCINTV=600,CONSOLE,SETUPMSG,LUNAME=CU31\nRMT23    NUMRD=0,NUMPU=0                                         89113\nDESTID NAME=CMSSM,DEST=R23  (NOTE $T R=R23,LIM=0-1K IN NETCMD00) 89113\nR23.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132 CKPTLNS=2            89113\n************REMOTE24 - FRA (ALEXANDRIA) ITT(IDEA) PRINTER        90351\nRMT24    LUTYPE1,LINE=24,DISCINTV=600,CONSOLE,SETUPMSG,LUNAME=FR17\nRMT24    NUMRD=0,NUMPU=0                                         90351\nDESTID NAME=FRA,DEST=R24                                         90351\nR24.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132 CKPTLNS=2            90351\n*\n************REMOTE25   WYATT 8132  09/23/86\nRMT25    2770,BUFEX,NOTABS,NOTRANSP,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT25    NUMRD=1,PASSWORD=RIC\nR25.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=25,PRIOINC=0\nR25.RD1  PRIOLIM=10,PUDEST=0\nR25.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE26   AMERICAN GAS - PCP\nRMT26    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT26    NUMRD=1,PASSWORD=AGAS\nR26.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=26,PRIOINC=0\nR26.RD1  PRIOLIM=10,PUDEST=0\nR26.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE27   CEIP - PCP\nRMT27    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT27    NUMRD=1,PASSWORD=CEIP\nR27.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=27,PRIOINC=0\nR27.RD1  PRIOLIM=10,PUDEST=0\nR27.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE28   NATIONAL WILDLIFE FEDERATION - PCP\nRMT28    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT28    NUMRD=1,PASSWORD=WILD\nR28.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=28,PRIOINC=0\nR28.RD1  PRIOLIM=10,PUDEST=0\nR28.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE29   PORTCITY PRESS 8280\nRMT29    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT29    NUMRD=1,PASSWORD=OFFSITE\nR29.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=29,PRIOINC=0\nR29.RD1  PRIOLIM=10,PUDEST=0\nR29.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE30   PORT CITY PRESS 8280\nRMT30    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT30    NUMRD=1,PASSWORD=PCP,TRANSP\nR30.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=30,PRIOINC=0\nR30.RD1  PRIOLIM=10,PUDEST=0\nR30.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE31\nRMT31    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT31    NUMRD=1,PASSWORD=DIALTYME\nR31.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=31,PRIOINC=0\nR31.RD1  PRIOLIM=10,PUDEST=0\nR31.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE32\nRMT32    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT32    NUMRD=1,PASSWORD=DIALTYME\nR32.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=32,PRIOINC=0\nR32.RD1  PRIOLIM=10,PUDEST=0\nR32.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE33\nRMT33    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT33    NUMRD=1,PASSWORD=DIALTYME\nR33.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=33,PRIOINC=0\nR33.RD1  PRIOLIM=10,PUDEST=0\nR33.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE34\nRMT34    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT34    NUMRD=1,PASSWORD=DIALTYME\nR34.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=34,PRIOINC=0\nR34.RD1  PRIOLIM=10,PUDEST=0\nR34.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE35\nRMT35    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT35    NUMRD=1,PASSWORD=DIALTYME\nR35.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=35,PRIOINC=0\nR35.RD1  PRIOLIM=10,PUDEST=0\nR35.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE36\nRMT36    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT36    NUMRD=1,PASSWORD=DIALTYME\nR36.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=36,PRIOINC=0\nR36.RD1  PRIOLIM=10,PUDEST=0\nR36.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE37\nRMT37    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT37    NUMRD=1,PASSWORD=DIALTYME\nR37.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=37,PRIOINC=0\nR37.RD1  PRIOLIM=10,PUDEST=0\nR37.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE38\nRMT38    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT38    NUMRD=1,PASSWORD=DIALTYME\nR38.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=38,PRIOINC=0\nR38.RD1  PRIOLIM=10,PUDEST=0\nR38.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE39\nRMT39    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT39    NUMRD=1,PASSWORD=DIALTYME\nR39.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=39,PRIOINC=0\nR39.RD1  PRIOLIM=10,PUDEST=0\nR39.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE40\nRMT40    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT40    NUMRD=1,PASSWORD=DIALTYME\nR40.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=40,PRIOINC=0\nR40.RD1  PRIOLIM=10,PUDEST=0\nR40.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE41\nRMT41    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT41    NUMRD=1,PASSWORD=DIALTYME\nR41.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=41,PRIOINC=0\nR41.RD1  PRIOLIM=10,PUDEST=0\nR41.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE42\nRMT42    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT42    NUMRD=1,PASSWORD=DIALTYME\nR42.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=42,PRIOINC=0\nR42.RD1  PRIOLIM=10,PUDEST=0\nR42.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE43\nRMT43    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT43    NUMRD=1,PASSWORD=DIALTYME\nR43.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=43,PRIOINC=0\nR43.RD1  PRIOLIM=10,PUDEST=0\nR43.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE44\nRMT44    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT44    NUMRD=1,PASSWORD=DIALTYME\nR44.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=44,PRIOINC=0\nR44.RD1  PRIOLIM=10,PUDEST=0\nR44.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE45   CENSUS DUMMY REMOTE   -- 9046  09/13/89\nRMT45    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT45    NUMRD=1,PASSWORD=CENSUSB\nR45.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=45,PRIOINC=0\nR45.RD1  PRIOLIM=10,PUDEST=0\nR45.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE46   CENTER FOR HEALTH POLICY STUDIES     86100\nRMT46    S/370,CONSOLE,MULTI,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT46    NUMRD=1,PASSWORD=RWJF\nR46.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=46,PRIOINC=0\nR46.RD1  PRIOLIM=10,PUDEST=0\nR46.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE47  NCHE NETWORK     11/22/83\nRMT47    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT47    NUMRD=1,MRF,PASSWORD=NCHE\nR47.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=47,PRIOINC=0\nR47.RD1  PRIOLIM=10,PUDEST=0\nR47.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE48  NORMAN DATA 8096  3/22/85\nRMT48    S/370,CONSOLE,MULTI,NUMPR=2,NUMPU=2,DISCINTV=600,TRANSP\nRMT48    NUMRD=2,PASSWORD=SIGNET\nR48.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=48,PRIOINC=0\nR48.RD1  PRIOLIM=10,PUDEST=48\nR48.RD2  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=48,PRIOINC=0\nR48.RD2  PRIOLIM=10,PUDEST=48\nR48.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\nR48.PR2  OPERATOR,CLASS=A,START,PRWIDTH=132\nR48.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\nR48.PU2  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n************REMOTE49   O.S.I. SYSTEM/3\nRMT49    SYSTEM/3,NUMPR=1,NUMPU=1,DISCINTV=600,CONSOLE,MULTI\nRMT49    NUMRD=1,PASSWORD=OSI2\nR49.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=49,PRIOINC=0\nR49.RD1  PRIOLIM=10,PUDEST=49\nR49.PR1  AUTO,CLASS=A,START,PRWIDTH=132\nR49.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n************REMOTE50  TECH. SUPPORT  DUMMY REMOTE\nRMT50    3780,TRANSP,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,DISCINTV=600\nRMT50    NUMRD=1,PASSWORD=TECHSUP\nR50.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=50,PRIOINC=0\nR50.RD1  PRIOLIM=10,PUDEST=0\nR50.PR1  AUTO,CLASS=A,START,PRWIDTH=132\n************REMOTE51  SRA ACCT 8083\nRMT51    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=0,DISCINTV=600,TRANSP\nRMT51    NUMRD=1,PASSWORD=ECON\nR51.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=51,PRIOINC=0\nR51.RD1  PRIOLIM=10,PUDEST=0\nR51.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE52  NERA DIALUP LINE\nRMT52    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT52    NUMRD=1,PASSWORD=NERA\nR52.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=52,PRIOINC=0\nR52.RD1  PRIOLIM=10,PUDEST=0\nR52.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE53  MATHEMATICA\nRMT53    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,TRANSP,COMP\nRMT53    NUMRD=1,DISCINTV=600,PASSWORD=SSSI\nR53.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=53,PRIOINC=0\nR53.RD1  PRIOLIM=10,PUDEST=53\nR53.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\nR53.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n************REMOTE54  GYP - RMT360 TESTING 11/91\nRMT54    M20-5,CONSOLE,MULTI,NUMPR=1,NUMPU=1,DISCINTV=600,TRANSP\nRMT54    NUMRD=1,PASSWORD=DIALTYME\nR54.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=54,PRIOINC=0\nR54.RD1  PRIOLIM=10,PUDEST=0\nR54.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\nR54.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n************REMOTE55  URBAN INSTITUTE\nRMT55    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,DISCINTV=600,TRANSP\nRMT55    NUMRD=1,PASSWORD=URBN\nR55.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=55,PRIOINC=0\nR55.RD1  PRIOLIM=10,PUDEST=55\nR55.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\nR55.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n************REMOTE56  HERNER CO.\nRMT56    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,DISCINTV=600\nRMT56    NUMRD=1,PASSWORD=HERN\nR56.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=56,PRIOINC=0\nR56.RD1  PRIOLIM=10,PUDEST=0\nR56.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE57  NICE - HANS\nRMT57    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,COMP,DISCINTV=600\nRMT57    NUMRD=1,PASSWORD=NICE\nR57.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=57,PRIOINC=0\nR57.RD1  PRIOLIM=10,PUDEST=0\nR57.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE58  WEST VIRGINIA - TATC    11/09/83  ** CLOSED **\nRMT58    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT58    NUMRD=1,PASSWORD=DIALTYME\nR58.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=58,PRIOINC=0\nR58.RD1  PRIOLIM=10,PUDEST=0\nR58.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE59  WHC      **  CLOSED **\nRMT59    SYSTEM/3,NUMPR=1,NUMPU=0,DISCINTV=600,CONSOLE,MULTI\nRMT59    NUMRD=1,PASSWORD=DIALTYME\nR59.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=59,PRIOINC=0\nR59.RD1  PRIOLIM=10,PUDEST=0\nR59.PR1  AUTO,CLASS=A,START,PRWIDTH=132\n************REMOTE60  SSI INC.\nRMT60    M20-5,CONSOLE,TRANSP,NUMPR=2,NUMPU=1,MULTI,DISCINTV=600\nRMT60    NUMRD=1,PASSWORD=SSSI\nR60.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=60,PRIOINC=0\nR60.RD1  PRIOLIM=10,PUDEST=60\nR60.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\nR60.PR2  OPERATOR,CLASS=A,START,PRWIDTH=132\nR60.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n************REMOTE61 ICS\nRMT61    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT61    NUMRD=1,PASSWORD=FINC\nR61.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=61,PRIOINC=0\nR61.RD1  PRIOLIM=10,PUDEST=0\nR61.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE62  WESTAT\nRMT62    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI,DISCINTV=600\nRMT62    NUMRD=1,PASSWORD=WEST\nR62.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=62,PRIOINC=0\nR62.RD1  PRIOLIM=10,PUDEST=0\nR62.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE63  PEAT, MARWICK, M\nRMT63    S/360,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI,DISCINTV=600\nRMT63    NUMRD=1,PASSWORD=PMMC\nR63.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=63,PRIOINC=0\nR63.RD1  PRIOLIM=10,PUDEST=0\nR63.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE64  DATA SOFT 8133\nRMT64    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,MRF\nRMT64    NUMRD=1,DISCINTV=600,PASSWORD=MACR\nR64.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=64,PRIOINC=0\nR64.RD1  PRIOLIM=10,PUDEST=0\nR64.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE65  URBAN INSTITUTE VAX 5/20/85\nRMT65    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,COMP,DISCINTV=600\nRMT65    NUMRD=1,PASSWORD=URB1\nR65.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=65,PRIOINC=0\nR65.RD1  PRIOLIM=10,PUDEST=65\nR65.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\nR65.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n************REMOTE66  APP. MANG.  8080\nRMT66    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI,DISCINTV=600\nRMT66    NUMRD=1,PASSWORD=RLDC\nR66.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=66,PRIOINC=0\nR66.RD1  PRIOLIM=10,PUDEST=0\nR66.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE67  ST. JUDE\nRMT67    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,TABS,COMP\nRMT67    NUMRD=1,DISCINTV=600,PASSWORD=DIALTYME\nR67.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=67,PRIOINC=0\nR67.RD1  PRIOLIM=10,PUDEST=67\nR67.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\nR67.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n************REMOTE68  NERA\nRMT68    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,MRF\nRMT68    NUMRD=1,DISCINTV=600,PASSWORD=NERA\nR68.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=68,PRIOINC=0\nR68.RD1  PRIOLIM=10,PUDEST=0\nR68.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE69  AUT. COUNCELORS\nRMT69    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,TRANSP,DISCINTV=600\nRMT69    NUMRD=1,PASSWORD=ROSS\nR69.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=69,PRIOINC=0\nR69.RD1  PRIOLIM=10,PUDEST=69\nR69.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\nR69.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n************REMOTE70  ISC\nRMT70    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TRANSP,COMP\nRMT70    NUMRD=1,DISCINTV=600,PASSWORD=ISCI\nR70.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=70,PRIOINC=0\nR70.RD1  PRIOLIM=10,PUDEST=0\nR70.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE71  AM. CHIROPRACTIC ASSOC.       ** CLOSED **\nRMT71    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,TABS,DISCINTV=600\nRMT71    NUMRD=1,PASSWORD=DIALTYME,TRANSP\nR71.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=71,PRIOINC=0\nR71.RD1  PRIOLIM=10,PUDEST=0\nR71.PR1  OPERATOR,CLASS=A,DRAIN,PRWIDTH=132\n************REMOTE72  EBASCO\nRMT72    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,TABS,COMP\nRMT72    NUMRD=1,DISCINTV=600,PASSWORD=EBAS\nR72.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=72,PRIOINC=0\nR72.RD1  PRIOLIM=10,PUDEST=0\nR72.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE73  DAIS\nRMT73    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI,DISCINTV=600\nRMT73    NUMRD=1,PASSWORD=OAIS\nR73.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=73,PRIOINC=0\nR73.RD1  PRIOLIM=10,PUDEST=0\nR73.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE74  MATHEMATICA  BARR/HASP\nRMT74    S/370,CONSOLE,MULTI,NUMPR=2,NUMPU=0,NUMRD=1,PASSWORD=MPRHASP\nR74.PR2  OPERATOR,CLASS=A,DRAIN,PRWIDTH=132\nR74.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=74,PRIOINC=0\nR74.RD1  PRIOLIM=10,PUDEST=0\nR74.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE75  CLARITAS CORP.\nRMT75    3780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=1,COMP,DISCINTV=600\nRMT75    NUMRD=1,PASSWORD=CLAR\nR75.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=75,PRIOINC=0\nR75.RD1  PRIOLIM=10,PUDEST=75\nR75.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\nR75.PU1  AUTO,CLASS=B,DRAIN,FORMS=STD.,SEP,SUSPEND\n*\n************ END REMOTE RJE DEFINITIONS ************\n./ ADD NAME=JRPDATA  8004-05199-08118-0359-00062-00038-00000-GERHARD\n***********************************************************************\n**                                                                   **\n**  SAMPLE JRP CONTROL DATA - FOR MVS 3.8J TURNKEY SYSTEM            **\n**                                                                   **\n**  COPY AS SYS1.PARMLIB(JRPDATA) FOR EXAMPLE                        **\n**  ASSUMES THAT UCB 0C7 (OR 1C7, 2C7, OR 3C7) HAS BEEN CHANGED TO   **\n**  A 3287, ADDED TO VTAM AS CUUCxC7, AND CONNECTED TO A TN3270      **\n**  SESSION.                                                         **\n**                                                                   **\n**  R= MATCHES THE JES2 REMOTE SPECIFICATION FOR THE PRINTER         **\n**  F= SPECIFIES (RESTRICTS) FORM SELECTION                          **\n**  C= SPECIFIES SYSOUT CLASSES HANDLED (ALSO DEFINE IN JES2PARM)    **\n**                                                                   **\n***********************************************************************\n*\nNOWTOR\nJRPLOG\nSMFID=246\n*\n*\nPRT1     LPP=66,                                                       X\n         R=RMT1,                                                       X\n         MLIN=0,                                                       X\n         S=Y,                                                          X\n         C=DMP,                 *WAS R                                 X\n         LU=CUU0C7,                                                    X\n         LGMD=S3270,                                                   X\n         SCS=N,                                                        X\n         DRAIN\n*\nPRT2     LPP=66,                                                       X\n         R=RMT2,                                                       X\n         MLIN=0,                                                       X\n         S=Y,                                                          X\n         C=DMP,                 *WAS R                                 X\n         LU=CUU1C7,                                                    X\n         LGMD=S3270,                                                   X\n         SCS=N,                                                        X\n         DRAIN\n*\n*\n*\n*\n*   6.  EDIT AND FORMAT THE \"JRP\" INITIALIZATION DATA-SET TO\n*       DEFINE THE REMOTE PRINTERS IN YOUR ENVIRONMENT:\n*\n*        COL 1-8    :    PRINTER NAME(1-8 CHARACTERS)\n*        COL 10-72  :    PRINTER ATTRIBUTES AS DESCRIBED IN SECTION,\n*                        'ATTRIBUTE SPECIFICATION'.  THE OPERANDS\n*                        ARE SPECIFIED WITH KEYWORDS, AND MAY BE\n*                        ENTERED IN ANY ORDER.\n*                  *NOTE CONTROL INFORMATION FOR EACH PRINTER\n*                   MAY BE CONTAINED IN CONTINUATION CARDS\n*                   INCLUDING ,(COMMA) AFTER LAST PARAMETER\n*                   ON CARD \"X\" IN COLUMN 72 AND CONTINUATION\n*                   MUST BEGIN IN COLUMN 10.\n*\n*         EX.:\n* COL:    1        10                                                72\n*         RMT001   R=RMT001,SCS=N,LGMD=NSNAPRT,LU=LU0A0,S=N,         X\n*                  MLIN=0,F=A100,C=A,LPP=068,\n*         R002     R=RMT002,LGMD=SCSPRT,C=A,LU=SNA05B\n./ ADD NAME=JRPDOLD  8000-08118-08118-0355-00047-00047-00000-GERHARD\n***********************************************************************\n**                                                                   **\n**  SAMPLE JRP CONTROL DATA - FOR MVS 3.8J TURNKEY SYSTEM            **\n**                                                                   **\n**  COPY AS SYS1.PARMLIB(JRPDATA) FOR EXAMPLE                        **\n**  ASSUMES THAT UCB 0C7 (OR 1C7, 2C7, OR 3C7) HAS BEEN CHANGED TO   **\n**  A 3287, ADDED TO VTAM AS CUUCxC7, AND CONNECTED TO A TN3270      **\n**  SESSION.                                                         **\n**                                                                   **\n**  R= MATCHES THE JES2 REMOTE SPECIFICATION FOR THE PRINTER         **\n**  F= SPECIFIES (RESTRICTS) FORM SELECTION                          **\n**  C= SPECIFIES SYSOUT CLASSES HANDLED (ALSO DEFINE IN JES2PARM)    **\n**                                                                   **\n***********************************************************************\n*\n*\n*\n*\n*\n*\nP0C7     LPP=66,LU=CUU0C7,MLIN=999999,R=RMT1,                          *\n         SCS=N,F=,C=DMP,PRT=328X\n*\n*\nP1C7     LPP=66,LU=CUU1C7,MLIN=999999,R=RMT2,                          *\n         SCS=N,F=,C=DMP,PRT=328X\n*\n*\n*   6.  EDIT AND FORMAT THE \"JRP\" INITIALIZATION DATA-SET TO\n*       DEFINE THE REMOTE PRINTERS IN YOUR ENVIRONMENT:\n*\n*        COL 1-8    :    PRINTER NAME(1-8 CHARACTERS)\n*        COL 10-72  :    PRINTER ATTRIBUTES AS DESCRIBED IN SECTION,\n*                        'ATTRIBUTE SPECIFICATION'.  THE OPERANDS\n*                        ARE SPECIFIED WITH KEYWORDS, AND MAY BE\n*                        ENTERED IN ANY ORDER.\n*                  *NOTE CONTROL INFORMATION FOR EACH PRINTER\n*                   MAY BE CONTAINED IN CONTINUATION CARDS\n*                   INCLUDING ,(COMMA) AFTER LAST PARAMETER\n*                   ON CARD \"X\" IN COLUMN 72 AND CONTINUATION\n*                   MUST BEGIN IN COLUMN 10.\n*\n*         EX.:\n* COL:    1        10                                                72\n*         RMT001   R=RMT001,SCS=N,LGMD=NSNAPRT,LU=LU0A0,S=N,         X\n*                  MLIN=0,F=A100,C=A,LPP=068,\n*         R002     R=RMT002,LGMD=SCSPRT,C=A,LU=SNA05B\n./ ADD NAME=LISTCATC,SSI=00085179\n LISTCAT ALL\n./ ADD NAME=LNKLNK   0100-00148-00148-1048-01324-01324-00000-GERHARD\nLNK      TITLE  'LNKLNK (RELAY) - LINKAGE MANAGEMENT'\n***********************************************************************\n*                                                                     *\n*                             L N K L N K                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  COPYRIGHT INFORMATION -                                            *\n*                                                                     *\n*        COPYRIGHT (C) RELAY TECHNOLOGY, INC.  1995                   *\n*            ALL RIGHTS RESERVED                                      *\n*                                                                     *\n*  MODULE NAME -                                                      *\n*                                                                     *\n*        LNKLNK                                                       *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        LINKAGE MANAGEMENT ROUTINES FOR THE RELAY SYSTEM             *\n*                                                                     *\n*  ATTRIBUTES -                                                       *\n*                                                                     *\n*        RESIDENT, REENTERANT                                         *\n*                                                                     *\n*  ENTRY POINTS -                                                     *\n*                                                                     *\n*        LNKLNKIN - LINKAGE INITIALIZATION                            *\n*        LNKLNKAT - CREATE A SUBTASK                                  *\n*        LNKLNKDT - DELETE A SUBTASK                                  *\n*        LNKLNKDF - HANDLE \"DEFER\" TYPE LINKAGE                       *\n*        LNKLNKLK - HANDLE \"LINK\" TYPE LINKAGE                        *\n*        LNKLNKRT - HANDLE LINKAGE RETURN                             *\n*        LNKLNKSA - ALLOCATE A NEW SAVE AREA                          *\n*        LNKLNKSR - RETURN THE CURRENT SAVE AREA                      *\n*        LNKLNKXC - HANDLE \"XCTL\" TYPE LINKAGE                        *\n*        LNKLNKTR - LINKAGE TERMINATION                               *\n*                                                                     *\n*  ABENDS -                                                           *\n*                                                                     *\n*        LNK001 - ATTEMPT TO \"CALL\" A NONEXISTANT ROUTINE.            *\n*        LNK002 - INVALID \"RETURN\" LINKAGE USED.                      *\n*        LNK003 - ATTEMPT TO \"XCTL\" A NONEXISTANT ROUTINE.            *\n*        LNK004 - ATTEMPT TO \"DEFER\" A NONEXISTANT ROUTINE.           *\n*        LNK005 - ATTEMPT TO \"DEFER\" WITHOUT A LINE BLOCK.            *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        1. THIS MODULE PROVIDES SERVICES USED FOR LINKING            *\n*           BETWEEN ROUTINES IN THE SYSTEM. FOR MORE INFORMATION,     *\n*           REFER TO THE INDIVIDUAL ENTRY POINTS CONTAINED IN         *\n*           THIS MODULE.                                              *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY   GLOBALS           GLOBAL DEFINITIONS:\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          MODULE DEFINITION                          *\n*                                                                     *\n***********************************************************************\n         SPACE  2\nLNKLNK   BEGIN  BASE=R12          BEGIN OF MODULE:\n         USING  SAVEAREA,R13      SAVE AREA ADDRESSABILITY\n         USING  MASTER,R10        MASTER CONTROL BLOCK ADDRESSABILITY\n         USING  LINE,R8           LINE CONTROL BLOCK ADDRESSABILITY\n         EJECT ,                                               M0019RLY\n         AIF (&S$CMS OR &S$TSO).AT001                          M0019RLY\n***********************************************************************\n*                                                                     *\n*                           L N K L N K A T                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKAT                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        PERFORM THE CREATION OF A SUBTASK.                           *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R1  = ADDRESS OF THE PARAM LIST PASSED TO THE SUBTASK        *\n*              (SUBTASK LINE CONTROL BLOCK)                           *\n*        R2  = ADDRESS OF THE SUBTASK TERMINATION EXIT                *\n*        R3  = ADDRESS OF THE ABEND EXIT ROUTINE                      *\n*        R8  = ADDRESS OF THE LINE BLOCK (CALLEE)                     *\n*        R10 = ADDRESS OF THE MASTER CONTROL BLOCK                    *\n*        R14 = CALLER'S RETURN ADDRESS                                *\n*        R15 = ENTRY POINT ADDRESS, =A(LNKLNKAT)                      *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        R1  =   ADDRESS OF THE TCB FOR SUBTASK IDENTIFICATION        *\n*        R15 =   RETURN CODE                                          *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ADDRESS FOR SUBTASK ENTRY POINT NAME                 *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = UNUSED                                               *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9    = WORK                                                 *\n*        R8    = ADDRESS OF THE LINE BLOCK (CALLEE)                   *\n*        R7-R2 = WORK                                                 *\n*        R1    = ENTRY/EXIT ADDRESSES (ECB & TCB)                     *\n*        R0    = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        1. THIS SUBROUTINE IS RESPONSIBLE FOR CREATING A SUBTASK     *\n*           VIA 'ATTACH' PROCESSING. THE 'CREATING' TASK WILL BE      *\n*           NOTIFIED OF THE SUBTASK'S ENDING VIA AN EXIT. THE         *\n*           TASK CONTROL BLOCK ADDRESS WILL BE RETURNED AS AN         *\n*           IDENTIFIER FOR THE SUBTASK.                               *\n*                                                                     *\n*        2. THE ADDRESS OF THE NEW ENTRY POINT IS DETERMINED          *\n*           BY EXECUTING THE INSTRUCTION FOLLOWING THE                *\n*           \"BAL\" TO THIS ROUTINE. THAT IS, THE INSTRUCTION           *\n*           AT 0(R14) ON ENTRY HERE. THE EVENTUAL RETURN IS           *\n*           MADE TO 4(R14).                                           *\n*                                                                     *\n*        3. UPON EXIT, REGISTER 1 CONTAINS THE ADDRESS OF             *\n*           THE TCB FOR SUBTASK IDENTIFICATION.                       *\n*                                                                     *\n***********************************************************************\n         SPACE  2                                              M0019RLY\nLNKLNKAT ENTER  BASE=,SAVE=       CREATE A SUBTASK:            M0019RLY\n         EX     0,0(R14)          EXECUTE TO LOCATE CALLEE     M0019RLY\n         LA     R14,4(,R14)       AND INCREMENT RETURN ADDRESS M0019RLY\n         LA     R15,0(,R15)       PURIFY THE ADDRESS           M0019RLY\n         STM    R0,R15,COMSVLNK   SAVE CALLERS REGISTERS       M0019RLY\n         L      R13,COMSVFRE      POINT TO A SAVE AREA         M0019RLY\n         L      R12,MSTLKBAS      LOAD MODULE BASE ADDRESS     M0019RLY\n         CL     R15,MSTRELOC      CALLEE'S ADDRESS = ZERO?     M0019RLY\n         BZ     LNK007            YES - BRANCH (ERROR)         M0019RLY\n         SPACE  2                                              M0019RLY\n*\n*        ATTACH THE ROUTINE.\n*\n*** R3270 customer reports 22A abends. Dump shows clobbered LINAREA3,\n*** as though used by another task. Pending permanent resolution (e.g.,\n*** GETMAIN for unique area), will try LINABREG instead.        GP00141\n         MVC    LINABREG(ATTCHEND-ATTCHLST),ATTCHLST  MOVE      GP00141\n*OLD*    LA     R4,ATTCHEND       CALCULATE LENGTH OF PARM LISTM0019RLY\n*OLD*    LA     R5,ATTCHLST       ...                          M0019RLY\n*OLD*    SR     R4,R5             ...                          M0019RLY\n*OLD*    BCTR   R4,0              SUBT 1 FROM LENGTH FOR EXEC  M0019RLY\n*OLD*    EX     R4,LNKATMV        GO MOVE THE PARM LIST TO WORKM0019RLY\n         LR     R5,R1             COPY LINE BLOCK ADDRESS      M0019RLY\n         LR     R6,R15            COPY EP NAME ADDRESS         M0019RLY\n         AIF (&S$MVFT).ATT1                                    M0653RLY\n         ATTACH EPLOC=(R6),ETXR=(R2),ESTAI=((R3),(R5)),        M0019RLY+\n               PURGE=HALT,TERM=NO,SM=SUPV,                     F0337RLY+\n               SF=(E,LINABREG),MF=(E,(R5))                      GP00141\n*OLD*          SF=(E,LINAREA3),MF=(E,(R5))                     M0019RLY\n         AGO .ATT1A                                            M0653RLY\n.ATT1    ANOP  ,                                               M0653RLY\n         ATTACH EPLOC=(R6),ETXR=(R2),ESTAI=((R3),(R5)),        M0653RLY+\n               PURGE=HALT,TERM=NO,SM=SUPV,SZERO=NO,            M0653RLY+\n               JSTCB=YES,SF=(E,LINAREA3),MF=(E,(R5))           M0653RLY\n.ATT1A   ANOP  ,                                               M0653RLY\n         LTR    R15,R15           ATTACH SUCCESSFUL??          M0019RLY\n         BNZ    LNK007            NO ... BRANCH                M0019RLY\n         SPACE  2                                              M0019RLY\n         AIF    (NOT &SDIAG).ATDIAG1                           M0019RLY\n*\n*        SAVE DIAGNOSTICS INFORMATION.\n*\nLNKATCT  CSADD  MSTLKNMA,WK1=R2,WK2=R3  REQUESTS WE PROCESS:   M0019RLY\n.ATDIAG1 ANOP  ,                                               M0019RLY\n         SPACE  2                                              M0019RLY\n*\n*        THE TASK HAS BEEN CREATED.\n*\n         L      R0,COMSVLNK       RESTORE CALLER'S REGISTERS   M0019RLY\n         LM     R2,R14,LNKSVR2    ...                          M0019RLY\n         SR     R15,R15           CLEAR RETURN CODE            M0019RLY\n         BR     R14               - RETURN TO CALLER -         M0019RLY\n         SPACE  2                                              M0019RLY\nLNKATMV  MVC    LINAREA3(0),ATTCHLST  - EXECUTED -             M0019RLY\n         SPACE  2                                              M0019RLY\n*\n*        FATAL ERROR: UNABLE TO ATTACH NEW SUBTASK.\n*\nLNK007   PABEND  007              *** INVALID ATTACH ***       M0019RLY\n.AT001   ANOP  ,                                               M0019RLY\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           L N K L N K D F                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKDF                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        PERFORM \"DEFER\" TYPE LINKAGE                                 *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R8  = ADDRESS OF THE LINE CONTROL BLOCK                      *\n*        R10 = ADDRESS OF THE MASTER CONTROL BLOCK                    *\n*        R14 = CALLER'S RETURN ADDRESS                                *\n*        R15 = ENTRY POINT ADDRESS, =A(LNKLNKDF)                      *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        R1  = ADDRESS OF THE SAVEAREA QUEUED FOR DISPATCH.           *\n*        R15 = ADDRESS OF THE ROUTINE FOR DEFERRED CALL.              *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ENTRY ADDRESS FOR LINKAGE & WORK                     *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = UNUSED                                               *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9-R0 = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        1. THIS SUBROUTINE PROVIDES DEFERRED LINKAGE TO A ROUTINE.   *\n*           WE RETURN IMMEDIATELY TO OUR CALLER; THE SPECIFIED        *\n*           ROUTINE WILL BE LATER CALLED FROM THE DISPATCHER.         *\n*           DEFER TO THE \"LNKDSP\" MODULE FOR MORE INFORMATION.        *\n*                                                                     *\n*        2. THE CALLEE'S ADDRESS IS DETERMINED BY EXECUTING THE       *\n*           INSTRUCTION JUST AFTER THE \"BAL\" TO THIS ROUTINE.         *\n*           THAT IS, THE INSTRUCTION AT 0(R14) ON ENTRY HERE. THE     *\n*           EVENTUAL RETURN IS MADE TO 4(R14).                        *\n*                                                                     *\n***********************************************************************\n         SPACE  2\nLNKLNKDF ENTER  BASE=,SAVE=       QUEUE UP TASK FOR DISPATCH:\n         SPACE  2\n         AIF    (&S$VTAM).DF001                                M0019RLY\n*\n*        DISPATCH A ROUTINE: FIRST LOAD THE CALLEE'S ADDRESS,\n*        UPDATE OUR CALLER'S RETURN ADDRESS, AND SAVE THE\n*        CALLER'S REGISTERS (TEMPORARILY). THEN RELOAD OUR\n*        MODULE'S BASE REGISTER AND UPDATE VARIOUS LINKAGE\n*        STATISTICS.\n*\n         EX     0,0(R14)          EXECUTE TO LOCATE CALLEE\n         LA     R14,4(,R14)       AND INCREMENT RETURN ADDRESS\n         LA     R15,0(,R15)       PURIFY CALLEE'S ADDRESS VALUE\n         A      R15,MSTRELOC      RELOCATE THE ADDRESS CONSTANT\n         STM    R0,R15,COMSVLNK   SAVE CALLER'S REGISTERS HERE M0019RLY\n         L      R12,MSTLKBAS      LOAD MODULE BASE ADDRESS\n         CL     R15,MSTRELOC      HAD ZERO FOR CALLEE'S ADDRESS?\n         BZ     LNK004            YES - CALLEE DOES NOT EXIST\n         LTR    R8,R8             DO WE HAVE A LINE BLOCK NOW?\n         BZ     LNK005            NO - WE CANNOT DISPATCH WITHOUT\n         SPACE\n         AIF    (NOT &SDIAG).DFDIAG1                           M0019RLY\n         LA     R1,1              LOAD A CONSTANT VALUE\n         A      R1,MSTLKNMD       BUMP COUNT OF \"DEFER\" REQUESTS\n         ST     R1,MSTLKNMD       ...\n.DFDIAG1 ANOP  ,                                               M0019RLY\n         SPACE  2\n*\n*        ALLOCATE A SAVE AREA AND ADD IT TO THE DISPATCH QUEUE.\n*\n         BAL    R9,GETSAVE        ALLOCATE A NEW SAVEAREA\n         CALL   LNKDSPQU          QUEUE THIS UP FOR DISPATCH\n         L      R14,LNKSVR14      LOAD CALLER'S RETURN ADDRESS\n         ST     R14,SAVECR14      SAVE THIS FOR DIAGNOSTIC USE\n         SPACE  2\n*\n*        RETURN TO OUR CALLER, FIRST SETTING REGISTERS TO BE\n*        PASS TO THE DISPATCHED ROUTINE IN THE SAVEAREA FOR\n*        THAT ROUTINE.\n*\n         LA     R14,LNKLNKRT      POINT TO OUR RETURN ADDRESS\n         L      R15,LNKSVR15      LOAD ADDRESS OF THE CALLEE\n         AIF    (NOT &SDIAG).DFDIAG2                           M0043RLY\n         ST     R15,SAVECR15      SAVE THIS FOR DIAGNOSTIC USE M0043RLY\n.DFDIAG2 ANOP   ,                                              M0043RLY\n         LM     R0,R12,COMSVLNK   RESTORE REMAINING REGISTERS  M0019RLY\n         STM    R14,R12,SAVEREGS  SET REGISTERS IN QUEUED SAVEAREA\n         SPACE\n         LR     R1,R13            RETURN SAVEAREA ADDRESS IN R1\n         LM     R13,R14,LNKSVR13  RESTORE CALLER'S REGISTERS\n         BR     R14               - RETURN TO OUR CALLER -\n         SPACE  2\n*\n*        FATAL ERROR: ATTEMPT TO DEFER A NONEXISTANT ROUTINE.\n*\nLNK004   PABEND 004               *** INVALID DEFER ATTEMPT ***\n.DF001   ANOP   ,                                              M0019RLY\n         SPACE  2\n*\n*        FATAL ERROR: ATTEMPT TO DEFER WITHOUT A LINE BLOCK.\n*\nLNK005   PABEND 005               *** INVALID DEFER ATTEMPT ***\n         EJECT ,                                               M0019RLY\n         AIF   (&S$CMS OR &S$TSO).DT001                        M0019RLY\n***********************************************************************\n*                                                                     *\n*                           L N K L N K D T                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKDT                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        PERFORM THE DELETION OF A SUBTASK.                           *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R1  = ADDRESS OF THE TASK CONTROL BLOCK                      *\n*        R8  = ADDRESS OF THE LINE BLOCK (CALLEE)                     *\n*        R10 = ADDRESS OF THE MASTER CONTROL BLOCK                    *\n*        R14 = CALLER'S RETURN ADDRESS                                *\n*        R15 = ENTRY POINT ADDRESS, =A(LNKLNKDT)                      *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        R15 = 0; THIS IS ALWAYS SUCCESSFUL (CC=0)                    *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ENTRY ADDRESS FOR LINKAGE & WORK                     *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = UNUSED                                               *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9    = WORK                                                 *\n*        R8    = ADDRESS OF THE LINE BLOCK (CALLEE)                   *\n*        R7-R2 = WORK                                                 *\n*        R1    = ENTRY ADDRESS  (TCB)                                 *\n*        R0    = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        1. THIS SUBROUTINE IS RESPONSIBLE FOR DELETING A SUBTASK     *\n*           VIA 'DETACH' PROCESSING. THE 'DELETING' TASK WILL         *\n*           SUPPLY THE TASK CONTROL BLOCK ADDRESS, WHICH              *\n*           IDENTIFIES THE APPROPRIATE SUBTASK.                       *\n*                                                                     *\n*        2. UPON ENTRY, REGISTER 1 CONTAINS THE ADDRESS OF            *\n*           THE TCB FOR SUBTASK IDENTIFICATION.                       *\n*                                                                     *\n***********************************************************************\n         SPACE  2                                              M0019RLY\nLNKLNKDT ENTER  BASE=,SAVE=       DELETE A SUBTASK:            M0019RLY\n         STM    R0,R15,COMSVLNK   SAVE CALLERS REGISTERS       M0019RLY\n         L      R12,MSTLKBAS      LOAD MODULE BASE ADDRESS     M0019RLY\n         SPACE  2                                              M0019RLY\n*\n*        DETACH THE ROUTINE.\n*\n         DETACH (R1),STAE=NO      DETACH THE SUBTASK           M0019RLY\n         LTR    R15,R15           REQUEST OK??                 M0019RLY\n         BNZ    LNK008            NO ... BRANCH                M0019RLY\n         SPACE  2                                              M0019RLY\n         AIF    (NOT &SDIAG).DTDIAG1                           M0019RLY\n*\n*        SAVE DIAGNOSTICS INFORMATION.\n*\nLNKDTCT  CSADD  MSTLKNMS,WK1=R2,WK2=R3  REQUESTS PROCESSED:    M0019RLY\n.DTDIAG1 ANOP  ,                                               M0019RLY\n         SPACE  2                                              M0019RLY\n*\n*        THE TASK HAS BEEN DELETED.\n*\n         LM     R0,R14,COMSVLNK   RESTORE CALLER'S REGISTERS   M0019RLY\n         BR     R14               - RETURN TO CALLER -         M0019RLY\n         SPACE  2                                              M0019RLY\n*\n*        FATAL ERROR: UNABLE TO DETACH THE SUBTASK.\n*\nLNK008   PABEND 008               *** INVALID DETACH ***       M0019RLY\n.DT001   ANOP  ,                                               M0019RLY\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           L N K L N K I N                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKIN                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        INITIALIZE THE LINKAGE MANAGER                               *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R1  = POINTER TO SUBTASK ENTRY NAME FOR RELAY/3270-VTAM      *\n*        R14 = CALLER'S RETURN ADDRESS                                *\n*        R15 = ENTRY POINT ADDRESS, =A(LNKLNKIN)                      *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        R15 = 0; THIS IS ALWAYS SUCCESSFUL (CC=0).                   *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ENTRY ADDRESS FOR LINKAGE & WORK                     *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = UNUSED                                               *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9-R0 = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        1. THIS SUBROUTINE PREALLOCATES A BLOCK OF SAVE AREAS        *\n*           USED FOR LATER LINKAGE (THE LOCALIZATION OF STORAGE       *\n*           IS A BETTER WAY THAN ALLOCATING ALL AREAS OUT OF FREE     *\n*           STORAGE WHEN REQUIRED). THE \"PRESAVE\" EQUATE (SEE THE     *\n*           END OF THIS MODULE) DEFINES THE NUMBER OF AREAS TO BE     *\n*           ALLOCATED.                                                *\n*                                                                     *\n*        2. IF THE \"MSTSVARS\" AND \"MSTSVARE\" VALUES ARE SET BEFORE    *\n*           CALLING THIS ROUTINE, THE AREA PREVIOUSLY ALLOCATED       *\n*           WILL BE USED.                                             *\n*                                                                     *\n***********************************************************************\n         SPACE  2\nLNKLNKIN ENTER  SAVE=COMSVLNK     INITIALIZE LINKAGE MANAGEMENTM0019RLY\n         LR     R4,R1             SAVE VTAM EP NAME ADDRESS    M0019RLY\n         SPACE  2\n*\n*        SET VARIOUS ROUTINE ADDRESSES IN THE MASTER CONTROL BLOCK.\n*\n         LA     R0,LNKLNKLK       POINT TO \"LINK\" PROCESSING ROUTINE\n         ST     R0,MSTLKAD1       SET ADDRESS FOR LATER USE\n         LA     R0,LNKLNKXC       POINT TO \"XCTL\" PROCESSING ROUTINE\n         ST     R0,MSTLKAD2       SET ADDRESS FOR LATER USE\n         LA     R0,LNKLNKDF       POINT TO \"DEFER\" PROCESSING ROUTINE\n         ST     R0,MSTLKAD3       SET ADDRESS FOR LATER USE\n         AIF    (&S$CMS OR &S$TSO).IN001                       M0019RLY\n         LA     R0,LNKLNKAT       POINT TO \"ATTACH\" PROCESSING M0019RLY\n         ST     R0,MSTLKAD4       SET ADDRESS FOR LATER USE    M0019RLY\n         LA     R0,LNKLNKDT       POINT TO \"DETACH\" PROCESSING M0019RLY\n         ST     R0,MSTLKAD5       SET ADDRESS FOR LATER USE    M0019RLY\n.IN001   ANOP  ,                                               M0019RLY\n         ST     R12,MSTLKBAS      SET MODULE BASE ADDRESS\n         SPACE  2\n         AIF    (&S$VTAM).IN002                                M0019RLY\n*\n*        ALLOCATE A BLOCK OF SAVE AREAS FOR LATER LINKAGE.\n*        THESE ARE THEN PLACED ON THE FREE SAVEAREA CHAIN.\n*\n         ICM    R0,15,MSTSVARS         DO WE HAVE SOMETHING ALREADY?\n         BNZ    INSAVE1                YES - WE WILL USE THIS AREA\n         LA     R0,PRESAVE*SAVESIZE    GET SIZE OF REQUIRED AREA\n         LA     R2,ALCZERO+ALABERR     LOAD OPTIONS FOR ALLOCATION\n         CALL   LNKSTGAL               GO TO ALLOCATE STORAGE AREA\n         STM    R0,R1,MSTSVARS         SAVE AREA SIZE & ADDRESS\n         SPACE\nINSAVE1  EQU    *                      LINK TOGETHER FREE SAVEAREAS:\n         L      R13,MSTSVARE           LOAD POINTER TO AREA BEGIN\n         SRDL   R0,32                  SHIFT DOWN SIZE OF STORAGE\n         D      R0,=A(SAVESIZE)        GET NUMBER OF SAVEAREAS HERE\n         LR     R0,R1                  COPY COUNT VALUE FOR LOOP\n         SR     R1,R1                  CLEAR INITIAL FORWARD POINTER\n         SPACE\nINLOOP1  EQU    *                      LOOP TO CHAIN THE AREAS:\n         ST     R1,SAVELINK            SET FORWARD POINTER IN SAVEAREA\n         LR     R1,R13                 COPY ADDRESS OF THIS AREA\n         LA     R13,SAVEALEN(,R13)     POINT UP TO THE NEXT AREA\n         BCT    R0,INLOOP1             - LOOP TO CHAIN AREAS -\n         SPACE\n         ST     R1,COMSVFRE            SET LAST AREA AT FRONT OM0019RLY\n         SPACE  2                                              M0019RLY\n*\n*        LINKAGE INITIALIZATION IS NOW COMPLETE.\n*\n         RETURN RC=0,SAVE=COMSVLNK     - RETURN TO OUR CALLER -M0019RLY\n         AGO    .IN003                                         M0019RLY\n.IN002   ANOP  ,                                               M0019RLY\n*\n*        CREATE AN ENTRY POINT NAME FOR SUBTASK CREATION.\n*\n         L      R1,MSTSUBTA       POINT TO SUBTASK START ADDR  M0019RLY\n         LR     R0,R4             COPY THE EP NAME ADDRESS     M0019RLY\n         IDENTIFY EPLOC=((R0)),   CREATE THE ENTRY POINT       M0019RLY+\n               ENTRY=((R1))       ...                          M0019RLY\n         LTR    R15,R15           RETURN CODE = 0??            M0019RLY\n         BNZ    LNK006            NO ... BRANCH                M0019RLY\n         SPACE  2                                              M0019RLY\n*\n*        LINKAGE INITIALIZATION IS NOW COMPLETE.\n*\n         RETURN RC=0,SAVE=COMSVLNK     - RETURN TO OUR CALLER -M0019RLY\n         SPACE  2                                              M0019RLY\n*\n*        FATAL ERROR: CANNOT CREATE ENTRY POINT\n*\nLNK006   PABEND 006               *** CANNOT CREATE E.P. ***   M0019RLY\n.IN003   ANOP   ,                                              M0019RLY\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           L N K L N K L K                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKLK                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        PERFORM \"LINK\" TYPE LINKAGE                                  *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R8  = ADDRESS OF THE LINE BLOCK, IF PRESENT                  *\n*        R10 = ADDRESS OF THE MASTER CONTROL BLOCK                    *\n*        R14 = CALLER'S RETURN ADDRESS                                *\n*        R15 = ENTRY POINT ADDRESS, =A(LNKLNKLK)                      *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        EXIT VIA BRANCH TO CALLEE ROUTINE (SEE NOTES BELOW).         *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ENTRY ADDRESS FOR LINKAGE & WORK                     *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = UNUSED                                               *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9-R0 = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*        1. THIS SUBROUTINE PROVIDES CALL-AND-RETURN TYPE LINKAGE     *\n*           BETWEEN TWO ROUTINES (TERMED THE CALLER AND THE CALLEE).  *\n*           A SAVE AREA FOR USE BY THE CALLEE IS ALLOCATED AND THE    *\n*           ENTRY POINT ADDRESS IS RELOCATED.                         *\n*                                                                     *\n*        2. THE CALLEE'S ADDRESS IS DETERMINED BY EXECUTING THE       *\n*           INSTRUCTION JUST AFTER THE \"BAL\" TO THIS ROUTINE.         *\n*           THAT IS, THE INSTRUCTION AT 0(R14) ON ENTRY HERE. THE     *\n*           EVENTUAL RETURN IS MADE TO 4(R14).                        *\n*                                                                     *\n*        3. ON ENTRY TO THE CALLED ROUTINE, R13 POINTS TO A SAVE      *\n*           AREA AVAILABLE FOR USE, R14 POINTS TO \"LNKLNKRT\" (WHICH   *\n*           HANDLES ALL RETURN PROCESSING), AND R15 CONTAINS THE      *\n*           ENTRY POINT ADDRESS. ALL OTHER REGISTERS HAVE THEIR       *\n*           CONTENTS UNCHANGED FROM THE CALL TO THIS ROUTINE. IT      *\n*           IS THE CALLEE'S RESPONSIBILITY TO PRESERVE AND LATER      *\n*           RESTORE THE REGISTERS PASSED THERE.                       *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           L N K L N K L K                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        4. ALSO REFER TO THE \"LNKLNKXC\" ROUTINE FOR ADDITIONAL       *\n*           INFORMATION.                                              *\n*                                                                     *\n***********************************************************************\n         SPACE  2\nLNKLNKLK ENTER  BASE=,SAVE=            LINK TO ANOTHER ROUTINE:\n         SPACE  2\n*\n*        CALL A SUBROUTINE: FIRST LOAD THE CALLEE'S ADDRESS,\n*        UPDATE OUR CALLER'S RETURN ADDRESS, AND SAVE THE\n*        CALLER'S REGISTERS (TEMPORARILY). THEN RELOAD OUR\n*        MODULE'S BASE REGISTER AND UPDATE VARIOUS LINKAGE\n*        STATISTICS.\n*\n         EX     0,0(R14)          EXECUTE TO LOCATE CALLEE\n         LA     R14,4(,R14)       AND INCREMENT RETURN ADDRESS\n         AL     R15,MSTRELOC      RELOCATE THE ADDRESS CONSTANT\n         STM    R0,R15,COMSVLNK   SAVE CALLER'S REGISTERS HERE M0019RLY\n         L      R12,MSTLKBAS      LOAD MODULE BASE ADDRESS     M0019RLY\n         LA     R15,0(,R15)       PURIFY CALLEE'S ADDRESS VALUE\n         CL     R15,MSTRELOC      HAD ZERO FOR CALLEE'S ADDRESSM0019RLY\n         BZ     LNK001            YES - CALLEE DOES NOT EXIST  M0019RLY\n         ICM    R2,15,LNKSVR12    CHECK CALLER'S R12           M0339RLY\n         BZ     LNK001            ZERO - LINKAGE ERROR         M0339RLY\n         SPACE  2                                              M0019RLY\n         AIF    (NOT &SDIAG).LKCNT1B                           M0019RLY\n*\n*        SAVE DIAGNOSTIC INFORMATION\n*\nLKCOUNTS CSADD  MSTLKNMC,WK1=R0,WK2=R1  REQUESTS WE PROCESS:   M0019RLY\n.LKCNT1B SPACE  2                                              M0043RLY\n*\n*        IF DESIRED, TRACE THIS LINK REQUEST.\n*\n         AIF    (NOT &SDIAG).LKTRC1A                           M0043RLY\n         TM     MSTRCFLG,MSTRCLNK DO WE WANT LINK TRACING?     M0043RLY\n         BZ     LKTRACE1          NO - SKIP PROCESSING HERE    M0043RLY\n         CALL   LNKDSPTR          ALLOCATE TRACE TABLE ENTRY   M0043RLY\n         BNZ    LKTRACE1          CC>0 ... NO TRACING NOW      M0043RLY\n         USING  TRACE,R1          SET ADDRESSABILITY FOR THIS  M0043RLY\n         MVI    TRFCODE,TRFLCALL  SET \"LINK CALL\" EVENT        M0043RLY\n         LM     R2,R4,COMSVLNK    RELOAD CALLER'S R0-R2        M0019RLY\n         STCM   R2,3,TRLCREG0     SAVE LOW BYTES OF R0         M0043RLY\n         ST     R3,TRLCREG1       SAVE R1 VALUE PASSED         M0043RLY\n         STC    R4,TRLCREG2       SAVE OPTIONS FROM R2         M0043RLY\n         LM     R2,R5,LNKSVR12    RELOAD CALLER'S R12-R15      M0043RLY\n         ST     R2,TRLCMODB       SAVE R12 AS CALLER'S BASE    M0043RLY\n         ST     R4,TRLCFROM       SAVE R14 AS CALLER'S RETURN  M0043RLY\n         ST     R5,TRLCTO         SAVE R15 AS CALLEE'S ADDRESS M0043RLY\n         LTR    R13,R13           HAVE A CURRENT SAVEAREA?     M0043RLY\n         BZ     *+12              NO - DON'T KNOW WHO WE ARE   M0043RLY\n         L      R2,SAVECR15       GET PTR TO CALLER'S ENTRY    M0043RLY\n         ST     R2,TRLCWHO        SAVE TO IDENTIFY THE CALLER  M0043RLY\n         DROP   R1                (TRACE)                      M0043RLY\nLKTRACE1 EQU    *                                              M0043RLY\n.LKTRC1A ANOP  ,                                               M0043RLY\n         SPACE  2\n*\n*        ALLOCATE A SAVE AREA AND LINK IT TO THE PREVIOUS ONE.\n*\n         LR     R3,R13            SAVE CURRENT SAVEAREA ADDRESS\n         BAL    R9,GETSAVE        ALLOCATE A NEW SAVEAREA\n         LTR    R3,R3             DO WE HAVE A PREVIOUS AREA?\n         BZ     *+8               NO - LEAVE FORWARD PTR ALONE\n         ST     R13,SAVEFW(,R3)   SET FORWARD POINTER IN PREVIOUS\n         ST     R3,SAVEBW(,R13)   SET BACKWARD POINTER IN NEW AREA\n         ST     R13,COMSVUSE      SAVE ADDRESS OF LATEST SAVEARM0019RLY\n         SPACE  2\n*\n*        INVOKE THE CALLED ROUTINE.\n*\n         ST     R13,LNKSVR13      PASS SAVEAREA TO CALLEE IN R13\n         MVC    SAVECR14,LNKSVR14 SAVE THE \"TRUE\" RETURN ADDRESS\n         AIF   (&S$CMS OR &S$VMV).NOVMS12                       GP97338\n         L     R1,SAVECR14   GET USER'S RETURN ADDRESS          GP97338\n         SH    R1,=H'4'      BACK UP                            GP97338\n         CLI   2(R1),X'07'   USER EXIT REQUEST CALL?            GP97338\n         BE    LNKUEXIT      YES; HANDLE SLIGHTLY DIFFERENTLY   GP97338\n.NOVMS12 ANOP  ,             IN VM HANDLE AS BEFORE             GP97338\n         LA     R14,LNKLNKRT      POINT TO OUR RETURN ADDRESS\n         ST     R14,LNKSVR14      SET FOR RETURN TO US\n         LM     R0,R15,COMSVLNK   RELOAD CALLER'S REGISTERS    M0019RLY\n         SPACE\n         ST     R15,SAVECR15      SAVE ENTRY POINT ADDRESS     M0043RLY\n         AIF    (&S$VTAM).LKDIAG1                              M0625RLY\n         STCK   MSTCLOCK          SAVE CURRENT TOD CLOCK VALUE M0043RLY\n         MVC    SAVETODC,MSTCLOCK+3    COPY SIGNIFICANT PART   M0043RLY\n         AGO .LKDIAG2                                          M0625RLY\n.LKDIAG1 ANOP\n         STCK   LINTMCLK          SAVE CURRENT TOD CLOCK VALUE M0625RLY\n         MVC    SAVETODC,LINTMCLK+3    COPY SIGNIFICANT PART   M0625RLY\n.LKDIAG2 ANOP  ,                                               M0625RLY\n         SPACE\n         BR     R15               - INVOKE THE CALLED ROUTINE -\n         SPACE 1     ,                                          GP97338\n         AIF   (&S$CMS OR &S$VMV).NOVM12S                       GP97338\n***********************************************************************\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*     THIS SECTION INVOKES AN EXTERNAL ROUTINE (E.G., A USER EXIT)    *\n*     IN THE APPROPRIATE AMODE, AND PRESERVES OURS.                   *\n*                                                                     *\n*     INVOKE WITH   CALL (R5),EXIT   TO INVOKE TARGET IN ITS AMODE    *\n*                                                                     *\n***********************************************************************\nLNKUEXIT STCK  LINTMCLK      GET CLOCK                          GP97338\n         MVC   SAVETODC,LINTMCLK+3  SAVE A BIT                  GP97338\n         LM    R0,R11,COMSVLNK  LOAD PARAMETER REGISTERS        GP97338\n         LM    R13,R15,COMSVLNK+13*4  LOAD AMODE/ENTRY          GP97338\n         SYNCH (R15),RESTORE=YES,AMODE=DEFINED  INVOKE USER EXIT  97338\n         IPM   R5            GET PROGRAM MASK (USELESS)         GP97338\n         ST    R15,COMSVLNK+15*4  SAVE RETURN CODE              GP97338\n         STM   R0,R2,COMSVLNK  SAVE OTHER POSSIBLY ALTERED REGS gp97338\n         B     LNKRT3        JOIN COMMON CODE                   GP97338\n.NOVM12S ANOP  ,     ,                                          GP97338\n         SPACE  2\n*\n*        FATAL ERROR: ATTEMPT TO CALL A NONEXISTANT ROUTINE.\n*\nLNK001   PABEND 001               *** INVALID CALL ATTEMPT ***\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           L N K L N K R T                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKRT                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        PERFORM \"RETURN\" TYPE LINKAGE                                *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R8  = ADDRESS OF THE LINE BLOCK, IF PRESENT                  *\n*        R10 = ADDRESS OF THE MASTER CONTROL BLOCK                    *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        EXIT VIA RETURN TO CALLER ROUTINE (SEE NOTES BELOW).         *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ENTRY ADDRESS FOR LINKAGE & WORK                     *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = UNUSED                                               *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9-R0 = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        1. THIS SUBROUTINE PROVIDES THE \"RETURN\" PROCESSING FOR      *\n*           LINKAGE BETWEEN TWO ROUTINES (TERMED THE CALLER AND       *\n*           SEE THE \"LNKLNKLK\" ROUTINE FOR MORE INFORMATION.          *\n*                                                                     *\n***********************************************************************\n         SPACE  2\nLNKLNKRT ENTER  BASE=,SAVE=            RETURN TO CALLING ROUTINE:\n         SPACE  2\n*\n*        RETURN CONTROL FROM A CALLED ROUTINE: FIRST SETUP\n*        CALLER'S REGISTERS IN A TEMPORARY SAVE AREA AND SAVE\n*        THE CONDITION CODE. THEN RELOAD OUR MODULE'S BASE\n*        REGISTER AND UPDATE VARIOUS LINKAGE STATISTICS.\n*\n         STM    R0,R15,COMSVLNK   PLACE REGISTERS IN TEMP AREA M0019RLY\n         AIF (&S$TSO OR &S$VTAM).LNKR1                         F0812RLY\n         L      R12,MSTLKBAS      LOAD MODULE BASE ADDRESS     ESA12RLY\n         BM     CC1SAVE           GO SET CC=1 FLAG             ESA12RLY\n         BP     CC2SAVE           GO SET CC=2 FLAG             ESA12RLY\n         BO     CC3SAVE           GO SET CC=3 FLAG             ESA12RLY\n         SPACE ,                                               ESA12RLY\nCC0SAVE  EQU    *                 REMEMBER CC=0 WAS SET        ESA12RLY\n         MVI    COMCC,COMCC0      SET CC VALUE                 ESA27RLY\n         B      LNKRT1            AND CONTINUE                 ESA12RLY\n         SPACE ,                                               ESA12RLY\nCC1SAVE  EQU    *                 REMEMBER CC=1 WAS SET        ESA12RLY\n         MVI    COMCC,COMCC1      SET CC VALUE                 ESA27RLY\n         B      LNKRT1            AND CONTINUE                 ESA12RLY\n         SPACE ,                                               ESA12RLY\nCC2SAVE  EQU    *                 REMEMBER CC=2 WAS SET        ESA12RLY\n         MVI    COMCC,COMCC2      SET CC VALUE                 ESA27RLY\n         B      LNKRT1            AND CONTINUE                 ESA12RLY\n         SPACE ,                                               ESA12RLY\nCC3SAVE  EQU    *                 REMEMBER CC=3 WAS SET        ESA12RLY\n         MVI    COMCC,COMCC3      SET CC VALUE                 ESA27RLY\n         SPACE ,                                               ESA12RLY\nLNKRT1   EQU    *                 CHECK FOR 370 OR XA...       ESA12RLY\n         TM     X'5EA'(0),X'80'   TEST FOR XA VIRTUAL MACHINE  ESA12RLY\n         BNO    LNKRT2            NO, GO SAVE 370 CC           ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT10  EQU    *                 CHECK FOR CC=1               ESA12RLY\n         CLI    COMCC,1           WAS IT CC=1?                 ESA27RLY\n         BNE    LNKRT1A           NO, CHECK FOR CC=2           ESA12RLY\n         CLI    *,FF              SET CC=1                     ESA12RLY\n         B      LNKRT1D           AND GO SAVE IT...            ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT1A  EQU    *                 CHECK FOR CC=2               ESA12RLY\n         CLI    COMCC,2           WAS IT CC=2                  ESA27RLY\n         BNE    LNKRT1B           NO, GO CHECK FOR CC=3        ESA12RLY\n         CLI    *,0               SET CC=2                     ESA12RLY\n         B      LNKRT1D           AND GO SAVE IT...            ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT1B  EQU    *                 CHECK FOR CC=3               ESA12RLY\n         CLI    COMCC,3           WAS IT CC=3                  ESA27RLY\n         BNE    LNKRT1C           NO, GO SET IT TO CC=0        ESA12RLY\n         TM     *+1,FF            SET CC=3                     ESA12RLY\n         B      LNKRT1D           AND GO SAVE IT...            ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT1C  EQU    *                 SET CC=0                     ESA12RLY\n         SR     R5,R5             CLEAR AND SET TO 0           ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT1D  EQU    *                 SAVE CC FOR XA MACHINE       ESA12RLY\n         IPM    R5                SAVE XA CC                   ESA12RLY\n         B      LNKRT3            AND CONTINUE                 ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT2   EQU    *                 CHECK FOR CC=1               ESA12RLY\n         CLI    COMCC,1           WAS IT CC=1?                 ESA27RLY\n         BNE    LNKRT2A           NO, CHECK FOR CC=2           ESA12RLY\n         CLI    *,FF              SET CC=1                     ESA12RLY\n         B      LNKRT2D           AND GO SAVE IT...            ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT2A  EQU    *                 CHECK FOR CC=2               ESA12RLY\n         CLI    COMCC,2           WAS IT CC=2                  ESA27RLY\n         BNE    LNKRT2B           NO, GO CHECK FOR CC=3        ESA12RLY\n         CLI    *,0               SET CC=2                     ESA12RLY\n         B      LNKRT2D           AND GO SAVE IT...            ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT2B  EQU    *                 CHECK FOR CC=3               ESA12RLY\n         CLI    COMCC,3           WAS IT CC=3                  ESA27RLY\n         BNE    LNKRT2C           NO, GO SET IT TO CC=0        ESA12RLY\n         TM     *+1,FF            SET CC=3                     ESA12RLY\n         B      LNKRT2D           AND GO SAVE IT...            ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT2C  EQU    *                 SET CC=0                     ESA12RLY\n         SR     R5,R5             CLEAR AND SET TO 0           ESA12RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT2D  EQU    *                 S/370 VIRTUAL MACHINE..      ESA12RLY\n         BALR   R5,0              SAVE THE CONDITION CODE\n         AGO .LNKR1A                                           F0812RLY\n.LNKR1   ANOP  ,                                               F0812RLY\n         IPM    R5                Save the condition code      M0825RLY\n         L      R12,MSTLKBAS      LOAD MODULE BASE ADDRESS     F0812RLY\n.LNKR1A  ANOP  ,                                               F0812RLY\n         SPACE  ,                                              ESA12RLY\nLNKRT3   EQU     *                CHECK FOR PROPER LINKAGE     ESA12RLY\n         LTR    R13,R13           CHECK THE SAVEAREA ADDRESS\n         BZ     LNK002            ZERO - LINKAGE ERROR         M0339RLY\n         ICM    R2,15,LNKSVR12    CHECK CALLER'S R12           M0339RLY\n         BZ     LNK002            ZERO - LINKAGE ERROR\n         SPACE  2                                              M0019RLY\n         AIF    (NOT &SDIAG).RTCNT1B                           M0019RLY\n*\n*        SAVE DIAGNOSTIC INFORMATION\n*\nRTCOUNTS CSADD  MSTLKNMR,WK1=R0,WK2=R1  REQUESTS WE PROCESS:   M0019RLY\n.RTCNT1B SPACE  2                                              M0043RLY\n*\n*        IF DESIRED, TRACE THIS LINK REQUEST.\n*\n         AIF    (NOT &SDIAG).RTTRC1A                           M0043RLY\n         TM     MSTRCFLG,MSTRCLNK DO WE WANT LINK TRACING?     M0043RLY\n         BZ     RTTRACE1          NO - SKIP PROCESSING HERE    M0043RLY\n         CALL   LNKDSPTR          ALLOCATE TRACE TABLE ENTRY   M0043RLY\n         BNZ    RTTRACE1          CC>0 ... NO TRACING NOW      M0043RLY\n         USING  TRACE,R1          SET ADDRESSABILITY FOR THIS  M0043RLY\n         MVI    TRFCODE,TRFLRETN  SET \"LINK RETURN\" EVENT      M0043RLY\n         LM     R2,R3,COMSVLNK    RELOAD RETURNED R0-R1        M0019RLY\n         STCM   R2,3,TRLRREG0     SAVE LOW BYTES OF R0         M0043RLY\n         ST     R3,TRLRREG1       SAVE R1 VALUE RETURNED       M0043RLY\n         L      R2,LNKSVR12       RELOAD CALLER'S R12          M0043RLY\n         ST     R2,TRLRMODB       SAVE AS CALLER'S BASE        M0043RLY\n         L      R2,SAVECR14       GET \"TRUE\" RETURN ADDRESS    M0043RLY\n         ST     R2,TRLRTO         SAVE AS CALLER'S RETURN      M0043RLY\n         L      R2,LNKSVR15       GET RETURNED R15 VALUE       M0043RLY\n         STC    R2,TRLRCODE       SAVE AS RETURN CODE          M0043RLY\n         L      R2,SAVECR15       GET SAVED ENTRY ADDRESS      M0043RLY\n         ST     R2,TRLRFROM       SAVE TO IDENTIFY CALLEE      M0043RLY\n         ICM    R3,15,SAVEBKWD    ADDRESS PREVIOUS SAVEAREA    M0043RLY\n         BZ     *+12              ZERO - CAN'T IDENTIFY CALLER M0043RLY\n         L      R2,SAVECR15-SAVEAREA(,R3) GET PTR TO CALLER    M0043RLY\n         ST     R2,TRLRWHO        SAVE TO IDENTIFY THE CALLER  M0043RLY\n         DROP   R1                (TRACE)                      M0043RLY\nRTTRACE1 EQU    *                                              M0043RLY\n.RTTRC1A ANOP  ,                                               M0043RLY\n         SPACE  2\n*\n*        FREE THE SAVE AREA.\n*\n         L      R0,SAVECR14       RESTORE \"TRUE\" RETURN ADDRESS\n         ST     R0,LNKSVR14       PASS BACK TO CALLER IN R14\n         BAL    R9,FREESAVE       GO TO FREE UP THE SAVE AREA\n         ST     R13,COMSVUSE      SET PREVIOUS AS NEW AREA     M0019RLY\n         ST     R13,LNKSVR13      PASS BACK TO CALLER IN R13\n         SPACE  2\n*\n*        RETURN TO THE CALLING ROUTINE.\n*\n         SPM    R5                RESTORE THE SAVED CONDITION CODE\n         LM     R0,R15,COMSVLNK   RESTORE SAVED REGISTERS      M0019RLY\n         BR     R14               - RETURN TO CALLING ROUTINE -\n         SPACE  2\n*\n*        FATAL ERROR: INVALID RETURN LINKAGE USED.\n*\nLNK002   PABEND 002               *** INVALID RETURN LINKAGE ***\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           L N K L N K S A                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKSA                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        ALLOCATE A NEW SAVE AREA                                     *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R13 = ADDRESS OF THE OLD SAVEAREA                            *\n*        R14 = CALLER'S RETURN ADDRESS                                *\n*        R15 = ENTRY POINT ADDRESS, =A(LNKLNKSA)                      *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        R13 = ADDRESS OF THE NEW SAVEAREA                            *\n*        R15 = 0; THIS IS ALWAYS SUCCESSFUL                           *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ENTRY ADDRESS FOR LINKAGE & WORK                     *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = SAVE AREA ADDRESS                                    *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9-R0 = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        1. THIS SUBROUTINE ALLOCATES A NEW SAVEAREA AND RETURNS      *\n*           IT TO OUR CALLER. THE PREVIOUS SAVE AREA IS LINKED TO     *\n*           THE NEW SAVE AREA FOR LATER RESTORATION.                  *\n*                                                                     *\n***********************************************************************\n         SPACE  2\nLNKLNKSA ENTER  SAVE=COMSVLNK     ALLOCATE A SAVE AREA:        M0019RLY\n         SPACE  2\n*\n*        ALLOCATE A SAVE AREA AND LINK IT TO THE PREVIOUS ONE.\n*\n         LR     R3,R13            SAVE CURRENT SAVEAREA ADDRESS\n         BAL    R9,GETSAVE        ALLOCATE A NEW SAVEAREA\n         LTR    R3,R3             DO WE HAVE A PREVIOUS AREA?\n         BZ     *+8               NO - LEAVE FORWARD PTR ALONE\n         ST     R13,SAVEFW(,R3)   SET FORWARD POINTER IN PREVIOUS\n         ST     R3,SAVEBW(,R13)   SET BACKWARD POINTER IN NEW AREA\n         ST     R13,COMSVUSE      STORE SAVEAREA ADDR IN USE   M0388RLY\n         SPACE  ,                                              M0043RLY\n         AIF    (NOT &SDIAG).SADIAG1                           M0043RLY\n         LTR    R15,R3            DO WE HAVE A PREVIOUS AREA?  M0019RLY\n         BZ     *+8               NO - NO KNOWN ENTRY POINT    M0019RLY\n         L      R15,SAVECR15-SAVEAREA(,R3)  GET ENTRY ADDRESS  M0019RLY\n         ST     R15,SAVECR15      SAVE LAST KNOWN ENTRY ADDR.  M0019RLY\n.SADIAG1 ANOP   ,                                              M0043RLY\n         SPACE  2\n*\n*        RETURN THE NEW SAVEAREA TO OUR CALLER.\n*\n         ST     R13,LNKSVR13           PASS BACK THE AREA ADDRESS\n         RETURN RC=0,SAVE=COMSVLNK     - RETURN TO OUR CALLER -M0019RLY\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           L N K L N K S R                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKSR                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        RETURN THE CURRENT SAVE AREA                                 *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R13 = ADDRESS OF THE CURRENT SAVEAREA                        *\n*        R14 = CALLER'S RETURN ADDRESS                                *\n*        R15 = ENTRY POINT ADDRESS, =A(LNKLNKSR)                      *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        R13 = ADDRESS OF THE OLD SAVEAREA                            *\n*        R15 = 0; THIS IS ALWAYS SUCCESSFUL                           *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ENTRY ADDRESS FOR LINKAGE & WORK                     *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = SAVE AREA ADDRESS                                    *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9-R0 = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        1. THIS SUBROUTINE RETURNS THE CURRENT SAVEAREA TO THE       *\n*           POOL OF AVAILABLE AREAS. THE PREVIOUS SAVE AREA IS        *\n*           RETURNED TO OUR CALLER.                                   *\n*                                                                     *\n***********************************************************************\n         SPACE  2\nLNKLNKSR ENTER  SAVE=COMSVLNK     RETURN A SAVE AREA:          M0019RLY\n         SPACE  2\n*\n*        UNCHAIN THE PREVIOUS SAVE AREA AND RETURN THE CURRENT ONE.\n*\n         BAL    R9,FREESAVE       FREE THE CURRENT SAVEAREA\n         ST     R13,LNKSVR13      PASS BACK THE PREVIOUS AREA\n         ST     R13,COMSVUSE      STORE SAVEAREA ADDR IN USE   M0388RLY\n         SPACE  2\n*\n*        RETURN THE OLD SAVEAREA TO OUR CALLER.\n*\n         RETURN RC=0,SAVE=COMSVLNK     - RETURN TO OUR CALLER -M0019RLY\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           L N K L N K T R                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKTR                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        TERMINATE THE LINKAGE MANAGER                                *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R14 = CALLER'S RETURN ADDRESS                                *\n*        R15 = ENTRY POINT ADDRESS, =A(LNKLNKTR)                      *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        R15 = 0; THIS IS ALWAYS SUCCESSFUL (CC=0).                   *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ENTRY ADDRESS FOR LINKAGE & WORK                     *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = UNUSED                                               *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9-R8 = UNUSED                                               *\n*        R7-R0 = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        NONE.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE  2\nLNKLNKTR ENTER  SAVE=COMSVLNK     TERMINATE LINKAGE MANAGEMENT:M0019RLY\n         SPACE  2                                              M0019RLY\n         AIF (&S$VTAM).TRFREE1                                 M0019RLY\n*\n*        FREE THE BLOCK OF PREALLOCATED SAVE AREAS.\n*\n         LM     R0,R1,MSTSVARS    LOAD SIZE & ADDRESS OF AREA\n         CALL   LNKSTGFR          FREE UP THE ALLOCATED AREA\n.TRFREE1 ANOP   ,                                              M0019RLY\n         SPACE  2\n*\n*        LINKAGE TERMINATION IS NOW COMPLETE.\n*\n         RETURN RC=0,SAVE=COMSVLNK     - RETURN TO OUR CALLER -M0019RLY\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           L N K L N K X C                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ENTRY POINT NAME -                                                 *\n*                                                                     *\n*        LNKLNKXC                                                     *\n*                                                                     *\n*  FUNCTION -                                                         *\n*                                                                     *\n*        PERFORM \"XCTL\" TYPE LINKAGE                                  *\n*                                                                     *\n*  ENTRY CONDITIONS -                                                 *\n*                                                                     *\n*        R14 = CALLER'S RETURN ADDRESS (SEE NOTES BELOW).             *\n*        R15 = ENTRY POINT ADDRESS, =A(LNKLNKXC)                      *\n*                                                                     *\n*  EXIT CONDITIONS -                                                  *\n*                                                                     *\n*        EXIT VIA BRANCH TO CALLEE ROUTINE (SEE NOTES BELOW).         *\n*                                                                     *\n*  REGISTER USAGE -                                                   *\n*                                                                     *\n*        R15   = ENTRY ADDRESS FOR LINKAGE & WORK                     *\n*        R14   = RETURN ADDRESS FOR LINKAGE                           *\n*        R13   = UNUSED                                               *\n*        R12   = MODULE BASE ADDRESS                                  *\n*        R11   = UNUSED                                               *\n*        R10   = ADDRESS OF THE MASTER CONTROL BLOCK                  *\n*        R9-R0 = WORK                                                 *\n*                                                                     *\n*  NOTES -                                                            *\n*                                                                     *\n*        1. THIS SUBROUTINE PROVIDES BRANCH-WITHOUT-RETURN LINKAGE    *\n*           BETWEEN TWO ROUTINES (TERMED THE CALLER AND THE CALLEE).  *\n*           THE CALLEE IS PASSED REGISTER VALUES OBTAINED FROM THE    *\n*           CALLER'S SAVE AREA (THE CALLER'S CALLER, THAT IS).        *\n*                                                                     *\n*        2. THE CALLEE'S ADDRESS IS DETERMINED BY EXECUTING THE       *\n*           INSTRUCTION JUST AFTER THE \"BAL\" TO THIS ROUTINE.         *\n*           THAT IS, THE INSTRUCTION AT 0(R14) ON ENTRY HERE. NO      *\n*           RETURN WILL BE MADE; THE \"RETURN ADDRESS\" IN R14 IS       *\n*           USED SOLELY TO LOCATE THE CALLEE.                         *\n*                                                                     *\n*        3. ALSO REFER TO THE \"LNKLNKLK\" ROUTINE FOR ADDITIONAL       *\n*           INFORMATION.                                              *\n*                                                                     *\n***********************************************************************\n         SPACE  2\nLNKLNKXC ENTER  BASE=,SAVE=       TRANSFER CONTROL ONWARD:\n         SPACE  2\n*\n*        CALL A PEER-ROUTINE: FIRST LOAD THE CALLEE'S ADDRESS,\n*        UPDATE OUR CALLER'S RETURN ADDRESS, AND SAVE THE\n*        CALLER'S REGISTERS (TEMPORARILY). THEN RELOAD OUR\n*        MODULE'S BASE REGISTER AND UPDATE VARIOUS LINKAGE\n*        STATISTICS.\n*\n         EX     0,0(R14)          EXECUTE TO LOCATE CALLEE\n         LA     R14,4(,R14)       AND INCREMENT RETURN ADDRESS\n         LA     R15,0(,R15)       PURIFY CALLEE'S ADDRESS VALUE\n         A      R15,MSTRELOC      RELOCATE THE ADDRESS CONSTANT\n         L      R12,MSTLKBAS      LOAD MODULE BASE ADDRESS\n         CL     R15,MSTRELOC      HAD ZERO FOR CALLEE'S ADDRESS?\n         BZ     LNK003            YES - CALLEE DOES NOT EXIST\n         SPACE  2                                              M0019RLY\n         AIF    (NOT &SDIAG).XFCNT1B                           M0019RLY\n*\n*        SAVE DIAGNOSTIC INFORMATION\n*\nXFCOUNTS CSADD  MSTLKNMX,WK1=R0,WK2=R1  REQUESTS WE PROCESS:   M0019RLY\n.XFCNT1B SPACE  2\n*\n*        INVOKE THE CALLED ROUTINE.\n*\n         L      R14,SAVER14       LOAD REGISTERS FROM SAVE AREA\n         LM     R0,R12,SAVER0     ...\n         BR     R15               - INVOKE THE CALLED ROUTINE -\n         SPACE  2\n*\n*        FATAL ERROR: ATTEMPT TO XCTL A NONEXISTANT ROUTINE.\n*\nLNK003   PABEND 003               *** INVALID XCTL ATTEMPT ***\n         EJECT\n***********************************************************************\n*                                                                     *\n*                 LOCAL SUBROUTINE TO FREE A SAVE AREA                *\n*                                                                     *\n***********************************************************************\n*\n*  SUBROUTINE NAME -\n*\n*        FREESAVE\n*\n*  FUNCTION -\n*\n*        FREE A SAVE AREA\n*\n*  ENTRY CONDITIONS -\n*\n*        R9  = CALLER'S RETURN ADDRESS\n*        R13 = ADDRESS OF THE CURRENT SAVE AREA\n*\n*  EXIT CONDITIONS -\n*\n*        R13 = ADDRESS OF THE PREVIOUS SAVE AREA\n*\n*  REGISTERS DESTROYED -\n*\n*        R0  R1  R2\n*\n*  NOTES -\n*\n*        1. THIS SUBROUTINE WILL FREE A SAVE AREA PREVIOUSLY\n*           ALLOCATED BY THE \"GETSAVE\" ROUTINE. REFER TO THAT\n*           ROUTINE FOR ADDITIONAL INFORMATION.\n*\nFREESAVE DS     0H                RETURN A SAVE AREA:\n*\n*        FREE THE SAVE AREA. PREALLOCATED AREAS ARE RETURN TO\n*        THE AVAILABLE SAVEAREA CHAIN. OTHER AREAS ARE RETURNED\n*        TO FREE STORAGE.\n*\n         L      R2,SAVEBKWD       LOAD PREVIOUS AREA ADDRESS\n         TM     SAVEFLAG,SAVEFREE AREA ALLOCATED FROM FREE STORAGE?\n         BNZ    FRESAVE1          YES - GO TO FREE IT UP\n         MVC    SAVELINK,COMSVFRE SET AT FRONT OF \"FREE\" CHAIN M0019RLY\n         ST     R13,COMSVFRE      ...                          M0019RLY\n         B      FRESAVE2          - THAT'S ALL FOR NOW -\n         SPACE\nFRESAVE1 EQU    *                 RETURN SAVEAREA TO FREE STORAGE:\n         LA     R0,SAVESIZE       LOAD SIZE OF THE SAVEAREA\n         LR     R1,R13            COPY AREA ADDRESS\n         CALL   LNKSTGFR          GO TO FREE ALLOCATED STORAGE\n         SPACE\nFRESAVE2 EQU    *                 THE SAVEAREA HAS BEEN FREED:\n         LR     R13,R2            RETURN THE PREVIOUS SAVEAREA\n         BR     R9                - RETURN TO OUR CALLER -\n         EJECT\n***********************************************************************\n*                                                                     *\n*              LOCAL SUBROUTINE TO ALLOCATE A SAVE AREA               *\n*                                                                     *\n***********************************************************************\n*\n*  SUBROUTINE NAME -\n*\n*        GETSAVE\n*\n*  FUNCTION -\n*\n*        ALLOCATE A SAVE AREA\n*\n*  ENTRY CONDITIONS -\n*\n*        R9 = CALLER'S RETURN ADDRESS\n*\n*  EXIT CONDITIONS -\n*\n*        R13 = ADDRESS OF THE NEW SAVE AREA\n*\n*  REGISTERS DESTROYED -\n*\n*        R0  R1  R2\n*\n*  NOTES -\n*\n*        1. THIS SUBROUTINE WILL ALLOCATE A SAVE AREA FOR USE\n*           BY OUR CALLER. WE PREFER A PREALLOCATED SAVE AREA\n*           BUT WILL ALLOCATE ONE FROM FREE STORAGE IF NEEDED.\n*\nGETSAVE  DS     0H                ALLOCATE A SAVE AREA:\n         ICM    R13,15,COMSVFRE   LOAD FIRST FREE AREA ADDRESS M0019RLY\n         BZ     GETSAVE1          ZERO - NEED TO ALLOCATE ONE\n         L      R1,SAVELINK       GET NEXT FREE AREA ADDRESS\n         ST     R1,COMSVFRE       THIS IS NOW THE FIRST FREE   M0019RLY\n         SR     R2,R2             CLEAR VALUE FOR \"SAVEFLAG\"\n         B      GETSAVE2          - GO USE FREE AREA -\n         SPACE\nGETSAVE1 EQU    *                 ALLOCATE A NEW SAVE AREA:\n         LA     R0,SAVESIZE       LOAD SIZE NEEDED FOR THIS\n         LA     R2,ALCZERO+ALABERR AND OPTIONS FOR ALLOCATION\n         CALL   LNKSTGAL          GO ALLOCATE STORAGE AREA\n         LR     R13,R1            COPY THE AREA ADDRESS\n         LA     R2,SAVEFREE       GET VALUE FOR \"SAVEFLAG\"\n         SPACE\nGETSAVE2 EQU    *                 WE NOW HAVE A SAVE AREA:\n         STC    R2,SAVEFLAG       SET SAVEAREA FLAGS\n         BR     R9                - RETURN TO OUR CALLER -\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         COMMON MODULE DATA                          *\n*                                                                     *\n***********************************************************************\n         SPACE  2                                              M0019RLY\n         AIF (&S$CMS OR &S$TSO).DATA1                          M0019RLY\n*\n*        PARM LIST FOR TASK ATTACHMENT.\n*\nATTCHLST ATTACH EPLOC=0,ETXR=0,SF=L                            M0019RLY\nATTCHEND EQU    *                                              M0019RLY\n.DATA1   ANOP   ,                                              M0019RLY\n         SPACE  2\n         LTORG  ,                 GENERATE LITERAL POOL:\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         COMMON DEFINITIONS                          *\n*                                                                     *\n***********************************************************************\n         SPACE  2\n         COPY   EQUATES           COMMON EQUATE DEFINITIONS:\n         COPY   LINE              LINE CONTROL BLOCK DEFINITION:\n         COPY   MASTER            MASTER CONTROL BLOCK DEFINITION:\n         COPY   SAVEAREA          SAVE AREA DEFINITION:\n         COPY   TRACE             TRACE TABLE ENTRY DEFINITION:M0043RLY\n         SPACE  2\n*\n*        EQUATES SPECIFIC TO THE LNKLNK MODULE\n*\nPRESAVE  EQU    16                NUMBER OF PREALLOCATED SAVE AREAS\n         SPACE  2\n*\n*        REDEFINITIONS FOR THE LNKLNK MODULE\n*\nLNKSVR2  EQU    COMSVLNK+2*4      SAVE FOR REGISTER 2          M0019RLY\nLNKSVR12 EQU    COMSVLNK+12*4     SAVE FOR REGISTER 12         M0019RLY\nLNKSVR13 EQU    COMSVLNK+13*4     SAVE FOR REGISTER 13         M0019RLY\nLNKSVR14 EQU    COMSVLNK+14*4     SAVE FOR REGISTER 14         M0019RLY\nLNKSVR15 EQU    COMSVLNK+15*4     SAVE FOR REGISTER 15         M0019RLY\n         SPACE  3\n*                                                              ESA27RLY\n*        THE FOLLOWING FIELDS LIE IN THE MASTER BLOCK FOR THE  ESA27RLY\n*        'NATIVE' PRODUCTS AND IN THE LINE BLOCK FOR THE VTAM  ESA27RLY\n*        VERSIONS.                                             ESA27RLY\n*                                                              ESA27RLY\n         AIF    (&S$VTAM).REDEF1                               ESA27RLY\nCOMCC    EQU    MSTCC          REDEFINE CC FIELD               ESA27RLY\nCOMCC0   EQU    MSTCC0         REDEFINE CC=0 VALUE             ESA27RLY\nCOMCC1   EQU    MSTCC1         REDEFINE CC=1 VALUE             ESA27RLY\nCOMCC2   EQU    MSTCC2         REDEFINE CC=2 VALUE             ESA27RLY\nCOMCC3   EQU    MSTCC3         REDEFINE CC=3 VALUE             ESA27RLY\n         AGO    .REDEF2                                        ESA27RLY\n.REDEF1  ANOP   ,                                              ESA27RLY\nCOMCC    EQU    LINCC          REDEFINE CC FIELD               ESA27RLY\nCOMCC0   EQU    LINCC0         REDEFINE CC=0 VALUE             ESA27RLY\nCOMCC1   EQU    LINCC1         REDEFINE CC=1 VALUE             ESA27RLY\nCOMCC2   EQU    LINCC2         REDEFINE CC=2 VALUE             ESA27RLY\nCOMCC3   EQU    LINCC3         REDEFINE CC=3 VALUE             ESA27RLY\n.REDEF2  ANOP   ,                                              ESA27RLY\n         SPACE  ,                                              ESA27RLY\n         END    ,                 - THAT'S ALL, FOLKS -\n./ ADD NAME=LNKS99   0100-00148-00148-1050-01599-01599-00000-GERHARD\nLNKS99   TITLE  'RELAY DYNAMIC ALLOCATION ROUTINES'\n**********************************************************************\n*\n*        COPYRIGHT INFORMATION:\n*\n*              (C) COPYRIGHT 1992 BY RELAY COMMUNICATIONS, INC.\n*        COPYRIGHT (C) RELAY TECHNOLOGY, INC.  1995                   *\n*                  ALL RIGHTS RESERVED\n*\n*        MODULE NAME:\n*\n*              LNKS99\n*\n*        ATTRIBUTES:\n*\n*              SELF RELOCATING, REENTRANT.\n*\n*        FUNCTION:\n*\n*              DYNAMIC ALLOCATION ROUTINES.\n*\n*        ENTRY POINTS:\n*\n*              LNKS99DY - DYNAMIC ALLOCATION, UNALLOCATION,\n*                                 CONCATENATION AND DECONCATENATION\n*\n**********************************************************************\n         SPACE 1                                                GP98108\n         MACRO ,                                                GP98108\n&NM      TUTX  &N,&VAL,&TEXT,&NP=1                              GP98108\n         LCLC  &L                                               GP98108\n&L       SETC  'L'''                                            GP98108\n         AIF   ('&NM' EQ '').NOLAB                              GP98108\n&NM      DS    0X                                               GP98108\n.NOLAB   ANOP  ,                                                GP98108\nTUALLO&N DC    YL2(&VAL,&NP)                                    GP98108\n         AIF   ('&TEXT' EQ '').NOTEXT                           GP98108\n         DC    YL2(&L.TUTX&N)                                   GP98108\nTUTX&N   DC    &TEXT                                            GP98108\n.NOTEXT  ANOP  ,                                                GP98108\nTUALNG&N EQU   *-TUALLO&N                                       GP98108\n         MEND  ,                                                GP98108\n         EJECT\n         COPY GLOBALS\n         EJECT\n**********************************************************************\n*\n*        MODULE DEFINITION\n*\n**********************************************************************\n         SPACE 4\nLNKS99   BEGIN BASE=(R12,R11),RMODE=24    BEGIN OF MODULE:      GP97253\n         USING SAVEAREA,R13      SAVE AREA ADDRESSABILITY\n         USING S99RBP,R3         REQUEST BLOCK PTR ADDRESSABILITY\n         USING S99RB,R4          REQUEST BLOCK ADDRESSABILITY\n         USING S99TUPL,R5        TEXT UNIT PTR(S) ADDRESSABILITY\n         USING S99TUNIT,R6       TEXT UNIT ADDRESSABILITY\n         USING SVC99,R7          PARAMETER LIST ADDRESSABILITY\n         USING LINE,R8           LINE CONTROL BLOCK\n         USING MASTER,R10        MASTER CONTROL BLOCK\n         EJECT\n**********************************************************************\n*\n*                   L N K S 9 9 D Y\n*\n*---------------------------------------------------------------------\n*\n*        ENTRY POINT NAME:\n*\n*              LNKS99DY\n*\n*        FUNCTION:\n*\n*              DYNAMIC ALLOCATION ROUTINE   (SVC 99)\n*\n*\n*        REGISTER USAGE:\n*\n*               ENTRY:\n*                          R1   -  PARAMETER LIST ADDRESS\n*                          R8   -  LINE CONTROL BLOCK\n*                          R10  -  MASTER CONTROL BLOCK\n*                          R13  -  SAVE AREA ADDRESS\n*                          R14  -  RETURN ADDRESS\n*                          R15  -  ENTRY POINT ADDRESS\n*\n*               INTERNAL:\n*                          R3   -  REQUEST BLOCK PTR ADDRESS\n*                          R4   -  REQUEST BLOCK ADDRESS\n*                          R5   -  TEXT UNIT PTR ADDRESS\n*                          R6   -  TEXT UNIT ADDRESS\n*                          R7   -  PARAMETER LIST ADDRESS\n*                          R9   -  SUBROUTINE RETURN ADDRESS\n*                          R12  -  BASE ADDRESS\n*                          R13  -  NEW SAVE AREA ADDRESS\n*                          R14  -  WORK REGISTER\n*                          R15  -  WORK REGISTER\n*\n*               EXIT:\n*                          R15  -  RETURN CODE\n*                                  0  =  ALL OK (CC=0),\n*                                  8  =  FILE ALLOC ERROR (CC=8)\n*\n**********************************************************************\n         SPACE 2\nLNKS99DY ENTER                   BEGIN THE PROGRAM:\n         SPACE 2\n         LR    R7,R1                   SET PARAMETER LIST BASE ADDRESS\n         L     R3,R99WADDR             POINT TO A WORK AREA\n         SPACE 2\n*******************************************************************\n*             (4   - BYTE REQUEST BLOCK POINTER AREA)\n*             (20  - BYTE REQUEST BLOCK AREA)\n*             (120 - BYTE TEXT UNIT POINTER AREA - 30 PTRS)\n*             (240 - BYTE TEXT UNIT AREA)\n*******************************************************************\n         LA    R4,S99RBPTR+4           LOAD REQUEST BLOCK ADDRESS\n         ST    R4,S99RBPTR             SAVE REQUEST BLOCK ADDRESS\n         OI    S99RBPTR,S99RBPND       TAINT HIGH ORDER BIT\n         XC    S99RB(S99RBLEN),S99RB   INITIALIZE REQUEST BLOCK AREA\n         MVI   S99RBLN,S99RBLEN        SET PARM AREA LENGTH\n         LA    R5,S99RB+S99RBLEN       POINT TO TEXT UNIT PTR LIST\n         ST    R5,S99TXTPP             STORE TU PTR LIST ADDR IN RB\n         LA    R6,S99RBPTR+144         LOAD ADDRESS FIRST TEXT UNIT\n         ST    R6,S99TUPTR             SAVE ADDRESS IN TU PTR LIST\n         TM    R99PRCSS,R99ALLOC       ALLOCATION REQUESTED\n         BC    8,UNALLRTN              NO, GO CHECK FOR UNALLOCATION\n         SPACE 2\n*******************************************************************\n*             DATASET ALLOCATION SECTION BEGINS HERE\n*******************************************************************\n         MVI   S99VERB,S99VRBAL        SET FOR DYNAMIC ALLOCATION\n         TM    R99AFLG1,R99MOUNT       DO WE HAVE MOUNT AUTHORITY?\n         BNZ   *+8                     YES - BRANCH\n         OI    S99FLAG1,S99NOMNT       SUPPRESS MOUNTS\n         SPACE 2\n*******************************************************************\n*      DDNAME TEXT UNIT BUILD AREA\n*******************************************************************\n         MVC   0(TUALNG01,R6),TUALLO01 SET DDNAME TU FIXED PORTION\n         LA    R6,TUALNG01(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    R15,R99DDNAM            LOAD ADDRESS OF DDNAME\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE\n         TM    R99AFLG1,R99INRDR       INTERNAL RDR REQUESTED? M0770RLY\n         BC    1,*+12                  YES, BRANCH AROUND THIS M0770RLY\n         TM    R99AFLG1,R99SYSOT       SYSOUT DATASET?\n         BC    8,BUILDDSN              NO, GO BUILD DSN TU\n         SPACE 2\n*******************************************************************\n*      SYSOUT TEXT UNIT BUILD AREA - SETS SYSOUT CLASS HERE\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG18,R6),TUALLO18 REQUEST SYSOUT DATASET\n         TM    R99CLASS,255-C' ' CLASS SUPPLIED?                GP98108\n         BZ    *+10              NO, USE OUR DEFAULT            GP98108\n         MVC   6(1,R6),R99CLASS        USE SUPPLIED CLASS\n         LA    R6,TUALNG18(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      SYSOUT TEXT UNIT BUILD AREA - SETS SYSOUT # OF COPIES HERE\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG1D,R6),TUALLO1D REQUEST SYSOUT DATASET\n         CLI   R99COPYS,CLEARBYT       # COPYS SUPPLIED?\n         BC    9,*+10                  NO, USE OUR DEFAULT\n         MVC   6(1,R6),R99COPYS        USE SUPPLIED # COPYS\n         LA    R6,TUALNG1D(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      REQUEST DATASET'S DSORG BE RETURNED HERE\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG57,R6),TUALLO57 SET TO ASK FOR DSORG\n         LA    R15,6(R6)               POINT TO PARM FIELD\n         ST    R15,R99DSGAD            SAVE ADDRESS FOR LATER\n         LA    R6,TUALNG57(R6)         POINT TO NEXT TU FIELD\n         SPACE 2                                               M0764RLY\n*******************************************************************\n*      SYSOUT PROGRAM ID TEXT UNIT BUILD AREA\n*******************************************************************\nCHK4PGMS EQU   *                                               M0764RLY\n         TM    R99AFLG1,R99INRDR       INTERNAL RDR REQUESTED? M0764RLY\n         BC    8,*+10                  NO, BRANCH AROUND THIS  M0764RLY\n         MVC   R99PGMID,=C'INTRDR  '   SET FOR INTERNAL RDR    M0764RLY\n         TM    R99PGMID,255-C' ' SYSOUT PGM SPECIFIED?          GP98108\n         BZ    CHK4FRMS          NO, GO CHECK FOR FORMS         GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PM0764RLY\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR M0764RLY\n         MVC   0(TUALNG19,R6),TUALLO19 SET UNIT TU FIXED PORTIOM0764RLY\n         LA    R6,TUALNG19(R6)         POINT TO LENGTH TU LNG FM0764RLY\n         LA    15,R99PGMID             LOAD ADDRESS OF PGM ID  M0764RLY\n         LA    R14,8                   LOAD FULL FIELD LENGTH  M0764RLY\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH    M0764RLY\n         SPACE 2                                               M0764RLY\n*******************************************************************\n*      SYSOUT FORMS ID TEXT UNIT BUILD AREA\n*******************************************************************\nCHK4FRMS EQU   *                                               M0764RLY\n         TM    R99FORM,255-C' '  SYSOUT FORMS ID SPECIFIED      GP98108\n         BZ    CHK4NODE          NO, GO CHECK FOR NODE ID       GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PM0764RLY\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR M0764RLY\n         MVC   0(TUALNG1A,R6),TUALLO1A SET UNIT TU FIXED PORTIOM0764RLY\n         LA    R6,TUALNG1A(R6)         POINT TO LENGTH TU LNG FM0764RLY\n         LA    15,R99FORM              LOAD ADDRESS OF FORMS IDM0764RLY\n         LA    R14,8                   LOAD FULL FIELD LENGTH  M0764RLY\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH    M0764RLY\n         SPACE 2                                               M0764RLY\n*******************************************************************\n*      SYSOUT REMOTE WS ROUTE (NODE ID) TEXT UNIT BUILD AREA\n*******************************************************************\nCHK4NODE EQU   *                                               M0764RLY\n         TM    R99NODE,255-C' '  SYSOUT NODE ID SPECIFIED       GP98108\n         BZ    CHK4SSNM          NO, GO CHECK FOR SUBSYST       GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PM0764RLY\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR M0764RLY\n         MVC   0(TUALNG58,R6),TUALLO58 SET UNIT TU FIXED PORTIOM0764RLY\n         LA    R6,TUALNG58(R6)         POINT TO LENGTH TU LNG FM0764RLY\n         LA    15,R99NODE              LOAD ADDRESS OF NODE ID M0764RLY\n         LA    R14,8                   LOAD FULL FIELD LENGTH  M0764RLY\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH    M0764RLY\n         SPACE 2                                               M0764RLY\n*******************************************************************\n*      SUBSYSTEM ID TEXT UNIT BUILD AREA\n*******************************************************************\nCHK4SSNM EQU   *                                               M0764RLY\n         TM    R99SSNM,255-C' '  SUBSYSTEM ID SPECIFIED?        GP98108\n         BZ    CHK4USER          NO, GO CHECK FOR USER ID       GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PM0764RLY\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR M0764RLY\n         MVC   0(TUALNG5F,R6),TUALLO5F SET UNIT TU FIXED PORTIOM0764RLY\n         LA    R6,TUALNG5F(R6)         POINT TO LENGTH TU LNG FM0764RLY\n         LA    15,R99SSNM              LOAD ADDRESS OF SUBSYSTEM0764RLY\n         LA    R14,4                   LOAD FULL FIELD LENGTH  M0764RLY\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH    M0764RLY\n         SPACE 2                                               M0764RLY\n*******************************************************************\n*      SYSOUT USER ID TEXT UNIT BUILD AREA\n*******************************************************************\nCHK4USER EQU   *                                               M0764RLY\n         TM    R99NODE,255-C' '  SYSOUT NODE ID SPECIFIED       GP98108\n         BZ    CHK4HOLD          NO, GO CHECK FOR HOLD          GP98108\n         TM    R99USER,255-C' '  USER ID SPECIFIED?             GP98108\n         BZ    CHK4HOLD          NO, GO CHECK FOR HOLD          GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PM0764RLY\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR M0764RLY\n         MVC   0(TUALNG63,R6),TUALLO63 SET UNIT TU FIXED PORTIOM0764RLY\n         LA    R6,TUALNG63(R6)         POINT TO LENGTH TU LNG FM0764RLY\n         LA    15,R99USER              LOAD ADDRESS OF USER ID M0764RLY\n         LA    R14,8                   LOAD FULL FIELD LENGTH  M0764RLY\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH    M0764RLY\n         SPACE 2                                               M0764RLY\n*******************************************************************\n*      HOLD QUEUE ROUTING TEXT UNIT BUILD AREA\n*******************************************************************\nCHK4HOLD EQU   *                                               M0764RLY\n         TM    R99AFLG1,R99HOLD        ROUTE TO HOLD QUEUE?    M0764RLY\n         BC    8,CHKBLKSZ              NO, GO CHECK BLKSIZE    M0770RLY\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PM0764RLY\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR M0764RLY\n         MVC   0(TUALNG59,R6),TUALLO59 SET FOR HOLD QUEUE ROUTIM0764RLY\n         LA    R6,TUALNG59(R6)         POINT TO NEXT TU FIELD  M0764RLY\n         BC    15,CHKBLKSZ             GO CHECK BLKSIZE        M0770RLY\n         SPACE 2                                               M0770RLY\n*******************************************************************\n*      END JES2 SPOOL INTERFACE SECTION\n*******************************************************************\nBUILDDSN DS   0H\n         SPACE 2                                                GP97226\n***********************************************************************\n*                                                                     *\n*   THIS CODE INSERTION FIXES A PROBLEM WITH GDG HANDLING.            *\n*                                                                     *\n*   BY IBM DESIGN, THE CURRENT GDG LEVEL (0) REMAINS LINKED TO THE    *\n*   TRUE NAME (GNNNNVNN) AT THE FIRST REQUEST FOR THE DURATION OF     *\n*   THE JOB OR SESSION.  WITH THE OLD CODE, A (0) DOWNLOAD WOULD      *\n*   ALWAYS GET THE SAME DATASET EVEN IF NEW GENERATIONS HAD BEEN      *\n*   ADDED DURING THE SESSION.                                         *\n*                                                                     *\n*   THE FIX USES THE CATALOG LOCATE SERVICE TO GET THE TRUE NAME FOR  *\n*   THE REQUESTED GENERATION AND USES THAT FOR THE ALLOCATION.        *\n*                                                                     *\n*   IBM HAS ANNOUNCED THAT SVC 26 IS NO LONGER SUPPORTED, AND MAY BE  *\n*   DISCONTINUED IN A FUTURE RELEASE (USED BY LOCATE MACRO)           *\n*                                                                     *\n***********************************************************************\n         TM    R99GDGN,255-BLNK  GENERATION NUMBER SUPPLIED?    GP97226\n         BZ    DONEGDG       NO; SKIP ALL THIS                  GP97226\n OI S99FLG11,S99GDGNT  USE CURRENT BASE FOR GENERATION LOOK-UP  GP00141\n         LA    R9,CAMEND-CAMSECT  GET SIZE OF WORK AREA         GP97226\n         GETMAIN R,LV=(R9),LOC=BELOW   GET WORK SPACE           GP97253\n         LR    R2,R1         PRESERVE THE STORAGE ADDRESS       GP97226\n         USING CAMSECT,R2    DECLARE THE WORK AREA              GP97226\n         LM    R14,R1,CAMPAT  GET PATTERN CAMLST                GP97226\n         LA    R1,CAMWORK    POINT TO WORK AREA                 GP97226\n         LA    R15,CAMDSN    POINT TO JCL FORMAT DSN            GP97226\n         STM   R14,R1,CAMLST  BUILD COMPLETE REQUEST LIST       GP97226\n         MVC   CAMDSN,R99DSN  MOVE NAME TO BE MOGRIFIED         GP97226\n         LA    R14,L'CAMDSN  SET LENGTH OF DSN                  GP97226\n         AR    R15,R14       POINT TO LAST BYTE +               GP97226\nLOOPGDG  BCTR  R15,0         BACK UP                            GP97226\n         CLI   0(R15),BLNK   TRAILING BLANK?                    GP97226\n         BNE   LOPGDG        YES; FOUND INSERTION POINT         GP97226\n         BCT   R14,LOOPGDG   TRY AGAIN                          GP97226\n         B     MAINGDG       ALL BLANK ?                        GP97226\nLOPGDG   CH    R14,=H'35'    ENOUGH ROOM FOR GENERATION NUMBER? GP97226\n         BH    MAINGDG       NO; LET IT BE                      GP97226\n         MVI   1(R15),C'('   START OF NUMBER                    GP97226\n         CLI   R99GDGN,C'0'  IS THERE A DIGIT?                  GP97226\n         BL    NUMGDG        NO; PROBABLY PLUS?                 GP97226\n         MVI   2(R15),C'-'   RESTORE RELATIVITY                 GP97226\n         LA    R15,1(,R15)   SKIP OVER IT                       GP97226\nNUMGDG   MVC   2(L'R99GDGN,R15),R99GDGN  MOVE NUMBER            GP97226\n         LA    R15,CAMDSN+L'CAMDSN  POINT PAST DSN              GP97226\n         LA    R14,L'CAMDSN  SET LENGTH OF DSN                  GP97226\nLOOPGEN  BCTR  R15,0         BACK UP                            GP97226\n         CLI   0(R15),BLNK   TRAILING BLANK?                    GP97226\n         BNE   LOPGEN        YES; FOUND INSERTION POINT         GP97226\n         BCT   R14,LOOPGEN   TRY AGAIN                          GP97226\n         B     MAINGDG       ALL BLANK ?                        GP97226\nLOPGEN   MVI   1(R15),C')'   COMPLETE NAME                      GP97226\n***>>> LOCATE REPLACED - DONE BY S99GDGNT FLAG                  GP00141\n*        AMODESW MODE=24     MAKE SURE                          GP97253\n*OLD*    LOCATE CAMLST       DO THE LOCATE                      GP97226\n*        AMODESW MODE=31,REG=R14   RESTORE                      GP97253\n*OLD*    BXH   R15,R15,MAINGDG  FAILED - PROCEED AS BEFORE      GP97226\n         MVC   R99DSN,CAMDSN  UPDATE WITH RETURNED TRUE NAME    GP97226\n         XC    R99GDGN,R99GDGN                                  GP97226\n         B     MAINGDG       SKIP AROUND CAMLST PATTERN         GP97226\n         SPACE 1                                                GP97226\nCAMPAT   CAMLST NAME,R99DSN-R99DSN,,CAMWORK-CAMWORK  PATTERN    GP97226\nMAINGDG  FREEMAIN R,A=(R2),LV=(R9)  FREE WORK AREA              GP97226\nDONEGDG  DS    0H                                               GP97226\n         SPACE 2\n*******************************************************************\n*      DSNAME TEXT UNIT BUILD AREA\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG02,R6),TUALLO02 SET DSNAME TU FIXED PORTION\n         LA    R6,TUALNG02(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    15,R99DSN               LOAD ADDRESS OF DSNAME\n         LA    R14,44                  LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      STATUS TEXT UNIT BUILD AREA\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG04,R6),TUALLO04 SET STATUS TU\n         TM    R99STATS,R99STSUP       STATUS SUPPLIED?\n         BC    8,*+14                  NO, USE THE DEFAULT\n         MVC   6(1,R6),R99STATS        MOVE REQUESTED STATUS TO TU\n         NI    6(R6),RLYHEX0F          REMOVE EXTRANEOUS INFORMATION\n         LA    R6,TUALNG04(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      MEMBER TEXT UNIT BUILD AREA - FOR BPAM PROCESSING\n*******************************************************************\n         TM    R99MEMBR,255-C' ' MEMBER NAME PRESENT?           GP98108\n         BZ    CHKGDG            NO, GO CHECK IF GDG DATASET    GP98108\n         LA    15,R99MEMBR             LOAD ADDRESS OF MEMBER\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BC    15,FILLMBTU             GO FILL MEMBER TU\n         SPACE 2\n*******************************************************************\n*      MEMBER TEXT UNIT BUILD AREA - FOR GDG DATASETS\n*******************************************************************\nCHKGDG   EQU   *\n         TM    R99GDGN,255-C' '  GDG DATASET?                   GP98108\n         BZ    CHKDISP           NO, GO DATASET DISPOSITIONS    GP98108\n         CLI   R99GDGN,BLNK            GDG DATASET?\n         BC    9,CHKDISP               NO, GO DATASET DISPOSITIONS\n         LA    15,R99GDGN              LOAD ADDRESS OF GDG NUMBER\n         LA    R14,6                   LOAD FULL FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      MEMBER TEXT UNIT BUILD AREA\n*******************************************************************\nFILLMBTU EQU   *\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG03,R6),TUALLO03 SET MEMBER TU FIXED PORTION\n         LA    R6,TUALNG03(R6)         POINT TO LENGTH TU LNG FIELD\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      NORMAL DISPOSITION TEXT UNIT BUILD AREA\n*******************************************************************\nCHKDISP  EQU   *\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG05,R6),TUALLO05 SET NORMAL DISPOSTION\n         TM    R99NDISP,R99DSSUP       DISPOSITION SUPPLIED?\n         BC    8,*+14                  NO, USE THE DEFAULT\n         MVC   6(1,R6),R99NDISP        MOVE REQUESTED DISP TO TU\n         NI    6(R6),RLYHEX0F          REMOVE EXTRANEOUS INFORMATION\n         LA    R6,TUALNG05(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      CONDITIONAL DISPOSITION TEXT UNIT BUILD AREA\n*******************************************************************\nCHKCDISP EQU   *\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG06,R6),TUALLO06 SET CONDITIONAL DISPOSTION\n         TM    R99STATS,R99STNEW       STATUS NEW REQUESTED?\n         BC    1,*+8                   YES, DON'T ALTER THIS\n         MVI   6(R6),R99KEEP           FOR EXISTING, SET TO KEEP\n         TM    R99CDISP,R99DSSUP       DISPOSITION SUPPLIED?\n         BC    8,*+14                  NO, USE THE DEFAULT\n         MVC   6(1,R6),R99CDISP        MOVE REQUESTED DISP TO TU\n         NI    6(R6),RLYHEX0F          REMOVE EXTRANEOUS INFORMATION\n         LA    R6,TUALNG06(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      READ/WRITE ONLY OPERATIONAL TEXT UNIT BUILD AREA\n*******************************************************************\nCHKRWOPR EQU   *\n         CLI   R99DSOPR,0              HAVE A VALUE??\n         BE    CHKBUFRL                NO - BRANCH\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG21,R6),TUALLO21 SET CONSTANT PORTION\n         MVC   6(1,R6),R99DSOPR        SET TO INPUT VALUE       GP98108\n         LA    R6,TUALNG21(R6)         POINT TO NEXT TU FIELD   GP98108\n         SPACE 2\n*******************************************************************\n*      BUFFER LENGTH TEXT UNIT BUILD AREA\n*******************************************************************\nCHKBUFRL EQU   *\n         CLC   R99BUFRL,ZEROAMT        BUFFER LNG SUPPLIED?\n         BC    9,CHK4UNIT              NO, GO CHECK ON UNIT\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG32,R6),TUALLO32 SET DEF BUFFER LNG\n         MVC   6(2,R6),R99BUFRL        USE SUPPLIED BUFFER LNG\n         LA    R6,TUALNG32(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      UNIT TEXT UNIT BUILD AREA\n*******************************************************************\nCHK4UNIT EQU   *\n         TM    R99UNIT,255-C' '  UNIT SPECIFIED?                GP98108\n         BZ    CHKFVOLS          NO, GO CHECK FOR VOLSERS       GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG15,R6),TUALLO15 SET UNIT TU FIXED PORTION\n         LA    R6,TUALNG15(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    15,R99UNIT              LOAD ADDRESS OF UNIT\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      VOLUME (#1) TEXT UNIT BUILD AREA\n*******************************************************************\nCHKFVOLS EQU   *\n         TM    R99VOLS1,255-C' ' VOLSER #1 SPECIFIED?           GP98108\n         BZ    CHKFCLSE          NO, GO CHECK FOR FREE AT CLOSE GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG10,R6),TUALLO10 SET VOLSER TU FIXED PORTION\n         ST    R6,R99TUPSV             SAVE TEXT UNIT POSITION\n         LA    R6,TUALNG10(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    15,R99VOLS1             LOAD ADDRESS OF VOLSER #1\n         LA    R14,6                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      VOLUME (#2) TEXT UNIT BUILD AREA\n*******************************************************************\nCHKFVOL2 EQU   *\n         TM    R99VOLS2,255-C' ' VOLSER #2 SPECIFIED?           GP98108\n         BZ    CHKFCLSE          NO, GO CHECK FOR FREE AT CLOSE GP98108\n         L     R15,R99TUPSV            RELOAD TEXT UNIT POSITION\n         MVI   3(R15),RLYHEX02         SET NUMBER VOLUMES TO 2\n         LA    15,R99VOLS2             LOAD ADDRESS OF VOLSER #2\n         LA    R14,6                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      VOLUME (#3) TEXT UNIT BUILD AREA\n*******************************************************************\nCHKFVOL3 EQU   *\n         TM    R99VOLS3,255-C' ' VOLSER #3 SPECIFIED?           GP98108\n         BZ    CHKFCLSE          NO, GO CHECK FOR FREE AT CLOSE GP98108\n         L     R15,R99TUPSV            RELOAD TEXT UNIT POSITION\n         MVI   3(R15),RLYHEX03         SET NUMBER VOLUMES TO 2\n         LA    15,R99VOLS3             LOAD ADDRESS OF VOLSER #3\n         LA    R14,6                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      UNALLOCATION AT CLOSE TEXT UNIT BUILD AREA\n*******************************************************************\nCHKFCLSE EQU   *\n         TM    R99STATS,R99UNCLS       UNALLOCATE AT CLOSE?\n         BC    8,CHKFPSWD              NO, GO CHECK FOR A PASSWORD\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG1C,R6),TUALLO1C SET TO UNALLOCATE AT CLOSE\n         LA    R6,TUALNG1C(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      PASSWORD TEXT UNIT BUILD AREA\n*******************************************************************\nCHKFPSWD EQU   *\n         TM    R99PSWD,255-C' '  PASSWORD SPECIFIED?            GP98108\n         BZ    CHKFBFNO          NO, GO CHECK FOR BUFNO         GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG50,R6),TUALLO50 SET PASSWORD TU FIXED PORTION\n         LA    R6,TUALNG50(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    15,R99PSWD              LOAD ADDRESS OF DDNAME\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      BUFNO TEXT UNIT BUILD AREA\n*******************************************************************\nCHKFBFNO EQU   *\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG34,R6),TUALLO34 SET DEFAULT # OF BUFFERS\n         CLI   R99BUFNO,CLEARBYT       # BUFFERS SPECIFIED?\n         BC    9,*+10                  NO, USE THE DEFAULT\n         MVC   6(1,R6),R99BUFNO        MOVE REQUESTED # BUFFERS TO TU\n         LA    R6,TUALNG34(R6)         POINT TO NEXT TU FIELD\n*\nCHK4TAPE EQU   *\n         TM    R99AFLG1,R99TAPE        USING A TAPE?\n         BC    8,CHK4DEFR              NO, GO CHECK FOR DEFER\n         SPACE 2\n*******************************************************************\n*      TAPE TEXT UNIT BUILD AREA\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG3B,R6),TUALLO3B SET DEFAULT TAPE DENSITY\n         CLI   R99DENS,CLEARBYT        TAPE DENSITY SPECIFIED?\n         BC    9,*+10                  NO, USE THE DEFAULT\n         MVC   6(1,R6),R99DENS         USE REQUESTED TAPE DENSITY\n         LA    R6,TUALNG3B(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      LABEL TEXT UNIT BUILD AREA\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG1E,R6),TUALLO1E SET DEFAULT LABEL TYPE\n         CLI   R99LABEL,CLEARBYT       LABEL TYPE SPECIFIED?\n         BC    9,*+10                  NO, USE THE DEFAULT\n         MVC   6(1,R6),R99LABEL        USE REQUESTED LABEL TYPE\n         LA    R6,TUALNG1E(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      SEQUENCE NUMBER TEXT UNIT BUILD AREA\n*******************************************************************\n         CLC   R99SEQN,ZEROAMT         SEQUENCE NUMBER SUPPLIED?\n         BC    9,CHK4DEFR              NO, GO CHECK FOR DEFER\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG1F,R6),TUALLO1F SET DEF SEQUENCE NUMBER\n         MVC   6(2,R6),R99SEQN         USE SUPPLIED SEQUENCE NUMBER\n         LA    R6,TUALNG1F(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      DEFER MOUNT TEXT UNIT BUILD AREA\n*******************************************************************\nCHK4DEFR EQU   *\n         TM    R99STATS,R99DEFER       DEFERRED MOUNTING REQUESTED?\n         BC    8,ASK4ATTR              NO, GO ASK FOR FILE ATTRIBUTES\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG6C,R6),TUALLO6C SET FOR DEFERRED MOUNTING\n         LA    R6,TUALNG6C(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      REQUEST DATASET'S DSORG BE RETURNED HERE\n*******************************************************************\nASK4ATTR EQU   *\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG57,R6),TUALLO57 SET TO ASK FOR DSORG\n         LA    R15,6(R6)               POINT TO PARM FIELD\n         ST    R15,R99DSGAD            SAVE ADDRESS FOR LATER\n         LA    R6,TUALNG57(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      REQUEST DATASET'S VOLSER BE RETURNED HERE\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG5D,R6),TUALLO5D SET TO ASK FOR VOLSER\n         LA    R15,6(R6)               POINT TO PARM FIELD\n         ST    R15,R99VOLAD            SAVE ADDRESS FOR LATER\n         LA    R6,TUALNG5D(R6)         POINT TO NEXT TU FIELD\n         SPACE\n         TM    R99STATS,R99STNEW       STATUS NEW REQUESTED?\n         BC    8,ISSUEIT               NO, GO ISSUE SVC99 CALL\n         SPACE 2\n*******************************************************************\n*      SPACE TYPE TEXT UNIT BUILD AREA\n*******************************************************************\nCONTSNEW EQU   *\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         TM    R99SPACE,R99SPSUP       SPACE TYPE REQUESTED?\n         BC    8,ALLCBLKS              NO, GO ALLOCATE IN BLOCKS\n         TM    R99SPACE,R99TRACK       TRACKS REQUESTED?\n         BC    8,*+18                  NO, GO CHECK FOR CYLS\n         MVC   0(TUALNG07,R6),TUALLO07 SET TO ALLOCATE IN TRACKS\n         LA    R6,TUALNG07(R6)         POINT TO NEXT TU FIELD\n         BC    15,CHKQTYS              GO CHECK ALLOCATION QUANTITIES\n         TM    R99SPACE,R99CYL         CYLINDERS REQUESTED?\n         BC    8,ALLCBLKS              NO, GO ALLOCATE IN BLOCKS\n         MVC   0(TUALNG08,R6),TUALLO08 SET TO ALLOCATE IN CYLS\n         LA    R6,TUALNG08(R6)         POINT TO NEXT TU FIELD\n         BC    15,CHKQTYS              GO CHECK ALLOCATION QUANTITIES\n         SPACE 2\n*******************************************************************\n*      BLOCK LENGTH TEXT UNIT BUILD AREA - BLOCK ALLOCATIONS ONLY\n*******************************************************************\nALLCBLKS EQU   *\n         MVC   0(TUALNG09,R6),TUALLO09 SET DEFAULT BLOCK LENGTH\n         CLC   R99BLKL,ZEROAMT         BLOCK LENGTH SUPPLIED?\n         BC    9,*+14                  NO, USE OUR DEFAULT\n         MVC   7(2,R6),R99BLKL         USE SUPPLIED BLOCK LENGTH\n         BC    15,*+20                 BYPASS ADDITIONAL CHECKING\n         CLC   R99BLKSZ,ZEROAMT        BLOCKSIZE 0 AS WELL?\n         BC    9,*+10                  YES, USE OUR DEFAULT\n         MVC   7(2,R6),R99BLKSZ        USE BLOCKSIZE FOR LENGTH\n         LA    R6,TUALNG09(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      PRIMARY SPACE ALLOCATION TEXT UNIT BUILD AREA\n*******************************************************************\nCHKQTYS  EQU   *\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG0A,R6),TUALLO0A SET DEFAULT PRIMARY QTY\n         CLC   R99PRMRY,ZEROAMT        PRIMARY QTY SUPPLIED?\n         BC    9,*+10                  NO, USE OUR DEFAULT\n         MVC   7(2,R6),R99PRMRY        USE SUPPLIED PRIMARY QTY\n         LA    R6,TUALNG0A(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      SECONDARY SPACE ALLOCATION TEXT UNIT BUILD AREA\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG0B,R6),TUALLO0B SET DEFAULT SECONDARY QTY\n         CLC   R99SCND,ZEROAMT         SECONDARY QTY SUPPLIED?\n         BC    9,*+10                  NO, USE OUR DEFAULT\n         MVC   7(2,R6),R99SCND         USE SUPPLIED SECONDARY QTY\n         LA    R6,TUALNG0B(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      RELEASE UNUSED SPACE (RLSE) TEXT UNIT BUILD AREA\n*******************************************************************\n         TM    R99SPCRQ,R99RLSE        RELEASE UNUSED STORAGE?\n         BC    8,CHKFRMT               NO, GO CHECK SPACE FORMAT\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG0D,R6),TUALLO0D SET TO RELEASE STORAGE\n         LA    R6,TUALNG0D(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      SPACE FORMAT TEXT UNIT BUILD AREA\n*******************************************************************\nCHKFRMT  EQU   *\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG0E,R6),TUALLO0E SET DEFAULT CONTIGUOUS\n         TM    R99SPCRQ,R99CSSUP       CONDITIONAL REQS REQUESTED?\n         BC    8,*+14                  NO, USE DEFAULT\n         MVC   6(1,R6),R99SPCRQ        USE SUPPLIED REQUIREMENTS\n         NI    6(R6),X'0E'             REMOVE EXTRANEOUS INDICATORS\n         LA    R6,TUALNG0E(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      DIRECTORY BLOCK TEXT UNIT BUILD AREA\n*******************************************************************\n         CLC   R99DRBLK,ZEROAMT        DIR. BLOCK QTY SUPPLIED?\n         BC    9,CHKAFLG1              NO, GO CHECK FOR ALT REQUESTS\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG0C,R6),TUALLO0C SET DEF DIR. BLOCK QTY\n         MVC   7(2,R6),R99DRBLK        USE SUPPLIED DIR. BLOCK QTY\n         LA    R6,TUALNG0C(R6)         POINT TO NEXT TU FIELD\n         SPACE\nCHKAFLG1 EQU   *\n         TM    R99AFLG1,R99REFDD       USING LIKE DD FUNCTION?\n         BC    1,BLDLIKDD              YES, GO BUILD THE TU\n         TM    R99AFLG1,R99REFDS       USING LIKE DSN FUNCTION?\n         BC    8,CHKDSORG              NO, GO DO MANUALLY\n         SPACE 2\n*******************************************************************\n*      DSNAME REFERENCE TEXT UNIT BUILD AREA\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG2C,R6),TUALLO2C SET REF. DSNAME TU FIXED AREA\n         LA    R6,TUALNG2C(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    15,R99DCBNR             LOAD ADDRESS OF REF. DSNAME\n         LA    R14,44                  LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE\n         TM    R99VOLS1,255-C' ' VOLSER SPECIFIED?              GP98108\n         BNZ   CHKDSORG          YES, GO CHECK FOR DSORG        GP98108\n         SPACE 2\n*******************************************************************\n*      VOLUME REFERENCE TEXT UNIT BUILD AREA\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG14,R6),TUALLO14 SET VOL REF TU FIXED AREA\n         LA    R6,TUALNG14(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    15,R99DCBNR             LOAD ADDRESS OF REF. DSNAME\n         LA    R14,44                  LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         BC    15,CHKDSORG             GO CHECK FOR DSORG\n         SPACE 2\n*******************************************************************\n*      DDNAME REFERENCE TEXT UNIT BUILD AREA\n*******************************************************************\nBLDLIKDD EQU   *\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG2D,R6),TUALLO2D SET REF. DDNAME TU FIXED AREA\n         LA    R6,TUALNG2D(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    R15,R99DCBDR            LOAD ADDRESS OF REF. DDNAME\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         BC    15,CHKDSORG             GO CHECK FOR DSORG\n         SPACE 2\n*******************************************************************\n*      DSORG TEXT UNIT BUILD AREA\n*******************************************************************\nCHKDSORG EQU   *\n         TM    R99DSORG,R99DSGSP       DSORG SUPPLIED?\n         BC    8,CHKBLKSZ              NO, GO CHECK FOR BLOCKSIZE\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG3C,R6),TUALLO3C SET FOR A PDS\n         TM    R99DSORG,R99PDS         IS THIS A NEW PDS?\n         BC    8,*+12                  NO, GO CHECK ANOTHER\n         LA    R6,TUALNG3C(R6)         POINT TO NEXT TU FIELD\n         BC    15,CHKBLKSZ             GO CHECK BLKSIZE\n         TM    R99DSORG,R99VSAM        IS THIS A NEW VSAM FILE?\n         BC    8,*+18                  NO, GO CHECK ANOTHER\n         MVC   6(2,R6),S99DVSAM        SAY DSORG IS VSAM\n         LA    R6,TUALNG3C(R6)         POINT TO NEXT TU FIELD\n         BC    15,CHKBLKSZ             GO CHECK BLKSIZE\n         TM    R99DSORG,R99DA          IS THIS A NEW DA FILE?\n         BC    8,*+18                  NO, GO CHECK ANOTHER\n         MVC   6(2,R6),S99DDA          SAY DSORG IS DA\n         LA    R6,TUALNG3C(R6)         POINT TO NEXT TU FIELD\n         BC    15,CHKBLKSZ             GO CHECK BLKSIZE\n         TM    R99DSORG,R99PS          IS THIS A NEW PS FILE?\n         BC    8,CHKBLKSZ              NO, GO CHECK BLKSIZE\n         MVC   6(2,R6),S99DPS          SAY DSORG IS PS\n         LA    R6,TUALNG3C(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      BLOCKSIZE TEXT UNIT BUILD AREA\n*******************************************************************\nCHKBLKSZ EQU   *\n         CLC   R99BLKSZ,ZEROAMT        BLOCKSIZE SUPPLIED?\n         BC    9,CHKLRECL              NO, GO CHECK LRECL\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG30,R6),TUALLO30 SET DEF BLOCKSIZE\n         MVC   6(2,R6),R99BLKSZ        USE SUPPLIED BLOCKSIZE\n         TM    R99AFLG1,R99SYSOT       SYSOUT DATASET?\n         BC    8,*+10                  NO, DON'T CHANGE A THINGM0770RLY\n         MVC   6(2,R6),=H'7980'        SET SYSOUT DEFAULT BLOCKSIZE\n         LA    R6,TUALNG30(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      RECORD LENGTH TEXT UNIT BUILD AREA\n*******************************************************************\nCHKLRECL EQU   *\n         CLC   R99LRECL,ZEROAMT        RECORD LENGTH SUPPLIED?\n         BC    9,CHKRECFM              NO, CHECK RECORD FORMAT\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG42,R6),TUALLO42 SET DEF RECORD LENGTH\n         MVC   6(2,R6),R99LRECL        USE SUPPLIED RECORD LENGTH\n         TM    R99AFLG1,R99SYSOT       SYSOUT DATASET?\n         BC    8,*+10                  NO, DON'T CHANGE A THINGM0770RLY\n         MVC   6(2,R6),=H'133'         SET SYSOUT DEFAULT BLOCKSIZE\n         LA    R6,TUALNG42(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      RECORD FORMAT TEXT UNIT BUILD AREA\n*******************************************************************\nCHKRECFM EQU   *\n         TM    R99RECFM,R99RFSUP       RECORD FORMAT SUPPLIED?\n         BC    8,CHKEXPIR              NO, GO CHECK FOR EXPIRATION\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG49,R6),TUALLO49 SET DEF RECORD FORMAT\n         MVC   6(1,R6),R99RECFM        USE SUPPLIED RECORD FORMAT\n         LA    R6,TUALNG49(R6)         POINT TO NEXT TU FIELD\n         TM    R99AFLG1,R99INRDR       INTERNAL RDR REQUESTED? M0770RLY\n         BC    1,ISSUEIT               YES, GO ISSUE SVC99 CALLM0770RLY\n         TM    R99AFLG1,R99SYSOT       SYSOUT DATASET?\n         BC    1,ISSUEIT               YES, GO ISSUE SVC99 CALL\n         SPACE 2\n*******************************************************************\n*      EXPIRATION DATE TEXT UNIT BUILD AREA\n*******************************************************************\nCHKEXPIR EQU   *\n         TM    R99EXPR,255-C' '  NON-NULL, NON-BLANK?           GP98108\n         BZ    CHKRETN       NEITHER; NO EXPIRATION GIVEN       GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE EXPIR. TU PTR LIST\n         MVC   0(TUALNG22,R6),TUALLO22 SET MEMBER TU FIXED PORTION\n*  NOTE:  THIS CODE GENERATES A NEW FORMAT (LONG) YYYYDDD DATE. GP98108\n*    THE NEXT MOVE WILL USE A 19 FOR THE CENTURY UNTIL THE      GP98108\n*    R99EXPR FIELD IS EXPANDED (AND DATA ARE FILLED IN!)        GP98108\n         MVC   6+L'TUTX22-L'R99EXPR(L'R99EXPR,R6),R99EXPR       GP98108\n         LA    R6,TUALNG22(R6)         POINT TO LENGTH TU LNG FIELD\n         BC    15,CHKKEYL              GO CHECK FOR KEYLENGTH\n         SPACE 2\n*******************************************************************\n*      RETENTION PERIOD TEXT UNIT BUILD AREA\n*******************************************************************\nCHKRETN  EQU   *\n         CLC   R99RETN,ZEROAMT         RETENTION PERIOD SUPPLIED?\n         BC    9,CHKKEYL               NO, GO CHECK FOR KEYLENGTH\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG23,R6),TUALLO23 SET DEF RETENTION PERIOD\n         MVC   6(2,R6),R99RETN         USE SUPPLIED RETENTION PERIOD\n         LA    R6,TUALNG23(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      KEYLENGTH TEXT UNIT BUILD AREA\n*******************************************************************\nCHKKEYL  EQU   *\n         TM    R99DSORG,R99DA          IS THIS A NEW DA FILE?\n         BC    8,CHKRACF               NO, GO CHECK ON RACF\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG40,R6),TUALLO40 SET DEF KEYLENGTH\n         CLI   R99KEYL,ZEROLNG         KEYLENGTH SUPPLIED?\n         BC    9,*+10                  NO, USE OUR DEFAULT\n         MVC   6(1,R6),R99KEYL         USE SUPPLIED KEYLENGTH\n         LA    R6,TUALNG40(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      RACF PROTECTION TEXT UNIT BUILD AREA\n*******************************************************************\nCHKRACF  EQU   *\n         TM    R99PWDFL,R99RACF        RACF PROTECTION REQUESTED\n         BC    8,CHKNEWPW              NO, GO CHECK FOR NEW PSWRD\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG61,R6),TUALLO61 SET FOR RACF PROTECTION\n         LA    R6,TUALNG61(R6)         POINT TO NEXT TU FIELD\n         SPACE 2\n*******************************************************************\n*      PASSWORD PROTECTION TEXT UNIT BUILD AREA\n*******************************************************************\nCHKNEWPW EQU   *\n         TM    R99PWDFL,R99PRSUP       PASSWORD PROTECTION REQUESTED?\n         BC    8,ISSUEIT               NO, GO ISSUE SVC99 CALL\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUALNG20,R6),TUALLO20 SET FOR READ-ONLY PASSWORD\n         TM    R99PWDFL,R99PWDPR       FULL PASSWORD PROT. REQUESTED?\n         BC    8,*+8                   NO, USE DEFAULT\n         MVI   6(R6),S99PASSF          SET FOR FULL PW PROTECTION\n         LA    R6,TUALNG20(R6)         POINT TO NEXT TU FIELD\n         BC    15,ISSUEIT              GO ISSUE SVC99 CALL\n         SPACE\nUNALLRTN EQU   *\n         TM    R99PRCSS,R99UNALL       UNALLOCATION REQUESTED\n         BC    8,CONCTRTN              NO, GO CHECK CONCATENATION\n         SPACE 2\n*******************************************************************\n*            DATASET UNALLOCATION SECTION BEGINS HERE\n*******************************************************************\n         MVI   S99VERB,S99VRBUN        SET FOR DYNAMIC UNALLOCATION\n         SPACE\n         MVC   0(TUDLNG07,R6),TUDEAL07 SET TO UNALLOCATE DATASET\n         LA    R6,TUALNG07(R6)         POINT TO NEXT TU FIELD\n         SPACE\n         TM    R99DDNAM,255-C' ' DDNAME PRESENT?                GP98108\n         BZ    CHKDSNUN          NO, GO CHECK FOR DSNAME        GP98108\n         SPACE 2\n*******************************************************************\n*      DDNAME TEXT UNIT BUILD AREA\n*******************************************************************\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUDLNG01,R6),TUDEAL01 SET DDNAME TU FIXED PORTION\n         LA    R6,TUDLNG01(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    R15,R99DDNAM            LOAD ADDRESS OF DDNAME\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         BC    15,CHKOVRD              GO CHECK FOR OVERRIDE\n         SPACE 2\n*******************************************************************\n*      DSNAME TEXT UNIT BUILD AREA\n*******************************************************************\nCHKDSNUN EQU   *\n         TM    R99DSN,255-C' '   DSNAME PRESENT?                GP98108\n         BZ    CHKOVRD           NO, GO CHECK FOR OVERRIDE      GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUDLNG02,R6),TUDEAL02 SET DSNAME TU FIXED PORTION\n         LA    R6,TUDLNG02(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    15,R99DSN               LOAD ADDRESS OF DDNAME\n         LA    R14,44                  LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      MEMBER TEXT UNIT BUILD AREA\n*******************************************************************\n         TM    R99MEMBR,255-C' ' MEMBER NAME PRESENT?           GP98108\n         BZ    CHKOVRD           NO, GO CHECK FOR OVERRIDE      GP98108\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUDLNG03,R6),TUDEAL03 SET MEMBER TU FIXED PORTION\n         LA    R6,TUDLNG03(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    15,R99MEMBR             LOAD ADDRESS OF MEMBER\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      DISPOSTION OVERRIDE TEXT UNIT BUILD AREA\n*******************************************************************\nCHKOVRD  EQU   *\n         TM    R99STATS,R99OVRD        OVERRIDING DISPOSITION?\n         BC    8,ISSUEIT               NO, GO ISSUE SVC99 CALL\n         LA    R5,S99TUPL+4            GET ADDRESS OF NEXT TU PTR\n         ST    R6,S99TUPTR             SAVE NXT ADDR IN TU PTR LIST\n         MVC   0(TUDLNG05,R6),TUDEAL05 SET OVERRIDE DISPOSTION\n         TM    R99NDISP,R99DSSUP       DISPOSITION SUPPLIED?\n         BC    8,*+14                  NO, USE THE DEFAULT\n         MVC   6(1,R6),R99NDISP        MOVE REQUESTED DISP TO TU\n         NI    6(R6),RLYHEX0F          REMOVE EXTRANEOUS INFORMATION\n         LA    R6,TUDLNG05(R6)         POINT TO NEXT TU FIELD\n         BC    15,ISSUEIT              GO ISSUE SVC99 CALL\n         SPACE\nCONCTRTN EQU   *\n         TM    R99PRCSS,R99CNCT        CONCATENATION REQUESTED\n         BC    8,DCNCTRTN              NO, GO CHECK CONCATENATION\n         SPACE 2\n*******************************************************************\n*            DATASET CONCATENATION SECTION BEGINS HERE\n*******************************************************************\n         MVI   S99VERB,S99VRBCC        SET FOR DYNAMIC CONCATENATION\n         SPACE 2\n*******************************************************************\n*      CONCATENATION DDNAME TEXT UNIT BUILD AREA - DDNAME #1\n*******************************************************************\n         MVC   0(TUCLNG01,R6),TUCONC01 SET CONCAT. TU FIXED PORTION\n         ST    R6,R99TUPSV             SAVE TEXT UNIT POSITION\n         LA    R6,TUCLNG01(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    15,R99CNCT1             LOAD ADDRESS OF DDNAME #1\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      CONCATENATION DDNAME TEXT UNIT BUILD AREA - DDNAME #2\n*******************************************************************\n         LA    15,R99CNCT2             LOAD ADDRESS OF DDNAME #2\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      CONCATENATION DDNAME TEXT UNIT BUILD AREA - DDNAME #3\n*******************************************************************\nCHKFDDN3 EQU   *\n         TM    R99CNCT3,255-C' ' VOLSER #3 SPECIFIED?           GP98108\n         BZ    ISSUEIT           NO, GO ISSUE SVC99 CALL        GP98108\n         CLI   R99CNCT3,BLNK           VOLSER #3 SPECIFIED?\n         BC    9,ISSUEIT               NO, GO ISSUE SVC99 CALL\n         L     R15,R99TUPSV            RELOAD TEXT UNIT POSITION\n         MVI   3(R15),RLYHEX03         SET NUMBER DDNAMES TO 3\n         LA    15,R99CNCT3             LOAD ADDRESS OF DDNAME #3\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      CONCATENATION DDNAME TEXT UNIT BUILD AREA - DDNAME #4\n*******************************************************************\n         TM    R99CNCT4,255-C' ' VOLSER #4 SPECIFIED?           GP98108\n         BZ    ISSUEIT           NO, GO ISSUE SVC99 CALL        GP98108\n         L     R15,R99TUPSV            RELOAD TEXT UNIT POSITION\n         MVI   3(R15),RLYHEX04         SET NUMBER DDNAMES TO 4\n         LA    15,R99CNCT4             LOAD ADDRESS OF DDNAME #4\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         SPACE 2\n*******************************************************************\n*      CONCATENATION DDNAME TEXT UNIT BUILD AREA - DDNAME #5\n*******************************************************************\n         TM    R99CNCT5,255-C' ' VOLSER #5 SPECIFIED?           GP98108\n         BZ    ISSUEIT           NO, GO ISSUE SVC99 CALL        GP98108\n         L     R15,R99TUPSV            RELOAD TEXT UNIT POSITION\n         MVI   3(R15),RLYHEX05         SET NUMBER DDNAMES TO 5\n         LA    15,R99CNCT5             LOAD ADDRESS OF DDNAME #5\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         BC    15,ISSUEIT              GO ISSUE SVC99 CALL\n         SPACE\nDCNCTRTN EQU   *\n         TM    R99PRCSS,R99DCAT        DECONCATENATION REQUESTED\n         BC    8,ALLDAX4               NO, THERE'S AN ERROR HERE\n         SPACE 2\n*******************************************************************\n*           DATASET DECONCATENATION SECTION BEGINS HERE\n*******************************************************************\n         MVI   S99VERB,S99VRBDC        SET FOR DYNAM DECONCATENATION\n         SPACE 2\n*******************************************************************\n*      DECONCATENATION DDNAME TEXT UNIT BUILD AREA\n*******************************************************************\n         MVC   0(TUDCLN01,R6),TUDCON01 SET DDNAME TU FIXED PORTION\n         LA    R6,TUDCLN01(R6)         POINT TO LENGTH TU LNG FIELD\n         LA    R15,R99DDNAM            LOAD ADDRESS OF DDNAME\n         LA    R14,8                   LOAD FULL FIELD LENGTH\n         BAL   R9,FINDLNG              GO FIND FIELD LENGTH\n         BC    15,ISSUEIT              GO ISSUE SVC99 CALL\n         SPACE 2\n*******************************************************************\n*\n*       ISUUE DYNALLOC MACRO HERE (SVC99 CALL)\n*\n*******************************************************************\nISSUEIT  EQU   *\n         OI    S99TUPTR,S99TUPLN       TAINT HIGH ORDER BIT\n         LR    R1,R3                   LOAD REQUEST BLOCK PTR ADDRESS\n         SPACE\n         DYNALLOC\n         SPACE 2\n*******************************************************************\n*      RETURN SVC99 RETURN INFORMATION TO CALLER\n*******************************************************************\n         MVC   R99ERRCD,S99ERROR       RETURN ERROR CODE FIELD\n         MVC   R99INFCD,S99INFO        RETURN INFORMATION CODE FIELD\n         CLC   R99ERRCD,=X'0000'       ANY ERRORS?\n         BC    7,ALLDAX4               YES, GO NOTIFY THE USER\n         SPACE\n         TM    R99AFLG1,R99SYSOT       SYSOUT DATASET?\n         BC    1,RTRNDSRG              YES, ONLY RETURN DSORG\n         SPACE\n         L     R15,R99VOLAD            POINT TO VOLSER PARM FIELD\n         MVC   R99VOLS1(6),0(R15)      RETURN VOLSER TO USER\n         SPACE\nRTRNDSRG EQU   *\n         L     R15,R99DSGAD            POINT TO DSORG PARM FIELD\n         ICM   R0,3,0(R15)   LOAD DSORG BITS FOR FASTER CHECK   GP97253\n         N     R0,=X'0000FEFF'  AND MASKING - KILL UNMOVABLE    GP97253\n         SPACE\n         CLM   R0,3,=X'0200'           PO DSORG?                GP97253\n         BC    7,*+12                  NO, GO CHECK NEXT DSORG\n         OI    R99DSORG,R99PDS         TELL USER THIS IS A PDS\n         BC    15,LNKS99EX             GO RETURN\n         SPACE\n         TM    1(R15),X'08'            VSAM DSORG?              GP98297\n         BZ    *+12                    NO, GO CHECK NEXT DSORG  GP98297\n         OI    R99DSORG,R99VSAM        TELL USER THIS IS VSAM\n         BC    15,LNKS99EX             GO RETURN\n         SPACE\n         CLM   R0,3,=X'2000'           DA DSORG?                GP97253\n         BC    7,*+12                  NO, GO CHECK NEXT DSORG\n         OI    R99DSORG,R99DA          TELL USER THIS IS DA\n         BC    15,LNKS99EX             GO RETURN\n         SPACE\n         CLM   R0,3,=X'4000'           PS DSORG?                GP97253\n         BC    7,LNKS99EX              NO, JUST GO RETURN\n         OI    R99DSORG,R99PS          TELL USER THIS IS PS\n         SPACE 2\n********************************************************************\n*        RETURN TO OUR CALLER\n********************************************************************\nLNKS99EX EQU   *                       ALL FINISHED HERE:\n         RETURN RC=0                   RETURN TO OUR CALLER\n         SPACE  4\nALLDAX4  EQU   *                       FILE ALLOCATION ERROR:\n         RETURN RC=8                   RETURN TO OUR CALLER\n         EJECT\n********************************************************************\n*\n*        SUBROUTINE TO FIND TRUE INPUT PARAMETER LENGTH\n*\n********************************************************************\nFINDLNG  EQU   *\n         XR    R1,R1                   CLEAR WORK REGISTER\n         ST    R15,R99ADDSV            SAVE INPUT PARM ADDRESS\nRTNCOMP  EQU   *\n         TM    0(R15),255-C' '   END OF VALID ITEM?             GP98108\n         BZ    MOVEDAT           YES, GO MOVE THE DATA          GP98108\n         LA    R15,1(R15)              POINT UP TO NEXT INPUT BYTE\n         LA    R1,1(R1)                INCREMENT MOVE LENGTH\n         BCT   R14,RTNCOMP             GO BACK UNTIL LENGTH FOUND\nMOVEDAT  EQU   *\n         STCM  R1,B'0011',0(R6)        SAVE LENGTH FOR THIS TU\n         LA    R6,2(R6)                POINT PAST LENGTH FIELD\n         L     R15,R99ADDSV            RELOAD INPUT PARM ADDRESS\n         BCT   R1,*+4                  LESS 1 FOR THE MOVE\n         EX    R1,MOVEPARM             MOVE IT\n         LA    R1,1(R1)                RESTORE ORIGINAL LENGTH\n         AR    R6,R1                   POINT PAST PARM FIELD\n         BR    R9                      RETURN TO OUR CALLER\n         SPACE 4\nMOVEPARM MVC   0(1,R6),0(R15)          EXECUTE IT\n         EJECT\n********************************************************************\n*\n*        MODULE CONSTANTS\n*\n* ******************************************************************\n         SPACE 2\nZEROAMT  DC    H'0'\nH500     DC    H'500'\nS99DVSAM DC    XL2'0008'\nS99DPDS  DC    XL2'0200'\nS99DDA   DC    XL2'2000'\nS99DPS   DC    XL2'4000'\n* ******************************************************************\n         SPACE  4\n* ******************************************************************\n*\n*   TEXT UNIT FORMAT\n*\n*      KEY  - XL2\n*      #    - XL2\n*      LEN  - XL2\n*      PARM - X....           VARIABLE LENGTH\n*\n*        START DYNAMIC ALLOCATION TEXT UNITS\n*\n* ******************************************************************\n         SPACE 4\n*\n*   DDNAME TEXT UNIT\n*\n         TUTX  01,DALDDNAM   (VERB CODE 01)                     GP98108\n         SPACE 2\n*\n*   DSNAME SPECIFICATION TEXT UNIT\n*\n         TUTX  02,DALDSNAM   (VERB CODE 02)                     GP98108\n         SPACE 2\n*\n*   MEMBER TEXT UNIT\n*\n         TUTX  03,DALMEMBR   (VERB CODE 03)                     GP98108\n         SPACE 2\n*\n*   STATUS TEXT UNIT\n*\n         TUTX  04,DALSTATS,X'08'  STATUS = SHR                  GP98108\n*                         (X'01' - OLD   X'04' - NEW            GP98108\n*                          X'02' - MOD   X'08' - SHR)           GP98108\n         SPACE 2\n*\n*   DATASET NORMAL DISPOSITION TEXT UNIT\n*\n         TUTX  05,DALNDISP,X'08'  DISP = KEEP                   GP98108\n*                         (X'01' - UNCATLG  X'04' - DELETE      GP98108\n*                          X'02' - CATLG    X'08' - KEEP)       GP98108\n         SPACE 2\n*\n*   DATASET CONDITIONAL DISPOSITION TEXT UNIT\n*\n         TUTX  06,DALCDISP,X'04'  DISP = ,DELETE                GP98108\n*                         (X'01' - UNCATLG  X'04' - DELETE\n*                          X'02' - CATLG    X'08' - KEEP)\n         SPACE 2\n*\n*   SPACE TYPE TEXT UNITS\n*\n         TUTX  07,DALTRK,NP=0   SPACE IN TRACKS                 GP98108\n         TUTX  08,DALCYL,NP=0   SPACE IN CYLINDERS              GP98108\n         TUTX  09,DALBLKLN,AL3(9040) SPACE IN AVERAGE BLOCK LENGTH\n         SPACE 2\n*\n*   PRIMARY SPACE QUANTITY SPECIFICATION TEXT UNIT\n*\n         TUTX  0A,DALPRIME,XL3'1'  PRIMARY SPACE AMOUNT         GP98108\n         SPACE 2\n*\n*   SECONDARY SPACE QUANTITY SPECIFICATION TEXT UNIT\n*\n         TUTX  0B,DALSECND,XL3'1'  SECONDARY SPACE              GP98108\n         SPACE 2\n*\n*   DIRECTORY BLOCK QUANTITY SPECIFICATION TEXT UNIT\n*\n         TUTX  0C,DALDIR,XL3'5'  DIRECTORY BLOCKS               GP98108\n         SPACE 2\n*\n*   UNUSED SPACE RELEASE (RLSE) SPECIFICATION TEXT UNIT\n*\n         TUTX  0D,DALRLSE,NP=0   RELEASE UNUASED SPACE ON CLOSE GP98108\n         SPACE 2\n*\n*   SPACE ALLOCATION PROCESSING\n*\n         TUTX  0E,DALSPFRM,X'08'  CONTIG                        GP98108\n*             (X'02' - IF DIFFERENT AREAS OF CONTIG SPACE ARE NEEDED\n*             (X'04' - IF MAXIMUM CONTIGUOUS SPACE ARE NEEDED\n*             (X'08' - IF SPACE MUST BE CONTIGUOUS (CONTIG)\n         SPACE 2\n*\n*   VOLUME SERIAL SPECIFICATION TEXT UNIT\n*\n         TUTX  10,DALVLSER   SERIAL LIST                        GP98108\n         SPACE 2\n*\n*   VOLUME REFERENCE TO A DSNAME SPECIFICATION TEXT UNIT\n*\n         TUTX  14,DALVLRDS   VOL=REF=                           GP98108\n         SPACE 2\n*\n*   UNIT DESCRIPTION SPECIFICATION TEXT UNIT\n*\n         TUTX  15,DALUNIT    UNIT=                              GP98108\n         SPACE 2\n*\n*   SYSOUT SPECIFICATION TEXT UNIT\n*\n         TUTX  18,DALSYSOU,C'A'  SYSOUT CLASS                   GP98108\n*     (NOTE: TO ACCEPT DEFAULT CLASS, TEXT UNIT LENGTH\n*      SHOULD BE 4 {,NP=0, INSTEAD OF 3RD PARM})                GP98108\n*\n*   SYSOUT WRITER PROGRAM NAME SPECIFICATION TEXT UNIT\n*\n         TUTX  19,DALSPGNM   WRITER NAME (OR USER PGM)          GP98108\n         SPACE 2                                               M0764RLY\n*\n*   SYSOUT FORM NUMBER SPECIFICATION TEXT UNIT\n*\n         TUTX  1A,DALSFMNO   FORM 'NUMBER' - UP TO FOUR CHARACTERS\n         SPACE 2\n*\n*   UNALLOCATION AT CLOSE SPECIFICATION TEXT UNIT\n*\n         TUTX  1C,DALCLOSE   FREE=CLOSE                         GP98108\n         SPACE 2\n*\n*   SYSOUT COPIES SPECIFICATION TEXT UNIT\n*\n         TUTX  1D,DALCOPYS,X'01'  SYSOUT COPIES                 GP98108\n         SPACE 2\n*\n*   LABEL TYPE SPECIFICATION TEXT UNIT\n*\n         TUTX  1E,DALLABEL,X'02'  LABEL TYPE                    GP98108\n*             (X'01' - NL  - NO LABEL\n*             (X'02' - SL  - IBM STANDARD LABEL\n*             (X'04' - NSL - NON-STANDARD LABEL\n*             (X'0A' - SUL - IBM STANDARD LABEL + USER LABEL\n*             (X'10' - BLP - BYPASS LABEL PROCESSING\n*             (X'21' - LTM - BYPASS LEADING TAPE MARK / DOS\n*             (X'40' - AL  - AMERICAN NATIONAL STANDARD LABEL\n*             (X'48' - AUL - AMERICAN NATIOANL STD. LABEL + USER\n         SPACE 2\n*\n*   TAPE DATASET SEQUENCE NUMBER SPECIFICATION TEXT UNIT\n*\n         TUTX  1F,DALDSSEQ,YL2(1)  FILE SEQUENCE                GP98108\n         SPACE 2\n*\n*   PASSWORD PROTECTION SPECIFICATION TEXT UNIT\n*\n         TUTX  20,DALPASPR,X'30'  READPASS                      GP98108\n*  (X'10' - PASSWORD NEEDED FOR READ, CHANGED, EXTENDED, DELETED\n*  (X'30' - PASSWORD NEEDED FOR CHANGED, EXTENDED, DELETED (NOT READ)\n         SPACE 2\n*\n*   READ/WRITE ONLY SPECIFICATION\n*\n         TUTX  21,DALINOUT,X'80'  BSAM IN/OUT OVERRIDE          GP98108\n*                         (X'80' - INPUT ONLY;  X'40' - OUTPUT ONLY)\n         SPACE 2\n*\n*   EXPIRATION DATE SPECIFICATION TEXT UNIT\n*\n         TUTX  22,DALEXPDL,C'1999365'  SET DEFAULT EXPIRATION   GP98108\n         SPACE 2\n*\n*   RETENTION PERIOD SPECIFICATION TEXT UNIT\n*\n         TUTX  23,DALRETPD,YL2(30)  RETENTION                   GP98108\n         SPACE 2\n*\n*   DCB REFERENCE TO A DSNAME SPECIFICATION TEXT UNIT\n*\n         TUTX  2C,DALDCBDS   DCB=...DSN                         GP98108\n         SPACE 2\n*\n*   DCB REFERENCE TO A DDNAME SPECIFICATION TEXT UNIT\n*\n         TUTX  2D,DALDCBDD   DCB=...DDN                         GP98108\n         SPACE 2\n*\n*   BLKSIZE SPECIFICATION TEXT UNIT\n*\n         TUTX  30,DALBLKSZ,YL2(9040)  BLKSIZE (=9040?)          GP98108\n*                                     (MAX X'7FF8' - 32760)\n         SPACE 2\n*\n*   BUFL (BUFFER LENGTH) SPECIFICATION TEXT UNIT\n*\n         TUTX  32,DALBUFL,YL2(9040)  BUFLEN (=9040?)            GP98108\n*                                     (MAX X'7FF8' - 32760)\n         SPACE 2\n*\n*   BUFNO (BUFFER NUMBER) SPECIFICATION TEXT UNIT\n*\n         TUTX  34,DALBUFNO,X'8'  BUFNO (WHY NOT 5?)             GP98108\n         SPACE 2\n*\n*   DEN (DENSITY) SPECIFICATION TEXT UNIT\n*\n         TUTX  3B,DALDEN,X'D3'  DENSITY (FOR DASD?)             GP98108\n*             (X'03' - FOR 200 BPI 7-TRACK (0)                       *\n*             (X'43' - FOR 556 BPI 7-TRACK (1)                       *\n*             (X'83' - FOR 800 BPI 7-TRACK, 800 BPI 9-TRACK (2)      *\n*             (X'C3' - FOR 1600 BPI 9-TRACK (3)                      *\n*             (X'D3' - FOR 6250 BPI 9-TRACK (4)                      *\n         SPACE 2\n*\n*   DSORG SPECIFICATION TEXT UNIT\n*\n         TUTX  3C,DALDSORG,X'0200'  DSORG (WHY?)                GP98108\n*             (X'0004' FOR TCAM 3705\n*             (X'0008' FOR VSAM\n*             (X'0020' FOR TCAM MESSAGE QUEUE (TQ)\n*             (X'0040' FOR TCAM LINE GROUP (TX)\n*             (X'0080' FOR GRAPHICS (GS)\n*             (X'0200' FOR PARTITIONED ORGANIZATION (PO)\n*             (X'0300' FOR PARTITIONED ORGANIZATION UNMOVABLE (POU)\n*             (X'0400' FOR GOVERNMENT OF MESSAGE TRANSFER TO OR FROM\n*                 A TELECOMMUNICATIONS MESSAGE PROCESSING QUEUE (MQ)\n*             (X'0800' FOR DIRECT ACCESS MESSAGE QUEUE (CQ)\n*             (X'1000' FOR COMMUNICATION LINE GROUP (CX)\n*             (X'2000' FOR DIRECT ACCESS (DA)\n*             (X'2100' FOR DIRECT ACCESS UNMOVABLE (DAU)\n*             (X'4000' FOR PHYSICAL SEQUENTIAL (PS)\n*             (X'4100' FOR PHYSICAL SEQUENTIAL UNMOVABLE (PSU)\n         SPACE 2\n*\n*   KEYLEN (KEY LENGTH) SPECIFICATION TEXT UNIT\n*\n         TUTX  40,DALKYLEN,AL1(10)  KEY LENGTH (?)              GP98108\n         SPACE 2\n*\n*   LRECL (RECORD LENGTH) SPECIFICATION TEXT UNIT\n*\n         TUTX  42,DALLRECL,YL2(80)  RECLEN = 80                 GP98108\n*                                     (MAX X'7FF8' - 32760)\n         SPACE 2\n*\n*   RECFM (RECORD FORMAT) SPECIFICATION TEXT UNIT\n*\n         TUTX  49,DALRECFM,X'90'  RECFM= FB                     GP98108\n*             (X'02' - FOR MACHINE CODE PRINTER CONTROL CHARACTERS\n*                      IN RECORD (M), OR FOR COMPLETE QTAM RECORD (R)\n*             (X'04' - FOR ASA PRINTER CONTROL CHARACTERS IN RECORD\n*                      (A), OR FOR COMPLETE QTAM MESSAGE (S)\n*             (X'08' - FOR STANDARD FIXED RECORDS, SPANNED VARIABLE\n*                      RECORDS, OR SEGMENT OF QTAM MESSAGE (S)\n*             (X'10' - FOR BLOCKED RECORDS (B)\n*             (X'20' - FOR VARIABLE ASCII RECORDS (D), OR FOR TRACK\n*                      OVERFLOW (T)\n*             (X'40' - FOR VARIABLE RECORDS (V)\n*             (X'80' - FOR FIXED RECORDS (F)\n*             (X'C0' - FOR UNDEFINED RECORDS (U)\n         SPACE 2\n*\n*   PASSWORD SPECIFICATION TEXT UNIT\n*\n         TUTX  50,DALPASSW   PASSWORD FOR PROTECTED DS          GP98108\n         SPACE 2\n*\n*   DSORG REQUEST SPECIFICATION TEXT UNIT\n*\n         TUTX  57,DALRTORG,YL2(0)  RETURNED DSORG               GP98108\n*             (X'0000' IF DSORG UNDETERMINED\n*             (X'0004' IF TR\n*             (X'0008' IF VSAM\n*             (X'0020' IF TQ\n*             (X'0040' IF TX\n*             (X'0080' IF GS\n*             (X'0200' IF PO\n*             (X'0300' IF POU\n*             (X'0400' IF MQ\n*             (X'0800' IF CQ\n*             (X'1000' IF CX\n*             (X'2000' IF DA\n*             (X'2100' IF DAU\n*             (X'4000' IF PS\n*             (X'4100' IF PSU\n*             (X'8000' IF IS\n*             (X'8100' IF ISU\n         SPACE 2                                               M0764RLY\n*\n*   SYSOUT REMOTE WORK STATION SPECIFICATION (NODEID) TEXT UNIT\n*\n         TUTX  58,DALSUSER   REMOTE WORK STATION NAME           GP98108\n         SPACE 2                                               M0764RLY\n*\n*   SYSOUT HOLD QUEUE SPECIFICATION TEXT UNIT\n*\n         TUTX  59,DALSHOLD,NP=0  HOLD SYSOUT                    GP98108\n         SPACE 2\n*\n*   VOLUME SERIAL REQUEST SPECIFICATION TEXT UNIT\n*\n         TUTX  5D,DALRTVOL,CL6' '  RETURNED VOL-SER             GP98108\n         SPACE 2                                               M0764RLY\n*\n*   SUBSYSTEM NAME REQUEST SPECIFICATION TEXT UNIT\n*\n         TUTX  5F,DALSSNM    SUB-SYSTEM NAME                    GP98108\n*              (NOTE: TO ACCEPT DEFAULT SUBSYSTEM ID, TEXT UNIT LENGTH\n*                     SHOULD BE 4 - ,NP=0 - NEEDS CODE CHANGE)  GP98108\n*\n         SPACE 2\n*\n*   PROTECT SPECIFICATION TEXT UNIT\n*\n         TUTX  61,DALPROT,NP=0    REQUEST RACF PROTECTION       GP98108\n         SPACE 2                                               M0764RLY\n*\n*   SYSOUT USER ID SPECIFICATION TEXT UNIT\n*\n         TUTX  63,DALUSRID   SYSOUT USER ID                     GP98108\n*              (NOTE: TEXT UNITS X\"0018\" AND X\"0058\" MUST ALSO\n*                     BE CODED WHEN USING THIS TEXT UNIT)\n         SPACE 2\n*\n*   DEFER SPECIFICATION TEXT UNIT\n*\n         TUTX  6C,DALDEFER,NP=0 DEFER MOUNTING                  GP98108\n         SPACE 2\n********************************************************************\n*\n*        END DYNAMIC ALLOCATION TEXT UNITS\n*\n********************************************************************\n         EJECT\n********************************************************************\n*\n*        START DYNAMIC UNALLOCATION TEXT UNITS\n*\n********************************************************************\n         SPACE 4\n*        DDNAME SPECIFICATION TEXT UNIT\n*\nTUDEAL01 DS    0C                      (VERB CODE 02)\n         DC    XL2'0001'               KEY\n         DC    XL2'0001'                #\nTUDLNG01 EQU   *-TUDEAL01\n         DC    XL2'0003'               LEN  (VARIABLE)\n         DC    CL3'DD1'                PARM (DDNAME)\n         SPACE 2\n*\n*        DSNAME SPECIFICATION TEXT UNIT\n*\nTUDEAL02 DS    0C                      (VERB CODE 02)\n         DC    XL2'0002'               KEY\n         DC    XL2'0001'                #\nTUDLNG02 EQU   *-TUDEAL02\n         DC    XL2'0004'               LEN  (VARIABLE)\n         DC    CL4'DSN1'               PARM (DSNAME)\n         SPACE 2\n*\n*        MEMBER NAME SPECIFICATION TEXT UNIT\n*\nTUDEAL03 DS    0C                      (VERB CODE 02)\n         DC    XL2'0003'               KEY\n         DC    XL2'0001'                #\nTUDLNG03 EQU   *-TUDEAL03\n         DC    XL2'0007'               LEN  (VARIABLE)\n         DC    CL7'MEMBER1'            PARM (MEMBER NAME)\n         SPACE 2\n*\n*        OVERRIDING DISPOSITION SPECIFICATION TEXT UNIT\n*\nTUDEAL05 DS    0CL7                    (VERB CODE 02)\n         DC    XL2'0005'               KEY\n         DC    XL2'0001'                #\n         DC    XL2'0001'               LEN\n         DC    XL1'08'                 PARM (KEEP)\nTUDLNG05 EQU   *-TUDEAL05\n         SPACE 2\n*\n*                                   (X'01' - UNCATLG  X'04' - DELETE\n*                                    X'02' - CATLG    X'08' - KEEP)\n         SPACE 2\n*\n*        UNALLOCATE OPTION SPECIFICATION TEXT UNIT\n*\nTUDEAL07 DS    0CL4                    (VERB CODE 07)\n         DC    XL2'0007'               KEY\n         DC    XL2'0000'                #\n*               ----                   LEN\n*               ----                   PARM\nTUDLNG07 EQU   *-TUDEAL07\n         SPACE 2\n********************************************************************\n*\n*        END DYNAMIC UNALLOCATION TEXT UNITS\n*\n********************************************************************\n         EJECT\n********************************************************************\n*\n*        START DYNAMIC CONCATENATION TEXT UNITS\n*\n********************************************************************\n         SPACE 4\n*\n*        DDNAME SPECIFICATION TEXT UNIT\n*\nTUCONC01 DS    0C                      (VERB CODE 03)\n         DC    XL2'0001'               KEY\n         DC    XL2'0002'                #   (VARIABLE - # DDNAMES)\nTUCLNG01 EQU   *-TUCONC01\n         DC    XL2'0003'               LEN  (VARIABLE)\n         DC    CL3'DD2'                PARM (DDNAME)\n         SPACE 2\n********************************************************************\n*\n*        END DYNAMIC CONCATENATION TEXT UNITS\n*\n********************************************************************\n         EJECT\n********************************************************************\n*\n*        START DYNAMIC DECONCATENATION TEXT UNITS\n*\n* ******************************************************************\n         SPACE 4\n*\n*        DDNAME SPECIFICATION TEXT UNIT\n*\nTUDCON01 DS    0C                      (VERB CODE 04)\n         DC    XL2'0001'               KEY\n         DC    XL2'0001'               #\nTUDCLN01 EQU   *-TUDCON01\n         DC    XL2'0003'               LEN  (VARIABLE)\n         DC    CL3'DD1'                PARM (DDNAME)\n         SPACE 2\n********************************************************************\n*\n*        END DYNAMIC DECONCATENATION TEXT UNITS\n*\n********************************************************************\n         EJECT\n         LTORG\n         SPACE  4\nS99PASSF EQU   X'10'                   FULL PASSWORD PROTECTION\nS99RBLEN EQU   (S99RBEND-S99RB)\nZEROLNG  EQU   X'00'\nCLEARBYT EQU   X'00'\nRLYHEX02 EQU   X'02'\nRLYHEX03 EQU   X'03'\nRLYHEX04 EQU   X'04'\nRLYHEX05 EQU   X'05'\nRLYHEX0F EQU   X'0F'\n         EJECT\n* ****************************************************************** *\n*                                                                    *\n*        DSECTS                                                      *\n*                                                                    *\n* ****************************************************************** *\n         COPY  EQUATES                 COMMON EQUATES DEFINITIONS:\n         COPY  LINE                    LINE CONTROL BLOCK\n         COPY  MASTER                  MASTER CONTROL BLOCK:\n         COPY  SAVEAREA                SAVE AREA DEFINITIONS:\n         COPY  SVC99                   SVC 99 INTERAFACE PARAMETER LIST\n         SPACE 2                                                GP97240\nCAMSECT  DSECT ,             MAP GDG WORK AREA                  GP97240\nCAMDSN   DS    CL44' '       TRUE NAME AFTER LOCATE             GP97240\nCAMLST   CAMLST NAME,CAMDSN-CAMDSN,,CAMWORK-CAMWORK             GP97240\nCAMWORK  DS    34D           CATALOG WORK AREA                  GP97240\nCAMEND   EQU   *                                                GP97240\n         SPACE 1                                                GP97240\n         IEFZB4D0\n         IEFZB4D2\n         END   LNKS99\n./ ADD NAME=LOADZAPA 0100-02253-02253-1218-00003-00003-00000-GERHARD\n*  THIS MEMBER IS REFERENCED BY PROCEDURE ASMTRAUT\n*\nNAME TESTPGM\n./ ADD NAME=NETSDIAL,SSI=00088186\n*        NETSOL CONTROL CARDS TO REQUIRE LOGON ON DIAL-UP LINES. 88182\n*   NTO\nSETRANGE NT/NT LOGON\n*   3270 BSC DIAL-UP\nSETRANGE DA/DA LOGON                                            *89134\nSETRANGE DB/DB LOGON                                            *89134\nSETRANGE DC/DC LOGON                                            *89134\nSETRANGE DD/DD LOGON                                            *89134\n*\n*   PROTOCOL CONVERSION\n*\nSETRANGE PA/PA LOGON\nSETRANGE PB/PB LOGON\n*   OTHER REMOTES\nSETRANGE BR/BR LOGON                                            *90197\nSETRANGE CV/CV CMSVRU               * DEDICATED LINES FOR VOICE RESP.\nSETRANGE CS/CU LOGON\n./ ADD NAME=NETSFRA,SSI=00088218\n*        AUTO-LOGON FOR FRA ITT CONTROLLER\n*\nSETRANGE FR/FR     CICS\n./ ADD NAME=NETSINIT,SSI=00090344\nMSG\n*(5,62)\n*\n*CPU=438A                    A-SYSTEM ONLY FROM HERE ON          90344\nSETRANGE A3/A3 LOGON                                             90344\nSETLOGON A3C3 UNLOCK                                             90344\nSETLOGON A3C3 EXHI        COMMAND LOCK                           90344\n*ETLOGON A3C4 LOGON\n*\n*ETLOGON A3C6 UNLOCK\n*\nSETLOGON A3C7 UNLOCK\nSETLOGON A3C7 EXHI        COMMAND MON\n*\n*ETLOGON A3C8 UNLOCK\n*ETLOGON A3C8 EXHI        COMMAND CLO\n*ETLOGON A3C9 UNLOCK\n*ETLOGON A3C9 EXHI        COMMAND MCO\n*\n*ETLOGON A3DD LOGON\n*\n*\n*CPU=438B                    B-SYSTEM ONLY FROM HERE ON          90344\nSETRANGE B3/B3 LOGON                                             90344\nSETLOGON B3C3 UNLOCK                                             90344\nSETLOGON B3C3 EXHI        COMMAND LOCK                           90344\n*ETLOGON B3C4 LOGON\n*                                                                90344\n*                                                                90344\n*ETLOGON B3C6 UNLOCK\nSETLOGON B3C7 UNLOCK                                             90344\nSETLOGON B3C7 EXHI        COMMAND MON\nSETLOGON B3C8 UNLOCK\nSETLOGON B3C8 EXHI        COMMAND CLO\nSETLOGON B3C9 UNLOCK                                             90344\nSETLOGON B3C9 EXHI        COMMAND MCO\n*                                                                90344\n*ETLOGON B3CD LOGON                                              91072\n*ETLOGON B3CE LOGON\n*                                                                90344\n*                                                                90344\n*ETLOGON B3CF LOGON\n*ETLOGON B3D6 UNLOCK\n*ETLOGON B3D6 EXHI           COMMAND MON\n*ETLOGON B3D0 LOGON\n*                                                                90344\n*                                                                90344\n*ETLOGON B3D8 LOGON\n*                                                                90344\n*ETLOGON B3D9 LOGON                                              90344\nSETLOGON B3DC UNLOCK\nSETLOGON B3DC EXHI           COMMAND $PRT6\n*\n*CPU=                        ALL CPUS IN CONCATENATION (DEFAULT) 90344\n./ ADD NAME=NETSLA00,SSI=00088277\n*        AUTO-LOGON FOR ITT-A CONTROLLER\n*                                                                88277\nSETRANGE LA0/LA64  CICS\n*\n*\n*\nSETLOGON LA12 LOGON\nSETLOGON LA44 LOGON\nSETLOGON LA76 LOGON\nSETLOGON LAA8 LOGON\n*\n*\n*\n*\nSETLOGON LA07\nSETLOGON LA39\nSETLOGON LA08\nSETLOGON LA40\nSETLOGON LA25\nSETLOGON LA57\nSETLOGON LA30\nSETLOGON LA62\nSETLOGON LA33\n./ ADD NAME=NETSLB00,SSI=00088218\n*        AUTO-LOGON FOR ITT-B CONTROLLER\n*                                                                88218\nSETRANGE LB0/LB64  CICS\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\nSETLOGON LB11 LOGON\nSETLOGON LB43 LOGON\nSETLOGON LB27\nSETLOGON LB59\nSETLOGON LB26\nSETLOGON LB58\nSETLOGON LB33\nSETLOGON LB65\n./ ADD NAME=NETSLC00,SSI=00088218\n*        AUTO-LOGON FOR ITT-C CONTROLLER\n*                                                                88218\nSETRANGE LC0/LC64  CICS\n*\n*\n*\n*\n*\n*\n*\n*\nSETLOGON LC02\nSETLOGON LC34\nSETLOGON LC03\nSETLOGON LC35\nSETLOGON LC04\nSETLOGON LC36\nSETLOGON LC05\nSETLOGON LC37\nSETLOGON LC06\nSETLOGON LC38\nSETLOGON LC07\nSETLOGON LC39\nSETLOGON LC08\nSETLOGON LC40\nSETLOGON LC09\nSETLOGON LC41\nSETLOGON LC17\nSETLOGON LC49\nSETLOGON LC30\nSETLOGON LC62\nSETLOGON LC31\nSETLOGON LC63\nSETLOGON LC33\nSETLOGON LC65\n*\nSETLOGON LC04 LOGON\nSETLOGON LC36 LOGON\n*\n*\n*\n*\n*\n./ ADD NAME=NETSLD00,SSI=00089082\n*        AUTO-LOGON FOR ITT-D CONTROLLER                         87254\n*                                                                88218\nSETRANGE LD0/LD32  CICS\n*\nSETRANGE LD02/LD09 LOGON\nSETRANGE LD34/LD41 LOGON\nSETRANGE LD66/LD73 LOGON\nSETRANGE LD98/LD99 LOGON\nSETRANGE LDA0/LDA5 LOGON\nSETLOGON LD28\n*ETLOGON LD02\n*ETLOGON LD03 LOGON\n*ETLOGON LD04\n*ETLOGON LD05\n*ETLOGON LD06\n*ETLOGON LD07\n*ETLOGON LD08\n*ETLOGON LD09\nSETLOGON LD10\nSETLOGON LD11\nSETLOGON LD12\nSETLOGON LD14\nSETLOGON LD17\nSETLOGON LD18\nSETLOGON LD19\nSETLOGON LD20\nSETLOGON LD21\nSETLOGON LD22\nSETLOGON LD23\nSETLOGON LD24\nSETLOGON LD25\nSETLOGON LD33\n./ ADD NAME=NETSLE00,SSI=00091069\n*        AUTO-LOGON FOR ATT-E CONTROLLER                   AS OF 91069\n*                                                                88218\nSETRANGE LE/LE  LOGON                                            91069\nSETRANGE LE02/LE64 TCSPROD                                       91069\nSETRANGE LE66/LE96 TCSTEST                                       91069\n*\n*                                                                91052\nSETLOGON LE09  CICS                                              91069\nSETLOGON LE41  CICS                                              91069\nSETLOGON LE73  TCSPROD                                           91069\nSETLOGON LEA5  LOGON                                             91069\n*                                                                91069\nSETLOGON LE10  TCSPROD                                           91069\nSETLOGON LE42  TCSTEST                                           91069\n*                                                                91069\nSETLOGON LE11  TCSPROD                                           91069\nSETLOGON LE43  TCSTEST                                           91069\n*                                                                91069\n*                                                                91069\n*                                                                91069\n*                                                                91069\n*                                                                91069\n*                                                                91069\n*                                                                91069\n*                                                                91069\n*                                                                91069\n*                                                                91069\n./ ADD NAME=NEW41LNB,SSI=00091091\n*           JES2 RJE DEFINITIONS FOR 3081-2G SYSTEM B            86190\n*\n*CPU=308B                           CPU IDS FOR SMF STATISTICS\n&NUMLNES=24           WAS * 3 *                                  89113\n&NUMRJE=125\n*&BSCCPU=YES\n*&BSC2770=YES\n*&BSC2780=YES\n*&BSC3780=YES\n*&BSHPRES=YES\n*&BSHTAB=YES\n*$DELAYTM=100       MICROSECONDS\n&MLBFSIZ=400\n&TPBFSIZ=520\n&BSVBOPT=YES\n*&NUMTPPR=10\n*&NUMTPPU=10\n*&NUMTPRD=10\n&NUMTPBF=60     # TP BUFFERS\n*\n*\n*\n*\n*\nDESTID NAME=Z3270LOW,DEST=R17     328X REMOTE RANGE START\nDESTID NAME=Z3270HIG,DEST=R24     328X REMOTE RANGE END          89113\n*ESTID NAME=Z3270TST,DEST=R17         GTF/VTAM DEBUGGING\n*\n*\n*\n*\n*\n*         UCB ADDRESS:  0AC-0AF    ***  BSC1  DIRECT LINES  ***\n*\nLINE1    UNIT=5A0,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE2    UNIT=5A1,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE3    UNIT=5A2,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE4    UNIT=5A3,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE5    UNIT=5A4,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE6    UNIT=5A5,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE7    UNIT=5A6,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE8    UNIT=5A7,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE9    UNIT=5A8,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE10   UNIT=5A9,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE11   UNIT=5AA,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE12   UNIT=5AB,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE13   UNIT=5AC,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\nLINE14   UNIT=5AD,CODEA,HDUPLEX,LOWSPEED,IFACEA,ADISCON,EBCDIC,TRANSP\n************ BARR/SNA-RJE LINE(S) *****************************  90136\nLINE15   UNIT=SNA            C.M.S. MULTIPLEXOR PORT #1          90142\nRMT15    LUTYPE1,BUFSIZE=512,CMPCT,COMP,CONSOLE, MFORM=J,              *\n               NUMRD=2,NUMPR=6,NUMPU=1,SETUPHDR,LINE=15          91087\nR15.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=15,PRIOINC=0     90142\nR15.RD1  PRIOLIM=10,PUDEST=15                                    90142\nR15.RD2  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=15,PRIOINC=0     90142\nR15.RD2  PRIOLIM=10,PUDEST=15                                    90142\nR15.PR1  CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1         91091\nR15.PR2  CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1         91091\nR15.PR3  CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1         91091\nR15.PR4  CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1         91091\nR15.PR5  CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1         91091\nR15.PR6  CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1         91091\nR15.PR7  CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1         91091\nR15.PU1        SELECT=PUNCH1                                     90142\nLINE16   UNIT=SNA            NCP22 (DIRECT LINK)                 90136\nRMT16    LUTYPE1,BUFSIZE=512,CMPCT,COMP,CONSOLE, MFORM=J,              *\n               NUMPR=1,NUMPU=1,SETUPHDR                          90136\nR16.PR1        CKPTLNS=66,CKPTPGS=10,PRWIDTH=255,SELECT=PRINT1   90136\nR16.PU1        SELECT=PUNCH1                                     90136\n********** VTAM LINES (17-24 327X ATTACHED PRINTERS)             89113\nLINE17   UNIT=SNA            IBM 6262 IN COMPUTER CENTER         89113\nLINE18   UNIT=SNA                                                89113\nLINE19   UNIT=SNA                                                89113\nLINE20   UNIT=SNA                                                89113\nLINE21   UNIT=SNA                                                89113\nLINE22   UNIT=SNA                                                89113\nLINE23   UNIT=SNA                                                89113\nLINE24   UNIT=SNA                                                89113\n*\n************REMOTE1  MARK-SENSE READER (B COATES) 2/3/86\nRMT1     3780,BLOCKED,VARIABLE,NUMPR=0,NUMPU=0,TABS,DISCINTV=1200\nRMT1     NUMRD=1,PASSWORD=DIALTYME\nR1.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=0,PRIOINC=0\nR1.RD1   PRIOLIM=10,PUDEST=0\n*1.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE2\nRMT2     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT2     NUMRD=1,PASSWORD=DIALTYME\nR2.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=2,PRIOINC=0\nR2.RD1   PRIOLIM=10,PUDEST=0\nR2.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE3\nRMT3     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT3     NUMRD=1,PASSWORD=DIALTYME\nR3.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=3,PRIOINC=0\nR3.RD1   PRIOLIM=10,PUDEST=0\nR3.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE4\nRMT4     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT4     NUMRD=1,PASSWORD=DIALTYME\nR4.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=4,PRIOINC=0\nR4.RD1   PRIOLIM=10,PUDEST=0\nR4.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE5\nRMT5     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT5     NUMRD=1,PASSWORD=DIALTYME\nR5.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=5,PRIOINC=0\nR5.RD1   PRIOLIM=10,PUDEST=0\nR5.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE6\nRMT6     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT6     NUMRD=1,PASSWORD=DIALTYME\nR6.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=6,PRIOINC=0\nR6.RD1   PRIOLIM=10,PUDEST=0\nR6.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE7\nRMT7     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT7     NUMRD=1,PASSWORD=DIALTYME\nR7.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=7,PRIOINC=0\nR7.RD1   PRIOLIM=10,PUDEST=0\nR7.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE8\nRMT8     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT8     NUMRD=1,PASSWORD=DIALTYME\nR8.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=8,PRIOINC=0\nR8.RD1   PRIOLIM=10,PUDEST=0\nR8.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE9\nRMT9     2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT9     NUMRD=1,PASSWORD=DIALTYME\nR9.RD1   CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=9,PRIOINC=0\nR9.RD1   PRIOLIM=10,PUDEST=0\nR9.PR1   OPERATOR,CLASS=A,START,PRWIDTH=132\n*MT10    LUTYPE1,LINE=10,LUNAME=P00B,NUMRD=0,SETUPMSG\nRMT10    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT10    NUMRD=1,PASSWORD=DIALTYME\nR10.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=10,PRIOINC=0\nR10.RD1  PRIOLIM=10,PUDEST=0\nR10.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE11\nRMT11    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT11    NUMRD=1,PASSWORD=DIALTYME\nR11.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=11,PRIOINC=0\nR11.RD1  PRIOLIM=10,PUDEST=0\nR11.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE12\nRMT12    2780,BLOCKED,VARIABLE,NUMPR=1,NUMPU=0,MRF,DISCINTV=600\nRMT12    NUMRD=1,PASSWORD=DIALTYME\nR12.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=12,PRIOINC=0\nR12.RD1  PRIOLIM=10,PUDEST=0\nR12.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE13  WESTAT DIRECT LINE - CPU B ONLY (CMT 1B/0AC)\nRMT13    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI\nRMT13    NUMRD=1,LINE=13\nR13.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=13,PRIOINC=0\nR13.RD1  PRIOLIM=10,PUDEST=0\nR13.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE14   ACE DIRECT LINE - CPU B ONLY (CMT 1D/0AD) 85343\nRMT14    M20-5,CONSOLE,TRANSP,NUMPR=1,NUMPU=0,MULTI\nRMT14    NUMRD=1,LINE=14\nR14.RD1  CLASS=A,START,NOHOLD,MSGCLASS=A,PRDEST=14,PRIOINC=0\nR14.RD1  PRIOLIM=10,PUDEST=0\nR14.PR1  OPERATOR,CLASS=A,START,PRWIDTH=132\n************REMOTE17 AND UP IN MEMBER JES41RJE                   89113\n./ ADD NAME=PARMTZ   8000-10249-10249-1413-00001-00001-00000-GERHARD\nW,02.00.00\n./ ADD NAME=PGMTRACE 0100-02233-02233-2011-00004-00004-00000-GERHARD\nNAME  GO\nTRACE !                      * USE INVOKING PROGRAM NAME\nCOUNT 200000\nSTACK 10\n./ ADD NAME=PGMTREXH 8002-09066-12309-1531-00012-00004-00000-GERHARD\nNAME  EXHC*\nNAME  EXHD*\nTRACE !\nTRACE EXHAINIT\nTRACE EXHAINTS\nTRACE EXHAMODS\nTRACE EXHAREST\nTRACE EXHASLIB\nTRACE EXHATALK\nTRACE EXHAWORK\nCOUNT 200000\nSTACK 10\n./ ADD NAME=PROG00   8000-06292-06292-1551-00016-00016-00000-GERHARD\n@DCBEXIT                     GENERALIZED DCB EXIT\n@FORMATS                     OUTPUT FORMATTING\n@INPREAD                     INPUT READER\n@PARSER                      STRING PARSING\n@PRINTER                     GENERALIZED PRINT/PUNCH SERVICES\n@SERVICE                     SYSTEM SERVICES\n@SRVJES2                     JES2 SERVICES\n*IGC237                       (SVS?) APF LIBRARY GAME\nIGC00240                     MODJFCB SVC\nIGC0024A                     STORE CPUID\n*IGC0024G                     NOTIFY MILTEN/WYLBUR USER\nIGC251                       CPU TIME\nIGC0025C                     USER SMF RECORDS\nIGC0025F                     SVC FOR @SERVICE\nSVCMJFCB                     MODJFCB NON-SVC\nDELETE\n./ ADD NAME=RECV370  8001-06268-06268-2353-00001-00010-00000-GERHARD\nKBUGRECV\n./ ADD NAME=RMT370P1,SSI=00092023\n/*$PPR1\n/*$IPR1\n/*$TPR1,F=9876\n/*$SPR1\n/*$TPR1,S=Y,Q=ACHPX,F=AUTOM\n./ ADD NAME=SCHEDA2\n /*                  EXHIBIT                                         */\nPPT PGMNAME(EXHI)                      /* PROGRAM NAME               */\n    CANCEL                             /* MAY BE CANCELLED       */\n    KEY(0)                             /* PROTECTION KEY             */\n    NOSWAP                             /* NON-SWAPPABLE              */\n    PRIV                               /* PRIVILEGED                */\n    PASS                               /* NO PASSWORD BYPASS         */\n    SYST                               /* SYSTEM TASK , NOT TIMED    */\n    AFF(NONE)                          /* NO PROCESSOR AFFINITY      */\nPPT PGMNAME(EXHABASE)                  /* PROGRAM NAME               */\n    CANCEL                             /* MAY BE CANCELLED       */\n    KEY(0)                             /* PROTECTION KEY             */\n    NOSWAP                             /* NON-SWAPPABLE              */\n    PRIV                               /* PRIVILEGED                */\n    PASS                               /* NO PASSWORD BYPASS         */\n    SYST                               /* SYSTEM TASK , NOT TIMED    */\n    AFF(NONE)                          /* NO PROCESSOR AFFINITY      */\nPPT PGMNAME(EXHASLIB)                  /* PROGRAM NAME               */\n    CANCEL                             /* MAY BE CANCELLED       */\n    KEY(0)                             /* PROTECTION KEY             */\n    NOSWAP                             /* NON-SWAPPABLE              */\n    PRIV                               /* PRIVILEGED                */\n    PASS                               /* NO PASSWORD BYPASS         */\n    SYST                               /* SYSTEM TASK , NOT TIMED    */\n    AFF(NONE)                          /* NO PROCESSOR AFFINITY      */\n /*                  BLOCKPRT (ERROR IN SETPRT SVC)                  */\nPPT PGMNAME(BLOCKPRT)                  /* PROGRAM NAME               */\n    CANCEL                             /* MAY BE CANCELLED       */\n    KEY(5)                             /* PROTECTION KEY             */\n    NOSWAP                             /* NON-SWAPPABLE              */\n    PRIV                               /* PRIVILEGED                */\n    PASS                               /* NO PASSWORD BYPASS         */\n    AFF(NONE)                          /* NO PROCESSOR AFFINITY      */\n /*                  NETWORK (VTAM) SUPPORT                          */\nPPT PGMNAME(NETINIT)                   /* PROGRAM NAME               */\n    CANCEL                             /* MAY BE CANCELLED       */\n    NOSWAP                             /* NON-SWAPPABLE              */\n    PRIV                               /* PRIVILEGED                */\n    PASS                               /* NO PASSWORD BYPASS         */\n    SYST                               /* SYSTEM TASK , NOT TIMED    */\n    AFF(NONE)                          /* NO PROCESSOR AFFINITY      */\nPPT PGMNAME(NETKERM)                   /* PROGRAM NAME               */\n    CANCEL                             /* MAY BE CANCELLED       */\n    NOSWAP                             /* NON-SWAPPABLE              */\n    PRIV                               /* PRIVILEGED                */\n    PASS                               /* NO PASSWORD BYPASS         */\n    SYST                               /* SYSTEM TASK , NOT TIMED    */\n    AFF(NONE)                          /* NO PROCESSOR AFFINITY      */\nPPT PGMNAME(NETOP)                     /* PROGRAM NAME               */\n    CANCEL                             /* MAY BE CANCELLED       */\n    NOSWAP                             /* NON-SWAPPABLE              */\n    PRIV                               /* PRIVILEGED                */\n    PASS                               /* NO PASSWORD BYPASS         */\n    SYST                               /* SYSTEM TASK , NOT TIMED    */\n    AFF(NONE)                          /* NO PROCESSOR AFFINITY      */\nPPT PGMNAME(NETSOL70)                  /* PROGRAM NAME               */\n    CANCEL                             /* MAY BE CANCELLED       */\n    NOSWAP                             /* NON-SWAPPABLE              */\n    PRIV                               /* PRIVILEGED                */\n    PASS                               /* NO PASSWORD BYPASS         */\n    SYST                               /* SYSTEM TASK , NOT TIMED    */\n    AFF(NONE)                          /* NO PROCESSOR AFFINITY      */\n./ ADD NAME=SETCLOCK,SSI=00087252\nMAXCPU          = 02                                             87252\nDISCONNECT_TIME = 050000                                         87252\nLONG_WAIT       = 030000                                         87252\nTRACK_WAIT      = 0500                                           87252\nSEEK_TIME       = 0003                                           87252\n./ ADD NAME=SMFDUMP  0100-04041-04041-1432-00005-00005-00000-GERHARD\n INDD(MAN3,OPTIONS(ALL))\n INDD(MAN2,OPTIONS(ALL))\n INDD(MAN1,OPTIONS(ALL))\n OUTDD(DUMPOUT,TYPE(0:255))\n SID(SYSA)\n./ ADD NAME=SMFDUMPX 0100-04044-04044-1722-00003-00003-00000-GERHARD\n INDD(MANY,OPTIONS(ALL))\n OUTDD(DUMPOUT,TYPE(0:255))\n SID(SYSA)\n./ ADD NAME=STOWCNTL,SSI=00083277\n  REPRO INFILE(FROMDD) OUTFILE(TODD)\n./ ADD NAME=SWYLINIT,SSI=00093001\n*\n*             SUPERWYLBUR 4.2 INITIALIZATION\n*\n*                  ALSO SEE MEMBERS SWYLVOLS AND SWYLLINE\n*\n*\nAPPLID=SUPWYL                ;*     VTAM APPLID\n*\n*ECURITY=RACF\nKEYOFF                       ;*  TEMP BYPASS\nWORD=BURD                    ;*  TESTING ONLY\n*\nRECOVER                      ;*  SET TO RECOVER AFTER FIRST RUN\nOPERATOR=N                   ;*  CHANGE LATER ?\nPRODUCTION                   ;*  STICKIER WTOS\nVTAM=64                      ;*  TOO MUCH OR TOO LITTLE\n*\nMAXINPUT=9920                ;*  80*62*2 FOR TALL 3290 SESSION\nPANMEM=40\n*ECEIVEANY=3\n*TAMSUBPOOL=15\n*\nKEYLEN=8                     ;* IF IT'S TOO LONG, USERS WRITE IT DOWN!\nRACFACCTNAME=ACCOUNT         ;*  HANDLED BY LOCAL CODE\nRACFAPPL=APPL                ;*  LOGON PERMISSION\n*ACFPSWDINT=0                ;*  NO PASSWORD EXPIRY\nRACFVOLAUTH=ALLOCATE         ;*\nRACFPRIVNAME=PRIVY           ;*\n*\nACCTLEN=8\nUSERLEN=7\nLIDORDER=U\nLOG                          ;* SHOW LOGON/LOGOFF ON CONSOLE\nACCTPROMPT=' Account'\nUSERPROMPT=' User Id'\nPSWDPROMPT='Password'\n*\nDSORDER=UDA\nSTNDNAMES=Y                  ;*  NO DOS/VSE NAMES, ETC.\nDVOLUME=CATLG\n*ELPDSN\n*OGONDSN\nMAILDSN=MAIL\nMAILVOL=TSO002\nMAILMAX=100\nMAILCHK=N\nMAILCODE=N\n*ROMEM=PROFILE\nPUBPREFIX=SUPWYL.V42.PUBLIC\n*ECDSN\n*ECVOL\nRESVOL=CATLG\n*YLDSN=WYLIB\n*YLVOL=CATLG\n*\nBINLEN=4\nCCOMCHR=$\n*XITUJV=WYLUJVJ8             ;*  LOCAL CODE TO CHECK JOB OWNERSHIP\n*\nFETCHCLASS=*                 ;*  REMOTE\nLISTCLASS=A\nLASERCLASS=I\nPUNCHCLASS=B\n*\n*ETCHLIMIT=\nJACCTLEN=MIN=11\nJACCTLEN=MAX=32\nJOBCHECK\nJOBTRACE\nLISTFORM=STD\nLISTPROC=SWLISTOF\n*OFF=BATCH\nLPCLASS=O\nLPMSGCLASS=Z\n*\nRJE=J8\nRMTCHECK\nRUNON=Y\nSJOBSACCT=Y                  ;*  JQE ACCT\nSUGACCT=Z9040012\nSUGBIN=GYP\nSUGUSER=GERHARD\nULTRAIN=T11\n*\nGREETING='Public Interest Data SuperWylbur 4.2'\nRECALWAYS\nMAXDIS=20\nSORTMAX=10000\nTIMEOUT1=10\nTIMEOUT2=15\nTIMEOUT3=20\n*MFID=                       ;*  SMF RECORD TYPE\n*\n*\n*\n*\n*\n*\n*\n*\n./ ADD NAME=SWYLLINE,SSI=00092366\n                                                      OPER.TTY\n560  S  M37\n561  S  M37\n562  S  M37\n563  S  M37\n564  S  M37\n565  S  M37\n566  S  M37\n567  S  M37\n568  S  M37\n569  S  M37\n56A  S  M37\n56B  S  M37\n56C  S  M37\n56D  S  M37\n56E  S  M37\n56F  S  M37\n570  S  M37\n571  S  M37\n572  S  M37\n573  S  M37\n574  S  M37\n575  S  M37\n576  S  M37\n577  S  M37\n578  S  M37\n579  S  M37\n57A  S  M37\n57B  S  M37\n57C  S  M37\n57D  S  M37\n57E  S  M37\n57F  S  M37\n./ ADD NAME=SWYLVOLS,SSI=00092366\nBC0001   ANY\nBC0002   ANY\nCBT332             SYSTEM\nCICS21             SYSTEM\nCMC001   ANY\nCMC002   ANY\nCMC003   ANY\nCMC004   ANY\nCOMTEN             SYSTEM\nESP001             SYSTEM\nGRP001   READ      SYSTEM\nGRP002   READ      SYSTEM\nIGP001             SYSTEM\nLIBPAK   READ WRITE SYSTEM\nMPR001   ANY\nMVSB01   READ      SYSTEM\nMVSB02   READ      SYSTEM\nMVSB03   READ      SYSTEM\nMVSB04   READ      SYSTEM\nMVSB05   READ      SYSTEM\nMVSB06   READ      SYSTEM\nMVSB07   READ      SYSTEM\nMVSCAT             SYSTEM\nMVSDL1             SYSTEM\nMVSDL2             SYSTEM\nMVSRS1             SYSTEM\nMVSRS2             SYSTEM\nMVSSMP             SYSTEM\nNCS001   ANY\nNCS002   ANY\nNCS003   ANY\nNCS004   ANY\nPID001   ANY\nPID002   ANY\nPID003   ANY\nPID004   ANY\nPID005   ANY\nPID006   ANY\nPID007   ANY\nPID008   ANY\nPID009   ANY\nPID010   ANY\nSPULB1             SYSTEM\nTMSR50             SYSTEM\nTSO001   ANY PUBLIC\nWYL001   ANY PUBLIC\n./ ADD NAME=TCSPSTRT\n/*$VS,'S TCSPROD '\n./ ADD NAME=TCSPVERF,SSI=00091059\n VERIFY DATASET(TCS001.TEMP1)\n VERIFY DATASET(TCS001.TCSPRD.I.AUDTRL)\n VERIFY DATASET(TCS001.TCSPRD.I.CONTRL)\n VERIFY DATASET(TCS001.TCSPRD.I.DCALCT)\n VERIFY DATASET(TCS001.TCSPRD.I.DDETAL)\n VERIFY DATASET(TCS001.TCSPRD.I.DHOURC)\n VERIFY DATASET(TCS001.TCSPRD.I.DSALES)\n VERIFY DATASET(TCS001.TCSPRD.I.EMPLOY)\n VERIFY DATASET(TCS001.TCSPRD.I.FULFIL)\n VERIFY DATASET(TCS001.TCSPRD.I.INPUT1)\n VERIFY DATASET(TCS001.TCSPRD.I.INPUT2)\n VERIFY DATASET(TCS001.TCSPRD.I.IOELOG)\n VERIFY DATASET(TCS001.TCSPRD.I.JOURNL)\n VERIFY DATASET(TCS001.TCSPRD.I.MDETAL)\n VERIFY DATASET(TCS001.TCSPRD.I.MONITR)\n VERIFY DATASET(TCS001.TCSPRD.I.OCCTRL)\n VERIFY DATASET(TCS001.TCSPRD.I.PHONFL)\n VERIFY DATASET(TCS001.TCSPRD.I.PRPTCL)\n VERIFY DATASET(TCS001.TCSPRD.I.RECALL)\n VERIFY DATASET(TCS001.TCSPRD.I.RINDEX)\n VERIFY DATASET(TCS001.TCSPRD.I.RINDEX1.PATH1)\n VERIFY DATASET(TCS001.TCSPRD.I.RINDEX2.PATH2)\n VERIFY DATASET(TCS001.TCSPRD.I.RINDEX3.PATH3)\n VERIFY DATASET(TCS001.TCSPRD.I.RLLCTL)\n VERIFY DATASET(TCS001.TCSPRD.I.SINDEX)\n VERIFY DATASET(TCS001.TCSPRD.I.SINDEX1.PATH1)\n VERIFY DATASET(TCS001.TCSPRD.I.SINDEX2.PATH2)\n VERIFY DATASET(TCS001.TCSPRD.I.SINDEX3.PATH3)\n VERIFY DATASET(TCS001.TCSPRD.I.TCSSEX)\n VERIFY DATASET(TCS001.TCSPRD.I.TERMNL)\n VERIFY DATASET(TCS001.TCSPRD.I.TERMNL1.PATH1)\n VERIFY DATASET(TCS001.TCSPRD.S.TRANS1)\n VERIFY DATASET(TCS001.TCSPRD.S.TRANS2)\n VERIFY DATASET(TCS001.TCSPRD.I.VOLFIL)\n VERIFY DATASET(TCS001.TCSPRD.I.WDETAL)\n VERIFY DATASET(TCS001.TCSPRD.I.FCSTAT)\n VERIFY DATASET(TCS001.TCSPRD.I.TCSTABLE)\n VERIFY DATASET(TCS001.TCSPRD.I.TCSGROUP)\n VERIFY DATASET(TCS001.TCSPRD.I.FDHSTRY)\n VERIFY DATASET(TCS001.TCSPRD.I.ZIPCDE)\n VERIFY DATASET(TCS001.TCSPRD.I.BUDGET)\n VERIFY DATASET(TCS001.TCSPRD.I.QTETBLHS)\n VERIFY DATASET(TCS001.TCSPRD.I.GRPEEUPD)\n./ ADD NAME=TCSTSTRT\n/*$VS,'S TCSTEST '\n./ ADD NAME=TCSTVERF\n  VERIFY DATASET(TCS001.TEST.TEMP1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.AUDTRL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.BOLEAN)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.CONTRL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DCALCT)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DICTFL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DICTFL1.PATH1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DICTFL2.PATH2)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DCTWRK)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DCTHDR)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DCTHDR1.PATH1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DHOURC)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DDETAL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.DSALES)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.EMPLOY)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.FULFIL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.HEADER)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.INPUT1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.IOELOG)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.INPUT2)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.JOURNL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.MDETAL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.MONITR)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.OCCTRL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.PHONFL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.PRPTCL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.RANGFL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.RECALL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.RINDEX)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.RINDEX1.PATH1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.RINDEX2.PATH2)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.RINDEX3.PATH3)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.RLLCTL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.ROWCOL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.ROWCOL1.PATH1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.SCRIPT)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.SCSTAT)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.SINDEX)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.SINDEX1.PATH1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.SINDEX2.PATH2)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.SINDEX3.PATH3)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.TCSSEX)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.TERMNL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.TERMNL1.PATH1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.S.TRANS1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.S.TRANS2)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.VIEWFL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.VIEWFL1.PATH1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.VIEWFL2.PATH2)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.VOLFIL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.WDETAL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.FORMHD)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.FORMHD1.PATH1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.FORMRC)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.FORMRC1.PATH1)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.FORM)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.FORMBL)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.FCSTAT)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.FMSTAT)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.TCSTABLE)\n  VERIFY DATASET(TCS001.TEST.RNDPRD.I.TCSGROUP)\n./ ADD NAME=THIS     8000-05305-05305-2031-00001-00001-00000-GERHARD\n*THIS*\n./ ADD NAME=TSOKEY00 8000-04303-04303-0431-00010-00010-00000-GERHARD\nUSERMAX=8,                       /* MAXIMUM USERS                    */\nRECONLIM=60,                     /* MAXIMUM DISCONNECT MINUTES       */\nBUFRSIZE=132,                    /* VTIOC BUFFER SIZE                */\nHIBFREXT=13200,                  /* MAX BUFFERS BEFORE SWAP OUT      */\nLOBFREXT=6600,                   /* MIMIMUM BUFFERS BEFORE SWAP IN   */\nMODE=NOBREAK,                    /* KEYBOARD LOCK OPTION             */\nMODESW=NO,                       /* MODESWITCH FROM TERMINAL OPTION  */\nCHNLEN=4,                        /* NO. OF RU'S PER CHAIN            */\nCONFTXT=NO,                      /* ALLOW VTAM TRACING               */\nSCRSIZE=1920                     /* MAXIMUM SCREEN SIZE              */\n./ ADD NAME=TSSOPARM 8000-05188-05188-1531-00080-00080-00000-GERHARD\n***********************************************************************\n* THIS IS A TYPICAL TSSO PARAMETER DECK FOR A TYPICAL SYSTEM. THE     *\n* DOCUMENTATION IS   IN \"TSSO SYSTEM PROGRAMMERS GUIDE- RELEASE 4.3   *\n* THESE VALUES SHOULD WORK AS DEFAULTS.                               *\n* NOTE THAT THE ONLY NEW PARAMETER IN TSSO 4.3 IS THE NUMCONS PARM.   *\n***********************************************************************\nNONSWAP=Y\n************************************************************\n* TSSO WILL BE RUNNING NON-SWAPPABLE                       *\n************************************************************\n*\nTABLE=AOFIVP\n************************************************************\n* THE TABLE NAME FOR TSSO AOF WILL BE AOFIVP               *\n************************************************************\n*\nRACFID=IBMUSER\n************************************************************\n* TSSO WILL ASSUME A RACF USERID OF \"TSSO\" ON STARTUP      *\n************************************************************\n*\nSRC=#\n************************************************************\n* THE COMMAND RECOGNITION CHARACTER IS A POUND SIGN ('#')  *\n************************************************************\n*\nMAXCMDS=15\n************************************************************\n* TSSO WILL HANDLE AT MOST 15 SIMULTANEOUS COMMANDS        *\n************************************************************\n*\nMAXWTO=250\n************************************************************\n* TSSO WILL ISSUE AT MOST 250 WTOS FOR ANY ONE COMMAND     *\n************************************************************\n*\nPROMPT=NO\n************************************************************\n* DO NOT PROMPT THE MVS OPERATOR FOR ADDITIONAL TSSO       *\n* PARAMETERS                                               *\n************************************************************\n*\nSECSYS=RACF\n***********************************************************************\n* THE SECURITY SYSTEM IN USE WILL BE THE RESOURCE ACCESS CONTROL      *\n* FACILITY.                                                           *\n***********************************************************************\n*\nSECLEVEL=MINIMAL\n***********************************************************************\n* WE WILL BE USING THE \"MINIMAL\" LEVEL OF SECURITY, SO YOU CAN PHASE  *\n* IN CONSOLE SECURITY AT A LATER DATE.                                *\n***********************************************************************\n*\nSUBSYS 9 = TSSOSS09\n***********************************************************************\n* THE \"TSSOSS09\" ROUTINE, SUPPLIED WITH TSSO, WILL BE PROCESSING      *\n* THE WTO AND WTOR MESSAGES WHEN AOF IS ACTIVE. ANY OTHER SELECTION   *\n* MAY CAUSE TSSO TO FAIL.                                             *\n***********************************************************************\n*\nSUBSYS 10 = TSSOSS10\n***********************************************************************\n* THE \"TSSOSS10\" ROUTINE, SUPPLIED WITH TSSO, WILL BE PROCESSING      *\n* THE MVS AND SUBSYSTEM COMMANDS. ANY OTHER SELECTION MAY MAKE TSSO   *\n* FAIL.                                                               *\n***********************************************************************\n*\nTIMEOUT = 30\n***********************************************************************\n* IF THE SECLEVEL PARAMETER IS EVER SET TO \"MAX\", CONSOLES WILL TIME  *\n* OUT AFTER THIRTY MINUTES OF INACTIVITY...                           *\n***********************************************************************\n*\nNUMCONS = 10 DEDICATE\n***********************************************************************\n* TSSO WILL HAVE 10 SUBSYSTEM CONSOLES AT ITS DISPOSAL. ONE OF THESE  *\n* CONSOLES WILL BE DEDICATED TO THE TSSO ADDRESS SPACE.               *\n***********************************************************************\nEND\n./ ADD NAME=U01JS3MG,SSI=00084359\nIAT5210 007000X JES3 SCRATCH RESTRICTION                                000100\nIAT5624 007001X JES3 SCRATCH RESTRICTION                                000200\n./ ADD NAME=U01MVSMG,SSI=00084359\nIEC101A 000002X RESTRICT SCRATCH RANGE                                  000100\nIEC501A 000003X RESTRICT SCRATCH RANGE                                  000200\nIEC501E 000004X RESTRICT SCRATCH RANGE                                  000300\nIEF233A 000005X RESTRICT SCRATCH RANGE                                  000400\nIEF233D 000006X RESTRICT SCRATCH RANGE                                  000500\nIEC704A 000100X THIRD REPLY                                             000600\n./ ADD NAME=U01NSM00,SSI=00084359\n*                                                                 40457 000100\n*        DUMMY MEMBER                                             40457 000200\n*                                                                 40457 000300\n./ ADD NAME=U01OPT00,SSI=00084359\nNODE    Z908                                        NOT USED IN TMS 4.7 000100\nDSN     TMSDISP                                     NOT USED IN TMS 4.7 000200\nDSSN    TMSDSS                                      NOT USED IN TMS 4.7 000300\nFN1                                      C o n s u m                    000400\nFN2      e r s   C o m p u t e r   S e r v i c e s,                     000500\nFN3       I n c.                                                        000600\nFA1                                                                     000700\nFA2             2 1 0 0   M   S t r e e t                               000800\nFA3                                                                     000900\nFC1                                                                     001000\nFC2      W a s h i n g t o n,   D. C.   2 0 0 3 7                       001100\nFC3                                                                     001200\nLC      61                                          NOT USED IN TMS 4.7 001300\nXSVC    251                                         NOT USED IN TMS 4.7 001400\nYSVC    252                                         NOT USED IN TMS 4.7 001500\nRC      0                                           NOT USED IN TMS 4.7 001600\nR9      0                                           NOT USED IN TMS 4.7 001700\nABE     3                                           NOT USED IN TMS 4.7 001800\nRR      0                                           NOT USED IN TMS 4.7 001900\nUC      5                                           NOT USED IN TMS 4.7 002000\nTW      9                                           NOT USED IN TMS 4.7 002100\nDCHG    YES                                                             002200\nLCHG    YES                                                             002300\nLAB     NO                                          NOT USED IN TMS 4.7 002400\nRO      NO                                          NOT USED IN TMS 4.7 002500\nUNCATA  NO                                          NOT USED IN TMS 4.7 002600\nCYD     NO                                          NOT USED IN TMS 4.7 002700\nMIXEXP  WARNING                                                         002800\nCDAY    TAPE                                        NOT USED IN TMS 4.7 002900\nCJOB    JOB                                         NOT USED IN TMS 4.7 003000\nRP      5                                           NOT USED IN TMS 4.7 003100\n./ ADD NAME=U01SCR00,SSI=00084359\n*                                                                 40457 000100\n*        DUMMY MEMBER                                             40457 000200\n*                                                                 40457 000300\n./ ADD NAME=U01SYS00,SSI=00084359\nOPT=00         DEFAULT OPTIONS MEMBER                                   000100\nSCR=00         DEFAULT SCRATCH POOL DEFINITIONS                         000200\nNSM=00         DEFAULT SCRATCH POOL ASSIGNMENTS                         000300\n./ ADD NAME=VATLST00 8011-04314-10179-0214-00079-00051-00000-GERHARD\n*VlSer P A Type Mount              Comments\n*      0 - Permanently resident   1 - Reserved\n*        0 - Storage  1 - Public  2 - Private\n*\nCBTCAT,1,2,3350    ,N                  CBT Files (#0), contains SYS1.UCA\nCBT000,1,2,3350    ,N                  CBT Files (#1)\nCBT001,1,2,3350    ,N                  CBT Files (#2)\nCBT002,1,2,3350    ,N                  CBT Files (#3)\nCBT003,1,2,3350    ,N                  CBT Files (#4)\nCBT004,1,2,3350    ,N                  CBT Files (#5)\nCHEKPT,1,2,3350    ,Y                  BIGGER JES2 CHECKPOINT FILE\nCHEW00,1,2,3380    ,N                  Archived\nCHEW01,1,2,3380    ,N                    SYSOUT\nCLIP90,1,2,3390    ,N                    TESTING\nEDWARD,1,2,3390    ,N                    GCC, ETC FROM PAUL EDWARDS\nESA001,1,2,3380    ,N                  OS/390 STUFF\nEXPERT,1,2,3380    ,N        FOR COLLECTING C.B.T. SUBMISSIONS\nEXPORT,1,2,3350    ,N        FOR COLLECTING TURNKEY SUBMISSIONS\nHASP00,1,2,3330    ,N                  MVS 3.8 JES Spool Disk 1\nHASP01,1,2,3330    ,N                  MVS 3.8 JES Spool Disk 2\nIMPORT,1,2,2314    ,N        FOR DASDLOAD IMPORTED XMIT, ETC.\nMVSBAD,1,2,3390    ,N                  VANILLA BANDKE TURNKEY SYSTEM\nMVSCAT,0,2,3390    ,Y                  MVS Catalog volume\nMVSDLB,1,2,3350    ,Y                  MVS DLIB\nMVSNEW,1,2,3350    ,N                  ALTERNATE SYSTEM\nMVSOLD,1,2,3350    ,N                  VANILLA BANDKE TURNKEY SYSTEM\nMVSRES,0,2,3350    ,Y                  MVS 3.8 SYSRES\nOS3R5A,1,2,3390    ,N                        Goodies\nOS39D5,1,2,3390    ,N                        Goodies\nOS39H5,1,2,3380    ,N                        Goodies\nOS39R5,1,2,3390    ,N                        Goodies\nOS39SV,1,2,3390    ,N                        Goodies\nPAGE00,0,2,3340    ,Y                  MVS 3.8 Page Disk 1\nPAGE01,0,2,3340    ,Y                  MVS 3.8 Page Disk 2\nPAGE02,0,2,3340    ,Y                  MVS 3.8 Page Disk 3\nPGM001,1,2,3380    ,N                  Expert\nPGM002,1,2,3380    ,N                    System\nPGM003,1,2,3380    ,N                      Programming\nPGM004,1,2,3380    ,N                        Goodies\nPUB000,1,2,3350    ,Y                  TSO PACK 1, CONTAINS SYS1.UCAT.TS\nPUB001,1,0,3375    ,N                  TSO PACK 2\nPUB002,1,0,3380    ,N                  TSO PACK 3\nPUB003,1,2,3390    ,N                  TSO PACK 4\nP390DX,1,2,3390    ,N                        Goodies\nREL001,1,2,3380    ,N                  NetManage, Inc. products\nREL002,1,2,3380    ,N                  NetManage, Inc. products\nSCPMV1,1,2,3380    ,N                        Goodies\nSCPMV5,1,2,3380    ,N                        Goodies\nSCR501,1,2,3350    ,N                        Goodies\nSHARE1,1,2,3390    ,N                    SHARED WITH MVS/380\nSMP001,1,2,3350    ,Y                  System maintenance\nSMP002,1,2,3350    ,N                  System maintenance\nSMP003,1,2,3350    ,N                  System maintenance\nSMP004,1,2,3350    ,N                  System maintenance\nSORT00,0,2,2314    ,N                  Sort Volume 1\nSORT01,0,2,2314    ,N                  Sort Volume 2\nSORT02,0,2,2314    ,N                  Sort Volume 3\nSORT03,0,2,2314    ,N                  Sort Volume 3\nSORT04,0,2,2314    ,N                  Sort Volume 4\nSORT05,0,2,2314    ,N                  Sort Volume 5\nSORT06,0,2,2314    ,N                  Sort Volume 6\nSPOOL0,1,2,3350    ,Y                  BIGGER JES2 SPOOL PACK\nSPOOL1,1,2,3350    ,Y                  BIGGER JES2 SPOOL PACK\nSPOOL2,1,2,3350    ,Y                  BIGGER JES2 SPOOL PACK\nSPOOL3,1,2,3350    ,Y                  BIGGER JES2 SPOOL PACK\nSRCCAT,1,2,3350    ,Y                  MVS Source code\nSRC000,1,2,3350    ,N                  MVS Source code\nSRC001,1,2,3350    ,N                  MVS Source code\nSRC002,1,2,3350    ,N                  MVS Source code\nSRC003,1,2,3350    ,N                  MVS Source code\nSTART1,1,2,3330    ,N                  Starter Pack sysres volume\nSYSCPK,1,2,3350    ,Y                  JAY MOSELEY'S COMPILER PACK\nTEMP50,1,2,3350    ,N                        Goodies\nTEMP90,1,2,3390    ,N                        Goodies\nTESTER,1,2,3350    ,N        IPL AND OTHER TESTING\nWORK00,1,0,3350    ,N                  WORKPACK\nWORK01,1,0,3375    ,N                  WORKPACK\nWORK02,1,1,3380    ,N                  WORKPACK\nWORK03,1,1,3390    ,N                  WORKPACK\n./ ADD NAME=WYLBCMDA,SSI=00092260\n;\n;    OBS WYLBUR/MILTEN REL 8.1 STARTUP COMMANDS         9/92\n;        FOR X/A SYSTEM A\n;\n;    3 OF 3 (FOLLOWS WYLBINIT, WYLBLINA)\n;\n;    SYSTEM INITIALIZATION COMMANDS\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\nSET RMF OFF                        ; SET ON AFTER RMF START\nBEGIN WYLRCVY WAIT ABEND=DUMP      ; WAIT FOR RECOVERY TASK\nBEGIN WYLBUR ABEND=DUMP\n;\n;ET WORD MILTEN PRESTO             ;\n;\nATTACH ALL                         ; ATTACH ALL COMPONENTS\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\nOPEN VTAM APPLID=WYLBUR            ; OPEN WYLBUR TEST VTAM APPL\n;\n;BEGIN TSO SYNC                     ; IF WE EVER GET PASS-THROUGH\n;CALL TSO SET APPLROOT=TSWY         ; APPL NAME PREFIX\n;CALL TSO SET MAXSESS=10            ; MORE THAN NECESSARY ?\n;\n;BEGIN CICS SYNC                    ; A-SYSTEM ONLY\n;CALL CICS SET APPLROOT=Y           ; APPL NAME PREFIX\n;CALL CICS SET MAXSESS=4            ; IN-HOUSE ONLY\n;\nSET WTRACE OFF                     ; ON ONLY IN DEBUG VERSION\nSET CPULIM ON MON=10 INT=.5 PC=10  ; LIMIT CPU HOGGING\n;                                                                92260\n;                                                                92260\n BEGIN WYLKERM                      ; ENABLE KERMIT FILE TRANSFER\n;                                                                92260\n;                                                                92260\n./ ADD NAME=WYLBCMDB,SSI=00092354\n;\n;    OBS WYLBUR/MILTEN REL 8.1 STARTUP COMMANDS        12/92\n;        FOR X/A SYSTEM B\n;\n;    3 OF 3 (FOLLOWS WYLBINIT, WYLBLINB)\n;\n;    SYSTEM INITIALIZATION COMMANDS\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\nSET RMF OFF                        ; SET ON AFTER RMF START\nBEGIN WYLRCVY WAIT ABEND=DUMP      ; WAIT FOR RECOVERY TASK\nBEGIN WYLBUR ABEND=DUMP\n;\n;ET WORD MILTEN PRESTO             ;\n;\nATTACH ALL                         ; ATTACH ALL COMPONENTS\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\nOPEN VTAM APPLID=WYLBUR            ; OPEN WYLBUR TEST VTAM APPL\n;\n;BEGIN TSO SYNC                     ; IF WE EVER GET PASS-THROUGH\n;CALL TSO SET APPLROOT=TSWY         ; APPL NAME PREFIX\n;CALL TSO SET MAXSESS=10            ; MORE THAN NECESSARY ?\n;\n;BEGIN CICS SYNC                    ; A-SYSTEM ONLY\n;CALL CICS SET APPLROOT=Y           ; APPL NAME PREFIX\n;CALL CICS SET MAXSESS=4            ; IN-HOUSE ONLY\n;\nSET WTRACE OFF                     ; ON ONLY IN DEBUG VERSION\nSET CPULIM ON MON=10 INT=.5 PC=10  ; LIMIT CPU HOGGING\n;                                                                92260\n;                                                                92260\n BEGIN WYLKERM                      ; ENABLE KERMIT FILE TRANSFER\n;                                                                92260\n;                                                                92260\n./ ADD NAME=WYLBCRT,SSI=00086264\n;                         WYLBUR TEST SYSTEM INITIALIZATION COMMANDS\n;              THIS MEMBER IS USED TO SUPPORT 3270S ONLY WHILE\n;              THE COMTEN IS BEING TESTED.\n;\n;CPU=\nSET MSG1;   PLEASE LIST $SYS1.HASPMSG(CURRENT) - CHANGED MM/DD/YY\n;\nSET SMF ;                     WE ARE NOT A NON-PROFIT OUTFIT\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\n;\n;ET WORD MILTEN SYSTEMS      ; TESTED FOR IN MSSI\n;\nBEGIN WYLRCVY WAIT                 ; WAIT FOR RECOVERY TASK\n;\nBEGIN WYLBUR\n;\nATTACH CONS?                       ;  ATTACH ALL CONSOLES\nATTACH B?                          ;  ATTACH ALL 3270S           86264\n;\nSTART CONS?                        ;  START ALL CONSOLES\nSTART B?                           ;  START ALL CRTS             86264\n;\n;\n;\n./ ADD NAME=WYLBDEF,SSI=00083107\n;    WYLBUR DEFAULT SYSTEM INITIALIZATION COMMANDS\n;CPU=\nSET MSG1;   PLEASE LIST $SYS1.HASPMSG(CURRENT) - CHANGED MM/DD/YY\n;\nSET SMF ;                     WE ARE NOT A NON-PROFIT OUTFIT\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\n;\nBEGIN WYLRCVY WAIT                 ; WAIT FOR RECOVERY TASK\n;\nBEGIN WYLBUR\nBEGIN WYLKERM                      ; KERMIT FILE TRANSFER\nATTACH ALL                         ; ATTACH ALL COMPONENTS\n;\nSTART ALL                          ; START ALL ATTACHED COMPONENTS\n;\n;CPU=434A\n;ET WORD MILTEN PRESTO\n./ ADD NAME=WYLBINIT,SSI=00092260\n;\n;    OBS WYLBUR/MILTEN REL 8.1 BASIC INITIALIZATION          9/92\n;        FOR X/A SYSTEM A\n;\n;    TERMINAL GREETING MESSAGE (0-45 BYTES)\n;\nINIT INSTALN='Public Interest Data, Inc. - X/A Wylbur 8.1'\n;\n;\n;    SYSTEM CONSOLE DEFINITIONS\n;\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=SYSTEMS  ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPERATR  ;\nINIT CONSOLE=CONS2    TYPE=3277-2-CONSOLE ID=02  UID=OPERCRT  ;\nINIT CONSOLE=CONS3    TYPE=3277-2-CONSOLE ID=03  UID=OPERCRT  ;\n;\nINIT XTRASYS 4                   ; STARTABLE SUB-SYSTEMS\nINIT DYNAMNET=64                 ;UP TO 64 CONCURRENT VTAM SESSIONS\nINIT CDWAIT 9                    ;WAIT 9 SEC FOR SIGNOFF MSGS\nINIT MODE SPKA                     ; RUN IN SUPVSR STATE\n;\n;\n./ ADD NAME=WYLBLINA,SSI=00092259\n;        WYLBUR 8.1 LINE DEFINITIONS FOR ALL SYSTEMS             92259\n;\n;\n;CPU=                       ALL CPUS\n;        COMTEN TTY LINES (TILS CODE 'WYLA' AND 'WYLB')\n;\nNET LINE=WYLBUR60 TYPE=TTY  UCB=560 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR61 TYPE=TTY  UCB=561 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR62 TYPE=TTY  UCB=562 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR63 TYPE=TTY  UCB=563 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR64 TYPE=TTY  UCB=564 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR65 TYPE=TTY  UCB=565 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR66 TYPE=TTY  UCB=566 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR67 TYPE=TTY  UCB=567 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR68 TYPE=TTY  UCB=568 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR69 TYPE=TTY  UCB=569 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6A TYPE=TTY  UCB=56A CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6B TYPE=TTY  UCB=56B CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6C TYPE=TTY  UCB=56C CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6D TYPE=TTY  UCB=56D CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6E TYPE=TTY  UCB=56E CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6F TYPE=TTY  UCB=56F CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR70 TYPE=TTY  UCB=570 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR71 TYPE=TTY  UCB=571 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR72 TYPE=TTY  UCB=572 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR73 TYPE=TTY  UCB=573 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR74 TYPE=TTY  UCB=574 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR75 TYPE=TTY  UCB=575 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR76 TYPE=TTY  UCB=576 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR77 TYPE=TTY  UCB=577 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR78 TYPE=TTY  UCB=578 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR79 TYPE=TTY  UCB=579 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7A TYPE=TTY  UCB=57A CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7B TYPE=TTY  UCB=57B CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7C TYPE=TTY  UCB=57C CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7D TYPE=TTY  UCB=57D CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7E TYPE=TTY  UCB=57E CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7F TYPE=TTY  UCB=57F CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR80 TYPE=TTY  UCB=580 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR81 TYPE=TTY  UCB=581 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR82 TYPE=TTY  UCB=582 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR83 TYPE=TTY  UCB=583 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR84 TYPE=TTY  UCB=584 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR85 TYPE=TTY  UCB=585 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR86 TYPE=TTY  UCB=586 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR87 TYPE=TTY  UCB=587 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR88 TYPE=TTY  UCB=588 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR89 TYPE=TTY  UCB=589 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8A TYPE=TTY  UCB=58A CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8B TYPE=TTY  UCB=58B CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8C TYPE=TTY  UCB=58C CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8D TYPE=TTY  UCB=58D CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8E TYPE=TTY  UCB=58E CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8F TYPE=TTY  UCB=58F CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR90 TYPE=TTY  UCB=590 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR91 TYPE=TTY  UCB=591 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR92 TYPE=TTY  UCB=592 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR93 TYPE=TTY  UCB=593 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR94 TYPE=TTY  UCB=594 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR95 TYPE=TTY  UCB=595 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR96 TYPE=TTY  UCB=596 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR97 TYPE=TTY  UCB=597 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR98 TYPE=TTY  UCB=598 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\n;                                                                85034\n;        DIRECT CONNECT TTY LINES                                85034\n;\n;ET LINE=WYLBUR99 TYPE=IPC  UCB=599 CODE=ASCI FAC=SWI AUTO UTID=5150\n;ET LINE=WYLBUR9A TYPE=WYS  UCB=59A CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9B TYPE=WYS  UCB=59B CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9C TYPE=WYS  UCB=59C CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9D TYPE=WYS  UCB=59D CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9E TYPE=WY6  UCB=59E CODE=ASCI FAC=SWI AUTO UTID=WY60\n;ET LINE=WYLBUR9F TYPE=IPC  UCB=59F CODE=ASCI FAC=SWI   AUTO UTID=5150\n;ET LINE=WYLBURB0 TYPE=FOX  UCB=5B0 CODE=ASCI FAC=SWI   AUTO UTID=FOX\n;ET LINE=WYLBURB1 TYPE=IPC  UCB=5B1 CODE=ASCI FAC=SWI AUTO UTID=5150\n;ET LINE=WYLBURB2 TYPE=FOX  UCB=5B2 CODE=ASCI FAC=SWI   AUTO UTID=FOX\n;ET LINE=WYLBURB3 TYPE=WYS  UCB=5B3 CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBURB4 TYPE=TEK  UCB=5B4 CODE=ASCI FAC=SWI   AUTO UTID=TEK\n;ET LINE=WYLBURB5 TYPE=DEC  UCB=5B5 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;ET LINE=WYLBURB6 TYPE=DEC  UCB=5B6 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;ET LINE=WYLBURB7 TYPE=DEC  UCB=5B7 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;\n;\n;    LOCAL 3270 TERMINAL DEFINITIONS\n;CPU=A158434A\n;ET TERM=L0C2 TYPE=3277-2-TWKB UCB=0C2 FAC=LOC UTID=3277\n;ET TERM=L0C3 TYPE=3277-2-TWKB UCB=0C3 FAC=LOC UTID=3277\n;ET TERM=L0C6 TYPE=3277-2-TWKB UCB=0C6 FAC=LOC UTID=3277\n;ET TERM=A3C7 TYPE=3278-2-TWKB UCB=3C7 FAC=LOC UTID=3277\n;ET TERM=A3C8 TYPE=3278-4-TWKB UCB=3C8 FAC=LOC UTID=3277\n;ET TERM=L0DA TYPE=3277-2-TWKB UCB=0DA FAC=LOC UTID=3277\n;ET TERM=L0DB TYPE=3277-2-TWKB UCB=0DB FAC=LOC UTID=3277\n;ET TERM=L0E0 TYPE=3277-2-TWKB UCB=0E0 FAC=LOC UTID=3277\n;ET TERM=L0E7 TYPE=3277-2-TWKB UCB=0E7 FAC=LOC UTID=3277\n;ET TERM=LCUU TYPE=3277-2-TWKB UCB=CUU FAC=LOC UTID=3277\n;ET TERM=A3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=A3CB TYPE=3278-2-TWKB UCB=3CB FAC=LOC UTID=3277\n;ET TERM=A3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\n;ET TERM=A3D6 TYPE=3278-2-TWKB UCB=3D6 FAC=LOC UTID=3277\n;ET TERM=A3D7 TYPE=3278-2-TWKB UCB=3D7 FAC=LOC UTID=3277\n;ET TERM=L3D8 TYPE=3278-2-TWKB UCB=3D8 FAC=LOC UTID=3277\n;ET TERM=L3D9 TYPE=3278-2-TWKB UCB=3D9 FAC=LOC UTID=3277\n;ET TERM=L3DB TYPE=3278-2-TWKB UCB=3DB FAC=LOC UTID=3277\n;ET TERM=L3DC TYPE=3278-2-TWKB UCB=3DC FAC=LOC UTID=3277\n;ET TERM=L3DD TYPE=3278-2-TWKB UCB=3DD FAC=LOC UTID=3277\n;ET TERM=L3E0 TYPE=3278-2-TWKB UCB=3E0 FAC=LOC UTID=3277\n;CPU=308BH158IPO1\n;ET TERM=B3C8 TYPE=3278-4-TWKB UCB=3C8 FAC=LOC UTID=3277\n;ET TERM=L3C5 TYPE=3278-2-TWKB UCB=3C5 FAC=LOC UTID=3277\n;ET TERM=B3C6 TYPE=3278-2-TWKB UCB=3C6 FAC=LOC UTID=3277\n;ET TERM=L3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=B3CD TYPE=3278-2-TWKB UCB=3CD FAC=LOC UTID=3277  ; BRON\n;ET TERM=B3CE TYPE=3278-2-TWKB UCB=3CE FAC=LOC UTID=3277\n;ET TERM=B3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\n;ET TERM=B3D1 TYPE=3278-2-TWKB UCB=3D1 FAC=LOC UTID=3277\n;ET TERM=B3D2 TYPE=3278-2-TWKB UCB=3D2 FAC=LOC UTID=3277\n;\n;    BSC MULTI-POINT LINE DEFINITIONS\n;\n;CPU=NONE\n;ET LINE=R029     TYPE=BSC-MP UCB=529 CODE=EBCD FAC=REM\n;ET STA=R029A  TYPE=3271-2     PC=40 SC=60 LINE=R029     FAC=REM\n;ET TERM=R029A1   TYPE=3277-2-TWKB DC=40 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A2   TYPE=3277-2-TWKB DC=C1 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A3   TYPE=3277-2-TWKB DC=C2 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A4   TYPE=3277-2-TWKB DC=C3 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A5   TYPE=3277-2-TWKB DC=C4 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A6   TYPE=3277-2-TWKB DC=C5 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A7   TYPE=3277-2-TWKB DC=C6 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A8   TYPE=3277-2-TWKB DC=C7 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A9   TYPE=3277-2-TWKB DC=C8 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A10  TYPE=3277-2-TWKB DC=C9 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A11  TYPE=3277-2-TWKB DC=4A UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A12  TYPE=3277-2-TWKB DC=4B UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A13  TYPE=3277-2-TWKB DC=4C UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A14  TYPE=3277-2-TWKB DC=4D UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A15  TYPE=3277-2-TWKB DC=4E UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A16  TYPE=3277-2-TWKB DC=4F UTID=3277 STA=R029A  FAC=REM\n;\n;\n;\n;\n;\n;\n;\n;\n./ ADD NAME=WYLBLINB,SSI=00092354\n;        WYLBUR 8.1 LINE DEFINITIONS FOR ALL SYSTEMS             92259\n;\n;\n;CPU=                       ALL CPUS\n;        COMTEN TTY LINES (TILS CODE 'WYLA' AND 'WYLB')\n;\nNET LINE=WYLBUR60 TYPE=TTY  UCB=560 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR61 TYPE=TTY  UCB=561 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR62 TYPE=TTY  UCB=562 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR63 TYPE=TTY  UCB=563 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR64 TYPE=TTY  UCB=564 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR65 TYPE=TTY  UCB=565 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR66 TYPE=TTY  UCB=566 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR67 TYPE=TTY  UCB=567 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR68 TYPE=TTY  UCB=568 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR69 TYPE=TTY  UCB=569 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6A TYPE=TTY  UCB=56A CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6B TYPE=TTY  UCB=56B CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6C TYPE=TTY  UCB=56C CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6D TYPE=TTY  UCB=56D CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6E TYPE=TTY  UCB=56E CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6F TYPE=TTY  UCB=56F CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR70 TYPE=TTY  UCB=570 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR71 TYPE=TTY  UCB=571 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR72 TYPE=TTY  UCB=572 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR73 TYPE=TTY  UCB=573 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR74 TYPE=TTY  UCB=574 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR75 TYPE=TTY  UCB=575 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR76 TYPE=TTY  UCB=576 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR77 TYPE=TTY  UCB=577 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR78 TYPE=TTY  UCB=578 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR79 TYPE=TTY  UCB=579 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7A TYPE=TTY  UCB=57A CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7B TYPE=TTY  UCB=57B CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7C TYPE=TTY  UCB=57C CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7D TYPE=TTY  UCB=57D CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7E TYPE=TTY  UCB=57E CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7F TYPE=TTY  UCB=57F CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR80 TYPE=TTY  UCB=580 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR81 TYPE=TTY  UCB=581 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR82 TYPE=TTY  UCB=582 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR83 TYPE=TTY  UCB=583 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR84 TYPE=TTY  UCB=584 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR85 TYPE=TTY  UCB=585 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR86 TYPE=TTY  UCB=586 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR87 TYPE=TTY  UCB=587 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR88 TYPE=TTY  UCB=588 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR89 TYPE=TTY  UCB=589 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8A TYPE=TTY  UCB=58A CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8B TYPE=TTY  UCB=58B CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8C TYPE=TTY  UCB=58C CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8D TYPE=TTY  UCB=58D CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8E TYPE=TTY  UCB=58E CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8F TYPE=TTY  UCB=58F CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR90 TYPE=TTY  UCB=590 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR91 TYPE=TTY  UCB=591 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR92 TYPE=TTY  UCB=592 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR93 TYPE=TTY  UCB=593 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR94 TYPE=TTY  UCB=594 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR95 TYPE=TTY  UCB=595 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR96 TYPE=TTY  UCB=596 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR97 TYPE=TTY  UCB=597 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR98 TYPE=TTY  UCB=598 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\n;                                                                85034\n;        DIRECT CONNECT TTY LINES                                85034\n;\n;ET LINE=WYLBUR99 TYPE=IPC  UCB=599 CODE=ASCI FAC=SWI AUTO UTID=5150\n;ET LINE=WYLBUR9A TYPE=WYS  UCB=59A CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9B TYPE=WYS  UCB=59B CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9C TYPE=WYS  UCB=59C CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9D TYPE=WYS  UCB=59D CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9E TYPE=WY6  UCB=59E CODE=ASCI FAC=SWI AUTO UTID=WY60\n;ET LINE=WYLBUR9F TYPE=IPC  UCB=59F CODE=ASCI FAC=SWI   AUTO UTID=5150\n;ET LINE=WYLBURB0 TYPE=FOX  UCB=5B0 CODE=ASCI FAC=SWI   AUTO UTID=FOX\n;ET LINE=WYLBURB1 TYPE=IPC  UCB=5B1 CODE=ASCI FAC=SWI AUTO UTID=5150\n;ET LINE=WYLBURB2 TYPE=FOX  UCB=5B2 CODE=ASCI FAC=SWI   AUTO UTID=FOX\n;ET LINE=WYLBURB3 TYPE=WYS  UCB=5B3 CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBURB4 TYPE=TEK  UCB=5B4 CODE=ASCI FAC=SWI   AUTO UTID=TEK\n;ET LINE=WYLBURB5 TYPE=DEC  UCB=5B5 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;ET LINE=WYLBURB6 TYPE=DEC  UCB=5B6 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;ET LINE=WYLBURB7 TYPE=DEC  UCB=5B7 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;\n;\n;    LOCAL 3270 TERMINAL DEFINITIONS\n;CPU=A158434A\n;ET TERM=L0C2 TYPE=3277-2-TWKB UCB=0C2 FAC=LOC UTID=3277\n;ET TERM=L0C3 TYPE=3277-2-TWKB UCB=0C3 FAC=LOC UTID=3277\n;ET TERM=L0C6 TYPE=3277-2-TWKB UCB=0C6 FAC=LOC UTID=3277\n;ET TERM=A3C7 TYPE=3278-2-TWKB UCB=3C7 FAC=LOC UTID=3277\n;ET TERM=A3C8 TYPE=3278-4-TWKB UCB=3C8 FAC=LOC UTID=3277\n;ET TERM=L0DA TYPE=3277-2-TWKB UCB=0DA FAC=LOC UTID=3277\n;ET TERM=L0DB TYPE=3277-2-TWKB UCB=0DB FAC=LOC UTID=3277\n;ET TERM=L0E0 TYPE=3277-2-TWKB UCB=0E0 FAC=LOC UTID=3277\n;ET TERM=L0E7 TYPE=3277-2-TWKB UCB=0E7 FAC=LOC UTID=3277\n;ET TERM=LCUU TYPE=3277-2-TWKB UCB=CUU FAC=LOC UTID=3277\n;ET TERM=A3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=A3CB TYPE=3278-2-TWKB UCB=3CB FAC=LOC UTID=3277\n;ET TERM=A3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\n;ET TERM=A3D6 TYPE=3278-2-TWKB UCB=3D6 FAC=LOC UTID=3277\n;ET TERM=A3D7 TYPE=3278-2-TWKB UCB=3D7 FAC=LOC UTID=3277\n;ET TERM=L3D8 TYPE=3278-2-TWKB UCB=3D8 FAC=LOC UTID=3277\n;ET TERM=L3D9 TYPE=3278-2-TWKB UCB=3D9 FAC=LOC UTID=3277\n;ET TERM=L3DB TYPE=3278-2-TWKB UCB=3DB FAC=LOC UTID=3277\n;ET TERM=L3DC TYPE=3278-2-TWKB UCB=3DC FAC=LOC UTID=3277\n;ET TERM=L3DD TYPE=3278-2-TWKB UCB=3DD FAC=LOC UTID=3277\n;ET TERM=L3E0 TYPE=3278-2-TWKB UCB=3E0 FAC=LOC UTID=3277\n;CPU=308BH158IPO1\n;ET TERM=B3C8 TYPE=3278-4-TWKB UCB=3C8 FAC=LOC UTID=3277\n;ET TERM=L3C5 TYPE=3278-2-TWKB UCB=3C5 FAC=LOC UTID=3277\n;ET TERM=B3C6 TYPE=3278-2-TWKB UCB=3C6 FAC=LOC UTID=3277\n;ET TERM=L3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=B3CD TYPE=3278-2-TWKB UCB=3CD FAC=LOC UTID=3277  ; BRON\n;ET TERM=B3CE TYPE=3278-2-TWKB UCB=3CE FAC=LOC UTID=3277\n;ET TERM=B3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\n;ET TERM=B3D1 TYPE=3278-2-TWKB UCB=3D1 FAC=LOC UTID=3277\n;ET TERM=B3D2 TYPE=3278-2-TWKB UCB=3D2 FAC=LOC UTID=3277\n;\n;    BSC MULTI-POINT LINE DEFINITIONS\n;\n;CPU=NONE\n;ET LINE=R029     TYPE=BSC-MP UCB=529 CODE=EBCD FAC=REM\n;ET STA=R029A  TYPE=3271-2     PC=40 SC=60 LINE=R029     FAC=REM\n;ET TERM=R029A1   TYPE=3277-2-TWKB DC=40 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A2   TYPE=3277-2-TWKB DC=C1 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A3   TYPE=3277-2-TWKB DC=C2 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A4   TYPE=3277-2-TWKB DC=C3 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A5   TYPE=3277-2-TWKB DC=C4 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A6   TYPE=3277-2-TWKB DC=C5 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A7   TYPE=3277-2-TWKB DC=C6 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A8   TYPE=3277-2-TWKB DC=C7 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A9   TYPE=3277-2-TWKB DC=C8 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A10  TYPE=3277-2-TWKB DC=C9 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A11  TYPE=3277-2-TWKB DC=4A UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A12  TYPE=3277-2-TWKB DC=4B UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A13  TYPE=3277-2-TWKB DC=4C UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A14  TYPE=3277-2-TWKB DC=4D UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A15  TYPE=3277-2-TWKB DC=4E UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A16  TYPE=3277-2-TWKB DC=4F UTID=3277 STA=R029A  FAC=REM\n;\n;\n;\n;\n;\n;\n;\n;\n./ ADD NAME=WYLBLINE,SSI=00087077\n;CPU=438A438B\n;    OBS WYLBUR/MILTEN REL 5.0 INITIALIZATION DATASET   2/ 3/85\n;\n;    SYSTEM CONSOLE DEFINITIONS\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=*SYSTEM* ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPERATOR ;\nINIT CONSOLE=CONS2    TYPE=3215-CONSOLE   ID=02  UID=OPER3270 ;\nINIT CONSOLE=CONS3    TYPE=3277-2-CONSOLE ID=03  UID=OPERCRT2 ;\n;CPU=308BH158IPO1434A434C\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=*SYSTEM* ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPERCRT1 ;\nINIT CONSOLE=CONS2    TYPE=3277-2-CONSOLE ID=02  UID=OPERATOR ;\nINIT CONSOLE=CONS3    TYPE=3277-2-CONSOLE ID=03  UID=OPERCRT3 ;\nINIT CONSOLE=CONS4    TYPE=3277-2-CONSOLE ID=04  UID=OPERCRT4 ;\nINIT CONSOLE=CONS5    TYPE=3215-CONSOLE   ID=05  UID=OPERCONS ;\n;\n;CPU=                       ALL CPUS\n;        COMTEN TTY LINES (TILS CODE 'WYLA' AND 'WYLB')\n;\nNET LINE=WYLBUR60 TYPE=TTY  UCB=560 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR61 TYPE=TTY  UCB=561 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR62 TYPE=TTY  UCB=562 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR63 TYPE=TTY  UCB=563 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR64 TYPE=TTY  UCB=564 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR65 TYPE=TTY  UCB=565 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR66 TYPE=TTY  UCB=566 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR67 TYPE=TTY  UCB=567 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR68 TYPE=TTY  UCB=568 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR69 TYPE=TTY  UCB=569 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6A TYPE=TTY  UCB=56A CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6B TYPE=TTY  UCB=56B CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6C TYPE=TTY  UCB=56C CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6D TYPE=TTY  UCB=56D CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6E TYPE=TTY  UCB=56E CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR6F TYPE=TTY  UCB=56F CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR70 TYPE=TTY  UCB=570 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR71 TYPE=TTY  UCB=571 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR72 TYPE=TTY  UCB=572 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR73 TYPE=TTY  UCB=573 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR74 TYPE=TTY  UCB=574 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR75 TYPE=TTY  UCB=575 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR76 TYPE=TTY  UCB=576 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR77 TYPE=TTY  UCB=577 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR78 TYPE=TTY  UCB=578 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR79 TYPE=TTY  UCB=579 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7A TYPE=TTY  UCB=57A CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7B TYPE=TTY  UCB=57B CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7C TYPE=TTY  UCB=57C CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7D TYPE=TTY  UCB=57D CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7E TYPE=TTY  UCB=57E CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR7F TYPE=TTY  UCB=57F CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR80 TYPE=TTY  UCB=580 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR81 TYPE=TTY  UCB=581 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR82 TYPE=TTY  UCB=582 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR83 TYPE=TTY  UCB=583 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR84 TYPE=TTY  UCB=584 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR85 TYPE=TTY  UCB=585 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR86 TYPE=TTY  UCB=586 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR87 TYPE=TTY  UCB=587 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR88 TYPE=TTY  UCB=588 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR89 TYPE=TTY  UCB=589 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8A TYPE=TTY  UCB=58A CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8B TYPE=TTY  UCB=58B CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8C TYPE=TTY  UCB=58C CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8D TYPE=TTY  UCB=58D CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8E TYPE=TTY  UCB=58E CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR8F TYPE=TTY  UCB=58F CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR90 TYPE=TTY  UCB=590 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR91 TYPE=TTY  UCB=591 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR92 TYPE=TTY  UCB=592 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR93 TYPE=TTY  UCB=593 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR94 TYPE=TTY  UCB=594 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR95 TYPE=TTY  UCB=595 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR96 TYPE=TTY  UCB=596 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR97 TYPE=TTY  UCB=597 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR98 TYPE=TTY  UCB=598 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\n;                                                                85034\n;        DIRECT CONNECT TTY LINES                                85034\n;\n;ET LINE=WYLBUR99 TYPE=IPC  UCB=599 CODE=ASCI FAC=SWI AUTO UTID=5150\n;ET LINE=WYLBUR9A TYPE=WYS  UCB=59A CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9B TYPE=WYS  UCB=59B CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9C TYPE=WYS  UCB=59C CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9D TYPE=WYS  UCB=59D CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9E TYPE=WY6  UCB=59E CODE=ASCI FAC=SWI AUTO UTID=WY60\n;ET LINE=WYLBUR9F TYPE=IPC  UCB=59F CODE=ASCI FAC=SWI   AUTO UTID=5150\n;ET LINE=WYLBURB0 TYPE=FOX  UCB=5B0 CODE=ASCI FAC=SWI   AUTO UTID=FOX\n;ET LINE=WYLBURB1 TYPE=IPC  UCB=5B1 CODE=ASCI FAC=SWI AUTO UTID=5150\n;ET LINE=WYLBURB2 TYPE=FOX  UCB=5B2 CODE=ASCI FAC=SWI   AUTO UTID=FOX\n;ET LINE=WYLBURB3 TYPE=WYS  UCB=5B3 CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBURB4 TYPE=TEK  UCB=5B4 CODE=ASCI FAC=SWI   AUTO UTID=TEK\n;ET LINE=WYLBURB5 TYPE=DEC  UCB=5B5 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;ET LINE=WYLBURB6 TYPE=DEC  UCB=5B6 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;ET LINE=WYLBURB7 TYPE=DEC  UCB=5B7 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;\n;\n;    LOCAL 3270 TERMINAL DEFINITIONS\n;CPU=438A434A\n;ET TERM=L0C2 TYPE=3277-2-TWKB UCB=0C2 FAC=LOC UTID=3277\n;ET TERM=L0C3 TYPE=3277-2-TWKB UCB=0C3 FAC=LOC UTID=3277\n;ET TERM=L0C6 TYPE=3277-2-TWKB UCB=0C6 FAC=LOC UTID=3277\n;ET TERM=A3C7 TYPE=3278-2-TWKB UCB=3C7 FAC=LOC UTID=3277\nNET TERM=A3C8 TYPE=3278-4-TWKB UCB=3C8 FAC=LOC UTID=3277\n;ET TERM=L0DA TYPE=3277-2-TWKB UCB=0DA FAC=LOC UTID=3277\n;ET TERM=L0DB TYPE=3277-2-TWKB UCB=0DB FAC=LOC UTID=3277\n;ET TERM=L0E0 TYPE=3277-2-TWKB UCB=0E0 FAC=LOC UTID=3277\n;ET TERM=L0E7 TYPE=3277-2-TWKB UCB=0E7 FAC=LOC UTID=3277\n;ET TERM=LCUU TYPE=3277-2-TWKB UCB=CUU FAC=LOC UTID=3277\n;ET TERM=A3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=A3CB TYPE=3278-2-TWKB UCB=3CB FAC=LOC UTID=3277\n;ET TERM=A3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\n;ET TERM=A3D6 TYPE=3278-2-TWKB UCB=3D6 FAC=LOC UTID=3277\n;ET TERM=A3D7 TYPE=3278-2-TWKB UCB=3D7 FAC=LOC UTID=3277\n;ET TERM=L3D8 TYPE=3278-2-TWKB UCB=3D8 FAC=LOC UTID=3277\n;ET TERM=L3D9 TYPE=3278-2-TWKB UCB=3D9 FAC=LOC UTID=3277\n;ET TERM=L3DB TYPE=3278-2-TWKB UCB=3DB FAC=LOC UTID=3277\n;ET TERM=L3DC TYPE=3278-2-TWKB UCB=3DC FAC=LOC UTID=3277\n;ET TERM=L3DD TYPE=3278-2-TWKB UCB=3DD FAC=LOC UTID=3277\n;ET TERM=L3E0 TYPE=3278-2-TWKB UCB=3E0 FAC=LOC UTID=3277\n;CPU=438BH158IPO1\nNET TERM=B3C8 TYPE=3278-4-TWKB UCB=3C8 FAC=LOC UTID=3277\n;ET TERM=L3C5 TYPE=3278-2-TWKB UCB=3C5 FAC=LOC UTID=3277\nNET TERM=B3C6 TYPE=3278-5-TWKB UCB=3C6 FAC=LOC UTID=3277\n;ET TERM=L3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=B3CD TYPE=3278-2-TWKB UCB=3CD FAC=LOC UTID=3277  ; BRON\n;ET TERM=B3CE TYPE=3278-2-TWKB UCB=3CE FAC=LOC UTID=3277\n;ET TERM=B3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\nNET TERM=B3D1 TYPE=3278-2-TWKB UCB=3D1 FAC=LOC UTID=3277\nNET TERM=B3D2 TYPE=3278-2-TWKB UCB=3D2 FAC=LOC UTID=3277\n;\n;    BSC MULTI-POINT LINE DEFINITIONS\n;\n;CPU=NONE\n;ET LINE=R029     TYPE=BSC-MP UCB=029 CODE=EBCD FAC=REM\n;ET STA=R029A  TYPE=3271-2     PC=40 SC=60 LINE=R029     FAC=REM\n;ET TERM=R029A1   TYPE=3277-2-TWKB DC=40 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A2   TYPE=3277-2-TWKB DC=C1 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A3   TYPE=3277-2-TWKB DC=C2 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A4   TYPE=3277-2-TWKB DC=C3 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A5   TYPE=3277-2-TWKB DC=C4 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A6   TYPE=3277-2-TWKB DC=C5 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A7   TYPE=3277-2-TWKB DC=C6 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A8   TYPE=3277-2-TWKB DC=C7 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A9   TYPE=3277-2-TWKB DC=C8 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A10  TYPE=3277-2-TWKB DC=C9 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A11  TYPE=3277-2-TWKB DC=4A UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A12  TYPE=3277-2-TWKB DC=4B UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A13  TYPE=3277-2-TWKB DC=4C UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A14  TYPE=3277-2-TWKB DC=4D UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A15  TYPE=3277-2-TWKB DC=4E UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A16  TYPE=3277-2-TWKB DC=4F UTID=3277 STA=R029A  FAC=REM\n;\n;\n;\n;\n;\n;\n;\n;\n./ ADD NAME=WYLBNEWS,SSI=00087351\n;\n;    OBS WYLBUR/MILTEN REL 8.1 INITIALIZATION DATASET  12/87\n;        FOR SP/VTAM ISC and testing\n;\n;    TERMINAL GREETING MESSAGE (MODIFY AS NECESSARY)\n;\nINIT INSTALN='Public Interest Data - Wylbur 8.1'\n;\n;\n;    SYSTEM CONSOLE DEFINITIONS\n;\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=SYSTEMS  ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPERATR  ;\nINIT CONSOLE=CONS2    TYPE=3277-2-CONSOLE ID=02  UID=OPERCRT  ;\n;\nINIT XTRASYS 4                   ; STARTABLE SUB-SYSTEMS\nINIT DYNAMNET=64                 ;UP TO 64 CONCURRENT VTAM SESSIONS\nINIT CDWAIT 9                    ;WAIT 9 SEC FOR SIGNOFF MSGS\nINIT MODE SPKA                     ; RUN IN SUPVSR STATE\nINIT ERROR STOP                    ; FOR TESTING                 87340\nINIT MAXCWRI 100 ;                ; 10 IS TOO FEW                87340\nINIT MAXQUM 10                    ; 5 IS TOO FEW                 87340\nINIT XTRANET XTRALIN 5 XTRATRM 5 XTRASTA 2       ; EXTRAS        87340\n;\n;\n;\n;\n;\n;\n;\n;\n;\n;\n;    HARD WIRED START-STOP POINT-TO-POINT TERMINAL DEFINITIONS\n;\n;\n;        TILS CODE 'Test'\nNET LINE=WYLBUR23 TYPE=TTY-VIDEO    UCB=023 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR24 TYPE=TTY-VIDEO    UCB=024 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR25 TYPE=TTY-VIDEO    UCB=025 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR26 TYPE=TTY-VIDEO    UCB=026 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR27 TYPE=TTY-VIDEO    UCB=027 CODE=ASCI FAC=SWI NOAUTO\n;\n;    SYSTEM INITIALIZATION COMMANDS\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\n;\nBEGIN WYLRCVY WAIT ABEND=DUMP      ; WAIT FOR RECOVERY TASK\nBEGIN WYLBUR ABEND=DUMP\nATTACH ALL                         ; ATTACH ALL COMPONENTS\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\nOPEN VTAM APPLID=WYLBUR            ; OPEN WYLBUR TEST VTAM APPL\nBEGIN TSO SYNC                     ; IF WE EVER GET PASS-THROUGH\nCALL TSO SET APPLROOT=TSWY         ; APPL NAME PREFIX\nCALL TSO SET MAXSESS=10            ; MORE THAN NECESSARY ?\n;\nBEGIN CICS SYNC                    ; A-SYSTEM ONLY\nCALL CICS SET APPLROOT=Y           ; APPL NAME PREFIX\nCALL CICS SET MAXSESS=4            ; IN-HOUSE ONLY\nSET WTRACE OFF                     ; ON ONLY IN DEBUG VERSION\nSET CPULIM ON MON=10 INT=.5 PC=10  ; LIMIT CPU HOGGING\nSET RMF OFF                        ; TURN ON WHEN RMF IS STARTED\n;\n;EGIN WYLKERM                      ; KERMIT FILE TRANSFER SUPPORT\n;\n;\n./ ADD NAME=WYLBNEWT,SSI=00092284\n;\n;    OBS WYLBUR/MILTEN REL 8.1 INITIALIZATION DATASET  11/87\n;        FOR SP/VTAM TEST SYSTEM       COMTEN UPDATE 92.284\n;\n;    TERMINAL GREETING MESSAGE (MODIFY AS NECESSARY)\n;\nINIT INSTALN='Public Interest Data - Wylbur 8.1'\n;\n;\n;    SYSTEM CONSOLE DEFINITIONS\n;\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=SYSTEMS  ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPERATR  ;\nINIT CONSOLE=CONS2    TYPE=3277-2-CONSOLE ID=02  UID=OPERCRT  ;\n;\nINIT XTRASYS 4                   ; STARTABLE SUB-SYSTEMS\nINIT DYNAMNET=64                 ;UP TO 64 CONCURRENT VTAM SESSIONS\nINIT CDWAIT 9                    ;WAIT 9 SEC FOR SIGNOFF MSGS\nINIT MODE SPKA                     ; RUN IN SUPVSR STATE\nINIT ERROR STOP                    ; FOR TESTING                 87340\nINIT MAXCWRI 100 ;                ; 10 IS TOO FEW                87340\nINIT MAXQUM 10                    ; 5 IS TOO FEW                 87340\nINIT XTRANET XTRALIN 5 XTRATRM 5 XTRASTA 2       ; EXTRAS        87340\n;\n;\n;\n;\n;\n;\n;\n;\n;\n;\n;    HARD WIRED START-STOP POINT-TO-POINT TERMINAL DEFINITIONS\n;\n;\n;        TILS CODE 'WYL8'\nNET LINE=WYLBUR40 TYPE=TTY-VIDEO    UCB=540 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR41 TYPE=TTY-VIDEO    UCB=541 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR42 TYPE=TTY-VIDEO    UCB=542 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR43 TYPE=TTY-VIDEO    UCB=543 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR43 TYPE=TTY-VIDEO    UCB=543 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR45 TYPE=TTY-VIDEO    UCB=545 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR46 TYPE=TTY-VIDEO    UCB=546 CODE=ASCI FAC=SWI NOAUTO\n;ET TERM=L3C3 TYPE=3278-3-TWKB UCB=3C3 FAC=LOC UTID=3277\n;ET TERM=L3C6 TYPE=3278-4-TWKB UCB=3C6 FAC=LOC UTID=3277\n;    SYSTEM INITIALIZATION COMMANDS\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\nSET RMF OFF                        ; SET ON AFTER RMF START\nBEGIN WYLRCVY WAIT ABEND=DUMP      ; WAIT FOR RECOVERY TASK\nBEGIN WYLBUR ABEND=DUMP\nATTACH ALL                         ; ATTACH ALL COMPONENTS\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\nOPEN VTAM APPLID=WYLBUR            ; OPEN WYLBUR TEST VTAM APPL\nBEGIN TSO SYNC                     ; IF WE EVER GET PASS-THROUGH\nCALL TSO SET APPLROOT=TSWY         ; APPL NAME PREFIX\nCALL TSO SET MAXSESS=10            ; MORE THAN NECESSARY ?\n;ET WORD MILTEN PRESTO             ;\nBEGIN CICS SYNC                    ; A-SYSTEM ONLY\nCALL CICS SET APPLROOT=Y           ; APPL NAME PREFIX\nCALL CICS SET MAXSESS=4            ; IN-HOUSE ONLY\nSET WTRACE OFF                     ; ON ONLY IN DEBUG VERSION\nSET CPULIM ON MON=10 INT=.5 PC=10  ; LIMIT CPU HOGGING\nBEGIN WYLKERM                      ; ENABLE KERMIT FILE TRANSFER\n./ ADD NAME=WYLBSYS,SSI=00083107\n;    WYLBUR TEST SYSTEM INITIALIZATION COMMANDS\n;CPU=\nSET MSG1;   PLEASE LIST $SYS1.HASPMSG(CURRENT) - CHANGED MM/DD/YY\n;NIT MODE EXCPVR ;\nSET SMF ;                     WE ARE NOT A NON-PROFIT OUTFIT\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\n;\nSET WORD MILTEN SYSTEMS      ; TESTED FOR IN MSSI\n;\nBEGIN WYLRCVY WAIT                 ; WAIT FOR RECOVERY TASK\n;\nBEGIN WYLBUR\nBEGIN WYLKERM                ; KERMIT FILE TRANSFER\nATTACH ALL                         ; ATTACH ALL COMPONENTS\n;\nSTART ALL                          ; START ALL ATTACHED COMPONENTS\n;\n;\n;\n./ ADD NAME=WYLBTEST,SSI=00087340\n;\n;    OBS WYLBUR/MILTEN REL 8.0 INITIALIZATION DATASET  11/87\n;        FOR SP/VTAM TEST SYSTEM\n;\n;    TERMINAL GREETING MESSAGE (MODIFY AS NECESSARY)\n;\nINIT INSTALN='Public Interest Data - Wylbur 8.1'\n;\n;\n;    SYSTEM CONSOLE DEFINITIONS\n;\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=SYSTEMS  ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPERATR  ;\nINIT CONSOLE=CONS2    TYPE=3277-2-CONSOLE ID=02  UID=OPERCRT  ;\n;\nINIT XTRASYS 4                   ; STARTABLE SUB-SYSTEMS\nINIT DYNAMNET=64                 ;UP TO 64 CONCURRENT VTAM SESSIONS\nINIT CDWAIT 9                    ;WAIT 9 SEC FOR SIGNOFF MSGS\nINIT MODE SPKA                     ; RUN IN SUPVSR STATE\nINIT ERROR STOP                    ; FOR TESTING                 87340\nINIT MAXCWRI 100 ;                ; 10 IS TOO FEW                87340\nINIT MAXQUM 10                    ; 5 IS TOO FEW                 87340\nINIT XTRANET XTRALIN 5 XTRATRM 5 XTRASTA 2       ; EXTRAS        87340\n;\n;    HARD WIRED START-STOP POINT-TO-POINT TERMINAL DEFINITIONS\n;\n;\n;        TILS CODE 'Test'\nNET LINE=WYLBUR23 TYPE=TTY-VIDEO    UCB=023 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR24 TYPE=TTY-VIDEO    UCB=024 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR25 TYPE=TTY-VIDEO    UCB=025 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR26 TYPE=TTY-VIDEO    UCB=026 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR27 TYPE=TTY-VIDEO    UCB=027 CODE=ASCI FAC=SWI NOAUTO\n;\n;    SYSTEM INITIALIZATION COMMANDS\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\n;\nBEGIN WYLRCVY WAIT ABEND=DUMP      ; WAIT FOR RECOVERY TASK\nBEGIN WYLBUR ABEND=DUMP\nATTACH ALL                         ; ATTACH ALL COMPONENTS\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\nOPEN VTAM APPLID=WYLTEST           ; OPEN WYLBUR TEST VTAM APPL\nBEGIN TSO SYNC                     ; IF WE EVER GET PASS-THROUGH\nCALL TSO SET APPLROOT=TSWY         ; APPL NAME PREFIX\nCALL TSO SET MAXSESS=10            ; MORE THAN NECESSARY ?\n;\nBEGIN CICS SYNC                    ; A-SYSTEM ONLY\nCALL CICS SET APPLROOT=Y           ; APPL NAME PREFIX\nCALL CICS SET MAXSESS=4            ; IN-HOUSE ONLY\n;\n;\n;\n./ ADD NAME=WYLBVTAM,SSI=00087196\n;\n;    OBS WYLBUR/MILTEN REL 7.5 INITIALIZATION DATASET  01/86\n;        FOR SP/VTAM TEST SYSTEM\n;\n;    TERMINAL GREETING MESSAGE (MODIFY AS NECESSARY)\n;\nINIT INSTALN='Public Interest Data - Wylbur 8.1'\n;\n;\n;    SYSTEM CONSOLE DEFINITIONS\n;\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=SYSTEMS  ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPERATR  ;\nINIT CONSOLE=CONS2    TYPE=3215-CONSOLE   ID=02  UID=OPERCON  ;\nINIT CONSOLE=CONS3    TYPE=3277-2-CONSOLE ID=03  UID=OPR3277  ;\n;\nINIT XTRASYS 10                  ; STARTABLE SUB-SYSTEMS\nINIT DYNAMNET=64                 ;UP TO 64 CONCURRENT VTAM SESSIONS\nINIT CDWAIT 6                    ;WAIT 6 SEC FOR SIGNOFF MSGS\n;NIT MODE SPKA                     ; RUN IN SUPVSR STATE\n;\n;    HARD WIRED START-STOP POINT-TO-POINT TERMINAL DEFINITIONS\n;\n;\n;        TILS CODE 'Test'\nNET LINE=WYLBUR23 TYPE=TTY-VIDEO    UCB=023 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR24 TYPE=TTY-VIDEO    UCB=024 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR25 TYPE=TTY-VIDEO    UCB=025 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR26 TYPE=TTY-VIDEO    UCB=026 CODE=ASCI FAC=SWI NOAUTO\nNET LINE=WYLBUR27 TYPE=TTY-VIDEO    UCB=027 CODE=ASCI FAC=SWI NOAUTO\n;\n;    SYSTEM INITIALIZATION COMMANDS\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\nBEGIN DYNALLOC SYNC                ; START DYNAMIC ALLOCATION\nALLOC VOL TSO001\nALLOC VOL TSO002\nALLOC VOL TSO003\nALLOC VOL TSO004\nALLOC VOL TSO005\nALLOC VOL TSO006\nALLOC VOL WYL001\nALLOC VOL WYL002\nALLOC VOL WYL003\nALLOC VOL WYL004\nALLOC VOL WYL005\nALLOC VOL WYL006\nALLOC VOL WYL007\nALLOC VOL WYL008\nALLOC VOL WYL009\nALLOC VOL COMMON\nALLOC VOL IGP001\nALLOC VOL LIBPAK\nALLOC VOL MVSA11\nALLOC VOL MVSA12\nALLOC VOL MVSA13\nALLOC VOL MVSA14\nALLOC VOL MVSA15\nALLOC VOL MVSA16\nALLOC VOL MVSA17\nALLOC VOL MVSA18\nALLOC VOL MVSB11\nALLOC VOL MVSB12\nALLOC VOL MVSB13\nALLOC VOL MVSB14\nALLOC VOL MVSB15\nALLOC VOL MVSB16\nALLOC VOL MVSB17\nALLOC VOL MVSB18\nALLOC VOL SYSR8J\nALLOC VOL TECH01\n;\n;\nALLOC VOL AMSPK1\nALLOC VOL ARTYOU\nALLOC VOL ISC001\nALLOC VOL ISC004\nALLOC VOL ISC005\nALLOC VOL NERA01\nALLOC VOL NERA02\nALLOC VOL WRA001\n;\n;\n;\n;\n;\n;\n;\n;ANCEL DYNALLOC\nBEGIN WYLRCVY WAIT ABEND=DUMP      ; WAIT FOR RECOVERY TASK\nBEGIN WYLBUR ABEND=DUMP\nATTACH ALL                         ; ATTACH ALL COMPONENTS\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\nOPEN VTAM APPLID=WYLBUR            ; OPEN WYLBUR VTAM APPL\nBEGIN TSO SYNC                     ; IF WE EVER GET PASS-THROUGH\nCALL TSO SET APPLROOT=TSWY         ; APPL NAME PREFIX\nCALL TSO SET MAXSESS=10            ; MORE THAN NECESSARY ?\n;\nBEGIN CICS SYNC                    ; A-SYSTEM ONLY\nCALL CICS SET APPLROOT=Y           ; APPL NAME PREFIX\nCALL CICS SET MAXSESS=4            ; IN-HOUSE ONLY\n;\nBEGIN EXHI SYNC                    ; VTAM/EXHIBIT\nCALL EXHI SET APPLROOT=EXWY        ; APPL NAME PREFIX\nCALL EXHI SET MAXSESS=4            ; IN-HOUSE ONLY\n;\n;\n;\n./ ADD NAME=WYLB3705,SSI=00091347\n;CPU=168A\n;    OBS WYLBUR/MILTEN REL 5.0 INITIALIZATION DATASET   2/ 3/85\n;\n;    SYSTEM CONSOLE DEFINITIONS\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=*SYSTEM* ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPER3277 ;\nINIT CONSOLE=CONS2    TYPE=3215-CONSOLE   ID=02  UID=OPERCONS ;\nINIT CONSOLE=CONS3    TYPE=3277-2-CONSOLE ID=03  UID=OPERATOR ;\n;CPU=438A438B\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=*SYSTEM* ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPERATOR ;\nINIT CONSOLE=CONS2    TYPE=3277-2-CONSOLE ID=02  UID=OPERCRT2 ;\nINIT CONSOLE=CONS3    TYPE=3277-2-CONSOLE ID=03  UID=OPERCRT3 ;\n;NIT CONSOLE=CONS4    TYPE=3277-2-CONSOLE ID=04  UID=OPERCRT4 ;\n;NIT CONSOLE=CONS5    TYPE=3215-CONSOLE   ID=05  UID=OPERCONS ;\n;\n;CPU=438B                  A-SYSTEM ONLY\n;        IBM 3705 LINES (SECOND GROUP)\n;\n;ET LINE=WYLBURB8 TYPE=TTY  UCB=0B8 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR22 TYPE=TTY  UCB=022 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR24 TYPE=TTY  UCB=024 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\nNET LINE=WYLBUR25 TYPE=TTY  UCB=025 CODE=ASCI FAC=SWI NOAUTO UTID=TTY\n;\n;\n;    LOCAL 3270 TERMINAL DEFINITIONS\n;CPU=A158434A\n;ET TERM=L0C2 TYPE=3277-2-TWKB UCB=0C2 FAC=LOC UTID=3277\n;ET TERM=L0C3 TYPE=3277-2-TWKB UCB=0C3 FAC=LOC UTID=3277\n;ET TERM=L0C6 TYPE=3277-2-TWKB UCB=0C6 FAC=LOC UTID=3277\n;ET TERM=A3C7 TYPE=3278-2-TWKB UCB=3C7 FAC=LOC UTID=3277\n;ET TERM=LCUU TYPE=3277-2-TWKB UCB=CUU FAC=LOC UTID=3277\n;ET TERM=L0DA TYPE=3277-2-TWKB UCB=0DA FAC=LOC UTID=3277\n;ET TERM=L0DB TYPE=3277-2-TWKB UCB=0DB FAC=LOC UTID=3277\n;ET TERM=L0E0 TYPE=3277-2-TWKB UCB=0E0 FAC=LOC UTID=3277\n;ET TERM=L0E7 TYPE=3277-2-TWKB UCB=0E7 FAC=LOC UTID=3277\n;ET TERM=LCUU TYPE=3277-2-TWKB UCB=CUU FAC=LOC UTID=3277\n;ET TERM=A3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=A3CB TYPE=3278-2-TWKB UCB=3CB FAC=LOC UTID=3277\n;ET TERM=A3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\n;ET TERM=A3D6 TYPE=3278-2-TWKB UCB=3D6 FAC=LOC UTID=3277\n;ET TERM=A3D7 TYPE=3278-2-TWKB UCB=3D7 FAC=LOC UTID=3277\n;ET TERM=L3D8 TYPE=3278-2-TWKB UCB=3D8 FAC=LOC UTID=3277\n;ET TERM=L3D9 TYPE=3278-2-TWKB UCB=3D9 FAC=LOC UTID=3277\n;ET TERM=L3DB TYPE=3278-2-TWKB UCB=3DB FAC=LOC UTID=3277\n;ET TERM=L3DC TYPE=3278-2-TWKB UCB=3DC FAC=LOC UTID=3277\n;ET TERM=L3DD TYPE=3278-2-TWKB UCB=3DD FAC=LOC UTID=3277\n;ET TERM=L3E0 TYPE=3278-2-TWKB UCB=3E0 FAC=LOC UTID=3277\n;CPU=438A438B\n;ET TERM=B3C8 TYPE=3278-4-TWKB UCB=3C8 FAC=LOC UTID=3277\n;ET TERM=L3C5 TYPE=3278-2-TWKB UCB=3C5 FAC=LOC UTID=3277\n;ET TERM=B3C6 TYPE=3278-2-TWKB UCB=3C6 FAC=LOC UTID=3277\n;ET TERM=L3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=B3CD TYPE=3278-2-TWKB UCB=3CD FAC=LOC UTID=3277  ; BRON\n;ET TERM=B3CE TYPE=3278-2-TWKB UCB=3CE FAC=LOC UTID=3277\n;ET TERM=B3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\nNET TERM=B3D1 TYPE=3278-2-TWKB UCB=3D1 FAC=LOC UTID=3277\nNET TERM=B3D2 TYPE=3278-2-TWKB UCB=3D2 FAC=LOC UTID=3277\n;\n;    BSC MULTI-POINT LINE DEFINITIONS\n;\n;CPU=NONE\nNET LINE=R029     TYPE=BSC-MP UCB=029 CODE=EBCD FAC=REM\nNET STA=R029A  TYPE=3271-2     PC=40 SC=60 LINE=R029     FAC=REM\nNET TERM=R029A1   TYPE=3277-2-TWKB DC=40 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A2   TYPE=3277-2-TWKB DC=C1 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A3   TYPE=3277-2-TWKB DC=C2 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A4   TYPE=3277-2-TWKB DC=C3 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A5   TYPE=3277-2-TWKB DC=C4 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A6   TYPE=3277-2-TWKB DC=C5 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A7   TYPE=3277-2-TWKB DC=C6 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A8   TYPE=3277-2-TWKB DC=C7 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A9   TYPE=3277-2-TWKB DC=C8 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A10  TYPE=3277-2-TWKB DC=C9 UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A11  TYPE=3277-2-TWKB DC=4A UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A12  TYPE=3277-2-TWKB DC=4B UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A13  TYPE=3277-2-TWKB DC=4C UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A14  TYPE=3277-2-TWKB DC=4D UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A15  TYPE=3277-2-TWKB DC=4E UTID=3277 STA=R029A  FAC=REM\nNET TERM=R029A16  TYPE=3277-2-TWKB DC=4F UTID=3277 STA=R029A  FAC=REM\n;\n;\n;\n;\n;\n;\n;\n;\n./ ADD NAME=WYL9CMD,SSI=00093151\n;\n;    OBS WYLBUR/MILTEN REL 9.0 STARTUP COMMANDS         6/93\n;        FOR X/A SYSTEM B\n;\n;    3 OF 3 (FOLLOWS WYL9INIT, WYL9LINE)\n;\n;    SYSTEM INITIALIZATION COMMANDS\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\nSET RMF OFF                        ; SET ON AFTER RMF START\nBEGIN WYLRCVY WAIT ABEND=DUMP      ; WAIT FOR RECOVERY TASK\nBEGIN WYLBUR SYNC ABEND=DUMP\n;\n;ET WORD MILTEN PRESTO             ;\n;\nATTACH ALL                         ; ATTACH ALL COMPONENTS\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\nOPEN VTAM APPLID=WYLBUR            ; OPEN WYLBUR TEST VTAM APPL\n;\n;BEGIN TSO SYNC                     ; IF WE EVER GET PASS-THROUGH\n;CALL TSO SET APPLROOT=TSWY         ; APPL NAME PREFIX\n;CALL TSO SET MAXSESS=10            ; MORE THAN NECESSARY ?\n;\n;BEGIN CICS SYNC                    ; A-SYSTEM ONLY\n;CALL CICS SET APPLROOT=Y           ; APPL NAME PREFIX\n;CALL CICS SET MAXSESS=4            ; IN-HOUSE ONLY\n;\nSET WTRACE OFF                     ; ON ONLY IN DEBUG VERSION\nSET CPULIM ON MON=10 INT=.5 PC=10  ; LIMIT CPU HOGGING\n;\n;\n BEGIN WYLKERM                      ; ENABLE KERMIT FILE TRANSFER\n;\n;\nSET FAILSOFT ON                    ;ENABLE FAILSOFT RECOVERY\n;\n;\n;\n;\n./ ADD NAME=WYL9FMT,SSI=00093185\n;\n;    OBS WYLBUR/MILTEN REL 9.0 STARTUP COMMANDS         6/93\n;        FOR X/A SYSTEM B\n;\n;    3 OF 3 (FOLLOWS WYL9INIT, WYL9LINE)\n;\n;    SYSTEM INITIALIZATION COMMANDS\nSET RMF OFF                        ; SET ON WHENEVER RMF IS STARTED\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\nBEGIN WYLFMT WAIT                  ;   -- OPTIONAL PAGE FORMATTING --\nBEGIN WYLRCVY WAIT ABEND=DUMP      ; WAIT FOR RECOVERY TASK\nBEGIN WYLBUR SYNC ABEND=DUMP\n;\nSET WORD MILTEN SYSTEMS            ; >>>>> SYSTEMS ONLY <<<<<    93158\n;\nATTACH ALL                         ; ATTACH ALL COMPONENTS\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\nOPEN VTAM APPLID=WYLBUR            ; OPEN WYLBUR TEST VTAM APPL\n;\n;BEGIN TSO SYNC                     ; IF WE EVER GET PASS-THROUGH\n;CALL TSO SET APPLROOT=TSWY         ; APPL NAME PREFIX\n;CALL TSO SET MAXSESS=10            ; MORE THAN NECESSARY ?\n;\n;BEGIN CICS SYNC                    ; A-SYSTEM ONLY\n;CALL CICS SET APPLROOT=Y           ; APPL NAME PREFIX\n;CALL CICS SET MAXSESS=4            ; IN-HOUSE ONLY\n;\nSET WTRACE OFF                     ; ON ONLY IN DEBUG VERSION\nSET CPULIM ON MON=10 INT=.5 PC=10  ; LIMIT CPU HOGGING\n;\n;\n BEGIN WYLKERM                      ; ENABLE KERMIT FILE TRANSFER\n;\n;\nSET FAILSOFT ON                    ;ENABLE FAILSOFT RECOVERY\n;\n;\n;\n;\n./ ADD NAME=WYL9INIT,SSI=00093151\n;\n;    OBS WYLBUR/MILTEN REL 9.0 BASIC INITIALIZATION          6/93\n;        FOR X/A SYSTEM A\n;\n;    TERMINAL GREETING MESSAGE (0-45 BYTES)\n;\nINIT INSTALN='Public Interest Data, Inc. - X/A Wylbur 9.0'\n;\n;\n;    SYSTEM CONSOLE DEFINITIONS\n;\nINIT CONSOLE=UTILCONS TYPE=SYSTEM-CONSOLE ID=255 UID=SYSTEMS  ;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE ID=01  UID=OPERATR  ;\nINIT CONSOLE=CONS2    TYPE=3277-2-CONSOLE ID=02  UID=OPERCRT  ;\nINIT CONSOLE=CONS3    TYPE=3277-2-CONSOLE ID=03  UID=OPERCRT  ;\n;\nINIT XTRASYS 4                   ; STARTABLE SUB-SYSTEMS\nINIT DYNAMNET=64                 ;UP TO 64 CONCURRENT VTAM SESSIONS\nINIT CDWAIT 3                    ;WAIT 9 SEC FOR SIGNOFF MSGS\n;NIT MODE SPKA                     ; RUN IN SUPVSR STATE\n;\n;\n./ ADD NAME=WYL9LINA,SSI=00092325\n;\n;    ACS WYLBUR/MILTEN REL 9.0 LINE/COMMON INITIALIZATION DATASET\n;\nINIT INSTALN='P.I.D. Inc.  ---  WYLBUR 9.0 Test'\n;\n;\n;    SYSTEM CONSOLE DEFINITIONS\n;\nINIT CONSOLE=CONS1    TYPE=3277-2-CONSOLE UID=OPERATR  ID=01\nINIT CONSOLE=CONS2    TYPE=3277-2-CONSOLE UID=OPERCRT  ID=03\n;NIT CONSOLE=CONS3    TYPE=3277-2-CONSOLE UID=SCPTR    ID=04\nINIT CONSOLE=UTILCONS TYPE=3277-2-CONSOLE UID=SYSTEMS  ID=255\n;\nINIT DYNAMNET=10                 ;UP TO 40 CONCURRENT VTAM SESSIONS\nINIT CDWAIT 1                    ;WAIT 1 SEC FOR SIGNOFF MSGS\n;\n;    HARD WIRED START-STOP POINT-TO-POINT TERMINAL DEFINITIONS\n;\n;ET LINE=USER1    TYPE=2741-EBCD   UCB=06D UTID=D01\n;ET LINE=USER2    TYPE=2741-EBCD   UCB=06C UTID=D02\n;ET LINE=SOFTWARE TYPE=2741-EBCD   UCB=068 UTID=D05\n;ET LINE=TRMROOM1 TYPE=TTY-TWTR    UCB=067 UTID=D07\n;ET LINE=TRMROOM2 TYPE=TTY-TWTR    UCB=069 UTID=D08\n;ET LINE=PC-ADM   TYPE=TTY-VIDEO   UCB=065 UTID=H01\n;ET LINE=NETROOM  TYPE=TTY-VIDEO   UCB=06A UTID=H02\n;\n;    DIAL-UP START-STOP POINT-TO-POINT TERMINAL DEFINITIONS\n;\nNET LINE=WYL40 TYPE=TTY-TWTR    UCB=540          FAC=SWI\nNET LINE=WYL41 TYPE=TTY-TWTR    UCB=541          FAC=SWI\nNET LINE=WYL42 TYPE=TTY-TWTR    UCB=542          FAC=SWI\nNET LINE=WYL43 TYPE=TTY-TWTR    UCB=543          FAC=SWI\nNET LINE=WYL44 TYPE=TTY-TWTR    UCB=544          FAC=SWI\nNET LINE=WYL45 TYPE=TTY-TWTR    UCB=545          FAC=SWI\nNET LINE=WYL46 TYPE=TTY-TWTR    UCB=546          FAC=SWI\nNET LINE=WYL47 TYPE=TTY-TWTR    UCB=547          FAC=SWI\nNET LINE=WYL48 TYPE=TTY-TWTR    UCB=548          FAC=SWI\n;\n;    LOCAL 3280 TERMINAL DEFINITIONS\n;\n;ET TERM=A3C8     TYPE=3277-2-TWKB UCB=3C8 UTID=D13 FAC=LOC\n;ET TERM=TUBE2    TYPE=3277-2-DEKB UCB=121 UTID=D14 FAC=LOC\n;ET TERM=PRTR1    TYPE=3284-2      UCB=127 UTID=D15 FAC=LOC\n;\n;    BSC MULTI-POINT LINE DEFINITIONS\n;\n;ET LINE=MASTLINE TYPE=BSC-MP      UCB=046 CODE=EBCD FAC=REM\n;ET STA=MASTER TYPE=3271-2-COPY PC=40 SC=60 LINE=MASTLINE FAC=REM\n;ET TERM=PRTR2 TYPE=3286-2      DC=C2 UTID=O502 STA=MASTER FAC=REM\n;ET TERM=TUBE3 TYPE=3277-2-DEKB DC=40 UTID=O500 STA=MASTER FAC=REM\n;   PRTR=PRTR2\n;ET TERM=TUBE4 TYPE=3275-2-TWKB PC=C1 SC=61 DC=40 LINE=MASTLINE\n;   PRTR=PRTR2 FAC=REM\n;\n./ ADD NAME=WYL9LINE,SSI=00093154\n;        WYLBUR 9.0 LINE DEFINITIONS FOR ALL SYSTEMS             93151\n;\n;\n;CPU=                       ALL CPUS\n;        COMTEN TTY LINES (TILS CODE 'WYLA' AND 'WYLB')\n;\nNET LINE=WYLBUR60 TYPE=TTY-TWTR UCB=560 FAC=SWI\nNET LINE=WYLBUR61 TYPE=TTY-TWTR UCB=561 FAC=SWI\nNET LINE=WYLBUR62 TYPE=TTY-TWTR UCB=562 FAC=SWI\nNET LINE=WYLBUR63 TYPE=TTY-TWTR UCB=563 FAC=SWI\nNET LINE=WYLBUR64 TYPE=TTY-TWTR UCB=564 FAC=SWI\nNET LINE=WYLBUR65 TYPE=TTY-TWTR UCB=565 FAC=SWI\nNET LINE=WYLBUR66 TYPE=TTY-TWTR UCB=566 FAC=SWI\nNET LINE=WYLBUR67 TYPE=TTY-TWTR UCB=567 FAC=SWI\nNET LINE=WYLBUR68 TYPE=TTY-TWTR UCB=568 FAC=SWI\nNET LINE=WYLBUR69 TYPE=TTY-TWTR UCB=569 FAC=SWI\nNET LINE=WYLBUR6A TYPE=TTY-TWTR UCB=56A FAC=SWI\nNET LINE=WYLBUR6B TYPE=TTY-TWTR UCB=56B FAC=SWI\nNET LINE=WYLBUR6C TYPE=TTY-TWTR UCB=56C FAC=SWI\nNET LINE=WYLBUR6D TYPE=TTY-TWTR UCB=56D FAC=SWI\nNET LINE=WYLBUR6E TYPE=TTY-TWTR UCB=56E FAC=SWI\nNET LINE=WYLBUR6F TYPE=TTY-TWTR UCB=56F FAC=SWI\nNET LINE=WYLBUR70 TYPE=TTY-TWTR UCB=570 FAC=SWI\nNET LINE=WYLBUR71 TYPE=TTY-TWTR UCB=571 FAC=SWI\nNET LINE=WYLBUR72 TYPE=TTY-TWTR UCB=572 FAC=SWI\nNET LINE=WYLBUR73 TYPE=TTY-TWTR UCB=573 FAC=SWI\nNET LINE=WYLBUR74 TYPE=TTY-TWTR UCB=574 FAC=SWI\nNET LINE=WYLBUR75 TYPE=TTY-TWTR UCB=575 FAC=SWI\nNET LINE=WYLBUR76 TYPE=TTY-TWTR UCB=576 FAC=SWI\nNET LINE=WYLBUR77 TYPE=TTY-TWTR UCB=577 FAC=SWI\nNET LINE=WYLBUR78 TYPE=TTY-TWTR UCB=578 FAC=SWI\nNET LINE=WYLBUR79 TYPE=TTY-TWTR UCB=579 FAC=SWI\nNET LINE=WYLBUR7A TYPE=TTY-TWTR UCB=57A FAC=SWI\nNET LINE=WYLBUR7B TYPE=TTY-TWTR UCB=57B FAC=SWI\nNET LINE=WYLBUR7C TYPE=TTY-TWTR UCB=57C FAC=SWI\nNET LINE=WYLBUR7D TYPE=TTY-TWTR UCB=57D FAC=SWI\nNET LINE=WYLBUR7E TYPE=TTY-TWTR UCB=57E FAC=SWI\nNET LINE=WYLBUR7F TYPE=TTY-TWTR UCB=57F FAC=SWI\nNET LINE=WYLBUR80 TYPE=TTY-TWTR UCB=580 FAC=SWI\nNET LINE=WYLBUR81 TYPE=TTY-TWTR UCB=581 FAC=SWI\nNET LINE=WYLBUR82 TYPE=TTY-TWTR UCB=582 FAC=SWI\nNET LINE=WYLBUR83 TYPE=TTY-TWTR UCB=583 FAC=SWI\nNET LINE=WYLBUR84 TYPE=TTY-TWTR UCB=584 FAC=SWI\nNET LINE=WYLBUR85 TYPE=TTY-TWTR UCB=585 FAC=SWI\nNET LINE=WYLBUR86 TYPE=TTY-TWTR UCB=586 FAC=SWI\nNET LINE=WYLBUR87 TYPE=TTY-TWTR UCB=587 FAC=SWI\nNET LINE=WYLBUR88 TYPE=TTY-TWTR UCB=588 FAC=SWI\nNET LINE=WYLBUR89 TYPE=TTY-TWTR UCB=589 FAC=SWI\nNET LINE=WYLBUR8A TYPE=TTY-TWTR UCB=58A FAC=SWI\nNET LINE=WYLBUR8B TYPE=TTY-TWTR UCB=58B FAC=SWI\nNET LINE=WYLBUR8C TYPE=TTY-TWTR UCB=58C FAC=SWI\nNET LINE=WYLBUR8D TYPE=TTY-TWTR UCB=58D FAC=SWI\nNET LINE=WYLBUR8E TYPE=TTY-TWTR UCB=58E FAC=SWI\nNET LINE=WYLBUR8F TYPE=TTY-TWTR UCB=58F FAC=SWI\nNET LINE=WYLBUR90 TYPE=TTY-TWTR UCB=590 FAC=SWI\nNET LINE=WYLBUR91 TYPE=TTY-TWTR UCB=591 FAC=SWI\nNET LINE=WYLBUR92 TYPE=TTY-TWTR UCB=592 FAC=SWI\nNET LINE=WYLBUR93 TYPE=TTY-TWTR UCB=593 FAC=SWI\nNET LINE=WYLBUR94 TYPE=TTY-TWTR UCB=594 FAC=SWI\nNET LINE=WYLBUR95 TYPE=TTY-TWTR UCB=595 FAC=SWI\nNET LINE=WYLBUR96 TYPE=TTY-TWTR UCB=596 FAC=SWI\nNET LINE=WYLBUR97 TYPE=TTY-TWTR UCB=597 FAC=SWI\nNET LINE=WYLBUR98 TYPE=TTY-TWTR UCB=598 FAC=SWI\n;                                                                85034\n;        DIRECT CONNECT TTY LINES                                85034\n;\n;ET LINE=WYLBUR99 TYPE=IPC  UCB=599 CODE=ASCI FAC=SWI AUTO UTID=5150\n;ET LINE=WYLBUR9A TYPE=WYS  UCB=59A CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9B TYPE=WYS  UCB=59B CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9C TYPE=WYS  UCB=59C CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9D TYPE=WYS  UCB=59D CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBUR9E TYPE=WY6  UCB=59E CODE=ASCI FAC=SWI AUTO UTID=WY60\n;ET LINE=WYLBUR9F TYPE=IPC  UCB=59F CODE=ASCI FAC=SWI   AUTO UTID=5150\n;ET LINE=WYLBURB0 TYPE=FOX  UCB=5B0 CODE=ASCI FAC=SWI   AUTO UTID=FOX\n;ET LINE=WYLBURB1 TYPE=IPC  UCB=5B1 CODE=ASCI FAC=SWI AUTO UTID=5150\n;ET LINE=WYLBURB2 TYPE=FOX  UCB=5B2 CODE=ASCI FAC=SWI   AUTO UTID=FOX\n;ET LINE=WYLBURB3 TYPE=WYS  UCB=5B3 CODE=ASCI FAC=SWI AUTO UTID=WY50\n;ET LINE=WYLBURB4 TYPE=TEK  UCB=5B4 CODE=ASCI FAC=SWI   AUTO UTID=TEK\n;ET LINE=WYLBURB5 TYPE=DEC  UCB=5B5 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;ET LINE=WYLBURB6 TYPE=DEC  UCB=5B6 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;ET LINE=WYLBURB7 TYPE=DEC  UCB=5B7 CODE=ASCI FAC=SWI   AUTO UTID=DEC\n;\n;\n;    LOCAL 3270 TERMINAL DEFINITIONS\n;CPU=A158434A\n;ET TERM=L0C2 TYPE=3277-2-TWKB UCB=0C2 FAC=LOC UTID=3277\n;ET TERM=L0C3 TYPE=3277-2-TWKB UCB=0C3 FAC=LOC UTID=3277\n;ET TERM=L0C6 TYPE=3277-2-TWKB UCB=0C6 FAC=LOC UTID=3277\n;ET TERM=A3C7 TYPE=3278-2-TWKB UCB=3C7 FAC=LOC UTID=3277\n;ET TERM=A3C8 TYPE=3278-4-TWKB UCB=3C8 FAC=LOC UTID=3277\n;ET TERM=L0DA TYPE=3277-2-TWKB UCB=0DA FAC=LOC UTID=3277\n;ET TERM=L0DB TYPE=3277-2-TWKB UCB=0DB FAC=LOC UTID=3277\n;ET TERM=L0E0 TYPE=3277-2-TWKB UCB=0E0 FAC=LOC UTID=3277\n;ET TERM=L0E7 TYPE=3277-2-TWKB UCB=0E7 FAC=LOC UTID=3277\n;ET TERM=LCUU TYPE=3277-2-TWKB UCB=CUU FAC=LOC UTID=3277\n;ET TERM=A3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=A3CB TYPE=3278-2-TWKB UCB=3CB FAC=LOC UTID=3277\n;ET TERM=A3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\n;ET TERM=A3D6 TYPE=3278-2-TWKB UCB=3D6 FAC=LOC UTID=3277\n;ET TERM=A3D7 TYPE=3278-2-TWKB UCB=3D7 FAC=LOC UTID=3277\n;ET TERM=L3D8 TYPE=3278-2-TWKB UCB=3D8 FAC=LOC UTID=3277\n;ET TERM=L3D9 TYPE=3278-2-TWKB UCB=3D9 FAC=LOC UTID=3277\n;ET TERM=L3DB TYPE=3278-2-TWKB UCB=3DB FAC=LOC UTID=3277\n;ET TERM=L3DC TYPE=3278-2-TWKB UCB=3DC FAC=LOC UTID=3277\n;ET TERM=L3DD TYPE=3278-2-TWKB UCB=3DD FAC=LOC UTID=3277\n;ET TERM=L3E0 TYPE=3278-2-TWKB UCB=3E0 FAC=LOC UTID=3277\n;CPU=308BH158IPO1\n;ET TERM=B3C8 TYPE=3278-4-TWKB UCB=3C8 FAC=LOC UTID=3277\n;ET TERM=L3C5 TYPE=3278-2-TWKB UCB=3C5 FAC=LOC UTID=3277\n;ET TERM=B3C6 TYPE=3278-2-TWKB UCB=3C6 FAC=LOC UTID=3277\n;ET TERM=L3CA TYPE=3278-2-TWKB UCB=3CA FAC=LOC UTID=3277\n;ET TERM=B3CD TYPE=3278-2-TWKB UCB=3CD FAC=LOC UTID=3277  ; BRON\n;ET TERM=B3CE TYPE=3278-2-TWKB UCB=3CE FAC=LOC UTID=3277\n;ET TERM=B3CF TYPE=3278-2-TWKB UCB=3CF FAC=LOC UTID=3277\n;ET TERM=B3D1 TYPE=3278-2-TWKB UCB=3D1 FAC=LOC UTID=3277\n;ET TERM=B3D2 TYPE=3278-2-TWKB UCB=3D2 FAC=LOC UTID=3277\n;\n;    BSC MULTI-POINT LINE DEFINITIONS\n;\n;CPU=NONE\n;ET LINE=R029     TYPE=BSC-MP UCB=529 CODE=EBCD FAC=REM\n;ET STA=R029A  TYPE=3271-2     PC=40 SC=60 LINE=R029     FAC=REM\n;ET TERM=R029A1   TYPE=3277-2-TWKB DC=40 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A2   TYPE=3277-2-TWKB DC=C1 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A3   TYPE=3277-2-TWKB DC=C2 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A4   TYPE=3277-2-TWKB DC=C3 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A5   TYPE=3277-2-TWKB DC=C4 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A6   TYPE=3277-2-TWKB DC=C5 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A7   TYPE=3277-2-TWKB DC=C6 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A8   TYPE=3277-2-TWKB DC=C7 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A9   TYPE=3277-2-TWKB DC=C8 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A10  TYPE=3277-2-TWKB DC=C9 UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A11  TYPE=3277-2-TWKB DC=4A UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A12  TYPE=3277-2-TWKB DC=4B UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A13  TYPE=3277-2-TWKB DC=4C UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A14  TYPE=3277-2-TWKB DC=4D UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A15  TYPE=3277-2-TWKB DC=4E UTID=3277 STA=R029A  FAC=REM\n;ET TERM=R029A16  TYPE=3277-2-TWKB DC=4F UTID=3277 STA=R029A  FAC=REM\n;\n;\n;\n;\n;\n;\n;\n;\n./ ADD NAME=WYL9NINA,SSI=00092325\n;\n;      ACS/WYLBUR RELEASE 9  COMMAND INTIALIZATION\n;\n;    SYSTEM INITIALIZATION COMMANDS\n;\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\n;\nBEGIN WYLRCVY WAIT                 ; WAIT FOR RECOVERY TASK\n;\nBEGIN WYLBUR SYNC\n;\nATTACH ALL                         ; ATTACH ALL COMPONENTS\n;\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\n;\nOPEN VTAM APPLID=WYLTEST           ; OPEN WYLBUR VTAM APPL\n;\n;YLBUR                             ;SELECT WYLBUR SUBSYSTEM\n;\nSET FAILSOFT ON                    ;ENABLE FAILSOFT RECOVERY\n;\nBEGIN WYLKERM                      ; ENABLE KERMIT SUBTASK\n;\n;\n;\n;\n./ ADD NAME=WYL9SYS,SSI=00093158\n;\n;    OBS WYLBUR/MILTEN REL 9.0 STARTUP COMMANDS         6/93\n;        FOR X/A SYSTEM B\n;\n;    3 OF 3 (FOLLOWS WYL9INIT, WYL9LINE)\n;\n;    SYSTEM INITIALIZATION COMMANDS\nSET RMF OFF                        ; SET ON WHENEVER RMF IS STARTED\nDEFSYS WYLBUR ALL                  ; WYLBUR IS DEFAULT SUBSYSTEM\n;EGIN WYLFMT WAIT                  ;   -- OPTIONAL PAGE FORMATTING --\nBEGIN WYLRCVY WAIT ABEND=DUMP      ; WAIT FOR RECOVERY TASK\nBEGIN WYLBUR SYNC ABEND=DUMP\n;\nSET WORD MILTEN SYSTEMS            ; >>>>> SYSTEMS ONLY <<<<<    93158\n;\nATTACH ALL                         ; ATTACH ALL COMPONENTS\nSTART  ALL                         ; START ALL ATTACHED COMPONENTS\nOPEN VTAM APPLID=WYLBUR            ; OPEN WYLBUR TEST VTAM APPL\n;\n;BEGIN TSO SYNC                     ; IF WE EVER GET PASS-THROUGH\n;CALL TSO SET APPLROOT=TSWY         ; APPL NAME PREFIX\n;CALL TSO SET MAXSESS=10            ; MORE THAN NECESSARY ?\n;\n;BEGIN CICS SYNC                    ; A-SYSTEM ONLY\n;CALL CICS SET APPLROOT=Y           ; APPL NAME PREFIX\n;CALL CICS SET MAXSESS=4            ; IN-HOUSE ONLY\n;\nSET WTRACE OFF                     ; ON ONLY IN DEBUG VERSION\nSET CPULIM ON MON=10 INT=.5 PC=10  ; LIMIT CPU HOGGING\n;\n;\n BEGIN WYLKERM                      ; ENABLE KERMIT FILE TRANSFER\n;\n;\nSET FAILSOFT ON                    ;ENABLE FAILSOFT RECOVERY\n;\n;\n;\n;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ESPPROC": {"ttr": 8456, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x13#\\x7f\\x01\\x13#\\x7f\\x13\\t\\x06T\\x06T\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-08-25T00:00:00", "modifydate": "2013-08-25T13:09:00", "lines": 1620, "newlines": 1620, "modlines": 0, "user": "GERHARD"}, "text": "./ ADD NAME=ASMANY   8001-05204-10214-2322-00065-00063-00000-GERHARD\n//ASMANY  PROC WORK=VIO,CC=0,PRG=ASMANYF,ASMREG=4096K,\n//             LOAD=,DECK=NO,LIST=,TEST=NO,XREF=,LCT=60,\n//             RENT=NO,TERM=,ESD=,\n//             RLD=NO,SPRM=,REF=SHORT,ASMPRM=,\n//             MAC='SYS1.MACLIB',\n//             MAC1='SYS1.AMODGEN',\n//             MAC2='SYS1.HASPSRC', JES2\n//             MAC3='GERHARD.MVS.PVTMACS',\n//             MAC4='GERHARD.MVS.ESPMAC',\n//             MAC5='GERHARD.COLEMAC',\n//             MAC6='SYS1.MACLIB',  'SYS1.ZMACLIB', S/390 OP CODES\n//             MAC7='SYS1.MACLIB',\n//             MAC8='GERHARD.MVS.ESPSRC',\n//             MAC9='GERHARD.MVS.EXHSRC',\n//             SRC='GERHARD.MVS.ESPSRC',\n//             LIB='SYS1.ESPLIB',\n//             LIB2='SYS1.EXHLIB'\n//*\n//*********************************************************************\n//*            PRODUCTION COMPILE/LINK\n//*\n//*            TO SPECIFY ADDITIONAL OPTIONS, CODE ASMPRM=',OPT...'   *\n//*            TO OBTAIN A LONG XREF LIST, SPECIFY REF=FULL           *\n//*********************************************************************\n//*\n//*\n//C       EXEC PGM=&PRG,TIME=120,REGION=&ASMREG,COND=(&CC,LT),\n//             PARM=(&LOAD.OBJECT,&DECK.DECK,&LIST.LIST,&TEST.TEST,\n//             '&XREF.XREF(&REF)','LINECOUNT(&LCT)',&RENT.RENT,\n//             &ESD.ESD,&TERM.TERM,&RLD.RLD&ASMPRM,\n// 'SYSPARM(&SPRM)')\n//*\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.ESPLIB\n//CONPRINT DD  SYSOUT=*\n//ASMTERM  DD  SYSOUT=*\n//ASMLIB   DD  DISP=SHR,DSN=&MAC,DCB=BLKSIZE=32720\n//         DD  DISP=SHR,DSN=&MAC1\n//         DD  DISP=SHR,DSN=&MAC2\n//         DD  DISP=SHR,DSN=&MAC3\n//         DD  DISP=SHR,DSN=&MAC4\n//         DD  DISP=SHR,DSN=&MAC5\n//         DD  DISP=SHR,DSN=&MAC6\n//         DD  DISP=SHR,DSN=&MAC7\n//         DD  DISP=SHR,DSN=&MAC8\n//         DD  DISP=SHR,DSN=&MAC9\n//         DD  DISP=SHR,DSN=&SRC\n//ASMUT1   DD  DSN=&&SYSUT1,UNIT=(&WORK,SEP=SYSLIB),\n//             SPACE=(1700,(4000,1000),,CONTIG)\n//ASMUT2   DD  DSN=&&SYSUT2,UNIT=(&WORK,SEP=(SYSUT1,SYSLIB)),\n//             SPACE=(1700,(4000,1000),,CONTIG)\n//ASMUT3   DD  DSN=&&SYSUT3,UNIT=(&WORK,SEP=(SYSUT2,SYSUT1)),\n//             SPACE=(1700,(4000,1000),,CONTIG)\n//ASMPRINT DD  DISP=OLD,DSN=GERHARD.MVS.ESPLIST  LISTING\n//*SMPRINT DD  SYSOUT=*\n//ASMPUNCH DD  SYSOUT=B,DCB=(RECFM=FB,LRECL=80,BLKSIZE=400)\n//ASMGO    DD  DSN=&&OBJ,UNIT=(&WORK,SEP=(SYSUT3,SYSUT1)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),\n//             SPACE=(80,(2000,1000),,CONTIG),DISP=(MOD,PASS)\n//ASMIN    DD  DISP=SHR,DSN=&SRC\n//SYSIN    DD  DDNAME=INPUT\n//*\n//LNKLIB   DD  DISP=SHR,DSN=&LIB\n//         DD  DISP=SHR,DSN=&LIB2\n//LNKLMOD  DD  DISP=SHR,DSN=&LIB\n//LNKPRINT DD  SYSOUT=*\n./ ADD NAME=ASMTOZAP 0100-02251-02251-0937-00040-00040-00000-GERHARD\n//ASMTOZAP PROC WORK=VIO,CC=0,SRC='GERHARD.ESPSRC',PRG=ASMANYH,\n//             LOAD=,DECK=NO,LIST=,TEST=NO,XREF=,LCT=55,\n//             RENT=NO,TERM=,PB=605,PS=10,ESD=,\n//             RLD=NO,SPRM=,REF=SHORT,ASMPRM=,ASMREG=2048K,\n//             TS='TERM=TS',\n//             MAC1='SYS1.MACLIB',\n//             MAC9='SYS1.MACLIB',\n//             REL=S520,ZAPREG=256K\n//*        CONVERT ASM LISTING TO ZAP DECK\n//*\n//ASM     EXEC PGM=&PRG,TIME=120,REGION=&ASMREG,COND=(&CC,LT),\n//             PARM=(&LOAD.OBJECT,&DECK.DECK,&LIST.LIST,&TEST.TEST,\n//             '&XREF.XREF(&REF)','LINECOUNT(&LCT)',&RENT.RENT,\n//             &ESD.ESD,&TERM.TERM,&RLD.RLD&ASMPRM,\n//             'SYSPARM(&SPRM)')\n//*\n//*\n//CONPRINT DD  &TS.SYSOUT=*\n//ASMTERM  DD  &TS.SYSOUT=*\n//ASMLIB   DD  DISP=SHR,DSN=&MAC1\n//       INCLUDE MEMBER=ZZASMLIB\n//         DD  DISP=SHR,DSN=&MAC9\n//ASMUT1   DD  UNIT=(&WORK,SEP=ASMLIB),SPACE=(1700,(2000,1000))\n//ASMUT2   DD  UNIT=(&WORK,SEP=(ASMUT1,ASMLIB)),SPACE=(1700,(800,100))\n//ASMUT3   DD  UNIT=(&WORK,SEP=(ASMUT2,ASMUT1,ASMLIB)),\n//             SPACE=(1700,(800,100))\n//ASMPRINT DD  DSN=&&LIST,DCB=(RECFM=FBM,LRECL=121,BLKSIZE=&PB),\n//             SPACE=(CYL,(&PS,&PS),,CONTIG),UNIT=&WORK,DISP=(,PASS)\n//ASMPUNCH DD  SYSOUT=Z,DCB=(RECFM=FB,LRECL=80,BLKSIZE=400,BUFNO=3)\n//ASMGO    DD  DSN=&&LOADSET,SPACE=(80,(400,400)),DISP=(MOD,PASS),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=400,BUFNO=3),\n//             UNIT=(&WORK,SEP=(ASMUT3,ASMUT2,ASMUT1,ASMPRINT,ASMLIB))\n//ASMIN    DD  DISP=SHR,DSN=&SRC\n//*\n//ATOZ    EXEC PGM=ASMTOZAP,\n//             REGION=&ZAPREG,COND=(&CC,LT,ASM)\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FBM,LRECL=121,BLKSIZE=605)\n//ASMIN    DD  DISP=(OLD,DELETE),DSN=&&LIST\n//SYSPUNCH DD  DISP=(,PASS),DSN=&&ZAP,UNIT=&WORK,SPACE=(TRK,(1,1))\n//*\n./ ADD NAME=ASMTRAUS 8000-06301-06301-1445-00113-00113-00000-GERHARD\n//ASMTRAUS PROC GOTIME=20,SPRM=,AO='OBJECT,NODECK',RENT=NO,            *\n//             AT='TERM,STMT',AD='NORLD,ESD',WORK=VIO,                 *\n//             TRVOL=WORK01,           TRACE DATA SET VOLUME           *\n//             MAC='SYS1.MACLIB',      USER PREFIX MACLIB              *\n//             MAC9='SYS1.MACLIB',     USER POSTFIXED MACLIB           *\n//             SRC='GERHARD.MVS.ESPSRC', COPY SOURCE                   *\n//             LIB='SYS1.ESPLIB'  LKED INCLUDE LIBRARY\n//*  ASMTRACE - TEMPORARY ASSEMBLY, TEST AND AUTHORIZED EXECUTION\n//*\n//* THIS PROCEDURE RUNS THE XF ASSEMBLER, LINK-EDITS THE\n//* NEWLY ASSEMBLED PROGRAM AND RUNS THE PROGRAM AFTER\n//* THE LINK-EDIT IS ACCOMPLISHED.\n//*\n//*********************************************************************\n//**                                                                 **\n//**  DELETE - SCRATCH THE OLD TRACE DATA SET                        **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//DELETE   EXEC PGM=DELETE0,PARM='GERHARD.ZZTRACE,&TRVOL'\n//*      INCLUDE MEMBER=ZZSTEPLB\n//SYSPRINT DD  SYSOUT=*\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  ASSEMBLE - REQUIRES C.SYSIN TO SPECIFY INPUT                   **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//C        EXEC PGM=IFOX00,REGION=2048K,\n// PARM=(&AO,'LINECOUNT(60)',&AT,&AD,'XREF(SHORT)','SYSPARM(DEBUG)',\n//             &RENT.RENT&SPRM)\n//SYSLIB    DD DISP=SHR,DSN=&MAC,DCB=BLKSIZE=32720\n//          DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.AMODGEN\n//          DD DISP=SHR,DSN=SYS1.HASPSRC\n//          DD DISP=SHR,DSN=GERHARD.MVS.PVTMACS\n//          DD DISP=SHR,DSN=GERHARD.MVS.ESPMAC\n//          DD DISP=SHR,DSN=GERHARD.COLEMAC\n//          DD DISP=SHR,DSN=&MAC9\n//          DD DISP=SHR,DSN=&SRC\n//*     INCLUDE MEMBER=ZZASMLIB\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSADATA DD  DISP=(,PASS),DSN=&&DATA(GO),UNIT=SYSDA,\n//             SPACE=(TRK,(15,15,1),RLSE)\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=&WORK,SPACE=(17000,(6000,1000)),\n//             SEP=(SYSLIB)\n//SYSUT2   DD   DSN=&&SYSUT2,UNIT=&WORK,SPACE=(17000,(3000,500)),\n//             SEP=(SYSLIB,SYSUT1)\n//SYSUT3   DD   DSN=&&SYSUT3,UNIT=&WORK,SPACE=(17000,(3000,500))\n//SYSPUNCH DD  SYSOUT=B\n//SYSGO    DD  DSN=&&OBJ,SPACE=(80,(2000,1000),,,ROUND),UNIT=&WORK,\n//             DISP=(MOD,PASS),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  LINK EDIT                                                      **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//L        EXEC PGM=HEWL,PARM='MAP,LET,LIST,RENT',COND=(4,LT,C)\n//SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(1,1,11)),\n//             DSN=&&GOSET(GO)\n//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=&WORK,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=&LIB\n//         DD  DISP=SHR,DSN=SYS1.ESPLIB\n//         DD  DISP=SHR,DSN=SYS1.EXHLIB\n//*     INCLUDE MEMBER=ZZLNKLIB\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  EXECUTE AUTHORIZED - TRACES WHEN PGMTRACE MACRO USED           **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//G        EXEC PGM=LOADZAPA,COND=((4,LT,C),(0,LT,L)),\n//             TIME=&GOTIME\n//*TEPLIB  DD  DISP=(OLD,PASS),DSN=&&GOSET\n//STEPLIB  DD  DISP=SHR,DSN=&LIB\n//         DD  DISP=SHR,DSN=SYS1.ESPLIB\n//         DD  DISP=SHR,DSN=SYS1.EXHLIB\n//LOADLIB  DD  DISP=(OLD,PASS),DSN=&&GOSET\n//         DD  DISP=SHR,DSN=&LIB\n//         DD  DISP=SHR,DSN=SYS1.ESPLIB\n//         DD  DISP=SHR,DSN=SYS1.EXHLIB\n//DEBTRACE DD  SYSOUT=*\n//SYSTRACE DD  DSN=GERHARD.ZZTRACE,DISP=(,CATLG,CATLG),\n//             VOL=SER=&TRVOL,UNIT=SYSALLDA,\n//             SPACE=(TRK,(100,100),RLSE,CONTIG)\n//*YSTRADA DD  DISP=(OLD,DELETE),DSN=&&DATA\n//*        DD  DISP=SHR,DSN=GERHARD.ESPADATA\n//*        DD  DISP=SHR,DSN=GERHARD.EXHADATA\n//SYSTROPT DD  DISP=SHR,DSN=GERHARD.ESPPARM(PGMTRACE)\n//ZAPOUT   DD  SYSOUT=*\n//ZAPIN    DD  DISP=SHR,DSN=GERHARD.ESPPARM(LOADZAPA)\n//SYSDEBUG DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//*********************************************************************\n//**                                                                 **\n//**  PRINT - PRINT THE TRACE DATA                                   **\n//**                                                                 **\n//*********************************************************************\n//T      EXEC  PGM=WYLCOPY,COND=EVEN,PARM=NOCC\n//SYSPRINT DD  DUMMY\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DISP=SHR,DSN=GERHARD.ZZTRACE\n//SYSUT2   DD  SYSOUT=*\n./ ADD NAME=ASMXTAUT 8001-09148-09233-2349-00157-00156-00000-GERHARD\n//ASMXTAUT PROC WORK=SYSDA,CC=0,PRG=LOADZAPA,\n//             UPDPRT='DUMMY,',              IEBUPDTE SOURCE LIST\n//             LOAD=,DECK=NO,LIST=,TEST=,XREF=,LCT=60,\n//             RENT=NO,TERM=,LOPT=',TEST,REUS',\n//             ESD=,RLD=NO,REF=SHORT,SPRM=DEBUG,\n//             ASM=X,ASMPRM=,ASMREG=4096K,TS='TERM=TS,',\n//             SRC='GERHARD.MVS.ESPSRC',     INPUT SOURCE\n//             MAC1='SYS1.MACLIB',\n//             MAC9='GERHARD.MVS.ESPMAC',\n//             OLIB='SYS1.ESPLIB',           LOAD LIB INPUT/OUTPUT\n//             MOD='SYS1.ESPLIB',            LOAD LIB INPUT\n//             DUMP='DUMMY,',                SYSTEM DUMP IF NULL\n//             SYM='GERHARD.TEST.LOADLIB',   EXHB LIBRARY\n//             TRVOL=WORK01            TRACE DATA SET VOLUME\n//*\n//*            ACCOUNT=Z904 ; ADDED BY GERHARD\n//*            FOR ESP TESTING\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  UP     - TEMPORARY UPDATE OF MACROS AND SOURCE                 **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//U       EXEC PGM=IEBUPDTX,PARM='MOD,LISTALL,WYLBUR',REGION=1024K\n//SYSPRINT DD  &UPDPRT.SYSOUT=*\n//SYSUT1   DD  DSN=&SRC,DISP=SHR\n//SYSUT2   DD  DSN=&&UPSET,DISP=(,PASS),UNIT=&WORK,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=0),\n//             SPACE=(CYL,(2,2,17),RLSE,CONTIG)\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  DELETE - SCRATCH THE OLD TRACE DATA SET                        **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//DELETE   EXEC PGM=DELETE0,PARM='GERHARD.ZZTRACE,&TRVOL'\n//*      INCLUDE MEMBER=ZZSTEPLB\n//SYSPRINT DD  SYSOUT=*\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  ASM    - TEMPORARY ASSEMBLY OF ONE OR MORE EXHIBIT MODULES     **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//C       EXEC PGM=ASMANY&ASM,COND=(&CC,LT),TIME=120,REGION=&ASMREG,\n//             PARM=(&LOAD.OBJ,&DECK.DECK,&LIST.LIST,&TEST.TEST,\n//             '&XREF.XREF(&REF)','LINECOUNT(&LCT)',&RENT.RENT,\n//             &TERM.TERM,&ESD.ESD,&TERM.STMT,\n//             &RLD.RLD&ASMPRM,\n// 'SYSPARM(&SPRM)')\n//*\n//*TEPLIB  DD  DISP=SHR,DSN=&MOD\n//CONPRINT DD  &TS.SYSOUT=*\n//ASMTERM  DD  &TS.SYSOUT=*\n//ASMLIB   DD  DSN=*.U.SYSUT2,VOL=REF=*.U.SYSUT2,DISP=(OLD,PASS),\n//             DCB=BLKSIZE=32720\n//         DD  DISP=SHR,DSN=&MAC1            MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=SYS1.HASPSRC\n//         DD  DISP=SHR,DSN=GERHARD.MVS.PVTMACS\n//         DD  DISP=SHR,DSN=GERHARD.MVS.ESPMAC\n//         DD  DISP=SHR,DSN=GERHARD.COLEMAC\n//         DD  DISP=SHR,DSN=GERHARD.MVS.EXHSRC\n//         DD  DISP=SHR,DSN=GERHARD.MVS.ESPSRC\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=&MAC9            SOMETHING ELSE ?\n//         DD  DISP=SHR,DSN=&SRC       ORIGINL SOURCE\n//ASMUT1   DD  UNIT=&WORK,SPACE=(1700,(16000,4000))\n//ASMUT2   DD  UNIT=&WORK,SPACE=(1700,(16000,4000))\n//ASMUT3   DD  UNIT=&WORK,SPACE=(1700,(16000,4000))\n//ASMPRINT DD  SYSOUT=*,DCB=(RECFM=FBM,LRECL=121,BLKSIZE=0)\n//ASMPUNCH DD  SYSOUT=B,DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)\n//ASMGO    DD  DSN=&&LOADSET,SPACE=(80,(4000,4000)),DISP=(MOD,PASS),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=0),\n//             UNIT=(&WORK,SEP=(ASMUT3,ASMUT2,ASMUT1,ASMPRINT,ASMLIB))\n//ASMADATA DD  DISP=(NEW,PASS),DSN=&&DATA,UNIT=SYSDA,\n//             SPACE=(CYL,(5,5,5),RLSE)\n//ASMIN    DD  DSN=*.U.SYSUT2,VOL=REF=*.U.SYSUT2,DISP=(OLD,PASS)\n//OLDLIB   DD  DISP=SHR,DSN=&SRC\n//SYSIN    DD  DISP=SHR,DSN=GERHARD.MVS.ESPPARM(ASMXTEST)\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  LKED   - TEMPORARY LINK-EDIT                                   **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//L       EXEC PGM=IEWL,REGION=512K,COND=(&CC,LT),\n//             PARM=(LET,LIST,MAP&LOPT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN,DCB=BLKSIZE=400\n//SYSLMOD  DD  DSN=&&GOSET,UNIT=(&WORK,SEP=SYSLIN),DISP=(MOD,PASS),\n//             SPACE=(CYL,(5,2,41),,CONTIG)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=(&WORK,SEP=(SYSLMOD,SYSLIN)),\n//             SPACE=(3072,(50,20))\n//SYSLIB   DD  DSN=&MOD,DISP=SHR\n//         DD  DSN=&OLIB,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS1.ESPLIB         (SUB----)\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  GO     - LOAD TEMP MODULE AUTHORIZED FOR TESTING               **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//G       EXEC PGM=&PRG,REGION=8100K,COND=(&CC,LT),TIME=1\n//LOADLIB  DD DSN=*.L.SYSLMOD,VOL=REF=*.L.SYSLMOD,DISP=(OLD,PASS)\n//         DD  DISP=SHR,DSN=&SYM  (EXHB DEFINITIONS)\n//         DD  DISP=SHR,DSN=&MOD\n//         DD  DISP=SHR,DSN=&OLIB\n//SYSPRUNT DD  SYSOUT=*\n//DEBTRACE DD  SYSOUT=*\n//SYSTRACE DD  DSN=GERHARD.ZZTRACE,DISP=(,CATLG,CATLG),\n//             VOL=SER=&TRVOL,UNIT=SYSALLDA,\n//             SPACE=(TRK,(100,100),RLSE,CONTIG)\n//*YSTRADA DD  DISP=(OLD,DELETE),DSN=&&DATA\n//*        DD  DISP=SHR,DSN=GERHARD.EXHADATA\n//*        DD  DISP=SHR,DSN=GERHARD.ESPADATA\n//SYSTROPT DD  DISP=SHR,DSN=GERHARD.MVS.ESPPARM(PGMTRACE)\n//ZAPOUT   DD  SYSOUT=*\n//ZAPIN    DD  DISP=SHR,DSN=GERHARD.MVS.ESPPARM(LOADZAPA)\n//SYSDEBUG DD  SYSOUT=*\n//SYSUDUMP DD  &DUMP.SYSOUT=*\n//SYSUDOMP DD  DSN=&UDUMP,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(TRK,(100,100),RLSE)\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  PRINT - PRINT THE TRACE DATA                                   **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//PTRACE EXEC  PGM=WYLCOPY,PARM=NOCC,COND=EVEN\n//SYSPRINT DD  DUMMY\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DISP=SHR,DSN=GERHARD.ZZTRACE\n//SYSUT2   DD  SYSOUT=*\n//**                                                                 **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  REFORMAT SYSUDUMP FOR 80 BYTE SCREEN                           **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//       EXEC  PGM=IEFBR14  HALFDUMP,COND= ONLY\n//SYSPRINT DD  DUMMY\n//SYSIN    DD  DUMMY\n//DUMPIN   DD  DISP=(OLD,DELETE),DSN=&UDUMP\n//DUMPOUT  DD  SYSOUT=*\n//**                                                                 **\n//**     PEND\n./ ADD NAME=ASMXTEST 8001-08079-09233-2348-00156-00155-00000-GERHARD\n//ASMXTEST PROC WORK=SYSDA,CC=0,\n//             UPDPRT='DUMMY,',              IEBUPDTE SOURCE LIST\n//             LOAD=,DECK=NO,LIST=,TEST=,XREF=,LCT=60,\n//             RENT=NO,TERM=,LOPT=',TEST,REUS',\n//             ESD=,RLD=NO,REF=SHORT,SPRM=DEBUG,\n//             ASM=X,ASMPRM=,ASMREG=4096K,TS='TERM=TS,',\n//             SRC='GERHARD.MVS.ESPSRC',     INPUT SOURCE\n//             MAC1='SYS1.MACLIB',\n//             MAC9='GERHARD.MVS.ESPMAC',\n//             OLIB='SYS1.ESPLIB',           LOAD LIB INPUT/OUTPUT\n//             MOD='SYS1.ESPLIB',            LOAD LIB INPUT\n//             PRG=TESTPGM, MEM=TESTPGM,  MEMNAME FOR EXEC / SYSADATA\n//             DUMP='DUMMY,',                SYSTEM DUMP IF NULL\n//             SYM='GERHARD.TEST.LOADLIB',   EXHB LIBRARY\n//             TRVOL=WORK01            TRACE DATA SET VOLUME\n//*\n//*            ACCOUNT=Z904 ; ADDED BY GERHARD\n//*            FOR ESP TESTING\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  UP     - TEMPORARY UPDATE OF MACROS AND SOURCE                 **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//U       EXEC PGM=IEBUPDTX,PARM='MOD,LISTALL,WYLBUR',REGION=1024K\n//SYSPRINT DD  &UPDPRT.SYSOUT=*\n//SYSUT1   DD  DSN=&SRC,DISP=SHR\n//SYSUT2   DD  DSN=&&UPSET,DISP=(,PASS),UNIT=&WORK,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=0),\n//             SPACE=(CYL,(2,2,17),RLSE,CONTIG)\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  DELETE - SCRATCH THE OLD TRACE DATA SET                        **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//DELETE   EXEC PGM=DELETE0,PARM='GERHARD.ZZTRACE,&TRVOL'\n//*      INCLUDE MEMBER=ZZSTEPLB\n//SYSPRINT DD  SYSOUT=*\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  ASM    - TEMPORARY ASSEMBLY OF ONE OR MORE EXHIBIT MODULES     **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//C       EXEC PGM=ASMANY&ASM,COND=(&CC,LT),TIME=120,REGION=&ASMREG,\n//             PARM=(&LOAD.OBJ,&DECK.DECK,&LIST.LIST,&TEST.TEST,\n//             '&XREF.XREF(&REF)','LINECOUNT(&LCT)',&RENT.RENT,\n//             &TERM.TERM,&ESD.ESD,&TERM.STMT,\n//             &RLD.RLD&ASMPRM,\n// 'SYSPARM(&SPRM)')\n//*\n//*TEPLIB  DD  DISP=SHR,DSN=&MOD\n//CONPRINT DD  &TS.SYSOUT=*\n//ASMTERM  DD  &TS.SYSOUT=*\n//ASMLIB   DD  DSN=*.U.SYSUT2,VOL=REF=*.U.SYSUT2,DISP=(OLD,PASS),\n//             DCB=BLKSIZE=32720\n//         DD  DISP=SHR,DSN=&MAC1            MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=SYS1.HASPSRC\n//         DD  DISP=SHR,DSN=GERHARD.MVS.PVTMACS\n//         DD  DISP=SHR,DSN=GERHARD.MVS.ESPMAC\n//         DD  DISP=SHR,DSN=GERHARD.COLEMAC\n//         DD  DISP=SHR,DSN=GERHARD.MVS.EXHSRC\n//         DD  DISP=SHR,DSN=GERHARD.MVS.ESPSRC\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=&MAC9            SOMETHING ELSE ?\n//         DD  DISP=SHR,DSN=&SRC       ORIGINL SOURCE\n//ASMUT1   DD  UNIT=&WORK,SPACE=(1700,(16000,4000))\n//ASMUT2   DD  UNIT=&WORK,SPACE=(1700,(16000,4000))\n//ASMUT3   DD  UNIT=&WORK,SPACE=(1700,(16000,4000))\n//ASMPRINT DD  SYSOUT=*,DCB=(RECFM=FBM,LRECL=121,BLKSIZE=0)\n//ASMPUNCH DD  SYSOUT=B,DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)\n//ASMGO    DD  DSN=&&LOADSET,SPACE=(80,(4000,4000)),DISP=(MOD,PASS),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=0),\n//             UNIT=(&WORK,SEP=(ASMUT3,ASMUT2,ASMUT1,ASMPRINT,ASMLIB))\n//ASMADATA DD  DISP=(NEW,PASS),DSN=&&DATA,UNIT=SYSDA,\n//             SPACE=(CYL,(5,5,5),RLSE)\n//ASMIN    DD  DSN=*.U.SYSUT2,VOL=REF=*.U.SYSUT2,DISP=(OLD,PASS)\n//OLDLIB   DD  DISP=SHR,DSN=&SRC\n//SYSIN    DD  DISP=SHR,DSN=GERHARD.MVS.ESPPARM(ASMXTEST)\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  LKED   - TEMPORARY LINK-EDIT                                   **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//L       EXEC PGM=IEWL,REGION=512K,COND=(&CC,LT),\n//             PARM=(LET,LIST,MAP&LOPT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN,DCB=BLKSIZE=400\n//SYSLMOD  DD  DSN=&&GOSET,UNIT=(&WORK,SEP=SYSLIN),DISP=(MOD,PASS),\n//             SPACE=(CYL,(5,2,41),,CONTIG)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=(&WORK,SEP=(SYSLMOD,SYSLIN)),\n//             SPACE=(3072,(50,20))\n//SYSLIB   DD  DSN=&MOD,DISP=SHR\n//         DD  DSN=&OLIB,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS1.ESPLIB         (SUB----)\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  GO     - TEST TEMPORARY EXHIBIT CODE                           **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//G       EXEC PGM=&PRG,REGION=4096K,COND=(&CC,LT),PARM=TEST,TIME=1\n//STEPLIB  DD DSN=*.L.SYSLMOD,VOL=REF=*.L.SYSLMOD,DISP=(OLD,PASS)\n//         DD  DISP=SHR,DSN=&SYM  (EXHB DEFINITIONS)\n//         DD  DISP=SHR,DSN=&MOD\n//         DD  DISP=SHR,DSN=&OLIB\n//SYSPRINT DD  SYSOUT=*\n//DEBTRACE DD  SYSOUT=*\n//SYSTRACE DD  DSN=GERHARD.ZZTRACE,DISP=(,CATLG,CATLG),\n//             VOL=SER=&TRVOL,UNIT=SYSALLDA,\n//             SPACE=(TRK,(100,100),RLSE,CONTIG)\n//*YSTRADA DD  DISP=(OLD,DELETE),DSN=&&DATA\n//*        DD  DISP=SHR,DSN=GERHARD.EXHADATA\n//*        DD  DISP=SHR,DSN=GERHARD.ESPADATA\n//SYSTROPT DD  DISP=SHR,DSN=GERHARD.ESPPARM(PGMTRACE)\n//SYSDEBUG DD  SYSOUT=*\n//SYSUDUMP DD  &DUMP.SYSOUT=*\n//SYSUDOMP DD  DSN=&UDUMP,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(TRK,(100,100),RLSE)\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  PRINT - PRINT THE TRACE DATA                                   **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//PTRACE EXEC  PGM=WYLCOPY,PARM=NOCC,COND=EVEN\n//SYSPRINT DD  DUMMY\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DISP=SHR,DSN=GERHARD.ZZTRACE\n//SYSUT2   DD  SYSOUT=*\n//**                                                                 **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//**  REFORMAT SYSUDUMP FOR 80 BYTE SCREEN                           **\n//**                                                                 **\n//*********************************************************************\n//**                                                                 **\n//       EXEC  PGM=IEFBR14  HALFDUMP,COND= ONLY\n//SYSPRINT DD  DUMMY\n//SYSIN    DD  DUMMY\n//DUMPIN   DD  DISP=(OLD,DELETE),DSN=&UDUMP\n//DUMPOUT  DD  SYSOUT=*\n//**                                                                 **\n//**     PEND\n./ ADD NAME=ASTANY   8002-05336-10027-1543-00065-00064-00000-GERHARD\n//ASTANY  PROC WORK=VIO,CC=0,PRG=ASMANYT,ASMREG=8192K,\n//             LOAD=,TEST=N,XREF=, LCT=60,\n//             RENT=N,TERM=,ADATA=,\n//             SPRM=,REF=S,ASMPRM=,\n//             MAC='SYS1.MACLIB',\n//             MAC1='SYS1.AMODGEN',\n//             MAC2='SYS1.HASPSRC', JES2\n//             MAC3='GERHARD.MVS.PVTMACS',\n//             MAC4='GERHARD.MVS.ESPMAC',\n//             MAC5='GERHARD.COLEMAC',\n//             MAC6='SYS1.MACLIB',  'SYS1.ZMACLIB', S/390 OP CODES\n//             MAC7='SYS1.MACLIB',\n//             MAC8='GERHARD.MVS.ESPSRC',\n//             MAC9='GERHARD.MVS.EXHSRC',\n//             SRC='GERHARD.MVS.ESPSRC',\n//             LIB='SYS1.ESPLIB',\n//             LIB2='SYS1.EXHLIB'\n//*\n//*********************************************************************\n//*            PRODUCTION COMPILE/LINK\n//*\n//*            TO SPECIFY ADDITIONAL OPTIONS, CODE ASMPRM=',OPT...'   *\n//*            TO OBTAIN A LONG XREF LIST, SPECIFY REF=FULL           *\n//*********************************************************************\n//*\n//*\n//C       EXEC PGM=&PRG,TIME=120,REGION=&ASMREG,COND=(&CC,LT),\n//             PARM=(&LOAD.O,&TEST.TE,&ADATA.AD,&TERM.T,'OP(370)',\n//             &XREF.X&REF,'SZ(6M)', 'LC(&LCT)',\n//             'FLAG(&RENT.RE)'&ASMPRM,\n// 'SP(&SPRM)')\n//*\n//STEPLIB  DD  DISP=SHR,DSN=GERHARD.TACHLIB\n//*\n//CONPRINT DD  SYSOUT=*\n//ASMTERM  DD  SYSOUT=*\n//ASMLIB   DD  DISP=SHR,DSN=&MAC,DCB=BLKSIZE=32720\n//         DD  DISP=SHR,DSN=&MAC1\n//         DD  DISP=SHR,DSN=&MAC2\n//         DD  DISP=SHR,DSN=&MAC3\n//         DD  DISP=SHR,DSN=&MAC4\n//         DD  DISP=SHR,DSN=&MAC5\n//         DD  DISP=SHR,DSN=&MAC6\n//         DD  DISP=SHR,DSN=&MAC7\n//         DD  DISP=SHR,DSN=&MAC8\n//         DD  DISP=SHR,DSN=&MAC9\n//         DD  DISP=SHR,DSN=&SRC\n//ASMUT1   DD  DSN=&&SYSUT1,UNIT=(&WORK,SEP=SYSLIB),\n//             SPACE=(1700,(4000,1000),,CONTIG)\n//ASMUT2   DD  DSN=&&SYSUT2,UNIT=(&WORK,SEP=(SYSUT1,SYSLIB)),\n//             SPACE=(1700,(4000,1000),,CONTIG)\n//ASMUT3   DD  DSN=&&SYSUT3,UNIT=(&WORK,SEP=(SYSUT2,SYSUT1)),\n//             SPACE=(1700,(4000,1000),,CONTIG)\n//ASMPRINT DD  SYSOUT=*\n//ASMPUNCH DD  SYSOUT=B,DCB=(RECFM=FB,LRECL=80,BLKSIZE=400)\n//ASMADATA DD  DISP=OLD,DSN=GERHARD.MVS.ESPADATA\n//ASMGO    DD  DSN=&&OBJ,UNIT=(&WORK,SEP=(SYSUT3,SYSUT1)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),\n//             SPACE=(80,(2000,1000),,CONTIG),DISP=(MOD,PASS)\n//ASMIN    DD  DISP=SHR,DSN=&SRC\n//SYSIN    DD  DDNAME=INPUT\n//*\n//LNKLIB   DD  DISP=SHR,DSN=&LIB\n//         DD  DISP=SHR,DSN=&LIB2\n//LNKLMOD  DD  DISP=SHR,DSN=&LIB\n./ ADD NAME=BSPGMADD 8001-08230-08230-0205-00013-00021-00000-GERHARD\n//BSPGMADD PROC\n//*\n//*   THIS PROGRAM ADDS THE SVC 120 INTERCEPT REQUIRED FOR PDPCLIB\n//*   IN A HERCULES/380 MVS/380 SYSTEM\n//*\n//*   PARM=INSTALL (or UPDATE) to install intercept\n//*   PARM=DELETE  (or REMOVE) to uninstall\n//*   PARM=DISPLAY (or none)   show status\n//*\n//GMADD   EXEC PGM=BSPGMADD,REGION=512K,TIME=2\n//*\n//SYSUDUMP DD  SYSOUT=X\n//*\n./ ADD NAME=BSPSSADD 8000-05050-05050-2355-00021-00021-00000-GERHARD\n//BSPSSADD PROC LIB='SYS1.PARMLIB',\n//             MEM=IEFSSN##\n//*\n//*   THIS PROGRAM BUILDS AND OPTIONALLY STARTS PREVIOUSLY UNDEFINED\n//*   SUBSYSTEMS. AN SSCT ENTRY IS BUILT FOR EACH UNIQUE NAME, AND\n//*   A START COMMAND IS ISSUED WHEN START(YES) IS SPECIFIED\n//*\n//*   DEFINITIONS ARE READ FROM ALL MEMBERS NAMED IEFSSNxx, AND\n//*   PROCESSED DEPENDING ON THE OPERATOR RESPONSE.\n//*\n//*   USE PARM=CHECK FOR TEXT VALIDATION\n//*   USE PARM=NOREPLYU AND MEM=IEFSSN00 TO PREVENT PAUSING\n//*\n//SSADD   EXEC PGM=BSPSSADD,REGION=512K,TIME=2,PARM=UPDATE\n//*\n//PARMLIB  DD  DISP=SHR,DSN=&LIB.(&MEM)\n//*\n//*YSPRINT DD  SYSOUT=X      (DYNAMICALLY ALLOCATED)\n//*\n//*YSUDUMP DD  SYSOUT=X      (DYNAMICALLY ALLOCATED)\n//*\n./ ADD NAME=CANCEL   8000-05035-05035-1426-00006-00006-00000-GERHARD\n//CANCEL  PROC CC=4\n//*\n//* THIS PROC WILL CANCEL SUBSEQUENT JOBS; ONE NAME PER SYSIN DATA CARD\n//*\n//CAN     EXEC PGM=JOBCANCL,COND=((&CC,GE),EVEN)\n//SYSPRINT DD  SYSOUT=*\n./ ADD NAME=COMMENT  8000-06328-06328-2358-00013-00013-00000-GERHARD\n//COMMENT PROC LIST=\n//        EXEC PGM=COMMENT\n//SYSPRINT DD &LIST.SYSOUT=*\n//*\n//*      THIS PROGRAM WRITES MESSAGES TO THE OPERATOR\n//*      MESSAGES ARE PLACED IN COLUMNS 2-72\n//*      AN ASTERISK IN COLUMN 1 TERMINATES INPUT AND\n//*      SOLICITS A RESPONSE FROM THE OPERATOR\n//*\n//*      USE EXEC COMMENT,LIST='DUMMY,' TO SUPPRESS LISTING IN JCL\n//*\n//*  SUPPLY INPUT VIA SYSIN  (DD * OR CARD FORMAT DSN)\n//*\n./ ADD NAME=COPYVOL  8000-05094-05094-1601-00061-00061-00000-GERHARD\n//COPYVOL  PROC VIN='?IN?',VOUT='?OUT?',U=SYSALLDA\n//*\n//*      THIS PROGRAM COPIES 1 TO 8 DISK PACKS TO A NEWLY CREATED\n//*      OUTPUT VOLUME - MUST BE RUN BY TECHNICAL OR SYSTEM STAFF.\n//*\n//*      VIN  - INPUT VOLUME SERIAL\n//*      VOUT - OUTPUT VOLUME SERIAL\n//*      U    - COMMON DEVICE TYPE\n//*\n//*      ADDITIONAL INPUT VOLUMES SPECIFIED VIA DISKIN2 TO DISKIN8\n//*\n//*      PARM OPTIONS :\n//*\n//*      ONE OF (COPY,COMP,CHGD,CONV) OR NONE\n//*            COPY (OR NONE) - COPY ALL DATA\n//*            COMP - USE IEBCOPY FOR ALL PARTITIONED DATASETS\n//*            CHGD - USE IEBCOPY FOR ALTERED PARTITIONED DATASETS\n//*            CONV - CONVERT ENTIRE INPUT FROM RAND TO OBS WYLBUR\n//*      VTOC - USE INPUT VTOC EXTENTS ON OUTPUT PACK\n//*      LIST (DEFAULT) - LIST 'NORMAL' MESSAGES\n//*      TERS OR MSGS - LIST WARNING AND ERROR MESSAGES ONLY\n//*      LOTS - LIST EXTRANEOUS MESSAGES (EXCLUDED DSNS)\n//*      IPLT OR TRK0 - COPY IPL TRACK\n//*      SWAP - EXCHANGE PACK LABELS AFTER COPY\n//*      DUMP - PRODUCE DUMP ON MINOR ERRORS\n//*      ASIS - TREAT ALL DATASETS AS UNMOVABLE\n//*      SYSU - TREAT ALL SYS1. DATASETS AS UNMOVABLE\n//*      SYSP - COPY SYS1. DATASETS PRIOR TO OTHERS\n//*      KEEP - KEEP ALL EXTENTS; INHIBIT MERGE OF CONTIGUOUS EXTENTS\n//*      RLSE OR TREL - RELEASE UNUSED TRACKS IN SEQUENTIAL DSNS\n//*      >yyddd - COPY ONLY DATASETS CREATED OR USED ON OR AFTER yyddd\n//*      <yyddd - COPY ONLY DATASETS USED PRIOR TO THE yyddd DATE\n//*\n//*      OPTIONAL SYSIN DATA (FREE FORMAT, COLUMNS 1-71)\n//*      OPERANDS INPUTNAME/MASK  RENAME/MASK\n//*\n//*      * - COMMENTS CARD\n//*      S OR I - INCLUDE DSN\n//*      X OR E - EXCLUDE DSN\n//*      R - RENAME DSN\n//*      U - TREAT DSN AS UNMOVABLE\n//*      K - KEEP DSN EXTENTS\n//*      F - FREE UNUSED TRACKS IN SEQUENTIAL DSNS\n//*      P - PRIORITY COPY OF DSN\n//*      A - ACCESS DATE CHECK (WITH INCLUDE/EXCLUDE ONLY) (DEFAULT)\n//*      B - BYPASS DATE CHECK (WITH INCLUDE/EXCLUDE ONLY)\n//*\n//*      N - NORMAL COPY; RESETS F, K AND P\n//*      1-8 - ONE TO EIGHT DIGITS FOR PACKS 1-8; DEFAULTS TO ALL\n//*\n//COPYVOL  EXEC PGM=COPYVOL,REGION=1024K,TIME=60,\n//             PARM='TRK0,FREE,CHGD'\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//COMPIN   DD  DUMMY\n//COMPOUT  DD  DUMMY\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,10)\n//DISKOUT  DD  VOL=(PRIVATE,SER=&VOUT),UNIT=&U,DISP=OLD\n//DISKIN1  DD  VOL=SER=&VIN,UNIT=&U,DISP=OLD\n//*\n./ ADD NAME=CRTNASTY 0100-03074-03074-1917-00016-00016-00000-GERHARD\n//CRTNASTY  PROC MEMBER=CRTNASTY\n//*\n//IEFPROC EXEC PGM=CRTNASTY,REGION=4096K,TIME=14,PERFORM=7,\n//             DYNAMNBR=2,DPRTY=(15,13)\n//*\n//IEFRDER  DD  DUMMY\n//*\n//*STEPLIB DD  DISP=SHR,DSN=&PDS,UNIT=3380,VOL=SER=PGM001\n//*\n//SYSPRINT DD  SYSOUT=C\n//*\n//SYSDEBUG DD  SYSOUT=C\n//SYSABEND DD  SYSOUT=C\n//*\n//SYSIN    DD  DISP=SHR,DSN=GERHARD.MVS.ESPPARM(&MEMBER)\n//*\n./ ADD NAME=DEL0     8000-06322-06322-0104-00007-00007-00000-GERHARD\n//DEL0   PROC\n//*    Delete data set or member specified in PARM field:\n//*      PARM='dsn;dsn(mem);dsn,volser'\n//*\n//D      EXEC  PGM=DELETE0\n//SYSPRINT DD  SYSOUT=Z\n//*\n./ ADD NAME=DISASM   8001-05211-05211-2150-00047-00044-00000-GERHARD\n//DISASM  PROC LIB='GERHARD.TEST.LOADLIB'\n//*\n//*   SAMPLE PROCEDURE (EDIT & COPY TO SYS2.PROCLIB) FOR DISASSEMBLER\n//*    ASSUMES PROGRAM WAS INSTALLED INTO YOUR TEST.LOADLIB (STEPLIB)\n//*   PREFERRED LOCATION IS SYS2.LINKLIB (OBVIATES STEPLIB DD)\n//*\n//* >>> CONTROL CARD INPUT SUPPLIED VIA DISIN DD CARD <<<\n//*\n//*\n//DISASM EXEC  PGM=DISASM01,REGION=1024K,TIME=1\n//STEPLIB  DD  DISP=SHR,DSN=GERHARD.TEST.LOADLIB\n//*\n//*  ALL SYS--- DD CARDS FOLLOWING ARE FOR INTERNAL ASSEMBLER CALLS\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  DISP=(,PASS),DSN=&&ASPT,UNIT=SYSDA,\n//             SPACE=(TRK,(100,100),RLSE),\n//             DCB=(RECFM=FBM,LRECL=121,BLKSIZE=1331)\n//SYSIN    DD  DISP=(,PASS),DSN=&&ASIN,UNIT=SYSDA,\n//             SPACE=(TRK,(15,15),RLSE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=19040)\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB,DCB=BLKSIZE=32720\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DISP=SHR,DSN=SYS1.HASPSRC\n//         DD  DISP=SHR,DSN=GERHARD.MVS.ESPMAC\n//         DD  DISP=SHR,DSN=GERHARD.MVS.PVTMACS\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(5,1))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(5,1))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(5,1))\n//SYSPUNCH DD  DUMMY\n//SYSUDUMP DD  SYSOUT=*\n//*  END ASSEMBLER CARDS\n//*\n//DISDEBUG DD  SYSOUT=*\n//DISPRINT DD  SYSOUT=*,DCB=BLKSIZE=1331\n//DISPUNCH DD  SYSOUT=*,DCB=BLKSIZE=3120\n//DISMOD   DD  DISP=SHR,DSN=&LIB\n//         DD  DISP=SHR,DSN=SYS1.LINKLIB\n//         DD  DISP=SHR,DSN=SYS1.LPALIB\n//         DD  DISP=SHR,DSN=SYS1.NUCLEUS\n//         DD  DISP=SHR,DSN=SYS1.VTAMLIB\n//         DD  DISP=SHR,DSN=SYS1.SVCLIB\n//         DD  DISP=SHR,DSN=SYS2.LINKLIB\n//         DD  DISP=SHR,DSN=SYS2.CMDLIB\n//         DD  DISP=SHR,DSN=SYS2.VTAMLIB\n//         DD  DISP=SHR,DSN=SYS1.ESPLIB\n//         DD  DISP=SHR,DSN=SYS1.EXHLIB\n//*\n./ ADD NAME=DUMPPDS  8002-06338-06339-1700-00025-00022-00000-GERHARD\n//DUMPPDS PROC F=999999,     FILE NUMBER\n//             FT=SL,        FILE TYPE (SL, NL, AL, ...)\n//             TDSN=,        TAPE DATA SET NAME\n//             DDSN=,        DASD DATA SET (SOURCE PDS)\n//             IX='GERHARD.MVS.',      HIGH LEVEL INPUT INDEX\n//             TU='3400-6',  TAPE UNIT/TYPE\n//             VS=           TAPE VOLUME SERIAL\n//*\n//*********************************************************************\n//**                                                                 **\n//**  COPY A PDS TO TAPE                                             **\n//**                                                                 **\n//*********************************************************************\n//*\n//COPY     EXEC PGM=IEBCOPY,REGION=4096K\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DISP=SHR,DSN=&IX.&DDSN\n//*\n//SYSUT2   DD  DISP=(OLD,PASS),DSN=&TDSN,\n//             VOL=SER=&VS,UNIT=&TU,LABEL=(&F,&FT)\n//*\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,4,,CONTIG)\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,4,,CONTIG)\n//*\n./ ADD NAME=DUMPSEQ  8001-06338-06338-1459-00024-00022-00000-GERHARD\n//DUMPSEQ PROC F=999999,     FILE NUMBER\n//             FT=SL,        FILE TYPE (SL, NL, AL, ...)\n//             TDSN=,        TAPE DATA SET NAME\n//             DDSN=,        DASD DATA SET (SOURCE DS)\n//             IX='GERHARD.MVS.',      HIGH LEVEL INPUT INDEX\n//             TU='3400-6',  TAPE UNIT/TYPE\n//             VS=           TAPE VOLUME SERIAL\n//*\n//*********************************************************************\n//**                                                                 **\n//**  COPY A SEQUENTIAL DATA SET TO TAPE                             **\n//**                                                                 **\n//*********************************************************************\n//*\n//GENER    EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=&IX.&DDSN\n//*\n//SYSUT2   DD  DISP=(OLD,PASS),DSN=&TDSN,\n//             DCB=&IX.&DDSN,\n//             VOL=SER=&VS,UNIT=&TU,LABEL=(&F,&FT)\n//*\n//SYSIN    DD  DUMMY\n//*\n./ ADD NAME=DYNAAPF  8000-06285-06285-0026-00015-00015-00000-GERHARD\n//DYNAAPF PROC PDS='LOAD-LIB',   Load library PDS to be added to APF   *\n//             VOL=          Volume if not same as Catalog entry\n//*\n//*  THIS PROGRAM ADDS A LOAD MODULE PDS TO THE AUTHORIZED PROGRAM\n//*    FACILITY TABLE (MAX OF 255 NAMES).\n//*\n//IEFPROC EXEC PGM=DYNAAPF,REGION=512K,PERFORM=7,DPRTY=(15,13),        *\n//             TIME=1439\n//*\n//*TEPLIB DD DISP=SHR,DSN=SYS1.ESPLIB\n//*\n//APFLIB  DD DISP=SHR,DSN=&PDS,UNIT=SYSALLDA,VOL=SER=&VOL\n//*\n//SYSABEND DD SYSOUT=A\n//*\n./ ADD NAME=DYNALPA  8000-06292-06292-1557-00016-00016-00000-GERHARD\n//DYNALPA PROC LPA=00,                 PROGxx SUFFIX IN SYS1.PARMLIB\n//             LIB1='SYS1.ESPLIB',     LOAD MODULE LIBRARY\n//             LIB2='SYS1.EXHLIB'      LOAD MODULE LIBRARY\n//*\n//*      USE AT SYSTEM START TO ADD MODULES TO LPA\n//*  (NOTE THAT IT IS CUMULATIVE; OLD MODULES NOT REMOVED)\n//*\n//DYNALPA EXEC  PGM=MODREP\n//*TEPLIB  DD  DISP=SHR,DSN=SYS1.ESPLIB\n//*\n//MODREP   DD  DISP=SHR,DSN=&LIB1\n//         DD  DISP=SHR,DSN=&LIB2\n//*\n//MODIN    DD  DISP=SHR,DSN=SYS1.PARMLIB(PROG&LPA)\n//*\n//SYSABEND  DD SYSOUT=C\n./ ADD NAME=FIXPACK  8001-05089-05089-2333-00025-00025-00000-GERHARD\n//FIXPACK PROC VS=VOLSER,DEV='SYSALLDA'\n//*\n//*            THIS IS A SYSTEMS PROCEDURE\n//*            ACCOUNT=Z904\n//*\n//*  THIS PROCEDURE WILL ATTEMPT TO CLEAN UP SOME VTOC ERRORS WHICH\n//*  RESULT FROM SYSTEM CRASHES DURING A VTOC UPDATE.  THE JOB WILL\n//*  FAIL ON A JCL ERROR IF THE VOLUME IS TOO FRAGMENTED TO PERMIT\n//*  CLEANUP.  THIS JOB SHOULD BE RUN WHEN NO OTHER JOBS WILL ACCESS\n//*  THE SAME PACK. PLEASE CONSULT SYSTEMS IF THE PACK STILL IS BAD\n//*  AFTER THIS RUN.\n//*\n//*\n//ZAP     EXEC PGM=AMASPZAP\n//STEPLIB  DD  DSN=SYS1.ESPLIB,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  VOL=SER=&VS,UNIT=&DEV,DISP=OLD,DSN=FORMAT4.DSCB\n//SYSIN    DD  DSN=GERHARD.MVS.ESPPARM(F4ZAPDOS),DISP=SHR\n//*\n//PAP     EXEC PGM=AMASPZAP,COND=(8,LT,ZAP)\n//DD       DD  VOL=SER=&VS,UNIT=&DEV,DSN=&&DUMMY,SPACE=(6447,1)\n//STEPLIB  DD  DSN=SYS1.ESPLIB,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  VOL=SER=&VS,UNIT=&DEV,DISP=OLD,DSN=FORMAT4.DSCB\n//SYSIN    DD  DSN=GERHARD.MVS.ESPPARM(F4ZAPOS),DISP=SHR\n./ ADD NAME=HOB      8001-05034-05034-1525-00037-00037-00000-GERHARD\n//HOB    PROC  PDS='GERHARD.MVS.ESPJOB',\n//             NAME=HELP,    NAME OF JOB (GROUP) TO BE SUBMITTED\n//             RESTART=,     START AT A SPECIFIC JOB\n//             PICK=,        SUBMIT ONLY A SINGLE JOB IN A GROUP\n//             DAY=,         OVERRIDE CURRENT DAY\n//             TEST=IN,      CHECK JES2 INPUT QUEUES FOR DUPLICATES\n//             SET=,         SET OPTIONAL PARAMETERS\n//             LIST='DUMMY,',OC=C,  OUTPUT LIST/CLASS OPTIONS\n//             U=,V=         PDS VOLSER/UNIT OVERRIDES\n//*\n//*      USE:  START HOB,NAME=MEMBER   TO SUBMIT CANNED JOB(S)\n//*\n//*      USE:  START HOB,NAME=MEMBER,PICK=JOBNAME   TO SUBMIT A\n//*                          SINGLE JOB IN THE MEMBER\n//*      USE:  START HOB,NAME=MEMBER,RESTART=JOBNAME   TO SUBMIT\n//*                          THE SPECIFIED AND ALL FOLLOWING JOBS.\n//*            USE DAY=YYDDD TO FORCE DATE SPECIFIC PROCESSING.\n//*            USE TEST=NO TO BYPASS JOBQUEUE TESTS; TEST=ANY TO\n//*              SUPPRESS SUBMISSION OF JOBS ALREADY ON 'ANY' QUEUE\n//*              DEFAULT IS TEST=IN, SUPPRESSES FOR DUPE ON INPUT\n//*    IF A START HOB DOES NOT READ ANYTHING, CHECK THE MEMBER FOR\n//*      //*PICK AND //*SKIP CARDS - SOME JOBS WILL BE SUBMITTED\n//*      ON SPECIFIC DAYS (WEEKS, ETC.) ONLY, AND WILL NOT WORK\n//*      WHEN STARTED AT THE WRONG TIME.\n//*\n//IEFPROC EXEC PGM=HOB,PARM=('R=&RESTART,P=&PICK,D=&DAY,',\n//             'T=&TEST\\&SET')\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.ESPLIB\n//SYSPRINT DD  &LIST.SYSOUT=&OC\n//SYSUT1   DD  DDNAME=IEFRDER\n//IEFRDER  DD  DISP=SHR,UNIT=&U,VOL=SER=&V,\n//             DSN=&PDS.(&NAME)\n//SYSUDUMP DD  SYSOUT=&OC\n//SYSUT2   DD  SYSOUT=(A,INTRDR)   PRE-MVS: UNIT=INTRDR\n//*\n//*\n//*\n./ ADD NAME=ITERATE  8001-05198-05198-1402-00026-00021-00000-GERHARD\n//ITERATE PROC SRC='GERHARD.MVS.EXHSRC',\n//             JCL='GERHARD.MVS.CNTL(PATSYS)',\n//             MEM='?WHAT?'\n//*\n//*   THIS PROGRAM EDITS AND SUBMITS A JOB STREAM\n//*     JCL INPUT:  SYSIN OR JCL DD\n//*     PDS INPUT:  SYSLIB (UNCONCATENATED PDS)\n//*\n//*   PARM OPTIONS: ASM      - RETAIN COLUMNS 72-80\n//*                 JCL      - RETAIN COLUMNS 72-80; NEVER EXPAND\n//*                            FIRST CARD, WITH LIST OPTION, MULTIPLY\n//*                 LIST     - ITERATE MEMBER NAME IN PLACE\n//*                            DEFAULT REPEATS ENTIRE JCL PER MEMBER\n//*\n//GENERATE EXEC PGM=ITERATE,REGION=4096K,TIME=5,PARM=JCL\n//*\n//SYSLIB   DD  DISP=SHR,DSN=&SRC.(&MEM)\n//*\n//SYSIN    DD  DISP=SHR,DSN=&JCL\n//*\n//SUMPRINT DD  SYSOUT=*\n//*\n//SYSPRINT DD  SYSOUT=*\n//*\n//SYSPUNCH DD  SYSOUT=(A,INTRDR)     JOB SUBMISSION\n//*\n./ ADD NAME=LABEL    0100-02251-02251-1037-00013-00013-00000-GERHARD\n//LABEL    PROC T='560'\n//*\n//*        ACCOUNT=0904\n//*\n//LABEL    EXEC PGM=LABEL\n//       INCLUDE MEMBER=ZZSTEPLB\n//IEFRDER  DD  DUMMY\n//TAPE     DD  VOL=SER=TAP999,DISP=(,KEEP),\n//             UNIT=(&T,,DEFER),LABEL=(,BLP,EXPDT=98000)\n//*\n//*YSABEND DD  SYSOUT=A\n//*\n//*        PEND\n./ ADD NAME=LOADPDS  0102-02236-02236-1202-00029-00010-00029-GERHARD\n//LOADPDS PROC F=999999,     FILE NUMBER\n//             FT=SL,        FILE TYPE (SL, NL, AL, ...)\n//             TDSN=,        TAPE DATA SET NAME\n//             VS=,          TAPE VOLUME SERIAL\n//             DDSN=,        DASD DATA SET\n//             PRI=15,       PRIMARY IN UNITS OF TYP\n//             SEC=15,       SECONDARY IN UNITS OF TYP\n//             MEM=81,       NUMBER OF DIRECTORY BLOCKS\n//             TYP=TRK,      ALLOCATION TYPE (TRK, CYL, BLK)\n//             DCB=0         NEW DCB PARAMETERS\n//*\n//*********************************************************************\n//**                                                                 **\n//**  LOAD A SEQUENTIAL DATA SET FROM TAPE                           **\n//**                                                                 **\n//*********************************************************************\n//*\n//COPY     EXEC PGM=IEBCOPY,REGION=4M\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=(OLD,PASS),DSN=&TDSN,\n//             VOL=SER=&VS,UNIT=3480,LABEL=(&F,&FT)\n//*\n//SYSUT2   DD  DISP=(,CATLG),DSN=&DDSN,\n//             SPACE=(&TYP,(&PRI,&SEC,&MEM),RLSE),\n//             DCB=(&DCB)\n//*\n//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,4)\n//SYSUT4   DD UNIT=SYSDA,SPACE=(CYL,4)\n//*\n./ ADD NAME=LOADSEQ  0103-02236-02236-1224-00027-00009-00027-GERHARD\n//LOADSEQ PROC F=999999,     FILE NUMBER\n//             FT=SL,        FILE TYPE (SL, NL, AL, ...)\n//             TDSN=,        TAPE DATA SET NAME\n//             VS=,          TAPE VOLUME SERIAL\n//             DDSN=,        DASD DATA SET\n//             PRI=15,       PRIMARY IN UNITS OF TYP\n//             SEC=15,       SECONDARY IN UNITS OF TYP\n//             TYP=TRK,      ALLOCATION TYPE (TRK, CYL, BLK)\n//             DCB=0         NEW DCB PARAMETERS\n//*\n//*********************************************************************\n//**                                                                 **\n//**  LOAD A SEQUENTIAL DATA SET FROM TAPE                           **\n//**                                                                 **\n//*********************************************************************\n//*\n//GENER    EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=(OLD,PASS),DSN=&TDSN,\n//             VOL=SER=&VS,UNIT=3480,LABEL=(&F,&FT)\n//*\n//SYSUT2   DD  DISP=(,CATLG),DSN=&DDSN,\n//             SPACE=(&TYP,(&PRI,&SEC),RLSE),\n//             DCB=(&DCB)\n//*\n//SYSIN    DD  DUMMY\n//*\n./ ADD NAME=LOADUPDT 0102-02236-02236-1310-00027-00029-00005-GERHARD\n//LOADUPDT PROC F=999999,     FILE NUMBER\n//             FT=SL,        FILE TYPE (SL, NL, AL, ...)\n//             TDSN=,        TAPE DATA SET NAME\n//             VS=,          TAPE VOLUME SERIAL\n//             DDSN=,        DASD DATA SET\n//             PRI=15,       PRIMARY IN UNITS OF TYP\n//             SEC=15,       SECONDARY IN UNITS OF TYP\n//             MEM=81,       NUMBER OF DIRECTORY BLOCKS\n//             TYP=TRK,      ALLOCATION TYPE (TRK, CYL, BLK)\n//             DCB=0         NEW DCB PARAMETERS\n//*\n//*********************************************************************\n//**                                                                 **\n//**  LOAD A SEQUENTIAL DATA SET FROM TAPE TO A CARD PDS             **\n//**                                                                 **\n//*********************************************************************\n//*\n//UPDT     EXEC PGM=IEBUPDTX,REGION=4M,\n//             PARM='NOCHAIN,NOLISTING,NOSSI'\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DISP=(OLD,PASS),DSN=&TDSN,\n//             VOL=SER=&VS,UNIT=3480,LABEL=(&F,&FT)\n//*\n//SYSUT2   DD  DISP=(,CATLG),DSN=&DDSN,\n//             SPACE=(&TYP,(&PRI,&SEC,&MEM),RLSE),\n//             DCB=(&DCB)\n//*\n./ ADD NAME=MODREP   8000-06284-06284-0212-00012-00012-00000-GERHARD\n//MODREP  PROC PDS='SYS1.ESPLIB'\n//*\n//*      UTILITY TO LOAD MODULES INTO THE LINK PACK AREA FOR TESTING\n//*      PRIOR TO MOVING TO SYS1.LPALIB\n//*\n//       EXEC  PGM=MODREP,REGION=256K,TIME=1439\n//*\n//MODREP   DD  DISP=SHR,DSN=&PDS\n//*\n//*\n//*\n//SYSABEND DD  SYSOUT=C\n./ ADD NAME=NETINIT,SSI=00092266\n//NETINIT  PROC CMD=A2\n//*\n//*      THIS PROGRAM STARTS THE VTAM DEPENDENT APPLICATIONS NAMED\n//*      IN THE PARMLIB MEMBER IN APPROPRIATE SEQUENCE AFTER VTAM\n//*      HAS BEEN INITIALIZED.\n//*\n//NETINIT  EXEC PGM=NETINIT,DPRTY=(15,13)\n//*\n//SYSIN    DD   DSN=SYS1.PARMLIB(NETCMD&CMD),DISP=SHR\n//SYSOUT   DD   SYSOUT=Z\n//COMTEN   DD   UNIT=522      UTILITY SUB-CHANNEL\n//SYSUDUMP DD   SYSOUT=A\n//*\n./ ADD NAME=NETSOL70 0102-97289-08125-1732-00017-00016-00000-GERHARD\n//NETSOL70 PROC NAME=NETSOL70,INIT=NETSINIT ,NETSOL=NETSOL\n//*\n//NETSOL EXEC PGM=&NAME,DPRTY=(15,14),PERFORM=8,REGION=8192K,TIME=1439\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.ESPLIB\n//         DD  DISP=SHR,DSN=SYS1.VTAMLIB\n//SYSIN    DD  DISP=SHR,DSN=GERHARD.MVS.ESPPARM(&INIT)\n//*        DD  DISP=SHR,DSN=GERHARD.ESPCTL(NETSLA00) ITT-A       87137\n//*        DD  DISP=SHR,DSN=GERHARD.ESPCTL(NETSLB00) ITT-B       87137\n//*        DD  DISP=SHR,DSN=GERHARD.ESPCTL(NETSLC00) ITT-C       87137\n//*        DD  DISP=SHR,DSN=GERHARD.ESPCTL(NETSLD00) ITT-D       87274\n//*        DD  DISP=SHR,DSN=GERHARD.ESPCTL(NETSFRA)  FRA         87166\n//*        DD  DISP=SHR,DSN=GERHARD.ESPCTL(NETSDIAL) NTO/COMMTEX 88182\n//*        DD  DISP=SHR,DSN=GERHARD.ESPCTL(NETSLE00) AT&T-E      90115\n//*\n//SYSOUT   DD  SYSOUT=C\n//SYSUDUMP DD  SYSOUT=C\n//*NEWS     DD  DISP=SHR,DSN=SYS1.HASPMSG(CURRENT)\n./ ADD NAME=OSMGCR   8001-05204-05204-0057-00008-00011-00000-GERHARD\n//OSMGCR   PROC\n//*\n//*   ISSUE PARM AND/OR SYSIN AS OS COMMANDS\n//*\n//COMMAND EXEC PGM=OSMGCR\n//*\n//SYSPRINT DD  SYSOUT=*\n//*\n./ ADD NAME=PAUSE    0101-02235-06328-2359-00013-00013-00000-GERHARD\n//PAUSE   PROC LIST=\n//        EXEC PGM=PAUSE\n//SYSPRINT DD &LIST.SYSOUT=*\n//*\n//*      THIS PROGRAM WRITES MESSAGES TO THE OPERATOR\n//*      MESSAGES ARE PLACED IN COLUMNS 2-72\n//*      AN ASTERISK IN COLUMN 1 TERMINATES INPUT AND\n//*      SOLICITS A RESPONSE FROM THE OPERATOR\n//*\n//*      USE EXEC PAUSE,LIST='DUMMY,' TO SUPPRESS LISTING IN JCL\n//*\n//*  SUPPLY INPUT VIA SYSIN  (DD * OR CARD FORMAT DSN)\n//*\n./ ADD NAME=PDSSCAN,SSI=03882130\n//PDSSCAN PROC PRINT=,PUNCH='DUMMY,',UPDTE='DUMMY,'\n//PDSSCAN EXEC PGM=PDSSCAN,REGION=128K\n//SUMPRINT DD  SYSOUT=*      SUMMARY/ERROR MESSAGES\n//SYSPRINT DD  &PRINT.SYSOUT=*         LISTING\n//SYSPUNCH DD  &PUNCH.SYSOUT=B         SEQUENTIAL PUNCH\n//SYSUPDTE DD  &UPDTE.SYSOUT=B         IEBUPDTE SYSIN FORMAT\n//*\n//*   PDSSCAN SCANS THROUGH CARD AND WYLBUR FORMAT DISK DATASETS\n//*            FOR CHARACTER STRINGS SPECIFIED VIA SYSIN. ON MATCH\n//*            PRODUCES MEMBER NAME AND MATCHING CARD(S).\n//*      INPUT: ONE OR MORE DD CARDS SPECIFYING A DISK DATASET\n//*            DSORG=PS/PO/DA  RECFM=U (WYLBUR EDIT) OR F(B),80\n//*            DDNAME IS OF THE FORM SYSUTXXX, WHERE XXX IS UNIQUE.\n//*            A MEMBER NAME ON THE DD IS TREATED AS A MASK,\n//*            FILLED WITH TRAILING BLANKS. A MINUS SIGN IS USED TO\n//*            PERMIT ANY CHARACTER TO MATCH THE MASK POSITION, BUT\n//*            IS INVALID IN THE FIRST CHARACTER POSITION.\n//*            DD CARDS MAY SPECIFY DIFFERENT TYPES FOR THE SAME\n//*            RUN, BUT MUST NOT BE CONCATENATED.\n//*         DSNAMES ON THE DD CARD MAY ALSO SPECIFY MASK OPTIONS.\n//*            A TRAILING VALUE OF DSN.ALL WILL TREAT THE LEADING\n//*            TEXT AS A MASK FILLED WITH MINUS SIGNS.\n//*            A VALUE OF PDS.ALL WILL RESTRICT THE DSCB SEARCH ON\n//*            THE VOLUME TO PARTITIONED DATASETS.\n//*            ANY MINUS SIGN IN THE NAME IS TREATED AS A MASK REQUEST.\n//*            IF NEITHER PDS.ALL NOR DSN.ALL IS SPECIFIED, THE MASK\n//*            WILL NOT BE FILLED WITH MINUS SIGNS, BUT BLANKS.\n//*            FOR ANY MASKED DSN FORM, THE DSN SHOULD BE IN QUOTES,\n//*            AND THE UNIT AND VOL=SER PARAMETERS ARE REQUIRED.\n//*      SYSIN:  (OPTIONAL) CARDS SPECIFYING TEXT TO BE SEARCHED FOR.\n//*        FORM IS 'STRING' (STARTCOL,ENDCOL)   OR\n//*        \"STRING\" (STARTCOL)  OR X'HEXTTEXT' (COL...)\n//*        EMBEDDED QUOTES/APOSTROPHES MUST BE DOUBLED IF THEY MATCH\n//*        THE FRAMING CHARACTERS; SINGLE IF THE OPPOSITE FRAMING IS\n//*        USED. E.G. :\n//*          \"DON'T\"   OR 'DON''T'   BUT NOT 'DON'T'\n//*            'ENDCOL' IS LAST COLUMN OF START CHARACTER.\n//*      OUTPUT: AT LEAST ONE OF FOUR DD CARDS MUST BE SUPPLIED:\n//*        SUMPRINT (OR SYSTERM)- VBA,133  INDEX AND ERROR MESSAGES\n//*        SYSPRINT - VBA,133 LISTING WITH HEADINGS\n//*        SYSPUNCH - FB,80   PUNCH DECK, NO SEPARATION BETWEEN MEMBERS\n//*        SYSUPDTE - FB,80   IEBUPDTE INPUT FORMAT (WITH ./ CARDS)\n//*      PARM OPTIONS:\n//*        %   PRODUCE MICROFICHE EYEBALL HEADERS (12 LINE MEMBER NAME)\n//*        &   INCLUDE ONLY MEMBERS WITH ' MACRO ' ON FIRST CARD\n//*        \u00ac   EXCLUDE MEMBERS WITH ' MACRO ' ON FIRST CARD (COL 1-16)\n//*        #   PLACE WYLBUR LINE NUMBERS IN COLUMNS 73-80\n//*        INTEGER    -\"-\n//*        EDIT  PLACE WYLBUR LINE NUMBERS IN 73-80 IN EDIT FORMAT\n//*        HWD OR HALFWORD - INPUT LINE NUMBERS IN RAND FORMAT\n//*        OSI   INPUT LINE NUMBERS IN OSI FORMAT\n//*        >NAME  - PROCESS MEMBERS .GE. SPECIFIED NAME ONLY\n//*        <NAME  - PROCESS MEMBERS .LE. SPECIFIED NAME ONLY\n//*        =MASK  - PROCESS MEMBERS MATCHING THE MASK ONLY; THIS MASK\n//*            IS OVERRIDDEN BY A DD CARD MASK.  MASK IS FILLED WITH\n//*            TRAILING BLANKS IF SHORT; MINUS SIGN IS USED TO MATCH\n//*            ANY CHARACTER.\n//*        /MASK  - SKIP MEMBERS MATCHING THE MASK. MASK IS FILLED WITH\n//*            MINUS SIGNS IF SHORT. BLANKS ARE PERMITTED (MATCHED),\n//*            MINUS SIGNS WILL PERMIT ANY CHARACTER.\n//*        :SSIMASK - MASK TO MATCH SSI FIELD. FILLED WITH MINUS SIGNS\n//*            IF SHORT. SSI INFORMATION IS UNPACKED PRIOR TO TEST.\n//*            IF SSI DOES NOT EXIST, A VALUE OF ZERO WILL BE USED.\n//*            NOTE THAT ONLY MINUS AND HEX BYTES (0-9,A-F) ARE VALID.\n//*        UP= ADD, REP OR CHG - SPECIFIES THE IEBUPDTE CONTROL VERB\n//*            TO BE GENERATED. DEFAULT IS CHG (CHANGE)\n//*        UPLIST=ALL - REQUESTS LIST=ALL ON SYSUPDTE OUTPUT\n//*        UPLIST=NO  - SUPPRESSES LIST=ALL ON SYSUPDTE (DEFAULT)\n//*\n//*        START=    STARTING RELATIVE LINE TO BE PRINTED\n//*                  DEFAULT IS 1; DOES NOT AFFECT OTHER OUTPUT\n//*        END=      END LINE TO BE PRINTED\n//*        INCR=     INCREMENT AT WHICH TO PRINT LINES\n//*        LIMIT= OR LIM=  MAXIMUM LINES TO PRINT (PER DSN/MEMBER)\n//*\n//*        ALIAS=SKIP   IGNORE ALIAS ENTRIES (DEFAULT)\n//*        ALIAS= OR ALIAS=MEMBER  TREAT ALIAS ENTRIES AS MEMBERS\n//*\n./ ADD NAME=PRINTALL,SSI=03882130\n//PRINTALL PROC\n//PRINTALL EXEC PGM=PRINTALL,REGION=128K\n//*\n//SYSPRINT DD  SYSOUT=*\n//*\n//*      THIS PROCEDURE PRINTS OR DUMPS A SEQUENTIAL FILE.\n//*      THE FIRST FILE TO BE PROCESSED IS SPECIFIED ON A SYSUT1 DD\n//*      CARD. ADDITIONAL FILES MAY BE SPECIFIED AS SYSUT2 TO SYSUT99.\n//*      REGION - USE 64K TO 196K DEPENDING ON BLOCKSIZE.\n//*\n//*      PARM FORMAT : ONE TO THREE NUMERIC FIELDS, SEPARATED BY\n//*            COMMAS OR OPTION BYTES. USE EXTRA COMMA FOR MISSING\n//*            NUMERIC FIELD.\n//*      1ST NUMERIC FIELD - MAXIMUM NUMBER OF RECORDS/BLOCKS PROCESSED\n//*      2ND FIELD - STARTING RECORD/BLOCK NUMBER\n//*      3RD FIELD - LAST RECORD/BLOCK TO PROCESS\n//*\n//*  PRINT OPTIONS :\n//*      L     (DEFAULT) PRINT 100 CHARACTERS PER LINE\n//*      H     PRINT HEXADECIMAL DUMP; 48 BYTES PER LINE\n//*      D     PRINT HEX AND CHARACTER; 32 BYTES PER LINE\n//*      V     PRINT CHARACTERS AND HEX IN VERTICAL (3 LINE) FORMAT;\n//*            100 BYTES PER LINE\n//*      Q     CONVERT INPUT DATA FROM ASCII TO EBCDIC\n//*      F     CONVERT INPUT FROM 9-BIT ASCII FIELD-DATA FORMAT\n//*\n//*  PROCESSING OPTIONS (IF NONE, DEFAULTS TO BLOCK MODE)\n//*      R     PROCESS RECORDS RATHER THAN BLOCKS. REQUIRES DCB\n//*            PARAMETERS (FROM LABELLED TAPE, DISK, OR FROM DD CARD)\n//*      S     PROCESS RECORDS RATHER THAN BLOCKS. FOR RECFM=V(B)S,\n//*            SEGMENTS UP TO 32K ARE CONSOLIDATED INTO SINGLE RECORDS.\n//*      W     DEBLOCK FROM WYLBUR EDIT FORMAT (RECFM=U)\n//*      K     (DIRECT ACCESS) TREAT KEYS AS DATA; FORCES BLOCK MODE\n//*      I     (R/S) INCLUDE RDW/SDW WITH DATA.\n//*\n//*  CONTEXT SELECTION OPTION - INCLUDE A SYSIN DD WITH REQUESTS :\n//*      'STRING' (SCOL,ECOL)          ONE REQUEST PER CARD\n//*\n//*      WHERE 'STRING' IS TEXT TO BE SELECTED. MAY BE IN THE FORM\n//*      'STRING', \"STRING\" AND X'HEXSTRING'.  ONLY RECORDS CONTAINING\n//*      THE STRING ARE PRINTED.\n//*      'SCOL' - STARTING COLUMN TO SCAN (DEFAULT IS 1)\n//*      'ECOL' - END COLUMN; DEFAULT IS 'SCOL' WHEN SPECIFIED, ELSE\n//*            END OF RECORD.\n//*\n./ ADD NAME=PUNK,SSI=03882130\n//PUNK   PROC  PRINT=,PUNCH='DUMMY,',UPDTE='DUMMY,'\n//PUNK   EXEC  PGM=PUNK,REGION=128K\n//SUMPRINT DD  SYSOUT=*      SUMMARY/ERROR MESSAGES\n//SYSPRINT DD  &PRINT.SYSOUT=*         FORMATTED LISTING\n//SYSPUNCH DD  &PUNCH.SYSOUT=B         SEQUENTIAL PUNCH\n//SYSUPDTE DD  &UPDTE.SYSOUT=B         IEBUPDTE SYSIN FORMAT\n//*\n//*   PUNK  PROCESSES CARD AND WYLBUR FORMAT DISK DATASETS.\n//*            SCAN OPTIONS CAUSE THE ENTIRE MEMBER TO BE PROCESSED\n//*            ON A MATCH.  LIST=SCAN PRINTS ONLY SCAN MATCHES.\n//*      INPUT: ONE OR MORE DD CARDS SPECIFYING A DISK DATASET\n//*            DSORG=PS/PO/DA  RECFM=U (WYLBUR EDIT) OR F(B),80\n//*            DDNAME IS OF THE FORM SYSUTXXX, WHERE XXX IS UNIQUE.\n//*            A MEMBER NAME ON THE DD IS TREATED AS A MASK,\n//*            FILLED WITH TRAILING BLANKS. A MINUS SIGN IS USED TO\n//*            PERMIT ANY CHARACTER TO MATCH THE MASK POSITION, BUT\n//*            IS INVALID IN THE FIRST CHARACTER POSITION.\n//*            DD CARDS MAY SPECIFY DIFFERENT TYPES FOR THE SAME\n//*            RUN, BUT MUST NOT BE CONCATENATED.\n//*         DSNAMES ON THE DD CARD MAY ALSO SPECIFY MASK OPTIONS.\n//*            A TRAILING VALUE OF DSN.ALL WILL TREAT THE LEADING\n//*            TEXT AS A MASK FILLED WITH MINUS SIGNS.\n//*            A VALUE OF PDS.ALL WILL RESTRICT THE DSCB SEARCH ON\n//*            THE VOLUME TO PARTITIONED DATASETS.\n//*            ANY MINUS SIGN IN THE NAME IS TREATED AS A MASK REQUEST.\n//*            IF NEITHER PDS.ALL NOR DSN.ALL IS SPECIFIED, THE MASK\n//*            WILL NOT BE FILLED WITH MINUS SIGNS, BUT BLANKS.\n//*            FOR ANY MASKED DSN FORM, THE DSN SHOULD BE IN QUOTES,\n//*            AND THE UNIT AND VOL=SER PARAMETERS ARE REQUIRED.\n//*      SYSIN:  (OPTIONAL) CARDS SPECIFYING TEXT TO BE SEARCHED FOR.\n//*        FORM IS 'STRING' (STARTCOL,ENDCOL)   OR\n//*        \"STRING\" (STARTCOL)  OR X'HEXTTEXT' (COL...)\n//*        EMBEDDED QUOTES/APOSTROPHES MUST BE DOUBLED IF THEY MATCH\n//*        THE FRAMING CHARACTERS; SINGLE IF THE OPPOSITE FRAMING IS\n//*        USED. E.G. :\n//*          \"DON'T\"   OR 'DON''T'   BUT NOT 'DON'T'\n//*            'ENDCOL' IS LAST COLUMN OF START CHARACTER.\n//*      OUTPUT: AT LEAST ONE OF FOUR DD CARDS MUST BE SUPPLIED:\n//*        SUMPRINT (OR SYSTERM)- VBA,133  INDEX AND ERROR MESSAGES\n//*        SYSPRINT - VBA,133 LISTING WITH HEADINGS\n//*        SYSPUNCH - FB,80   PUNCH DECK, NO SEPARATION BETWEEN MEMBERS\n//*        SYSUPDTE - FB,80   IEBUPDTE INPUT FORMAT, WITH ./ ADD CARDS\n//*      PARM OPTIONS:\n//*        %   PRODUCE MICROFICHE EYEBALL HEADERS (12 LINE MEMBER NAME)\n//*        &   INCLUDE ONLY MEMBERS WITH ' MACRO ' ON FIRST CARD\n//*        \u00ac   EXCLUDE MEMBERS WITH ' MACRO ' ON FIRST CARD (COL 1-16)\n//*        #   PLACE WYLBUR LINE NUMBERS IN COLUMNS 73-80\n//*        INTEGER    -\"-\n//*        EDIT  PLACE WYLBUR LINE NUMBERS IN 73-80 IN EDIT FORMAT\n//*        HWD OR HALFWORD - INPUT LINE NUMBERS IN RAND FORMAT\n//*        OSI   INPUT LINE NUMBERS IN OSI FORMAT\n//*        >NAME  - PROCESS MEMBERS .GE. SPECIFIED NAME ONLY\n//*        <NAME  - PROCESS MEMBERS .LE. SPECIFIED NAME ONLY\n//*        =MASK  - PROCESS MEMBERS MATCHING THE MASK ONLY; THIS MASK\n//*            IS OVERRIDDEN BY A DD CARD MASK.  MASK IS FILLED WITH\n//*            TRAILING BLANKS IF SHORT; MINUS SIGN IS USED TO MATCH\n//*            ANY CHARACTER.\n//*        /MASK  - SKIP MEMBERS MATCHING THE MASK. MASK IS FILLED WITH\n//*            MINUS SIGNS IF SHORT. BLANKS ARE PERMITTED (MATCHED),\n//*            MINUS SIGNS WILL PERMIT ANY CHARACTER.\n//*        :SSIMASK - MASK TO MATCH SSI FIELD. FILLED WITH MINUS SIGNS\n//*            IF SHORT. SSI INFORMATION IS UNPACKED PRIOR TO TEST.\n//*            IF SSI DOES NOT EXIST, A VALUE OF ZERO WILL BE USED.\n//*            NOTE THAT ONLY MINUS AND HEX BYTES (0-9,A-F) ARE VALID.\n//*        UP= ADD, REP OR CHG - SPECIFIES THE IEBUPDTE CONTROL VERB\n//*            TO BE GENERATED. DEFAULT IS ADD.\n//*        UPLIST=ALL - REQUESTS LIST=ALL ON SYSUPDTE OUTPUT (DEFAULT)\n//*        UPLIST=NO  - SUPPRESSES LIST=ALL ON SYSUPDTE OUTPUT\n//*\n//*        START=    STARTING RELATIVE LINE TO BE PRINTED\n//*                  DEFAULT IS 1; DOES NOT AFFECT OTHER OUTPUT\n//*        END=      END LINE TO BE PRINTED\n//*        INCR=     INCREMENT AT WHICH TO PRINT LINES\n//*        LIMIT= OR LIM=  MAXIMUM LINES TO PRINT (PER DSN/MEMBER)\n//*\n//*        ALIAS=SKIP   IGNORE ALIAS ENTRIES (DEFAULT)\n//*        ALIAS= OR ALIAS=MEMBER  TREAT ALIAS ENTRIES AS MEMBERS\n//*\n./ ADD NAME=PURGE    8001-05267-05267-0037-00008-00008-00000-HERC01\n//PURGE   PROC CC=4\n//*\n//*\n//REL     EXEC PGM=JOBPURGE,COND=(&CC,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//*  THIS PROC WILL PURGE OUTPUT SPECIFIED ON SYSIN; ONE NAME PER CARD\n//*\n./ ADD NAME=RELEASE  8000-05035-05035-1427-00008-00008-00000-GERHARD\n//RELEASE PROC CC=4\n//*\n//*\n//REL     EXEC PGM=JOBRELSE,COND=(&CC,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//*  THIS PROC WILL RELEASE JOBS SPECIFIED ON SYSIN; ONE NAME PER CARD\n//*\n./ ADD NAME=SHUTDOWN 8000-06177-06177-0001-00010-00010-00000-GERHARD\n//SHUTDOWN PROC\n//*\n//*   THIS PROC (S SHUTDOWN) INVOKES VOLKER BANDKE'S BSPPILOT\n//*   TO DO A QUICK SYSTEM SHUTDOWN\n//*\n//COMMAND EXEC PGM=OSMGCR,\n//             PARM='F BSPPILOT,SHUTNOW'\n//*\n//SYSPRINT DD  DUMMY\n//*\n./ ADD NAME=SLANAL   8000-05175-05175-0906-00053-00053-00000-HERC01\n//SLANAL  PROC TAPE='USER01',LF=,N=1,U=1,UNI='TAPE',DN=3,LBL=LTM,\n//             START=1,END=1,INC=1,SKIP=SL,FULL=1024,ERRSIZE=1024,\n//             MAXPRT=5,LABPRT=15,LABERR=10,MAXERR=100,CONSERR=50,\n//             OTHER=TRUNC,PRG=SLANALYZ,EROPT=ABE,CODE=,BLK=0 32760\n//*\n//SLANAL  EXEC PGM=&PRG,REGION=256K,\n//             PARM=('ST=&START','EN=&END','IN=&INC','SK=&SKIP',\n//             'SZ=&FULL','ES=&ERRSIZE','MP=&MAXPRT',\n//             'LP=&LABPRT','LR=&LABERR','MR=&MAXERR',\n//             'CR=&CONSERR','&OTHER')\n//*\n//SUMPRINT DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSUT1   DD  UNIT=(&UNI,&U,DEFER),DISP=OLD,DSN=&&ANY,\n//             LABEL=(&LF,&LBL,EXPDT=98000),VOL=(,,,&N,SER=(&TAPE)),\n//             DCB=(DEN=&DN,EROPT=&EROPT,OPTCD=&CODE,BLKSIZE=&BLK)\n//*\n//*      THIS PROCEDURE FORMATS STANDARD LABEL TAPE HEADER AND TRAILER\n//*      FILES, AND DUMPS SELECTED BLOCKS OF EACH DATA FILE ON THE TAPE\n//*\n//*      TAPE=    IS A LIST OF THE VOLUME SERIALS TO BE ANALYZED\n//*               FORMAT IS :  TAPE='VOLONE,VOLTWO,...'\n//*               FIVE VOLUME SERIALS ARE THE MAXIMUM SUPPORTED\n//*      LF=      LIMIT FILE SCAN - LAST FILE # TO BE DONE\n//*      N=       IS NOT YET DEFINED - RESERVED FOR FUTURE USE\n//*      U=       IS NOT YET DEFINED - RESERVED FOR FUTURE USE\n//*      UNI=     TAPE DRIVE DEVICE TYPE ('3400-5', '3400-3', '3400-2')\n//*      DN=      TAPE DENSITY (4 - 6250 BPI, 3 - 1600, 2 - 800)\n//*      CODE=    USE CODE=Q FOR ASCII TAPES\n//*      LBL=     BLP; OR LTM FOR DOS TAPES WITH LEADING TAPEMARK\n//*      START=   GIVES THE NUMBER OF THE FIRST BLOCK IN EACH FILE\n//*      END=     THE LAST BLOCK IN EACH FILE TO BE DUMPED\n//*      INC=     INTERVAL FOR PRINTING BLOCKS (START+INC, ...)\n//*      FULL=    NUMBER OF BYTES TO PRINT PER BLOCK (DFLT 1024)\n//*      SKIP=YES   SKIP OVER DATA RECORDS (SKIPS ERROR CHECKING)\n//*      SKIP=NO    READ ALL DATA RECORDS\n//*      SKIP=SL    USE SKIP MODE FOR LABELLED TAPES; NO SKIP FOR NL\n//*      MAXPRT=    PRINT LIMIT COUNT FOR ERROR BLOCKS\n//*      LABPRT=    PRINT LIMIT FOR BAD LABELS\n//*      LABERR=    TERMINATION LIMIT FOR LABEL ERRORS\n//*      MAXERR=    TERMINATION LIMIT FOR DATA ERRORS\n//*      CONSERR=   TERMINATION LIMIT FOR CONSECUTIVE ERRORS\n//*      OTHER      ...ONE OR MORE OPTIONS IN AOPSTROPHES :\n//*        TRUNCATE  TRUNCATE BLOCKS WITH BAD BLOCKSIZES\n//*        FORCE     FORCES NL MODE; RUNS UNTIL LIMIT FILE (LF=)\n//*        DEBUG     FORCES A DUMP FOR PROBLEM DIAGNOSIS\n//*\n//*      BLK=       MAXIMUM BLOCKSIZE EXPECTED ON THE TAPE.\n//*      BLK=0      SETS BLOCK SIZE TO 64K (FOR FDR DUMP TAPES);\n//*                 REQUIRES MINIMUM 192K REGION\n//*\n//*\n./ ADD NAME=SLCOPY   0100-97203-97203-1028-00066-00066-00000-GERHARD\n//SLCOPY  PROC IUN='3480',OUN='3480',IDE=3,ODE=4,ITR=ET,OTR=ET,\n//             LF=,N=1,U=1,LBL=LTM,IQ=,OQ=,\n//             START=1,END=1,INC=1,SKIP=SL,FULL=1024,ERRSIZE=1024,\n//             MAXPRT=5,LABPRT=15,LABERR=10,MAXERR=100,CONSERR=50,\n//             OTHER=,PRG=SLANCOPY,EROPT=ABE,BLK=32760,\n//             ITAPE=USER01,OTAPE=COPY,IDSN='&&ANY',ODSN=,\n//             TMSIN=',EXPDT=98000',TMSOUT=',EXPDT=98000'\n//*\n//SLCOPY  EXEC PGM=&PRG,REGION=1024K,\n//             PARM=('ST=&START','EN=&END','IN=&INC','SK=&SKIP',\n//             'SZ=&FULL','ES=&ERRSIZE','MP=&MAXPRT',\n//             'LP=&LABPRT','LR=&LABERR','MR=&MAXERR',\n//             'CR=&CONSERR','&OTHER')\n//*\n//SUMPRINT DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSUT1   DD  UNIT=(&IUN,&U,DEFER),LABEL=(&LF,&LBL,&TMSIN),\n//             DISP=OLD,DSN=&IDSN,\n//      DCB=(DEN=&IDE,TRTCH=&ITR,OPTCD=&IQ,EROPT=&EROPT,BLKSIZE=&BLK),\n//             VOL=(,,,&N,SER=(&ITAPE))\n//SYSUT2   DD  UNIT=(&OUN,&U,DEFER),LABEL=(,&LBL,&TMSOUT),\n//             DISP=(OLD,KEEP),DSN=&ODSN,\n//             DCB=(DEN=&ODE,TRTCH=&OTR,OPTCD=&OQ,BLKSIZE=&BLK),\n//             VOL=SER=(&OTAPE)\n//*\n//*      THIS PROCEDURE COPIES INDIVIDUAL TAPES; MULTI-VOLUME FILES\n//*      ARE NOT SUPPORTED UNLESS EACH INDIVIDUAL TAPE CAN BE COPIED\n//*      SEPARATELY.  CHANGE OF FORMAT (EBCDIC TO USASCII AND V.V.)\n//*      AND DEVICE TYPE/DENSITY IS SUPPORTED, PROVIDING THE OUTPUT\n//*      FROM ANY TAPE WILL FIT ON A SINGLE OUTPUT REEL.\n//*\n//*      PARAMETERS :\n//*\n//*      IUN / OUN   UNIT TYPES VALID FOR REQUESTED DENSITY AND TRACK\n//*      IDE / ODE   DENSITY\n//*      ITR / OTR   TRTCH VALUE FOR 7-TRACK REQUESTS\n//*      IQ/OQ    SET =Q FOR USASCII TAPES\n//*      ITAPE       1 TO 5 VOLUME SERIALS ENCLOSED IN QUOTES\n//*      OTAPE       IF OMITTED (=COPY), VOL HEADERS COPIED AS IS\n//*                  ELSE  1 TO 5 VOLUME SERIALS ENCLOSED IN QUOTES\n//*      ODSN=    DEFAULT DSN TO BE USED BY TMS FOR UNLABELLED TAPES\n//*      SKIP=     NOT MEANINGFUL (IGNORED)\n//*      LF=      LIMIT FILE SCAN - LAST FILE # TO BE DONE\n//*      N=       IS NOT YET DEFINED - RESERVED FOR FUTURE USE\n//*      U=       IS NOT YET DEFINED - RESERVED FOR FUTURE USE\n//*      LBL=     BLP; OR LTM FOR DOS TAPES WITH LEADING TAPEMARK\n//*      START=   GIVES THE NUMBER OF THE FIRST BLOCK IN EACH FILE\n//*      END=     THE LAST BLOCK IN EACH FILE TO BE PRINTED\n//*      INC=     INTERVAL FOR PRINTING BLOCKS (START+INC, ...)\n//*      FULL=    NUMBER OF BYTES TO PRINT PER BLOCK (DFLT 1024)\n//*      MAXPRT=    PRINT LIMIT COUNT FOR ERROR BLOCKS\n//*      LABPRT=    PRINT LIMIT FOR BAD LABELS\n//*      LABERR=    TERMINATION LIMIT FOR LABEL ERRORS\n//*      MAXERR=    TERMINATION LIMIT FOR DATA ERRORS\n//*      CONSERR=   TERMINATION LIMIT FOR CONSECUTIVE ERRORS\n//*      OTHER      ...ONE OR MORE OPTIONS IN AOPSTROPHES :\n//*        TRUNCATE  TRUNCATE BLOCKS WITH BAD BLOCKSIZES\n//*        FORCE     FORCES NL MODE; RUNS UNTIL LIMIT FILE (LF=)\n//*        DEBUG     FORCES A DUMP FOR PROBLEM DIAGNOSIS\n//*\n//*      BLK=       MAXIMUM BLOCKSIZE EXPECTED ON THE TAPE.\n//*      BLK=0      SETS BLOCK SIZE TO 64K (FOR FDR DUMP TAPES);\n//*                 REQUIRES MINIMUM 192K REGION\n//*\n//*      EROPT=  ABE-ERROR COUNT/ABEND; SKP-SKIP ERRORS; ACC-ACCEPT\n./ ADD NAME=STEPSEP  8001-05204-05204-1752-00010-00009-00000-GERHARD\n//STEPSEP EXEC PGM=STEPSEP,SOUT='*'\n//*\n//*   PRINT A STEP SEPARATOR BETWEEN ASSEMBLIES\n//*   PARM='XXXXXXXXYYYYYYYYF'\n//*\n//*      XXXXXXXX - MEMBER NAME OR OTHER 8-BYTE PAGE HEADER\n//*      YYYYYYYY - SECOND LINE; USUALLY DATE; CURRENT DATE IF OMITTED\n//*      F - FLAG: M-MEMO FORMAT P-PORTRAIT MODE X-XEROX 4050 CONTROLS\n//*\n//SYSPRINT DD  SYSOUT=(&SOUT)\n./ ADD NAME=SYSMERGE 8001-05223-10242-2311-00031-00031-00000-GERHARD\n//SYSMERGE PROC IND='GERHARD.',COMP='????',\n//             MODS=MODS,WORK=VIO,PRG=HSPMERGE\n//*      LIBRARY MERGE PROCEDURE\n//*      COMP= SPECIFIES COMPONENT (HASP, WYL, SLAC...)\n//*      REQUIRES GERHARD.COMPOLD(UNMODIFIED SOURCE)\n//*      GERHARD.COMPMODS (MODIFICATION LEVELS/MEMBER MERGE)\n//*      GERHARD.COMPSRC (MODIFIED SOURCE)\n//*      GERHARD.COMPOBJ (CORR. OBJECT)\n//*\n//INIT    EXEC PGM=CLEARPDS\n//*ESA*   INCLUDE MEMBER=ZZSTEPLB\n//SYSLIB   DD  DISP=OLD,DSN=&IND&COMP.SRC\n//*\n//MERGE   EXEC PGM=&PRG,REGION=4096K\n//*ESA*   INCLUDE MEMBER=ZZSTEPLB\n//ERRORS   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=&IND&COMP.OLD\n//WORK     DD  UNIT=&WORK,SPACE=(CYL,(40,10),RLSE,CONTIG)\n//SYSIN    DD  DISP=SHR,DSN=&IND&COMP.&MODS(##MERGE)\n//INPDS    DD  DISP=SHR,DSN=&IND&COMP.&MODS\n//SYSUT2   DD  DISP=OLD,DSN=&IND&COMP.SRC\n//SYSUDUMP DD  SYSOUT=*\n//COPY    EXEC PGM=IEBCOPY,REGION=500K,COND=(4,LT,MERGE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=&IND&COMP.OLD\n//SYSUT2   DD  DISP=OLD,DSN=&IND&COMP.SRC\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,3)\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,3)\n//SYSIN    DD  DUMMY\n//*\n./ ADD NAME=SYSMERG2 8001-05223-05223-1952-00045-00031-00000-GERHARD\n//SYSMERGE PROC IND='SYS9.',COMP='????',\n//             MODS=MODS,WORK=VIO\n//*\n//*      SOURCE *AND* MACRO LIBRARY MERGE\n//*\n//*      COMP= SPECIFIES COMPONENT (HASP, WYL, SLAC...)\n//*      REQUIRES GERHARD.COMPOLD(UNMODIFIED SOURCE)\n//*      GERHARD.COMPMODS (MODIFICATION LEVELS/MEMBER MERGE)\n//*      GERHARD.COMPSRC (MODIFIED SOURCE)\n//*      GERHARD.COMPOBJ (CORR. OBJECT)\n//*\n//INIT    EXEC PGM=CLEARPDS\n//*ESA*   INCLUDE MEMBER=ZZSTEPLB\n//SYSLIB   DD  DISP=OLD,DSN=&IND&COMP.SRC\n//SYSLIB2  DD  DISP=OLD,DSN=&IND&COMP.MAC\n//*\n//MERGE   EXEC PGM=HSPMERGE,REGION=4096K\n//*ESA*   INCLUDE MEMBER=ZZSTEPLB\n//ERRORS   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=&IND&COMP.OLD   MASTER SOURCE\n//SYSUT3   DD  DISP=SHR,DSN=&IND&COMP.MOLD  MASTER MACROS\n//WORK     DD  UNIT=&WORK,SPACE=(CYL,(40,10),RLSE,CONTIG)\n//SYSIN    DD  DISP=SHR,DSN=&IND&COMP.&MODS(##MERGE)\n//INPDS    DD  DISP=SHR,DSN=&IND&COMP.&MODS\n//SYSUT2   DD  DISP=OLD,DSN=&IND&COMP.SRC   UPDATED SOURCE\n//SYSUT4   DD  DISP=OLD,DSN=&IND&COMP.MAC   UPDATED MACROS\n//SYSUDUMP DD  SYSOUT=*\n//*\n//COPYS   EXEC PGM=IEBCOPY,REGION=500K,COND=(4,LT,MERGE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=&IND&COMP.OLD\n//SYSUT2   DD  DISP=OLD,DSN=&IND&COMP.SRC\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,3)\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,3)\n//SYSIN    DD  DUMMY\n//*\n//COPYM   EXEC PGM=IEBCOPY,REGION=500K,COND=(4,LT,MERGE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=&IND&COMP.MOLD\n//SYSUT2   DD  DISP=OLD,DSN=&IND&COMP.MAC\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,3)\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,3)\n//SYSIN    DD  DUMMY\n//*\n./ ADD NAME=TAPEMARK 0100-02251-02251-1239-00010-00010-00000-GERHARD\n//TAPEMARK PROC T='560'\n//*\n//*        ACCOUNT=0904\n//*\n//TAPEMARK EXEC PGM=TAPEMARK\n//        INCLUDE MEMBER=ZZSTEPLB\n//IEFRDER  DD  DUMMY\n//TAPEDD   DD  DISP=(,KEEP),DSN=TAPEMARK,VOL=SER=TAPEXX,\n//             UNIT=(&T,,DEFER),LABEL=(,BLP,EXPDT=98000)\n//*        PEND\n./ ADD NAME=UPDTX    8000-05215-05215-2034-00012-00012-00000-GERHARD\n//UPDTX   PROC PRG=IEBUPDTX,\n//             SRC='userid.TEST.SRC',  input PDS\n//             OSRC='userid.TEST.ASM'  output PDS\n//*\n//*     UPDATE CARD FORMAT\n//*\n//UP      EXEC PGM=&PRG,PARM='MOD,LISTALL,WYLBUR'\n//* STEPLIB  DD  DISP=SHR,DSN=SYS2.LINKLIB\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=&SRC\n//SYSUT2   DD  DISP=SHR,DSN=&OSRC\n//*\n./ ADD NAME=VATUCB   8000-06343-06343-2116-00015-00015-00000-GERHARD\n//VATUCB  PROC VAL=00\n//*\n//*   THIS PROGRAM READS THE VATLST (SUFFIXED BY VAL PARAMETER)\n//*     AND CHANGES ALL DASD UCBS TO THEIR ORIGINAL ATTRIBUTES.\n//*   VOLUMES NOT FOUND ARE MARKED RESERVED + PRIVATE\n//*\n//*   PARM= (NULL) ISSUES WTOS WITH DESC=2/ROUT=2 (NON-DELETE)\n//*   PARM=IPL     ISSUES WTOS WITH DEFAULTS (DELETABLE)\n//*   PARM=TEST    ISSUES WTOS, BUT DOES NOT CHANGE UCBS\n//*\n//       EXEC  PGM=VATUCB\n//*STEPLIB DD   DISP=SHR,DSN=SYS2.LINKLIB (NOT NEEDED)\n//*\n//VATIN   DD   DISP=SHR,DSN=SYS1.PARMLIB(VATLST&VAL)\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOADLIB": {"ttr": 9221, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x13#\\x7f\\x01\\x13#\\x7f\\x13\\x13UlUl\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-08-25T00:00:00", "modifydate": "2013-08-25T13:13:00", "lines": 21868, "newlines": 21868, "modlines": 0, "user": "GERHARD"}, "mimetype": "audio/x-mp4a-latm", "datatype": "binary", "extension": ".x-mp4a-latm"}, "NETSOL": {"ttr": 18179, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x13#\\x7f\\x01\\x13#\\x7f\\x13\\x17\\x86\\x81\\x86\\x81\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-08-25T00:00:00", "modifydate": "2013-08-25T13:17:00", "lines": 34433, "newlines": 34433, "modlines": 0, "user": "GERHARD"}, "text": "./ ADD NAME=$ASMMVS  8002-04355-06336-0048-00006-00012-00000-GERHARD\n//NETSOL70 JOB (Z904,0012),GERHARD,CLASS=S,MSGCLASS=E\n//       EXEC  PURGEME\n//       EXEC  ASMCL,MEMBER=NETSOL70,\n//             LIB='GERHARD.TEST.LOADLIB',\n//             MAC='GERHARD.MVS.NETSOL',\n//             SRC='GERHARD.MVS.NETSOL'\n./ ADD NAME=$ATTR,SSI=00084141\n         MACRO ,\n         $ATTR &LIST                  EMERGENCY VERSION ADDED ON 84141\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLA  &I,&J\n         LCLB  &B(8)\n         LCLC  &C\n&RC      SETA  1             SET PROVISIONAL RETURN\n&J       SETA  N'&SYSLIST(1)\n.LOOP    AIF   (&I GE &J).EXIT\n&I       SETA  &I+1\n&C       SETC  '&SYSLIST(1,&I)'\n         AIF   ('&C' EQ '').LOOP\n&B(3)    SETB  (&B(3) OR '&C' EQ 'PROT' OR '&C' EQ 'SKIP')\n&B(4)    SETB  (&B(4) OR '&C' EQ 'NUM' OR '&C' EQ 'SKIP')\n&B(5)    SETB  (&B(5) OR '&C' EQ 'HI' OR '&C' EQ 'NONDISP')\n&B(6)    SETB  (&B(6) OR '&C' EQ 'LPEN' OR '&C' EQ 'NONDISP')\n&B(8)    SETB  (&B(8) OR '&C' EQ 'MDT')\n&B(3)    SETB  (&B(3) AND '&C' NE 'UNPROT')\n&B(4)    SETB  (&B(4) AND '&C' NE 'ALPHA')\n&B(8)    SETB  (&B(8) AND '&C' NE 'NOMDT')\n         AGO   .LOOP\n.EXIT    ANOP  ,\n&I       SETA  32*&B(3)+16*&B(4)+8*&B(5)+4*&B(6)+2*&B(7)+&B(8)\n&I       SETA  &I+1\n         AIF   (&I EQ 0).MEND\n&RC      SETA  0             SET GOOD RETURN\n&ATTRIB  SETC  '&TAB3270(&I)'\n.MEND    MEND  ,\n./ ADD NAME=$COL,SSI=00084141\n         MACRO ,\n         $COL  &COL                   EMERGENCY VERSION ADDED ON 84141\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLA  &I\n&RC      SETA  1             SET PROVISIONAL RETURN\n         AIF   (T'&COL EQ 'O').EXIT    SKIP OMITTED PARM\n&I       SETA  50            SET FOR EVENTUAL 'F1'\n         AIF   ('&COL' EQ 'BLUE').EXIT\n&I       SETA  &I+1\n         AIF   ('&COL' EQ 'RED').EXIT\n&I       SETA  &I+1\n         AIF   ('&COL' EQ 'PINK').EXIT\n&I       SETA  &I+1\n         AIF   ('&COL' EQ 'GREEN').EXIT\n&I       SETA  &I+1\n         AIF   ('&COL' EQ 'TURQUOISE').EXIT\n         AIF   ('&COL' EQ 'TURQ').EXIT\n&I       SETA  &I+1\n         AIF   ('&COL' EQ 'YELLOW').EXIT\n&I       SETA  &I+1\n         AIF   ('&COL' EQ 'WHITE').EXIT\n         MNOTE 4,'COLOR &COL NOT RECOGNIZED; WHITE USED'\n.EXIT    ANOP  ,\n         AIF   (&I EQ 0).MEND\n&RC      SETA  0             SET GOOD RETURN\n&ATTRIB  SETC  '&TAB3270(&I)'\n.MEND    MEND  ,\n./ ADD NAME=$DOC\nMEMBER      DESCRIPTION\n********    **********************************************************\n\n$DOC        DOCUMENTATION OF TAPE CONTENTS. (THIS MEMBER).\n\n@NETINIT    VTAM APPLICATION DEFINITION FOR 'NETINIT'.\n\n@NETOP      VTAM APPLICATION DEFINITION FOR 'NETOP'.\n\n@NETSOL     VTAM APPLICATION DEFINITION FOR 'NETSOL'.\n\nLOGTAB      VTAM INTERPRET TABLE USED BY 'NETSOL'.\n\nLOGTABA     JCL TO ASSEMBLE 'LOGTAB'. NOTE THAT ACF/VTAM 2 ALLOWS THE\n            INTERPRET TABLE TO GO IN 'SYS1.VTAMLIB'.\n\nMACROS      MACROS USED BY NETSOL.\n\nNETINIT     VTAM APPLICATION TO HANDLE STARTUP OF VTAM APPLICATIONS.\n\nNETINIT$    INSTALLATION INSTRUCTIONS FOR 'NETINIT'.\n\nNETINITA    JCL TO ASSEMBLE 'NETINIT'.\n\nNETINITI    SAMPLE INPUT TO 'NETINIT'.\n\nNETINITP    SAMPLE JCL TO RUN 'NETINIT'.\n\nNETOP       VTAM NETWORK OPERATOR PROGRAM 'NETOP'.\n\nNETOP$      INSTALLATION INSTRUCTIONS FOR 'NETOP'.\n\nNETOPA      JCL TO ASSEMLBE 'NETOP'.\n\nNETOPMAC    MACROS REQUIRED TO ASSEMBLE 'NETOP'.\n\nNETOPP      SAMPLE JCL TO RUN 'NETOP'.\n\nNETSOL      VTAM RECORD-MODE NETWORK SOLICITOR 'NETSOL'.\n\nNETSOL$     INSTALLATION INSTRUCTIONS FOR 'NETSOL'.\n\nNETSOLA     JCL TO ASSEMBLE 'NETSOL'.\n\nNETSOLP     SAMPLE JCL TO RUN 'NETSOL'.\n./ ADD NAME=$EUA,SSI=00088200\n         MACRO\n&LABEL   $EUA  &ADDR                                    ADDED ON 88173\n.*\n.*  FUNCTION : GENERATE 3270 ERASE UNPROTECTED TO ADDRESS ORDER.\n.*             THE (ROW,COLUMN) FORMAT ADDRESS IS CONVERTED TO THE HEX\n.*             CHARACTERS REQUIRED FOR THE ORDER.\n.*\n.*  REFERENCE: BUFFER ADDRESS CONVERSION ALGORITHM IN\n.*             GC27-6999 INTRO TO PROGRAMMING THE 3270 IDS\n.*\n.*  INPUT    : BUFFER ADDRESS IN (ROW,COLUMN FORMAT)\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE EUA ORDER AND THE BUFFER ADDR\n.*\n.*  AUTHOR   : GERHARD POSTPISCHIL, EXPERT SYSTEM PROGRAMMING, INC.\n.*\n.*  DATE     : JUNE 21/88\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC,&MDL70                                        88200\n         LCLA  &ROW,&COLUMN,&BUFFLOC,&I1,&I2,&WIDTH\n         LCLC  &COMMENT\n&ROW     SETA  &ADDR(1)\n&COLUMN  SETA  &ADDR(2)\n&WIDTH   SETA  80+(&MDL70/5)*52                                  88200\n.*  CALC OFFSET IN 3270 BUFFER\n&BUFFLOC SETA  ((&ROW-1)*&WIDTH)+(&COLUMN-1)                     88200\n.*  CONVERT 12 BIT ADDR TO TWO 6 BIT ADDRS\n&I1      SETA  &BUFFLOC/64\n&I2      SETA  &BUFFLOC-(&I1*64)\n.*  CHANGE INDICES INTO 3270 CONVERSION TABLE FROM 0-BASED TO 1-BASED\n&I1      SETA  &I1+1\n&I2      SETA  &I2+1\n&COMMENT SETC  '          EUA &ADDR'\n&LABEL   DC    XL3'12&TAB3270(&I1)&TAB3270(&I2)'&COMMENT\n         MEND\n./ ADD NAME=$IC,SSI=00084116\n         MACRO\n&LABEL   $IC\n.*\n.*  FUNCTION : GENERATE 3270 INSERT CURSOR ORDER.\n.*\n.*  INPUT    : NONE\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE IC ORDER\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n&LABEL   DC    X'13'               IC\n         MEND\n./ ADD NAME=$IO,SSI=00088200\n         MACRO\n&LABEL   $IO   &CMD\n.*\n.*  FUNCTION : GENERATE VALID IO COMMAND FOR 3270 DATA STREAM.\n.*\n.*  INPUT    : &CMD     = WRITE\n.*                        WSF         - WRITE STRUCTURED FIELD\n.*                        ERASE/WRITE - USE &MDL70 TO SELECT IO CMD\n.*             &MDL70   - SPECIFIES MODEL NUMBER OF 3270 TERMINAL.\n.*\n.*  OUTPUT   : ASSEMBLER DC STATEMENT FOR IO COMMAND.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC,&MDL70\n         LCLC  &OPCODE,&COMMENT\n.*   PROCESS WRITE COMMAND\n         AIF ('&CMD' NE 'WRITE').WSF\n&OPCODE  SETC  'F1'\n         AGO    .DC\n.*   PROCESS WRITE STRUCTURED FIELD COMMAND\n.WSF     AIF ('&CMD' NE 'WSF').ERWRIT\n&OPCODE  SETC  'F3'\n         AGO    .DC\n.*   PROCESS ERASE/WRITE COMMAND\n.ERWRIT  AIF ('&CMD' NE 'ERASE/WRITE').ERALT                     88200\n&OPCODE  SETC  'F5'\n         AGO   .DC                                               88200\n.ERALT   AIF ('&CMD' NE 'ERASE/ALT').ERROR                       88200\n&OPCODE  SETC  '7E'\n         AGO    .DC\n.*   PROCESS INVALID COMMANDS\n.ERROR   MNOTE 8,'&CMD IS AN INVALID 3270 COMMAND'\n         MEXIT\n.DC      ANOP\n&COMMENT SETC '                &CMD FOR 3270 MODEL &MDL70'\n&LABEL   DC    X'&OPCODE'&COMMENT\n         MEND\n./ ADD NAME=$MODEL,SSI=00088200\n         MACRO\n         $MODEL &NUM\n.*\n.*  FUNCTION : SET MODEL NUMBER FOR SUBSEQUENT 3270 MACRO INSTRUCTIONS.\n.*\n.*  INPUT    : 3270 MODEL NUMBER (1,2,3,4 OR 5)\n.*\n.*  OUTPUT   : &MDL70 SETA SYMBOL IS SET.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC,&MDL70\n         AIF   ((&NUM GE 2) AND (&NUM LE 5)).OK                  88200\n         MNOTE 8,'3270 MODEL &MDL70 IS NOT SUPPORTED BY THESE MACROS.'\n         MEXIT\n.OK      ANOP\n&MDL70   SETA  &NUM\n         MEND\n./ ADD NAME=$RA,SSI=00088200\n         MACRO\n&LABEL   $RA   &OPTIONS\n.*\n.*  FUNCTION : GENERATE 3270 REPEAT TO ADDRESS ORDER. THE (ROW,COLUMN)\n.*             FORMAT ADDRESS IS CONVERTED TO THE HEX CHARACTERS\n.*             REQUIRED FOR THE ORDER AND THE REPEAT CHARACTER IS\n.*             APPENDED TO THE END OF THE RA ORDER.\n.*\n.*  REFERENCE: BUFFER ADDRESS CONVERSION ALGORITHM IN\n.*             GC27-6999 INTRO TO PROGRAMMING THE 3270 IDS\n.*\n.*  INPUT    : BUFFER ADDRESS AND CHARACTER IN (ROW,COLUMN,CHAR) FORMAT\n.*             CHAR MUST BE IN THE FORMAT C'A' OR X'C1'\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE RA ORDER\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC,&MDL70                                        88200\n         LCLA  &ROW,&COLUMN,&BUFFLOC,&I1,&I2,&WIDTH              88200\n         LCLC  &COMMENT,&CHAR\n&ROW     SETA  &OPTIONS(1)\n&COLUMN  SETA  &OPTIONS(2)\n&WIDTH   SETA  80+(&MDL70/5)*52                                  88200\n&CHAR    SETC  '&OPTIONS(3)'\n.*  CALC OFFSET IN 3270 BUFFER\n&BUFFLOC SETA  ((&ROW-1)*&WIDTH)+(&COLUMN-1)                     88200\n.*  CONVERT 12 BIT ADDR TO TWO 6 BIT ADDRS\n&I1      SETA  &BUFFLOC/64\n&I2      SETA  &BUFFLOC-(&I1*64)\n.*  CHANGE INDICES INTO 3270 CONVERSION TABLE FROM 0-BASED TO 1-BASED\n&I1      SETA  &I1+1\n&I2      SETA  &I2+1\n&COMMENT SETC  '    RA &OPTIONS'\n&LABEL   DC    XL3'3C&TAB3270(&I1)&TAB3270(&I2)',&CHAR&COMMENT\n         MEND\n./ ADD NAME=$SBA,SSI=00088200\n         MACRO\n&LABEL   $SBA  &ADDR\n.*\n.*  FUNCTION : GENERATE 3270 SET BUFFER ADDRESS ORDER. THE (ROW,COLUMN)\n.*             FORMAT ADDRESS IS CONVERTED TO THE HEX CHARACTERS\n.*             REQUIRED FOR THE ORDER.\n.*\n.*  REFERENCE: BUFFER ADDRESS CONVERSION ALGORITHM IN\n.*             GC27-6999 INTRO TO PROGRAMMING THE 3270 IDS\n.*\n.*  INPUT    : BUFFER ADDRESS IN (ROW,COLUMN FORMAT)\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE SBA ORDER AND THE BUFFER ADDR\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC,&MDL70                                        88200\n         LCLA  &ROW,&COLUMN,&BUFFLOC,&I1,&I2,&WIDTH\n         LCLC  &COMMENT\n&ROW     SETA  &ADDR(1)\n&COLUMN  SETA  &ADDR(2)\n&WIDTH   SETA  80+(&MDL70/5)*52                                  88200\n.*  CALC OFFSET IN 3270 BUFFER\n&BUFFLOC SETA  ((&ROW-1)*&WIDTH)+(&COLUMN-1)                     88200\n.*  CONVERT 12 BIT ADDR TO TWO 6 BIT ADDRS\n&I1      SETA  &BUFFLOC/64\n&I2      SETA  &BUFFLOC-(&I1*64)\n.*  CHANGE INDICES INTO 3270 CONVERSION TABLE FROM 0-BASED TO 1-BASED\n&I1      SETA  &I1+1\n&I2      SETA  &I2+1\n&COMMENT SETC  '          SBA &ADDR'\n&LABEL   DC    XL3'11&TAB3270(&I1)&TAB3270(&I2)'&COMMENT\n         MEND\n./ ADD NAME=$SF,SSI=00084116\n         MACRO\n&LABEL   $SF    &ATTR\n.*\n.*  FUNCTION : GENERATE START FIELD ORDER WITH SPECIFIED\n.*             OPTIONS.\n.*\n.*  INPUT    : &ATTR   - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                       (PROT,NUM,MDT,HI,NONDISP,SKIP)\n.*                       (UNPROT,ALPHA,NOMDT)\n.*\n.*  OUTPUT   : SFE ORDER PLUS OPTION BYTES.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLC  &COMMENT\n.*   PROCESS ATTRIBUTE OPTIONS\n         AIF (N'&ATTR  EQ 0).NOATTR\n         $ATTR &ATTR\n         AIF (&RC EQ 0).DC\n.* USE DEFAULT ATTRIBUTE BYTE\n.NOATTR  ANOP\n&ATTRIB  SETC  '40'\n.DC      ANOP\n&COMMENT SETC  '              SF &ATTR'\n&LABEL   DC    X'1D&ATTRIB'&COMMENT\n         MEND\n./ ADD NAME=$SFE,SSI=00088214\n         MACRO\n&LABEL   $SFE   &ATTR=,&XHL=,&COL=,&PSS=\n         GBLC   &@DEV@\n.*       WHEN &@DEV@ IS OTHER THAN NULL OR 327E, ONLY THE ATTR PORTION\n.*       OF THE REQUEST IS EXPANDED - THIS PERMITS EASIER GENERATION OF\n.*       SCREEN DEFINITIONS.                                     88214\n         AIF    ('&@DEV@' EQ '' OR '&@DEV@' EQ '327E').PROCEED   88214\n&LABEL   $SF    &ATTR ,\n         MEXIT ,                                                 88214\n.PROCEED ANOP  ,                                                 88214\n.*\n.*  FUNCTION : GENERATE START FIELD EXTENDED ORDER WITH SPECIFIED\n.*             OPTIONS.\n.*\n.*  INPUT    : &ATTRIB - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                       (PROT,NUM,MDT,HI,NONDISP,SKIP)\n.*                       (UNPROT,ALPHA,NOMDT)\n.*           : &XHL    - EXTENDED HIGHLIGHTING OPTIONS. MUST BE ONE OF\n.*                       (BLINKING,REVERSE,UNDERSCORE)\n.*           : &COL    - COLOUR OPTION. IT MUST BE ONE OF\n.*                       (BLUE,RED,PINK,GREEN,TURQUOISE,YELLOW,WHITE)\n.*                       ONLY 1ST 3 CHARS ARE CHECKED\n.*           : &PSS    - PROGRAMMED SYMBOL SET. THE VALUE MUST BE\n.*                       BETWEEN X'40' AND X'EF'.\n.*\n.*  OUTPUT   : SFE ORDER PLUS OPTION BYTES.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLA  &CNT\n         LCLC  &OPTIONS,&COMMENT\n.*   PROCESS ATTRIBUTE OPTIONS\n         AIF ('&ATTR' EQ '').XHL\n         $ATTR &ATTR\n         AIF (&RC NE 0).XHL\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'C0'.'&ATTRIB'\n.*   PROCESS EXTENDED HIGHLIGHT OPTIONS\n.XHL     AIF ('&XHL' EQ '').COL\n         $XHL  &XHL\n         AIF (&RC NE 0).COL\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'41'.'&ATTRIB'\n.*   PROCESS COLOUR OPTION.\n.COL     AIF ('&COL' EQ '').PSS\n         $COL  &COL\n         AIF (&RC NE 0).PSS\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'42'.'&ATTRIB'\n.*   PROCESS PROGRAMMED SYMBOL SET OPTION\n.PSS     AIF ('&PSS' EQ '').CHKCNT\n         $PSS  &PSS\n         AIF (&RC NE 0).CHKCNT\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'43'.'&ATTRIB'\n.*   VERIFY ATLEAST ONE VALID OPTION.\n.CHKCNT  AIF (&CNT GT 0).DC\n         MNOTE 8,'NO VALID ATTRIBUTES SPECIFIED IN $SFE MACRO'\n&RC      SETA  4\n         MEXIT\n.*   GENERATE SFE ORDER AND OPTIONS\n.DC      ANOP\n&COMMENT SETC  '      SFE &ATTR,&XHL,&COL,&PSS'\n&LABEL   DC    X'290&CNT&OPTIONS'&COMMENT\n         MEND\n./ ADD NAME=$WCC,SSI=00084116\n         MACRO\n&LABEL   $WCC   &OPTIONS\n.*\n.*  FUNCTION : GENERATE VALID WRITE CONTROL CHARACTER FOR 3270 DATA\n.*             STREAM.\n.*\n.*  METHOD   : USE BIT ARRAY TO FLAG SELECTED OPTIONS THEN GENERATE\n.*             APPROPRIATE HEX CODE.\n.*\n.*  INPUT    : &OPTIONS - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                        (ALARM,RESETKBD,MDT)\n.*\n.*  OUTPUT   : ASSEMBLER DC STATEMENT FOR WCC CODE.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC,&MDL70\n         LCLA  &I1,&BIT(8)\n         LCLC  &COMMENT\n         AIF   (N'&OPTIONS EQ 0).DEFAULT\n&I1      SETA  1\n.LOOP    AIF   ('&OPTIONS(&I1)' EQ '').NXTONE                    88200\n.*   PROCESS ALARM ATTRIBUTE\n         AIF ('&OPTIONS(&I1)' NE 'ALARM').RESETKB\n&BIT(6)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS RESETKBD ATTRIBUTE\n.RESETKB AIF ('&OPTIONS(&I1)' NE 'RESETKBD').MDT\n&BIT(7)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS MDT ATTRIBUTE\n.MDT     AIF ('&OPTIONS(&I1)' NE 'MDT').ERROR\n&BIT(8)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS INVALID ATTRIBUTES\n.ERROR   MNOTE 8,'&OPTIONS(&I1) IS INVALID FOR WCC'\n.NXTONE  ANOP\n&I1      SETA  &I1+1\n         AIF (&I1 LE N'&OPTIONS).LOOP\n.*   CALCULATE VALUE OF OPTION BYTE PLUS ONE\n.DEFAULT ANOP\n&I1      SETA &BIT(8)+&BIT(7)*2+&BIT(6)*4+1\n         AIF (&I1 LE 64).GETCHAR\n         MNOTE 8,'&I1 IS GREATE THAN 64'\n         MEXIT\n.*   LOOK UP CHAR FOR CALCULATED OPTION BYTE.\n.GETCHAR ANOP\n&COMMENT SETC '                WCC &OPTIONS'\n&LABEL   DC    X'&TAB3270(&I1)'&COMMENT\n         MEND\n./ ADD NAME=$XHL,SSI=00084141\n         MACRO ,\n         $XHL  &XHL                   EMERGENCY VERSION ADDED ON 84141\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLA  &I\n&RC      SETA  1             SET PROVISIONAL RETURN\n         AIF   (T'&XHL EQ 'O').EXIT    SKIP OMITTED PARM\n&I       SETA  50            SET FOR EVENTUAL 'F1'\n         AIF   ('&XHL' EQ 'BLINK').EXIT\n&I       SETA  &I+1\n         AIF   ('&XHL' EQ 'REV').EXIT\n         AIF   ('&XHL' EQ 'REVERSE').EXIT\n&I       SETA  &I+2\n         AIF   ('&XHL' EQ 'UNDER').EXIT\n         AIF   ('&XHL' EQ 'UNDERLINE').EXIT\n         AIF   ('&XHL' EQ 'UNDERSCORE').EXIT\n         MNOTE 4,'OPTION &XHL NOT RECOGNIZED'\n&I       SETA  0             RESET AGAIN\n.EXIT    ANOP  ,\n         AIF   (&I EQ 0).MEND\n&RC      SETA  0             SET GOOD RETURN\n&ATTRIB  SETC  '&TAB3270(&I)'\n.MEND    MEND  ,\n./ ADD NAME=$3270INT,SSI=00084116\n***************************************************************\n*  FUNCTION : INITIALIZE MACRO SYMBOLS REQUIRED BY 3270 MACROS.\n*\n*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n*\n*  DATE     : SEPT 19/80\n*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC,&MDL70\n         PRINT OFF\n&MDL70      SETA  2\n&TAB3270(1) SETC  '40'\n&TAB3270(2) SETC  'C1'\n&TAB3270(3) SETC  'C2'\n&TAB3270(4) SETC  'C3'\n&TAB3270(5) SETC  'C4'\n&TAB3270(6) SETC  'C5'\n&TAB3270(7) SETC  'C6'\n&TAB3270(8) SETC  'C7'\n&TAB3270(9) SETC  'C8'\n&TAB3270(10) SETC 'C9'\n&TAB3270(11) SETC '4A'\n&TAB3270(12) SETC '4B'\n&TAB3270(13) SETC '4C'\n&TAB3270(14) SETC '4D'\n&TAB3270(15) SETC '4E'\n&TAB3270(16) SETC '4F'\n&TAB3270(17) SETC '50'\n&TAB3270(18) SETC 'D1'\n&TAB3270(19) SETC 'D2'\n&TAB3270(20) SETC 'D3'\n&TAB3270(21) SETC 'D4'\n&TAB3270(22) SETC 'D5'\n&TAB3270(23) SETC 'D6'\n&TAB3270(24) SETC 'D7'\n&TAB3270(25) SETC 'D8'\n&TAB3270(26) SETC 'D9'\n&TAB3270(27) SETC '5A'\n&TAB3270(28) SETC '5B'\n&TAB3270(29) SETC '5C'\n&TAB3270(30) SETC '5D'\n&TAB3270(31) SETC '5E'\n&TAB3270(32) SETC '5F'\n&TAB3270(33) SETC '60'\n&TAB3270(34) SETC '61'\n&TAB3270(35) SETC 'E2'\n&TAB3270(36) SETC 'E3'\n&TAB3270(37) SETC 'E4'\n&TAB3270(38) SETC 'E5'\n&TAB3270(39) SETC 'E6'\n&TAB3270(40) SETC 'E7'\n&TAB3270(41) SETC 'E8'\n&TAB3270(42) SETC 'E9'\n&TAB3270(43) SETC '6A'\n&TAB3270(44) SETC '6B'\n&TAB3270(45) SETC '6C'\n&TAB3270(46) SETC '6D'\n&TAB3270(47) SETC '6E'\n&TAB3270(48) SETC '6F'\n&TAB3270(49) SETC 'F0'\n&TAB3270(50) SETC 'F1'\n&TAB3270(51) SETC 'F2'\n&TAB3270(52) SETC 'F3'\n&TAB3270(53) SETC 'F4'\n&TAB3270(54) SETC 'F5'\n&TAB3270(55) SETC 'F6'\n&TAB3270(56) SETC 'F7'\n&TAB3270(57) SETC 'F8'\n&TAB3270(58) SETC 'F9'\n&TAB3270(59) SETC '7A'\n&TAB3270(60) SETC '7B'\n&TAB3270(61) SETC '7C'\n&TAB3270(62) SETC '7D'\n&TAB3270(63) SETC '7E'\n&TAB3270(64) SETC '7F'\n         PRINT ON\n./ ADD NAME=@NETINIT\n        VBUILD TYPE=APPL\nNETINIT  APPL  EAS=1,PRTCT=NETINIT\n./ ADD NAME=@NETOP\n        VBUILD TYPE=APPL\nNETOP   APPL  AUTH=(ACQ,PASS,NVPACE),PRTCT=VTAMOP,EAS=20\nNETPPO  APPL  AUTH=(ACQ,PASS,PPO,NVPACE),PRTCT=VTAMCMD,EAS=1\nNETSPO  APPL  AUTH=(ACQ,PASS,SPO,NVPACE),PRTCT=VTAMCMD,EAS=1\nNETOPT  APPL  AUTH=(ACQ,PASS,NVPACE),PRTCT=VTAMOP,EAS=1\nNETSPOT APPL  AUTH=(ACQ,PASS,SPO,NVPACE),PRTCT=VTAMCMD,EAS=1\n./ ADD NAME=@NETSOL\n        VBUILD TYPE=APPL\nNETSOL   APPL  AUTH=(ACQ,PASS,SPO,NVPACE),EAS=600\n./ ADD NAME=CNMROUTE,SSI=00089104\nCNMROUTE TITLE 'C N M R O U T E  ***  CNM ROUTING (CRDMS PRINTERS)'\n         MACRO ,\n&NM      APPL  &NAME\n&NM      DC    X'00010381',CL8'&NAME ',X'00410384',CL8'&NAME '\n         MEND  ,\n         SPACE 2\n*        THIS MODULE IS LINKED AS ISTMGC00\n*\n*        IT PROVIDES THE NAMES OF APPLICATIONS PERMITTED\n*        UNSOLICITED CROSS-DOMAIN LU ACQUISITION\n*\nCNMROUTE START 0                                        ADDED ON 89104\n         DC    Y((APPLAST-APPLONE)/12,12)  NUMBER / LENGTH\n         DC    8X'00'        RESERVED\n         SPACE 1\nAPPLONE  APPL  JES2\n         APPL  JESB\n         APPL  JRP\n         APPL  JRPA\n         APPL  CJRP\n         APPL  CJRPA\n         SPACE 1\nAPPLAST  DS    0X\n         END   ,\n./ ADD NAME=LOGTAB\n         TITLE 'v t a m   l o g o n   i n t e p r e t   t a b l e'\n***********************************************************************\n*\n*        purpose: define interpret table used by netsol.\n*                 (refer to acf/vtam system programmers guide)\n*\n*        note:    1) valid logon sequences are defined in upper\n*                    and lower case.\n*                 2) the logon sequences are compared with the\n*                    passed string for a length equal to the\n*                    logon sequence. therefore, any logon sequence\n*                    containing another logon sequence as a\n*                    substring (as 'imstest' contains 'ims') must\n*                    appear in the interpret table before the\n*                    sequence contained as a substring does.\n*\n*        date:    october 19/79.\n*\n*        changes: jan 11/81 - add support for vspc.\n*                             add msnf support for tso,netsol,nccf.\n*\n*        contact: ed pitkin,ssg.\n*\n***********************************************************************\nVLOGTAB2 INTAB\n         LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='TSO'\n         LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='tso'\n         LOGCHAR APPLID=(APPLICID,TSOA),SEQNCE='LOGONA'\n         LOGCHAR APPLID=(APPLICID,TSOA),SEQNCE='logona'\n         LOGCHAR APPLID=(APPLICID,TSOB),SEQNCE='LOGONB'\n         LOGCHAR APPLID=(APPLICID,TSOB),SEQNCE='logonb'\n         LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='LOGON'\n         LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='logon'\n         LOGCHAR APPLID=(APPLICID,IMSTEST),SEQNCE='IMSTEST'                 0011\n         LOGCHAR APPLID=(APPLICID,IMSTEST),SEQNCE='imstest'                 0011\n         LOGCHAR APPLID=(APPLICID,IMSTEST),SEQNCE='4'\n         LOGCHAR APPLID=(APPLICID,IMS),SEQNCE='IMS'                         0011\n         LOGCHAR APPLID=(APPLICID,IMS),SEQNCE='ims'                         0011\n         LOGCHAR APPLID=(APPLICID,IMS),SEQNCE='2'\n         LOGCHAR APPLID=(APPLICID,WYL),SEQNCE='WYLBUR'                      0011\n         LOGCHAR APPLID=(APPLICID,WYL),SEQNCE='wylbur'                      0011\n         LOGCHAR APPLID=(APPLICID,WYL),SEQNCE='3'\n         LOGCHAR APPLID=(APPLICID,VSPC),SEQNCE='VSPC'                       0011\n         LOGCHAR APPLID=(APPLICID,VSPC),SEQNCE='vspc'                       0011\n         LOGCHAR APPLID=(APPLICID,VSPC),SEQNCE='5'\n         LOGCHAR APPLID=(APPLICID,NETAPPL1),SEQNCE='NETAPPL1'\n         LOGCHAR APPLID=(APPLICID,NETAPPL1),SEQNCE='netappl1'\n         LOGCHAR APPLID=(APPLICID,NETAPPL2),SEQNCE='NETAPPL2'\n         LOGCHAR APPLID=(APPLICID,NETAPPL2),SEQNCE='netappl2'\n         LOGCHAR APPLID=(APPLICID,NETEST),SEQNCE='NETEST'\n         LOGCHAR APPLID=(APPLICID,NETEST),SEQNCE='netest'\n         LOGCHAR APPLID=(APPLICID,NETOP),SEQNCE='NETOP'\n         LOGCHAR APPLID=(APPLICID,NETOP),SEQNCE='netop'\n         LOGCHAR APPLID=(APPLICID,NETSOLA),SEQNCE='NETSOLA'\n         LOGCHAR APPLID=(APPLICID,NETSOLA),SEQNCE='netsola'\n         LOGCHAR APPLID=(APPLICID,NETSOLB),SEQNCE='NETSOLB'\n         LOGCHAR APPLID=(APPLICID,NETSOLB),SEQNCE='netsolb'\n         LOGCHAR APPLID=(APPLICID,NETSOL),SEQNCE='NETSOL'\n         LOGCHAR APPLID=(APPLICID,NETSOL),SEQNCE='netsol'\n         LOGCHAR APPLID=(APPLICID,TESTWYL),SEQNCE='TESTWYL'\n         LOGCHAR APPLID=(APPLICID,TESTWYL),SEQNCE='testwyl'\n         LOGCHAR APPLID=(APPLICID,HCF),SEQNCE='HCF'\n         LOGCHAR APPLID=(APPLICID,HCF),SEQNCE='hcf'\n         LOGCHAR APPLID=(APPLICID,LCV),SEQNCE='LCV'\n         LOGCHAR APPLID=(APPLICID,LCV),SEQNCE='lcv'\n         LOGCHAR APPLID=(APPLICID,NCCFA),SEQNCE='NCCFA'\n         LOGCHAR APPLID=(APPLICID,NCCFA),SEQNCE='nccfa'\n         LOGCHAR APPLID=(APPLICID,NCCFB),SEQNCE='NCCFB'\n         LOGCHAR APPLID=(APPLICID,NCCFB),SEQNCE='nccfb'\n         LOGCHAR APPLID=(APPLICID,NCCF),SEQNCE='NCCF'\n         LOGCHAR APPLID=(APPLICID,NCCF),SEQNCE='nccf'\n         LOGCHAR APPLID=(APPLICID,NPA),SEQNCE='NPA'\n         LOGCHAR APPLID=(APPLICID,NPA),SEQNCE='npa'\n         ENDINTAB\n         END\n./ ADD NAME=LOGTABA\n//EP91853A JOB (91853,819593,D,PSTT),'DAVIDSON 3RD FLOOR',CLASS=I,\n// MSGCLASS=A,TIME=1,NOTIFY=EP91853,USER=*,PASSWORD=*\n/*JOBPARM C=0,L=2\n//*********************************************************************\n//*********************************************************************\n//*                                                                 ***\n//*                                                                 ***\n//*    PURPOSE:            VTAM LOGON INTERPRET TABLES              ***\n//*                                                                 ***\n//*               *NOTE*   ANY CHANGES TO THIS JCL SHOULD ALSO      ***\n//*                        BE INCLUDED IN 'SYS1.MVSGEN' MEMBER      ***\n//*                        'GEN04100' TO ENSURE A 'SYS1.VTAMLIB'    ***\n//*                        CREATED AT SYSGEN TIME WILL BE CURRENT.  ***\n//*                                                                 ***\n//*                                                                 ***\n//*    OWNER:              SYSTEMS SUPPORT                          ***\n//*                                                                 ***\n//*    CONTACT:            ED PITKIN                                ***\n//*                                                                 ***\n//*                                                                 ***\n//*********************************************************************\n//*********************************************************************\n//*\n//TABLE2      EXEC  ASMFCL,CLASS=$,\n//  PARM.ASM='LINECOUNT(56),NODECK,OBJ,XREF',\n//  PARM.LKED='LIST,XREF,RENT'\n//ASM.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,UNIT=SYSDA,VOL=SER=FOOBAR\n//ASM.SYSPRINT DD  SYSOUT=*\n//SYSIN       DD  DSN=SYS9.VTAM.CNTL(VLOGTAB2),DISP=SHR\n//LKED.SYSLMOD  DD  DSN=SYS1.VTAMLIB(VLOGTAB2),DISP=SHR,UNIT=SYSDA,\n//             VOL=SER=FOOBAR\n//LKED.SYSPRINT  DD  SYSOUT=*\n//SYSIN  DD  *\n  SETCODE AC(1)\n  NAME VLOGTAB2(R)\n/*\n./ ADD NAME=MACROS\n         MACRO\n&LABEL   $IC\n.*\n.*  FUNCTION : GENERATE 3270 INSERT CURSOR ORDER.\n.*\n.*  INPUT    : NONE\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE IC ORDER\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n&LABEL   DC    X'13'               IC\n         MEND\n         MACRO\n&LABEL   $IO   &CMD\n.*\n.*  FUNCTION : GENERATE VALID IO COMMAND FOR 3270 DATA STREAM.\n.*\n.*  INPUT    : &CMD     = WRITE\n.*                        WSF         - WRITE STRUCTURED FIELD\n.*                        ERASE/WRITE - USE &MDL70 TO SELECT IO CMD\n.*             &MDL70   - SPECIFIES MODEL NUMBER OF 3270 TERMINAL.\n.*\n.*  OUTPUT   : ASSEMBLER DC STATEMENT FOR IO COMMAND.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC,&MDL70\n         LCLC  &OPCODE,&COMMENT\n.*   PROCESS WRITE COMMAND\n         AIF ('&CMD' NE 'WRITE').WSF\n&OPCODE  SETC  'F1'\n         AGO    .DC\n.*   PROCESS WRITE STRUCTURED FIELD COMMAND\n.WSF     AIF ('&CMD' NE 'WSF').ERWRIT\n&OPCODE  SETC  'F3'\n         AGO    .DC\n.*   PROCESS ERASE/WRITE COMMAND\n.ERWRIT  AIF ('&CMD' NE 'ERASE/WRITE').ERROR\n&OPCODE  SETC  'F5'\n         AIF (&MDL70 LE 2).DC\n&OPCODE  SETC  '7E'\n         AGO    .DC\n.*   PROCESS INVALID COMMANDS\n.ERROR   MNOTE 8,'&CMD IS AN INVALID 3270 COMMAND'\n         MEXIT\n.DC      ANOP\n&COMMENT SETC '                &CMD FOR 3270 MODEL &MDL70'\n&LABEL   DC    X'&OPCODE'&COMMENT\n         MEND\n         MACRO\n         $MODEL &NUM\n.*\n.*  FUNCTION : SET MODEL NUMBER FOR SUBSEQUENT 3270 MACRO INSTRUCTIONS.\n.*\n.*  INPUT    : 3270 MODEL NUMBER (1,2,3,4 OR 5)\n.*\n.*  OUTPUT   : &MDL70 SETA SYMBOL IS SET.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC,&MDL70\n         AIF   ((&NUM GE 2) AND (&NUM LE 4)).OK\n         MNOTE 8,'3270 MODEL &MDL70 IS NOT SUPPORTED BY THESE MACROS.'\n         MEXIT\n.OK      ANOP\n&MDL70   SETA  &NUM\n         MEND\n         MACRO\n&LABEL   $RA   &OPTIONS\n.*\n.*  FUNCTION : GENERATE 3270 REPEAT TO ADDRESS ORDER. THE (ROW,COLUMN)\n.*             FORMAT ADDRESS IS CONVERTED TO THE HEX CHARACTERS\n.*             REQUIRED FOR THE ORDER AND THE REPEAT CHARACTER IS\n.*             APPENDED TO THE END OF THE RA ORDER.\n.*\n.*  REFERENCE: BUFFER ADDRESS CONVERSION ALGORITHM IN\n.*             GC27-6999 INTRO TO PROGRAMMING THE 3270 IDS\n.*\n.*  INPUT    : BUFFER ADDRESS AND CHARACTER IN (ROW,COLUMN,CHAR) FORMAT\n.*             CHAR MUST BE IN THE FORMAT C'A' OR X'C1'\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE RA ORDER\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC\n         LCLA  &ROW,&COLUMN,&BUFFLOC,&I1,&I2\n         LCLC  &COMMENT,&CHAR\n&ROW     SETA  &OPTIONS(1)\n&COLUMN  SETA  &OPTIONS(2)\n&CHAR    SETC  '&OPTIONS(3)'\n.*  CALC OFFSET IN 3270 BUFFER\n&BUFFLOC SETA  ((&ROW-1)*80)+(&COLUMN-1)\n.*  CONVERT 12 BIT ADDR TO TWO 6 BIT ADDRS\n&I1      SETA  &BUFFLOC/64\n&I2      SETA  &BUFFLOC-(&I1*64)\n.*  CHANGE INDICES INTO 3270 CONVERSION TABLE FROM 0-BASED TO 1-BASED\n&I1      SETA  &I1+1\n&I2      SETA  &I2+1\n&COMMENT SETC  '    RA &OPTIONS'\n&LABEL   DC    XL3'3C&TAB3270(&I1)&TAB3270(&I2)',&CHAR&COMMENT\n         MEND\n         MACRO\n&LABEL   $SBA  &ADDR\n.*\n.*  FUNCTION : GENERATE 3270 SET BUFFER ADDRESS ORDER. THE (ROW,COLUMN)\n.*             FORMAT ADDRESS IS CONVERTED TO THE HEX CHARACTERS\n.*             REQUIRED FOR THE ORDER.\n.*\n.*  REFERENCE: BUFFER ADDRESS CONVERSION ALGORITHM IN\n.*             GC27-6999 INTRO TO PROGRAMMING THE 3270 IDS\n.*\n.*  INPUT    : BUFFER ADDRESS IN (ROW,COLUMN FORMAT)\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE SBA ORDER AND THE BUFFER ADDR\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC\n         LCLA  &ROW,&COLUMN,&BUFFLOC,&I1,&I2\n         LCLC  &COMMENT\n&ROW     SETA  &ADDR(1)\n&COLUMN  SETA  &ADDR(2)\n.*  CALC OFFSET IN 3270 BUFFER\n&BUFFLOC SETA  ((&ROW-1)*80)+(&COLUMN-1)\n.*  CONVERT 12 BIT ADDR TO TWO 6 BIT ADDRS\n&I1      SETA  &BUFFLOC/64\n&I2      SETA  &BUFFLOC-(&I1*64)\n.*  CHANGE INDICES INTO 3270 CONVERSION TABLE FROM 0-BASED TO 1-BASED\n&I1      SETA  &I1+1\n&I2      SETA  &I2+1\n&COMMENT SETC  '          SBA &ADDR'\n&LABEL   DC    XL3'11&TAB3270(&I1)&TAB3270(&I2)'&COMMENT\n         MEND\n         MACRO\n&LABEL   $SF    &ATTR\n.*\n.*  FUNCTION : GENERATE START FIELD ORDER WITH SPECIFIED\n.*             OPTIONS.\n.*\n.*  INPUT    : &ATTR   - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                       (PROT,NUM,MDT,HI,NONDISP,SKIP)\n.*                       (UNPROT,ALPHA,NOMDT)\n.*\n.*  OUTPUT   : SFE ORDER PLUS OPTION BYTES.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLC  &COMMENT\n.*   PROCESS ATTRIBUTE OPTIONS\n         AIF (N'&ATTR  EQ 0).NOATTR\n         $ATTR &ATTR\n         AIF (&RC EQ 0).DC\n.* USE DEFAULT ATTRIBUTE BYTE\n.NOATTR  ANOP\n&ATTRIB  SETC  '40'\n.DC      ANOP\n&COMMENT SETC  '              SF &ATTR'\n&LABEL   DC    X'1D&ATTRIB'&COMMENT\n         MEND\n         MACRO\n&LABEL   $SFE   &ATTR=,&XHL=,&COL=,&PSS=\n.*\n.*  FUNCTION : GENERATE START FIELD EXTENDED ORDER WITH SPECIFIED\n.*             OPTIONS.\n.*\n.*  INPUT    : &ATTRIB - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                       (PROT,NUM,MDT,HI,NONDISP,SKIP)\n.*                       (UNPROT,ALPHA,NOMDT)\n.*           : &XHL    - EXTENDED HIGHLIGHTING OPTIONS. MUST BE ONE OF\n.*                       (BLINKING,REVERSE,UNDERSCORE)\n.*           : &COL    - COLOUR OPTION. IT MUST BE ONE OF\n.*                       (BLUE,RED,PINK,GREEN,TURQUOISE,YELLOW,WHITE)\n.*                       ONLY 1ST 3 CHARS ARE CHECKED\n.*           : &PSS    - PROGRAMMED SYMBOL SET. THE VALUE MUST BE\n.*                       BETWEEN X'40' AND X'EF'.\n.*\n.*  OUTPUT   : SFE ORDER PLUS OPTION BYTES.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLA  &CNT\n         LCLC  &OPTIONS,&COMMENT\n.*   PROCESS ATTRIBUTE OPTIONS\n         AIF ('&ATTR' EQ '').XHL\n         $ATTR &ATTR\n         AIF (&RC NE 0).XHL\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'C0'.'&ATTRIB'\n.*   PROCESS EXTENDED HIGHLIGHT OPTIONS\n.XHL     AIF ('&XHL' EQ '').COL\n         $XHL  &XHL\n         AIF (&RC NE 0).COL\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'41'.'&ATTRIB'\n.*   PROCESS COLOUR OPTION.\n.COL     AIF ('&COL' EQ '').PSS\n         $COL  &COL\n         AIF (&RC NE 0).PSS\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'42'.'&ATTRIB'\n.*   PROCESS PROGRAMMED SYMBOL SET OPTION\n.PSS     AIF ('&PSS' EQ '').CHKCNT\n         $PSS  &PSS\n         AIF (&RC NE 0).CHKCNT\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'43'.'&ATTRIB'\n.*   VERIFY ATLEAST ONE VALID OPTION.\n.CHKCNT  AIF (&CNT GT 0).DC\n         MNOTE 8,'NO VALID ATTRIBUTES SPECIFIED IN $SFE MACRO'\n&RC      SETA  4\n         MEXIT\n.*   GENERATE SFE ORDER AND OPTIONS\n.DC      ANOP\n&COMMENT SETC  '      SFE &ATTR,&XHL,&COL,&PSS'\n&LABEL   DC    X'290&CNT&OPTIONS'&COMMENT\n         MEND\n         MACRO\n&LABEL   $WCC   &OPTIONS\n.*\n.*  FUNCTION : GENERATE VALID WRITE CONTROL CHARACTER FOR 3270 DATA\n.*             STREAM.\n.*\n.*  METHOD   : USE BIT ARRAY TO FLAG SELECTED OPTIONS THEN GENERATE\n.*             APPROPRIATE HEX CODE.\n.*\n.*  INPUT    : &OPTIONS - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                        (ALARM,RESETKBD,MDT)\n.*\n.*  OUTPUT   : ASSEMBLER DC STATEMENT FOR WCC CODE.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC,&MDL70\n         LCLA  &I1,&BIT(8)\n         LCLC  &COMMENT\n         AIF   (N'&OPTIONS EQ 0).DEFAULT\n&I1      SETA  1\n.LOOP    ANOP\n.*   PROCESS ALARM ATTRIBUTE\n         AIF ('&OPTIONS(&I1)' NE 'ALARM').RESETKB\n&BIT(6)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS RESETKBD ATTRIBUTE\n.RESETKB AIF ('&OPTIONS(&I1)' NE 'RESETKBD').MDT\n&BIT(7)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS MDT ATTRIBUTE\n.MDT     AIF ('&OPTIONS(&I1)' NE 'MDT').ERROR\n&BIT(8)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS INVALID ATTRIBUTES\n.ERROR   MNOTE 8,'&OPTIONS(&I1) IS INVALID FOR WCC'\n.NXTONE  ANOP\n&I1      SETA  &I1+1\n         AIF (&I1 LE N'&OPTIONS).LOOP\n.*   CALCULATE VALUE OF OPTION BYTE PLUS ONE\n.DEFAULT ANOP\n&I1      SETA &BIT(8)+&BIT(7)*2+&BIT(6)*4+1\n         AIF (&I1 LE 64).GETCHAR\n         MNOTE 8,'&I1 IS GREATE THAN 64'\n         MEXIT\n.*   LOOK UP CHAR FOR CALCULATED OPTION BYTE.\n.GETCHAR ANOP\n&COMMENT SETC '                WCC &OPTIONS'\n&LABEL   DC    X'&TAB3270(&I1)'&COMMENT\n         MEND\n***************************************************************\n*  FUNCTION : INITIALIZE MACRO SYMBOLS REQUIRED BY 3270 MACROS.\n*\n*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n*\n*  DATE     : SEPT 19/80\n*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC,&MDL70\n         PRINT OFF\n&MDL70      SETA  2\n&TAB3270(1) SETC  '40'\n&TAB3270(2) SETC  'C1'\n&TAB3270(3) SETC  'C2'\n&TAB3270(4) SETC  'C3'\n&TAB3270(5) SETC  'C4'\n&TAB3270(6) SETC  'C5'\n&TAB3270(7) SETC  'C6'\n&TAB3270(8) SETC  'C7'\n&TAB3270(9) SETC  'C8'\n&TAB3270(10) SETC 'C9'\n&TAB3270(11) SETC '4A'\n&TAB3270(12) SETC '4B'\n&TAB3270(13) SETC '4C'\n&TAB3270(14) SETC '4D'\n&TAB3270(15) SETC '4E'\n&TAB3270(16) SETC '4F'\n&TAB3270(17) SETC '50'\n&TAB3270(18) SETC 'D1'\n&TAB3270(19) SETC 'D2'\n&TAB3270(20) SETC 'D3'\n&TAB3270(21) SETC 'D4'\n&TAB3270(22) SETC 'D5'\n&TAB3270(23) SETC 'D6'\n&TAB3270(24) SETC 'D7'\n&TAB3270(25) SETC 'D8'\n&TAB3270(26) SETC 'D9'\n&TAB3270(27) SETC '5A'\n&TAB3270(28) SETC '5B'\n&TAB3270(29) SETC '5C'\n&TAB3270(30) SETC '5D'\n&TAB3270(31) SETC '5E'\n&TAB3270(32) SETC '5F'\n&TAB3270(33) SETC '60'\n&TAB3270(34) SETC '61'\n&TAB3270(35) SETC 'E2'\n&TAB3270(36) SETC 'E3'\n&TAB3270(37) SETC 'E4'\n&TAB3270(38) SETC 'E5'\n&TAB3270(39) SETC 'E6'\n&TAB3270(40) SETC 'E7'\n&TAB3270(41) SETC 'E8'\n&TAB3270(42) SETC 'E9'\n&TAB3270(43) SETC '6A'\n&TAB3270(44) SETC '6B'\n&TAB3270(45) SETC '6C'\n&TAB3270(46) SETC '6D'\n&TAB3270(47) SETC '6E'\n&TAB3270(48) SETC '6F'\n&TAB3270(49) SETC 'F0'\n&TAB3270(50) SETC 'F1'\n&TAB3270(51) SETC 'F2'\n&TAB3270(52) SETC 'F3'\n&TAB3270(53) SETC 'F4'\n&TAB3270(54) SETC 'F5'\n&TAB3270(55) SETC 'F6'\n&TAB3270(56) SETC 'F7'\n&TAB3270(57) SETC 'F8'\n&TAB3270(58) SETC 'F9'\n&TAB3270(59) SETC '7A'\n&TAB3270(60) SETC '7B'\n&TAB3270(61) SETC '7C'\n&TAB3270(62) SETC '7D'\n&TAB3270(63) SETC '7E'\n&TAB3270(64) SETC '7F'\n         PRINT ON\n./ ADD NAME=MODETAB,SSI=00093260\nMODETAB  TITLE 'M O D E T A B  ***  SAS/GRAPH AND WYLBUR MODE TABLE'\n         MACRO ,\n&NM      CRT   &FM=,&TS=,&PRI=,&SEC=,&COM=,&LU=,&EDS=,&DEF=,&ALT=,     *\n               &SW=,&RU=\n         GBLC  &GFM,&GTS,&GPRI,&GSEC,&GCOM,&GLU,&GEDS,&GDEF,&GALT,&GSW\n         GBLC  &GRU\n         GBLB  &GONCE\n         AIF   (&GONCE).GONCE\n&GFM     SETC  '02'\n&GTS     SETC  '02'\n&GPRI    SETC  '71'\n&GSEC    SETC  '40'\n&GCOM    SETC  '2000'\n&GLU     SETC  '00'\n&GEDS    SETC  '00'\n&GDEF    SETC  '1850'\n&GALT    SETC  '1850'\n&GSW     SETC  '7F'\n&GRU     SETC  '0000'\n&GONCE   SETB  1             SET FIRST TIME DONE\n.GONCE   AIF   ('&FM' EQ '').NOGFM\n&GFM     SETC  '&FM'\n.NOGFM   AIF   ('&TS' EQ '').NOGTS\n&GTS     SETC  '&TS'\n.NOGTS   AIF   ('&PRI' EQ '').NOGPRI\n&GPRI    SETC  '&PRI'\n.NOGPRI  AIF   ('&SEC' EQ '').NOGSEC\n&GSEC    SETC  '&SEC'\n.NOGSEC  AIF   ('&COM' EQ '').NOGCOM\n&GCOM    SETC  '&COM'\n.NOGCOM  AIF   ('&LU' EQ '').NOGLU\n&GLU     SETC  '&LU'\n.NOGLU   AIF   ('&EDS' EQ '').NOGEDS\n&GEDS    SETC  '&EDS'\n.NOGEDS  AIF   ('&DEF' EQ '').NOGDEF\n&GDEF    SETC  '&DEF'\n.NOGDEF  AIF   ('&ALT' EQ '').NOGALT\n&GALT    SETC  '&ALT'\n.NOGALT  AIF   ('&SW' EQ '').NOGSW\n&GSW     SETC  '&SW'\n.NOGSW   AIF   ('&RU' EQ '').NOGRU\n&GRU     SETC  '&RU'\n.NOGRU   AIF   (T'&SYSLIST(0) NE 'O').OK\n         MNOTE 4,'LOGMODE (NAME FIELD) EXPECTED'\n.OK      ANOP  ,\n&NM      MODEENT LOGMODE=&NM,FMPROF=X'&GFM',TSPROF=X'&GTS',RUSIZES=X'&G*\n               RU',PRIPROT=X'&GPRI',SECPROT=X'&GSEC',COMPROT=X'&GCOM', *\n               PSERVIC=X'&GLU&GEDS.00000000&GDEF&GALT&GSW.00'\n         MEND  ,\n         EJECT ,\n         PRINT GEN                                               86128\nMODETAB  MODETAB ,\n         SPACE 2\n*        LOCAL AND BISYNCH REMOTE CRTS                           85354\n*\nL3277M2  CRT   DEF=0000,ALT=0000,SW=02   3277-2                  85354\n         SPACE 1                                                 85354\n*    LOCAL VARIABLE SIZE DEVICES (3290, 3180)                    92290\n*                                                                92290\nL3180MX  CRT   DEF=0000,ALT=0000,SW=03,EDS=80 QUERY; USE LARGEST 92290\nL3278GX  CRT   DEF=0000,ALT=0000,SW=03,EDS=80 QUERY; USE LARGEST 92290\nL3278MX  CRT   DEF=0000,ALT=0000,SW=03,EDS=00 QUERY; USE LARGEST 92290\nL3279GX  CRT   DEF=0000,ALT=0000,SW=03,EDS=80 QUERY; USE LARGEST 92290\nL3279MX  CRT   DEF=0000,ALT=0000,SW=03,EDS=00 QUERY; USE LARGEST 92290\nL3290    CRT   DEF=0000,ALT=0000,SW=03,EDS=80 QUERY; USE LARGEST 92290\n         SPACE 1                                                 85354\nL3278M2  CRT   DEF=1850,ALT=0000,SW=7E,EDS=00 LOCAL PLAIN 24*80  92290\nL3278G2  CRT   EDS=80        EXTENDED FIELDS SUPPORT\nL3278M3  CRT   ALT=2050,SW=7F,EDS=00  PLAIN 32*80                85360\nL3278G3  CRT   EDS=80        EXTENDED FIELD\nL3278M4  CRT   ALT=2B50,EDS=00  PLAIN 43*80\nL3278G4  CRT   EDS=80        EXTENDED FIELD\nL3278M5  CRT   ALT=1B84,EDS=00        PLAIN 27*132\nL3278G5  CRT   EDS=80        EXTENDED FIELD\n         SPACE 1\nL3279M2  CRT   ALT=1850,EDS=00   BASIC 24*80 COLOR\nL3279G2  CRT   EDS=80        EXTENDED 24*80\nL3279M3  CRT   ALT=2050,EDS=00   BASIC 32*80 COLOR\nL3279G3  CRT   EDS=80        EXTENDED 24*80\n         SPACE 1                                                 85354\n*********************************************************************\n*                                                                   *\n*        PANACEA - IBM'S ANSWER TO EVERYTHING                       *\n*        3272/3274/3276 ATTACHED 327X, 328X IN MODEL 2 MODE         *\n*                                                                   *\n*********************************************************************\nDSILGMOD MODEENT LOGMODE=DSILGMOD,FMPROF=X'02',TSPROF=X'02',           *\n               PRIPROT=X'71',SECPROT=X'40',COMPROT=X'2000',            *\n               RUSIZES=X'0000',PSERVIC=X'000000000000000000000200'\n         SPACE 1                                                 88209\n*        (VANILLA) IBM 3180 CRTS IN LOCAL NON-SNA MODE           88209\nL3180M2  CRT   DEF=1850,ALT=0000,SW=7E,EDS=80 LOCAL PLAIN 24*80  88209\nL3180M3  CRT   ALT=2050,SW=7F  PLAIN 32*80                       88209\nL3180M4  CRT   ALT=2B50      PLAIN 43*80                         88209\nL3180M5  CRT   ALT=1B84      PLAIN 27*132                        88209\n         SPACE 1                                                 88209\nL3286    CRT   DEF=0000,ALT=0000,EDS=00,SW=02 3286-2             85354\nL3287    CRT   DEF=,ALT=,SW=                  3287-2             85354\nL3287G   CRT   EDS=80             EXTENDED DS 3287-2             85354\n         SPACE 1                                                 89038\n*        ENTRY FOR ZAPPING                                       89038\nL6262    CRT   DEF=1850,ALT=0000,EDS=80,SW=FE  LOCAL NON-SNA 6262\n         SPACE 1                                                 89038\n*        NEXT ENTRY FOR FUN AND GAMES - 3278 WHEN ATTACHED TO    89038\n*        4341 CONSOLE PORT, OR A 3278 IN/ON A 3082.              89038\n*        SCREEN SIZE IS 20*80                                    89038\nLCONS    CRT   DEF=1450,ALT=0000,EDS=80,SW=FE  3278 AS CONSOLE   89038\n         SPACE 2\n*        SNA CRTS - LOCAL\n*\nS3278M2  CRT   FM=03,TS=03,PRI=B1,SEC=90,COM=3080,RU=87C7,LU=02,       *\n               EDS=00,DEF=1850,ALT=0000,SW=7E  NO SWITCHING      86128\nS3278G2  CRT   EDS=80        EXTENDED FIELDS SUPPORT\nS3278M3  CRT   ALT=2050,EDS=00,SW=7F  PLAIN 32*80                86128\nS3278G3  CRT   EDS=80        EXTENDED FIELD\nS3278M4  CRT   ALT=2B50,EDS=00  PLAIN 43*80\nS3278G4  CRT   EDS=80        EXTENDED FIELD\nS3278M5  CRT   ALT=1B84,EDS=00  PLAIN 27*132                     86128\nS3278G5  CRT   EDS=80        EXTENDED FIELD\n         SPACE 1                                                 87103\n*        ITT LARGE CRT 43*80 IN DEFAULT MODE AND 27*132 IN ALTERNATE\n*                                                                87103\nS3278M45 CRT EDS=80,DEF=2B50,ALT=1B84,SW=7F  43*80 AND 27*132    87103\nS3278M35 CRT EDS=80,DEF=2050,ALT=1B84,SW=7F  32*80 AND 27*132    88209\n         SPACE 1\nS3279M2  CRT   DEF=1850,ALT=0000,EDS=00,SW=7E  BASIC 24*80 COLOR 86167\nS3279G2  CRT   EDS=80        EXTENDED 24*80\nS3279M3  CRT   ALT=2050,EDS=00,SW=7F   BASIC 32*80 COLOR         86128\nS3279G3  CRT   EDS=80        EXTENDED 24*80\n         SPACE 1                                                 85354\nS3287    CRT   FM=03,TS=03,PRI=B1,SEC=90,COM=3080,RU=8787,LU=03,       *\n               EDS=00,DEF=1850,ALT=2B50,SW=7F   SNA 3287 LU 3    86128\nS3287G   CRT   FM=03,TS=03,PRI=B1,SEC=90,COM=3080,RU=8787,LU=03,       *\n               EDS=80,DEF=1850,ALT=2B50,SW=7F   3287 LU 3 EDS    86128\nS3287LU1 MODEENT LOGMODE=S3287LU1,FMPROF=X'03',TSPROF=X'03',           *\n               PRIPROT=X'B1',SECPROT=X'90',COMPROT=X'7080',            *\n               RUSIZES=X'8787',PSERVIC=X'01800001E100000000000000',    *\n               PSNDPAC=X'01',SRCVPAC=X'01'                       85354\n         SPACE 1                                                 91014\n*   THE 3268 IS DEFINED SEPARATELY TO AVOID ERRORS IN HASP328X   91014\n*        NOTE THAT PRI SIZE= SEC.SIZE IS SIGNAL TO 328X CODE.    91014\nS3268    CRT   FM=03,TS=03,PRI=B1,SEC=90,COM=3080,RU=8787,LU=03,       *\n               EDS=00,DEF=1850,ALT=1850,SW=7F   SNA 3268 LU 3    91014\n         SPACE 2                                                 86167\n*        SNA CRTS - REMOTE   (DEFINED FROM WYLBUR INST. MANUAL)  86167\n*                                                                86167\nT3278M2  CRT   FM=03,TS=03,PRI=B1,SEC=90,COM=3080,RU=87F8,LU=02,       *\n               EDS=00,DEF=1850,ALT=1850,SW=7F                    86167\nT3278G2  CRT   EDS=80        EXTENDED FIELDS SUPPORT             86167\nT3278M3  CRT   ALT=2050,EDS=00        PLAIN 32*80                86167\nT3278G3  CRT   EDS=80        EXTENDED FIELD                      86167\nT3278M4  CRT   ALT=2B50,EDS=00  PLAIN 43*80                      86167\nT3278G4  CRT   EDS=80        EXTENDED FIELD                      86167\nT3278M5  CRT   ALT=1B84,EDS=00  PLAIN 27*132                     86167\nT3278G5  CRT   EDS=80        EXTENDED FIELD                      86167\n         SPACE 1                                                 86167\nT3279M2  CRT   DEF=1850,ALT=1850,EDS=00  BASIC 24*80 COLOR       86167\nT3279G2  CRT   EDS=80        EXTENDED 24*80                      86167\nT3279M3  CRT   ALT=2050,EDS=00    BASIC 32*80 COLOR              86167\nT3279G3  CRT   EDS=80        EXTENDED 24*80                      86167\n         SPACE 1                                                 92290\nT3278MX  CRT   EDS=00,DEF=0000,ALT=0000,SW=03 QUERY; USE LARGEST 92290\nT3278GX  CRT   EDS=80,DEF=0000,ALT=0000,SW=03 QUERY; USE LARGEST 92290\nT3279MX  CRT   EDS=00,DEF=0000,ALT=0000,SW=03 QUERY; USE LARGEST 92290\nT3279GX  CRT   EDS=80,DEF=0000,ALT=0000,SW=03 QUERY; USE LARGEST 92290\nT3180MX  CRT   EDS=80,DEF=0000,ALT=0000,SW=03 QUERY; USE LARGEST 92290\nT3290    CRT   EDS=80,DEF=0000,ALT=0000,SW=03 QUERY; USE LARGEST 92290\n         SPACE 1                                                 85354\nT3277M2  CRT   DEF=0000,ALT=0000,SW=02,SEC=90  3277-2 SNA !      86167\nT3277M1  CRT   SW=01                  3277-1 SNA !!              86167\n         SPACE 2\n*        NTO2 SUPPORTED TTYS\n*\nTTY      MODEENT LOGMODE=TTY,FMPROF=X'03',TSPROF=X'03',PRIPROT=X'B1',  *\n               SECPROT=X'90',COMPROT=X'3040',                    86128 *\n               PSERVIC=X'010000000000000000000000'               92071\n         SPACE 1                                                 92071\n*        NTO ENTRY FOR SSI (SUPER)WYLBUR                         92071\nSWYLNTO1 MODEENT LOGMODE=SWYLTTY,FMPROF=X'03',TSPROF=X'03',            *\n               PRIPROT=X'B1',SECPROT=X'B1',COMPROT=X'3080',            *\n               PSERVIC=X'010000000000000000000000',RUSIZES=X'8585'\n         SPACE 1                                                 88248\n*        NTO ENTRY FOR RELAY/3270 (RELAY GOLD)                   88248\nB3767LU1 MODEENT LOGMODE=RLY3767,FMPROF=X'03',TSPROF=X'03',            *\n               PRIPROT=X'B1',SECPROT=X'A0',COMPROT=X'3040',            *\n               PSERVIC=X'010000000000000000000000'               88248\n         SPACE 1                                                 90147\n*        CRT ENTRY FOR LANDMARK'S THE MONITOR FOR CICS (TMON)    90147\nT3279M21 MODEENT LOGMODE=T3279M21,FMPROF=X'03',TSPROF=X'03',           *\n               PRIPROT=X'B1',SECPROT=X'90',COMPROT=X'3080',            *\n               RUSIZES=X'87C7',PSERVIC=X'028000000000185018507F00'\n         SPACE 2                                                 90123\n*        JES2 \"BATCH\" TERMINALS (ALSO BARR/SNA)                  90123\n*                                                                90123\nBATCH    MODEENT LOGMODE=BATCH,FMPROF=X'03',TSPROF=X'03',              *\n               PRIPROT=X'A3',SECPROT=X'A3',COMPROT=X'7080'       90123\n         SPACE 1                                                 93260\n*        LU 6.2 AND APPC SESSION DEFINITION                           *\n*                                                                     *\nSNASVCMG MODEENT LOGMODE=SNASVCMG,FMPROF=X'13',TSPROF=X'07',           *\n               PRIPROT=X'B0',SECPROT=X'B0',COMPROT=X'D0B1',            *\n               RUSIZES=X'8585',ENCR=B'0000',                           *\n               PSERVIC=X'060000000000000000000300'               93260\n         SPACE 2\n         MODEEND ,\n         END   ,\n./ ADD NAME=NETINIT,SSI=00090344\nVINI     TITLE 'NETINIT  ...  VTAM APPLICATION AUTO-START'       87298\n***********************************************************************\n*                                                                     *\n*  FUNCTION : NETINIT IS A VTAM APPLICATION PROGRAM USED TO CONTROL   *\n*             THE STARTUP OF OTHER VTAM APPLICATION PROGRAMS. IT IS   *\n*             STARTED AT IPL TIME AND ENSURES THAT CERTAIN VTAM       *\n*             APPLICATION PROGRAMS ARE STARTED AND STARTED IN         *\n*             A PARTICULAR ORDER.                                     *\n*                                                                     *\n*             SEVERAL VTAM APPLICATIONS SUCH AS TCAS, NCCF AND HCF    *\n*             CURRENTLY REQUIRE OPERATOR INTERVENTION TO START THEM.  *\n*             THEY ARE UNABLE TO HANDLE THE SITUATION WHEN THEY       *\n*             ARE STARTED BEFORE VTAM IS COMPLETELY INITIALIZED.      *\n*             EITHER THEY ABEND OR THEY REQUIRE A REPLY FROM THE      *\n*             OPERATOR TO RETRY THEIR STARTUP.                        *\n*                                                                     *\n*             CURRENTLY, BOTH NCCF AND NETOP CAN BE A PRIMARY         *\n*             PROGRAM OPERATOR. NETOP WILL START CORRECTLY IF THE     *\n*             POI IS IN USE BY ANOTHER PROGRAM BUT NCCF WILL NOT.     *\n*             SINCE BOTH WILL CONTINUE TO BE IN USE, NETOP CAN        *\n*             BE STARTED ONLY AFTER NCCF IS RUNNING.                  *\n*                                                                     *\n*             NETINIT WILL ADDRESS THE ABOVE PROBLEMS.                *\n*                                                                     *\n*             FIRST, NETINIT READS IN A SET OF COMMAND RECORDS. EACH  *\n*             COMMAND RECORD DEFINES A PARTICULAR OS COMMAND          *\n*             THAT IS TO BE ISSUED USING SVC 34. THE LEVEL            *\n*             NUMBERS ARE USED TO DEFINE A HIERARCHY FOR EXECUTION    *\n*             OF THE COMMANDS. HIGHER LEVELS ARE SUBORDINATE TO THE   *\n*             LOWER LEVELS THEY FOLLOW IN THE INPUT STREAM. ALL       *\n*             COMMANDS WITH IDENTICAL LEVEL NUMBERS AND WHICH ARE     *\n*             SUBORDINATE TO ONE LOWER LEVEL COMMAND, CAN BE          *\n*             ISSUED IN PARALLEL. A HIGHER LEVEL COMMAND CAN ONLY BE  *\n*             EXECUTED ONCE ANY LOWER LEVEL COMMANDS PRIOR TO IT      *\n*             IN THE INPUT STREAM HAVE BEEN EXECUTED.                 *\n*                                                                     *\n*             EG. THIS INPUT COMMAND FILE:                            *\n*                                                                     *\n*             LEVEL #   COMMAND                                       *\n*             *******   *******                                       *\n*                1      S NCCF                                        *\n*                2      S NETOP                                       *\n*                1      S TCAS                                        *\n*                1      $SLGN1                                        *\n*                2      $SLNE90                                       *\n*                1      S HCF                                         *\n*                                                                     *\n*                 WOULD RESULT IN THE FOLLOWING SEQUENCE OF COMMANDS: *\n*                                                                     *\n*             S NCCF      S TCAS     $SLGN1      S HCF                *\n*             S NETOP                $SLNE90                          *\n*                                                                     *\n*                 WHERE EXECUTION OF EACH COLUMN OF COMMANDS WOULD    *\n*                 PROCEED IN PARALLEL BUT EACH ROW IN A PARTICULAR    *\n*                 COLUMN MUST WAIT FOR THE PREVIOUS ROW COMMAND       *\n*                 TO COMPLETE.                                        *\n*                                                                     *\n*             THESE COMMANDS ARE READ INTO THE VTAM STARTUP TABLE     *\n*             AND EDITTED FOR OBVIOUS FORMAT ERRORS.                  *\n*                                                                     *\n*                                                                     *\n*             SECOND, NETINIT WAITS UNTIL IT CAN SUCCESSFULLY OPEN    *\n*             ITS VTAM ACB.                                           *\n*                                                                     *\n*                                                                     *\n*             THIRD, NETINIT PROCESS THE COMMANDS IT READ INTO        *\n*             THE VTAM STARTUP TABLE.                                 *\n*                                                                     *\n*             NETINIT CAN PROCESS TWO TYPES OF COMMAND RECORDS.       *\n*             THE VTAM COMMAND RECORDS DEFINE START COMMANDS FOR      *\n*             VTAM APPLICATIONS. NETINIT WILL ISSUE THE GIVEN         *\n*             COMMAND AND THEN USE THE INQUIRE MACRO TO WAIT UNTIL    *\n*             THE ASSOCIATED VTAM APPLICATION BECOMES ACTIVE. FOR THE *\n*             COMMAND COMMAND RECORDS, NETINIT ISSUES THE GIVEN       *\n*             COMMAND BUT DOESN'T MONITOR FOR ITS COMPLETION.         *\n*                                                                     *\n*                                                                     *\n*             FOURTH, NETINIT WRITES MESSAGES TO THE OPERATOR         *\n*             WHEN ERROR CONDITIONS ARE ENCOUNTERED. FOR EXAMPLE,     *\n*             NETINIT SETS TIMEOUT VALUES FOR THE LENGTH OF TIME      *\n*             IT WILL ATTEMPT TO OPEN THE ACB BEFORE QUITTING AND     *\n*             FOR THE LENGTH OF TIME IT WILL WAIT FOR AN APPLICATION  *\n*             TO BECOME ACTIVE.                                       *\n*                                                                     *\n*             FIFTH, NETINIT CAN BE RERUN AT ANY TIME. BEFORE         *\n*             STARTING ANY VTAM APPLICATION, THE STATUS OF THAT       *\n*             APPLICATION IS CHECKED WITH INQUIRE MACRO. START        *\n*             COMMANDS ARE IGNORED FOR ANY ACTIVE APPLICATIONS. ALL   *\n*             'COMMAND' COMMANDS ARE ISSUED REGARDLESS OF ANY         *\n*             ASSOCIATED STATUS. THE USER MUST ENSURE THAT ANY        *\n*             SUCH COMMANDS WILL NOT INTERFER WITH A CURRENTLY        *\n*             ACTIVE VTAM APPLICATION PROGRAM.                        *\n*                                                                     *\n*  WRITTEN BY: ED PITKIN, DISTRIBUTED SERVICES, BCSC                  *\n*                                                                     *\n*  DATE      : JULY 18/80.                                            *\n*                                                                     *\n         SPACE 1                                                      *\n*  INPUT:     BELOW IS THE FORMAT FOR AN INPUT COMMAND RECORD.        *\n*                                                                     *\n*             COLUMN    DATA DESCRIPTION                              *\n*             ======    ================                              *\n*               1       LEVEL NUMBER ASSOCIATED WITH THIS COMMAND     *\n*                      'V' TO DEFINE THE NAME OF THE NETWORK PROCEDURE.\n*                            TO BE STARTED IF NOT ALREADY ACTIVE.\n*                            DEFAULT NAME IS 'VTAM    '          85358\n*                       '*' OR 10 BLANKS - COMMENTS CARD         85358\n*                       '=' CHECK THAT TP FRONT-END SPECIFIED BY DD\n*                            NAME IN 5-12 IS UP. IF IT IS, VARY UCBS\n*                            SPECIFIED IN 14-20 (CUU-CUU) ON-LINE;\n*                            IF NOT UP, WRITES NASTY MESSAGES.   87298\n*               2       BLANK                                         *\n*               3       'V' IF STATUS OF COMMAND WILL BE MONITORED    *\n*                           WITH THE INQUIRE MACRO.                   *\n*                       'C' IF COMMAND WILL NOT BE MONITORED          *\n*                       'S' IF THE COMMAND IS A START COMMAND, TO BE\n*                       'R' IF THE START TASK IS ALREADY RUNNING,\n*                            COMMAND IS ISSUED, ELSE SKIPPED     86271\n*                       'U' ISSUE COMMAND IF VTAM APPLICATION IS UP\n*                            SUPPRESSED IF THE TASK IS ALREADY ACTIVE.\n*               4       BLANK                                         *\n*               5-12    VTAM APPLICATION ID ASSOCIATED WITH THIS      *\n*                       COMMAND.                                      *\n*               13      BLANK                                         *\n*               14-53   COMMAND THAT WILL BE PASSED TO SVC 34.        *\n*                                                                     *\n*  REGISTER USAGE:   R0-R4  - WORK REGS                               *\n*                    R5     - A(ACB)                                  *\n*                    R6     - A(NIB)                                  *\n*                    R7     - BAL REG FOR SHOULD NOT OCCURS           *\n*                    R8     - A(RPL)                                  *\n*                    R9     - A(VSE)                REGS              *\n*                    R10    - LENGTH OF VSE          FOR              *\n*                    R11    - LAST VSE IN VST         BXLE            *\n*                    R12    - BASE REG FOR NETINIT                    *\n*                    R13    - A(SAVEAREA)                             *\n*                    R14    - LINKAGE REG                             *\n*                    R15    - WORK REG                                *\n*                                                                     *\n*  ATTRIBUTES: AC(1)                                                  *\n*                                                                     *\n*  VTAM MACROS USED: INQUIRE                                          *\n*                                                                     *\n*  SYSTEM MACROS USED: OPEN, CLOSE, PUT, GET, WTO, GETMAIN, FREEMAIN  *\n*                                                                     *\n***********************************************************************\n         EJECT ,                                                 85358\n         PRINT NOGEN                                             85358\nNETINIT   CSECT\n          B     STM-NETINIT(0,R15) BR AROUND MODULE HEADER\nAPPLNAME  DC    AL1(8),CL8'NETINIT' VTAM APPLID\n          DC    CL10'&SYSDATE'\n          DC    CL8' /&SYSTIME/'\nSTM       STM   R14,R12,12(R13)    SAVE SYSTEMS REGS\n          LR    R12,R15            SET ADDRESSABILITY\n          USING NETINIT,R12          TO NETINIT\n          ST    R13,SAVEAREA+4     STORE SAVEAREA BACKWARD PTR\n          LR    R15,R13            TEMPORARILY SAVE OLD SAVEAREA PTR\n          LA    R13,SAVEAREA       LOAD A(NEW SAVEAREA)\n          ST    R13,8(,R15)        STORE SAVEAREA FORWARD PTR\n          USING VSEDSECT,R9        SET ADDRESSABILITY TO VSE\n          USING IFGRPL,R8          SET ADDRESSABILITY\n          LA    R8,RPL               TO VTAM RPL\n          USING ISTDNIB,R6         SET ADDRESSABILITY\n          LA    R6,NIB               TO VTAM NIB\n          USING IFGACB,R5          SET ADDRESSABILITY\n          LA    R5,ACB               TO VTAM ACB\n          SPACE 1\n*         BUILD  VTAM STARTUP TABLE\n          SPACE 1\n          BAL   R14,BUILDVST       READ AND EDIT INPUT COMMANDS\n          SPACE 1\n*         WAIT UNTIL VTAM IS INITIALIZED\n          SPACE 1\n          BAL   R14,OPENACB        GO OPEN VTAM ACB\n         SPACE 2\n*         PROCESS VTAM STARTUP TABLE (VST) TO START VTAM APPLICATIONS\n          SPACE 1\nPROLOOP1  LM    R9,R11,VSTSTART    LOAD BXLE REGS\n          NI    GLOFLAG,X'FF'-GLOFND1 RESET VSE FOUND FLAG\n          SPACE 1\nPROLOOP2  TM    VSEFLAG,VSEDONE    HAS THIS VSE BEEN COMPLETED\n          BO    PRONEXT            YES => GET NEXT VSE\n          OI    GLOFLAG,GLOFND1    SAY ATLEAST ONE INCOMPLETE VSE\n          TM    VSEFLAG,VSEHELD    HELD FOR LOWER LEVEL COMPLETION\n          BO    PRONEXT            YES => GET NEXT VSE\n          TM    VSEFLAG,VSEWAIT    WAITING FOR APPLICATION TO START\n          BNO   PROVSE             NO  => GO ISSUE COMMAND IN VSE\n          BAL   R14,STATNQIR       YES => INQUIRE IF APPL ACTIVE\n          B     PRONEXT                   GET NEXT VSE\n          SPACE 1\nPROVSE    BAL   R14,ACTVSE         ISSUE COMMAND IN VSE\n          SPACE 1\nPRONEXT   BXLE  R9,R10,PROLOOP2    GET NEXT VSE\n          TM    GLOFLAG,GLOFND1    ANY INCOMPLETE VSE'S?\n          BO    PROSTIME           YES => GO WAIT BEFORE RESCANNING VST\n          SPACE 1\n          TM    GLOFLAG,GLOERR     ANY ERRORS PROCESSING VSE'S\n          BO    WRITMSG7           YES => BR TO CONDITIONAL COMPLETION\n         L     R1,=A(MSG08)  POINT TO MESSAGE                    90344\n         WTO   MF=(E,(1))         NO  => WTO COMPLETION          90344\n          B     RETURN                    GO TO EXIT\nWRITMSG7  WTO   MF=(E,MSG07)       WTO CONDITIONAL COMPLETION MSG\n          B     RETURN\n          SPACE 1\nPROSTIME  STIMER WAIT,BINTVL=WAIT1SEC WAIT 1 SECOND\n          B     PROLOOP1                BEFORE RESCANNING VST\n         SPACE 2\n*         NORMAL EXIT FROM NETINIT\n          SPACE 1\nRETURN    DS    0H\n          TM    GLOFLAG,GLOACBO    IF VTAM ACB\n          BZ    SKIPCACB             IS OPEN\n          CLOSE ACB                    THEN CLOSE IT\nSKIPCACB  FREEMAIN R,SP=2          FREE SUBPOOL CONTAINING VST\n          L     R13,4(,R13)        RESTORE OLD SAVEAREA\n          LM    R14,R12,12(R13)    RESTORE OLD REGS\n         SLR   R15,R15            SET RETURN CODE = 0            85358\n          BR    R14\n          SPACE 2\n*         EXIT FOR ERRORS REQUIRING A DUMP\n          SPACE 1\nOPENFAIL  DS    0H                 VTAM ACB HAS FAILED TO OPEN\n          STM   R0,R15,DUMPREGS    SAVE REGS FOR ANALYSIS\n          MVI   DUMPFLAG,OPENCODE  INDICATE OPEN ACB FAILURE\n          B     DUMP               GO TAKE A DUMP\n          SPACE 1\nSNOCCUR   DS    0H                 FOR CONDITIONS THAT SHOULD NOT OCCUR\n          STM   R0,R15,DUMPREGS    SAVE REGS FOR ANALYSIS\n          MVI   DUMPFLAG,SNOCUR    INDICATE SHOULD NOT OCCUR\n          B     DUMP\n          SPACE 1\nDUMP      DS    0H                 USE SVC 13 TO TAKE A DUMP\n         SLR    R1,R1              CLEAR R1 FOR DUMP CODE\n          IC    R1,DUMPFLAG        MOVE DUMP CODE TO REG1\n          ABEND (1),DUMP           TAKE A DUMP\n          TITLE 'NETINIT - BUILDVST ... BUILD VTAM STARTUP TABLE'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) GETMAIN STORAGE FOR THE VTAM STARTUP TABLE.          *\n*             2) READ COMMAND INPUT FROM SYSIN FILE INTO A VSE.       *\n*             3) VALIDATE LEVEL AND TYPE FIELDS IN VSE.               *\n*             4) WRITE INPUT FILE PLUS EDIT ERRORS TO SYSOUT FILE.    *\n*             5) INITIALIZE BXLE REGS FOR LATER VST PROCESSING.       *\n*                                                                     *\n*  REGS USED: R0,R1,R14,R15                                           *\n*                                                                     *\n***********************************************************************\nBUILDVST  DS    0H\n          ST    R14,RETSAVE        SAVE RETURN ADDRESS\n          SPACE 1\n*         GETMAIN STORAGE FOR VST\n          SPACE 1\n          L     R0,VSTLEN          LOAD TABLE SIZE IN BYTES\n          ICM   R0,8,=X'02'        SET SUBPOOL # = 2             87330\n          GETMAIN R,LV=(0)         REQUEST STORAGE\n          ST    R1,VSTSTART        SAVE A(VST)\n          A     R1,VSTLEN          CALC START OF\n          S     R1,=AL4(L'VSENTRY)   LAST VSE\n          ST    R1,VSTEND              AND SAVE FOR BXLE\n          SPACE 1\n*         OPEN  SYSIN AND SYSOUT FILES\n          SPACE 1\n          OPEN  (SYSINDCB,(INPUT),SYSOUDCB,(OUTPUT))\n          TM    SYSINDCB+DCBOFLGS-IHADCB,X'10'  DID SYSIN OPEN OK?\n          BZ    DCBOFAIL                        NO => WTO ERROR MSG\n          TM    SYSOUDCB+DCBOFLGS-IHADCB,X'10'  DID SYSOUT OPEN OK?\n          BO    DCBOPEN                         YES => BR TO READ SYSIN\nDCBOFAIL  WTO   MF=(E,MSG01)       WTO OPEN FAILURE MSG\n          B     RETURN             BR TO END EXECUTION\n          SPACE 1\n*         READ  SYSIN RECORDS INTO  VST AND EDIT THEM\n         SPACE 2\nDCBOPEN   LM    R9,R11,VSTSTART    LOAD BXLE REGS TO PROCESS VST\nREADLOOP  GET   SYSINDCB,(R9)      READ COMMAND RECORD INTO A VSE\nREADNEX2  PUT   SYSOUDCB,(R9)      ECHO COMMAND RECORD TO SYSOUT\n         SPACE 1                                                 90344\n***********************************************************************\n*                                                                     *\n*        CONTROL CARDS MAY BE SELECTED BY CPU ID (SMCA ID) :          *\n*                                                                     *\n*        PLACE CPU= IN COLUMN 2                                       *\n*              CPU= RESETS SELECTION AND ACCEPTS ALL CARDS            *\n*              CPU=SYS1SYS2SYS3  SKIPS CARDS EXCEPT ON SYSTEMS 1-3    *\n*              CPU=SYS5   SKIPS SUCCESSIVE CARDS EXCEPT ON SYSTEM 5   *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 90344\n         CLC   =C'CPU=',VSELEVEL+1  CHECK FOR CPU SPECIFIC CARDS 90344\n         BNE   READNCPU      NO; CONTINUE NORMALLY               90344\n         CLI   VSELEVEL+5,C'A'   CPU= NON-ALPHAMERIC ?           90344\n         BL    READNCPU      YES; TREAT AS GENERAL MATCH         90344\n         L     R14,CVTPTR    GET THE CVT                         90344\n         LA    R15,VSELEVEL+5  POINT TO FIRST CPU ID             90344\n         LA    R0,8          SET FOR MAXIMUM SUPPORTED           90344\n         L     R14,CVTSMCA-CVT(,R14)  POINT TO SMCA WORK AREA    90344\nREADTCPU CLC   0(4,R15),16(R14)   COMPARE CPU= TO SMCASID        90344\n         BE    READNCPU      MATCH; PROCESS THIS AND FOLLOWING   90344\n         LA    R15,4(,R15)   TRY NEXT ENTRY                      90344\n         CLI   0(R15),C','   COMMA SEPARATOR ?                   90344\n         BNE   *+8           NO                                  90344\n         LA    R15,1(,R15)   SKIP IT, TOO                        90344\n         BCT   R0,READTCPU                                       90344\nREADGCPU GET   SYSINDCB,(R9)     ELSE GET ANOTHER CARD           90344\n         CLC   =C'CPU=',VSELEVEL+1 ANOTHER SELECTION CARD ?      90344\n         BE    READNEX2      YES; EXAMINE IT                     90344\n         MVI   0(R9),C'\u00ac'    SHOW CARD REJECTED                  90344\n         PUT   SYSOUDCB,(R9)  ECHO THE CARD                      90344\n         B     READGCPU      AND SKIP TO NEXT                    90344\n         SPACE 1                                                 90344\nREADNCPU DS    0H            MATCHING CPU FOUND, OR NO CPU CARDS 90344\n         CLI   VSELEVEL,C'V'  NET PROCEDURE NAME CARD ?          85358\n         BNE   NOTNETNM      NO                                  85358\n         MVC   NETNAME,VSEAPPL  SET 'APPLICATION' NAME           85358\n         B     READLOOP      GO AGAIN                            85358\n         SPACE 1                                                 87298\nNOTNETNM CLI   VSELEVEL,C'=' TP FRONT-END CHECK ?                87298\n         BNE   NOTCOMNM      NO                                  87298\n         DEVTYPE VSEAPPL,DB  LOOK FOR DD CARD                    87298\n         BXH   R15,R15,COMDDMIS  MISSING/BAD COMM DD             87298\n         CLI   DB+2,X'40'    TP DEVICE ?                         87298\n         BE    CALCOMCK      YES; CHECK IT                       87298\nCOMDDMIS MVC   COMDDWTO+17(8),VSEAPPL                            87298\nCOMDDWTO WTO   'BSCI305E XXXXXXXX DD MISSING/BAD'                87298\n         B     SKIPERR                                           87298\nCALCOMCK XC    DB,DB         CLEAR ECB                           87298\n         LA    R2,VSEAPPL-2  POINT TO DD/TP BOX NAME             87298\n         LA    R0,8          SET LENGTH OF PARM                  87298\n         STCM  R0,3,0(R2)    MAKE PARM                           87298\n         ATTACH EP=COMCHECK,PARAM=((R2)),ECB=DB  CHECK DD        87298\n         ST    R1,DB+4       SAVE TCB ADDRESS                    87298\n         WAIT  ECB=DB        WAIT FOR COMPLETION                 87298\n         DETACH DB+4         GET RID OF IT                       87298\n         L     R15,DB        LOAD THE ECB                        87298\n         LA    R15,0(,R15)   KILL THE FLAG BITS                  87298\n         BXLE  R15,R15,COMMISUP  BOX IS UP                       87298\n         SRA   R15,12+1      GET SYSTEM CODE ONLY                87298\n         BNZ   COMABEND      TOO BAD                             87298\n         SLR   R0,R0         CLEAR CHAIN FOR MLWTO               87298\n         MVC   COMMDOWN+17(8),VSEAPPL                            87298\nCOMMDOWN WTO   ('BSCI300E XXXXXXXX FRONT-END DOWN',C),                 *\n               ('1) MAKE SURE IT IS POWERED UP AND RUNNING',D),        *\n               ('2) RELOAD THE BOX (USE CROSS-CHANNEL LOAD)',D),       *\n               ('3) RE-IPL ALL AFFECTED SYSTEMS,',DE),                 *\n               ROUTCDE=1,DESC=1                                  87298\n         XC    DB+8(4),DB+8  CLEAR ECB                           87298\n         WTOR  'BSCI300D PLEASE ACKNOWLEDGE',                          *\n               DB,8,DB+8,ROUTCDE=1,DESC=1                        87298\n         WAIT  ECB=DB+8                                          87298\n         OI    DB,C' '       UPPER CASE FIRST LETTER             87298\n         CLI   DB,C'P'       'P' FOR PROCEED ?                   87298\n         BE    READLOOP      YES; JUST CONTINUE                  87298\nSKIPERR  OI    GLOFLAG,GLOEDIT                                   87298\n         B     READLOOP                                          87298\nCOMABEND WTO   'BSCI313W COMCHECK FAILED - STATUS NOT ASCERTAINED'\n         B     READLOOP                                          87298\nCOMMISUP CLC   VSECMD(7),VSECMD-1  ANY COMMAND ?                 87298\n         BE    READLOOP      NO; JUST CONTINUE                   87298\n         MVC   DB(7),VSECMD  COPY PRESUMED UCB-UCB ADDRESS       87298\n         NC    DB(7),HEXCONTB+8  MASK TO X'1F'                   87298\n         TR    DB(7),HEXCONTB  CONVERT TO UNPACKED HEX           87298\n         PACK  DB+8(3),DB(4)  PACK LOW UCB                       87298\n         PACK  DB+12(3),DB+4(4)  DO END UCB                      87298\n         LM    R2,R3,DB+8    LOAD UCB ADDRESSES                  87298\n         SRL   R2,16         RIGHT-JUSTIFY                       87298\n         SRL   R3,16         RIGHT-JUSTIFY                       87298\n         CR    R2,R3         VALID RANGE ?                       87298\n         BH    NOTCOMNM      FAIL WITH ERROR MESSAGE             87298\n         L     R14,ULKPARM   GET WORKAREA ADDRESS                87298\n         XC    0(L'ULKWORK,R14),0(R14) CLEAR LOOKUP WORK AREA    87298\nULKLOOP  L     R4,CVTPTR                                         87298\n         L     R15,CVTUCBSC-CVTMAP(,R4)                          87298\n         LA    R1,ULKPARM                                        87298\n         BALR  R14,R15       FIND A UCB                          87298\n         BXH   R15,R15,READLOOP  DONE                            87298\n         L     R4,ULKPARM+8  LOAD THE UCB ADDRESS ADDRESS        87298\n         L     R4,0(,R4)     LOAD THE UCB ADDRESS                87298\n         MVC   DB(3),UCBNAME-UCBOB(R4)                           87298\n         NC    DB(3),HEXCONTB+8  STRIP ZONES                     87298\n         TR    DB(3),HEXCONTB  MAKE HEX                          87298\n         PACK  DB+4(3),DB(4) PACK ADDRESS                        87298\n         SLR   R0,R0                                             87298\n         ICM   R0,3,DB+4     LOAD IT                             87298\n         CR    R0,R2         NOT LOWER THAN LOW ?                87298\n         BL    ULKLOOP       LOW; GET ANOTHER                    87298\n         CR    R0,R3         IN RANGE ?                          87298\n         BH    ULKLOOP       NO; GO AGAIN                        87298\n         TM    UCBSTAT-UCBOB(R4),UCBONLI  DEVICE ON-LINE ?       87298\n         BNZ   ULKLOOP       YES; JUST GET ANOTHER               87298\n         MODESET KEY=ZERO    ENABLE STORAGE CLOBBERING           87298\n         OI    UCBSTAT-UCBOB(R4),UCBONLI  MAKE IT ON-LINE        87298\n         MODESET KEY=NZERO   INHIBIT CLOBBERING OTHER'S STORAGE  87298\n         B     ULKLOOP       DO ANOTHER                          87298\n         SPACE 1                                                 85358\nNOTCOMNM MVC   VSELPCNT,=F'120'   SET TIMEOUT FOR CMD TO 120 SECS\n          MVI   VSEFLAG,X'00'      RESET VSE STATUS FLAG\n          SPACE 1\n          LA    R15,EDITERR1       ASSUME ERROR IN LEVEL PARAMETER\n          CLI   VSELEVEL,C'0'      LEVEL\n          BL    EDITERR              PARAMETER\n          CLI   VSELEVEL,C'9'          MUST BE\n          BH    EDITERR                  NUMERIC\n          SPACE 1\n          LA    R15,EDITERR2       ASSUME ERROR IN TYPE PARAMETER\n          CLI   VSETYPE,C'V'       TYPE\n          BE    READNEXT             PARAMETER\n          CLI   VSETYPE,C'C'           MUST BE\n          BE    READNEXT                 'V' OR 'C'\n         CLI   VSETYPE,C'S'    OR NEW-FANGLED START COMMAND      85358\n         BE    READNEXT                                          85358\n         CLI   VSETYPE,C'R'  RUNNING TASK ?                      86271\n         BE    READNEXT      YES; ACCEPT                         86271\n         CLI   VSETYPE,C'U'  APPLID UP ?                         86271\n         BE    READNEXT      YES                                 86271\n          SPACE 1\nEDITERR  CLI   VSELEVEL,C'*' ASM-STYLE COMMENTS CARD ?           85245\n         BE    READLOOP      YES; JUST GET ANOTHER CARD          85245\n         CLI   VSELEVEL,C' '   POSSIBLE BLANK CARD ?             85245\n         BNE   EDITERRT      NO; FAIL                            85245\n         CLC   VSELEVEL+1(5),VSELEVEL  BLANKS ?                  85245\n         BE    READLOOP      YES; ANOTHER COMMENTS CARD          85245\nEDITERRT  PUT   SYSOUDCB,(R15)     WRITE ERROR MSG TO SYSOUT FILE\n          OI    GLOFLAG,GLOEDIT    END EXECUTION AFTER ALL INPUT READ\n          SPACE 1\nREADNEXT  BXLE  R9,R10,READLOOP    READ NEXT COMMAND RECORD\n          WTO   MF=(E,MSG02)       IF WE FALL THRU BXLE, THEN THE\n*                                  INPUT FILE EXCEEDS THE SIZE OF\n*                                  THE VST. WRITE AN ERROR MSG AND\n          B     RETURN             END EXECUTION\n         SPACE 2\n*         END OF DATA REACHED ON SYSIN\n          SPACE 1\nEODSYSIN  C     R9,VSTSTART        NULL SYSIN FILE?\n          BH    CALCEND            NO  => BR TO CALC LAST VSE\n          WTO   MF=(E,MSG03)       YES => WTO ERROR MSG\n          B     RETURN                    AND END EXECUTION\nCALCEND   S     R9,=AL4(L'VSENTRY) BACKUP TO LAST ACTIVE VSE\n          ST    R9,VSTEND          SAVE FOR BXLE\n          SPACE 1\n          CLOSE (SYSINDCB,,SYSOUDCB)\n          SPACE 1\n          TM    GLOFLAG,GLOEDIT    ANY EDIT ERRORS?\n          BZ    BUILDRET           NO  => BR TO EXIT\n          WTO   MF=(E,MSG04)       YES => WTO ERROR MESSAGE\n          B     RETURN                    AND END EXECUTION\n          SPACE 1\nBUILDRET  L     R14,RETSAVE        RESTORE RETURN REGISTER\n          BR    R14                RETURN TO CALLER\n          TITLE 'NETINIT - OPENACB  ... OPEN VTAM ACB'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) LOOP ATTEMPTING TO SUCCESSFULLY OPEN NETINIT'S       *\n*                VTAM ACB.                                            *\n*             2) END EXECUTION IF ACB CANNOT BE OPENED AFTER          *\n*                TRYING FOR 5 MINUTES.                                *\n*                                                                     *\n*  REGS USED: R0,R1,R2,R14,R15                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPENACB  ST    R14,RETSAVE   SAVE RETURN ADDRESS                 85358\n         LA    R1,NETNAME    GET VTAM PROCEDURE NAME             85358\n         BAL   R7,FINDCSCB   HAS IT STARTED ?                    85358\n         BM    OPENSTAR      NO; LET'S START IT OURSELVES        85358\n         SPACE 1                                                 85358\nOPENAGIN LA    R2,300        SET 300 SECOND TIME-OUT             85358\n          SPACE 1\n*         ATTEMPT TO OPEN THE ACB\n          SPACE 1\nOPENRTRY  OPEN  ACB                ATTEMPT TO OPEN ACB\n          LTR   R15,R15            DID ACB OPEN SUCCESSFULLY?\n          BZ    OPENRET            YES => BR TO EXIT\n          SPACE 1\n*         CHECK  OPEN RETURN CODE  FOR RETRYABLE ERROR\n          SPACE 1\n          CLI   ACBERFLG,X'52'     IF VTAM HALT IS IN PROGRESS\n          BNE   OPENCX58             THEN\n          WTO   MF=(E,MSG05)           WTO ERROR MSG\n          B     RETURN                   AND END EXECUTION\nOPENCX58  CLI   ACBERFLG,X'58'     IF APPLID IS ALREADY IN USE\n          BNE   OPENCX5A             THEN\n         LA    R1,=A(MSG12)                                      87298\n         WTO   MF=(E,(1))    WTO ERROR MSG                       87298\n          B     RETURN                   AND END EXECUTION\nOPENCX5A  CLI   ACBERFLG,X'5A'     IF VTAM APPLID NOT DEFINED YET\n         BE    OPENLOOP      WAIT A LITTLE WHILE LONGER          85358\nOPENCX5C  CLI   ACBERFLG,X'5C'     IF VTAM IS INACTIVE\n          BE    OPENLOOP             THEN RETRY OPEN ACB\n          BAL   R7,OPENFAIL        OTHER RETURN CODE => TAKE A DUMP\n         SPACE 1                                                 85358\nOPENLOOP TM    GLOFLAG,GLOSTNET  HAVE WE ISSUED A START COMMAND ?\n         BNZ   OPENLOOT      YES; JUST KEEP WAITING              85358\n         OI    GLOFLAG,GLOSTNET  SET START COMMAND ISSUED        85358\n         LA    R1,NETNAME    GET VTAM PROCEDURE NAME             85358\n         BAL   R7,FINDCSCB   HAS IT STARTED ?                    85358\n         BNM   OPENAGIN      YES; WAIT FOR IT TO COME UP         85358\nOPENSTAR OI    GLOFLAG,GLOSTNET  SET START COMMAND ISSUED        85358\n         MODESET KEY=ZERO                                        85358\n         SLR   R0,R0                                             85358\n         LA    R1,NETSTART   GET VTAM START COMMAND              85358\n         SVC   34                                                85358\n         MODESET KEY=NZERO                                       85358\n         STIMER WAIT,,BINTVL==A(30*100)  VTAM INITIALIZATION ?   85359\n         B     OPENAGIN      RESET TIMING AND WAIT SOME MORE     85358\n          SPACE 1\n*         RETRY  OPEN ACB EVERY 1  SECONDS TO A MAX OF 5 MINUTES\n          SPACE 1\nOPENLOOT  BCT   R2,OPENSTIM        DECREMENT TIMEOUT COUNTER\n          WTO   MF=(E,MSG06)       WTO TIMEOUT LIMIT EXCEEDED\n          B     RETURN             AND END EXECUTION\nOPENSTIM  STIMER WAIT,BINTVL=WAIT1SEC WAIT FOR 1 SECOND\n          B     OPENRTRY                AND THEN RETRY OPEN ACB\n          SPACE 1\nOPENRET   OI    GLOFLAG,GLOACBO    FLAG ACB OPENED\n          L     R14,RETSAVE        RESTORE RETURN ADDRESS\n          BR    R14\n          TITLE 'NETINIT - ACTVSE   ... ISSUE COMMAND'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) FOR VSETYPE='V', VERIFY THAT THE APPLID IS DEFINED   *\n*                TO VTAM.                                             *\n*             2) FOR VSETYPE='V', FLAG COMMAND COMPLETE IF APPLICATION*\n*                IS ALREADY ACTIVE .                                  *\n*             3) ISSUE THE COMMAND IN THE VSE USING SVC 34.           *\n*             4) FOR VSETYPE='V', WAIT THE CURRENT VSE ENTRY AND HOLD *\n*                SUBORDINATE VSE'S.                                   *\n*             5) FOR VSETYPE='C', FLAG THE VSE COMPLETE.              *\n*             6) FOR VSETYPE='S', FIND THE CSCB FOR APPLID.      85358\n*                IF NOT FOUND, ISSUE COMMAND.  IF FOUND, FLUSH THIS\n*                AND SUB-ORDINATE VSES.                          85358\n*                                                                     *\n*  REGS USED: R0,R1,R14,R15                                           *\n*                                                                     *\n***********************************************************************\nACTVSE    DS    0H\n          ST    R14,RETSAVE        SAVE RETURN ADDRESS\n          SPACE 1\n*         INQUIRE ABOUT APPLID FOR VSETYPE='V'\n          SPACE 1\n          CLI   VSETYPE,C'C'       IF VSE IS COMMAND TYPE\n          BE    AVSSVC34             THEN SKIP INQUIRE\n         CLI   VSETYPE,C'S'  START COMMAND ?                     85358\n         BE    AVSSTART      YES; GO LOOK FOR CSCB               85358\n         CLI   VSETYPE,C'R'  RUNNING TASK ?                      86271\n         BE    AVSNSTAR      YES; DO IT                          86271\n          MVC   NIBSYM,VSEAPPL     MOVE APPLID TO NIB\nAVSLOOP   INQUIRE RPL=RPL,         ISSUE VTAM INQUIRE                  X\n               NIB=NIB,                                                X\n               OPTCD=APPSTAT\n         SPACE 1\n          CH    R15,=H'12'         INQUIRE RET CODE > 12?\n          BNH   *+8                NO  => GO TO BRANCH TABLE\n          BAL   R14,SNOCCUR        YES => SHOULD NOT OCCUR\n          B     ERRTAB1(R15)       BR BASED ON ACTION CODE\nERRTAB1   B     AVSFDBK3            0 => SUCCESSFUL COMPLETION\n          BAL   R14,SNOCCUR         4 => SHOULD NOT OCCUR\n          B     AVSAPBAD            8 => APPLID WRONG OR NOT DEFINED\n          B     AVSLOOP             C => RETRYABLE ERROR\n          SPACE 1\n*         QUERY APPL STATUS FROM RPLFDBK3\n          SPACE 1\nAVSFDBK3 SLR    R15,R15            CLEAR R15 FOR FDBK3\n          IC    R15,RPLFDB3        LOAD FDBK3\n         CLI   VSETYPE,C'V'  VTAM APPLICATION ?                  86271\n         BNE   AVTATS(R15)   NO; TAKE REVERSE BRANCH             86271\n          B     AVSTAT(R15)        BR BASED ON APPL STATUS\nAVSTAT    B     AVSACTIV            0 => APPLICATION ACTIVE\n          B     AVSSVC34            4 => APPLICATION INACTIVE\n          BAL   R7,SNOCCUR          8 => APPL'N NEVER ACCEPTS LOGON\n          B     AVSACTIV            C => APPL'N TEMP NOT ACCEPTNG LOGON\n          B     AVSACTIV           10 => APPLICATION CLOSING DOWN\nAVTATS    B    AVSSVC34             0 => APPLICATION ACTIVE      86271\n          B    AVSACTIV             4 => APPLICATION INACTIVE    86271\n          BAL   R7,SNOCCUR          8 => APPL'N NEVER ACCEPTS LOGON\n          B     AVSACTIV            C => APPL'N TEMP NOT ACCEPTNG LOGON\n          B     AVSACTIV           10 => APPLICATION CLOSING DOWN\n          SPACE 1\nAVSACTIV  OI    VSEFLAG,VSEDONE+VSEPREV FLAG COMMAND COMPLETE\n          B     AVSRET\n         SPACE 1\nAVSAPBAD TM    VSEFLAG,VSEINVA  BEEN HERE BEFORE ?               86281\n         BNZ   AVSAPBAT      YES; FAIL                           86281\n         STIMER WAIT,BINTVL==A(30*100)  WAIT 30 SECS FOR VTAM    86281\n         OI    VSEFLAG,VSEINVA  SET FLAG                         86281\n         B     AVSLOOP       RETRY                               86281\nAVSAPBAT L     R2,=A(MSG09)                                      87298\n         MVC   20(L'VSEAPPL,R2),VSEAPPL  BAD APPLID TO MSG       87298\n         MVC   MSG09C-MSG09+13(L'VSENTRY,R2),VSENTRY MOVE VSE    87298\n         WTO   MF=(E,(R2))   INFORM OPERATOR                     87298\n         WTO   MF=(E,MSG09C-MSG09(R2)) ABOUT THE BAD APPLID      87298\n          OI    VSEFLAG,VSEDONE+VSERROR+VSEINVA FLAG ENTRY COMPLETE\n          OI    GLOFLAG,GLOERR     FLAG PROCESSING ERROR\n          LA    R1,AVSEX           PT @ INSTR TO BE EXECUTED\n          B     *+8                BR AROUND INSTR TO BE EXECUTED\nAVSEX     OI    VSEFLAG,VSEDONE+VSERROR+VSEHELD FLAG SUBORDINATE  VSE'S\n          BAL   R14,VSESUBOR       GO FLAG SUBORDINATE VSE'S\n          B     AVSRET             BR TO EXIT\n         SPACE 1                                                 85358\n*        PROCESS CONDITIONAL START COMMAND                       85358\nAVSSTART LA    R1,VSEAPPL    GET START JOB'S NAME                85358\n         BAL   R7,FINKCSCB   FIND CSCB FOR START OR BATCH JOB    85358\n         BM    AVSSVC34      NOT FOUND; ISSUE THE COMMAND        85358\n         OI    VSEFLAG,VSEDONE+VSERROR  SET COMPLETE             85358\n         BAL   R1,*+8        SET OI POINTER                      85358\n         OI    VSEFLAG,VSEDONE+VSEHELD  SET TO KILL LOWER VSES   85358\n         BAL   R14,VSESUBOR  KILL ALL LOWER ONES                 85358\n         B     AVSRET        RETURN TO CALLER                    85358\n         SPACE 1                                                 86271\n*        PROCESS CONDITIONAL NON-START COMMAND                   86271\nAVSNSTAR LA    R1,VSEAPPL    GET START JOB'S NAME                86271\n         BAL   R7,FINKCSCB   FIND CSCB FOR START OR BATCH JOB    86271\n         BNM   AVSSVC34      FOUND; ISSUE THE COMMAND            86271\n         OI    VSEFLAG,VSEDONE+VSERROR  SET COMPLETE             86271\n         BAL   R1,*+8        SET OI POINTER                      86271\n         OI    VSEFLAG,VSEDONE+VSEHELD  SET TO KILL LOWER VSES   86271\n         BAL   R14,VSESUBOR  KILL ALL LOWER ONES                 86271\n         B     AVSRET        RETURN TO CALLER                    86271\n         SPACE 1\n*         USE SVC 34 TO ISSUE COMMAND IN VSE\n         SPACE 1\nAVSSVC34 CLC   VSECMD,VSECMD-1  ALL BLANK ?                      85358\n         BE    AVSSVC3D      YES; DON'T ISSUE WTO OR MGCR        85358\n         L     R1,=A(MSG10)                                      87298\n         MVC   20(L'VSEAPPL,R1),VSEAPPL MOVE APPLID              87298\n         MVC   33(35,R1),VSECMD  AND COMMAND TO WTO              87298\n         WTO   MF=(E,(1))    TELL OPR                            87298\n          SPACE 1\n          MVC   SVC34CMD,VSECMD    MOVE CMD TO SVC 34 BUFFER\n          MODESET KEY=ZERO         MUST BE IN KEY 0 FOR SVC 34\n         SLR    R0,R0              SET R0 = 0\n          LA    R1,SVC34BUF            R1 = A(CMD)\n          SVC   34                 PASS COMMAND TO SYSTEM\n          MODESET KEY=NZERO        RETURN TO USER PROTECT KEY\n          SPACE 1\nAVSSVC3D CLI   VSETYPE,C'V'  VTAM APPLN START CMD?               85358\n          BE    AVSWAIT            YES => BR TO SET WAIT FLAG\n          OI    VSEFLAG,VSEDONE    NO  => MARK VSE COMPLETE\n          B     AVSRET                    AND EXIT\n          SPACE 1\n*         WAIT FOR VTAM APPLID TO BECOME ACTIVE BEFORE FLAGGING\n*         THIS  VSE COMPLETE AND P ROCESSING SUBORDINATE VSE'S\n          SPACE 1\nAVSWAIT   OI    VSEFLAG,VSEWAIT    TURN WAIT FLAG ON\n          LA    R1,AVSWTEX         PT @ INSTR TO BE EXECUTED\n          B     *+8                BR AROUND OI\nAVSWTEX   OI    VSEFLAG,VSEHELD    SET HELD FLAG IN SUB VSE'S\n          BAL   R14,VSESUBOR       GO FLAG SUBORDINATE VSE'S\n          B     AVSRET             BR TO EXIT\n          SPACE 1\nAVSRET    L     R14,RETSAVE        RESTORE RETURN REGISTER\n          BR    R14                RETURN TO CALLER\n         EJECT ,                                                 85358\n***********************************************************************\n*                                                                     *\n*        LOCATE A START JOB BY NAME; ENTRY FINKCSCB ALSO ALLOWS       *\n*        BATCH JOBS.  CALL WITH BAL R7,FINDCSCB/FINKCSCB; DESIRED     *\n*        NAME POINTED TO BY R1.   ON RETURN CC SET PLUS/ZERO IF       *\n*        TASK FOUND, ELSE MINUS.                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 85358\nFINDCSCB LA    R7,0(,R7)     SET RETURN REGISTER POSITIVE        85358\nFINKCSCB L     R3,CVTPTR                                         85358\n         USING CVTMAP,R3                                         85358\n         L     R15,CVTASVT   GET THE ASCB VECTOR TABLE           85358\n         USING ASVT,R15                                          85358\n         L     R0,ASVTMAXU   GET HIGHEST VALID ASID              85358\n         SLL   R0,2          *4 FOR FAST CHECK                   85358\n         SLR   R2,R2         SET INDEX FOR NEXT ASID             85358\nFINDASID LA    R2,4(,R2)     GET NEXT ASID INDEX                 85358\n         CR    R2,R0         VALID ?                             85358\n         BH    FINDNONE      NO; QUIT                            85358\n         LA    R3,ASVTFRST(R2)  POINT TO ASCB POINTER            85358\n         ICM   R3,15,0(R3)   LOAD AND TEST                       85358\n         BNP   FINDASID      SKIP UNUSED/FREE SLOT               85358\n         USING ASCB,R3                                           85358\n         LA    R14,8         SET DIFFERENTIAL OFFSET - FAKE CSCB 85358\n         ICM   R4,15,ASCBJBNI  JOB CSCB ?                        85358\n         BNZ   FINDAJOB      YES; TEST FIND VS. FINK ENTRY       85358\n         SLR   R14,14        RESET CSCB ORIGIN OFFSET            85358\n         ICM   R4,15,ASCBCSCB  GET THE CSCB                      85358\n         BZ    FINDASID                                          85358\n         USING CHAIN,R4      DECLARE THE CSCB                    85358\n         CLI   CHVCD,X'04'   START TASK/INIT ?                   85358\n         BNE   FINDASID      NO                                  85358\n         B     FINDACOM      GO TO COMMON                        85358\nFINDAJOB LTR   R7,R7         STANDARD BAL CALL AND ENTRY ?       85358\n         BP    FINDASID      NO; STC REQUEST ONLY - SKIP JOB     85358\nFINDACOM SLR   R4,R14        MAKE FAKE CSCB ORIGIN               85358\n         CLC   0(8,R1),CHCLS  MATCHING NAME ?                    85358\n         BNE   FINDASID      NO                                  85358\nFINDASTP CLC   CHASID,ASCBASID  JUST IN CASE                     85358\n         BNE   FINDASID                                          85358\n         LA    R15,0(,R3)    RETURN ASCB ADDRESS                 85358\n         B     FINDEXIT      GO TO COMMON RETURN                 85358\nFINDNONE LNR   R15,R0        SET NEGATIVE RETURN                 85358\nFINDEXIT LTR   R15,R15       SET CONDITION CODE                  85358\n         BR    R7            RETURN TO CALLER                    85358\n         DROP  R3,R4,R15                                         85358\n          TITLE 'NETINIT - STATNQIR ... INQUIRE APPLID STATUS'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) STATNQIR IS ENTERED FOR VSE'S THAT HAVE THE WAIT     *\n*                FLAG SET.                                            *\n*             2) STATNQIR ISSUES THE VTAM INQUIRE MACRO TO SEE IF     *\n*                THE SPECIFIED VTAM APPLID HAS STARTED YET.           *\n*             3) IF THE APPLID IS NOW ACTIVE, THE VSE IS FLAGGED      *\n*                COMPLETE AND THE HELD FLAG IS RESET IN ALL           *\n*                SUBORDINATE VSE'S.                                   *\n*             4) IF THE TIMEOUT VALUE IS EXCEEDED FOR THE APPLID,     *\n*                THEN THE ENTRY IS FLAGGED COMPLETE UE TO ERROR,      *\n*                AND ALL SUBORDINATE VSE'S ARE FLAGGED COMPLETE.      *\n*                                                                     *\n*  REGS USED: R0,R1,R14,R15                                           *\n*                                                                     *\n***********************************************************************\nSTATNQIR  DS    0H\n          ST    R14,RETSAVE        SAVE RETURN ADDRESS\n          SPACE 1\n*         DECREMENT TIMEOUT COUNTE R FOR THIS APPLID.\n          SPACE 1\n          L     R1,VSELPCNT        LOAD TIMEOUT COUNTER\n          BCT   R1,*+8             DECREMENT TIMEOUT COUNTER\n          B     STATIMEO           R1 < 0 => TIMEOUT VALUE EXCEEDED\n          ST    R1,VSELPCNT        SAVE TIMEOUT COUNTER\n          SPACE 1\n*         ISSUE  INQUIRE MACRO FOR  APPLICATION STATUS\n          SPACE 1\n          MVC   NIBSYM,VSEAPPL     MOVE APPLID INTO NIB\nSTATLOOP  INQUIRE RPL=RPL,         ISSUE INQUIRE MACRO                 X\n               NIB=NIB,                                                X\n               OPTCD=APPSTAT\n          CH    R15,=H'12'         INQUIRE RET CODE > 12?\n          BNH   *+8                NO  => GO TO BRANCH TABLE\n          BAL   R14,SNOCCUR        YES => SHOULD NOT OCCUR\n          B     ERRTAB2(R15)       BR BASED ON ACTION CODE\nERRTAB2   B     STATFDB3            0 => SUCCESSFUL COMPLETION\n          BAL   R14,SNOCCUR         4 => SHOULD NOT OCCUR\n          BAL   R14,SNOCCUR         8 => APPLID WRONG OR NOT DEFINED\n          B     STATLOOP            C => RETRYABLE ERROR\n          SPACE 1\n*         QUERY APPL STATUS FROM RPLFDBK3\n          SPACE 1\nSTATFDB3 SLR    R15,R15            CLEAR R15 FOR FDBK3\n          IC    R15,RPLFDB3        LOAD FDBK3\n          B     STATAB(R15)        BR BASED ON APPL STATUS\nSTATAB    B     STATACT             0 => APPLICATION ACTIVE\n          B     STATRET             4 => APPLICATION INACTIVE\n          BAL   R7,SNOCCUR          8 => APPL'N NEVER ACCEPTS LOGON\n          B     STATRET             C => APPL'N TEMP NOT ACCEPTNG LOGON\n          B     STATACT            10 => APPLICATION CLOSING DOWN\n          SPACE 1\n*         APPLI D IS NOW ACTIVE\n          SPACE 1\nSTATACT   OI    VSEFLAG,VSEDONE    FLAG VSE COMPLETE\n          LA    R1,STATEX1         PT @ INSTR TO BE EXECUTED\n          B     *+8                BR AROUND NI\nSTATEX1   NI    VSEFLAG,X'FF'-VSEHELD RESET HELD FLAG IN SUB VSE'S\n          BAL   R14,VSESUBOR       GO RELEASE SUBORDINATE VSE'S\n          B     STATRET            BR TO EXIT\n          SPACE 1\n*         WE HAVE EXCEEDED THE TIME LIMIT FOR THE VTAM APPLID\n*         TO START. ASSUME SOMETHING IS WRONG AND TERMINATE\n*         PROCESSING FOR THIS ENTRY AND ALL SUBORDINATE VSE'S.\n          SPACE 1\nSTATIMEO L     R1,=A(MSG11)  POINT TO 'WAITED' MESSAGE           87298\n          MVC  20(L'VSEAPPL,R1),VSEAPPL MOVE APPLID TO WTO MSG   87298\n          WTO   MF=(E,(1))   AND TELL OPR                        87298\n          OI    VSEFLAG,VSEDONE+VSERROR FLAG VSE COMPLETE\n          LA    R1,STATEX2\n          B     *+8                BR AROUND INSTR TO BE EXECUTED\nSTATEX2   OI    VSEFLAG,VSEDONE+VSERROR FLAG SUB VSE'S DONE\n          BAL   R14,VSESUBOR       GO FLAG SUBORDINATE VSE'S DONE\n          B     STATRET            BR TO EXIT\n          SPACE 1\nSTATRET   L     R14,RETSAVE        RESTORE RETURN ADDR\n          BR    R14                RETURN\n          TITLE 'NETINIT - VSESUBOR ... PROCESS SUBORDINATE VSE''S'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) FOR EACH VSE THAT IS SUBORDINATE TO THE CURRENT      *\n*                VSE, EXECUTE THE INSTRUCTION POINTED AT BY R1.       *\n*                                                                     *\n*  INPUT    : R1 - ADDRESS OF INSTRUCTION TO BE EXECUTED              *\n*                                                                     *\n*  REGS USED: R2                                                      *\n*                                                                     *\n***********************************************************************\nVSESUBOR  DS    0H\n          LR    R2,R9              SAVE CURRENT VSE\n          B     VSENEXT            GO GET FIRST SUBORDINATE VSE\n          SPACE 1\nVSELOOP   CLC   VSELEVEL,VSELEVEL-VSEDSECT(R2) SUBORDINATE VSE?\n          BNH   VSERET             NO  => SCAN COMPLETE\n         EX    0,0(,R1)            YES => EXECUTE PASSED INSTRUCTION\nVSENEXT   BXLE  R9,R10,VSELOOP            AND GET NEXT VSE\n          SPACE 1\nVSERET    LR    R9,R2              RESTORE CURRENT VSE\n          BR    R14                RETURN TO CALLER\n          TITLE 'NETINIT - ERREXIT  ... PROCESS RPL ERRORS'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : ERREXIT RECEIVES CONTROL WHENEVER AN RPL-BASED MACRO    *\n*             ENDS WITH A NON-ZERO RETURN CODE.                       *\n*                                                                     *\n*             1) SINCE ONLY THE INQUIRE MACRO IS USED, THERE ARE      *\n*                VERY FEW ERRORS THAT SHOULD OCCUR.                   *\n*             2) THE RTNCD AND FDBK2 CODES ARE ANALYZED AND AN ACTION *\n*                CODE IS LOADED INTO R15 TO BE PASSED BACK TO THE     *\n*                CODE IMMEDIATELY FOLLOWING THE MACRO CALL. THIS      *\n*                ACTION CODE IS DEFINED AS FOLLOWS:                   *\n*                                                                     *\n*                  4 => THIS CONDITION SHOULD NOT OCCUR               *\n*                  8 => INPUT TO INQUIRE IS INCORRECT                 *\n*                  C => REISSUE THE MACRO                             *\n*                                                                     *\n*             3) THE POSSIBLE ERROR CONDITIONS OF INTEREST TO US      *\n*                ARE AS FOLLOWS:                                      *\n*                                                                     *\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      0C  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  08  00           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  08  00           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  INPUT    : R1     - ADDRESS OF RPL IN ERROR                        *\n*             R2-R12 - VALUES AT TIME MACRO WAS ISSUED                *\n*             R13    - VTAM SAVEAREA                                  *\n*             R14    - RETURN ADDRESS TO VTAM                         *\n*             R15    - ENTRY POINT OF EXIT                            *\n*                                                                     *\n***********************************************************************\nERREXIT   DS    0H\n          DROP  R8\n          USING IFGRPL,R1          SET ADDRESSABILITY TO RPL\n         SLR    R0,R0              SET ACTION SUBCODE = 0\n          SPACE 1\n*         SCAN  FOR EXPECTED ERROR S\n          SPACE 1\n          CLC   RPLRTNCD(2),=XL2'0800' TEMP STORAGE ALLOCATION FAILURE\n          BNE   ERR100A                  NO  => CHECK NEXT ERROR\n          LA    R15,12                   YES => SET ACTION CODE=RETRY\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERR100A   CLC   RPLRTNCD(2),=XL2'100A' VTAM INTERNAL ERROR\n          BNE   ERR100E                  NO  => CHECK NEXT ERROR\n          LA    R15,4                    YES => SET ACTION CODE=SNOCUR\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERR100E   CLC   RPLRTNCD(2),=XL2'100E' VTAM ABENDING\n          BNE   ERR144C                  NO  => CHECK NEXT ERROR\n          LA    R15,4                    YES => SET ACTION CODE=SNOCUR\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERR144C   CLC   RPLRTNCD(2),=XL2'144C' NO APPL NAME SPECIFIED?\n          BNE   ERR1453                  NO  => CHECK NEXT ERROR\n          LA    R15,8                    YES => SET ACTION CODE=BADAPPL\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERR1453   CLC   RPLRTNCD(2),=XL2'1453' INVALID APPL NAME?\n          BNE   ERSNOCUR                 NO  => BR TO SET SNOCUR\n          LA    R15,8                    YES => SET ACTION CODE=BADAPPL\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERSNOCUR LA     R15,4              ALL OTHER ERRORS ARE UNEXPECTED\n          B     ERRRET             BR TO EXIT\n          SPACE 1\nERRRET    BR    R14                EXIT TO VTAM\n         SPACE 2                                                 87298\n         LTORG ,                                                 87298\n          TITLE 'NETINIT - DCB''S  AND VTAM CONTROL BLOCKS'\n          PRINT NOGEN\nSYSINDCB  DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EODSYSIN,MACRF=(GM),       X\n               LRECL=80\n          SPACE 2\nSYSOUDCB  DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=F\n          SPACE 2\nACB       ACB   AM=VTAM,APPLID=APPLNAME,EXLST=EXLST,PASSWD=APPLPSWD\n          SPACE 2\nEXLST     EXLST AM=VTAM,SYNAD=ERREXIT,LERAD=ERREXIT\n          SPACE 2\nNIB       NIB   MODE=RECORD,PROC=TRUNC,LISTEND=YES,                    X\n               LOGMODE=C' ',BNDAREA=0\n          SPACE 2\nRPL       RPL   AM=VTAM,ACB=ACB,OPTCD=SYN\n         SPACE 2\nVSEDSECT  DSECT\n*\n*         THIS  DSECT DESCRIBES AN  ENTRY IN THE VTAM STARTUP TABLE.\n*         EACH  VSE IS READ FROM T HE SYSIN FILE.\n*\nVSENTRY   DS    0CL80              DEFINES ENTIRE VSE ENTRY\nVSELEVEL  DC    CL1' '             THE LEVEL NUMBER FOR THIS VSE\n*                                  LEVEL #'S RANGE FROM 0-9\n*                                  ALL VSE'S BETWEEN THE CURRENT VSE\n*                                  AND THE FIRST VSE WITH A LOWER\n*                                  OR EQUAL LEVEL NUMBER ARE\n*                                  SUBORDINATE TO THE CURRENT VSE.\nVSEFLAG   DC    XL1'00'            VSE STATUS FLAG (FILLER)\nVSEDONE   EQU   X'80'              PROCESSING COMPLETE FOR VSE\nVSEWAIT   EQU   X'40'              WAITING FOR APPLID TO START\nVSEPREV   EQU   X'20'              APPLID PREVIOUSLY ACTIVE\nVSEHELD   EQU   X'10'              HELD TILL SUPERIOR VSE COMPLETES\nVSERROR   EQU   X'08'              ERROR OCCURRED PROCESSING VSE\nVSEINVA   EQU   X'04'              INVALID VSEAPPL FOUND ON INQUIRE\nVSETIMEO  EQU   X'02'              TIMED OUT WAITING FOR APPL TO START\n          SPACE 1\nVSETYPE   DC    CL1' '             V => VTAM => ONCE COMMAND IS ISSUED\n*                                               INQUIRE MACRO WILL BE\n*                                               USED TO WAIT FOR\n*                                               COMPLETION.\n*                                  C => CMD  => VSE MARKED DONE ONCE\n*                                               COMMAND IS ISSUED\n          DC    CL1' '             FILLER\nVSEAPPL   DC    CL8' '             VTAM APPLID ASSOCIATED WITH VSECMD\n          DC    CL1' '             FILLER\nVSECMD    DC    CL40' '            COMMAND ISSUED WITH SVC 34\nVSELPCNT  DC    F'0'               TIMEOUT COUNTER (FILLER)\n          ORG   VSEDSECT+80\nNETINIT   CSECT\n         SPACE 2\nNUMVSE    EQU   50                 MAXIMUM NUMBER OF VSE'S\nVSTLEN    DC    AL4(80*NUMVSE)     STORAGE SIZE FOR VST\nVSTSTART  DC    AL4(0)             START OF VST            USED\nVSTINCR   DC    AL4(L'VSENTRY)     SIZE OF VSE               FOR\nVSTEND    DC    AL4(0)             LAST ACTIVE ENTRY IN VST    BXLE\n          SPACE 1\nSAVEAREA  DC    18F'0'             NETINIT SAVEAREA\nDB       DC    2D'0'         WORK AREA                           87298\nRETSAVE   DC    F'0'               SAVEAREA FOR RETURN ADDRESS\n          SPACE 1\nWAIT1SEC  DC    F'100'             STIMER VALUE FOR 1 SECOND WAIT\nGLOFLAG   DC    XL1'00'            FLAG BYTE\nGLOEDIT   EQU   X'80'              ERROR EDITTING VSE INPUT\nGLOFND1   EQU   X'40'              ATLEAST 1 INCOMPLETE VSE FOUND\nGLOERR    EQU   X'20'              ERROR IN PROCESSING A VSE\nGLOACBO   EQU   X'10'              ACB IS OPEN\nGLOSTNET EQU   X'01'           NET START COMMAND ISSUED          85358\n          SPACE 1\nSVC34BUF  DS    0CL(4+L'VSECMD)    CMD BUFFER FOR SVC 34\n          DC    AL2(L'SVC34BUF)    LENGTH PASSED TO SVC 34\n          DC    AL2(0)             MUST BE ZERO\nSVC34CMD  DC    CL(L'VSECMD)' '    COMMAND PASSED TO SVC 34\n          SPACE 1\nAPPLPSWD  DC    AL1(8)             LENGTH OF PASSWORD ENTRY\n          DC    CL8'NETINIT'       PASSWORD FOR NETINIT APPLID\nNETSTART DC    0A(0),Y(4+4+8+1,0),CL4'S   '  F-ALIGN NETNAME     85358\nNETNAME  DC    CL8'VTAM    ',C' '  DEFAULT NET PROCEDURE NAME    85358\n          SPACE 1\nDUMPFLAG  DC    XL1'00'            USED TO HOLD ABEND CODE\nOPENCODE  EQU   X'80'              FAILURE OPENING ACB\nSNOCUR    EQU   X'40'              SHOULD NOT OCCUR ERROR\n         DS    0F                                                85358\nDUMPEYE   DC    C'ABEND REGISTERS STORED HERE ' HELP FIND REGS IN DUMP\nDUMPREGS  DC    16F'0'             REGISTERS PRIOR TO DUMP\nHEXCONTB DC    X'000A0B0C0D0E0F001F1F1F1F1F1F1F1F'  1/2          87298\n         DC    X'00010203040506070809000000000000'  2/2          87298\nULKPARM  DC    A(ULKWORK,ULKDEVMK),X'80',AL3(ULKUCBAD)           87298\n          SPACE 1\n          TITLE 'NETINIT - WTO AND SYSOUT MESSAGES'\nEDITERR1  DC    CL80'LEVEL IN ABOVE ENTRY MUST BE NUMERIC'\nEDITERR2  DC   CL80'ENTRY TYPE IN ABOVE RECORD MUST BE ''C'' OR ''V''.'\n          SPACE 1\n          PRINT NOGEN\nMSG01     WTO   'BCSI201I SYSIN OR SYSOUT FILE FAILED TO OPEN. EXECUTIOX\n               N TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG02     WTO   'BCSI202I MAXIMUM NUMBER OF INPUT COMMAND RECORDS EXCEEX\n               DED. EXECUTION TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG03     WTO   'BCSI203I SYSIN FILE IS EMPTY. EXECUTION TERMINATED.', X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG04     WTO   'BCSI204I ERRORS IN SYSIN FILE. EXECUTION TERMINATED.',X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG05     WTO   'BCSI205I VTAM SHUTTING DOWN. EXECUTION TERMINATED.',  X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG06     WTO   'BCSI206I UNABLE TO OPEN ACB AFTER TRYING FOR 5 MINUTESX\n               . EITHER VTAM IS DOWN OR THE NETINIT APPL IS INACTIVE.',X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG07     WTO   'BCSI207I NETINIT COMPLETE EXCEPT FOR NOTED ERRORS. CORX\n               RECT AND RESTART NETINIT.',ROUTCDE=(8),DESC=(7),        X\n               MF=L\n          SPACE 1\nMSG08     WTO   'BCSI208I NETINIT COMPLETED SUCCESSFULLY.',            X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG09     WTO   'BCSI209I APPLID=XXXXXXXX IS INACTIVE OR INCORRECTLY ONX\n                RECORD:',ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG09C    WTO   'BCSI209I XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC\n               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',ROUTCDE=(8),DESC=(7),X\n               MF=L\n          SPACE 1\nMSG10     WTO   'BCSI210I APPLID=12345678 CMD=1234567891123456789212345C\n               6789312345',ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG11     WTO   'BCSI211I APPLID=XXXXXXXX HAS NOT STARTED. FIX PROBLEM X\n               AND RESTART NETINIT.',ROUTCDE=(1,8),DESC=(1),MF=L 85358\n          SPACE 1\nMSG12     WTO   'BCSI212I NETINIT IS ALREADY ACTIVE. EXECUTION TERMINATX\n               ED.',ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 1                                                 87298\nULKUCBAD DC    A(0)          RETURNED UCB ADDRESS                87298\nULKWORK  DC    XL100'0'      WORK AREA FOR UCB LOOKUP            87298\nULKDEVMK DC    X'40'         LIMIT TO TP                         87298\n         SPACE 2\n          DCBD DSORG=PS,DEVD=DA\n         SPACE 1                                                 85358\n         REGEQU ,\n         SPACE 1\n          IFGACB\n         SPACE 1\n          ISTDNIB\n         SPACE 1\n          IFGRPL\n         SPACE 1                                                 85358\nCVTDSECT DSECT ,                                                 85358\n         CVT   DSECT=YES                                         90344\n         SPACE 1                                                 90344\n         IEESMCA ,                                               90344\n         SPACE 1                                                 85358\n         IHAASVT ,                                               85358\n         SPACE 1                                                 85358\n         IHAASCB ,                                               85358\n         SPACE 1                                                 85358\n         IEECHAIN ,                                              85358\n         SPACE 1                                                 87298\n         IEFUCBOB ,                                              87298\n         SPACE 1                                                 85358\n         END   ,\n./ ADD NAME=NETINIT$\nINSTRUCTIONS FOR INSTALLING 'NETINIT'\n*************************************\n\n1) ASSEMBLE NETINIT USING THE SAMPLE JCL IN NETINITA.\n\n2) ADD VTAM DEFINITION FOR 'NETINIT' TO SYS1.VTAMLST.\n\n3) ADD STARTUP PROC (NETINITP) TO SYS1.PROCLIB.\n\n./ ADD NAME=NETINITA\n//EP91853A JOB (91853,576595,D,PSTT),'PITKIN@DAVIDSON',CLASS=B,\n//  NOTIFY=EP91853,MSGCLASS=A,USER=*,PASSWORD=*,GROUP=SYS1\n/*JOBPARM R=3D,L=99\n//S0 EXEC COMPRESS,LIB='SYS9.LOADLIB'\n// EXEC ASMFCL,PARMC='TEST,LINECOUNT(57)',PARML=TEST,CLASS=$\n//ASM.SYSIN DD DSN=SYS9.TP.ASM(NETINIT),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS9.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n SETCODE AC(1)\n NAME NETINIT(R)\n./ ADD NAME=NETINITI\n1 V NCCFA    S NCCF\n2 V NETSOL   S NETSOL\n3 C LCL4A0   V NET,ACT,ID=LCL4A0\n4 V NETOP    S NETOP\n3 C LCL4C0   V NET,ACT,ID=LCL4C0\n3 C LCL480   V NET,ACT,ID=LCL480\n3 C BLCL4E0  V NET,ACT,ID=BLCL4E0\n3 C NCPB     V NET,ACT,ID=NCPB0\n3 C NCPR     V NET,ACT,ID=NCPR0\n3 V DSPRINT  S DSPRINT\n1 V HCF      S HCF\n1 V TSO      S TCAS\n1 V JES2     $SLGN1\n2 C JES2     $SLNE127-134\n1 C MSG      SE 'NETINIT(A) RUN',LOGON,USER=(SC64858)\n./ ADD NAME=NETINITP\n//NETINIT  PROC MEMBER=NETINIT,LOADLIB='SYS9.LOADLIB'\n//*********************************************************************\n//*********************************************************************\n//*                                                                 ***\n//*                                                                 ***\n//*    PURPOSE:            START ALL VTAM APPLICATIONS THAT         ***\n//*                        ARE TO BE AVAILABLE IMMEDIATELY AFTER    ***\n//*                        VTAM IS STARTED.                         ***\n//*                                                                 ***\n//*    OWNER:              DISTRIBUTED SERVICES                     ***\n//*                                                                 ***\n//*    CONTACT:            ED PITKIN                                ***\n//*                                                                 ***\n//*                                                                 ***\n//*********************************************************************\n//*********************************************************************\n//*\n//NETINIT  EXEC PGM=NETINIT\n//STEPLIB  DD   DSN=&LOADLIB,DISP=SHR\n//SYSIN    DD   DSN=SYS1.PARMLIB(&MEMBER),DISP=SHR\n//SYSOUT   DD   SYSOUT=Z\n//SYSUDUMP DD   SYSOUT=A\n./ ADD NAME=NETINTAB,SSI=00087187\nNETINTAB TITLE 'V T A M   l o g o n   i n t e p r e t   t a b l e'\n***********************************************************************\n*                                                                     *\n*        purpose: define interpret table used by netsol70.            *\n*                 (refer to acf/vtam system programmers guide)        *\n*                                                                     *\n*        note:    1) valid logon sequences are defined in upper       *\n*                    and lower case.                                  *\n*                 2) the logon sequences are compared with the        *\n*                    passed string for a length equal to the          *\n*                    logon sequence. therefore, any logon sequence    *\n*                    containing another logon sequence as a           *\n*                    substring (as 'imstest' contains 'ims') must     *\n*                    appear in the interpret table before the         *\n*                    sequence contained as a substring does.          *\n*                                                                     *\n*        date:    August 21, 1985          Updated by G.P.            *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN                                             85328\nNETINTAB INTAB ,\n         LOGCHAR APPLID=(APPLICID,TSOA),SEQNCE='TSOA' cdrsc names\n         LOGCHAR APPLID=(APPLICID,TSOA),SEQNCE='tsoa' cdrsc names\n         LOGCHAR APPLID=(APPLICID,TSOB),SEQNCE='TSOB' cdrsc names\n         LOGCHAR APPLID=(APPLICID,TSOB),SEQNCE='tsob' cdrsc names\n         LOGCHAR APPLID=(APPLICID,EXHA),SEQNCE='EXHA' cdrsc names\n         LOGCHAR APPLID=(APPLICID,EXHA),SEQNCE='exha' cdrsc names\n         LOGCHAR APPLID=(APPLICID,EXHB),SEQNCE='EXHB' cdrsc names\n         LOGCHAR APPLID=(APPLICID,EXHB),SEQNCE='exhb' cdrsc names\n         LOGCHAR APPLID=(APPLICID,WYLA),SEQNCE='WYLA' cdrsc names\n         LOGCHAR APPLID=(APPLICID,WYLA),SEQNCE='wyla' cdrsc names\n         LOGCHAR APPLID=(APPLICID,WYLB),SEQNCE='WYLB' cdrsc names\n         LOGCHAR APPLID=(APPLICID,WYLB),SEQNCE='wylb' cdrsc names\n         LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='TSO'\n         LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='tso'\n*SCAN*   LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='LOGON'\n         LOGCHAR APPLID=(ROUTINE,STDLOGON),SEQNCE='LOGON'\n         LOGCHAR APPLID=(ROUTINE,STDLOGON),SEQNCE='logon'\n*SCAN*   LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='logon'\n         LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='sas'\n         LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='SAS'\n         LOGCHAR APPLID=(APPLICID,TSO),SEQNCE='1'\n         SPACE 3\n         LOGCHAR APPLID=(APPLICID,CICS),SEQNCE='CICS'\n         LOGCHAR APPLID=(APPLICID,CICS),SEQNCE='cics'\n         LOGCHAR APPLID=(APPLICID,CICS),SEQNCE='TESSERAC'\n         LOGCHAR APPLID=(APPLICID,CICS),SEQNCE='tesserac'\n         LOGCHAR APPLID=(APPLICID,CICS),SEQNCE='TESS'\n         LOGCHAR APPLID=(APPLICID,CICS),SEQNCE='tess'\n         LOGCHAR APPLID=(APPLICID,CICS),SEQNCE='CUBE'\n         LOGCHAR APPLID=(APPLICID,CICS),SEQNCE='cube'\n         LOGCHAR APPLID=(APPLICID,CICS),SEQNCE='2'\n         SPACE 3\n         LOGCHAR APPLID=(APPLICID,CICSTEST),SEQNCE='CICSTEST'\n         LOGCHAR APPLID=(APPLICID,CICSTEST),SEQNCE='cicstest'\n         LOGCHAR APPLID=(APPLICID,CICSTEST),SEQNCE='3'\n         SPACE 3\n         LOGCHAR APPLID=(APPLICID,WYLBUR),SEQNCE='WYLBUR'\n         LOGCHAR APPLID=(APPLICID,WYLBUR),SEQNCE='wylbur'\n         LOGCHAR APPLID=(APPLICID,WYLBUR),SEQNCE='WYL'\n         LOGCHAR APPLID=(APPLICID,WYLBUR),SEQNCE='wyl'\n         LOGCHAR APPLID=(APPLICID,WYLBUR),SEQNCE='4'\n         SPACE 3\n         LOGCHAR APPLID=(APPLICID,EXHI),SEQNCE='EXHIBIT'\n         LOGCHAR APPLID=(APPLICID,EXHI),SEQNCE='exh'\n         LOGCHAR APPLID=(APPLICID,EXHI),SEQNCE='EXH'\n         LOGCHAR APPLID=(APPLICID,EXHI),SEQNCE='5'\n         SPACE 1\n         LOGCHAR APPLID=(APPLICID,EXORCIST),SEQNCE='EXORCIST'\n         LOGCHAR APPLID=(APPLICID,EXORCIST),SEQNCE='exorcist'\n         LOGCHAR APPLID=(APPLICID,EXORCIST),SEQNCE='6'\n         SPACE 1                                                 85328\n         LOGCHAR APPLID=(APPLICID,CJRPA),SEQNCE='CJRPA'          85328\n         LOGCHAR APPLID=(APPLICID,CJRPA),SEQNCE='cjrpa'          85328\n         LOGCHAR APPLID=(APPLICID,CJRPA),SEQNCE='CJRP'           85328\n         LOGCHAR APPLID=(APPLICID,CJRPA),SEQNCE='cjrp'           85328\n         LOGCHAR APPLID=(APPLICID,CJRPA),SEQNCE='JRP'            85328\n         LOGCHAR APPLID=(APPLICID,CJRPA),SEQNCE='jrp'            85328\n         LOGCHAR APPLID=(APPLICID,CJRPA),SEQNCE='10'             85328\n         SPACE 1                                                 85245\n         LOGCHAR APPLID=(APPLICID,NETOP),SEQNCE='NETOP'          85245\n         LOGCHAR APPLID=(APPLICID,NETOP),SEQNCE='netop'          85245\n         LOGCHAR APPLID=(APPLICID,NETOP),SEQNCE='OPERATOR'       85245\n         LOGCHAR APPLID=(APPLICID,NETOP),SEQNCE='operator'       85245\n         LOGCHAR APPLID=(APPLICID,NETOP),SEQNCE='11'             85245\n         LOGCHAR APPLID=(APPLICID,NETSOL),SEQNCE='NETSOL'\n         LOGCHAR APPLID=(APPLICID,NETSOL),SEQNCE='netsol'\n         SPACE 1                                                 85328\n*        THE FOLLOWING DEFINITIONS ARE PROVIDED FOR MEANINGFUL (I.E.\n*        READABLE) ERROR MESSAGES IN NETSOL WHEN AN UNDEFINED KEY IS\n*        USED.                                                   85328\n*                                                                85328\n         LOGCHAR APPLID=(APPLICID,PFK1),SEQNCE='1'               85328\n         LOGCHAR APPLID=(APPLICID,PFK2),SEQNCE='2'               85328\n         LOGCHAR APPLID=(APPLICID,PFK3),SEQNCE='3'               85328\n         LOGCHAR APPLID=(APPLICID,PFK4),SEQNCE='4'               85328\n         LOGCHAR APPLID=(APPLICID,PFK5),SEQNCE='5'               85328\n         LOGCHAR APPLID=(APPLICID,PFK6),SEQNCE='6'               85328\n         LOGCHAR APPLID=(APPLICID,PFK7),SEQNCE='7'               85328\n         LOGCHAR APPLID=(APPLICID,PFK8),SEQNCE='8'               85328\n         LOGCHAR APPLID=(APPLICID,PFK9),SEQNCE='9'               85328\n         LOGCHAR APPLID=(APPLICID,PFK10),SEQNCE='10'             85328\n         LOGCHAR APPLID=(APPLICID,PFK11),SEQNCE='11'             85328\n         LOGCHAR APPLID=(APPLICID,PFK12),SEQNCE='12'             85328\n         LOGCHAR APPLID=(APPLICID,PFK13),SEQNCE='13'             85328\n         LOGCHAR APPLID=(APPLICID,PFK14),SEQNCE='14'             85328\n         LOGCHAR APPLID=(APPLICID,PFK15),SEQNCE='15'             85328\n         LOGCHAR APPLID=(APPLICID,PFK16),SEQNCE='16'             85328\n         LOGCHAR APPLID=(APPLICID,PFK17),SEQNCE='17'             85328\n         LOGCHAR APPLID=(APPLICID,PFK18),SEQNCE='18'             85328\n         LOGCHAR APPLID=(APPLICID,PFK19),SEQNCE='19'             85328\n         LOGCHAR APPLID=(APPLICID,PFK20),SEQNCE='20'             85328\n         LOGCHAR APPLID=(APPLICID,PFK21),SEQNCE='21'             85328\n         LOGCHAR APPLID=(APPLICID,PFK22),SEQNCE='22'             85328\n         LOGCHAR APPLID=(APPLICID,PFK23),SEQNCE='23'             85328\n         LOGCHAR APPLID=(APPLICID,PFK24),SEQNCE='24'             85328\n         ENDINTAB\n         TITLE 'MVS/SP SYSTEM IPO SUPPLIED INTERPRET TABLE'      87187\n*/* LIB: IPO1.COM.SAMPLIB(INTTAB)                                87187\n*/* GDE: SYSTEM IPO COMMUNICATIONS GUIDE                         87187\n*/* DOC: THIS IS THE MVS/SP SYSTEM IPO SAMPLE INTERPRET TABLE    87187\n*/*      FOR VTAM LOGONS.  IT HAS THE UPPER AND LOWER            87187\n*/*      CASE ENTRIES FOR 'LOGON' (ROUTINE OF STDLOGON)          87187\n*/*                                                              87187\n         SPACE 2                                                 87187\n***************************************************************  87187\n*                                                                87187\n*    SCAN INPUT FOR STANDARD LOGON SEQUENCE                      87187\n*                                                                87187\n*    STANDARD LOGON SEQUENCE IS AS FOLLOWS:                      87187\n*      ANY NUMBER OF BLANKS                                      87187\n*      'LOGON ' OR 'LOGON,'                                      87187\n*      OPTIONAL OTHER DATA ENDING IN ' ' OR ','                  87187\n*      'APPLID('             OR 'APPL('                          87187\n*      ONE TO EIGHT ALPHANUMERIC CHARACTERS SIGNIFYING           87187\n*       THE APPLICATION NAME                                     87187\n*      ')'                                                       87187\n*      AN OPTIONAL ' ' OR ',' FOLLOWED BY OTHER DATA             87187\n*                                                                87187\n*    NOTE:                                                       87187\n*      'LOGON' OR 'LOGON ' OR 'LOGON,'                           87187\n*      IS SUFFICIENT TO LOGON TO TSO.                            87187\n*                                                                87187\n*    NOTE:                                                       87187\n*      IF 'APPLID(NAME)' IS NOT FOUND,                           87187\n*      THEN TSO IS ASSUMED.                                      87187\n*                                                                87187\n***************************************************************  87187\nSTDLOGON CSECT ,                                                 87187\n         STM   R14,R12,12(R13)                                   87187\n         BALR  R12,0                                             87187\n         USING *,R12                                             87187\n*                                                                87187\n         LR    R2,R0                   LENGTH OF LOGON MESSAGE   87187\n         BCTR  R2,0                    DECREMENT TO              87187\n         EX    R2,TRANS                 EXECUTE TRANSLATE        87187\n         LR    R2,R0                   LENGTH OF LOGON MESSAGE   87187\n         LR    R3,R1                   POINT TO LOGON MESSAGE    87187\n         LR    R4,R3                   POINT BEYOND END OF       87187\n         AR    R4,R2                    LOGON MESSAGE            87187\n         BCTR  R3,0                    BACKSPACE 1 FOR LOOP      87187\n*                                       ACTION                   87187\n*                                       BELOW                    87187\n         SPACE 2                                                 87187\nNEXTCHAR DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(,R3)               NEXT CHARACTER            87187\n         CLI   0(R3),C' '              IGNORE LEADING BLANKS     87187\n         BNE   FOUNDLOG                NON BLANK CONTINUE        87187\n         BCT   R2,NEXTCHAR             ALL BLANKS?               87187\n         B     VS2NTSO                 YES. MUST BE TSO          87187\n         SPACE 2                                                 87187\nFOUNDLOG DS    0H                                                87187\n         LA    R5,L'CLOGON+L'CAPPL+3(,R3) MINIMUM END            87187\n         CR    R5,R4                   CAN STANDARD SEQUENCE     87187\n*                                       FIT IN DATA AREA?        87187\n         BH    VS2NTSO                 NO. MUST BE TSO           87187\n         SPACE 2                                                 87187\n*       'LOGON' HAS BEEN FOUND.SEARCH FOR APPLID(NAME)           87187\n         SPACE 2                                                 87187\n         LA    R3,L'CLOGON(,R3)        NEXT CHAR BEYOND LOGON    87187\n         CLI   0(R3),C' '              NEXT CHAR MUST BE         87187\n         BE    APPLSCAN                  EITHER BLANK OR A       87187\n         CLI   0(R3),C','                COMMA                   87187\n         BNE   VS2NTSO                 NO. MUST BE TSO           87187\nAPPLSCAN LA    R7,L'CAPPLID  MAXIMUM LENGTH                      87187\n         LA    R8,L'CAPPL    MINIMUM LENGTH                      87187\n         SPACE 2                                                 87187\nAPPLSCAM DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(,R3)               NEXT CHAR                 87187\n         LA    R5,2(R8,R3)   LENGTH FOR STD. SEQUENCE            87187\n         CR    R5,R4         WILL IT FIT ?                       87187\n         BH    VS2NTSO       NO; ASSUME TSO                      87187\n         CLC   CAPPL,0(R3)  'APPL(' ?                            87187\n         BE    COMAPPL       MATCH                               87187\n         LA    R5,L'CAPPLID+2(,R3)     MINIMUM END               87187\n         CR    R5,R4                   CAN STANDARD SEQUENCE     87187\n*                                       FIT IN DATA AREA?        87187\n         BH    VS2NTSO                 NO. MUST BE TSO           87187\n         SPACE 2                                                 87187\n         CLC   CAPPLID,0(R3)           IS THIS APPLID(?          87187\n         BNE   APPLSCAM                                          87187\n         LR    R8,R7         SET SEQUENCE LENGTH                 87187\n         SPACE 2                                                 87187\n*       APPLID( FOUND--ENSURE THAT BLANK OR COMMA PRECEDES IT    87187\n*       AND THAT ITS WITHIN BOUNDS OF MESSAGE                    87187\n         SPACE 2                                                 87187\nCOMAPPL  BCTR  R3,0                    BACKSPACE ONE             87187\n         CLI   0(R3),C' '              IS IT A BLANK?            87187\n         BE STARTSOK                   CONTINUE IF SO            87187\n         SPACE 2                                                 87187\n         CLI 0(R3),C','                IS IT A COMMA?            87187\n         BE    STARTSOK                CONTINUE IF SO            87187\n         SPACE 2                                                 87187\n         LA    R3,1(R8,R3)         NEXT CHAR PAST APPLID(        87187\n         B     APPLSCAN                CONTINUE SCAN FOR APPLID( 87187\n         SPACE 2                                                 87187\nSTARTSOK DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(R8,R3)   GO PAST APPLID(                     87187\nNEXT     CLI   0(R3),C' '              IS IT A BLANK?            87187\n         BNE   RIGHT                   NO.CHECK FOR RIGHT PAREN  87187\n         LA    R3,1(,R3)               POINT TO NEXT CHAR        87187\n         CR    R3,R4                   END REACHED?              87187\n         BNL   VS2NTSO                 YES. MUST BE TSO          87187\n         B     NEXT                    NO. GO TO NEXT CHAR       87187\nRIGHT    CLI   0(R3),C')'              NULL APPL NAME?           87187\n         BE    APPLSCAN                YES. LOOK FOR VALID       87187\n*                                       APPLID(                  87187\n         SPACE 2                                                 87187\n*       FIND RIGHT PARENTHESIS                                   87187\n         SPACE 2                                                 87187\n         LR    R6,R3                   ADDRESS POTENTIAL APPLID NAME\n         SPACE 2                                                 87187\nFNDPAREN DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(,R3)               POINT TO NEXT CHAR        87187\n         CR    R3,R4                   END REACHED?              87187\n         BNL VS2NTSO                   YES. MUST BE TSO          87187\n         SPACE 2                                                 87187\n         CLI   0(R3),C')'              IS THIS RIGHT PAREN.?     87187\n         BNE   FNDPAREN                NO,CONTINUE SCAN          87187\n         LA    R5,1(,R3)               MINIMUM END               87187\n         CR    R5,R4                   END OF DATA               87187\n         BE    NAMELENG                YES. CAN CHECK FOR        87187\n*                                       APPL NAME                87187\n         SPACE 2                                                 87187\n         CLI   1(R3),C' '              NO. NEXT CHARACTER MUST   87187\n         BE    NAMELENG                 BE BLANK OR COMMA,       87187\n         CLI   1(R3),C','               ELSE CONTINUE SCAN FOR   87187\n         BNE   APPLSCAN                 VALID APPLID             87187\n         SPACE 2                                                 87187\nNAMELENG DS    0H                                                87187\n         SPACE 2                                                 87187\n*       IF THIS POINT REACHED APPLID WITH LEFT AND RT. PAREN FOUND\n*        AND IT IS FOLLOWED BY A BLANK OR A COMMA OR NO MORE DATA\n         SPACE 2                                                 87187\n         SR    R3,R6                   LENGTH OF APPL NAME IN R3 87187\n         CH    R3,LAPPLID              IS NAME TOO BIG?          87187\n         BNH   EXTRAPPL                NO. EXTRACT APPL NAME     87187\n         LR    R3,R6                   YES. CONTINUE SCAN FOR    87187\n         B     APPLSCAN                 VALID APPLID(            87187\nEXTRAPPL DS    0H                                                87187\n         SPACE 2                                                 87187\n         BCTR  R3,0                    DECREMENT FOR EXECUTE     87187\n         MVC   20(8,R13),BLANK8        CLEAR OUT TO MOVE NAME    87187\n         EX    R3,MVCNAME              EXEC MVC WITH CORRECT LENGTH\n         B     VS2ISOK                 GO SET GOOD CODE          87187\n         SPACE 2                                                 87187\n*  LOGON IS FOR TSO                                              87187\nVS2NTSO  MVC   20(8,R13),CTSO          MOVE TSO NAME INTO SAVE AREA\n         SPACE 2                                                 87187\n*  VS2 LOGON SEQUENCE O.K.                                       87187\nVS2ISOK  SR    R15,R15                 INDICATE THAT LOGON SEQ   87187\n         LM    R0,R12,20(R13)           WAS INTERPRETED OK       87187\n         BR    R14                     RETURN TO CALLER          87187\n         SPACE 3                                                 87187\nBLANK8   DC    CL8' '                  BLANKS FOR NAME           87187\nCLOGON   DC    C'LOGON'                                          87187\nCTSO     DC    CL8'TSO'                                          87187\nCAPPLID  DC    C'APPLID('                                        87187\nCAPPL    DC    C'APPL('      SHORT(ER) FORM                      87187\nLAPPLID  DC    H'8'                    LENGTH OF APPLID NAME     87187\nMVCNAME  MVC   20(0,R13),0(R6)                                   87187\nTRANS    TR    0(0,R1),TRTAB2                                    87187\n         SPACE 3                                                 87187\nTRTAB2   EQU   *                                                 87187\n         DC    74C' '         00-49    BLANK OUT CONTROL CHARS   87187\n         DC    X'4A'                   CENT OR LEFT ARROW        87187\n         DC    C'.<(+|'                                          87187\n         DC    X'50'                   AMPERSAND                 87187\n         DC    X'515253545556575859'                             87187\n         DC    X'5A'                   EXCLAMATION POINT         87187\n         DC    C'$*);\u00ac-/'                                        87187\n         DC    X'6263646566676869'                               87187\n         DC    X'6A'                   VERTICAL LINE (NOT |)     87187\n         DC    C',%_>?'                                          87187\n         DC    X'707172737475767778'                             87187\n         DC    X'79'                   GRAVE ACCENT              87187\n         DC    C':#@'                                            87187\n         DC    X'7D'                   SINGLE QUOTE              87187\n         DC    C'=\"'                                             87187\n         DC    X'80'                                             87187\n         DC    C'ABCDEFGHI'            SMALL LETTERS             87187\n         DC    X'8A8B8C8D8E8F90'                                 87187\n         DC    C'JKLMNOPQR'            SMALL LETTERS             87187\n         DC    X'9A9B9C9D9E9FA0'                                 87187\n         DC    X'A1'                   TILDE                     87187\n         DC    C'STUVWXYZ'             SMALL LETTERS             87187\n         DC    X'AAABACADAEAF'                                   87187\n         DC    X'B0B1B2B3B4B5B6B7B8B9'                           87187\n         DC    X'BABBBCBDBEBF'                                   87187\n         DC    X'C0'                   LEFT BRACE                87187\n         DC    C'ABCDEFGHI'            CAPITAL LETTERS           87187\n         DC    X'CACB'                                           87187\n         DC    X'CC'                   HOOK                      87187\n         DC    X'CD'                                             87187\n         DC    X'CE'                   FORK                      87187\n         DC    X'CF'                                             87187\n         DC    X'D0'                   RIGHT BRACE               87187\n         DC    C'JKLMNOPQR'            CAPITAL LETTERS           87187\n         DC    X'DADBDCDDDEDF'                                   87187\n         DC    X'E0'                   REVERSE SLANT             87187\n         DC    X'E1'                                             87187\n         DC    C'STUVWXYZ'             CAPITAL LETTERS           87187\n         DC    X'EAEB'                                           87187\n         DC    X'EC'                   CHAIR                     87187\n         DC    X'EDEEEF'                                         87187\n         DC    C'0123456789'                                     87187\n         DC    X'FA'                   LONG VERTICAL LINE (NOT   87187\n*                                       | OR VERTICAL LINE)      87187\n         DC    X'FBFCFDFEFF'                                     87187\n         REGEQU ,                                                87187\n         END    ,                                                87187\n./ ADD NAME=NETOP\nVTAM   TITLE 'N E T O P - VTAM PROGRAM OPERATOR'\n***********************************************************************\n*                                                                     *\n*     MODULE NAME: NETOP                                              *\n*                                                                     *\n*     DESCRIPTIVE NAME: PROGRAM OPERATOR APPLICATION                  *\n*                                                                     *\n*     FUNCTION: ALLOWS NETWORK OPERATOR CONTROL FROM TERMINALS IN     *\n*               THE VTAM NETWORK                                      *\n*                                                                     *\n*     AUTHOR: MIKE HOLDEN, GOVERNMENT OF ALBERTA, 1977-1979           *\n*                                                                     *\n*     NOTES:                                                          *\n*                                                                     *\n*                  (1) A LIST OF TERMINAL NAMES ELIGIBLE TO BE MASTER *\n*        TERMINALS CAN BE FOUND AT LABEL 'MATABLE'                    *\n*                                                                     *\n*                  (2) NETOP LOGS ALL UNSOLICITED MESSAGES AND NON-   *\n*        DISPLAY INTERACTIONS TO A SEQUENTIAL DATASET AND SYSOUT 'A'. *\n*        EVERY OTHER DAY THE DATASET IS CLEARED, WHILE THE SYSOUT IS  *\n*        SPUN OFF EVERY DAY.                                          *\n*                                                                     *\n*                  (3) NETOP PROC IN PROCLIB IS AS FOLLOWS:           *\n*                                                                     *\n* //NETOP PROC MA=T260,NAME=NETOP,PRFX=                             ***\n* //*******************************************************************\n* //*                                                               ***\n* //*   PURPOSE:   VTAM NETWORK PROGRAM OPERATOR                    ***\n* //*                                                               ***\n* //*   PARM FIELD: MASTER VTAM TERMINAL NAME                       ***\n* //*            IF PREFIXED BY '$' STARTUP CMDS ARE ISSUED (SYSIN) ***\n* //*   (THIS IS THE CASE AT VTAM INITIALIZATION WHEN A MODIFIED    ***\n* //*    NETSOL, ATTACHED BY VTAM, ISSUES 'S NETOP,MA=$T26B' )      ***\n* //*                                                               ***\n* //VTAMON EXEC PGM=&NAME,PARM=&PRFX&MA,DPRTY=(15,11)               ***\n* //STEPLIB DD DSN=DPOS.LOADLIB,DISP=SHR <-- AUTH LIB               ***\n* //*                                                               ***\n* //*******************************************************************\n*                                                                     *\n*                                                                     *\n*                  (4) NETOP APPL DEFINITIONS ARE AS FOLLOWS:         *\n*                                                                     *\n*  NETOP   APPL  BUFFACT=1,AUTH=(ACQ,PASS,NVPACE),PRTCT=VTAMOP        *\n*  NETPPO  APPL  BUFFACT=1,AUTH=(ACQ,PASS,PPO,NVPACE),PRTCT=VTAMCMD   *\n*  NETSPO  APPL  BUFFACT=1,AUTH=(ACQ,PASS,SPO,NVPACE),PRTCT=VTAMCMD   *\n*                      THESE ARE FOR TESTING WHEN NETOP IS RUNNING:   *\n*  NETOPT  APPL  BUFFACT=1,AUTH=(ACQ,PASS,NVPACE),PRTCT=VTAMOP        *\n*  NETSPOT APPL  BUFFACT=1,AUTH=(ACQ,PASS,SPO,NVPACE),PRTCT=VTAMCMD   *\n*                                                                     *\n*           ALL CMDS ARE SENT TO VTAM VIA THE SPO ACB WHICH IS ALWAYS *\n*        OPEN.  UNSOLICITED MESSAGES ONLY ARE RECEIVED VIA THE PPO    *\n*        ACB WHICH IS OPEN WHENEVER THERE IS A MASTER LOGGED ON.  IF  *\n*        NOT THESE MESSAGES GO TO THE CONSOLE.                        *\n*                                                                     *\n*                  (5) HIT PF1 TO DISPLAY THE GENERAL HELP SCREEN,    *\n*        THEN AGAIN TO DISPLAY THE PF2 HELP SCREEN.                   *\n*                                                                     *\n*                  (6) INSTEAD OF 'R 00,YES' FORMAT REPLIES, THE JES2 *\n*        ABBREVIATION WORKS - '00YES'                                 *\n*                                                                     *\n*                  (7) TO OBTAIN MASTER CANDIDATE STATUS ON A NON-    *\n*        MASTER TERMINAL ENTER THE 2-DIGIT HOUR OF DAY WITH PF2;      *\n*        REPEAT TO TURN OFF MASTER STATUS.  NOTE THAT THIS WILL NOT   *\n*        CAUSE THE PPO ACB TO BE OPENED IF IT WAS CLOSED DUE TO NO    *\n*        MASTER BEING LOGGED ON, THEREFORE, IN SUCH A SITUATION, ALL  *\n*        UNSOLICITED MESSAGES WILL STILL BE ROUTED TO THE CONSOLE.    *\n*                                                                     *\n*                  (8) NON-VTAM COMMANDS:                             *\n*                                                                     *\n*            'W' CAUSES WRITE EOF TO VTAMLOG SO THAT SPF BROWSE GETS  *\n*        ACCESS TO THE LOG UP TO THE CURRENT TIME.  TO ALLOW FAST     *\n*        BROWSING, THIS DATASET IS BLOCKED, SO TO KEEP IT FAIRLY      *\n*        CURRENT IT IS CLOSED AND RE-OPENED EVERY 4 LOG PAGES, UNLESS *\n*        THE 'W' COMMAND IS USED TO FORCE THIS ACTION.                *\n*                                                                     *\n*            'K' IS ACCEPTED IN LIEU OF A PA KEY FOR OPERATOR TYPES.  *\n*                                                                     *\n*            'END' IS ACCEPTED IN LIEU OF PF3.                        *\n*                                                                     *\n*            'ALL' WITH PF3 CAUSES NETOP TO TERMINATE.                *\n*                                                                     *\n*            'ROLL'/'NROLL', 'AUTO/NAUTO', 'ECHO/NECHO', 'SOLO/NSOLO',*\n*        'LOGD/NLOGD'  ARE PF2 MODE CONTROL KEYWORDS AND ARE          *\n*        EXPLAINED IN THE PF2 HELP SCREEN.  THEY CAN BE ABBREVIATED   *\n*        TO ANY LENGTH WHILE REMAINING UNAMBIGUOUS.                   *\n*                                                                     *\n*                  (9) VTAM MESSAGE SUPPRESSION:                      *\n*                                                                     *\n*        THE INSERTION OF COMMANDS IN REPLY TEXT AND SETTING OF       *\n*        DISPLAY CONTROL SWITCHES IS DEPENDANT UPON THE VTAM PARAMETER*\n*        'SUPP=NOSUP'  BEING IN FORCE.  ANY SUPPRESSION WILL HAVE A   *\n*        DELETERIOUS EFFECT ON NETOP OPERATION.                       *\n*                                                                     *\n*                 (10) NODE NAMING CONVENTIONS:                       *\n*                                                                     *\n*        THIS SCHEME HAS BEEN VERY SUCCESSFUL IN OUR NETWORK AND IS   *\n*        INCLUDED HERE PURELY AS AN EXAMPLE, SINCE NETOP WILL FUNCTION*\n*        WHATEVER THE CONVENTION.  NCP AND APPL NODES ARE NOT APPLIC- *\n*        ABLE.  THERE ARE FIVE FIELDS IN A NAME:                      *\n*                                                                     *\n*              K  lib c tt                                            *\n*        WHERE                                                        *\n*              K IS THE 3705 id.                                      *\n*                                                                     *\n*              lib is the 3705 lib.                                   *\n*                                                                     *\n*              C IS THE RELATIVE HEX CLUSTER NUMBER (0-F)             *\n*                                                                     *\n*              TT IS THE RELATIVE HEX TERMINAL NUMBER (00-32)         *\n*                                                                     *\n*        THUS THE 3RD TERMINAL ON THE 2ND CLUSTER ON LINE 0A5 OF      *\n*        3705-r        WILL HAVE A NODENAME OF r0a5b03, ATTACHED TO   *\n*        CLUSTER r0a5b ON LINE r0a5.  ALL LOCAL TERMINALS ARE NAMED:  *\n*                                                                     *\n*              Tcuu  WHERE cuu IS THE SUBCHANNEL ADDRESS.             *\n*                                                                     *\n*                                                                     *\n*                 (11) NETOP GENERATED COMMANDS:                      *\n*                                                                     *\n*        SUBROUTINE RCVVTAM FILTERS ALL OUTPUT FROM VTAM AND IN SOME  *\n*        CASES CAUSES VTAM COMMANDS TO BE ISSUED IN RESPONSE, WHILE   *\n*        OTHERS CAUSE OUTPUT FORMATS TO BE MODIFIED OR OS COMMANDS    *\n*        TO BE ISSUED:                                                *\n*                                                                     *\n*        MESSAGE                               RESPONSE/ACTION        *\n*                                                                     *\n*        IST852I (CLUSTER UNAVAIL.)            V NET,INACT,I          *\n*        IST209I (INT. REQD. ON CONTACT)       V NET,INACT,I          *\n*        IST285,286,413 (DUMPING MESSAGES)     SE  TO SYS. PGMRS.     *\n*        IST082I (DISPLAY LINE WITH ALLOC= )   'TSONNNN' CONVERTED TO *\n*                                              USERID (ASID).         *\n*                                                                     *\n*                                                                     *\n*                 (12) PF10 CLUSTER ONLY DISPLAY:                     *\n*                                                                     *\n*        THIS FEATURE IS TRIGGERED BY THE 1ST CHARACTER OF ALL CLUSTER*\n*        NODENAMES BEING THE SAME.  THE DEFAULT IS 'C' BUT USE &CLUST *\n*        TO SELECT YOUR OWN IF NECESSARY.  WHEN A DISPLAY COMMAND SUCH*\n*        AS  'C7A0-5,I' IS ENTERED VIA PF10, ALL TERMINAL INFORMATION *\n*        IS OMITTED AND CLUSTER INFORMATION HI-LIGHTED TO DRAW        *\n*        ATTENTION TO, IN THIS CASE, DEAD CLUSTERS ON LINES BETWEEN   *\n*        L7A0 AND L7A5.                                               *\n*                                                                     *\n*                                                                     *\n*        RESTRICTIONS:                                                *\n*                                                                     *\n*                   SYSTEMS.     MVS                                  *\n*                                                                     *\n*                   TERMINALS:   3277-2, 3278-2/3/4                   *\n*                                MAX=8 (NUMBER OF ASSEMBLED TICBS)    *\n*                                                                     *\n*        REGISTER CONVENTIONS:                                        *\n*                                                                     *\n*        R0,R1      PARAMETER PASSING                                 *\n*        R2         @ RPL                                             *\n*        R3         @ TICB                                            *\n*        R4         @ DA (ISTDPOHD)                                   *\n*        R5-R9      WORK REGISTERS (VARIOUS CONTENTS)                 *\n*        R10        CODE BASE                                         *\n*        R11        DATA BASE 1                                       *\n*        R12        DATA BASE 2                                       *\n*        R13        SAVE AREA ADDRESS                                 *\n*        R14        RETURN ADDRESS, OCCASIONAL WORKREG                *\n*        R15        SUBROUTINE ADDRESSES, RETURN CODE, ACTION CODE    *\n*                                                                     *\n*        DEFINITIONS:                                                 *\n*                                                                     *\n*        COMMAND -  DATA UNIT ORIGINATING AT A TERMINAL AND DESTINED  *\n*                   FOR VTAM. CONTAINS A VTAM OPERATOR COMMAND (VARY, *\n*                   MODIFY, DISPLAY, OR REPLY).                       *\n*                                                                     *\n*        MESSAGE -  A DATA UNIT ORIGINATING IN VTAM DESTINED FOR A    *\n*                   REMOTE OPERATOR TERMINAL LOGGED ONTO THE PO.      *\n*                                                                     *\n*        UNSOLICITED MESSAGE - MESSAGE NOT RELATED TO ANY COMMAND     *\n*                   PREVIOUSLY SENT TO VTAM FROM A REMOTE OPERATOR.   *\n*                   AN UNSOLICITED MESSAGE IS RECOGNIZED BY THE       *\n*                   INDICATOR IN THE MESSAGE HEADER  (SEE POHGEN IN   *\n*                   ISTDPOHD DSECT).                                  *\n*                                                                     *\n*        MASTER TERMINAL - TERMINAL DESIGNATED BY PO TO RECEIVE       *\n*                   UNSOLICITED MESSAGES (THESE ARE ALSO SENT TO ALL  *\n*                   MASTER CANDIDATES).                               *\n*                                                                     *\n*                                                                     *\n*        PROCESSOR: ASSEMBLER                                         *\n*                                                                     *\n*        ATTRIBUTES:  NON-REUSABLE                                    *\n*                     AC(1)                                           *\n*                                                                     *\n*       ENTRY: NETOP                                                  *\n*                                                                     *\n*       LINKAGE: CALL                                                 *\n*                                                                     *\n*       INPUT: R13: SAVE AREA ADDRESS                                 *\n*              R14: RETURN POINT ADDRESS                              *\n*              R15: ENTRY POINT ADDRESS                               *\n*                                                                     *\n*       OUTPUT: ALL REGISTERS RESTORED                                *\n*                                                                     *\n*       EXIT-NORMAL: BR 14                                            *\n*                                                                     *\n*       EXIT-ERROR:  ABEND                                            *\n*                                                                     *\n*                    ABEND CODES:                                     *\n*                                                                     *\n*                                  1 OPEN FAILURE                     *\n*                                  2 CLOSE FAILURE                    *\n*                                 10 SETLOGON FAILED                  *\n*                                 16 ENVIRONMENT ERROR (FROM LERAD)   *\n*                                 20 LOGIC ERROR (FROM LERAD)         *\n*                                 23 RECEIVE FAILURE (INBOUND)        *\n*                                                                     *\n*       EXTERNAL-REFERENCES:  NONE                                    *\n*                                                                     *\n*       CONTROL BLOCKS: TICB - TERMINAL INFORMATION CONTROL BLOCK     *\n*                       ISTDPOHD - MESSAGE BUFFER                     *\n*                                                                     *\n*       TABLES:  MATABLE - LIST OF TERMINALS AUTHORIZED TO BE MASTER  *\n*                TICBPOOL - POOL OF TICBS                             *\n*                                                                     *\n*       SYSTEM MACROS:                                                *\n*                ABEND,WAIT,PUT,WRITE,READ,POST,OPEN,CLOSE,DCB,WTO    *\n*                                                                     *\n*       VTAM MACROS:                                                  *\n*                ACB,RPL,NIB,MODCB,CHECK,EXLST,SETLOGON,OPEN,CLOSE    *\n*                OPNDST,CLSDST,SEND,RECEIVE,SENDCMD,RCVCMD            *\n*                                                                     *\n*                                                                     *\n*       RELATIONSHIPS BETWEEN MAINLINE, EXITS AND SUBROUTINES:        *\n*                                                                     *\n*       CODE SEGMENT   CALLS                                          *\n*                                                                     *\n*        MAINLINE       SHOWCDS,PRLOG,PUTLOG,IDFIND,                  *\n*                       SND3270                                       *\n*        ABEXIT         CVHX                                          *\n*                                                                     *\n*        INBOUND        RCV3270,ATOX                                  *\n*        OUTBOUND       IDFIND,RCVVTAM,PUTLOG,SND3270,INBOUND(INLENOK)*\n*        LOGON          INT3270,PUTLOG,CLSDST                         *\n*        LOSTERM        PUTLOG,MAFIND,CLSDST                          *\n*        RELREQ         PUTLOG,MAFIND,CLSDST                          *\n*        TPEND          CVHX,PUTLOG                                   *\n*        ERROR          PUTLOG                                        *\n*                                                                     *\n*        SHOWCDS        CVHX                                          *\n*        CVHX                                                         *\n*        RCVVTAM        TSOUID                                        *\n*        RCV3270        INT3270,ATOX,PUTLOG,PRLOG,MAFIND,CLSDST,      *\n*                       TSOUID                                        *\n*        CLSDST         PUTLOG                                        *\n*        ATOX                                                         *\n*        MAFIND         IDFIND,PUTLOG                                 *\n*        IDFIND                                                       *\n*        PUTLOG         PRLOG                                         *\n*        PRLOG                                                        *\n*        SND3270        INT3270                                       *\n*        INT3270                                                      *\n*        TSOUID                                                       *\n*                                                                     *\n***********************************************************************\n*\n*\n         MACRO\n&NAME    $XINIT &XBASE=BASE1@,&TBASE=SUBR@,&SA=EXITSA,&RET=RET@,       *\n               &DBASE1=DBASE1@,&DBASE2=DBASE2@,&DORG=@DBASE2\n         GBLC  &GNAME\n&GNAME   SETC  '&NAME'\n         DS    0F                 ALIGN\n         USING &NAME,&TBASE\n&NAME    B     *+16               JUMP PAST CONSTANTS\n         DC    CL8'&NAME'         EXIT ID\n         DC    A(&DORG-&NAME)     DATA BASE ORIGIN\n         AIF   ('&NAME' NE 'ABEXIT').NOSAVE\n         SAVE  (14,12)\n.NOSAVE  AIF   ('&GNAME' EQ 'ERROR').LBASE  ALREADY SET UP\n         L     &DBASE1,&NAME+12   PICK UP DBASE OFFSET\n         ALR   &DBASE1,&TBASE     ADD TEMP BASE TO GET ADDRESS\n         L     &DBASE2,&DORG      LOAD 2ND DBASE ADDRESS\n.LBASE   ANOP\n         LR    &XBASE,&TBASE      LOAD EXIT BASE ADDRESS\n         DROP  &TBASE\n         USING &NAME,&XBASE\n.*       ASSUME USINGS FOR DBASES ALREADY DONE IN MAINLINE\n         AIF   ('&SA' EQ 'EXITSA' OR '&GNAME' EQ 'TPEND').NSAVE\n         LR    &TBASE,SA@         SAVE HIGH SA PTR\n.NSAVE   ANOP\n         LA    SA@,&SA            LOAD NEW SA PTR\n         AIF   ('&SA' EQ 'EXITSA' OR '&GNAME' EQ 'TPEND').SAVRET\n         ST    SA@,8(,&TBASE)     CHAIN FORWARD\n         ST    &TBASE,BWDPTR      CHAIN BACK\n         AIF   ('&GNAME' EQ 'ERROR').SAVRET\n         MEXIT\n.SAVRET  ANOP\n         TM    PL1WD,INUSE        SAVE AREA IN USE?\n         BZ    *+24               NO\n         $AB   13                 YES - GET A DUMP - THIS WE MUST SEE\n         ST    &RET,PL1WD         SAVE RETURN PTR IN PL1 WORD\n         OI    PL1WD,INUSE        FLAG SAVE AREA IN USE\n         OI    &NAME+12,INUSE     FLAG EXIT IN USE\n         MEND\n*\n         MACRO\n&NAME    $XRET &RET=RET@\n         GBLC  &GNAME\n&NAME    NI    PL1WD,255-INUSE    FLAG SAVE AREA FREE\n         NI    &GNAME+12,255-INUSE    FLAG EXIT FREE\n         L     &RET,PL1WD         PICK UP RET PTR\n         AIF   ('&GNAME' NE 'ERROR').RET\n         L     SA@,BWDPTR         RELOAD CALLER'S SA PTR\n         XC    FWDPTR,FWDPTR      ZERO CALLER'S LOW SA PTR\n.RET     ANOP\n         BR    &RET               RETURN\n         MEND\n*\n         MACRO\n&NAME    $XCTL &LABEL,&SUBNAME,&XBASE=BASE1@\n         GBLC  &GNAME\n&NAME    NI    &GNAME+12,255-INUSE   FLAG OLD EXIT FREE\n         L     &XBASE,=A(&SUBNAME)   LOAD NEW EXIT BASE ADDRESS\n         USING &SUBNAME,&XBASE       ESTABLISH NEW EXIT ADDRESSING\n         OI    &SUBNAME+12,INUSE     FLAG NEW EXIT IN USE\n         B     &LABEL                GO TO NEW EXIT\n         USING &GNAME,&XBASE         RE-ESTABLISH OLD EXIT ADDRESSING\n         MEND\n*\n         MACRO\n&NAME    $CALL &SUBR,&PARM,&LEN,&LPARM\n         LCLC  &NAM,&SUBNAM,&REG\n         AIF   (K'&PARM GT 0 AND '&PARM' EQ '&LEN' OR                  *\n               '&LEN' EQ 'R1' OR '&LEN' EQ '1' OR                      *\n               '&LEN' EQ '(PARM@)').MERR\n&NAM     SETC  '&NAME'\n         AIF   (K'&PARM EQ 0).NOPARM\n         AIF   ('&PARM'(1,1) NE '(').NOTREG\n         AIF   ('&PARM' EQ '(PARM@)').NOLPARM\n&REG     SETC  '&PARM'(2,K'&PARM-2)\n&NAM     LR    PARM@,&REG     PICK UP PARM\n         AGO   .NAMRST\n.MERR    MNOTE 4,'PARM=&PARM WITH LEN=&LEN WILL CAUSE EXECUTION ERRORS'\n         MEXIT\n.NOTREG  ANOP\n         AIF   ('&PARM' EQ '0').ZPARM\n&NAM     LA    PARM@,&PARM    PICK UP PARM\n         AGO   .NAMRST\n.ZPARM   ANOP\n&NAM     SR    PARM@,PARM@    SET PARM\n         AGO   .NAMRST\n.NOPARM  AIF   (K'&LPARM EQ 0).NOLPARM\n&NAM     L     PARM@,&LPARM   PICK UP LOAD PARM\n.NAMRST  ANOP\n&NAM     SETC  ''\n.NOLPARM ANOP\n         AIF   (K'&LEN EQ 0).NOLEN\n         AIF   ('&LEN'(1,1) NE '(').NOTLREG\n&REG     SETC  '&LEN'(2,K'&LEN-2)\n         AIF   ('&REG'(1,2) EQ 'WK').LENOK\n         AIF   ('&REG' EQ 'SUBR@').LENCHG\n&NAM     LR    SUBR@,&REG     COPY LENGTH\n         AGO   .LENCHG\n.NOTLREG ANOP\n&REG     SETC  '&LEN'\n         AIF   ('&LEN'(1,1) NE '*').NOTAST\n&REG     SETC  'L''&PARM'.'&LEN'(2,K'&LEN-1)\n.NOTAST  ANOP\n         LA    SUBR@,&REG     LOAD LENGTH\n.LENCHG  ANOP\n&NAM     SETC  ''\n&REG     SETC  'SUBR@'\n.LENOK   ANOP\n&NAM     SLL   &REG,24        SHIFT TO HI END\n         OR    PARM@,&REG     OR LENGTH INTO PARM\n&NAM     SETC  ''\n.NOLEN   ANOP\n&SUBNAM  SETC  '=A(&SUBR)'\n&NAM     L     SUBR@,&SUBNAM PICK UP SUBR EP\n         BALR  RET@,SUBR@     GO TO SUBROUTINE\n         MEND\n*\n         MACRO\n&NAME    $SINIT &SARET=\n.*\n.*          SARET=(LABEL1,LABEL2) IS USED AS FOLLOWS:\n.*\n.*       LABEL1 IS USED AS THE TARGET FOR SAVING RETURN AND BASE REGS,\n.*       SPACE BEING RESERVED FOR THESE AT A SUSEQUENT ENTRY POINT.\n.*       IF LABEL2 IS CODED IT IS USED AT THE NEXT ENTRY POINT TO\n.*       BYPASS CODE AFTER THE BASE REG HAS BEEN UPDATED DURING FALL\n.*       THROUGH, THE NORMAL MULTI-EP ACTION.\n.*\n         GBLC  &SUBNAME(32),&JUMP\n         GBLB  &MULTEP\n         GBLA  &SUB#\n         LCLC  &SUBNAM\n         LCLA  &SKIP\n&SKIP    SETA  20\n         AIF   (&MULTEP).MULTGO\n         AIF   (K'&SARET EQ 0).NOMULT\n&SKIP    SETA  12\n&MULTEP  SETB  1\n         AIF   (K'&SARET(2) EQ 0).NOMULT\n&JUMP    SETC  '&SARET(2)'     JUMP LABEL FOR FALL THRU AT NEXT $SINIT\n         AGO   .NOMULT\n.MULTGO  AIF   (K'&SARET GT 0).MULTON\n&MULTEP  SETB  0\n         AGO   .MULTOK\n.MULTON  ANOP\n&SKIP    SETA  12\n.MULTOK  ANOP\n         AIF   (K'&JUMP GT 0).NOCNOP\n         CNOP  0,4                  FULLWORD ALIGN\n.NOCNOP  ANOP\n         LA    BASE1@,&NAME\n         USING &NAME,BASE1@         BASE USAGE\n         AIF   (K'&JUMP GT 0).JUMP\n&JUMP    SETC  '*+18+&SKIP'\n.JUMP    ANOP\n         B     &JUMP\n&JUMP    SETC  ''\n.NOMULT  ANOP\n         DS    0F                   ALIGN\n         USING &NAME,SUBR@          TEMP BASE\n&SUB#    SETA  &SUB#+1\n&SUBNAME(&SUB#) SETC '&NAME'\n&SUBNAM  SETC '&SARET(1)'\n&NAME    B     *+&SKIP              JUMP CONSTANTS\n         DC    CL8'&NAME'           SUBR ID\n         AIF   (K'&SARET GT 0).NOSA\n         DS    2F                   RET PTR/BASE REG SAVE AREA\n&SUBNAM  SETC  '&SUBNAME(&SUB#)'\n.NOSA    ANOP\n         ST    RET@,&SUBNAM+12      SAVE RET PTR\n         ST    BASE1@,&SUBNAM+16    SAVE CALLERS BASE\n         OI    &SUBNAM+16,INUSE     FLAG SUBR IN USER\n         LR    BASE1@,SUBR@         LOAD LOCAL SUBR BASE\n         DROP  SUBR@                RESET ASSEMBLER\n         USING &NAME,BASE1@         BASE USAGE\n         MEND\n*\n         MACRO\n&NAME    $SRET\n         GBLC  &SUBNAME(32)\n         GBLA  &SUB#\n         LCLC  &SUBNAM\n&SUBNAM  SETC  '&SUBNAME(&SUB#)'\n&NAME    L     RET@,&SUBNAM+12      PICK UP RET PTR\n         NI    &SUBNAM+16,255-INUSE RESET INUSE FLAG\n         L     BASE1@,&SUBNAM+16    RESTORE CALLERS BASE\n         BR    RET@                 RETURN\n         MEND\n*\n         MACRO\n&NAME    $AB   &ABCD,&NODUMP\n         LCLC  &REG,&DUMP\n&REG     SETC  '(1)'\n&NAME    STM   R0,R1,ABREGS   SAVE REGS CLOBBERED BY ABEND MACRO\n         AIF   ('&ABCD'(1,1) EQ '(').REGFMT\n         LA    R1,&ABCD       LOAD USER ABEND CODE\n         AGO   .CHKDMP\n.REGFMT  ANOP\n&REG     SETC  '&ABCD'\n.CHKDMP  AIF   ('&NODUMP' EQ 'NODUMP').NODUMP\n         ABEND &REG,DUMP\n         MEXIT\n.NODUMP  ANOP\n         ABEND &REG\n         MEND\n*\n         MACRO\n&NAME    $MATAB\n         LCLA  &MALEN,&I\n&I       SETA  1\n&NAME    DS    0F             MASTER CANDIDATE TABLE\n.MATLOOP ANOP\n&MALEN   SETA  K'&SYSLIST(&I)\n         DC    AL1(&MALEN),C'&SYSLIST(&I)'\n&I       SETA  &I+1\n         AIF   (&I LE N'&SYSLIST).MATLOOP\n         MEND\n*\n         MACRO\n         $HELPF2\n         LCLC  &N,&P\n         LCLA  &I\n*\n*        SET PF2 KEYWORD INTENSITIES TO REFLECT MODES IN FORCE\n*\n.HLOOP   ANOP\n&I       SETA  &I+1\n&P       SETC  '&SYSLIST(&I)'(1,1)\n&N       SETC  '&P.Z'\n         MVI   HELP&N,X'60'              INITIALIZE\n         MVI   HELP&P,X'60'               AS LO\n         TM    TIFLAGS2,TIF2&SYSLIST(&I) IF MODE NOT SET,\n         BO    *+12\n         MVI   HELP&N,X'E8'               THEN SET NEGATIVE TO HI\n         B     *+8\n         MVI   HELP&P,X'E8'               ELSE SET POSITIVE TO HI\n         SPACE\n         AIF   (&I LT N'&SYSLIST).HLOOP\n         MEND\n*\n         MACRO\n         $3270\n*\n*        3270 ORDERS, PF/PA KEYS, AND ATTRIBUTE CODES\n*\n         GBLC  &L(24)\n&L(1)    SETC  '4040'\n&L(2)    SETC  'C150'\n&L(3)    SETC  'C260'\n&L(4)    SETC  'C3F0'\n&L(5)    SETC  'C540'\n&L(6)    SETC  'C650'\n&L(7)    SETC  'C760'\n&L(8)    SETC  'C8F0'\n&L(9)    SETC  '4A40'\n&L(10)   SETC  '4B50'\n&L(11)   SETC  '4C60'\n&L(12)   SETC  '4DF0'\n&L(13)   SETC  '4F40'\n&L(14)   SETC  '5050'\n&L(15)   SETC  'D160'\n&L(16)   SETC  'D2F0'\n&L(17)   SETC  'D440'\n&L(18)   SETC  'D550'\n&L(19)   SETC  'D660'\n&L(20)   SETC  'D7F0'\n&L(21)   SETC  'D940'\n&L(22)   SETC  '5A50'\n&L(23)   SETC  '5B60'\n&L(24)   SETC  '5CF0'\nSF       EQU   X'1D'          START FIELD\nSBA      EQU   X'11'          SET BUFFER ADDRESS\nIC       EQU   X'13'          INSERT CURSOR\nPT       EQU   X'05'          PROGRAM TAB\nRA       EQU   X'3C'          REPEAT TO ADDRESS\nEUA      EQU   X'12'          ERASE UNPROTECTED TO ADDRESS\nENTER    EQU   X'7D'\nXENTER   EQU   X'0D'\nPF1      EQU   X'F1'\nXPF1     EQU   X'01'\nPF2      EQU   X'F2'\nXPF2     EQU   X'02'\nPF3      EQU   X'F3'\nXPF3     EQU   X'03'\nPF4      EQU   X'F4'\nPF5      EQU   X'F5'\nPF6      EQU   X'F6'\nPF7      EQU   X'F7'\nPF8      EQU   X'F8'\nPF9      EQU   X'F9'\nPF10     EQU   X'7A'\nPF11     EQU   X'7B'\nPF12     EQU   X'7C'\nPA1      EQU   X'6C'\nPA2      EQU   X'6E'\nPA3      EQU   X'6B'\nCLEAR    EQU   X'6D'\nTESTREQ  EQU   X'F0'\n         MEND\n*\n         GBLC  &L(24)         3270 BUFFER LINE ADDRESSES (COL 1)\n         LCLC  &SENDLST       LIST OF TSO VTAM SYSTEM PGMRS. FOR SENDS\n         LCLC  &CLUST         STARTING CHARACTER OF ALL CLUSTERS\n         LCLC  &REL           RELEASE AND LEVEL (R.L)\n         LCLB  &MAROLL        ROLL/NROLL MODE FOR INITIAL MASTER\n&SENDLST SETC  'EP91853,AL88221'\n&CLUST   SETC  'C'\n&REL     SETC  '2.1'\n&MAROLL  SETB  1              ROLL\n*\n         TITLE  'N E T O P - MISC. DSECTS'\n* TERMINAL INFORMATION CONTROL BLOCK (TICB)\n*\nTICB     DSECT\nTINDICS  DS    0CL4               INDICATORS\nTISTATUS DS    XL1                STATUS BYTE\nTISALLOC EQU   B'10000000'  80    ALLOCATION BIT\nTISACT   EQU   B'01000000'  40    TERMINAL ACTIVE\nTISMCAND EQU   B'00100000'  20    MASTER CANDIDATE\nTISMA    EQU   B'00010000'  10    MASTER TERMINAL\nTISUID   EQU   B'00001000'  08    USERID QUERY\nTISTACK  EQU   B'00000100'  04    MESSAGES ARE STACKED AWAITING ROLL\nTISREPLY EQU   B'00000010'  02    REPLY COMMAND ISSUED\nTISNOMOR EQU   B'00000001'  01    NO MORE TICBS\n*\nTIFLAGS  DS    XL1\nTIFDSP   EQU   B'10000000'  80    DISPLAY CMD ENTERED\nTIFVLOG  EQU   B'01000000'  40    PF7 (VARY ,LOGON)\nTIFCLUST EQU   B'00100000'  20    PF10 (DISPLAY, CLUSTER ONLY STATUS)\nTIFDSP11 EQU   B'00010000'  10    PF11 (DISPLAY, AND LOG)\nTIFHELP  EQU   B'00001000'  08    PF1 (HELP) ENTERED\nTIFUNSOL EQU   B'00000100'  04    LAST MSG DISPLAYED IS UNSOL\nTIFWTROL EQU   B'00000010'  02    WAIT FOR ROLL CONDITION (SCREEN FULL)\nTIFNAUT  EQU   B'00000001'  01    NO-AUTO RE-ENTRY OF EXPANDED CMD\n*\nTIFLAGS2 DS    XL1                PF2 CONTROL FLAGS\nTIF2ROLL EQU   B'10000000'  80    ROLL FLAG - ON=ROLL SCREEN\nTIF2AUTO EQU   B'01000000'  40    AUTO FLAG - ON=NO AUTO CMDS\nTIF2ECHO EQU   B'00100000'  20    ECHO FLAG - ON=NO ECHOING TO TERMINAL\nTIF2SOLO EQU   B'00010000'  10    SOLO FLAG - ON=SOLICITED MSGS ONLY\nTIF2LOGD EQU   B'00001000'  08    LOGD FLAG - ON=LOG DISPLAY CMDS\n*\nTIFLAGS3 DS    XL1            UNUSED SO FAR\n*\nTINAMLEN DS    H                  LENGTH TERMINAL NAME\nTINAME   DS    CL8                TERMINAL NAME\nTIMSGID  DS    0XL2               MESSAGE ID\nTID      DS    XL1                 TERMINAL ID\nTIMSGSEQ DS    XL1                 MESSAGE SEQUENCE NUMBER\nTICMDLEN DS    H                  LENGTH LAST COMMAND ENTERED\nTICMD    DS    CL40               LAST COMMAND ENTERED\nTICOPYL  EQU   *-TICB             FOR COPY TO DUMTICB DURING ECHO\nTILNCT   DS    H                  SCREEN LINE COUNT\nTIDSPCT  DS    H                  OUTSTANDING DISPLAY COUNT\nTIUNADDR DS    XL2                3270 BUFADD OF LAST UNSOL MSG\nTIABRLEN DS    H                  LENGTH LAST ABBREV. COMMAND ENTERED\nTIABR    DS    CL30               LAST ABBREV. COMMAND ENTERED\nTICID    DS    F                  TERMINAL CID\nTIHEAD@  DS    F                  STACK HEAD POINTER\nTITAIL@  DS    F                  STACK TAIL POINTER\nTISTKCT  DS    PL2                STACK ELEMENT COUNT\n         DS    0F                 GUARANTEE L'TICB = N FULLWORDS\nTICBLEN  EQU   ((*-TICB)+31)/32*32 L'TICB MULTIPLE OF 32 BYTES\n         SPACE 5\n*\n* DATA AREA\n*\n         ISTDPOHD\n         ORG   POHID\nPOHTID   DS    XL1                TERMINAL ID\nPOHMSQ   DS    XL1                MESSAGE SEQUENCE NUMBER\nPOHLEN   EQU   *-ISTDPOHD         LENGTH OF PO HEADER\nDATX     DS    CL124              MESSAGE TEXT\nDALEN    EQU   *-ISTDPOHD         LENGTH OF DATA AREA\nDATXLEN  EQU   DALEN-POHLEN       LENGTH OF TEXT AREA\n*\n*        VTAM MESSAGE FIELDS\n*\n         ORG   DATX+3         VTAM MESSAGE NUMBER\nDAMSG#   DS    CL3\n         ORG   DATX+9         VTAM NODE NAME\nDAMSGNOD DS    CL8\n         ORG   DATX+17        RESPONSE VERB (ACCEPTED)\nDAMSGFAI DS    CL6\n         ORG   DATX+18        RESPONSE VERB (FAILED, IGNORED)\nDAMSGRSP DS    CL6\nDAM80TXL EQU   16             IST080I 'NODENAME STATUS'  FIELD LENGTH\nDAM80NXL EQU   22             OFFSET OF ONE  'NODENAME STATUS'  TO NEXT\n         ORG   DATX+18        IST082I DEVICE TYPE\nDAM82DEV DS    CL5\n         ORG   DATX+35        IST082I ALLOC APPLID\nDAM82ALC DS    CL8\n         ORG   DATX+63        IST082I SIMLOGON APPLID\nDAM82SIM DS    CL8\nDA342RC  EQU   DATX+93,2      IST342I RETURN CODE\nDA400APL EQU   DATX+44,8      IST400I APPLID\nDA804APL EQU   DATX+35,8      IST804I APPLID\nDA805APL EQU   DATX+33,8      IST805I APPLID\n*\n*        VTAM ERROR MESSAGE FIELDS\n*\n         ORG   DATX+17        IST285I/6I 370X NODE NAME\nDA285NOD DS    CL8\n         ORG   DATX+26        IST852I CLUSTER NODE NAME\nDA852NOD DS    CL8\n         ORG   DATX+37        NCP BTU COMMAND\nDABTUCMD DS    CL4\n         ORG   DATX+57        EG: INTERVENTION REQD - BSC STATUS\nDABSCST1 DS    CL2,CL3            40 -\nDABSCST2 DS    CL2                     50\n         ORG   DATX+61        EG: PERM. I/O ERROR - NCP RESPONSE\nDANCPRS1 DS    CL2,CL3            AB -\nDANCPRS2 DS    CL2                     80   (TIMEOUT)\n*\nSTKEL    DSECT                STACK ELEMENT\nSTKNXEL  DS    F              NEXT STACK ELEMENT POINTER\nSTKELEN  DS    H              STACK ELEMENT LENGTH\nSTKDATA  DS    CL(DALEN)      STACK ELEMENT DATA (MAX LENGTH)\n*\n* PARAMETER LIST FOR TPEND EXIT\n*\nTPENDPRM DSECT\nTPACB@   DS    F                  @ ACBTERMS\nTPREASON DS    F                  REASON CODE\n*\n* PARAMETER LIST FOR LOGON AND RELREQ EXITS\n*\nLOGONPRM DSECT\nLGNACB@  DS    F                  @ ACBTERMS\nTNAME@   DS    F                  @ TERMINAL NAME\n         DS    F                  RESERVED\nLGNMSGLN DS    F                  LENGTH OF LOGON MESSAGE\n*\n* PARAMETER LIST FOR LOSTERM EXIT\n*\nLOSTPARM DSECT                    FOR LOSTERM AND RESP EXITS\nLOSTACB  DS    F                  @ ACBTERMS\nLOSTCID  DS    F                  CID OF TERMINAL\nLOSTUSER DS    F                  USER FIELD INFO - @ TICB\nLOSTCODE DS    F                  REASON CODE (UNUSED FOR RESP EXIT)\nRESPRPL  DS    F                  RESPONSE EXIT READ-ONLY RPL\n*\nSA       DSECT                    SAVE AREA DSECT\nPL1WD    DS    F                  RESERVED\nINUSE    EQU   X'80'              IN USE FLAG\nBWDPTR   DS    F                  @ CALLER'S SAVE AREA\nFWDPTR   DS    F                  @ CALLEE'S SAVE AREA\nRETURN   DS    F                  CALLER'S RETURN ADDRESS\nENTRY    DS    F                  CALLEE'S ENTRY ADDRESS\n         PRINT ON\n         IFGACB AM=VTAM\n         ISTUSFBC\n         IFGRPL AM=VTAM\n         ISTDNIB\n         IHASDWA\n         IEFZB4D2             DYNALLOC EQUATES\n         IKJTSB   EXT=YES,LIST=YES\n         IKTTCAST\n         IHAASCB\n         CVT\n         PRINT ON\n         TITLE 'N E T O P - MISC. EQUATES'\n* REGISTER EQUATES\n*\n         $REGS\n         $3270\n*\n*        NOTE:   SYMBOL @ IS USED TO DENOTE 'ADDRESS OF' OR 'POINTER'.\n*              IT IS USED AS A SUFFIX IN REGISTER EQUATES AND AS A\n*              PREFIX IN ADCON SYMBOLS.\n*\nACTCD    EQU   R0                 ACTION CODE FROM VTAM\nPARM@    EQU   R1                 POINTER TO PARAMETER LIST\nRPL@     EQU   R2                 RPL ADDRESS REGISTER\nTICB@    EQU   R3                 TICB ADDRESS REGISTER\nDA@      EQU   R4                 DATA AREA @ (INBOUND,OUTBOUND)\nNIB@     EQU   R4                 NIB @ (MAINLINE,LOGON,RELREQ)\nCID      EQU   R4                 TERMINAL CID (LOSTERM)\nMSGLEN   EQU   R5                 MESSAGE LENGTH (OUTBOUND)\nWKA      EQU   R6                 WORK REGISTER\nWKB      EQU   R7                 WORK REGISTER\nACB@     EQU   R8                 ACB @\nOUTX     EQU   R8                 SNDLOOP INDEX (SND3270)\nWKC      EQU   R8                 OCCASIONAL WORK REGISTER\nSTKEL@   EQU   R9                 STACK ELEMENT ADDRESS\nLOG@     EQU   R9                 RECORD PTR IN LOG BUFFER\nBASE1@   EQU   R10                1ST CODE BASE REG\nDBASE1@  EQU   R11                1ST DATA BASE REG\nDBASE2@  EQU   R12                2ND DATA BASE REG\nSA@      EQU   R13                SA PTR\nRET@     EQU   R14                RETURN ADDRESS\nWKD      EQU   R14                OCCASIONAL WORK REGISTER\nSUBR@    EQU   R15                SUBROUTINE ENTRY ADDRESS\nRTNCD    EQU   R15                RETURN CODE\n*\n* RCV3270 RETURN CODES (FOR INBOUND)\n*\nRCVCMDOK EQU   0                  COMMAND OK\nRCVCMDRS EQU   4                  COMMAND OK AND RESPONSE MSG\nRCVRMSG  EQU   8                  RESPONSE MSG\nRCVNRMSG EQU   12                 NO RESPONSE MSG\nRCVCLDST EQU   12                 CLSDST ISSUED FOR TERMINAL\nRCVCLOSD EQU   16                 CLOSEDOWN ISSUED FOR NETOP\n*\n         TITLE 'N E T O P - MAINLINE'\n*\n***********************************************************************\n*                                                                     *\n* INITIAL HOUSEKEEPING - ENTRY CODE FOR OS/VS.                        *\n* SAVE REGISTERS, ESTABLISH ADDRESSABILITY, SET UP SAVE AREA.         *\n*                                                                     *\n***********************************************************************\n*\n         $START BASENO=1,CSECT=NETOP,ADCONS=@DBASE2,                   *\n               SA=MAINSA,SAUSING=NO\n         USING SA,SA@             SAVE AREA DSECT ADDRESSING\n         L     DBASE1@,A@DBASE2   SET DATA BASE 1\n         USING @DBASE2,DBASE1@    DATA ADDRESSING (1)\n         L     DBASE2@,@DBASE2    SET DATA BASE 2\n         USING @DBASE2+4096,DBASE2@  DATA ADDRESSING (2)\n         USING TICB,TICB@         TICB DSECT ADDRESSING\n         USING IFGRPL,RPL@        RPL DSECT ADDRESSING\n         LA    ACB@,ACBTERMS      SET BASE FOR ACB\n         USING IFGACB,ACB@        ACB DSECT ADDRESSING\n         L     PARM@,0(,PARM@)    PARM PTR\n         SR    WKA,WKA\n         ICM   WKA,3,0(PARM@)     PICK UP PARM LENGTH\n         BZ    SETSTAE            IF ZERO, FORGET IT\n         CLI   2(PARM@),C'A'      SPECIAL CHAR?\n         BNL   NOSPEC             NO\n         LA    PARM@,1(,PARM@)    YES - JUMP OVER\n         BCTR  WKA,0               AND DECR LEN\n         CLI   1(PARM@),C'$'      STARTUP COMMANDS?\n         BNE   NOSPEC             NO\n         OI    POFLAGS,POFOSCMD   YES - FLAG IT\nNOSPEC   LA    NIB@,SIMNIB        SET POINTER TO NIB\n         LA    WKB,8              IF > 8,\n         CR    WKA,WKB             USE 8\n         BNH   *+6\n         LR    WKA,WKB\n         BCTR  WKA,0              DECR FOR EX\n         EX    WKA,MVPARM         MOVE PARM TO NIB\n*\n***********************************************************************\n*        SET UP ESTAE ENVIRONMENT                                     *\n***********************************************************************\n*\nSETSTAE  ESTAE ABEXIT,ASYNCH=YES,TERM=YES\n*\n***********************************************************************\n*                                                                     *\n* OPEN THE ACB FOR TERMINALS. OPENING THIS ACB FIRST WILL ALLOW THE   *\n* PO TO SIMLOGON A MASTER BEFORE ACTIVATING THE PRIMARY PO INTERFACE. *\n* NON MASTERS MAY LOGON  AND USE THE SECONDARY INTERFACE AT ANY TIME. *\n*                                                                     *\n***********************************************************************\n*\nOPENTCNT LA    R3,(2*60)/15       2 MIN TIME LIMIT FOR OPEN LOOP\n         MVC   NTP06TYP,=C'TERMINALS'\nOPENT    OPEN  ((ACB@))           OPEN THE ACB FOR TERMINALS\n         LTR   R2,RTNCD           CHECK AND SAVE RETURN CODE\n         BZ    LOGINIT            GO OPEN LOG IF SUCCESSFUL\n*\n* OPEN DID NOT SUCCEED: CHECK ERROR TYPE\n*\n         CLI   ACBERFLG,ACBONVRT  STORAGE SHORTAGE?\n         BE    OPENT              YES - RETRY\n         CLI   ACBERFLG,ACBOAPAA  OPENED ALREADY?\n         BNE   LOGINIT            NO\n        WTO    MF=(E,NTP04MSG)\n         B     MAINRET            YES - WTO AND TERMINATE\n*\n***********************************************************************\n*        INITIALIZE LOG                                               *\n***********************************************************************\n*\nLOGINIT  TIME\n         STM   R0,R1,STTIME      STORE TIME AND DATE, THEN\n         $CALL PRLOG              ALLOCATE AND INITIALIZE LOG\n*\nOPENTCHK LTR   WKA,R2             CHECK OPEN TERMINAL ACB RETURN CODE\n         BZ    RCVI               BRANCH IF SUCCESSFUL\n         $CALL SHOWCDS            CONSTRUCT ERROR MESSAGE NTP10\n         $CALL PUTLOG,NTP06MSG    INFORM OPERATOR OF OPEN FAILURE\n         $CALL PUTLOG,NTP10MSG    WRITE OUT ACB FEEDBACK INFO\n         CLI   ACBERFLG,ACBOAPNM  APPLID NOT YET ACTIVATED?\n         BE    RETRYMSG           YES => WRITE RETRY MSG\n         CLI   ACBERFLG,ACBOVINA  VTAM NOT YET ACTIVE?\n         BNE   MAINRET            NO  => TERMINATE NETOP\nRETRYMSG $CALL PUTLOG,NTP09MSG     WRITE RETRYING MSG,\n         STIMER WAIT,BINTVL=OPNDLAY WAIT 15 SECS\n         BCT   R3,OPENT              THEN RETRY FOR 2 MINUTES\n         WTOR  MF=(E,NTP05MSG)    WRITE RETRY PROMPT\n         WAIT  1,ECB=ECBMAIN      WAIT FOR REPLY\n         OI    TBUF,C' '          FOLD\n         CLI   TBUF,C'U'          CONTINUE?\n         BNE   MAINRET            NO\n         LA    R3,1               YES - SET LOOP COUNT\n         ST    R3,OPNDLAY          AND NULLIFY STIMER DELAY\n         B     OPENT              GO RETRY OPEN\n         SPACE 3\n*\n***********************************************************************\n* ISSUE RECEIVE MACRO TO START INPUT FROM TERMINALS. SPECIFY INBOUND  *\n* AS THE EXIT TO BE SCHEDULED ON COMPLETION.                          *\n***********************************************************************\n*\nRCVI     RECEIVE RPL=RCVRPL       GET 1ST INPUT MESSAGE\n         LTR   RTNCD,RTNCD        OK?\n         BZ    OPENSPO            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVI                THEN RETRY\n         $AB   23                 ELSE ABEND - CANT GO ON IF CANT RCV..\n*\n***********************************************************************\n*        OPEN THE SPO ACB                                             *\n***********************************************************************\n*\nOPENSPO  L     ACB@,@ACBSPO       PICK UP SPO ACB PTR\n         OPEN  ((ACB@))           OPEN THE SPO ACB\n         LTR   WKA,RTNCD          CHECK RETURN CODE\n         BZ    RCVCMDI            BRANCH IF SUCCESSFUL\n*\n* OPEN FAILED - INFORM OPERATOR AND ABEND.\n*\n         MVC   NTP06TYP(3),=C'SPO'\nOPENFAIL $CALL SHOWCDS            CONSTRUCT ERROR MESSAGE NTP10\n         $CALL PUTLOG,NTP06MSG    INFORM OPERATOR OF OPEN FAILURE\n         $CALL PUTLOG,NTP10MSG    WRITE OUT ACB FEEDBACK INFO\n         SR    RTNCD,RTNCD\n         IC    RTNCD,ACBERFLG     SET ACB ERROR IN REASON CODE\n         $AB   1                  TERMINATE NETOP\n*\n***********************************************************************\n*   START INPUT FROM VTAM. ISSUE RCVCMD SPECIFYING THE EXIT ROUTINE   *\n* OUTBOUND FOR ALL ACBSPO SENDCMDS.                                   *\n***********************************************************************\n*\nRCVCMDI  RCVCMD RPL=SENDRPL       GET 1ST OUTGOING MESSAGE\n         LTR   RTNCD,RTNCD        OK?\n         BZ    CMANDO             YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVCMDI             THEN RETRY\n*\n***********************************************************************\n*        ISSUE ANY STARTUP COMMANDS, IF REQUIRED / CHECK TSO TEST JOB *\n***********************************************************************\n*\nCMANDO   TM    POFLAGS,POFOSCMD PRFX=# IN START CMD?\n         BZ    TESTCHK        NO\n         NI    POFLAGS,255-POFOSCMD YES - RESET FLAG AND\n         LINK  EP=CMANDO,PARAM=NULL  ISSUE ANY STARTUP CMDS\n*\nTESTCHK  L     WKA,X'21C'     LOAD TCB PTR\n         TM    20(WKA),X'04'  RUNNING UNDER TSO TEST?\n         BZ    STARTLGN       NO\n         OI    POSTATUS,POSTEST YES - FLAG TO AVOID 047 ABENDS\n*\n***********************************************************************\n* START LOGONS SO THAT PO CAN OBTAIN TERMINALS, IN PARTICULAR, THE    *\n* MASTER TERMINAL IT NEEDS TO BECOME A PPO. WAIT FOR THE MASTER       *\n* TERMINAL TO BE LOGGED ON. WHEN IT IS, TELL OPERATOR WHAT TERMINAL   *\n* IT IS.  IF PARM FLD PRESENT ASSUME IT IS MASTER TERMINAL NAME AND   *\n* ISSUE A SIMLOGON TO DRIVE THE LOGON EXIT FOR THAT TERMINAL.         *\n***********************************************************************\n*\nSTARTLGN LA    RPL@,PRIMARPL\n         SETLOGON OPTCD=START,    START LOGONS                         *\n               ACB=ACBTERMS,                                           *\n               RPL=(RPL@)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    SETLGNOK           YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    STARTLGN            THEN RETRY\n         $AB   10                  ELSE ABEND\n*\n*              TELL OPERATOR WE ARE WAITING FOR A MASTER TERMINAL.\n*\nSETLGNOK $CALL PUTLOG,NTP00MSG\n         USING ISTDNIB,NIB@       NIB DSECT ADDRESSING\n         CLI   NIBSYM,C' '        VALID TERMINAL NAME?\n         BE    NOPARM             NO\n*\n*              AQUIRE MASTER SPECIFIED IN PARM VIA A LOGON EXIT.\n*\nSIMLOG   SIMLOGON RPL=(RPL@),     SIMULATE MASTER LOGON                *\n               NIB=(NIB@),                                             *\n               OPTCD=(SYN,CONALL,Q,RELRQ)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    WAITMAIN           YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    SIMLOG              THEN RETRY\n*             ELSE TELL OPERATOR PARM DRIVEN MASTER LOGON UNSUCCESSFUL\nNOPARM   MVC   NTP11NOD,NIBSYM    MOVE NAME INTO MESSAGE\n         $CALL PUTLOG,NTP11MSG\n*             WAIT FOR MASTER TERMINAL TO BE LOGGED ON\nWAITMAIN XC    ECBMAIN,ECBMAIN  CLEAR ECB\n         WAIT  1,ECB=ECBMAIN\n         CLI   ECBMAIN+3,0    CLOSE DOWN?\n         BE    CLOSNTP\n         CLI   ECBMAIN+3,1    OPEN PPO ACB?\n         BE    OPENPPO\n         CLI   ECBMAIN+3,2    CLOSE PPO ACB?\n         BE    CLOSPPO\n         $AB   0              IF YOU DROP TO HERE YOU HAVE PROBLEMS...\n         DROP  NIB@\n*\n***********************************************************************\n*                                                                     *\n* OPEN ACB FOR COMMUNICATION WITH VTAM NETWORK OPERATOR FACILITIES    *\n*                                                                     *\n***********************************************************************\n*\nOPENPPO  L     ACB@,@ACBPPO       SET BASE FOR ACB\n         SR    RTNCD,RTNCD        CLEAR RETURN CODE REGISTER\n         OPEN  ((ACB@))\n         LTR   WKA,RTNCD          CHECK RETURN CODE, AND SAVE IT\n         BZ    OPENPPOK           BRANCH IF SUCCESSFUL\n*\n* OPEN NOT SUCCESSFUL - CHECK FOR CONDITIONS\n*\n         CLI   ACBERFLG,ACBONVRT  STORAGE SHORTAGE?\n         BE    OPENPPO            YES - RETRY\n         CLI   ACBERFLG,ACBRNOOF  PPO OPENED ALREADY?\n         BE    SPONLY             YES\n         CLI   ACBERFLG,ACBOAPAA  THIS APPLID OPENED ALREADY?\n         BNE   OPENPPFL           NO\nSPONLY  WTO    MF=(E,NTP03MSG)    YES - ONLY SPO SERVICES AVAILABLE\n         B     WAITMAIN           WAIT FOR NEXT POST\n*\n* OPEN FAILED - INFORM OPERATOR AND TERMINATE ABNORMALLY.\n*\nOPENPPFL MVC   NTP06TYP(3),=C'PPO'\n         B     OPENFAIL           WRITE ACB FEEDBACK INFO AND ABEND\n*\n*              TELL OPERATOR NAME OF MASTER TERMINAL\n*\nOPENPPOK $CALL PUTLOG,NTP01MSG    OUTPUT NAME OF MASTER\n*\n***********************************************************************\n*   ISSUE RCVCMD SPECIFYING THE EXIT ROUTINE OUTBOUND FOR ALL PPO MSGS*\n***********************************************************************\n*\n         LA    RPL@,PRIMARPL     RPL PTR\n         MVI   RPLACTIV,0        RESET IN CASE NOT 1ST TIME THRU HERE\n*                                VTAM DOESNT CLEAR OUTSTANDING RPL WHEN\n*                                ACBPPO IS CLOSED!!\nRCVCMDP  RCVCMD RPL=(RPL@),                                            *\n               ACB=(ACB@),                                             *\n               AREA=PRIMADA,                                           *\n               AREALEN=DALEN,                                          *\n               EXIT=OUTBOUND,                                          *\n               OPTCD=ASY\n         LTR   RTNCD,RTNCD        OK?\n         BZ    WAITMAIN           YES - WAIT FOR NEXT POST\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVCMDP             THEN RETRY\n         B     WAITMAIN           WAIT FOR NEXT POST\n*\n* INDICATE PO IS CLOSING DOWN\n*\nCLOSNTP  OI    POSTATUS,POSCLSDN  SET CLOSEDOWN FLAG\nCLSIDLKP $CALL IDFIND,1       BUILD LIST ALL ACTIVE TICBS\n         LTR   RTNCD,RTNCD    FIND ANY?\n         BNZ   CLOSPPO        NO - FORGET CLOSEDOWN MSG TO TERMINALS\n         LA    DA@,CLOSM      SET UP PHONEY ISTDPOHD BASE\n         LA    MSGLEN,CLOSML  SET LENGTH\n         LA    RPL@,DISCRPL   SET RPL PTR\n         $CALL SND3270        SEND CLOSEDOWN MSG TO ALL TERMINALS\n*\n***********************************************************************\n*                                                                     *\n*       CLOSE SECONDARY PO ACB                                        *\n* CLOSE PRIMARY PO ACB                                                *\n*                                                                     *\n***********************************************************************\n*\nCLOSPPO  L     ACB@,@ACBPPO       SET UP BASE FOR ACB\n         TM    ACBOFLGS,ACBOPEN   IS IT OPEN?\n         BZ    CLOSPPND           IF NOT FORGET CLOSE\n         CLOSE ((ACB@))\n         LTR   WKA,RTNCD          CHECK RETURN CODE\n         BZ    CLOSPPOK           BRANCH IF SUCCESSFUL\n*\n* CLOSE NOT SUCCESSFUL - CHECK FOR RETRIABLE ERROR.\n*\n         TM    POFLAGS,POFCFAIL   FIRST TIME?\n         BO    CLOSPPFL           NO\n         OI    POFLAGS,POFCFAIL   YES - INDICATE FIRST CLOSE FAILURE\n         CLI   ACBERFLG,ACBRNOCF  MESSAGES LEFT?\n         BE    CLOSPPO            YES - RETRY\n         CLI   ACBERFLG,ACBTVTCL  CLOSE DURING ABTERM?\n         BE    CLOSPPOK           YES - IGNORE\n*\n* CLOSE FAILED - INFORM OPERATOR AND ABEND\n*\nCLOSPPFL MVC   NTP07TYP(3),=C'PPO'\nCLOSFAIL $CALL SHOWCDS            CONSTRUCT ERROR MESSAGE NTP10\n         $CALL PUTLOG,NTP07MSG    INFORM OPERATOR OF CLOSE FAILURE\n         $CALL PUTLOG,NTP10MSG    WRITE OUT ACB FEEDBACK INFO\n         SR    RTNCD,RTNCD\n         IC    RTNCD,ACBERFLG     SET ACB ERROR IN REASON CODE\n         $AB   2                  TERMINATE NETOP\n         SPACE 3\nCLOSPPOK NI    POFLAGS,255-POFCFAIL RESET FIRST CLOSE FAILURE FLAG\n*\n* TELL OPERATOR THAT FULL CONTROL OF VTAM IS AT THE SYSTEM CONSOLE.\n*\n         $CALL PUTLOG,NTP02MSG    SEND PPO INACTIVE MESSAGE\nCLOSPPND CLI   ECBMAIN+3,0    CLOSE DOWN?\n         BNE   WAITMAIN       NO - GO WAIT FOR NEXT POST\n*\n***********************************************************************\n*                                                                     *\n*       CLOSE SECONDARY PO ACB                                        *\n*                                                                     *\n***********************************************************************\n*\nCLOSSPO  L     ACB@,@ACBSPO       SET UP BASE FOR ACB\n         SR    RTNCD,RTNCD        CLEAR RETURN CODE REGISTER\n         CLOSE ((ACB@))\n         LTR   WKA,RTNCD          CHECK RETURN CODE\n         BZ    CLOSSPOK           BRANCH IF SUCCESSFUL\n*\n* CLOSE NOT SUCCESSFUL - CHECK FOR RETRIABLE ERROR.\n*\n         TM    POFLAGS,POFCFAIL   IF THIS IS FIRST TIME\n         BO    CLOSSPFL           THEN\n         OI    POFLAGS,POFCFAIL   INDICATE FIRST CLOSE FAILURE\n         CLI   ACBERFLG,ACBRNOCF  MESSAGES LEFT?\n         BE    CLOSSPO            YES - RETRY\n         CLI   ACBERFLG,ACBTVTCL  CLOSE DURING ABTERM?\n         BE    CLOSSPOK           YES - IGNORE\n*\n* CLOSE FAILED - INFORM OPERATOR AND ABEND\n*\nCLOSSPFL MVC   NTP07TYP(3),=C'SPO'\n*        B     CLOSFAIL           WRITE ACB FEEDBACK INFO AND ABEND\n*\n***********************************************************************\n*                                                                     *\n* CLOSE ACB FOR TERMINALS TO SEVER THE CONNECTION WITH VTAM.          *\n*                                                                     *\n***********************************************************************\n*\nCLOSSPOK DS    0H\n         LA    ACB@,ACBTERMS      SET ACB ADDRESS\n         SR    RTNCD,RTNCD        CLEAR RETURN CODE REGISTER\n         CLOSE ((ACB@))           CLOSE ACB FOR TERMINALS\n         LTR   WKA,RTNCD          CHECK RETURN CODE\n         BZ    MAINRET            BRANCH IF SUCCESSFUL\n         CLI   ACBERFLG,ACBTVTCL  CLOSE DURING ABTERM?\n         BE    MAINRET            YES - IGNORE\n* CLOSE FAILED - INFORM OPERATOR AND TERMINATE PO.\n         MVC   NTP07TYP,=C'TERMINALS'\n         B     CLOSFAIL           WRITE ACB FEEDBACK INFO AND ABEND\n*\n***********************************************************************\n* EXIT CODE                                                           *\n***********************************************************************\n*\nMAINRET  L     SA@,BWDPTR         GET @ SYSTEM SAVE AREA\n         RETURN (14,12)           RETURN TO CALLER\n*\n         USING ISTDNIB,NIB@       NIB DSECT ADDRESSING\nMVPARM   OC    NIBSYM(*-*),2(PARM@) FOLD TERM NAME FROM PARM INTO NIB\n         DROP  NIB@\n*\n*        ESTAE EXIT\n*\nABEXIT   $XINIT SA=ENDSA      SAVE, THEN CHAIN NEW SAVE AREA\n         LR    DA@,PARM@      SAVE SDWA PTR\n         USING SDWA,DA@       TELL ASMBLR\n         OI    POSTATUS,POSABEND FLAG ESTAE ENTERED\n         SR    R3,R3          DEFAULT NO RETRY\n         L     WKA,SDWACMPF   PICK UP CMP CODE\n         LA    WKA,0(,WKA)    CLEAR HI-ORDER BYTE\n         SRDL  WKA,12         SPLIT SYS FROM USER\n         SRL   WKB,20\n         LTR   WKA,WKA        SYS CMP CODE?\n         BNZ   SYSCMP         YES\n         LR    WKA,WKB        NO - MUST BE USER CMP\n         MVI   TBUF,C'U'      CMP ID\n         B     LOGABM         NO\nSYSCMP   MVI   TBUF,C'S'      CMP ID\n         CH    WKA,=AL2(X'D37') VTAMLOGO DATASET FULL?\n         BNE   ISZCAN         NO\n         NI    SDWACMPF,255-SDWAREQ  YES - SET NO DUMP\n         CLOSE (VTAMLOGO)      CLOSE, THEN RE-INITIALIZE -\n         OPEN  (VTAMLOGI,OUTPUT) RE-OPEN VTAMLOG DISP=OLD\n         CLOSE (VTAMLOGI)      CLOSE TO WRITE EOF\n         B     LOGABM         ALLOW ABEND TO CONTINUE\nISZCAN   CH    WKA,=AL2(X'0A7') Z NET,CANCEL?\n         BNE   ISCANCEL       NO\n         NI    SDWACMPF,255-SDWAREQ  SET NO DUMP\n         B     LOGABM         ALLOW ABEND TO CONTINUE\nISCANCEL CH    WKA,=AL2(X'222') OPER CANCEL?\n         BNE   LOGABM         NO\n         TM    SDWACMPF,SDWAREQ  DUMP REQUESTED?\n         BO    LOGABM          YES - PROBABLY LEGIT\n         WTO   MF=(E,NTP12MSG) NO - SEND REPROOF TO OPERATOR\nLOGABM   $CALL CVHX           CONVERT BYTE 2\n         MVC   ABMSGAC+2,HEX     AND MOVE IN\n         SRL   WKA,8          SHIFT BYTE 1 OVER\n         $CALL CVHX           CONVERT BYTE 1\n         MVC   HEX(1),TBUF       SET CMP ID\n         MVC   ABMSGAC,HEX       AND MOVE IN\n         L     WKA,SDWAGR15   PICK UP REASON CODE (R15)\n         $CALL CVHX           CONVERT,\n         MVC   ABMSGRC,HEX     AND MOVE IN\n         LA    TICB@,NETPTICB      SET ORIGIN AS NETOP\n         TM    SYSPRINT+48,X'10' SYSPRINT OPEN?\n         BZ    ABRET             NO\n         PUT   SYSPRINT,ABMSG     OUTPUT TO SYSPRINT (DONT USE PUTLOG)\n         CLOSE (SYSPRINT)         CLOSE TO SPINOFF\nABRET    MVI   SDWARCDE,0         SET RETURN CODE\n         L     SA@,BWDPTR         RELOAD CALLERS SA\n*\n         RETURN (14,12)           ALLOW ABEND TO CONTINUE\n*\n*\n*              SYNAD RTN FOR LOG DATASET\n*\nLOGSYNAD $SINIT\n         SYNADAF ACSMETH=QSAM\n         MVC   44(4,PARM@),=X'00548000'    WTO PREFIX AND\n         MVC   128(4,PARM@),=X'00004000'   SUFFIX FOR ROUTCDE=2\n         LA    PARM@,44(,PARM@)            JUMP OVER GARBAGE AND BLANKS\n        WTO    MF=(E,(1))     WTO/TPUT\n         SYNADRLS\n         NOP   LOGSYNAB       ABEND AFTER 2ND SYNAD ENTRY\n         MVI   *-3,X'F0'       BY CHANGING NOP TO B\n         $SRET                RETURN TO NSI 1ST TIME ONLY\nLOGSYNAB $AB   68\n         TITLE 'N E T O P - INBOUND EXIT'\n         SPACE\n         USING ISTDPOHD,DA@       ISTDPOHD DSECT ADDRESSING\n         SPACE\n***********************************************************************\n*                                                                     *\n* NAME: INBOUND EXIT                                                  *\n*                                                                     *\n* FUNCTION: MOVE OPERATOR COMMANDS FROM THE REMOTE TERMINALS TO VTAM. *\n*        IT IS THE RPL EXIT SPECIFIED IN THE RECEIVE MACRO ISSUED     *\n*        BY THE MAINLINE, AND REISSUED HERE.                          *\n*                                                                     *\n* DESCRIPTION: CHECKS RCVRPL. DETERMINES HOW RECEIVE COMPLETED.       *\n*        EXTRACTS INFORMATION ABOUT INCOMING MESSAGE FROM RPL. CALLS  *\n*        RCV3270 TO PROCESS INPUT DATA. IF THE MESSAGE IS A COMMAND   *\n*        FOR VTAM, ISSUES SENDCMD. REISSUES RECEIVE MACRO TO GET THE  *\n*        NEXT MESSAGE.                                                *\n*                                                                     *\n* ENTRY POINT: INBOUND                                                *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ RCVRPL                                               *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   @ INBOUND EXIT                                         *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              @ RCVRPL                             RPL@              *\n*              @ TICB FOR THE TERMINAL BEING READ.  TICB@             *\n*              @ DATA AREA WITH THE INPUT DATA      DA@               *\n*              LENGTH OF MESSAGE                    MSGLEN            *\n*              WORK REGISTERS                       WKA,WKB           *\n*              SUBROUTINE RETURN ADDRESS            RET@              *\n*              BASES                           BASE1@,DBASE1@,DBASE2@ *\n*              VTAM CALLS                           SUBR@,RTNCD,RET@  *\n*                                                                     *\n* EXIT, NORMAL: BR 14                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS:RCV3270 TO PROCESS INPUT FROM 3277/3278.                      *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*        VTAM RPL EXIT                                                *\n*                                                                     *\n***********************************************************************\n*\nINBOUND  $XINIT\n         LR    RPL@,PARM@         PUT RPL ADDRESS IN RPL REGISTER\n*\n* ISSUE CHECK TO DETERMINE HOW RECEIVE COMPLETED\n*\n* ACTION CODES EXPECTED - 0 SUCCESSFUL COMPLETION\n*                         8       RETRY\n*                         12      TERMINAL NOT AVAILABLE\n*\n         CHECK RPL=(RPL@)\n         LTR   RTNCD,RTNCD        CHECK COMPLETION\n         BNZ   INRERCV            IF NOT SUCCESSFUL, REISSUE RCV\n*\n* RECEIVE COMPLETED SUCCESSFULLY. OBTAIN THE INFORMATION NECESSARY\n* TO CONTINUE PROCESSING FROM THE RPL.\n*\n         L     TICB@,RPLUSFLD     GET @ TICB FROM USER FIELD\n         L     DA@,RPLAREA        GET @ MSG TEXT FIELD\n         SH    DA@,KPOHLEN        BACK UP FOR ISTDPOHD PREFIX FIELD\n         L     MSGLEN,RPLRLEN     DETERMINE LENGTH OF MESSAGE:\n         L     WKA,RPLBUFL        COMPARE LENGTH OF INPUT,\n         CR    MSGLEN,WKA         AND LENGTH OF DATA AREA.\n         BNH   INLENOK\n         LR    MSGLEN,WKA         USE THE SMALLER OF THE TWO\n*\n* CALL DEVICE DEPENDENT ROUTINE TO PROCESS INPUT.\n*\nINLENOK  $CALL RCV3270            CALL 3270 ROUTINE\n         LR    WKC,RTNCD          SAVE RTNCD\n         B     *+4(RTNCD)         GO TO BRANCH TABLE\n         B     CMDOK              RTNCD=0   GOOD CMD\n         B     ABNORSND           RTNCD=4   GOOD CMD - WKA,WKB PRESET\n*                                  AS MSG PTR AND MSG LENGTH FOR SEND\n         B     ABNORSND           RTNCD=8   ABNORMAL - WKA,WKB PRESET\n*                                  AS MSG PTR AND MSG LENGTH FOR SEND\n         B     INRERCV            RTNCD=12  CLSDST ISSUED AFTER PF3 OR\n*                                  SUPPRESS FURTHER I/O\n         B     INBRET             RTNCD=16  CLOSDOWN POSTED\n*\nABNORSND SEND  RPL=(RPL@),                                             *\n               ACB=ACBTERMS,                                           *\n               AREA=(WKA),                                             *\n               RECLEN=(WKB),                                           *\n               OPTCD=SYN,POST=SCHED,RESPOND=(EX,FME,NRRN)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    ABNOROK            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    ABNORSND            THEN RETRY\nABNOROK  LA    WKA,RCVCMDRS       GOOD CMD?\n         CR    WKC,WKA\n         BNE   INRERCV            NO - GO RE-ISSUE RCV FOR NEXT CMD\n*\n* PREPARE PO HEADER.\n*\nCMDOK    MVI   POHRSVD,0          ZERO HI BYTE\n         MVI   POHSTAT,POHRREQ+POHGEN     INDICATE REPLY REQUESTED,\n*                                 AND ID GENERATED BY PO.\n         SR    WKA,WKA            CLEAR A WORK REGISTER\n         IC    WKA,TIMSGSEQ       OBTAIN MESSAGE SEQUENCE NUMBER\n         LA    WKA,1(,WKA)        INCREMENT BY ONE\n         STC   WKA,TIMSGSEQ       UPDATE TICB\n         MVC   POHID,TIMSGID      COPY ENTIRE ID FIELD TO PO HDR\n*\n* ISSUE SENDCMD(S) TO TRANSFER COMMAND(S) TO VTAM.\n*\n         AH    MSGLEN,KPOHLEN     ADD LENGTH OF PO HEADER TO\n         LA    WKA,DALEN          ENSURE\n         CR    MSGLEN,WKA          VALID\n         BNH   RANGCHK              LENGTH\n         LR    MSGLEN,WKA            FOR SENDCMD\n*\nRANGCHK  TM    POFLAGS,POFRANG    RANGE FORMAT CMD?\n         BZ    SENDCACB           NO\n*        AT THIS TIME RANGCHAR CONTAINS THE ADDR OF THE CHAR, HENCE\n*        THE CALL TO ATOX SPECIFYING A LOAD INSTEAD OF A LOAD ADDRESS\n         $CALL ATOX,,,RANGCHAR    CONVERT RANG CHAR TO HEX IN R15\n         LTR   RTNCD,RTNCD        IS IT GOOD?\n         BNM   RANGCHOK           YES\n         LA    WKA,INVALK         NO - SET UP FOR\n         LA    WKB,INVALKL         INVALID MSG\n         B     ABNORSND            AND SEND IT\nRANGCHOK STH   R15,RANGHEX        STORE FOR INCREMENTING LATER\nSENDCACB TM    TISTATUS,TISREPLY  IS THIS REPLY COMMAND?\n         BZ    SENDCSPO           NO\n         NI    TISTATUS,255-TISREPLY  YES - RESET FLAG\n         L     ACB@,@ACBPPO       PICK UP PPO ACB PTR\n         B     SENDCMD            GO SENDCMD USING ORIGINATING ACB\nSENDCSPO L     ACB@,@ACBSPO       PICK UP SPO ACB PTR\nSENDCMD  SENDCMD RPL=(RPL@),  SEND COMMAND TO VTAM                     *\n               ACB=(ACB@),                                             *\n               AREA=(DA@),        TOP OF ISTDPOHD                      *\n               RECLEN=(MSGLEN),                                        *\n               OPTCD=SYN,POST=RESP\n         LTR   RTNCD,RTNCD        OK?\n         BZ    SENDCMOK          YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    SENDCMD            THEN RETRY\n*\nSENDCMOK TM    POFLAGS,POFDSP    DISPLAY CMD?\n         BZ    OUTRNGCK          NO\n         LH    WKA,TIDSPCT       YES - SENDCMD COMPLETE SO\n         AH    WKA,K1             INCREMENT OUTSTANDING\n         STH   WKA,TIDSPCT         DISPLAY COUNT\nOUTRNGCK TM    POFLAGS,POFRANG    RANGE FORMAT CMD?\n         BZ    INRERCV            NO\n         LH    R15,RANGHEX        YES - PICK UP RANGE CHAR IN HEX\n         CH    R15,RANGEND        END OF RANGE?\n         BNE   RANGOK             NO\n         NI    POFLAGS,255-POFRANG YES - RESET RANGE FORMAT\n         B     INRERCV             AND QUIT SENDCMD LOOP\nRANGOK   LA    R15,1(,R15)         AND INCREMENT,\n         N     R15,=A(15)          WRAPPING FROM X'0F' TO X'00'\n         STH   R15,RANGHEX        SAVE INCREMENTED CHAR FOR NEXT PASS\n         L     WKD,RANGCHAR       YES - PICK UP PTR TO RANGE CHAR\n         STC   R15,0(,WKD)         AND STORE IT IN COMMAND\n         TR    0(1,WKD),TRTAB     TRANSLATE TO ALPHA\n         B     SENDCMD\n*\n* ISSUE RECEIVE MACRO TO GET THE NEXT MESSAGE.\n*\nINRERCV  TM    POFLAGS,POFINTCM   INTERNALLY GENERATED CMD?\n         BZ    RCVGO              NO\n         NI    POFLAGS,255-POFINTCM  YES - RESET FLAG\n         B     INBRET                  AND RETURN\nRCVGO    LA    DA@,RCVDA\n         NI    POFLAGS,255-POFDSP  RESET PO DISPLAY FLAG\nRCVR     RECEIVE RPL=(RPL@),                                           *\n               ACB=ACBTERMS,                                           *\n               AREA=(DA@),                                             *\n               AREALEN=DATXLEN,                                        *\n               EXIT=INBOUND,                                           *\n               OPTCD=(ANY,ASY,TRUNC),                                  *\n               RTYPE=DFSYN\n         LTR   RTNCD,RTNCD        OK?\n         BZ    INBRET             YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVR                THEN RETRY\n         $AB   23                 ELSE ABEND - CANT GO ON IF CANT RCV..\n*\nINBRET   $XRET                    RETURN\n         TITLE 'N E T O P - OUTBOUND EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: OUTBOUND EXIT                                                 *\n*                                                                     *\n* FUNCTION: MOVE MESSAGE FROM VTAM TO THE APPROPRIATE                 *\n*        TERMINALS. IT IS THE RPL EXIT SPECIFIED FOR THE RCVCMD       *\n*        MACROS.                                                      *\n*                                                                     *\n* DESCRIPTION: CHECKS RPL. DETERMINES HOW RCVCMD COMPLETED.           *\n*        EXTRACTS INFORMATION ABOUT THE MESSAGE FROM THE RPL. CALLS   *\n*        IDFIND TO DETERMINE FROM THE PO HEADER, WHAT TERMINAL        *\n*        THE MESSAGE IS FOR. IF THE TERMINAL IS AVAILABLE, CALLS      *\n*        SND3270 TO PROCESS MESSAGE. ISSUES SEND TO TRANSMIT THE      *\n*        MESSAGE. REISSUES RCVCMD TO OBTAIN THE NEXT MESSAGE FROM     *\n*        VTAM.                                                        *\n*                                                                     *\n* ENTRY POINT: OUTBOUND                                               *\n*                                                                     *\n* REGISTER AT ENTRY:                                                  *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ SENDRPL                                              *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   @ OUTBOUND EXIT                                        *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              @ SENDRPL          RPL@                                *\n*              @ TICB             TICB@                               *\n*              @ ISTDPOHD         DA@                                 *\n*              LENGTH OF MESSAGE  MSGLEN                              *\n*              WORK REGISTERS     WKA,WKB                             *\n*              SUBROUTINE RETURN  RET@                                *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: IDFIND                                                       *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*        VTAM RPL EXIT                                                *\n*                                                                     *\n***********************************************************************\n*\nOUTBOUND $XINIT\n         LR    RPL@,PARM@         SET UP POINTER TO RPL\n         MVC   @SAVACB,RPLDACB    SAVE ACB @ FOR RE-ISSUE OF RCVCMD\n*\n* ISSUE CHECK TO DETERMINE HOW RCVCMD COMPLETED.\n*\n* ACTION CODES EXPECTED - 0 SUCCESSFUL COMPLETION\n*                         >0 REISSUE RCVCMD\n*\n         CHECK RPL=(RPL@)         IF RTNCD = SUCCESS\n         LTR   RTNCD,RTNCD        CHECK COMPLETION\n         BNZ   RCVCMDO            THEN\n*\n* RCVCMD COMPLETED SUCCESSFULLY. OBTAIN THE INFORMATION NECESSARY\n* TO CONTINUE PROCESSING FROM THE RPL.\n*\n         L     DA@,RPLAREA        GET @ ISTDPOHD\n         L     MSGLEN,RPLRLEN     DETERMINE LENGTH OF MESSAGE:\n         L     WKA,RPLBUFL        COMPARE LENGTH OF INPUT,\n         CR    MSGLEN,WKA         AND LENGTH OF DATA AREA.\n         BNH   OUTLENOK           USE THE SMALLER OF THE TWO.\n         LR    MSGLEN,WKA\nOUTLENOK SH    MSGLEN,KPOHLEN     SUBTRACT LENGTH OF PO HEADER\n*\n* CALL IDFIND TO IDENTIFY THE DESTINATION TERMINAL FROM PO HEADER.\n*\nOUTID    $CALL IDFIND,0\n         LTR   RTNCD,RTNCD        IF RETURN CODE = 0\n         BNZ   RCVCMDO            THEN...\n*\n* SEE IF THERE IS DATA TO SEND TO TERMINALS.\n*\n         TM    POHSTAT,POHDATA+POHLBL+POHCNTRL      DATA?\n         BNZ   RCVDATA            YES\n         TM    POHSTAT,POHEND     END?\n         BZ    RCVDATA            NO\n         LH    WKA,TIDSPCT        YES - DISPLAY IS COMPLETE\n         SH    WKA,K1             DECREMENT OUTSTANDING DISPLAY COUNT\n         BM    RCVRSTDC      IF -VE SOMETHING WENT WRONG - DONT UPDATE\n         STH   WKA,TIDSPCT          ELSE STORE IT\n         BP    RCVCMDO            IF ZERO,\nRCVRSTDC NI    TIFLAGS,255-(TIFDSP+TIFDSP11+TIFCLUST) RESET DSP FLAGS\n         B     RCVCMDO            RETURN AFTER RCVCMD RE-ISSUED\n*\nRCVDATA  BCTR  MSGLEN,0           REDUCE FOR EX\n         MVC   SENDTIME,BLANX     BLANK OUT TIME FIELD\n*\n* CALL RCVVTAM TO SCAN FOR MESSAGES REQUIRING NETOP ACTION\n*\n         $CALL RCVVTAM\n         LTR   RTNCD,RTNCD        OUTPUT ACCEPABLE?\n         BNZ   RCVCMDO            NO - SUPPRESS IT\n         TM    POHSTAT,POHGEN     SOLICITED REPLY?\n         BZ    LOGIT              NO - GO LOG IT\n*\n         CLI   POHTID,0           RESP TO NETOP INTCMD?\n         BE    LOGIT              YES - LOG IT\n         TM    TIFLAGS,TIFDSP     REPLY TO DISPLAY CMD?\n         BZ    LOGIT              NO - LOG IT\n         TM    TIFLAGS,TIFDSP11   PF11 OVER-RIDE?\n         BO    LOGIT              YES - LOG IT\n         TM    TIFLAGS2,TIF2LOGD  PF2/LOGD OVER-RIDE?\n         BZ    CALSEND            NO - DONT LOG IT\n*\n* PREPARE AND WRITE HARD COPY LOG RECORD.\n*\nLOGIT    $CALL PUTLOG,DATX,(MSGLEN) OUTPUT REC\n*\n* CALL SND3270 TO SEND MSG TO TERMINAL(S).\n*\nCALSEND  $CALL SND3270            CALL SND3270\n*\n*\n* ISSUE RCVCMD TO GET THE NEXT MESSAGE FROM VTAM.\n*\nRCVCMDO  L     ACB@,@SAVACB       PICK UP ACB PTR\nRCVCMDOR RCVCMD RPL=(RPL@),       GET NEXT OUTGOING MESSAGE            *\n               ACB=(ACB@),                                             *\n               AREA=(DA@),                                             *\n               AREALEN=DALEN,                                          *\n               EXIT=OUTBOUND,                                          *\n               OPTCD=ASY\n         LTR   RTNCD,RTNCD        OK?\n         BZ    OUTICHK            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVCMDOR            THEN RETRY\n*\n* RETURN.\n*\nOUTICHK  TM    POFLAGS,POFINTCM   DID RCVVTAM GENERATE A CMD?\n         BZ    OUTRET             NO\n         LA    DA@,RCVDA          YES - USE OTHER DATA AREA\n         LH    MSGLEN,INTBUFL     LOAD LENGTH\n         LR    WKA,MSGLEN         COPY IT\n         BCTR  WKA,0               LESS 1 FOR EX\n         EX    WKA,OUTINTMV       MOVE INTCMD INTO DATA AREA\n         LA    TICB@,NETPTICB     USE NETOP'S TICB\n         L     WKA,RPLARG         PICK UP CID\n         LA    RPL@,DISCRPL       USE SPARE RPL (RCVRPL RE-USED)\n         ST    WKA,RPLARG          WITH CURRENT CID\n         $XCTL INLENOK,INBOUND    XCTL TO INBOUND EXIT TO PROCESS CMD\nOUTRET   $XRET                    RETURN\n*\nOUTINTMV MVC   DATX(*-*),INTBUF   MOVE INTCMD INTO ISTDPOHD\n         TITLE 'N E T O P - LOGON EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: LOGON EXIT                                                    *\n*                                                                     *\n* FUNCTION: TO ESTABLISH CONNECTIONS WITH TERMINALS, INCLUDING THE    *\n*        MASTER TERMINAL.                                             *\n*                                                                     *\n* DESCRIPTION: DETERMINES IF THE PO IS IN A POSITION TO ACCEPT LOGONS *\n*        IF NOT, REJECTS THE TERMINAL. OTHERWISE, ALLOCATES A TICB TO *\n*        THE TERMINAL, FILLS IN THE NIB, AND ACCEPTS THE TERMINAL. IF *\n*        THE NEWLY ACOUIRED TERMINAL IS IN THE MASTER CANDIDATE LIST, *\n*        IT IS MADE THE MASTER IF NONE EXISTED. WHEN NO MASTER IS     *\n*        LOGGED ON ONLY THE SPO ACB IS OPEN.  THE MAINLINE IS POSTED  *\n*        TO OPEN THE PPO ACB WHICH IS USED SOLELY TO RECEIVE UNSOL-   *\n*        ICITED MESSAGES. ALL OTHER VTAM-PO MSGS FLOW VIA ACBSPO.     *\n*              IF OPNDST FAILS IN ATTEMPTING TO ACCEPT THE TERMINAL,  *\n*        THE TICB OBTAINED FOR IT IS DEALLOCATED.                     *\n*                                                                     *\n* ENTRY POINT: LOGON                                                  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ PARAMETER LIST CONTAINING                            *\n*              (1) @ ACBTERMS                                         *\n*              (2) @ TERMINAL NAME                                    *\n*              (3) RESERVED                                           *\n*              (4) LENGTH OF LOGON MESSAGE                            *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   ADDRESS OF LOGON EXIT                                  *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     RPL@                                *\n*              POINTER TO TICB    RICB@                               *\n*              POINTER TO NIB     NIB@                                *\n*              WORK REGS          WKA,WKB                             *\n*              SUBROUTINE RETURN  RET@                                *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: INT3270 TO TRANSMIT 3270 ORDERS THAT SET UP INITIAL SCREEN   *\n*        AND START THE BRACKET.                                       *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              VTAM EXLST EXIT                                        *\n*                                                                     *\n***********************************************************************\n*\nLOGON    $XINIT\n         USING LOGONPRM,PARM@     LOGON PARM DSECT ADDRESSING\n         LA    NIB@,LOGONNIB      SET POINTER TO NIB\n         USING ISTDNIB,NIB@       NIB DSECT ADDRESSING\n         LA    ACB@,ACBTERMS      SET POINTER TO ACB\n         LA    RPL@,LOGONRPL      SET POINTER TO RPL\n         L     WKA,TNAME@         SET POINTER TO TERMINAL NAME\n         MVC   NIBSYM,0(WKA)      MOVE TERMINAL NAME INTO NIB\n         TM    POSTATUS,POSCLSDN  IF PO NOT CLOSING DOWN,\n         BZ    LGNTCHK             GO ALLOCATE TICB\n*\nLGNCLSDN CLSDST RPL=(RPL@),       REJECT THE TERMINAL                  *\n               ACB=(ACB@),                                             *\n               NIB=(NIB@)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    LGNRET             YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    LGNCLSDN            THEN RETRY\n         B     LGNRET             RETURN\n*\n* ALLOCATE A TICB TO THE NEW TERMINAL.\n*\nLGNTCHK  CLI   TICBFCT+1,0        ANY FREE TICB'S ?\n         BNE   LGNALOC            YES - GO ALLOCATE ONE\n         LA    TICB@,VTAMTICB     ADDRESS VTAMTICB\n         B     LGNOTICB           GO SET UP FOR REJECT\nLGNALOC  LA    WKA,TICBCT         FIND FREE TICB\n         LA    TICB@,TICBS+TICBLEN  START AT 1ST AFTER NETPTICB\nLGNLOOP  TM    TISTATUS,TISALLOC  IS IT FREE?\n         BZ    LGNFOUND           IF YES, GO ALLOCATE IT\n         LA    TICB@,TICBLEN(,TICB@)   OTHERWISE, NEXT TICB...\n         BCT   WKA,LGNLOOP        ANY MORE TICB'S TO EXAMINE?\nLGNOTICB LA    WKA,NOTICBM        NO - TICBFCT ERRONEOUS,\n         LA    WKB,NOTICBML        SET UP FOR NO MORE TICB MSG\n         OI    TISTATUS,TISNOMOR  FLAG REJECT REASON IN DUMMY TICB\n         ST    TICB@,NIBUSER      PUT @ TICB IN NIB USER FIELD\n         B     LGNACCEP           GO ACCEPT AND THEN REJECT TERMINAL\nLGNFOUND OI    TISTATUS,TISALLOC  ALLOCATE THE TICB\n         LH    WKA,TICBFCT        DECREMENT\n         BCTR  WKA,0                FREE\n         STH   WKA,TICBFCT            COUNT\n         ST    TICB@,NIBUSER      PUT @ TICB IN NIB USER FIELD\n         C     TICB@,TICBLACT     HIGHEST TICB @?\n         BNH   LGNACCEP           NO\n         ST    TICB@,TICBLACT     YES - SAVE HI-WATER MARK\n*\n* ISSUE OPNDST TO ACCEPT THE TERMINAL.\n*\nLGNACCEP OPNDST RPL=(RPL@),       ACCEPT THE TERMINAL                  *\n               ACB=(ACB@),                                             *\n               NIB=(NIB@),                                             *\n               OPTCD=NQ\n         LTR   RTNCD,RTNCD        IF RTNCD = UNSUCCESSFUL\n         BNZ   LGNRET              THEN FORGET IT\n         TM    TISTATUS,TISNOMOR  REJECT REASON FLAGGED?\n         BO    REJSEND            YES - GO REJECT\n*\n*        IF TERMINAL ACCEPTED, SET UP ITS TICB.\n*\n         MVC   TINAME,NIBSYM      PUT TERMINAL NAME INTO TICB\n         LA    WKA,TINAME+1        SEARCH FOR BLANK\n         LA    WKC,7\nLGNBLOOP CLI   0(WKA),C' '\n         BE    LGNBLANK\n         LA    WKA,1(,WKA)\n         BCT   WKC,LGNBLOOP\nLGNBLANK LA    WKB,8              SUBTRACT FROM\n         SR    WKB,WKC            8 TO GET NAME LEN\n         STH   WKB,TINAMLEN       AND STORE IT\n         MVC   TICID,NIBCID       PUT TERMINAL CID INTO TICB\n         SR    WKA,WKA            ASSIGN NEXT ID TO THIS TERMINAL\n         IC    WKA,POID           INCREMENT LAST ID ASSIGNED\n         LA    WKA,1(,WKA)\n         STC   WKA,POID\n         STC   WKA,TID            MOVE INTO TICB\n         ZAP   TISTKCT,KP0        ZERO STACK ELEMENT COUNT\n         MVI   TIMSGSEQ,0         ZERO MESSAGE NUMBER\n         MVI   TIFLAGS2,TIF2LOGD  SET 'D NET' LOGGING AS DEFAULT\n*\n* PERFORM DEVICE DEPENDENT INITIALIZATION, THEN MARK TERMINAL ACTIVE.\n*\n         OI    RPLRH3,RPLBB       SET RPL FOR BB SEND\n         $CALL INT3270,0          INITIALISE SCREEN\n         LTR   RTNCD,RTNCD        RETURN CODE OK?\n         BNZ   LGNCLS             NO - DUMP IT\n         OI    TISTATUS,TISACT    YES - MARK ACTIVE\n*\n* MARK TERMINAL A MASTER CANDIDATE IF IT IS LISTED IN MATABLE\n*\n         L     WKA,@MATABLE\n         SH    WKA,K2             DECR. BEFORE LOOP ENTRY\n         SR    WKB,WKB            INITIAL INCREMENT ZERO\nMALOOP   LA    WKA,2(WKB,WKA)     GET NEXT ENTRY\n         ICM   WKB,1,0(WKA)       GET ENTRY LENGTH\n         BZ    LGNLOG             END OF TABLE IF ZERO\n         BCTR  WKB,0              - 1 FOR EX\n         EX    WKB,MACLC          SAME TERMINAL NAME?\n         BNE   MALOOP             NO - GO TO NEXT ENTRY\n*\n         OI    TISTATUS,TISMCAND  YES - SET CANDIDATE BIT\n         LH    WKA,TICBMCCT       INCREMENT\n         AH    WKA,K1               MASTER CANDIDATE\n         STH   WKA,TICBMCCT           COUNT\n         TM    POSTATUS,POSHVMA   MASTER LOGGED ON YET?\n         BO    LGNLOG             YES\n         OI    TISTATUS,TISMA     NO - SET MASTER BIT\n         AIF   (NOT &MAROLL).NMAROLL\nMAROLL   OI    TIFLAGS2,TIF2ROLL  SET ROLL FLAG FOR INITIAL MASTER\n.NMAROLL ANOP\n         ST    TICB@,@MATICB      SAVE MASTER TICB @\n         OI    POSTATUS,POSHVMA   INDICATE MASTER HAS LOGGED ON\n         MVC   NTP1NODE,TINAME    MOVE NAME INTO MESSAGE.\n         POST  ECBMAIN,1          POST MAINLINE TO OPEN PPO ACB\nLGNLOG   $CALL PUTLOG,NOTICBLG,*-1  OUTPUT REC\n         B     LGNRET\n*\nREJSEND  SEND  RPL=(RPL@),        SEND REJECT MSG AND CLSDST           *\n               AREA=(WKA),                                             *\n               RECLEN=(WKB)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    WAITREJ            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    REJSEND             THEN RETRY\nWAITREJ  STIMER WAIT,BINTVL=CLSDLAY  ALLOW 1/2 SEC TO READ REJECT MSG\nLGNCLS   LA    WKA,L'OFFMSG-1     EX LENGTH FOR MOVE\n         LA    PARM@,OFFMSG       MSG PTR\n         TM    TISTATUS,TISNOMOR  NO MORE TICBS?\n         BZ    LGNCLPT            NO\n         LA    WKA,L'NOTICBRJ-1   EX LENGTH FOR MOVE\n         LA    PARM@,NOTICBRJ     MSG PTR\nLGNCLPT  $CALL PUTLOG,(PARM@),(WKA) OUTPUT REC\n         $CALL CLSDST         CLSDST TERMINAL AND FREE TICB\n*\nLGNRET   $XRET                    RETURN\n*\nMACLC    CLC   1(*-*,WKA),TINAME  COMPARE TERMINAL NAMES\n         DROP  NIB@,PARM@\n         TITLE 'N E T O P - LOSTERM EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: LOSTERM EXIT                                                  *\n*                                                                     *\n* FUNCTION: TO TAKE APPROPRIATE ACTION WHEN CONTACT HAS BEEN LOST     *\n*        WITH A TERMINAL.                                             *\n*                                                                     *\n* DESCRIPTION: THIS ROUTINE SHOULD EXAMINE THE RETURN CODE IN THE     *\n*        PARAMETER LIST BUT FOR THE MOMENT IT CHECKS FOR MASTER LOST, *\n*        REASSIGNS MASTER IF SO, AND ISSUES CLSDST UNLESS CLOSEDOWN   *\n*        IS IN PROGRESS.                                              *\n*                                                                     *\n* ENTRY POINT: LOSTERM                                                *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ PARAMETER LIST CONTAINING                            *\n*              (1) @ ACBTERMS                                         *\n*              (2) CID                                                *\n*              (3) NIB USERFLD                                        *\n*              (4) CODE INDICATING WHY ENTERED                        *\n*                       CODES ARE:                                    *\n*                         0 - DIAL-LINE DISCONNECTED ON DIAL-IN TERM  *\n*                         4 - DIAL-LINE DISCONNECTED ON DIAL-OUT TERM *\n*                         8 - RESERVED                                *\n*                        12 - MANY REASONS SEE MANUAL - SHUTDOWN      *\n*                        16 - SUCCESSFULLY RECONTACTED                *\n*                        20 - UNCONDITIONAL TERMINATE SELF            *\n*                        24 - POSSIBLE TO RECOVER                     *\n*                        28 - INCOMPLETE OR INVALID SEGEMENTED REQUEST*\n*                        32 - CONDITIONAL TERMINATE SELF              *\n*                        36 - BUFFER LIMIT EXECEEDED                  *\n*                        40 - TEST REQ KEY OR TOLTEP IS TAKING OVER   *\n*                                                                     *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   ADDRESS OF LOSTERM EXIT                                *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     RPL@                                *\n*              POINTER TO TICB    RICB@                               *\n*              WORK REGS          WKA,WKB                             *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* ATTRIBUTES: VTAM EXLST EXIT                                         *\n*                                                                     *\n***********************************************************************\n*\nLOSTERM  $XINIT\n         USING LOSTPARM,PARM@     LOSTERM PARM DSECT ADDRESSING\n         TM    POSTATUS,POSCLSDN  IF PO IS CLOSING DOWN, FORGET IT\n         BO    LOSTRET\n         LA    RPL@,DISCRPL       SET POINTER TO RPL\n         L     CID,LOSTCID        PICK UP CID\n         ST    CID,RPLARG         DROP IN RPL\n         L     TICB@,LOSTUSER     SET TICB PTR\n         L     ACB@,LOSTACB       PICK UP ACB PTR\n         L     WKA,LOSTCODE      PICK UP LOST REASON CODE\n         CVD   WKA,WORK          CONVERT DEC\n         OI    WORK+7,X'0F'    FIX SIGN UP\n         UNPK  LOSMSGRC(3),WORK+6(2)  UNPACK\n         MVI   LOSMSGRC,C' '   BLANK LEADING ZERO\n         $CALL PUTLOG,LOSMSG,LOSMSGL-1 OUTPUT REC\n         TM    TISTATUS,TISMA     MASTER?\n         BZ    LOSTCLS            NO - JUST CLSDST RELEASE\n         $CALL MAFIND             YES - FIND ALT MASTER\n*\nLOSTCLS  ST    ACB@,RPLDACB       SET UP ACB @\n         $CALL CLSDST             GO ISSUE CLSDST AND FREE UP TICB\n*\nLOSTRET  $XRET                    RETURN\n         TITLE 'N E T O P - RELREQ EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: RELREQ EXIT                                                   *\n*                                                                     *\n* FUNCTION: TO TAKE APPROPRIATE ACTION WHEN TERMINAL REQUESTED.       *\n*                                                                     *\n* DESCRIPTION: THIS ROUTINE SHOULD EXAMINE THE RETURN CODE IN THE     *\n*        PARAMETER LIST SET UP BY VTAM AND TAKE APPROPRIATE RECOVERY  *\n*        ACTION.                                                      *\n*                                                                     *\n* ENTRY POINT: RELREQ                                                 *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ PARAMETER LIST CONTAINING                            *\n*              (1) @ ACBTERMS                                         *\n*              (2) @ TERMINAL NAME                                    *\n*                                                                     *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   ADDRESS OF RELREQ EXIT                                 *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     RPL@                                *\n*              POINTER TO TICB    RICB@                               *\n*              POINTER TO NIB     NIB@                                *\n*              WORK REGISTER      WKA,WKB                             *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*              SAVE AREA ADDRESS  SA@                                 *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* ATTRIBUTES: VTAM EXLST EXIT                                         *\n*                                                                     *\n***********************************************************************\n*\nRELREQ   $XINIT\n         USING LOGONPRM,PARM@     RELREQ PARM DSECT ADDRESSING\n         LA    NIB@,LOGONNIB      SET POINTER TO NIB\n         USING ISTDNIB,NIB@       NIB DSECT ADDRESSING\n         LA    RPL@,DISCRPL       SET POINTER TO RPL\n         L     ACB@,LGNACB@       PICK UP ACB PTR\n         L     WKA,TNAME@         SET POINTER TO TERMINAL NAME\n         MVC   NIBSYM,0(WKA)      MOVE TERMINAL NAME INTO NIB\n         LA    WKA,RPLARG         CID PTR\nRLRQINQR INQUIRE RPL=(RPL@),                                           *\n               ACB=(ACB@),                                             *\n               NIB=(NIB@),                                             *\n               AREA=(WKA),AREALEN=4,                                   *\n               OPTCD=CIDXLATE\n         LTR   RTNCD,RTNCD        OK?\n         BZ    RLRQSEND          YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RLRQINQR            THEN RETRY\n         B     RLRQINV             ELSE FORGET IT\nRLRQSEND NI    RPLEXTDS,255-RPLNIB TURN OFF NIB FLAG (NOW A CID)\n         SEND  RPL=(RPL@),        SEND REJECT MSG AND CLSDST           *\n               AREA=RLRQM,                                             *\n               RECLEN=RLRQML,                                          *\n               OPTCD=SYN,POST=RESP,RESPOND=(EX,FME,NRRN)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    RLRQUS             YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RLRQSEND            THEN RETRY\n         B     RLRQINV             ELSE FORGET RELEASE\nRLRQUS   L     TICB@,RPLUSFLD     GET TICB PTR\n*\n         TM    TISTATUS,TISMA     MASTER?\n         BO    RLRQINV            YES - INVALID RELEASE\nRLRQCLS  STIMER WAIT,BINTVL=CLSDLAY  ALLOW 1/2 SEC TO READ RELEASE MSG\n         $CALL CLSDST             GO ISSUE CLSDST AND FREE UP TICB\n*\n         LA    WKA,6              EX LENGTH FOR SHORT MOVE\n         B     RLRQPUT\n*\nRLRQINV  LA    WKA,L'RELMSG       EX LENGTH FOR LONG MOVE\n*        B     RLRQPUT\n*\nRLRQPUT  $CALL PUTLOG,RELMSG,(WKA)  OUTPUT REC\nRLRQRET  $XRET                    RETURN\n         TITLE 'N E T O P - TPEND EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: TPEND EXIT                                                    *\n*                                                                     *\n* FUNCTION: TO NOTIFY PO OF VTAM SHUTDOWN.                            *\n*                                                                     *\n* DESCRIPTION: SAVES REASON CODE AND POSTS CLOSEDOWN ECB.             *\n*                                                                     *\n* ENTRY POINT: TPEND                                                  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R1    @ PARAMETER LIST CONTAINING:                           *\n*              (1) @ ACBTERMS                                         *\n*              (2) REASON CODE                                        *\n*        R14   RETURN ADDRESS                                         *\n*        R15   TPEND ENTRY POINT ADDRESS                              *\n*                                                                     *\n* EXIT, NORMAL: BR 14                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              VTAM EXLST EXIT                                        *\n*                                                                     *\n***********************************************************************\n*\nTPEND    $XINIT SA=ENDSA\n         USING TPENDPRM,PARM@     TPEND PARM DSECT ADDRESSING\n         L     WKA,TPREASON       PICK UP SAVE REASON CODE\n         $CALL CVHX               CONVERT AND\n         MVC   TPEMSGRC,HEX        MOVE INTO LOG TEXT\n         LA    TICB@,VTAMTICB     ADDRESS VTAMTICB\n         $CALL PUTLOG,TPEMSG,TPEMSGL-1 OUTPUT REC\n         POST  ECBMAIN            INDICATE PO MUST CLOSE DOWN\n         $XRET                    RETURN TO VTAM\n         DROP  PARM@\n         TITLE 'N E T O P - ERROR EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: SYNAD/LERAD                                                   *\n*                                                                     *\n* FUNCTION: TO TAKE APPROPRIATE ACTION WHEN A LOGICAL OR PHYSICAL     *\n*        ERROR IS ENCOUNTERED  WITH A TERMINAL. THIS IS BOTH A        *\n*        SYNAD AND LERAD EXIT.                                        *\n*                                                                     *\n* DESCRIPTION: THIS ROUTINE SHOULD EXAMINE THE RETURN CODE IN         *\n*        REGISTER 0 AS SET UP BY VTAM AND TAKE APPROPRIATE RECOVERY   *\n*        ACTION.                                                      *\n*                                                                     *\n* ENTRY POINT: ERROR                                                  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    RECOVERY ACTION RETURN CODE                            *\n*        R1    @RPL                                                   *\n*                                                                     *\n*        R2-12 UNDETERMINED                                           *\n*        R13   UNMODIFIED SINCE MACRO ISSUED - CALLERS SA, SAVED      *\n*        R14   RETURN ADDRESS IN VTAM, SAVED                          *\n*        R15   ADDRESS OF ERROR EXIT                                  *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE (IF ANY ARE MADE TO VTAM ANOTHER SA MUST BE CHAINED)    *\n*                                                                     *\n* ATTRIBUTES: VTAM EXLST EXIT (BOTH SYNAD AND LERAD)                  *\n*                                                                     *\n* NOTE:       ERRSAVE%+C% POINTS TO MACRO IN ERROR                    *\n*                                                                     *\n***********************************************************************\n*\nERROR    $XINIT SA=ERRORSA    CHAIN SAVE AREAS\n         LR    RPL@,PARM@     SET RPL PTR\n         CLI   RPLRTNCD,USFLOGIC  LOGICAL ERROR?\n         BE    LERERR         YES\n         CLI   RPLRTNCD,USFENVER  ENVIRONMENT ERROR?\n         BE    ENVERR         YES\n         B     ERRLOG         LOG AND RETURN TO NSI\n*\n*        ENVIRONMENT ERRORS\n*\nENVERR   CLI   RPLFDB2,USFVOFOC  REQUEST CANCELLED BY VARY?\n         BE    ERRLOG            YES - LOG AND RETURN TO NSI\n         CLI   RPLFDB2,USFTANAV  TERMINAL NOT AVAILABLE?\n         BE    ERRLOG            YES - LOG AND RETURN TO NSI\n         CLI   RPLFDB2,X'0D'     ACB BEEN CLOSED?\n         BE    ERRLOG            YES - LOG AND RETURN TO NSI\nENVABEND TM    POSTATUS,POSCLSDN+POSABEND  CLOSEDOWN OR ABEND?\n         BNZ   ERRLOG         YES - JUST LOG IT AN GO NSI\n         SR    RTNCD,RTNCD    YES - SET REASON CODE\n         IC    RTNCD,RPLFDB2   TO FEEDBACK2 VAL\n         $AB   (ACTCD)          AND ABEND\n*\n*        LOGICAL ERRORS\n*\nLERERR   CLI   RPLFDB2,USFRNOCE  CMD SYNTAX ERROR?\n         BE    ERRET             YES - RETURN TO NSI\n         CLI   RPLFDB2,USFRNOSE  REPLY CMD SYNTAX ERROR?\n         BE    ERRET             YES - RETURN TO NSI\n         CLI   RPLFDB2,USFSDNP   SEND STILL PENDING?\n         BE    ERRLOG            YES - LOG AND RETURN TO NSI\n*\nLERABEND TM    POSTATUS,POSCLSDN+POSABEND  CLOSEDOWN OR ABEND?\n         BNZ   ERRLOG         YES - JUST LOG IT AN GO NSI\n         SR    RTNCD,RTNCD    SET REASON CODE\n         IC    RTNCD,RPLFDB2   TO FEEDBACK2 VAL\n         $AB   (ACTCD)\n*\nERRLOG   IC    WKA,RPLREQ     GET REQ CODE\n         $CALL CVHX            CONVERT\n         MVC   ERREQ(2),HEX     AND MOVE IN\n         IC    WKA,ACTCD      GET ACTION CODE\n         $CALL CVHX            CONVERT\n         MVC   ERRTNCD(2),HEX   AND MOVE IN\n         IC    WKA,RPLFDB2    PICK UP FEEDBACK CODE\n         $CALL CVHX            CONVERT\n         MVC   ERFDBK2(2),HEX   AND MOVE IN\n         IC    WKA,RPLSSEI    PICK UP SSENSEI CODE\n         $CALL CVHX            CONVERT\n         MVC   ERSENEI(2),HEX   AND MOVE IN\n         IC    WKA,RPLSSMI    PICK UP SSENSMI CODE\n         $CALL CVHX            CONVERT\n         MVC   ERSENMI(2),HEX   AND MOVE IN\n         IC    WKA,RPLESR1    PICK UP 1ST BYTE OF SENSE CODE\n         $CALL CVHX            CONVERT\n         MVC   ERSENU1(2),HEX   AND MOVE IN\n         IC    WKA,RPLESR2    PICK UP 2ND BYTE OF SENSE CODE\n         $CALL CVHX            CONVERT\n         MVC   ERSENU2(2),HEX   AND MOVE IN\n         OI    POSTATUS,POSSEND TELL TSO USERS ABOUT ABNORMAL CONDITION\n         L     TICB@,RPLUSFLD -> CURRENT TICB\n         LA    WKA,DUMTICB    VALIDATE\n         CR    WKA,TICB@       TICB PTR\n         BNH   ERRTCHK          IF INVALID\n         LA    TICB@,BLANX       SUBSTITUTE BLANX FOR TINAME\n         B     ERRPLOG            IN LOG MSG\nERRTCHK  LA    WKA,TICBS\n         CR    WKA,TICB@\n         BNL   ERRPLOG\n         LA    TICB@,BLANX\nERRPLOG  $CALL PUTLOG,ERMSG,ERMSGL-1 OUTPUT RECORD\n         CLI   RPLSSEI,RPLSTATI   STATE ERROR?\n         BNE   ERRET               NO\n         L     R1,=A(LERRRPL+8)    YES => SAVE\n         MVC   0(112,R1),IFGRPL            READ ONLY RPL\n         ABEND 405,DUMP                              & DUMP\nERRET    $XRET                    RETURN TO NSI VIA VTAM\n         TITLE 'N E T O P - RESPONSE EXIT'\n***********************************************************************\n**                                                                   **\n**       NAME:  RESP EXIT                                            **\n**                                                                   **\n**       DESCRIPTION:  A RESPONSE IS RECEIVED FROM A LOGICAL         **\n**             UNIT FOR WHICH NO RECEIVE IS OUTSTANDING THAT         **\n**             SPECIFIES  RTYPE=RESP.                                **\n**                                                                   **\n**       ENTRY POINT:  RESP                                          **\n**                                                                   **\n**       REGISTERS:                                                  **\n**                                                                   **\n**                                                                   **\n**       AT ENTRY:                                                   **\n**                                                                   **\n**       R1   CONTAINS THE ADDRESS OF A 5 WORD PARAMETER LIST.       **\n**                                                                   **\n**            WORD 1 CONTAINS THE ADDRESS OF THE ACB FOR THE         **\n**            APPLICATION PROGRAM TO WHICH THE LOGICAL UNIT WAS      **\n**            CONNECTED.                                             **\n**                                                                   **\n**            WORD 2 CONTAINS THE CID OF THE LOGICAL UNIT.           **\n**                                                                   **\n**            WORD 3 CONTAINS THE VALUE THAT WAS PLACED IN THE       **\n**            USERFLD OF THE NIB ASSOCIATED WITH THE LOGICAL         **\n**            UNIT (THE NIB SPECIFIED WHEN THE LOGICAL UNIT WAS      **\n**            CONNECTED).                                            **\n**                                                                   **\n**            WORD 4 IS NOT USED.                                    **\n**                                                                   **\n**            WORD 5 CONTAINS THE ADDRESS OF A VTAM-SUPPLIED         **\n**            RPL IN READ-ONLY STORAGE. THE RPL CAN BE COPIED        **\n**            OR DISPLAYED BY USING THE SHOWCB AND TESTCB MACROS     **\n**            BUT CANNOT BE USED IN RECEIVE OR SEND MACROS.          **\n**                                                                   **\n**                                                                   **\n**       R14  CONTAINS THE ADDRESS IN VTAM TO WHICH THE RESP         **\n**            EXIT MUST BRANCH WHEN IT IS FINISHED PROCESSING.       **\n**                                                                   **\n**       R15  CONTAINS THE ADDRESS OF THE RESP EXIT ROUTINE.         **\n**                                                                   **\n**                                                                   **\n**       THE EXIT DOES NOT HAVE TO ISSUE A RECEIVE TO GET THE        **\n**       RESPONSE; THE COMMAND RECEIVED IS DETERMINED BY             **\n**       EXAMINING THE READ-ONLY RPL.                                **\n**                                                                   **\n**                                                                   **\n**       EXIT NORMAL:  BR 14                                         **\n**                                                                   **\n**       EXIT ERROR:  NONE                                           **\n**                                                                   **\n**       CALLS:   CVHX, PUTLOG                                       **\n**                                                                   **\n**       CALLED BY:  VTAM                                            **\n**                                                                   **\n**       ATTRIBUTES:                                                 **\n*             SERIALLY REUSABLE                                       *\n*              VTAM EXLST EXIT                                        *\n*                                                                     *\n***********************************************************************\n*\nRESP     $XINIT\n         USING LOSTPARM,PARM@     LOSTERM PARM DSECT ADDRESSING\n         STM   R0,R1,ABREGS\n         L     RPL@,RESPRPL       LOAD READ-ONLY RPL PTR\n         L     TICB@,LOSTUSER     LOAD TICB PTR\n         IC    WKA,RPLREQ     GET REQ CODE\n         $CALL CVHX            CONVERT\n         MVC   REREQ(2),HEX     AND MOVE IN\n         IC    WKA,RPLRTNCD   GET ACTION CODE\n         $CALL CVHX            CONVERT\n         MVC   RERTNCD(2),HEX   AND MOVE IN\n         IC    WKA,RPLFDB2    PICK UP FEEDBACK CODE\n         $CALL CVHX            CONVERT\n         MVC   REFDBK2(2),HEX   AND MOVE IN\n         IC    WKA,RPLSSEI    PICK UP SSENSEI CODE\n         $CALL CVHX            CONVERT\n         MVC   RESENEI(2),HEX   AND MOVE IN\n         IC    WKA,RPLSSMI    PICK UP SSENSMI CODE\n         $CALL CVHX            CONVERT\n         MVC   RESENMI(2),HEX   AND MOVE IN\n         IC    WKA,RPLESR1    PICK UP 1ST BYTE OF SENSE CODE\n         $CALL CVHX            CONVERT\n         MVC   RESENU1(2),HEX   AND MOVE IN\n         IC    WKA,RPLESR2    PICK UP 2ND BYTE OF SENSE CODE\n         $CALL CVHX            CONVERT\n         MVC   RESENU2(2),HEX   AND MOVE IN\n         OI    POSTATUS,POSSEND TELL TSO USERS ABOUT ABNORMAL CONDITION\n         $CALL PUTLOG,REMSG,REMSGL-1 OUTPUT RECORD\n         CLI   RPLRTNCD,X'04' IF RTNCD = 04\n         BNE   RESPRET\n         CLI   RPLFDB2,X'04'    AND FDB2 = 04\n         BNE   RESPRET\n         ABEND 404,DUMP           THEN GIVE US A DUMP\nRESPRET  $XRET                    RETURN TO NSI VIA VTAM\n*\n         DROP  PARM@\n         EJECT\n         SPACE 20\n*                        SUBROUTINES\n*\n*\n*        EACH IS INDEPENDENTLY BASED, EXIT BEING VIA $SRET MACRO.\n*        WHERE MULTIPLE ENTRY POINTS OCCUR, BASE AND RETURN SAVE WORDS\n*        OF THE LAST EP ONLY ARE GENERATED;  PREVIOUS $SINIT MACROS\n*        REFER TO IT VIA THE  SARET=  OPERAND.\n*\n*\n         USING ISTDPOHD,DA@       SET UP ISTDPOHD DSECT ADDRESSING\n         TITLE 'N E T O P - SHOWCDS SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: SHOWCDS                                                       *\n*                                                                     *\n* FUNCTION: MOVE ACB ERROR FEEDBACK INFORMATION INTO MESSAGE NTP10.   *\n*        THIS MESSAGE WILL SHOW IN DETAIL HOW OPEN OR CLOSE           *\n*        FAILED.                                                      *\n*                                                                     *\n* DESCRIPTION: CONVERTS RETURN CODE AND ERROR CODE (ACBERFLG) TO      *\n*        HEX DIGITS AND MOVES THEM INTO MESSAGE NTP10.                *\n*                                                                     *\n* REGISTERS:                                                          *\n*                                                                     *\n*              RC FROM OPEN/CLOSE WKA                                 *\n*              @ ACB              ACB@                                *\n*              RETURN ADDRESS     RET@                                *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n*        CHANGED:  R6                                        WKA      *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLED BY: MAINLINE                                                 *\n*                                                                     *\n* CALLS: CVHX TO CONVERT CODES TO HEX DIGITS                          *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              SUBROUTINE INTERNAL TO MAINLINE                        *\n*                                                                     *\n***********************************************************************\n*\nSHOWCDS  $SINIT\n         $CALL CVHX               CONVERT RETURN CODE TO HEX\n         MVC   NTP10RC,HEX        MOVE INTO MESSAGE\n         SR    WKA,WKA            CLEAR REGISTER\n         IC    WKA,ACBERFLG       OBTAIN ERROR CODE\n         $CALL CVHX               CONVERT TO HEX\n         MVC   NTP10EC,HEX        MOVE INTO MESSAGE\n         $SRET                    RETURN\n         TITLE 'N E T O P - CVHX SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: CVHX                                                          *\n*                                                                     *\n* FUNCTION: CONVERT A BYTE TO HEXADECIMAL CHARACTER REPRESENTATION    *\n*           AND RETURN TO CHARACTERS TP CALLER.                       *\n*                                                                     *\n* DESCRIPTION: CONVERTS ONE BYTE CODE IN REGISTER 8 AND STORE TWO     *\n*              HEX DIGITS CHARACTERS IN AREA LABELLED HEX.            *\n*                                                                     *\n* REGISTERS:                                                          *\n*                                                                     *\n*              LOW ORDER BYTE CONVERTED  WKA                          *\n*              RETURN ADDRESS     RET@                                *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n*        CHANGED:  NONE *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLED BY: SHOWCDS                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              SUBROUTINE INTERNAL TO SHOWCDS                         *\n*                                                                     *\n***********************************************************************\n*\nCVHX     $SINIT\n         STC   WKA,HEXTOBE       STORE FOR UNPK\n         UNPK  HEX(3),HEXTOBE    UNPACK TWO BYTES\n         TR    HEX(2),TRTAB-240  MAKE IT PRINTABLE\n         $SRET                    RETURN\n         TITLE 'N E T O P - RCVVTAM SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: RCVVTAM                                                       *\n*                                                                     *\n* FUNCTION: TO FILTER UNSOLICITED VTAM MESSAGES FOR CONDITIONS        *\n*        REQUIRING NETOP ACTION, AND FOR REPEATING MESSAGES.          *\n*                                                                     *\n* DESCRIPTION: CURRENTLY THE MSG ID IS CLI'D FOR A FEW MATCHES;       *\n*        EVENTUALLY A CONTROL BLOCK SEARCH LOOP WILL BE IMPLEMENTED.  *\n*        ONCE A MATCH IS FOUND, A COMMAND IS BUILT IN INTBUF IN PFKEY *\n*        FORMAT AND THE POFINTCM FLAG IS TURNED ON. FURTHER ENHANCE-  *\n*        MENTS WILL ALLOW COMMAND CHAINS TO BE GENERATED BY A SINGLE  *\n*        UNSOLICITED MESSAGE.                                         *\n*           REPEATING MESSAGES ARE SUPPRESSED, THE MSG# FIELD BEING   *\n*        UPDATED WITH A REPEAT COUNT TO REGISTER RECEIPT.             *\n*                                                                     *\n* ENTRY POINT: RCVVTAM                                                *\n*                                                                     *\n* INPUT REGISTERS:                                                    *\n*                                                                     *\n*        R4    ADDRESS OF ISTDPOHD DA@                                *\n*        R9    SUBROUTINE RETURN  RET@                                *\n*        OTHERS IGNORED                                               *\n*                                                                     *\n* OUTPUT: INTBUF CONTAINS APPROPRIATE CMD                             *\n*         POFLAGS POFINTCM SET TO REFLECT SEARCH RESULT               *\n*                                                                     *\n*        REGISTERS CHANGED:                                           *\n*                                                                     *\n*        NONE\n*                                                                     *\n* CALLED BY: OUTBOUND                                                 *\n*                                                                     *\n* CALLS:     TSOUID                                                   *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*        SUBROUTINE INTERNAL TO OUTBOUND EXIT                         *\n*                                                                     *\n***********************************************************************\n*\nRCVVTAM $SINIT\n         TM    POHSTAT,POHGEN     SOLICITED REPLY?\n         BO    RCVVSOLC           YES\n         EX    MSGLEN,RCVUNCLC    NO - REPEATING MSG?\n         BNE   RCVUN               NO - NOT THE SAME\n         AP    UNSOL#,KP1          YES - INCREMENT UNSOL MSG #\n         CP    UNSOL#,MAXUNSOL    REACHED MAX?\n         BE    RCVVNODE           YES - INACT NODE\n         B     RCVV852\nRCVUN    ZAP   UNSOL#,KP1         RESET UNSOL MSG #\n         EX    MSGLEN,RCVUNMOV    SAVE UNSOL MSG FOR COMPARISON\n*\nRCVV852  CLC   DAMSG#,=C'852'     CLUSTER UNAVAILABLE MSG?\n         BNE   RCVV342            NO\n         MVC   INTNODE,DA852NOD   SET NODENAME\n         B     RCVVINAC           YES - INACT,I\n         SPACE 1\nRCVV342  CLC   DAMSG#,=C'342'     UNABLE TO ESTABLISH SESSION?\n         BNE   RCVV400            NO => NEXT MSG CHECK\n         CLC   DA342RC(2),=CL2'12' APPLICATION INACTIVE??\n         BE    RCVVRET4           YES => SUPPRESS MSG\n         B     RCVVRET0           NO  => EXIT\n         SPACE 1\nRCVV400  CLC   DAMSG#,=C'400'     TERMINATION IN PROGRESS MSG?\n         BNE   RCVV804            NO => NEXT MSG CHECK\n         CLC   DA400APL(3),=CL3'TSO' APPLID=TSO?\n         BE    RCVVRET4           YES => SUPPRESS MSG\n         B     RCVVRET0           NO  => EXIT\n         SPACE 1\nRCVV804  CLC   DAMSG#,=C'804'     CLOSE IN PROCESS MSG?\n         BNE   RCVV805            NO => NEXT MSG CHECK\n         CLC   DA804APL(3),=CL3'TSO' APPLID=TSO?\n         BE    RCVVRET4           YES => SUPPRESS MSG\n         B     RCVVRET0           NO  => EXIT\n         SPACE 1\nRCVV805  CLC   DAMSG#,=C'805'     CLOSE COMPLETE MSG?\n         BNE   RCVV285            NO => NEXT MSG CHECK\n         CLC   DA805APL(3),=CL3'TSO' APPLID=TSO?\n         BE    RCVVRET4           YES => SUPPRESS MSG\n         B     RCVVRET0           NO  => EXIT\n         SPACE 1\nRCVV285  CLC   DAMSG#,=C'285'     DUMP COMPLETE MSG?\n         BE    RCVV2856           YES\n         CLC   DAMSG#,=C'286'     DUMP PARTIALLY COMPLETE MSG?\n         BNE   RCVV413            NO\nRCVV2856 MVC   INTDNODE,DA285NOD  SET NODENAME\n         MVC   INTFDUMP,FDUMP     SET MODIFY CMD\n         LA    WKA,L'FDUMP        SET CMD LENGTH\n         OI    POSTATUS,POSSEND   FLAG SEND TO TSO USERS\n         B     RCVVOSCM           OS COMMAND\n*\nRCVV413  CLC   DAMSG#,=C'413'     VTAM DUMPING MSG?\n         BNE   RCVV209            YES\n         OI    POSTATUS,POSSEND   FLAG SEND TO TSO USERS\n         B     RCVVRET0\n*\nRCVV209  CLC   DAMSG#,=C'209'     INTERVENTION REQD MSG?\n         BNE   RCVVRET0           NO\n         CLC   DABTUCMD,=C'020A'  YES - WRITE CONTACT?\n         BNE   RCVVRET0           NO\nRCVVNODE MVC   INTNODE,DAMSGNOD   SET NODENAME\n         B     RCVVINAC           YES - INACT,I\n*\n*\n*        INACT REQUIRED\n*\nRCVVINAC MVI   INTAID,PF6         SET 'INACT,I' PFKEY\n         LA    WKA,L'INTAID+L'INTNODE  SET INTERNAL CMD BUF LENGTH\n         B     RCVVRETI\n*\n*        OS CMD REQUIRED\n*\nRCVVOSCM MVI   INTAID,PF5         SET OS CMD PFKEY\n         LA    WKA,L'INTAID+L'INTNODE(,WKA)  INCREMENT CMD BUF LENGTH\n*        B     RCVVRETI\n*\n*        INTERNAL CMD COMMON CODE\n*\nRCVVRETI OI    POFLAGS,POFINTCM   FLAG CMD GENERATED\n         STH   WKA,INTBUFL\n         B     RCVVRET0\n*\n*\n*        SOLICITED MESSAGE COMPARES\n*\nRCVVSOLC TM    TIFLAGS,TIFCLUST   CLUSTER ONLY FLAG SET?\n         BZ    RCVV082            NO\nRCVV080  CLC   DAMSG#,=C'080'     CLUST/TERM LINE OF DISPLAY RESPONSE?\n         BNE   RCVV089            NO\n         LA    WKA,DAMSGNOD       YES - SCAN FOR\n         LA    WKB,3               AND BLANK OUT\n         SR    WKC,WKC              ANY NON-CLUSTER\nRCVVCLOO CLI   0(WKA),C'&CLUST'      STATUS FIELD\n         BNE   RCVVNCLU\n         LA    WKC,1(,WKC)\n         B     RCVVCLND\nRCVVNCLU MVC   0(DAM80TXL,WKA),BLANX\nRCVVCLND LA    WKA,DAM80NXL(,WKA)\n         BCT   WKB,RCVVCLOO\n         LTR   WKC,WKC            IF NO CLUSTER STATUS FIELDS\n         BZ    RCVVRET4            ARE DETECTED, SUPPRESS OUTPUT\n         OI    POFLAGS,POFHINT    FLAG FOR HI INTENSITY TO MAKE IT\n         B     RCVVRET0            EASIER TO SEE\n*\nRCVV089  CLC   DAMSG#,=C'089'     SNA CLUST/TERM DISPLAY RESPONSE?\n         BNE   RCVV082            NO\n         CLI   DAMSGNOD,C'&CLUST' CLUSTER?\n         BNE   RCVVRET4           NO - SUPPRESS OUTPUT\n         OI    POFLAGS,POFHINT    FLAG FOR HI INTENSITY TO MAKE IT\n         B     RCVVRET0            EASIER TO SEE\n*\nRCVV082  CLC   DAMSG#,=C'082'     3RD LINE OF DISPLAY RESPONSE?\n         BNE   RCVVRET0           NO\n         TM    TISTATUS,TISUID    USERID FOUND FLAG ON (? TYPE CMD)\n         BZ    RCVTSOCK           NO\n         NI    TISTATUS,255-TISUID  YES - RESET FLAG\n         MVC   NEWUID,TIABR       MOVE IN USERID\n         LH    WKC,TIABR+8        POINT TO HEX ASID\n         B     RCVVASID           GO FILL REST OF NEW IST082 LINE\nRCVTSOCK CLC   DAM82ALC(3),=C'TSO'    ALLOC= TSONNNN ?\n         BNE   RCVVRET0            NO\n         TM    POSTATUS,POSTEST    YES - RUNNING UNDER TEST?\n         BO    RCVVRET0             YES - DONT CONVERT\n         MVC   WORK(4),=C'0000'    VERIFY\n         MVN   WORK(4),DAM82ALC+3   FOR VALID\n         CLC   WORK(4),DAM82ALC+3    NUMERICS\n         BNE   RCVVRET0            IF NOT, DONT CONVERT TSOXXXX\n         PACK  WORK,DAM82ALC+3(4)   NO - PACK TCAS ID\n         CVB   PARM@,WORK           LOAD TCAS APPL INDEX\n         $CALL TSOUID,(PARM@)     GO CONVERT TSONNNN TO USERID\n         USING ASCB,RTNCD              ESTABLISH ADDRESSABILITY TO ASCB\n         LTR   RTNCD,RTNCD             ASCB PTR RETURNED?\n         BZ    RCVVRET0                NO\n         L     WKA,ASCBJBNS            YES - PICK UP USERID PTR\n         MVC   NEWUID,0(WKA)             MOVE\n         LH    WKC,ASCBASID               IN\nRCVVASID CVD   WKC,WORK                    NEW\n         MVC   WORK(4),=X'40202120'         VALUES\n         ED    WORK(4),WORK+6\n         CLI   WORK+1,C' '\n         BNE   RCVVUNBL\n         MVI   WORK+1,C'('\n         B     RCVVMVID\nRCVVUNBL MVI   WORK,C'('\nRCVVMVID MVC   NEWASID,WORK\n         MVC   NEWDEV,DAM82DEV          MOVE IN\n         MVC   NEWALC,DAM82ALC           EXISTING\n         MVC   NEWSIM,DAM82SIM            VALUES\n         MVC   DAMSGNOD(NEW082L),NEW082  MOVE IN NEWLY FORMATTED MSG\n         LA    MSGLEN,NEW082L+(DAMSGNOD-DATX)  SET NEW LENGTH\n         B     RCVVRET0\n         DROP  RTNCD\n*\nRCVVRET4 LA    RTNCD,4            SUPPRESS OUTPUT OF THIS MSG\n         B     RCVVRET\n*\nRCVVRET0 SR    RTNCD,RTNCD        OUTPUT THIS MSG\nRCVVRET  $SRET                    RETURN\n*\nRCVUNMOV MVC   UNSOL(*-*),DATX         MOVE INTO UNSOL AREA\nRCVUNCLC CLC   UNSOL(*-*),DATX         COMPARE TO UNSOL AREA\n         TITLE 'N E T O P - RCV3270 SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: RCV3270                                                       *\n*                                                                     *\n* FUNCTION: ANALYZE THE INPUT OBTAINED FROM THE OPERATOR AND DETERMINE*\n*           IF THERE IS ANYTHING TO SEND TO VTAM.                     *\n*                                                                     *\n* DESCRIPTION:                                                        *\n*                                                                     *\n* ENTRY POINT: RCV3270                                                *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        DA@       ISTDPOHD ADDRESS                                   *\n*        MSGLEN    MESSAGE LENGTH                                     *\n*        RET@      RETURN ADDRESS                                     *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              @ TICB FOR THE TERMINAL BEING READ.  TICB@             *\n*              @ DATA AREA WITH THE INPUT DATA      DA@               *\n*              LENGTH OF MESSAGE                    MSGLEN            *\n*              WORK REGISTERS                       WKA,WKB           *\n*              SUBROUTINE RETURN ADDRESS            RET@              *\n*              BASES                           BASE1@,DBASE1@,DBASE2@ *\n*              VTAM CALLS                           SUBR@,RTNCD,RET@  *\n*              RETURN CODE                          RTNCD             *\n*               RCVCMDOK EQU 0            COMMAND OK                  *\n*               RCVCMDRS EQU 4            COMMAND OK AND RESPONSE MSG *\n*               RCVRMSG  EQU 8            RESPONSE MSG                *\n*               RCVNRMSG EQU 12           NO RESPONSE MSG             *\n*               RCVCLDST EQU 12           CLSDST ISSUED FOR TERMINAL  *\n*               RCVCLOSD EQU 16           CLOSEDOWN ISSUED FOR NETOP  *\n*                                                                     *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: UNSTACK TO UNSTACK MESSAGES AFTER PA KEY HIT WHEN IN         *\n*                WAIT-FOR-ROLL CONDITION.                             *\n*                                                                     *\n* CALLED BY: INBOUND EXIT                                             *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nRCV3270  $SINIT\n         ST    R2,RCVSAVE2        SAVE RPL @ (TRT USED)\n         MVC   AID,DATX           SAVE AID\n         NI    AID,X'0F'          ZERO ZONE\n         BZ    INVINP             NO ACTION AID => TREAT AS INVALID\n*                                     TILL I CAN FIGURE OUT WHY\n*                                     WE GET IT.\n         CLI   AID,X'0F'          INVALID IF > 14 NUMERIC\n         BL    AIDFND             OK\nAIDBAD   ABEND 256,DUMP           NO - LET'S GET A DUMP OF THIS...\n*\nAIDFND   CLI   AID,XPF3            END?\n         BE    TERMEND             YES - GO RELEASE TERMINAL\n         CLI   AID,XPF1            HELP?\n         BE    HELPOUT             YES - GO DISPLAY HELP SCREEN\n         CH    MSGLEN,K3           LENGTH > 3?\n         BH    MOREDATA            YES\n*              NO - RESET ROLL WAIT, NO-AUTO REENTRY, HELP, LAST UNSOL\nAIDSHORT NI    TIFLAGS,255-(TIFWTROL+TIFNAUT)\n         TM    TISTATUS,TISTACK    ANY MESSAGES STACKED?\n         BO    ATTNCHK             YES\n         NI    TIFLAGS,255-(TIFHELP+TIFUNSOL) NO - RESET FLAGS\n         B     NOSTACK\nATTNCHK  CLI   DATX,PA1            ATTN? (DELETE OUTSTANDING MESSAGES)\n         BE    DELSTACK            YES\n         CLI   DATX,CLEAR          CLEAR?\n         BE    CLRSTACK            YES\n         TM    TIFLAGS,TIFHELP     HELP SCREEN CURRENT?\n         BZ    NOHELP              NO - DONT RE-INIT SCREEN\nCLRSTACK SR    PARM@,PARM@         YES - INIT PARM,\n         IC    PARM@,TIABRLEN+1     PICKUP LAST CMD LEN,\n         $CALL INT3270,(PARM@)      RE-INIT SCREEN BEFORE UNSTACKING\n         NI    TIFLAGS,255-TIFHELP RESET HELP FLAG\nNOHELP   ST    TICB@,TICBLIST      SET UP\n         OI    TICBLIST,LASTPARM    TICBLIST FOR SENDS\n         $CALL UNSTACK             RETRIEVE AND SEND STACKED MSGS\n         B     RCV32RET GO SEND WARNING OR NOT (RC FROM UNSTACK=4 OR 8)\nDELSTACK OI    POFLAGS,POFSTDEL    FLAG STACK DELETE\n         $CALL UNSTACK             RETRIEVE AND DELETE STACKED MSGS\n         MVI   DATX,PA2            ASK FOR RESHOW\n         NI    TIFLAGS,255-(TIFHELP+TIFUNSOL) RESET FLAGS\n         B     CLEARSET            GO INIT SCREEN\nNOSTACK  NI    TIFLAGS,255-(TIFDSP+TIFDSP11+TIFCLUST) RESET DISPLAY\n         XC    TIDSPCT,TIDSPCT                 FLAGS AND COUNT\n         CLI   DATX,PA1            ATTN (NO-OP)?\n         BE    RCVNULL             YES\nCLEARSET SR    PARM@,PARM@         INIT PARM\n         CLI   DATX,PA2            RESHOW?\n         BNE   CLEARCAL            NO\nRESHOW   IC    PARM@,TIABRLEN+1    YES - PICKUP LAST CMD LEN\nCLEARCAL $CALL INT3270,(PARM@)     SHORT READ - RE-INIT SCREEN\n         B     RCV32CLD            RET 8 TO SUPPRESS FURTHER OUTPUT\n*\nMOREDATA CH    MSGLEN,K6           LENGTH > 6?\n         BNH   RCVNULL             NO - NULL MSG - RETURN 4\n         AH    DA@,K3              INCR DSECT BASE OVER AID-CUR-CUR\n         CLI   DATX,SBA            ?\n         BNE   TRYNUM              NO\n         AH    DA@,K3              INCR DSECT BASE OVER SBA-ADR-ADR\n         CLI   DATX,X'40'          BLANK INPUT?\n         BNE   TRYNUM              NO - CHECK IT\nRCVNULL  LA    WKA,NULLM           SET UP FOR NULL MSG\n         LA    WKB,L'NULLM         FULL LENGTH (WITH IC)\nRCV32RMG LA    RTNCD,RCVRMSG       YES - SET RESP MSG RETURN CODE\n         B     RCV32RET            RETURN\n*\nTRYNUM   MVI   WORK,C'0'\n         MVN   WORK(1),DATX        1ST DATA BYTE\n         CLC   WORK(1),DATX         NUMERIC?\n         BNE   SUBSIX              NO\n         CH    MSGLEN,K7           YES - ONLY 1 DATA BYTE?\n         BE    PSEUDO1               YES - PSEUDO PF ONLY\n         CLI   DATX+1,C' '           NO - FOLLOWING BLANK?\n         BE    PSEUDO1                 YES - TREAT AS PSEUDO PF CMD\n         MVI   WORK,C'0'\n         MVN   WORK(1),DATX+1      1ST DATA BYTE\n         CLC   WORK(1),DATX+1       NUMERIC?\n         BNE   IMPLR1              NO - TREAT AS IMPLICIT REPLY CMD\n         CH    MSGLEN,K8           YES - ONLY 2 DATA BYTES?\n         BE    MACANREQ              YES - COULD BE MA-CAND REQUEST\n         CLI   DATX+2,C' '           NO - FOLLOWING BLANK?\n         BE    PSEUDO2                 YES - TREAT AS PSEUDO PF CMD\n*\n         MVC   TBUF+2(2),DATX      IMPLICIT REPLY, 2 NUMERICS\n         SH    MSGLEN,K2           DECREMENT LENGTH\n         LA    WKB,DATX+2          SET UP TEXT PTR\n         B     IMPLREX\nIMPLR1   MVC   TBUF+3(1),DATX      IMPLICIT REPLY, 1 NUMERIC\n         MVI   TBUF+2,C'0'\n         SH    MSGLEN,K1           DECREMENT LENGTH\n         LA    WKB,DATX+1          SET UP TEXT PTR\nIMPLREX  EX    MSGLEN,IMPLRMV1     MOVE REPLY TEXT INTO TBUF\n         MVC   TBUF(2),=C'R '      SET UP REPLY CMD\n         MVI   TBUF+4,C','                REPLY\n         SH    MSGLEN,K2           DECREMENT LENGTH FOR MOVE EX\n         ST    MSGLEN,RCVSAVE       AND SAVE IT FOR LOG EX MOVE\n         EX    MSGLEN,IMPLRMV2     MOVE REPLY CMD INTO ISTDPOHD\n         LA    MSGLEN,1(,MSGLEN)   INCREMENT LENGTH FOR SENDCMD\n         B     RCVREPLY\n*\n*        PSEUDO PF COMMANDS CONSIST OF 1 OR 2 NUMERICS REPRESENTING A\n*        PF KEY NUMBER, FOLLOWED BY A BLANK AND SOME DATA - THIS FORM\n*        IS NECESSARY FOR CLISTS AND FOR TERMINALS WITHOUT PF KEYS\n*\nPSEUDO1  MVN   AID,DATX            MOVE IN PSEUDO AID\n         CH    MSGLEN,K8           MORE THAN 2 DATA BYTES?\n         BH    PSEUDOK             YES - MEANINGFUL DATA\n         LH    MSGLEN,K3           NO - PF ONLY\n         B     AIDFND               TREAT AS SHORT MSG\nPSEUDOK  LA    DA@,2(,DA@)         INCREMENT DATX PTR OVER PSEUDO,\n         SH    MSGLEN,K2            DECREMENT LENGTH FOR PSEUDO CHARS\n         B     TRYNUM               AND GO RESCAN INPUT\nPSEUDO2  CH    MSGLEN,K9           ONLY 3 DATA BYTES?\n         BE    INVINP              YES - MEANINGLESS AS PSEUDO PF CMD\n         NI    DATX+1,X'0F'        NO -\n         SR    WKB,WKB              CONVERT\n         IC    WKB,DATX+1            CHARACTER\n         AH    WKB,K10                AID INTO\n         CH    WKB,K12                 CORRECT\n         BH    INVINP                   HEX\n         STC   WKB,AID                   NUMERIC\n         LA    DA@,3(,DA@)         INCREMENT DATX PTR OVER PSEUDO,\n         SH    MSGLEN,K3            DECREMENT LENGTH FOR PSEUDO CHARS\n         B     TRYNUM               AND GO RESCAN INPUT\n*\nMACANREQ CLI   AID,XPF2            MASTER CANDIDATE REQUEST\n         BNE   INVINP              NO\n         CLC   DATX(2),SENDTIME    YES - CORRECT HOUR?\n         BNE   INVINP                NO\n         TM    TISTATUS,TISMA        YES - MASTER?\n         BO    INVCMD                  YES - DENY\n         XI    TISTATUS,TISMCAND       NO - SWITCH CANDIDATE BIT\n         LA    WKA,1               LOAD INCREMENT\n         TM    TISTATUS,TISMCAND   BIT ON NOW?\n         BO    MCCTUP              YES\n         LNR   WKA,WKA             NO - CHANGE TO DECREMENT\nMCCTUP   AH    WKA,TICBMCCT        ADD OR SUBTRACT 1\n         STH   WKA,TICBMCCT         TO MCANDT COUNT\n         SR    PARM@,PARM@         INIT PARM\n         B     RESHOW              TREAT LIKE RESHOW KEY HIT\n*\nSUBSIX   SH    MSGLEN,K6           DECR. LEN\n         TM    TIFLAGS,TIFNAUT     NO-AUTO RE-ENTRY OF EXPANDED CMD?\n         BZ    NOTNAUT             NO\n         MVI   AID,XENTER          YES - OVER-RIDE AID AS IF ENTER HIT\n         B     UPMOVE               AND DONT UPDATE ABBREV FIELDS\nNOTNAUT  CLI   AID,XPF2            PF2? (CONTROL KEYWORD)\n         BE    UPMOVE              YES - DONT UPDATE ABBREV FIELDS\n         LR    WKB,MSGLEN          CHECK\n         LA    WKC,L'TIABR          LENGTH\n         CR    WKB,WKC             > MAX?\n         BNH   ABRLOK              NO\n         LR    WKB,WKC             YES - SET TO MAX\nABRLOK   STH   WKB,TIABRLEN        SAVE ABBREV LENGTH\n         BCTR  WKB,0               DECR FOR EX\n         EX    WKB,MVABR           SAVE ABBREV CMD\nUPMOVE   MVC   UPPER,BLANX         BLANK TARGET FIELD\n         LA    WKB,6               IF LENGTH\n         LR    WKC,MSGLEN           < 7 THEN\n         BCTR  WKC,0                 USE IT,\n         CR    WKC,WKB                ELSE USE 6\n         BNH   UPFOLD                  FOR EX OF OR INSTR.\n         LR    WKC,WKB                  TO FOLD INPUT DATA\nUPFOLD   EX    WKC,ORUP                  INTO COMPARE FIELD\n         CLC   UPPER(3),=C'END'    ?\n         BE    TERMEND             YES - GO RELEASE TERMINAL\n         SR    WKB,WKB            CALC OFFSET\n         IC    WKB,AID             INTO AID OFFSET\n         BCTR  WKB,0                BRANCH TABLE\nAIDOK    SLL   WKB,1              * 2 SINCE OFFSETS ARE HALFWORDS\n         LH    WKB,AIDTAB(WKB)    LOAD CODE OFFSET\n         B     AIDTAB(WKB)        GO TO INPUT HANDLER FOR THIS AID\n*\nAIDTAB   DS    0H                 TABLE OF OFFSETS TO INPUT HANDLERS\n*                                   THIS LOGIC MEANS THAT ON 3278'S\n*                                 PF13-PF24 CORRESPOND TO PF1-PF12\n         DC    AL2(AIDPF1-AIDTAB)\n         DC    AL2(AIDPF2-AIDTAB)\n         DC    AL2(AIDPF3-AIDTAB)\n         DC    AL2(AIDPF4-AIDTAB)\n         DC    AL2(AIDPF5-AIDTAB)\n         DC    AL2(AIDPF6-AIDTAB)\n         DC    AL2(AIDPF7-AIDTAB)\n         DC    AL2(AIDPF8-AIDTAB)\n         DC    AL2(AIDPF9-AIDTAB)\n         DC    AL2(AIDPF10-AIDTAB)\n         DC    AL2(AIDPF11-AIDTAB)\n         DC    AL2(AIDPF12-AIDTAB)\n         DC    AL2(AIDENTER-AIDTAB)\n         DC    AL2(AIDSEL-AIDTAB)\n*\nAIDPF2   LR    WKD,MSGLEN         SET UP\n         BCTR  WKD,0               EX LENGTH FOR COMPARE/MOVE\n         LA    WKB,PF2KWDS        INDEX REG TO KEYWORDS\nPF2LOOP  EX    WKD,PF2CLC         COMPARE FOR NEGATIVE FORM\n         BE    PF2MASK            GO APPLY MASK\n         LA    WKB,1(,WKB)        INCREMENT OVER 'N'\n         EX    WKD,PF2CLC         COMPARE FOR POSITIVE FORM\n         BE    PF2MASK            GO APPLY MASK\n         LA    WKB,6(,WKB)        INCREMENT TO NEXT KEYWORD\n         CLI   0(WKB),X'FF'       END OF TABLE?\n         BNE   PF2LOOP            NO\n*                                 YES - ASSUME USERID INTENDED\n         TM    POSTATUS,POSTEST   RUNNING UNDER TEST?\n         BO    INVINP             YES - DONT SEARCH\n         MVC   TIABR(7),UPPER     NO -  MOVE IT INTO TIABR; ALSO MOVE\n         STH   MSGLEN,TIABRLEN     LENGTH IN CASE UID \u00ac FND, THEN PA2\n         $CALL TSOUID,0           GO SEARCH TSB CHAIN FOR USERID\n         LA    WKA,RCVRMSG        DCON RC\n         CR    RTNCD,WKA          ACTIVE OR DCON?\n         BH    INVINP             NO - MUST BE NOT FOUND\n         LA    MSGLEN,8           SET NEW MSG LENGTH\n         BL    IMPLD              ACTIVE - GO TREAT AS DISPLAY\n         NI    TISTATUS,255-TISUID  DISCONNECTED - RESET FLAG\n         MVC   DCONMNAM,DATX      MOVE OLD TERMNAME INTO ERROR PART\n         MVC   DCONMABR,DATX      MOVE OLD TERMNAME INTO ENTRY PART\n         LA    WKB,DCONML         SET UP FOR DCON\n         LA    WKA,DCONM           MESSAGE\n         B     RCV32RET           RETURN\n*\nPF2MASK  CLI   5(WKB),X'7F'       IS IT OVER 7F?\n         BL    PF2OR              NO - MUST BE 'OR' MASK\n         CLI   5(WKB),X'80'       YES - IS IT 80? (HIGHEST 'OR' MASK)\n         BE    PF2OR              YES\n         NC    TIFLAGS2,5(WKB)    NO - 'AND' FLAG BYTE TO TURN OFF\n         B     RCVNULL             TREAT LIKE NULL MSG\nPF2OR    TM    5(WKB),TIF2SOLO     SOLO ON?\n         BZ    PF2ORFLG            NO\n         TM    TISTATUS,TISMA      YES - IS THIS THE MASTER?\n         BO    INVCMD               YES - DENY\nPF2ORFLG OC    TIFLAGS2,5(WKB)    'OR' FLAG BYTE TO TURN ON FLAG\n         B     RCVNULL             TREAT LIKE NULL MSG\n*\nAIDPF4   LA    WKC,L'MODIFY-1      IMPLICIT MODIFY...\n         CLC   NETSOL,UPPER        BUT\n         BE    NOIDMOD              CHECK FOR\nTRYTEST  CLC   TEST,UPPER            MODIFY'S THAT\n         BE    NOIDMOD                HAVE NO\nTRYSUPP  CLC   SUPP,UPPER              'ID='\n         BNE   ALMOD\nNOIDMOD  LA    WKC,L'MODIFY-4      REDUCE LENGTH OF INSERT\nALMOD    LA    WKA,MODIFY                 FOR CMD INSERTION\n         B     INSERT\n*\nAIDPF5   TM    TISTATUS,TISMCAND   IMPLICIT OS CMD - MASTER CANDIDATE?\n         BZ    INVCMD              NO - DENY\n         TM    POSTATUS,POSTEST    RUNNING UNDER TEST?\n         BO    AIDENTER            YES - TREAT AS ENTER KEY\n         LA    WKA,4(,MSGLEN)      YES - SET UP\n         SLL   WKA,16                OS CMD PREFIX\n         ST    WKA,ISTDPOHD           AND STORE IT\n         $CALL MGCR,ISTDPOHD       ISSUE SVC 34\n         $CALL PUTLOG,DATX,(MSGLEN)  LOG CMD\n         LA    WKA,NULLM           SET UP FOR NULL MSG\n         LA    WKB,2                WITHOUT SBA,IC\n         B     RCV32RMG            RETURN NULL\n*\nAIDPF6   LA    WKC,L'VARYII-1      IMPLICIT VARY ,INACT,I\n         LA    WKA,VARYII          SET UP FOR CMD INSERTION\n         B     INSERT\n*\nAIDPF7   OI    TIFLAGS,TIFVLOG     IMPLICIT VARY ,LOGON\n         B     AIDENTER            USE DISPLAY FORMAT, BUT FLAG\n*\nAIDPF8   LA    WKC,L'VARYI-1       IMPLICIT VARY ,INACT\n         LA    WKA,VARYI           SET UP FOR CMD INSERTION\n         B     INSERT\n*\nAIDPF10  OI    TIFLAGS,TIFCLUST    DISPLAY WITH CLUSTER STATUS ONLY\n         B     AIDENTER            USE DISPLAY FORMAT, BUT FLAG\n*\nAIDPF11  OI    TIFLAGS,TIFDSP11    DISPLAY WITH LOGGING - FLAG IT\n         B     AIDENTER\n*\nAIDPF12  LA    WKC,L'VARYA-1       IMPLICIT VARY ,ACT\n         LA    WKA,VARYA           SET UP FOR CMD INSERTION\n         B     INSERT\n*\nAIDSEL   EQU   *                   ALSO SELECTOR PEN ENTER\nAIDENTER CLI   UPPER+1,C' '        VALID CMD FORMAT FOR ENTER KEY?\n         BE    VALENT              YES\n*\n*  FOLLOWING CODE EDITS 'NODENAME,ETC..' AFTER ENTER, PF10 OR PF11\n*  MSG LENGTH IS REDUCED TO ELIMINATE THE  'ETC..'\n*\nIMPLD    LA    WKB,DATX            SET UP\n         LA    WKC,DATX-1(MSGLEN)  LAST CHAR PTR\n         LA    WKD,8                SCAN START PTR\n         LR    WKA,MSGLEN            AND COMMA\n         BCTR  WKA,0\n         CR    WKD,WKA               AND COMMA\n         BNH   DSPLENOK               SCAN\n         LR    WKD,WKA                 LENGTH\nDSPLENOK SR    R2,R2              CLEAR FOR TRT FUNCTION CODE\n         L     WKA,@TRTTAB        LOAD TRT TABLE @\n         EX    WKD,TRTRANG        RANGE OR DELIMITER?\n         BNZ   DELIMFND           NO\n         TM    TIFLAGS,TIFVLOG    YES - VARY ,LOGON?\n         BO    INVINP              YES - INVALID WITHOUT COMMA\n         B     INSERTD             NO - GO INSERT 'D NET,ID='\nDELIMFND LA    WKD,2              PRELOAD FINAL MSGLEN INCR\n         LR    R15,R1             CALC\n         LA    R0,DATX+1           NODENAME\n         SR    R15,R0               LENGTH\n         CH    R2,K1              RANGE NOTATION?\n         BNE   DSPCOMMA           NO - MUST BE DELIM\n         LA    R1,2(,R1)          YES - JUMP TO WHERE COMMA SHOULD BE\n         LA    R15,2(,R15)         AND UPDATE NODENAME LENGTH\n         CR    WKC,R1             PAST LAST CHAR?\n         BNL   DSPCOMMA           NO\n         LA    WKD,1              PRELOAD REVISED FINAL MSGLEN INCR\n         B     DSPBLANK\nDSPCOMMA CLI   0(R1),C','         COMMA?\n         BNE   DSPBLANK           NO - BLANK OR OTHER DELIM\n         LA    R1,1(,R1)          YES - JUMP COMMA\n         TM    TIFLAGS,TIFVLOG    VARY ,LOGON?\n         BZ    DSPLCHAR           NO\n         CR    WKC,R1             YES - IS THIS LAST CHAR?\n         BL    INVINP             YES\n         B     INSERTD               AND GO DO VLOG INSERTION\nDSPLCHAR CR    WKC,R1             IS THIS LAST CHAR?\n         BNH   DSPFOLD            YES\n         CLI   1(R1),C' '         NO - IS NEXT CHAR A BLANK?\n         BNE   DSPBLANK           YES\nDSPFOLD  MVI   HEX,C' '           NO - FOLD\n         OC    HEX(1),0(R1)        NEXT CHAR\n*              ONLY ABBREVIATION IS SUPPORTED HERE -\n*                 FULL KEYWORD WOULD BE EDITED OUT\n         CLI   HEX,C'E'           E FOR EVERY?\n         BE    INSERTD            YES\n         CLI   HEX,C'I'           I FOR INACT?\n         BE    INSERTD            YES\n         CLI   HEX,C'A'           A FOR ACT?\n         BE    INSERTD            YES\n         CLI   HEX,C'N'           N FOR NONE?\n         BE    INSERTD            YES\n*              DELIMITER BUT NO COMMA OR DELIMITER BUT END OF INPUT\nDSPBLANK TM    TIFLAGS,TIFVLOG    VARY ,LOGON?\n         BO    INVINP             YES - INVALID WITHOUT 2ND OPERAND\n         LA    MSGLEN,0(WKD,R15)  NO - SET CORRECT LENGTH\n*\nINSERTD  LA    WKC,L'DISPLAY-1    IMPLICIT DISPLAY\n         LA    WKA,DISPLAY         SET UP FOR CMD INSERTION\n         B     INSERT\n*\n*\nVALENT   CH    MSGLEN,K1           SINGLE CHARACTER INPUT?\n         BNE   TRYREP              NO\n         CLI   UPPER,C'K'          YES - IS IT KLEAR?\n         BNE   TRYW                NO\n         MVI   DATX,CLEAR          YES - FAKE CLEAR AID\n         B     AIDSHORT             AND GO PROCESS IT\n*\nTRYW     CLI   UPPER,C'W'          IS IT W? (WRITE EOF TO LOG)\n         BNE   INVINP              NO - TREAT AS INVALID\n         TM    TISTATUS,TISMCAND   YES - MASTER CANDIDATE?\n         BZ    INVCMD                NO - DENY\n         CLOSE (VTAMLOGO)            YES - CLOSE,\n         OPEN  (VTAMLOGO,OUTPUT)      AND RE-OPEN MOD\n         SR    PARM@,PARM@         INIT PARM\n         B     CLEARCAL            RE-INIT SCREEN\n*\nTRYREP   CLI   UPPER,C'R'          IS IT REPLY?\n         BNE   NETCHK              NO\nRCVREPLY TM    TISTATUS,TISMCAND   MASTER OR CANDIDATE?\n         BZ    INVCMD              NO - DENY\n         OI    TISTATUS,TISREPLY   YES - FLAG IT SINCE PPO ACB MUST BE\n         B     VALCMD               USED FOR SENDCMD\n*\nNETCHK   CLC   NET,DATX+1          IS IT ' NET,'?\n         BE    LONGFORM            YES - NO INSERTION NECESSARY\n         MVC   TBUF(40),DATX+2         NO,\n         MVC   DATX+9(33),TBUF          INSERT\n         MVC   DATX+2(7),NETID           'NET,ID='\n         LA    MSGLEN,L'NETID(,MSGLEN) INCREMENT LENGTH\n         B     NAUTOCHK            GO CHECK FOR AUTO MODE\n*\nINSERT   LA    WKB,DATX+1(WKC) TARGET PTR FOR OPERAND MOVE\n         MVC   TBUF(42),DATX MOVE CMD\n         MVC   0(36,WKB),TBUF        OPERAND OVER\n         EX    WKC,MVINSRT         INSERT CMD\n         TM    TIFLAGS,TIFVLOG     VARY ,LOGON?\n         BZ    INCRLEN             NO\n*\n         NI    TIFLAGS,255-TIFVLOG RESET FLAG\n         MVI   DATX,X'A5'          CHANGE 'D' TO 'V' FOR VARY\n         LR    WKD,MSGLEN          CALC\n         SR    WKD,R15              LENGTH-1 OF\n         SH    WKD,K2                REMAINDER FOR MOVE (IN WKD)\n         BM    INVINP                 UNLESS NEGATIVE (NO REMAINDER)\n         LA    WKB,2(R15,WKB)      CALC TARGET PTR FOR LOGON INSERT\n         MVC   0(6,WKB),KLOGON     MOVE IN 'LOGON='\n         LA    WKB,6(,WKB)         CALC TARGET PTR,\n         LA    WKA,TBUF+1(R15)       LOAD SOURCE PTR AND\n         EX    WKD,MVLOGINS          MOVE IN APPLID AND ANY OTHER DATA\n         LA    MSGLEN,6(,MSGLEN)   INCREMENT LENGTH FOR LOGON=\n*\nINCRLEN  LA    MSGLEN,1(MSGLEN,WKC)      INCR LENGTH FOR NET INSERT\n*\nNAUTOCHK TM    TIFLAGS2,TIF2AUTO  NO-AUTO MODE?\n         BZ    LONGFORM       NO\n         LR    WKA,DA@        YES - JUST DISPLAY\n         SH    WKA,K2          LONG FORM OF\n         LA    WKB,6(,MSGLEN)   CMD IN INPUT AREA\n         MVC   0(6,WKA),NULLM    FOR PERUSAL BEFORE ENTRY\n         OI    TIFLAGS,TIFNAUT FLAG NO-AUTO RE-ENTRY OF EXPANDED CMD\n         B     RCV32RMG\nLONGFORM LR    WKA,MSGLEN         USE A WORK REG\n         LA    WKC,L'TICMD        LOAD MAX LENGTH\n         CR    WKA,WKC            TOO LONG?\n         BNH   CLENOK             NO\n         LR    WKA,WKC            YES - USE MAX\nCLENOK   STH   WKA,TICMDLEN       SAVE CMD LENGTH IN TICB\n         BCTR  WKA,0              DECREMENT LENGTH FOR MVC\n         ST    WKA,RCVSAVE          AND SAVE IT\n         EX    WKA,MVCMD          SAVE CMD IN TICB\n         LA    WKC,DATX-1(WKA)    POINT TO CHAR BEFORE LAST\n         LA    WKB,DATX+8         SET INPUT @ FOR RANGE CHECK\n         LA    WKD,35             LOOP INDEX\nRCVELOOP CLI   0(WKB),C'='        POSSIBLE NODENAME OPERAND?\n         BNE   RCVNEQU            NO\n         SH    WKB,K2             YES - IS IT\n         CLC   0(2,WKB),=X'8984'   LOWERCASE 'ID='\n         BE    RCVIDEQU           YES\n         CLC   0(2,WKB),=C'ID'    UPPERCASE 'ID='\n         BE    RCVIDEQU           YES\nRCVNID   LA    WKB,2(,WKB)        INCR BACK TO '='\nRCVNEQU  LA    WKB,1(,WKB)        INCR INDEX\n         BCT   WKD,RCVELOOP       CHECK NEXT CHAR\n         B     DCHK               NOT FOUND => ASSUME NO ID= FIELD\nRCVIDEQU LA    WKB,3(,WKB)        JUMP 'ID='\n*                                  (WKB POINTS TO NODENAME OPERAND)\nRCVRCHK  LA    R1,1(,WKB)         POINT TO 2ND CHAR OF OPERAND\n         SR    WKC,WKB            CALC. LENGTH REMAINING\n         SR    R2,R2              CLEAR FOR TRT FUNCTION CODE\n         L     WKA,@TRTTAB        LOAD TRT TABLE @\n         EX    WKC,TRTRANG        RANGE OR DELIMITER?\n         BZ    DCHK               NO\n         CH    R2,K1              RANGE NOTATION?\n         BNE   DCHK               NO - MUST BE DELIM\n         LR    WKB,R1             YES - POINT WKB TO RANGE CHAR\n         MVI   RANGEND,C' '        FOUND -\n         OC    RANGEND(1),1(WKB)    SHIFT AND\n         $CALL ATOX,RANGEND          CONVERT TO HEX IN R15\n         LTR   RTNCD,RTNCD        IS IT GOOD?\n         BM    INVINP             NO\n         STH   R15,RANGEND        STORE AS BIN HALFWORD\n         BCTR  WKB,0              BACK UP TO 1ST RANGE CHAR\n         ST    WKB,RANGCHAR        AND STORE PTR\n         LA    WKA,DATX           CALC\n         AR    WKA,MSGLEN          REMAINING\n         LA    WKD,4(,WKD)          CHARS AFTER\n         SR    WKA,WKD               RANGE NOTATION\n         BM    NOMVRANG           IF ANY,\n         EX    WKA,MVRANG           SHIFT LEFT OVER '-N' CHARS\nNOMVRANG SH    MSGLEN,K2          DECREMENT LENGTH ACCORDINGLY\n         OI    POFLAGS,POFRANG    FLAG RANGE FORMAT IN EFFECT\nDCHK     CLI   DATX,X'84' IS IT LOWERCASE 'D'?\n         BE    FLAGD          YES\n         CLI   DATX,C'D'      IS IT 'D'?\n         BE    FLAGD          YES\n         TM    TISTATUS,TISMCAND   MASTER OR CANDIDATE?\n         BO    VALCMD              YES\n*\nINVCMD   LA    WKA,INVALM         SET UP FOR\n         LA    WKB,INVALML         'INVALID FROM ........' MSG\n         MVC   INVALTRM,TINAME    MOVE IN TNAME\n         B     RCV32RMG           RETURN INVALID\nINVINP   LA    WKA,INVALK         SET UP FOR\n         LA    WKB,INVALKL         'INVALID INPUT' MSG\n         B     RCV32RMG           RETURN INVALID\n*\nAIDPF1   EQU   INVINP             PREVIOUSLY CHECKED FOR\nAIDPF3   EQU   INVINP             PREVIOUSLY CHECKED FOR\nAIDPF9   EQU   INVINP             NO CODE YET\n*\nFLAGD    OI    TIFLAGS,TIFDSP FLAG FOR LOG SUPPRESSION (IN CASE NOT ON)\n         OI    POFLAGS,POFDSP  AND SIGNAL DISPLAY TO SENDCMD LOOP\n         TM    TIFLAGS,TIFDSP11  FLAGGED FOR LOGGING VIA PF11?\n         BO    VALCMD            YES - LOG IT\n         TM    TIFLAGS2,TIF2LOGD NO, FLAGGED FOR LOGGING VIA PF2/LOGD?\n         BO    VALCMD            YES - LOG IT\n         B     NAUTCHK           NO - DONT LOG IT\n*\n* PREPARE AND WRITE HARD COPY LOG RECORD.\n*\nVALCMD   L     WKA,RCVSAVE        EX LENGTH FOR MOVE\n         LA    PARM@,DATX         SOURCE PTR FOR MOVE\n         TM    POFLAGS,POFRANG    RANGE FORMAT?\n         BZ    CMDLOG             NO\n         LA    PARM@,TICMD        YES - USE ORIGINAL CMD FORMAT ON LOG\nCMDLOG   $CALL PUTLOG,(PARM@),(WKA)  OUTPUT RECORD\nNAUTCHK  TM    TIFLAGS,TIFNAUT    SUCCESSFUL NO-AUTO RE-ENTRY?\n         BZ    RCV32OK            NO\n         NI    TIFLAGS,255-TIFNAUT YES - RESET NO-AUTO RE-ENTRY FLAG,\n         LH    WKB,TIABRLEN        THEN\n         BCTR  WKB,0                SET UP\n         EX    WKB,MVNAUTAB          NO-AUTO\n         LA    WKB,L'NAUTM+1(,WKB)    RE-DISPLAY\n         LA    WKA,NAUTM               OF ABBREV CMD\n         LA    RTNCD,RCVCMDRS     SET CMD OK AND RESP MSG RETURN CODE\n         B     RCV32RET\nRCV32OK  LA    RTNCD,RCVCMDOK     SET CMD OK RETURN CODE\nRCV32RET L     RPL@,RCVSAVE2      (RESTORE RPL @)\n         $SRET\n*\nTERMEND  OC    DATX+6(3),BLANX FOLD DATA\n         CLC   DATX+6(3),=C'ALL' TERMINATE NETOP?\n         BNE   RCVNOCLS           NO\nTERMALL  TM    TISTATUS,TISMCAND  MASTER OR CANDIDATE TERMINATION?\n         BZ    INVCMD             NO - INVALID\n         $CALL PUTLOG,CLOSMSG,*-1 OUTPUT REC\n         POST  ECBMAIN,0          YES - CLOSE DOWN\n         LA    RTNCD,RCVCLOSD     SET CLOSEDOWN CODE\n         B     RCV32RET           RETURN\n*\nRCVNOCLS TM    TISTATUS,TISMA     MASTER TERMINATION?\n         BZ    TERMOK             NO\n         $CALL MAFIND             YES - FIND ALT MASTER\nTERMOK   $CALL CLSDST             CLSDST TERMINAL AND FREE TICB\n         $CALL PUTLOG,OFFMSG,*-1  OUTPUT REC\nRCV32CLD LA    RTNCD,RCVCLDST     RETURN WITH CLSDST CODE\n         B     RCV32RET           RETURN\n*\nHELPOUT  XC    TILNCT,TILNCT      ZERO LINE COUNT\n         NI    TIFLAGS,255-(TIFDSP+TIFDSP11+TIFCLUST) RESET DSP FLAGS\n         OI    TIFLAGS,TIFWTROL   FLAG WAITING FOR ROLL\n         TM    TIFLAGS,TIFHELP    PF2 HELP?\n         BZ    HELPFLAG           NO\n         L     WKA,@HELPM2        SET UP FOR\n         LA    WKB,HELPML2         PF2 HELP MSG\n         USING HELPM2,WKA\n         $HELPF2 ROLL,AUTO,ECHO,SOLO,LOGD\n         DROP  WKA\n         B     RCV32RMG           RETURN RESPONSE MSG\nHELPFLAG OI    TIFLAGS,TIFHELP    FLAG FOR SCREEN CLEAR AFTER HELP\n         L     WKA,@HELPM         SET UP FOR\n         LA    WKB,HELPML           HELP MSG\n         B     RCV32RMG           RETURN RESPONSE MSG\n*\nMVCMD    MVC   TICMD(*-*),DATX       MOVE CMD INTO TICB\nMVINSRT  MVC   DATX(*-*),0(WKA)      INSERT TEXT TO GIVE FULL CMD FMT\nMVABR    MVC   TIABR(*-*),DATX       SAVE ABBR CMD\nORUP     OC    UPPER(*-*),DATX       FOLD UP TO 7 BYTES FOR CLC'S\nMVNAUTAB MVC   NAUTABR(*-*),TIABR    MOVE ABBR INTO NAUTMSG\nMVRANG   MVC   1(*-*,WKB),3(WKB)     SHIFT OVER RANGE NOTATION\nIMPLRMV1 MVC   TBUF+5(*-*),0(WKB)    MOVE REPLY TEXT INTO TBUF\nIMPLRMV2 MVC   DATX(*-*),TBUF        MOVE REPLY CMD BACK INTO DATX\nPF2CLC   CLC   0(*-*,WKB),UPPER      COMPARE PF2 INPUT TO KEYWORDS\nMVLOGINS MVC   0(*-*,WKB),1(WKA)     MOVE REMAINDER AFTER LOGON=\nTRTRANG  TRT   0(*-*,WKB),0(WKA)     SEARCH FOR RANGE NOTATION OR DELIM\nRCVSAVE  DS    F\nRCVSAVE2 DS    F\n         TITLE 'N E T O P - MGCR SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: MGCR                                                          *\n*                                                                     *\n* FUNCTION: TO ISSUE SVC 34 TO SEND AN OS COMMAND                     *\n*                                                                     *\n* ENTRY POINT: MGCR                                                   *\n*                                                                     *\n* INPUT REGISTERS:                                                    *\n*                                                                     *\n*              OS CMD BUFFER      PARM@                               *\n*              SUBROUTINE RETURN  RET@                                *\n*                                                                     *\n*        REGISTERS CHANGED:                                           *\n*                                                                     *\n*        WKA,R0,RTNCD                                                 *\n*                                                                     *\n* CALLED BY: RCV3270, PUTLOG                                          *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nMGCR     $SINIT\n         TM    POSTATUS,POSTEST    RUNNING UNDER TEST?\n         BO    MGCRET              YES - IGNORE REQUEST\n         LR    WKA,PARM@           SAVE CMD PTR\n         MODESET KEY=ZERO          KEY ZERO FOR SVC 34\n         SR    R0,R0               SET ORIGIN\n         LR    PARM@,WKA            AND PARM @\n         SVC   34                  ISSUE OS CMD\n         MODESET KEY=NZERO         RESET KEY\nMGCRET   $SRET                     RETURN\n         TITLE 'N E T O P - TSOUID SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: TSOUID                                                        *\n*                                                                     *\n* FUNCTION: TO CONVERT A TSO USER APPLID INTO THE USERID OR TO        *\n*           CONVERT A VTAM TSO USERID INTO A TERMINAL NAME            *\n*                                                                     *\n* DESCRIPTION:                                                        *\n*        PARM=0 (CALL FROM RCV3270)                                   *\n*              THE VTAM TSB CHAIN IS SEARCHED FOR ASCB->USERID,       *\n*        COMPARING WITH THE INPUT COMMAND IN TIABR.  IF A MATCH IS    *\n*        FOUND THE INPUT COMMAND IS REPLACED BY THE TERMINAL NAME     *\n*        FROM THE TSB.  SUBSEQUENTLY, THE USERID IS INSERTED IN       *\n*        THE REPLY MESSAGE BY SUBROUTINE RCVVTAM.                     *\n*                                                                     *\n*        PARM=APPL INDEX (CALL FROM RCVVTAM)                          *\n*              THE VTAM TSB CHAIN IS SEARCHED FOR TSO APPLID.         *\n*        IF A MATCH IS FOUND THE ASCB PTR IS RETURNED TO ALLOW MSG    *\n*        IST082I TO BE REFORMATTED TO INCLUDE USERID AND ASID.        *\n*                                                                     *\n* ENTRY POINT: TSOUID                                                 *\n*                                                                     *\n* INPUT REGISTERS:                                                    *\n*                                                                     *\n*              PARM               PARM@                               *\n*              TICB PTR           TICB@                               *\n*              ISTDPOHD PTR       DA@                                 *\n*              SUBROUTINE RETURN  RET@                                *\n*                                                                     *\n* OUTPUT:                                                             *\n*         WHEN PARM@=0 -                                              *\n*              RTNCD RETURNED AS 0=OK, 4=AWAITING RECON, 12=NOT FOUND *\n*         WHEN PARM@>0 -                                              *\n*              RTNCD RETURNED AS ZERO OR ASCB PTR                     *\n*                                                                     *\n*        REGISTERS CHANGED:                                           *\n*                                                                     *\n*        WKA,WKB,WKC,WKD,RTNCD                                        *\n*                                                                     *\n* CALLED BY: RCVVTAM, RCV3270                                         *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nTSOUID   $SINIT\n         SR    R9,R9                   ZERO RETURN REG\n         LTR   WKA,PARM@               PARM = 0?\n         BNZ   TSOGETZ                 NO\n         LA    R9,RCVNRMSG         YES - SET DEFAULT UID NOT FOUND RC\nTSOGETZ  MODESET KEY=ZERO              NECESSARY TO LOOK IN TSB\n         LR    PARM@,WKA               RELOAD PARM\n         L     WKA,CVTPTR              LOAD POINTER TO CVT\n         USING CVTMAP,WKA              ESTABLISH ADDRESSABILITY TO CVT\n         L     WKA,CVTTCASP            LOAD POINTER TO TCAS TABLE\n         USING TCAST,WKA               ESTABLISH ADDRESSABILITY 2 TCAST\n         L     WKA,TCASTSB             LOAD POINTER TO VTAM TSB TABLE\n ST WKA,TSOSAVEI\n XC TSOSAVEA(8),TSOSAVEA\n*\n         USING TSB,WKA                 ESTABLISH ADDRESSABILITY TO TSB\nTSOLOOP  ICM   WKB,15,TSBEXTNT         GET ADDRESS OF TSB EXTENSION\n         BZ    TSORET                  IF 0, RETURN (SHOULDNT BUT DOES)\n ST WKB,TSOSAVEB\n         USING TSBX,WKB                ESTABLISH ADDRESSABILITY TO TSBX\n         LTR   PARM@,PARM@             PARM > 0?\n         BNZ   TSBTNAME                YES - TNAME COMPARE\n         L     WKC,TSBASCBA             ELSE USERID COMPARE\n         USING ASCB,WKC                ESTABLISH ADDRESSABILITY TO ASCB\n         L     WKD,ASCBJBNS             AND PICK UP USERID PTR\n         CLC   TIABR(7),0(WKD)         USERID MATCH?\n         BNE   TSONXTSB                NO - GO ON TO NEXT TSB\n         OI    TISTATUS,TISUID         YES - FLAG USERID FOUND\n         LA    R9,RCVCMDOK             SET OK RC\n         TM    TSBXFLG1,TSBXWREC       IS TERMINAL AWAITING RECON?\n         BZ    TSOTRMID                NO\n         LA    R9,RCVRMSG              YES - SET RESPONSE MSG RC\nTSOTRMID MVC   DATX(8),TSBTRMID        COPY TERMINAL NAME\n         MVC   TIABR+8(2),ASCBASID      AND ASID\n         B     TSORET                  RETURN\n*\nTSBTNAME TM    TSBXFLG1,TSBXWREC       IS USER AWAITING RECON?\n         BO    TSONXTSB                NO - GO ON TO NEXT TSB\n         CH    PARM@,TSBXAIND          TCAS TERMINAL ID EQUAL?\n         BNE   TSONXTSB                NO - GO ON TO NEXT TSB\n         L     R9,TSBASCBA             NO - GET ASCB PTR\n         B     TSORET                  YES\nTSONXTSB ICM   WKA,15,TSBXFWD          NO - GET NEXT TSB PTR\n ST WKA,TSOSAVEA\n         BNZ   TSOLOOP                 IF NON-ZERO, GO ANALYSE TSB\nTSORET   MODESET KEY=NZERO             RESET KEY\n         LR    RTNCD,R9                SET RETURN CODE\n         $SRET                         RETURN\nTSOSAVEI DS F\nTSOSAVEA DS F\nTSOSAVEB DS F\n         DROP  WKA,WKB,WKC\n         TITLE 'N E T O P - CLSDST A TERMINAL'\n***********************************************************************\n*                                                                     *\n* NAME: CLSDST                                                        *\n*                                                                     *\n* FUNCTION: TO ISSUE A CLSDST AND FREE THE ASSOCIATED TICB.           *\n*                                                                     *\n* ENTRY POINT: CLSDST                                                 *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              RPL ADDRESS               RPL@                         *\n*              RETURN ADDRESS IN EXIT    RET@                         *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGISTERS     WKA,RTNCD                           *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              RETURN             RET@                                *\n*                                                                     *\n* EXIT,NORMAL: BR RET@                                                *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: UNSTACK TO UNSTACK AND DELETE MESSAGES WHEN TERMINAL IN      *\n*                WAIT-FOR-ROLL CONDITION.                             *\n*                                                                     *\n* CALLED BY: RCV3270,LOGON,LOSTERM,RELREQ                             *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nCLSDST   $SINIT\nCLSCLS   CLSDST RPL=(RPL@),AREA=0,OPTCD=(RELEASE,SYN)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    CLSFREE            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    CLSCLS              THEN RETRY\n*\n* FREE TICB ALLOCATED TO TERMINAL.\n*\nCLSFREE  TM    TISTATUS,TISNOMOR  REJECTED DUE TO NO MORE TICBS?\n         BO    CLSRET             YES - NOTHING TO FREE\n         TM    TISTATUS,TISTACK   NO - STACK OPEN?\n         BZ    CLSINCRF             NO\n         OI    POFLAGS,POFSTDEL     YES - FLAG FOR DELETE\n         $CALL UNSTACK               AND GO DO IT\nCLSINCRF LH    WKA,TICBFCT        INCREMENT\n         LA    WKA,1(,WKA)          FREE\n         STH   WKA,TICBFCT            COUNT\n         TM    TISTATUS,TISMCAND  MASTER OR CANDIDATE TERMINATION?\n         BZ    CLSCLEAR           NO\n         LH    WKA,TICBMCCT       YES - DECREMENT\n         SH    WKA,K1               MASTER CANDIDATE\n         STH   WKA,TICBMCCT           COUNT\nCLSCLEAR XC    TINDICS,TINDICS    CLEAR INDICATORS\n         C     TICB@,TICBLACT     HIGHEST TICB @?\n         BNH   CLSRET             NO\n         LA    WKA,TICBLEN        YES -\n         LA    WKB,NETPTICB        BACK UP\nCLSBACK  SR    TICB@,WKA            TO PREVIOUS ACTIVE TICB @\n         CR    TICB@,WKB          NETOP TICB @ ?\n         BE    CLSRET\n         TM    TISTATUS,TISACT    ACTIVE TICB @ ?\n         BZ    CLSBACK            NO - GO BACK FURTHER\n         ST    TICB@,TICBLACT     YES - SAVE NEW HI-WATER MARK\nCLSRET   $SRET                RETURN\n         TITLE 'N E T O P - ALPHA HEX TO BINARY HEX CONVERSION'\n***********************************************************************\n*                                                                     *\n* NAME: ATOX                                                          *\n*                                                                     *\n* FUNCTION: TO CONVERT A CHARACTER CODE HEX BYTE TO 4 BITS.           *\n*           (COULD HAVE USED TR INST. BUT SHORT OF TABLE SPACE)       *\n*                                                                     *\n* ENTRY POINT: ATOX                                                   *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              POINTER TO CHARACTER      PARM@                        *\n*              RETURN ADDRESS IN EXIT    RET@                         *\n*                                                                     *\n* REGISTERS AT EXIT:                                                  *\n*                                                                     *\n*              BINARY HEX VALUE          RTNCD (R15)                  *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGISTERS     RTNCD,R0                            *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              RETURN             RET@                                *\n*                                                                     *\n* EXIT,NORMAL: BR RET@                                                *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: INBOUND,OUTBOUND                                         *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nATOX     $SINIT\n         SR    RTNCD,RTNCD    PICK UP\n         IC    RTNCD,0(,PARM@) CHARACTER HEX\n         TM    0(PARM@),X'F0' NUMERIC?\n         BO    ATOXNUM        YES\n         MVI   ATOXWK,C' '    NO - FOLD\n         OC    ATOXWK,0(PARM@) POSSIBLE ALPHA CHAR\n         CLI   ATOXWK,C'A'    LESS THAN 'A'?\n         BL    ATOXINV        YES - INVALID\n         CLI   ATOXWK,C'F'    GREATER THAN 'F'?\n         BNH   ATOXCHAR       NO - GOOD HEX CHAR\nATOXINV  LH    RTNCD,ATOX+4   NEITHER - RETURN NEGATIVE VAL\n         B     ATOXRET\nATOXCHAR LA    RTNCD,X'39'(,RTNCD)  NO - INCREMENT TO X'FA' - X'FF'\nATOXNUM  LA    R0,X'0F'       AND OFF\n         NR    RTNCD,R0        HI-ORDER 4 BITS\nATOXRET  $SRET                RETURN HEX VAL IN R15\nATOXWK   DS    X              WORK AREA\n         TITLE 'N E T O P - ALTERNATE MASTER TICB SEARCH'\n***********************************************************************\n*                                                                     *\n* NAME: MAFIND                                                        *\n*                                                                     *\n* FUNCTION: TO SEARCH TICBS FOR ACTIVE MASTER CANDIDATE TO REPLACE AN *\n*        ENDED, LOST OR REQUESTED MASTER TERMINAL.                    *\n*                                                                     *\n* DESCRIPTION: IF AN ACTIVE CANDIDATE IS FOUND IT IS MARKED MASTER,   *\n*        OTHERWISE THE MAINLINE IS POSTED TO CLOSE THE PPO ACB TILL   *\n*        ANOTHER MASTER CANDIDATE LOGS ON.                            *\n*                                                                     *\n* ENTRY POINT: MAFIND                                                 *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              POINTER TO TICB           TICB@                        *\n*              RETURN ADDRESS IN EXIT    RET@                         *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     RPL@                                *\n*              POINTER TO TICB    TICB@                               *\n*              POINTER TO NIB     NIB@                                *\n*              WORK REGISTERS     WKA,WKB                             *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              RETURN             RET@                                *\n*                                                                     *\n* EXIT,NORMAL: BR RET@                                                *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: RELREQ, LOSTERM AND INBOUND(WITH PF3) EXITS              *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nMAFIND   $SINIT\n         L     WKB,@ACBPPO        SET UP BASE FOR ACB\n         TM    ACBOFLGS-IFGACB(WKB),ACBOPEN  IS IT OPEN?\n         BZ    MARET              IF NOT FORGET SEARCH\n         LA    DA@,TBUF          TEMP ISTDPOHD FOR STAT TEST\n         NI    POHSTAT,255-POHGEN     TURN OFF SOLICITED FLAG\n*        DROP  DA@\n         ST    TICB@,MASAVE   SAVE CURRENT TICB PTR\n         $CALL IDFIND,0       BUILD TICB LIST OF MASTER CANDIDATES\n         LTR   RTNCD,RTNCD    FIND ANY?\n         BNZ   NONEWMA        NO - CLOSE PPO AND USE SPO\n         LA    WKB,TICBLIST   LOAD INDEX REG\nMAFLOOP  CLC   @MATICB+1(3),1(WKB) IS THIS MASTER TICB @?\n         BNE   NEWMAFND       NO - MAKE IT NEW MASTER\n         TM    0(WKB),LASTPARM LAST TICB IN LIST?\n         BO    NONEWMA        YES - NO ALTERNATE MASTER FOUND\n         LA    WKB,4(,WKB)    NO - INCREMENT INDEX\n         B     MAFLOOP         AND TRY NEXT TICB\n*\nNEWMAFND L     TICB@,0(WKB)    CHANGE NEW\n         ST    TICB@,@MATICB    MASTER TICB @\n         OI    TISTATUS,TISMA     SET MASTER BIT IN TICB\n         MVC   NTP1NODE,TINAME INFORM OPERATOR\n         $CALL PUTLOG,NTP01MSG OF CHANGE IN MASTER\n         B     MATICBR         RETURN\n*\nNONEWMA  NI    POSTATUS,255-POSHVMA RESET 'HAVE MASTER' FLAG\n         POST  ECBMAIN,2      POST CLOSE OF PPO ACB\nMATICBR  L     TICB@,MASAVE   RESTORE CURRENT TICB PTR\nMARET    $SRET\n*\nMASAVE   DS    F\n         TITLE 'N E T O P - IDFIND SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: IDFIND                                                        *\n*                                                                     *\n* FUNCTION: TO DETERMINE, FROM THE PO HEADER, WHAT TERMINAL A         *\n*        MESSAGE IS TO GO TO.                                         *\n*                                                                     *\n* DESCRIPTION: IF MESSAGE GENERATED BY VTAM, RETURNS LIST OF          *\n*        MASTER TERMINAL TICB'S. IF MESSAGE GENERATED BY PO, SEARCHES *\n*        TICBPOOL FOR AN ACTIVE TERMINAL WITH THE ID IN THE PO        *\n*        HEADER. IF FOUND, RETURNS THE ADDRESS OF THAT TICB. IN ANY   *\n*        CASE, INDICATES IN THE RETURN CODE WHETHER DESTINATION WAS   *\n*        DETERMINED OR NOT.                                           *\n*                                                                     *\n* ENTRY POINT: IDFIND                                                 *\n*                                                                     *\n* INPUT REGISTERS:                                                    *\n*                                                                     *\n*            PARM                 PARM@   0=SELECT  1=ALL TICBS       *\n*            ADDRESS OF ISTDPOHD  DA@                                 *\n*            SUBROUTINE RETURN    RET@                                *\n*        OTHERS IGNORED                                               *\n*                                                                     *\n* OUTPUT: TICBLIST CONTAINS APPROPRIATE TICB PTRS                     *\n*        RETURN CODE IN REGISTER 15:  0 = FOUND                       *\n*                                     4 = NOT FOUND                   *\n*                                                                     *\n*        REGISTERS CHANGED:                                           *\n*                                                                     *\n*              ADDRESS OF TICB    TICB@                               *\n*              WKA,WKB            USED AS WORK REGISTERS              *\n*              RTNCD              CONTAINS RETURN CODE                *\n*                                                                     *\n* CALLED BY: OUTBOUND                                                 *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*        SUBROUTINE INTERNAL TO OUTBOUND EXIT                         *\n*                                                                     *\n***********************************************************************\n*\nIDFIND $SINIT\n*\n* SEARCH TICB POOL FOR ACTIVE TICB WITH THIS ID.\n*\n         SR    RTNCD,RTNCD        ZERO ORIGIN TICB INDICATOR\n         LA    WKD,TICBLIST-4     SET TICBLIST INDEX\n         LR    R0,WKD             SAVE FOR COMPARISON\nIDSTART  LA    TICB@,TICBS+TICBLEN  LOOP INDEX (IGNORE NETOP TICB)\n         LA    WKA,TICBLEN        INCREMENT\n         L     WKB,TICBLACT       COMPARAND - LAST ACTIVE TICB\nIDLOOP   TM    TISTATUS,TISACT    IS TERMINAL ACTIVE?\n         BZ    IDTEST             NO - FORGET THIS ONE\n         CLI   POHTID,0           RESP TO NETOP INTCMD?\n         BE    IDMCHK             YES\n         TM    POSTATUS,POSECHO   NO - SHOULD THIS MSG BE ECHOED?\n         BZ    IDSOLCHK             NO\n         TM    TIFLAGS2,TIF2ECHO  SUPPRESS ECHOING TO THIS TERMINAL?\n         BO    IDTEST             YES - BYPASS THIS TICB\n         CR    TICB@,RTNCD        IS THIS THE ORIGIN TICB?\n         BE    IDTEST               YES - BYPASS (ALREADY IN TICBLIST)\n         B     IDMCHK\nIDSOLCHK TM    POHSTAT,POHGEN       NO - SOLICITED MESSAGE?\n         BO    IDSOLC                 YES\n         LTR   PARM@,PARM@        PARM > 0 (BROADCAST)\n         BNZ   IDUSE              YES - SEND TO ALL TERMINALS\n         TM    TIFLAGS2,TIF2SOLO  ONLY SOLICITED MSGS TO TERMINAL?\n         BO    IDTEST             YES - BYPASS THIS TICB\nIDMCHK   EQU   *                  ECHO UNSOLICITED MSGS TO ALL TERMS\n*DMCHK   TM    TISTATUS,TISMCAND  IS TERMINAL MASTER CANDIDATE?\n*        BZ    IDTEST             NO\nIDUSE    LA    WKD,4(,WKD)        YES - UPDATE TICBLIST INDEX\n         ST    TICB@,0(WKD)       SAVE PTR IN TICBLIST\n         B     IDTEST\nIDSOLC   CLC   POHTID,TID         ID = TICB ID?\n         BNE   IDTEST             NO - TRY NEXT TICB\n*\n*        IF MCANDT NON-DISPLAY RESPONSE, ECHO TO ALL MCANDTS\n*\n         TM    TIFLAGS,TIFDSP     RESP. TO DISPLAY CMD?\n         BO    IDFOUND            YES\n         CLC   TICBMCCT,K1        ONLY 1 MASTER LOGGED ON?\n         BNH   IDFOUND            YES - NOBODY TO ECHO TO\n         OI    POSTATUS,POSECHO   NO - FLAG THIS MSG TO BE ECHOED,\n         MVC   DUMTICB(TICOPYL),TICB  COPY PARTIAL TICB\n         LR    RTNCD,TICB@         SAVE ORIGIN @\n         ST    TICB@,@ECHTICB       IN\n         ST    TICB@,TICBLIST        3 PLACES\n         LA    TICB@,DUMTICB       POINT TO COPY\n         LA    R1,IDSTART         SET CONTINUE ADDRESS\nIDINSCHG LH    WKA,TICMDLEN        GET CMD LEN\n         LH    WKD,TINAMLEN         INCR BY NODENAME LEN,\n         LA    WKB,4(WKD,WKA)       AND ' => '\n         CH    WKB,=H'40'          LENGTH > TICMD AREA?\n         BNH   IDSTCMDL            NO\n         LH    WKB,=H'40'          YES - USE MAX LENGTH\nIDSTCMDL STH   WKB,TICMDLEN        STORE IN TICB\n         LA    WKB,TICMD(WKD)      POINT AFTER NODENAME INSERT AREA\n         SH    WKA,K1              DECR CMD LEN\n         BNM   IDMV1               IF < 0,\n         SR    WKA,WKA              RESET TO 0\nIDMV1    EX    WKA,IDMVCMD1        MOVE OUT CMD\n         SH    WKD,K1              DECR NODENAME LEN\n         BNM   IDMV2               IF < 0,\n         SR    WKD,WKD              RESET TO 0\nIDMV2    EX    WKD,IDMVNAM         MOVE IN NODENAME, FOLLOWED BY\n         MVC   0(4,WKB),=C' => '     ARROW, THEN\n         EX    WKA,IDMVCMD2        MOVE BACK CMD PAST INSERT\n         LA    WKD,TICBLIST        POINT AFTER ORIGIN TICB FOR RESCAN\n         BR    R1                 THEN GO REGENERATE TICB LIST IF ECHO\n*                                  OR RETURN IF INTCMD RESPONSE\nIDTEST   BXLE  TICB@,WKA,IDLOOP   LOOP BACK TILL ALL ACT TICBS CHECKED\n         CR    R0,WKD             ANY TICBS FOUND?\n         BE    IDNFOUND           NO\n         OI    0(WKD),LASTPARM    YES - FLAG LAST TICB @\n         TM    POHSTAT,POHGEN     SOLICITED MESSAGE?\n         BO    IDSOLOK            YES\n         LA    TICB@,VTAMTICB     NO - USE VTAM TICB SO LOG LOOKS GOOD\n         B     IDRET\nIDSOLOK  L     TICB@,0(WKD)       YES - PUT LAST TICB FOUND IN TICB@\n         CLI   POHTID,0           RESP TO NETOP INTCMD?\n         BNE   IDORGCHK           NO\n         LA    WKA,NETPTICB       YES -\n         MVC   TIFLAGS-TICB(1,WKA),TIFLAGS  COPY FLAGS\n         LR    TICB@,WKA          PUT NETOP TICB @ IN TICB@\n         LA    R1,IDRET0          SET CONTINUE ADDRESS\n         CLC   TINAME(5),TICMD    'NETOP => ' ALREADY INSERTED?\n         BNE   IDINSCHG           NO - GO INSERT ORIGIN IN TICMD\n         B     IDRET0             YES - RETURN\nIDORGCHK LTR   RTNCD,RTNCD        ORIGIN TICB @ SAVED?\n         BZ    IDRET0             NO\n         LR    TICB@,RTNCD        YES - PUT ORIGIN TICB @ IN TICB@\n         B     IDRET0\nIDNFOUND TM    POHSTAT,POHRREQ    IS REPLY REQUESTED\n         BZ    IDRET4             NO\n         TM    POSTATUS,POSHVMA   IS THERE A MASTER?\n         BO    IDEFAULT           YES - USE IT\nIDRET4   LA    RTNCD,4            NO - RETURN NOT FOUND\n         B     IDRET              RETURN\nIDEFAULT L     TICB@,@MATICB      DEFAULT IS MASTER\nIDFOUND  ST    TICB@,TICBLIST\n         OI    TICBLIST,LASTPARM   FLAG LAST TICB PTR\nIDRET0   SR    RTNCD,RTNCD        INDICATE FOUND\nIDRET    $SRET                    RETURN\n*\nIDMVCMD1 MVC   TBUF(*-*),TICMD MOVE CMD OUT\nIDMVCMD2 MVC   4(*-*,WKB),TBUF MOVE CMD BACK IN\nIDMVNAM  MVC   TICMD(*-*),TINAME  INSERT SOURCE NODENAME\n         TITLE 'N E T O P - MESSAGE LOG SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* ENTRY: PUTLOG                                                       *\n*                                                                     *\n* FUNCTION: TO TIME STAMP AND ISSUE LOG MESSAGES                      *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              EX LENGTH,  MESSAGE PTR             PARM@              *\n*                 LENGTH IS BYTE 0  (IF ZERO, WTO ASSUMED)            *\n*                 MSG PTR IS BYTES 1-3                                *\n*              RETURN ADDRESS IN EXIT              RET@               *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGISTERS     WKA,WKB,WKD (WKC AVOIDED - ACB@)    *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: EVERYONE, MOSTLY                                         *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\nPUTLOG   $SINIT\n         LR    WKA,PARM@      SAVE PARM\n*\n*        I/O TO VTAMLOGO HAS BEEN DISABLED SINCE WE ARE GETTING A 001\n*        ABEND THAT I DON'T HAVE TIME TO FIX. ALL MESSAGES ARE\n*        WRITTEN TO SYSLOG AND ARE AVAILABLE USING QUEUE.\n*\n*        PUT   VTAMLOGO       GET BUFFER PTR (DISABLED)\n         LA    R1,LOGBUF      SET UP R1 WITH BUFFER ADDR (EQU PUT)\n         LR    LOG@,R1        SAVE IT\n         USING LOGREC,LOG@\n         LR    PARM@,WKA      RESTORE PARM\nPUTCLR   MVI   LOGASA,C' '    SINGLE SPACING\n         MVC   LOGWTLHD,BLANX CLEAR WTL PAD (FOR SYSLOG READABILITY)\n         MVC   LOGBL1,BLANX   CLEAR\n         MVC   LOGBL2,BLANX    PREFIX\n         STCM  PARM@,8,HEX    STORE LENGTH BYTE\n         SR    WKA,WKA        INSERT\n         ICM   WKA,1,HEX       LENGTH\n         BZ    PUTWTO         IF ZERO, ASSUME WTO BUFFER\n         C     WKA,=AL4(133-(LOGPRFL+1)) MAX RECORD LENGTH?\n         BNH   *+12           NO => USE SPECIFIED LENGTH\n         L     WKA,=AL4(133-(LOGPRFL+2)) YES=>SET MAX LENGTH - 1\n         MVI   LOGCONT,C'+'         AND SET TRUNCATE CHAR IN RECORD\n         MVC   LOGNODE,TINAME INSERT TERMINAL NAME\n         EX    WKA,PUTLOGMV   MOVE MSG TO LOG OUTPUT AREA\n         LA    WKA,LOGPRFL+1(WKA)  CALC RDW LL VALUE\n         B     PUTRDW         GO STORE IN LOGREC\n*\nPUTWTO   LH    WKA,0(PARM@)   PICK UP LENGTH\n         LR    WKB,WKA        COPY IT\n         SH    WKB,K5         REDUCE BY WTO PREFIX LENGTH +1 FOR EX\n         EX    WKB,PUTWTOMV   MOVE MSG TO LOG OUTPUT AREA\n         WTO   MF=(E,(1))     DO WTO (OR TPUT)\n         OI    POFLAGS,POFWTO FLAG WTO DONE FOR WTL CHECK\n         LA    WKA,LOGTIML(WKA)  CALC RDW LL VALUE\n*\nPUTRDW   SLL   WKA,16         SHIFT TO HI END\n         ST    WKA,LOGRDW     STORE IN RDW\n         TIME\n         SRL   R0,4           NO CENTISECS\n         STM   R0,R1,WORK     STORE TIME AND DATE\n         OI    WORK+3,X'0F'   OVERLAY DECISECS WITH VALID SIGN\n         MVC   TBUF(10),=X'402120204B21204B2120'\n         ED    TBUF(10),WORK  EDIT TIME FIELD\n         MVC   LOGTIME,TBUF+2 MOVE TIME TO LOG MSG\n         MVC   SENDTIME,TBUF+2 MOVE TIME TO MSG\nPUTLNCT  LH    WKA,LOGLN#     INCREMENT\n         LA    WKA,1(,WKA)     LINE COUNT\n         CH    WKA,PAGESIZE   END OF PAGE?\n         BL    PUTNPAGE       NO\n         MVI   LOGASA,C'1'    YES - SET ASA FOR SKIP,\n         L     WKD,LOGHDR     GET FULL LENGTH RDW\n         LR    WKA,WKD        COPY IT\n         SRL   WKA,16         SHIFT TO LO HALF\n         SH    WKA,LOGRDW     CALC REMAINING LENGTH\n         SH    WKA,K12        SUBTRACT 10 FOR DATE TEXT AND 2 FOR EX\n         BM    PUTLNCT1       <0 => WILL OVERLAY MSG DATA => SKIP DATE\n         LR    WKB,LOG@       CALCULATE START OF\n         AH    WKB,LOGRDW      UNCLEARED AREA\n         ST    WKD,LOGRDW     STORE NEW RDW IN BUFFER\n         MVI   0(WKB),C' '    CLEAR\n         EX    WKA,PUTCLRMV    REMAINDER OF RECORD\n         MVC   LOGDLIT,=C'DATE '  ADD DATE\n         UNPK  LOGDATE,DATE+1(3)   FIELD TO RECORD\nPUTLNCT1 LH    WKA,LOGPG#     INCREMENT\n         LA    WKA,1(,WKA)     PAGE COUNT\n         CH    WKA,EOFPGCNT   TIME TO WRITE EOF?\n         BL    PUTPGCNT       NO\n         CLOSE (VTAMLOGO)     YES - CLOSE,\n         OPEN  (VTAMLOGO,OUTPUT)  AND RE-OPEN MOD\n         SR    WKA,WKA        ZERO PAGE COUNT\nPUTPGCNT STH   WKA,LOGPG#     SAVE NEW PAGE COUNT\n         SR    WKA,WKA        ZERO LINE COUNT\nPUTNPAGE STH   WKA,LOGLN#     SAVE NEW LINE COUNT\n         PUT   SYSPRINT,(LOG@)  PRINT RECORD FROM VTAMLOGO BUFFER\n         TM    POSTATUS,POSSEND SEND TO TSO USERS?\n         BZ    PUTDTCHK       NO\n         NI    POSTATUS,255-POSSEND YES - RESET FLAG,\n         MVC   SENDUTXT,LOGTXT       MOVE TEXT TO CMD BUFFER\n         $CALL MGCR,SENDUBUF          AND SEND IT\nPUTDTCHK CLC   DATE+3(1),WORK+7  HAS DATE CHANGED?\n         BE    PUTWTL            NO - CONTINUE\n         MVC   DATE+1(3),WORK+5  YES - SAVE NEW DATE\n         CLI   STTIME,X'22'   ARE THERE MORE THAN 2 HOURS OF LOG?\n         BNL   PUTWTL         NO - DONT BOTHER TO SPINOFF\n         $CALL PRLOG          YES - RE-INITIALIZE LOG, SPINOFF SYSPRINT\n*\n*         FOLLOWING CODE SUPPORTS WTL FUNCTION\n*\nPUTWTL    TM    POFLAGS,POFWTO WTO ALREADY DONE?\n          BO    PUTWTLSK       YES - SKIP WTL\n          WTL   MF=(E,LOGREC) WRITE TO LOG\nPUTWTLSK  NI    POFLAGS,255-POFWTO  RESET FLAG\nPUTRET   $SRET                   RETURN\n*                                                                     *\nPUTLOGMV MVC   LOGMSG(*-*),0(PARM@)\nPUTWTOMV MVC   LOGNODE(*-*),4(PARM@)\nPUTCLRMV MVC   1(*-*,WKB),0(WKB)\n         TITLE 'N E T O P - SYSPRINT ALLOC,OPEN,CLOSE'\n***********************************************************************\n*                                                                     *\n* ENTRY: PRLOG                                                        *\n*                                                                     *\n* FUNCTION: TO INITIALIZE OR RE-INITIALIZE SYSPRINT                   *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              RETURN ADDRESS IN EXIT              RET@               *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGISTERS     WKA,WKB                             *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: MAINLINE, PUTLOG                                         *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\nPRLOG    $SINIT\n         TM    SYSPRINT+48,X'10' SYSPRINT OPEN?\n         BZ    PRLOGOAL        NO\n         CLOSE (SYSPRINT)      YES - CLOSE TO SPINOFF AND REALLOC\n         CLOSE (VTAMLOGO)      CLOSE, THEN RE-INITIALIZE -\n         XC    WORK,WORK       CLEAR AND\n         MVC   WORK+6(2),DATE+2 MOVE IN DAY #\n         CVB   WKA,WORK        CONVERT\n         D     WKA,K2          DIVIDE BY 2\n         LTR   WKA,WKA         IF REMAINDER ZERO,\n         BZ    PRLOPENV         GO RE-OPEN DISP=MOD\n         OPEN  (VTAMLOGI,OUTPUT) ELSE RE-OPEN VTAMLOG DISP=OLD\n         CLOSE (VTAMLOGI)      CLOSE TO WRITE EOF\n         B     PRLOPENV        GO RE-OPEN DISP=MOD\n*                              MUST BE INITIALIZATION\nPRLOGOAL $DYNAL LGOTUPF,VERB=2 FREE F(VTAMLOGO)\n         $DYNAL LGOTUP,VERB=1 ALLOC F(VTAMLOGO) DA('SYS1.VTAMLOG') MOD\n         BZ    PRLOGIAL       YES\n         CLC   S99ERROR,=X'0410' NO - DDNAME ALREADY IN USE?\n         BE    PRLOGIAL            YES - ASSUME OK\n         $AB   99                  NO - ABEND\nPRLOGIAL $DYNAL LGITUP,VERB=1 ALLOC F(VTAMLOGI) DA('SYS1.VTAMLOG')\n         BZ    PRLOPENV       YES\n         CLC   S99ERROR,=X'0410' NO - DDNAME ALREADY IN USE?\n         BE    PRLOPENV            YES - ASSUME OK\n         $AB   99                  NO - ABEND\nPRLOPENV OPEN  (VTAMLOGO,OUTPUT) OPEN VTAMLOG DISP=MOD\n         TM    VTAMLOGO+48,X'10' LOG OPEN?\n         BZ    PRLNOPEN        NO\n         $DYNAL PRTUP,VERB=1  ALLOC F(SYSPRINT) SYSOUT(A) (FREE=CLOSE)\n         BZ    PRLOPENS       YES\n         CLC   S99ERROR,=X'0410' NO - DDNAME ALREADY IN USE?\n         BE    PRLOPENS            YES - ASSUME OK\n         $AB   99                  NO - ABEND\nPRLOPENS OPEN  (SYSPRINT,OUTPUT)\n         TM    SYSPRINT+48,X'10' OK?\n         BO    PRLHDR          YES\n         MVC   NTP08DDN,SYSPRINT+40  MODIFY DDNAME IN MSG\nPRLNOPEN WTO   MF=(E,NTP08MSG)   INFORM OPERATOR\n         $AB   19,NODUMP         AND ABEND U19\nPRLHDR   UNPK  LOGHDRDT,DATE+1(3) MOVE DATE TO HEADER\n         PUT   SYSPRINT,LOGHDR   PRINT HEADER\n         PUT   SYSPRINT,LOGSKP    AND SKIP 2 LINES\n         MVC   LOGLN#,K3      SET LINE COUNT\n*\n*        VTAMLOGO HAS BEEN DISABLED\n*\n*        PUT   VTAMLOGO       GET BUFFER PTR\n*        MVC   0(125,R1),LOGHDR  INSERT HEADER\nPRLRET   $SRET\n         TITLE 'N E T O P - SND3270 SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: SND3270 SUBROUTINE                                            *\n*                                                                     *\n* FUNCTION: INSERT 3270 ORDERS INTO A MESSAGE FROM VTAM. UPDATE       *\n*        THE SCREEN LINE POINTER, SEND MESSAGE TO MULTIPLE TERMINALS. *\n*                                                                     *\n* DESCRIPTION: THIS ROUTINE MOVES THE MESSAGE TEXT TO SENDTXT AND     *\n*            AND INSERTS THE 3270 ORDERS INTO SENDORDR.               *\n*            THIS ROUTINE USES A TABLE OF SCREEN ADDRESSES AT         *\n*            LABEL LINE1 TO MAINTAIN A ROLLING OUTPUT AREA OF LINEMAX *\n*            LINES AND UPDATES THE CURRENT OUTPUT LINE POINTER        *\n*            TILNCT IN THE TICB.  IF IN NOROLL MODE, STACK IS CALLED  *\n*            TO STACK THE LINE.  WHEN A PA KEY IS EVENTUALLY HIT,     *\n*            RCV3270 CALLS UNSTACK WHICH IN TURN CALLS SND3270 FOR    *\n*            EACH LINE UNTIL A FULL SCREEN CONDITION ARISES OR ALL    *\n*            STACKED LINES ARE DISPLAYED.                             *\n*                                                                     *\n* ENTRY POINT: SND3270                                                *\n*                                                                     *\n*       AT ENTRY:                                                     *\n*                                                                     *\n*              TICBLIST CONTAINS TICB PTRS TO TARGET TERMINALS        *\n*              ISTDPOHD OR STKEL CONTAINS MSG                         *\n*              MSGLEN CONTAINS LENGTH-1                               *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              BASE FOR TICB      TICB@                               *\n*              ADDRESS OF ISTDPOHD  DA@                               *\n*              MSG LENGTH-1       MSGLEN                              *\n*              WORK REGS          WKA,WKB                             *\n*              SUBROUTINE RETURN  RET@                                *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 4                                                   *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: STACK TO STACK MESSAGES WHEN TERMINAL IN WAIT-FOR-ROLL COND. *\n*                                                                     *\n* CALLED BY: OUTBOUND EXIT, UNSTACK                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nSND3270 $SINIT\n         USING STKEL,STKEL@   STACK ELEMENT ADDRESSING (SET IN UNSTACK)\n*        PRINT NOGEN\n         MODCB AM=VTAM,       SET UP RPL FOR SEND(S)                   *\n               RPL=(RPL@),                                             *\n               ACB=ACBTERMS,                                           *\n               POST=SCHED,                                             *\n               OPTCD=SYN,                                              *\n               RESPOND=(EX,FME,NRRN)\n         PRINT GEN\n         ST    MSGLEN,SNDSAVE     SAVE LENGTH\n         SR    TICB@,TICB@        ZERO HI BYTE\n         LA    OUTX,TICBLIST-4    SET UP INDEX\nSNDLOOP  LA    OUTX,4(,OUTX)      INCREMENT TICBLIST INDEX\n         ICM   TICB@,7,1(OUTX)    GET 1ST TICB PTR\n         BZ    SNDEND             RETURN IF NO TICB PTRS\n         L     MSGLEN,SNDSAVE     RESTORE CURRENT MSG LEN\n         TM    POSTATUS,POSMLTSN  MULTIPLE SEND?\n         BZ    SNDNMLT            NO\n         TM    POSTATUS,POSINSRT  ACCEPTED/FAILED MSG?\n         BZ    SNDSETA            NO - DONT INSERT\n         TM    POSTATUS,POSECHO   ECHOED RESPONSE?\n         BO    SNDECHO            YES - GO DO INSERTION\n         B     SNDSETA            NO - BYPASS MSG EDIT AND MOVE\nSNDNMLT  MVC   SENDAT2(4),UNSENDAT  RE-INIT ATTRS\n         MVI   SENDAT1,LO         INIT LO-INTENS ATTR\n         MVI   SENDTXT,C' '       CLEAR SEND RECORD TO BLANKS\n         MVC   SENDTXT+1(L'SENDTXT-1),SENDTXT\n         TM    POFLAGS,POFUNSTK   UNSTACKING?\n         BZ    SNDLCHK            NO\n         LA    WKD,UNSENDSL-1     YES - (UNSTACK RETURNS L-1)\n         CR    WKD,MSGLEN             UNSEND TYPE MSG?\n         BNE   SNDSTOK                NO\n         MVC   UNSENDTM(UNSENDSL),STKDATA  YES - MOVE IN STACKED MSG\n         MVC   UNSENDAD,SENDADDR   AND LAST USED ADDR\n         MVC   TIUNADDR,SENDADDR  SAVE FOR 1ST NONSTACK UNSOL REPEATER\n         LA    WKA,UNSEND         LOAD MSG PTR\n         LA    WKB,UNSENDL        LOAD MSG LENGTH\n         B     SNDSEND             AND SEND TO SAME LINE ON SCREEN\nSNDSTOK  EX    MSGLEN,SNDMV2      MOVE MSG FROM STACK AREA\n         B     SNDSETA\n*\nSNDLCHK  LA    WKA,L'SENDTXT      COMPARE WITH\n         CR    MSGLEN,WKA          TEXT AREA LENGTH\n         BL    SNDMVMG            IF LOW, OK\n         BE    SNDMVDSH           IF HI,\n         LA    MSGLEN,1(,WKA)      USE MAX LENGTH\nSNDMVDSH MVC   SENDAT2+1,=C' --'  BLANK ATR2, DASH SF,ATR3\nSNDMVMG  EX    MSGLEN,SNDMV1      COPY MESSAGE INTO SND3270 BUFFER\n         TM    POHSTAT,POHGEN     SOLICITED?\n         BO    SNDHICK            YES\n         MVI   SENDAT1,HI         SET HI-INTENS ATTR\n         B     SNDSETA\nSNDHICK  TM    POFLAGS,POFHINT    MAKE THIS ONE HI INTENSITY?\n         BZ    SNDCLIN            NO\n         MVI   SENDAT1,HI         YES - SET HI-INTENS ATTR\n         NI    POFLAGS,255-POFHINT  AND RESET FLAG\nSNDCLIN  CLC   DAMSGRSP,=C'ACCEPT' IST097 ....  ACCEPTED MSG?\n         BE    SNDINS1            YES\n         TM    TIFLAGS,TIFDSP     DISPLAY IN PROGRESS?\n         BZ    SNDSETA            NO\n         CLC   DAMSGFAI,=C'IGNORE' IST0XX ....  IGNORED MSG?\n         BE    SNDNDSP            YES\n         CLC   DAMSGRSP,=C'FAILED' IST0XX ....  FAILED MSG?\n         BE    SNDNDSP            YES\n         CLC   DAMSGFAI,=C'FAILED' IST0XX ....  FAILED MSG?\n         BNE   SNDSETA            NO\n*                                 YES - RESET FLAGS AND COUNT, SINCE\n*                                  THERE WILL BE NO NULL MSG TO TRIGGER\n*                                  THE RESET IN OUTBOUND\nSNDNDSP  LH    WKA,TIDSPCT        DISPLAY IS COMPLETE\n         SH    WKA,K1             DECREMENT OUTSTANDING DISPLAY COUNT\n         BM    SNDRSTDC      IF -VE SOMETHING WENT WRONG - DONT UPDATE\n         STH   WKA,TIDSPCT          ELSE STORE IT\n         BP    SNDINS1            IF ZERO,\nSNDRSTDC NI    TIFLAGS,255-(TIFDSP+TIFDSP11+TIFCLUST) RESET DSP FLAGS\n*\nSNDINS1  OI    POSTATUS,POSINSRT  SET INSERT FLAG (SCOPE = SND3270)\nSNDECHK  TM    POSTATUS,POSECHO   ECHOED RESPONSE?\n         BO    SNDECHO            YES\n         CLI   POHTID,0           NETOP TICB ID?\n         BNE   SNDNINT            NO - NOT POFINTCM RESPONSE\n         LA    TICB@,NETPTICB     YES - USE NETOP TICB FOR CMD INSERT\n         B     SNDNINT\nSNDECHO  C     TICB@,@ECHTICB     IS THIS THE SOURCE TICB?\n         BE    SNDNINT            YES\n         LA    TICB@,DUMTICB      NO - USE DUMMY TICB FOR CMD INSERT\n         NI    POSTATUS,255-POSINSRT TURN OFF TO PREVENT RE-INSERTION\nSNDNINT  LH    WKA,TICMDLEN       PICK UP LAST CMD LEN\n         LA    WKB,L'SENDTXT      INSERT\n         SR    WKB,WKA             CMD INTO\n         CR    WKB,MSGLEN           SEND AREA,\n         BH    SNDROOM               RIGHT JUSTIFIED\n         LR    WKD,MSGLEN\n         LR    R15,WKD\n         SR    WKD,WKB                 TRUNCATED\n         SR    WKA,WKD                  IF NECESSARY,\n         BNP   SNDRLTB                   (UNLESS NO ROOM)\n         LR    WKB,R15                    TO AVOID\nSNDROOM  BCTR  WKA,0                       OVERLAYING\n         LA    WKB,SENDTXT(WKB)             REPLY\n         EX    WKA,SNDMVCMD                  TEXT\n         MVI   0(WKB),SF          HI-INTENSITY\n         MVI   1(WKB),HI           INSERTION\n         LA    MSGLEN,L'SENDTXT+1 SET UP FULL TEXT LENGTH IN CASE STACK\nSNDRLTB  L     TICB@,0(,OUTX)     RESTORE TICB @ IN CASE MODIFIED\nSNDSETA  LH    WKA,TILNCT         LOAD CURRENT LINE NUMBER\n         LR    WKB,WKA            DUP CURRENT LINE NUMBER\n         SLA   WKB,1              MULT BY TWO\n         LA    WKB,LINE1(WKB)     CURRENT BUFFER ADDRESS PTR\n         MVC   SENDADDR,0(WKB)    SET UP BUFFER ADDRESS\n         TM    POFLAGS,POFUNSTK   UNSTACKING?\n         BO    SNDINCR            YES\n*\nSNDSCHK  TM    POHSTAT,POHGEN     SOLICITED?\n         BZ    SNDUNCK            NO - GO CHECK FOR REPEATER\n         NI    TIFLAGS,255-TIFUNSOL YES - RESET LAST DISPLAYED MSG FLAG\nSNDRCHK  TM    TIFLAGS,TIFWTROL   WAITING FOR ROLL?\n         BZ    SNDINCR            NO\n         LA    MSGLEN,11(,MSGLEN) YES - INCREMENT FOR TIME FIELD\n         $CALL STACK,SENDTIME,(MSGLEN)  YES - STACK MESSAGE\n         B     SNDSEND             THEN OUTPUT NEW STACK COUNT\n*\nSNDUNCK  CP    UNSOL#,KP1         REPEAT COUNT ZERO?\n         BH    SNDTUCK            NO - REPEATER\nSNDFLUN  OI    TIFLAGS,TIFUNSOL   YES - FLAG LAST DISPLAYED MSG,\n         MVC   TIUNADDR,SENDADDR   SAVE 3270 BUFAD,\n         B     SNDRCHK             AND GO CHECK FOR ROLL\nSNDTUCK  TM    TIFLAGS,TIFUNSOL   IS LAST DISPLAYED MSG UNSOL?\n         BZ    SNDFLUN            NO - GO FLAG IT NOW\n         TM    TIFLAGS,TIFHELP    HELP SCREEN DISPLAYED?\n         BO    SNDRCHK            YES - SUPPRESS SHORT UNSOL MSGS\n         MVC   UNSENDTM,SENDTIME   MOVE TIME FIELD TO GIVE LATEST TIME\n         UNPK  UNSEND#,UNSOL#     UNPACK UNSOL COUNT\n         OI    UNSEND#+1,X'F0'    FIX UP SIGN\n         MVC   UNSENDAD,TIUNADDR  YES - SET UP SHORT UNSOL. MSG\n         LA    WKA,UNSEND         LOAD MSG PTR\n         LA    WKB,UNSENDL        LOAD MSG LENGTH\n         TM    TIFLAGS,TIFWTROL   WAITING FOR ROLL?\n         BZ    SNDSEND            NO - SEND TO SAME LINE ON SCREEN\n         $CALL STACK,UNSENDTM,UNSENDSL YES - STACK MESSAGE,\n         B     SNDSEND               THEN OUTPUT NEW STACK COUNT\n*\nSNDINCR  LA    MSGLEN,SENDL       LOAD FULL LENGTH\n         CLI   SENDAT3,C'-'       3RD ATTR DASHED?\n         BNE   SNDLOK             NO\n         SH    MSGLEN,K2          YES - DECR BY LENGTH OF MISSING SFS\nSNDLOK   LA    WKA,1(,WKA)        INCR CURRENT LINE NUMBER\n         CH    WKA,LINEMAX        ARE WE PAST END?\n         BH    SNDLAST            YES\n         LA    MSGLEN,SENDSEPL(,MSGLEN)  ADD LENGTH OF SEPARATOR\n         B     SNDSETL\nSNDLAST  SR    WKA,WKA            RESET TO LINE ONE\n         TM    TIFLAGS2,TIF2ROLL  ROLL MODE?\n         BO    SNDSETL            YES\n         OI    TIFLAGS,TIFWTROL   NO - SET WAITING FOR ROLL FLAG\nSNDSETL  STH   WKA,TILNCT         UPDATE CURRENT LINE #\n*\n* ISSUE SEND TO TRANSMIT THE MESSAGE.\n*\n         LA    WKA,SENDORDR       LOAD DEFAULT AREA PTR\n         LR    WKB,MSGLEN         LOAD DEFAULT MSG LENGTH\nSNDSEND  L     R15,TICID          LOAD CID FOR ADDRESSED TERMINAL\n         SEND  RPL=(RPL@),        USE PRESET RPL                       *\n               AREA=(WKA),        SET AREA IN CASE INT3270 CALLED      *\n               ARG=(R15),         SET CID FOR TERMINAL                 *\n               RECLEN=(WKB)       LENGTH CAN VARY\n         LTR   RTNCD,RTNCD        OK?\n         BZ    SNDOK              YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    SNDSEND             THEN RETRY\n         CH    ACTCD,DAMAGE       IF TERMINAL IS NOT AVAILABLE\n         BNE   SNDDAMG            AND\n         TM    POHSTAT,POHRREQ    REPLY WAS REQUESTED\n         BZ    SNDDAMG            AND\n         L     TICB@,@MATICB      MESSAGE NOT FOR MASTER\n         CLC   RPLARG,TICID       THEN\n         BE    SNDDAMG            ROUTE MESSAGE TO MASTER:\n         B     SNDSEND            AND RETRY\nSNDDAMG  CH    RTNCD,RETRY\n         BE    SNDSEND            RETRY\nSNDOK    TM    0(OUTX),LASTPARM   IF NOT LAST TICB PTR\n         BO    SNDEND              ...\n         OI    POSTATUS,POSMLTSN   FLAG MULTIPLE SEND, THEN\n         B     SNDLOOP             SEND OUTPUT TO NEXT TERMINAL\nSNDEND   NI    POSTATUS,255-(POSMLTSN+POSINSRT+POSECHO) RESET FLAGS\n         $SRET                    RETURN\n*\nSNDMVCMD MVC   2(*-*,WKB),TICMD        MOVE CMD INTO SEND AREA\nSNDMV1   MVC   SENDTXT(*-*),DATX        MOVE INTO SEND AREA\nSNDMV2   MVC   SENDTIME(*-*),STKDATA   MOVE INTO SEND AREA\nSNDSAVE  DS    F              SAVE WORD\n         TITLE 'N E T O P - MESSAGE STACK SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: STACK                                                         *\n*                                                                     *\n* FUNCTION: TO STACK MESSAGES FOR TERMINALS IN NO-ROLL MODE WHEN AN   *\n*        AWAITING ROLL CONDITION (FULL SCREEN) IS DETECTED.           *\n*                                                                     *\n* ENTRY POINTS: STACK                                                 *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              MSG & LENGTH-1     PARM@                               *\n*              TICB REG           TICB@                               *\n*              RETURN ADDRESS     RET@                                *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGS          WKA,WKB                             *\n*              RETURN ADDRESS     RET@                                *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: SEND3270 SUBR                                            *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nSTACK    $SINIT\n         LR    WKD,PARM@      SAVE MSG PTR\n         LR    WKB,PARM@      ISOLATE\n         SRL   WKB,24          LENGTH-1\n         LA    WKB,6(,WKB)    INCREMENT LENGTH FOR ELEMENT PREFIX\n         GETMAIN RC,LV=(WKB)   AND GETMAIN STACK ELEMENT\n         LTR   RTNCD,RTNCD    OK?\n         BZ    STKCHECK\n         LA    WKA,STKUNM     SET UP STACK STORAGE\n         LA    WKB,STKUNML     UNAVAILABLE WARNING MSG\n         MVC   STKUNMCT,=X'40202120'  EDIT\n         ED    STKUNMCT,TISTKCT    INTO MSG\n         B     STKRET         RETURN\nSTKCHECK TM    TISTATUS,TISTACK STACK ALREADY EXISTS?\n         BZ    STKNOT         NO\n         L     STKEL@,TITAIL@ YES - PICK UP LAST STACK ELEMENT\n         USING STKEL,STKEL@   STACK ELEMENT ADDRESSING\n         ST    PARM@,STKNXEL  CHAIN NEW ELEMENT\n         ST    PARM@,TITAIL@  SET NEW TAIL POINTER\n         B     STKZNX         JUMP STACK SET UP\n         DROP  STKEL@\n         USING STKEL,PARM@    STACK ELEMENT ADDRESSING\nSTKNOT   ST    PARM@,TIHEAD@  NO STACK - SET UP HEAD\n         ST    PARM@,TITAIL@   AND TAIL POINTERS\nSTKZNX   XC    STKNXEL,STKNXEL ZERO NEXT STACK ELEMENT PTR\n         STH   WKB,STKELEN    SET ELEMENT LENGTH\n         SH    WKB,K7         DECR. ELEMENT LENGTH FOR DATA MOVE\n         EX    WKB,STKMV      MOVE DATA TO ELEMENT\n         LA    WKA,STKM       SET UP STACK\n         LA    WKB,STKML       COUNT WARNING MSG\n         MVI   STKM+1,X'C2'   SET DEFAULT WCC\n         AP    TISTKCT,KP1    INCREMENT ELEMENT COUNT\n         MVC   STKMCT,=X'40202120'  EDIT\n         ED    STKMCT,TISTKCT    INTO MSG\n         TM    TISTATUS,TISTACK STACK ALREADY EXISTS?\n         BO    STKSOLCK         YES\n         OI    TISTATUS,TISTACK NO - FLAG STACK OPEN\n         B     STKALARM          AND RING ALARM\nSTKSOLCK TM    POHSTAT,POHGEN SOLICITED MSG?\n         BO    STKRET         YES\n         LA    WKB,STKMSL     NO - SET UP SHORT MSG LENGTH AND\nSTKALARM MVI   STKM+1,X'C6'    RING ALARM\nSTKRET   $SRET                RETURN\n*\nSTKMV    MVC   STKDATA(*-*),0(WKD) MOVE DATA TO STACK ELEMENT\n         DROP  PARM@\n         TITLE 'N E T O P - MESSAGE UNSTACK SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: UNSTACK                                                       *\n*                                                                     *\n* FUNCTION: TO UNSTACK MESSAGES FOR TERMINALS IN NO-ROLL MODE WHEN AN *\n*        AWAITING ROLL CONDITION (FULL SCREEN) IS ALLEVIATED BY PA KEY*\n*                                                                     *\n* ENTRY POINTS: UNSTACK                                               *\n*                                                                     *\n* INPUT:                                                              *\n*                                                                     *\n*       POFSTDEL \u00ac ON = UNSTACK AND SEND TILL FULLSCREEN/EMPTY STACK  *\n*       POFSTDEL ON   = DELETE COMPLETE STACK WITHOUT SENDING         *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              TICB REG           TICB@                               *\n*              RETURN ADDRESS     RET@                                *\n*                                                                     *\n* REGISTERS AT SND3270 CALL:                                          *\n*                                                                     *\n*              DATA LENGTH - 1    MSGLEN                              *\n*              STACK ELEMENT PTR  STKEL@                              *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGS          WKA,WKB                             *\n*              RETURN ADDRESS     RET@                                *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: SND3270                                                      *\n*                                                                     *\n* CALLED BY: RCV3270, CLSDST                                          *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nUNSTACK  $SINIT\n         OI    POFLAGS,POFUNSTK  FLAG UNSTACKING MSGS (FOR SND3270)\n         L     STKEL@,TIHEAD@ PICK UP TOP STACK ELEMENT\n         USING STKEL,STKEL@   STACK ELEMENT ADDRESSING\nUNSLOOP  LH    R0,STKELEN     LOAD ELEMENT LENGTH\n         TM    POFLAGS,POFSTDEL  DELETE STACK?\n         BO    UNSFREE        YES - BYPASS DATA MOVE\n         LR    MSGLEN,R0      COPY IT\n         SH    MSGLEN,K7      DECR. ELEMENT LENGTH FOR DATA MOVE\n         SP    TISTKCT,KP1    DECR. STACK ELEMENT COUNT\n         $CALL SND3270        SEND UNSTACKED MESSAGE\nUNSFREE  L     WKA,STKNXEL    SAVE CHAIN POINTER TO NEXT ELEMENT\n         FREEMAIN RC,LV=(0),A=(STKEL@)  AND FREEMAIN CURRENT ELEMENT\n         LTR   STKEL@,WKA     RELOAD CHAIN POINTER TO NEXT ELEMENT\n         BNZ   UNSRCHK        ZERO? (EMPTY STACK?)\n         NI    TISTATUS,255-TISTACK  YES - RESET FLAG\n         ZAP   TISTKCT,KP0    DECR. STACK ELEMENT COUNT\n         LA    RTNCD,RCVNRMSG      SET NO RESP MSG RC FOR INBOUND\n         B     UNSRET          AND RETURN\nUNSRCHK  TM    TIFLAGS,TIFWTROL  WAITING FOR ROLL?\n         BZ    UNSLOOP           NO - GO UNSTACK NEXT MSG\n         ST    STKEL@,TIHEAD@ STORE NEW HEAD POINTER\n         LA    WKA,STKM       SET UP STACK\n         LA    WKB,STKML       COUNT WARNING MSG\n         MVI   STKM+1,X'C6'    AND RING ALARM AS WELL\n         MVC   STKMCT,=X'40202120'  EDIT\n         ED    STKMCT,TISTKCT    INTO MSG\n         LA    RTNCD,RCVRMSG    SET RESPONSE MSG RC FOR INBOUND\nUNSRET   NI    POFLAGS,255-(POFUNSTK+POFSTDEL)  RESET FLAGS\n         $SRET                RETURN\n*\n         DROP  STKEL@\n         TITLE 'N E T O P - INT3270 SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: INT3270 SUBROUTINE                                            *\n*                                                                     *\n* FUNCTION: TO TRANSMIT 3270 ORDERS THAT SET UP THE INITIAL SCREEN    *\n*        FORMAT. THE BEGIN BRACKET BIT IS SET IN THE RPL BY THE       *\n*        LOGON EXIT FOR A FIRST TIME INITIALIZATION.                  *\n*                                                                     *\n* ENTRY POINTS: INT3270                                               *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              CMD ABR LENGTH     PARM@                               *\n*              INT MSG LENGTH     MSGLEN                              *\n*              RETURN ADDRESS IN CALLER  RET@                         *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              RPL REG            RPL@                                *\n*              WORK REGS          WKA,WKB                             *\n*              RETURN ADDRESS     RET@                                *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: LOGON EXIT AND RCV3270 SUBR FROM INBOUND EXIT            *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nINT3270  $SINIT\n         LA    WKA,INTLEN     SET UP LENGTH\n         LTR   PARM@,PARM@    CMD TO BE INSERTED?\n         BZ    INTSEND        NO\n         CH    PARM@,=X'0410' ARBITRARILY TOO LARGE?\n         BH    INTSEND        YES - IGNORE PARM\n         LA    WKA,3(WKA,PARM@) YES - INSERT\n         BCTR  PARM@,0                     LAST CMD IN\n         EX    PARM@,INTCMD                     INT MSG\nINTSEND  XC    TILNCT,TILNCT      SET TO LINE 1\n         SEND  RPL=(RPL@),                                             *\n               ACB=ACBTERMS,                                           *\n               AREA=INTTEXT,                                           *\n               RECLEN=(WKA),                                           *\n               POST=RESP,                                              *\n               OPTCD=SYN,                                              *\n               RESPOND=(NEX,FME,NRRN)  BB SEND MUST REQUEST +VE RESP\n         LTR   RTNCD,RTNCD        OK?\n         BZ    INTRET0            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    INTSEND             THEN RETRY\n         LA    RTNCD,4             ELSE RETURN NO GO\n         B     INTRET\nINTRET0  SR    RTNCD,RTNCD         SAY ALL IS WELL (RTNCD=0)\nINTRET   $SRET\n*\nINTCMD   MVC   INTCSUF(*-*),TIABR     MOVE ABBREV. CMD INTO INT MSG\n         TITLE 'N E T O P - DATA AREAS'\n*\n***********************************************************************\n*                                                                     *\n*                                 DATA AREAS                          *\n*                                                                     *\n*        ADDRESSIBILITY VIA  DBASE1@ AND DBASE2@                      *\n*        ACBTERMS IS LAST SYMBOL REQUIRING A BASE REGISTER - DONT ADD *\n*        ANY BASED SYMBOLS AFTER IT.                                  *\n*                                                                     *\n***********************************************************************\n*\n         ORG   NETOP+((*-NETOP)/4096+1)*4096   ALIGN TO PAGE BOUNDARY\n*              (LINKEDIT WITH ' PAGE NETOP' - MAKES DEBUGGING EASIER)\n*\n@DBASE2  DC    A(*+4096)          BASE 2 FOR DATA\nMAINSA   DC    18F'0'             MAINLINE SAVE AREA\nEXITSA   DC    18F'0'             EXIT SAVE AREA\nERRORSA  DC    18F'0'             ERROR EXIT SAVE AREA\nENDSA    DC    18F'0'             TPEND OR ABEND EXIT SAVE AREA\n*\n@HELPM   DC    A(HELPM)           1ST LEVEL HELP MESSAGE PTR\n@HELPM2  DC    A(HELPM2)          PF2 HELP MESSAGE PTR\n@TRTTAB  DC    A(TRTTAB)          TRT TABLE PTR\n@MATABLE DC    A(MATABLE)         MATABLE PTR\n@MATICB  DC    F'0'               ADDRESS OF MASTER'S TICB\n@SAVACB  DC    F'0'               LAST ACB TO SATISFY RCVCMD\n@ECHTICB DS    F'0'           TICB @ FOR USE WHEN ECHOING RESPONSES\n@TCAST   DS    A                  TCAS TSB TABLE\n@ACBPPO  DC    A(ACBPPO)\n@ACBSPO  DC    A(ACBSPO)\nABREGS   DS    2F                 ABEND REGS SAVE AREA\nECBMAIN  DC    F'0'               MASTER LOGON AND CLOSEDOWN ECB\nNULL     DC    F'0'               FULLWORD OF ZEROS\nCLSDLAY  DC    F'50'              1/2 SEC DELAY\nOPNDLAY  DC    F'1500'            15 SEC DELAY\nRANGCHAR DS    F                  RANGE FORMAT CHAR/PTR\nRANGHEX  DS    H                  RANGE FORMAT CHAR IN HEX\nRANGEND  DS    H                  RANGE FORMAT LIMIT IN HEX\nHEX      DC    CL2'  '            HEX CHARACTERS FROM CVHX SUBROUTINE\n         DC    CL2'  '            HEX OVERFLOW - DO NOT MOVE\nHEXTOBE  DC    XL2'0000'          BINARY TO BE HEX'D\nPOID     DC    XL1'00'            LAST ID ASSIGNED TO A TERMINAL\nPOSTATUS DC    XL1'00'            PO STATUS BYTE\nPOSCLSDN EQU   B'10000000'  80    CLOSEDOWN FLAG\nPOSHVMA  EQU   B'01000000'  40    MASTER HAS BEEN LOGGED ON\nPOSMLTSN EQU   B'00100000'  20    MULTIPLE SEND IN PROGRESS\nPOSINSRT EQU   B'00010000'  10    MOMENTARY INSERT SIGNAL FOR SND3270\nPOSTEST  EQU   B'00001000'  08    TSO TEST JOB AFTER INITIALIZATION\nPOSSEND  EQU   B'00000100'  04    SEND TO VTAM SYSTEM PGMRS ON TSO\nPOSABEND EQU   B'00000010'  02    ESTAE EXIT ENTERED\nPOSECHO  EQU   B'00000001'  01    ECHO THIS MSG TO OTHER MCANDTS\n*\nPOFLAGS  DC    XL1'00'            PO FLAGS BYTE\nPOFOSCMD EQU   B'10000000'  80    ISSUE OS CMDS DURING INITIALIZATION\nPOFINTCM EQU   B'01000000'  40    INTERNAL CMD (RCVVTAM->OUT/INBOUND)\nPOFDSP   EQU   B'00100000'  20    MOMENTARY DISPLAY SIGNAL (INBOUND)\nPOFCFAIL EQU   B'00010000'  10    CLOSE FAILURE FIRST TIME FLAG\nPOFHINT  EQU   B'00010000'  10    HI INTENSE SIGNAL (RCVVTAM->SND3270)\nPOFRANG  EQU   B'00001000'  08    MOMENTARY RANGE SIGNAL (INBOUND)\nPOFSTDEL EQU   B'00000100'  04    DEL SIGNAL (RCV3270,CLSDST->UNSTACK)\nPOFUNSTK EQU   B'00000010'  02    UNSTACK SIGNAL (UNSTACK->SND3270)\nPOFWTO   EQU   B'00000001'  01    WTO DONE - NO NEED FOR WTL(RESERVED)\n*                                 PF2 CONTROL KEYWORDS AND MASKS\nPF2KWDS  DC    CL5'NROLL'         NROLL OR ROLL\n         DC    AL1(255-TIF2ROLL,TIF2ROLL)  -VE AND +VE MASKS\n         DC    CL5'NAUTO'\n         DC    AL1(TIF2AUTO,255-TIF2AUTO)\n         DC    CL5'NECHO'\n         DC    AL1(TIF2ECHO,255-TIF2ECHO)\n         DC    CL5'NSOLO'\n         DC    AL1(255-TIF2SOLO,TIF2SOLO)\n         DC    CL5'NLOGD'\n         DC    AL1(255-TIF2LOGD,TIF2LOGD)\n         DC    AL1(255)\n*\nINTBUFL  DS    H                  INTERNAL CMD BUFFER LENGTH\nINTBUF   DS    CL28               INTERNAL CMD BUFFER\n         ORG   INTBUF\nINTAID   DC    X'404040114040'    AID _ _ SBA _ _\nINTNODE  DS    CL8                NODENAME\n         ORG   INTNODE\nINTFDUMP DS    C'F DUMPMON,NCP='  F DUMPMON CMD AREA\nINTDNODE DS    CL8                370X NODENAME\n         ORG\nFDUMP    DC    C'F DUMPMON,NCP='  F DUMPMON CMD TEXT\n*\nK1       DC    H'1'               CONSTANT\nK2       DC    H'2'               CONSTANT\nK3       DC    H'3'               CONSTANT\nK4       DC    H'4'               CONSTANT\nK5       DC    H'5'               CONSTANT\nK6       DC    H'6'               CONSTANT\nK7       DC    H'7'               CONSTANT\nK8       DC    H'8'               CONSTANT\nK9       DC    H'9'               CONSTANT\nK10      DC    H'10'              CONSTANT\nK12      DC    H'12'              CONSTANT\nK13      DC    H'13'              CONSTANT\nK36      DC    H'36'              CONSTANT\nKPOHLEN  DC    AL2(POHLEN)        CONSTANT - PO HEADER LENGTH\nRETRY    DC    AL2(USFRESSU)      ACTION CODE FOR RETRIABLE ERROR\nDAMAGE   DC    AL2(USFDAMGE)      ACTION CODE FOR DAMAGE ERROR\nKP0      DC    P'0'               CONSTANT\nKP1      DC    P'1'               CONSTANT\nKP7      DC    P'7'               CONSTANT\n*\nUNSOL    DC    CL140' '       UNSOLICITED MSG SAVE AREA(ASSUME MAX 140)\nUNSOL#   DC    PL2'1'         UNSOLICITED MSG REPEAT #\nMAXUNSOL DC    PL2'50'        MAX UNSOLICITED REPEATS BEFORE INACT\n*\nAID      DS    X              AID FROM INPUT AREA\nUPPER    DS    CL7            1ST 7 CHARS IN UPPERCASE\nBLANX    DC    CL20' '        GENERAL PURPOSE BLANK FIELD\n*\n*        CAREFUL -- LOWERCASE TEXT (NET TO KLOGON)\n*\nNET      DC    C' net,'       LONG FORM TRIGGER\nNETSOL   DC    C'NETSOL'      F NETSOL TRIGGER\nTEST     DC    C'TEST'        F TEST TRIGGER\nSUPP     DC    C'SUPP'        F SUPP TRIGGER\nDLONG    DC    C'display '     VARIATIONS\nNETID    DC    C'net,id='     INSERT TEXT FOR ABBREV. CMDS\nDISPLAY  DC    C'd net,id='   INSERT TEXT FOR IMPLICIT DISPLAY CMD\nVARYA    DC    C'v net,act,id='   INSERT TEXT FOR PF12 CMD\nVARYII   DC    C'v net,inact,i,id='   INSERT TEXT FOR PF6 CMD\nVARYI    DC    C'v net,inact,id='     INSERT TEXT FOR PF8 CMD\nMODIFY   DC    C'f net,id='      INSERT TEXT FOR PF4 CMD\nKLOGON   DC    C'logon='      INSERT TEXT FOR PF10 CMD\n*\nSENDUBUF DC    AL2(SENDUL,0)  OS SEND CMD BUFFER\n         DC    C'SE '''\nSENDUTXT DS    CL72\n         DC    C''',LOGON,USER=(&SENDLST)'\nSENDUL   EQU   *-SENDUBUF\nSENDPTCH DC    CL20' '        ZAP IN NEW USERIDS HERE AND UPDATE LENGTH\n*\nNEW082   DC    C'DEV='\nNEWDEV   DS    CL5\n         DC    C',ALLOC= '\nNEWALC   DS    CL8\n         DC    C',UID= '\nNEWUID   DS    CL7\n         DC    C' '\nNEWASID  DS    CL4\n         DC    C') ,SIMLOG='\nNEWSIM   DS    CL8\nNEW082L  EQU   *-NEW082\n*\n*     WORK AREA WHERE SND3270 PREPARES OUTPUT LINE\n*\nSENDORDR DC    X'F1C21140F83CC14F0011'\nSENDADDR DC    XL2'4040'      SCREEN BUFFER ADDRESS SET BY SND3270\nSENDTIME DC    CL8' '         TIMESTAMP FIELD\n         DC    X'1D'          SF\nSENDAT1  DC    X'60'          ATTRIBUTE BYTE FOR OUTPUT LINE\nLO       EQU   X'60'          LO-INTENS\nHI       EQU   X'E8'          HI-INTENS\nSENDTXT  DC    CL69' '        MESSAGE TEXT\nSENDAT2  DC    X'1D60'        FILL ATTR - SAVE SPACE FOR CMD INSERTION\nSENDAT3  DC    X'1D60'        RESET ATTR TO ENSURE NEXT TIME FIELD LO\nSENDL    EQU   *-SENDORDR     LENGTH OF MESSAGE\nSENDSEPA DC    80C'-'         SEPARATOR LINE\nSENDSEPL EQU   *-SENDSEPA     LENGTH OF SEPARATOR LINE\n*\nUNSEND   DC    X'F1C211'      SHORT UNSOL MSG TO UPDATE\nUNSENDAD DC    XL2'4040'       UNSOL COUNT, OVERWRITING\nUNSENDTM DC    CL8' '           'IST' TEXT OF UNSOL MSG\n         DC    X'1DE8'        HI ATTR FOR UNSOL MSG\nUNSEND#  DC    CL2' '         REPEAT COUNT\nUNSENDSL EQU   *-UNSENDTM     SHORT LENGTH FOR STACKING\nUNSENDAT DC    X'1D60'        LO ATTR FOR REST OF LINE AND FOR SENDAT2\nUNSENDL  EQU   *-UNSEND       LENGTH FOR SENDING               REFRESH\n         DC    X'1D60'        LO ATTR FOR SENDAT3 REFRESH\n*\nNULLM    DC    X'F1C211C1E3131140F83CC14F00'\n*\nNAUTM    DC    X'F1C01140F83CC14F0011C1E33CC25F0011C1E3'\nNAUTABR  DS    CL20\n*\nINVALM   DC    X'F1C61140F83CC14F001140F8'\n         DC    C'invalid from '\nINVALTRM DS    CL8\nINVALML  EQU   *-INVALM\n*\nINVALK   DC    X'F1C61140F83CC14F001140F8'\n         DC    C'invalid input'\nINVALKL  EQU   *-INVALK\n*\nDCONM    DC    X'F1C61140F8'\n         DC    C'disconnect from '\nDCONMNAM DS    CL8\n         DC    X'11C1E313'\nDCONMABR DS    CL8\nDCONML   EQU   *-DCONM\n*\nSTKM     DC    X'F1C21140F81DE8'\nSTKMCT   DS    CL4\nSTKMSL   EQU   *-STKM         SHORT LENGTH\n         DC    C' messages stacked  '\nSTKML    EQU   *-STKM         FULL LENGTH\n*\nSTKUNM   DC    X'F1C61140F81DE8'\n         DC    C'no storage -'\nSTKUNMCT DS    CL4\n         DC    C' stacked'\nSTKUNML  EQU   *-STKUNM\n*\nNOTICBM  DC    X'F1C7114EC11DE8'\nNOTICBLG DC    C'LOGON',C' '\nNOTICBRJ DC    C'REJECTED',C' -- MAXIMUM TERMINALS EXCEEDED'\nNOTICBML EQU   *-NOTICBM\n*\nRLRQM    DC    X'F1C7114E401DE8'\n         DC    C'THIS TERMINAL REQUESTED BY ANOTHER APPLICATION'\n         DC    X'114FD7'\n         DC    C'IF NOT MASTER IT WILL BE RELEASED'\nRLRQML   EQU   *-RLRQM\n*\nCLOSM    DC    X'00000100'    TERM ID NON-ZERO - FAILS NETPTICB CHECK\n         DC    15C'*',CL11' '\nCLOSMSG  DC    C'NETOP CLOSING DOWN'\n         DC    CL11' ',15C'*'\nCLOSML   EQU   *-CLOSM-4-1\n*\nOFFMSG   DC    C'LOGOFF'\n*\nABMSG    DC    AL2(ABMSGL,0)  RDW\n         DC    C'-',C'ABEND ' ASA SKIP, TEXT\nABMSGAC  DC    3CL2' '        ABEND CODE\nABMSGRC  DC    CL2' '         REASON CODE\nABMSGL   EQU   *-ABMSG\n*\nLOSMSG   DC    C'LOST'\nLOSMSGRC DC    C'   '\nLOSMSGL  EQU   *-LOSMSG\n*\nRELMSG   DC    C'RELEASE REQUEST IGNORED DUE TO ERROR'\n*\nTPEMSG   DC    C'POSTED TPEND '\nTPEMSGRC DC    C'  '\nTPEMSGL  EQU   *-TPEMSG\n*\nERMSG    DC    C'ERROR EXIT - REQ='\nERREQ    DC    C'  ,RTNCD='\nERRTNCD  DC    C'  ,FDBK2='\nERFDBK2  DC    C'  ,SSENSEI='\nERSENEI  DC    C'  ,SSENSMI='\nERSENMI  DC    C'  ,SENSE='\nERSENU1  DC    C'  '\nERSENU2  DC    C'  '\nERMSGL   EQU   *-ERMSG\n*\nREMSG    DC    C'RESPONSE EXIT - REQ='\nREREQ    DC    C'  ,RTNCD='\nRERTNCD  DC    C'  ,FDBK2='\nREFDBK2  DC    C'  ,SSENSEI='\nRESENEI  DC    C'  ,SSENSMI='\nRESENMI  DC    C'  ,SENSE='\nRESENU1  DC    C'  '\nRESENU2  DC    C'  '\nREMSGL   EQU   *-REMSG\nLOGBUF   DC    CL133' '         USED BECAUSE I DISABLED VTAMLOGO\n         USING LOGREC,LOG@\n*\n*    SCREEN INITIALIZATION TEXT USED BY INT3270\n*\nINTTEXT  DC     X'F5C21140D41DE8' WRITE ERASE + SF PROTECT OUR TITLE\n         DC    C'N E T',X'1D60',C'W O R K  ',X'1DE8'\n         DC    C'O P',X'1D60',C'E R A T O R',X'11C1C8',C'REL &REL'\n         DC    X'1DE811C150'  PROT, SBA ROW 2 COL 1\n         DC    C'COMMAND INPUT ===>'\n         DC    X'1DC113'      SF,IC\n         DC    X'11C25F'      SBA ROW 14,COL 80\n         DC    X'1D60'        SF FOR DATA OUTPUT\nINTLEN   EQU   *-INTTEXT      LENGTH OF INITIALIZATION TEXT\n         DC    X'11C1E3'      SBA TO CMD INPUT AREA\nINTCSUF  DS     CL40          INT CMD SUFFIX INSERTION AREA\n*\n*   DATA TO MAINTAIN OUTPUT ROLLING BUFFER\n*\nLINEMAX  DC   H'20'           MAX OUTPUT LINE POINTER\nLINE1    DC   XL2'&L(4)'      3270 BUFFER ADDRESS LINE 1 - ROW4/COL1\n         DC   XL2'&L(5)'      LINE 2  - ROW 5\n         DC   XL2'&L(6)'      LINE 3  - ROW 6\n         DC   XL2'&L(7)'      LINE 4  - ROW 7\n         DC   XL2'&L(8)'      LINE 5  - ROW 8\n         DC   XL2'&L(9)'      LINE 6  - ROW 9\n         DC   XL2'&L(10)'     LINE 7  - ROW 10\n         DC   XL2'&L(11)'     LINE 8  - ROW 11\n         DC   XL2'&L(12)'     LINE 9  - ROW 12\n         DC   XL2'&L(13)'     LINE 10 - ROW 13\n         DC   XL2'&L(14)'     LINE 11 - ROW 14\n         DC   XL2'&L(15)'     LINE 12 - ROW 15\n         DC   XL2'&L(16)'     LINE 13 - ROW 16\n         DC   XL2'&L(17)'     LINE 14 - ROW 17\n         DC   XL2'&L(18)'     LINE 15 - ROW 18\n         DC   XL2'&L(19)'     LINE 16 - ROW 19\n         DC   XL2'&L(20)'     LINE 17 - ROW 20\n         DC   XL2'&L(21)'     LINE 18 - ROW 21\n         DC   XL2'&L(22)'     LINE 19 - ROW 22\n         DC   XL2'&L(23)'     LINE 20 - ROW 23\n         DC   XL2'&L(24)'     LINE 21 - ROW 24\n         DC    XL(POHLEN)'00'     PREFIX AREA FOR OUTBOUND COMMANDS\nRCVDA    DC    XL(DALEN)'00'      DATA AREA FOR INBOUND COMMANDS\nSENDDA   DC    XL(DALEN)'00'      DATA AREA FOR OUTBOUND SPO MESSAGES\nPRIMADA  DC    XL(DALEN)'00'      DATA AREA FOR OUTBOUND PPO MESSAGES\n*\nWORK     DS    D                  DOUBLE WORD WORK AREA\nSTTIME   DS    F                  START TIME\nDATE     DS    F                  CURRENT DATE\nTBUF     DS    XL60               WORK AREA FOR REARRANGING TEXT\n*        TICB POOL\n*\nTICBLACT DC    A(0)               LAST ACTIVE TICB\nTICBPOOL EQU   *\nTICBCT   EQU   8                  # TICBS IN LIST\nTICBFCT  DC    AL2(TICBCT)        # FREE TICBS IN LIST\nTICBMCCT DC    AL2(0)             # TICBS USED BY MASTER CANDIDATES\n         DS    0D\nTICBS    DC    (TICBCT)XL(TICBLEN)'00'\n         ORG   TICBS\nNETPTICB DC    AL1(TISMCAND+TISALLOC)\n         ORG   NETPTICB+(TINAMLEN-TICB)\n         DC    AL2(5)\n         DC    CL8'NETOP'\n         ORG\nVTAMTICB DC    XL(TICBLEN)'00'\n         ORG   VTAMTICB+(TINAMLEN-TICB)\n         DC    AL2(4)\n         DC    CL8'VTAM'\n         ORG\nDUMTICB  DC    XL(TICBLEN)'00'\nTICBLIST DC    (TICBCT)F'0'   LIST OF TICBS FOR SEND TARGET TERMINALS\nLASTPARM EQU   X'80'          LAST-TICB-IN-LIST FLAG\n         LTORG\n*        PO MESSAGES.\n*\n*        PRINT NOGEN\nNTP00MSG WTO   'NTP00  NETOP WAITING FOR MASTER TO LOGON',             *\n               ROUTCDE=2,MF=L\n*\nNTP01MSG WTO   'NTP01  NODENAME NOW MASTER',                           *\n               ROUTCDE=2,MF=L\n*\nNTP02MSG WTO 'NTP02  LAST MASTER LOGGED OFF - SYSCON NOW VTAM PRIMARY',*\n               ROUTCDE=2,MF=L\n*\nNTP03MSG WTO   'NTP03  NETOP PPO ALREADY OPEN - SPO ONLY AVAILABLE',   *\n               ROUTCDE=2,MF=L\n*\nNTP04MSG WTO   'NTP04  NETOP ALREADY RUNNING',                         *\n               ROUTCDE=2,MF=L\n*\nNTP05MSG WTOR  'NTP05 - REPLY ''U'' TO RETRY OR OTHER TO TERMINATE',   *\n               TBUF,1,ECBMAIN,ROUTCDE=1,MF=L\n*\nNTP06MSG WTO   'NTP06  UNABLE TO OPEN ACB FOR           ',             *\n               ROUTCDE=2,MF=L\n*\nNTP07MSG WTO   'NTP07  UNABLE TO CLOSE ACB FOR          ',             *\n               ROUTCDE=2,MF=L\n*\nNTP08MSG WTO 'NTP08  NETOP UNABLE TO OPEN VTAMLOG ',                   *\n               ROUTCDE=2,MF=L\n*\nNTP09MSG WTO   'NTP00 - RETRYING EVERY 15 SECONDS FOR 2 MINUTES',      *\n               ROUTCDE=2,MF=L\n*\nNTP10MSG WTO 'NTP10  RETURN CODE=CD, ERROR CODE=CD',                   *\n               ROUTCDE=2,MF=L\n*\nNTP11MSG WTO 'NTP11  UNABLE TO LOGON MASTER TERMINAL          - USE PF1*\n               1 ON ANY MASTER CANDIDATE',ROUTCDE=1,DESC=2,MF=L\n*\nNTP12MSG WTO 'NTP12  NETOP CANCELLED - DID YOU TRY ''PF3 ALL'' FIRST?',*\n               ROUTCDE=2,MF=L\n*\n*        OVERLAYS FOR MESSAGES\n*\n         ORG   NTP01MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP01  '\nNTP1NODE DS    CL8\n*\n         ORG   NTP06MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP06  UNABLE TO OPEN ACB FOR '\nNTP06TYP DS    CL9\n*\n         ORG   NTP07MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP07  UNABLE TO CLOSE ACB FOR '\nNTP07TYP DS    CL9\n*\n         ORG   NTP08MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP08  NETOP UNABLE TO OPEN '\nNTP08DDN DS    CL8\n*\n         ORG   NTP10MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP10  RETURN CODE='\nNTP10RC  DS    CL2\n         DS    C' ,ERROR CODE='\nNTP10EC  DS    CL2\n*\n         ORG   NTP01MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP11  UNABLE TO LOGON MASTER TERMINAL '\nNTP11NOD DS    CL8\n         ORG\nSIMNIB   NIB   PROC=TRUNC,MODE=RECORD\n         PRINT GEN\n         ORG\nTRTAB    DC    C'0123456789ABCDEF'  TR TABLE FOR BIN TO HEX\n*\nLOGLN#   DS    H                  LOG LINE COUNT\nPAGESIZE DC    H'60'              # LINES PER PAGE\nLOGPG#   DS    H                  LOG PAGE COUNT\nEOFPGCNT DC    H'3'               # PAGES BETWEEN WRITE-EOFS\nLOGHDR   DC    AL2(133,0)         LOG HEADER LINE\n         DC    CL30'1'\n         DC    C'NETOP LOG'\n         DC    CL72' '\n         DC    C'DATE '\nLOGHDRDT DS    CL5\n*\nLOGSKP   DC    AL2(5,0)           LOG SKIP AFTER HEADER LINE\n         DC    C'-'\n*\n         $DYNABLK FLAGS2=20000000  (DON'T RESERVE DATASETS)\nLGTU     $TU   DDNAM,C'VTAMLOGO',NAME=LOGDDO,PREFIX=DAL\n         $TU   DDNAM,C'VTAMLOGI',NAME=LOGDDI\n         $TU   DSNAM,C'SYS1.VTAMLOG',NAME=LOGDS\n         $TU   STATS,X'01',NAME=OLD\n         $TU   STATS,X'02',NAME=MOD\nPRTU     $TU   DDNAM,C'SYSPRINT'\n         $TU   SYSOU,C'A'\n         $TU   CLOSE          (FREE=CLOSE)\n         $TU   FCBIM,C'LIN8'\n         $TU   UCS,C'GF12'\nLGITUP   $TUP  TXT=(LOGDDI,LOGDS,OLD)\nLGOTUP   $TUP  TXT=(LOGDDO,LOGDS,MOD)\nLGOTUPF  $TUP  TXT=LOGDS\nPRTUP    $TUP  NAME=PRTU\n*\nNTPATCH  DC    20F'0'             PATCH AREA\n*\n*        PRINT NOGEN\n*\n***********************************************************************\n*                                                                     *\n*        DATA CONTROL BLOCKS FOR LOGGING                              *\n*                                                                     *\n***********************************************************************\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        *\n               BLKSIZE=141,LRECL=137,                                  *\n               DSORG=PS,RECFM=VA,MACRF=(PM)\nVTAMLOGI DCB   DDNAME=VTAMLOGI,                                        *\n               BLKSIZE=3155,LRECL=137,SYNAD=LOGSYNAD,BUFNO=0,          *\n               DSORG=PS,RECFM=VBA,MACRF=(PL,GL)\nVTAMLOGO DCB   DDNAME=VTAMLOGO,                                        *\n               BLKSIZE=3155,LRECL=137,SYNAD=LOGSYNAD,BUFNO=2,          *\n               DSORG=PS,RECFM=VBA,MACRF=(PL)\n         PRINT GEN\n*\n* PO VTAM CONTROL BLOCKS.\n*\nRCVRPL   RPL   AM=VTAM,                                                *\n               ACB=ACBTERMS,                                           *\n               AREA=RCVDA,                                             *\n               AREALEN=DALEN,                                          *\n               EXIT=INBOUND,                                           *\n               OPTCD=(ANY,ASY,TRUNC),                                  *\n               RTYPE=DFSYN\n*        PRINT NOGEN\nSENDRPL  RPL   AM=VTAM,                                                *\n               ACB=ACBSPO,                                             *\n               AREA=SENDDA,                                            *\n               AREALEN=DALEN,                                          *\n               EXIT=OUTBOUND,                                          *\n               OPTCD=ASY\nPRIMARPL RPL   AM=VTAM\nLOGONRPL RPL   AM=VTAM,BRACKET=BB   FOR INITIAL MESSAGE\nDISCRPL  RPL   AM=VTAM\n*\n         PRINT GEN\nLOGONNIB NIB   PROC=TRUNC,                                             *\n               EXLST=NXLST,                                            *\n               MODE=RECORD\n*\nACBTERMS ACB   AM=VTAM,                                                *\n               APPLID=MODULEID,                                        *\n               PASSWD=TERMSPW,                                         *\n               EXLST=TXLST,                                            *\n               MACRF=LOGON\nTERMSPW  DC    X'06',CL8'VTAMOP'       PASSWORD FOR TERMINAL ACB\n*\nPPOID    DC    X'06',CL8'NETPPO'       ID FOR PPO ACB\nSPOID    DC    X'06',CL8'NETSPO'       ID FOR SPO ACB\nPOPW     DC    X'07',CL8'VTAMCMD'      PASSWORD FOR PO-VTAM ACBS\n*\n*        PRINT NOGEN\nACBPPO   ACB   AM=VTAM,                                                *\n               APPLID=PPOID,                                           *\n               PASSWD=POPW,                                            *\n               EXLST=PXLST,                                            *\n               MACRF=NLOGON\nACBSPO   ACB   AM=VTAM,                                                *\n               APPLID=SPOID,                                           *\n               PASSWD=POPW,                                            *\n               EXLST=PXLST,                                            *\n               MACRF=NLOGON\n*\nTXLST    EXLST AM=VTAM,                                                *\n               LERAD=ERROR,                                            *\n               SYNAD=ERROR,                                            *\n               TPEND=TPEND,                                            *\n               LOGON=LOGON,                                            *\n               RELREQ=RELREQ,                                          *\n               LOSTERM=LOSTERM\n*\nNXLST    EXLST AM=VTAM,                                                *\n               RESP=RESP\n*\nPXLST    EXLST AM=VTAM,                                                *\n               LERAD=ERROR,                                            *\n               SYNAD=ERROR\n*\n*\n* TERMINALS ELIGIBLE TO BE MASTER TERMINAL.\n*\nMATABLE  $MATAB T4A3,         ED     (ON 3274)                         *\n               T4D7,          ANDRE                                    *\n               T4CA,          CHARLIE                                  *\n               T4D4,          RON                                      *\n               T4E0,          TP AREA                                  *\n               T4A9,          TP AREA (MOVE)                           *\n               T4A0           MASTER CONSOLE (PORT 0 ON 3274)\nMAPATCH  DC    XL32'00'       SPARE - LAST ENTRY IS DUMMY, LENGTH 0\n*\n*        CAREFUL -- LOWERCASE TEXT IN HELP SCREEN\n*\nHELPM    DC   X'F5C2'               ADDRESSED VIA ADCON @HELPM\n         DC   X'115D7F1DE8'\n         DC   C'KEY      VALID INPUT                      NETOP ACTION'\n         DC   X'11C25F1D40'\n         DC   X'11&L(3)',C'ENTER    full vtam cmd                      *\n                   passed asis'\n         DC   X'11&L(4)',C'         abbr vtam cmd  ( NET,ID=  omitted) *\n                   NET,ID=               inserted'\n         DC   X'11&L(5)',C'         vtam nodename                      *\n                   D NET,ID=             inserted'\n         DC   X'11&L(6)',C'         1 or 2 digit numeric+blank+cmd     *\n                   pf key n/nn assumed for rescan'\n         DC   X'11&L(7)',C'PF1      n/a                                *\n                   help screen'\n         DC  X'11&L(08)',C'PF2      control keyword (next help screen) *\n                   set/reset control function'\n         DC  X'11&L(09)',C'PF3      ALL (only from a master for shutdow*\n               n)  END NETOP'\n         DC  X'11&L(10)',C'                                            *\n                   END  (syscon primary if no ma)'\n         DC  X'11&L(11)',C'PF4      vtam nodename                      *\n                   F NET,ID=             inserted'\n         DC  X'11&L(12)',C'PF5      os command                         *\n                   passed to command scheduler'\n         DC  X'11&L(13)',C'PF6      vtam nodename                      *\n                   V NET,INACT,I,ID=     inserted'\n         DC  X'11&L(14)',C'PF7      vtam nodename,applid               *\n                   V NET,ID=,LOGON=      inserted'\n         DC  X'11&L(15)',C'PF8      vtam nodename                      *\n                   V NET,INACT,ID=       inserted'\n         DC  X'11&L(16)',C'PF10     vtam nodename (cluster only status)*\n                   D NET,ID=             inserted'\n         DC  X'11&L(17)',C'PF11     vtam nodename (logging required)   *\n                   D NET,ID=             inserted'\n         DC  X'11&L(18)',C'PF12     vtam nodename                      *\n                   V NET,ACT,ID=         inserted'\n         DC  X'11&L(19)',C'PA1/PA2       n/a      auto - null/init+cmd;*\n                    no-auto - delete/roll'\n         DC  X'11&L(20)',C'CLEAR/PA3     n/a      auto - screen init;  *\n                    no-auto - screen roll'\n         DC  X'11&L(21)',C'TESTREQ       n/a (not remotes)             *\n                   END (syscon primary if no ma)'\nHELPML   EQU   *-HELPM\n*\n*\nHELPM2   DC   X'F5C2115D7F1DE8'     ADDRESSED VIA ADCON @HELPM2\n         DC   C'PF2 INPUT                                 NETOP ACTION'\n         DC   X'11C25F1D60'\n*\n         DC   X'11&L(04)',C' userid     '\n         DC   C'Display command generated if user logged on'\n*\n         DC   X'11&L(06)1D'\nHELPR    DC   X'60',C' ROLL     ',X'1D60'\n         DC   C'Output rolls continuously from top to bottom of screen'\n         DC   X'11&L(07)1D'\nHELPRZ   DC   X'60',C'NROLL     ',X'1D60'\n         DC   C'Output halts at bottom of screen awaiting pa/clear key'\n*\n         DC   X'11&L(09)1D'\nHELPAZ   DC   X'60',C' AUTO     ',X'1D60'\n         DC   C'Abbreviated input is expanded and passed to vtam'\n         DC   X'11&L(10)1D'\nHELPA    DC   X'60',C'NAUTO     ',X'1D60'\n         DC   C'Abbreviated input is expanded and redisplayed'\n*\n         DC   X'11&L(12)1D'\nHELPEZ   DC   X'60',C' ECHO     ',X'1D60'\n         DC   C'All logged responses are echoed if master terminal'\n         DC   X'11&L(13)1D'\nHELPE    DC   X'60',C'NECHO     ',X'1D60'\n         DC   C'No logged responses are echoed if master terminal'\n*\n         DC   X'11&L(15)1D'\nHELPS    DC   X'60',C' SOLO     ',X'1D60'\n         DC   C'Only solicited messages to be displayed'\n         DC   X'11&L(16)1D'\nHELPSZ   DC   X'60',C'NSOLO     ',X'1D60'\n         DC   C'Solicited and unsolicited messages to be displayed'\n*\n         DC   X'11&L(18)1D'\nHELPL    DC   X'60',C' LOGD     ',X'1D60'\n         DC   C'Display cmd responses to be logged if master terminal'\n         DC   X'11&L(19)1D'\nHELPLZ   DC   X'60',C'NLOGD     ',X'1D60'\n         DC   C'Display cmd responses not to be logged (except PF11)'\n*\n         DC   X'11&L(24)',C'            '\n         DC   C'NOTE:  ',X'1DE8'\n         DC   C'INTENSIFIED',X'1D60',C'OPTIONS ARE IN FORCE'\nHELPML2  EQU   *-HELPM2\n*\n*                             TRT TABLE FOR RANGE NOTATION CHECK\nTRTTAB   DC    64X'00'        ADDRESSED VIA ADCON @TRTTAB\n         DC    X'02'               C' '   DELIM\n         DC    10X'00'\n         DC    X'01'               C'.'   RANGE\n         DC    18X'00'\n         DC    X'01'               C';'   RANGE\n         DC    X'00'\n         DC    X'01'               C'-'   RANGE\n         SPACE\n         DC    X'01'               C'/'   RANGE\n         DC    9X'00'\n         DC    X'02'               C','   DELIM\n         DC    14X'00'\n         DC    X'01'               C':'   RANGE\n         DC    133X'00'\nLERRRPL  DC    CL120'STATERPL   '  COPY OF READ ONLY RPL\n*\n*\n***********************************************************************\n*        DATA AREAS FOR HARD COPY LOG                                 *\n***********************************************************************\n*\nLOGREC   DSECT                    LOG BUILD AREA\nLOGRDW   DS    2H                 DESCRIPTOR WORD\nLOGASA   DS    C                  ASA CNTL CHAR\nLOGTXT   DS    CL132              TEXT BUFFER\n         ORG   LOGTXT\nLOGWTLHD DS    CL4                PAD TO ALIGN NETOP LINES IN SYSLOG\nLOGTIME  DS    CL8                TERMINAL NAME\nLOGBL1   DS    CL1\nLOGTIML  EQU   *-LOGASA           LOG TIME PREFIX LENGTH\nLOGNODE  DS    CL8                TERMINAL NAME\nLOGBL2   DS    CL2\nLOGPRFL  EQU   *-LOGRDW           LOG TOTAL PREFIX LENGTH\nLOGMSG   DS    CL97               COMMAND/MESSAGE TEXT\n         ORG   LOGMSG+20\nLOGLIT   DS    CL9                'NETOP LOG' IN HDR\n         ORG   LOGMSG+87\nLOGDLIT  DS    CL5                'DATE ' IN HDR\nLOGDATE  DS    CL5                YYYDD IN HDR\n         ORG\nLOGCONT  EQU   LOGTXT+131,1       RECORD TRUNCATED=>'+' INSERTED HERE\n         END\n./ ADD NAME=NETOP$\nINSTRUCTIONS FOR INSTALLING 'NETOP'\n*************************************\n\n1) UPDATE TERMINAL LIST AT LABEL MATABLE WITH CANDIDATES FOR MASTER\n   TERMINAL STATUS.\n\n2) ASSEMBLE NETOP USING THE SAMPLE JCL IN NETOPA.\n\n3) ADD VTAM DEFINITION FOR 'NETOP' TO SYS1.VTAMLST.\n\n4) ADD STARTUP PROC (NETOPP) TO SYS1.PROCLIB.\n\n./ ADD NAME=NETOPA\n//EP91853A JOB (91853,576595,D,PSTT),'PITKIN:NANAIMO FLR 2',CLASS=S,        0010\n//  MSGCLASS=A,NOTIFY=*,TIME=1,USER=*,PASSWORD=*\n/*JOBPARM L=20\n/*ROUTE PRINT RMT5\n//COMPRESS EXEC COMPRESS,LIB='EP91853.LOADLIB'\n//ASM EXEC ASMFCL,CLASS=$,PARMC=TEST,PARML=TEST                             0020\n//SYSLIB  DD DSN=SYS1.MACLIB,DISP=SHR                                       0022\n//        DD DSN=SYS1.AMODGEN,DISP=SHR                                      0022\n//ASM.SYSIN DD DSN=SYS9.TP.SHARE(NETOPMAC),DISP=SHR                         0030\n//          DD DSN=SYS9.TP.SHARE(NETOP),DISP=SHR                            0030\n//LKED.SYSLMOD DD DSN=EP91853.LOADLIB,DISP=SHR                              0040\n//LKED.SYSIN DD *\n SETCODE AC(1)\n NAME NETOP(R)\n./ ADD NAME=NETOPMAC\n         MACRO\n&NAME    $REGS &START=0,&END=15,&USAGE=\n.*\n.*       THIS MACRO WILL DEFINE SYMBOLIC REGISTERS\n.*       IN THE FORMAT RN  EQU  N FOR N BETWEEN\n.*       THE START AND END VALUES SPECIFIED\n.*\n.*\n         LCLA  &S,&E,&ST\n         LCLC  &BL,&USE\n&S       SETA  &START\n&E       SETA  &END\n         AIF   (&S LE 15 AND &E LE 15).SETST\n         MNOTE *,'START OR END TOO LARGE - DEFAULT 0-15 TAKEN'\n&S       SETA  0\n&E       SETA  15\n.SETST   ANOP\n&ST      SETA  &S\n         AIF   (&ST GT 0).RLOOP\n&ST      SETA  1\n.RLOOP   AIF   (&S LT 16).CHKE\n&S       SETA  0\n.CHKE    ANOP\n&BL      SETC  ''\n         AIF   (K'&S EQ 2).EQUATE\n&BL      SETC  ' '\n.EQUATE  ANOP\n&USE     SETC  '&S&BL             &USAGE(&S+&ST)'\nR&S      EQU   &USE\n         AIF   (&S EQ &E).REND\n&S       SETA  &S+1\n         AGO   .RLOOP\n.REND    MEND\n         SPACE 5\n         MACRO\n&NAME    $START &CSECT=,&BASE=,&BASENO=,&ID=,&SA=,&ADCONS=,            *\n               &SAUSING=YES,&SAVETO=12\n         LCLA  &SVT,&IDL,&I\n         LCLA  &B,&OFF\n         LCLC  &BA,&NAM,&CSCT,&ADC\n&SVT     SETA  &SAVETO\n&BA      SETC  '12'\n&NAM     SETC  '&NAME'\n&CSCT    SETC  '&SYSECT'\n         AIF   (K'&CSECT EQ 0).NOCSECT\n&CSCT    SETC  '&CSECT'\n&CSCT    CSECT\n.NOCSECT ANOP\n         USING *,15           TEMP BASE\n&NAM     B     $START         JUMP ID\n         DROP  15             DROP TEMP BASE\n&NAM     SETC  '$START'\n         AIF   (K'&ID EQ 0).SHORT\n&CSCT    SETC  '&CSCT &ID'\n.SHORT   ANOP\n&IDL     SETA  K'&CSCT\nMODULEID DC    AL1(&IDL),C'&CSCT'   ID\n         AIF   (N'&ADCONS EQ 0).NADC\n.ADCLOOP ANOP\n&I       SETA  &I+1\n&ADC     SETC  '&ADCONS(&I)'\nA&ADC    DC    A(&ADC)\n         AIF   (&I LT N'&ADCONS).ADCLOOP\n.NADC    AIF   (K'&SA EQ 0).NOSA1\n         AIF   ('&SA'(1,1) EQ '=').SAVEM\n         DC    A(&SA)\n         AGO   .SAVEM\n.NOSA1   ANOP\n$GENSA   DC    18F'0'         GENERATED SAVE AREA\n.SAVEM   ANOP\n&NAM     SAVE  (14,&SVT)      SAVEM\n         AIF   (K'&BASENO EQ 0).NOBNO\n&BA      SETC  'BASE1@'\n         AGO   .NOAST\n.NOBNO   ANOP\n&BA      SETC  '&BASE'\n         AIF   (K'&BASE GT 0).BASOK\n&BA      SETC  '12'           DEFAULT\n         AGO   .NOAST\n.BASOK   AIF   ('&BASE'(1,1) NE '*').NOAST\n&BA      SETC  '12'           DEFAULT\n         AIF   (K'&NAME GT 0).USENAM\n         MNOTE 4,'BASE=&BASE SPECIFIED BUT NO NAME FIELD'\n         MEXIT\n.USENAM  ANOP\n         USING &NAME,&BA      CODE ADDRESSIBILITY\n         AGO   .USNGOK\n.NOAST   ANOP\n         AIF   (K'&CSECT GT 0).NOSYS\n&CSCT    SETC  '&SYSECT'\n.NOSYS   ANOP\n         USING &CSCT,&BA      TELL ASSEMBLER 1ST BASE\n.USNGOK  ANOP\n         LR    &BA,15         LOAD BASE REG\n         AIF   (K'&BASENO EQ 0).BASEND\n         AIF   (&BASENO LE 1).BASEND\n&B       SETA  1\n         LA    15,4095        LOAD BASE INCREMENT -1\n.BASLOOP ANOP\n&OFF     SETA  &B\n&B       SETA  &B+1\n         LA    BASE&B.@,1(15,BASE&OFF.@)  INCREMENT BASE BY 4096\n&OFF     SETA  &OFF*4096\n         USING &CSCT+&OFF,BASE&B.@  TELL ASSEMBLER\n         AIF   (&B LT &BASENO).BASLOOP\n.BASEND  ANOP\n         AIF   (K'&SA EQ 0).NOSA2\n         AIF   ('&SA'(1,1) EQ '=').SALIT\n         L     15,$START-4    CHAIN\n         AGO   .SAVOK\n.SALIT   ANOP\n         LA    15,&SA         CHAIN\n         AGO   .SAVOK\n.NOSA2   ANOP\n         LA    15,$START-72   CHAIN\n.SAVOK   ANOP\n         ST    15,8(,13)       SAVE\n         ST    13,4(,15)        AREA\n         LR    13,15             FOR CALLEES\n         AIF   ('&SAUSING' NE 'YES').MEND\n         AIF   (K'&SA GT 0).ISLIT\n         USING $GENSA,13      DATA ADDRESSIBILITY\n         MEXIT\n.ISLIT   AIF   ('&SA'(1,1) EQ '=').MEND\n         USING &SA,13         DATA ADDRESSIBILITY\n.MEND    MEND\n         SPACE 5\n         MACRO\n&NAME    $DYNAL &TU,&VERB=,&WAIT=NO,&MOUNT=,&PREFIX=S99\n         LCLC  &P\n&P       SETC  '&PREFIX'\n&NAME    LA    R1,&TU         LOAD TEXT UNIT PTR\n         ST    R1,&P.TXTPP    STORE IN PARM BLOCK\n         AIF   (K'&VERB EQ 0).NOVRB\n         MVI   &P.VERB,&VERB  SET DYNALLOC VERB CODE\n.NOVRB   AIF   ('&WAIT' EQ 'NO').NOWT1\n         OI    &P.FLAG2,X'C0' FLAG VOL,DSN WAIT\n.NOWT1   AIF   (K'&MOUNT EQ 0).LARBP\n         AIF   ('&MOUNT' EQ 'YES').MN1\n         OI    &P.FLAG1,X'20' SET NOMOUNT FLAG\n         AGO   .LARBP\n.MN1     ANOP\n         NI    &P.FLAG1,X'DF' RESET NOMOUNT FLAG\n.LARBP   ANOP\n         LA    R1,&P.RBPTR    LOAD PARM LIST PTR\n         SVC   99             DYNALLOC\n         AIF   ('&WAIT' EQ 'NO').NOWT2\n         NI    &P.FLAG2,X'3F' RESET VOL,DSN WAIT FLAGS\n.NOWT2   AIF   (K'&MOUNT EQ 0).LTR15\n         AIF   ('&MOUNT' EQ 'YES').MN2\n         NI    &P.FLAG1,X'DF' RESET NOMOUNT FLAG\n         AGO   .LTR15\n.MN2     ANOP\n         OI    &P.FLAG1,X'20' SET NOMOUNT FLAG\n.LTR15   ANOP\n         LTR   R15,R15        SUCCESSFUL?\n         MEND\n         SPACE 5\n         MACRO\n&NAM     $TU   &KEY,&PARM,&ALIGN=,&PREFIX=,&NAME=\n         GBLA  &INDX(64),&J\n         GBLB  &ALGN\n         GBLC  &NAMS(64)\n         GBLC  &TUPRFX   DAL,DUN,DDC,DRI,DDN,DIN\n         LCLA  &I,&#,&PINDX\n         LCLC  &L,&N,&NM,&EQNM\n         AIF   (K'&PREFIX EQ 0).FSTU\n         AIF   ('&PREFIX' EQ 'DAL' OR '&PREFIX' EQ 'DUN' OR            *\n                '&PREFIX' EQ 'DDC' OR '&PREFIX' EQ 'DRI' OR            *\n                '&PREFIX' EQ 'DDN' OR '&PREFIX' EQ 'DIN').PRFXOK\n         MNOTE 8,'PREFIX=&PREFIX INVALID - CHECK JOB MGMT SPL'\n         MEXIT\n.PRFXOK  ANOP\n&TUPRFX  SETC  '&PREFIX'\n         AGO   .NAMCK\n.FSTU    AIF   (&J GT 0).NAMCK\n MNOTE 4,'FIRST $TU MACRO DETERMINES ALLOC PREFIX - ''DAL'' ASSUMED'\n&TUPRFX  SETC  'DAL'\n.NAMCK   AIF   (K'&NAM GT 0).SETJ\n         AIF   (&J GT 0).NAMNUL\n         MNOTE 4,'FIRST $TU MACRO MUST HAVE NAME FIELD SPECIFIED'\n         MEXIT\n.SETJ    ANOP\n&J       SETA  1\n.JLOOP   ANOP\n         AIF   (K'&NAMS(&J) EQ 0).SETNAMS\n         AIF   ('&NAM' EQ '&NAMS(&J)').NAMNUL\n&J       SETA  &J+1\n         AIF   (&J LE 64).JLOOP\n         MNOTE 8,'MAX NAMES = 64  -  &NAM REJECTED'\n         MEXIT\n.SETNAMS ANOP\n&NAMS(&J) SETC  '&NAM'\n.NAMNUL  ANOP\n&N       SETC  '&NAMS(&J)'\n&INDX(&J) SETA &INDX(&J)+1\n&#       SETA  N'&PARM\n&I       SETA  &#/10+K'&N+3\n         AIF   (&I LE 8).NAMEOK\n         MNOTE 8,'''&N'' AND &# PARM(S) WILL GENERATE &I CHAR NAMES'\n         MEXIT\n.NAMEOK  AIF   (K'&ALIGN EQ 0).ALGNCK\n&ALGN    SETB  ('&ALIGN' EQ 'YES')\n.ALGNCK  AIF   (NOT &ALGN).NALIGN\n         DS    0H\n.NALIGN  ANOP\n&PINDX   SETA  &INDX(&J)+100\n&NM      SETC  '&N&INDX(&J)'\n         SPACE\n         AIF   (K'&NAME EQ 0).NONAME\n         AIF   ('&NAME'(1,1) EQ '*').ASTNAME\n&EQNM    SETC  '&NAME'\n         AGO   .NMEQATE\n.ASTNAME ANOP\n&EQNM    SETC  '&KEY'\n         AIF   (K'&NAME EQ 1).NMEQATE\n&EQNM    SETC  '&KEY'.'&NAME'(2,K'&NAME-1)\n.NMEQATE ANOP\n&EQNM    EQU   *\n.NONAME  ANOP\n&NM      DC    AL2(&TUPRFX&KEY),AL2(&#)\n         AIF   (&# EQ 0).END\n         AIF   ('&PARM'(1,1) EQ '*').MEND\n&I       SETA  1\n.PARMDO  ANOP\n         AIF   (&I GT &#).END\n         AIF   ('&PARM(&I)'(1,1) EQ '*').MEND\n&L       SETC  'L''&N&PINDX'\n         DC    AL2(&L)\n&N&PINDX DC    &PARM(&I)\n&PINDX   SETA  &PINDX+100\n&I       SETA  &I+1\n         AGO   .PARMDO\n.END     AIF   (&# EQ 0).SPC2\n         AIF   ('&PARM'(1,1) EQ '*').MEND\n.SPC2    ANOP\n         SPACE 2\n.MEND    MEND\n         SPACE 5\n         MACRO\n&NAM     $TUP  &NAME=,&TXT=,&FLGLAST=YES\n         GBLA  &INDX(64)\n         GBLC  &NAMS(64)\n         LCLA  &I,&J\n         LCLC  &FLG\n         AIF   (K'&NAME EQ 0).INDXOK\n&J       SETA  1\n.JLOOP   AIF   (K'&NAMS(&J) EQ 0).NAMSEND\n.POSSNAM AIF   ('&NAME' EQ '&NAMS(&J)').NAMOK\n&J       SETA  &J+1\n         AIF   (&J LE 64).JLOOP\n.NAMSEND MNOTE 4,'NAME &NAME NOT PREVIOUSLY USED WITH $TU MACRO'\n         MEXIT\n.NAMOK   AIF   (&INDX(&J) GT 0).INDXOK\n         MNOTE 4,'CODE ALL $TU MACROS BEFORE ANY $TUP MACROS'\n         MEXIT\n.INDXOK  ANOP\n&I       SETA  1\n&FLG     SETC  'A'\n&NAM     DS    0A\n         AIF   (N'&TXT GT 0).TXTGO\n         AIF   (K'&NAME GT 0).LOOP\n.MNOTE   MNOTE 4,'NAME OPERAND REQUIRED'\n         MEXIT\n.LOOP    AIF   (&I LT &INDX(&J) OR '&FLGLAST' EQ 'NO').NOTLST1\n&FLG     SETC  'X''80'',AL3'\n.NOTLST1 ANOP\n         DC    &FLG.(&NAME&I)\n&I       SETA  &I+1\n         AIF   (&I LE &INDX(&J)).LOOP\n         SPACE\n         MEXIT\n.TXTGO   ANOP\n&J       SETA  N'&TXT          LOOP LIMIT\n         AIF   (K'&TXT(&J) GT 0).TXTLOOP  LAST PARM NULL?\n&J       SETA  &J-1                       YES - DONT USE IT\n.TXTLOOP AIF   (&I LT &J OR '&FLGLAST' EQ 'NO').NOTLST2\n&FLG     SETC  'X''80'',AL3'\n.NOTLST2 ANOP\n         AIF   (T'&TXT(&I) EQ 'N').NUMTXT\n         DC    &FLG.(&TXT(&I))\n         AGO   .INCRI\n.NUMTXT  AIF   (K'&NAME EQ 0).MNOTE\n         DC    &FLG.(&NAME&TXT(&I))\n.INCRI   ANOP\n&I       SETA  &I+1\n         AIF   (&I LE &J).TXTLOOP\n         SPACE\n         MEND\n         SPACE 5\n         MACRO\n         $DYNABLK &VERB=0,&FLAGS1=0000,&FLAGS2=00000000,&PREFIX=S99\n         LCLC  &P\n&P       SETC  '&PREFIX'\n*\n*        SVC 99 REQUEST BLOCK AND POINTER\n*\n         DS    0A\n&P.RBPTR DC    X'80',AL3(&P.RB)\n&P.RB    DS    0A\n&P.RBLN  DC    AL1(&P.RBL)\n&P.VERB  DC    AL1(&VERB)\n&P.FLAG1 DC    X'&FLAGS1'\n&P.ERROR DC    XL2'00'\n&P.INFO  DC    XL2'00'\n&P.TXTPP DS    A\n&P.RSV   DC    XL4'00'\n&P.FLAG2 DC    XL4'&FLAGS2'\n&P.RBL   EQU   *-&P.RB\n*\n         MEND\n./ ADD NAME=NETOPP\n//NETOP   PROC  MA=TAF0,NAME=NETOP,PRFX=,LOADLIB='SYS9.LOADLIB'\n//*********************************************************************\n//*********************************************************************\n//*                                                                 ***\n//*                                                                 ***\n//*    PURPOSE:            ALLOWS NETWORK OPERATOR CONTROL          ***\n//*                        FROM TERMINALS IN THE VTAM NETWORK.      ***\n//*                                                                 ***\n//*                                                                 ***\n//*    PARM FIELD:         MASTER VTAM TERMINAL NAME.               ***\n//*                        IF PREFIXED BY '$' STARTUP               ***\n//*                        COMMANDS ARE ISSUED (SYSIN).             ***\n//*                        IF PREFIXED BY '#' LOG IS SPOOLED        ***\n//*                        TO SYSPRINT AT START.                    ***\n//*                                                                 ***\n//*                                                                 ***\n//*    OWNER:              SYSTEMS SUPPORT                          ***\n//*                                                                 ***\n//*    CONTACT:            ANDRE LAPORTE                            ***\n//*                        ED PITKIN                                ***\n//*                                                                 ***\n//*                                                                 ***\n//*********************************************************************\n//*********************************************************************\n//*\n//NETOP   EXEC PGM=&NAME,PARM=&PRFX&MA,DPRTY=(15,0),PERFORM=14\n//STEPLIB  DD DSN=&LOADLIB,DISP=SHR      <-- AUTH LIB FOR PF5 SUPPORT\n//* NETOP CODE FOR VTAMLOG HAS BEEN DISABLED SINCE ALL NETOP TRAFFIC\n//* IS LOGGED TO SYSLOG.\n//VTAMLOG  DD DSN=SYS1.VTAMLOG,DISP=SHR\n//SYSPRINT DD SYSOUT=A\n//SYSABEND DD SYSOUT=A\n./ ADD NAME=NETOP70,SSI=00092321\nVTOP   TITLE 'N E T O P - VTAM PROGRAM OPERATOR'                 85240\n***********************************************************************\n*                                                                     *\n*     MODULE NAME: NETOP                                              *\n*                                                                     *\n*     DESCRIPTIVE NAME: PROGRAM OPERATOR APPLICATION                  *\n*                                                                     *\n*     FUNCTION: ALLOWS NETWORK OPERATOR CONTROL FROM TERMINALS IN     *\n*               THE VTAM NETWORK                                      *\n*                                                                     *\n*     AUTHOR: MIKE HOLDEN, GOVERNMENT OF ALBERTA, 1977-1979           *\n*                                                                     *\n*     NOTES:                                                          *\n*                                                                     *\n*                  (1) A LIST OF TERMINAL NAMES ELIGIBLE TO BE MASTER *\n*        TERMINALS CAN BE FOUND AT LABEL 'MATABLE'                    *\n*                                                                     *\n*                  (2) NETOP LOGS ALL UNSOLICITED MESSAGES AND NON-   *\n*        DISPLAY INTERACTIONS TO A SEQUENTIAL DATASET AND SYSOUT 'A'. *\n*        EVERY OTHER DAY THE DATASET IS CLEARED, WHILE THE SYSOUT IS  *\n*        SPUN OFF EVERY DAY.                                          *\n*                                                                     *\n*                  (3) NETOP PROC IN PROCLIB IS AS FOLLOWS:           *\n*                                                                     *\n* //NETOP PROC MA=T260,NAME=NETOP,PRFX=                             ***\n* //*******************************************************************\n* //*                                                               ***\n* //*   PURPOSE:   VTAM NETWORK PROGRAM OPERATOR                    ***\n* //*                                                               ***\n* //*   PARM FIELD: MASTER VTAM TERMINAL NAME                       ***\n* //*            IF PREFIXED BY '$' STARTUP CMDS ARE ISSUED (SYSIN) ***\n* //*   (THIS IS THE CASE AT VTAM INITIALIZATION WHEN A MODIFIED    ***\n* //*    NETSOL, ATTACHED BY VTAM, ISSUES 'S NETOP,MA=$T26B' )      ***\n* //*                                                               ***\n* //VTAMON EXEC PGM=&NAME,PARM=&PRFX&MA,DPRTY=(15,11)               ***\n* //STEPLIB DD DSN=DPOS.LOADLIB,DISP=SHR <-- AUTH LIB               ***\n* //*                                                               ***\n* //*******************************************************************\n*                                                                     *\n*                                                                     *\n*                  (4) NETOP APPL DEFINITIONS ARE AS FOLLOWS:         *\n*                                                                     *\n*  NETOP   APPL  BUFFACT=1,AUTH=(ACQ,PASS,NVPACE),PRTCT=VTAMOP        *\n*  NETPPO  APPL  BUFFACT=1,AUTH=(ACQ,PASS,PPO,NVPACE),PRTCT=VTAMCMD   *\n*  NETSPO  APPL  BUFFACT=1,AUTH=(ACQ,PASS,SPO,NVPACE),PRTCT=VTAMCMD   *\n*                      THESE ARE FOR TESTING WHEN NETOP IS RUNNING:   *\n*  NETOPT  APPL  BUFFACT=1,AUTH=(ACQ,PASS,NVPACE),PRTCT=VTAMOP        *\n*  NETSPOT APPL  BUFFACT=1,AUTH=(ACQ,PASS,SPO,NVPACE),PRTCT=VTAMCMD   *\n*                                                                     *\n*           ALL CMDS ARE SENT TO VTAM VIA THE SPO ACB WHICH IS ALWAYS *\n*        OPEN.  UNSOLICITED MESSAGES ONLY ARE RECEIVED VIA THE PPO    *\n*        ACB WHICH IS OPEN WHENEVER THERE IS A MASTER LOGGED ON.  IF  *\n*        NOT THESE MESSAGES GO TO THE CONSOLE.                        *\n*                                                                     *\n*                  (5) HIT PF1 TO DISPLAY THE GENERAL HELP SCREEN,    *\n*        THEN AGAIN TO DISPLAY THE PF2 HELP SCREEN.                   *\n*                                                                     *\n*                  (6) INSTEAD OF 'R 00,YES' FORMAT REPLIES, THE JES2 *\n*        ABBREVIATION WORKS - '00YES'                                 *\n*                                                                     *\n*                  (7) TO OBTAIN MASTER CANDIDATE STATUS ON A NON-    *\n*        MASTER TERMINAL ENTER THE 2-DIGIT HOUR OF DAY WITH PF2;      *\n*        REPEAT TO TURN OFF MASTER STATUS.  NOTE THAT THIS WILL NOT   *\n*        CAUSE THE PPO ACB TO BE OPENED IF IT WAS CLOSED DUE TO NO    *\n*        MASTER BEING LOGGED ON, THEREFORE, IN SUCH A SITUATION, ALL  *\n*        UNSOLICITED MESSAGES WILL STILL BE ROUTED TO THE CONSOLE.    *\n*                                                                     *\n*                  (8) NON-VTAM COMMANDS:                             *\n*                                                                     *\n*            'W' CAUSES WRITE EOF TO VTAMLOG SO THAT SPF BROWSE GETS  *\n*        ACCESS TO THE LOG UP TO THE CURRENT TIME.  TO ALLOW FAST     *\n*        BROWSING, THIS DATASET IS BLOCKED, SO TO KEEP IT FAIRLY      *\n*        CURRENT IT IS CLOSED AND RE-OPENED EVERY 4 LOG PAGES, UNLESS *\n*        THE 'W' COMMAND IS USED TO FORCE THIS ACTION.                *\n*                                                                     *\n*            'K' IS ACCEPTED IN LIEU OF A PA KEY FOR OPERATOR TYPES.  *\n*                                                                     *\n*            'END' IS ACCEPTED IN LIEU OF PF3.                        *\n*                                                                     *\n*            'ALL' WITH PF3 CAUSES NETOP TO TERMINATE.                *\n*                                                                     *\n*            'ROLL'/'NROLL', 'AUTO/NAUTO', 'ECHO/NECHO', 'SOLO/NSOLO',*\n*        'LOGD/NLOGD'  ARE PF2 MODE CONTROL KEYWORDS AND ARE          *\n*        EXPLAINED IN THE PF2 HELP SCREEN.  THEY CAN BE ABBREVIATED   *\n*        TO ANY LENGTH WHILE REMAINING UNAMBIGUOUS.                   *\n*                                                                     *\n*                  (9) VTAM MESSAGE SUPPRESSION:                      *\n*                                                                     *\n*        THE INSERTION OF COMMANDS IN REPLY TEXT AND SETTING OF       *\n*        DISPLAY CONTROL SWITCHES IS DEPENDANT UPON THE VTAM PARAMETER*\n*        'SUPP=NOSUP'  BEING IN FORCE.  ANY SUPPRESSION WILL HAVE A   *\n*        DELETERIOUS EFFECT ON NETOP OPERATION.                       *\n*                                                                     *\n*                 (10) NODE NAMING CONVENTIONS:                       *\n*                                                                     *\n*        THIS SCHEME HAS BEEN VERY SUCCESSFUL IN OUR NETWORK AND IS   *\n*        INCLUDED HERE PURELY AS AN EXAMPLE, SINCE NETOP WILL FUNCTION*\n*        WHATEVER THE CONVENTION.  NCP AND APPL NODES ARE NOT APPLIC- *\n*        ABLE.  THERE ARE FIVE FIELDS IN A NAME:                      *\n*                                                                     *\n*              K  lib c tt                                            *\n*        WHERE                                                        *\n*              K IS THE 3705 id.                                      *\n*                                                                     *\n*              lib is the 3705 lib.                                   *\n*                                                                     *\n*              C IS THE RELATIVE HEX CLUSTER NUMBER (0-F)             *\n*                                                                     *\n*              TT IS THE RELATIVE HEX TERMINAL NUMBER (00-32)         *\n*                                                                     *\n*        THUS THE 3RD TERMINAL ON THE 2ND CLUSTER ON LINE 0A5 OF      *\n*        3705-r        WILL HAVE A NODENAME OF r0a5b03, ATTACHED TO   *\n*        CLUSTER r0a5b ON LINE r0a5.  ALL LOCAL TERMINALS ARE NAMED:  *\n*                                                                     *\n*              Tcuu  WHERE cuu IS THE SUBCHANNEL ADDRESS.             *\n*                                                                     *\n*                                                                     *\n*                 (11) NETOP GENERATED COMMANDS:                      *\n*                                                                     *\n*        SUBROUTINE RCVVTAM FILTERS ALL OUTPUT FROM VTAM AND IN SOME  *\n*        CASES CAUSES VTAM COMMANDS TO BE ISSUED IN RESPONSE, WHILE   *\n*        OTHERS CAUSE OUTPUT FORMATS TO BE MODIFIED OR OS COMMANDS    *\n*        TO BE ISSUED:                                                *\n*                                                                     *\n*        MESSAGE                               RESPONSE/ACTION        *\n*                                                                     *\n*        IST852I (CLUSTER UNAVAIL.)            V NET,INACT,I          *\n*        IST209I (INT. REQD. ON CONTACT)       V NET,INACT,I          *\n*        IST285,286,413 (DUMPING MESSAGES)     SE  TO SYS. PGMRS.     *\n*        IST082I (DISPLAY LINE WITH ALLOC= )   'TSONNNN' CONVERTED TO *\n*                                              USERID (ASID).         *\n*                                                                     *\n*                                                                     *\n*                 (12) PF10 CLUSTER ONLY DISPLAY:                     *\n*                                                                     *\n*        THIS FEATURE IS TRIGGERED BY THE 1ST CHARACTER OF ALL CLUSTER*\n*        NODENAMES BEING THE SAME.  THE DEFAULT IS 'C' BUT USE &CLUST *\n*        TO SELECT YOUR OWN IF NECESSARY.  WHEN A DISPLAY COMMAND SUCH*\n*        AS  'C7A0-5,I' IS ENTERED VIA PF10, ALL TERMINAL INFORMATION *\n*        IS OMITTED AND CLUSTER INFORMATION HI-LIGHTED TO DRAW        *\n*        ATTENTION TO, IN THIS CASE, DEAD CLUSTERS ON LINES BETWEEN   *\n*        L7A0 AND L7A5.                                               *\n*                                                                     *\n*                                                                     *\n*        RESTRICTIONS:                                                *\n*                                                                     *\n*                   SYSTEMS.     MVS                                  *\n*                                                                     *\n*                   TERMINALS:   3277-2, 3278-2/3/4                   *\n*                                MAX=8 (NUMBER OF ASSEMBLED TICBS)    *\n*                                                                     *\n*        REGISTER CONVENTIONS:                                        *\n*                                                                     *\n*        R0,R1      PARAMETER PASSING                                 *\n*        R2         @ RPL                                             *\n*        R3         @ TICB                                            *\n*        R4         @ DA (ISTDPOHD)                                   *\n*        R5-R9      WORK REGISTERS (VARIOUS CONTENTS)                 *\n*        R10        CODE BASE                                         *\n*        R11        DATA BASE 1                                       *\n*        R12        DATA BASE 2                                       *\n*        R13        SAVE AREA ADDRESS                                 *\n*        R14        RETURN ADDRESS, OCCASIONAL WORKREG                *\n*        R15        SUBROUTINE ADDRESSES, RETURN CODE, ACTION CODE    *\n*                                                                     *\n*        DEFINITIONS:                                                 *\n*                                                                     *\n*        COMMAND -  DATA UNIT ORIGINATING AT A TERMINAL AND DESTINED  *\n*                   FOR VTAM. CONTAINS A VTAM OPERATOR COMMAND (VARY, *\n*                   MODIFY, DISPLAY, OR REPLY).                       *\n*                                                                     *\n*        MESSAGE -  A DATA UNIT ORIGINATING IN VTAM DESTINED FOR A    *\n*                   REMOTE OPERATOR TERMINAL LOGGED ONTO THE PO.      *\n*                                                                     *\n*        UNSOLICITED MESSAGE - MESSAGE NOT RELATED TO ANY COMMAND     *\n*                   PREVIOUSLY SENT TO VTAM FROM A REMOTE OPERATOR.   *\n*                   AN UNSOLICITED MESSAGE IS RECOGNIZED BY THE       *\n*                   INDICATOR IN THE MESSAGE HEADER  (SEE POHGEN IN   *\n*                   ISTDPOHD DSECT).                                  *\n*                                                                     *\n*        MASTER TERMINAL - TERMINAL DESIGNATED BY PO TO RECEIVE       *\n*                   UNSOLICITED MESSAGES (THESE ARE ALSO SENT TO ALL  *\n*                   MASTER CANDIDATES).                               *\n*                                                                     *\n*                                                                     *\n*        PROCESSOR: ASSEMBLER                                         *\n*                                                                     *\n*        ATTRIBUTES:  NON-REUSABLE                                    *\n*                     AC(1)                                           *\n*                                                                     *\n*       ENTRY: NETOP                                                  *\n*                                                                     *\n*       LINKAGE: CALL                                                 *\n*                                                                     *\n*       INPUT: R13: SAVE AREA ADDRESS                                 *\n*              R14: RETURN POINT ADDRESS                              *\n*              R15: ENTRY POINT ADDRESS                               *\n*                                                                     *\n*       OUTPUT: ALL REGISTERS RESTORED                                *\n*                                                                     *\n*       EXIT-NORMAL: BR 14                                            *\n*                                                                     *\n*       EXIT-ERROR:  ABEND                                            *\n*                                                                     *\n*                    ABEND CODES:                                     *\n*                                                                     *\n*                                  1 OPEN FAILURE                     *\n*                                  2 CLOSE FAILURE                    *\n*                                 10 SETLOGON FAILED                  *\n*                                 16 ENVIRONMENT ERROR (FROM LERAD)   *\n*                                 20 LOGIC ERROR (FROM LERAD)         *\n*                                 23 RECEIVE FAILURE (INBOUND)        *\n*                                                                     *\n*       EXTERNAL-REFERENCES:  NONE                                    *\n*                                                                     *\n*       CONTROL BLOCKS: TICB - TERMINAL INFORMATION CONTROL BLOCK     *\n*                       ISTDPOHD - MESSAGE BUFFER                     *\n*                                                                     *\n*       TABLES:  MATABLE - LIST OF TERMINALS AUTHORIZED TO BE MASTER  *\n*                TICBPOOL - POOL OF TICBS                             *\n*                                                                     *\n*       SYSTEM MACROS:                                                *\n*                ABEND,WAIT,PUT,WRITE,READ,POST,OPEN,CLOSE,DCB,WTO    *\n*                                                                     *\n*       VTAM MACROS:                                                  *\n*                ACB,RPL,NIB,MODCB,CHECK,EXLST,SETLOGON,OPEN,CLOSE    *\n*                OPNDST,CLSDST,SEND,RECEIVE,SENDCMD,RCVCMD            *\n*                                                                     *\n*                                                                     *\n*       RELATIONSHIPS BETWEEN MAINLINE, EXITS AND SUBROUTINES:        *\n*                                                                     *\n*       CODE SEGMENT   CALLS                                          *\n*                                                                     *\n*        MAINLINE       SHOWCDS,PRLOG,PUTLOG,IDFIND,                  *\n*                       SND3270                                       *\n*        ABEXIT         CVHX                                          *\n*                                                                     *\n*        INBOUND        RCV3270,ATOX                                  *\n*        OUTBOUND       IDFIND,RCVVTAM,PUTLOG,SND3270,INBOUND(INLENOK)*\n*        LOGON          INT3270,PUTLOG,CLSDST                         *\n*        LOSTERM        PUTLOG,MAFIND,CLSDST                          *\n*        RELREQ         PUTLOG,MAFIND,CLSDST                          *\n*        TPEND          CVHX,PUTLOG                                   *\n*        ERROR          PUTLOG                                        *\n*                                                                     *\n*        SHOWCDS        CVHX                                          *\n*        CVHX                                                         *\n*        RCVVTAM        TSOUID                                        *\n*        RCV3270        INT3270,ATOX,PUTLOG,PRLOG,MAFIND,CLSDST,      *\n*                       TSOUID                                        *\n*        CLSDST         PUTLOG                                        *\n*        ATOX                                                         *\n*        MAFIND         IDFIND,PUTLOG                                 *\n*        IDFIND                                                       *\n*        PUTLOG         PRLOG                                         *\n*        PRLOG                                                        *\n*        SND3270        INT3270                                       *\n*        INT3270                                                      *\n*        TSOUID                                                       *\n*                                                                     *\n***********************************************************************\n*\n*\n         MACRO ,                                                 85241\n&NM      $TU   &A,&O,&LBL=,&PREFIX=                              85241\n         GBLC  &TU@PFX                                           85241\n         LCLA  &I                                                85241\n         AIF   ('&PREFIX' EQ '').NOPFX                           85241\n&TU@PFX  SETC  '&PREFIX'                                         85241\n.NOPFX   AIF   ('&O' EQ '' AND '&LBL' NE '').CRUD                85241\n         AIF   ('&O' NE '').EXPAND                               85241\n&NM      DC    Y(&TU@PFX.&A,0)                                   85245\n         MEXIT ,                                                 85241\n.CRUD    MNOTE 8,'LBL= NOT PERMITTED WITHOUT OPERAND'            85241\n         MEXIT ,                                                 85241\n.EXPAND  ANOP  ,                                                 85241\n&I       SETA  &SYSNDX                                           85241\n&NM      DC    Y(&TU@PFX.&A,1,ZZTU&I-*-2)                        85245\n&LBL     DC    &O                                                85241\nZZTU&I   DS    0X                                                85241\n         MEND  ,                                                 85241\n         SPACE 1                                                 85241\n         MACRO ,                                                 85241\n&NM      $TUP  &TXT=                                             85241\n         LCLA  &I,&J                                             85241\n         LCLC  &N                                                85241\n&I       SETA  N'&TXT                                            85241\n&N       SETC  '&NM'                                             85241\n&J       SETA  1                                                 85241\n.LOOP    AIF   (&I LT 2).NOA                                     85241\n&N       DC    A(&TXT(&J))                                       85241\n&N       SETC  ''                                                85241\n&I       SETA  &I-1                                              85241\n&J       SETA  &J+1                                              85241\n         AGO   .LOOP                                             85241\n.NOA     AIF   (&I LT 1).NONE                                    85241\n&N       DC    0A(0),X'80',AL3(&TXT(&J))                         85241\n.NONE    MEND  ,                                                 85241\n         MACRO ,                                                 85241\n&NM      $DYNAL &TU,&VERB=                                       85241\n&NM      LA    R15,REQBLOCK  POINT TO THE REQUEST BLOCK          85241\n         LA    R1,&TU        GET THE TEXT UNIT POINTER           85241\n         MVI   1(R15),&VERB  SET THE REQUEST CODE                85241\n         ST    R1,8(,R15)    SET THE TEXT UNIT POINTER ADDRESS   85241\n         LA    R1,DYNPTR     POINT TO THE REQUEST BLOCK          85241\n         SVC   99            REQUEST ALLOCATION SERVICE          85241\n         LTR   R15,R15       SET CONDITION CODE                  85241\n         MEND  ,                                                 85241\n         MACRO\n&NAME    $XINIT &XBASE=BASE1@,&TBASE=SUBR@,&SA=EXITSA,&RET=RET@,       *\n               &DBASE1=DBASE1@,&DBASE2=DBASE2@,&DORG=@DBASE2\n         GBLC  &GNAME\n&GNAME   SETC  '&NAME'\n         DS    0F                 ALIGN\n         USING &NAME,&TBASE\n&NAME    B     *+16               JUMP PAST CONSTANTS\n         DC    CL8'&NAME'         EXIT ID\n         DC    A(&DORG-&NAME)     DATA BASE ORIGIN\n         AIF   ('&NAME' NE 'ABEXIT').NOSAVE\n         SAVE  (14,12)\n.NOSAVE  AIF   ('&GNAME' EQ 'ERROR').LBASE  ALREADY SET UP\n         L     &DBASE1,&NAME+12   PICK UP DBASE OFFSET\n         ALR   &DBASE1,&TBASE     ADD TEMP BASE TO GET ADDRESS\n         L     &DBASE2,&DORG      LOAD 2ND DBASE ADDRESS\n.LBASE   ANOP\n         LR    &XBASE,&TBASE      LOAD EXIT BASE ADDRESS\n         DROP  &TBASE\n         USING &NAME,&XBASE\n.*       ASSUME USINGS FOR DBASES ALREADY DONE IN MAINLINE\n         AIF   ('&SA' EQ 'EXITSA' OR '&GNAME' EQ 'TPEND').NSAVE\n         LR    &TBASE,SA@         SAVE HIGH SA PTR\n.NSAVE   ANOP\n         LA    SA@,&SA            LOAD NEW SA PTR\n         AIF   ('&SA' EQ 'EXITSA' OR '&GNAME' EQ 'TPEND').SAVRET\n         ST    SA@,8(,&TBASE)     CHAIN FORWARD\n         ST    &TBASE,BWDPTR      CHAIN BACK\n         AIF   ('&GNAME' EQ 'ERROR').SAVRET\n         MEXIT\n.SAVRET  ANOP\n         TM    PL1WD,INUSE        SAVE AREA IN USE?\n         BZ    *+24               NO\n         $AB   13                 YES - GET A DUMP - THIS WE MUST SEE\n         ST    &RET,PL1WD         SAVE RETURN PTR IN PL1 WORD\n         OI    PL1WD,INUSE        FLAG SAVE AREA IN USE\n         OI    &NAME+12,INUSE     FLAG EXIT IN USE\n         MEND\n*\n         MACRO\n&NAME    $XRET &RET=RET@\n         GBLC  &GNAME\n&NAME    NI    PL1WD,255-INUSE    FLAG SAVE AREA FREE\n         NI    &GNAME+12,255-INUSE    FLAG EXIT FREE\n         L     &RET,PL1WD         PICK UP RET PTR\n         AIF   ('&GNAME' NE 'ERROR').RET\n         L     SA@,BWDPTR         RELOAD CALLER'S SA PTR\n         XC    FWDPTR,FWDPTR      ZERO CALLER'S LOW SA PTR\n.RET     ANOP\n         BR    &RET               RETURN\n         MEND\n*\n         MACRO\n&NAME    $XCTL &LABEL,&SUBNAME,&XBASE=BASE1@\n         GBLC  &GNAME\n&NAME    NI    &GNAME+12,255-INUSE   FLAG OLD EXIT FREE\n         L     &XBASE,=A(&SUBNAME)   LOAD NEW EXIT BASE ADDRESS\n         USING &SUBNAME,&XBASE       ESTABLISH NEW EXIT ADDRESSING\n         OI    &SUBNAME+12,INUSE     FLAG NEW EXIT IN USE\n         B     &LABEL                GO TO NEW EXIT\n         USING &GNAME,&XBASE         RE-ESTABLISH OLD EXIT ADDRESSING\n         MEND\n*\n         MACRO\n&NAME    $CALL &SUBR,&PARM,&LEN,&LPARM\n         LCLC  &NAM,&SUBNAM,&REG\n         AIF   (K'&PARM GT 0 AND '&PARM' EQ '&LEN' OR                  *\n               '&LEN' EQ 'R1' OR '&LEN' EQ '1' OR                      *\n               '&LEN' EQ '(PARM@)').MERR\n&NAM     SETC  '&NAME'\n         AIF   (K'&PARM EQ 0).NOPARM\n         AIF   ('&PARM'(1,1) NE '(').NOTREG\n         AIF   ('&PARM' EQ '(PARM@)').NOLPARM\n&REG     SETC  '&PARM'(2,K'&PARM-2)\n&NAM     LR    PARM@,&REG     PICK UP PARM\n         AGO   .NAMRST\n.MERR    MNOTE 4,'PARM=&PARM WITH LEN=&LEN WILL CAUSE EXECUTION ERRORS'\n         MEXIT\n.NOTREG  ANOP\n         AIF   ('&PARM' EQ '0').ZPARM\n&NAM     LA    PARM@,&PARM    PICK UP PARM\n         AGO   .NAMRST\n.ZPARM   ANOP\n&NAM     SR    PARM@,PARM@    SET PARM\n         AGO   .NAMRST\n.NOPARM  AIF   (K'&LPARM EQ 0).NOLPARM\n&NAM     L     PARM@,&LPARM   PICK UP LOAD PARM\n.NAMRST  ANOP\n&NAM     SETC  ''\n.NOLPARM ANOP\n         AIF   (K'&LEN EQ 0).NOLEN\n         AIF   ('&LEN'(1,1) NE '(').NOTLREG\n&REG     SETC  '&LEN'(2,K'&LEN-2)\n         AIF   ('&REG'(1,2) EQ 'WK').LENOK\n         AIF   ('&REG' EQ 'SUBR@').LENCHG\n&NAM     LR    SUBR@,&REG     COPY LENGTH\n         AGO   .LENCHG\n.NOTLREG ANOP\n&REG     SETC  '&LEN'\n         AIF   ('&LEN'(1,1) NE '*').NOTAST\n&REG     SETC  'L''&PARM'.'&LEN'(2,K'&LEN-1)\n.NOTAST  ANOP\n         LA    SUBR@,&REG     LOAD LENGTH\n.LENCHG  ANOP\n&NAM     SETC  ''\n&REG     SETC  'SUBR@'\n.LENOK   ANOP\n&NAM     SLL   &REG,24        SHIFT TO HI END\n         OR    PARM@,&REG     OR LENGTH INTO PARM\n&NAM     SETC  ''\n.NOLEN   ANOP\n&SUBNAM  SETC  '=A(&SUBR)'\n&NAM     L     SUBR@,&SUBNAM PICK UP SUBR EP\n         BALR  RET@,SUBR@     GO TO SUBROUTINE\n         MEND\n*\n         MACRO\n&NAME    $SINIT &SARET=\n.*\n.*          SARET=(LABEL1,LABEL2) IS USED AS FOLLOWS:\n.*\n.*       LABEL1 IS USED AS THE TARGET FOR SAVING RETURN AND BASE REGS,\n.*       SPACE BEING RESERVED FOR THESE AT A SUSEQUENT ENTRY POINT.\n.*       IF LABEL2 IS CODED IT IS USED AT THE NEXT ENTRY POINT TO\n.*       BYPASS CODE AFTER THE BASE REG HAS BEEN UPDATED DURING FALL\n.*       THROUGH, THE NORMAL MULTI-EP ACTION.\n.*\n         GBLC  &SUBNAME(32),&JUMP\n         GBLB  &MULTEP\n         GBLA  &SUB#\n         LCLC  &SUBNAM\n         LCLA  &SKIP\n&SKIP    SETA  20\n         AIF   (&MULTEP).MULTGO\n         AIF   (K'&SARET EQ 0).NOMULT\n&SKIP    SETA  12\n&MULTEP  SETB  1\n         AIF   (K'&SARET(2) EQ 0).NOMULT\n&JUMP    SETC  '&SARET(2)'     JUMP LABEL FOR FALL THRU AT NEXT $SINIT\n         AGO   .NOMULT\n.MULTGO  AIF   (K'&SARET GT 0).MULTON\n&MULTEP  SETB  0\n         AGO   .MULTOK\n.MULTON  ANOP\n&SKIP    SETA  12\n.MULTOK  ANOP\n         AIF   (K'&JUMP GT 0).NOCNOP\n         CNOP  0,4                  FULLWORD ALIGN\n.NOCNOP  ANOP\n         LA    BASE1@,&NAME\n         USING &NAME,BASE1@         BASE USAGE\n         AIF   (K'&JUMP GT 0).JUMP\n&JUMP    SETC  '*+18+&SKIP'\n.JUMP    ANOP\n         B     &JUMP\n&JUMP    SETC  ''\n.NOMULT  ANOP\n         DS    0F                   ALIGN\n         USING &NAME,SUBR@          TEMP BASE\n&SUB#    SETA  &SUB#+1\n&SUBNAME(&SUB#) SETC '&NAME'\n&SUBNAM  SETC '&SARET(1)'\n&NAME    B     *+&SKIP              JUMP CONSTANTS\n         DC    CL8'&NAME'           SUBR ID\n         AIF   (K'&SARET GT 0).NOSA\n         DS    2F                   RET PTR/BASE REG SAVE AREA\n&SUBNAM  SETC  '&SUBNAME(&SUB#)'\n.NOSA    ANOP\n         ST    RET@,&SUBNAM+12      SAVE RET PTR\n         ST    BASE1@,&SUBNAM+16    SAVE CALLERS BASE\n         OI    &SUBNAM+16,INUSE     FLAG SUBR IN USER\n         LR    BASE1@,SUBR@         LOAD LOCAL SUBR BASE\n         DROP  SUBR@                RESET ASSEMBLER\n         USING &NAME,BASE1@         BASE USAGE\n         MEND\n*\n         MACRO\n&NAME    $SRET\n         GBLC  &SUBNAME(32)\n         GBLA  &SUB#\n         LCLC  &SUBNAM\n&SUBNAM  SETC  '&SUBNAME(&SUB#)'\n&NAME    L     RET@,&SUBNAM+12      PICK UP RET PTR\n         NI    &SUBNAM+16,255-INUSE RESET INUSE FLAG\n         L     BASE1@,&SUBNAM+16    RESTORE CALLERS BASE\n         BR    RET@                 RETURN\n         MEND\n*\n         MACRO\n&NAME    $AB   &ABCD,&NODUMP\n         LCLC  &REG,&DUMP\n&REG     SETC  '(1)'\n&NAME    STM   R0,R1,ABREGS   SAVE REGS CLOBBERED BY ABEND MACRO\n         AIF   ('&ABCD'(1,1) EQ '(').REGFMT\n         LA    R1,&ABCD       LOAD USER ABEND CODE\n         AGO   .CHKDMP\n.REGFMT  ANOP\n&REG     SETC  '&ABCD'\n.CHKDMP  AIF   ('&NODUMP' EQ 'NODUMP').NODUMP\n         ABEND &REG,DUMP\n         MEXIT\n.NODUMP  ANOP\n         ABEND &REG\n         MEND\n*\n         MACRO\n&NAME    $MATAB\n         LCLA  &MALEN,&I\n&I       SETA  1\n&NAME    DS    0F             MASTER CANDIDATE TABLE\n.MATLOOP ANOP\n&MALEN   SETA  K'&SYSLIST(&I)\n         DC    AL1(&MALEN),C'&SYSLIST(&I)'\n&I       SETA  &I+1\n         AIF   (&I LE N'&SYSLIST).MATLOOP\n         MEND\n*\n         MACRO\n         $HELPF2\n         LCLC  &N,&P\n         LCLA  &I\n*\n*        SET PF2 KEYWORD INTENSITIES TO REFLECT MODES IN FORCE\n*\n.HLOOP   ANOP\n&I       SETA  &I+1\n&P       SETC  '&SYSLIST(&I)'(1,1)\n&N       SETC  '&P.Z'\n         MVI   HELP&N,X'60'              INITIALIZE\n         MVI   HELP&P,X'60'               AS LO\n         TM    TIFLAGS2,TIF2&SYSLIST(&I) IF MODE NOT SET,\n         BO    *+12\n         MVI   HELP&N,X'E8'               THEN SET NEGATIVE TO HI\n         B     *+8\n         MVI   HELP&P,X'E8'               ELSE SET POSITIVE TO HI\n         SPACE\n         AIF   (&I LT N'&SYSLIST).HLOOP\n         MEND\n*\n         MACRO\n         $3270\n*\n*        3270 ORDERS, PF/PA KEYS, AND ATTRIBUTE CODES\n*\n         GBLC  &L(24)\n&L(1)    SETC  '4040'\n&L(2)    SETC  'C150'\n&L(3)    SETC  'C260'\n&L(4)    SETC  'C3F0'\n&L(5)    SETC  'C540'\n&L(6)    SETC  'C650'\n&L(7)    SETC  'C760'\n&L(8)    SETC  'C8F0'\n&L(9)    SETC  '4A40'\n&L(10)   SETC  '4B50'\n&L(11)   SETC  '4C60'\n&L(12)   SETC  '4DF0'\n&L(13)   SETC  '4F40'\n&L(14)   SETC  '5050'\n&L(15)   SETC  'D160'\n&L(16)   SETC  'D2F0'\n&L(17)   SETC  'D440'\n&L(18)   SETC  'D550'\n&L(19)   SETC  'D660'\n&L(20)   SETC  'D7F0'\n&L(21)   SETC  'D940'\n&L(22)   SETC  '5A50'\n&L(23)   SETC  '5B60'\n&L(24)   SETC  '5CF0'\nSF       EQU   X'1D'          START FIELD\nSBA      EQU   X'11'          SET BUFFER ADDRESS\nIC       EQU   X'13'          INSERT CURSOR\nPT       EQU   X'05'          PROGRAM TAB\nRA       EQU   X'3C'          REPEAT TO ADDRESS\nEUA      EQU   X'12'          ERASE UNPROTECTED TO ADDRESS\nENTER    EQU   X'7D'\nXENTER   EQU   X'0D'\nPF1      EQU   X'F1'\nXPF1     EQU   X'01'\nPF2      EQU   X'F2'\nXPF2     EQU   X'02'\nPF3      EQU   X'F3'\nXPF3     EQU   X'03'\nPF4      EQU   X'F4'\nPF5      EQU   X'F5'\nPF6      EQU   X'F6'\nPF7      EQU   X'F7'\nPF8      EQU   X'F8'\nPF9      EQU   X'F9'\nPF10     EQU   X'7A'\nPF11     EQU   X'7B'\nPF12     EQU   X'7C'\nPA1      EQU   X'6C'\nPA2      EQU   X'6E'\nPA3      EQU   X'6B'\nCLEAR    EQU   X'6D'\nTESTREQ  EQU   X'F0'\n         MEND\n*\n         GBLC  &L(24)         3270 BUFFER LINE ADDRESSES (COL 1)\n         LCLC  &SENDLST       LIST OF TSO VTAM SYSTEM PGMRS. FOR SENDS\n         LCLC  &CLUST         STARTING CHARACTER OF ALL CLUSTERS\n         LCLC  &REL           RELEASE AND LEVEL (R.L)\n         LCLB  &MAROLL        ROLL/NROLL MODE FOR INITIAL MASTER\n&SENDLST SETC  ''                                                86356\n&CLUST   SETC  'R'                                               85240\n&REL     SETC  '2.1'\n&MAROLL  SETB  1              ROLL\nNETOP    START 0                                                R85240\n         TITLE  'N E T O P - MISC. DSECTS'\n* TERMINAL INFORMATION CONTROL BLOCK (TICB)\n*\nTICB     DSECT\nTINDICS  DS    0CL4               INDICATORS\nTISTATUS DS    XL1                STATUS BYTE\nTISALLOC EQU   B'10000000'  80    ALLOCATION BIT\nTISACT   EQU   B'01000000'  40    TERMINAL ACTIVE\nTISMCAND EQU   B'00100000'  20    MASTER CANDIDATE\nTISMA    EQU   B'00010000'  10    MASTER TERMINAL\nTISUID   EQU   B'00001000'  08    USERID QUERY\nTISTACK  EQU   B'00000100'  04    MESSAGES ARE STACKED AWAITING ROLL\nTISREPLY EQU   B'00000010'  02    REPLY COMMAND ISSUED\nTISNOMOR EQU   B'00000001'  01    NO MORE TICBS\n*\nTIFLAGS  DS    XL1\nTIFDSP   EQU   B'10000000'  80    DISPLAY CMD ENTERED\nTIFVLOG  EQU   B'01000000'  40    PF7 (VARY ,LOGON)\nTIFCLUST EQU   B'00100000'  20    PF10 (DISPLAY, CLUSTER ONLY STATUS)\nTIFDSP11 EQU   B'00010000'  10    PF11 (DISPLAY, AND LOG)\nTIFHELP  EQU   B'00001000'  08    PF1 (HELP) ENTERED\nTIFUNSOL EQU   B'00000100'  04    LAST MSG DISPLAYED IS UNSOL\nTIFWTROL EQU   B'00000010'  02    WAIT FOR ROLL CONDITION (SCREEN FULL)\nTIFNAUT  EQU   B'00000001'  01    NO-AUTO RE-ENTRY OF EXPANDED CMD\n*\nTIFLAGS2 DS    XL1                PF2 CONTROL FLAGS\nTIF2ROLL EQU   B'10000000'  80    ROLL FLAG - ON=ROLL SCREEN\nTIF2AUTO EQU   B'01000000'  40    AUTO FLAG - ON=NO AUTO CMDS\nTIF2ECHO EQU   B'00100000'  20    ECHO FLAG - ON=NO ECHOING TO TERMINAL\nTIF2SOLO EQU   B'00010000'  10    SOLO FLAG - ON=SOLICITED MSGS ONLY\nTIF2LOGD EQU   B'00001000'  08    LOGD FLAG - ON=LOG DISPLAY CMDS\n*\nTIFLAGS3 DS    XL1           VTAM SUPPORT FLAGS                  87107\nTIF3MCNT EQU   X'80'           REDISPLAY 'STACKED' COUNT         87109\nTIF3READ EQU   X'02'           READ COMMAND POSTED (IN BRACKET)  87107\nTIF3NTO  EQU   X'01'           NTO SUPPORT (PLANNED)             87107\n*\nTINAMLEN DS    H                  LENGTH TERMINAL NAME\nTINAME   DS    CL8                TERMINAL NAME\nTIMSGID  DS    0XL2               MESSAGE ID\nTID      DS    XL1                 TERMINAL ID\nTIMSGSEQ DS    XL1                 MESSAGE SEQUENCE NUMBER\nTICMDLEN DS    H                  LENGTH LAST COMMAND ENTERED\nTICMD    DS    CL40               LAST COMMAND ENTERED\nTICOPYL  EQU   *-TICB             FOR COPY TO DUMTICB DURING ECHO\nTILNCT   DS    H                  SCREEN LINE COUNT\nTIDSPCT  DS    H                  OUTSTANDING DISPLAY COUNT\nTIUNADDR DS    XL2                3270 BUFADD OF LAST UNSOL MSG\nTIABRLEN DS    H                  LENGTH LAST ABBREV. COMMAND ENTERED\nTIABR    DS    CL30               LAST ABBREV. COMMAND ENTERED\nTICID    DS    F                  TERMINAL CID\nTIHEAD@  DS    F                  STACK HEAD POINTER\nTITAIL@  DS    F                  STACK TAIL POINTER\nTISTKCT  DS    PL2                STACK ELEMENT COUNT\n         DS    0F                 GUARANTEE L'TICB = N FULLWORDS\nTICBLEN  EQU   ((*-TICB)+31)/32*32 L'TICB MULTIPLE OF 32 BYTES\n         SPACE 5\n         PRINT ON,NOGEN\n*\n* DATA AREA\n*\n         ISTDPOHD\n         ORG   POHID\nPOHTID   DS    XL1                TERMINAL ID\nPOHMSQ   DS    XL1                MESSAGE SEQUENCE NUMBER\nPOHLEN   EQU   *-ISTDPOHD         LENGTH OF PO HEADER\nDATX     DS    CL124              MESSAGE TEXT\nDALEN    EQU   *-ISTDPOHD         LENGTH OF DATA AREA\nDATXLEN  EQU   DALEN-POHLEN       LENGTH OF TEXT AREA\n*\n*        VTAM MESSAGE FIELDS\n*\n         ORG   DATX+3         VTAM MESSAGE NUMBER\nDAMSG#   DS    CL3\n         ORG   DATX+9         VTAM NODE NAME\nDAMSGNOD DS    CL8\n         ORG   DATX+17        RESPONSE VERB (ACCEPTED)\nDAMSGFAI DS    CL6\n         ORG   DATX+18        RESPONSE VERB (FAILED, IGNORED)\nDAMSGRSP DS    CL6\nDAM80TXL EQU   16             IST080I 'NODENAME STATUS'  FIELD LENGTH\nDAM80NXL EQU   22             OFFSET OF ONE  'NODENAME STATUS'  TO NEXT\n         ORG   DATX+18        IST082I DEVICE TYPE\nDAM82DEV DS    CL5\n         ORG   DATX+35        IST082I ALLOC APPLID\nDAM82ALC DS    CL8\n         ORG   DATX+63        IST082I SIMLOGON APPLID\nDAM82SIM DS    CL8\nDA342RC  EQU   DATX+93,2      IST342I RETURN CODE\nDA400APL EQU   DATX+44,8      IST400I APPLID\nDA804APL EQU   DATX+35,8      IST804I APPLID\nDA805APL EQU   DATX+33,8      IST805I APPLID\n*\n*        VTAM ERROR MESSAGE FIELDS\n*\n         ORG   DATX+17        IST285I/6I 370X NODE NAME\nDA285NOD DS    CL8\n         ORG   DATX+26        IST852I CLUSTER NODE NAME\nDA852NOD DS    CL8\n         ORG   DATX+37        NCP BTU COMMAND\nDABTUCMD DS    CL4\n         ORG   DATX+57        EG: INTERVENTION REQD - BSC STATUS\nDABSCST1 DS    CL2,CL3            40 -\nDABSCST2 DS    CL2                     50\n         ORG   DATX+61        EG: PERM. I/O ERROR - NCP RESPONSE\nDANCPRS1 DS    CL2,CL3            AB -\nDANCPRS2 DS    CL2                     80   (TIMEOUT)\n*\nSTKEL    DSECT                STACK ELEMENT\nSTKNXEL  DS    F              NEXT STACK ELEMENT POINTER\nSTKELEN  DS    H              STACK ELEMENT LENGTH\nSTKDATA  DS    CL(DALEN)      STACK ELEMENT DATA (MAX LENGTH)\n*\n* PARAMETER LIST FOR TPEND EXIT\n*\nTPENDPRM DSECT\nTPACB@   DS    F                  @ ACBTERMS\nTPREASON DS    F                  REASON CODE\n*\n* PARAMETER LIST FOR LOGON AND RELREQ EXITS\n*\nLOGONPRM DSECT\nLGNACB@  DS    F                  @ ACBTERMS\nTNAME@   DS    F                  @ TERMINAL NAME\n         DS    F                  RESERVED\nLGNMSGLN DS    F                  LENGTH OF LOGON MESSAGE\n*\n* PARAMETER LIST FOR LOSTERM EXIT\n*\nLOSTPARM DSECT                    FOR LOSTERM AND RESP EXITS\nLOSTACB  DS    F                  @ ACBTERMS\nLOSTCID  DS    F                  CID OF TERMINAL\nLOSTUSER DS    F                  USER FIELD INFO - @ TICB\nLOSTCODE DS    F                  REASON CODE (UNUSED FOR RESP EXIT)\nRESPRPL  DS    F                  RESPONSE EXIT READ-ONLY RPL\n*\nSA       DSECT                    SAVE AREA DSECT\nPL1WD    DS    F                  RESERVED\nINUSE    EQU   X'80'              IN USE FLAG\nBWDPTR   DS    F                  @ CALLER'S SAVE AREA\nFWDPTR   DS    F                  @ CALLEE'S SAVE AREA\nRETURN   DS    F                  CALLER'S RETURN ADDRESS\nENTRY    DS    F                  CALLEE'S ENTRY ADDRESS\n         PRINT ON,NOGEN\n         IFGACB AM=VTAM\n         ISTUSFBC\n         IFGRPL AM=VTAM\n         ISTDNIB\n         IHASDWA\n         IEFZB4D2             DYNALLOC EQUATES\n         IKJTSB   EXT=YES,LIST=YES\n         IKTTCAST\n         IHAASCB\n         CVT   DSECT=YES,LIST=NO                                 92321\n         PRINT ON,NOGEN\n         TITLE 'N E T O P - MISC. EQUATES'\n* REGISTER EQUATES\n*\n         REGEQU ,                                                85240\n         $3270\n*\n*        NOTE:   SYMBOL @ IS USED TO DENOTE 'ADDRESS OF' OR 'POINTER'.\n*              IT IS USED AS A SUFFIX IN REGISTER EQUATES AND AS A\n*              PREFIX IN ADCON SYMBOLS.\n*\nACTCD    EQU   R0                 ACTION CODE FROM VTAM\nPARM@    EQU   R1                 POINTER TO PARAMETER LIST\nRPL@     EQU   R2                 RPL ADDRESS REGISTER\nTICB@    EQU   R3                 TICB ADDRESS REGISTER\nDA@      EQU   R4                 DATA AREA @ (INBOUND,OUTBOUND)\nNIB@     EQU   R4                 NIB @ (MAINLINE,LOGON,RELREQ)\nCID      EQU   R4                 TERMINAL CID (LOSTERM)\nMSGLEN   EQU   R5                 MESSAGE LENGTH (OUTBOUND)\nWKA      EQU   R6                 WORK REGISTER\nWKB      EQU   R7                 WORK REGISTER\nACB@     EQU   R8                 ACB @\nOUTX     EQU   R8                 SNDLOOP INDEX (SND3270)\nWKC      EQU   R8                 OCCASIONAL WORK REGISTER\nSTKEL@   EQU   R9                 STACK ELEMENT ADDRESS\nLOG@     EQU   R9                 RECORD PTR IN LOG BUFFER\nBASE1@   EQU   R10                1ST CODE BASE REG\nDBASE1@  EQU   R11                1ST DATA BASE REG\nDBASE2@  EQU   R12                2ND DATA BASE REG\nSA@      EQU   R13                SA PTR\nRET@     EQU   R14                RETURN ADDRESS\nWKD      EQU   R14                OCCASIONAL WORK REGISTER\nSUBR@    EQU   R15                SUBROUTINE ENTRY ADDRESS\nRTNCD    EQU   R15                RETURN CODE\n*\n* RCV3270 RETURN CODES (FOR INBOUND)\n*\nRCVCMDOK EQU   0                  COMMAND OK\nRCVCMDRS EQU   4                  COMMAND OK AND RESPONSE MSG\nRCVRMSG  EQU   8                  RESPONSE MSG\nRCVNRMSG EQU   12                 NO RESPONSE MSG\nRCVCLDST EQU   12                 CLSDST ISSUED FOR TERMINAL\nRCVCLOSD EQU   16                 CLOSEDOWN ISSUED FOR NETOP\n*\n         TITLE 'N E T O P - MAINLINE'\n*\n***********************************************************************\n*                                                                     *\n* INITIAL HOUSEKEEPING - ENTRY CODE FOR OS/VS.                        *\n* SAVE REGISTERS, ESTABLISH ADDRESSABILITY, SET UP SAVE AREA.         *\n*                                                                     *\n***********************************************************************\n*\nNETOP    CSECT ,                                                 85240\n         B     NETOPIN-*(,R15)  BRANCH AROUND                    85240\n         DC    AL1(15),C'NETOP: &SYSDATE'                        85240\nA@DBASE2 DC    A(@DBASE2)                                        85240\nA@MAINSA DC    A(MAINSA)                                         85240\nNETOPIN  LR    BASE1@,R15                                        85240\n         USING NETOP,BASE1@                                      85240\n         L     SA@,A@MAINSA                                      85240\n         USING SA,SA@             SAVE AREA DSECT ADDRESSING\n         L     DBASE1@,A@DBASE2   SET DATA BASE 1\n         USING @DBASE2,DBASE1@    DATA ADDRESSING (1)\n         L     DBASE2@,@DBASE2    SET DATA BASE 2\n         USING @DBASE2+4096,DBASE2@  DATA ADDRESSING (2)\n         USING TICB,TICB@         TICB DSECT ADDRESSING\n         USING IFGRPL,RPL@        RPL DSECT ADDRESSING\n         LA    ACB@,ACBTERMS      SET BASE FOR ACB\n         USING IFGACB,ACB@        ACB DSECT ADDRESSING\n         L     PARM@,0(,PARM@)    PARM PTR\n         SR    WKA,WKA\n         ICM   WKA,3,0(PARM@)     PICK UP PARM LENGTH\n         BZ    SETSTAE            IF ZERO, FORGET IT\n         CLI   2(PARM@),C'A'      SPECIAL CHAR?\n         BNL   NOSPEC             NO\n         LA    PARM@,1(,PARM@)    YES - JUMP OVER\n         BCTR  WKA,0               AND DECR LEN\n         CLI   1(PARM@),C'$'      STARTUP COMMANDS?\n         BNE   NOSPEC             NO\n         OI    POFLAGS,POFOSCMD   YES - FLAG IT\nNOSPEC   LA    NIB@,SIMNIB        SET POINTER TO NIB\n         LA    WKB,8              IF > 8,\n         CR    WKA,WKB             USE 8\n         BNH   *+6\n         LR    WKA,WKB\n         BCTR  WKA,0              DECR FOR EX\n         EX    WKA,MVPARM         MOVE PARM TO NIB\n*\n***********************************************************************\n*        SET UP ESTAE ENVIRONMENT                                     *\n***********************************************************************\n*\nSETSTAE  ESTAE ABEXIT,ASYNCH=YES,TERM=YES\n*\n***********************************************************************\n*                                                                     *\n* OPEN THE ACB FOR TERMINALS. OPENING THIS ACB FIRST WILL ALLOW THE   *\n* PO TO SIMLOGON A MASTER BEFORE ACTIVATING THE PRIMARY PO INTERFACE. *\n* NON MASTERS MAY LOGON  AND USE THE SECONDARY INTERFACE AT ANY TIME. *\n*                                                                     *\n***********************************************************************\n*\nOPENTCNT LA    R3,(2*60)/15       2 MIN TIME LIMIT FOR OPEN LOOP\n         MVC   NTP06TYP,=C'TERMINALS'\nOPENT    OPEN  ((ACB@))           OPEN THE ACB FOR TERMINALS\n         LTR   R2,RTNCD           CHECK AND SAVE RETURN CODE\n         BZ    LOGINIT            GO OPEN LOG IF SUCCESSFUL\n*\n* OPEN DID NOT SUCCEED: CHECK ERROR TYPE\n*\n         CLI   ACBERFLG,ACBONVRT  STORAGE SHORTAGE?\n         BE    OPENT              YES - RETRY\n         CLI   ACBERFLG,ACBOAPAA  OPENED ALREADY?\n         BNE   LOGINIT            NO\n        WTO    MF=(E,NTP04MSG)\n         B     MAINRET            YES - WTO AND TERMINATE\n*\n***********************************************************************\n*        INITIALIZE LOG                                               *\n***********************************************************************\n*\nLOGINIT  TIME\n         STM   R0,R1,STTIME      STORE TIME AND DATE, THEN\n         $CALL PRLOG              ALLOCATE AND INITIALIZE LOG\n*\nOPENTCHK LTR   WKA,R2             CHECK OPEN TERMINAL ACB RETURN CODE\n         BZ    RCVI               BRANCH IF SUCCESSFUL\n         $CALL SHOWCDS            CONSTRUCT ERROR MESSAGE NTP10\n         $CALL PUTLOG,NTP06MSG    INFORM OPERATOR OF OPEN FAILURE\n         $CALL PUTLOG,NTP10MSG    WRITE OUT ACB FEEDBACK INFO\n         CLI   ACBERFLG,ACBOAPNM  APPLID NOT YET ACTIVATED?\n         BE    RETRYMSG           YES => WRITE RETRY MSG\n         CLI   ACBERFLG,ACBOVINA  VTAM NOT YET ACTIVE?\n         BNE   MAINRET            NO  => TERMINATE NETOP\nRETRYMSG $CALL PUTLOG,NTP09MSG     WRITE RETRYING MSG,\n         STIMER WAIT,BINTVL=OPNDLAY WAIT 15 SECS\n         BCT   R3,OPENT              THEN RETRY FOR 2 MINUTES\n         WTOR  MF=(E,NTP05MSG)    WRITE RETRY PROMPT\n         WAIT  1,ECB=ECBMAIN      WAIT FOR REPLY\n         OI    TBUF,C' '          FOLD\n         CLI   TBUF,C'U'          CONTINUE?\n         BNE   MAINRET            NO\n         LA    R3,1               YES - SET LOOP COUNT\n         ST    R3,OPNDLAY          AND NULLIFY STIMER DELAY\n         B     OPENT              GO RETRY OPEN\n         SPACE 3\n*\n***********************************************************************\n* ISSUE RECEIVE MACRO TO START INPUT FROM TERMINALS. SPECIFY INBOUND  *\n* AS THE EXIT TO BE SCHEDULED ON COMPLETION.                          *\n***********************************************************************\n*\nRCVI     RECEIVE RPL=RCVRPL       GET 1ST INPUT MESSAGE\n         LTR   RTNCD,RTNCD        OK?\n         BZ    OPENSPO            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVI                THEN RETRY\n         $AB   23                 ELSE ABEND - CANT GO ON IF CANT RCV..\n*\n***********************************************************************\n*        OPEN THE SPO ACB                                             *\n***********************************************************************\n*\nOPENSPO  L     ACB@,@ACBSPO       PICK UP SPO ACB PTR\n         OPEN  ((ACB@))           OPEN THE SPO ACB\n         LTR   WKA,RTNCD          CHECK RETURN CODE\n         BZ    RCVCMDI            BRANCH IF SUCCESSFUL\n*\n* OPEN FAILED - INFORM OPERATOR AND ABEND.\n*\n         MVC   NTP06TYP(3),=C'SPO'\nOPENFAIL $CALL SHOWCDS            CONSTRUCT ERROR MESSAGE NTP10\n         $CALL PUTLOG,NTP06MSG    INFORM OPERATOR OF OPEN FAILURE\n         $CALL PUTLOG,NTP10MSG    WRITE OUT ACB FEEDBACK INFO\n         SR    RTNCD,RTNCD\n         IC    RTNCD,ACBERFLG     SET ACB ERROR IN REASON CODE\n         $AB   1                  TERMINATE NETOP\n*\n***********************************************************************\n*   START INPUT FROM VTAM. ISSUE RCVCMD SPECIFYING THE EXIT ROUTINE   *\n* OUTBOUND FOR ALL ACBSPO SENDCMDS.                                   *\n***********************************************************************\n*\nRCVCMDI  RCVCMD RPL=SENDRPL       GET 1ST OUTGOING MESSAGE\n         LTR   RTNCD,RTNCD        OK?\n         BZ    CMANDO             YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVCMDI             THEN RETRY\n*\n***********************************************************************\n*        ISSUE ANY STARTUP COMMANDS, IF REQUIRED / CHECK TSO TEST JOB *\n***********************************************************************\n*\nCMANDO   TM    POFLAGS,POFOSCMD PRFX=# IN START CMD?\n         BZ    TESTCHK        NO\n         NI    POFLAGS,255-POFOSCMD YES - RESET FLAG AND\n         LINK  EP=CMANDO,PARAM=NULL  ISSUE ANY STARTUP CMDS\n*\nTESTCHK  L     WKA,X'21C'     LOAD TCB PTR\n         TM    20(WKA),X'04'  RUNNING UNDER TSO TEST?\n         BZ    STARTLGN       NO\n         OI    POSTATUS,POSTEST YES - FLAG TO AVOID 047 ABENDS\n*\n***********************************************************************\n* START LOGONS SO THAT PO CAN OBTAIN TERMINALS, IN PARTICULAR, THE    *\n* MASTER TERMINAL IT NEEDS TO BECOME A PPO. WAIT FOR THE MASTER       *\n* TERMINAL TO BE LOGGED ON. WHEN IT IS, TELL OPERATOR WHAT TERMINAL   *\n* IT IS.  IF PARM FLD PRESENT ASSUME IT IS MASTER TERMINAL NAME AND   *\n* ISSUE A SIMLOGON TO DRIVE THE LOGON EXIT FOR THAT TERMINAL.         *\n***********************************************************************\n*\nSTARTLGN LA    RPL@,PRIMARPL\n         SETLOGON OPTCD=START,    START LOGONS                         *\n               ACB=ACBTERMS,                                           *\n               RPL=(RPL@)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    SETLGNOK           YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    STARTLGN            THEN RETRY\n         $AB   10                  ELSE ABEND\n*\n*              TELL OPERATOR WE ARE WAITING FOR A MASTER TERMINAL.\n*\nSETLGNOK $CALL PUTLOG,NTP00MSG\n         USING ISTDNIB,NIB@       NIB DSECT ADDRESSING\n         CLI   NIBSYM,C' '        VALID TERMINAL NAME?\n*CCSI*   BNH   NOPARM        NO; EITHER BLANK OR ZERO            85245\n         BNH   WAITMAIN      NO; EITHER BLANK OR ZERO (NO WTO)   86356\n*\n*              AQUIRE MASTER SPECIFIED IN PARM VIA A LOGON EXIT.\n*\nSIMLOG   SIMLOGON RPL=(RPL@),     SIMULATE MASTER LOGON                *\n               NIB=(NIB@),                                             *\n               OPTCD=(SYN,CONALL,Q,RELRQ)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    WAITMAIN           YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    SIMLOG              THEN RETRY\n*             ELSE TELL OPERATOR PARM DRIVEN MASTER LOGON UNSUCCESSFUL\nNOPARM   MVC   NTP11NOD,NIBSYM    MOVE NAME INTO MESSAGE\n         $CALL PUTLOG,NTP11MSG\n*             WAIT FOR MASTER TERMINAL TO BE LOGGED ON\nWAITMAIN XC    ECBMAIN,ECBMAIN  CLEAR ECB\n         XC    TIMEECB,TIMEECB  CLEAR STIMER ECB                 86356\n         STIMER REAL,TIMEEXIT,BINTVL==A(29*60*100)  WAIT 29 MINUTES\n         WAIT  ECBLIST=LISTECBS  WAIT FOR TIMER OR TERMINATION   86356\n         TM    TIMEECB,X'40' TIMER EXPIRED ?                     86356\n         BNZ   WAITED        YES; S522 AVERTED                   86356\n         TTIMER CANCEL       ELSE CANCEL                         86356\nWAITED   TM    ECBMAIN,X'40' TERMINATION OR SOME SUCH ?          86356\n         BZ    WAITMAIN      NO; JUST TIMER                      86356\n         CLI   ECBMAIN+3,0    CLOSE DOWN?\n         BE    CLOSNTP\n         CLI   ECBMAIN+3,1    OPEN PPO ACB?\n         BE    OPENPPO\n         CLI   ECBMAIN+3,2    CLOSE PPO ACB?\n         BE    CLOSPPO\n         $AB   0              IF YOU DROP TO HERE YOU HAVE PROBLEMS...\n         DROP  NIB@\n         SPACE 1                                                 86356\n*        STIMER EXIT TO PREVENT SYSTEM 522 (30 MINUTE WAIT) ABENDS\n         PUSH  USING                                             86356\n         DROP  ,                                                 86356\n         USING TIMEEXIT,R15                                      86356\nTIMEEXIT POST  TIMEECB,0     POST TIMER ECB                      86356\n         BR    R14           RETURN                              86356\n         POP   USING                                             86356\nLISTECBS DC    A(ECBMAIN),X'80',AL3(TIMEECB)  ECB WAIT LIST      86356\nTIMEECB  DC    F'0'          STIMER ECB                          86356\n*\n***********************************************************************\n*                                                                     *\n* OPEN ACB FOR COMMUNICATION WITH VTAM NETWORK OPERATOR FACILITIES    *\n*                                                                     *\n***********************************************************************\n*\nOPENPPO  L     ACB@,@ACBPPO       SET BASE FOR ACB\n         SR    RTNCD,RTNCD        CLEAR RETURN CODE REGISTER\n         OPEN  ((ACB@))\n         LTR   WKA,RTNCD          CHECK RETURN CODE, AND SAVE IT\n         BZ    OPENPPOK           BRANCH IF SUCCESSFUL\n*\n* OPEN NOT SUCCESSFUL - CHECK FOR CONDITIONS\n*\n         CLI   ACBERFLG,ACBONVRT  STORAGE SHORTAGE?\n         BE    OPENPPO            YES - RETRY\n         CLI   ACBERFLG,ACBRNOOF  PPO OPENED ALREADY?\n         BE    SPONLY             YES\n         CLI   ACBERFLG,ACBOAPAA  THIS APPLID OPENED ALREADY?\n         BNE   OPENPPFL           NO\nSPONLY  WTO    MF=(E,NTP03MSG)    YES - ONLY SPO SERVICES AVAILABLE\n         B     WAITMAIN           WAIT FOR NEXT POST\n*\n* OPEN FAILED - INFORM OPERATOR AND TERMINATE ABNORMALLY.\n*\nOPENPPFL MVC   NTP06TYP(3),=C'PPO'\n         B     OPENFAIL           WRITE ACB FEEDBACK INFO AND ABEND\n*\n*              TELL OPERATOR NAME OF MASTER TERMINAL\n*\nOPENPPOK $CALL PUTLOG,NTP01MSG    OUTPUT NAME OF MASTER\n*\n***********************************************************************\n*   ISSUE RCVCMD SPECIFYING THE EXIT ROUTINE OUTBOUND FOR ALL PPO MSGS*\n***********************************************************************\n*\n         LA    RPL@,PRIMARPL     RPL PTR\n         MVI   RPLACTIV,0        RESET IN CASE NOT 1ST TIME THRU HERE\n*                                VTAM DOESNT CLEAR OUTSTANDING RPL WHEN\n*                                ACBPPO IS CLOSED!!\n         TM    POSTATUS,POSCLSDN  GOING OFF THE AIR ?            87194\n         BNZ   WAITMAIN      YES; DON'T LOOP IN ERROR EXIT       87194\nRCVCMDP  RCVCMD RPL=(RPL@),                                            *\n               ACB=(ACB@),                                             *\n               AREA=PRIMADA,                                           *\n               AREALEN=DALEN,                                          *\n               EXIT=OUTBOUND,                                          *\n               OPTCD=ASY\n         LTR   RTNCD,RTNCD        OK?\n         BZ    WAITMAIN           YES - WAIT FOR NEXT POST\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVCMDP             THEN RETRY\n         B     WAITMAIN           WAIT FOR NEXT POST\n*\n* INDICATE PO IS CLOSING DOWN\n*\nCLOSNTP  OI    POSTATUS,POSCLSDN  SET CLOSEDOWN FLAG\nCLSIDLKP $CALL IDFIND,1       BUILD LIST ALL ACTIVE TICBS\n         LTR   RTNCD,RTNCD    FIND ANY?\n         BNZ   CLOSPPO        NO - FORGET CLOSEDOWN MSG TO TERMINALS\n         LA    DA@,CLOSM      SET UP PHONEY ISTDPOHD BASE\n         LA    MSGLEN,CLOSML  SET LENGTH\n         LA    RPL@,DISCRPL   SET RPL PTR\n         $CALL SND3270        SEND CLOSEDOWN MSG TO ALL TERMINALS\n*\n***********************************************************************\n*                                                                     *\n*       CLOSE SECONDARY PO ACB                                        *\n* CLOSE PRIMARY PO ACB                                                *\n*                                                                     *\n***********************************************************************\n*\nCLOSPPO  L     ACB@,@ACBPPO       SET UP BASE FOR ACB\n         TM    ACBOFLGS,ACBOPEN   IS IT OPEN?\n         BZ    CLOSPPND           IF NOT FORGET CLOSE\n         CLOSE ((ACB@))\n         LTR   WKA,RTNCD          CHECK RETURN CODE\n         BZ    CLOSPPOK           BRANCH IF SUCCESSFUL\n*\n* CLOSE NOT SUCCESSFUL - CHECK FOR RETRIABLE ERROR.\n*\n         TM    POFLAGS,POFCFAIL   FIRST TIME?\n         BO    CLOSPPFL           NO\n         OI    POFLAGS,POFCFAIL   YES - INDICATE FIRST CLOSE FAILURE\n         CLI   ACBERFLG,ACBRNOCF  MESSAGES LEFT?\n         BE    CLOSPPO            YES - RETRY\n         CLI   ACBERFLG,ACBTVTCL  CLOSE DURING ABTERM?\n         BE    CLOSPPOK           YES - IGNORE\n*\n* CLOSE FAILED - INFORM OPERATOR AND ABEND\n*\nCLOSPPFL MVC   NTP07TYP(3),=C'PPO'\nCLOSFAIL $CALL SHOWCDS            CONSTRUCT ERROR MESSAGE NTP10\n         $CALL PUTLOG,NTP07MSG    INFORM OPERATOR OF CLOSE FAILURE\n         $CALL PUTLOG,NTP10MSG    WRITE OUT ACB FEEDBACK INFO\n         SR    RTNCD,RTNCD\n         IC    RTNCD,ACBERFLG     SET ACB ERROR IN REASON CODE\n         $AB   2                  TERMINATE NETOP\n         SPACE 3\nCLOSPPOK NI    POFLAGS,255-POFCFAIL RESET FIRST CLOSE FAILURE FLAG\n*\n* TELL OPERATOR THAT FULL CONTROL OF VTAM IS AT THE SYSTEM CONSOLE.\n*\n         $CALL PUTLOG,NTP02MSG    SEND PPO INACTIVE MESSAGE\nCLOSPPND CLI   ECBMAIN+3,0    CLOSE DOWN?\n         BNE   WAITMAIN       NO - GO WAIT FOR NEXT POST\n*\n***********************************************************************\n*                                                                     *\n*       CLOSE SECONDARY PO ACB                                        *\n*                                                                     *\n***********************************************************************\n*\nCLOSSPO  L     ACB@,@ACBSPO       SET UP BASE FOR ACB\n         SR    RTNCD,RTNCD        CLEAR RETURN CODE REGISTER\n         TM    ACBOFLGS,ACBOPEN   IS IT OPEN?                    86355\n         BZ    CLOSSPFL           IF NOT, FORGET CLOSE           86355\n         CLOSE ((ACB@))\n         LTR   WKA,RTNCD          CHECK RETURN CODE\n         BZ    CLOSSPOK           BRANCH IF SUCCESSFUL\n*\n* CLOSE NOT SUCCESSFUL - CHECK FOR RETRIABLE ERROR.\n*\n         TM    POFLAGS,POFCFAIL   IF THIS IS FIRST TIME\n         BO    CLOSSPFL           THEN\n         OI    POFLAGS,POFCFAIL   INDICATE FIRST CLOSE FAILURE\n         CLI   ACBERFLG,ACBRNOCF  MESSAGES LEFT?\n         BE    CLOSSPO            YES - RETRY\n         CLI   ACBERFLG,ACBTVTCL  CLOSE DURING ABTERM?\n         BE    CLOSSPOK           YES - IGNORE\n*\n* CLOSE FAILED - INFORM OPERATOR AND ABEND\n*\nCLOSSPFL MVC   NTP07TYP(3),=C'SPO'\n*        B     CLOSFAIL           WRITE ACB FEEDBACK INFO AND ABEND\n*\n***********************************************************************\n*                                                                     *\n* CLOSE ACB FOR TERMINALS TO SEVER THE CONNECTION WITH VTAM.          *\n*                                                                     *\n***********************************************************************\n*\nCLOSSPOK DS    0H\n         LA    ACB@,ACBTERMS      SET ACB ADDRESS\n         SR    RTNCD,RTNCD        CLEAR RETURN CODE REGISTER\n         CLOSE ((ACB@))           CLOSE ACB FOR TERMINALS\n         LTR   WKA,RTNCD          CHECK RETURN CODE\n         BZ    MAINRET            BRANCH IF SUCCESSFUL\n         CLI   ACBERFLG,ACBTVTCL  CLOSE DURING ABTERM?\n         BE    MAINRET            YES - IGNORE\n* CLOSE FAILED - INFORM OPERATOR AND TERMINATE PO.\n         MVC   NTP07TYP,=C'TERMINALS'\n         B     CLOSFAIL           WRITE ACB FEEDBACK INFO AND ABEND\n*\n***********************************************************************\n* EXIT CODE                                                           *\n***********************************************************************\n*\nMAINRET  L     SA@,BWDPTR         GET @ SYSTEM SAVE AREA\n         RETURN (14,12)           RETURN TO CALLER\n*\n         USING ISTDNIB,NIB@       NIB DSECT ADDRESSING\nMVPARM   OC    NIBSYM(*-*),2(PARM@) FOLD TERM NAME FROM PARM INTO NIB\n         DROP  NIB@\n*\n*        ESTAE EXIT\n*\nABEXIT   $XINIT SA=ENDSA      SAVE, THEN CHAIN NEW SAVE AREA\n         LR    DA@,PARM@      SAVE SDWA PTR\n         USING SDWA,DA@       TELL ASMBLR\n         OI    POSTATUS,POSABEND FLAG ESTAE ENTERED\n         SR    R3,R3          DEFAULT NO RETRY\n         L     WKA,SDWACMPF   PICK UP CMP CODE\n         LA    WKA,0(,WKA)    CLEAR HI-ORDER BYTE\n         SRDL  WKA,12         SPLIT SYS FROM USER\n         SRL   WKB,20\n         LTR   WKA,WKA        SYS CMP CODE?\n         BNZ   SYSCMP         YES\n         LR    WKA,WKB        NO - MUST BE USER CMP\n         MVI   TBUF,C'U'      CMP ID\n         B     LOGABM         NO\nSYSCMP   MVI   TBUF,C'S'      CMP ID\n         CH    WKA,=AL2(X'D37') VTAMLOGO DATASET FULL?\n         BNE   ISZCAN         NO\n         NI    SDWACMPF,255-SDWAREQ  YES - SET NO DUMP\n         CLOSE (VTAMLOGO)      CLOSE, THEN RE-INITIALIZE -\n         OPEN  (VTAMLOGI,OUTPUT) RE-OPEN VTAMLOG DISP=OLD\n         CLOSE (VTAMLOGI)      CLOSE TO WRITE EOF\n         B     LOGABM         ALLOW ABEND TO CONTINUE\nISZCAN   CH    WKA,=AL2(X'0A7') Z NET,CANCEL?\n         BNE   ISCANCEL       NO\n         NI    SDWACMPF,255-SDWAREQ  SET NO DUMP\n         B     LOGABM         ALLOW ABEND TO CONTINUE\nISCANCEL CH    WKA,=AL2(X'222') OPER CANCEL?\n         BNE   LOGABM         NO\n         TM    SDWACMPF,SDWAREQ  DUMP REQUESTED?\n         BO    LOGABM          YES - PROBABLY LEGIT\n         WTO   MF=(E,NTP12MSG) NO - SEND REPROOF TO OPERATOR\nLOGABM   $CALL CVHX           CONVERT BYTE 2\n         MVC   ABMSGAC+2,HEX     AND MOVE IN\n         SRL   WKA,8          SHIFT BYTE 1 OVER\n         $CALL CVHX           CONVERT BYTE 1\n         MVC   HEX(1),TBUF       SET CMP ID\n         MVC   ABMSGAC,HEX       AND MOVE IN\n         L     WKA,SDWAGR15   PICK UP REASON CODE (R15)\n         $CALL CVHX           CONVERT,\n         MVC   ABMSGRC,HEX     AND MOVE IN\n         LA    TICB@,NETPTICB      SET ORIGIN AS NETOP\n         TM    SYSPRINT+48,X'10' SYSPRINT OPEN?\n         BZ    ABRET             NO\n         PUT   SYSPRINT,ABMSG     OUTPUT TO SYSPRINT (DONT USE PUTLOG)\n         CLOSE (SYSPRINT)         CLOSE TO SPINOFF\nABRET    MVI   SDWARCDE,0         SET RETURN CODE\n         L     SA@,BWDPTR         RELOAD CALLERS SA\n*\n         RETURN (14,12)           ALLOW ABEND TO CONTINUE\n*\n*\n*              SYNAD RTN FOR LOG DATASET\n*\nLOGSYNAD $SINIT\n         SYNADAF ACSMETH=QSAM\n         MVC   44(4,PARM@),=X'00548000'    WTO PREFIX AND\n         MVC   128(4,PARM@),=X'00004000'   SUFFIX FOR ROUTCDE=2\n         LA    PARM@,44(,PARM@)            JUMP OVER GARBAGE AND BLANKS\n        WTO    MF=(E,(1))     WTO/TPUT\n         SYNADRLS\n         NOP   LOGSYNAB       ABEND AFTER 2ND SYNAD ENTRY\n         MVI   *-3,X'F0'       BY CHANGING NOP TO B\n         $SRET                RETURN TO NSI 1ST TIME ONLY\nLOGSYNAB $AB   68\n         TITLE 'N E T O P - INBOUND EXIT'\n         SPACE\n         USING ISTDPOHD,DA@       ISTDPOHD DSECT ADDRESSING\n         SPACE\n***********************************************************************\n*                                                                     *\n* NAME: INBOUND EXIT                                                  *\n*                                                                     *\n* FUNCTION: MOVE OPERATOR COMMANDS FROM THE REMOTE TERMINALS TO VTAM. *\n*        IT IS THE RPL EXIT SPECIFIED IN THE RECEIVE MACRO ISSUED     *\n*        BY THE MAINLINE, AND REISSUED HERE.                          *\n*                                                                     *\n* DESCRIPTION: CHECKS RCVRPL. DETERMINES HOW RECEIVE COMPLETED.       *\n*        EXTRACTS INFORMATION ABOUT INCOMING MESSAGE FROM RPL. CALLS  *\n*        RCV3270 TO PROCESS INPUT DATA. IF THE MESSAGE IS A COMMAND   *\n*        FOR VTAM, ISSUES SENDCMD. REISSUES RECEIVE MACRO TO GET THE  *\n*        NEXT MESSAGE.                                                *\n*                                                                     *\n* ENTRY POINT: INBOUND                                                *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ RCVRPL                                               *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   @ INBOUND EXIT                                         *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              @ RCVRPL                             RPL@              *\n*              @ TICB FOR THE TERMINAL BEING READ.  TICB@             *\n*              @ DATA AREA WITH THE INPUT DATA      DA@               *\n*              LENGTH OF MESSAGE                    MSGLEN            *\n*              WORK REGISTERS                       WKA,WKB           *\n*              SUBROUTINE RETURN ADDRESS            RET@              *\n*              BASES                           BASE1@,DBASE1@,DBASE2@ *\n*              VTAM CALLS                           SUBR@,RTNCD,RET@  *\n*                                                                     *\n* EXIT, NORMAL: BR 14                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS:RCV3270 TO PROCESS INPUT FROM 3277/3278.                      *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*        VTAM RPL EXIT                                                *\n*                                                                     *\n***********************************************************************\n*\nINBOUND  $XINIT\n         LR    RPL@,PARM@         PUT RPL ADDRESS IN RPL REGISTER\n*\n* ISSUE CHECK TO DETERMINE HOW RECEIVE COMPLETED\n*\n* ACTION CODES EXPECTED - 0 SUCCESSFUL COMPLETION\n*                         8       RETRY\n*                         12      TERMINAL NOT AVAILABLE\n*\n         CHECK RPL=(RPL@)\n         LTR   RTNCD,RTNCD        CHECK COMPLETION\n         BNZ   INRERCV            IF NOT SUCCESSFUL, REISSUE RCV\n*\n* RECEIVE COMPLETED SUCCESSFULLY. OBTAIN THE INFORMATION NECESSARY\n* TO CONTINUE PROCESSING FROM THE RPL.\n*\n         L     TICB@,RPLUSFLD     GET @ TICB FROM USER FIELD\n         OI    RPLRH3,RPLBB+RPLEB  SET BEGIN AND END BRACKET     87109\n         TM    RPLCNTDC,RPLSIGNL  ATTENTION REQUESTED ?          87109\n         BNZ   *+12          YES; BRACKET NOT STARTED            87109\n         OI    TIFLAGS3,TIF3READ  SET BRACKET STARTED            87107\n         NI    RPLRH3,255-RPLBB  NO BEGIN BRACKET NEEDED         87107\n         L     DA@,RPLAREA        GET @ MSG TEXT FIELD\n         SH    DA@,KPOHLEN        BACK UP FOR ISTDPOHD PREFIX FIELD\n         L     MSGLEN,RPLRLEN     DETERMINE LENGTH OF MESSAGE:\n         L     WKA,RPLBUFL        COMPARE LENGTH OF INPUT,\n         CR    MSGLEN,WKA         AND LENGTH OF DATA AREA.\n         BNH   INLENOK\n         LR    MSGLEN,WKA         USE THE SMALLER OF THE TWO\n*\n* CALL DEVICE DEPENDENT ROUTINE TO PROCESS INPUT.\n*\nINLENOK  $CALL RCV3270            CALL 3270 ROUTINE\n         LR    WKC,RTNCD          SAVE RTNCD\n         B     *+4(RTNCD)         GO TO BRANCH TABLE\n         B     CMDOK              RTNCD=0   GOOD CMD\n         B     ABNORSND           RTNCD=4   GOOD CMD - WKA,WKB PRESET\n*                                  AS MSG PTR AND MSG LENGTH FOR SEND\n         B     ABNORSND           RTNCD=8   ABNORMAL - WKA,WKB PRESET\n*                                  AS MSG PTR AND MSG LENGTH FOR SEND\n         B     INRERCV            RTNCD=12  CLSDST ISSUED AFTER PF3 OR\n*                                  SUPPRESS FURTHER I/O\n         B     INBRET             RTNCD=16  CLOSDOWN POSTED\n*\nABNORSND SEND  RPL=(RPL@),                                             *\n               ACB=ACBTERMS,                                           *\n               AREA=(WKA),                                             *\n               RECLEN=(WKB),                                           *\n               OPTCD=SYN,POST=SCHED,RESPOND=(EX,FME,NRRN)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    ABNOROK            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    ABNORSND            THEN RETRY\nABNOROK  LA    WKA,RCVCMDRS       GOOD CMD?\n         NI    TIFLAGS3,255-TIF3READ  OUT OF BRACKET             87107\n         CR    WKC,WKA\n         BNE   INRERCV            NO - GO RE-ISSUE RCV FOR NEXT CMD\n*\n* PREPARE PO HEADER.\n*\nCMDOK    MVI   POHRSVD,0          ZERO HI BYTE\n         MVI   POHSTAT,POHRREQ+POHGEN     INDICATE REPLY REQUESTED,\n*                                 AND ID GENERATED BY PO.\n         SR    WKA,WKA            CLEAR A WORK REGISTER\n         IC    WKA,TIMSGSEQ       OBTAIN MESSAGE SEQUENCE NUMBER\n         LA    WKA,1(,WKA)        INCREMENT BY ONE\n         STC   WKA,TIMSGSEQ       UPDATE TICB\n         MVC   POHID,TIMSGID      COPY ENTIRE ID FIELD TO PO HDR\n*\n* ISSUE SENDCMD(S) TO TRANSFER COMMAND(S) TO VTAM.\n*\n         AH    MSGLEN,KPOHLEN     ADD LENGTH OF PO HEADER TO\n         LA    WKA,DALEN          ENSURE\n         CR    MSGLEN,WKA          VALID\n         BNH   RANGCHK              LENGTH\n         LR    MSGLEN,WKA            FOR SENDCMD\n*\nRANGCHK  TM    POFLAGS,POFRANG    RANGE FORMAT CMD?\n         BZ    SENDCACB           NO\n*        AT THIS TIME RANGCHAR CONTAINS THE ADDR OF THE CHAR, HENCE\n*        THE CALL TO ATOX SPECIFYING A LOAD INSTEAD OF A LOAD ADDRESS\n         $CALL ATOX,,,RANGCHAR    CONVERT RANG CHAR TO HEX IN R15\n         LTR   RTNCD,RTNCD        IS IT GOOD?\n         BNM   RANGCHOK           YES\n         LA    WKA,INVALK         NO - SET UP FOR\n         LA    WKB,INVALKL         INVALID MSG\n         B     ABNORSND            AND SEND IT\nRANGCHOK STH   R15,RANGHEX        STORE FOR INCREMENTING LATER\nSENDCACB TM    TISTATUS,TISREPLY  IS THIS REPLY COMMAND?\n         BZ    SENDCSPO           NO\n         NI    TISTATUS,255-TISREPLY  YES - RESET FLAG\n         L     ACB@,@ACBPPO       PICK UP PPO ACB PTR\n         B     SENDCMD            GO SENDCMD USING ORIGINATING ACB\nSENDCSPO L     ACB@,@ACBSPO       PICK UP SPO ACB PTR\nSENDCMD  SENDCMD RPL=(RPL@),  SEND COMMAND TO VTAM                     *\n               ACB=(ACB@),                                             *\n               AREA=(DA@),        TOP OF ISTDPOHD                      *\n               RECLEN=(MSGLEN),                                        *\n               OPTCD=SYN,POST=RESP\n         LTR   RTNCD,RTNCD        OK?\n         BZ    SENDCMOK          YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    SENDCMD            THEN RETRY\n*\nSENDCMOK TM    POFLAGS,POFDSP    DISPLAY CMD?\n         BZ    OUTRNGCK          NO\n         LH    WKA,TIDSPCT       YES - SENDCMD COMPLETE SO\n         AH    WKA,K1             INCREMENT OUTSTANDING\n         STH   WKA,TIDSPCT         DISPLAY COUNT\nOUTRNGCK TM    POFLAGS,POFRANG    RANGE FORMAT CMD?\n         BZ    INRERCV            NO\n         LH    R15,RANGHEX        YES - PICK UP RANGE CHAR IN HEX\n         CH    R15,RANGEND        END OF RANGE?\n         BNE   RANGOK             NO\n         NI    POFLAGS,255-POFRANG YES - RESET RANGE FORMAT\n         B     INRERCV             AND QUIT SENDCMD LOOP\nRANGOK   LA    R15,1(,R15)         AND INCREMENT,\n         N     R15,=A(15)          WRAPPING FROM X'0F' TO X'00'\n         STH   R15,RANGHEX        SAVE INCREMENTED CHAR FOR NEXT PASS\n         L     WKD,RANGCHAR       YES - PICK UP PTR TO RANGE CHAR\n         STC   R15,0(,WKD)         AND STORE IT IN COMMAND\n         TR    0(1,WKD),TRTAB     TRANSLATE TO ALPHA\n         B     SENDCMD\n*\n* ISSUE RECEIVE MACRO TO GET THE NEXT MESSAGE.\n*\nINRERCV  TM    POFLAGS,POFINTCM   INTERNALLY GENERATED CMD?\n         BZ    RCVGO              NO\n         NI    POFLAGS,255-POFINTCM  YES - RESET FLAG\n         B     INBRET                  AND RETURN\nRCVGO    LA    DA@,RCVDA\n         NI    POFLAGS,255-POFDSP  RESET PO DISPLAY FLAG\nRCVR     RECEIVE RPL=(RPL@),                                           *\n               ACB=ACBTERMS,                                           *\n               AREA=(DA@),                                             *\n               AREALEN=DATXLEN,                                        *\n               EXIT=INBOUND,                                           *\n               OPTCD=(ANY,ASY,TRUNC),                                  *\n               RTYPE=(DFSYN,DFASY)  RECEIVE INCL. ATTN           87109\n         LTR   RTNCD,RTNCD        OK?\n         BZ    INBRET             YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVR                THEN RETRY\n         $AB   23                 ELSE ABEND - CANT GO ON IF CANT RCV..\n*\nINBRET   $XRET                    RETURN\n         TITLE 'N E T O P - OUTBOUND EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: OUTBOUND EXIT                                                 *\n*                                                                     *\n* FUNCTION: MOVE MESSAGE FROM VTAM TO THE APPROPRIATE                 *\n*        TERMINALS. IT IS THE RPL EXIT SPECIFIED FOR THE RCVCMD       *\n*        MACROS.                                                      *\n*                                                                     *\n* DESCRIPTION: CHECKS RPL. DETERMINES HOW RCVCMD COMPLETED.           *\n*        EXTRACTS INFORMATION ABOUT THE MESSAGE FROM THE RPL. CALLS   *\n*        IDFIND TO DETERMINE FROM THE PO HEADER, WHAT TERMINAL        *\n*        THE MESSAGE IS FOR. IF THE TERMINAL IS AVAILABLE, CALLS      *\n*        SND3270 TO PROCESS MESSAGE. ISSUES SEND TO TRANSMIT THE      *\n*        MESSAGE. REISSUES RCVCMD TO OBTAIN THE NEXT MESSAGE FROM     *\n*        VTAM.                                                        *\n*                                                                     *\n* ENTRY POINT: OUTBOUND                                               *\n*                                                                     *\n* REGISTER AT ENTRY:                                                  *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ SENDRPL                                              *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   @ OUTBOUND EXIT                                        *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              @ SENDRPL          RPL@                                *\n*              @ TICB             TICB@                               *\n*              @ ISTDPOHD         DA@                                 *\n*              LENGTH OF MESSAGE  MSGLEN                              *\n*              WORK REGISTERS     WKA,WKB                             *\n*              SUBROUTINE RETURN  RET@                                *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: IDFIND                                                       *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*        VTAM RPL EXIT                                                *\n*                                                                     *\n***********************************************************************\n*\nOUTBOUND $XINIT\n         LR    RPL@,PARM@         SET UP POINTER TO RPL\n         MVC   @SAVACB,RPLDACB    SAVE ACB @ FOR RE-ISSUE OF RCVCMD\n*\n* ISSUE CHECK TO DETERMINE HOW RCVCMD COMPLETED.\n*\n* ACTION CODES EXPECTED - 0 SUCCESSFUL COMPLETION\n*                         >0 REISSUE RCVCMD\n*\n         CHECK RPL=(RPL@)         IF RTNCD = SUCCESS\n         LTR   RTNCD,RTNCD        CHECK COMPLETION\n         BNZ   RCVCMDO            THEN\n*\n* RCVCMD COMPLETED SUCCESSFULLY. OBTAIN THE INFORMATION NECESSARY\n* TO CONTINUE PROCESSING FROM THE RPL.\n*\n         L     DA@,RPLAREA        GET @ ISTDPOHD\n         L     MSGLEN,RPLRLEN     DETERMINE LENGTH OF MESSAGE:\n         L     WKA,RPLBUFL        COMPARE LENGTH OF INPUT,\n         CR    MSGLEN,WKA         AND LENGTH OF DATA AREA.\n         BNH   OUTLENOK           USE THE SMALLER OF THE TWO.\n         LR    MSGLEN,WKA\nOUTLENOK SH    MSGLEN,KPOHLEN     SUBTRACT LENGTH OF PO HEADER\n*\n* CALL IDFIND TO IDENTIFY THE DESTINATION TERMINAL FROM PO HEADER.\n*\nOUTID    $CALL IDFIND,0\n         LTR   RTNCD,RTNCD        IF RETURN CODE = 0\n         BNZ   RCVCMDO            THEN...\n*\n* SEE IF THERE ARE DATA TO SEND TO TERMINALS.\n*\n         TM    POHSTAT,POHDATA+POHLBL+POHCNTRL      DATA?\n         BNZ   RCVDATA            YES\n         TM    POHSTAT,POHEND     END?\n         BZ    RCVDATA            NO\n         LH    WKA,TIDSPCT        YES - DISPLAY IS COMPLETE\n         SH    WKA,K1             DECREMENT OUTSTANDING DISPLAY COUNT\n         BM    RCVRSTDC      IF -VE SOMETHING WENT WRONG - DONT UPDATE\n         STH   WKA,TIDSPCT          ELSE STORE IT\n         BP    RCVCMDO            IF ZERO,\nRCVRSTDC NI    TIFLAGS,255-(TIFDSP+TIFDSP11+TIFCLUST) RESET DSP FLAGS\n         B     RCVCMDO            RETURN AFTER RCVCMD RE-ISSUED\n*\nRCVDATA  BCTR  MSGLEN,0           REDUCE FOR EX\n         MVC   SENDTIME,BLANX     BLANK OUT TIME FIELD\n*\n* CALL RCVVTAM TO SCAN FOR MESSAGES REQUIRING NETOP ACTION\n*\n         $CALL RCVVTAM\n         LTR   RTNCD,RTNCD        OUTPUT ACCEPABLE?\n         BNZ   RCVCMDO            NO - SUPPRESS IT\n         TM    POHSTAT,POHGEN     SOLICITED REPLY?\n         BZ    LOGIT              NO - GO LOG IT\n*\n         CLI   POHTID,0           RESP TO NETOP INTCMD?\n         BE    LOGIT              YES - LOG IT\n         TM    TIFLAGS,TIFDSP     REPLY TO DISPLAY CMD?\n         BZ    LOGIT              NO - LOG IT\n         TM    TIFLAGS,TIFDSP11   PF11 OVER-RIDE?\n         BO    LOGIT              YES - LOG IT\n         TM    TIFLAGS2,TIF2LOGD  PF2/LOGD OVER-RIDE?\n         BZ    CALSEND            NO - DONT LOG IT\n*\n* PREPARE AND WRITE HARD COPY LOG RECORD.\n*\nLOGIT    $CALL PUTLOG,DATX,(MSGLEN) OUTPUT REC\n*\n* CALL SND3270 TO SEND MSG TO TERMINAL(S).\n*\nCALSEND  $CALL SND3270            CALL SND3270\n*\n*\n* ISSUE RCVCMD TO GET THE NEXT MESSAGE FROM VTAM.\n*\nRCVCMDO  L     ACB@,@SAVACB       PICK UP ACB PTR\n         TM    POSTATUS,POSCLSDN  GOING OFF THE AIR ?            87194\n         BNZ   OUTRET        YES; DON'T LOOP IN ERROR EXIT       87194\nRCVCMDOR RCVCMD RPL=(RPL@),       GET NEXT OUTGOING MESSAGE            *\n               ACB=(ACB@),                                             *\n               AREA=(DA@),                                             *\n               AREALEN=DALEN,                                          *\n               EXIT=OUTBOUND,                                          *\n               OPTCD=ASY\n         LTR   RTNCD,RTNCD        OK?\n         BZ    OUTICHK            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RCVCMDOR            THEN RETRY\n*\n* RETURN.\n*\nOUTICHK  TM    POFLAGS,POFINTCM   DID RCVVTAM GENERATE A CMD?\n         BZ    OUTRET             NO\n         LA    DA@,RCVDA          YES - USE OTHER DATA AREA\n         LH    MSGLEN,INTBUFL     LOAD LENGTH\n         LR    WKA,MSGLEN         COPY IT\n         BCTR  WKA,0               LESS 1 FOR EX\n         EX    WKA,OUTINTMV       MOVE INTCMD INTO DATA AREA\n         LA    TICB@,NETPTICB     USE NETOP'S TICB\n         L     WKA,RPLARG         PICK UP CID\n         LA    RPL@,DISCRPL       USE SPARE RPL (RCVRPL RE-USED)\n         ST    WKA,RPLARG          WITH CURRENT CID\n         $XCTL INLENOK,INBOUND    XCTL TO INBOUND EXIT TO PROCESS CMD\nOUTRET   $XRET                    RETURN\n*\nOUTINTMV MVC   DATX(*-*),INTBUF   MOVE INTCMD INTO ISTDPOHD\n         TITLE 'N E T O P - LOGON EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: LOGON EXIT                                                    *\n*                                                                     *\n* FUNCTION: TO ESTABLISH CONNECTIONS WITH TERMINALS, INCLUDING THE    *\n*        MASTER TERMINAL.                                             *\n*                                                                     *\n* DESCRIPTION: DETERMINES IF THE PO IS IN A POSITION TO ACCEPT LOGONS *\n*        IF NOT, REJECTS THE TERMINAL. OTHERWISE, ALLOCATES A TICB TO *\n*        THE TERMINAL, FILLS IN THE NIB, AND ACCEPTS THE TERMINAL. IF *\n*        THE NEWLY ACOUIRED TERMINAL IS IN THE MASTER CANDIDATE LIST, *\n*        IT IS MADE THE MASTER IF NONE EXISTED. WHEN NO MASTER IS     *\n*        LOGGED ON ONLY THE SPO ACB IS OPEN.  THE MAINLINE IS POSTED  *\n*        TO OPEN THE PPO ACB WHICH IS USED SOLELY TO RECEIVE UNSOL-   *\n*        ICITED MESSAGES. ALL OTHER VTAM-PO MSGS FLOW VIA ACBSPO.     *\n*              IF OPNDST FAILS IN ATTEMPTING TO ACCEPT THE TERMINAL,  *\n*        THE TICB OBTAINED FOR IT IS DEALLOCATED.                     *\n*                                                                     *\n* ENTRY POINT: LOGON                                                  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ PARAMETER LIST CONTAINING                            *\n*              (1) @ ACBTERMS                                         *\n*              (2) @ TERMINAL NAME                                    *\n*              (3) RESERVED                                           *\n*              (4) LENGTH OF LOGON MESSAGE                            *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   ADDRESS OF LOGON EXIT                                  *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     RPL@                                *\n*              POINTER TO TICB    RICB@                               *\n*              POINTER TO NIB     NIB@                                *\n*              WORK REGS          WKA,WKB                             *\n*              SUBROUTINE RETURN  RET@                                *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: INT3270 TO TRANSMIT 3270 ORDERS THAT SET UP INITIAL SCREEN   *\n*        AND START THE BRACKET.                                       *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              VTAM EXLST EXIT                                        *\n*                                                                     *\n***********************************************************************\n*\nLOGON    $XINIT\n         USING LOGONPRM,PARM@     LOGON PARM DSECT ADDRESSING\n         LA    NIB@,LOGONNIB      SET POINTER TO NIB\n         USING ISTDNIB,NIB@       NIB DSECT ADDRESSING\n         LA    ACB@,ACBTERMS      SET POINTER TO ACB\n         LA    RPL@,LOGONRPL      SET POINTER TO RPL\n         L     WKA,TNAME@         SET POINTER TO TERMINAL NAME\n         MVC   NIBSYM,0(WKA)      MOVE TERMINAL NAME INTO NIB\n         TM    POSTATUS,POSCLSDN  IF PO NOT CLOSING DOWN,\n         BZ    LGNTCHK             GO ALLOCATE TICB\n*\nLGNCLSDN CLSDST RPL=(RPL@),       REJECT THE TERMINAL                  *\n               ACB=(ACB@),                                             *\n               NIB=(NIB@)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    LGNRET             YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    LGNCLSDN            THEN RETRY\n         B     LGNRET             RETURN\n*\n* ALLOCATE A TICB TO THE NEW TERMINAL.\n*\nLGNTCHK  CLI   TICBFCT+1,0        ANY FREE TICB'S ?\n         BNE   LGNALOC            YES - GO ALLOCATE ONE\n         LA    TICB@,VTAMTICB     ADDRESS VTAMTICB\n         B     LGNOTICB           GO SET UP FOR REJECT\nLGNALOC  LA    WKA,TICBCT         FIND FREE TICB\n         LA    TICB@,TICBS+TICBLEN  START AT 1ST AFTER NETPTICB\nLGNLOOP  TM    TISTATUS,TISALLOC  IS IT FREE?\n         BZ    LGNFOUND           IF YES, GO ALLOCATE IT\n         LA    TICB@,TICBLEN(,TICB@)   OTHERWISE, NEXT TICB...\n         BCT   WKA,LGNLOOP        ANY MORE TICB'S TO EXAMINE?\nLGNOTICB LA    WKA,NOTICBM        NO - TICBFCT ERRONEOUS,\n         LA    WKB,NOTICBML        SET UP FOR NO MORE TICB MSG\n         OI    TISTATUS,TISNOMOR  FLAG REJECT REASON IN DUMMY TICB\n         ST    TICB@,NIBUSER      PUT @ TICB IN NIB USER FIELD\n         B     LGNACCEP           GO ACCEPT AND THEN REJECT TERMINAL\nLGNFOUND OI    TISTATUS,TISALLOC  ALLOCATE THE TICB\n         LH    WKA,TICBFCT        DECREMENT\n         BCTR  WKA,0                FREE\n         STH   WKA,TICBFCT            COUNT\n         ST    TICB@,NIBUSER      PUT @ TICB IN NIB USER FIELD\n         C     TICB@,TICBLACT     HIGHEST TICB @?\n         BNH   LGNACCEP           NO\n         ST    TICB@,TICBLACT     YES - SAVE HI-WATER MARK\n*\n* ISSUE OPNDST TO ACCEPT THE TERMINAL.\n*\nLGNACCEP OPNDST RPL=(RPL@),       ACCEPT THE TERMINAL                  *\n               ACB=(ACB@),                                             *\n               NIB=(NIB@),                                             *\n               OPTCD=NQ\n         LTR   RTNCD,RTNCD        IF RTNCD = UNSUCCESSFUL\n         BNZ   LGNRET              THEN FORGET IT\n         TM    TISTATUS,TISNOMOR  REJECT REASON FLAGGED?\n         BO    REJSEND            YES - GO REJECT\n*\n*        IF TERMINAL ACCEPTED, SET UP ITS TICB.\n*\n         MVC   TINAME,NIBSYM      PUT TERMINAL NAME INTO TICB\n         LA    WKA,TINAME+1        SEARCH FOR BLANK\n         LA    WKC,7\nLGNBLOOP CLI   0(WKA),C' '\n         BE    LGNBLANK\n         LA    WKA,1(,WKA)\n         BCT   WKC,LGNBLOOP\nLGNBLANK LA    WKB,8              SUBTRACT FROM\n         SR    WKB,WKC            8 TO GET NAME LEN\n         STH   WKB,TINAMLEN       AND STORE IT\n         MVC   TICID,NIBCID       PUT TERMINAL CID INTO TICB\n         SR    WKA,WKA            ASSIGN NEXT ID TO THIS TERMINAL\n         IC    WKA,POID           INCREMENT LAST ID ASSIGNED\n         LA    WKA,1(,WKA)\n         STC   WKA,POID\n         STC   WKA,TID            MOVE INTO TICB\n         ZAP   TISTKCT,KP0        ZERO STACK ELEMENT COUNT\n         MVI   TIMSGSEQ,0         ZERO MESSAGE NUMBER\n         MVI   TIFLAGS2,TIF2LOGD  SET 'D NET' LOGGING AS DEFAULT\n*\n* PERFORM DEVICE DEPENDENT INITIALIZATION, THEN MARK TERMINAL ACTIVE.\n*\n         OI    RPLRH3,RPLBB+RPLEB  SET FOR BRACKET CONTENTION    87107\n         $CALL INT3270,0          INITIALISE SCREEN\n         LTR   RTNCD,RTNCD        RETURN CODE OK?\n         BNZ   LGNCLS             NO - DUMP IT\n         OI    TISTATUS,TISACT    YES - MARK ACTIVE\n*\n* MARK TERMINAL A MASTER CANDIDATE IF IT IS LISTED IN MATABLE\n*\n         L     WKA,@MATABLE\n         SH    WKA,K2             DECR. BEFORE LOOP ENTRY\n         SR    WKB,WKB            INITIAL INCREMENT ZERO\nMALOOP   LA    WKA,2(WKB,WKA)     GET NEXT ENTRY\n         ICM   WKB,1,0(WKA)       GET ENTRY LENGTH\n         BZ    LGNLOG             END OF TABLE IF ZERO\n         BCTR  WKB,0              - 1 FOR EX\n         EX    WKB,MACLC          SAME TERMINAL NAME?\n         BNE   MALOOP             NO - GO TO NEXT ENTRY\n*\n         OI    TISTATUS,TISMCAND  YES - SET CANDIDATE BIT\n         LH    WKA,TICBMCCT       INCREMENT\n         AH    WKA,K1               MASTER CANDIDATE\n         STH   WKA,TICBMCCT           COUNT\n         TM    POSTATUS,POSHVMA   MASTER LOGGED ON YET?\n         BO    LGNLOG             YES\n         OI    TISTATUS,TISMA     NO - SET MASTER BIT\n         AIF   (NOT &MAROLL).NMAROLL\nMAROLL   OI    TIFLAGS2,TIF2ROLL  SET ROLL FLAG FOR INITIAL MASTER\n.NMAROLL ANOP\n         ST    TICB@,@MATICB      SAVE MASTER TICB @\n         OI    POSTATUS,POSHVMA   INDICATE MASTER HAS LOGGED ON\n         MVC   NTP1NODE,TINAME    MOVE NAME INTO MESSAGE.\n         POST  ECBMAIN,1          POST MAINLINE TO OPEN PPO ACB\nLGNLOG   $CALL PUTLOG,NOTICBLG,*-1  OUTPUT REC\n         B     LGNRET\n*\nREJSEND  SEND  RPL=(RPL@),        SEND REJECT MSG AND CLSDST           *\n               AREA=(WKA),                                             *\n               RECLEN=(WKB)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    WAITREJ            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    REJSEND             THEN RETRY\nWAITREJ  STIMER WAIT,BINTVL=CLSDLAY  ALLOW 1/2 SEC TO READ REJECT MSG\nLGNCLS   LA    WKA,L'OFFMSG-1     EX LENGTH FOR MOVE\n         LA    PARM@,OFFMSG       MSG PTR\n         TM    TISTATUS,TISNOMOR  NO MORE TICBS?\n         BZ    LGNCLPT            NO\n         LA    WKA,L'NOTICBRJ-1   EX LENGTH FOR MOVE\n         LA    PARM@,NOTICBRJ     MSG PTR\nLGNCLPT  $CALL PUTLOG,(PARM@),(WKA) OUTPUT REC\n         $CALL CLSDST         CLSDST TERMINAL AND FREE TICB\n*\nLGNRET   $XRET                    RETURN\n*\nMACLC    CLC   1(*-*,WKA),TINAME  COMPARE TERMINAL NAMES\n         DROP  NIB@,PARM@\n         TITLE 'N E T O P - LOSTERM EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: LOSTERM EXIT                                                  *\n*                                                                     *\n* FUNCTION: TO TAKE APPROPRIATE ACTION WHEN CONTACT HAS BEEN LOST     *\n*        WITH A TERMINAL.                                             *\n*                                                                     *\n* DESCRIPTION: THIS ROUTINE SHOULD EXAMINE THE RETURN CODE IN THE     *\n*        PARAMETER LIST BUT FOR THE MOMENT IT CHECKS FOR MASTER LOST, *\n*        REASSIGNS MASTER IF SO, AND ISSUES CLSDST UNLESS CLOSEDOWN   *\n*        IS IN PROGRESS.                                              *\n*                                                                     *\n* ENTRY POINT: LOSTERM                                                *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ PARAMETER LIST CONTAINING                            *\n*              (1) @ ACBTERMS                                         *\n*              (2) CID                                                *\n*              (3) NIB USERFLD                                        *\n*              (4) CODE INDICATING WHY ENTERED                        *\n*                       CODES ARE:                                    *\n*                         0 - DIAL-LINE DISCONNECTED ON DIAL-IN TERM  *\n*                         4 - DIAL-LINE DISCONNECTED ON DIAL-OUT TERM *\n*                         8 - RESERVED                                *\n*                        12 - MANY REASONS SEE MANUAL - SHUTDOWN      *\n*                        16 - SUCCESSFULLY RECONTACTED                *\n*                        20 - UNCONDITIONAL TERMINATE SELF            *\n*                        24 - POSSIBLE TO RECOVER                     *\n*                        28 - INCOMPLETE OR INVALID SEGEMENTED REQUEST*\n*                        32 - CONDITIONAL TERMINATE SELF              *\n*                        36 - BUFFER LIMIT EXECEEDED                  *\n*                        40 - TEST REQ KEY OR TOLTEP IS TAKING OVER   *\n*                                                                     *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   ADDRESS OF LOSTERM EXIT                                *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     RPL@                                *\n*              POINTER TO TICB    RICB@                               *\n*              WORK REGS          WKA,WKB                             *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* ATTRIBUTES: VTAM EXLST EXIT                                         *\n*                                                                     *\n***********************************************************************\n*\nLOSTERM  $XINIT\n         USING LOSTPARM,PARM@     LOSTERM PARM DSECT ADDRESSING\n         TM    POSTATUS,POSCLSDN  IF PO IS CLOSING DOWN, FORGET IT\n         BO    LOSTRET\n         LA    RPL@,DISCRPL       SET POINTER TO RPL\n         L     CID,LOSTCID        PICK UP CID\n         ST    CID,RPLARG         DROP IN RPL\n         L     TICB@,LOSTUSER     SET TICB PTR\n         L     ACB@,LOSTACB       PICK UP ACB PTR\n         L     WKA,LOSTCODE      PICK UP LOST REASON CODE\n         CVD   WKA,WORK          CONVERT DEC\n         OI    WORK+7,X'0F'    FIX SIGN UP\n         UNPK  LOSMSGRC(3),WORK+6(2)  UNPACK\n         MVI   LOSMSGRC,C' '   BLANK LEADING ZERO\n         $CALL PUTLOG,LOSMSG,LOSMSGL-1 OUTPUT REC\n         TM    TISTATUS,TISMA     MASTER?\n         BZ    LOSTCLS            NO - JUST CLSDST RELEASE\n         $CALL MAFIND             YES - FIND ALT MASTER\n*\nLOSTCLS  ST    ACB@,RPLDACB       SET UP ACB @\n         $CALL CLSDST             GO ISSUE CLSDST AND FREE UP TICB\n*\nLOSTRET  $XRET                    RETURN\n         TITLE 'N E T O P - RELREQ EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: RELREQ EXIT                                                   *\n*                                                                     *\n* FUNCTION: TO TAKE APPROPRIATE ACTION WHEN TERMINAL REQUESTED.       *\n*                                                                     *\n* DESCRIPTION: THIS ROUTINE SHOULD EXAMINE THE RETURN CODE IN THE     *\n*        PARAMETER LIST SET UP BY VTAM AND TAKE APPROPRIATE RECOVERY  *\n*        ACTION.                                                      *\n*                                                                     *\n* ENTRY POINT: RELREQ                                                 *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ PARAMETER LIST CONTAINING                            *\n*              (1) @ ACBTERMS                                         *\n*              (2) @ TERMINAL NAME                                    *\n*                                                                     *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   ADDRESS OF RELREQ EXIT                                 *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     RPL@                                *\n*              POINTER TO TICB    RICB@                               *\n*              POINTER TO NIB     NIB@                                *\n*              WORK REGISTER      WKA,WKB                             *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*              SAVE AREA ADDRESS  SA@                                 *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* ATTRIBUTES: VTAM EXLST EXIT                                         *\n*                                                                     *\n***********************************************************************\n*\nRELREQ   $XINIT\n         USING LOGONPRM,PARM@     RELREQ PARM DSECT ADDRESSING\n         LA    NIB@,LOGONNIB      SET POINTER TO NIB\n         USING ISTDNIB,NIB@       NIB DSECT ADDRESSING\n         LA    RPL@,DISCRPL       SET POINTER TO RPL\n         L     ACB@,LGNACB@       PICK UP ACB PTR\n         L     WKA,TNAME@         SET POINTER TO TERMINAL NAME\n         MVC   NIBSYM,0(WKA)      MOVE TERMINAL NAME INTO NIB\n         LA    WKA,RPLARG         CID PTR\nRLRQINQR INQUIRE RPL=(RPL@),                                           *\n               ACB=(ACB@),                                             *\n               NIB=(NIB@),                                             *\n               AREA=(WKA),AREALEN=4,                                   *\n               OPTCD=CIDXLATE\n         LTR   RTNCD,RTNCD        OK?\n         BZ    RLRQSEND          YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RLRQINQR            THEN RETRY\n         B     RLRQINV             ELSE FORGET IT\nRLRQSEND NI    RPLEXTDS,255-RPLNIB TURN OFF NIB FLAG (NOW A CID)\n         OI    RPLRH3,RPLEB  SET END BRACKET                     87107\n         NI    RPLRH3,255-RPLBB  RESET BEGIN BRACKET             87107\n         L     TICB@,RPLUSFLD  GET LOCAL WORK AREA               87107\n         TM    TIFLAGS3,TIF3READ  IN BRACKET ?                   87107\n         BNZ   *+8           YES                                 87107\n         OI    RPLRH3,RPLBB  NEED TO SET BEGIN ALSO              87107\n         SEND  RPL=(RPL@),        SEND REJECT MSG AND CLSDST           *\n               AREA=RLRQM,                                             *\n               RECLEN=RLRQML,                                          *\n               OPTCD=SYN,POST=RESP,RESPOND=(EX,FME,NRRN)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    RLRQUS             YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    RLRQSEND            THEN RETRY\n         B     RLRQINV             ELSE FORGET RELEASE\nRLRQUS   L     TICB@,RPLUSFLD     GET TICB PTR\n*\n         TM    TISTATUS,TISMA     MASTER?\n         BO    RLRQINV            YES - INVALID RELEASE\nRLRQCLS  STIMER WAIT,BINTVL=CLSDLAY  ALLOW 1/2 SEC TO READ RELEASE MSG\n         $CALL CLSDST             GO ISSUE CLSDST AND FREE UP TICB\n*\n         LA    WKA,6              EX LENGTH FOR SHORT MOVE\n         B     RLRQPUT\n*\nRLRQINV  LA    WKA,L'RELMSG       EX LENGTH FOR LONG MOVE\n*        B     RLRQPUT\n*\nRLRQPUT  $CALL PUTLOG,RELMSG,(WKA)  OUTPUT REC\nRLRQRET  $XRET                    RETURN\n         TITLE 'N E T O P - TPEND EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: TPEND EXIT                                                    *\n*                                                                     *\n* FUNCTION: TO NOTIFY PO OF VTAM SHUTDOWN.                            *\n*                                                                     *\n* DESCRIPTION: SAVES REASON CODE AND POSTS CLOSEDOWN ECB.             *\n*                                                                     *\n* ENTRY POINT: TPEND                                                  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R1    @ PARAMETER LIST CONTAINING:                           *\n*              (1) @ ACBTERMS                                         *\n*              (2) REASON CODE                                        *\n*        R14   RETURN ADDRESS                                         *\n*        R15   TPEND ENTRY POINT ADDRESS                              *\n*                                                                     *\n* EXIT, NORMAL: BR 14                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              VTAM EXLST EXIT                                        *\n*                                                                     *\n***********************************************************************\n*\nTPEND    $XINIT SA=ENDSA\n         OI    POSTATUS,POSCLSDN  CLOSING DOWN, FORGET ERRORS    86356\n         USING TPENDPRM,PARM@     TPEND PARM DSECT ADDRESSING\n         L     WKA,TPREASON       PICK UP SAVE REASON CODE\n         $CALL CVHX               CONVERT AND\n         MVC   TPEMSGRC,HEX        MOVE INTO LOG TEXT\n         LA    TICB@,VTAMTICB     ADDRESS VTAMTICB\n         $CALL PUTLOG,TPEMSG,TPEMSGL-1 OUTPUT REC\n         POST  ECBMAIN            INDICATE PO MUST CLOSE DOWN\n         $XRET                    RETURN TO VTAM\n         DROP  PARM@\n         TITLE 'N E T O P - ERROR EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: SYNAD/LERAD                                                   *\n*                                                                     *\n* FUNCTION: TO TAKE APPROPRIATE ACTION WHEN A LOGICAL OR PHYSICAL     *\n*        ERROR IS ENCOUNTERED  WITH A TERMINAL. THIS IS BOTH A        *\n*        SYNAD AND LERAD EXIT.                                        *\n*                                                                     *\n* DESCRIPTION: THIS ROUTINE SHOULD EXAMINE THE RETURN CODE IN         *\n*        REGISTER 0 AS SET UP BY VTAM AND TAKE APPROPRIATE RECOVERY   *\n*        ACTION.                                                      *\n*                                                                     *\n* ENTRY POINT: ERROR                                                  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    RECOVERY ACTION RETURN CODE                            *\n*        R1    @RPL                                                   *\n*                                                                     *\n*        R2-12 UNDETERMINED                                           *\n*        R13   UNMODIFIED SINCE MACRO ISSUED - CALLERS SA, SAVED      *\n*        R14   RETURN ADDRESS IN VTAM, SAVED                          *\n*        R15   ADDRESS OF ERROR EXIT                                  *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE (IF ANY ARE MADE TO VTAM ANOTHER SA MUST BE CHAINED)    *\n*                                                                     *\n* ATTRIBUTES: VTAM EXLST EXIT (BOTH SYNAD AND LERAD)                  *\n*                                                                     *\n* NOTE:       ERRSAVE%+C% POINTS TO MACRO IN ERROR                    *\n*                                                                     *\n***********************************************************************\n*\nERROR    $XINIT SA=ERRORSA    CHAIN SAVE AREAS\n         LR    RPL@,PARM@     SET RPL PTR\n         CLI   RPLRTNCD,USFLOGIC  LOGICAL ERROR?\n         BE    LERERR         YES\n         CLI   RPLRTNCD,USFENVER  ENVIRONMENT ERROR?\n         BE    ENVERR         YES\n         B     ERRLOG         LOG AND RETURN TO NSI\n*\n*        ENVIRONMENT ERRORS\n*\nENVERR   CLI   RPLFDB2,USFVOFOC  REQUEST CANCELLED BY VARY?\n         BE    ERRLOG            YES - LOG AND RETURN TO NSI\n         CLI   RPLFDB2,USFTANAV  TERMINAL NOT AVAILABLE?\n         BE    ERRLOG            YES - LOG AND RETURN TO NSI\n         CLI   RPLFDB2,X'0D'     ACB BEEN CLOSED?\n         BE    ERRLOG            YES - LOG AND RETURN TO NSI\nENVABEND TM    POSTATUS,POSCLSDN+POSABEND  CLOSEDOWN OR ABEND?\n         BNZ   ERRLOG         YES - JUST LOG IT AN GO NSI\n         SR    RTNCD,RTNCD    YES - SET REASON CODE\n         IC    RTNCD,RPLFDB2   TO FEEDBACK2 VAL\n         $AB   (ACTCD)          AND ABEND\n*\n*        LOGICAL ERRORS\n*\nLERERR   CLI   RPLFDB2,USFRNOCE  CMD SYNTAX ERROR?\n         BE    ERRET             YES - RETURN TO NSI\n         CLI   RPLFDB2,USFRNOSE  REPLY CMD SYNTAX ERROR?\n         BE    ERRET             YES - RETURN TO NSI\n         CLI   RPLFDB2,USFSDNP   SEND STILL PENDING?\n         BE    ERRLOG            YES - LOG AND RETURN TO NSI\n         CLI   RPLFDB2,USFRNOCL  RCVCMD DURING CLOSE             86355\n         BE    ERRLOG            YES - LOG AND RETURN TO NSI     86355\n*\nLERABEND TM    POSTATUS,POSCLSDN+POSABEND  CLOSEDOWN OR ABEND?\n         BNZ   ERRLOG         YES - JUST LOG IT AN GO NSI\n         SR    RTNCD,RTNCD    SET REASON CODE\n         IC    RTNCD,RPLFDB2   TO FEEDBACK2 VAL\n         $AB   (ACTCD)\n*\nERRLOG   IC    WKA,RPLREQ     GET REQ CODE\n         $CALL CVHX            CONVERT\n         MVC   ERREQ(2),HEX     AND MOVE IN\n         IC    WKA,ACTCD      GET ACTION CODE\n         $CALL CVHX            CONVERT\n         MVC   ERRTNCD(2),HEX   AND MOVE IN\n         IC    WKA,RPLFDB2    PICK UP FEEDBACK CODE\n         $CALL CVHX            CONVERT\n         MVC   ERFDBK2(2),HEX   AND MOVE IN\n         IC    WKA,RPLSSEI    PICK UP SSENSEI CODE\n         $CALL CVHX            CONVERT\n         MVC   ERSENEI(2),HEX   AND MOVE IN\n         IC    WKA,RPLSSMI    PICK UP SSENSMI CODE\n         $CALL CVHX            CONVERT\n         MVC   ERSENMI(2),HEX   AND MOVE IN\n         IC    WKA,RPLESR1    PICK UP 1ST BYTE OF SENSE CODE\n         $CALL CVHX            CONVERT\n         MVC   ERSENU1(2),HEX   AND MOVE IN\n         IC    WKA,RPLESR2    PICK UP 2ND BYTE OF SENSE CODE\n         $CALL CVHX            CONVERT\n         MVC   ERSENU2(2),HEX   AND MOVE IN\n         OI    POSTATUS,POSSEND TELL TSO USERS ABOUT ABNORMAL CONDITION\n         L     TICB@,RPLUSFLD -> CURRENT TICB\n         LA    WKA,DUMTICB    VALIDATE\n         CR    WKA,TICB@       TICB PTR\n         BNH   ERRTCHK          IF INVALID\n         LA    TICB@,BLANX       SUBSTITUTE BLANX FOR TINAME\n         B     ERRPLOG            IN LOG MSG\nERRTCHK  LA    WKA,TICBS\n         CR    WKA,TICB@\n         BNL   ERRPLOG\n         LA    TICB@,BLANX\nERRPLOG  $CALL PUTLOG,ERMSG,ERMSGL-1 OUTPUT RECORD\n         CLI   RPLSSEI,RPLSTATI   STATE ERROR?\n         BNE   ERRET               NO\n         L     R1,=A(LERRRPL+8)    YES => SAVE\n         MVC   0(112,R1),IFGRPL            READ ONLY RPL\n         ABEND 405,DUMP                              & DUMP\nERRET    $XRET                    RETURN TO NSI VIA VTAM\n         TITLE 'N E T O P - RESPONSE EXIT'\n***********************************************************************\n**                                                                   **\n**       NAME:  RESP EXIT                                            **\n**                                                                   **\n**       DESCRIPTION:  A RESPONSE IS RECEIVED FROM A LOGICAL         **\n**             UNIT FOR WHICH NO RECEIVE IS OUTSTANDING THAT         **\n**             SPECIFIES  RTYPE=RESP.                                **\n**                                                                   **\n**       ENTRY POINT:  RESP                                          **\n**                                                                   **\n**       REGISTERS:                                                  **\n**                                                                   **\n**                                                                   **\n**       AT ENTRY:                                                   **\n**                                                                   **\n**       R1   CONTAINS THE ADDRESS OF A 5 WORD PARAMETER LIST.       **\n**                                                                   **\n**            WORD 1 CONTAINS THE ADDRESS OF THE ACB FOR THE         **\n**            APPLICATION PROGRAM TO WHICH THE LOGICAL UNIT WAS      **\n**            CONNECTED.                                             **\n**                                                                   **\n**            WORD 2 CONTAINS THE CID OF THE LOGICAL UNIT.           **\n**                                                                   **\n**            WORD 3 CONTAINS THE VALUE THAT WAS PLACED IN THE       **\n**            USERFLD OF THE NIB ASSOCIATED WITH THE LOGICAL         **\n**            UNIT (THE NIB SPECIFIED WHEN THE LOGICAL UNIT WAS      **\n**            CONNECTED).                                            **\n**                                                                   **\n**            WORD 4 IS NOT USED.                                    **\n**                                                                   **\n**            WORD 5 CONTAINS THE ADDRESS OF A VTAM-SUPPLIED         **\n**            RPL IN READ-ONLY STORAGE. THE RPL CAN BE COPIED        **\n**            OR DISPLAYED BY USING THE SHOWCB AND TESTCB MACROS     **\n**            BUT CANNOT BE USED IN RECEIVE OR SEND MACROS.          **\n**                                                                   **\n**                                                                   **\n**       R14  CONTAINS THE ADDRESS IN VTAM TO WHICH THE RESP         **\n**            EXIT MUST BRANCH WHEN IT IS FINISHED PROCESSING.       **\n**                                                                   **\n**       R15  CONTAINS THE ADDRESS OF THE RESP EXIT ROUTINE.         **\n**                                                                   **\n**                                                                   **\n**       THE EXIT DOES NOT HAVE TO ISSUE A RECEIVE TO GET THE        **\n**       RESPONSE; THE COMMAND RECEIVED IS DETERMINED BY             **\n**       EXAMINING THE READ-ONLY RPL.                                **\n**                                                                   **\n**                                                                   **\n**       EXIT NORMAL:  BR 14                                         **\n**                                                                   **\n**       EXIT ERROR:  NONE                                           **\n**                                                                   **\n**       CALLS:   CVHX, PUTLOG                                       **\n**                                                                   **\n**       CALLED BY:  VTAM                                            **\n**                                                                   **\n**       ATTRIBUTES:                                                 **\n*             SERIALLY REUSABLE                                       *\n*              VTAM EXLST EXIT                                        *\n*                                                                     *\n***********************************************************************\n*\nRESP     $XINIT\n         USING LOSTPARM,PARM@     LOSTERM PARM DSECT ADDRESSING\n         STM   R0,R1,ABREGS\n         L     RPL@,RESPRPL       LOAD READ-ONLY RPL PTR\n         L     TICB@,LOSTUSER     LOAD TICB PTR\n         IC    WKA,RPLREQ     GET REQ CODE\n         $CALL CVHX            CONVERT\n         MVC   REREQ(2),HEX     AND MOVE IN\n         IC    WKA,RPLRTNCD   GET ACTION CODE\n         $CALL CVHX            CONVERT\n         MVC   RERTNCD(2),HEX   AND MOVE IN\n         IC    WKA,RPLFDB2    PICK UP FEEDBACK CODE\n         $CALL CVHX            CONVERT\n         MVC   REFDBK2(2),HEX   AND MOVE IN\n         IC    WKA,RPLSSEI    PICK UP SSENSEI CODE\n         $CALL CVHX            CONVERT\n         MVC   RESENEI(2),HEX   AND MOVE IN\n         IC    WKA,RPLSSMI    PICK UP SSENSMI CODE\n         $CALL CVHX            CONVERT\n         MVC   RESENMI(2),HEX   AND MOVE IN\n         IC    WKA,RPLESR1    PICK UP 1ST BYTE OF SENSE CODE\n         $CALL CVHX            CONVERT\n         MVC   RESENU1(2),HEX   AND MOVE IN\n         IC    WKA,RPLESR2    PICK UP 2ND BYTE OF SENSE CODE\n         $CALL CVHX            CONVERT\n         MVC   RESENU2(2),HEX   AND MOVE IN\n         OI    POSTATUS,POSSEND TELL TSO USERS ABOUT ABNORMAL CONDITION\n         $CALL PUTLOG,REMSG,REMSGL-1 OUTPUT RECORD\n         CLI   RPLRTNCD,X'04' IF RTNCD = 04\n         BNE   RESPRET\n         CLI   RPLFDB2,X'04'    AND FDB2 = 04\n         BNE   RESPRET\n         TM    POSTATUS,POSCLSDN+POSABEND  QUITTING ?            87131\n         BNZ   RESPRET       YES; IGNORE PROBLEM                 87131\n         ABEND 404,DUMP           THEN GIVE US A DUMP\nRESPRET  $XRET                    RETURN TO NSI VIA VTAM\n*\n         DROP  PARM@\n         EJECT\n         SPACE 20\n*                        SUBROUTINES\n*\n*\n*        EACH IS INDEPENDENTLY BASED, EXIT BEING VIA $SRET MACRO.\n*        WHERE MULTIPLE ENTRY POINTS OCCUR, BASE AND RETURN SAVE WORDS\n*        OF THE LAST EP ONLY ARE GENERATED;  PREVIOUS $SINIT MACROS\n*        REFER TO IT VIA THE  SARET=  OPERAND.\n*\n*\n         USING ISTDPOHD,DA@       SET UP ISTDPOHD DSECT ADDRESSING\n         TITLE 'N E T O P - SHOWCDS SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: SHOWCDS                                                       *\n*                                                                     *\n* FUNCTION: MOVE ACB ERROR FEEDBACK INFORMATION INTO MESSAGE NTP10.   *\n*        THIS MESSAGE WILL SHOW IN DETAIL HOW OPEN OR CLOSE           *\n*        FAILED.                                                      *\n*                                                                     *\n* DESCRIPTION: CONVERTS RETURN CODE AND ERROR CODE (ACBERFLG) TO      *\n*        HEX DIGITS AND MOVES THEM INTO MESSAGE NTP10.                *\n*                                                                     *\n* REGISTERS:                                                          *\n*                                                                     *\n*              RC FROM OPEN/CLOSE WKA                                 *\n*              @ ACB              ACB@                                *\n*              RETURN ADDRESS     RET@                                *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n*        CHANGED:  R6                                        WKA      *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLED BY: MAINLINE                                                 *\n*                                                                     *\n* CALLS: CVHX TO CONVERT CODES TO HEX DIGITS                          *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              SUBROUTINE INTERNAL TO MAINLINE                        *\n*                                                                     *\n***********************************************************************\n*\nSHOWCDS  $SINIT\n         $CALL CVHX               CONVERT RETURN CODE TO HEX\n         MVC   NTP10RC,HEX        MOVE INTO MESSAGE\n         SR    WKA,WKA            CLEAR REGISTER\n         IC    WKA,ACBERFLG       OBTAIN ERROR CODE\n         $CALL CVHX               CONVERT TO HEX\n         MVC   NTP10EC,HEX        MOVE INTO MESSAGE\n         $SRET                    RETURN\n         TITLE 'N E T O P - CVHX SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: CVHX                                                          *\n*                                                                     *\n* FUNCTION: CONVERT A BYTE TO HEXADECIMAL CHARACTER REPRESENTATION    *\n*           AND RETURN TO CHARACTERS TP CALLER.                       *\n*                                                                     *\n* DESCRIPTION: CONVERTS ONE BYTE CODE IN REGISTER 8 AND STORE TWO     *\n*              HEX DIGITS CHARACTERS IN AREA LABELLED HEX.            *\n*                                                                     *\n* REGISTERS:                                                          *\n*                                                                     *\n*              LOW ORDER BYTE CONVERTED  WKA                          *\n*              RETURN ADDRESS     RET@                                *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n*        CHANGED:  NONE *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLED BY: SHOWCDS                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              SUBROUTINE INTERNAL TO SHOWCDS                         *\n*                                                                     *\n***********************************************************************\n*\nCVHX     $SINIT\n         STC   WKA,HEXTOBE       STORE FOR UNPK\n         UNPK  HEX(3),HEXTOBE    UNPACK TWO BYTES\n         TR    HEX(2),TRTAB-240  MAKE IT PRINTABLE\n         $SRET                    RETURN\n         TITLE 'N E T O P - RCVVTAM SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: RCVVTAM                                                       *\n*                                                                     *\n* FUNCTION: TO FILTER UNSOLICITED VTAM MESSAGES FOR CONDITIONS        *\n*        REQUIRING NETOP ACTION, AND FOR REPEATING MESSAGES.          *\n*                                                                     *\n* DESCRIPTION: CURRENTLY THE MSG ID IS CLI'D FOR A FEW MATCHES;       *\n*        EVENTUALLY A CONTROL BLOCK SEARCH LOOP WILL BE IMPLEMENTED.  *\n*        ONCE A MATCH IS FOUND, A COMMAND IS BUILT IN INTBUF IN PFKEY *\n*        FORMAT AND THE POFINTCM FLAG IS TURNED ON. FURTHER ENHANCE-  *\n*        MENTS WILL ALLOW COMMAND CHAINS TO BE GENERATED BY A SINGLE  *\n*        UNSOLICITED MESSAGE.                                         *\n*           REPEATING MESSAGES ARE SUPPRESSED, THE MSG# FIELD BEING   *\n*        UPDATED WITH A REPEAT COUNT TO REGISTER RECEIPT.             *\n*                                                                     *\n* ENTRY POINT: RCVVTAM                                                *\n*                                                                     *\n* INPUT REGISTERS:                                                    *\n*                                                                     *\n*        R4    ADDRESS OF ISTDPOHD DA@                                *\n*        R9    SUBROUTINE RETURN  RET@                                *\n*        OTHERS IGNORED                                               *\n*                                                                     *\n* OUTPUT: INTBUF CONTAINS APPROPRIATE CMD                             *\n*         POFLAGS POFINTCM SET TO REFLECT SEARCH RESULT               *\n*                                                                     *\n*        REGISTERS CHANGED:                                           *\n*                                                                     *\n*        NONE\n*                                                                     *\n* CALLED BY: OUTBOUND                                                 *\n*                                                                     *\n* CALLS:     TSOUID                                                   *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*        SUBROUTINE INTERNAL TO OUTBOUND EXIT                         *\n*                                                                     *\n***********************************************************************\n*\nRCVVTAM $SINIT\n         TM    POSTATUS,POSCLSDN+POSABEND  QUITTING ?            87131\n         BNZ   RCVVRET4      YES; IGNORE RESPONSE                87131\n         TM    POHSTAT,POHGEN     SOLICITED REPLY?\n         BO    RCVVSOLC           YES\n         LA    R0,L'UNSOL-1  GET MAXIMUM LENGTH                  87131\n         CR    R0,MSGLEN                                         87131\n         BNL   *+6           OK                                  87131\n         LR    MSGLEN,R0     ELSE TRUNCATE                       87131\n         EX    MSGLEN,RCVUNCLC    NO - REPEATING MSG?\n         BNE   RCVUN               NO - NOT THE SAME\n         AP    UNSOL#,KP1          YES - INCREMENT UNSOL MSG #\n         CP    UNSOL#,MAXUNSOL    REACHED MAX?\n         BE    RCVVNODE           YES - INACT NODE\n         B     RCVV852\nRCVUN    ZAP   UNSOL#,KP1         RESET UNSOL MSG #\n         EX    MSGLEN,RCVUNMOV    SAVE UNSOL MSG FOR COMPARISON\n*\nRCVV852  CLC   DAMSG#,=C'852'     CLUSTER UNAVAILABLE MSG?\n         BNE   RCVV342            NO\n         MVC   INTNODE,DA852NOD   SET NODENAME\n         B     RCVVINAC           YES - INACT,I\n         SPACE 1\nRCVV342  CLC   DAMSG#,=C'342'     UNABLE TO ESTABLISH SESSION?\n         BNE   RCVV400            NO => NEXT MSG CHECK\n         CLC   DA342RC(2),=CL2'12' APPLICATION INACTIVE??\n         BE    RCVVRET4           YES => SUPPRESS MSG\n         B     RCVVRET0           NO  => EXIT\n         SPACE 1\nRCVV400  CLC   DAMSG#,=C'400'     TERMINATION IN PROGRESS MSG?\n         BNE   RCVV804            NO => NEXT MSG CHECK\n         CLC   DA400APL(3),=CL3'TSO' APPLID=TSO?\n         BE    RCVVRET4           YES => SUPPRESS MSG\n         B     RCVVRET0           NO  => EXIT\n         SPACE 1\nRCVV804  CLC   DAMSG#,=C'804'     CLOSE IN PROCESS MSG?\n         BNE   RCVV805            NO => NEXT MSG CHECK\n         CLC   DA804APL(3),=CL3'TSO' APPLID=TSO?\n         BE    RCVVRET4           YES => SUPPRESS MSG\n         B     RCVVRET0           NO  => EXIT\n         SPACE 1\nRCVV805  CLC   DAMSG#,=C'805'     CLOSE COMPLETE MSG?\n         BNE   RCVV285            NO => NEXT MSG CHECK\n         CLC   DA805APL(3),=CL3'TSO' APPLID=TSO?\n         BE    RCVVRET4           YES => SUPPRESS MSG\n         B     RCVVRET0           NO  => EXIT\n         SPACE 1\nRCVV285  CLC   DAMSG#,=C'285'     DUMP COMPLETE MSG?\n         BE    RCVV2856           YES\n         CLC   DAMSG#,=C'286'     DUMP PARTIALLY COMPLETE MSG?\n         BNE   RCVV413            NO\nRCVV2856 MVC   INTDNODE,DA285NOD  SET NODENAME\n         MVC   INTFDUMP,FDUMP     SET MODIFY CMD\n         LA    WKA,L'FDUMP        SET CMD LENGTH\n         OI    POSTATUS,POSSEND   FLAG SEND TO TSO USERS\n         B     RCVVOSCM           OS COMMAND\n*\nRCVV413  CLC   DAMSG#,=C'413'     VTAM DUMPING MSG?\n         BNE   RCVV209            YES\n         OI    POSTATUS,POSSEND   FLAG SEND TO TSO USERS\n         B     RCVVRET0\n*\nRCVV209  CLC   DAMSG#,=C'209'     INTERVENTION REQD MSG?\n         BNE   RCVVRET0           NO\n         CLC   DABTUCMD,=C'020A'  YES - WRITE CONTACT?\n         BNE   RCVVRET0           NO\nRCVVNODE MVC   INTNODE,DAMSGNOD   SET NODENAME\n         B     RCVVINAC           YES - INACT,I\n*\n*\n*        INACT REQUIRED\n*\nRCVVINAC MVI   INTAID,PF6         SET 'INACT,I' PFKEY\n         LA    WKA,L'INTAID+L'INTNODE  SET INTERNAL CMD BUF LENGTH\n         B     RCVVRETI\n*\n*        OS CMD REQUIRED\n*\nRCVVOSCM MVI   INTAID,PF5         SET OS CMD PFKEY\n         LA    WKA,L'INTAID+L'INTNODE(,WKA)  INCREMENT CMD BUF LENGTH\n*        B     RCVVRETI\n*\n*        INTERNAL CMD COMMON CODE\n*\nRCVVRETI OI    POFLAGS,POFINTCM   FLAG CMD GENERATED\n         STH   WKA,INTBUFL\n         B     RCVVRET0\n*\n*\n*        SOLICITED MESSAGE COMPARES\n*\nRCVVSOLC TM    TIFLAGS,TIFCLUST   CLUSTER ONLY FLAG SET?\n         BZ    RCVV082            NO\nRCVV080  CLC   DAMSG#,=C'080'     CLUST/TERM LINE OF DISPLAY RESPONSE?\n         BNE   RCVV089            NO\n         LA    WKA,DAMSGNOD       YES - SCAN FOR\n         LA    WKB,3               AND BLANK OUT\n         SR    WKC,WKC              ANY NON-CLUSTER\nRCVVCLOO CLI   0(WKA),C'&CLUST'      STATUS FIELD\n         BNE   RCVVNCLU\n         LA    WKC,1(,WKC)\n         B     RCVVCLND\nRCVVNCLU MVC   0(DAM80TXL,WKA),BLANX\nRCVVCLND LA    WKA,DAM80NXL(,WKA)\n         BCT   WKB,RCVVCLOO\n         LTR   WKC,WKC            IF NO CLUSTER STATUS FIELDS\n         BZ    RCVVRET4            ARE DETECTED, SUPPRESS OUTPUT\n         OI    POFLAGS,POFHINT    FLAG FOR HI INTENSITY TO MAKE IT\n         B     RCVVRET0            EASIER TO SEE\n*\nRCVV089  CLC   DAMSG#,=C'089'     SNA CLUST/TERM DISPLAY RESPONSE?\n         BNE   RCVV082            NO\n         CLI   DAMSGNOD,C'&CLUST' CLUSTER?\n         BNE   RCVVRET4           NO - SUPPRESS OUTPUT\n         OI    POFLAGS,POFHINT    FLAG FOR HI INTENSITY TO MAKE IT\n         B     RCVVRET0            EASIER TO SEE\n*\nRCVV082  CLC   DAMSG#,=C'082'     3RD LINE OF DISPLAY RESPONSE?\n         BNE   RCVVRET0           NO\n         TM    TISTATUS,TISUID    USERID FOUND FLAG ON (? TYPE CMD)\n         BZ    RCVTSOCK           NO\n         NI    TISTATUS,255-TISUID  YES - RESET FLAG\n         MVC   NEWUID,TIABR       MOVE IN USERID\n         LH    WKC,TIABR+8        POINT TO HEX ASID\n         B     RCVVASID           GO FILL REST OF NEW IST082 LINE\nRCVTSOCK CLC   DAM82ALC(3),=C'TSO'    ALLOC= TSONNNN ?\n         BNE   RCVVRET0            NO\n         TM    POSTATUS,POSTEST    YES - RUNNING UNDER TEST?\n         BO    RCVVRET0             YES - DONT CONVERT\n         MVC   WORK(4),=C'0000'    VERIFY\n         MVN   WORK(4),DAM82ALC+3   FOR VALID\n         CLC   WORK(4),DAM82ALC+3    NUMERICS\n         BNE   RCVVRET0            IF NOT, DONT CONVERT TSOXXXX\n         PACK  WORK,DAM82ALC+3(4)   NO - PACK TCAS ID\n         CVB   PARM@,WORK           LOAD TCAS APPL INDEX\n         $CALL TSOUID,(PARM@)     GO CONVERT TSONNNN TO USERID\n         USING ASCB,RTNCD              ESTABLISH ADDRESSABILITY TO ASCB\n         LTR   RTNCD,RTNCD             ASCB PTR RETURNED?\n         BZ    RCVVRET0                NO\n         L     WKA,ASCBJBNS            YES - PICK UP USERID PTR\n         MVC   NEWUID,0(WKA)             MOVE\n         LH    WKC,ASCBASID               IN\nRCVVASID CVD   WKC,WORK                    NEW\n         MVC   WORK(4),=X'40202120'         VALUES\n         ED    WORK(4),WORK+6\n         CLI   WORK+1,C' '\n         BNE   RCVVUNBL\n         MVI   WORK+1,C'('\n         B     RCVVMVID\nRCVVUNBL MVI   WORK,C'('\nRCVVMVID MVC   NEWASID,WORK\n         MVC   NEWDEV,DAM82DEV          MOVE IN\n         MVC   NEWALC,DAM82ALC           EXISTING\n         MVC   NEWSIM,DAM82SIM            VALUES\n         MVC   DAMSGNOD(NEW082L),NEW082  MOVE IN NEWLY FORMATTED MSG\n         LA    MSGLEN,NEW082L+(DAMSGNOD-DATX)  SET NEW LENGTH\n         B     RCVVRET0\n         DROP  RTNCD\n*\nRCVVRET4 LA    RTNCD,4            SUPPRESS OUTPUT OF THIS MSG\n         B     RCVVRET\n*\nRCVVRET0 SR    RTNCD,RTNCD        OUTPUT THIS MSG\nRCVVRET  $SRET                    RETURN\n*\nRCVUNMOV MVC   UNSOL(*-*),DATX         MOVE INTO UNSOL AREA\nRCVUNCLC CLC   UNSOL(*-*),DATX         COMPARE TO UNSOL AREA\n         TITLE 'N E T O P - RCV3270 SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: RCV3270                                                       *\n*                                                                     *\n* FUNCTION: ANALYZE THE INPUT OBTAINED FROM THE OPERATOR AND DETERMINE*\n*           IF THERE IS ANYTHING TO SEND TO VTAM.                     *\n*                                                                     *\n* DESCRIPTION:                                                        *\n*                                                                     *\n* ENTRY POINT: RCV3270                                                *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        DA@       ISTDPOHD ADDRESS                                   *\n*        MSGLEN    MESSAGE LENGTH                                     *\n*        RET@      RETURN ADDRESS                                     *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              @ TICB FOR THE TERMINAL BEING READ.  TICB@             *\n*              @ DATA AREA WITH THE INPUT DATA      DA@               *\n*              LENGTH OF MESSAGE                    MSGLEN            *\n*              WORK REGISTERS                       WKA,WKB           *\n*              SUBROUTINE RETURN ADDRESS            RET@              *\n*              BASES                           BASE1@,DBASE1@,DBASE2@ *\n*              VTAM CALLS                           SUBR@,RTNCD,RET@  *\n*              RETURN CODE                          RTNCD             *\n*               RCVCMDOK EQU 0            COMMAND OK                  *\n*               RCVCMDRS EQU 4            COMMAND OK AND RESPONSE MSG *\n*               RCVRMSG  EQU 8            RESPONSE MSG                *\n*               RCVNRMSG EQU 12           NO RESPONSE MSG             *\n*               RCVCLDST EQU 12           CLSDST ISSUED FOR TERMINAL  *\n*               RCVCLOSD EQU 16           CLOSEDOWN ISSUED FOR NETOP  *\n*                                                                     *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: UNSTACK TO UNSTACK MESSAGES AFTER PA KEY HIT WHEN IN         *\n*                WAIT-FOR-ROLL CONDITION.                             *\n*                                                                     *\n* CALLED BY: INBOUND EXIT                                             *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nRCV3270  $SINIT\n         ST    R2,RCVSAVE2        SAVE RPL @ (TRT USED)\n         TM    RPLCNTDC,RPLSIGNL  ATTENTION REQUESTED ?          87109\n         BZ    NOSIG         NO                                  87109\n         MVI   DATX,PA1      FAKE A PA1                          87109\n         LA    MSGLEN,1      FAKE LENGTH=1                       87109\nNOSIG    OI    TIFLAGS3,TIF3MCNT  RESHOW STACKED COUNT           87109\n         MVC   AID,DATX           SAVE AID\n         NI    AID,X'0F'          ZERO ZONE\n         BZ    INVINP             NO ACTION AID => TREAT AS INVALID\n*                                     TILL I CAN FIGURE OUT WHY\n*                                     WE GET IT.\n         CLI   AID,X'0F'          INVALID IF > 14 NUMERIC\n         BL    AIDFND             OK\nAIDBAD   ABEND 256,DUMP           NO - LET'S GET A DUMP OF THIS...\n*\nAIDFND   CLI   AID,XPF3            END?\n         BE    TERMEND             YES - GO RELEASE TERMINAL\n         CLI   AID,XPF1            HELP?\n         BE    HELPOUT             YES - GO DISPLAY HELP SCREEN\n         CH    MSGLEN,K3           LENGTH > 3?\n         BH    MOREDATA            YES\n*              NO - RESET ROLL WAIT, NO-AUTO REENTRY, HELP, LAST UNSOL\nAIDSHORT NI    TIFLAGS,255-(TIFWTROL+TIFNAUT)\n         TM    TISTATUS,TISTACK    ANY MESSAGES STACKED?\n         BO    ATTNCHK             YES\n         NI    TIFLAGS,255-(TIFHELP+TIFUNSOL) NO - RESET FLAGS\n         B     NOSTACK\nATTNCHK  CLI   DATX,PA1            ATTN? (DELETE OUTSTANDING MESSAGES)\n         BE    DELSTACK            YES\n         CLI   DATX,CLEAR          CLEAR?\n         BE    CLRSTACK            YES\n         TM    TIFLAGS,TIFHELP     HELP SCREEN CURRENT?\n         BZ    NOHELP              NO - DONT RE-INIT SCREEN\nCLRSTACK SR    PARM@,PARM@         YES - INIT PARM,\n         IC    PARM@,TIABRLEN+1     PICKUP LAST CMD LEN,\n         $CALL INT3270,(PARM@)      RE-INIT SCREEN BEFORE UNSTACKING\n         NI    TIFLAGS,255-TIFHELP RESET HELP FLAG\nNOHELP   ST    TICB@,TICBLIST      SET UP\n         OI    TICBLIST,LASTPARM    TICBLIST FOR SENDS\n         $CALL UNSTACK             RETRIEVE AND SEND STACKED MSGS\n         B     RCV32RET GO SEND WARNING OR NOT (RC FROM UNSTACK=4 OR 8)\nDELSTACK OI    POFLAGS,POFSTDEL    FLAG STACK DELETE\n         $CALL UNSTACK             RETRIEVE AND DELETE STACKED MSGS\n         MVI   DATX,PA2            ASK FOR RESHOW\n         NI    TIFLAGS,255-(TIFHELP+TIFUNSOL) RESET FLAGS\n         B     CLEARSET            GO INIT SCREEN\nNOSTACK  NI    TIFLAGS,255-(TIFDSP+TIFDSP11+TIFCLUST) RESET DISPLAY\n         XC    TIDSPCT,TIDSPCT                 FLAGS AND COUNT\n         CLI   DATX,PA1            ATTN (NO-OP)?\n         BE    RCVNULL             YES\nCLEARSET SR    PARM@,PARM@         INIT PARM\n         CLI   DATX,PA2            RESHOW?\n         BNE   CLEARCAL            NO\nRESHOW   IC    PARM@,TIABRLEN+1    YES - PICKUP LAST CMD LEN\nCLEARCAL $CALL INT3270,(PARM@)     SHORT READ - RE-INIT SCREEN\n         B     RCV32CLD            RET 8 TO SUPPRESS FURTHER OUTPUT\n*\nMOREDATA CH    MSGLEN,K6           LENGTH > 6?\n         BNH   RCVNULL             NO - NULL MSG - RETURN 4\n         AH    DA@,K3              INCR DSECT BASE OVER AID-CUR-CUR\n         CLI   DATX,SBA            ?\n         BNE   TRYNUM              NO\n         AH    DA@,K3              INCR DSECT BASE OVER SBA-ADR-ADR\n         CLI   DATX,X'40'          BLANK INPUT?\n         BNE   TRYNUM              NO - CHECK IT\nRCVNULL  LA    WKA,NULLM           SET UP FOR NULL MSG\n         LA    WKB,L'NULLM         FULL LENGTH (WITH IC)\nRCV32RMG LA    RTNCD,RCVRMSG       YES - SET RESP MSG RETURN CODE\n         B     RCV32RET            RETURN\n*\nTRYNUM   MVI   WORK,C'0'\n         MVN   WORK(1),DATX        1ST DATA BYTE\n         CLC   WORK(1),DATX         NUMERIC?\n         BNE   SUBSIX              NO\n         CH    MSGLEN,K7           YES - ONLY 1 DATA BYTE?\n         BE    PSEUDO1               YES - PSEUDO PF ONLY\n         CLI   DATX+1,C' '           NO - FOLLOWING BLANK?\n         BE    PSEUDO1                 YES - TREAT AS PSEUDO PF CMD\n         MVI   WORK,C'0'\n         MVN   WORK(1),DATX+1      1ST DATA BYTE\n         CLC   WORK(1),DATX+1       NUMERIC?\n         BNE   IMPLR1              NO - TREAT AS IMPLICIT REPLY CMD\n         CH    MSGLEN,K8           YES - ONLY 2 DATA BYTES?\n         BE    MACANREQ              YES - COULD BE MA-CAND REQUEST\n         CLI   DATX+2,C' '           NO - FOLLOWING BLANK?\n         BE    PSEUDO2                 YES - TREAT AS PSEUDO PF CMD\n*\n         MVC   TBUF+2(2),DATX      IMPLICIT REPLY, 2 NUMERICS\n         SH    MSGLEN,K2           DECREMENT LENGTH\n         LA    WKB,DATX+2          SET UP TEXT PTR\n         B     IMPLREX\nIMPLR1   MVC   TBUF+3(1),DATX      IMPLICIT REPLY, 1 NUMERIC\n         MVI   TBUF+2,C'0'\n         SH    MSGLEN,K1           DECREMENT LENGTH\n         LA    WKB,DATX+1          SET UP TEXT PTR\nIMPLREX  EX    MSGLEN,IMPLRMV1     MOVE REPLY TEXT INTO TBUF\n         MVC   TBUF(2),=C'R '      SET UP REPLY CMD\n         MVI   TBUF+4,C','                REPLY\n         SH    MSGLEN,K2           DECREMENT LENGTH FOR MOVE EX\n         ST    MSGLEN,RCVSAVE       AND SAVE IT FOR LOG EX MOVE\n         EX    MSGLEN,IMPLRMV2     MOVE REPLY CMD INTO ISTDPOHD\n         LA    MSGLEN,1(,MSGLEN)   INCREMENT LENGTH FOR SENDCMD\n         B     RCVREPLY\n*\n*        PSEUDO PF COMMANDS CONSIST OF 1 OR 2 NUMERICS REPRESENTING A\n*        PF KEY NUMBER, FOLLOWED BY A BLANK AND SOME DATA - THIS FORM\n*        IS NECESSARY FOR CLISTS AND FOR TERMINALS WITHOUT PF KEYS\n*\nPSEUDO1  MVN   AID,DATX            MOVE IN PSEUDO AID\n         CH    MSGLEN,K8           MORE THAN 2 DATA BYTES?\n         BH    PSEUDOK             YES - MEANINGFUL DATA\n         LH    MSGLEN,K3           NO - PF ONLY\n         B     AIDFND               TREAT AS SHORT MSG\nPSEUDOK  LA    DA@,2(,DA@)         INCREMENT DATX PTR OVER PSEUDO,\n         SH    MSGLEN,K2            DECREMENT LENGTH FOR PSEUDO CHARS\n         B     TRYNUM               AND GO RESCAN INPUT\nPSEUDO2  CH    MSGLEN,K9           ONLY 3 DATA BYTES?\n         BE    INVINP              YES - MEANINGLESS AS PSEUDO PF CMD\n         NI    DATX+1,X'0F'        NO -\n         SR    WKB,WKB              CONVERT\n         IC    WKB,DATX+1            CHARACTER\n         AH    WKB,K10                AID INTO\n         CH    WKB,K12                 CORRECT\n         BH    INVINP                   HEX\n         STC   WKB,AID                   NUMERIC\n         LA    DA@,3(,DA@)         INCREMENT DATX PTR OVER PSEUDO,\n         SH    MSGLEN,K3            DECREMENT LENGTH FOR PSEUDO CHARS\n         B     TRYNUM               AND GO RESCAN INPUT\n*\nMACANREQ CLI   AID,XPF2            MASTER CANDIDATE REQUEST\n         BNE   INVINP              NO\n         CLC   DATX(2),SENDTIME    YES - CORRECT HOUR?\n         BNE   INVINP                NO\n         TM    TISTATUS,TISMA        YES - MASTER?\n         BO    INVCMD                  YES - DENY\n         XI    TISTATUS,TISMCAND       NO - SWITCH CANDIDATE BIT\n         LA    WKA,1               LOAD INCREMENT\n         TM    TISTATUS,TISMCAND   BIT ON NOW?\n         BO    MCCTUP              YES\n         LNR   WKA,WKA             NO - CHANGE TO DECREMENT\nMCCTUP   AH    WKA,TICBMCCT        ADD OR SUBTRACT 1\n         STH   WKA,TICBMCCT         TO MCANDT COUNT\n         SR    PARM@,PARM@         INIT PARM\n         B     RESHOW              TREAT LIKE RESHOW KEY HIT\n*\nSUBSIX   SH    MSGLEN,K6           DECR. LEN\n         TM    TIFLAGS,TIFNAUT     NO-AUTO RE-ENTRY OF EXPANDED CMD?\n         BZ    NOTNAUT             NO\n         MVI   AID,XENTER          YES - OVER-RIDE AID AS IF ENTER HIT\n         B     UPMOVE               AND DONT UPDATE ABBREV FIELDS\nNOTNAUT  CLI   AID,XPF2            PF2? (CONTROL KEYWORD)\n         BE    UPMOVE              YES - DONT UPDATE ABBREV FIELDS\n         LR    WKB,MSGLEN          CHECK\n         LA    WKC,L'TIABR          LENGTH\n         CR    WKB,WKC             > MAX?\n         BNH   ABRLOK              NO\n         LR    WKB,WKC             YES - SET TO MAX\nABRLOK   STH   WKB,TIABRLEN        SAVE ABBREV LENGTH\n         BCTR  WKB,0               DECR FOR EX\n         EX    WKB,MVABR           SAVE ABBREV CMD\nUPMOVE   MVC   UPPER,BLANX         BLANK TARGET FIELD\n         LA    WKB,6               IF LENGTH\n         LR    WKC,MSGLEN           < 7 THEN\n         BCTR  WKC,0                 USE IT,\n         CR    WKC,WKB                ELSE USE 6\n         BNH   UPFOLD                  FOR EX OF OR INSTR.\n         LR    WKC,WKB                  TO FOLD INPUT DATA\nUPFOLD   EX    WKC,ORUP                  INTO COMPARE FIELD\n         CLC   UPPER(3),=C'END'    ?\n         BE    TERMEND             YES - GO RELEASE TERMINAL\n         SR    WKB,WKB            CALC OFFSET\n         IC    WKB,AID             INTO AID OFFSET\n         BCTR  WKB,0                BRANCH TABLE\nAIDOK    SLL   WKB,1              * 2 SINCE OFFSETS ARE HALFWORDS\n         LH    WKB,AIDTAB(WKB)    LOAD CODE OFFSET\n         B     AIDTAB(WKB)        GO TO INPUT HANDLER FOR THIS AID\n*\nAIDTAB   DS    0H                 TABLE OF OFFSETS TO INPUT HANDLERS\n*                                   THIS LOGIC MEANS THAT ON 3278'S\n*                                 PF13-PF24 CORRESPOND TO PF1-PF12\n         DC    AL2(AIDPF1-AIDTAB)\n         DC    AL2(AIDPF2-AIDTAB)\n         DC    AL2(AIDPF3-AIDTAB)\n         DC    AL2(AIDPF4-AIDTAB)\n         DC    AL2(AIDPF5-AIDTAB)\n         DC    AL2(AIDPF6-AIDTAB)\n         DC    AL2(AIDPF7-AIDTAB)\n         DC    AL2(AIDPF8-AIDTAB)\n         DC    AL2(AIDPF9-AIDTAB)\n         DC    AL2(AIDPF10-AIDTAB)\n         DC    AL2(AIDPF11-AIDTAB)\n         DC    AL2(AIDPF12-AIDTAB)\n         DC    AL2(AIDENTER-AIDTAB)\n         DC    AL2(AIDSEL-AIDTAB)\n*\nAIDPF2   LR    WKD,MSGLEN         SET UP\n         BCTR  WKD,0               EX LENGTH FOR COMPARE/MOVE\n         LA    WKB,PF2KWDS        INDEX REG TO KEYWORDS\nPF2LOOP  EX    WKD,PF2CLC         COMPARE FOR NEGATIVE FORM\n         BE    PF2MASK            GO APPLY MASK\n         LA    WKB,1(,WKB)        INCREMENT OVER 'N'\n         EX    WKD,PF2CLC         COMPARE FOR POSITIVE FORM\n         BE    PF2MASK            GO APPLY MASK\n         LA    WKB,6(,WKB)        INCREMENT TO NEXT KEYWORD\n         CLI   0(WKB),X'FF'       END OF TABLE?\n         BNE   PF2LOOP            NO\n*                                 YES - ASSUME USERID INTENDED\n         TM    POSTATUS,POSTEST   RUNNING UNDER TEST?\n         BO    INVINP             YES - DONT SEARCH\n         MVC   TIABR(7),UPPER     NO -  MOVE IT INTO TIABR; ALSO MOVE\n         STH   MSGLEN,TIABRLEN     LENGTH IN CASE UID \u00ac FND, THEN PA2\n         $CALL TSOUID,0           GO SEARCH TSB CHAIN FOR USERID\n         LA    WKA,RCVRMSG        DCON RC\n         CR    RTNCD,WKA          ACTIVE OR DCON?\n         BH    INVINP             NO - MUST BE NOT FOUND\n         LA    MSGLEN,8           SET NEW MSG LENGTH\n         BL    IMPLD              ACTIVE - GO TREAT AS DISPLAY\n         NI    TISTATUS,255-TISUID  DISCONNECTED - RESET FLAG\n         MVC   DCONMNAM,DATX      MOVE OLD TERMNAME INTO ERROR PART\n         MVC   DCONMABR,DATX      MOVE OLD TERMNAME INTO ENTRY PART\n         LA    WKB,DCONML         SET UP FOR DCON\n         LA    WKA,DCONM           MESSAGE\n         B     RCV32RET           RETURN\n*\nPF2MASK  CLI   5(WKB),X'7F'       IS IT OVER 7F?\n         BL    PF2OR              NO - MUST BE 'OR' MASK\n         CLI   5(WKB),X'80'       YES - IS IT 80? (HIGHEST 'OR' MASK)\n         BE    PF2OR              YES\n         NC    TIFLAGS2,5(WKB)    NO - 'AND' FLAG BYTE TO TURN OFF\n         B     RCVNULL             TREAT LIKE NULL MSG\nPF2OR    TM    5(WKB),TIF2SOLO     SOLO ON?\n         BZ    PF2ORFLG            NO\n         TM    TISTATUS,TISMA      YES - IS THIS THE MASTER?\n         BO    INVCMD               YES - DENY\nPF2ORFLG OC    TIFLAGS2,5(WKB)    'OR' FLAG BYTE TO TURN ON FLAG\n         B     RCVNULL             TREAT LIKE NULL MSG\n*\nAIDPF4   LA    WKC,L'MODIFY-1      IMPLICIT MODIFY...\n         CLC   NETSOL,UPPER        BUT\n         BE    NOIDMOD              CHECK FOR\nTRYTEST  CLC   TEST,UPPER            MODIFY'S THAT\n         BE    NOIDMOD                HAVE NO\nTRYSUPP  CLC   SUPP,UPPER              'ID='\n         BNE   ALMOD\nNOIDMOD  LA    WKC,L'MODIFY-4      REDUCE LENGTH OF INSERT\nALMOD    LA    WKA,MODIFY                 FOR CMD INSERTION\n         B     INSERT\n*\nAIDPF5   TM    TISTATUS,TISMCAND   IMPLICIT OS CMD - MASTER CANDIDATE?\n         BZ    INVCMD              NO - DENY\n         TM    POSTATUS,POSTEST    RUNNING UNDER TEST?\n         BO    AIDENTER            YES - TREAT AS ENTER KEY\n         LA    WKA,4(,MSGLEN)      YES - SET UP\n         SLL   WKA,16                OS CMD PREFIX\n         ST    WKA,ISTDPOHD           AND STORE IT\n         $CALL MGCR,ISTDPOHD       ISSUE SVC 34\n         $CALL PUTLOG,DATX,(MSGLEN)  LOG CMD\n         LA    WKA,NULLM           SET UP FOR NULL MSG\n         LA    WKB,2                WITHOUT SBA,IC\n         B     RCV32RMG            RETURN NULL\n*\nAIDPF6   LA    WKC,L'VARYII-1      IMPLICIT VARY ,INACT,I\n         LA    WKA,VARYII          SET UP FOR CMD INSERTION\n         B     INSERT\n*\nAIDPF7   OI    TIFLAGS,TIFVLOG     IMPLICIT VARY ,LOGON\n         B     AIDENTER            USE DISPLAY FORMAT, BUT FLAG\n*\nAIDPF8   LA    WKC,L'VARYI-1       IMPLICIT VARY ,INACT\n         LA    WKA,VARYI           SET UP FOR CMD INSERTION\n         B     INSERT\n*\nAIDPF10  OI    TIFLAGS,TIFCLUST    DISPLAY WITH CLUSTER STATUS ONLY\n         B     AIDENTER            USE DISPLAY FORMAT, BUT FLAG\n*\nAIDPF11  OI    TIFLAGS,TIFDSP11    DISPLAY WITH LOGGING - FLAG IT\n         B     AIDENTER\n*\nAIDPF12  LA    WKC,L'VARYA-1       IMPLICIT VARY ,ACT\n         LA    WKA,VARYA           SET UP FOR CMD INSERTION\n         B     INSERT\n*\nAIDSEL   EQU   *                   ALSO SELECTOR PEN ENTER\nAIDENTER CLI   UPPER+1,C' '        VALID CMD FORMAT FOR ENTER KEY?\n         BE    VALENT              YES\n*\n*  FOLLOWING CODE EDITS 'NODENAME,ETC..' AFTER ENTER, PF10 OR PF11\n*  MSG LENGTH IS REDUCED TO ELIMINATE THE  'ETC..'\n*\nIMPLD    LA    WKB,DATX            SET UP\n         LA    WKC,DATX-1(MSGLEN)  LAST CHAR PTR\n         LA    WKD,8                SCAN START PTR\n         LR    WKA,MSGLEN            AND COMMA\n         BCTR  WKA,0\n         CR    WKD,WKA               AND COMMA\n         BNH   DSPLENOK               SCAN\n         LR    WKD,WKA                 LENGTH\nDSPLENOK SR    R2,R2              CLEAR FOR TRT FUNCTION CODE\n         L     WKA,@TRTTAB        LOAD TRT TABLE @\n         EX    WKD,TRTRANG        RANGE OR DELIMITER?\n         BNZ   DELIMFND           NO\n         TM    TIFLAGS,TIFVLOG    YES - VARY ,LOGON?\n         BO    INVINP              YES - INVALID WITHOUT COMMA\n         B     INSERTD             NO - GO INSERT 'D NET,ID='\nDELIMFND LA    WKD,2              PRELOAD FINAL MSGLEN INCR\n         LR    R15,R1             CALC\n         LA    R0,DATX+1           NODENAME\n         SR    R15,R0               LENGTH\n         CH    R2,K1              RANGE NOTATION?\n         BNE   DSPCOMMA           NO - MUST BE DELIM\n         LA    R1,2(,R1)          YES - JUMP TO WHERE COMMA SHOULD BE\n         LA    R15,2(,R15)         AND UPDATE NODENAME LENGTH\n         CR    WKC,R1             PAST LAST CHAR?\n         BNL   DSPCOMMA           NO\n         LA    WKD,1              PRELOAD REVISED FINAL MSGLEN INCR\n         B     DSPBLANK\nDSPCOMMA CLI   0(R1),C','         COMMA?\n         BNE   DSPBLANK           NO - BLANK OR OTHER DELIM\n         LA    R1,1(,R1)          YES - JUMP COMMA\n         TM    TIFLAGS,TIFVLOG    VARY ,LOGON?\n         BZ    DSPLCHAR           NO\n         CR    WKC,R1             YES - IS THIS LAST CHAR?\n         BL    INVINP             YES\n         B     INSERTD               AND GO DO VLOG INSERTION\nDSPLCHAR CR    WKC,R1             IS THIS LAST CHAR?\n         BNH   DSPFOLD            YES\n         CLI   1(R1),C' '         NO - IS NEXT CHAR A BLANK?\n         BNE   DSPBLANK           YES\nDSPFOLD  MVI   HEX,C' '           NO - FOLD\n         OC    HEX(1),0(R1)        NEXT CHAR\n*              ONLY ABBREVIATION IS SUPPORTED HERE -\n*                 FULL KEYWORD WOULD BE EDITED OUT\n         CLI   HEX,C'E'           E FOR EVERY?\n         BE    INSERTD            YES\n         CLI   HEX,C'I'           I FOR INACT?\n         BE    INSERTD            YES\n         CLI   HEX,C'A'           A FOR ACT?\n         BE    INSERTD            YES\n         CLI   HEX,C'N'           N FOR NONE?\n         BE    INSERTD            YES\n*              DELIMITER BUT NO COMMA OR DELIMITER BUT END OF INPUT\nDSPBLANK TM    TIFLAGS,TIFVLOG    VARY ,LOGON?\n         BO    INVINP             YES - INVALID WITHOUT 2ND OPERAND\n         LA    MSGLEN,0(WKD,R15)  NO - SET CORRECT LENGTH\n*\nINSERTD  LA    WKC,L'DISPLAY-1    IMPLICIT DISPLAY\n         LA    WKA,DISPLAY         SET UP FOR CMD INSERTION\n         B     INSERT\n*\n*\nVALENT   CH    MSGLEN,K1           SINGLE CHARACTER INPUT?\n         BNE   TRYREP              NO\n         CLI   UPPER,C'K'          YES - IS IT KLEAR?\n         BNE   TRYW                NO\n         MVI   DATX,CLEAR          YES - FAKE CLEAR AID\n         B     AIDSHORT             AND GO PROCESS IT\n*\nTRYW     CLI   UPPER,C'W'          IS IT W? (WRITE EOF TO LOG)\n         BNE   INVINP              NO - TREAT AS INVALID\n         TM    TISTATUS,TISMCAND   YES - MASTER CANDIDATE?\n         BZ    INVCMD                NO - DENY\n         CLOSE (VTAMLOGO)            YES - CLOSE,\n         OPEN  (VTAMLOGO,OUTPUT)      AND RE-OPEN MOD\n         SR    PARM@,PARM@         INIT PARM\n         B     CLEARCAL            RE-INIT SCREEN\n*\nTRYREP   CLI   UPPER,C'R'          IS IT REPLY?\n         BNE   NETCHK              NO\nRCVREPLY TM    TISTATUS,TISMCAND   MASTER OR CANDIDATE?\n         BZ    INVCMD              NO - DENY\n         OI    TISTATUS,TISREPLY   YES - FLAG IT SINCE PPO ACB MUST BE\n         B     VALCMD               USED FOR SENDCMD\n*\nNETCHK   CLC   NET,DATX+1          IS IT ' NET,'?\n         BE    LONGFORM            YES - NO INSERTION NECESSARY\n         MVC   TBUF(40),DATX+2         NO,\n         MVC   DATX+9(33),TBUF          INSERT\n         MVC   DATX+2(7),NETID           'NET,ID='\n         LA    MSGLEN,L'NETID(,MSGLEN) INCREMENT LENGTH\n         B     NAUTOCHK            GO CHECK FOR AUTO MODE\n*\nINSERT   LA    WKB,DATX+1(WKC) TARGET PTR FOR OPERAND MOVE\n         MVC   TBUF(42),DATX MOVE CMD\n         MVC   0(36,WKB),TBUF        OPERAND OVER\n         EX    WKC,MVINSRT         INSERT CMD\n         TM    TIFLAGS,TIFVLOG     VARY ,LOGON?\n         BZ    INCRLEN             NO\n*\n         NI    TIFLAGS,255-TIFVLOG RESET FLAG\n         MVI   DATX,X'A5'          CHANGE 'D' TO 'V' FOR VARY\n         LR    WKD,MSGLEN          CALC\n         SR    WKD,R15              LENGTH-1 OF\n         SH    WKD,K2                REMAINDER FOR MOVE (IN WKD)\n         BM    INVINP                 UNLESS NEGATIVE (NO REMAINDER)\n         LA    WKB,2(R15,WKB)      CALC TARGET PTR FOR LOGON INSERT\n         MVC   0(6,WKB),KLOGON     MOVE IN 'LOGON='\n         LA    WKB,6(,WKB)         CALC TARGET PTR,\n         LA    WKA,TBUF+1(R15)       LOAD SOURCE PTR AND\n         EX    WKD,MVLOGINS          MOVE IN APPLID AND ANY OTHER DATA\n         LA    MSGLEN,6(,MSGLEN)   INCREMENT LENGTH FOR LOGON=\n*\nINCRLEN  LA    MSGLEN,1(MSGLEN,WKC)      INCR LENGTH FOR NET INSERT\n*\nNAUTOCHK TM    TIFLAGS2,TIF2AUTO  NO-AUTO MODE?\n         BZ    LONGFORM       NO\n         LR    WKA,DA@        YES - JUST DISPLAY\n         SH    WKA,K2          LONG FORM OF\n         LA    WKB,6(,MSGLEN)   CMD IN INPUT AREA\n         MVC   0(6,WKA),NULLM    FOR PERUSAL BEFORE ENTRY\n         OI    TIFLAGS,TIFNAUT FLAG NO-AUTO RE-ENTRY OF EXPANDED CMD\n         B     RCV32RMG\nLONGFORM LR    WKA,MSGLEN         USE A WORK REG\n         LA    WKC,L'TICMD        LOAD MAX LENGTH\n         CR    WKA,WKC            TOO LONG?\n         BNH   CLENOK             NO\n         LR    WKA,WKC            YES - USE MAX\nCLENOK   STH   WKA,TICMDLEN       SAVE CMD LENGTH IN TICB\n         BCTR  WKA,0              DECREMENT LENGTH FOR MVC\n         ST    WKA,RCVSAVE          AND SAVE IT\n         EX    WKA,MVCMD          SAVE CMD IN TICB\n         LA    WKC,DATX-1(WKA)    POINT TO CHAR BEFORE LAST\n         LA    WKB,DATX+8         SET INPUT @ FOR RANGE CHECK\n         LA    WKD,35             LOOP INDEX\nRCVELOOP CLI   0(WKB),C'='        POSSIBLE NODENAME OPERAND?\n         BNE   RCVNEQU            NO\n         SH    WKB,K2             YES - IS IT\n         CLC   0(2,WKB),=X'8984'   LOWERCASE 'ID='\n         BE    RCVIDEQU           YES\n         CLC   0(2,WKB),=C'ID'    UPPERCASE 'ID='\n         BE    RCVIDEQU           YES\nRCVNID   LA    WKB,2(,WKB)        INCR BACK TO '='\nRCVNEQU  LA    WKB,1(,WKB)        INCR INDEX\n         BCT   WKD,RCVELOOP       CHECK NEXT CHAR\n         B     DCHK               NOT FOUND => ASSUME NO ID= FIELD\nRCVIDEQU LA    WKB,3(,WKB)        JUMP 'ID='\n*                                  (WKB POINTS TO NODENAME OPERAND)\nRCVRCHK  LA    R1,1(,WKB)         POINT TO 2ND CHAR OF OPERAND\n         SR    WKC,WKB            CALC. LENGTH REMAINING\n         SR    R2,R2              CLEAR FOR TRT FUNCTION CODE\n         L     WKA,@TRTTAB        LOAD TRT TABLE @\n         EX    WKC,TRTRANG        RANGE OR DELIMITER?\n         BZ    DCHK               NO\n         CH    R2,K1              RANGE NOTATION?\n         BNE   DCHK               NO - MUST BE DELIM\n         LR    WKB,R1             YES - POINT WKB TO RANGE CHAR\n         MVI   RANGEND,C' '        FOUND -\n         OC    RANGEND(1),1(WKB)    SHIFT AND\n         $CALL ATOX,RANGEND          CONVERT TO HEX IN R15\n         LTR   RTNCD,RTNCD        IS IT GOOD?\n         BM    INVINP             NO\n         STH   R15,RANGEND        STORE AS BIN HALFWORD\n         BCTR  WKB,0              BACK UP TO 1ST RANGE CHAR\n         ST    WKB,RANGCHAR        AND STORE PTR\n         LA    WKA,DATX           CALC\n         AR    WKA,MSGLEN          REMAINING\n         LA    WKD,4(,WKD)          CHARS AFTER\n         SR    WKA,WKD               RANGE NOTATION\n         BM    NOMVRANG           IF ANY,\n         EX    WKA,MVRANG           SHIFT LEFT OVER '-N' CHARS\nNOMVRANG SH    MSGLEN,K2          DECREMENT LENGTH ACCORDINGLY\n         OI    POFLAGS,POFRANG    FLAG RANGE FORMAT IN EFFECT\nDCHK     CLI   DATX,X'84' IS IT LOWERCASE 'D'?\n         BE    FLAGD          YES\n         CLI   DATX,C'D'      IS IT 'D'?\n         BE    FLAGD          YES\n         TM    TISTATUS,TISMCAND   MASTER OR CANDIDATE?\n         BO    VALCMD              YES\n*\nINVCMD   LA    WKA,INVALM         SET UP FOR\n         LA    WKB,INVALML         'INVALID FROM ........' MSG\n         MVC   INVALTRM,TINAME    MOVE IN TNAME\n         B     RCV32RMG           RETURN INVALID\nINVINP   LA    WKA,INVALK         SET UP FOR\n         LA    WKB,INVALKL         'INVALID INPUT' MSG\n         B     RCV32RMG           RETURN INVALID\n*\nAIDPF1   EQU   INVINP             PREVIOUSLY CHECKED FOR\nAIDPF3   EQU   INVINP             PREVIOUSLY CHECKED FOR\nAIDPF9   EQU   INVINP             NO CODE YET\n*\nFLAGD    OI    TIFLAGS,TIFDSP FLAG FOR LOG SUPPRESSION (IN CASE NOT ON)\n         OI    POFLAGS,POFDSP  AND SIGNAL DISPLAY TO SENDCMD LOOP\n         TM    TIFLAGS,TIFDSP11  FLAGGED FOR LOGGING VIA PF11?\n         BO    VALCMD            YES - LOG IT\n         TM    TIFLAGS2,TIF2LOGD NO, FLAGGED FOR LOGGING VIA PF2/LOGD?\n         BO    VALCMD            YES - LOG IT\n         B     NAUTCHK           NO - DONT LOG IT\n*\n* PREPARE AND WRITE HARD COPY LOG RECORD.\n*\nVALCMD   L     WKA,RCVSAVE        EX LENGTH FOR MOVE\n         LA    PARM@,DATX         SOURCE PTR FOR MOVE\n         TM    POFLAGS,POFRANG    RANGE FORMAT?\n         BZ    CMDLOG             NO\n         LA    PARM@,TICMD        YES - USE ORIGINAL CMD FORMAT ON LOG\nCMDLOG   $CALL PUTLOG,(PARM@),(WKA)  OUTPUT RECORD\nNAUTCHK  TM    TIFLAGS,TIFNAUT    SUCCESSFUL NO-AUTO RE-ENTRY?\n         BZ    RCV32OK            NO\n         NI    TIFLAGS,255-TIFNAUT YES - RESET NO-AUTO RE-ENTRY FLAG,\n         LH    WKB,TIABRLEN        THEN\n         BCTR  WKB,0                SET UP\n         EX    WKB,MVNAUTAB          NO-AUTO\n         LA    WKB,L'NAUTM+1(,WKB)    RE-DISPLAY\n         LA    WKA,NAUTM               OF ABBREV CMD\n         LA    RTNCD,RCVCMDRS     SET CMD OK AND RESP MSG RETURN CODE\n         B     RCV32RET\nRCV32OK  LA    RTNCD,RCVCMDOK     SET CMD OK RETURN CODE\nRCV32RET L     RPL@,RCVSAVE2      (RESTORE RPL @)\n         $SRET\n*\nTERMEND  OC    DATX+6(3),BLANX FOLD DATA\n         CLC   DATX+6(3),=C'ALL' TERMINATE NETOP?\n         BNE   RCVNOCLS           NO\nTERMALL  TM    TISTATUS,TISMCAND  MASTER OR CANDIDATE TERMINATION?\n         BZ    INVCMD             NO - INVALID\n         $CALL PUTLOG,CLOSMSG,*-1 OUTPUT REC\n         OI    POSTATUS,POSCLSDN  INTERCEPT SOME CLOSE ERRORS    86355\n         POST  ECBMAIN,0          YES - CLOSE DOWN\n         LA    RTNCD,RCVCLOSD     SET CLOSEDOWN CODE\n         B     RCV32RET           RETURN\n*\nRCVNOCLS TM    TISTATUS,TISMA     MASTER TERMINATION?\n         BZ    TERMOK             NO\n         $CALL MAFIND             YES - FIND ALT MASTER\nTERMOK   $CALL CLSDST             CLSDST TERMINAL AND FREE TICB\n         $CALL PUTLOG,OFFMSG,*-1  OUTPUT REC\nRCV32CLD LA    RTNCD,RCVCLDST     RETURN WITH CLSDST CODE\n         B     RCV32RET           RETURN\n*\nHELPOUT  XC    TILNCT,TILNCT      ZERO LINE COUNT\n         NI    TIFLAGS,255-(TIFDSP+TIFDSP11+TIFCLUST) RESET DSP FLAGS\n         OI    TIFLAGS,TIFWTROL   FLAG WAITING FOR ROLL\n         TM    TIFLAGS,TIFHELP    PF2 HELP?\n         BZ    HELPFLAG           NO\n         L     WKA,@HELPM2        SET UP FOR\n         LA    WKB,HELPML2         PF2 HELP MSG\n         USING HELPM2,WKA\n         $HELPF2 ROLL,AUTO,ECHO,SOLO,LOGD\n         DROP  WKA\n         B     RCV32RMG           RETURN RESPONSE MSG\nHELPFLAG OI    TIFLAGS,TIFHELP    FLAG FOR SCREEN CLEAR AFTER HELP\n         L     WKA,@HELPM         SET UP FOR\n         LA    WKB,HELPML           HELP MSG\n         B     RCV32RMG           RETURN RESPONSE MSG\n*\nMVCMD    MVC   TICMD(*-*),DATX       MOVE CMD INTO TICB\nMVINSRT  MVC   DATX(*-*),0(WKA)      INSERT TEXT TO GIVE FULL CMD FMT\nMVABR    MVC   TIABR(*-*),DATX       SAVE ABBR CMD\nORUP     OC    UPPER(*-*),DATX       FOLD UP TO 7 BYTES FOR CLC'S\nMVNAUTAB MVC   NAUTABR(*-*),TIABR    MOVE ABBR INTO NAUTMSG\nMVRANG   MVC   1(*-*,WKB),3(WKB)     SHIFT OVER RANGE NOTATION\nIMPLRMV1 MVC   TBUF+5(*-*),0(WKB)    MOVE REPLY TEXT INTO TBUF\nIMPLRMV2 MVC   DATX(*-*),TBUF        MOVE REPLY CMD BACK INTO DATX\nPF2CLC   CLC   0(*-*,WKB),UPPER      COMPARE PF2 INPUT TO KEYWORDS\nMVLOGINS MVC   0(*-*,WKB),1(WKA)     MOVE REMAINDER AFTER LOGON=\nTRTRANG  TRT   0(*-*,WKB),0(WKA)     SEARCH FOR RANGE NOTATION OR DELIM\nRCVSAVE  DS    F\nRCVSAVE2 DS    F\n         TITLE 'N E T O P - MGCR SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: MGCR                                                          *\n*                                                                     *\n* FUNCTION: TO ISSUE SVC 34 TO SEND AN OS COMMAND                     *\n*                                                                     *\n* ENTRY POINT: MGCR                                                   *\n*                                                                     *\n* INPUT REGISTERS:                                                    *\n*                                                                     *\n*              OS CMD BUFFER      PARM@                               *\n*              SUBROUTINE RETURN  RET@                                *\n*                                                                     *\n*        REGISTERS CHANGED:                                           *\n*                                                                     *\n*        WKA,R0,RTNCD                                                 *\n*                                                                     *\n* CALLED BY: RCV3270, PUTLOG                                          *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nMGCR     $SINIT\n         TM    POSTATUS,POSTEST    RUNNING UNDER TEST?\n         BO    MGCRET              YES - IGNORE REQUEST\n         LR    WKA,PARM@           SAVE CMD PTR\n         MODESET KEY=ZERO          KEY ZERO FOR SVC 34\n         SR    R0,R0               SET ORIGIN\n         LR    PARM@,WKA            AND PARM @\n         SVC   34                  ISSUE OS CMD\n         MODESET KEY=NZERO         RESET KEY\nMGCRET   $SRET                     RETURN\n         TITLE 'N E T O P - TSOUID SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: TSOUID                                                        *\n*                                                                     *\n* FUNCTION: TO CONVERT A TSO USER APPLID INTO THE USERID OR TO        *\n*           CONVERT A VTAM TSO USERID INTO A TERMINAL NAME            *\n*                                                                     *\n* DESCRIPTION:                                                        *\n*        PARM=0 (CALL FROM RCV3270)                                   *\n*              THE VTAM TSB CHAIN IS SEARCHED FOR ASCB->USERID,       *\n*        COMPARING WITH THE INPUT COMMAND IN TIABR.  IF A MATCH IS    *\n*        FOUND THE INPUT COMMAND IS REPLACED BY THE TERMINAL NAME     *\n*        FROM THE TSB.  SUBSEQUENTLY, THE USERID IS INSERTED IN       *\n*        THE REPLY MESSAGE BY SUBROUTINE RCVVTAM.                     *\n*                                                                     *\n*        PARM=APPL INDEX (CALL FROM RCVVTAM)                          *\n*              THE VTAM TSB CHAIN IS SEARCHED FOR TSO APPLID.         *\n*        IF A MATCH IS FOUND THE ASCB PTR IS RETURNED TO ALLOW MSG    *\n*        IST082I TO BE REFORMATTED TO INCLUDE USERID AND ASID.        *\n*                                                                     *\n* ENTRY POINT: TSOUID                                                 *\n*                                                                     *\n* INPUT REGISTERS:                                                    *\n*                                                                     *\n*              PARM               PARM@                               *\n*              TICB PTR           TICB@                               *\n*              ISTDPOHD PTR       DA@                                 *\n*              SUBROUTINE RETURN  RET@                                *\n*                                                                     *\n* OUTPUT:                                                             *\n*         WHEN PARM@=0 -                                              *\n*              RTNCD RETURNED AS 0=OK, 4=AWAITING RECON, 12=NOT FOUND *\n*         WHEN PARM@>0 -                                              *\n*              RTNCD RETURNED AS ZERO OR ASCB PTR                     *\n*                                                                     *\n*        REGISTERS CHANGED:                                           *\n*                                                                     *\n*        WKA,WKB,WKC,WKD,RTNCD                                        *\n*                                                                     *\n* CALLED BY: RCVVTAM, RCV3270                                         *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nTSOUID   $SINIT\n         SR    R9,R9                   ZERO RETURN REG\n         LTR   WKA,PARM@               PARM = 0?\n         BNZ   TSOGETZ                 NO\n         LA    R9,RCVNRMSG         YES - SET DEFAULT UID NOT FOUND RC\nTSOGETZ  MODESET KEY=ZERO              NECESSARY TO LOOK IN TSB\n         LR    PARM@,WKA               RELOAD PARM\n         L     WKA,CVTPTR              LOAD POINTER TO CVT\n         USING CVTMAP,WKA              ESTABLISH ADDRESSABILITY TO CVT\n         L     WKA,CVTTCASP            LOAD POINTER TO TCAS TABLE\n         USING TCAST,WKA               ESTABLISH ADDRESSABILITY 2 TCAST\n         ICM   WKA,15,TCASTSB   LOAD POINTER TO VTAM TSB TABLE   85245\n         BZ    TSORET        NO TSO USERS ON                     85245\n ST WKA,TSOSAVEI\n XC TSOSAVEA(8),TSOSAVEA\n*\n         USING TSB,WKA                 ESTABLISH ADDRESSABILITY TO TSB\nTSOLOOP  ICM   WKB,15,TSBEXTNT         GET ADDRESS OF TSB EXTENSION\n         BZ    TSORET                  IF 0, RETURN (SHOULDNT BUT DOES)\n ST WKB,TSOSAVEB\n         USING TSBX,WKB                ESTABLISH ADDRESSABILITY TO TSBX\n         LTR   PARM@,PARM@             PARM > 0?\n         BNZ   TSBTNAME                YES - TNAME COMPARE\n         L     WKC,TSBASCBA             ELSE USERID COMPARE\n         USING ASCB,WKC                ESTABLISH ADDRESSABILITY TO ASCB\n         L     WKD,ASCBJBNS             AND PICK UP USERID PTR\n         CLC   TIABR(7),0(WKD)         USERID MATCH?\n         BNE   TSONXTSB                NO - GO ON TO NEXT TSB\n         OI    TISTATUS,TISUID         YES - FLAG USERID FOUND\n         LA    R9,RCVCMDOK             SET OK RC\n         TM    TSBXFLG1,TSBXWREC       IS TERMINAL AWAITING RECON?\n         BZ    TSOTRMID                NO\n         LA    R9,RCVRMSG              YES - SET RESPONSE MSG RC\nTSOTRMID MVC   DATX(8),TSBTRMID        COPY TERMINAL NAME\n         MVC   TIABR+8(2),ASCBASID      AND ASID\n         B     TSORET                  RETURN\n*\nTSBTNAME TM    TSBXFLG1,TSBXWREC       IS USER AWAITING RECON?\n         BO    TSONXTSB                NO - GO ON TO NEXT TSB\n         CH    PARM@,TSBXAIND          TCAS TERMINAL ID EQUAL?\n         BNE   TSONXTSB                NO - GO ON TO NEXT TSB\n         L     R9,TSBASCBA             NO - GET ASCB PTR\n         B     TSORET                  YES\nTSONXTSB ICM   WKA,15,TSBXFWD          NO - GET NEXT TSB PTR\n ST WKA,TSOSAVEA\n         BNZ   TSOLOOP                 IF NON-ZERO, GO ANALYSE TSB\nTSORET   MODESET KEY=NZERO             RESET KEY\n         LR    RTNCD,R9                SET RETURN CODE\n         $SRET                         RETURN\nTSOSAVEI DS F\nTSOSAVEA DS F\nTSOSAVEB DS F\n         DROP  WKA,WKB,WKC\n         TITLE 'N E T O P - CLSDST A TERMINAL'\n***********************************************************************\n*                                                                     *\n* NAME: CLSDST                                                        *\n*                                                                     *\n* FUNCTION: TO ISSUE A CLSDST AND FREE THE ASSOCIATED TICB.           *\n*                                                                     *\n* ENTRY POINT: CLSDST                                                 *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              RPL ADDRESS               RPL@                         *\n*              RETURN ADDRESS IN EXIT    RET@                         *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGISTERS     WKA,RTNCD                           *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              RETURN             RET@                                *\n*                                                                     *\n* EXIT,NORMAL: BR RET@                                                *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: UNSTACK TO UNSTACK AND DELETE MESSAGES WHEN TERMINAL IN      *\n*                WAIT-FOR-ROLL CONDITION.                             *\n*                                                                     *\n* CALLED BY: RCV3270,LOGON,LOSTERM,RELREQ                             *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nCLSDST   $SINIT\nCLSCLS   CLSDST RPL=(RPL@),AREA=0,OPTCD=(RELEASE,SYN)\n         LTR   RTNCD,RTNCD        OK?\n         BZ    CLSFREE            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    CLSCLS              THEN RETRY\n*\n* FREE TICB ALLOCATED TO TERMINAL.\n*\nCLSFREE  TM    TISTATUS,TISNOMOR  REJECTED DUE TO NO MORE TICBS?\n         BO    CLSRET             YES - NOTHING TO FREE\n         TM    TISTATUS,TISTACK   NO - STACK OPEN?\n         BZ    CLSINCRF             NO\n         OI    POFLAGS,POFSTDEL     YES - FLAG FOR DELETE\n         $CALL UNSTACK               AND GO DO IT\nCLSINCRF LH    WKA,TICBFCT        INCREMENT\n         LA    WKA,1(,WKA)          FREE\n         STH   WKA,TICBFCT            COUNT\n         TM    TISTATUS,TISMCAND  MASTER OR CANDIDATE TERMINATION?\n         BZ    CLSCLEAR           NO\n         LH    WKA,TICBMCCT       YES - DECREMENT\n         SH    WKA,K1               MASTER CANDIDATE\n         STH   WKA,TICBMCCT           COUNT\nCLSCLEAR XC    TINDICS,TINDICS    CLEAR INDICATORS\n         C     TICB@,TICBLACT     HIGHEST TICB @?\n         BNH   CLSRET             NO\n         LA    WKA,TICBLEN        YES -\n         LA    WKB,NETPTICB        BACK UP\nCLSBACK  SR    TICB@,WKA            TO PREVIOUS ACTIVE TICB @\n         CR    TICB@,WKB          NETOP TICB @ ?\n         BE    CLSRET\n         TM    TISTATUS,TISACT    ACTIVE TICB @ ?\n         BZ    CLSBACK            NO - GO BACK FURTHER\n         ST    TICB@,TICBLACT     YES - SAVE NEW HI-WATER MARK\nCLSRET   $SRET                RETURN\n         TITLE 'N E T O P - ALPHA HEX TO BINARY HEX CONVERSION'\n***********************************************************************\n*                                                                     *\n* NAME: ATOX                                                          *\n*                                                                     *\n* FUNCTION: TO CONVERT A CHARACTER CODE HEX BYTE TO 4 BITS.           *\n*           (COULD HAVE USED TR INST. BUT SHORT OF TABLE SPACE)       *\n*                                                                     *\n* ENTRY POINT: ATOX                                                   *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              POINTER TO CHARACTER      PARM@                        *\n*              RETURN ADDRESS IN EXIT    RET@                         *\n*                                                                     *\n* REGISTERS AT EXIT:                                                  *\n*                                                                     *\n*              BINARY HEX VALUE          RTNCD (R15)                  *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGISTERS     RTNCD,R0                            *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              RETURN             RET@                                *\n*                                                                     *\n* EXIT,NORMAL: BR RET@                                                *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: INBOUND,OUTBOUND                                         *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nATOX     $SINIT\n         SR    RTNCD,RTNCD    PICK UP\n         IC    RTNCD,0(,PARM@) CHARACTER HEX\n         TM    0(PARM@),X'F0' NUMERIC?\n         BO    ATOXNUM        YES\n         MVI   ATOXWK,C' '    NO - FOLD\n         OC    ATOXWK,0(PARM@) POSSIBLE ALPHA CHAR\n         CLI   ATOXWK,C'A'    LESS THAN 'A'?\n         BL    ATOXINV        YES - INVALID\n         CLI   ATOXWK,C'F'    GREATER THAN 'F'?\n         BNH   ATOXCHAR       NO - GOOD HEX CHAR\nATOXINV  LH    RTNCD,ATOX+4   NEITHER - RETURN NEGATIVE VAL\n         B     ATOXRET\nATOXCHAR LA    RTNCD,X'39'(,RTNCD)  NO - INCREMENT TO X'FA' - X'FF'\nATOXNUM  LA    R0,X'0F'       AND OFF\n         NR    RTNCD,R0        HI-ORDER 4 BITS\nATOXRET  $SRET                RETURN HEX VAL IN R15\nATOXWK   DS    X              WORK AREA\n         TITLE 'N E T O P - ALTERNATE MASTER TICB SEARCH'\n***********************************************************************\n*                                                                     *\n* NAME: MAFIND                                                        *\n*                                                                     *\n* FUNCTION: TO SEARCH TICBS FOR ACTIVE MASTER CANDIDATE TO REPLACE AN *\n*        ENDED, LOST OR REQUESTED MASTER TERMINAL.                    *\n*                                                                     *\n* DESCRIPTION: IF AN ACTIVE CANDIDATE IS FOUND IT IS MARKED MASTER,   *\n*        OTHERWISE THE MAINLINE IS POSTED TO CLOSE THE PPO ACB TILL   *\n*        ANOTHER MASTER CANDIDATE LOGS ON.                            *\n*                                                                     *\n* ENTRY POINT: MAFIND                                                 *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              POINTER TO TICB           TICB@                        *\n*              RETURN ADDRESS IN EXIT    RET@                         *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     RPL@                                *\n*              POINTER TO TICB    TICB@                               *\n*              POINTER TO NIB     NIB@                                *\n*              WORK REGISTERS     WKA,WKB                             *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              RETURN             RET@                                *\n*                                                                     *\n* EXIT,NORMAL: BR RET@                                                *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: RELREQ, LOSTERM AND INBOUND(WITH PF3) EXITS              *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nMAFIND   $SINIT\n         L     WKB,@ACBPPO        SET UP BASE FOR ACB\n         TM    ACBOFLGS-IFGACB(WKB),ACBOPEN  IS IT OPEN?\n         BZ    MARET              IF NOT FORGET SEARCH\n         LA    DA@,TBUF          TEMP ISTDPOHD FOR STAT TEST\n         NI    POHSTAT,255-POHGEN     TURN OFF SOLICITED FLAG\n*        DROP  DA@\n         ST    TICB@,MASAVE   SAVE CURRENT TICB PTR\n         $CALL IDFIND,0       BUILD TICB LIST OF MASTER CANDIDATES\n         LTR   RTNCD,RTNCD    FIND ANY?\n         BNZ   NONEWMA        NO - CLOSE PPO AND USE SPO\n         LA    WKB,TICBLIST   LOAD INDEX REG\nMAFLOOP  CLC   @MATICB+1(3),1(WKB) IS THIS MASTER TICB @?\n         BNE   NEWMAFND       NO - MAKE IT NEW MASTER\n         TM    0(WKB),LASTPARM LAST TICB IN LIST?\n         BO    NONEWMA        YES - NO ALTERNATE MASTER FOUND\n         LA    WKB,4(,WKB)    NO - INCREMENT INDEX\n         B     MAFLOOP         AND TRY NEXT TICB\n*\nNEWMAFND L     TICB@,0(WKB)    CHANGE NEW\n         ST    TICB@,@MATICB    MASTER TICB @\n         OI    TISTATUS,TISMA     SET MASTER BIT IN TICB\n         MVC   NTP1NODE,TINAME INFORM OPERATOR\n         $CALL PUTLOG,NTP01MSG OF CHANGE IN MASTER\n         B     MATICBR         RETURN\n*\nNONEWMA  NI    POSTATUS,255-POSHVMA RESET 'HAVE MASTER' FLAG\n         POST  ECBMAIN,2      POST CLOSE OF PPO ACB\nMATICBR  L     TICB@,MASAVE   RESTORE CURRENT TICB PTR\nMARET    $SRET\n*\nMASAVE   DS    F\n         TITLE 'N E T O P - IDFIND SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: IDFIND                                                        *\n*                                                                     *\n* FUNCTION: TO DETERMINE, FROM THE PO HEADER, WHAT TERMINAL A         *\n*        MESSAGE IS TO GO TO.                                         *\n*                                                                     *\n* DESCRIPTION: IF MESSAGE GENERATED BY VTAM, RETURNS LIST OF          *\n*        MASTER TERMINAL TICB'S. IF MESSAGE GENERATED BY PO, SEARCHES *\n*        TICBPOOL FOR AN ACTIVE TERMINAL WITH THE ID IN THE PO        *\n*        HEADER. IF FOUND, RETURNS THE ADDRESS OF THAT TICB. IN ANY   *\n*        CASE, INDICATES IN THE RETURN CODE WHETHER DESTINATION WAS   *\n*        DETERMINED OR NOT.                                           *\n*                                                                     *\n* ENTRY POINT: IDFIND                                                 *\n*                                                                     *\n* INPUT REGISTERS:                                                    *\n*                                                                     *\n*            PARM                 PARM@   0=SELECT  1=ALL TICBS       *\n*            ADDRESS OF ISTDPOHD  DA@                                 *\n*            SUBROUTINE RETURN    RET@                                *\n*        OTHERS IGNORED                                               *\n*                                                                     *\n* OUTPUT: TICBLIST CONTAINS APPROPRIATE TICB PTRS                     *\n*        RETURN CODE IN REGISTER 15:  0 = FOUND                       *\n*                                     4 = NOT FOUND                   *\n*                                                                     *\n*        REGISTERS CHANGED:                                           *\n*                                                                     *\n*              ADDRESS OF TICB    TICB@                               *\n*              WKA,WKB            USED AS WORK REGISTERS              *\n*              RTNCD              CONTAINS RETURN CODE                *\n*                                                                     *\n* CALLED BY: OUTBOUND                                                 *\n*                                                                     *\n* EXIT, NORMAL: BR 10                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*        SUBROUTINE INTERNAL TO OUTBOUND EXIT                         *\n*                                                                     *\n***********************************************************************\n*\nIDFIND $SINIT\n*\n* SEARCH TICB POOL FOR ACTIVE TICB WITH THIS ID.\n*\n         SR    RTNCD,RTNCD        ZERO ORIGIN TICB INDICATOR\n         LA    WKD,TICBLIST-4     SET TICBLIST INDEX\n         LR    R0,WKD             SAVE FOR COMPARISON\nIDSTART  LA    TICB@,TICBS+TICBLEN  LOOP INDEX (IGNORE NETOP TICB)\n         LA    WKA,TICBLEN        INCREMENT\n         L     WKB,TICBLACT       COMPARAND - LAST ACTIVE TICB\nIDLOOP   TM    TISTATUS,TISACT    IS TERMINAL ACTIVE?\n         BZ    IDTEST             NO - FORGET THIS ONE\n         CLI   POHTID,0           RESP TO NETOP INTCMD?\n         BE    IDMCHK             YES\n         TM    POSTATUS,POSECHO   NO - SHOULD THIS MSG BE ECHOED?\n         BZ    IDSOLCHK             NO\n         TM    TIFLAGS2,TIF2ECHO  SUPPRESS ECHOING TO THIS TERMINAL?\n         BO    IDTEST             YES - BYPASS THIS TICB\n         CR    TICB@,RTNCD        IS THIS THE ORIGIN TICB?\n         BE    IDTEST               YES - BYPASS (ALREADY IN TICBLIST)\n         B     IDMCHK\nIDSOLCHK TM    POHSTAT,POHGEN       NO - SOLICITED MESSAGE?\n         BO    IDSOLC                 YES\n         LTR   PARM@,PARM@        PARM > 0 (BROADCAST)\n         BNZ   IDUSE              YES - SEND TO ALL TERMINALS\n         TM    TIFLAGS2,TIF2SOLO  ONLY SOLICITED MSGS TO TERMINAL?\n         BO    IDTEST             YES - BYPASS THIS TICB\nIDMCHK   EQU   *                  ECHO UNSOLICITED MSGS TO ALL TERMS\n*DMCHK   TM    TISTATUS,TISMCAND  IS TERMINAL MASTER CANDIDATE?\n*        BZ    IDTEST             NO\nIDUSE    LA    WKD,4(,WKD)        YES - UPDATE TICBLIST INDEX\n         ST    TICB@,0(WKD)       SAVE PTR IN TICBLIST\n         B     IDTEST\nIDSOLC   CLC   POHTID,TID         ID = TICB ID?\n         BNE   IDTEST             NO - TRY NEXT TICB\n*\n*        IF MCANDT NON-DISPLAY RESPONSE, ECHO TO ALL MCANDTS\n*\n         TM    TIFLAGS,TIFDSP     RESP. TO DISPLAY CMD?\n         BO    IDFOUND            YES\n         CLC   TICBMCCT,K1        ONLY 1 MASTER LOGGED ON?\n         BNH   IDFOUND            YES - NOBODY TO ECHO TO\n         OI    POSTATUS,POSECHO   NO - FLAG THIS MSG TO BE ECHOED,\n         MVC   DUMTICB(TICOPYL),TICB  COPY PARTIAL TICB\n         LR    RTNCD,TICB@         SAVE ORIGIN @\n         ST    TICB@,@ECHTICB       IN\n         ST    TICB@,TICBLIST        3 PLACES\n         LA    TICB@,DUMTICB       POINT TO COPY\n         LA    R1,IDSTART         SET CONTINUE ADDRESS\nIDINSCHG LH    WKA,TICMDLEN        GET CMD LEN\n         LH    WKD,TINAMLEN         INCR BY NODENAME LEN,\n         LA    WKB,4(WKD,WKA)       AND ' => '\n         CH    WKB,=H'40'          LENGTH > TICMD AREA?\n         BNH   IDSTCMDL            NO\n         LH    WKB,=H'40'          YES - USE MAX LENGTH\nIDSTCMDL STH   WKB,TICMDLEN        STORE IN TICB\n         LA    WKB,TICMD(WKD)      POINT AFTER NODENAME INSERT AREA\n         SH    WKA,K1              DECR CMD LEN\n         BNM   IDMV1               IF < 0,\n         SR    WKA,WKA              RESET TO 0\nIDMV1    EX    WKA,IDMVCMD1        MOVE OUT CMD\n         SH    WKD,K1              DECR NODENAME LEN\n         BNM   IDMV2               IF < 0,\n         SR    WKD,WKD              RESET TO 0\nIDMV2    EX    WKD,IDMVNAM         MOVE IN NODENAME, FOLLOWED BY\n         MVC   0(4,WKB),=C' => '     ARROW, THEN\n         EX    WKA,IDMVCMD2        MOVE BACK CMD PAST INSERT\n         LA    WKD,TICBLIST        POINT AFTER ORIGIN TICB FOR RESCAN\n         BR    R1                 THEN GO REGENERATE TICB LIST IF ECHO\n*                                  OR RETURN IF INTCMD RESPONSE\nIDTEST   BXLE  TICB@,WKA,IDLOOP   LOOP BACK TILL ALL ACT TICBS CHECKED\n         CR    R0,WKD             ANY TICBS FOUND?\n         BE    IDNFOUND           NO\n         OI    0(WKD),LASTPARM    YES - FLAG LAST TICB @\n         TM    POHSTAT,POHGEN     SOLICITED MESSAGE?\n         BO    IDSOLOK            YES\n         LA    TICB@,VTAMTICB     NO - USE VTAM TICB SO LOG LOOKS GOOD\n         B     IDRET\nIDSOLOK  L     TICB@,0(WKD)       YES - PUT LAST TICB FOUND IN TICB@\n         CLI   POHTID,0           RESP TO NETOP INTCMD?\n         BNE   IDORGCHK           NO\n         LA    WKA,NETPTICB       YES -\n         MVC   TIFLAGS-TICB(1,WKA),TIFLAGS  COPY FLAGS\n         LR    TICB@,WKA          PUT NETOP TICB @ IN TICB@\n         LA    R1,IDRET0          SET CONTINUE ADDRESS\n         CLC   TINAME(5),TICMD    'NETOP => ' ALREADY INSERTED?\n         BNE   IDINSCHG           NO - GO INSERT ORIGIN IN TICMD\n         B     IDRET0             YES - RETURN\nIDORGCHK LTR   RTNCD,RTNCD        ORIGIN TICB @ SAVED?\n         BZ    IDRET0             NO\n         LR    TICB@,RTNCD        YES - PUT ORIGIN TICB @ IN TICB@\n         B     IDRET0\nIDNFOUND TM    POHSTAT,POHRREQ    IS REPLY REQUESTED\n         BZ    IDRET4             NO\n         TM    POSTATUS,POSHVMA   IS THERE A MASTER?\n         BO    IDEFAULT           YES - USE IT\nIDRET4   LA    RTNCD,4            NO - RETURN NOT FOUND\n         B     IDRET              RETURN\nIDEFAULT L     TICB@,@MATICB      DEFAULT IS MASTER\nIDFOUND  ST    TICB@,TICBLIST\n         OI    TICBLIST,LASTPARM   FLAG LAST TICB PTR\nIDRET0   SR    RTNCD,RTNCD        INDICATE FOUND\nIDRET    $SRET                    RETURN\n*\nIDMVCMD1 MVC   TBUF(*-*),TICMD MOVE CMD OUT\nIDMVCMD2 MVC   4(*-*,WKB),TBUF MOVE CMD BACK IN\nIDMVNAM  MVC   TICMD(*-*),TINAME  INSERT SOURCE NODENAME\n         TITLE 'N E T O P - MESSAGE LOG SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* ENTRY: PUTLOG                                                       *\n*                                                                     *\n* FUNCTION: TO TIME STAMP AND ISSUE LOG MESSAGES                      *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              EX LENGTH,  MESSAGE PTR             PARM@              *\n*                 LENGTH IS BYTE 0  (IF ZERO, WTO ASSUMED)            *\n*                 MSG PTR IS BYTES 1-3                                *\n*              RETURN ADDRESS IN EXIT              RET@               *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGISTERS     WKA,WKB,WKD (WKC AVOIDED - ACB@)    *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: EVERYONE, MOSTLY                                         *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\nPUTLOG   $SINIT\n         LR    WKA,PARM@      SAVE PARM\n*\n*        I/O TO VTAMLOGO HAS BEEN DISABLED SINCE WE ARE GETTING A 001\n*        ABEND THAT I DON'T HAVE TIME TO FIX. ALL MESSAGES ARE\n*        WRITTEN TO SYSLOG AND ARE AVAILABLE USING QUEUE.\n*\n*        PUT   VTAMLOGO       GET BUFFER PTR (DISABLED)\n         LA    R1,LOGBUF      SET UP R1 WITH BUFFER ADDR (EQU PUT)\n         LR    LOG@,R1        SAVE IT\n         USING LOGREC,LOG@\n         LR    PARM@,WKA      RESTORE PARM\nPUTCLR   MVI   LOGASA,C' '    SINGLE SPACING\n         MVC   LOGWTLHD,BLANX CLEAR WTL PAD (FOR SYSLOG READABILITY)\n         MVC   LOGBL1,BLANX   CLEAR\n         MVC   LOGBL2,BLANX    PREFIX\n         STCM  PARM@,8,HEX    STORE LENGTH BYTE\n         SR    WKA,WKA        INSERT\n         ICM   WKA,1,HEX       LENGTH\n         BZ    PUTWTO         IF ZERO, ASSUME WTO BUFFER\n         C     WKA,=AL4(133-(LOGPRFL+1)) MAX RECORD LENGTH?\n         BNH   *+12           NO => USE SPECIFIED LENGTH\n         L     WKA,=AL4(133-(LOGPRFL+2)) YES=>SET MAX LENGTH - 1\n         MVI   LOGCONT,C'+'         AND SET TRUNCATE CHAR IN RECORD\n         MVC   LOGNODE,TINAME INSERT TERMINAL NAME\n         EX    WKA,PUTLOGMV   MOVE MSG TO LOG OUTPUT AREA\n         LA    WKA,LOGPRFL+1(WKA)  CALC RDW LL VALUE\n         B     PUTRDW         GO STORE IN LOGREC\n*\nPUTWTO   LH    WKA,0(PARM@)   PICK UP LENGTH\n         LR    WKB,WKA        COPY IT\n         SH    WKB,K5         REDUCE BY WTO PREFIX LENGTH +1 FOR EX\n         EX    WKB,PUTWTOMV   MOVE MSG TO LOG OUTPUT AREA\n         WTO   MF=(E,(1))     DO WTO (OR TPUT)\n         OI    POFLAGS,POFWTO FLAG WTO DONE FOR WTL CHECK\n         LA    WKA,LOGTIML(WKA)  CALC RDW LL VALUE\n*\nPUTRDW   SLL   WKA,16         SHIFT TO HI END\n         ST    WKA,LOGRDW     STORE IN RDW\n         TIME\n         SRL   R0,4           NO CENTISECS\n         STM   R0,R1,WORK     STORE TIME AND DATE\n         OI    WORK+3,X'0F'   OVERLAY DECISECS WITH VALID SIGN\n         MVC   TBUF(10),=X'402120204B21204B2120'\n         ED    TBUF(10),WORK  EDIT TIME FIELD\n         MVC   LOGTIME,TBUF+2 MOVE TIME TO LOG MSG\n         MVC   SENDTIME,TBUF+2 MOVE TIME TO MSG\nPUTLNCT  LH    WKA,LOGLN#     INCREMENT\n         LA    WKA,1(,WKA)     LINE COUNT\n         CH    WKA,PAGESIZE   END OF PAGE?\n         BL    PUTNPAGE       NO\n         MVI   LOGASA,C'1'    YES - SET ASA FOR SKIP,\n         L     WKD,LOGHDR     GET FULL LENGTH RDW\n         LR    WKA,WKD        COPY IT\n         SRL   WKA,16         SHIFT TO LO HALF\n         SH    WKA,LOGRDW     CALC REMAINING LENGTH\n         SH    WKA,K12        SUBTRACT 10 FOR DATE TEXT AND 2 FOR EX\n         BM    PUTLNCT1       <0 => WILL OVERLAY MSG DATA => SKIP DATE\n         LR    WKB,LOG@       CALCULATE START OF\n         AH    WKB,LOGRDW      UNCLEARED AREA\n         ST    WKD,LOGRDW     STORE NEW RDW IN BUFFER\n         MVI   0(WKB),C' '    CLEAR\n         EX    WKA,PUTCLRMV    REMAINDER OF RECORD\n         MVC   LOGDLIT,=C'DATE '  ADD DATE\n         UNPK  LOGDATE,DATE+1(3)   FIELD TO RECORD\nPUTLNCT1 LH    WKA,LOGPG#     INCREMENT\n         LA    WKA,1(,WKA)     PAGE COUNT\n         CH    WKA,EOFPGCNT   TIME TO WRITE EOF?\n         BL    PUTPGCNT       NO\n         CLOSE (VTAMLOGO)     YES - CLOSE,\n         OPEN  (VTAMLOGO,OUTPUT)  AND RE-OPEN MOD\n         SR    WKA,WKA        ZERO PAGE COUNT\nPUTPGCNT STH   WKA,LOGPG#     SAVE NEW PAGE COUNT\n         SR    WKA,WKA        ZERO LINE COUNT\nPUTNPAGE STH   WKA,LOGLN#     SAVE NEW LINE COUNT\n         PUT   SYSPRINT,(LOG@)  PRINT RECORD FROM VTAMLOGO BUFFER\n         TM    POSTATUS,POSSEND SEND TO TSO USERS?\n         BZ    PUTDTCHK       NO\n         NI    POSTATUS,255-POSSEND YES - RESET FLAG,\n         AIF   ('&SENDLST' EQ '').NONSEND\n         MVC   SENDUTXT,LOGTXT       MOVE TEXT TO CMD BUFFER\n         $CALL MGCR,SENDUBUF          AND SEND IT\n.NONSEND ANOP  ,\nPUTDTCHK CLC   DATE+3(1),WORK+7  HAS DATE CHANGED?\n         BE    PUTWTL            NO - CONTINUE\n         MVC   DATE+1(3),WORK+5  YES - SAVE NEW DATE\n         CLI   STTIME,X'22'   ARE THERE MORE THAN 2 HOURS OF LOG?\n         BNL   PUTWTL         NO - DONT BOTHER TO SPINOFF\n         $CALL PRLOG          YES - RE-INITIALIZE LOG, SPINOFF SYSPRINT\n*\n*         FOLLOWING CODE SUPPORTS WTL FUNCTION\n*\nPUTWTL    TM    POFLAGS,POFWTO WTO ALREADY DONE?\n          BO    PUTWTLSK       YES - SKIP WTL\n          WTL   MF=(E,LOGREC) WRITE TO LOG\nPUTWTLSK  NI    POFLAGS,255-POFWTO  RESET FLAG\nPUTRET   $SRET                   RETURN\n*                                                                     *\nPUTLOGMV MVC   LOGMSG(*-*),0(PARM@)\nPUTWTOMV MVC   LOGNODE(*-*),4(PARM@)\nPUTCLRMV MVC   1(*-*,WKB),0(WKB)\n         TITLE 'N E T O P - SYSPRINT ALLOC,OPEN,CLOSE'\n***********************************************************************\n*                                                                     *\n* ENTRY: PRLOG                                                        *\n*                                                                     *\n* FUNCTION: TO INITIALIZE OR RE-INITIALIZE SYSPRINT                   *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              RETURN ADDRESS IN EXIT              RET@               *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGISTERS     WKA,WKB                             *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: MAINLINE, PUTLOG                                         *\n*                                                                     *\n* ATTRIBUTES: INTERNAL SUBROUTINE                                     *\n*                                                                     *\n***********************************************************************\nPRLOG    $SINIT\n         TM    SYSPRINT+48,X'10' SYSPRINT OPEN?\n         BZ    PRLOGOAL        NO\n         CLOSE (SYSPRINT)      YES - CLOSE TO SPINOFF AND REALLOC\n         CLOSE (VTAMLOGO)      CLOSE, THEN RE-INITIALIZE -\n         XC    WORK,WORK       CLEAR AND\n         MVC   WORK+6(2),DATE+2 MOVE IN DAY #\n         CVB   WKA,WORK        CONVERT\n         D     WKA,K2          DIVIDE BY 2\n         LTR   WKA,WKA         IF REMAINDER ZERO,\n         BZ    PRLOPENV         GO RE-OPEN DISP=MOD\n         OPEN  (VTAMLOGI,OUTPUT) ELSE RE-OPEN VTAMLOG DISP=OLD\n         CLOSE (VTAMLOGI)      CLOSE TO WRITE EOF\n         B     PRLOPENV        GO RE-OPEN DISP=MOD\n*                              MUST BE INITIALIZATION\nPRLOGOAL $DYNAL LGOTUPF,VERB=2 FREE F(VTAMLOGO)\n         $DYNAL LGOTUP,VERB=1 ALLOC F(VTAMLOGO) DA('SYS1.VTAMLOG') MOD\n         BZ    PRLOGIAL       YES\n         CLC   S99ERROR,=X'0410' NO - DDNAME ALREADY IN USE?\n         BE    PRLOGIAL            YES - ASSUME OK\n         $AB   99                  NO - ABEND\nPRLOGIAL $DYNAL LGITUP,VERB=1 ALLOC F(VTAMLOGI) DA('SYS1.VTAMLOG')\n         BZ    PRLOPENV       YES\n         CLC   S99ERROR,=X'0410' NO - DDNAME ALREADY IN USE?\n         BE    PRLOPENV            YES - ASSUME OK\n         $AB   99                  NO - ABEND\nPRLOPENV OPEN  (VTAMLOGO,OUTPUT) OPEN VTAMLOG DISP=MOD\n         TM    VTAMLOGO+48,X'10' LOG OPEN?\n         BZ    PRLNOPEN        NO\n         $DYNAL PRTUP,VERB=1  ALLOC F(SYSPRINT) SYSOUT(A) (FREE=CLOSE)\n         BZ    PRLOPENS       YES\n         CLC   S99ERROR,=X'0410' NO - DDNAME ALREADY IN USE?\n         BE    PRLOPENS            YES - ASSUME OK\n         $AB   99                  NO - ABEND\nPRLOPENS OPEN  (SYSPRINT,OUTPUT)\n         TM    SYSPRINT+48,X'10' OK?\n         BO    PRLHDR          YES\n         MVC   NTP08DDN,SYSPRINT+40  MODIFY DDNAME IN MSG\nPRLNOPEN WTO   MF=(E,NTP08MSG)   INFORM OPERATOR\n         $AB   19,NODUMP         AND ABEND U19\nPRLHDR   UNPK  LOGHDRDT,DATE+1(3) MOVE DATE TO HEADER\n         PUT   SYSPRINT,LOGHDR   PRINT HEADER\n         PUT   SYSPRINT,LOGSKP    AND SKIP 2 LINES\n         MVC   LOGLN#,K3      SET LINE COUNT\n*\n*        VTAMLOGO HAS BEEN DISABLED\n*\n*        PUT   VTAMLOGO       GET BUFFER PTR\n*        MVC   0(125,R1),LOGHDR  INSERT HEADER\nPRLRET   $SRET\n         TITLE 'N E T O P - SND3270 SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: SND3270 SUBROUTINE                                            *\n*                                                                     *\n* FUNCTION: INSERT 3270 ORDERS INTO A MESSAGE FROM VTAM. UPDATE       *\n*        THE SCREEN LINE POINTER, SEND MESSAGE TO MULTIPLE TERMINALS. *\n*                                                                     *\n* DESCRIPTION: THIS ROUTINE MOVES THE MESSAGE TEXT TO SENDTXT AND     *\n*            AND INSERTS THE 3270 ORDERS INTO SENDORDR.               *\n*            THIS ROUTINE USES A TABLE OF SCREEN ADDRESSES AT         *\n*            LABEL LINE1 TO MAINTAIN A ROLLING OUTPUT AREA OF LINEMAX *\n*            LINES AND UPDATES THE CURRENT OUTPUT LINE POINTER        *\n*            TILNCT IN THE TICB.  IF IN NOROLL MODE, STACK IS CALLED  *\n*            TO STACK THE LINE.  WHEN A PA KEY IS EVENTUALLY HIT,     *\n*            RCV3270 CALLS UNSTACK WHICH IN TURN CALLS SND3270 FOR    *\n*            EACH LINE UNTIL A FULL SCREEN CONDITION ARISES OR ALL    *\n*            STACKED LINES ARE DISPLAYED.                             *\n*                                                                     *\n* ENTRY POINT: SND3270                                                *\n*                                                                     *\n*       AT ENTRY:                                                     *\n*                                                                     *\n*              TICBLIST CONTAINS TICB PTRS TO TARGET TERMINALS        *\n*              ISTDPOHD OR STKEL CONTAINS MSG                         *\n*              MSGLEN CONTAINS LENGTH-1                               *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              BASE FOR TICB      TICB@                               *\n*              ADDRESS OF ISTDPOHD  DA@                               *\n*              MSG LENGTH-1       MSGLEN                              *\n*              WORK REGS          WKA,WKB                             *\n*              SUBROUTINE RETURN  RET@                                *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 4                                                   *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: STACK TO STACK MESSAGES WHEN TERMINAL IN WAIT-FOR-ROLL COND. *\n*                                                                     *\n* CALLED BY: OUTBOUND EXIT, UNSTACK                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nSND3270 $SINIT\n         USING STKEL,STKEL@   STACK ELEMENT ADDRESSING (SET IN UNSTACK)\n         PRINT NOGEN\n         MODCB AM=VTAM,       SET UP RPL FOR SEND(S)                   *\n               RPL=(RPL@),                                             *\n               ACB=ACBTERMS,                                           *\n               POST=SCHED,                                             *\n               OPTCD=SYN,                                              *\n               RESPOND=(EX,FME,NRRN)\n         PRINT NOGEN\n         ST    MSGLEN,SNDSAVE     SAVE LENGTH\n         SR    TICB@,TICB@        ZERO HI BYTE\n         LA    OUTX,TICBLIST-4    SET UP INDEX\nSNDLOOP  LA    OUTX,4(,OUTX)      INCREMENT TICBLIST INDEX\n         ICM   TICB@,7,1(OUTX)    GET 1ST TICB PTR\n         BZ    SNDEND             RETURN IF NO TICB PTRS\n         L     MSGLEN,SNDSAVE     RESTORE CURRENT MSG LEN\n         TM    POSTATUS,POSMLTSN  MULTIPLE SEND?\n         BZ    SNDNMLT            NO\n         TM    POSTATUS,POSINSRT  ACCEPTED/FAILED MSG?\n         BZ    SNDSETA            NO - DONT INSERT\n         TM    POSTATUS,POSECHO   ECHOED RESPONSE?\n         BO    SNDECHO            YES - GO DO INSERTION\n         B     SNDSETA            NO - BYPASS MSG EDIT AND MOVE\nSNDNMLT  MVC   SENDAT2(4),UNSENDAT  RE-INIT ATTRS\n         MVI   SENDAT1,LO         INIT LO-INTENS ATTR\n         MVI   SENDTXT,C' '       CLEAR SEND RECORD TO BLANKS\n         MVC   SENDTXT+1(L'SENDTXT-1),SENDTXT\n         TM    POFLAGS,POFUNSTK   UNSTACKING?\n         BZ    SNDLCHK            NO\n         LA    WKD,UNSENDSL-1     YES - (UNSTACK RETURNS L-1)\n         CR    WKD,MSGLEN             UNSEND TYPE MSG?\n         BNE   SNDSTOK                NO\n         MVC   UNSENDTM(UNSENDSL),STKDATA  YES - MOVE IN STACKED MSG\n         MVC   UNSENDAD,SENDADDR   AND LAST USED ADDR\n         MVC   TIUNADDR,SENDADDR  SAVE FOR 1ST NONSTACK UNSOL REPEATER\n         LA    WKA,UNSEND         LOAD MSG PTR\n         LA    WKB,UNSENDL        LOAD MSG LENGTH\n         B     SNDSEND             AND SEND TO SAME LINE ON SCREEN\nSNDSTOK  EX    MSGLEN,SNDMV2      MOVE MSG FROM STACK AREA\n         B     SNDSETA\n*\nSNDLCHK  LA    WKA,L'SENDTXT      COMPARE WITH\n         CR    MSGLEN,WKA          TEXT AREA LENGTH\n         BL    SNDMVMG            IF LOW, OK\n         BE    SNDMVDSH           IF HI,\n         LA    MSGLEN,1(,WKA)      USE MAX LENGTH\nSNDMVDSH MVC   SENDAT2+1,=C' --'  BLANK ATR2, DASH SF,ATR3\nSNDMVMG  EX    MSGLEN,SNDMV1      COPY MESSAGE INTO SND3270 BUFFER\n         TM    POHSTAT,POHGEN     SOLICITED?\n         BO    SNDHICK            YES\n         MVI   SENDAT1,HI         SET HI-INTENS ATTR\n         B     SNDSETA\nSNDHICK  TM    POFLAGS,POFHINT    MAKE THIS ONE HI INTENSITY?\n         BZ    SNDCLIN            NO\n         MVI   SENDAT1,HI         YES - SET HI-INTENS ATTR\n         NI    POFLAGS,255-POFHINT  AND RESET FLAG\nSNDCLIN  CLC   DAMSGRSP,=C'ACCEPT' IST097 ....  ACCEPTED MSG?\n         BE    SNDINS1            YES\n         TM    TIFLAGS,TIFDSP     DISPLAY IN PROGRESS?\n         BZ    SNDSETA            NO\n         CLC   DAMSGFAI,=C'IGNORE' IST0XX ....  IGNORED MSG?\n         BE    SNDNDSP            YES\n         CLC   DAMSGRSP,=C'FAILED' IST0XX ....  FAILED MSG?\n         BE    SNDNDSP            YES\n         CLC   DAMSGFAI,=C'FAILED' IST0XX ....  FAILED MSG?\n         BNE   SNDSETA            NO\n*                                 YES - RESET FLAGS AND COUNT, SINCE\n*                                  THERE WILL BE NO NULL MSG TO TRIGGER\n*                                  THE RESET IN OUTBOUND\nSNDNDSP  LH    WKA,TIDSPCT        DISPLAY IS COMPLETE\n         SH    WKA,K1             DECREMENT OUTSTANDING DISPLAY COUNT\n         BM    SNDRSTDC      IF -VE SOMETHING WENT WRONG - DONT UPDATE\n         STH   WKA,TIDSPCT          ELSE STORE IT\n         BP    SNDINS1            IF ZERO,\nSNDRSTDC NI    TIFLAGS,255-(TIFDSP+TIFDSP11+TIFCLUST) RESET DSP FLAGS\n*\nSNDINS1  OI    POSTATUS,POSINSRT  SET INSERT FLAG (SCOPE = SND3270)\nSNDECHK  TM    POSTATUS,POSECHO   ECHOED RESPONSE?\n         BO    SNDECHO            YES\n         CLI   POHTID,0           NETOP TICB ID?\n         BNE   SNDNINT            NO - NOT POFINTCM RESPONSE\n         LA    TICB@,NETPTICB     YES - USE NETOP TICB FOR CMD INSERT\n         B     SNDNINT\nSNDECHO  C     TICB@,@ECHTICB     IS THIS THE SOURCE TICB?\n         BE    SNDNINT            YES\n         LA    TICB@,DUMTICB      NO - USE DUMMY TICB FOR CMD INSERT\n         NI    POSTATUS,255-POSINSRT TURN OFF TO PREVENT RE-INSERTION\nSNDNINT  LH    WKA,TICMDLEN       PICK UP LAST CMD LEN\n         LA    WKB,L'SENDTXT      INSERT\n         SR    WKB,WKA             CMD INTO\n         CR    WKB,MSGLEN           SEND AREA,\n         BH    SNDROOM               RIGHT JUSTIFIED\n         LR    WKD,MSGLEN\n         LR    R15,WKD\n         SR    WKD,WKB                 TRUNCATED\n         SR    WKA,WKD                  IF NECESSARY,\n         BNP   SNDRLTB                   (UNLESS NO ROOM)\n         LR    WKB,R15                    TO AVOID\nSNDROOM  BCTR  WKA,0                       OVERLAYING\n         LA    WKB,SENDTXT(WKB)             REPLY\n         EX    WKA,SNDMVCMD                  TEXT\n         MVI   0(WKB),SF          HI-INTENSITY\n         MVI   1(WKB),HI           INSERTION\n         LA    MSGLEN,L'SENDTXT+1 SET UP FULL TEXT LENGTH IN CASE STACK\nSNDRLTB  L     TICB@,0(,OUTX)     RESTORE TICB @ IN CASE MODIFIED\nSNDSETA  LH    WKA,TILNCT         LOAD CURRENT LINE NUMBER\n         LR    WKB,WKA            DUP CURRENT LINE NUMBER\n         SLA   WKB,1              MULT BY TWO\n         LA    WKB,LINE1(WKB)     CURRENT BUFFER ADDRESS PTR\n         MVC   SENDADDR,0(WKB)    SET UP BUFFER ADDRESS\n         TM    POFLAGS,POFUNSTK   UNSTACKING?\n         BO    SNDINCR            YES\n*\nSNDSCHK  TM    POHSTAT,POHGEN     SOLICITED?\n         BZ    SNDUNCK            NO - GO CHECK FOR REPEATER\n         NI    TIFLAGS,255-TIFUNSOL YES - RESET LAST DISPLAYED MSG FLAG\nSNDRCHK  TM    TIFLAGS,TIFWTROL   WAITING FOR ROLL?\n         BZ    SNDINCR            NO\n         LA    MSGLEN,11(,MSGLEN) YES - INCREMENT FOR TIME FIELD\n         $CALL STACK,SENDTIME,(MSGLEN)  YES - STACK MESSAGE\n         B     SNDSTKED      CHECK FOR 'STACKED' MESSAGE         87109\n*\nSNDUNCK  CP    UNSOL#,KP1         REPEAT COUNT ZERO?\n         BH    SNDTUCK            NO - REPEATER\nSNDFLUN  OI    TIFLAGS,TIFUNSOL   YES - FLAG LAST DISPLAYED MSG,\n         MVC   TIUNADDR,SENDADDR   SAVE 3270 BUFAD,\n         B     SNDRCHK             AND GO CHECK FOR ROLL\nSNDTUCK  TM    TIFLAGS,TIFUNSOL   IS LAST DISPLAYED MSG UNSOL?\n         BZ    SNDFLUN            NO - GO FLAG IT NOW\n         TM    TIFLAGS,TIFHELP    HELP SCREEN DISPLAYED?\n         BO    SNDRCHK            YES - SUPPRESS SHORT UNSOL MSGS\n         MVC   UNSENDTM,SENDTIME   MOVE TIME FIELD TO GIVE LATEST TIME\n         UNPK  UNSEND#,UNSOL#     UNPACK UNSOL COUNT\n         OI    UNSEND#+1,X'F0'    FIX UP SIGN\n         MVC   UNSENDAD,TIUNADDR  YES - SET UP SHORT UNSOL. MSG\n         LA    WKA,UNSEND         LOAD MSG PTR\n         LA    WKB,UNSENDL        LOAD MSG LENGTH\n         TM    TIFLAGS,TIFWTROL   WAITING FOR ROLL?\n         BZ    SNDSEND            NO - SEND TO SAME LINE ON SCREEN\n         $CALL STACK,UNSENDTM,UNSENDSL YES - STACK MESSAGE,\nSNDSTKED TM    TIFLAGS3,TIF3MCNT  SHOW STACKED COUNT ?           87109\n         BNZ   SNDSTKSN      YES                                 87109\n         CP    KP1,TISTKCT   FIRST STACKED MESSAGE ?             87107\n         BNE   SNDOK         NO; PREVENT SCREEN FLICKER          87107\n         MVI   STKMCT+L'STKMCT-1,C' '  CHANGE TO NON-SPECIFIC    87109\nSNDSTKSN NI    TIFLAGS3,255-TIF3MCNT  RESET UPDATE FLAG          87109\n         B     SNDSEND               THEN OUTPUT NEW STACK COUNT\n*\nSNDINCR  LA    MSGLEN,SENDL       LOAD FULL LENGTH\n         CLI   SENDAT3,C'-'       3RD ATTR DASHED?\n         BNE   SNDLOK             NO\n         SH    MSGLEN,K2          YES - DECR BY LENGTH OF MISSING SFS\nSNDLOK   LA    WKA,1(,WKA)        INCR CURRENT LINE NUMBER\n         CH    WKA,LINEMAX        ARE WE PAST END?\n         BH    SNDLAST            YES\n         LA    MSGLEN,SENDSEPL(,MSGLEN)  ADD LENGTH OF SEPARATOR\n         B     SNDSETL\nSNDLAST  SR    WKA,WKA            RESET TO LINE ONE\n         TM    TIFLAGS2,TIF2ROLL  ROLL MODE?\n         BO    SNDSETL            YES\n         OI    TIFLAGS,TIFWTROL   NO - SET WAITING FOR ROLL FLAG\nSNDSETL  STH   WKA,TILNCT         UPDATE CURRENT LINE #\n*\n* ISSUE SEND TO TRANSMIT THE MESSAGE.\n*\n         LA    WKA,SENDORDR       LOAD DEFAULT AREA PTR\n         LR    WKB,MSGLEN         LOAD DEFAULT MSG LENGTH\nSNDSEND  L     R15,TICID          LOAD CID FOR ADDRESSED TERMINAL\n         OI    RPLRH3,RPLBB+RPLEB  RESET BRACKETS FOR CONTENTION 87109\n         TM    TIFLAGS3,TIF3READ  READ POSTED ?                  87107\n         BZ    *+12          NO                                  87107\n         NI    RPLRH3,255-RPLBB  ALREADY IN BRACKET              87107\n         NI    TIFLAGS3,255-TIF3READ  RESET READ MODE            87107\n         SEND  RPL=(RPL@),        USE PRESET RPL                       *\n               AREA=(WKA),        SET AREA IN CASE INT3270 CALLED      *\n               ARG=(R15),         SET CID FOR TERMINAL                 *\n               RECLEN=(WKB)       LENGTH CAN VARY\n         LTR   RTNCD,RTNCD        OK?\n         BZ    SNDOK              YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    SNDSEND             THEN RETRY\n         CH    ACTCD,DAMAGE       IF TERMINAL IS NOT AVAILABLE\n         BNE   SNDDAMG            AND\n         TM    POHSTAT,POHRREQ    REPLY WAS REQUESTED\n         BZ    SNDDAMG            AND\n         L     TICB@,@MATICB      MESSAGE NOT FOR MASTER\n         CLC   RPLARG,TICID       THEN\n         BE    SNDDAMG            ROUTE MESSAGE TO MASTER:\n         B     SNDSEND            AND RETRY\nSNDDAMG  CH    RTNCD,RETRY\n         BE    SNDSEND            RETRY\nSNDOK    TM    0(OUTX),LASTPARM   IF NOT LAST TICB PTR\n         BO    SNDEND              ...\n         OI    POSTATUS,POSMLTSN   FLAG MULTIPLE SEND, THEN\n         B     SNDLOOP             SEND OUTPUT TO NEXT TERMINAL\nSNDEND   NI    POSTATUS,255-(POSMLTSN+POSINSRT+POSECHO) RESET FLAGS\n         $SRET                    RETURN\n*\nSNDMVCMD MVC   2(*-*,WKB),TICMD        MOVE CMD INTO SEND AREA\nSNDMV1   MVC   SENDTXT(*-*),DATX        MOVE INTO SEND AREA\nSNDMV2   MVC   SENDTIME(*-*),STKDATA   MOVE INTO SEND AREA\nSNDSAVE  DS    F              SAVE WORD\n         TITLE 'N E T O P - MESSAGE STACK SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: STACK                                                         *\n*                                                                     *\n* FUNCTION: TO STACK MESSAGES FOR TERMINALS IN NO-ROLL MODE WHEN AN   *\n*        AWAITING ROLL CONDITION (FULL SCREEN) IS DETECTED.           *\n*                                                                     *\n* ENTRY POINTS: STACK                                                 *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              MSG & LENGTH-1     PARM@                               *\n*              TICB REG           TICB@                               *\n*              RETURN ADDRESS     RET@                                *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGS          WKA,WKB                             *\n*              RETURN ADDRESS     RET@                                *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: SEND3270 SUBR                                            *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nSTACK    $SINIT\n         LR    WKD,PARM@      SAVE MSG PTR\n         LR    WKB,PARM@      ISOLATE\n         SRL   WKB,24          LENGTH-1\n         LA    WKB,6(,WKB)    INCREMENT LENGTH FOR ELEMENT PREFIX\n         GETMAIN RC,LV=(WKB)   AND GETMAIN STACK ELEMENT\n         LTR   RTNCD,RTNCD    OK?\n         BZ    STKCHECK\n         LA    WKA,STKUNM     SET UP STACK STORAGE\n         LA    WKB,STKUNML     UNAVAILABLE WARNING MSG\n         MVC   STKUNMCT,=X'40202120'  EDIT\n         ED    STKUNMCT,TISTKCT    INTO MSG\n         B     STKRET         RETURN\nSTKCHECK TM    TISTATUS,TISTACK STACK ALREADY EXISTS?\n         BZ    STKNOT         NO\n         L     STKEL@,TITAIL@ YES - PICK UP LAST STACK ELEMENT\n         USING STKEL,STKEL@   STACK ELEMENT ADDRESSING\n         ST    PARM@,STKNXEL  CHAIN NEW ELEMENT\n         ST    PARM@,TITAIL@  SET NEW TAIL POINTER\n         B     STKZNX         JUMP STACK SET UP\n         DROP  STKEL@\n         USING STKEL,PARM@    STACK ELEMENT ADDRESSING\nSTKNOT   ST    PARM@,TIHEAD@  NO STACK - SET UP HEAD\n         ST    PARM@,TITAIL@   AND TAIL POINTERS\nSTKZNX   XC    STKNXEL,STKNXEL ZERO NEXT STACK ELEMENT PTR\n         STH   WKB,STKELEN    SET ELEMENT LENGTH\n         SH    WKB,K7         DECR. ELEMENT LENGTH FOR DATA MOVE\n         EX    WKB,STKMV      MOVE DATA TO ELEMENT\n         LA    WKA,STKM       SET UP STACK\n         LA    WKB,STKML       COUNT WARNING MSG\n         MVI   STKM+1,X'C2'   SET DEFAULT WCC\n         AP    TISTKCT,KP1    INCREMENT ELEMENT COUNT\n         MVC   STKMCT,=X'40202120'  EDIT\n         ED    STKMCT,TISTKCT    INTO MSG\n         TM    TISTATUS,TISTACK STACK ALREADY EXISTS?\n         BO    STKSOLCK         YES\n         OI    TISTATUS,TISTACK NO - FLAG STACK OPEN\n         B     STKALARM          AND RING ALARM\nSTKSOLCK TM    POHSTAT,POHGEN SOLICITED MSG?\n         BO    STKRET         YES\n         LA    WKB,STKMSL     NO - SET UP SHORT MSG LENGTH AND\nSTKALARM MVI   STKM+1,X'C6'    RING ALARM\nSTKRET   $SRET                RETURN\n*\nSTKMV    MVC   STKDATA(*-*),0(WKD) MOVE DATA TO STACK ELEMENT\n         DROP  PARM@\n         TITLE 'N E T O P - MESSAGE UNSTACK SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: UNSTACK                                                       *\n*                                                                     *\n* FUNCTION: TO UNSTACK MESSAGES FOR TERMINALS IN NO-ROLL MODE WHEN AN *\n*        AWAITING ROLL CONDITION (FULL SCREEN) IS ALLEVIATED BY PA KEY*\n*                                                                     *\n* ENTRY POINTS: UNSTACK                                               *\n*                                                                     *\n* INPUT:                                                              *\n*                                                                     *\n*       POFSTDEL \u00ac ON = UNSTACK AND SEND TILL FULLSCREEN/EMPTY STACK  *\n*       POFSTDEL ON   = DELETE COMPLETE STACK WITHOUT SENDING         *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              TICB REG           TICB@                               *\n*              RETURN ADDRESS     RET@                                *\n*                                                                     *\n* REGISTERS AT SND3270 CALL:                                          *\n*                                                                     *\n*              DATA LENGTH - 1    MSGLEN                              *\n*              STACK ELEMENT PTR  STKEL@                              *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              WORK REGS          WKA,WKB                             *\n*              RETURN ADDRESS     RET@                                *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: SND3270                                                      *\n*                                                                     *\n* CALLED BY: RCV3270, CLSDST                                          *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nUNSTACK  $SINIT\n         OI    POFLAGS,POFUNSTK  FLAG UNSTACKING MSGS (FOR SND3270)\n         L     STKEL@,TIHEAD@ PICK UP TOP STACK ELEMENT\n         USING STKEL,STKEL@   STACK ELEMENT ADDRESSING\nUNSLOOP  LH    R0,STKELEN     LOAD ELEMENT LENGTH\n         TM    POFLAGS,POFSTDEL  DELETE STACK?\n         BO    UNSFREE        YES - BYPASS DATA MOVE\n         LR    MSGLEN,R0      COPY IT\n         SH    MSGLEN,K7      DECR. ELEMENT LENGTH FOR DATA MOVE\n         SP    TISTKCT,KP1    DECR. STACK ELEMENT COUNT\n         $CALL SND3270        SEND UNSTACKED MESSAGE\nUNSFREE  L     WKA,STKNXEL    SAVE CHAIN POINTER TO NEXT ELEMENT\n         FREEMAIN RC,LV=(0),A=(STKEL@)  AND FREEMAIN CURRENT ELEMENT\n         LTR   STKEL@,WKA     RELOAD CHAIN POINTER TO NEXT ELEMENT\n         BNZ   UNSRCHK        ZERO? (EMPTY STACK?)\n         NI    TISTATUS,255-TISTACK  YES - RESET FLAG\n         ZAP   TISTKCT,KP0    DECR. STACK ELEMENT COUNT\n         LA    RTNCD,RCVNRMSG      SET NO RESP MSG RC FOR INBOUND\n         B     UNSRET          AND RETURN\nUNSRCHK  TM    TIFLAGS,TIFWTROL  WAITING FOR ROLL?\n         BZ    UNSLOOP           NO - GO UNSTACK NEXT MSG\n         ST    STKEL@,TIHEAD@ STORE NEW HEAD POINTER\n         LA    WKA,STKM       SET UP STACK\n         LA    WKB,STKML       COUNT WARNING MSG\n         MVI   STKM+1,X'C6'    AND RING ALARM AS WELL\n         MVC   STKMCT,=X'40202120'  EDIT\n         ED    STKMCT,TISTKCT    INTO MSG\n         LA    RTNCD,RCVRMSG    SET RESPONSE MSG RC FOR INBOUND\nUNSRET   NI    POFLAGS,255-(POFUNSTK+POFSTDEL)  RESET FLAGS\n         $SRET                RETURN\n*\n         DROP  STKEL@\n         TITLE 'N E T O P - INT3270 SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* NAME: INT3270 SUBROUTINE                                            *\n*                                                                     *\n* FUNCTION: TO TRANSMIT 3270 ORDERS THAT SET UP THE INITIAL SCREEN    *\n*        FORMAT. THE BEGIN BRACKET BIT IS SET IN THE RPL BY THE       *\n*        LOGON EXIT FOR A FIRST TIME INITIALIZATION.                  *\n*                                                                     *\n* ENTRY POINTS: INT3270                                               *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              CMD ABR LENGTH     PARM@                               *\n*              INT MSG LENGTH     MSGLEN                              *\n*              RETURN ADDRESS IN CALLER  RET@                         *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              RPL REG            RPL@                                *\n*              WORK REGS          WKA,WKB                             *\n*              RETURN ADDRESS     RET@                                *\n*              SAVE AREA ADDRESS  SA@                                 *\n*              BASES              BASE1@,DBASE1@,DBASE2@              *\n*              VTAM CALLS         SUBR@,RTNCD,RET@                    *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* CALLED BY: LOGON EXIT AND RCV3270 SUBR FROM INBOUND EXIT            *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*                                                                     *\n***********************************************************************\n*\nINT3270  $SINIT\n         OI    RPLRH3,RPLBB+RPLEB  RESET BRACKETS FOR CONTENTION 87107\n         TM    TIFLAGS3,TIF3READ  READ POSTED ?                  87107\n         BZ    *+12          NO                                  87107\n         NI    RPLRH3,255-RPLBB  ALREADY IN BRACKET              87107\n         NI    TIFLAGS3,255-TIF3READ  RESET READ MODE            87107\n         LA    WKA,INTLEN     SET UP LENGTH\n         LTR   PARM@,PARM@    CMD TO BE INSERTED?\n         BZ    INTSEND        NO\n         CH    PARM@,=X'0410' ARBITRARILY TOO LARGE?\n         BH    INTSEND        YES - IGNORE PARM\n         LA    WKA,3(WKA,PARM@) YES - INSERT\n         BCTR  PARM@,0                     LAST CMD IN\n         EX    PARM@,INTCMD                     INT MSG\nINTSEND  XC    TILNCT,TILNCT      SET TO LINE 1\n         SEND  RPL=(RPL@),                                             *\n               ACB=ACBTERMS,                                           *\n               AREA=INTTEXT,                                           *\n               RECLEN=(WKA),                                           *\n               POST=RESP,                                              *\n               OPTCD=SYN,                                              *\n               RESPOND=(NEX,FME,NRRN)  BB SEND MUST REQUEST +VE RESP\n         LTR   RTNCD,RTNCD        OK?\n         BZ    INTRET0            YES\n         CH    ACTCD,RETRY        IF RETRIABLE ERROR\n         BE    INTSEND             THEN RETRY\n         LA    RTNCD,4             ELSE RETURN NO GO\n         B     INTRET\nINTRET0  SR    RTNCD,RTNCD         SAY ALL IS WELL (RTNCD=0)\nINTRET   $SRET\n*\nINTCMD   MVC   INTCSUF(*-*),TIABR     MOVE ABBREV. CMD INTO INT MSG\n         TITLE 'N E T O P - DATA AREAS'\n*\n***********************************************************************\n*                                                                     *\n*                                 DATA AREAS                          *\n*                                                                     *\n*        ADDRESSIBILITY VIA  DBASE1@ AND DBASE2@                      *\n*        ACBTERMS IS LAST SYMBOL REQUIRING A BASE REGISTER - DONT ADD *\n*        ANY BASED SYMBOLS AFTER IT.                                  *\n*                                                                     *\n***********************************************************************\n*\n         ORG   NETOP+((*-NETOP)/4096+1)*4096   ALIGN TO PAGE BOUNDARY\n*              (LINKEDIT WITH ' PAGE NETOP' - MAKES DEBUGGING EASIER)\n*\n@DBASE2  DC    A(*+4096)          BASE 2 FOR DATA\nMAINSA   DC    18F'0'             MAINLINE SAVE AREA\nEXITSA   DC    18F'0'             EXIT SAVE AREA\nERRORSA  DC    18F'0'             ERROR EXIT SAVE AREA\nENDSA    DC    18F'0'             TPEND OR ABEND EXIT SAVE AREA\n*\n@HELPM   DC    A(HELPM)           1ST LEVEL HELP MESSAGE PTR\n@HELPM2  DC    A(HELPM2)          PF2 HELP MESSAGE PTR\n@TRTTAB  DC    A(TRTTAB)          TRT TABLE PTR\n@MATABLE DC    A(MATABLE)         MATABLE PTR\n@MATICB  DC    F'0'               ADDRESS OF MASTER'S TICB\n@SAVACB  DC    F'0'               LAST ACB TO SATISFY RCVCMD\n@ECHTICB DS    F'0'           TICB @ FOR USE WHEN ECHOING RESPONSES\n@TCAST   DS    A                  TCAS TSB TABLE\n@ACBPPO  DC    A(ACBPPO)\n@ACBSPO  DC    A(ACBSPO)\nABREGS   DS    2F                 ABEND REGS SAVE AREA\nECBMAIN  DC    F'0'               MASTER LOGON AND CLOSEDOWN ECB\nNULL     DC    F'0'               FULLWORD OF ZEROS\nCLSDLAY  DC    F'50'              1/2 SEC DELAY\nOPNDLAY  DC    F'1500'            15 SEC DELAY\nRANGCHAR DS    F                  RANGE FORMAT CHAR/PTR\nRANGHEX  DS    H                  RANGE FORMAT CHAR IN HEX\nRANGEND  DS    H                  RANGE FORMAT LIMIT IN HEX\nHEX      DC    CL2'  '            HEX CHARACTERS FROM CVHX SUBROUTINE\n         DC    CL2'  '            HEX OVERFLOW - DO NOT MOVE\nHEXTOBE  DC    XL2'0000'          BINARY TO BE HEX'D\nPOID     DC    XL1'00'            LAST ID ASSIGNED TO A TERMINAL\nPOSTATUS DC    XL1'00'            PO STATUS BYTE\nPOSCLSDN EQU   B'10000000'  80    CLOSEDOWN FLAG\nPOSHVMA  EQU   B'01000000'  40    MASTER HAS BEEN LOGGED ON\nPOSMLTSN EQU   B'00100000'  20    MULTIPLE SEND IN PROGRESS\nPOSINSRT EQU   B'00010000'  10    MOMENTARY INSERT SIGNAL FOR SND3270\nPOSTEST  EQU   B'00001000'  08    TSO TEST JOB AFTER INITIALIZATION\nPOSSEND  EQU   B'00000100'  04    SEND TO VTAM SYSTEM PGMRS ON TSO\nPOSABEND EQU   B'00000010'  02    ESTAE EXIT ENTERED\nPOSECHO  EQU   B'00000001'  01    ECHO THIS MSG TO OTHER MCANDTS\n*\nPOFLAGS  DC    XL1'00'            PO FLAGS BYTE\nPOFOSCMD EQU   B'10000000'  80    ISSUE OS CMDS DURING INITIALIZATION\nPOFINTCM EQU   B'01000000'  40    INTERNAL CMD (RCVVTAM->OUT/INBOUND)\nPOFDSP   EQU   B'00100000'  20    MOMENTARY DISPLAY SIGNAL (INBOUND)\nPOFCFAIL EQU   B'00010000'  10    CLOSE FAILURE FIRST TIME FLAG\nPOFHINT  EQU   B'00010000'  10    HI INTENSE SIGNAL (RCVVTAM->SND3270)\nPOFRANG  EQU   B'00001000'  08    MOMENTARY RANGE SIGNAL (INBOUND)\nPOFSTDEL EQU   B'00000100'  04    DEL SIGNAL (RCV3270,CLSDST->UNSTACK)\nPOFUNSTK EQU   B'00000010'  02    UNSTACK SIGNAL (UNSTACK->SND3270)\nPOFWTO   EQU   B'00000001'  01    WTO DONE - NO NEED FOR WTL(RESERVED)\n*                                 PF2 CONTROL KEYWORDS AND MASKS\nPF2KWDS  DC    CL5'NROLL'         NROLL OR ROLL\n         DC    AL1(255-TIF2ROLL,TIF2ROLL)  -VE AND +VE MASKS\n         DC    CL5'NAUTO'\n         DC    AL1(TIF2AUTO,255-TIF2AUTO)\n         DC    CL5'NECHO'\n         DC    AL1(TIF2ECHO,255-TIF2ECHO)\n         DC    CL5'NSOLO'\n         DC    AL1(255-TIF2SOLO,TIF2SOLO)\n         DC    CL5'NLOGD'\n         DC    AL1(255-TIF2LOGD,TIF2LOGD)\n         DC    AL1(255)\n*\nINTBUFL  DS    H                  INTERNAL CMD BUFFER LENGTH\nINTBUF   DS    CL28               INTERNAL CMD BUFFER\n         ORG   INTBUF\nINTAID   DC    X'404040114040'    AID _ _ SBA _ _\nINTNODE  DS    CL8                NODENAME\n         ORG   INTNODE\nINTFDUMP DS    C'F DUMPMON,NCP='  F DUMPMON CMD AREA\nINTDNODE DS    CL8                370X NODENAME\n         ORG\nFDUMP    DC    C'F DUMPMON,NCP='  F DUMPMON CMD TEXT\n*\nK1       DC    H'1'               CONSTANT\nK2       DC    H'2'               CONSTANT\nK3       DC    H'3'               CONSTANT\nK4       DC    H'4'               CONSTANT\nK5       DC    H'5'               CONSTANT\nK6       DC    H'6'               CONSTANT\nK7       DC    H'7'               CONSTANT\nK8       DC    H'8'               CONSTANT\nK9       DC    H'9'               CONSTANT\nK10      DC    H'10'              CONSTANT\nK12      DC    H'12'              CONSTANT\nK13      DC    H'13'              CONSTANT\nK36      DC    H'36'              CONSTANT\nKPOHLEN  DC    AL2(POHLEN)        CONSTANT - PO HEADER LENGTH\nRETRY    DC    AL2(USFRESSU)      ACTION CODE FOR RETRIABLE ERROR\nDAMAGE   DC    AL2(USFDAMGE)      ACTION CODE FOR DAMAGE ERROR\nKP0      DC    P'0'               CONSTANT\nKP1      DC    P'1'               CONSTANT\nKP7      DC    P'7'               CONSTANT\n*\nUNSOL#   DC    PL2'1'         UNSOLICITED MSG REPEAT #\nMAXUNSOL DC    PL2'50'        MAX UNSOLICITED REPEATS BEFORE INACT\n*\nAID      DS    X              AID FROM INPUT AREA\nUPPER    DS    CL7            1ST 7 CHARS IN UPPERCASE\nBLANX    DC    CL20' '        GENERAL PURPOSE BLANK FIELD\n*\n*        CAREFUL -- LOWERCASE TEXT (NET TO KLOGON)\n*\nNET      DC    C' net,'       LONG FORM TRIGGER\nNETSOL   DC    C'NETSOL'      F NETSOL TRIGGER\nTEST     DC    C'TEST'        F TEST TRIGGER\nSUPP     DC    C'SUPP'        F SUPP TRIGGER\nDLONG    DC    C'display '     VARIATIONS\nNETID    DC    C'net,id='     INSERT TEXT FOR ABBREV. CMDS\nDISPLAY  DC    C'd net,id='   INSERT TEXT FOR IMPLICIT DISPLAY CMD\nVARYA    DC    C'v net,act,id='   INSERT TEXT FOR PF12 CMD\nVARYII   DC    C'v net,inact,i,id='   INSERT TEXT FOR PF6 CMD\nVARYI    DC    C'v net,inact,id='     INSERT TEXT FOR PF8 CMD\nMODIFY   DC    C'f net,id='      INSERT TEXT FOR PF4 CMD\nKLOGON   DC    C'logon='      INSERT TEXT FOR PF10 CMD\n*\nSENDUBUF DC    AL2(SENDUL,0)  OS SEND CMD BUFFER\n         DC    C'SE '''\nSENDUTXT DS    CL72\n         DC    C''',LOGON,USER=(&SENDLST)'\nSENDUL   EQU   *-SENDUBUF\nSENDPTCH DC    CL20' '        ZAP IN NEW USERIDS HERE AND UPDATE LENGTH\n*\nNEW082   DC    C'DEV='\nNEWDEV   DS    CL5\n         DC    C',ALLOC= '\nNEWALC   DS    CL8\n         DC    C',UID= '\nNEWUID   DS    CL7\n         DC    C' '\nNEWASID  DS    CL4\n         DC    C') ,SIMLOG='\nNEWSIM   DS    CL8\nNEW082L  EQU   *-NEW082\n*\n*     WORK AREA WHERE SND3270 PREPARES OUTPUT LINE\n*\nSENDORDR DC    X'F1C21140F83CC14F0011'\nSENDADDR DC    XL2'4040'      SCREEN BUFFER ADDRESS SET BY SND3270\nSENDTIME DC    CL8' '         TIMESTAMP FIELD\n         DC    X'1D'          SF\nSENDAT1  DC    X'60'          ATTRIBUTE BYTE FOR OUTPUT LINE\nLO       EQU   X'60'          LO-INTENS\nHI       EQU   X'E8'          HI-INTENS\nSENDTXT  DC    CL69' '        MESSAGE TEXT\nSENDAT2  DC    X'1D60'        FILL ATTR - SAVE SPACE FOR CMD INSERTION\nSENDAT3  DC    X'1D60'        RESET ATTR TO ENSURE NEXT TIME FIELD LO\nSENDL    EQU   *-SENDORDR     LENGTH OF MESSAGE\nSENDSEPA DC    80C'-'         SEPARATOR LINE\nSENDSEPL EQU   *-SENDSEPA     LENGTH OF SEPARATOR LINE\n*\nUNSEND   DC    X'F1C211'      SHORT UNSOL MSG TO UPDATE\nUNSENDAD DC    XL2'4040'       UNSOL COUNT, OVERWRITING\nUNSENDTM DC    CL8' '           'IST' TEXT OF UNSOL MSG\n         DC    X'1DE8'        HI ATTR FOR UNSOL MSG\nUNSEND#  DC    CL2' '         REPEAT COUNT\nUNSENDSL EQU   *-UNSENDTM     SHORT LENGTH FOR STACKING\nUNSENDAT DC    X'1D60'        LO ATTR FOR REST OF LINE AND FOR SENDAT2\nUNSENDL  EQU   *-UNSEND       LENGTH FOR SENDING               REFRESH\n         DC    X'1D60'        LO ATTR FOR SENDAT3 REFRESH\n*\nNULLM    DC    X'F1C211C1E3131140F83CC14F00'\n*\nNAUTM    DC    X'F1C01140F83CC14F0011C1E33CC25F0011C1E3'\nNAUTABR  DS    CL20\n*\nINVALM   DC    X'F1C61140F83CC14F001140F8'\n         DC    C'invalid from '\nINVALTRM DS    CL8\nINVALML  EQU   *-INVALM\n*\nINVALK   DC    X'F1C61140F83CC14F001140F8'\n         DC    C'invalid input'\nINVALKL  EQU   *-INVALK\n*\nDCONM    DC    X'F1C61140F8'\n         DC    C'disconnect from '\nDCONMNAM DS    CL8\n         DC    X'11C1E313'\nDCONMABR DS    CL8\nDCONML   EQU   *-DCONM\n*\nSTKM     DC    X'F1C21140F81DE8'\nSTKMCT   DS    CL4\nSTKMSL   EQU   *-STKM         SHORT LENGTH\n         DC    C' messages stacked  '\nSTKML    EQU   *-STKM         FULL LENGTH\n*\nSTKUNM   DC    X'F1C61140F81DE8'\n         DC    C'no storage -'\nSTKUNMCT DS    CL4\n         DC    C' stacked'\nSTKUNML  EQU   *-STKUNM\n*\nNOTICBM  DC    X'F1C7114EC11DE8'\nNOTICBLG DC    C'LOGON',C' '\nNOTICBRJ DC    C'REJECTED',C' -- MAXIMUM TERMINALS EXCEEDED'\nNOTICBML EQU   *-NOTICBM\n*\nRLRQM    DC    X'F1C7114E401DE8'\n         DC    C'THIS TERMINAL REQUESTED BY ANOTHER APPLICATION'\n         DC    X'114FD7'\n         DC    C'IF NOT MASTER IT WILL BE RELEASED'\nRLRQML   EQU   *-RLRQM\n*\nCLOSM    DC    X'00000100'    TERM ID NON-ZERO - FAILS NETPTICB CHECK\n         DC    15C'*',CL11' '\nCLOSMSG  DC    C'NETOP CLOSING DOWN'\n         DC    CL11' ',15C'*'\nCLOSML   EQU   *-CLOSM-4-1\n*\nOFFMSG   DC    C'LOGOFF'\n*\nABMSG    DC    AL2(ABMSGL,0)  RDW\n         DC    C'-',C'ABEND ' ASA SKIP, TEXT\nABMSGAC  DC    3CL2' '        ABEND CODE\nABMSGRC  DC    CL2' '         REASON CODE\nABMSGL   EQU   *-ABMSG\n*\nLOSMSG   DC    C'LOST'\nLOSMSGRC DC    C'   '\nLOSMSGL  EQU   *-LOSMSG\n*\nRELMSG   DC    C'RELEASE REQUEST IGNORED DUE TO ERROR'\n*\nTPEMSG   DC    C'POSTED TPEND '\nTPEMSGRC DC    C'  '\nTPEMSGL  EQU   *-TPEMSG\n*\nERMSG    DC    C'ERROR EXIT - REQ='\nERREQ    DC    C'  ,RTNCD='\nERRTNCD  DC    C'  ,FDBK2='\nERFDBK2  DC    C'  ,SSENSEI='\nERSENEI  DC    C'  ,SSENSMI='\nERSENMI  DC    C'  ,SENSE='\nERSENU1  DC    C'  '\nERSENU2  DC    C'  '\nERMSGL   EQU   *-ERMSG\n*\nREMSG    DC    C'RESPONSE EXIT - REQ='\nREREQ    DC    C'  ,RTNCD='\nRERTNCD  DC    C'  ,FDBK2='\nREFDBK2  DC    C'  ,SSENSEI='\nRESENEI  DC    C'  ,SSENSMI='\nRESENMI  DC    C'  ,SENSE='\nRESENU1  DC    C'  '\nRESENU2  DC    C'  '\nREMSGL   EQU   *-REMSG\nUNSOL    DC    CL140' '       UNSOLICITED MSG SAVE AREA(ASSUME MAX 140)\nLOGBUF   DC    CL133' '         USED BECAUSE I DISABLED VTAMLOGO\n         USING LOGREC,LOG@\n*\n*    SCREEN INITIALIZATION TEXT USED BY INT3270\n*\nINTTEXT  DC     X'F5C21140D41DE8' WRITE ERASE + SF PROTECT OUR TITLE\n         DC    C'N E T',X'1D60',C'W O R K  ',X'1DE8'\n         DC    C'O P',X'1D60',C'E R A T O R',X'11C1C8',C'REL &REL'\n         DC    X'1DE811C150'  PROT, SBA ROW 2 COL 1\n         DC    C'COMMAND INPUT ===>'\n         DC    X'1DC113'      SF,IC\n         DC    X'11C25F'      SBA ROW 14,COL 80\n         DC    X'1D60'        SF FOR DATA OUTPUT\nINTLEN   EQU   *-INTTEXT      LENGTH OF INITIALIZATION TEXT\n         DC    X'11C1E3'      SBA TO CMD INPUT AREA\nINTCSUF  DS     CL40          INT CMD SUFFIX INSERTION AREA\n*\n*   DATA TO MAINTAIN OUTPUT ROLLING BUFFER\n*\nLINEMAX  DC   H'20'           MAX OUTPUT LINE POINTER\nLINE1    DC   XL2'&L(4)'      3270 BUFFER ADDRESS LINE 1 - ROW4/COL1\n         DC   XL2'&L(5)'      LINE 2  - ROW 5\n         DC   XL2'&L(6)'      LINE 3  - ROW 6\n         DC   XL2'&L(7)'      LINE 4  - ROW 7\n         DC   XL2'&L(8)'      LINE 5  - ROW 8\n         DC   XL2'&L(9)'      LINE 6  - ROW 9\n         DC   XL2'&L(10)'     LINE 7  - ROW 10\n         DC   XL2'&L(11)'     LINE 8  - ROW 11\n         DC   XL2'&L(12)'     LINE 9  - ROW 12\n         DC   XL2'&L(13)'     LINE 10 - ROW 13\n         DC   XL2'&L(14)'     LINE 11 - ROW 14\n         DC   XL2'&L(15)'     LINE 12 - ROW 15\n         DC   XL2'&L(16)'     LINE 13 - ROW 16\n         DC   XL2'&L(17)'     LINE 14 - ROW 17\n         DC   XL2'&L(18)'     LINE 15 - ROW 18\n         DC   XL2'&L(19)'     LINE 16 - ROW 19\n         DC   XL2'&L(20)'     LINE 17 - ROW 20\n         DC   XL2'&L(21)'     LINE 18 - ROW 21\n         DC   XL2'&L(22)'     LINE 19 - ROW 22\n         DC   XL2'&L(23)'     LINE 20 - ROW 23\n         DC   XL2'&L(24)'     LINE 21 - ROW 24\n         DC    XL(POHLEN)'00'     PREFIX AREA FOR OUTBOUND COMMANDS\nRCVDA    DC    XL(DALEN)'00'      DATA AREA FOR INBOUND COMMANDS\nSENDDA   DC    XL(DALEN)'00'      DATA AREA FOR OUTBOUND SPO MESSAGES\nPRIMADA  DC    XL(DALEN)'00'      DATA AREA FOR OUTBOUND PPO MESSAGES\n*\nWORK     DS    D                  DOUBLE WORD WORK AREA\nSTTIME   DS    F                  START TIME\nDATE     DS    F                  CURRENT DATE\nTBUF     DS    XL60               WORK AREA FOR REARRANGING TEXT\n*        TICB POOL\n*\nTICBLACT DC    A(0)               LAST ACTIVE TICB\nTICBPOOL EQU   *\nTICBCT   EQU   8                  # TICBS IN LIST\nTICBFCT  DC    AL2(TICBCT)        # FREE TICBS IN LIST\nTICBMCCT DC    AL2(0)             # TICBS USED BY MASTER CANDIDATES\n         DS    0D\nTICBS    DC    (TICBCT)XL(TICBLEN)'00'\n         ORG   TICBS\nNETPTICB DC    AL1(TISMCAND+TISALLOC)\n         ORG   NETPTICB+(TINAMLEN-TICB)\n         DC    AL2(5)\n         DC    CL8'NETOP'\n         ORG\nVTAMTICB DC    XL(TICBLEN)'00'\n         ORG   VTAMTICB+(TINAMLEN-TICB)\n         DC    AL2(4)\n         DC    CL8'VTAM'\n         ORG\nDUMTICB  DC    XL(TICBLEN)'00'\nTICBLIST DC    (TICBCT)F'0'   LIST OF TICBS FOR SEND TARGET TERMINALS\nLASTPARM EQU   X'80'          LAST-TICB-IN-LIST FLAG\n         LTORG\n*        PO MESSAGES.\n*\n         PRINT NOGEN\nNTP00MSG WTO   'NTP00  NETOP WAITING FOR MASTER TO LOGON',             *\n               ROUTCDE=2,MF=L\n*\nNTP01MSG WTO   'NTP01  NODENAME NOW MASTER',                           *\n               ROUTCDE=2,MF=L\n*\nNTP02MSG WTO 'NTP02  LAST MASTER LOGGED OFF - SYSCON NOW VTAM PRIMARY',*\n               ROUTCDE=2,MF=L\n*\nNTP03MSG WTO   'NTP03  NETOP PPO ALREADY OPEN - SPO ONLY AVAILABLE',   *\n               ROUTCDE=2,MF=L\n*\nNTP04MSG WTO   'NTP04  NETOP ALREADY RUNNING',                         *\n               ROUTCDE=2,MF=L\n*\nNTP05MSG WTOR  'NTP05 - REPLY ''U'' TO RETRY OR OTHER TO TERMINATE',   *\n               TBUF,1,ECBMAIN,ROUTCDE=1,MF=L\n*\nNTP06MSG WTO   'NTP06  UNABLE TO OPEN ACB FOR           ',             *\n               ROUTCDE=2,MF=L\n*\nNTP07MSG WTO   'NTP07  UNABLE TO CLOSE ACB FOR          ',             *\n               ROUTCDE=2,MF=L\n*\nNTP08MSG WTO 'NTP08  NETOP UNABLE TO OPEN VTAMLOG ',                   *\n               ROUTCDE=2,MF=L\n*\nNTP09MSG WTO   'NTP09 - RETRYING EVERY 15 SECONDS FOR 2 MINUTES',      *\n               ROUTCDE=2,MF=L\n*\nNTP10MSG WTO 'NTP10  RETURN CODE=CD, ERROR CODE=CD',                   *\n               ROUTCDE=2,MF=L\n*\nNTP11MSG WTO 'NTP11  UNABLE TO LOGON MASTER TERMINAL          - USE PF1*\n               1 ON ANY MASTER CANDIDATE',ROUTCDE=1,DESC=2,MF=L\n*\nNTP12MSG WTO 'NTP12  NETOP CANCELLED - DID YOU TRY ''PF3 ALL'' FIRST?',*\n               ROUTCDE=2,MF=L\n*\n*        OVERLAYS FOR MESSAGES\n*\n         ORG   NTP01MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP01  '\nNTP1NODE DS    CL8\n*\n         ORG   NTP06MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP06  UNABLE TO OPEN ACB FOR '\nNTP06TYP DS    CL9\n*\n         ORG   NTP07MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP07  UNABLE TO CLOSE ACB FOR '\nNTP07TYP DS    CL9\n*\n         ORG   NTP08MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP08  NETOP UNABLE TO OPEN '\nNTP08DDN DS    CL8\n*\n         ORG   NTP10MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP10  RETURN CODE='\nNTP10RC  DS    CL2\n         DS    C' ,ERROR CODE='\nNTP10EC  DS    CL2\n*\n         ORG   NTP01MSG\n         DS    XL4                SKIP OVER WTO PARAMETERS\n         DS    C'NTP11  UNABLE TO LOGON MASTER TERMINAL '\nNTP11NOD DS    CL8\n         ORG\nSIMNIB   NIB   PROC=TRUNC,MODE=RECORD\n         PRINT NOGEN\n         ORG\nTRTAB    DC    C'0123456789ABCDEF'  TR TABLE FOR BIN TO HEX\n*\nLOGLN#   DS    H                  LOG LINE COUNT\nPAGESIZE DC    H'60'              # LINES PER PAGE\nLOGPG#   DS    H                  LOG PAGE COUNT\nEOFPGCNT DC    H'3'               # PAGES BETWEEN WRITE-EOFS\nLOGHDR   DC    AL2(133,0)         LOG HEADER LINE\n         DC    CL30'1'\n         DC    C'NETOP LOG'\n         DC    CL72' '\n         DC    C'DATE '\nLOGHDRDT DS    CL5\n*\nLOGSKP   DC    AL2(5,0)           LOG SKIP AFTER HEADER LINE\n         DC    C'-'\n*\nDYNPTR   DC    0A(0),X'80',AL3(REQBLOCK)                         85241\nREQBLOCK DC    0A(0),AL1(20,0),X'2000',H'0,0',A(0,0,0)  NO RES   85241\nS99ERROR EQU   REQBLOCK+4,2,C'H'  ERROR RETURN                   85241\nLOGDDO   $TU   DDNAM,C'VTAMLOGO',PREFIX=DAL                      85241\nLOGDDI   $TU   DDNAM,C'VTAMLOGI'                                 85241\nLOGDS    $TU   DSNAM,C'SYS1.VTAMLOG'                             85241\nOLD      $TU   STATS,X'01'                                       85241\nMOD      $TU   STATS,X'02'                                       85241\nPRT1     $TU   DDNAM,C'SYSPRINT'                                 85241\nPRT2     $TU   SYSOU,C'A'                                        85241\nPRT3     $TU   CLOSE          (FREE=CLOSE)                       85241\nLGITUP   $TUP  TXT=(LOGDDI,LOGDS,OLD)\nLGOTUP   $TUP  TXT=(LOGDDO,LOGDS,MOD)\nLGOTUPF  $TUP  TXT=LOGDS\nPRTUP    $TUP  TXT=(PRT1,PRT2,PRT3)                              85241\n*\nNTPATCH  DC    20F'0'             PATCH AREA\n*\n         PRINT NOGEN\n*\n***********************************************************************\n*                                                                     *\n*        DATA CONTROL BLOCKS FOR LOGGING                              *\n*                                                                     *\n***********************************************************************\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        *\n               BLKSIZE=141,LRECL=137,                                  *\n               DSORG=PS,RECFM=VA,MACRF=(PM)\nVTAMLOGI DCB   DDNAME=VTAMLOGI,                                        *\n               BLKSIZE=3155,LRECL=137,SYNAD=LOGSYNAD,BUFNO=0,          *\n               DSORG=PS,RECFM=VBA,MACRF=(PL,GL)\nVTAMLOGO DCB   DDNAME=VTAMLOGO,                                        *\n               BLKSIZE=3155,LRECL=137,SYNAD=LOGSYNAD,BUFNO=2,          *\n               DSORG=PS,RECFM=VBA,MACRF=(PL)\n         PRINT NOGEN\n*\n* PO VTAM CONTROL BLOCKS.\n*\nRCVRPL   RPL   AM=VTAM,                                                *\n               ACB=ACBTERMS,                                           *\n               AREA=RCVDA,                                             *\n               AREALEN=DALEN,                                          *\n               EXIT=INBOUND,                                           *\n               OPTCD=(ANY,ASY,TRUNC),                                  *\n               RTYPE=DFSYN\n         PRINT NOGEN\nSENDRPL  RPL   AM=VTAM,                                                *\n               ACB=ACBSPO,                                             *\n               AREA=SENDDA,                                            *\n               AREALEN=DALEN,                                          *\n               EXIT=OUTBOUND,                                          *\n               OPTCD=ASY\nPRIMARPL RPL   AM=VTAM\nLOGONRPL RPL   AM=VTAM,BRACKET=BB   FOR INITIAL MESSAGE\nDISCRPL  RPL   AM=VTAM\n*\n         PRINT NOGEN\nLOGONNIB NIB   PROC=TRUNC,                                             *\n               EXLST=NXLST,                                            *\n               MODE=RECORD\n*\nACBTERMS ACB   AM=VTAM,                                                *\n               APPLID=MODULEID,                                        *\n               PASSWD=TERMSPW,                                         *\n               EXLST=TXLST,                                            *\n               MACRF=LOGON\nTERMSPW  DC    X'06',CL8'VTAMOP'       PASSWORD FOR TERMINAL ACB\nMODULEID DC    AL1(5),CL5'NETOP'                                 85245\n*\nPPOID    DC    X'06',CL8'NETPPO'       ID FOR PPO ACB\nSPOID    DC    X'06',CL8'NETSPO'       ID FOR SPO ACB\nPOPW     DC    X'07',CL8'VTAMCMD'      PASSWORD FOR PO-VTAM ACBS\n*\n         PRINT NOGEN\nACBPPO   ACB   AM=VTAM,                                                *\n               APPLID=PPOID,                                           *\n               PASSWD=POPW,                                            *\n               EXLST=PXLST,                                            *\n               MACRF=NLOGON\nACBSPO   ACB   AM=VTAM,                                                *\n               APPLID=SPOID,                                           *\n               PASSWD=POPW,                                            *\n               EXLST=PXLST,                                            *\n               MACRF=NLOGON\n*\nTXLST    EXLST AM=VTAM,                                                *\n               LERAD=ERROR,                                            *\n               SYNAD=ERROR,                                            *\n               TPEND=TPEND,                                            *\n               LOGON=LOGON,                                            *\n               RELREQ=RELREQ,                                          *\n               LOSTERM=LOSTERM\n*\nNXLST    EXLST AM=VTAM,                                                *\n               RESP=RESP\n*\nPXLST    EXLST AM=VTAM,                                                *\n               LERAD=ERROR,                                            *\n               SYNAD=ERROR\n*\n*\n* TERMINALS ELIGIBLE TO BE MASTER TERMINAL.\n*\nMATABLE  $MATAB L1C4,        MR                                  85240 *\n               L1C5,         GP                                  85240 *\n               L1C6,         MAIN CONSOLE OPERATIONS             85240 *\n               L1C7          SPARE                               85240\nMAPATCH  DC    XL32'00'       SPARE - LAST ENTRY IS DUMMY, LENGTH 0\n*\n*        CAREFUL -- LOWERCASE TEXT IN HELP SCREEN\n*\nHELPM    DC   X'F5C2'               ADDRESSED VIA ADCON @HELPM\n         DC   X'115D7F1DE8'\n         DC   C'KEY      VALID INPUT                      NETOP ACTION'\n         DC   X'11C25F1D40'\n         DC   X'11&L(3)',C'ENTER    full vtam cmd                      *\n                   passed asis'\n         DC   X'11&L(4)',C'         abbr vtam cmd  ( NET,ID=  omitted) *\n                   NET,ID=               inserted'\n         DC   X'11&L(5)',C'         vtam nodename                      *\n                   D NET,ID=             inserted'\n         DC   X'11&L(6)',C'         1 or 2 digit numeric+blank+cmd     *\n                   pf key n/nn assumed for rescan'\n         DC   X'11&L(7)',C'PF1      n/a                                *\n                   help screen'\n         DC  X'11&L(08)',C'PF2      control keyword (next help screen) *\n                   set/reset control function'\n         DC  X'11&L(09)',C'PF3      ALL (only from a master for shutdow*\n               n)  END NETOP'\n         DC  X'11&L(10)',C'                                            *\n                   END  (syscon primary if no ma)'\n         DC  X'11&L(11)',C'PF4      vtam nodename                      *\n                   F NET,ID=             inserted'\n         DC  X'11&L(12)',C'PF5      os command                         *\n                   passed to command scheduler'\n         DC  X'11&L(13)',C'PF6      vtam nodename                      *\n                   V NET,INACT,I,ID=     inserted'\n         DC  X'11&L(14)',C'PF7      vtam nodename,applid               *\n                   V NET,ID=,LOGON=      inserted'\n         DC  X'11&L(15)',C'PF8      vtam nodename                      *\n                   V NET,INACT,ID=       inserted'\n         DC  X'11&L(16)',C'PF10     vtam nodename (cluster only status)*\n                   D NET,ID=             inserted'\n         DC  X'11&L(17)',C'PF11     vtam nodename (logging required)   *\n                   D NET,ID=             inserted'\n         DC  X'11&L(18)',C'PF12     vtam nodename                      *\n                   V NET,ACT,ID=         inserted'\n         DC  X'11&L(19)',C'PA1/PA2       n/a      auto - null/init+cmd;*\n                    no-auto - delete/roll'\n         DC  X'11&L(20)',C'CLEAR/PA3     n/a      auto - screen init;  *\n                    no-auto - screen roll'\n         DC  X'11&L(21)',C'TESTREQ       n/a (not remotes)             *\n                   END (syscon primary if no ma)'\nHELPML   EQU   *-HELPM\n*\n*\nHELPM2   DC   X'F5C2115D7F1DE8'     ADDRESSED VIA ADCON @HELPM2\n         DC   C'PF2 INPUT                                 NETOP ACTION'\n         DC   X'11C25F1D60'\n*\n         DC   X'11&L(04)',C' userid     '\n         DC   C'Display command generated if user logged on'\n*\n         DC   X'11&L(06)1D'\nHELPR    DC   X'60',C' ROLL     ',X'1D60'\n         DC   C'Output rolls continuously from top to bottom of screen'\n         DC   X'11&L(07)1D'\nHELPRZ   DC   X'60',C'NROLL     ',X'1D60'\n         DC   C'Output halts at bottom of screen awaiting pa/clear key'\n*\n         DC   X'11&L(09)1D'\nHELPAZ   DC   X'60',C' AUTO     ',X'1D60'\n         DC   C'Abbreviated input is expanded and passed to vtam'\n         DC   X'11&L(10)1D'\nHELPA    DC   X'60',C'NAUTO     ',X'1D60'\n         DC   C'Abbreviated input is expanded and redisplayed'\n*\n         DC   X'11&L(12)1D'\nHELPEZ   DC   X'60',C' ECHO     ',X'1D60'\n         DC   C'All logged responses are echoed if master terminal'\n         DC   X'11&L(13)1D'\nHELPE    DC   X'60',C'NECHO     ',X'1D60'\n         DC   C'No logged responses are echoed if master terminal'\n*\n         DC   X'11&L(15)1D'\nHELPS    DC   X'60',C' SOLO     ',X'1D60'\n         DC   C'Only solicited messages to be displayed'\n         DC   X'11&L(16)1D'\nHELPSZ   DC   X'60',C'NSOLO     ',X'1D60'\n         DC   C'Solicited and unsolicited messages to be displayed'\n*\n         DC   X'11&L(18)1D'\nHELPL    DC   X'60',C' LOGD     ',X'1D60'\n         DC   C'Display cmd responses to be logged if master terminal'\n         DC   X'11&L(19)1D'\nHELPLZ   DC   X'60',C'NLOGD     ',X'1D60'\n         DC   C'Display cmd responses not to be logged (except PF11)'\n*\n         DC   X'11&L(24)',C'            '\n         DC   C'NOTE:  ',X'1DE8'\n         DC   C'INTENSIFIED',X'1D60',C'OPTIONS ARE IN FORCE'\nHELPML2  EQU   *-HELPM2\n*\n*                             TRT TABLE FOR RANGE NOTATION CHECK\nTRTTAB   DC    64X'00'        ADDRESSED VIA ADCON @TRTTAB\n         DC    X'02'               C' '   DELIM\n         DC    10X'00'\n         DC    X'01'               C'.'   RANGE\n         DC    18X'00'\n         DC    X'01'               C';'   RANGE\n         DC    X'00'\n         DC    X'01'               C'-'   RANGE\n         SPACE\n         DC    X'01'               C'/'   RANGE\n         DC    9X'00'\n         DC    X'02'               C','   DELIM\n         DC    14X'00'\n         DC    X'01'               C':'   RANGE\n         DC    133X'00'\nLERRRPL  DC    CL120'STATERPL   '  COPY OF READ ONLY RPL\n*\n*\n***********************************************************************\n*        DATA AREAS FOR HARD COPY LOG                                 *\n***********************************************************************\n*\nLOGREC   DSECT                    LOG BUILD AREA\nLOGRDW   DS    2H                 DESCRIPTOR WORD\nLOGASA   DS    C                  ASA CNTL CHAR\nLOGTXT   DS    CL132              TEXT BUFFER\n         ORG   LOGTXT\nLOGWTLHD DS    CL4                PAD TO ALIGN NETOP LINES IN SYSLOG\nLOGTIME  DS    CL8                TERMINAL NAME\nLOGBL1   DS    CL1\nLOGTIML  EQU   *-LOGASA           LOG TIME PREFIX LENGTH\nLOGNODE  DS    CL8                TERMINAL NAME\nLOGBL2   DS    CL2\nLOGPRFL  EQU   *-LOGRDW           LOG TOTAL PREFIX LENGTH\nLOGMSG   DS    CL97               COMMAND/MESSAGE TEXT\n         ORG   LOGMSG+20\nLOGLIT   DS    CL9                'NETOP LOG' IN HDR\n         ORG   LOGMSG+87\nLOGDLIT  DS    CL5                'DATE ' IN HDR\nLOGDATE  DS    CL5                YYYDD IN HDR\n         ORG\nLOGCONT  EQU   LOGTXT+131,1       RECORD TRUNCATED=>'+' INSERTED HERE\n         END\n./ ADD NAME=NETSOL,SSI=00084141\n         MACRO\n&LABEL   $CMD  &GAPPL,&VAPPL,&ROUT,&CMDTEXT,&CMDFLAG\n.*\n.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S COMMAND LOOK-UP TABLE.\n.*\n.*  INPUT    : &GAPPL   - GENERALIZED APPLICATION NAME.\n.*             &VAPPL   - ASSOCIATED VTAM APPLICATION NAME.\n.*             &ROUT    - ROUTINE TO PROCESS THE COMMAND.\n.*             &CMDTEXT - COMMAND ENTERED FROM TERMINAL.\n.*             &CMDFLAG - COMMAND FLAG BYTE.\n.*\n.*  OUTPUT   : AN ENTRY IN NETSOL'S COMMAND ENTRY TABLE IS GENERATED.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : APR  15/81\n.*\n         LCLA  &L\n&L       SETA  K'&CMDTEXT-2\n&LABEL   DC    CL8'&GAPPL',CL8'&VAPPL',CL8&CMDTEXT,AL4(&ROUT),AL2(&L),AX\n               L1(&CMDFLAG,0)\n         MEND\n         MACRO\n&LABEL   $GP   &GPLEN,&ERRTEXT,&GPFLAG\n.*\n.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S GETPARM OPTION LIST.\n.*\n.*  INPUT    : &GPLEN   - MAXIMUM LENGTH OF PARAMETER.\n.*             &ERRTEXT - TEXT FOR ERROR MSG FROM GETPARM ROUTINE.\n.*             &GPFLAG  - OPTION BYTE FOR GETPARM.\n.*\n.*  OUTPUT   : A PARAMETER OPTION LIST\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : JUNE 19/81\n.*\n         LCLA  &L\n&L       SETA  K'&ERRTEXT-2\n&LABEL   DC    AL2(&GPLEN,&L),AL1(&GPFLAG),CL&L&ERRTEXT\n         MEND\n         SPACE 2\n         COPY $3270INT\n         SPACE 2\n         TITLE '*****************    N E T S O L'\n***********************************************************************\n*                                                                     *\n*                  *****************                                  *\n*                                                                     *\n*                    N E T W O R K                                    *\n*                                                                     *\n*                  S O L I C I T O R                                  *\n*                                                                     *\n*                   ( N E T S O L )                                   *\n*                                                                     *\n*                                                                     *\n*  ENTRY PARAMETERS:  R15  -  ENTRY POINT ADDRESS                     *\n*                     R13  -  CALLERS SAVE AREA (FROM ATTACH)         *\n*                     R14  -  RETURN ADDRESS (POINTS TO SVC 3 IN CASE *\n*                             OF ATTACH BY NET)                       *\n*                     R0-R12  NOT USED                                *\n*                                                                     *\n*  EXIT PARAMETERS:   R0-R14  SAME AS ENTRY TO NETSOL                 *\n*                     R15     ZERO                                    *\n*                                                                     *\n*  FUNCTION:  NETSOL IS USED TO HANDLE TERMINAL INITIATED LOGONS      *\n*             AND AS SUCH SOLICITS LOGON DATA FROM THE TERMINALS      *\n*             UNDER ITS CONTROL.                                      *\n*                                                                     *\n*             WITH THE ABOVE DATA, NETSOL CAN PASS CONTROL OF THE     *\n*             LOGICAL UNIT FROM NETSOL'S CONTROL TO THAT OF THE       *\n*             REQUESTED APPLICATION.                                  *\n*                                                                     *\n*             TO FACILITATE ENDUSER EASE OF USE, NETSOL HAS A TABLE   *\n*             OF APPLICATIONS THAT USE NON-STANDARD LOGMODE TABLE     *\n*             ENTRIES. WHEN THE USER REQUESTS ONE OF THESE            *\n*             APPLICATIONS, NETSOL LOADS THE APPROPRIATE LOGMODE      *\n*             NAME FROM THE TABLE AND PASSWS THIS INFORMATION         *\n*             TO THE APPLICATION DURING THE CLSDST(PASS). THE ENDUSER *\n*             IS NOT REQUIRED TO KNOW ABOUT LOGMODE TABLES. THE       *\n*             NAME OF THIS TABLE IS 'LOGMDTAB'.                       *\n*                                                                     *\n*             THE 'LOGOFF' COMMAND HAS BEEN ADDED TO NETSOL TO ALLOW  *\n*             8100-ATTACHED TERMINALS TO DISCONNECT FROM NETSOL. 8100 *\n*             TERMINALS ARE GENNED WITH A NULL 'LOGAPPL'. LOGOFF     .*\n*             ENTERED AT A STANDARD 3270 TERMINAL, WILL HAVE NO       *\n*             EFFECT SINCE LOGAPPL=NETSOL FOR THESE TERMINALS.        *\n*                                                                     *\n*             ERROR MESSAGES CAN BE ISSUED AT VARIOUS STAGES OF THIS  *\n*             PROCESS IF THE APPLICATION IS INACTIVE, LOGON DATA      *\n*             ENTERED IS INVALID, APPLICATION WON'T ACCEPT LOGONS,ETC.*\n*             ALL ERROR MESSAGES ISSUED BY NETSOL ARE PREFIXED WITH   *\n*             THE CHARACTER STRING 'BCSC'.                            *\n*                                                                     *\n*             TO AID IN DEBUGGING, NETSOL ALSO WRITES SOME MESSAGES   *\n*             TO THE OPERATORS CONSOLE WHEN ERRORS AE DETECTED AS A   *\n*             RESULT OF I/O ERRORS, INVALID LOGONS, ETC.              *\n*                                                                     *\n*             NETSOL SUPPORTS BISYNC AND SDLC 3270 DEVICES (3276'S,   *\n*             3275'S, 3276'S, AND 3278'S).                            *\n*                                                                     *\n*             NETSOL USES RECORD MODE I/O TO TALK TO ITS TERMINALS    *\n*             SO IT DOES NOT SUPPORT ANY TERMINALS THAT CAN BE        *\n*             ACCESSED VIA BASIC MODE I/O ONLY.                       *\n*                                                                     *\n*             TO AID IN CONTROLLING THE TERMINALS LOGGED ON TO        *\n*             NETSOL, NETSOL MAINTAINS A TERMINAL TABLE WHICH HAS     *\n*             AN ENTRY FOR EACH TERMINAL THAT HAS BEEN LOGGED ON      *\n*             AT ANY TIME SINCE NETSOL WAS FIRST BROUGHT UP. THESE    *\n*             TERMINAL TABLE ENTRIES (TTE'S) ARE USED TO PROVIDE      *\n*             A MEANS OF TRANSLATING A GIVEN CID TO THE LU NAME AND   *\n*             WHEN THE RELEASE-REQUEUE (RELREQ) EXIT NEEDS TO KNOW    *\n*             THE STATUS OF A GIVEN TERMINAL (IE IS IT TRYING TO      *\n*             DO A LOGON).                                            *\n*                                                                     *\n*             MOST OF NETSOL'S FUNCTIONS ARE PERFORMED IN VARIOUS     *\n*             EXITS AS FOLLOWS:                                       *\n*                                                                     *\n*             1) TPEND EXIT        - HANDLE 'Z NET' FUNCTION          *\n*                                    WHERE NETSOL IS TO SHUT DOWN.    *\n*                                                                     *\n*             2) LOGON EXIT        - HANDLES TERMINALS BEING LOGGED   *\n*                                    ON TO NETSOL. BUILDS OR UPDATES  *\n*                                    TTE, DOES OPNDST(ACCEPT), AND    *\n*                                    SENDS THE FORMATTED LOGON SCREEN *\n*                                    TO THE TERMINAL.                 *\n*                                                                     *\n*             3) LOSTERM EXIT      - HANDLE 'LOST TERMINAL' CONDITIONS*\n*                                    DUE TO LU/PU/LINK/NCP FAILURES.  *\n*                                    DEPENDING ON THE CONDITION, MAY  *\n*                                    ATTEMPT TO RECOVER THE TERMINAL. *\n*                                                                     *\n*             4) RELREQ EXIT       - HANDLE RELEASE-REQUEUE REQUESTS  *\n*                                    WHERE ANOTHER VTAM APPLICATION   *\n*                                    WANTS THE TERMINAL OWNED BY      *\n*                                    NETSOL. UNLESS A LOGON IS TAKING *\n*                                    PLACE, NETSOL RELEASES THE LU.   *\n*                                                                     *\n*             AS WELL, A NUMBER OF RPL EXITS ARE USED TO HANDLE       *\n*             RPL COMMANDS THAT ARE DONE ASYNCHRONOUSLY VIA RPL'S     *\n*             THAT ARE GETMAINED WHEN NEEDED. THESE EXITS ARE:        *\n*                                                                     *\n*             1) OPNDST END EXIT   - ENTERED WHEN AN ASYNCHRONOUS     *\n*                                    OPDNST TO A SPECIFIC TERMINAL    *\n*                                    COMPLETES.                       *\n*                                                                     *\n*             2) RECEIVE END EXIT  - ENTERED WHEN A RECEIVE(ANY) RPL  *\n*                                    IS POSTED COMPLETE. EXAMINES THE *\n*                                    DATA ENTERED FOR A LOGON REQUEST *\n*                                    FROM THE TERMINAL USER.          *\n*                                                                     *\n*             3) END OF SEND EXIT  - ENTERED WHEN AN ASYNCHRONOUS     *\n*                                    SEND TO THE TERMINAL COMPLETES.  *\n*                                                                     *\n*             4) CLSDST(PASS) END  - ENTERED WHEN THE CLSDST(PASS)    *\n*                                    COMPLETES THAT PASSES CONTROL    *\n*                                    TO THE APPLICATION REQUESTED.    *\n*                                    NETSOL RE-ISSUES SIMLOGON TO     *\n*                                    GAIN CONTROL BACK WHEN USER      *\n*                                    LOGS OFF THE APPLICATION         *\n*                                                                     *\n*             5) CLSDST(RELEASE)   - ENTERED WHEN CLSDST(RELEASE)     *\n*                                    COMPLETES. DONE DUE TO RELREQ    *\n*                                    REQUEST OR I/O ERRORS.           *\n*                                                                     *\n*             AS WELL, NETSOL MAKES USE OF A NUMBER OF SUBROUTINES    *\n*             AS FOLLOWS:                                             *\n*                                                                     *\n*             1) GETRPL            - OBTAIN DYNAMIC RPLS VIA A        *\n*                                    GETMAIN FROM SUBPOOL 1           *\n*                                                                     *\n*             2) FREERPL           - FREEMAIN DYNAMIC RPL'S           *\n*                                                                     *\n*             3) RECSUB            - ISSUE RECEIVE ANY'S              *\n*                                                                     *\n*             4) ERROR EXIT        - HANDLES ERRORS WHEN A CHECK      *\n*                                    MACRO IS USED ON AN ASYNC RPL    *\n*                                    OR A SYNC RPL COMPLETES. PASSES  *\n*                                    BACK RETURN CODES AND A MODIFIER *\n*                                    (USUALLY ERROR MESSAGE NUMBER)   *\n*                                    TO CODE AFTER THE INSTRUCTION    *\n*                                    THAT MADE THE MACRO CALL         *\n*                                                                     *\n*                                                                     *\n*  REGISTER USAGE:                                                    *\n*                                                                     *\n*         R0  - ERROR MESSAGE NUMBER, PARAMETERS, SVC'S, ETC          *\n*         R1  - PARAMETERS TO MACROS, SVC'S                           *\n*         R2  - WORK                                                  *\n*         R3  - -> TTE IN MOST CASES / WORK                           *\n*         R4  - WORK                                                  *\n*         R5  - -> DYNAMIC RPL / SYNCHRONOUS RPL                      *\n*         R6  - WORK                                                  *\n*         R7  - WORK  (ADDRESS OF ERROR SOMETIMES ON BAL R7,SNOCCUR)  *\n*         R8  - -> ASYNCHRONOUS / SYNCHRONOUS NIB                     *\n*         R9  - -> DDT WHEN DOING DEVICE DEP WORK / WORK              *\n*         R10 - BASE REGISTER 3                                       *\n*         R11 - BASE REGISTER 2                                       *\n*         R12 - BASE REGISTER 1                                       *\n*         R13 - ADDRESS OF SAVE AREA (USUALLY IN DYNAMIC RPL)         *\n*         R14 - RETURN ADDRESS                                        *\n*         R15 - ENTRY POINT, RETURN CODES                             *\n*                                                                     *\n*                                                                     *\n*  ATTRIBUTES: SERIALLY REUSEABLE , NON-AUTHORIZED, VTAM APPLICATION  *\n*                                                                     *\n*  CONTROL BLOCK DEPENDENCIES: RPL, ACB, NIB, EXIT PARAMETER LISTS    *\n*                                                                     *\n*  ROUTINES CALLED: NONE                                              *\n*                                                                     *\n*  ********* MACROS USED: DCLSW, GOIF, SET, RESET, EXECUTE            *\n*                                                                     *\n*  SYSTEM MACROS USED: SAVE, GETMAIN, FREEMAIN, STIMER, OPEN,         *\n*                      WAIT, WTO, CLOSE, ABEND, POST, CHECK           *\n*                                                                     *\n*  VTAM MACROS USED:  SETLOGON, OPNDST, INTRPRET, INQUIRE,            *\n*                     GENCB, CLSDST, SIMLOGON, SEND, RECEIVE          *\n*                                                                     *\n*  MESSAGES TO TERMINAL USER:                                         *\n*                                                                     *\n*             LOGON SCREEN WITH BCSC LOGO.                            *\n*                                        ENTERED BY THE TERMINAL USER)*\n*                                                                     *\n*             BCSC101          LOGMODE ENTRY UNDEFINED                *\n*                                                                     *\n*             BCSC102 INVALID LOGON SEQUENCE , REENTER                *\n*                                                                     *\n*             BCSC103 NO INTERPRET TABLE SPECIFIED FOR LU             *\n*                                                                     *\n*             BCSC104 NO INTERPRET ROUTINE TO RECOGNIZE APPLICATION   *\n*                                                                     *\n*             BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION          *\n*                                                                     *\n*             BCSC106 LOGON IN PROGRESS                               *\n*                                                                     *\n*             BCSC107 XXXXXXXX NOT DEFINED TO VTAM                    *\n*                                                                     *\n*             BCSC108 XXXXXXXX IS NOT ACTIVE OR LOGMODE INVALID       *\n*                                                                     *\n*             BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS             *\n*                                                                     *\n*             BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS                 *\n*                                                                     *\n*             BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS       *\n*                                                                     *\n*                                                                     *\n*  MESSAGES TO THE SYSTEM OPERATOR:                                   *\n*                                                                     *\n*             BCSC001 TERM=******** HAS BEEN RELEASED BY NETSOL       *\n*                     DUE TO I/O ERROR                                *\n*                                                                     *\n*             BCSC002 RC=42 ON NETSOL CLOSE ACB                       *\n*                                                                     *\n*             BCSC003 SYNAD/LERAD EXIT REQ=**,FBDK2=**,SSENSEI=**,    *\n*                     SSENSMI=**,SENSE=****,TERM=********             *\n*                                                                     *\n*             BCSC004 LOSTERM ENTRY CODE ** FOR TERM=********         *\n*                                                                     *\n*             BCSC005 TERM=******** RELEASED DUE TO RELREQ REQUEST    *\n*                                                                     *\n*             BCSC006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS    *\n*                     PROGRAM IS TERMINATED.                          *\n*                                                                     *\n*             BCSC007 TERM=******** NOT RELEASED BY RELREQ EXIT       *\n*                                                                     *\n*  USER ABEND CODES:  U0001 - PROBLEM WITH OPEN OF THE ACB            *\n*                     U0002 - SETLOGON FAILED                         *\n*                     U0004 - RETURN CODE/SENSE CODE NOT EXPECTED     *\n*                     U0008 - PROBLEM WITH THE TERMINAL TABLE (TTE)   *\n*                                                                     *\n*                                                                     *\n*  RESTRICTIONS:                                                      *\n*                                                                     *\n*        1) THE TERMINAL TABLE HAS ONLY ROOM FOR 256 TERMINALS (4K),  *\n*           IF MORE ARE NEEDED, THE CONSTANT 'TERMLTAB' WILL HAVE TO  *\n*           BE CHANGED WITH A ZAP OR BY RE-ASSEMBLY OF NETSOL.        *\n*                                                                     *\n*        2) ONLY RECORD MODE DEVICES ARE CURRENTLY SUPPORTED.         *\n*                                                                     *\n*        3) NO DEVICES ARE CURRENTLY SUPPORTED THAT DO NOT SEND       *\n*           3270 CONTROL CHARACTERS (EG SBA X'11'). LOGON CODE        *\n*           WOULD HAVE TO BE CHANGED TO SUPPORT THEM.                 *\n*                                                                     *\n*        4) ANY FIELDS IN THE RPL WORK AREA THAT NEED TO BE ZERO      *\n*           INITIALLY SHOULD BE PLACED AHEAD OF THE I/O AREAS AS      *\n*           THESE ARE NOT INITIALIZED. IF THE AMOUNT TO BE            *\n*           INITIALIZED EXCEEDS 256 BYTES, THE INITIALIZATION AND     *\n*           COPY CODE IN GETRPL AND ERREXIT WILL HAVE TO BE CHANGED.  *\n*                                                                     *\n*        5) NETSOL ASSUMES THAT IT CAN ONLY HAVE ITS LOSTERM EXIT     *\n*           ENTERED FOR TERMINALS WHOSE CID'S CAN BE FOUND IN THE     *\n*           TERMINAL TABLE. A U0008 ABEND WILL OCCUR IF NOT FOUND.    *\n*                                                                     *\n*        6) NETSOL OBTAINS THE SYSTEM ID FOR CHANGING '***OLT**'      *\n*           APPLICATION ID'S USING SVC 253. IF THIS FUNCTION CHANGES, *\n*           NETSOL WILL HAVE TO BE LOOK AT                            *\n*                                                                     *\n*        7) BE CAREFUL OF CHANGING CODE THAT SETS BRACKET STATES AS   *\n*           YOU MAY CAUSE ERRORS ON THE 3276 (MUST SEND BCSC106 WITH  *\n*           AND END BRACKET BECAUSE IF THE CLSDST(PASS) FAILS AND WE  *\n*           SEND AN ERROR MESSAGE (BCSC108) TO THE 3276, GET A X'0404'*\n*           WITH A SENSE OF '081B' INDICATING BAD STATE).             *\n*                                                                     *\n*                                                                     *\n*  VERSION:  *********  NETSOL   DC18202                              *\n*                                                                     *\n*  LAST UPDATE: FEB 27, 1979\n*                                                                     *\n*                                                                     *\n*        F O R   F U R T H E R   I N F O R M A T I O N   O N          *\n*          T H I S   P R O D U C T   S E E   T H E                    *\n*              N E T S O L   D O C U M E N T A T I O N                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         TITLE '*********  N E T S O L  -  INITIAL DECLARATIONS'      *\n         SPACE 2\n         TITLE '*********  N E T S O L  -  MAINLINE'\nNETSOL   CSECT\n         SPACE 2\n***********************************************************************\n*        NETSOL MAIN-LINE CODE INITIALIZATION                         *\n*        REQUIRES OS/VS2 MVS RELEASE 3.7 + ACF/VTAM (SU 35+40)        *\n***********************************************************************\n         SPACE 2\nSTART    B     STM-START(0,15)         JUMP OVER APPL NAME\nNSNAME   DC    AL1(8),CL8'NETSOL70'    LOGON APPLID NAME FOR NETSOL\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'//&SYSTIME/'        ASSEMBLY TIME\nSTM      STM   14,12,12(13)            SAVE REGISTERS\n         LR    R12,R15                 LOAD 1ST BASE REGISTER\n         USING START,R12,R11,R10       TELL ASSEMBLER\n         LM    R10,R11,RESTBASE        REST OF BASES\n         ST    R13,MAINSAVE+4          CHAIN SAVE AREAS\n         LR    R15,R13\n         LA    R13,MAINSAVE            POINT R13 TO NS SAVE AREA\n         ST    R13,8(,R15)             FORWARD SAVE AREA CHAIN\n         SPACE 2\n         USING IFGRPL,PTRRPL           => R P L\n         USING ISTDNIB,PTRNIB          => N I B\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE\n         SPACE 2\n***********************************************************************\n*        IF THE APPLID FIELD DOESN'T CONTAIN 'NETSOL' FOR THE         *\n*        APPLICATION NAME, THIS CODE WILL MOVE THE CONTENTS OF NSNAME *\n*        INTO MESSAGE 12 FOR EACH OF THE SUPPORTED DEVICES TO ALLOW   *\n*        FOR EASY VISUAL IDENTIFICATION OF THE TEST VERSION OF NETSOL.*\n***********************************************************************\n         SPACE 1\n         CLC   NSNAME+1(8),=CL8'NETSOL' PRODUCTION VERSION OF NETSOL?\n         BE    GETTAB                   YES => BR TO GET TERM TABLE\n         L     R1,=AL4(S32NSNAM)        NO  => UPDATE 3270\n         MVC   0(8,R1),NSNAME+1                   MSG 12\n         L     R1,=AL4(S3ENSNAM)        NO  => UPDATE 3270 EXTENDED\n         MVC   0(8,R1),NSNAME+1                   MSG 12\n         L     R1,=AL4(S37NSNAM)        NO  => UPDATE 3767\n         MVC   0(8,R1),NSNAME+1                   MSG 12\n*        SPACE 2\n***********************************************************************\n*        OBTAIN SPACE FROM SUBPOOL 2 FOR THE TERMINAL TABLE. THIS     *\n*        TABLE IS USED TO MAINTAIN THE TERMINAL NAME, CID, AND LOGON  *\n*        STATUS FOR ALL TERMINALS CONNECTED TO NETSOL. BY USING THIS  *\n*        TABLE AND PROVIDING ENTRY ADDRESS IN THE RPL USER FIELD, WE  *\n*        SAVE ON HAVING TO DO CID TRANSLATES FOR NAMES.               *\n***********************************************************************\n         SPACE 1\nGETTAB   L     R0,TERMLTAB             GET LENGTH FOR GETMAIN\n         ICM   R0,8,=X'02'             ADD SUBPOOL=2 TO IT\n         GETMAIN R,LV=(0)              GET SPACE FOR TABLE\n         ST    R1,TERMTABS             SAVE STARTING ADDRESS\n         A     R1,TERMLTAB             COMPUTE END ADDRESS\n         ST    R1,TERMTEND             SAVE IT TOO\n         SPACE 1\nRTRYOPEN DS    0H\n         SR    R15,R15                 CLEAR RETURN-CODE REGISTER\n         OPEN  ACB                     CONNECT NETSOL TO VTAM\n         SPACE 2\n***********************************************************************\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *\n*   ERREXIT IS NOT ENTERED FOR OPEN ERROR.                            *\n***********************************************************************\n         SPACE 1\n         CLI   ACB+X'31',X'52'         HALT IN PROGRESS ?\n         BE    CLSOK                   YES, END THE TASK\n         LTR   R15,R15                 SUCCESSFUL OPEN ?\n         BZ    OPENOK                  YES, ALLOW LOGONS TO HAPPEN\n         SPACE 2\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'58' WHICH CAN HAPPEN IF     *\n*        THE OPERATOR HAS STARTED A SECOND COPY OF NETSOL. IN THIS\n*        CASE, TELL THE OPERATOR ABOUT HIS MISTAKE AND TERMINATE\n*        EXECUTION.                                                   *\n***********************************************************************\n         SPACE 1\n         CLI   ACB+X'31',X'58'         APPLID ALREADY IN USE?\n         BNE   OPENA5A                 NO => CHECK NEXT ERROR\n         WTO   MF=(E,LISTWTO6)         TELL OPERATOR HIS MISTAKE\n         B     FREETTE                 FREE TTE TABLE AND END\n         SPACE 2\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'5A' WHICH CAN HAPPEN IF     *\n*        VTAM IS JUST COMMING UP AND NETSOL'S APPLID IS NOT YET       *\n*        ACTIVE. IF THIS IS THE CASE, ISSUE A STIMER WAIT FOR\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n***********************************************************************\n         SPACE 1\nOPENA5A  CLI   ACB+X'31',X'5A'         CAN'T OPEN ACB YET ?\n         BE    OPENLOOP                NO, REAL OPEN ERROR\n         SPACE 2\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'5C' WHICH CAN HAPPEN IF     *\n*        VTAM IS DOWN. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n***********************************************************************\n         SPACE 1\n         CLI   ACB+X'31',X'5C'         CAN'T OPEN ACB YET ?\n         BE    OPENLOOP                NO, REAL OPEN ERROR\n         SPACE 2\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'70' WHICH CAN HAPPEN IF     *\n*        NETSOL ABENDS AND IS RE-ATTACHED BY VTAM AND VTAM HAS NOT    *\n*        YET SUCCESSFULLY FINISHED CLEANUP PROCESSING FOR             *\n*        NETSOL'S ACB. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n***********************************************************************\n         SPACE 1\n         CLI   ACB+X'31',X'70'         CAN'T OPEN ACB YET ?\n         BNE   OPENFAIL                NO, REAL OPEN ERROR\nOPENLOOP STIMER WAIT,BINTVL=WAIT1SEC   WAIT 1 SECOND, TRY AGAIN\n         B     RTRYOPEN                GO AND RETRY OPERATION\n         EJECT\n***********************************************************************\n*        READ THE INITIALIZATION FILE CONTAINING NETSOL COMMANDS      *\n*        WHICH ESTABLISH AUTO LOGON,WTO MSG DEFAULTS,ETC.             *\n*        AN ASYNC RPL WILL BE USED WHEN PROCESSING THESE INIT CMDS.   *\n***********************************************************************\n         SPACE 1\nOPENOK   DS    0H\n         BAL   R14,GETRPL              GET RPL FOR INIT CMD USE.\n         BAL   R14,READINIT            PROCESS INIT CMDS\n         BAL   R14,RECSUB              NOW REUSE RPL FOR RECEIVE\n         EJECT\n***********************************************************************\n*        BEFORE ALLOWING LOGONS TO TAKE PLACE ISSUE 10 RECEIVE ANY'S  *\n*        SO WE CAN HANDLE UP TO 10 LOGONS AT A TIME. WHEN THE RECEIVE *\n*        EXIT IS SCHEDULED, IT WILL ALSO RE-ISSUE A RECEIVE ANY WITH  *\n*        A NEW GOTTEN RPL.                                            *\n***********************************************************************\n         SPACE 1\n         LA    R2,9                    # OF RPLS FOR RECEIVES\nGETLOOP  BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE\n         BAL   R14,RECSUB              ISSUE RECEIVE ANY\n         BCT   R2,GETLOOP              LOOP TILL TEN DONE\n         LA    PTRRPL,SETLRPL          POINT TO RPL FOR WORKAREA\n         SPACE 2\n***********************************************************************\n*        ISSUE SETLOGON WITH START OPTION TO ALLOW LOGONS TO TAKE     *\n*        PLACE. ANY LOGONS QUEUED FOR NETSOL WILL NOW DRIVE NETSOL'S  *\n*        LOGON EXIT.                                                  *\n***********************************************************************\n         SPACE 1\nSLOGON   SETLOGON RPL=(PTRRPL),        SYNCH OPERATION. ACT-           X\n               OPTCD=START             IVATE LOGON EXIT.\n         SPACE 2\n***********************************************************************\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.  IF          *\n*   ERREXIT WAS ENTERED, THE VTAM FEEDBACK CODE IN REG 0 WAS          *\n*   PLACED IN REG 15 BEFORE RETURNING TO THE MAINLINE NSI.            *\n*   ERREXIT DID NOT CHANGE THE RETURN CODES TO ACTION CODES.          *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX8                NEED TO REISSUE?\n         BE    SLOGON                  YES.  DO IT\n         LTR   R15,R15                 SETLOGON ACCEPTED ?\n         BNZ   SETLFAIL                NO, BRANCH\n         LTR   R0,R0                   VALID COMPLETION?\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n***********************************************************************\n*    ALL FURTHER WORK IN NETSOL IS PERFORMED VIA ASYNCHRONOUS EXIT    *\n*    ROUTINES. THE MAINLINE CODE WAITS UPON AN ECB WHICH IS POSTED    *\n*    BY THE TPEND EXIT WHEN VTAM SHUTS DOWN NETSOL.                   *\n***********************************************************************\n         SPACE 1\n         WAIT  ECB=FINISECB            WAIT FOR VTAM END\n         EJECT\n***********************************************************************\n*        EXECUTION CONTINUES HERE WHEN ECB IS POSTED BY TPEND EXIT.   *\n***********************************************************************\n         SPACE 1\n         SR    R15,R15                 ZERO RC REG FOR CLOSE\n         CLOSE ACB                     RELEASE CONNECTION WITH\n         SPACE 2\n***********************************************************************\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *\n*   ERREXIT IS NOT ENTERED FOR CLSDSTERROR.                           *\n***********************************************************************\n         SPACE 1\n         LTR   R15,R15                 DID THE CLOSE GO?\n         BZ    CLSOK                   YES, EXIT\n         CLI   ACB+X'31',X'42'         CLOSE COMPLETE?\n         BNE   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         WTO MF=(E,LISTWTO1)           INFORM OPERATER\n         SPACE 2\n***********************************************************************\n*        SINCE WE DON'T KNOW HOW MANY RPL'S ARE OUTSTANDING (MAY BE   *\n*        MORE THAN 10), WE FREE THE WHOLE SUBPOOL OF RPL'S AND DO THE *\n*        SAME FOR THE TERMINAL TABLE AS WELL.                         *\n***********************************************************************\n         SPACE 1\nCLSOK    FREEMAIN R,SP=1               FREE DYNAMIC RPL SPACE\n         SPACE 1\nFREETTE  FREEMAIN R,SP=2               FREE TERMINAL TABLE SPACE\n         SPACE 1\n         L     R13,MAINSAVE+4          FIND INPUT SAVE AREA\n         SR    R14,R14                 CLEAR FORWARD SAVE\n         ST    R14,8(,R13)             AREA CHAIN PTR\n         LM    R14,R12,12(R13)         LOAD INPUT REGS\n         SR    R15,R15                 RCODE=0 FOR NORMAL RTN\n*        RETURN\n         BR    14                      RETURN TO CALLER OR ATTACHER\n         EJECT\n***********************************************************************\n*        THE FOLOWING CODE IS BRANCHED TO FROM THE MAIN-LINE CODE,    *\n*        EXIT CODE, AND FROM THE ERREXIT ROUTINE.  THE ONLY ACTION    *\n*        TAKEN SINCE THE CASES ARE 'SHOULD NOT OCCUR' CONDITIONS, IS  *\n*        TO ABNORMALLY TERMINATE NETSOL WITH A REASON CODE IN         *\n*        DUMPFLAG AND CAUSE A DUMP TO BE TAKEN.                       *\n***********************************************************************\n         SPACE 1\nOPENFAIL DS    0H                      OPEN-ACB IN MAIN-LINE FAILED\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         MVI   DUMPFLAG,OPENCODE       SAVE NETSOL DUMP CODE\n         B     DUMP                    BRANCH\n         SPACE 1\nSETLFAIL DS    0H                      SETLOGON IN MAIN-LINE FAILED\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         MVI   DUMPFLAG,SETLCODE       SAVE NETSOL DUMP CODE\n         B     DUMP                    BRANCH\n         SPACE 1\nSNOCCUR  DS    0H                      REQUEST FAILED BECAUSE\n*                                       OF AN INVALID CONTROL\n*                                       BLOCK OR OTHER CON-\n*                                       DITION WHICH SHOULD\n*                                       NOT OCCUR\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         CLOSE ACB                     AVOID OPEN FAILURE ON\n*                                      RE-DISPATCH OF SUBTASK\n         MVI   DUMPFLAG,CBLKCODE       SAVE NETSOL DUMP CODE\n         B     DUMP\n         SPACE 1\nTOOSMALL STM   R0,R15,SNOREGS          SAVE REGS\n         MVI   DUMPFLAG,TABLTRBL       TROUBLE WITH TTE\n         B     DUMP\n         SPACE 1\nDUMP     DS    0H                      TERMINATE WITH A DUMP\n         SR    R1,R1                   PUT REASON CODE IN REG 1\n         IC    R1,DUMPFLAG\n         SPACE 1\n         ABEND (1),DUMP\n         TITLE '*********  N E T S O L  -  MAINLINE DATA AREAS'\nMAINSAVE DS    18F                     SAVE AREA FOR MAINLINE\nRESTBASE DC    A(START+8192,START+4096) REST OF BASE REG VALUES\nWAIT1SEC DC    F'100'                  WAIT TIME OF 1.00 SECS\nTERMTABS DC    A(0)                    START OF TERMINAL TABLE  FOR\nTERMTABI DC    A(TERMELEN)             INDEX VALUE              BXLE\nTERMTABE DC    A(0)                    LAST ENTRY USED ADDRESS  USE\nTERMLTAB DC    A(768*TERMELEN)         SIZE OF TABLE (ENTRIES*LENGTH)\nTERMTEND DC    A(0)                    END OF TABLE + 1\n         EJECT\n         TITLE '*********  N E T S O L  - READ INITIALIZATION COMMANDS'\n***********************************************************************\n*                                                                     *\n*    READINIT PROCESSES THE NETSOL COMMANDS IN THE SYSIN FILE.        *\n*    COMMANDS WHICH CAN BE PLACED IN THIS FILE ARE FLAGGED            *\n*    WITH 'CMDINIT' IN THEIR CMD TABLE ENTRY.                         *\n*                                                                     *\n*    TO ALLOW COMMAND PROCESSING ROUTINES TO BE INDEPENDENT OF THEIR  *\n*    SOURCE, ALL COMMAND PROCESSORS ASSUME A DDT,TTE AND ASYNC RPL    *\n*    AVAILABLE FOR THEIR USE. THEREFORE, THESE CONTROL BLOCKS HAVE    *\n*    BEEN SET UP FOR READINIT.                                        *\n*                                                                     *\n*    INPUT : R5  - A(ASYNC RPL)                                       *\n*            R13 - A(SAVE AREA)                                       *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : REGISTERS ARE UNCHANGED                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\nREADINIT DS    0H\n         SPACE 1\n         STM   R14,R12,12(R13)         SET\n         ST    R13,RPLSAVE+4             UP\n         LA    R1,RPLSAVE                  SAVE\n         ST    R1,8(,R13)                    AREA\n         LR    R13,R1                          CHAIN\n         SPACE 1\n*        OPEN SYSIN AND SYSOUT FILES. NETSOL WILL CONTINUE EXECUTION\n*        EVEN WITH ERRORS IN THE INIT FILE.\n         SPACE 1\n         OPEN  (SYSINDCB,(INPUT),SYSOUDCB,(OUTPUT)) OPEN FILES\n         TM    SYSINDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSIN OPEN?\n         BZ    DCBOSYSI                           NO => ERROR MSG\n         TM    SYSOUDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSOUT OPEN?\n         BNZ   RIOPENOK                           YES => BR TO CONTINUE\n         MVC   DCBMSG+12(6),=CL6'SYSOUT'  MOVE\n         B     *+10                        DDNAME\nDCBOSYSI MVC   DCBMSG+12(6),=CL6'SYSIN '      TO OPERATOR MSG\n         WTO   MF=(E,DCBMSG)             LOG ERROR MESSAGE ON SYSLOG\n         B     RIEXIT                    END PROCESSING\n         SPACE 1\n*        SET UP RPL,TTE AND DDT LINKS FOR INIT\n         SPACE 1\nRIOPENOK OI    UFLAGS,INIT               FLAG PROCESSING INITIALIZATION\n         LA    R3,TTEDUMMY               LOAD A(DUMMY TTE FOR INIT)\n         ST    R3,RPLUSFLD               SET UP RPL USER PTR\n         LA    R9,DDTSYSIN               LAOD A(DDT FOR INIT)\n         ST    R9,TERMDDT                SAVE IN TTE\n         SPACE 1\n*        PROCESS NETSOL COMMANDS FROM THE SYSIN FILE\n         SPACE 1\nREADLOOP LA    R6,IOAREA                 LOAD A(IO BUFFER)\n         GET   SYSINDCB,(R6)             READ CMD FROM SYSIN FILE\n         PUT   SYSOUDCB,(R6)             ECHO CMD TO SYSOUT FILE\n         LA    R2,80                     SET UP REG 2 WIH REC LENGTH\n         B     INTRPRET                  BR TO EDIT COMMAND\n         SPACE 1\n*        RETURN FROM CMD PROCESSING.\n*        R0 CONTAINS MSG INDEX FOR OUTPUT MSG\n         SPACE 1\nRIPUTMSG LR    R1,R0                   LOAD INDEX INTO R1\n         BCTR  R1,0                    INDEX - 1\n         SLL   R1,2                    4 * (INDEX - 1)\n*                                      = DISPLACEMENT OF MESSAGE\n         L     R2,DDTMSGTB(R1)         POINT TO MSG. ENTRY IN TABLE\n         LH    R1,0(,R2)               PICK UP MSG LENGTH\n         LA    R2,2(R2)                SKIP OVER MSG LENGTH\n*        MOVE MESSAGE TO OUTPUT BUFFER AND WRITE TO SYSOUT\n         MVI   IOAREA,X'40'            INITIALIZE BUFFER\n         MVC   IOAREA+1(79),IOAREA       WITH BLANKS\n         BCTR  R1,0                    MOVE MESSAGE\n         EX    R1,RIEX1                  TO OUTPUT BUFFER\n         PUT   SYSOUDCB,IOAREA         WRITE MESSAGE TO SYSOUT FILE\n         B     READLOOP                BR TO GET NEXT CMD\n         SPACE 1\n*        END OF DATA REACHED ON SYSIN FILE\n         SPACE 1\nEODSYSIN TM    UFLAGS,INITERR          ERROR WHILE PROCESSING CMD FILE\n         BNO   RICLOSE                 NO => CONTINUE\n         WTO   MF=(E,INITEMSG)         YES => LOG ERROR TO OPERATOR\nRICLOSE  CLOSE (SYSINDCB,,SYSOUDCB)    CLOSE SYSIN & SYSOUT\n         NI    UFLAGS,X'FF'-INIT       FLAG END OF INIT PROCESSING\n         SPACE 1\n*        EXIT FROM READINIT\n         SPACE 1\nRIEXIT   L     R13,4(,R13)             RESTORE\n         LM    R14,R12,12(R13)           REGISTERS\n         BR    R14                         AND RETURN\n         SPACE 5\nRIEX1    MVC   IOAREA(0),0(R2)         MOVE MSG TO OUTPUT BUFFER\n         TITLE '*********  N E T S O L  - GETPARM SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*    GETPARM LOCATES THE NEXT TEXT UNIT IN THE COMMAND BUFFER.        *\n*                                                                     *\n*    THIS TEXT UNIT IS VALIDATED FOR:                                 *\n*         A) MAXIMUM LENGTH                                           *\n*         B) REQUIRED PARAMETER                                       *\n*                                                                     *\n*    INPUT : R1  - A(PARAMETER OPTION LIST)                           *\n*            R2  - A(OUTPUT MSG BUFFER)                               *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : R1  - A(TEXT UNIT) OR GARBAGE IF ERROR                   *\n*            R15 - LENGTH OF TEXT UNIT                                *\n*                                                                     *\n*   RETURN : 0(R14) - VALID TEXT UNIT FOUND                           *\n*            4(R14) - NO TEXT UNIT FOUND (IF PARAMETER IS OPTIONAL)   *\n*            8(R14) - ERROR DETECTED WHILE PROCESSING TEXT UNIT       *\n*                                                                     *\n***********************************************************************\nGETPARM  DS    0H\n         SPACE 1\n         ST    R1,GPPARM          SAVE A(PARM OPTION LIST)\n         SPACE 1\n*        CHECK FOR NO DATA LEFT IN COMMAND BUFFER\n         SPACE 1\n         LH    R6,GPDATAL         GET LENGTH OF REMAINING DATA\n         LTR   R6,R6              ANY DATA LEFT?\n         BZ    GPNODATA           NO => BR TO HANDLE\n         SPACE 1\n*        FIND NEXT TEXT UNIT IN COMMAND BUFFER\n         SPACE 1\n         L     R7,GPDATAP         LOAD A(CURRENT OFFSET IN CMD BUFFER)\nGRPLOOP1 CLI   0(R7),X'40'        FIND\n         BNZ   GPNONBLK             FIRST\n         LA    R7,1(,R7)              NON\n         BCT   R6,GRPLOOP1              BLANK\n         B     GPNODATA                   CHARACTER\n         SPACE 1\n*        FIND END OF TEXT UNIT\n         SPACE 1\nGPNONBLK LR    R1,R7              SET TEXT UNIT PTR\nGPLOOP2  CLI   0(R7),X'40'        FIND\n         BE    GPGOTIT              LAST\n         LA    R7,1(,R7)              NON-BLANK\n         BCT   R6,GPLOOP2               CHARACTER\n         SPACE 1\n*        NEXT TEXT UNIT HAS BEEN FOUND\n         SPACE 1\nGPGOTIT  ST    R7,GPDATAP         SAVE CURRENT OFFSET IN CMD BUFFER\n         STH   R6,GPDATAL         SAVE LENGTH OF REMAINING DATA\n         SR    R7,R1              CALC LENGTH OF THE TEXT UNIT\n         LR    R15,R7               & MOVE TO REG 15\n         B     GPCHKOPT           BR TO VALIDATE PARM OPTIONS\n         SPACE 1\nGPNODATA SR    R15,R15            INDICATE NO TEXT UNIT\n         SPACE 1\n*        VALIDATE THE PARAMETER OPTIONS FOR THE TEXT UNIT\n         SPACE 1\nGPCHKOPT L     R6,GPPARM          LOAD A(OPTION LIST)\n         CH    R15,GPLEN(,R6)     TU > MAX ALLOWED?\n         BNH   GPCHK10            NO => BR TO NEXT CHECK\n         MVC   0(L'GPMSG1,R2),GPMSG1 MOVE ERR MSG TO BUFFER\n         CH    R15,=H'8'          MOVE\n         BNH   *+8                  MAX 8\n         LA    R15,8                  CHARACTERS\n         BCTR  R15,0                    OF TEXT UNIT\n         EX    R15,GPEX1                  TO ERROR MSG\n         LA    R1,L'GPMSG1(,R2)   POINT TO END OF ERROR MSG\n         B     GPERRTXT           BR TO MOVE KEYWORD TO MSG\n         SPACE 1\nGPCHK10  LTR   R15,R15            WAS THERE A TEXT UNIT?\n         BNZ   GPXFND             YES => EXIT NORMAL\n         TM    GPFLAG(R6),GPOPT   WAS PARAMETER OPTIONAL?\n         BNZ   GPXZERO            YES => EXIT NO PARM\n         MVC   0(L'GPMSG2,R2),GPMSG2 NO => MOVE ERR MSG\n         LA    R1,L'GPMSG2(,R2)   POINT TO END OF ERROR MSG\n         SPACE 1\nGPERRTXT LH    R7,GPTEXTL(,R6)    GET LENGTH OF TEXT IN OPT LIST\n         BCTR  R7,0               DECREMENT FOR MOVE\n         EX    R7,GPEX2           ADD OPTION LIST TEXT TO ERR MSG\n         SPACE 1\n         B     8(,R14)            TAKE ERROR RETURN\n         SPACE 1\nGPXZERO  B     4(,R14)            RETURN WITH NO TEXT UNIT\n         SPACE 1\nGPXFND   BR    R14                RETURN WITH TEXT UNIT FOUND\n         SPACE 5\nGPEX1    MVC   0(0,R2),0(R1)      MOVE TEXT UNIT TO ERROR MSG\nGPEX2    MVC   0(0,R1),GPTEXT(R6) MOVE OPT LIST TEXT TO ERROR MSG\nGPMSG1   DC    C'XXXXXXXX IS TOO BIG FOR '\nGPMSG2   DC    C'MISSING PARAMETER '\n         TITLE '*********  N E T S O L  - INIT MSG13 SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*    INITMSG4 LOCATES AND INITIALIZES THE MSG4 OUTPUT BUFFER.         *\n*                                                                     *\n*    INPUT : R9  - A(DDT)                                             *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : R2  - A(MSG13 OUTPUT BUFFER)                             *\n*                                                                     *\n***********************************************************************\nINITMSG4 DS    0H\n         SPACE 1\n         L     R2,DDTM4OFS        GET A(MSG13)\n         LH    R1,DDTM4L          LOAD LENGTH OF MSG13 BUFFER\n         MVI   0(R2),X'40'        INSERT 1ST BLANK\n         BCTR  R1,0               DECREMENT LENGTH\n         BCTR  R1,0               DECREMENT LENGTH\n         EX    R1,INITM4X         INIT REST OF BUFFER\n         SPACE 1\n         BR    R14\n         SPACE 5\nINITM4X  MVC   1(0,R2),0(R2)      PROPOGATE BLANK THRU OUT BUFFER\n         TITLE '*********  N E T S O L  - SETLOGON COMMAND'\n***********************************************************************\n*                                                                     *\n*    SETLOGON SETS UP THE AUTOMATIC LOGON APPLICATION FOR A NODE.     *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        SETLOGON NODENAME APPLID                                     *\n*                                                                     *\n*    IF THE APPLID IS OMITTED, THEN THE LOGAPPL RESET TO NOTHING.     *\n*                                                                     *\n*    INPUT : NO PARAMETERS                                            *\n*                                                                     *\n*   OUTPUT : R0  - INDEX INTO DDT MSG TABLE                           *\n*                                                                     *\n***********************************************************************\nSETLOGON DS    0H\n         SPACE 1\n         BAL   R14,INITMSG4       OBTAIN MSG4  BUFFER\n         SPACE 1\n*        GET NODENAME\n         SPACE 1\n         LA    R1,SLNODE          LOAD A(OPTION LIST)\n         BAL   R14,GETPARM        GO GET NODE NAME\n         B     *+12               +0 - FOUND IT\n         B     SLXERR             +4 - NOT THERE\n         B     SLXERR             +8 - ERROR IN NODENAME\n         MVC   NODENAME,=CL8' '   SAVE\n         BCTR  R15,0                NODENAME\n         EX    R15,SLEX1              FOR LATER\n         SPACE 1\n*        GET APPLID (OPTIONAL)\n         SPACE 1\n         LA    R1,SLAPPL          LOAD A(OPTION LIST)\n         BAL   R14,GETPARM        GO GET APPLID\n         B     *+12               +0 - FOUND APPLID\n         B     SLTABLOK           +4 - APPLID NOT SPECIFIED\n         B     SLXERR             +8 - ERROR IN APPLID\n         MVC   DLOGAPPL,=CL8' '   SAVE\n         BCTR  R15,0                APPLID\n         EX    R15,SLEX2              FOR LATER\n         LA    R15,1(,R15)        RESTORE APPLID LENGTH\n         SPACE 1\n*        SCAN TERM TABLE FOR NODENAME\n         SPACE 1\nSLTABLOK STM   R3,R5,12(R13)      SAVE REGS\n         LA    R1,NODENAME             PT @ NODENAME\n         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES\n         CR    R3,R5                   CHECK FOR NULL TABLE\n         BH    SLNOENT                 NO ENTRIES AS R3 > R5 (INIT 0)\n         SPACE 1\nSLTABLP  CLC   0(8,R1),TERMNAME        MATCH THE NAME ?\n         BE    SLFNDTAB                YES, ALREADY IN THE TABLE\n         BXLE  R3,R4,SLTABLP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1\n         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?\n         BL    SLNOENT                 NO => NODENAME NOT IN TABLE\n         BAL   R7,SNOCCUR              YES => SHOULD NOT OCCUR\n         SPACE 1\n*        THERE IS NO TTE ENTRY FOR THIS NODE.\n*        NO APPLID WILL BE TREATED AS AN ERROR IN THIS CASE.\n         SPACE 1\nSLNOENT  L     R5,20(,R13)             RESTORE A(RPL)\n         LTR   R15,R15                 APPLID SPECIFIED?\n         BNZ   SLADDENT                YES => ADD ENTRY\n         MVC   0(L'SLMSG1,R2),SLMSG1   NO  => MOVE ERROR MSG TO BUFFER\n         MVC   0(8,R2),NODENAME               MOVE NODENAME TO MSG\n         LM    R3,R5,12(R13)                  RESTORE REGS\n         B     SLXERR                         BR TO ERROR EXIT\n         SPACE 1\n*        ADD TERM TABLE ENTRY FOR SPECIFIED NODE NAME\n*        IF NO APPLID WAS SPECIFIED, THEN THE LOGAPPL IS RESET IN TTE\n         SPACE 1\nSLADDENT ST    R3,TERMTABE             SAVE NEW TABLE END\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY\n         MVC   TERMNAME(8),NODENAME    COPY NAME ACROSS\n         B      SLADDAPL               BR TO ADD APPLID TO ENTRY\n         SPACE 1\nSLFNDTAB MVI   TERMFLAG,0              CLEAR LOGON STATUS FLAG\n         L     R5,20(,R13)             RESTORE A(RPL)\n         LTR   R15,R15                 APPLID SPECIFIED?\n         BNZ   SLADDAPL                YES => GO ADD APPLID\n         XC    TERMDAPL,TERMDAPL       NO  => ZERO LOGON APPLID\n         MVC   0(L'SLMSG2,R2),SLMSG2          MOVE MSG TO OUT BUF\n         MVC   19(8,R2),NODENAME              ADD NODE NAME TO MSG\n         B     SLNDTTE                        BR TO END OF TTE PROCESS\n         SPACE 1\nSLADDAPL MVC   TERMDAPL,DLOGAPPL       ADD LOGON APPLID TO TTE\n         MVC   0(L'SLMSG3,R2),SLMSG3   MOVE OK MSG TO OUT BUF\n         MVC   0(8,R2),TERMDAPL        ADD APPLID TO MSG\n         MVC   33(8,R2),TERMNAME       ADD NODE NAME TO MSG\n         SPACE 1\nSLNDTTE  LM    R3,R4,13(R13)           RESTORE REGS\n         B     SLEXIT                  BR TO EXIT\n         SPACE 1\nSLXERR   TM    UFLAGS,INIT             CMD ISSUED DURING INITIALIZATION\n         BZ    *+8                     NO  => BR TO CONTINUE\n         OI    UFLAGS,INITERR          YES => FLAG ERROR DURING INIT\n         SPACE 1\nSLEXIT   LA    R0,MSG04                INDICATE MSG4  TO BE SENT\n         B     SENDMSG                 EXIT TO SEND MSG\n         SPACE 5\nSLEX1    MVC   NODENAME(0),0(R1)       SAVE NODENAME PARM\nSLEX2    MVC   DLOGAPPL(0),0(R1)       SAVE APPLID PARM\nSLMSG1   DC    C'XXXXXXXX NOT KNOWN TO NETSOL'\nSLMSG2   DC    C'DEFAULT APPLID FOR XXXXXXXX RESET'\nSLMSG3   DC    C'XXXXXXXX IS NOW LOGON APPLID FOR XXXXXXXX'\n***********************************************************************\n*    ACTION OF NETSOL NOW PROCEEDS BY USE OF EXIT ROUTINES.           *\n*    THE FOLLOWING EXITS ARE SCHEDULED IN RESPONSE TO VTAM EVENTS:    *\n*                                                                     *\n*              TPEND   - VTAM SHUTS DOWN                              *\n*              LOGON   - A TERMINAL IS SIMULATED LOGGED ON TO NETSOL, *\n*                        OR IS PASSED TO NETSOL BY ANOTHER APPLICATION*\n*              LOSTERM - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *\n*                        IS DISCONNECTED (DIAL-LINE), OR 'VARY'ED TO  *\n*                        ANOTHER APPLICATION                          *\n*              RELREQ  - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *\n*                        IS REQUESTED BY ANOTHER APPLICATION          *\n*                                                                     *\n*     RPL EXITS -                                                     *\n*                                                                     *\n*             READEND  - THE OUTSTANDING READ(ANY) HAS BEEN SATISFIED *\n*             SENDEND  - A SEND HAS BEEN POSTED COMPLETE.             *\n*             OPENEND  - AN OPNDST HAS COMPLETED.                     *\n*             PASSEND  - CLSDST(PASS) HAS COMPLETED FOR A LOGON       *\n*                        REQUEST MADE FROM A TERMINAL.                *\n*             WRITEND  - END OF WRITE REQUEST.  WRITE WAS DUE         *\n*                        TO INVALID LOGON FROM THE TERMINAL.          *\n*             CDSTEND1 - CLSDST(RELEASE) COMPLETED.                   *\n***********************************************************************\n         TITLE '*********  N E T S O L  -  TPEND EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *\n*                                                                     *\n*              * VTAM IS CLOSING DOWN                                 *\n*                                                                     *\n*              * OPERATOR ISSUED A HALT COMMAND                       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *\n*                                                                     *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - REASON CODE FOR SHUTDOWN                      *\n*                                                                     *\n*        THIS PARAMETER LIST IS NOT USED BY NETSOL                    *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nTPEND    DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESSABILITY\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        REST OF  BASE REGS\n         OI    UFLAGS,SHUTDOWN         INFORM OTHER EXITS OF SHUTDOWN\n         SPACE 1\n         POST  FINISECB                POST MAINLINES ECB\n         SPACE 1\n         SR    R15,R15                 ZERO RETURN CODE\n         BR    R14                     RETURN FROM IRB\n         SPACE 3\n         LTORG\n         TITLE '*********  N E T S O L  -  LOGON EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *\n*                                                                     *\n*              * A TERMINAL IS LOGGED ON VIA VARY TO NETSOL           *\n*                                                                     *\n*              * A TERMINAL IS RETURNED TO NETSOL BY AN APPLICATION.  *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *\n*                                                                     *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - POINTER TO SYMBOLIC TERMINAL NAME             *\n*              WORD 2 - RESERVED                                      *\n*              WORD 3 - LENGTH OF LOGON DATA.                         *\n*              WORD 4 - READ-ONLY RPL POINTING TO LOGON CINIT.        *\n*              WORD 5 - CID OF PENDING SESSION.                       *\n*                                                                     *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLOGON    DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESSABILITY\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         LA    R13,GENSAVE             POINT TO SAVE-AREA\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         SPACE 2\n***********************************************************************\n*        NOW ADD THE TERMINAL NAME TO THE TERMINAL TABLE AND RETURN   *\n*        THE ENTRIE'S ADDRESS SO IT CAN BE PLACED IN THE NIB USER     *\n*        FIELD. SUBSEQUENT OPERATIONS USING AN RPL WILL HAVE THE      *\n*        RPLUSFLD UPDATED WITH THE TERMINAL TABLE ADDRESS FROM THE    *\n*        NIB. IF ENTRY ALREADY EXISTS IN TABLE (SECOND LOGON, ETC.),  *\n*        THEN WE RESET THE TERMINALS STATUS. A COUNT IS MAINTAINED    *\n*        OF THE NUMBER OF LOGONS FOR A GIVEN TERMINAL. THE TERMINAL   *\n*        TABLE CAN BE EXPANDED IF NEEDED TO PROVIDE ADDITIONAL STATS. *\n***********************************************************************\n         SPACE 1\n         L     R2,4(,R1)               -> TERMINAL NAME PASSED BY LOGON\n         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES\n         CR    R3,R5                   CHECK FOR NULL TABLE\n         BH    NOTABLE                 NO ENTRIES AS R3 > R5 (INIT 0)\n         SPACE 1\nTABLOOP  CLC   0(8,R2),TERMNAME        MATCH THE NAME ?\n         BE    FOUNDTAB                YES, ALREADY IN THE TABLE\n         BXLE  R3,R4,TABLOOP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1\n         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?\n         BNL   TOOSMALL                YES, ABEND USER 0008\n         SPACE 1\nNOTABLE  ST    R3,TERMTABE             SAVE NEW TABLE END\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY\n         MVC   TERMNAME(8),0(R2)       COPY NAME ACROSS\n         SPACE 1\nFOUNDTAB LH    R4,TERMLOGC             GET LOGON COUNT\n         A     R4,=F'1'                ADD 1 TO IT\n         STH   R4,TERMLOGC             SAVE IT BACK\n         MVI   TERMFLAG,0              CLEAR LOGON STATUS FLAG\n         MVC   TERMCID(4),20(R1)       SAVE PENDING CID FOR INQUIRE\n         SPACE 2\n***********************************************************************\n*        OBTAIN AN ASYNC RPL/NIB AND PREPARE FOR OPNDST               *\n***********************************************************************\n         SPACE 1\n         BAL   R14,GETRPL              OBTAIN AN RPL\n         LA    PTRNIB,NIBSTART         -> NIB WITHIN RPL\n         OI    EXITFLAG,LOGONEX        MARK LOGON EXIT ENTERED\n         MVC   NIBSYM(8),TERMNAME      MOVE IN SYMBOLIC NAME\n         ST    R3,NIBUSER              NIB USER -> TERM TABLE ADDRESS\n         ST    R3,RPLUSFLD             SAVE FOR ERROR ON OPNDST\n         ST    PTRRPL,TERMCRPL         SAVE A(RPL) IN TTE\n         SPACE 2\n***********************************************************************\n*        OBTAIN THE SESSION PARAMETERS WITH THE INQUIRE MACRO         *\n***********************************************************************\n         SPACE 1\nINQUIRSE MVC   SYNCHRPL(FRSYNL),FRSYNRPL REINIT SYNCH RPL\n         XC    SESSPARM,SESSPARM       ZERO SESSION PARM WORK AREA\n         ST    R3,SYNUSFLD             SAVE A(TTE) IN RPL USER FLD\n         L     R2,TERMCID              LOAD CID FOR INQUIRE\n         OI    MACFLAG2,INQSES         INDICATE INQUIRE(SESSPARM)\n         OI    MFLAGS2,INQSESS\n         INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=SESSPARM,                                         X\n               ARG=(R2),                                               X\n               AREA=SESSPARM,                                          X\n               AREALEN=L'SESSPARM\n         NI    MFLAGS2,255-(INQSESS)   RESET ERREXIT FLAG\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(SESSPARM)                                *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO CINIT QUEUED                      14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n*******> BH    SNOCCUR                 CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTABC(R15)            CHECK VALID ACTIONS\nERRTABC  B     R0CHKC               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8\n         BAL   R7,SNOCCUR           C\n         B     INQUIRSE            10  REISSUE.  NO NEED TO\n         B     FREERPL             14  TERMINAL GONE. END REQUEST\n         SPACE 1\nR0CHKC   DS    0H\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n*******> BNZ   SNOCCUR                 YES, OR OTHER ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n***********************************************************************\n*        USE BIND PARAMETERS JUST OBTAINED TO DETERMINE TERMINAL TYPE *\n***********************************************************************\n         SPACE 1\n         LA    R2,SESSPARM             ESTABLISH ADDRESSABILITY\n         USING ISTDBIND,R2               TO BIND PARMATERS\n         CLI   BINLUP,BINLUP2C         LU TYPE 2 (3270) ?\n         BE    LU3270                    YES - BR TO PROCESS\n         CLI   BINLUP,BINLUP1C         LU TYPE 1 (3767) ?\n         BE    LU3767                    YES - BR TO PROCESS\n         CLI   BINLUP,BINLUP0C-BINLUP0C  IF NOT LU TYPE 0        84142\n         BNE   BADLU                     THEN ASSUME UNSUPPORTED DEVICE\n         CLI   BINFM,X'02'               ELSE IF FM=02\n         BE    LU3270                         THEN ASSUME 3270\n         CLI   BINFM,X'03'                    IF FM=03\n         BE    LU3767                         THEN ASSUME 3767\n         B     BADLU                          ELSE DEVICE NOT SUPPORTED\nLU3270   DS    0H            INSERTION FOR PRE-ACF VTAM          84142\n         AIF   (NOT &SP AND NOT &XA).NOTSEDS                     84142\n         TM    BINDFLAG,BINSEDS        3270 WITH EXTENDED FUNCTION?\n         BO    LU3270E                 YES - BR TO LOAD DDT3270E\n.NOTSEDS LA    R1,DDT3270              NO  - PT AT DDT3270\n         B     STORDDT                       BR TO STORE A(DDT)\nLU3270E  LA    R1,DDT3270E             PT AT DDT3270E\n         B     STORDDT                 BR TO STORE IN TTE\nLU3767   LA    R1,DDT3767              PT AT DDT FOR 3767\nSTORDDT  ST    R1,TERMDDT              STORE A(DDT) IN TTE\n         DROP  R2\n         SPACE 2\n***********************************************************************\n*    ISSUE AN OPNDST TO CONNECT NETSOL TO LOGGED-ON TERMINAL.         *\n***********************************************************************\n         SPACE 1\nOPENDST  OI    MACFLAGS,OPNSPEC        INDICATE DOING AN OPNDST(SP)\n        OI   MFLAGS,OPNDSPEC\n         OPNDST RPL=(PTRRPL),                                          X\n               OPTCD=(ACCEPT,SPEC,NQ),                                 X\n               EXIT=OPENEND,                                           X\n               NIB=NIBSTART\n         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST                                           *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    OPENDST                 YES. REISSUE\n         LTR   R15,R15                 CLSDST ACCEPTED?\n*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*******> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '*********  N E T S O L  -  OPNDST END EXIT'\n***********************************************************************\n*                                                                     *\n*        CHECK VALIDITY OF THE OPNDST                                 *\n*        ENTRY IS FROM THE OPNDST IN THE LOGON EXIT.                  *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nOPENEND  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR\n*                                       IS FOR OPNDST\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(ACCEPT,SPEC)                              *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                   (R15 R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    09    NODE DEACTIVATED                     14  00           *\n*   10    00    TERMINAL UNAVAILABLE                 14  00           *\n*   10    01    OPNDST FAILED                        14  00           *\n*   10    03    VTAM IS HALTING                      14  00           *\n*   10    05    PERMENENT FAILURE IN PATH            08  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   10    11    SDT FAILED                           14  00           *\n*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *\n*   14    54    INVALID TERMINAL NAME                14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         OI    EXITFLAG,OPENEX         INDICATE IN OPNDST EXIT\n         CH    R15,HEX14               HIGHEST VALID ACTION\n*******> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB1(R15)            CHECK VALID ACTIONS\nERRTAB1  B     R0CHK1               0  CHECK IF TERM ACCEPTED\n         BAL   R7,SNOCCUR           4\n         B     FREERPL              8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         BAL   R7,SNOCCUR           C  CAN'T WRITE MSG IF NOT\n*                                      CONNECTED\n         B     OPENDST             10  REISSUE. CHECK FOR RESET\n         B     FREERPL             14  CAN'T CONNECT DEVICE\n         SPACE 1\nR0CHK1   DS    0H\n         CH    R0,HEX9                 TERM UNAVAILABLE\n         BE    RETURN                  RETURN IF SO\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n*******> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n***********************************************************************\n*        CID OF DEVICE JUST OPNDST'ED IS NOW IN ASYNC RPL.            *\n*        SOLICIT THE DEVICE JUST CONNECTED.                           *\n***********************************************************************\n         SPACE 1\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         MVC   CID(4),RPLARG           SAVE CID IN RPL WORKAREA\n         LA    PTRNIB,NIBSTART         ADDRESS NIB\n         L     R3,NIBUSER              -> TERM TABLE ENTRY\n         MVC   TERMCID,RPLARG          COPY THE CID TO TTE\n         ST    R3,RPLUSFLD             SAVE A(TTE) IN RPL FOR MSG\n         MVI   TERMFLG2,TOPEN          MARK TERM ON NETSOL\n         OI    FLAGS,FIRSTSND          FIRST SEND TO THE DEVICE\n         NI    SRPLEXT1,FF-RPLNIB      RESET SYNCHRPL\n         SPACE 2\n***********************************************************************\n*        DO AUTOMATIC LOGON FOR THOSE TERMINALS THAT HAD A            *\n*        DEFAULT LOGON SPECIFIED IN THE INITIALIZATION DATA SET.      *\n***********************************************************************\n         SPACE 1\n         CLC   TERMDAPL,=XL8'00'       IS THERE A DEFAULT APPL?\n         BE    OPNDSTC                 NO  => GO WRITE MSG TO DEVICE\n         SPACE 2\n***********************************************************************\n*        TO PREVENT LOOPING IN AUTOMATIC LOGON, AUTO LOGON WILL       *\n*        BE TERMINATED IF MORE THAN 3 LOGONS FOR A TERMINAL ARE       *\n*        PROCESSED IN A 60 SECOND TIME PERIOD.                        *\n***********************************************************************\n         SPACE 1\n         TIME  BIN                     GET TIME IN .01 SECS\n         C     R0,TERMDTIM             < 60 SECS SINCE LAST LOGON?\n         BH    AUTONEW                 NO  => ASSUME NEW AUTO LOGON\n         LH    R1,TERMDCNT             YES => INCR\n         LA    R1,1(,R1)                        LOOP\n         STH   R1,TERMDCNT                        COUNTER\n         CH    R1,HEX2                 MORE THAN 3 TIMES IN 60 SECS?\n         BNH   AUTOINQR                NO  => GO INQUIRE RE APPL STATUS\n         B     OPNDSTC                 YES => SKIP AUTO LOGON\nAUTONEW  A     R0,=AL4(100*60)         ADD 60 SECS TO CURRENT TIME\n         ST    R0,TERMDTIM  AND STORE FOR LATER\n         XC    TERMDCNT,TERMDCNT       ZERO LOOP COUNTER\n***********************************************************************\n*                                                                     *\n*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *\n*    OF THE DEFAULT LOGON APPLICATION FOR THIS TERMINAL.              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nAUTOINQR MVC   APPLID(8),TERMDAPL      SAVE APPLID FROM TTE ENTRY\n         LA    PTRNIB,SYNCHNIB         PUT THE APPLICATION\n         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT\n         SPACE 2\n***********************************************************************\n*    INQUIRE FOR THE APPLICATION STATUS                               *\n***********************************************************************\n         SPACE 1\nINQUIREA OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT\n         OI    MFLAGS,INQAPPST\n         MVC   SYNCHRPL(FRSYNL),FRSYNRPL CLEAR RPL           DC18203\n         ST    R3,SYNUSFLD             SAVE A(TTE) IN SYNCHRPL USRFLD\n         INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=APPSTAT,                                          X\n               NIB=SYNCHNIB\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n         NI    SRPLEXT1,FF-RPLNIB      NIB NO LONGER NEEDED\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  0C  06           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         CH    R15,HEX10               HIGHEST POSSIBLE ACTION\n*******> BH    SNOCCUR                 CODE IS X'10'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB3(R15)            CHECK VALID ACTIONS\nERRTAB3  B     R0CHK3               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS\n*                                      IRRELEVANT\n         B     OPNDSTC              C  DEFAULT APPL IS UNKNOWN SO\n*                                      SKIP AUTO LOGON\n         B     INQUIREA            10  REISSUE.  NO NEED TO\n         SPACE 1\nR0CHK3   DS    0H\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n*******> BNZ   SNOCCUR                 YES, OR OTHER ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         EJECT\n***********************************************************************\n*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *\n*    CODES ARE:                                                       *\n*                                                                     *\n*        0 - ACTIVE AND AVAILABLE                                     *\n*        4 - INACTIVE                                                 *\n*        8 - NEVER ACCEPTS A LOGON                                    *\n*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *\n*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *\n***********************************************************************\n         SPACE 3\n         SR    R15,R15                 CLEAR  REG 15\n         IC    R15,SYNFDB3             EXTRACT FEEDBACK INFO.\n         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.\n         B     STATUS3(R15)            BRANCH IN TABLE\nSTATUS3  B     DAPACTIV             0  DO AUTO LOGON\n         B     OPNDSTC              4  SKIP AUTO LOGON\n         B     OPNDSTC              8  SKIP AUTO LOGON\n         B     OPNDSTC             12  SKIP AUTP LOGON\n         B     OPNDSTC             16  SKIP AUTO LOGON\n         SPACE 1\nDAPACTIV SR    R4,R4                   SET A(LOGON DATA) = 0\n         SR    R2,R2                   SET L(LOGON DATA) = 0\n         B     FILLNIB                 BR INTO LOGON PROCESSING\n         SPACE 2\n***********************************************************************\n*        NO AUTO LOGON IS BEING DONE FOR THIS TERMINAL SO             *\n*        GO SOLICIT LOGON INFORMATION FROM THE TERMINAL USER.         *\n***********************************************************************\n         SPACE 1\nOPNDSTC  LA    R0,MSG12                WRITE LOGON MESSAGE\n         B     SENDMSG                 IS FROM THE LOGON EXIT\n         SPACE 3\n         LTORG\n         TITLE '*********  N E T S O L  -  RECEIVE ANY EXIT'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN THE OUTSTANDING REC-ANY      *\n*    COMPLETES.                                                       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS TO THE RPL USED FOR THE READ-ANY (IGFRPL)      *\n*                                                                     *\n*               THE CID FIELD OF THIS RPL HAS CID OF DEVICE           *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nRECEND   DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESSABILITY\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         LA    R13,GENSAVE             POINT TO SAVE-AREA\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         SPACE 2\n***********************************************************************\n*        ISSUE NEW READ SO WE CAN HANDLE MORE THAN 1 LOGON AT A TIME. *\n***********************************************************************\n         SPACE 1\n         LR    R7,R1                   SAVE R7 AROUND THE REC ANY CODE\n         BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE\n         BAL   R14,RECSUB              ISSUE A RECEIVE (ANY)\n         SPACE 1\n         LR    PTRRPL,R7               RESTORE THE INPUT RPL @\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         L     R3,RPLUSFLD             -> TTE\n         ST    R5,TERMCRPL             SAVE A(RPL)\n         OI    EXITFLAG,RECEX\n         SPACE 2\n***********************************************************************\n*        SAVE CID OF DEVICE FROM RPL ARG FIELD.                       *\n*        GET LENGTH OF RECORD READ. THIS WILL BE DECREMENTED          *\n*        IF DEVICE CONTROL CHARACTERS ARE REMOVED BEFORE INTRPRET.    *\n*                                                                     *\n*        NOTE: INFO IN RPL MAY NOT BE VALID IF CHECK RETURNS          *\n*              AN ERROR.                                              *\n***********************************************************************\n         SPACE 1\n         MVC   CID(4),RPLARG           GET CID FROM RPL\n         MVC   RECLEN(4),RPLRLEN       GET RPL RECORD LENGTH\n         SPACE 1\n         OI    MFLAGS,RECA             TELL ERREXIT THAT ERRORS\n*                                       ARE FOR REC(ANY)\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                      IS ENTERED IF ERRORS HAVE\n         NI    MFLAGS,255-(RECA)       RESET READ INDICATOR\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CHECK OF READ (ANY)                              *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                   (R15  R0)         *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                 00  00          *\n*   04    04    EXCP. CONDITION ON INCOMMING MESSAGE                  *\n*                                                                     *\n*             SSENSEI/SSENSMI                                         *\n*                80     XX        PATH ERRORS         14  00          *\n*                80     05        NO SESSION COND.    08  04          *\n*                40     XX        RH   ERRORS         SNOCCUR         *\n*                20     XX        STATE ERRORS        08  04          *\n*                10     03        FUNCTION \u00ac SUPPORTED08  00          *\n*                10     XX        REQUEST ERRORS      SNOCCUR         *\n*                08     00        BRACKET ERROR       18  00          *\n*                08     01        REQUEST REJECT      08  00          *\n*                08     02        INTV REQ            14  00          *\n*                08     13        BRACKET ERROR       18  00          *\n*                08     2B        PRES. SPACE INT. LO 18  00          *\n*                08     2D        SLU BUSY            14  00          *\n*                                                                     *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *\n*   0C    01    I/O ERROR.  DEVICE NOT USABLE         08  00          *\n*   0C    02    TEST REQUEST SET (LOSTTERM)           14  00          *\n*   0C    07    CONNECT REC. IN PROGRESS              14  00          *\n*   0C    08    LU RESTARTED (LOSTTERM)               14  00          *\n*   0C    0A    REQU. CANCEL. BY RESETR               SNOCCUR         *\n*   0C    0B    CANCELED BY CLSDST                    14  00          *\n*   0C    0C    REQUEST CANCEL. BY CLEAR              08  04          *\n*   10    05    PERMANENT PATH FAILURE                08  00          *\n*   10    07    REQUEST CANCEL BY VARY (LOSTTERM)     14  00          *\n*   10    09    TERMINATE SELF OR LOGOFF (LOSTTERM)   14  00          *\n*   10    0F    BUFFERS FILLED (LOSTTERM)             14  00          *\n*   10    10    TERMINATE SELF COMMAND                08  04          *\n*   10    0C    DIAL-IN DISCONNECT                    08  00          *\n*   14    12    CLSDST IN PROGRESS                    14  00          *\n*   14    32    REQUEST INVALID FOR SPECIFIED DEVICE  08  00          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         CH    R15,HEX18               HIGHEST POSSIBLE ACTION\n*******> BH    SNOCCUR                  CODE IS X'20'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB2(R15)            CHECK VALID ACTIONS\nERRTAB2  B     R0CHK2               0  VALID DATA FROM READ?\n         BAL   R7,SNOCCUR           4\n         B     RELOPNB              8  CHECK IF WE WANT TO REOPEN\n         BAL   R7,SNOCCUR           C\n         B     RESEND               10 REISSUE\n         B     FREERPL              14\n         B     RESEND               18\n         SPACE 1\nRELOPNB  LTR   R0,R0                   DO OPNDST AFTER CLSDST ?\n         BZ    RELEASE\n         OI    FLAGS,RELOPND           SAY WE WANT TO REOPEN AFTER RELS\n         B     RELEASE\n         SPACE 1\nR0CHK2   DS    0H\n         LTR   R0,R0\n*******> BNZ   SNOCCUR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         TM    RPLCNTDC,RPLLUS         DID WE RECEIVE LUSTAT ?\n         BO    LUSTATUS                YES, GO HANDLE IT\n         SPACE 1\n         TM    TERMFLAG,LOGPROC        HAS IMPATIENT USER ISSUED\n*                                      A SECOND LOGON SEQUENCE WHILE\n*                                      THE FIRST IS IN PROGRESS?\n         BO    FREERPL                 YES => IGNORE THIS REQUEST\n         OI    TERMFLAG,LOGPROC        NO  => SET LOGON BEING PROCESSED\n         SPACE 1\n         LA    R6,IOAREA               POINT TO DATA RECEIVED\n         L     R2,RECLEN               GET DATA LENGTH\n         LTR   R2,R2                   RECEIVE ANY DATA?\n*                                      IN CASE NO DATA RECEIVED\n*                                       RESOLICIT THE TERMINAL\n         BZ    RESEND\n         LA    R3,L'IOAREA             COMPARE THE RECLEN WITH\n         CR    R2,R3                    THE READ BUFFER LENGTH.\n         BNH   GOEDIT                  BUFFER LENGTH GREATER\n*                                       THAN INPUT RECORD.\n         LR    R2,R3                   ONLY THE FIRST 80 BYTES\n*                                       WILL BE READ IN.\n         SPACE 1\n***********************************************************************\n*        BRANCH TO INPUT EDIT ROUTINE FOR THE APPROPRIATE DEVICE TYPE.*\n***********************************************************************\n         SPACE 1\nGOEDIT   DS    0H\n         L     R3,RPLUSFLD             LOAD A(TTE)\n         L     R9,TERMDDT              LOAD A(DDT FOR DEVICE)\n         L     R15,DDTEDIT             LOAD A(DEVICE EDIT ROUTINE)\n         BR    R15                     GO EDIT INPUT\n         TITLE '*********  N E T S O L  -  INPUT EDIT ROUTINE FOR 3270'\n***********************************************************************\n*                                                                     *\n*        S32EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3270       *\n*        DEVICE CONTROL CHARACTERS.                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nS32EDIT  DS    0H\n         CLI   0(R6),CLEARKEY          IS IT 'CLEAR' KEY ?\n         BNE   S32PFK                  NO SO CHECK VALID LOGON\n         B     RESEND                  OTHERWISE ASK FOR MORE\n         SPACE 2\n***********************************************************************\n*        NOT 'CLEAR' KEY, CHECK FOR OTHER FUNCTION KEY DEPRESS.  IF   *\n*        IT IS A FUNCTION KEY THE DATA WILL BE PASSED DIRECTLY TO     *\n*        INTERPRET, OTHERWISE THE DATA POINTER WILL BE UPDATED TO     *\n*        SKIP THE 3270 DEVICE CONTROL SEQUENCE.                       *\n***********************************************************************\n         SPACE 1\nS32PFK   DS    0H\n         CLI   0(R6),X'7A'             IS IT PF10\n         BL    S32PA                   IF LOW CHECK PROGRAM ACCESS\n         CLI   0(R6),X'7C'             IS IF PF12\n         BNH   INTRPRET                IF IN RANGE DO IT\n         CLI   0(R6),C'1'              IS IT PF1\n         BL    S32ENTER                IF LOW CARRY ON\n         CLI   0(R6),C'9'              IS IT PF9\n         BNH   INTRPRET                IF IN RANGE DO IT\n*        CHECK PROGRAM ACCESS KEYS HERE\nS32PA    CLI   0(R6),X'6C'             IS IT PA1\n         BE    INTRPRET                IF YES, DO IT\n         CLI   0(R6),X'6E'             IS IT PA2\n         BE    INTRPRET                IF YES, DO IT\n         CLI   0(R6),X'6B'             IS IT PA3\n         BE    INTRPRET                IF YES, DO IT\n         SPACE 1\nS32ENTER DS    0H\n         CLI   0(R6),ENTERKEY          IS IT THE ENTER KEY?\n         BNE   BADINPUT\n         LA    R3,3                    USER MIGHT HAVE HIT\n         CR    R2,R3                   ENTER KEY ONLY BUT NO LOGON\n         BE    RESEND                  IF SO LETS GIVE HIM ANOTHER GO\n         SPACE 1\n         LA    R6,6(R6)                BYPASS SBA 3270 CONTROL + ORDER\n         LA    R1,6\n         SR    R2,R1                   ALLOW FOR DECREASE\n         LTR   R2,R2                   IS THERE ANY THING\n         BNP   BADINPUT                NO SO MUST BE INVALID\n         B     INTRPRET                GO INTERPRET LOGON SEQ\n         TITLE '*********  N E T S O L  -  INPUT EDIT ROUTINE FOR 3767'\n***********************************************************************\n*                                                                     *\n*        S37EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3767       *\n*        DEVICE CONTROL CHARACTERS.                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nS37EDIT  DS    0H\n         CLI   0(R6),CR                ONLY CARRIAGE RETURN?\n         BNE   INTRPRET                NO  => BR TO INTERPRET INPUT\n         B     RESEND                  YES => WRITE MSG 12\n         TITLE '*********  N E T S O L  -  COMMAND LOOKUP'\n***********************************************************************\n*                                                                     *\n*    SCAN NETSOL'S COMMAND TABLE FOR AN ENTRY MATCHING THE LOGON DATA *\n*    ENTERED FROM THE TERMINAL.  IF A MATCH IS FOUND, THE SPECIFIED   *\n*    CMD ROUTINE IS BRANCHED TO. OTHERWISE, AN ERROR MESSAGE IS       *\n*    WRITTEN TO THE TERMINAL INDICATING INVALID LOGON DATA.           *\n*                                                                     *\n*    THE COMMAND CAN BE EITHER:                                       *\n*           - A REQUEST FOR LOGON TO A VTAM APPLICATION PROGRAM, OR   *\n*           - A REQUEST FOR A SERVICE FROM NETSOL, SUCH AS, LOGOFF    *\n*                                                                     *\n*    INPUT :                                                          *\n*        R2 - LENGTH OF LOGON DATA                                    *\n*        R6 - A(LOGON DATA IN DATA BUFFER)                            *\n*                                                                     *\n*    OUTPUT:                                                          *\n*        R0 - ERROR MSG # IF NO ENTRY FOUND                           *\n*        R1 - A(MATCHING COMMAND TABLE ENTRY)                         *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nBADINPUT LA    R0,MSG02                INPUT NOT RECOGNISED\n         B     SENDMSG\n         SPACE 1\nINTRPRET DS    0H\n         STC   R2,DATASEQL             SAVE LOGON DATA LENGTH\n         ST    R6,DATAPTR              SAVE A(LOGON DATA)\n*        CONVERT LOGON DATA TO UPPER CASE\nLOWTOUP  OI    0(R6),X'40'             MAKE CURRENT CHAR UPPER CASE\n         LA    R6,1(R6)                GET\n         BCT   R2,LOWTOUP                  NEXT CHAR\n*        SAVE DATA FOR USE IN CLSDST(PASS)\n         IC    R2,DATASEQL             RESTORE LOGON DATA LENGTH\n         L     R6,DATAPTR              RESTORE A(LOGON DATA)\n         BCTR  R2,0                    REDUCE FOR MOVE\n         XC    DATASEQ,DATASEQ         ZERO OUT MSG WORK AREA\n         EX    R2,@EXEC1               SAVE LOGON DATA\n         SPACE 1\n*        SEARCH COMMND TABLE FOR MATCHING COMMAND TEXT\n         SPACE 1\n         LA    R1,CMDTAB\nCMDTABLP CLC   CMDGAPPL(,R1),CMDTABND     END OF SEARCH?\n         BNE   CMDTABL1                NO\n         LA    R0,MSG07                YES => LOAD ERROR MSG #\n         B     SENDMSG                        AND GO SEND IT\nCMDTABL1 LH    R2,CMDTEXTL(R1)         LOAD LENGTH OF CMDTEXT\n         LA    R4,CMDTEXT(,R1)         PT @ CMDTEXT\n         LA    R6,DATASEQ              PT @ LOGON DATA\nCMDTABL2 CLC   0(1,R4),0(R6)           DOES THIS CHAR MATCH?\n         BNE   CMDTABL3                NO => GET NEXT ENTRY\n         LA    R4,1(,R4)               YES => COMPARE\n         LA    R6,1(,R6)                        NEXT\n         BCT   R2,CMDTABL2                        CHARACTER PAIR\n*        TO ENSURE UNIQUENESS OF CMDS, COMMAND TEXT MUST\n*        END WITH A BLANK OR BE AT THE END OF THE CMD BUFFER.\n         CLI   0(R6),X'40'             IS NEXT CHAR A BLANK?\n         BE    CMDFOUND                YES => CMD IS A MATCH\n         CLI   0(R6),X'00'             IS THIS END OF CMD BUFFER?\n         BE    CMDFOUND                YES => CMD IS A MATCH\n         CLI   0(R6),C'$'              LAST CHAR OF PFK INPUT(PFK5=5$)\n         BE    CMDFOUND                YES => CMD IS A MATCH\nCMDTABL3 LA    R1,CMDTABL(,R1)         NO => GET\n         B     CMDTABLP                          NEXT ENTRY\n         SPACE 1\n*        MATCHING CMD HAS BEEN FOUND\n         SPACE 1\n*        CHECK IF CMD IS VALID FOR THE SOURCE OF THE CMD\nCMDFOUND TM    UFLAGS,INIT             CMD ISSUED DURING NETSOL INIT?\n         BZ    CMDCKTRM                NO  => CHECK IF CMD OK FROM TERM\n         TM    CMDFLAG(R1),CMDINIT     CMD VALID FROM SYSIN?\n         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK\n         B     CMDSETGP                YES => CONTINUE CMD SETUP\nCMDCKTRM TM    CMDFLAG(R1),CMDTERM     CMD VALID FROM TERMINAL?\n         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK\n*        SET UP PARAMETERS FOR GETPARM SUBROUTINE\nCMDSETGP ST    R6,GPDATAP              SAVE CURRENT CMD BUFFER PTR\n         LA    R2,DATASEQ              CALCULATE\n         SR    R6,R2                     LENGTH OF CMD\n         SR    R2,R2                   CALCULATE\n         IC    R2,DATASEQL               LENGTH OF TEXT\n         SR    R2,R6                       REMAINING IN CMD BUFFER\n         STH   R2,GPDATAL              SAVE FOR USE BY GETPARM\n*        BRANCH TO CMD PROCESSING ROUTINE\n         L     R2,CMDROUTA(,R1)        LOAD A(CMD ROUTINE)\n         BR    R2                        AND BR TO IT\n         SPACE 2\n*        EXECUTED CODE\n@EXEC1   MVC   DATASEQ(0),0(R6)\n         TITLE '*********  N E T S O L  -  CHECK APPLICATION STATUS'\n***********************************************************************\n*                                                                     *\n*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *\n*    OF THE VTAM APPLICATION ASSOCIATED WITH THE LOGON DATA.          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCHKAPPL  MVC   APPLID(8),CMDVAPPL(R1)  SAVE APPLID FROM CMD TABLE ENTRY\n         LA    PTRNIB,SYNCHNIB         PUT THE APPLICATION\n         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT\n         SPACE 2\n***********************************************************************\n*    INQUIRE FOR THE APPLICATION STATUS                               *\n***********************************************************************\n         SPACE 1\nINQUIREB OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT\n         OI    MFLAGS,INQAPPST\n         MVC   SYNCHRPL(FRSYNL),FRSYNRPL CLEAR RPL           DC18203\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,SYNUSFLD             SAVE IN SYNCHRPL USER FIELD\n         INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=APPSTAT,                                          X\n               NIB=SYNCHNIB\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n         NI    SRPLEXT1,FF-RPLNIB      NIB NO LONGER NEEDED\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  0C  06           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         CH    R15,HEX10               HIGHEST POSSIBLE ACTION\n*******> BH    SNOCCUR                 CODE IS X'10'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB4(R15)            CHECK VALID ACTIONS\nERRTAB4  B     R0CHK4               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS\n*                                      IRRELEVANT\n         B     APPLBAD              C  THIS IS NORMAL CASE FOR\n*                                      APPLICATION UNKNOWN\n         B     INQUIREB            10  REISSUE.  NO NEED TO\n         SPACE 1\nR0CHK4   DS    0H\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n*******> BNZ   SNOCCUR                 YES, OR OTHER ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         EJECT\n***********************************************************************\n*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *\n*    CODES ARE:                                                       *\n*                                                                     *\n*        0 - ACTIVE AND AVAILABLE                                     *\n*        4 - INACTIVE                                                 *\n*        8 - NEVER ACCEPTS A LOGON                                    *\n*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *\n*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *\n***********************************************************************\n         SPACE 3\n         SR    R15,R15                 CLEAR  REG 15\n         IC    R15,SYNFDB3             EXTRACT FEEDBACK INFO.\n         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.\n         B     STATUS(R15)             BRANCH IN TABLE\nSTATUS   B     APPACTIV             0\n         B     APPINACT             4\n         B     APPNEVER             8\n         B     APPTEMP             12\n         B     APPCLOSE            16\n         SPACE 1\nAPPTEMP  DS    0H                      APPLICATION TEMPORARILY NOT\n*                                      ACCEPTING LOGONS\n         LA    R0,MSG11                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPNEVER DS    0H                      APPLICATION NEVER ACCEPTS LOGONS\n         LA    R0,MSG10                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPINACT DS    0H                      APPLICATION INACTIVE\n         LA    R0,MSG08                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPCLOSE DS    0H                      APPLICATION QUIESCING\n         LA    R0,MSG09                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPLBAD  DS    0H                      BAD APPLICATION NAME\n         LA    R0,MSG07                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         TITLE '*********  N E T S O L  -  CLSDST(PASS) FUNCTION'\n***********************************************************************\n*    THE APPLICATION IS ACTIVE AND AVAILABLE. PASS THE TERMINAL PLUS  *\n*    LOGON DATA TO THE DESIRED APPLICATION.                           *\n***********************************************************************\n         SPACE 3\nAPPACTIV OI    FLAGS,CLEARSCR          MUST ISSUE CLEAR SCREEN\n         LA    R0,MSG06                SEND LOGON IN PROGRESS\n         B     SENDMSG                 GO ISSUE SEND\n         SPACE 1\nCONTPASS NI    FLAGS,255-(CLEARSCR)    TURN OFF FLAG TO INDICATE RETURN\n         SR    R2,R2                   CLEAR\n         IC    R2,DATASEQL             GET DATA SEQUENCE LENGTH PASSED\n*                                       FROM INTRPRET\n         LA    R4,DATASEQ              ADDRESS OF DATA TO PASS\n         SPACE 1\nFINDBLNK CLI   0(R4),X'40'             IS IT A BLANK?\n         BE    FINDDATA                YES SEE IF ANY DATA FIELD\n         LA    R4,1(R4)                OVERWISE GO TO NEXT BYTE\n         BCT   R2,FINDBLNK             DECREASE COUNT TRY NEXT\n         SPACE 1\nNODATA   SR    R4,R4                   CLEAR REG TO SAY NO DATA\n         B     FILLNIB                 GO ISSUE PASS WITH NO DAT\n         SPACE 1\nFINDDATA LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),X'40'             IS IT STILL A BLANK?\n         BNE   DATAFOND                NO SO WE HAVE DATA\n         BCT   R2,FINDDATA             TRY AND FIND MORE DATA\n         B     NODATA                  ISSUE PASS WITH NO DATA\n         SPACE 1\nDATAFOND BCTR  R2,0                    END OF LOGON BUT NO DATA\n         LTR   R2,R2                   NO MORE DATA?\n         BZ    NODATA                  ISSUE CLSDST WITH NO DATA\n         SPACE 2\n***********************************************************************\n* THIS CODE WILL CHECK IF THE REQUESTED APPLICATION IS ONE THAT HAS   *\n* A SPECIAL LOGMODE ENTRY. IF SO, THE ASSOCIATED LOGMODE ENTRY IN THE *\n* TABLE WILL BE ADDED TO THE NIB PRIOR TO THE CLSDST(PASS).           *\n***********************************************************************\n         SPACE 1\nFILLNIB  LA    PTRNIB,NIBSTART         USE NIB CONTAINED IN RPL.\n         LA    R1,LOGMDTAB             PT @ LOGMODE TABLE\nLOGMDLP  CLC   LOGMDAPP(8,R1),=XL8'FFFFFFFFFFFFFFFF' END OF TABLE?\n         BE    SKIPLOGM                YES => USE DEFAULT ENTRY\n         CLC   APPLID(8),LOGMDAPP(R1)  DOES APPLID MATCH TABLE ENTRY?\n         BE    INSRTLGM                YES => GO INSERT LOGMODE NAME\n         LA    R1,LOGMDLEN(,R1)        NO  => GET NEXT TABLE ENTRY\n         B     LOGMDLP                        & PROCESS IT\nINSRTLGM MVC   NIBLMODE(8),LOGMDENT(R1) MOVE LOGMODE NAME INTO NIB\n         SPACE 1\nSKIPLOGM L     R3,RPLUSFLD             -> TTE\n         MVC   NIBSYM(8),TERMNAME      COPY TERMINAL NAME TO NIB\n         SPACE 1\nPASS     OI    MFLAGS,CLSDST           CLSDST(PASS) BEING DONE\n         OI    MACFLAGS,CLOSPASS\n         SPACE 1\n         CLSDST  RPL=(PTRRPL),                                         X\n               NIB=(PTRNIB),                                           X\n               OPTCD=(ASY,PASS),                                       X\n               AAREA=APPLID,                                           X\n               AREA=(R4),                                              X\n               RECLEN=(R2),                                            X\n               EXIT=PASSEND\n         NI    MFLAGS,255-(CLSDST)\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(PASS)                                     *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    PASS                    YES. REISSUE\n         LTR   R15,R15                 CLOSE(PASS) ACCEPTED\n*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   VALID COMPLETION?\n*******> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  RETURN TO VTAM\n         SPACE 3\n         LTORG\n         TITLE '*********  N E T S O L  -  CLSDST(PASS) EXIT RTN'\n***********************************************************************\n*                                                                     *\n*        CHECK THAT THE CLSDST(PASS) WORKED CORRECTLY                 *\n*                                                                     *\n*        THIS EXIT ROUTINE IS SCHEDULED WHEN A CLSDST (PASS)          *\n*        IS ISSUED.  THE CLSDST IS ISSUED WHEN A VALID LOGON          *\n*        SEQUENCE HAS BEEN RECEIVED FROM THE TERMINAL AND             *\n*        THE DESIRED APPLICATION IS RECEIVING LOGON'S.                *\n*                                                                     *\n*        REGISTER 5 CONTAINS THE ADDRESS OF THE RPL USED              *\n*            IN THE CLSDST.                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nPASSEND  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         LR    PTRRPL,R1               GET THE RPL PASSED\n         LA    R13,RPLSAVE             R13 -> RPL SAVE AREA\n         SPACE 1\n         OI    MFLAGS,CLSDST           INDICATE IN PASSEND\n         OI    EXITFLAG,PASSEX\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(CLSDST)\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(PASS)                                     *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   00    08    QUEUED SESSION ALREADY EXISTS        00  08           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *\n*   10    00    APPLICATION UNAVAILABLE              0C  08           *\n*   10    02    TARGET APPLICATION UNACCEPTABLE      0C  09           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0D    VTAM INACTIVE TO YOUR ACB            SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    13    CID INVALID                          14  00           *\n*   14    4B    INVALID LOGMODE ENTRY SPECIFIED      0C  01           *\n*   14    53    TERMINAL NOT DEFINED CROSS DOMAIN    0C  03           *\n*   14    55    NO OPNDST AUTHORIZATION              0C  05           *\n*   14    5D    OPNDST INVALID (TERM NOT CONNECTED)  14  00           *\n*   14    5F    RESOURCE NOT OWNED                   14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n*******> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB5(R15)            CHECK VALID ACTIONS\nERRTAB5  B     R0CHK5               0  PROBABLY PASSED DEVICE\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8\n         B     SENDMSG              C  NORMAL CASE IF APPLI-\n*                                       CATION STOPPED ACCEPT-\n*                                       ING LOGONS SINCE THE\n*                                       INQUIRE\n         B     RESEND              10  LET USER TRY AGAIN LATER\n         B     FREERPL             14  IT COULD BE THAT NETSOL\n*                                       NO LONGER HAS THE\n*                                       DEVICE SINCE IT WAS\n*                                       FREED BY RELREQ AFTER\n*                                       THE READEND EXIT WAS\n*                                       SCHEDULED.\nR0CHK5   DS    0H\n         CH    R0,HEX8             08  QUEUED SESSION EXISTS\n         BE    QSESSION                 => ISSUE CLSDST RELEASE\n         LTR   R0,R0                   ANYTHING BUT FDBK2=08\n*******> BNZ   SNOCCUR                   SHOULD NOT OCCUR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         TITLE '*********  N E T S O L  -  SIMLOGON FUNCTION'\nSIMLOGON LA    PTRNIB,SYNCHNIB         GET ADDRESS OF NIB\n         MVC   SYNCHRPL(FRSYNL),FRSYNRPL CLEAR RPL             DC18203\n         L     R3,RPLUSFLD             -> TTE\n         MVI   TERMFLG2,TPASSED        MARK TERM NOT ON NETSOL\n         MVC   TERMAPPL,APPLID         REMEMBER APPL FROM CLSDST(PASS)\n         ST    R3,NIBUSER              SAVE IN THE USER FIELD\n         ST    R3,SYNUSFLD             SAVE IN SYNCHRPL USER FIELD\n         MVC   NIBSYM(8),TERMNAME      TERMINAL NAME TO NIB\n         SPACE 1\n         OI    MFLAGS,SMLOGON          INDICATE SIMLOGON\n         OI    MACFLAGS,SIMLGON\n         SIMLOGON RPL=SYNCHRPL,                                        X\n               NIB=SYNCHNIB,                                           X\n               OPTCD=(Q,NRELRQ)\n         NI    MFLAGS,255-(SMLOGON)\n         XC    NIBUSER,NIBUSER         CLEAR NIB USER FIELD OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SIMLOGON                                         *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    00    TERMINAL UNAVAILABLE                 14  00           *\n*   10    03    VTAM IS HALTING                      14  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    13    CID INVALID                          14  00           *\n*   10    4B    INVALID LOGON                        0C  02           *\n*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *\n*   14    54    INVALID TERMINAL NAME                14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX14               HIGHEST VALID ACTION\n*******> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB6(R15)            CHECK VALID ACTIONS\nERRTAB6  B     R0CHK6               0  CHECK IF TERM ACCEPTED\n         BAL   R7,SNOCCUR           4\n         B     FREERPL              8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         B     FREERPL              C  CAN'T SEND MSG IF NOT CONNECTED\n*                                      CONNECTED\n         B     SIMLOGON            10  REISSUE. CHECK FOR RESET\n         B     FREERPL             14  CAN'T CONNECT DEVICE\n         SPACE 1\nR0CHK6   DS    0H\n         CH    R0,HEX9                 TERM UNAVAILABLE\n         BE    FREERPL                 RETURN IF SO\n         CH    R0,HEX8                 X'0008' THAT WE SHOULD NOT GET ?\n         BE    FREERPL                 YES, IGNORE IT FOR NOW\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n*******> BNZ   SNOCCUR                 ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     FREERPL                 FREE RPL GO BACK TO VTAM\n         TITLE '*********  N E T S O L  -  SEND MESSAGES ROUTINE'\n***********************************************************************\n*                                                                     *\n*          BRANCH TO DEVICE DEPENDENT SEND ROUTINE TO WRITE           *\n*          A MESSAGE TO THE LOGICAL UNIT.                             *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         SPACE 3\nSENDMSG  DS    0H\n         L     R3,RPLUSFLD             -> TTE\n         L     R9,TERMDDT              -> DDT FOR TERMINAL\n         L     R15,DDTSEND             -> SEND ROUTINE FOR TERMINAL\n         BR    R15                     GO SEND MESSAGE\n         TITLE '*********  N E T S O L  -  SEND ROUTINE FOR 3270'\n***********************************************************************\n*                                                                     *\n*          S32SEND EDITS AND SENDS NETSOL MESSAGES TO 3270 DEVICES.   *\n*                                                                     *\n*          ALL MESSAGES SENT ARE ASYNCHRONOUS USING THE RPL PASSED    *\n*          IN R5.                                                     *\n*                                                                     *\n*               ON ENTRY:                                             *\n*                  REG. 0 CONTAINS MESSAGE NUMBER                     *\n*                  REG. 3 POINTS TO TTE OF ACTIVE TERMINAL            *\n*                  REG. 5 POINTS TO RPL BEING USED                    *\n*                  REG. 9 POINTS TO DDT FOR TERMINAL                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nS32SEND  DS    0H\n         CLM   R0,1,=AL1(MSG06)        LOGON MESSAGE ?\n         BNE   S32MSG1                 NO, THEN DON'T SEND MSG WITH EB\n         OI    TERMFLAG,LOGPROC        SINCE SENDING MSG IS LOGON\n         OI    RPLRH3,RPLEB            SEND WITH END BRACKET ON\n*                                      AS 3276 MAY GET UPSET ON CLSDST\n         B     S32MSG2                 SKIP CHECK FOR EB SEND\n         SPACE 1\nS32MSG1  TM    TERMFLAG,SENDSCED   IS THERE A SEND (POST=SCHED) DC18203\n*                                   ALREADY ISSUED FOR THIS LU  DC18203\n       BO    MISSSEND              IF SO DO NOT ISSUE A NEW ONE DC18203\n       NI    TERMFLAG,255-(LOGPROC) INDICAT NOT IN LOGON FUNCTION\n         TM    RPLRH3,RPLEB            END BRACKET DUE TO MSG 6 ?\n         BNO   S32MSG2                 NO, OKAY STILL IN BRACKET\n         NI    RPLRH3,X'FF'-RPLEB      CLEAR END BRACKET STATE\n         OI    RPLRH3,RPLBB            3276 MIGHT LIKE TO KNOW\n         SPACE 1\nS32MSG2  DS    0H\n         STC   R0,MSGINDEX             SAVE MESSAGE INDEX\n         TM    FLAGS,FIRSTSND          IS THIS FIRST SEND AFTER OPNDST\n         BZ    S32MSGOK\n         OI    RPLRH3,RPLBB            INDICATE BEGIN BRACKET\n         NI    FLAGS,255-(FIRSTSND)    NEXT SEND WITHOUT BRACKET\n         SPACE 2\n***********************************************************************\n*        FIND OUTPUT MESSAGE AND LENGTH                               *\n***********************************************************************\n         SPACE 1\nS32MSGOK DS    0H\n         SR    R1,R1                   CLEAR OUT REG\n         IC    R1,MSGINDEX             GET THE INDEX\n         LA    R2,X'FF'-X'80'          TURN OFF POSSIBLE RESET\n         NR    R1,R2                    INDICATOR PRIOR TO INDEXING\n         BCTR  R1,0                    INDEX - 1\n         SLL   R1,2                    4 * (INDEX - 1)\n*                                      = DISPLACEMENT OF MESSAGE\n         L     R2,DDTMSGTB(R1)         POINT TO MSG. ENTRY IN TABLE\n         LH    R1,0(R2)                GET MESSAGE LENGTH\n         S     R1,=F'2'                REDUCE BY LENGTH FIELD AT FRONT\n         LA    R2,2(R2)                POINT TO ACTUAL MSG.\n         LA    R6,IOAREA               POINT TO OUTPUT AREA\n         LR    R7,R2                   POINT TO MESSAGE AREA\n         AH    R7,DDTMSGOF               WHERE DATA IS TO BE MOVED\n         SPACE 2\n***********************************************************************\n*        REGISTER 1 CONTAINS MESSAGE LENGTH                           *\n*        REGISTER 2 POINTS TO MESSAGE                                 *\n*        REGISTER 6 POINTS TO OUTPUT AREA                             *\n*        REGISTER 7 POINTS TO MESSAGE AREA FOR VARIABLE DATA          *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*        EDIT MESSAGE 01                                              *\n***********************************************************************\n         CLI   MSGINDEX,X'01'          IS THIS MESSAGE 01?\n         BNE   S32CKM7                 NO SO CARRY ON\n         LA    R8,NIBSTART             YES => POINT AT NIB\n         MVC   0(8,R7),NIBLMODE               ADD LOGMODE ENTRY TO MSG\n         B     S32CONT\n***********************************************************************\n*        EDIT MESSAGE 07                                              *\n***********************************************************************\nS32CKM7  DS    0H\n         CLI   MSGINDEX,X'07'          IS THIS MESSAGE 07?\n         BNE   S32CKM8                 NO SO CARRY ON\n         MVC   0(8,R7),=CL8' '         BLANK OUT USER DATA FIELD\n         LR    R0,R1                   SAVE CONTENTS OF R1\n         SR    R1,R1                   LOAD LENGTH\n         IC    R1,DATASEQL              OF USER DATA\n         CH    R1,=AL2(8)              IF LENGTH\n         BNH   *+8                      GREATER THAN 8\n         LA    R1,8                      THEN SET TO 8\n         BCTR  R1,0                    DECREMENT FOR MVC\n         EX    R1,S32MVAPP             MOVE APPLICATION ID TO MSG.\n         LR    R1,R0                   RESTORE R1\n         B     S32CONT                 SKIP FURTHER EDITS\nS32MVAPP MVC   0(0,R7),DATASEQ         *** EXECUTED ***\n***********************************************************************\n*        EDIT MESSAGE 8,9,10,11                                       *\n***********************************************************************\nS32CKM8  DS    0H\n         CLI   MSGINDEX,X'08'          IS MSG # LESS THAN 8?\n         BL    S32CONT                 YES => BYPASS FURTHER CHECKING\n         CLI   MSGINDEX,X'0B'          IS MSG # GREATER THAN 11?\n         BH    S32CKM12                YES => CONTINUE MESSAGE CHECKING\n         MVC   0(8,R7),APPLID          MOVE APPLID TO MESSAGE\n         B     S32CONT                 SKIP FURTHER EDITS\n***********************************************************************\n*        EDIT MESSAGE 12                                              *\n***********************************************************************\nS32CKM12 CLI   MSGINDEX,X'0C'          IS IT MSG12?\n         BNE   S32CONT                 NO\n         BAL   R14,TIMETERM            ADD NODE NAME & TIME TO MSG\n         SPACE 1\n*        ALL BCSC MENUS WRITTEN FOR LOGABAX TERMINALS ARE TO\n*        TRACKED BY WRITING A MESSAGE TO SYSLOG.\n         SPACE 1\n         C     R9,=AL4(DDT3767)        IF THIS IS A LOGABAX TERMINAL\n         BNE   S32CONT                   NO  => BYPASS LOG MSG\n         MVC   LOGMENU+17(8),TERMNAME    YES => ADD NODE NAME TO MSG\n         MVC   LOGMENU+44(6),=CL6'LOGON'        ASSUME FROM LOGON EXIT\n         TM    EXITFLAG,LOGONEX                 IF FROM LOGON EXIT\n         BO    *+10                               YES=> BYPASS\n         MVC   LOGMENU+44(6),=CL6'RESEND'         NO => MARK AS RESEND\n         STM   R0,R1,RPLERRSA                   SAVE REGS\n         WTO   MF=(E,LOGMENU)                   WRITE MSG TO LOG\n         LM    R0,R1,RPLERRSA                   RESTORE REGS\n***********************************************************************\n*        MOVE MESSAGE TO OUTPUT AREA                                  *\n***********************************************************************\nS32CONT  DS    0H\n         LR    R3,R1                   LOAD MESSAGE LENGTH TO ODD REG\n         LR    R7,R1                   LOAD MESSAGE LENGTH TO ODD REG\n         MVCL  R6,R2                   MOVE MESSAGE TO OUTPUT BUFFER\n         L     R3,RPLUSFLD             RESTORE TTE POINTER\n         LA    R1,IOAREA               CALCULATE\n         SR    R6,R1                     THE MESSAGE LENGTH\n         ST    R6,SENDLEN              SAVE LENGTH OF SEND\n         SPACE 1\nSEND     OI    MFLAGS,SENDING          TELL ERREXIT ASY. SEND\n         OI    MACFLAGS,SENDASY\n         L     R2,SENDLEN              LENGTH TO SEND TO TERM\n         L     R4,CID                  TERMINAL ADDRESS\n         SPACE 2\n***********************************************************************\n*        CHECK TO SEE IF SEND IS FOR MESSAGE 6 (LOGON IN PROGRESS)    *\n*        AND IF SO, SEND REQUESTING A POSITIVE RESPONSE SO THAT THE   *\n*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *\n*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *\n***********************************************************************\n         SPACE 1\n         CLI   MSGINDEX,X'06'          LOGON IN PROGRESS MSG ?\n         BE    S32SEND6                YES, DO ELSEWHERE\n         OI    TERMFLAG,SENDSCED    INDICATE A SEND TO BE ISSUEDDC18203\n         SPACE 1\n         SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         X\n               EXIT=SENDEND,RPL=(PTRRPL),POST=SCHED,                   X\n               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X\n               OPTCD=(ASY,CA),RESPOND=(EX,FME,NRRN)\n         SPACE 1\n         B     S32CHKSD                HANDLE LIKE REST OF SENDS\n         SPACE 3\n***********************************************************************\n*        SEND MESSAGE 6 REQUESTING A POSITIVE RESPONSE SO THAT THE    *\n*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *\n*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *\n***********************************************************************\nS32SEND6 SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         X\n               EXIT=SENDEND,RPL=(PTRRPL),POST=RESP,                    X\n               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X\n               OPTCD=(ASY,CA),RESPOND=(NEX,FME,NRRN)\nS32CHKSD NI    MFLAGS,255-(SENDING)\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    SEND                    YES. REISSUE\n         LTR   R15,R15                 WRITE ACCEPTED?\n*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND CHK)?\n*******> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         B     RETURN                  RETURN TO VTAM\n         SPACE 3\n         LTORG\n         TITLE '*********  N E T S O L  -  SEND EXIT'\n***********************************************************************\n*                                                                     *\n*         SENDEND IS ENTERED WHEN THE EXIT HAS BEEN SCHEDULED         *\n*         FOR THE SEND DONE ABOVE.                                    *\n*                                                                     *\n*         REGISTER 1 POINTS TO THE ASYNCH RPL BEING USED              *\n*         REGISTER 15 =A(SENDEND)                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSENDEND  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         L     R3,RPLUSFLD                                      DC18203\n         NI    TERMFLAG,X'FF'-SENDSCED INDICATE SEND COMPLETE   DC18203\n         OI    MFLAGS,SENDING          TELL ERREXIT THAT ERROR\n*                                      ARE FOR SEND\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                      IS ENTERED IF ERRORS HAVE\n*                                      OCCURRED\n         NI    MFLAGS,255-(SENDING)\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                    ACTION           *\n*  RTNCD FDBK2                                       CODE(S)          *\n*  CODE  CODE         MEANING                        RETURNED         *\n*                                                   (R15  R0)         *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                 00  00          *\n*   04    04    EXCP. INCOMMING MESSAGE                               *\n*               REC  RESP HANDLES 0404 FOR 'SEND POST=SCHED'          *\n*               SEND EXIT HANDLES 0404 FOR 'SEND POST=RESP'           *\n*                                                                     *\n*             SSENSEI/SSENSMI                                         *\n*                80     XX        PATH ERRORS         14  00          *\n*                80     05        NO SESSION COND.    08  04          *\n*                40     XX        RH   ERRORS         SNOCCUR         *\n*                20     XX        STATE ERRORS        08  04          *\n*                10     XX        REQUEST ERRORS      SNOCCUR         *\n*                08     00        BRACKET ERROR       18  00          *\n*                08     01        REQUEST REJECT      08  00          *\n*                08     02        INTV REQ            14  00          *\n*                08     13        BRACKET ERROR       18  00          *\n*                08     2B        PRES. SPACE INT. LO 18  00          *\n*                08     2D        SLU BUSY            14  00          *\n*                                                                     *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *\n*   0C    01    LU NOT AVAILABLE (POWERED OFF)        08  00          *\n*   0C    02    REQUEST CANCELLED TEST REQ (LOSTTERM) 14  00          *\n*   0C    07    CONNECTION RECOVERY        (LOSTTERM) 14  00          *\n*   0C    08    LU RESTARTED               (LOSTTERM) 14  00          *\n*   0C    0B    REQUEST CANCELLED BY CLSDST           14  00          *\n*   0C    0C    REQUEST CANCELLED BY CLEAR            08  04          *\n*   10    03    QUICK HALT (TPEND)                    SNOCCUR         *\n*   10    05    PERMANENT CHANNEL OR LINK FAILURE     08  00          *\n*   10    07    VARY DEACTIVATE IMMEDIATE  (LOSTTERM) 14  00          *\n*   10    09    TERMINATE SELF OR LOGOFF   (LOSTTERM) 14  00          *\n*   10    0A    ACF/VTAM ERROR                        SNOCCUR         *\n*   10    0D    ACF/VTAM INACTIVE FOR ACB             SNOCCUR         *\n*   10    0E    ABEND FOR PROGRAMS TCB                SNOCCUR         *\n*   10    0F    BUFFERS FULL               (LOSTTERM) 14  00          *\n*   10    10    TERMINATE SELF RECEIVED               08  04          *\n*   14    12    CLSDST IN PROGRESS                    14  00          *\n*   14    13    CID INVALID                           14  00          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         OI    EXITFLAG,SENDEX         INDICATE WRITE EXIT\n         CH    R15,HEX18               HIGHEST VALID ACTION\n*******> BH    SNOCCUR                  CODE IS X'20'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTABB(R15)            CHECK VALID ACTION\nERRTABB  B     ROCHKB               0  CHECK IF WRITE WENT\n         BAL   R7,SNOCCUR           4\n         B     RELOPNA              8  CHECK IF WE WANT TO REOPEN\n         BAL   R7,SNOCCUR           C\n         B     WHATSEND            10  FIND OUT WHAT KIND OF SEND\n         B     FREERPL             14  LOST DEVICE\n         B     RESENDM             18  RESEND MSG\n         SPACE 1\nRELOPNA  LTR   R0,R0                   OPNDST AFTER CLSDST ?\n         BZ    RELEASE                 NO SO JUST GO CLSDST\n         OI    FLAGS,RELOPND           INDICATE WE WANT RE-OPEN\n         B     RELEASE                 CLSDST FIRST\n         SPACE 1\nWHATSEND TM    FLAGS,LUSTATE           LUSTAT SEND ?\n         BO    SENDLU\n         B     SEND                    NO, NORMAL SEND, CONTINUE IT\n         SPACE 1\nRESENDM  DS    0H                      RESEND MESSAGE\n         NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB TERMINAL MIGHT\n*                                      HAVE STARTED FIRST\n         IC    R0,MSGINDEX             RETRIEVE SAVED MSG #\n         B     SENDMSG\n         SPACE 1\nROCHKB   DS    0H\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n*******> BNZ   SNOCCUR                 NO ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n*ISSSEND NI    FLAGS,255-(LOOPONCE)     TURN OFF RETRY INDIC\nMISSSEND TM    FLAGS,LUSTATE           CONTINUE LUSTAT PROC ?\n         BO    CONTLU\n         TM    FLAGS,CLEARSCR          CLEAR OF SCREEN FROM RECEND?\n         BO    CONTPASS\n         B     FREERPL                 WAIT FOR ACITIVITY FROM LU\n         SPACE 3\n         LTORG\n         TITLE '*********  N E T S O L  -  RELREQ EXIT'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN AN APPLICATION ISSUES        *\n*    OPNDST (ACQUIRE) FOR A TERMINAL CURRENTLY OWNED BY NETSOL.       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *\n*         FOLLOWING;                                                  *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - ADDRESS OF SYMBOLIC NAME OF TERMINAL          *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nRELREQ   DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RRFAIL                  YES => WRITE REL REQ FAILED MSG\n         SPACE 2\n***********************************************************************\n*        NOW SCAN THE TERMINAL TABLE ENTRIES TO SEE IF WE CAN FIND A  *\n*        MATCH ON THE TERMINAL NAME (ERROR IF DON'T). WHEN FOUND,     *\n*        SEE IF A LOGON IS IN PROGRESS (VIA LOGPROC FLAG). IF THIS IS *\n*        THE CASE, WE WON'T RELEASE THE TERMINAL, OTHERWISE RELEASE   *\n*        TO THE APPLICATION REQUESTING IT.                            *\n***********************************************************************\n         SPACE 1\n         LM    R3,R5,TERMTABS          SET UP FOR THE BXLE THRU TABLE\n         CR    R3,R5                   NULL TABLE ?\n*******> BH    SNOCCUR                 YES, ERROR IF SO\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         L     R6,4(,R1)               ADDRESS OF RELREQ NAME OF TERM\n         SPACE 1\nFINDNAME CLC   0(8,R6),TERMNAME        MATCH ON THE NAME\n         BE    FNDNAME                 YES, FOUND ITS TTE\n         BXLE  R3,R4,FINDNAME          CONTINUE\n         BAL   R7,SNOCCUR              ERROR, SHOULD NEVER GET HERE\n         SPACE 1\nFNDNAME  TM    TERMFLAG,LOGPROC        LOGON ? YES, DON'T FREE TERMINAL\n         BO    RRFAIL                  YES => WRITE REL REQ FAILED MSG\n         SPACE 1\n         OI    EXITFLAG,RELREQEX       INDICATE IN RELREQ EXIT\n         BAL   R14,GETRPL              GET AN RPL\n         LA    R13,RPLSAVE             R13 -> SAVE IN THE RPL\n         ST    R3,RPLUSFLD             SAVE ADDRESS OF TTE IN THE RPL\n         ST    R5,TERMCRPL             SAVE ADDRESS OF RPL IN THE TTE\n         LA    PTRNIB,SYNCHNIB\n         MVC   NIBSYM(8),TERMNAME      PLACE SYMBOLIC TERMINAL\n*                                      SET INDICATOR TO\n         OI    FLAGS,RELOPND           RELEASE THE DEVICE AND\n*                                      TRY TO REOPEN IT\n         MVC   CID,TERMCID             GET CID INTO ASYNCH RPL\n         SPACE 1\n         MVC   RELRQMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG\n         WTO   MF=(E,RELRQMSG)         INFORM WORLD OF REQUEST\n         SPACE 1\n         B     RELEASE                 GO DO THE RELEASE\n         SPACE 1\nRRFAIL   MVC   RELFLMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG\n         WTO   MF=(E,RELFLMSG)         INFORM WORLD OF REQUEST FAILURE\n         SPACE 1\n         B     RETURN                  REFUSE RELEASE REQUEST\n         SPACE 3\n         LTORG\n         TITLE '*********  N E T S O L  -  LOSTERM EXIT'\n***********************************************************************\n*                                                                     *\n*   THIS EXIT ROUTINE IS SCHEDULED BY VTAM WHEN :                     *\n*                                                                     *\n*                * WHEN CONTACT WITH AN LU IS LOST                    *\n*                * WHEN A LU REQUESTED A LOGOFF                       *\n*                * WHEN CERTAIN ERRORS DETECTED IN TRANSMISSION       *\n*                * WHEN A LU IS TEMPORARILY UNAVAILABLE               *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *\n*            FOLLOWING;                                               *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - CID OF LOST TERMINAL                          *\n*              WORD 2 - USER FIELD FROM NIB                           *\n*              WORD 3 - REASON CODE, AS FOLLOWS:                      *\n*                                                                     *\n*  0 - DIAL-LINE DISCONNECT (DIAL-IN)            RELEASE (CLSDST)     *\n*  4 - DIAL-LINE DISCONNECT (DIAL-OUT)           RELEASE (CLSDST)     *\n*  8 - RESERVED                                                       *\n*  C - CONTACT WITH LU PERMANENTLY LOST          PROBDEV (CLSDST)     *\n* 10 - LU SUCCESSFULLY RECONTACTED               RELEASE + REAQUIRE   *\n* 14 - UNCONDITIONAL TERMINATE COMMAND           RELEASE (CLSDST)     *\n*    -       \"       CHARACTER CODED LOGOFF         \"        \"        *\n*    -       \"       TERMSESS                       \"        \"        *\n* 18 - CONTACT WITH LU LOST                      RETURN TO VTAM       *\n* 1C - RESERVED                                                       *\n* 20 - CONDITIONAL TERMINATE SELF                RELEASE + REACQUIRE  *\n*    -     \"       CHARACTER CODED LOGOFF           \"        \"        *\n*    -     \"       TERMSESS                         \"        \"        *\n* 24 - BUFFER LIMIT DEFINED FOR LU EXCEEDED         \"        \"        *\n* 28 - TEST REQUEST SET                             \"        \"        *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLOSTERM  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         SPACE 1\n         LR    R7,R1                   SAVE ACROSS GETRPL\n         BAL   R14,GETRPL              GET AN RPL FOR WORK\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         MVC   RPLUSFLD(4),8(R7)       COPY TTE ADDRESS TO RPL\n         OI    EXITFLAG,LOSTEX         INDICATE IN LOSTERM EXIT\n         MVC   CID,4(R7)               SAVE CID IN RPL/WORKQREA\n         MVC   PACKWORK(1),15(R7)      COPY LOSTERM CODE TO WORK AREA\n         UNPK  PACKWORK+2(3),PACKWORK(2) UNPACK TO PRINT\n         MVC   LOSTMSG+31(2),PACKWORK+2  TO MSG AREA\n         TR    LOSTMSG+31(2),TRTAB     MAKE IT PRINTABLE\n         L     R3,RPLUSFLD             GET TTE POINTER\n         ST    R5,TERMCRPL             SAVE A(RPL) IN TTE\n         MVC   LOSTMSG+43(8),TERMNAME  TERMINAL LU NAME\n         WTO   MF=(E,LOSTMSG)          ISSUE ERROR MSG.\n         SPACE 2\n***********************************************************************\n*        NOW CHECK TO MAKE SURE THAT THE NIB USER FIELD IS CORRECT.   *\n*        WOULD NOT BE IF OPNDST DONE WITH WRONG NIBUSER VALUE.        *\n***********************************************************************\n         SPACE 1\n         CLC   CID,TERMCID             CHECK THAT CID'S ARE CORRECT\n         BE    LOSTCODE                YES SO GO CHECK CODE     DC18203\n         CLC   TERMCID,=F'0'           IS IT ZERO (THIS HAPPENS DC18203\n*                                      WHEN AN OPNDST FAILS FOR DC18203\n*                                      FIRST LOGON PRIOR TO     DC18203\n*                                      LOSTERM SCHEDULED )      DC18203\n******>  BNE   SNOCCUR                 BAD NEWS IF NOT !!!!!!!\n         BNE   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\nLOSTCODE L     R4,12(R7)               GET LOSTERM ENTRY CODE\n         CH    R4,HEX8                 IS IT 0,4 OR 8 ?\n         BNH   RELEASE                 YES SO JUST CLSDST DEVICE\n         CH    R4,HEXC                 IS IT 12 ?\n         BE    PROBDEV                 YES SO WTO AND CLSDST\n         CH    R4,HEX10                IS IT X'10' ?\n         BE    REAQUIRE                YES SO LETS RELEASE + REOPEN\n         CH    R4,HEX14                IS IT X'14' ?\n         BE    PROBDEV                 YES SO WTO AND CLSDST\n         CH    R4,HEX20                IS IT GREATER THAN X'20' ?\n         BNL   REAQUIRE                YES SO LETS RELEASE + REOPEN\n         B     FREERPL                 X'18' CODE (24), IGNORE, WAIT\n*                                       FOR REENTRY WITH X'0C' OR X'10'\n         SPACE 1\nREAQUIRE OI    FLAGS,RELOPND           INDICATE TO RELEASE\n         B     RELEASE\n         SPACE 3\n         LTORG\n         TITLE '*********  N E T S O L  -  RELEASE TERMINAL SUBRTN'\n***********************************************************************\n*                                                                     *\n*        RELEASE THE TERMINAL, AND PERHAPS RE-ACQUIRE IT.             *\n*                                                                     *\n*        THERE ARE THREE ENTRY POINTS TO THIS ROUTINE.                *\n*                                                                     *\n*        'LOGOFF' IS USED WHEN THE USER ISSUES A LOGOFF COMMAND TO    *\n*        NETSOL. THE TERMINAL IS RELEASED.                            *\n*                                                                     *\n*        'QSESSION' IS USED WHEN A CLSDST(PASS) FAILS BECAUSE A QUEUED*\n*        SESSION REQUEST IS OUTSTANDING FOR THIS TERMINAL FROM THE    *\n*        REQUESTED APPLICATION. THE TERMINAL IS RELEASED AND THEN     *\n*        A SIMLOGON IS ISSUED TO REACQUIRE THE TERMINAL WHEN IT       *\n*        IS RELEASED BY THE APPLICATION.                              *\n*                                                                     *\n*        'PROBDEV' WILL WTO AND RELEASE THE DEVICE BECAUSE OF AN I/O  *\n*        PROBLEM.                                                     *\n*                                                                     *\n*        'RELEASE' WILL RELEASE THE DEVICE AND, IF THERE IS A TEST    *\n*        REQUEST SET, 'RELEASE' WILL REACQUIRE THE DEVICE.            *\n*                                                                     *\n*        REGISTER 5 (PTRRPL) WILL POINT TO AN RPL.                    *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLOGOFCMD OI    FLAGS,LOGOFF            INDICATE CLSDST TO RELEASE THE\n*                                      TERMINAL.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nQSESSION OI    FLAGS,SIMLOG            INDICATE CLSDST THEN SIMLOGON\n*                                      THE CLSDST RELEASE MUST BE DONE\n*                                      SINCE THE CLSDST PASS FAILED.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nPROBDEV  OI    FLAGS,BADEVICE          TURN ON  FLAG FOR WTO.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nBADLU    MVC   LISTWTO8+17(8),TERMNAME ADD TERMNAME TO ERROR MSG\n         WTO   MF=(E,LISTWTO8)         WRITE ERROR MSG\n         MVC   CID,TERMCID             MOVE CID INTO RPL FOR LATER USE\n         B     RELCODE                 GO TO RELEASE CODE\n         SPACE 1\nRELEASE  TM    FLAGS,RELOPND           IS RELEASE A PRELUDE TO\n         BO    CLOSEREL                 REOPEN?\n*                                      NO. SIMPLY RELEASE IT\n*                                      YES. MUST SAVE SYMBOLIC\n*                                       NAME FOR LATER REOPEN\n*                                      NOTE: THIS CAN OCCUR\n*                                       FOR READ(ANY)/CHECK\n*                                       ERROR HANDLING.\nRELCODE  L     R3,RPLUSFLD             -> TTE FROM RPL\n         SPACE 1\n         TM    FLAGS,BADEVICE          IS WTO BIT ON ? NO, DON'T WTO\n         BZ    CLOSEREL\n         NI    FLAGS,255-(BADEVICE)    YES WTO BIT ON THEN\n*                                       TURN WTO FLAG OFF.\n         MVC   LISTWTO+17(8),TERMNAME  MOVE DEVICE NAME INTO\n*                                      THE MESSAGE AREA OF\n*                                      THE LIST FORM OF WTO.\n         WTO   MF=(E,LISTWTO)          EXECUTE FORM OF WTO\n         SPACE 1\nCLOSEREL OI    MACFLAGS,CLSREL         INDICATE DOING CLOSE(REL\n         OI    MFLAGS,CLSDST\n***********************************************************************\n*        CLSDST RELEASE WILL BE DONE FOR THE TERMINAL BY SPECIFYING   *\n*        THE TERMINAL NAME IN THE NIB. THE NIB IS USED BECAUSE THE    *\n*        CLSDST(RELEASE) CAN BE DONE FROM THE LOGON EXIT BEFORE A     *\n*        SESSION HAS BEEN ESTABLISHED. IN THIS CASE, THE CID WOULD BE *\n*        REJECTED BY VTAM IF USED IN THE CLSDST(RELEASE).             *\n***********************************************************************\n         MVC   NIBSTART(NIBLNIB),FRESHNIB INITIALIZE NIB\n         LA    PTRNIB,NIBSTART         -> NIB\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,NIBUSER              SAVE A(TTE) IN NIB\n         MVC   NIBSYM(8),TERMNAME      MOVE TERMINAL NAME TO NIB\n         CLSDST RPL=(PTRRPL),                                          X\n               EXIT=CDSTEND1,                                          X\n               OPTCD=RELEASE,                                          X\n               NIB=NIBSTART\n         SPACE 1\n         NI    MFLAGS,255-(CLSDST)     INDICATE CLOSE DONE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    CLOSEREL                YES. REISSUE\n         LTR   R15,R15                 CLSDST ACCEPTED?\n*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*******> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '*********  N E T S O L  -  CLSDST(RELEASE) END EXIT'\n***********************************************************************\n*                                                                     *\n*        CHECK VALIDITY OF THE CLSDST(RELEASE)                        *\n*        ENTRY IS FROM THE CLSDST(RELEASE) IN THE RELEASE RTN.        *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nCDSTEND1 DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,CLSDST           TELL ERREXIT THAT ERROR\n*                                       IS FOR CLSDST(RELEASE)\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(CLSDST)\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    52    NIB INVALID                          SNOCCUR          *\n*   14    60    INVALID LU NAME                      14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         OI    EXITFLAG,CLOSEX         INDICATE IN CLOSE REL EX\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n*******> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB9(R15)            CHECK VALID ACTIONS\nERRTAB9  B     R0CHK9               0  PROBABLY RELEASED IT\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  ALREADY RELEASING, NEW\n*                                       RELEASE WON'T HELP\n         BAL   R7,SNOCCUR           C  NO MSG TO WRITE AND\n*                                       PROBABLY COULDN'T\n*                                       ANYWAY\n         B     CLOSEREL            10  REISSUE.\n         B     FREERPL             14  IT COULD BE THAT NETSOL\n*                                       NO LONGER HAS THE\n*                                       DEVICE SINCE IT WAS\n*                                       ALREADY FREED BY A LOSTERM,\n*                                       RELREQ OR READEND\n*                                       REQUEST.\n         SPACE 1\nR0CHK9   DS    0H\n         LTR   R0,R0                   VALID COMPLETION?\n*******> BNZ   SNOCCUR                 ERROR IF NOT\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         EJECT\n***********************************************************************\n*                                                                     *\n*  AFTER RELEASING THE TERMINAL, IT MAY BE NECESSARY TO               *\n*  RE-ACQUIRE IT, OR AT LEAST ATTEMPT TO RE-ACQUIRE IT, FOR THE       *\n*  FOLLOWING REASONS:                                                 *\n*                                                                     *\n*    THE OTHER APPLICATION MAY CANCEL ITS REQUEST FOR THE             *\n*    TERMINAL AFTER NETSOL'S RELREQ EXIT HAS ISSUED THE               *\n*    CLSDST(RELEASE), BUT BEFORE LOGGING ONTO THE TERMINAL.           *\n*    IN THIS CASE NETSOL WISHES TO RE-ACQUIRE THE TERMINAL.           *\n*    THE TERMINAL WILL ONLY BE ACQUIRED BY NETSOL IF THE              *\n*    OTHER APPLICATION HAS NOT ALREADY LOGGED ON THE TERMINAL.        *\n*                                                                     *\n*    THE TERMINAL MAY HAVE BEEN RELEASED BECAUSE IT WAS LOGGED        *\n*    ON TO NETSOL WHEN THE TEST REQUEST KEY WAS SET.  THIS            *\n*    BLOCKS ALL FURTHER I/O TO THE DEVICE, INCLUDING ENTRY OF         *\n*    A LOGON SEQUENCE NECESSARY TO PASS THE DEVICE TO TOLTEP.         *\n*    NETSOL MUST RELEASE, THEN RE-ACQUIRE THE DEVICE SO THAT          *\n*    I/O IS NO LONGER BLOCKED.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         L     R3,RPLUSFLD             -> TTE FOR THE NAME\n         MVI   TERMFLG2,TREL           MARK TERM RELEASED\n         TM    FLAGS,LOGOFF            LOGOFF COMMAND ISSUED?\n         BO    FREERPL                  YES => FINISHED\n         TM    FLAGS,SIMLOG            NOW DO SIMLOGON?\n         BO    SIMLOGON                 YES => BR TO SIMLOGON CODE\n         TM    FLAGS,RELOPND           RELEASE DEVICE ONLY ?\n         BZ    FREERPL\n         NI    FLAGS,255-(RELOPND)\n         LA    PTRNIB,NIBSTART         POINT TO THE NIB\n         L     R3,RPLUSFLD             -> TTE FOR THE NAME\n         MVC   NIBSYM(8),TERMNAME      GET THE SYMBOLIC NAME\n         SPACE 2\n***********************************************************************\n*  MUST USE NIB WITH SYMBOLIC TERMINAL NAME BECAUSE THE CID IS        *\n*  NO LONGER VALID AFTER DEVICE IS RELEASED.  OPNDST(SPEC)            *\n*  MUST HAVE A SYMBOLIC TERMINAL NAME SUPPLIED.                       *\n***********************************************************************\n         SPACE 1\nREOPEN   DS    0H                      USE THIS LABEL FOR ERREXIT\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,NIBUSER              -> TTE IN NIB FOR FUTURE RPL'S\n         OI    MACFLAGS,OPNDACQ        SET OPNDST ISSUED\n         OI    MFLAGS,OPNDSPEC         SET OPNDST IS CURRENTLY ACTIVE\n         OPNDST RPL=(PTRRPL),                                          X\n               OPTCD=(SPEC,ACQUIRE),                                   X\n               EXIT=OPNAQRX,                                           X\n               NIB=NIBSTART\n         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    REOPEN                  YES. REISSUE\n         LTR   R15,R15                 OPNDST ACCEPTED?\n*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*******> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '*********  N E T S O L  -  OPNDST (SPEC,ACQUIRE) EXIT'\n***********************************************************************\n*                                                                     *\n*        CHECK VALIDITY OF THE OPNDST                                 *\n*        ENTRY IS FROM THE OPNDST IN THE CLSDST END EXIT.             *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nOPNAQRX  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR\n*                                       IS FOR OPNDST\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    00    DEVICE UNAVAILABLE                   14  00           *\n*   10    03    VTAM IS HALTING                      SNOCCUR          *\n*   10    05    PERMENENT FAILURE IN PATH            08  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    53    NODE UNKNOWN TO VTAM                 14  00           *\n*   14    55    NO OPNDST AUTHORIZATION              SNOCCUR          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         OI    EXITFLG2,OPNACQX        INDICATE OPNDST EXIT ENTERED\n         CH    R15,HEX14               HIGHEST VALID ACTION\n*******> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB7(R15)            CHECK VALID ACTIONS\nERRTAB7  B     R0CHK7               0  CHECK IF DEVICE ACCEPTED\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         BAL   R7,SNOCCUR           C  CAN'T WRITE MSG IF NOT\n*                                      CONNECTED\n         B     REOPEN              10  REISSUE. NO NEED TO\n*                                       CHECK FOR RESET\n         B     FREERPL             14  A NORMAL CASE.  FAILED\n*                                       TO RECONNECT DEVICE.\n         SPACE 1\nR0CHK7   DS    0H\n         CH    R0,HEX8                 TERMINAL RECONNECTED?\n         BE    FREERPL                 NO. THIS IS WHAT IS\n*                                       WANTED.  CONTINUE\n*                                       WITH OTHER DEVICES.\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n******>  BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         L     R3,RPLUSFLD             -> TTE\n         MVI   TERMFLG2,TOPEN             MARK TERM ON NETSOL\n         OI    FLAGS,FIRSTSND\n         B     RESEND\n         TITLE '*********  N E T S O L  -  RESEND ROUTINE'\n***********************************************************************\n*                                                                     *\n*        RESEND (REISSUE A SEND)                                      *\n*                                                                     *\n*   THIS ROUTINE IS USER BY THE SENDEND EXIT , RECEND EXIT ,          *\n*   RELEASE EXIT TO REISSUE THE 'GOOD MORNING ' MESSAGE               *\n*   AFTER RECEIVING A BAD LOGON OR RECOVERING AN LU                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nRESEND   DS    0H\n         LA    R0,MSG12                LOGON MESSAGE\n         NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB TERMINAL MIGHT\n*                                      HAVE STARTED FIRST\n         B     SENDMSG\n         TITLE '*********  N E T S O L  -  ADD TIME AND NODE NAME TO MEX\n               SSAGE'\n*        A LITTLE SUBROUTINE TO PUT NODE AND TIME IN MESSAGE 12\n*          ***** RETURNS TO REG 14 ******\n         SPACE 1\nTIMETERM DS    0H\n         STM   R0,R1,TIMESAVE          SAVE REGS\n         L     R1,DDTTERM              -> TERM FIELD IN MSG 12\n         MVC   0(8,R1),TERMNAME        INSERT NODE NAME\n         SPACE 1\n*        PLACE TIME IN MESSAGE 12\n         SPACE 1\n         TIME  DEC\n         STM   R0,R1,TIMEWORK          TIME STASHED AS HHMMSSTH DDYYY\n         L     R1,DDTTIME              -> TIME FIELD IN MSG 12\n         MVC   0(L'EDITMASK,R1),EDITMASK  SET UP EDIT MASK\n         OI    TIMEWORK+2,X'0F'        SET UP THE SIGN\n         ED    0(7,R1),TIMEWORK        DO IT TO THE TIME\n         MVI   3(R1),C':'              SET SEPARATOR\n         MVI   6(R1),C' '              BLANK OUT THE SECONDS DIGIT\n         ED    8(7,R1),TIMEWORK+5      DO IT TO THE DATE\n         LM    R0,R1,TIMESAVE          RESTORE THE WORKERS\n         BR    R14                     REURN TO REQUESTOR\nTIMEWORK DC    F'0'\nTIMESAVE DC    2F'0'                    SAVE R0 + R1 HERE\nEDITMASK DC    X'4020214B212121404021204B212121' TIME STAMP EDIT PATT\n         TITLE '*********  N E T S O L  -  GET AN RPL SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*        THE GETRPL SUBROUTINE GETS A NEW RPL VIA A GETMAIN MACRO     *\n*        FOR 'LNGTHRPL' IN SUBPOOL 1. IT THEN INITIALIZES IT AND      *\n*        RETURNS TO THE CALLER WITH THE RPL ADDRESS IN R5.            *\n*                                                                     *\n*        INPUT REGISTERS:                                             *\n*                                                                     *\n*              REG 10-12 - BASE REGISTERS                             *\n*              REG 14    - CALLER'S RETURN ADDRESS                    *\n*                                                                     *\n*        OUTPUT REGISTERS:                                            *\n*                                                                     *\n*              REG 0-1 - UNPREDICTABLE                                *\n*              REG 5   - ADDRESS OF AN INITIALIZED RPL/NIB/WORKAREA   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nGETRPL   DS    0H\n         L     R0,LNGTHRPL             LENGTH OF RPL + SUBPOOL\n         GETMAIN R,LV=(0)              G E T M A I N    R P L\n         MVC   0(8,R1),=CL8'DYNAMRPL'  IDENTIFY THE RPL AS DYNAMIC\n         LA    PTRRPL,8(,R1)           R5 -> R P L\n         MVC   IFGRPL(LNIFGRPL),FRESHRPL  COPY RPL TO GOTTEN ONE\n*                                      NOTE: THIS MAKES RPL ASYNCH\n         MVC   NIBDMPID(8),=CL8'DYNAMNIB' SET NIB DUMP ID\n         MVC   NIBSTART(NIBLNIB),FRESHNIB INITITIALIZE NIB\n         XC    WORKSPAC(WORKRPLA),WORKSPAC ZERO OUT KEY WORK AREA STUFF\n         STM   R0,R1,TIMESAVE          SAVE WORK REGS\n         TIME  DEC                      SAVE TIMESTAMP\n         STM   R0,R1,GRPLTIME            IN RPL WORKAREA\n         LM    R0,R1,TIMESAVE             RESTORE WORK REGS\n         BR    R14                     RETURN TO CALLER\n         TITLE '*********  N E T S O L  -  FREE RPL SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*        FREERPL IS ENTERED WHEN AN RPL/WORKAREA IS NOLONGER          *\n*        NEEDED BY THE EXIT ROUTINES.  IT ISSUES A FREEMAIN           *\n*        MACRO FOR THE RPL ADDRESS IN REGISTER 5.                     *\n*        IF THE FIRST 8 CHARACTERS OF THE WORKAREA ARE NOT 'DYNAMRPL' *\n*        THEN THIS SUBROUTINE BRANCHES TO INDICATE A USER 0008 ABEND. *\n*                                                                     *\n*        AT EXIT FROM FREERPL, CONTROL IS RETURNED TO VTAM.           *\n*                                                                     *\n*        INPUT REGISTERS                                              *\n*          R5  - POINTS TO RPL/WORKAREA TO BE FREED                   *\n*          R10-R12 - BASE REGISTERS                                   *\n*          R13 - ADDRESS OF REGISTER SAVE AREA                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nFREERPL  DS    0H\n         L     R3,RPLUSFLD             -> TTE\n         LTR   R3,R3                   IF NOT ZERO\n         BZ    *+10                      THEN\n         XC    TERMCRPL,TERMCRPL              RESET A(RPL) IN TTE\n         L     R0,LNGTHRPL             LENGTH OF RPL TO BE FREED\n         S     R5,=F'8'                REDUCE FOR INDENTITY AT FRONT\n         CLC   0(8,R5),=CL8'DYNAMRPL'  IS IT A DYNAMIC RPL ?\n         BNE   TOOSMALL                NO, ISSUE U0008 ABEND\n         SPACE 1\n         FREEMAIN R,LV=(0),A=(5)       F R E E   R P L  -> R5\n         SPACE 1\nRETURN   DS    0H\n         L     R14,RETVTAM@            RESTORE EXIT RETURN ADDRESS\n         BR    R14                     RETURN\n         TITLE '*********  N E T S O L  -  RECEIVE(ANY) SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*                   RECEIVE (ANY)                                     *\n*                                                                     *\n*        THIS SUBROUTINE IS ENTERED ONLY WHEN A REC (ANY) IS TO       *\n*        BE ISSUED.                                                   *\n*                                                                     *\n*        INPUT REGISTERS:                                             *\n*                                                                     *\n*              REG 5     - POINTS TO AN ASYNCHRONOUS RPL PLUS         *\n*                          ITS WORKAREA                               *\n*              REG 14    - CALLER'S RETURN ADDRESS                    *\n*                                                                     *\n*         OUTPUT REGISTERS:                                           *\n*                                                                     *\n*               REG 0-1   - UNPREDICTABLE                             *\n*               REG 2-14  - VALUE AT INPUT                            *\n*               REG 15    - UNPREDICTABLE                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nRECSUB   DS    0H\n         ST    R14,SUBSAV14            SAVE RETURN ADDR\nRECANY   OI    MFLAGS,RECA             INDICATE READ(ANY) IN PROGRESS\n         RECEIVE RPL=(PTRRPL),OPTCD=(ASY,ANY,TRUNC,Q),                 X\n               AREA=IOAREA,AREALEN=L'IOAREA,EXIT=RECEND,               X\n               RTYPE=(DFSYN,RESP,NDFASY)\n         NI    MFLAGS,255-(RECA)\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR RECEIVE(ANY):                                    *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    RECANY                  YES. REISSUE\n         LTR   R15,R15                 READ-ANY ACCEPTED?\n*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*******> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         L     R14,SUBSAV14            RESTORE THE RETURN ADDR\n         BR    R14                     RETURN TO CALLER\n         SPACE 3\n         LTORG\n         TITLE '********* N E T S O L  -  LUSTAT ROUTINE'\n***********************************************************************\n*       ROUTINE TO HANDLE LOGICAL UNIT STATUS RECEIVED                *\n*                                                                     *\n*    SSENEEI  SSENSMI                                                 *\n*      00        02       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *\n*      00        02          SNOCCUR                                  *\n*      08        1C       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *\n*      08        2B         \"     \"     \"        \"    \"    \"  (RESEND)*\n*      08        31       DEVICE POWERED OFF     \"    \"    \"          *\n*      08        01          SNOCCUR                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLUSTATUS DS    0H\n         OI    FLAGS,LUSTATE           SEND +VE RESPONSE\n         OI    MFLAGS,LUSEND\n         MVC   SENSE(2),RPLSSEI   SAVE SSENSEI + SSENSMI\n         MVC   USENSE(2),RPLUSNSI SAVE USSESEI(2 BYTES)\n         NI    RPLOPT12,FF-RPLFMHDR CLEAR FM HDR BIT\n         SPACE 1\nSENDLU   EQU   *\n         SEND  STYPE=RESP,CONTROL=LUS,RESPOND=(NEX,FME,NRRN),          *\n               RPL=(PTRRPL),POST=SCHED,OPTCD=(ASY,CA),EXIT=SENDEND\n         NI    MFLAGS,255-(LUSEND)     SEND DONE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    SENDLU                  YES. REISSUE\n         LTR   R15,R15                 WRITE ACCEPTED?\n*******> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND CHK)?\n*******> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B    RETURN                   RETURN TO VTAM\n         SPACE 1\nCONTLU   NI    FLAGS,255-(LUSTATE)     LUSTAT SEND DONE\n         CLC   SENSE,LUS0001           IS DEVICE NOW AVAILABLE\n         BE    RESEND                  YES SO SEND LOGON MSG.\n         CLC   SENSE,LUS082B           IS DEVICE NOW AVAILABLE\n         BE    RESEND\n         B     FREERPL\n         TITLE '*********  N E T S O L  -  ERROR EXIT RTN'\n***********************************************************************\n*                                                                     *\n*    THIS ROUTINE IS ENTERED IF AN ERROR IS DETECTED.                 *\n*                                                                     *\n*        INPUT REGS:                                                  *\n*                                                                     *\n*    REGISTER 0 CONTAINS A RTNCD CODE (4, 8, C, 10, 14, 18)           *\n*                                                                     *\n*    REGISTER 1 POINTS TO THE RPL OF THE REQUEST                      *\n*                                                                     *\n*           THE FDBK2 FIELD OF THIS RPL CONTAINS A REASON             *\n*           CODE WHICH IS A SUBCODE OF THE RTNCD CODE IN              *\n*           REGISTER 0.                                               *\n*                                                                     *\n*    REGISTER 2 - 12 UNMODIFIED BY VTAM                               *\n*                                                                     *\n*    REGISTER 13 POINTS TO THE SAVE AREA IN USE                       *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS TO VTAM                      *\n*                                                                     *\n*    REGISTER 15 ERREXIT ROUTINE ADDRESS                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    EXIT FROM ERREXIT IS AS FOLLOWS:                                 *\n*                                                                     *\n*           THRU ERRETURN TO VTAM, WHICH WILL RETURN TO THE           *\n*           MAINLINE OR EXIT ROUTINE NSI.                             *\n*                                                                     *\n*           TO SNOCCUR, WHICH WILL ABNORMALLY TERMINATE               *\n*           NETSOL.                                                   *\n*                                                                     *\n*           TO PROBDEV.                                               *\n*                                                                     *\n*                                                                     *\n*        OUTPUT REGS:                                                 *\n*                                                                     *\n*    REGISTER  1-9  UNPREDICTABLE                                     *\n*                                                                     *\n*    REGISTER 10-12 NETSOL BASE REGISTERS                             *\n*                                                                     *\n*    REGISTER 13    SAVE AREA UPON ENTRY                              *\n*                                                                     *\n*    REGISTER 14    UNPREDICTABLE IF EXIT TO SNOCCUR OR               *\n*                    RETURN.                                          *\n*                   VALUE AT INPUT IF RETURN TO VTAM.                 *\n*                                                                     *\n*    REGISTER 15    THE INPUT RTNCD CODE IF ERREXIT WAS               *\n*                   ENTERED FROM MAINLINE NETSOL.                     *\n*                   AN ACTION CODE IF ENTERED FROM AN EXIT            *\n*                    ROUTINE.                                         *\n*                                                                     *\n*    REGISTER  0    UNPREDICTABLE IF ENTERED FROM MAINLINE            *\n*                    NETSOL.                                          *\n*                   AN ACTION CODE MODIFIER IF ENTERED FROM AN        *\n*                    EXIT ROUTINE.                                    *\n*                                                                     *\n*        NOTE: REGISTERS 0 AND 15 WILL BE RETURNED THRU VTAM          *\n*              TO MAINLINE OR EXIT ROUTINE NSI.                       *\n*    DESCRIPTION OF ACTION CODES AND FLAGS                            *\n*                                                                     *\n*                                                                     *\n*        THE ERREXIT ROUTINE COMMUNICATES TO THE ERROR EXIT NSI       *\n*        VIA AN ACTION CODE SET IN REG 15 AND, IN SOME CASES,         *\n*        AN ACTION CODE MODIFIER SET IN REG 0. IN SOME SPECIAL        *\n*        CASES, FLAGS ARE SET TO PASS INFORMATION TOO.                *\n*                                                                     *\n*        THE ACTION CODES AND MODIFIERS INDICATE APPROPRIATE          *\n*        ACTIONS TO BE TAKEN BY THE EXIT ROUTINE. THE EXIT            *\n*        ROUTINE MAY, HOWEVER, HANDLE THE ERROR ACTION                *\n*        DIFFERENTLY FROM WHAT ERREXIT INDICATES BY ITS ACTION        *\n*        CODE, IF IT SO CHOOSES.                                      *\n*                                                                     *\n*        ACTION CODES AND MODIFIERS ARE AS FOLLOWS:                   *\n*                                                                     *\n*            00 MACRO COMPLETED SUCCESSFULLY                          *\n*               REG 0 MODIFIER=0                                      *\n*                                                                     *\n*            04 THIS IS A SNO (SHOULD NOT OCCUR) WHICH WILL NOT       *\n*               BE SET BY THE ERROR EXIT. IF THIS IS SET AT           *\n*               NSI, THE NETWORK SOLICITOR SHOULD ABNORMALLY          *\n*               TERMINATE.                                            *\n*                                                                     *\n*TORELES     08 BRANCH TO RELEASE                                     *\n*RELONLY        REG 0 MODIFIER=0 CLSDST                               *\n*REL1ST                        4 CLSDST + OPNDST (AQUIRE)             *\n*                                                                     *\n*TOSEND     0C BRANCH TO SENDMSG                                      *\n*               REG 0 MODIFIER=MESSAGE NUMBER                         *\n*                                                                     *\n*REISSU        10     REISSUE THE REQUEST                             *\n*                                                                     *\n*TOENDREQ    14 BRANCH TO FREERPL                                     *\n*                                                                     *\n*TORESEND    18 RESEND                                                *\n*RSETSOL     1C SNOCCUR                                               *\n*                                                                     *\n*TOPROBDV    20 BRANCH TO PROBDEV                                     *\n*                                                                     *\n*    SINCE NETSOL DOES NOT ISSUE ALL API MACROS, NOT ALL              *\n*    RTNCD CODES AND REASON CODES ARE POSSIBLE. THOSE                 *\n*    FDBK3 CODES WHICH CAN OCCUR FOR THE MACROS ISSUED ARE            *\n*    LISTED WITHIN THE SUBSECTIONS OF ERREXIT FOR EACH                *\n*    RTNCD CODE. THIS LIST INCLUDES ANY WHICH MAY BE                  *\n*    IMPOSSIBLE BECAUSE OF CURRENT NETSOL LOGIC.  THOSE WHICH         *\n*    ARE POSSIBLE ARE INDICATED WITH AN '*'.  BASIC ONLY              *\n*    CODES ARE NOT LISTED.                                            *\n*                                                                     *\n*                                                                     *\n*    THE FLAGS SET ARE:                                               *\n*                                                                     *\n*          LOOPONCE - REISSUE I/O COMMAND ONE MORE TIME. IF           *\n*                     THE REISSUED COMMAND IS SUCCESSFUL, THE         *\n*                     FLAG MUST BE TURNED OFF BY THE MAINLINE         *\n*                     OR EXIT ROUTINE. IF UNSUCCESSFUL,               *\n*                     ERREXIT TURNS OFF THE FLAG ON ENTRY TO          *\n*                     HANDLE THE FAILURE.                             *\n*                                                                     *\n*            RELOPND - RELEASE THE DEVICE THEN OPNDST(ACQUIRE)        *\n*                      IT, THUS RE-ESTABLISHING A SESSION FOR         *\n*                      THAT DEVICE.                                   *\n*                                                                     *\n*           SHUTDOWN - NETSOL SHUTDOWN IN PROGRESS. IF THIS           *\n*                      BIT IS ON AT ENTRY TO AN EXIT ROUTINE          *\n*                      OTHER THAN TPEND, NO PROCESSING IS DONE        *\n*                      WITHIN THE ROUTINE. THIS WILL RAPIDLY          *\n*                      FLUSH EXITS REQUESTS ALREADY SCHEDULED         *\n*                      AT THE TIME A NEED FOR SHUTDOWN IS             *\n*                      DETECTED.                                      *\n*                      NOTE: THIS BIT IS ALSO SET BY THE TPEND        *\n*                            EXIT, WHICH HAS BEEN SCHEDULED           *\n*                            PRIOR TO ENTRY TO ERREXIT FOR A          *\n*                            SHUTDOWN CONDITION.                      *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nERREXIT  DS    0H\n         SPACE 2\n***********************************************************************\n*        NO NEED TO ESTABLISH ADDRESSABILITY, SINCE BASE REGISTERS    *\n*        HAVE NOT BEEN MODIFIED.  NOTE THAT ALSO PTRRPL POINTS TO RPL *\n*        USED IN EXIT ROUTINE, ALTHOUGH IT IS NOT NECESSARILY THE RPL *\n*        IN USE WHEN ERREXIT WAS ENTERED, I. E. SYNCHRPL MAY          *\n*        HAVE BEEN IN USE FOR INQUIRE (APPSTAT).                      *\n***********************************************************************\n         SPACE 1\n         LR    R7,R0                   SAVE RTNCD CODE TO\n*                                       USE AS RETURN CODE IF\n*                                       ENTRY FROM MAINLINE.\n         SPACE 1\n         DROP  R5\n         USING IFGRPL,R1               => R P L\n         SPACE 1\n         LR    R8,R1                   SAVE RPL ADRESS\n         LR    R6,R14                  SAVE RETURN ADDRESS\n         SPACE 2\n***********************************************************************\n*        FORMAT THE RPL ERROR FIELDS INTO A READABLE MESSAGE AND      *\n*        WRITE THE MESSAGE TO THE OPERATOR. NOTE THAT SOME ERRORS     *\n*        WILL NOT BE LOGGED TO THE SYSTEM LOG AS THEY ARE CONSIDERED  *\n*        UNIMPORTANT. THE DATA IN ERMDATA IS AVAILABLE FOR            *\n*        DEBUGGING PURPOSES.                                          *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*        BYPASS THOSE ERROR COMBINATIONS DEFINED IN 'ERMSGTAB'        *\n***********************************************************************\n         SPACE 1\n         STM   R3,R5,RPLERRSA     SAVE WORK REGS DURING TABLE SCAN\n         MVC   ERMDATA(1),RPLREQ  BUILD                  REQ\n         MVC   ERMDATA+1(2),RPLFDBK   ERROR COMPARISON  /RTNCD/FDBK2\n         MVC   ERMDATA+3(4),RPLSSEI     FIELD           /SSEI/SSMI/USER\n         LM    R3,R5,ERMBXLE      LOAD BXLE REGS\n         CR    R3,R5              NULL TABLE?\n         BH    ERMSG              YES => DISPLAY ERROR MSG\n         SPACE 1\nERMLOOP  MVC   ERMTEMP,ERMDATA    COPY COMPARISON FIELD TO WORKAREA\n         NC    ERMTEMP,ERMAND(R3) ZERO IRRELEVANT FIELDS FOR COMPARE\n         CLC   ERMTEMP,ERMCODE(R3) A NON-DISPLAY ERROR?\n         BE    ERMBYPAS             YES => DON'T DISPLAY ERROR MSG\n         BXLE  R3,R4,ERMLOOP        NO  => LOOK AT NEXT TABLE ENTRY\n         SPACE 1\n***********************************************************************\n*        FORMAT AND DISPLAY ERROR MESSAGE                             *\n***********************************************************************\n         SPACE 1\nERMSG    UNPK  PACKWORK(3),RPLREQ(2)   UNPACK REQUEST CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+33(2),PACKWORK PUT IN THE MESSAGE\n         UNPK  PACKWORK(3),RPLRTNCD(2) UNPACK RETURN CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+42(2),PACKWORK PUT IT IN THE MESSAGE\n         UNPK  PACKWORK(3),RPLFDB2(2)  UNPACK FEEDBACK 2 CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+51(2),PACKWORK PLACE IN MESSAGE\n         UNPK  PACKWORK(9),RPLSSEI(5)  UNPACK SYSTEM SENSE CODES\n         TR    PACKWORK(8),TRTAB       PRETTY IT UP\n         MVC   ERRORMSG+62(2),PACKWORK TO MESSAGE\n         MVC   ERRORMSG+73(2),PACKWORK+2  RPLSSMI CODES TOO\n         MVC   ERRORMSG+82(4),PACKWORK+4  RPLUSNSI CODES ALSO\n         L     R3,RPLUSFLD             -> TTE FOR TERMINAL NAME\n         MVC   ERRORMSG+92(8),TERMNAME TO ERROR MESSAGE AREA\nERMWTO   WTO   MF=(E,ERRORMSG)              WRITE ERROR MSG.\nERMBYPAS LR    R15,R7                  RESTORE R0 RETURN CODE\n         LR    R1,R8                   RESTORE RPL ADDRESS\n         LR    R14,R6                  RESTORE RETURN ADDRESS\n         LM    R3,R5,RPLERRSA          RESTORE WORK REGS\n         SPACE 2\n***********************************************************************\n*        CHECK IF ERREXIT HAS BEEN ENTERED FROM MAIN LINE OR          *\n*        EXIT ROUTINE . IF ERROR IN MAIN LINE THEN RETURN VIA         *\n*        REGISTER 14, AND UPON RETURN TO MAIN-LINE CODE               *\n*        APPROPRIATE ACTION WILL BE TAKEN.                            *\n***********************************************************************\n         SPACE 1\n         LR    R3,R14                  SAVE RETURN ADDR\n         LA    R8,SETLRPL              IS REQUEST A\n         CR    R1,R8                   SETLOGON?\n         BER   R14                     YES.  IN MAINLINE\n*                                       AND RETURN TO VTAM.\n         CH    R15,HEX18           18  RPL ECB/EXIT PROBLEM?\n*******> BNL   SNOCCUR                 YES. CANNOT VALIDLY\n         BNL   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n*                                       OCCUR SINCE SHUTDOWN\n*                                       SWITCH STOPS EXITS'\n*                                       ACTION PRIOR TO THE\n*                                       CLSDSTACB.\n*                                      NOTE. CODES HIGHER\n*                                       THAN 18 DO NOT EXIST\n         SPACE 2\n***********************************************************************\n*        UPON ENTRY IF R1 IS NOT EQUAL TO R5 (R1 = A(SYNCHRPL) )      *\n*        THEN R1'S AND R5'S INFORMATION MUST BE COMBINED.             *\n*        THE COMMAND THAT CAUSED THE ERROR WAS                        *\n*        ISSUED USING SYNCHRPL AND R5 IS POINTING TO AN               *\n*        ASYNCH RPL.  FOR THIS RTN WE NEED SOME INFO IN BOTH.         *\n***********************************************************************\n         SPACE 1\n         CR    R1,R5                   ARE WE USING ONE RPL\n         BE    ERRPLOK                 YES, BRANCH\n*              MOVE THE NECESSARY INFORMATION FROM THE R5 RPL TO\n*              SYNCHRONOUS RPL (R1). THIS IS THE SWITCHES, SAVE AREAS\n*              ETC. PRIOR TO THE WORK AREAS.\n         MVC   SYNWORK(WORKRPLA),LNIFGRPL(R5)\n         SPACE 2\n***********************************************************************\n*        GET THE FDBK2 FIELD FROM THE RPL.                            *\n*        PREPARE TO BRANCH BASED ON 'RTNCD'.                          *\n***********************************************************************\n         SPACE 1\nERRPLOK  DS    0H\n         SR    R6,R6                   CLEAR REG 6  .\n         IC    R6,RPLFDB2              PICK UP REASON CODE\n         LR    R7,R6                   START TO INITIALIZE R7\n*                                       WHICH WILL BE USED AS\n*                                       AN INDEX FOR BRANCH\n*                                       TABLES\n         SR    R0,R0                   SET UP DEFAULT ACTION CODE\n          SPACE 2\n***********************************************************************\n* TRANSLATE RTNCD CODE AND FDBK2 CODE INTO ACTION CODE                *\n*                                                                     *\n*   RTNCD CODES HAVE A GENERAL MEANING AS FOLLOWS:                    *\n*                                                                     *\n*          04   EXTRAORDINARY COMPLETION                              *\n*                 FUNCTION COMPLETED. ADDITIONAL INFORMATION          *\n*                 AVAILABLE. PROBABLY HANDLED OUT OF LINE.            *\n*                 CONDITION SHOULD BE HANDLED BEFORE MAKING           *\n*                 FURTHER REQUESTS TO THE DEVICE.                     *\n*                                                                     *\n*          08   REISSUE                                               *\n*                 TEMPORARY ENVIRONMENT CONDITION CAUSED              *\n*                 REQUEST TO BE REJECTED.                             *\n*                                                                     *\n*          0C   DAMAGE                                                *\n*                 INTEGRITY OF THE REQUEST OR DEVICE HAS BEEN         *\n*                 DISTURBED.                                          *\n*                                                                     *\n*          10   ENVIRONMENT ERROR                                     *\n*                 REQUEST INCOMPLETE DUE TO ENVIRONMENTAL             *\n*                 CONDITION. ENVIRONMENT MUST BE ALTERED              *\n*                 BEFORE RECOVERY CAN BE ATTEMPTED.                   *\n*                                                                     *\n*          14   USER LOGIC ERROR                                      *\n*                 USER ERROR ON THE REQUEST. REQUEST REJECTED         *\n*                 OR INCOMPLETE. NOT EXECUTABLE IN THE                *\n*                 PRESENT FORM.                                       *\n*                                                                     *\n*          18   RPL NOT AN RPL   OR   RPL IS ALREADY ACTIVE.          *\n***********************************************************************\n         SPACE 1\n         B     FEEDTAB(R15)            GO TO FEEDBACK CODE\n*                                       HANDLING ROUTINE\nFEEDTAB  BAL   R7,SNOCCUR           0  FEEDBACK OF 00 DOESN'T\n*                                       ENTER LERAD OR SYNAD\n         B     EXTRAORD             4  EXTRAORDINARY COM-\n*                                       PLETION\n         B     REISSUE              8  REISSUE\n         B     DAMAGE               C  DAMAGE\n         B     ENVIRON             10  ENVIRONMENT ERROR\n         B     LOGIC               14  LOGIC ERROR\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 04 - EXTRAORDINARY COMPLETION                           *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)         MEANING                             *\n*                                                                     *\n*    03        *  RECEIVE    /   \"     \"          \"     MESSAGE       *\n*    04        *  RECEIVE    / EXCP CONDITION INCOMMING RESPONSE      *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nEXTRAORD DS    0H\n         CH    R6,HEX3                 IS IS VALID FDBK2\n         BE    VALFDBK2                YES SO HANDLE IT\n         CH    R6,HEX4                 IS IT ONLY VALID REASON CODE\n*******> BNE   SNOCCUR                 NO SO FORGET IT\n         BNE   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n***********************************************************************\n* BSC DEVICES UNDER VTAM2 RESPOND WITH ZERO SENSE IN SOME CASES\n* TO RECORD MODE MACROS I.E.\n* WHEN USER SENSE INCLUDED THE SSENSEI + SSENSMI FIELDS ARE 0\n***********************************************************************\n         SPACE 1\nVALFDBK2 IC    R7,SENSE                SAVE SSENSEI FOR BRANCHING\n         LTR   R7,R7                   DO WE HAVE ZERO STATUS?\n         BZ    STAT3270                MUST BE STATUS FROM 3270\n***********************************************************************\n*        CONVERT SENSE CODE INTO BRANCH TABLE OFFSET                  *\n***********************************************************************\n         SRL   R7,3                    ASSUME X'04' IS INDEX = 0\n         SR    R6,R6                   ZERO INDEX REG\nCINDEX4  LTR   R7,R7                   INDEX DONE?\n         BZ    BRTAB4                  YES => GO BRANCH\n         SRL   R7,1                    NO  => SHIFT NEXT BIT OUT\n         LA    R6,4(,R6)                      BUMP INDEX BY 4\n         B     CINDEX4                        GET NEXT BIT\nBRTAB4   CH    R6,HEX14                INDEX TOO BIG?\n*******> BH    SNOCCUR YES => SNOCCUR\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RSNTAB4(R6)             GO TO HANDLE SSENSMI\nRSNTAB4  BAL   R7,SNOCCUR        <08 (00)  SHOULD NOT OCCUR\n         B     REQREJ             08 (04)  REQUEST REJECT\n         B     REQERR             10 (08)  REQUEST ERROR\n         B     STATERR            20 (0C)  STATE ERROR\n         B     RHERROR            40 (10)  RH ERROR\n         B     PATHERR            80 (14)  PATH ERROR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        08 - REQUEST REJECT                                          *\n*                                                                     *\n*     SSENSEI/SSENSMI                                                 *\n*       08      00                  REISSUE SEND (IN BRACKET)         *\n*       08      01                  RELEASE LU                        *\n*       08      02                  IGNORE (CONTINUE)                 *\n*       08      13                  REISSUE SEND (IN BRACKET)         *\n*       08      1B                  IGNORE (WAIT FOR LU TO ENTER DATA)*\n*       08      1C                  IGNORE                  DC18203   *\n*       08      2B                  REISSUE SEND                      *\n*       08      2D                  IGNORE (CONTINUE)                 *\n*       08      31                     \"       \"                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nREQREJ   IC    R7,SENSE+1              GET SSENSMI\n         CH    R7,HEX2                 IS IT POSSIBLE\n         BH    TRYHIGH                 >2 TRY FOR HIGH RANGE\n         LR    R6,R7\n         AR    R7,R7                   PEPARE FOR BRANCH\n         AR    R7,R6                   TABLE INDEXING\n         SLL   R7,2\n         B     RSNTAB5(R7)             HANDLE SSENSMI\n         SPACE 1\nRSNTAB5  LA    R15,TORESEND         0  REISSUE SEND WITH OUT BB\n         B     ERRETURN\n         NOP   0\n         LA    R15,TORELES          1  RELEASE\n         LA    R0,RELONLY              NO OPNDST\n         B     ERRETURN\n         LA    R15,TOENDREQ         2  CONTINUE REQUEST (IGNORE)\n         B     ERRETURN\n         NOP   0\n         SPACE 1\nTRYHIGH  CH    R7,HEX13            13  REISSUE SEND\n         BNE   CHK1BX\n         LA    R15,TORESEND            WITH IN BRACKET CONDITION\n         B     ERRETURN\n         SPACE 1\nCHK1BX   CH    R7,HEX1B                KEY PRESSED ON TERMINAL ?\n         BNE   CHK1CX                                         DC18203\n         LA    R15,TOENDREQ        1B  WE SHOULD IGNORE\n         B     ERRETURN\n         SPACE 1\nCHK1CX   EQU   *                                               DC18203\n         CH    R7,HEX1C                                        DC18203\n         BNE   CHK2BX                                          DC18203\n         LA    R15,TOENDREQ        IC WE SHOULD IGNORE IT      DC18203\n         B     ERRETURN                                        DC18203\n         SPACE 1                                               DC18203\nCHK2BX   CH    R7,HEX2B\n         BNE   CHK2DX\n         LA    R15,TORESEND        2B  WE SHOULD TRY AGAIN\n         B     ERRETURN\n         SPACE 1\nCHK2DX   CH    R7,HEX2D\n         BNE   CHK31X                                           DC18203\n         LA    R15,TOENDREQ        2D  WE SHOULD IGNORE\n         B     ERRETURN\nCHK31X   CH    R7,HEX31            31  DEVICE POWERED OFF       DC18203\n*******> BNE   SNOCCUR                                          DC18203\n         BNE   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LA    R15,TOENDREQ            SO IGNORE                DC18203\n         B     ERRETURN                                         DC18203\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        10 - REQUEST ERROR                                           *\n*                                                                     *\n*     SSENSEI/SSENSMI                                                 *\n*       10      03                  RELEASE TERMINAL                  *\n*       10      XX                  SHOULD NOT OCCUR                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nREQERR   CLI   SENSE+1,X'03'           FUNCTION NOT SUPPORTED?\n*******> BNE   SNOCCUR                 NO - SNOCCUR\n         BNE   *+8                          JUMP TO THE BAL\n         B     *+8                          JUMP OVER THE BAL\n         BAL   R7,SNOCCUR                   TELL WHERE WE CAME FROM\n         SPACE 1\n         STM   R1,R3,RPLERRSA          SAVE REG 1-3\n         L     R3,RPLUSFLD             LOAD A(TTE)\n         MVC   MSG1003+17(8),TERMNAME  MOVE NODE NAME TO MSG\n         WTO   MF=(E,MSG1003)          WTO ERROR MSG\n         SPACE 1\n         LM    R1,R3,RPLERRSA          RESTORE REG 1-3\n         LA    R15,TORELES         03  FUNCTION NOT SUPPORTED\n         LA    R0,RELONLY              RELEASE TERMINAL\n         B     ERRETURN\n         SPACE 1\nSTATERR  LA    R15,TORELES         20  STATE ERROR\n         LA    R0,REL1ST               RELEASE AND REOPEN\n         B     ERRETURN\n         SPACE 1\nRHERROR  BAL   R7,SNOCCUR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*          80 - PATH ERRORS                                           *\n*                                                                     *\n*           SSENSEI/SSENSMI                                           *\n*             80      05           NO SESSION CONDITION               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPATHERR  IC    R7,SENSE+1              GET   SSENSMI\n         CH    R7,HEX5                 IS IT ONE WE CAN HANDLE\n         BE    NOSESS                  YES SO HANDLE IT\n         LA    R15,TOENDREQ            OTHERWISE END THIS REQUEST\n         B     ERRETURN\n         SPACE 1\nNOSESS   DS    0H                      THIS IS A NO SESSION COND.\n*                                       A SESSION FOR SOME REASON HAS\n*                                       NOT BEEN ESTABLISHED BETWEEN\n*                                       THE SENDER AND RECEIVER\n         LA    R15,TORELES              SO LETS CLOSE TO CLEAR\n         LA    R0,REL1ST                AND REOPEN\n         B     ERRETURN\n         SPACE 1\nSTAT3270 DS    0H                      HANDLE 2 BYT OF USER SENSE CODES\n*                                       RETURNED FROM 3270\n         LA    R15,TORELES             ASSUME DEVICE UNUSABLE\n         CLC   USENSE,SNAS0200         WAS SDLC STATUS RETURNED FOR DE\n*                                       WHICH SHOWS POWER ON\n         BE    INTRREQ1                YES CHECK MORE\n         CLC   USENSE,SNAS0010         NO CHECK IF INTV. REQ. (DEVICE\n*                                       POWERED OFF )\n         BNE   ERRETURN                RELEASE DEVICE\n         LA    R15,TOENDREQ            WE SHOULD IGNORE REQUEST AND\n*                                      WAIT FOR TERM TO BE POWERED UP\n         B     ERRETURN                BEFORE WE SEND SCREEN\n         SPACE 1\nINTRREQ1 DS    0H                      DEVICE IS NOW AVAILABLE. JUST\n         LA    R15,TOENDREQ            IGNORE BECAUSE LOSTERM WILL GET\n         B     ERRETURN                SCHEDULLED .\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 08 - REISSUE                                            *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)         MEANING                             *\n*                                                                     *\n*      00      * ALL API MACROS   TEMPORARY STORAGE                   *\n*                (NOT CHECK,       ALLOCATION FAILURE                 *\n*                 OPEN, OR CLOSE)                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nREISSUE  DS    0H\n         LTR   R6,R6                   ONLY VALID REASON CODE\n*                                       IS 0\n*******> BNZ   SNOCCUR             >0  ERROR IF NOT\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LA    R15,REISSU           0  ACTION IS TO REISSUE\n*                                      REG 0 IS ALREADY SET FOR\n*                                       REISSUE ONLY\n         B     ERRETURN                RETURN TO EXIT ROUTINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*  FEEDBACK CODE 0C - DAMAGE                                          *\n*                                                                     *\n*   REASON CODE   MACROS         MEANING          ACTION              *\n*    00              *           BASIC ONLY          *                *\n*    01          RECEIVE      LU NOT AVAILABLE     RELEASE 08         *\n*                 SEND         \"    \"   \"            \"     08         *\n*    02          REC/SEND     REQUEST CANCELLED    FREERPL 14 00      *\n*                             BY TEST REQUEST                         *\n*    03              *         BASIC ONLY             *               *\n*    04              *         BASIC ONLY             *               *\n*    05              *         BASIC ONLY             *               *\n*    06              *         BASIC ONLY             *               *\n*    07          REC/SEND     CONNECTION RECOVERY  FREERPL 14 00      *\n*                               IN PROGRESS                           *\n*    08          REC/SEND     LU RESTARTED         FREERPL 14 00      *\n*    09          OPNDST       NODE DEACTIVATED     FREERPL 14 00      *\n*    0A          RECEIVE      SNOCCUR                SNOCCUR          *\n*    0B         RE/SEND/CLSDST REQUEST CANCELLED   FREERPL 14 00      *\n*                                BY CLSDST                            *\n*    0C          REC/ SEND     REQUEST CANCELLED   RELEASE 14 04      *\n*                                BY CLEAR                             *\n*    0D          SEND          REQ CANCEL BY EXCP.  SNOCCUR           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nDAMAGE   DS    0H\n         CH    R6,HEXD                 IS REASON CODE WITHIN\n*                                       LIMITS OF POSSIBILITY?\n*******> BH    SNOCCUR             >D  YES, ERROR\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         AR    R7,R7                   MULTIPLY REASON CODE BY\n         AR    R7,R6                   12 FOR BRANCH TABLE\n         SLL   R7,2                    INDEXING\n         B     RSNTABC(R7)             GO TO REASON CODE\n*                                       HANDLING ROUTINE\nRSNTABC  BAL   R7,SNOCCUR          0   BASIC MODE ONLY\n         NOP   0\n         NOP   0\n         LA    R15,TORELES         1   LU NOT AVAILABLE\n         LA    R0,RELONLY              DO NOT REOPEN\n         B     ERRETURN\n         LA    R15,TOENDREQ        2   REQUEST CANCELLED BY TEST REQ.\n         B     ERRETURN\n         NOP   0\n         BAL   R7,SNOCCUR          3   BASIC ONLY\n         NOP   0\n         NOP   0\n         BAL   R7,SNOCCUR          4   BASIC ONLY\n         NOP   0\n         NOP   0\n         BAL   R7,SNOCCUR          5   BASIC ONLY\n         NOP   0\n         NOP   0\n         BAL   R7,SNOCCUR          6   BASIC ONLY\n         NOP   0\n         NOP   0\n         LA    R15,TOENDREQ        7   CONNECTION RECOVERY\n         B     ERRETURN                 IN PROGRESS\n         NOP   0\n         LA    R15,TOENDREQ        8   LU  RESTARTED\n         B     ERRETURN\n         NOP   0\n         LA    R15,TOENDREQ        9   NODE DEACTIVATED\n         B     ERRETURN\n         NOP   0\n         BAL   R7,SNOCCUR          A   SNOCCUR\n         NOP   0\n         NOP   0\n         LA    R15,TOENDREQ        B   REQUEST CANCELLED BY CLSDST\n         B     ERRETURN\n         NOP   0\n         LA    R15,TORELES         C   RELEASE WITH OPNDST\n         LA    R0,REL1ST\n         B     ERRETURN\n         BAL   R7,SNOCCUR          D   SNOCCUT\n         NOP   0\n         NOP   0\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 10 - ENVIRONMENT                                        *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)      MEANING                  ACTION        *\n*                                                                     *\n*     00        OPNDST/CLSDST  TERM,LU,APPL NOT ACTIVE  CLSDST  0C 08 *\n*                                              (OPNDST) FREERPL 14 00 *\n*     01        OPNDST         OPNDST FAILED           FREERPL  14 00 *\n*                                                                     *\n*     02        CLSDST (PASS)  TARGET APPL. UNACCEPTABLE MSG.   0C 09 *\n*                                                                     *\n*     03        OPNDST/SEND/REC  HALT QUICK                   SNOCCUR *\n*                                                                     *\n*     05         \"      \"     \"   CHANNEL/LINK FAILURE RELEASE  08 00 *\n*                                                                     *\n*     06        OPNDST          ANS                    RELEASE  08 00 *\n*                                                                     *\n*     07        SEND/REC        CANCELLED BY VARY      RELEASE  08 00 *\n*                                                                     *\n*     09         \"    \"         TERMINATE SELF/LOGOFF  FREERPL  14 00 *\n*                                                                     *\n*     0A        ALL MACROS      ACF/VTAM ERROR         RELEASE  08 00 *\n*                                                                     *\n*     0D        ALL MACROS      ACF/VTAM INACTIVE TO ACB       SNOCCUR*\n*                                                                     *\n*     0E        ALL MACROS      TCB ABENDED            FREERPL  14 00 *\n*                                                                     *\n*     0F        SEND/REC        BUFFERS FILLED         FREERPL  14 00 *\n*                                                                     *\n*     10         \"   \"          TERMINATE SELF COMMAND RELEASE  08 04 *\n*                                                                     *\n*     11        OPNDST          SDT FAILED             FREERPL  14 00 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nENVIRON  DS    0H\n         CH    R6,HEX11                IS RSN COD11VALID SIZE?\n*******> BH    SNOCCUR             >11 NO. ERROR\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n***********************************************************************\n*   HANDLE FIRST THREE REASON CODES WITHOUT BRANCH TABLE.             *\n***********************************************************************\n         SPACE 1\n         LTR   R6,R6                   CHECK FOR TERMINAL OR\n*                                       APPLICATION NOT\n*                                       AVAILABLE.\n         BNZ   CHKQUIES            \u00ac0  IF NOT, NEXT CHECK\n*\n         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?\n         BO    TERMUNAV\n         LA    R15,TOSEND              NO. APPLICATION UNAVAIL-\n         LA    R0,MSG08                ABLE WRITE ERROR MSG\n         B     ERRETURN\nTERMUNAV DS    0H\n         LA    R15,TOENDREQ            TERMINAL UNAVAILABLE FOR\n         B     ERRETURN                 OPNDST(SPEC) AFTER\n*                                       CLSDST(PASS) BECAUSE\n*                                       CLSDST(PASS) FAILED\n*                                       AND THE NETWORK OPER-\n*                                       ATOR VARRIED OFF THE\n*                                       TERMINAL.\nCHKQUIES DS    0H\n         LA    R15,TORELES             PREPARE ACTION CODE\n         SLL   R7,2                     AND BRANCH TABLE INDEX\n*                                       IN CASE REASON CODE\n*                                       GREATER THAN 2\n         CH    R6,HEX2                 CHECK FOR 1 OR 2\n*\n         BL    TERMUNAV             1  OPNDST FAILED FREERPL\n*\n         BH    RSNTAB10(R7)        >2  GO TO REASON CODE\n*                                       HANDLING ROUTINE\n*\n         LA    R15,TOSEND           2  APPLICATION IS QUIESCING\n         LA    R0,MSG09                 OR NEVER ACCEPTS LOGONS\n*                                       BUT QUIESCE IS MORE\n*                                       LIKELY SINCE 'NEVER\n*                                       ACCEPTS WOULD PROBABLY\n*                                       HAVE BEEN FOUND ON THE\n*                                       INQUIRE.  EITHER CAN\n*                                       HAPPEN IF THE OTHER\n*                                       APPLICATION CHANGES ITS\n*                                       STATUS AFTER NETSOL'S\n*                                       INQUIRE(APPSTAT) BUT\n*                                       PRIOR TO THE LATER\n*                                       CLSDST(PASS).\n         B     ERRETURN                WRITE ERROR MESSAGE\nRSNTAB10 EQU   *-(3*4)                 START TABLE AT R6=3\n*\n         B     QUIKHALT             3  VTAM IS HALTING.\n*                                      NETSOL CAN NO LONGER\n*                                       COMMUNICATE WITH\n*                                       DEVICES. TPEND NOTIFIED\n*\n         BAL   R7,SNOCCUR           4  BASIC MODE ONLY\n         B     ERRETURN             5  PERMANENT PATH FAILURE\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         B     ERRETURN             6  AUTO NETWORK SHUTDOWN\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         B     ERRETURN             7  VARY DEACT. IMMEDIATE\n*                                       LOSTERM WAS SCHEDULED\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         BAL   R7,SNOCCUR           8  DIAL BASIC MODE ONLY\n         B     IGNORERR             9  TERMINATE SELF OR LOGOFF\n*\n         B     VTAMERR              A  VTAM ERROR FOR DEVICE\n*\n         BAL   R7,SNOCCUR           B  DIAL-OUT ONLY\n*\n         BAL   R7,SNOCCUR           C  DIAL IN BASIC MODE ONLY\n         BAL   R7,SNOCCUR           D  VTAM INACTIVE TO YOUR\n*                                      ACB.  SHOULD NOT OCCUR\n*\n         B     IGNORERR             E  TCB ABENDED\n         B     IGNORERR             F  BUFFERS FILLED\n         B     ERR1010             10  TERMINATE SELF\n         B     IGNORERR            11  SDT FAILED\n*\nQUIKHALT DS    0H\n         LA    R15,TOENDREQ            INDICATE RETURN TO VTAM\n         OI    UFLAGS,SHUTDOWN         TURN ON SHUTDOWN\n         B     ERRETURN\n*\nVTAMERR  DS    0H                      ON 100A RTNCD  JUST\n         LA    R15,TOPROBDV             RELEASE THE TERMINAL.\n         B     ERRETURN\n         SPACE 1\nIGNORERR DS    0H\n         LA    R15,TOENDREQ            END REQUEST\n         B     ERRETURN\n         SPACE 1\nERR1010  DS    0H\n         LA    R15,TORELES\n         LA    R0,REL1ST\n         B     ERRETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 14 - LOGIC\n*                                                                     *\n*   FDBK2 CODE      MACRO(S)     MEANING                    ACTION    *\n*                                                                     *\n*       00        REC/SEND    NON-VTAM REQUEST CDE         SNOCCUR    *\n*                                                                     *\n*       02         \"    \"     EXIT ADDRESS ZERO            SNOCCUR    *\n*                                                                     *\n*       03         \"    \"     ECB ADDRESS ZERO             SNOCCUR    *\n*                                                                     *\n*       04         CHECK      RPL IS NOT ACTIVE            SNOCCUR    *\n*                                                                     *\n*       10         REC/SEND   INVALID ACB                  SNOCCUR    *\n*                                                                     *\n*       11          \"    \"                                            *\n*                                                                     *\n*       12          \"    \"    CLSDST IN PROGRESS (FREERPL)  14 00     *\n*                                                                     *\n*       13      REC/SEND/INT  RPL ARG + NIB CID INVALID     14 00     *\n*                                                                     *\n*       1E      REC/SEND      INVALID DATA ARE OR LENGTH   SNOCCUR    *\n*                                                                     *\n*       23        \"   \"       INVALID MACRO REQUEST TYPE   SNOCCUR    *\n*                                                                     *\n*         3C    SEND (POST=SCHED)   TRIED TO ISSUE 2ND SEND14 00DC18203\n*       3B-47     \"   \"                                    SNOCCUR    *\n*                                                                     *\n*       4A                                                 SNOCCUR    *\n*                                                                     *\n*       4B          \"         INVALID LOGON         (MSG)   0C 07     *\n*                                                                     *\n*       4C       INQUIRE(APPLSTAT) NO APPL NAME     (MSG)   0C 07     *\n*                INQUIRE(SESSPARM) NO QUEUED CINIT(FREERPL) 14 00     *\n*                CLSDST(PASS)      NO CDRSC FOR TERM(MSG)   0C 03     *\n*                                                                     *\n*       4D                                                 SNOCCUR    *\n*                                                                     *\n*       4E-51                                              SNOCCUR    *\n*                                                                     *\n*       52      INVALID NIB                                SNOCCUR    *\n*                                                                     *\n*       53      INQUIRE       INVALID SYM. NAME     (MSG)   0C 06     *\n*               OPNDST(SPEC)  INVALID SYM. NAME   (FREERPL) 14 00     *\n*                                                                     *\n*       54      OPNDST        DEST. UNOPENABLE    (FREERPL) 14 00     *\n*                                                                     *\n*       55      OPNDST(AQUIRE) APPL NOT AUTHORIZED         SNOCCUR    *\n*               CLSDST(PASS)   ????????????????????   (MSG) 0C 05     *\n*                                                                     *\n*       56-5C                                              SNOCCUR    *\n*                                                                     *\n*       5D      CLSDST        DEST, NOT OPENED    (FREERPL) 14 00     *\n*                                                                     *\n*       5E                                                            *\n*                                                                     *\n*       5F      CLSDST        RESOURCE NOT OWNED  (FREERPL) 14 00     *\n*                                                                     *\n*       60      CLSDST           \"      \"  CLOSABL   \"     14 00      *\n*                                                                     *\n*        62     REC/SEND                                   SNOCCUR    *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nLOGIC    DS    0H\n         CH    R6,HEX60                 IS REASON CODE WITHIN\n*                                       LIMITS OF POSSIBILITY?\n*                                       X'60' IS HIGHEST VALID\n*                                       VALUE TO BE EXPECTED.\n*******> BH    SNOCCUR            >60  NO. ERROR\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         CH    R6,HEX4A                IF REASON CODE AT LEAST\n         BNL   CHK56X            >=4A   X'4A', DO SEPARATELY\n         LA    R15,TOENDREQ            PREPARE ACTION FOR\n*                                       REASON CODES OF 12 & 13\n         CH    R6,HEX12                CLSDST IN PROGRESS?\n         BE    ERRETURN            12  YES, ACTION CODE\n*                                        ALREADY SET\n         CH    R6,HEX13                IS REASON CODE 13?\n         BE    ERRETURN            13  CID INVALID\n*                                      PROBABLY ALREADY\n*                                       RELEASED THE TERMINAL.\n*                                       IGNORE.\n         CH    R6,HEX3C             3C  TRY TO ISSUE 2ND SEND   DC18203\n         BE    ERRETURN                 YES SO IGNORE           DC18203\n         BAL   R7,SNOCCUR        16\nCHK56X   DS    0H\n         CH    R6,HEX56                IF REASON CODE MORE THAN\n         BH    CHK5DX             >56   X'56', DO SEPARATELY\n         LA    R15,TOSEND              PREPARE DEFAULT ACTION\n         SLL   R7,3                     AND BRANCH TABLE INDEX\n         B     RSNTAB14(R7)            GO TO REASON CODE\n*                                       HANDLING ROUTINE\nRSNTAB14 EQU   *-(8*(X'4A'))           START TABLE W/ R6=X'4A'\n*\n         BAL   R7,SNOCCUR          4A\n         NOP   0\n*\n         LA    R0,MSG07            4B  UNKNOWN LOGOMODE TABLE ENTRY\n         B     ER144B                  OR UNIDENTIFIED APPLICATION\n*\n         LA    R0,MSG07            4C  INQUIRE(APPSTAT)..NO SYMBOLIC\n         B     TSTINQA                  NAME FOR APPLICATION\n*                                     OR INQUIRE(SESSPARM)..NO QUEUED\n*                                       CINIT\n*                                      ASSUME INQUIRE(APPSTAT)\n*                                       THEN CHECK FOR IT\n*\n         BAL   R7,SNOCCUR          4D\n         NOP   0\n*\n         BAL   R7,SNOCCUR          4E\n         NOP   0\n*\n         BAL   R7,SNOCCUR          4F\n         NOP   0\n*\n         BAL   R7,SNOCCUR          50\n         NOP   0\n*\n         BAL   R7,SNOCCUR          51  APPLICATION NEVER\n         NOP   0                        ACCEPTS LOGONS\n*                                      MEANS NETSOL NEVER\n*                                       ACCEPTS LOGON.\n*\n         BAL   R7,SNOCCUR          52\n         NOP   0\n*\n         LA    R0,MSG07            53  SYMBOLIC (APPL OR TERM)\n         B     TSTINQA                  NAME NOT KNOWN\n*                                      ASSUME INQUIRE(APPSTAT)\n*                                       THEN CHECK FOR IT\n*\n         LA    R15,TOENDREQ                   54\n         B     ERRETURN\n*\n         LA    R0,MSG05            55  APPLICATION NOT AUTHORIZED\n         B     OPNDSPC                  FOR OPNDST(ACQUIRE)\n*                                      OR\n*                                      CLSDST FAILURE.\n*\n         BAL   R7,SNOCCUR          56  CONFLICT BETWEEN MODE\n         NOP   0                        AND DEVICE TYPE.\n*                                      TRIED TO OPNDST FOR\n*                                       A RECORD DEVICE.\n*                                       NETSOL ONLY SUPPORTS\n*                                       BASIC DEVICES.\n*                                      CAN NOT OCCUR IN NETSOL\nCHK5DX   DS    0H\n         CH    R6,HEX5D                CLSDST INVALID (TERMINAL\n*                                       NOT CONNECTED)\n         BNE   CHK5FX             \u00ac5D  NOT X'5D', CHECK FURTHER\n         LA    R15,TOENDREQ        5D  ACTION, RELEASE RPL AND\n         B     ERRETURN                 RETURN TO VTAM\nCHK5FX   DS    0H\n         CH    R6,HEX5F                LESS THAN X'5F' NOT\n*******> BL    SNOCCUR            <5F   VALID\n         BL    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n*\n         LA    R15,TOENDREQ     5F 60  REASON CODES OF 5F\n         B     ERRETURN                 AND 60 ARE POSSIBLE IF\n*                                       A RELREQ OR READEND\n*                                       EXIT IS PROCESSED\n*                                       AFTER THE DEVICE WAS\n*                                       PASSED TO ANOTHER\n*                                       APPLICATION.  THIS CAN\n*                                       HAPPEN BECAUSE THE\n*                                       CLSDST(PASS) WILL NOT\n*                                       PURGE AN ALREADY\n*                                       SCHEDULED EXIT.\nTSTINQA  DS    0H\n         TM    MFLAGS,INQAPPST         INQUIRE(APPSTAT) MEANS THE\n         BO    ERRETURN                 APPLICATION WAS UNKNOWN TO\n*                                       VTAM.\n*                                       => PUT OUT ERROR MESSAGE\n         LA    R0,MSG03                ASSUME CLSDST(PASS)\n         TM    MFLAGS,CLSDST           CLSDST FAILURE MEANS THERE\n         BO    ERRETURN                 IS NO CDRSC FOR THE TERMINAL\n*                                       IN A CROSS-DOMAIN SESSION.\n*                                       => PUT OUT ERROR MESSAGE\n         LA    R15,TOENDREQ            ASSUME INQUIRE(SESSPARM)\n*                                       FAILURE IMPLIES THAT THERE\n         TM    MFLAGS2,INQSESS          IS NO QUEUED CINIT FOR LOGON\n         BO    ERRETURN                 PROCESSING FOR THE TERMINAL.\n*                                       => END THE REQUEST\n         LA    R15,TOENDREQ            ASSUME OPNDST(SPEC)\n         TM    MFLAGS,OPNDSPEC         OPNDST FAILURE MEANS THE\n         BO    ERRETURN                 NODE IS UNKNOWN TO VTAM.\n*                                       POSSIBLY DUE TO MAJOR NODE\n*                                       BEING DEACTIVATED.\n*                                       => END THE REQUEST\n         BAL   R7,SNOCCUR              ANY OTHER CAUSE OF\n*                                       ERROR IS IMPOSSIBLE\nER144B   DS    0H\n         TM    MFLAGS,CLSDST           ERROR ON CLSDST(PASS)\n         BZ    ERRETURN                NO => WRITE UNKNOWN APPL'N\n         LA    R0,MSG01                YES. WRITE THE MESSAGE\n*                                       'XXXXXXXX UNKNOWN LOGOMODE'\n         B     ERRETURN\nOPNDSPC  DS    0H\n         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?\n*******> BO    SNOCCUR\n         BO    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         TM    MFLAGS,CLSDST           WAS THIS A CLOSE\n         BO    ERRETURN                 CLDST(PASS).  OR\n*                                       APPLICATION CAN'T BE\n*                                       CONNECTED AS REQUESTED\n*                                       IN RELREQ OR READEND.\n*                                       ISSUE ALREADY PREPARED\n*                                       ERROR MESSAGE.\n         BAL   R7,SNOCCUR              NO, ANY OTHER CAUSE\n*                                       IS IMPOSSIBLE\n         TITLE '*********  N E T S O L  -  SCAN FOR LOGON SUBROUTINE'\nERRETURN DS    0H\n         STC   R15,ACTIONS             SAVE ACTION CODES FOR\n         STC   R0,ACTIONS+1             DEBUGGING\n         CR    R1,R5                   DO WE HAVE BOTH A SYNCH\n*                                      RPL AND A ASYNCH RPL\n         BE    ERROUT                  NO, SKIP THE MOVE OF THE\n*                                      RPL WORKAREA\n         MVC   LNIFGRPL(WORKRPLA,R5),SYNWORK RESTORE WORKAREA\n         SPACE 1\n         DROP  R1\n         USING IFGRPL,R5\n         SPACE 1\nERROUT   DS    0H\n         LR    R14,R3                  RESTORE ADDR AND RETURN\n         BR    R14                      VTAM WHICH WILL RETURN\n*                                       TO THE NSI AFTER THE\n*                                       COMMAND WHICH CAUSED\n*                                       ERREXIT TO BE ENTERED.\n         TITLE '*********  N E T S O L  -  EQUATES AND CONSTANTS'\nR0       EQU   0                       MACRO WORK REGISTER, AND\n*                                      CONTAINS REASON CODE UPON\n*                                      ABNORMAL TERMINATION\nR1       EQU   1                       PARAMETER REGISTER,\n*                                      CORRUPTED BY API MACROS\nR2       EQU   2                       WORK REGISTER\nR3       EQU   3                       WORK REGISTER\nR4       EQU   4                       WORK REGISTER\nR5       EQU   5                       POINTER TO CURRENT RPL, IT\n*                                      IS NOT USED FOR ANY OTHER\n*                                      PURPOSE\nPTRRPL   EQU   R5                      AS ABOVE\nR6       EQU   6                       WORK REGISTER\nR7       EQU   7                       WORK REG\nR8       EQU   8                       NIB POINTER\nPTRNIB   EQU   8                        EXCEPT IN STD LOGON.\nR9       EQU   9                       WORK REG\nR10      EQU   10                      THIRD BASE REGISTER\nR11      EQU   11                      SECOND BASE REGISTER\nR12      EQU   12                      FIRST BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN REGISTER\nR15      EQU   15                      RETURN CODE AND EXIT ENTRY PTR\n         SPACE 2\n***********************************************************************\n*        FLAGS INDEPENDENT OF A SPECIFIC REQUEST                      *\n***********************************************************************\n         SPACE 1\nUFLAGS   DC    X'00'                   MAIN NETSOL FLAGS\nSHUTDOWN EQU   X'80'                   SHUTDOWN IN PROGRESS\nINIT     EQU   X'40'                   INITIALIZATION IN PROGRESS\nINITERR  EQU   X'20'                   ERROR DURING INITIALIZATION\n         SPACE 1\nDUMPFLAG DC    X'00'                   REASON CODE FOR DUMPING\nOPENCODE EQU   1                       OPEN ACB FAILURE\nSETLCODE EQU   2                       SETLOGON FAILURE\nCBLKCODE EQU   4                       CONTROL BLOCK FAILURE\nTABLTRBL EQU   8                       TROUBLE WITH THE TTE'S\n         SPACE 1\nTRTAB1   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6' HEX->CHAR TR TABLE\nTRTAB    EQU   TRTAB1-X'F0'            USE ONLY LAST 16 OF TRTAB\n         SPACE 1\nPACKWORK DS    XL16                    UNPACK WORK AREA\n         SPACE 1\nSESSPARM DS    XL120                   INQUIRE(SESSPARM) WORK AREA\n*                                      MAX SIZE ENCOUNTERED IS 88\n         SPACE 1\nSYSTEMID DC    X'00'                   SYSTEM ID FOR SOME APPLIDS\n         SPACE 1\n         DC    C'SAVED REGISTERS FOR USER ABENDS HERE'\nSNOREGS  DC    16F'0'                  REGS FOR SNO CONDITIONS\n         SPACE 1\nRETVTAM@ DS    F                       SAVE AREA FOR EXIT RETURN ADDR\n         SPACE 1\nGENSAVE  DS    18F                     SAVE AREA FOR SOME EXIT RTNS\n         SPACE 1\nSUBSAV14 DC    F'0'                    SAVE AREA FOR REG 14\n*                                       USED BY SUBROUTINES\nFINISECB DC    F'0'                    ECB THAT MAIN-LINE CODE WAITS\n*                                      ON, IT IS POST'ED BY TPEND EXIT\n         EJECT\n*              MISCELLANEOUS CONSTANTS AND MASKS.\nSBA      EQU   X'11'                   3270 SET BUFFER @ FIELD\nCLEARKEY EQU   X'6D'                   3270 CLEAR KEY\nENTERKEY EQU   X'7D'                   3270 ENTER KEY\nHEX50    EQU   X'50'                   3270 BUFFER ADDRESS\nHEXD3    EQU   X'D3'                     \"    \"       \"\nHEXD5    EQU   X'D5'                     \"     \"       \"\nCR       EQU   X'0D'                   3767 CARRIAGE RETURN\nFF       EQU   X'FF'                   USED TO TURN OFF SWITCHES\n         SPACE 1\n*              EQUATES FOR ACTION CODES AND MODIFIERS\nTORELES  EQU   8                       BRANCH TO RELEASE\nTOSEND   EQU   X'0C'                   BRANCH TO WRITE\nREISSU   EQU   X'10'                   REISSUE COMMAND\nRELONLY  EQU   0                       RELEASE ONLY DONT REAQUIRE\nREL1ST   EQU   4                       RELEASE AND ACQUIRE\nTOENDREQ EQU   X'14'                   BRANCH TO FREERPL\nTORESEND EQU   X'18'                   TAKE ACTION ACCORDING TO RTN\nTOPROBDV EQU   X'20'                   BRANCH TO PROBDEV\n         EJECT\n*              HEX VALUES FOR FEEDBACK AND RETURN CODE COMPARES\n         SPACE 1\n         DS    0H\nHEX2     DC    XL2'2'\nHEX3     DC    XL2'3'\nHEX4     DC    XL2'4'\nHEX5     DC    XL2'5'\nHEX8     DC    XL2'8'\nHEX9     DC    XL2'9'\nHEXC     DC    XL2'C'\nHEXD     DC    XL2'D'\nHEX10    DC    XL2'10'\nHEX11    DC    XL2'11'\nHEX12    DC    XL2'12'\nHEX13    DC    XL2'13'\nHEX14    DC    XL2'14'\nHEX18    DC    XL2'18'\nHEX1B    DC    XL2'1B'\nHEX1C    DC    XL2'1C'                                      DC18203\nHEX20    DC    XL2'20'\nHEX2B    DC    XL2'2B'\nHEX2D    DC    XL2'2D'\nHEX31    DC    XL2'31'\nHEX3C    DC    XL2'3C'\nHEX4A    DC    XL2'4A'\nHEX56    DC    XL2'56'\nHEX5D    DC    XL2'5D'\nHEX5F    DC    XL2'5F'\nHEX60    DC    XL2'60'\n         EJECT\n*              BISYNCH STATUS ERROR MESSAGE CODES\n         DS    0H\nSNAS0010 DC    XL2'0010'               3270 -- INTERRUPTION\n*                                       REQUIRED BECAUSE DEVICE\n*                                       POWERED OFF.\nSNAS0200 DC    XL2'0200'                3270 -- DEVICE END\n*                                       (ALONE), MEANING THAT\n*                                       THE DEVICE IS POWERED\n*                                       ON AND OK TO USE.\n         SPACE 1\n*              LOGICAL UNIT STATUS FOR 3276/3278/3287/ETC.\n         SPACE 1\nLUS0001  DC    XL2'0001'               DEVICE AVAILABLE\nLUS082B  DC    XL2'082B'               DEVICE AVAILABLE\n         SPACE 1\n@EXEC2   MVC   0(0,R4),2(R7)\n@EXEC3   MVC   0(0,R4),0(R6)\n         SPACE 3\n         LTORG\n         TITLE '*********  N E T S O L  -  ERROR BYPASS TABLE'\n***********************************************************************\n*        THIS TABLE DEFINES THOSE RPL-BASED MACRO ERRORS WHICH        *\n*        ARE NOT TO BE WRITTEN TO THE OPERATOR'S CONSOLE.             *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OFTHE FOLLOWING FIELDS:            *\n*                                                                     *\n*             ERMCODE - THE ERROR COMBINATION TO BE BYPASSED.         *\n*                       THE FORMAT OF THIS FIELD IS:                  *\n*                     RPLREQ/RPLRTNCD/RPLFDB2/RPLSSEI/RPLSSMI/RPLUSNSI*\n*                       ANY FIELD WHICH DOESN'T MATTER SHOULD BE SET  *\n*                       TO ZERO.                                      *\n*                                                                     *\n*             ERMAND  - THE MASK TO ZERO IRRELEVANT FIELDS IN THE     *\n*                       CONSTRUCTED ERROR COMBINATION FIELD PRIOR     *\n*                       TO COMPARISON WITH ERMCODE. EACH BYTE HERE    *\n*                       HAS A CORRESPONDING BYTE IN ERMCODE AND SHOULD*\n*                       BE SET TO:                                    *\n*                         X'FF' - IF THE FIELD IN ERRCODE IS NON-ZERO.*\n*                         X'00' - IF THE FIELD IN ERRCODE IS ZERO.    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERMCODE  EQU   0,7                    ERROR COMBINATION TO BE COMPARED\nERMAND   EQU   7,7                    MASK TO ZERO IRRELEVANT FIELDS\nERMSGL   EQU   14                     LENGTH OF A TABLE ENTRY\n         SPACE 2\nERMSGTAB EQU   *                      START OF ERROR MSG TABLE\nERM1CODE DC    XL7'1B144B00000000'      BAD APPLID\nERM1AND  DC    XL7'FFFFFF00000000'        KEYED IN AT TERMINAL\nERMSGEND EQU   *-ERMSGL               LAST ENTRY IN TABLE\n         SPACE 2\nERMBXLE  DC    A(ERMSGTAB)            BXLE (TABLE START)\n         DC    A(ERMSGL)                REGS   (ENTRY LENGTH)\n         DC    A(ERMSGEND)                FOR TABLE SEARCH  (TABLE END)\n         TITLE '*********  N E T S O L  -  NETSOL GETPARM OPTIONS'\n***********************************************************************\n*        THIS TABLE DEFINES THE OPTIONS WHICH CAN BE SPECIFIED        *\n*        WHEN SEARCHING THE INPUT CMD STRING FOR AN OPTION.           *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *\n*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *\n*                        MULTIPLE LOGON SEQUENCES.                    *\n*                                                                     *\n*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *\n*                        WITH CMDGAPPL                                *\n*                                                                     *\n*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *\n*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *\n*                                                                     *\n*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *\n*                        COMMAND.                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGPAMECT  EQU   0                      START OF OPTION LIST\nGPLEN    EQU   0,2                    MAX LENGTH OF PARAMETER\nGPTEXTL  EQU   2,2                    LEN OF PARM ERROR TEXT\nGPFLAG   EQU   4,1                    OPTION FLAGS\nGPOPT    EQU   X'80'                  PARAMETER IS OPTIONAL\nGPNULL   EQU   X'00'                  NO OPTIONS FOR THIS PARAMTER\nGPTEXT   EQU   5                      TEXT INSERTED INTO GP ERR MSG\n         SPACE 2\n         PRINT NOGEN\n*\n*        APPLICATION LOGON SEQUENCES\n*\nSLNODE   $GP    8,'NODENAME',GPNULL\nSLAPPL   $GP    8,'LOGON APPLID',GPOPT\n         TITLE '*********  N E T S O L  -  NETSOL COMMAND TABLE'\n***********************************************************************\n*        THIS TABLE DEFINES THE COMMANDS WHICH MAY BE ENTERED FROM    *\n*        THE TERMINAL.                                                *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *\n*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *\n*                        MULTIPLE LOGON SEQUENCES.                    *\n*                                                                     *\n*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *\n*                        WITH CMDGAPPL                                *\n*                                                                     *\n*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *\n*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *\n*                                                                     *\n*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *\n*                        COMMAND.                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCMDGAPPL EQU   0,8                    GENERIC APPLICATION NAME\nCMDVAPPL EQU   8,8                    VTAM APPLICATION NAME\nCMDTEXT  EQU   16,8                   LOGON SEQUENCE OR COMMAND\nCMDROUTA EQU   24,4                   A(CMD PROCESSING ROUTINE)\nCMDTEXTL EQU   28,2                   LENGTH OF CMDTEXT\nCMDFLAG  EQU   30,1                   COMMAND FLAG\nCMDINIT  EQU   X'80'                  COMMAND ALLOWED FROM SYSIN FILE\nCMDTERM  EQU   X'40'                  COMMAND ALLOWED FROM TERMINAL\nCMDFILL  EQU   31,1                   FILLER\nCMDTABL  EQU   32                     LENGTH OF CMD TABLE ENTRY\n         SPACE 2\n         PRINT NOGEN\nCMDTAB   EQU   *                             START OF COMMAND TABLE\n*\n*        APPLICATION LOGON SEQUENCES\n*\nCHCF     $CMD  HCF,HCF,CHKAPPL,'HCF',CMDTERM\nCIMSTEST $CMD  IMSTEST,IMSTEST,CHKAPPL,'IMSTEST',CMDTERM\n         $CMD  IMSTEST,IMSTEST,CHKAPPL,'4',CMDTERM\nCIMS     $CMD  IMS,IMS,CHKAPPL,'IMS',CMDTERM\n         $CMD  IMS,IMS,CHKAPPL,'2',CMDTERM\nCLCV     $CMD  LCV,LCV,CHKAPPL,'LCV',CMDTERM\nCNCCFA   $CMD  NCCFA,NCCFA,CHKAPPL,'NCCFA',CMDTERM\nCNCCFB   $CMD  NCCFB,NCCFB,CHKAPPL,'NCCFB',CMDTERM\nCNETAPL1 $CMD  NETAPPL1,NETAPPL1,CHKAPPL,'NETAPPL1',CMDTERM\nCNETAPL2 $CMD  NETAPPL2,NETAPPL2,CHKAPPL,'NETAPPL2',CMDTERM\nCNETEST  $CMD  NETEST,NETEST,CHKAPPL,'NETEST',CMDTERM\nCNETSOLA $CMD  NETSOLA,NETSOLA,CHKAPPL,'NETSOLA',CMDTERM\nCNETSOLB $CMD  NETSOLB,NETSOLB,CHKAPPL,'NETSOLB',CMDTERM\nCNETSOL  $CMD  NETSOL,NETSOL,CHKAPPL,'NETSOL',CMDTERM\nCNETOP   $CMD  NETOP,NETOP,CHKAPPL,'NETOP',CMDTERM\nCNPA     $CMD  NPA,NPA,CHKAPPL,'NPA',CMDTERM\nCTESTWYL $CMD  TESTWYL,TESTWYL,CHKAPPL,'TESTWYL',CMDTERM\nCTSOA    $CMD  TSOA,TSOA,CHKAPPL,'TSOA',CMDTERM\n         $CMD  TSOA,TSOA,CHKAPPL,'LOGONA',CMDTERM\nCTSOB    $CMD  TSOB,TSOB,CHKAPPL,'TSOB',CMDTERM\n         $CMD  TSOB,TSOB,CHKAPPL,'LOGONB',CMDTERM\nCTSO     $CMD  TSO,TSOB,CHKAPPL,'TSO',CMDTERM\n         $CMD  TSO,TSOB,CHKAPPL,'LOGON',CMDTERM\nCWYLBUR  $CMD  WYLBUR,WYL,CHKAPPL,'WYLBUR',CMDTERM\n         $CMD  WYLBUR,WYL,CHKAPPL,'3',CMDTERM\nCVSPC    $CMD  VSPC,VSPC,CHKAPPL,'VSPC',CMDTERM\n         $CMD  VSPC,VSPC,CHKAPPL,'5',CMDTERM\n*\n*        NETSOL COMMANDS\n*\nCLOGOFF  $CMD  LOGOFF,LOGOFF,LOGOFCMD,'LOGOFF',CMDTERM\nCSLOGON  $CMD  SETLOGON,SETLOGON,SETLOGON,'SETLOGON',CMDTERM+CMDINIT\n         SPACE 1\nCMDTABND DC    CL8'ENDOFTAB'                 END OF COMMAND TABLE\n         PRINT GEN\n         TITLE '*********  N E T S O L  -  SPECIAL LOGMODE ENTRY TABLE'\n***********************************************************************\n*        THIS TABLE DEFINES THOSE APPLICATIONS WHICH DO NOT USE       *\n*        THE DEFAULT LOGMODE ENTRY FOR THE DEVICE.                    *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             LOGMDAPP - THE APPLID OF THE APPLICATION USING A        *\n*                        DIFFERNENT LOGOMODE TABLE ENTRY.             *\n*                                                                     *\n*             LOGMDENT- THE ASSOCIATED LOGOMODE TABLE ENTRY NAME.     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOGMDAPP EQU   0,8                    APPLICATION NAME\nLOGMDENT EQU   8,8                    ASSOCIATED LOGMODE TABLE ENTRY\nLOGMDLEN EQU   16                     LENGTH OF A TABLE ENTRY\n         SPACE 2\nLOGMDTAB EQU   *                             START OF LOGMODE TABLE\n*                 /APPLID  /    /LOGMODE /   FORMAT ENTRY\nLOGMDHCF DC    CL8'HCF     ',CL8'HCFPX   '   HCF\nLOGMDNCF DC    CL8'NCCF    ',CL8'DSILGMOD'   NCCF\nLOGMDEND DC    XL8'FFFFFFFFFFFFFFFF'         END OF LOGMODE TABLE\n         TITLE '*********  N E T S O L  -  MESSAGE EQUATES/CONSTANTS'\n*              EQUATES FOR ERROR MESSAGE NUMBERS AND REASON-CODES\nMSG01    EQU   1                       INVALID LOGMODE TABLE ENTRY\nMSG02    EQU   2                       LOGON DATA NOT IN INTRPRET TBLE.\nMSG03    EQU   3                       NO INTRPRET TABLE\nMSG04    EQU   4                       NO ROUTINE TO FIND APPL NAME\nMSG05    EQU   5                       NOT AUTHORIZED FOR APPLICATION\nMSG06    EQU   6                       APPLICATION NOT KNOWN\nMSG07    EQU   7                       APPLICATION DEACTIVATED\nMSG08    EQU   8                       APPLICATION INACTIVE\nMSG09    EQU   9                       APPLICATION QUIESCING\nMSG10    EQU   10                      APPLICATION NEVER ACCEPTS LOGONS\nMSG11    EQU   11                      APPLICATION TEMPORARILY NOT\n*                                      ACCEPTING LOGONS.\nMSG12    EQU   12                      THIS TERMINAL LOGGED ON\n*                                      TO NETWORK SOLICITOR\n         SPACE 2\n***********************************************************************\n*        LIST FORMS OF SOME MESSAGES                                  *\n***********************************************************************\n         SPACE 1\nLISTWTO  WTO  'BCSC001 TERM=******** HAS BEEN RELEASED BY NETSOL DUE TOX\n                I/O ERROR',                                            X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nLISTWTO1 WTO  'BCSC002 RC=42 ON NETSOL CLOSE ACB',                     X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nLISTWTO6 WTO  'BCSC006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS PROX\n               GRAM IS TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nERRORMSG WTO  'BCSC003 SYNAD/LERAD EXIT REQ=**,RTNCD=**,FDBK2=**,SSENSEX\n               I=**,SSENSMI=**,SENSE=****,TERM=********',              X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nLOSTMSG  WTO  'BCSC004 LOSTERM ENTRY CODE XX FOR TERM=********',       X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nRELRQMSG WTO  'BCSC005 TERM=******** RELEASED DUE TO RELREQ REQUEST',  X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nRELFLMSG WTO  'BCSC007 TERM=******** NOT RELEASED BY RELREQ EXIT',     X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nLISTWTO8 WTO  'BCSC008 TERM=******** IS AN UNSUPPORTED TERMINAL TYPE', X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nLOGMENU  WTO  'BCSC009 TERM=******** MENU WRITTEN FROM ******',        X\n               ROUTCDE=(11),DESC=(7),MF=L\n         SPACE 3\nMSG1003  WTO  'BCSC010 TERM=******** LOGMODE NOT COMPATIBLE WITH TERMINX\n               AL',ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nDCBMSG   WTO  'BCSC011 XXXXXX FILE WILL NOT OPEN. INITIALIZATION BYPASSX\n               ED',ROUTCDE=(1,8),DESC=(7),MF=L\n         SPACE 3\nINITEMSG WTO  'BCSC012 ERROS ON INITIALIZATION FILE. EXECUTION CONTINUEX\n               S',ROUTCDE=(1,8),DESC=(7),MF=L\n         TITLE '*********  N E T S O L  -  A C B'\n         DS    0D\n         DC    CL8'ACB'\n         SPACE 2\nACB      ACB   AM=VTAM,                                                X\n               APPLID=NSNAME,                                          X\n               EXLST=EXLST,                                            X\n               MACRF=LOGON\n         TITLE '*********  N E T S O L  -  A C B   EXIT LIST'\n***********************************************************************\n*    EXIT ROUTINES TO BE SCHEDULED IN RESPONSE TO VTAM EVENTS         *\n*                                                                     *\n*              * ERREXIT ENTERED FOR ERROR CONDITIONS.                *\n*              * TPEND SCHEDULED WHEN VTAM SHUTS DOWN                 *\n*              * LOGON SCHEDULED WHEN A TERMINAL LOGS ON              *\n*              * LOSTERM SCHEDULED WHEN A TERMINAL IS LOST            *\n*              * RELREQ SCHEDULED WHEN ANOTHER APPLICATION ACQUIRES   *\n*                A TERMINAL CURRENTLY LOGGED ON TO NETSOL.            *\n***********************************************************************\n         SPACE 3\n         DS    0D\n         DC    CL8'EXITLIST'\n         SPACE 2\nEXLST    EXLST LERAD=ERREXIT,                                          X\n               SYNAD=ERREXIT,                                          X\n               TPEND=TPEND,                                            X\n               RELREQ=RELREQ,                                          X\n               LOGON=LOGON,                                            X\n               LOSTERM=LOSTERM,                                        X\n               AM=VTAM\n         TITLE '*********  N E T S O L  -  ASYNCHRONOUS  N I B'\n***********************************************************************\n*        THE FOLLOWING NIB IS USED TO REFRESH THE NIB IN THE          *\n*        ASYNCHROUS RPL. IT ITSELF IS NOT USED IN ANY MACRO.          *\n***********************************************************************\n         SPACE 3\n         DS    0D\n         DC    CL8'FRESHNIB'\n         SPACE 2\nFRESHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X\n               LISTEND=YES,LOGMODE=C' ',BNDAREA=0\n         TITLE '*********  N E T S O L  -  ASYNCHRONOUS   R P L'\n***********************************************************************\n*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE ASYNC        *\n*        RPL'S IN THE RPL CSECT.  IT IS NOT ITSELF USED IN ANY        *\n*        MACRO.                                                       *\n***********************************************************************\n         SPACE 3\n         DS    0D\n         DC    CL8'FRESHRPL'\n         SPACE 2\nFRESHRPL RPL   ACB=ACB,                                                X\n               AM=VTAM,                                                X\n               OPTCD=ASY\n         TITLE '*********  N E T S O L  -  TERMINAL TABLE DSECT'\nTERMTABL DSECT\nTERMNAME DS    CL8                     TERMINAL LU NAME FROM LOGON\nTERMCID  DS    XL4                     CID GOTTEN AFTER OPNDST\nTERMCRPL DS    AL4                     A(ACTIVE RPL FOR THIS TTE)\nTERMAPPL DS    CL8                     APPLID FOR LAST CLSDST(PASS)\nTERMDAPL DS    CL8                     DEFAULT LOGON APPLID FOR TERM\nTERMLOGC DS    H                       LOGON COUNTER\nTERMFLAG DS    XL1                     FLAG BYTE FOR LOGON STATUS\nLOGPROC  EQU   X'80'                   LOGON PROCEEEDING\nSENDSCED EQU   X'40'                   SEND (POST=SCED) ISSUED  DC18203\nTERMFLG2 DS    XL1                     FLAG FOR TERMINAL'S NETSOL STAT\nTOPEN    EQU   X'80'                   TERM LOGGED ON TO NETSOL\nTPASSED  EQU   X'40'                   TERM SUCCESSFULLY TO APPLID\nTREL     EQU   X'20'                   TERM RELEASED FOR SOME REASON\nTINIT    EQU   X'10'                   DEFAULT APPLID SET AT INIT TIME\nTERMDDT  DS    AL4                     A(DDT FOR THIS TERMINAL)\nTERMDTIM DS    F                       TIME+60 SECS OF AUTO LOGON\nTERMDCNT DS    H                       AUTO LOGON LOOP COUNTER\nTERMFILL DS    CL18                    RESERVED\nTERMELEN EQU   *-TERMNAME              LENGTH OF AN ENTRY\n         TITLE '*********  N E T S O L  - DEVICE DEPENDENT TABLE DSECT'\nDDT      DSECT\n         SPACE 2\n*        THE DEVICE DEPENDENT TABLE IDENTIFIES EDIT AND I/O ROUTINES\n*        AND MESSAGES APPLICABLE TO A PARTICULAR DEVICE TYPE.\n*        THE INQUIRE MACRO IS ISSUED IN THE LOGON EXIT TO OBTAIN\n*        LOGMODE INFORMATION SO THAT THE DEVICE TYPE CAN BE DETERMINED.\n*        TERMDDT POINTS TO THE DDT FOR A TERMINAL.\n         SPACE 2\n         DS    0D\nDDTEDIT  DS    AL4                     A(INPUT EDIT ROUTINE)\nDDTSEND  DS    AL4                     A(SEND ROUTINE)\nDDTTERM  DS    AL4                     A(TERMINAL FIELD IN MSG 12)\nDDTTIME  DS    AL4                     A(TIME FIELD IN MSG 12)\nDDTM4OFS DS    AL4                     A(USEABLE MSG BUFFER IN MSG4)\nDDTMSGOF DS    AL2                     MSG OFFSET OF DATA FIELD\nDDTM4L   DS    AL2                     LEN(USEABLE MSG BUFFER IN MSG4)\nDDTMSGTB DS    0F\nDDTMSG01 DS    AL4                     A(MSG 01)\nDDTMSG02 DS    AL4                     A(MSG 02)\nDDTMSG03 DS    AL4                     A(MSG 03)\nDDTMSG04 DS    AL4                     A(MSG 04)\nDDTMSG05 DS    AL4                     A(MSG 05)\nDDTMSG06 DS    AL4                     A(MSG 06)\nDDTMSG07 DS    AL4                     A(MSG 07)\nDDTMSG08 DS    AL4                     A(MSG 08)\nDDTMSG09 DS    AL4                     A(MSG 09)\nDDTMSG10 DS    AL4                     A(MSG 10)\nDDTMSG11 DS    AL4                     A(MSG 11)\nDDTMSG12 DS    AL4                     A(MSG 12)\n         TITLE '*********  N E T S O L  -  D C B ''S'\n*        DCB FOR SYSIN FILE\n         SPACE 1\nNETSOL   CSECT\n         PRINT NOGEN\nSYSINDCB DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EODSYSIN,MACRF=(GM),        X\n               LRECL=80\n*        DCB FOR SYSOUT FILE\n         SPACE 1\nSYSOUDCB DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=F\n         SPACE 1\n         IHADCB DSORG=PS\n         PRINT GEN\n         TITLE '*********  N E T S O L  -  N I B   DSECT'\n         ISTDNIB\n         TITLE '*********  N E T S O L  -  B I N D   DSECT'\n         ISTDBIND\n         TITLE '*********  N E T S O L  -  R P L   DSECT'\nIFGRPLX  DSECT\nSTSECT   DS    0D                  START DSECT ON D-WORD\n         IFGRPL DSECT=NO,AM=VTAM\n         EJECT\n*********       END OF RPL DSECT AND START OF NIB       **************\n         ORG\nNIBDMPID DC    0D'0',CL8'DYNAMNIB'     NIB DUMP ID\nNIBSTART DS    CL(NIBLNIB)             ASYNCHROUS NIB\n*********       END OF NIB AND START OF RPL WORK AREA   **************\nWORKSPAC DS    0D                      START OF RPL WORK AREA\nCID      DS    F                       CID OF READ DEVICE\nRPLSAVE  DS    18F                     SAVE AREA FOR RPL OPERATIONS\nRPLERRSA DS    12F                     SAVE AREA FOR SYNAD EXIT\n*                                      THAT ARE ASYNCHRONOUS\nAPPLID   DS    CL8                     NAME OF APPLICATION\nMODETAB  DS    CL8                     NAME OF MODE TABLE ENTRY\nGRPLTIME DS    CL8     (HHMMSSTH YYYDD) TIMESTAMP WHEN RPL GETMAINED\nRECLEN   DS    F                       FOR READ RECLEN FIELD\nSENDLEN  DS    F                       FOR SEND TO TERMINAL\nDATAPTR  DS    AL4(0)                  A(LOGON SEQUENCE IN IOAREA)\nGPPARM   DS    AL4(0)                  A(OPTION LIST PASSED TO GETPARM)\nGPDATAP  DS    AL4(0)                  A(CURRENT PTR IN CMD BUFFER)\nGPDATAL  DS    H                       LENGTH OF TEXT LEFT IN CMD BUF\nMSGINDEX DS    X                       NUMBER OF ERROR MESSAGE WRITTEN\nERMDATA  DS    CL7                     COMBINED ERROR FIELD\nREQ      EQU   ERMDATA,1               FOR RPL REQ FIELD\nRTNCD    EQU   ERMDATA+1,1             FOR RPL RTNCD FIELD\nFDBK2    EQU   ERMDATA+2,1             FOR RPL FDBK2 FIELD\nSENSE    EQU   ERMDATA+3,2             SAVE SSENSEI + SSENSMI FIELDS\nUSENSE   EQU   ERMDATA+5,2             SAVE USSESEI (2 BYTES)\nERMTEMP  DS    CL7                     ERROR FIELD WORKAREA\nACTIONS  DS    2X                      SAVE AREA FOR ERROR\nAPPLSTAT DC    X'0'                    FOR RPL FDBK FIELD\n*                                      ACTION CODES\n*        INTERNAL FLAG BYTES\nFLAGS    DS    X                       FLAG BYTE\n*\nLOGOFF   EQU   X'80'                   LOGOFF COMMAND ISSUED\nRELOPND  EQU   X'40'                   RELEASE DEVICE, THEN\n*                                      ATTEMPT TO RECONNECT\n*                                      VIA OPNDST\nBADEVICE EQU   X'20'                   PROBLEM WITH DEVICE\nLOGMODE  EQU   X'10'                   FLAG TO INDICATE THE USER\n*                                      HAS SUPPLIED THE NAME OF A\n*                                      LOGMODE TABLE ENTRY IN THE\n*                                      LOGON MSG TO BE PASSED TO\n*                                      THE APPLICATION.\nFIRSTSND EQU   X'08'                   FIRST SEND TO TERMINAL\nCLEARSCR EQU   X'04'                   RECEND ISSUING CLEAR SCREEN\nLUSTATE  EQU   X'02'                   LUSTAT PROCESSING FOR TERMINAL\nSIMLOG   EQU   X'01'                   CLSDST(PASS) FAILED => MUST\n*                                      ISSUE CLSDST(RELEASE) BEFORE\n*                                      CONTINUING WITH SIMLOGON\n         SPACE 1\nEXITFLAG DS    X                       FLAG INDICATING WHICH EXITS\n*                                      HAVE BEEN ENTERED.\nLOGONEX  EQU   X'80'                   ENTERED THE LOGON EXIT\nRECEX    EQU   X'40'                   ENTERED THE READEND EXIT\nPASSEX   EQU   X'20'                   ENTERED THE CLSDST(PASS) EXIT\nSENDEX   EQU   X'10'                   ENTERED THE WRITE EXIT\nRELREQEX EQU   X'08'                   ENTERED THE RELREQ EXIT\nLOSTEX   EQU   X'04'                   ENTERED THE LOSTERM EXIT\nCLOSEX   EQU   X'02'                   ENTERED THE CLSDST(RELEASE)EXIT\nOPENEX   EQU   X'01'                   ENTERED THE OPNDST EXIT\n         SPACE 1\nEXITFLG2 DS    X                       2ND FLAG INDICATING WHICH EXITS\n*                                      HAVE BEEN ENTERED.\nOPNACQX  EQU   X'80'                   ENTERED THE OPNDST(ACQUIRE) EXIT\n         SPACE 1\nMFLAGS   DS    X                       FLAG BYTE FOR CURRENT VTAM MACRO\nOPNDSPEC EQU   X'80'                   OPNDST(SPEC) IN PROGRESS\nINQAPPST EQU   X'40'                   INQUIRE(APPSTST) IN PROGRESS\nSENDING  EQU   X'20'                   WRITE IN PROGRESS\nRECA     EQU   X'10'                   READ(ANY) IN PROGRESS\nSMLOGON  EQU   X'08'                   SIMLOGON ISSUED AFTER CLSDST\nINTRPRT  EQU   X'04'                   INTRPRET IN PROGRESS\nCLSDST   EQU   X'02'                   CLSDST IN PROGRESS\nLUSEND   EQU   X'01'                   LUSTAT RESPONSE SENT\n         SPACE 1\n         SPACE 1\nMFLAGS2  DS    X                      FLAG BYTE2 FOR CURRENT VTAM MACRO\nINQSESS  EQU   X'80'                   INQUIRE(SESSPARM) IN PROGRESS\n         SPACE 1\nMACFLAGS DS    X                       INDICATE MACROS CALLED FLAG 1\nCLSREL   EQU   X'80'                   WILL DO CLSDST(RELEASE)\nOPNSPEC  EQU   X'40'                   WILL DO OPEN(SPEC)\nSIMLGON  EQU   X'20'                   SIMLOGON AFTER CLSDST\nINTAPPID EQU   X'10'                   WILL DO INTERP (APPLID)\nINQAPPS  EQU   X'08'                   WILL DO INQUIRE(APPSTAT)\nCLOSPASS EQU   X'04'                   WILL DO CLSDST(PASS)\nSENDASY  EQU   X'02'                   WILL DO SEND ASY\nOPNDACQ  EQU   X'01'                   WILL DO OPNDST(AQUIRE)\n         SPACE 1\nMACFLAG2 DS    X                       INDICATE MACROS CALLED FLAG 2\nINQSES   EQU   X'80'                   WILL DO INQUIRE(SESSPARM)\n         SPACE 1\nDATASEQL DS    X                       X-LATED DATA SEQ-LENGTH\n         SPACE 2\nWORKRPLA EQU   *-WORKSPAC              USED TO CLEAR OUT WORKAREA\n         TITLE '*********  N E T S O L  -  SYNCHRONOUS RPL + NIB + WA'\n***********************************************************************\n*        THE FOLLOWING RPL IS USED FOR ALL SYNCHRONOUS COMMANDS       *\n***********************************************************************\n         SPACE 3\nNETSOL   CSECT\n         DS    0D\n         DC    CL8'SYNCHRPL'\n         SPACE 2\nSYNCHRPL RPL  ACB=ACB,OPTCD=SYN,                                       X\n               AM=VTAM\n         ORG\n***********************************************************************\n*        THE FOLLOWING NIB IS USED FOR ALL SYNCHRONOUS OPERATIONS     *\n*        REQUIRING A NIB.                                             *\n***********************************************************************\n         SPACE 3\n         DS    0D\n         DC    CL8'SYNCHNIB'\n         SPACE 2\nSYNCHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X\n               LISTEND=YES,LOGMODE=C' ',BNDAREA=0\n         DS    0D\nSYNWORK  DC    (WORKRPLA)X'00'         RPL WORK AREA\n         DS    0D\nLNGTHRPL DC    AL1(1),AL3(ENDSECT-STSECT+8)  SUBPOOL #/LENGTH OF RPL\n*                                      AND ITS OWN WORKAREA\nSYNARG   EQU   SYNCHRPL+RPLARG-IFGRPL  DISPLACEMENT TO THE ARG\n*                                      WITHIN SYNCHRPL\nSYNFDB3  EQU   SYNCHRPL+RPLFDB3-IFGRPL DISPLACEMENT TO FBD3\n*                                      IN SYNCHRPL'S WORKAREA\nSRPLEXT1 EQU   SYNCHRPL+RPLEXTD1-IFGRPL DISPLACEMENT TO 'NIB@\n*                                      IN ARG FIELD' BIT\nSYNUSFLD EQU   SYNCHRPL+RPLUSFLD-IFGRPL DISPLACEMENT TO RPL USER FIELD\n*                                      FOR USE BY ERROR EXIT ROUTINE\n         EJECT\n***********************************************************************\n*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE SYNCRONOUS   *\n*        RPL'S. IT IS NOT ITSELF USED IN ANY MACROS      DC18203      *\n***********************************************************************\n         SPACE 1\n         DS    0D                                              DC18203\n         DC    CL8'FRSYNRPL'                                   DC18203\n         SPACE 2\nFRSYNRPL RPL   ACB=ACB,AM=VTAM,OPTCD=SYN                       DC18203\nFRSYNL   EQU   *-FRSYNRPL    LENGTH OF SYN RPL FOR REFRESH     DC18203\n         TITLE '*********  N E T S O L  -  SETLOGON RPL'\n***********************************************************************\n*        SETLOGON RPL - A SEPARATE RPL IS NECESSARY BECAUSE           *\n*         THE LOGON EXIT CAN BE DRIVEN BEFORE THE SETLOGON            *\n*         COMPLETES.                                                  *\n***********************************************************************\n         SPACE 3\n         DS    0D\n         DC    CL8'LOGONRPL'\n         SPACE 2\nSETLRPL  RPL   ACB=ACB,OPTCD=SYN,                                      X\n               AM=VTAM\nSETNIB   DC    (8+NIBLNIB)X'00'        NIB IN IFGRPLX DSECT\nSETWORKA DC    (WORKRPLA)X'00'         WORKAREA IN IFGRPLX DSECT\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               270'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *\n***********************************************************************\nDDT3270  DS    0D\nS32EDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\nS32SENDA DC    A(S32SEND)         A(3270 SEND ROUTINE)\nS32TERMA DC    A(S32TERM)         A(TERMINAL FIELD IN MSG 12)\nS32TIMEA DC    A(S32TIME)         A(TIME FIELD IN MSG 12)\nS32M4OFS DC    A(S32M4OF)         A(USEABLE BUFFER IN MSG 4)\nS32OFFST DC    AL2(23)            MSG OFFSET FOR INSERTED DATA\nS32M4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 3\nS32MSGTB DS    0F\n         DC    A(S32MSG01)\n         DC    A(S32MSG02)\n         DC    A(S32MSG03)\n         DC    A(S32MSG04)\n         DC    A(S32MSG05)\n         DC    A(S32MSG06)\n         DC    A(S32MSG07)\n         DC    A(S32MSG08)\n         DC    A(S32MSG09)\n         DC    A(S32MSG10)\n         DC    A(S32MSG11)\n         DC    A(S32MSG12)\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               270 EXTENDED FUNCTION'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES     *\n*        THAT HAVE EXTENDED FUNCTION (I.E. COLOUR + SYMBOL SETS ).    *\n***********************************************************************\nDDT3270E DS    0D\nS3EEDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\nS3ESENDA DC    A(S32SEND)         A(3270 SEND ROUTINE)\nS3ETERMA DC    A(S3ETERM)         A(TERMINAL FIELD IN MSG 12)\nS3ETIMEA DC    A(S3ETIME)         A(TIME FIELD IN MSG 12)\nS3EM4OFS DC    A(S3EM4OF)         A(USEABLE BUFFER IN MSG 4)\nS3EOFFST DC    AL2(27)            MSG OFFSET FOR INSERTED DATA\nS3EM4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 3\nS3EMSGTB DS    0F\n         DC    A(S3EMSG01)\n         DC    A(S3EMSG02)\n         DC    A(S3EMSG03)\n         DC    A(S3EMSG04)\n         DC    A(S3EMSG05)\n         DC    A(S3EMSG06)\n         DC    A(S3EMSG07)\n         DC    A(S3EMSG08)\n         DC    A(S3EMSG09)\n         DC    A(S3EMSG10)\n         DC    A(S3EMSG11)\n         DC    A(S3EMSG12)\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               767'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3767 TERMINALS.  *\n***********************************************************************\nDDT3767  DS    0D\nS37EDITA DC    A(S37EDIT)         A(3767 INPUT EDIT ROUTINE)\nS37SENDA DC    A(S32SEND)         A(3767 SEND ROUTINE)\nS37TERMA DC    A(S37TERM)         A(TERMINAL FIELD IN MSG 12)\nS37TIMEA DC    A(S37TIME)         A(TIME FIELD IN MSG 12)\nS37M4OFS DC    A(S37M4OF)         A(USEABLE BUFFER IN MSG 4)\nS37OFFST DC    AL2(8)             MSG OFFSET FOR INSERTED DATA\nS37M4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 3\nS37MSGTB DS    0F\n         DC    A(S37MSG01)\n         DC    A(S37MSG02)\n         DC    A(S37MSG03)\n         DC    A(S37MSG04)\n         DC    A(S37MSG05)\n         DC    A(S37MSG06)\n         DC    A(S37MSG07)\n         DC    A(S37MSG08)\n         DC    A(S37MSG09)\n         DC    A(S37MSG10)\n         DC    A(S37MSG11)\n         DC    A(S37MSG12)\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR SX\n               YSIN FILE'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN PROCESSING CMDS FROM THE SYSIN FILE.*\n***********************************************************************\nDDTSYSIN DS    0D\nSINEDITA DC    A(0)               A(SYSIN INPUT EDIT ROUTINE)\nSINSENDA DC    A(RIPUTMSG)        A(SYSIN SEND ROUTINE)\nSINTERMA DC    A(0)               A(TERMINAL FIELD IN MSG 12)\nSINTIMEA DC    A(0)               A(TIME FIELD IN MSG 12)\nSINM4OFS DC    A(SINM4OF)         A(USEABLE BUFFER IN MSG 4)\nSINOFFST DC    AL2(0)             MSG OFFSET FOR INSERTED DATA\nSINM4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 3\nSINMSGTB DS    0F\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG04)         RESPONSE FOR INITIALIZATION CMDS\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG07)         FOR INVALID COMMANDS\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         TITLE '*********  N E T S O L  -  MESSAGES FOR 3270'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 3\n         $MODEL 2               SET 3270 MODEL NUMBER FOR 3270 MACROS\n         SPACE 3\nS32MSG01 DC    YL2(S32END01-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,16)\n         $SF   (HI,SKIP)\n         DC    C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END01 EQU   *\n         SPACE 3\nS32MSG02 DC    YL2(S32END02-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,16)\n         $SF   (HI,SKIP)\n         DC    C'BCSC102 INVALID LOGON SEQUENCE , REENTER'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END02 EQU   *\n         SPACE 3\nS32MSG03 DC    YL2(S32END03-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,16)\n         $SF   (HI,SKIP)\n         DC    C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END03 EQU   *\n         SPACE 3\nS32MSG04 DC    YL2(S32END04-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             MOVE CURSOR\n         $IC                        TO START OF INPUT AREA\n         $SBA  (24,16)\n         $SF   (HI,SKIP)\nS32M4OF  DC    CL60' '\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END04 EQU   *\n         SPACE 3\nS32MSG05 DC    YL2(S32END05-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,16)\n         $SF   (HI,SKIP)\n         DC    C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END05 EQU   *\n         SPACE 3\nS32MSG06 DC    YL2(S32END06-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (MDT)              SETUP WCC\n         $SBA  (1,1)              SET BUFFER ADDRESS\n         $SF   (PROT)             SET ATTRIBUTE BYTE\n         DC    C'BCSC106 LOGON IN PROGRESS'\nS32END06 EQU   *\n         SPACE 3\nS32MSG07 DC    YL2(S32END07-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n         DC    C'BCSC107          NOT DEFINED TO VTAM'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END07 EQU   *\n         SPACE 3\nS32MSG08 DC    YL2(S32END08-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n         DC    C'BCSC108          IS NOT ACTIVE'  OR LOGMODE INVALID\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END08 EQU   *\n         SPACE 3\nS32MSG09 DC    YL2(S32END09-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n         DC    C'BCSC109          NO LONGER ACCEPTING LOGONS'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END09 EQU   *\n         SPACE 3\nS32MSG10 DC    YL2(S32END10-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n         DC    C'BCSC110          NEVER ACCEPTING LOGONS'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END10 EQU   *\n         SPACE 3\nS32MSG11 DC    YL2(S32END11-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n         DC    C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END11 EQU   *\n         SPACE 3\nS32MSG12 DC    YL2(S32END12-*)\n***********************************************************************\n*                                                                     *\n*        FULLSCREEN MSG FOR 3275/3277                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (RESETKBD,MDT)     SET WCC CODE\n         $SBA  (1,1)              DEFINE ATTRIBUTES OF 1ST BUFFER\n         $SF   (SKIP)\n         $SBA  (2,1)\nS32NSNAM DC    CL40'          BBBBBBBBBBBBB    CCCCCCCCCCCCC'\n         DC    CL40'CC  SSSSSSSSSSSSSSS  CCCCCCCCCCCCCCC    '\n         DC    CL40'         BBBBBBBBBBBBB    CCCCCCCCCCCCCC'\n         DC    CL40'C  SSSSSSSSSSSSSSS  CCCCCCCCCCCCCCC     '\n         DC    CL40'        BBBBBB     BB    CCCCCC       CC'\n         DC    CL40'  SS           SS  CCCCCC       CC'\n         DC    CL40'       BBBBBB     BB    CCCCCC          '\n         DC    CL40' SS               CCCCCC'\n         DC    CL40'      BBBBBBBBBBBBB    CCCCCC           '\n         DC    CL40'SSSSSSSSSSSSSSS  CCCCCC'\n         DC    CL40'     BBBBBBBBBBBBBBB  CCCCCCCC         S'\n         DC    CL40'SSSSSSSSSSSSSS  CCCCCCCC                '\n         DC    CL40'    BBBBBBBB     BB  CCCCCCCC           '\n         DC    CL40'     SSSSSSSS  CCCCCCCC                 '\n         DC    CL40'   BBBBBBBB     BB  CCCCCCCC     CC  SS '\n         DC    CL40'    SSSSSSSS  CCCCCCCC     CC           '\n         DC    CL40'  BBBBBBBB     BB  CCCCCCCC     CC  SS  '\n         DC    CL40'   SSSSSSSS  CCCCCCCC     CC            '\n         DC    CL40' BBBBBBBBBBBBBBB  CCCCCCCCCCCCCCC  SSSSS'\n         DC    CL40'SSSSSSSSSS  CCCCCCCCCCCCCCC             '\n         DC    CL40'BBBBBBBBBBBBBBB  CCCCCCCCCCCCCCC  SSSSSS'\n         DC    CL40'SSSSSSSSS  CCCCCCCCCCCCCCC              '\n         $SBA  (14,20)\n         DC    C'BRITISH COLUMBIA SYSTEMS CORPORATION'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TIME AND DATE STAMP                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n         $SBA  (14,63)\n         DC    C'TERM:'           TELL 'EM IT THE NODE NAME\nS32TERM  DC    CL13' '            TERM NAME\n         $SBA  (16,62)\nS32TIME  DC    CL15' '            TIME STAMP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PF KEY SELECTION MENU                                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         $SBA  (16,6)\n         DC    C'PFK APPL          ENTER         EXIT'\n         $SBA  (18,6)\n         DC    C'    TSO           LOGON         LOGOFF'\n         $SBA  (19,6)\n         DC    C' 2  IMS/VS        IMS           /RCL'\n         $SBA  (20,6)\n         DC    C' 3  WYLBUR        WYLBUR        LOGOFF'\n         $SBA  (21,6)\n         DC    C' 4  TEST IMS/VS   IMSTEST       /RCL'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LOGON INPUT AREA                                             *\n*                                                                     *\n***********************************************************************\n         SPACE\n         $SBA  (22,80)\n         $SF   (UNPROT)            SF,ATT(UNPROTECT)\n         $IC\n         $SBA  (24,1)              DEFINE END OF INPUT FIELD\n         $SF   (SKIP)\nS32END12 EQU   *\nS32SIZ12 EQU   S32END12-S32MSG12   CALCULATE SIZE OF MSG 12\n         TITLE '*********  N E T S O L  -  MESSAGES FOR EXTENDED FUNCTIX\n               ON 3270'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 3\n         $MODEL 2               SET 3270 MODEL NUMBER FOR 3270 MACROS\n         SPACE 3\nS3EMSG01 DC    YL2(S3EEND01-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,12)\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND01 EQU   *\n         SPACE 3\nS3EMSG02 DC    YL2(S3EEND02-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,12)\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'BCSC102 INVALID LOGON SEQUENCE , REENTER'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND02 EQU   *\n         SPACE 3\nS3EMSG03 DC    YL2(S3EEND03-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,12)\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND03 EQU   *\n         SPACE 3\nS3EMSG04 DC    YL2(S3EEND04-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             MOVE CURSOR\n         $IC                        TO START OF INPUT BUFFER\n         $SBA  (24,12)\n         $SFE  ATTR=SKIP,COL=RED\nS3EM4OF  DC    CL60' '\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND04 EQU   *\n         SPACE 3\nS3EMSG05 DC    YL2(S3EEND05-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,12)\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND05 EQU   *\n         SPACE 3\nS3EMSG06 DC    YL2(S3EEND06-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (MDT)              SETUP WCC\n         $SBA  (1,1)              SET BUFFER ADDRESS\n         $SFE  ATTR=PROT,COL=GREEN\n         DC    C'BCSC106 LOGON IN PROGRESS'\nS3EEND06 EQU   *\n         SPACE 3\nS3EMSG07 DC    YL2(S3EEND07-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,12)            SET BUFFER ADDRESS\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'BCSC107          NOT DEFINED TO VTAM'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND07 EQU   *\n         SPACE 3\nS3EMSG08 DC    YL2(S3EEND08-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,12)            SET BUFFER ADDRESS\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'BCSC108          IS NOT ACTIVE'  OR LOGMODE INVALID\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND08 EQU   *\n         SPACE 3\nS3EMSG09 DC    YL2(S3EEND09-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,12)            SET BUFFER ADDRESS\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'BCSC109          NO LONGER ACCEPTING LOGONS'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND09 EQU   *\n         SPACE 3\nS3EMSG10 DC    YL2(S3EEND10-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,12)            SET BUFFER ADDRESS\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'BCSC110          NEVER ACCEPTING LOGONS'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND10 EQU   *\n         SPACE 3\nS3EMSG11 DC    YL2(S3EEND11-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (23,80,X'00')          INPUT BUFFER\n         $SBA  (24,12)            SET BUFFER ADDRESS\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS3EEND11 EQU   *\n         SPACE 3\nS3EMSG12 DC    YL2(S3EEND12-*)\n***********************************************************************\n*                                                                     *\n*        FULLSCREEN MSG FOR EXTENDED FUNCTION 3270                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n         $IO   ERASE/WRITE\n         $WCC  (RESETKBD,MDT)\n         $SBA  (1,1)              ADDRESS 1ST BYTE ON SCREEN\n         $SF   (PROT)             MARK IT PROTECTED\n         $SBA  (2,1)\n         $SFE  ATTR=SKIP,COL=GREEN\nS3ENSNAM DC    CL40'          BBBBBBBBBBBBB    CCCCCCCCCCCCC'\n         DC    CL40'CC  SSSSSSSSSSSSSSS  CCCCCCCCCCCCCCC    '\n         DC    CL40'         BBBBBBBBBBBBB    CCCCCCCCCCCCCC'\n         DC    CL40'C  SSSSSSSSSSSSSSS  CCCCCCCCCCCCCCC     '\n         DC    CL40'        BBBBBB     BB    CCCCCC       CC'\n         DC    CL40'  SS           SS  CCCCCC       CC'\n         DC    CL40'       BBBBBB     BB    CCCCCC          '\n         DC    CL40' SS               CCCCCC'\n         DC    CL40'      BBBBBBBBBBBBB    CCCCCC           '\n         DC    CL40'SSSSSSSSSSSSSSS  CCCCCC'\n         DC    CL40'     BBBBBBBBBBBBBBB  CCCCCCCC         S'\n         DC    CL40'SSSSSSSSSSSSSS  CCCCCCCC                '\n         DC    CL40'    BBBBBBBB     BB  CCCCCCCC           '\n         DC    CL40'     SSSSSSSS  CCCCCCCC                 '\n         DC    CL40'   BBBBBBBB     BB  CCCCCCCC     CC  SS '\n         DC    CL40'    SSSSSSSS  CCCCCCCC     CC           '\n         DC    CL40'  BBBBBBBB     BB  CCCCCCCC     CC  SS  '\n         DC    CL40'   SSSSSSSS  CCCCCCCC     CC            '\n         DC    CL40' BBBBBBBBBBBBBBB  CCCCCCCCCCCCCCC  SSSSS'\n         DC    CL40'SSSSSSSSSS  CCCCCCCCCCCCCCC             '\n         DC    CL40'BBBBBBBBBBBBBBB  CCCCCCCCCCCCCCC  SSSSSS'\n         DC    CL40'SSSSSSSSS  CCCCCCCCCCCCCCC              '\n         $SBA  (14,20)\n         DC    C'BRITISH COLUMBIA SYSTEMS CORPORATION'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TIME AND DATE STAMP                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n         $SBA  (14,65)\n         $SFE  ATTR=SKIP,COL=RED\n         DC    C'TERM: '          TELL 'EM IT THE NODE NAME\n         $SBA  (14,71)\n         $SFE  ATTR=PROT,XHL=BLINK,COL=RED\nS3ETERM  DC    CL13' '            TERM NAME\n         $SBA  (15,1)             DEFINE END OF FIELD TO RESET BLINKING\n         $SFE  ATTR=SKIP\n         $SBA  (16,62)\n         $SFE  ATTR=SKIP,COL=GREEN\nS3ETIME  DC    CL15' '            TIME STAMP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PF KEY SELECTION MENU                                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         $SBA  (16,6)\n         $SFE  ATTR=SKIP,COL=GREEN\n         DC    C'PFK  APPL         ENTER         EXIT'\n         $SBA  (18,6)\n         $SFE  ATTR=SKIP,COL=YELLOW\n         DC    C'    TSO           LOGON         LOGOFF'\n         $SBA  (19,6)\n         $SFE  ATTR=SKIP,COL=PINK\n         DC    C' 2  IMS/VS        IMS           /RCL'\n         $SBA  (20,6)\n         $SFE  ATTR=SKIP,COL=TURQ\n         DC    C' 3  WYLBUR        WYLBUR        LOGOFF'\n         $SBA  (21,6)\n         $SFE  ATTR=SKIP,COL=YELLOW\n         DC    C' 4  TEST IMS/VS   IMSTEST       /RCL'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LOGON INPUT AREA                                             *\n*                                                                     *\n***********************************************************************\n         SPACE\n         $SBA  (22,80)\n         $SFE  ATTR=UNPROT,COL=WHITE\n         $IC\n         $SBA  (24,1)\n         $SFE  ATTR=SKIP          END OF INPUT FIELD\nS3EEND12 EQU   *\nS3ESIZ12 EQU   S3EEND12-S3EMSG12\n         TITLE '*********  N E T S O L  -  MESSAGES FOR 3767'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 3\nS37MSG01 DC    YL2(S37END01-*)\n         DC    C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END01 EQU   *\n         SPACE 3\nS37MSG02 DC    YL2(S37END02-*)\n         DC    C'BCSC102 INVALID LOGON SEQUENCE , REENTER'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END02 EQU   *\n         SPACE 3\nS37MSG03 DC    YL2(S37END03-*)\n         DC    C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END03 EQU   *\n         SPACE 3\nS37MSG04 DC    YL2(S37END04-*)\nS37M4OF  DC    CL60' '\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END04 EQU   *\n         SPACE 3\nS37MSG05 DC    YL2(S37END05-*)\n         DC    C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END05 EQU   *\n         SPACE 3\nS37MSG06 DC    YL2(S37END06-*)\n         DC    C'BCSC106 LOGON IN PROGRESS'\n         DC    X'15'              CARRIAGE RETURN\nS37END06 EQU   *\n         SPACE 3\nS37MSG07 DC    YL2(S37END07-*)\n         DC    C'BCSC107          NOT DEFINED TO VTAM'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END07 EQU   *\n         SPACE 3\nS37MSG08 DC    YL2(S37END08-*)\n         DC    C'BCSC108          IS NOT ACTIVE'  OR LOGMODE INVALID\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END08 EQU   *\n         SPACE 3\nS37MSG09 DC    YL2(S37END09-*)\n         DC    C'BCSC109          NO LONGER ACCEPTING LOGONS'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END09 EQU   *\n         SPACE 3\nS37MSG10 DC    YL2(S37END10-*)\n         DC    C'BCSC110          NEVER ACCEPTING LOGONS'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END10 EQU   *\n         SPACE 3\nS37MSG11 DC    YL2(S37END11-*)\n         DC    C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END11 EQU   *\n         SPACE 3\nS37MSG12 DC    YL2(S37END12-*)\n         DC    XL2'1515'          DOUBLE CARRIAGE RETURN\nS37NSNAM DC    C'B.C. SYSTEMS CORPORATION'\n***********************************************************************\n*                                                                     *\n*        TIME AND DATE STAMP                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n         DC    C'   TERM:'        TERM KEYWORD\nS37TERM  DC    CL8' '             TERM NAME\n         DC    CL3' '             FILLER\nS37TIME  DC    CL15' '            TIME STAMP\n         DC    XL2'1515'          CARRIAGE RETURN\n***********************************************************************\n*                                                                     *\n*        APPLICATION SELECTION MENU                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         DC    C'  APPLICATION  ENTER         EXIT'\n         DC    X'15'\n         DC    X'15'\n         DC    C'  TSO          LOGON         LOGOFF'\n         DC    X'15'\n         DC    C'  IMS          IMS           /RCL'\n         DC    X'15'\n         DC    C'  TEST IMS     IMSTEST       /RCL'\n         DC    X'15'\n***********************************************************************\n*                                                                     *\n*        PROMPT FOR INPUT                                             *\n*                                                                     *\n***********************************************************************\n         DC    C'ENTER ? '\nS37END12 EQU   *\nS37SIZ12 EQU   S37END12-S37MSG12\n         TITLE '*********  N E T S O L  -  MESSAGES FOR SYSIN'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 3\nSINMSG00 DC    YL2(SINEND00-*)\n         DC    C'UNSUPPORTED MESSAGE FOR SYSIN CMDS'\nSINEND00 EQU   *\n         SPACE 3\nSINMSG04 DC    YL2(SINEND04-*)\nSINM4OF  DC    CL60' '\nSINEND04 EQU   *\n         SPACE 3\nSINMSG07 DC    YL2(SINEND07-*)\n         DC    CL60'BCSC107 INVALID COMMAND'\nSINEND07 EQU   *\n         SPACE 3\n         EJECT\n         TITLE '*********  N E T S O L  -  R P L   DSECT CONTINUED'\nIFGRPLX  DSECT\n*        THE FOLLOWING SECTION OF THE WORK AREA IS NOT INITIALIZED BY\n*        THE GETRPL FUNCTION SO NO DATA SHOULD BE PLACED IN THAT NEEDS\n*        TO BE ZERO AT THE BEGINNING\n         SPACE 1\n*        THE FOLLOWING MANIPULATION RESERVES A MESSAGE BUFFER FOR\n*        THE LARGEST EXISTING MESSAGE.\nIOBASE   DS    CL(S32SIZ12)            SPACE FOR 3270 MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S3ESIZ12)            SPACE FOR 3270 EXTENDED MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S37SIZ12)            SPACE FOR 3767 MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         ORG   ,                       GO TO END OF BUFFER\nLMSG12   EQU   *-IOBASE                CALC MAX MSG 12 SIZE\n         ORG   IOBASE BACK TO START OF BUFFER\nIOAREA   DS    CL(LMSG12)              FOR MSG OUTPUT / INPUT FROM LU\n         ORG   IOAREA+80               ORG OVER SYSIN BUFFER\nNODENAME DS    CL8                     TEMP NODE NAME STORAGE\nDLOGAPPL DS    CL8                     TEMP APPLID STORAGE\nTTEDUMMY DS    CL(TERMELEN)            DUMMY TTE USED BY SYSIN CMDS\n         ORG   ,                       ORG BACK TO END OF BUFFER\n*        OUTPUT BUFFER DEFINITION COMPLETE.\nDATASEQ  DS    CL256                   TRANSLATED DATA SEQUENC DC18203\nENDSECT  DS    0D                      END DSECT ON D-WORD\nLNIFGRPL EQU   WORKSPAC-STSECT         LENGTH OF ONE RPL AREA\nIOBUFLEN EQU   ENDSECT-IOAREA          LENGTH OF THE IOAREA\n*                                      WITHOUT THE WORKAREA\n         END\n./ ADD NAME=NETSOL$\nINSTRUCTIONS FOR INSTALLING 'NETSOL'\n*************************************\n\n1) ASSEMBLE NETSOL USING THE SAMPLE JCL IN NETSOLA.\n\n2) ADD VTAM DEFINITION FOR 'NETSOL' TO SYS1.VTAMLST.\n\n3) ASSEMBLE AN INTERPRET TABLE(VLOGTAB2) FOR USE BY NETSOL.\n\n4) ADD LOGAPPL=NETSOL,LOGTAB=VLOGTAB2 TO THE TERMINAL, PU, AND LU\n   STATEMENTS IN VTAMLST FOR THOSE TERMINALS YOU WISH TO TALK TO NETSOL.\n\n5) ADD STARTUP PROC (NETSOLP) TO SYS1.PROCLIB.\n\n./ ADD NAME=NETSOLA  8001-08125-08125-1731-00011-00009-00000-GERHARD\n//NETSOL70 JOB (Z904,0012),GERHARD,CLASS=E,MSGCLASS=C,MSGLEVEL=(1,1)\n//        EXEC  PURGEME\n// EXEC SYSCL,RENT=NO,OLIB='SYS1.ESPLIB',\n//             SRC='GERHARD.MVS.NETSOL',\n//             MAC3='GERHARD.MVS.NETSOL'\nDDLMOD=DYNALLOC\n%LKEDDFLT MAP,LIST\n ENTRY NETSOL70\n PAGE NETSOL70\n SETCODE AC(1)\n%NEWLINK NETSOL70\n./ ADD NAME=NETSOLD,SSI=00093263\nNSOL     TITLE '*****************    N E T S O L'\n         MACRO ,                                                 90141\n&NM      XHEAD ,             EXIT CODE (IN NETSOLEX CSECT)       90141\nNETSOLEX CSECT ,             GET EXIT CSECT                      90141\n&NM      LR    R7,R15        MAKE LOCAL BASE                     90141\n         DROP  ,                                                 90141\n         USING &NM,R7        SET LOCAL BASE                      90141\n         L     R12,EXMAIN    GET MAIN BASE                       90141\n         USING NETSOL,R12,R11,R10  CHEAT A LITTLE                90141\n         LM    R10,R11,RESTBASE  LOAD OTHERS                     90141\n         ST    R14,RETVTAM@  SAVE RETURN ADDRESS                 90141\n         USING IFGRPL,PTRRPL           => R P L\n         USING ISTDNIB,PTRNIB          => N I B\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE\n         MEND  ,                                                 90141\n         SPACE 1                                                 90141\n         MACRO ,                                                 90141\n&NM      MHEAD ,             EXIT CODE (IN NETSOL CSECT)         90141\nNETSOL70 CSECT ,             GET MAIN CSECT                      90141\n         DROP  ,                                                 90141\n         USING &NM,R15       SET LOCAL BASE                      90141\n&NM      L     R12,=A(NETSOL)  GET MAIN BASE                     90141\n         USING NETSOL,R12,R11,R10  CHEAT A LITTLE                90141\n         LM    R10,R11,RESTBASE  LOAD OTHERS                     90141\n         ST    R14,RETVTAM@  SAVE RETURN ADDRESS                 90141\n         DROP  R15                                               90141\n         USING IFGRPL,PTRRPL           => R P L\n         USING ISTDNIB,PTRNIB          => N I B\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE\n         MEND  ,                                                 90141\n         SPACE 1                                                 90141\n         MACRO ,                                                 87193\n&NM      LPALOOK &NAME=INVOKE,&CDE=R5,&ERR=EXCXCB,&MLPA=YES      87193\n.*       THIS MODULE PERFORMS SYSTEM DEPENDENT LOOKUP OF A       87193\n.*       SPECIFIC MODULE IN THE LINK-PACK AREA                   87193\n.*       NAME=  D(B) OR RELOC. MEMBER NAME                       87193\n.*       CDE=      MAPPING REGISTER FOR RETURNED CDE             87193\n.*       ERR=      BRANCH ADDRESS IF NOT FOUND                   87193\n         GBLB  &SVS,&MVS                                         87193\n         LCLA  &I                                                87193\n&I       SETA  &SYSNDX                                           87193\n         AIF   (&SVS OR &MVS).SUB                                87193\n&NM      L     R14,CVTPTR    GET CVT                             87193\n         USING CVTMAP,R14    DECLARE IT                          87193\n         L     R14,CVTHEAD   FIRST TCB                           87193\n         USING TCB,R14                                           87193\n         L     R14,TCBOTC    GET MASTER SCHEDULER                87193\n         LA    R14,TCBLLS    GET LOAD LIST                       87193\nLPALOOP  LAT   R14,0(R14),&ERR  EXIT WITH UNAVAILABLE MESSAGE    87193\n         LAT   &CDE,4(R14),LPALOOP  GET CDE OR OUT               87193\n         USING CDENTRY,&CDE                                      87193\n         TM    CDATTR,CDFLPRES+CDFRENT  RENT/LPA MODULE ?        87193\n         BNO   LPALOOP       NO                                  87193\n         CLC   CDENAME,&NAME   MATCHING ENTRY ?                  87193\n         BNE   LPALOOP       NO                                  87193\n         DROP  R14                                               87193\n         MEXIT ,             RETURN WITH &CDE REGISTER SET       87193\n.SUB     ANOP  ,                                                 87193\n&NM      STM   R1,R15,12(R13)  SAVE ALL REGISTERS                87193\n         L     R3,CVTPTR     GET CVT IN R3 FOR IEAVVMSR          87193\n         LM    R0,R1,&NAME   LOAD MODULE NAME                    87193\n         AIF   ('&MLPA' NE 'YES' AND '&MLPA' NE '').NOMLPA       87193\n         L     R15,CVTQLPAQ-CVTMAP(R3)  GET MLPA CDE CHAIN       87193\n         USING CDENTRY,R15                                       87193\nLPL&I.M  ICM   R15,15,CDCHAIN   GET NEXT CDE; ELSE TRY PLPA      87193\n         BZ    LPL&I.P                                           87193\n         C     R1,CDNAME+4   MATCH ?                             87193\n         BNE   LPL&I.M       NO; TRY NEXT                        87193\n         C     R0,CDNAME     FULL MATCH ?                        87193\n         BNE   LPL&I.M       NO; TRY NEXT                        87193\n         LR    R0,R15        FINAGLE THE CDE ADDRESS             87193\n         B     LPL&I.G       FOUND IT                            87193\n         DROP  R15                                               87193\n.NOMLPA  ANOP  ,                                                 87193\nLPL&I.P  L     R7,CVTLPDSR-CVTMAP(,R3)   GET LOOKUP ENTRY        87193\n         BALR  R14,R7    NOTE THAT R7-R9 ARE CLOBBERED           87193\n         B     LPL&I.G-*(,R14)   MODULE FOUND                    87193\n         LM    R1,R15,12(R13)  RESTORE REGS                      87193\n         B     &ERR          TAKE ERROR EXIT                     87193\nLPL&I.G  LM    R1,R15,12(R13)  RESTORE REGS                      87193\n         LR    &CDE,R0       LOAD CDE (LPDE) BASE                87193\n         USING CDENTRY,&CDE  DECLARE IT                          87193\n         MEND  ,                                                 87193\n         SPACE 1                                                 87193\n         MACRO\n&LABEL   $CMD  &VAPPL,&ROUT,&TEXT,&FLAG,&TYPE=0                  88185\n.*\n.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S COMMAND LOOK-UP TABLE.\n.*\n.*  INPUT    : &GAPPL   - GENERALIZED APPLICATION NAME.(DELETED) 88185\n.*             &VAPPL   - ASSOCIATED VTAM APPLICATION NAME.\n.*             &ROUT    - ROUTINE TO PROCESS THE COMMAND.\n.*             &TEXT    - COMMAND ENTERED FROM TERMINAL.\n.*             &FLAG    - COMMAND FLAG BYTE.\n.*             &TYPE    - APPLICATION GROUP FLAG (TSO/CICS/WYL/EXH/OTH)\n.*  OUTPUT   : AN ENTRY IN NETSOL'S COMMAND ENTRY TABLE IS GENERATED.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : APR  15/81\n.*\n         LCLA  &L\n&L       SETA  K'&TEXT-2                                         88185\n&LABEL   DC    CL8'&VAPPL',CL8&TEXT,AL4(&ROUT),AL1(0,&L,&FLAG,&TYPE)\n         MEND\n         SPACE 1                                                 87193\n         MACRO ,                                                 87193\n&NM      $CMDN &VAPPL,&ROUT,&TEXT,&FLAG,&TYPE=0                  88185\n         GBLC  &LCSTR,&OC                                        88172\n&OC      SETC  '&SYSECT'     SAVE OLD CSECT                      88172\n&NM      $CMD  &VAPPL,&ROUT,&TEXT,&FLAG,TYPE=&TYPE               88185\nNETINTAB CSECT ,                                                 87193\n         LOGCHAR APPLID=(APPLICID,&VAPPL),SEQNCE=&TEXT\n         LCSTR &TEXT         CONVERT TO LOWER CASE               88185\n         AIF   ('&TEXT' EQ '&LCSTR').NOTUP                       88185\n         LOGCHAR APPLID=(APPLICID,&VAPPL),SEQNCE=&LCSTR          87193\n.NOTUP   ANOP  ,                                                 87287\n&OC      CSECT ,             RESTORE OLD CSECT                   88172\n         MEND  ,                                                 87193\n         SPACE 1                                                 87193\n         MACRO\n&LABEL   $GP   &GPLEN,&ERRTEXT,&GPFLAG\n.*\n.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S GETPARM OPTION LIST.\n.*\n.*  INPUT    : &GPLEN   - MAXIMUM LENGTH OF PARAMETER.\n.*             &ERRTEXT - TEXT FOR ERROR MSG FROM GETPARM ROUTINE.\n.*             &GPFLAG  - OPTION BYTE FOR GETPARM.\n.*\n.*  OUTPUT   : A PARAMETER OPTION LIST\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : JUNE 19/81\n.*\n         LCLA  &L\n&L       SETA  K'&ERRTEXT-2\n&LABEL   DC    AL2(&GPLEN,&L),AL1(&GPFLAG),CL&L&ERRTEXT\n         MEND\n         SPACE 1                                                 84142\n         MACRO ,                                                 84142\n&NM      LOGO  &SBA=(12,19),&ML=                                 88220\n         GBLC  &LOCAL                                            92222\n         GBLA  &MDL70                                            88206\n         LCLA  &W                                                88206\n&W       SETA  40+(&MDL70/5)*52                                  88206\n&NM      DC    CL39'                                        '    88220\n         DC    CL&W'                                        '    84163\n         AIF   ('&ML' EQ '').NOTIM                               88220\n&ML      EQU   *-15,15,C'C'  TIME STAMP                          88220\n.NOTIM   DC    CL40'                                        '    84163\n         DC    CL&W'                                        '    84163\n         AIF   ('&LOCAL' EQ 'DTS').DODIAL                        92222\n         DC    CL40'   PPPPPPPPPPP     IIIIIIIIII    DDDDDDD'    92222\n         DC    CL&W'DD                                      '    92222\n         DC    CL40'   PPPPPPPPPPPP    IIIIIIIIII    DDDDDDD'    92222\n         DC    CL&W'DDD          IIIIII NN   NN   CCCCC     '    92222\n         DC    CL40'   PP        PP        II        DD     '    92222\n         DC    CL&W'  DD           II   NNN  NN  CC   CC    '    92222\n         DC    CL40'   PP        PP        II        DD     '    92222\n         DC    CL&W'   DD          II   NNNN NN  CC         '    92222\n         DC    CL40'   PPPPPPPPPPPP        II        DD     '    92222\n         DC    CL&W'   DD          II   NN NNNN  CC         '    92222\n         DC    CL40'   PPPPPPPPPPP         II        DD     '    92222\n         DC    CL&W'   DD          II   NN  NNN  CC   CC    '    92222\n         DC    CL40'   PP                  II        DD     '    92222\n         DC    CL&W'  DD         IIIIII NN   NN   CCCCC     '    92222\n         DC    CL40'   PP              IIIIIIIIII    DDDDDDD'    92222\n         DC    CL&W'DDD                                     '    92222\n         DC    CL40'   PP              IIIIIIIIII    DDDDDDD'    92222\n         DC    CL&W'DD                                      '    92222\n         $SBA  &SBA                                              92222\n         $SFE  ATTR=SKIP,COL=TURQ                                92222\n         DC    C'Public Interest Data, Inc.'                     92222\n         AGO   .COMOUT                                           92222\n.DODIAL  DC    CL40'    DDDDDD   IIII     A     LL          '    84163\n         DC    CL&W'   TTTTTTTT YY   YY M     M EEEEEEE     '    84163\n         DC    CL40'    DD   DD   II     AAA    LL          '    84163\n         DC    CL&W'      TT    YY   YY MM   MM EE          '    84163\n         DC    CL40'    DD   DD   II    AA AA   LL          '    84163\n         DC    CL&W'      TT    YY   YY MMM MMM EE          '    84163\n         DC    CL40'    DD   DD   II   AA   AA  LL          '    84163\n         DC    CL&W'      TT     YY YY  MMMMMMM EEEEE       '    84163\n         DC    CL40'    DD   DD   II   AA   AA  LL      ===='    84163\n         DC    CL&W'===   TT      YYY   MM M MM EE          '    84163\n         DC    CL40'    DD   DD   II   AAAAAAA  LL          '    84163\n         DC    CL&W'      TT      YY    MM   MM EE          '    84163\n         DC    CL40'    DD   DD   II   AA   AA  LL          '    84163\n         DC    CL&W'      TT      YY    MM   MM EE          '    84163\n         DC    CL40'    DDDDDD   IIII  AA   AA  LLLLLLL     '    84163\n         DC    CL&W'      TT      YY    MM   MM EEEEEEE     '    84163\n         $SBA  &SBA                                              84142\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'Consumers Computer Services, Inc.'              84142\n.COMOUT  MEND  ,                                                 84142\n         SPACE 1                                                 86065\n         MACRO ,                                                 86065\n&NM      CLOGO ,                                                 86065\n         GBLA  &MDL70                                            88206\n         LCLA  &W                                                88206\n&W       SETA  40+(&MDL70/5)*52                                  88206\n&NM      DC    CL40'  CCCCC   LL       OOOOO    SSSSS   EEEE'    86065\n         DC    CL&W'EEE DDDDDD    **                        '    86065\n         DC    CL40' CC   CC  LL      OO   OO  SS   SS  EE  '    86065\n         DC    CL&W'    DD   DD   **                        '    86065\n         DC    CL40' CC       LL      OO   OO  SS       EE  '    86065\n         DC    CL&W'    DD   DD   **                        '    86065\n         DC    CL40' CC       LL      OO   OO   SSSSS   EEEE'    86065\n         DC    CL&W'E   DD   DD   **                        '    86065\n         DC    CL40' CC       LL      OO   OO       SS  EE  '    86065\n         DC    CL&W'    DD   DD   **                        '    86065\n         DC    CL40' CC       LL      OO   OO  SS   SS  EE  '    86065\n         DC    CL&W'    DD   DD   **                        '    86065\n         DC    CL40' CC   CC  LL      OO   OO  SS   SS  EE  '    86065\n         DC    CL&W'    DD   DD                             '    86065\n         DC    CL40'  CCCCC   LLLLLLL  OOOOO    SSSSS   EEEE'    86065\n         DC    CL&W'EEE DDDDDD    **                        '    86065\n         MEND  ,                                                 86065\n         SPACE 1                                                 88192\n         MACRO                                                   88192\n&LABEL   $MSG  &TEXT,&TYPE=,&WCC=ALARM,&COL=RED,&ML=             88206\n         GBLC  &@DEV@                                            88192\n         GBLA  &MDL70                                            88220\n         LCLC  &LE                                               88206\n         LCLA  &L,&W                                             88192\n&W       SETA  80+(&MDL70/5)*52                                  88220\n&L       SETA  K'&TEXT-3                                         88192\n&LE      SETC  '&LABEL'(1,3).'END'.'&LABEL'(7,2)                 88206\n         AIF   ('&TYPE' EQ '').KEEP                              88192\n&@DEV@   SETC  '&TYPE'                                           88192\n.KEEP    AIF   ('&@DEV@' EQ '3767').DO67                         88192\n         AIF   ('&@DEV@' EQ '3270').DO70                         88206\n         AIF   ('&@DEV@' EQ '327E').DO7E                         88206\n         AIF   ('&@DEV@' EQ 'CON').DOCON                         88192\n         AIF   ('&@DEV@' EQ 'SYN').DOSYN                         88192\n         MNOTE 4,'TYPE= REQUIRED'                                88192\n.DO67    AIF   ('&ML' NE '').DO67L                               88206\n&LABEL   DC    AL2(2+&L+2+2+8),X'0D25',&TEXT,X'0D25',C'Enter ? ' 88192\n         MEXIT ,                                                 88192\n.DO67L   ANOP  ,                                                 88206\n&LABEL   DC    AL2(2+&L+2+2+8),X'0D25'                           88206\n&ML      DC    &TEXT,X'0D25',C'Enter ? '                         88206\n         MEXIT ,                                                 88192\n.DOCON   AIF   ('&ML' NE '').DOCONL                              88206\n&LABEL   DC    AL2(&L+2),&TEXT                                   88192\n         MEXIT ,                                                 88192\n.DOCONL  ANOP  ,                                                 88192\n&LABEL   DC    AL2(&L+2)                                         88206\n&ML      DC    &TEXT                                             88206\n         MEXIT ,                                                 88192\n.DOSYN   AIF   ('&ML' NE '').DOSYNL                              88206\n&LABEL   DC    AL2(&L),&TEXT                                     88192\n         MEXIT ,                                                 88206\n.DOSYNL  ANOP  ,                                                 88206\n&LABEL   DC    AL2(&L)                                           88206\n&ML      DC    &TEXT                                             88206\n         MEXIT ,                                                 88206\n.DO70    ANOP  ,                                                 88206\n&LABEL   DC    YL2(&LE-*)                                        88206\n         $IO   WRITE                                             88206\n         $WCC  (&WCC,RESETKBD,MDT)                               88206\n         $SBA  (23,1)             CLEAR                          88206\n         $EUA  (23,1)               OLD                          88206\n         $IC   ,                      INPUT BUFFER               88206\n         $SBA  (24,16)                                           88206\n         $SF   (HI,PROT)                                         88206\n&ML      DC    &TEXT                                             88206\n         $RA   (24,&W,X'00')      CLEAR REST OF MSG BUFFER       88206\n&LE      EQU   *                                                 88206\n         MEXIT ,                                                 88206\n.DO7E    ANOP  ,                                                 88206\n&LABEL   DC    YL2(&LE-*)                                        88206\n         $IO   WRITE                                             88206\n         $WCC  (&WCC,RESETKBD,MDT)                               88206\n         $SBA  (23,1)             CLEAR                          88206\n         $EUA  (23,1)               OLD                          88206\n         $IC   ,                      INPUT BUFFER               88206\n         $SBA  (24,12)                                           88206\n         $SFE  ATTR=PROT,COL=&COL                                88206\n&ML      DC    &TEXT                                             88206\n         $RA   (24,&W,X'00')      CLEAR REST OF MSG BUFFER       88206\n&LE      EQU   *                                                 88206\n.MEND    MEND                                                    88192\n         SPACE 1                                                 88207\n         MACRO ,                                                 88207\n&NM      CHELP &R=17,&C=59,&COLOR=YELLOW                         88207\n         GBLC  &@DEV@        PASSED THROUGH                      88207\n         LCLA  &I                                                88207\n         $SBA  (&R,&C)                                           88207\n&I       SETA  &R+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'*------------------*'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'|                  |'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'|  For assistance  |'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'|    type HELP     |'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'|                  |'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'*------------------*'                           88207\n         MEND  ,                                                 88207\n         SPACE 1                                                 88220\n         MACRO ,                                                 88220\n&NM      $SCRN &N,&TYPE=,&IO=ERASE/WRITE                         88220\n         GBLC  &@DEV@                                            88220\n         GBLA  &MDL70                                            88220\n         LCLA  &W                                                88220\n         LCLC  &P                                                88220\n&P       SETC  '&NM'(1,3)                                        88220\n&W       SETA  80+(&MDL70/5)*52                                  88220\n         AIF   ('&TYPE' EQ '').NOGTYP                            88220\n&@DEV@   SETC  '&TYPE'                                           88220\n.NOGTYP  ANOP  ,                                                 88220\n&P.MSG&N DC    YL2(&P.END&N-*)                                   88220\n         $IO   &IO           ERASE/WRITE OR ERASE/WRITE-ALT      88220\n         $WCC  (RESETKBD,MDT)                                    88220\n         $SBA  (1,1)              ADDRESS 1ST BYTE ON SCREEN     88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n&P.NSN&N LOGO  ML=&P.TIM&N   EXPAND THE LOGO                     88220\n         $SBA  (12,&W)                                           88220\n         $SFE  ATTR=(HI,SKIP),COL=PINK XHL=UNDER                 88220\n&P.MUS&N DC    CL58' '       MESSAGE TO THE USER                 88220\n         $SBA  (12,61)                                           88220\n         $SFE  ATTR=SKIP,COL=BLUE                                88220\n         DC    C'  System: ' IDENTIFY THE RUNNING SYSTEM         88220\n         $SBA  (12,71)                                           88220\n         $SFE  ATTR=PROT,COL=TURQ                                88220\n&P.SID&N DC    CL8' '        SMCA ID                             88220\n         $SBA  (13,61)                                           88220\n         $SFE  ATTR=SKIP,COL=RED                                 88220\n         DC    C'Terminal: '      TELL USER THE NODE NAME        88220\n         $SBA  (13,71)                                           88220\n         $SFE  ATTR=PROT,COL=PINK,XHL=UNDER                      88220\n&P.TID&N DC    CL13' '            TERM NAME                      88220\n         $SBA  (14,1)             DEFINE END OF FIELD TO RESET BLINKING\n         $SFE  ATTR=SKIP                                         88220\n         AIF   ('&N' EQ '20').SCRN20                             88220\n         AIF   ('&N' EQ '13').SCRN13                             88220\n         SPACE 1                                                 88220\n***********************************************************************\n*                                                                     *\n*        PF KEY SELECTION MENU - SCREEN 12                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 88220\n         $SBA  (15,6)                                            88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         DC    C'PFK  APPL          ENTER         EXIT'          88220\n         $SBA  (17,6)                                            88220\n         $SFE  ATTR=SKIP,COL=YELLOW                              88220\n         DC    C'  1  TSO           LOGON         LOGOFF'        88220\n         $SBA  (18,6)                                            88220\n         $SFE  ATTR=SKIP,COL=PINK                                88220\n         DC    C'  2  CICS          CICS          CSSF LOGOFF'   88220\n         $SBA  (19,6)                                            88220\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'  3  SuperWYLBUR   SWYL          LOGOFF     '   88220\n         $SBA  (20,6)                                            88220\n         $SFE  ATTR=SKIP,COL=BLUE                                88220\n         DC    C'  4  WYLBUR        WYLBUR        LOGOFF'        88220\n         $SBA  (21,6)                                            88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         DC    C'  5  EXHIBIT       EXH           LOGOFF'        88220\n         AGO   .SCRNIN                                           88220\n.SCRN13  SPACE 1                                                 88220\n***********************************************************************\n*                                                                     *\n*        'CENTER CLOSED' MESSAGE - SCREEN 13                          *\n*                                                                     *\n***********************************************************************\n         $SBA  (15,1)                                            88220\n         $SFE  ATTR=SKIP,COL=YELLOW                              88220\n         CLOGO ,             AND THE NASTY MESSAGE               88220\n.SCRNIN  $SBA  (22,&W)                                           88220\n         $SFE  ATTR=UNPROT,COL=WHITE                             88220\n         $IC   ,                                                 88220\n         AGO   .SCRNEND                                          88220\n.SCRN20  SPACE 1                                                 88220\n***********************************************************************\n*                                                                     *\n*        USER ID / PASSWORD / ACCOUNT SOLICITATION - SCREEN 20        *\n*                                                                     *\n***********************************************************************\n         $SBA  (15,1)                                            88220\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'> > > > > > > > > > > >'                        88220\n         $SFE  ATTR=SKIP,COL=WHITE                               88220\n         DC    C'VTAM'                                           88220\n         $SFE  ATTR=SKIP,COL=YELLOW                              88220\n         DC    C'Sign-on'                                        88220\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'< < < < < < < < < < < <'                        88220\n         $SBA  (17,11)                                           88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         DC    C' User-Id'                                       88220\n         $SFE  ATTR=UNPROT,COL=WHITE                             88220\n         $IC   ,                                                 88220\n         $SBA  (17,29)                                           88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         $SBA  (18,11)                                           88220\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'Password'                                       88220\n         $SF   (UNPROT,NONDISP)                                  88220\n         $SBA  (18,29)                                           88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         $SBA  (20,11)                                           88220\n         $SFE  ATTR=SKIP,COL=PINK                                88220\n         DC    C' Account'                                       88220\n         $SFE  ATTR=UNPROT,COL=YELLOW                            88220\n         $SBA  (20,29)                                           88220\n         $SFE  ATTR=SKIP,COL=BLUE      WAS =PROT                 88252\n         DC    C' (optional - specify to set'                    88220\n         $SBA  (21,29)                                           88220\n         $SFE  ATTR=SKIP,COL=BLUE                                88220\n         DC    C'  global TSO/WYLBUR logon)'                     88220\n         $SBA  (22,&W)                                           88220\n         $SFE  ATTR=UNPROT,COL=WHITE                             88220\n.SCRNEND $SBA  (24,1)        DEFINE END OF INPUT FIELD           88220\n         $SFE  ATTR=PROT,COL=YELLOW  END OF INPUT FIELD          88220\n         $SBA  (24,17)                                           88220\n         DC    C'Please issue LOGOFF when you are finished'      88220\n         CHELP ,             ADD HELP PROMPT                     88220\n&P.END&N EQU   *                                                 88220\n&P.SIZ&N EQU   &P.END&N-&P.MSG&N                                 88220\n         MEND  ,                                                 88220\n         SPACE 1\n         COPY $3270INT\n         SPACE 1\n         COPY  OPTIONGB                                          84141\n         SPACE 1                                                 84141\n         SYSPARM LIST=YES                                        84141\n         AIF   ('&LOCAL' NE 'CCSI').TEMPFIX  *****TEMP FIX*****  92320\n&LOCAL   SETC  'PID'                         *****TEMP FIX*****  92320\n.TEMPFIX ANOP  ,                             *****TEMP FIX*****  92320\n         EJECT ,                                                 86012\n***********************************************************************\n*                                                                     *\n*                  *****************                                  *\n*                                                                     *\n*                    N E T W O R K                                    *\n*                                                                     *\n*                  S O L I C I T O R                                  *\n*                                                                     *\n*                   ( N E T S O L )                                   *\n*                                                                     *\n*                                                                     *\n*  ENTRY PARAMETERS:  R15  -  ENTRY POINT ADDRESS                     *\n*                     R13  -  CALLER'S SAVE AREA (FROM ATTACH)        *\n*                     R14  -  RETURN ADDRESS (POINTS TO SVC 3 IN CASE *\n*                             OF ATTACH BY NET)                       *\n*                     R0-R12  NOT USED                                *\n*                                                                     *\n*  EXIT PARAMETERS:   R0-R14  SAME AS ENTRY TO NETSOL                 *\n*                     R15     ZERO                                    *\n*                                                                     *\n*  FUNCTION:  NETSOL IS USED TO HANDLE TERMINAL INITIATED LOGONS      *\n*             AND AS SUCH SOLICITS LOGON DATA FROM THE TERMINALS      *\n*             UNDER ITS CONTROL.                                      *\n*                                                                     *\n*             WITH THE ABOVE DATA, NETSOL CAN PASS CONTROL OF THE     *\n*             LOGICAL UNIT FROM NETSOL'S CONTROL TO THAT OF THE       *\n*             REQUESTED APPLICATION.                                  *\n*                                                                     *\n*             TO FACILITATE ENDUSER EASE OF USE, NETSOL HAS A TABLE   *\n*             OF APPLICATIONS THAT USE NON-STANDARD LOGMODE TABLE     *\n*             ENTRIES. WHEN THE USER REQUESTS ONE OF THESE            *\n*             APPLICATIONS, NETSOL LOADS THE APPROPRIATE LOGMODE      *\n*             NAME FROM THE TABLE AND PASSES THIS INFORMATION         *\n*             TO THE APPLICATION DURING THE CLSDST(PASS). THE ENDUSER *\n*             IS NOT REQUIRED TO KNOW ABOUT LOGMODE TABLES. THE       *\n*             NAME OF THIS TABLE IS 'LOGMDTAB'.                       *\n*                                                                     *\n*             THE 'LOGOFF' COMMAND HAS BEEN ADDED TO NETSOL TO ALLOW  *\n*             8100-ATTACHED TERMINALS TO DISCONNECT FROM NETSOL. 8100 *\n*             TERMINALS ARE GENNED WITH A NULL 'LOGAPPL'. LOGOFF     .*\n*             ENTERED AT A STANDARD 3270 TERMINAL, WILL HAVE NO       *\n*             EFFECT SINCE LOGAPPL=NETSOL FOR THESE TERMINALS.        *\n*                                                                     *\n*             ERROR MESSAGES CAN BE ISSUED AT VARIOUS STAGES OF THIS  *\n*             PROCESS IF THE APPLICATION IS INACTIVE, LOGON DATA      *\n*             ENTERED IS INVALID, APPLICATION WON'T ACCEPT LOGONS,ETC.*\n*             ALL ERROR MESSAGES ISSUED BY NETSOL ARE PREFIXED WITH   *\n*             THE CHARACTER STRING 'BCSC'.                            *\n*                                                                     *\n*             TO AID IN DEBUGGING, NETSOL ALSO WRITES SOME MESSAGES   *\n*             TO THE OPERATORS CONSOLE WHEN ERRORS AE DETECTED AS A   *\n*             RESULT OF I/O ERRORS, INVALID LOGONS, ETC.              *\n*                                                                     *\n*             NETSOL SUPPORTS BISYNC AND SDLC 3270 DEVICES (3275,     *\n*             3276, 3277, 3278, 3279 AND COMPATIBLES). ADDITIONAL     *\n*             CODE WAS ADDED FOR TERMINALS (TTY, ETC.) RUNNING UNDER  *\n*             THE NUTTY TERMINAL OPTION (NTO) AS IBM 3767 TYPES.      *\n*                                                                     *\n*             NETSOL USES RECORD MODE I/O TO TALK TO ITS TERMINALS    *\n*             SO IT DOES NOT SUPPORT ANY TERMINALS THAT CAN BE        *\n*             ACCESSED VIA BASIC MODE I/O ONLY.                       *\n*                                                                     *\n*             TO AID IN CONTROLLING THE TERMINALS LOGGED ON TO        *\n*             NETSOL, NETSOL MAINTAINS A TERMINAL TABLE WHICH HAS     *\n*             AN ENTRY FOR EACH TERMINAL THAT HAS BEEN LOGGED ON      *\n*             AT ANY TIME SINCE NETSOL WAS FIRST BROUGHT UP. THESE    *\n*             TERMINAL TABLE ENTRIES (TTE'S) ARE USED TO PROVIDE      *\n*             A MEANS OF TRANSLATING A GIVEN CID TO THE LU NAME AND   *\n*             WHEN THE RELEASE-REQUEUE (RELREQ) EXIT NEEDS TO KNOW    *\n*             THE STATUS OF A GIVEN TERMINAL (I.E., IS IT TRYING TO   *\n*             DO A LOGON). THE TTE HAS BEEN EXTENDED TO PRESERVE OTHER*\n*             INFORMATION (AUTHORIZATION, ETC.).                      *\n*                                                                     *\n*             CODE WAS ADDED TO PROVIDE A HELP SCREEN, A NEWS SCREEN, *\n*             AND MEANS OF PROVIDING ACCESS CONTROL (LOCK FOR SYSTEMS *\n*             MAINTENANCE; GLOBAL LOGON CONTROL).                     *\n*                                                                     *\n*             MOST OF NETSOL'S FUNCTIONS ARE PERFORMED IN VARIOUS     *\n*             EXITS AS FOLLOWS:                                       *\n*                                                                     *\n*             1) TPEND EXIT        - HANDLE 'Z NET' FUNCTION          *\n*                                    WHERE NETSOL IS TO SHUT DOWN.    *\n*                                                                     *\n*             2) LOGON EXIT        - HANDLES TERMINALS BEING LOGGED   *\n*                                    ON TO NETSOL. BUILDS OR UPDATES  *\n*                                    TTE, DOES OPNDST(ACCEPT), AND    *\n*                                    SENDS THE FORMATTED LOGON SCREEN *\n*                                    TO THE TERMINAL.                 *\n*                                                                     *\n*             3) LOSTERM EXIT      - HANDLE 'LOST TERMINAL' CONDITIONS*\n*                                    DUE TO LU/PU/LINK/NCP FAILURES.  *\n*                                    DEPENDING ON THE CONDITION, MAY  *\n*                                    ATTEMPT TO RECOVER THE TERMINAL. *\n*                                                                     *\n*             4) RELREQ EXIT       - HANDLE RELEASE-REQUEUE REQUESTS  *\n*                                    WHERE ANOTHER VTAM APPLICATION   *\n*                                    WANTS THE TERMINAL OWNED BY      *\n*                                    NETSOL. UNLESS A LOGON IS TAKING *\n*                                    PLACE, NETSOL RELEASES THE LU.   *\n*                                                                     *\n*             AS WELL, A NUMBER OF RPL EXITS ARE USED TO HANDLE       *\n*             RPL COMMANDS THAT ARE DONE ASYNCHRONOUSLY VIA RPLS      *\n*             THAT ARE GETMAINED WHEN NEEDED. THESE EXITS ARE:        *\n*                                                                     *\n*             1) OPNDST END EXIT   - ENTERED WHEN AN ASYNCHRONOUS     *\n*                                    OPDNST TO A SPECIFIC TERMINAL    *\n*                                    COMPLETES.                       *\n*                                                                     *\n*             2) RECEIVE END EXIT  - ENTERED WHEN A RECEIVE(ANY) RPL  *\n*                                    IS POSTED COMPLETE. EXAMINES THE *\n*                                    DATA ENTERED FOR A LOGON REQUEST *\n*                                    FROM THE TERMINAL USER.          *\n*                                                                     *\n*             3) END OF SEND EXIT  - ENTERED WHEN AN ASYNCHRONOUS     *\n*                                    SEND TO THE TERMINAL COMPLETES.  *\n*                                                                     *\n*             4) CLSDST(PASS) END  - ENTERED WHEN THE CLSDST(PASS)    *\n*                                    COMPLETES THAT PASSES CONTROL    *\n*                                    TO THE APPLICATION REQUESTED.    *\n*                                    NETSOL RE-ISSUES SIMLOGON TO     *\n*                                    GAIN CONTROL BACK WHEN USER      *\n*                                    LOGS OFF THE APPLICATION         *\n*                                                                     *\n*             5) CLSDST(RELEASE)   - ENTERED WHEN CLSDST(RELEASE)     *\n*                                    COMPLETES. DONE DUE TO RELREQ    *\n*                                    REQUEST OR I/O ERRORS.           *\n*                                                                     *\n*             AS WELL, NETSOL MAKES USE OF A NUMBER OF SUBROUTINES    *\n*             AS FOLLOWS:                                             *\n*                                                                     *\n*             1) GETRPL            - OBTAIN DYNAMIC RPLS VIA A        *\n*                                    GETMAIN FROM SUBPOOL 1           *\n*                                                                     *\n*             2) FREERPL           - FREEMAIN DYNAMIC RPLS            *\n*                                                                     *\n*             3) RECSUB            - ISSUE RECEIVE ANY'S              *\n*                                                                     *\n*             4) ERROR EXIT        - HANDLES ERRORS WHEN A CHECK      *\n*                                    MACRO IS USED ON AN ASYNC RPL    *\n*                                    OR A SYNC RPL COMPLETES. PASSES  *\n*                                    BACK RETURN CODES AND A MODIFIER *\n*                                    (USUALLY ERROR MESSAGE NUMBER)   *\n*                                    TO CODE AFTER THE INSTRUCTION    *\n*                                    THAT MADE THE MACRO CALL         *\n*                                                                     *\n*                                                                     *\n*  REGISTER USAGE:                                                    *\n*                                                                     *\n*         R0  - ERROR MESSAGE NUMBER, PARAMETERS, SVCS, ETC           *\n*         R1  - PARAMETERS TO MACROS, SVCS                            *\n*         R2  - WORK                                                  *\n*         R3  - -> TTE IN MOST CASES / WORK                           *\n*         R4  - WORK                                                  *\n*         R5  - -> DYNAMIC RPL / SYNCHRONOUS RPL                      *\n*         R6  - WORK                                                  *\n*         R7  - WORK  (ADDRESS OF ERROR SOMETIMES ON BAL R7,SNOCCUR)  *\n*         R8  - -> ASYNCHRONOUS / SYNCHRONOUS NIB                     *\n*         R9  - -> DDT WHEN DOING DEVICE DEP WORK / WORK              *\n*         R10 - BASE REGISTER 3                                       *\n*         R11 - BASE REGISTER 2                                       *\n*         R12 - BASE REGISTER 1                                       *\n*         R13 - ADDRESS OF SAVE AREA (USUALLY IN DYNAMIC RPL)         *\n*         R14 - RETURN ADDRESS                                        *\n*         R15 - ENTRY POINT, RETURN CODES                             *\n*                                                                     *\n*                                                                     *\n*  ATTRIBUTES: SERIALLY REUSABLE , NON-AUTHORIZED, VTAM APPLICATION   *\n*                                                                     *\n*  CONTROL BLOCK DEPENDENCIES: RPL, ACB, NIB, EXIT PARAMETER LISTS    *\n*                                                                     *\n*  ROUTINES CALLED: NONE                                              *\n*                                                                     *\n*  ********* MACROS USED: DCLSW, GOIF, SET, RESET, EXECUTE            *\n*                                                                     *\n*  SYSTEM MACROS USED: SAVE, GETMAIN, FREEMAIN, STIMER, OPEN,         *\n*                      WAIT, WTO, CLOSE, ABEND, POST, CHECK           *\n*                                                                     *\n*  VTAM MACROS USED:  SETLOGON, OPNDST, INTRPRET, INQUIRE,            *\n*                     GENCB, CLSDST, SIMLOGON, SEND, RECEIVE          *\n*                                                                     *\n*  MESSAGES TO TERMINAL USER:                                         *\n*                                                                     *\n*             LOGON SCREEN WITH BCSC LOGO.                            *\n*                                        ENTERED BY THE TERMINAL USER)*\n*                                                                     *\n*             BCSC101          LOGMODE ENTRY UNDEFINED                *\n*                                                                     *\n*             BCSC102 INVALID LOGON SEQUENCE , REENTER                *\n*                                                                     *\n*             BCSC103 NO INTERPRET TABLE SPECIFIED FOR LU             *\n*                                                                     *\n*             BCSC104 NO INTERPRET ROUTINE TO RECOGNIZE APPLICATION   *\n*                                                                     *\n*             BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION          *\n*                                                                     *\n*             BCSC106 LOGON IN PROGRESS                               *\n*                                                                     *\n*             BCSC107 XXXXXXXX NOT DEFINED TO VTAM                    *\n*                                                                     *\n*             BCSC108 XXXXXXXX IS NOT AVAILABLE (LOGMODE INVALID?)    *\n*                                                                     *\n*             BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS             *\n*                                                                     *\n*             BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS                 *\n*                                                                     *\n*             BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS       *\n*                                                                     *\n*                                                                     *\n*  MESSAGES TO THE SYSTEM OPERATOR:                                   *\n*                                                                     *\n*             BCSC001 TERM=******** HAS BEEN RELEASED BY NETSOL       *\n*                     DUE TO I/O ERROR                                *\n*                                                                     *\n*             BCSC002 RC=42 ON NETSOL CLOSE ACB                       *\n*                                                                     *\n*             BCSC003 SYNAD/LERAD EXIT REQ=**,FBDK2=**,SSENSEI=**,    *\n*                     SSENSMI=**,SENSE=****,TERM=********             *\n*                                                                     *\n*             BCSC004 LOSTERM ENTRY CODE ** FOR TERM=********         *\n*                                                                     *\n*             BCSC005 TERM=******** RELEASED DUE TO RELREQ REQUEST    *\n*                                                                     *\n*             BCSC006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS    *\n*                     PROGRAM IS TERMINATED.                          *\n*                                                                     *\n*             BCSC007 TERM=******** NOT RELEASED BY RELREQ EXIT       *\n*                                                                     *\n*  USER ABEND CODES:  U0001 - PROBLEM WITH OPEN OF THE ACB            *\n*                     U0002 - SETLOGON FAILED                         *\n*                     U0004 - RETURN CODE/SENSE CODE NOT EXPECTED     *\n*                     U0008 - PROBLEM WITH THE TERMINAL TABLE (TTE)   *\n*                                                                     *\n*                                                                     *\n*  RESTRICTIONS:                                                      *\n*                                                                     *\n*        1) THE TERMINAL TABLE ONLY HAS ROOM FOR 1024 TERMINALS,      *\n*           IF MORE ARE NEEDED, THE CONSTANT 'TERMLTAB' WILL HAVE TO  *\n*           BE CHANGED WITH A ZAP OR BY RE-ASSEMBLY OF NETSOL.        *\n*                                                                     *\n*        2) ONLY RECORD MODE DEVICES ARE CURRENTLY SUPPORTED.         *\n*                                                                     *\n*        3) DEVICE SUPPORT IS RESTRICTED TO 3270 DATASTREAMS AND      *\n*           NTO (IBM 3767) TYPES.                                     *\n*                                                                     *\n*        4) ANY FIELDS IN THE RPL WORK AREA THAT NEED TO BE ZERO      *\n*           INITIALLY SHOULD BE PLACED AHEAD OF THE I/O AREAS AS      *\n*           THESE ARE NOT INITIALIZED. IF THE AMOUNT TO BE            *\n*           INITIALIZED EXCEEDS 256 BYTES, THE INITIALIZATION AND     *\n*           COPY CODE IN GETRPL AND ERREXIT WILL HAVE TO BE CHANGED.  *\n*                                                                     *\n*        5) NETSOL ASSUMES THAT IT CAN ONLY HAVE ITS LOSTERM EXIT     *\n*           ENTERED FOR TERMINALS WHOSE CID'S CAN BE FOUND IN THE     *\n*           TERMINAL TABLE. A U0008 ABEND WILL OCCUR IF NOT FOUND.    *\n*                                                                     *\n*        6) NETSOL OBTAINS THE SYSTEM ID FOR CHANGING '***OLT**'      *\n*           APPLICATION IDS USING SVC 253. IF THIS FUNCTION CHANGES,  *\n*           NETSOL WILL NEED REVISION.     ???? BCSC GOODIE ????      *\n*                                                                     *\n*        7) BE CAREFUL OF CHANGING CODE THAT SETS BRACKET STATES AS   *\n*           YOU MAY CAUSE ERRORS ON THE 3276 (MUST SEND BCSC106 WITH  *\n*           AND END BRACKET BECAUSE IF THE CLSDST(PASS) FAILS AND WE  *\n*           SEND AN ERROR MESSAGE (BCSC108) TO THE 3276, GET A X'0404'*\n*           WITH A SENSE OF '081B' INDICATING BAD STATE).             *\n*                                                                     *\n*                                                                     *\n*  VERSION:  *********  NETSOL   DC18202                              *\n*                                                                     *\n*  LAST UPDATE: FEB 27, 1979\n*        MINOR FIXES AND CHANGES, 522 ABEND PREVENTION, ETC.     85234\n*          BY G. POSTPISCHIL, EXPERT SYSTEM PROGRAMMING, INC.    85234\n*        SNA AND NTO SUPPORT; MODULE MERGED WITH INTERPRET TABLE 87193\n*        SUPPORT FOR GLOBAL LOGON AND REQUIRED NETSOL LOGON PRIOR TO\n*        APPLICATION CONNECTION. NEWS AND HELP SCREENS ADDED.    88179\n*        MODEL 5, AND USER SPECIFIABLE LOGMODE SUPPORT ADDED     88206\n*        522 ABEND CODE CHANGED TO RUN UNDER SUBTASK IN ORDER TO FREE\n*          STIMER FOR LOGON DELAY TO PREVENT VTAM GOING CPU BOUND AT\n*          SYSTEM START-UP TIME.                                 89261\n*                                                                     *\n*                                                                     *\n*        F O R   F U R T H E R   I N F O R M A T I O N   O N          *\n*          T H I S   P R O D U C T   S E E   T H E                    *\n*              N E T S O L   D O C U M E N T A T I O N                *\n*                                                                     *\n*   PROGRAM OBTAINED FROM THE CONNECTICUT BANK & TRUST TAPE, FILE 19  *\n***********************************************************************\n         TITLE '*********  N E T S O L  -  MAINLINE'\nNETINTAB INTAB ,             INTEGRATED INTERPRET TABLE          87193\nNETINLOG CSECT ,             IMMEDIATELY FOLLOWED BY LOGON CODE  90126\nNETSOL70 CSECT ,\n         ENTRY NETSOL        SOLICITOR ENTRY POINT               87193\n         SPACE 1\n***********************************************************************\n*        NETSOL MAIN-LINE CODE INITIALIZATION                         *\n*        REQUIRES OS/VS2 MVS RELEASE 3.7 + ACF/VTAM (SU 35+40)        *\n***********************************************************************\n         SPACE 1\n         PRINT &PRTSOR                                           85234\nNETSOL   B     STM-NETSOL(0,R15)  JUMP OVER APPL NAME            87193\nNSNAME   DC    AL1(8),CL8'NETSOL70'    LOGON APPLID NAME FOR NETSOL\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'//&SYSTIME/'        ASSEMBLY TIME\nSTM      STM   14,12,12(13)            SAVE REGISTERS\n         LR    R12,R15                 LOAD 1ST BASE REGISTER\n         USING NETSOL,R12,R11,R10      TELL ASSEMBLER\n         LM    R10,R11,RESTBASE        REST OF BASES\n         ST    R13,MAINSAVE+4          CHAIN SAVE AREAS\n         LR    R15,R13\n         LA    R13,MAINSAVE            POINT R13 TO NS SAVE AREA\n         ST    R13,8(,R15)             FORWARD SAVE AREA CHAIN\n         LA    R9,0(,R1)     CLEAN THE PARM LIST POINTER         86065\n         LTR   R9,R9         ANY PARM ?                          86065\n         BZ    NOPARM                                            86065\n         ICM   R9,15,0(R9)   ANY PARM ?                          86065\n         BZ    NOPARM        NO                                  86065\n         SLR   R8,R8                                             86065\n         ICM   R8,3,0(R9)    TEST PARM LENGTH                    86065\n         BNP   NOPARM                                            86065\n         OI    UFLAGS,UFGSYS  ***TEMP***                         86065\nNOPARM   EXTRACT COMMAD,FIELDS=(TIOT)  GET THE TIOT              88185\n         L     R15,COMMAD    GET THE TIOT                        88185\n         CLC   NSNAME+1(6),0(R15)  JOB(STC)NAME/PREFIX SAME ?    88185\n         BNE   GETCOMM       NO                                  88185\n         MVC   NSNAME+1(8),0(R15)  USE FULL JOBNAME AS APPLID    88185\nGETCOMM  EXTRACT COMMAD,FIELDS=(COMM)  GET CSCB POINTER          86065\n         L     R15,COMMAD    GET ECB POINTER                     86065\n         MVC   WAITECBS(4),0(R15)  SAVE COMM. ECB ADDRESS        86065\n         LA    R0,4(,R15)    POINT TO CIB ADDRESS FIELD          86065\n         QEDIT ORIGIN=(0),CIBCTR=2  ALLOW ONE MODIFY AT A TIME   86065\n         TESTAUTH FCTN=1     ARE WE AUTHORIZED ?                 88186\n         BXH   R15,R15,NOTAUTH   NO                              88186\n         SLR   R1,R1         CLEAR ECB ADDRESS                   88186\n         SYSEVENT TRANSWAP   DO \"DONTSWAP\" THE ELEGANT WAY       88186\n         BXLE  R15,R15,NOTAUTH  SKIP IF IT WORKED, ELSE          88186\n         WTO   'BCSC195 SYSEVENT TRANSWAP FAILED',ROUTCDE=11     88186\n         SLR   R1,R1                                             88186\n         SYSEVENT DONTSWAP   TRY A NORMAL DONTSWAP               88186\n         BXLE  R15,R15,NOTAUTH SKIP IF IT WORKED, ELSE           88186\n         WTO   'BCSC195 SYSEVENT DONTSWAP FAILED'                88186\nNOTAUTH  ICM   R0,15,A522TCB  RECURSION ?                        89264\n         BNZ   NOTAGAIN      YES                                 89264\n         IDENTIFY EPLOC=A522NAME,ENTRY=A522ER                    89261\n         ATTACH EPLOC=A522NAME,ECB=A522DONE                      89261\n         ST    R1,A522TCB       SAVE TCB ADDR FOR DETACH         89261\nNOTAGAIN DS    0H                                                89264\n         SPACE 1\n         USING IFGRPL,PTRRPL           => R P L\n         USING ISTDNIB,PTRNIB          => N I B\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE\n*        SPACE 1\n***********************************************************************\n*        OBTAIN SPACE FROM SUBPOOL 2 FOR THE TERMINAL TABLE. THIS     *\n*        TABLE IS USED TO MAINTAIN THE TERMINAL NAME, CID, AND LOGON  *\n*        STATUS FOR ALL TERMINALS CONNECTED TO NETSOL. BY USING THIS  *\n*        TABLE AND PROVIDING ENTRY ADDRESS IN THE RPL USER FIELD, WE  *\n*        SAVE ON HAVING TO DO CID TRANSLATES FOR NAMES.               *\n***********************************************************************\nGETTAB   L     R0,TERMLTAB             GET LENGTH FOR GETMAIN\n         ICM   R0,8,=X'02'             ADD SUBPOOL=2 TO IT\n         GETMAIN R,LV=(0)              GET SPACE FOR TABLE\n         ST    R1,TERMTABS             SAVE STARTING ADDRESS\n         A     R1,TERMLTAB             COMPUTE END ADDRESS\n         ST    R1,TERMTEND             SAVE IT TOO\n         S     R1,RANGEEND-4                                     88185\n         ST    R1,RANGEEND   SET END OF HIGH RANGE               88185\n         XC    TERMTABE,TERMTABE  RESTART TERMINAL LIST          87137\n         XC    CONSRPL,CONSRPL  CLEAR CONSOLE RPL ADDRESS        88192\n         SPACE 1\nRTRYOPEN DS    0H\n         SLR   R15,R15                 CLEAR RETURN-CODE REGISTER\n         OPEN  ACB                     CONNECT NETSOL TO VTAM\n         SPACE 1\n***********************************************************************\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *\n*   ERREXIT IS NOT ENTERED FOR OPEN ERROR.                            *\n***********************************************************************\n         CLI   ACB+X'31',X'52'         HALT IN PROGRESS ?\n         BE    CLSOK                   YES, END THE TASK\n         LTR   R15,R15                 SUCCESSFUL OPEN ?\n         BZ    OPENOK                  YES, ALLOW LOGONS TO HAPPEN\n         SPACE 1\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'58' WHICH CAN HAPPEN IF     *\n*        THE OPERATOR HAS STARTED A SECOND COPY OF NETSOL. IN THIS\n*        CASE, TELL THE OPERATOR ABOUT THE MISTAKE AND TERMINATE\n*        EXECUTION.                                                   *\n***********************************************************************\n         CLI   ACB+X'31',X'58'         APPLID ALREADY IN USE?\n         BNE   OPENA5A                 NO => CHECK NEXT ERROR\n         WTO   MF=(E,LISTWTO6)         LET OPERATOR KNOW\n         B     FREETTE                 FREE TTE TABLE AND END\n         SPACE 1\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'5A' WHICH CAN HAPPEN IF     *\n*        VTAM IS JUST COMING UP AND NETSOL'S APPLID IS NOT YET        *\n*        ACTIVE. IF THIS IS THE CASE, ISSUE A STIMER WAIT FOR\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n***********************************************************************\nOPENA5A  CLI   ACB+X'31',X'5A'         CAN'T OPEN ACB YET ?\n         BE    OPENLOOP                NO, REAL OPEN ERROR\n         SPACE 1\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'5C' WHICH CAN HAPPEN IF     *\n*        VTAM IS DOWN. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n***********************************************************************\n         CLI   ACB+X'31',X'5C'         CAN'T OPEN ACB YET ?\n         BE    OPENLOOP                NO, REAL OPEN ERROR\n         SPACE 1\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'70' WHICH CAN HAPPEN IF     *\n*        NETSOL ABENDS AND IS RE-ATTACHED BY VTAM AND VTAM HAS NOT    *\n*        YET SUCCESSFULLY FINISHED CLEANUP PROCESSING FOR             *\n*        NETSOL'S ACB. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n***********************************************************************\n         CLI   ACB+X'31',X'70'         CAN'T OPEN ACB YET ?\n         BNE   OPENFAIL                NO, REAL OPEN ERROR\nOPENLOOP STIMER WAIT,BINTVL=WAIT1SEC   WAIT 1 SECOND, TRY AGAIN\n         B     RTRYOPEN                GO AND RETRY OPERATION\n         SPACE 1\nOPENOK   L     R7,=A(OPENIDS)                                    86145\n         BALR  R6,R7         INITIALIZE VERSION AND PROGRAM IDS  86145\n         SPACE 1                                                 86012\n***********************************************************************\n*        READ THE INITIALIZATION FILE CONTAINING NETSOL COMMANDS      *\n*        WHICH ESTABLISH AUTO LOGON,WTO MSG DEFAULTS,ETC.             *\n*        AN ASYNC RPL WILL BE USED WHEN PROCESSING THESE INIT CMDS.   *\n***********************************************************************\n*                                                                87256\n*        THIS INSERTION SETS A FLAG TO ENABLE DELAYS IN LOGON EXIT.\n*        THIS PERMITS OTHER JOBS TO RUN WHILE NETSOL IS WRITING THE\n*        INITIAL SCREENS TO A LARGE NUMBER OF CRTS               87256\n*                                                                87256\n         OI    UFLAGS,INITDLAY  SET FOR DELAY BETWEEN LOGONS     87256\n         SLR   R0,R0                                             89261\n         POST  A522CECB,(0)  POST CONTROL ECB                    89261\n         BAL   R14,GETRPL              GET RPL FOR INIT CMD USE.\n         L     R8,=A(READINIT)                                   88185\n         BALR  R14,R8        PROCESS INIT CMDS\n         BAL   R14,RECSUB              NOW REUSE RPL FOR RECEIVE\n         SPACE 1                                                 90140\n*        LOAD THE BUFFER COMPRESSION ROUTINE                     90140\n         XC    COMP3270,COMP3270  CLEAR THE ADDRESS              90140\n         DELETE EPLOC=NMCOMPR                                    90140\n         LOAD  EPLOC=NMCOMPR,ERRET=NOTCMP70                      90140\n         ST    R0,COMP3270   SET COMPRESSION ADDRESS             90140\nNOTCMP70 DS    0H            BYPASS FOR COMPRESSION              90140\n         EJECT\n***********************************************************************\n*        BEFORE ALLOWING LOGONS TO TAKE PLACE ISSUE 10 RECEIVE ANY'S  *\n*        SO WE CAN HANDLE UP TO 10 LOGONS AT A TIME. WHEN THE RECEIVE *\n*        EXIT IS SCHEDULED, IT WILL ALSO RE-ISSUE A RECEIVE ANY WITH  *\n*        A NEW GOTTEN RPL.                                            *\n***********************************************************************\n         SPACE 1\n         LA    R2,9                    # OF RPLS FOR RECEIVES\nGETLOOP  BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE\n         BAL   R14,RECSUB              ISSUE RECEIVE ANY\n         BCT   R2,GETLOOP              LOOP TILL TEN DONE\n         L     PTRRPL,=A(SETLRPL)  POINT TO RPL FOR WORKAREA     86065\n         SPACE 1\n***********************************************************************\n*        ISSUE SETLOGON WITH START OPTION TO ALLOW LOGONS TO TAKE     *\n*        PLACE. ANY LOGONS QUEUED FOR NETSOL WILL NOW DRIVE NETSOL'S  *\n*        LOGON EXIT.                                                  *\n***********************************************************************\n         SPACE 1\nSLOGON   SETLOGON RPL=(PTRRPL),        SYNCH OPERATION. ACT-           X\n               OPTCD=START             IVATE LOGON EXIT.\n         SPACE 1\n***********************************************************************\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.  IF          *\n*   ERREXIT WAS ENTERED, THE VTAM FEEDBACK CODE IN REG 0 WAS          *\n*   PLACED IN REG 15 BEFORE RETURNING TO THE MAINLINE NSI.            *\n*   ERREXIT DID NOT CHANGE THE RETURN CODES TO ACTION CODES.          *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX8                NEED TO REISSUE?\n         BE    SLOGON                  YES.  DO IT\n         LTR   R15,R15                 SETLOGON ACCEPTED ?\n         BNZ   SETLFAIL                NO, BRANCH\n         LTR   R0,R0                   VALID COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*    ALL FURTHER WORK IN NETSOL IS PERFORMED VIA ASYNCHRONOUS EXIT    *\n*    ROUTINES. THE MAINLINE CODE WAITS UPON AN ECB WHICH IS POSTED    *\n*    BY THE TPEND EXIT WHEN VTAM SHUTS DOWN NETSOL.                   *\n*        STIMER ADDED TO PREVENT 522 ABENDS                      85234\n***********************************************************************\n***********************************************************************\n*    ACTION OF NETSOL NOW PROCEEDS BY USE OF EXIT ROUTINES.           *\n*    THE FOLLOWING EXITS ARE SCHEDULED IN RESPONSE TO VTAM EVENTS:    *\n*                                                                     *\n*              TPEND   - VTAM SHUTS DOWN                              *\n*              LOGON   - A TERMINAL IS SIMULATED LOGGED ON TO NETSOL, *\n*                        OR IS PASSED TO NETSOL BY ANOTHER APPLICATION*\n*              LOSTERM - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *\n*                        IS DISCONNECTED (DIAL-LINE), OR 'VARY'ED TO  *\n*                        ANOTHER APPLICATION                          *\n*              RELREQ  - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *\n*                        IS REQUESTED BY ANOTHER APPLICATION          *\n*                                                                     *\n*     RPL EXITS -                                                     *\n*                                                                     *\n*             READEND  - THE OUTSTANDING READ(ANY) HAS BEEN SATISFIED *\n*             SENDEND  - A SEND HAS BEEN POSTED COMPLETE.             *\n*             OPENEND  - AN OPNDST HAS COMPLETED.                     *\n*             PASSEND  - CLSDST(PASS) HAS COMPLETED FOR A LOGON       *\n*                        REQUEST MADE FROM A TERMINAL.                *\n*             WRITEND  - END OF WRITE REQUEST.  WRITE WAS DUE         *\n*                        TO INVALID LOGON FROM THE TERMINAL.          *\n*             CDSTEND1 - CLSDST(RELEASE) COMPLETED.                   *\n***********************************************************************\n         SPACE 1\nWAITLOOP MVI   TIMEECB,0     RESET STIMER ECB                    85235\n         TM    UFLAGS,SHUTDOWN+UFGREST  CLOSE OR RESTART ?       86065\n         BNZ   WAITDONE      YES; KICK OUT                       86065\n*OLD*    STIMER REAL,EXITTIME,BINTVL==A(10*60*100)  WAIT 10 MINS 85234\n         WAIT  ECBLIST=WAITECBS  WAIT FOR TIMER OR FINISH        85234\n         TM    TIMEECB,X'40' TIMER EXPIRED ?                     85234\n         BNZ   WAITTESS      YES                                 85234\n         TTIMER CANCEL       ELSE CANCEL IT                      85234\n         B     WAITTESX                                          87256\nWAITTESS NI    UFLAGS,255-INITDLAY  RESET START-UP DELAY         87256\nWAITTESX TM    FINISECB,X'40'  FINISH POSTED ?                   85234\n         BNZ   WAITDONE      YES; GO TO FINISH UP                86065\n*        IF WE GOT HERE, THE COMMUNICATIONS ECB WAS POSTED.      86065\n*                                                                86065\n         L     R1,WAITECBS   GET THE CSCB COMM. ECB ADDRESS      86065\n         TM    0(R1),X'50'   WAS IT POSTED ?                     86065\n         BZ    WAITLOOP      NO; WAIT SOME MORE                  86065\n         BO    WAITDONE      STOP ISSUED                         86065\n         ICM   R5,15,CONSRPL  GET THE CONSOLE I/O WORK AREA      88192\n         BNZ   CONSGET       OK; INITIALIZED                     88192\n         BAL   R14,GETRPL    ELSE GET ONE                        88192\n         LA    R3,NIBDMPID   OVERLAY NIB FOR TTE                 88192\n         ST    R3,RPLUSFLD   MAKE COMMON LINK                    88192\n         XC    TERMTABL(TERMELEN),TERMTABL  CLEAR IT             88192\n         ST    R5,CONSRPL    REMEMBER THE RPL ADDRESS            88192\n         MVI   TERMFLAG,TERMCONS  FLAG THIS AS A CONSOLE TTE     88192\n         MVI   TERMFLG3,TPRIVY  SET PRIVILEGED FOR ALL COMMANDS  88192\n         L     R9,=A(DDTCONS)  POINT TO DEVICE DEPENDENT VECTOR TABLE\n         ST    R9,TERMDDT    SAVE IT                             88192\n         ST    R5,TERMCRPL   MAKE RPL POINTER                    88192\n         MVC   TERMNAME,=CL8' CONSOLE'  FOR DEBUGGING, ETC.      88192\nCONSGET  L     R2,COMMAD     GET ECB/CIB POINTER                 86065\n         ICM   R1,15,4(R2)   IS THERE A CIB ?                    86065\n         BZ    WAITLOOP      NO ?                                86065\n         USING CIB,R1        DECLARE IT                          86065\n         L     R9,TERMDDT    RELOAD DDT                          88192\n         L     R3,RPLUSFLD   RELOAD TTE                          88192\n         CLI   CIBVERB,CIBMODFY  MODIFY ?                        86065\n         BE    DOCIB         YES                                 86065\n         CLI   CIBVERB,CIBSTART  START ?                         86065\n         BNE   TOSSCIB       NO; IGNORE IT                       86065\nDOCIB    SLR   R15,R15                                           86065\n         ICM   R15,3,CIBDATLN  GET LENGTH OF DATA                86065\n         BNP   TOSSCIB       NONE ?                              86065\n         LR    R2,R15        SAVE LENGTH FOR EDITING             88192\n         LA    R14,CIBDATA   GET DATA                            88192\n         ICM   R15,8,=C' '   SET FOR BLANK FILL                  88192\n         LA    R0,IOAREA     POINT TO INPUT WORK AREA            88192\n         LA    R1,L'IOAREA   MAX LENGTH                          88192\n         LR    R6,R0         SAVE START FOR THE EDIT ROUTINE     88192\n         MVCL  R0,R14        COPY TO RPL INPUT AREA              88192\n         B     INTRPRET      GO TO COMMAND PARSE                 88192\n         SPACE 2                                                 88192\n***********************************************************************\n*                                                                     *\n*        MSG 'TEXT' - ADD A SHORT MESSAGE TO SCREENS 12, 13 AND 20    *\n*                                                                     *\n***********************************************************************\nCONSMSG  L     R14,GPDATAP   GET DATA\n         LH    R15,GPDATAL   GET LENGTH OF DATA\n         LTR   R15,R15       ANY DATA ?                          88220\n         BNP   CONSMSG2      NO; JUST CLEAR                      88220\nCONSMSG1 CLI   0(R14),C' '   BLANK OR NULL ?                     88220\n         BH    CONSMSG2      YES                                 88220\n         LA    R14,1(,R14)                                       88220\n         BCT   R15,CONSMSG1  SKIP LEADING BLANKS                 88220\nCONSMSG2 ICM   R15,8,=CL8' '   SET BLANK FILL                    86066\n         L     R0,=A(S32MUS12)                                   86066\n         LA    R1,L'S32MUS12                                     86066\n         MVCL  R0,R14        MAKE MESSAGE                        86066\n         L     R14,=A(S32MUS12)                                  86066\n         MVC   S32MUS13-S32MUS12(L'S32MUS12,R14),0(R14)          86068\n         L     R1,=A(S32MUS20)                                   88179\n         MVC   S32MUS20-S32MUS20(L'S32MUS12,R1),0(R14)           88179\n         L     R15,=A(S3EMUS12)                                  86066\n         MVC   0(L'S32MUS12,R15),0(R14)                          86066\n         MVC   S3EMUS13-S3EMUS12(L'S3EMUS12,R15),0(R14)          86068\n         L     R1,=A(S3EMUS20)                                   88179\n         MVC   S3EMUS20-S3EMUS20(L'S32MUS12,R1),0(R14)           88179\n         L     R15,=A(MD5MUS12)                                  88206\n         MVC   0(L'S32MUS12,R15),0(R14)                          88206\n         MVC   MD5MUS13-MD5MUS12(L'MD5MUS12,R15),0(R14)          88206\n         L     R1,=A(MD5MUS20)                                   88206\n         MVC   MD5MUS20-MD5MUS20(L'S32MUS12,R1),0(R14)           88206\n         TM    UFLAGS,INIT   START-UP ?                          90054\n         BNZ   SENDMSG4      RESPOND WITH GARBAGE MESSAGE        90054\n         B     CONSREST      SET TO RESTART                      88192\n         SPACE 1                                                 88192\n*        SET UNRESTRICTED (EXCEPT LOGON SCREENS) RUNNING MODE    88192\nCONSULOK TM    UFLAGS,UFGSYS  IN SYSTEMS MODE ?                  86065\n         BZ    OKCIB         YES; NO CHANGE                      86065\n         NI    UFLAGS,255-UFGSYS  RESET                          86065\n*        RESTART THE NETSOL TERMINAL ACQUISITION (FOR FORCED APPLID\n*          ROUTING AFTER AN APPLICATION STARTS UP - MODIFY COMMAND\n*          GETS ISSUED BY TSSO COMMAND SYSTEM.                   88192\n*                                                                88192\nCONSREST OI    UFLAGS,UFGREST+UFGIGNER   RESTART                 86065\n         B     OKCIB                                             86065\n*        PERMIT USE OF VTAM BY SYSTEMS STAFF ONLY (MAINTENANCE, ETC.)\nCONSLOCK TM    UFLAGS,UFGSYS  ALREADY IN SYSTEMS MODE ?          86065\n         BNZ   OKCIB         YES; LEAVE IT ALONE                 86065\n         OI    UFLAGS,UFGSYS+UFGREST+UFGIGNER   RESTART          86065\nOKCIB    L     R2,COMMAD     GET COMM AREA BACK                  88192\n         L     R1,4(,R2)     REGAIN CIB                          88192\n         SLR   R0,R0                                             86065\n         IC    R0,CIBCONID                                       86065\n         WTO   'OK',MCSFLAG=REG0                                 86065\nTOSSCIB  LA    R0,4(,R2)     ORIGIN                              86065\n         L     R1,4(,R2)     CIB ADDRESS                         86065\n         QEDIT ORIGIN=(0),BLOCK=(1)  FREE IT                     86065\n         B     WAITLOOP      GO FOR MORE                         86065\n         SPACE 1                                                 88192\nCONSSEND L     R1,SENDLEN    GET TEXT LENGTH                     88192\n         LA    R1,4(,R1)     PLUS RDW LENGTH                     88192\n         STCM  R1,3,IOAREA   MAKE RDW LENGTH                     88192\n         STCM  R1,12,IOAREA+2  ZERO FLAGS                        88192\n         L     R2,COMMAD     GET COMM AREA BACK                  88192\n         L     R1,4(,R2)     REGAIN CIB                          88192\n         SLR   R0,R0                                             88192\n         IC    R0,CIBCONID   GET CONSOLE ID                      88192\n         WTO   ,MF=(E,IOAREA),MCSFLAG=REG0  RESPOND TO CONSOLE   88192\n         B     TOSSCIB       FREE THE CIB                        88192\n         SPACE 2                                                 89261\n         PUSH  USING                                             89261\n         DROP  ,                                                 89261\n         USING NETSOL,R12,R11,R10      PASSED BY CALLER          89261\n         USING A522ER,R12                                        89261\nA522ER   STM   R14,R12,12(R13)                                   89261\n         LR    R12,R15        LOAD NEW TEMPORARY BASE            89261\nA522UP   STIMER REAL,A522EXIT,BINTVL=A522TIME   START THE CLOCK  89261\n         WAIT  ECBLIST=A522ECBS  WAIT FOR SOMETHING              89261\n         TM    A522TECB,X'40'  TIMER ECB POSTED ?                89261\n         BNZ   A522TMUP      YES; RESET INITIALIZATION DELAY     89261\n         TTIMER CANCEL       CANCEL TIME REQUEST                 89261\n         B     A522CNTL      CHECK FOR ACTION                    89261\nA522TMUP NI    UFLAGS,255-INITDLAY  NO MORE DELAYS IN STARTUP    89261\n         MVI   A522TECB,0    RESET TIMER ECB                     89261\nA522CNTL TM    A522CECB,X'40'  CONTROL ACTION REQUIRED ?         89261\n         BZ    A522UP        NO; WAIT AGAIN                      89261\n         TM    A522CECB,X'3F'  RESTART REQUEST ?                 89261\n         BM    A522QUIT      NO                                  89261\n         MVI   A522CECB,0    RESET                               89261\n         B     A522UP        AND RESTART TIMER                   89261\n         SPACE 1                                                 89263\nA522QUIT LM    R14,R12,12(R13)  RETRIEVE REGISTERS               89261\n         SLR   R15,R15                                           89261\n         BR    R14           QUIT                                89261\n         SPACE 1                                                 89261\n         DROP  ,                                                 89261\n         USING A522EXIT,R15  DECLARE TEMPORARY BASE              89261\nA522EXIT POST  A522TECB,0    POST TIME INTERVAL COMPLETE         89261\n         BR    R14           RETURN TO CALLER                    89261\n         SPACE 1                                                 89261\nA522ECBS DC    A(A522CECB),X'80',AL3(A522TECB)                   89261\nA522CECB DC    F'0'          CONTROL ECB                         89261\nA522TECB DC    F'0'          STIMER ECB                          89261\nA522TCB  DC    A(0)              SUBTASK TCB ADDRESS             89261\nA522DONE DC    A(0)              SUBTASK ECB                     89261\nA522TIME DC    A(100*60*10)      A522 10 MINUTES                 89261\nA522NAME DC    CL8'OMIT522S'                                     89261\n         POP   USING                                             89261\n         SPACE 1                                                 85234\n         PUSH  USING                                             85234\n         DROP  ,                                                 85234\n         USING EXITTIME,R15  DECLARE TEMPORARY BASE              85234\nEXITTIME POST  TIMEECB,0     POST TIME INTERVAL COMPLETE         85234\n         BR    R14           RETURN TO CALLER                    85234\n         POP   USING                                             85234\n         SPACE 1                                                 85234\nWAITECBS DC    A(0,TIMEECB),X'80',AL3(FINISECB)  ECB LIST        86065\nTIMEECB  DC    F'0'          STIMER ECB                          85234\nA522POST DC    F'0'          A522 SUBTASK COMPLETION ECB         89261\nCOMMAD   DC    A(0)          EXTRACT COMM RESULT                 86065\nCONSRPL  DC    A(0)          ADDRESS OF RPL/TTE/DDT FOR CONSOLE I/O\n         EJECT\n***********************************************************************\n*        EXECUTION CONTINUES HERE WHEN ECB IS POSTED BY TPEND EXIT.   *\n***********************************************************************\n         SPACE 1\nWAITDONE SLR   R15,R15                 ZERO RC REG FOR CLOSE\n         TM    UFLAGS,UFGREST  RESTART ?                         86065\n         BNZ   *+8           YES; DON'T SET SHUTDOWN             86065\n         OI    UFLAGS,SHUTDOWN+UFGIGNER  INHIBIT ERRORS          86065\n         CLOSE ACB                     RELEASE CONNECTION WITH\n         SPACE 1\n***********************************************************************\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *\n*   ERREXIT IS NOT ENTERED FOR CLSDSTERROR.                           *\n***********************************************************************\n         SPACE 1\n         LTR   R15,R15                 DID THE CLOSE GO?\n         BZ    CLSOK                   YES, EXIT\n         CLI   ACB+X'31',X'42'         CLOSE COMPLETE?\n         BE    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         WTO MF=(E,LISTWTO1)           INFORM OPERATOR\n         SPACE 1\n***********************************************************************\n*        SINCE WE DON'T KNOW HOW MANY RPLS ARE OUTSTANDING (MAY BE    *\n*        MORE THAN 10), WE FREE THE WHOLE SUBPOOL OF RPLS AND DO THE  *\n*        SAME FOR THE TERMINAL TABLE AS WELL.                         *\n***********************************************************************\n         SPACE 1\nCLSOK    FREEMAIN R,SP=1               FREE DYNAMIC RPL SPACE\n         SPACE 1\nFREETTE  FREEMAIN R,SP=2               FREE TERMINAL TABLE SPACE\n         TM    UFLAGS,SHUTDOWN  FORCED DOWN ?                    86065\n         BNZ   FREETERM      YES; QUIT                           86065\n         TM    UFLAGS,UFGREST  RESTART WITH DIFFERENT MODE ?     86065\n         BZ    FREETERM      NO                                  86065\n         NI    UFLAGS,255-UFGREST-UFGIGNER   RESET               86065\n         B     NOPARM        RESTART FROM BEGINNING              86065\n         SPACE 1\n         SPACE 1\nFREETERM ICM   R2,15,A522TCB   DID WE ATTACH 522 SUBTASK ?       89261\n         BZ    FREEMAIN      NO; TERMINATE MAIN TASK             89261\n         ICM   R0,8,=X'01'   POST SUB-TASK TERMINATION           89261\n         POST  A522CECB,(0)                                      89261\n         WAIT  ECB=A522DONE  WAIT FOR RESPONSE                   89261\n         DETACH A522TCB      GET RID OF SUBTASK                  89261\nFREEMAIN L     R13,MAINSAVE+4          FIND INPUT SAVE AREA      89261\n         SLR   R14,R14                 CLEAR FORWARD SAVE\n         ST    R14,8(,R13)             AREA CHAIN PTR\n         LM    R14,R12,12(R13)         LOAD INPUT REGS\n         SLR   R15,R15                 RCODE=0 FOR NORMAL RTN\n*        RETURN\n         BR    14                      RETURN TO CALLER OR ATTACHER\n         SPACE 2                                                 90120\n***********************************************************************\n*        THE FOLLOWING CODE IS BRANCHED TO FROM THE MAIN-LINE CODE,   *\n*        EXIT CODE, AND FROM THE ERREXIT ROUTINE.  THE ONLY ACTION    *\n*        TAKEN SINCE THE CASES ARE 'SHOULD NOT OCCUR' CONDITIONS, IS  *\n*        TO ABNORMALLY TERMINATE NETSOL WITH A REASON CODE IN         *\n*        DUMPFLAG AND CAUSE A DUMP TO BE TAKEN.                       *\n***********************************************************************\n         SPACE 1\nOPENFAIL DS    0H                      OPEN-ACB IN MAIN-LINE FAILED\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         MVI   DUMPFLAG,OPENCODE       SAVE NETSOL DUMP CODE\n         B     DUMP                    BRANCH\n         SPACE 1\nSETLFAIL DS    0H                      SETLOGON IN MAIN-LINE FAILED\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         MVI   DUMPFLAG,SETLCODE       SAVE NETSOL DUMP CODE\n         B     DUMP                    BRANCH\n         SPACE 1\nSNOCCUR  DS    0H                      REQUEST FAILED BECAUSE\n*                                       OF AN INVALID CONTROL\n*                                       BLOCK OR OTHER CON-\n*                                       DITION WHICH SHOULD\n*                                       NOT OCCUR\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         CLOSE ACB                     AVOID OPEN FAILURE ON\n*                                      RE-DISPATCH OF SUBTASK\n         MVI   DUMPFLAG,CBLKCODE       SAVE NETSOL DUMP CODE\n         B     DUMP\n         SPACE 1\nTOOSMALL STM   R0,R15,SNOREGS          SAVE REGS\n         MVI   DUMPFLAG,TABLTRBL       TROUBLE WITH TTE\n*NEXT*   B     DUMP\n         SPACE 1\nDUMP     DS    0H                      TERMINATE WITH A DUMP\n         LA    R6,SNOREGS    POINT TO SAVED REGISTERS            91170\n         LA    R5,2          SET FOR TWO LINES                   91170\nSTABRLP  LA    R4,GENREG0    SET FIRST OUTPUT ADDRESS            91170\n         LA    R3,2          SET FOR TWO GROUPS OF FOUR          91170\nSTABRLP2 LA    R2,4          SET FOR FOUR REGISTERS              91170\nSTABRLP3 UNPK  0(9,R4),0(5,R6)  UNPACK A REGISTER                91170\n         TR    0(8,R4),HEXTAB-C'0'     MAKE EBCDIC               91170\n         MVI   8(R4),C' '    SEPARATOR                           91170\n         LA    R4,9(,R4)     NEXT OUTPUT ADDRESS                 91170\n         LA    R6,4(,R6)     NEXT REGISTER                       91170\n         BCT   R2,STABRLP3   DO NEXT REGISTER                    91170\n         LA    R4,1(,R4)     INTERGROUP GAP                      91170\n         BCT   R3,STABRLP2   DO NEXT GROUP                       91170\n         WTO   MF=(E,GENREGS)   WRITE TO CONSOLE                 91170\n         MVC   GENREGNM+3(3),=C'8-F'   IDENTIFY SECOND LINE      91170\n         BCT   R5,STABRLP    DO SECOND LINE                      91170\n         SLR   R1,R1                   PUT REASON CODE IN REG 1\n         IC    R1,DUMPFLAG\n         SPACE 1\n         ABEND (1),DUMP\n         SPACE 1                                                 85235\nMAINSAVE DC    18F'0'                  SAVE AREA FOR MAINLINE\nRESTBASE DC    A(NETSOL+8192,NETSOL+4096) REST OF BASE REG VALUES\nWAIT1SEC DC    F'100'                  WAIT TIME OF 1.00 SECS\nTERMTABS DC    A(0)                    START OF TERMINAL TABLE  FOR\nTERMTABI DC    A(TERMELEN)             INDEX VALUE              BXLE\nTERMTABE DC    A(0)                    LAST ENTRY USED ADDRESS  USE\nTERMTEND DC    A(0,TERMELEN)           END OF TABLE + 1\nRANGEEND DC    A(0)          END OF TABLES                       88185\nTERMLTAB DC    A(1024*TERMELEN)        SIZE OF TABLE (ENTRIES*LENGTH)\n@MODETAB DC    A(0)          ADDRESS OF MODE TABLE (ISTINCLM)    88213\nNMCOMPR  DC    CL8'COMP3270'  COMPRESSION ROUTINE                90140\nCOMP3270 DC    A(0)          ADDRESS OF COMPRESSION ROUTINE      90140\nHEXTAB   DC    C'0123456789ABCDEF'  HEX CONVERSION TABLE         91170\nGENREGS  DC    Y(GENREGND-*,0)                                   91170\nGENREGNM DC    C'GR 0-7  '                                       91170\nGENREG0  DC    CL8' ',C' ',CL8' ',C' ',CL8' ',C' ',CL8' ',CL2' ' 91170\nGENREG4  DC    CL8' ',C' ',CL8' ',C' ',CL8' ',C' ',CL8' '        91170\nGENREGND DC    C' '          EXTRA FOR UNPACK                    91170\nVTAMVERL DC    CL2' '        VTAM VERSION/RELEASE (CHAR)         92221\n         TITLE '*********  N E T S O L  - GETPARM SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*    GETPARM LOCATES THE NEXT TEXT UNIT IN THE COMMAND BUFFER.        *\n*                                                                     *\n*    THIS TEXT UNIT IS VALIDATED FOR:                                 *\n*         A) MAXIMUM LENGTH                                           *\n*         B) REQUIRED PARAMETER                                       *\n*                                                                     *\n*    INPUT : R1  - A(PARAMETER OPTION LIST)                           *\n*            R2  - A(OUTPUT MSG BUFFER)                               *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : R1  - A(TEXT UNIT) OR GARBAGE IF ERROR                   *\n*            R15 - LENGTH OF TEXT UNIT                                *\n*                                                                     *\n*   RETURN : 0(R14) - VALID TEXT UNIT FOUND                           *\n*            4(R14) - NO TEXT UNIT FOUND (IF PARAMETER IS OPTIONAL)   *\n*            8(R14) - ERROR DETECTED WHILE PROCESSING TEXT UNIT       *\n*                                                                     *\n***********************************************************************\nGETPARM  DS    0H\n         SPACE 1\n         ST    R1,GPPARM          SAVE A(PARM OPTION LIST)\n         SPACE 1\n*        CHECK FOR NO DATA LEFT IN COMMAND BUFFER\n         SPACE 1\n         LH    R6,GPDATAL         GET LENGTH OF REMAINING DATA\n         LTR   R6,R6              ANY DATA LEFT?\n         BZ    GPNODATA           NO => BR TO HANDLE\n         SPACE 1\n*        FIND NEXT TEXT UNIT IN COMMAND BUFFER\n         SPACE 1\n         L     R7,GPDATAP         LOAD A(CURRENT OFFSET IN CMD BUFFER)\nGRPLOOP1 CLI   0(R7),X'40'        FIND\n         BE    GRPBUMP1             FIRST                        88179\n         CLI   0(R7),C'/'    FUNNY FIELD SEPARATOR ?             88179\n         BE    GRPBUMP1      YES; SKIP IT                        88179\n         CLI   0(R7),C','    FUNNY FIELD SEPARATOR ?             88185\n         BE    GRPBUMP1      YES; SKIP IT                        88185\n         CLI   0(R7),X'11'   START FIELD ?                       88179\n         BNE   GPNONBLK      NO; PROCESS AS PARAMETER            88179\n         LA    R7,2(R7,0)    BUMP OVER ADDRESS                   88179\n         SH    R6,*-2        ADJUST LENGTH                       88179\n         BNP   GPNODATA      NOTHING LEFT                        88179\nGRPBUMP1 LA    R7,1(,R7)              NON                        88179\n         BCT   R6,GRPLOOP1              BLANK\n         B     GPNODATA                   CHARACTER\n         SPACE 1\n*        FIND END OF TEXT UNIT\n         SPACE 1\nGPNONBLK LR    R1,R7              SET TEXT UNIT PTR\nGPLOOP2  CLI   0(R7),X'40'        FIND\n         BE    GPGOTIT              LAST\n         CLI   0(R7),X'11'  ANOTHER START FIELD ?                88179\n         BE    GPGOTIT       YES; END OF PRIOR FIELD             88179\n         CLI   0(R7),C'/'    OTHER FIELD END ?                   88179\n         BE    GPGOTIT                                           88179\n         CLI   0(R7),C','    FUNNY FIELD SEPARATOR ?             88185\n         BE    GPGOTIT       YES; SKIP IT                        88185\n         LA    R7,1(,R7)              NON-BLANK\n         BCT   R6,GPLOOP2               CHARACTER\n         SPACE 1\n*        NEXT TEXT UNIT HAS BEEN FOUND\n         SPACE 1\nGPGOTIT  ST    R7,GPDATAP         SAVE CURRENT OFFSET IN CMD BUFFER\n         STH   R6,GPDATAL         SAVE LENGTH OF REMAINING DATA\n         SR    R7,R1              CALC LENGTH OF THE TEXT UNIT\n         LR    R15,R7               & MOVE TO REG 15\n         SPACE 1\n*        VALIDATE THE PARAMETER OPTIONS FOR THE TEXT UNIT\n         SPACE 1\n         L     R6,GPPARM          LOAD A(OPTION LIST)\n         CLI   0(R1),C'*'    POSSIBLE COMMENT ?                  88220\n         BNE   GPCHKOPT      NO                                  88220\n         TM    GPFLAG(R6),GPCOM  COMMENT ALLOWED ?               88220\n         BNZ   GPNODATA      YES; END OF INPUT                   88220\nGPCHKOPT CH    R15,GPLEN(,R6)     TU > MAX ALLOWED?\n         BNH   GPCHK10            NO => BR TO NEXT CHECK\n         MVC   0(L'GPMSG1,R2),GPMSG1 MOVE ERR MSG TO BUFFER\n         CH    R15,=H'8'          MOVE\n         BNH   *+8                  MAX 8\n         LA    R15,8                  CHARACTERS\n         BCTR  R15,0                    OF TEXT UNIT\n         EX    R15,GPEX1                  TO ERROR MSG\n         LA    R1,L'GPMSG1(,R2)   POINT TO END OF ERROR MSG\n         B     GPERRTXT           BR TO MOVE KEYWORD TO MSG\n         SPACE 1\nGPNODATA SLR   R15,R15            INDICATE NO TEXT UNIT\n         L     R6,GPPARM          LOAD A(OPTION LIST)            88220\nGPCHK10  LTR   R15,R15            WAS THERE A TEXT UNIT?\n         BNZ   GPXTYP        YES; NOW CHECK TYPING RESTRICTIONS  88220\n         TM    GPFLAG(R6),GPOPT   WAS PARAMETER OPTIONAL?\n         BNZ   GPXZERO            YES => EXIT NO PARM\n         MVC   0(L'GPMSG2,R2),GPMSG2 NO => MOVE ERR MSG\n         LA    R1,L'GPMSG2(,R2)   POINT TO END OF ERROR MSG\n         SPACE 1\nGPERRTXT LH    R7,GPTEXTL(,R6)    GET LENGTH OF TEXT IN OPT LIST\n         BCTR  R7,0               DECREMENT FOR MOVE\n         EX    R7,GPEX2           ADD OPTION LIST TEXT TO ERR MSG\n         SPACE 1\n         B     8(,R14)            TAKE ERROR RETURN\n         SPACE 1\nGPXZERO  B     4(,R14)            RETURN WITH NO TEXT UNIT\n         SPACE 1\nGPXTYP   TM    GPFLAG(R6),GPNUM  NUMERIC ONLY ?                  88220\n         BZ    GPXFND        NO; RETURN                          88220\n         LR    R0,R15        COPY LENGTH                         88220\n         LR    R7,R1         COPY TEXT START                     88220\nGPXTYPN  CLI   0(R7),C'0'    DIGIT ?                             88220\n         BL    GPNNUM        NO; FAIL                            88220\n         CLI   0(R7),C'9'    IN RANGE ?                          88220\n         BNH   GPXTYPNS                                          88220\nGPNNUM   MVC   0(25,R2),=C'PARAMETER MUST BE NUMERIC'            88220\n         LA    R1,25(,R2)    POINT TO END OF MESSAGE             88220\n         B     8(,R14)       TAKE ERROR RETURN                   88220\nGPXTYPNS LA    R7,1(,R7)                                         88220\n         BCT   R0,GPXTYPN    TRY NEXT                            88220\nGPXFND   BR    R14                RETURN WITH TEXT UNIT FOUND\n         SPACE 2\nGPEX1    MVC   0(0,R2),0(R1)      MOVE TEXT UNIT TO ERROR MSG\nGPEX2    MVC   0(0,R1),GPTEXT(R6) MOVE OPT LIST TEXT TO ERROR MSG\nGPMSG1   DC    C'XXXXXXXX IS TOO BIG FOR '\nGPMSG2   DC    C'MISSING PARAMETER: '\n         TITLE '*********  N E T S O L  - INIT MSG13 SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*    INITMSG4 LOCATES AND INITIALIZES THE MSG4 OUTPUT BUFFER.         *\n*                                                                     *\n*    INPUT : R9  - A(DDT)                                             *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : R2  - A(MSG04 OUTPUT BUFFER)                             *\n*                                                                     *\n***********************************************************************\nINITMSG4 DS    0H\n         SPACE 1\n         L     R2,DDTM4OFS        GET A(MSG04)\n         LH    R1,DDTM4L          LOAD LENGTH OF MSG04 BUFFER\n         MVI   0(R2),X'40'        INSERT 1ST BLANK\n         BCTR  R1,0               DECREMENT LENGTH\n         BCTR  R1,0               DECREMENT LENGTH\n         EX    R1,INITM4X         INIT REST OF BUFFER\n         SPACE 1\n         BR    R14\n         SPACE 2\nINITM4X  MVC   1(0,R2),0(R2)      PROPAGATE BLANK THROUGHOUT BUFFER\n         SPACE 1                                                 86065\n*        SYSTEMS RESTRICTION RELATED ROUTINES                    86065\n*                                                                86065\nSETPASON BAL   R14,UTERMOF   RESET PRIOR LOGON                   88179\n         AIF   ('&LOCAL' NE 'PID').NOPASON                       92300\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR WORK AREA        88179\n         MVC   A$SBUFR,TERMLOUD                                  88179\n         MVC   A$SID,=C'A$RB'  IDENTIFY                          88179\n         MVC   A$SFCTN(3),=AL1(A$SFLOUD,A$SONL,A$SAKEY)          88179\n         BAL   R14,INITMSG4  GET MESSAGE BUFFER                  88179\n         MVC   A$SERMSG,=A(ERRMSG)   STASH ERROR MESSAGE ADDRESS 88199\n         MVC   A$SACCT,TERMNAME  COPY TERMINAL ID                88179\n         ICM   R0,15,TERMLOUD  ALREADY HAVE A LOUD ?             88179\n         BNZ   PONHLOUD      YES                                 88179\n         LA    R1,A$SVCRB    GET PARM LIST                       88179\n         SVC   249           CALL ACCOUNTING SVC                 88179\n         BXH   R15,R15,POPERMSG  DO ERROR MESSAGE PROCESSING     88179\n         MVC   TERMLOUD,A$SBUFR  SAVE THE LOUD ADDRESS           88179\nPONHLOUD OI    A$SCNTL,A$SBUILD  SHOW LOUD ADDRESS PRESENT       88179\n         L     R4,TERMLOUD   LOAD THE LOUD                       88179\n         USING A$LOUD,R4     DECLARE IT                          88179\n         MVC   A$SACCT,=CL8' '                                   88179\n         MVC   A$SUID,=CL8' '                                    88179\n         MVC   A$SPSWD,=CL8' '                                   88179\n         LA    R1,PWUID      SET FOR USER-ID                     88179\n         BAL   R14,GETPARM   GET IT                              88179\n         B     *+12          FOUND                               88179\n         B     BAREPSWD      MISSING OPERAND - ISSUE LOGON SCRN  89066\n         B     POPPARM       INVALID PARM                        88179\n         BCTR  R15,0         SET EXECUTE LENGTH                  88179\n         LA    R14,A$SUID                                        88179\n         EX    R15,POPMVC    MOVE PARAMETER                      88179\n         MVC   A$SFCTN(3),=AL1(A$SFVALD,0,A$SUKEY+A$SBUILD)      88179\n         LA    R1,PWPSWD     GET PASSWORD                        88179\n         BAL   R14,GETPARM   LOOK FOR IT                         88179\n         B     *+12          OK                                  88179\n         B     POPPARM       INVALID                             88179\n         B     POPPARM       INVALID                             88179\n         BCTR  R15,0                                             88179\n         LA    R14,A$SPSWD                                       88179\n         EX    R15,POPMVC    MOVE PARM                           88179\n         LA    R1,PWACCT     TEST FOR ACCOUNT                    88186\n         BAL   R14,GETPARM   LOOK FOR IT                         88186\n         B     *+12          OK                                  88186\n         B     PONACSVC      MISSING; ISSUE SVC WITHOUT IT       88186\n         B     POPPARM       INVALID                             88179\n         BCTR  R15,0                                             88179\n         LA    R14,A$SACCT                                       88179\n         EX    R15,POPMVC    MOVE PARM                           88179\n         OI    A$SCNTL,A$SAKEY  SHOW ACCOUNT SUPPLIED            88186\nPONACSVC LA    R1,A$SVCRB                                        88179\n         SVC   249                                               88179\n         BXH   R15,R15,POPERMSG                                  88179\nPONLON   BAL   R14,UTERM     SET AUTHORIZATION AND LOGON         88185\n         TM    TERMFLG3,TPRIVY  PRIVILEGED ?                     88192\n         BNZ   PONOPEN       YES                                 88192\n         TM    UFLAGS,UFGSYS SYSTEMS ONLY ?                      88192\n         BZ    PONOPEN       NO; PROCEED                         88192\n         MVC   0(35,R2),=C'SIGN-ON restricted to systems staff'  88192\n         B     PONERR4       JOIN COMMON                         88192\nPONOPEN  TM    A$USUBFG,A$USFTSO+A$USFCIC+A$USFWYL+A$USFEXH+A$USFNET+A$*\n               USFOTH        ALLOWED ON-LINE SERVICES ?          88192\n         BNZ   PONTSUB       YES; SEE IF ONE ONLY                88179\n         MVC   0(40,R2),=C'MSG772 USER NOT ALLOWED ON-LINE SERVICES'\nPONERR4  BAL   R14,UTERMOF   RESET LOGON AGAIN                   88192\n         B     SENDMSG4      WRITE ERROR MESSAGE TO USER         88185\n         SPACE 1                                                 92320\nPONTSUB  BAL   R14,UTERMAP   SEE IF APPLICATION IS FORCED        88179\n         L     R7,=A(OPENEND)  SET BASE FOR AUTOTIME             90141\n         TM    TERMFLG3,TFAPL  FORCED APPLICATION ?              88220\n         BNZ   AUTOTIME-OPENEND(R7)  YES; INVOKE IT              88220\n         SPACE 1                                                 88185\nPONANY   LH    R2,GPDATAL    GET LENGTH OF BUFFER                88311\n         LTR   R2,R2         ROOM FOR TEXT ?                     88311\n         BNP   PONSCRN       NO                                  88311\n         L     R6,GPDATAP    GET DATA BUFFER LEFT                88311\nPONMORE  CLI   0(R6),C' '    ANY MORE TEXT ?                     88311\n         BH    INTRPRET      YES; PARSE IT                       88311\n         LA    R6,1(,R6)                                         88311\n         BCT   R2,PONMORE    TRY AGAIN                           88311\n.NOPASON SPACE 1                                                 91195\nPONSCRN  TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BNZ   RESEND        YES; REWRITE FULL SCREEN            88179\n         LA    R0,MSG15      SHOW UNLOCKED                       86065\n         B     SENDMSG                                           86065\nPOPMVC   MVC   0(0,R14),0(R1)  MOVE PARM                         88179\nPOPERMSG L     R15,A$SERMSG  GET ERROR MESSAGE ADDRESS           88199\n         OC    0(L'SINM4OF,R2),4(R15)  MOVE MESSAGE TEXT         88199\nPOPPARM  B     SENDMSG4      WRITE ERROR MESSAGE TO USER         88185\n         SPACE 1                                                 88179\nPWUID    $GP   8,'USER-ID',GPNULL+GPOPT  (REWRITE IF MISSING)    89066\nPWPSWD   $GP   8,'PASSWORD',GPNULL                               88179\nPWACCT   $GP   8,'ACCOUNT',GPOPT+GPCOM                           88179\nPWAUTO   $GP   6,'AUTO LOGON',GPOPT+GPCOM                        88179\n         SPACE 1                                                 88185\nUTERMAP  DS    0H                                                91195\n         AIF   ('&LOCAL' NE 'PID').NOUTRMN                       92300\n         LA    R15,PONAPTAB  GET TABLE OF FORCED APPLICATIONS    88179\n         LA    R0,(PONAPEND-PONAPTAB)/(PONAPTA2-PONAPTAB) # TO CHECK\nPONAPLUP CLC   A$USUBFG,0(R15)  MATCH ?                          88179\n         BE    PONAPFOR      YES; FORCED APPLICATION LOGON       88179\n         LA    R15,PONAPTA2-PONAPTAB(R15)  NEXT ENTRY            88179\n         BCT   R0,PONAPLUP   TRY IT                              88179\n         BR    R14           RETURN WITHOUT A MATCH              88179\nPONAPTAB DC    AL1(A$USFTSO),CL8'TSO'  FORCED LOGON TABLE        88179\nPONAPTA2 DC    AL1(A$USFWYL),CL8'WYLBUR'                         88179\n         DC    AL1(A$USFEXH),CL8'EXHI'                           88179\n         DC    AL1(A$USFCIC),CL8'CICS'                           88179\nPONAPEND EQU   *                                                 88179\n         SPACE 1                                                 88179\nPONAPFOR CLI   A$USUBFG,A$USFCIC  CICS LOGON ?                   88179\n         BE    PONAPCIC      YES; CHECK FURTHER                  88179\n         MVC   TERMAPPL,1(R15)  MOVE THE APPLICATION NAME        88179\n         OI    TERMFLG3,TFAPL  SET FORCED APPLICATION            88220\n         BR    R14           RETURN WITH APPLID SET              88179\nPONAPCIC CLI   A$UCICNM,C' ' FORCED NAME ?                       88179\n         BNHR  R14           NO                                  88179\n         CLI   A$UCICNM+8,C' '  MORE THAN ONE ?                  88179\n         BH    R14           YES; LET USER SPECIFY               88179\n         LA    R0,8                                              88179\n         LA    R15,A$UCICNM                                      88179\nPONACLUP CLI   0(R15),C' '   BIGGER THAN A BLANK ?               88179\n         BNH   PONACLOK      NO; END OF NAME                     88179\n         CLI   0(R15),C'*'   MATCH ANY RESIDUAL ?                88186\n         BER   R14           YES; NO SPECIFIC NAME               88186\n         CLI   0(R15),C'?'   SPECIAL CHARACTER ?                 88186\n         BER   R14           YES; NO SPECIFIC NAME               88186\n         LA    R15,1(,R15)                                       88179\n         BCT   R0,PONACLUP   TRY AGAIN                           88179\nPONACLOK MVC   TERMAPPL,A$UCICNM  MAKE NAME                      88179\n         OI    TERMFLG3,TFAPL  SET FORCED APPLICATION            88220\n.NOUTRMN BR    R14           RETURN WITH APPLID SET              88179\n         SPACE 1                                                 88185\nUTERM    OI    TERMFLG3,TFLON  SHOW USER LOGGED ON               88179\n         AIF   ('&LOCAL' NE 'PID').NOUTER1                       92300\n         TM    A$UPRIVY,A$UPFSYS  SYSTEMS PRIVILEGE ?            88179\n         BZ    *+8           NO                                  88179\n.NOUTER1 OI    TERMFLG3,TPRIVY  YES; FULL AUTHORIZATION          88179\n         AIF   ('&LOCAL' NE 'PID').NOUTER2                       92300\n         TM    A$UPRIVY,A$UPFACT+A$UPFOPE  SUPPORT ?             88179\n         BNO   *+8           NO                                  88179\n         OI    TERMFLG3,TSUPP  SET TECHNICAL SUPPORT             88179\n.NOUTER2 BR    R14           RETURN TO CALLER                    88185\n         SPACE 1                                                 86065\nUTERMOF  XC    TERMAPPL,TERMAPPL  RESET PRIOR APPLICATION        88185\n         XC    TERMDCNT,TERMDCNT  RESET APPL RETRY COUNT         88185\n         XC    TERMDTIM,TERMDTIM  RESET APPL RETRY TIME          88185\n         NI    TERMFLG3,TFREQ     RESET LOGON/PRIVY FLAGS        88185\n         BR    R14           RETURN TO CALLER                    88185\n         SPACE 1                                                 88185\nSETPASOF BAL   R14,UTERMOF   RESET LOGON/PRIVIES                 88179\n         AIF   ('&LOCAL' NE 'PID').NOPASOF                       92300\n         ICM   R4,15,TERMLOUD  PRIOR LOGON ?                     88179\n         BZ    POFFLOUD      NO                                  88179\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  USE AS ACCT SVC PARM   88179\n         MVC   A$SID,=C'A$RB'                                    88179\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,0,A$SAKEY+A$SBUILD)      88179\n         MVC   A$SBUFR,TERMLOUD  COPY LOUD                       88179\n         LA    R1,A$SVCRB                                        88179\n         SVC   249           CANCEL SESSIONS AND USER LOGON      88179\n.NOPASOF  ANOP  ,                                                91195\nPOFFLOUD LA    R0,MSG16      SHOW LOCKED                         86065\n         TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BZ    SENDMSG       NO                                  86065\nBAREPSWD LA    R0,MSG20      SET FOR LOGON SCREEN                88179\n         B     SENDMSG                                           88179\n         SPACE 1                                                 88172\n*        MSG TEXT - SEND NON-DELETABLE MESSAGE TO OPERATOR       88172\n*                                                                88172\nSETWTO   L     R0,GPDATAP    POINT TO COMMAND TEXT               88172\n         SLR   R2,R2                                             88172\n         ICM   R2,3,GPDATAL  LOAD AND TEST LENGTH                88172\n         BNP   BADINPUT      ERROR                               88172\n         LR    R1,R2         COPY LENGTH FROM MVC                88179\n         LA    R14,IOBASE+4+4+1+8  FIRST BYTE AFTER TERM         88179\n         LA    R15,150-4-4-1-8  MAX LENGTH SUPPORTED             88179\n         MVC   IOBASE+4(5),=C'FROM '                             88172\n         MVC   IOBASE+4+4+1(8),TERMNAME  TERM ID                 88172\n         MVI   IOBASE+4+4+1+8,C' '                               88172\n         MVCL  R14,R0        MOVE TEXT TO BUFFER (NULL FILL)     88172\n         LA    R2,4+4+1+8(,R2)                                   88172\n         LA    R1,IOBASE(R2) POINT TO END OF TEXT                88172\n         MVC   0(4,R1),=X'40008000'  ROUTCDE=1,DESC=2            88172\n         STCM  R2,3,IOBASE   SET RDW LENGTH                      88172\n         MVC   IOBASE+2(2),=X'8000'  SET ROUT/DESC PRESENT       88172\n         SLR   R0,R0         CLEAR FOR UCMID                     88172\n         WTO   MF=(E,IOBASE)  WRITE TO OPERATOR                  88172\n         BAL   R14,INITMSG4  CLEAR VARIABLE MESSAGE AREA         88172\n         MVC   0(12,R2),=C'MESSAGE SENT'                         88172\n         B     SENDMSG4      SEND MESSAGE 4                      88185\n         SPACE 1                                                 87187\n*        OS TEXT - IF PRIVILEGED USER, ISSUES OS COMMAND (TEXT)  87187\n*                                                                87187\nSETOSCMD TESTAUTH FCTN=1     AUTHORIZED FOR OS COMMANDS ?        87187\n         BXH   R15,R15,CMDNAUTH  NO; FAIL REQUEST                87187\n         L     R6,GPDATAP    POINT TO COMMAND TEXT               87187\n         SLR   R2,R2                                             87187\n         ICM   R2,3,GPDATAL  LOAD AND TEST LENGTH                87187\n         BNP   BADINPUT      ERROR                               87187\n         MVC   IOBASE+4(256),0(R6)  COPY PARM +                  87187\n         LA    R2,4(,R2)                                         87187\n         SLL   R2,16                                             87187\n         ST    R2,IOBASE     COMPLETE V-FORMAT ENTRY             87187\n         SLR   R0,R0         CLEAR FOR UCMID                     87187\n         L     R2,CVTPTR     GET THE CVT                         87187\n         USING CVTMAP,R2                                         87187\n         ICM   R2,15,CVTCUCB  GET CONSOLE CONTROL BLOCK          87187\n         BZ    SETOSNCN      NO CONSOLE ?                        87187\n         USING UCM,R2                                            87187\n         LM    R1,R3,UCMVEA  LOAD CONSOLE BXLE WORDS             87187\n         DROP  R2                                                87187\n         USING UCMLIST,R1    DECLARE SINGLE ENTRY                87187\nSETOSCLP TM    UCMDISP,UCMDISPA  MASTER CONSOLE ?                87187\n         BZ    SETOSCBM      NO                                  87187\n         IC    R0,UCMID      INSERT ID                           87187\n         OI    IOBASE+2,X'40'  SET UCM ID PRESENT                87187\n         B     SETOSNCN      PROCEED WITH NEW ID                 87187\nSETOSCBM BXLE  R1,R2,SETOSCLP  LOOP THROUGH CONSOLES             87187\n         DROP  R1                                                87187\nSETOSNCN MODESET KEY=ZERO,MODE=SUP  GET PRIVILEGED               87193\n         MGCR  IOBASE        ISSUE COMMAND                       87193\n         MODESET KEY=NZERO,MODE=PROB  GET LOW                    87193\n         BAL   R14,INITMSG4  CLEAR MESSAGE BUFFER                87187\n         LH    R3,DDTM4L     GET MAXIMUM LENGTH                  87187\n         LA    R0,IOBASE+4                                       87187\n         LH    R1,IOBASE     GET LENGTH+4                        87187\n         SH    R1,=H'4'                                          87187\n         MVCL  R2,R0         MOVE RESPONSE OR ORIGINAL COMMAND   87187\n         B     SENDMSG4      SEND MESSAGE 4                      88185\n         SPACE 2                                                 87193\n***********************************************************************\n*                                                                     *\n*        SETNEWS - DISPLAY THE CURRENT GOSSIP FROM DD CARD NEWS       *\n*        SETSTATS - (LOCAL ONLY) DISPLAY THE EXHIBIT SYSTEM SCREEN    *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 88179\nSETSTATS DS    0H            DISPLAY STATUS SCREEN FROM EXHIBIT  87193\n         AIF   ('&LOCAL' NE 'PID').NOSTATS                       92300\n         MODESET KEY=ZERO                                        93038\n         L     R2,CVTPTR     GET THE CVT                         93038\n         ICM   R2,15,CVTJESCT-CVTMAP(R2)  GET JES TABLE          93038\n         BZ    NOT24         OR OUT                              93038\n         LA    R2,JESSSCT-JESCT-(SSCTSCTA-SSCT)(,R2)  SSCT CHAIN 93038\n         USING SSCT,R2       DECLARE IT                          93038\nLOOPSSCT ICM   R2,15,SSCTSCTA  GET NEXT ENTRY                    93038\n         BZ    NOT24         TOO BAD                             93038\n         AM31  ,             GET HIGH - ALL DATA ABOVE THE LINE  93038\n         CLC   =C'EXHI',SSCTSNAM  MY SUBSYSTEM NAME ?            93038\n         BNE   LOOPSSCT      NO                                  93038\n         ICM   R2,15,SSCTSUSE  LOAD CSA GLOBAL ADDRESS           93038\n         BZ    NOT24         NOT BUILT YET ?                     93038\n         USING EXRBASE,R2    DECLARE CSA                         93038\n         SLR   R3,R3         SAVE BACKUP POINTER                 93038\n         LA    R4,EXRSCRIN-(EXKCHAIN-EXKBASE)  HEAD OF SCREENS   93038\n         USING EXKBASE,R4                                        93038\n         L     R0,=Y(24,80)  SET PREFERRED ENTRY                 93038\n         L     R1,=C'JES2'   SET PREFERRED SUBSYSTEM (LATER DO *)\nLOOPEXK  ICM   R4,15,EXKCHAIN  GET NEXT ELEMENT                  93038\n         BNZ   TESTEXK       TEST IT                             93038\n         LTR   R4,R3         DID WE FIND AN ALTERNATE ?          93038\n         BZ    NOT24         NO ?                                93038\n         B     HAVEEXK       YES; USE ALTERNATE SIZE             93038\nTESTEXK  CLM   R1,15,EXKJESNM  SAME SUBSYSTEM ?                  93038\n         BNE   LOOPEXK       NO; IGNORE                          93038\n         CLM   R0,15,EXKSCRSZ  SAME SIZE ?                       93038\n         BE    HAVEEXK       YES; USE IT                         93038\n         CLM   R0,3,EXKSCRSZ  AT LEAST SOMETHING BY 80 ?         93038\n         BNE   LOOPEXK       NO; IGNORE IT                       93038\n         LR    R3,R4         SAVE AS ALTERNATE                   93038\n         B     LOOPEXK       TRY AGAIN                           93038\n         SPACE 1                                                 93038\nHAVEEXK  LA    R0,EXKSCRN    LOAD SCREEN START ADDRESS           93038\n         DROP  R4                                                93038\n         B     COMSCRIN                                          88179\n.NOSTATS SPACE 1                                                 88179\nSETHELP  L     R0,=A(HELPTEXT)   FOR 'HELP' SCREEN               88179\n         B     COMSCRIN      MOVE IT                             88179\n         SPACE 1                                                 87193\nSETNEWS  L     R0,=A(NEWSTEXT)  LOAD NEWS SCREEN ADDRESS         88179\nCOMSCRIN LA    R1,24*80      SET SCREEN SIZE                     87193\n         LA    R14,IOBASE                                        87193\n         ST    R14,GPDATAP   SAVE POINTER                        87193\n         C     R9,=A(DDT3767)  NTO DEVICE ?                      88179\n         BE    COMNSCR       YES; FORMAT LINE BY LINE            88179\n         C     R9,=A(DDTMDL5)  MODEL 5 ?                         88206\n         BE    COMMDL5       YES; SPECIAL PROCESSING             88206\n         LR    R15,R1        COPY LENGTH                         87193\n         MVC   0(PREFIXLN,R14),PREFIX  MOVE 3270 PREFIX ORDERS   87193\n         LA    R14,PREFIXLN(,R14)  ADJUST                        87193\n         MVCL  R14,R0        MOVE SCREEN BUFFER                  87193\n         MVC   IOBASE+PREFIXLN+24*80(SUFFIXLN),SUFFIX  TRAILER   87193\n         LA    R15,PREFIXLN+24*80+SUFFIXLN                       87193\n         B     COMSTLEN      JOIN COMMON                         88206\n         SPACE 1                                                 88206\nCOMMDL5  LR    R1,R0         COPY START ADDRESS                  88206\n         LA    R0,24         NUMBER OF LINES TO DO               88206\n         MVC   0(PREFIXLN,R14),PREFIX   MOVE PREFIX ORDERS       88206\nCOMMDL5L MVI   PREFIXLN(R14),C' '                                88206\n         MVC   PREFIXLN+1(131,R14),PREFIXLN(R14)  CLEAR THE LINE 88206\n         MVC   PREFIXLN+27(80,R14),0(R1)  MOVE ONE LINE OF TEXT  90010\n         LA    R14,132(,R14)   ADVANCE ONE LINE OF OUTPUT        88206\n         LA    R1,80(,R1)    ADVANCE ONE LINE OF INPUT           88206\n         BCT   R0,COMMDL5L   DO FOR ALL LINES                    88206\n         MVC   PREFIXLN(SUFFIXLN,R14),SUFFIX  TRAILER            88206\n         LA    R15,PREFIXLN+SUFFIXLN+24*132  SCREEN SIZE         88206\n         B     COMSTLEN      JOIN COMMON                         88206\n         SPACE 1                                                 88179\nCOMNSCR  LA    R14,IOBASE+1  SET INPUT BUFFER ADDRESS            88179\n         ST    R14,GPDATAP   SET BUFFER START                    88179\n         LR    R1,R0         STARTING ADDRESS                    88179\n         MVI   IOBASE,X'FF'  SET SCAN STOPPER                    88179\n         LA    R0,24         NUMBER OF LINES TO DO               88179\n         LA    R2,80         SET LINE LENGTH                     88179\nCOMNSLUP MVC   0(80,R14),0(R1)  MOVE ONE LINE                    88179\n         AR    R1,R2         NEXT INPUT LINE                     88179\n         CLC   0(79,R14),1(R14)  ALL BLANK (OR SOMETHING?)       88179\n         BE    COMNSLIP      YES; SKIP IT                        88179\n         AR    R14,R2        NEXT LINE                           88179\nCOMNSLED BCTR  R14,0         BACKSPACE 1                         88179\n         CLI   0(R14),C' '   TRAILING BLANK ?                    88179\n         BE    COMNSLED      YES; DO IT AGAIN                    88179\n         MVC   1(2,R14),=X'0D25'  MAKE CR/LF                     88179\n         LA    R14,3(,R14)   NEXT AVAILABLE POSITION             88179\nCOMNSLIP BCT   R0,COMNSLUP   DO NEXT LINE                        88179\n         AIF   (NOT &MVSXA OR '&LOCAL' NE 'PID').NOBROAD         93038\n         LTR   R3,R3         STATUS DISPLAY ?                    93038\n         BZ    COMNENTR      NO; MAKE PROMPT                     93038\n         LR    R2,R14        JUST IN CASE                        93038\n         AM31  ,             GET HIGH AGAIN                      93038\n         MVC   4(73,R2),EXRBROAD+2  MOVE BROADCAST MESSAGE       93038\n         CLI   4(R2),C' '    ANY TEXT, EVER ?                    93038\n         BL    COMNENTR      NO; GET OUT                         93038\n         MVC   0(4,R2),=C'==> '  NOTE BLANK AT +3                93038\n         CLC   3(73,R2),4(R2)  ALL BLANK ?                       93038\n         BE    COMNENTR      YES; GET OUT                        93038\n         SLR   R3,R3         ONLY ONCE                           93038\n         LA    R0,1          SET FOR ONE MORE                    93038\n         LA    R14,73(,R2)   POINT TO END OF LINE                93038\n         B     COMNSLED      DELETE TRAILING BLANKS              93038\n         SPACE 1                                                 93038\nCOMNENTR MVC   0(8,R14),=C'ENTER ? '                             88179\n         LA    R15,8(,R14)                                       88179\n         S     R15,GPDATAP   LESS START OF BUFFER                88179\nCOMSTLEN STH   R15,GPDATAL   SET BUFFER LENGTH                   88179\n         AM24  ,             RESET POSSIBLE 31-BIT MODE          93038\n         MODESET KEY=NZERO   RESET KEY ZERO                      93038\n         LA    R0,MSG19                                          88179\n         B     SENDMSG       SEND CONVERTED SCREEN               88179\n         SPACE 1                                                 88172\nNOT24    AM24  ,             GET DOWN                            93038\n         MODESET KEY=NZERO                                       93038\nNOTFOUND BAL   R14,INITMSG4  CLEAR MESSAGE LINE                  87193\n         MVC   0(22,R2),=C'SUBCOMMAND UNAVAILABLE'               87193\nSENDMSG4 LA    R0,MSG04      REQUEST MESSAGE 4                   88185\n         B     SENDMSG       AND GET OUT                         88185\n         SPACE 1                                                 87193\nEXRESMOD DC    0D'0',CL8'EXHRDFL3'  WORD ALIGNMENT THE HARD WAY  87193\nPREFIX   $IO   ERASE/WRITE                                       87193\n         $WCC  (RESETKBD,MDT)                                    87193\n         $SBA  (1,1)                                             87193\nPREFIXLN EQU   *-PREFIX                                          87193\nSUFFIX   $SBA  (1,1)         FUNNY WRAP-AROUND                   87193\n         $SF   (UNPROT)                                          87193\n         $IC                                                     87193\n         DC    CL8' '        USER INPUT                          87193\n         $SF   (PROT)                                            87193\nSUFFIXLN EQU   *-SUFFIX                                          87193\n         TITLE '*********  N E T S O L  -  TPEND EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *\n*                                                                     *\n*              * VTAM IS CLOSING DOWN                                 *\n*                                                                     *\n*              * OPERATOR ISSUED A HALT COMMAND                       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *\n*                                                                     *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - REASON CODE FOR SHUTDOWN                      *\n*                                                                     *\n*        THIS PARAMETER LIST IS NOT USED BY NETSOL                    *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nTPEND    XHEAD ,                                                 90141\n         OI    UFLAGS,SHUTDOWN+UFGIGNER  TELL OTHER EXITS OF SHUTDOWN\n         SPACE 1\n         POST  FINISECB                POST MAINLINE'S ECB\n         SPACE 1\n         SLR   R15,R15                 ZERO RETURN CODE\n         BR    R14                     RETURN FROM IRB\n         TITLE '*********  N E T S O L  -  LOGON EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *\n*                                                                     *\n*              * A TERMINAL IS LOGGED ON VIA VARY TO NETSOL           *\n*                                                                     *\n*              * A TERMINAL IS RETURNED TO NETSOL BY AN APPLICATION.  *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *\n*                                                                     *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - POINTER TO SYMBOLIC TERMINAL NAME             *\n*              WORD 2 - RESERVED                                      *\n*              WORD 3 - LENGTH OF LOGON DATA.                         *\n*              WORD 4 - READ-ONLY RPL POINTING TO LOGON CINIT.        *\n*              WORD 5 - CID OF PENDING SESSION.                       *\n*                                                                     *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOGON    MHEAD ,                                                 90141\n         L     R6,20(,R1)    GET THE CID                         88188\n         LA    R13,GENSAVE             POINT TO SAVE-AREA\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         SPACE 1\n***********************************************************************\n*        NOW ADD THE TERMINAL NAME TO THE TERMINAL TABLE AND RETURN   *\n*        THE ENTRY'S ADDRESS SO IT CAN BE PLACED IN THE NIB USER      *\n*        FIELD. SUBSEQUENT OPERATIONS USING AN RPL WILL HAVE THE      *\n*        RPLUSFLD UPDATED WITH THE TERMINAL TABLE ADDRESS FROM THE    *\n*        NIB. IF ENTRY ALREADY EXISTS IN TABLE (SECOND LOGON, ETC.),  *\n*        THEN WE RESET THE TERMINALS STATUS. A COUNT IS MAINTAINED    *\n*        OF THE NUMBER OF LOGONS FOR A GIVEN TERMINAL. THE TERMINAL   *\n*        TABLE CAN BE EXPANDED IF NEEDED TO PROVIDE ADDITIONAL STATS. *\n***********************************************************************\n         SPACE 1\n         L     R2,4(,R1)               -> TERMINAL NAME PASSED BY LOGON\n         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES\n         CR    R3,R5                   CHECK FOR NULL TABLE\n         BH    NOTABLE                 NO ENTRIES AS R3 > R5 (INIT 0)\n         SPACE 1\nTABLOOP  CLC   0(8,R2),TERMNAME        MATCH THE NAME ?\n         BE    FOUNDTAB                YES, ALREADY IN THE TABLE\n         BXLE  R3,R4,TABLOOP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1\n         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?\n         BNL   TOOSMALL                YES, ABEND USER 0008\n         SPACE 1\nNOTABLE  ST    R3,TERMTABE             SAVE NEW TABLE END\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY\n         MVC   TERMNAME(8),0(R2)       COPY NAME ACROSS\nTESTRANG LM    R15,R1,TERMTEND  GET RANGE ENTRIES                88185\n         SR    R15,R0        BACK-UP ONE                         88185\nLOOKRANG BXH   R15,R0,FOUNDTAB  PATTERN ENTRY NOT LOCATED        88185\n         CLC   TERMNAME,TERMNAME-TERMTABL(R15)  IN RANGE ?       88185\n         BL    LOOKRANG      NO                                  88185\n         CLC   TERMNAME,TERMNAM2-TERMTABL(R15) NOT TOO HIGH ?    88185\n         BH    LOOKRANG      NO; TRY AGAIN                       88185\n         MVC   TERMDAPL,TERMDAPL-TERMTABL(R15)  COPY APPLICATION 88185\n         MVC   TERMFLG3,TERMFLG3-TERMTABL(R15)  LOGON FLAGS      88185\n         MVC   TERMLPAD(L'TERMLPAD+L'TERMLPLN),TERMLPAD-TERMTABL(R15)\n         SPACE 1\nFOUNDTAB LA    R4,1                    GET LOGON COUNT           86127\n         AH    R4,TERMLOGC             ADD 1 TO IT               86127\n         STH   R4,TERMLOGC             SAVE IT BACK\n         MVI   TERMFLAG,0              CLEAR LOGON STATUS FLAG\n*        CLC   TERMCID,TERMNAME  PRE-ACF VTAM ?                  84142\n*        BE    *+8           YES; LEAVE CID FIELD ZERO           84142\n         ST    R6,TERMCID    SAVE PENDING CID FOR INQUIRE        88188\n         SPACE 1\n***********************************************************************\n*        OBTAIN AN ASYNC RPL/NIB AND PREPARE FOR OPNDST               *\n***********************************************************************\n         SPACE 1\n         BAL   R14,GETRPL              OBTAIN AN RPL\n         LA    PTRNIB,NIBSTART         -> NIB WITHIN RPL\n         OI    EXITFLAG,LOGONEX        MARK LOGON EXIT ENTERED\n         MVC   NIBSYM(8),TERMNAME      MOVE IN SYMBOLIC NAME\n         MVC   NIBCID,TERMCID  ALSO SET PENDING ID               89121\n         XC    NIBLMODE,NIBLMODE  KILL LOGMODE                   89121\n*DO NOT  CLI   VTAMVERL,C'2'  VTAM 3 OR HIGHER ?                 92221\n*NEED    BNH   INQUMODE      NO                                  92221\n*THIS    MVC   NIBLMODE,=CL8' '  USE BLANKS INSTEAD OF ZEROES    92221\nINQUMODE MVC   MODENAM,NIBLMODE  SAVE FOR USER OVERRIDE          92221\n         ST    R3,NIBUSER              NIB USER -> TERM TABLE ADDRESS\n         ST    R3,RPLUSFLD             SAVE FOR ERROR ON OPNDST\n         ST    PTRRPL,TERMCRPL         SAVE A(RPL) IN TTE\n         SPACE 1\n***********************************************************************\n*        OBTAIN THE SESSION PARAMETERS WITH THE INQUIRE MACRO         *\n***********************************************************************\n         SPACE 1\nINQUIRSE L     R15,=A(FRSYNRPL)  GET FRESH SYNCHRONOUS RPL       86065\n         MVC   SYNCHRPL(FRSYNL),0(R15)  AND RE-INITIALIZE        86065\n         XC    SESSPARM,SESSPARM       ZERO SESSION PARM WORK AREA\n         ST    R3,SYNUSFLD             SAVE A(TTE) IN RPL USER FLD\n         L     R2,TERMCID              LOAD CID FOR INQUIRE\n         OI    MACFLAG2,INQSES         INDICATE INQUIRE(SESSPARM)\n         OI    MFLAGS2,INQSESS\n         AIF   (&MVSSP OR &MVSXA).NEWINQ                         84142\n         INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=SESSPARM,                                         X\n               NIB=(PTRNIB),                                           X\n               AREA=SESSPARM,                                          X\n               AREALEN=L'SESSPARM                                84142\n         AGO   .COMINQ                                           84142\n.NEWINQ  INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=SESSPARM,                                         X\n               ARG=(R2),                                               X\n               AREA=SESSPARM,                                          X\n               AREALEN=L'SESSPARM\n.COMINQ  NI    MFLAGS2,255-(INQSESS)   RESET ERREXIT FLAG\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(SESSPARM)                                *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO CINIT QUEUED                      14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTABC(R15)            CHECK VALID ACTIONS\nERRTABC  B     R0CHKC               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8\n         BAL   R7,SNOCCUR           C\n         B     INQUIRSE            10  REISSUE.  NO NEED TO\n         B     FREERPL             14  TERMINAL GONE. END REQUEST\n         SPACE 1\nR0CHKC   DS    0H\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*        USE BIND PARAMETERS JUST OBTAINED TO DETERMINE TERMINAL TYPE *\n***********************************************************************\n         SPACE 1\n         LA    R2,SESSPARM             ESTABLISH ADDRESSABILITY\n         USING ISTDBIND,R2               TO BIND PARAMETERS\n         ICM   R7,15,@MODETAB  IS THERE A MODE TABLE ?           88213\n         BZ    LOGNOMOD      NO                                  88213\n*KILL*   CLI   TERMMODE,C' ' PRIOR MODE FOUND ?                  88220\n*KILL*   BH    LOGNOMOD      YES; DON'T SEARCH AGAIN             88220\n*KILL*   SLR   R15,R15       ZERO IC                             88213\n*KILL*   LA    R14,8(,R7)    POINT TO FIRST ENTRY                88213\n*KILL*   LH    R0,2(,R7)     LOAD NUMBER OF ENTRIES (AT LEAST ONE!)\n*OGDOMOD CLC   ISTDBIND(BINTSU-ISTDBIND),8(R14)  MATCH ?         88311\n*KILL*   BNE   LOGUPMOD      NO; BUMP AGAIN                      88213\n*KILL*   CLC   BINSRUSZ(2),8+BINSRUSZ-ISTDBIND(R14)  SAME SIZE ? 88220\n*KILL*   BNE   LOGUPMOD      NO; BUMP AGAIN                      88213\n*KILL*   CLC   BINLUP(BINRSV15+1-BINLUP),8+BINLUP-ISTDBIND(R14)  88220\n*KILL*   BNE   LOGUPMOD      NO; BUMP AGAIN                      88213\n*KILL*   MVC   TERMMODE,0(R14)  COPY LOGMODE NAME                88213\n*KILL*   B     LOGNOMOD                                          88213\n*OGUPMOD IC    R15,BINUSEL-ISTDBIND+8(,R14)  GET USER LENGTH     88213\n*KILL*   LA    R14,8+BINDSIZE(R14,R15)  NEXT ENTRY               88213\n*KILL*   BCT   R0,LOGDOMOD   TRY AGAIN                           88213\nLOGNOMOD CLI   BINLUP,BINLUP2C         LU TYPE 2 (3270) ?\n         BE    LU3270                    YES - BR TO PROCESS\n         CLI   BINLUP,BINLUP1C         LU TYPE 1 (3767) ?\n         BE    LU3767                    YES - BR TO PROCESS\n         CLI   BINLUP,BINLUP0C   IF NOT LU TYPE 0\n         BNE   BADLU                     THEN ASSUME UNSUPPORTED DEVICE\n         CLI   BINFM,X'02'               ELSE IF FM=02\n         BE    LU3270                         THEN ASSUME 3270\n         CLI   BINFM,X'03'                    IF FM=03\n         BE    LU3767                         THEN ASSUME 3767\n         B     BADLU                          ELSE DEVICE NOT SUPPORTED\nLU3270   CLI   BINBDESC,BINBFSZF  CHECK BUFFER SIZE              88206\n         BNL   LU70PRI       TEST PRIMARY SCREEN SIZE            88206\n         CLI   BINBDESC,5    MODEL 5 OR SMALLER ?                88206\n         BE    LUMDL5        GO TO 27*132                        88206\n         BH    BADLU         INVALID                             88206\n         CLI   BINBDESC,1    12*80 (OR 24*40) ???                88206\n         BE    BADLU         YES; NOT SUPPORTED                  88206\n*        NOTE THAT =0 AND =2 BOTH MAY APPEAR FOR 24*80           88206\n         B     LU3270N       SET FOR 'NORMAL' SCREEN             88206\nLU70PRI  OI    TERMFLAG,LETMODE ALLOW USER LOGMODE MODIFICATION  88207\n         CLI   BINBFRAR,27   27*132 ALTERNATE ?                  88206\n         BNE   LU3270N       NO; USE NORMAL SCREENS              88206\nLUMDL5   L     R1,=A(DDTMDL5)  SET FOR NORMAL MODE               88206\n         B     STORDDT       STASH IT                            88206\nLU3270N  L     R1,=A(DDT3270)  SET FOR BASIC MODE                88206\n         AIF   (NOT &MVSSP AND NOT &MVSXA).NOTSEDS               84142\n         TM    BINDFLAG,BINSEDS        3270 WITH EXTENDED FUNCTION?\n         BZ    STORDDT       NO; USE BASIC MODE                  88206\n         AGO   .NOTSEDT                                          84141\n.NOTSEDS ANOP  ,                                                 84141\nBINLUP0C EQU   0             LU TYPE 0                           84141\n         TM    BINDFLAG,X'80'    EXTENDED DATASTREAM OPTION ?    88206\n         BZ    STORDDT       NO                                  88206\n.NOTSEDT L     R1,=A(DDT3270E)         PT AT DDT3270E           85327\n         B     STORDDT                 BR TO STORE IN TTE\nLU3767   L     R1,=A(DDT3767)          PT AT DDT FOR 3767       85327\n         MVI   BINCMNP2,X'80'  SET HALF-DUPLEX FLIP-FLOP         86168\n         MVI   BINPRIP,BINPCHN+BINPCHNR+BINPSEB                  86168\n         MVI   BINSECP,BINSCHN+X'10'   EXC. RESP. ONLY, NO END   86168\n         MVI   BINCMNP,BINBRAK+BINBKTR                           86168\n         MVI   BINUSEL,4     SET USER DATA LENGTH                86168\n         MVC   BINUSE(4),=X'FF000020'  NTO INST. MANUAL, APP. D  86168\nSTORDDT  ST    R1,TERMDDT              STORE A(DDT) IN TTE\n         TM    BINCMNP2,BINHDXFF  CONVERSATIONAL DEVICE ?        90135\n         BZ    *+8           NO                                  90135\n         OI    TERMFLAG,FLIPFLOP  YES; SET IT                    90135\n         TM    BINCMNP2,BINHDXC  CONTENTION MODE ?               90135\n         BZ    *+8           NO                                  90135\n         OI    TERMFLAG,CONTENT  YES; SET IT                     90135\n         IC    R14,BINPRUSZ  GET PRIMARY RU SIZE                 86143\n         LR    R1,R14        SAVE                                86143\n         LA    R0,BINRUSZM   GET MANTISSA MASK                   86143\n         NR    R14,R0                                            86143\n         SRL   R14,4         MAKE MANTISSA                       86143\n         LA    R0,BINRUSZE   GET EXPONENT MASK                   86143\n         NR    R1,R0         ISOLATE EXPONENT                    86143\n         LA    R15,1         MAKE BASE                           86143\n         SLL   R15,0(R1)     MAKE 2**E                           86143\n         MR    R14,R14       M*2**E                              86143\n         ST    R15,TERMRUSZ  STASH RU SIZE MAXIMUM               86143\n         DROP  R2\n*        RESET LOCAL OPTIONS                                     88179\n*TSSO*   CLC   TERMDDT,=A(DDT3767)  NTO DEVICE ?                 88199\n*TSSO*   BNE   *+8           NO                                  88199\n*TSSO*   OI    TERMFLG3,TFLOF  UNTIL LATER - FORCE LOGOFF        88199\n         TM    TERMFLG3,TFLOF  FORCED USER LOGOFF ?              88188\n         BZ    LOGOTONE      NO; CHECK FOR SINGLE FORCED APPLID  88188\n         BAL   R14,UTERMOF   LOG THE USER OFF                    88188\n         OI    TERMFLG3,TFLOF  RESET THE LOGOFF                  88188\nLOGOTONE TM    TERMFLG3,TFAPL  FORCED APPLICATION LOGON ?        88220\n         BZ    LOGORHEA      NO                                  88220\n*CONSIDR NI    TERMFLG3,TFREQ  RESET USER'S PRIVIES              88179\nLOGORHEA L     R14,CVTPTR    GET THE CVT                         88185\n         AIF   ('&LOCAL' NE 'PID').NOLOGEX                       92300\n         ICM   R14,15,CVTUSER-CVTMAP(R14)  LOCAL EXTENSION?      88185\n         BZ    LOGOLOGY      NO                                  88185\n         LA    R4,UCLOUD-USERCVT-(A$LNEXT-A$LOUD)(R14) LINK-PTR  88185\nLOGOLEGO ICM   R4,15,A$LNEXT-A$LOUD(R4)  ANOTHER ?               88185\n         BZ    LOGOLOGY      NO                                  88185\n         CLC   TERMNAME,A$LTERM-A$LOUD(R4)  SAME ID ?            88185\n         BNE   LOGOLEGO                                          88185\n         ST    R4,TERMLOUD   SAVE IT                             88185\n         NI    TERMFLG3,TFREQ+TFLOF  RESET LOGON AND PRIVIES     88197\n         TM    TERMFLG3,TFLOF  IS LOGOFF FORCED ?                88197\n         BNZ   LOGOLOGY      YES; KILL LOUD                      88197\n         TM    A$LFLG1-A$LOUD(R4),A$LFGOK  VALID USER ?          88185\n         BZ    LOGOLOGY                                          88185\n         BAL   R14,UTERM     SET USER'S PRIVILEGES               88185\n         CLI   TERMAPPL,0    BACK FROM OTHER APPLICATION ?       88185\n         BH    LOGOLOGY      YES; LEAVE AS IS                    88185\n         BAL   R14,UTERMAP   TEST FOR FORCED APPLICATION AND SET IT\nLOGOLOGY ICM   R4,15,TERMLOUD  PRIOR LOGON ?                     88179\n         BZ    LOGOLOUD      NO                                  88179\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT SVC PARM AREA\n         MVC   A$SID,=C'A$RB'                                    88207\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,A$SONL,A$SAKEY+A$SBUILD) 88207\n*                            LOGOFF SESSIONS, NOT USER           88179\n         MVC   A$SBUFR,TERMLOUD  COPY LOUD                       88207\n         LA    R1,A$SVCRB                                        88207\n         SVC   249           CANCEL SESSIONS; KEEP USER          88179\n         TM    TERMFLG3,TFLOF  FORCED LOGOFF ?                   88188\n         BZ    LOGOLOUD      NO                                  88188\n         BAL   R14,UTERMOF   RESET EVERYTHING AGAIN              88188\n         MVI   A$SFCTN,A$SFVALD  VALIDATE USER                   88207\n         MVI   A$SCNTL,A$SUKEY+A$SBUILD                          88207\n         XC    A$SUID(L'A$SUID+L'A$SACCT),A$SUID  KILL USER AND ACCT\n         LA    R1,A$SVCRB    ...BUT USERID IS GARBAGE            88207\n         SVC   249           ...SO THIS CALL KILLS THE DATA      88188\n.NOLOGEX ANOP  ,                                                 91195\nLOGOLOUD NI    TERMFLG3,255-TFLOF  LOGOFF REQUEST PROCESSED      88179\n         SPACE 1\n***********************************************************************\n*    ISSUE AN OPNDST TO CONNECT NETSOL TO LOGGED-ON TERMINAL.         *\n***********************************************************************\n         SPACE 1\nOPENDST  OI    MACFLAGS,OPNSPEC        INDICATE DOING AN OPNDST(SP)\n         OI    MFLAGS,OPNDSPEC\n         L     R7,=A(OPENEND)  GET EXIT ADDRESS                  90141\n         OPNDST RPL=(PTRRPL),                                          X\n               OPTCD=(ACCEPT,SPEC,NQ),                                 X\n               EXIT=(R7),    OPENEND                                   *\n               NIB=NIBSTART\n         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST                                           *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    OPENDST                 YES. REISSUE\n         LTR   R15,R15                 CLSDST ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1                                                 84142\n         CLC   TERMNAME(4),TERMCID  PRE-ACF VTAM ?               84142\n         BNE   RETURN        NO; ASSUME THE BEST                 84142\n         MVC   TERMCID,RPLARG-IFGRPL(PTRRPL)  GET CID            84142\n         MVC   NIBCID-NIBST+NIBSTART(4),TERMCID                  84142\n         CLC   TERMCID,TERMNAME  CRUD ?                          84142\n         BNE   RETURN        NO; WAIT FOR EXIT TO BE SCHEDULED   86012\n         BAL   R7,SNOCCUR                                        84142\n         TITLE '*********  N E T S O L  -  OPNDST END EXIT'\n***********************************************************************\n*                                                                     *\n*        CHECK VALIDITY OF THE OPNDST                                 *\n*        ENTRY IS FROM THE OPNDST IN THE LOGON EXIT.                  *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nOPENEND  XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR\n*                                       IS FOR OPNDST\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(ACCEPT,SPEC)                              *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                   (R15 R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    09    NODE DEACTIVATED                     14  00           *\n*   10    00    TERMINAL UNAVAILABLE                 14  00           *\n*   10    01    OPNDST FAILED                        14  00           *\n*   10    03    VTAM IS HALTING                      14  00           *\n*   10    05    PERMANENT FAILURE IN PATH            08  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   10    11    SDT FAILED                           14  00           *\n*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *\n*   14    54    INVALID TERMINAL NAME                14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         OI    EXITFLAG,OPENEX         INDICATE IN OPNDST EXIT\n         CH    R15,HEX14               HIGHEST VALID ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB1(R15)            CHECK VALID ACTIONS\nERRTAB1  B     R0CHK1               0  CHECK IF TERM ACCEPTED\n         BAL   R7,SNOCCUR           4\n         B     FREERPL              8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         BAL   R7,SNOCCUR           C  CAN'T WRITE MSG IF NOT\n*                                      CONNECTED\n         B     OPENDST             10  REISSUE. CHECK FOR RESET\n         B     FREERPL             14  CAN'T CONNECT DEVICE\n         SPACE 1\nR0CHK1   DS    0H\n         CH    R0,HEX9                 TERM UNAVAILABLE\n         BE    RETURN                  RETURN IF SO\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*        CID OF DEVICE JUST OPNDST'ED IS NOW IN ASYNC RPL.            *\n*        SOLICIT THE DEVICE JUST CONNECTED.                           *\n***********************************************************************\n         SPACE 1\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         MVC   CID(4),RPLARG           SAVE CID IN RPL WORKAREA\n         LA    PTRNIB,NIBSTART         ADDRESS NIB\n         L     R3,NIBUSER              -> TERM TABLE ENTRY\n*LOSE*   MVC   TERMCID,RPLARG          COPY THE CID TO TTE\n         MVC   NIBCID,TERMCID  THIS GETS LOST?                   91105\n         ST    R3,RPLUSFLD             SAVE A(TTE) IN RPL FOR MSG\n         MVI   TERMFLG2,TOPEN          MARK TERM ON NETSOL\n         OI    FLAGS,FIRSTSND          FIRST SEND TO THE DEVICE\n         NI    SRPLEXT1,FF-RPLNIB      RESET SYNCHRPL\n         SPACE 1                                                 90008\n         AIF   ('&LOCAL' NE 'PID').NOLAUTF                       92300\n***********************************************************************\n*                                                                     *\n*        LOCAL - IF L.O.U.D. LOGOFF FLAG IS SET, DISCONNECT USER      *\n*                                                                     *\n***********************************************************************\n         ICM   R2,15,TERMLOUD  IS THERE A LOUD ?                 90008\n         BZ    AUTLOOK       NO                                  90008\n         TM    A$LFLG2-A$LOUD(R2),A$LFLOG  FORCED LOGOFF ?       90008\n         BNZ   LOGOFCMD      YES; DO NASTY DISCONNECT            90008\n.NOLAUTF SPACE 1\n***********************************************************************\n*        DO AUTOMATIC LOGON FOR THOSE TERMINALS THAT HAD A            *\n*        DEFAULT LOGON SPECIFIED IN THE INITIALIZATION DATA SET.      *\n***********************************************************************\n         SPACE 1\nAUTLOOK  TM    TERMFLG3,TFAPL  USER LOCKED TO APPLICATION ?      88220\n         BZ    AUTONTIM      NO; OLD CODE                        88221\n         TIME  BIN           GET THE TIME                        88220\n         C     R0,TERMDTIM   MORE THAN 1 MINUTE ELAPSED ?        88220\n         BH    OPNDSTC       YES; GIVE USER CHANCE TO LOG OFF    88220\n         B     AUTOTIME      ELSE TRY APPLICATION AGAIN          88179\nAUTONTIM OC    TERMDAPL,TERMDAPL       IS THERE A DEFAULT APPL?  88179\n         BZ    OPNDSTC                 NO  => GO WRITE MSG TO DEVICE\n         TM    TERMFLG3,TFREQ  PRIOR LOGON REQUIRED ?            88179\n         BZ    AUTOTIME      NO; CONNECT                         88179\n         TM    TERMFLG3,TFLON  LOGGED ON ?                       88179\n         BZ    OPNDSTC       NO; FORCE LOGON SCREEN              88179\n         SPACE 1\n***********************************************************************\n*        TO PREVENT LOOPING IN AUTOMATIC LOGON, AUTO LOGON WILL       *\n*        BE TERMINATED IF MORE THAN 3 LOGONS FOR A TERMINAL ARE       *\n*        PROCESSED IN A 60 SECOND TIME PERIOD.                        *\n***********************************************************************\n         SPACE 1\nAUTOTIME TIME  BIN                     GET TIME IN .01 SECS      88179\n         C     R0,TERMDTIM             < 60 SECS SINCE LAST LOGON?\n         BH    AUTONEW                 NO  => ASSUME NEW AUTO LOGON\n         LH    R1,TERMDCNT             YES => INCR\n         LA    R1,1(,R1)                        LOOP\n         STH   R1,TERMDCNT                        COUNTER\n         CH    R1,HEX2                 MORE THAN 3 TIMES IN 60 SECS?\n         BNH   AUTOINQR                NO  => GO INQUIRE RE APPL STATUS\n         MVC   KICKBACK+12(8),TERMNAME  SHOW TERMID              88221\n         LA    R14,TERMAPPL  POINT TO FORCED APPLICATION ID      88224\n         TM    TERMFLG3,TFAPL  USER LOCKED TO APPLICATION ?      88224\n         BNZ   *+8           YES; SHOW IT                        88224\n         LA    R14,TERMDAPL   ELSE POINT TO FORCED TERM'S APPL   88224\n         MVC   KICKBACK+33(8),0(R14)  SHOW REJECTING APPLID      88224\n         WTO   MF=(E,KICKBACK)  LET OPSIE KNOW                   88221\n         B     OPNDSTC                 YES => SKIP AUTO LOGON\nAUTONEW  A     R0,=AL4(100*60)         ADD 60 SECS TO CURRENT TIME\n         ST    R0,TERMDTIM  AND STORE FOR LATER\n         XC    TERMDCNT,TERMDCNT       ZERO LOOP COUNTER\n***********************************************************************\n*                                                                     *\n*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *\n*    OF THE DEFAULT LOGON APPLICATION FOR THIS TERMINAL.              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nAUTOINQR LA    R14,TERMAPPL  POINT TO FORCED APPLICATION ID      88222\n         TM    TERMFLG3,TFAPL  USER LOCKED TO APPLICATION ?      88222\n         BNZ   AUTOINQS      YES; TRY IT                         88222\n         LA    R14,TERMDAPL   ELSE POINT TO FORCED TERM'S APPL   88222\nAUTOINQS MVC   APPLID,0(R14) SET DESIRED APPLICATION NAME        88222\n         LA    PTRNIB,SYNCHNIB         PUT THE APPLICATION\n         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT\n         SPACE 1\n***********************************************************************\n*    INQUIRE FOR THE APPLICATION STATUS                               *\n***********************************************************************\n         SPACE 1\nINQUIREA OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT\n         OI    MFLAGS,INQAPPST\n         L     R15,=A(FRSYNRPL)  GET FRESH SYNCHRONOUS RPL       86065\n         MVC   SYNCHRPL(FRSYNL),0(R15)  AND RE-INITIALIZE        86065\n         ST    R3,SYNUSFLD             SAVE A(TTE) IN SYNCHRPL USRFLD\n         INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=APPSTAT,                                          X\n               NIB=SYNCHNIB\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n         NI    SRPLEXT1,FF-RPLNIB      NIB NO LONGER NEEDED\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  0C  06           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX14     HIGHEST POSSIBLE ACTION?            88185\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R15,R15       ERROR CODE ?                        87186\n         BZ    ERRTAB3       NO                                  87186\n         TM    UFLAGS,SHUTDOWN+UFGIGNER  RECYCLING ?             87186\n         BNZ   OPNDSTC       SKIP AUTO LOGON                     87186\n         B     ERRTAB3(R15)            CHECK VALID ACTIONS\nERRTAB3  B     R0CHK3               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS\n*                                      IRRELEVANT\n         B     OPNDSTC              C  DEFAULT APPL IS UNKNOWN SO\n*                                      SKIP AUTO LOGON\n         B     INQUIREA            10  REISSUE.  NO NEED TO\n*        B     INQBADAP      14  NETSOL/INTAB/VTAMLST OUT OF SYNCH\n         SPACE 1                                                 88185\nINQBADAP MVC   INQBADWO+4+17(8),TERMNAME                         88185\n         MVC   INQBADWO+4+34(8),APPLID                           88185\nINQBADWO WTO   'BCSC197 TERM=********, APPLID=******** UNDEFINED',     *\n               ROUTCDE=(8),DESC=(7)                              88185\n         B     OPNDSTC       WRITE 'CLOSED' SCREEN               88185\n         SPACE 1\nR0CHK3   CH    R0,=H'10'     APPLICATION IS PEEVED ?             93169\n         BE    OPNDSTC       YES; MAKE 'CLOSED' SCREEN           93169\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2                                                 90120\n***********************************************************************\n*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *\n*    CODES ARE:                                                       *\n*                                                                     *\n*        0 - ACTIVE AND AVAILABLE                                     *\n*        4 - INACTIVE                                                 *\n*        8 - NEVER ACCEPTS A LOGON                                    *\n*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *\n*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *\n***********************************************************************\n         SPACE 2\n         SLR   R15,R15                 CLEAR  REG 15\n         ICM   R15,1,SYNFDB3 LOAD AND TEST FEED-BACK             88186\n         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.\n*OLD*    B     STATUS3(R15)            BRANCH IN TABLE\n*OLD*S3  B     DAPACTIV             0  DO AUTO LOGON\n*OLD*    B     OPNDSTC              4  SKIP AUTO LOGON\n*OLD*    B     OPNDSTC              8  SKIP AUTO LOGON\n*OLD*    B     OPNDSTC             12  SKIP AUTP LOGON\n*OLD*    B     OPNDSTC             16  SKIP AUTO LOGON\n         BNZ   OPNDSTC       SKIP AUTO LOGON                     88186\n         SPACE 1\nDAPACTIV L     R4,TERMLPAD   SET A(LOGON DATA)                   87131\n         L     R2,TERMLPLN   SET L(LOGON DATA)                   87131\n         TM    UFLAGS,SHUTDOWN+UFGIGNER  RECYCLING ?             87187\n         BNZ   OPNDSTC       YES; BYPASS AUTO LOGON              87187\n         TM    TERMFLG3,TPRIVY  PRIVILEGED TERMINAL ?            87187\n         BNZ   FILLNIB       YES; PROCEED WITH LOGON             87187\n         TM    UFLAGS,UFGSYS  RUNNING IN LOCKED MODE ?           87187\n         BZ    FILLNIB       BRANCH INTO LOGON PROCESSING        87187\n         SPACE 1\n***********************************************************************\n*        NO AUTO LOGON IS BEING DONE FOR THIS TERMINAL SO             *\n*        GO SOLICIT LOGON INFORMATION FROM THE TERMINAL USER.         *\n***********************************************************************\n         SPACE 1\nOPNDSTC  TM    UFLAGS,INITDLAY  DELAY DURING START-UP ?          87256\n         BZ    NINITDLY      NO                                  87256\n         STIMER WAIT,BINTVL==A(10)  WAIT 0.1 SECONDS             87256\nNINITDLY B     OPSEND        JOIN RESEND COMMON CODE             86160\n         TITLE '*********  N E T S O L  -  RECEIVE ANY EXIT'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN THE OUTSTANDING REC-ANY      *\n*    COMPLETES.                                                       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS TO THE RPL USED FOR THE READ-ANY (IGFRPL)      *\n*                                                                     *\n*               THE CID FIELD OF THIS RPL HAS CID OF DEVICE           *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRECEND   MHEAD ,                                                 90141\n         LA    R13,GENSAVE             POINT TO SAVE-AREA\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         SPACE 1\n***********************************************************************\n*        ISSUE NEW READ SO WE CAN HANDLE MORE THAN 1 LOGON AT A TIME. *\n***********************************************************************\n         SPACE 1\n         LR    R7,R1                   SAVE R7 AROUND THE REC ANY CODE\n         BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE\n         BAL   R14,RECSUB              ISSUE A RECEIVE (ANY)\n         SPACE 1\n         LR    PTRRPL,R7               RESTORE THE INPUT RPL @\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         ICM   R3,15,RPLUSFLD          -> TTE                    92273\n         BZ    RETURN        SHOULD NOT HAVE HAPPENED            92273\n         ST    R5,TERMCRPL             SAVE A(RPL)\n         OI    EXITFLAG,RECEX\n         SPACE 1\n***********************************************************************\n*        SAVE CID OF DEVICE FROM RPL ARG FIELD.                       *\n*        GET LENGTH OF RECORD READ. THIS WILL BE DECREMENTED          *\n*        IF DEVICE CONTROL CHARACTERS ARE REMOVED BEFORE INTRPRET.    *\n*                                                                     *\n*        NOTE: INFO IN RPL MAY NOT BE VALID IF CHECK RETURNS          *\n*              AN ERROR.                                              *\n***********************************************************************\n         SPACE 1\n         MVC   CID(4),RPLARG           GET CID FROM RPL\n         MVC   RECLEN(4),RPLRLEN       GET RPL RECORD LENGTH\n         SPACE 1\n         OI    MFLAGS,RECA             TELL ERREXIT THAT ERRORS\n*                                       ARE FOR REC(ANY)\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                      IS ENTERED IF ERRORS HAVE\n         NI    MFLAGS,255-(RECA)       RESET READ INDICATOR\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CHECK OF READ (ANY)                              *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                   (R15  R0)         *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                 00  00          *\n*   04    04    EXCP. CONDITION ON INCOMING MESSAGE                   *\n*                                                                     *\n*             SSENSEI/SSENSMI                                         *\n*                80     XX        PATH ERRORS         14  00          *\n*                80     05        NO SESSION COND.    08  04          *\n*                40     XX        RH   ERRORS         SNOCCUR         *\n*                20     XX        STATE ERRORS        08  04          *\n*                10     03        FUNCTION \u00ac SUPPORTED08  00          *\n*                10     XX        REQUEST ERRORS      SNOCCUR         *\n*                08     00        BRACKET ERROR       18  00          *\n*                08     01        REQUEST REJECT      08  00          *\n*                08     02        INTV REQ            14  00          *\n*                08     13        BRACKET ERROR       18  00          *\n*                08     2B        PRES. SPACE INT. LO 18  00          *\n*                08     2D        SLU BUSY            14  00          *\n*                                                                     *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *\n*   0C    01    I/O ERROR.  DEVICE NOT USABLE         08  00          *\n*   0C    02    TEST REQUEST SET (LOSTTERM)           14  00          *\n*   0C    07    CONNECT REC. IN PROGRESS              14  00          *\n*   0C    08    LU RESTARTED (LOSTTERM)               14  00          *\n*   0C    0A    REQU. CANCEL. BY RESETR               SNOCCUR         *\n*   0C    0B    CANCELED BY CLSDST                    14  00          *\n*   0C    0C    REQUEST CANCEL. BY CLEAR              08  04          *\n*   10    05    PERMANENT PATH FAILURE                08  00          *\n*   10    07    REQUEST CANCEL BY VARY (LOSTTERM)     14  00          *\n*   10    09    TERMINATE SELF OR LOGOFF (LOSTTERM)   14  00          *\n*   10    0F    BUFFERS FILLED (LOSTTERM)             14  00          *\n*   10    10    TERMINATE SELF COMMAND                08  04          *\n*   10    0C    DIAL-IN DISCONNECT                    08  00          *\n*   14    12    CLSDST IN PROGRESS                    14  00          *\n*   14    32    REQUEST INVALID FOR SPECIFIED DEVICE  08  00          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX18               HIGHEST POSSIBLE ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB2(R15)            CHECK VALID ACTIONS\nERRTAB2  B     R0CHK2               0  VALID DATA FROM READ?\n         BAL   R7,SNOCCUR           4\n         B     RELOPNB              8  CHECK IF WE WANT TO REOPEN\n         BAL   R7,SNOCCUR           C\n         B     RESEND               10 REISSUE\n         B     FREERPL              14\n         B     RESEND               18\n         SPACE 1\nRELOPNB  LTR   R0,R0                   DO OPNDST AFTER CLSDST ?\n         BZ    RELEASE\nRELOPNS  OI    FLAGS,RELOPND           SAY WE WANT TO REOPEN AFTER RELS\n         B     RELEASE\n         SPACE 1\nR0CHK2   DS    0H\n         LTR   R0,R0\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         TM    RPLCNTDC,RPLLUS         DID WE RECEIVE LUSTAT ?\n         BO    LUSTATUS                YES, GO HANDLE IT\n         TM    RPLCNTDC,RPLSIGNL  USER HIT ATTENTION ?           88304\n         BNZ   RESENDSG      YES; SEND AGAIN                     89338\n         ICM   R2,15,RECLEN  ANY INPUT AT ALL ?                  86159\n         BNZ   R0CHK2L1      YES                                 86159\n         CLC   =A(DDT3767),TERMDDT  NTO DEVICE ?                 86159\n         BE    FREERPL       YES; IGNORE, AND DON'T SET LOGPROC  86159\n         SPACE 1\nR0CHK2L1 TM    TERMFLAG,LOGPROC        HAS IMPATIENT USER ISSUED\n*                                      A SECOND LOGON SEQUENCE WHILE\n*                                      THE FIRST IS IN PROGRESS?\n         BO    FREERPL                 YES => IGNORE THIS REQUEST\n         OI    TERMFLAG,LOGPROC        NO  => SET LOGON BEING PROCESSED\n         SPACE 1\n         LA    R6,IOAREA               POINT TO DATA RECEIVED\n         LTR   R2,R2         ANY TEXT RECEIVED ?\n         BZ    RESENDAP      NO; SEND INVITATION AGAIN           88179\n         LA    R3,L'IOAREA             COMPARE THE RECLEN WITH\n         CR    R2,R3                    THE READ BUFFER LENGTH.\n         BNH   GOEDIT                  BUFFER LENGTH GREATER\n*                                       THAN INPUT RECORD.\n         LR    R2,R3                   ONLY THE FIRST 80 BYTES\n*                                       WILL BE READ IN.\n         SPACE 1\n***********************************************************************\n*        BRANCH TO INPUT EDIT ROUTINE FOR THE APPROPRIATE DEVICE TYPE.*\n***********************************************************************\n         SPACE 1\nGOEDIT   DS    0H\n         L     R3,RPLUSFLD             LOAD A(TTE)\n         L     R9,TERMDDT              LOAD A(DDT FOR DEVICE)\n         L     R15,DDTEDIT             LOAD A(DEVICE EDIT ROUTINE)\n         BR    R15                     GO EDIT INPUT\n         TITLE '*********  N E T S O L  -  INPUT EDIT ROUTINE FOR 3270'\n***********************************************************************\n*                                                                     *\n*        S32EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3270       *\n*        DEVICE CONTROL CHARACTERS.                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nS32EDIT  DS    0H\n         CLI   0(R6),CLEARKEY          IS IT 'CLEAR' KEY ?\n         BE    RESENDAP      YES; ASK FOR INPUT AGAIN            88179\n         CLI   0(R6),PA1KEY  PA1 - LOGOFF REQUEST ?              88220\n         BE    LOGOFCMD      YES; DO IT                          88220\n         SPACE 1\n***********************************************************************\n*        NOT 'CLEAR' KEY, CHECK FOR OTHER FUNCTION KEY DEPRESS.  IF   *\n*        IT IS A FUNCTION KEY THE DATA WILL BE PASSED DIRECTLY TO     *\n*        INTERPRET, OTHERWISE THE DATA POINTER WILL BE UPDATED TO     *\n*        SKIP THE 3270 DEVICE CONTROL SEQUENCE.                       *\n***********************************************************************\n         SPACE 1\nS32PFK   DS    0H\n         MVI   1(R6),C' '    CLEAR CURSOR ADDRESS                85328\n         MVI   2(R6),C' '    DITTO                               85328\n         SLR   R0,R0                                             85328\n         IC    R0,0(,R6)     LOAD COMPARE BYTE                   85328\n         LA    R14,S32AIDS   LOAD AIDS TABLE                     85328\n         LA    R15,S32AIDN   GET NUMBER OF ENTRIES               85328\nS32PFKLP CLM   R0,1,0(R14)   MATCH ?                             85328\n         BL    S32PFKUP      NO                                  85328\n         CLM   R0,1,1(R14)   IN RANGE ?                          85328\n         BH    S32PFKUP      NO                                  85328\n         IC    R15,0(,R14)   GET START OF RANGE                  85328\n         SR    R0,R15        GET OFFSET FROM START OF RANGE      85328\n         IC    R15,2(,R14)   GET DESIRED VALUE                   85328\n         AR    R0,R15        MAKE PFK NUMBER                     85328\n         MVC   0(6,R6),=CL8' '  CLEAR CURSOR, ATB BYTES          87362\n         C     R0,=F'10'     ONE OR MORE ?                       85328\n         BNL   S32PFK10      MORE                                85328\n         STC   R0,0(,R6)     STASH BACK                          85328\n         B     S32PFK00      MAKE NUMERIC                        85328\nS32PFK10 SRDA  R0,32         PREPARE FOR DIVIDE                  85328\n         D     R0,=F'10'     DIVIDE                              85328\n         STC   R0,1(,R6)                                         85328\n         STC   R1,0(,R6)                                         85328\n         OI    1(R6),C'0'    MAKE UNITS NUMERIC                  85328\nS32PFK00 OI    0(R6),C'0'    MAKE TENS OR UNITS NUMERIC          85328\n         B     INTRPRET      GO TO PFK LOOKUP                    85328\nS32PFKUP LA    R14,3(,R14)   BUMP TO NEXT TABLE ENTRY            85328\n         BCT   R15,S32PFKLP  TRY IT                              85328\n         SPACE 1\nS32ENTER DS    0H\n         CLI   0(R6),ENTERKEY          IS IT THE ENTER KEY?\n         BNE   BADINPUT\n         LA    R3,3                    USER MIGHT HAVE HIT\n         CR    R2,R3                   ENTER KEY ONLY BUT NO LOGON\n         BNH   RESENDAP                IF SO, REWRITE THE SCREEN 88179\n         SPACE 1\n         LA    R1,6\n         AR    R6,R1                   BYPASS SBA 3270 CONTROL + ORDER\n         SR    R2,R1                   ALLOW FOR DECREASE\n         BNP   BADINPUT      INVALID IF NOTHING LEFT\n         B     INTRPRET                GO INTERPRET LOGON SEQ\n         SPACE 1                                                 85328\nS32AIDS  DC    X'F1,F9,01'   PFK1-9 => 1 TO 9                    85328\n         DC    X'7A,7C,0A'   PFK10-12                            85328\n         DC    X'C1,C9,0D'   PFK13-21 (NO LONGER FOLDED)         87225\n         DC    X'4A,4C,16'   PFK22-24 (NO LONGER FOLDED)         87225\nS32AIDN  EQU   (*-S32AIDS)/3   NUMBER OF ENTRIES                 85328\n         SPACE 1                                                 85328\n***********************************************************************\n*                                                                     *\n*        S37EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3767       *\n*        DEVICE CONTROL CHARACTERS.                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nS37EDIT  LTR   R0,R2         ANY INPUT ?                         86152\n         BNP   RESENDAP      HUH ?                               88179\n         LR    R14,R6        GET TEXT START                      86152\n         LR    R15,R6        DITTO                               86152\n         SLR   R3,R3         CLEAR FOR CR                        86152\n         LA    R1,X'40'      CONSTANT BLANK                      86152\nS37EDLUP IC    R3,0(,R14)    GET NEXT CHARACTER FOR INSPECTION   86152\n         CR    R3,R1         PRINTABLE CHARACTER ?               86152\n         BNL   S37EDPUT      YES; PROCESS IT                     86152\n         CLI   0(R14),X'16'  BACKSPACE ?                         86152\n         LR    R3,R1         BUT REPLACE BY BLANK                86152\n         BNE   S37EDPUT      NO; JUST PROCESS AS BLANK           86152\n         STC   R1,0(,R14)    CLEAR IT OUT                        86152\n         CR    R15,R6        POSSIBLE TO BACK-UP ?               86152\n         BNH   S37EDB14      NO; JUST BUMP 14                    86152\n         BCTR  R15,0         BACK-UP ONE SPACE                   86152\n         STC   R1,0(,R15)    CLEAR OLD BYTE                      86166\n         B     S37EDB14      AND AVOID R15 INCREMENTATION        86166\nS37EDPUT STC   R1,0(,R14)    CLEAR THE SOURCE LOCATION           86152\n         STC   R3,0(,R15)    STORE THE NEW BYTE                  86152\n         LA    R15,1(,R15)   SET NEW OUTPUT LOCATION             86152\nS37EDB14 LA    R14,1(,R14)   SET NEW INPUT                       86152\n         BCT   R0,S37EDLUP   REPEAT FOR ALL                      86152\n         B     INTRPRET      PROCESS                             86152\n         TITLE '*********  N E T S O L  -  COMMAND LOOKUP'\n***********************************************************************\n*                                                                     *\n*    SCAN NETSOL'S COMMAND TABLE FOR AN ENTRY MATCHING THE LOGON DATA *\n*    ENTERED FROM THE TERMINAL.  IF A MATCH IS FOUND, THE SPECIFIED   *\n*    CMD ROUTINE IS BRANCHED TO. OTHERWISE, AN ERROR MESSAGE IS       *\n*    WRITTEN TO THE TERMINAL INDICATING INVALID LOGON DATA.           *\n*                                                                     *\n*    THE COMMAND CAN BE EITHER:                                       *\n*           - A REQUEST FOR LOGON TO A VTAM APPLICATION PROGRAM, OR   *\n*           - A REQUEST FOR A SERVICE FROM NETSOL, SUCH AS, LOGOFF    *\n*                                                                     *\n*    INPUT :                                                          *\n*        R2 - LENGTH OF LOGON DATA                                    *\n*        R6 - A(LOGON DATA IN DATA BUFFER)                            *\n*                                                                     *\n*    OUTPUT:                                                          *\n*        R0 - ERROR MSG # IF NO ENTRY FOUND                           *\n*        R1 - A(MATCHING COMMAND TABLE ENTRY)                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADINPUT LA    R0,MSG02                INPUT NOT RECOGNISED\n         B     SENDMSG\n         SPACE 1\nINTRPRET LTR   R2,R2         ANY INPUT ?                         86146\n         BNP   RESENDAP      NO; TRY AGAIN                       88179\n         CLI   0(R6),C' '    LEADING NON-BLANK ?                 86152\n         BH    INTRNBLK      YES                                 86152\n         LA    R6,1(,R6)                                         86152\n         BCTR  R2,0                                              86152\n         B     INTRPRET      KEEP SPACING                        86152\nINTRNBLK STC   R2,DATASEQL             SAVE LOGON DATA LENGTH    86152\n         ST    R6,DATAPTR              SAVE A(LOGON DATA)\n*        CONVERT LOGON DATA TO UPPER CASE\nLOWTOUP  CLI   0(R6),X'11'   SBA ?                               88179\n         BE    *+8           YES; LEAVE IT                       88179\n         OI    0(R6),X'40'             MAKE CURRENT CHAR UPPER CASE\n         LA    R6,1(R6)                GET\n         BCT   R2,LOWTOUP                  NEXT CHAR\n         SPACE 1                                                 88206\n         IC    R2,DATASEQL   RELOAD LENGTH                       88206\n         L     R6,DATAPTR    AND ADDRESS                         88206\n         LR    R15,R6        COPY START                          88206\n         LR    R0,R2         COPY LENGTH                         88206\n         SH    R0,=H'8'      LENGTH OF 'LOGMODE()' MINUS 1       88206\n         BNP   INTLOGMX      SKIP                                88206\nINTLOGMD CLC   =C'LOGMODE(',0(R15)  LOGMODE REQUEST ?            88206\n         BNE   INTLOGMN      NO                                  88206\n         L     R3,RPLUSFLD   GET TERM ENTRY                      88207\n         TM    TERMFLAG,LETMODE ALLOWED TO CHANGE LOGMODE ?      88207\n         BZ    BADINPUT      NO; FAIL                            88207\n         MVI   0(R15),C' '   WIPE IT                             88206\n         MVC   1(7,R15),0(R15)  CLEAR ALL                        88206\n         MVC   MODENAM,0(R15)  CLEAR NAME                        88206\n         LA    R14,MODENAM   SET DESTINATION                     88206\n         LA    R1,8          MAKE SURE OF TRAILING ')'           88206\nINTLOGMF CLI   8(R15),C')'   END OF NAME ?                       88206\n         BE    INTLOGMR      YES; BLANK AND RESTART              88206\n         MVC   0(1,R14),8(R15)  COPY IT                          88206\n         MVI   8(R15),C' '   CLEAR IT                            90127\n         LA    R14,1(,R14)                                       88206\n         LA    R15,1(,R15)                                       88206\n         BCT   R0,*+8        OK IF MORE                          88206\n         B     BADINPUT      SYNTAX ERROR (MSG 02)               88206\n         BCT   R1,INTLOGMF   DO UNTIL )                          88206\nINTLOGMR CLI   8(R15),C')'   TRAILING PARENTHESIS ?              88206\n         BNE   BADINPUT      NO; ERROR                           88206\n         MVI   8(R15),C' '   CLEAR IT                            88206\n*DEFER*  CLC   TERMMODE(6),MODENAM  SAME MAJOR TYPE ?            88213\n*DEFER*  BE    INTRPRET      YES; HONOR IT                       88213\n*DEFER*  TM    TERMFLG3,TPRIVY  PRIVILEGED ?                     88213\n*DEFER*  BZ    BADINPUT      NO; REJECT THE REQUEST              88213\n         B     INTRPRET      GO TO SKIP TRAILING BLANKS          88206\nINTLOGMN LA    R15,1(,R15)                                       88206\n         SH    R0,=H'1'                                          88206\n         BP    INTLOGMD      TRY AGAIN                           88206\nINTLOGMX DS    0H            END OF LOGMODE INSERTION            88206\n*        SAVE DATA FOR USE IN CLSDST(PASS)\n         LA    R14,DATASEQ   MOVE INPUT TO WORK AREA             88311\n         LA    R15,L'DATASEQ                                     88311\n         LR    R0,R6         'FROM' ADDRESS                      88311\n         LR    R1,R2         'FROM' LENGTH                       88311\n         MVCL  R14,R0        COPY (OR LEFT-ADJUST)               88311\n         SPACE 1\n*        SEARCH COMMND TABLE FOR MATCHING COMMAND TEXT\n         SPACE 1\n         L     R1,=A(PRELOGON)  GET PRE-LOGON COMMANDS           88179\n         L     R3,RPLUSFLD   GET TERM ENTRY                      88179\n         TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BZ    CMDSCAN1      NO                                  88179\n         TM    TERMFLG3,TFLON  LOGON COMPLETED ?                 88179\n         BZ    CMDTABLP      NO; RESTRICT TO LOCAL COMMANDS      88179\nCMDSCAN1 L     R1,=A(PRECMDTB)  SET FOR VTAM LOGON APPLID SCAN   88172\n         B     CMDTABLP      AND DO NORMAL SCAN                  87186\nCMDSCAN2 L     R1,=A(CMDTAB)                                     88172\nCMDTABLP C     R1,=A(CMDTABND)  END OF TABLE ?                   88172\n         BL    CMDTABL1      NO                                  88172\n         LA    R0,MSG07                YES => LOAD ERROR MSG #\n         L     R3,RPLUSFLD   GET TERM ENTRY                      88179\n         CLI   TERMMSGX,MSG20  LOGON REQUEST LAST WRITE ?        89066\n         BE    FAKEPSWD      YES; FAKE PASSWORD COMMAND          89066\n         TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BZ    SENDMSG       NO; SEND ERROR MESSAGE              88179\n         TM    TERMFLG3,TFLON  LOGON COMPLETED ?                 88179\n         BNZ   SENDMSG       YES; SEND MESSAGE                   88179\nFAKEPSWD L     R1,=A(PSWCMD) SET FOR FAKE MATCH                  89066\n         LA    R6,DATASEQ    POINT TO LOGON DATA AGAIN           88193\n         SLR   R2,R2                                             88193\n         IC    R2,DATASEQL   RESTORE THE LENGTH                  88193\n         B     CMDSETUP      AND PROCESS LOGON                   88179\nCMDTABL1 SLR   R2,R2         CLEAR FOR IC                        88185\n         IC    R2,CMDTEXTL(R1)         LOAD LENGTH OF CMDTEXT    88185\n         LA    R4,CMDTEXT(,R1)         PT @ CMDTEXT\n         LA    R6,DATASEQ              PT @ LOGON DATA\nCMDTABL2 CLC   0(1,R4),0(R6)           DOES THIS CHAR MATCH?\n         BNE   CMDTABL3                NO => GET NEXT ENTRY\n         LA    R4,1(,R4)               YES => COMPARE\n         LA    R6,1(,R6)                        NEXT\n         BCT   R2,CMDTABL2                        CHARACTER PAIR\n*        TO ENSURE UNIQUENESS OF CMDS, COMMAND TEXT MUST\n*        END WITH A BLANK OR BE AT THE END OF THE CMD BUFFER.\n         CLI   0(R6),X'40'             IS NEXT CHAR A BLANK?\n         BNH   CMDFOUND                YES => CMD IS A MATCH     86146\n         BCTR  R6,0                                              92320\n         CLI   0(R6),C'('    APPLID ?                            92320\n         BE    CMDFOUND      YES; ACCEPT AS TERMINATOR           87186\nCMDTABL3 LA    R1,CMDTABL(,R1)         NO => GET\n         B     CMDTABLP                          NEXT ENTRY\n         SPACE 1\n*        MATCHING CMD HAS BEEN FOUND\n         SPACE 1\n*        CHECK IF CMD IS VALID FOR THE SOURCE OF THE CMD\nCMDFOUND L     R3,RPLUSFLD   RELOAD TERM ENTRY                   86127\n         TM    UFLAGS,INIT             CMD ISSUED DURING NETSOL INIT?\n         BZ    CMDCKTRM                NO  => CHECK IF CMD OK FROM TERM\n         TM    CMDFLAG(R1),CMDINIT     CMD VALID FROM SYSIN?\n         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK\n         B     CMDSETUP      SKIP SYSTEMS ONLY CHECK AND DO      86125\nCMDCKTRM TM    TERMFLAG,TERMCONS  IS THIS A CONSOLE ?            88192\n         BNZ   CMDCKCON      YES; CHECK CONSOLE                  88192\n         TM    CMDFLAG(R1),CMDTERM  VALID FROM TERMINAL ?        88192\n         BNZ   CMDCKCKD      YES; PROCEED                        88192\n         B     CMDTABL3      LOOK FOR ALTERNATIVE ENTRY          88192\nCMDCKCON TM    CMDFLAG(R1),CMDCONS  VALID FROM CONSOLE ?         88192\n         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK\n*        SET UP PARAMETERS FOR GETPARM SUBROUTINE\nCMDCKCKD TM    TERMFLG3,TFREQ  LOGON REQUESTED ?                 88185\n         BZ    CMDSETGP      NO; USE CODE FOR OPEN TERMINALS     88185\n         CLI   CMDAPPF(R1),0  APPLICATION GROUP RESTRICTION ?    88185\n         BE    CMDSETGP      NO                                  88185\n         TM    TERMFLG3,TFLON  USER LOGGED ON ?                  88185\n         BZ    CMDNAUTH      NO; UNAUTHORIZED                    88185\n         AIF   ('&LOCAL' NE 'PID').NOCMDEX                       92300\n         L     R14,TERMLOUD  GET USER'S DATA                     88185\n         SLR   R0,R0                                             88185\n         IC    R0,A$USUBFG-A$LOUD(,R14)  LOAD AUTHORIZED SYSTEMS 88185\n         SLR   R15,R15                                           88185\n         IC    R15,CMDAPPF(,R1)  LOAD THE CURRENT GROUP          88185\n         NR    R0,R15        IS THE USER AUTHORIZED ?            88185\n         BZ    CMDNAPPL      NO                                  88185\n         CLI   CMDAPPF(R1),A$USFCIC  CICS ?                      88185\n         BNE   CMDSETGP      CONTINUE WITH OLD CHECKS            88185\n         LA    R15,A$UCICNM-A$LOUD(,R14) POINT TO MASK           88185\n         LA    R0,CMDVAPPL(,R1)  POINT TO TEST VALUE             88185\n         BAL   R14,MASKTEST  CHECK FOR (MASKED) COMPARE          88185\n           B   CMDSETGP      MATCH; PROCEED                      88185\n         LA    R15,8(,R15)   TRY OTHER VALUE                     88185\n         BAL   R14,MASKTEST                                      88185\n           B   CMDSETGP      MATCH; ALLOW                        88185\n         TM    TERMFLG3,TPRIVY  PRIVILEGED ?                     88185\n         BZ    CMDNAPPL      NO; FAIL                            88185\n.NOCMDEX ANOP  ,                                                 91195\nCMDSETGP TM    TERMFLG3,TPRIVY    PRIVILEGED USER ?              86065\n         BNZ   CMDSETUP      YES                                 86065\n         L     R0,=A(CMDUNTAB)  POINT TO UNPRIVILEGED TABLE      88172\n         TM    TERMFLG3,TFAPL  FORCED USER APPLID ?              88220\n         BNZ   CMDSETUA      YES                                 88220\n         CLI   TERMDAPL,0    ANY FORCED APPLICATION ?            87137\n         BNH   CMDSETOP      NO; CHECK FOR LOCKED MODE           87137\nCMDSETUA CR    R1,R0         PRIVILEGED COMMAND ?                88192\n         BNL   CMDSETUP      NO; ALLOW                           88192\n         LA    R0,MSG08      XXX IS NOT ACTIVE                   87137\n         MVC   APPLID,TERMAPPL  COPY FORCED APPLICATION ID       88222\n         TM    TERMFLG3,TFAPL  FORCED APPLICATION ?              88220\n         BNZ   SENDMSG       YES; SEND FALSE MESSAGE             88220\n         MVC   APPLID,TERMDAPL  SHOW UNAVAILABLE APPLICATION     88220\n         B     SENDMSG       SEND FALSE MESSAGE                  87137\nCMDSETOP TM    UFLAGS,UFGSYS   SYSTEMS ONLY ?                    86065\n         BZ    CMDSETUP      NO; PROCEED                         86065\n         CR    R1,R0         PRIVILEGED COMMAND ?                88192\n         BNL   CMDSETUP      NO; ALLOW (PRIVY CMDS CHECK AGAIN)  88192\nCMDNTNOW LA    R0,MSG14      SET FOR UNTIMELY REQUEST            87187\n         B     SENDMSG       AND FAIL THIS REQUEST               86065\nCMDNAPPL LA    R0,MSG05      SET UNAUTHORIZED REQUEST            88192\n         B     SENDMSG       AND FAIL                            88192\nCMDNAUTH LA    R0,MSG18      SET UNAUTHORIZED REQUEST            87187\n         B     SENDMSG                                           87187\nCMDSETUP TM    TERMFLG3,TPRIVY  PRIVILEGED USER ?                88192\n         BNZ   CMDSETGO      YES; PROCEED                        88192\n         TM    CMDFLAG(R1),CMDAUTH  RESTRICTED COMMAND ?         88192\n         BNZ   CMDNAUTH      YES; FAIL                           88192\nCMDSETGO ST    R6,GPDATAP    SAVE CURRENT CMD BUFFER PTR         88192\n         LA    R2,DATASEQ              CALCULATE\n         SR    R6,R2                     LENGTH OF CMD\n         SLR   R2,R2                   CALCULATE\n         IC    R2,DATASEQL               LENGTH OF TEXT\n         SR    R2,R6                       REMAINING IN CMD BUFFER\n         STH   R2,GPDATAL              SAVE FOR USE BY GETPARM\n*        BRANCH TO CMD PROCESSING ROUTINE\n         L     R3,RPLUSFLD   ENSURE CORRECT TTE ADDRESS          88192\n         L     R2,CMDROUTA(,R1)        LOAD A(CMD ROUTINE)\n         BR    R2                        AND BR TO IT\n         SPACE 1                                                 87186\n*        BUFFER BEGINS WITH 'LOGON' - SCAN FOR APPLID (AND OUR SHORTER\n*        APPL().  IF FOUND, USE CONTENTS OF () AS NAME, AND SCAN 87186\n*        FOR DATA(). IGNORE LOGMODE() AND OTHER STUFF)           87186\n*                                                                87186\nPRETEST  L     R6,DATAPTR    POINT TO INPUT                      87186\n         SLR   R4,R4                                             87186\n         IC    R4,DATASEQL   GET LENGTH OF INPUT                 87186\n         LA    R0,4+1        SET LENGTH FOR 'APPL' AND '('       87186\nPRETELP  CLC   =C'APPLID(',0(R6)  NON-TSO ENTRY ?                87186\n         BE    PRETE6        MAYBE                               87186\n         CLC   =C'APPL(',0(R6)  ALTERNATE FORM ?                 87186\n         BE    PRETE4        YES                                 87186\n         LA    R6,1(,R6)     UP, UP                              87186\n         BCT   R4,PRETELP    . . . AND AWAY                      87186\n         B     CMDSCAN2      NO; REAL TSO (?)                    87186\nPRETE6   LA    R0,2+4+1      SET FOR 'APPLID(' LENGTH            87186\nPRETE4   AR    R6,R0         SKIP FOR 'APPL' AND '('             87186\n         SR    R4,R0         ADJUST RESIDUAL LENGTH              87186\n         SLR   R2,R2                                             87186\n         SLR   R3,R3                                             87186\nPRETEAP  LTR   R4,R4         ANY MORE ?                          87186\n         BNP   PRETEAD       NO; DONE                            87186\n         CLI   0(R6),C')'    END ?                               87186\n         BE    PRETEAD       YES                                 87186\n         SLDL  R2,8          MAKE ROOM FOR ANOTHER               87186\n         IC    R3,0(,R6)     LOAD IT                             87186\n         LA    R6,1(,R6)                                         87186\n         BCT   R4,PRETEAP                                        87186\n         B     APPLBAD       BAD/UNKNOWN APPL                    87186\nPRETEAD  L     R6,DATAPTR    RESTART AT BEGINNING                87186\n         SLR   R4,R4                                             87186\n         IC    R4,DATASEQL   GET LENGTH AGAIN                    87186\nPRETEDAL CLC   =C'DATA(',0(R6)  DATA ?                           87186\n         MVI   0(R6),C' '    CLEAR IT ANYWAY                     87186\n         BE    PRETEDAD      YES                                 87186\n         LA    R6,1(,R6)                                         87186\n         BCT   R4,PRETEDAL   KEEP IT UP                          87186\n         B     PRETEDAA      PUT THE APPLICATION NAME IN         87186\nPRETEDAD MVC   1(4,R6),0(R6)  BLANK IT                           87186\n         LA    R0,5          SET INCREMENT                       87186\n         AR    R6,R0         BUMP OVER                           87186\n         SR    R4,R0         ADJUST RESIDUAL LENGTH              87186\nPRETEDDL CLI   0(R6),C')'    END ?                               87186\n         BE    PRETEDAL      YES; START BLANKING AGAIN           87186\n         LA    R0,1          SET INCREMENT                       87186\n         AR    R6,R0                                             87186\n         SR    R4,R0                                             87186\n         BP    PRETEDDL      TRY AGAIN                           87186\nPRETEDAA L     R6,DATAPTR    SET RESCAN START                    87186\n         STM   R2,R3,0(R6)   STASH DESIRED APPLICATION NAME      87186\n         SLR   R2,R2                                             87186\n         IC    R2,DATASEQL   GET ORIGINAL LENGTH BACK            87186\n         B     INTRPRET      AND RESCAN                          87186\n         SPACE 1                                                 88185\n*        MASKED COMPARISON                                       88185\n*        R0 - VALUE  R15 - MASK    R14 RETURN                    88185\n*                                                                88185\nMASKTEST STM   R14,R1,12(R13)   SAVE                             88185\n         LR    R1,R0         COPY VALUE OVER                     88185\n         LA    R0,8          NUMBER TO SCAN                      88185\n         LA    R14,1         INCREMENT                           88185\nMASKTESL CLI   0(R15),C'*'   GENERAL COMPLETE MATCH ?            88185\n         BE    MASKTESX      YES; RETURN MATCHED                 88185\n         CLI   0(R15),C'?'   CHARACTER MATCH ?                   88185\n         BE    MASKTESB      YES; BUMP                           88185\n         CLC   0(1,R15),0(R1)  MATCH ?                           88185\n         BE    MASKTESB      YES; BUMP                           88185\n         LM    R14,R1,12(R13)   RESTORE                          88185\n         B     4(,R14)       RETURN NO MATCH                     88185\nMASKTESB AR    R1,R14                                            88185\n         AR    R15,R14                                           88185\n         BCT   R0,MASKTESL   TRY NEXT ENTRY                      88185\nMASKTESX LM    R14,R1,12(R13)                                    88185\n         BR    R14           RETURN MATCHED                      88185\n         SPACE 1                                                 90141\n         LTORG ,                                                 90141\n         TITLE '*********  N E T S O L  -  CHECK APPLICATION STATUS'\n***********************************************************************\n*                                                                     *\n*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *\n*    OF THE VTAM APPLICATION ASSOCIATED WITH THE LOGON DATA.          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCHKAPPL  MVC   APPLID(8),CMDVAPPL(R1)  SAVE APPLID FROM CMD TABLE ENTRY\n         LA    PTRNIB,SYNCHNIB         PUT THE APPLICATION\n         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT\n         SPACE 1\n***********************************************************************\n*    INQUIRE FOR THE APPLICATION STATUS                               *\n***********************************************************************\n         SPACE 1\nINQUIREB OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT\n         OI    MFLAGS,INQAPPST\n         L     R15,=A(FRSYNRPL)  GET FRESH SYNCHRONOUS RPL       86065\n         MVC   SYNCHRPL(FRSYNL),0(R15)  AND RE-INITIALIZE        86065\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,SYNUSFLD             SAVE IN SYNCHRPL USER FIELD\n         INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=APPSTAT,                                          X\n               NIB=SYNCHNIB\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n         NI    SRPLEXT1,FF-RPLNIB      NIB NO LONGER NEEDED\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  0C  06           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION   86127\n         BNH   ERRTAB4B      JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\nERRTAB4B B     ERRTAB4(R15)            CHECK VALID ACTIONS       86127\nERRTAB4  B     R0CHK4               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS\n*                                      IRRELEVANT\n         B     APPLBAD              C  THIS IS NORMAL CASE FOR\n*                                      APPLICATION UNKNOWN\n         B     INQUIREB            10  REISSUE.  NO NEED TO\n         B     APPLBAD       14 - NETSOL/INTTAB/VTAMLST OUT OF SYNCH\n         SPACE 1\nR0CHK4   CH    R0,=H'10'     NOT ACCEPTING LOGONS ?              93169\n         BE    APPINACT      YES; SAY SO                         93169\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2                                                 90120\n***********************************************************************\n*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *\n*    CODES ARE:                                                       *\n*                                                                     *\n*        0 - ACTIVE AND AVAILABLE                                     *\n*        4 - INACTIVE                                                 *\n*        8 - NEVER ACCEPTS A LOGON                                    *\n*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *\n*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *\n***********************************************************************\n         SPACE 2\n         SLR   R15,R15                 CLEAR  REG 15\n         IC    R15,SYNFDB3             EXTRACT FEEDBACK INFO.\n         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.\n         B     STATUS(R15)             BRANCH IN TABLE\nSTATUS   B     APPACTIV             0\n         B     APPINACT             4\n         B     APPNEVER             8\n         B     APPTEMP             12\n         B     APPCLOSE            16\n         SPACE 1\nAPPTEMP  DS    0H                      APPLICATION TEMPORARILY NOT\n*                                      ACCEPTING LOGONS\n         LA    R0,MSG11                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPNEVER DS    0H                      APPLICATION NEVER ACCEPTS LOGONS\n         LA    R0,MSG10                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPINACT DS    0H                      APPLICATION INACTIVE\n         LA    R0,MSG08                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPCLOSE DS    0H                      APPLICATION QUIESCING\n         LA    R0,MSG09                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPLBAD  DS    0H                      BAD APPLICATION NAME\n         LA    R0,MSG07                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         TITLE '*********  N E T S O L  -  CLSDST(PASS) FUNCTION'\n***********************************************************************\n*    THE APPLICATION IS ACTIVE AND AVAILABLE. PASS THE TERMINAL PLUS  *\n*    LOGON DATA TO THE DESIRED APPLICATION.                           *\n***********************************************************************\n         SPACE 2\nAPPACTIV OI    FLAGS,CLEARSCR          MUST ISSUE CLEAR SCREEN\n         L     R15,=A(S32M6APL)                                  86012\n         USING S32M6APL,R15                                      86012\n         MVC   S32M6APL,APPLID  SHOW CONNECTING ID               86012\n         L     R15,=A(S3EM6APL)                                  88172\n         USING S3EM6APL,R15                                      88172\n         MVC   S3EM6APL,APPLID  DITTO FOR 3270 WITH EDS          86012\n         L     R15,=A(S37M6APL)                                  86065\n         USING S37M6APL,R15                                      86065\n         MVC   S37M6APL,APPLID  DITTO FOR 3767/TTY               86012\n         L     R15,=A(MD5M6APL)                                  90042\n         USING MD5M6APL,R15                                      90042\n         MVC   MD5M6APL,APPLID  DITTO FOR MODEL 5 327X           90042\n         DROP  R15                                               86012\n         LA    R0,MSG06                SEND LOGON IN PROGRESS\n         B     SENDMSG                 GO ISSUE SEND\n         SPACE 1\nCONTPASS NI    FLAGS,255-(CLEARSCR)    TURN OFF FLAG TO INDICATE RETURN\n         SLR   R2,R2                   CLEAR\n         IC    R2,DATASEQL             GET DATA SEQUENCE LENGTH PASSED\n*                                       FROM INTRPRET\n         LA    R4,DATASEQ              ADDRESS OF DATA TO PASS\n         SPACE 1\nFINDBLNK CLI   0(R4),X'40'             IS IT A BLANK?\n         BE    FINDDATA                YES SEE IF ANY DATA FIELD\n         LA    R4,1(R4)                OVERWISE GO TO NEXT BYTE\n         BCT   R2,FINDBLNK             DECREASE COUNT TRY NEXT\n         SPACE 1\nNODATA   SLR   R4,R4                   CLEAR REG TO SAY NO DATA\n         B     FILLNIB                 GO ISSUE PASS WITH NO DAT\n         SPACE 1\nFINDDATA LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),X'40'             IS IT STILL A BLANK?\n         BNE   DATAFOND                NO SO WE HAVE DATA\n         BCT   R2,FINDDATA             TRY AND FIND MORE DATA\n         B     NODATA                  ISSUE PASS WITH NO DATA\n         SPACE 1\nDATAFOND BCTR  R2,0                    END OF LOGON BUT NO DATA\n         LTR   R2,R2                   NO MORE DATA?\n         BZ    NODATA                  ISSUE CLSDST WITH NO DATA\n         SPACE 1\n***********************************************************************\n* THIS CODE WILL CHECK IF THE REQUESTED APPLICATION IS ONE THAT NEEDS *\n* A SPECIAL LOGMODE ENTRY. IF SO, THE ASSOCIATED LOGMODE ENTRY IN THE *\n* TABLE WILL BE ADDED TO THE NIB PRIOR TO THE CLSDST(PASS).           *\n***********************************************************************\n         SPACE 1\nFILLNIB  LA    PTRNIB,NIBSTART         USE NIB CONTAINED IN RPL.\n         MVC   NIBLMODE,MODENAM  ZERO OR LOGMODE TABLE NAME      88206\n         LA    R1,LOGMDTAB             PT @ LOGMODE TABLE\nLOGMDLP  CLC   LOGMDAPP(8,R1),=XL8'FFFFFFFFFFFFFFFF' END OF TABLE?\n         BE    SKIPLOGM                YES => USE DEFAULT ENTRY\n         CLC   APPLID(8),LOGMDAPP(R1)  DOES APPLID MATCH TABLE ENTRY?\n         BE    INSRTLGM                YES => GO INSERT LOGMODE NAME\n         LA    R1,LOGMDLEN(,R1)        NO  => GET NEXT TABLE ENTRY\n         B     LOGMDLP                        & PROCESS IT\nINSRTLGM MVC   NIBLMODE,LOGMDENT(R1)  MOVE LOGMODE NAME INTO NIB\n         SPACE 1\nSKIPLOGM L     R3,RPLUSFLD             -> TTE\n         MVC   NIBSYM(8),TERMNAME      COPY TERMINAL NAME TO NIB\n         SPACE 1\nPASS     OI    MFLAGS,CLSDST           CLSDST(PASS) BEING DONE\n         OI    MACFLAGS,CLOSPASS\n         SPACE 1\n         CLSDST  RPL=(PTRRPL),NIB=(PTRNIB),OPTCD=(ASY,PASS),           *\n               AAREA=APPLID,AREA=(R4),RECLEN=(R2),EXIT=PASSEND   90120\n         NI    MFLAGS,255-(CLSDST)\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(PASS)                                     *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    PASS                    YES. REISSUE\n         LTR   R15,R15                 CLOSE(PASS) ACCEPTED\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   VALID COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  RETURN TO VTAM\n         TITLE '*********  N E T S O L  -  CLSDST(PASS) EXIT RTN'\n***********************************************************************\n*                                                                     *\n*        CHECK THAT THE CLSDST(PASS) WORKED CORRECTLY                 *\n*                                                                     *\n*        THIS EXIT ROUTINE IS SCHEDULED WHEN A CLSDST (PASS)          *\n*        IS ISSUED.  THE CLSDST IS ISSUED WHEN A VALID LOGON          *\n*        SEQUENCE HAS BEEN RECEIVED FROM THE TERMINAL AND             *\n*        THE DESIRED APPLICATION IS RECEIVING LOGON'S.                *\n*                                                                     *\n*        REGISTER 5 CONTAINS THE ADDRESS OF THE RPL USED              *\n*            IN THE CLSDST.                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPASSEND  MHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         LR    PTRRPL,R1               GET THE RPL PASSED\n         LA    R13,RPLSAVE             R13 -> RPL SAVE AREA\n         SPACE 1\n         OI    MFLAGS,CLSDST           INDICATE IN PASSEND\n         OI    EXITFLAG,PASSEX\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(CLSDST)\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(PASS)                                     *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   00    08    QUEUED SESSION ALREADY EXISTS        00  08           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *\n*   10    00    APPLICATION UNAVAILABLE              0C  08           *\n*   10    02    TARGET APPLICATION UNACCEPTABLE      0C  09           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0D    VTAM INACTIVE TO YOUR ACB            SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    13    CID INVALID                          14  00           *\n*   14    4B    INVALID LOGMODE ENTRY SPECIFIED      0C  01           *\n*   14    53    TERMINAL NOT DEFINED CROSS DOMAIN    0C  03           *\n*   14    55    NO OPNDST AUTHORIZATION              0C  05           *\n*   14    5D    OPNDST INVALID (TERM NOT CONNECTED)  14  00           *\n*   14    5F    RESOURCE NOT OWNED                   14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB5(R15)            CHECK VALID ACTIONS\nERRTAB5  B     R0CHK5               0  PROBABLY PASSED DEVICE\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8\n         B     SENDMSG              C  NORMAL CASE IF APPLI-\n*                                       CATION STOPPED ACCEPT-\n*                                       ING LOGONS SINCE THE\n*                                       INQUIRE\n         B     RESEND              10  LET USER TRY AGAIN LATER\n         B     FREERPL             14  IT COULD BE THAT NETSOL\n*                                       NO LONGER HAS THE\n*                                       DEVICE SINCE IT WAS\n*                                       FREED BY RELREQ AFTER\n*                                       THE READEND EXIT WAS\n*                                       SCHEDULED.\nR0CHK5   DS    0H\n         CH    R0,HEX8             08  QUEUED SESSION EXISTS\n         BE    QSESSION                 => ISSUE CLSDST RELEASE\n         LTR   R0,R0                   ANYTHING BUT FDBK2=08\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         TITLE '*********  N E T S O L  -  SIMLOGON FUNCTION'\nSIMLOGON LA    PTRNIB,SYNCHNIB         GET ADDRESS OF NIB\n         L     R15,=A(FRSYNRPL)  GET FRESH SYNCHRONOUS RPL       86065\n         MVC   SYNCHRPL(FRSYNL),0(R15)  AND RE-INITIALIZE        86065\n         L     R3,RPLUSFLD             -> TTE\n         MVI   TERMFLG2,TPASSED        MARK TERM NOT ON NETSOL\n         MVC   TERMAPPL,APPLID         REMEMBER APPL FROM CLSDST(PASS)\n         ST    R3,NIBUSER              SAVE IN THE USER FIELD\n         ST    R3,SYNUSFLD             SAVE IN SYNCHRPL USER FIELD\n         MVC   NIBSYM(8),TERMNAME      TERMINAL NAME TO NIB\n         SPACE 1                                                 88185\n         AIF   ('&LOCAL' NE 'PID').NOSIMEX                       92300\n         ICM   R0,15,TERMLOUD  IS THERE A LOUD ?                 88185\n         BZ    SIMLOGOL      NO; SKIP                            88185\n         CLC   =C'TS',TERMAPPL  TSO ?                            88185\n         BE    SIMLOGOL      YES; LET TSO DO IT                  88185\n         CLC   =C'WY',TERMAPPL  WYLBUR ?                         88185\n         BE    SIMLOGOL      DITTO                               88185\n         CLC   =C'EX',TERMAPPL  EXHIBIT ?                        88185\n         BE    SIMLOGOL                                          88185\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT PARM        88185\n         MVC   A$SID,=C'A$RB'                                    88185\n         MVC   A$SFCTN(3),=AL1(A$SFLOGN,0,A$SAKEY+A$SBUILD) LOGON\n         MVC   A$SACCT,TERMAPPL  PASS THE NAME                   88192\n         ST    R0,A$SBUFR    SET LOUD ADDRESS                    88185\n         LA    R1,A$SVCRB                                        88185\n         SVC   249           BEGIN A SESSION                     88185\n.NOSIMEX SPACE 1                                                 91195\n         SPACE 1\nSIMLOGOL OI    MFLAGS,SMLOGON          INDICATE SIMLOGON\n         OI    MACFLAGS,SIMLGON\n         SIMLOGON RPL=SYNCHRPL,                                        X\n               NIB=SYNCHNIB,                                           X\n               OPTCD=(Q,NRELRQ)\n         NI    MFLAGS,255-(SMLOGON)\n         XC    NIBUSER,NIBUSER         CLEAR NIB USER FIELD OUT\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SIMLOGON                                         *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    00    TERMINAL UNAVAILABLE                 14  00           *\n*   10    03    VTAM IS HALTING                      14  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    13    CID INVALID                          14  00           *\n*   10    4B    INVALID LOGON                        0C  02           *\n*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *\n*   14    54    INVALID TERMINAL NAME                14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX14               HIGHEST VALID ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB6(R15)            CHECK VALID ACTIONS\nERRTAB6  B     R0CHK6               0  CHECK IF TERM ACCEPTED\n         BAL   R7,SNOCCUR           4\n         B     FREERPL              8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         B     FREERPL              C  CAN'T SEND MSG IF NOT CONNECTED\n*                                      CONNECTED\n         B     SIMLOGON            10  REISSUE. CHECK FOR RESET\n         B     FREERPL             14  CAN'T CONNECT DEVICE\n         SPACE 1\nR0CHK6   DS    0H\n         CH    R0,HEX9                 TERM UNAVAILABLE\n         BE    FREERPL                 RETURN IF SO\n         CH    R0,HEX8                 X'0008' THAT WE SHOULD NOT GET ?\n         BE    FREERPL                 YES, IGNORE IT FOR NOW\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     FREERPL                 FREE RPL GO BACK TO VTAM\n         TITLE '*********  N E T S O L  -  SEND MESSAGES ROUTINE'\n***********************************************************************\n*                                                                     *\n*          BRANCH TO DEVICE DEPENDENT SEND ROUTINE TO WRITE           *\n*          A MESSAGE TO THE LOGICAL UNIT.                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SPACE 2\nSENDMSG  DS    0H\n         L     R3,RPLUSFLD             -> TTE\n         L     R9,TERMDDT              -> DDT FOR TERMINAL\n         L     R15,DDTSEND             -> SEND ROUTINE FOR TERMINAL\n         BR    R15                     GO SEND MESSAGE\n         SPACE 5                                                 90140\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FOR COLOR AND WIDE SCREEN, ATTEMPT BUFFER COMPRESSION        *\n*                                                                     *\n*              ERROR RECOVERY WORKS BETTER WHEN BUFFER <= R.U. SIZE   *\n*                                                                     *\n*---------------------------------------------------------------------*\nS32COMP  DS    0H            NORMAL 3270 COMPRESSION ROUTINE     90141\nS3ESEND  ICM   R15,15,COMP3270  COMPRESS ROUTINE LOADED ?        90140\n         BZ    S32SEND       NO; NORMAL CRT SEND                 90140\n         CLM   R0,1,=AL1(12) MENU SCREEN ?                       90140\n         BE    S3ESEND2      YES; PROCESS                        90140\n         CLM   R0,1,=AL1(13) CLOSED ?                            90140\n         BE    S3ESEND2      YES; PROCESS                        90140\n         CLM   R0,1,=AL1(20) PASSWORD SCREEN ?                   90140\n         BNE   S32SEND       NO; DO NORMALLY                     90140\nS3ESEND2 XC    COMPPARM(OPSEQLEN),COMPPARM  CLEAR WORK AREA      90140\n         L     R7,=A(SENDEND)  SEND END EXIT                     90141\n         TM    TERMFLAG,SENDSCED   IS THERE A SEND (POST=SCHED)  90140\n         BO    MISSSEND-SENDEND(R7)   IF SO, DO NOT ISSUE A NEW ONE\n         NI    TERMFLAG,255-(LOGPROC) INDICATE NOT IN LOGON FUNCTION\n         TM    RPLRH3,RPLEB  END BRACKET DUE TO MSG 6 ?          90140\n         BNO   S3EMSG2       NO, STILL IN BRACKET                90140\n         NI    RPLRH3,X'FF'-RPLEB      CLEAR END BRACKET STATE   90140\n         OI    RPLRH3,RPLBB  3276 MIGHT LIKE TO KNOW             90140\nS3EMSG2  STC   R0,MSGINDEX   SAVE MESSAGE INDEX                  90140\n         STC   R0,TERMMSGX   ALSO SAVE IN TERMINAL BLOCK         90140\n         TM    FLAGS,FIRSTSND   IS THIS FIRST SEND AFTER OPNDST  90140\n         BZ    S3EMSGOK                                          90140\n         OI    RPLRH3,RPLBB  INDICATE BEGIN BRACKET              90140\n         NI    FLAGS,255-(FIRSTSND)    NEXT SEND WITHOUT BRACKET 90140\nS3EMSGOK SLR   R1,R1         CLEAR OUT REG                       90140\n         IC    R1,MSGINDEX   GET THE INDEX                       90140\n         LA    R2,X'FF'-X'80'   TURN OFF POSSIBLE RESET          90140\n         NR    R1,R2         INDICATOR PRIOR TO INDEXING         90140\n         SLL   R1,2          4 * (INDEX)                         90140\n         L     R2,DDTMSGTB-4(R1)  POINT TO MSG. ENTRY IN TABLE   90140\n         LH    R1,0(,R2)     GET MESSAGE LENGTH                  90140\n         S     R1,=F'2'      REDUCE BY LENGTH FIELD AT FRONT     90140\n         LA    R2,2(R2)      POINT TO ACTUAL MSG.                90140\n         ST    R2,COMPPARM+8 SET INPUT ADDRESS                   90140\n         ST    R1,CPINLEN    SET INPUT LENGTH                    90140\n         LA    R14,24*80                                         90140\n         C     R9,=A(DDTMDL5)  MODEL 5 SIZE ?                    90140\n         BNE   *+8           NO                                  90140\n         LA    R14,27*132    LOAD LARGER SIZE                    90140\n         ST    R14,CPBUFLEN  STASH IT                            90140\n         MVI   OPFUN,OFYCCW  CCW PRESENT                         90140\n         MVI   OPADD,OPA14   14-BIT ADDRESSING AVAILABLE         90140\n         MVI   OPCOL,OPSEVEN 7-COLOR AVAILABLE (MAY BE A LIE)    90140\n         MVI   OPHIGH,OPSEVEN  HIGH-LIGHTING AVAILABLE (FAIRLY SURE)\n         LA    R6,IOAREA               POINT TO OUTPUT AREA      90140\n         ST    R6,COMPPARM   SET OUTPUT BUFFER ADDRESS           90140\n         LA    R14,LMSG12    SET MAXIMUM OUTPUT AREA             90140\n         ST    R14,CPOUTLEN  STASH IN PARM LIST                  90140\n         LA    R14,CPOUTLEN  GET POINTER TO OUTPUT LENGTH        90140\n         ST    R14,COMPPARM+4  STASH IT                          90140\n         LA    R14,CPINLEN   POINT TO INPUT LENGTH               90140\n         ST    R14,COMPPARM+12  STASH IN LIST                    90140\n         LA    R14,CPBUFLEN  GET BUFFER LENGTH                   90140\n         ST    R14,COMPPARM+16  STASH                            90140\n         LA    R14,OPFUN     POINT TO OPTION LIST                90140\n         ST    R14,COMPPARM+20  STASH IN LIST                    90140\n         CLI   MSGINDEX,MSG12  IS IT MSG12?                      90140\n         BNE   S3ECONT       NO                                  90140\n         BAL   R14,TIMETERM  ADD NODE NAME & TIME TO MSG         90140\n         B     S3ECONT2                                          90140\nS3ECONT  CLI   MSGINDEX,MSG13  NEW MESSAGE 13 ?                  90140\n         BNE   S3ECONT3      NO                                  90140\n         AH    R9,=Y(DDTTERM3-DDTTERM)  FINAGLE DDT BASE         90140\n         BAL   R14,TIMETERM  ADD TERMINAL NAME AND TIME          90140\n         SH    R9,=Y(DDTTERM3-DDTTERM)  RESTORE R9               86065\n         B     S3ECONT2      JOIN COMMON                         90140\nS3ECONT3 CLI   MSGINDEX,MSG20  NEW MESSAGE 20                    88179\n         BNE   S32SEND       MAJOR BOOBOO ?                      90140\n         AH    R9,=Y(DDTTERM2-DDTTERM)  FINAGLE DDT BASE         90140\n         BAL   R14,TIMETERM  ADD TERMINAL NAME AND TIME          90140\n         SH    R9,=Y(DDTTERM2-DDTTERM)  RESTORE R9               90140\nS3ECONT2 LA    R1,COMPPARM   GET PARM LIST                       90140\n         L     R15,COMP3270  GET COMPRESSION ROUTINE ADDRESS     90140\n         BALR  R14,R15       CALL IT                             90140\n         CH    R15,=H'8'     DID WE MAKE A BOOBOO ?              90140\n         BNL   S32SEND       NO; DO THE SLOW WAY                 90140\n         L     R0,CPOUTLEN   GET NEW OUTPUT LENGTH               90140\n         ST    R0,SENDLEN    SAVE LENGTH OF SEND                 90140\n         B     SEND          JOIN COMMON SEND PROCESSING         90140\n         TITLE '*********  N E T S O L  -  SEND ROUTINE FOR 3270'\n***********************************************************************\n*                                                                     *\n*          S32SEND EDITS AND SENDS NETSOL MESSAGES TO 3270 DEVICES.   *\n*                                                                     *\n*          ALL MESSAGES SENT ARE ASYNCHRONOUS USING THE RPL PASSED    *\n*          IN R5.                                                     *\n*                                                                     *\n*               ON ENTRY:                                             *\n*                  REG. 0 CONTAINS MESSAGE NUMBER                     *\n*                  REG. 3 POINTS TO TTE OF ACTIVE TERMINAL            *\n*                  REG. 5 POINTS TO RPL BEING USED                    *\n*                  REG. 9 POINTS TO DDT FOR TERMINAL                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nS37SEND  DS    0H                                                86145\nS32SEND  DS    0H                                                86153\n         CLM   R0,1,=AL1(MSG06)        LOGON MESSAGE ?\n         BNE   S32MSG1                 NO, THEN DON'T SEND MSG WITH EB\n         OI    TERMFLAG,LOGPROC        SINCE SENDING MSG IS LOGON\n         OI    RPLRH3,RPLEB            SEND WITH END BRACKET ON\n*                                      AS 3276 MAY GET UPSET ON CLSDST\n         B     S32MSG2                 SKIP CHECK FOR EB SEND\n         SPACE 1\nS32MSG1  L     R7,=A(SENDEND)  SEND END EXIT                     90141\n         TM    TERMFLAG,SENDSCED   IS THERE A SEND (POST=SCHED) DC18203\n*                                   ALREADY ISSUED FOR THIS LU  DC18203\n         BO  MISSSEND-SENDEND(R7)  IF SO DO NOT ISSUE A NEW ONE DC18203\n         NI  TERMFLAG,255-(LOGPROC) INDICAT NOT IN LOGON FUNCTION\n         TM    RPLRH3,RPLEB            END BRACKET DUE TO MSG 6 ?\n         BNO   S32MSG2                 NO, OKAY STILL IN BRACKET\n         NI    RPLRH3,X'FF'-RPLEB      CLEAR END BRACKET STATE\n         OI    RPLRH3,RPLBB            3276 MIGHT LIKE TO KNOW\n         SPACE 1\nS32MSG2  DS    0H\n         STC   R0,MSGINDEX             SAVE MESSAGE INDEX\n         STC   R0,TERMMSGX   ALSO SAVE IN TERMINAL BLOCK         86160\n         TM    FLAGS,FIRSTSND          IS THIS FIRST SEND AFTER OPNDST\n         BZ    S32MSGOK\n         OI    RPLRH3,RPLBB            INDICATE BEGIN BRACKET\n         NI    FLAGS,255-(FIRSTSND)    NEXT SEND WITHOUT BRACKET\n         SPACE 1\n***********************************************************************\n*        FIND OUTPUT MESSAGE AND LENGTH                               *\n***********************************************************************\n         SPACE 1\nS32MSGOK DS    0H\n         SLR   R1,R1                   CLEAR OUT REG\n         IC    R1,MSGINDEX             GET THE INDEX\n         LA    R2,X'FF'-X'80'          TURN OFF POSSIBLE RESET\n         NR    R1,R2                    INDICATOR PRIOR TO INDEXING\n         SLL   R1,2                    4 * (INDEX)\n*                                      = DISPLACEMENT OF MESSAGE +4\n         L     R2,DDTMSGTB-4(R1)       POINT TO MSG. ENTRY IN TABLE\n         LH    R1,0(,R2)               GET MESSAGE LENGTH\n         S     R1,=F'2'                REDUCE BY LENGTH FIELD AT FRONT\n         LA    R2,2(R2)                POINT TO ACTUAL MSG.\n         LA    R6,IOAREA               POINT TO OUTPUT AREA\n         C     R9,=A(DDTCONS)  CONSOLE REQUEST ?                 88192\n         BNE   *+8           NO                                  88192\n         LA    R6,4(,R6)     LEAVE ROOM FOR RDW                  88192\n         LR    R7,R2                   POINT TO MESSAGE AREA\n         AH    R7,DDTMSGOF              WHERE DATA ARE TO BE MOVED\n         CLI   MSGINDEX,MSG19  VARIABLE TEXT MESSAGE ?           87193\n         BNE   *+4+4+4       NO                                  87193\n         LH    R1,GPDATAL    GET OUTPUT LENGTH                   87193\n         L     R2,GPDATAP    AND ADDRESS                         87193\n         SPACE 1\n***********************************************************************\n*        REGISTER 1 CONTAINS MESSAGE LENGTH                           *\n*        REGISTER 2 POINTS TO MESSAGE                                 *\n*        REGISTER 6 POINTS TO OUTPUT AREA                             *\n*        REGISTER 7 POINTS TO MESSAGE AREA FOR VARIABLE DATA          *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*        EDIT MESSAGE 01                                              *\n***********************************************************************\n         CLI   MSGINDEX,MSG01          IS THIS MESSAGE 01?       88192\n         BNE   S32CKM7                 NO SO CARRY ON\n         LA    R8,NIBSTART             YES => POINT AT NIB\n         MVC   0(8,R7),NIBLMODE               ADD LOGMODE ENTRY TO MSG\n         B     S32CONT\n***********************************************************************\n*        EDIT MESSAGE 07                                              *\n***********************************************************************\nS32CKM7  DS    0H\n         CLI   MSGINDEX,MSG07          IS THIS MESSAGE 07?       88192\n         BNE   S32CKM8                 NO SO CARRY ON\n         MVC   0(8,R7),=CL8' '         BLANK OUT USER DATA FIELD\n         LR    R0,R1                   SAVE CONTENTS OF R1\n         SLR   R1,R1                   LOAD LENGTH\n         IC    R1,DATASEQL              OF USER DATA\n         CH    R1,=AL2(8)              IF LENGTH\n         BNH   *+8                      GREATER THAN 8\n         LA    R1,8                      THEN SET TO 8\n         BCTR  R1,0                    DECREMENT FOR MVC\n         EX    R1,S32MVAPP             MOVE APPLICATION ID TO MSG.\n         LR    R1,R0                   RESTORE R1\n         B     S32CONT                 SKIP FURTHER EDITS\nS32MVAPP MVC   0(0,R7),DATASEQ         *** EXECUTED ***\n***********************************************************************\n*        EDIT MESSAGE 8,9,10,11                                       *\n***********************************************************************\nS32CKM8  DS    0H\n         CLI   MSGINDEX,MSG08          IS MSG # LESS THAN 8?     88192\n         BL    S32CONT                 YES => BYPASS FURTHER CHECKING\n         CLI   MSGINDEX,MSG11          IS MSG # GREATER THAN 11? 88192\n         BH    S32CKM12                YES => CONTINUE MESSAGE CHECKING\n         MVC   0(8,R7),APPLID          MOVE APPLID TO MESSAGE\n         B     S32CONT                 SKIP FURTHER EDITS\n***********************************************************************\n*        EDIT MESSAGE 12                                              *\n***********************************************************************\nS32CKM12 CLI   MSGINDEX,MSG12          IS IT MSG12?              88192\n         BNE   S32CONT                 NO\n         BAL   R14,TIMETERM            ADD NODE NAME & TIME TO MSG\n         SPACE 1\n*        ALL BCSC MENUS WRITTEN FOR LOGABAX TERMINALS ARE\n*        TRACKED BY WRITING A MESSAGE TO SYSLOG.\n         SPACE 1\n*DTS*    C     R9,=AL4(DDT3767)        IF THIS IS A LOGABAX TERMINAL\n*DTS*    BNE   S32CONT                   NO  => BYPASS LOG MSG\n*DTS*    MVC   LOGMENU+17(8),TERMNAME    YES => ADD NODE NAME TO MSG\n*DTS*    MVC   LOGMENU+44(6),=CL6'LOGON'        ASSUME FROM LOGON EXIT\n*DTS*    TM    EXITFLAG,LOGONEX                 IF FROM LOGON EXIT\n*DTS*    BO    *+10                               YES=> BYPASS\n*DTS*    MVC   LOGMENU+44(6),=CL6'RESEND'         NO => MARK AS RESEND\n*DTS*    STM   R0,R1,RPLERRSA                   SAVE REGS\n*DTS*    WTO   MF=(E,LOGMENU)                   WRITE MSG TO LOG\n*DTS*    LM    R0,R1,RPLERRSA                   RESTORE REGS\n***********************************************************************\n*        MOVE MESSAGE TO OUTPUT AREA                                  *\n***********************************************************************\nS32CONT  CLI   MSGINDEX,MSG13  NEW MESSAGE 13                    86065\n         BNE   S32CONT3      NO                                  86065\n         AH    R9,=Y(DDTTERM3-DDTTERM)  FINAGLE DDT BASE         86065\n         BAL   R14,TIMETERM  ADD TERMINAL NAME AND TIME          86065\n         SH    R9,=Y(DDTTERM3-DDTTERM)  RESTORE R9               86065\nS32CONT3 CLI   MSGINDEX,MSG20  NEW MESSAGE 20                    88179\n         BNE   S32CONT2      NO                                  88179\n         AH    R9,=Y(DDTTERM2-DDTTERM)  FINAGLE DDT BASE         88179\n         BAL   R14,TIMETERM  ADD TERMINAL NAME AND TIME          88179\n         SH    R9,=Y(DDTTERM2-DDTTERM)  RESTORE R9               88179\nS32CONT2 LR    R3,R1                   LOAD MESSAGE LENGTH TO ODD REG\n         LR    R7,R1                   LOAD MESSAGE LENGTH TO ODD REG\n         MVCL  R6,R2                   MOVE MESSAGE TO OUTPUT BUFFER\n         L     R3,RPLUSFLD             RESTORE TTE POINTER\n         LA    R1,IOAREA               CALCULATE\n         SR    R6,R1                     THE MESSAGE LENGTH\n         ST    R6,SENDLEN              SAVE LENGTH OF SEND\n         SPACE 1\nSEND     OI    MFLAGS,SENDING          TELL ERREXIT ASY. SEND\n         OI    MACFLAGS,SENDASY\n         L     R2,SENDLEN              LENGTH TO SEND TO TERM\n         NI    RPLO7,255-RPLLMPEO  TURN LARGE MESSAGE OPTION OFF 86143\n         ICM   R0,15,TERMRUSZ  GET TERMINAL RU SIZE MAXIMUM      86143\n         BZ    SENDRUMX      NONE; SKIP                          86143\n         CR    R2,R0         LARGER THAN LIMIT ?                 86143\n         BNH   SENDRUMX      NO; USE IT                          86143\n         OI    RPLO7,RPLLMPEO  SET FOR DATA EXCEEDING RU SIZE    86143\nSENDRUMX L     R4,CID                  TERMINAL ADDRESS          86143\n         ST    R4,NIBCID-NIBST+NIBSTART  MAKE SURE               91105\n         C     R9,=A(DDTCONS)  CONSOLE REQUEST ?                 88192\n         BE    CONSSEND      YES; GO THERE                       88192\n         SPACE 1\n***********************************************************************\n*        CHECK TO SEE IF SEND IS FOR MESSAGE 6 (LOGON IN PROGRESS)    *\n*        AND IF SO, SEND REQUESTING A POSITIVE RESPONSE SO THAT THE   *\n*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *\n*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *\n***********************************************************************\n         SPACE 1\n         L     R7,=A(SENDEND)  SET EXIT ADDRESS                  90141\n         CLI   MSGINDEX,MSG06          LOGON IN PROGRESS MSG ?   88192\n         BE    S32SEND6                YES, DO ELSEWHERE\n         OI    TERMFLAG,SENDSCED    INDICATE A SEND TO BE ISSUEDDC18203\n         SPACE 1\n         TM    TERMFLAG,CONTENT   HALF-DUPLEX MODE ?             90135\n         BZ    S32SES32      NO; USE 3270-TYPE SEND              90135\n         NI    RPLRH3,255-RPLCMD-RPLCHREQ  NO CHG                86159\n         SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         *\n               EXIT=(R7),RPL=(PTRRPL),POST=SCHED,                      *\n               CHNGDIR=(NCMD,NREQ),ARG=(R4),                           *\n               OPTCD=(ASY,CA),RESPOND=(NEX,FME,NRRN)             86153\n         B     S32CHKSD                                          86153\n         SPACE 1                                                 86153\nS32SES32 TM    TERMFLAG,FLIPFLOP  CONVERSATIONAL MODE ?          90135\n         BNZ   S32SEND6      YES; FORCE RESPONSE                 90135\n         SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         *\n               EXIT=(R7),RPL=(PTRRPL),POST=SCHED,                      X\n               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X\n               OPTCD=(ASY,CA),RESPOND=(EX,FME,NRRN)\n         B     S32CHKSD                HANDLE LIKE REST OF SENDS\n         SPACE 1\n***********************************************************************\n*        SEND MESSAGE 6 REQUESTING A POSITIVE RESPONSE SO THAT THE    *\n*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *\n*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *\n***********************************************************************\nS32SEND6 SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         X\n               EXIT=(R7),RPL=(PTRRPL),POST=RESP,                       X\n               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X\n               OPTCD=(ASY,CA),RESPOND=(NEX,FME,NRRN)\nS32CHKSD NI    MFLAGS,255-(SENDING)\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    SEND                    YES. REISSUE\n         LTR   R15,R15                 WRITE ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND CHK)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  RETURN TO VTAM\n         TITLE '*********  N E T S O L  -  SEND EXIT'\n***********************************************************************\n*                                                                     *\n*         SENDEND IS ENTERED WHEN THE EXIT HAS BEEN SCHEDULED         *\n*         FOR THE SEND DONE ABOVE.                                    *\n*                                                                     *\n*         REGISTER 1 POINTS TO THE ASYNCH RPL BEING USED              *\n*         REGISTER 15 =A(SENDEND)                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSENDEND  XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         L     R3,RPLUSFLD                                      DC18203\n         NI    TERMFLAG,X'FF'-SENDSCED INDICATE SEND COMPLETE   DC18203\n         OI    MFLAGS,SENDING          TELL ERREXIT THAT ERROR\n*                                      ARE FOR SEND\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                      IS ENTERED IF ERRORS HAVE\n*                                      OCCURRED\n         NI    MFLAGS,255-(SENDING)\n         NI    RPLO7,255-RPLLMPEO  RESET BIG MSG BIT             86145\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     88039\n         BO    RETURN                                            88039\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                    ACTION           *\n*  RTNCD FDBK2                                       CODE(S)          *\n*  CODE  CODE         MEANING                        RETURNED         *\n*                                                   (R15  R0)         *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                 00  00          *\n*   04    04    EXCP. INCOMING MESSAGE                                *\n*               REC  RESP HANDLES 0404 FOR 'SEND POST=SCHED'          *\n*               SEND EXIT HANDLES 0404 FOR 'SEND POST=RESP'           *\n*                                                                     *\n*             SSENSEI/SSENSMI                                         *\n*                80     XX        PATH ERRORS         14  00          *\n*                80     05        NO SESSION COND.    08  04          *\n*                40     XX        RH   ERRORS         SNOCCUR         *\n*                20     XX        STATE ERRORS        08  04          *\n*                10     XX        REQUEST ERRORS      SNOCCUR         *\n*                08     00        BRACKET ERROR       18  00          *\n*                08     01        REQUEST REJECT      08  00          *\n*                08     02        INTV REQ            14  00          *\n*                08     13        BRACKET ERROR       18  00          *\n*                08     2B        PRES. SPACE INT. LO 18  00          *\n*                08     2D        SLU BUSY            14  00          *\n*                                                                     *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *\n*   0C    01    LU NOT AVAILABLE (POWERED OFF)        08  00          *\n*   0C    02    REQUEST CANCELLED TEST REQ (LOSTTERM) 14  00          *\n*   0C    07    CONNECTION RECOVERY        (LOSTTERM) 14  00          *\n*   0C    08    LU RESTARTED               (LOSTTERM) 14  00          *\n*   0C    0B    REQUEST CANCELLED BY CLSDST           14  00          *\n*   0C    0C    REQUEST CANCELLED BY CLEAR            08  04          *\n*   10    03    QUICK HALT (TPEND)                    SNOCCUR         *\n*   10    05    PERMANENT CHANNEL OR LINK FAILURE     08  00          *\n*   10    07    VARY DEACTIVATE IMMEDIATE  (LOSTTERM) 14  00          *\n*   10    09    TERMINATE SELF OR LOGOFF   (LOSTTERM) 14  00          *\n*   10    0A    ACF/VTAM ERROR                        SNOCCUR         *\n*   10    0D    ACF/VTAM INACTIVE FOR ACB             SNOCCUR         *\n*   10    0E    ABEND FOR PROGRAMS TCB                SNOCCUR         *\n*   10    0F    BUFFERS FULL               (LOSTTERM) 14  00          *\n*   10    10    TERMINATE SELF RECEIVED               08  04          *\n*   14    12    CLSDST IN PROGRESS                    14  00          *\n*   14    13    CID INVALID                           14  00          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         OI    EXITFLAG,SENDEX         INDICATE WRITE EXIT\n         CH    R15,HEX18               HIGHEST VALID ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTABB(R15)            CHECK VALID ACTION\nERRTABB  B     ROCHKB               0  CHECK IF WRITE WENT\n         BAL   R7,SNOCCUR           4\n         B     RELOPNA              8  CHECK IF WE WANT TO REOPEN\n         BAL   R7,SNOCCUR           C\n         B     WHATSEND            10  FIND OUT WHAT KIND OF SEND\n         B     FREERPL             14  LOST DEVICE\n         B     RESENDM             18  RESEND MSG\n         SPACE 1\nRELOPNA  LTR   R0,R0                   OPNDST AFTER CLSDST ?\n         BZ    RELEASE                 NO SO JUST GO CLSDST\n         OI    FLAGS,RELOPND           INDICATE WE WANT RE-OPEN\n         B     RELEASE                 CLSDST FIRST\n         SPACE 1\nWHATSEND TM    FLAGS,LUSTATE           LUSTAT SEND ?\n         BO    SENDLU\n         B     SEND                    NO, NORMAL SEND, CONTINUE IT\n         SPACE 1\nRESENDM  DS    0H                      RESEND MESSAGE\n         NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB TERMINAL MIGHT\n*                                      HAVE STARTED FIRST\n         IC    R0,MSGINDEX             RETRIEVE SAVED MSG #\n         B     SENDMSG\n         SPACE 1\nROCHKB   DS    0H\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n*ISSSEND NI    FLAGS,255-(LOOPONCE)     TURN OFF RETRY INDIC\nMISSSEND TM    FLAGS,LUSTATE           CONTINUE LUSTAT PROC ?\n         BO    CONTLU\n         TM    FLAGS,CLEARSCR          CLEAR OF SCREEN FROM RECEND?\n         BO    CONTPASS\n         B     FREERPL                 WAIT FOR ACITIVITY FROM LU\n         TITLE '*********  N E T S O L  -  RELREQ EXIT'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN AN APPLICATION ISSUES        *\n*    OPNDST (ACQUIRE) FOR A TERMINAL CURRENTLY OWNED BY NETSOL.       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *\n*         FOLLOWING;                                                  *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - ADDRESS OF SYMBOLIC NAME OF TERMINAL          *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRELREQ   XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN        YES; REFUSE AND EXIT                90141\n         SPACE 1\n***********************************************************************\n*        NOW SCAN THE TERMINAL TABLE ENTRIES TO SEE IF WE CAN FIND A  *\n*        MATCH ON THE TERMINAL NAME (ERROR IF DON'T). WHEN FOUND,     *\n*        SEE IF A LOGON IS IN PROGRESS (VIA LOGPROC FLAG). IF THIS IS *\n*        THE CASE, WE WON'T RELEASE THE TERMINAL, OTHERWISE RELEASE   *\n*        TO THE APPLICATION REQUESTING IT.                            *\n***********************************************************************\n         SPACE 1\n         LM    R3,R5,TERMTABS          SET UP FOR THE BXLE THRU TABLE\n         CR    R3,R5                   NULL TABLE ?\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         L     R6,4(,R1)               ADDRESS OF RELREQ NAME OF TERM\n         SPACE 1\nFINDNAME CLC   0(8,R6),TERMNAME        MATCH ON THE NAME\n         BE    FNDNAME                 YES, FOUND ITS TTE\n         BXLE  R3,R4,FINDNAME          CONTINUE\n         BAL   R7,SNOCCUR              ERROR, SHOULD NEVER GET HERE\n         SPACE 1\nFNDNAME  TM    TERMFLAG,LOGPROC        LOGON ? YES, DON'T FREE TERMINAL\n         BO    RRFAIL                  YES => WRITE REL REQ FAILED MSG\n         SPACE 1\n         OI    EXITFLAG,RELREQEX       INDICATE IN RELREQ EXIT\n         BAL   R14,GETRPL              GET AN RPL\n         LA    R13,RPLSAVE             R13 -> SAVE IN THE RPL\n         ST    R3,RPLUSFLD             SAVE ADDRESS OF TTE IN THE RPL\n         ST    R5,TERMCRPL             SAVE ADDRESS OF RPL IN THE TTE\n         LA    PTRNIB,SYNCHNIB\n         MVC   NIBSYM(8),TERMNAME      PLACE SYMBOLIC TERMINAL\n*                                      SET INDICATOR TO\n         OI    FLAGS,RELOPND           RELEASE THE DEVICE AND\n*                                      TRY TO REOPEN IT\n         MVC   CID,TERMCID             GET CID INTO ASYNCH RPL\n         SPACE 1\n         MVC   RELRQMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG\n         WTO   MF=(E,RELRQMSG)         INFORM WORLD OF REQUEST\n         SPACE 1\n         B     RELEASE                 GO DO THE RELEASE\n         SPACE 1\nRRFAIL   MVC   RELFLMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG\n         WTO   MF=(E,RELFLMSG)         INFORM WORLD OF REQUEST FAILURE\n         SPACE 1\n         B     RETURN                  REFUSE RELEASE REQUEST\n         TITLE '*********  N E T S O L  -  LOSTERM EXIT'\n***********************************************************************\n*                                                                     *\n*   THIS EXIT ROUTINE IS SCHEDULED BY VTAM WHEN :                     *\n*                                                                     *\n*                * WHEN CONTACT WITH AN LU IS LOST                    *\n*                * WHEN A LU REQUESTED A LOGOFF                       *\n*                * WHEN CERTAIN ERRORS DETECTED IN TRANSMISSION       *\n*                * WHEN A LU IS TEMPORARILY UNAVAILABLE               *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *\n*            FOLLOWING;                                               *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - CID OF LOST TERMINAL                          *\n*              WORD 2 - USER FIELD FROM NIB                           *\n*              WORD 3 - REASON CODE, AS FOLLOWS:                      *\n*                                                                     *\n*  0 - DIAL-LINE DISCONNECT (DIAL-IN)            RELEASE (CLSDST)     *\n*  4 - DIAL-LINE DISCONNECT (DIAL-OUT)           RELEASE (CLSDST)     *\n*  8 - RESERVED                                                       *\n*  C - CONTACT WITH LU PERMANENTLY LOST          PROBDEV (CLSDST)     *\n* 10 - LU SUCCESSFULLY RECONTACTED               RELEASE + REAQUIRE   *\n* 14 - UNCONDITIONAL TERMINATE COMMAND           RELEASE (CLSDST)     *\n*    -       \"       CHARACTER CODED LOGOFF         \"        \"        *\n*    -       \"       TERMSESS                       \"        \"        *\n* 18 - CONTACT WITH LU LOST                      RETURN TO VTAM       *\n* 1C - RESERVED                                                       *\n* 20 - CONDITIONAL TERMINATE SELF                RELEASE + REACQUIRE  *\n*    -     \"       CHARACTER CODED LOGOFF           \"        \"        *\n*    -     \"       TERMSESS                         \"        \"        *\n* 24 - BUFFER LIMIT DEFINED FOR LU EXCEEDED         \"        \"        *\n* 28 - TEST REQUEST SET                             \"        \"        *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOSTERM  MHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         SPACE 1\n         LR    R7,R1                   SAVE ACROSS GETRPL\n         BAL   R14,GETRPL              GET AN RPL FOR WORK\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         MVC   RPLUSFLD(4),8(R7)       COPY TTE ADDRESS TO RPL\n         OI    EXITFLAG,LOSTEX         INDICATE IN LOSTERM EXIT\n         MVC   CID,4(R7)               SAVE CID IN RPL/WORKQREA\n         MVC   PACKWORK(1),15(R7)      COPY LOSTERM CODE TO WORK AREA\n         UNPK  PACKWORK+2(3),PACKWORK(2) UNPACK TO PRINT\n         MVC   LOSTMSG+31(2),PACKWORK+2  TO MSG AREA\n         TR    LOSTMSG+31(2),TRTAB     MAKE IT PRINTABLE\n         L     R3,RPLUSFLD             GET TTE POINTER\n         OI    TERMFLG3,TFLOF  FORCE A USER LOGOFF               88188\n         ST    R5,TERMCRPL             SAVE A(RPL) IN TTE\n         MVC   LOSTMSG+43(8),TERMNAME  TERMINAL LU NAME\n         WTO   MF=(E,LOSTMSG)          ISSUE ERROR MSG.\n         SPACE 1\n***********************************************************************\n*        NOW CHECK TO MAKE SURE THAT THE NIB USER FIELD IS CORRECT.   *\n*        WOULD NOT BE IF OPNDST DONE WITH WRONG NIBUSER VALUE.        *\n***********************************************************************\n         SPACE 1\n         CLC   CID,TERMCID             CHECK THAT CID'S ARE CORRECT\n         BE    LOSTCODE                YES SO GO CHECK CODE     DC18203\n         OC    TERMCID,TERMCID         IS IT ZERO (THIS HAPPENS  88179\n*                                      WHEN AN OPNDST FAILS FOR DC18203\n*                                      FIRST LOGON PRIOR TO     DC18203\n*                                      LOSTERM SCHEDULED )      DC18203\n         BZ    *+8           JUMP OVER THE BAL                   88179\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\nLOSTCODE L     R4,12(R7)               GET LOSTERM ENTRY CODE\n         CH    R4,HEX8                 IS IT 0,4 OR 8 ?\n         BNH   RELEASE                 YES SO JUST CLSDST DEVICE\n         CH    R4,HEXC                 IS IT 12 ?\n         BE    PROBDEV                 YES SO WTO AND CLSDST\n         CH    R4,HEX10                IS IT X'10' ?\n         BE    REAQUIRE                YES SO LETS RELEASE + REOPEN\n         CH    R4,HEX14                IS IT X'14' ?\n         BE    PROBDEV                 YES SO WTO AND CLSDST\n         CH    R4,HEX20                IS IT GREATER THAN X'20' ?\n         BNL   REAQUIRE                YES SO LETS RELEASE + REOPEN\n         B     FREERPL                 X'18' CODE (24), IGNORE, WAIT\n*                                       FOR REENTRY WITH X'0C' OR X'10'\n         SPACE 1\nREAQUIRE OI    FLAGS,RELOPND           INDICATE TO RELEASE\n         B     RELEASE\n         TITLE '*********  N E T S O L  -  RELEASE TERMINAL SUBRTN'\n***********************************************************************\n*                                                                     *\n*        RELEASE THE TERMINAL, AND PERHAPS RE-ACQUIRE IT.             *\n*                                                                     *\n*        THERE ARE THREE ENTRY POINTS TO THIS ROUTINE.                *\n*                                                                     *\n*        'LOGOFF' IS USED WHEN THE USER ISSUES A LOGOFF COMMAND TO    *\n*        NETSOL. THE TERMINAL IS RELEASED.                            *\n*                                                                     *\n*        'QSESSION' IS USED WHEN A CLSDST(PASS) FAILS BECAUSE A QUEUED*\n*        SESSION REQUEST IS OUTSTANDING FOR THIS TERMINAL FROM THE    *\n*        REQUESTED APPLICATION. THE TERMINAL IS RELEASED AND THEN     *\n*        A SIMLOGON IS ISSUED TO REACQUIRE THE TERMINAL WHEN IT       *\n*        IS RELEASED BY THE APPLICATION.                              *\n*                                                                     *\n*        'PROBDEV' WILL WTO AND RELEASE THE DEVICE BECAUSE OF AN I/O  *\n*        PROBLEM.                                                     *\n*                                                                     *\n*        'RELEASE' WILL RELEASE THE DEVICE AND, IF THERE IS A TEST    *\n*        REQUEST SET, 'RELEASE' WILL REACQUIRE THE DEVICE.            *\n*                                                                     *\n*        REGISTER 5 (PTRRPL) WILL POINT TO AN RPL.                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOGOFCMD L     R3,RPLUSFLD   RELOAD TTE POINTER FOR PA1 ENTRY    88220\n         BAL   R14,UTERMOF   RESET LOGON/PRIVIES                 88179\n         AIF   ('&LOCAL' NE 'PID').NOLOFEX                       92300\n         ICM   R4,15,TERMLOUD  PRIOR LOGON ?                     88179\n         BZ    LOGFLOUD      NO                                  88179\n         MODESET KEY=ZERO    GET PRIVILEGED                      90008\n         NI    A$LFLG2-A$LOUD(R4),255-A$LFLOG  RESET FORCE REQ.  90008\n         MODESET KEY=NZERO   GET NORMAL                          90008\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  USE AS ACCT SVC PARM   88179\n         MVC   A$SID,=C'A$RB'                                    88179\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,0,A$SAKEY+A$SBUILD)      88179\n         MVC   A$SBUFR,TERMLOUD  COPY LOUD                       88179\n         LA    R1,A$SVCRB                                        88179\n         SVC   249           CANCEL SESSIONS AND USER LOGON      88179\n.NOLOFEX SPACE 1                                                 91195\nLOGFLOUD CLC   =C'NT',TERMNAME  ONE OF OUR NTO TERMINALS ?       86356\n         BE    LOGOFOK       YES; MEANINGFUL REQUEST             86356\n         CLC   =C'PA',TERMNAME  PROTOCOL CONVERTER SYSTEM A?     89338\n         BE    LOGOF71       YES                                 88311\n         CLC   =C'PB',TERMNAME  PROTOCOL CONVERTER SYSTEM B?     89338\n         BE    LOGOF71       YES                                 88311\n         CLI   TERMNAME,C'D' DIAL-UP CONNECTION ?                88311\n         BE    LOGOFOK       YES; DON'T RECONNECT (FREE PU)      88311\n   B SETPASOF  *****DEBUG***** TREAT AS LOCK                     92317\n         OI    FLAGS,RELOPND  CLOSE AND RE-ACQUIRE THE DEVICE    88192\n         B     RELEASE       RELEASE THE DEVICE                  88192\nLOGOF71  LA    R0,L'HANG7171   GET CX-80/IBM 7171/HYDRA DISCONNECT\n         LA    R1,HANG7171                                       88311\n         STH   R0,GPDATAL    STASH LENGTH                        88311\n         ST    R1,GPDATAP    AND ADDRESS                         88311\n         LA    R0,MSG19      IDENTIFY POT-LUCK MESSAGE           88311\n         B     SENDMSG       JOIN COMMON                         88311\nHANG7171 DC    X'F1C370C2A8852B5B4B'  DISCONNECT REQUEST         88311\n         SPACE 1                                                 88311\nLOGOFOK  OI    FLAGS,LOGOFF            INDICATE CLSDST TO RELEASE THE\n*                                      TERMINAL.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nQSESSION OI    FLAGS,SIMLOG            INDICATE CLSDST THEN SIMLOGON\n*                                      THE CLSDST RELEASE MUST BE DONE\n*                                      SINCE THE CLSDST PASS FAILED.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nPROBDEV  OI    FLAGS,BADEVICE          TURN ON  FLAG FOR WTO.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nBADLU    MVC   LISTWTO8+17(8),TERMNAME ADD TERMNAME TO ERROR MSG\n         WTO   MF=(E,LISTWTO8)         WRITE ERROR MSG\n         MVC   CID,TERMCID             MOVE CID INTO RPL FOR LATER USE\n         B     RELCODE                 GO TO RELEASE CODE\n         SPACE 1\nRELEASE  TM    FLAGS,RELOPND           IS RELEASE A PRELUDE TO\n         BO    CLOSEREL                 REOPEN?\n*                                      NO. SIMPLY RELEASE IT\n*                                      YES. MUST SAVE SYMBOLIC\n*                                       NAME FOR LATER REOPEN\n*                                      NOTE: THIS CAN OCCUR\n*                                       FOR READ(ANY)/CHECK\n*                                       ERROR HANDLING.\nRELCODE  L     R3,RPLUSFLD             -> TTE FROM RPL\n         SPACE 1\n         TM    FLAGS,BADEVICE          IS WTO BIT ON ? NO, DON'T WTO\n         BZ    CLOSEREL\n         NI    FLAGS,255-(BADEVICE)    YES WTO BIT ON THEN\n*                                       TURN WTO FLAG OFF.\n         MVC   LISTWTO+17(8),TERMNAME  MOVE DEVICE NAME INTO\n*                                      THE MESSAGE AREA OF\n*                                      THE LIST FORM OF WTO.\n         WTO   MF=(E,LISTWTO)          EXECUTE FORM OF WTO\n         SPACE 1\nCLOSEREL OI    MACFLAGS,CLSREL         INDICATE DOING CLOSE(REL\n***********************************************************************\n*        CLSDST RELEASE WILL BE DONE FOR THE TERMINAL BY SPECIFYING   *\n*        THE TERMINAL NAME IN THE NIB. THE NIB IS USED BECAUSE THE    *\n*        CLSDST(RELEASE) CAN BE DONE FROM THE LOGON EXIT BEFORE A     *\n*        SESSION HAS BEEN ESTABLISHED. IN THIS CASE, THE CID WOULD BE *\n*        REJECTED BY VTAM IF USED IN THE CLSDST(RELEASE).             *\n***********************************************************************\n         L     R15,=A(FRESHNIB)  GET FRESH ASYNCH NIB            87131\n         MVC   NIBSTART(NIBLNIB),0(R15)   INITIALIZE NIB         87131\n         LA    PTRNIB,NIBSTART         -> NIB\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,NIBUSER              SAVE A(TTE) IN NIB\n         MVC   NIBSYM(8),TERMNAME      MOVE TERMINAL NAME TO NIB\nCLOSERET OI    MFLAGS,CLSDST   SET FLAG - CLSDST IN PROGRESS     90127\n         L     R7,=A(CDSTEND1)  SET EXIT ADDRESS                 90141\n         CLSDST RPL=(PTRRPL),                                          X\n               EXIT=(R7),    CDSTEND1                                  *\n               OPTCD=RELEASE,                                          X\n               NIB=NIBSTART\n         SPACE 1\n         NI    MFLAGS,255-(CLSDST)     INDICATE CLOSE DONE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    CLOSERET                YES. REISSUE              90127\n         LTR   R15,R15                 CLSDST ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '*********  N E T S O L  -  CLSDST(RELEASE) END EXIT'\n***********************************************************************\n*                                                                     *\n*        CHECK VALIDITY OF THE CLSDST(RELEASE)                        *\n*        ENTRY IS FROM THE CLSDST(RELEASE) IN THE RELEASE RTN.        *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCDSTEND1 XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,CLSDST           TELL ERREXIT THAT ERROR\n*                                       IS FOR CLSDST(RELEASE)\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(CLSDST)\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    52    NIB INVALID                          SNOCCUR          *\n*   14    60    INVALID LU NAME                      14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         OI    EXITFLAG,CLOSEX         INDICATE IN CLOSE REL EX\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB9(R15)            CHECK VALID ACTIONS\nERRTAB9  B     R0CHK9               0  PROBABLY RELEASED IT\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  ALREADY RELEASING, NEW\n*                                       RELEASE WON'T HELP\n         BAL   R7,SNOCCUR           C  NO MSG TO WRITE AND\n*                                       PROBABLY COULDN'T\n*                                       ANYWAY\n         B     CLOSEREL            10  REISSUE.\n         B     FREERPL             14  IT COULD BE THAT NETSOL\n*                                       NO LONGER HAS THE\n*                                       DEVICE SINCE IT WAS\n*                                       ALREADY FREED BY A LOSTERM,\n*                                       RELREQ OR READEND\n*                                       REQUEST.\n         SPACE 1\nR0CHK9   DS    0H\n         LTR   R0,R0                   VALID COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         EJECT\n***********************************************************************\n*                                                                     *\n*  AFTER RELEASING THE TERMINAL, IT MAY BE NECESSARY TO               *\n*  RE-ACQUIRE IT, OR AT LEAST ATTEMPT TO RE-ACQUIRE IT, FOR THE       *\n*  FOLLOWING REASONS:                                                 *\n*                                                                     *\n*    THE OTHER APPLICATION MAY CANCEL ITS REQUEST FOR THE             *\n*    TERMINAL AFTER NETSOL'S RELREQ EXIT HAS ISSUED THE               *\n*    CLSDST(RELEASE), BUT BEFORE LOGGING ONTO THE TERMINAL.           *\n*    IN THIS CASE NETSOL WISHES TO RE-ACQUIRE THE TERMINAL.           *\n*    THE TERMINAL WILL ONLY BE ACQUIRED BY NETSOL IF THE              *\n*    OTHER APPLICATION HAS NOT ALREADY LOGGED ON THE TERMINAL.        *\n*                                                                     *\n*    THE TERMINAL MAY HAVE BEEN RELEASED BECAUSE IT WAS LOGGED        *\n*    ON TO NETSOL WHEN THE TEST REQUEST KEY WAS SET.  THIS            *\n*    BLOCKS ALL FURTHER I/O TO THE DEVICE, INCLUDING ENTRY OF         *\n*    A LOGON SEQUENCE NECESSARY TO PASS THE DEVICE TO TOLTEP.         *\n*    NETSOL MUST RELEASE, THEN RE-ACQUIRE THE DEVICE SO THAT          *\n*    I/O IS NO LONGER BLOCKED.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R3,RPLUSFLD             -> TTE FOR THE NAME\n         MVI   TERMFLG2,TREL           MARK TERM RELEASED\n         TM    FLAGS,LOGOFF            LOGOFF COMMAND ISSUED?\n         BO    FREERPL                  YES => FINISHED\n         TM    FLAGS,SIMLOG            NOW DO SIMLOGON?\n         BO    SIMLOGON                 YES => BR TO SIMLOGON CODE\n         TM    FLAGS,RELOPND           RELEASE DEVICE ONLY ?\n         BZ    FREERPL\n         NI    FLAGS,255-(RELOPND)\n         LA    PTRNIB,NIBSTART         POINT TO THE NIB\n         L     R3,RPLUSFLD             -> TTE FOR THE NAME\n         MVC   NIBSYM(8),TERMNAME      GET THE SYMBOLIC NAME\n         SPACE 1\n***********************************************************************\n*  MUST USE NIB WITH SYMBOLIC TERMINAL NAME BECAUSE THE CID IS        *\n*  NO LONGER VALID AFTER DEVICE IS RELEASED.  OPNDST(SPEC)            *\n*  MUST HAVE A SYMBOLIC TERMINAL NAME SUPPLIED.                       *\n***********************************************************************\n         SPACE 1\nREOPEN   DS    0H                      USE THIS LABEL FOR ERREXIT\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,NIBUSER              -> TTE IN NIB FOR FUTURE RPLS\n         OI    MACFLAGS,OPNDACQ        SET OPNDST ISSUED\n         OI    MFLAGS,OPNDSPEC         SET OPNDST IS CURRENTLY ACTIVE\n         OPNDST RPL=(PTRRPL),                                          X\n               OPTCD=(SPEC,ACQUIRE),                                   X\n               EXIT=OPNAQRX,                                           X\n               NIB=NIBSTART\n         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    REOPEN                  YES. REISSUE\n         LTR   R15,R15                 OPNDST ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '*********  N E T S O L  -  OPNDST (SPEC,ACQUIRE) EXIT'\n***********************************************************************\n*                                                                     *\n*        CHECK VALIDITY OF THE OPNDST                                 *\n*        ENTRY IS FROM THE OPNDST IN THE CLSDST END EXIT.             *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nOPNAQRX  XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR\n*                                       IS FOR OPNDST\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    00    DEVICE UNAVAILABLE                   14  00           *\n*   10    03    VTAM IS HALTING                      SNOCCUR          *\n*   10    05    PERMANENT FAILURE IN PATH            08  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    53    NODE UNKNOWN TO VTAM                 14  00           *\n*   14    55    NO OPNDST AUTHORIZATION              SNOCCUR          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         OI    EXITFLG2,OPNACQX        INDICATE OPNDST EXIT ENTERED\n         CH    R15,HEX14               HIGHEST VALID ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB7(R15)            CHECK VALID ACTIONS\nERRTAB7  B     R0CHK7               0  CHECK IF DEVICE ACCEPTED\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         B     FREERPL              C  CAN'T WRITE MSG IF NOT    88304\n*                                      CONNECTED (WAS SNOCCUR)\n         B     OPNAROPN            10  REISSUE. NO NEED TO       90141\n*                                       CHECK FOR RESET\n         B     FREERPL             14  A NORMAL CASE.  FAILED\n*                                       TO RECONNECT DEVICE.\n         SPACE 1\nR0CHK7   DS    0H\n         CH    R0,HEX8                 TERMINAL RECONNECTED?\n         BE    FREERPL                 NO. THIS IS WHAT IS\n*                                       WANTED.  CONTINUE\n*                                       WITH OTHER DEVICES.\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         L     R3,RPLUSFLD             -> TTE\n         MVI   TERMFLG2,TOPEN             MARK TERM ON NETSOL\n         OI    FLAGS,FIRSTSND\n         B     RESEND\n         SPACE 1                                                 90141\nOPNAROPN L     R7,=A(CDSTEND1)  SET BASE FOR REOPEN              90141\n         B     REOPEN-CDSTEND1(R7)  RE-ISSUE SEND                90141\n         SPACE 1                                                 90141\n***********************************************************************\n*                                                                     *\n*        CONSTANTS FOR NETSOLEX CSECT ADDRESSABILITY                  *\n*                                                                     *\n***********************************************************************\nEXMAIN   DC    A(NETSOL70)   MAIN BASE ADDRESS                   90141\n         TITLE '*********  N E T S O L  -  RESEND ROUTINE'\n***********************************************************************\n*                                                                     *\n*        RESEND (REISSUE A SEND)                                      *\n*                                                                     *\n*   THIS ROUTINE IS USER BY THE SENDEND EXIT , RECEND EXIT ,          *\n*   RELEASE EXIT TO REISSUE THE 'GOOD MORNING ' MESSAGE               *\n*   AFTER RECEIVING A BAD LOGON OR RECOVERING AN LU                   *\n*                                                                     *\n***********************************************************************\nNETSOL70 CSECT ,             COMMON SUBROUTINES                  90141\n         SPACE 2\nRESENDSG NI    RPLOPT12,FF-RPLFMHDR CLEAR FM HDR BIT             89338\n         OI    FLAGS,FIRSTSND  TRY NEW BRACKET                   89338\nRESENDAP L     R3,RPLUSFLD   GET THE TTE BACK                    88179\n         TM    TERMFLG3,TFAPL  FORCED LOGON ?                    88220\n         BNZ   RESENDAC      YES                                 88179\n         OC    TERMDAPL,TERMDAPL  ALTERNATE FORCED ID ?          88179\n         BZ    RESEND        NO; JUST REFRESH THE DISPLAY        88179\nRESENDAC XC    GPDATAL,GPDATAL  CLEAR OPTIONAL DATA              88179\n         L     R7,=A(OPENEND)  SET BASE FOR AUTOTIME             90141\n         B     AUTOTIME-OPENEND(R7)  RETRY APPLICATION CONNECT   88179\nRESEND   NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB             86160\nOPSEND   SLR   R0,R0                                             86160\n         L     R3,RPLUSFLD   GET TTE PTR BACK                    86160\n         ICM   R0,1,TERMMSGX  REPEAT PRIOR MESSAGE ?             86160\n         BNM   OPSEND2       NO                                  86160\n         MVI   TERMMSGX,0    CLEAR OUT                           86160\n         B     SENDMSG       GO TO SEND IT                       86160\nOPSEND2  TM    UFLAGS,UFGSYS SYSTEMS ONLY ?                      88220\n         BZ    OPSEND20      NO                                  88220\n         TM    TERMFLG3,TPRIVY  SYSTEMS UNLOCK ?                 88220\n         BZ    OPSEND13      NO; SEND 'CLOSED'                   88220\nOPSEND20 LA    R0,MSG20      SET FOR LOGON SCREEN                88179\n         TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BZ    OPSEND12      NO                                  88179\n         TM    TERMFLG3,TFLON  LOGON PERFORMED ?                 88179\n         BZ    OPSENDCM      NO; SOLICIT LOGON                   88179\nOPSEND12 LA    R0,MSG12      REGULAR APPLICATION MENU            88179\n         TM    TERMFLG3,TFAPL  FORCED APPLICATION ?              88220\n         BNZ   OPSEND13      YES                                 88220\n         CLI   TERMDAPL,0    DEDICATED APPLICATION ?             87137\n         BE    OPSENDCM      NO; ISSUE NORMAL MENU               88220\nOPSEND13 LA    R0,MSG13      ELSE USE NASTIER SCREEN             86065\nOPSENDCM B     SENDMSG\n         TITLE '*********  N E T S O L  -  ADD TIME AND NODE NAME TO MEX\n               SSAGE'\n*        A LITTLE SUBROUTINE TO PUT NODE AND TIME IN MESSAGE 12\n*          ***** RETURNS TO REG 14 ******\n         SPACE 1\nTIMETERM STM   R0,R1,TIMESAVE          SAVE REGS\n         ICM   R1,15,DDTTERM   -> TERM FIELD IN MSG 12           86065\n         BZ    TIMETERN      SKIP NAME INSERTION                 86065\n         MVC   0(8,R1),TERMNAME        INSERT NODE NAME\n         SPACE 1\n*        PLACE TIME IN MESSAGE 12\n         SPACE 1\nTIMETERN TIME  DEC           * DONE BEFORE TEST - SAVE R1 *\n         SRL   R0,12         MAKE 000HHMMS                       88220\n         STM   R0,R1,TIMEWORK  TIME STASHED AS 000HHMMS DDYYY    88220\n         OI    TIMEWORK+3,X'0F'  CLOBBER SECONDS BY SIGN         88220\n         ICM   R1,15,DDTTIME  -> TIME FIELD IN MSG 12            86065\n         BZ    TIMETERT      SKIP IF NO ROOM                     86065\n         MVC   7(7,R1),=X'402120204B2020'  0HH.MM MASK           88220\n         ED    7(7,R1),TIMEWORK+1   MAKE TIME                    88220\n         MVC   0(7,R1),=X'F021204B202020'  YY.DDD                88220\n         ED    0(7,R1),TIMEWORK+5  MAKE DATE                     88220\n         MVI   0(R1),C' '    CLEAR HUNDREDS                      88220\n         TM    TERMFLG3,TPRIVY  UNLOCKED TERMINAL ?              87187\n         BNZ   *+8           YES; LEAVE PERIOD                   87187\n         MVI   7+4(R1),C':'  ELSE INDICATE LOCKED (:)            88220\nTIMETERT LM    R0,R1,TIMESAVE          RESTORE THE WORKERS\n         BR    R14                     RETURN TO REQUESTOR\nTIMEWORK DC    F'0'\nTIMESAVE DC    2F'0'                    SAVE R0 + R1 HERE\n         TITLE '*********  N E T S O L  -  GET/FREE AN RPL ROUTINES'\n***********************************************************************\n*                                                                     *\n*        THE GETRPL SUBROUTINE GETS A NEW RPL VIA A GETMAIN MACRO     *\n*        FOR 'LNGTHRPL' IN SUBPOOL 1. IT THEN INITIALIZES IT AND      *\n*        RETURNS TO THE CALLER WITH THE RPL ADDRESS IN R5.            *\n*                                                                     *\n*        INPUT REGISTERS:                                             *\n*                                                                     *\n*              REG 10-12 - BASE REGISTERS                             *\n*              REG 14    - CALLER'S RETURN ADDRESS                    *\n*                                                                     *\n*        OUTPUT REGISTERS:                                            *\n*                                                                     *\n*              REG 0-1 - UNPREDICTABLE                                *\n*              REG 5   - ADDRESS OF AN INITIALIZED RPL/NIB/WORKAREA   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETRPL   DS    0H\n         L     R0,LNGTHRPL             LENGTH OF RPL + SUBPOOL\n         GETMAIN R,LV=(0)              G E T M A I N    R P L\n         MVC   0(8,R1),=CL8'DYNAMRPL'  IDENTIFY THE RPL AS DYNAMIC\n         LA    PTRRPL,8(,R1)           R5 -> R P L\n         L     R15,=A(FRESHNIB)  POINT TO ASYNCH NIB/RPL         87131\n         MVC   IFGRPL(LNIFGRPL),FRESHRPL-FRESHNIB(R15)  COPY RPL 87131\n*                                      NOTE: THIS MAKES RPL ASYNCH\n         MVC   NIBDMPID(8),=CL8'DYNAMNIB' SET NIB DUMP ID\n         MVC   NIBSTART(NIBLNIB),0(R15) INITITIALIZE NIB         87131\n         XC    WORKSPAC(WORKRPLA),WORKSPAC ZERO OUT KEY WORK AREA STUFF\n         STM   R0,R1,TIMESAVE          SAVE WORK REGS\n         TIME  DEC                      SAVE TIMESTAMP\n         STM   R0,R1,GRPLTIME            IN RPL WORKAREA\n         LM    R0,R1,TIMESAVE             RESTORE WORK REGS\n         BR    R14                     RETURN TO CALLER\n         SPACE 3                                                 90120\n***********************************************************************\n*                                                                     *\n*        FREERPL IS ENTERED WHEN AN RPL/WORKAREA IS NOLONGER          *\n*        NEEDED BY THE EXIT ROUTINES.  IT ISSUES A FREEMAIN           *\n*        MACRO FOR THE RPL ADDRESS IN REGISTER 5.                     *\n*        IF THE FIRST 8 CHARACTERS OF THE WORKAREA ARE NOT 'DYNAMRPL' *\n*        THEN THIS SUBROUTINE BRANCHES TO INDICATE A USER 0008 ABEND. *\n*                                                                     *\n*        AT EXIT FROM FREERPL, CONTROL IS RETURNED TO VTAM.           *\n*                                                                     *\n*        INPUT REGISTERS                                              *\n*          R5  - POINTS TO RPL/WORKAREA TO BE FREED                   *\n*          R10-R12 - BASE REGISTERS                                   *\n*          R13 - ADDRESS OF REGISTER SAVE AREA                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nFREERPL  ICM   R3,15,RPLUSFLD  LOAD AND TEST TTE ADDRESS         88185\n         BZ    *+10                      THEN\n         XC    TERMCRPL,TERMCRPL              RESET A(RPL) IN TTE\n         L     R0,LNGTHRPL             LENGTH OF RPL TO BE FREED\n         S     R5,=F'8'                REDUCE FOR INDENTITY AT FRONT\n         CLC   0(8,R5),=CL8'DYNAMRPL'  IS IT A DYNAMIC RPL ?\n         BNE   TOOSMALL                NO, ISSUE U0008 ABEND\n         SPACE 1\n         FREEMAIN R,LV=(0),A=(5)       F R E E   R P L  -> R5\n         SPACE 1\nRETURN   DS    0H\n         L     R14,RETVTAM@            RESTORE EXIT RETURN ADDRESS\n         BR    R14                     RETURN\n         SPACE 1\nLNGTHRPL DC    0F'0',AL1(1),AL3(ENDSECT-STSECT+8)  RPL SUBPOOL/LENGTH\n         TITLE '*********  N E T S O L  -  RECEIVE(ANY) SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*                   RECEIVE (ANY)                                     *\n*                                                                     *\n*        THIS SUBROUTINE IS ENTERED ONLY WHEN A REC (ANY) IS TO       *\n*        BE ISSUED.                                                   *\n*                                                                     *\n*        INPUT REGISTERS:                                             *\n*                                                                     *\n*              REG 5     - POINTS TO AN ASYNCHRONOUS RPL PLUS         *\n*                          ITS WORKAREA                               *\n*              REG 14    - CALLER'S RETURN ADDRESS                    *\n*                                                                     *\n*         OUTPUT REGISTERS:                                           *\n*                                                                     *\n*               REG 0-1   - UNPREDICTABLE                             *\n*               REG 2-14  - VALUE AT INPUT                            *\n*               REG 15    - UNPREDICTABLE                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRECSUB   DS    0H\n         ST    R14,SUBSAV14            SAVE RETURN ADDR\nRECANY   OI    MFLAGS,RECA             INDICATE READ(ANY) IN PROGRESS\n         RECEIVE RPL=(PTRRPL),OPTCD=(ASY,ANY,TRUNC,Q),                 X\n               AREA=IOAREA,AREALEN=L'IOAREA,EXIT=RECEND,               X\n               RTYPE=(DFSYN,RESP,DFASY)  ALLOW ATTENTIONS        89335\n         NI    MFLAGS,255-(RECA)\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR RECEIVE(ANY):                                    *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    RECANY                  YES. REISSUE\n         LTR   R15,R15                 READ-ANY ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         L     R14,SUBSAV14            RESTORE THE RETURN ADDR\n         BR    R14                     RETURN TO CALLER\n         TITLE '********* N E T S O L  -  LUSTAT ROUTINE'\n***********************************************************************\n*       ROUTINE TO HANDLE LOGICAL UNIT STATUS RECEIVED                *\n*                                                                     *\n*    SSENEEI  SSENSMI                                                 *\n*      00        02       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *\n*      00        02          SNOCCUR                                  *\n*      08        1C       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *\n*      08        2B         \"     \"     \"        \"    \"    \"  (RESEND)*\n*      08        31       DEVICE POWERED OFF     \"    \"    \"          *\n*      08        01          SNOCCUR                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nLUSTATUS DS    0H\n         OI    FLAGS,LUSTATE           SEND +VE RESPONSE\n         OI    MFLAGS,LUSEND\n         MVC   SENSE(2),RPLSSEI   SAVE SSENSEI + SSENSMI\n         MVC   USENSE(2),RPLUSNSI SAVE USSESEI(2 BYTES)\n         NI    RPLOPT12,FF-RPLFMHDR CLEAR FM HDR BIT\n         SPACE 1\nSENDLU   L     R7,=A(SENDEND)                                    90141\n         SEND  STYPE=RESP,CONTROL=LUS,RESPOND=(NEX,FME,NRRN),          *\n               RPL=(PTRRPL),POST=SCHED,OPTCD=(ASY,CA),EXIT=(R7)  90141\n         NI    MFLAGS,255-(LUSEND)     SEND DONE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n         BE    SENDLU                  YES. REISSUE\n         LTR   R15,R15                 WRITE ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND CHK)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B    RETURN                   RETURN TO VTAM\n         SPACE 1\nCONTLU   NI    FLAGS,255-(LUSTATE)     LUSTAT SEND DONE\n         CLC   SENSE,LUS0001           IS DEVICE NOW AVAILABLE\n         BE    RESEND                  YES SO SEND LOGON MSG.\n         CLC   SENSE,LUS082B           IS DEVICE NOW AVAILABLE\n         BE    RESEND\n*LOOPS*  CLC   SENSE,LUS0831 POWERED OFF ?                       89344\n*LOOPS*  BE    RESEND        YES; BETTER ERROR RECOVERY ON INT.REQ.\n         B     FREERPL\n         SPACE 1                                                 90141\n         LTORG ,                                                 90141\n         TITLE '*********  N E T S O L  -  ERROR EXIT RTN'\n***********************************************************************\n*                                                                     *\n*    THIS ROUTINE IS ENTERED IF AN ERROR IS DETECTED.                 *\n*                                                                     *\n*        INPUT REGS:                                                  *\n*                                                                     *\n*    REGISTER 0 CONTAINS A RTNCD CODE (4, 8, C, 10, 14, 18)           *\n*                                                                     *\n*    REGISTER 1 POINTS TO THE RPL OF THE REQUEST                      *\n*                                                                     *\n*           THE FDBK2 FIELD OF THIS RPL CONTAINS A REASON             *\n*           CODE WHICH IS A SUBCODE OF THE RTNCD CODE IN              *\n*           REGISTER 0.                                               *\n*                                                                     *\n*    REGISTER 2 - 12 UNMODIFIED BY VTAM                               *\n*                                                                     *\n*    REGISTER 13 POINTS TO THE SAVE AREA IN USE                       *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS TO VTAM                      *\n*                                                                     *\n*    REGISTER 15 ERREXIT ROUTINE ADDRESS                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    EXIT FROM ERREXIT IS AS FOLLOWS:                                 *\n*                                                                     *\n*           THRU ERRETURN TO VTAM, WHICH WILL RETURN TO THE           *\n*           MAINLINE OR EXIT ROUTINE NSI.                             *\n*                                                                     *\n*           TO SNOCCUR, WHICH WILL ABNORMALLY TERMINATE               *\n*           NETSOL.                                                   *\n*                                                                     *\n*           TO PROBDEV.                                               *\n*                                                                     *\n*                                                                     *\n*        OUTPUT REGS:                                                 *\n*                                                                     *\n*    REGISTER  1-9  UNPREDICTABLE                                     *\n*                                                                     *\n*    REGISTER 10-12 NETSOL BASE REGISTERS                             *\n*                                                                     *\n*    REGISTER 13    SAVE AREA UPON ENTRY                              *\n*                                                                     *\n*    REGISTER 14    UNPREDICTABLE IF EXIT TO SNOCCUR OR               *\n*                    RETURN.                                          *\n*                   VALUE AT INPUT IF RETURN TO VTAM.                 *\n*                                                                     *\n*    REGISTER 15    THE INPUT RTNCD CODE IF ERREXIT WAS               *\n*                   ENTERED FROM MAINLINE NETSOL.                     *\n*                   AN ACTION CODE IF ENTERED FROM AN EXIT            *\n*                    ROUTINE.                                         *\n*                                                                     *\n*    REGISTER  0    UNPREDICTABLE IF ENTERED FROM MAINLINE            *\n*                    NETSOL.                                          *\n*                   AN ACTION CODE MODIFIER IF ENTERED FROM AN        *\n*                    EXIT ROUTINE.                                    *\n*                                                                     *\n*        NOTE: REGISTERS 0 AND 15 WILL BE RETURNED THRU VTAM          *\n*              TO MAINLINE OR EXIT ROUTINE NSI.                       *\n*    DESCRIPTION OF ACTION CODES AND FLAGS                            *\n*                                                                     *\n*                                                                     *\n*        THE ERREXIT ROUTINE COMMUNICATES TO THE ERROR EXIT NSI       *\n*        VIA AN ACTION CODE SET IN REG 15 AND, IN SOME CASES,         *\n*        AN ACTION CODE MODIFIER SET IN REG 0. IN SOME SPECIAL        *\n*        CASES, FLAGS ARE SET TO PASS INFORMATION TOO.                *\n*                                                                     *\n*        THE ACTION CODES AND MODIFIERS INDICATE APPROPRIATE          *\n*        ACTIONS TO BE TAKEN BY THE EXIT ROUTINE. THE EXIT            *\n*        ROUTINE MAY, HOWEVER, HANDLE THE ERROR ACTION                *\n*        DIFFERENTLY FROM WHAT ERREXIT INDICATES BY ITS ACTION        *\n*        CODE, IF IT SO CHOOSES.                                      *\n*                                                                     *\n*        ACTION CODES AND MODIFIERS ARE AS FOLLOWS:                   *\n*                                                                     *\n*            00 MACRO COMPLETED SUCCESSFULLY                          *\n*               REG 0 MODIFIER=0                                      *\n*                                                                     *\n*            04 THIS IS A SNO (SHOULD NOT OCCUR) WHICH WILL NOT       *\n*               BE SET BY THE ERROR EXIT. IF THIS IS SET AT           *\n*               NSI, THE NETWORK SOLICITOR SHOULD ABNORMALLY          *\n*               TERMINATE.                                            *\n*                                                                     *\n*TORELES     08 BRANCH TO RELEASE                                     *\n*RELONLY        REG 0 MODIFIER=0 CLSDST                               *\n*REL1ST                        4 CLSDST + OPNDST (AQUIRE)             *\n*                                                                     *\n*TOSEND     0C BRANCH TO SENDMSG                                      *\n*               REG 0 MODIFIER=MESSAGE NUMBER                         *\n*                                                                     *\n*REISSU        10     REISSUE THE REQUEST                             *\n*                                                                     *\n*TOENDREQ    14 BRANCH TO FREERPL                                     *\n*                                                                     *\n*TORESEND    18 RESEND                                                *\n*RSETSOL     1C SNOCCUR                                               *\n*                                                                     *\n*TOPROBDV    20 BRANCH TO PROBDEV                                     *\n*                                                                     *\n*    SINCE NETSOL DOES NOT ISSUE ALL API MACROS, NOT ALL              *\n*    RTNCD CODES AND REASON CODES ARE POSSIBLE. THOSE                 *\n*    FDBK3 CODES WHICH CAN OCCUR FOR THE MACROS ISSUED ARE            *\n*    LISTED WITHIN THE SUBSECTIONS OF ERREXIT FOR EACH                *\n*    RTNCD CODE. THIS LIST INCLUDES ANY WHICH MAY BE                  *\n*    IMPOSSIBLE BECAUSE OF CURRENT NETSOL LOGIC.  THOSE WHICH         *\n*    ARE POSSIBLE ARE INDICATED WITH AN '*'.  BASIC ONLY              *\n*    CODES ARE NOT LISTED.                                            *\n*                                                                     *\n*                                                                     *\n*    THE FLAGS SET ARE:                                               *\n*                                                                     *\n*          LOOPONCE - REISSUE I/O COMMAND ONE MORE TIME. IF           *\n*                     THE REISSUED COMMAND IS SUCCESSFUL, THE         *\n*                     FLAG MUST BE TURNED OFF BY THE MAINLINE         *\n*                     OR EXIT ROUTINE. IF UNSUCCESSFUL,               *\n*                     ERREXIT TURNS OFF THE FLAG ON ENTRY TO          *\n*                     HANDLE THE FAILURE.                             *\n*                                                                     *\n*            RELOPND - RELEASE THE DEVICE THEN OPNDST(ACQUIRE)        *\n*                      IT, THUS RE-ESTABLISHING A SESSION FOR         *\n*                      THAT DEVICE.                                   *\n*                                                                     *\n*           SHUTDOWN - NETSOL SHUTDOWN IN PROGRESS. IF THIS           *\n*                      BIT IS ON AT ENTRY TO AN EXIT ROUTINE          *\n*                      OTHER THAN TPEND, NO PROCESSING IS DONE        *\n*                      WITHIN THE ROUTINE. THIS WILL RAPIDLY          *\n*                      FLUSH EXITS REQUESTS ALREADY SCHEDULED         *\n*                      AT THE TIME A NEED FOR SHUTDOWN IS             *\n*                      DETECTED.                                      *\n*                      NOTE: THIS BIT IS ALSO SET BY THE TPEND        *\n*                            EXIT, WHICH HAS BEEN SCHEDULED           *\n*                            PRIOR TO ENTRY TO ERREXIT FOR A          *\n*                            SHUTDOWN CONDITION.                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNETSOLER CSECT ,             SPLIT OFF FOR ADDRESSABILITY        87186\nERREXIT  DS    0H\n         BALR  R9,0                                              87186\n         USING *,R9          LOCAL BASE                          87186\n         SPACE 1\n***********************************************************************\n*        NO NEED TO ESTABLISH ADDRESSABILITY, SINCE BASE REGISTERS    *\n*        HAVE NOT BEEN MODIFIED.  NOTE THAT ALSO PTRRPL POINTS TO RPL *\n*        USED IN EXIT ROUTINE, ALTHOUGH IT IS NOT NECESSARILY THE RPL *\n*        IN USE WHEN ERREXIT WAS ENTERED, I. E. SYNCHRPL MAY          *\n*        HAVE BEEN IN USE FOR INQUIRE (APPSTAT).                      *\n***********************************************************************\n         SPACE 1\n         LR    R7,R0                   SAVE RTNCD CODE TO\n*                                       USE AS RETURN CODE IF\n*                                       ENTRY FROM MAINLINE.\n         SPACE 1\n         DROP  R5\n         USING IFGRPL,R1               => R P L\n         SPACE 1\n         LR    R8,R1                   SAVE RPL ADRESS\n         LR    R6,R14                  SAVE RETURN ADDRESS\n         SPACE 1\n***********************************************************************\n*        FORMAT THE RPL ERROR FIELDS INTO A READABLE MESSAGE AND      *\n*        WRITE THE MESSAGE TO THE OPERATOR. NOTE THAT SOME ERRORS     *\n*        WILL NOT BE LOGGED TO THE SYSTEM LOG AS THEY ARE CONSIDERED  *\n*        UNIMPORTANT. THE DATA IN ERMDATA ARE AVAILABLE FOR           *\n*        DEBUGGING PURPOSES.                                          *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*        BYPASS THOSE ERROR COMBINATIONS DEFINED IN 'ERMSGTAB'        *\n***********************************************************************\n         SPACE 1\n         STM   R3,R5,RPLERRSA     SAVE WORK REGS DURING TABLE SCAN\n         TM    UFLAGS,SHUTDOWN+UFGIGNER+UFGREST  SHUTTING DOWN ? 89338\n         BNZ   ERMBYPAS      YES, DON'T FLOOD CONSOLE            89338\n         MVC   ERMDATA(1),RPLREQ  BUILD                  REQ\n         MVC   ERMDATA+1(2),RPLFDBK   ERROR COMPARISON  /RTNCD/FDBK2\n         MVC   ERMDATA+3(4),RPLSSEI     FIELD           /SSEI/SSMI/USER\n         LM    R3,R5,ERMBXLE      LOAD BXLE REGS\n         TM    UFLAGS,INITDLAY  STILL IN START-UP MODE ?         89338\n         BZ    *+8           NO                                  89338\n         LA    R3,ERMINIT    USE LONGER EXCLUSION LIST           89338\n         CR    R3,R5              NULL TABLE?\n         BH    ERMSG              YES => DISPLAY ERROR MSG\n         SPACE 1\nERMLOOP  MVC   ERMTEMP,ERMDATA    COPY COMPARISON FIELD TO WORKAREA\n         NC    ERMTEMP,ERMAND(R3) ZERO IRRELEVANT FIELDS FOR COMPARE\n         CLC   ERMTEMP,ERMCODE(R3) A NON-DISPLAY ERROR?\n         BE    ERMBYPAS             YES => DON'T DISPLAY ERROR MSG\n         BXLE  R3,R4,ERMLOOP        NO  => LOOK AT NEXT TABLE ENTRY\n         SPACE 1\n***********************************************************************\n*        FORMAT AND DISPLAY ERROR MESSAGE                             *\n***********************************************************************\n         SPACE 1\nERMSG    UNPK  PACKWORK(3),RPLREQ(2)   UNPACK REQUEST CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+33(2),PACKWORK PUT IN THE MESSAGE\n         UNPK  PACKWORK(3),RPLRTNCD(2) UNPACK RETURN CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+42(2),PACKWORK PUT IT IN THE MESSAGE\n         UNPK  PACKWORK(3),RPLFDB2(2)  UNPACK FEEDBACK 2 CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+51(2),PACKWORK PLACE IN MESSAGE\n         UNPK  PACKWORK(9),RPLSSEI(5)  UNPACK SYSTEM SENSE CODES\n         TR    PACKWORK(8),TRTAB       PRETTY IT UP\n         MVC   ERRORMSG+62(2),PACKWORK TO MESSAGE\n         MVC   ERRORMSG+73(2),PACKWORK+2  RPLSSMI CODES TOO\n         MVC   ERRORMSG+82(4),PACKWORK+4  RPLUSNSI CODES ALSO\n         L     R3,RPLUSFLD             -> TTE FOR TERMINAL NAME\n         MVC   ERRORMSG+92(8),TERMNAME TO ERROR MESSAGE AREA\nERMWTO   WTO   MF=(E,ERRORMSG)              WRITE ERROR MSG.\nERMBYPAS LR    R15,R7                  RESTORE R0 RETURN CODE\n         LR    R1,R8                   RESTORE RPL ADDRESS\n         LR    R14,R6                  RESTORE RETURN ADDRESS\n         LM    R3,R5,RPLERRSA          RESTORE WORK REGS\n         SPACE 1\n***********************************************************************\n*        CHECK IF ERREXIT HAS BEEN ENTERED FROM MAIN LINE OR          *\n*        EXIT ROUTINE . IF ERROR IN MAIN LINE THEN RETURN VIA         *\n*        REGISTER 14, AND UPON RETURN TO MAIN-LINE CODE               *\n*        APPROPRIATE ACTION WILL BE TAKEN.                            *\n***********************************************************************\n         SPACE 1\n         LR    R3,R14                  SAVE RETURN ADDR\n         C     R1,=A(SETLRPL)  IS THIS A SETLOGON REQUEST ?      88210\n         BER   R14                     YES.  IN MAINLINE\n*                                       AND RETURN TO VTAM.\n         CH    R15,HEX18           18  RPL ECB/EXIT PROBLEM?\n         BL    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n*                                       OCCUR SINCE SHUTDOWN\n*                                       SWITCH STOPS EXITS'\n*                                       ACTION PRIOR TO THE\n*                                       CLSDSTACB.\n*                                      NOTE. CODES HIGHER\n*                                       THAN 18 DO NOT EXIST\n         SPACE 1\n***********************************************************************\n*        UPON ENTRY IF R1 IS NOT EQUAL TO R5 (R1 = A(SYNCHRPL) )      *\n*        THEN R1'S AND R5'S INFORMATION MUST BE COMBINED.             *\n*        THE COMMAND THAT CAUSED THE ERROR WAS                        *\n*        ISSUED USING SYNCHRPL AND R5 IS POINTING TO AN               *\n*        ASYNCH RPL.  FOR THIS RTN WE NEED SOME INFO IN BOTH.         *\n***********************************************************************\n         SPACE 1\n         CR    R1,R5                   ARE WE USING ONE RPL\n         BE    ERRPLOK                 YES, BRANCH\n*              MOVE THE NECESSARY INFORMATION FROM THE R5 RPL TO\n*              SYNCHRONOUS RPL (R1). THIS IS THE SWITCHES, SAVE AREAS\n*              ETC. PRIOR TO THE WORK AREAS.\n         L     R14,=A(SYNWORK)  GET WORK AREA                    86145\n         MVC   0(WORKRPLA,R14),LNIFGRPL(R5)                      86145\n         SPACE 1\n***********************************************************************\n*        GET THE FDBK2 FIELD FROM THE RPL.                            *\n*        PREPARE TO BRANCH BASED ON 'RTNCD'.                          *\n***********************************************************************\n         SPACE 1\nERRPLOK  DS    0H\n         SLR   R6,R6                   CLEAR REG 6  .\n         IC    R6,RPLFDB2              PICK UP REASON CODE\n         LR    R7,R6                   START TO INITIALIZE R7\n*                                       WHICH WILL BE USED AS\n*                                       AN INDEX FOR BRANCH\n*                                       TABLES\n         SLR   R0,R0                   SET UP DEFAULT ACTION CODE\n         SPACE 1\n***********************************************************************\n* TRANSLATE RTNCD CODE AND FDBK2 CODE INTO ACTION CODE                *\n*                                                                     *\n*   RTNCD CODES HAVE A GENERAL MEANING AS FOLLOWS:                    *\n*                                                                     *\n*          04   EXTRAORDINARY COMPLETION                              *\n*                 FUNCTION COMPLETED. ADDITIONAL INFORMATION          *\n*                 AVAILABLE. PROBABLY HANDLED OUT OF LINE.            *\n*                 CONDITION SHOULD BE HANDLED BEFORE MAKING           *\n*                 FURTHER REQUESTS TO THE DEVICE.                     *\n*                                                                     *\n*          08   REISSUE                                               *\n*                 TEMPORARY ENVIRONMENT CONDITION CAUSED              *\n*                 REQUEST TO BE REJECTED.                             *\n*                                                                     *\n*          0C   DAMAGE                                                *\n*                 INTEGRITY OF THE REQUEST OR DEVICE HAS BEEN         *\n*                 DISTURBED.                                          *\n*                                                                     *\n*          10   ENVIRONMENT ERROR                                     *\n*                 REQUEST INCOMPLETE DUE TO ENVIRONMENTAL             *\n*                 CONDITION. ENVIRONMENT MUST BE ALTERED              *\n*                 BEFORE RECOVERY CAN BE ATTEMPTED.                   *\n*                                                                     *\n*          14   USER LOGIC ERROR                                      *\n*                 USER ERROR ON THE REQUEST. REQUEST REJECTED         *\n*                 OR INCOMPLETE. NOT EXECUTABLE IN THE                *\n*                 PRESENT FORM.                                       *\n*                                                                     *\n*          18   RPL NOT AN RPL   OR   RPL IS ALREADY ACTIVE.          *\n***********************************************************************\n         SPACE 1\n         B     FEEDTAB(R15)            GO TO FEEDBACK CODE\n*                                       HANDLING ROUTINE\nFEEDTAB  BAL   R7,SNOCCUR           0  FEEDBACK OF 00 DOESN'T\n*                                       ENTER LERAD OR SYNAD\n         B     EXTRAORD             4  EXTRAORDINARY COM-\n*                                       PLETION\n         B     REISSUE              8  REISSUE\n         B     DAMAGE               C  DAMAGE\n         B     ENVIRON             10  ENVIRONMENT ERROR\n         B     LOGIC               14  LOGIC ERROR\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 04 - EXTRAORDINARY COMPLETION                           *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)         MEANING                             *\n*                                                                     *\n*    03        *  RECEIVE    /   \"     \"          \"     MESSAGE       *\n*    04        *  RECEIVE    / EXCP CONDITION INCOMING RESPONSE       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXTRAORD DS    0H\n         CH    R6,HEX3                 IS IS VALID FDBK2\n         BE    VALFDBK2                YES SO HANDLE IT\n         CH    R6,HEX4                 IS IT ONLY VALID REASON CODE\n         BE    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n* BSC DEVICES UNDER VTAM2 RESPOND WITH ZERO SENSE IN SOME CASES\n* TO RECORD MODE MACROS I.E.\n* WHEN USER SENSE INCLUDED THE SSENSEI + SSENSMI FIELDS ARE 0\n***********************************************************************\n         SPACE 1\nVALFDBK2 IC    R7,SENSE                SAVE SSENSEI FOR BRANCHING\n         LTR   R7,R7                   DO WE HAVE ZERO STATUS?\n         BZ    STAT3270                MUST BE STATUS FROM 3270\n***********************************************************************\n*        CONVERT SENSE CODE INTO BRANCH TABLE OFFSET                  *\n***********************************************************************\n         SRL   R7,3                    ASSUME X'04' IS INDEX = 0\n         SLR   R6,R6                   ZERO INDEX REG\nCINDEX4  LTR   R7,R7                   INDEX DONE?\n         BZ    BRTAB4                  YES => GO BRANCH\n         SRL   R7,1                    NO  => SHIFT NEXT BIT OUT\n         LA    R6,4(,R6)                      BUMP INDEX BY 4\n         B     CINDEX4                        GET NEXT BIT\nBRTAB4   CH    R6,HEX14                INDEX TOO BIG?\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RSNTAB4(R6)             GO TO HANDLE SSENSMI\nRSNTAB4  BAL   R7,SNOCCUR        <08 (00)  SHOULD NOT OCCUR\n         B     REQREJ             08 (04)  REQUEST REJECT\n         B     REQERR             10 (08)  REQUEST ERROR\n         B     STATERR            20 (0C)  STATE ERROR\n         B     RHERROR            40 (10)  RH ERROR\n         B     PATHERR            80 (14)  PATH ERROR\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        08 - REQUEST REJECT                                          *\n*                                                                     *\n*     SSENSEI/SSENSMI                                                 *\n*       08      00                  REISSUE SEND (IN BRACKET)         *\n*       08      01                  RELEASE LU                        *\n*       08      02                  IGNORE (CONTINUE)                 *\n*       08      11                  REISSUE SEND (USER ATTN)     87054\n*       08      13                  REISSUE SEND (IN BRACKET)         *\n*       08      18           LINK CONNECT/DISCONNECT (RETRY)     86131\n*       08      1B                  IGNORE (WAIT FOR LU TO ENTER DATA)*\n*       08      1C                  IGNORE                  DC18203   *\n*       08      27                  INTERMITTENT ERROR - RETRY   88304\n*       08      2B                  REISSUE SEND                      *\n*       08      2D                  IGNORE (CONTINUE)                 *\n*       08      31                     \"       \"                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nREQREJ   IC    R7,SENSE+1              GET SSENSMI\n         CH    R7,HEX2                 IS IT POSSIBLE\n         BH    TRYHIGH                 >2 TRY FOR HIGH RANGE\n         SLL   R7,2          CONVERT INDEX TO OFFSET\n         B     RSNTAB5(R7)             HANDLE SSENSMI\n         SPACE 1\nRSNTAB5  B     DORESEND      0  REISSUE SEND WITHOUT BB          86160\n         B     DORELON       1  RELEASE                          86160\n         B     DOENDREQ      2  CONTINUE REQUEST (IGNORE)        86160\n         SPACE 1\nTRYHIGH  CH    R7,HEX13            13  REISSUE SEND\n         BE    DORESEND                                          86160\n         CH    R7,HEX11      ATTENTION DURING WRITE ?            87054\n         BE    DORESEND      YES; RESTART THE WRITE (NASTY)      87054\n         SPACE 1                                                 86131\nCHK18X   CH    R7,HEX18      LINK DISCONNECT/RECONNECT ?         86131\n         BNE   CHK1BX        NO; LOOK FOR OTHERS                 86160\n         L     R15,RPLUSFLD  GET TERMINAL BLOCK                  86160\n         CLI   TERMMSGX-TERMTABL(R15),X'06'  LOGON MESSAGE ?     86160\n         BE    CONTPASS      YES; COMPLETE RELEASE               86160\n         OI    TERMMSGX-TERMTABL(R15),X'80' ACTIVATE THE MESSAGE 86160\n         B     STATERR       AND TREAT AS STATE ERROR            86160\n         SPACE 1\nCHK1BX   CH    R7,HEX1B                KEY PRESSED ON TERMINAL ?\n         BE    DOENDREQ      YES; IGNORE FOR NOW                 86160\n         SPACE 1\nCHK1CX   EQU   *                                               DC18203\n         CH    R7,HEX1C                                        DC18203\n         BE    DOENDREQ      IGNORE FOR NOW                      86160\n         SPACE 1                                               DC18203\nCHK2BX   CH    R7,HEX2B\n         BE    DORESEND      INEGRITY LOST - RETRY               88304\n         CH    R7,=Y(X'27')  INTERMITTENT ERROR ?                88304\n         BNE   CHK2DX\nDORESEND LA    R15,TORESEND        2B  WE SHOULD TRY AGAIN\n         B     ERRETURN\n         SPACE 1\nCHK2DX   CH    R7,HEX2D\n         BE    DORELON       TAKE TERM OUT OF SERVICE (ELSE LOOPS)\nCHK31X   CH    R7,HEX31            31  DEVICE POWERED OFF       DC18203\n         BE    DOENDREQ      YES; IGNORE FOR NOW                 86160\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        10 - REQUEST ERROR                                           *\n*                                                                     *\n*     SSENSEI/SSENSMI                                                 *\n*       10      03                  RELEASE TERMINAL                  *\n*       10      XX                  SHOULD NOT OCCUR                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nREQERR   CLI   SENSE+1,X'03'           FUNCTION NOT SUPPORTED?\n***      BE    *+8                          JUMP OVER THE BAL    86012\n***      BAL   R7,SNOCCUR                   TELL WHERE WE CAME FROM\n         SPACE 1\n         STM   R1,R3,RPLERRSA-IFGRPL(R5)  SAVE REG 1 - 3         86160\n         L     R3,RPLUSFLD             LOAD A(TTE)\n         MVC   MSG1003+17(8),TERMNAME  MOVE NODE NAME TO MSG\n         WTO   MF=(E,MSG1003)          WTO ERROR MSG\n         L     R1,=A(DDT3270E)  EDS TYPE DEVICE ?                89263\n         C     R1,TERMDDT    OR DID SOMEONE GOOF ?               89263\n         BNE   NOTEDS03      ?                                   89263\n*KILL*   XC    TERMMODE,TERMMODE  KILL LOGON MODE                89263\n         L     R1,=A(DDT3270)   TRY AS A DUMB DEVICE             89263\n         ST    R1,TERMDDT    UPDATE WITH PLAIN DEVICE            89263\n         LM    R1,R3,RPLERRSA-IFGRPL(R5)  RESTORE                89263\n         B     DORESEND      TRY RESENDING THIS MESSAGE SANS SFE 89263\nNOTEDS03 DS    0H                                                89263\n         SPACE 1\n         LM    R1,R3,RPLERRSA-IFGRPL(R5)  RESTORE REG 1 - 3      86160\nDORELON  LA    R15,TORELES         03  FUNCTION NOT SUPPORTED\n         LA    R0,RELONLY              RELEASE TERMINAL\n         B     ERRETURN\n         SPACE 1\nSTATERR  LA    R15,TORELES         20  STATE ERROR\n         LA    R0,REL1ST               RELEASE AND REOPEN\n         B     ERRETURN\n         SPACE 1\nRHERROR  BAL   R7,SNOCCUR\n         ORG   RHERROR                                           87131\n         B     STATERR       HAPPENED WHILE INSTALLING LOCAL SNA 87131\n*                            CONTROLLER AND CONNECTING/DISCONNECTING\n*                            CRTS.                               87131\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*          80 - PATH ERRORS                                           *\n*                                                                     *\n*           SSENSEI/SSENSMI                                           *\n*             80      05           NO SESSION CONDITION               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPATHERR  IC    R7,SENSE+1              GET   SSENSMI\n         CH    R7,HEX5                 IS IT ONE WE CAN HANDLE\n         BE    STATERR       HANDLE 'NO SESSION' BY RE-OPENING   86160\n         B     DOENDREQ      ELSE IGNORE                         86160\n         SPACE 1\nSTAT3270 DS    0H                      HANDLE 2 BYT OF USER SENSE CODES\n*                                       RETURNED FROM 3270\n         CLC   =X'0001',USENSE  PLAIN OLD I/O ERROR ?            92073\n         BNE   STAT3272      NO                                  92073\n         L     R15,RPLUSFLD  GET TERM BASE                       92073\n         L     R0,=A(DDT3270E)  GET EDS BASE                     92073\n         C     R0,TERMDDT-TERMTABL(R15)  TRYING AS EDS DEVICE ?  92073\n         BE    REQERR        YES; TRY AS NON-EDS                 92073\nSTAT3272 LA    R15,TORELES             ASSUME DEVICE UNUSABLE\n         CLC   USENSE,SNAS0200         WAS SDLC STATUS RETURNED FOR DE\n*                                       WHICH SHOWS POWER ON\n         BE    INTRREQ1                YES CHECK MORE\n         CLC   USENSE,=X'0A0A'  OUR PROTOCOL CONVERTER CODE ?    88185\n         BE    STATERR       RELEASE AND RE-ACQUIRE              88185\n         CLC   USENSE,SNAS0010         NO CHECK IF INTV. REQ. (DEVICE\n*                                       POWERED OFF )\n         BNE   ERRETURN                RELEASE DEVICE\n*        B     DOENDREQ      WAIT FOR DEVICE POWER-UP\n         SPACE 1\nINTRREQ1 DS    0H                      DEVICE IS NOW AVAILABLE. JUST\nDOENDREQ LA    R15,TOENDREQ  IGNORE BECAUSE LOSTERM WILL GET CALLED\n         B     ERRETURN                SCHEDULED\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 08 - REISSUE                                            *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)         MEANING                             *\n*                                                                     *\n*      00      * ALL API MACROS   TEMPORARY STORAGE                   *\n*                (NOT CHECK,       ALLOCATION FAILURE                 *\n*                 OPEN, OR CLOSE)                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREISSUE  DS    0H\n         LTR   R6,R6                   ONLY VALID REASON CODE\n*                                       IS 0\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LA    R15,REISSU           0  ACTION IS TO REISSUE\n*                                      REG 0 IS ALREADY SET FOR\n*                                       REISSUE ONLY\n         B     ERRETURN                RETURN TO EXIT ROUTINE\n         SPACE 3                                                 90120\n***********************************************************************\n*                                                                     *\n*  FEEDBACK CODE 0C - DAMAGE                                          *\n*                                                                     *\n*   REASON CODE   MACROS         MEANING          ACTION              *\n*    00              *           BASIC ONLY          *                *\n*    01          RECEIVE      LU NOT AVAILABLE     RELEASE 08         *\n*                 SEND         \"    \"   \"            \"     08         *\n*    02          REC/SEND     REQUEST CANCELLED    FREERPL 14 00      *\n*                             BY TEST REQUEST                         *\n*    03              *         BASIC ONLY             *               *\n*    04              *         BASIC ONLY             *               *\n*    05              *         BASIC ONLY             *               *\n*    06              *         BASIC ONLY             *               *\n*    07          REC/SEND     CONNECTION RECOVERY  FREERPL 14 00      *\n*                               IN PROGRESS                           *\n*    08          REC/SEND     LU RESTARTED         FREERPL 14 00      *\n*    09          OPNDST       NODE DEACTIVATED     FREERPL 14 00      *\n*    0A          RECEIVE      SNOCCUR                SNOCCUR          *\n*    0B         RE/SEND/CLSDST REQUEST CANCELLED   FREERPL 14 00      *\n*                                BY CLSDST                            *\n*    0C          REC/ SEND     REQUEST CANCELLED   RELEASE 14 04      *\n*                                BY CLEAR                             *\n*    0D          SEND          REQ CANCEL BY EXCP.  RELEASE/REACQ     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDAMAGE   DS    0H\n         CH    R6,HEXD                 IS REASON CODE WITHIN\n*                                       LIMITS OF POSSIBILITY?\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SLL   R7,2                    INDEXING\n         B     RSNTABC(R7)             GO TO REASON CODE\n*                                       HANDLING ROUTINE\nRSNTABC  BAL   R7,SNOCCUR          0   BASIC MODE ONLY           86160\n         B     DORELON             1   LU NOT AVAILABLE          86160\n         B     DOENDREQ            2   REQUEST CANCELLED BY TEST REQ.\n         BAL   R7,SNOCCUR          3   BASIC ONLY                86160\n         BAL   R7,SNOCCUR          4   BASIC ONLY                86160\n         BAL   R7,SNOCCUR          5   BASIC ONLY                86160\n         BAL   R7,SNOCCUR          6   BASIC ONLY                86160\n         B     DOENDREQ            7   CONNECTION RECOVERY       86160\n         B     DOENDREQ            8   LU  RESTARTED             86160\n         B     DOENDREQ            9   NODE DEACTIVATED          86160\n         BAL   R7,SNOCCUR          A   SNOCCUR                   86160\n         B     DOENDREQ            B   REQUEST CANCELLED BY CLSDST\n         B     STATERR             C   RELEASE WITH OPNDST       86160\n         B     STATERR             D   RELEASE AND RE-ACQUIRE    87103\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 10 - ENVIRONMENT                                        *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)      MEANING                  ACTION        *\n*                                                                     *\n*     00        OPNDST/CLSDST  TERM,LU,APPL NOT ACTIVE  CLSDST  0C 08 *\n*                                              (OPNDST) FREERPL 14 00 *\n*     01        OPNDST         OPNDST FAILED           FREERPL  14 00 *\n*                                                                     *\n*     02        CLSDST (PASS)  TARGET APPL. UNACCEPTABLE MSG.   0C 09 *\n*                                                                     *\n*     03        OPNDST/SEND/REC  HALT QUICK                   SNOCCUR *\n*                                                                     *\n*     05         \"      \"     \"   CHANNEL/LINK FAILURE RELEASE  08 00 *\n*                                                                     *\n*     06        OPNDST          ANS                    RELEASE  08 00 *\n*                                                                     *\n*     07        SEND/REC        CANCELLED BY VARY      RELEASE  08 00 *\n*                                                                     *\n*     09         \"    \"         TERMINATE SELF/LOGOFF  FREERPL  14 00 *\n*                                                                     *\n*     0A        ALL MACROS      ACF/VTAM ERROR         RELEASE  08 00 *\n*                                                                     *\n*     0D        ALL MACROS      ACF/VTAM INACTIVE TO ACB       SNOCCUR*\n*                                                                     *\n*     0E        ALL MACROS      TCB ABENDED            FREERPL  14 00 *\n*                                                                     *\n*     0F        SEND/REC        BUFFERS FILLED         FREERPL  14 00 *\n*                                                                     *\n*     10         \"   \"          TERMINATE SELF COMMAND RELEASE  08 04 *\n*                                                                     *\n*     11        OPNDST          SDT FAILED             FREERPL  14 00 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENVIRON  DS    0H\n         CH    R6,HEX11                IS RSN COD11VALID SIZE?\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*   HANDLE FIRST THREE REASON CODES WITHOUT BRANCH TABLE.             *\n***********************************************************************\n         SPACE 1\n         LTR   R6,R6                   CHECK FOR TERMINAL OR\n*                                       APPLICATION NOT\n*                                       AVAILABLE.\n         BNZ   CHKQUIES            \u00ac0  IF NOT, NEXT CHECK\n*\n         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?\n         BO    TERMUNAV\n         LA    R15,TOSEND              NO. APPLICATION UNAVAIL-\n         LA    R0,MSG08                ABLE WRITE ERROR MSG\n         B     ERRETURN\nTERMUNAV DS    0H\n         LA    R15,TOENDREQ            TERMINAL UNAVAILABLE FOR\n         B     ERRETURN                 OPNDST(SPEC) AFTER\n*                                       CLSDST(PASS) BECAUSE\n*                                       CLSDST(PASS) FAILED\n*                                       AND THE NETWORK OPER-\n*                                       ATOR VARRIED OFF THE\n*                                       TERMINAL.\nCHKQUIES DS    0H\n         LA    R15,TORELES             PREPARE ACTION CODE\n         SLL   R7,2                     AND BRANCH TABLE INDEX\n*                                       IN CASE REASON CODE\n*                                       GREATER THAN 2\n         CH    R6,HEX2                 CHECK FOR 1 OR 2\n*\n         BL    TERMUNAV             1  OPNDST FAILED FREERPL\n*\n         BH    RSNTAB10(R7)        >2  GO TO REASON CODE\n*                                       HANDLING ROUTINE\n*\n         LA    R15,TOSEND           2  APPLICATION IS QUIESCING\n         LA    R0,MSG09                 OR NEVER ACCEPTS LOGONS\n*                                       BUT QUIESCE IS MORE\n*                                       LIKELY SINCE 'NEVER\n*                                       ACCEPTS WOULD PROBABLY\n*                                       HAVE BEEN FOUND ON THE\n*                                       INQUIRE.  EITHER CAN\n*                                       HAPPEN IF THE OTHER\n*                                       APPLICATION CHANGES ITS\n*                                       STATUS AFTER NETSOL'S\n*                                       INQUIRE(APPSTAT) BUT\n*                                       PRIOR TO THE LATER\n*                                       CLSDST(PASS).\n         B     ERRETURN                WRITE ERROR MESSAGE\nRSNTAB10 EQU   *-(3*4)                 START TABLE AT R6=3\n*\n         B     QUIKHALT             3  VTAM IS HALTING.\n*                                      NETSOL CAN NO LONGER\n*                                       COMMUNICATE WITH\n*                                       DEVICES. TPEND NOTIFIED\n*\n         BAL   R7,SNOCCUR           4  BASIC MODE ONLY\n         B     ERRETURN             5  PERMANENT PATH FAILURE\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         B     ERRETURN             6  AUTO NETWORK SHUTDOWN\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         B     ERRETURN             7  VARY DEACT. IMMEDIATE\n*                                       LOSTERM WAS SCHEDULED\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         BAL   R7,SNOCCUR           8  DIAL BASIC MODE ONLY\n         B     IGNORERR             9  TERMINATE SELF OR LOGOFF\n*\n         B     VTAMERR              A  VTAM ERROR FOR DEVICE\n*\n         BAL   R7,SNOCCUR           B  DIAL-OUT ONLY\n*\n         BAL   R7,SNOCCUR           C  DIAL IN BASIC MODE ONLY\n         B     QUIKHALT             D  VTAM INACTIVE TO YOUR     89129\n*                                      ACB.  SHOULD NOT OCCUR\n*\n         B     QUIKHALT             E  TCB ABENDED               89129\n         B     IGNORERR             F  BUFFERS FILLED\n         B     ERR1010             10  TERMINATE SELF\n         B     IGNORERR            11  SDT FAILED\n*\nQUIKHALT DS    0H\n         LA    R15,TOENDREQ            INDICATE RETURN TO VTAM\n         OI    UFLAGS,SHUTDOWN+UFGIGNER  BEGIN SHUTDOWN          86065\n         B     ERRETURN\n*\nVTAMERR  DS    0H                      ON 100A RTNCD  JUST\n         LA    R15,TOPROBDV             RELEASE THE TERMINAL.\n         B     ERRETURN\n         SPACE 1\nIGNORERR DS    0H\n         LA    R15,TOENDREQ            END REQUEST\n         B     ERRETURN\n         SPACE 1\nERR1010  DS    0H\n         LA    R15,TORELES\n         LA    R0,REL1ST\n         B     ERRETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 14 - LOGIC\n*                                                                     *\n*   FDBK2 CODE      MACRO(S)     MEANING                    ACTION    *\n*                                                                     *\n*       00        REC/SEND    NON-VTAM REQUEST CDE         SNOCCUR    *\n*                                                                     *\n*       02         \"    \"     EXIT ADDRESS ZERO            SNOCCUR    *\n*                                                                     *\n*       03         \"    \"     ECB ADDRESS ZERO             SNOCCUR    *\n*                                                                     *\n*       04         CHECK      RPL IS NOT ACTIVE            SNOCCUR    *\n*                                                                     *\n*       10         REC/SEND   INVALID ACB                  SNOCCUR    *\n*                                                                     *\n*       11          \"    \"                                            *\n*                                                                     *\n*       12          \"    \"    CLSDST IN PROGRESS (FREERPL)  14 00     *\n*                                                                     *\n*       13      REC/SEND/INT  RPL ARG + NIB CID INVALID     14 00     *\n*                                                                     *\n*       1E      REC/SEND      INVALID DATA ARE OR LENGTH   SNOCCUR    *\n*                                                                     *\n*       23        \"   \"       INVALID MACRO REQUEST TYPE   SNOCCUR    *\n*                                                                     *\n*         3C    SEND (POST=SCHED)   TRIED TO ISSUE 2ND SEND14 00DC18203\n*       3B-47     \"   \"                                    SNOCCUR    *\n*                                                                     *\n*       4A                                                 SNOCCUR    *\n*                                                                     *\n*       4B          \"         INVALID LOGON         (MSG)   0C 07     *\n*                                                                     *\n*       4C       INQUIRE(APPLSTAT) NO APPL NAME     (MSG)   0C 07     *\n*                INQUIRE(SESSPARM) NO QUEUED CINIT(FREERPL) 14 00     *\n*                CLSDST(PASS)      NO CDRSC FOR TERM(MSG)   0C 03     *\n*                                                                     *\n*       4D                                                 SNOCCUR    *\n*                                                                     *\n*       4E-51                                              SNOCCUR    *\n*                                                                     *\n*       52      INVALID NIB                                SNOCCUR    *\n*                                                                     *\n*       53      INQUIRE       INVALID SYM. NAME     (MSG)   0C 06     *\n*               OPNDST(SPEC)  INVALID SYM. NAME   (FREERPL) 14 00     *\n*                                                                     *\n*       54      OPNDST        DEST. UNOPENABLE    (FREERPL) 14 00     *\n*                                                                     *\n*       55      OPNDST(AQUIRE) APPL NOT AUTHORIZED         SNOCCUR    *\n*               CLSDST(PASS)   ????????????????????   (MSG) 0C 05     *\n*                                                                     *\n*       56-5C                                              SNOCCUR    *\n*                                                                     *\n*       5D      CLSDST        DEST, NOT OPENED    (FREERPL) 14 00     *\n*                                                                     *\n*       5E                                                            *\n*                                                                     *\n*       5F      CLSDST        RESOURCE NOT OWNED  (FREERPL) 14 00     *\n*                                                                     *\n*       60      CLSDST           \"      \"  CLOSABL   \"     14 00      *\n*                                                                     *\n*        62     REC/SEND                                   SNOCCUR    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOGIC    DS    0H\n         CH    R6,HEX60                 IS REASON CODE WITHIN\n*                                       LIMITS OF POSSIBILITY?\n*                                       X'60' IS HIGHEST VALID\n*                                       VALUE TO BE EXPECTED.\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         CH    R6,HEX4A                IF REASON CODE AT LEAST\n         BNL   CHK56X            >=4A   X'4A', DO SEPARATELY\n         LA    R15,TOENDREQ            PREPARE ACTION FOR\n*                                       REASON CODES OF 12 & 13\n         CH    R6,HEX12                CLSDST IN PROGRESS?\n         BE    ERRETURN            12  YES, ACTION CODE\n*                                        ALREADY SET\n         CH    R6,HEX13                IS REASON CODE 13?\n         BNE   CHK3CX        *****DEBUG - FREE DEVICE WHICH OTHERWISE\n         OI    UFLAGS,UFGREST+UFGIGNER  FORCE RESTART *****DEBUG*****\n         STM   R15,R1,A$SAVE-IFGRPL(R5) SAVE *****DEBUG*****     89344\n         ABEND 666,DUMP      ****DEBUG*****                      90127\n*DEBUG*  BAL   R7,SNOCCUR    HANGS ON 'PNFY1' STATUS *****DEBUG  89338\n         LM    R15,R1,A$SAVE-IFGRPL(R5) RESTORE *****DEBUG*****  89344\n         CR    R15,R15       SET CODE FOR NEXT TEST   *****DEBUG*****\n         BE    ERRETURN            13  CID INVALID\n*                                      PROBABLY ALREADY\n*                                       RELEASED THE TERMINAL.\n*                                       IGNORE.\nCHK3CX   CH    R6,HEX3C             3C  TRY TO ISSUE 2ND SEND   DC18203\n         BE    ERRETURN                 YES SO IGNORE           DC18203\n         BAL   R7,SNOCCUR        16\nCHK56X   DS    0H\n         CH    R6,HEX56                IF REASON CODE MORE THAN\n         BH    CHK5DX             >56   X'56', DO SEPARATELY\n         LA    R15,TOSEND              PREPARE DEFAULT ACTION\n         SLL   R7,3                     AND BRANCH TABLE INDEX\n         B     RSNTAB14(R7)            GO TO REASON CODE\n*                                       HANDLING ROUTINE\nRSNTAB14 EQU   *-(8*(X'4A'))           START TABLE W/ R6=X'4A'\n*\n         BAL   R7,SNOCCUR          4A\n         NOP   0\n*\n         LA    R0,MSG07            4B  UNKNOWN LOGOMODE TABLE ENTRY\n         B     ER144B                  OR UNIDENTIFIED APPLICATION\n*\n         LA    R0,MSG07            4C  INQUIRE(APPSTAT)..NO SYMBOLIC\n         B     TSTINQA                  NAME FOR APPLICATION\n*                                     OR INQUIRE(SESSPARM)..NO QUEUED\n*                                       CINIT\n*                                      ASSUME INQUIRE(APPSTAT)\n*                                       THEN CHECK FOR IT\n*\n         BAL   R7,SNOCCUR          4D\n         NOP   0\n*\n         BAL   R7,SNOCCUR          4E\n         NOP   0\n*\n         BAL   R7,SNOCCUR          4F\n         NOP   0\n*\n         BAL   R7,SNOCCUR          50\n         NOP   0\n*\n         BAL   R7,SNOCCUR          51  APPLICATION NEVER\n         NOP   0                        ACCEPTS LOGONS\n*                                      MEANS NETSOL NEVER\n*                                       ACCEPTS LOGON.\n*\n         BAL   R7,SNOCCUR          52\n         NOP   0\n*\n         LA    R0,MSG07            53  SYMBOLIC (APPL OR TERM)\n         B     TSTINQA                  NAME NOT KNOWN\n*                                      ASSUME INQUIRE(APPSTAT)\n*                                       THEN CHECK FOR IT\n*\n         LA    R15,TOENDREQ                   54\n         B     ERRETURN\n*\n         LA    R0,MSG05            55  APPLICATION NOT AUTHORIZED\n         B     OPNDSPC                  FOR OPNDST(ACQUIRE)\n*                                      OR\n*                                      CLSDST FAILURE.\n*\n         BAL   R7,SNOCCUR          56  CONFLICT BETWEEN MODE\n         NOP   0                        AND DEVICE TYPE.\n*                                      TRIED TO OPNDST FOR\n*                                       A RECORD DEVICE.\n*                                       NETSOL ONLY SUPPORTS\n*                                       BASIC DEVICES.\n*                                      CAN NOT OCCUR IN NETSOL\nCHK5DX   DS    0H\n         CH    R6,HEX5D                CLSDST INVALID (TERMINAL\n*                                       NOT CONNECTED)\n         BNE   CHK5FX             \u00ac5D  NOT X'5D', CHECK FURTHER\n         LA    R15,TOENDREQ        5D  ACTION, RELEASE RPL AND\n         B     ERRETURN                 RETURN TO VTAM\nCHK5FX   DS    0H\n         CH    R6,HEX5F                LESS THAN X'5F' NOT\n         BNL   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n*\n         LA    R15,TOENDREQ     5F 60  REASON CODES OF 5F\n         B     ERRETURN                 AND 60 ARE POSSIBLE IF\n*                                       A RELREQ OR READEND\n*                                       EXIT IS PROCESSED\n*                                       AFTER THE DEVICE WAS\n*                                       PASSED TO ANOTHER\n*                                       APPLICATION.  THIS CAN\n*                                       HAPPEN BECAUSE THE\n*                                       CLSDST(PASS) WILL NOT\n*                                       PURGE AN ALREADY\n*                                       SCHEDULED EXIT.\nTSTINQA  DS    0H\n         TM    MFLAGS,INQAPPST         INQUIRE(APPSTAT) MEANS THE\n         BO    ERRETURN                 APPLICATION WAS UNKNOWN TO\n*                                       VTAM.\n*                                       => PUT OUT ERROR MESSAGE\n         LA    R0,MSG03                ASSUME CLSDST(PASS)\n         TM    MFLAGS,CLSDST           CLSDST FAILURE MEANS THERE\n         BO    ERRETURN                 IS NO CDRSC FOR THE TERMINAL\n*                                       IN A CROSS-DOMAIN SESSION.\n*                                       => PUT OUT ERROR MESSAGE\n         LA    R15,TOENDREQ            ASSUME INQUIRE(SESSPARM)\n*                                       FAILURE IMPLIES THAT THERE\n         TM    MFLAGS2,INQSESS          IS NO QUEUED CINIT FOR LOGON\n         BO    ERRETURN                 PROCESSING FOR THE TERMINAL.\n*                                       => END THE REQUEST\n         LA    R15,TOENDREQ            ASSUME OPNDST(SPEC)\n         TM    MFLAGS,OPNDSPEC         OPNDST FAILURE MEANS THE\n         BO    ERRETURN                 NODE IS UNKNOWN TO VTAM.\n*                                       POSSIBLY DUE TO MAJOR NODE\n*                                       BEING DEACTIVATED.\n*                                       => END THE REQUEST\n         BAL   R7,SNOCCUR              ANY OTHER CAUSE OF\n*                                       ERROR IS IMPOSSIBLE\nER144B   DS    0H\n         TM    MFLAGS,CLSDST           ERROR ON CLSDST(PASS)\n         BZ    ERRETURN                NO => WRITE UNKNOWN APPL'N\n         LA    R0,MSG01                YES. WRITE THE MESSAGE\n*                                       'XXXXXXXX UNKNOWN LOGOMODE'\n         B     ERRETURN\nOPNDSPC  DS    0H\n         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?\n         BNO   *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         TM    MFLAGS,CLSDST           WAS THIS A CLOSE\n         BO    ERRETURN                 CLDST(PASS).  OR\n*                                       APPLICATION CAN'T BE\n*                                       CONNECTED AS REQUESTED\n*                                       IN RELREQ OR READEND.\n*                                       ISSUE ALREADY PREPARED\n*                                       ERROR MESSAGE.\n         BAL   R7,SNOCCUR              NO, ANY OTHER CAUSE\n*                                       IS IMPOSSIBLE\n         TITLE '*********  N E T S O L  -  SCAN FOR LOGON SUBROUTINE'\nERRETURN DS    0H\n         STC   R15,ACTIONS             SAVE ACTION CODES FOR\n         STC   R0,ACTIONS+1             DEBUGGING\n         CR    R1,R5                   DO WE HAVE BOTH A SYNCH\n*                                      RPL AND A ASYNCH RPL\n         BE    ERROUT                  NO, SKIP THE MOVE OF THE\n*                                      RPL WORKAREA\n         L     R14,=A(SYNWORK)  GET WORK AREA                    86145\n         MVC   LNIFGRPL(WORKRPLA,R5),0(R14)   RESTORE WORKAREA   86145\n         SPACE 1\n         DROP  R1\n         USING IFGRPL,R5\n         SPACE 1\n         PUSH  USING         SAVE R3 AND ?                       91296\n         DROP  R3            R3 HAS RETURN ADDRESS, NOT TERM     91296\nERROUT   ICM   R2,15,RPLUSFLD  ANY TTE POINTER ?                 91296\n         BZ    ERROUTNS      NO                                  91296\n         LTR   R15,R15       RELEASE WITHOUT REACQUIRE?          91296\n         BZ    ERROUTNS      YES                                 91296\n         STM   R15,R1,A$SAVE   SAVE REGISTERS                    91296\n         TIME  BIN           GET CURRENT TIME                    91296\n         USING TERMTABL,R2                                       91296\n         LR    R1,R0         COPY TIME                           91296\n         S     R1,TERMETIM   SUBTRACT TIME OF LAST ERROR         91296\n         CH    R1,=Y(60*100)  MORE THAN ONE MINUTE ?             91296\n         BH    ERROUTNW      YES; SET NEW                        91296\n         INC   TERMERCT,WORK=R15  INCREASE CONSECUTIVE ERRORS    91296\n         CH    R15,=H'10'    10 ERRORS IN ONE MINUTE ?           91296\n         BL    ERROUTNR      NO; JUST RESTORE                    91296\n         LM    R15,R1,A$SAVE  RESTORE                            91296\n         SLR   R15,R15       BUT CHANGE REQUEST TO RELEASE, NO ACQ\n         B     ERROUTNS                                          91296\nERROUTNW ST    R0,TERMETIM   SAVE ERROR TIME                     91296\n         LA    R0,1                                              91296\n         ST    R0,TERMERCT   INITIALIZE ERROR COUNT              91296\nERROUTNR LM    R15,R1,A$SAVE  RESTORE                            91296\nERROUTNS CH    R15,=Y(TOPROBDV)  LARGER THAN MAX?\n         BH    ERROUTR                                           88188\n         B     *+4(R15)      BRANCH ACCORDING TO CODE            88188\n         B     ERROUTR       0 - RELEASE; DON'T RE-ACQUIRE       88188\n         B     ERROUTR       4 - RELEASE AND RE-ACQUIRE          88188\n         B     ERROUTR       8 - RELEASE                         88188\n         B     ERROUTS      12 - SEND (AGAIN?)                   88188\n         B     ERROUTS      16 - RE-ISSUE REQUEST                88188\n         B     ERROUTR      20 - END REQUEST                     88188\n         B     ERROUTS      24 - RESEND                          88188\n         B     ERROUTS      28 -   OPEN                          88188\n*        B     ERROUTR      32 - PROBLEM DEVICE                  88188\nERROUTR  ICM   R2,15,RPLUSFLD  LOAD AND TEST TTE POINTER         88188\n         BZ    ERROUTS       NONE; SKIP                          88188\n         NI    TERMFLG3,TFREQ  FORCE LOGOFF                      91296\n         OI    TERMFLG3,TFLOF  SET FORCED USER LOGOFF            91296\n         AIF   ('&LOCAL' NE 'PID').NOERROF                       92300\n         ICM   R2,15,TERMLOUD  ANY LOUD ?                        91296\n         BZ    ERROUTS       NO                                  88207\n         STM   R15,R1,A$SAVE   SAVE REGISTERS                    88207\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT SVC PARM AREA\n         MVC   A$SID,=C'A$RB'                                    88207\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,A$SONL,A$SAKEY+A$SBUILD) 88207\n*                            LOGOFF SESSIONS, NOT USER           88207\n         ST    R2,A$SBUFR    COPY LOUD                           88207\n         LA    R1,A$SVCRB                                        88207\n         SVC   249           CANCEL SESSIONS; KEEP USER          88207\n         LM    R15,R1,A$SAVE   RESTORE REGISTERS                 88207\n.NOERROF SPACE 1                                                 91195\nERROUTS  LR    R14,R3                  RESTORE ADDR AND RETURN\n         BR    R14                      VTAM WHICH WILL RETURN\n*                                       TO THE NSI AFTER THE\n*                                       COMMAND WHICH CAUSED\n*                                       ERREXIT TO BE ENTERED.\n         POP   USING         RESTORE R3                          91296\nNETSOL70 CSECT ,             RESTORE MAIN CSECT                  87186\n         TITLE '*********  N E T S O L  -  EQUATES AND CONSTANTS'\nR0       EQU   0                       MACRO WORK REGISTER, AND\n*                                      CONTAINS REASON CODE UPON\n*                                      ABNORMAL TERMINATION\nR1       EQU   1                       PARAMETER REGISTER,\n*                                      CORRUPTED BY API MACROS\nR2       EQU   2                       WORK REGISTER\nR3       EQU   3                       WORK REGISTER\nR4       EQU   4                       WORK REGISTER\nR5       EQU   5                       POINTER TO CURRENT RPL, IT\n*                                      IS NOT USED FOR ANY OTHER\n*                                      PURPOSE\nPTRRPL   EQU   R5                      AS ABOVE\nR6       EQU   6                       WORK REGISTER\nR7       EQU   7                       WORK REG\nR8       EQU   8                       NIB POINTER\nPTRNIB   EQU   8                        EXCEPT IN STD LOGON.\nR9       EQU   9                       WORK REG\nR10      EQU   10                      THIRD BASE REGISTER\nR11      EQU   11                      SECOND BASE REGISTER\nR12      EQU   12                      FIRST BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN REGISTER\nR15      EQU   15                      RETURN CODE AND EXIT ENTRY PTR\n         SPACE 1\n***********************************************************************\n*        FLAGS INDEPENDENT OF A SPECIFIC REQUEST                      *\n***********************************************************************\n         SPACE 1\nUFLAGS   DC    X'00'                   MAIN NETSOL FLAGS\nSHUTDOWN EQU   X'80'                   SHUTDOWN IN PROGRESS\nINIT     EQU   X'40'                   INITIALIZATION IN PROGRESS\nINITERR  EQU   X'20'                   ERROR DURING INITIALIZATION\nINITDLAY EQU   X'10'         TIME DELAY BETWEEN START-UPS        87256\nUFGSYS   EQU   X'08'         SYSTEM RESERVED FOR SYSTEMS GROUP   86065\nUFGREST  EQU   X'04'         SYSTEM IS BEING RECYCLED            86065\nUFGIGNER EQU   X'02'         IGNORE ERRORS; SHUTDOWN OR RECYCLE  86065\n         SPACE 1\nDUMPFLAG DC    X'00'                   REASON CODE FOR DUMPING\nOPENCODE EQU   1                       OPEN ACB FAILURE\nSETLCODE EQU   2                       SETLOGON FAILURE\nCBLKCODE EQU   4                       CONTROL BLOCK FAILURE\nTABLTRBL EQU   8                       TROUBLE WITH THE TTE'S\n         SPACE 1\nTRTAB1   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6' HEX->CHAR TR TABLE\nTRTAB    EQU   TRTAB1-X'F0'            USE ONLY LAST 16 OF TRTAB\n         SPACE 1\nPACKWORK DS    XL16                    UNPACK WORK AREA\n         SPACE 1\nSESSPARM DS    XL120                   INQUIRE(SESSPARM) WORK AREA\n*                                      MAX SIZE ENCOUNTERED IS 88\n         SPACE 1\nSYSTEMID DC    X'00'                   SYSTEM ID FOR SOME APPLIDS\n         SPACE 1\n         DC    C'SAVED REGISTERS FOR USER ABENDS HERE'\nSNOREGS  DC    16F'0'                  REGS FOR SNO CONDITIONS\n         SPACE 1\nRETVTAM@ DS    F                       SAVE AREA FOR EXIT RETURN ADDR\n         SPACE 1\nGENSAVE  DS    18F                     SAVE AREA FOR SOME EXIT RTNS\n         SPACE 1\nSUBSAV14 DC    F'0'                    SAVE AREA FOR REG 14\n*                                       USED BY SUBROUTINES\nFINISECB DC    F'0'                    ECB THAT MAIN-LINE CODE WAITS\n*                                      ON, IT IS POST'ED BY TPEND EXIT\n         SPACE 1                                                 85235\n*              MISCELLANEOUS CONSTANTS AND MASKS.\nSBA      EQU   X'11'                   3270 SET BUFFER @ FIELD\nCLEARKEY EQU   X'6D'                   3270 CLEAR KEY\nPA1KEY   EQU   X'6C'         3270 PA1 KEY (LOGOFF REQUEST)       88220\nENTERKEY EQU   X'7D'                   3270 ENTER KEY\nHEX50    EQU   X'50'                   3270 BUFFER ADDRESS\nHEXD3    EQU   X'D3'                     \"    \"       \"\nHEXD5    EQU   X'D5'                     \"     \"       \"\nCR       EQU   X'0D'                   3767 CARRIAGE RETURN\nFF       EQU   X'FF'                   USED TO TURN OFF SWITCHES\n         SPACE 1\n*              EQUATES FOR ACTION CODES AND MODIFIERS\nTORELES  EQU   8                       BRANCH TO RELEASE\nTOSEND   EQU   X'0C'                   BRANCH TO WRITE\nREISSU   EQU   X'10'                   REISSUE COMMAND\nRELONLY  EQU   0                       RELEASE ONLY DONT REAQUIRE\nREL1ST   EQU   4                       RELEASE AND ACQUIRE\nTOENDREQ EQU   X'14'                   BRANCH TO FREERPL\nTORESEND EQU   X'18'                   TAKE ACTION ACCORDING TO RTN\nTOPROBDV EQU   X'20'                   BRANCH TO PROBDEV\n         SPACE 2                                                 90120\n*              HEX VALUES FOR FEEDBACK AND RETURN CODE COMPARES\n         SPACE 1\n         DS    0H\nHEX2     DC    XL2'2'\nHEX3     DC    XL2'3'\nHEX4     DC    XL2'4'\nHEX5     DC    XL2'5'\nHEX8     DC    XL2'8'\nHEX9     DC    XL2'9'\nHEXC     DC    XL2'C'\nHEXD     DC    XL2'D'\nHEX10    DC    XL2'10'\nHEX11    DC    XL2'11'\nHEX12    DC    XL2'12'\nHEX13    DC    XL2'13'\nHEX14    DC    XL2'14'\nHEX18    DC    XL2'18'\nHEX1B    DC    XL2'1B'\nHEX1C    DC    XL2'1C'                                      DC18203\nHEX20    DC    XL2'20'\nHEX2B    DC    XL2'2B'\nHEX2D    DC    XL2'2D'\nHEX31    DC    XL2'31'\nHEX3C    DC    XL2'3C'\nHEX4A    DC    XL2'4A'\nHEX56    DC    XL2'56'\nHEX5D    DC    XL2'5D'\nHEX5F    DC    XL2'5F'\nHEX60    DC    XL2'60'\n         EJECT\n*              BISYNCH STATUS ERROR MESSAGE CODES\n         DS    0H\nSNAS0010 DC    XL2'0010'               3270 -- INTERRUPTION\n*                                       REQUIRED BECAUSE DEVICE\n*                                       POWERED OFF.\nSNAS0200 DC    XL2'0200'                3270 -- DEVICE END\n*                                       (ALONE), MEANING THAT\n*                                       THE DEVICE IS POWERED\n*                                       ON AND OK TO USE.\n         SPACE 1\n*              LOGICAL UNIT STATUS FOR 3276/3278/3287/ETC.\n         SPACE 1\nLUS0001  DC    XL2'0001'               DEVICE AVAILABLE\nLUS082B  DC    XL2'082B'               DEVICE AVAILABLE\nLUS0831  DC    XL2'0831'     LUSTAT - DEVICE POWERED OFF         89344\n         SPACE 1\n@EXEC2   MVC   0(0,R4),2(R7)\n@EXEC3   MVC   0(0,R4),0(R6)\n         SPACE 2\n         LTORG\n         TITLE '*********  N E T S O L  -  ERROR BYPASS TABLE'\n***********************************************************************\n*        THIS TABLE DEFINES THOSE RPL-BASED MACRO ERRORS WHICH        *\n*        ARE NOT TO BE WRITTEN TO THE OPERATOR'S CONSOLE.             *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OFTHE FOLLOWING FIELDS:            *\n*                                                                     *\n*             ERMCODE - THE ERROR COMBINATION TO BE BYPASSED.         *\n*                       THE FORMAT OF THIS FIELD IS:                  *\n*                     RPLREQ/RPLRTNCD/RPLFDB2/RPLSSEI/RPLSSMI/RPLUSNSI*\n*                       ANY FIELD WHICH DOESN'T MATTER SHOULD BE SET  *\n*                       TO ZERO.                                      *\n*                                                                     *\n*             ERMAND  - THE MASK TO ZERO IRRELEVANT FIELDS IN THE     *\n*                       CONSTRUCTED ERROR COMBINATION FIELD PRIOR     *\n*                       TO COMPARISON WITH ERMCODE. EACH BYTE HERE    *\n*                       HAS A CORRESPONDING BYTE IN ERMCODE AND SHOULD*\n*                       BE SET TO:                                    *\n*                         X'FF' - IF THE FIELD IN ERRCODE IS NON-ZERO.*\n*                         X'00' - IF THE FIELD IN ERRCODE IS ZERO.    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nERMCODE  EQU   0,7                    ERROR COMBINATION TO BE COMPARED\nERMAND   EQU   7,7                    MASK TO ZERO IRRELEVANT FIELDS\nERMSGL   EQU   14                     LENGTH OF A TABLE ENTRY\n         SPACE 1                                                 89338\nERMINIT  DC    X'00040400000010'       START-UP; IGNORE UNREADY  89339\n         DC    X'00FFFF0000FFFF'       2/2                       89339\n         SPACE 1\nERMSGTAB EQU   *                      START OF ERROR MSG TABLE\nERM1CODE DC    XL7'1B144B00000000'      BAD APPLID\nERM1AND  DC    XL7'FFFFFF00000000'        KEYED IN AT TERMINAL\nERMSGEND EQU   *-ERMSGL               LAST ENTRY IN TABLE\n         SPACE 1\nERMBXLE  DC    A(ERMSGTAB)            BXLE (TABLE START)\n         DC    A(ERMSGL)                REGS   (ENTRY LENGTH)\n         DC    A(ERMSGEND)                FOR TABLE SEARCH  (TABLE END)\n         TITLE '*********  N E T S O L  -  NETSOL GETPARM OPTIONS'\n***********************************************************************\n*        THIS TABLE DEFINES THE OPTIONS WHICH CAN BE SPECIFIED        *\n*        WHEN SEARCHING THE INPUT CMD STRING FOR AN OPTION.           *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *\n*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *\n*                        MULTIPLE LOGON SEQUENCES.                    *\n*                                                                     *\n*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *\n*                        WITH CMDGAPPL                                *\n*                                                                     *\n*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *\n*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *\n*                                                                     *\n*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *\n*                        COMMAND.                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGPAMECT  EQU   0                      START OF OPTION LIST\nGPLEN    EQU   0,2                    MAX LENGTH OF PARAMETER\nGPTEXTL  EQU   2,2                    LEN OF PARM ERROR TEXT\nGPFLAG   EQU   4,1                    OPTION FLAGS\nGPOPT    EQU   X'80'                  PARAMETER IS OPTIONAL\nGPNUM    EQU   X'40'         NUMERIC PARAMETER ONLY              88220\nGPCOM    EQU   X'01'         * STARTS COMMENTS                   88220\nGPNULL   EQU   X'00'                  NO OPTIONS FOR THIS PARAMTER\nGPTEXT   EQU   5                      TEXT INSERTED INTO GP ERR MSG\n         SPACE 1\n         PRINT NOGEN\n*\n*        APPLICATION LOGON SEQUENCES\n*\nSLNODE   $GP    8,'NODENAME',GPNULL\nSLAPPL   $GP    8,'LOGON APPLID',GPOPT+GPCOM\nSLNAME   $GP   8,'NODE OR USER NAME',GPNULL                      88209\n        TITLE '*********  N E T S O L  -  VTAM COMMAND/INTERPRET TABLE'\n***********************************************************************\n*                                                                     *\n*        purpose: define interpret table used by NETSOL70.            *\n*                 (refer to acf/vtam system programmers guide)        *\n*                                                                     *\n*        note:    1) valid logon sequences are defined in upper       *\n*                    and lower case.                                  *\n*                 2) the logon sequences are compared with the        *\n*                    passed string for a length equal to the          *\n*                    logon sequence. therefore, any logon sequence    *\n*                    containing another logon sequence as a           *\n*                    substring (as 'imstest' contains 'ims') must     *\n*                    appear in the interpret table before the         *\n*                    sequence contained as a substring does.          *\n*                                                                     *\n*        date:    August 21, 1985          Updated by G.P.            *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN                                             85328\nNETINTAB CSECT ,                                                 87193\n         LOGCHAR APPLID=(ROUTINE,NETINLOG),SEQNCE='LOGON'        87193\n         LOGCHAR APPLID=(ROUTINE,NETINLOG),SEQNCE='logon'        87193\n*        ALL OTHER SEQUENCES ARE EXPANDED BY $CMDN MACRO         87193\n         SPACE 1                                                 87193\nNETSOLCM CSECT ,             BEGIN NEW CSECT FOR COMMANDS        88172\n***********************************************************************\n*        THIS TABLE DEFINES THE COMMANDS WHICH MAY BE ENTERED FROM    *\n*        THE TERMINAL.                                                *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *\n*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *\n*                        MULTIPLE LOGON SEQUENCES.                    *\n*                                                                     *\n*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *\n*                        WITH CMDGAPPL                                *\n*                                                                     *\n*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *\n*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *\n*                                                                     *\n*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *\n*                        COMMAND.                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCMDGAPPL EQU   0,8,C'C'      OBSOLETE GENERIC APPLICATION NAME   88185\nCMDVAPPL EQU   0,8,C'C'      VTAM APPLICATION NAME               88185\nCMDTEXT  EQU   8,8,C'C'      LOGON SEQUENCE OR COMMAND           88185\nCMDROUTA EQU   16,4,C'A'     A(CMD PROCESSING ROUTINE)           88185\nCMDTEXTL EQU   21,1,C'F'     LENGTH OF CMDTEXT                   88185\nCMDFLAG  EQU   22,1,C'B'     COMMAND FLAG                        88185\nCMDINIT  EQU   X'80'           ALLOWED FROM SYSIN FILE           88185\nCMDTERM  EQU   X'40'           ALLOWED FROM TERMINAL             88185\nCMDCONS  EQU   X'20'           ALLOWED FROM CONSOLE              88192\nCMDAUTH  EQU   X'01'           USER MUST BE AUTHORIZED           88185\nCMDAPPF  EQU   23,1,C'B'     0 OR APPLICATION GROUP FLAG         88185\nCMDTABL  EQU   24            LENGTH OF CMD TABLE ENTRY           88185\n         SPACE 1\n         PRINT NOGEN\nPRECMDTB $CMD  TSO,PRETEST,'LOGON',CMDTERM  SCAN APPLID()        87186\n         $CMD  TSO,PRETEST,'APPLID(',CMDTERM  APPLID             87186\nCMDTAB   DS    0X                            START OF COMMAND TABLE\n*\n*        APPLICATION LOGON SEQUENCES\n*\n         $CMDN TSOA,CHKAPPL,'TSOA',CMDTERM,TYPE=A$USFTSO  CDRSC  87187\n         $CMDN TSOB,CHKAPPL,'TSOB',CMDTERM,TYPE=A$USFTSO  CDRSC  87187\n*        NOTE THAT WE HAVE ONLY ONE TSO/E LICENSE; ALL 'TSO' REQUESTS\n*        ARE ROUTED TO SYSTEM B.                                 88311\n         $CMDN TSO,CHKAPPL,'TSO',CMDTERM,TYPE=A$USFTSO           84142\n         $CMDN TSO,CHKAPPL,'LOGON',CMDTERM,TYPE=A$USFTSO         84142\n         $CMDN TSO,CHKAPPL,'1',CMDTERM,TYPE=A$USFTSO             84142\n         SPACE 1                                                 87287\nCCICS    $CMDN CICSPROD,CHKAPPL,'CICSPROD',CMDTERM,TYPE=A$USFCIC 92335\n         $CMDN CICSPROD,CHKAPPL,'CICS',CMDTERM,TYPE=A$USFCIC     92335\n         $CMDN CICSPROD,CHKAPPL,'2',CMDTERM,TYPE=A$USFCIC        92335\nCCICT    $CMDN CICSTEST,CHKAPPL,'CICSTEST',CMDTERM,TYPE=A$USFCIC 87225\n         $CMDN CICSTEST,CHKAPPL,'14',CMDTERM,TYPE=A$USFCIC       87225\n         SPACE 1                                                 87287\nCSWYL  $CMDN SUPWYL,CHKAPPL,'SUPWYL',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n       $CMDN SUPWYL,CHKAPPL,'SUPER',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n       $CMDN SWYA,CHKAPPL,'SUPA',CMDTERM+CMDAUTH,TYPE=A$USFWYL   90113\n       $CMDN SWYA,CHKAPPL,'SWYA',CMDTERM+CMDAUTH,TYPE=A$USFWYL   93002\n       $CMDN SUPWYL,CHKAPPL,'SWYL',CMDTERM+CMDAUTH,TYPE=A$USFWYL 92335\n       $CMDN SWYB,CHKAPPL,'SUPB',CMDTERM+CMDAUTH,TYPE=A$USFWYL   90343\n       $CMDN SWYB,CHKAPPL,'SWYB',CMDTERM+CMDAUTH,TYPE=A$USFWYL   93002\n       $CMDN SUPWYL,CHKAPPL,'3',CMDTERM+CMDAUTH,TYPE=A$USFWYL    90113\n       $CMDN SWYLTEST,CHKAPPL,'SWYLTEST',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n       $CMDN SWYLTEST,CHKAPPL,'15',CMDTERM+CMDAUTH,TYPE=A$USFWYL 92222\n         SPACE 1                                                 87287\nCWYL     $CMDN WYLBUR,CHKAPPL,'WYLBUR',CMDTERM,TYPE=A$USFWYL     84142\n         $CMDN WYLA,CHKAPPL,'WYLA',CMDTERM,TYPE=A$USFWYL CDRSC   87187\n         $CMDN WYLB,CHKAPPL,'WYLB',CMDTERM,TYPE=A$USFWYL CDRSC   87187\n*TEST*   $CMDN WYLC,CHKAPPL,'WYLC',CMDTERM,TYPE=A$USFWYL CDRSC   90343\n         $CMDN WYLBUR,CHKAPPL,'WYL',CMDTERM,TYPE=A$USFWYL        84142\n         $CMDN WYLBUR,CHKAPPL,'4',CMDTERM,TYPE=A$USFWYL          84142\n         $CMDN WYLTEST,CHKAPPL,'WYLTEST',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n         $CMDN WYLTEST,CHKAPPL,'16',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n         SPACE 1                                                 87287\n         $CMDN EXHI,CHKAPPL,'EXHIBIT',CMDTERM,TYPE=A$USFEXH      84142\n         $CMDN EXHA,CHKAPPL,'EXHA',CMDTERM,TYPE=A$USFEXH CDRSC   87187\n         $CMDN EXHB,CHKAPPL,'EXHB',CMDTERM,TYPE=A$USFEXH CDRSC   87187\n*TEST*   $CMDN EXHC,CHKAPPL,'EXHC',CMDTERM,TYPE=A$USFEXH CDRSC   90330\n         $CMDN EXHI,CHKAPPL,'EXHI',CMDTERM,TYPE=A$USFEXH         86356\n         $CMDN EXHI,CHKAPPL,'EXH',CMDTERM,TYPE=A$USFEXH          84142\n         $CMDN EXHI,CHKAPPL,'5',CMDTERM,TYPE=A$USFEXH            84142\nCEXOR   $CMDN EXORCIST,CHKAPPL,'EXORCIST',CMDTERM+CMDAUTH,TYPE=A$USFEXH\n         $CMDN EXORCIST,CHKAPPL,'17',CMDTERM+CMDAUTH,TYPE=A$USFEXH\n         $CMDN EXORA,CHKAPPL,'EXORA',CMDTERM+CMDAUTH,TYPE=A$USFEXH\n         $CMDN EXORB,CHKAPPL,'EXORB',CMDTERM+CMDAUTH,TYPE=A$USFEXH\n         SPACE 1                                                 87287\nCJRPA    $CMDN CJRPA,CHKAPPL,'CJRPA',CMDTERM,TYPE=A$USFOTH       85328\n         $CMDN CJRPA,CHKAPPL,'CJRP',CMDTERM,TYPE=A$USFOTH        85328\n         $CMDN CJRPA,CHKAPPL,'JRP',CMDTERM,TYPE=A$USFOTH         85328\n         $CMDN CJRPA,CHKAPPL,'10',CMDTERM,TYPE=A$USFOTH          85328\n         SPACE 1                                                 85245\n         $CMDN NETOP,CHKAPPL,'NETOP',CMDTERM,TYPE=A$USFNET       85245\n         $CMDN NETOP,CHKAPPL,'OPERATOR',CMDTERM,TYPE=A$USFNET    85245\n         $CMDN NETOP,CHKAPPL,'11',CMDTERM,TYPE=A$USFNET          85245\n         SPACE 1                                                 88245\n*DEFUNCT RELAY GOLD (PC <=> NTO <=> 3270 MODE)                   88245\n*DEFUNCT                                                         88245\n*DEFUNCT $CMDN R3270,CHKAPPL,'R3270',CMDTERM  RELAY/3270         88245\n*DEFUNCT $CMDN R3270,CHKAPPL,'GOLD',CMDTERM                      88245\n*DEFUNCT $CMDN R3270,CHKAPPL,'RELAY',CMDTERM                     88245\n         SPACE 1                                                 89328\nCKERM    $CMDN KERMIT,CHKAPPL,'KERMIT',CMDTERM  UNRESTRICTED KERMIT\n         $CMDN KERMIT,CHKAPPL,'KERM',CMDTERM                     89328\n         $CMDN KERB,CHKAPPL,'KERB',CMDTERM   B-SYSTEM ONLY       89328\n         $CMDN KERA,CHKAPPL,'KERA',CMDTERM   A-SYS / DEBUG       89328\n         $CMDN COMM,CHKAPPL,'COMM',CMDTERM  CPU/CPU COMMUNICATIONS\n         $CMDN COMM,CHKAPPL,'8',CMDTERM                          93263\n         $CMDN COMA,CHKAPPL,'COMA',CMDTERM  CPU A                93263\n         $CMDN COMB,CHKAPPL,'COMB',CMDTERM  CPU B                93263\n         SPACE 1                                                 87287\n         $CMDN PFK9,CHKAPPL,'9',CMDTERM       **ERROR            85245\n         $CMDN PFK12,CHKAPPL,'12',CMDTERM  **FOR SPARES          85328\n         $CMDN PFK13,CHKAPPL,'13',CMDTERM  **FOR SPARES          85328\n         $CMDN PFK20,CHKAPPL,'20',CMDTERM  **FOR SPARES          85328\n         $CMDN PFK21,CHKAPPL,'21',CMDTERM  **FOR SPARES          85328\n         $CMDN PFK22,CHKAPPL,'22',CMDTERM  **FOR SPARES          85328\n*OLD*    $CMDN SWITCH,CHKAPPL,'SWITCH',CMDTERM  MACKINNEY SWITCH 92040\n         $CMDN SWITCH,CHKAPPL,'23',CMDTERM            DITTO      92040\n         $CMDN PFK24,CHKAPPL,'24',CMDTERM  **FOR SPARES          85328\n         SPACE 1                                                 90147\n        $CMDN NETSOLGP,CHKAPPL,'NETSOLGP',CMDTERM+CMDAUTH,TYPE=A$USFNET\n         $CMDN NETA,CHKAPPL,'NETA',CMDTERM   CDRSC (DEBUG)       88223\n         $CMDN NETB,CHKAPPL,'NETB',CMDTERM   CDRSC (DEBUG)       88223\n*TEST*   $CMDN NETC,CHKAPPL,'NETC',CMDTERM   CDRSC (DEBUG)       90330\n         SPACE 1                                                 90147\n         $CMDN JES2A,CHKAPPL,'JES2A',CMDTERM+CMDAUTH (DEBUG)     89116\n         $CMDN JES2B,CHKAPPL,'JES2B',CMDTERM+CMDAUTH (DEBUG)     89116\n         $CMDN JES2,CHKAPPL,'JES2',CMDTERM+CMDAUTH (DEBUG)       89116\n         SPACE 1                                                 90147\n*OLD*    $CMDN TMON8CSM,CHKAPPL,'TMON8CSM',CMDTERM+CMDAUTH   TMON\n*OLD*    $CMDN TMON8CSM,CHKAPPL,'TMON',CMDTERM+CMDAUTH   TMON    90147\n         SPACE 1                                                 87287\n***********************************************************************\n*                                                                     *\n*        COMMANDS VALID PRIOR TO NETSOL LOGON                         *\n*                                                                     *\n***********************************************************************\nPRELOGON DS    0X            START OF LOCAL FUNCTIONS            88179\n         $CMD  SETSTATS,SETSTATS,'STATUS',CMDTERM                87193\n         $CMD  SETSTATS,SETSTATS,'STAT',CMDTERM                  87193\nCSLOGON  $CMD  SETLOGON,SETLOGON,'SETLOGON',CMDTERM+CMDINIT+CMDCONS\n         $CMD  SETRANGE,SETRANGE,'SETRANGE',CMDTERM+CMDINIT+CMDCONS\n         $CMD  EODSYSIN,EODSYSIN,'END',CMDINIT  LOG.EOF          87137\n         SPACE 1                                                 86065\nCMDUNTAB $CMD  SETPASON,SETPASON,'PASSWORD',CMDTERM              86065\n         $CMD  SETPASON,SETPASON,'PASS',CMDTERM                  88192\n         $CMD  SETPASON,SETPASON,'PAS',CMDTERM                   89076\n         $CMD  SETPASON,SETPASON,'UNLOCK',CMDTERM                86065\n         $CMD  SETPASON,SETPASON,'SIGNON',CMDTERM                88192\nPSWCMD   $CMD  SETPASON,SETPASON,'LOGON',CMDTERM                 88179\n         $CMD  SETPASOF,SETPASOF,'LOCK',CMDTERM                  86065\n         $CMD  SETOSCMD,SETOSCMD,'OS',CMDTERM+CMDAUTH            87187\n         $CMD  SETWTO,SETWTO,'MESSAGE',CMDTERM                   88172\n         $CMD  SETWTO,SETWTO,'MSG',CMDTERM                       88172\n         $CMD  SETHELP,SETHELP,'HELP',CMDTERM                    88172\n         $CMD  SETHELP,SETHELP,'?',CMDTERM                       88172\n         $CMD  SETNEWS,SETNEWS,'NEWS',CMDTERM                    88179\nCLOGOFF  $CMD  LOGOFF,LOGOFCMD,'LOGOFF',CMDTERM\n         $CMD  LOGOFF,LOGOFCMD,'SIGNOFF',CMDTERM                 88192\n         $CMD  SETSHOW,SETSHOW,'SHOW',CMDTERM+CMDCONS  SHOW STUFF\n         $CMD  SETSET,SETSET,'SET',CMDTERM+CMDCONS   SET THINGS  88206\n         $CMD  SETKILL,SETKILL,'KILL',CMDTERM+CMDCONS+CMDAUTH    88206\n         SPACE 1                                                 88192\n         $CMD  CONSREST,CONSREST,'RESTART',CMDCONS               88192\n         $CMD  CONSREST,CONSREST,'RESHOW',CMDCONS                88192\n         $CMD  CONSREST,CONSREST,'REPEAT',CMDCONS                88192\n         $CMD  CONSLOCK,CONSLOCK,'LOCK',CMDCONS                  88192\n         $CMD  CONSULOK,CONSULOK,'UNLOCK',CMDCONS                88192\n         $CMD  SETWTO,CONSMSG,'MESSAGE',CMDCONS                  88192\n         $CMD  SETWTO,CONSMSG,'MSG',CMDCONS                      88192\n         $CMD  SETWTO,CONSMSG,'MSG',CMDINIT ALLOW IN CONFIG FILE 90054\n         $CMD TESTMSG,TESTMSG,'TESTMSG',CMDAUTH+CMDCONS+CMDTERM+CMDINIT\n         SPACE 1\nCMDTABND DC    CL8'ENDOFTAB'                 END OF COMMAND TABLE\nNETINTAB CSECT ,             PUT END IN PROPER CSECT             90126\n         PRINT &PRTSYS                                           85234\n         ENDINTAB                                                87193\n         TITLE 'MVS/SP SYSTEM IPO SUPPLIED INTERPRET TABLE'      87187\n*/* LIB: IPO1.COM.SAMPLIB(INTTAB)                                87187\n*/* GDE: SYSTEM IPO COMMUNICATIONS GUIDE                         87187\n*/* DOC: THIS IS THE MVS/SP SYSTEM IPO SAMPLE INTERPRET TABLE    87187\n*/*      FOR VTAM LOGONS.  IT HAS THE UPPER AND LOWER            87187\n*/*      CASE ENTRIES FOR 'LOGON' (ROUTINE OF NETINLOG)          87187\n*/*                                                              87187\n         SPACE 2                                                 87187\n***************************************************************  87187\n*                                                                87187\n*    SCAN INPUT FOR STANDARD LOGON SEQUENCE                      87187\n*                                                                87187\n*    STANDARD LOGON SEQUENCE IS AS FOLLOWS:                      87187\n*      ANY NUMBER OF BLANKS                                      87187\n*      'LOGON ' OR 'LOGON,'                                      87187\n*      OPTIONAL OTHER DATA ENDING IN ' ' OR ','                  87187\n*      'APPLID('                                                 87187\n*      ONE TO EIGHT ALPHANUMERIC CHARACTERS SIGNIFYING           87187\n*       THE APPLICATION NAME                                     87187\n*      ')'                                                       87187\n*      AN OPTIONAL ' ' OR ',' FOLLOWED BY OTHER DATA             87187\n*                                                                87187\n*    NOTE:                                                       87187\n*      'LOGON' OR 'LOGON ' OR 'LOGON,'                           87187\n*      IS SUFFICIENT TO LOGON TO TSO.                            87187\n*                                                                87187\n*    NOTE:                                                       87187\n*      IF 'APPLID(NAME)' IS NOT FOUND,                           87187\n*      THEN TSO IS ASSUMED.                                      87187\n*                                                                87187\n***************************************************************  87187\n         PUSH  USING                                             87193\n         DROP  ,             MAKE SURE                           90126\nNETINLOG CSECT ,                                                 87187\n         STM   R14,R12,12(R13)                                   87187\n         BALR  R12,0                                             87187\n         USING *,R12                                             87187\n*                                                                87187\n         LTR   R2,R0                   LENGTH OF LOGON MESSAGE   87187\n         BNP   VS2DFLT       MAKE DEFAULT SUBSYSTEM              90120\n         BCTR  R2,0                    DECREMENT TO              87187\n         EX    R2,TRANS                 EXECUTE TRANSLATE        87187\n         LR    R2,R0                   LENGTH OF LOGON MESSAGE   87187\n         LR    R3,R1                   POINT TO LOGON MESSAGE    87187\n         LR    R4,R3                   POINT BEYOND END OF       87187\n         AR    R4,R2                    LOGON MESSAGE            87187\n         BCTR  R3,0                    BACKSPACE 1 FOR LOOP      87187\n*                                       ACTION                   87187\n*                                       BELOW                    87187\n         SPACE 2                                                 87187\nNEXTCHAR DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(,R3)               NEXT CHARACTER            87187\n         CLI   0(R3),C' '              IGNORE LEADING BLANKS     87187\n         BNE   FOUNDLOG                NON BLANK CONTINUE        87187\n         BCT   R2,NEXTCHAR             ALL BLANKS?               87187\n         B     VS2DFLT                 YES. SET DEFAULT          90120\n         SPACE 2                                                 87187\nFOUNDLOG DS    0H                                                87187\n         LA    R5,L'CLOGON+L'CAPPLID+3(,R3) MINIMUM END          87187\n         CR    R5,R4                   CAN STANDARD SEQUENCE     87187\n*                                       FIT IN DATA AREA?        87187\n         BH    VS2NTSO                 NO. MUST BE TSO           87187\n         SPACE 2                                                 87187\n*       'LOGON' HAS BEEN FOUND.SEARCH FOR APPLID(NAME)           87187\n         SPACE 2                                                 87187\n         LA    R3,L'CLOGON(,R3)        NEXT CHAR BEYOND LOGON    87187\n         CLI   0(R3),C' '              NEXT CHAR MUST BE         87187\n         BE    APPLSCAN                  EITHER BLANK OR A       87187\n         CLI   0(R3),C','                COMMA                   87187\n         BNE   VS2DFLT                 NO. MUST BE DEFAULT       90120\nAPPLSCAN LA    R7,L'CAPPLID  MAXIMUM LENGTH                      87187\n         SPACE 2                                                 87187\nAPPLSCAM DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(,R3)               NEXT CHAR                 87187\n         LA    R5,2(R7,R3)   LENGTH FOR STD. SEQUENCE            87187\n         CR    R5,R4         WILL IT FIT ?                       87187\n         BH    VS2NTSO       NO; ASSUME TSO                      87187\n         LA    R5,L'CAPPLID+2(,R3)     MINIMUM END               87187\n         CR    R5,R4                   CAN STANDARD SEQUENCE     87187\n*                                       FIT IN DATA AREA?        87187\n         BH    VS2NTSO                 NO. MUST BE TSO           87187\n         SPACE 2                                                 87187\n         CLC   CAPPLID,0(R3)           IS THIS APPLID(?          87187\n         BNE   APPLSCAM                                          87187\n         SPACE 2                                                 87187\n*       APPLID( FOUND--ENSURE THAT BLANK OR COMMA PRECEDES IT    87187\n*       AND THAT IT'S WITHIN BOUNDS OF MESSAGE                   87187\n         SPACE 2                                                 87187\nCOMAPPL  BCTR  R3,0                    BACKSPACE ONE             87187\n         CLI   0(R3),C' '              IS IT A BLANK?            87187\n         BE STARTSOK                   CONTINUE IF SO            87187\n         SPACE 2                                                 87187\n         CLI 0(R3),C','                IS IT A COMMA?            87187\n         BE    STARTSOK                CONTINUE IF SO            87187\n         SPACE 2                                                 87187\n         LA    R3,1(R7,R3)         NEXT CHAR PAST APPLID(        87187\n         B     APPLSCAN                CONTINUE SCAN FOR APPLID( 87187\n         SPACE 2                                                 87187\nSTARTSOK DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(R7,R3)   GO PAST APPLID(                     87187\nNEXT     CLI   0(R3),C' '              IS IT A BLANK?            87187\n         BNE   RIGHT                   NO.CHECK FOR RIGHT PAREN  87187\n         LA    R3,1(,R3)               POINT TO NEXT CHAR        87187\n         CR    R3,R4                   END REACHED?              87187\n         BNL   VS2NTSO                 YES. MUST BE TSO          87187\n         B     NEXT                    NO. GO TO NEXT CHAR       87187\nRIGHT    CLI   0(R3),C')'              NULL APPL NAME?           87187\n         BE    APPLSCAN                YES. LOOK FOR VALID       87187\n*                                       APPLID(                  87187\n         SPACE 2                                                 87187\n*       FIND RIGHT PARENTHESIS                                   87187\n         SPACE 2                                                 87187\n         LR    R6,R3                   ADDRESS POTENTIAL APPLID NAME\n         SPACE 2                                                 87187\nFNDPAREN DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(,R3)               POINT TO NEXT CHAR        87187\n         CR    R3,R4                   END REACHED?              87187\n         BNL VS2NTSO                   YES. MUST BE TSO          87187\n         SPACE 2                                                 87187\n         CLI   0(R3),C')'              IS THIS RIGHT PAREN.?     87187\n         BNE   FNDPAREN                NO,CONTINUE SCAN          87187\n         LA    R5,1(,R3)               MINIMUM END               87187\n         CR    R5,R4                   END OF DATA               87187\n         BE    NAMELENG                YES. CAN CHECK FOR        87187\n*                                       APPL NAME                87187\n         SPACE 2                                                 87187\n         CLI   1(R3),C' '              NO. NEXT CHARACTER MUST   87187\n         BE    NAMELENG                 BE BLANK OR COMMA,       87187\n         CLI   1(R3),C','               ELSE CONTINUE SCAN FOR   87187\n         BNE   APPLSCAN                 VALID APPLID             87187\n         SPACE 2                                                 87187\nNAMELENG DS    0H                                                87187\n         SPACE 2                                                 87187\n*       IF THIS POINT REACHED APPLID WITH LEFT AND RT. PAREN FOUND\n*        AND IT IS FOLLOWED BY A BLANK OR A COMMA OR NO MORE DATA\n         SPACE 2                                                 87187\n         SR    R3,R6                   LENGTH OF APPL NAME IN R3 87187\n         CH    R3,LAPPLID              IS NAME TOO BIG?          87187\n         BNH   EXTRAPPL                NO. EXTRACT APPL NAME     87187\n         LR    R3,R6                   YES. CONTINUE SCAN FOR    87187\n         B     APPLSCAN                 VALID APPLID(            87187\nEXTRAPPL DS    0H                                                87187\n         SPACE 2                                                 87187\n         BCTR  R3,0                    DECREMENT FOR EXECUTE     87187\n         MVC   20(8,R13),BLANK8        CLEAR OUT TO MOVE NAME    87187\n         EX    R3,MVCNAME              EXEC MVC WITH CORRECT LENGTH\n         B     VS2ISOK                 GO SET GOOD CODE          87187\n         SPACE 2                                                 87187\n*        USER TO BE CONNECTED TO DEFAULT SUBSYSTEM (NETWORK SOLICITOR)\n*        WHEN NETSOL IS NOT AVAILABLE, THIS DEFAULT CAUSES AN 0C6 ABEND\n*        IN VTAM!!!  THE INSERTED CODE SCANS THE ASCB CHAIN TO MAKE\n*        SURE NETSOL IS THERE - IF NOT, THE REQUEST IS REJECTED. 90120\nVS2DFLT  L     R3,CVTPTR                                         90120\n         USING CVTMAP,R3                                         90120\n         L     R15,CVTASVT   GET THE ASCB VECTOR TABLE           90120\n         USING ASVT,R15                                          90120\n         L     R0,ASVTMAXU   GET HIGHEST VALID ASID              90120\n         SLL   R0,2          *4 FOR FAST CHECK                   90120\n         SLR   R1,R1         SET INDEX FOR NEXT ASID             90120\nGTIAASID LA    R1,4(,R1)     GET NEXT ASID INDEX                 90120\n         CR    R1,R0         VALID ?                             90120\n         BH    VS2FAIL       NO; QUIT                            90120\nGTIAACOM LA    R5,ASVTFRST(R1)  POINT TO ASCB POINTER            90120\n         ICM   R5,15,0(R5)   LOAD AND TEST                       90120\n         BNP   GTIAASID      SKIP UNUSED/FREE SLOT               90120\n         USING ASCB,R5                                           90120\n         LA    R14,8         SET DIFFERENTIAL OFFSET - FAKE CSCB 90120\n         ICM   R2,15,ASCBJBNI  JOB CSCB ?                        90120\n         BNZ   GTIAAJOB      YES; SKIP                           90120\n         SLR   R14,14        RESET CSCB ORIGIN OFFSET            90120\n         ICM   R2,15,ASCBCSCB  GET THE CSCB                      90120\n         BZ    GTIAASID                                          90120\n         USING CHAIN,R2      DECLARE THE CSCB                    90120\n         CLI   CHVCD,X'04'   START TASK/INIT ?                   90120\n         BNE   GTIAASID      NO                                  90120\nGTIAAJOB SLR   R2,R14        MAKE FAKE CSCB ORIGIN               90120\n         CLC   CTSO,CHCLS    MATCHING NAME ?                     90120\n         BNE   GTIAASID      NO                                  90120\n         SPACE 1                                                 90120\n*  LOGON IS FOR INSTALLATION DEFAULT (IBM IS TSO)                87187\nVS2NTSO  MVC   20(8,R13),CTSO          MOVE TSO NAME INTO SAVE AREA\n         B     VS2ISOK       YES; ACCEPT IT                      90121\n         SPACE 2                                                 87187\nVS2FAIL  LA    R15,4         FAIL THIS REQUEST                   90120\n         B     VS2EXCOM      GET OUT                             90120\n*  VS2 LOGON SEQUENCE O.K.                                       87187\nVS2ISOK  SLR   R15,R15                 INDICATE THAT LOGON SEQ   87187\nVS2EXCOM LM    R0,R12,20(R13)           WAS INTERPRETED OK       87187\n         BR    R14                     RETURN TO CALLER          87187\n         SPACE 3                                                 87187\nBLANK8   DC    CL8' '                  BLANKS FOR NAME           87187\nCLOGON   DC    C'LOGON'                                          87187\n*OLD*CTSO     DC    CL8'TSO'                                     87187\nCTSO     DC    CL8'NETSOL70'  THIS MODULE IS INSTALLATION DFLT.  90080\nCAPPLID  DC    C'APPLID('                                        87187\nLAPPLID  DC    H'8'                    LENGTH OF APPLID NAME     87187\nMVCNAME  MVC   20(0,R13),0(R6)                                   87187\nTRANS    TR    0(0,R1),TRTAB2                                    87187\n         SPACE 3                                                 87187\nTRTAB2   EQU   *                                                 87187\n         DC    74C' '         00-49    BLANK OUT CONTROL CHARS   87187\n         DC    X'4A'                   CENT OR LEFT ARROW        87187\n         DC    C'.<(+|'                                          87187\n         DC    X'50'                   AMPERSAND                 87187\n         DC    X'515253545556575859'                             87187\n         DC    X'5A'                   EXCLAMATION POINT         87187\n         DC    C'$*);\u00ac-/'                                        87187\n         DC    X'6263646566676869'                               87187\n         DC    X'6A'                   VERTICAL LINE (NOT |)     87187\n         DC    C',%_>?'                                          87187\n         DC    X'707172737475767778'                             87187\n         DC    X'79'                   GRAVE ACCENT              87187\n         DC    C':#@'                                            87187\n         DC    X'7D'                   SINGLE QUOTE              87187\n         DC    C'=\"'                                             87187\n         DC    X'80'                                             87187\n         DC    C'ABCDEFGHI'            SMALL LETTERS             87187\n         DC    X'8A8B8C8D8E8F90'                                 87187\n         DC    C'JKLMNOPQR'            SMALL LETTERS             87187\n         DC    X'9A9B9C9D9E9FA0'                                 87187\n         DC    X'A1'                   TILDE                     87187\n         DC    C'STUVWXYZ'             SMALL LETTERS             87187\n         DC    X'AAABACADAEAF'                                   87187\n         DC    X'B0B1B2B3B4B5B6B7B8B9'                           87187\n         DC    X'BABBBCBDBEBF'                                   87187\n         DC    X'C0'                   LEFT BRACE                87187\n         DC    C'ABCDEFGHI'            CAPITAL LETTERS           87187\n         DC    X'CACB'                                           87187\n         DC    X'CC'                   HOOK                      87187\n         DC    X'CD'                                             87187\n         DC    X'CE'                   FORK                      87187\n         DC    X'CF'                                             87187\n         DC    X'D0'                   RIGHT BRACE               87187\n         DC    C'JKLMNOPQR'            CAPITAL LETTERS           87187\n         DC    X'DADBDCDDDEDF'                                   87187\n         DC    X'E0'                   REVERSE SLANT             87187\n         DC    X'E1'                                             87187\n         DC    C'STUVWXYZ'             CAPITAL LETTERS           87187\n         DC    X'EAEB'                                           87187\n         DC    X'EC'                   CHAIR                     87187\n         DC    X'EDEEEF'                                         87187\n         DC    C'0123456789'                                     87187\n         DC    X'FA'                   LONG VERTICAL LINE (NOT   87187\n*                                       | OR VERTICAL LINE)      87187\n         DC    X'FBFCFDFEFF'                                     87187\n         POP   USING                                             87193\nNETSOL70 CSECT ,             RETURN                              87193\n         TITLE '*********  N E T S O L  -  SPECIAL LOGMODE ENTRY TABLE'\n***********************************************************************\n*        THIS TABLE DEFINES THOSE APPLICATIONS WHICH DO NOT USE       *\n*        THE DEFAULT LOGMODE ENTRY FOR THE DEVICE.                    *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             LOGMDAPP - THE APPLID OF THE APPLICATION USING A        *\n*                        DIFFERENT LOGOMODE TABLE ENTRY.              *\n*                                                                     *\n*             LOGMDENT- THE ASSOCIATED LOGOMODE TABLE ENTRY NAME.     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nLOGMDAPP EQU   0,8                    APPLICATION NAME\nLOGMDENT EQU   8,8                    ASSOCIATED LOGMODE TABLE ENTRY\nLOGMDLEN EQU   16                     LENGTH OF A TABLE ENTRY\n         SPACE 1\nLOGMDTAB EQU   *                             START OF LOGMODE TABLE\n*                 /APPLID  /    /LOGMODE /   FORMAT ENTRY\nLOGMDRLY DC    CL8'R3270   ',CL8'RLY3767 '   RELAY/3270/GOLD     88248\nLOGMDHCF DC    CL8'HCF     ',CL8'HCFPX   '   HCF\nLOGMDNCF DC    CL8'NCCF    ',CL8'DSILGMOD'   NCCF\nLOGMDEND DC    XL8'FFFFFFFFFFFFFFFF'         END OF LOGMODE TABLE\n         TITLE '*********  N E T S O L  -  MESSAGE EQUATES/CONSTANTS'\n*              EQUATES FOR ERROR MESSAGE NUMBERS AND REASON-CODES\nMSG01    EQU   1                       INVALID LOGMODE TABLE ENTRY\nMSG02    EQU   2                       LOGON DATA NOT IN INTRPRET TBLE.\nMSG03    EQU   3                       NO INTRPRET TABLE\nMSG04    EQU   4                       NO ROUTINE TO FIND APPL NAME\nMSG05    EQU   5                       NOT AUTHORIZED FOR APPLICATION\nMSG06    EQU   6                       APPLICATION NOT KNOWN\nMSG07    EQU   7                       APPLICATION DEACTIVATED\nMSG08    EQU   8                       APPLICATION INACTIVE\nMSG09    EQU   9                       APPLICATION QUIESCING\nMSG10    EQU   10                      APPLICATION NEVER ACCEPTS LOGONS\nMSG11    EQU   11                      APPLICATION TEMPORARILY NOT\n*                                      ACCEPTING LOGONS.\nMSG12    EQU   12                      THIS TERMINAL LOGGED ON\n*                                      TO NETWORK SOLICITOR\nMSG13    EQU   13            LOGON SCREEN / CENTER CLOSED        86065\nMSG14    EQU   14            UNTIMELY REQUEST (SYSTEMS ONLY)     86065\nMSG15    EQU   15            TERMINAL NOW UNLOCKED               86065\nMSG16    EQU   16            TERMINAL NOW LOCKED                 86065\nMSG17    EQU   17            UNLOCK REQUEST FAILED               86065\nMSG18    EQU   18                      UNAUTHORIZED COMMAND      87187\nMSG19    EQU   19            TEXT SUPPLIED IN DATAPTR            87187\nMSG20    EQU   20            LOGON SCREEN                        88179\nMSGMAX   EQU   20       **** HIGHEST DEFINED MESSAGE NUMBER **** 88220\n         SPACE 1\n***********************************************************************\n*        LIST FORMS OF SOME MESSAGES                                  *\n***********************************************************************\n         SPACE 1\nLISTWTO  WTO  'BCSC001 TERM=******** HAS BEEN RELEASED BY NETSOL DUE TOX\n                I/O ERROR',                                            X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLISTWTO1 WTO  'BCSC002 RC=42 ON NETSOL CLOSE ACB',                     X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLISTWTO6 WTO  'BCSC006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS PROX\n               GRAM IS TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nERRORMSG WTO  'BCSC003 SYNAD/LERAD EXIT REQ=**,RTNCD=**,FDBK2=**,SSENSEX\n               I=**,SSENSMI=**,SENSE=****,TERM=********',              X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLOSTMSG  WTO  'BCSC004 LOSTERM ENTRY CODE XX FOR TERM=********',       X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nRELRQMSG WTO  'BCSC005 TERM=******** RELEASED DUE TO RELREQ REQUEST',  X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nRELFLMSG WTO  'BCSC007 TERM=******** NOT RELEASED BY RELREQ EXIT',     X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLISTWTO8 WTO  'BCSC008 TERM=******** IS AN UNSUPPORTED TERMINAL TYPE', X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLOGMENU  WTO  'BCSC009 TERM=******** MENU WRITTEN FROM ******',        X\n               ROUTCDE=(11),DESC=(7),MF=L\n         SPACE 2\nMSG1003  WTO  'BCSC010 TERM=******** LOGMODE NOT COMPATIBLE WITH TERMINX\n               AL',ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nDCBMSG   WTO  'BCSC011 XXXXXX FILE WILL NOT OPEN. INITIALIZATION BYPASSX\n               ED',ROUTCDE=(1,8),DESC=(7),MF=L\n         SPACE 2\nINITEMSG WTO 'BCSC012 ERRORS ON INITIALIZATION FILE. EXECUTION CONTINUEX\n               S',ROUTCDE=(1,8),DESC=(7),MF=L\n         SPACE 1                                                 88221\nKICKBACK WTO   'BCSC013 XXXXXXXX REJECTED BY YYYYYYYY',ROUTCDE=(1,8),DE*\n               SC=7,MF=L                                         88221\n         TITLE '*********  N E T S O L  -  A C B'\n         DS    0D\n         DC    CL8'ACB'\n         SPACE 1\nACB      ACB   AM=VTAM,                                                X\n               APPLID=NSNAME,                                          X\n               EXLST=EXLST,                                            X\n               MACRF=LOGON\n         TITLE '*********  N E T S O L  -  TERMINAL TABLE DSECT'\nTERMTABL DSECT\nTERMNAME DS    CL8                     TERMINAL LU NAME FROM LOGON\nTERMNAM2 DS    0CL8          END-RANGE ENTRY FOR SETRANGE        88185\nTERMCID  DS    XL4                     CID GOTTEN AFTER OPNDST\nTERMCRPL DS    AL4                     A(ACTIVE RPL FOR THIS TTE)\nTERMAPPL DS    CL8                     APPLID FOR LAST CLSDST(PASS)\nTERMDAPL DS    CL8                     DEFAULT LOGON APPLID FOR TERM\nTERMLOGC DS    H                       LOGON COUNTER\nTERMDCNT DS    H                       AUTO LOGON LOOP COUNTER\nTERMFLAG DS    XL1           FLAG BYTE FOR LOGON STATUS\nLOGPROC  EQU   X'80'           LOGON PROCEEEDING\nSENDSCED EQU   X'40'           SEND (POST=SCHED) ISSUED         DC18203\nTERMCONS EQU   X'20'           TTE IS FOR OPERATOR CONSOLE       88192\nLETMODE  EQU   X'10'           ALLOW LOGMODE IN CLSDST PASS      88207\nFLIPFLOP EQU   X'08'           CONVERSATIONAL MODE DEVICE        90135\nCONTENT  EQU   X'04'           CONTENTION MODE (3767)            90135\nTERMFLG2 DS    XL1                     FLAG FOR TERMINAL'S NETSOL STAT\nTOPEN    EQU   X'80'                   TERM LOGGED ON TO NETSOL\nTPASSED  EQU   X'40'                   TERM SUCCESSFULLY TO APPLID\nTREL     EQU   X'20'                   TERM RELEASED FOR SOME REASON\nTINIT    EQU   X'10'                   DEFAULT APPLID SET AT INIT TIME\nTERMFLG3 DS    XL1           AUTHORIZATION FLAGS                 86143\nTFREQ    EQU   X'80'         USER MUST COMPLETE LOGON            88172\nTFAUL    EQU   X'40'         USER WISHES AUTOMATIC LOGON         88172\nTFLOF    EQU   X'10'         DEVICE FAULT - FORCE A LOGOFF       88188\nTFAPL    EQU   X'08'         USER RESTRICTED TO ONE APPLICATION  88220\nTFLON    EQU   X'04'         USER HAS LOGGED ON                  88172\nTSYSP    EQU   X'02'         USER HAS SYSTEM PRIVILEGES          86065\nTSUPP    EQU   X'01'         USER HAS SUPPORT PRIVILEGES         86065\nTPRIVY   EQU   TSYSP+TSUPP     SOME PRIVILEGE                    86065\nTERMMSGX DC    X'00'         INDEX OF LAST MESSAGE SENT          86160\nTERMDDT  DS    A                       A(DDT FOR THIS TERMINAL)  86143\nTERMDTIM DS    F                       TIME+60 SECS OF AUTO LOGON\nTERMRUSZ DS    F             MAXIMUM SEND RU SIZE OR 0           86143\nTERMLPAD DS    A             ADDRESS OF LOGON MESSAGE OR 0       87131\nTERMLPLN DS    F             LENGTH OF LOGON MESSAGE OR ZERO     87131\nTERMLOUD DS    F             ADDRESS OF LOCAL ON-LINE USER DATA  88179\n*ERMMODE DS    CL8           LOGMODE NAME (FROM SESSIONS BIND)   88213\nTERMETIM DS    F             TIME OF LAST (SERIES) OF ERRORS     91296\nTERMERCT DS    F             NUMBER OF CONSECUTIVE ERRORS        91296\nTERMELEN EQU   *-TERMNAME              LENGTH OF AN ENTRY\n         TITLE '*********  N E T S O L  - DEVICE DEPENDENT TABLE DSECT'\nDDT      DSECT\n         SPACE 1\n*        THE DEVICE DEPENDENT TABLE IDENTIFIES EDIT AND I/O ROUTINES\n*        AND MESSAGES APPLICABLE TO A PARTICULAR DEVICE TYPE.\n*        THE INQUIRE MACRO IS ISSUED IN THE LOGON EXIT TO OBTAIN\n*        LOGMODE INFORMATION SO THAT THE DEVICE TYPE CAN BE DETERMINED.\n*        TERMDDT POINTS TO THE DDT FOR A TERMINAL.\n         SPACE 1\n         DS    0D\nDDTEDIT  DS    AL4                     A(INPUT EDIT ROUTINE)\nDDTSEND  DS    AL4                     A(SEND ROUTINE)\nDDTTERM  DS    AL4                     A(TERMINAL FIELD IN MSG 12)\nDDTTERM3 DS    AL4                     MESSAGE 13                86065\nDDTTERM2 DS    AL4                     MESSAGE 20                88179\nDDTTIME  DS    AL4                     A(TIME FIELD IN MSG 12)\nDDTTIME3 DS    AL4                                               86065\nDDTTIME2 DS    AL4                                               88179\nDDTM4OFS DS    AL4                     A(USABLE MSG BUFFER IN MSG4)\nDDTMSGOF DS    AL2                     MSG OFFSET OF DATA FIELD\nDDTM4L   DS    AL2                     LEN(USABLE MSG BUFFER IN MSG4)\nDDTMSGTB DS    0F\nDDTMSG01 DS    AL4                     A(MSG 01)\nDDTMSG02 DS    AL4                     A(MSG 02)\nDDTMSG03 DS    AL4                     A(MSG 03)\nDDTMSG04 DS    AL4                     A(MSG 04)\nDDTMSG05 DS    AL4                     A(MSG 05)\nDDTMSG06 DS    AL4                     A(MSG 06)\nDDTMSG07 DS    AL4                     A(MSG 07)\nDDTMSG08 DS    AL4                     A(MSG 08)\nDDTMSG09 DS    AL4                     A(MSG 09)\nDDTMSG10 DS    AL4                     A(MSG 10)\nDDTMSG11 DS    AL4                     A(MSG 11)\nDDTMSG12 DS    AL4                     A(MSG 12)\nDDTMSG13 DS    AL4                     A(MSG 13)                 86065\nDDTMSG14 DS    AL4                     A(MSG 14)                 86065\nDDTMSG15 DS    AL4                     A(MSG 15)                 86065\nDDTMSG16 DS    AL4                     A(MSG 16)                 86065\nDDTMSG17 DS    AL4                     A(MSG 17)                 86065\nDDTMSG18 DS    AL4                                               87187\nDDTMSG19 DS    AL4           FREE FORMAT MSG (A/L IN DATAPTR)    87187\nDDTMSG20 DS    AL4           LOGON SCREEN                        88179\n         SPACE 2                                                 90120\n*        DCB FOR SYSIN FILE\nNETSOL70 CSECT ,\n         SPACE 1\n         DCBD  DSORG=PS                                          92273\n         PRINT NOGEN\n         SPACE 2                                                 90120\n         ISTDNIB\n         TITLE '*********  N E T S O L  -  B I N D   DSECT'\n         PRINT GEN\n         ISTDBIND\n         ORG   ,                                                 88213\nBINDSIZE EQU   *-ISTDBIND    MODE TABLE ENTRY SIZE -8            88213\n         PRINT NOGEN\n         SPACE 2                                                 90120\nIFGRPLX  DSECT\nSTSECT   DS    0D                  START DSECT ON D-WORD\n         IFGRPL DSECT=NO,AM=VTAM\n         TITLE '*********  N E T S O L  - NIB, RPL, ETC.'        90120\n*********       END OF RPL DSECT AND START OF NIB       **************\n         ORG\nNIBDMPID DC    0D'0',CL8'DYNAMNIB'     NIB DUMP ID\nNIBSTART DS    CL(NIBLNIB)             ASYNCHROUS NIB\n*********       END OF NIB AND START OF RPL WORK AREA   **************\nWORKSPAC DS    0D                      START OF RPL WORK AREA\nCID      DS    F                       CID OF READ DEVICE\nRPLSAVE  DS    18F                     SAVE AREA FOR RPL OPERATIONS\nRPLERRSA DS    12F                     SAVE AREA FOR SYNAD EXIT\n*                                      THAT ARE ASYNCHRONOUS\nAPPLID   DS    CL8                     NAME OF APPLICATION\nMODENAM  DS    CL8                     NAME OF MODE TABLE ENTRY\nGRPLTIME DS    CL8     (HHMMSSTH YYYDD) TIMESTAMP WHEN RPL GETMAINED\nRECLEN   DS    F                       FOR READ RECLEN FIELD\nSENDLEN  DS    F                       FOR SEND TO TERMINAL\nDATAPTR  DS    AL4(0)                  A(LOGON SEQUENCE IN IOAREA)\nGPPARM   DS    AL4(0)                  A(OPTION LIST PASSED TO GETPARM)\nGPDATAP  DS    AL4(0)                  A(CURRENT PTR IN CMD BUFFER)\nGPDATAL  DS    H                       LENGTH OF TEXT LEFT IN CMD BUF\nMSGINDEX DS    X                       NUMBER OF ERROR MESSAGE WRITTEN\nERMDATA  DS    CL7                     COMBINED ERROR FIELD\nREQ      EQU   ERMDATA,1               FOR RPL REQ FIELD\nRTNCD    EQU   ERMDATA+1,1             FOR RPL RTNCD FIELD\nFDBK2    EQU   ERMDATA+2,1             FOR RPL FDBK2 FIELD\nSENSE    EQU   ERMDATA+3,2             SAVE SSENSEI + SSENSMI FIELDS\nUSENSE   EQU   ERMDATA+5,2             SAVE USSESEI (2 BYTES)\nERMTEMP  DS    CL7                     ERROR FIELD WORKAREA\nACTIONS  DS    2X                      SAVE AREA FOR ERROR\nAPPLSTAT DC    X'0'                    FOR RPL FDBK FIELD\n*                                      ACTION CODES\n*        INTERNAL FLAG BYTES\nFLAGS    DS    X                       FLAG BYTE\n*\nLOGOFF   EQU   X'80'                   LOGOFF COMMAND ISSUED\nRELOPND  EQU   X'40'                   RELEASE DEVICE, THEN\n*                                      ATTEMPT TO RECONNECT\n*                                      VIA OPNDST\nBADEVICE EQU   X'20'                   PROBLEM WITH DEVICE\nFIRSTSND EQU   X'08'                   FIRST SEND TO TERMINAL\nCLEARSCR EQU   X'04'                   RECEND ISSUING CLEAR SCREEN\nLUSTATE  EQU   X'02'                   LUSTAT PROCESSING FOR TERMINAL\nSIMLOG   EQU   X'01'                   CLSDST(PASS) FAILED => MUST\n*                                      ISSUE CLSDST(RELEASE) BEFORE\n*                                      CONTINUING WITH SIMLOGON\n         SPACE 1\nEXITFLAG DS    X                       FLAG INDICATING WHICH EXITS\n*                                      HAVE BEEN ENTERED.\nLOGONEX  EQU   X'80'                   ENTERED THE LOGON EXIT\nRECEX    EQU   X'40'                   ENTERED THE READEND EXIT\nPASSEX   EQU   X'20'                   ENTERED THE CLSDST(PASS) EXIT\nSENDEX   EQU   X'10'                   ENTERED THE WRITE EXIT\nRELREQEX EQU   X'08'                   ENTERED THE RELREQ EXIT\nLOSTEX   EQU   X'04'                   ENTERED THE LOSTERM EXIT\nCLOSEX   EQU   X'02'                   ENTERED THE CLSDST(RELEASE)EXIT\nOPENEX   EQU   X'01'                   ENTERED THE OPNDST EXIT\n         SPACE 1\nEXITFLG2 DS    X                       2ND FLAG INDICATING WHICH EXITS\n*                                      HAVE BEEN ENTERED.\nOPNACQX  EQU   X'80'                   ENTERED THE OPNDST(ACQUIRE) EXIT\n         SPACE 1\nMFLAGS   DS    X                       FLAG BYTE FOR CURRENT VTAM MACRO\nOPNDSPEC EQU   X'80'                   OPNDST(SPEC) IN PROGRESS\nINQAPPST EQU   X'40'                   INQUIRE(APPSTST) IN PROGRESS\nSENDING  EQU   X'20'                   WRITE IN PROGRESS\nRECA     EQU   X'10'                   READ(ANY) IN PROGRESS\nSMLOGON  EQU   X'08'                   SIMLOGON ISSUED AFTER CLSDST\nINTRPRT  EQU   X'04'                   INTRPRET IN PROGRESS\nCLSDST   EQU   X'02'                   CLSDST IN PROGRESS\nLUSEND   EQU   X'01'                   LUSTAT RESPONSE SENT\n         SPACE 1\nMFLAGS2  DS    X                      FLAG BYTE2 FOR CURRENT VTAM MACRO\nINQSESS  EQU   X'80'                   INQUIRE(SESSPARM) IN PROGRESS\n         SPACE 1\nMACFLAGS DS    X                       INDICATE MACROS CALLED FLAG 1\nCLSREL   EQU   X'80'                   WILL DO CLSDST(RELEASE)\nOPNSPEC  EQU   X'40'                   WILL DO OPEN(SPEC)\nSIMLGON  EQU   X'20'                   SIMLOGON AFTER CLSDST\nINTAPPID EQU   X'10'                   WILL DO INTERP (APPLID)\nINQAPPS  EQU   X'08'                   WILL DO INQUIRE(APPSTAT)\nCLOSPASS EQU   X'04'                   WILL DO CLSDST(PASS)\nSENDASY  EQU   X'02'                   WILL DO SEND ASY\nOPNDACQ  EQU   X'01'                   WILL DO OPNDST(AQUIRE)\n         SPACE 1\nMACFLAG2 DS    X                       INDICATE MACROS CALLED FLAG 2\nINQSES   EQU   X'80'                   WILL DO INQUIRE(SESSPARM)\n         SPACE 1\nDATASEQL DS    X                       X-LATED DATA SEQ-LENGTH\nSPACWORK DS    0D            EXTRA SPACE                         92300\nA$SAVE   DS    3F            SAVE AREA FOR SVC 249 CALL          88207\n         PRINT GEN                                               88179\n         AIF   ('&LOCAL' NE 'PID').NOSVCR0                       92300\nA$SVCRB  A$SVCRB DSECT=NO                                        88179\n         AGO   .NOSVCRB                                          91195\n.NOSVCR0 ANOP  ,             DEFINE (MISSING) FLAG BITS          91195\nA$USFCIC EQU   0               NO CICS RESTRICTION               91195\nA$USFEXH EQU   0               NO EXHIBIT RESTRICTION            91195\nA$USFNET EQU   0               NO NETWORK RESTRICTION            91195\nA$USFOTH EQU   0               NO OTHER RESTRICTIONS             91195\nA$USFTSO EQU   0               LET TSO LOGON HANDLE              91195\nA$USFWYL EQU   0               NO WYLBUR RESTRICTIONS            91195\nA$SERMSG DS    0F              ???                               91195\n.NOSVCRB ORG   SPACWORK      RE-USE DURING COMPRESSION           92300\nCOMPPARM DS    8A            COMP3270 PARM LIST                  90140\nCPOUTLEN DS    F             OUTPUT LENGTH                       90140\nCPINLEN  DS    F             INPUT LENGTH                        90140\nCPBUFLEN DS    F             BUFFER SIZE                         90140\nOPFUN    DS    X             REQUESTED FUNCTIONS                 90140\nOPFSF    EQU   X'80'           INSERT PROT. SF IF NO SF IN LINE 2\nOFNCMP   EQU   X'40'           BYPASS BUFFER COMPRESSION, ETC.   90140\nOFNCOL   EQU   X'20'           BYPASS COLOR SUBSTITUTION         90140\nOFYESC   EQU   X'10'           BUFFER MAY CONTAIN ESCAPE (BTAM)  90140\nOFYCCW   EQU   X'08'           BUFFER CONTAINS CCW               90140\nOFYWCC   EQU   X'04'           BUFFER CONTAINS WCC/PCC           90140\nOPADD    DS    X             ADDRESSING MODE                     90140\nOPA16    EQU   X'02'           USE 16-BIT ADDRESSING ONLY        90140\nOPA14    EQU   X'01'           14-BIT ADDRESSING SUPPORTED       90140\nOPCOL    DS    X             COLOR MODE                          90140\nOPSEVEN  EQU   X'07'           7-COLOR MODE                      90140\nOPBACK   EQU   X'70'           BACKGROUND COLOR AVAILABLE        90140\nOPHIGH   DS    X             EXTENDED HIGH-LIGHTING              90140\n*PSEVEN  EQU   X'07'           ALL EXTENDED HIGH-LIGHTING        90140\nOPMISC   DS    X             MISCELLANEOUS OPTIONS               90140\nOPFVAL   EQU   X'80'           FIELD VALIDATION SUPPORTED        90140\nOPFOUT   EQU   X'40'           FIELD OUTLINING                   90140\nOPSEQLEN EQU   *-COMPPARM    LENGTH TO CLEAR                     90140\n         ORG   ,             USE LARGER LENGTH                   90140\n         PRINT NOGEN                                             88179\n         SPACE 1\nWORKRPLA EQU   *-WORKSPAC              USED TO CLEAR OUT WORKAREA\n         TITLE '*********  N E T S O L  -  SYNCHRONOUS RPL + NIB + WA'\n***********************************************************************\n*        THE FOLLOWING RPL IS USED FOR ALL SYNCHRONOUS COMMANDS       *\n***********************************************************************\n         SPACE 1\nNETSOL70 CSECT ,\n         PRINT &PRTSYS                                           85234\n         DS    0D\n         DC    CL8'SYNCHRPL'\n         SPACE 1\nSYNCHRPL RPL  ACB=ACB,OPTCD=(SYN),                                     *\n               AM=VTAM\n         ORG   ,\n***********************************************************************\n*        THE FOLLOWING NIB IS USED FOR ALL SYNCHRONOUS OPERATIONS     *\n*        REQUIRING A NIB.                                             *\n***********************************************************************\n         SPACE 1\n         DC    0D'0',CL8'SYNCHNIB'\nSYNCHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X\n               LISTEND=YES,LOGMODE=C' ',BNDAREA=0,                     *\n               RESPLIM=0     **IS THIS SAFE** ???                90199\n         DS    0D\nSYNWORK  DC    (WORKRPLA)X'00'         RPL WORK AREA\nSYNARG   EQU   SYNCHRPL+RPLARG-IFGRPL  DISPLACEMENT TO THE ARG\n*                                      WITHIN SYNCHRPL\nSYNFDB3  EQU   SYNCHRPL+RPLFDB3-IFGRPL DISPLACEMENT TO FBD3\n*                                      IN SYNCHRPL'S WORKAREA\nSRPLEXT1 EQU   SYNCHRPL+RPLEXTD1-IFGRPL DISPLACEMENT TO 'NIB@\n*                                      IN ARG FIELD' BIT\nSYNUSFLD EQU   SYNCHRPL+RPLUSFLD-IFGRPL DISPLACEMENT TO RPL USER FIELD\n*                                      FOR USE BY ERROR EXIT ROUTINE\n         SPACE 2\n***********************************************************************\n*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE SYNCHRONOUS  *\n*        RPLS. IT IS NOT ITSELF USED IN ANY MACROS       DC18203      *\n***********************************************************************\n         SPACE 1\n         DS    0D                                              DC18203\n         DC    CL8'FRSYNRPL'                                   DC18203\nFRSYNRPL RPL   ACB=ACB,AM=VTAM,OPTCD=(SYN)\nFRSYNL   EQU   *-FRSYNRPL    LENGTH OF SYN RPL FOR REFRESH     DC18203\n         SPACE 2                                                 90120\n***********************************************************************\n*        SETLOGON RPL - A SEPARATE RPL IS NECESSARY BECAUSE           *\n*         THE LOGON EXIT CAN BE DRIVEN BEFORE THE SETLOGON            *\n*         COMPLETES.                                                  *\n***********************************************************************\n         SPACE 2\n         DS    0D\n         DC    CL8'LOGONRPL'\n         SPACE 1\nSETLRPL  RPL   ACB=ACB,OPTCD=(SYN),                                    *\n               AM=VTAM\nSETNIB   DC    (8+NIBLNIB)X'00'        NIB IN IFGRPLX DSECT\nSETWORKA DC    (WORKRPLA)X'00'         WORKAREA IN IFGRPLX DSECT\n         SPACE 2                                                 87131\n***********************************************************************\n*        THE FOLLOWING NIB IS USED TO REFRESH THE NIB IN THE          *\n*        ASYNCHROUS RPL. IT ITSELF IS NOT USED IN ANY MACRO.          *\n***********************************************************************\n         SPACE 2\n         DS    0D\n         DC    CL8'FRESHNIB'\n         SPACE 1\nFRESHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X\n               LISTEND=YES,LOGMODE=C' ',BNDAREA=0,                     *\n               RESPLIM=16    AVOID 14,44 ERRORS (?)              90199\n         SPACE 2                                                 87131\n***********************************************************************\n*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE ASYNC        *\n*        RPLS IN THE RPL CSECT.  IT IS NOT ITSELF USED IN ANY         *\n*        MACRO.                                                       *\n***********************************************************************\n         SPACE 2\n         DS    0D\n         DC    CL8'FRESHRPL'\n         SPACE 1\nFRESHRPL RPL   ACB=ACB,                                                X\n               AM=VTAM,                                                X\n               OPTCD=(ASY)\n         TITLE '*********  N E T S O L  -  INITIALIZATION CODE'  86145\n***********************************************************************\n*        THIS CODE WILL MOVE THE CONTENTS OF NSNAME              86012\n*        INTO MESSAGE 12 FOR EACH OF THE SUPPORTED DEVICES TO ALLOW   *\n*        FOR EASY VISUAL IDENTIFICATION OF THE TEST VERSION OF NETSOL.*\n***********************************************************************\n         USING OPENIDS,R7    BASE SET BY CALLER                  86145\nOPENIDS  L     R14,=AL4(S32NSN12)      3270 SCREEN START         86012\n         L     R15,=AL4(S3ENSN12)      UPDATE 3270 EXTENDED      86012\n         L     R1,=AL4(S37NSN12)       UPDATE 3767               86012\n         L     R2,=A(MD5NSN12)         UPDATE MODEL 5 SCREEN     88206\n         ICM   R3,15,PSAATCVT-PSA   ANY VTAM UP ?                86012\n         BZ    NOATCVT       NO ?                                86012\n         CLI   0(R3),C'V'    VERSION ID ?                        86012\n         BNE   NOATCVT       NO                                  86012\n         MVC   0(9,R14),=C'VTAM V?R?'                            86012\n         CLI   1(R3),C'X'    NEW 'VX' PREFIX ?                   92363\n         BE    OPENID24                                          92363\n         CLI   1(R3),C'T'    OLD 'VT' PREFIX ?                   90094\n         BE    OPENID24      YES; IS VT##                        90094\n         BCTR  R3,0          ELSE IS V###                        90094\nOPENID24 MVC   VTAMVERL,2(R3)  SAVE VERSION # FOR CODE TESTS     92221\n         MVC   6(1,R14),2(R3)  COPY VERSION NUMBER               86012\n         MVC   8(1,R14),3(R3)  COPY RELEASE NUMBER               86012\n         MVC   0(9,R15),0(R14)  COPY TO OTHER TYPE SCREEN        86012\n         MVC   0(9,R1),0(R14)  COPY TO 3767 LINE                 86012\n         MVC   0(9,R2),0(R14)  MODEL 5                           88206\n         LA    R0,12         SET INCREMENT                       88206\n         AR    R14,R0        SKIP OVER IT                        86012\n         AR    R15,R0                                            86012\n         AR    R1,R0                                             86012\n         AR    R2,R0         ADVANCE MODEL 5 POINTER             88206\nNOATCVT  MVC   0(8,R14),NSNAME+1                   MSG 12        86012\n         MVC   0(8,R15),NSNAME+1                   MSG 12        86012\n         MVC   0(8,R1),NSNAME+1                   MSG 12\n         MVC   0(8,R2),NSNAME+1                                  88206\n         L     R14,=AL4(S32NSN12)      3270 SCREEN START         86065\n         L     R15,=AL4(S3ENSN12)      UPDATE 3270 EXTENDED      86065\n         L     R2,=AL4(MD5NSN12)       MODEL 5                   88206\n         MVC   S32NSN13-S32NSN12(30,R14),0(R14)  COPY TO MSG 13  86065\n         MVC   S3ENSN13-S3ENSN12(30,R15),0(R15)                  86065\n         MVC   MD5NSN13-MD5NSN12(30,R2),0(R2)                    88206\n         L     R14,=AL4(S32NSN13)      3270 SCREEN START         88179\n         L     R15,=AL4(S3ENSN13)      UPDATE 3270 EXTENDED      88179\n         L     R2,=AL4(MD5NSN13)                                 88206\n         MVC   S32NSN20-S32NSN13(30,R14),0(R14)  COPY TO MSG 13  88179\n         MVC   S3ENSN20-S3ENSN13(30,R15),0(R15)                  88179\n         MVC   MD5NSN20-MD5NSN13(30,R2),0(R2)                    88206\n         SPACE 1                                                 86012\n         L     R3,CVTPTR     GET THE CVT                         86012\n         L     R3,CVTSMCA-CVTMAP(,R3)  GET THE SMCA TABLE        86012\n         L     R1,=A(S32SID12)                                   86012\n         USING S32SID12,R1    DECLARE IT                         86012\n         MVC   S32SID12(4),16(R3)  COPY THE SMCA ID              86012\n         MVC   S32SID13(4),16(R3)                                86065\n         L     R14,=A(S32SID20)                                  88179\n         MVC   0(L'S32SID12,R14),S32SID12                        88179\n         L     R1,=A(S3ESID12)                                   88172\n         USING S3ESID12,R1                                       86065\n         MVC   S3ESID12(4),16(R3)                                86012\n         MVC   S3ESID13(4),16(R3)                                86065\n         L     R14,=A(S3ESID20)                                  88179\n         MVC   0(L'S3ESID12,R14),S3ESID12                        88179\n         L     R1,=A(S37SMC12)                                   86065\n         MVC   0(4,R1),16(R3)                                    86065\n         MVC   S37SMC20-S37SMC12(4,R1),16(R3)                    88220\n         L     R1,=A(MD5SID12)                                   88206\n         USING MD5SID12,R1                                       88206\n         MVC   MD5SID12(4),16(R3)                                88206\n         MVC   MD5SID13(4),16(R3)                                88206\n         L     R14,=A(MD5SID20)                                  88206\n         MVC   0(L'MD5SID12,R14),MD5SID12                        88206\n         DROP  R1                                                86012\n         ICM   R0,15,@MODETAB  RECURSION ?                       88220\n         BNZ   OPENIDNL      YES; KEEP OLD ONE                   88220\n         LOAD  EP=ISTINCLM,ERRET=OPENIDNL                        88213\n         ST    R0,@MODETAB   SAVE TABLE ADDRESS                  88213\nOPENIDNL BR    R6            RETURN TO CALLER                    86145\n         SPACE 1                                                 86145\n         LTORG ,                                                 86145\n         TITLE '*********  N E T S O L  - READ INITIALIZATION COMMANDS'\n***********************************************************************\n*                                                                     *\n*    READINIT PROCESSES THE NETSOL COMMANDS IN THE SYSIN FILE.        *\n*    COMMANDS WHICH MAY BE PLACED IN THIS FILE ARE FLAGGED            *\n*    WITH 'CMDINIT' IN THEIR CMD TABLE ENTRY.                         *\n*                                                                     *\n*    TO ALLOW COMMAND PROCESSING ROUTINES TO BE INDEPENDENT OF THEIR  *\n*    SOURCE, ALL COMMAND PROCESSORS ASSUME A DDT,TTE AND ASYNC RPL    *\n*    AVAILABLE FOR THEIR USE. THEREFORE, THESE CONTROL BLOCKS HAVE    *\n*    BEEN SET UP FOR READINIT.                                        *\n*                                                                     *\n*    INPUT : R5  - A(ASYNC RPL)                                       *\n*            R13 - A(SAVE AREA)                                       *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : REGISTERS ARE UNCHANGED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 85235\n         USING READINIT,R8                                       88179\nREADINIT STM   R14,R12,12(R13)         SET\n         ST    R13,RPLSAVE+4             UP\n         LA    R1,RPLSAVE                  SAVE\n         ST    R1,8(,R13)                    AREA\n         LR    R13,R1                          CHAIN\n         SPACE 1\n*        OPEN SYSIN AND SYSOUT FILES. NETSOL WILL CONTINUE EXECUTION\n*        EVEN WITH ERRORS IN THE INIT FILE.\n         SPACE 1\n         OPEN  (SYSINDCB,(INPUT),SYSOUDCB,(OUTPUT)) OPEN FILES\n         TM    SYSINDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSIN OPEN?\n         BZ    DCBOSYSI                           NO => ERROR MSG\n         TM    SYSOUDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSOUT OPEN?\n         BNZ   RIOPENOK                           YES => BR TO CONTINUE\n         MVC   DCBMSG+12(6),=CL6'SYSOUT'  MOVE\n         LA    R14,PUTDUMMY  GET DUMMY 'PUT' ROUTINE             88179\n         STCM  R14,7,SYSOUDCB+DCBPUTA-IHADCB                     88179\n         B     *+10                        DDNAME\nDCBOSYSI MVC   DCBMSG+12(6),=CL6'SYSIN '      TO OPERATOR MSG\n         WTO   MF=(E,DCBMSG)             LOG ERROR MESSAGE ON SYSLOG\n         TM    SYSINDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSIN ?        88179\n         BNZ   RIOPENOK      YES; READ IT ANYWAY                 88179\n         B     HITEST        CHECK FOR NEWS DATA                 88179\n         SPACE 1\n*        SET UP RPL,TTE AND DDT LINKS FOR INIT\n         SPACE 1\nRIOPENOK OI    UFLAGS,INIT               FLAG PROCESSING INITIALIZATION\n         LA    R3,TTEDUMMY               LOAD A(DUMMY TTE FOR INIT)\n         ST    R3,RPLUSFLD               SET UP RPL USER PTR\n         MVI   TERMFLG3,TFLON+TPRIVY  MAKE SYSIN PRIVILEGED      88179\n         L     R9,=A(DDTSYSIN)           LOAD A(DDT FOR INIT)   85327\n         ST    R9,TERMDDT                SAVE IN TTE\n         USING DDT,R9         DECLARE IT                         88179\n         SPACE 1\n*        PROCESS NETSOL COMMANDS FROM THE SYSIN FILE\n         SPACE 1\nREADLOOP LA    R6,IOAREA                 LOAD A(IO BUFFER)\n         GET   SYSINDCB,(R6)             READ CMD FROM SYSIN FILE\nREADNEX2 PUT   SYSOUDCB,(R6)             ECHO CMD TO SYSOUT FILE\n         SPACE 1                                                 90344\n***********************************************************************\n*                                                                     *\n*        CONTROL CARDS MAY BE SELECTED BY CPU ID (SMCA ID) :          *\n*                                                                     *\n*        PLACE CPU= IN COLUMN 2                                       *\n*              CPU= RESETS SELECTION AND ACCEPTS ALL CARDS            *\n*              CPU=SYS1SYS2SYS3  SKIPS CARDS EXCEPT ON SYSTEMS 1-3    *\n*              CPU=SYS5   SKIPS SUCCESSIVE CARDS EXCEPT ON SYSTEM 5   *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 90344\n         CLC   =C'CPU=',1(R6)  CHECK FOR CPU SPECIFIC CARDS      90344\n         BNE   READNCPU      NO; CONTINUE NORMALLY               90344\n         CLI   5(R6),C'A'    CPU= NON-ALPHAMERIC ?               90344\n         BL    READNCPU      YES; TREAT AS GENERAL MATCH         90344\n         L     R14,CVTPTR    GET THE CVT                         90344\n         LA    R15,5(,R6)    POINT TO FIRST CPU ID               90344\n         LA    R0,8          SET FOR MAXIMUM SUPPORTED           90344\n         L     R14,CVTSMCA-CVT(,R14)  POINT TO SMCA WORK AREA    90344\nREADTCPU CLC   0(4,R15),16(R14)   COMPARE CPU= TO SMCASID        90344\n         BE    READNCPU      MATCH; PROCESS THIS AND FOLLOWING   90344\n         LA    R15,4(,R15)   TRY NEXT ENTRY                      90344\n         CLI   0(R15),C','   COMMA SEPARATOR ?                   90344\n         BNE   *+8           NO                                  90344\n         LA    R15,1(,R15)   SKIP IT, TOO                        90344\n         BCT   R0,READTCPU                                       90344\nREADGCPU GET   SYSINDCB,(R6)     ELSE GET ANOTHER CARD           90344\n         CLC   =C'CPU=',1(R6) ANOTHER SELECTION CARD ?           90344\n         BE    READNEX2      YES; EXAMINE IT                     90344\n         MVI   0(R6),C'\u00ac'    SHOW CARD REJECTED                  90344\n         PUT   SYSOUDCB,(R6)  ECHO THE CARD                      90344\n         B     READGCPU      AND SKIP TO NEXT                    90344\n         SPACE 1                                                 90344\nREADNCPU DS    0H            MATCHING CPU FOUND, OR NO CPU CARDS 90344\n         CLI   0(R6),C'*'    COMMENTS CARD ONLY ?                86012\n         BE    READLOOP      YES, SKIP (SUPPORT ZAP MAINTENANCE) 86012\n         CLI   0(R6),C' '    POSSIBLY ALL BLANK ?                86012\n         BNE   READLOON      NO                                  86012\n         CLC   1(70,R6),0(R6)  MOSTLY BLANK ?                    86012\nREADLOON LA    R2,72           TEXT SANS SEQUENCE NUMBERS        87133\n         B     INTRPRET                  BR TO EDIT COMMAND\n         SPACE 1\n*        RETURN FROM CMD PROCESSING.\n*        R0 CONTAINS MSG INDEX FOR OUTPUT MSG\n         SPACE 1\nRIPUTMSG LR    R1,R0                   LOAD INDEX INTO R1\n         SLL   R1,2                    4 * (INDEX - 1)\n*                                      = DISPLACEMENT OF MESSAGE +4\n         L     R2,DDTMSGTB-4(R1)       POINT TO MSG. ENTRY IN TABLE\n         LH    R1,0(,R2)               PICK UP MSG LENGTH\n*        MOVE MESSAGE TO OUTPUT BUFFER AND WRITE TO SYSOUT\n         MVI   IOAREA,X'40'            INITIALIZE BUFFER\n         MVC   IOAREA+1(79),IOAREA       WITH BLANKS\n         BCTR  R1,0                    MOVE MESSAGE\n         EX    R1,RIEX1                  TO OUTPUT BUFFER\n         PUT   SYSOUDCB,IOAREA         WRITE MESSAGE TO SYSOUT FILE\n         B     READLOOP                BR TO GET NEXT CMD\n         SPACE 1\n*        END OF DATA REACHED ON SYSIN FILE\n         SPACE 1\nEODSYSIN TM    UFLAGS,INITERR          ERROR WHILE PROCESSING CMD FILE\n         BNO   RICLOSE                 NO => CONTINUE\n         WTO   MF=(E,INITEMSG)         YES => LOG ERROR TO OPERATOR\nRICLOSE  CLOSE (SYSINDCB)    CLOSE SYSIN\n         FREEPOOL SYSINDCB                                       88179\n         NI    UFLAGS,X'FF'-INIT-INITERR  END OF INIT PROCESSING 90156\n         SPACE 1\n*        READ NEWS DATA\nHITEST   DEVTYPE NEWSDCB+DCBDDNAM-IHADCB,IOAREA                  88179\n         BXH   R15,R15,HIDONE                                    88179\n         OPEN  (NEWSDCB,INPUT)  OPEN THE NEWS                    88179\n         TM    NEWSDCB+DCBOFLGS-IHADCB,DCBOFOPN  OPEN ?          88179\n         BZ    HIDONE        NO; SKIP OUT                        88179\n         L     R2,=A(NEWSTEXT)  POINT TO THE BUFFER              88179\n         PUT   SYSOUDCB,(R2)  WRITE A BLANK LINE                 88179\n         LA    R2,80(,R2)    POINT TO VARIABLE TEXT PROPER       88179\n         PUT   SYSOUDCB,(R2)  WRITE THE HEADER                   88179\n         LA    R3,23         NUMBER OF LINES                     88179\nHILOOP   GET   NEWSDCB,(R2)  READ A NEWS LINE                    88179\n         PUT   SYSOUDCB,(R2)  ECHO THE LINE                      88179\n         CLI   75(R2),C'0'   SEQUENCE FIELD ?                    88179\n         BL    HILOUP        NO                                  88179\n         MVC   72(8,R2),=CL8' '  BLANK IT OUT                    88179\nHILOUP   LA    R2,80(,R2)                                        88179\n         BCT   R3,HILOOP                                         88179\nHIFEND   CLOSE (NEWSDCB)                                         88179\n         FREEPOOL NEWSDCB                                        88179\nHIDONE   TM    SYSOUDCB+DCBOFLGS-IHADCB,DCBOFOPN                 88179\n         BZ    RIEXIT                                            88179\n         CLOSE (SYSOUDCB)                                        88179\n         FREEPOOL SYSOUDCB                                       88179\n         SPACE 1\nRIEXIT   L     R13,4(,R13)             RESTORE\n         LM    R14,R12,12(R13)           REGISTERS\nPUTDUMMY BR    R14                         AND RETURN\n         SPACE 2\nRIEX1    MVC   IOAREA(0),2(R2)         MOVE MSG TO OUTPUT BUFFER 86012\n         SPACE 1\nSYSINDCB DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EODSYSIN,MACRF=GM     88179\n         SPACE 1\nNEWSDCB  DCB   DDNAME=NEWS,DSORG=PS,EODAD=HIFEND,MACRF=GM        88179\n         SPACE 1\nSYSOUDCB DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=F\n         SPACE 1                                                 88179\n         LTORG ,                                                 88179\n         DROP  R8,R9                                             88179\n         TITLE '*********  N E T S O L  - SETRANGE COMMAND'      88185\n***********************************************************************\n*                                                                     *\n*    SETRANGE SETS UP THE AUTOMATIC LOGON DEFINITIONS FOR A RANGE     *\n*    OF NODES.                                                        *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        SETRANGE LOWNODE/HIGHNODE <LOGON> <UNLOCK> <APPLID text>     *\n*                 APPLID - FORCES TERMINAL TO SPECIFIED APPLICATION   *\n*                 LOGON  - REQUIRES USER LOGON BEFORE ACCESS     88185\n*                 UNLOCK - UNLOCKS THE DEVICE (SYSTEMS PRIVIES)       *\n*                                                                     *\n*    INPUT : NO PARAMETERS                                            *\n*                                                                     *\n*   OUTPUT : R0  - INDEX INTO DDT MSG TABLE                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 88185\nSETRANGE ST    R8,20+8*4(,R13)  SAVE BASE REGISTER               88185\n         BALR  R8,0          MAKE LOCAL BASE                     88185\n         USING *,R8          DECLARE IT                          88185\n         USING IFGRPL,PTRRPL           => R P L                  88185\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY   88185\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE 88185\n         BAL   R14,INITMSG4       OBTAIN MSG4  BUFFER            88185\n         SPACE 1                                                 88185\n*        GET NODENAME OF LOW RANGE                               88185\n         SPACE 1                                                 88185\n         LA    R1,SLNODE          LOAD A(OPTION LIST)            88185\n         BAL   R14,GETPARM        GO GET NODE NAME               88185\n         B     *+12               +0 - FOUND IT                  88185\n         B     SRXERR             +4 - NOT THERE                 88185\n         B     SRXERR             +8 - ERROR IN NODENAME         88185\n         MVC   NODENAME,=CL8' '   SAVE                           88185\n         LA    R14,NODENAME                                      88185\n         BCTR  R15,0                NODENAME                     88185\n         EX    R15,SRMVC              FOR LATER                  88185\n*        GET NODENAME OF HIGH RANGE                              88185\n         SPACE 1                                                 88185\n         LA    R1,SLNODE          LOAD A(OPTION LIST)            88185\n         BAL   R14,GETPARM        GO GET NODE NAME               88185\n         B     *+12               +0 - FOUND IT                  88185\n         B     SRXERR             +4 - NOT THERE                 88185\n         B     SRXERR             +8 - ERROR IN NODENAME         88185\n         MVC   NODENAM2,=8C'9'  PRESET FOR RANGE END             88185\n         LA    R14,NODENAM2                                      88185\n         BCTR  R15,0                NODENAME                     88185\n         EX    R15,SRMVC              FOR LATER                  88185\n         SPACE 1                                                 88185\n*        GET APPLID (OPTIONAL)                                   88185\n         SPACE 1                                                 88185\n         LA    R1,SLAPPL          LOAD A(OPTION LIST)            88185\n         BAL   R14,GETPARM        GO GET APPLID                  88185\n         B     *+12               +0 - FOUND APPLID              88185\n         B     SRTABLOK           +4 - APPLID NOT SPECIFIED      88185\n         B     SRXERR0            +8 - ERROR IN APPLID           86065\n         MVC   DLOGAPPL,=CL8' '   SAVE                           88185\n         LA    R14,DLOGAPPL                                      88185\n         BCTR  R15,0                APPLID                       88185\n         EX    R15,SRMVC              FOR LATER                  88185\n         LA    R15,1(,R15)        RESTORE APPLID LENGTH          88185\n         SPACE 1                                                 88185\n*        SCAN TERM TABLE FOR NODENAME                            88185\n         SPACE 1                                                 88185\nSRTABLOK STM   R3,R5,12(R13)      SAVE REGS                      88185\n         LM    R3,R5,TERMTEND  GET BXLE TABLE VALUES             88185\n         CR    R3,R5                   CHECK FOR NULL TABLE      88185\n         BH    SRENT1        NO ENTRIES AS R3 > R5 (INIT 0)      88185\n         SPACE 1                                                 88185\nSRTABLP  CLC   NODENAME(L'NODENAME+L'NODENAM2),TERMNAME COMPLETE MATCH?\n         BE    SRFNDTAB                YES, ALREADY IN THE TABLE 88185\n         TM    UFLAGS,INIT   INITIALIZATION PHASE ?              88185\n         BNZ   SRTABLX       YES; PERMIT OVERLAP                 88185\n         CLC   NODENAME,TERMNAME  RANGE OVERLAP ?                88185\n         BL    SRTABLN       NO                                  88185\n         CLC   NODENAME,TERMNAM2                                 88185\n         BNH   SRXERR        NODENAME ERROR                      88185\nSRTABLN  CLC   NODENAM2,TERMNAME  OTHER END OVERLAPS ?           88185\n         BL    SRTABLX       NO                                  88185\n         CLC   NODENAM2,TERMNAM2                                 88185\n         BNH   SRXERR        YES; TOO BAD                        88185\nSRTABLX  BXLE  R3,R4,SRTABLP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1                                                 88185\nSRENT1   L     R3,TERMTEND   GET THE FIRST ENTRY BACK            88185\n         SR    R3,R4         BACK-UP ONE                         88185\n         C     R3,TERMTABE   CONFLICT WITH PRIOR TABLE ?         88185\n         BH    SRNOENT       NO; ALLOCATE THIS ENTRY             88185\n         BAL   R7,SNOCCUR              YES => SHOULD NOT OCCUR   88185\n         SPACE 1                                                 88185\n*        THERE IS NO TTE ENTRY FOR THIS RANGE.                   88185\n         SPACE 1                                                 88185\nSRNOENT  L     R5,20(,R13)             RESTORE A(RPL)            88185\n         LTR   R15,R15                 APPLID SPECIFIED?         88185\n         BNZ   SRADDENT                YES => ADD ENTRY          88185\n         MVC   8(L'SLMSG1,R2),SLMSG1   NO  => MOVE ERROR MSG     86065\n         MVC   0(8,R2),NODENAME               MOVE NODENAME TO MSG\n         LM    R3,R5,12(R13)                  RESTORE REGS       88185\n         B     SRXERR                         BR TO ERROR EXIT   88185\n         SPACE 1                                                 88185\n*        ADD TERM TABLE ENTRY FOR SPECIFIED NODE NAME            88185\n*        IF NO APPLID WAS SPECIFIED, THEN THE LOGAPPL IS RESET IN TTE\n         SPACE 1                                                 88185\nSRADDENT ST    R3,TERMTEND   SAVE NEW TABLE START                88185\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY 88185\n         MVC   TERMNAME(L'TERMNAME+L'TERMNAM2),NODENAME    COPY NAMES\n         L     R8,=A(SLBASE) GET COMMON BASE                     88185\n         B     SLADDAPL-SLBASE(,R8)      ADD APPLID TO ENTRY     88185\n         SPACE 1                                                 88185\nSRFNDTAB L     R8,=A(SLBASE)  GET COMMON BASE                    88185\n         B     SLFNDTAB-SLBASE(,R8)  JOIN COMMON CODE            88185\n         SPACE 1                                                 88185\nSRXERR0  MVC   8(L'SRMSG0,R2),SRMSG0  INDICATE ERROR             86065\n         MVC   0(8,R2),NODENAME                                  86065\nSRXERR   TM    UFLAGS,INIT             CMD ISSUED DURING INITIALIZATION\n         BZ    *+8                     NO  => BR TO CONTINUE     88185\n         OI    UFLAGS,INITERR          YES => FLAG ERROR DURING INIT\n         SPACE 1                                                 88185\nSREXIT   LA    R0,MSG04                INDICATE MSG4  TO BE SENT 88185\n         L     R8,20+8*4(,R13)  RESTORE BASE                     88185\n         B     SENDMSG                 EXIT TO SEND MSG          88185\n         SPACE 2                                                 88185\nSRMVC    MVC   0(0,R14),0(R1)  SAVE PARAMETER                    88185\nSRMSG0   DC    C' SETRANGE COMMAND SYNTAX ERROR'                 88185\n         TITLE '*********  N E T S O L  - SETLOGON COMMAND'\n***********************************************************************\n*                                                                     *\n*    SETLOGON SETS UP THE AUTOMATIC LOGON APPLICATION FOR A NODE.     *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        SETLOGON NODENAME APPLID                                     *\n*        SETLOGON NODENAME UNLOCK - TO MAKE TERMINAL PRIVILEGED  86065\n*        SETLOGON NODENAME LOGON  - REQUIRE USERS TO LOG ON\n*                                                                     *\n*    IF THE APPLID IS OMITTED, THEN THE LOGAPPL RESET TO NOTHING.     *\n*                                                                     *\n*    INPUT : NO PARAMETERS                                            *\n*                                                                     *\n*   OUTPUT : R0  - INDEX INTO DDT MSG TABLE                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSETLOGON ST    R8,20+8*4(,R13)  SAVE LOCAL BASE\n         BALR  R8,0          MAKE LOCAL BASE                     88185\n         USING *,R8          DECLARE IT                          88185\nSLBASE   BAL   R14,INITMSG4       OBTAIN MSG4  BUFFER\n         SPACE 1\n*        GET NODENAME\n         SPACE 1\n         LA    R1,SLNODE          LOAD A(OPTION LIST)\n         BAL   R14,GETPARM        GO GET NODE NAME\n         B     *+12               +0 - FOUND IT\n         B     SLXERR             +4 - NOT THERE\n         B     SLXERR             +8 - ERROR IN NODENAME\n         MVC   NODENAME,=CL8' '   SAVE\n         BCTR  R15,0                NODENAME\n         EX    R15,SLEX1              FOR LATER\n         SPACE 1\n*        GET APPLID (OPTIONAL)\n         SPACE 1\n         LA    R1,SLAPPL          LOAD A(OPTION LIST)\n         BAL   R14,GETPARM        GO GET APPLID\n         B     *+12               +0 - FOUND APPLID\n         B     SLTABLOK           +4 - APPLID NOT SPECIFIED\n         B     SLXERR0            +8 - ERROR IN APPLID           86065\n         MVC   DLOGAPPL,=CL8' '   SAVE\n         BCTR  R15,0                APPLID\n         EX    R15,SLEX2              FOR LATER\n         LA    R15,1(,R15)        RESTORE APPLID LENGTH\n         SPACE 1\n*        SCAN TERM TABLE FOR NODENAME\n         SPACE 1\nSLTABLOK STM   R3,R5,12(R13)      SAVE REGS\n         LA    R1,NODENAME             PT @ NODENAME\n         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES\n         CR    R3,R5                   CHECK FOR NULL TABLE\n         BH    SLNOENT                 NO ENTRIES AS R3 > R5 (INIT 0)\n         SPACE 1\nSLTABLP  CLC   0(8,R1),TERMNAME        MATCH THE NAME ?\n         BE    SLFNDTAB                YES, ALREADY IN THE TABLE\n         BXLE  R3,R4,SLTABLP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1\n         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?\n         BL    SLNOENT                 NO => NODENAME NOT IN TABLE\n         BAL   R7,SNOCCUR              YES => SHOULD NOT OCCUR\n         SPACE 1\n*        THERE IS NO TTE ENTRY FOR THIS NODE.\n*        NO APPLID WILL BE TREATED AS AN ERROR IN THIS CASE.\n         SPACE 1\nSLNOENT  L     R5,20(,R13)             RESTORE A(RPL)\n         LTR   R15,R15                 APPLID SPECIFIED?\n         BNZ   SLADDENT                YES => ADD ENTRY\n         TM    UFLAGS,INIT   INITIALIZATION PROCESSING ?         88220\n         BZ    SLNOENTM      NO; FAIL                            88220\n         XC    DLOGAPPL,DLOGAPPL  CLEAR FOR SETRANGE OVERRIDE    88220\n         LA    R15,1         SET FALSE LENGTH                    88220\n         LA    R1,DLOGAPPL   SET FALSE LOCATION                  88220\n         B     SLADDENT      ADD AN ENTRY                        88220\nSLNOENTM MVC   8(L'SLMSG1,R2),SLMSG1   NO  => MOVE ERROR MSG     86065\n         MVC   0(8,R2),NODENAME               MOVE NODENAME TO MSG\n         LM    R3,R5,12(R13)                  RESTORE REGS\n         B     SLXERR                         BR TO ERROR EXIT\n         SPACE 1\n*        ADD TERM TABLE ENTRY FOR SPECIFIED NODE NAME\n*        IF NO APPLID WAS SPECIFIED, THEN THE LOGAPPL IS RESET IN TTE\n         SPACE 1\nSLADDENT ST    R3,TERMTABE             SAVE NEW TABLE END\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY\n         MVC   TERMNAME(8),NODENAME    COPY NAME ACROSS\n         B     SLADDAPL      ADD APPLID TO ENTRY\n         SPACE 1\nSLFNDTAB NI    TERMFLAG,255-LOGPROC    CLEAR LOGON STATUS FLAG   90135\n         L     R5,20(,R13)             RESTORE A(RPL)\n         LTR   R15,R15                 APPLID SPECIFIED?\n         BNZ   SLADDAPL                YES => GO ADD APPLID\n         XC    TERMDAPL,TERMDAPL       NO  => ZERO LOGON APPLID\n         MVC   0(L'SLMSG2,R2),SLMSG2          MOVE MSG TO OUT BUF\n         MVC   19(8,R2),NODENAME              ADD NODE NAME TO MSG\n         B     SLNDTTE                        BR TO END OF TTE PROCESS\n         SPACE 1\nSLADDAPL CLC   =CL8'UNLOCK',DLOGAPPL  SPECIAL REQUEST ?          86065\n         BE    SLADDUNL                                          88179\n         CLC   =C'LOGON',DLOGAPPL                                88179\n         BE    SLADDLON      SET LOGON REQUIRED                  88185\n         CLC   =C'LOCK ',DLOGAPPL                                88185\n         BE    SLADDLOK                                          88185\n         CLC   =C'NOLOG',DLOGAPPL                                88185\n         BNE   SLADDAPP      NO; NORMAL APPLICATION NAME         86065\n         NI    TERMFLG3,255-TFREQ  RESET LOGON REQUIRED          88185\n         B     SLCHANGE                                          88185\nSLADDLOK NI    TERMFLG3,TFREQ  LOGOFF; LOCK                      88185\n         B     SLCHANGE                                          88185\nSLADDLON OI    TERMFLG3,TFREQ  SHOW LOGON REQUIRED               88179\nSLCHANGE MVC   8(8,R2),=C' CHANGED'                              88179\n         MVC   0(8,R2),NODENAME                                  88179\n         B     SLNDTTE       MAKE MESSAGE                        88179\nSLADDUNL OI    TERMFLG3,TPRIVY+TFLON  SET PRIVILEGED TERMINAL    88179\n         MVC   8(L'SLMSG4,R2),SLMSG4  GET BASIC MESSAGE          86065\n         MVC   0(8,R2),NODENAME  INDICATE WHO                    86065\n         B     SLNDTTE\n         SPACE 1                                                 86065\nSLADDAPP MVC   TERMDAPL,DLOGAPPL       ADD LOGON APPLID TO TTE   86065\n         MVC   8(L'SLMSG3,R2),SLMSG3   MOVE OK MSG TO OUT BUF    86065\n         MVC   0(8,R2),TERMDAPL        ADD APPLID TO MSG\n         OC    0(8,R2),=CL8' '  UPPER CASE HEX ZEROES            88220\n         MVC   33(8,R2),TERMNAME       ADD NODE NAME TO MSG\n         TM    UFLAGS,INIT   IN INITIALIZATION PROCESSING ?      87131\n         BZ    SLNDTTE       NO; NO COMMAND CODE                 87131\n         SLR   R6,R6                                             87131\n         ICM   R6,3,GPDATAL  ANY MORE TEXT ?                     87131\n         BZ    SLNDTTE       NO                                  87131\n         L     R7,GPDATAP    GET TEXT START                      87131\nSLLDEBL  CLI   0(R7),C' '    LEADING BLANK ?                     87131\n         BNE   SLLDEBND      NO                                  87131\n         LA    R7,1(,R7)                                         87131\n         BCT   R6,SLLDEBL    GET RESIDUAL LENGTH                 87131\n         B     SLNDTTE       NO MORE TEXT                        87131\nSLLDEBND LA    R15,0(R6,R7)  GET END OF TEXT                     87131\nSLRDEBL  BCTR  R15,0         BACKSPACE                           87131\n         CLI   0(R15),C' '   TRAILING BLANK ?                    87131\n         BNE   SLRDEBND      NO                                  87131\n         BCT   R6,SLRDEBL    TRY AGAIN                           87131\n         B     SLNDTTE                                           87131\nSLPMSG   MVC   0(0,R1),0(R7) MOVE LOGON MESSAGE (PARM)           87131\nSLRDEBND GETMAIN R,LV=255,SP=2    GET A BUFFER FOR THE TEXT      87131\n         ST    R6,TERMLPLN   SET LOGON PARM LENGTH               87131\n         BCTR  R6,0          LENGTH FOR EXECUTE                  87131\n         ST    R1,TERMLPAD   SAVE MESSAGE ADDRESS                87131\n         EX    R6,SLPMSG     SAVE MESSAGE                        87131\n*        B     SLNDTTE       CONTINUE                            87131\n         SPACE 1\nSLNDTTE  LM    R3,R4,12(R13)           RESTORE REGS\n         B     SLEXIT                  BR TO EXIT\n         SPACE 1\nSLXERR0  MVC   8(L'SLMSG0,R2),SLMSG0  INDICATE ERROR             86065\n         MVC   0(8,R2),NODENAME                                  86065\nSLXERR   TM    UFLAGS,INIT             CMD ISSUED DURING INITIALIZATION\n         BZ    *+8                     NO  => BR TO CONTINUE\n         OI    UFLAGS,INITERR          YES => FLAG ERROR DURING INIT\n         SPACE 1\nSLEXIT   LA    R0,MSG04                INDICATE MSG4  TO BE SENT\n         L     R8,20+8*4(,R13)  RESTORE LOCAL BASE               88185\n         B     SENDMSG                 EXIT TO SEND MSG\n         SPACE 2\nSLEX1    MVC   NODENAME(0),0(R1)       SAVE NODENAME PARM\nSLEX2    MVC   DLOGAPPL(0),0(R1)       SAVE APPLID PARM\nSLMSG0   DC    C' SETLOGON COMMAND SYNTAX ERROR'                 86065\nSLMSG1   DC    C' NOT KNOWN TO NETSOL'                           86065\nSLMSG2   DC    C'DEFAULT APPLID FOR XXXXXXXX RESET'\nSLMSG3   DC    C' IS NOW LOGON APPLID FOR '                      86065\nSLMSG4   DC    C' NOW UNLOCKED'                                  86065\n         SPACE 1                                                 88185\n         LTORG ,                                                 88185\n         TITLE '*********  N E T S O L  -  SET/SHOW/KILL COMMANDS'\nTESTMSG  ST    R8,20+8*4(,R13)  SAVE FOR LOCAL BASE              88220\n         BALR  R8,0          MAKE LOCAL BASE                     88220\n         USING *,R8          DECLARE BASE                        88220\n         BAL   R14,INITMSG4  GET ERROR MESSAGE                   88220\n         XC    A$SAVE(8),A$SAVE  CLEAR WORK SPACE                88220\n         LA    R1,SLNUM      REQUEST MESSAGE NUMBER              88220\n         BAL   R14,GETPARM                                       88220\n         B     *+12          OK ?                                88220\n         B     SKXERR        FAIL                                88220\n         B     SKXERR        BAD                                 88220\n         BCTR  R15,0                                             88220\n         EX    R15,TTMPACK   PACK THE MESSAGE                    88220\n         CVB   R0,A$SAVE     MAKE DECIMAL                        88220\n         LTR   R0,R0         VALID ?                             88220\n         BNP   TTMERR        NO                                  88220\n         CH    R0,=Y(MSGMAX) VALID ?                             88220\n         BNH   SKEXM#        NO                                  88220\nTTMERR   MVC   0(14,R2),=C'INVALID NUMBER'                       88220\n         B     SKXERR        FAIL                                88220\nSLNUM    $GP   8,'MESSAGE NUMBER',GPNUM                          88220\nTTMPACK  PACK  A$SAVE(8),0(0,R1)  PACK MESSAGE NUMBER            88220\n         SPACE 1                                                 88220\nSETSET   DS    0H                                                88206\nSETSHOW  ST    R8,20+8*4(,R13)  SET LOCAL BASE                   88206\n         BALR  R8,0          MAKE LOCAL BASE                     88206\n         USING *,R8          DECLARE BASE                        88206\n         BAL   R14,INITMSG4  GET ERROR MESSAGE                   88206\n         MVC   0(4,R2),=C'OOPS'                                  88206\n         B     SKEXIT        QUIT UNTIL CODE ADDED               88209\n         SPACE 1                                                 88209\n*        KILL USER ID,  KILL TERM ID, OR  KILL ID                88209\n*                                                                88209\nSETKILL  ST    R8,20+8*4(,R13)  SET LOCAL BASE                   88206\n         BALR  R8,0          MAKE LOCAL BASE                     88206\n         USING *,R8          DECLARE BASE                        88206\n         BAL   R14,INITMSG4  GET ERROR MESSAGE                   88206\n         LR    R4,R2         CHANGE GLOBAL REGISTER              88209\n         MVC   NODENAME,=CL8' '  BLANK DESIRED NAME              88209\n         MVC   NODENAM2,NODENAME  PROPAGATE                      88209\n         STM   R3,R5,12(R13)   SAVE TTE AND RPL ADDRESSES        88209\nSETKILL1 LA    R1,SLNAME     POINT TO OPTION ENTRY               88209\n         BAL   R14,GETPARM   PARSE THE NEXT OPERAND              88209\n         B     *+12          OK                                  88209\n         B     SKXERR        MISSING                             88209\n         B     SKXERR        TOO LONG ?                          88209\n         BCTR  R15,0                                             88209\n         EX    R15,SKEX1     MOVE TO FIELD                       88209\n         SPACE 1                                                 88209\n         CLI   NODENAM2,C' '   SECOND PASS THROUGH HERE ?        88209\n         BNE   SETKILLB      NO; TEST WHICH                      88209\n         CLC   =C'TERM',NODENAME   KILL A TERMINAL ?             88209\n         BE    SETKILL2      YES; NEED SECOND OPERAND            88209\n         CLC   =C'USER',NODENAME   KILL A USER ?                 88209\n         BNE   SETKILLB      NO; TRY BOTH                        88209\nSETKILL2 MVC   NODENAM2(1),NODENAME  PRESERVE THE REQUEST TYPE   88209\n         B     SETKILL1      AND PARSE FOR NAME                  88209\nSETKILLB CLI   NODENAM2,C'U' KILL USER ONLY ?                    88209\n         BE    SETKILLU                                          88209\n         LM    R1,R3,TERMTABS  GET THE TERMINAL TABLE            88209\n         SR    R1,R2         RECOVER FROM EMPTY TABLE            88209\nSETKILTL BXH   R1,R2,SETKILTN  TERMINAL NOT FOUND                88209\n         CLC   NODENAME,TERMNAME-TERMTABL(R1)  SAME ID ?         88209\n         BNE   SETKILTL      NO; TRY NEXT ENTRY                  88209\n         LR    R3,R1         COPY DESIRED TTE                    88209\n         BAL   R14,UTERMOF   RESET PRIVILEGES AND LOGON          88209\n         AIF   ('&LOCAL' NE 'PID').NOKILL1                       92300\n         ICM   R1,15,TERMLOUD   LOCAL USER DATA ?                88209\n         BZ    SETKILTX      NO; DONE                            88209\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT SVC PARM ARE\n         MVC   A$SID,=C'A$RB'                                    88209\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,0,A$SAKEY+A$SBUILD)      88209\n*                            LOGOFF SESSIONS AND USER            88209\n         ST    R1,A$SBUFR    SET LOUD                            88209\n         LA    R1,A$SVCRB                                        88209\n         SVC   249           CANCEL SESSIONS; KEEP USER          88209\n.NOKILL1 ANOP  ,                                                 91195\nSETKILTX MVC   0(24,R4),=C'Terminal XXXXXXXX killed'             88209\n         MVC   9(8,R4),NODENAME                                  88209\n         B     SKEX35        TAKE NORMAL EXIT                    88209\nSETKILTN CLI   NODENAM2,C'T'  TERMINAL ONLY ?                    88209\n         BNE   SETKILLU      NO; LOOK FOR USER                   88209\n         MVC   0(27,R4),=C'Terminal XXXXXXXX not found'          88209\n         MVC   9(8,R4),NODENAME   IDENTIFY                       88209\n         B     SKEX35        AND QUIT                            88209\n         SPACE 1                                                 88209\nSETKILLU MVC   0(23,R4),=C'User XXXXXXXX not found'              88209\n         MVC   5(8,R4),NODENAME  ADD USER ID                     88209\n         AIF   ('&LOCAL' NE 'PID').NOKILL2                       92300\n         L     R14,CVTPTR    GET THE CVT                         88209\n         ICM   R14,15,CVTUSER-CVTMAP(R14)  LOCAL EXTENSION?      88209\n         BZ    SKEX35        NO                                  88209\n         LA    R9,UCLOUD-USERCVT-(A$LNEXT-A$LOUD)(R14) LINK-PTR  88209\nSETKILUL ICM   R9,15,A$LNEXT-A$LOUD(R9)  ANOTHER ?               88209\n         BZ    SKEX35        NO                                  88209\n         CLC   NODENAME,A$UUID-A$LOUD(R9)  SAME ID ?             88209\n         BNE   SETKILUL                                          88209\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT SVC PARM ARE\n         MVC   A$SID,=C'A$RB'                                    88209\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,0,A$SAKEY+A$SBUILD)      88209\n*                            LOGOFF SESSIONS AND USER            88209\n         ST    R9,A$SBUFR    SET LOUD                            88209\n         LA    R1,A$SVCRB                                        88209\n         SVC   249           CANCEL SESSIONS; KEEP USER          88209\n         MVC   14(9,R4),=C'killed   '                            88209\n         B     SETKILUL      TRY FOR ANOTHER                     88209\n.NOKILL2 B     SKEX35        NO CHAIN; NO MATCH                  91195\n         SPACE 1                                                 88209\nSKXERR   TM    UFLAGS,INIT                                       88209\n         BZ    *+8                                               88209\n         OI    UFLAGS,INITERR                                    88209\n         B     SKEXIT        TAKE NORMAL EXIT                    88209\n         SPACE 1                                                 88206\nSKEX35   LM    R3,R5,12(R13) RESTORE TTE AND RPL                 88209\nSKEXIT   LA    R0,MSG04      GET ERROR MESSAGE INDEX             88206\nSKEXM#   L     R8,20+8*4(,R13)  RESTORE OLD BASE                 88206\n         B     SENDMSG       SEND MESSAGE                        88206\nSKEX1    MVC   NODENAME(0),0(R1)   MOVE TERM OR USER ID          88209\n         SPACE 1                                                 88206\n         LTORG ,                                                 88206\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               270'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *\n***********************************************************************\nDDT3270  DS    0D\nS32EDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\nS32SENDA DC    A(S32COMP)         A(3270 SEND/COMPRESSION ROUTINE)\nS32TERMA DC    A(S32TID12,S32TID13,S32TID20)  TERM NAME FIELD ADDRESS\nS32TIMEA DC    A(S32TIM12,S32TIM13,S32TIM20)  TIME FIELD ADDRESSES\nS32M4OFS DC    A(S32M4OF)         A(USABLE BUFFER IN MSG 4)\nS32OFFST DC    AL2(S32M4OF+6-S32MSG04)  MSG OFFSET FOR INSERTED DATA\nS32M4L   DC    AL2(L'S32M4OF)     L(USABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 2\nS32MSGTB DS    0F\n         DC    A(S32MSG01)\n         DC    A(S32MSG02)\n         DC    A(S32MSG03)\n         DC    A(S32MSG04)\n         DC    A(S32MSG05)\n         DC    A(S32MSG06)\n         DC    A(S32MSG07)\n         DC    A(S32MSG08)\n         DC    A(S32MSG09)\n         DC    A(S32MSG10)\n         DC    A(S32MSG11)\n         DC    A(S32MSG12)\n         DC    A(S32MSG13,S32MSG14,S32MSG15,S32MSG16,S32MSG17)   86065\n         DC    A(S32MSG18,S32MSG01)  MSG 19 IS FAKE              87187\n         DC    A(S32MSG20)   LOGON SCREEN                        88179\n         SPACE 5                                                 90120\n*              DEVICE DEPENDENT TABLE FOR 3270 EXTENDED FUNCTION'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES     *\n*        THAT HAVE EXTENDED FUNCTION (I.E. COLOUR + SYMBOL SETS ).    *\n***********************************************************************\nDDT3270E DS    0D\nS3EEDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\nS3ESENDA DC    A(S3ESEND)         A(3270-EDS SEND ROUTINE)       90140\nS3ETERMA DC    A(S3ETID12,S3ETID13,S3ETID20) TERM NAME ADDRESSES 88179\nS3ETIMEA DC    A(S3ETIM12,S3ETIM13,S3ETIM20) TIME/DATE ADDRESSES 88179\nS3EM4OFS DC    A(S3EM4OF)         A(USABLE BUFFER IN MSG 4)\nS3EOFFST DC    AL2(S3EM4OF+6-S3EMSG04)  MSG OFFSET FOR INSERTED DATA\nS3EM4L   DC    AL2(L'S3EM4OF)     L(USABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 2\nS3EMSGTB DS    0F\n         DC    A(S3EMSG01)\n         DC    A(S3EMSG02)\n         DC    A(S3EMSG03)\n         DC    A(S3EMSG04)\n         DC    A(S3EMSG05)\n         DC    A(S3EMSG06)\n         DC    A(S3EMSG07)\n         DC    A(S3EMSG08)\n         DC    A(S3EMSG09)\n         DC    A(S3EMSG10)\n         DC    A(S3EMSG11)\n         DC    A(S3EMSG12)\n         DC    A(S3EMSG13,S3EMSG14,S3EMSG15,S3EMSG16,S3EMSG17)   86065\n         DC    A(S3EMSG18,S3EMSG01)  MSG 19 IS FAKE              87187\n         DC    A(S3EMSG20)   LOGON SCREEN                        88179\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               270 MODEL 5'                                      88206\n*****************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND   88206\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES\n*        RUNNING IN 27*132 FORMAT.  ( MODEL 5 )                  88206\n*****************************************************************\nDDTMDL5  DS    0D                                                88206\nMD5EDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)     88206\nMD5SENDA DC    A(S3ESEND)         A(3270-EDS SEND ROUTINE)       90140\nMD5TERMA DC    A(MD5TID12,MD5TID13,MD5TID20)  TERM NAME FIELD ADD\nMD5TIMEA DC    A(MD5TIM12,MD5TIM13,MD5TIM20)  TIME FIELD ADDRESSE\nMD5M4OFS DC    A(MD5M4OF)         A(USABLE BUFFER IN MSG 4)      88206\nMD5OFFST DC    AL2(MD5M4OF+6-MD5MSG04)  MSG OFFSET FOR INSERTED D\nMD5M4L   DC    AL2(L'MD5M4OF)     L(USABLE BUFFER IN MSG 4)      88206\n*****************************************************************\n*        MESSAGE TABLE INDEX                                     88206\n*****************************************************************\n         SPACE 2                                                 88206\nMD5MSGTB DS    0F                                                88206\n         DC    A(MD5MSG01)                                       88206\n         DC    A(MD5MSG02)                                       88206\n         DC    A(MD5MSG03)                                       88206\n         DC    A(MD5MSG04)                                       88206\n         DC    A(MD5MSG05)                                       88206\n         DC    A(MD5MSG06)                                       88206\n         DC    A(MD5MSG07)                                       88206\n         DC    A(MD5MSG08)                                       88206\n         DC    A(MD5MSG09)                                       88206\n         DC    A(MD5MSG10)                                       88206\n         DC    A(MD5MSG11)                                       88206\n         DC    A(MD5MSG12)                                       88206\n         DC    A(MD5MSG13,MD5MSG14,MD5MSG15,MD5MSG16,MD5MSG17)   88206\n         DC    A(MD5MSG18,MD5MSG01)  MSG 19 IS FAKE              88206\n         DC    A(MD5MSG20)   LOGON SCREEN                        88206\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               767'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3767 TERMINALS.  *\n***********************************************************************\nDDT3767  DS    0D\nS37EDITA DC    A(S37EDIT)         A(3767 INPUT EDIT ROUTINE)\nS37SENDA DC    A(S37SEND)         A(3767 SEND ROUTINE)           86145\nS37TERMA DC    A(S37TID12,0,S37TID20)  TERMINAL ID               88220\nS37TIMEA DC    A(S37TIM12,0,0)    A(TIME FIELD IN MSG 12)        86065\nS37M4OFS DC    A(S37M4OF)         A(USABLE BUFFER IN MSG 4)\nS37OFFST DC    AL2(S37M4OF+6-S37MSG04)  MSG OFFSET FOR INSERTED DATA\nS37M4L   DC    AL2(L'S37M4OF)     L(USABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 2\nS37MSGTB DS    0F\n         DC    A(S37MSG01)\n         DC    A(S37MSG02)\n         DC    A(S37MSG03)\n         DC    A(S37MSG04)\n         DC    A(S37MSG05)\n         DC    A(S37MSG06)\n         DC    A(S37MSG07)\n         DC    A(S37MSG08)\n         DC    A(S37MSG09)\n         DC    A(S37MSG10)\n         DC    A(S37MSG11)\n         DC    A(S37MSG12)\n         DC    A(S37MSG13,S37MSG14,S37MSG15,S37MSG16,S37MSG17)   86065\n         DC    A(S37MSG18,S37MSG01)  MSG 19 IS FAKE              87187\n         DC    A(S37MSG20)   LOGON SOLICITATION                  88179\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR SX\n               YSIN FILE'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN PROCESSING CMDS FROM THE SYSIN FILE.*\n***********************************************************************\nDDTSYSIN DS    0D\nSINEDITA DC    A(0)               A(SYSIN INPUT EDIT ROUTINE)\nSINSENDA DC    A(RIPUTMSG)        A(SYSIN SEND ROUTINE)\nSINTERMA DC    A(0,0,0)           A(TERMINAL FIELD IN MSG 12)    86065\nSINTIMEA DC    A(0,0,0)           A(TIME FIELD IN MSG 12)        86065\nSINM4OFS DC    A(SINM4OF)         A(USABLE BUFFER IN MSG 4)\nSINOFFST DC    AL2(SINM4OF+6-SINMSG04)  MSG OFFSET FOR INSERTED DATA\nSINM4L   DC    AL2(L'SINM4OF)     L(USABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 2\nSINMSGTB DS    0F\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG04)         RESPONSE FOR INITIALIZATION CMDS\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG07)         FOR INVALID COMMANDS\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    8A(SINMSG00)                                      88179\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR OX\n               S CONSOLES'                                       88192\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN OS CONSOLE COMMUNICATIONS.          *\n*            NOTE THAT 3767 MESSAGES ARE USED AS-IS.                  *\n***********************************************************************\nDDTCONS  DS    0D                                                88192\nCONEDITA DC    A(0)          NO INPUT EDIT                       88192\nCONSENDA DC    A(S37SEND)    A(CONSOLE WTO ROUTINE)              88192\nCONTERMA DC    A(S37TID12,0,0)    A(TERMINAL FIELD IN MSG 12)    88192\nCONTIMEA DC    A(S37TIM12,0,0)    A(TIME FIELD IN MSG 12)        88192\nCONM4OFS DC    A(CONM4OF)         A(USABLE BUFFER IN MSG 4)      88192\nCONOFFST DC    AL2(CONM4OF+6-CONMSG04)  MSG OFFSET FOR INSERTED DATA\nCONM4L   DC    AL2(L'CONM4OF)     L(USABLE BUFFER IN MSG 4)      88192\n         SPACE 1                                                 88192\nCONMSGTB DC    A(CONMSG01)                                       88192\n         DC    A(CONMSG02)                                       88192\n         DC    A(CONMSG03)                                       88192\n         DC    A(CONMSG04)                                       88192\n         DC    A(CONMSG05)                                       88192\n         DC    A(CONMSG06)                                       88192\n         DC    A(CONMSG07)                                       88192\n         DC    A(CONMSG08)                                       88192\n         DC    A(CONMSG09)                                       88192\n         DC    A(CONMSG10)                                       88192\n         DC    A(CONMSG11)                                       88192\n         DC    A(S37MSG12)                                       88192\n         DC    A(CONMSG13,CONMSG14,CONMSG15,CONMSG16,CONMSG17)   88192\n         DC    A(CONMSG18,CONMSG01)  MSG 19 IS FAKE              88192\n         DC    A(S37MSG20)   LOGON SOLICITATION                  88192\n         SPACE 1                                                 88192\nCONMSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=CON\nCONMSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE, REENTER'        88192\nCONMSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'\nCONMSG04 DC    YL2(CONEND04-*)                                   88192\nCONM4OF  DC    CL60' '\nCONEND04 EQU   *\nCONMSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88192\nCONMSG06 $MSG  C'BCSC106 CONNECTING TO APPLICATION XXXXXXXX'     88192\nCONMSG07 $MSG  C'BCSC107 XXXXXXXX NOT A VALID COMMAND'           88192\nCONMSG08 $MSG  C'BCSC108          IS NOT AVAILABLE'  OR LOGMODE INVALID\nCONMSG09 $MSG  C'BCSC109          NO LONGER ACCEPTING LOGONS'    88192\nCONMSG10 $MSG  C'BCSC110          NEVER ACCEPTING LOGONS'        88192\nCONMSG11 $MSG  C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'\nCONMSG13 $MSG  C'PID VTAM SERVICE IS CLOSED AT THIS TIME'        92300\nCONMSG14 $MSG  C'CENTER CLOSED - ACCESS NOT PERMITTED NOW'       87187\nCONMSG15 $MSG  C'BCSC115 TERMINAL NOW UNLOCKED'                  86065\nCONMSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED'               86065\nCONMSG17 $MSG  C'BCSC117 PASSWORD UNLOCK REQUEST FAILED'         86065\nCONMSG18 $MSG  C'REQUEST IS NOT AUTHORIZED'                      87187\n         TITLE '*********  N E T S O L  -  MESSAGES FOR 3270'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2\n         $MODEL 2               SET 3270 MODEL NUMBER FOR 3270 MACROS\n         PRINT &PRTSYS                                           85234\n         SPACE 2\nS32MSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=3270\nS32MSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE; REENTER'        88206\nS32MSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS-DOMAIN RESOURCE'\nS32MSG04 $MSG  CL60' ',ML=S32M4OF                                88206\nS32MSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88206\n         SPACE 1\nS32MSG06 DC    YL2(S32END06-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (MDT)              SETUP WCC\n         $SBA  (1,1)              SET BUFFER ADDRESS\n         $SF   (PROT)             SET ATTRIBUTE BYTE\n         DC    C'BCSC106 CONNECTING TO APPLICATION '             86012\nS32M6APL DC    CL8'APPLID'                                       86012\nS32END06 EQU   *\n         SPACE 1\nS32MSG07 $MSG  C'BCSC107 XXXXXXXX NOT DEFINED TO VTAM'           88206\nS32MSG08 $MSG  C'BCSC108 XXXXXXXX IS NOT AVAILABLE'  OR LOGMODE INVALID\nS32MSG09 $MSG  C'BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS'    88206\nS32MSG10 $MSG  C'BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS'        88206\nS32MSG11 $MSG  C'BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS'\n         SPACE 1\nS32MSG12 $SCRN 12            DEFINE APPLICATION MENU             88220\nS32MSG13 $SCRN 13            SHOW CENTER CLOSED                  88220\n         SPACE 1                                                 86065\nS32MSG14 $MSG  C'BCSC114 CENTER CLOSED - ACCESS NOT PERMITTED NOW'\nS32MSG15 $MSG  C'BCSC115 PASSWORD ACCEPTED - TERMINAL UNLOCKED',WCC=\nS32MSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED',WCC=          88206\nS32MSG17 $MSG  C'BCSC117 PASSWORD UNLOCK FAILED'                 88206\nS32MSG18 $MSG  C'BCSC118 REQUEST IS NOT AUTHORIZED'              87187\n         SPACE 1                                                 88179\nS32MSG20 $SCRN 20            PROMPT FOR USER LOGON               88220\n         SPACE 5                                                 90120\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2\n         $MODEL 2               SET 3270 MODEL NUMBER FOR 3270 MACROS\n         PRINT &PRTSYS                                           85234\n         SPACE 1\nS3EMSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=327E\nS3EMSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE; REENTER'        88206\nS3EMSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS-DOMAIN RESOURCE'\nS3EMSG04 $MSG  CL60' ',ML=S3EM4OF                                88206\nS3EMSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88206\n         SPACE 1\nS3EMSG06 DC    YL2(S3EEND06-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (MDT)              SETUP WCC\n         $SBA  (1,1)              SET BUFFER ADDRESS\n         $SFE  ATTR=PROT,COL=GREEN\n         DC    C'BCSC106 CONNECTING TO APPLICATION '             86012\nS3EM6APL DC    CL8'APPLID'                                       86012\nS3EEND06 EQU   *\n         SPACE 1\nS3EMSG07 $MSG  C'BCSC107 XXXXXXXX NOT DEFINED TO VTAM'           88206\nS3EMSG08 $MSG  C'BCSC108 XXXXXXXX IS NOT AVAILABLE'  OR LOGMODE INVALID\nS3EMSG09 $MSG  C'BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS'\nS3EMSG10 $MSG  C'BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS'        88206\nS3EMSG11 $MSG  C'BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS'\n         SPACE 1\nS3EMSG12 $SCRN 12            DEFINE APPLICATION MENU             88220\nS3EMSG13 $SCRN 13            SHOW CENTER CLOSED                  88220\n         SPACE 1                                                 86065\nS3EMSG14 $MSG  C'BCSC114 CENTER CLOSED - ACCESS NOT PERMITTED NOW'\nS3EMSG15 $MSG  C'BCSC115 PASSWORD ACCEPTED - TERMINAL UNLOCKED',WCC=,CO*\n               L=GREEN                                           88206\nS3EMSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED',WCC=,COL=YELLOW\nS3EMSG17 $MSG  C'BCSC117 PASSWORD UNLOCK FAILED',COL=PINK        88206\nS3EMSG18 $MSG  C'BCSC118 REQUEST IS NOT AUTHORIZED'              88206\n         SPACE 1                                                 88179\nS3EMSG20 $SCRN 20            PROMPT FOR USER LOGON               88220\n         TITLE '*********  N E T S O L  -  MESSAGES FOR 3270'    88206\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2                                                 88206\n         $MODEL 5               SET 3270 MODEL NUMBER FOR 3270 MACROS\n         PRINT &PRTSYS                                           85234\n         SPACE 2                                                 88206\nMD5MSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=3270\nMD5MSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE; REENTER'        88206\nMD5MSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS-DOMAIN RESOURCE'\nMD5MSG04 $MSG  CL60' ',ML=MD5M4OF                                88206\nMD5MSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88206\n         SPACE 1                                                 88206\nMD5MSG06 DC    YL2(MD5END06-*)                                   88206\n         $IO   ERASE/ALT          SET 3270 COMMAND CODE          88206\n         $WCC  (MDT)              SETUP WCC                      88206\n         $SBA  (1,1)              SET BUFFER ADDRESS             88206\n         $SF   (PROT)             SET ATTRIBUTE BYTE             88206\n         DC    C'BCSC106 CONNECTING TO APPLICATION '             86012\nMD5M6APL DC    CL8'APPLID'                                       86012\nMD5END06 EQU   *                                                 88206\n         SPACE 1                                                 88206\nMD5MSG07 $MSG  C'BCSC107 XXXXXXXX NOT DEFINED TO VTAM'           88206\nMD5MSG08 $MSG  C'BCSC108 XXXXXXXX IS NOT AVAILABLE'  OR LOGMODE INVALID\nMD5MSG09 $MSG  C'BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS'    88206\nMD5MSG10 $MSG  C'BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS'        88206\nMD5MSG11 $MSG  C'BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS'\n         SPACE 1                                                 88206\nMD5MSG12 $SCRN 12,IO=ERASE/ALT  DEFINE APPLICATION MENU          88220\nMD5MSG13 $SCRN 13,IO=ERASE/ALT  SHOW CENTER CLOSED               88220\n         SPACE 1                                                 86065\nMD5MSG14 $MSG  C'BCSC114 CENTER CLOSED - ACCESS NOT PERMITTED NOW'\nMD5MSG15 $MSG  C'BCSC115 PASSWORD ACCEPTED - TERMINAL UNLOCKED',WCC=\nMD5MSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED',WCC=          88206\nMD5MSG17 $MSG  C'BCSC117 PASSWORD UNLOCK FAILED'                 88206\nMD5MSG18 $MSG  C'BCSC118 REQUEST IS NOT AUTHORIZED'              87187\n         SPACE 1                                                 88179\nMD5MSG20 $SCRN 20,IO=ERASE/ALT  PROMPT FOR USER LOGON            88220\n         SPACE 1                                                 88179\nNEWSTEXT DC    CL80'                             PID News   '    88179\n         DC    CL80' '                                           88179\n         DC    CL80' No news available (no news is good news?)'  88179\n         DC    21CL80' '     DATA FROM 'NEWS' DD                 88179\n         SPACE 1                                                 88179\nHELPTEXT DC    CL40'                         VTAM Functions '    88179\n         DC    CL40'                                        '  1 88179\n         DC    CL40'   Simple commands:   HELP - displays th'    88179\n         DC    CL40'is screen.                              '  2 88179\n         DC    CL40'     STATUS - displays the system activi'    88179\n         DC    CL40'ty screen.                              '  3 88179\n         DC    CL40'     MSG text - sends a message to the o'    88179\n         DC    CL40'perator (no reply possible).            '  4 88179\n         DC    CL40'     NEWS - displays the current news bu'    88179\n         DC    CL40'lletin (if any)                         '  5 88179\n         DC    CL40'     PASSWORD userid/password - connect '    88179\n         DC    CL40'(sign-on) to VTAM                       '  6 88179\n         DC    CL40'     LOCK - sign-off only. Does not disc'    88179\n         DC    CL40'onnect session.                         '  7 88179\n         DC    CL40'     LOGOFF - sign-off and disconnect se'    88179\n         DC    CL40'ssion on dial-up terminals.             '  8 88179\n         DC    CL40'     OS text - issue an operator command'    88179\n         DC    CL40' (privileged function).                 '  9 88179\n         DC    CL40'                                        '    88179\n         DC    CL40'                                        ' 10 88179\n         DC    CL40'When your initial contact (dial-in or EN'    88179\n         DC    CL40'TER key) results in a \"SIGN-ON\" screen,'  11 88179\n         DC    CL40'you will not be able to use any sub-syst'    88179\n         DC    CL40'em until you complete the logon process.' 12 88179\n         DC    CL40'Supply your user-id, your password, and '    88179\n         DC    CL40'an optional account number. When you use' 13 88179\n         DC    CL40'an account number to sign on, you are pl'    88179\n         DC    CL40'aced in global (automatic) LOGON mode.  ' 14 88179\n         DC    CL40'Subsequent requests for TSO or WYLBUR wi'    88179\n         DC    CL40'll bypass their LOGON screens.          ' 15 88179\n         DC    CL40'                                        '    88179\n         DC    CL40'                                        ' 16 88179\n         DC    CL40'If you see a \"PID Inc.  CLOSED\" message '    88179\n         DC    CL40'or screen, then either:                 ' 17 88179\n         DC    CL40' a) your terminal is locked to a subsyst'    88179\n         DC    CL40'em that is not currently running,  or   ' 18 88179\n         DC    CL40' b) VTAM is restricted while system main'    88179\n         DC    CL40'tenance is being performed.             ' 19 88179\n         DC    CL40'We close for scheduled maintenance every'    88179\n         DC    CL40' Sunday morning from midnight to 8 a.m.,' 20 88179\n         DC    CL40'Monday midnight to 8 a.m. and Thursday 6'    90054\n         DC    CL40' to 8 a.m.                              ' 21 90054\n         DC    CL40'                                        '    88179\n         DC    CL40'                                        ' 22 88179\n         DC    CL40'For assistance, call:  (703) 931-9500 Te'    88179\n         DC    CL40'chnical support Ext. 48  / Systems #50  ' 23 88179\n         DC    CL40'                       (703) 931-9500 Co'    88179\n         DC    CL40'mputer operations Ext. 43               ' 24 88179\n         TITLE '*********  N E T S O L  -  MESSAGES FOR 3767'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2\nS37MSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=3767\nS37MSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE, REENTER'        88192\nS37MSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'\nS37MSG04 DC    YL2(S37END04-*),X'0D25'                           88192\nS37M4OF  DC    CL60' '\n         DC    X'0D25'              CARRIAGE RETURN              86153\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END04 EQU   *\nS37MSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88192\nS37MSG06 $MSG  C'BCSC106 CONNECTING TO APPLICATION'              88195\n         ORG   *-10          OVERLAY CRLF/ENTER TEXT             88195\n         DC    C' '          ONE SPACER                          88195\nS37M6APL DC    CL8' ',C' '   APPLID IN MSG06                     88195\nS37MSG07 $MSG  C'BCSC107          NOT DEFINED TO VTAM'           88192\nS37MSG08 $MSG  C'BCSC108          IS NOT AVAILABLE'  OR LOGMODE INVALID\nS37MSG09 $MSG  C'BCSC109          NO LONGER ACCEPTING LOGONS'    88192\nS37MSG10 $MSG  C'BCSC110          NEVER ACCEPTING LOGONS'        88192\nS37MSG11 $MSG  C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'\n         SPACE 1\nS37MSG12 DC    YL2(S37END12-*)\n         DC    XL2'0D250D25'          DOUBLE CARRIAGE RETURN     86153\n         DC    C'PID VTAM SERVICE '                              92300\nS37NSN12 DC    CL20' '       VTAM AND PROGRAM VERSION            86145\n***********************************************************************\n*                                                                     *\n*        TIME AND DATE STAMP                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         DC    C'   System:'   SYSTEM ID                         86012\nS37SMC12 DC    CL4' '        SMCA ID                             86012\n         DC    C'   Terminal:'    TERM KEYWORD                   85328\nS37TID12 DC    CL8' '             TERM NAME\n         DC    XL2'0D250D25'          CARRIAGE RETURN            86153\n***********************************************************************\n*                                                                     *\n*        APPLICATION SELECTION MENU                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         DC    C'  APPLICATION  ENTER         EXIT'\n         DC    CL3' '             FILLER\nS37TIM12 DC    CL15' '            TIME STAMP\n         DC    X'0D25'                                           86153\n         DC    C'  TSO          LOGON         LOGOFF'\n         DC    X'0D25'                                           86153\n         DC    C'  KERMIT       KERMIT        QUIT/LOGOFF'       89338\n         DC    X'0D25'                                           86153\n         DC    C'  WYLBUR       WYLBUR        LOGOFF'            84142\n         DC    X'0D25'                                           86153\n         DC    C'  Comten menu  LOGOFF'                          86356\n         DC    X'0D25'                                           86356\n***********************************************************************\n*                                                                     *\n*        PROMPT FOR INPUT                                             *\n*                                                                     *\n***********************************************************************\n         DC    C'ENTER ? '\nS37END12 EQU   *\nS37SIZ12 EQU   S37END12-S37MSG12\n         SPACE 1                                                 86065\nS37MSG13 $MSG  C'PID VTAM SERVICE IS CLOSED AT THIS TIME'        92300\nS37MSG14 $MSG  C'CENTER CLOSED - ACCESS NOT PERMITTED NOW'       87187\nS37MSG15 $MSG  C'BCSC115 TERMINAL NOW UNLOCKED'                  86065\nS37MSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED'               86065\nS37MSG17 $MSG  C'BCSC117 PASSWORD UNLOCK REQUEST FAILED'         86065\nS37MSG18 $MSG  C'BCSC118 REQUEST IS NOT AUTHORIZED'              87187\n         SPACE 1                                                 88179\nS37MSG20 DC    YL2(S37END20-*),X'0D25'                           88179\n         DC    C'Welcome to PID VTAM Services.'                  92300\n         DC    C'   System:'   SYSTEM ID                         88220\nS37SMC20 DC    CL4' '        SMCA ID                             88220\n         DC    C'   Terminal:'    TERM KEYWORD                   88220\nS37TID20 DC    CL8' ',X'0D25'     TERM NAME                      88220\n DC    C'Please issue a command (HELP, LOGOFF...) or sign on.',X'0D25'\n         DC    C'To sign-on, enter your userid, a space, and your passw*\n               ord. You may specify',X'0D25'                     88220\n         DC    C'your account number after the password to bypass TSO/W*\n               YLBUR logon prompts.',X'0D25'                     88220\n         DC    C'Enter (id/pswd\u00dd/acct\u00a8)>'   PROMPT FOR INPUT     88220\nS37END20 EQU   *                                                 88179\n         TITLE '*********  N E T S O L  -  MESSAGES FOR SYSIN'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2\nSINMSG00 $MSG  C'UNSUPPORTED MESSAGE FOR SYSIN CMDS',TYPE=SYN    88192\n         SPACE 1\nSINMSG04 DC    YL2(SINEND04-*-2)                                 86066\nSINM4OF  DC    CL60' '\nSINEND04 EQU   *\n         ORG   SINM4OF       REDEFINE                            88199\nERRMSG   DC    XL125'0'      RDW/0/TEXT  FOR SVC 249 ERROR MESSAGES\n         SPACE 1\nSINMSG07 $MSG  C'BCSC107 INVALID COMMAND'                        88192\n         SPACE 1                                                 85235\n***********************************************************************\n*    EXIT ROUTINES TO BE SCHEDULED IN RESPONSE TO VTAM EVENTS         *\n*                                                                     *\n*              * ERREXIT ENTERED FOR ERROR CONDITIONS.                *\n*              * TPEND SCHEDULED WHEN VTAM SHUTS DOWN                 *\n*              * LOGON SCHEDULED WHEN A TERMINAL LOGS ON              *\n*              * LOSTERM SCHEDULED WHEN A TERMINAL IS LOST            *\n*              * RELREQ SCHEDULED WHEN ANOTHER APPLICATION ACQUIRES   *\n*                A TERMINAL CURRENTLY LOGGED ON TO NETSOL.            *\n***********************************************************************\n         SPACE 2\n         DS    0D\n         DC    CL8'EXITLIST'\n         SPACE 1\nEXLST    EXLST LERAD=ERREXIT,                                          X\n               SYNAD=ERREXIT,                                          X\n               TPEND=TPEND,                                            X\n               RELREQ=RELREQ,                                          X\n               LOGON=LOGON,                                            X\n               LOSTERM=LOSTERM,                                        X\n               AM=VTAM\n         TITLE '*********  N E T S O L  -  R P L   DSECT CONTINUED'\nIFGRPLX  DSECT\n*        THE FOLLOWING SECTION OF THE WORK AREA IS NOT INITIALIZED BY\n*        THE GETRPL FUNCTION SO NO DATA SHOULD BE PLACED IN THAT NEEDS\n*        TO BE ZERO AT THE BEGINNING\n         SPACE 1\n*        THE FOLLOWING MANIPULATION RESERVES A MESSAGE BUFFER FOR\n*        THE LARGEST EXISTING MESSAGE.\n         DS    0F            ALIGN                               91195\nIOBASE   DS    CL(S32SIZ12)            SPACE FOR 3270 MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S3ESIZ12)            SPACE FOR 3270 EXTENDED MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(MD5SIZ12)  SPACE FOR 3270 MODEL 5              88206\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S37SIZ12)            SPACE FOR 3767 MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S32SIZ13)            SPACE FOR 3270 MSG 13     86065\n         ORG   IOBASE                  BACK TO START OF BUFFER   86065\n         DS    CL(S3ESIZ13)            SPACE FOR 3270 EDS MSG 13 86065\n         ORG   IOBASE                  BACK TO START OF BUFFER   86065\n         DS    CL(MD5SIZ13)  SPACE FOR MODEL 5 SCREEN            88206\n         ORG   IOBASE                                            88206\n         DS    CL(S32SIZ20)  SPACE FOR LOGON SCREEN              88206\n         ORG   IOBASE                                            88206\n         DS    CL(S3ESIZ20)                                      88206\n         ORG   IOBASE                                            88206\n         DS    CL(MD5SIZ20)                                      88206\n         ORG   IOBASE                                            88206\n         DS    CL(PREFIXLN)  LEAVE ROOM FOR EXHIBIT SCREEN       87193\n*OLD*    DS    24CL80                                            87193\n         DS    27CL132       ROOM FOR MODEL 5                    88206\n         DS    CL(SUFFIXLN)                                      87193\n         ORG   ,                       GO TO END OF BUFFER\nLMSG12   EQU   *-IOBASE                CALC MAX MSG 12 SIZE\n         ORG   IOBASE BACK TO START OF BUFFER\nIOAREA   DS    CL(LMSG12)              FOR MSG OUTPUT / INPUT FROM LU\n         ORG   IOAREA+80               ORG OVER SYSIN BUFFER\nNODENAME DS    CL8                     TEMP NODE NAME STORAGE\nNODENAM2 DS    CL8           RANGE END NAME                      88185\nDLOGAPPL DS    CL8                     TEMP APPLID STORAGE\nTTEDUMMY DS    CL(TERMELEN)            DUMMY TTE USED BY SYSIN CMDS\n         ORG   ,                       ORG BACK TO END OF BUFFER\n*        OUTPUT BUFFER DEFINITION COMPLETE.\nDATASEQ  DS    CL256                   TRANSLATED DATA SEQUENC DC18203\nENDSECT  DS    0D                      END DSECT ON D-WORD\nLNIFGRPL EQU   WORKSPAC-STSECT         LENGTH OF ONE RPL AREA\nIOBUFLEN EQU   ENDSECT-IOAREA          LENGTH OF THE IOAREA\n*                                      WITHOUT THE WORKAREA\n         PRINT NOGEN                                             86012\n         SPACE 1                                                 86012\nCVTDSECT DSECT ,                                                 86012\n         CVT   DSECT=YES                                         90344\n         IEESMCA ,                                               90344\n         IHAPSA ,                                                86012\nCIB      IEZCIB ,                                                86065\n         IHAASVT ,           ADDRESS SPACE VECTOR TABLE          90120\n         IHAASCB ,           ADDRESS SPACE CONTROL BLOCK         90120\nUCM      DSECT ,                                                 87187\n         IEECUCM ,                                               87187\n         IKJTCB ,                                                87193\n         IHACDE ,            REALLY WANT LPDE                    87193\n         IEECHAIN ,          CSCB MAPPING                        90120\n         SPACE 1                                                 93038\n         IEFJESCT ,          JES VECTOR TABLE                    93038\n         SPACE 1                                                 93038\n         IEFJSCVT ,          EXHIBIT SSCT                        93038\n         SPACE 1                                                 88179\n         AIF   ('&LOCAL' NE 'PID').NOPID                         92300\n         MAPEXR ,            MAP EXHIBIT CSA                     93038\n         MAPEXK ,            MAP EXHIBIT SCREEN AREA             93038\n         SPACE 1                                                 93038\nUSERCVT  USERCVT ,                                               88185\n         SPACE 1                                                 88185\n         PRINT GEN                                               88179\nA$LOUD   A$LOUD ,                                                88179\n.NOPID  END   ,                                                  92300\n./ ADD NAME=NETSOLP\n//NETSOL  PROC NAME=MONITOR,NETSOL=NETSOLB,INIT=NETSINIT\n//*********************************************************************\n//*********************************************************************\n//*                                                                 ***\n//*                                                                 ***\n//*    PURPOSE:            VTAM NETWORK SOLICITOR.                  ***\n//*                                                                 ***\n//*    OWNER:              DISTRIBUTED SERVICES                     ***\n//*                                                                 ***\n//*    CONTACT:            ED PITKIN                                ***\n//*                        BILL JACKSON                             ***\n//*                                                                 ***\n//*                                                                 ***\n//*********************************************************************\n//*********************************************************************\n//*\n//NETSOL  EXEC PGM=&NAME,DPRTY=(15,0),PERFORM=14,REGION=1028K,TIME=1440\n//STEPLIB  DD DSN=SYS9.LOADLIB,DISP=SHR\n//SYSIN    DD DSN=SYS1.PARMLIB(&INIT),DISP=SHR\n//SYSOUT   DD SYSOUT=A\n//SYSUDUMP DD SYSOUT=A\n//SUBSYSTS DD DSN=SYS1.PARMLIB(&NETSOL),DISP=SHR\n./ ADD NAME=NETSOL70 8002-04355-08125-1647-07942-07934-00000-GERHARD\nNSOL     TITLE '*****************    N E T S O L'\n         MACRO ,                                                 90141\n&NM      XHEAD ,             EXIT CODE (IN NETSOLEX CSECT)       90141\nNETSOLEX CSECT ,             GET EXIT CSECT                      90141\n&NM      LR    R7,R15        MAKE LOCAL BASE                     90141\n         DROP  ,                                                 90141\n         USING &NM,R7        SET LOCAL BASE                      90141\n         L     R12,EXMAIN    GET MAIN BASE                       90141\n         USING NETSOL,R12,R11,R10  CHEAT A LITTLE                90141\n         LM    R10,R11,RESTBASE  LOAD OTHERS                     90141\n         ST    R14,RETVTAM@  SAVE RETURN ADDRESS                 90141\n         USING IFGRPL,PTRRPL           => R P L\n         USING ISTDNIB,PTRNIB          => N I B\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE\n         MEND  ,                                                 90141\n         SPACE 1                                                 90141\n         MACRO ,                                                 90141\n&NM      MHEAD ,             EXIT CODE (IN NETSOL CSECT)         90141\nNETSOL70 CSECT ,             GET MAIN CSECT                      90141\n         DROP  ,                                                 90141\n         USING &NM,R15       SET LOCAL BASE                      90141\n&NM      L     R12,=A(NETSOL)  GET MAIN BASE                     90141\n         USING NETSOL,R12,R11,R10  CHEAT A LITTLE                90141\n         LM    R10,R11,RESTBASE  LOAD OTHERS                     90141\n         ST    R14,RETVTAM@  SAVE RETURN ADDRESS                 90141\n         DROP  R15                                               90141\n         USING IFGRPL,PTRRPL           => R P L\n         USING ISTDNIB,PTRNIB          => N I B\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE\n         MEND  ,                                                 90141\n         SPACE 1                                                 90141\n         MACRO ,                                                 87193\n&NM      LPALOOK &NAME=INVOKE,&CDE=R5,&ERR=EXCXCB,&MLPA=YES      87193\n.*       THIS MODULE PERFORMS SYSTEM DEPENDENT LOOKUP OF A       87193\n.*       SPECIFIC MODULE IN THE LINK-PACK AREA                   87193\n.*       NAME=  D(B) OR RELOC. MEMBER NAME                       87193\n.*       CDE=      MAPPING REGISTER FOR RETURNED CDE             87193\n.*       ERR=      BRANCH ADDRESS IF NOT FOUND                   87193\n         GBLB  &SVS,&MVS                                         87193\n         LCLA  &I                                                87193\n&I       SETA  &SYSNDX                                           87193\n         AIF   (&SVS OR &MVS).SUB                                87193\n&NM      L     R14,CVTPTR    GET CVT                             87193\n         USING CVTMAP,R14    DECLARE IT                          87193\n         L     R14,CVTHEAD   FIRST TCB                           87193\n         USING TCB,R14                                           87193\n         L     R14,TCBOTC    GET MASTER SCHEDULER                87193\n         LA    R14,TCBLLS    GET LOAD LIST                       87193\nLPALOOP  LAT   R14,0(R14),&ERR  EXIT WITH UNAVAILABLE MESSAGE    87193\n         LAT   &CDE,4(R14),LPALOOP  GET CDE OR OUT               87193\n         USING CDENTRY,&CDE                                      87193\n         TM    CDATTR,CDFLPRES+CDFRENT  RENT/LPA MODULE ?        87193\n         BNO   LPALOOP       NO                                  87193\n         CLC   CDENAME,&NAME   MATCHING ENTRY ?                  87193\n         BNE   LPALOOP       NO                                  87193\n         DROP  R14                                               87193\n         MEXIT ,             RETURN WITH &CDE REGISTER SET       87193\n.SUB     ANOP  ,                                                 87193\n&NM      STM   R1,R15,12(R13)  SAVE ALL REGISTERS                87193\n         L     R3,CVTPTR     GET CVT IN R3 FOR IEAVVMSR          87193\n         LM    R0,R1,&NAME   LOAD MODULE NAME                    87193\n         AIF   ('&MLPA' NE 'YES' AND '&MLPA' NE '').NOMLPA       87193\n         L     R15,CVTQLPAQ-CVTMAP(R3)  GET MLPA CDE CHAIN       87193\n         USING CDENTRY,R15                                       87193\nLPL&I.M  ICM   R15,15,CDCHAIN   GET NEXT CDE; ELSE TRY PLPA      87193\n         BZ    LPL&I.P                                           87193\n         C     R1,CDNAME+4   MATCH ?                             87193\n         BNE   LPL&I.M       NO; TRY NEXT                        87193\n         C     R0,CDNAME     FULL MATCH ?                        87193\n         BNE   LPL&I.M       NO; TRY NEXT                        87193\n         LR    R0,R15        FINAGLE THE CDE ADDRESS             87193\n         B     LPL&I.G       FOUND IT                            87193\n         DROP  R15                                               87193\n.NOMLPA  ANOP  ,                                                 87193\nLPL&I.P  L     R7,CVTLPDSR-CVTMAP(,R3)   GET LOOKUP ENTRY        87193\n         BALR  R14,R7    NOTE THAT R7-R9 ARE CLOBBERED           87193\n         B     LPL&I.G-*(,R14)   MODULE FOUND                    87193\n         LM    R1,R15,12(R13)  RESTORE REGS                      87193\n         B     &ERR          TAKE ERROR EXIT                     87193\nLPL&I.G  LM    R1,R15,12(R13)  RESTORE REGS                      87193\n         LR    &CDE,R0       LOAD CDE (LPDE) BASE                87193\n         USING CDENTRY,&CDE  DECLARE IT                          87193\n         MEND  ,                                                 87193\n         SPACE 1                                                 87193\n         MACRO\n&LABEL   $CMD  &VAPPL,&ROUT,&TEXT,&FLAG,&TYPE=0                  88185\n.*\n.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S COMMAND LOOK-UP TABLE.\n.*\n.*  INPUT    : &GAPPL   - GENERALIZED APPLICATION NAME.(DELETED) 88185\n.*             &VAPPL   - ASSOCIATED VTAM APPLICATION NAME.\n.*             &ROUT    - ROUTINE TO PROCESS THE COMMAND.\n.*             &TEXT    - COMMAND ENTERED FROM TERMINAL.\n.*             &FLAG    - COMMAND FLAG BYTE.\n.*             &TYPE    - APPLICATION GROUP FLAG (TSO/CICS/WYL/EXH/OTH)\n.*  OUTPUT   : AN ENTRY IN NETSOL'S COMMAND ENTRY TABLE IS GENERATED.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : APR  15/81\n.*\n         LCLA  &L\n&L       SETA  K'&TEXT-2                                         88185\n&LABEL   DC    CL8'&VAPPL',CL8&TEXT,AL4(&ROUT),AL1(0,&L,&FLAG,&TYPE)\n         MEND\n         SPACE 1                                                 87193\n         MACRO ,                                                 87193\n&NM      $CMDN &VAPPL,&ROUT,&TEXT,&FLAG,&TYPE=0                  88185\n         GBLC  &LCSTR,&OC                                        88172\n&OC      SETC  '&SYSECT'     SAVE OLD CSECT                      88172\n&NM      $CMD  &VAPPL,&ROUT,&TEXT,&FLAG,TYPE=&TYPE               88185\nNETINTAB CSECT ,                                                 87193\n         LOGCHAR APPLID=(APPLICID,&VAPPL),SEQNCE=&TEXT\n         LCSTR &TEXT         CONVERT TO LOWER CASE               88185\n         AIF   ('&TEXT' EQ '&LCSTR').NOTUP                       88185\n         LOGCHAR APPLID=(APPLICID,&VAPPL),SEQNCE=&LCSTR          87193\n.NOTUP   ANOP  ,                                                 87287\n&OC      CSECT ,             RESTORE OLD CSECT                   88172\n         MEND  ,                                                 87193\n         SPACE 1                                                 87193\n         MACRO\n&LABEL   $GP   &GPLEN,&ERRTEXT,&GPFLAG\n.*\n.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S GETPARM OPTION LIST.\n.*\n.*  INPUT    : &GPLEN   - MAXIMUM LENGTH OF PARAMETER.\n.*             &ERRTEXT - TEXT FOR ERROR MSG FROM GETPARM ROUTINE.\n.*             &GPFLAG  - OPTION BYTE FOR GETPARM.\n.*\n.*  OUTPUT   : A PARAMETER OPTION LIST\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : JUNE 19/81\n.*\n         LCLA  &L\n&L       SETA  K'&ERRTEXT-2\n&LABEL   DC    AL2(&GPLEN,&L),AL1(&GPFLAG),CL&L&ERRTEXT\n         MEND\n         SPACE 1                                                 84142\n         MACRO ,                                                 84142\n&NM      LOGO  &SBA=(12,19),&ML=                                 88220\n         GBLC  &LOCAL                                            92222\n         GBLA  &MDL70                                            88206\n         LCLA  &W                                                88206\n&W       SETA  40+(&MDL70/5)*52                                  88206\n&NM      DC    CL39'                                        '    88220\n         DC    CL&W'                                        '    84163\n         AIF   ('&ML' EQ '').NOTIM                               88220\n&ML      EQU   *-15,15,C'C'  TIME STAMP                          88220\n.NOTIM   DC    CL40'                                        '    84163\n         DC    CL&W'                                        '    84163\n         AIF   ('&LOCAL' EQ 'DTS').DODIAL                        92222\n         DC    CL40'   PPPPPPPPPPP     IIIIIIIIII    DDDDDDD'    92222\n         DC    CL&W'DD                                      '    92222\n         DC    CL40'   PPPPPPPPPPPP    IIIIIIIIII    DDDDDDD'    92222\n         DC    CL&W'DDD          IIIIII NN   NN   CCCCC     '    92222\n         DC    CL40'   PP        PP        II        DD     '    92222\n         DC    CL&W'  DD           II   NNN  NN  CC   CC    '    92222\n         DC    CL40'   PP        PP        II        DD     '    92222\n         DC    CL&W'   DD          II   NNNN NN  CC         '    92222\n         DC    CL40'   PPPPPPPPPPPP        II        DD     '    92222\n         DC    CL&W'   DD          II   NN NNNN  CC         '    92222\n         DC    CL40'   PPPPPPPPPPP         II        DD     '    92222\n         DC    CL&W'   DD          II   NN  NNN  CC   CC    '    92222\n         DC    CL40'   PP                  II        DD     '    92222\n         DC    CL&W'  DD         IIIIII NN   NN   CCCCC     '    92222\n         DC    CL40'   PP              IIIIIIIIII    DDDDDDD'    92222\n         DC    CL&W'DDD                                     '    92222\n         DC    CL40'   PP              IIIIIIIIII    DDDDDDD'    92222\n         DC    CL&W'DD                                      '    92222\n         $SBA  &SBA                                              92222\n         $SFE  ATTR=SKIP,COL=TURQ                                92222\n         DC    C'Public Interest Data, Inc.'                     92222\n         AGO   .COMOUT                                           92222\n.DODIAL  DC    CL40'    DDDDDD   IIII     A     LL          '    84163\n         DC    CL&W'   TTTTTTTT YY   YY M     M EEEEEEE     '    84163\n         DC    CL40'    DD   DD   II     AAA    LL          '    84163\n         DC    CL&W'      TT    YY   YY MM   MM EE          '    84163\n         DC    CL40'    DD   DD   II    AA AA   LL          '    84163\n         DC    CL&W'      TT    YY   YY MMM MMM EE          '    84163\n         DC    CL40'    DD   DD   II   AA   AA  LL          '    84163\n         DC    CL&W'      TT     YY YY  MMMMMMM EEEEE       '    84163\n         DC    CL40'    DD   DD   II   AA   AA  LL      ===='    84163\n         DC    CL&W'===   TT      YYY   MM M MM EE          '    84163\n         DC    CL40'    DD   DD   II   AAAAAAA  LL          '    84163\n         DC    CL&W'      TT      YY    MM   MM EE          '    84163\n         DC    CL40'    DD   DD   II   AA   AA  LL          '    84163\n         DC    CL&W'      TT      YY    MM   MM EE          '    84163\n         DC    CL40'    DDDDDD   IIII  AA   AA  LLLLLLL     '    84163\n         DC    CL&W'      TT      YY    MM   MM EEEEEEE     '    84163\n         $SBA  &SBA                                              84142\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'Consumers Computer Services, Inc.'              84142\n.COMOUT  MEND  ,                                                 84142\n         SPACE 1                                                 86065\n         MACRO ,                                                 86065\n&NM      CLOGO ,                                                 86065\n         GBLA  &MDL70                                            88206\n         LCLA  &W                                                88206\n&W       SETA  40+(&MDL70/5)*52                                  88206\n&NM      DC    CL40'  CCCCC   LL       OOOOO    SSSSS   EEEE'    86065\n         DC    CL&W'EEE DDDDDD    **                        '    86065\n         DC    CL40' CC   CC  LL      OO   OO  SS   SS  EE  '    86065\n         DC    CL&W'    DD   DD   **                        '    86065\n         DC    CL40' CC       LL      OO   OO  SS       EE  '    86065\n         DC    CL&W'    DD   DD   **                        '    86065\n         DC    CL40' CC       LL      OO   OO   SSSSS   EEEE'    86065\n         DC    CL&W'E   DD   DD   **                        '    86065\n         DC    CL40' CC       LL      OO   OO       SS  EE  '    86065\n         DC    CL&W'    DD   DD   **                        '    86065\n         DC    CL40' CC       LL      OO   OO  SS   SS  EE  '    86065\n         DC    CL&W'    DD   DD   **                        '    86065\n         DC    CL40' CC   CC  LL      OO   OO  SS   SS  EE  '    86065\n         DC    CL&W'    DD   DD                             '    86065\n         DC    CL40'  CCCCC   LLLLLLL  OOOOO    SSSSS   EEEE'    86065\n         DC    CL&W'EEE DDDDDD    **                        '    86065\n         MEND  ,                                                 86065\n         SPACE 1                                                 88192\n         MACRO                                                   88192\n&LABEL   $MSG  &TEXT,&TYPE=,&WCC=ALARM,&COL=RED,&ML=             88206\n         GBLC  &@DEV@                                            88192\n         GBLA  &MDL70                                            88220\n         LCLC  &LE                                               88206\n         LCLA  &L,&W                                             88192\n&W       SETA  80+(&MDL70/5)*52                                  88220\n&L       SETA  K'&TEXT-3                                         88192\n&LE      SETC  '&LABEL'(1,3).'END'.'&LABEL'(7,2)                 88206\n         AIF   ('&TYPE' EQ '').KEEP                              88192\n&@DEV@   SETC  '&TYPE'                                           88192\n.KEEP    AIF   ('&@DEV@' EQ '3767').DO67                         88192\n         AIF   ('&@DEV@' EQ '3270').DO70                         88206\n         AIF   ('&@DEV@' EQ '327E').DO7E                         88206\n         AIF   ('&@DEV@' EQ 'CON').DOCON                         88192\n         AIF   ('&@DEV@' EQ 'SYN').DOSYN                         88192\n         MNOTE 4,'TYPE= REQUIRED'                                88192\n.DO67    AIF   ('&ML' NE '').DO67L                               88206\n&LABEL   DC    AL2(2+&L+2+2+8),X'0D25',&TEXT,X'0D25',C'Enter ? ' 88192\n         MEXIT ,                                                 88192\n.DO67L   ANOP  ,                                                 88206\n&LABEL   DC    AL2(2+&L+2+2+8),X'0D25'                           88206\n&ML      DC    &TEXT,X'0D25',C'Enter ? '                         88206\n         MEXIT ,                                                 88192\n.DOCON   AIF   ('&ML' NE '').DOCONL                              88206\n&LABEL   DC    AL2(&L+2),&TEXT                                   88192\n         MEXIT ,                                                 88192\n.DOCONL  ANOP  ,                                                 88192\n&LABEL   DC    AL2(&L+2)                                         88206\n&ML      DC    &TEXT                                             88206\n         MEXIT ,                                                 88192\n.DOSYN   AIF   ('&ML' NE '').DOSYNL                              88206\n&LABEL   DC    AL2(&L),&TEXT                                     88192\n         MEXIT ,                                                 88206\n.DOSYNL  ANOP  ,                                                 88206\n&LABEL   DC    AL2(&L)                                           88206\n&ML      DC    &TEXT                                             88206\n         MEXIT ,                                                 88206\n.DO70    ANOP  ,                                                 88206\n&LABEL   DC    YL2(&LE-*)                                        88206\n         $IO   WRITE                                             88206\n         $WCC  (&WCC,RESETKBD,MDT)                               88206\n         $SBA  (23,1)             CLEAR                          88206\n         $EUA  (23,1)               OLD                          88206\n         $IC   ,                      INPUT BUFFER               88206\n         $SBA  (24,16)                                           88206\n         $SF   (HI,PROT)                                         88206\n&ML      DC    &TEXT                                             88206\n         $RA   (24,&W,X'00')      CLEAR REST OF MSG BUFFER       88206\n&LE      EQU   *                                                 88206\n         MEXIT ,                                                 88206\n.DO7E    ANOP  ,                                                 88206\n&LABEL   DC    YL2(&LE-*)                                        88206\n         $IO   WRITE                                             88206\n         $WCC  (&WCC,RESETKBD,MDT)                               88206\n         $SBA  (23,1)             CLEAR                          88206\n         $EUA  (23,1)               OLD                          88206\n         $IC   ,                      INPUT BUFFER               88206\n         $SBA  (24,12)                                           88206\n         $SFE  ATTR=PROT,COL=&COL                                88206\n&ML      DC    &TEXT                                             88206\n         $RA   (24,&W,X'00')      CLEAR REST OF MSG BUFFER       88206\n&LE      EQU   *                                                 88206\n.MEND    MEND                                                    88192\n         SPACE 1                                                 88207\n         MACRO ,                                                 88207\n&NM      CHELP &R=17,&C=59,&COLOR=YELLOW                         88207\n         GBLC  &@DEV@        PASSED THROUGH                      88207\n         LCLA  &I                                                88207\n         $SBA  (&R,&C)                                           88207\n&I       SETA  &R+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'*------------------*'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'|                  |'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'|  For assistance  |'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'|    type HELP     |'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'|                  |'                           88207\n         $SBA  (&I,&C)                                           88207\n&I       SETA  &I+1                                              88207\n         $SFE  ATTR=SKIP,COL=&COLOR                              88207\n         DC    C'*------------------*'                           88207\n         MEND  ,                                                 88207\n         SPACE 1                                                 88220\n         MACRO ,                                                 88220\n&NM      $SCRN &N,&TYPE=,&IO=ERASE/WRITE                         88220\n         GBLC  &@DEV@                                            88220\n         GBLA  &MDL70                                            88220\n         LCLA  &W                                                88220\n         LCLC  &P                                                88220\n&P       SETC  '&NM'(1,3)                                        88220\n&W       SETA  80+(&MDL70/5)*52                                  88220\n         AIF   ('&TYPE' EQ '').NOGTYP                            88220\n&@DEV@   SETC  '&TYPE'                                           88220\n.NOGTYP  ANOP  ,                                                 88220\n&P.MSG&N DC    YL2(&P.END&N-*)                                   88220\n         $IO   &IO           ERASE/WRITE OR ERASE/WRITE-ALT      88220\n         $WCC  (RESETKBD,MDT)                                    88220\n         $SBA  (1,1)              ADDRESS 1ST BYTE ON SCREEN     88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n&P.NSN&N LOGO  ML=&P.TIM&N   EXPAND THE LOGO                     88220\n         $SBA  (12,&W)                                           88220\n         $SFE  ATTR=(HI,SKIP),COL=PINK XHL=UNDER                 88220\n&P.MUS&N DC    CL58' '       MESSAGE TO THE USER                 88220\n         $SBA  (12,61)                                           88220\n         $SFE  ATTR=SKIP,COL=BLUE                                88220\n         DC    C'  System: ' IDENTIFY THE RUNNING SYSTEM         88220\n         $SBA  (12,71)                                           88220\n         $SFE  ATTR=PROT,COL=TURQ                                88220\n&P.SID&N DC    CL8' '        SMCA ID                             88220\n         $SBA  (13,61)                                           88220\n         $SFE  ATTR=SKIP,COL=RED                                 88220\n         DC    C'Terminal: '      TELL USER THE NODE NAME        88220\n         $SBA  (13,71)                                           88220\n         $SFE  ATTR=PROT,COL=PINK,XHL=UNDER                      88220\n&P.TID&N DC    CL13' '            TERM NAME                      88220\n         $SBA  (14,1)             DEFINE END OF FIELD TO RESET BLINKING\n         $SFE  ATTR=SKIP                                         88220\n         AIF   ('&N' EQ '20').SCRN20                             88220\n         AIF   ('&N' EQ '13').SCRN13                             88220\n         SPACE 1                                                 88220\n***********************************************************************\n*                                                                     *\n*        PF KEY SELECTION MENU - SCREEN 12                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 88220\n         $SBA  (15,6)                                            88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         DC    C'PFK  APPL          ENTER         EXIT'          88220\n         $SBA  (17,6)                                            88220\n         $SFE  ATTR=SKIP,COL=YELLOW                              88220\n         DC    C'  1  TSO           LOGON         LOGOFF'        88220\n         $SBA  (18,6)                                            88220\n         $SFE  ATTR=SKIP,COL=PINK                                88220\n         DC    C'  2  CICS          CICS          CSSF LOGOFF'   88220\n         $SBA  (19,6)                                            88220\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'  3  SuperWYLBUR   SWYL          LOGOFF     '   88220\n         $SBA  (20,6)                                            88220\n         $SFE  ATTR=SKIP,COL=BLUE                                88220\n         DC    C'  4  WYLBUR        WYLBUR        LOGOFF'        88220\n         $SBA  (21,6)                                            88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         DC    C'  5  EXHIBIT       EXH           LOGOFF'        88220\n         AGO   .SCRNIN                                           88220\n.SCRN13  SPACE 1                                                 88220\n***********************************************************************\n*                                                                     *\n*        'CENTER CLOSED' MESSAGE - SCREEN 13                          *\n*                                                                     *\n***********************************************************************\n         $SBA  (15,1)                                            88220\n         $SFE  ATTR=SKIP,COL=YELLOW                              88220\n         CLOGO ,             AND THE NASTY MESSAGE               88220\n.SCRNIN  $SBA  (22,&W)                                           88220\n         $SFE  ATTR=UNPROT,COL=WHITE                             88220\n         $IC   ,                                                 88220\n         AGO   .SCRNEND                                          88220\n.SCRN20  SPACE 1                                                 88220\n***********************************************************************\n*                                                                     *\n*        USER ID / PASSWORD / ACCOUNT SOLICITATION - SCREEN 20        *\n*                                                                     *\n***********************************************************************\n         $SBA  (15,1)                                            88220\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'> > > > > > > > > > > >'                        88220\n         $SFE  ATTR=SKIP,COL=WHITE                               88220\n         DC    C'VTAM'                                           88220\n         $SFE  ATTR=SKIP,COL=YELLOW                              88220\n         DC    C'Sign-on'                                        88220\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'< < < < < < < < < < < <'                        88220\n         $SBA  (17,11)                                           88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         DC    C' User-Id'                                       88220\n         $SFE  ATTR=UNPROT,COL=WHITE                             88220\n         $IC   ,                                                 88220\n         $SBA  (17,29)                                           88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         $SBA  (18,11)                                           88220\n         $SFE  ATTR=SKIP,COL=TURQ                                88220\n         DC    C'Password'                                       88220\n         $SF   (UNPROT,NONDISP)                                  88220\n         $SBA  (18,29)                                           88220\n         $SFE  ATTR=SKIP,COL=GREEN                               88220\n         $SBA  (20,11)                                           88220\n         $SFE  ATTR=SKIP,COL=PINK                                88220\n         DC    C' Account'                                       88220\n         $SFE  ATTR=UNPROT,COL=YELLOW                            88220\n         $SBA  (20,29)                                           88220\n         $SFE  ATTR=SKIP,COL=BLUE      WAS =PROT                 88252\n         DC    C' (optional - specify to set'                    88220\n         $SBA  (21,29)                                           88220\n         $SFE  ATTR=SKIP,COL=BLUE                                88220\n         DC    C'  global TSO/WYLBUR logon)'                     88220\n         $SBA  (22,&W)                                           88220\n         $SFE  ATTR=UNPROT,COL=WHITE                             88220\n.SCRNEND $SBA  (24,1)        DEFINE END OF INPUT FIELD           88220\n         $SFE  ATTR=PROT,COL=YELLOW  END OF INPUT FIELD          88220\n         $SBA  (24,17)                                           88220\n         DC    C'Please issue LOGOFF when you are finished'      88220\n         CHELP ,             ADD HELP PROMPT                     88220\n&P.END&N EQU   *                                                 88220\n&P.SIZ&N EQU   &P.END&N-&P.MSG&N                                 88220\n         MEND  ,                                                 88220\n         SPACE 1\n         COPY $3270INT\n         SPACE 1\n         COPY  OPTIONGB                                          84141\n         SPACE 1                                                 84141\n         SYSPARM LIST=YES                                        84141\n         AIF   ('&LOCAL' NE 'CCSI').TEMPFIX  *****TEMP FIX*****  92320\n&LOCAL   SETC  'ESP'                         *****TEMP FIX*****  92320\n.TEMPFIX ANOP  ,                             *****TEMP FIX*****  92320\n         EJECT ,                                                 86012\n***********************************************************************\n*                                                                     *\n*                  *****************                                  *\n*                                                                     *\n*                    N E T W O R K                                    *\n*                                                                     *\n*                  S O L I C I T O R                                  *\n*                                                                     *\n*                   ( N E T S O L )                                   *\n*                                                                     *\n*                                                                     *\n*  ENTRY PARAMETERS:  R15  -  ENTRY POINT ADDRESS                     *\n*                     R13  -  CALLER'S SAVE AREA (FROM ATTACH)        *\n*                     R14  -  RETURN ADDRESS (POINTS TO SVC 3 IN CASE *\n*                             OF ATTACH BY NET)                       *\n*                     R0-R12  NOT USED                                *\n*                                                                     *\n*  EXIT PARAMETERS:   R0-R14  SAME AS ENTRY TO NETSOL                 *\n*                     R15     ZERO                                    *\n*                                                                     *\n*  FUNCTION:  NETSOL IS USED TO HANDLE TERMINAL INITIATED LOGONS      *\n*             AND AS SUCH SOLICITS LOGON DATA FROM THE TERMINALS      *\n*             UNDER ITS CONTROL.                                      *\n*                                                                     *\n*             WITH THE ABOVE DATA, NETSOL CAN PASS CONTROL OF THE     *\n*             LOGICAL UNIT FROM NETSOL'S CONTROL TO THAT OF THE       *\n*             REQUESTED APPLICATION.                                  *\n*                                                                     *\n*             TO FACILITATE ENDUSER EASE OF USE, NETSOL HAS A TABLE   *\n*             OF APPLICATIONS THAT USE NON-STANDARD LOGMODE TABLE     *\n*             ENTRIES. WHEN THE USER REQUESTS ONE OF THESE            *\n*             APPLICATIONS, NETSOL LOADS THE APPROPRIATE LOGMODE      *\n*             NAME FROM THE TABLE AND PASSES THIS INFORMATION         *\n*             TO THE APPLICATION DURING THE CLSDST(PASS). THE ENDUSER *\n*             IS NOT REQUIRED TO KNOW ABOUT LOGMODE TABLES. THE       *\n*             NAME OF THIS TABLE IS 'LOGMDTAB'.                       *\n*                                                                     *\n*             THE 'LOGOFF' COMMAND HAS BEEN ADDED TO NETSOL TO ALLOW  *\n*             8100-ATTACHED TERMINALS TO DISCONNECT FROM NETSOL. 8100 *\n*             TERMINALS ARE GENNED WITH A NULL 'LOGAPPL'. LOGOFF     .*\n*             ENTERED AT A STANDARD 3270 TERMINAL, WILL HAVE NO       *\n*             EFFECT SINCE LOGAPPL=NETSOL FOR THESE TERMINALS.        *\n*                                                                     *\n*             ERROR MESSAGES CAN BE ISSUED AT VARIOUS STAGES OF THIS  *\n*             PROCESS IF THE APPLICATION IS INACTIVE, LOGON DATA      *\n*             ENTERED IS INVALID, APPLICATION WON'T ACCEPT LOGONS,ETC.*\n*             ALL ERROR MESSAGES ISSUED BY NETSOL ARE PREFIXED WITH   *\n*             THE CHARACTER STRING 'BCSC'.                            *\n*                                                                     *\n*             TO AID IN DEBUGGING, NETSOL ALSO WRITES SOME MESSAGES   *\n*             TO THE OPERATORS CONSOLE WHEN ERRORS AE DETECTED AS A   *\n*             RESULT OF I/O ERRORS, INVALID LOGONS, ETC.              *\n*                                                                     *\n*             NETSOL SUPPORTS BISYNC AND SDLC 3270 DEVICES (3275,     *\n*             3276, 3277, 3278, 3279 AND COMPATIBLES). ADDITIONAL     *\n*             CODE WAS ADDED FOR TERMINALS (TTY, ETC.) RUNNING UNDER  *\n*             THE NUTTY TERMINAL OPTION (NTO) AS IBM 3767 TYPES.      *\n*                                                                     *\n*             NETSOL USES RECORD MODE I/O TO TALK TO ITS TERMINALS    *\n*             SO IT DOES NOT SUPPORT ANY TERMINALS THAT CAN BE        *\n*             ACCESSED VIA BASIC MODE I/O ONLY.                       *\n*                                                                     *\n*             TO AID IN CONTROLLING THE TERMINALS LOGGED ON TO        *\n*             NETSOL, NETSOL MAINTAINS A TERMINAL TABLE WHICH HAS     *\n*             AN ENTRY FOR EACH TERMINAL THAT HAS BEEN LOGGED ON      *\n*             AT ANY TIME SINCE NETSOL WAS FIRST BROUGHT UP. THESE    *\n*             TERMINAL TABLE ENTRIES (TTE'S) ARE USED TO PROVIDE      *\n*             A MEANS OF TRANSLATING A GIVEN CID TO THE LU NAME AND   *\n*             WHEN THE RELEASE-REQUEUE (RELREQ) EXIT NEEDS TO KNOW    *\n*             THE STATUS OF A GIVEN TERMINAL (I.E., IS IT TRYING TO   *\n*             DO A LOGON). THE TTE HAS BEEN EXTENDED TO PRESERVE OTHER*\n*             INFORMATION (AUTHORIZATION, ETC.).                      *\n*                                                                     *\n*             CODE WAS ADDED TO PROVIDE A HELP SCREEN, A NEWS SCREEN, *\n*             AND MEANS OF PROVIDING ACCESS CONTROL (LOCK FOR SYSTEMS *\n*             MAINTENANCE; GLOBAL LOGON CONTROL).                     *\n*                                                                     *\n*             MOST OF NETSOL'S FUNCTIONS ARE PERFORMED IN VARIOUS     *\n*             EXITS AS FOLLOWS:                                       *\n*                                                                     *\n*             1) TPEND EXIT        - HANDLE 'Z NET' FUNCTION          *\n*                                    WHERE NETSOL IS TO SHUT DOWN.    *\n*                                                                     *\n*             2) LOGON EXIT        - HANDLES TERMINALS BEING LOGGED   *\n*                                    ON TO NETSOL. BUILDS OR UPDATES  *\n*                                    TTE, DOES OPNDST(ACCEPT), AND    *\n*                                    SENDS THE FORMATTED LOGON SCREEN *\n*                                    TO THE TERMINAL.                 *\n*                                                                     *\n*             3) LOSTERM EXIT      - HANDLE 'LOST TERMINAL' CONDITIONS*\n*                                    DUE TO LU/PU/LINK/NCP FAILURES.  *\n*                                    DEPENDING ON THE CONDITION, MAY  *\n*                                    ATTEMPT TO RECOVER THE TERMINAL. *\n*                                                                     *\n*             4) RELREQ EXIT       - HANDLE RELEASE-REQUEUE REQUESTS  *\n*                                    WHERE ANOTHER VTAM APPLICATION   *\n*                                    WANTS THE TERMINAL OWNED BY      *\n*                                    NETSOL. UNLESS A LOGON IS TAKING *\n*                                    PLACE, NETSOL RELEASES THE LU.   *\n*                                                                     *\n*             AS WELL, A NUMBER OF RPL EXITS ARE USED TO HANDLE       *\n*             RPL COMMANDS THAT ARE DONE ASYNCHRONOUSLY VIA RPLS      *\n*             THAT ARE GETMAINED WHEN NEEDED. THESE EXITS ARE:        *\n*                                                                     *\n*             1) OPNDST END EXIT   - ENTERED WHEN AN ASYNCHRONOUS     *\n*                                    OPDNST TO A SPECIFIC TERMINAL    *\n*                                    COMPLETES.                       *\n*                                                                     *\n*             2) RECEIVE END EXIT  - ENTERED WHEN A RECEIVE(ANY) RPL  *\n*                                    IS POSTED COMPLETE. EXAMINES THE *\n*                                    DATA ENTERED FOR A LOGON REQUEST *\n*                                    FROM THE TERMINAL USER.          *\n*                                                                     *\n*             3) END OF SEND EXIT  - ENTERED WHEN AN ASYNCHRONOUS     *\n*                                    SEND TO THE TERMINAL COMPLETES.  *\n*                                                                     *\n*             4) CLSDST(PASS) END  - ENTERED WHEN THE CLSDST(PASS)    *\n*                                    COMPLETES THAT PASSES CONTROL    *\n*                                    TO THE APPLICATION REQUESTED.    *\n*                                    NETSOL RE-ISSUES SIMLOGON TO     *\n*                                    GAIN CONTROL BACK WHEN USER      *\n*                                    LOGS OFF THE APPLICATION         *\n*                                                                     *\n*             5) CLSDST(RELEASE)   - ENTERED WHEN CLSDST(RELEASE)     *\n*                                    COMPLETES. DONE DUE TO RELREQ    *\n*                                    REQUEST OR I/O ERRORS.           *\n*                                                                     *\n*             AS WELL, NETSOL MAKES USE OF A NUMBER OF SUBROUTINES    *\n*             AS FOLLOWS:                                             *\n*                                                                     *\n*             1) GETRPL            - OBTAIN DYNAMIC RPLS VIA A        *\n*                                    GETMAIN FROM SUBPOOL 1           *\n*                                                                     *\n*             2) FREERPL           - FREEMAIN DYNAMIC RPLS            *\n*                                                                     *\n*             3) RECSUB            - ISSUE RECEIVE ANY'S              *\n*                                                                     *\n*             4) ERROR EXIT        - HANDLES ERRORS WHEN A CHECK      *\n*                                    MACRO IS USED ON AN ASYNC RPL    *\n*                                    OR A SYNC RPL COMPLETES. PASSES  *\n*                                    BACK RETURN CODES AND A MODIFIER *\n*                                    (USUALLY ERROR MESSAGE NUMBER)   *\n*                                    TO CODE AFTER THE INSTRUCTION    *\n*                                    THAT MADE THE MACRO CALL         *\n*                                                                     *\n*                                                                     *\n*  REGISTER USAGE:                                                    *\n*                                                                     *\n*         R0  - ERROR MESSAGE NUMBER, PARAMETERS, SVCS, ETC           *\n*         R1  - PARAMETERS TO MACROS, SVCS                            *\n*         R2  - WORK                                                  *\n*         R3  - -> TTE IN MOST CASES / WORK                           *\n*         R4  - WORK                                                  *\n*         R5  - -> DYNAMIC RPL / SYNCHRONOUS RPL                      *\n*         R6  - WORK                                                  *\n*         R7  - WORK  (ADDRESS OF ERROR SOMETIMES ON BAL R7,SNOCCUR)  *\n*         R8  - -> ASYNCHRONOUS / SYNCHRONOUS NIB                     *\n*         R9  - -> DDT WHEN DOING DEVICE DEP WORK / WORK              *\n*         R10 - BASE REGISTER 3                                       *\n*         R11 - BASE REGISTER 2                                       *\n*         R12 - BASE REGISTER 1                                       *\n*         R13 - ADDRESS OF SAVE AREA (USUALLY IN DYNAMIC RPL)         *\n*         R14 - RETURN ADDRESS                                        *\n*         R15 - ENTRY POINT, RETURN CODES                             *\n*                                                                     *\n*                                                                     *\n*  ATTRIBUTES: SERIALLY REUSABLE , NON-AUTHORIZED, VTAM APPLICATION   *\n*                                                                     *\n*  CONTROL BLOCK DEPENDENCIES: RPL, ACB, NIB, EXIT PARAMETER LISTS    *\n*                                                                     *\n*  ROUTINES CALLED: NONE                                              *\n*                                                                     *\n*  ********* MACROS USED: DCLSW, GOIF, SET, RESET, EXECUTE            *\n*                                                                     *\n*  SYSTEM MACROS USED: SAVE, GETMAIN, FREEMAIN, STIMER, OPEN,         *\n*                      WAIT, WTO, CLOSE, ABEND, POST, CHECK           *\n*                                                                     *\n*  VTAM MACROS USED:  SETLOGON, OPNDST, INTRPRET, INQUIRE,            *\n*                     GENCB, CLSDST, SIMLOGON, SEND, RECEIVE          *\n*                                                                     *\n*  MESSAGES TO TERMINAL USER:                                         *\n*                                                                     *\n*             LOGON SCREEN WITH BCSC LOGO.                            *\n*                                        ENTERED BY THE TERMINAL USER)*\n*                                                                     *\n*             BCSC101          LOGMODE ENTRY UNDEFINED                *\n*                                                                     *\n*             BCSC102 INVALID LOGON SEQUENCE , REENTER                *\n*                                                                     *\n*             BCSC103 NO INTERPRET TABLE SPECIFIED FOR LU             *\n*                                                                     *\n*             BCSC104 NO INTERPRET ROUTINE TO RECOGNIZE APPLICATION   *\n*                                                                     *\n*             BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION          *\n*                                                                     *\n*             BCSC106 LOGON IN PROGRESS                               *\n*                                                                     *\n*             BCSC107 XXXXXXXX NOT DEFINED TO VTAM                    *\n*                                                                     *\n*             BCSC108 XXXXXXXX IS NOT AVAILABLE (LOGMODE INVALID?)    *\n*                                                                     *\n*             BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS             *\n*                                                                     *\n*             BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS                 *\n*                                                                     *\n*             BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS       *\n*                                                                     *\n*                                                                     *\n*  MESSAGES TO THE SYSTEM OPERATOR:                                   *\n*                                                                     *\n*             BCSC001 TERM=******** HAS BEEN RELEASED BY NETSOL       *\n*                     DUE TO I/O ERROR                                *\n*                                                                     *\n*             BCSC002 RC=42 ON NETSOL CLOSE ACB                       *\n*                                                                     *\n*             BCSC003 SYNAD/LERAD EXIT REQ=**,FBDK2=**,SSENSEI=**,    *\n*                     SSENSMI=**,SENSE=****,TERM=********             *\n*                                                                     *\n*             BCSC004 LOSTERM ENTRY CODE ** FOR TERM=********         *\n*                                                                     *\n*             BCSC005 TERM=******** RELEASED DUE TO RELREQ REQUEST    *\n*                                                                     *\n*             BCSC006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS    *\n*                     PROGRAM IS TERMINATED.                          *\n*                                                                     *\n*             BCSC007 TERM=******** NOT RELEASED BY RELREQ EXIT       *\n*                                                                     *\n*  USER ABEND CODES:  U0001 - PROBLEM WITH OPEN OF THE ACB            *\n*                     U0002 - SETLOGON FAILED                         *\n*                     U0004 - RETURN CODE/SENSE CODE NOT EXPECTED     *\n*                     U0008 - PROBLEM WITH THE TERMINAL TABLE (TTE)   *\n*                                                                     *\n*                                                                     *\n*  RESTRICTIONS:                                                      *\n*                                                                     *\n*        1) THE TERMINAL TABLE ONLY HAS ROOM FOR 1024 TERMINALS,      *\n*           IF MORE ARE NEEDED, THE CONSTANT 'TERMLTAB' WILL HAVE TO  *\n*           BE CHANGED WITH A ZAP OR BY RE-ASSEMBLY OF NETSOL.        *\n*                                                                     *\n*        2) ONLY RECORD MODE DEVICES ARE CURRENTLY SUPPORTED.         *\n*                                                                     *\n*        3) DEVICE SUPPORT IS RESTRICTED TO 3270 DATASTREAMS AND      *\n*           NTO (IBM 3767) TYPES.                                     *\n*                                                                     *\n*        4) ANY FIELDS IN THE RPL WORK AREA THAT NEED TO BE ZERO      *\n*           INITIALLY SHOULD BE PLACED AHEAD OF THE I/O AREAS AS      *\n*           THESE ARE NOT INITIALIZED. IF THE AMOUNT TO BE            *\n*           INITIALIZED EXCEEDS 256 BYTES, THE INITIALIZATION AND     *\n*           COPY CODE IN GETRPL AND ERREXIT WILL HAVE TO BE CHANGED.  *\n*                                                                     *\n*        5) NETSOL ASSUMES THAT IT CAN ONLY HAVE ITS LOSTERM EXIT     *\n*           ENTERED FOR TERMINALS WHOSE CID'S CAN BE FOUND IN THE     *\n*           TERMINAL TABLE. A U0008 ABEND WILL OCCUR IF NOT FOUND.    *\n*                                                                     *\n*        6) NETSOL OBTAINS THE SYSTEM ID FOR CHANGING '***OLT**'      *\n*           APPLICATION IDS USING SVC 253. IF THIS FUNCTION CHANGES,  *\n*           NETSOL WILL NEED REVISION.     ???? BCSC GOODIE ????      *\n*                                                                     *\n*        7) BE CAREFUL OF CHANGING CODE THAT SETS BRACKET STATES AS   *\n*           YOU MAY CAUSE ERRORS ON THE 3276 (MUST SEND BCSC106 WITH  *\n*           AND END BRACKET BECAUSE IF THE CLSDST(PASS) FAILS AND WE  *\n*           SEND AN ERROR MESSAGE (BCSC108) TO THE 3276, GET A X'0404'*\n*           WITH A SENSE OF '081B' INDICATING BAD STATE).             *\n*                                                                     *\n*                                                                     *\n*  VERSION:  *********  NETSOL   DC18202                              *\n*                                                                     *\n*  LAST UPDATE: FEB 27, 1979\n*        MINOR FIXES AND CHANGES, 522 ABEND PREVENTION, ETC.     85234\n*          BY G. POSTPISCHIL, EXPERT SYSTEM PROGRAMMING, INC.    85234\n*        SNA AND NTO SUPPORT; MODULE MERGED WITH INTERPRET TABLE 87193\n*        SUPPORT FOR GLOBAL LOGON AND REQUIRED NETSOL LOGON PRIOR TO\n*        APPLICATION CONNECTION. NEWS AND HELP SCREENS ADDED.    88179\n*        MODEL 5, AND USER SPECIFIABLE LOGMODE SUPPORT ADDED     88206\n*        522 ABEND CODE CHANGED TO RUN UNDER SUBTASK IN ORDER TO FREE\n*          STIMER FOR LOGON DELAY TO PREVENT VTAM GOING CPU BOUND AT\n*          SYSTEM START-UP TIME.                                 89261\n*                                                                     *\n*                                                                     *\n*        F O R   F U R T H E R   I N F O R M A T I O N   O N          *\n*          T H I S   P R O D U C T   S E E   T H E                    *\n*              N E T S O L   D O C U M E N T A T I O N                *\n*                                                                     *\n*   PROGRAM OBTAINED FROM THE CONNECTICUT BANK & TRUST TAPE, FILE 19  *\n***********************************************************************\n         TITLE '*********  N E T S O L  -  MAINLINE'\nNETINTAB INTAB ,             INTEGRATED INTERPRET TABLE          87193\nNETINLOG CSECT ,             IMMEDIATELY FOLLOWED BY LOGON CODE  90126\nNETSOL70 CSECT ,\n         ENTRY NETSOL        SOLICITOR ENTRY POINT               87193\n         SPACE 1\n***********************************************************************\n*        NETSOL MAIN-LINE CODE INITIALIZATION                         *\n*        REQUIRES OS/VS2 MVS RELEASE 3.7 + ACF/VTAM (SU 35+40)        *\n***********************************************************************\n         SPACE 1\n         PRINT &PRTSOR                                           85234\nNETSOL   B     STM-NETSOL(0,R15)  JUMP OVER APPL NAME            87193\nNSNAME   DC    AL1(8),CL8'NETSOL70'    LOGON APPLID NAME FOR NETSOL\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'//&SYSTIME/'        ASSEMBLY TIME\nSTM      STM   14,12,12(13)            SAVE REGISTERS\n         LR    R12,R15                 LOAD 1ST BASE REGISTER\n         USING NETSOL,R12,R11,R10      TELL ASSEMBLER\n         LM    R10,R11,RESTBASE        REST OF BASES\n         ST    R13,MAINSAVE+4          CHAIN SAVE AREAS\n         LR    R15,R13\n         LA    R13,MAINSAVE            POINT R13 TO NS SAVE AREA\n         ST    R13,8(,R15)             FORWARD SAVE AREA CHAIN\n         LA    R9,0(,R1)     CLEAN THE PARM LIST POINTER         86065\n         LTR   R9,R9         ANY PARM ?                          86065\n         BZ    NOPARM                                            86065\n         ICM   R9,15,0(R9)   ANY PARM ?                          86065\n         BZ    NOPARM        NO                                  86065\n         SLR   R8,R8                                             86065\n         ICM   R8,3,0(R9)    TEST PARM LENGTH                    86065\n         BNP   NOPARM                                            86065\n         OI    UFLAGS,UFGSYS  ***TEMP***                         86065\nNOPARM   EXTRACT COMMAD,FIELDS=(TIOT)  GET THE TIOT              88185\n         L     R15,COMMAD    GET THE TIOT                        88185\n         CLC   NSNAME+1(6),0(R15)  JOB(STC)NAME/PREFIX SAME ?    88185\n         BNE   GETCOMM       NO                                  88185\n         MVC   NSNAME+1(8),0(R15)  USE FULL JOBNAME AS APPLID    88185\nGETCOMM  EXTRACT COMMAD,FIELDS=(COMM)  GET CSCB POINTER          86065\n         L     R15,COMMAD    GET ECB POINTER                     86065\n         MVC   WAITECBS(4),0(R15)  SAVE COMM. ECB ADDRESS        86065\n         LA    R0,4(,R15)    POINT TO CIB ADDRESS FIELD          86065\n         QEDIT ORIGIN=(0),CIBCTR=2  ALLOW ONE MODIFY AT A TIME   86065\n         TESTAUTH FCTN=1     ARE WE AUTHORIZED ?                 88186\n         BXH   R15,R15,NOTAUTH   NO                              88186\n         SLR   R1,R1         CLEAR ECB ADDRESS                   88186\n         SYSEVENT TRANSWAP   DO \"DONTSWAP\" THE ELEGANT WAY       88186\n         BXLE  R15,R15,NOTAUTH  SKIP IF IT WORKED, ELSE          88186\n         WTO   'BCSC195 SYSEVENT TRANSWAP FAILED',ROUTCDE=11     88186\n         SLR   R1,R1                                             88186\n         SYSEVENT DONTSWAP   TRY A NORMAL DONTSWAP               88186\n         BXLE  R15,R15,NOTAUTH SKIP IF IT WORKED, ELSE           88186\n         WTO   'BCSC195 SYSEVENT DONTSWAP FAILED'                88186\nNOTAUTH  ICM   R0,15,A522TCB  RECURSION ?                        89264\n         BNZ   NOTAGAIN      YES                                 89264\n         IDENTIFY EPLOC=A522NAME,ENTRY=A522ER                    89261\n         ATTACH EPLOC=A522NAME,ECB=A522DONE                      89261\n         ST    R1,A522TCB       SAVE TCB ADDR FOR DETACH         89261\nNOTAGAIN DS    0H                                                89264\n         SPACE 1\n         USING IFGRPL,PTRRPL           => R P L\n         USING ISTDNIB,PTRNIB          => N I B\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE\n*        SPACE 1\n***********************************************************************\n*        OBTAIN SPACE FROM SUBPOOL 2 FOR THE TERMINAL TABLE. THIS     *\n*        TABLE IS USED TO MAINTAIN THE TERMINAL NAME, CID, AND LOGON  *\n*        STATUS FOR ALL TERMINALS CONNECTED TO NETSOL. BY USING THIS  *\n*        TABLE AND PROVIDING ENTRY ADDRESS IN THE RPL USER FIELD, WE  *\n*        SAVE ON HAVING TO DO CID TRANSLATES FOR NAMES.               *\n***********************************************************************\nGETTAB   L     R0,TERMLTAB             GET LENGTH FOR GETMAIN\n         ICM   R0,8,=X'02'             ADD SUBPOOL=2 TO IT\n         GETMAIN R,LV=(0)              GET SPACE FOR TABLE\n         ST    R1,TERMTABS             SAVE STARTING ADDRESS\n         A     R1,TERMLTAB             COMPUTE END ADDRESS\n         ST    R1,TERMTEND             SAVE IT TOO\n         S     R1,RANGEEND-4                                     88185\n         ST    R1,RANGEEND   SET END OF HIGH RANGE               88185\n         XC    TERMTABE,TERMTABE  RESTART TERMINAL LIST          87137\n         XC    CONSRPL,CONSRPL  CLEAR CONSOLE RPL ADDRESS        88192\n         SPACE 1\nRTRYOPEN DS    0H\n         SLR   R15,R15                 CLEAR RETURN-CODE REGISTER\n         OPEN  ACB                     CONNECT NETSOL TO VTAM\n         SPACE 1\n***********************************************************************\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *\n*   ERREXIT IS NOT ENTERED FOR OPEN ERROR.                            *\n***********************************************************************\n         CLI   ACB+X'31',X'52'         HALT IN PROGRESS ?\n         BE    CLSOK                   YES, END THE TASK\n         LTR   R15,R15                 SUCCESSFUL OPEN ?\n         BZ    OPENOK                  YES, ALLOW LOGONS TO HAPPEN\n         SPACE 1\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'58' WHICH CAN HAPPEN IF     *\n*        THE OPERATOR HAS STARTED A SECOND COPY OF NETSOL. IN THIS\n*        CASE, TELL THE OPERATOR ABOUT THE MISTAKE AND TERMINATE\n*        EXECUTION.                                                   *\n***********************************************************************\n         CLI   ACB+X'31',X'58'         APPLID ALREADY IN USE?\n         BNE   OPENA5A                 NO => CHECK NEXT ERROR\n         WTO   MF=(E,LISTWTO6)         LET OPERATOR KNOW\n         B     FREETTE                 FREE TTE TABLE AND END\n         SPACE 1\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'5A' WHICH CAN HAPPEN IF     *\n*        VTAM IS JUST COMING UP AND NETSOL'S APPLID IS NOT YET        *\n*        ACTIVE. IF THIS IS THE CASE, ISSUE A STIMER WAIT FOR\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n***********************************************************************\nOPENA5A  CLI   ACB+X'31',X'5A'         CAN'T OPEN ACB YET ?\n         BE    OPENLOOP                NO, REAL OPEN ERROR\n         SPACE 1\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'5C' WHICH CAN HAPPEN IF     *\n*        VTAM IS DOWN. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n***********************************************************************\n         CLI   ACB+X'31',X'5C'         CAN'T OPEN ACB YET ?\n         BE    OPENLOOP                NO, REAL OPEN ERROR\n         SPACE 1\n***********************************************************************\n*        CHECK FOR AN ACB ERROR CODE OF X'70' WHICH CAN HAPPEN IF     *\n*        NETSOL ABENDS AND IS RE-ATTACHED BY VTAM AND VTAM HAS NOT    *\n*        YET SUCCESSFULLY FINISHED CLEANUP PROCESSING FOR             *\n*        NETSOL'S ACB. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n***********************************************************************\n         CLI   ACB+X'31',X'70'         CAN'T OPEN ACB YET ?\n         BNE   OPENFAIL                NO, REAL OPEN ERROR\nOPENLOOP STIMER WAIT,BINTVL=WAIT1SEC   WAIT 1 SECOND, TRY AGAIN\n         B     RTRYOPEN                GO AND RETRY OPERATION\n         SPACE 1\nOPENOK   L     R7,=A(OPENIDS)                                    86145\n         BALR  R6,R7         INITIALIZE VERSION AND PROGRAM IDS  86145\n         SPACE 1                                                 86012\n***********************************************************************\n*        READ THE INITIALIZATION FILE CONTAINING NETSOL COMMANDS      *\n*        WHICH ESTABLISH AUTO LOGON,WTO MSG DEFAULTS,ETC.             *\n*        AN ASYNC RPL WILL BE USED WHEN PROCESSING THESE INIT CMDS.   *\n***********************************************************************\n*                                                                87256\n*        THIS INSERTION SETS A FLAG TO ENABLE DELAYS IN LOGON EXIT.\n*        THIS PERMITS OTHER JOBS TO RUN WHILE NETSOL IS WRITING THE\n*        INITIAL SCREENS TO A LARGE NUMBER OF CRTS               87256\n*                                                                87256\n         OI    UFLAGS,INITDLAY  SET FOR DELAY BETWEEN LOGONS     87256\n         SLR   R0,R0                                             89261\n         POST  A522CECB,(0)  POST CONTROL ECB                    89261\n         BAL   R14,GETRPL              GET RPL FOR INIT CMD USE.\n         L     R8,=A(READINIT)                                   88185\n         BALR  R14,R8        PROCESS INIT CMDS\n         BAL   R14,RECSUB              NOW REUSE RPL FOR RECEIVE\n         SPACE 1                                                 90140\n*        LOAD THE BUFFER COMPRESSION ROUTINE                     90140\n         XC    COMP3270,COMP3270  CLEAR THE ADDRESS              90140\n         DELETE EPLOC=NMCOMPR                                    90140\n         LOAD  EPLOC=NMCOMPR,ERRET=NOTCMP70                      90140\n         ST    R0,COMP3270   SET COMPRESSION ADDRESS             90140\nNOTCMP70 DS    0H            BYPASS FOR COMPRESSION              90140\n         EJECT\n***********************************************************************\n*        BEFORE ALLOWING LOGONS TO TAKE PLACE ISSUE 10 RECEIVE ANY'S  *\n*        SO WE CAN HANDLE UP TO 10 LOGONS AT A TIME. WHEN THE RECEIVE *\n*        EXIT IS SCHEDULED, IT WILL ALSO RE-ISSUE A RECEIVE ANY WITH  *\n*        A NEW GOTTEN RPL.                                            *\n***********************************************************************\n         SPACE 1\n         LA    R2,9                    # OF RPLS FOR RECEIVES\nGETLOOP  BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE\n         BAL   R14,RECSUB              ISSUE RECEIVE ANY\n         BCT   R2,GETLOOP              LOOP TILL TEN DONE\n         L     PTRRPL,=A(SETLRPL)  POINT TO RPL FOR WORKAREA     86065\n         SPACE 1\n***********************************************************************\n*        ISSUE SETLOGON WITH START OPTION TO ALLOW LOGONS TO TAKE     *\n*        PLACE. ANY LOGONS QUEUED FOR NETSOL WILL NOW DRIVE NETSOL'S  *\n*        LOGON EXIT.                                                  *\n***********************************************************************\n         SPACE 1\nSLOGON   SETLOGON RPL=(PTRRPL),        SYNCH OPERATION. ACT-           X\n               OPTCD=START             IVATE LOGON EXIT.\n         SPACE 1\n***********************************************************************\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.  IF          *\n*   ERREXIT WAS ENTERED, THE VTAM FEEDBACK CODE IN REG 0 WAS          *\n*   PLACED IN REG 15 BEFORE RETURNING TO THE MAINLINE NSI.            *\n*   ERREXIT DID NOT CHANGE THE RETURN CODES TO ACTION CODES.          *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX8                NEED TO REISSUE?\n         BE    SLOGON                  YES.  DO IT\n         LTR   R15,R15                 SETLOGON ACCEPTED ?\n         BNZ   SETLFAIL                NO, BRANCH\n         LTR   R0,R0                   VALID COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*    ALL FURTHER WORK IN NETSOL IS PERFORMED VIA ASYNCHRONOUS EXIT    *\n*    ROUTINES. THE MAINLINE CODE WAITS UPON AN ECB WHICH IS POSTED    *\n*    BY THE TPEND EXIT WHEN VTAM SHUTS DOWN NETSOL.                   *\n*        STIMER ADDED TO PREVENT 522 ABENDS                      85234\n***********************************************************************\n***********************************************************************\n*    ACTION OF NETSOL NOW PROCEEDS BY USE OF EXIT ROUTINES.           *\n*    THE FOLLOWING EXITS ARE SCHEDULED IN RESPONSE TO VTAM EVENTS:    *\n*                                                                     *\n*              TPEND   - VTAM SHUTS DOWN                              *\n*              LOGON   - A TERMINAL IS SIMULATED LOGGED ON TO NETSOL, *\n*                        OR IS PASSED TO NETSOL BY ANOTHER APPLICATION*\n*              LOSTERM - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *\n*                        IS DISCONNECTED (DIAL-LINE), OR 'VARY'ED TO  *\n*                        ANOTHER APPLICATION                          *\n*              RELREQ  - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *\n*                        IS REQUESTED BY ANOTHER APPLICATION          *\n*                                                                     *\n*     RPL EXITS -                                                     *\n*                                                                     *\n*             READEND  - THE OUTSTANDING READ(ANY) HAS BEEN SATISFIED *\n*             SENDEND  - A SEND HAS BEEN POSTED COMPLETE.             *\n*             OPENEND  - AN OPNDST HAS COMPLETED.                     *\n*             PASSEND  - CLSDST(PASS) HAS COMPLETED FOR A LOGON       *\n*                        REQUEST MADE FROM A TERMINAL.                *\n*             WRITEND  - END OF WRITE REQUEST.  WRITE WAS DUE         *\n*                        TO INVALID LOGON FROM THE TERMINAL.          *\n*             CDSTEND1 - CLSDST(RELEASE) COMPLETED.                   *\n***********************************************************************\n         SPACE 1\nWAITLOOP MVI   TIMEECB,0     RESET STIMER ECB                    85235\n         TM    UFLAGS,SHUTDOWN+UFGREST  CLOSE OR RESTART ?       86065\n         BNZ   WAITDONE      YES; KICK OUT                       86065\n*OLD*    STIMER REAL,EXITTIME,BINTVL==A(10*60*100)  WAIT 10 MINS 85234\n         WAIT  ECBLIST=WAITECBS  WAIT FOR TIMER OR FINISH        85234\n         TM    TIMEECB,X'40' TIMER EXPIRED ?                     85234\n         BNZ   WAITTESS      YES                                 85234\n         TTIMER CANCEL       ELSE CANCEL IT                      85234\n         B     WAITTESX                                          87256\nWAITTESS NI    UFLAGS,255-INITDLAY  RESET START-UP DELAY         87256\nWAITTESX TM    FINISECB,X'40'  FINISH POSTED ?                   85234\n         BNZ   WAITDONE      YES; GO TO FINISH UP                86065\n*        IF WE GOT HERE, THE COMMUNICATIONS ECB WAS POSTED.      86065\n*                                                                86065\n         L     R1,WAITECBS   GET THE CSCB COMM. ECB ADDRESS      86065\n         TM    0(R1),X'50'   WAS IT POSTED ?                     86065\n         BZ    WAITLOOP      NO; WAIT SOME MORE                  86065\n         BO    WAITDONE      STOP ISSUED                         86065\n         ICM   R5,15,CONSRPL  GET THE CONSOLE I/O WORK AREA      88192\n         BNZ   CONSGET       OK; INITIALIZED                     88192\n         BAL   R14,GETRPL    ELSE GET ONE                        88192\n         LA    R3,NIBDMPID   OVERLAY NIB FOR TTE                 88192\n         ST    R3,RPLUSFLD   MAKE COMMON LINK                    88192\n         XC    TERMTABL(TERMELEN),TERMTABL  CLEAR IT             88192\n         ST    R5,CONSRPL    REMEMBER THE RPL ADDRESS            88192\n         MVI   TERMFLAG,TERMCONS  FLAG THIS AS A CONSOLE TTE     88192\n         MVI   TERMFLG3,TPRIVY  SET PRIVILEGED FOR ALL COMMANDS  88192\n         L     R9,=A(DDTCONS)  POINT TO DEVICE DEPENDENT VECTOR TABLE\n         ST    R9,TERMDDT    SAVE IT                             88192\n         ST    R5,TERMCRPL   MAKE RPL POINTER                    88192\n         MVC   TERMNAME,=CL8' CONSOLE'  FOR DEBUGGING, ETC.      88192\nCONSGET  L     R2,COMMAD     GET ECB/CIB POINTER                 86065\n         ICM   R1,15,4(R2)   IS THERE A CIB ?                    86065\n         BZ    WAITLOOP      NO ?                                86065\n         USING CIB,R1        DECLARE IT                          86065\n         L     R9,TERMDDT    RELOAD DDT                          88192\n         L     R3,RPLUSFLD   RELOAD TTE                          88192\n         CLI   CIBVERB,CIBMODFY  MODIFY ?                        86065\n         BE    DOCIB         YES                                 86065\n         CLI   CIBVERB,CIBSTART  START ?                         86065\n         BNE   TOSSCIB       NO; IGNORE IT                       86065\nDOCIB    SLR   R15,R15                                           86065\n         ICM   R15,3,CIBDATLN  GET LENGTH OF DATA                86065\n         BNP   TOSSCIB       NONE ?                              86065\n         LR    R2,R15        SAVE LENGTH FOR EDITING             88192\n         LA    R14,CIBDATA   GET DATA                            88192\n         ICM   R15,8,=C' '   SET FOR BLANK FILL                  88192\n         LA    R0,IOAREA     POINT TO INPUT WORK AREA            88192\n         LA    R1,L'IOAREA   MAX LENGTH                          88192\n         LR    R6,R0         SAVE START FOR THE EDIT ROUTINE     88192\n         MVCL  R0,R14        COPY TO RPL INPUT AREA              88192\n         B     INTRPRET      GO TO COMMAND PARSE                 88192\n         SPACE 2                                                 88192\n***********************************************************************\n*                                                                     *\n*        MSG 'TEXT' - ADD A SHORT MESSAGE TO SCREENS 12, 13 AND 20    *\n*                                                                     *\n***********************************************************************\nCONSMSG  L     R14,GPDATAP   GET DATA\n         LH    R15,GPDATAL   GET LENGTH OF DATA\n         LTR   R15,R15       ANY DATA ?                          88220\n         BNP   CONSMSG2      NO; JUST CLEAR                      88220\nCONSMSG1 CLI   0(R14),C' '   BLANK OR NULL ?                     88220\n         BH    CONSMSG2      YES                                 88220\n         LA    R14,1(,R14)                                       88220\n         BCT   R15,CONSMSG1  SKIP LEADING BLANKS                 88220\nCONSMSG2 ICM   R15,8,=CL8' '   SET BLANK FILL                    86066\n         L     R0,=A(S32MUS12)                                   86066\n         LA    R1,L'S32MUS12                                     86066\n         MVCL  R0,R14        MAKE MESSAGE                        86066\n         L     R14,=A(S32MUS12)                                  86066\n         MVC   S32MUS13-S32MUS12(L'S32MUS12,R14),0(R14)          86068\n         L     R1,=A(S32MUS20)                                   88179\n         MVC   S32MUS20-S32MUS20(L'S32MUS12,R1),0(R14)           88179\n         L     R15,=A(S3EMUS12)                                  86066\n         MVC   0(L'S32MUS12,R15),0(R14)                          86066\n         MVC   S3EMUS13-S3EMUS12(L'S3EMUS12,R15),0(R14)          86068\n         L     R1,=A(S3EMUS20)                                   88179\n         MVC   S3EMUS20-S3EMUS20(L'S32MUS12,R1),0(R14)           88179\n         L     R15,=A(MD5MUS12)                                  88206\n         MVC   0(L'S32MUS12,R15),0(R14)                          88206\n         MVC   MD5MUS13-MD5MUS12(L'MD5MUS12,R15),0(R14)          88206\n         L     R1,=A(MD5MUS20)                                   88206\n         MVC   MD5MUS20-MD5MUS20(L'S32MUS12,R1),0(R14)           88206\n         TM    UFLAGS,INIT   START-UP ?                          90054\n         BNZ   SENDMSG4      RESPOND WITH GARBAGE MESSAGE        90054\n         B     CONSREST      SET TO RESTART                      88192\n         SPACE 1                                                 88192\n*        SET UNRESTRICTED (EXCEPT LOGON SCREENS) RUNNING MODE    88192\nCONSULOK TM    UFLAGS,UFGSYS  IN SYSTEMS MODE ?                  86065\n         BZ    OKCIB         YES; NO CHANGE                      86065\n         NI    UFLAGS,255-UFGSYS  RESET                          86065\n*        RESTART THE NETSOL TERMINAL ACQUISITION (FOR FORCED APPLID\n*          ROUTING AFTER AN APPLICATION STARTS UP - MODIFY COMMAND\n*          GETS ISSUED BY TSSO COMMAND SYSTEM.                   88192\n*                                                                88192\nCONSREST OI    UFLAGS,UFGREST+UFGIGNER   RESTART                 86065\n         B     OKCIB                                             86065\n*        PERMIT USE OF VTAM BY SYSTEMS STAFF ONLY (MAINTENANCE, ETC.)\nCONSLOCK TM    UFLAGS,UFGSYS  ALREADY IN SYSTEMS MODE ?          86065\n         BNZ   OKCIB         YES; LEAVE IT ALONE                 86065\n         OI    UFLAGS,UFGSYS+UFGREST+UFGIGNER   RESTART          86065\nOKCIB    L     R2,COMMAD     GET COMM AREA BACK                  88192\n         L     R1,4(,R2)     REGAIN CIB                          88192\n         SLR   R0,R0                                             86065\n         IC    R0,CIBCONID                                       86065\n         WTO   'OK',MCSFLAG=REG0                                 86065\nTOSSCIB  LA    R0,4(,R2)     ORIGIN                              86065\n         L     R1,4(,R2)     CIB ADDRESS                         86065\n         QEDIT ORIGIN=(0),BLOCK=(1)  FREE IT                     86065\n         B     WAITLOOP      GO FOR MORE                         86065\n         SPACE 1                                                 88192\nCONSSEND L     R1,SENDLEN    GET TEXT LENGTH                     88192\n         LA    R1,4(,R1)     PLUS RDW LENGTH                     88192\n         STCM  R1,3,IOAREA   MAKE RDW LENGTH                     88192\n         STCM  R1,12,IOAREA+2  ZERO FLAGS                        88192\n         L     R2,COMMAD     GET COMM AREA BACK                  88192\n         L     R1,4(,R2)     REGAIN CIB                          88192\n         SLR   R0,R0                                             88192\n         IC    R0,CIBCONID   GET CONSOLE ID                      88192\n         WTO   ,MF=(E,IOAREA),MCSFLAG=REG0  RESPOND TO CONSOLE   88192\n         B     TOSSCIB       FREE THE CIB                        88192\n         SPACE 2                                                 89261\n         PUSH  USING                                             89261\n         DROP  ,                                                 89261\n         USING NETSOL,R12,R11,R10      PASSED BY CALLER          89261\n         USING A522ER,R12                                        89261\nA522ER   STM   R14,R12,12(R13)                                   89261\n         LR    R12,R15        LOAD NEW TEMPORARY BASE            89261\nA522UP   STIMER REAL,A522EXIT,BINTVL=A522TIME   START THE CLOCK  89261\n         WAIT  ECBLIST=A522ECBS  WAIT FOR SOMETHING              89261\n         TM    A522TECB,X'40'  TIMER ECB POSTED ?                89261\n         BNZ   A522TMUP      YES; RESET INITIALIZATION DELAY     89261\n         TTIMER CANCEL       CANCEL TIME REQUEST                 89261\n         B     A522CNTL      CHECK FOR ACTION                    89261\nA522TMUP NI    UFLAGS,255-INITDLAY  NO MORE DELAYS IN STARTUP    89261\n         MVI   A522TECB,0    RESET TIMER ECB                     89261\nA522CNTL TM    A522CECB,X'40'  CONTROL ACTION REQUIRED ?         89261\n         BZ    A522UP        NO; WAIT AGAIN                      89261\n         TM    A522CECB,X'3F'  RESTART REQUEST ?                 89261\n         BM    A522QUIT      NO                                  89261\n         MVI   A522CECB,0    RESET                               89261\n         B     A522UP        AND RESTART TIMER                   89261\n         SPACE 1                                                 89263\nA522QUIT LM    R14,R12,12(R13)  RETRIEVE REGISTERS               89261\n         SLR   R15,R15                                           89261\n         BR    R14           QUIT                                89261\n         SPACE 1                                                 89261\n         DROP  ,                                                 89261\n         USING A522EXIT,R15  DECLARE TEMPORARY BASE              89261\nA522EXIT POST  A522TECB,0    POST TIME INTERVAL COMPLETE         89261\n         BR    R14           RETURN TO CALLER                    89261\n         SPACE 1                                                 89261\nA522ECBS DC    A(A522CECB),X'80',AL3(A522TECB)                   89261\nA522CECB DC    F'0'          CONTROL ECB                         89261\nA522TECB DC    F'0'          STIMER ECB                          89261\nA522TCB  DC    A(0)              SUBTASK TCB ADDRESS             89261\nA522DONE DC    A(0)              SUBTASK ECB                     89261\nA522TIME DC    A(100*60*10)      A522 10 MINUTES                 89261\nA522NAME DC    CL8'OMIT522S'                                     89261\n         POP   USING                                             89261\n         SPACE 1                                                 85234\n         PUSH  USING                                             85234\n         DROP  ,                                                 85234\n         USING EXITTIME,R15  DECLARE TEMPORARY BASE              85234\nEXITTIME POST  TIMEECB,0     POST TIME INTERVAL COMPLETE         85234\n         BR    R14           RETURN TO CALLER                    85234\n         POP   USING                                             85234\n         SPACE 1                                                 85234\nWAITECBS DC    A(0,TIMEECB),X'80',AL3(FINISECB)  ECB LIST        86065\nTIMEECB  DC    F'0'          STIMER ECB                          85234\nA522POST DC    F'0'          A522 SUBTASK COMPLETION ECB         89261\nCOMMAD   DC    A(0)          EXTRACT COMM RESULT                 86065\nCONSRPL  DC    A(0)          ADDRESS OF RPL/TTE/DDT FOR CONSOLE I/O\n         EJECT\n***********************************************************************\n*        EXECUTION CONTINUES HERE WHEN ECB IS POSTED BY TPEND EXIT.   *\n***********************************************************************\n         SPACE 1\nWAITDONE SLR   R15,R15                 ZERO RC REG FOR CLOSE\n         TM    UFLAGS,UFGREST  RESTART ?                         86065\n         BNZ   *+8           YES; DON'T SET SHUTDOWN             86065\n         OI    UFLAGS,SHUTDOWN+UFGIGNER  INHIBIT ERRORS          86065\n         CLOSE ACB                     RELEASE CONNECTION WITH\n         SPACE 1\n***********************************************************************\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *\n*   ERREXIT IS NOT ENTERED FOR CLSDSTERROR.                           *\n***********************************************************************\n         SPACE 1\n         LTR   R15,R15                 DID THE CLOSE GO?\n         BZ    CLSOK                   YES, EXIT\n         CLI   ACB+X'31',0   WEIRD CLOSE COMPLETION ?            94031\n         BE    CLSOK         YES; IGNORE                         94031\n         CLI   ACB+X'31',X'42'         CLOSE COMPLETE?\n         BE    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         WTO MF=(E,LISTWTO1)           INFORM OPERATOR\n         SPACE 1\n***********************************************************************\n*        SINCE WE DON'T KNOW HOW MANY RPLS ARE OUTSTANDING (MAY BE    *\n*        MORE THAN 10), WE FREE THE WHOLE SUBPOOL OF RPLS AND DO THE  *\n*        SAME FOR THE TERMINAL TABLE AS WELL.                         *\n***********************************************************************\n         SPACE 1\nCLSOK    FREEMAIN R,SP=1               FREE DYNAMIC RPL SPACE\n         SPACE 1\nFREETTE  FREEMAIN R,SP=2               FREE TERMINAL TABLE SPACE\n         TM    UFLAGS,SHUTDOWN  FORCED DOWN ?                    86065\n         BNZ   FREETERM      YES; QUIT                           86065\n         TM    UFLAGS,UFGREST  RESTART WITH DIFFERENT MODE ?     86065\n         BZ    FREETERM      NO                                  86065\n         NI    UFLAGS,255-UFGREST-UFGIGNER   RESET               86065\n         B     NOPARM        RESTART FROM BEGINNING              86065\n         SPACE 1\n         SPACE 1\nFREETERM ICM   R2,15,A522TCB   DID WE ATTACH 522 SUBTASK ?       89261\n         BZ    FREEMAIN      NO; TERMINATE MAIN TASK             89261\n         ICM   R0,8,=X'01'   POST SUB-TASK TERMINATION           89261\n         POST  A522CECB,(0)                                      89261\n         WAIT  ECB=A522DONE  WAIT FOR RESPONSE                   89261\n         DETACH A522TCB      GET RID OF SUBTASK                  89261\nFREEMAIN L     R13,MAINSAVE+4          FIND INPUT SAVE AREA      89261\n         SLR   R14,R14                 CLEAR FORWARD SAVE\n         ST    R14,8(,R13)             AREA CHAIN PTR\n         LM    R14,R12,12(R13)         LOAD INPUT REGS\n         SLR   R15,R15                 RCODE=0 FOR NORMAL RTN\n*        RETURN\n         BR    14                      RETURN TO CALLER OR ATTACHER\n         SPACE 2                                                 90120\n***********************************************************************\n*        THE FOLLOWING CODE IS BRANCHED TO FROM THE MAIN-LINE CODE,   *\n*        EXIT CODE, AND FROM THE ERREXIT ROUTINE.  THE ONLY ACTION    *\n*        TAKEN SINCE THE CASES ARE 'SHOULD NOT OCCUR' CONDITIONS, IS  *\n*        TO ABNORMALLY TERMINATE NETSOL WITH A REASON CODE IN         *\n*        DUMPFLAG AND CAUSE A DUMP TO BE TAKEN.                       *\n***********************************************************************\n         SPACE 1\nOPENFAIL DS    0H                      OPEN-ACB IN MAIN-LINE FAILED\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         MVI   DUMPFLAG,OPENCODE       SAVE NETSOL DUMP CODE\n         B     DUMP                    BRANCH\n         SPACE 1\nSETLFAIL DS    0H                      SETLOGON IN MAIN-LINE FAILED\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         MVI   DUMPFLAG,SETLCODE       SAVE NETSOL DUMP CODE\n         B     DUMP                    BRANCH\n         SPACE 1\nSNOCCUR  DS    0H                      REQUEST FAILED BECAUSE\n*                                       OF AN INVALID CONTROL\n*                                       BLOCK OR OTHER CON-\n*                                       DITION WHICH SHOULD\n*                                       NOT OCCUR\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         CLOSE ACB                     AVOID OPEN FAILURE ON\n*                                      RE-DISPATCH OF SUBTASK\n         MVI   DUMPFLAG,CBLKCODE       SAVE NETSOL DUMP CODE\n         B     DUMP\n         SPACE 1\nTOOSMALL STM   R0,R15,SNOREGS          SAVE REGS\n         MVI   DUMPFLAG,TABLTRBL       TROUBLE WITH TTE\n*NEXT*   B     DUMP\n         SPACE 1\nDUMP     DS    0H                      TERMINATE WITH A DUMP\n         LA    R6,SNOREGS    POINT TO SAVED REGISTERS            91170\n         LA    R5,2          SET FOR TWO LINES                   91170\nSTABRLP  LA    R4,GENREG0    SET FIRST OUTPUT ADDRESS            91170\n         LA    R3,2          SET FOR TWO GROUPS OF FOUR          91170\nSTABRLP2 LA    R2,4          SET FOR FOUR REGISTERS              91170\nSTABRLP3 UNPK  0(9,R4),0(5,R6)  UNPACK A REGISTER                91170\n         TR    0(8,R4),HEXTAB-C'0'     MAKE EBCDIC               91170\n         MVI   8(R4),C' '    SEPARATOR                           91170\n         LA    R4,9(,R4)     NEXT OUTPUT ADDRESS                 91170\n         LA    R6,4(,R6)     NEXT REGISTER                       91170\n         BCT   R2,STABRLP3   DO NEXT REGISTER                    91170\n         LA    R4,1(,R4)     INTERGROUP GAP                      91170\n         BCT   R3,STABRLP2   DO NEXT GROUP                       91170\n         WTO   MF=(E,GENREGS)   WRITE TO CONSOLE                 91170\n         MVC   GENREGNM+3(3),=C'8-F'   IDENTIFY SECOND LINE      91170\n         BCT   R5,STABRLP    DO SECOND LINE                      91170\n         SLR   R1,R1                   PUT REASON CODE IN REG 1\n         IC    R1,DUMPFLAG\n         SPACE 1\n         ABEND (1),DUMP\n         SPACE 1                                                 85235\nMAINSAVE DC    18F'0'                  SAVE AREA FOR MAINLINE\nRESTBASE DC    A(NETSOL+8192,NETSOL+4096) REST OF BASE REG VALUES\nWAIT1SEC DC    F'100'                  WAIT TIME OF 1.00 SECS\nTERMTABS DC    A(0)                    START OF TERMINAL TABLE  FOR\nTERMTABI DC    A(TERMELEN)             INDEX VALUE              BXLE\nTERMTABE DC    A(0)                    LAST ENTRY USED ADDRESS  USE\nTERMTEND DC    A(0,TERMELEN)           END OF TABLE + 1\nRANGEEND DC    A(0)          END OF TABLES                       88185\nTERMLTAB DC    A(1024*TERMELEN)        SIZE OF TABLE (ENTRIES*LENGTH)\n@MODETAB DC    A(0)          ADDRESS OF MODE TABLE (ISTINCLM)    88213\nNMCOMPR  DC    CL8'COMP3270'  COMPRESSION ROUTINE                90140\nCOMP3270 DC    A(0)          ADDRESS OF COMPRESSION ROUTINE      90140\nHEXTAB   DC    C'0123456789ABCDEF'  HEX CONVERSION TABLE         91170\nGENREGS  DC    Y(GENREGND-*,0)                                   91170\nGENREGNM DC    C'GR 0-7  '                                       91170\nGENREG0  DC    CL8' ',C' ',CL8' ',C' ',CL8' ',C' ',CL8' ',CL2' ' 91170\nGENREG4  DC    CL8' ',C' ',CL8' ',C' ',CL8' ',C' ',CL8' '        91170\nGENREGND DC    C' '          EXTRA FOR UNPACK                    91170\nVTAMVERL DC    CL2' '        VTAM VERSION/RELEASE (CHAR)         92221\n         TITLE '*********  N E T S O L  - GETPARM SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*    GETPARM LOCATES THE NEXT TEXT UNIT IN THE COMMAND BUFFER.        *\n*                                                                     *\n*    THIS TEXT UNIT IS VALIDATED FOR:                                 *\n*         A) MAXIMUM LENGTH                                           *\n*         B) REQUIRED PARAMETER                                       *\n*                                                                     *\n*    INPUT : R1  - A(PARAMETER OPTION LIST)                           *\n*            R2  - A(OUTPUT MSG BUFFER)                               *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : R1  - A(TEXT UNIT) OR GARBAGE IF ERROR                   *\n*            R15 - LENGTH OF TEXT UNIT                                *\n*                                                                     *\n*   RETURN : 0(R14) - VALID TEXT UNIT FOUND                           *\n*            4(R14) - NO TEXT UNIT FOUND (IF PARAMETER IS OPTIONAL)   *\n*            8(R14) - ERROR DETECTED WHILE PROCESSING TEXT UNIT       *\n*                                                                     *\n***********************************************************************\nGETPARM  DS    0H\n         SPACE 1\n         ST    R1,GPPARM          SAVE A(PARM OPTION LIST)\n         SPACE 1\n*        CHECK FOR NO DATA LEFT IN COMMAND BUFFER\n         SPACE 1\n         LH    R6,GPDATAL         GET LENGTH OF REMAINING DATA\n         LTR   R6,R6              ANY DATA LEFT?\n         BZ    GPNODATA           NO => BR TO HANDLE\n         SPACE 1\n*        FIND NEXT TEXT UNIT IN COMMAND BUFFER\n         SPACE 1\n         L     R7,GPDATAP         LOAD A(CURRENT OFFSET IN CMD BUFFER)\nGRPLOOP1 CLI   0(R7),X'40'        FIND\n         BE    GRPBUMP1             FIRST                        88179\n         CLI   0(R7),C'/'    FUNNY FIELD SEPARATOR ?             88179\n         BE    GRPBUMP1      YES; SKIP IT                        88179\n         CLI   0(R7),C','    FUNNY FIELD SEPARATOR ?             88185\n         BE    GRPBUMP1      YES; SKIP IT                        88185\n         CLI   0(R7),X'11'   START FIELD ?                       88179\n         BNE   GPNONBLK      NO; PROCESS AS PARAMETER            88179\n         LA    R7,2(R7,0)    BUMP OVER ADDRESS                   88179\n         SH    R6,*-2        ADJUST LENGTH                       88179\n         BNP   GPNODATA      NOTHING LEFT                        88179\nGRPBUMP1 LA    R7,1(,R7)              NON                        88179\n         BCT   R6,GRPLOOP1              BLANK\n         B     GPNODATA                   CHARACTER\n         SPACE 1\n*        FIND END OF TEXT UNIT\n         SPACE 1\nGPNONBLK LR    R1,R7              SET TEXT UNIT PTR\nGPLOOP2  CLI   0(R7),X'40'        FIND\n         BE    GPGOTIT              LAST\n         CLI   0(R7),X'11'  ANOTHER START FIELD ?                88179\n         BE    GPGOTIT       YES; END OF PRIOR FIELD             88179\n         CLI   0(R7),C'/'    OTHER FIELD END ?                   88179\n         BE    GPGOTIT                                           88179\n         CLI   0(R7),C','    FUNNY FIELD SEPARATOR ?             88185\n         BE    GPGOTIT       YES; SKIP IT                        88185\n         LA    R7,1(,R7)              NON-BLANK\n         BCT   R6,GPLOOP2               CHARACTER\n         SPACE 1\n*        NEXT TEXT UNIT HAS BEEN FOUND\n         SPACE 1\nGPGOTIT  ST    R7,GPDATAP         SAVE CURRENT OFFSET IN CMD BUFFER\n         STH   R6,GPDATAL         SAVE LENGTH OF REMAINING DATA\n         SR    R7,R1              CALC LENGTH OF THE TEXT UNIT\n         LR    R15,R7               & MOVE TO REG 15\n         SPACE 1\n*        VALIDATE THE PARAMETER OPTIONS FOR THE TEXT UNIT\n         SPACE 1\n         L     R6,GPPARM          LOAD A(OPTION LIST)\n         CLI   0(R1),C'*'    POSSIBLE COMMENT ?                  88220\n         BNE   GPCHKOPT      NO                                  88220\n         TM    GPFLAG(R6),GPCOM  COMMENT ALLOWED ?               88220\n         BNZ   GPNODATA      YES; END OF INPUT                   88220\nGPCHKOPT CH    R15,GPLEN(,R6)     TU > MAX ALLOWED?\n         BNH   GPCHK10            NO => BR TO NEXT CHECK\n         MVC   0(L'GPMSG1,R2),GPMSG1 MOVE ERR MSG TO BUFFER\n         CH    R15,=H'8'          MOVE\n         BNH   *+8                  MAX 8\n         LA    R15,8                  CHARACTERS\n         BCTR  R15,0                    OF TEXT UNIT\n         EX    R15,GPEX1                  TO ERROR MSG\n         LA    R1,L'GPMSG1(,R2)   POINT TO END OF ERROR MSG\n         B     GPERRTXT           BR TO MOVE KEYWORD TO MSG\n         SPACE 1\nGPNODATA SLR   R15,R15            INDICATE NO TEXT UNIT\n         L     R6,GPPARM          LOAD A(OPTION LIST)            88220\nGPCHK10  LTR   R15,R15            WAS THERE A TEXT UNIT?\n         BNZ   GPXTYP        YES; NOW CHECK TYPING RESTRICTIONS  88220\n         TM    GPFLAG(R6),GPOPT   WAS PARAMETER OPTIONAL?\n         BNZ   GPXZERO            YES => EXIT NO PARM\n         MVC   0(L'GPMSG2,R2),GPMSG2 NO => MOVE ERR MSG\n         LA    R1,L'GPMSG2(,R2)   POINT TO END OF ERROR MSG\n         SPACE 1\nGPERRTXT LH    R7,GPTEXTL(,R6)    GET LENGTH OF TEXT IN OPT LIST\n         BCTR  R7,0               DECREMENT FOR MOVE\n         EX    R7,GPEX2           ADD OPTION LIST TEXT TO ERR MSG\n         SPACE 1\n         B     8(,R14)            TAKE ERROR RETURN\n         SPACE 1\nGPXZERO  B     4(,R14)            RETURN WITH NO TEXT UNIT\n         SPACE 1\nGPXTYP   TM    GPFLAG(R6),GPNUM  NUMERIC ONLY ?                  88220\n         BZ    GPXFND        NO; RETURN                          88220\n         LR    R0,R15        COPY LENGTH                         88220\n         LR    R7,R1         COPY TEXT START                     88220\nGPXTYPN  CLI   0(R7),C'0'    DIGIT ?                             88220\n         BL    GPNNUM        NO; FAIL                            88220\n         CLI   0(R7),C'9'    IN RANGE ?                          88220\n         BNH   GPXTYPNS                                          88220\nGPNNUM   MVC   0(25,R2),=C'PARAMETER MUST BE NUMERIC'            88220\n         LA    R1,25(,R2)    POINT TO END OF MESSAGE             88220\n         B     8(,R14)       TAKE ERROR RETURN                   88220\nGPXTYPNS LA    R7,1(,R7)                                         88220\n         BCT   R0,GPXTYPN    TRY NEXT                            88220\nGPXFND   BR    R14                RETURN WITH TEXT UNIT FOUND\n         SPACE 2\nGPEX1    MVC   0(0,R2),0(R1)      MOVE TEXT UNIT TO ERROR MSG\nGPEX2    MVC   0(0,R1),GPTEXT(R6) MOVE OPT LIST TEXT TO ERROR MSG\nGPMSG1   DC    C'XXXXXXXX IS TOO BIG FOR '\nGPMSG2   DC    C'MISSING PARAMETER: '\n         TITLE '*********  N E T S O L  - INIT MSG13 SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*    INITMSG4 LOCATES AND INITIALIZES THE MSG4 OUTPUT BUFFER.         *\n*                                                                     *\n*    INPUT : R9  - A(DDT)                                             *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : R2  - A(MSG04 OUTPUT BUFFER)                             *\n*                                                                     *\n***********************************************************************\nINITMSG4 DS    0H\n         SPACE 1\n         L     R2,DDTM4OFS        GET A(MSG04)\n         LH    R1,DDTM4L          LOAD LENGTH OF MSG04 BUFFER\n         MVI   0(R2),X'40'        INSERT 1ST BLANK\n         BCTR  R1,0               DECREMENT LENGTH\n         BCTR  R1,0               DECREMENT LENGTH\n         EX    R1,INITM4X         INIT REST OF BUFFER\n         SPACE 1\n         BR    R14\n         SPACE 2\nINITM4X  MVC   1(0,R2),0(R2)      PROPAGATE BLANK THROUGHOUT BUFFER\n         SPACE 1                                                 86065\n*        SYSTEMS RESTRICTION RELATED ROUTINES                    86065\n*                                                                86065\nSETPASON BAL   R14,UTERMOF   RESET PRIOR LOGON                   88179\n         AIF   ('&LOCAL' NE 'PID').NOPASON                       92300\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR WORK AREA        88179\n         MVC   A$SBUFR,TERMLOUD                                  88179\n         MVC   A$SID,=C'A$RB'  IDENTIFY                          88179\n         MVC   A$SFCTN(3),=AL1(A$SFLOUD,A$SONL,A$SAKEY)          88179\n         BAL   R14,INITMSG4  GET MESSAGE BUFFER                  88179\n         MVC   A$SERMSG,=A(ERRMSG)   STASH ERROR MESSAGE ADDRESS 88199\n         MVC   A$SACCT,TERMNAME  COPY TERMINAL ID                88179\n         ICM   R0,15,TERMLOUD  ALREADY HAVE A LOUD ?             88179\n         BNZ   PONHLOUD      YES                                 88179\n         LA    R1,A$SVCRB    GET PARM LIST                       88179\n         SVC   249           CALL ACCOUNTING SVC                 88179\n         BXH   R15,R15,POPERMSG  DO ERROR MESSAGE PROCESSING     88179\n         MVC   TERMLOUD,A$SBUFR  SAVE THE LOUD ADDRESS           88179\nPONHLOUD OI    A$SCNTL,A$SBUILD  SHOW LOUD ADDRESS PRESENT       88179\n         L     R4,TERMLOUD   LOAD THE LOUD                       88179\n         USING A$LOUD,R4     DECLARE IT                          88179\n         MVC   A$SACCT,=CL8' '                                   88179\n         MVC   A$SUID,=CL8' '                                    88179\n         MVC   A$SPSWD,=CL8' '                                   88179\n         LA    R1,PWUID      SET FOR USER-ID                     88179\n         BAL   R14,GETPARM   GET IT                              88179\n         B     *+12          FOUND                               88179\n         B     BAREPSWD      MISSING OPERAND - ISSUE LOGON SCRN  89066\n         B     POPPARM       INVALID PARM                        88179\n         BCTR  R15,0         SET EXECUTE LENGTH                  88179\n         LA    R14,A$SUID                                        88179\n         EX    R15,POPMVC    MOVE PARAMETER                      88179\n         MVC   A$SFCTN(3),=AL1(A$SFVALD,0,A$SUKEY+A$SBUILD)      88179\n         LA    R1,PWPSWD     GET PASSWORD                        88179\n         BAL   R14,GETPARM   LOOK FOR IT                         88179\n         B     *+12          OK                                  88179\n         B     POPPARM       INVALID                             88179\n         B     POPPARM       INVALID                             88179\n         BCTR  R15,0                                             88179\n         LA    R14,A$SPSWD                                       88179\n         EX    R15,POPMVC    MOVE PARM                           88179\n         LA    R1,PWACCT     TEST FOR ACCOUNT                    88186\n         BAL   R14,GETPARM   LOOK FOR IT                         88186\n         B     *+12          OK                                  88186\n         B     PONACSVC      MISSING; ISSUE SVC WITHOUT IT       88186\n         B     POPPARM       INVALID                             88179\n         BCTR  R15,0                                             88179\n         LA    R14,A$SACCT                                       88179\n         EX    R15,POPMVC    MOVE PARM                           88179\n         OI    A$SCNTL,A$SAKEY  SHOW ACCOUNT SUPPLIED            88186\nPONACSVC LA    R1,A$SVCRB                                        88179\n         SVC   249                                               88179\n         BXH   R15,R15,POPERMSG                                  88179\nPONLON   BAL   R14,UTERM     SET AUTHORIZATION AND LOGON         88185\n         TM    TERMFLG3,TPRIVY  PRIVILEGED ?                     88192\n         BNZ   PONOPEN       YES                                 88192\n         TM    UFLAGS,UFGSYS SYSTEMS ONLY ?                      88192\n         BZ    PONOPEN       NO; PROCEED                         88192\n         MVC   0(35,R2),=C'SIGN-ON restricted to systems staff'  88192\n         B     PONERR4       JOIN COMMON                         88192\nPONOPEN  TM    A$USUBFG,A$USFTSO+A$USFCIC+A$USFWYL+A$USFEXH+A$USFNET+A$*\n               USFOTH        ALLOWED ON-LINE SERVICES ?          88192\n         BNZ   PONTSUB       YES; SEE IF ONE ONLY                88179\n         MVC   0(40,R2),=C'MSG772 USER NOT ALLOWED ON-LINE SERVICES'\nPONERR4  BAL   R14,UTERMOF   RESET LOGON AGAIN                   88192\n         B     SENDMSG4      WRITE ERROR MESSAGE TO USER         88185\n         SPACE 1                                                 92320\nPONTSUB  BAL   R14,UTERMAP   SEE IF APPLICATION IS FORCED        88179\n         L     R7,=A(OPENEND)  SET BASE FOR AUTOTIME             90141\n         TM    TERMFLG3,TFAPL  FORCED APPLICATION ?              88220\n         BNZ   AUTOTIME-OPENEND(R7)  YES; INVOKE IT              88220\n         SPACE 1                                                 88185\nPONANY   LH    R2,GPDATAL    GET LENGTH OF BUFFER                88311\n         LTR   R2,R2         ROOM FOR TEXT ?                     88311\n         BNP   PONSCRN       NO                                  88311\n         L     R6,GPDATAP    GET DATA BUFFER LEFT                88311\nPONMORE  CLI   0(R6),C' '    ANY MORE TEXT ?                     88311\n         BH    INTRPRET      YES; PARSE IT                       88311\n         LA    R6,1(,R6)                                         88311\n         BCT   R2,PONMORE    TRY AGAIN                           88311\n.NOPASON SPACE 1                                                 91195\nPONSCRN  TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BNZ   RESEND        YES; REWRITE FULL SCREEN            88179\n         LA    R0,MSG15      SHOW UNLOCKED                       86065\n         B     SENDMSG                                           86065\nPOPMVC   MVC   0(0,R14),0(R1)  MOVE PARM                         88179\nPOPERMSG L     R15,A$SERMSG  GET ERROR MESSAGE ADDRESS           88199\n         OC    0(L'SINM4OF,R2),4(R15)  MOVE MESSAGE TEXT         88199\nPOPPARM  B     SENDMSG4      WRITE ERROR MESSAGE TO USER         88185\n         SPACE 1                                                 88179\nPWUID    $GP   8,'USER-ID',GPNULL+GPOPT  (REWRITE IF MISSING)    89066\nPWPSWD   $GP   8,'PASSWORD',GPNULL                               88179\nPWACCT   $GP   8,'ACCOUNT',GPOPT+GPCOM                           88179\nPWAUTO   $GP   6,'AUTO LOGON',GPOPT+GPCOM                        88179\n         SPACE 1                                                 88185\nUTERMAP  DS    0H                                                91195\n         AIF   ('&LOCAL' NE 'PID').NOUTRMN                       92300\n         LA    R15,PONAPTAB  GET TABLE OF FORCED APPLICATIONS    88179\n         LA    R0,(PONAPEND-PONAPTAB)/(PONAPTA2-PONAPTAB) # TO CHECK\nPONAPLUP CLC   A$USUBFG,0(R15)  MATCH ?                          88179\n         BE    PONAPFOR      YES; FORCED APPLICATION LOGON       88179\n         LA    R15,PONAPTA2-PONAPTAB(R15)  NEXT ENTRY            88179\n         BCT   R0,PONAPLUP   TRY IT                              88179\n         BR    R14           RETURN WITHOUT A MATCH              88179\nPONAPTAB DC    AL1(A$USFTSO),CL8'TSO'  FORCED LOGON TABLE        88179\nPONAPTA2 DC    AL1(A$USFWYL),CL8'WYLBUR'                         88179\n         DC    AL1(A$USFEXH),CL8'EXHI'                           88179\n         DC    AL1(A$USFCIC),CL8'CICS'                           88179\nPONAPEND EQU   *                                                 88179\n         SPACE 1                                                 88179\nPONAPFOR CLI   A$USUBFG,A$USFCIC  CICS LOGON ?                   88179\n         BE    PONAPCIC      YES; CHECK FURTHER                  88179\n         MVC   TERMAPPL,1(R15)  MOVE THE APPLICATION NAME        88179\n         OI    TERMFLG3,TFAPL  SET FORCED APPLICATION            88220\n         BR    R14           RETURN WITH APPLID SET              88179\nPONAPCIC CLI   A$UCICNM,C' ' FORCED NAME ?                       88179\n         BNHR  R14           NO                                  88179\n         CLI   A$UCICNM+8,C' '  MORE THAN ONE ?                  88179\n         BH    R14           YES; LET USER SPECIFY               88179\n         LA    R0,8                                              88179\n         LA    R15,A$UCICNM                                      88179\nPONACLUP CLI   0(R15),C' '   BIGGER THAN A BLANK ?               88179\n         BNH   PONACLOK      NO; END OF NAME                     88179\n         CLI   0(R15),C'*'   MATCH ANY RESIDUAL ?                88186\n         BER   R14           YES; NO SPECIFIC NAME               88186\n         CLI   0(R15),C'?'   SPECIAL CHARACTER ?                 88186\n         BER   R14           YES; NO SPECIFIC NAME               88186\n         LA    R15,1(,R15)                                       88179\n         BCT   R0,PONACLUP   TRY AGAIN                           88179\nPONACLOK MVC   TERMAPPL,A$UCICNM  MAKE NAME                      88179\n         OI    TERMFLG3,TFAPL  SET FORCED APPLICATION            88220\n.NOUTRMN BR    R14           RETURN WITH APPLID SET              88179\n         SPACE 1                                                 88185\nUTERM    OI    TERMFLG3,TFLON  SHOW USER LOGGED ON               88179\n         AIF   ('&LOCAL' NE 'PID').NOUTER1                       92300\n         TM    A$UPRIVY,A$UPFSYS  SYSTEMS PRIVILEGE ?            88179\n         BZ    *+8           NO                                  88179\n.NOUTER1 OI    TERMFLG3,TPRIVY  YES; FULL AUTHORIZATION          88179\n         AIF   ('&LOCAL' NE 'PID').NOUTER2                       92300\n         TM    A$UPRIVY,A$UPFACT+A$UPFOPE  SUPPORT ?             88179\n         BNO   *+8           NO                                  88179\n         OI    TERMFLG3,TSUPP  SET TECHNICAL SUPPORT             88179\n.NOUTER2 BR    R14           RETURN TO CALLER                    88185\n         SPACE 1                                                 86065\nUTERMOF  XC    TERMAPPL,TERMAPPL  RESET PRIOR APPLICATION        88185\n         XC    TERMDCNT,TERMDCNT  RESET APPL RETRY COUNT         88185\n         XC    TERMDTIM,TERMDTIM  RESET APPL RETRY TIME          88185\n         NI    TERMFLG3,TFREQ     RESET LOGON/PRIVY FLAGS        88185\n         BR    R14           RETURN TO CALLER                    88185\n         SPACE 1                                                 88185\nSETPASOF BAL   R14,UTERMOF   RESET LOGON/PRIVIES                 88179\n         AIF   ('&LOCAL' NE 'PID').NOPASOF                       92300\n         ICM   R4,15,TERMLOUD  PRIOR LOGON ?                     88179\n         BZ    POFFLOUD      NO                                  88179\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  USE AS ACCT SVC PARM   88179\n         MVC   A$SID,=C'A$RB'                                    88179\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,0,A$SAKEY+A$SBUILD)      88179\n         MVC   A$SBUFR,TERMLOUD  COPY LOUD                       88179\n         LA    R1,A$SVCRB                                        88179\n         SVC   249           CANCEL SESSIONS AND USER LOGON      88179\n.NOPASOF  ANOP  ,                                                91195\nPOFFLOUD LA    R0,MSG16      SHOW LOCKED                         86065\n         TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BZ    SENDMSG       NO                                  86065\nBAREPSWD LA    R0,MSG20      SET FOR LOGON SCREEN                88179\n         B     SENDMSG                                           88179\n         SPACE 1                                                 88172\n*        MSG TEXT - SEND NON-DELETABLE MESSAGE TO OPERATOR       88172\n*                                                                88172\nSETWTO   L     R0,GPDATAP    POINT TO COMMAND TEXT               88172\n         SLR   R2,R2                                             88172\n         ICM   R2,3,GPDATAL  LOAD AND TEST LENGTH                88172\n         BNP   BADINPUT      ERROR                               88172\n         LR    R1,R2         COPY LENGTH FROM MVC                88179\n         LA    R14,IOBASE+4+4+1+8  FIRST BYTE AFTER TERM         88179\n         LA    R15,150-4-4-1-8  MAX LENGTH SUPPORTED             88179\n         MVC   IOBASE+4(5),=C'FROM '                             88172\n         MVC   IOBASE+4+4+1(8),TERMNAME  TERM ID                 88172\n         MVI   IOBASE+4+4+1+8,C' '                               88172\n         MVCL  R14,R0        MOVE TEXT TO BUFFER (NULL FILL)     88172\n         LA    R2,4+4+1+8(,R2)                                   88172\n         LA    R1,IOBASE(R2) POINT TO END OF TEXT                88172\n         MVC   0(4,R1),=X'40008000'  ROUTCDE=1,DESC=2            88172\n         STCM  R2,3,IOBASE   SET RDW LENGTH                      88172\n         MVC   IOBASE+2(2),=X'8000'  SET ROUT/DESC PRESENT       88172\n         SLR   R0,R0         CLEAR FOR UCMID                     88172\n         WTO   MF=(E,IOBASE)  WRITE TO OPERATOR                  88172\n         BAL   R14,INITMSG4  CLEAR VARIABLE MESSAGE AREA         88172\n         MVC   0(12,R2),=C'MESSAGE SENT'                         88172\n         B     SENDMSG4      SEND MESSAGE 4                      88185\n         SPACE 1                                                 87187\n*        OS TEXT - IF PRIVILEGED USER, ISSUES OS COMMAND (TEXT)  87187\n*                                                                87187\nSETOSCMD TESTAUTH FCTN=1     AUTHORIZED FOR OS COMMANDS ?        87187\n         BXH   R15,R15,CMDNAUTH  NO; FAIL REQUEST                87187\n         L     R6,GPDATAP    POINT TO COMMAND TEXT               87187\n         SLR   R2,R2                                             87187\n         ICM   R2,3,GPDATAL  LOAD AND TEST LENGTH                87187\n         BNP   BADINPUT      ERROR                               87187\n         MVC   IOBASE+4(256),0(R6)  COPY PARM +                  87187\n         LA    R2,4(,R2)                                         87187\n         SLL   R2,16                                             87187\n         ST    R2,IOBASE     COMPLETE V-FORMAT ENTRY             87187\n         SLR   R0,R0         CLEAR FOR UCMID                     87187\n         L     R2,CVTPTR     GET THE CVT                         87187\n         USING CVTMAP,R2                                         87187\n         ICM   R2,15,CVTCUCB  GET CONSOLE CONTROL BLOCK          87187\n         BZ    SETOSNCN      NO CONSOLE ?                        87187\n         USING UCM,R2                                            87187\n         LM    R1,R3,UCMVEA  LOAD CONSOLE BXLE WORDS             87187\n         DROP  R2                                                87187\n         USING UCMLIST,R1    DECLARE SINGLE ENTRY                87187\nSETOSCLP TM    UCMDISP,UCMDISPA  MASTER CONSOLE ?                87187\n         BZ    SETOSCBM      NO                                  87187\n         IC    R0,UCMID      INSERT ID                           87187\n         OI    IOBASE+2,X'40'  SET UCM ID PRESENT                87187\n         B     SETOSNCN      PROCEED WITH NEW ID                 87187\nSETOSCBM BXLE  R1,R2,SETOSCLP  LOOP THROUGH CONSOLES             87187\n         DROP  R1                                                87187\nSETOSNCN MODESET KEY=ZERO,MODE=SUP  GET PRIVILEGED               87193\n         MGCR  IOBASE        ISSUE COMMAND                       87193\n         MODESET KEY=NZERO,MODE=PROB  GET LOW                    87193\n         BAL   R14,INITMSG4  CLEAR MESSAGE BUFFER                87187\n         LH    R3,DDTM4L     GET MAXIMUM LENGTH                  87187\n         LA    R0,IOBASE+4                                       87187\n         LH    R1,IOBASE     GET LENGTH+4                        87187\n         SH    R1,=H'4'                                          87187\n         MVCL  R2,R0         MOVE RESPONSE OR ORIGINAL COMMAND   87187\n         B     SENDMSG4      SEND MESSAGE 4                      88185\n         SPACE 2                                                 87193\n***********************************************************************\n*                                                                     *\n*        SETNEWS - DISPLAY THE CURRENT GOSSIP FROM DD CARD NEWS       *\n*        SETSTATS - (LOCAL ONLY) DISPLAY THE EXHIBIT SYSTEM SCREEN    *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 88179\nSETSTATS DS    0H            DISPLAY STATUS SCREEN FROM EXHIBIT  87193\n         AIF   ('&LOCAL' NE 'ESP').NOSTATS                       92300\n         MODESET KEY=ZERO                                        93038\n         L     R2,CVTPTR     GET THE CVT                         93038\n         ICM   R2,15,CVTJESCT-CVTMAP(R2)  GET JES TABLE          93038\n         BZ    NOT24         OR OUT                              93038\n         LA    R2,JESSSCT-JESCT-(SSCTSCTA-SSCT)(,R2)  SSCT CHAIN 93038\n         USING SSCT,R2       DECLARE IT                          93038\nLOOPSSCT ICM   R2,15,SSCTSCTA  GET NEXT ENTRY                    93038\n         BZ    NOT24         TOO BAD                             93038\n         AM31  ,             GET HIGH - ALL DATA ABOVE THE LINE  93038\n         CLC   =C'EXHI',SSCTSNAM  MY SUBSYSTEM NAME ?            93038\n         BNE   LOOPSSCT      NO                                  93038\n         ICM   R2,15,SSCTSUSE  LOAD CSA GLOBAL ADDRESS           93038\n         BZ    NOT24         NOT BUILT YET ?                     93038\n         USING EXRBASE,R2    DECLARE CSA                         93038\n         SLR   R3,R3         SAVE BACKUP POINTER                 93038\n         LA    R4,EXRSCRIN-(EXKCHAIN-EXKBASE)  HEAD OF SCREENS   93038\n         USING EXKBASE,R4                                        93038\n         L     R0,=Y(24,80)  SET PREFERRED ENTRY                 93038\n         L     R1,=C'JES2'   SET PREFERRED SUBSYSTEM (LATER DO *)\nLOOPEXK  ICM   R4,15,EXKCHAIN  GET NEXT ELEMENT                  93038\n         BNZ   TESTEXK       TEST IT                             93038\n         LTR   R4,R3         DID WE FIND AN ALTERNATE ?          93038\n         BZ    NOT24         NO ?                                93038\n         B     HAVEEXK       YES; USE ALTERNATE SIZE             93038\nTESTEXK  CLM   R1,15,EXKJESNM  SAME SUBSYSTEM ?                  93038\n         BNE   LOOPEXK       NO; IGNORE                          93038\n         CLM   R0,15,EXKSCRSZ  SAME SIZE ?                       93038\n         BE    HAVEEXK       YES; USE IT                         93038\n         CLM   R0,3,EXKSCRSZ  AT LEAST SOMETHING BY 80 ?         93038\n         BNE   LOOPEXK       NO; IGNORE IT                       93038\n         LR    R3,R4         SAVE AS ALTERNATE                   93038\n         B     LOOPEXK       TRY AGAIN                           93038\n         SPACE 1                                                 93038\nHAVEEXK  LA    R0,EXKSCRN    LOAD SCREEN START ADDRESS           93038\n         DROP  R4                                                93038\n         B     COMSCRIN                                          88179\n.NOSTATS SPACE 1                                                 88179\nSETHELP  L     R0,=A(HELPTEXT)   FOR 'HELP' SCREEN               88179\n         B     COMSCRIN      MOVE IT                             88179\n         SPACE 1                                                 87193\nSETNEWS  L     R0,=A(NEWSTEXT)  LOAD NEWS SCREEN ADDRESS         88179\nCOMSCRIN LA    R1,24*80      SET SCREEN SIZE                     87193\n         LA    R14,IOBASE                                        87193\n         ST    R14,GPDATAP   SAVE POINTER                        87193\n         C     R9,=A(DDT3767)  NTO DEVICE ?                      88179\n         BE    COMNSCR       YES; FORMAT LINE BY LINE            88179\n         C     R9,=A(DDTMDL5)  MODEL 5 ?                         88206\n         BE    COMMDL5       YES; SPECIAL PROCESSING             88206\n         LR    R15,R1        COPY LENGTH                         87193\n         MVC   0(PREFIXLN,R14),PREFIX  MOVE 3270 PREFIX ORDERS   87193\n         LA    R14,PREFIXLN(,R14)  ADJUST                        87193\n         MVCL  R14,R0        MOVE SCREEN BUFFER                  87193\n         MVC   IOBASE+PREFIXLN+24*80(SUFFIXLN),SUFFIX  TRAILER   87193\n         LA    R15,PREFIXLN+24*80+SUFFIXLN                       87193\n         B     COMSTLEN      JOIN COMMON                         88206\n         SPACE 1                                                 88206\nCOMMDL5  LR    R1,R0         COPY START ADDRESS                  88206\n         LA    R0,24         NUMBER OF LINES TO DO               88206\n         MVC   0(PREFIXLN,R14),PREFIX   MOVE PREFIX ORDERS       88206\nCOMMDL5L MVI   PREFIXLN(R14),C' '                                88206\n         MVC   PREFIXLN+1(131,R14),PREFIXLN(R14)  CLEAR THE LINE 88206\n         MVC   PREFIXLN+27(80,R14),0(R1)  MOVE ONE LINE OF TEXT  90010\n         LA    R14,132(,R14)   ADVANCE ONE LINE OF OUTPUT        88206\n         LA    R1,80(,R1)    ADVANCE ONE LINE OF INPUT           88206\n         BCT   R0,COMMDL5L   DO FOR ALL LINES                    88206\n         MVC   PREFIXLN(SUFFIXLN,R14),SUFFIX  TRAILER            88206\n         LA    R15,PREFIXLN+SUFFIXLN+24*132  SCREEN SIZE         88206\n         B     COMSTLEN      JOIN COMMON                         88206\n         SPACE 1                                                 88179\nCOMNSCR  LA    R14,IOBASE+1  SET INPUT BUFFER ADDRESS            88179\n         ST    R14,GPDATAP   SET BUFFER START                    88179\n         LR    R1,R0         STARTING ADDRESS                    88179\n         MVI   IOBASE,X'FF'  SET SCAN STOPPER                    88179\n         LA    R0,24         NUMBER OF LINES TO DO               88179\n         LA    R2,80         SET LINE LENGTH                     88179\nCOMNSLUP MVC   0(80,R14),0(R1)  MOVE ONE LINE                    88179\n         AR    R1,R2         NEXT INPUT LINE                     88179\n         CLC   0(79,R14),1(R14)  ALL BLANK (OR SOMETHING?)       88179\n         BE    COMNSLIP      YES; SKIP IT                        88179\n         AR    R14,R2        NEXT LINE                           88179\nCOMNSLED BCTR  R14,0         BACKSPACE 1                         88179\n         CLI   0(R14),C' '   TRAILING BLANK ?                    88179\n         BE    COMNSLED      YES; DO IT AGAIN                    88179\n         MVC   1(2,R14),=X'0D25'  MAKE CR/LF                     88179\n         LA    R14,3(,R14)   NEXT AVAILABLE POSITION             88179\nCOMNSLIP BCT   R0,COMNSLUP   DO NEXT LINE                        88179\n         AIF   (NOT &MVSXA OR '&LOCAL' NE 'PID').NOBROAD         93038\n         LTR   R3,R3         STATUS DISPLAY ?                    93038\n         BZ    COMNENTR      NO; MAKE PROMPT                     93038\n         LR    R2,R14        JUST IN CASE                        93038\n         AM31  ,             GET HIGH AGAIN                      93038\n         MVC   4(73,R2),EXRBROAD+2  MOVE BROADCAST MESSAGE       93038\n         CLI   4(R2),C' '    ANY TEXT, EVER ?                    93038\n         BL    COMNENTR      NO; GET OUT                         93038\n         MVC   0(4,R2),=C'==> '  NOTE BLANK AT +3                93038\n         CLC   3(73,R2),4(R2)  ALL BLANK ?                       93038\n         BE    COMNENTR      YES; GET OUT                        93038\n         SLR   R3,R3         ONLY ONCE                           93038\n         LA    R0,1          SET FOR ONE MORE                    93038\n         LA    R14,73(,R2)   POINT TO END OF LINE                93038\n         B     COMNSLED      DELETE TRAILING BLANKS              93038\n.NOBROAD SPACE 1                                                 93038\nCOMNENTR MVC   0(8,R14),=C'ENTER ? '                             88179\n         LA    R15,8(,R14)                                       88179\n         S     R15,GPDATAP   LESS START OF BUFFER                88179\nCOMSTLEN STH   R15,GPDATAL   SET BUFFER LENGTH                   88179\n         AM24  ,             RESET POSSIBLE 31-BIT MODE          93038\n         MODESET KEY=NZERO   RESET KEY ZERO                      93038\n         LA    R0,MSG19                                          88179\n         B     SENDMSG       SEND CONVERTED SCREEN               88179\n         SPACE 1                                                 88172\nNOT24    AM24  ,             GET DOWN                            93038\n         MODESET KEY=NZERO                                       93038\nNOTFOUND BAL   R14,INITMSG4  CLEAR MESSAGE LINE                  87193\n         MVC   0(22,R2),=C'SUBCOMMAND UNAVAILABLE'               87193\nSENDMSG4 LA    R0,MSG04      REQUEST MESSAGE 4                   88185\n         B     SENDMSG       AND GET OUT                         88185\n         SPACE 1                                                 87193\nEXRESMOD DC    0D'0',CL8'EXHRDFL3'  WORD ALIGNMENT THE HARD WAY  87193\nPREFIX   $IO   ERASE/WRITE                                       87193\n         $WCC  (RESETKBD,MDT)                                    87193\n         $SBA  (1,1)                                             87193\nPREFIXLN EQU   *-PREFIX                                          87193\nSUFFIX   $SBA  (1,1)         FUNNY WRAP-AROUND                   87193\n         $SF   (UNPROT)                                          87193\n         $IC                                                     87193\n         DC    CL8' '        USER INPUT                          87193\n         $SF   (PROT)                                            87193\nSUFFIXLN EQU   *-SUFFIX                                          87193\n         TITLE '*********  N E T S O L  -  TPEND EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *\n*                                                                     *\n*              * VTAM IS CLOSING DOWN                                 *\n*                                                                     *\n*              * OPERATOR ISSUED A HALT COMMAND                       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *\n*                                                                     *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - REASON CODE FOR SHUTDOWN                      *\n*                                                                     *\n*        THIS PARAMETER LIST IS NOT USED BY NETSOL                    *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nTPEND    XHEAD ,                                                 90141\n         OI    UFLAGS,SHUTDOWN+UFGIGNER  TELL OTHER EXITS OF SHUTDOWN\n         SPACE 1\n         POST  FINISECB                POST MAINLINE'S ECB\n         SPACE 1\n         SLR   R15,R15                 ZERO RETURN CODE\n         BR    R14                     RETURN FROM IRB\n         TITLE '*********  N E T S O L  -  LOGON EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *\n*                                                                     *\n*              * A TERMINAL IS LOGGED ON VIA VARY TO NETSOL           *\n*                                                                     *\n*              * A TERMINAL IS RETURNED TO NETSOL BY AN APPLICATION.  *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *\n*                                                                     *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - POINTER TO SYMBOLIC TERMINAL NAME             *\n*              WORD 2 - RESERVED                                      *\n*              WORD 3 - LENGTH OF LOGON DATA.                         *\n*              WORD 4 - READ-ONLY RPL POINTING TO LOGON CINIT.        *\n*              WORD 5 - CID OF PENDING SESSION.                       *\n*                                                                     *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOGON    MHEAD ,                                                 90141\n         L     R6,20(,R1)    GET THE CID                         88188\n         LA    R13,GENSAVE             POINT TO SAVE-AREA\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         SPACE 1\n***********************************************************************\n*        NOW ADD THE TERMINAL NAME TO THE TERMINAL TABLE AND RETURN   *\n*        THE ENTRY'S ADDRESS SO IT CAN BE PLACED IN THE NIB USER      *\n*        FIELD. SUBSEQUENT OPERATIONS USING AN RPL WILL HAVE THE      *\n*        RPLUSFLD UPDATED WITH THE TERMINAL TABLE ADDRESS FROM THE    *\n*        NIB. IF ENTRY ALREADY EXISTS IN TABLE (SECOND LOGON, ETC.),  *\n*        THEN WE RESET THE TERMINALS STATUS. A COUNT IS MAINTAINED    *\n*        OF THE NUMBER OF LOGONS FOR A GIVEN TERMINAL. THE TERMINAL   *\n*        TABLE CAN BE EXPANDED IF NEEDED TO PROVIDE ADDITIONAL STATS. *\n***********************************************************************\n         SPACE 1\n         L     R2,4(,R1)               -> TERMINAL NAME PASSED BY LOGON\n         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES\n         CR    R3,R5                   CHECK FOR NULL TABLE\n         BH    NOTABLE                 NO ENTRIES AS R3 > R5 (INIT 0)\n         SPACE 1\nTABLOOP  CLC   0(8,R2),TERMNAME        MATCH THE NAME ?\n         BE    FOUNDTAB                YES, ALREADY IN THE TABLE\n         BXLE  R3,R4,TABLOOP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1\n         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?\n         BNL   TOOSMALL                YES, ABEND USER 0008\n         SPACE 1\nNOTABLE  ST    R3,TERMTABE             SAVE NEW TABLE END\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY\n         MVC   TERMNAME(8),0(R2)       COPY NAME ACROSS\nTESTRANG LM    R15,R1,TERMTEND  GET RANGE ENTRIES                88185\n         SR    R15,R0        BACK-UP ONE                         88185\nLOOKRANG BXH   R15,R0,FOUNDTAB  PATTERN ENTRY NOT LOCATED        88185\n         CLC   TERMNAME,TERMNAME-TERMTABL(R15)  IN RANGE ?       88185\n         BL    LOOKRANG      NO                                  88185\n         CLC   TERMNAME,TERMNAM2-TERMTABL(R15) NOT TOO HIGH ?    88185\n         BH    LOOKRANG      NO; TRY AGAIN                       88185\n         MVC   TERMDAPL,TERMDAPL-TERMTABL(R15)  COPY APPLICATION 88185\n         MVC   TERMFLG3,TERMFLG3-TERMTABL(R15)  LOGON FLAGS      88185\n         MVC   TERMLPAD(L'TERMLPAD+L'TERMLPLN),TERMLPAD-TERMTABL(R15)\n         SPACE 1\nFOUNDTAB LA    R4,1                    GET LOGON COUNT           86127\n         AH    R4,TERMLOGC             ADD 1 TO IT               86127\n         STH   R4,TERMLOGC             SAVE IT BACK\n         MVI   TERMFLAG,0              CLEAR LOGON STATUS FLAG\n*        CLC   TERMCID,TERMNAME  PRE-ACF VTAM ?                  84142\n*        BE    *+8           YES; LEAVE CID FIELD ZERO           84142\n         ST    R6,TERMCID    SAVE PENDING CID FOR INQUIRE        88188\n         SPACE 1\n***********************************************************************\n*        OBTAIN AN ASYNC RPL/NIB AND PREPARE FOR OPNDST               *\n***********************************************************************\n         SPACE 1\n         BAL   R14,GETRPL              OBTAIN AN RPL\n         LA    PTRNIB,NIBSTART         -> NIB WITHIN RPL\n         OI    EXITFLAG,LOGONEX        MARK LOGON EXIT ENTERED\n         MVC   NIBSYM(8),TERMNAME      MOVE IN SYMBOLIC NAME\n         MVC   NIBCID,TERMCID  ALSO SET PENDING ID               89121\n         XC    NIBLMODE,NIBLMODE  KILL LOGMODE                   89121\n*DO NOT  CLI   VTAMVERL,C'2'  VTAM 3 OR HIGHER ?                 92221\n*NEED    BNH   INQUMODE      NO                                  92221\n*THIS    MVC   NIBLMODE,=CL8' '  USE BLANKS INSTEAD OF ZEROES    92221\nINQUMODE MVC   MODENAM,NIBLMODE  SAVE FOR USER OVERRIDE          92221\n         ST    R3,NIBUSER              NIB USER -> TERM TABLE ADDRESS\n         ST    R3,RPLUSFLD             SAVE FOR ERROR ON OPNDST\n         ST    PTRRPL,TERMCRPL         SAVE A(RPL) IN TTE\n         SPACE 1\n***********************************************************************\n*        OBTAIN THE SESSION PARAMETERS WITH THE INQUIRE MACRO         *\n***********************************************************************\n         SPACE 1\nINQUIRSE L     R15,=A(FRSYNRPL)  GET FRESH SYNCHRONOUS RPL       86065\n         MVC   SYNCHRPL(FRSYNL),0(R15)  AND RE-INITIALIZE        86065\n         XC    SESSPARM,SESSPARM       ZERO SESSION PARM WORK AREA\n         ST    R3,SYNUSFLD             SAVE A(TTE) IN RPL USER FLD\n         L     R2,TERMCID              LOAD CID FOR INQUIRE\n         OI    MACFLAG2,INQSES         INDICATE INQUIRE(SESSPARM)\n         OI    MFLAGS2,INQSESS\n         AIF   (&MVSSP OR &MVSXA).NEWINQ                         84142\n         INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=SESSPARM,                                         X\n               NIB=(PTRNIB),                                           X\n               AREA=SESSPARM,                                          X\n               AREALEN=L'SESSPARM                                84142\n         AGO   .COMINQ                                           84142\n.NEWINQ  INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=SESSPARM,                                         X\n               ARG=(R2),                                               X\n               AREA=SESSPARM,                                          X\n               AREALEN=L'SESSPARM\n.COMINQ  NI    MFLAGS2,255-(INQSESS)   RESET ERREXIT FLAG\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(SESSPARM)                                *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO CINIT QUEUED                      14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTABC(R15)            CHECK VALID ACTIONS\nERRTABC  B     R0CHKC               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8\n         BAL   R7,SNOCCUR           C\n         B     INQUIRSE            10  REISSUE.  NO NEED TO\n         B     FREERPL             14  TERMINAL GONE. END REQUEST\n         SPACE 1\nR0CHKC   DS    0H\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*        USE BIND PARAMETERS JUST OBTAINED TO DETERMINE TERMINAL TYPE *\n***********************************************************************\n         SPACE 1\n         LA    R2,SESSPARM             ESTABLISH ADDRESSABILITY\n         USING ISTDBIND,R2               TO BIND PARAMETERS\n         ICM   R7,15,@MODETAB  IS THERE A MODE TABLE ?           88213\n         BZ    LOGNOMOD      NO                                  88213\n*KILL*   CLI   TERMMODE,C' ' PRIOR MODE FOUND ?                  88220\n*KILL*   BH    LOGNOMOD      YES; DON'T SEARCH AGAIN             88220\n*KILL*   SLR   R15,R15       ZERO IC                             88213\n*KILL*   LA    R14,8(,R7)    POINT TO FIRST ENTRY                88213\n*KILL*   LH    R0,2(,R7)     LOAD NUMBER OF ENTRIES (AT LEAST ONE!)\n*OGDOMOD CLC   ISTDBIND(BINTSU-ISTDBIND),8(R14)  MATCH ?         88311\n*KILL*   BNE   LOGUPMOD      NO; BUMP AGAIN                      88213\n*KILL*   CLC   BINSRUSZ(2),8+BINSRUSZ-ISTDBIND(R14)  SAME SIZE ? 88220\n*KILL*   BNE   LOGUPMOD      NO; BUMP AGAIN                      88213\n*KILL*   CLC   BINLUP(BINRSV15+1-BINLUP),8+BINLUP-ISTDBIND(R14)  88220\n*KILL*   BNE   LOGUPMOD      NO; BUMP AGAIN                      88213\n*KILL*   MVC   TERMMODE,0(R14)  COPY LOGMODE NAME                88213\n*KILL*   B     LOGNOMOD                                          88213\n*OGUPMOD IC    R15,BINUSEL-ISTDBIND+8(,R14)  GET USER LENGTH     88213\n*KILL*   LA    R14,8+BINDSIZE(R14,R15)  NEXT ENTRY               88213\n*KILL*   BCT   R0,LOGDOMOD   TRY AGAIN                           88213\nLOGNOMOD CLI   BINLUP,BINLUP2C         LU TYPE 2 (3270) ?\n         BE    LU3270                    YES - BR TO PROCESS\n         CLI   BINLUP,BINLUP1C         LU TYPE 1 (3767) ?\n         BE    LU3767                    YES - BR TO PROCESS\n         CLI   BINLUP,BINLUP0C   IF NOT LU TYPE 0\n         BNE   BADLU                     THEN ASSUME UNSUPPORTED DEVICE\n         CLI   BINFM,X'02'               ELSE IF FM=02\n         BE    LU3270                         THEN ASSUME 3270\n         CLI   BINFM,X'03'                    IF FM=03\n         BE    LU3767                         THEN ASSUME 3767\n         B     BADLU                          ELSE DEVICE NOT SUPPORTED\nLU3270   CLI   BINBDESC,BINBFSZF  CHECK BUFFER SIZE              88206\n         BNL   LU70PRI       TEST PRIMARY SCREEN SIZE            88206\n         CLI   BINBDESC,5    MODEL 5 OR SMALLER ?                88206\n         BE    LUMDL5        GO TO 27*132                        88206\n         BH    BADLU         INVALID                             88206\n         CLI   BINBDESC,1    12*80 (OR 24*40) ???                88206\n         BE    BADLU         YES; NOT SUPPORTED                  88206\n*        NOTE THAT =0 AND =2 BOTH MAY APPEAR FOR 24*80           88206\n         B     LU3270N       SET FOR 'NORMAL' SCREEN             88206\nLU70PRI  OI    TERMFLAG,LETMODE ALLOW USER LOGMODE MODIFICATION  88207\n         CLI   BINBFRAR,27   27*132 ALTERNATE ?                  88206\n         BNE   LU3270N       NO; USE NORMAL SCREENS              88206\nLUMDL5   L     R1,=A(DDTMDL5)  SET FOR NORMAL MODE               88206\n         B     STORDDT       STASH IT                            88206\nLU3270N  L     R1,=A(DDT3270)  SET FOR BASIC MODE                88206\n         AIF   (NOT &MVSSP AND NOT &MVSXA).NOTSEDS               84142\n         TM    BINDFLAG,BINSEDS        3270 WITH EXTENDED FUNCTION?\n         BZ    STORDDT       NO; USE BASIC MODE                  88206\n         AGO   .NOTSEDT                                          84141\n.NOTSEDS ANOP  ,                                                 84141\n         TM    BINDFLAG,X'80'    EXTENDED DATASTREAM OPTION ?    88206\n         BZ    STORDDT       NO                                  88206\n.NOTSEDT L     R1,=A(DDT3270E)         PT AT DDT3270E           85327\n         B     STORDDT                 BR TO STORE IN TTE\nLU3767   L     R1,=A(DDT3767)          PT AT DDT FOR 3767       85327\n         MVI   BINCMNP2,X'80'  SET HALF-DUPLEX FLIP-FLOP         86168\n         MVI   BINPRIP,BINPCHN+BINPCHNR+BINPSEB                  86168\n         MVI   BINSECP,BINSCHN+X'10'   EXC. RESP. ONLY, NO END   86168\n         MVI   BINCMNP,BINBRAK+BINBKTR                           86168\n         MVI   BINUSEL,4     SET USER DATA LENGTH                86168\n         MVC   BINUSE(4),=X'FF000020'  NTO INST. MANUAL, APP. D  86168\nSTORDDT  ST    R1,TERMDDT              STORE A(DDT) IN TTE\n         TM    BINCMNP2,BINHDXFF  CONVERSATIONAL DEVICE ?        90135\n         BZ    *+8           NO                                  90135\n         OI    TERMFLAG,FLIPFLOP  YES; SET IT                    90135\n         TM    BINCMNP2,BINHDXC  CONTENTION MODE ?               90135\n         BZ    *+8           NO                                  90135\n         OI    TERMFLAG,CONTENT  YES; SET IT                     90135\n         IC    R14,BINPRUSZ  GET PRIMARY RU SIZE                 86143\n         LR    R1,R14        SAVE                                86143\n         LA    R0,BINRUSZM   GET MANTISSA MASK                   86143\n         NR    R14,R0                                            86143\n         SRL   R14,4         MAKE MANTISSA                       86143\n         LA    R0,BINRUSZE   GET EXPONENT MASK                   86143\n         NR    R1,R0         ISOLATE EXPONENT                    86143\n         LA    R15,1         MAKE BASE                           86143\n         SLL   R15,0(R1)     MAKE 2**E                           86143\n         MR    R14,R14       M*2**E                              86143\n         ST    R15,TERMRUSZ  STASH RU SIZE MAXIMUM               86143\n         DROP  R2\n*        RESET LOCAL OPTIONS                                     88179\n*TSSO*   CLC   TERMDDT,=A(DDT3767)  NTO DEVICE ?                 88199\n*TSSO*   BNE   *+8           NO                                  88199\n*TSSO*   OI    TERMFLG3,TFLOF  UNTIL LATER - FORCE LOGOFF        88199\n         TM    TERMFLG3,TFLOF  FORCED USER LOGOFF ?              88188\n         BZ    LOGOTONE      NO; CHECK FOR SINGLE FORCED APPLID  88188\n         BAL   R14,UTERMOF   LOG THE USER OFF                    88188\n         OI    TERMFLG3,TFLOF  RESET THE LOGOFF                  88188\nLOGOTONE TM    TERMFLG3,TFAPL  FORCED APPLICATION LOGON ?        88220\n         BZ    LOGORHEA      NO                                  88220\n*CONSIDR NI    TERMFLG3,TFREQ  RESET USER'S PRIVIES              88179\nLOGORHEA L     R14,CVTPTR    GET THE CVT                         88185\n         AIF   ('&LOCAL' NE 'PID').NOLOGEX                       92300\n         ICM   R14,15,CVTUSER-CVTMAP(R14)  LOCAL EXTENSION?      88185\n         BZ    LOGOLOGY      NO                                  88185\n         LA    R4,UCLOUD-USERCVT-(A$LNEXT-A$LOUD)(R14) LINK-PTR  88185\nLOGOLEGO ICM   R4,15,A$LNEXT-A$LOUD(R4)  ANOTHER ?               88185\n         BZ    LOGOLOGY      NO                                  88185\n         CLC   TERMNAME,A$LTERM-A$LOUD(R4)  SAME ID ?            88185\n         BNE   LOGOLEGO                                          88185\n         ST    R4,TERMLOUD   SAVE IT                             88185\n         NI    TERMFLG3,TFREQ+TFLOF  RESET LOGON AND PRIVIES     88197\n         TM    TERMFLG3,TFLOF  IS LOGOFF FORCED ?                88197\n         BNZ   LOGOLOGY      YES; KILL LOUD                      88197\n         TM    A$LFLG1-A$LOUD(R4),A$LFGOK  VALID USER ?          88185\n         BZ    LOGOLOGY                                          88185\n         BAL   R14,UTERM     SET USER'S PRIVILEGES               88185\n         CLI   TERMAPPL,0    BACK FROM OTHER APPLICATION ?       88185\n         BH    LOGOLOGY      YES; LEAVE AS IS                    88185\n         BAL   R14,UTERMAP   TEST FOR FORCED APPLICATION AND SET IT\nLOGOLOGY ICM   R4,15,TERMLOUD  PRIOR LOGON ?                     88179\n         BZ    LOGOLOUD      NO                                  88179\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT SVC PARM AREA\n         MVC   A$SID,=C'A$RB'                                    88207\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,A$SONL,A$SAKEY+A$SBUILD) 88207\n*                            LOGOFF SESSIONS, NOT USER           88179\n         MVC   A$SBUFR,TERMLOUD  COPY LOUD                       88207\n         LA    R1,A$SVCRB                                        88207\n         SVC   249           CANCEL SESSIONS; KEEP USER          88179\n         TM    TERMFLG3,TFLOF  FORCED LOGOFF ?                   88188\n         BZ    LOGOLOUD      NO                                  88188\n         BAL   R14,UTERMOF   RESET EVERYTHING AGAIN              88188\n         MVI   A$SFCTN,A$SFVALD  VALIDATE USER                   88207\n         MVI   A$SCNTL,A$SUKEY+A$SBUILD                          88207\n         XC    A$SUID(L'A$SUID+L'A$SACCT),A$SUID  KILL USER AND ACCT\n         LA    R1,A$SVCRB    ...BUT USERID IS GARBAGE            88207\n         SVC   249           ...SO THIS CALL KILLS THE DATA      88188\n.NOLOGEX ANOP  ,                                                 91195\nLOGOLOUD NI    TERMFLG3,255-TFLOF  LOGOFF REQUEST PROCESSED      88179\n         SPACE 1\n***********************************************************************\n*    ISSUE AN OPNDST TO CONNECT NETSOL TO LOGGED-ON TERMINAL.         *\n***********************************************************************\n         SPACE 1\nOPENDST  OI    MACFLAGS,OPNSPEC        INDICATE DOING AN OPNDST(SP)\n         OI    MFLAGS,OPNDSPEC\n         L     R7,=A(OPENEND)  GET EXIT ADDRESS                  90141\n         OPNDST RPL=(PTRRPL),                                          X\n               OPTCD=(ACCEPT,SPEC,NQ),                                 X\n               EXIT=(R7),    OPENEND                                   *\n               NIB=NIBSTART\n         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST                                           *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    OPENDST                 YES. REISSUE\n         LTR   R15,R15                 CLSDST ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1                                                 84142\n         CLC   TERMNAME(4),TERMCID  PRE-ACF VTAM ?               84142\n         BNE   RETURN        NO; ASSUME THE BEST                 84142\n         MVC   TERMCID,RPLARG-IFGRPL(PTRRPL)  GET CID            84142\n         MVC   NIBCID-NIBST+NIBSTART(4),TERMCID                  84142\n         CLC   TERMCID,TERMNAME  CRUD ?                          84142\n         BNE   RETURN        NO; WAIT FOR EXIT TO BE SCHEDULED   86012\n         BAL   R7,SNOCCUR                                        84142\n         TITLE '*********  N E T S O L  -  OPNDST END EXIT'\n***********************************************************************\n*                                                                     *\n*        CHECK VALIDITY OF THE OPNDST                                 *\n*        ENTRY IS FROM THE OPNDST IN THE LOGON EXIT.                  *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nOPENEND  XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR\n*                                       IS FOR OPNDST\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(ACCEPT,SPEC)                              *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                   (R15 R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    09    NODE DEACTIVATED                     14  00           *\n*   10    00    TERMINAL UNAVAILABLE                 14  00           *\n*   10    01    OPNDST FAILED                        14  00           *\n*   10    03    VTAM IS HALTING                      14  00           *\n*   10    05    PERMANENT FAILURE IN PATH            08  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   10    11    SDT FAILED                           14  00           *\n*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *\n*   14    54    INVALID TERMINAL NAME                14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         OI    EXITFLAG,OPENEX         INDICATE IN OPNDST EXIT\n         CH    R15,HEX14               HIGHEST VALID ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB1(R15)            CHECK VALID ACTIONS\nERRTAB1  B     R0CHK1               0  CHECK IF TERM ACCEPTED\n         BAL   R7,SNOCCUR           4\n         B     FREERPL              8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         BAL   R7,SNOCCUR           C  CAN'T WRITE MSG IF NOT\n*                                      CONNECTED\n         B     OPENDST             10  REISSUE. CHECK FOR RESET\n         B     FREERPL             14  CAN'T CONNECT DEVICE\n         SPACE 1\nR0CHK1   DS    0H\n         CH    R0,HEX9                 TERM UNAVAILABLE\n         BE    RETURN                  RETURN IF SO\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*        CID OF DEVICE JUST OPNDST'ED IS NOW IN ASYNC RPL.            *\n*        SOLICIT THE DEVICE JUST CONNECTED.                           *\n***********************************************************************\n         SPACE 1\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         MVC   CID(4),RPLARG           SAVE CID IN RPL WORKAREA\n         LA    PTRNIB,NIBSTART         ADDRESS NIB\n         L     R3,NIBUSER              -> TERM TABLE ENTRY\n*LOSE*   MVC   TERMCID,RPLARG          COPY THE CID TO TTE\n         MVC   NIBCID,TERMCID  THIS GETS LOST?                   91105\n         ST    R3,RPLUSFLD             SAVE A(TTE) IN RPL FOR MSG\n         MVI   TERMFLG2,TOPEN          MARK TERM ON NETSOL\n         OI    FLAGS,FIRSTSND          FIRST SEND TO THE DEVICE\n         NI    SRPLEXT1,FF-RPLNIB      RESET SYNCHRPL\n         SPACE 1                                                 90008\n         AIF   ('&LOCAL' NE 'PID').NOLAUTF                       92300\n***********************************************************************\n*                                                                     *\n*        LOCAL - IF L.O.U.D. LOGOFF FLAG IS SET, DISCONNECT USER      *\n*                                                                     *\n***********************************************************************\n         ICM   R2,15,TERMLOUD  IS THERE A LOUD ?                 90008\n         BZ    AUTLOOK       NO                                  90008\n         TM    A$LFLG2-A$LOUD(R2),A$LFLOG  FORCED LOGOFF ?       90008\n         BNZ   LOGOFCMD      YES; DO NASTY DISCONNECT            90008\n.NOLAUTF SPACE 1\n***********************************************************************\n*        DO AUTOMATIC LOGON FOR THOSE TERMINALS THAT HAD A            *\n*        DEFAULT LOGON SPECIFIED IN THE INITIALIZATION DATA SET.      *\n***********************************************************************\n         SPACE 1\nAUTLOOK  TM    TERMFLG3,TFAPL  USER LOCKED TO APPLICATION ?      88220\n         BZ    AUTONTIM      NO; OLD CODE                        88221\n         TIME  BIN           GET THE TIME                        88220\n         C     R0,TERMDTIM   MORE THAN 1 MINUTE ELAPSED ?        88220\n         BH    OPNDSTC       YES; GIVE USER CHANCE TO LOG OFF    88220\n         B     AUTOTIME      ELSE TRY APPLICATION AGAIN          88179\nAUTONTIM OC    TERMDAPL,TERMDAPL       IS THERE A DEFAULT APPL?  88179\n         BZ    OPNDSTC                 NO  => GO WRITE MSG TO DEVICE\n         TM    TERMFLG3,TFREQ  PRIOR LOGON REQUIRED ?            88179\n         BZ    AUTOTIME      NO; CONNECT                         88179\n         TM    TERMFLG3,TFLON  LOGGED ON ?                       88179\n         BZ    OPNDSTC       NO; FORCE LOGON SCREEN              88179\n         SPACE 1\n***********************************************************************\n*        TO PREVENT LOOPING IN AUTOMATIC LOGON, AUTO LOGON WILL       *\n*        BE TERMINATED IF MORE THAN 3 LOGONS FOR A TERMINAL ARE       *\n*        PROCESSED IN A 60 SECOND TIME PERIOD.                        *\n***********************************************************************\n         SPACE 1\nAUTOTIME TIME  BIN                     GET TIME IN .01 SECS      88179\n         C     R0,TERMDTIM             < 60 SECS SINCE LAST LOGON?\n         BH    AUTONEW                 NO  => ASSUME NEW AUTO LOGON\n         LH    R1,TERMDCNT             YES => INCR\n         LA    R1,1(,R1)                        LOOP\n         STH   R1,TERMDCNT                        COUNTER\n         CH    R1,HEX2                 MORE THAN 3 TIMES IN 60 SECS?\n         BNH   AUTOINQR                NO  => GO INQUIRE RE APPL STATUS\n         MVC   KICKBACK+12(8),TERMNAME  SHOW TERMID              88221\n         LA    R14,TERMAPPL  POINT TO FORCED APPLICATION ID      88224\n         TM    TERMFLG3,TFAPL  USER LOCKED TO APPLICATION ?      88224\n         BNZ   *+8           YES; SHOW IT                        88224\n         LA    R14,TERMDAPL   ELSE POINT TO FORCED TERM'S APPL   88224\n         MVC   KICKBACK+33(8),0(R14)  SHOW REJECTING APPLID      88224\n         WTO   MF=(E,KICKBACK)  LET OPSIE KNOW                   88221\n         B     OPNDSTC                 YES => SKIP AUTO LOGON\nAUTONEW  A     R0,=AL4(100*60)         ADD 60 SECS TO CURRENT TIME\n         ST    R0,TERMDTIM  AND STORE FOR LATER\n         XC    TERMDCNT,TERMDCNT       ZERO LOOP COUNTER\n***********************************************************************\n*                                                                     *\n*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *\n*    OF THE DEFAULT LOGON APPLICATION FOR THIS TERMINAL.              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nAUTOINQR LA    R14,TERMAPPL  POINT TO FORCED APPLICATION ID      88222\n         TM    TERMFLG3,TFAPL  USER LOCKED TO APPLICATION ?      88222\n         BNZ   AUTOINQS      YES; TRY IT                         88222\n         LA    R14,TERMDAPL   ELSE POINT TO FORCED TERM'S APPL   88222\nAUTOINQS MVC   APPLID,0(R14) SET DESIRED APPLICATION NAME        88222\n         LA    PTRNIB,SYNCHNIB         PUT THE APPLICATION\n         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT\n         SPACE 1\n***********************************************************************\n*    INQUIRE FOR THE APPLICATION STATUS                               *\n***********************************************************************\n         SPACE 1\nINQUIREA OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT\n         OI    MFLAGS,INQAPPST\n         L     R15,=A(FRSYNRPL)  GET FRESH SYNCHRONOUS RPL       86065\n         MVC   SYNCHRPL(FRSYNL),0(R15)  AND RE-INITIALIZE        86065\n         ST    R3,SYNUSFLD             SAVE A(TTE) IN SYNCHRPL USRFLD\n         INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=APPSTAT,                                          X\n               NIB=SYNCHNIB\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n         NI    SRPLEXT1,FF-RPLNIB      NIB NO LONGER NEEDED\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  0C  06           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX14     HIGHEST POSSIBLE ACTION?            88185\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R15,R15       ERROR CODE ?                        87186\n         BZ    ERRTAB3       NO                                  87186\n         TM    UFLAGS,SHUTDOWN+UFGIGNER  RECYCLING ?             87186\n         BNZ   OPNDSTC       SKIP AUTO LOGON                     87186\n         B     ERRTAB3(R15)            CHECK VALID ACTIONS\nERRTAB3  B     R0CHK3               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS\n*                                      IRRELEVANT\n         B     OPNDSTC              C  DEFAULT APPL IS UNKNOWN SO\n*                                      SKIP AUTO LOGON\n         B     INQUIREA            10  REISSUE.  NO NEED TO\n*        B     INQBADAP      14  NETSOL/INTAB/VTAMLST OUT OF SYNCH\n         SPACE 1                                                 88185\nINQBADAP MVC   INQBADWO+4+17(8),TERMNAME                         88185\n         MVC   INQBADWO+4+34(8),APPLID                           88185\nINQBADWO WTO   'BCSC197 TERM=********, APPLID=******** UNDEFINED',     *\n               ROUTCDE=(8),DESC=(7)                              88185\n         B     OPNDSTC       WRITE 'CLOSED' SCREEN               88185\n         SPACE 1\nR0CHK3   CH    R0,=H'10'     APPLICATION IS PEEVED ?             93169\n         BE    OPNDSTC       YES; MAKE 'CLOSED' SCREEN           93169\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2                                                 90120\n***********************************************************************\n*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *\n*    CODES ARE:                                                       *\n*                                                                     *\n*        0 - ACTIVE AND AVAILABLE                                     *\n*        4 - INACTIVE                                                 *\n*        8 - NEVER ACCEPTS A LOGON                                    *\n*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *\n*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *\n***********************************************************************\n         SPACE 2\n         SLR   R15,R15                 CLEAR  REG 15\n         ICM   R15,1,SYNFDB3 LOAD AND TEST FEED-BACK             88186\n         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.\n*OLD*    B     STATUS3(R15)            BRANCH IN TABLE\n*OLD*S3  B     DAPACTIV             0  DO AUTO LOGON\n*OLD*    B     OPNDSTC              4  SKIP AUTO LOGON\n*OLD*    B     OPNDSTC              8  SKIP AUTO LOGON\n*OLD*    B     OPNDSTC             12  SKIP AUTP LOGON\n*OLD*    B     OPNDSTC             16  SKIP AUTO LOGON\n         BNZ   OPNDSTC       SKIP AUTO LOGON                     88186\n         SPACE 1\nDAPACTIV L     R4,TERMLPAD   SET A(LOGON DATA)                   87131\n         L     R2,TERMLPLN   SET L(LOGON DATA)                   87131\n         TM    UFLAGS,SHUTDOWN+UFGIGNER  RECYCLING ?             87187\n         BNZ   OPNDSTC       YES; BYPASS AUTO LOGON              87187\n         TM    TERMFLG3,TPRIVY  PRIVILEGED TERMINAL ?            87187\n         BNZ   FILLNIB       YES; PROCEED WITH LOGON             87187\n         TM    UFLAGS,UFGSYS  RUNNING IN LOCKED MODE ?           87187\n         BZ    FILLNIB       BRANCH INTO LOGON PROCESSING        87187\n         SPACE 1\n***********************************************************************\n*        NO AUTO LOGON IS BEING DONE FOR THIS TERMINAL SO             *\n*        GO SOLICIT LOGON INFORMATION FROM THE TERMINAL USER.         *\n***********************************************************************\n         SPACE 1\nOPNDSTC  TM    UFLAGS,INITDLAY  DELAY DURING START-UP ?          87256\n         BZ    NINITDLY      NO                                  87256\n         STIMER WAIT,BINTVL==A(10)  WAIT 0.1 SECONDS             87256\nNINITDLY B     OPSEND        JOIN RESEND COMMON CODE             86160\n         TITLE '*********  N E T S O L  -  RECEIVE ANY EXIT'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN THE OUTSTANDING REC-ANY      *\n*    COMPLETES.                                                       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS TO THE RPL USED FOR THE READ-ANY (IGFRPL)      *\n*                                                                     *\n*               THE CID FIELD OF THIS RPL HAS CID OF DEVICE           *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRECEND   MHEAD ,                                                 90141\n         LA    R13,GENSAVE             POINT TO SAVE-AREA\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         SPACE 1\n***********************************************************************\n*        ISSUE NEW READ SO WE CAN HANDLE MORE THAN 1 LOGON AT A TIME. *\n***********************************************************************\n         SPACE 1\n         LR    R7,R1                   SAVE R7 AROUND THE REC ANY CODE\n         BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE\n         BAL   R14,RECSUB              ISSUE A RECEIVE (ANY)\n         SPACE 1\n         LR    PTRRPL,R7               RESTORE THE INPUT RPL @\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         ICM   R3,15,RPLUSFLD          -> TTE                    92273\n         BZ    RETURN        SHOULD NOT HAVE HAPPENED            92273\n         ST    R5,TERMCRPL             SAVE A(RPL)\n         OI    EXITFLAG,RECEX\n         SPACE 1\n***********************************************************************\n*        SAVE CID OF DEVICE FROM RPL ARG FIELD.                       *\n*        GET LENGTH OF RECORD READ. THIS WILL BE DECREMENTED          *\n*        IF DEVICE CONTROL CHARACTERS ARE REMOVED BEFORE INTRPRET.    *\n*                                                                     *\n*        NOTE: INFO IN RPL MAY NOT BE VALID IF CHECK RETURNS          *\n*              AN ERROR.                                              *\n***********************************************************************\n         SPACE 1\n         MVC   CID(4),RPLARG           GET CID FROM RPL\n         MVC   RECLEN(4),RPLRLEN       GET RPL RECORD LENGTH\n         SPACE 1\n         OI    MFLAGS,RECA             TELL ERREXIT THAT ERRORS\n*                                       ARE FOR REC(ANY)\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                      IS ENTERED IF ERRORS HAVE\n         NI    MFLAGS,255-(RECA)       RESET READ INDICATOR\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CHECK OF READ (ANY)                              *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                   (R15  R0)         *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                 00  00          *\n*   04    04    EXCP. CONDITION ON INCOMING MESSAGE                   *\n*                                                                     *\n*             SSENSEI/SSENSMI                                         *\n*                80     XX        PATH ERRORS         14  00          *\n*                80     05        NO SESSION COND.    08  04          *\n*                40     XX        RH   ERRORS         SNOCCUR         *\n*                20     XX        STATE ERRORS        08  04          *\n*                10     03        FUNCTION \u00ac SUPPORTED08  00          *\n*                10     XX        REQUEST ERRORS      SNOCCUR         *\n*                08     00        BRACKET ERROR       18  00          *\n*                08     01        REQUEST REJECT      08  00          *\n*                08     02        INTV REQ            14  00          *\n*                08     13        BRACKET ERROR       18  00          *\n*                08     2B        PRES. SPACE INT. LO 18  00          *\n*                08     2D        SLU BUSY            14  00          *\n*                                                                     *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *\n*   0C    01    I/O ERROR.  DEVICE NOT USABLE         08  00          *\n*   0C    02    TEST REQUEST SET (LOSTTERM)           14  00          *\n*   0C    07    CONNECT REC. IN PROGRESS              14  00          *\n*   0C    08    LU RESTARTED (LOSTTERM)               14  00          *\n*   0C    0A    REQU. CANCEL. BY RESETR               SNOCCUR         *\n*   0C    0B    CANCELED BY CLSDST                    14  00          *\n*   0C    0C    REQUEST CANCEL. BY CLEAR              08  04          *\n*   10    05    PERMANENT PATH FAILURE                08  00          *\n*   10    07    REQUEST CANCEL BY VARY (LOSTTERM)     14  00          *\n*   10    09    TERMINATE SELF OR LOGOFF (LOSTTERM)   14  00          *\n*   10    0F    BUFFERS FILLED (LOSTTERM)             14  00          *\n*   10    10    TERMINATE SELF COMMAND                08  04          *\n*   10    0C    DIAL-IN DISCONNECT                    08  00          *\n*   14    12    CLSDST IN PROGRESS                    14  00          *\n*   14    32    REQUEST INVALID FOR SPECIFIED DEVICE  08  00          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX18               HIGHEST POSSIBLE ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB2(R15)            CHECK VALID ACTIONS\nERRTAB2  B     R0CHK2               0  VALID DATA FROM READ?\n         BAL   R7,SNOCCUR           4\n         B     RELOPNB              8  CHECK IF WE WANT TO REOPEN\n         BAL   R7,SNOCCUR           C\n         B     RESEND               10 REISSUE\n         B     FREERPL              14\n         B     RESEND               18\n         SPACE 1\nRELOPNB  LTR   R0,R0                   DO OPNDST AFTER CLSDST ?\n         BZ    RELEASE\nRELOPNS  OI    FLAGS,RELOPND           SAY WE WANT TO REOPEN AFTER RELS\n         B     RELEASE\n         SPACE 1\nR0CHK2   DS    0H\n         LTR   R0,R0\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         TM    RPLCNTDC,RPLLUS         DID WE RECEIVE LUSTAT ?\n         BO    LUSTATUS                YES, GO HANDLE IT\n         TM    RPLCNTDC,RPLSIGNL  USER HIT ATTENTION ?           88304\n         BNZ   RESENDSG      YES; SEND AGAIN                     89338\n         ICM   R2,15,RECLEN  ANY INPUT AT ALL ?                  86159\n         BNZ   R0CHK2L1      YES                                 86159\n         CLC   =A(DDT3767),TERMDDT  NTO DEVICE ?                 86159\n         BE    FREERPL       YES; IGNORE, AND DON'T SET LOGPROC  86159\n         SPACE 1\nR0CHK2L1 TM    TERMFLAG,LOGPROC        HAS IMPATIENT USER ISSUED\n*                                      A SECOND LOGON SEQUENCE WHILE\n*                                      THE FIRST IS IN PROGRESS?\n         BO    FREERPL                 YES => IGNORE THIS REQUEST\n         OI    TERMFLAG,LOGPROC        NO  => SET LOGON BEING PROCESSED\n         SPACE 1\n         LA    R6,IOAREA               POINT TO DATA RECEIVED\n         LTR   R2,R2         ANY TEXT RECEIVED ?\n         BZ    RESENDAP      NO; SEND INVITATION AGAIN           88179\n         LA    R3,L'IOAREA             COMPARE THE RECLEN WITH\n         CR    R2,R3                    THE READ BUFFER LENGTH.\n         BNH   GOEDIT                  BUFFER LENGTH GREATER\n*                                       THAN INPUT RECORD.\n         LR    R2,R3                   ONLY THE FIRST 80 BYTES\n*                                       WILL BE READ IN.\n         SPACE 1\n***********************************************************************\n*        BRANCH TO INPUT EDIT ROUTINE FOR THE APPROPRIATE DEVICE TYPE.*\n***********************************************************************\n         SPACE 1\nGOEDIT   DS    0H\n         L     R3,RPLUSFLD             LOAD A(TTE)\n         L     R9,TERMDDT              LOAD A(DDT FOR DEVICE)\n         L     R15,DDTEDIT             LOAD A(DEVICE EDIT ROUTINE)\n         BR    R15                     GO EDIT INPUT\n         TITLE '*********  N E T S O L  -  INPUT EDIT ROUTINE FOR 3270'\n***********************************************************************\n*                                                                     *\n*        S32EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3270       *\n*        DEVICE CONTROL CHARACTERS.                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nS32EDIT  DS    0H\n         CLI   0(R6),CLEARKEY          IS IT 'CLEAR' KEY ?\n         BE    RESENDAP      YES; ASK FOR INPUT AGAIN            88179\n         CLI   0(R6),PA1KEY  PA1 - LOGOFF REQUEST ?              88220\n         BE    LOGOFCMD      YES; DO IT                          88220\n         SPACE 1\n***********************************************************************\n*        NOT 'CLEAR' KEY, CHECK FOR OTHER FUNCTION KEY DEPRESS.  IF   *\n*        IT IS A FUNCTION KEY THE DATA WILL BE PASSED DIRECTLY TO     *\n*        INTERPRET, OTHERWISE THE DATA POINTER WILL BE UPDATED TO     *\n*        SKIP THE 3270 DEVICE CONTROL SEQUENCE.                       *\n***********************************************************************\n         SPACE 1\nS32PFK   DS    0H\n         MVI   1(R6),C' '    CLEAR CURSOR ADDRESS                85328\n         MVI   2(R6),C' '    DITTO                               85328\n         SLR   R0,R0                                             85328\n         IC    R0,0(,R6)     LOAD COMPARE BYTE                   85328\n         LA    R14,S32AIDS   LOAD AIDS TABLE                     85328\n         LA    R15,S32AIDN   GET NUMBER OF ENTRIES               85328\nS32PFKLP CLM   R0,1,0(R14)   MATCH ?                             85328\n         BL    S32PFKUP      NO                                  85328\n         CLM   R0,1,1(R14)   IN RANGE ?                          85328\n         BH    S32PFKUP      NO                                  85328\n         IC    R15,0(,R14)   GET START OF RANGE                  85328\n         SR    R0,R15        GET OFFSET FROM START OF RANGE      85328\n         IC    R15,2(,R14)   GET DESIRED VALUE                   85328\n         AR    R0,R15        MAKE PFK NUMBER                     85328\n         MVC   0(6,R6),=CL8' '  CLEAR CURSOR, ATB BYTES          87362\n         C     R0,=F'10'     ONE OR MORE ?                       85328\n         BNL   S32PFK10      MORE                                85328\n         STC   R0,0(,R6)     STASH BACK                          85328\n         B     S32PFK00      MAKE NUMERIC                        85328\nS32PFK10 SRDA  R0,32         PREPARE FOR DIVIDE                  85328\n         D     R0,=F'10'     DIVIDE                              85328\n         STC   R0,1(,R6)                                         85328\n         STC   R1,0(,R6)                                         85328\n         OI    1(R6),C'0'    MAKE UNITS NUMERIC                  85328\nS32PFK00 OI    0(R6),C'0'    MAKE TENS OR UNITS NUMERIC          85328\n         B     INTRPRET      GO TO PFK LOOKUP                    85328\nS32PFKUP LA    R14,3(,R14)   BUMP TO NEXT TABLE ENTRY            85328\n         BCT   R15,S32PFKLP  TRY IT                              85328\n         SPACE 1\nS32ENTER DS    0H\n         CLI   0(R6),ENTERKEY          IS IT THE ENTER KEY?\n         BNE   BADINPUT\n         LA    R3,3                    USER MIGHT HAVE HIT\n         CR    R2,R3                   ENTER KEY ONLY BUT NO LOGON\n         BNH   RESENDAP                IF SO, REWRITE THE SCREEN 88179\n         SPACE 1\n         LA    R1,6\n         AR    R6,R1                   BYPASS SBA 3270 CONTROL + ORDER\n         SR    R2,R1                   ALLOW FOR DECREASE\n         BNP   BADINPUT      INVALID IF NOTHING LEFT\n         B     INTRPRET                GO INTERPRET LOGON SEQ\n         SPACE 1                                                 85328\nS32AIDS  DC    X'F1,F9,01'   PFK1-9 => 1 TO 9                    85328\n         DC    X'7A,7C,0A'   PFK10-12                            85328\n         DC    X'C1,C9,0D'   PFK13-21 (NO LONGER FOLDED)         87225\n         DC    X'4A,4C,16'   PFK22-24 (NO LONGER FOLDED)         87225\nS32AIDN  EQU   (*-S32AIDS)/3   NUMBER OF ENTRIES                 85328\n         SPACE 1                                                 85328\n***********************************************************************\n*                                                                     *\n*        S37EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3767       *\n*        DEVICE CONTROL CHARACTERS.                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nS37EDIT  LTR   R0,R2         ANY INPUT ?                         86152\n         BNP   RESENDAP      HUH ?                               88179\n         LR    R14,R6        GET TEXT START                      86152\n         LR    R15,R6        DITTO                               86152\n         SLR   R3,R3         CLEAR FOR CR                        86152\n         LA    R1,X'40'      CONSTANT BLANK                      86152\nS37EDLUP IC    R3,0(,R14)    GET NEXT CHARACTER FOR INSPECTION   86152\n         CR    R3,R1         PRINTABLE CHARACTER ?               86152\n         BNL   S37EDPUT      YES; PROCESS IT                     86152\n         CLI   0(R14),X'16'  BACKSPACE ?                         86152\n         LR    R3,R1         BUT REPLACE BY BLANK                86152\n         BNE   S37EDPUT      NO; JUST PROCESS AS BLANK           86152\n         STC   R1,0(,R14)    CLEAR IT OUT                        86152\n         CR    R15,R6        POSSIBLE TO BACK-UP ?               86152\n         BNH   S37EDB14      NO; JUST BUMP 14                    86152\n         BCTR  R15,0         BACK-UP ONE SPACE                   86152\n         STC   R1,0(,R15)    CLEAR OLD BYTE                      86166\n         B     S37EDB14      AND AVOID R15 INCREMENTATION        86166\nS37EDPUT STC   R1,0(,R14)    CLEAR THE SOURCE LOCATION           86152\n         STC   R3,0(,R15)    STORE THE NEW BYTE                  86152\n         LA    R15,1(,R15)   SET NEW OUTPUT LOCATION             86152\nS37EDB14 LA    R14,1(,R14)   SET NEW INPUT                       86152\n         BCT   R0,S37EDLUP   REPEAT FOR ALL                      86152\n         B     INTRPRET      PROCESS                             86152\n         TITLE '*********  N E T S O L  -  COMMAND LOOKUP'\n***********************************************************************\n*                                                                     *\n*    SCAN NETSOL'S COMMAND TABLE FOR AN ENTRY MATCHING THE LOGON DATA *\n*    ENTERED FROM THE TERMINAL.  IF A MATCH IS FOUND, THE SPECIFIED   *\n*    CMD ROUTINE IS BRANCHED TO. OTHERWISE, AN ERROR MESSAGE IS       *\n*    WRITTEN TO THE TERMINAL INDICATING INVALID LOGON DATA.           *\n*                                                                     *\n*    THE COMMAND CAN BE EITHER:                                       *\n*           - A REQUEST FOR LOGON TO A VTAM APPLICATION PROGRAM, OR   *\n*           - A REQUEST FOR A SERVICE FROM NETSOL, SUCH AS, LOGOFF    *\n*                                                                     *\n*    INPUT :                                                          *\n*        R2 - LENGTH OF LOGON DATA                                    *\n*        R6 - A(LOGON DATA IN DATA BUFFER)                            *\n*                                                                     *\n*    OUTPUT:                                                          *\n*        R0 - ERROR MSG # IF NO ENTRY FOUND                           *\n*        R1 - A(MATCHING COMMAND TABLE ENTRY)                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADINPUT LA    R0,MSG02                INPUT NOT RECOGNISED\n         B     SENDMSG\n         SPACE 1\nINTRPRET LTR   R2,R2         ANY INPUT ?                         86146\n         BNP   RESENDAP      NO; TRY AGAIN                       88179\n         CLI   0(R6),C' '    LEADING NON-BLANK ?                 86152\n         BH    INTRNBLK      YES                                 86152\n         LA    R6,1(,R6)                                         86152\n         BCTR  R2,0                                              86152\n         B     INTRPRET      KEEP SPACING                        86152\nINTRNBLK STC   R2,DATASEQL             SAVE LOGON DATA LENGTH    86152\n         ST    R6,DATAPTR              SAVE A(LOGON DATA)\n*        CONVERT LOGON DATA TO UPPER CASE\nLOWTOUP  CLI   0(R6),X'11'   SBA ?                               88179\n         BE    *+8           YES; LEAVE IT                       88179\n         OI    0(R6),X'40'             MAKE CURRENT CHAR UPPER CASE\n         LA    R6,1(R6)                GET\n         BCT   R2,LOWTOUP                  NEXT CHAR\n         SPACE 1                                                 88206\n         IC    R2,DATASEQL   RELOAD LENGTH                       88206\n         L     R6,DATAPTR    AND ADDRESS                         88206\n         LR    R15,R6        COPY START                          88206\n         LR    R0,R2         COPY LENGTH                         88206\n         SH    R0,=H'8'      LENGTH OF 'LOGMODE()' MINUS 1       88206\n         BNP   INTLOGMX      SKIP                                88206\nINTLOGMD CLC   =C'LOGMODE(',0(R15)  LOGMODE REQUEST ?            88206\n         BNE   INTLOGMN      NO                                  88206\n         L     R3,RPLUSFLD   GET TERM ENTRY                      88207\n         TM    TERMFLAG,LETMODE ALLOWED TO CHANGE LOGMODE ?      88207\n         BZ    BADINPUT      NO; FAIL                            88207\n         MVI   0(R15),C' '   WIPE IT                             88206\n         MVC   1(7,R15),0(R15)  CLEAR ALL                        88206\n         MVC   MODENAM,0(R15)  CLEAR NAME                        88206\n         LA    R14,MODENAM   SET DESTINATION                     88206\n         LA    R1,8          MAKE SURE OF TRAILING ')'           88206\nINTLOGMF CLI   8(R15),C')'   END OF NAME ?                       88206\n         BE    INTLOGMR      YES; BLANK AND RESTART              88206\n         MVC   0(1,R14),8(R15)  COPY IT                          88206\n         MVI   8(R15),C' '   CLEAR IT                            90127\n         LA    R14,1(,R14)                                       88206\n         LA    R15,1(,R15)                                       88206\n         BCT   R0,*+8        OK IF MORE                          88206\n         B     BADINPUT      SYNTAX ERROR (MSG 02)               88206\n         BCT   R1,INTLOGMF   DO UNTIL )                          88206\nINTLOGMR CLI   8(R15),C')'   TRAILING PARENTHESIS ?              88206\n         BNE   BADINPUT      NO; ERROR                           88206\n         MVI   8(R15),C' '   CLEAR IT                            88206\n*DEFER*  CLC   TERMMODE(6),MODENAM  SAME MAJOR TYPE ?            88213\n*DEFER*  BE    INTRPRET      YES; HONOR IT                       88213\n*DEFER*  TM    TERMFLG3,TPRIVY  PRIVILEGED ?                     88213\n*DEFER*  BZ    BADINPUT      NO; REJECT THE REQUEST              88213\n         B     INTRPRET      GO TO SKIP TRAILING BLANKS          88206\nINTLOGMN LA    R15,1(,R15)                                       88206\n         SH    R0,=H'1'                                          88206\n         BP    INTLOGMD      TRY AGAIN                           88206\nINTLOGMX DS    0H            END OF LOGMODE INSERTION            88206\n*        SAVE DATA FOR USE IN CLSDST(PASS)\n         LA    R14,DATASEQ   MOVE INPUT TO WORK AREA             88311\n         LA    R15,L'DATASEQ                                     88311\n         LR    R0,R6         'FROM' ADDRESS                      88311\n         LR    R1,R2         'FROM' LENGTH                       88311\n         MVCL  R14,R0        COPY (OR LEFT-ADJUST)               88311\n         SPACE 1\n*        SEARCH COMMND TABLE FOR MATCHING COMMAND TEXT\n         SPACE 1\n         L     R1,=A(PRELOGON)  GET PRE-LOGON COMMANDS           88179\n         L     R3,RPLUSFLD   GET TERM ENTRY                      88179\n         TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BZ    CMDSCAN1      NO                                  88179\n         TM    TERMFLG3,TFLON  LOGON COMPLETED ?                 88179\n         BZ    CMDTABLP      NO; RESTRICT TO LOCAL COMMANDS      88179\nCMDSCAN1 L     R1,=A(PRECMDTB)  SET FOR VTAM LOGON APPLID SCAN   88172\n         B     CMDTABLP      AND DO NORMAL SCAN                  87186\nCMDSCAN2 L     R1,=A(CMDTAB)                                     88172\nCMDTABLP C     R1,=A(CMDTABND)  END OF TABLE ?                   88172\n         BL    CMDTABL1      NO                                  88172\n         LA    R0,MSG07                YES => LOAD ERROR MSG #\n         L     R3,RPLUSFLD   GET TERM ENTRY                      88179\n         CLI   TERMMSGX,MSG20  LOGON REQUEST LAST WRITE ?        89066\n         BE    FAKEPSWD      YES; FAKE PASSWORD COMMAND          89066\n         TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BZ    SENDMSG       NO; SEND ERROR MESSAGE              88179\n         TM    TERMFLG3,TFLON  LOGON COMPLETED ?                 88179\n         BNZ   SENDMSG       YES; SEND MESSAGE                   88179\nFAKEPSWD L     R1,=A(PSWCMD) SET FOR FAKE MATCH                  89066\n         LA    R6,DATASEQ    POINT TO LOGON DATA AGAIN           88193\n         SLR   R2,R2                                             88193\n         IC    R2,DATASEQL   RESTORE THE LENGTH                  88193\n         B     CMDSETUP      AND PROCESS LOGON                   88179\nCMDTABL1 SLR   R2,R2         CLEAR FOR IC                        88185\n         IC    R2,CMDTEXTL(R1)         LOAD LENGTH OF CMDTEXT    88185\n         LA    R4,CMDTEXT(,R1)         PT @ CMDTEXT\n         LA    R6,DATASEQ              PT @ LOGON DATA\nCMDTABL2 CLC   0(1,R4),0(R6)           DOES THIS CHAR MATCH?\n         BNE   CMDTABL3                NO => GET NEXT ENTRY\n         LA    R4,1(,R4)               YES => COMPARE\n         LA    R6,1(,R6)                        NEXT\n         BCT   R2,CMDTABL2                        CHARACTER PAIR\n*        TO ENSURE UNIQUENESS OF CMDS, COMMAND TEXT MUST\n*        END WITH A BLANK OR BE AT THE END OF THE CMD BUFFER.\n         CLI   0(R6),X'40'             IS NEXT CHAR A BLANK?\n         BNH   CMDFOUND                YES => CMD IS A MATCH     86146\n         BCTR  R6,0                                              92320\n         CLI   0(R6),C'('    APPLID ?                            92320\n         BE    CMDFOUND      YES; ACCEPT AS TERMINATOR           87186\nCMDTABL3 LA    R1,CMDTABL(,R1)         NO => GET\n         B     CMDTABLP                          NEXT ENTRY\n         SPACE 1\n*        MATCHING CMD HAS BEEN FOUND\n         SPACE 1\n*        CHECK IF CMD IS VALID FOR THE SOURCE OF THE CMD\nCMDFOUND L     R3,RPLUSFLD   RELOAD TERM ENTRY                   86127\n         TM    UFLAGS,INIT             CMD ISSUED DURING NETSOL INIT?\n         BZ    CMDCKTRM                NO  => CHECK IF CMD OK FROM TERM\n         TM    CMDFLAG(R1),CMDINIT     CMD VALID FROM SYSIN?\n         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK\n         B     CMDSETUP      SKIP SYSTEMS ONLY CHECK AND DO      86125\nCMDCKTRM TM    TERMFLAG,TERMCONS  IS THIS A CONSOLE ?            88192\n         BNZ   CMDCKCON      YES; CHECK CONSOLE                  88192\n         TM    CMDFLAG(R1),CMDTERM  VALID FROM TERMINAL ?        88192\n         BNZ   CMDCKCKD      YES; PROCEED                        88192\n         B     CMDTABL3      LOOK FOR ALTERNATIVE ENTRY          88192\nCMDCKCON TM    CMDFLAG(R1),CMDCONS  VALID FROM CONSOLE ?         88192\n         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK\n*        SET UP PARAMETERS FOR GETPARM SUBROUTINE\nCMDCKCKD TM    TERMFLG3,TFREQ  LOGON REQUESTED ?                 88185\n         BZ    CMDSETGP      NO; USE CODE FOR OPEN TERMINALS     88185\n         CLI   CMDAPPF(R1),0  APPLICATION GROUP RESTRICTION ?    88185\n         BE    CMDSETGP      NO                                  88185\n         TM    TERMFLG3,TFLON  USER LOGGED ON ?                  88185\n         BZ    CMDNAUTH      NO; UNAUTHORIZED                    88185\n         AIF   ('&LOCAL' NE 'PID').NOCMDEX                       92300\n         L     R14,TERMLOUD  GET USER'S DATA                     88185\n         SLR   R0,R0                                             88185\n         IC    R0,A$USUBFG-A$LOUD(,R14)  LOAD AUTHORIZED SYSTEMS 88185\n         SLR   R15,R15                                           88185\n         IC    R15,CMDAPPF(,R1)  LOAD THE CURRENT GROUP          88185\n         NR    R0,R15        IS THE USER AUTHORIZED ?            88185\n         BZ    CMDNAPPL      NO                                  88185\n         CLI   CMDAPPF(R1),A$USFCIC  CICS ?                      88185\n         BNE   CMDSETGP      CONTINUE WITH OLD CHECKS            88185\n         LA    R15,A$UCICNM-A$LOUD(,R14) POINT TO MASK           88185\n         LA    R0,CMDVAPPL(,R1)  POINT TO TEST VALUE             88185\n         BAL   R14,MASKTEST  CHECK FOR (MASKED) COMPARE          88185\n           B   CMDSETGP      MATCH; PROCEED                      88185\n         LA    R15,8(,R15)   TRY OTHER VALUE                     88185\n         BAL   R14,MASKTEST                                      88185\n           B   CMDSETGP      MATCH; ALLOW                        88185\n         TM    TERMFLG3,TPRIVY  PRIVILEGED ?                     88185\n         BZ    CMDNAPPL      NO; FAIL                            88185\n.NOCMDEX ANOP  ,                                                 91195\nCMDSETGP TM    TERMFLG3,TPRIVY    PRIVILEGED USER ?              86065\n         BNZ   CMDSETUP      YES                                 86065\n         L     R0,=A(CMDUNTAB)  POINT TO UNPRIVILEGED TABLE      88172\n         TM    TERMFLG3,TFAPL  FORCED USER APPLID ?              88220\n         BNZ   CMDSETUA      YES                                 88220\n         CLI   TERMDAPL,0    ANY FORCED APPLICATION ?            87137\n         BNH   CMDSETOP      NO; CHECK FOR LOCKED MODE           87137\nCMDSETUA CR    R1,R0         PRIVILEGED COMMAND ?                88192\n         BNL   CMDSETUP      NO; ALLOW                           88192\n         LA    R0,MSG08      XXX IS NOT ACTIVE                   87137\n         MVC   APPLID,TERMAPPL  COPY FORCED APPLICATION ID       88222\n         TM    TERMFLG3,TFAPL  FORCED APPLICATION ?              88220\n         BNZ   SENDMSG       YES; SEND FALSE MESSAGE             88220\n         MVC   APPLID,TERMDAPL  SHOW UNAVAILABLE APPLICATION     88220\n         B     SENDMSG       SEND FALSE MESSAGE                  87137\nCMDSETOP TM    UFLAGS,UFGSYS   SYSTEMS ONLY ?                    86065\n         BZ    CMDSETUP      NO; PROCEED                         86065\n         CR    R1,R0         PRIVILEGED COMMAND ?                88192\n         BNL   CMDSETUP      NO; ALLOW (PRIVY CMDS CHECK AGAIN)  88192\nCMDNTNOW LA    R0,MSG14      SET FOR UNTIMELY REQUEST            87187\n         B     SENDMSG       AND FAIL THIS REQUEST               86065\nCMDNAPPL LA    R0,MSG05      SET UNAUTHORIZED REQUEST            88192\n         B     SENDMSG       AND FAIL                            88192\nCMDNAUTH LA    R0,MSG18      SET UNAUTHORIZED REQUEST            87187\n         B     SENDMSG                                           87187\nCMDSETUP TM    TERMFLG3,TPRIVY  PRIVILEGED USER ?                88192\n         BNZ   CMDSETGO      YES; PROCEED                        88192\n         TM    CMDFLAG(R1),CMDAUTH  RESTRICTED COMMAND ?         88192\n         BNZ   CMDNAUTH      YES; FAIL                           88192\nCMDSETGO ST    R6,GPDATAP    SAVE CURRENT CMD BUFFER PTR         88192\n         LA    R2,DATASEQ              CALCULATE\n         SR    R6,R2                     LENGTH OF CMD\n         SLR   R2,R2                   CALCULATE\n         IC    R2,DATASEQL               LENGTH OF TEXT\n         SR    R2,R6                       REMAINING IN CMD BUFFER\n         STH   R2,GPDATAL              SAVE FOR USE BY GETPARM\n*        BRANCH TO CMD PROCESSING ROUTINE\n         L     R3,RPLUSFLD   ENSURE CORRECT TTE ADDRESS          88192\n         L     R2,CMDROUTA(,R1)        LOAD A(CMD ROUTINE)\n         BR    R2                        AND BR TO IT\n         SPACE 1                                                 87186\n*        BUFFER BEGINS WITH 'LOGON' - SCAN FOR APPLID (AND OUR SHORTER\n*        APPL().  IF FOUND, USE CONTENTS OF () AS NAME, AND SCAN 87186\n*        FOR DATA(). IGNORE LOGMODE() AND OTHER STUFF)           87186\n*                                                                87186\nPRETEST  L     R6,DATAPTR    POINT TO INPUT                      87186\n         SLR   R4,R4                                             87186\n         IC    R4,DATASEQL   GET LENGTH OF INPUT                 87186\n         LA    R0,4+1        SET LENGTH FOR 'APPL' AND '('       87186\nPRETELP  CLC   =C'APPLID(',0(R6)  NON-TSO ENTRY ?                87186\n         BE    PRETE6        MAYBE                               87186\n         CLC   =C'APPL(',0(R6)  ALTERNATE FORM ?                 87186\n         BE    PRETE4        YES                                 87186\n         LA    R6,1(,R6)     UP, UP                              87186\n         BCT   R4,PRETELP    . . . AND AWAY                      87186\n         B     CMDSCAN2      NO; REAL TSO (?)                    87186\nPRETE6   LA    R0,2+4+1      SET FOR 'APPLID(' LENGTH            87186\nPRETE4   AR    R6,R0         SKIP FOR 'APPL' AND '('             87186\n         SR    R4,R0         ADJUST RESIDUAL LENGTH              87186\n         SLR   R2,R2                                             87186\n         SLR   R3,R3                                             87186\nPRETEAP  LTR   R4,R4         ANY MORE ?                          87186\n         BNP   PRETEAD       NO; DONE                            87186\n         CLI   0(R6),C')'    END ?                               87186\n         BE    PRETEAD       YES                                 87186\n         SLDL  R2,8          MAKE ROOM FOR ANOTHER               87186\n         IC    R3,0(,R6)     LOAD IT                             87186\n         LA    R6,1(,R6)                                         87186\n         BCT   R4,PRETEAP                                        87186\n         B     APPLBAD       BAD/UNKNOWN APPL                    87186\nPRETEAD  L     R6,DATAPTR    RESTART AT BEGINNING                87186\n         SLR   R4,R4                                             87186\n         IC    R4,DATASEQL   GET LENGTH AGAIN                    87186\nPRETEDAL CLC   =C'DATA(',0(R6)  DATA ?                           87186\n         MVI   0(R6),C' '    CLEAR IT ANYWAY                     87186\n         BE    PRETEDAD      YES                                 87186\n         LA    R6,1(,R6)                                         87186\n         BCT   R4,PRETEDAL   KEEP IT UP                          87186\n         B     PRETEDAA      PUT THE APPLICATION NAME IN         87186\nPRETEDAD MVC   1(4,R6),0(R6)  BLANK IT                           87186\n         LA    R0,5          SET INCREMENT                       87186\n         AR    R6,R0         BUMP OVER                           87186\n         SR    R4,R0         ADJUST RESIDUAL LENGTH              87186\nPRETEDDL CLI   0(R6),C')'    END ?                               87186\n         BE    PRETEDAL      YES; START BLANKING AGAIN           87186\n         LA    R0,1          SET INCREMENT                       87186\n         AR    R6,R0                                             87186\n         SR    R4,R0                                             87186\n         BP    PRETEDDL      TRY AGAIN                           87186\nPRETEDAA L     R6,DATAPTR    SET RESCAN START                    87186\n         STM   R2,R3,0(R6)   STASH DESIRED APPLICATION NAME      87186\n         SLR   R2,R2                                             87186\n         IC    R2,DATASEQL   GET ORIGINAL LENGTH BACK            87186\n         B     INTRPRET      AND RESCAN                          87186\n         SPACE 1                                                 88185\n*        MASKED COMPARISON                                       88185\n*        R0 - VALUE  R15 - MASK    R14 RETURN                    88185\n*                                                                88185\nMASKTEST STM   R14,R1,12(R13)   SAVE                             88185\n         LR    R1,R0         COPY VALUE OVER                     88185\n         LA    R0,8          NUMBER TO SCAN                      88185\n         LA    R14,1         INCREMENT                           88185\nMASKTESL CLI   0(R15),C'*'   GENERAL COMPLETE MATCH ?            88185\n         BE    MASKTESX      YES; RETURN MATCHED                 88185\n         CLI   0(R15),C'?'   CHARACTER MATCH ?                   88185\n         BE    MASKTESB      YES; BUMP                           88185\n         CLC   0(1,R15),0(R1)  MATCH ?                           88185\n         BE    MASKTESB      YES; BUMP                           88185\n         LM    R14,R1,12(R13)   RESTORE                          88185\n         B     4(,R14)       RETURN NO MATCH                     88185\nMASKTESB AR    R1,R14                                            88185\n         AR    R15,R14                                           88185\n         BCT   R0,MASKTESL   TRY NEXT ENTRY                      88185\nMASKTESX LM    R14,R1,12(R13)                                    88185\n         BR    R14           RETURN MATCHED                      88185\n         SPACE 1                                                 90141\n         LTORG ,                                                 90141\n         TITLE '*********  N E T S O L  -  CHECK APPLICATION STATUS'\n***********************************************************************\n*                                                                     *\n*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *\n*    OF THE VTAM APPLICATION ASSOCIATED WITH THE LOGON DATA.          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCHKAPPL  MVC   APPLID(8),CMDVAPPL(R1)  SAVE APPLID FROM CMD TABLE ENTRY\n         LA    PTRNIB,SYNCHNIB         PUT THE APPLICATION\n         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT\n         SPACE 1\n***********************************************************************\n*    INQUIRE FOR THE APPLICATION STATUS                               *\n***********************************************************************\n         SPACE 1\nINQUIREB OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT\n         OI    MFLAGS,INQAPPST\n         L     R15,=A(FRSYNRPL)  GET FRESH SYNCHRONOUS RPL       86065\n         MVC   SYNCHRPL(FRSYNL),0(R15)  AND RE-INITIALIZE        86065\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,SYNUSFLD             SAVE IN SYNCHRPL USER FIELD\n         INQUIRE RPL=SYNCHRPL,                                         X\n               OPTCD=APPSTAT,                                          X\n               NIB=SYNCHNIB\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n         NI    SRPLEXT1,FF-RPLNIB      NIB NO LONGER NEEDED\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  0C  06           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION   86127\n         BNH   ERRTAB4B      JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\nERRTAB4B B     ERRTAB4(R15)            CHECK VALID ACTIONS       86127\nERRTAB4  B     R0CHK4               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS\n*                                      IRRELEVANT\n         B     APPLBAD              C  THIS IS NORMAL CASE FOR\n*                                      APPLICATION UNKNOWN\n         B     INQUIREB            10  REISSUE.  NO NEED TO\n         B     APPLBAD       14 - NETSOL/INTTAB/VTAMLST OUT OF SYNCH\n         SPACE 1\nR0CHK4   CH    R0,=H'10'     NOT ACCEPTING LOGONS ?              93169\n         BE    APPINACT      YES; SAY SO                         93169\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2                                                 90120\n***********************************************************************\n*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *\n*    CODES ARE:                                                       *\n*                                                                     *\n*        0 - ACTIVE AND AVAILABLE                                     *\n*        4 - INACTIVE                                                 *\n*        8 - NEVER ACCEPTS A LOGON                                    *\n*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *\n*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *\n***********************************************************************\n         SPACE 2\n         SLR   R15,R15                 CLEAR  REG 15\n         IC    R15,SYNFDB3             EXTRACT FEEDBACK INFO.\n         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.\n         B     STATUS(R15)             BRANCH IN TABLE\nSTATUS   B     APPACTIV             0\n         B     APPINACT             4\n         B     APPNEVER             8\n         B     APPTEMP             12\n         B     APPCLOSE            16\n         SPACE 1\nAPPTEMP  DS    0H                      APPLICATION TEMPORARILY NOT\n*                                      ACCEPTING LOGONS\n         LA    R0,MSG11                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPNEVER DS    0H                      APPLICATION NEVER ACCEPTS LOGONS\n         LA    R0,MSG10                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPINACT DS    0H                      APPLICATION INACTIVE\n         LA    R0,MSG08                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPCLOSE DS    0H                      APPLICATION QUIESCING\n         LA    R0,MSG09                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPLBAD  DS    0H                      BAD APPLICATION NAME\n         LA    R0,MSG07                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         TITLE '*********  N E T S O L  -  CLSDST(PASS) FUNCTION'\n***********************************************************************\n*    THE APPLICATION IS ACTIVE AND AVAILABLE. PASS THE TERMINAL PLUS  *\n*    LOGON DATA TO THE DESIRED APPLICATION.                           *\n***********************************************************************\n         SPACE 2\nAPPACTIV OI    FLAGS,CLEARSCR          MUST ISSUE CLEAR SCREEN\n         L     R15,=A(S32M6APL)                                  86012\n         USING S32M6APL,R15                                      86012\n         MVC   S32M6APL,APPLID  SHOW CONNECTING ID               86012\n         L     R15,=A(S3EM6APL)                                  88172\n         USING S3EM6APL,R15                                      88172\n         MVC   S3EM6APL,APPLID  DITTO FOR 3270 WITH EDS          86012\n         L     R15,=A(S37M6APL)                                  86065\n         USING S37M6APL,R15                                      86065\n         MVC   S37M6APL,APPLID  DITTO FOR 3767/TTY               86012\n         L     R15,=A(MD5M6APL)                                  90042\n         USING MD5M6APL,R15                                      90042\n         MVC   MD5M6APL,APPLID  DITTO FOR MODEL 5 327X           90042\n         DROP  R15                                               86012\n         LA    R0,MSG06                SEND LOGON IN PROGRESS\n         B     SENDMSG                 GO ISSUE SEND\n         SPACE 1\nCONTPASS NI    FLAGS,255-(CLEARSCR)    TURN OFF FLAG TO INDICATE RETURN\n         SLR   R2,R2                   CLEAR\n         IC    R2,DATASEQL             GET DATA SEQUENCE LENGTH PASSED\n*                                       FROM INTRPRET\n         LA    R4,DATASEQ              ADDRESS OF DATA TO PASS\n         SPACE 1\nFINDBLNK CLI   0(R4),X'40'             IS IT A BLANK?\n         BE    FINDDATA                YES SEE IF ANY DATA FIELD\n         LA    R4,1(R4)                OVERWISE GO TO NEXT BYTE\n         BCT   R2,FINDBLNK             DECREASE COUNT TRY NEXT\n         SPACE 1\nNODATA   SLR   R4,R4                   CLEAR REG TO SAY NO DATA\n         B     FILLNIB                 GO ISSUE PASS WITH NO DAT\n         SPACE 1\nFINDDATA LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),X'40'             IS IT STILL A BLANK?\n         BNE   DATAFOND                NO SO WE HAVE DATA\n         BCT   R2,FINDDATA             TRY AND FIND MORE DATA\n         B     NODATA                  ISSUE PASS WITH NO DATA\n         SPACE 1\nDATAFOND BCTR  R2,0                    END OF LOGON BUT NO DATA\n         LTR   R2,R2                   NO MORE DATA?\n         BZ    NODATA                  ISSUE CLSDST WITH NO DATA\n         SPACE 1\n***********************************************************************\n* THIS CODE WILL CHECK IF THE REQUESTED APPLICATION IS ONE THAT NEEDS *\n* A SPECIAL LOGMODE ENTRY. IF SO, THE ASSOCIATED LOGMODE ENTRY IN THE *\n* TABLE WILL BE ADDED TO THE NIB PRIOR TO THE CLSDST(PASS).           *\n***********************************************************************\n         SPACE 1\nFILLNIB  LA    PTRNIB,NIBSTART         USE NIB CONTAINED IN RPL.\n         MVC   NIBLMODE,MODENAM  ZERO OR LOGMODE TABLE NAME      88206\n         LA    R1,LOGMDTAB             PT @ LOGMODE TABLE\nLOGMDLP  CLC   LOGMDAPP(8,R1),=XL8'FFFFFFFFFFFFFFFF' END OF TABLE?\n         BE    SKIPLOGM                YES => USE DEFAULT ENTRY\n         CLC   APPLID(8),LOGMDAPP(R1)  DOES APPLID MATCH TABLE ENTRY?\n         BE    INSRTLGM                YES => GO INSERT LOGMODE NAME\n         LA    R1,LOGMDLEN(,R1)        NO  => GET NEXT TABLE ENTRY\n         B     LOGMDLP                        & PROCESS IT\nINSRTLGM MVC   NIBLMODE,LOGMDENT(R1)  MOVE LOGMODE NAME INTO NIB\n         SPACE 1\nSKIPLOGM L     R3,RPLUSFLD             -> TTE\n         MVC   NIBSYM(8),TERMNAME      COPY TERMINAL NAME TO NIB\n         SPACE 1\nPASS     OI    MFLAGS,CLSDST           CLSDST(PASS) BEING DONE\n         OI    MACFLAGS,CLOSPASS\n         SPACE 1\n         CLSDST  RPL=(PTRRPL),NIB=(PTRNIB),OPTCD=(ASY,PASS),           *\n               AAREA=APPLID,AREA=(R4),RECLEN=(R2),EXIT=PASSEND   90120\n         NI    MFLAGS,255-(CLSDST)\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(PASS)                                     *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    PASS                    YES. REISSUE\n         LTR   R15,R15                 CLOSE(PASS) ACCEPTED\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   VALID COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  RETURN TO VTAM\n         TITLE '*********  N E T S O L  -  CLSDST(PASS) EXIT RTN'\n***********************************************************************\n*                                                                     *\n*        CHECK THAT THE CLSDST(PASS) WORKED CORRECTLY                 *\n*                                                                     *\n*        THIS EXIT ROUTINE IS SCHEDULED WHEN A CLSDST (PASS)          *\n*        IS ISSUED.  THE CLSDST IS ISSUED WHEN A VALID LOGON          *\n*        SEQUENCE HAS BEEN RECEIVED FROM THE TERMINAL AND             *\n*        THE DESIRED APPLICATION IS RECEIVING LOGON'S.                *\n*                                                                     *\n*        REGISTER 5 CONTAINS THE ADDRESS OF THE RPL USED              *\n*            IN THE CLSDST.                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPASSEND  MHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         LR    PTRRPL,R1               GET THE RPL PASSED\n         LA    R13,RPLSAVE             R13 -> RPL SAVE AREA\n         SPACE 1\n         OI    MFLAGS,CLSDST           INDICATE IN PASSEND\n         OI    EXITFLAG,PASSEX\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(CLSDST)\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(PASS)                                     *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   00    08    QUEUED SESSION ALREADY EXISTS        00  08           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *\n*   10    00    APPLICATION UNAVAILABLE              0C  08           *\n*   10    02    TARGET APPLICATION UNACCEPTABLE      0C  09           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0D    VTAM INACTIVE TO YOUR ACB            SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    13    CID INVALID                          14  00           *\n*   14    4B    INVALID LOGMODE ENTRY SPECIFIED      0C  01           *\n*   14    53    TERMINAL NOT DEFINED CROSS DOMAIN    0C  03           *\n*   14    55    NO OPNDST AUTHORIZATION              0C  05           *\n*   14    5D    OPNDST INVALID (TERM NOT CONNECTED)  14  00           *\n*   14    5F    RESOURCE NOT OWNED                   14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB5(R15)            CHECK VALID ACTIONS\nERRTAB5  B     R0CHK5               0  PROBABLY PASSED DEVICE\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8\n         B     SENDMSG              C  NORMAL CASE IF APPLI-\n*                                       CATION STOPPED ACCEPT-\n*                                       ING LOGONS SINCE THE\n*                                       INQUIRE\n         B     RESEND              10  LET USER TRY AGAIN LATER\n         B     FREERPL             14  IT COULD BE THAT NETSOL\n*                                       NO LONGER HAS THE\n*                                       DEVICE SINCE IT WAS\n*                                       FREED BY RELREQ AFTER\n*                                       THE READEND EXIT WAS\n*                                       SCHEDULED.\nR0CHK5   DS    0H\n         CH    R0,HEX8             08  QUEUED SESSION EXISTS\n         BE    QSESSION                 => ISSUE CLSDST RELEASE\n         LTR   R0,R0                   ANYTHING BUT FDBK2=08\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         TITLE '*********  N E T S O L  -  SIMLOGON FUNCTION'\nSIMLOGON LA    PTRNIB,SYNCHNIB         GET ADDRESS OF NIB\n         L     R15,=A(FRSYNRPL)  GET FRESH SYNCHRONOUS RPL       86065\n         MVC   SYNCHRPL(FRSYNL),0(R15)  AND RE-INITIALIZE        86065\n         L     R3,RPLUSFLD             -> TTE\n         MVI   TERMFLG2,TPASSED        MARK TERM NOT ON NETSOL\n         MVC   TERMAPPL,APPLID         REMEMBER APPL FROM CLSDST(PASS)\n         ST    R3,NIBUSER              SAVE IN THE USER FIELD\n         ST    R3,SYNUSFLD             SAVE IN SYNCHRPL USER FIELD\n         MVC   NIBSYM(8),TERMNAME      TERMINAL NAME TO NIB\n         SPACE 1                                                 88185\n         AIF   ('&LOCAL' NE 'PID').NOSIMEX                       92300\n         ICM   R0,15,TERMLOUD  IS THERE A LOUD ?                 88185\n         BZ    SIMLOGOL      NO; SKIP                            88185\n         CLC   =C'TS',TERMAPPL  TSO ?                            88185\n         BE    SIMLOGOL      YES; LET TSO DO IT                  88185\n         CLC   =C'WY',TERMAPPL  WYLBUR ?                         88185\n         BE    SIMLOGOL      DITTO                               88185\n         CLC   =C'EX',TERMAPPL  EXHIBIT ?                        88185\n         BE    SIMLOGOL                                          88185\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT PARM        88185\n         MVC   A$SID,=C'A$RB'                                    88185\n         MVC   A$SFCTN(3),=AL1(A$SFLOGN,0,A$SAKEY+A$SBUILD) LOGON\n         MVC   A$SACCT,TERMAPPL  PASS THE NAME                   88192\n         ST    R0,A$SBUFR    SET LOUD ADDRESS                    88185\n         LA    R1,A$SVCRB                                        88185\n         SVC   249           BEGIN A SESSION                     88185\n.NOSIMEX SPACE 1                                                 91195\n         SPACE 1\nSIMLOGOL OI    MFLAGS,SMLOGON          INDICATE SIMLOGON\n         OI    MACFLAGS,SIMLGON\n         SIMLOGON RPL=SYNCHRPL,                                        X\n               NIB=SYNCHNIB,                                           X\n               OPTCD=(Q,NRELRQ)\n         NI    MFLAGS,255-(SMLOGON)\n         XC    NIBUSER,NIBUSER         CLEAR NIB USER FIELD OUT\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SIMLOGON                                         *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    00    TERMINAL UNAVAILABLE                 14  00           *\n*   10    03    VTAM IS HALTING                      14  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    13    CID INVALID                          14  00           *\n*   10    4B    INVALID LOGON                        0C  02           *\n*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *\n*   14    54    INVALID TERMINAL NAME                14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX14               HIGHEST VALID ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB6(R15)            CHECK VALID ACTIONS\nERRTAB6  B     R0CHK6               0  CHECK IF TERM ACCEPTED\n         BAL   R7,SNOCCUR           4\n         B     FREERPL              8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         B     FREERPL              C  CAN'T SEND MSG IF NOT CONNECTED\n*                                      CONNECTED\n         B     SIMLOGON            10  REISSUE. CHECK FOR RESET\n         B     FREERPL             14  CAN'T CONNECT DEVICE\n         SPACE 1\nR0CHK6   DS    0H\n         CH    R0,HEX9                 TERM UNAVAILABLE\n         BE    FREERPL                 RETURN IF SO\n         CH    R0,HEX8                 X'0008' THAT WE SHOULD NOT GET ?\n         BE    FREERPL                 YES, IGNORE IT FOR NOW\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     FREERPL                 FREE RPL GO BACK TO VTAM\n         TITLE '*********  N E T S O L  -  SEND MESSAGES ROUTINE'\n***********************************************************************\n*                                                                     *\n*          BRANCH TO DEVICE DEPENDENT SEND ROUTINE TO WRITE           *\n*          A MESSAGE TO THE LOGICAL UNIT.                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SPACE 2\nSENDMSG  DS    0H\n         L     R3,RPLUSFLD             -> TTE\n         L     R9,TERMDDT              -> DDT FOR TERMINAL\n         L     R15,DDTSEND             -> SEND ROUTINE FOR TERMINAL\n         BR    R15                     GO SEND MESSAGE\n         SPACE 5                                                 90140\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FOR COLOR AND WIDE SCREEN, ATTEMPT BUFFER COMPRESSION        *\n*                                                                     *\n*              ERROR RECOVERY WORKS BETTER WHEN BUFFER <= R.U. SIZE   *\n*                                                                     *\n*---------------------------------------------------------------------*\nS32COMP  DS    0H            NORMAL 3270 COMPRESSION ROUTINE     90141\nS3ESEND  ICM   R15,15,COMP3270  COMPRESS ROUTINE LOADED ?        90140\n         BZ    S32SEND       NO; NORMAL CRT SEND                 90140\n         CLM   R0,1,=AL1(12) MENU SCREEN ?                       90140\n         BE    S3ESEND2      YES; PROCESS                        90140\n         CLM   R0,1,=AL1(13) CLOSED ?                            90140\n         BE    S3ESEND2      YES; PROCESS                        90140\n         CLM   R0,1,=AL1(20) PASSWORD SCREEN ?                   90140\n         BNE   S32SEND       NO; DO NORMALLY                     90140\nS3ESEND2 XC    COMPPARM(OPSEQLEN),COMPPARM  CLEAR WORK AREA      90140\n         L     R7,=A(SENDEND)  SEND END EXIT                     90141\n         TM    TERMFLAG,SENDSCED   IS THERE A SEND (POST=SCHED)  90140\n         BO    MISSSEND-SENDEND(R7)   IF SO, DO NOT ISSUE A NEW ONE\n         NI    TERMFLAG,255-(LOGPROC) INDICATE NOT IN LOGON FUNCTION\n         TM    RPLRH3,RPLEB  END BRACKET DUE TO MSG 6 ?          90140\n         BNO   S3EMSG2       NO, STILL IN BRACKET                90140\n         NI    RPLRH3,X'FF'-RPLEB      CLEAR END BRACKET STATE   90140\n         OI    RPLRH3,RPLBB  3276 MIGHT LIKE TO KNOW             90140\nS3EMSG2  STC   R0,MSGINDEX   SAVE MESSAGE INDEX                  90140\n         STC   R0,TERMMSGX   ALSO SAVE IN TERMINAL BLOCK         90140\n         TM    FLAGS,FIRSTSND   IS THIS FIRST SEND AFTER OPNDST  90140\n         BZ    S3EMSGOK                                          90140\n         OI    RPLRH3,RPLBB  INDICATE BEGIN BRACKET              90140\n         NI    FLAGS,255-(FIRSTSND)    NEXT SEND WITHOUT BRACKET 90140\nS3EMSGOK SLR   R1,R1         CLEAR OUT REG                       90140\n         IC    R1,MSGINDEX   GET THE INDEX                       90140\n         LA    R2,X'FF'-X'80'   TURN OFF POSSIBLE RESET          90140\n         NR    R1,R2         INDICATOR PRIOR TO INDEXING         90140\n         SLL   R1,2          4 * (INDEX)                         90140\n         L     R2,DDTMSGTB-4(R1)  POINT TO MSG. ENTRY IN TABLE   90140\n         LH    R1,0(,R2)     GET MESSAGE LENGTH                  90140\n         S     R1,=F'2'      REDUCE BY LENGTH FIELD AT FRONT     90140\n         LA    R2,2(R2)      POINT TO ACTUAL MSG.                90140\n         ST    R2,COMPPARM+8 SET INPUT ADDRESS                   90140\n         ST    R1,CPINLEN    SET INPUT LENGTH                    90140\n         LA    R14,24*80                                         90140\n         C     R9,=A(DDTMDL5)  MODEL 5 SIZE ?                    90140\n         BNE   *+8           NO                                  90140\n         LA    R14,27*132    LOAD LARGER SIZE                    90140\n         ST    R14,CPBUFLEN  STASH IT                            90140\n         MVI   OPFUN,OFYCCW  CCW PRESENT                         90140\n         MVI   OPADD,OPA14   14-BIT ADDRESSING AVAILABLE         90140\n         MVI   OPCOL,OPSEVEN 7-COLOR AVAILABLE (MAY BE A LIE)    90140\n         MVI   OPHIGH,OPSEVEN  HIGH-LIGHTING AVAILABLE (FAIRLY SURE)\n         LA    R6,IOAREA               POINT TO OUTPUT AREA      90140\n         ST    R6,COMPPARM   SET OUTPUT BUFFER ADDRESS           90140\n         LA    R14,LMSG12    SET MAXIMUM OUTPUT AREA             90140\n         ST    R14,CPOUTLEN  STASH IN PARM LIST                  90140\n         LA    R14,CPOUTLEN  GET POINTER TO OUTPUT LENGTH        90140\n         ST    R14,COMPPARM+4  STASH IT                          90140\n         LA    R14,CPINLEN   POINT TO INPUT LENGTH               90140\n         ST    R14,COMPPARM+12  STASH IN LIST                    90140\n         LA    R14,CPBUFLEN  GET BUFFER LENGTH                   90140\n         ST    R14,COMPPARM+16  STASH                            90140\n         LA    R14,OPFUN     POINT TO OPTION LIST                90140\n         ST    R14,COMPPARM+20  STASH IN LIST                    90140\n         CLI   MSGINDEX,MSG12  IS IT MSG12?                      90140\n         BNE   S3ECONT       NO                                  90140\n         BAL   R14,TIMETERM  ADD NODE NAME & TIME TO MSG         90140\n         B     S3ECONT2                                          90140\nS3ECONT  CLI   MSGINDEX,MSG13  NEW MESSAGE 13 ?                  90140\n         BNE   S3ECONT3      NO                                  90140\n         AH    R9,=Y(DDTTERM3-DDTTERM)  FINAGLE DDT BASE         90140\n         BAL   R14,TIMETERM  ADD TERMINAL NAME AND TIME          90140\n         SH    R9,=Y(DDTTERM3-DDTTERM)  RESTORE R9               86065\n         B     S3ECONT2      JOIN COMMON                         90140\nS3ECONT3 CLI   MSGINDEX,MSG20  NEW MESSAGE 20                    88179\n         BNE   S32SEND       MAJOR BOOBOO ?                      90140\n         AH    R9,=Y(DDTTERM2-DDTTERM)  FINAGLE DDT BASE         90140\n         BAL   R14,TIMETERM  ADD TERMINAL NAME AND TIME          90140\n         SH    R9,=Y(DDTTERM2-DDTTERM)  RESTORE R9               90140\nS3ECONT2 LA    R1,COMPPARM   GET PARM LIST                       90140\n         L     R15,COMP3270  GET COMPRESSION ROUTINE ADDRESS     90140\n         BALR  R14,R15       CALL IT                             90140\n         CH    R15,=H'8'     DID WE MAKE A BOOBOO ?              90140\n         BNL   S32SEND       NO; DO THE SLOW WAY                 90140\n         L     R0,CPOUTLEN   GET NEW OUTPUT LENGTH               90140\n         ST    R0,SENDLEN    SAVE LENGTH OF SEND                 90140\n         B     SEND          JOIN COMMON SEND PROCESSING         90140\n         TITLE '*********  N E T S O L  -  SEND ROUTINE FOR 3270'\n***********************************************************************\n*                                                                     *\n*          S32SEND EDITS AND SENDS NETSOL MESSAGES TO 3270 DEVICES.   *\n*                                                                     *\n*          ALL MESSAGES SENT ARE ASYNCHRONOUS USING THE RPL PASSED    *\n*          IN R5.                                                     *\n*                                                                     *\n*               ON ENTRY:                                             *\n*                  REG. 0 CONTAINS MESSAGE NUMBER                     *\n*                  REG. 3 POINTS TO TTE OF ACTIVE TERMINAL            *\n*                  REG. 5 POINTS TO RPL BEING USED                    *\n*                  REG. 9 POINTS TO DDT FOR TERMINAL                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nS37SEND  DS    0H                                                86145\nS32SEND  DS    0H                                                86153\n         CLM   R0,1,=AL1(MSG06)        LOGON MESSAGE ?\n         BNE   S32MSG1                 NO, THEN DON'T SEND MSG WITH EB\n         OI    TERMFLAG,LOGPROC        SINCE SENDING MSG IS LOGON\n         OI    RPLRH3,RPLEB            SEND WITH END BRACKET ON\n*                                      AS 3276 MAY GET UPSET ON CLSDST\n         B     S32MSG2                 SKIP CHECK FOR EB SEND\n         SPACE 1\nS32MSG1  L     R7,=A(SENDEND)  SEND END EXIT                     90141\n         TM    TERMFLAG,SENDSCED   IS THERE A SEND (POST=SCHED) DC18203\n*                                   ALREADY ISSUED FOR THIS LU  DC18203\n         BO  MISSSEND-SENDEND(R7)  IF SO DO NOT ISSUE A NEW ONE DC18203\n         NI  TERMFLAG,255-(LOGPROC) INDICAT NOT IN LOGON FUNCTION\n         TM    RPLRH3,RPLEB            END BRACKET DUE TO MSG 6 ?\n         BNO   S32MSG2                 NO, OKAY STILL IN BRACKET\n         NI    RPLRH3,X'FF'-RPLEB      CLEAR END BRACKET STATE\n         OI    RPLRH3,RPLBB            3276 MIGHT LIKE TO KNOW\n         SPACE 1\nS32MSG2  DS    0H\n         STC   R0,MSGINDEX             SAVE MESSAGE INDEX\n         STC   R0,TERMMSGX   ALSO SAVE IN TERMINAL BLOCK         86160\n         TM    FLAGS,FIRSTSND          IS THIS FIRST SEND AFTER OPNDST\n         BZ    S32MSGOK\n         OI    RPLRH3,RPLBB            INDICATE BEGIN BRACKET\n         NI    FLAGS,255-(FIRSTSND)    NEXT SEND WITHOUT BRACKET\n         SPACE 1\n***********************************************************************\n*        FIND OUTPUT MESSAGE AND LENGTH                               *\n***********************************************************************\n         SPACE 1\nS32MSGOK DS    0H\n         SLR   R1,R1                   CLEAR OUT REG\n         IC    R1,MSGINDEX             GET THE INDEX\n         LA    R2,X'FF'-X'80'          TURN OFF POSSIBLE RESET\n         NR    R1,R2                    INDICATOR PRIOR TO INDEXING\n         SLL   R1,2                    4 * (INDEX)\n*                                      = DISPLACEMENT OF MESSAGE +4\n         L     R2,DDTMSGTB-4(R1)       POINT TO MSG. ENTRY IN TABLE\n         LH    R1,0(,R2)               GET MESSAGE LENGTH\n         S     R1,=F'2'                REDUCE BY LENGTH FIELD AT FRONT\n         LA    R2,2(R2)                POINT TO ACTUAL MSG.\n         LA    R6,IOAREA               POINT TO OUTPUT AREA\n         C     R9,=A(DDTCONS)  CONSOLE REQUEST ?                 88192\n         BNE   *+8           NO                                  88192\n         LA    R6,4(,R6)     LEAVE ROOM FOR RDW                  88192\n         LR    R7,R2                   POINT TO MESSAGE AREA\n         AH    R7,DDTMSGOF              WHERE DATA ARE TO BE MOVED\n         CLI   MSGINDEX,MSG19  VARIABLE TEXT MESSAGE ?           87193\n         BNE   *+4+4+4       NO                                  87193\n         LH    R1,GPDATAL    GET OUTPUT LENGTH                   87193\n         L     R2,GPDATAP    AND ADDRESS                         87193\n         SPACE 1\n***********************************************************************\n*        REGISTER 1 CONTAINS MESSAGE LENGTH                           *\n*        REGISTER 2 POINTS TO MESSAGE                                 *\n*        REGISTER 6 POINTS TO OUTPUT AREA                             *\n*        REGISTER 7 POINTS TO MESSAGE AREA FOR VARIABLE DATA          *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*        EDIT MESSAGE 01                                              *\n***********************************************************************\n         CLI   MSGINDEX,MSG01          IS THIS MESSAGE 01?       88192\n         BNE   S32CKM7                 NO SO CARRY ON\n         LA    R8,NIBSTART             YES => POINT AT NIB\n         MVC   0(8,R7),NIBLMODE               ADD LOGMODE ENTRY TO MSG\n         B     S32CONT\n***********************************************************************\n*        EDIT MESSAGE 07                                              *\n***********************************************************************\nS32CKM7  DS    0H\n         CLI   MSGINDEX,MSG07          IS THIS MESSAGE 07?       88192\n         BNE   S32CKM8                 NO SO CARRY ON\n         MVC   0(8,R7),=CL8' '         BLANK OUT USER DATA FIELD\n         LR    R0,R1                   SAVE CONTENTS OF R1\n         SLR   R1,R1                   LOAD LENGTH\n         IC    R1,DATASEQL              OF USER DATA\n         CH    R1,=AL2(8)              IF LENGTH\n         BNH   *+8                      GREATER THAN 8\n         LA    R1,8                      THEN SET TO 8\n         BCTR  R1,0                    DECREMENT FOR MVC\n         EX    R1,S32MVAPP             MOVE APPLICATION ID TO MSG.\n         LR    R1,R0                   RESTORE R1\n         B     S32CONT                 SKIP FURTHER EDITS\nS32MVAPP MVC   0(0,R7),DATASEQ         *** EXECUTED ***\n***********************************************************************\n*        EDIT MESSAGE 8,9,10,11                                       *\n***********************************************************************\nS32CKM8  DS    0H\n         CLI   MSGINDEX,MSG08          IS MSG # LESS THAN 8?     88192\n         BL    S32CONT                 YES => BYPASS FURTHER CHECKING\n         CLI   MSGINDEX,MSG11          IS MSG # GREATER THAN 11? 88192\n         BH    S32CKM12                YES => CONTINUE MESSAGE CHECKING\n         MVC   0(8,R7),APPLID          MOVE APPLID TO MESSAGE\n         B     S32CONT                 SKIP FURTHER EDITS\n***********************************************************************\n*        EDIT MESSAGE 12                                              *\n***********************************************************************\nS32CKM12 CLI   MSGINDEX,MSG12          IS IT MSG12?              88192\n         BNE   S32CONT                 NO\n         BAL   R14,TIMETERM            ADD NODE NAME & TIME TO MSG\n         SPACE 1\n*        ALL BCSC MENUS WRITTEN FOR LOGABAX TERMINALS ARE\n*        TRACKED BY WRITING A MESSAGE TO SYSLOG.\n         SPACE 1\n*DTS*    C     R9,=AL4(DDT3767)        IF THIS IS A LOGABAX TERMINAL\n*DTS*    BNE   S32CONT                   NO  => BYPASS LOG MSG\n*DTS*    MVC   LOGMENU+17(8),TERMNAME    YES => ADD NODE NAME TO MSG\n*DTS*    MVC   LOGMENU+44(6),=CL6'LOGON'        ASSUME FROM LOGON EXIT\n*DTS*    TM    EXITFLAG,LOGONEX                 IF FROM LOGON EXIT\n*DTS*    BO    *+10                               YES=> BYPASS\n*DTS*    MVC   LOGMENU+44(6),=CL6'RESEND'         NO => MARK AS RESEND\n*DTS*    STM   R0,R1,RPLERRSA                   SAVE REGS\n*DTS*    WTO   MF=(E,LOGMENU)                   WRITE MSG TO LOG\n*DTS*    LM    R0,R1,RPLERRSA                   RESTORE REGS\n***********************************************************************\n*        MOVE MESSAGE TO OUTPUT AREA                                  *\n***********************************************************************\nS32CONT  CLI   MSGINDEX,MSG13  NEW MESSAGE 13                    86065\n         BNE   S32CONT3      NO                                  86065\n         AH    R9,=Y(DDTTERM3-DDTTERM)  FINAGLE DDT BASE         86065\n         BAL   R14,TIMETERM  ADD TERMINAL NAME AND TIME          86065\n         SH    R9,=Y(DDTTERM3-DDTTERM)  RESTORE R9               86065\nS32CONT3 CLI   MSGINDEX,MSG20  NEW MESSAGE 20                    88179\n         BNE   S32CONT2      NO                                  88179\n         AH    R9,=Y(DDTTERM2-DDTTERM)  FINAGLE DDT BASE         88179\n         BAL   R14,TIMETERM  ADD TERMINAL NAME AND TIME          88179\n         SH    R9,=Y(DDTTERM2-DDTTERM)  RESTORE R9               88179\nS32CONT2 LR    R3,R1                   LOAD MESSAGE LENGTH TO ODD REG\n         LR    R7,R1                   LOAD MESSAGE LENGTH TO ODD REG\n         MVCL  R6,R2                   MOVE MESSAGE TO OUTPUT BUFFER\n         L     R3,RPLUSFLD             RESTORE TTE POINTER\n         LA    R1,IOAREA               CALCULATE\n         SR    R6,R1                     THE MESSAGE LENGTH\n         ST    R6,SENDLEN              SAVE LENGTH OF SEND\n         SPACE 1\nSEND     OI    MFLAGS,SENDING          TELL ERREXIT ASY. SEND\n         OI    MACFLAGS,SENDASY\n         AIF   (NOT &MVSXA).NRPLO7A                             GP04234\n         L     R2,SENDLEN              LENGTH TO SEND TO TERM\n         NI    RPLO7,255-RPLLMPEO  TURN LARGE MESSAGE OPTION OFF 86143\n         ICM   R0,15,TERMRUSZ  GET TERMINAL RU SIZE MAXIMUM      86143\n         BZ    SENDRUMX      NONE; SKIP                          86143\n         CR    R2,R0         LARGER THAN LIMIT ?                 86143\n         BNH   SENDRUMX      NO; USE IT                          86143\n         OI    RPLO7,RPLLMPEO  SET FOR DATA EXCEEDING RU SIZE    86143\n.NRPLO7A  SPACE 1                                               GP04234\nSENDRUMX L     R4,CID                  TERMINAL ADDRESS          86143\n         ST    R4,NIBCID-NIBST+NIBSTART  MAKE SURE               91105\n         C     R9,=A(DDTCONS)  CONSOLE REQUEST ?                 88192\n         BE    CONSSEND      YES; GO THERE                       88192\n         SPACE 1\n***********************************************************************\n*        CHECK TO SEE IF SEND IS FOR MESSAGE 6 (LOGON IN PROGRESS)    *\n*        AND IF SO, SEND REQUESTING A POSITIVE RESPONSE SO THAT THE   *\n*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *\n*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *\n***********************************************************************\n         SPACE 1\n         L     R7,=A(SENDEND)  SET EXIT ADDRESS                  90141\n         CLI   MSGINDEX,MSG06          LOGON IN PROGRESS MSG ?   88192\n         BE    S32SEND6                YES, DO ELSEWHERE\n         OI    TERMFLAG,SENDSCED    INDICATE A SEND TO BE ISSUEDDC18203\n         SPACE 1\n         TM    TERMFLAG,CONTENT   HALF-DUPLEX MODE ?             90135\n         BZ    S32SES32      NO; USE 3270-TYPE SEND              90135\n         NI    RPLRH3,255-RPLCMD-RPLCHREQ  NO CHG                86159\n         SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         *\n               EXIT=(R7),RPL=(PTRRPL),POST=SCHED,                      *\n               CHNGDIR=(NCMD,NREQ),ARG=(R4),                           *\n               OPTCD=(ASY,CA),RESPOND=(NEX,FME,NRRN)             86153\n         B     S32CHKSD                                          86153\n         SPACE 1                                                 86153\nS32SES32 TM    TERMFLAG,FLIPFLOP  CONVERSATIONAL MODE ?          90135\n         BNZ   S32SEND6      YES; FORCE RESPONSE                 90135\n         SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         *\n               EXIT=(R7),RPL=(PTRRPL),POST=SCHED,                      X\n               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X\n               OPTCD=(ASY,CA),RESPOND=(EX,FME,NRRN)\n         B     S32CHKSD                HANDLE LIKE REST OF SENDS\n         SPACE 1\n***********************************************************************\n*        SEND MESSAGE 6 REQUESTING A POSITIVE RESPONSE SO THAT THE    *\n*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *\n*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *\n***********************************************************************\nS32SEND6 SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         X\n               EXIT=(R7),RPL=(PTRRPL),POST=RESP,                       X\n               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X\n               OPTCD=(ASY,CA),RESPOND=(NEX,FME,NRRN)\nS32CHKSD NI    MFLAGS,255-(SENDING)\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    SEND                    YES. REISSUE\n         LTR   R15,R15                 WRITE ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND CHK)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  RETURN TO VTAM\n         TITLE '*********  N E T S O L  -  SEND EXIT'\n***********************************************************************\n*                                                                     *\n*         SENDEND IS ENTERED WHEN THE EXIT HAS BEEN SCHEDULED         *\n*         FOR THE SEND DONE ABOVE.                                    *\n*                                                                     *\n*         REGISTER 1 POINTS TO THE ASYNCH RPL BEING USED              *\n*         REGISTER 15 =A(SENDEND)                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSENDEND  XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         L     R3,RPLUSFLD                                      DC18203\n         NI    TERMFLAG,X'FF'-SENDSCED INDICATE SEND COMPLETE   DC18203\n         OI    MFLAGS,SENDING          TELL ERREXIT THAT ERROR\n*                                      ARE FOR SEND\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                      IS ENTERED IF ERRORS HAVE\n*                                      OCCURRED\n         NI    MFLAGS,255-(SENDING)\n         AIF   (NOT &MVSXA).NRPLO7B\n         NI    RPLO7,255-RPLLMPEO  RESET BIG MSG BIT             86145\n.NRPLO7B TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     88039\n         BO    RETURN                                            88039\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                    ACTION           *\n*  RTNCD FDBK2                                       CODE(S)          *\n*  CODE  CODE         MEANING                        RETURNED         *\n*                                                   (R15  R0)         *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                 00  00          *\n*   04    04    EXCP. INCOMING MESSAGE                                *\n*               REC  RESP HANDLES 0404 FOR 'SEND POST=SCHED'          *\n*               SEND EXIT HANDLES 0404 FOR 'SEND POST=RESP'           *\n*                                                                     *\n*             SSENSEI/SSENSMI                                         *\n*                80     XX        PATH ERRORS         14  00          *\n*                80     05        NO SESSION COND.    08  04          *\n*                40     XX        RH   ERRORS         SNOCCUR         *\n*                20     XX        STATE ERRORS        08  04          *\n*                10     XX        REQUEST ERRORS      SNOCCUR         *\n*                08     00        BRACKET ERROR       18  00          *\n*                08     01        REQUEST REJECT      08  00          *\n*                08     02        INTV REQ            14  00          *\n*                08     13        BRACKET ERROR       18  00          *\n*                08     2B        PRES. SPACE INT. LO 18  00          *\n*                08     2D        SLU BUSY            14  00          *\n*                                                                     *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *\n*   0C    01    LU NOT AVAILABLE (POWERED OFF)        08  00          *\n*   0C    02    REQUEST CANCELLED TEST REQ (LOSTTERM) 14  00          *\n*   0C    07    CONNECTION RECOVERY        (LOSTTERM) 14  00          *\n*   0C    08    LU RESTARTED               (LOSTTERM) 14  00          *\n*   0C    0B    REQUEST CANCELLED BY CLSDST           14  00          *\n*   0C    0C    REQUEST CANCELLED BY CLEAR            08  04          *\n*   10    03    QUICK HALT (TPEND)                    SNOCCUR         *\n*   10    05    PERMANENT CHANNEL OR LINK FAILURE     08  00          *\n*   10    07    VARY DEACTIVATE IMMEDIATE  (LOSTTERM) 14  00          *\n*   10    09    TERMINATE SELF OR LOGOFF   (LOSTTERM) 14  00          *\n*   10    0A    ACF/VTAM ERROR                        SNOCCUR         *\n*   10    0D    ACF/VTAM INACTIVE FOR ACB             SNOCCUR         *\n*   10    0E    ABEND FOR PROGRAMS TCB                SNOCCUR         *\n*   10    0F    BUFFERS FULL               (LOSTTERM) 14  00          *\n*   10    10    TERMINATE SELF RECEIVED               08  04          *\n*   14    12    CLSDST IN PROGRESS                    14  00          *\n*   14    13    CID INVALID                           14  00          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         OI    EXITFLAG,SENDEX         INDICATE WRITE EXIT\n         CH    R15,HEX18               HIGHEST VALID ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTABB(R15)            CHECK VALID ACTION\nERRTABB  B     ROCHKB               0  CHECK IF WRITE WENT\n         BAL   R7,SNOCCUR           4\n         B     RELOPNA              8  CHECK IF WE WANT TO REOPEN\n         BAL   R7,SNOCCUR           C\n         B     WHATSEND            10  FIND OUT WHAT KIND OF SEND\n         B     FREERPL             14  LOST DEVICE\n         B     RESENDM             18  RESEND MSG\n         SPACE 1\nRELOPNA  LTR   R0,R0                   OPNDST AFTER CLSDST ?\n         BZ    RELEASE                 NO SO JUST GO CLSDST\n         OI    FLAGS,RELOPND           INDICATE WE WANT RE-OPEN\n         B     RELEASE                 CLSDST FIRST\n         SPACE 1\nWHATSEND TM    FLAGS,LUSTATE           LUSTAT SEND ?\n         BO    SENDLU\n         B     SEND                    NO, NORMAL SEND, CONTINUE IT\n         SPACE 1\nRESENDM  DS    0H                      RESEND MESSAGE\n         NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB TERMINAL MIGHT\n*                                      HAVE STARTED FIRST\n         IC    R0,MSGINDEX             RETRIEVE SAVED MSG #\n         B     SENDMSG\n         SPACE 1\nROCHKB   DS    0H\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n*ISSSEND NI    FLAGS,255-(LOOPONCE)     TURN OFF RETRY INDIC\nMISSSEND TM    FLAGS,LUSTATE           CONTINUE LUSTAT PROC ?\n         BO    CONTLU\n         TM    FLAGS,CLEARSCR          CLEAR OF SCREEN FROM RECEND?\n         BO    CONTPASS\n         B     FREERPL                 WAIT FOR ACITIVITY FROM LU\n         TITLE '*********  N E T S O L  -  RELREQ EXIT'\n***********************************************************************\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN AN APPLICATION ISSUES        *\n*    OPNDST (ACQUIRE) FOR A TERMINAL CURRENTLY OWNED BY NETSOL.       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *\n*         FOLLOWING;                                                  *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - ADDRESS OF SYMBOLIC NAME OF TERMINAL          *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRELREQ   XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN        YES; REFUSE AND EXIT                90141\n         SPACE 1\n***********************************************************************\n*        NOW SCAN THE TERMINAL TABLE ENTRIES TO SEE IF WE CAN FIND A  *\n*        MATCH ON THE TERMINAL NAME (ERROR IF DON'T). WHEN FOUND,     *\n*        SEE IF A LOGON IS IN PROGRESS (VIA LOGPROC FLAG). IF THIS IS *\n*        THE CASE, WE WON'T RELEASE THE TERMINAL, OTHERWISE RELEASE   *\n*        TO THE APPLICATION REQUESTING IT.                            *\n***********************************************************************\n         SPACE 1\n         LM    R3,R5,TERMTABS          SET UP FOR THE BXLE THRU TABLE\n         CR    R3,R5                   NULL TABLE ?\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         L     R6,4(,R1)               ADDRESS OF RELREQ NAME OF TERM\n         SPACE 1\nFINDNAME CLC   0(8,R6),TERMNAME        MATCH ON THE NAME\n         BE    FNDNAME                 YES, FOUND ITS TTE\n         BXLE  R3,R4,FINDNAME          CONTINUE\n         BAL   R7,SNOCCUR              ERROR, SHOULD NEVER GET HERE\n         SPACE 1\nFNDNAME  TM    TERMFLAG,LOGPROC        LOGON ? YES, DON'T FREE TERMINAL\n         BO    RRFAIL                  YES => WRITE REL REQ FAILED MSG\n         SPACE 1\n         OI    EXITFLAG,RELREQEX       INDICATE IN RELREQ EXIT\n         BAL   R14,GETRPL              GET AN RPL\n         LA    R13,RPLSAVE             R13 -> SAVE IN THE RPL\n         ST    R3,RPLUSFLD             SAVE ADDRESS OF TTE IN THE RPL\n         ST    R5,TERMCRPL             SAVE ADDRESS OF RPL IN THE TTE\n         LA    PTRNIB,SYNCHNIB\n         MVC   NIBSYM(8),TERMNAME      PLACE SYMBOLIC TERMINAL\n*                                      SET INDICATOR TO\n         OI    FLAGS,RELOPND           RELEASE THE DEVICE AND\n*                                      TRY TO REOPEN IT\n         MVC   CID,TERMCID             GET CID INTO ASYNCH RPL\n         SPACE 1\n         MVC   RELRQMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG\n         WTO   MF=(E,RELRQMSG)         INFORM WORLD OF REQUEST\n         SPACE 1\n         B     RELEASE                 GO DO THE RELEASE\n         SPACE 1\nRRFAIL   MVC   RELFLMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG\n         WTO   MF=(E,RELFLMSG)         INFORM WORLD OF REQUEST FAILURE\n         SPACE 1\n         B     RETURN                  REFUSE RELEASE REQUEST\n         TITLE '*********  N E T S O L  -  LOSTERM EXIT'\n***********************************************************************\n*                                                                     *\n*   THIS EXIT ROUTINE IS SCHEDULED BY VTAM WHEN :                     *\n*                                                                     *\n*                * WHEN CONTACT WITH AN LU IS LOST                    *\n*                * WHEN A LU REQUESTED A LOGOFF                       *\n*                * WHEN CERTAIN ERRORS DETECTED IN TRANSMISSION       *\n*                * WHEN A LU IS TEMPORARILY UNAVAILABLE               *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *\n*            FOLLOWING;                                               *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - CID OF LOST TERMINAL                          *\n*              WORD 2 - USER FIELD FROM NIB                           *\n*              WORD 3 - REASON CODE, AS FOLLOWS:                      *\n*                                                                     *\n*  0 - DIAL-LINE DISCONNECT (DIAL-IN)            RELEASE (CLSDST)     *\n*  4 - DIAL-LINE DISCONNECT (DIAL-OUT)           RELEASE (CLSDST)     *\n*  8 - RESERVED                                                       *\n*  C - CONTACT WITH LU PERMANENTLY LOST          PROBDEV (CLSDST)     *\n* 10 - LU SUCCESSFULLY RECONTACTED               RELEASE + REAQUIRE   *\n* 14 - UNCONDITIONAL TERMINATE COMMAND           RELEASE (CLSDST)     *\n*    -       \"       CHARACTER CODED LOGOFF         \"        \"        *\n*    -       \"       TERMSESS                       \"        \"        *\n* 18 - CONTACT WITH LU LOST                      RETURN TO VTAM       *\n* 1C - RESERVED                                                       *\n* 20 - CONDITIONAL TERMINATE SELF                RELEASE + REACQUIRE  *\n*    -     \"       CHARACTER CODED LOGOFF           \"        \"        *\n*    -     \"       TERMSESS                         \"        \"        *\n* 24 - BUFFER LIMIT DEFINED FOR LU EXCEEDED         \"        \"        *\n* 28 - TEST REQUEST SET                             \"        \"        *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOSTERM  MHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO    RETURN\n         SPACE 1\n         LR    R7,R1                   SAVE ACROSS GETRPL\n         BAL   R14,GETRPL              GET AN RPL FOR WORK\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         MVC   RPLUSFLD(4),8(R7)       COPY TTE ADDRESS TO RPL\n         OI    EXITFLAG,LOSTEX         INDICATE IN LOSTERM EXIT\n         MVC   CID,4(R7)               SAVE CID IN RPL/WORKQREA\n         MVC   PACKWORK(1),15(R7)      COPY LOSTERM CODE TO WORK AREA\n         UNPK  PACKWORK+2(3),PACKWORK(2) UNPACK TO PRINT\n         MVC   LOSTMSG+31(2),PACKWORK+2  TO MSG AREA\n         TR    LOSTMSG+31(2),TRTAB     MAKE IT PRINTABLE\n         L     R3,RPLUSFLD             GET TTE POINTER\n         OI    TERMFLG3,TFLOF  FORCE A USER LOGOFF               88188\n         ST    R5,TERMCRPL             SAVE A(RPL) IN TTE\n         MVC   LOSTMSG+43(8),TERMNAME  TERMINAL LU NAME\n         WTO   MF=(E,LOSTMSG)          ISSUE ERROR MSG.\n         SPACE 1\n***********************************************************************\n*        NOW CHECK TO MAKE SURE THAT THE NIB USER FIELD IS CORRECT.   *\n*        WOULD NOT BE IF OPNDST DONE WITH WRONG NIBUSER VALUE.        *\n***********************************************************************\n         SPACE 1\n         CLC   CID,TERMCID             CHECK THAT CID'S ARE CORRECT\n         BE    LOSTCODE                YES SO GO CHECK CODE     DC18203\n         OC    TERMCID,TERMCID         IS IT ZERO (THIS HAPPENS  88179\n*                                      WHEN AN OPNDST FAILS FOR DC18203\n*                                      FIRST LOGON PRIOR TO     DC18203\n*                                      LOSTERM SCHEDULED )      DC18203\n         BZ    *+8           JUMP OVER THE BAL                   88179\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\nLOSTCODE L     R4,12(R7)               GET LOSTERM ENTRY CODE\n         CH    R4,HEX8                 IS IT 0,4 OR 8 ?\n         BNH   RELEASE                 YES SO JUST CLSDST DEVICE\n         CH    R4,HEXC                 IS IT 12 ?\n         BE    PROBDEV                 YES SO WTO AND CLSDST\n         CH    R4,HEX10                IS IT X'10' ?\n         BE    REAQUIRE                YES SO LETS RELEASE + REOPEN\n         CH    R4,HEX14                IS IT X'14' ?\n         BE    PROBDEV                 YES SO WTO AND CLSDST\n         CH    R4,HEX20                IS IT GREATER THAN X'20' ?\n         BNL   REAQUIRE                YES SO LETS RELEASE + REOPEN\n         B     FREERPL                 X'18' CODE (24), IGNORE, WAIT\n*                                       FOR REENTRY WITH X'0C' OR X'10'\n         SPACE 1\nREAQUIRE OI    FLAGS,RELOPND           INDICATE TO RELEASE\n         B     RELEASE\n         TITLE '*********  N E T S O L  -  RELEASE TERMINAL SUBRTN'\n***********************************************************************\n*                                                                     *\n*        RELEASE THE TERMINAL, AND PERHAPS RE-ACQUIRE IT.             *\n*                                                                     *\n*        THERE ARE THREE ENTRY POINTS TO THIS ROUTINE.                *\n*                                                                     *\n*        'LOGOFF' IS USED WHEN THE USER ISSUES A LOGOFF COMMAND TO    *\n*        NETSOL. THE TERMINAL IS RELEASED.                            *\n*                                                                     *\n*        'QSESSION' IS USED WHEN A CLSDST(PASS) FAILS BECAUSE A QUEUED*\n*        SESSION REQUEST IS OUTSTANDING FOR THIS TERMINAL FROM THE    *\n*        REQUESTED APPLICATION. THE TERMINAL IS RELEASED AND THEN     *\n*        A SIMLOGON IS ISSUED TO REACQUIRE THE TERMINAL WHEN IT       *\n*        IS RELEASED BY THE APPLICATION.                              *\n*                                                                     *\n*        'PROBDEV' WILL WTO AND RELEASE THE DEVICE BECAUSE OF AN I/O  *\n*        PROBLEM.                                                     *\n*                                                                     *\n*        'RELEASE' WILL RELEASE THE DEVICE AND, IF THERE IS A TEST    *\n*        REQUEST SET, 'RELEASE' WILL REACQUIRE THE DEVICE.            *\n*                                                                     *\n*        REGISTER 5 (PTRRPL) WILL POINT TO AN RPL.                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOGOFCMD L     R3,RPLUSFLD   RELOAD TTE POINTER FOR PA1 ENTRY    88220\n         BAL   R14,UTERMOF   RESET LOGON/PRIVIES                 88179\n         AIF   ('&LOCAL' NE 'PID').NOLOFEX                       92300\n         ICM   R4,15,TERMLOUD  PRIOR LOGON ?                     88179\n         BZ    LOGFLOUD      NO                                  88179\n         MODESET KEY=ZERO    GET PRIVILEGED                      90008\n         NI    A$LFLG2-A$LOUD(R4),255-A$LFLOG  RESET FORCE REQ.  90008\n         MODESET KEY=NZERO   GET NORMAL                          90008\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  USE AS ACCT SVC PARM   88179\n         MVC   A$SID,=C'A$RB'                                    88179\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,0,A$SAKEY+A$SBUILD)      88179\n         MVC   A$SBUFR,TERMLOUD  COPY LOUD                       88179\n         LA    R1,A$SVCRB                                        88179\n         SVC   249           CANCEL SESSIONS AND USER LOGON      88179\n.NOLOFEX SPACE 1                                                 91195\nLOGFLOUD CLC   =C'NT',TERMNAME  ONE OF OUR NTO TERMINALS ?       86356\n         BE    LOGOFOK       YES; MEANINGFUL REQUEST             86356\n         CLC   =C'PA',TERMNAME  PROTOCOL CONVERTER SYSTEM A?     89338\n         BE    LOGOF71       YES                                 88311\n         CLC   =C'PB',TERMNAME  PROTOCOL CONVERTER SYSTEM B?     89338\n         BE    LOGOF71       YES                                 88311\n         CLI   TERMNAME,C'D' DIAL-UP CONNECTION ?                88311\n         BE    LOGOFOK       YES; DON'T RECONNECT (FREE PU)      88311\n   B SETPASOF  *****DEBUG***** TREAT AS LOCK                     92317\n         OI    FLAGS,RELOPND  CLOSE AND RE-ACQUIRE THE DEVICE    88192\n         B     RELEASE       RELEASE THE DEVICE                  88192\nLOGOF71  LA    R0,L'HANG7171   GET CX-80/IBM 7171/HYDRA DISCONNECT\n         LA    R1,HANG7171                                       88311\n         STH   R0,GPDATAL    STASH LENGTH                        88311\n         ST    R1,GPDATAP    AND ADDRESS                         88311\n         LA    R0,MSG19      IDENTIFY POT-LUCK MESSAGE           88311\n         B     SENDMSG       JOIN COMMON                         88311\nHANG7171 DC    X'F1C370C2A8852B5B4B'  DISCONNECT REQUEST         88311\n         SPACE 1                                                 88311\nLOGOFOK  OI    FLAGS,LOGOFF            INDICATE CLSDST TO RELEASE THE\n*                                      TERMINAL.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nQSESSION OI    FLAGS,SIMLOG            INDICATE CLSDST THEN SIMLOGON\n*                                      THE CLSDST RELEASE MUST BE DONE\n*                                      SINCE THE CLSDST PASS FAILED.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nPROBDEV  OI    FLAGS,BADEVICE          TURN ON  FLAG FOR WTO.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nBADLU    MVC   LISTWTO8+17(8),TERMNAME ADD TERMNAME TO ERROR MSG\n         WTO   MF=(E,LISTWTO8)         WRITE ERROR MSG\n         MVC   CID,TERMCID             MOVE CID INTO RPL FOR LATER USE\n         B     RELCODE                 GO TO RELEASE CODE\n         SPACE 1\nRELEASE  TM    FLAGS,RELOPND           IS RELEASE A PRELUDE TO\n         BO    CLOSEREL                 REOPEN?\n*                                      NO. SIMPLY RELEASE IT\n*                                      YES. MUST SAVE SYMBOLIC\n*                                       NAME FOR LATER REOPEN\n*                                      NOTE: THIS CAN OCCUR\n*                                       FOR READ(ANY)/CHECK\n*                                       ERROR HANDLING.\nRELCODE  L     R3,RPLUSFLD             -> TTE FROM RPL\n         SPACE 1\n         TM    FLAGS,BADEVICE          IS WTO BIT ON ? NO, DON'T WTO\n         BZ    CLOSEREL\n         NI    FLAGS,255-(BADEVICE)    YES WTO BIT ON THEN\n*                                       TURN WTO FLAG OFF.\n         MVC   LISTWTO+17(8),TERMNAME  MOVE DEVICE NAME INTO\n*                                      THE MESSAGE AREA OF\n*                                      THE LIST FORM OF WTO.\n         WTO   MF=(E,LISTWTO)          EXECUTE FORM OF WTO\n         SPACE 1\nCLOSEREL OI    MACFLAGS,CLSREL         INDICATE DOING CLOSE(REL\n***********************************************************************\n*        CLSDST RELEASE WILL BE DONE FOR THE TERMINAL BY SPECIFYING   *\n*        THE TERMINAL NAME IN THE NIB. THE NIB IS USED BECAUSE THE    *\n*        CLSDST(RELEASE) CAN BE DONE FROM THE LOGON EXIT BEFORE A     *\n*        SESSION HAS BEEN ESTABLISHED. IN THIS CASE, THE CID WOULD BE *\n*        REJECTED BY VTAM IF USED IN THE CLSDST(RELEASE).             *\n***********************************************************************\n         L     R15,=A(FRESHNIB)  GET FRESH ASYNCH NIB            87131\n         MVC   NIBSTART(NIBLNIB),0(R15)   INITIALIZE NIB         87131\n         LA    PTRNIB,NIBSTART         -> NIB\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,NIBUSER              SAVE A(TTE) IN NIB\n         MVC   NIBSYM(8),TERMNAME      MOVE TERMINAL NAME TO NIB\nCLOSERET OI    MFLAGS,CLSDST   SET FLAG - CLSDST IN PROGRESS     90127\n         L     R7,=A(CDSTEND1)  SET EXIT ADDRESS                 90141\n         CLSDST RPL=(PTRRPL),                                          X\n               EXIT=(R7),    CDSTEND1                                  *\n               OPTCD=RELEASE,                                          X\n               NIB=NIBSTART\n         SPACE 1\n         NI    MFLAGS,255-(CLSDST)     INDICATE CLOSE DONE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    CLOSERET                YES. REISSUE              90127\n         LTR   R15,R15                 CLSDST ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '*********  N E T S O L  -  CLSDST(RELEASE) END EXIT'\n***********************************************************************\n*                                                                     *\n*        CHECK VALIDITY OF THE CLSDST(RELEASE)                        *\n*        ENTRY IS FROM THE CLSDST(RELEASE) IN THE RELEASE RTN.        *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCDSTEND1 XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,CLSDST           TELL ERREXIT THAT ERROR\n*                                       IS FOR CLSDST(RELEASE)\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(CLSDST)\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    52    NIB INVALID                          SNOCCUR          *\n*   14    60    INVALID LU NAME                      14  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         OI    EXITFLAG,CLOSEX         INDICATE IN CLOSE REL EX\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB9(R15)            CHECK VALID ACTIONS\nERRTAB9  B     R0CHK9               0  PROBABLY RELEASED IT\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  ALREADY RELEASING, NEW\n*                                       RELEASE WON'T HELP\n         BAL   R7,SNOCCUR           C  NO MSG TO WRITE AND\n*                                       PROBABLY COULDN'T\n*                                       ANYWAY\n         B     CLOSEREL            10  REISSUE.\n         B     FREERPL             14  IT COULD BE THAT NETSOL\n*                                       NO LONGER HAS THE\n*                                       DEVICE SINCE IT WAS\n*                                       ALREADY FREED BY A LOSTERM,\n*                                       RELREQ OR READEND\n*                                       REQUEST.\n         SPACE 1\nR0CHK9   DS    0H\n         LTR   R0,R0                   VALID COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         EJECT\n***********************************************************************\n*                                                                     *\n*  AFTER RELEASING THE TERMINAL, IT MAY BE NECESSARY TO               *\n*  RE-ACQUIRE IT, OR AT LEAST ATTEMPT TO RE-ACQUIRE IT, FOR THE       *\n*  FOLLOWING REASONS:                                                 *\n*                                                                     *\n*    THE OTHER APPLICATION MAY CANCEL ITS REQUEST FOR THE             *\n*    TERMINAL AFTER NETSOL'S RELREQ EXIT HAS ISSUED THE               *\n*    CLSDST(RELEASE), BUT BEFORE LOGGING ONTO THE TERMINAL.           *\n*    IN THIS CASE NETSOL WISHES TO RE-ACQUIRE THE TERMINAL.           *\n*    THE TERMINAL WILL ONLY BE ACQUIRED BY NETSOL IF THE              *\n*    OTHER APPLICATION HAS NOT ALREADY LOGGED ON THE TERMINAL.        *\n*                                                                     *\n*    THE TERMINAL MAY HAVE BEEN RELEASED BECAUSE IT WAS LOGGED        *\n*    ON TO NETSOL WHEN THE TEST REQUEST KEY WAS SET.  THIS            *\n*    BLOCKS ALL FURTHER I/O TO THE DEVICE, INCLUDING ENTRY OF         *\n*    A LOGON SEQUENCE NECESSARY TO PASS THE DEVICE TO TOLTEP.         *\n*    NETSOL MUST RELEASE, THEN RE-ACQUIRE THE DEVICE SO THAT          *\n*    I/O IS NO LONGER BLOCKED.                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R3,RPLUSFLD             -> TTE FOR THE NAME\n         MVI   TERMFLG2,TREL           MARK TERM RELEASED\n         TM    FLAGS,LOGOFF            LOGOFF COMMAND ISSUED?\n         BO    FREERPL                  YES => FINISHED\n         TM    FLAGS,SIMLOG            NOW DO SIMLOGON?\n         BO    SIMLOGON                 YES => BR TO SIMLOGON CODE\n         TM    FLAGS,RELOPND           RELEASE DEVICE ONLY ?\n         BZ    FREERPL\n         NI    FLAGS,255-(RELOPND)\n         LA    PTRNIB,NIBSTART         POINT TO THE NIB\n         L     R3,RPLUSFLD             -> TTE FOR THE NAME\n         MVC   NIBSYM(8),TERMNAME      GET THE SYMBOLIC NAME\n         SPACE 1\n***********************************************************************\n*  MUST USE NIB WITH SYMBOLIC TERMINAL NAME BECAUSE THE CID IS        *\n*  NO LONGER VALID AFTER DEVICE IS RELEASED.  OPNDST(SPEC)            *\n*  MUST HAVE A SYMBOLIC TERMINAL NAME SUPPLIED.                       *\n***********************************************************************\n         SPACE 1\nREOPEN   DS    0H                      USE THIS LABEL FOR ERREXIT\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,NIBUSER              -> TTE IN NIB FOR FUTURE RPLS\n         OI    MACFLAGS,OPNDACQ        SET OPNDST ISSUED\n         OI    MFLAGS,OPNDSPEC         SET OPNDST IS CURRENTLY ACTIVE\n         OPNDST RPL=(PTRRPL),                                          X\n               OPTCD=(SPEC,ACQUIRE),                                   X\n               EXIT=OPNAQRX,                                           X\n               NIB=NIBSTART\n         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    REOPEN                  YES. REISSUE\n         LTR   R15,R15                 OPNDST ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '*********  N E T S O L  -  OPNDST (SPEC,ACQUIRE) EXIT'\n***********************************************************************\n*                                                                     *\n*        CHECK VALIDITY OF THE OPNDST                                 *\n*        ENTRY IS FROM THE OPNDST IN THE CLSDST END EXIT.             *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nOPNAQRX  XHEAD ,                                                 90141\n         TM    UFLAGS,UFGIGNER         SHUTDOWN IN PROGRESS?     86065\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR\n*                                       IS FOR OPNDST\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO\n         SPACE 2                                                 90120\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    00    DEVICE UNAVAILABLE                   14  00           *\n*   10    03    VTAM IS HALTING                      SNOCCUR          *\n*   10    05    PERMANENT FAILURE IN PATH            08  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    53    NODE UNKNOWN TO VTAM                 14  00           *\n*   14    55    NO OPNDST AUTHORIZATION              SNOCCUR          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         OI    EXITFLG2,OPNACQX        INDICATE OPNDST EXIT ENTERED\n         CH    R15,HEX14               HIGHEST VALID ACTION\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB7(R15)            CHECK VALID ACTIONS\nERRTAB7  B     R0CHK7               0  CHECK IF DEVICE ACCEPTED\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         B     FREERPL              C  CAN'T WRITE MSG IF NOT    88304\n*                                      CONNECTED (WAS SNOCCUR)\n         B     OPNAROPN            10  REISSUE. NO NEED TO       90141\n*                                       CHECK FOR RESET\n         B     FREERPL             14  A NORMAL CASE.  FAILED\n*                                       TO RECONNECT DEVICE.\n         SPACE 1\nR0CHK7   DS    0H\n         CH    R0,HEX8                 TERMINAL RECONNECTED?\n         BE    FREERPL                 NO. THIS IS WHAT IS\n*                                       WANTED.  CONTINUE\n*                                       WITH OTHER DEVICES.\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         L     R3,RPLUSFLD             -> TTE\n         MVI   TERMFLG2,TOPEN             MARK TERM ON NETSOL\n         OI    FLAGS,FIRSTSND\n         B     RESEND\n         SPACE 1                                                 90141\nOPNAROPN L     R7,=A(CDSTEND1)  SET BASE FOR REOPEN              90141\n         B     REOPEN-CDSTEND1(R7)  RE-ISSUE SEND                90141\n         SPACE 1                                                 90141\n***********************************************************************\n*                                                                     *\n*        CONSTANTS FOR NETSOLEX CSECT ADDRESSABILITY                  *\n*                                                                     *\n***********************************************************************\nEXMAIN   DC    A(NETSOL70)   MAIN BASE ADDRESS                   90141\n         TITLE '*********  N E T S O L  -  RESEND ROUTINE'\n***********************************************************************\n*                                                                     *\n*        RESEND (REISSUE A SEND)                                      *\n*                                                                     *\n*   THIS ROUTINE IS USER BY THE SENDEND EXIT , RECEND EXIT ,          *\n*   RELEASE EXIT TO REISSUE THE 'GOOD MORNING ' MESSAGE               *\n*   AFTER RECEIVING A BAD LOGON OR RECOVERING AN LU                   *\n*                                                                     *\n***********************************************************************\nNETSOL70 CSECT ,             COMMON SUBROUTINES                  90141\n         SPACE 2\nRESENDSG NI    RPLOPT12,FF-RPLFMHDR CLEAR FM HDR BIT             89338\n         OI    FLAGS,FIRSTSND  TRY NEW BRACKET                   89338\nRESENDAP L     R3,RPLUSFLD   GET THE TTE BACK                    88179\n         TM    TERMFLG3,TFAPL  FORCED LOGON ?                    88220\n         BNZ   RESENDAC      YES                                 88179\n         OC    TERMDAPL,TERMDAPL  ALTERNATE FORCED ID ?          88179\n         BZ    RESEND        NO; JUST REFRESH THE DISPLAY        88179\nRESENDAC XC    GPDATAL,GPDATAL  CLEAR OPTIONAL DATA              88179\n         L     R7,=A(OPENEND)  SET BASE FOR AUTOTIME             90141\n         B     AUTOTIME-OPENEND(R7)  RETRY APPLICATION CONNECT   88179\nRESEND   NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB             86160\nOPSEND   SLR   R0,R0                                             86160\n         L     R3,RPLUSFLD   GET TTE PTR BACK                    86160\n         ICM   R0,1,TERMMSGX  REPEAT PRIOR MESSAGE ?             86160\n         BNM   OPSEND2       NO                                  86160\n         MVI   TERMMSGX,0    CLEAR OUT                           86160\n         B     SENDMSG       GO TO SEND IT                       86160\nOPSEND2  TM    UFLAGS,UFGSYS SYSTEMS ONLY ?                      88220\n         BZ    OPSEND20      NO                                  88220\n         TM    TERMFLG3,TPRIVY  SYSTEMS UNLOCK ?                 88220\n         BZ    OPSEND13      NO; SEND 'CLOSED'                   88220\nOPSEND20 LA    R0,MSG20      SET FOR LOGON SCREEN                88179\n         TM    TERMFLG3,TFREQ  LOGON REQUIRED ?                  88179\n         BZ    OPSEND12      NO                                  88179\n         TM    TERMFLG3,TFLON  LOGON PERFORMED ?                 88179\n         BZ    OPSENDCM      NO; SOLICIT LOGON                   88179\nOPSEND12 LA    R0,MSG12      REGULAR APPLICATION MENU            88179\n         TM    TERMFLG3,TFAPL  FORCED APPLICATION ?              88220\n         BNZ   OPSEND13      YES                                 88220\n         CLI   TERMDAPL,0    DEDICATED APPLICATION ?             87137\n         BE    OPSENDCM      NO; ISSUE NORMAL MENU               88220\nOPSEND13 LA    R0,MSG13      ELSE USE NASTIER SCREEN             86065\nOPSENDCM B     SENDMSG\n         TITLE '*********  N E T S O L  -  ADD TIME AND NODE NAME TO MEX\n               SSAGE'\n*        A LITTLE SUBROUTINE TO PUT NODE AND TIME IN MESSAGE 12\n*          ***** RETURNS TO REG 14 ******\n         SPACE 1\nTIMETERM STM   R0,R1,TIMESAVE          SAVE REGS\n         ICM   R1,15,DDTTERM   -> TERM FIELD IN MSG 12           86065\n         BZ    TIMETERN      SKIP NAME INSERTION                 86065\n         MVC   0(8,R1),TERMNAME        INSERT NODE NAME\n         SPACE 1\n*        PLACE TIME IN MESSAGE 12\n         SPACE 1\nTIMETERN TIME  DEC           * DONE BEFORE TEST - SAVE R1 *\n         SRL   R0,12         MAKE 000HHMMS                       88220\n         STM   R0,R1,TIMEWORK  TIME STASHED AS 000HHMMS DDYYY    88220\n         OI    TIMEWORK+3,X'0F'  CLOBBER SECONDS BY SIGN         88220\n         ICM   R1,15,DDTTIME  -> TIME FIELD IN MSG 12            86065\n         BZ    TIMETERT      SKIP IF NO ROOM                     86065\n         MVC   7(7,R1),=X'402120204B2020'  0HH.MM MASK           88220\n         ED    7(7,R1),TIMEWORK+1   MAKE TIME                    88220\n         MVC   0(7,R1),=X'F021204B202020'  YY.DDD                88220\n         ED    0(7,R1),TIMEWORK+5  MAKE DATE                     88220\n         MVI   0(R1),C' '    CLEAR HUNDREDS                      88220\n         TM    TERMFLG3,TPRIVY  UNLOCKED TERMINAL ?              87187\n         BNZ   *+8           YES; LEAVE PERIOD                   87187\n         MVI   7+4(R1),C':'  ELSE INDICATE LOCKED (:)            88220\nTIMETERT LM    R0,R1,TIMESAVE          RESTORE THE WORKERS\n         BR    R14                     RETURN TO REQUESTOR\nTIMEWORK DC    F'0'\nTIMESAVE DC    2F'0'                    SAVE R0 + R1 HERE\n         TITLE '*********  N E T S O L  -  GET/FREE AN RPL ROUTINES'\n***********************************************************************\n*                                                                     *\n*        THE GETRPL SUBROUTINE GETS A NEW RPL VIA A GETMAIN MACRO     *\n*        FOR 'LNGTHRPL' IN SUBPOOL 1. IT THEN INITIALIZES IT AND      *\n*        RETURNS TO THE CALLER WITH THE RPL ADDRESS IN R5.            *\n*                                                                     *\n*        INPUT REGISTERS:                                             *\n*                                                                     *\n*              REG 10-12 - BASE REGISTERS                             *\n*              REG 14    - CALLER'S RETURN ADDRESS                    *\n*                                                                     *\n*        OUTPUT REGISTERS:                                            *\n*                                                                     *\n*              REG 0-1 - UNPREDICTABLE                                *\n*              REG 5   - ADDRESS OF AN INITIALIZED RPL/NIB/WORKAREA   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETRPL   DS    0H\n         L     R0,LNGTHRPL             LENGTH OF RPL + SUBPOOL\n         GETMAIN R,LV=(0)              G E T M A I N    R P L\n         MVC   0(8,R1),=CL8'DYNAMRPL'  IDENTIFY THE RPL AS DYNAMIC\n         LA    PTRRPL,8(,R1)           R5 -> R P L\n         L     R15,=A(FRESHNIB)  POINT TO ASYNCH NIB/RPL         87131\n         MVC   IFGRPL(LNIFGRPL),FRESHRPL-FRESHNIB(R15)  COPY RPL 87131\n*                                      NOTE: THIS MAKES RPL ASYNCH\n         MVC   NIBDMPID(8),=CL8'DYNAMNIB' SET NIB DUMP ID\n         MVC   NIBSTART(NIBLNIB),0(R15) INITITIALIZE NIB         87131\n         XC    WORKSPAC(WORKRPLA),WORKSPAC ZERO OUT KEY WORK AREA STUFF\n         STM   R0,R1,TIMESAVE          SAVE WORK REGS\n         TIME  DEC                      SAVE TIMESTAMP\n         STM   R0,R1,GRPLTIME            IN RPL WORKAREA\n         LM    R0,R1,TIMESAVE             RESTORE WORK REGS\n         BR    R14                     RETURN TO CALLER\n         SPACE 3                                                 90120\n***********************************************************************\n*                                                                     *\n*        FREERPL IS ENTERED WHEN AN RPL/WORKAREA IS NOLONGER          *\n*        NEEDED BY THE EXIT ROUTINES.  IT ISSUES A FREEMAIN           *\n*        MACRO FOR THE RPL ADDRESS IN REGISTER 5.                     *\n*        IF THE FIRST 8 CHARACTERS OF THE WORKAREA ARE NOT 'DYNAMRPL' *\n*        THEN THIS SUBROUTINE BRANCHES TO INDICATE A USER 0008 ABEND. *\n*                                                                     *\n*        AT EXIT FROM FREERPL, CONTROL IS RETURNED TO VTAM.           *\n*                                                                     *\n*        INPUT REGISTERS                                              *\n*          R5  - POINTS TO RPL/WORKAREA TO BE FREED                   *\n*          R10-R12 - BASE REGISTERS                                   *\n*          R13 - ADDRESS OF REGISTER SAVE AREA                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nFREERPL  ICM   R3,15,RPLUSFLD  LOAD AND TEST TTE ADDRESS         88185\n         BZ    *+10                      THEN\n         XC    TERMCRPL,TERMCRPL              RESET A(RPL) IN TTE\n         L     R0,LNGTHRPL             LENGTH OF RPL TO BE FREED\n         S     R5,=F'8'                REDUCE FOR INDENTITY AT FRONT\n         CLC   0(8,R5),=CL8'DYNAMRPL'  IS IT A DYNAMIC RPL ?\n         BNE   TOOSMALL                NO, ISSUE U0008 ABEND\n         SPACE 1\n         FREEMAIN R,LV=(0),A=(5)       F R E E   R P L  -> R5\n         SPACE 1\nRETURN   DS    0H\n         L     R14,RETVTAM@            RESTORE EXIT RETURN ADDRESS\n         BR    R14                     RETURN\n         SPACE 1\nLNGTHRPL DC    0F'0',AL1(1),AL3(ENDSECT-STSECT+8)  RPL SUBPOOL/LENGTH\n         TITLE '*********  N E T S O L  -  RECEIVE(ANY) SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*                   RECEIVE (ANY)                                     *\n*                                                                     *\n*        THIS SUBROUTINE IS ENTERED ONLY WHEN A REC (ANY) IS TO       *\n*        BE ISSUED.                                                   *\n*                                                                     *\n*        INPUT REGISTERS:                                             *\n*                                                                     *\n*              REG 5     - POINTS TO AN ASYNCHRONOUS RPL PLUS         *\n*                          ITS WORKAREA                               *\n*              REG 14    - CALLER'S RETURN ADDRESS                    *\n*                                                                     *\n*         OUTPUT REGISTERS:                                           *\n*                                                                     *\n*               REG 0-1   - UNPREDICTABLE                             *\n*               REG 2-14  - VALUE AT INPUT                            *\n*               REG 15    - UNPREDICTABLE                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRECSUB   DS    0H\n         ST    R14,SUBSAV14            SAVE RETURN ADDR\nRECANY   OI    MFLAGS,RECA             INDICATE READ(ANY) IN PROGRESS\n         RECEIVE RPL=(PTRRPL),OPTCD=(ASY,ANY,TRUNC,Q),                 X\n               AREA=IOAREA,AREALEN=L'IOAREA,EXIT=RECEND,               X\n               RTYPE=(DFSYN,RESP,DFASY)  ALLOW ATTENTIONS        89335\n         NI    MFLAGS,255-(RECA)\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR RECEIVE(ANY):                                    *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    RECANY                  YES. REISSUE\n         LTR   R15,R15                 READ-ANY ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         L     R14,SUBSAV14            RESTORE THE RETURN ADDR\n         BR    R14                     RETURN TO CALLER\n         TITLE '********* N E T S O L  -  LUSTAT ROUTINE'\n***********************************************************************\n*       ROUTINE TO HANDLE LOGICAL UNIT STATUS RECEIVED                *\n*                                                                     *\n*    SSENEEI  SSENSMI                                                 *\n*      00        02       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *\n*      00        02          SNOCCUR                                  *\n*      08        1C       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *\n*      08        2B         \"     \"     \"        \"    \"    \"  (RESEND)*\n*      08        31       DEVICE POWERED OFF     \"    \"    \"          *\n*      08        01          SNOCCUR                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nLUSTATUS DS    0H\n         OI    FLAGS,LUSTATE           SEND +VE RESPONSE\n         OI    MFLAGS,LUSEND\n         MVC   SENSE(2),RPLSSEI   SAVE SSENSEI + SSENSMI\n         MVC   USENSE(2),RPLUSNSI SAVE USSESEI(2 BYTES)\n         NI    RPLOPT12,FF-RPLFMHDR CLEAR FM HDR BIT\n         SPACE 1\nSENDLU   L     R7,=A(SENDEND)                                    90141\n         SEND  STYPE=RESP,CONTROL=LUS,RESPOND=(NEX,FME,NRRN),          *\n               RPL=(PTRRPL),POST=SCHED,OPTCD=(ASY,CA),EXIT=(R7)  90141\n         NI    MFLAGS,255-(LUSEND)     SEND DONE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n         BE    SENDLU                  YES. REISSUE\n         LTR   R15,R15                 WRITE ACCEPTED?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND CHK)?\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B    RETURN                   RETURN TO VTAM\n         SPACE 1\nCONTLU   NI    FLAGS,255-(LUSTATE)     LUSTAT SEND DONE\n         CLC   SENSE,LUS0001           IS DEVICE NOW AVAILABLE\n         BE    RESEND                  YES SO SEND LOGON MSG.\n         CLC   SENSE,LUS082B           IS DEVICE NOW AVAILABLE\n         BE    RESEND\n*LOOPS*  CLC   SENSE,LUS0831 POWERED OFF ?                       89344\n*LOOPS*  BE    RESEND        YES; BETTER ERROR RECOVERY ON INT.REQ.\n         B     FREERPL\n         SPACE 1                                                 90141\n         LTORG ,                                                 90141\n         TITLE '*********  N E T S O L  -  ERROR EXIT RTN'\n***********************************************************************\n*                                                                     *\n*    THIS ROUTINE IS ENTERED IF AN ERROR IS DETECTED.                 *\n*                                                                     *\n*        INPUT REGS:                                                  *\n*                                                                     *\n*    REGISTER 0 CONTAINS A RTNCD CODE (4, 8, C, 10, 14, 18)           *\n*                                                                     *\n*    REGISTER 1 POINTS TO THE RPL OF THE REQUEST                      *\n*                                                                     *\n*           THE FDBK2 FIELD OF THIS RPL CONTAINS A REASON             *\n*           CODE WHICH IS A SUBCODE OF THE RTNCD CODE IN              *\n*           REGISTER 0.                                               *\n*                                                                     *\n*    REGISTER 2 - 12 UNMODIFIED BY VTAM                               *\n*                                                                     *\n*    REGISTER 13 POINTS TO THE SAVE AREA IN USE                       *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS TO VTAM                      *\n*                                                                     *\n*    REGISTER 15 ERREXIT ROUTINE ADDRESS                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    EXIT FROM ERREXIT IS AS FOLLOWS:                                 *\n*                                                                     *\n*           THRU ERRETURN TO VTAM, WHICH WILL RETURN TO THE           *\n*           MAINLINE OR EXIT ROUTINE NSI.                             *\n*                                                                     *\n*           TO SNOCCUR, WHICH WILL ABNORMALLY TERMINATE               *\n*           NETSOL.                                                   *\n*                                                                     *\n*           TO PROBDEV.                                               *\n*                                                                     *\n*                                                                     *\n*        OUTPUT REGS:                                                 *\n*                                                                     *\n*    REGISTER  1-9  UNPREDICTABLE                                     *\n*                                                                     *\n*    REGISTER 10-12 NETSOL BASE REGISTERS                             *\n*                                                                     *\n*    REGISTER 13    SAVE AREA UPON ENTRY                              *\n*                                                                     *\n*    REGISTER 14    UNPREDICTABLE IF EXIT TO SNOCCUR OR               *\n*                    RETURN.                                          *\n*                   VALUE AT INPUT IF RETURN TO VTAM.                 *\n*                                                                     *\n*    REGISTER 15    THE INPUT RTNCD CODE IF ERREXIT WAS               *\n*                   ENTERED FROM MAINLINE NETSOL.                     *\n*                   AN ACTION CODE IF ENTERED FROM AN EXIT            *\n*                    ROUTINE.                                         *\n*                                                                     *\n*    REGISTER  0    UNPREDICTABLE IF ENTERED FROM MAINLINE            *\n*                    NETSOL.                                          *\n*                   AN ACTION CODE MODIFIER IF ENTERED FROM AN        *\n*                    EXIT ROUTINE.                                    *\n*                                                                     *\n*        NOTE: REGISTERS 0 AND 15 WILL BE RETURNED THRU VTAM          *\n*              TO MAINLINE OR EXIT ROUTINE NSI.                       *\n*    DESCRIPTION OF ACTION CODES AND FLAGS                            *\n*                                                                     *\n*                                                                     *\n*        THE ERREXIT ROUTINE COMMUNICATES TO THE ERROR EXIT NSI       *\n*        VIA AN ACTION CODE SET IN REG 15 AND, IN SOME CASES,         *\n*        AN ACTION CODE MODIFIER SET IN REG 0. IN SOME SPECIAL        *\n*        CASES, FLAGS ARE SET TO PASS INFORMATION TOO.                *\n*                                                                     *\n*        THE ACTION CODES AND MODIFIERS INDICATE APPROPRIATE          *\n*        ACTIONS TO BE TAKEN BY THE EXIT ROUTINE. THE EXIT            *\n*        ROUTINE MAY, HOWEVER, HANDLE THE ERROR ACTION                *\n*        DIFFERENTLY FROM WHAT ERREXIT INDICATES BY ITS ACTION        *\n*        CODE, IF IT SO CHOOSES.                                      *\n*                                                                     *\n*        ACTION CODES AND MODIFIERS ARE AS FOLLOWS:                   *\n*                                                                     *\n*            00 MACRO COMPLETED SUCCESSFULLY                          *\n*               REG 0 MODIFIER=0                                      *\n*                                                                     *\n*            04 THIS IS A SNO (SHOULD NOT OCCUR) WHICH WILL NOT       *\n*               BE SET BY THE ERROR EXIT. IF THIS IS SET AT           *\n*               NSI, THE NETWORK SOLICITOR SHOULD ABNORMALLY          *\n*               TERMINATE.                                            *\n*                                                                     *\n*TORELES     08 BRANCH TO RELEASE                                     *\n*RELONLY        REG 0 MODIFIER=0 CLSDST                               *\n*REL1ST                        4 CLSDST + OPNDST (AQUIRE)             *\n*                                                                     *\n*TOSEND     0C BRANCH TO SENDMSG                                      *\n*               REG 0 MODIFIER=MESSAGE NUMBER                         *\n*                                                                     *\n*REISSU        10     REISSUE THE REQUEST                             *\n*                                                                     *\n*TOENDREQ    14 BRANCH TO FREERPL                                     *\n*                                                                     *\n*TORESEND    18 RESEND                                                *\n*RSETSOL     1C SNOCCUR                                               *\n*                                                                     *\n*TOPROBDV    20 BRANCH TO PROBDEV                                     *\n*                                                                     *\n*    SINCE NETSOL DOES NOT ISSUE ALL API MACROS, NOT ALL              *\n*    RTNCD CODES AND REASON CODES ARE POSSIBLE. THOSE                 *\n*    FDBK3 CODES WHICH CAN OCCUR FOR THE MACROS ISSUED ARE            *\n*    LISTED WITHIN THE SUBSECTIONS OF ERREXIT FOR EACH                *\n*    RTNCD CODE. THIS LIST INCLUDES ANY WHICH MAY BE                  *\n*    IMPOSSIBLE BECAUSE OF CURRENT NETSOL LOGIC.  THOSE WHICH         *\n*    ARE POSSIBLE ARE INDICATED WITH AN '*'.  BASIC ONLY              *\n*    CODES ARE NOT LISTED.                                            *\n*                                                                     *\n*                                                                     *\n*    THE FLAGS SET ARE:                                               *\n*                                                                     *\n*          LOOPONCE - REISSUE I/O COMMAND ONE MORE TIME. IF           *\n*                     THE REISSUED COMMAND IS SUCCESSFUL, THE         *\n*                     FLAG MUST BE TURNED OFF BY THE MAINLINE         *\n*                     OR EXIT ROUTINE. IF UNSUCCESSFUL,               *\n*                     ERREXIT TURNS OFF THE FLAG ON ENTRY TO          *\n*                     HANDLE THE FAILURE.                             *\n*                                                                     *\n*            RELOPND - RELEASE THE DEVICE THEN OPNDST(ACQUIRE)        *\n*                      IT, THUS RE-ESTABLISHING A SESSION FOR         *\n*                      THAT DEVICE.                                   *\n*                                                                     *\n*           SHUTDOWN - NETSOL SHUTDOWN IN PROGRESS. IF THIS           *\n*                      BIT IS ON AT ENTRY TO AN EXIT ROUTINE          *\n*                      OTHER THAN TPEND, NO PROCESSING IS DONE        *\n*                      WITHIN THE ROUTINE. THIS WILL RAPIDLY          *\n*                      FLUSH EXITS REQUESTS ALREADY SCHEDULED         *\n*                      AT THE TIME A NEED FOR SHUTDOWN IS             *\n*                      DETECTED.                                      *\n*                      NOTE: THIS BIT IS ALSO SET BY THE TPEND        *\n*                            EXIT, WHICH HAS BEEN SCHEDULED           *\n*                            PRIOR TO ENTRY TO ERREXIT FOR A          *\n*                            SHUTDOWN CONDITION.                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNETSOLER CSECT ,             SPLIT OFF FOR ADDRESSABILITY        87186\nERREXIT  DS    0H\n         BALR  R9,0                                              87186\n         USING *,R9          LOCAL BASE                          87186\n         SPACE 1\n***********************************************************************\n*        NO NEED TO ESTABLISH ADDRESSABILITY, SINCE BASE REGISTERS    *\n*        HAVE NOT BEEN MODIFIED.  NOTE THAT ALSO PTRRPL POINTS TO RPL *\n*        USED IN EXIT ROUTINE, ALTHOUGH IT IS NOT NECESSARILY THE RPL *\n*        IN USE WHEN ERREXIT WAS ENTERED, I. E. SYNCHRPL MAY          *\n*        HAVE BEEN IN USE FOR INQUIRE (APPSTAT).                      *\n***********************************************************************\n         SPACE 1\n         LR    R7,R0                   SAVE RTNCD CODE TO\n*                                       USE AS RETURN CODE IF\n*                                       ENTRY FROM MAINLINE.\n         SPACE 1\n         DROP  R5\n         USING IFGRPL,R1               => R P L\n         SPACE 1\n         LR    R8,R1                   SAVE RPL ADRESS\n         LR    R6,R14                  SAVE RETURN ADDRESS\n         SPACE 1\n***********************************************************************\n*        FORMAT THE RPL ERROR FIELDS INTO A READABLE MESSAGE AND      *\n*        WRITE THE MESSAGE TO THE OPERATOR. NOTE THAT SOME ERRORS     *\n*        WILL NOT BE LOGGED TO THE SYSTEM LOG AS THEY ARE CONSIDERED  *\n*        UNIMPORTANT. THE DATA IN ERMDATA ARE AVAILABLE FOR           *\n*        DEBUGGING PURPOSES.                                          *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*        BYPASS THOSE ERROR COMBINATIONS DEFINED IN 'ERMSGTAB'        *\n***********************************************************************\n         SPACE 1\n         STM   R3,R5,RPLERRSA     SAVE WORK REGS DURING TABLE SCAN\n         TM    UFLAGS,SHUTDOWN+UFGIGNER+UFGREST  SHUTTING DOWN ? 89338\n         BNZ   ERMBYPAS      YES, DON'T FLOOD CONSOLE            89338\n         MVC   ERMDATA(1),RPLREQ  BUILD                  REQ\n         MVC   ERMDATA+1(2),RPLFDBK   ERROR COMPARISON  /RTNCD/FDBK2\n         MVC   ERMDATA+3(4),RPLSSEI     FIELD           /SSEI/SSMI/USER\n         LM    R3,R5,ERMBXLE      LOAD BXLE REGS\n         TM    UFLAGS,INITDLAY  STILL IN START-UP MODE ?         89338\n         BZ    *+8           NO                                  89338\n         LA    R3,ERMINIT    USE LONGER EXCLUSION LIST           89338\n         CR    R3,R5              NULL TABLE?\n         BH    ERMSG              YES => DISPLAY ERROR MSG\n         SPACE 1\nERMLOOP  MVC   ERMTEMP,ERMDATA    COPY COMPARISON FIELD TO WORKAREA\n         NC    ERMTEMP,ERMAND(R3) ZERO IRRELEVANT FIELDS FOR COMPARE\n         CLC   ERMTEMP,ERMCODE(R3) A NON-DISPLAY ERROR?\n         BE    ERMBYPAS             YES => DON'T DISPLAY ERROR MSG\n         BXLE  R3,R4,ERMLOOP        NO  => LOOK AT NEXT TABLE ENTRY\n         SPACE 1\n***********************************************************************\n*        FORMAT AND DISPLAY ERROR MESSAGE                             *\n***********************************************************************\n         SPACE 1\nERMSG    UNPK  PACKWORK(3),RPLREQ(2)   UNPACK REQUEST CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+33(2),PACKWORK PUT IN THE MESSAGE\n         UNPK  PACKWORK(3),RPLRTNCD(2) UNPACK RETURN CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+42(2),PACKWORK PUT IT IN THE MESSAGE\n         UNPK  PACKWORK(3),RPLFDB2(2)  UNPACK FEEDBACK 2 CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+51(2),PACKWORK PLACE IN MESSAGE\n         UNPK  PACKWORK(9),RPLSSEI(5)  UNPACK SYSTEM SENSE CODES\n         TR    PACKWORK(8),TRTAB       PRETTY IT UP\n         MVC   ERRORMSG+62(2),PACKWORK TO MESSAGE\n         MVC   ERRORMSG+73(2),PACKWORK+2  RPLSSMI CODES TOO\n         MVC   ERRORMSG+82(4),PACKWORK+4  RPLUSNSI CODES ALSO\n         L     R3,RPLUSFLD             -> TTE FOR TERMINAL NAME\n         MVC   ERRORMSG+92(8),TERMNAME TO ERROR MESSAGE AREA\nERMWTO   WTO   MF=(E,ERRORMSG)              WRITE ERROR MSG.\nERMBYPAS LR    R15,R7                  RESTORE R0 RETURN CODE\n         LR    R1,R8                   RESTORE RPL ADDRESS\n         LR    R14,R6                  RESTORE RETURN ADDRESS\n         LM    R3,R5,RPLERRSA          RESTORE WORK REGS\n         SPACE 1\n***********************************************************************\n*        CHECK IF ERREXIT HAS BEEN ENTERED FROM MAIN LINE OR          *\n*        EXIT ROUTINE . IF ERROR IN MAIN LINE THEN RETURN VIA         *\n*        REGISTER 14, AND UPON RETURN TO MAIN-LINE CODE               *\n*        APPROPRIATE ACTION WILL BE TAKEN.                            *\n***********************************************************************\n         SPACE 1\n         LR    R3,R14                  SAVE RETURN ADDR\n         C     R1,=A(SETLRPL)  IS THIS A SETLOGON REQUEST ?      88210\n         BER   R14                     YES.  IN MAINLINE\n*                                       AND RETURN TO VTAM.\n         CH    R15,HEX18           18  RPL ECB/EXIT PROBLEM?\n         BL    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n*                                       OCCUR SINCE SHUTDOWN\n*                                       SWITCH STOPS EXITS'\n*                                       ACTION PRIOR TO THE\n*                                       CLSDSTACB.\n*                                      NOTE. CODES HIGHER\n*                                       THAN 18 DO NOT EXIST\n         SPACE 1\n***********************************************************************\n*        UPON ENTRY IF R1 IS NOT EQUAL TO R5 (R1 = A(SYNCHRPL) )      *\n*        THEN R1'S AND R5'S INFORMATION MUST BE COMBINED.             *\n*        THE COMMAND THAT CAUSED THE ERROR WAS                        *\n*        ISSUED USING SYNCHRPL AND R5 IS POINTING TO AN               *\n*        ASYNCH RPL.  FOR THIS RTN WE NEED SOME INFO IN BOTH.         *\n***********************************************************************\n         SPACE 1\n         CR    R1,R5                   ARE WE USING ONE RPL\n         BE    ERRPLOK                 YES, BRANCH\n*              MOVE THE NECESSARY INFORMATION FROM THE R5 RPL TO\n*              SYNCHRONOUS RPL (R1). THIS IS THE SWITCHES, SAVE AREAS\n*              ETC. PRIOR TO THE WORK AREAS.\n         L     R14,=A(SYNWORK)  GET WORK AREA                    86145\n         MVC   0(WORKRPLA,R14),LNIFGRPL(R5)                      86145\n         SPACE 1\n***********************************************************************\n*        GET THE FDBK2 FIELD FROM THE RPL.                            *\n*        PREPARE TO BRANCH BASED ON 'RTNCD'.                          *\n***********************************************************************\n         SPACE 1\nERRPLOK  DS    0H\n         SLR   R6,R6                   CLEAR REG 6  .\n         IC    R6,RPLFDB2              PICK UP REASON CODE\n         LR    R7,R6                   START TO INITIALIZE R7\n*                                       WHICH WILL BE USED AS\n*                                       AN INDEX FOR BRANCH\n*                                       TABLES\n         SLR   R0,R0                   SET UP DEFAULT ACTION CODE\n         SPACE 1\n***********************************************************************\n* TRANSLATE RTNCD CODE AND FDBK2 CODE INTO ACTION CODE                *\n*                                                                     *\n*   RTNCD CODES HAVE A GENERAL MEANING AS FOLLOWS:                    *\n*                                                                     *\n*          04   EXTRAORDINARY COMPLETION                              *\n*                 FUNCTION COMPLETED. ADDITIONAL INFORMATION          *\n*                 AVAILABLE. PROBABLY HANDLED OUT OF LINE.            *\n*                 CONDITION SHOULD BE HANDLED BEFORE MAKING           *\n*                 FURTHER REQUESTS TO THE DEVICE.                     *\n*                                                                     *\n*          08   REISSUE                                               *\n*                 TEMPORARY ENVIRONMENT CONDITION CAUSED              *\n*                 REQUEST TO BE REJECTED.                             *\n*                                                                     *\n*          0C   DAMAGE                                                *\n*                 INTEGRITY OF THE REQUEST OR DEVICE HAS BEEN         *\n*                 DISTURBED.                                          *\n*                                                                     *\n*          10   ENVIRONMENT ERROR                                     *\n*                 REQUEST INCOMPLETE DUE TO ENVIRONMENTAL             *\n*                 CONDITION. ENVIRONMENT MUST BE ALTERED              *\n*                 BEFORE RECOVERY CAN BE ATTEMPTED.                   *\n*                                                                     *\n*          14   USER LOGIC ERROR                                      *\n*                 USER ERROR ON THE REQUEST. REQUEST REJECTED         *\n*                 OR INCOMPLETE. NOT EXECUTABLE IN THE                *\n*                 PRESENT FORM.                                       *\n*                                                                     *\n*          18   RPL NOT AN RPL   OR   RPL IS ALREADY ACTIVE.          *\n***********************************************************************\n         SPACE 1\n         B     FEEDTAB(R15)            GO TO FEEDBACK CODE\n*                                       HANDLING ROUTINE\nFEEDTAB  BAL   R7,SNOCCUR           0  FEEDBACK OF 00 DOESN'T\n*                                       ENTER LERAD OR SYNAD\n         B     EXTRAORD             4  EXTRAORDINARY COM-\n*                                       PLETION\n         B     REISSUE              8  REISSUE\n         B     DAMAGE               C  DAMAGE\n         B     ENVIRON             10  ENVIRONMENT ERROR\n         B     LOGIC               14  LOGIC ERROR\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 04 - EXTRAORDINARY COMPLETION                           *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)         MEANING                             *\n*                                                                     *\n*    03        *  RECEIVE    /   \"     \"          \"     MESSAGE       *\n*    04        *  RECEIVE    / EXCP CONDITION INCOMING RESPONSE       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXTRAORD DS    0H\n         CH    R6,HEX3                 IS IS VALID FDBK2\n         BE    VALFDBK2                YES SO HANDLE IT\n         CH    R6,HEX4                 IS IT ONLY VALID REASON CODE\n         BE    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n* BSC DEVICES UNDER VTAM2 RESPOND WITH ZERO SENSE IN SOME CASES\n* TO RECORD MODE MACROS I.E.\n* WHEN USER SENSE INCLUDED THE SSENSEI + SSENSMI FIELDS ARE 0\n***********************************************************************\n         SPACE 1\nVALFDBK2 IC    R7,SENSE                SAVE SSENSEI FOR BRANCHING\n         LTR   R7,R7                   DO WE HAVE ZERO STATUS?\n         BZ    STAT3270                MUST BE STATUS FROM 3270\n***********************************************************************\n*        CONVERT SENSE CODE INTO BRANCH TABLE OFFSET                  *\n***********************************************************************\n         SRL   R7,3                    ASSUME X'04' IS INDEX = 0\n         SLR   R6,R6                   ZERO INDEX REG\nCINDEX4  LTR   R7,R7                   INDEX DONE?\n         BZ    BRTAB4                  YES => GO BRANCH\n         SRL   R7,1                    NO  => SHIFT NEXT BIT OUT\n         LA    R6,4(,R6)                      BUMP INDEX BY 4\n         B     CINDEX4                        GET NEXT BIT\nBRTAB4   CH    R6,HEX14                INDEX TOO BIG?\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RSNTAB4(R6)             GO TO HANDLE SSENSMI\nRSNTAB4  BAL   R7,SNOCCUR        <08 (00)  SHOULD NOT OCCUR\n         B     REQREJ             08 (04)  REQUEST REJECT\n         B     REQERR             10 (08)  REQUEST ERROR\n*OLD*    B     STATERR            20 (0C)  STATE ERROR\n         B     DORELON            20 (0C)  STATE ERROR - RELEASE 94104\n         B     RHERROR            40 (10)  RH ERROR\n         B     PATHERR            80 (14)  PATH ERROR\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        08 - REQUEST REJECT                                          *\n*                                                                     *\n*     SSENSEI/SSENSMI                                                 *\n*       08      00                  REISSUE SEND (IN BRACKET)         *\n*       08      01                  RELEASE LU                        *\n*       08      02                  IGNORE (CONTINUE)                 *\n*       08      11                  REISSUE SEND (USER ATTN)     87054\n*       08      13                  REISSUE SEND (IN BRACKET)         *\n*       08      18           LINK CONNECT/DISCONNECT (RETRY)     86131\n*       08      1B                  IGNORE (WAIT FOR LU TO ENTER DATA)*\n*       08      1C                  IGNORE                  DC18203   *\n*       08      27                  INTERMITTENT ERROR - RETRY   88304\n*       08      2B                  REISSUE SEND                      *\n*       08      2D                  IGNORE (CONTINUE)                 *\n*       08      31                     \"       \"                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nREQREJ   IC    R7,SENSE+1              GET SSENSMI\n         CH    R7,HEX2                 IS IT POSSIBLE\n         BH    TRYHIGH                 >2 TRY FOR HIGH RANGE\n         SLL   R7,2          CONVERT INDEX TO OFFSET\n         B     RSNTAB5(R7)             HANDLE SSENSMI\n         SPACE 1\nRSNTAB5  B     DORESEND      0  REISSUE SEND WITHOUT BB          86160\n         B     DORELON       1  RELEASE                          86160\n         B     DOENDREQ      2  CONTINUE REQUEST (IGNORE)        86160\n         SPACE 1\nTRYHIGH  CH    R7,HEX13            13  REISSUE SEND\n         BE    DORESEND                                          86160\n         CH    R7,HEX11      ATTENTION DURING WRITE ?            87054\n         BE    DORESEND      YES; RESTART THE WRITE (NASTY)      87054\n         SPACE 1                                                 86131\nCHK18X   CH    R7,HEX18      LINK DISCONNECT/RECONNECT ?         86131\n         BNE   CHK1BX        NO; LOOK FOR OTHERS                 86160\n         L     R15,RPLUSFLD  GET TERMINAL BLOCK                  86160\n         CLI   TERMMSGX-TERMTABL(R15),X'06'  LOGON MESSAGE ?     86160\n         BE    CONTPASS      YES; COMPLETE RELEASE               86160\n         OI    TERMMSGX-TERMTABL(R15),X'80' ACTIVATE THE MESSAGE 86160\n         B     STATERR       AND TREAT AS STATE ERROR            86160\n         SPACE 1\nCHK1BX   CH    R7,HEX1B                KEY PRESSED ON TERMINAL ?\n         BE    DOENDREQ      YES; IGNORE FOR NOW                 86160\n         SPACE 1\nCHK1CX   EQU   *                                               DC18203\n         CH    R7,HEX1C                                        DC18203\n         BE    DOENDREQ      IGNORE FOR NOW                      86160\n         SPACE 1                                               DC18203\nCHK2BX   CH    R7,HEX2B\n         BE    DORESEND      INEGRITY LOST - RETRY               88304\n         CH    R7,=Y(X'27')  INTERMITTENT ERROR ?                88304\n         BNE   CHK2DX\nDORESEND LA    R15,TORESEND        2B  WE SHOULD TRY AGAIN\n         B     ERRETURN\n         SPACE 1\nCHK2DX   CH    R7,HEX2D\n         BE    DORELON       TAKE TERM OUT OF SERVICE (ELSE LOOPS)\nCHK31X   CH    R7,HEX31            31  DEVICE POWERED OFF       DC18203\n         BE    DOENDREQ      YES; IGNORE FOR NOW                 86160\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        10 - REQUEST ERROR                                           *\n*                                                                     *\n*     SSENSEI/SSENSMI                                                 *\n*       10      03                  RELEASE TERMINAL                  *\n*       10      XX                  SHOULD NOT OCCUR                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nREQERR   CLI   SENSE+1,X'03'           FUNCTION NOT SUPPORTED?\n***      BE    *+8                          JUMP OVER THE BAL    86012\n***      BAL   R7,SNOCCUR                   TELL WHERE WE CAME FROM\n         SPACE 1\n         STM   R1,R3,RPLERRSA-IFGRPL(R5)  SAVE REG 1 - 3         86160\n         L     R3,RPLUSFLD             LOAD A(TTE)\n         MVC   MSG1003+17(8),TERMNAME  MOVE NODE NAME TO MSG\n         WTO   MF=(E,MSG1003)          WTO ERROR MSG\n         L     R1,=A(DDT3270E)  EDS TYPE DEVICE ?                89263\n         C     R1,TERMDDT    OR DID SOMEONE GOOF ?               89263\n         BNE   NOTEDS03      ?                                   89263\n*KILL*   XC    TERMMODE,TERMMODE  KILL LOGON MODE                89263\n         L     R1,=A(DDT3270)   TRY AS A DUMB DEVICE             89263\n         ST    R1,TERMDDT    UPDATE WITH PLAIN DEVICE            89263\n         LM    R1,R3,RPLERRSA-IFGRPL(R5)  RESTORE                89263\n         B     DORESEND      TRY RESENDING THIS MESSAGE SANS SFE 89263\nNOTEDS03 DS    0H                                                89263\n         SPACE 1\n         LM    R1,R3,RPLERRSA-IFGRPL(R5)  RESTORE REG 1 - 3      86160\nDORELON  LA    R15,TORELES         03  FUNCTION NOT SUPPORTED\n         LA    R0,RELONLY              RELEASE TERMINAL\n         B     ERRETURN\n         SPACE 1\nSTATERR  LA    R15,TORELES         20  STATE ERROR\n         LA    R0,REL1ST               RELEASE AND REOPEN\n         B     ERRETURN\n         SPACE 1\nRHERROR  BAL   R7,SNOCCUR\n         ORG   RHERROR                                           87131\n         B     STATERR       HAPPENED WHILE INSTALLING LOCAL SNA 87131\n*                            CONTROLLER AND CONNECTING/DISCONNECTING\n*                            CRTS.                               87131\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*          80 - PATH ERRORS                                           *\n*                                                                     *\n*           SSENSEI/SSENSMI                                           *\n*             80      05           NO SESSION CONDITION               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPATHERR  IC    R7,SENSE+1              GET   SSENSMI\n         CH    R7,HEX5                 IS IT ONE WE CAN HANDLE\n         BE    STATERR       HANDLE 'NO SESSION' BY RE-OPENING   86160\n         B     DOENDREQ      ELSE IGNORE                         86160\n         SPACE 1\nSTAT3270 DS    0H                      HANDLE 2 BYT OF USER SENSE CODES\n*                                       RETURNED FROM 3270\n         CLC   =X'0001',USENSE  PLAIN OLD I/O ERROR ?            92073\n         BNE   STAT3272      NO                                  92073\n         L     R15,RPLUSFLD  GET TERM BASE                       92073\n         L     R0,=A(DDT3270E)  GET EDS BASE                     92073\n         C     R0,TERMDDT-TERMTABL(R15)  TRYING AS EDS DEVICE ?  92073\n         BE    REQERR        YES; TRY AS NON-EDS                 92073\nSTAT3272 LA    R15,TORELES             ASSUME DEVICE UNUSABLE\n         CLC   USENSE,SNAS0200         WAS SDLC STATUS RETURNED FOR DE\n*                                       WHICH SHOWS POWER ON\n         BE    INTRREQ1                YES CHECK MORE\n         CLC   USENSE,=X'0A0A'  OUR PROTOCOL CONVERTER CODE ?    88185\n         BE    STATERR       RELEASE AND RE-ACQUIRE              88185\n         CLC   USENSE,SNAS0010         NO CHECK IF INTV. REQ. (DEVICE\n*                                       POWERED OFF )\n         BNE   ERRETURN                RELEASE DEVICE\n*        B     DOENDREQ      WAIT FOR DEVICE POWER-UP\n         SPACE 1\nINTRREQ1 DS    0H                      DEVICE IS NOW AVAILABLE. JUST\nDOENDREQ LA    R15,TOENDREQ  IGNORE BECAUSE LOSTERM WILL GET CALLED\n         B     ERRETURN                SCHEDULED\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 08 - REISSUE                                            *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)         MEANING                             *\n*                                                                     *\n*      00      * ALL API MACROS   TEMPORARY STORAGE                   *\n*                (NOT CHECK,       ALLOCATION FAILURE                 *\n*                 OPEN, OR CLOSE)                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nREISSUE  DS    0H\n         LTR   R6,R6                   ONLY VALID REASON CODE\n*                                       IS 0\n         BZ    *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LA    R15,REISSU           0  ACTION IS TO REISSUE\n*                                      REG 0 IS ALREADY SET FOR\n*                                       REISSUE ONLY\n         B     ERRETURN                RETURN TO EXIT ROUTINE\n         SPACE 3                                                 90120\n***********************************************************************\n*                                                                     *\n*  FEEDBACK CODE 0C - DAMAGE                                          *\n*                                                                     *\n*   REASON CODE   MACROS         MEANING          ACTION              *\n*    00              *           BASIC ONLY          *                *\n*    01          RECEIVE      LU NOT AVAILABLE     RELEASE 08         *\n*                 SEND         \"    \"   \"            \"     08         *\n*    02          REC/SEND     REQUEST CANCELLED    FREERPL 14 00      *\n*                             BY TEST REQUEST                         *\n*    03              *         BASIC ONLY             *               *\n*    04              *         BASIC ONLY             *               *\n*    05              *         BASIC ONLY             *               *\n*    06              *         BASIC ONLY             *               *\n*    07          REC/SEND     CONNECTION RECOVERY  FREERPL 14 00      *\n*                               IN PROGRESS                           *\n*    08          REC/SEND     LU RESTARTED         FREERPL 14 00      *\n*    09          OPNDST       NODE DEACTIVATED     FREERPL 14 00      *\n*    0A          RECEIVE      SNOCCUR                SNOCCUR          *\n*    0B         RE/SEND/CLSDST REQUEST CANCELLED   FREERPL 14 00      *\n*                                BY CLSDST                            *\n*    0C          REC/ SEND     REQUEST CANCELLED   RELEASE 14 04      *\n*                                BY CLEAR                             *\n*    0D          SEND          REQ CANCEL BY EXCP.  RELEASE/REACQ     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDAMAGE   DS    0H\n         CH    R6,HEXD                 IS REASON CODE WITHIN\n*                                       LIMITS OF POSSIBILITY?\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SLL   R7,2                    INDEXING\n         B     RSNTABC(R7)             GO TO REASON CODE\n*                                       HANDLING ROUTINE\nRSNTABC  BAL   R7,SNOCCUR          0   BASIC MODE ONLY           86160\n         B     DORELON             1   LU NOT AVAILABLE          86160\n         B     DOENDREQ            2   REQUEST CANCELLED BY TEST REQ.\n         BAL   R7,SNOCCUR          3   BASIC ONLY                86160\n         BAL   R7,SNOCCUR          4   BASIC ONLY                86160\n         BAL   R7,SNOCCUR          5   BASIC ONLY                86160\n         BAL   R7,SNOCCUR          6   BASIC ONLY                86160\n         B     DOENDREQ            7   CONNECTION RECOVERY       86160\n         B     DOENDREQ            8   LU  RESTARTED             86160\n         B     DOENDREQ            9   NODE DEACTIVATED          86160\n         BAL   R7,SNOCCUR          A   SNOCCUR                   86160\n         B     DOENDREQ            B   REQUEST CANCELLED BY CLSDST\n         B     STATERR             C   RELEASE WITH OPNDST       86160\n         B     STATERR             D   RELEASE AND RE-ACQUIRE    87103\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 10 - ENVIRONMENT                                        *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)      MEANING                  ACTION        *\n*                                                                     *\n*     00        OPNDST/CLSDST  TERM,LU,APPL NOT ACTIVE  CLSDST  0C 08 *\n*                                              (OPNDST) FREERPL 14 00 *\n*     01        OPNDST         OPNDST FAILED           FREERPL  14 00 *\n*                                                                     *\n*     02        CLSDST (PASS)  TARGET APPL. UNACCEPTABLE MSG.   0C 09 *\n*                                                                     *\n*     03        OPNDST/SEND/REC  HALT QUICK                   SNOCCUR *\n*                                                                     *\n*     05         \"      \"     \"   CHANNEL/LINK FAILURE RELEASE  08 00 *\n*                                                                     *\n*     06        OPNDST          ANS                    RELEASE  08 00 *\n*                                                                     *\n*     07        SEND/REC        CANCELLED BY VARY      RELEASE  08 00 *\n*                                                                     *\n*     09         \"    \"         TERMINATE SELF/LOGOFF  FREERPL  14 00 *\n*                                                                     *\n*     0A        ALL MACROS      ACF/VTAM ERROR         RELEASE  08 00 *\n*                                                                     *\n*     0D        ALL MACROS      ACF/VTAM INACTIVE TO ACB       SNOCCUR*\n*                                                                     *\n*     0E        ALL MACROS      TCB ABENDED            FREERPL  14 00 *\n*                                                                     *\n*     0F        SEND/REC        BUFFERS FILLED         FREERPL  14 00 *\n*                                                                     *\n*     10         \"   \"          TERMINATE SELF COMMAND RELEASE  08 04 *\n*                                                                     *\n*     11        OPNDST          SDT FAILED             FREERPL  14 00 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENVIRON  DS    0H\n         CH    R6,HEX11                IS RSN COD11VALID SIZE?\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n***********************************************************************\n*   HANDLE FIRST THREE REASON CODES WITHOUT BRANCH TABLE.             *\n***********************************************************************\n         SPACE 1\n         LTR   R6,R6                   CHECK FOR TERMINAL OR\n*                                       APPLICATION NOT\n*                                       AVAILABLE.\n         BNZ   CHKQUIES            \u00ac0  IF NOT, NEXT CHECK\n*\n         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?\n         BO    TERMUNAV\n         LA    R15,TOSEND              NO. APPLICATION UNAVAIL-\n         LA    R0,MSG08                ABLE WRITE ERROR MSG\n         B     ERRETURN\nTERMUNAV DS    0H\n         LA    R15,TOENDREQ            TERMINAL UNAVAILABLE FOR\n         B     ERRETURN                 OPNDST(SPEC) AFTER\n*                                       CLSDST(PASS) BECAUSE\n*                                       CLSDST(PASS) FAILED\n*                                       AND THE NETWORK OPER-\n*                                       ATOR VARRIED OFF THE\n*                                       TERMINAL.\nCHKQUIES DS    0H\n         LA    R15,TORELES             PREPARE ACTION CODE\n         SLL   R7,2                     AND BRANCH TABLE INDEX\n*                                       IN CASE REASON CODE\n*                                       GREATER THAN 2\n         CH    R6,HEX2                 CHECK FOR 1 OR 2\n*\n         BL    TERMUNAV             1  OPNDST FAILED FREERPL\n*\n         BH    RSNTAB10(R7)        >2  GO TO REASON CODE\n*                                       HANDLING ROUTINE\n*\n         LA    R15,TOSEND           2  APPLICATION IS QUIESCING\n         LA    R0,MSG09                 OR NEVER ACCEPTS LOGONS\n*                                       BUT QUIESCE IS MORE\n*                                       LIKELY SINCE 'NEVER\n*                                       ACCEPTS WOULD PROBABLY\n*                                       HAVE BEEN FOUND ON THE\n*                                       INQUIRE.  EITHER CAN\n*                                       HAPPEN IF THE OTHER\n*                                       APPLICATION CHANGES ITS\n*                                       STATUS AFTER NETSOL'S\n*                                       INQUIRE(APPSTAT) BUT\n*                                       PRIOR TO THE LATER\n*                                       CLSDST(PASS).\n         B     ERRETURN                WRITE ERROR MESSAGE\nRSNTAB10 EQU   *-(3*4)                 START TABLE AT R6=3\n*\n         B     QUIKHALT             3  VTAM IS HALTING.\n*                                      NETSOL CAN NO LONGER\n*                                       COMMUNICATE WITH\n*                                       DEVICES. TPEND NOTIFIED\n*\n         BAL   R7,SNOCCUR           4  BASIC MODE ONLY\n         B     ERRETURN             5  PERMANENT PATH FAILURE\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         B     ERRETURN             6  AUTO NETWORK SHUTDOWN\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         B     ERRETURN             7  VARY DEACT. IMMEDIATE\n*                                       LOSTERM WAS SCHEDULED\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         BAL   R7,SNOCCUR           8  DIAL BASIC MODE ONLY\n         B     IGNORERR             9  TERMINATE SELF OR LOGOFF\n*\n         B     VTAMERR              A  VTAM ERROR FOR DEVICE\n*\n         BAL   R7,SNOCCUR           B  DIAL-OUT ONLY\n*\n         BAL   R7,SNOCCUR           C  DIAL IN BASIC MODE ONLY\n         B     QUIKHALT             D  VTAM INACTIVE TO YOUR     89129\n*                                      ACB.  SHOULD NOT OCCUR\n*\n         B     QUIKHALT             E  TCB ABENDED               89129\n         B     IGNORERR             F  BUFFERS FILLED\n         B     ERR1010             10  TERMINATE SELF\n         B     IGNORERR            11  SDT FAILED\n*\nQUIKHALT DS    0H\n         LA    R15,TOENDREQ            INDICATE RETURN TO VTAM\n         OI    UFLAGS,SHUTDOWN+UFGIGNER  BEGIN SHUTDOWN          86065\n         B     ERRETURN\n*\nVTAMERR  DS    0H                      ON 100A RTNCD  JUST\n         LA    R15,TOPROBDV             RELEASE THE TERMINAL.\n         B     ERRETURN\n         SPACE 1\nIGNORERR DS    0H\n         LA    R15,TOENDREQ            END REQUEST\n         B     ERRETURN\n         SPACE 1\nERR1010  DS    0H\n         LA    R15,TORELES\n         LA    R0,REL1ST\n         B     ERRETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*  RTNCD CODE 14 - LOGIC\n*                                                                     *\n*   FDBK2 CODE      MACRO(S)     MEANING                    ACTION    *\n*                                                                     *\n*       00        REC/SEND    NON-VTAM REQUEST CDE         SNOCCUR    *\n*                                                                     *\n*       02         \"    \"     EXIT ADDRESS ZERO            SNOCCUR    *\n*                                                                     *\n*       03         \"    \"     ECB ADDRESS ZERO             SNOCCUR    *\n*                                                                     *\n*       04         CHECK      RPL IS NOT ACTIVE            SNOCCUR    *\n*                                                                     *\n*       10         REC/SEND   INVALID ACB                  SNOCCUR    *\n*                                                                     *\n*       11          \"    \"                                            *\n*                                                                     *\n*       12          \"    \"    CLSDST IN PROGRESS (FREERPL)  14 00     *\n*                                                                     *\n*       13      REC/SEND/INT  RPL ARG + NIB CID INVALID     14 00     *\n*                                                                     *\n*       1E      REC/SEND      INVALID DATA ARE OR LENGTH   SNOCCUR    *\n*                                                                     *\n*       23        \"   \"       INVALID MACRO REQUEST TYPE   SNOCCUR    *\n*                                                                     *\n*         3C    SEND (POST=SCHED)   TRIED TO ISSUE 2ND SEND14 00DC18203\n*       3B-47     \"   \"                                    SNOCCUR    *\n*                                                                     *\n*       4A                                                 SNOCCUR    *\n*                                                                     *\n*       4B          \"         INVALID LOGON         (MSG)   0C 07     *\n*                                                                     *\n*       4C       INQUIRE(APPLSTAT) NO APPL NAME     (MSG)   0C 07     *\n*                INQUIRE(SESSPARM) NO QUEUED CINIT(FREERPL) 14 00     *\n*                CLSDST(PASS)      NO CDRSC FOR TERM(MSG)   0C 03     *\n*                                                                     *\n*       4D                                                 SNOCCUR    *\n*                                                                     *\n*       4E-51                                              SNOCCUR    *\n*                                                                     *\n*       52      INVALID NIB                                SNOCCUR    *\n*                                                                     *\n*       53      INQUIRE       INVALID SYM. NAME     (MSG)   0C 06     *\n*               OPNDST(SPEC)  INVALID SYM. NAME   (FREERPL) 14 00     *\n*                                                                     *\n*       54      OPNDST        DEST. UNOPENABLE    (FREERPL) 14 00     *\n*                                                                     *\n*       55      OPNDST(AQUIRE) APPL NOT AUTHORIZED         SNOCCUR    *\n*               CLSDST(PASS)   ????????????????????   (MSG) 0C 05     *\n*                                                                     *\n*       56-5C                                              SNOCCUR    *\n*                                                                     *\n*       5D      CLSDST        DEST, NOT OPENED    (FREERPL) 14 00     *\n*                                                                     *\n*       5E                                                            *\n*                                                                     *\n*       5F      CLSDST        RESOURCE NOT OWNED  (FREERPL) 14 00     *\n*                                                                     *\n*       60      CLSDST           \"      \"  CLOSABL   \"     14 00      *\n*                                                                     *\n*        62     REC/SEND                                   SNOCCUR    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOGIC    DS    0H\n         CH    R6,HEX60                 IS REASON CODE WITHIN\n*                                       LIMITS OF POSSIBILITY?\n*                                       X'60' IS HIGHEST VALID\n*                                       VALUE TO BE EXPECTED.\n         BNH   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         CH    R6,HEX4A                IF REASON CODE AT LEAST\n         BNL   CHK56X            >=4A   X'4A', DO SEPARATELY\n         LA    R15,TOENDREQ            PREPARE ACTION FOR\n*                                       REASON CODES OF 12 & 13\n         CH    R6,HEX12                CLSDST IN PROGRESS?\n         BE    ERRETURN            12  YES, ACTION CODE\n*                                        ALREADY SET\n         CH    R6,HEX13                IS REASON CODE 13?\n         BNE   CHK3CX        *****DEBUG - FREE DEVICE WHICH OTHERWISE\n         OI    UFLAGS,UFGREST+UFGIGNER  FORCE RESTART *****DEBUG*****\n         STM   R15,R1,A$SAVE-IFGRPL(R5) SAVE *****DEBUG*****     89344\n         ABEND 666,DUMP      ****DEBUG*****                      90127\n*DEBUG*  BAL   R7,SNOCCUR    HANGS ON 'PNFY1' STATUS *****DEBUG  89338\n         LM    R15,R1,A$SAVE-IFGRPL(R5) RESTORE *****DEBUG*****  89344\n         CR    R15,R15       SET CODE FOR NEXT TEST   *****DEBUG*****\n         BE    ERRETURN            13  CID INVALID\n*                                      PROBABLY ALREADY\n*                                       RELEASED THE TERMINAL.\n*                                       IGNORE.\nCHK3CX   CH    R6,HEX3C             3C  TRY TO ISSUE 2ND SEND   DC18203\n         BE    ERRETURN                 YES SO IGNORE           DC18203\n         BAL   R7,SNOCCUR        16\nCHK56X   DS    0H\n         CH    R6,HEX56                IF REASON CODE MORE THAN\n         BH    CHK5DX             >56   X'56', DO SEPARATELY\n         LA    R15,TOSEND              PREPARE DEFAULT ACTION\n         SLL   R7,3                     AND BRANCH TABLE INDEX\n         B     RSNTAB14(R7)            GO TO REASON CODE\n*                                       HANDLING ROUTINE\nRSNTAB14 EQU   *-(8*(X'4A'))           START TABLE W/ R6=X'4A'\n*\n         BAL   R7,SNOCCUR          4A\n         NOP   0\n*\n         LA    R0,MSG07            4B  UNKNOWN LOGOMODE TABLE ENTRY\n         B     ER144B                  OR UNIDENTIFIED APPLICATION\n*\n         LA    R0,MSG07            4C  INQUIRE(APPSTAT)..NO SYMBOLIC\n         B     TSTINQA                  NAME FOR APPLICATION\n*                                     OR INQUIRE(SESSPARM)..NO QUEUED\n*                                       CINIT\n*                                      ASSUME INQUIRE(APPSTAT)\n*                                       THEN CHECK FOR IT\n*\n         BAL   R7,SNOCCUR          4D\n         NOP   0\n*\n         BAL   R7,SNOCCUR          4E\n         NOP   0\n*\n         BAL   R7,SNOCCUR          4F\n         NOP   0\n*\n         BAL   R7,SNOCCUR          50\n         NOP   0\n*\n         BAL   R7,SNOCCUR          51  APPLICATION NEVER\n         NOP   0                        ACCEPTS LOGONS\n*                                      MEANS NETSOL NEVER\n*                                       ACCEPTS LOGON.\n*\n         BAL   R7,SNOCCUR          52\n         NOP   0\n*\n         LA    R0,MSG07            53  SYMBOLIC (APPL OR TERM)\n         B     TSTINQA                  NAME NOT KNOWN\n*                                      ASSUME INQUIRE(APPSTAT)\n*                                       THEN CHECK FOR IT\n*\n         LA    R15,TOENDREQ                   54\n         B     ERRETURN\n*\n         LA    R0,MSG05            55  APPLICATION NOT AUTHORIZED\n         B     OPNDSPC                  FOR OPNDST(ACQUIRE)\n*                                      OR\n*                                      CLSDST FAILURE.\n*\n         BAL   R7,SNOCCUR          56  CONFLICT BETWEEN MODE\n         NOP   0                        AND DEVICE TYPE.\n*                                      TRIED TO OPNDST FOR\n*                                       A RECORD DEVICE.\n*                                       NETSOL ONLY SUPPORTS\n*                                       BASIC DEVICES.\n*                                      CAN NOT OCCUR IN NETSOL\nCHK5DX   DS    0H\n         CH    R6,HEX5D                CLSDST INVALID (TERMINAL\n*                                       NOT CONNECTED)\n         BNE   CHK5FX             \u00ac5D  NOT X'5D', CHECK FURTHER\n         LA    R15,TOENDREQ        5D  ACTION, RELEASE RPL AND\n         B     ERRETURN                 RETURN TO VTAM\nCHK5FX   DS    0H\n         CH    R6,HEX5F                LESS THAN X'5F' NOT\n         BNL   *+8           JUMP OVER THE BAL                   86012\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n*\n         LA    R15,TOENDREQ     5F 60  REASON CODES OF 5F\n         B     ERRETURN                 AND 60 ARE POSSIBLE IF\n*                                       A RELREQ OR READEND\n*                                       EXIT IS PROCESSED\n*                                       AFTER THE DEVICE WAS\n*                                       PASSED TO ANOTHER\n*                                       APPLICATION.  THIS CAN\n*                                       HAPPEN BECAUSE THE\n*                                       CLSDST(PASS) WILL NOT\n*                                       PURGE AN ALREADY\n*                                       SCHEDULED EXIT.\nTSTINQA  DS    0H\n         TM    MFLAGS,INQAPPST         INQUIRE(APPSTAT) MEANS THE\n         BO    ERRETURN                 APPLICATION WAS UNKNOWN TO\n*                                       VTAM.\n*                                       => PUT OUT ERROR MESSAGE\n         LA    R0,MSG03                ASSUME CLSDST(PASS)\n         TM    MFLAGS,CLSDST           CLSDST FAILURE MEANS THERE\n         BO    ERRETURN                 IS NO CDRSC FOR THE TERMINAL\n*                                       IN A CROSS-DOMAIN SESSION.\n*                                       => PUT OUT ERROR MESSAGE\n         LA    R15,TOENDREQ            ASSUME INQUIRE(SESSPARM)\n*                                       FAILURE IMPLIES THAT THERE\n         TM    MFLAGS2,INQSESS          IS NO QUEUED CINIT FOR LOGON\n         BO    ERRETURN                 PROCESSING FOR THE TERMINAL.\n*                                       => END THE REQUEST\n         LA    R15,TOENDREQ            ASSUME OPNDST(SPEC)\n         TM    MFLAGS,OPNDSPEC         OPNDST FAILURE MEANS THE\n         BO    ERRETURN                 NODE IS UNKNOWN TO VTAM.\n*                                       POSSIBLY DUE TO MAJOR NODE\n*                                       BEING DEACTIVATED.\n*                                       => END THE REQUEST\n         BAL   R7,SNOCCUR              ANY OTHER CAUSE OF\n*                                       ERROR IS IMPOSSIBLE\nER144B   DS    0H\n         TM    MFLAGS,CLSDST           ERROR ON CLSDST(PASS)\n         BZ    ERRETURN                NO => WRITE UNKNOWN APPL'N\n         LA    R0,MSG01                YES. WRITE THE MESSAGE\n*                                       'XXXXXXXX UNKNOWN LOGOMODE'\n         B     ERRETURN\nOPNDSPC  DS    0H\n         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?\n         BNO   *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         TM    MFLAGS,CLSDST           WAS THIS A CLOSE\n         BO    ERRETURN                 CLDST(PASS).  OR\n*                                       APPLICATION CAN'T BE\n*                                       CONNECTED AS REQUESTED\n*                                       IN RELREQ OR READEND.\n*                                       ISSUE ALREADY PREPARED\n*                                       ERROR MESSAGE.\n         BAL   R7,SNOCCUR              NO, ANY OTHER CAUSE\n*                                       IS IMPOSSIBLE\n         TITLE '*********  N E T S O L  -  SCAN FOR LOGON SUBROUTINE'\nERRETURN DS    0H\n         STC   R15,ACTIONS             SAVE ACTION CODES FOR\n         STC   R0,ACTIONS+1             DEBUGGING\n         CR    R1,R5                   DO WE HAVE BOTH A SYNCH\n*                                      RPL AND A ASYNCH RPL\n         BE    ERROUT                  NO, SKIP THE MOVE OF THE\n*                                      RPL WORKAREA\n         L     R14,=A(SYNWORK)  GET WORK AREA                    86145\n         MVC   LNIFGRPL(WORKRPLA,R5),0(R14)   RESTORE WORKAREA   86145\n         SPACE 1\n         DROP  R1\n         USING IFGRPL,R5\n         SPACE 1\n         PUSH  USING         SAVE R3 AND ?                       91296\n         DROP  R3            R3 HAS RETURN ADDRESS, NOT TERM     91296\nERROUT   ICM   R2,15,RPLUSFLD  ANY TTE POINTER ?                 91296\n         BZ    ERROUTNS      NO                                  91296\n*    FOR RETRY AND RE-ISSUE STYLE RECOVERY, KEEP TRACK OF NUMBER AND\n*    TIME OF RETRIES. IF TOO MANY, JUST QUIT - DON'T LOOP        93266\n         CH    R15,=Y(TOPROBDV)  LARGER THAN MAX?                93266\n         BH    ERROUTNS                                          93266\n         B     *+4(R15)      BRANCH ACCORDING TO CODE            93266\n         B     ERROUTNS      0 - RELEASE; DON'T RE-ACQUIRE       93266\n         B     ERROUTLP      4 - RELEASE AND RE-ACQUIRE          93266\n         B     ERROUTNS      8 - RELEASE                         93266\n         B     ERROUTLP     12 - SEND (AGAIN?)                   93266\n         B     ERROUTLP     16 - RE-ISSUE REQUEST                93266\n         B     ERROUTNS     20 - END REQUEST                     93266\n         B     ERROUTLP     24 - RESEND                          93266\n         B     ERROUTNS     28 -   OPEN                          93266\n         B     ERROUTNS     32 - PROBLEM DEVICE                  93266\nERROUTLP STM   R15,R1,A$SAVE   SAVE REGISTERS                    91296\n         TIME  BIN           GET CURRENT TIME                    91296\n         USING TERMTABL,R2                                       91296\n         LR    R1,R0         COPY TIME                           91296\n         S     R1,TERMETIM   SUBTRACT TIME OF LAST ERROR         91296\n         CH    R1,=Y(60*100)  MORE THAN ONE MINUTE ?             91296\n         BH    ERROUTNW      YES; SET NEW                        91296\n         INC   TERMERCT,WORK=R15  INCREASE CONSECUTIVE ERRORS    91296\n         CH    R15,=H'10'    10 ERRORS IN ONE MINUTE ?           91296\n         BL    ERROUTNR      NO; JUST RESTORE                    91296\n         LM    R15,R1,A$SAVE  RESTORE                            91296\n         SLR   R15,R15       BUT CHANGE REQUEST TO RELEASE, NO ACQ\n         B     ERROUTNS                                          91296\nERROUTNW ST    R0,TERMETIM   SAVE ERROR TIME                     91296\n         LA    R0,1                                              91296\n         ST    R0,TERMERCT   INITIALIZE ERROR COUNT              91296\nERROUTNR LM    R15,R1,A$SAVE  RESTORE                            91296\nERROUTNS CH    R15,=Y(TOPROBDV)  LARGER THAN MAX?\n         BH    ERROUTR                                           88188\n         B     *+4(R15)      BRANCH ACCORDING TO CODE            88188\n         B     ERROUTR       0 - RELEASE; DON'T RE-ACQUIRE       88188\n         B     ERROUTR       4 - RELEASE AND RE-ACQUIRE          88188\n         B     ERROUTR       8 - RELEASE                         88188\n         B     ERROUTS      12 - SEND (AGAIN?)                   88188\n         B     ERROUTS      16 - RE-ISSUE REQUEST                88188\n         B     ERROUTR      20 - END REQUEST                     88188\n         B     ERROUTS      24 - RESEND                          88188\n         B     ERROUTS      28 -   OPEN                          88188\n*        B     ERROUTR      32 - PROBLEM DEVICE                  88188\nERROUTR  ICM   R2,15,RPLUSFLD  LOAD AND TEST TTE POINTER         88188\n         BZ    ERROUTS       NONE; SKIP                          88188\n         NI    TERMFLG3,TFREQ  FORCE LOGOFF                      91296\n         OI    TERMFLG3,TFLOF  SET FORCED USER LOGOFF            91296\n         AIF   ('&LOCAL' NE 'PID').NOERROF                       92300\n         ICM   R2,15,TERMLOUD  ANY LOUD ?                        91296\n         BZ    ERROUTS       NO                                  88207\n         STM   R15,R1,A$SAVE   SAVE REGISTERS                    88207\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT SVC PARM AREA\n         MVC   A$SID,=C'A$RB'                                    88207\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,A$SONL,A$SAKEY+A$SBUILD) 88207\n*                            LOGOFF SESSIONS, NOT USER           88207\n         ST    R2,A$SBUFR    COPY LOUD                           88207\n         LA    R1,A$SVCRB                                        88207\n         SVC   249           CANCEL SESSIONS; KEEP USER          88207\n         LM    R15,R1,A$SAVE   RESTORE REGISTERS                 88207\n.NOERROF SPACE 1                                                 91195\nERROUTS  LR    R14,R3                  RESTORE ADDR AND RETURN\n         BR    R14                      VTAM WHICH WILL RETURN\n*                                       TO THE NSI AFTER THE\n*                                       COMMAND WHICH CAUSED\n*                                       ERREXIT TO BE ENTERED.\n         POP   USING         RESTORE R3                          91296\nNETSOL70 CSECT ,             RESTORE MAIN CSECT                  87186\n         TITLE '*********  N E T S O L  -  EQUATES AND CONSTANTS'\nR0       EQU   0                       MACRO WORK REGISTER, AND\n*                                      CONTAINS REASON CODE UPON\n*                                      ABNORMAL TERMINATION\nR1       EQU   1                       PARAMETER REGISTER,\n*                                      CORRUPTED BY API MACROS\nR2       EQU   2                       WORK REGISTER\nR3       EQU   3                       WORK REGISTER\nR4       EQU   4                       WORK REGISTER\nR5       EQU   5                       POINTER TO CURRENT RPL, IT\n*                                      IS NOT USED FOR ANY OTHER\n*                                      PURPOSE\nPTRRPL   EQU   R5                      AS ABOVE\nR6       EQU   6                       WORK REGISTER\nR7       EQU   7                       WORK REG\nR8       EQU   8                       NIB POINTER\nPTRNIB   EQU   8                        EXCEPT IN STD LOGON.\nR9       EQU   9                       WORK REG\nR10      EQU   10                      THIRD BASE REGISTER\nR11      EQU   11                      SECOND BASE REGISTER\nR12      EQU   12                      FIRST BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN REGISTER\nR15      EQU   15                      RETURN CODE AND EXIT ENTRY PTR\n         SPACE 1\n***********************************************************************\n*        FLAGS INDEPENDENT OF A SPECIFIC REQUEST                      *\n***********************************************************************\n         SPACE 1\nUFLAGS   DC    X'00'                   MAIN NETSOL FLAGS\nSHUTDOWN EQU   X'80'                   SHUTDOWN IN PROGRESS\nINIT     EQU   X'40'                   INITIALIZATION IN PROGRESS\nINITERR  EQU   X'20'                   ERROR DURING INITIALIZATION\nINITDLAY EQU   X'10'         TIME DELAY BETWEEN START-UPS        87256\nUFGSYS   EQU   X'08'         SYSTEM RESERVED FOR SYSTEMS GROUP   86065\nUFGREST  EQU   X'04'         SYSTEM IS BEING RECYCLED            86065\nUFGIGNER EQU   X'02'         IGNORE ERRORS; SHUTDOWN OR RECYCLE  86065\n         SPACE 1\nDUMPFLAG DC    X'00'                   REASON CODE FOR DUMPING\nOPENCODE EQU   1                       OPEN ACB FAILURE\nSETLCODE EQU   2                       SETLOGON FAILURE\nCBLKCODE EQU   4                       CONTROL BLOCK FAILURE\nTABLTRBL EQU   8                       TROUBLE WITH THE TTE'S\n         SPACE 1\nTRTAB1   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6' HEX->CHAR TR TABLE\nTRTAB    EQU   TRTAB1-X'F0'            USE ONLY LAST 16 OF TRTAB\n         SPACE 1\nPACKWORK DS    XL16                    UNPACK WORK AREA\n         SPACE 1\nSESSPARM DS    XL120                   INQUIRE(SESSPARM) WORK AREA\n*                                      MAX SIZE ENCOUNTERED IS 88\n         SPACE 1\nSYSTEMID DC    X'00'                   SYSTEM ID FOR SOME APPLIDS\n         SPACE 1\n         DC    C'SAVED REGISTERS FOR USER ABENDS HERE'\nSNOREGS  DC    16F'0'                  REGS FOR SNO CONDITIONS\n         SPACE 1\nRETVTAM@ DS    F                       SAVE AREA FOR EXIT RETURN ADDR\n         SPACE 1\nGENSAVE  DS    18F                     SAVE AREA FOR SOME EXIT RTNS\n         SPACE 1\nSUBSAV14 DC    F'0'                    SAVE AREA FOR REG 14\n*                                       USED BY SUBROUTINES\nFINISECB DC    F'0'                    ECB THAT MAIN-LINE CODE WAITS\n*                                      ON, IT IS POST'ED BY TPEND EXIT\n         SPACE 1                                                 85235\n*              MISCELLANEOUS CONSTANTS AND MASKS.\nSBA      EQU   X'11'                   3270 SET BUFFER @ FIELD\nCLEARKEY EQU   X'6D'                   3270 CLEAR KEY\nPA1KEY   EQU   X'6C'         3270 PA1 KEY (LOGOFF REQUEST)       88220\nENTERKEY EQU   X'7D'                   3270 ENTER KEY\nHEX50    EQU   X'50'                   3270 BUFFER ADDRESS\nHEXD3    EQU   X'D3'                     \"    \"       \"\nHEXD5    EQU   X'D5'                     \"     \"       \"\nCR       EQU   X'0D'                   3767 CARRIAGE RETURN\nFF       EQU   X'FF'                   USED TO TURN OFF SWITCHES\n         SPACE 1\n*              EQUATES FOR ACTION CODES AND MODIFIERS\nTORELES  EQU   8                       BRANCH TO RELEASE\nTOSEND   EQU   X'0C'                   BRANCH TO WRITE\nREISSU   EQU   X'10'                   REISSUE COMMAND\nRELONLY  EQU   0                       RELEASE ONLY DONT REAQUIRE\nREL1ST   EQU   4                       RELEASE AND ACQUIRE\nTOENDREQ EQU   X'14'                   BRANCH TO FREERPL\nTORESEND EQU   X'18'                   TAKE ACTION ACCORDING TO RTN\nTOPROBDV EQU   X'20'                   BRANCH TO PROBDEV\n         SPACE 2                                                 90120\n*              HEX VALUES FOR FEEDBACK AND RETURN CODE COMPARES\n         SPACE 1\n         DS    0H\nHEX2     DC    XL2'2'\nHEX3     DC    XL2'3'\nHEX4     DC    XL2'4'\nHEX5     DC    XL2'5'\nHEX8     DC    XL2'8'\nHEX9     DC    XL2'9'\nHEXC     DC    XL2'C'\nHEXD     DC    XL2'D'\nHEX10    DC    XL2'10'\nHEX11    DC    XL2'11'\nHEX12    DC    XL2'12'\nHEX13    DC    XL2'13'\nHEX14    DC    XL2'14'\nHEX18    DC    XL2'18'\nHEX1B    DC    XL2'1B'\nHEX1C    DC    XL2'1C'                                      DC18203\nHEX20    DC    XL2'20'\nHEX2B    DC    XL2'2B'\nHEX2D    DC    XL2'2D'\nHEX31    DC    XL2'31'\nHEX3C    DC    XL2'3C'\nHEX4A    DC    XL2'4A'\nHEX56    DC    XL2'56'\nHEX5D    DC    XL2'5D'\nHEX5F    DC    XL2'5F'\nHEX60    DC    XL2'60'\n         EJECT\n*              BISYNCH STATUS ERROR MESSAGE CODES\n         DS    0H\nSNAS0010 DC    XL2'0010'               3270 -- INTERRUPTION\n*                                       REQUIRED BECAUSE DEVICE\n*                                       POWERED OFF.\nSNAS0200 DC    XL2'0200'                3270 -- DEVICE END\n*                                       (ALONE), MEANING THAT\n*                                       THE DEVICE IS POWERED\n*                                       ON AND OK TO USE.\n         SPACE 1\n*              LOGICAL UNIT STATUS FOR 3276/3278/3287/ETC.\n         SPACE 1\nLUS0001  DC    XL2'0001'               DEVICE AVAILABLE\nLUS082B  DC    XL2'082B'               DEVICE AVAILABLE\nLUS0831  DC    XL2'0831'     LUSTAT - DEVICE POWERED OFF         89344\n         SPACE 1\n@EXEC2   MVC   0(0,R4),2(R7)\n@EXEC3   MVC   0(0,R4),0(R6)\n         SPACE 2\n         LTORG\n         TITLE '*********  N E T S O L  -  ERROR BYPASS TABLE'\n***********************************************************************\n*        THIS TABLE DEFINES THOSE RPL-BASED MACRO ERRORS WHICH        *\n*        ARE NOT TO BE WRITTEN TO THE OPERATOR'S CONSOLE.             *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OFTHE FOLLOWING FIELDS:            *\n*                                                                     *\n*             ERMCODE - THE ERROR COMBINATION TO BE BYPASSED.         *\n*                       THE FORMAT OF THIS FIELD IS:                  *\n*                     RPLREQ/RPLRTNCD/RPLFDB2/RPLSSEI/RPLSSMI/RPLUSNSI*\n*                       ANY FIELD WHICH DOESN'T MATTER SHOULD BE SET  *\n*                       TO ZERO.                                      *\n*                                                                     *\n*             ERMAND  - THE MASK TO ZERO IRRELEVANT FIELDS IN THE     *\n*                       CONSTRUCTED ERROR COMBINATION FIELD PRIOR     *\n*                       TO COMPARISON WITH ERMCODE. EACH BYTE HERE    *\n*                       HAS A CORRESPONDING BYTE IN ERMCODE AND SHOULD*\n*                       BE SET TO:                                    *\n*                         X'FF' - IF THE FIELD IN ERRCODE IS NON-ZERO.*\n*                         X'00' - IF THE FIELD IN ERRCODE IS ZERO.    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nERMCODE  EQU   0,7                    ERROR COMBINATION TO BE COMPARED\nERMAND   EQU   7,7                    MASK TO ZERO IRRELEVANT FIELDS\nERMSGL   EQU   14                     LENGTH OF A TABLE ENTRY\n         SPACE 1                                                 89338\nERMINIT  DC    X'00040400000010'       START-UP; IGNORE UNREADY  89339\n         DC    X'00FFFF0000FFFF'       2/2                       89339\n         SPACE 1\nERMSGTAB EQU   *                      START OF ERROR MSG TABLE\nERM1CODE DC    XL7'1B144B00000000'      BAD APPLID\nERM1AND  DC    XL7'FFFFFF00000000'        KEYED IN AT TERMINAL\nERMSGEND EQU   *-ERMSGL               LAST ENTRY IN TABLE\n         SPACE 1\nERMBXLE  DC    A(ERMSGTAB)            BXLE (TABLE START)\n         DC    A(ERMSGL)                REGS   (ENTRY LENGTH)\n         DC    A(ERMSGEND)                FOR TABLE SEARCH  (TABLE END)\n         TITLE '*********  N E T S O L  -  NETSOL GETPARM OPTIONS'\n***********************************************************************\n*        THIS TABLE DEFINES THE OPTIONS WHICH CAN BE SPECIFIED        *\n*        WHEN SEARCHING THE INPUT CMD STRING FOR AN OPTION.           *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *\n*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *\n*                        MULTIPLE LOGON SEQUENCES.                    *\n*                                                                     *\n*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *\n*                        WITH CMDGAPPL                                *\n*                                                                     *\n*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *\n*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *\n*                                                                     *\n*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *\n*                        COMMAND.                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGPAMECT  EQU   0                      START OF OPTION LIST\nGPLEN    EQU   0,2                    MAX LENGTH OF PARAMETER\nGPTEXTL  EQU   2,2                    LEN OF PARM ERROR TEXT\nGPFLAG   EQU   4,1                    OPTION FLAGS\nGPOPT    EQU   X'80'                  PARAMETER IS OPTIONAL\nGPNUM    EQU   X'40'         NUMERIC PARAMETER ONLY              88220\nGPCOM    EQU   X'01'         * STARTS COMMENTS                   88220\nGPNULL   EQU   X'00'                  NO OPTIONS FOR THIS PARAMTER\nGPTEXT   EQU   5                      TEXT INSERTED INTO GP ERR MSG\n         SPACE 1\n         PRINT NOGEN\n*\n*        APPLICATION LOGON SEQUENCES\n*\nSLNODE   $GP    8,'NODENAME',GPNULL\nSLAPPL   $GP    8,'LOGON APPLID',GPOPT+GPCOM\nSLNAME   $GP   8,'NODE OR USER NAME',GPNULL                      88209\n        TITLE '*********  N E T S O L  -  VTAM COMMAND/INTERPRET TABLE'\n***********************************************************************\n*                                                                     *\n*        purpose: define interpret table used by NETSOL70.            *\n*                 (refer to acf/vtam system programmers guide)        *\n*                                                                     *\n*        note:    1) valid logon sequences are defined in upper       *\n*                    and lower case.                                  *\n*                 2) the logon sequences are compared with the        *\n*                    passed string for a length equal to the          *\n*                    logon sequence. therefore, any logon sequence    *\n*                    containing another logon sequence as a           *\n*                    substring (as 'imstest' contains 'ims') must     *\n*                    appear in the interpret table before the         *\n*                    sequence contained as a substring does.          *\n*                                                                     *\n*        date:    August 21, 1985          Updated by G.P.            *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN                                             85328\nNETINTAB CSECT ,                                                 87193\n         LOGCHAR APPLID=(ROUTINE,NETINLOG),SEQNCE='LOGON'        87193\n         LOGCHAR APPLID=(ROUTINE,NETINLOG),SEQNCE='logon'        87193\n*        ALL OTHER SEQUENCES ARE EXPANDED BY $CMDN MACRO         87193\n         SPACE 1                                                 87193\nNETSOLCM CSECT ,             BEGIN NEW CSECT FOR COMMANDS        88172\n***********************************************************************\n*        THIS TABLE DEFINES THE COMMANDS WHICH MAY BE ENTERED FROM    *\n*        THE TERMINAL.                                                *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *\n*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *\n*                        MULTIPLE LOGON SEQUENCES.                    *\n*                                                                     *\n*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *\n*                        WITH CMDGAPPL                                *\n*                                                                     *\n*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *\n*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *\n*                                                                     *\n*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *\n*                        COMMAND.                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCMDGAPPL EQU   0,8,C'C'      OBSOLETE GENERIC APPLICATION NAME   88185\nCMDVAPPL EQU   0,8,C'C'      VTAM APPLICATION NAME               88185\nCMDTEXT  EQU   8,8,C'C'      LOGON SEQUENCE OR COMMAND           88185\nCMDROUTA EQU   16,4,C'A'     A(CMD PROCESSING ROUTINE)           88185\nCMDTEXTL EQU   21,1,C'F'     LENGTH OF CMDTEXT                   88185\nCMDFLAG  EQU   22,1,C'B'     COMMAND FLAG                        88185\nCMDINIT  EQU   X'80'           ALLOWED FROM SYSIN FILE           88185\nCMDTERM  EQU   X'40'           ALLOWED FROM TERMINAL             88185\nCMDCONS  EQU   X'20'           ALLOWED FROM CONSOLE              88192\nCMDAUTH  EQU   X'01'           USER MUST BE AUTHORIZED           88185\nCMDAPPF  EQU   23,1,C'B'     0 OR APPLICATION GROUP FLAG         88185\nCMDTABL  EQU   24            LENGTH OF CMD TABLE ENTRY           88185\n         SPACE 1\n         PRINT NOGEN\nPRECMDTB $CMD  TSO,PRETEST,'LOGON',CMDTERM  SCAN APPLID()        87186\n         $CMD  TSO,PRETEST,'APPLID(',CMDTERM  APPLID             87186\nCMDTAB   DS    0X                            START OF COMMAND TABLE\n*\n*        APPLICATION LOGON SEQUENCES\n*\n         $CMDN TSOA,CHKAPPL,'TSOA',CMDTERM,TYPE=A$USFTSO  CDRSC  87187\n         $CMDN TSOB,CHKAPPL,'TSOB',CMDTERM,TYPE=A$USFTSO  CDRSC  87187\n*        NOTE THAT WE HAVE ONLY ONE TSO/E LICENSE; ALL 'TSO' REQUESTS\n*        ARE ROUTED TO SYSTEM B.                                 88311\n         $CMDN TSO,CHKAPPL,'TSO',CMDTERM,TYPE=A$USFTSO           84142\n         $CMDN TSO,CHKAPPL,'LOGON',CMDTERM,TYPE=A$USFTSO         84142\n         $CMDN TSO,CHKAPPL,'1',CMDTERM,TYPE=A$USFTSO             84142\n         SPACE 1                                                 87287\nCCICS    $CMDN CICSPROD,CHKAPPL,'CICSPROD',CMDTERM,TYPE=A$USFCIC 92335\n         $CMDN CICSPROD,CHKAPPL,'CICS',CMDTERM,TYPE=A$USFCIC     92335\n         $CMDN CICSPROD,CHKAPPL,'2',CMDTERM,TYPE=A$USFCIC        92335\nCCICT    $CMDN CICSTEST,CHKAPPL,'CICSTEST',CMDTERM,TYPE=A$USFCIC 87225\n         $CMDN CICSTEST,CHKAPPL,'14',CMDTERM,TYPE=A$USFCIC       87225\n         SPACE 1                                                 87287\nCSWYL  $CMDN SUPWYL,CHKAPPL,'SUPWYL',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n       $CMDN SUPWYL,CHKAPPL,'SUPER',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n       $CMDN SWYA,CHKAPPL,'SUPA',CMDTERM+CMDAUTH,TYPE=A$USFWYL   90113\n       $CMDN SWYA,CHKAPPL,'SWYA',CMDTERM+CMDAUTH,TYPE=A$USFWYL   93002\n       $CMDN SUPWYL,CHKAPPL,'SWYL',CMDTERM+CMDAUTH,TYPE=A$USFWYL 92335\n       $CMDN SWYB,CHKAPPL,'SUPB',CMDTERM+CMDAUTH,TYPE=A$USFWYL   90343\n       $CMDN SWYB,CHKAPPL,'SWYB',CMDTERM+CMDAUTH,TYPE=A$USFWYL   93002\n       $CMDN SUPWYL,CHKAPPL,'3',CMDTERM+CMDAUTH,TYPE=A$USFWYL    90113\n       $CMDN SWYLTEST,CHKAPPL,'SWYLTEST',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n       $CMDN SWYLTEST,CHKAPPL,'15',CMDTERM+CMDAUTH,TYPE=A$USFWYL 92222\n         SPACE 1                                                 87287\nCWYL     $CMDN WYLBUR,CHKAPPL,'WYLBUR',CMDTERM,TYPE=A$USFWYL     84142\n         $CMDN WYLA,CHKAPPL,'WYLA',CMDTERM,TYPE=A$USFWYL CDRSC   87187\n         $CMDN WYLB,CHKAPPL,'WYLB',CMDTERM,TYPE=A$USFWYL CDRSC   87187\n*TEST*   $CMDN WYLC,CHKAPPL,'WYLC',CMDTERM,TYPE=A$USFWYL CDRSC   90343\n         $CMDN WYLBUR,CHKAPPL,'WYL',CMDTERM,TYPE=A$USFWYL        84142\n         $CMDN WYLBUR,CHKAPPL,'4',CMDTERM,TYPE=A$USFWYL          84142\n         $CMDN WYLTEST,CHKAPPL,'WYLTEST',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n         $CMDN WYLTEST,CHKAPPL,'16',CMDTERM+CMDAUTH,TYPE=A$USFWYL\n         SPACE 1                                                 87287\n         $CMDN EXHI,CHKAPPL,'EXHIBIT',CMDTERM,TYPE=A$USFEXH      84142\n         $CMDN EXHA,CHKAPPL,'EXHA',CMDTERM,TYPE=A$USFEXH CDRSC   87187\n         $CMDN EXHB,CHKAPPL,'EXHB',CMDTERM,TYPE=A$USFEXH CDRSC   87187\n*TEST*   $CMDN EXHC,CHKAPPL,'EXHC',CMDTERM,TYPE=A$USFEXH CDRSC   90330\n         $CMDN EXHI,CHKAPPL,'EXHI',CMDTERM,TYPE=A$USFEXH         86356\n         $CMDN EXHI,CHKAPPL,'EXH',CMDTERM,TYPE=A$USFEXH          84142\n         $CMDN EXHI,CHKAPPL,'5',CMDTERM,TYPE=A$USFEXH            84142\nCEXOR   $CMDN EXORCIST,CHKAPPL,'EXORCIST',CMDTERM+CMDAUTH,TYPE=A$USFEXH\n         $CMDN EXORCIST,CHKAPPL,'17',CMDTERM+CMDAUTH,TYPE=A$USFEXH\n         $CMDN EXORA,CHKAPPL,'EXORA',CMDTERM+CMDAUTH,TYPE=A$USFEXH\n         $CMDN EXORB,CHKAPPL,'EXORB',CMDTERM+CMDAUTH,TYPE=A$USFEXH\n         SPACE 1                                                 87287\nCJRPA    $CMDN CJRPA,CHKAPPL,'CJRPA',CMDTERM,TYPE=A$USFOTH       85328\n         $CMDN CJRPA,CHKAPPL,'CJRP',CMDTERM,TYPE=A$USFOTH        85328\n         $CMDN CJRPA,CHKAPPL,'JRP',CMDTERM,TYPE=A$USFOTH         85328\n         $CMDN CJRPA,CHKAPPL,'10',CMDTERM,TYPE=A$USFOTH          85328\n         SPACE 1                                                 85245\n         $CMDN NETOP,CHKAPPL,'NETOP',CMDTERM,TYPE=A$USFNET       85245\n         $CMDN NETOP,CHKAPPL,'OPERATOR',CMDTERM,TYPE=A$USFNET    85245\n         $CMDN NETOP,CHKAPPL,'11',CMDTERM,TYPE=A$USFNET          85245\n         SPACE 1                                                 88245\n*DEFUNCT RELAY GOLD (PC <=> NTO <=> 3270 MODE)                   88245\n*DEFUNCT                                                         88245\n*DEFUNCT $CMDN R3270,CHKAPPL,'R3270',CMDTERM  RELAY/3270         88245\n*DEFUNCT $CMDN R3270,CHKAPPL,'GOLD',CMDTERM                      88245\n*DEFUNCT $CMDN R3270,CHKAPPL,'RELAY',CMDTERM                     88245\n         SPACE 1                                                 89328\nCKERM    $CMDN KERMIT,CHKAPPL,'KERMIT',CMDTERM  UNRESTRICTED KERMIT\n         $CMDN KERMIT,CHKAPPL,'KERM',CMDTERM                     89328\n         $CMDN KERB,CHKAPPL,'KERB',CMDTERM   B-SYSTEM ONLY       89328\n         $CMDN KERA,CHKAPPL,'KERA',CMDTERM   A-SYS / DEBUG       89328\n         $CMDN COMM,CHKAPPL,'COMM',CMDTERM  CPU/CPU COMMUNICATIONS\n         $CMDN COMM,CHKAPPL,'8',CMDTERM                          93263\n         $CMDN COMA,CHKAPPL,'COMA',CMDTERM  CPU A                93263\n         $CMDN COMB,CHKAPPL,'COMB',CMDTERM  CPU B                93263\n         SPACE 1                                                 87287\n         $CMDN PFK9,CHKAPPL,'9',CMDTERM       **ERROR            85245\n         $CMDN PFK12,CHKAPPL,'12',CMDTERM  **FOR SPARES          85328\n         $CMDN PFK13,CHKAPPL,'13',CMDTERM  **FOR SPARES          85328\n         $CMDN PFK20,CHKAPPL,'20',CMDTERM  **FOR SPARES          85328\n         $CMDN PFK21,CHKAPPL,'21',CMDTERM  **FOR SPARES          85328\n         $CMDN PFK22,CHKAPPL,'22',CMDTERM  **FOR SPARES          85328\n*OLD*    $CMDN SWITCH,CHKAPPL,'SWITCH',CMDTERM  MACKINNEY SWITCH 92040\n         $CMDN SWITCH,CHKAPPL,'23',CMDTERM            DITTO      92040\n         $CMDN MORE,CHKAPPL,'MORE',CMDTERM  LOCAL SWITCH         93333\n         $CMDN MORE,CHKAPPL,'24',CMDTERM                         93333\n         $CMDN MORA,CHKAPPL,'MORA',CMDTERM  CPU A                93333\n         $CMDN MORB,CHKAPPL,'MORB',CMDTERM  CPU B                93333\n         SPACE 1                                                 90147\n        $CMDN NETSOLGP,CHKAPPL,'NETSOLGP',CMDTERM+CMDAUTH,TYPE=A$USFNET\n         $CMDN NETA,CHKAPPL,'NETA',CMDTERM   CDRSC (DEBUG)       88223\n         $CMDN NETB,CHKAPPL,'NETB',CMDTERM   CDRSC (DEBUG)       88223\n*TEST*   $CMDN NETC,CHKAPPL,'NETC',CMDTERM   CDRSC (DEBUG)       90330\n         SPACE 1                                                 90147\n         $CMDN JES2A,CHKAPPL,'JES2A',CMDTERM+CMDAUTH (DEBUG)     89116\n         $CMDN JES2B,CHKAPPL,'JES2B',CMDTERM+CMDAUTH (DEBUG)     89116\n         $CMDN JES2,CHKAPPL,'JES2',CMDTERM+CMDAUTH (DEBUG)       89116\n         SPACE 1                                                 90147\n*OLD*    $CMDN TMON8CSM,CHKAPPL,'TMON8CSM',CMDTERM+CMDAUTH   TMON\n*OLD*    $CMDN TMON8CSM,CHKAPPL,'TMON',CMDTERM+CMDAUTH   TMON    90147\n         SPACE 1                                                 87287\n***********************************************************************\n*                                                                     *\n*        COMMANDS VALID PRIOR TO NETSOL LOGON                         *\n*                                                                     *\n***********************************************************************\nPRELOGON DS    0X            START OF LOCAL FUNCTIONS            88179\n         $CMD  SETSTATS,SETSTATS,'STATUS',CMDTERM                87193\n         $CMD  SETSTATS,SETSTATS,'STAT',CMDTERM                  87193\nCSLOGON  $CMD  SETLOGON,SETLOGON,'SETLOGON',CMDTERM+CMDINIT+CMDCONS\n         $CMD  SETRANGE,SETRANGE,'SETRANGE',CMDTERM+CMDINIT+CMDCONS\n         $CMD  EODSYSIN,EODSYSIN,'END',CMDINIT  LOG.EOF          87137\n         SPACE 1                                                 86065\nCMDUNTAB $CMD  SETPASON,SETPASON,'PASSWORD',CMDTERM              86065\n         $CMD  SETPASON,SETPASON,'PASS',CMDTERM                  88192\n         $CMD  SETPASON,SETPASON,'PAS',CMDTERM                   89076\n         $CMD  SETPASON,SETPASON,'UNLOCK',CMDTERM                86065\n         $CMD  SETPASON,SETPASON,'SIGNON',CMDTERM                88192\nPSWCMD   $CMD  SETPASON,SETPASON,'LOGON',CMDTERM                 88179\n         $CMD  SETPASOF,SETPASOF,'LOCK',CMDTERM                  86065\n         $CMD  SETOSCMD,SETOSCMD,'OS',CMDTERM+CMDAUTH            87187\n         $CMD  SETWTO,SETWTO,'MESSAGE',CMDTERM                   88172\n         $CMD  SETWTO,SETWTO,'MSG',CMDTERM                       88172\n         $CMD  SETHELP,SETHELP,'HELP',CMDTERM                    88172\n         $CMD  SETHELP,SETHELP,'?',CMDTERM                       88172\n         $CMD  SETNEWS,SETNEWS,'NEWS',CMDTERM                    88179\nCLOGOFF  $CMD  LOGOFF,LOGOFCMD,'LOGOFF',CMDTERM\n         $CMD  LOGOFF,LOGOFCMD,'SIGNOFF',CMDTERM                 88192\n         $CMD  SETSHOW,SETSHOW,'SHOW',CMDTERM+CMDCONS  SHOW STUFF\n         $CMD  SETSET,SETSET,'SET',CMDTERM+CMDCONS   SET THINGS  88206\n         $CMD  SETKILL,SETKILL,'KILL',CMDTERM+CMDCONS+CMDAUTH    88206\n         SPACE 1                                                 88192\n         $CMD  CONSREST,CONSREST,'RESTART',CMDCONS               88192\n         $CMD  CONSREST,CONSREST,'RESHOW',CMDCONS                88192\n         $CMD  CONSREST,CONSREST,'REPEAT',CMDCONS                88192\n         $CMD  CONSLOCK,CONSLOCK,'LOCK',CMDCONS                  88192\n         $CMD  CONSULOK,CONSULOK,'UNLOCK',CMDCONS                88192\n         $CMD  SETWTO,CONSMSG,'MESSAGE',CMDCONS                  88192\n         $CMD  SETWTO,CONSMSG,'MSG',CMDCONS                      88192\n         $CMD  SETWTO,CONSMSG,'MSG',CMDINIT ALLOW IN CONFIG FILE 90054\n         $CMD TESTMSG,TESTMSG,'TESTMSG',CMDAUTH+CMDCONS+CMDTERM+CMDINIT\n         SPACE 1\nCMDTABND DC    CL8'ENDOFTAB'                 END OF COMMAND TABLE\nNETINTAB CSECT ,             PUT END IN PROPER CSECT             90126\n         PRINT &PRTSYS                                           85234\n         ENDINTAB                                                87193\n         TITLE 'MVS/SP SYSTEM IPO SUPPLIED INTERPRET TABLE'      87187\n*/* LIB: IPO1.COM.SAMPLIB(INTTAB)                                87187\n*/* GDE: SYSTEM IPO COMMUNICATIONS GUIDE                         87187\n*/* DOC: THIS IS THE MVS/SP SYSTEM IPO SAMPLE INTERPRET TABLE    87187\n*/*      FOR VTAM LOGONS.  IT HAS THE UPPER AND LOWER            87187\n*/*      CASE ENTRIES FOR 'LOGON' (ROUTINE OF NETINLOG)          87187\n*/*                                                              87187\n         SPACE 2                                                 87187\n***************************************************************  87187\n*                                                                87187\n*    SCAN INPUT FOR STANDARD LOGON SEQUENCE                      87187\n*                                                                87187\n*    STANDARD LOGON SEQUENCE IS AS FOLLOWS:                      87187\n*      ANY NUMBER OF BLANKS                                      87187\n*      'LOGON ' OR 'LOGON,'                                      87187\n*      OPTIONAL OTHER DATA ENDING IN ' ' OR ','                  87187\n*      'APPLID('                                                 87187\n*      ONE TO EIGHT ALPHANUMERIC CHARACTERS SIGNIFYING           87187\n*       THE APPLICATION NAME                                     87187\n*      ')'                                                       87187\n*      AN OPTIONAL ' ' OR ',' FOLLOWED BY OTHER DATA             87187\n*                                                                87187\n*    NOTE:                                                       87187\n*      'LOGON' OR 'LOGON ' OR 'LOGON,'                           87187\n*      IS SUFFICIENT TO LOGON TO TSO.                            87187\n*                                                                87187\n*    NOTE:                                                       87187\n*      IF 'APPLID(NAME)' IS NOT FOUND,                           87187\n*      THEN TSO IS ASSUMED.                                      87187\n*                                                                87187\n***************************************************************  87187\n         PUSH  USING                                             87193\n         DROP  ,             MAKE SURE                           90126\nNETINLOG CSECT ,                                                 87187\n         STM   R14,R12,12(R13)                                   87187\n         BALR  R12,0                                             87187\n         USING *,R12                                             87187\n*                                                                87187\n         LTR   R2,R0                   LENGTH OF LOGON MESSAGE   87187\n         BNP   VS2DFLT       MAKE DEFAULT SUBSYSTEM              90120\n         BCTR  R2,0                    DECREMENT TO              87187\n         EX    R2,TRANS                 EXECUTE TRANSLATE        87187\n         LR    R2,R0                   LENGTH OF LOGON MESSAGE   87187\n         LR    R3,R1                   POINT TO LOGON MESSAGE    87187\n         LR    R4,R3                   POINT BEYOND END OF       87187\n         AR    R4,R2                    LOGON MESSAGE            87187\n         BCTR  R3,0                    BACKSPACE 1 FOR LOOP      87187\n*                                       ACTION                   87187\n*                                       BELOW                    87187\n         SPACE 2                                                 87187\nNEXTCHAR DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(,R3)               NEXT CHARACTER            87187\n         CLI   0(R3),C' '              IGNORE LEADING BLANKS     87187\n         BNE   FOUNDLOG                NON BLANK CONTINUE        87187\n         BCT   R2,NEXTCHAR             ALL BLANKS?               87187\n         B     VS2DFLT                 YES. SET DEFAULT          90120\n         SPACE 2                                                 87187\nFOUNDLOG DS    0H                                                87187\n         LA    R5,L'CLOGON+L'CAPPLID+3(,R3) MINIMUM END          87187\n         CR    R5,R4                   CAN STANDARD SEQUENCE     87187\n*                                       FIT IN DATA AREA?        87187\n         BH    VS2NTSO                 NO. MUST BE TSO           87187\n         SPACE 2                                                 87187\n*       'LOGON' HAS BEEN FOUND.SEARCH FOR APPLID(NAME)           87187\n         SPACE 2                                                 87187\n         LA    R3,L'CLOGON(,R3)        NEXT CHAR BEYOND LOGON    87187\n         CLI   0(R3),C' '              NEXT CHAR MUST BE         87187\n         BE    APPLSCAN                  EITHER BLANK OR A       87187\n         CLI   0(R3),C','                COMMA                   87187\n         BNE   VS2DFLT                 NO. MUST BE DEFAULT       90120\nAPPLSCAN LA    R7,L'CAPPLID  MAXIMUM LENGTH                      87187\n         SPACE 2                                                 87187\nAPPLSCAM DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(,R3)               NEXT CHAR                 87187\n         LA    R5,2(R7,R3)   LENGTH FOR STD. SEQUENCE            87187\n         CR    R5,R4         WILL IT FIT ?                       87187\n         BH    VS2NTSO       NO; ASSUME TSO                      87187\n         LA    R5,L'CAPPLID+2(,R3)     MINIMUM END               87187\n         CR    R5,R4                   CAN STANDARD SEQUENCE     87187\n*                                       FIT IN DATA AREA?        87187\n         BH    VS2NTSO                 NO. MUST BE TSO           87187\n         SPACE 2                                                 87187\n         CLC   CAPPLID,0(R3)           IS THIS APPLID(?          87187\n         BNE   APPLSCAM                                          87187\n         SPACE 2                                                 87187\n*       APPLID( FOUND--ENSURE THAT BLANK OR COMMA PRECEDES IT    87187\n*       AND THAT IT'S WITHIN BOUNDS OF MESSAGE                   87187\n         SPACE 2                                                 87187\nCOMAPPL  BCTR  R3,0                    BACKSPACE ONE             87187\n         CLI   0(R3),C' '              IS IT A BLANK?            87187\n         BE STARTSOK                   CONTINUE IF SO            87187\n         SPACE 2                                                 87187\n         CLI 0(R3),C','                IS IT A COMMA?            87187\n         BE    STARTSOK                CONTINUE IF SO            87187\n         SPACE 2                                                 87187\n         LA    R3,1(R7,R3)         NEXT CHAR PAST APPLID(        87187\n         B     APPLSCAN                CONTINUE SCAN FOR APPLID( 87187\n         SPACE 2                                                 87187\nSTARTSOK DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(R7,R3)   GO PAST APPLID(                     87187\nNEXT     CLI   0(R3),C' '              IS IT A BLANK?            87187\n         BNE   RIGHT                   NO.CHECK FOR RIGHT PAREN  87187\n         LA    R3,1(,R3)               POINT TO NEXT CHAR        87187\n         CR    R3,R4                   END REACHED?              87187\n         BNL   VS2NTSO                 YES. MUST BE TSO          87187\n         B     NEXT                    NO. GO TO NEXT CHAR       87187\nRIGHT    CLI   0(R3),C')'              NULL APPL NAME?           87187\n         BE    APPLSCAN                YES. LOOK FOR VALID       87187\n*                                       APPLID(                  87187\n         SPACE 2                                                 87187\n*       FIND RIGHT PARENTHESIS                                   87187\n         SPACE 2                                                 87187\n         LR    R6,R3                   ADDRESS POTENTIAL APPLID NAME\n         SPACE 2                                                 87187\nFNDPAREN DS    0H                                                87187\n         SPACE 2                                                 87187\n         LA    R3,1(,R3)               POINT TO NEXT CHAR        87187\n         CR    R3,R4                   END REACHED?              87187\n         BNL VS2NTSO                   YES. MUST BE TSO          87187\n         SPACE 2                                                 87187\n         CLI   0(R3),C')'              IS THIS RIGHT PAREN.?     87187\n         BNE   FNDPAREN                NO,CONTINUE SCAN          87187\n         LA    R5,1(,R3)               MINIMUM END               87187\n         CR    R5,R4                   END OF DATA               87187\n         BE    NAMELENG                YES. CAN CHECK FOR        87187\n*                                       APPL NAME                87187\n         SPACE 2                                                 87187\n         CLI   1(R3),C' '              NO. NEXT CHARACTER MUST   87187\n         BE    NAMELENG                 BE BLANK OR COMMA,       87187\n         CLI   1(R3),C','               ELSE CONTINUE SCAN FOR   87187\n         BNE   APPLSCAN                 VALID APPLID             87187\n         SPACE 2                                                 87187\nNAMELENG DS    0H                                                87187\n         SPACE 2                                                 87187\n*       IF THIS POINT REACHED APPLID WITH LEFT AND RT. PAREN FOUND\n*        AND IT IS FOLLOWED BY A BLANK OR A COMMA OR NO MORE DATA\n         SPACE 2                                                 87187\n         SR    R3,R6                   LENGTH OF APPL NAME IN R3 87187\n         CH    R3,LAPPLID              IS NAME TOO BIG?          87187\n         BNH   EXTRAPPL                NO. EXTRACT APPL NAME     87187\n         LR    R3,R6                   YES. CONTINUE SCAN FOR    87187\n         B     APPLSCAN                 VALID APPLID(            87187\nEXTRAPPL DS    0H                                                87187\n         SPACE 2                                                 87187\n         BCTR  R3,0                    DECREMENT FOR EXECUTE     87187\n         MVC   20(8,R13),BLANK8        CLEAR OUT TO MOVE NAME    87187\n         EX    R3,MVCNAME              EXEC MVC WITH CORRECT LENGTH\n         B     VS2ISOK                 GO SET GOOD CODE          87187\n         SPACE 2                                                 87187\n*        USER TO BE CONNECTED TO DEFAULT SUBSYSTEM (NETWORK SOLICITOR)\n*        WHEN NETSOL IS NOT AVAILABLE, THIS DEFAULT CAUSES AN 0C6 ABEND\n*        IN VTAM!!!  THE INSERTED CODE SCANS THE ASCB CHAIN TO MAKE\n*        SURE NETSOL IS THERE - IF NOT, THE REQUEST IS REJECTED. 90120\nVS2DFLT  L     R3,CVTPTR                                         90120\n         USING CVTMAP,R3                                         90120\n         L     R15,CVTASVT   GET THE ASCB VECTOR TABLE           90120\n         USING ASVT,R15                                          90120\n         L     R0,ASVTMAXU   GET HIGHEST VALID ASID              90120\n         SLL   R0,2          *4 FOR FAST CHECK                   90120\n         SLR   R1,R1         SET INDEX FOR NEXT ASID             90120\nGTIAASID LA    R1,4(,R1)     GET NEXT ASID INDEX                 90120\n         CR    R1,R0         VALID ?                             90120\n         BH    VS2FAIL       NO; QUIT                            90120\nGTIAACOM LA    R5,ASVTFRST(R1)  POINT TO ASCB POINTER            90120\n         ICM   R5,15,0(R5)   LOAD AND TEST                       90120\n         BNP   GTIAASID      SKIP UNUSED/FREE SLOT               90120\n         USING ASCB,R5                                           90120\n         LA    R14,8         SET DIFFERENTIAL OFFSET - FAKE CSCB 90120\n         ICM   R2,15,ASCBJBNI  JOB CSCB ?                        90120\n         BNZ   GTIAAJOB      YES; SKIP                           90120\n         SLR   R14,14        RESET CSCB ORIGIN OFFSET            90120\n         ICM   R2,15,ASCBCSCB  GET THE CSCB                      90120\n         BZ    GTIAASID                                          90120\n         USING CHAIN,R2      DECLARE THE CSCB                    90120\n         CLI   CHVCD,X'04'   START TASK/INIT ?                   90120\n         BNE   GTIAASID      NO                                  90120\nGTIAAJOB SLR   R2,R14        MAKE FAKE CSCB ORIGIN               90120\n         CLC   CTSO,CHCLS    MATCHING NAME ?                     90120\n         BNE   GTIAASID      NO                                  90120\n         SPACE 1                                                 90120\n*  LOGON IS FOR INSTALLATION DEFAULT (IBM IS TSO)                87187\nVS2NTSO  MVC   20(8,R13),CTSO          MOVE TSO NAME INTO SAVE AREA\n         B     VS2ISOK       YES; ACCEPT IT                      90121\n         SPACE 2                                                 87187\nVS2FAIL  LA    R15,4         FAIL THIS REQUEST                   90120\n         B     VS2EXCOM      GET OUT                             90120\n*  VS2 LOGON SEQUENCE O.K.                                       87187\nVS2ISOK  SLR   R15,R15                 INDICATE THAT LOGON SEQ   87187\nVS2EXCOM LM    R0,R12,20(R13)           WAS INTERPRETED OK       87187\n         BR    R14                     RETURN TO CALLER          87187\n         SPACE 3                                                 87187\nBLANK8   DC    CL8' '                  BLANKS FOR NAME           87187\nCLOGON   DC    C'LOGON'                                          87187\n*OLD*CTSO     DC    CL8'TSO'                                     87187\nCTSO     DC    CL8'NETSOL70'  THIS MODULE IS INSTALLATION DFLT.  90080\nCAPPLID  DC    C'APPLID('                                        87187\nLAPPLID  DC    H'8'                    LENGTH OF APPLID NAME     87187\nMVCNAME  MVC   20(0,R13),0(R6)                                   87187\nTRANS    TR    0(0,R1),TRTAB2                                    87187\n         SPACE 3                                                 87187\nTRTAB2   EQU   *                                                 87187\n         DC    74C' '         00-49    BLANK OUT CONTROL CHARS   87187\n         DC    X'4A'                   CENT OR LEFT ARROW        87187\n         DC    C'.<(+|'                                          87187\n         DC    X'50'                   AMPERSAND                 87187\n         DC    X'515253545556575859'                             87187\n         DC    X'5A'                   EXCLAMATION POINT         87187\n         DC    C'$*);\u00ac-/'                                        87187\n         DC    X'6263646566676869'                               87187\n         DC    X'6A'                   VERTICAL LINE (NOT |)     87187\n         DC    C',%_>?'                                          87187\n         DC    X'707172737475767778'                             87187\n         DC    X'79'                   GRAVE ACCENT              87187\n         DC    C':#@'                                            87187\n         DC    X'7D'                   SINGLE QUOTE              87187\n         DC    C'=\"'                                             87187\n         DC    X'80'                                             87187\n         DC    C'ABCDEFGHI'            SMALL LETTERS             87187\n         DC    X'8A8B8C8D8E8F90'                                 87187\n         DC    C'JKLMNOPQR'            SMALL LETTERS             87187\n         DC    X'9A9B9C9D9E9FA0'                                 87187\n         DC    X'A1'                   TILDE                     87187\n         DC    C'STUVWXYZ'             SMALL LETTERS             87187\n         DC    X'AAABACADAEAF'                                   87187\n         DC    X'B0B1B2B3B4B5B6B7B8B9'                           87187\n         DC    X'BABBBCBDBEBF'                                   87187\n         DC    X'C0'                   LEFT BRACE                87187\n         DC    C'ABCDEFGHI'            CAPITAL LETTERS           87187\n         DC    X'CACB'                                           87187\n         DC    X'CC'                   HOOK                      87187\n         DC    X'CD'                                             87187\n         DC    X'CE'                   FORK                      87187\n         DC    X'CF'                                             87187\n         DC    X'D0'                   RIGHT BRACE               87187\n         DC    C'JKLMNOPQR'            CAPITAL LETTERS           87187\n         DC    X'DADBDCDDDEDF'                                   87187\n         DC    X'E0'                   REVERSE SLANT             87187\n         DC    X'E1'                                             87187\n         DC    C'STUVWXYZ'             CAPITAL LETTERS           87187\n         DC    X'EAEB'                                           87187\n         DC    X'EC'                   CHAIR                     87187\n         DC    X'EDEEEF'                                         87187\n         DC    C'0123456789'                                     87187\n         DC    X'FA'                   LONG VERTICAL LINE (NOT   87187\n*                                       | OR VERTICAL LINE)      87187\n         DC    X'FBFCFDFEFF'                                     87187\n         POP   USING                                             87193\nNETSOL70 CSECT ,             RETURN                              87193\n         TITLE '*********  N E T S O L  -  SPECIAL LOGMODE ENTRY TABLE'\n***********************************************************************\n*        THIS TABLE DEFINES THOSE APPLICATIONS WHICH DO NOT USE       *\n*        THE DEFAULT LOGMODE ENTRY FOR THE DEVICE.                    *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             LOGMDAPP - THE APPLID OF THE APPLICATION USING A        *\n*                        DIFFERENT LOGOMODE TABLE ENTRY.              *\n*                                                                     *\n*             LOGMDENT- THE ASSOCIATED LOGOMODE TABLE ENTRY NAME.     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nLOGMDAPP EQU   0,8                    APPLICATION NAME\nLOGMDENT EQU   8,8                    ASSOCIATED LOGMODE TABLE ENTRY\nLOGMDLEN EQU   16                     LENGTH OF A TABLE ENTRY\n         SPACE 1\nLOGMDTAB EQU   *                             START OF LOGMODE TABLE\n*                 /APPLID  /    /LOGMODE /   FORMAT ENTRY\nLOGMDRLY DC    CL8'R3270   ',CL8'RLY3767 '   RELAY/3270/GOLD     88248\nLOGMDHCF DC    CL8'HCF     ',CL8'HCFPX   '   HCF\nLOGMDNCF DC    CL8'NCCF    ',CL8'DSILGMOD'   NCCF\nLOGMDEND DC    XL8'FFFFFFFFFFFFFFFF'         END OF LOGMODE TABLE\n         TITLE '*********  N E T S O L  -  MESSAGE EQUATES/CONSTANTS'\n*              EQUATES FOR ERROR MESSAGE NUMBERS AND REASON-CODES\nMSG01    EQU   1                       INVALID LOGMODE TABLE ENTRY\nMSG02    EQU   2                       LOGON DATA NOT IN INTRPRET TBLE.\nMSG03    EQU   3                       NO INTRPRET TABLE\nMSG04    EQU   4                       NO ROUTINE TO FIND APPL NAME\nMSG05    EQU   5                       NOT AUTHORIZED FOR APPLICATION\nMSG06    EQU   6                       APPLICATION NOT KNOWN\nMSG07    EQU   7                       APPLICATION DEACTIVATED\nMSG08    EQU   8                       APPLICATION INACTIVE\nMSG09    EQU   9                       APPLICATION QUIESCING\nMSG10    EQU   10                      APPLICATION NEVER ACCEPTS LOGONS\nMSG11    EQU   11                      APPLICATION TEMPORARILY NOT\n*                                      ACCEPTING LOGONS.\nMSG12    EQU   12                      THIS TERMINAL LOGGED ON\n*                                      TO NETWORK SOLICITOR\nMSG13    EQU   13            LOGON SCREEN / CENTER CLOSED        86065\nMSG14    EQU   14            UNTIMELY REQUEST (SYSTEMS ONLY)     86065\nMSG15    EQU   15            TERMINAL NOW UNLOCKED               86065\nMSG16    EQU   16            TERMINAL NOW LOCKED                 86065\nMSG17    EQU   17            UNLOCK REQUEST FAILED               86065\nMSG18    EQU   18                      UNAUTHORIZED COMMAND      87187\nMSG19    EQU   19            TEXT SUPPLIED IN DATAPTR            87187\nMSG20    EQU   20            LOGON SCREEN                        88179\nMSGMAX   EQU   20       **** HIGHEST DEFINED MESSAGE NUMBER **** 88220\n         SPACE 1\n***********************************************************************\n*        LIST FORMS OF SOME MESSAGES                                  *\n***********************************************************************\n         SPACE 1\nLISTWTO  WTO  'BCSC001 TERM=******** HAS BEEN RELEASED BY NETSOL DUE TOX\n                I/O ERROR',                                            X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLISTWTO1 WTO  'BCSC002 RC=42 ON NETSOL CLOSE ACB',                     X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLISTWTO6 WTO  'BCSC006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS PROX\n               GRAM IS TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nERRORMSG WTO  'BCSC003 SYNAD/LERAD EXIT REQ=**,RTNCD=**,FDBK2=**,SSENSEX\n               I=**,SSENSMI=**,SENSE=****,TERM=********',              X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLOSTMSG  WTO  'BCSC004 LOSTERM ENTRY CODE XX FOR TERM=********',       X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nRELRQMSG WTO  'BCSC005 TERM=******** RELEASED DUE TO RELREQ REQUEST',  X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nRELFLMSG WTO  'BCSC007 TERM=******** NOT RELEASED BY RELREQ EXIT',     X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLISTWTO8 WTO  'BCSC008 TERM=******** IS AN UNSUPPORTED TERMINAL TYPE', X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nLOGMENU  WTO  'BCSC009 TERM=******** MENU WRITTEN FROM ******',        X\n               ROUTCDE=(11),DESC=(7),MF=L\n         SPACE 2\nMSG1003  WTO  'BCSC010 TERM=******** LOGMODE NOT COMPATIBLE WITH TERMINX\n               AL',ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 2\nDCBMSG   WTO  'BCSC011 XXXXXX FILE WILL NOT OPEN. INITIALIZATION BYPASSX\n               ED',ROUTCDE=(1,8),DESC=(7),MF=L\n         SPACE 2\nINITEMSG WTO 'BCSC012 ERRORS ON INITIALIZATION FILE. EXECUTION CONTINUEX\n               S',ROUTCDE=(1,8),DESC=(7),MF=L\n         SPACE 1                                                 88221\nKICKBACK WTO   'BCSC013 XXXXXXXX REJECTED BY YYYYYYYY',ROUTCDE=(1,8),DE*\n               SC=7,MF=L                                         88221\n         TITLE '*********  N E T S O L  -  A C B'\n         DS    0D\n         DC    CL8'ACB'\n         SPACE 1\nACB      ACB   AM=VTAM,                                                X\n               APPLID=NSNAME,                                          X\n               EXLST=EXLST,                                            X\n               MACRF=LOGON\n         TITLE '*********  N E T S O L  -  TERMINAL TABLE DSECT'\nTERMTABL DSECT\nTERMNAME DS    CL8                     TERMINAL LU NAME FROM LOGON\nTERMNAM2 DS    0CL8          END-RANGE ENTRY FOR SETRANGE        88185\nTERMCID  DS    XL4                     CID GOTTEN AFTER OPNDST\nTERMCRPL DS    AL4                     A(ACTIVE RPL FOR THIS TTE)\nTERMAPPL DS    CL8                     APPLID FOR LAST CLSDST(PASS)\nTERMDAPL DS    CL8                     DEFAULT LOGON APPLID FOR TERM\nTERMLOGC DS    H                       LOGON COUNTER\nTERMDCNT DS    H                       AUTO LOGON LOOP COUNTER\nTERMFLAG DS    XL1           FLAG BYTE FOR LOGON STATUS\nLOGPROC  EQU   X'80'           LOGON PROCEEEDING\nSENDSCED EQU   X'40'           SEND (POST=SCHED) ISSUED         DC18203\nTERMCONS EQU   X'20'           TTE IS FOR OPERATOR CONSOLE       88192\nLETMODE  EQU   X'10'           ALLOW LOGMODE IN CLSDST PASS      88207\nFLIPFLOP EQU   X'08'           CONVERSATIONAL MODE DEVICE        90135\nCONTENT  EQU   X'04'           CONTENTION MODE (3767)            90135\nTERMFLG2 DS    XL1                     FLAG FOR TERMINAL'S NETSOL STAT\nTOPEN    EQU   X'80'                   TERM LOGGED ON TO NETSOL\nTPASSED  EQU   X'40'                   TERM SUCCESSFULLY TO APPLID\nTREL     EQU   X'20'                   TERM RELEASED FOR SOME REASON\nTINIT    EQU   X'10'                   DEFAULT APPLID SET AT INIT TIME\nTERMFLG3 DS    XL1           AUTHORIZATION FLAGS                 86143\nTFREQ    EQU   X'80'         USER MUST COMPLETE LOGON            88172\nTFAUL    EQU   X'40'         USER WISHES AUTOMATIC LOGON         88172\nTFLOF    EQU   X'10'         DEVICE FAULT - FORCE A LOGOFF       88188\nTFAPL    EQU   X'08'         USER RESTRICTED TO ONE APPLICATION  88220\nTFLON    EQU   X'04'         USER HAS LOGGED ON                  88172\nTSYSP    EQU   X'02'         USER HAS SYSTEM PRIVILEGES          86065\nTSUPP    EQU   X'01'         USER HAS SUPPORT PRIVILEGES         86065\nTPRIVY   EQU   TSYSP+TSUPP     SOME PRIVILEGE                    86065\nTERMMSGX DC    X'00'         INDEX OF LAST MESSAGE SENT          86160\nTERMDDT  DS    A                       A(DDT FOR THIS TERMINAL)  86143\nTERMDTIM DS    F                       TIME+60 SECS OF AUTO LOGON\nTERMRUSZ DS    F             MAXIMUM SEND RU SIZE OR 0           86143\nTERMLPAD DS    A             ADDRESS OF LOGON MESSAGE OR 0       87131\nTERMLPLN DS    F             LENGTH OF LOGON MESSAGE OR ZERO     87131\nTERMLOUD DS    F             ADDRESS OF LOCAL ON-LINE USER DATA  88179\n*ERMMODE DS    CL8           LOGMODE NAME (FROM SESSIONS BIND)   88213\nTERMETIM DS    F             TIME OF LAST (SERIES) OF ERRORS     91296\nTERMERCT DS    F             NUMBER OF CONSECUTIVE ERRORS        91296\nTERMELEN EQU   *-TERMNAME              LENGTH OF AN ENTRY\n         TITLE '*********  N E T S O L  - DEVICE DEPENDENT TABLE DSECT'\nDDT      DSECT\n         SPACE 1\n*        THE DEVICE DEPENDENT TABLE IDENTIFIES EDIT AND I/O ROUTINES\n*        AND MESSAGES APPLICABLE TO A PARTICULAR DEVICE TYPE.\n*        THE INQUIRE MACRO IS ISSUED IN THE LOGON EXIT TO OBTAIN\n*        LOGMODE INFORMATION SO THAT THE DEVICE TYPE CAN BE DETERMINED.\n*        TERMDDT POINTS TO THE DDT FOR A TERMINAL.\n         SPACE 1\n         DS    0D\nDDTEDIT  DS    AL4                     A(INPUT EDIT ROUTINE)\nDDTSEND  DS    AL4                     A(SEND ROUTINE)\nDDTTERM  DS    AL4                     A(TERMINAL FIELD IN MSG 12)\nDDTTERM3 DS    AL4                     MESSAGE 13                86065\nDDTTERM2 DS    AL4                     MESSAGE 20                88179\nDDTTIME  DS    AL4                     A(TIME FIELD IN MSG 12)\nDDTTIME3 DS    AL4                                               86065\nDDTTIME2 DS    AL4                                               88179\nDDTM4OFS DS    AL4                     A(USABLE MSG BUFFER IN MSG4)\nDDTMSGOF DS    AL2                     MSG OFFSET OF DATA FIELD\nDDTM4L   DS    AL2                     LEN(USABLE MSG BUFFER IN MSG4)\nDDTMSGTB DS    0F\nDDTMSG01 DS    AL4                     A(MSG 01)\nDDTMSG02 DS    AL4                     A(MSG 02)\nDDTMSG03 DS    AL4                     A(MSG 03)\nDDTMSG04 DS    AL4                     A(MSG 04)\nDDTMSG05 DS    AL4                     A(MSG 05)\nDDTMSG06 DS    AL4                     A(MSG 06)\nDDTMSG07 DS    AL4                     A(MSG 07)\nDDTMSG08 DS    AL4                     A(MSG 08)\nDDTMSG09 DS    AL4                     A(MSG 09)\nDDTMSG10 DS    AL4                     A(MSG 10)\nDDTMSG11 DS    AL4                     A(MSG 11)\nDDTMSG12 DS    AL4                     A(MSG 12)\nDDTMSG13 DS    AL4                     A(MSG 13)                 86065\nDDTMSG14 DS    AL4                     A(MSG 14)                 86065\nDDTMSG15 DS    AL4                     A(MSG 15)                 86065\nDDTMSG16 DS    AL4                     A(MSG 16)                 86065\nDDTMSG17 DS    AL4                     A(MSG 17)                 86065\nDDTMSG18 DS    AL4                                               87187\nDDTMSG19 DS    AL4           FREE FORMAT MSG (A/L IN DATAPTR)    87187\nDDTMSG20 DS    AL4           LOGON SCREEN                        88179\n         SPACE 2                                                 90120\n*        DCB FOR SYSIN FILE\nNETSOL70 CSECT ,\n         SPACE 1\n         DCBD  DSORG=PS                                          92273\n         PRINT NOGEN\n         SPACE 2                                                 90120\n         ISTDNIB\n         TITLE '*********  N E T S O L  -  B I N D   DSECT'\n         PRINT GEN\n         ISTDBIND\n         AIF   (&MVSXA).NOBINAT                                 GP04234\nBINLUP0C EQU   0                                                GP04234\nBINDFLAG EQU   BINLUP+1,1,C'X'  OPTION FLAGS                    GP04234\nBINSEDS  EQU   X'80'         DEVICE ACCEPTS EXTENDED DATA STREAMS\nBINSPRIR EQU   BINLUP+6,1,C'X'  PRIMARY SIZE - ROWS\nBINSPRIC EQU   BINLUP+7,1,C'X'  PRIMARY SIZE - COLUMNS\nBINSALTR EQU   BINLUP+8,1,C'X'  ALTERNATE SIZE - ROWS\nBINSALTC EQU   BINLUP+9,1,C'X'  ALTERNATE SIZE - COLUMNS\nBINPSFX  EQU   X'7E'         FIXED SCREEN SIZE\nBINPSZRC EQU   X'7F'         VARIABLE SCREEN SIZE\n         ORG   BINPSCHR+4                                       GP08125\nBINBFRSZ DS    0XL4          PRIMARY/ALTERNATE SCREEN SIZE      GP08125\nBINBFRDR DS    X             PRI ROWS                           GP08125\nBINBFRDC DS    X             PRI COLS                           GP08125\nBINBFRAR DS    X             ALT ROWS                           GP08125\nBINBFRAC DS    X             ALT COLS                           GP08125\nBINBDESC DS    X             MODEL DESCRIPTOR                   GP08125\nBINBFSIZ EQU   X'7F'           FIXED SIZE                       GP08125\nBINBFSZF EQU   X'7E'           TWO SIZES                        GP08125\n.NOBINAT ORG   ,                                                 88213\nBINDSIZE EQU   *-ISTDBIND    MODE TABLE ENTRY SIZE -8            88213\n         PRINT NOGEN\n         SPACE 2                                                 90120\nIFGRPLX  DSECT\nSTSECT   DS    0D                  START DSECT ON D-WORD\n         IFGRPL DSECT=NO,AM=VTAM\n         TITLE '*********  N E T S O L  - NIB, RPL, ETC.'        90120\n*********       END OF RPL DSECT AND START OF NIB       **************\n         ORG\nNIBDMPID DC    0D'0',CL8'DYNAMNIB'     NIB DUMP ID\nNIBSTART DS    CL(NIBLNIB)             ASYNCHROUS NIB\n*********       END OF NIB AND START OF RPL WORK AREA   **************\nWORKSPAC DS    0D                      START OF RPL WORK AREA\nCID      DS    F                       CID OF READ DEVICE\nRPLSAVE  DS    18F                     SAVE AREA FOR RPL OPERATIONS\nRPLERRSA DS    12F                     SAVE AREA FOR SYNAD EXIT\n*                                      THAT ARE ASYNCHRONOUS\nAPPLID   DS    CL8                     NAME OF APPLICATION\nMODENAM  DS    CL8                     NAME OF MODE TABLE ENTRY\nGRPLTIME DS    CL8     (HHMMSSTH YYYDD) TIMESTAMP WHEN RPL GETMAINED\nRECLEN   DS    F                       FOR READ RECLEN FIELD\nSENDLEN  DS    F                       FOR SEND TO TERMINAL\nDATAPTR  DS    AL4(0)                  A(LOGON SEQUENCE IN IOAREA)\nGPPARM   DS    AL4(0)                  A(OPTION LIST PASSED TO GETPARM)\nGPDATAP  DS    AL4(0)                  A(CURRENT PTR IN CMD BUFFER)\nGPDATAL  DS    H                       LENGTH OF TEXT LEFT IN CMD BUF\nMSGINDEX DS    X                       NUMBER OF ERROR MESSAGE WRITTEN\nERMDATA  DS    CL7                     COMBINED ERROR FIELD\nREQ      EQU   ERMDATA,1               FOR RPL REQ FIELD\nRTNCD    EQU   ERMDATA+1,1             FOR RPL RTNCD FIELD\nFDBK2    EQU   ERMDATA+2,1             FOR RPL FDBK2 FIELD\nSENSE    EQU   ERMDATA+3,2             SAVE SSENSEI + SSENSMI FIELDS\nUSENSE   EQU   ERMDATA+5,2             SAVE USSESEI (2 BYTES)\nERMTEMP  DS    CL7                     ERROR FIELD WORKAREA\nACTIONS  DS    2X                      SAVE AREA FOR ERROR\nAPPLSTAT DC    X'0'                    FOR RPL FDBK FIELD\n*                                      ACTION CODES\n*        INTERNAL FLAG BYTES\nFLAGS    DS    X                       FLAG BYTE\n*\nLOGOFF   EQU   X'80'                   LOGOFF COMMAND ISSUED\nRELOPND  EQU   X'40'                   RELEASE DEVICE, THEN\n*                                      ATTEMPT TO RECONNECT\n*                                      VIA OPNDST\nBADEVICE EQU   X'20'                   PROBLEM WITH DEVICE\nFIRSTSND EQU   X'08'                   FIRST SEND TO TERMINAL\nCLEARSCR EQU   X'04'                   RECEND ISSUING CLEAR SCREEN\nLUSTATE  EQU   X'02'                   LUSTAT PROCESSING FOR TERMINAL\nSIMLOG   EQU   X'01'                   CLSDST(PASS) FAILED => MUST\n*                                      ISSUE CLSDST(RELEASE) BEFORE\n*                                      CONTINUING WITH SIMLOGON\n         SPACE 1\nEXITFLAG DS    X                       FLAG INDICATING WHICH EXITS\n*                                      HAVE BEEN ENTERED.\nLOGONEX  EQU   X'80'                   ENTERED THE LOGON EXIT\nRECEX    EQU   X'40'                   ENTERED THE READEND EXIT\nPASSEX   EQU   X'20'                   ENTERED THE CLSDST(PASS) EXIT\nSENDEX   EQU   X'10'                   ENTERED THE WRITE EXIT\nRELREQEX EQU   X'08'                   ENTERED THE RELREQ EXIT\nLOSTEX   EQU   X'04'                   ENTERED THE LOSTERM EXIT\nCLOSEX   EQU   X'02'                   ENTERED THE CLSDST(RELEASE)EXIT\nOPENEX   EQU   X'01'                   ENTERED THE OPNDST EXIT\n         SPACE 1\nEXITFLG2 DS    X                       2ND FLAG INDICATING WHICH EXITS\n*                                      HAVE BEEN ENTERED.\nOPNACQX  EQU   X'80'                   ENTERED THE OPNDST(ACQUIRE) EXIT\n         SPACE 1\nMFLAGS   DS    X                       FLAG BYTE FOR CURRENT VTAM MACRO\nOPNDSPEC EQU   X'80'                   OPNDST(SPEC) IN PROGRESS\nINQAPPST EQU   X'40'                   INQUIRE(APPSTST) IN PROGRESS\nSENDING  EQU   X'20'                   WRITE IN PROGRESS\nRECA     EQU   X'10'                   READ(ANY) IN PROGRESS\nSMLOGON  EQU   X'08'                   SIMLOGON ISSUED AFTER CLSDST\nINTRPRT  EQU   X'04'                   INTRPRET IN PROGRESS\nCLSDST   EQU   X'02'                   CLSDST IN PROGRESS\nLUSEND   EQU   X'01'                   LUSTAT RESPONSE SENT\n         SPACE 1\nMFLAGS2  DS    X                      FLAG BYTE2 FOR CURRENT VTAM MACRO\nINQSESS  EQU   X'80'                   INQUIRE(SESSPARM) IN PROGRESS\n         SPACE 1\nMACFLAGS DS    X                       INDICATE MACROS CALLED FLAG 1\nCLSREL   EQU   X'80'                   WILL DO CLSDST(RELEASE)\nOPNSPEC  EQU   X'40'                   WILL DO OPEN(SPEC)\nSIMLGON  EQU   X'20'                   SIMLOGON AFTER CLSDST\nINTAPPID EQU   X'10'                   WILL DO INTERP (APPLID)\nINQAPPS  EQU   X'08'                   WILL DO INQUIRE(APPSTAT)\nCLOSPASS EQU   X'04'                   WILL DO CLSDST(PASS)\nSENDASY  EQU   X'02'                   WILL DO SEND ASY\nOPNDACQ  EQU   X'01'                   WILL DO OPNDST(AQUIRE)\n         SPACE 1\nMACFLAG2 DS    X                       INDICATE MACROS CALLED FLAG 2\nINQSES   EQU   X'80'                   WILL DO INQUIRE(SESSPARM)\n         SPACE 1\nDATASEQL DS    X                       X-LATED DATA SEQ-LENGTH\nSPACWORK DS    0D            EXTRA SPACE                         92300\nA$SAVE   DS    3F            SAVE AREA FOR SVC 249 CALL          88207\n         PRINT GEN                                               88179\n         AIF   ('&LOCAL' NE 'PID').NOSVCR0                       92300\nA$SVCRB  A$SVCRB DSECT=NO                                        88179\n         AGO   .NOSVCRB                                          91195\n.NOSVCR0 ANOP  ,             DEFINE (MISSING) FLAG BITS          91195\nA$USFCIC EQU   0               NO CICS RESTRICTION               91195\nA$USFEXH EQU   0               NO EXHIBIT RESTRICTION            91195\nA$USFNET EQU   0               NO NETWORK RESTRICTION            91195\nA$USFOTH EQU   0               NO OTHER RESTRICTIONS             91195\nA$USFTSO EQU   0               LET TSO LOGON HANDLE              91195\nA$USFWYL EQU   0               NO WYLBUR RESTRICTIONS            91195\nA$SERMSG DS    0F              ???                               91195\n.NOSVCRB ORG   SPACWORK      RE-USE DURING COMPRESSION           92300\nCOMPPARM DS    8A            COMP3270 PARM LIST                  90140\nCPOUTLEN DS    F             OUTPUT LENGTH                       90140\nCPINLEN  DS    F             INPUT LENGTH                        90140\nCPBUFLEN DS    F             BUFFER SIZE                         90140\nOPFUN    DS    X             REQUESTED FUNCTIONS                 90140\nOPFSF    EQU   X'80'           INSERT PROT. SF IF NO SF IN LINE 2\nOFNCMP   EQU   X'40'           BYPASS BUFFER COMPRESSION, ETC.   90140\nOFNCOL   EQU   X'20'           BYPASS COLOR SUBSTITUTION         90140\nOFYESC   EQU   X'10'           BUFFER MAY CONTAIN ESCAPE (BTAM)  90140\nOFYCCW   EQU   X'08'           BUFFER CONTAINS CCW               90140\nOFYWCC   EQU   X'04'           BUFFER CONTAINS WCC/PCC           90140\nOPADD    DS    X             ADDRESSING MODE                     90140\nOPA16    EQU   X'02'           USE 16-BIT ADDRESSING ONLY        90140\nOPA14    EQU   X'01'           14-BIT ADDRESSING SUPPORTED       90140\nOPCOL    DS    X             COLOR MODE                          90140\nOPSEVEN  EQU   X'07'           7-COLOR MODE                      90140\nOPBACK   EQU   X'70'           BACKGROUND COLOR AVAILABLE        90140\nOPHIGH   DS    X             EXTENDED HIGH-LIGHTING              90140\n*PSEVEN  EQU   X'07'           ALL EXTENDED HIGH-LIGHTING        90140\nOPMISC   DS    X             MISCELLANEOUS OPTIONS               90140\nOPFVAL   EQU   X'80'           FIELD VALIDATION SUPPORTED        90140\nOPFOUT   EQU   X'40'           FIELD OUTLINING                   90140\nOPSEQLEN EQU   *-COMPPARM    LENGTH TO CLEAR                     90140\n         ORG   ,             USE LARGER LENGTH                   90140\n         PRINT NOGEN                                             88179\n         SPACE 1\nWORKRPLA EQU   *-WORKSPAC              USED TO CLEAR OUT WORKAREA\n         TITLE '*********  N E T S O L  -  SYNCHRONOUS RPL + NIB + WA'\n***********************************************************************\n*        THE FOLLOWING RPL IS USED FOR ALL SYNCHRONOUS COMMANDS       *\n***********************************************************************\n         SPACE 1\nNETSOL70 CSECT ,\n         PRINT &PRTSYS                                           85234\n         DS    0D\n         DC    CL8'SYNCHRPL'\n         SPACE 1\nSYNCHRPL RPL  ACB=ACB,OPTCD=(SYN),                                     *\n               AM=VTAM\n         ORG   ,\n***********************************************************************\n*        THE FOLLOWING NIB IS USED FOR ALL SYNCHRONOUS OPERATIONS     *\n*        REQUIRING A NIB.                                             *\n***********************************************************************\n         SPACE 1\n         DC    0D'0',CL8'SYNCHNIB'\nSYNCHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X\n               LISTEND=YES,LOGMODE=C' ',BNDAREA=0,                     *\n               RESPLIM=0     **IS THIS SAFE** ???                90199\n         DS    0D\nSYNWORK  DC    (WORKRPLA)X'00'         RPL WORK AREA\nSYNARG   EQU   SYNCHRPL+RPLARG-IFGRPL  DISPLACEMENT TO THE ARG\n*                                      WITHIN SYNCHRPL\nSYNFDB3  EQU   SYNCHRPL+RPLFDB3-IFGRPL DISPLACEMENT TO FBD3\n*                                      IN SYNCHRPL'S WORKAREA\nSRPLEXT1 EQU   SYNCHRPL+RPLEXTD1-IFGRPL DISPLACEMENT TO 'NIB@\n*                                      IN ARG FIELD' BIT\nSYNUSFLD EQU   SYNCHRPL+RPLUSFLD-IFGRPL DISPLACEMENT TO RPL USER FIELD\n*                                      FOR USE BY ERROR EXIT ROUTINE\n         SPACE 2\n***********************************************************************\n*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE SYNCHRONOUS  *\n*        RPLS. IT IS NOT ITSELF USED IN ANY MACROS       DC18203      *\n***********************************************************************\n         SPACE 1\n         DS    0D                                              DC18203\n         DC    CL8'FRSYNRPL'                                   DC18203\nFRSYNRPL RPL   ACB=ACB,AM=VTAM,OPTCD=(SYN)\nFRSYNL   EQU   *-FRSYNRPL    LENGTH OF SYN RPL FOR REFRESH     DC18203\n         SPACE 2                                                 90120\n***********************************************************************\n*        SETLOGON RPL - A SEPARATE RPL IS NECESSARY BECAUSE           *\n*         THE LOGON EXIT CAN BE DRIVEN BEFORE THE SETLOGON            *\n*         COMPLETES.                                                  *\n***********************************************************************\n         SPACE 2\n         DS    0D\n         DC    CL8'LOGONRPL'\n         SPACE 1\nSETLRPL  RPL   ACB=ACB,OPTCD=(SYN),                                    *\n               AM=VTAM\nSETNIB   DC    (8+NIBLNIB)X'00'        NIB IN IFGRPLX DSECT\nSETWORKA DC    (WORKRPLA)X'00'         WORKAREA IN IFGRPLX DSECT\n         SPACE 2                                                 87131\n***********************************************************************\n*        THE FOLLOWING NIB IS USED TO REFRESH THE NIB IN THE          *\n*        ASYNCHROUS RPL. IT ITSELF IS NOT USED IN ANY MACRO.          *\n***********************************************************************\n         SPACE 2\n         DS    0D\n         DC    CL8'FRESHNIB'\n         SPACE 1\nFRESHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X\n               LISTEND=YES,LOGMODE=C' ',BNDAREA=0,                     *\n               RESPLIM=16    AVOID 14,44 ERRORS (?)              90199\n         SPACE 2                                                 87131\n***********************************************************************\n*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE ASYNC        *\n*        RPLS IN THE RPL CSECT.  IT IS NOT ITSELF USED IN ANY         *\n*        MACRO.                                                       *\n***********************************************************************\n         SPACE 2\n         DS    0D\n         DC    CL8'FRESHRPL'\n         SPACE 1\nFRESHRPL RPL   ACB=ACB,                                                X\n               AM=VTAM,                                                X\n               OPTCD=(ASY)\n         TITLE '*********  N E T S O L  -  INITIALIZATION CODE'  86145\n***********************************************************************\n*        THIS CODE WILL MOVE THE CONTENTS OF NSNAME              86012\n*        INTO MESSAGE 12 FOR EACH OF THE SUPPORTED DEVICES TO ALLOW   *\n*        FOR EASY VISUAL IDENTIFICATION OF THE TEST VERSION OF NETSOL.*\n***********************************************************************\n         USING OPENIDS,R7    BASE SET BY CALLER                  86145\nOPENIDS  L     R14,=AL4(S32NSN12)      3270 SCREEN START         86012\n         L     R15,=AL4(S3ENSN12)      UPDATE 3270 EXTENDED      86012\n         L     R1,=AL4(S37NSN12)       UPDATE 3767               86012\n         L     R2,=A(MD5NSN12)         UPDATE MODEL 5 SCREEN     88206\n         ICM   R3,15,PSAATCVT-PSA   ANY VTAM UP ?                86012\n         BZ    NOATCVT       NO ?                                86012\n         CLI   0(R3),C'V'    VERSION ID ?                        86012\n         BNE   NOATCVT       NO                                  86012\n         MVC   0(9,R14),=C'VTAM V?R?'                            86012\n         CLI   1(R3),C'X'    NEW 'VX' PREFIX ?                   92363\n         BE    OPENID24                                          92363\n         CLI   1(R3),C'T'    OLD 'VT' PREFIX ?                   90094\n         BE    OPENID24      YES; IS VT##                        90094\n         BCTR  R3,0          ELSE IS V###                        90094\nOPENID24 MVC   VTAMVERL,2(R3)  SAVE VERSION # FOR CODE TESTS     92221\n         MVC   6(1,R14),2(R3)  COPY VERSION NUMBER               86012\n         MVC   8(1,R14),3(R3)  COPY RELEASE NUMBER               86012\n         MVC   0(9,R15),0(R14)  COPY TO OTHER TYPE SCREEN        86012\n         MVC   0(9,R1),0(R14)  COPY TO 3767 LINE                 86012\n         MVC   0(9,R2),0(R14)  MODEL 5                           88206\n         LA    R0,12         SET INCREMENT                       88206\n         AR    R14,R0        SKIP OVER IT                        86012\n         AR    R15,R0                                            86012\n         AR    R1,R0                                             86012\n         AR    R2,R0         ADVANCE MODEL 5 POINTER             88206\nNOATCVT  MVC   0(8,R14),NSNAME+1                   MSG 12        86012\n         MVC   0(8,R15),NSNAME+1                   MSG 12        86012\n         MVC   0(8,R1),NSNAME+1                   MSG 12\n         MVC   0(8,R2),NSNAME+1                                  88206\n         L     R14,=AL4(S32NSN12)      3270 SCREEN START         86065\n         L     R15,=AL4(S3ENSN12)      UPDATE 3270 EXTENDED      86065\n         L     R2,=AL4(MD5NSN12)       MODEL 5                   88206\n         MVC   S32NSN13-S32NSN12(30,R14),0(R14)  COPY TO MSG 13  86065\n         MVC   S3ENSN13-S3ENSN12(30,R15),0(R15)                  86065\n         MVC   MD5NSN13-MD5NSN12(30,R2),0(R2)                    88206\n         L     R14,=AL4(S32NSN13)      3270 SCREEN START         88179\n         L     R15,=AL4(S3ENSN13)      UPDATE 3270 EXTENDED      88179\n         L     R2,=AL4(MD5NSN13)                                 88206\n         MVC   S32NSN20-S32NSN13(30,R14),0(R14)  COPY TO MSG 13  88179\n         MVC   S3ENSN20-S3ENSN13(30,R15),0(R15)                  88179\n         MVC   MD5NSN20-MD5NSN13(30,R2),0(R2)                    88206\n         SPACE 1                                                 86012\n         L     R3,CVTPTR     GET THE CVT                         86012\n         L     R3,CVTSMCA-CVTMAP(,R3)  GET THE SMCA TABLE        86012\n         L     R1,=A(S32SID12)                                   86012\n         USING S32SID12,R1    DECLARE IT                         86012\n         MVC   S32SID12(4),16(R3)  COPY THE SMCA ID              86012\n         MVC   S32SID13(4),16(R3)                                86065\n         L     R14,=A(S32SID20)                                  88179\n         MVC   0(L'S32SID12,R14),S32SID12                        88179\n         L     R1,=A(S3ESID12)                                   88172\n         USING S3ESID12,R1                                       86065\n         MVC   S3ESID12(4),16(R3)                                86012\n         MVC   S3ESID13(4),16(R3)                                86065\n         L     R14,=A(S3ESID20)                                  88179\n         MVC   0(L'S3ESID12,R14),S3ESID12                        88179\n         L     R1,=A(S37SMC12)                                   86065\n         MVC   0(4,R1),16(R3)                                    86065\n         MVC   S37SMC20-S37SMC12(4,R1),16(R3)                    88220\n         L     R1,=A(MD5SID12)                                   88206\n         USING MD5SID12,R1                                       88206\n         MVC   MD5SID12(4),16(R3)                                88206\n         MVC   MD5SID13(4),16(R3)                                88206\n         L     R14,=A(MD5SID20)                                  88206\n         MVC   0(L'MD5SID12,R14),MD5SID12                        88206\n         DROP  R1                                                86012\n         ICM   R0,15,@MODETAB  RECURSION ?                       88220\n         BNZ   OPENIDNL      YES; KEEP OLD ONE                   88220\n         LOAD  EP=ISTINCLM,ERRET=OPENIDNL                        88213\n         ST    R0,@MODETAB   SAVE TABLE ADDRESS                  88213\nOPENIDNL BR    R6            RETURN TO CALLER                    86145\n         SPACE 1                                                 86145\n         LTORG ,                                                 86145\n         TITLE '*********  N E T S O L  - READ INITIALIZATION COMMANDS'\n***********************************************************************\n*                                                                     *\n*    READINIT PROCESSES THE NETSOL COMMANDS IN THE SYSIN FILE.        *\n*    COMMANDS WHICH MAY BE PLACED IN THIS FILE ARE FLAGGED            *\n*    WITH 'CMDINIT' IN THEIR CMD TABLE ENTRY.                         *\n*                                                                     *\n*    TO ALLOW COMMAND PROCESSING ROUTINES TO BE INDEPENDENT OF THEIR  *\n*    SOURCE, ALL COMMAND PROCESSORS ASSUME A DDT,TTE AND ASYNC RPL    *\n*    AVAILABLE FOR THEIR USE. THEREFORE, THESE CONTROL BLOCKS HAVE    *\n*    BEEN SET UP FOR READINIT.                                        *\n*                                                                     *\n*    INPUT : R5  - A(ASYNC RPL)                                       *\n*            R13 - A(SAVE AREA)                                       *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : REGISTERS ARE UNCHANGED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 85235\n         USING READINIT,R8                                       88179\nREADINIT STM   R14,R12,12(R13)         SET\n         ST    R13,RPLSAVE+4             UP\n         LA    R1,RPLSAVE                  SAVE\n         ST    R1,8(,R13)                    AREA\n         LR    R13,R1                          CHAIN\n         SPACE 1\n*        OPEN SYSIN AND SYSOUT FILES. NETSOL WILL CONTINUE EXECUTION\n*        EVEN WITH ERRORS IN THE INIT FILE.\n         SPACE 1\n         OPEN  (SYSINDCB,(INPUT),SYSOUDCB,(OUTPUT)) OPEN FILES\n         TM    SYSINDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSIN OPEN?\n         BZ    DCBOSYSI                           NO => ERROR MSG\n         TM    SYSOUDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSOUT OPEN?\n         BNZ   RIOPENOK                           YES => BR TO CONTINUE\n         MVC   DCBMSG+12(6),=CL6'SYSOUT'  MOVE\n         LA    R14,PUTDUMMY  GET DUMMY 'PUT' ROUTINE             88179\n         STCM  R14,7,SYSOUDCB+DCBPUTA-IHADCB                     88179\n         B     *+10                        DDNAME\nDCBOSYSI MVC   DCBMSG+12(6),=CL6'SYSIN '      TO OPERATOR MSG\n         WTO   MF=(E,DCBMSG)             LOG ERROR MESSAGE ON SYSLOG\n         TM    SYSINDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSIN ?        88179\n         BNZ   RIOPENOK      YES; READ IT ANYWAY                 88179\n         B     HITEST        CHECK FOR NEWS DATA                 88179\n         SPACE 1\n*        SET UP RPL,TTE AND DDT LINKS FOR INIT\n         SPACE 1\nRIOPENOK OI    UFLAGS,INIT               FLAG PROCESSING INITIALIZATION\n         LA    R3,TTEDUMMY               LOAD A(DUMMY TTE FOR INIT)\n         ST    R3,RPLUSFLD               SET UP RPL USER PTR\n         MVI   TERMFLG3,TFLON+TPRIVY  MAKE SYSIN PRIVILEGED      88179\n         L     R9,=A(DDTSYSIN)           LOAD A(DDT FOR INIT)   85327\n         ST    R9,TERMDDT                SAVE IN TTE\n         USING DDT,R9         DECLARE IT                         88179\n         SPACE 1\n*        PROCESS NETSOL COMMANDS FROM THE SYSIN FILE\n         SPACE 1\nREADLOOP LA    R6,IOAREA                 LOAD A(IO BUFFER)\n         GET   SYSINDCB,(R6)             READ CMD FROM SYSIN FILE\nREADNEX2 PUT   SYSOUDCB,(R6)             ECHO CMD TO SYSOUT FILE\n         SPACE 1                                                 90344\n***********************************************************************\n*                                                                     *\n*        CONTROL CARDS MAY BE SELECTED BY CPU ID (SMCA ID) :          *\n*                                                                     *\n*        PLACE CPU= IN COLUMN 2                                       *\n*              CPU= RESETS SELECTION AND ACCEPTS ALL CARDS            *\n*              CPU=SYS1SYS2SYS3  SKIPS CARDS EXCEPT ON SYSTEMS 1-3    *\n*              CPU=SYS5   SKIPS SUCCESSIVE CARDS EXCEPT ON SYSTEM 5   *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 90344\n         CLC   =C'CPU=',1(R6)  CHECK FOR CPU SPECIFIC CARDS      90344\n         BNE   READNCPU      NO; CONTINUE NORMALLY               90344\n         CLI   5(R6),C'A'    CPU= NON-ALPHAMERIC ?               90344\n         BL    READNCPU      YES; TREAT AS GENERAL MATCH         90344\n         L     R14,CVTPTR    GET THE CVT                         90344\n         LA    R15,5(,R6)    POINT TO FIRST CPU ID               90344\n         LA    R0,8          SET FOR MAXIMUM SUPPORTED           90344\n         L     R14,CVTSMCA-CVT(,R14)  POINT TO SMCA WORK AREA    90344\nREADTCPU CLC   0(4,R15),16(R14)   COMPARE CPU= TO SMCASID        90344\n         BE    READNCPU      MATCH; PROCESS THIS AND FOLLOWING   90344\n         LA    R15,4(,R15)   TRY NEXT ENTRY                      90344\n         CLI   0(R15),C','   COMMA SEPARATOR ?                   90344\n         BNE   *+8           NO                                  90344\n         LA    R15,1(,R15)   SKIP IT, TOO                        90344\n         BCT   R0,READTCPU                                       90344\nREADGCPU GET   SYSINDCB,(R6)     ELSE GET ANOTHER CARD           90344\n         CLC   =C'CPU=',1(R6) ANOTHER SELECTION CARD ?           90344\n         BE    READNEX2      YES; EXAMINE IT                     90344\n         MVI   0(R6),C'\u00ac'    SHOW CARD REJECTED                  90344\n         PUT   SYSOUDCB,(R6)  ECHO THE CARD                      90344\n         B     READGCPU      AND SKIP TO NEXT                    90344\n         SPACE 1                                                 90344\nREADNCPU DS    0H            MATCHING CPU FOUND, OR NO CPU CARDS 90344\n         CLI   0(R6),C'*'    COMMENTS CARD ONLY ?                86012\n         BE    READLOOP      YES, SKIP (SUPPORT ZAP MAINTENANCE) 86012\n         CLI   0(R6),C' '    POSSIBLY ALL BLANK ?                86012\n         BNE   READLOON      NO                                  86012\n         CLC   1(70,R6),0(R6)  MOSTLY BLANK ?                    86012\nREADLOON LA    R2,72           TEXT SANS SEQUENCE NUMBERS        87133\n         B     INTRPRET                  BR TO EDIT COMMAND\n         SPACE 1\n*        RETURN FROM CMD PROCESSING.\n*        R0 CONTAINS MSG INDEX FOR OUTPUT MSG\n         SPACE 1\nRIPUTMSG LR    R1,R0                   LOAD INDEX INTO R1\n         SLL   R1,2                    4 * (INDEX - 1)\n*                                      = DISPLACEMENT OF MESSAGE +4\n         L     R2,DDTMSGTB-4(R1)       POINT TO MSG. ENTRY IN TABLE\n         LH    R1,0(,R2)               PICK UP MSG LENGTH\n*        MOVE MESSAGE TO OUTPUT BUFFER AND WRITE TO SYSOUT\n         MVI   IOAREA,X'40'            INITIALIZE BUFFER\n         MVC   IOAREA+1(79),IOAREA       WITH BLANKS\n         BCTR  R1,0                    MOVE MESSAGE\n         EX    R1,RIEX1                  TO OUTPUT BUFFER\n         PUT   SYSOUDCB,IOAREA         WRITE MESSAGE TO SYSOUT FILE\n         B     READLOOP                BR TO GET NEXT CMD\n         SPACE 1\n*        END OF DATA REACHED ON SYSIN FILE\n         SPACE 1\nEODSYSIN TM    UFLAGS,INITERR          ERROR WHILE PROCESSING CMD FILE\n         BNO   RICLOSE                 NO => CONTINUE\n         WTO   MF=(E,INITEMSG)         YES => LOG ERROR TO OPERATOR\nRICLOSE  CLOSE (SYSINDCB)    CLOSE SYSIN\n         FREEPOOL SYSINDCB                                       88179\n         NI    UFLAGS,X'FF'-INIT-INITERR  END OF INIT PROCESSING 90156\n         SPACE 1\n*        READ NEWS DATA\nHITEST   DEVTYPE NEWSDCB+DCBDDNAM-IHADCB,IOAREA                  88179\n         BXH   R15,R15,HIDONE                                    88179\n         OPEN  (NEWSDCB,INPUT)  OPEN THE NEWS                    88179\n         TM    NEWSDCB+DCBOFLGS-IHADCB,DCBOFOPN  OPEN ?          88179\n         BZ    HIDONE        NO; SKIP OUT                        88179\n         L     R2,=A(NEWSTEXT)  POINT TO THE BUFFER              88179\n         PUT   SYSOUDCB,(R2)  WRITE A BLANK LINE                 88179\n         LA    R2,80(,R2)    POINT TO VARIABLE TEXT PROPER       88179\n         PUT   SYSOUDCB,(R2)  WRITE THE HEADER                   88179\n         LA    R3,23         NUMBER OF LINES                     88179\nHILOOP   GET   NEWSDCB,(R2)  READ A NEWS LINE                    88179\n         PUT   SYSOUDCB,(R2)  ECHO THE LINE                      88179\n         CLI   75(R2),C'0'   SEQUENCE FIELD ?                    88179\n         BL    HILOUP        NO                                  88179\n         MVC   72(8,R2),=CL8' '  BLANK IT OUT                    88179\nHILOUP   LA    R2,80(,R2)                                        88179\n         BCT   R3,HILOOP                                         88179\nHIFEND   CLOSE (NEWSDCB)                                         88179\n         FREEPOOL NEWSDCB                                        88179\nHIDONE   TM    SYSOUDCB+DCBOFLGS-IHADCB,DCBOFOPN                 88179\n         BZ    RIEXIT                                            88179\n         CLOSE (SYSOUDCB)                                        88179\n         FREEPOOL SYSOUDCB                                       88179\n         SPACE 1\nRIEXIT   L     R13,4(,R13)             RESTORE\n         LM    R14,R12,12(R13)           REGISTERS\nPUTDUMMY BR    R14                         AND RETURN\n         SPACE 2\nRIEX1    MVC   IOAREA(0),2(R2)         MOVE MSG TO OUTPUT BUFFER 86012\n         SPACE 1\nSYSINDCB DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EODSYSIN,MACRF=GM     88179\n         SPACE 1\nNEWSDCB  DCB   DDNAME=NEWS,DSORG=PS,EODAD=HIFEND,MACRF=GM        88179\n         SPACE 1\nSYSOUDCB DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=F\n         SPACE 1                                                 88179\n         LTORG ,                                                 88179\n         DROP  R8,R9                                             88179\n         TITLE '*********  N E T S O L  - SETRANGE COMMAND'      88185\n***********************************************************************\n*                                                                     *\n*    SETRANGE SETS UP THE AUTOMATIC LOGON DEFINITIONS FOR A RANGE     *\n*    OF NODES.                                                        *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        SETRANGE LOWNODE/HIGHNODE <LOGON> <UNLOCK> <APPLID text>     *\n*                 APPLID - FORCES TERMINAL TO SPECIFIED APPLICATION   *\n*                 LOGON  - REQUIRES USER LOGON BEFORE ACCESS     88185\n*                 UNLOCK - UNLOCKS THE DEVICE (SYSTEMS PRIVIES)       *\n*                                                                     *\n*    INPUT : NO PARAMETERS                                            *\n*                                                                     *\n*   OUTPUT : R0  - INDEX INTO DDT MSG TABLE                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                                 88185\nSETRANGE ST    R8,20+8*4(,R13)  SAVE BASE REGISTER               88185\n         BALR  R8,0          MAKE LOCAL BASE                     88185\n         USING *,R8          DECLARE IT                          88185\n         USING IFGRPL,PTRRPL           => R P L                  88185\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY   88185\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE 88185\n         BAL   R14,INITMSG4       OBTAIN MSG4  BUFFER            88185\n         SPACE 1                                                 88185\n*        GET NODENAME OF LOW RANGE                               88185\n         SPACE 1                                                 88185\n         LA    R1,SLNODE          LOAD A(OPTION LIST)            88185\n         BAL   R14,GETPARM        GO GET NODE NAME               88185\n         B     *+12               +0 - FOUND IT                  88185\n         B     SRXERR             +4 - NOT THERE                 88185\n         B     SRXERR             +8 - ERROR IN NODENAME         88185\n         MVC   NODENAME,=CL8' '   SAVE                           88185\n         LA    R14,NODENAME                                      88185\n         BCTR  R15,0                NODENAME                     88185\n         EX    R15,SRMVC              FOR LATER                  88185\n*        GET NODENAME OF HIGH RANGE                              88185\n         SPACE 1                                                 88185\n         LA    R1,SLNODE          LOAD A(OPTION LIST)            88185\n         BAL   R14,GETPARM        GO GET NODE NAME               88185\n         B     *+12               +0 - FOUND IT                  88185\n         B     SRXERR             +4 - NOT THERE                 88185\n         B     SRXERR             +8 - ERROR IN NODENAME         88185\n         MVC   NODENAM2,=8C'9'  PRESET FOR RANGE END             88185\n         LA    R14,NODENAM2                                      88185\n         BCTR  R15,0                NODENAME                     88185\n         EX    R15,SRMVC              FOR LATER                  88185\n         SPACE 1                                                 88185\n*        GET APPLID (OPTIONAL)                                   88185\n         SPACE 1                                                 88185\n         LA    R1,SLAPPL          LOAD A(OPTION LIST)            88185\n         BAL   R14,GETPARM        GO GET APPLID                  88185\n         B     *+12               +0 - FOUND APPLID              88185\n         B     SRTABLOK           +4 - APPLID NOT SPECIFIED      88185\n         B     SRXERR0            +8 - ERROR IN APPLID           86065\n         MVC   DLOGAPPL,=CL8' '   SAVE                           88185\n         LA    R14,DLOGAPPL                                      88185\n         BCTR  R15,0                APPLID                       88185\n         EX    R15,SRMVC              FOR LATER                  88185\n         LA    R15,1(,R15)        RESTORE APPLID LENGTH          88185\n         SPACE 1                                                 88185\n*        SCAN TERM TABLE FOR NODENAME                            88185\n         SPACE 1                                                 88185\nSRTABLOK STM   R3,R5,12(R13)      SAVE REGS                      88185\n         LM    R3,R5,TERMTEND  GET BXLE TABLE VALUES             88185\n         CR    R3,R5                   CHECK FOR NULL TABLE      88185\n         BH    SRENT1        NO ENTRIES AS R3 > R5 (INIT 0)      88185\n         SPACE 1                                                 88185\nSRTABLP  CLC   NODENAME(L'NODENAME+L'NODENAM2),TERMNAME COMPLETE MATCH?\n         BE    SRFNDTAB                YES, ALREADY IN THE TABLE 88185\n         TM    UFLAGS,INIT   INITIALIZATION PHASE ?              88185\n         BNZ   SRTABLX       YES; PERMIT OVERLAP                 88185\n         CLC   NODENAME,TERMNAME  RANGE OVERLAP ?                88185\n         BL    SRTABLN       NO                                  88185\n         CLC   NODENAME,TERMNAM2                                 88185\n         BNH   SRXERR        NODENAME ERROR                      88185\nSRTABLN  CLC   NODENAM2,TERMNAME  OTHER END OVERLAPS ?           88185\n         BL    SRTABLX       NO                                  88185\n         CLC   NODENAM2,TERMNAM2                                 88185\n         BNH   SRXERR        YES; TOO BAD                        88185\nSRTABLX  BXLE  R3,R4,SRTABLP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1                                                 88185\nSRENT1   L     R3,TERMTEND   GET THE FIRST ENTRY BACK            88185\n         SR    R3,R4         BACK-UP ONE                         88185\n         C     R3,TERMTABE   CONFLICT WITH PRIOR TABLE ?         88185\n         BH    SRNOENT       NO; ALLOCATE THIS ENTRY             88185\n         BAL   R7,SNOCCUR              YES => SHOULD NOT OCCUR   88185\n         SPACE 1                                                 88185\n*        THERE IS NO TTE ENTRY FOR THIS RANGE.                   88185\n         SPACE 1                                                 88185\nSRNOENT  L     R5,20(,R13)             RESTORE A(RPL)            88185\n         LTR   R15,R15                 APPLID SPECIFIED?         88185\n         BNZ   SRADDENT                YES => ADD ENTRY          88185\n         MVC   8(L'SLMSG1,R2),SLMSG1   NO  => MOVE ERROR MSG     86065\n         MVC   0(8,R2),NODENAME               MOVE NODENAME TO MSG\n         LM    R3,R5,12(R13)                  RESTORE REGS       88185\n         B     SRXERR                         BR TO ERROR EXIT   88185\n         SPACE 1                                                 88185\n*        ADD TERM TABLE ENTRY FOR SPECIFIED NODE NAME            88185\n*        IF NO APPLID WAS SPECIFIED, THEN THE LOGAPPL IS RESET IN TTE\n         SPACE 1                                                 88185\nSRADDENT ST    R3,TERMTEND   SAVE NEW TABLE START                88185\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY 88185\n         MVC   TERMNAME(L'TERMNAME+L'TERMNAM2),NODENAME    COPY NAMES\n         L     R8,=A(SLBASE) GET COMMON BASE                     88185\n         B     SLADDAPL-SLBASE(,R8)      ADD APPLID TO ENTRY     88185\n         SPACE 1                                                 88185\nSRFNDTAB L     R8,=A(SLBASE)  GET COMMON BASE                    88185\n         B     SLFNDTAB-SLBASE(,R8)  JOIN COMMON CODE            88185\n         SPACE 1                                                 88185\nSRXERR0  MVC   8(L'SRMSG0,R2),SRMSG0  INDICATE ERROR             86065\n         MVC   0(8,R2),NODENAME                                  86065\nSRXERR   TM    UFLAGS,INIT             CMD ISSUED DURING INITIALIZATION\n         BZ    *+8                     NO  => BR TO CONTINUE     88185\n         OI    UFLAGS,INITERR          YES => FLAG ERROR DURING INIT\n         SPACE 1                                                 88185\nSREXIT   LA    R0,MSG04                INDICATE MSG4  TO BE SENT 88185\n         L     R8,20+8*4(,R13)  RESTORE BASE                     88185\n         B     SENDMSG                 EXIT TO SEND MSG          88185\n         SPACE 2                                                 88185\nSRMVC    MVC   0(0,R14),0(R1)  SAVE PARAMETER                    88185\nSRMSG0   DC    C' SETRANGE COMMAND SYNTAX ERROR'                 88185\n         TITLE '*********  N E T S O L  - SETLOGON COMMAND'\n***********************************************************************\n*                                                                     *\n*    SETLOGON SETS UP THE AUTOMATIC LOGON APPLICATION FOR A NODE.     *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        SETLOGON NODENAME APPLID                                     *\n*        SETLOGON NODENAME UNLOCK - TO MAKE TERMINAL PRIVILEGED  86065\n*        SETLOGON NODENAME LOGON  - REQUIRE USERS TO LOG ON\n*                                                                     *\n*    IF THE APPLID IS OMITTED, THEN THE LOGAPPL RESET TO NOTHING.     *\n*                                                                     *\n*    INPUT : NO PARAMETERS                                            *\n*                                                                     *\n*   OUTPUT : R0  - INDEX INTO DDT MSG TABLE                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSETLOGON ST    R8,20+8*4(,R13)  SAVE LOCAL BASE\n         BALR  R8,0          MAKE LOCAL BASE                     88185\n         USING *,R8          DECLARE IT                          88185\nSLBASE   BAL   R14,INITMSG4       OBTAIN MSG4  BUFFER\n         SPACE 1\n*        GET NODENAME\n         SPACE 1\n         LA    R1,SLNODE          LOAD A(OPTION LIST)\n         BAL   R14,GETPARM        GO GET NODE NAME\n         B     *+12               +0 - FOUND IT\n         B     SLXERR             +4 - NOT THERE\n         B     SLXERR             +8 - ERROR IN NODENAME\n         MVC   NODENAME,=CL8' '   SAVE\n         BCTR  R15,0                NODENAME\n         EX    R15,SLEX1              FOR LATER\n         SPACE 1\n*        GET APPLID (OPTIONAL)\n         SPACE 1\n         LA    R1,SLAPPL          LOAD A(OPTION LIST)\n         BAL   R14,GETPARM        GO GET APPLID\n         B     *+12               +0 - FOUND APPLID\n         B     SLTABLOK           +4 - APPLID NOT SPECIFIED\n         B     SLXERR0            +8 - ERROR IN APPLID           86065\n         MVC   DLOGAPPL,=CL8' '   SAVE\n         BCTR  R15,0                APPLID\n         EX    R15,SLEX2              FOR LATER\n         LA    R15,1(,R15)        RESTORE APPLID LENGTH\n         SPACE 1\n*        SCAN TERM TABLE FOR NODENAME\n         SPACE 1\nSLTABLOK STM   R3,R5,12(R13)      SAVE REGS\n         LA    R1,NODENAME             PT @ NODENAME\n         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES\n         CR    R3,R5                   CHECK FOR NULL TABLE\n         BH    SLNOENT                 NO ENTRIES AS R3 > R5 (INIT 0)\n         SPACE 1\nSLTABLP  CLC   0(8,R1),TERMNAME        MATCH THE NAME ?\n         BE    SLFNDTAB                YES, ALREADY IN THE TABLE\n         BXLE  R3,R4,SLTABLP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1\n         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?\n         BL    SLNOENT                 NO => NODENAME NOT IN TABLE\n         BAL   R7,SNOCCUR              YES => SHOULD NOT OCCUR\n         SPACE 1\n*        THERE IS NO TTE ENTRY FOR THIS NODE.\n*        NO APPLID WILL BE TREATED AS AN ERROR IN THIS CASE.\n         SPACE 1\nSLNOENT  L     R5,20(,R13)             RESTORE A(RPL)\n         LTR   R15,R15                 APPLID SPECIFIED?\n         BNZ   SLADDENT                YES => ADD ENTRY\n         TM    UFLAGS,INIT   INITIALIZATION PROCESSING ?         88220\n         BZ    SLNOENTM      NO; FAIL                            88220\n         XC    DLOGAPPL,DLOGAPPL  CLEAR FOR SETRANGE OVERRIDE    88220\n         LA    R15,1         SET FALSE LENGTH                    88220\n         LA    R1,DLOGAPPL   SET FALSE LOCATION                  88220\n         B     SLADDENT      ADD AN ENTRY                        88220\nSLNOENTM MVC   8(L'SLMSG1,R2),SLMSG1   NO  => MOVE ERROR MSG     86065\n         MVC   0(8,R2),NODENAME               MOVE NODENAME TO MSG\n         LM    R3,R5,12(R13)                  RESTORE REGS\n         B     SLXERR                         BR TO ERROR EXIT\n         SPACE 1\n*        ADD TERM TABLE ENTRY FOR SPECIFIED NODE NAME\n*        IF NO APPLID WAS SPECIFIED, THEN THE LOGAPPL IS RESET IN TTE\n         SPACE 1\nSLADDENT ST    R3,TERMTABE             SAVE NEW TABLE END\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY\n         MVC   TERMNAME(8),NODENAME    COPY NAME ACROSS\n         B     SLADDAPL      ADD APPLID TO ENTRY\n         SPACE 1\nSLFNDTAB NI    TERMFLAG,255-LOGPROC    CLEAR LOGON STATUS FLAG   90135\n         L     R5,20(,R13)             RESTORE A(RPL)\n         LTR   R15,R15                 APPLID SPECIFIED?\n         BNZ   SLADDAPL                YES => GO ADD APPLID\n         XC    TERMDAPL,TERMDAPL       NO  => ZERO LOGON APPLID\n         MVC   0(L'SLMSG2,R2),SLMSG2          MOVE MSG TO OUT BUF\n         MVC   19(8,R2),NODENAME              ADD NODE NAME TO MSG\n         B     SLNDTTE                        BR TO END OF TTE PROCESS\n         SPACE 1\nSLADDAPL CLC   =CL8'UNLOCK',DLOGAPPL  SPECIAL REQUEST ?          86065\n         BE    SLADDUNL                                          88179\n         CLC   =C'LOGON',DLOGAPPL                                88179\n         BE    SLADDLON      SET LOGON REQUIRED                  88185\n         CLC   =C'LOCK ',DLOGAPPL                                88185\n         BE    SLADDLOK                                          88185\n         CLC   =C'NOLOG',DLOGAPPL                                88185\n         BNE   SLADDAPP      NO; NORMAL APPLICATION NAME         86065\n         NI    TERMFLG3,255-TFREQ  RESET LOGON REQUIRED          88185\n         B     SLCHANGE                                          88185\nSLADDLOK NI    TERMFLG3,TFREQ  LOGOFF; LOCK                      88185\n         B     SLCHANGE                                          88185\nSLADDLON OI    TERMFLG3,TFREQ  SHOW LOGON REQUIRED               88179\nSLCHANGE MVC   8(8,R2),=C' CHANGED'                              88179\n         MVC   0(8,R2),NODENAME                                  88179\n         B     SLNDTTE       MAKE MESSAGE                        88179\nSLADDUNL OI    TERMFLG3,TPRIVY+TFLON  SET PRIVILEGED TERMINAL    88179\n         MVC   8(L'SLMSG4,R2),SLMSG4  GET BASIC MESSAGE          86065\n         MVC   0(8,R2),NODENAME  INDICATE WHO                    86065\n         B     SLNDTTE\n         SPACE 1                                                 86065\nSLADDAPP MVC   TERMDAPL,DLOGAPPL       ADD LOGON APPLID TO TTE   86065\n         MVC   8(L'SLMSG3,R2),SLMSG3   MOVE OK MSG TO OUT BUF    86065\n         MVC   0(8,R2),TERMDAPL        ADD APPLID TO MSG\n         OC    0(8,R2),=CL8' '  UPPER CASE HEX ZEROES            88220\n         MVC   33(8,R2),TERMNAME       ADD NODE NAME TO MSG\n         TM    UFLAGS,INIT   IN INITIALIZATION PROCESSING ?      87131\n         BZ    SLNDTTE       NO; NO COMMAND CODE                 87131\n         SLR   R6,R6                                             87131\n         ICM   R6,3,GPDATAL  ANY MORE TEXT ?                     87131\n         BZ    SLNDTTE       NO                                  87131\n         L     R7,GPDATAP    GET TEXT START                      87131\nSLLDEBL  CLI   0(R7),C' '    LEADING BLANK ?                     87131\n         BNE   SLLDEBND      NO                                  87131\n         LA    R7,1(,R7)                                         87131\n         BCT   R6,SLLDEBL    GET RESIDUAL LENGTH                 87131\n         B     SLNDTTE       NO MORE TEXT                        87131\nSLLDEBND LA    R15,0(R6,R7)  GET END OF TEXT                     87131\nSLRDEBL  BCTR  R15,0         BACKSPACE                           87131\n         CLI   0(R15),C' '   TRAILING BLANK ?                    87131\n         BNE   SLRDEBND      NO                                  87131\n         BCT   R6,SLRDEBL    TRY AGAIN                           87131\n         B     SLNDTTE                                           87131\nSLPMSG   MVC   0(0,R1),0(R7) MOVE LOGON MESSAGE (PARM)           87131\nSLRDEBND GETMAIN R,LV=255,SP=2    GET A BUFFER FOR THE TEXT      87131\n         ST    R6,TERMLPLN   SET LOGON PARM LENGTH               87131\n         BCTR  R6,0          LENGTH FOR EXECUTE                  87131\n         ST    R1,TERMLPAD   SAVE MESSAGE ADDRESS                87131\n         EX    R6,SLPMSG     SAVE MESSAGE                        87131\n*        B     SLNDTTE       CONTINUE                            87131\n         SPACE 1\nSLNDTTE  LM    R3,R4,12(R13)           RESTORE REGS\n         B     SLEXIT                  BR TO EXIT\n         SPACE 1\nSLXERR0  MVC   8(L'SLMSG0,R2),SLMSG0  INDICATE ERROR             86065\n         MVC   0(8,R2),NODENAME                                  86065\nSLXERR   TM    UFLAGS,INIT             CMD ISSUED DURING INITIALIZATION\n         BZ    *+8                     NO  => BR TO CONTINUE\n         OI    UFLAGS,INITERR          YES => FLAG ERROR DURING INIT\n         SPACE 1\nSLEXIT   LA    R0,MSG04                INDICATE MSG4  TO BE SENT\n         L     R8,20+8*4(,R13)  RESTORE LOCAL BASE               88185\n         B     SENDMSG                 EXIT TO SEND MSG\n         SPACE 2\nSLEX1    MVC   NODENAME(0),0(R1)       SAVE NODENAME PARM\nSLEX2    MVC   DLOGAPPL(0),0(R1)       SAVE APPLID PARM\nSLMSG0   DC    C' SETLOGON COMMAND SYNTAX ERROR'                 86065\nSLMSG1   DC    C' NOT KNOWN TO NETSOL'                           86065\nSLMSG2   DC    C'DEFAULT APPLID FOR XXXXXXXX RESET'\nSLMSG3   DC    C' IS NOW LOGON APPLID FOR '                      86065\nSLMSG4   DC    C' NOW UNLOCKED'                                  86065\n         SPACE 1                                                 88185\n         LTORG ,                                                 88185\n         TITLE '*********  N E T S O L  -  SET/SHOW/KILL COMMANDS'\nTESTMSG  ST    R8,20+8*4(,R13)  SAVE FOR LOCAL BASE              88220\n         BALR  R8,0          MAKE LOCAL BASE                     88220\n         USING *,R8          DECLARE BASE                        88220\n         BAL   R14,INITMSG4  GET ERROR MESSAGE                   88220\n         XC    A$SAVE(8),A$SAVE  CLEAR WORK SPACE                88220\n         LA    R1,SLNUM      REQUEST MESSAGE NUMBER              88220\n         BAL   R14,GETPARM                                       88220\n         B     *+12          OK ?                                88220\n         B     SKXERR        FAIL                                88220\n         B     SKXERR        BAD                                 88220\n         BCTR  R15,0                                             88220\n         EX    R15,TTMPACK   PACK THE MESSAGE                    88220\n         CVB   R0,A$SAVE     MAKE DECIMAL                        88220\n         LTR   R0,R0         VALID ?                             88220\n         BNP   TTMERR        NO                                  88220\n         CH    R0,=Y(MSGMAX) VALID ?                             88220\n         BNH   SKEXM#        NO                                  88220\nTTMERR   MVC   0(14,R2),=C'INVALID NUMBER'                       88220\n         B     SKXERR        FAIL                                88220\nSLNUM    $GP   8,'MESSAGE NUMBER',GPNUM                          88220\nTTMPACK  PACK  A$SAVE(8),0(0,R1)  PACK MESSAGE NUMBER            88220\n         SPACE 1                                                 88220\nSETSET   DS    0H                                                88206\nSETSHOW  ST    R8,20+8*4(,R13)  SET LOCAL BASE                   88206\n         BALR  R8,0          MAKE LOCAL BASE                     88206\n         USING *,R8          DECLARE BASE                        88206\n         BAL   R14,INITMSG4  GET ERROR MESSAGE                   88206\n         MVC   0(4,R2),=C'OOPS'                                  88206\n         B     SKEXIT        QUIT UNTIL CODE ADDED               88209\n         SPACE 1                                                 88209\n*        KILL USER ID,  KILL TERM ID, OR  KILL ID                88209\n*                                                                88209\nSETKILL  ST    R8,20+8*4(,R13)  SET LOCAL BASE                   88206\n         BALR  R8,0          MAKE LOCAL BASE                     88206\n         USING *,R8          DECLARE BASE                        88206\n         BAL   R14,INITMSG4  GET ERROR MESSAGE                   88206\n         LR    R4,R2         CHANGE GLOBAL REGISTER              88209\n         MVC   NODENAME,=CL8' '  BLANK DESIRED NAME              88209\n         MVC   NODENAM2,NODENAME  PROPAGATE                      88209\n         STM   R3,R5,12(R13)   SAVE TTE AND RPL ADDRESSES        88209\nSETKILL1 LA    R1,SLNAME     POINT TO OPTION ENTRY               88209\n         BAL   R14,GETPARM   PARSE THE NEXT OPERAND              88209\n         B     *+12          OK                                  88209\n         B     SKXERR        MISSING                             88209\n         B     SKXERR        TOO LONG ?                          88209\n         BCTR  R15,0                                             88209\n         EX    R15,SKEX1     MOVE TO FIELD                       88209\n         SPACE 1                                                 88209\n         CLI   NODENAM2,C' '   SECOND PASS THROUGH HERE ?        88209\n         BNE   SETKILLB      NO; TEST WHICH                      88209\n         CLC   =C'TERM',NODENAME   KILL A TERMINAL ?             88209\n         BE    SETKILL2      YES; NEED SECOND OPERAND            88209\n         CLC   =C'USER',NODENAME   KILL A USER ?                 88209\n         BNE   SETKILLB      NO; TRY BOTH                        88209\nSETKILL2 MVC   NODENAM2(1),NODENAME  PRESERVE THE REQUEST TYPE   88209\n         B     SETKILL1      AND PARSE FOR NAME                  88209\nSETKILLB CLI   NODENAM2,C'U' KILL USER ONLY ?                    88209\n         BE    SETKILLU                                          88209\n         LM    R1,R3,TERMTABS  GET THE TERMINAL TABLE            88209\n         SR    R1,R2         RECOVER FROM EMPTY TABLE            88209\nSETKILTL BXH   R1,R2,SETKILTN  TERMINAL NOT FOUND                88209\n         CLC   NODENAME,TERMNAME-TERMTABL(R1)  SAME ID ?         88209\n         BNE   SETKILTL      NO; TRY NEXT ENTRY                  88209\n         LR    R3,R1         COPY DESIRED TTE                    88209\n         BAL   R14,UTERMOF   RESET PRIVILEGES AND LOGON          88209\n         AIF   ('&LOCAL' NE 'PID').NOKILL1                       92300\n         ICM   R1,15,TERMLOUD   LOCAL USER DATA ?                88209\n         BZ    SETKILTX      NO; DONE                            88209\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT SVC PARM ARE\n         MVC   A$SID,=C'A$RB'                                    88209\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,0,A$SAKEY+A$SBUILD)      88209\n*                            LOGOFF SESSIONS AND USER            88209\n         ST    R1,A$SBUFR    SET LOUD                            88209\n         LA    R1,A$SVCRB                                        88209\n         SVC   249           CANCEL SESSIONS; KEEP USER          88209\n.NOKILL1 ANOP  ,                                                 91195\nSETKILTX MVC   0(24,R4),=C'Terminal XXXXXXXX killed'             88209\n         MVC   9(8,R4),NODENAME                                  88209\n         B     SKEX35        TAKE NORMAL EXIT                    88209\nSETKILTN CLI   NODENAM2,C'T'  TERMINAL ONLY ?                    88209\n         BNE   SETKILLU      NO; LOOK FOR USER                   88209\n         MVC   0(27,R4),=C'Terminal XXXXXXXX not found'          88209\n         MVC   9(8,R4),NODENAME   IDENTIFY                       88209\n         B     SKEX35        AND QUIT                            88209\n         SPACE 1                                                 88209\nSETKILLU MVC   0(23,R4),=C'User XXXXXXXX not found'              88209\n         MVC   5(8,R4),NODENAME  ADD USER ID                     88209\n         AIF   ('&LOCAL' NE 'PID').NOKILL2                       92300\n         L     R14,CVTPTR    GET THE CVT                         88209\n         ICM   R14,15,CVTUSER-CVTMAP(R14)  LOCAL EXTENSION?      88209\n         BZ    SKEX35        NO                                  88209\n         LA    R9,UCLOUD-USERCVT-(A$LNEXT-A$LOUD)(R14) LINK-PTR  88209\nSETKILUL ICM   R9,15,A$LNEXT-A$LOUD(R9)  ANOTHER ?               88209\n         BZ    SKEX35        NO                                  88209\n         CLC   NODENAME,A$UUID-A$LOUD(R9)  SAME ID ?             88209\n         BNE   SETKILUL                                          88209\n         XC    A$SVCRB(A$SLENRB),A$SVCRB  CLEAR ACCT SVC PARM ARE\n         MVC   A$SID,=C'A$RB'                                    88209\n         MVC   A$SFCTN(3),=AL1(A$SFLOGF,0,A$SAKEY+A$SBUILD)      88209\n*                            LOGOFF SESSIONS AND USER            88209\n         ST    R9,A$SBUFR    SET LOUD                            88209\n         LA    R1,A$SVCRB                                        88209\n         SVC   249           CANCEL SESSIONS; KEEP USER          88209\n         MVC   14(9,R4),=C'killed   '                            88209\n         B     SETKILUL      TRY FOR ANOTHER                     88209\n.NOKILL2 B     SKEX35        NO CHAIN; NO MATCH                  91195\n         SPACE 1                                                 88209\nSKXERR   TM    UFLAGS,INIT                                       88209\n         BZ    *+8                                               88209\n         OI    UFLAGS,INITERR                                    88209\n         B     SKEXIT        TAKE NORMAL EXIT                    88209\n         SPACE 1                                                 88206\nSKEX35   LM    R3,R5,12(R13) RESTORE TTE AND RPL                 88209\nSKEXIT   LA    R0,MSG04      GET ERROR MESSAGE INDEX             88206\nSKEXM#   L     R8,20+8*4(,R13)  RESTORE OLD BASE                 88206\n         B     SENDMSG       SEND MESSAGE                        88206\nSKEX1    MVC   NODENAME(0),0(R1)   MOVE TERM OR USER ID          88209\n         SPACE 1                                                 88206\n         LTORG ,                                                 88206\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               270'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *\n***********************************************************************\nDDT3270  DS    0D\nS32EDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\nS32SENDA DC    A(S32COMP)         A(3270 SEND/COMPRESSION ROUTINE)\nS32TERMA DC    A(S32TID12,S32TID13,S32TID20)  TERM NAME FIELD ADDRESS\nS32TIMEA DC    A(S32TIM12,S32TIM13,S32TIM20)  TIME FIELD ADDRESSES\nS32M4OFS DC    A(S32M4OF)         A(USABLE BUFFER IN MSG 4)\nS32OFFST DC    AL2(S32M4OF+6-S32MSG04)  MSG OFFSET FOR INSERTED DATA\nS32M4L   DC    AL2(L'S32M4OF)     L(USABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 2\nS32MSGTB DS    0F\n         DC    A(S32MSG01)\n         DC    A(S32MSG02)\n         DC    A(S32MSG03)\n         DC    A(S32MSG04)\n         DC    A(S32MSG05)\n         DC    A(S32MSG06)\n         DC    A(S32MSG07)\n         DC    A(S32MSG08)\n         DC    A(S32MSG09)\n         DC    A(S32MSG10)\n         DC    A(S32MSG11)\n         DC    A(S32MSG12)\n         DC    A(S32MSG13,S32MSG14,S32MSG15,S32MSG16,S32MSG17)   86065\n         DC    A(S32MSG18,S32MSG01)  MSG 19 IS FAKE              87187\n         DC    A(S32MSG20)   LOGON SCREEN                        88179\n         SPACE 5                                                 90120\n*              DEVICE DEPENDENT TABLE FOR 3270 EXTENDED FUNCTION'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES     *\n*        THAT HAVE EXTENDED FUNCTION (I.E. COLOUR + SYMBOL SETS ).    *\n***********************************************************************\nDDT3270E DS    0D\nS3EEDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\nS3ESENDA DC    A(S3ESEND)         A(3270-EDS SEND ROUTINE)       90140\nS3ETERMA DC    A(S3ETID12,S3ETID13,S3ETID20) TERM NAME ADDRESSES 88179\nS3ETIMEA DC    A(S3ETIM12,S3ETIM13,S3ETIM20) TIME/DATE ADDRESSES 88179\nS3EM4OFS DC    A(S3EM4OF)         A(USABLE BUFFER IN MSG 4)\nS3EOFFST DC    AL2(S3EM4OF+6-S3EMSG04)  MSG OFFSET FOR INSERTED DATA\nS3EM4L   DC    AL2(L'S3EM4OF)     L(USABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 2\nS3EMSGTB DS    0F\n         DC    A(S3EMSG01)\n         DC    A(S3EMSG02)\n         DC    A(S3EMSG03)\n         DC    A(S3EMSG04)\n         DC    A(S3EMSG05)\n         DC    A(S3EMSG06)\n         DC    A(S3EMSG07)\n         DC    A(S3EMSG08)\n         DC    A(S3EMSG09)\n         DC    A(S3EMSG10)\n         DC    A(S3EMSG11)\n         DC    A(S3EMSG12)\n         DC    A(S3EMSG13,S3EMSG14,S3EMSG15,S3EMSG16,S3EMSG17)   86065\n         DC    A(S3EMSG18,S3EMSG01)  MSG 19 IS FAKE              87187\n         DC    A(S3EMSG20)   LOGON SCREEN                        88179\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               270 MODEL 5'                                      88206\n*****************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND   88206\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES\n*        RUNNING IN 27*132 FORMAT.  ( MODEL 5 )                  88206\n*****************************************************************\nDDTMDL5  DS    0D                                                88206\nMD5EDITA DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)     88206\nMD5SENDA DC    A(S3ESEND)         A(3270-EDS SEND ROUTINE)       90140\nMD5TERMA DC    A(MD5TID12,MD5TID13,MD5TID20)  TERM NAME FIELD ADD\nMD5TIMEA DC    A(MD5TIM12,MD5TIM13,MD5TIM20)  TIME FIELD ADDRESSE\nMD5M4OFS DC    A(MD5M4OF)         A(USABLE BUFFER IN MSG 4)      88206\nMD5OFFST DC    AL2(MD5M4OF+6-MD5MSG04)  MSG OFFSET FOR INSERTED D\nMD5M4L   DC    AL2(L'MD5M4OF)     L(USABLE BUFFER IN MSG 4)      88206\n*****************************************************************\n*        MESSAGE TABLE INDEX                                     88206\n*****************************************************************\n         SPACE 2                                                 88206\nMD5MSGTB DS    0F                                                88206\n         DC    A(MD5MSG01)                                       88206\n         DC    A(MD5MSG02)                                       88206\n         DC    A(MD5MSG03)                                       88206\n         DC    A(MD5MSG04)                                       88206\n         DC    A(MD5MSG05)                                       88206\n         DC    A(MD5MSG06)                                       88206\n         DC    A(MD5MSG07)                                       88206\n         DC    A(MD5MSG08)                                       88206\n         DC    A(MD5MSG09)                                       88206\n         DC    A(MD5MSG10)                                       88206\n         DC    A(MD5MSG11)                                       88206\n         DC    A(MD5MSG12)                                       88206\n         DC    A(MD5MSG13,MD5MSG14,MD5MSG15,MD5MSG16,MD5MSG17)   88206\n         DC    A(MD5MSG18,MD5MSG01)  MSG 19 IS FAKE              88206\n         DC    A(MD5MSG20)   LOGON SCREEN                        88206\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               767'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3767 TERMINALS.  *\n***********************************************************************\nDDT3767  DS    0D\nS37EDITA DC    A(S37EDIT)         A(3767 INPUT EDIT ROUTINE)\nS37SENDA DC    A(S37SEND)         A(3767 SEND ROUTINE)           86145\nS37TERMA DC    A(S37TID12,0,S37TID20)  TERMINAL ID               88220\nS37TIMEA DC    A(S37TIM12,0,0)    A(TIME FIELD IN MSG 12)        86065\nS37M4OFS DC    A(S37M4OF)         A(USABLE BUFFER IN MSG 4)\nS37OFFST DC    AL2(S37M4OF+6-S37MSG04)  MSG OFFSET FOR INSERTED DATA\nS37M4L   DC    AL2(L'S37M4OF)     L(USABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 2\nS37MSGTB DS    0F\n         DC    A(S37MSG01)\n         DC    A(S37MSG02)\n         DC    A(S37MSG03)\n         DC    A(S37MSG04)\n         DC    A(S37MSG05)\n         DC    A(S37MSG06)\n         DC    A(S37MSG07)\n         DC    A(S37MSG08)\n         DC    A(S37MSG09)\n         DC    A(S37MSG10)\n         DC    A(S37MSG11)\n         DC    A(S37MSG12)\n         DC    A(S37MSG13,S37MSG14,S37MSG15,S37MSG16,S37MSG17)   86065\n         DC    A(S37MSG18,S37MSG01)  MSG 19 IS FAKE              87187\n         DC    A(S37MSG20)   LOGON SOLICITATION                  88179\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR SX\n               YSIN FILE'\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN PROCESSING CMDS FROM THE SYSIN FILE.*\n***********************************************************************\nDDTSYSIN DS    0D\nSINEDITA DC    A(0)               A(SYSIN INPUT EDIT ROUTINE)\nSINSENDA DC    A(RIPUTMSG)        A(SYSIN SEND ROUTINE)\nSINTERMA DC    A(0,0,0)           A(TERMINAL FIELD IN MSG 12)    86065\nSINTIMEA DC    A(0,0,0)           A(TIME FIELD IN MSG 12)        86065\nSINM4OFS DC    A(SINM4OF)         A(USABLE BUFFER IN MSG 4)\nSINOFFST DC    AL2(SINM4OF+6-SINMSG04)  MSG OFFSET FOR INSERTED DATA\nSINM4L   DC    AL2(L'SINM4OF)     L(USABLE BUFFER IN MSG 4)\n***********************************************************************\n*        MESSAGE TABLE INDEX                                          *\n***********************************************************************\n         SPACE 2\nSINMSGTB DS    0F\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG04)         RESPONSE FOR INITIALIZATION CMDS\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG07)         FOR INVALID COMMANDS\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    8A(SINMSG00)                                      88179\n         TITLE '*********  N E T S O L  -  DEVICE DEPENDENT TABLE FOR OX\n               S CONSOLES'                                       88192\n***********************************************************************\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN OS CONSOLE COMMUNICATIONS.          *\n*            NOTE THAT 3767 MESSAGES ARE USED AS-IS.                  *\n***********************************************************************\nDDTCONS  DS    0D                                                88192\nCONEDITA DC    A(0)          NO INPUT EDIT                       88192\nCONSENDA DC    A(S37SEND)    A(CONSOLE WTO ROUTINE)              88192\nCONTERMA DC    A(S37TID12,0,0)    A(TERMINAL FIELD IN MSG 12)    88192\nCONTIMEA DC    A(S37TIM12,0,0)    A(TIME FIELD IN MSG 12)        88192\nCONM4OFS DC    A(CONM4OF)         A(USABLE BUFFER IN MSG 4)      88192\nCONOFFST DC    AL2(CONM4OF+6-CONMSG04)  MSG OFFSET FOR INSERTED DATA\nCONM4L   DC    AL2(L'CONM4OF)     L(USABLE BUFFER IN MSG 4)      88192\n         SPACE 1                                                 88192\nCONMSGTB DC    A(CONMSG01)                                       88192\n         DC    A(CONMSG02)                                       88192\n         DC    A(CONMSG03)                                       88192\n         DC    A(CONMSG04)                                       88192\n         DC    A(CONMSG05)                                       88192\n         DC    A(CONMSG06)                                       88192\n         DC    A(CONMSG07)                                       88192\n         DC    A(CONMSG08)                                       88192\n         DC    A(CONMSG09)                                       88192\n         DC    A(CONMSG10)                                       88192\n         DC    A(CONMSG11)                                       88192\n         DC    A(S37MSG12)                                       88192\n         DC    A(CONMSG13,CONMSG14,CONMSG15,CONMSG16,CONMSG17)   88192\n         DC    A(CONMSG18,CONMSG01)  MSG 19 IS FAKE              88192\n         DC    A(S37MSG20)   LOGON SOLICITATION                  88192\n         SPACE 1                                                 88192\nCONMSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=CON\nCONMSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE, REENTER'        88192\nCONMSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'\nCONMSG04 DC    YL2(CONEND04-*)                                   88192\nCONM4OF  DC    CL60' '\nCONEND04 EQU   *\nCONMSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88192\nCONMSG06 $MSG  C'BCSC106 CONNECTING TO APPLICATION XXXXXXXX'     88192\nCONMSG07 $MSG  C'BCSC107 XXXXXXXX NOT A VALID COMMAND'           88192\nCONMSG08 $MSG  C'BCSC108          IS NOT AVAILABLE'  OR LOGMODE INVALID\nCONMSG09 $MSG  C'BCSC109          NO LONGER ACCEPTING LOGONS'    88192\nCONMSG10 $MSG  C'BCSC110          NEVER ACCEPTING LOGONS'        88192\nCONMSG11 $MSG  C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'\nCONMSG13 $MSG  C'ESP VTAM SERVICE IS CLOSED AT THIS TIME'        92300\nCONMSG14 $MSG  C'CENTER CLOSED - ACCESS NOT PERMITTED NOW'       87187\nCONMSG15 $MSG  C'BCSC115 TERMINAL NOW UNLOCKED'                  86065\nCONMSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED'               86065\nCONMSG17 $MSG  C'BCSC117 PASSWORD UNLOCK REQUEST FAILED'         86065\nCONMSG18 $MSG  C'REQUEST IS NOT AUTHORIZED'                      87187\n         TITLE '*********  N E T S O L  -  MESSAGES FOR 3270'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2\n         $MODEL 2               SET 3270 MODEL NUMBER FOR 3270 MACROS\n         PRINT &PRTSYS                                           85234\n         SPACE 2\nS32MSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=3270\nS32MSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE; REENTER'        88206\nS32MSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS-DOMAIN RESOURCE'\nS32MSG04 $MSG  CL60' ',ML=S32M4OF                                88206\nS32MSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88206\n         SPACE 1\nS32MSG06 DC    YL2(S32END06-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (MDT)              SETUP WCC\n         $SBA  (1,1)              SET BUFFER ADDRESS\n         $SF   (PROT)             SET ATTRIBUTE BYTE\n         DC    C'BCSC106 CONNECTING TO APPLICATION '             86012\nS32M6APL DC    CL8'APPLID'                                       86012\nS32END06 EQU   *\n         SPACE 1\nS32MSG07 $MSG  C'BCSC107 XXXXXXXX NOT DEFINED TO VTAM'           88206\nS32MSG08 $MSG  C'BCSC108 XXXXXXXX IS NOT AVAILABLE'  OR LOGMODE INVALID\nS32MSG09 $MSG  C'BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS'    88206\nS32MSG10 $MSG  C'BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS'        88206\nS32MSG11 $MSG  C'BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS'\n         SPACE 1\nS32MSG12 $SCRN 12            DEFINE APPLICATION MENU             88220\nS32MSG13 $SCRN 13            SHOW CENTER CLOSED                  88220\n         SPACE 1                                                 86065\nS32MSG14 $MSG  C'BCSC114 CENTER CLOSED - ACCESS NOT PERMITTED NOW'\nS32MSG15 $MSG  C'BCSC115 PASSWORD ACCEPTED - TERMINAL UNLOCKED',WCC=\nS32MSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED',WCC=          88206\nS32MSG17 $MSG  C'BCSC117 PASSWORD UNLOCK FAILED'                 88206\nS32MSG18 $MSG  C'BCSC118 REQUEST IS NOT AUTHORIZED'              87187\n         SPACE 1                                                 88179\nS32MSG20 $SCRN 20            PROMPT FOR USER LOGON               88220\n         SPACE 5                                                 90120\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2\n         $MODEL 2               SET 3270 MODEL NUMBER FOR 3270 MACROS\n         PRINT &PRTSYS                                           85234\n         SPACE 1\nS3EMSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=327E\nS3EMSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE; REENTER'        88206\nS3EMSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS-DOMAIN RESOURCE'\nS3EMSG04 $MSG  CL60' ',ML=S3EM4OF                                88206\nS3EMSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88206\n         SPACE 1\nS3EMSG06 DC    YL2(S3EEND06-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (MDT)              SETUP WCC\n         $SBA  (1,1)              SET BUFFER ADDRESS\n         $SFE  ATTR=PROT,COL=GREEN\n         DC    C'BCSC106 CONNECTING TO APPLICATION '             86012\nS3EM6APL DC    CL8'APPLID'                                       86012\nS3EEND06 EQU   *\n         SPACE 1\nS3EMSG07 $MSG  C'BCSC107 XXXXXXXX NOT DEFINED TO VTAM'           88206\nS3EMSG08 $MSG  C'BCSC108 XXXXXXXX IS NOT AVAILABLE'  OR LOGMODE INVALID\nS3EMSG09 $MSG  C'BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS'\nS3EMSG10 $MSG  C'BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS'        88206\nS3EMSG11 $MSG  C'BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS'\n         SPACE 1\nS3EMSG12 $SCRN 12            DEFINE APPLICATION MENU             88220\nS3EMSG13 $SCRN 13            SHOW CENTER CLOSED                  88220\n         SPACE 1                                                 86065\nS3EMSG14 $MSG  C'BCSC114 CENTER CLOSED - ACCESS NOT PERMITTED NOW'\nS3EMSG15 $MSG  C'BCSC115 PASSWORD ACCEPTED - TERMINAL UNLOCKED',WCC=,CO*\n               L=GREEN                                           88206\nS3EMSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED',WCC=,COL=YELLOW\nS3EMSG17 $MSG  C'BCSC117 PASSWORD UNLOCK FAILED',COL=PINK        88206\nS3EMSG18 $MSG  C'BCSC118 REQUEST IS NOT AUTHORIZED'              88206\n         SPACE 1                                                 88179\nS3EMSG20 $SCRN 20            PROMPT FOR USER LOGON               88220\n         TITLE '*********  N E T S O L  -  MESSAGES FOR 3270'    88206\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2                                                 88206\n         $MODEL 5               SET 3270 MODEL NUMBER FOR 3270 MACROS\n         PRINT &PRTSYS                                           85234\n         SPACE 2                                                 88206\nMD5MSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=3270\nMD5MSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE; REENTER'        88206\nMD5MSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS-DOMAIN RESOURCE'\nMD5MSG04 $MSG  CL60' ',ML=MD5M4OF                                88206\nMD5MSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88206\n         SPACE 1                                                 88206\nMD5MSG06 DC    YL2(MD5END06-*)                                   88206\n         $IO   ERASE/ALT          SET 3270 COMMAND CODE          88206\n         $WCC  (MDT)              SETUP WCC                      88206\n         $SBA  (1,1)              SET BUFFER ADDRESS             88206\n         $SF   (PROT)             SET ATTRIBUTE BYTE             88206\n         DC    C'BCSC106 CONNECTING TO APPLICATION '             86012\nMD5M6APL DC    CL8'APPLID'                                       86012\nMD5END06 EQU   *                                                 88206\n         SPACE 1                                                 88206\nMD5MSG07 $MSG  C'BCSC107 XXXXXXXX NOT DEFINED TO VTAM'           88206\nMD5MSG08 $MSG  C'BCSC108 XXXXXXXX IS NOT AVAILABLE'  OR LOGMODE INVALID\nMD5MSG09 $MSG  C'BCSC109 XXXXXXXX NO LONGER ACCEPTING LOGONS'    88206\nMD5MSG10 $MSG  C'BCSC110 XXXXXXXX NEVER ACCEPTING LOGONS'        88206\nMD5MSG11 $MSG  C'BCSC111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS'\n         SPACE 1                                                 88206\nMD5MSG12 $SCRN 12,IO=ERASE/ALT  DEFINE APPLICATION MENU          88220\nMD5MSG13 $SCRN 13,IO=ERASE/ALT  SHOW CENTER CLOSED               88220\n         SPACE 1                                                 86065\nMD5MSG14 $MSG  C'BCSC114 CENTER CLOSED - ACCESS NOT PERMITTED NOW'\nMD5MSG15 $MSG  C'BCSC115 PASSWORD ACCEPTED - TERMINAL UNLOCKED',WCC=\nMD5MSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED',WCC=          88206\nMD5MSG17 $MSG  C'BCSC117 PASSWORD UNLOCK FAILED'                 88206\nMD5MSG18 $MSG  C'BCSC118 REQUEST IS NOT AUTHORIZED'              87187\n         SPACE 1                                                 88179\nMD5MSG20 $SCRN 20,IO=ERASE/ALT  PROMPT FOR USER LOGON            88220\n         SPACE 1                                                 88179\nNEWSTEXT DC    CL80'                             ESP News   '    88179\n         DC    CL80' '                                           88179\n         DC    CL80' No news available (no news is good news?)'  88179\n         DC    21CL80' '     DATA FROM 'NEWS' DD                 88179\n         SPACE 1                                                 88179\nHELPTEXT DC    CL40'                         VTAM Functions '    88179\n         DC    CL40'                                        '  1 88179\n         DC    CL40'   Simple commands:   HELP - displays th'    88179\n         DC    CL40'is screen.                              '  2 88179\n         DC    CL40'     STATUS - displays the system activi'    88179\n         DC    CL40'ty screen.                              '  3 88179\n         DC    CL40'     MSG text - sends a message to the o'    88179\n         DC    CL40'perator (no reply possible).            '  4 88179\n         DC    CL40'     NEWS - displays the current news bu'    88179\n         DC    CL40'lletin (if any)                         '  5 88179\n         DC    CL40'     PASSWORD userid/password - connect '    88179\n         DC    CL40'(sign-on) to VTAM                       '  6 88179\n         DC    CL40'     LOCK - sign-off only. Does not disc'    88179\n         DC    CL40'onnect session.                         '  7 88179\n         DC    CL40'     LOGOFF - sign-off and disconnect se'    88179\n         DC    CL40'ssion on dial-up terminals.             '  8 88179\n         DC    CL40'     OS text - issue an operator command'    88179\n         DC    CL40' (privileged function).                 '  9 88179\n         DC    CL40'                                        '    88179\n         DC    CL40'                                        ' 10 88179\n         DC    CL40'When your initial contact (dial-in or EN'    88179\n         DC    CL40'TER key) results in a \"SIGN-ON\" screen,'  11 88179\n         DC    CL40'you will not be able to use any sub-syst'    88179\n         DC    CL40'em until you complete the logon process.' 12 88179\n         DC    CL40'Supply your user-id, your password, and '    88179\n         DC    CL40'an optional account number. When you use' 13 88179\n         DC    CL40'an account number to sign on, you are pl'    88179\n         DC    CL40'aced in global (automatic) LOGON mode.  ' 14 88179\n         DC    CL40'Subsequent requests for TSO or WYLBUR wi'    88179\n         DC    CL40'll bypass their LOGON screens.          ' 15 88179\n         DC    CL40'                                        '    88179\n         DC    CL40'                                        ' 16 88179\n         DC    CL40'If you see a \"ESP Inc.  CLOSED\" message '    88179\n         DC    CL40'or screen, then either:                 ' 17 88179\n         DC    CL40' a) your terminal is locked to a subsyst'    88179\n         DC    CL40'em that is not currently running,  or   ' 18 88179\n         DC    CL40' b) VTAM is restricted while system main'    88179\n         DC    CL40'tenance is being performed.             ' 19 88179\n         DC    CL40'We close for scheduled maintenance every'    88179\n         DC    CL40' Sunday morning from midnight to 8 a.m.,' 20 88179\n         DC    CL40'Monday midnight to 8 a.m. and Thursday 6'    90054\n         DC    CL40' to 8 a.m.                              ' 21 90054\n         DC    CL40'                                        '    88179\n         DC    CL40'                                        ' 22 88179\n         DC    CL40'For assistance, call:  (703) 931-9500 Te'    88179\n         DC    CL40'chnical support Ext. 48  / Systems #50  ' 23 88179\n         DC    CL40'                       (703) 931-9500 Co'    88179\n         DC    CL40'mputer operations Ext. 43               ' 24 88179\n         TITLE '*********  N E T S O L  -  MESSAGES FOR 3767'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2\nS37MSG01 $MSG  C'BCSC101 XXXXXXXX LOGMODE ENTRY UNDEFINED',TYPE=3767\nS37MSG02 $MSG  C'BCSC102 INVALID LOGON SEQUENCE, REENTER'        88192\nS37MSG03 $MSG  C'BCSC103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'\nS37MSG04 DC    YL2(S37END04-*),X'0D25'                           88192\nS37M4OF  DC    CL60' '\n         DC    X'0D25'              CARRIAGE RETURN              86153\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END04 EQU   *\nS37MSG05 $MSG  C'BCSC105 USER UNAUTHORIZED FOR THIS APPLICATION' 88192\nS37MSG06 $MSG  C'BCSC106 CONNECTING TO APPLICATION'              88195\n         ORG   *-10          OVERLAY CRLF/ENTER TEXT             88195\n         DC    C' '          ONE SPACER                          88195\nS37M6APL DC    CL8' ',C' '   APPLID IN MSG06                     88195\nS37MSG07 $MSG  C'BCSC107          NOT DEFINED TO VTAM'           88192\nS37MSG08 $MSG  C'BCSC108          IS NOT AVAILABLE'  OR LOGMODE INVALID\nS37MSG09 $MSG  C'BCSC109          NO LONGER ACCEPTING LOGONS'    88192\nS37MSG10 $MSG  C'BCSC110          NEVER ACCEPTING LOGONS'        88192\nS37MSG11 $MSG  C'BCSC111          TEMPORARILY NOT ACCEPTING LOGONS'\n         SPACE 1\nS37MSG12 DC    YL2(S37END12-*)\n         DC    XL2'0D250D25'          DOUBLE CARRIAGE RETURN     86153\n         DC    C'ESP VTAM SERVICE '                              92300\nS37NSN12 DC    CL20' '       VTAM AND PROGRAM VERSION            86145\n***********************************************************************\n*                                                                     *\n*        TIME AND DATE STAMP                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         DC    C'   System:'   SYSTEM ID                         86012\nS37SMC12 DC    CL4' '        SMCA ID                             86012\n         DC    C'   Terminal:'    TERM KEYWORD                   85328\nS37TID12 DC    CL8' '             TERM NAME\n         DC    XL2'0D250D25'          CARRIAGE RETURN            86153\n***********************************************************************\n*                                                                     *\n*        APPLICATION SELECTION MENU                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         DC    C'  APPLICATION  ENTER         EXIT'\n         DC    CL3' '             FILLER\nS37TIM12 DC    CL15' '            TIME STAMP\n         DC    X'0D25'                                           86153\n         DC    C'  TSO          LOGON         LOGOFF'\n         DC    X'0D25'                                           86153\n         DC    C'  KERMIT       KERMIT        QUIT/LOGOFF'       89338\n         DC    X'0D25'                                           86153\n         DC    C'  WYLBUR       WYLBUR        LOGOFF'            84142\n         DC    X'0D25'                                           86153\n         DC    C'  Comten menu  LOGOFF'                          86356\n         DC    X'0D25'                                           86356\n***********************************************************************\n*                                                                     *\n*        PROMPT FOR INPUT                                             *\n*                                                                     *\n***********************************************************************\n         DC    C'ENTER ? '\nS37END12 EQU   *\nS37SIZ12 EQU   S37END12-S37MSG12\n         SPACE 1                                                 86065\nS37MSG13 $MSG  C'ESP VTAM SERVICE IS CLOSED AT THIS TIME'        92300\nS37MSG14 $MSG  C'CENTER CLOSED - ACCESS NOT PERMITTED NOW'       87187\nS37MSG15 $MSG  C'BCSC115 TERMINAL NOW UNLOCKED'                  86065\nS37MSG16 $MSG  C'BCSC116 TERMINAL HAS BEEN LOCKED'               86065\nS37MSG17 $MSG  C'BCSC117 PASSWORD UNLOCK REQUEST FAILED'         86065\nS37MSG18 $MSG  C'BCSC118 REQUEST IS NOT AUTHORIZED'              87187\n         SPACE 1                                                 88179\nS37MSG20 DC    YL2(S37END20-*),X'0D25'                           88179\n         DC    C'Welcome to ESP VTAM Services.'                  92300\n         DC    C'   System:'   SYSTEM ID                         88220\nS37SMC20 DC    CL4' '        SMCA ID                             88220\n         DC    C'   Terminal:'    TERM KEYWORD                   88220\nS37TID20 DC    CL8' ',X'0D25'     TERM NAME                      88220\n DC    C'Please issue a command (HELP, LOGOFF...) or sign on.',X'0D25'\n         DC    C'To sign-on, enter your userid, a space, and your passw*\n               ord. You may specify',X'0D25'                     88220\n         DC    C'your account number after the password to bypass TSO/W*\n               YLBUR logon prompts.',X'0D25'                     88220\n         DC    C'Enter (id/pswd\u00dd/acct\u00a8)>'   PROMPT FOR INPUT     88220\nS37END20 EQU   *                                                 88179\n         TITLE '*********  N E T S O L  -  MESSAGES FOR SYSIN'\n***********************************************************************\n*        MESSAGE TEXTS                                                *\n***********************************************************************\n         SPACE 2\nSINMSG00 $MSG  C'UNSUPPORTED MESSAGE FOR SYSIN CMDS',TYPE=SYN    88192\n         SPACE 1\nSINMSG04 DC    YL2(SINEND04-*-2)                                 86066\nSINM4OF  DC    CL60' '\nSINEND04 EQU   *\n         ORG   SINM4OF       REDEFINE                            88199\nERRMSG   DC    XL125'0'      RDW/0/TEXT  FOR SVC 249 ERROR MESSAGES\n         SPACE 1\nSINMSG07 $MSG  C'BCSC107 INVALID COMMAND'                        88192\n         SPACE 1                                                 85235\n***********************************************************************\n*    EXIT ROUTINES TO BE SCHEDULED IN RESPONSE TO VTAM EVENTS         *\n*                                                                     *\n*              * ERREXIT ENTERED FOR ERROR CONDITIONS.                *\n*              * TPEND SCHEDULED WHEN VTAM SHUTS DOWN                 *\n*              * LOGON SCHEDULED WHEN A TERMINAL LOGS ON              *\n*              * LOSTERM SCHEDULED WHEN A TERMINAL IS LOST            *\n*              * RELREQ SCHEDULED WHEN ANOTHER APPLICATION ACQUIRES   *\n*                A TERMINAL CURRENTLY LOGGED ON TO NETSOL.            *\n***********************************************************************\n         SPACE 2\n         DS    0D\n         DC    CL8'EXITLIST'\n         SPACE 1\nEXLST    EXLST LERAD=ERREXIT,                                          X\n               SYNAD=ERREXIT,                                          X\n               TPEND=TPEND,                                            X\n               RELREQ=RELREQ,                                          X\n               LOGON=LOGON,                                            X\n               LOSTERM=LOSTERM,                                        X\n               AM=VTAM\n         TITLE '*********  N E T S O L  -  R P L   DSECT CONTINUED'\nIFGRPLX  DSECT\n*        THE FOLLOWING SECTION OF THE WORK AREA IS NOT INITIALIZED BY\n*        THE GETRPL FUNCTION SO NO DATA SHOULD BE PLACED IN THAT NEEDS\n*        TO BE ZERO AT THE BEGINNING\n         SPACE 1\n*        THE FOLLOWING MANIPULATION RESERVES A MESSAGE BUFFER FOR\n*        THE LARGEST EXISTING MESSAGE.\n         DS    0F            ALIGN                               91195\nIOBASE   DS    CL(S32SIZ12)            SPACE FOR 3270 MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S3ESIZ12)            SPACE FOR 3270 EXTENDED MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(MD5SIZ12)  SPACE FOR 3270 MODEL 5              88206\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S37SIZ12)            SPACE FOR 3767 MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S32SIZ13)            SPACE FOR 3270 MSG 13     86065\n         ORG   IOBASE                  BACK TO START OF BUFFER   86065\n         DS    CL(S3ESIZ13)            SPACE FOR 3270 EDS MSG 13 86065\n         ORG   IOBASE                  BACK TO START OF BUFFER   86065\n         DS    CL(MD5SIZ13)  SPACE FOR MODEL 5 SCREEN            88206\n         ORG   IOBASE                                            88206\n         DS    CL(S32SIZ20)  SPACE FOR LOGON SCREEN              88206\n         ORG   IOBASE                                            88206\n         DS    CL(S3ESIZ20)                                      88206\n         ORG   IOBASE                                            88206\n         DS    CL(MD5SIZ20)                                      88206\n         ORG   IOBASE                                            88206\n         DS    CL(PREFIXLN)  LEAVE ROOM FOR EXHIBIT SCREEN       87193\n*OLD*    DS    24CL80                                            87193\n         DS    27CL132       ROOM FOR MODEL 5                    88206\n         DS    CL(SUFFIXLN)                                      87193\n         ORG   ,                       GO TO END OF BUFFER\nLMSG12   EQU   *-IOBASE                CALC MAX MSG 12 SIZE\n         ORG   IOBASE BACK TO START OF BUFFER\nIOAREA   DS    CL(LMSG12)              FOR MSG OUTPUT / INPUT FROM LU\n         ORG   IOAREA+80               ORG OVER SYSIN BUFFER\nNODENAME DS    CL8                     TEMP NODE NAME STORAGE\nNODENAM2 DS    CL8           RANGE END NAME                      88185\nDLOGAPPL DS    CL8                     TEMP APPLID STORAGE\nTTEDUMMY DS    CL(TERMELEN)            DUMMY TTE USED BY SYSIN CMDS\n         ORG   ,                       ORG BACK TO END OF BUFFER\n*        OUTPUT BUFFER DEFINITION COMPLETE.\nDATASEQ  DS    CL256                   TRANSLATED DATA SEQUENC DC18203\nENDSECT  DS    0D                      END DSECT ON D-WORD\nLNIFGRPL EQU   WORKSPAC-STSECT         LENGTH OF ONE RPL AREA\nIOBUFLEN EQU   ENDSECT-IOAREA          LENGTH OF THE IOAREA\n*                                      WITHOUT THE WORKAREA\n         PRINT NOGEN                                             86012\n         SPACE 1                                                 86012\nCVTDSECT DSECT ,                                                 86012\n         CVT   DSECT=YES                                         90344\n         IEESMCA ,                                               90344\n         IHAPSA ,                                                86012\nCIB      IEZCIB ,                                                86065\n         IHAASVT ,           ADDRESS SPACE VECTOR TABLE          90120\n         IHAASCB ,           ADDRESS SPACE CONTROL BLOCK         90120\nUCM      DSECT ,                                                 87187\n         IEECUCM ,                                               87187\n         IKJTCB ,                                                87193\n         IHACDE ,            REALLY WANT LPDE                    87193\n         IEECHAIN ,          CSCB MAPPING                        90120\n         SPACE 1                                                 93038\n         IEFJESCT ,          JES VECTOR TABLE                    93038\n         SPACE 1                                                 93038\n         IEFJSCVT ,          EXHIBIT SSCT                        93038\n         SPACE 1                                                 88179\n         AIF   ('&LOCAL' NE 'ESP').NOESP                         92300\n         MAPEXR ,            MAP EXHIBIT CSA                     93038\n         MAPEXK ,            MAP EXHIBIT SCREEN AREA             93038\n         SPACE 1                                                 93038\nUSERCVT  USERCVT ,                                               88185\n         SPACE 1                                                 88185\n         PRINT GEN                                               88179\nA$LOUD   A$LOUD ,                                                88179\n.NOESP  END   ,                                                  92300\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVLMOD": {"ttr": 32009, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x13#\\x7f\\x01\\x13#\\x7f\\x14\\x17Z\\xb9Z\\xb9\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-08-25T00:00:00", "modifydate": "2013-08-25T14:17:00", "lines": 23225, "newlines": 23225, "modlines": 0, "user": "GERHARD"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "REVLMOD#": {"ttr": 41480, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00B\\x01\\x12\\x03\\x0f\\x01\\x13#\\x7f\\x14\"\\x00\\x16\\x00\\x15\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-01-30T00:00:00", "modifydate": "2013-08-25T14:22:42", "lines": 22, "newlines": 21, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* ---------------------------------------------------------------- *\n//*  SAMPLE JOB TO RECONSTRUCT LOAD MODULES OFFLOADED BY THE         *\n//*  'REVIEW' TSO COMMAND OR THE 'OFFLMOD' UTILITY.                  *\n//*                                                                  *\n//*  BEFORE DOING THE OFFLOAD OF A LOAD LIBRARY IN REVIEW, FIRST     *\n//*  DO A \"SORT TTR ASC\" FROM THE DATASET LIST, TO PRESERVE THE      *\n//*  ALIAS MEMBERS, OTHERWISE THEY ARE NOT PROPERLY PROCESSED.       *\n//*                                                                  *\n//*         PROGRAM OBJECTS AND SEGMENT OVERLAY PROGRAMS             *\n//*         CANNOT BE PROCESSED.                                     *\n//* ---------------------------------------------------------------- *\n//STEP1   EXEC PGM=REVLMOD                      (FILE 134 OR 135)\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSIN    DD  DISP=SHR,DSN=SBGOLOB.CBT487.FILE862(REVLMOD)  <INPUT SEQ\n//SYSUT2   DD  DISP=(NEW,CATLG,DELETE),                     <OUTPUT PDS\n//             DSN=SBGOLOB.GERHAR2.ESPLIB.TEST,\n//             UNIT=SYSALLDA,VOL=SER=WORKS1,\n//             DCB=(RECFM=U,LRECL=0,BLKSIZE=19069),\n//             SPACE=(CYL,(6,10,134),RLSE)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSMODS": {"ttr": 41482, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x01\\x13#\\x7f\\x01\\x13#\\x7f\\x13\\x19'\\xcb'\\xcb\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-08-25T00:00:00", "modifydate": "2013-08-25T13:19:00", "lines": 10187, "newlines": 10187, "modlines": 0, "user": "GERHARD"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT862/FILE862.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT862", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}