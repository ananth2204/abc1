/* REXX ------------------------------------------------------------- */
/* Name:         XDOUBLE                                              */
/* Type:         Macro                                                */
/* Author:       Norbert Haas, noaDatex.de                            */
/* Date:         in 2002                                              */
/* Syntax:       XDOUBLE left_col right_col                           */
/*     or:       XDOUBLE left_col +length                             */
/*     or:       XDOUBLE ALL                                          */
/* Parameter:    left / right_col = Colums                            */
/*               ALL uses the whole length (lrecl)                    */
/* Description:  Excludes double lines                                */
/* Attention:    Data will be sorted!                                 */
/* Example:      XDOUBLE 10 12                                        */
/*    also:      XDOUBLE 12 +3                                        */
/*               Excludes all line, that have identical data in       */
/*               columns 10 to 12.                                    */
/*                                                                    */
/* Vers.  Date       Author    Reason                                 */
/* ------ ---------- --------- -------------------------------------- */
/* V05.03 03.01.2017 N.Haas    English version                        */
/* V05.02 06.01.2015 N.Haas    PARM-Fehler beseitigt, LÃ¤nge ermittelt */
/* V05.01 20.12.2013 N.Haas    Jetzt wird mit HEX gesucht!            */
/* V04.02 15.08.2013 N.Haas    Fehler raus                            */
/* V04.01 30.07.2013 N.Haas    Komplett neue Version - cleverer!      */
/*                             Blitzschnelle Version !!!              */
/* V03.01 24.05.2013 N.Haas    Version mit Labeln                     */
/* V02.01 21.05.2013 N.Haas    Fetter Fehler raus. Es wurden die      */
/*                             beiden Zeichenketten                   */
/*                             100000000000000001 und                 */
/*                             100000000000000002 verglichen. Dabei   */
/*                             wird Gleichheit festgestellt, wenn mit */
/*                             IF string = string_alt verglichen wird.*/
/*                             IF string == string_alt stellt kor-    */
/*                             rekterweise Ungleichheit fest.         */
/* V01.03 11.05.2011 N.Haas    Parm = *  durch ALL ersetzt            */
/* V01.02 14.01.2011 N.Haas    Parm = *                               */
/* V01.01       2002 N.Haas    Erstellung (FORD)                      */
/* ------------------------------------------------------------------ */
"ISREDIT MACRO (parm) NOPROCESS"
UPPER parm

SIGNAL ON NOVALUE NAME Exception
SIGNAL ON SYNTAX  NAME Exception

zedsmsg = ''

/* Plausis */
IF parm = 'ALL' THEN DO
   p1 = 1
   "ISREDIT (p2) = LRECL"
END
ELSE DO
   IF WORDS(parm) /= 2 THEN DO
      zedlmsg = 'Wrong parameter -',
                'Please enter ALL, two cols (c1 c2) or one',
                'column and then length (c +l).'
      "ISPEXEC SETMSG MSG(isrz001)"
      EXIT -1
   END
   PARSE VAR parm  p1 p2
END

/* Compute */
IF LEFT(p2,1) = "+" THEN DO
   l = p2
   p2 = p1 + l - 1
END
ELSE DO
   l = p2 - p1 + 1
END

/* Hex mode is possible, therefor max. length = 128 */
IF l > 128 THEN DO
   zedlmsg = 'Wrong length -',
             'maximum is 128 char.'
   "ISPEXEC SETMSG MSG(isrz001)"
   EXIT -1
END

/* Init for Label */
PARSE VALUE '1' WITH 1 mc1  1 mc2  1 mc3  1 mc4

letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
DO i = 1 TO LENGTH(letters)
   INTERPRET 'l.'i '= SUBSTR(letters,i,1)'
END

c = 0; max = 26 ** 4; cntr = 0
TRUE = 1; FALSE = 0; finished = FALSE
letter = 'A'                                          /* First letter */

/* This is the master piece | */
"ISREDIT (lastline) = LINENUM .ZL"
"ISREDIT RESET"
"ISREDIT BNDS"
"ISREDIT RESET LABEL"
"ISREDIT SORT" p1 p2 "a"
"ISREDIT FIND FIRST P'"COPIES('=',l)"'" p1
DO WHILE rc = 0 & finished = FALSE
   "ISREDIT (line) = LINE .ZCSR"
   string = SUBSTR(line, p1, l)
   xstring = C2X(string)
   label = MakeLabel(mc4, mc3, mc2, mc1)
   "ISREDIT LABEL .ZCSR =" label "0"
   "ISREDIT (linenum) = LINENUM .ZCSR"
   linenum = linenum + 1
   IF linenum > lastline THEN finished = TRUE
   ELSE DO
      "ISREDIT LABEL" linenum "= .DMY 0"
      "ISREDIT X ALL x'"xstring"'" p1 ".DMY .ZL"
      "ISREDIT (tmp1,tmp2) = EXCLUDE_COUNTS"
      cntr = cntr + tmp1
      "ISREDIT FIND FIRST P'"COPIES('=',l)"'" p1 ".DMY .ZL NX" /* Nxt */
   END
END

/* Big fat message */
zedlmsg = LEFT('The excludet lines are double.',
          'To delete enter "DEL ALL X". There where',
          cntr 'double lines.',156),
          'Enter "RES;TOP;&L NEXT LABEL" to find the hits',
          'step by step.'
"ISPEXEC SETMSG MSG(isrz000)"

EXIT



MakeLabel:
   PARSE ARG p.4, p.3, p.2, p.1

   label = "." || letter
   DO ii = 4 TO 1 BY - 1
      jj = p.ii
      label = label || l.jj
   END
   mc1 = mc1 + 1
   IF mc1 > 26 THEN DO
      mc1 = 1
      mc2 = mc2 + 1
      IF mc2 > 26 THEN DO
         mc2 = 1
         mc3 = mc3 + 1
         IF mc3 > 25 THEN DO
            mc3 = 1
            mc4 = mc4 + 1
            IF mc4 > 26 then DO
               EXIT
            END
         END
      END
   END
RETURN label



Exception:
   SAY rc
   SAY ERRORTEXT(rc)
   SAY sigl
   SAY SOURCELINE(sigl)
EXIT
