/* REXX ------------------------------------------------------------- */
/* Name:         PACKCHG1                                             */
/* Type:         Exec (only possible in batch mode)                   */
/* Author:       Norbert Haas, noaDatex.de                            */
/* Date:         24.08.2016                                           */
/* Syntax:       will be called by PACKCHG                            */
/* Parameter:    none                                                 */
/* Description:  Changes in (all) members of a PDS (dsn = ...) the    */
/*               string f$ by c$ (WORD). Uses PACKCHG2 for that       */
/* Remark:       See lines with $$$ and change if neccessary          */
/*                                                                    */
/* Vers.  Datum      Autor     Grund                                  */
/* ------ ---------- --------- -------------------------------------- */
/* V03.03 21.12.2016 N.Haas    Translated into english                */
/* V03.02 21.11.2016 N.Haas    Weitere Eingabefelder abarbeiten       */
/* V03.01 17.11.2016 N.Haas    Jetzt mit C1, C2 und c3                */
/* V02.01 02.09.2016 N.Haas    Jetzt auch mit Spaltenangabe           */
/* V01.01 24.08.2016 N.Haas    Erstellung (Kopie und Erweiterung des  */
/*                             RUDELCHG vom 22.01.2015)               */
/* ------------------------------------------------------------------ */
SIGNAL ON NOVALUE
SIGNAL ON SYNTAX

TRUE    = 1
FALSE   = 0
pzeile. = ""
p       = 0
c1      = 0                 /* Counter for number of member with hits */
c2      = 0                 /* Counter for number of hits             */
c3      = 0                 /* Counter for number of error            */

/* Log -------------------------------------------------------------- */
SAY "Starting PACKCHG-Batch"
SAY DATE('G', 10) "/" TIME()

/* Read all data ---------------------------------------------------- */
"EXECIO 1 DISKR DSN60   (FINIS STEM dsn60.)"
"EXECIO 1 DISKR PREFIX  (FINIS STEM px60.)"
"EXECIO * DISKR MEMBER  (FINIS STEM collect.)"
"EXECIO 10 DISKR STRINGS (FINIS STEM string.)"
"EXECIO 5 DISKR COLUMN  (FINIS STEM spalte.)"
"EXECIO 1 DISKR ACTION  (FINIS STEM aktion.)"

/* Log -------------------------------------------------------------- */
SAY "Dataset          =" dsn60.1
SAY "Prefix           =" px60.1
SAY "Number of member =" Anzahl_Member()
SAY "1. find string   =" string.1; string.1 = STRIP(string.1)
SAY "   change string =" string.2; string.2 = STRIP(string.2)
SAY "   on column     =" spalte.1; spalte.1 = STRIP(spalte.1)
IF string.3 /= "" THEN DO
   SAY "2. find string   =" string.3; string.3 = STRIP(string.3)
   SAY "   change string =" string.4; string.4 = STRIP(string.4)
   SAY "   on column     =" spalte.2; spalte.2 = STRIP(spalte.2)
END
IF string.5 /= "" THEN DO
   SAY "3. find string   =" string.5; string.5 = STRIP(string.5)
   SAY "   change string =" string.6; string.6 = STRIP(string.6)
   SAY "   on column     =" spalte.3; spalte.3 = STRIP(spalte.3)
END
IF string.7 /= "" THEN DO
   SAY "4. find string   =" string.7; string.7 = STRIP(string.7)
   SAY "   change string =" string.8; string.8 = STRIP(string.8)
   SAY "   on column     =" spalte.4; spalte.4 = STRIP(spalte.4)
END
IF string.9 /= "" THEN DO
   SAY "5. find string   =" string.9; string.9 = STRIP(string.9)
   SAY "   change string =" string.10; string.10 = STRIP(string.10)
   SAY "   on column     =" spalte.5; spalte.5 = STRIP(spalte.5)
END
SAY "Action           =" aktion.1
SAY COPIES('-', 70)

/* Call sub programms ----------------------------------------------- */
IF UCASE(aktion.1) = "FIND AND CHANGE" THEN
   CALL Find_and_change
ELSE
   CALL Find

/* End of log ------------------------------------------------------- */
SAY COPIES('-', 70)
SAY "Number of member with hits:" FORMAT(c1,6)
SAY "Total number of hits:      " FORMAT(c2,6)
IF UCASE(aktion.1) = "FIND AND CHANGE" THEN DO
   SAY "Total number of errors:    " FORMAT(c3,6)
END
SAY DATE('G', 10) "/" TIME()
SAY "End of PACKCHG"

EXIT

/* ================================================================== */

Join: PROCEDURE
   PARSE ARG dsn, mem

   DO i = 1 TO 3
      dsn = STRIP(dsn,,"'")
      dsn = STRIP(dsn)
   END
   mem = STRIP(mem)
RETURN "'"dsn"("mem")'"

FullQual: PROCEDURE EXPOSE TRUE FALSE
   PARSE ARG dsn

   dsn = STRIP(dsn,,"'")
RETURN "'"dsn"'"

DATE: PROCEDURE
   PARSE UPPER ARG a, l

   SELECT
      WHEN a = 'G' THEN DO
         tmp = "DATE"('E')                              /* dd/mm/yy   */
         tmp = TRANSLATE(tmp,'.','/')                   /* dd.mm.yy   */
         IF l = '' | l = 8 THEN NOP
         ELSE DO
            IF l = 10 THEN DO                           /* dd.mm.yyyy */
               tmp = LEFT(tmp,6) || RIGHT("DATE"(),4)
            END
            ELSE SAY "ERROR bei Aufruf DATE('G',len)"
         END
      END
      WHEN a = 'DSN' THEN DO
         tmp = "DATE"('S')                              /* yyyymmdd   */
         tmp = SUBSTR(tmp, 3)                           /* yymmdd     */
      END
      OTHERWISE DO
         tmp = "DATE"(a)
      END
   END
RETURN tmp

Find:
   CALL Collect_Parms

   DO i = 1 TO collect.0
      temp = collect.i
      DO j = 1 TO WORDS(temp)
         member = WORD(temp, j)
         dsn_mem = Join(dsn60.1, member)
         parmx60 = parm
         "ISPEXEC VPUT parmx60"
         "ISPEXEC VIEW DATASET("dsn_mem") MACRO(PACKCHG2)"
         "ISPEXEC VGET (treffer, fehler)"
         SAY "Member (hits) =" LEFT(member, 8),
             "("FORMAT(treffer, 5)")"
         IF treffer > 0 THEN c1 = c1 + 1
         c2 = c2 + treffer
      END
   END
RETURN

Find_and_change:
   CALL Collect_Parms

   DO i = 1 TO collect.0
      temp = collect.i
      DO j = 1 TO WORDS(temp)
         member = WORD(temp, j)
         dsn_mem = Join(dsn60.1, member)
         parmx60 = parm
         "ISPEXEC VPUT parmx60"
         "ISPEXEC EDIT DATASET("dsn_mem") MACRO(PACKCHG3)"
         "ISPEXEC VGET (treffer, fehler)"
         SAY  "Member (hits/error ) =" LEFT(member, 8),
              "("FORMAT(treffer, 5)"/"FORMAT(fehler, 5)")"
         IF treffer > 0 THEN c1 = c1 + 1
         c2 = c2 + treffer
         c3 = c3 + fehler
      END
   END
RETURN

Collect_Parms:
   xc1 = 'CA'x /* ­ Bullet point */
   xc2 = '59'x /* ß Tilde        */
   xc3 = 'EC'x /* Ö Back slash   */
   parm = TRANSLATE(string.1 || xc1 || string.2 || xc1 ||,
                    spalte.1, xc2, " ")

   IF string.2 /= "" THEN DO
      parm = parm || xc3 ||,
             TRANSLATE(string.3 || xc1 || string.4 || xc1 || ,
                       spalte.2, xc2, " ")
   END
   IF string.3 /= "" THEN DO
      parm = parm || xc3 ||,
             TRANSLATE(string.5 || xc1 || string.6 || xc1 || ,
                       spalte.3, xc2, " ")
   END
   IF string.4 /= "" THEN DO
      parm = parm || xc3 ||,
             TRANSLATE(string.7 || xc1 || string.8 || xc1 || ,
                       spalte.4, xc2, " ")
   END
   IF string.5 /= "" THEN DO
      parm = parm || xc3 ||,
             TRANSLATE(string.9 || xc1 || string.10 || xc1 || ,
                       spalte.5, xc2, " ")
   END

   parm = parm || xc3
RETURN

UCASE: PROCEDURE
   PARSE ARG parm
   uc = "ABCDEFGHIJKLMNOPQRSTUVWXYZ¢\!"
   lc = "abcdefghijklmnopqrstuvwxyz{¦}"
RETURN TRANSLATE(parm,uc,lc)

Anzahl_Member: PROCEDURE EXPOSE collect.
   c = 0
   DO i = 1 TO collect.0
      c = c + WORDS(collect.i)
   END
RETURN c

NOVALUE:
SYNTAX:
   SAY "PACKCHG1  "
   SAY "Zeile    =" SIGL
   SAY "Source   =" strip("SOURCELINE"(sigl), "L")
   SAY "Error    =" ERRORTEXT(rc)
   SAY "Variable =" condition("D")
EXIT
