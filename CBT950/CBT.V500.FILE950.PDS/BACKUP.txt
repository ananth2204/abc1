/* REXX ***************************************************************/
/* -------------------------------------------------------------------*/
/* Name:       BACKUP                                                 *//*HELP*/
/* Short       Backup of a dataset                                    *//*HELP*/
/* Type:       REXX-Exec                                              *//*HELP*/
/* Author:     Norbert Haas, noaDatex.de                              *//*HELP*/
/* Function:   Creates a backup copy of a dataset (PS/PO)             *//*HELP*/
/* Input:      dataset                                                *//*HELP*/
/* Output:     dataset.BACKUP                                         *//*HELP*/
/* Syntax:     Used in 3.4                                            *//*HELP*/
/*                                                                    */
/* Version Author        Date       Why                               */
/* ------- ------------- ---------- --------------------------------- */
/* V02.03  N.Haas        15.04.2010 vonmem1 = / ==> Memberlistselect. */
/* V02.02  N.Haas        14.04.2010 vonmem2/3 and bismem2/3           */
/* V02.01  N.Haas        20.07.2009 small changes                     */
/* V02.00  N.Haas        11.07.2005 English version and new option 3  */
/* V01.00  N.Haas           03/2000 Creation                          */
/**********************************************************************/

/* Init --------------------------------------------------------------*/
TRUE = 1
FALSE = 0

PARSE UPPER ARG dsn_alt

/* CALL OK ? ---------------------------------------------------------*/
IF dsn_alt = '' THEN DO
   rc = DispMsg('Wrong Call',,
                'This tool must be called from 3.4.',,
                TRUE)
   EXIT
END

/* DSN with or without quotes? ---------------------------------------*/
dsn_alt  = STRIP(dsn_alt,,"'")
dsn_neu  = LEFT(dsn_alt || '.BACKUP',44)
cursor   = 'ndsn'
dummy    = LISTDSI("'"dsn_alt"'")
syslrecl = syslrecl + 0
info     = '('sysdsorg', 'syslrecl')'
datopt   = '1'

/* Display Panel -----------------------------------------------------*/
"ISPEXEC ADDPOP"
adsn = dsn_alt

Display:
ndsn = dsn_neu
"ISPEXEC DISPLAY PANEL(BACKUPP)"
IF rc = 8 THEN DO
   rc = DispMsg('Canceled by user',,
                'The BACKUP command has been canceled by the user.',,
                FALSE)
   EXIT
END
dsn_neu = ndsn

/* Option plus other input OK ? --------------------------------------*/
IF datopt = 1 | datopt = 4 THEN DO
   IF vonzeil1 /= '' | vonzeil2 /= '' | vonzeil3 /= '' |,
      biszeil1 /= '' | biszeil2 /= '' | biszeil3 /= '' |,
      vonmem1  /= '' | vonmem2  /= '' | vonmem3  /= '' |,
      bismem1  /= '' | bismem2  /= '' | bismem3  /= ''     THEN DO
      rc = DispMsg('Wrong input',,
                   'If option' datopt 'was used, any other input must',
                   'be left empty.',,
                   TRUE)
      cursor = 'datopt'
      SIGNAL Display
   END
END

IF datopt = 2 THEN DO
   IF vonzeil1 = "" | biszeil1 = "" THEN DO
      rc = DispMsg('Wrong input',,
                   'If option 2 is used, "from line"',
                   'and "to line" must be entered.',,
                   TRUE)
      cursor = 'vonzeil1'
      SIGNAL Display
   END
END

IF datopt = 3 THEN DO
   IF vonmem = "" | bismem = "" THEN DO
      rc = DispMsg('Wrong input',,
                   'If option 3 is used, "from member"',
                   'and "to member" must be entered.',,
                   TRUE)
      cursor = 'vonmem'
      SIGNAL Display
   END
END

/* New dsn alredy exists? --------------------------------------------*/
IF SYSDSN("'"dsn_neu"'") = 'OK' THEN DO
   rc = DispMsg('DSN new already exists',,
                'The new dataset' dsn_neu 'does already exist.',,
                TRUE)
   SIGNAL Display
END

/* Remove Panel ------------------------------------------------------*/
"ISPEXEC REMPOP"
dsn_alt = "'"dsn_alt"'"
dsn_neu = "'"dsn_neu"'"

/* Alloc new dataset -------------------------------------------------*/
/*<"ALLOC NEW DATASET("dsn_neu") LIKE("dsn_alt") MGMTCLAS(TESTSTD)",  */
/*         "STORCLAS(STANDARD)"                                       */
"ALLOC NEW DATASET("dsn_neu") LIKE("dsn_alt")"
alloc_rc = rc
IF alloc_rc > 0 THEN DO
   SAY 'ALLOC, RC =' rc
END

/* Copy --------------------------------------------------------------*/
IF datopt = 1 THEN DO                           /* Alloc and copy all */
   IF sysdsorg = 'PO' THEN DO
      member = ''
      "ISPEXEC LMINIT DATAID(dataid1) DATASET("dsn_alt") ENQ(SHR)"
      "ISPEXEC LMINIT DATAID(dataid2) DATASET("dsn_neu") ENQ(SHRW)"

      "ISPEXEC LMOPEN DATAID("dataid1") OPTION(INPUT)"

      "ISPEXEC LMMLIST DATAID("dataid1") OPTION(LIST) MEMBER(member)"

      DO WHILE rc = 0
         "ISPEXEC LMCOPY FROMID("dataid1") FROMMEM("member")",
                        "TODATAID("dataid2") TOMEM("member")",
                        "REPLACE"
         lmcopy_rc = rc
         IF lmcopy_rc > 0 THEN DO
            SAY 'LMCOPY, RC =' rc
         END
         "ISPEXEC LMMLIST DATAID("dataid1") OPTION(LIST) MEMBER(member)"
      END

      "ISPEXEC LMCLOSE DATAID("dataid1")"

      "ISPEXEC LMFREE DATAID("dataid2")"
      "ISPEXEC LMFREE DATAID("dataid1")"
   END
   ELSE DO
      IF sysdsorg = 'PS' THEN DO
         "ALLOC DD(SYSUT1)   DSN("dsn_alt") SHR REUSE"
         "ALLOC DD(SYSUT2)   DSN("dsn_neu") OLD REUSE"
         "ALLOC DD(SYSIN)    DUMMY REUSE"
         "ALLOC DD(SYSPRINT) DUMMY REUSE"

         "ISPEXEC SELECT PGM(IEBGENER)"
         iebgener_rc = rc
         IF iebgener_rc > 0 THEN DO
            SAY 'IEBGENER, RC =' rc
         END

         "FREE DD(SYSPRINT)"
         "FREE DD(SYSIN)"
         "FREE DD(SYSUT2)"
         "FREE DD(SYSUT1)"
      END
      ELSE DO
         rc = DispMsg('Wrong DSORG',,
                 'DSORG of dataset' dsn_alt 'is neither PO nor PS',
                 'BACKUP provides only PS and PO datasets.',,
                      TRUE)
         CALL Delete_Again dsn_neu
         EXIT
      END
   END
END

IF datopt = 3 THEN DO                        /* Alloc and copy member */
   IF sysdsorg = 'PO' THEN DO
      IF vonmem1 = "/" THEN DO
         msg = '*COPIED*'
         zedsmsg = ''
         zedlmsg = 'Please select (S) member to be copied.'
         "ISPEXEC SETMSG MSG(ISRZ000)"

         "ISPEXEC LMINIT DATAID(dataid1) DATASET("dsn_alt") ENQ(SHR)"
         "ISPEXEC LMINIT DATAID(dataid2) DATASET("dsn_neu") ENQ(SHRW)"

         "ISPEXEC LMOPEN DATAID("dataid1") OPTION(INPUT)"

         "ISPEXEC LMMDISP DATAID("dataid1") OPTION(DISPLAY)"

         DO WHILE rc = 0
            "ISPEXEC LMCOPY FROMID("dataid1") FROMMEM("zlmember")",
                           "TODATAID("dataid2") TOMEM("zlmember")",
                           "REPLACE"
            lmcopy_rc = rc
            IF lmcopy_rc > 0 THEN DO
               SAY 'LMCOPY, RC =' rc
            END

            "ISPEXEC LMMDISP DATAID("dataid1") OPTION(PUT)",
                                              "MEMBER("zlmember")",
                                              "ZLUDATA("msg")"
            "ISPEXEC CONTROL NONDISPL ENTER"
            "ISPEXEC LMMDISP DATAID("dataid1") OPTION(DISPLAY)"
         END

         "ISPEXEC LMCLOSE DATAID("dataid1")"

         "ISPEXEC LMFREE DATAID("dataid2")"
         "ISPEXEC LMFREE DATAID("dataid1")"
      END
      ELSE DO
         member = ''
         "ISPEXEC LMINIT DATAID(dataid1) DATASET("dsn_alt") ENQ(SHR)"
         "ISPEXEC LMINIT DATAID(dataid2) DATASET("dsn_neu") ENQ(SHRW)"

         "ISPEXEC LMOPEN DATAID("dataid1") OPTION(INPUT)"

         "ISPEXEC LMMLIST DATAID("dataid1") OPTION(LIST) MEMBER(member)"

         DO WHILE rc = 0
            IF (member >= vonmem1 & member <= bismem1) |,
               (member >= vonmem2 & member <= bismem2) |,
               (member >= vonmem3 & member <= bismem3) THEN DO
               "ISPEXEC LMCOPY FROMID("dataid1") FROMMEM("member")",
                              "TODATAID("dataid2") TOMEM("member")",
                              "REPLACE"
               lmcopy_rc = rc
               IF lmcopy_rc > 0 THEN DO
                  SAY 'LMCOPY, RC =' rc
               END
            END
            "ISPEXEC LMMLIST DATAID("dataid1") OPTION(LIST) MEMBER(member)"
         END

         "ISPEXEC LMCLOSE DATAID("dataid1")"

         "ISPEXEC LMFREE DATAID("dataid2")"
         "ISPEXEC LMFREE DATAID("dataid1")"
      END
   END
   ELSE DO
      rc = DispMsg('Wrong DSORG',,
                  'With option 3 the DSORG must be PO.',,
                   TRUE)
      CALL Delete_Again dsn_neu
      EXIT
   END
END

IF datopt = 2 THEN DO                         /* Alloc and copy lines */
   IF sysdsorg = 'PS' THEN DO
      /* 1 */
      anzahl_zeilen = biszeil1 - vonzeil1 + 1
      "ALLOC DD(di) DSN("dsn_alt") SHR REUSE"
      "EXECIO" anzahl_zeilen "DISKR di" vonzeil1 "(FINIS STEM line.)"
      execio_rc = rc
      "FREE DD(di)"
      IF execio_rc /= 0 THEN DO
         rc = DispMsg('To less memory',,
                      'The virtual memory is to low to read the',
                      'selected number of lines.',,
                      TRUE)
         CALL Delete_Again dsn_neu
         EXIT
      END
      "ALLOC DD(do) DSN("dsn_neu") SHR REUSE"
      "EXECIO" anzahl_zeilen "DISKW do (FINIS STEM line.)"
      "FREE DD(do)"
      /* 2 */
      IF vonzeil2 /= "" & biszeil2 /= "" THEN DO
         anzahl_zeilen = biszeil2 - vonzeil2 + 1
         "ALLOC DD(di) DSN("dsn_alt") SHR REUSE"
         "EXECIO" anzahl_zeilen "DISKR di" vonzeil2 "(FINIS STEM line.)"
         execio_rc = rc
         "FREE DD(di)"
         IF execio_rc /= 0 THEN DO
            rc = DispMsg('To less memory',,
                         'The virtual memory is to low to read the',
                         'selected number of lines.',,
                         TRUE)
            CALL Delete_Again dsn_neu
            EXIT
         END
         "ALLOC DD(do) DSN("dsn_neu") MOD REUSE"
         "EXECIO" anzahl_zeilen "DISKW do (FINIS STEM line.)"
         "FREE DD(do)"
      END
      /* 3 */
      IF vonzeil3 /= "" & biszeil3 /= "" THEN DO
         anzahl_zeilen = biszeil3 - vonzeil3 + 1
         "ALLOC DD(di) DSN("dsn_alt") SHR REUSE"
         "EXECIO" anzahl_zeilen "DISKR di" vonzeil3 "(FINIS STEM line.)"
         execio_rc = rc
         "FREE DD(di)"
         IF execio_rc /= 0 THEN DO
            rc = DispMsg('To less memory',,
                         'The virtual memory is to low to read the',
                         'selected number of lines.',,
                         TRUE)
            CALL Delete_Again dsn_neu
            EXIT
         END
         "ALLOC DD(do) DSN("dsn_neu") MOD REUSE"
         "EXECIO" anzahl_zeilen "DISKW do (FINIS STEM line.)"
         "FREE DD(do)"
      END
   END
   ELSE DO
      rc = DispMsg('Wrong DSORG',,
                  'With option 2 the DSORG must be PS.',,
                   TRUE)
      CALL Delete_Again dsn_neu
      EXIT
   END
END

/* ... and bye bye ---------------------------------------------------*/
"FREE DATASET("dsn_neu")"
EXIT

/* ================================================================== */

Delete_Again: PROCEDURE
   PARSE ARG dsn_del
   dummy = MSG('OFF')
   "DELETE" dsn_del
   dummy = MSG('ON')
RETURN

DispMsg: PROCEDURE
   PARSE ARG zedsmsg, zedlmsg, beep

   /* Beep ? */
   IF beep THEN
      msg = 'ISRZ001'
   ELSE
      msg = 'ISRZ000'

   "ISPEXEC SETMSG MSG("msg")"
RETURN 0
