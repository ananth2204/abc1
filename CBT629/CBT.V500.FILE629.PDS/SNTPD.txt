***********************************************************************
*                                                                     *
* SNTPD v1.2 - Simple Network Time Protocol server                    *
*                                                                     *
* Copyright (C) 2003 Andrew J. Armstrong                              *
* a.armstrong@optusnet.com.au                                         *
*                                                                     *
* This program is free software; you can redistribute it and/or modify*
* it under the terms of the GNU General Public License as published by*
* the Free Software Foundation; either version 2 of the License, or   *
* (at your option) any later version.                                 *
* This program is distributed in the hope that it will be useful,     *
* but WITHOUT ANY WARRANTY; without even the implied warranty of      *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
* GNU General Public License for more details.                        *
* You should have received a copy of the GNU General Public License   *
* along with this program; if not, write to the Free Software         *
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307*
*                                                                     *
***********************************************************************
***********************************************************************
**                                                                   **
** NAME     - SNTPD                                                  **
**                                                                   **
** TITLE    - SIMPLE NETWORK TIME DAEMON (SNTPD)                     **
**                                                                   **
** VERSION  - 1.2                                                    **
**                                                                   **
** FUNCTION - This is a Simple Network Time Protocol (SNTPv3)        **
**            server as defined by RFC2030 (which defines SNTPv4,    **
**            but this server does not implement any of the SNTPv4   **
**            optional extensions).                                  **
**                                                                   **
**            This SNTP server listens for UDP packets on port 123   **
**            and responds the current TOD clock time to any NTP v1, **
**            v2, v3, or v4 client to a precision of 2 microseconds. **
**                                                                   **
**                                                                   **
** LOGIC    - 0. Initialise TCP sockets.                             **
**                                                                   **
**            1. Execute any command supplied on the EXEC PARM.      **
**                                                                   **
**            2. Execute any command supplied on the START command.  **
**                                                                   **
**            3. Wait next incoming UDP packet or operator command.  **
**                                                                   **
**            4. If a UDP packet has arrived:                        **
**                                                                   **
**               a. Receive it.                                      **
**                                                                   **
**               b. Store current time and build a reply UDP packet. **
**                                                                   **
**               c. Send reply packet.                               **
**                                                                   **
**            5. If an operator command was issued:                  **
**                                                                   **
**               a. Execute the operator command.                    **
**                                                                   **
**            6. Repeat 3-to-5 until operator stops/cancels task.    **
**                                                                   **
**                                                                   **
** NOTES    - 1. The assembler variable naming convention used is:   **
**                                                                   **
**               Prefix DS      Meaning            Content example   **
**               ------ ------- ------------------ ---------------   **
**                 n    F       Fullword number    F'-123'           **
**                 h    H       Halfword number    H'-123'           **
**                 x    CLn     Hex string         C'09AB'           **
**                 s    CLn     String             C'Hello'          **
**                 c    CL1     Single character   C'A'              **
**                 d    D       Double word        D'0'              **
**                 p    A       Pointer            A(EXIT)           **
**                 b    B       Boolean            B'1'              **
**                                                                   **
**                                                                   **
**            2. In comments, each occurrence of '->' means          **
**               'pointer to' or 'address of'.                       **
**                                                                   **
**            3. This server cannot alter the Time Of Day (TOD)      **
**               clock. If you specify the TOD +hhmm adjustment      **
**               command then that adjustment is applied each time a **
**               TOD clock value is to be translated to an RFC2030   **
**               clock value for transmission to an NTP client.      **
**               Altering the actual hardware TOD clock requires     **
**               operator intervention and cannot be done by a       **
**               program alone.                                      **
**                                                                   **
**                                                                   **
** ON ENTRY - R1 -> Parameter list...                                **
**                  A(execparms) -> AL2(len),CL(len)'parm data'      **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
**                                                                   **
** BUILD JCL- Sample JCL to assemble/link is as follows:             **
**                                                                   **
**            //jobname  JOB ,'acct',CLASS=A,MSGCLASS=X,             **
**            //             NOTIFY=&SYSUID                          **
**            //*                                                    **
**            //*--------------------------------------------------- **
**            //*        Set installation specific stuff here...     **
**            //*--------------------------------------------------- **
**            //*                                                    **
**            //         SET SRC=your.source.pds                     **
**            //         SET LIB=your.load.library                   **
**            //         SET SEZATCP=TCPIP.SEZATCP                   **
**            //*                                                    **
**            //*--------------------------------------------------- **
**            //*        Assemble                                    **
**            //*--------------------------------------------------- **
**            //*                                                    **
**            //ASM     EXEC PGM=ASMA90,PARM='OBJECT,NODECK'         **
**            //SYSLIB    DD DISP=SHR,DSN=SYS1.MODGEN                **
**            //          DD DISP=SHR,DSN=SYS1.MACLIB                **
**            //          DD DISP=SHR,DSN=&SEZATCP                   **
**            //          DD DISP=SHR,DSN=&SRC                       **
**            //SYSUT1    DD DSN=&&SYSUT1,                           **
**            //             SPACE=(4096,(120,120),,,ROUND),         **
**            //             UNIT=VIO,DCB=BUFNO=1                    **
**            //SYSPRINT  DD SYSOUT=*                                **
**            //SYSLIN    DD DSN=&&OBJ,SPACE=(3040,(40,40),,,ROUND), **
**            //             UNIT=VIO,DISP=(MOD,PASS),               **
**            //             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,   **
**            //             BUFNO=1)                                **
**            //SYSIN     DD DISP=SHR,DSN=&SRC(SNTPD)                **
**            //          DD DISP=SHR,DSN=&SRC(GETCMD)               **
**            //*                                                    **
**            //*--------------------------------------------------- **
**            //*        Link                                        **
**            //*--------------------------------------------------- **
**            //*                                                    **
**            //LINK    EXEC PGM=HEWL,PARM='MAP,LET,LIST,NCAL,AC=1', **
**            //             COND=(8,LT,ASM)                         **
**            //SYSLIB    DD DISP=SHR,DSN=&SEZATCP                   **
**            //SYSLIN    DD  DSN=&&OBJ,DISP=(OLD,DELETE)            **
**            //          DD  DDNAME=SYSIN                           **
**            //SYSIN     DD *                                       **
**                INCLUDE SYSLIB(EZASOKET)                           **
**                NAME    SNTPD(R)                                   **
**            /*                                                     **
**            //SYSLMOD   DD DISP=SHR,DSN=&LIB                       **
**            //SYSUT1    DD DSN=&&SYSUT1,                           **
**            //             SPACE=(1024,(120,120),,,ROUND),         **
**            //             UNIT=VIO,DCB=BUFNO=1                    **
**            //SYSPRINT  DD SYSOUT=*                                **
**                                                                   **
** RUN JCL  - Sample started task JCL is as follows:                 **
**                                                                   **
**            //TCPSNTP  PROC                                        **
**            //*                                                    **
**            //*--------------------------------------------------- **
**            //*        Set installation specific stuff here...     **
**            //*--------------------------------------------------- **
**            //*                                                    **
**            //         SET LIB=your.load.library                   **
**            //*                                                    **
**            //TCPSNTP  EXEC PGM=SNTPD,REGION=0K,TIME=NOLIMIT,      **
**            // PARM='LOG 30,NOSWAP,TOD +1000,STRATUM 2'            **
**            //STEPLIB   DD DISP=SHR,DSN=&LIB                       **
**            //SYSPRINT  DD SYSOUT=*                                **
**            //SYSUDUMP  DD SYSOUT=*                                **
**            //         PEND                                        **
**                                                                   **
** STARTUP  - Sample command to start the server:                    **
**                                                                   **
**            S TCPSNTP,,,LOGGING LEVEL IS 60                        **
**                                                                   **
** SHUTDOWN - Sample command to stop the server:                     **
**                                                                   **
**            P TCPSNTP                                              **
**                                                                   **
**            ...or...                                               **
**                                                                   **
**            F TCPSNTP,STOP                                         **
**                                                                   **
** COMMANDS - Operator commands supported are:                       **
**                                                                   **
**            F TCPSNTP,cmd                                          **
**                                                                   **
**            Where, cmd is:                                         **
**                                                                   **
**            LOG nn                                                 **
**               Set the logging level to nn, where nn is any  numb- **
**               er between 0 and 255 and has the following (cumul-  **
**               ative) meanings:                                    **
**                                                                   **
**                0-9    NONE      No logging                        **
**               10-19   ERROR     Error messages                    **
**               20-24   WARNING   Warning messages                  **
**               25-29   SUMMARY   Summary statistics                **
**               30-39   INFO      Information, short data contents  **
**               40-49   BANNER    Routine labels                    **
**               50-59   DEBUG     Debugging messages                **
**               60-255  DATA      Full data message contents        **
**                                                                   **
**            TOD +hhmm                                              **
**            TOD -hhmm                                              **
**               Set the amount of time to be added to the current   **
**               Time Of Day (TOD) clock value to make it equal to   **
**               UCT (GMT) time. This is to accommodate those sites  **
**               that have their TOD clock set to local time rather  **
**               than UCT (GMT) time.                                **
**                                                                   **
**               If not all digits are specified then the adjustment **
**               is treated as follows:                              **
**                                                                   **
**               +m          = +000m                                 **
**               +mm         = +00mm                                 **
**               +hmm        = +0hmm                                 **
**               +hhmm       = +hhmm                                 **
**                                                                   **
**            NOSWAP                                                 **
**               Attempts to set the address space to run non-       **
**               swappable. The program needs to be APF-authorized if**
**               this to occur (i.e. linkedit with AC=1 and run from **
**               a load library in the APFLIST).                     **
**                                                                   **
**            STRATUM n                                              **
**               Set the stratum level to n, where n is from 0 to 255**
**               as follows (from RFC 2030):                         **
**                                                                   **
**               Stratum  Meaning                                    **
**               -------- -------------------------------------      **
**               0        unspecified or unavailable                 **
**               1        primary reference (e.g., radio clock)      **
**               2-15     secondary reference (via NTP or SNTP)      **
**               16-255   reserved                                   **
**                                                                   **
**               The default stratum is 2.                           **
**                                                                   **
**            SHOW                                                   **
**               Shows the current server settings.                  **
**                                                                   **
** AUTHOR   - Andrew Armstrong (a.armstrong@optusnet.com.au)         **
**            Edigar Sobreira (edigar.sobreira@eds.com)              **
**                                                                   **
**                                                                   **
** HISTORY  - Date     By       Reason (most recent at the top pls)  **
**            -------- -------- ------------------------------------ **
**            20031205 AJA      Added SHOW command.                  **
**            20031205 AJA      Added STRATUM command.               **
**            20031107 Edigar   Changed the STRATUM value to 2.      **
**            20031107 Edigar   Added F xxx,STOP possibility.        **
**            20031107 Edigar   Added NOSWAP command.                **
**            20031107 Edigar   Allowed multiples parm values.       **
**            20031106 AJA      Added TOD command.                   **
**            20011227 AJA      Added version to start up message.   **
**            20011128 AJA      Allowed NTP V4 clients to connect.   **
**            20011121 AJA      Added MODIFY command interface.      **
**            20010822 AJA      Initial version.                     **
**                                                                   **
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                         R E G I S T E R S                           *
*                                                                     *
***********************************************************************

R0       EQU   0                  Work
R1       EQU   1                  Work
R2       EQU   2                  Work
R3       EQU   3                  Work
R4       EQU   4                  Work
R5       EQU   5                  Work
R6       EQU   6                  Work
R7       EQU   7                  Work
R8       EQU   8                  Work
R9       EQU   9                  Internal linkage
R10      EQU   10                 Internal linkage
R11      EQU   11                 -> CSECT+4096 (Base register 2)
R12      EQU   12                 -> CSECT+0    (Base register 1)
R13      EQU   13                 -> Working storage
R14      EQU   14                 External linkage
R15      EQU   15                 External linkage

         EJECT
***********************************************************************
*                                                                     *
*                          M A I N L I N E                            *
*                                                                     *
***********************************************************************
         DEBUG OFF

SNTPD    AMODE 31
SNTPD    RMODE 24                 Keep DCB below the 16MB line
SNTPD    CSECT
EYECATCH EYECATCH                 Put eye-catcher in CSECT storage
         STM   R14,R12,12(R13)
         LR    R12,R15
         LA    R11,4095(R12)
         LA    R11,1(R11)
         USING SNTPD,R12,R11
*        -------------------
         LR    R4,R1             -> A(AL2(len),CL(len)'exec parm data')

         STORAGE OBTAIN,LENGTH=WORKAREA_LENGTH,LOC=ANY
         LTR   R15,R15
         JNZ   Quit

         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING WORKAREA,R13
*        ------------------

*---------------------------------------------------------------------*
*        Initialise                                                   *
*---------------------------------------------------------------------*

         MVC   sEyeCatch,EYECATCH Put eye-catcher in working storage
         MVC   sWorkArea,=C'WORKAREA'
         MVC   dClockAdj,=D'0'
         MVI   cClockSign,C'+'
         MVI   cLogLevel,INFO Set logging level
         MVI   cStratumReq,NTP_STRATUM_SECONDARY
         MVI   sMsg,C' '
         MVC   sMsg+1(L'sMsg-1),sMsg

*---------------------------------------------------------------------*
*        Open the log file                                            *
*---------------------------------------------------------------------*

         OPEN  (SYSPRINT,OUTPUT),MODE=31
         LTR   R15,R15
         JNZ   Release
         LOG   'Starting time server V1.2.&SYSDATC',                   X
               WRITER=ToLogAndOper

*---------------------------------------------------------------------*
*        Execute command in the PARM= operand of the EXEC card        *
*---------------------------------------------------------------------*

         BRAS  R10,getParmCommand

*---------------------------------------------------------------------*
*        Execute command passed on the START command                  *
*---------------------------------------------------------------------*

         BRAS  R10,getConsoleCommand

*---------------------------------------------------------------------*
*        Print activity log headings                                  *
*---------------------------------------------------------------------*

         LOG   'Source Address        Received Clock   Difference Sent X
               Clock       TOD Clock       '
         LOG   '--------------------- ---------------- ---------- -----X
               ----------- ----------------'

*---------------------------------------------------------------------*
*        Create UDP socket (INITAPI will be done implicitly)          *
*---------------------------------------------------------------------*

         LOG   'Socket()',LEVEL=DEBUG

         MVC   sCall,sSocket      What we are doing (for error msgs)

         CALL  EZASOKET,                                               X
               (sSocket,          Function                             X
               nFamily,           Address family (AF_INET)             X
               nSocType,          Socket type (DGRAM)                  X
               nProto,            Protocol (UDP)                       X
               nErrNo,                                                 X
               nRetCode),                                              X
               VL,                                                     X
               MF=(E,sParms)

         CLC   nRetCode,=F'-1'    Did it work?
         JE    ErrSock            No, branch

         MVC   hSocket,nRetCode+2 Save socket descriptor

*---------------------------------------------------------------------*
*        Bind the socket to port 123 (ntpd)                           *
*---------------------------------------------------------------------*

         LOG   'Bind()',LEVEL=DEBUG

         MVC   hServerFamily,=AL2(AF_INET)
         MVC   hServerPort,hPort             Listen on ntpd port (123)
         MVC   nServerAddress,IN_ADDR_ANY    Listen on all interfaces

         MVC   sCall,sBind        What we are doing (for error msgs)

         CALL  EZASOKET,                                               X
               (sBind,            Function                             X
               hSocket,           Socket to bind                       X
               sServer,           Server socket name                   X
               nErrNo,                                                 X
               nRetCode),                                              X
               VL,                                                     X
               MF=(E,sParms)

         CLC   nRetCode,=F'-1'    Did it work?
         JE    ErrBind            No, branch

*---------------------------------------------------------------------*
*        Wait for network or operator activity                        *
*---------------------------------------------------------------------*

awaitActivity LOG LEVEL=BANNER
         MVC   sCall,sSelectEx    What we are doing (for error msgs)

         LHI   R7,-1              Set mask to all ones
         ST    R7,nOutRMask       Read mask
         ST    R7,nOutEMask       Error mask

         LHI   R7,0               Set mask to all zeros
         ST    R7,nOutWMask       Write mask
         ST    R7,nInRMask
         ST    R7,nInWMask
         ST    R7,nInEMask

         L     R7,pECB            -> Console command ECB

         CALL  EZASOKET,                                               X
               (sSelectEx,        Function                             X
               nMaxSoc,           Bit-width of masks (sort of)         X
               dTimeOut,          Timeout  =A(seconds,microseconds)    X
               nOutRMask,         Read mask                            X
               nOutWMask,         Write mask                           X
               nOutEMask,         Error mask                           X
               nInRMask,          Sockets ready to read                X
               nInWMask,          Sockets ready to write               X
               nInEMask,          Sockets in error                     X
               (R7),              -> Console command ECB               X
               nErrNo,                                                 X
               nRetCode),                                              X
               VL,                                                     X
               MF=(E,sParms)

         DEBUG 'selectex() rc=#nRetCode rmask=#nInRMask emask=#nInEMaskX
                ecb at %R7=%*R7'

         L     R7,nRetCode        Get return code
         LTR   R7,R7              Did it work?
         JM    ErrSelect          No, branch (maybe TCPIP coming down)
         JP    Incoming           Yes, network activity

*                                 Return code is zero, so...
         L     R7,pECB            -> Console command ECB
         TM    0(R7),B'01000000'  Was console command ECB posted?
         JO    Operator           Yes, process console command
         J     TimeOut            No, must be a timeout

*---------------------------------------------------------------------*
*        Process network timeout (only if dTimeOut value is positive) *
*---------------------------------------------------------------------*

TimeOut  LOG   LEVEL=BANNER
         J     awaitActivity

*---------------------------------------------------------------------*
*        Retrieve and execute operator command                        *
*---------------------------------------------------------------------*

Operator DS    0H
         BRAS  R10,getConsoleCommand
         J     awaitActivity

*---------------------------------------------------------------------*
*        Receive next incoming UDP packet                             *
*---------------------------------------------------------------------*

Incoming LOG   LEVEL=BANNER

         LA    R6,L'sPacket       Maximum incoming packet length
         LA    R7,sPacket         -> Where incoming packet is to go

         BRAS  R10,RecvFrom

*---------------------------------------------------------------------*
*        Get address of sender                                        *
*---------------------------------------------------------------------*

         LH    R0,hClientPort
         L     R1,nClientAddress
         BRAS  R10,ntoa

*---------------------------------------------------------------------*
*        Get the current time of day clock value                      *
*---------------------------------------------------------------------*

         STCK  dClock            Bit 51 = microseconds since 1/1/1900

*---------------------------------------------------------------------*
*        Optionally, adjust the TOD value by +/-hhmm                  *
*---------------------------------------------------------------------*

         CLC   dClockAdj,=D'0'   Did the user specify an adjustment?
         JE    NoClockAdj        No, jump

         LM    R0,R1,dClock      Get TOD clock value
         AL    R1,dClockAdj+4    Add low order word of adjustment
         BRC   B'1100',NoCarry   Jump if no carry to account for
         AL    R0,=F'1'          Else add carry out to high order word
NoCarry  DS    0H
         AL    R0,dClockAdj+0    Add high order word of adjustment
         STM   R0,R1,dClock      Update the stored TOD clock value

NoClockAdj DS  0H

*---------------------------------------------------------------------*
*        Log the arrival of a request                                 *
*---------------------------------------------------------------------*

         LOG   'Received from %sAddr at TOD #dClock',LEVEL=DEBUG

*---------------------------------------------------------------------*
*        Dump packet received (only if log level=DEBUG or higher)     *
*---------------------------------------------------------------------*

         L     R6,nByte           Length of incoming packet
         LA    R7,sPacket         -> Data to dump
         MVC   sMsgAction,=C'Recv'
         BRAS  R10,Dump

*---------------------------------------------------------------------*
*       Build reply packet                                            *
*---------------------------------------------------------------------*

*        Validate version number (ignore if not 1, 2, 3, or 4)...
         MVC   cVersion,cHeader
         NI    cVersion,NTP_VERSION_MASK
         CLI   cVersion,0
         JE    awaitActivity
         CLI   cVersion,NTP_VERSION_4                          20011128
         JH    awaitActivity

*        Set leap indicator...
         NI    cHeader,X'FF'-NTP_LEAP_INDICATOR_MASK
         OI    cHeader,NTP_LEAP_NO_WARNING     Set no warning

*        Massage the mode according to RFC2030...
         MVC   cMode,cHeader         Copy header
         NI    cHeader,X'FF'-NTP_MODE_MASK  Clear mode bits in header
         NI    cMode,NTP_MODE_MASK   Isolate mode bits
         CLI   cMode,NTP_MODE_CLIENT Client mode?
         JE    SetServerMode         Yes, set server mode
         OI    cHeader,NTP_MODE_SYMETRIC_PASSIVE No, set symetric mode
         J     GetTime

SetServerMode  DS 0H
         OI    cHeader,NTP_MODE_SERVER
         J     GetTime

*        Get the time we received the packet...
GetTime  DS    0H
         LM    R0,R1,dClock      R0/1=Time Of Day clock

         SRDL  R0,12+1           R0/1=2us units since 1/1/1900
         D     R0,=F'1000000'    R0=0-999999 x 2us units, R1=2s units
         LR    R2,R1                                      R2=2s units

         XR    R1,R1             R0/1=0-999999 2us units x 2**32
         SRDL  R0,1              R0/1=0-999999 2us units x 2**31
         D     R0,=F'1000000'    R0=junk, R1=binary fraction of 4s
         SLL   R1,1              R0=junk, R1=binary fraction of 2s

         LR    R0,R2             R0=2s units, R1=binary fraction of 2s
         SLDL  R0,1              R0=1s units, R1=binary fraction of 1s

         STM   R0,R1,dTimeRef    Store seconds since 1/1/1900

         MVC   dTimeOrg,dTimeTx   Original time = Client's TX time
         MVC   dTimeRx,dTimeRef
         MVC   dTimeTx,dTimeRef

         MVC   cStratum,cStratumReq Set stratum
         MVI   cPrecision,X'ED' Set precision = -19 (approx. 2us)
         XC    nDelay,nDelay    Set root delay = 0
         XC    nDisp,nDisp      Set root dispersion = 0
         MVC   sRefId,=X'4C4F434C' Set refid = ascii('LOCL')

*---------------------------------------------------------------------*
*        Log this transaction (showing remote/local time difference)  *
*---------------------------------------------------------------------*

         LM    R0,R1,dTimeTx      Get local time  R0=secs R1=fraction
         LM    R2,R3,dTimeOrg     Get remote time R2=secs R3=fraction
         SRDL  R0,1               Ensure sign bit is zero (by halving)
         SRDL  R2,1               Ensure sign bit is zero (by halving)
         SR    R0,R2              R0 = secs difference (signed)
         SLR   R1,R3              R1 = fraction difference (unsigned)
         BRC   B'0001',noAdjust   Jump if carry (n/a,nz+nc,z+c,nz+c)
         BCTR  R0,*-*             Else subtract 1 second
noAdjust DS    0H
         SLDA  R0,1               Double (retaining sign)

         LTR   R4,R0              Save sign
         JNM   NotNeg             Jump if zero or positive
*        R0/1 is negative, so compute twos complement...
         X     R0,=F'-1'          Invert high order word
         X     R1,=F'-1'          Invert low order word
         AL    R1,=F'1'           Add to low order word
         BRC   B'1100',NotNeg     Jump no carry (z+nc,nz+nc,z+c,nz+c)
         AHI   R0,1               Else add 1 to high order word
NotNeg   DS    0H
*                                 R0/1 = nnnnnnnn ffffffff (n.f secs)
*        But we only want 1/4096 second (0.0002s) precision, so...
         SRDL  R0,32-12           R0/1 = 00000nnn nnnnnfff (n.f secs)

         LTR   R0,R0              Is R0 zero? (can only multiply R1)
         JZ    NumOK              Yes, continue
         MVC   sDiff,=CL10'+Overflow' No, indicate overflow
         J     SetSign            ...and set the sign

NumOK    DS    0H
         M     R0,=F'1000'        R0/1 = vvvvvvvv vvvvvwww (v.w ms)
         SLDL  R0,32-12           R0/1 = vvvvvvvv www00000 (R0=v ms)
         CVD   R0,d0              Difference in milliseconds
*                        b 0 0 0 0 0 . 0 0 0
         MVC   sDiff,=X'2120202020204B212020' Set edit pattern
         ED    sDiff,d0+3         C' abcde.fgh' <-- X'0abcdefghC'

SetSign  DS    0H
         MVI   sDiff,C'+'         C'+abcde.fgh'
         LTR   R4,R4              Was sign originally negative?
         JNM   SignOK             No, jump
         MVI   sDiff,C'-'         C'-abcde.fgh'
SignOK   DS    0H

         LOG   '%sAddr #dTimeOrg %sDiff #dTimeTx #dClock',             X
               LEVEL=INFO

*---------------------------------------------------------------------*
*        Dump reply to be sent (only if loglevel=DEBUG or higher)     *
*---------------------------------------------------------------------*

         LHI   R6,PACKET_LENGTH   Length of outgoing packet
         LA    R7,sPacket         -> Data to dump
         MVC   sMsgAction,=C'Send'
         BRAS  R10,Dump

*---------------------------------------------------------------------*
*        Send reply UDP packet                                        *
*---------------------------------------------------------------------*

         LOG   'SendTo()',LEVEL=DEBUG

         LHI   R6,PACKET_LENGTH   Length of outgoing packet
         LA    R7,sPacket         -> Data to dump
         BRAS  R10,SendTo         If we come back, then it worked

         J     awaitActivity

*---------------------------------------------------------------------*
*        End of job                                                   *
*---------------------------------------------------------------------*

Exit     DS    0H
         LOG   'Time server shutting down',WRITER=ToLogAndOper

         CLOSE (SYSPRINT,FREE),MODE=31

*---------------------------------------------------------------------*
*        Release work area                                            *
*---------------------------------------------------------------------*

Release  DS    0H
         LR    R1,R13             -> Area to be released
         L     R13,4(,R13)        -> Callers savearea
         SLR   R2,R2
         ST    R2,16(,R13)        Set return code
         LHI   R0,WORKAREA_LENGTH
         STORAGE RELEASE,ADDR=(1),LENGTH=(0) Release work area

*---------------------------------------------------------------------*
*        Return                                                       *
*---------------------------------------------------------------------*

Quit     DS    0H
         LM    R14,R12,12(R13)
         BR    R14

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Execute the command passed on the PARM= operand of the **
**            EXEC JCL statement.                                    **
**                                                                   **
** ON ENTRY - R4  -> A(AL2(len),CL(len)'exec parm data')             **
**            R10  = Return address                                  **
**                                                                   **
** ON EXIT  - sCommand = PARM data                                   **
**                                                                   **
***********************************************************************

getParmCommand DS 0H
         ST    R10,nR10Prm

         L     R4,0(,R4)          -> AL2(len),CL(len)'parm data'
         LH    R1,0(,R4)          Get length of PARM= data
         LTR   R1,R1              Any PARM= data present?
         JNP   ParmRet            No, jump

         XC    wCommand,wCommand
         BCTR  R1,*-*             -1 for EX
CopyParm MVC   wCommand(*-*),2(R4)
         EX    R1,CopyParm        Copy PARM= data to sCommand

*---------------------------------------------------------------------*
*        Get next comma-separated command                             *
*---------------------------------------------------------------------*

         LH    R3,0(,R4)          Get length of command(s) buffer
         LA    R4,wCommand        -> Source command(s) buffer

nextCommand DS  0H
         LA    R2,sCommand        -> Target command buffer

nextCommandByte DS 0H
         CLI   0(R4),C','         End of command?
         JE    executeCommand     Yes, jump

         MVC   0(1,R2),0(R4)      No, append next character
         LA    R4,1(,R4)          -> Next source byte
         LA    R2,1(,R2)          -> Next target byte
         BCT   R3,nextCommandByte

         BRAS  R10,Command        Execute last command in sCommand
         J     ParmRet

executeCommand DS 0H
         BRAS  R10,Command        Execute next command in sCommand
         XC    sCommand,sCommand
         LA    R4,1(,R4)
         BCT   R3,nextCommand

ParmRet  DS    0H
         L     R10,nR10Prm
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Get next console command issued by the operator.       **
**                                                                   **
**                                                                   **
** ON ENTRY -                                                        **
**            R10  = Return address                                  **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
***********************************************************************

getConsoleCommand DS 0H
         ST    R10,nR10Opr

         CALL  GETCMD,                                                 X
               (cCmdChar,         For example, 'F' for MODIFY          X
               sCommand,          Command operands (padded with nulls) X
               pECB),             -> ECB to wait on for next command   X
               VL,                                                     X
               MF=(E,sParms)

         LOG   'Command=%cCmdChar ECB=%pECB',LEVEL=DEBUG

         CLI   cCmdChar,C'F'      MODIFY command issued?
         JE    ModifyCommand      Yes, jump

         CLI   cCmdChar,C'S'      START command issued?
         JE    StartCommand       Yes, jump

         CLI   cCmdChar,C'P'      STOP command issued?
         JE    StopCommand        Yes, jump

         J     CommandRet         No, ignore this command

*---------------------------------------------------------------------*
*        Process MODIFY command                                       *
*---------------------------------------------------------------------*

ModifyCommand DS 0H
         BRAS  R10,Command
         J     CommandRet

*---------------------------------------------------------------------*
*        Process START  command                                       *
*---------------------------------------------------------------------*

StartCommand  DS 0H
         BRAS  R10,Command
         J     CommandRet

*---------------------------------------------------------------------*
*        Process STOP   command                                       *
*---------------------------------------------------------------------*

StopCommand DS 0H
         J     Exit               Exit, stage left...

CommandRet DS  0H
         L     R10,nR10Opr
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Execute a command.                                     **
**                                                                   **
**                                                                   **
** ON ENTRY - R10 =  Return address                                  **
**            sCommand = Command to be executed.                     **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
***********************************************************************

Command  DS    0H
         ST    R10,nR10Cmd

         CLI   sCommand,0         Command given?
         JE    CommandDone        No, return immediately

         LOG   'Command=%sCmdShort',LEVEL=INFO

         MVC   nNumbers,=F'0'     Count of numbers found in input

*        ----- cycle through valid commands here        -----
*        ----- possibly using a command table           -----

         CLC   =C'LOG',sCommand
         JE    LogCommand

         CLC   =C'TOD ',sCommand
         JE    TodCommand

         CLC   =C'NOSWAP',sCommand
         JE    NoSwap

         CLC   =C'STOP',sCommand
         JE    StopCommand

         CLC   =C'STRATUM',sCommand
         JE    StratumCommand

         CLC   =C'SHOW',sCommand
         JE    ShowCommand

         J     CommandInvalid

*---------------------------------------------------------------------*
*        Process command: LOG nn                                      *
*---------------------------------------------------------------------*

LogCommand DS  0H
         LA    R2,sCommand        -> LOG command
         LA    R1,L'sCommand      Length of command

         BRAS  R10,GetNum         Get first number if any
         CHI   R0,DATA            Is logging level too high?
         JNH   SetLoggingLevel    No, jump
         LHI   R0,DATA            Yes, set to maximum

SetLoggingLevel DS 0H
         STC   R0,cLogLevel
         BRAS  R9,showLoggingLevel
         J     CommandDone

*---------------------------------------------------------------------*
*        Process command: TOD +hhmm                                   *
*---------------------------------------------------------------------*

TodCommand DS  0H
         LA    R2,sCommand        -> 'TOD +hhmm'
         LA    R1,L'sCommand      Length of command

         BRAS  R10,GetNum         Get first number into R0
         ST    R0,nClockAdj       Save it for later

         SLR   R0,R0              R0=0
         L     R1,nClockAdj       R0=0          R1=hhmm
         D     R0,=F'100'         R0=mm         R1=hh

         CHI   R0,59              Is the minute valid (0-59)?
         JH    BadMinute          No, jump

         CHI   R1,23              Is the hour valid (0-23)?
         JH    BadHour            No, jump

         MH    R1,=H'60'                        R1=hh*60
         AR    R1,R0                            R1=hh*60+mm
         MH    R1,=H'60'                        R1=(hh*60+mm)*60
         SLR   R0,R0              R0=0          R1=(hh*60+mm)*60

         MVI   cClockSign,C'+'
         CLI   sCommand+4,C'-'    Negative adjustment?
         JNE   TodStore           No, jump

         MVI   cClockSign,C'-'
         LCR   R1,R1              R0=0          R1=-((hh*60+mm)*60)

TodStore DS    0H
         M     R0,=F'15625'       R0/1 bits 0-63 = +/-n x 64 usecs
         SLDL  R0,12+6            R0/1 bits 0-51 = +/-microseconds
         STM   R0,R1,dClockAdj    R0/1 bits 0-51 = +/-microseconds

         BRAS  R9,showTodAdjustment

         J     CommandDone

BadMinute DS   0H
         LOG   'Invalid minute value. Specify 00 to 59.',              X
               LEVEL=ERROR
         J     CommandDone

BadHour   DS   0H
         LOG   'Invalid hour value. Specify 00 to 23.',                X
               LEVEL=ERROR
         J     CommandDone

*---------------------------------------------------------------------*
*        Process command: NOSWAP                                      *
*---------------------------------------------------------------------*

NoSwap   DS  0H
         TESTAUTH                    Test for APF authorization
         LTR   R15,R15               Are we authorized?
         JZ    setNoSwap             Yes, jump

         LOG   'Address space is not APF-authorized.',                 X
               WRITER=ToLogAndOper
         J     CommandDone

setNoSwap DS   0H
         MODESET MODE=SUP,KEY=ZERO   Get into supervisor state
         XR    R1,R1                 No ECB posting
         SYSEVENT TRANSWAP           Make ourself non-swappable
         MODESET MODE=PROB,KEY=NZERO Back to problem state
         LOG   'Address space is now running Non-swappable.',          X
               WRITER=ToLogAndOper
         J     CommandDone

*---------------------------------------------------------------------*
*        Process command: STRATUM nn                                  *
*---------------------------------------------------------------------*

StratumCommand DS  0H
         LA    R2,sCommand        -> STRATUM command
         LA    R1,L'sCommand      Length of command

         BRAS  R10,GetNum         Get first number if any
         CHI   R0,255             Is stratum number too high?
         JNH   setStratum         No, jump
         LHI   R0,255             Yes, set to maximum

setStratum  DS 0H
         STC   R0,cStratumReq
         BRAS  R9,showStratum
         J     CommandDone

*---------------------------------------------------------------------*
*        Process command: SHOW                                        *
*---------------------------------------------------------------------*

ShowCommand    DS  0H
         BRAS  R9,showStratum
         BRAS  R9,showLoggingLevel
         BRAS  R9,showTodAdjustment
         J     CommandDone

showStratum    DS  0H
         SLR   R0,R0
         IC    R0,cStratumReq
         CVD   R0,dWork
         UNPK  sStratum,dWork+6(2)
         OI    sStratum+2,X'F0'
         LOG   'Stratum is now %sStratum',                             X
               WRITER=ToLogAndOper
         BR    R9

showLoggingLevel DS 0H
         SLR   R0,R0
         IC    R0,cLogLevel
         CVD   R0,dWork
         UNPK  sLogLevel,dWork+6(2)
         OI    sLogLevel+2,X'F0'
         LOG   'Logging level is now %sLogLevel',                      X
               WRITER=ToLogAndOper
         BR    R9

showTodAdjustment DS 0H
         L     R0,nClockAdj       Get hhmm specified
*                                     +0 1 2 3 4 5 6 7
         CVD   R0,dWork              X'00000000000hhmmC'
         UNPK  sClockAdj,dWork+5(3)  X'F0FhFhFmCm'
         OI    sClockAdj+4,X'F0'     X'F0FhFhFmFm'
         MVC   sClockAdj(1),cClockSign  C'+hhmm'
         LOG   'TOD adjustment is now %sClockAdj (hhmm)',              X
               WRITER=ToLogAndOper
         BR    R9

*---------------------------------------------------------------------*
*        Process invalid command                                      *
*---------------------------------------------------------------------*

CommandInvalid DS 0H
         LOG   'Unknown command: %sCmdShort',                          X
               WRITER=ToLogAndOper
         LOG   'Valid commands are:',                                  X
               WRITER=ToLogAndOper
         LOG   '  LOG nn     - Set logging level (0-60)',              X
               WRITER=ToLogAndOper
         LOG   '  NOSWAP     - Make the time server NONSWAPPABLE',     X
               WRITER=ToLogAndOper
         LOG   '  SHOW       - Show current server settings',          X
               WRITER=ToLogAndOper
         LOG   '  STOP       - Shut down the time server',             X
               WRITER=ToLogAndOper
         LOG   '  STRATUM nn - Set the server''s stratum (0-255)',     X
               WRITER=ToLogAndOper
         LOG   '  TOD +hhmm  - Adjust TOD clock by +/- hhmm',          X
               WRITER=ToLogAndOper
         J     CommandDone

CommandDone DS 0H
         L     R10,nR10Cmd
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Find and convert the next number in an input string    **
**            to binary.                                             **
**                                                                   **
** ON ENTRY - R10 =  Return address                                  **
**            R2  -> String to search                                **
**            R1  =  L'String to search                              **
**            nNumbers = n                                           **
**                                                                   **
** ON EXIT  - R2  -> First non-numeric digit after the found number  **
**            R1  =  L'String left to search                         **
**            R0  =  Number (or zero if no number was found)         **
**            nNumbers = n+1 if a number was found                   **
**                                                                   **
***********************************************************************

GetNum   DS    0H

         SLR   R0,R0              Return 0 by default

         LTR   R1,R1              Any remaining string to search?
         JNP   RetNum             No, return 0

SkipDig  DS    0H
         CLI   0(R2),C'0'         Is this a digit?
         JL    SkipNext           No, skip it
         CLI   0(R2),C'9'         Is this a digit?
         JNH   First              Yes, branch (first digit found)
SkipNext DS    0H
         LA    R2,1(,R2)          -> Next input character
         BRCT  R1,SkipDig         ...until input exhausted...
         J     RetNum             in which case return 0

First    DS    0H                 R2  -> 'nnnxx...'
         LR    R15,R2             R15 -> 'nnnxx...'
NextDig  DS    0H
         CLI   0(R2),C'0'         Is this a digit?
         JL    Last               No, branch (end of number found)
         CLI   0(R2),C'9'         Is this a digit?
         JH    Last               No, branch (end of number found)
         LA    R2,1(,R2)          -> Next input character
         BRCT  R1,NextDig         ...until input exhausted...
*                                 in which case return the number

Last     DS    0H                 R15 -> 'nnnxx...'
         LR    R14,R2
         SR    R14,R15            R14 = Number of digits
         JNP   RetNum             Safety check

         CHI   R14,16             Too long for a PACK instruction?
         JNH   DigOK              No, branch

         LR    R15,R2             Yes, accept only the last 16 digits
         LHI   R14,16
         SR    R15,R14

DigOK    DS    0H
         BCTR  R14,*-*
PackDig  PACK  dWork,0(*-*,R15)
         EX    R14,PackDig

         CVB   R0,dWork

         L     R15,nNumbers
         AHI   R15,1
         ST    R15,nNumbers

RetNum   DS    0H
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Dump characters to log.   For the first line only, the **
**            length of the data is displayed.  For subsequent lines **
**            the offset into the data is displayed.                 **
**                                                                   **
** ON ENTRY - R7  -> Text to dump                                    **
**            R6   = Length of text to be dumped                     **
**            R10  = Return address                                  **
**                                                                   **
** ON EXIT  - R5, R6 Clobbered                                       **
**                                                                   **
**                                                                   **
***********************************************************************

Dump     DS    0H
         STM   R9,R10,dDump
         CLI   cLogLevel,DEBUG    Dump at this logging level?
         JL    DumpRet            No, branch (do not dump)

         ST    R6,nWork           Save length to be displayed

         CLI   cLogLevel,DATA     Data or higher logging level?
         JNL   DumpFull           Yes, dump full message content

         CHI   R6,L'sMsgString    At least one line to dump?
         JL    DumpFull           No, dump short line

         LHI   R6,L'sMsgString    Yes, dump only one line

DumpFull DS    0H

         LA    R7,0(,R7)          Knock the top bit off
         LR    R9,R7              -> Data to be dumped

         BRAS  R10,SetupMsg       Build message header

DumpNext DS    0H
         LTR   R6,R6              Is there any more to be logged?
         JNP   DumpRet            Yes, branch

         LHI   R5,L'sMsgString    Get length of chunk
         CR    R6,R5              Is there more than a chunk to log?
         JNL   DumpCopy           Yes, branch

         LR    R5,R6              No, log the residual then
DumpCopy MVC   sMsgString(*-*),0(R9)
         SR    R6,R5              Compute length remaining

         MVI   sMsgPlus,C'+'      Indicate that it is an offset
         LR    R0,R9              -> Some way into the text
         SR    R0,R7              Compute offset into the text
         JNZ   OffsetNotZero

         L     R0,nWork           Get length to be displayed
         MVI   sMsgPlus,C' '      Indicate that it is a length

OffsetNotZero DS  0H
         CVD   R0,dWork
         UNPK  sMsgOffset,dWork+5(3)
         OI    sMsgOffset+4,X'F0'

         MVC   sMsgQuote1,=C' '''

         BCTR  R5,*-*             -1 for EX
         EX    R5,DumpCopy        Copy next chunk

         LA    R5,sMsgString+1(R5)
         MVI   0(R5),C''''

         BRAS  R10,ToLog          Log chunk

         MVI   sMsgText,C' '
         MVC   sMsgText+1(L'sMsgText-1),sMsgText

         LA    R9,L'sMsgString(,R9) -> Next input chunk
         J     DumpNext

DumpRet  DS    0H
         LM    R9,R10,dDump
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Send the requested number of bytes to the socket.      **
**                                                                   **
**                                                                   **
** ON ENTRY - R6   = Number of bytes to send                         **
**            R7  -> Send buffer                                     **
**            R10  = Return address                                  **
**                                                                   **
** ON EXIT  - R7  -> Byte after the last byte sent                   **
**                                                                   **
**                                                                   **
***********************************************************************

SendTo   DS    0H
         MVC   sCall,sSendTo      What we are doing (for error msgs)
         ST    R6,nByte           Set number of bytes to send

         CALL  EZASOKET,                                               X
               (sSendTo,          Function                             X
               hSocket,           Socket descriptor                    X
               nFlag,             Flag indicating 'send data'          X
               nByte,             Length of data to be sent            X
               (R7),              -> Data to be sent                   X
               sClient,           Client socket name                   X
               nErrNo,                                                 X
               nRetCode),                                              X
               VL,                                                     X
               MF=(E,sParms)

         L     R15,nRetCode       Get return code
         LTR   R15,R15            Did it work?
         JM    ErrSend            No, branch

         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Read the requested number of bytes from the socket.    **
**                                                                   **
**                                                                   **
** ON ENTRY - R6   = Number of bytes to receive                      **
**            R7  -> Receive buffer                                  **
**            R10  = Return address                                  **
**                                                                   **
** ON EXIT  - R7  -> Byte after the last byte received               **
**                                                                   **
**                                                                   **
***********************************************************************

RecvFrom DS    0H
         MVC   sCall,sRecvFrom    What we are doing (for error msgs)
         ST    R6,nByte           Set number of bytes to read

         CALL  EZASOKET,                                               X
               (sRecvFrom,        Function                             X
               hSocket,           Socket descriptor                    X
               nFlag,             Flag indicating 'read data'          X
               nByte,             Length of data to be read            X
               (R7),              -> Buffer to hold data received      X
               sClient,           Client socket name                   X
               nErrNo,                                                 X
               nRetCode),                                              X
               VL,                                                     X
               MF=(E,sParms)

         L     R15,nRetCode       Get return code
         LTR   R15,R15            Did it work?
         JM    ErrRead            No, branch
*------- JZ    ErrDisc            No, closed by other end

         ST    R15,nByte          Set number of bytes actually read

         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Error processing routines.                             **
**                                                                   **
**                                                                   **
** ON ENTRY -                                                        **
**                                                                   **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
**                                                                   **
***********************************************************************

ErrSock  DS    0H                       Socket() failed
         BRAS  R10,SaySock
         MVC   sErrText(L'sErrSock),sErrSock
         J     ErrReturnMsgSock

ErrBind  DS    0H                       Bind() failed
         BRAS  R10,SaySock
         MVC   sErrText(L'sErrBind),sErrBind
         J     ErrReturnMsgSock

ErrSelect DS    0H                      SelectEx() failed
         BRAS  R10,SaySock
         MVC   sErrText(L'sErrSelect),sErrSelect
         J     ErrReturnMsgSock

ErrSend  DS    0H                       SendTo() failed
         BRAS  R10,SaySock
         MVC   sErrText(L'sErrSend),sErrSend
         J     ErrReturnMsgSock

ErrRead  DS    0H                       Read() failed
         BRAS  R10,SaySock
         MVC   sErrText(L'sErrRead),sErrRead
         J     ErrReturnMsgSock


ErrReturnMsgSock DS 0H
ErrReturnMsg DS 0H                      WTO and then return message
         MVC   sMsgText(L'sErrText),sErrText
         BRAS  R10,ToLogAndOper
         LA    R7,sErrText
         MVC   nLength,=A(L'sErrText)
         J     Exit

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - This routine converts a binary IP address and port     **
**            number into a printable string.                        **
**                                                                   **
** ON ENTRY - R0  = Binary IP port number                            **
**            R1  = Binary IP address                                **
**            R10 = Return address                                   **
**                                                                   **
** ON EXIT  - sAddr = Dotted decimal IP address and port             **
**                                                                   **
***********************************************************************

ntoa     DS    0H
*                                    R0       R1
*                              0000pppp aabbccdd
         CVD   R0,d0           Convert port number (pppp) to decimal

         SLR   R0,R0           00000000 aabbccdd
         SLDL  R0,8            000000aa bbccdd00
         CVD   R0,d1           IP address digit 1

         SLR   R0,R0           00000000 bbccdd00
         SLDL  R0,8            000000bb ccdd0000
         CVD   R0,d2           IP address digit 2

         SLR   R0,R0           00000000 ccdd0000
         SLDL  R0,8            000000cc dd000000
         CVD   R0,d3           IP address digit 3

         SLR   R0,R0           00000000 dd000000
         SLDL  R0,8            000000dd 00000000
         CVD   R0,d4           IP address digit 4

*                                     0....+...10....+...20
         UNPK  sAddr+00(3),d1+6(2)    nnx
         OI    sAddr+02,X'F0'         nnn
         MVI   sAddr+03,C'.'          nnn.
         UNPK  sAddr+04(3),d2+6(2)    nnn.nnx
         OI    sAddr+06,X'F0'         nnn.nnn.
         MVI   sAddr+07,C'.'          nnn.nnn.
         UNPK  sAddr+08(3),d3+6(2)    nnn.nnn.nnx
         OI    sAddr+10,X'F0'         nnn.nnn.nnn
         MVI   sAddr+11,C'.'          nnn.nnn.nnn.
         UNPK  sAddr+12(3),d4+6(2)    nnn.nnn.nnn.nnx
         OI    sAddr+14,X'F0'         nnn.nnn.nnn.nnn
         MVI   sAddr+15,C':'          nnn.nnn.nnn.nnn:
         UNPK  sAddr+16(5),d0+5(3)    nnn.nnn.nnn.nnn:nnnnx
         OI    sAddr+20,X'F0'         nnn.nnn.nnn.nnn:nnnnn
*                                     0....+...10....+...20
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Write a message to the operator console for a socket   **
**            error.                                                 **
**                                                                   **
** ON ENTRY - R10  = Return address                                  **
**                                                                   **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
**                                                                   **
***********************************************************************

SaySock  DS    0H
         ST    R10,nR10Sock

         L     R1,nErrNo
         CVD   R1,dWork
         MVC   sErrNo,=X'402020202120'
         ED    sErrNo,dWork+5   nnnnn

         LOG   'Socket errno%sErrNo during %sCall',                    X
               LEVEL=ERROR

         L     R10,nR10Sock
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Log a status message for debugging.                    **
**                                                                   **
**                                                                   **
** ON ENTRY - R10  = Return address                                  **
**                                                                   **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
**                                                                   **
***********************************************************************

Say      DS    0H
         ST    R10,nR10

         BRAS  R10,SetupMsg       Build message header

         BRAS  R10,ToLog          Write message to log

         MVI   sMsgText,C' '
         MVC   sMsgText+1(L'sMsgText-1),sMsgText

         L     R10,nR10
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Log a status message for debugging.                    **
**                                                                   **
**                                                                   **
** ON ENTRY - R10  = Return address                                  **
**                                                                   **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
**                                                                   **
***********************************************************************

ToLogAndOper DS 0H
         ST    R10,nR10

         BRAS  R10,SetupMsg       Build message header

         BRAS  R10,ToLog          Write message to log

         BRAS  R10,ToOper         Write message to operator

         MVI   sMsgText,C' '
         MVC   sMsgText+1(L'sMsgText-1),sMsgText

         L     R10,nR10
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Set up all the system fields in the error message.     **
**            That is, date, time, sysid, tranid and progname.       **
**                                                                   **
** ON ENTRY - R10  = Return address                                  **
**                                                                   **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
**                                                                   **
***********************************************************************

SetupMsg DS    0H

         TIME  DEC,sTimeDate,                                          X
               DATETYPE=YYYYMMDD,                                      X
               LINKAGE=SYSTEM
*        sTimeDate DS             XL8'HHMMSSthmiju0000'
*                  DS             XL8'YYYYMMDD00000000'
*                  DS             XL8'0000000000000000'

         MVC   sTimeDate+8+4(8),sTimeDate
*        sTimeDate DS             XL8'HHMMSSthmiju0000'
*                  DS             XL8'YYYYMMDDHHMMSSth'
*                  DS             XL8'miju000000000000'

         MVC   sMsgDate-1(L'sPattern),sPattern
         ED    sMsgDate-1(L'sPattern),sTimeDate+8

         BR    R10
*                   y y y y / m m / d d   h h : m m : s s . n n n
sPattern DC    X'40212020206120206120204021207A20207A20204B202020'

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Write a message to the log.                            **
**                                                                   **
**                                                                   **
** ON ENTRY - R10  = Return address                                  **
**                                                                   **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
**                                                                   **
***********************************************************************

ToLog    DS    0H
         ST    R10,nR10Log

         PUT   SYSPRINT,sMsg

         L     R10,nR10Log
         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
**                                                                   **
** FUNCTION - Write a message to the operator (and log).             **
**                                                                   **
**                                                                   **
** ON ENTRY - R10  = Return address                                  **
**                                                                   **
**                                                                   **
** ON EXIT  -                                                        **
**                                                                   **
**                                                                   **
***********************************************************************

ToOper   DS    0H

         LHI   R1,L'sMsgWTO       Length of message
         STH   R1,hMsgWTO

         MVC   sMsgWTO,sMsgText

         LA    R2,hMsgWTO          -> H'len',CL(len)'message text'
         WTO   TEXT=(R2)

         BR    R10

*========================== END OF ROUTINE ===========================*
         EJECT
***********************************************************************
*                                                                     *
*                           E Q U A T E S                             *
*                                                                     *
***********************************************************************

*---------------------------------------------------------------------*
*        Logging levels                                               *
*---------------------------------------------------------------------*

NONE     EQU   0
ERROR    EQU   10
WARNING  EQU   20
SUMMARY  EQU   25
INFO     EQU   30
BANNER   EQU   40
DEBUG    EQU   50
DATA     EQU   60

*---------------------------------------------------------------------*
*        Socket constants                                             *
*---------------------------------------------------------------------*

AF_INET       EQU   2             TCP/IP sockets addressing family

SOCK_STREAM   EQU   1             Stream socket type
SOCK_DGRAM    EQU   2             Datagram socket type
SOCK_RAW      EQU   3             Raw socket type

PROT_DEFAULT  EQU   0             Default protocol for the socket type

EINPROGRESS   EQU   36
         EJECT
***********************************************************************
*                                                                     *
*                          L I T E R A L S                            *
*                                                                     *
***********************************************************************

         LTORG

         EJECT
***********************************************************************
*                                                                     *
*                         C O N S T A N T S                           *
*                                                                     *
***********************************************************************

*---------------------------------------------------------------------*
*        Socket API constants                                         *
*---------------------------------------------------------------------*

               DS    0D
sInitAPI       DC    CL16'INITAPI'       Initialise the Socket API
sSocket        DC    CL16'SOCKET'        Create a socket
sBind          DC    CL16'BIND'          Bind a socket
sSendTo        DC    CL16'SENDTO'        Send data to a remote host
sRecvFrom      DC    CL16'RECVFROM'      Receive data from remote host
sSelectEx      DC    CL16'SELECTEX'      Select (extended)

nFamily  DC    A(AF_INET)         Addressing family
nSocType DC    A(SOCK_DGRAM)      Socket type
nProto   DC    A(PROT_DEFAULT)    Default protocol (UDP for datagrams)

dTimeOut DC    A(-1,-1)           Select timeout (seconds,microseconds)
nMaxSoc  DC    F'31'              Maximum sockets

nOutWMask  DC  F'0'
nOutRMask  DC  F'0'
nOutEMask  DC  F'0'
nInWMask   DC  F'0'
nInRMask   DC  F'0'
nInEMask   DC  F'0'

nFlag    DC    F'0'               RecvFrom flag = 0 (read data)
hPort    DC    H'123'             Port to listen on
IN_ADDR_ANY DC F'0'               IP address 0.0.0.0

*---------------------------------------------------------------------*
*        Message constants                                            *
*---------------------------------------------------------------------*

*                0....+...10....+...20....+...30....+...40....+...50
sErrSock   DC  C'Socket() call failed'
sErrBind   DC  C'Bind() call failed'
sErrSend   DC  C'SendTo() call failed'
sErrRead   DC  C'RecvFrom() call failed'
sErrSelect DC  C'SelectEx() call failed'
*                0....+...10....+...20....+...30....+...40....+...50

*---------------------------------------------------------------------*
*        Other constants                                              *
*---------------------------------------------------------------------*

         DS    0F
nErrMsg  DC    A(sErrMsgZ-sErrMsg) Length of WTO error message

*---------------------------------------------------------------------*
*        Log file DCB                                                 *
*---------------------------------------------------------------------*

SYSPRINT DCB   DSORG=PS,                                               X
               MACRF=PM,                                               X
               RECFM=FB,                                               X
               LRECL=L'sMsg,                                           X
               BLKSIZE=10*L'sMsg,                                      X
               DCBE=DCBE,                                              X
               DDNAME=SYSPRINT                                         X

DCBE     DCBE  SYNAD=Release
         EJECT
***********************************************************************
*                                                                     *
*                            D S E C T S                              *
*                                                                     *
***********************************************************************

         CVT   DSECT=YES
         EJECT
***********************************************************************
*                                                                     *
*                          W O R K A R E A                            *
*                                                                     *
***********************************************************************

WORKAREA  DSECT
SAVEAREA  DS   18F                <-- NB: MUST be first in DSECT

sEyeCatch DC   CL8'SNTPD'         Eye-catcher in dumps
sWorkArea DC   CL8'WORKAREA'      Eye-catcher in dumps

dClock   DS    D                  TOD clock
dClockAdj DS   D                  TOD clock adjustment
dWork    DS    D                  Work area
dTime    DS    D                  Work area
dDump    DS    D                  Work area
d0       DS    D                  Work area
d1       DS    D                  Work area
d2       DS    D                  Work area
d3       DS    D                  Work area
d4       DS    D                  Work area

cClockSign DS  CL1'+'
sClockAdj  DS  CL5'0HHMM'
sDiff    DS    C'+nnnnn.nnn'

sTimeDate DS   XL24

nWork    DS    F                  Work area
nR10     DS    F                  Work area
nR10Sock DS    F                  Work area
nR10Err  DS    F                  Work area
nR10Log  DS    F                  Work area
nR10Opr  DS    F                  Work area
nR10Prm  DS    F                  Work area
nR10Cmd  DS    F                  Work area
nClockAdj DS   F                  Work area

nNumbers DS    F                  Number of numbers
n1       DS    F                  Number 1

sAddr     DS    C'nnn.nnn.nnn.nnn:nnnnn'  Dotted IP address and port

cLogLevel   DS    X               Logging level requested
sLogLevel   DS    CL3             Logging level requested (decimal)
cStratumReq DS    X               Stratum level requested
sStratum    DS    CL3             Stratum level requested (decimal)

*---------------------------------------------------------------------*
*        Operator command interface                                   *
*---------------------------------------------------------------------*

cCmdChar    DS    C
sCmdShort   DS    0CL32
sCommand    DS    CL256
wCommand    DS    CL256
pECB        DS    A

*---------------------------------------------------------------------*
*        Error message buffer                                         *
*---------------------------------------------------------------------*

nLength  DS    F

sErrMsg     DS    0C
sErrText    DS    CL60            Brief message text
sErrMsgZ    EQU   *

*---------------------------------------------------------------------*
*        Error message buffer                                         *
*---------------------------------------------------------------------*

hMsgWTO     DS    H
sMsgWTO     DS    CL70

            DS    C  <--- Pad (do not move away from sMsg...)
sMsg        DS    0CL132         ----     LOG MESSAGE STARTS HERE-----
sMsgDate    DS    C'yyyy/mm/dd hh:mm:ss.nnn'
            DS    C
sMsgText    DS    CL(L'sMsg-(*-sMsg))

            ORG   sMsgText       ----     WTO MESSAGE STARTS HERE-----
sMsgAction  DS    CL4'Send' or 'Recv'
            DS    C' '
sMsgPlus    DS    C'+'
sMsgOffset  DS    C'nnnnn'
sMsgQuote1  DS    C' '''
sMsgString  DS    CL50
sMsgQuote2  DS    C''''

            ORG   ,
sMsgZ       EQU   *
            DS    CL80            Pad (do not remove)

sErrNo      DS    CL6' nnnnn'


*---------------------------------------------------------------------*
*        Parameter list for all socket calls                          *
*---------------------------------------------------------------------*

sParms   DS    30A

*---------------------------------------------------------------------*
*        Parameters for some socket calls                             *
*---------------------------------------------------------------------*

sCall    DS    CL16               Socket function name

nRetCode DS    F                  Socket return code
nErrNo   DS    F                  Socket error number
nByte    DS    F                  Number of bytes
hSocket  DS    H                  Socket descriptor

*---------------------------------------------------------------------*
*        Internet socket address structures                           *
*---------------------------------------------------------------------*

               DS    0D
sServer        DS    0CL16        Socket name
hServerFamily  DS    H            Address family (=AF_INET)
hServerPort    DS    H            Port number
nServerAddress DS    F            IP address
               DS    XL8          ...not used for AF_INET family

               DS    0D
sClient        DS    0CL16        Socket name
hClientFamily  DS    H            Address family (=AF_INET)
hClientPort    DS    H            Port number
nClientAddress DS    F            IP address
               DS    XL8          ...not used for AF_INET family

cVersion       DS    X
cMode          DS    X

*---------------------------------------------------------------------*
*        Input/Output packet                                          *
*---------------------------------------------------------------------*

            DS   0D
sPacket     DS   XL512
            ORG  sPacket

cHeader     DS   XL1

NTP_LEAP_INDICATOR_MASK EQU B'11000000'  Impending leap-second warning:
*--------------------------------------
NTP_LEAP_NO_WARNING     EQU B'00000000'  No warning
NTP_LEAP_LAST_61        EQU B'01000000'  Last minute has 61 seconds
NTP_LEAP_LAST_59        EQU B'10000000'  Last minute has 59 seconds
NTP_LEAP_ALARM          EQU B'11000000'  Alarm (clock not synchronized)

NTP_VERSION_MASK        EQU B'00111000'  NTP/SNTP version number:
*--------------------------------------
NTP_VERSION_1           EQU B'00001000'
NTP_VERSION_2           EQU B'00010000'
NTP_VERSION_3           EQU B'00011000'
NTP_VERSION_4           EQU B'00100000'

NTP_MODE_MASK             EQU B'00000111' NTP/SNTP mode:
*----------------------------------------
NTP_MODE_RESERVED         EQU B'00000000'
NTP_MODE_SYMETRIC_ACTIVE  EQU B'00000001'
NTP_MODE_SYMETRIC_PASSIVE EQU B'00000010'
NTP_MODE_CLIENT           EQU B'00000011'
NTP_MODE_SERVER           EQU B'00000100'
NTP_MODE_BROADCAST        EQU B'00000101'

cStratum    DS   XL1
NTP_STRATUM_UNSPECIFIED   EQU 0
NTP_STRATUM_PRIMARY       EQU 1
NTP_STRATUM_SECONDARY     EQU 2

cPoll       DS   XL1              Max interval between polls
cPrecision  DS   XL1              Precision of local clock
nDelay      DS   XL4              Roundtrip delay to primary ref source
nDisp       DS   XL4              Nominal error from primary ref source
sRefId      DS   CL4              Id of ref source
dTimeRef    DS   XL8              Time local clock last set/corrected
dTimeOrg    DS   XL8              Time request left client
dTimeRx     DS   XL8              Time request arrived at server
dTimeTx     DS   XL8              Time reply departed server
PACKET_LENGTH  EQU  *-sPacket

           ORG  ,

WORKAREA_LENGTH EQU *-WORKAREA          Length of work area
         END
