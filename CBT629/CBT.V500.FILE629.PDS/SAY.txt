         MACRO
&sLabel  SAY   &BUFFER=,&WRITER=Say
.**********************************************************************
.*                                                                   **
.* FUNCTION - Generate code to format and write a message.  Writing  **
.*            of the generated message is accomplished by a call to  **
.*            the routine specified by &WRITER (which returns on R10).*
.*                                                                   **
.* ON ENTRY - &BUFFER  = Label of storage to receive result.  If     **
.*                       specified then Say is not called (allowing  **
.*                       a message to be built at that location),    **
.*                       else the message is built at sMsgText and   **
.*                       Say is called to write it.                  **
.*                                                                   **
.*            &WRITER  = Label of routine to be called to write the  **
.*                       message to its ultimate destination.        **
.*                                                                   **
.*            &SYSLIST = Message to be formatted.  Variables in the  **
.*                       message are identified by a '%' prefix.     **
.*                       To force a hex conversion, use a # prefix.  **
.*                       To dereference a pointer, use a * prefix.   **
.*                       To specify a register, use an R prefix.     **
.*                                                                   **
.* EXAMPLES -         SAY 'Hi' - Writes 'Hi' to CSML.                **
.*                                                                   **
.*                    Hello   DC   C'Hi'                             **
.*                    SAY '%Hello' - Writes 'Hi' to CSML.            **
.*                    SAY '#Hello' - Writes 'C889' to CSML.          **
.*                                                                   **
.*                    SAY '%R2' - Writes hex contents of register 2  **
.*                                to CSML.                           **
.*                                                                   **
.*                    SAY '%*R2' - Writes hex contents of 4 bytes of **
.*                                data addressed by R2 to CSML.      **
.*                                                                   **
.**********************************************************************

         LCLA  &i,&j,&nFormat,&nBeg,&nLen,&nOff,&nLists,&nList
         LCLA  &nSrcOff
         LCLB  &bTrail
         LCLC  &sFormat,&s,&sType,&sTarget,&sPrefix,&sESC

&nLists  SETA  N'&SYSLIST
&sTarget SETC  'sMsgText'
&nOff    SETA  0
&bTrail  SETB  0
&nList   SETA  0

         AIF   ('&sLabel' EQ '').NOLABEL
&sLabel  DS    0H
.NOLABEL ANOP

.*--------------------------------------------------------------------*
.*       For each sublist eg SAY (s1a,s1b,(s2a,s2b,s2c))
.*--------------------------------------------------------------------*

.NEXTS   ANOP
&nList   SETA  &nList+1
         AIF   (&nList GT &nLists).SAY
&sFormat SETC  '&SYSLIST(&nList)'
         AIF   ('&sFormat' EQ '').NEXTS
         AIF   ('&sFormat'(1,1) NE '''').NOQUOTE
&nLen    SETA  K'&sFormat-2
&sFormat SETC  '&sFormat'(2,&nLen)
.NOQUOTE ANOP

&nFormat SETA  K'&sFormat
&nBeg    SETA  1

.*--------------------------------------------------------------------*
.*       For each character
.*--------------------------------------------------------------------*

.NEXTC   ANOP
&nLen    SETA  0
&i       SETA  &nBeg

.NEXTCHR ANOP
         AIF   (&i GT &nFormat).END
&sESC    SETC  '&sFormat'(&i,1)
         AIF   ('&sESC' EQ '%').VAR
         AIF   ('&sESC' EQ '#').VAR
&i       SETA  &i+1
&nLen    SETA  &nLen+1
         AGO   .NEXTCHR

.*--------------------------------------------------------------------*
.*       Variable prefix found (ie #name or %name)
.*--------------------------------------------------------------------*

.VAR     ANOP
         AIF   (&nLen EQ 0).LEN0
&bTrail  SETB  0
&s       SETC  '&sFormat'(&nBeg,&nLen)
         AIF   (&nLen EQ 1).LEN1
         MVC   &sTarget+&nOff.(&nLen),=C'&s'
         AGO   .LEN0

.LEN1    ANOP
         MVI   &sTarget+&nOff,C'&s'
         AGO   .LEN0

.LEN0    ANOP
&nOff    SETA  &nOff+&nLen
&nBeg    SETA  &i+1
&i       SETA  &nBeg
&nLen    SETA  0

.*--------------------------------------------------------------------*
.*       Determine end of variable name
.*--------------------------------------------------------------------*

.NEXTV   ANOP
         AIF   (&i GT &nFormat).VAREND
&s       SETC  '&sFormat'(&i,1)
         AIF   ('&s' EQ '@').VARCONT,                                  X
               ('&s' EQ '$').VARCONT,                                  X
               ('&s' EQ '*').VARCONT,                                  X
               ('&s' EQ '_').VARCONT,                                  X
               ('&s' LT 'a').VAREND   Cheap and nasty
.VARCONT ANOP
&i       SETA  &i+1
&nLen    SETA  &nLen+1
         AGO   .NEXTV

.VAREND  ANOP
&s       SETC  '&sFormat'(&nBeg,&nLen)

.*--------------------------------------------------------------------*
.*       Process variable depending on its type and/or prefix
.*--------------------------------------------------------------------*

&nBeg    SETA  &i
&sType   SETC  T'&s
&sPrefix SETC  '&s'(1,1)
         MNOTE *,'Esc <&sESC> Var <&s> Prefix <&sPrefix> Type <&sType>'
         AIF   ('&sPrefix' EQ 'R').REG,          Register              X
               ('&sPrefix' EQ '*').DEREF,        Dereference first     X
               ('&sESC' EQ '#').X,               Force hex             X
               ('&sType' EQ 'C').C,              Character string      X
               ('&sType' EQ 'H').H,              Halfword              X
               ('&sType' EQ 'F').F,              Fullword              X
               ('&sType' EQ 'A').F,              Address=Fullword      X
               ('&sType' EQ 'X').X,              Hex string            X
               ('&sType' EQ 'B').X,              Binary string         X
               ('&sType' EQ 'D').C               Double word
         MNOTE 8,'Unsupported data type &sType for &s'
         AGO   .END

.*--------------------------------------------------------------------*
.*       Register
.*--------------------------------------------------------------------*

.REG     ANOP
         ST    &s,dWork
         C2X   &sTarget+&nOff,dWork,4,NOTRAIL
&bTrail  SETB  1
&nOff    SETA  &nOff+2*4
         AGO   .NEXTC

.*--------------------------------------------------------------------*
.*       Dereference
.*--------------------------------------------------------------------*

.DEREF   ANOP
&s       SETC  '&s'(2,*)
         AIF   (T'&s EQ 'U').DEREFR
         L     R1,&s
         UNPK  &sTarget+&nOff.(2*4+1),0(4+1,R1)
         TR    &sTarget+&nOff.(2*4),=C'0123456789ABCDEF'-C'0'
&bTrail  SETB  1
&nOff    SETA  &nOff+8
         AGO   .NEXTC

.DEREFR  ANOP
         UNPK  &sTarget+&nOff.(2*4+1),0(4+1,&s)
         TR    &sTarget+&nOff.(2*4),=C'0123456789ABCDEF'-C'0'
&bTrail  SETB  1
&nOff    SETA  &nOff+2*4
         AGO   .NEXTC

.*--------------------------------------------------------------------*
.*       Fullword
.*--------------------------------------------------------------------*

.F       ANOP
         C2X   &sTarget+&nOff,&s,4,NOTRAIL
&bTrail  SETB  1
&nOff    SETA  &nOff+2*4
         AGO   .NEXTC

.*--------------------------------------------------------------------*
.*       Halfword
.*--------------------------------------------------------------------*

.H       ANOP
         C2X   &sTarget+&nOff,&s,2,NOTRAIL
&bTrail  SETB  1
&nOff    SETA  &nOff+2*2
         AGO   .NEXTC

.*--------------------------------------------------------------------*
.*       Character (string)
.*--------------------------------------------------------------------*

.C       ANOP
         MVC   &sTarget+&nOff.(L'&s),&s
&nlen    SETA  L'&s
&nOff    SETA  &nOff+&nLen
&bTrail  SETB  0
         AGO   .NEXTC

.*--------------------------------------------------------------------*
.*       Hex (printable)
.*--------------------------------------------------------------------*

.X       ANOP
&nLen    SETA  L'&s
&nSrcOff SETA  0
.XNEXT   ANOP
         AIF   (&nLen LE 7).XLAST
         C2X   &sTarget+&nOff,&s+&nSrcOff,7,NOTRAIL
&nLen    SETA  &nLen-7
&nOff    SETA  &nOff+2*7
&nSrcOff SETA  &nSrcOff+7
         AGO   .XNEXT
.XLAST   ANOP
         C2X   &sTarget+&nOff,&s+&nSrcOff,&nLen,NOTRAIL
&bTrail  SETB  1
&nOff    SETA  &nOff+2*&nLen
         AGO   .NEXTC

.*--------------------------------------------------------------------*
.*       Determine whether to append a trailing blank
.*--------------------------------------------------------------------*

.END     ANOP
         AIF   (&nBeg GT &nFormat).NEXTS
&nLen    SETA  &nFormat-&nBeg+1
&s       SETC  '&sFormat'(&nBeg,&nLen)
&bTrail  SETB  0
         AIF   (&nLen EQ 1).TRAIL1
         MVC   &sTarget+&nOff.(&nLen),=C'&s'
&nOff    SETA  &nOff+&nLen
         AGO   .NEXTS

.TRAIL1  ANOP
         MVI   &sTarget+&nOff,C'&s'
&nOff    SETA  &nOff+&nLen
         AGO   .NEXTS

.*--------------------------------------------------------------------*
.*       Copy result to the specified buffer
.*--------------------------------------------------------------------*

.SAY     ANOP
         AIF  (NOT &bTrail).JUSTSAY
         MVI   &sTarget+&nOff,C' '

.JUSTSAY ANOP
         AIF   ('&BUFFER' EQ '').NIKE
         MVC   &BUFFER,&sTarget
         AGO   .EXIT

.*--------------------------------------------------------------------*
.*       Call the 'Say' routine to process the buffer
.*--------------------------------------------------------------------*

.NIKE    ANOP
         BRAS  R10,&WRITER
.EXIT    ANOP
         MEND
