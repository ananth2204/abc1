{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "BCIKLM", "INMTNODE": "PYRLDC", "INMTUID": "BCIKLM", "INMFTIME": "20030421175044000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1352078, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 3120, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "SYS3.SOUTSYS.ASM", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SYS3.SOUTSYS.ASM": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 3120, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 128, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "030111", "DS1SCEXT": "b'\\x80\\x0c0'", "DS1SCALO": "b'P\\x00\\x00m'", "DS1LSTAR": "b'\\x00\\x13\\x03'", "DS1TRBAL": "b'\\xc8\\xf2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x11 \\x00\\x04\\xaa-p'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x11 \\x00\\x04\\xaa-p'", "b'X\\xf3\\xe5h\\x00\\x00\\x00U\\x00\\x07\\x00V\\x00\\x0b\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"CMNFS00@": {"ttr": 3341, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***********************************************************************\n* CMNFS00 - FOR VSAM DISKWTR SYSTEM                                   *\n*                                                                     *\n* NOTE: THE DEFAULT BACKUP DATE FOR THE SEARCH LIMIT IS SET TO 3 DAYS.*\n*       IF YOU WOULD LIKE TO CHANGE IT, FIND \"BACKUP#' IN COL 1       *\n*       AND CHANGE ACCORDINGLY. THIS LIMIT REPLACES THE USE OF        *\n*       \"L\" AND \"LA\" OPTIONS IN THE OLD SYSTEM.                       *\n*                                                                     *\n*                                                                     *\n*        THIS IS THE TSO/SPF COMMAND PROCESSOR WHICH SUPPORTS BROWSE  *\n*        OF DATA WRITTEN TO THE DISKWTR SYSOUT DATASET.  IT'S         *\n*        FUNCTION IS TO LOCATE THE SYSOUT FOR A NAMED JOB, PLACE IT   *\n*        INTO A DATASET AND INVOKE THE SPF USER BROWSE INTERFACE.     *\n*        IT WILL ALSO SUBMIT A BATCH JOB IF THE USER DOES NOT WANT    *\n*        TO WAIT FOR TAPE MOUNTS.                                     *\n*                                                                     *\n*        THIS ROUTINE IS DEPENDENT UPON THE USE OF THE 'SOUTSEP'      *\n*        JES-2 SEPARATOR (SUPPLIED) WHICH CREATES A 'JOURNAL'         *\n*        VSAM JOURNAL FOR USE IN LOCATING THE NAMED JOB.              *\n*                                                                     *\n*        THIS ISPF PROGRAM WILL MAKE CALLS TO \"SOUTSUB\" SUBROUTINE    *\n*        PASSING IT THE APPROPRIATE PARM. SEE THE DOCUMENTATION       *\n*        IN THE \"SOUTSUB\" PROGRAM FOR A DESCRIPTION OF THE PARM.      *\n*                                                                     *\n*        THIS ISPF PROGRAM WILL ALSO BUILD THE PROPER PARM NEEDED     *\n*        PASSED TO SOUTPRT WHEN A USER SELECTS THE BATCH PRINT OPTION *\n*                                                                     *\n*                                                                     *\n*     THE FOLLOWING DESCRIBES THE REQUIRED DATASETS FOR THIS ROUTINE: *\n*                                                                     *\n*        1) DSNAME.QUALIFIER.JOURNAL                                  *\n*                THIS IS THE JOURNAL DATASET THAT CONTAINS A RECORD   *\n*                FOR EACH SYSOUT WRITTEN TO THIS SYSTEM.              *\n*                                                                     *\n*        2) DSNAME.QUALIFIER.ACTIVE                                   *\n*                THIS IS THE DATASET THAT THE JES EXTERNAL WRITER     *\n*                IS WRITTING SYSOUT REPORTS TO. IT IS SHARED BETWEEN  *\n*                DISKWTR (UPDATE MODE) AND THIS PROGRAM (READ ONLY)   *\n*                                                                     *\n*        3) DSNAME.QUALIFIER.DAILY.D9YYMMDD.THHMM (DATE/TIME STAMP)   *\n*                THIS IS THE BASE NAME FOR THE 'DAILY' SET OF         *\n*                SYSOUT REPORTS. (CREATED BY SAVEWTR). THIS DATESET   *\n*                IS CREATED WHEN THE ACTIVE FILE FILLS UP AND/OR IS   *\n*                OFFLOADED.                                           *\n*                                                                     *\n*        4) DSNAME.QUALIFIER.ARCHIVE.D9YYMMDD.THHMM (DATE/TIME STAMP) *\n*                THIS IS THE BASE NAME FOR THE 'ARCHIVE' SET OF       *\n*                SYSOUT REPORTS. (CREATED BY SAVEWTR). IT IT USED     *\n*                TO MERGE MULTIPLE \"DAILY\" DATASETS ONTO ONE TAPE     *\n*                DATASET. (OPTIONAL; ONLY CREATED IF DAILY IS ON DISK)*\n*                                                                     *\n*        NOTE: THE DESCRIBED DATASETS MUST HAVE THE SUFFIXES DESCRIBED*\n*              ABOVE ('ACTIVE', 'DAILY...' AND 'ARCHIVE...') IN       *\n*              ORDER TO ALLOW DYNAMIC ALLOCATION OF SAME.             *\n*                                                                     *\n*                                                                     *\n*      RETURN CODES:                                                  *\n*             0 - NORMAL RETURN                                       *\n*                 ALL ERROR CONDITIONS ARE DISPLAYED VIA MESSAGES     *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*                                                                     *\n*            R0 = WORK REG                                            *\n*            R1 = WORK REG                                            *\n*            R2 = WORK REG                                            *\n*            R3 = WORK REG                                            *\n*            R4 = WORK REG                                            *\n*            R5 = WORK REG                                            *\n*            R6 = WORK REG                                            *\n*            R7 = WORK REG                                            *\n*            R8 = WORK REG                                            *\n*            R9 = WORK REG                                            *\n*           R10 = BASE REG                                            *\n*           R11 = BASE REG                                            *\n*           R12 = BASE REG                                            *\n*           R13 = SAVE AREA                                           *\n*           R14 = WORK REG                                            *\n*           R15 = WORK REG                                            *\n*                                                                     *\n***********************************************************************\n         PRINT ON\n         EJECT\n**********************************************************************\n*                                                                     *\n*       SET UP SPF VARIABLES AND DISPLAY FIRST PANEL                  *\n*                                                                     *\n**********************************************************************\nCMNFS00  SPFINIT R12,R11,R10,R9,USER=Y      ,ERRORS=RETURN\n         CALL  ISPLINK,(CONTROL,ERRORS,RETURN),VL\n         SPFVDEF 1,(CMNFSYNO)\n         SPFVDEF 5,(CMNFSJNO)\n         SPFVDEF 8,(CMNFSJNM,CMNFSDST,OUTDEST)\n         SPFVDEF 8,(CMNFSNAM,CMNFSJNU,CMNFSTIM)\n         SPFVDEF 10,(CMNFSDAT,CMNFSLMT)\n         SPFVDEF 1,(CMNFSSEL,CMNFSADR,CMNFSCLA,CMNFSOPT,OUTCLASS)\n         SPFVDEF 3,(CMNFSDAY)\n         SPFVDEF 6,(CMNFSDEV)\n         SPFVDEF 9,(CMNFSLIN)\n         SPFVDEF 15,(CMNFSSTP)\n         SPFVDEF 44,(CMNFSDSN,CMNFSJDS)\n         SPFVDEF 39,(CMNFSPR1)\n         SPFVDEF 22,(CMNFSPR2)\n         SPFVDEF 35,(CMNFSPR3)\n         SPFVDEF 21,(CMNFSWTR)\n         SPFVDEF 25,(CMNFSWTO)\n         SPFVDEF 72,(CMNBSVA,CMNBSVB,CMNBSVC,CMNBSVD)\n         SPFVGET (CMNFSJNM,CMNFSOPT),PROFILE\n         SPFVGET (CMNFSDST,CMNFSCLA),PROFILE\n         SPFVGET (CMNBSVA,CMNBSVB,CMNBSVC,CMNBSVD),PROFILE\n*\n         CLI   CMNBSVA,C'/'           HAS JCL BEEN PROVIDED YET?\n         BE    ENTRY030               YES, CONTINUE\n         SPFVDEF 72,(ZLLGJOB1,ZLLGJOB2,ZLLGJOB3,ZLLGJOB4)\n         SPFVGET (ZLLGJOB1,ZLLGJOB2,ZLLGJOB3,ZLLGJOB4),PROFILE\n         MVC   CMNBSVA,ZLLGJOB1       UPDATE JOB CARD FROM LIST/LOG\n         MVC   CMNBSVB,ZLLGJOB2       UPDATE JOB CARD FROM LIST/LOG\n         MVC   CMNBSVC,ZLLGJOB3       UPDATE JOB CARD FROM LIST/LOG\n         MVC   CMNBSVD,ZLLGJOB4       UPDATE JOB CARD FROM LIST/LOG\n         EJECT\n*----------------------------------------------------------------------\n*        GET DECREMENTED DATE AND DISPLAY PANEL\n*----------------------------------------------------------------------\nENTRY030 DS    0H\n         LA    R1,DATEPARM        SOUTDATE PARAMETER LIST\n         LINK  EP=SOUTDATE        CALL THE DATE SUBROUTINE\n         LTR   R15,R15            SOUTDATE RETCODE OK?\n         BZ    AAA030             GOT DATE - DECREMENTED BY 2\n         MVC   CMNFSLMT,=CL10' '  CLEAR DATE LIMIT\nAAA030   SPFSPLAY 'CMNFS00',,'CMNFSJNM',ENTRY040,EOJ\nEXIT030  EQU   *\n*----------------------------------------------------------------------\n*        ALLOCATE WORK DATA SET FOR SOUTSUB ROUTINE\n*----------------------------------------------------------------------\nENTRY040 DS    0H\n         CLI   CMNFSDD+8,X'FF'    IS IT ALREADY ALLOCATED ?\n         BE    EXIT040            YES - OK\n         SPFTEMP ,INDSN,'CMNFS00' CREATE A TEMP DSN NAME\n         SPFALLOC A,RETDD=CMNFSDD,DSN=INDSN,DISP='SHR',                +\n               BLKSIZE='6118',LRECL='133',RECFM='FB'\n         CLC   SPFDYN15,=4C'0'    ALLOCATED ?\n         BE    AAA040             YES - OK\n         CLC   SPFDYNER,=C'1708'  DATA SET NOT FOUND ?\n         BNE   ERROR1             NO - SERIOUS ERROR\n         SPFALLOC A,RETDD=CMNFSDD,DSN=INDSN,DISP='(NEW,CATLG,DELETE)', +\n               SPACE='(9000,(750,750))',BLKSIZE='6118',                +\n               LRECL='133',RECFM='FB'\n         CLC   SPFDYNER,=4C'0'    DATA SET ALLOCATED ?\n         BNE   ERROR1             NO - SERIOUS ERROR\nAAA040   EQU   *\n         MVC   SOUTDCB+40(8),CMNFSDD    USE SYSTEM ALLOCATED DDNAME\n         MVI   CMNFSDD+8,X'FF'    INDICATE ALLOCATED\nEXIT040  EQU   *\n         EJECT\n***********************************************************************\n*\n*        MOVE PANEL VARIABLES TO PARM AREA FOR BROWSE\n*\n***********************************************************************\nENTRY050 EQU   *\n         MVI   TBLSW,C'N'                NOT IN TABLE PROCESSING\n         CLI   CMNFSJNM,C' '             WAS JOBNAME MORE THAN * ?\n         BE    ERROR5                    NO - ERROR\n         CLI   CMNFSJNM,C'*'             WAS JOBNAME MORE THAN * ?\n         BE    ERROR5                    NO - ERROR\n         LA    R4,CMNFSJNM              SET R4 EQ JOBNAME\n         LA    R4,7(R4)                 BUMP TO END\nLOOPA5   CLI   0(R4),C' '               IT LAST CHAR NON-BLANK\n         BNE   ENDLPA5                  YES - GO CHECK IT\n         SH    R4,=H'1'                 BACK UP ONE\n         B     LOOPA5                   TRY AGAIN\nENDLPA5  CLI   0(R4),C'*'               IS LAST CHAR *\n         BNE   AAA050                   NO - CONTINUE\n         CLC   CMNFSOPT,S                SELECT JOB SPECIFIED?\n         BE    ERROR8                   CAN'T HAVE *\n         CLC   CMNFSOPT,P                PRINT ONLY SPECIFIED ?\n         BE    ERROR8                   CAN'T HAVE *\nAAA050   CLC   CMNFSOPT,S                SELECT JOB SPECIFIED?\n         BE    BBB050\n         CLC   CMNFSOPT,P                PRINT ONLY SPECIFIED ?\n         BE    ENTRY200\n         CLC   CMNFSOPT,L                LIST ALL SPECIFIED?\n         BNE   ERROR4\n         MVC   HOLDKEY,BLANKS            CLEAR KEY FOR LIST\nBBB050   EQU   *\n         MVC   JOBNAME,CMNFSJNM          MOVE JOBNAME TO PARM AREA\n         MVC   JOBNUM,CMNFSJNO           MOVE JOB NO. TO PARM AREA\n         MVC   DATE,BLANKS               CLEAR DATE\n         MVC   TIME,BLANKS               CLEAR TIME\n         MVC   PARMDD,CMNFSDD            MOVE TEMP DSN DD TO PARM AREA\n         MVC   PARMQUAL,CMNFSWTR         MOVE OPSWTR QUALIFIER TO PARM\n         MVI   FLAG,TSO                  INIT PARM FLAG TO SPECIFY TSO\n         MVC   PARMDATL,CMNFSLMT         MOVE DATELIMIT TO PARM\n         MVC   PARMOLDQ,CMNFSWTO         MOVE OLD QUALIFIER TO PARM\n         CLI   CMNFSOPT,C'L'             IS A LIST SPECIFIED\n         BNE   EXIT050                   NO - GET OUT\n         OI    FLAG,LST                  SET UP FLAG FOR LISTALL\nEXIT050  EQU   *\n         EJECT\n***********************************************************************\n*\n*        PROCESS THE LIST/BROWSE REQUEST VIA CALL TO SOUTSUB\n*\n***********************************************************************\nENTRY060 EQU   *\n         MVC   CURSOR,=CL8'CMNFSJNM'     SET CURSOR FOR ERROR IF ANY\n         MVC   PANEL,=CL8'CMNFS00'       SET PANEL FOR ERROR IF ANY\n         CLC   HOLDKEY,PARMKEY           IS THIS THE SAME JOB\n         BE    AAA060                    YES - JUST BROWSE DATASET\n         BAL   R14,ENTRY900              CALL TO SOUTSUB\nAAA060   CLI   CMNFSOPT,C'L'             IS LIST SPECIFIED?\n         BE    ENTRY100                  YES - BUILD TABLE\n         MVC   HOLDKEY(8),CMNFSJNM       BUILD HOLDKEY FOR PRINT?\n         MVC   HOLDKEY+8(5),CMNFSJNO      \"\n         MVC   HOLDKEY+13(18),BLANKS      \"\n         BAL   R14,ENTRY910              BROWSE DATASET\n         B     ENTRY800                  NO - GET OUT\nEXIT060  EQU   *\n         EJECT\n***********************************************************************\n*\n*        DISPLAY TABLE\n*\n***********************************************************************\nENTRY100 EQU   *\n         MVI   TBLSW,C'Y'                  SET SWITCH FOR TABLE PROCESS\n         MVI   PRTSW,C'N'                  SET SWITCH TO BUILD TABLE\n         MVC   HOLDKEY,BLANKS              CLEAR HOLD KEY AREA\n         BAL   R14,ENTRY920                GOTO BUILD TABLE\n         CLI   EMPTY,C'Y'                  DOES TABLE HAVE ENTRIES\n         BE    ERROR6                      NO - ERROR\n         CALL  ISPLINK,(TBTOP,FS00TBL1),VL\nAAA100   EQU   *\n         MVC   SMSG,=CL24'SELECT JOB BELOW'\n         MVC   LMSG,=CL72'SELECT A JOB FOR BROWSE, PRINT OR END'\n         B     AAA103\nAAA101   EQU   *\n         MVC   SMSG,=CL24'SELECT SUCCESSFUL'\n         MVC   LMSG,=CL72'JOB SELECTION SUCCESSFUL; SELECT ANOTHER JOB'\n         B     AAA103\nAAA102   EQU   *\n         MVC   SMSG,=CL24'PRINT SUCCESSFUL'\n         MVC   LMSG,=CL72'JOB PRINT SUCCESSFUL; SELECT ANOTHER JOB'\n         B     AAA103\nAAA103   MVC   PANEL,=CL8'CMNFS01'\n         MVC   MSG,=CL8'CMN000'\nBBB100   EQU   *\n         CALL  ISPLINK,(TBDISPL,FS00TBL1,PANEL,MSG),VL\n         C     R15,=F'8'                   END KEY HIT\n         BE    ENTRY800                    YES DISPLAY FIRST PANEL\n         OC    CMNFSSEL,=C' '              SET SELECT SW TO CAPS\n         CLI   CMNFSSEL,C' '               WAS ANY ENTERED\n         BE    AAA100                      NO - DISPLAY AGAIN\n         CLC   CMNFSSEL,S                  JOB SELECTED FROM TABLE\n         BE    CCC100                      YES - CONTINUE\n         CLC   CMNFSSEL,P                  PRINT ONLY SPECIFIED\n         BE    ENTRY200                    GO TO PRINT\n         CLC   CMNFSSEL,Q                  QUERY DATASET NAME\n         BE    EEE100                      YES - GO BUILD DSN\n         B     ERROR3                      ELSE ERROR\nCCC100   EQU   *\n         MVC   JOBNAME,CMNFSNAM            MOVE JOBNAME TO PARM\n         MVC   JOBNUM,CMNFSJNU+3           MOVE JOB # NUMERICS TO PARM\n         MVC   DATE,CMNFSDAT               MOVE DATE TO PARM\n         MVC   TIME,CMNFSTIM               MOVE TIME TO PARM\n         MVI   FLAG,TSO                    SET PARM FLAG FOR TSO\n         MVC   CURSOR,=CL8'ZCMD'           SET UP CURSOR POS\n         MVC   PANEL,=CL8'CMNFS01'         SET UP DISPLAY PANEL\n         CLC   HOLDKEY,PARMKEY             IS SAME JOB SELECTED?\n         BE    DDD100                      YES - BYPASS SOUTSUB CALL\n         BAL   R14,ENTRY900                CALL SOUTSUB FOR THIS JOB\n         MVC   HOLDKEY,PARMKEY             SET UP HOLDKEY\nDDD100   BAL   R14,ENTRY910                BROWSE DATASET\n         CLI   CMNFSDEV,C'T'               WAS TAPE MOUNTED\n         BNE   AAA101                      NO - DISPLAY TABLE AGAIN\n         B     NNN100                      BR TO PRINT QUESTION\nEEE100   EQU   *                           BUILD DSN\n         MVC   CMNFSDSN,BLANKS             CLEAR NAME\n         CLI   CMNFSADR,C'O'               IS THIS A OLD DISKWTR DSN\n         BE    FFF100                      YES - BR\n         MVC   CMNFSDSN(21),CMNFSWTR       MOVE IN DSN PREFIX\n         B     GGG100                      BR AROUND\nFFF100   MVC   CMNFSDSN(25),CMNFSWTO       MOVE IN OLD DSN PREFIX\nGGG100   LA    R4,CMNFSDSN                 SET R4 TO BEGINNING\nLOOPF1   CLI   0(R4),C' '                  BLANK FOUND\n         BE    ENDLPF1                     YES - END OF PREFIX\n         LA    R4,1(R4)                    BUMP R4\n         B     LOOPF1                      TRY AGAIN\nENDLPF1  CLI   CMNFSADR,C'A'               IS DSN ACTIVE?\n         BE    HHH100                      YES - BR\n         CLI   CMNFSADR,C'D'               IS DSN DAILY?\n         BE    III100                      YES - BR\n         CLI   CMNFSADR,C'R'               IS DSN ARCHIVE?\n         BE    JJJ100                      YES - BR\n         B     JJJ100                      OLD = ARCHIVE  #####\n*        B     III100                      OLD = DAILY    #####\nHHH100   MVC   0(7,R4),=C'.ACTIVE'         MOVE IN ACTIVE\n         LA    R4,7(R4)                    BUMP R4 PAST SUFFIX\n         B     KKK100                      BR\nIII100   MVC   0(6,R4),=C'.DAILY'          MOVE IN DAILY\n         LA    R4,6(R4)                    BUMP R4 PAST SUFFIX\n         B     KKK100                      BR\nJJJ100   MVC   0(8,R4),=C'.ARCHIVE'        MOVE IN ARCHIVE\n         LA    R4,8(R4)                    BUMP R4 PAST SUFFIX\nKKK100   MVC   0(15,R4),CMNFSSTP           MOVE IN DATE/TIME STAMP\nLLL100   MVC   CMNFSJDS(21),CMNFSWTR       MOVE PREFIX TO JOURN DSN\n         LA    R4,CMNFSJDS                 SET R4 TO BEGINNING\nLOOPM1   CLI   0(R4),C' '                  FOUND BLANK?\n         BE    ENDLPM1                     YES -BR\n         LA    R4,1(R4)                    BUMP R4\n         B     LOOPM1                      TRY AGAIN\nENDLPM1  MVC   0(8,R4),=C'.JOURNAL'        MOVE IN JOURNAL NAME\n         SPFSPLAY 'CMNFS03',,,AAA100,AAA100  DISPLAY PANEL\n*\nNNN100   EQU   *\n         SPFSPLAY 'CMNFS02',,'CMNFSYNO',,AAA100  DISPLAY PANEL\n         CLI   CMNFSYNO,C' '               YES- NO ENTERED\n         BE    NNN100                      NO - DISPLAY AGAIN\n         CLI   CMNFSYNO,C'N'               NO PRINT?\n         BE    AAA101                      DISPLAY TABLE AGAIN\n         CLI   CMNFSYNO,C'Y'               YES PRINT?\n         BNE   NNN100                      NO - DISPLAY QUES AGAIN\n         MVI   PRTSW,C'Y'                  TURN ON PRINT SW\n         BAL   R14,ENTRY920                PRINT DATASET\n         B     AAA102                      BR TO DISPLAY TABLE\nEXIT100  EQU   *\n         EJECT\n*----------------------------------------------------------------------\n*        PRINT REQUESTED\n*\n*        1) IF YOU JUST LOOKED AT JOB, PRINT IT\n*        2) IF IT IS A NEW JOB TO PRINT - SUBMIT BATCH\n*\n*----------------------------------------------------------------------\nENTRY200 DS    0H\n         CLI   TBLSW,C'Y'                  IN TABLE PROCESSING\n         BE    AAA200                      YES - BR\n         MVC   JOBNAME,CMNFSJNM            MOVE JOBNAME\n         MVC   JOBNUM,CMNFSJNO             MOVE JOB NUMBER\n         MVC   DATE,BLANKS                 CLEAR DATE\n         MVC   TIME,BLANKS                 CLEAR TIME\n         B     BBB200\nAAA200   MVC   JOBNAME,CMNFSNAM            MOVE JOBNAME TO PARM\n         MVC   JOBNUM,CMNFSJNU+3           MOVE JOB # NUMERICS TO PARM\n         MVC   DATE,CMNFSDAT               MOVE DATE TO PARM\n         MVC   TIME,CMNFSTIM               MOVE TIME TO PARM\nBBB200   CLC   HOLDKEY,PARMKEY             DID USER JUST \"S\" THIS JOB\n         BNE   CCC200                      NO - BR AROUND\n         MVI   PRTSW,C'Y'                  TURN ON PRINT SW\n         BAL   R14,ENTRY920                BRANCH TO ONLINE PRINT\n         CLI   TBLSW,C'Y'                  IN TABLE PROCESSING\n         BE    AAA102                      YES - RE-DISPLAY TABLE\n         B     ENTRY800                    DISPLAY FIRST PANEL\nCCC200   EQU   *\n         MVC   OUTCLASS,=C'*'              BATCH DEFAULT *\n         CLI   CMNFSCLA,C' '               IS CLASS SPECIFIED?\n         BE    DDD200\n         MVC   OUTCLASS,CMNFSCLA           MOVE IN CLASS\nDDD200   MVC   OUTDEST,=CL8'R0'            DEFAULT DEST IS R0\n         CLI   CMNFSDST,C' '               IS BATCH DEST SPECIFIED\n         BE    EEE200                      NO - SET DEFAULT\n         MVC   OUTDEST,CMNFSDST            MOVE IN SPECIFIED DEST\nEEE200   EQU   *\n         MVC   CMNFSPR1(31),PARMKEY         SET UP\n         MVC   CMNFSPR1+31(8),=CL8'SYSPRINT'    PARM\n         MVC   CMNFSPR2(21),CMNFSWTR               FOR\n         MVI   CMNFSPR2+21,X'04'                     BATCH\n         MVC   CMNFSPR3(10),BLANKS                      PRINT\n         MVC   CMNFSPR3+10(25),CMNFSWTO\n*----------------------------------------------------------------------\n*\n*        CREATE JCL IN THE ZTEMP FILE\n*\n*----------------------------------------------------------------------\n         MVC   PROC,=CL8'CMNFS00' MEMBER NAME IN ISPSLIB\n         SPFTAILR PROC,SUBMIT     CREATE THE JCL\n*        LTR   R15,R15\n*        BZ    GGG200\n*        MVC   SMSG,=CL24'SUBMIT FAILED'\n*        MVC   LMSG,=CL72'JOB SUBMISSION FAILURE - CONTACT SOFTWARE'\n*        B     HHH200\nGGG200   MVC   SMSG,=CL24'SUBMITTED'\n         MVC   LMSG,=CL72'JOB TO PRINT THE DATA HAS BEEN SUBMITTED'\nHHH200   CLI   TBLSW,C'Y'         IN TABLE PROCESSING\n         BE    AAA103             BR TO DISPLAY TABLE\n         B     CCC800\nEXIT200  EQU   *\n         EJECT\n*----------------------------------------------------------------------\n*        DISPLAY PANEL\n*----------------------------------------------------------------------\nENTRY800 DS    0H\n         CLI   TBLSW,C'N'        PROCESSING A SPF TABLE\n         BE    BBB800            NO BRANCH AROUND TABLE END\n         CALL  ISPLINK,(TBEND,FS00TBL1),VL  END TABLE\nAAA800   MVC   SMSG,=CL24'JOB LISTING SUCCESSFUL'\n         MVC   LMSG,=CL72'LIST OF JOBS COMPLETED SUCCESSFULLY'\n         B     CCC800\nBBB800   MVC   SMSG,=CL24'BROWSE/PRINT SUCCESSFUL'\n         MVC   LMSG,=CL72'BROWSE OR PRINT COMPLETED SUCCESSFULLY'\nCCC800   MVC   MSG,=CL8'CMN000'\n         SPFSPLAY 'CMNFS00',MSG,'CMNFSJNM',ENTRY050,EOJ\nEXIT800  EQU   *\n         EJECT\n*----------------------------------------------------------------------\n*        END OF JOB\n*----------------------------------------------------------------------\nEOJ      DS    0H\n         SPFVPUT (CMNFSJNM,CMNFSOPT),PROFILE\n         SPFVPUT (CMNFSDST,CMNFSCLA),PROFILE\n         SPFVPUT (CMNBSVA,CMNBSVB,CMNBSVC,CMNBSVD),PROFILE\n         SPFALLOC D,DD=CMNFSDD\n         SPFALLOC A,DD=CMNFSDD,DSN=INDSN,DISP='(OLD,DELETE,DELETE)'\n         SPFALLOC D,DD=CMNFSDD\n         LA    R15,0\n         SPFEXIT\n         EJECT\n***********************************************************************\n*\n*        PROCESS THE LIST/BROWSE REQUEST VIA CALL TO SOUTCALL\n*\n***********************************************************************\nENTRY900 DS    0H\n         ST    R14,ST900\n         OI    FLAG,AUTH          INDICATE AUTHORIZED REQUEST\n         LA    R1,SUBPARM         SOUTSUB PARAMETER LIST\n         LINK  EP=SOUTCALL        CALL THE SOUT SUBROUTINE\n         LTR   R2,R15             SOUTSUB RETCODE OK?\n         BNZ   ERROR2             RETURN WILL CHECK TO DISPLAY MESSAGE\nEXIT900  EQU   *\n         L     R14,ST900\n         BR    R14\n*----------------------------------------------------------------------\n*        BROWSE JOB IF REQUESTED\n*----------------------------------------------------------------------\nENTRY910 DS    0H\n         ST    R14,ST910\n         SPFBRWSE INDSN\nEXIT910  EQU   *\n         L     R14,ST910\n         BR    R14\n***********************************************************************\n*\n*        PRINT JOB IF REQUESTED / OR BUILD THE TABLE\n*\n***********************************************************************\nENTRY920 DS    0H\n         ST    R14,ST920\n         CLI   PRTSW,C'Y'            PRINT REQUESTED\n         BNE   CCC920                NO - MUST BE BUILD TABLE\n         MVC   OUTCLASS,=C'A'        DEFAUT ONLINE CLASS A\n         CLI   CMNFSCLA,C' '         CLASS SPECIFIED?\n         BE    AAA920\n         CLI   CMNFSCLA,C'*'         CLASS SPECIFIED AS *\n         BE    AAA920                CHANGE TO \"A\"\n         MVC   OUTCLASS,CMNFSCLA     MOVE IN CLASS\nAAA920   EQU   *\n         MVC   OUTDEST,=CL8'R0'\n         CLI   CMNFSDST,C' '         IS DEST SPECIFIED?\n         BE    BBB920                NO - SET DEFAULT\n         MVC   OUTDEST,CMNFSDST      MOVE IN SPECIFIED DEST\nBBB920   SPFALLOC A,DD=OUTDD,SYSOUT=OUTCLASS,DEST=OUTDEST\n         B     DDD920\nCCC920   EQU   *\n         CALL  ISPLINK,(TBCREATE,FS00TBL1,,NAMELST,NOWRITE),VL\n         MVI   EMPTY,C'Y'\nDDD920   EQU   *\n         OPEN  (SOUTDCB,INPUT)\n         CLI   PRTSW,C'Y'\n         BNE   EEE920\n         OPEN  (PRINTDCB,OUTPUT)\nEEE920   GET   SOUTDCB            GET INPUT RECORD\n         CLI   PRTSW,C'Y'         PRINT ?\n         BNE   FFF920             NO - BUILD TABLE\n         LR    R0,R1              COPY DATA ADDRESS\n         PUT   PRINTDCB           PUT RECORD\n         B     EEE920             GET NEXT RECORD\nFFF920   EQU   *\n         MVI   EMPTY,C'N'\n         LR    R7,R1              COPY DATA ADDRESS\n         MVI   CMNFSSEL,C' '          SET UP TABLE ENTRIES\n         MVC   CMNFSNAM,1(R7)       \"\n         MVC   CMNFSDAT,10(R7)       \"\n         MVC   CMNFSTIM,21(R7)      \"\n         MVC   CMNFSJNU,30(R7)      \"\n         MVC   CMNFSDAY,41(R7)     \"\n         MVC   CMNFSLIN,45(R7)     \"\n         MVC   CMNFSDEV,55(R7)     \"\n         MVC   CMNFSADR,62(R7)     \"\n         MVC   CMNFSSTP,64(R7)     \"\n         CALL  ISPLINK,(TBADD,FS00TBL1),VL  ADD TO TABLE\n         B     EEE920             GET NEXT RECORD\nGGG920   CLOSE (SOUTDCB)\n         CLI   PRTSW,C'Y'\n         BNE   EXIT920\n         CLOSE (PRINTDCB)\n         SPFALLOC D,DD=OUTDD\nEXIT920  EQU   *\n         L     R14,ST920\n         BR    R14\n         EJECT\n*----------------------------------------------------------------------\n*        DYNAMIC ALLOCATION ERROR\n*----------------------------------------------------------------------\nERROR#   DS    0H\n         CLI   TBLSW,C'Y'\n         BE    BBB100\n         SPFSPLAY  PANEL,'CMN000',CURSOR,ENTRY050,EOJ\nERROR1   DS    0H\n         MVC   PANEL,=CL8'CMNFS00'\n         MVC   CURSOR,=CL8'CMNFSJNM'\n         MVC   SMSG,=CL24'TEMP DATASET ERROR'\n         MVC   LMSG,=CL72'TEMPORARY DATASET ALLOCATION ERROR'\n         B     ERROR#\nERROR2   DS    0H\n         CL    R2,=F'4'\n         BE    ERROR2A\n         CL    R2,=F'8'\n         BE    ERROR2B\n         CL    R2,=F'12'\n         BE    ERROR2C\n         CL    R2,=F'16'\n         BE    ERROR2D\n         CL    R2,=F'20'\n         BE    ERROR2E\n         CL    R2,=F'24'\n         BE    ERROR2F\n         CL    R2,=F'28'\n         BE    ERROR2G\n         CL    R2,=F'32'\n         BE    ERROR2H\n         CL    R2,=F'36'\n         BE    ERROR2I\n         MVC   SMSG,=CL24'SOUTSUB ERROR'\n         MVC   LMSG,=CL72'ERROR IN SOUTSUB SUBROUTINE'\n         B     ERROR#\nERROR2A  EQU   *\n         MVC   SMSG,=CL24'JOB NOT FOUND'\n         MVC   LMSG,=CL72'JOB NOT FOUND WITHIN THE CONTEXT DEFINED '\n         B     ERROR#\nERROR2B  EQU   *\n         MVC   SMSG,=CL24'OUTPUT OPEN ERROR'\n         MVC   LMSG,=CL72'OPEN FAILED FOR OUTPUT TEMPORARY FILE'\n         B     ERROR#\nERROR2C  EQU   *\n         MVC   SMSG,=CL24'INVALID PARM PASSED'\n         MVC   LMSG,=CL72'INVALID PARAMETER PASSED TO SOUTSUB'\n         B     ERROR#\nERROR2D  EQU   *\n         MVC   SMSG,=CL24'JOURNAL ALLOC. FAILED'\n         MVC   LMSG,=CL72'DYNAMIC ALLOC FAILED FOR THE VSAM JOURNAL'\n         B     ERROR#\nERROR2E  EQU   *\n         MVC   SMSG,=CL24'EXPANSION FAILED'\n         MVC   LMSG,=CL72'DE-COMPRESSION SUBROUTINE ERROR'\n         B     ERROR#\nERROR2F  EQU   *\n         MVC   SMSG,=CL24'JOURNAL READ ERROR'\n         MVC   LMSG,=CL72'ERROR READING THE JOURNAL VSAM FILE'\n         B     ERROR#\nERROR2G  EQU   *\n         MVC   SMSG,=CL24'JOURNAL OPEN ERROR'\n         MVC   LMSG,=CL72'OPEN FAILURE FOR THE JOURNAL VSAM FILE'\n         B     ERROR#\nERROR2H  EQU   *\n         MVC   SMSG,=CL24'TAPE IN USE/NO REPLIED'\n         MVC   LMSG,=CL72'OPERATOR REPLIED \"NO\" TO TAPE MOUNT OR TAPE I*\n               S IN USE; TRY LATER'\n         B     ERROR#\nERROR2I  EQU   *\n         B     ERROR2H\n         MVC   SMSG,=CL24'INPUT ALLOC. ERROR'\n         MVC   LMSG,=CL72'INPUT SYSOUT FILE ALLOCATION ERROR; DATSET NO*\n               T FOUND?'\n         B     ERROR#\nERROR3   DS    0H\n         MVI   TBLSW,C'Y'\n         MVC   PANEL,=CL8'CMNFS01'\n         MVC   CURSOR,=CL8'ZCMD'\n         MVC   SMSG,=CL24'INVALID OPTION'\n         MVC   LMSG,=CL72'OPTION MUST BE \"S\" OR \"P\" ONLY'\n         B     ERROR#\nERROR4   DS    0H\n         MVI   TBLSW,C'N'\n         MVC   PANEL,=CL8'CMNFS00'\n         MVC   CURSOR,=CL8'CMNFSOPT'\n         MVC   SMSG,=CL24'INVALID OPTION'\n         MVC   LMSG,=CL72'OPTION MUST BE \"P\" \"S\" OR \"L\" ONLY'\n         B     ERROR#\nERROR5   DS    0H\n         MVI   TBLSW,C'N'\n         MVC   PANEL,=CL8'CMNFS00'\n         MVC   CURSOR,=CL8'CMNFSJNM'\n         MVC   SMSG,=CL24'INVALID JOBNAME'\n         MVC   LMSG,=CL72'JOBNAME MUST BE ENTERED'\n         B     ERROR#\nERROR6   DS    0H\n         MVI   TBLSW,C'N'\n         MVC   PANEL,=CL8'CMNFS00'\n         MVC   CURSOR,=CL8'CMNFSJNM'\n         MVC   SMSG,=CL24'NO JOBS FOR REQUEST'\n         MVC   LMSG,=CL72'NO JOBS FOUND FOR JOBNAME REQUESTED'\n         B     ERROR#\nERROR7   DS    0H\n         MVI   TBLSW,C'N'\n         MVC   PANEL,=CL8'CMNFS00'\n         MVC   SMSG,=CL24'DESTINATION REQUIRED'\n         MVC   LMSG,=CL72'OUTPUT DESTINATION IS A REQUIRED  FIELD'\n         B     ERROR#\nERROR8   DS    0H\n         MVI   TBLSW,C'N'\n         MVC   PANEL,=CL8'CMNFS00'\n         MVC   CURSOR,=CL8'CMNFSJNM'\n         MVC   SMSG,=CL24'\"*\" NOT VALID FOR OPTION'\n         MVC   LMSG,=CL72'ASTERISK IS NOT VALID FOR \"P\" OR \"S\" OPTION'\n         B     ERROR#\n         EJECT\n* *********************************************************************\n*        SPF VARIALBES\n* *********************************************************************\nSPFMACS  SPFCMDS FILES=YES,TABLES=YES\n         EJECT\n* *********************************************************************\n*        DCB FOR INPUT AND OUTPUT FILES\n* *********************************************************************\nSOUTDCB  DCB   DSORG=PS,MACRF=(PM,GL),EODAD=GGG920,                    X\n               LRECL=133,RECFM=FBA,BLKSIZE=6118\nPRINTDCB DCB   DDNAME=PRTOUTDD,DSORG=PS,MACRF=PM,RECFM=FBA,            X\n               LRECL=133,BLKSIZE=6118\n         EJECT\n* *********************************************************************\n*        WORK VARIALBES\n* *********************************************************************\nST900    DC    F'-1'\nST910    DC    F'-1'\nST920    DC    F'-1'\n* PARM PASSED TO SOUTDATE\nDATEPARM DS    0F\nDP1      DC    A(BACKUP#)         ADDR OF BACK UP TO # DAYS\nDP2      DC    A(CMNFSLMT)        ADDR OF LIMIT DATE\n*\nBACKUP#  DC    CL5'00003'         BACKUP 3 DAYS\n* PARM PASSED TO SOUTSUB\nSUBPARM  DS    0F\nSUBP1    DC    A(JOBNAME)         ADDR OF JOBNAME\nSUBP2    DC    A(JOBNUM)          ADDR OF JOB NUMBER\nSUBP3    DC    A(DATE)            ADDR OF DATE\nSUBP4    DC    A(TIME)            ADDR OF TIME\nSUBP5    DC    A(PARMDD)          ADDR OF DDNAME\nSUBP6    DC    A(PARMQUAL)        ADDR OF DSN QUALIFIER\nSUBP7    DC    A(FLAG)            ADDR OF FLAGS\nSUBP8    DC    A(PARMDATL)        ADDR OF SEARCH DATE LIMIT\nSUBP9    DC    A(PARMOLDQ)        ADDR OF OLD QUALIFIER\nPARMKEY  DS    0CL31\nJOBNAME  DC    CL8' '             JOBNAME FOR SEARCH\nJOBNUM   DC    CL5' '             JOBNUM FOR SEARCH\nDATE     DC    CL10' '            DATE FOR SEARCH\nTIME     DC    CL8' '             TIME FOR SEARCH\nPARMDD   DC    CL8' '             DD NAME TO USE\nPARMQUAL DC    CL21' '            DSNAME QUALIFIER\nFLAG     DC    X'01'               OPTION FLAGS\nTSO      EQU   X'01'               ENVIRONEMENT (ISSUE TPUTS)\nLST      EQU   X'02'               LIST  REQUESTED\nAUTH     EQU   X'04'               CALLER IS AUTH'D\nPARMDATL DC    CL10' '\nPARMOLDQ DC    CL25' '            OLD DSNAME QUALIFIER\n*\nPRTSW    DC    CL1' '\nTBLSW    DC    CL1' '\nNAMELST  DS    0CL101\n         DC    CL28'(CMNFSSEL CMNFSNAM CMNFSJNU '\n         DC    CL27'CMNFSDAT CMNFSTIM CMNFSDAY '\n         DC    CL27'CMNFSLIN CMNFSDEV CMNFSADR '\n         DC    CL18'CMNFSSTP)'\nHLDLIMIT DC    CL10' '\nHOLDKEY  DC    CL31' '\nS        DC    CL1'S'\nP        DC    CL1'P'\nL        DC    CL1'L'\nQ        DC    CL1'Q'\n         SPACE 3\n*----------------------------------------------------------------------\n*        BATCH JOB SUBMIT AREA\n*----------------------------------------------------------------------\n         DS    0H\nSUBBUF   DC    CL12'CMD(SUBMIT ''' SUBMIT COMMAND\nSUBDSN   DC    CL44' ',CL2' '      SUBMIT DSN\nSUBBUFLN DC    A(*-SUBBUF)         SIZE OF SUBMIT COMMAND BUFFER\n*----------------------------------------------------------------------\n*        STORAGE AREAS\n*----------------------------------------------------------------------\nFS00TBL1 DC    CL8'FS00TBL1'\nEMPTY    DC    CL1' '\nINDSN    DC    CL44' '\n*----------------------------------------------------------------------\nDDNAMES  EQU   *\nCMNFSDD  DC    CL8'       ',X'00'\nOUTDD    DC    CL8'PRTOUTDD',X'00'\n         DC    X'FFFF'            END INDICATOR\n*----------------------------------------------------------------------\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOCINDEX": {"ttr": 10, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT ON,GEN\n*\n*\n*\n* ********************************************************************\n*\n*  THIS IS THE ROUTINE BORROWED FROM THE \"LISTSPC\" PROGRAM\n*\n* ********************************************************************\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*        LOCINDEX SUBROUTINE REPLACEMENT FOR MVS\n*        THIS ROUTINE SUPPORTS 'LEVEL' OPTIONS OF THE 'LISTS' COMMAND\n*             AND IS USED BY OTHER YCC VARIATIONS OF THAT PROGRAM\n*        FOLLOWING IS ORIGINAL LOCINDEX DESCRIPTION:\n*.....................................................................*\n*.                                                                   .*\n*.   LOCINDEX                                                        .*\n*.                                                                   .*\n*.....................................................................*\n*.                                                                   .*\n*.   1.0  GENERAL DESCRIPTION                                        .*\n*.                                                                   .*\n*.   THIS SUBROUTINE IS USED TO RETURN DSNAMES AND THE VOLSER        .*\n*.   FOR A SPECIFIED INDEX STRUCTURE.  THE INDEX STRUCTURE CAN BE    .*\n*.   SPECIFIED AS SEVERAL HIGH-LEVEL QUALIFIERS OR IT CAN BE A       .*\n*.   DSNAME CONTAINING ONE EMBEDDED ASTERISK NOT AS THE HIGH-LEVEL   .*\n*.   QUALIFIER.                                                      .*\n*.                                                                   .*\n*.....................................................................*\n*.                                                                   .*\n*.....................................................................*\n*.                                                                   .*\n*.   2.0  PARAMETER LIST AND RETURN CODE DESCRIPTION                 .*\n*.                                                                   .*\n*.   THE PARAMETER LIST IS A FOUR OR FIVE WORD LIST CONTAINING THE   .*\n*.   FOLLOWING:                                                      .*\n*.                                                                   .*\n*.    WORD         DESCRIPTION                                       .*\n*.                                                                   .*\n*.      1          ADDRESS OF THE 44-BYTE FIELD CONTAINING THE       .*\n*.                 INDEX STRUCTURE.                                  .*\n*.      2          ADDRESS OF THE 44-BYTE FIELD INTO WHICH           .*\n*.                 LOCINDEX WILL PLACE THE DSNAME.                   .*\n*.      3          ADDRESS OF THE 6-BYTE FIELD INTO WHICH            .*\n*.                 LOCINDEX WILL PLACE THE VOLSER OF THE DATASET.    .*\n*.      4          ADDRESS OF A 4K WORK AREA TO BE USED BY           .*\n*.                 LOCINDEX FOR STORING CATALOG BLOCKS.              .*\n*.      5          OPTIONAL FIELD FOR THE ADDRESS OF A FULLWORD      .*\n*.                 OF STORAGE ON AN INTEGRAL BOUNDARY INTO WHICH     .*\n*.                 LOCINDEX WILL STORE THE RETURN CODE.              .*\n*.                                                                   .*\n*.   THE HIGH ORDER BIT OF THE LAST WORD OF THE PARAMETER LIST       .*\n*.   MUST BE SET ON.                                                 .*\n*.                                                                   .*\n*.    RETURN CODE  MEANING                                           .*\n*.                                                                   .*\n*.         0       A DSNAME WAS FOUND AND THE DATASET RESIDES ON     .*\n*.                 A DISK VOLUME.                                    .*\n*.         4       THE INDEX STRUCTURE WAS NOT FOUND.                .*\n*.         8       A DSNAME WAS FOUND AND THE DATASET RESIDES ON     .*\n*.                 A TAPE VOLUME.                                    .*\n*.        12       A DSNAME WAS FOUND BUT IT RESIDES ON MULTIPLE     .*\n*.                 VOLUMES.                                          .*\n*.        16       THERE ARE NO MORE DATASETS FOR THIS INDEX         .*\n*.                 STRUCTURE.                                        .*\n*.        20       AN I/O ERROR WAS DETECTED ON THE CATALOG.         .*\n*.                                                                   .*\n*.....................................................................*\n*\n*        THE PRIMARY DIFFERENCES BETWEEN THE MVS VERSION\n*        AND THE OS VERSION ARE:\n*              1) THE PART ABOVE THE ASTERISK IS PASSED TO VSAM\n*                 GENERIC LOCATE AND WORKS HOWEVER GENERIC LOCATE\n*                 LOCATE WORKS. ONLY NON-VSAM DATASETS ARE PASSED\n*                 BACK TO THE CALLER.\n*              2) THE CHARACTERS BELOW THE ASTERISK MUST APPEAR\n*                 IN THE DATASET NAME ANYWHERE AFTER THE SEARCH\n*                 KEY CHARACTERS. THEY MAY CONTAIN LEADING\n*                 AND TRAILING PARTIAL INDEX LEVELS.\n*              3) THE AMOUNT OF STORAGE REQUIRED FOR A VSAM GENERIC\n*                 LOCATE IS MUCH MORE THAN THE 4K AREA PROVIDED BY\n*                 THE OS CALLER. A 24K AREA IS GETMAINED AND ITS\n*                 ADDRESS IS STORED IN THE FIRST WORK OF THE 4K\n*                 CALLER WORK AREA. IT IS FREEMAINED WHEN THE\n*                 RETURN CODE OF 16 SIGNALS THE END OF DATASETS\n*                 UNDER THIS INDEX.\n*              5) THE 265 BYTE CAMLIST WORK AREA IS PUT IN THE\n*                 CALLER PROVIDED WORK AREA AT OFFSET 4. THIS\n*                 ALLOWS ACCESS TO THE COMPLETE VOLUME LIST.\n         EJECT\nLOCINDEX CSECT\n         USING *,15\n         SAVE  (14,12),,*\n         GETMAIN R,LV=LSECT\n         ST    R13,4(R1)\n         ST    R1,8(13)\n         LR    R12,R13\n         LR    R13,R1\n         L     R1,24(R12)\n         BALR  R12,0\n         USING *,12\n         USING DSASECT,R13\n         ST    R1,INPARM\n         L     R10,12(R1)\n         USING WORKSECT,R10\n         L     R2,0(R1)\n         CLC   OINDEX,0(R2)   SAME INDEX STRUCTURE AS LAST CALL?\n         BE    CAMLOC         GO GET NEXT DATASET\n         MVC   OINDEX,0(R2)\n         SPACE 10\nBLDKEY   DS    0H\n*        THIS BLOCK ANALIZES THE NEW INDEX STRUCTURE INTO COMPONENTS\n*        IT CONSTRUCTS A VSAM CATALOG GENERIC SEARCH KEY AND AN\n*        OPTIONAL LOWER LEVEL QUALIFIER VERIFICATION STRING\n*        ONE ASTERISK IS ALLOWED ANYWHERE BELOW THE USERID.\n*        IT MAY REPRESENT ALL OR PART OF AN 'INDEX LEVEL'\n*        EXITS: NORMAL TO 'GENLOC'\n*               TO 'ERROR4' IF A SYSTAX ERROR OCCURS IN INDEX STRUCTURE\n         SR    R1,R1\n         SR    R2,R2          CLEAR FOR TRT INSTRUCTION\n         MVI   TRTAB,0\n         MVC   TRTAB+1(255),TRTAB\n         MVI   TRTAB+C' ',4\n         MVI   TRTAB+C'*',8\n         MVI   TRTAB+C'.',12\n         MVC   KEY,OINDEX     COPY INDEX INPUT\n         TRT   KEY,TRTAB\n         BZ    ERROR4         MUST BE A BLANK IN 44 CHARS\n         B     *(R2)\n         B     @USERID        C' ' MUST BE A USERID\n         B     ERROR4         C'*' ASTERISK MUST FOLLOW PERIOD\n         B     COMPLEX        C'.' MUST DO FULL ANALYSIS OF STRUCTURE\n         SPACE 5\n@USERID  DS    0H\n*        THIS BLOCK BUILDS SEARCH KEY FOR USERID. MUST BE <9 CHARACTERS\n*        AND WE ADD A PERIOD TO IT TO INDICATE TO GENERIC LOCATE\n*        THAT WE ARE INTERESTED IN THE DATASETS UNDER THE NAME AND\n*        NOT THE ALIAS RECORD (CVOL POINTER) OF THE NAME ITSELF.\n         MVI   0(R1),C'.'\n         LA    R3,KEY\n         SR    R1,R3\n         CH    R1,=H'8'\n         BH    ERROR4\n         LA    R1,1(R1)\n         STC   R1,NAME        STORE KEY LENGTH\n         MVI   LREST,X'80'\n         B     GENLOC\n* END OF USERID\n         SPACE 5\nCOMPLEX  DS    0H\n*        NOW WE SEARCH FOR AN IMBEDDED ASTERISK IN INDEX STRUCTURE\n*        CHARACTERS ABOVE IT ARE USED AS THE GENERIC KEY.\n*        CHARACTERS AFTER IT ARE USED AS THE LOWER LEVEL QUALIFIERS.\n         MVI   TRTAB+C'.',0   NO LONGER INTERESTED IN PERIODS\n         TRT   KEY,TRTAB\n         BZ    ERROR4\n         B     *(R2)\n         B     ONEPART        NO ASTERISK\n         B     TWOPART\n         SPACE 5\nONEPART  MVI   LREST,X'80'\n         LA    R3,KEY\n         SR    R1,R3\n         STH   R1,LKEY\n         STC   R1,NAME\n         B     GENLOC\n         SPACE 5\nTWOPART  DS    0H\n*        THIS BLOCK HANDLES THE CASE WHERE THERE IS AN EMBEDDED\n*        ASTERISK IN THE INDEX LEVEL. THE CHARACTERS BELOW THE\n*        ASTERISK ARE MOVED TO 'REST'. THE CHARACTERS FROM THE\n*        ASTERISK ON ARE BLANKED IN 'KEY'. THE LENGTH OF THE\n*        NON BLANK PART OF 'REST' LESS ONE IS SAVED IN 'LREST'\n*        FOR USE IN THE LATER CLC INSTRUCTION. THE LENGTH OF\n*        THE KEY IS SAVED IN 'NAME' FOR THE GENERIC LOCATE AND\n*        IN 'LKEY' FOR AN INDICATION OF HOW MANY CHARS TO\n*        SKIP BEFORE LOOKING IN A DSN FOR A MATCH TO 'REST'.\n         LA    R3,KEY+42\n         SR    R3,R1         GET LENGTH OF KEY ABOVE ASTERISK\n         MVC   REST,=CL44' ' INITIALIZE REST\n         EX    R3,MOVREST    MOVE PART BELOW ASTERISK\n         LA    R3,1(R3)\n         EX    R3,BLNKEY     BLANK KEY FROM ASTERISK ON\n         SH    R3,=H'43'\n         LPR   R3,R3         GET CHARS ABOVE ASTERISK\n         STH   R3,LKEY\n         STC   R3,NAME\n         TRT   REST,TRTAB    FIND NON-BLANK LENGTH OF REST\n         B     *(R2)\n         B     LENRST\n         B     ERROR4        SORRY, ONLY ONE * PER CUSTOMER\nLENRST   LA    R3,REST+1     CALCULATE LENGTH FROM ADDRESS\n         SR    R1,R3            OF FIRST BLANK\n         STH   R1,LREST\n         B     GENLOC\nMOVREST  MVC   REST(0),1(R1)\nBLNKEY   MVC   0(0,R1),=CL44' '\n* END OF TWOPART\n* END OF COMPLEX\n* END OF BLDKEY\n         EJECT\nGENLOC   DS    0H\n*        THIS BLOCK ISSUES A VSAM GENERIC LOCATE TO BUILD AN IN-CORE\n*        LIST OF DATASETS THAT BEGIN WITH THE SEARCH KEY\n*        THERE IS NO GOOD DOCUMENTATION ON THE GENERIC\n*        LOCATE IN THE LITERATURE. SEE THE CATALOG PLM FOR\n*        WHAT LITTLE THERE IS. THE FORM BELOW WAS INFERRED\n*        FROM SOME FICHE AND BY INTERCEPTING SVC 26 WITH DSS.\n         MVC   GENFLAG,=X'05201100'\n         XC    GENX1,GENX1\n         XC    GENX2(12),GENX2\n         LA    R1,NAME\n         ST    R1,GENNAME\n         GETMAIN R,LV=X'7FF8'\n         ST    R1,GETADDR\n         ST    R1,GENWORK\n         MVC   0(4,R1),=X'7FF80004'\n         LA    R1,GENPARM\n         XR    R0,R0\n         SVC   26\n         LTR   R15,R15\n         BNZ   ERROR4\n         L     R1,GETADDR    GET VSAM CATLG RETURN AREA\n         LA    R1,0(R1)       CLEAR HIGH BYTE\n         LH    R2,2(R1)       GET NUMBER BYTES USED\n         AR    R2,R1          ADD START ADDR\n         ST    R2,LAST        SAVE LAST BYTE ADDR\n         LA    R1,49(R1)      SKIP 4 BYTE PREFIX AND FIRST 45 BYTE ENTR\n         ST    R1,NEXT        SAVE ADDR OF FIRST DSN ENTRY\n* END OF GENLOC\n         SPACE 10\nCAMLOC   DS    0H\n*        NOW DO A REGULAR CAMLIST NAME LOCATE FOR THE NEXT NON-VSAM\n*        DATASET IN THE INCORE LIST\n         XC    CAMLST(16),CAMLST\n         LA    R1,KEY\n         ST    R1,CAMLST+4\n         LA    R1,VOLCNT\n         ST    R1,CAMLST+12\n         L     R1,NEXT\nTEST     C     R1,LAST\n         BNL   RET16          NO MORE DATASETS IN LIST\n         CLI   0(R1),C'A'     IS IT NON-VSAM\n         BE    S1\nNOGO     LA    R1,45(R1)\n         B     TEST\nS1       TM    LREST,X'80'    IS THERE A LOWER QUALIFIER\n         BO    S2             NO, SO GO LOCATE\n         SPACE 5\nTESTQUAL DS    0H\n*        THIS CODE LOOKS FOR THE CHARACTER STRING BELOW THE\n*        ASTERISK IN THE INDEX SEARCH KEY. THIS STRING MUST\n*        BE SOMEWHERE IN THE DATASET NAME BELOW THE KEY OR\n*        THE NAME IS REJECTED\n         LA    R2,1(R1)\n         AH    R2,LKEY        SKIP GENERIC KEY CHARS\n         LH    R3,LREST       GET # CHARS-1 IN REST\n         LA    R4,44\n         SR    R4,R3\n         SH    R4,LKEY        R4=# CHARS BELOW KEY + 1\nCOMP     EX    R3,COMPAR\n         BE    S2\n         LA    R2,1(R2)\n         BCT   R4,COMP\n         B     NOGO\nCOMPAR   CLC   REST(0),0(R2)\n* END OF TESTQUAL\n         SPACE 5\nS2       DS    0H\n*        NOW TO ISSUE NORMAL LOCATE BY NAME AND RETURN INFORMATION\n*        ACCORDING TO DESCRIPTION OF PARAMETERS IN LEADING DOCUMENT\n         MVC   KEY,1(R1)      COPY DSN\n         LA    R1,45(R1)      PT TO NXT DSN\n         ST    R1,NEXT        SAVE FOR NXT TIME\n         LA    R1,CAMLST\n         XR    R0,R0\n         SVC   26             LOCATE BY NAME\n         L     R2,INPARM      NOW GET PASSED PARM LIST\n         LM    R2,R3,4(R2)    PICK UP 2ND & 3RD USER PARMS\n         MVC   0(44,R2),KEY   SAVE DSN\n         MVC   0(6,R3),SER    SAVE VOL\n         TM    DEVT+2,X'20'   IS THIS DISK\n         BZ    ERROR8         NO, PASS 8 RETURN CODE\n         CLI   VOLCNT+1,1     IS IT MULTI-VOL\n         BNE   ERROR12        YES, PASS 12 RETURN CODE\n* END OF CAMLOC\n         SPACE 10\n*VARIOUS RETURNS\nRETN     SR    R15,R15\n         B     RC\nERROR4   LA    R15,4\n         B     RC\nERROR8   LA    R15,8\n         B     RC\nERROR12  LA    R15,12\n         B     RC\nRET16    FREEMAIN R,LV=X'7FF8',A=GETADDR\n         LA    R15,16\n         B     RC\nERROR20  LA    R15,20\nRC       L     R1,INPARM\n         TM    12(R1),X'80'\n         BO    EXIT\n         L     R1,16(R1)\n         ST    R15,0(R1)\nEXIT     L     R13,4(R13)\n         ST    R15,16(R13)\n         L     R1,8(R13)\n         FREEMAIN R,LV=LSECT,A=(1)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         LTORG\nDSASECT  DSECT\n         DS    18A\nGENPARM  DS    0F            GENERIC LOCATE PARM AREA\nGENFLAG  DS    F\nGENNAME  DS    A\nGENX1    DS    A\nGENWORK  DS    A\nGENX2    DS    3A\nKEYLEN   DS    0H\n         DS    X\nNAME     DS    X\nKEY      DS    CL44\nINPARM   DS    A             SAVE R1 UPON ENTRY TO LOCINDEX\nCAMLST   DS    4A\n         DS    0D\nLSECT    EQU   *-DSASECT\n         SPACE 10\nGETSECT  DSECT               GETMAINED VSAM WORK AREA\nGETLEN   DS    H             LENGT OF AREA\nGETUSED  DS    H             AMOUNT ALLOCATED CURRENTLY TO DATA\nGETENTY  DS    0CL45         FIRST ELEMENT OF DSN ARRAY\nGETTYPE  DS    C             TYPE FLAG ('A'=NONVSAM)\nGETNAME  DS    CL44          DSN\n         SPACE 10\nWORKSECT DSECT               WORK AREA PASSED AS PARM\nGETADDR  DS    A             ADDRESS OF GETMAINED VSAM WORK AREA\nTRTAB    DS    0CL256\nVOLCNT   DS    H\nDEVT     DS    XL4\nSER      DS    CL6\nSEQ      DS    H\n         DS    CL251\nOINDEX   DS    CL44          PREVIOUS VALUE OF FIRST PARM\nREST     DS    CL44          LOW QUALIFIER COMPARE STRING\nNEXT     DS    A             ADDRESS OF NEXT DSN IN INCORE TABLE\nLAST     DS    A             ADDRESS OF BYTE AFTER END OF DSNLIST\nLKEY     DS    H             LENGTH OF GENERIC KEY\nNOREST   DS    0B            FLAG IF 'REST' IS EMPTY\nLREST    DS    H             LENGTH OF REST\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MVSGPSVC": {"ttr": 2824, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MVSGPSVC TITLE 'MVS/XA GENERAL PURPOSE SVC   -   IGC0025B '\n*        PRINT OFF,NOGEN\n         MACRO\n         PROLOG\n*----------------------------------------------------------------------\n*                                                                     *\n*        NAME..........   MVSGPSVC (MVS GENERAL PURPOSE SVC)          *\n*                                                                     *\n*        FUNCTION......   MULTIFUCTION TYPE-3 USER SVC                *\n*                         (SEE DESCRIPTION BELOW)                     *\n*                                                                     *\n*        ATTRIBUTES....   REENTRANT REUSEABLE                         *\n*                                                                     *\n*        MODE:.........   RMODE=24  AMODE=31   (MVS/XA COMPATIBLE)    *\n*                                                                     *\n*        DEPENDENCIES..   \"IOSVSUCB\" UCB SCAN SERVICE ROUTINE OF      *\n*                         EITHER MVS SP1.3 OR SP2.1 (AND HIGHER)      *\n*                         THIS DEPENDENCY MAY BE ELIMINATED FOR       *\n*                         SYSTEMS PRIOR TO SP1.3 BY DROPPING THE      *\n*                         UCB SCAN ROUTINE IF NOT NEEDED.             *\n*                                                                     *\n*----------------------------------------------------------------------\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        DESCRIPTION:                                                 *\n*              PERFORM SEVERAL FUNCTIONS AS AN SVC WHICH ARE          *\n*              CONTROLLED BY ENTRY POINT INDICATOR PASSED IN          *\n*              R15.  THE TYPE OF FUNCTIONS CONTAINED HEREIN           *\n*              ARE THOSE PECULIAR TO EITHER THE MACHINE OR THE        *\n*              OPERATING SYSTEM WHICH HAVE A POSSIBILITY OF           *\n*              FOR CHANGE.  BY INCLUDING THSES TYPE OF FUNCTIONS      *\n*              IN A CENTRAL PLACE (HERE), WHEN CHANGES ARE REQUIRED   *\n*              THEY MAY BE GLOBALLY CHANGED VIA A SINGLE CHANGE       *\n*              (HERE).                                                *\n*                                                                     *\n*              ENTRY CODES ARE AS FOLLOWS:                            *\n*              R15=1  - USER SVC TEST VIA LOAD AND BRANCH             *\n*              R15=2  - DATE, DAY OF WEEK, TIME                       *\n*              R15=3  - SET APF AUTHORIZATION                         *\n*              R15=4  - RESET APF AUTHORIZATION                       *\n*              R15=5  - SMFWTM                                        *\n*              R15=6  - UCB LOOKUP (MVS/XA COMPATIBLE)                *\n*              R15=7  - JCT LOOKUP (CURRENT ASID ONLY), TSUID INFO    *\n*              R15=8  - JES JOBID ADDRESS                             *\n*              R15=9  - JES INPUT DEVICE ADDRESS                      *\n*              R15=10 - FULL SCREEN TPUT CLEAR                        *\n*              R15=11 - CALENDAR TO JULIAN DATE CONVERT (FWW)         *\n*              R15=12 - JULIAN TO CALENDAR DATE CONVERT (FWW)         *\n*              R15=13 - JULIAN DATE DIFFERENCE CALCULATION (FWW)      *\n*              R15=14 - UNUSED AT THIS TIME (A B)                     *\n*              R15=15 - UNUSED AT THIS TIME (TEMP USE FOR RACF)       *\n*              R15=16 - UNUSED AT THIS TIME (OPEN)                    *\n*              R15=17 - UNUSED AT THIS TIME (OPEN)                    *\n*              R15=18 - UNUSED AT THIS TIME (OPEN)                    *\n*              R15=19 - UNUSED AT THIS TIME (OPEN)                    *\n*                                                                     *\n*        NOTE.                                                        *\n*              BECAUSE WE ARE AN SVC, THERE IS NO NEED TO SAVE        *\n*              THE USERS REGISTER (THE SYSTEM HAS ALREADY SAVED       *\n*              THEM).  ALSO, CERTAIN REGISTERS HAVE BEEN PRIMED       *\n*              FOR US AS FOLLOWS:                                     *\n*                                                                     *\n*              R0  = SAME AS WHEN SVC WAS ISSUED (AT ENTRY TO EXIT)   *\n*              R1  = SAME AS WHEN SVC WAS ISSUED (AT ENTRY TO EXIT)   *\n*              R2  = UNPREDICTABLE                                    *\n*              R3  = CVT ADDRESS                                      *\n*              R4  = TCB ADDRESS(CURRENT)                             *\n*              R5  = SVRB ADDRESS (OURS)                              *\n*              R6  = ENTRY POINT (OUR BASE REG)                       *\n*              R7  = ASCB ADDRESS (CURRENT)                           *\n*              R8  = UNPREDICTABLE                                    *\n*              R9  = UNPREDICTABLE                                    *\n*              R10 = UNPREDICTABLE                                    *\n*              R11 = UNPREDICTABLE                                    *\n*              R12 = UNPREDICTABLE                                    *\n*              R13 = SAME AS WHEN SVC WAS ISSUED (AT ENTRY TO EXIT)   *\n*              R14 = RETURN REGISTER (TO SVC RETURN HANDLER)          *\n*              R15 = SAME AS WHEN SVC WAS ISSUED (AT ENTRY TO EXIT)   *\n*                                                                     *\n*              THIS ROUTINE IS LINKEDITED AS AN SVC (TYPE 3) TO       *\n*              BE INCLUDED VIA 'MLPA' AT IPL TIME.  BECAUSE THIS      *\n*              IS AN SVC, IT MUST REMAIN RE-ENTERABLE.                *\n*                                                                     *\n***********************************************************************\n         MEND\n         MACRO\n         JCTGET\n.*\n.*       FIND OUR JCT (RELEASE DEPENDENT) DKM\n.*\n         GBLA  &I\n&I       SETA  &SYSNDX\n.*\n         USING JESCT,R2\n         USING SSCT,R5\n         USING SSVT,R8\n         USING SJB,R11\n         SPACE 1\n         LA    R15,16              ASSUME BADNESS, RC=16\n         L     R2,CVTJESCT         ADDR OF JESCT FROM CVT\n         CLC   JESCTID,=CL4'JEST'  VALIDATE CONTROL BLOCK\n         BNER  R14                 INVALID, ERROR RETURN\n         SPACE 1\n         ICM   R5,15,JESSSCT       ADDR OF SSCT (1ST SSCT FROM JESCT)\nJCT@&I   DS    0H\n         BZR   R14                 INVALID ERROR RETURN, RC=16\n         SPACE 1\n         CLC   SSCTID,=CL4'SSCT'   VALIDATE CONTROL BLOCK\n         BNER  R14                 INVALID, ERROR RETURN, RC=16\n         CLC   SSCTSNAM,=CL4'JES2' CHECK FOR MATCHING SUBSYSTEM NAME\n         BE    JCT#&I              YES, CONTINUE\n         SPACE 1\n         ICM   R5,15,SSCTSCTA      GET NEXT SUBSYSTEM SSCT\n         B     JCT@&I              CHECK NEXT\n         SPACE 3\nJCT#&I   DS    0H\n         ICM   R8,15,SSCTSUS2      ADDRESS OF SSVT FROM SSCT\n         BZR   R14                 INVALID ERROR RETURN, RC=16\n         USING HCCT,R8\n         SPACE 1\n         LA    R15,4               LIGHTEN UP A BIT ...\n         ICM   R9,15,CCTHASP       CHECK IF HASP IS STILL UP\n         BNZR  R4                  RETURN CODE = 4, EXIT\n         ICM   R9,15,CCTHAVT       ADDRESS OF JES2 HAVT\n         BNPR  R4                  NOT THERE, HASP NOT UP, RC=4\n         USING PSA,R0              PSA ADDRESS\n         L     R7,PSAAOLD          ADDRESS OF CURRENT ASCB\n         LH    R15,ASCBASID        GET ASID FROM ASCB\n         SLL   R15,2               MULTIPLY BY 4\n         AR    R9,R15              ADDRESS OF OUR HAVT ENTRY\n         SPACE 1\n* ------------------------------------------------------------------- *\n*        CHAIN TO THE SJB VIA THE HASB                                *\n* ------------------------------------------------------------------- *\n         ICM   R11,15,0(R9)        ADDRESS OF HASB FROM JES2 HAVT\n         BNPR  R4                  NOT THERE, SPECIAL SYSTEM TASK\n         USING HASB,R11            ESTABLISH ADDRESSABILITY\n         CLC   HSBID,=C'HASB'      VALIDATE HASB\n         BNER  R4                  INVALID, RETURN\n         ICM   R11,15,HSBSJB       ADDRESS OF SJB FROM HASB\n         DROP  R11                 DROP USING ON HSB\n         BNPR  R4                  NOT THERE, SPECIAL SYSTEM TASK\n         USING SJB,R11             ESTABLISH ADDRESSABILITY\n         SPACE 1\n         CLC   SJBID,=CL4'SJB'     VALIDATE SJB CONTROL BLOCK\n         BNER  R14                 INVALID, RETURN\n         SPACE 1\n         ICM   R15,15,SJBSJB       ADDRESS OF DEPENDENT SJB\n         BZ    JCTNB&I             NONE, NOT BATCH\n         LR    R11,R15             INITIATOR'S DEPENDENT SJB\n         SPACE 1\nJCTNB&I  DS    0H\n         L     R10,SJBJCT          JOBS JCT\n         LA    R15,16              ONE MORE VALIDATION ...\n         CLC   JCTID,=CL4'JCT '    VALID JCT??\n         BNER  R14                 NO? OUTTA HERE...\n         SR    R15,R15             SET HAPPY CAMPER MODE\n         MEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIAL ENTRY POINT (DRIVER FOR SUBROUTINES).                *\n*        THIS ROUTINE CHECKS FOR A VALID ENTRY POINT INDICATOR        *\n*        PASSED IN R15.  IF IT IS VALID, R6 IS SET TO THE             *\n*        APPROPRIATE ENTRY POINT ADDRESS AND CONTROL IS PASSED        *\n*        TO TO THE ROUTINE.  IF IT IS INVALID, IT MERELY RETURNS      *\n*        TO THE CALLER VIA R14.                                       *\n*                                                                     *\n*        DATA AREAS REQUIRED BY A SINGLE ROUTINE SHOULD BE INCLUDED   *\n*        AT THE END OF THAT ROUTINE (FOR ADDRESSABILIY REASONS).      *\n*        THOSE THAT ARE USED BY MULTIPLE ROUTINES SHOULD BE INCLUDED  *\n*        AT THE END OF THE LAST ROUTINE TO USE IT (OR AT THE END      *\n*        OF THE CODE).  BY DOING THIS, EACH ROUTINE IS ALMOST         *\n*        INDEPENDENT OF OTHER FUNCTIONS AND THUS MAY BE REMOVED       *\n*        OR OTHERS ADDED WITH LITTLE CONCERN FOR DUPLICATION AND/OR   *\n*        RELATIONAL DEPENDENCIES.                                     *\n*                                                                     *\n***********************************************************************\nMVSGPSVC AMODE 31\nMVSGPSVC RMODE ANY\nMVSGPSVC CSECT\n         USING MVSGPSVC,R6         USE R6 FOR CSECT BASE REGISTER\n         USING CVT,R3    PERPETUAL USE R3 FOR CVT DSECT BASE REG\n         USING TCB,R4    PERPETUAL USE R4 FOR TCB DSECT BASE REG\n         USING ASCB,R7   PERPETUAL USE R7 FOR ASCB DSECT BASE REG\n         LTR   R15,R15             CHECK FOR POSITIVE EP INDICATOR\n         BNP   NOP                 IF NOT POSITIVE, GO TO NOP\n         LA    R2,EPCNT            LOAD R2 WITH NO OF VALID EP'S\n         CR    R15,R2              CHECK FOR VALID EP INDICATOR\n         BH    NOP                 IF INVALID, GO TO NOP\n         SLL   R15,2               MULTIPLY EP INDICATOR BY 4\n         L     R6,EPTABLE-4(R15)   SET R6=A(ROUTINE ENTRY POINT)\n         BR    R6                  GO TO APPROPRIATE ENTRY POINT\nNOP      BR    R14                 RETURN TO SVC HANDLER\n*\nEPTABLE  DC    A(SVCTEST)      1   SVCTEST ROUTINE\n         DC    A(TIME)         2   TIME ROUTINE\n         DC    A(AUTHSET)      3   AUTHSET ROUTINE\n         DC    A(AUTHRSET)     4   AUTHRSET ROUTINE\n         DC    A(SMFWTM)       5   SMFWTM ROUTINE\n         DC    A(UCBLOOK)      6   UCBLOOK ROUTINE\n         DC    A(JCTLOOK)      7   JCTLOOK ROUTINE\n         DC    A(JESJOBID)     8   JESJOBID ROUTINE\n         DC    A(JESINDEV)     9   JESINDEV ROUTINE\n         DC    A(CLEAR)       10   TSO CLEAR SCREEN ROUTINE\n         DC    A(CALJUL)      11   DATE CONVERSION ROUTINE\n         DC    A(JULCAL)      12   DATE CONVERSION ROUTINE\n         DC    A(JULDIF)      13   DATE DIFFERENCE ROUTINE\n         DC    A(NOP)         14   (UNUSED AT THIS TIME)\n         DC    A(XACF)        15   (UNUSED AT THIS TIME)\n         DC    A(NOP)         16   (UNUSED AT THIS TIME)\n         DC    A(NOP)         17   (UNUSED AT THIS TIME)\n         DC    A(NOP)         18   (UNUSED AT THIS TIME)\n         DC    A(NOP)         19   (UNUSED AT THIS TIME)\nEPCNT    EQU   (*-EPTABLE)/4       NUMBER OF VALID ENTRY POINTS\n         LTORG\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING ARE THE MVS GP SVC SUBROUTINES                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE SETS UP THE ENVIRONMENT TO TEST USER            *\n*        WRITTEN SVC'S.  IN ORDER TO USE THIS FUNCTION, A DRIVER      *\n*        PROGRAM MUST BE USED WHICH WILL POINT R1 AT A FOUR WORD      *\n*        LIST WHICH CONTAINS THE ENTRY POINT OF THE PRELOADED SVC     *\n*        MODULE FOLLOWED BY VALUES FOR R15/0/1 AS THEY SHOULD BE      *\n*        AT ENTRY TO THE SVC.  THIS ROUTINE MERELY LOADS R6 WITH      *\n*        WORD0, R15 WITH WORD1, R0 WITH WORD2, R1 WITH WORD3, AND     *\n*        BRANCHES ON R6.                                              *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = IGNORED                                          *\n*              R1  = ADDRESS OF 4 WORD AREA, FULLWORD ALLIGNED        *\n*                    A(BASE) A(PARM-R15) A(PARM-R1) A(PARM-R0)        *\n*              R15 = 1                                                *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*              R0  = DETERMINED BY SVC UNDER TEST                     *\n*              R1  = DETERMINED BY SVC UNDER TEST                     *\n*              R15 = DETERMINED BY SVC UNDER TEST                     *\n*                                                                     *\n***********************************************************************\nSVCTEST  DS    0H                  SVCTEST ENTRY\n         USING SVCTEST,R6          BASE FOR SUBROUTINE\n         USING PSCB,R10            ESTABLISH ADDRESSABILITY\n         USING IEZJSCB,R11         ESTABLISH ADDRESSABILITY\n         L     R11,TCBJSCB         GET JSCB ADDRESS\n         ICM   R15,15,ASCBTSB      GET TSB ADDRESS\n         BZ    SVCTERR             NO TSB = BATCH, NOT SUPPORTED\n         L     R10,JSCBPSCB        GET PSCB ADDRESS\n         TM    PSCBATR1,X'80'      CHECK FOR OPER CAPABILITY\n         BZ    SVCTERR             NO, INVALID REQUEST\n         L     R6,0(R1)            SET UP BASE FOR TEST ROUTINE\n         LM    R15,R1,4(R1)        SET UP R15,R0,R1 FOR TEST ROUTINE\n         BR    R6                  BRANCH TO PRELOADED SVC\nSVCTERR  L     R15,=F'-1'          SET RETURN CODE\n         LR    R0,R15              COPY TO R0\n         LR    R1,R15              AND  TO R1\n         BR    R14                 AND GIVE IT TO HIM\n         LTORG\n         DROP  R10                 DROP DSECT ADDRESSABILITY\n         DROP  R11                 DROP DSECT ADDRESSABILITY\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE SUPPLIES THE REQUESTOR WITH THE DATE, DAY       *\n*        OF WEEK, AND TIME.  IF THE CURRENT TIME IS NEEDED, REG1      *\n*        UPON ENTRY MUST BE A POSITIVE ADDRESS AND POINT TO A 5       *\n*        WORD AREA ALLIGNED ON A DOUBLEWORD.  IF TIME IS TO BE        *\n*        OBTAINED FROM A PREVIOUS STCK INSTRUCTION, REG1 UPON         *\n*        ENTRY MUST BE NEGATIVE AND ITS COMPLIMENT MUST POINT TO      *\n*        A 7 WORD AREA ALLIGNED ON A DOUBLEWORD, THE FIRST 2          *\n*        WORDS CONTAINING THE STCK DATA.  THE STORAGE AREA            *\n*        POINTED TO BY REG1 IS CHECKED FOR VALIDITY AND               *\n*        ALLIGNMENT.                                                  *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*        CURRENT TIME REQUEST.                                        *\n*              R0  = UNUSED                                           *\n*              R1  = ADDRESS OF 5 WORD AREA, DOUBLEWORD ALLIGNED      *\n*              R15 = 2                                                *\n*        STCK DATA SUPPLIED.                                          *\n*              R0  = UNUSED                                           *\n*              R1  = COMPLIMENT OF ADDRESS OF 7 WORD AREA,            *\n*                    DOUBLEWORD ALLIGNED                              *\n*              R15 = 2                                                *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*        AREA VALID AND PROPERLY ALLIGNED.                            *\n*              R0  = UNCHANGED                                        *\n*              R1  = UNCHANGED                                        *\n*              R15 = 0                                                *\n*              RETURN AREA.                                           *\n*                   +0 = MM/DD/YY    DATE                             *\n*                   +8 = X           DAY OF WEEK OFFSET (0=MONDAY)    *\n*                   +9 = HH.MM.SS.TH TIME                             *\n*        AREA NOT VALID OR NOT PROPERLY ALLIGNED.                     *\n*              R0  = UNCHANGED                                        *\n*              R1  = UNCHANGED                                        *\n*              R15 = 8                                                *\n*              RETURN AREA.                                           *\n*                   UNCHANGED                                         *\n*                                                                     *\n***********************************************************************\nTIME     DS    0H                  TIME ENTRY\n         USING TIME,R6             BASE FOR SUBROUTINE\n         USING RBBASIC,R5          ESTABLISH ADDRESSABILITY\n         USING TWORK,R15           ESTABLISH ADDRESSABILITY\nTIME1000 LR    R8,R1               SET R8=A(PASSED AREA)\n         LR    R15,R1              SET R15=A(ANSWER AREA)\n         LTR   R8,R8               CHECK FOR NEGATIVE\n         BNM   TIME1100            IF NOT NEGATIVE, GO TO TIME1100\n         LCR   R8,R8               SET ADDRESS POSITIVE\n         LA    R15,8(R8)           SET R15=A(ANSWER AREA)\nTIME1100 SR    R9,R9               RESET R9 FOR DOUBLE SHIFT\n         SRDL  R8,3                SHIFT FOR ALLIGNMENT TEST\n         LTR   R9,R9               CHECK R9 FOR ANY BITS ON\n         BNZ   TIMERT08            IF ANY ON, NOT ALLIGNED, GO TO 8 RT\n         SRDL  R8,29               SHIFT REST FOR USE AS ADDRESS\n         L     R5,RBLINK           SET R5=A(PREVIOUS RB)\n         IC    R8,RBOPSW+1         SET R9=REQUESTOR'S PROTECT KEY\n         SRL   R8,3                SHIFT OUT UNUSED BITS\n         BAL   R2,TIME1900         LINK TO VALIDITY CHECK ROUTINE\n         LA    R9,23(R15)          SET R8=A(LAST BYTE IN AREA)\n         BAL   R2,TIME1900         LINK TO VALIDITY CHECK ROUTINE\n         B     TIME2000            GO TO TIME2000\nTIME1900 LRA   R9,0(R9)            LOAD REAL ADDRESS INTO R9\n         BNZ   TIMERT08            IF INVALID, GO TO 8 RETURN\n         LTR   R8,R8               CHECK FOR REQUESTOR IN KEY0\n         BZR   R2                  IF KEY0, RETURN TO INVOKING AREA\n         SRL   R9,4                SHIFT TO ZERO UNWANTED REAL BITS\n         SLL   R9,4                RESTORE WITH BITS 28-31=0\n         SR    R10,R10             RESET R10 FOR SUBSEQUENT ISK\n         ISK   R10,R9              INSERT STORAGE KEY INTO R10\n         SRL   R10,3               SHIFT OUT UNUSED BITS FOR COMPARE\n         CR    R8,R10              CHECK FOR KEY MATCH\n         BER   R2                  IF EQUAL, RETURN TO INVOKING AREA\n         B     TIMERT08            IF NO MATCH, GO TO 8 RETURN\nTIME2000 LCR   R8,R1               SET R8=0-R1\n         BNM   TIME2110            IF NOT NEG, R1 NEG, GO TO TIME2110\nTIME2100 STCK  TW00L08             STORE CLOCK IN TW00L08\n         L     R8,CVTTZ            SET R8=CVTTZ, TIME ZONE DIFFERENTIAL\n         B     TIME2120            GO TO TIME2120\nTIME2110 MVC   TW00L08,0(R8)       MOVE PASSED STCK DATA TO TW00L08\n         SR    R8,R8               SET R8=0, TIME ZONE DIFFERENTIAL\nTIME2120 A     R8,TW00L04          ADD STCK DATA WORD 0 TO R8\n         L     R9,TW04L04          SET R9=STCK DATA WORD 1\n         SRDL  R8,12               SET R8,R9=TIME IN MICROSECONDS\n         AL    R9,CTIF5000         ADD 5000 MSECS FOR ROUNDING\n         BC    12,TIME2130         IF NO CARRY, GO TO TIME2130\n         AH    R8,CTIH0001         ADD 1 TO R8 FOR CARRY\nTIME2130 D     R8,CTIF060M         SET R8=REM MSECS, R9=MINS\n         SR    R10,R10             RESET R10 FOR SUBSEQUENT DIVIDE\n         LR    R11,R8              SET R8=REM MSECS\n         D     R10,CTIF010K        SET R11=HSECS\n         CVD   R11,TW00L08         CONVERT HSECS TO DECIMAL\n         UNPK  TW16L04,TW00L08     UNPACK INTO BYTE 16\n         MVC   TW15L02,TW16L02     MOVE SECS TO ANSWER AREA\n         SR    R8,R8               RESET R8 FOR SUBSEQUENT DIVIDE\n         D     R8,CTIF0060         SET R8=REM MINS, R9=HRS\n         CVD   R8,TW00L08          CONVERT MINS TO DECIMAL\n         UNPK  TW12L02,TW00L08     UNPACK MINS INTO ANSWER AREA\n         SR    R8,R8               RESET R8 FOR SUBSEQUENT DIVIDE\n         D     R8,CTIF0024         SET R8=REM HRS, R9=DAYS\n         CVD   R8,TW00L08          CONVERT HRS TO DECIMAL\n         UNPK  TW09L02,TW00L08     UNPACK HRS INTO ANSWER AREA\nTIME2200 SR    R10,R10             RESET R10 FOR SUBSEQUENT DIVIDE\n         LR    R11,R9              SET R11=DAYS\n         D     R10,CTIF0007        SET R10=DAY OF WEEK OFFSET\n         STC   R10,TW08L01         SAVE BINARY OFFSET IN ANSWER AREA\nTIME2300 SH    R9,CTIH0365         SUBTRACT 365 DAYS FOR 1900\n         BNM   TIME2310            IF NOT NEG, GO TO TIME2310\n         AH    R9,CTIH0365         ADD 365 DAYS FOR 1900\n         SLDL  R8,32               SET R8=JDAY-1, R9=00, YEAR\n         B     TIME2340            GO TO TIME2340\nTIME2310 SR    R8,R8               RESET R8 FOR SUBSEQUENT DIVIDE\n         D     R8,CTIF1461         SET R8=JDAY (4YR), R9=4YR COUNT-1\n         SLL   R9,2                SET R9=YR-1\n         LA    R9,1(R9)            SET R9=YR\n         LA    R12,3               SET R12=3, BCT COUNT\nTIME2320 SH    R8,CTIH0365         SUBTRACT 1 YR'S DAYS\n         BM    TIME2330            IF NEG, GO TO TIME2330\n         LA    R9,1(R9)            INCREMENT R9, YR\n         BZ    TIME2340            IF R8=0, GO TO TIME2340\n         BCT   R12,TIME2320        GO BACK TO TIME2320 AT MOST 2 TIMES\n         B     TIME2340            AFTER 2ND TIME, GO TO TIME2340\nTIME2330 AH    R8,CTIH0365         ADD TO MAKE NEG POS\nTIME2340 LA    R8,1(R8)            MAKE JDAY RELATIVE TO 1\n         CVD   R9,TW00L08          CONVERT YR TO DECIMAL\n         UNPK  TW06L02,TW06L02     UNPACK YEAR\n         ICM   R11,3,TW06L02       SAVE UNPACKED YR IN R11\n         LA    R12,TDTBLNLP        SET R12=A(NON-LEAP YEAR TABLE)\n         SLL   R9,30               SHIFT OUT BITS 0-29\n         LTR   R9,R9               CHECK FOR ANY REMAINING BITS\n         BNZ   TIME2350            IF ANY LEFT, GO TO TIME2350\n         LA    R12,TDTBLLP         SET R12=A(LEAP YEAR TABLE)\nTIME2350 SR    R10,R10             RESET R10 FOR SUBSEQUENT IC'S\nTIME2360 IC    R10,0(R9,R12)       SET R10=DA/MO FROM TABLE\n         LA    R9,1(R9)            INCREMENT R9, MONTH\n         SR    R8,R10              SUBTRACT DA/MO FROM R8 DA\n         BP    TIME2360            IF STILL POS, GO TO TIME2360\n         AR    R8,R10              ADD DA/MO TO MAKE POS\n         CVD   R8,TW00L08          CONVERT DA TO DECIMAL\n         UNPK  TW06L02,TW06L02     UNPACK DA\n         ICM   R11,12,TW06L02      SAVE UNPACKED DA IN R11\n         CVD   R9,TW00L08          CONVERT MO TO DECIMAL\n         UNPK  TW00L02,TW06L02     UNPACK MO INTO ANSWER AREA\n         STCM  R11,12,TW03L02      STORE DA INTO ANSWER AREA\n         STCM  R11,3,TW06L02       STORE YR INTO ANSWER AREA\n         MVZ   TW01L19,TW00L19     MOVE ALL F ZONES TO ANSWER AREA\n         MVI   TW02L01,C'/'        MOVE '/' BETWEEN DATE MM DD\n         MVI   TW05L01,C'/'        MOVE '/' BETWEEN DATE DD YY\n         NI    TW08L01,X'0F'       AND OFF F ZONE\n         MVI   TW11L01,C'.'        MOVE '.' BETWEEN TIME HH MM\n         MVI   TW14L01,C'.'        MOVE '.' BETWEEN TIME MM SS\n         MVI   TW17L01,C'.'        MOVE '.' BETWEEN TIME SS TH\nTIMERT00 SR    R15,R15             SET RETURN CODE=0\n         BR    R14                 RETURN TO SVC HANDLER\nTIMERT08 LA    R15,8               SET RETURN CODE=8\n         BR    R14                 RETURN TO SVC HANDLER\nCTIF0007 DC    F'7'\nCTIF0024 DC    F'24'\nCTIF0060 DC    F'60'\nCTIF1461 DC    F'1461'\nCTIF5000 DC    F'5000'\nCTIF010K DC    F'10000'\nCTIF060M DC    F'60000000'\nCTIH0001 DC    H'1'\nCTIH0365 DC    H'365'\nTDTBLLP  DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31)\nTDTBLNLP DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31)\n         LTORG\n         DROP  R5                  DROP USE OF R5 DSECT BASE REGISTER\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         DROP  R15                 DROP USE OF R15 DSECT BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE WILL PROVIDE MODESET AUTHORIZATION.  IT IS      *\n*        THEN THE USER'S RESPONSIBILITY TO ISSUE A MODESET MACRO      *\n*        IN ORDER TO GAIN SUPERVISOR STATE OR KEY ZERO.  UPON         *\n*        ENTRY REGISTER ONE MUST POINT TO THE CHARACTERS 'AUTH'.      *\n*        FOR TIME SHARING USERS ONLY, THE ISSUER OF THE SVC           *\n*        (CALLER) MUST EITHER HAVE OPER CAPABILITY OR RESIDE IN       *\n*        THE LINK PACK AREA (OR MLPA).  THIS IS TO INSURE THAT        *\n*        TSO USERS DO NOT ATTEMPT TO VIOLATE OUR SECURITY BY          *\n*        INVOKING EITHER DIRECTLY OR UNDER TEST.                      *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = UNUSED                                           *\n*              R1  = ADDRESS 'AUTH' LITERAL                           *\n*              R15 = 3                                                *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*        R1 UPON ENTRY ==> C'AUTH' AND (USER HAS OPER OR NON TSO)     *\n*              R0  = UNCHANGED                                        *\n*              R1  = UNCHANGED                                        *\n*              R15 = 0                                                *\n*              JSCBOPTS, BIT 7 SET                                    *\n*        R1 UPON ENTRY NOT ==> C'AUTH' OR INVALID TSO USER            *\n*              R0  = UNCHANGED                                        *\n*              R1  = UNCHANGED                                        *\n*              R15 = 8                                                *\n*              VIOLATION MESSAGE WRITTEN TO OPERATOR                  *\n*                                                                     *\n***********************************************************************\nAUTHSET  DS    0H                  AUTHSET ENTRY\n         USING WTO,R1              ESTABLISH ADDRESSABILITY\n         USING RBBASIC,R5          ESTABLISH ADDRESSABILITY\n         USING AUTHSET,R6          BASE FOR SUBROUTINE\n         USING PSCB,R10            ESTABLISH ADDRESSABILITY\n         USING IEZJSCB,R11         ESTABLISH ADDRESSABILITY\n         USING TIOT,R12            ESTABLISH ADDRESSABILITY\n         LR    R8,R0               SAVE R0 IN R8\n         LR    R9,R1               SAVE R1 IN R9\n         CLC   AUTH,0(R1)          CHECK FOR R1 POINTING AT 'AUTH'\n         BNE   AUTSRT08            IF NOT, GO TO 8 RETURN\n         L     R11,TCBJSCB         SET R11=A(JSCB)\n         ICM   R15,15,ASCBTSB      SET R15=A(TSB)\n         BZ    AUTSRT00            IF NOT TSO, GO TO 0 RETURN\n         L     R10,JSCBPSCB        SET R10=A(PSCB)\n         TM    PSCBATR1,X'80'      CHECK FOR OPER CAPABILITY\n         BO    AUTSRT00            IF OPER, GO TO 0 RETURN\n         L     R5,RBLINK           SET R5=A(PREVIOUS RB)\n         L     R15,RBOPSW+4        GET INTERUPT ADDRESS FROM RB PSW\n         TM    CVTDCB,X'80'        IS THIS MVS XA ?\n         BO    AUTCHK01            YES, CHECK ADDRESS\nAUTCHK00 LA    R15,0(R15)          CLEAR HIGH ORDER BYTE\n         C     R15,CVTSHRVM        CHECK FOR REQ FROM CSA OR ABOVE\n         BL    AUTSRT08            BELOW CSA, INVALID REQUEST\n         B     AUTSRT00            ABOVE, ALLOW REQUEST\nAUTCHK01 TM    RBOPSW+4,X'80'      EXECUTING IN 31 BIT MODE?\n         BZ    AUTCHK00            NO, CHECK ADDRESS\n         N     R15,MASK31          STIP HIGH ORDER BIT\n         C     R15,CVTSHRVM        CHECK FOR REQ FROM CSA OR ABOVE\n         BL    AUTSRT08            BELOW CSA, INVALID REQUEST\n*        L     R10,CVTVSTGX        ADDRESS OF XA STG MAP\n         L     R10,X'4AC'(R3)         ( COMPATIBILITY WITH SP1.3 )\n*        USING CVTVSTGX,R10        ADDRESSABILITY\n*        C     R15,CVTEMLPE        CHECK IF BEYOND EXTENDED MLPA\n         C     R15,X'4C'(R10)         ( COMPATIBILITY WITH SP1.3 )\n         BH    AUTSRT08            ABOVE EXTENDED MLPA, INVALID REQ\nAUTSRT00 OI    JSCBOPTS,X'01'      SET MODESET AVAILABLE BIT\n         SR    R15,R15             SET R15=0, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\nAUTSRT08 LA    R0,256              SET R0=256, GETMAIN LENGTH\n         GETMAIN R,LV=(0)          GET STORAGE FOR WTO\n         LR    R2,R1               SAVE AREA ADDRESS IN R2\n         MVC   WTO(CAUWTOLN),CAUWTO    MOVE WTO DATA TO GOTTEN AREA\n         L     R12,TCBTIO          SET R12=A(TIOT)\n         MVC   WTOMSG+30(8),TIOCNJOB   MOVE JOBNAME TO WTOMSG\n         WTO   MF=(E,(1))          ISSUE WTO\n         LA    R0,256              SET R0=256, FREEMAIN LENGTH\n         LR    R1,R2               SET R1=A(GOTTEN AREA)\n         FREEMAIN R,LV=(0),A=(1)   FREE GOTTEN STORAGE\n         LR    R0,R8               RESTORE ORIGINAL R0 FROM R8\n         LR    R1,R9               RESTORE ORIGINAL R1 FROM R9\n         LA    R15,8               SET R15=8, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\nCAUWTO   DC    0F'0',AL2(CAUWTOLN-4),XL2'8000' TEXT LENGTH, MCS CODES\n         DC    CL50'SECURITY VIOLATION ATTEMPT BY XXXXXXXX - NOTIFY TE'\n         DC    CL15'CHNICAL SUPPORT'\n         DC    XL4'4000C080'       DESCRIPTOR CODES, ROUT CODES\nCAUWTOLN EQU   *-CAUWTO\nAUTH     DC    CL4'AUTH'\n         DS    0F\nMASK31   DC    X'7FFFFFFF'\nMVSGPSVC CSECT\n         LTORG\n         DROP  R1                  DROP USE OF R1 BASE REGISTER\n         DROP  R5                  DROP USE OF R5 BASE REGISTER\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         DROP  R10                 DROP USE OF R10 BASE REGISTER\n         DROP  R11                 DROP USE OF R11 BASE REGISTER\n         DROP  R12                 DROP USE OF R12 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE WILL DISALLOW MODESET AUTHORIZATION.            *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = UNUSED                                           *\n*              R1  = UNUSED                                           *\n*              R15 = 4                                                *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*              R0  = UNCHANGED                                        *\n*              R1  = UNCHANGED                                        *\n*              R15 = 0                                                *\n*              JSCBOPTS, BIT 7 RESET                                  *\n*                                                                     *\n***********************************************************************\nAUTHRSET DS    0H                  AUTHRSET ENTRY\n         USING AUTHRSET,R6         BASE FOR SUBROUTINE\n         USING IEZJSCB,R11         ESTABLISH ADDRESSABILITY\n         L     R11,TCBJSCB         SET R11=A(JSCB)\n         NI    JSCBOPTS,X'FE'      RESET MODESET AVAILABLE BIT\n         SR    R15,R15             SET R15=0, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\n         LTORG\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         DROP  R11                 DROP USE OF R11 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE ISSUES THE SMFWTM (SMF WRITE MACRO) FOR A       *\n*        SMF RECORD POINTED TO BY R1.  IT CAN BE USED BY ANY          *\n*        MODULE WITHOUT HAVING TO BE AUTHORIZED TO OBTAIN             *\n*        SUPERVISOR MODE.                                             *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = UNUSED                                           *\n*              R1  = ADDRESS OF SMF RECORD                            *\n*              R15 = 5                                                *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*              R0  = UNCHANGED                                        *\n*              R1  = UNCHANGED                                        *\n*              R15 = 0  WRITTEN WITHOUT ERROR                         *\n*              R15 = 4  NOT WRITTEN, WOULD NOT FIT IN EMPTY D.S.      *\n*              R15 = 8  NOT WRITTEN, RDW LENGTH LESS THAN 18          *\n*              R15 = 16 NOT WRITTEN, MAN=NONE OR BOTH D.S. FULL       *\n*              R15 = 20 NOT WRITTEN, IEFU83 SUPPRESSED WRITE          *\n*                                                                     *\n***********************************************************************\nSMFWTM   DS    0H                  SMFWTM ENTRY\n         USING SMFWTM,R6           BASE FOR SUBROUTINE\n         LR    R8,R0               SAVE R0 IN R8\n         LR    R9,R1               SAVE R1 IN R9\n         SMFWTM (1)                WRITE SMF RECORD POINTED TO BY R1\n         LR    R0,R8               RESTORE R0 FROM R8\n         LR    R1,R9               RESTORE R1 FROM R9\n         BR    R14                 RETURN TO SVC HANDLER\n         LTORG\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE SUPPLIES THE REQUESTOR WITH THE UCB             *\n*        ADDRESS OF THE UCB WHOSE EBCDIC VALUE IS PASSED IN THE       *\n*        LOW ORDER THREE BYTES OF R0.                                 *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = EBCDIC UCB NAME ('.1A8' = X'..F1C1F8')           *\n*              R1  = UNUSED                                           *\n*              R15 = 6                                                *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*        UCB FOUND.                                                   *\n*              R0  = EBCDIC UCB NAME IN LOW ORDER 3 BYTES             *\n*              R1  = ADDRESS OF UCB                                   *\n*              R15 = 0                                                *\n*        UCB NOT FOUND.                                               *\n*              R0  = -1                                               *\n*              R1  = -1                                               *\n*              R15 = 8                                                *\n*                                                                     *\n***********************************************************************\nUCBLOOK  DS    0H                  UCBLOOK ENTRY\n         USING UCBLOOK,R6          BASE FOR SUBROUTINE\n         USING UCBDSECT,R11        ESTABLISH ADDRESSABILITY\n         USING UCBWORK,R13         ESTABLISH ADDRESSABILITY\n         LR    R8,R0               SAVE R0 IN R8\n         LR    R9,R1               SAVE R1 IN R9\n         LR    R12,R14             SAVE R14 IN R12\n         LA    R0,UCBWORKE-UCBWORK SET SIZE FOR GETMAIN\n         GETMAIN R,LV=(0)          GET SOME STORAGE\n         LR    R13,R1              ADDRESS OF UCBWORK TO BASE REG\n         XC    UCBWORKS(UCBWORKE-UCBWORK),UCBWORK CLEAR WORK AREA\n         LA    R1,UCBWORKS         ADDRESS OF WORK AREA FOR UCB SCAN\n         ST    R1,UCBPARML         PLACE INTO PARM LIST\n         LA    R1,UCBDEVCL         ADDRESS OF DEVICE CLASS (NULL)\n         ST    R1,UCBPARML+4       PLACE INTO PARM LIST\n         LA    R1,UCBADDR          ADDRESS OF RETURN FIELD\n         ST    R1,UCBPARML+8       PLACE INTO PARM LIST\n         OI    UCBPARML+8,128      SET HIGH ORDER BIT\n*\n*        SCAN EACH UCB VIA IOSVSUCB AND CHECK FOR REQUESTED NAME\n*\nUCBLOOP  EQU   *\n         LA    R1,UCBPARML         PARAMETER LIST FOR IOSUCBSV\n         L     R15,CVTUCBSC        UCB SERVICE ROUTINE ADDRESS\n         BALR  R14,R15             CALL UCB SERVICE ROUTINE\n         LTR   R15,R15             ANY UCB FOUND?\n         BNZ   UCBERR              NO, REQUESTED NOT FOUND\n         L     R9,UCBADDR          PICK UP UCB ADDR\n         CLM   R8,7,13(R9)         RIGHT UCB ?\n         BNE   UCBLOOP             NO - CHECK NEXT ENTRY\n         SR    R10,R10             FOUND, RESET RETCODE\n         B     UCBDONE             AND EXIT\nUCBERR   L     R8,=F'-1'           NOT FOUND\n         L     R9,=F'-1'           NOT FOUND\n         LA    R10,8               NOT FOUND\nUCBDONE  LA    R0,UCBWORKE-UCBWORK SET SIZE FOR GETMAIN\n         LA    R1,UCBWORK          SET R1=A(GETMAIN AREA)\n         FREEMAIN R,LV=(0),A=(1)   FREE GOTTEN STORAGE\n         LR    R0,R8               RESTORE ORIGINAL R0 FROM R8\n         LR    R1,R9               RESTORE ORIGINAL R1 FROM R9\n         LR    R14,R12             RESTORE ORIGINAL R14 FROM R12\n         LR    R15,R10             SET R15=RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\n         LTORG\nUCBDEVCL DC    XL1'00'             UCB DEVICE CLASS (ALL DEVICES)\nUCBWORK  DSECT\nUCBSAVE  DS    18F                 REG SAVE AREA FOR IOSVSUCB\nUCBADDR  DS    F                   ADDRESS OF RETURNED UCB\nUCBPARML DS    A                   IOSVSUCB PARM - ADDR OF UCBWORK\n         DS    A                   IOSVSUCB PARM - ADDR OF DEVICE CLASS\n         DS    A                   IOSVSUCB PARM - UCB ADDRESS POINTER\n         DS    F                   IOSVSUCB RETURNED UCB ADDRESS\nUCBWORKS DS    XL100               IOSVSUCB WORK AREA\nUCBWORKE EQU   *                   END OF UCBWORK\nMVSGPSVC CSECT\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         DROP  R11                 DROP USE OF R11 DSECT BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE WILL PROVIDE THE JCT ADDRESS FOR A JOB,         *\n*        PROVIDE THE ADDRESS OF THE 7 BYTE TSO USER ID IF THE         *\n*        JOB CARD CONTAINS A NOTIFY= PARAMETER, AND CHECKS FOR        *\n*        THAT USER BEING LOGGED ON.                                   *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = UNUSED                                           *\n*              R1  = UNUSED                                           *\n*              R15 = 7                                                *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*        NOTIFY SPECIFIED, NOTIFY TSO USER LOGGED ON                  *\n*              R0  = A(TSO TSU ID)                                    *\n*              R1  = A(JCT)                                           *\n*              R15 = 0                                                *\n*        NOTIFY SPECIFIED, NOTIFY TSO USER NOT LOGGED ON              *\n*              R0  = A(TSO TSU ID)                                    *\n*              R1  = A(JCT)                                           *\n*              R15 = 4                                                *\n*        NOTIFY NOT SPECIFIED                                         *\n*              R0  = 0                                                *\n*              R1  = A(JCT)                                           *\n*              R15 = 8                                                *\n*        INVALID CONTROL BLOCK STRUCTURE (JCT NOT FOUND)              *\n*              R0  = UNPREDICTABLE                                    *\n*              R1  = UNPREDICTABLE                                    *\n*              R15 = 16                                               *\n*                                                                     *\n***********************************************************************\nJCTLOOK  DS    0H                  JCTLOOK ENTRY\n         USING JCTLOOK,R6          BASE FOR SUBROUTINE\n         USING ASVT,R12            ESTABLISH ADDRESSABILITY\n         USING JCT,R10             ADDRESSABILITY ESTABLISHED IN $JCT\n         JCTGET                    GET JCT ADDRESS\n         CLI   JCTTSUID,X'00'      CHECK FOR NO NOTIFY\n         BE    JCTLRT08            IF NULL, NONE, GO TO 8 RETURN\n         L     R12,CVTASVT         SET R12=A(ASVT) FROM CVT\n         L     R0,ASVTMAXU         SET R0=MAX # OF ASCB'S FROM ASVT\nJCTL1100 ICM   R7,15,ASVTENTY      SET R7=A(ASCB) FROM ASVT\n         BM    JCTL1200            IF NOT ASSIGNED, GO TO JCTL1200\n         ICM   R1,15,ASCBTSB       SET R1=A(TSB) FROM ASCB\n         BZ    JCTL1200            IF 0, NOT TSO, GO TO JCTL1200\n         L     R15,ASCBJBNS        SET R15=A(JOBNAME) FROM ASCB\n         CLC   JCTTSUID,0(R15)     CHECK FOR TSO USER LOGGED ON\n         BE    JCTLRT00            IF LOGGED ON, GO TO JCTLRT00\nJCTL1200 LA    R12,4(R12)          INCREMENT R12, ASVT DSECT BASE\n         BCT   R0,JCTL1100         CONTINUE CHECKING AT JCTL1100\n         B     JCTLRT04            USER NOT LOGGED ON, GO TO JCTLRT04\nJCTLRT00 EQU   *\n         LA    R0,JCTTSUID         SET R0=A(NOTIFY TSUID)\n         LA    R1,JCTSTART         SET R1=A(JCT)\n         SR    R15,R15             SET R15=0, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\nJCTLRT04 EQU   *\n         LA    R0,JCTTSUID         SET R0=A(NOTIFY TSUID)\n         LA    R1,JCTSTART         SET R1=A(JCT)\n         LA    R15,4               SET R15=4, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\nJCTLRT08 SR    R0,R0               SET R0=0, NO NOTIFY\n         LA    R1,JCTSTART         SET R1=A(JCT)\n         LA    R15,8               SET R15=8, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\n         LTORG\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         DROP  R10                 DROP USE OF R10 BASE REGISTER\n         DROP  R12                 DROP USE OF R12 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE WILL PROVIDE THE ADDRESS OF THE EIGHT           *\n*        CHARACTER SYSTEM JOBNAME IN REGISTER 0 (TIOT) AND THE        *\n*        ADDRESS OF THE EIGHT CHARACTER JES JOBID IN REGISTER 1.      *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = UNUSED                                           *\n*              R1  = UNUSED                                           *\n*              R15 = 8                                                *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*              R0  = ADDRESS OF SYSTEM JOBNAME (TIOT)                 *\n*              R1  = ADDRESS OF JES JOBID                             *\n*              R15 = 0                                                *\n*                                                                     *\n*        INVALID CONTROL BLOCK STRUCTURE (JCT NOT FOUND)              *\n*              R0  = UNPREDICTABLE                                    *\n*              R1  = UNPREDICTABLE                                    *\n*              R15 = 16                                               *\n*                                                                     *\n***********************************************************************\nJESJOBID DS    0H                  JESJOBID ENTRY\n         USING JESJOBID,R6         BASE FOR SUBROUTINE\n         USING JCT,R10             ADDRESSABILITY ESTABLISHED IN $JCT\n         JCTGET                    GET JCT ADDRESS\n         L     R0,TCBTIO           SET R0=A(TIOT)\n         LA    R1,JCTJOBID         SET R1=A(JES JOB NUMBER)\n         SR    R15,R15             SET R15=0, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\n         LTORG\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         DROP  R10                 DROP USE OF R10 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE WILL PROVIDE THE ADDRESS OF THE JES INPUT       *\n*        DEVICE IN REGISTER 1.                                        *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = UNUSED                                           *\n*              R1  = UNUSED                                           *\n*              R15 = 9                                                *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*        REMOTE INPUT DEVICE.                                         *\n*              R0  = UNCHANGED                                        *\n*              R1  = ADDRESS OF JES INPUT DEVICE                      *\n*              R15 = 0                                                *\n*        NOT REMOTE INPUT DEVICE.                                     *\n*              R0  = UNCHANGED                                        *\n*              R1  = ADDRESS OF JES INPUT DEVICE                      *\n*              R15 = 4                                                *\n*        INVALID CONTROL BLOCK STRUCTURE (JCT NOT FOUND)              *\n*              R0  = UNPREDICTABLE                                    *\n*              R1  = UNPREDICTABLE                                    *\n*              R15 = 16                                               *\n*                                                                     *\n***********************************************************************\nJESINDEV DS    0H                  JESINDEV ENTRY\n         USING JESINDEV,R6         BASE FOR SUBROUTINE\n         USING JCT,R10             ADDRESSABILITY ESTABLISHED IN $JCT\n         JCTGET                    GET JCT ADDRESS\n         CLI   JCTINDEV,C'R'       CHECK FOR REMOTE INDEV\n         BNE   JESIRT04            IF NOT, GO TO JESIRT04\n         CLI   JCTINDEV+1,C'1'     CHECK FOR REMOTE INDEV\n         BL    JESIRT04            IF NOT, GO TO JESIRT04\n         CLI   JCTINDEV+2,C'.'     CHECK FOR REMOTE INDEV\n         BE    JESIRT00            IF REMOTE, GO TO JESIRT00\n         CLI   JCTINDEV+2,C'0'     CHECK FOR REMOTE INDEV\n         BL    JESIRT04            IF NOT, GO TO JESIRT04\n         CLI   JCTINDEV+3,C'.'     CHECK FOR REMOTE INDEV\n         BE    JESIRT00            IF REMOTE, GO TO JESIRT00\n         CLI   JCTINDEV+3,C'0'     CHECK FOR REMOTE INDEV\n         BL    JESIRT04            IF NOT, GO TO JESIRT04\nJESIRT00 LA    R1,JCTINDEV         SET R1=A(JES INPUT DEVICE)\n         SR    R15,R15             SET R15=0, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\nJESIRT04 LA    R1,JCTINDEV         SET R1=A(JES INPUT DEVICE)\n         LA    R15,4               SET R15=4, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\n         LTORG\n         DROP  R6\n         DROP  R10\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE WILL ISSUE A FULL SCREEN TPUT TO BLANK OUT      *\n*        THE ENTIRE SCREEN ON DISPLAY TERMINALS ONLY.  ALSO, IF       *\n*        THE TERMINAL IS A DISPLAY DEVICE, A TCLEARQ IS ISSUED        *\n*        TO STRIP OFF THE 'RESHOW' (PA2) THAT IS STACKED BY ISPF.     *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = UNUSED                                           *\n*              R1  = UNUSED                                           *\n*              R15 = 10                                               *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*              R0  = # LINES PER SCREEN                               *\n*              R1  = # CHARACTERS PER LINE                            *\n*              R15 = 0                                                *\n*                                                                     *\n***********************************************************************\nCLEAR    DS    0H                  JESINDEV ENTRY\n         USING CLEAR,R6            BASE FOR SUBROUTINE\n         GTSIZE ,                  TEST FOR SCREEN TERMINAL\n         LTR   R0,R0               BYPASS TPUT IF NOT\n         BZ    CLEARE              NOT A TUBE, IGNORE REQUEST\n         TPUT  CLEARD,CLEARL,FULLSCR,WAIT,HOLD CLEAR THE TUBE\n         TCLEARQ INPUT             RESET INPUT STACK\n         GTSIZE ,                  INITIALIZED R0/R1 SIZES\nCLEARE   DS    0H                  JESINDEV ENTRY\n         SR    R15,R15             SET R15=0, RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\n         LTORG\nCLEARD   DC    X'F1115D7E114040133CC75F003C4E7F003CD65F003C404000'\nCLEARL   EQU   *-CLEARD      LENGTH OF TPUT\n         LTORG\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE WILL CONVERT A CALENDAR DATE IN THE FORMAT      *\n*        OF 0MMDDYYS TO THE CORRESPONDING JULIAN DATE IN THE          *\n*        FORMAT OF 00YYDDDF, AND RETURN THE DAY OF WEEK OFFSET        *\n*        IN THE FORMAT OF 0000000O.  BOTH DATE FIELDS ARE IN          *\n*        PACKED DECIMAL NOTATION AND THE DAY OF WEEK OFFSET IS        *\n*        IN BINARY.  CALENDAR DATE IS PASSED IN R0, DAY OF WEEK       *\n*        OFFSET IS RETURNED IN R0, AND JULIAN DATE IS RETURNED        *\n*        IN R1.                                                       *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = CALENDAR DATE IN PACKED FORMAT 0MMDDYYS          *\n*              R1  = UNUSED                                           *\n*              R15 = 11                                               *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*        DATE PASSED IN R0 IS VALID.                                  *\n*              R0  = DAY OF WEEK OFFSET IN BINARY FORMAT (0=MONDAY)   *\n*              R1  = JULIAN DATE IN PACKED FORMAT 00YYDDDF            *\n*              R15 = 0                                                *\n*        DATE PASSED IN R0 IS INVALID.                                *\n*              R0  = UNCHANGED                                        *\n*              R1  = UNCHANGED                                        *\n*              R15 = 4                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCALJUL   DS    0H                  CALJUL ENTRY\n         USING CALJUL,R6           BASE FOR SUBROUTINE\n         USING TWORK,R13           ESTABLISH ADDRESSABILITY\nCALJ1000 DS    0H\n         LR    R8,R0               SAVE R0 IN R8\n         LR    R9,R1               SAVE R1 IN R9\n         LA    R0,24               SET R0=24, GETMAIN LENGTH\n         GETMAIN R,LV=(0)          GET SOME STORAGE\n         LR    R13,R1              SET R13=A(TWORK)\n         ST    R8,TW08L04          STORE CALENDAR DATE IN TWORK\n         TRT   TW08L04,CTRTAB3     CHECK FOR VALID PACKED FORMAT\n         BC    12,CALJRT04         IF INVALID, GO TO CALJRT04\n         LA    R1,X'80'            SET R1=X'80', CONSTANT\n         NR    R1,R2               CHECK FOR LAST BYTE VALID\n         BZ    CALJRT04            IF INVALID, GO TO CALJRT04\n         CLI   TW08L01,X'01'       CHECK FOR XMM=(00M OR 01M)\n         BH    CALJRT04            IF NOT, GO TO CALJRT04\n         UNPK  TW12L06,TW08L04     UNPACK CALENDAR DATE AT\n         OI    TW17L01,C'0'        FORCE F SIGN\n         PACK  TW00L08,TW12L02     PACK MM\n         CVB   R3,TW00L08          SET R3=BINARY MM\n         LTR   R3,R3               CHECK FOR MM=0\n         BZ    CALJRT04            IF 0, GO TO CALJRT04\n         LA    R15,12              SET R15=12, CONSTANT\n         CR    R3,R15              CHECK FOR MM GT 12\n         BH    CALJRT04            IF GT, GO TO CALJRT04\n         PACK  TW00L08,TW14L02     PACK DD\n         CVB   R4,TW00L08          SET R4=BINARY DD\n         LTR   R4,R4               CHECK FOR DD=0\n         BZ    CALJRT04            IF 0, GO TO CALJRT04\n         PACK  TW00L08,TW16L02     PACK YY\n         CVB   R5,TW00L08          SET R5=BINARY YY\n         LA    R1,CDTABNLP         SET R1=A(NON-LEAP YEAR TABLE)\n         CLC   TW16L02,=CL2'00'    CHECK FOR 1900\n         BE    CALJ1100            IF 1900, NOT LEAP, GO TO CALJ1100\n         STC   R5,TW00L01          SET TW00L01=BINARY YY\n         TM    TW00L01,X'03'       CHECK FOR NOT DIVISIBLE BY 4\n         BNZ   CALJ1100            IF NOT, NOT LEAP, GO TO CALJ1100\n         LA    R1,CDTABLP          SET R1=A(LEAP YEAR TABLE)\nCALJ1100 LA    R15,0(R1,R3)        SET R15=A(MAX DAYS IN MONTH)\n         CLM   R4,1,0(R15)         CHECK FOR VALID DD\n         BH    CALJRT04            IF GT, INVALID, GO TO CALJRT04\n         PACK  TW08L03,TW16L03     PACK YY INTO JULIAN FORMAT\n         SLL   R3,1                SET R3=2*MM\n         LA    R15,11(R1,R3)       SET R15=A(N(DAYS IN PREC MOS))-2\n         ZAP   TW10L02,0(2,R15)    PACK DAYS INTO JULIAN FORMAT\n         CVD   R4,TW00L08          CONVERT DD TO DECIMAL\n         AP    TW10L02,TW00L08     ADD DD TO PRECEDING DAYS\n         OI    TW11L01,X'0F'       FORCE F SIGN\n         L     R9,TW08L04          SET R9=PACKED JULIAN DATE\n         ZAP   TW00L08,TW10L02     SET TW00L08=PACKED JULIAN DDDF\n         CVB   R4,TW00L08          SET R4=BINARY JULIAN DDD\n         MVO   TW00L08,TW09L01     SET TW00L08=PACKED JULIAN YYF\n         CVB   R5,TW00L08          SET R5=BINARY JULIAN YY\n         LA    R2,365              SET R2=365, MULTIPLIER\n         LR    R11,R5              SET R11=YY\n         MR    R10,R2              SET R11=365*YY\n         LTR   R10,R5              SET R10=YY\n         BZ    *+6                 IF YY EQ 00, SKIP NEXT INSTRUCTION\n         BCTR  R10,R0              SET R10=YY-1\n         SRL   R10,2               SET R10=I((YY-1)/4)\n         AR    R11,R10             SET R11=365*YY+I((YY-1)/4)\n         AR    R11,R4              SET R11=365*YY+I((YY-1)/4)+DDD\n         BCTR  R11,R0              SET R11=365*YY+I((YY-1)/4)+DDD-1\n         LA    R2,7                SET R2=7, DIVISOR\n         SR    R10,R10             SET R10=0, R11=DAYS-1\n         DR    R10,R2              SET R10=R((DAYS-1)/7)\n         LR    R8,R10              SET R8=DAY OF WEEK OFFSET\nCALJRT00 SR    R10,R10             SET R10=0, RETURN CODE\n         B     CALJRTXX            GO TO CALJRTXX\nCALJRT04 LA    R10,4               SET R10=4, RETURN CODE\nCALJRTXX LA    R0,24               SET R0=24, L'GETMAIN AREA\n         LA    R1,TWORK            SET R1=A(GETMAIN AREA)\n         FREEMAIN R,LV=(0),A=(1)   FREE GOTTEN STORAGE\n         LR    R0,R8               RESTORE NEW/ORIGINAL R0 FROM R8\n         LR    R1,R9               RESTORE NEW/ORIGINAL R1 FROM R9\n         LR    R15,R10             SET R15=RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\n         SPACE 1\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         DROP  R13                 DROP USE OF R13 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE WILL CONVERT A JULIAN DATE IN THE FORMAT        *\n*        OF 00YYDDDS TO THE CORRESPONDING CALENDAR DATE IN THE        *\n*        FORMAT OF 0MMDDYYF, AND RETURN THE DAY OF WEEK OFFSET        *\n*        IN THE FORMAT OF 0000000O.  BOTH DATE FIELDS ARE IN          *\n*        PACKED DECIMAL NOTATION AND THE DAY OF WEEK OFFSET IS        *\n*        IN BINARY.  JULIAN DATE IS PASSED IN R0, DAY OF WEEK         *\n*        OFFSET IS RETURNED IN R0, AND CALENDAR DATE IS RETURNED      *\n*        IN R1.                                                       *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = JULIAN DATE IN PACKED FORMAT 00YYDDDS            *\n*              R1  = UNUSED                                           *\n*              R15 = 12                                               *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*        DATE PASSED IN R0 IS VALID.                                  *\n*              R0  = DAY OF WEEK OFFSET IN BINARY FORMAT (0=MONDAY)   *\n*              R1  = CALENDAR DATE IN PACKED FORMAT 0MMDDYYF          *\n*              R15 = 0                                                *\n*        DATE PASSED IN R0 IS INVALID.                                *\n*              R0  = UNCHANGED                                        *\n*              R1  = UNCHANGED                                        *\n*              R15 = 4                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nJULCAL   DS    0H                  JULCAL ENTRY\n         USING JULCAL,R6           BASE FOR SUBROUTINE\n         USING TWORK,R13           ESTABLISH ADDRESSABILITY\nJULC1000 DS    0H\n         LR    R8,R0               SAVE R0 IN R8\n         LR    R9,R1               SAVE R1 IN R9\n         LA    R0,24               SET R0=24, GETMAIN LENGTH\n         GETMAIN R,LV=(0)          GET SOME STORAGE\n         LR    R13,R1              SET R13=A(TWORK)\n         ST    R8,TW08L04          STORE CALENDAR DATE IN TWORK\n         TRT   TW08L04,CTRTAB3     CHECK FOR VALID PACKED FORMAT\n         BC    12,JULCRT04         IF INVALID, GO TO JULCRT04\n         LA    R1,X'80'            SET R1=X'80', CONSTANT\n         NR    R1,R2               CHECK FOR LAST BYTE VALID\n         BZ    JULCRT04            IF INVALID, GO TO JULCRT04\n         CLI   TW08L01,X'00'       CHECK FOR XXYY=00YY\n         BNE   JULCRT04            IF NOT, GO TO JULCRT04\n         ZAP   TW00L08,TW10L02     CHECK FOR DDDS=000S\n         BZ    JULCRT04            IF 0, GO TO JULCRT04\n         OI    TW11L01,X'0F'       FORCE F SIGN ON JULIAN DATE\n         LA    R15,CDTABNLP+13     SET R15=A(NON-LEAP YEAR TABLE)\n         CLI   TW09L01,X'00'       CHECK FOR 1900\n         BE    JULC1100            IF 1900, NOT LEAP, GO TO JULC1100\n         TM    TW09L01,X'03'       CHECK FOR YY DIVISIBLE BY 4\n         BNZ   JULC1100            IF NOT, GO TO JULC1100\n         LA    R15,CDTABLP+13      SET R15=A(LEAP YEAR TABLE)\nJULC1100 LA    R0,1                SET R0=1, BXLE INCREMENT\n         LA    R1,12               SET R1=12, BXLE LIMIT\n         LR    R2,R0               SET R2=1, BXLE START\nJULC1110 CP    TW10L02,2(2,R15)    CHECK FOR DDD LE TABLE ENTRY\n         BNH   JULC1200            IF LE, GO TO JULC1200\n         LA    R15,2(R15)          SET R15=A(NEXT TABLE ENTRY)\n         BXLE  R2,R0,JULC1110      CONTINUE AT JULC1110\n         B     JULCRT04            INVALID DDD, GO TO JULCRT04\nJULC1200 CVD   R2,TW00L08          CONVERT R2 MM TO DECIMAL\n         UNPK  TW12L02,TW00L08     UNPACK MM\n         SP    TW10L02,0(2,R15)    SET TW10L02=DD\n         UNPK  TW14L02,TW10L02     UNPACK DD\n         UNPK  TW16L03,TW09L02     UNPACK YY\n         PACK  TW08L04,TW12L06     PACK MMDDYY\n         L     R9,TW08L04          SET R9=PACKED CALENDAR DATE\n         ST    R8,TW08L04          SET TW08L04=PACKED JULIAN DATE\n         ZAP   TW00L08,TW10L02     SET TW00L08=PACKED JULIAN DDDF\n         CVB   R4,TW00L08          SET R4=BINARY JULIAN DDD\n         MVO   TW00L08,TW09L01     SET TW00L08=PACKED JULIAN YYF\n         CVB   R5,TW00L08          SET R5=BINARY JULIAN YY\n         LA    R2,365              SET R2=365, MULTIPLIER\n         LR    R11,R5              SET R11=YY\n         MR    R10,R2              SET R11=365*YY\n         LTR   R10,R5              SET R10=YY\n         BZ    *+6                 IF YY EQ 00, SKIP NEXT INSTRUCTION\n         BCTR  R10,R0              SET R10=YY-1\n         SRL   R10,2               SET R10=I((YY-1)/4)\n         AR    R11,R10             SET R11=365*YY+I((YY-1)/4)\n         AR    R11,R4              SET R11=365*YY+I((YY-1)/4)+DDD\n         BCTR  R11,R0              SET R11=365*YY+I((YY-1)/4)+DDD-1\n         LA    R2,7                SET R2=7, DIVISOR\n         SR    R10,R10             SET R10=0, R11=DAYS-1\n         DR    R10,R2              SET R10=R((DAYS-1)/7)\n         LR    R8,R10              SET R8=DAY OF WEEK OFFSET\nJULCRT00 SR    R10,R10             SET R10=0, RETURN CODE\n         B     JULCRTXX            GO TO JULCRTXX\nJULCRT04 LA    R10,4               SET R10=4, RETURN CODE\nJULCRTXX LA    R0,24               SET R0=24, L'GETMAIN AREA\n         LA    R1,TWORK            SET R1=A(GETMAIN AREA)\n         FREEMAIN R,LV=(0),A=(1)   FREE GOTTEN STORAGE\n         LR    R0,R8               RESTORE NEW/ORIGINAL R0 FROM R8\n         LR    R1,R9               RESTORE NEW/ORIGINAL R1 FROM R9\n         LR    R15,R10             SET R15=RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\n         SPACE 1\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         DROP  R13                 DROP USE OF R13 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS ROUTINE WILL COMPUTE THE DIFFERENCE IN DAYS             *\n*        BETWEEN TWO JULIAN DATES.  THE DATES ARE PASSED IN R0        *\n*        AND R1 AND ARE IN PACKED DECIMAL NOTATION WITH FORMAT        *\n*        OF 00YYDDDS.  THE DIFFERENCE IS A BINARY NUMBER              *\n*        RETURNED IN R1.                                              *\n*                                                                     *\n*        REGISTERS UPON ENTRY.                                        *\n*              R0  = JULIAN DATE(1) IN PACKED FORMAT 00YYDDDS         *\n*              R0  = JULIAN DATE(2) IN PACKED FORMAT 00YYDDDS         *\n*              R15 = 13                                               *\n*                                                                     *\n*        REGISTERS UPON RETURN.                                       *\n*        DATES PASSED IN R0 AND R1 ARE VALID.                         *\n*              R0  = UNCHANGED                                        *\n*              R1  = BINARY NUMBER OF DAYS DIFFERENCE                 *\n*              R15 = 0                                                *\n*        DATE(S) INVALID OR DATE1 GT DATE2.                           *\n*              R0  = UNCHANGED                                        *\n*              R1  = UNCHANGED                                        *\n*              R15 = 4 -  DATE(1) INVALID                             *\n*                    8 -  DATE(2) INVALID                             *\n*                    12 - DATE(1) AND DATE(2) BOTH INVALID            *\n*                    16 - DATE(1) GT DATE(2)                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nJULDIF   DS    0H                  JULDIF ENTRY\n         USING JULDIF,R6           BASE FOR SUBROUTINE\n         USING TWORK,R13           ESTABLISH ADDRESSABILITY\nJULD1000 DS    0H\n         LR    R8,R0               SAVE R0 IN R8\n         LR    R9,R1               SAVE R1 IN R9\n         LA    R0,16               SET R0=16, GETMAIN LENGTH\n         GETMAIN R,LV=(0)          GET SOME STORAGE\n         LR    R13,R1              SET R13=A(TWORK)\n         LR    R0,R8               SET R0=DATE(1)\n         BAL   R11,JULD8000        LINK TO VALIDATE/COMPUTE ROUTINE\n         LR    R3,R1               SET R3=DAYS IN CENTURY, DATE(1)\n         LR    R10,R15             SET R10=RETURN CODE\n         LR    R0,R9               SET R0=DATE(2)\n         BAL   R11,JULD8000        LINK TO VALIDATE/COMPUTE ROUTINE\n         LR    R4,R1               SET R4=DAYS IN CENTURY, DATE(2)\n         SLL   R15,1               SET R15=RETURN CODE*2\n         OR    R10,R15             OR SECOND RC INTO R10\n         BNZ   JULDRTXX            IF EITHER NE 0, GO TO JULDRTXX\n         SR    R4,R3               SET R4=DAYS DIFFERENCE\n         BNM   JULDRT00            IF NOT MINUS, GO TO JULDRT00\n         LA    R10,16              SET R10=16, RETURN CODE\n         B     JULDRTXX            GO TO JULDRTXX\nJULD8000 ST    R0,TW08L04          STORE CALENDAR DATE IN TWORK\n         TRT   TW08L04,CTRTAB3     CHECK FOR VALID PACKED FORMAT\n         BC    12,JULD8910         IF INVALID, GO TO JULD8910\n         LA    R1,X'80'            SET R1=X'80', CONSTANT\n         NR    R1,R2               CHECK FOR LAST BYTE VALID\n         BZ    JULD8910            IF INVALID, GO TO JULD8910\n         CLI   TW08L01,X'00'       CHECK FOR VALID 00YY\n         BNE   JULD8910            IF INVALID, GO TO JULD8910\n         OI    TW11L01,X'0F'       FORCE F SIGN ON DATE\n         LA    R15,CDTABNLP+13+12*2    SET R15=A(DAYS/NON-LEAP YEAR)\n         CLI   TW09L01,X'00'       CHECK FOR 1900\n         BE    JULD8100            IF 1900 GO TO JUDL8100\n         TM    TW09L01,X'03'       CHECK FOR YY DIVISIBLE BY 4\n         BNZ   JULD8100            IF NOT, GO TO JUDL8100\n         LA    R15,CDTABLP+13+12*2 SET R15=A(DAYS/LEAP YEAR)\nJULD8100 CP    TW10L02,0(2,R15)    CHECK DDD GT MAX\n         BH    JULD8910            IF GT, INVALID, GO TO JULD8910\n         SR    R2,R2               SET R2=0, N(LEAP YEARS)\n         MVI   TW07L01,X'0F'       MOVE F SIGN TO TW00L08\n         MVO   TW00L08,TW09L01     MOVE YY TO 0000000000000YYF\n         CVB   R1,TW00L08          SET R1=BINARY YY\n         CLI   TW09L01,X'00'       CHECK FOR 1900\n         BE    JULD8200            IF 1900, 0 LEAPS, GO TO JULD8200\n         LR    R2,R1               SET R2=BINARY YY\n         BCTR  R2,R0               SET R2=YY-1\n         SRL   R2,2                SET R2=(YY-1)/4, N(LEAP YEARS)\nJULD8200 ZAP   TW00L08,TW10L02     ZAP DDDF TO 000000000000DDDF\n         CVB   R0,TW00L08          SET R0=BINARY DDD\n         AR    R2,R0               SET R2=LEAPS+DDD\n         LA    R15,365             SET R15=365, CONSTANT\n         MR    R0,R15              SET R1=YY*365\n         AR    R1,R2               SET R1=YY*365+DDD+LEAPS\nJULD8900 SR    R15,R15             SET R15=0, RETURN CODE\n         B     JULD8990            GO TO JULD8990\nJULD8910 LA    R15,4               SET R15=4, RETURN CODE\nJULD8990 BR    R11                 RETURN TO INVOKER\nJULDRT00 LR    R9,R4               SET R9=BINARY DAYS DIFFERENCE\n         SR    R10,R10             SET R10=0, RETURN CODE\nJULDRTXX LA    R0,16               SET R0=16, L'GETMAIN AREA\n         LA    R1,TWORK            SET R1=A(GETMAIN AREA)\n         FREEMAIN R,LV=(0),A=(1)   FREE GOTTEN STORAGE\n         LR    R0,R8               RESTORE ORIGINAL R0 FROM R8\n         LR    R1,R9               RESTORE ORIGINAL R1 FROM R9\n         LR    R15,R10             SET R15=RETURN CODE\n         BR    R14                 RETURN TO SVC HANDLER\n         SPACE 1\nCTRTAB3  DC    10XL16'00000000000000000000010180800180',96XL1'01'\nCDTABLP  DC    AL1(00,31,29,31,30,31,30,31,31,30,31,30,31)\n         DC    PL2'000',PL2'031',PL2'060',PL2'091',PL2'121',PL2'152'\n         DC    PL2'182',PL2'213',PL2'244',PL2'274',PL2'305',PL2'335'\n         DC    PL2'366'\nCDTABNLP DC    AL1(00,31,28,31,30,31,30,31,31,30,31,30,31)\n         DC    PL2'000',PL2'031',PL2'059',PL2'090',PL2'120',PL2'151'\n         DC    PL2'181',PL2'212',PL2'243',PL2'273',PL2'304',PL2'334'\n         DC    PL2'365'\n         SPACE 1\nTWORK    DSECT\nTW00L19  DS    0CL19\nTW00L08  DS    0CL8\nTW00L04  DS    0CL4\nTW00L02  DS    0CL2\nTW00L01  DS    CL1\nTW01L19  DS    0CL19,CL1\nTW02L01  DS    CL1\nTW03L02  DS    0CL2,CL1\nTW04L04  DS    0CL4,CL1\nTW05L01  DS    CL1\nTW06L02  DS    0CL2,CL1\nTW07L01  DS    CL1\nTW08L04  DS    0CL4\nTW08L03  DS    0CL3\nTW08L01  DS    CL1\nTW09L02  DS    0CL2\nTW09L01  DS    CL1\nTW10L02  DS    0CL2,CL1\nTW11L01  DS    CL1\nTW12L06  DS    0CL6\nTW12L02  DS    CL2\nTW14L02  DS    0CL2\nTW14L01  DS    CL1\nTW15L02  DS    0CL2,CL1\nTW16L04  DS    0CL4\nTW16L03  DS    0CL3\nTW16L02  DS    0CL2,CL1\nTW17L01  DS    CL1\nMVSGPSVC CSECT\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n         DROP  R13                 DROP USE OF R13 BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\nXACF     DS    0H\n         USING XACF,R6             BASE FOR SUBROUTINE\n         USING RBBASIC,R5          ESTABLISH ADDRESSABILITY\n         USING ASXB,R8             ESTABLISH ADDRESSABILITY\n         USING ACEE,R10            ESTABLISH ADDRESSABILITY\n         USING CDENTRY,R11         ESTABLISH ADDRESSABILITY\n         L     R8,ASCBASXB         GET ASXB FROM ASCB\n         ICM   R10,15,ASXBSENV     GET CALLERS ACEE\n         BZR   R14                 RETURN IF NO ACEE\n         CLC   ACEEACEE,=CL4'ACEE' IS IT REALLY AN ACEE?\n         BNER  R14                 RETURN IF NO ACEE\n         TM    ACEEFLG1,ACEERACF   IS CALLER RACF DEFINED?\n         BZR   R14                 NO, IGNORE REQUEST\n         L     R5,RBLINK           GET CALLERS RB ADDRESS\n         L     R11,RBCDE           GET CALLERS CDE\n         CLC   CDNAME(5),=CL5'CMNER'  CALLER RACF/SPF INTERFACE?\n         BNER  R14                 NO, IGNORE REQUEST\n         LR    R8,R0               COPY PARM REG\n         LTR   R9,R1               COPY PARM REG\n         BZ    XACFEND             ZERO, IGNORE REQUEST\n         C     R8,CDENTPT          IS THIS REQUEST FOR SPECIAL?\n         BNE   XACFBY              NO, NORMAL CALL\n         ICM   R7,8,ACEEFLG1       SAVE ORIGINAL ACEE FLAG\n*        OI    ACEEFLG1,ACEESPEC   TEMPORARILY ADD SPECIAL\nXACFBY   DS    0H\n         SVC   132                 INVOKE RACF SVC FOR CALLER\n         C     R8,CDENTPT          WAS THIS REQUEST FOR SPECIAL?\n         BNE   XACFEND             NO, NORMAL CALL\n*        STCM  R7,8,ACEEFLG1       RESTORE ORIGINAL ACEE FLAG\n         L     R8,=F'-1'           RESET KEY\nXACFEND  DS    0H\n         LR    R0,R8               RESTORE PARM REG\n         LR    R1,R9               RESTORE PARM REG\n         DROP  R11                 DROP USING REG\n         DROP  R10                 DROP USING REG\n         DROP  R8                  DROP USING REG\n         DROP  R5                  DROP USING REG\n         BR    R14                 AND RETURN WITH R15 = RETCODE\n         LTORG\n         DROP  R6                  DROP USE OF R6 BASE REGISTER\n*\nWTO      DSECT\nWTOLNMCS DS    CL4\nWTOMSG   DS    0CL252\nMVSGPSVC CSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF MVS GP SVC SUBROUTINES                                *\n*                                                                     *\n*        DSECTS AND EQUATES FOR SYSTEM AREAS FOLLOW                   *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n         SPACE 1\n         CVT   DSECT=YES           COMMUNICATION VECTOR TABLE\n         SPACE 3\n         IEFJESCT TYPE=DSECT       JOB ENTRY SUBSYSTEM COMMUNICATION\n         SPACE 3\n         IEFJSCVT                  SUBSYSTEM COMMUNICATION VECTOR TBL\n         SPACE 3\n         IEFJSSVT                  JES2 SSVT\n         SPACE 3\n         IHAASCB DSECT=YES         ADDRESS SPACE CONTROL BLOCK\n         SPACE 3\n         IHAASVT DSECT=YES         ADDRESS SPACE VECTOR TABLE\n         SPACE 3\n         IKJTCB DSECT=YES          TASK CONTROL BLOCK\n         SPACE 3\n         IEZJSCB                   JOB/STEP CONTROL BLOCK\n         SPACE 3\n         IKJPSCB                   PROTECT STEP CONTROL BLOCK\n         SPACE 3\nTIOT     DSECT                     TASK INPUT/OUTPUT TABLE\n         IEFTIOT1\n         SPACE 3\n         $XECB                     HASP EXTENED ECB\n         SPACE 3\nUCBDSECT DSECT                     UNIT CONTROL BLOCK\n         IEFUCBOB PREFIX=NO\n         SPACE 3\n         $SCAT                     HASP SYSOUT CLASS ATTRIBUTE TABLE\n         SPACE 3\n**       $SVT                      HASP SUBSYSTEM VECTOR TABLE\n**       SPACE 3\n         $HASB                     HOLY ALLMIGHTY SMOKES BLOCK\n         SPACE 3\n         $SJB                      HASP SUBSYSTEM JOB BLOCK\n         SPACE 3\n         $BUFFER                   HASP BUFFER\n         SPACE 3\n         $HCCT                     HOLY COW CONTROL TABLE\n         SPACE 3\n         $JCT                      HASP JOB CONTROL TABLE\n         SPACE 3\n         $TQE                      TEQUILLA ELEMENT. REQ'D BY HCCT\n         SPACE 3\n         $HFAME                    HALL OF FAME. REQ'D BY HCCT\n         SPACE 3\n         $HASPEQU                  JES2 GLOBAL EQUATES\n         SPACE 3\n         IFGRPL AM=VSAM            VSAM RPL\n         SPACE 3\n         IHAASXB                   ADDRSSS SPACE EXTENSION BLOCK\n         SPACE 3\n         IHAACEE                   ACESSOR ENVIRONMENT ELEMENT\n         SPACE 3\n         IHARB                     OS/VS REQUEST BLOCK\n         SPACE 3\n         IHACDE                    CONTENTS DIRECTORY ENTRY\n         SPACE 3\n         IHAPSA                    LOW CORE ...\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOUTCALL": {"ttr": 21, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MVSGPSVC EQU   252    MVS GENERAL PURPOSE SVC NUMBER\n***********************************************************************\n*                                                                     *\n*        THIS IS THE RE-ENTRANT CMNFS00/SOUTSUB INTERFACE.            *\n*        IT PROVIDES TAPE MOUNT AUTHORITY FOR USERS OF THE            *\n*        CMNFS00 ROUTINE.  IF PLACED IN PLPA THE MVSGPSVC WILL        *\n*        HONOR THE AUTH REQUEST.                                      *\n*                                                                     *\n*        THIS ROUTINE WILL:                                           *\n*          BECOME AUTHORIZED   (VIA MVSGPSVC CALL)                    *\n*          LINK TO THE SOUTSUB ROUTINE                                *\n*          BECOME UNAUTHORIZED (VIA MVSGPSVC CALL)                    *\n*          RETURN TO CALLER                                           *\n*                                                                     *\n***********************************************************************\nSOUTCALL $PROLOG R12         SAVE AND INIT REGISTERS\n         LR    R2,R1         SAVE PARAMETER REGISTER\n         LOAD  EP=SOUTSUB    LOAD THE SOUTSUB ROUTINE\n         LR    R3,R0         COPY ENTRY POINT\n         LA    R1,=CL4'AUTH' AUTH PASSWORD FOR MVSGPSVC\n         LA    R15,3         INDICATE AUTHORIZATION REQUIRED\n         SVC   MVSGPSVC      BECOME AUTHORIZED\n         LR    R1,R2         RESTORE PARAMETER REGISTER\n         LR    R15,R3        COPY ENTRY POINT\n         BALR  R14,R15       CALL SOUT SUB ROUTINE\n         LR    R2,R15        SAVE RETURN CODE\n         LA    R15,4         INDICATE NON-AUTHORIZATION REQUIRED\n         SVC   MVSGPSVC      BECOME AUTHORIZED\n         DELETE EP=SOUTSUB   DELETE SUB ROUTINE\n         LR    R15,R2        RESTORE RETURN CODE\n         $EPILOG ,           RETURN TO CALLER\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SOUTCLN": {"ttr": 23, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT NOGEN\n***********************************************************************\n*                                                                     *\n* THIS IS THE CLEAN PROGRAM WHICH WILL DELETE OLD VSAM RECORDS. IT    *\n* WILL ALSO SYNC. THE SYSOUT DATASETS/TAPES AND THE VSAM RECORDS.     *\n*                                                                     *\n*                                                                     *\n* THE MAIN FUNCTION OF THIS PROGRAM IS TO DELETE OLD SYSOUT ENTRIES   *\n* BASED ON A NUMBER OF DAYS THAT YOU SELECT TO KEEP REPORTS ON THE    *\n* DISKWTR SYSTEM.                                                     *\n*                                                                     *\n* ANY VSAM RECORDS FOUND THAT POINTS TO A NON-EXISTING DAILY/ARCHIVE  *\n* DATASET WILL BE DELETED.                                            *\n* (THIS COULD HAPPEN IF YOU LOST A SYSOUT TAPE. JUST UNCATALOG THE    *\n*  TAPE AND RUN THIS CLEAN PROGRAM. ANY VSAM RECORD POINTING TO THAT  *\n*  TAPE WILL BE DELETED.                                              *\n*                                                                     *\n* IT WILL ALSO DETERMINE IF ANY DAILY DISK/TAPE AND ARCHIVE TAPE ARE  *\n* EMPTY ANY WILL THEN DYNAMICALLY DELETE IT.                          *\n*                                                                     *\n* IF THE OPTIONAL \"SPECLDEL\" DD IS SUPPLIED, THE REQUESTED REPORTS    *\n* WILL BE DELETED FROM THE JOURNAL FILE                               *\n*   NOTE: THE SPECIAL DELETE DATASET SHOULD BE  LRECL=80              *\n*         FORMAT OF THE FILE IS:                                      *\n*                         1         2         3                       *\n*          COL   123456789012345678901234567890                       *\n*                JJJJJJJJ XXX#####             <== JOB# IS OPTIONAL)  *\n*                   |      |   |-----JOB NUMBER                       *\n*                   |      |---------JOB LIT  (IE: JOB STC TSU)       *\n*                   |----------------JOB NAME (IE: PAYROLL            *\n*                                                  PAY*  <= GENERIC)  *\n*                                                                     *\n* AN OPTIONAL REPORT ON LARGE SYSOUTS IS CREATED IF THE \"LINES\"       *\n* PARAMETER IS SUPPLIED.                                              *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* THE FOLLOWING EXPLAINS THE PARM THAT IS REQUIRED. TAKE NOTE THAT    *\n* A \"TEST\" OPTION IS SUPPLIED IN WHICH THIS PROGRAM WILL ONLY         *\n* REPORT ON ACTION THAT IT WOULD HAVE TAKEN IF IT WERE RUN.           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*      PARM='CLEAN,XXXXX,YYY'                                         *\n*            TEST    |    | - NUMBER OF LINES  *1000 ON WHICH THIS    *\n*              |     |        PROGRAM WILL REPORT ON IF SYSOUT        *\n*              |     |        REPORTS EXCEED IT. REPORT WILL CONTAIN  *\n*              |     |        DATA FROM THE LAST 7 DAYS ONLY.         *\n*              |     |                                                *\n*              |     |------- NUMBER OF OF DAYS (MUST PUT IN LEADING  *\n*              |              ZEROES; IE: 00014) THAT YOU WANT THE    *\n*              |              VSAM JOURNAL RECORDS KEPT. ANY RECORDS  *\n*              |              OLDER THAN THAT NUMBER ARE DELETED AND  *\n*              |              THE EMPTY SYSOUT DATASETS ARE DELETED   *\n*              |                                                      *\n*              |------------- MUST BE CONSTANT \"CLEAN\"                *\n*                             (SET TO \"TEST\" TO TEST CLEANUP;         *\n*                              REPORTS PRODUCED - NOTHING DELETED)    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* THE FOLLOWING EXPLAINS THE PROCESSING THAT TAKES PLACE:             *\n*                                                                     *\n*  1) VERIFY PARM                                                     *\n*  2) GET //PREFIX DD                                                 *\n*  3) GET //OLDPFX DD  (IF ANY)                                       *\n*  4) BUILD A DATASET ENTRY TABLE                                     *\n*     A) BUILD ACTIVE DATASET ENTRY                                   *\n*     B) BUILD A ENTRY FOR ALL DAILY AND ARCHIVE DATASETS WITH THE    *\n*        PREFIX SUPPLIED IN THE  //PREFIX DD                          *\n*     C) BUILD A ENTRY FOR ALL ARCHIVE DATASETS WITH THE PREFIX       *\n*        SUPPLIED IN THE  //OLDPFX DD                                 *\n*  5) OPEN THE VSAM JOURNAL                                           *\n*  6) PROCESS THE VSAM JOURNAL SEQUENTIALLY; FOR EACH RECORD DO:      *\n*     A) FIND ENTRY IN THE DATASET TABLE FOR THAT RECORD              *\n*        1) IF FOUND,  ADD 1 TO COUNTER FOR THAT DATASET              *\n*        2) IF NOT FOUND, DELETE THE VSAM RECORD                      *\n*     B) COMPARE DATE OF RECORD TO DELETE DATE IN PARM                *\n*        1) IF DATE IS OLDER, DELETE THE VSAM RECORD AND              *\n*           SUBTRACT 1 FROM THE DATASET ENTRY TABLE.                  *\n*        2) IF DATE IS GOOD - COMPARE AGAINST SPECIAL DELETE TABLE    *\n*     C) IF SPECIAL DELETE DD CARD IS PRESENT, COMPARE THE JOBNAME    *\n*        AND NUMBER; IF MATCH DELETE THE VSAM RECORD                  *\n*     C) IF DELACT DD CARD IS PRESENT, DELETE ALL THE ACTIVE RECORDS  *\n*        ON THE JOURNAL.                                              *\n*     E) LOOK AT NUMBER OF LINES AND OPTIONALLY REPORT ON LARGE RPTS. *\n*     F) PERFORM THIS PROCESS UNTIL EOF ON VSAM JOURNAL.              *\n*  7) WALK THRU THE DATASET ENTRY TABLE.                              *\n*     A) IF COUNTER IS ZERO, DYNAMICALLY DELETE THAT FILE. THIS WILL  *\n*        HAPPEN WHEN ALL OF THE RECORDS ON THAT TAPE HAVE REACHED     *\n*        THE NUMBER OF DAYS OLD SUPPLIED IN THE PARM.                 *\n*     B) IF COUNTER IS NOT ZERO, THERE ARE STILL GOOD REPORTS ON THAT *\n*        FILE. GO PROCESS THE NEXT ENTRY                              *\n*                                                                     *\n* NOTE: THE DATASET ENTRY TABLE CAN HANDLE  5000  DATASET ENTRIES.    *\n*       IF YOU HAVE MORE, INCREASE THE GETMAINED AREA SIZE.           *\n*                                                                     *\n***********************************************************************\n*        REGISTERS USED:                                              *\n*         R0 = WORK REG                                               *\n*         R1 = WORK REG                                               *\n*         R2 = WORK REG - READING PARM                                *\n*         R3 = WORK REG - READING PARM                                *\n*         R4 = WORK REG                                               *\n*         R5 = WORK REG                                               *\n*         R6 = USED FOR LOCINDEX                                      *\n*         R7 = -------- UNUSED                                        *\n*         R8 = -------- UNUSED                                        *\n*         R9 = -------- UNUSED                                        *\n*        R10 = DATASET TABLE POINTER                                  *\n*        R11 = BASE REG                                               *\n*        R12 = BASE REG                                               *\n*        R13 = SAVE AREA                                              *\n*        R14 = WORK REG                                               *\n*        R15 = WORK REG                                               *\n*                                                                     *\n*                                                                     *\n* ABEND  REASONS:                                                     *\n*                                                                     *\n*        U0001 - INVALID PARM (CLEAN OR TEST)                         *\n*        U0002 - INVALID PARM (DAYS OLD)                              *\n*        U0003 - SOUTDATE PROGRAM MISSING                             *\n*        U0004 - INVALID PARM (LARGE REPORT SIZE)                     *\n*        U0005 - NO PREFIX DD CARD                                    *\n*        U0006 - LOCINDEX PROGRAM MISSING                             *\n*        U0007 - LOCINDEX CATALOG ERROR                               *\n*        U0008 - VSAM JOURNAL OPEN ERROR                              *\n*        U0009 - DELETE RECORD REPORT OPEN FAILURE                    *\n*        U0010 - DELETE DATASET REPORT OPEN FAILURE                   *\n*        U0011 - LARGE SYSOUT REPORT OPEN FAILURE                     *\n*        U0012 - READ VSAM JOURNAL ERROR                              *\n*        U0013 - ERASE VSAM JOURNAL RECORD ERROR                      *\n*        U0014 - OPEN FAILED FOR SPECLDEL DATASET                     *\n*        U0015 - MORE THAN 99 ENTRIES IN SPECLDEL DATASET             *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZATION AND PARM ISOLATION                            *\n*                                                                     *\n***********************************************************************\nSOUTCLN  $PROLOG R12,R11       SPECIFY BASE REGISTERS\n         L     R2,0(R1)        GET PARM POINTER\n         LH    R3,0(R2)        GET PARM SIZE\n         LTR   R3,R3           ANY PARM?\n         BZ    ABEND1          NO, ERROR\n         CH    R3,=H'10'       MIN SIZE OF PARM\n         BL    ABEND1          NOT ENOUGH - ERROR\n         LA    R2,2(R2)        BUMP PAST LENGTH\n         CLC   0(6,R2),=C'CLEAN,' CLEAN FILE REQUESTED\n         BE    AAA010           OK\n         CLC   0(5,R2),=C'TEST,' ONLY TESTING\n         BNE   ABEND1           NO - ERROR\n         OI    FLAG,TESTING    SET TESTING ON\n         MVC   HEADDEL1+45(24),TESTIT        INFORM\n         MVC   HEADDEL2+45(24),TESTIT      OF TESTING\n         LA    R2,5(R2)        BUMP PAST CLEAN,\n         SH    R3,=H'5'        DECREASE LENGTH OF PARM\n         B     ENTRY020        CHECK NEXT PARM\nAAA010   LA    R2,6(R2)        BUMP PAST CLEAN,\n         SH    R3,=H'6'        DECREASE LENGTH OF PARM\n         EJECT\n* ******************************************************************\n*       GET AND VERIFY NUMBERS OF DAYS OLD FOR DELETION\n* ******************************************************************\nENTRY020 EQU   *\n         MVC   DAYOLD,0(R2)    MOVE IN DAYS OLD PARM AREA\n         TM    DAYOLD,X'F0'    IS IT NUMERIC\n         BNO   ABEND2          NO- ERROR\n         TM    DAYOLD+1,X'F0'  IS IT NUMERIC\n         BNO   ABEND2          NO- ERROR\n         TM    DAYOLD+2,X'F0'  IS IT NUMERIC\n         BNO   ABEND2          NO- ERROR\n         TM    DAYOLD+3,X'F0'  IS IT NUMERIC\n         BNO   ABEND2          NO- ERROR\n         TM    DAYOLD+4,X'F0'  IS IT NUMERIC\n         BNO   ABEND2          NO- ERROR\n* GET BACKUP DATE ROUTINE\n         BLDL  0,BLDLDATE          ISSUE BLDL\n         LTR   R15,R15             DOES IT EXIST\n         BNZ   ABEND3              ERROR - NEED ROUTINE\n         LOAD  EP=SOUTDATE         LOAD ROUTINE\n         ST    R0,DATEADDR        SAVE ADDRESS\n         ICM   R15,15,DATEADDR    SET R15 TO DATE PGM ADDR\n         LA    R1,DATEPARM        SET R1 TO PARM\n         BALR  R14,R15            GET BACKUP DATE\n         LTR   R15,R15            TEST RC\n         BNZ   ABEND3             NO ZERO - ERROR\n         MVC   HOLDDATE(4),DATELMT+6 UNFORMAT\n         MVC   HOLDDATE+4(2),DATELMT       DATE\n         MVC   HOLDDATE+6(2),DATELMT+3        FOR\n         PACK  PACK5,HOLDDATE                   PACKING\n         ZAP   DELDATE,=P'099999999' SET DATE TO HIGH\n         SP    DELDATE,PACK5   SUBTRACT DATE FROM IT\n         SH    R3,=H'5'        SUBTRACT DAYS FROM LENGTH\n         CH    R3,=H'1'        ANY PARM LEFT?\n         BL    ENTRY030        NO - START PROCESSING\n         LA    R2,5(R2)        BUMP PAST DAY PARM\n         CLI   0(R2),C','      IS THERE COMA\n         BNE   ABEND4          NO -ERROR\n         EJECT\n* *********************************************************\n*       DOES USER WANT REPORT BY LARGE REPORTS\n* *********************************************************\n         LA    R2,1(R2)        BUMP PAST COMA\n         SH    R3,=H'1'        SUBTRACT COMA FROM LENGTH\n         CH    R3,=H'1'        ANY PARM LEFT?\n         BL    ABEND4          NO - ERROR\n         OI    FLAG,RPTBIG     SET TO REPORT ON LARGE FILES\n         MVC   RPTLIM+1(3),0(R2) MOVE IN SIZE (X-1000)\n         TM    RPTLIM+1,X'F0'  IS IT NUMERIC\n         BNO   ABEND4          NO- ERROR\n         TM    RPTLIM+2,X'F0'  IS IT NUMERIC\n         BNO   ABEND4          NO- ERROR\n         TM    RPTLIM+3,X'F0'  IS IT NUMERIC\n         BNO   ABEND4          NO- ERROR\n         PACK  MAXRPT,RPTLIM   PACK LIMIT\n         MVC   DAYOLD,=C'00007' REPORT ON LAST WEEK ONLY\n         LA    R1,DATEPARM     SET R1 TO PARM AREA\n         ICM   R15,15,DATEADDR    SET R15 TO DATE PGM ADDR\n         BALR  R14,R15            GET BACKUP DATE\n         LTR   R15,R15            TEST RC\n         BNZ   ABEND3             NO ZERO - ERROR\n         MVC   HOLDDATE(4),DATELMT+6   UNFORMAT\n         MVC   HOLDDATE+4(2),DATELMT       DATE\n         MVC   HOLDDATE+6(2),DATELMT+3         FOR\n         PACK  PACK5,HOLDDATE                     PACKING\n         ZAP   RPTDATE,=P'099999999' SET DATE TO HIGH\n         SP    RPTDATE,PACK5   SUBTRACT DATE FROM IT\n         EJECT\n***********************************************************************\n*        GET PREFIX AND OLDPFX JFCB'S TO GET PREFIX FOR DSNS          *\n***********************************************************************\nENTRY030 L     R3,16               GET CVT ADDRESS\n         L     R3,0(R3)            GET OLD/NEW TCB POINTERS\n         L     R3,4(R3)            GET OUR TCB ADDRESS\n         L     R3,12(R3)           GET OUR TIOT ADDRESS\n         LA    R2,24               SIZE OF TIOT HEADER\nAAA030   AR    R3,R2               BUMP TO NEXT ENTRY\n         CLC   4(6,R3),=CL6'PREFIX' PREFIX DATASET?\n         BE    BBB030              YES, GET DSN\n         CLC   4(6,R3),=CL6'OLDPFX' OLD PREFIX (REBUILD OPTION ONLY)\n         BE    EEE030              YES, OK\n         CLC   4(8,R3),=CL8'SPECLDEL' SPECIAL DELETE REPORTS\n         BE    HHH030              YES, OK\n         CLC   4(8,R3),=CL8'DELACT' DEL ACTIVE REPORTS\n         BE    III030              YES, OK\n         B     OOO030              GET NEXT\nBBB030   RDJFCB PREFIX               GET JFCB\n         MVC   PREFIX1,JFCB        MOVE IN PREFIX\n         LA    R4,PREFIX1         SET R4 TO BEGINNING\n         LA    R4,20(R4)          SET R4 TO END\n         LA    R5,21              SET R5 TO MAX LENGTH\nCCC030   CLI   0(R4),C' '         FIND BLANK\n         BNE   DDD030             NO -FOUND END\n         SH    R4,=H'1'           DECREMENT\n         BCT   R5,CCC030          TRY AGAIN\nDDD030   ST    R5,PREFIX1L        SAVE LENGTH OF PREFIX\n         B     OOO030             TRY FOR NEXT DD\nEEE030   RDJFCB OLDPFX            GET OLD JFCB\n         MVC   PREFIX2,JFCB        MOVE IN PREFIX\n         LA    R4,PREFIX2         SET R4 TO BEGINNING\n         LA    R4,24(R4)          SET R4 TO END\n         LA    R5,25              SET R5 TO MAX LENGTH\nFFF030   CLI   0(R4),C' '         FIND BLANK\n         BNE   GGG030             NO -FOUND END\n         SH    R4,=H'1'           DECREMENT\n         BCT   R5,FFF030          TRY AGAIN\nGGG030   ST    R5,PREFIX2L        SAVE LENGTH OF PREFIX\n         B     OOO030             TRY FOR NEXT DD\nHHH030   OI    FLAG,SPECDEL       DELETE REPORTS ON CLEAN\n         B     OOO030             TRY FOR NEXT DD\nIII030   OI    FLAG,DELACT        DELETE ANY RECORD ON ACTIVE\n         B     OOO030             TRY FOR NEXT DD\nOOO030   ICM   R2,1,0(R3)          SIZE OF ENTRY\n         BZ    XXX030              0 - DONE\n         B     AAA030              GET NEXT\nXXX030   CLI   PREFIX1,C' '        IS THERE A PREFIX\n         BE    ABEND5              ERROR\nEXIT030  EQU   *\n         EJECT\n* *********************************************************\n*       BUILD TABLE OF ALL SYSOUT DATASETS IN THE SYSTEM\n* *********************************************************\nENTRY040 DS    0H\n         GETMAIN R,LV=60000    GETMAIN FOR MAX TABLE (5000 ENTRIES)\n         ST    R1,TBLAREA      SAVE ADDRESS\n         LR    R0,R1           SET R0 = R1\n         LR    R10,R1          SET R10= R1\n         SR    R1,R1           ZERO R1\n         A     R1,=F'60000'    SET R1 TO LENGTH\n         SR    R14,R14         CLEAR R14 FOR MVCL\n         SR    R15,R15         CLEAR R15 FORMVCL\n         MVCL  R0,R14          SET AREA TO X'00'\n*                              SET UP RECORD FOR ACTIVE FILE\n         MVC   0(12,R10),=X'C199999999999FC400000000'\n         LA    R10,12(R10)     BUMP TO NEXT RECORD\n*\n*  CALL LOCINDEX TO GET ALL THE DAILY DATASET NAMES\n*\n         MVC   PASSTYPE,=CL8'.DAILY   '\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX NAME LENGTH\n         MVI   DRO,C'D'            SET TYPE TO DAILY\n         BAL   R14,ENTRY050        GET ALL DAILY DATASETS IF ANY?\n*\n*  CALL LOCINDEX TO GET ALL THE ARCHIVE DATASET NAMES\n*\n         MVC   PASSTYPE,=CL8'.ARCHIVE '\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX NAME LENGTH\n         MVI   DRO,C'R'            SET TYPE TO ARCHIVE\n         BAL   R14,ENTRY050        GET ALL ARCHIVE DATASETS IF ANY?\n*\n*  CALL LOCINDEX TO GET ALL THE OLD ARCHIVE DATASET NAMES\n*\n         CLI   PREFIX2,C' '        IS THERE AN OLD PREFIX\n         BE    EXIT040             NO -GET OUT\n         MVC   PASSTYPE,=CL8'.ARCHIVE ' #####  OLD=ARCHIVE\n*        MVC   PASSTYPE,=CL8'.DAILY   ' #####  OLD=DAILY\n         MVC   PASSPFX,PREFIX2     MOVE PREFIX NAME\n         MVC   PASSLEN,PREFIX2L    MOVE PREFIX NAME LENGTH\n         MVI   DRO,C'O'            SET TYPE TO OLD\n         BAL   R14,ENTRY050        GET ALL OLD ARCH DATASETS IF ANY?\nEXIT040  EQU   *\n         B     ENTRY060            PROCESS DELETE DATASET\n         EJECT\n***********************************************************************\n*        CALL TO LOCINDEX ROUTINE TO LIST ALL DSNS WITH PREFIX        *\n***********************************************************************\nENTRY050 DS    0H\n         ST    R14,SAVE050\n         ICM   R6,15,SAVEWORK      RESTORE WORK ADDRESS\n         BNZ   AAA050              HAVE ALREADY - BR AROUND GETMAIN\n* GET LOCINDEX ROUTINE\n         BLDL  0,BLDLLIST          ISSUE BLDL\n         LTR   R15,R15             DOES IT EXIST\n         BNZ   ABEND6              ERROR - NEED ROUTINE\n         LOAD  EP=LOCINDEX         LOAD ROUTINE\n         ST    R0,LOCIADDR        SAVE ADDRESS\n* GETMAIN FOR LOCINDEX WORK AREA\n         GETMAIN R,LV=4096\n         LR    R6,R1               SAVE ADDR OF WORK AREA\n         ST    R6,SAVEWORK         SAVE ADDR OF WORKAREA\n         USING WORKSPC,R6          INFORM ASSEMBLER\nAAA050   LA    R0,LOCINDXW         POINT TO LOCINDEX WORK AREA\n         ST    R0,LOCIPARM+12      SAVE ADDR IN PARM LIST\n         MVC   LOCIPFX(25),PASSPFX MOVE IN PREFIX\n         LA    R4,LOCIPFX          SET R4 TO ADDR OF PREFIX\n         L     R5,PASSLEN          SET R5 TO LENGTH\n         LA    R4,0(R5,R4)         BUMP R4 TO END OF PREFIX\n         MVC   0(8,R4),PASSTYPE    ADD TYPE DAY/ARCH/ACTIVE\n         MVI   LOCIPARM+12,X'80'   INDICATE END OF PARM LIST\nBBB050   ICM   R15,15,LOCIADDR     POINT TO PARM LIST\n         LA    R1,LOCIPARM         POINT TO PARM LIST\n         BALR  R14,R15             GO TO LOCINDEX\n         B     *+4(R15)            BRANCH , DEP ON RETURN CODE\n         B     CCC050              HAVE A DASD DSN\n         B     EXIT050             INDEX STRUCTURE NOT FOUND\n         B     DDD050              DSN ON TAPE\n         B     CCC050              MULTI VOLUME DSN\n         B     EXIT050             DONE\n         B     ABEND7              CATALOG ERROR\nCCC050   MVC   7(5,R10),=X'C400000000' SET TO DISK AND INIT ZERO\n         B     EEE050              SAVE DSN AND TRY AGAIN\nDDD050   MVC   7(5,R10),=X'E300000000' SET TO TAPE AND INIT ZERO\nEEE050   LA    R4,LOCIDSN          SET R4 TO BEGINNING\n         LA    R4,43(R4)        SET TO END\n         LA    R5,44            MAX DSN = 44\nFFF050   CLC   0(2,R4),=C'.D'      DATE STAMP\n         BE    GGG050           YES - DONE\n         CLC   0(2,R4),=C'.G'      GENERATION NUMBER (OLD SYSTEM)\n         BE    HHH050           YES - DONE\n         SH    R4,=H'1'         BACK UP ONE\n         BCT   R5,FFF050        TRY AGAIN\n         B     BBB050           INVALID DSN - GET NEXT\nGGG050   MVC   HOLDSTP(7),2(R4)  MOVE IN DATE STAMP\n         MVC   HOLDSTP+7(4),11(R4)  MOVE IN TIME STAMP\n         B     III050           BRANCH\nHHH050   MVC   HOLDSTP(5),=C'99999' SET UP HIGH\n         MVC   HOLDSTP+5(4),2(R4) MOVE IN GDG\n         MVC   HOLDSTP+9(2),7(R4) MOVE IN VERSION\nIII050   PACK  HSTAMP,HOLDSTP   PACK IT\n         MVC   0(1,R10),DRO     MOVE IN DATASET TYPE\n         MVC   1(6,R10),HSTAMP  MOVE IN STAMP\n         LA    R10,12(R10)      BUMP TO NEXT ENTRY\n         B     BBB050           TRY FOR NEXT\nEXIT050  L     R14,SAVE050\n         BR    R14\n         DROP  R6\n         EJECT\n* ********************************************************************\n*   GET THE SPECIAL DELETE DATASET IF ANY\n* ********************************************************************\nENTRY060 DS    0H\n         TM    FLAG,SPECDEL        DELETE REPORTS  WANTED\n         BZ    EXIT060             NO BYPASS OPEN\n         GETMAIN R,LV=2000\n         LR    R6,R1               SAVE ADDR OF DELETE AREA\n         ST    R6,SAVESPEC         SAVE ADDR OF DELETE AREA\n         LR    R0,R1               SET R0 TO BEGINNING OF GETMAIN\n         LA    R1,2000             SET R1 TO LENGTH\n         XR    R14,R14             CLEAR R14\n         XR    R15,R15             CLEAR R15\n         MVCL  R0,R14              SET GETMAINED TO ALL 00\n         USING SPECAREA,R6         INFORM ASSEMBLER\n         OPEN  (SPECLDEL,(INPUT))  OPEN DELETE DSN\n         TM    SPECLDEL+48,X'10'   DID IT OPEN\n         BZ    ABEND14             NO - ERROR\n         LA    R7,99               99  RECORDS MAXIMUM\nAAA060   GET   SPECLDEL,DELAREA    GET DELETE RECORD\n         LA    R2,DELAREA          SET R2 TO JOBNAME\n         LA    R3,SPECNAME         SET R3 TO SPECIAL NAME\n         LA    R4,8                SET TO MAX LENGTH\n         XR    R5,R5               SET TO ZERO\nBBB060   CLI   0(R2),C'*'          GENERIC NAME\n         BE    CCC060              YES - DONE\n         MVC   0(1,R3),0(R2)       MOVE IN 1 CHARACTER\n         LA    R2,1(R2)            BUMP TO NEXT CHAR\n         LA    R3,1(R3)            BUMP TO NEXT CHAR\n         LA    R5,1(R5)            BUMP LENGTH COUNTER\n         BCT   R4,BBB060           MOVE NEXT CHARACTER\nCCC060   SH    R5,=H'1'            DECREMENT FOR COMPARE\n         ST    R5,SPECLGTH         SAVE LENGTH OF JOB NAME\n         MVC   SPECNUM,DELJNUM     SAVE JOB NUMBER IF ANY\n         LA    R6,20(R6)           BUMP TO NEXT ENTRY\n         BCT   R7,AAA060           READ NEXT IF LESS THAN 100\n         B     ABEND15             MORE THAN 99 ENTRIES - ERROR\nXXX060   EQU   *\n         CLOSE SPECLDEL\nEXIT060  EQU   *\n         DROP  R6\n         EJECT\n* ********************************************************************\n*   PROCESS THE VSAM FILE FOR CLEAN AND DELETE OF DATASET ENTRIES\n* ********************************************************************\nENTRY100 DS    0H\n*\n         OPEN  JOURNACB         OPEN VSAM JOURNAL\n         LTR   R15,R15          OPEN OK?\n         BNZ   ABEND8           NO - ERROR\nAAA100   EQU   *\n         OPEN  (DELREC,(OUTPUT)) OPEN DELETE REPORT FILE\n         TM    DELREC+48,X'10' CHECK IF IT OPENED\n         BZ    ABEND9          NO, OUTPUT FAILED TO OPEN\n         PUT   DELREC,HEADDEL1 PUT OUT HEADER\n         PUT   DELREC,HEADING  PUT OUT HEADINGS\n         PUT   DELREC,BLANKS   PUT OUT HEADINGS\n         ZAP   LINECNT1,=P'3'  SET COUNTER TO 3\n*\n         OPEN  (DELDSN,(OUTPUT)) OPEN DELETE REPORT FILE\n         TM    DELDSN+48,X'10' CHECK IF IT OPENED\n         BZ    ABEND10         NO, OUTPUT FAILED TO OPEN\n         PUT   DELDSN,HEADDEL2 PUT OUT HEADER\n         PUT   DELDSN,HEADDEL3 PUT OUT HEADER\n         PUT   DELDSN,BLANKS   PUT OUT HEADINGS\n         ZAP   LINECNT2,=P'3'  SET COUNTER TO 3\n*\n         TM    FLAG,RPTBIG      BIG REPORT REQUESTED\n         BZ    BBB100           NO BR AROUND\n         OPEN  (BIGRPT,(OUTPUT)) OPEN DELETE REPORT FILE\n         TM    BIGRPT+48,X'10' CHECK IF IT OPENED\n         BZ    ABEND11         NO, OUTPUT FAILED TO OPEN\n         PUT   BIGRPT,HEADBIG  PUT OUT HEADER\n         PUT   BIGRPT,HEADING  PUT OUT HEADINGS\n         PUT   BIGRPT,BLANKS   PUT OUT HEADINGS\n         ZAP   BIGCNT,=P'3'    SET COUNTER TO 3\n         EJECT\n* *********************************************************\n*        READ JOURNAL RECORDS SEQUENTIALLY AND PROCESS    *\n* *********************************************************\nBBB100   GET   RPL=JOURNRPL\n         LTR   R15,R15\n         BNZ   EXIT100\n*  CHECK RECORD AGAINST TABLE\n         L     R10,TBLAREA     RESET R10 TO BEGIN OF TABLE\nCCC100   CLI   0(R10),X'00'    END OF TABLE REACHED\n         BNE   CCC101          NO - CHECK SUFFIX\n*                              DAILY/ARCH DATASET NOT THERE\n         MVC   OUTRESON,REASON#1\n         BAL   R14,ENTRY600    GO REPORT ON IT\n         BAL   R14,ENTRY750    GO DELETE VSAM RECORD\n         B     BBB100          READ NEXT RECORD\nCCC101   CLC   JSUFFIX,0(R10)  VSAM REC MATCHES TABLE??\n         BE    DDD100          YES - ADD TO COUNTER\n         LA    R10,12(R10)     BUMP R10\n         B     CCC100          GO TRY AGAIN\n* *********************************************************\n*       ADD ONE TO DATASET ENTRIES\n* *********************************************************\nDDD100   L     R9,8(R10)       SET R9 TO CURRENT COUNT\n         A     R9,=F'1'        BUMP BY ONE\n         ST    R9,8(R10)       STORE IT BACK\n* *********************************************************\n*       DOES JOURNAL DATE MATCH DELETE DATE REQUESTED\n* *********************************************************\n         CP    DELDATE,JDATE   COMPARE JOURN DATE TO DEL DATE\n         BH    FFF100          GO CHECK DELETE RPT; IF ANY\nEEE100   MVC   OUTRESON,REASON#2\n         BAL   R14,ENTRY700    DELETE RECORD\n         B     BBB100          GET NEXT RECORD - DO NOT REPORT\nFFF100   TM    FLAG,SPECDEL    SPECIAL DELETE PROCESSING\n         BZ    LLL100          NO - BYPASS TABLE COMPARE\n*\n         USING SPECAREA,R15\n         L     R15,SAVESPEC    SET TO DELETE GETMAINED AREA\nGGG100   CLI   SPECNAME,X'00'  END OF NAME LIST\n         BE    LLL100          YES - NO MATCH\n         L     R14,SPECLGTH    SET R14 TO LENGTH OF COMPARE\n         EX    R14,SPECOMPR    COMPARE JOBNAME\n         BNE   III100          NO MATCH - TRY NEXT\n         CLI   SPECNUM,C' '    JOB NUMBER COMPARE ??\n         BE    HHH100          NO - DELETE IT\n         CLC   SPECNUM(3),JJOB#+5 JOB LIT MATCHES\n         BNE   III100          NO - GET NEXT\n         CLC   SPECNUM+3(5),JJOB# JOB NUMBER MATCHES\n         BNE   III100          NO - GET NEXT\nHHH100   MVC   OUTRESON,REASON#3\n         BAL   R14,ENTRY700    DELETE RECORD\n         B     BBB100          GET NEXT RECORD - DO NOT REPORT\nIII100   LA    R15,20(R15)     BUMP TO NEXT ENTRY\n         B     GGG100          TRY NEXT COMPARE\n*\nSPECOMPR CLC   JJOBN(0),SPECNAME COMPARE FOR DELETE JOBNAME\n         DROP  R15\n* *********************************************************\n*       DELETE ALL JOURNAL RECORDS FOR THE ACTIVE FILE ???\n* *********************************************************\nLLL100   TM    FLAG,DELACT\n         BZ    MMM100\n         CLI   JADR,C'A'       ACTIVE RECORD\n         BNE   MMM100\n         MVC   OUTRESON,REASON#4\n         BAL   R14,ENTRY700    DELETE RECORD\n         B     BBB100          GET NEXT RECORD - DO NOT REPORT\n* *********************************************************\n*       DOES JOURNAL RECORD EXCEED MAX LINES; REPORT ON IT\n* *********************************************************\nMMM100   EQU   *\n         TM    FLAG,RPTBIG     DOES USER WANT REPORTS\n         BZ    BBB100          NO - BYPASS REPORTING\n         CP    RPTDATE,JDATE   COMPARE JOURN DATE TO REPORT DATE\n         BNH   BBB100          OLDER THAN 7 DAYS - BYPASS\n         CP    MAXRPT,JLINES   LARGE REPORT\n         BH    BBB100          NO - GET NEXT\n         BAL   R14,ENTRY400    PRINT IT\n         B     BBB100          GET NEXT RECORD\nEXIT100  EQU   *\n         C     R15,=F'8'       END OF FILE\n         BNE   ABEND12         NO - MAJOR VSAM ERROR\n         EJECT\n* *********************************************************\n*       END OF FILE PROCESSING\n*         1) DELETE DATASETS IF EMPTY\n*         2) REPORT ON DELETED DATASETS\n*         3) CLOSE FILES AND END\n* *********************************************************\nENTRY200 DS    0H\n         L     R10,TBLAREA      RESTORE TABLE\n*        LA    R10,12(R10)      BYPASS ACTIVE RECORD\nAAA200   CLI   0(R10),X'00'     ANY TABLE ENTRIES LEFT\n         BE    EEE200           NO - DONE\n*        L     R7,8(R10)        SET R7 TO COUNTER\n*        C     R7,=F'0'         ANY ENTRIES LEFT ON DSN\n*        BH    DDD200           YES - DONT DELETE\n         CLI   0(R10),C'O'      IS IT OLD SYSTEM\n         BE    BBB200           YES - MOVE IN OLD PREFIX\n         MVC   HOLDPREF(21),PREFIX1 MOVE PREFIX\n         MVC   HOLDLEN,PREFIX1L    MOVE PREFIX LENGTH\n         B     CCC200\nBBB200   MVC   HOLDPREF,PREFIX2    MOVE PREFIX\n         MVC   HOLDLEN,PREFIX2L    MOVE PREFIX LENGTH\nCCC200   MVC   HOLDSUF,0(R10)      MOVE SUFFIX\n         MVC   HOLDTYPE,7(R10)     MOVE IN TYPE(DISK/TAPE)\n         BAL   R14,ENTRY800     GO DELETE IT\nDDD200   LA    R10,12(R10)      BUMP R10 TO NEXT ENTRY\n         B     AAA200           TRY AGAIN\nEEE200   CLOSE DELREC           CLOSE THE OUTPUT FILES\n         CLOSE DELDSN           CLOSE THE OUTPUT FILES\n         TM    FLAG,RPTBIG      REPORTING ON LARGE?\n         BZ    FFF200           NO - BR AROUND\n         CLOSE BIGRPT           CLOSE THE OUTPUT FILES\nFFF200   CLOSE JOURNACB         CLOSE THE JOURNAL VSAM\n         ICM   R1,15,TBLAREA\n         FREEMAIN R,LV=60000,A=(1)\n         ICM   R1,15,SAVEWORK\n         FREEMAIN R,LV=4096,A=(1)\n         ICM   R1,15,SAVESPEC  SPECIAL DELETE AREA\n         BZ    EXIT200         NON - GET OUT\n         FREEMAIN R,LV=2000,A=(1)\nEXIT200  SR    R15,R15         CLEAR RETCODE\n         $EPILOG ,             RETURN TO CALLER\n         EJECT\n***********************************************************************\n*        ABEND ROUTINES\n***********************************************************************\nABEND1   WTO   'SOUTCLN - INVALID PARM (CLEAN OR TEST)'\n         ABEND 1\nABEND2   WTO   'SOUTCLN - INVALID PARM (DAYS OLD)'\n         ABEND 2\nABEND3   WTO   'SOUTCLN - SOUTDATE PROGRAM MISSING'\n         ABEND 3\nABEND4   WTO   'SOUTCLN - INVALID PARM (LARGE REPORT SIZE)'\n         ABEND 4\nABEND5   WTO   'SOUTCLN - NO PREFIX DD CARD'\n         ABEND 5\nABEND6   WTO   'SOUTCLN - LOCINDEX PROGRAM MISSING'\n         ABEND 6\nABEND7   WTO   'SOUTCLN - LOCINDEX CATALOG ERROR'\n         ABEND 7\nABEND8   WTO   'SOUTCLN - VSAM JOURNAL OPEN ERROR'\n         ABEND 8\nABEND9   WTO   'SOUTCLN - DELETE RECORD REPORT OPEN FAILURE'\n         ABEND 9\nABEND10  WTO   'SOUTCLN - DELETE DATASET REPORT OPEN FAILURE'\n         ABEND 10\nABEND11  WTO   'SOUTCLN - LARGE SYSOUT REPORT OPEN FAILURE'\n         ABEND 11\nABEND12  WTO   'SOUTCLN - READ VSAM JOURNAL ERROR'\n         ABEND 12\nABEND13  WTO   'SOUTCLN - ERASE VSAM JOURNAL RECORD ERROR'\n         ABEND 13\nABEND14  WTO   'SOUTCLN - SPECIAL DELETE DATASET OPEN FAILURE'\n         ABEND 14\nABEND15  WTO   'SOUTCLN - SPECIAL DELETE DATASET - 99 MAX REACHED'\n         ABEND 15\n         EJECT\n* *********************************************************\n*       PRINT REPORT ON LARGE SYSOUT REPORTS ON DISKWTR\n* *********************************************************\nENTRY400 DS    0H\n         ST    R14,SAVE400\n         BAL   R14,ENTRY500   EXPAND RECORD FOR REPORTING\n         MVC   OUTRESON,BLANKS CLEAR REASON FIELD\n         PUT   BIGRPT,OUTREC  WRITE IT OUT\n         AP    BIGCNT,=P'1'   ADD 1 TO LINE COUNTER\n         CP    BIGCNT,=P'59'  PAST 59 LINES\n         BL    EXIT400        NO -EXIT\n         ZAP   BIGCNT,=P'3'   SET LINES TO 3\n         PUT   BIGRPT,HEADBIG  PUT OUT HEADER\n         PUT   BIGRPT,HEADING  PUT OUT HEADINGS\n         PUT   BIGRPT,BLANKS   PUT OUT HEADINGS\nEXIT400  L     R14,SAVE400\n         BR    R14\n         EJECT\n* *********************************************************\n*       FORMAT JOURNAL RECORD FOR REPORTING\n* *********************************************************\nENTRY500 DS    0H\n         ST    R14,SAVE500\n         MVC   OUTJN,JJOBN          MOVE JOBNAME\n         MVC   OUTJ#(3),JJOB#+5     MOVE JOB TYPE\n         MVC   OUTJ#+3(5),JJOB#     MOVE JOB TYPE\n         ZAP   PACK5,=P'099999999'  SET UP TO HIGH VALUE\n         SP    PACK5,JDATE          REVERSE DATE\n         MVC   OUTDT,DATEPAT        MOVE IN DATE PATTERN\n         EDMK  OUTDT,PACK5          MOVE IN DATE\n         ZAP   PACK4,=P'0999999'    SET UP TO HIGH VALUE\n         SP    PACK4,JTIME          REVERSE TIME\n         MVC   OUTTM,TIMEPAT        MOVE IN TIME PATTERN\n         EDMK  OUTTM,PACK4          MOVE IN TIME\n         MVC   OUTLINE,LINEPAT      MOVE IN LINE PATTERN\n         EDMK  OUTLINE,JLINES       MOVE IN LINE\n         MVI   OUTDSN,C' '          CLEAR\n         MVC   OUTDSN+1(43),OUTDSN    OUT AREA\n         MVC   OUTDSN(21),PREFIX1   MOVE IN PREFIX\n         LA    R4,OUTDSN            SET R4 TO BEGINNING\n         L     R5,PREFIX1L           SET R5 TO LENGTH\n         LA    R4,0(R5,R4)          BUMP TO END\n         CLI   JADR,C'A'            IS IT ACTIVE\n         BE    AAA500\n         CLI   JADR,C'D'            IS IT DAILY\n         BE    BBB500\n         CLI   JADR,C'R'            IS IT ARCHIVE\n         BE    CCC500\n         MVC   OUTDSN(25),PREFIX2   MOVE IN OLD PREFIX\n         LA    R4,OUTDSN            SET R4 TO BEGINNING\n         L     R5,PREFIX2L          SET R5 TO LENGTH\n         LA    R4,0(R5,R4)          BUMP TO END\n         MVC   0(8,R4),=C'.ARCHIVE' #####  OLD=ARCHIVE\n         LA    R8,8(R4)             #####  BUMP 6 BYTES\n*        MVC   0(6,R4),=C'.DAILY'   #####  OLD=DAILY\n*        LA    R4,6(R4)             #####  BUMP 8 BYTES\n         B     DDD500\nAAA500   MVC   0(7,R4),=C'.ACTIVE'  EXPAND CODE\n         LA    R4,7(R4)             BUMP R4\n         B     DDD500\nBBB500   MVC   0(6,R4),=C'.DAILY'  EXPAND CODE\n         LA    R4,6(R4)             BUMP R4\n         B     DDD500\nCCC500   MVC   0(8,R4),=C'.ARCHIVE' EXPAND CODE\n         LA    R4,8(R4)             BUMP R4\nDDD500   MVC   DSPLYSTP,STPATRN     MOVE IN PATTERN\n         EDMK  DSPLYSTP,JSTP        EXPAND IT\n         CLC   DSPLYSTP,HIGH9       IS IT ACTIVE\n         BE    EXIT500              YES - NO SUFFIX\n         CLC   DSPLYSTP(6),HIGH9    IS IT GDG\n         BE    EEE500               YES - EXPAND GDG\n         MVC   0(2,R4),=C'.D'       MOVE IN \"D\"\n         MVC   2(7,R4),DSPLYSTP+1   MOVE IN DATE\n         MVC   9(2,R4),=C'.T'       MOVE IN \".T\"\n         MVC   11(4,R4),DSPLYSTP+8  MOVE IN TIME\n         B     EXIT500              DONE\nEEE500   MVC   0(2,R4),=C'.G'       MOVE IN \"G\"\n         MVC   2(4,R4),DSPLYSTP+6   MOVE IN GDG\n         MVC   6(1,R4),=C'V'        MOVE IN \"V\"\n         MVC   7(2,R4),DSPLYSTP+10  MOVE IN VERSION\nEXIT500  L     R14,SAVE500\n         BR    R14\n         EJECT\n* *********************************************************\n*       WRITE RECORD THAT WAS DELETED\n* *********************************************************\nENTRY600 DS    0H\n         ST    R14,SAVE600\n         BAL   R14,ENTRY500    GO EXPAND RECORD FOR REPORTING\n         PUT   DELREC,OUTREC   WRITE IT IN REPORT\n         AP    LINECNT1,=P'1' ADD 1 TO LINE COUNTER\n         CP    LINECNT1,=P'59' PAST 59 PER PAGE\n         BL    EXIT600         NO - GO TO END\n         ZAP   LINECNT1,=P'3'  RESET TO 3\n         PUT   DELREC,HEADDEL1 PUT OUT HEADER\n         PUT   DELREC,HEADING  PUT OUT HEADINGS\n         PUT   DELREC,BLANKS   PUT OUT HEADINGS\nEXIT600  L     R14,SAVE600 RESTORE RETURN\n         BR    R14\n         EJECT\n* *********************************************************\n*       DELETE VSAM RECORD AND DECREMENT RECORD COUNT\n*       IF USING \"CLEAN\" OPTION\n* *********************************************************\nENTRY700 DS    0H\n         ST    R14,SAVE700\n         L     R9,8(R10)       SET R9 TO CURRENT COUNT\n         S     R9,=F'1'        SUBTRACT ONE\n         ST    R9,8(R10)       STORE IT BACK\n         BAL   R14,ENTRY600    GO REPORT ON IT\n         BAL   R14,ENTRY750    ERASE RECORD\nEXIT700  L     R14,SAVE700     RESTORE RETURN ADDR\n         BR    R14             GO THERE\n         EJECT\n* *********************************************************\n*       DELETE VSAM RECORD\n* *********************************************************\nENTRY750 DS    0H\n         ST    R14,SAVE750\n         TM    FLAG,TESTING    IN TEST MODE\n         BO    EXIT750         BR AROUND ERASE\n         ERASE RPL=JOURNRPL    ERASE RECORD\n         LTR   R15,R15         ERASE OK?\n         BNZ   ABEND13         NO - MAJOR ERROR\nEXIT750  L     R14,SAVE750     RESTORE RETURN ADDR\n         BR    R14             GO THERE\n         EJECT\n* *********************************************************\n*       EXPAND  THE DATASET NAME FROM THE JOURNAL AND\n*       PREFIX PASSED\n* *********************************************************\nENTRY800 DS    0H\n         ST    R14,SAVE800\n         MVI   HOLDDSN,C' '         CLEAR HOLDDSN\n         MVC   HOLDDSN+1(43),HOLDDSN CLEAR HOLDDSN\n         MVC   HOLDDSN(25),HOLDPREF MOVE IN PREFIX\n         LA    R4,HOLDDSN           SET R4 TO BEGINING\n         L     R5,HOLDLEN           SET R5 TO PREFIX LEN\n         LA    R4,0(R5,R4)          BUMP PAST PREFIX\n         CLI   HOLDSUF,C'A'         IS THIS ACTIVE FILE\n         BE    AAA800\n         CLI   HOLDSUF,C'D'         IS THIS DAILY FILE\n         BE    BBB800\n         CLI   HOLDSUF,C'R'         IS THIS ARCHIVE FILE\n         BE    CCC800\n         CLI   HOLDSUF,C'O'         IS THIS OLD SYSTEM FILES\n         BE    CCC810\nAAA800   MVC   0(7,R4),=C'.ACTIVE'  MOVE IN ACTIVE CONSTANT\n         LA    R4,7(R4)             BUMP R4\n         B     DDD800               CHECK STP IF ANY\nBBB800   MVC   0(6,R4),=C'.DAILY'   MOVE IN DAILY CONSTANT\n         LA    R4,6(R4)             BUMP R4\n         B     DDD800               CHECK DATE/TIME STAMP\nCCC800   MVC   0(8,R4),=C'.ARCHIVE' MOVE IN ARCHIVE CONSTANT\n         LA    R4,8(R4)             BUMP R4\n         B     DDD800               CHECK DATE/TIME STAMP\nCCC810   MVC   0(8,R4),=C'.ARCHIVE' ##### OLD=ARCHIVE\n         LA    R4,8(R4)             ##### OLD=ARCHIVE\n*CCC810   MVC   0(6,R4),=C'.DAILY'  ##### OLD=DAILY\n*         LA    R4,6(R4)            ##### OLD=DAILY\n         B     DDD800               CHECK DATE/TIME STAMP\nDDD800   EQU   *\n         MVC   DSPLYSTP,STPATRN     MOVE IN PATTERN\n         EDMK  DSPLYSTP,HOLDSUF+1   EXPAND DATE/TIME STAMP\n         CLC   DSPLYSTP,HIGH9       IS IT ACTIVE\n         BE    FFF800               YES - DONE\n         CLC   DSPLYSTP(6),HIGH9    IS IT GDG\n         BE    EEE800               YES - EXPAND GDG\n         MVC   0(2,R4),=C'.D'       MOVE IN \"D\"\n         MVC   2(7,R4),DSPLYSTP+1   MOVE IN DATE\n         MVC   9(2,R4),=C'.T'   MOVE IN \".T\"\n         MVC   11(4,R4),DSPLYSTP+8   MOVE IN DATE\n         B     FFF800               DONE\nEEE800   MVC   0(2,R4),=C'.G'       MOVE IN \"G\"\n         MVC   2(4,R4),DSPLYSTP+6   MOVE IN GDG\n         MVC   6(1,R4),=C'V'     MOVE IN \"V\"\n         MVC   7(2,R4),DSPLYSTP+10  MOVE IN VERSION\nFFF800   EQU   *\n         MVC   DELTYPE,=CL11'KEEP'  CLEAR ACTION SECTION OF REPORT\n         L     R7,8(R10)            SET R7 TO COUNTER\n         C     R7,=F'0'             ANY ENTRIES LEFT ON DSN\n         BH    HHH800               YES - DONT DELETE\n         CLI   HOLDSUF,C'A'         IS THIS ACTIVE\n         BE    HHH800               YES - DONT DELETE\n         MVC   DELTYPE,=C'UNCATLOGED '  REPORT UNCATLOGE DONE\n         CLI   HOLDTYPE,C'T'        IS IT TAPE DSN\n         BE    GGG800               BRANCH TO UNCAT ONLY\n         MVC   DELTYPE,=C'SCR + UNCAT'  REPORT UNCATLOGED DONE\n         TM    FLAG,TESTING         IN TEST MODE\n         BO    GGG800               BR AROUND SCRATCH\n         LOCATE CATLOC              LOCATE CATALOG ENTRY FOR DATA SET\n         LTR   R15,R15\n         BZ    FFF800A\n         MVC   DELTYPE,=C'LOCATE FAIL'  REPORT UNCATLOGED DONE\n         B     HHH800\nFFF800A  SCRATCH CATSCR             SCRATCH IT\n         LTR   R15,R15\n         BZ    GGG800\n         MVC   DELTYPE,=C'SCRTCH FAIL' REPORT UNCATLOGED DONE\n         B     HHH800\nGGG800   EQU   *\n         TM    FLAG,TESTING         IN TEST MODE\n         BO    HHH800               BR AROUND UNCATLG\n         CATALOG CATUNC             LOCATE CATALOG ENTRY FOR DATA SET\n         LTR   R15,R15\n         BZ    HHH800\n         MVC   DELTYPE,=C'UNCAT FAIL '  REPORT UNCATLOGED DONE\nHHH800   CVD   R7,DWORK             CONVERT COUNTER\n         MVC   RPTCOUNT,PATTERN     MOVE IN UNPACK PATTERN\n         EDMK  RPTCOUNT,DWORK+4     UNPACK COUNT\nIII800   MVC   DDSN,HOLDDSN         MOVE DSN TO REPORT LINE\n         PUT   DELDSN,DSNDEL        WRITE IT\n         AP    LINECNT2,=P'1' ADD 1 TO LINE COUNTER\n         CP    LINECNT2,=P'59' PAST 59 PER PAGE\n         BL    EXIT800         NO - GO TO END\n         ZAP   LINECNT2,=P'3'  RESET TO 3\n         PUT   DELDSN,HEADDEL2 PUT OUT HEADER\n         PUT   DELDSN,HEADDEL3 PUT OUT HEADER\n         PUT   DELDSN,BLANKS   PUT OUT HEADER\nEXIT800  L     R14,SAVE800          RESTORE RETURN ADDR\n         BR    R14                  GO BACK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND WORK AREAS                                     *\n*                                                                     *\n***********************************************************************\n         LTORG\nSAVE050  DC    F'0'\nSAVE400  DC    F'0'\nSAVE500  DC    F'0'\nSAVE600  DC    F'0'\nSAVE700  DC    F'0'\nSAVE750  DC    F'0'\nSAVE800  DC    F'0'\nTBLAREA  DC    F'0'\nSAVEWORK DC    F'0'\nLOCIADDR DC    F'0'\nDATEADDR DC    F'0'\nHOLDLEN  DC    F'0'\nDWORK    DC    D'0'\nSAVESPEC DC    F'0'\n*\nFLAG     DC    X'00'\nRPTBIG   EQU   X'01'\nSPECDEL  EQU   X'04'\nDELACT   EQU   X'08'\nTESTING  EQU   X'80'\n*\nDATEPARM DS    0F\nDP1      DC    A(DAYOLD)\nDP2      DC    A(DATELMT)\nDATELMT  DC    CL10' '\n*\nHOLDDATE DC    CL8' '\nHOLDSTP  DC    CL11' '\nDRO      DC    CL1' '\nHSTAMP   DC    PL6'0'\nPASSPFX  DC    CL25' '\nPASSLEN  DC    F'0'\nPASSTYPE DC    CL8' '\nPATTERN  DC    XL8'4020202020202120'\nDELDATE  DC    PL5'0'\nRPTDATE  DC    PL5'0'\nPACK5    DC    PL5'0'\nPACK4    DC    PL4'0'\nMAXRPT   DC    PL4'0'\nLINECNT1 DC    PL2'0'\nLINECNT2 DC    PL2'0'\nBIGCNT   DC    PL2'0'\n*\nHOLDTYPE DC    CL1' '\nHOLDSUF  DC    CL7' '\nHOLDPREF DC    CL25' '\nHOLDDSN  DC    CL44' '\nPREFIX1  DC    CL21' '\nPREFIX1L DC    F'0'\nPREFIX2  DC    CL25' '\nPREFIX2L DC    F'0'\nDAYOLD   DC    CL5' '\nRPTLIM   DC    CL7'0000000'\nHIGH9    DC    CL12' 99999999999'\nDSPLYSTP DC    CL12' '\nSTPATRN  DC    XL12'402120202020202020202020'\nDATEPAT  DC    X'402120202020612020612020'\nTIMEPAT  DC    X'402120207A20207A2020'\nLINEPAT  DC    X'40206B2020206B202120'\nTESTIT   DC    CL24'T E S T I N G    O N L Y'\nHEADBIG  DC    CL133'1  SOUTCLN - LARGE SYSOUT REPORTS'\nHEADING  DS    0CL133\n         DC    CL40' JOBNAME    JOB #      DATE         TIME'\n         DC    CL93'      LINE COUNT   SYSOUT DATASET'\nHEADDEL1 DC    CL133'1  SOUTCLN - DELETE VSAM RECORDS'\nHEADDEL2 DC    CL133'1  SOUTCLN - LIST ALL / DELETE EMPTY FILES'\nHEADDEL3 DC    CL133' ACTION           DATASETS (DISK AND TAPE)'\nDSNDEL   DS    0CL133\n         DC    CL1' '\nDELTYPE  DC    CL11' '\n         DC    CL5' DSN='\nDDSN     DC    CL44' '\n         DC    CL2' '\n         DC    CL8'REPORTS='\nRPTCOUNT DC    CL8' '\n         DC    CL54' '\nBLANKS   DC    CL133' '\nOUTREC   DS    0CL133\nOUTCC    DC    C' '\nOUTJN    DC    CL8' ',CL3' '\nOUTJ#    DC    CL8' ',CL1' '\nOUTDT    DC    CL12' ',CL1' '\nOUTTM    DC    CL10' ',CL2' '\nOUTLINE  DC    CL10' ',CL3' '\nOUTDSN   DC    CL44' '\n         DC    CL1' '\nOUTRESON DC    CL30' '\n         DS    D\nREASON#1 DC    CL30'DAILY/ARCH DATASET NOT THERE'\nREASON#2 DC    CL30'RETENTION DATE HAS EXPIRED'\nREASON#3 DC    CL30'SPECIAL DELETE RPT. REQUESTED'\nREASON#4 DC    CL30'DELETE ACTIVE RECORD REQUESTED'\n         DS    D\n*        THE FOLLOWING IS THE JOURNAL RECORD FOR OUTPUT\nJOURNREC DS    0CL42              JOURNAL RECORD\nJKEY     DS    0CL22\nJJOBN    DC    CL8' '\nJDATE    DC    PL5'0'\nJTIME    DC    PL4'0'\nJJOB#    DC    CL8' '\nJMCLASS  DC    CL1' '\nJTTR     DC    XL3'000000'\nJDAY     DC    X'FF'\nJLINES   DC    PL4'0'\nJDEVT    DC    XL1'00'\nJSUFFIX  DS    0CL7\nJADR     DC    CL1' '\nJSTP     DC    PL6'0'\n*\nCATLOC   CAMLST NAME,HOLDDSN,,LOCAREA\nCATSCR   CAMLST SCRATCH,HOLDDSN,,LOCAREA,,OVRD\nCATUNC   CAMLST UNCAT,HOLDDSN\nLOCAREA  DS    0D\n         DC    265C' '\nBLDLLIST DC    H'1',H'58',CL8'LOCINDEX',XL52'00' BLDL LIST\nBLDLDATE DC    H'1',H'58',CL8'SOUTDATE',XL52'00' BLDL LIST\n         EJECT\n*\nJOURNACB ACB   AM=VSAM,DDNAME=JOURNAL,MACRF=(KEY,SEQ,OUT)\nJOURNRPL RPL   ACB=JOURNACB,AREA=JOURNREC,AREALEN=42,                  X\n               OPTCD=(KEY,SEQ,SYN,UPD,MVE)\nDELREC   DCB   MACRF=(PM),DSORG=PS,DDNAME=DELREC,LRECL=133,RECFM=FBA\nDELDSN   DCB   MACRF=(PM),DSORG=PS,DDNAME=DELDSN,LRECL=133,RECFM=FBA\nBIGRPT   DCB   MACRF=(PM),DSORG=PS,DDNAME=BIGRPT,LRECL=133,RECFM=FBA\nPREFIX   DCB   MACRF=(GM),DSORG=PS,DDNAME=PREFIX,EXLST=OPENL\nOLDPFX   DCB   MACRF=(GM),DSORG=PS,DDNAME=OLDPFX,EXLST=OPENL\nSPECLDEL DCB   MACRF=(GM),DSORG=PS,DDNAME=SPECLDEL,EODAD=XXX060,       X\n               EXLST=OPENL\n*\nDELAREA  DS    0CL80\nDELJNAME DC    CL8' '\nDELFILL1 DC    CL1' '\nDELJNUM  DC    CL8' '\nDELFILL2 DC    CL63' '\n*\nOPENL    DC    X'87',AL3(JFCB)   OPEN EXIT LIST\nJFCB     DC    CL176' '          HOLD AREA FOR PREFIX JFCB\n*\nLOCIPARM DC    A(LOCIPFX)\n         DC    A(LOCIDSN)\n         DC    A(LOCIVOL)\n         DC    A(0)\nLOCIPFX  DC    CL44' '\nLOCIDSN  DC    CL44' '\nLOCIVOL  DC    CL6' '\n*\nSPECAREA DSECT\nSPECNAME DS    CL8\nSPECNUM  DS    CL8\nSPECLGTH DS    F\n*\nWORKSPC  DSECT\nLOCINDXW EQU   *\n         END   SOUTCLN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOUTCPR": {"ttr": 524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "**************************************************************\n*    THIS SUBROUTINE COMPRESSES AND DECOMPRESSES THE EXTERNAL WRITER\n*    OUTPUT BEFORE GOING TO DISK OR TAPE. IT LOOKS FOR ANY OCCURRENCE\n*    OF MORE THAN THREE (3) CONSECUTIVE CHARS AND REPLACES THE\n*    STRING OF CHARS WITH A FLAG (X'EA'), THE CHAR BEING COMPRESSED AND\n*    ONE BYTE FOR THE NUMBER OF CHARS. ON DECOMPRESSION, IT SEARCHES\n*    FOR THE FLAG (X'EA') AND INSERTS THE THE CHARACTER FOLLOWING 'EA'\n*    THE CORRECT NUMBER OF TIMES.\n*    R1 POINTS TO A PARAMETER LIST CONTAINING THE ADDRESSES OF THE\n*    FOLLOWING FIELDS.\n*\n*        1)  REQUEST TYPE                          - 1 BYTE\n*                 X'FF' PUT REQUEST - TIME TO COMPRESS\n*                 X'00' GET REQUEST - TIME TO DECOMPRESS\n*        2)  INPUT RECORD\n*              INPUT RECORD LAYOUT\n*                > 1H - LENGTH OF INPUT RECORD\n*                       (FOR COMPRESSION - DO NOT INCLUDE FIRST 4 BYTES\n*                                          IN LENGTH)\n*                       (FOR DE-COMPPRESSION - INCLUDE FIRST 4\n*                                              BYTES IN LENGTH)\n*                > 1H - PAD\n*                > INPUT RECORDS DATA\n*\n*                (RECORD IS FORMATED LIKE A VARIABLE LENGTH RECORD)\n*\n*        3)  OUTPUT RECORD\n*                > 1H - COMP/DE-COMP LENGTH\n*                       (CALLING PROGRAM PLACES A LENGTH HERE BEFORE\n*                        COMPRESSION OR EXPANSION;(DOES NOT INCLUDE\n*                        THE FOUR(4) BYTE PREFIX)\n*                        => COMPRESSION - MAX COMPRESSED LENGTH\n*                        => DE-COMPRESS - MAX DE-COMPRESSED LENGTH)\n*                       (BEFORE RETURNING, THIS ROUTINE UPDATES THIS\n*                        FIELD TO THE NEW RECORD LENGTH)\n*                > 1H - PAD\n*                > INPUT RECORDS DATA\n*\n*                (RECORD IS FORMATED LIKE A VARIABLE LENGTH RECORD)\n*\n*\n*    THE OUTPUT RECORD FIELD IS MODIFIED BY THIS PROGRAM.\n*    IT WILL EITHER COMPRESS THE INPUT AREA AND PLACE IT IN THE OUTPUT\n*    AREA OR DE-COMPRESS IT. THE NEW COMPRESSED OR DE-COMPRESSED LENGTH\n*    WILL ALSO BE PLACED IN THE FIRST HALF WORD IN THE OUTPUT RECORD.\n*\n*      X'EA' WAS CHOSEN FOR THE COMPRESS FLAG BECAUSE IT IS NEITHER\n*      AN INSTRUCTION NOR A PRINTABLE CHARACTER.\n*      USE 'HEX ON' TO VIEW THE FOLLOWING EXAMPLE\n*      EXAMPLE 'PAGE  1          EXAMPLE'  - NOT COMPRESSED LENGTH 24\n*              'PAGE  1\u00b2 \u008eEXAMPLE'         - COMPRESSED LENGTH 17\n*\n*********************************************************************\n*     R15 WILL HAVE RETURN CODE = 0  IF COMPRESS/DE-COMPRESS IS OK\n*      OR\n*     R15 WILL HAVE RETURN CODE = 16 IF COMPRESS/DE-COMPRESS ERRORED\n*********************************************************************\n*        REGISTERS USED:\n*         R0 = WORK REG\n*         R1 = WORK REG\n*         R2 = WORK REG\n*         R3 = WORK REG\n*         R4 = INPUT RECORD POINTER\n*         R5 = WORK REG\n*         R6 = OUTPUT RECORD POINTER\n*         R7 = WORK REG\n*         R8 = WORK REG\n*         R9 = WORK REG\n*        R10 = UNUSED\n*        R11 = WORK REG\n*        R12 = BASE REG\n*        R13 = SAVE AREA\n*        R14 = WORK REG\n*        R15 = WORK REG\n*\n**************************************************************\n         EJECT\nSOUTCPR  $PROLOG R12\n         L     R4,4(R1)               INPUT RECORD\n         USING INREC,R4               SET UP BASE FOR INPUT REC\n         L     R6,8(R1)               OUTPUT RECORD\n         USING OUTREC,R6              SET UP BASE FOR OUTPUT REC\n         ST    R6,SAVE6               SAVE R6 FOR LATER STORE OF LENGTH\n         L     R11,0(R1)              POINT AT FUNCTION\n         CLI   0(R11),X'00'           IS THIS A UNCOMPRESS\n         BE    UNCOMP                 YES GO TO GET PERFORM\n         BAL   R14,COMPIT             NO, PERFORM COMPRESSION\n         B     EXITIT                 SKIP NEXT STATEMENT\nUNCOMP   BAL   R14,UNCOMPIT           PERFORM UN-COMPRESS\nEXITIT   $EPILOG\n         EJECT\nCOMPIT   EQU   *                      COMPRESSION ROUTINE\n         SR    R3,R3                  ZERO OUT 3\n         SR    R5,R5                  ZERO OUT 5\n         SR    R7,R7                  ZERO OUT 7\n         SR    R8,R8                  ZERO OUT 8\n         SR    R9,R9                  ZERO OUT 9\n         LH    R7,OUTLEN              SAVE MAX OUTPUT LENGTH\n         LH    R8,INLEN               SAVE LENGTH OF INPUT RECORD\n         CH    R8,=H'255'             RECORD LARGER THAN 255\n         BH    NOCOMPR                YES - NO COMPRESSION\n         LA    R4,4(R4)               BUMP PAST INPUT HEADER\n         LA    R6,4(R6)               BUMP PAST OUTPUT HEADER\nCPSETUP  MVI   SWITCH,X'01'           TURN OFF COMPRESS SWITCH\n         MVC   COMPCHAR(1),0(R4)      SAVE ONE CHARACTER\n         MVC   COMPCHAR+1(3),COMPCHAR EXPAND IT FOR LENGTH OF 4\nCOMPLP   EQU   *\n         CLC   0(1,R4),COMPCHAR       DOES FIRST CHAR MATCH PREVIOUS\n         BE    COMPNXT                YES - GO CHECK FOR 4\nMOVEIT   TM    SWITCH,X'02'           COMPRESSING CHAR ALREADY\n         BNZ   MOVELEN                YES - MOVE IN LENGTH\n         CLI   0(R4),X'EA'            IS CHAR THE DELIMITING CHAR\n         BE    COMPEA                 YES - EXPAND IT (RARELY HAPPENS)\n         MVC   0(1,R6),0(R4)          MOVE BYTE TO OUTPUT RECORD\n         LA    R6,1(R6)               BUMP R6\n         AH    R5,=H'1'               ADD 1 TO NEW LENGTH COUNTER\n         CR    R7,R5                  MAX COMPRESSED LENGTH HIT\n         BL    NOCOMPR                ERROR DURING COMPRESSION\nNEWCHAR  MVC   COMPCHAR(1),1(R4)      MOVE IN NEW CHAR\n         MVC   COMPCHAR+1(3),COMPCHAR REPEAT TO LENGTH OF 4\n         B     BUMPCP                 GO CHECK FOR END\nCOMPEA   MVC   0(3,R6),=X'EAEA01'     EXPAND 'EA' TO 3 BYTES\n         LA    R6,3(R6)               BUMP R6\n         AH    R5,=H'3'               ADD 3 TO NEW LENGTH COUNTER\n         CR    R7,R5                  MAX COMPRESSED LENGTH HIT\n         BL    NOCOMPR                ERROR DURING COMPRESSION\n         B     NEWCHAR\nMOVELEN  EQU   *\n         STH   R9,HOLDLEN             MOVE LENGTH OF REPEATING CHARS\n         MVC   2(1,R6),HOLDLEN+1      MOVE TO OUTPUT AREA\n         LA    R6,3(R6)               BUMP R6 ON OUTPUT RECORD\n         AH    R5,=H'3'               ADD 3 TO NEW COUNT\n         CR    R7,R5                  MAX COMPRESSED LENGTH HIT\n         BL    NOCOMPR                ERROR DURING COMPRESSION\n         B     CPSETUP                START CHECK OVER FOR NEXT CHAR\nCOMPNXT  EQU   *\n         TM    SWITCH,X'02'           ALREADY COMPRESSING\n         BNZ   ADDONLY                YES - JUST ADD TO COUNTER\n         CLC   0(4,R4),COMPCHAR       ARE THERE AT LEAST 4 REAPEATING\n         BNE   MOVEIT                 NO - MOVE JUST ONE CHAR\n         MVI   SWITCH,X'02'           TURN ON COMPRESSING SWITCH\n         MVC   0(1,R6),=X'EA'         MOVE IN 'EA' (COMP SENSE BYTE)\n         MVC   1(1,R6),COMPCHAR       MOVE COMP CHAR TO OUTPUT\n         SR    R9,R9                  ZERO COUNTER\n         AH    R9,=H'4'               SET TO 4 - HAVE 4 REPEATING CHARS\n         LA    R4,3(R4)               BUMP R4 3 BYTES\n         AH    R3,=H'3'               BUMP INPUT LENGTH COUNTER\n         B     BUMPCP                 CHECK PAST END\nADDONLY  EQU   *\n         AH    R9,=H'1'               ADD 1 TO REPEATING COUNTER\nBUMPCP   EQU   *\n         LA    R4,1(R4)               BUMP R4 1\n         AH    R3,=H'1'               BUMP INPUT LENGTH COUNTER\n         CR    R8,R3                  PAST END\n         BH    COMPLP                 NO - GET NEXT\n         TM    SWITCH,X'01'           COMPRESSING WHEN END WAS HIT\n         BNZ   MOVEDONE               NO - MOVE IN NEW LENGTH\n         STH   R9,HOLDLEN             MOVE REPEATING LENGTH\n         MVC   2(1,R6),HOLDLEN+1      STORE ON OUTPUT RECORD\n         AH    R5,=H'3'               ADD 3 TO NEW LENGTH\n         CR    R7,R5                  MAX COMPRESSED LENGTH HIT\n         BL    NOCOMPR                ERROR DURING COMPRESSION\nMOVEDONE L     R6,SAVE6               RESTORE R6 TO BEGINNING OF OUTPUT\n         AH    R5,=H'4'               ADD 4 FOR PREFIX (2 HALFWORDS)\n         STH   R5,OUTLEN              MOVE IN NEW LENGTH\n         SR    R15,R15\n         BR    R14                    BRANCH BACK\nNOCOMPR  LA    R15,=F'16'             NO COMPRESSION\n         BR    R14                    BRANCH BACK\n         EJECT\nUNCOMPIT EQU   *                      COMPRESSION ROUTINE\n         SR    R3,R3                  ZERO OUT 3\n         SR    R5,R5                  ZERO OUT 5\n         SR    R7,R7                  ZERO OUT 7\n         SR    R8,R8                  ZERO OUT 7\n         SR    R9,R9                  ZERO OUT 7\n         LH    R8,INLEN               SET R8 TO INPUT LENGTH\n         SH    R8,=H'4'               SUBTRACT 4 BYTES FOR PREF LENGTH\n         LH    R9,OUTLEN              SET R9 TO MAX EXPAND LENGTH\n         LA    R4,4(R4)               BUMP PAST INPUT HEADER\n         LA    R6,4(R6)               BUMP PAST OUTPUT HEADER\nUNCOMPLP EQU   *\n         CR    R9,R5                  MAX LENGTH EXPANDED REACHED\n         BL    ENDEXP                 JUST END EXPANSION\n         CLI   0(R4),X'EA'            IS CHAR COMPRESSED\n         BE    EXPANDIT               YES - EXPAND IT\n         MVC   0(1,R6),0(R4)          MOVE IN CHARACTER TO OUTPUT\n         LA    R4,1(R4)               BUMP INPUT POINTER\n         LA    R6,1(R6)               BUMP OUTPUT POINTER\n         AH    R3,=H'1'               ADD 1 TO INPUT LEN COUNTER\n         AH    R5,=H'1'               ADD 1 TO NEW OUTPUT LEN\n         B     BUMPUNCP               GO CHECK LENGTH\nEXPANDIT EQU   *\n         MVC   HOLDLEN,=X'0000'       ZERO\n         MVC   HOLDLEN+1(1),2(R4)     MOVE IN REPEATING COUNTER\n         LH    R7,HOLDLEN             MOVE INTO R7\nEXLOOP   EQU   *\n         MVC   0(1,R6),1(R4)          MOVE CHAR TO OUTPUT\n         LA    R6,1(R6)               BUMP OUTPUT POINTER\n         AH    R5,=H'1'               ADD 1 TO NEW LENGTH\n         BCT   R7,EXLOOP              DO UNTIL REPEATED R7 TIMES\n         LA    R4,3(R4)               BUMP TO NEXT CHAR\n         AH    R3,=H'3'               ADD 3 TO INPUT LEN COUNTER\nBUMPUNCP EQU   *\n         CR    R8,R3                  END OF INPUT?\n         BH    UNCOMPLP               NO - GET NEXT CHAR\n         SR    R15,R15                ZERO R15\n         B     FINEXP\nENDEXP   LA    R15,=F'16'             SET R15 TO 16 - BAD EXPAND\nFINEXP   L     R6,SAVE6               SET TO BEGINNING OF OUTPUT LINE\n         STH   R5,OUTLEN              MOVE IN NEW OUTPUT LENGTH\n         BR    R14                    BRANCH BACK\n         EJECT\n*\nSAVE6    DS    F                      R6 SAVE AREA\nHOLDLEN  DS    H                      HOLD REPEATING CHAR LENGTH\nSWITCH   DS    X                      COMPRESSING SWITCH\nCOMPCHAR DS    4C                     HOLD AREA FOR WHAT CHAR TO COMP\n         LTORG\nINREC    DSECT                        INPUT AREA FROM CALLING PROGRAM\nINLEN    DS    H\nOUTREC   DSECT                        OUTPUT AREA FROM CALLING PROGRAM\nOUTLEN   DS    H\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SOUTCVT": {"ttr": 771, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT NOGEN\n***********************************************************************\n*                                                                     *\n*  NOTE: IF THERE IS A LOT OF DATA TO CONVERT, THIS PROGRAM           *\n*        COULD RUN A LONG TIME. IN THE CONVERSION AT G.E.  THIS       *\n*        CONVERSION RUN TOOK OVER 5 HOURS. THIS IS DUE TO THE         *\n*        DATA BEING IN RANDOM ORDER ON THE OLD JOURNALS.              *\n*        G.E. HOLD OVER A YEARS WORTH OF DATA ON DISKWTR, AVERAGING   *\n*        ABOUT 3000 JOBS A DAY. (APPROX 1 MILLION ENTRIES HAD TO      *\n*        BE CONVERTED)                                                *\n*        IF YOU ARE KEEPING 2 TO 4 WEEKS ON DISKWTR, THIS PROGRAM     *\n*        WILL ASSIST IN THE CONVERSION,. IF YOU HAVE DATA LIKE G.E.'S *\n*        IT MAY BE BETTER TO WRITE A DIFFERENT CONVERSION PROGRAM.    *\n*        IE: 1. READ ALL THE OLD JOURNALS FIRST AND CREATE A NEW      *\n*               DATASET WITH THE DSN ON EACH JOB.                     *\n*            2. SORT BY JOBNAME                                       *\n*            3. THEN ADD THE RECORDS                                  *\n*                                                                     *\n*  THIS IS THE SOUT SUBSYSTEM CONVERSION PROGRAM.                     *\n*                                                                     *\n*     IT IS USED TO CONVERT THE OLD JOURNAL DATASETS TO               *\n*     THE NEW RECORDS ON THE VSAM JOURNAL.                            *\n*                                                                     *\n*     A ONE CHARACTER PARM IS PASSED TO THE PROGRAM.                  *\n*     IT SHOULD BE  \"D\"  \"R\"  OR  \"O\"                                 *\n*                                                                     *\n*     TO CONVERT:                                                     *\n*        1) STOP YOUR OLD DISKWTR                                     *\n*        2) START SAVEWTR TO MOVE THE ACTIVE DATA TO YOUR DAILY FILE  *\n*        3) PERFORM ONE OR MORE OF THE FOLLOWING:                     *\n*                                                                     *\n* A > IF YOU ARE CONVERTING TO NEW DATASET NAMES (IE: DIFFERENT       *\n*     PREFIX) OR YOU WERE USING TWO(2) PREFIXES IN YOUR OLD SYSTEM    *\n*     (IE\" SYS2.OPSWTR AND SYS2.OPSTAPE) YOU SHOULD;                  *\n*        1) RUN THE OLD SOUTWTR PROGRAM TO PLACE ALL OF YOUR OLD      *\n*           SYSOUT REPORTS INTO THE HISTORY PREFIX DATASET NAME.      *\n*           (IE: SYS2.OPSTAPE.DATA.ARCHIVE.G----V--)                  *\n*        2) RUN THIS CONVERT PROGRAM WITH PARM \"O\"                    *\n*           AND //INPUT  => POINTING TO YOUR ARCHIVE JOURNALS         *\n*        3) DELETE ALL OF YOUR OLD ARCHIVE JOURNAL DATASETS           *\n*                                                                     *\n*        JCL EXAMPLES FOLLOW:                                         *\n*                                                                     *\n*    //FORMAT   EXEC PGM=SOUTCVT,PARM=O         <==== FORMAT          *\n*    //INPUT    DD   DSN=SYS2.OPSTAPE.ARCHIVE,DISP=SHR                *\n*    //JOURNAL  DD   DSN=SYS2.OPSWTR.JOURNAL,DISP=SHR,AMP='AMORG'     *\n*                                                                     *\n*                                                                     *\n*      NOTE: IN THE SPF PANEL \"CMNFS00\" SET:                          *\n*            \"CMNFSWTR\" TO YOUR NEW PREFIX                            *\n*            \"CMNFSWTO\" TO YOUR OLD PREFIX                            *\n*                                                                     *\n*            WHEN SOUTSUB SEES A \"O\" IN THE RECORD, IT WILL           *\n*            BUILD A DATASET ALLOCATION FOR THE OLD SYSOUT DATASETS   *\n*                                                                     *\n* B > IF YOU WANT THE DATASET PREFIX TO REMAIN THE SAME,              *\n*      (IE:  \"SYS2.OPSWTR.DATA\")                                      *\n*     AND YOU WERE USING ONLY ONE PREFIX IN YOUR OLD SYSTEM           *\n*                                                                     *\n*        1) RUN THE OLD SOUTWTR PROGRAM TO PLACE ALL OF YOUR DAILY    *\n*           SYSOUT REPORTS INTO THE THE ARCHIVE DATASET NAME.         *\n*           (IE: SYS2.OPSWTR.DATA.ARCHIVE.G----V--)                   *\n*        2) RUN THIS CONVERT PROGRAM WITH PARM \"R\"                    *\n*           AND //INPUT  => POINTING TO YOUR ARCHIVE JOURNALS         *\n*        3) DELETE ALL OF YOUR OLD JOURNAL DATASETS                   *\n*                                                                     *\n*     OR                                                              *\n*                                                                     *\n*        1) RUN THIS CONVERT PROGRAM WITH PARM \"R\"                    *\n*           AND //INPUT  => POINTING TO YOUR ARCHIVE JOURNALS         *\n*        2) RUN THIS CONVERT PROGRAM WITH PARM \"D\"                    *\n*           AND //INPUT  => POINTING TO YOUR DAILY JOURNALS           *\n*        3) DELETE ALL OF YOUR OLD JOURNAL DATASETS                   *\n*                                                                     *\n*      NOTE: IN THE SPF PANEL \"CMNFS00\" SET:                          *\n*            \"CMNFSWTR\" TO YOUR NEW PREFIX                            *\n*            \"CMNFSWTO\" TO BLANK (WILL NOT BE USED)                   *\n*                                                                     *\n*        JCL EXAMPLES FOLLOW:                                         *\n*                                                                     *\n*                                                                     *\n*    //FORMAT   EXEC PGM=SOUTCVT,PARM=R         <==== FORMAT          *\n*    //INPUT    DD   DSN=SYS2.OPSWTR.ARCHIVE,DISP=SHR                 *\n*    //JOURNAL  DD   DSN=SYS2.OPSWTR.JOURNAL,DISP=SHR,AMP='AMORG'     *\n*                                                                     *\n*    //FORMAT   EXEC PGM=SOUTCVT,PARM=D         <==== FORMAT          *\n*    //INPUT    DD   DSN=SYS2.OPSWTR.DAILY,DISP=SHR                   *\n*    //JOURNAL  DD   DSN=SYS2.OPSWTR.JOURNAL,DISP=SHR,AMP='AMORG'     *\n*                                                                     *\n*                                                                     *\n*    THIS NEW DISKWTR SYSTEM WILL INTERNALLY ALLOCATE THE OLD         *\n*    DATASET GDG'S OR THE NEW DATE/TIME STAMPED DATASETS BASED        *\n*    ON THE CHARACTER \"A\" \"D\" \"R\" OR \"O\" AND THE DATE/TIME STAMP      *\n*                                                                     *\n*    IF THE CHAR \"O\" IS FOUND IN THE VSAM JOURNAL, THE OLD PREFIX     *\n*    WILL BE USED TO BUILD A DATASET NAME ALONG WITH \"ARCHIVE\" AND A  *\n*    GDG FROM THE LAST 6 CHARS OF THE DATE TIME STAMP.                *\n*                                                                     *\n*    IF THE OTHER CHARS ARE FOUND, A DATASET NAME WILL BE BUILT       *\n*    FROM THE EXISTING PREFIX ALONG WITH ACTIVE, DAILY, OR ARCHIVE,   *\n*    DEPENDING ON THE CHARACTER. IF THE PROGRAMS SEES  '99999' IN     *\n*    THE FIRST 5 BYTES OF THE DATE/TIME STAMP, A GDG IS BUILT,        *\n*    OTHERWISE A DATE/TIME STAMP IS BUILT.                            *\n*                                                                     *\n*    IF THE DATE/TIME STAMP IS ALL 9'S, NO GDG OR DATE TIME STAMP     *\n*    IS BUILT. THIS SHOULD ONLY HAPPEN FOR THE ACTIVE FILE.           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ABEND  REASONS:                                                     *\n*                                                                     *\n*        U0001 - INVALID PARM                                         *\n*        U0002 - INPUT DATASET OPEN ERROR                             *\n*        U0003 - VSAM JOURNAL OPEN ERROR                              *\n*                                                                     *\n*   NOTE: IF THERE IS A VSAM UPDATE/ADD ERROR , THIS PROGRAM          *\n*         BYPASSES IT. A WTO IS WRITTEN STATING THAT THERE            *\n*         IS A DUPLICATE RECORD ERROR. (ONLY ERROR ENCOUNTERED        *\n*         WHILE TESTING)                                              *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZATION AND PARM ISOLATION                            *\n*                                                                     *\n***********************************************************************\nSOUTCVT  $PROLOG R12           SPECIFY BASE REGISTERS\n         SR    R11,R11         CLEAR RECORD COUNT REGISTER FOR FORMAT\n         L     R2,0(R1)        GET PARM POINTER\n         LH    R3,0(R2)        GET PARM SIZE\n         LTR   R3,R3           ANY PARM?\n         BZ    BEGIN           NO, JUST READ THE DATA FOR THE EXIT\n         CH    R3,=H'1'        VALID LENGTH?\n         BNE   ABEND1          NO, ERROR\n         CLC   2(1,R2),=C'O'   VALID REQUEST?\n         BE    SETOLD          YES\n         CLC   2(1,R2),=C'R'   VALID REQUEST?\n         BE    SETARCH         YES\n         CLC   2(1,R2),=C'D'   VALID REQUEST?\n         BE    SETDALY         YES\n         B     ABEND1          ABEND IT\nSETOLD   EQU   *\n         MVI   HADR,C'O'       SET OLD OPTION\n         B     BEGIN           CONTINUE\nSETARCH  EQU   *\n         MVI   HADR,C'R'       SET ARC OPTION\n         B     BEGIN           CONTINUE\nSETDALY  EQU   *\n         MVI   HADR,C'D'       SET ARC OPTION\n         B     BEGIN           CONTINUE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OPEN THE INPUT FILES AND THE VSAM JOURNAL                    *\n*                                                                     *\n***********************************************************************\nBEGIN    EQU   *\n         OPEN  (INPUT,(INPUT)) OPEN THE INPUT FILE\n         TM    INPUT+48,X'10'  CHECK IF IT OPENED\n         BZ    ABEND2          NO, INPUT FAILED TO OPEN\nOPENACB  OPEN  JOURNACB        OPEN VSAM FILE\n         LTR   R15,R15         OK?\n         BNZ   ABEND3          NO - ABEND\nREADOLD  GET   INPUT,RECORD   GET THE OLD JOURNAL RECORDS\n         CLC   RECORD(4),=C'DSN='  IS IT FIRST RECORD\n         BE    SETDSN          YES - SET DSN\n*  CONVERT OLD RECORD TO NEW\n         MVC   HDATE(3),=C'019' SET TO 1900\n         CLC   INDATE+6(2),=C'75'  LESS THAN 1975\n         BH    MOVEYR              NO - CONTINUE\n         MVC   HDATE(3),=C'020' SET TO 2000\nMOVEYR   MVC   HDATE+3(2),INDATE+6   MOVE YEAR\n         MVC   HDATE+5(2),INDATE     MOVE MONTH\n         MVC   HDATE+7(2),INDATE+3   MOVE DAY\n         PACK  PDATE,HDATE           PACK DATE\n         MVC   JDATE,=P'099999999'   SET TO 9999999\n         SP    JDATE,PDATE         REVERSE DATE\n*\n         MVC   HTIME(1),=C'0'\n         MVC   HTIME+1(2),INTIME     MOVE HOUR\n         MVC   HTIME+3(2),INTIME+3   MOVE MIN\n         MVC   HTIME+5(2),INTIME+6   MOVE DSECONDS\n         PACK  PTIME,HTIME          PACK TIME\n         MVC   JTIME,=P'0999999'    SET TO 9999999\n         SP    JTIME,PTIME          REVERSE TIME\n*\n         MVC   JJOBN,INJOBN    MOVE JOBNAME\n         MVC   JJOB#(5),INJOB#+3   MOVE JOB NUMBER\n         MVC   JJOB#+5(3),INJOB#    MOVE JOBTYPE\n*\n         MVC   JMCLASS,INMCLASS MOVE MSGCLASS\n         MVC   JTTR,INTTR       MOVE IN TTR\n         MVC   JDAY,INDAY       MOVE IN DAY\n         MVC   JLINES,=PL4'0'   ZERO LINE COUNT\n         MVC   JDEVT,=C'T'      ASSUME TAPE\n         MVC   JADR,HADR        MOVE IN TYPE CODE\n         MVC   JDTSTAMP,PSTAMP  MOVE IN DATE/TIME STAMP\n*  ADD RECORD TO JOURNAL\n         PUT   RPL=JOURNRPL    WRITE OUT NEW JOURNAL RECORD\n         LTR   R15,R15         UPDATE OK\n         BZ    READOLD         GET NEXT RECORD\n         WTO   'SOUTCVT - DUPLICATE RECORD IN CONVERSION'\n         B     READOLD         GET NEXT RECORD\n         EJECT\nSETDSN   EQU   *\n         LA    R4,RECORD       SET R4 TO RECORD ADDR\n         LA    R4,48(R4)       SET TO END OF DSN\n         LA    R5,44\nLOOP1    CLI   0(R4),C' '      LOOKING FOR LAST BYTE\n         BNE   ENDLOOP\n         SH    R4,=H'1'        BACK UP 1\n         BCT   R5,LOOP1        TRY AGAIN\nENDLOOP  EQU   *\n         SH    R4,=H'8'         BACK UP TO BEGINNING OF GDG\n         BNP   NOGDG            TOO FAR - NOT GDG\n         CLC   0(2,R4),=C'.G' IS IT .G  ?\n         BNE   NOGDG            NOT A GDG\n         CLC   6(1,R4),=C'V'    IS IT \"V\"\n         BNE   NOGDG            NOT A GDG\n         MVC   HSTAMP+5(4),2(R4)   MOVE IN GDG\n         MVC   HSTAMP+10(2),7(R4) MOVE IN VERSION\n         B     PACKSTMP\nNOGDG    MVC   HSTAMP+5(6),=C'999999' SET TO HIGH\nPACKSTMP EQU   *\n         MVC   HSTAMP(5),=C'99999' SET TO HIGH VALUE\n         PACK  PSTAMP,HSTAMP     PACK IT\n         B     READOLD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF FILE ON INPUT, INFORM THE EXIT ROUTINE (IF ANY)       *\n*        AND CLOSE THE INPUT/OUTPUT FILES(S).                         *\n*                                                                     *\n***********************************************************************\nENDSOUT  EQU   *\n         CLOSE JOURNACB        CLOSE THE JOURNAL VSAM\n         CLOSE (INPUT)         CLOSE THE INPUT FILE\n         SR    R15,R15         CLEAR RETCODE\nEXIT     $EPILOG ,             RETURN TO CALLER\nABEND1   ABEND 1,DUMP\nABEND2   ABEND 2,DUMP\nABEND3   ABEND 3,DUMP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND WORK AREAS                                     *\n*                                                                     *\n***********************************************************************\n         LTORG\nHADR     DC    CL1' '\nHDATE    DC    CL9' '\nHSTAMP   DC    CL11' '\nPDATE    DC    PL5'0'\nHTIME    DC    CL7' '\nPTIME    DC    PL4'0'\nPSTAMP   DC    PL6'0'\n         DS    D\n         DC    CL12'START INPUT='\nRECORD   DS    0CL50\nINDATE   DS    CL8,CL1\nINTIME   DS    CL8,CL1\nINJOBN   DS    CL8,CL1\nINJOB#   DS    CL8,CL1\nINMCLASS DS    CL1,CL1\nINTTR    DS    CL3,CL8\nINDAY    DS    CL1\n         DS    D\n*        THE FOLLOWING IS THE JOURNAL RECORD FOR OUTPUT\nJOURNREC DS    0CL42              JOURNAL RECORD\nJJOBN    DC    CL8' '\nJDATE    DC    PL5'0'\nJTIME    DC    PL4'0'\nJJOB#    DC    CL8' '\nJMCLASS  DC    CL1' '\nJTTR     DC    XL3'000000'\nJDAY     DC    X'FF'\nJLINES   DC    PL4'0'\nJDEVT    DC    XL1'00'\nJADR     DC    CL1' '\nJDTSTAMP DC    PL6'0'\n         EJECT\nJOURNACB ACB   AM=VSAM,DDNAME=JOURNAL,MACRF=(KEY,DIR,OUT)\nJOURNRPL RPL   ACB=JOURNACB,AREA=JOURNREC,AREALEN=42,KEYLEN=22,        X\n               OPTCD=(KEY,DIR,SYN,NUP,MVE,KEQ,FKS),RECLEN=42,          X\n               ARG=JOURNREC\nINPUT    DCB   MACRF=(GM),DSORG=PS,DDNAME=INPUT,EODAD=ENDSOUT\nOUTPUT   DCB   MACRF=(PM),DSORG=PS,DDNAME=OUTPUT,RECFM=FB,LRECL=42\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOUTDATE": {"ttr": 780, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT NOGEN\n***********************************************************************\n*  SOUTDATE WILL TAKE A 5 BYTE NUMERIC FIELD AND BACKUP\n* UP THE DATE THE NUMBER OF DAYS SPECIFIED.\n* IT WILL RETURN A 10 BYTE DATE IN THE FORMAT MM/DD/YYYY\n*\n* NO SPECIAL EDITING OF THE DATA PASSED IS DONE.\n*\n* THIS PROGRAM IS AN EXTRACT OF THE $STCK MACRO.\n*\n***********************************************************************\nSOUTDATE $PROLOG\n         L     R10,0(R1)\n         L     R9,4(R1)\n         USING DATEAREA,R9\n         PACK  PACK3,0(5,R10)\n         STCK  8(13)              STORE THE TIME-OF-DAY CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n*START TIME\n         L     15,16              GET CVT ADDRESS\n         A     0,304(15)          ADD LOCAL TIME DEVIATION\n         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS\n         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES)\n         LR    15,0               COPY REMAINDER OF MICS TO GET SECS\n         SR    14,14              CLEAR FOR DIVIDE\n         D     14,=F'1000'        DIVIDE TO GET REMAINING MILLISECONDS\n         LR    14,15              COPY TO WORK REG\n         CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT\n         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT\n         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS\n* END TIME\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS\n         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK\n         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER\n* END DAY\n         ZAP   8(8,13),16(8,13)   MOVE # DAYS TO WORK AREA\n*\n         SP    8(8,13),PACK3      DECREMENT THE DATE\n*\n         AP    8(8,13),=P'1'      ADD ONE DAY\n         DP    8(8,13),=P'1461'   DIVIDE BY # DAYS IN FOUR YEARS\n         ZAP   16(8,13),8(5,13)   SAVE # FOUR YEAR PERIODS\n         MP    16(8,13),=P'4'     GET TO LAST 4 YEAR PERIOD\n         XC    8(5,13),8(13)      CLEAR FOR DIVIDE\n         LA    15,YEARTBL         LOAD TABLE ADDRESS FOR NO LEAP\n         CP    16(8,13),=P'4'     IS IT PRIOR TO 1904?\n         BL    NOLEAP             YES, CAN'T BE LEAP YEAR\n         LA    15,LEAPTBL         LOAD TABLE ADDRESS FOR LEAP YEAR\n         AP    8(8,13),=P'1'      ADD ONE MORE DAY FOR 1900\n         CP    8(8,13),=P'367'    IS IT LEAP YEAR?\n         BL    LEAPYR             YES DON'T SUBTRACT\n         LA    15,YEARTBL         LOAD TABLE ADDRESS FOR NO LEAP YEAR\n         AP    16(8,13),=P'1'     ADD ONE YEAR\n         SP    8(8,13),=P'366'    SUBTRACT REMAINING DAYS FOR ONE LEAP\nNOLEAP   CP    8(8,13),=P'366'    LESS THAN ONE YEAR REMAINING?\n         BL    LEAPYR             YES, GET OUT OF LOOP\n         SP    8(8,13),=P'365'    SUBTRACT REMAINING DAYS FOR ONE YEAR\n         AP    16(8,13),=P'1'     ADD ONE YEAR\n         B     NOLEAP             GO BACK TO COMPARE\nLEAPYR   ZAP   24(8,13),=P'1900'  DEFAULT TO 1900'S\n         AP    24(8,13),16(8,13)  ADD NUMBER YEARS SINCE 1900\n         UNPK  32(5,13),29(3,13)  UNPACK YEAR\n         OI    36(13),X'F0'       SET UP FOR PRINTING\n         MVC   DATE+6(4),33(13)    MOVE INTO OUTPUT FIELD\n         MP    16(8,13),=P'1000'  MAKE ROOM FOR # DAYS\n         AP    16(8,13),8(8,13)   ADD IN DAYS TO FORM JULIAN DATE\n         ZAP   24(4,13),16(8,13)  MOVE JUL DATE TO WORK AREA\n         MVO   14(2,13),25(1,13)  MOVE YEAR PORTION\n*        UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA\n         LR    14,15              SAVE TABLE IN USE\n         ZAP   8(8,13),26(2,13)   MOVE DAY PORTION\n         CVB   0,8(13)            CONVERT TO BIN\n         SR    1,1                CLEAR REG\n         IC    1,0(15)            LOAD CHAR FROM TABLE\n         LA    15,1(15)           INDEX TABLE POINTER\n         SR    0,1                SUBTRACT FROM WORK VALUE\n         BP    *-10               STILL POSITIVE, DO AGAIN\n         AR    0,1                ELSE, ADD IT BACK\n         CVD   0,8(13)            CONVERT TO DEC\n         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT\n         SR    15,14              FIND VALUE OF CURRENT INDEX\n         CVD   15,8(13)           CONVERT TO DEC\n         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT\n         OI    DATE+1,C'0'        INSURE NUMERICS\n         OI    DATE+4,C'0'        INSURE NUMERICS\n         OI    DATE+7,C'0'        INSURE NUMERICS\n         MVI   DATE+2,C'/'        ADD SLASH\n         MVI   DATE+5,C'/'        ADD SLASH\n         SR    R15,R15\n         $EPILOG\nYEARTBL  DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nLEAPTBL  DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\nPACK3    DC    PL3'0'\n         LTORG\nDATEAREA DSECT\nDATE     DS    CL10\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SOUTPRT": {"ttr": 784, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT OFF\n         MACRO\n         PROLOG\n**********************************************************************\n*\n*        THIS IS THE SYSOUT BROWSE SUBSYSTEM HARDCOPY UTILITY.\n*        IT PROVIDES HARDCOPY SUPPORT TO ALLOW ARCHIVED SYSOUT\n*        TO BE LOCATED AND PRINTED (LOCAL OR REMOTE).\n*\n*        THIS PROGRAM IS CALLED WHEN THE SOUTSYS SYSTEM REQUESTS\n*        A REPORT BROWSE IN THE BATCH MODE. THE ISPF PANEL BUILDS\n*        THE PROPER PARM TO BE PASSED TO THIS ROUTINE.\n*        THE PARM FORMAT FOLLOWS;\n*\n*        1-8  - JOB NAME\n*        9-13 - JOB NUMBER (5 CHARS;  DO NOT INCLUDE STC OR JOB)\n*       14-23 - DATE IN FORMAT  MM/DD/YYYY\n*       24-31 - TIME IN FORMAT  HH:MM:SS\n*       32-39 - DD NAME WHERE OUTPUT WILL PRINT (USUALLY SYSPRINT)\n*       40-60 - PREFIX (IE:SYS2.OPSWTR) 21 CHARS MAX\n*       61    - AUTHORIZATION BYTE (SET TO X'04')\n*       62-71 - DATE LIMIT FOR \"LIST\" USED IN 4.S ONLY\n*       72-96 - OLD SYSTEM PREFIX\n*\n*\n*\n*        THE OUTPUT LISTING FOR THE NAMED JOB WILL BE WRITTEN TO THE\n*        SYSPRINT FILE.  FOR EACH POSSIBLE RETURN CODE FROM SOUTSUB,\n*        A LIKE WTP MESSAGE WILL BE RETURNED.\n*\n*        EXAMPLE JCL:\n*\n*\n*        //JOBNAME  EXEC PGM=SOUTPRT,PARM='JOBX    '  (8 CHARS REQ'D)\n*        //SYSPRINT DD   SYSOUT=A          JJJJJJJJ\n*\n*\n*        //JOBNUM   EXEC PGM=SOUTPRT,PARM='JOBX    324  ' (13 CHARS)\n*        //SYSPRINT DD   SYSOUT=A          JJJJJJJJNNNNN\n*\n*\n*        //NAMEDATE EXEC PGM=SOUTPRT,PARM='JOBX    0001 08/25/1984'(23)\n*        //SYSPRINT DD   SYSOUT=A          JJJJJJJJNNNNNMM.DD.YYYY\n*\n*\n*   //FULL     EXEC PGM=SOUTPRT,\n*   //         PARM='JOBX    324  08/25/8012:08:23SYSPRINTSYSU.OPSTAPE'\n*   //SYSPRINT DD   SYSOUT=A      MM.DD.YYHH.MM.SS  DDN   QUALIFIER\n*\n*   NOTE: USING THE SPF SYSTEM (CMNFS00) AS THE DRIVER, SELECTING THE\n*         PRINT OPTION, SPF WILL BUILD THIS PARM IN THE PROPER FORMAT\n*         FOR YOU\n*\n****** MODIFIED BY J MCCLOSKEY - F.W. WOOLWORTH 04/81\n*          ADDED SYSPRINT AND QUALIFIER TO VALID PARM INFO TO SUPPORT\n*          MULTIPLE QUALIFIERS.\n*\n*        ATTRIBUTES: NOT REENTRANT AUTHORIZED\n*\n*        REGISTERS USED:\n*            R0 - WORK\n*            R1 - WORK\n*            R2 - WORK\n*            R3 - WORK\n*            R4 - ------ (UNUSED)\n*            R5 - ------ (UNUSED)\n*            R6 - ------ (UNUSED)\n*            R7 - ------ (UNUSED)\n*            R8 - ------ (UNUSED)\n*            R9 - RETURN CODE (INITIALLY CLEARED)\n*           R10 - PARM VALUE POINTER (TEMP)\n*           R11 - PARM LIST POINTER  (TEMP)\n*           R12 - BASE\n*           R13 - SAVE AREA\n*           R14 - WORK\n*           R15 - WORK\n*\n*        RETURN CODES: 99 = INVALID PARM SPECIFIED (LENGTH ERROR)\n*                      SEE SOUTSUB FOR ANY OTHERS\n*\n**********************************************************************\n         MEND\nSOUTPRT  $PROLOG\n         L     R1,0(R1)           GET PARM POINTER\n         LH    R2,0(R1)           PARM SIZE\n         LH    R4,0(R1)           PARM SIZE\n         LTR   R2,R2              ANY PARM?\n         BZ    ERROR              NO, ERROR\n         LA    R3,P1              POINT TO FIRST PARM\nFILTER1  CLI   2(R1),C','         ARE WE LOOKING AT A COMMA?\n         BNE   FILTER2            NO, USE IT\n         BCT   R2,FILTER3         DECREMENT ACTUAL LENGTH USED\nFILTER2  MVC   0(1,R3),2(R1)      FILL IN ONE BYTE OF PARM\n         LA    R3,1(R3)           BUMP TO NEXT VARIABLE POSITION\nFILTER3  LA    R1,1(R1)           BUMP TO NEXT INPUT CHAR\n         BCT   R4,FILTER1         REPEAT\n         CH    R2,=H'8'           VALID PARM?\n         BE    PARMOK             YES, CONTINUE\n         CH    R2,=H'13'          VALID PARM?\n         BE    PARMOK             YES, CONTINUE\n         CH    R2,=H'23'          VALID PARM?\n         BE    PARMOK             YES, CONTINUE\n         CH    R2,=H'31'          VALID PARM?\n         BE    PARMOK             YES, CONTINUE\n         CH    R2,=H'39'          VALID PARM?\n         BE    PARMOK             NO, ERROR\n         CH    R2,=H'60'          VALID PARM?\n         BE    PARMOK             NO, ERROR\n         CH    R2,=H'61'          VALID PARM?\n         BE    PARMOK             NO, ERROR\n         CH    R2,=H'71'          VALID PARM?\n         BE    PARMOK             NO, ERROR\n         CH    R2,=H'96'          VALID PARM?\n         BE    PARMOK             NO, ERROR\n         CH    R2,=H'97'          VALID PARM?\n         BL    PARMOK             NO, ERROR\nERROR    WTO   'SOUTPRT - INVALID PARM SPECIFIED',ROUTCDE=11\n         LA    R15,99             SET RETURN CODE\n         B     EXIT               RETURN\nPARMOK   LA    R1,SOUTSUBP        ADDRESS OF SOUTSUB PARM\n         LINK EP=SOUTSUB          CALL THE SOUTSUB ROUTINE\nEXIT     $EPILOG ,                RETURN TO SYSTEM\n         LTORG\nSOUTSUBP DC    A(P1,P2,P3,P4,P5,P6,P7,P8,P9)  LIST OF ADDRESSES\nP1       DC    CL8' '             JOBNAME\nP2       DC    CL5' '             JOBNUMBER\nP3       DC    CL10' '             DATE\nP4       DC    CL8' '             DATE\nP5       DC    CL8'SYSPRINT'      DDNAME\nP6       DC    CL21' '            QUALIFIER FOR SOUT DATASETS\nP7       DC    X'00'              FLAG BYTE (AUTHORIZED)\nP8       DC    CL10' '            DATE LIMIT FOR SEARCH\nP9       DC    CL25' '            QUALIFIER FOR OLD SOUT DATASETS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOUTSEP": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         PROLOG\n         PRINT OFF\n***********************************************************************\n*                                                                     *\n*  VSAM JOURNAL VERSION                                               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*  THIS JOB STOPS \"DISKWTR\" AND STARTS \"SAVEWTR\"                      *\n*                                                                     *\n*  IF YOUR PROC IS NOT CALLED \"DISKWTR\", THEN FIND  \"STOPDISK\" IN     *\n*  COL 1 AND CHANGE TO YOUR STARTED TASK'S NAME!!                     *\n*                                                                     *\n*  IF YOUR PROC IS NOT CALLED \"SAVEWTR\", THEN FIND  \"STARTSVE\" IN     *\n*  COL 1 AND CHANGE TO YOUR STARTED TASK'S NAME!!                     *\n*                                                                     *\n***********************************************************************\n*    SOUTSEP IS AN EXTERNAL WRITER PAGE SEPARATOR ROUTINE TO BE       *\n*    USED BY THE 'DISKWTR' ROUTINE.  IT CREATES A VSAM JOURNAL RECORD *\n*    DESCRIBING THE JOB BEING PROCESSED, AND ALSO A SEPARATOR RECORD  *\n*    WHICH IS PLACED INTO THE OUTPUT FILE AS A DELIMITER/VERIFICATION *\n*    RECORD.  BOTH OF THESE RECORDS ARE USED BY THE SOUTSUB ROUTINE   *\n*    TO LOCATED THE NAMED JOB'S OUTPUT.  THESE RECORDS ARE MAINTAINED *\n*    BY THE SOUTWTR ROUTINE ACROSS ARCHIVAL AS WELL.                  *\n*                                                                     *\n*    SOUTSEP IS REENTRANT SO THAT IT MAY BE RESIDENT IN THE PLPA      *\n*    TO AVOID REPEATED MODULE LOADS DUE TO INVOCATION VIA THE LINK    *\n*    MACRO IN THE EXTERNAL WRITER(IASXWR00).  SOUTSEP SUPPORTS        *\n*    RECFM=FBA ON THE SYSOUT DATASET WITH LRECL OF 133 OR LARGER.     *\n*                                                                     *\n*    IT USES A PUT MACRO IN LOCATE MODE AND ESTABLISHES A SYNAD EXIT  *\n*    BY STORING THE ADDRESS OF THE SYNAD ROUTINE IN THE DCBSYNAD      *\n*    FIELD.                                                           *\n*                                                                     *\n*  INPUT.                                                             *\n*    UPON ENTRY, REGISTER 1 POINTS TO A 4-WORD PARAMETER LIST IN THE  *\n*    FOLLOWING FORMAT.                                                *\n*     0    OUTPUT UNIT TYPE SWITCH                                    *\n*     1-3  RESERVED                                                   *\n*     4-7  ADDRESS OF OPEN OUTPUT QSAM DCB IN LOCATE MODE             *\n*     8-11 ADDRESS OF 8 CHARACTER FIELD CONTAINING JOBNAME            *\n*    12-15 ADDRESS OF 1 CHARACTER FIELD CONTAINING MSGCLASS           *\n*                                                                     *\n*    NOTE.                                                            *\n*    ALTHOUGH NOT SPECIFICALLY SUPPORTED, THE JES2 JOB ID MAY BE      *\n*    FOUND IMMEDIATELY FOLLOWING THE JOBNAME.  IF IN SUBSEQUENT MVS   *\n*    RELEASES THIS FACT CHANGES, APPROPRIATE UPDATES WILL HAVE TO BE  *\n*    MADE IN ORDER TO CONTINUE SUPPLYING THE JES2 JOB ID.             *\n*                                                                     *\n*  JOURNAL-OUTPUT:                                                    *\n*          THE DISK TTR CONTAINED IN THE WTR OUTPUT DCB IS WRITTEN    *\n*          TO THE JOURNAL DATASET ALONG WITH THE CURRENT DATE/TIME,   *\n*          JOBNAME, JOB NUMBER, AND MSGCLASS.  THIS ALLOWS THE        *\n*          SPFSOUT ROUTINE TO LOCATE A GIVEN JOB DIRECTLY.  THE       *\n*          FOLLOWING IS A DESCRIPTION OF THE JOURNAL RECORD:          *\n*   'JJJJJJJJ MM/DD/YY HH.MM.SS JOB##### C TTR DAY LINE DEVT ADR STP' *\n*                                                                     *\n*          WHERE JOBNAME   BEGINS IN COL  1 (8)                       *\n*                MM/DD/YY  BEGINS IN COL  9 (5) PACKED (-99999999)    *\n*                HH:MM:SS  BEGINS IN COL 14 (4) PACKED (-999999)      *\n*                JOBNUMBER BEGINS IN COL 18 (5)                       *\n*                TASK-TYPE BEGINS IN COL 23 (3)                       *\n*                MSGCLASS  BEGINS IN COL 26 (1)                       *\n*                TTR       BEGINS IN COL 27 (3) - DISK ONLY           *\n*                DAY       BEGINS IN COL 30 (1)                       *\n*                LINES     BEGINS IN COL 31 (4) PACKED (ZERO)         *\n*                DEVT      BEGINS IN COL 35 (1) DEVICE TYPE           *\n*                ADR       BEGINS IN COL 36 (1) SET TO A(ACTIVE)      *\n*                STAMP     BEGINS IN COL 37 (6) SET TO 99999999999    *\n*                                                                     *\n*    NOTE.                                                            *\n*    SOUTSEP CREATES AND OPENS A JOURNAL ACB IN GOTTEN STORAGE WHICH  *\n*    IS LEFT OPEN FOR THE DURATION OF THE WTR ACTIVE TIME.  THIS      *\n*    ACB IS NEVER CLOSED BY THIS ROUTINE.  INSTEAD IT IS LEFT TO      *\n*    RECOVERY/TERMINATION MANAGER TO CLOSE AT TERMINATION TIME.       *\n*    THIS AVOIDS AN OPEN/CLOSE SEQUENCE FOR EACH DATASET PROCESSED.   *\n*                                                                     *\n*  SEPARATOR-OUTPUT:                                                  *\n*    A SINGLE RECORD IN THE FOLLOWING FORMAT, WRITTEN TO THE DCB      *\n*    SUPPLIED BY THE EXTERNAL WRITER.                                 *\n*                                                                     *\n* SPFSOUTS PAGE SEPARATOR FOLLOWS:                                    *\n*    AAAAAAAA(BBBCCCCC), MSGC D EEEEEEEE FFFFFFFF GGGG H              *\n*                                                                     *\n*    NOT SHOWN ABOVE ARE POSITIONS 0-5 (OFFSETS RELATIVE TO 0)        *\n*     0-5           X'F140404040' SET DEFAULT CARRAGE CONTROL         *\n*     6-133         PRINTED DATA                                      *\n*    34-41 AAAAAAAA JOBNAME                                           *\n*    43-45 BBB      JES2 JOBTYPE (JOB/STC/TSU)                        *\n*    46-50 CCCCC    JES2 JOB SEQUENCE NUMBER                          *\n*    63    D        MSGCLASS                                          *\n*    65-72 EEEEEEEE DATE IN THE FORM MM/DD/YY                         *\n*    74-81 FFFFFFFF TIME IN THE FORM HH:MM:SS                         *\n*    83-86 GGGG     FULL YEAR                                         *\n*    88    H        DAY OF WEEK BYTE                                  *\n*                                                                     *\n*                                                                     *\n*  RETURN CODES UPON RETURN TO EXTERNAL WRITER.                       *\n*    0 - SUCCESSFUL OPERATION                                         *\n*    8 - UNRECOVERABLE OUTPUT ERROR                                   *\n*                                                                     *\n***********************************************************************\n         MEND\n         PRINT ON\nSOUTSEP  CSECT\n         SAVE  (14,12),,*          SAVE REGISTERS\n         BALR  R3,R0               INITIALIZE BASE REGISTER\n         USING *,R3                CSECT BASE REGISTERS\n         LR    R8,R1               SAVE ENTRY REG 1\n         LA    R7,8                SET I/O ERROR RETCODE\n         L     R15,16              CVT ADDRESS\n         L     R15,0(R15)          OLD/NEW POINTERS\n         L     R6,4(R15)           CURRENT TCB ADDRESS\n         L     R14,8(R6)           ADDRESS OF FIRST DEB ADDRESS\n         L     R12,24(R14)         DCB ADDRESS\n         LH    R1,40(R12)          TIOT OFFSET\n         A     R1,12(R6)           ADDRESS OF TIOT ENTRY\n         CLC   4(8,R1),=CL8'JOURNAL'  IS THIS THE JOURNAL DCB ?\n         BE    GOTDEB             YES - OK\nNEXTDEB  ICM   R14,7,5(R14)        GET NEXT DEB IF ANY\n         BZ    GETMAIN             NONE, FIRST TIME THROUGH\n         L     R12,24(R14)         GET DCB ADDRESS\n         LH    R1,40(R12)          TIOT OFFSET\n         A     R1,12(R6)           ADDRESS OF TIOT ENTRY\n         CLC   4(8,R1),=CL8'JOURNAL' THIS THE JOURNAL DCB?\n         BNE   NEXTDEB             NO, GET NEXT DEB\nGOTDEB   EQU   *\n         S     R12,=A(GACBLOCK-GMAREA) BACK UP TO BEGINNING OF GM\n         ST    R13,4(R12)          SET CURR SAVE BKP PTR=A(PREV SAVE)\n         ST    R12,8(R13)          SET PREV SAVE FWD PTR=A(CURR SAVE)\n         LR    R13,R12             SET R13=A(CURR SAVE)\n         LM    R10,R12,4(R8)       SET ADDRESSABILITY TO PARM DATA\n         B     CONTINUE            YES, CONTINUE\nGETMAIN  LA    R0,GMAREALN         SET R0=L'GMAREA\n         GETMAIN R,LV=(0)          GET VIRTUAL FOR GMAREA\n         LR    R12,R1              SET R12=A(GMAREA)\n         LR    R0,R1               SET R0=MVCL AD1, A(GMAREA)\n         LA    R1,GMAREALN         SET R1=MVCL LN1, L'GMAREA\n         SR    R15,R15             SET R15=MVCL LN2, PAD\n         MVCL  R0,R14              RESET ALL GMAREA TO X'00'\n         LA    R0,GLIST-GMAREA(R12) ADDRESS OF TO FIELD\n         LA    R14,JLIST           ADDRESS OF FROM FIELD\n         LA    R1,GJOBN-GLIST+1     SIZE OF DATA TO MOVE\n         LR    R15,R1              TO BOTH REGS\n         MVCL  R0,R14              MOVE TO GETMAINED AREA\n         ST    R13,4(R12)          SET CURR SAVE BKP PTR=A(PREV SAVE)\n         ST    R12,8(R13)          SET PREV SAVE FWD PTR=A(CURR SAVE)\n         LR    R13,R12             SET R13=A(CURR SAVE)\n         USING GMAREA,R13          BASE FOR GOTTEN STORAGE\n         LA    R2,GACB             SET R2=ACB IN GETMAIN\n         LA    R4,GACBLOCK         SET R4=WHERE TO BUILD ACB\n         GENCB BLK=ACB,DDNAME=JOURNAL,AM=VSAM,MACRF=(KEY,DIR,OUT),     X\n               WAREA=(R4),LENGTH=96,MF=(G,(R2))\n         LR    R2,R1               SET R2=ADDR OF ACB\n         LA    R4,GJOBN            SET R4=RECORD AREA\n         LA    R5,GRPL             SET R5=RPL AREA\n         GENCB BLK=RPL,AREA=(R4),ACB=(R2),AREALEN=42,RECLEN=42,        X\n               OPTCD=(KEY,DIR,SYN,NUP,MVE),MF=(G,(R5))\n         LR    R6,R1               SET R6=RPL ADDR\n         ST    R6,SAVERPL          SAVE FOR LATER USE\n         OPEN  ((R2)),MF=(E,GLIST) OPEN ACB\n         LTR   R15,R15             OK?\n         BNZ   EXIT                NO - EXIT\n         LM    R10,R12,4(R8)       SET ADDRESSABILITY TO PARM DATA\n         USING IHADCB,R10          ADDRESS OF WTR DCB\n         LA    R0,GJOBN            ADDRESS OF TO FIELD\n         LA    R14,JJOBN           ADDRESS OF FROM FIELD\n         LA    R1,GSTP-GJOBN+6     SIZE OF DATA TO MOVE\n         LR    R15,R1              TO BOTH REGS\n         MVCL  R0,R14              MOVE TO GETMAINED AREA\n         LA    R15,DEVT#           SET LOOP CONTROL\n         LA    R14,DEVT            ADDRESS OF DEVICE TABLE\nNEXTDEV  CLC   0(1,R14),DCBTRBAL-1 CHECK DEVICE TYPE\n         BE    DEVTFND             FOUND, CONTINUE\n         LA    R14,4(R14)          NEXT ENTRY\n         BCT   R15,NEXTDEV         CHECK NEXT DEVICE ENTRY\n         WTO   'DISKWTR - UNSUPPORTED DEVICE TYPE'\n         B     EXIT                ERROR RETURN TO EXTERNAL WTR\nDEVTFND  MVC   GDEVT,0(R14)        GET NUMBER OF TRACKS/CYLINDER\n         LH    R14,2(R14)          GET NUMBER OF TRACKS/CYLINDER\n         ST    R14,G#TC            SAVE FOR LATER USE\n         USING JOB,R11             ADDRESS OF JOBNAME\n         USING MSGCLASS,R12        ADDRESS OF MSGCLASS\nCONTINUE CLC   GJOBN,JOBNAME       IS THIS SAME JOB AS PREVIOUS\n         BNE   PROCESS             NO, PROCESS SEPARATOR\n         CLC   GJOB#(5),JOBNUM+3   IS THIS SAME JOB + AS PREVIOUS\n         BNE   PROCESS             NO - CREATE SEPERATOR\n         CLC   GJOB#+5(3),JOBNUM   IS THIS SAME TYPE JOB AS PREVIOUS\n         BE    NOSEP               YES, SKIP SEPARATOR\nPROCESS  $STCK NOGEN               GET DATE/TIME FOR SEPARATOR/JOURNAL\n*\n*  CONVERT DATE AND TIME TO PACK AD SUBTRACT FROM 9999999 SO THAT\n*  RECORDS ARE STORED ON THE VSAM FILE IN LIFO ORDER\n*\n         MVC   HDATE(4),YEARDATE   MOVE IN FULL YEAR (IE:1984)\n         MVC   HDATE+4(2),DATE     MOVE IN MONTH\n         MVC   HDATE+6(2),DATE+3   MOVE IN DAY\n         PACK  PDATE,HDATE         PACK DATE\n         MVC   GDATE,=P'099999999' SET TO HIGH NUMBER\n         SP    GDATE,PDATE         SUBTRACT DATE FOR REVERSAL\n*\n         MVC   HTIME(2),TIME       MOVE IN HOURS\n         MVC   HTIME+2(2),TIME+3   MOVE IN MINUTES\n         MVC   HTIME+4(2),TIME+6   MOVE IN SECONDS\n         PACK  PTIME,HTIME         PACK TIME\n         MVC   GTIME,=P'0999999'   SET TO HIGH\n         SP    GTIME,PTIME         SUBTRACT TIME FOR REVERSAL\n*\n         MVI   GPREFIX,X'40'       SET GPREFIX(0)=SPACE\n         MVC   GPREFIX+1(5),GPREFIX  SET GPREFIX(1-5)=SPACE\n         LA    R15,SYNAD           SET R15=A(SYNAD ROUTINE)\n         STCM  R15,7,DCBSYNA       SET DCBSYNA A(SYNAD)\n         LA    R4,133              SET R4 = CONSTANT 133\n         LA    R8,GPREFIX          SET R8=A(GPREFIX), ADDRESS CARRCTL\n         USING CARRCTL,R8          CARRCTL DSECT BASE REG\n         MVI   CARRCTL,X'F1'       SET ASA CARRIAGE CONTROL=X'F1'\nPUT      PUT   (10)                GET RECORD AREA VIA PUT LOCATE\n         ICM   R7,15,GRC           SET R7=RETURN CODE\n         BNZ   EXIT                IF I/O ERROR, GO TO EXIT\n         USING RECORD,R1           RECORD DSECT BASE REG\n         MVC   RECPREF,GPREFIX     MOVE RDW, CARRCTL, TRC TO RECORD\n         MVC   RECLIT,LIT          MOVE LITERAL TO RECORD\n         LH    R15,DCBLRECL        SET R15=DCBLRECL\n         SR    R15,R4              SUBTRACT FIXED LENGTH FROM LRECL\n         BNP   MOVES               IF NO REMAINING BYTES, GO MOVE DATA\n         BCTR  R15,R0              DECREMENT R15 FOR EX LENGTH\n         EX    R15,*+8             EXECUTE MVC TO SPACE FILL\n         B     *+10                BRANCH AROUND EXECUTED MVC\n         MVC   RECORD+133(0),RECORD+132 SET REST OF RECORD=SPACE\nMOVES    MVC   RECJNAME,JOBNAME    MOVE JOBNAME TO RECORD\n         MVC   GJOBN,JOBNAME       MOVE JOBNAME TO JOURNAL REC\n         MVC   RECJNUM,JOBNUM      MOVE JOBNUM TO RECORD\n         MVC   GJOB#(5),JOBNUM+3   MOVE JOBNUM TO JOURNAL REC\n         MVC   GJOB#+5(3),JOBNUM   MOVE JOBTYPE TO JOURNAL REC\n         MVC   RECMSGCL,MSGCLASS   MOVE MSGCLASS TO RECORD\n         MVC   GMCLASS,MSGCLASS    MOVE MSGCLASS TO JOURNAL REC\n         MVC   RECDATE,DATE        MOVE DATE TO SEPARATOR RECORD\n         MVC   RECTIME,TIME        MOVE TIME TO SEPARATOR RECORD\n         MVC   RECYEAR,YEARDATE    MOVE IN FULL YEAR DATE\n         MVC   RECDAY,DAY          MOVE IN DAY CODE\n         LA    R7,8                SET I/O ERROR RETCODE\n         L     R14,DCBDEBAD        GET ADDRESS OF WTR DCB'S DEB\n         TM    GSWITCH,X'01'       FIRST PASS?\n         BNZ   SETUPTTR            NO - HAVE MAX TTR\n* CALCULATE FOR MAX TTR BEFORE ISSUING STOP\n         OI    GSWITCH,X'01'       SET ON\n         SR    R8,R8               CLEAR FOR ICM\n         SR    R9,R9               CLEAR FOR ICM\n         ICM   R9,3,42(R14)        GET END CYLINDER NUMBER\n         ICM   R8,3,38(R14)        GET START CYLINDER NUMBER\n         SR    R9,R8               GET # CYLS IN ACTIVE FILE\n         AH    R9,=H'1'            ADD 1 (ASSUMES CYL ALLOCATION)\n         SR    R8,R8               CLEAR FOR MULTIPLY\n         M     R8,G#TC             MULTIPLY BY TRKS/CYL\n         M     R8,=F'80'           CALCULATE FOR 80% FULL\n         D     R8,=F'100'          CALCULATE FOR 80% FULL\n         STH   R9,GMAXTTR          MOVE MAX INTO HOLD AREA\nSETUPTTR CLC   DCBFDAD+3(4),38(R14) CHECK WITHIN EXTENT\n         BL    EXIT                LOW, ERROR RETURN\n         CLC   DCBFDAD+3(4),42(R14) CHECK WITHIN EXTENT\n         BH    EXIT                HIGH, ERROR RETURN\n         SR    R8,R8               CLEAR FOR ICM\n         SR    R9,R9               CLEAR FOR ICM\n         ICM   R9,3,DCBFDAD+3      GET CURRENT CYLINDER NUMBER\n         ICM   R8,3,38(R14)        GET START CYLINDER NUMBER\n         SR    R9,R8               GET RELATIVE CYLINDER\n         SR    R8,R8               CLEAR FOR MULTIPLY\n         M     R8,G#TC             MULTIPLY BY TRKS/CYL\n         SR    R15,R15             CLEAR FOR ICM\n         ICM   R15,3,DCBFDAD+5     GET CURRENT TRACK NUMBER\n         IC    R14,DCBFDAD+7       GET RECORD NUMBER\n         AR    R9,R15              NOW HAVE REAL 'TT'\n         BZ    NOADJ               ZERO TTR, SKIP DECREMENT\n         CLI   DCBFDAD+7,X'01'     WOULD DECREMENT TAKE US TO ZERO?\n         BH    DECR                NO, DECREMENT RECORD NUMBER\n         SH    R9,=H'1'            DECREMENT TRACK NUMBER\n         B     NOADJ               CONTINUE\nDECR     BCTR  R14,R0              DECRMENT FOR SAM-E\nNOADJ    STC   R14,GTTR+2          INCLUDE UPDATED TTR\n         STCM  R9,3,GTTR           MOVE TO JOURNAL RECORD\n         L     R6,SAVERPL          RESTORE RPL ADDRESS\n         PUT   RPL=(R6)            UPDATE VSAM JOURNAL\n         LA    R7,8                SET R7 TO UPDATE RETURN CODE\n         LTR   R15,R15             OK?\n         BNZ   EXIT                NO - EXIT\n         SR    R7,R7               CLEAR R7\n         ENDREQ RPL=(R6)           END IT\n*\n         CLC   GTTR(2),GMAXTTR     REACHED 80% FULL YET\n         BL    NOSEP               NO - BR AROUND\n         TM    GSTART,X'01'        STARTED SAVEWTR ALREADY\n         BNZ   NOSEP               YES - BYPASS START\n         OI    GSTART,X'01'        SET ON\n         WTO   'DISKWTR - ACTIVE FILE 80% FULL'\n*\n         SR    R0,R0               CLEAR R0\n         LA    R1,STARTSVE         SET R1 TO START SAVEWTR\n         SVC   34                  ISSUE START SAVEWTR COMMAND\n*\n         SR    R0,R0               CLEAR R0\n         LA    R1,STOPDISK         SET R1 TO STOP DISKWTR\n         SVC   34                  ISSUE STOP DISKWTR COMMAND\n*\n*  FOLLOWING TIMER ADDED TO TRY TO ELIMINATE DISKWTR FROM\n*  ADDING ANOTHER SEP RECORD BEFORE THE STOP COMMAND TAKES\n*  AFFECT. U0007 COULD HAPPEN IN SAVEWTR IF SEP RECORD ADDED\n*  WITH NO VSAM JOURNAL RECORD ???????\n*\n         STIMER WAIT,DINTVL=WAITTIME\n*\nNOSEP    SR    R7,R7               CLEAR RETCODE\nEXIT     L     R13,GSAVE+4         SET R13=A(PREV SAVE AREA\n         LR    R15,R7              SET R15=RETURN CODE\n         RETURN (14,12),T,RC=(15)  RETURN TO EXTERNAL WRITER\nSYNAD    MVI   GRC+3,8             SET RETURN CODE=8\n         BR    R14                 RETURN TO QSAM\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nJLIST    OPEN  (R2,),MF=L\n         DS    0F\nJJOBN    DC    CL8'JOBNAME'\nJDATE    DC    PL5'0'\nJTIME    DC    PL4'0'\nJJOB#    DC    CL8'#####JOB'\nJMCLASS  DC    CL1' '\nJTTR     DC    XL3'00'\nJDAY     DC    XL1'00'\nJLINES   DC    PL4'0'\nJDEVT    DC    XL1'00'\nJADR     DC    CL1'A'\nJSTP     DC    XL6'99999999999F'\nWAITTIME DC    C'00000200'\nSTOPDISK DC    AL2(20)\n         DC    H'0'\n         DC    CL18'P DISKWTR'\nSTARTSVE DC    AL2(20)\n         DC    H'0'\n         DC    CL18'S SAVEWTR'\nLIT      DC    CL50'SPFSOUTS PAGE SEPARATOR FOR ########(########), MS'\n         DC    CL77'GCLASS # MM/DD/YY TTTTTTTT YYYY'\n         LTORG\n*              DEVICE TYPE - 00 - TRACKS/CYLINDER\n         DS    0F\nDEVT     DC    XL1'2F',XL1'00',H'15'       3390\n         DC    XL1'2E',XL1'00',H'15'       3380\n         DC    XL1'2B',XL1'00',H'30'       3350\n         DC    XL1'29',XL1'00',H'19'       3330\n         DC    XL1'2D',XL1'00',H'19'       3330-1\n         DC    XL1'2A',XL1'00',H'12'       3340\nDEVT#    EQU   (*-DEVT)/4\n*\n*\n*\nGMAREA   DSECT\nGSAVE    DS    18F\nGACBLOCK DS    CL96\n         DS    0F\nGACB     DS    CL120\n         DS    0F\nGRPL     DS    CL120\n         DS    0F\nGLIST    DS    XL(JJOBN-JLIST)\n         DS    0F\nGJOBN    DS    CL8\nGDATE    DS    PL5\nGTIME    DS    PL4\nGJOB#    DS    CL8\nGMCLASS  DS    CL1\nGTTR     DS    XL3\nDAY      DS    CL1\nGLINES   DS    PL4\nGDEVT    DS    CL1\nGADR     DS    CL1\nGSTP     DS    XL6\n         DS    0F\nYEARDATE DS    CL4\nDATE     DS    CL8\nTIME     DS    CL12\nHDATE    DS    CL8\nPDATE    DS    PL5\nHTIME    DS    CL6\nPTIME    DS    PL4\nG#TC     DS    F\nGPREFIX  DS    0F,CL6\nGRC      DS    0F,XL4\nGSWITCH  DS    0F,XL1\nGSTART   DS    0F,XL1\nGMAXTTR  DS    0F,H\nSAVERPL  DS    F\nGMAREALN EQU   (((((*-GMAREA)-1)/8)+1)*8)+16\nCARRCTL  DSECT\n         DS    XL1\nJOB      DSECT\nJOBNAME  DS    CL8\nJOBNUM   DS    CL4\nMSGCLASS DSECT\n         DS    CL1\nRECORD   DSECT\nRECPREF  DS    CL6\nRECLIT   DS    0CL127\n         DS    CL28\nRECJNAME DS    CL8\n         DS    CL1\nRECJNUM  DS    CL8\n         DS    CL12\nRECMSGCL DS    CL1\n         DS    CL1\nRECDATE  DS    CL8\n         DS    CL1\nRECTIME  DS    CL8\n         DS    CL1\nRECYEAR  DS    CL4\n         DS    CL1\nRECDAY   DS    CL1\n         DS    CL44\n         DCBD  DSORG=PS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOUTSUB": {"ttr": 1038, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT ON,GEN\n         MACRO\n         PROLOG\n**********************************************************************\n*\n*        THIS IS THE SPF SYSOUT UTILITY SUBROUTINE.  IT PROVIDES\n*        BASIC SEARCH/LOCATE SUPPORT FOR BOTH SPF/TSO AND BATCH\n*        PROCESSING FOR THE SYSOUT BROWSE SUBSYSTEM.\n*\n*        THIS UTILITY SUBROUTINE IS PASSED A LIST OF 9 POINTERS AS\n*        PARM INFORMATION AS FOLLOWS:\n*\n*        1)  JOBNAME    ADDRESS OF AN EIGHT BYTE FIELD WHICH CONTAINS\n*                       THE JOBNAME FOR WHICH SYSOUT IS TO BE LOCATED/\n*                       COPIED.  IF THIS POINTER IS ZERO OR THE AREA\n*                       IT POINTS TO IS NULL, JOBNAME IS NOT USED.\n*        2)  JOBNUMBER  ADDRESS OF A FIVE CHARACTER FIELD WHICH\n*                       CONTAINS THE JES2 JOB NUMBER OF THE JOB FOR\n*                       WHICH SYSOUT IS TO BE LOCATED/COPIED (LEFT\n*                       JUSTIFIED). IF THIS POINTER IS ZERO OR THE\n*                       AREA IT POINTS TO IS NULL, JOBNUM IS NOT USED.\n*        3)  DATE       ADDRESS OF A TEN(10)CHARACTER FIELD WHICH\n*                       CONTAINS THE DATE THE ABOVE JOB WAS PROCESSED\n*                       IN THE FORM 'MM/DD/YYYY' 'MM/DD' OR ZERO.\n*                       IF NOT USED, THE FIRST OCCURRANCE OF THE JOB\n*                       WILL BE USED TO SATISFY THE REQUEST.\n*        4)  TIME       ADDRESS OF AN EIGHT CHARACTER FIELD WHICH\n*                       CONTAINS THE TIME THE ABOVE JOB WAS PROCESSED\n*                       IN THE FORM 'HH:MM:SS', OR ZERO.\n*                       IF NOT USED, THE FIRST OCCURRANCE OF THE JOB\n*                       WILL BE USED TO SATISFY THE REQUEST.\n*        5)  DDNAME     THE DD NAME OF THE PRE-ALLOCATED FILE INTO\n*                       WHICH THE JOBS SYSOUT IS TO BE COPIED.\n*                       IF THE DCB ATTRIBUTES FOUND CONFLICT WITH\n*                       THOSE REQUIRE, THEY WILL BE OVERRIDDEN.\n*        6)  QUALIFIER  THE ADDRESS OF A FIELD UP TO 21 CHARACTERS IN\n*                       LENGTH (LEFT JUSTIFIED) WHICH CONTAINS THE\n*                       SOUT JOURNAL DATASET QUALIFIER.  THE BELOW\n*                       LISTED DATASETS WILL BE PREFIXED WITH THIS\n*                       QUALIFIER FOR ALLOCATION VIA SVC 99.\n*                       1) DSNAME.QUALIFIER    .JOURNAL\n*                       2) DSNAME.QUALIFIER    .ACTIVE\n*                       3) DSNAME.QUALIFIER    .DAILY.DYYYMMDD.THHMM\n*                       4) DSNAME.QUALIFIER    .ARCHIVE.DYYYMMDD.THHMM\n*        7)  FLAG BYTE  THE ADDRESS OF A FLAG BYTE USED FOR AS A\n*                       COMMUNICATION VEHICLE BETWEEN THIS ROUTINE\n*                       CALLERS.  INDICATORS ARE AS FOLLOWS:\n*                       X'01' CALLER IS FOR TSO (TPUTS WILL BE ISSUED)\n*                       X'02' REQUEST IS FOR JOB LIST\n*                       X'04' ALLOW AUTHORIZED MOUNT VIA DYNA-ALLOC\n*                             (USER IS AUTHORIZED)\n*        8)  DATE LIMIT IS THE DATE WHICH WILL BE USED FOR A LIST\n*                       OF JOBS THAT MATCH THE JOB NAME ABOVE.\n*                       FORMAT IS  \"MM\" , 'MM/DD' MM/DD/YYYY'\n*                       IT IS USED TO LIST JOBS RUN ON OR AFTER\n*                       THAT DATE. IF BLANK, ALL JOBS ARE LISTED\n*        9)  QUALIFIER  THE ADDRESS OF A FIELD UP TO 25 CHARACTERS IN\n*                       LENGTH (LEFT JUSTIFIED) WHICH CONTAINS THE OLD\n*                       SOUT JOURNAL DATASET QUALIFIER.  IT WILL BE\n*                       USED DURING THE CONVERSION FROM THE OLD SYSTEM.\n*                       FOR CONVERSION; AND IF YOU USED A DIFFERENT\n*                       QUALIFIER THAN #6 ABOVE, THIS QUALIFIER WILL\n*                       BE PREFIXED TO THE \"ARCHIVE.GNNNNVNN\" DATASET.\n*\n*        ATTRIBUTES: NOT REENTRANT\n*\n*        REGISTERS USED:\n*            R0 - WORK\n*            R1 - WORK\n*            R2 - FLAG REGISTER POINTER\n*            R3 - PARM LIST POINTER\n*            R4 - ------ CURRENT OUTPUT RECORD POINTER\n*            R5 - ------ CURRENT INPUT RECORD POINTER\n*            R6 - ------ BSAM RECORD MANAGMENT REGS\n*            R7 - ------ BSAM RECORD MANAGMENT REGS\n*            R8 - BAL REGISTER\n*            R9 - RETURN CODE (INITIALLY CLEARED)\n*           R10 - (1ST) PARM VALUE POINTER (THEN) SOUT DCB POINTER\n*           R11 - BASE\n*           R12 - BASE\n*           R13 - SAVE AREA\n*           R14 - WORK\n*           R15 - WORK\n*\n*        RETURN CODES:\n*             0 - NORMAL RETURN (REQUESTED JOB LOCATED AND COPIED)\n*             4 - JOB NOT FOUND WITHIN THE CONTEXT DEFINED\n*             8 - OPEN FAILURE FOR THE PASSED OUTPUT FILE\n*            12 - INVALID PARAMETER PASSED\n*            16 - DYNAMIC ALLOCATION FAILED FOR THE JOURNAL FILE\n*            20 - EXPANSION FAILED\n*            24 - JOURNAL FILE READ ERROR\n*            28 - OPEN FAILURE FOR THE JOURNAL FILE\n*            32 - OPEN FAILURE FOR THE INPUT SOUT FILE\n*            36 - DYNAMIC ALLOCATION FAILED FOR THE INPUT FILE\n*\n**********************************************************************\n         MEND\n         PRINT ON\n***********************************************************************\n*\n*        PROCESS INPUT PARM DATA AND PREPARE FOR DYNAMIC ALLOCATION\n*\n***********************************************************************\nSOUTSUB  $PROLOG R12,R11\n         SR    R9,R9              CLEAR RETCODE REG\n         LR    R3,R1              COPY PARM LIST ORIGIN\n         L     R2,24(R3)          ADDRESS OF USER FLAGS\n         USING FLAG,R2            ADDRESSABILTY\n         ICM   R10,15,0(R3)       GET JOBNAME POINTER\n         BZ    EXIT12             ERROR - NEED JOBNAME\n         CLI   0(R10),C' '        IS IT NULLS?\n         BE    EXIT12             ERROR - NEED JOBNAME\n         CLI   0(R10),X'00'       IS IT NULLS?\n         BE    EXIT12             ERROR - NEED JOBNAME\n         LA    R15,8              SET LOOP CONTROL\n         LR    R14,R10            COPY FIELD ADDRESS\nCHKSIZE0 CLI   0(R14),C' '        END OF FIELD?\n         BE    ENDSIZE0           YES, CONTINUE\n         CLI   0(R14),X'00'       END OF FIELD?\n         BE    ENDSIZE0           YES, CONTINUE\n         LA    R14,1(R14)         BUMP TO NEXT CHARACTER\n         BCT   R15,CHKSIZE0       CHECK NEXT CHARACTER\nENDSIZE0 SR    R14,R10            GET DIFFERENCE (FIELD SIZE)\n         BNP   EXIT12             ERROR IF NOT POSITIVE\n         LR    R1,R14             COPY SIZE OF ORIGIN DATA\n         BCTR  R1,R0              DECREMENT FOR EXECUTE\n         LA    R14,0(R10,R1)      ADDRESS OF LAST CHARACTER\n         CLI   0(R14),C'*'        LAST CHAR ASTERISK?\n         BNE   SKIPALL            YES, NOT AN 'ALL' REQUEST\n         BCTR  R1,R0              DECREMENT FOR EXECUTE\n         STH   R1,JOBNLEN         SAVE LENGTH FOR COMPARE\n         EX    R1,MVEJN           MOVE JOBNAME LESS *\n         AH    R1,=H'1'           BUMP UP 1 FOR MODCB\n         MODCB RPL=JOURNRPL,KEYLEN=(R1),OPTCD=(GEN)\n         B     SETJNSW\nMVEJN    MVC   FULLJN(0),0(R10)   MOVE JOBNAME(LESS *) TO VSAM KEY\nSKIPALL  MVC   FULLJN,0(R10)      MOVE 8 BYTE JOBNAME TO VSAM KEY\nSETJNSW  OI    OPT,JN             INDICATE JOB NAME SPECIFIED\n         TM    FLAG,LST           IS THIS LIST ONLY\n         BNZ   NOTIME             YES - BYPASS DATE AND TIME CHECK\n         ICM   R10,15,4(R3)       GET JOB NUMBER POINTER IF ANY\n         BZ    SKIPJOB#           NOT SPECIFIED, CONTINUE\n         CLI   0(R10),C' '        IS IT NULLS?\n         BE    SKIPJOB#           YES, NOT SPECIFIED\n         CLI   0(R10),X'00'       IS IT NULLS?\n         BE    SKIPJOB#           YES, NOT SPECIFIED\n         OI    OPT,J#             INDICATE JOB NUMBER SPECIFIED\n         LA    R15,5              SET LOOP CONTROL\n         LR    R14,R10            COPY FIELD ADDRESS\nCHKSIZE1 CLI   0(R14),C' '        END OF FIELD?\n         BE    ENDSIZE1           YES, CONTINUE\n         CLI   0(R14),X'00'       END OF FIELD?\n         BE    ENDSIZE1           YES, CONTINUE\n         LA    R14,1(R14)         BUMP TO NEXT CHARACTER\n         BCT   R15,CHKSIZE1       CHECK NEXT CHARACTER\nENDSIZE1 SR    R14,R10            GET DIFFERENCE (FIELD SIZE)\n         BNP   EXIT12             ERROR IF NOT POSITIVE\n         LR    R1,R14             COPY SIZE OF ORIGIN DATA\n         BCTR  R1,R0              DECREMENT FOR EXECUTE\n         LA    R14,JOBNUM(R15)    ADDRESS OF RECEIVING FIELD\n         LR    R15,R10            ADDRESS OF ORIGIN FIELD\n         EX    R1,MOVE            MOVE JOB NUMBER FIELD\n         MVC   FULLJ#,JOBNUM      MOVE JOBNUMBER TO VSAM KEY\nSKIPJOB# ICM   R10,15,8(R3)       GET DATE PARM IF ANY\n         BZ    NODATE             NONE PASSED, SKIP IT\n         CLI   0(R10),C' '        IS IT NULLS?\n         BE    NODATE             YES, NOT SPECIFIED\n         CLI   0(R10),X'00'       IS IT NULLS?\n         BE    NODATE             YES, NOT SPECIFIED\n         CLI   2(R10),C'/'        VALID SYNTAX?\n         BNE   EXIT12             NO, BAD PARM\n         CLI   5(R10),C'/'        VALID SYNTAX?\n         BNE   EXIT12             NO, BAD PARM\n         CLI   8(R10),C' '        VALID SYNTAX?\n         BE    EXIT12             NO, BAD PARM\n         MVC   SDATE(4),6(R10)        SAVE DATE FIELD\n         MVC   SDATE+4(2),0(R10)        SAVE DATE FIELD\n         MVC   SDATE+6(2),3(R10)        SAVE DATE FIELD\n         PACK  PACK5,SDATE          PACK DATE\n         ZAP   FULLDT,=P'099999999' SET UP FOR REVERSAL\n         SP    FULLDT,PACK5       REVERSE DATE FOR VSAM ORDER\n         OI    OPT,DT             INDICATE DATE OPTION SPECIFIED\nNODATE   ICM   R10,15,12(R3)      GET TIME PARM IF ANY\n         BZ    NOTIME             NONE PASSED, SKIP IT\n         CLI   0(R10),C' '        IS IT NULLS?\n         BE    NOTIME             YES, NOT SPECIFIED\n         CLI   0(R10),X'00'       IS IT NULLS?\n         BE    NOTIME             YES, NOT SPECIFIED\n         CLI   2(R10),C':'        VALID SYNTAX?\n         BNE   EXIT12             NO, BAD PARM\n         CLI   5(R10),C':'        VALID SYNTAX?\n         BNE   EXIT12             NO, BAD PARM\n         MVC   STIME(2),0(R10)        SAVE DATE FIELD\n         MVC   STIME+2(2),3(R10)        SAVE DATE FIELD\n         MVC   STIME+4(2),6(R10)        SAVE DATE FIELD\n         PACK  PACK4,STIME        PACK TIME\n         ZAP   FULLTM,=P'0999999' SETUP FOR TIME REVERSAL\n         SP    FULLTM,PACK4       REVERSE TIME FOR VSAM ORDER\n         OI    OPT,TM             INDICATE TIME OPTION SPECIFIED\nNOTIME   ICM   R10,15,16(R3)      ADDRESS OF DDNAME\n         BZ    EXIT12             NONE, ERROR\n         MVC   UTILDCB+DCBDDNAM-IHADCB(8),0(R10) MOVE DDNAME TO DCB\n         ICM   R10,15,20(R3)      ADDRESS OF DSNAME QUALIFIER\n         BZ    EXIT12             NONE, ERROR\n         LA    R15,21             SET LOOP CONTROL\n         LR    R14,R10            COPY FIELD ADDRESS\nCHKSIZE2 CLI   0(R14),C' '        END OF FIELD?\n         BE    ENDSIZE2           YES, CONTINUE\n         CLI   0(R14),X'00'       END OF FIELD?\n         BE    ENDSIZE2           YES, CONTINUE\n         LA    R14,1(R14)         BUMP TO NEXT CHARACTER\n         BCT   R15,CHKSIZE2       CHECK NEXT CHARACTER\nENDSIZE2 SR    R14,R10            GET DIFFERENCE (FIELD SIZE)\n         BNP   EXIT12             ERROR IF NOT POSITIVE\n         ST    R14,SUFFIXLN       SAVE LENGTH FOR LATER UPDATE\n         LR    R1,R14             COPY SIZE OF QUALIFER\n         BCTR  R1,R0              DECREMENT FOR EXECUTE\n         LA    R14,JRNDSN         ADDRESS OF RECEIVING FIELD\n         LR    R15,R10            ADDRESS OF ORIGIN FIELD\n         EX    R1,MOVE            MOVE QUALIFIER FOR DYNALLOC\n         LA    R14,1(R1,R14)      END OF QUALIFIER\n         ST    R14,SUFFIXAD       SAVE ADDRESS OF SUFFIX\n         MVC   0(8,R14),=CL8'.JOURNAL' ADD SUFFIX\n         L     R0,SUFFIXLN        GET LENGTH OF SUFFIX\n         AH    R0,=H'8'           ADD LENGTH OF '.JOURNAL' SUFFIX\n         STH   R0,JRNDSNL         SAVE FOR DYNALLOC\n*\n         ZAP   DATELIM,=P'099999999' SETUP TIME LIMIT\n         TM    FLAG,LST           ARE WE DOING LIST?\n         BZ    NODATELM           NO - BYPASS DATE LIMIT\n         ICM   R10,15,28(R3)      GET DATE LIMIT PARM IF ANY\n         BZ    NODATELM           NONE PASSED, SKIP IT\n         CLI   0(R10),C' '        IS IT NULLS?\n         BE    NODATELM           NONE PASSED,\n         CLI   0(R10),X'00'       IS IT NULLS?\n         BE    NODATELM           YES, NOT SPECIFIED\n         CLI   2(R10),C' '        VALID SYNTAX?\n         BE    MONLY              YES - MONTH ONLY\n         CLI   2(R10),C'/'        VALID SYNTAX?\n         BNE   EXIT12             NO, BAD PARM\nMONLY    MVC   HDATEL+4(2),0(R10) MOVE IN MONTH\n         CLI   3(R10),C' '        IS DAY SPECIFIED?\n         BE    NODAYL             NO - SET DEFAULT\n         MVC   HDATEL+6(2),3(R10) MOVE IN DAY\n         B     YRLIM\nNODAYL   MVC   HDATEL+6(2),=C'00' SET DAY TO ZERO\nYRLIM    EQU   *\n         CLI   6(R10),C' '        IS YEAR SPECIFIED?\n         BE    HOLEYR             NO - NEED WHOLE YEAR\n         CLI   8(R10),C' '        IS IT FULL YEAR \"YYYY\"\n         BE    PARTYR             NO - ONLY LAST 2\n         MVC   HDATEL(4),6(R10)   MOVE IN FULL YEAR\n         B     CVTDATE            BR TO PACK IT\nPARTYR   MVC   HDATEL+2(2),6(R10) MOVE IN LAST 2\n         MVC   HDATEL(2),=C'19'   SET \"1900\" DEFAULT\n         CLC   6(2,R10),=C'75'    BEFORE 1975\n         BH    CVTDATE            YES - GO TO CONVERT\n         MVC   HDATEL(2),=C'20'   MUST BE YEAR 2000\n         B     CVTDATE            GO TO CONVERT\nHOLEYR   $STCK\n         MVC   HDATEL(4),YEARDATE MOVE IN GOTTEN FULL YEAR\nCVTDATE  PACK  PACK5,HDATEL       PACK IT\n         ZAP   DATELIM,=P'099999999' SET UP FOR REVERSAL\n         SP    DATELIM,PACK5      REVERSE DATE LIMIT FOR VSAM ORDER\nNODATELM EQU   *\n         TM    FLAG,LST           DOING LIST?\n         BNZ   CHECKJRN           YES - PROCESS JOURNAL\n         TM    OPT,JN+J#+DT+TM    HAVE FULL KEY\n         BM    CHECKJRN           NO - GENERIC SEARCH REQUIRED\nFULKEY   LA    R1,=F'22'          FULL KEY OF 22 BYTES\n         MODCB RPL=JOURNRPL,OPTCD=(FKS)  ALTER RPL\n*\n         EJECT\n***********************************************************************\n*\n*        DYNAMICALLY ALLOCATE THE VSAM JOURNAL FILE\n*        AND SEARCH FOR THE JOB AS QUALIFIED.\n*\n***********************************************************************\nCHECKJRN LA    R1,DAJOURN         GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE JOURNAL FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   EXIT16             NO - ERROR\nOPENJRN  LA    R10,JOURNACB       SET UP ADDRESSING\n         USING IFGACB,R10\n         MVC   ACBDDNM,JRNDDN      MOVE DDNAME\n         OPEN  (JOURNACB)         OPEN THE JOURNAL ACB\n         LTR   R15,R15            DID IT OPEN?\n         BNZ   EXIT28             INDICATE OPEN FAILURE\nFRSTJRN  GET   RPL=JOURNRPL       GET JOURNAL RECORD\n         LTR   R15,R15            RETURN CODE 0 FROM VSAM\n         BZ    MODRPL             YES MODCB THE RPL\n         B     CHKEOF             GO CHECK EOF\nMODRPL   MODCB RPL=JOURNRPL,OPTCD=SEQ   HAVE POSITION -SEQ AFTER THIS\n         B     CKJOB              GO CHECK IF JOBNAME MATCHES\nNEXTJRN  GET   RPL=JOURNRPL       GET NEXT JOURNAL RECORD\n         LTR   R15,R15            RC = 0\n         BZ    CKJOB              GO CHECK JOBNAME\n*        SHOWCB RPL=JOURNRPL,AREA=FDBAREA,FIELDS=FDBK,LENGTH=4\nCHKEOF   C     R15,=F'8'          EOF\n         BE    ENDJOURN           YES- BR TO END PRCOCESSING\n         B     EXIT24             MAJOR VSAM ERROR\nCKJOB    LH    R15,JOBNLEN        GET LENGTH OF NAME\n         EX    R15,COMPJN         IS THIS A CANDIDATE?\n         BNE   ENDJOURN           NO, END JOURNAL SEARCH\n         B     CHKOPT             CHECK DATE LIMIT\nCOMPJN   CLC   JOURNJN(0),FULLJN  IS THIS A CANDIDATE?\nCHKOPT   TM    FLAG,LST           IS THIS LIST REQUEST?\n         BZ    NORMAL             NO, CONTINUE\nCHKDATE  CP    DATELIM,JOURNDT    IS IT WITHIN DATE LIMIT\n         BL    NEXTJRN            NO - GET NEXT\nSETFIND  OI    OPT,FND            INDICATE DATA FOUND\n         MVC   LISTJN,JOURNJN     MOVE IN JOBNAME\n*\n         MVC   PACK5,=P'099999999' SETUP FOR UNPACKING DATE\n         SP    PACK5,JOURNDT      REVERSE DATE\n         UNPK  UNPKAREA,PACK5      UNPACK DATE\n         OI    UNPKAREA+8,X'F0'    CHANGE LAST BYTE\n         MVC   LISTDATE(2),UNPKAREA+5 MOVE IN MONTH\n         MVI   LISTDATE+2,C'/'\n         MVC   LISTDATE+3(2),UNPKAREA+7 MOVE IN DAY\n         MVI   LISTDATE+5,C'/'\n         MVC   LISTDATE+6(4),UNPKAREA+1 MOVE IN FULL YEAR\n*\n         MVC   PACK4,=P'0999999' SETUP FOR UNPACKING TIME\n         SP    PACK4,JOURNTM      REVERSE TIME\n         UNPK  UNPKAREA,PACK4     UNPACK TIME\n         OI    UNPKAREA+8,X'F0'   CHANGE LAST BYTE\n         MVC   LISTTIME(2),UNPKAREA+3 MOVE IN HOURS\n         MVI   LISTTIME+2,C':'\n         MVC   LISTTIME+3(2),UNPKAREA+5 MOVE IN MINUTES\n         MVI   LISTTIME+5,C':'\n         MVC   LISTTIME+6(2),UNPKAREA+7 MOVE IN SECONDS\n*\n         MVC   LISTJT,JOURNJT     MOVE IN JOB TYPE (STC JOB TSU)\n         MVC   LISTJ#,JOURNJ#     MOVE IN NUMBER\n         MVC   LISTMC,JOURNMC     MOVE IN MSGCLASS\n*\n         LA    R14,DAYTABLE       R14 TO DAYTABLE\nDAYLOOP  CLI   0(R14),X'FF'       IS IT END\n         BE    MOVEDAY            DONE\n         CLC   JOURNDAY(1),0(R14) DOES DAY MATCH\n         BE    MOVEDAY            YES - CONVERT\n         LA    R14,4(R14)         BUMP R14\n         B     DAYLOOP            TRY AGAIN\nMOVEDAY  MVC   LISTDAY,1(R14)     MOVE IN WHAT DAT (MON TUE ETC.)\n*\n         MVC   LISTLINE,LINEPAT   SET UP LINE COUNT PATTERN\n         EDMK  LISTLINE,JOURNLIN  CONVERT LINE COUNT\n         CLI   LISTLINE+9,C' '    ARE THERE LINES?\n         BNE   MOVEDEVT           YES - OK\n         MVI   LISTLINE+9,C'?'    PUT IN ? - ACTIVE OR OLD FILES\n*\nMOVEDEVT CLI   JOURNDEV,C'T'      IS DEVICE TAPE\n         BE    LISTAPE            YES - BR\n         MVC   LISTDEVT,=C'ONLINE' MUST BE ONLINE (DISK)\n         B     LISTREST\nLISTAPE  MVC   LISTDEVT,=C'TAPE  ' SET TO TAPE\nLISTREST MVC   LISTADR,JOURNADR   MOVE IN ACTIVE DAILY SW\n         MVC   LISTSTP,=CL15' '   CLEAR IT\n         MVC   HSTAMP,STPATRN     MOVE IN PATTERN\n         EDMK  HSTAMP,JOURNSTP    UNPACK DATE/TIME STAMP\n         CLC   HSTAMP+1(11),HIGH9 IS IT HIGH VALUES\n         BE    WRITELA            MUST BE ACTIVE\n         CLC   HSTAMP+1(5),HIGH9    IS IT HIGH VALUES\n         BE    ITSGDG\n         MVC   LISTSTP(2),=C'.D'  MOVE IN CONSTANT\n         MVC   LISTSTP+2(7),HSTAMP+1 MOVE IN DATE\n         MVC   LISTSTP+9(2),=C'.T'  MOVE IN CONSTANT\n         MVC   LISTSTP+11(4),HSTAMP+8 MOVE IN TIME\n         B     WRITELA\nITSGDG   MVC   LISTSTP(2),=C'.G'  MOVE IN CONSTANT\n         MVC   LISTSTP+2(4),HSTAMP+6 MOVE IN GDG\n         MVC   LISTSTP+6(1),=C'V'  MOVE IN CONSTANT\n         MVC   LISTSTP+7(2),HSTAMP+10 MOVE IN VERSION\n*\nWRITELA  EQU   *\n         LA    R4,LISTREC         ADDRESS OF RECORD\n         BAL   R8,PUTUTIL         WRITE RECORD\n         B     NEXTJRN            GET NEXT RECORD\nNORMAL   TM    OPT,JN+J#+DT+TM    FULL KEY SPECIFIED\n         BO    SETFND             YES - FOUND REC\n         CLC   JOURNJN,FULLJN     IS THIS A CANDIDATE?\n         BNE   NEXTJRN            NO, SKIP TO NEXT JOURNAL RECORD\nCOMPDT   TM    OPT,DT             IS JOB DATE ACTIVE ????\n         BZ    COMPTM             NO, CHECK TIME\n         CP    JOURNDT,FULLDT     DATE MATCHES ????\n         BNE   NEXTJRN            NO, SKIP TO NEXT JOURNAL RECORD\nCOMPTM   TM    OPT,TM             IS JOB TIME ACTIVE ????\n         BZ    COMPJ#             NO, CHECK JOB NUMBER\n         CP    JOURNTM,FULLTM     TIME MATCHES ???\n         BNE   NEXTJRN            NO, SKIP TO NEXT JOURNAL RECORD\nCOMPJ#   TM    OPT,J#             IS JOBNUM QUALIFIACTION ACTIVE?\n         BZ    SETFND             NO, ASSUME MATCH\n         CLC   JOURNJ#,JOBNUM     IS THIS THE RIGHT ONE?\n         BNE   NEXTJRN            NO, SKIP TO NEXT JOURNAL RECORD\nSETFND   OI    OPT,FND            INDICATE MATCH SATISFIED\nENDJOURN CLOSE (JOURNACB)         CLOSE JOURNAL FILE\nSKIPALOC TM    FLAG,LST           IS THIS A LIST REQUEST?\n         BZ    NOTLIST            NO, SKIP LIST PROCESSING\n         B     NOTFND             IS THIS A LIST FOR ALL JOURNALS\nNOTLIST  TM    OPT,FND            WAS A MATCH FOUND?\n         BO    PROCESS            YES, PROCESS SYSOUT DATASET\n         B     NOTFND             SEARCH ARCHIVE (NOT FOUND)\n         EJECT\n***********************************************************************\n*\n*        DYNAMICALLY ALLOCATE THE REQUIRED SYSOUT DATASET\n*        AND SEARCH/COPY THE JOB AS DEFINED IN THE JOURNAL\n*\n***********************************************************************\n*\nPROCESS  MVC   PACK5,=P'099999999' SETUP FOR UNPACKING DATE\n         SP    PACK5,JOURNDT      REVERSE DATE\n         UNPK  UNPKAREA,PACK5      UNPACK DATE\n         OI    UNPKAREA+8,X'F0'    NUMERIC LAST BYTE\n         MVC   LISTDATE(2),UNPKAREA+5 SET UP\n         MVI   LISTDATE+2,C'/'             DATE\n         MVC   LISTDATE+3(2),UNPKAREA+7       FOR\n         MVI   LISTDATE+5,C'/'                   LIST TO BE PASSED\n         MVC   LISTDATE+6(2),UNPKAREA+3            TO ISPF\n*\n         MVC   PACK4,=P'0999999' SETUP FOR UNPACKING DATE\n         SP    PACK4,JOURNTM      REVERSE DATE\n         UNPK  UNPKAREA,PACK4     UNPACK TIME\n         OI    UNPKAREA+8,X'F0'\n         MVC   LISTTIME(2),UNPKAREA+3  SET UP\n         MVI   LISTTIME+2,C':'              TIME\n         MVC   LISTTIME+3(2),UNPKAREA+5        TO BE PASSED\n         MVI   LISTTIME+5,C':'                     TO\n         MVC   LISTTIME+6(2),UNPKAREA+7             ISPF\n         CLI   JOURNADR,C'O'      IS DATA FROM OLD SYSTEM\n         BE    OLDDATA            YES - NEED OLF QUALIFIER\n         ICM   R10,15,20(R3)      ADDRESS OF NEW DSN PREFIX\n         LA    R15,21             MAX LENGTH OF NEW\n         B     DATANM\nOLDDATA  ICM   R10,15,32(R3)      ADDRESS OF OLD DSN PREFIX\n         BZ    EXIT12             NONE ERROR\n         LA    R15,25             MAX LENGTH OF OLD\nDATANM   LR    R14,R10            COPY FIELD ADDRESS\nCHKSIZE3 CLI   0(R14),C' '        END OF FIELD?\n         BE    ENDSIZE3           YES, CONTINUE\n         CLI   0(R14),X'00'       END OF FIELD?\n         BE    ENDSIZE3           YES, CONTINUE\n         LA    R14,1(R14)         BUMP TO NEXT CHARACTER\n         BCT   R15,CHKSIZE3       CHECK NEXT CHARACTER\nENDSIZE3 SR    R14,R10            GET DIFFERENCE (FIELD SIZE)\n         BNP   EXIT12             ERROR IF NOT POSITIVE\n         ST    R14,DATASUFL       SAVE LENGTH FOR LATER UPDATE\n         LR    R1,R14             COPY SIZE OF QUALIFER\n         BCTR  R1,R0              DECREMENT FOR EXECUTE\n         LA    R14,SOUTDSN        ADDRESS OF RECEIVING FIELD\n         LR    R15,R10            ADDRESS OF ORIGIN FIELD\n         EX    R1,MOVE            MOVE QUALIFIER FOR DYNALLOC\n         LA    R14,1(R1,R14)      END OF QUALIFIER\n         ST    R14,DATASUFA       SAVE ADDRESS OF SUFFIX\n         CLI   JOURNADR,C'A'      IS THIS ACTIVE FILE\n         BE    MVEACT\n         CLI   JOURNADR,C'D'      IS THIS DAILY FILE\n         BE    MVEDAILY\n         CLI   JOURNADR,C'R'      IS THIS ARCHIVE FILE\n         BE    MVEARCH\n         B     MVEARCH            ##### - OLD=ARCHIVE\n*        B     MVEDAILY           ##### - OLD=DAILY\nMVEARCH  MVC   0(8,R14),=CL8'.ARCHIVE' ADD SUFFIX\n         L     R0,DATASUFL        GET LENGTH OF SUFFIX\n         AH    R0,=H'8'           ADD LENGTH OF '.ARCHIVE' SUFFIX\n         LA    R14,8(R14)         BUMP R14\n         B     CHKGDG\nMVEACT   MVC   0(7,R14),=CL7'.ACTIVE' ADD SUFFIX\n         L     R0,DATASUFL        GET LENGTH OF SUFFIX\n         AH    R0,=H'7'           ADD LENGTH OF '.ACTIVE' SUFFIX\n         LA    R14,7(R14)         BUMP R14\n         B     CHKGDG\nMVEDAILY MVC   0(6,R14),=CL6'.DAILY' ADD SUFFIX\n         L     R0,DATASUFL        GET LENGTH OF SUFFIX\n         AH    R0,=H'6'           ADD LENGTH OF '.DAILY' SUFFIX\n         LA    R14,6(R14)         BUMP R14\n         B     CHKGDG\nCHKGDG   MVC   HSTAMP,STPATRN     MOVE IN PATTERN\n         EDMK  HSTAMP,JOURNSTP    UNPACK DATE/TIME STAMP\n         CLC   HSTAMP+1(11),HIGH9 IS IT HIGH VALUES\n         BE    STLEN              MUST BE ACTIVE\n         CLC   HSTAMP+1(5),HIGH9    IS IT HIGH VALUES\n         BE    MVEOGDG\n         MVC   0(2,R14),=C'.D'    MOVE IN CONSTANT\n         MVC   2(7,R14),HSTAMP+1  MOVE IN DATE\n         MVC   9(2,R14),=C'.T'    MOVE IN CONSTANT\n         MVC   11(4,R14),HSTAMP+8 MOVE IN TIME\n         AH    R0,=H'15'          ADD LENGTH OF DATE/TIME STAMP\n         B     STLEN\nMVEOGDG  MVC   0(2,R14),=C'.G'  MOVE IN CONSTANT\n         MVC   2(4,R14),HSTAMP+6 MOVE IN GDG\n         MVC   6(1,R14),=C'V'  MOVE IN CONSTANT\n         MVC   7(2,R14),HSTAMP+10 MOVE IN VERSION\n         AH    R0,=H'9'           ADD LENGTH OF '.G0000V00' SUFFIX\nSTLEN    STH   R0,SOUTDSNL        SAVE FOR DYNALLOC\n*\n         TM    FLAG,AUTH          SHOULD WE REQUEST AUTHORIZED MOUNT\n         BNO   CHKTSO             NO, CONTINUE\n         OI    SOUTFLGS,X'01'     ALLOW TAPE MOUNT FOR SYSOUT DATASET\n*                                 (MUST BE AUTHORIZED FOR THIS OPT)\n         TM    FLAG,TSO           ARE WE TSO?\n         BO    CHKTAPE            YES, BYPASS \"WAIT\" REQUEST\n         OI    SOUTFLGS,X'D0'     ALLOW WAIT FOR TAPE/DEVICE\n         B     NOMSG1             BR AROUND MESSAGES\nCHKTSO   EQU   *\n         TM    FLAG,TSO           ARE WE TSO\n         BNO   NOMSG1             NO, BR AROUND MESSAGES\nCHKTAPE  CLI   JOURNDEV,C'T'      IS THIS A TAPE DATASET\n         BNE   NOMSG1             NO, MUST BE DISK DATA SET\n         TPUT  WAITMSG,27         INFORM THE USER (MIGHT BE TAPE)\n         TPUT  SOUTDSN,44         ALSO THE DSNAME\n         TPUT  MOUNTMSG,30        ALSO THE DSNAME\nNOMSG1   LA    R1,DASOUT          GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE SYSOUT DATASET (ACTIVE/ARCH)\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   EXIT36             NO, ERROR RETURN\n         TM    FLAG,TSO           ARE WE INTO THE ARCHIVE FOR TSO USER?\n         BNO   NOMSG2             NO, NORMAL ALLOCATION\n         CLI   JOURNDEV,C'T'      IS THIS A TAPE DATASET\n         BNE   NOMSG2             NO, MUST BE DISK DATA SET\n         TPUT  SRCHMSG,25         INFORM THE USER (MIGHT BE LONG)\nNOMSG2   LA    R10,BSAMDCB        ASSUME BSAM ACCESS\n         USING IHADCB,R10         INFORM THE ASSEMBLER\n         CLC   JOURNTTR,=X'000000' IS THIS ZERO TTR? TAPE OR FIRST\n*                                  FILE ON DISK DATASET\n         BNE   USEBSAM            NO, THEN USE BSAM\n         LA    R10,QSAMDCB        USE QSAM ACCESS FOR ARCHIVES\nUSEBSAM  MVC   DCBDDNAM,SOUTDDN   MOVE DDNAME\nNEXTSOUT BAL   R8,GETSOUT         GET SYSOUT RECORD\n         USING RECORD,R5          INFORM ASSEMBLER OF DSECT\n         TM    FIXVAR,FIXREC      FIXED LENGTH RECORD\n         BNZ   CHKSEP1            YES- BR\n         CLI   1(R5),X'89'        IS THIS A FULL RECORD SIZE\n         BE    BUMPR5             YES - GO CHECK FOR SEPERATOR\n         LA    R5,4(R5)           BUMP PAST PREFIX 4 BYTES\n         B     NEXTSOUT           GET THE NEXT RECORD\nBUMPR5   LA    R5,4(R5)           BUMP PAST PREFIX 4 BYTES\nCHKSEP1  CLI   RECLIT,C'S'        COULD THIS BE SEPARATOR RECORD?\n         BNE   NEXTSOUT           NO, SKIP RECORD\n         CLC   RECLIT(24),SEP     COMPARE FOR SEPARATOR RECORD\n         BNE   NEXTSOUT           NO, SKIP RECORD\n         CLI   JOURNADR,C'A'      READING ACTIVE ???\n         BNE   CHKSEP1A           NO - BYPASS PAD RECORD CHECK\n         CLC   RECLIT+24(3),PADDING FOUND PAD RECORD FROM FORMAT\n         BE    LASTBLK            YES - WARN THE REQUESTOR\n*                                 NOT ALL DATA WRITTEN YET !!!!!\n*\nCHKSEP1A TM    DEVT@@@@,DEVT3480  ON 3480 TAPE\n         BZ    CHKSEP1B\n         TM    DEVT@@@@,MSG3480\n         BO    CHKSEP1B\n         MSGDISP RDY,DCB=(R10),TXT='LOCATE'\n         OI    DEVT@@@@,MSG3480\nCHKSEP1B CLC   RECJNAME,JOURNJN    JOBNAME MATCHES\n         BNE   NEXTSOUT           NO, SKIP RECORD\n         CLC   RECDATE,LISTDATE   DATE MATCHES\n         BNE   NEXTSOUT           NO, SKIP RECORD\n         CLC   RECTIME,LISTTIME TIME MATCHES\n         BNE   NEXTSOUT           NO, SKIP RECORD\n         CLC   RECJNUM+3(5),JOURNJ# JOB NUMBER MATCHES\n         BNE   NEXTSOUT           NO, SKIP RECORD\n         TM    DEVT@@@@,DEVT3480  ON 3480 TAPE\n         BZ    CHKSEP1C\n         MSGDISP RDY,DCB=(R10),TXT='GOT-IT'\nCHKSEP1C MVC   NEWSEP2(53),34(R5) MOVE SEPARATOR DATA TO NEWSEP\n         LA    R4,NEWSEP1         ADDRESS OF DUMMY SEP RECORD\n         BAL   R8,PUTUTIL         WRITE RECORD OUT\n         BAL   R8,GETSOUT         GET RECORD FOLLOWING 1ST SEPARATOR\n         TM    FIXVAR,FIXREC      FIXED LENGTH RECORD\n         BNZ   CHKSEP2            YES- BR\n         LA    R5,4(R5)           BUMP PAST 4 BYTE PREFIX\nCHKSEP2  CLC   RECLIT(24),SEP     COMPARE FOR SEPARATOR RECORD\n         BNE   COPY               NO, CONTINUE\n         BAL   R8,GETSOUT         SKIP 2ND SEP (RECFM 'M')\n         TM    FIXVAR,FIXREC      FIXED LENGTH RECORD\n         BNZ   COPY               YES - BR\n         LA    R5,4(R5)           BUMP PAST 4 BYTE PREFIX\nCOPY     EQU   *\n         TM    FIXVAR,FIXREC      FIXED LENGTH RECORD\n         BNZ   COPY2              YES- BR\n         ICM   R15,15,COMPADDR    IS THERE A DE-COMPREESION ROUTINE\n         BZ    COPY2              NO - BR AROUND\n         SH    R5,=H'4'           GET TO BEGINNING OF RECORD\n         MVC   CPRTYPE,=X'00000000' SET TO DECOMPRESS\n         MVC   MAXLEN,=H'133'     MAX LENGTH FOR EXPAND\n         ST    R5,CP2             ADDR OF INPUT RECORD\n         LA    R5,4(R5)           BUMP PAST PREFIX\n         LA    R1,PARMCPR         R1 = DECOMPRESS PARMS\n         BALR  R14,R15            LINK TO DECOMPRESSION\n         LTR   R15,R15            DECOMPRESSION OK\n         BZ    COPY1              OK - CONTINUE\n         B     COPY2              WRITE RECORD AS IS!\nCOPY1    LA    R4,UNCOMREC        R4 = DECOMPRESSED RECORD\n         LA    R4,4(R4)           BUMP PAST 4 BYTE PREFIX\n         B     COPY3              WRITE IT\nCOPY2    LR    R4,R5              COPY RECORD POINTER\nCOPY3    BAL   R8,PUTUTIL         COPY OUTPUT RECORD\n         BAL   R8,GETSOUT         NEXT RECORD\n         TM    FIXVAR,FIXREC      FIXED LENGTH RECORD\n         BNZ   CHKSEP3            YES - BR\n         LA    R5,4(R5)           BUMP PAST PREFIX\nCHKSEP3  CLI   RECLIT,C'S'        COULD THIS BE SEPARATOR RECORD?\n         BNE   COPY               NO, COPY RECORD\n         CLC   RECLIT(24),SEP     COMPARE FOR SEPARATOR RECORD\n         BNE   COPY               NO, COPY RECORD\n         CLI   JOURNADR,C'A'      READING ACTIVE ???\n         BNE   CLOSEM             NO - GOT ALL THE DATA - CLOSE\n         CLC   RECLIT+24(3),PADDING FOUND PAD RECORD FROM FORMAT\n         BNE   CLOSEM             NO - GOT ALL THE DATA - CLOSE\n         DROP  R5\n*\nLASTBLK  LA    R4,BLANKS          PUT OUT WARNING OF MISSING DATA\n         BAL   R8,PUTUTIL         WRITE IT OUT\n         LA    R4,NEEDLB          PUT OUT WARNING OF MISSING DATA\n         BAL   R8,PUTUTIL         WRITE IT OUT\n         B     CLOSEM             CLOSE THE FILES\n*\nNOTFND   TM    FLAG,LST           IS THIS LIST REQUEST?\n         BZ    EXIT4              NO, MUST BE NORMAL SEARCH\n         TM    OPT,FND            WAS ONE FOUND\n         BO    CLOSEM             YES, THEN NORMAL COMPLETION\n         B     EXIT4              NO, NOT FOUND MESSAGE\nEXIT36   LA    R9,4(R9)           BUMP RETCODE\nEXIT32   LA    R9,4(R9)           BUMP RETCODE\nEXIT28   LA    R9,4(R9)           BUMP RETCODE\nEXIT24   LA    R9,4(R9)           BUMP RETCODE\nEXIT20   LA    R9,4(R9)           BUMP RETCODE\nEXIT16   LA    R9,4(R9)           BUMP RETCODE\nEXIT12   LA    R9,4(R9)           BUMP RETCODE\nEXIT8    LA    R9,4(R9)           BUMP RETCODE\nEXIT4    LA    R9,4(R9)           BUMP RETCODE\n         TM    FLAG,TSO           IS THIS TSO ENVIRONMENT?\n         BZ    FILLWTO            NO, MUST BE BATCH\n         B     EXIT               ALL DONE\nFILLWTO  L     R15,MSGTAB(R9)     USE RETCODE AS OFFSET TO MSG ADDRESS\n         MVC   WTO+8(50),0(R15)   MOVE DATA FOR WTP\nWTO      WTO   '                                                       *\n                                ',ROUTCDE=11\nCLOSEM   CLOSE (BSAMDCB,,QSAMDCB,,UTILDCB) INSURE DCBS ARE CLOSED\n         ICM   R1,15,BUFFER       BUFFER ADDRESS TO FREE\n         BZ    DELCPR             SKIP FREEMAIN\n         FREEMAIN R,LV=32760,A=(1) FREE BSAM BUFFER\nDELCPR   ICM   R1,15,COMPADDR     RESTORE COMPRESSION ADDR\n         BZ    EXIT               NO COMPRESION ROUTINE - GET OUT\n         DELETE EP=SOUTCPR        DELETE COMPRESSION SUBROUTINE\nEXIT     EQU   *\n         LR    R15,R9             SET RETURN CODE\n         $EPILOG ,                RETURN TO CALLER\n*\nGETSOUT  TM    DCBOFLGS,X'10'     IS OUTPUT FILE OPENED YET?\n         BO    SKIPOPEN           YES, CONTINUE\n         OPEN  ((10),(INPUT))     OPEN THE SYSOUT INPUT FILE\n         TM    DCBOFLGS,X'10'     DID IT OPEN?\n         BZ    EXIT32             INDICATE OPEN FAILURE\n         MVC   DEVTDD,SOUTDDN     SAVE DDNAME FOR DEVTYPE MACRO\n         MVI   DEVT@@@@,X'00'     TURN OFF 3480 BITS\n         DEVTYPE DEVTDD,DEVTAREA  GET THE DEVICE TYPE\n         CLC   DEVTUCB,D3480FF    ON 3480 FULL FUNC\n         BE    ON3480             YES - TURN ON SW\n         CLC   DEVTUCB,D3480CP    ON 3480 COMPAT. MODE\n         BNE   NOT3480            NO - BYPASS\nON3480   OI    DEVT@@@@,DEVT3480  TURN ON 3480 BIT\nNOT3480  TM    DCBRECFM,X'80'     IS IT A VARIABLE RECORD\n         BZ    VARI               YES - VARIABLE REC\n         OI    FIXVAR,FIXREC      TURN ON FIXED SW\n         B     CHKTTR\nVARI     OI    FIXVAR,VARREC      TURN  ON VARIABLE SW\n         BLDL  0,BLDLCOMP         ISSUE BLDL FOR COMPRESSION\n         LTR   R15,R15            DOES IT EXIST\n         BNZ   CHKTTR\n         LOAD  EP=SOUTCPR         COMPRESSION SUBROUTINE\n         ST    R0,COMPADDR        SAVE ADDR\n         B     CHKTTR\n*        MVC   UTILDCB+36(1),DCBRECFM COPY INPUT FILE RECFM\nCHKTTR   CLC   JOURNTTR,=X'000000' IS THIS ZERO TTR?\n         BE    GETQSAM            NO, USE QSAM\n         GETMAIN R,LV=32760       GET A BUFFER FOR BSAM READS\n         ST    R1,BUFFER          SAVE FOR LATER\n         MVC   TTR(3),JOURNTTR    MOVE SAVED TTR FOR POINT\n         CLC   TTR(3),=X'000000'  IS THIS ZERO TTR?\n         BE    NEXTBLK            YES, SKIP POINT\n         POINT BSAMDCB,TTR        UPDATE TO RELATIVE RECORD\n         B     NEXTBLK            READ FIRST BLOCK\nSKIPOPEN CLC   JOURNTTR,=X'000000' IS THIS ZERO TTR?\n         BNE   NEXTREC            YES, PROCESS BSAM DCB\nGETQSAM  GET   QSAMDCB            GET QSAM RECORD FROM ARCHIVE\n         LR    R5,R1              COPY RECORD TO REC REG\n         BR    R8                 RETURN TO CALLER\nNEXTREC  EQU   *                  BUMP TO NEXT REC IN BLOCK\n         TM    FIXVAR,FIXREC      FIXED LENGTH RECORD\n         BNZ   NEXTRECF           YES- BR\n         SH    R5,=H'4'           BUMP BACK TO BEGINNING OF RECORD\n         AR    R5,R6              ADD LENGTH\n         CR    R5,R7              PAST END OF BLOCK\n         BNL   NEXTBLK            YES- READ NEXT BLK\n         LH    R6,0(R5)           SET R6 TO NEXT VAR RECORD LEN\n         B     PASSREC           BUMP TO NEXT REC IN BLOCK\n*\nNEXTRECF BXLE  R5,R6,PASSREC      BUMP TO NEXT REC IN BLOCK\n*\nNEXTBLK  L     R5,BUFFER          ADDR OF BUFFER\n         READ  READDECB,SF,BSAMDCB,(R5),'S' READ SYSOUT BLOCK\n         CHECK READDECB           WAIT FOR COMPLETION\n         TM    FIXVAR,FIXREC      FIXED LENGTH RECORD\n         BNZ   FIXBLK             YES - BR\n         LH    R7,0(R5)           R7 = VAR BLKSIZE\n         LA    R7,0(R7,R5)        R7 = END OF BLOCK\n         LA    R5,4(R5)           BUMP PAST BLK LENGTH\n         LH    R6,0(R5)           R6 = FIRST VAR RECORD LENGTH\n         B     PASSREC            BRANCH\nFIXBLK   LH    R6,DCBLRECL        LRECL\n         LH    R7,DCBBLKSI        BLOCK SIZE\n         LA    R7,0(R7,R5)        END OF FULL BLOCK\n         L     R1,READDECB+16     ADDR OF IOB\n         LH    R1,14(R1)          RESIDUAL COUNT FOR SHORT BLOCK\n         SR    R7,R1              ADJUSTED BLOCK LENGTH\n         SR    R7,R6              DECR TO BEGINNING OF LAST RECORD\n         B     PASSREC\nPASSREC  BR    R8                 PASS RECORD TO CALLER (R5====>LREC)\n*\nPUTUTIL  TM    UTILDCB+48,X'10'   IS OUTPUT FILE OPENED YET?\n         BO    UTILOPEN           YES, CONTINUE\n         OPEN  (UTILDCB,(OUTPUT)) OPEN THE UTILITY OUTPUT DCB\n         TM    UTILDCB+48,X'10'   DID IT OPEN?\n         BZ    EXIT8              INDICATE OPEN FAILURE\nUTILOPEN PUT   UTILDCB,(R4)       COPY OUTPUT RECORD\n         BR    R8                 RETURN TO CALLER\nMOVE     MVC   0(0,R14),0(R15)    MOVE DATA VIA EXECUTE\n         EJECT\n         USING *,R15\nSYNAD    OI    SWITCH,IOERR       INDICATE I/O ERROR\n         BR    R14\n         DROP  R15\n***********************************************************************\n*\n*        CONSTANTS AND UTILITY AREAS\n*\n***********************************************************************\n         DS    0D\nPACK5    DC    PL5'0'\nPACK4    DC    PL4'0'\nDATELIM  DC    PL5'0'\nHDATEL   DC    CL8' '\nUNPKAREA DC    CL9' '\nHSTAMP   DC    CL12' '\nHIGH9    DC    CL11'99999999999'\nSTPATRN  DC    XL12'402120202020202020202020'\nLINEPAT  DC    XL10'40206B2020206B202020'\nFULLKEY  DS    0CL22              FULL KEY FOR SEARCH\nFULLJN   DC    CL8' '\nFULLDT   DC    PL5'0'\nFULLTM   DC    PL4'0'\nFULLJ#   DC    CL5' '\nSDATE    DC    CL8' '             DATE FOR SEARCH\nSTIME    DC    CL6' '             TIME FOR SEARCH\nEXDATE   DC    CL8' '             DATE FOR SEARCH\nEXTIME   DC    CL6' '             TIME FOR SEARCH\nSUFFIXLN DC    F'0'               SIZE OF DSNAME SUFFIX\nSUFFIXAD DC    F'0'               ADDRESS OF JOURNAL DSN SUFFIX\nDATASUFL DC    F'0'               SIZE OF DATA SUFFIX\nDATASUFA DC    F'0'               ADDRESS OF JOURNAL DSN SUFFIX\nTTR      DC    F'0'               FULLWORD TTR FOR POINT\nBUFFER   DC    F'0'               SAVE AREA FOR GOTTEN STORAGE\nCOMPADDR DC    F'0'               SAVE AREA COMPRESSION ROUTINE\nDEVTDD   DC    CL8' '\nDEVTAREA DS    0D\nDEVTUCB  DC    F'0'\nDEVTBLSZ DC    F'0'\nDEVT@@@@ DC    X'00'\nDEVT3480 EQU   X'01'\nMSG3480  EQU   X'02'\nD3480FF  DC    XL4'78008080'\nD3480CP  DC    XL4'33008003'\nBLDLCOMP DC    H'1',H'58',CL8'SOUTCPR',XL58'00'\nPARMCPR  DS    0F\nCP1      DC    A(CPRTYPE)\nCP2      DC    F'0'\nCP3      DC    A(UNCOMREC)\nCPRTYPE  DC    XL4'00000000'\nUNCOMREC DS    0CL137\nMAXLEN   DC    H'0'\n         DC    H'0'\n         DC    CL133' '\nJOURNACB ACB   AM=VSAM,DDNAME=JOURNAL,MACRF=(KEY,DIR,SEQ,IN)\n         DC    C'RPLBB'\nJOURNRPL RPL   ACB=JOURNACB,AREA=JOURNREC,AREALEN=42,OPTCD=(KEY,       X\n               DIR,SYN,NSP,KEQ,GEN,MVE),ARG=FULLKEY,KEYLEN=8\n         DC    C'QSAMDCB '\nQSAMDCB  DCB   DDNAME=XXXXXXX,DSORG=PS,MACRF=GL,EODAD=CLOSEM\n         DC    C'BSAMDCB '\nBSAMDCB  DCB   DDNAME=XXXXXXX,DSORG=PS,MACRF=RP,EODAD=CLOSEM\n         DC    C'UTILDCB '\nUTILDCB  DCB   DDNAME=XXXXXXX,DSORG=PS,MACRF=(PM),                     X\n               LRECL=133,RECFM=FBA,BLKSIZE=6118   (BLOCK BY 46)\n*\nMSGTAB   DC    A(*,M4,M8,M12,M16,M20,M24,M28,M32,M36)\nM36      DC    CL50'DYNAMIC ALLOCATION FAILED FOR THE INPUT FILE '\nM32      DC    CL50'OPEN FAILURE FOR THE INPUT SYSOUT FILE '\nM28      DC    CL50'OPEN FAILURE FOR THE JOURNAL VSAM FILE '\nM24      DC    CL50'READ FAILURE FOR THE JOURNAL VSAM FILE '\nM20      DC    CL50'EXPANSION FAILED FOR SYSOUT DATA'\nM16      DC    CL50'DYNAMIC ALLOC FAILED FOR THE JOURNAL VSAM FILE'\nM12      DC    CL50'INVALID PARAMETER PASSED '\nM8       DC    CL50'OPEN FAILED FOR THE OUTPUT FILE '\nM4       DC    CL50'JOB NOT FOUND WITHIN THE CONTEXT DEFINED '\n*\nJOBNUM   DC    CL5'00000'         JOBNUMBER FOR SEARCH\nJOBNLEN  DC    H'7'               LENGTH OF JOBNAME FOR COMPARE\nSAVED    DC    CL17' '            SAVED DATE/TIME FROM JOURNAL\nJRNSAVE  DC    CL50' '            SAVED DSNAME FROM JOURNAL\n*\nDAYTABLE DS    0CL28\n         DC    X'00',CL3'MON'\n         DC    X'01',CL3'TUE'\n         DC    X'02',CL3'WED'\n         DC    X'03',CL3'THU'\n         DC    X'04',CL3'FRI'\n         DC    X'05',CL3'SAT'\n         DC    X'06',CL3'SUN'\n         DC    X'FF',CL3'???'\n*\n         DC    C'BEGIN JOURNREC'\n*\n*        THE FOLLOWING DESCRIBES THE JOURNAL RECORD\nJOURNREC DS    0CL42              JOURNAL RECORD\nJOURNJN  DC    CL8' '             JOURNAL JOBNAME FIELD\nJOURNDT  DC    PL5'0'             JOURNAL DATE FIELD\nJOURNTM  DC    PL4'0'             JOURNAL TIME FIELD\nJOURNJ#  DC    CL5' '             JOURNAL JOB NUMBER FIELD\nJOURNJT  DC    CL3' '             JOURNAL JOB TYPE (JOB/STC/TSU)\nJOURNMC  DC    C' '               JOURNAL MESSAGE CLASS\nJOURNTTR DC    CL3'TTR'           JOURNAL TTR FIELD\nJOURNDAY DC    C' '               DAY OF WEEK INDICATOR (00=MONDAY)\nJOURNLIN DC    PL4'0'\nJOURNDEV DC    C' '\nJOURNADR DC    C' '\nJOURNSTP DC    PL6'0'\n*\nJSOUTDSN DC    CL44' '            ACTUAL DS CONTAINING JOB\n*        THE FOLLOWING DESCRIBES THE RECORD CREATED FOR LIST OR LISTALL\nLISTREC  DS    0CL133\nLISTASA  DC    CL1' '             LIST DUMMY ASA CHARACTER\nLISTJN   DC    CL8' ',CL1' '      LIST JOBNAME FIELD\nLISTDATE DC    CL10' ',CL1' '     LIST DATE FIELD\nLISTTIME DC    CL8' ',CL1' '      LIST TIME FIELD\nLISTJT   DC    CL3' '             LIST JOB TYPE (JOB/STC/TSU)\nLISTJ#   DC    CL5' ',CL1' '      LIST JOB NUMBER FIELD\nLISTMC   DC    C' ',C' '          LIST MESSAGE CLASS\nLISTDAY  DC    CL3' '             DAY OF WEEK INDICATOR (00=MONDAY)\nLISTLINE DC    CL10' ',C' '\nLISTDEVT DC    CL6' ',C' '\nLISTADR  DC    C' ',C' '\nLISTSTP  DC    CL15' '\nLISTPAD  DC    CL54' '\n*\nBLANKS   DC    CL133' '\nNEEDLB   DS    0CL133\n         DC    CL45' *** WARNING ***  ALL DATA NOT WRITTEN TO THE'\n         DC    CL45' ACTIVE ARCHIVER FILE YET. RUN THE FLUSH PROG'\n         DC    CL43'RAM OR WAIT FOR ANOTHER JOB TO WRITE DATA. '\nWAITMSG  DC    CL27'ALLOCATING ARCHIVE DATASET:'\nMOUNTMSG DC    CL30'WAITING FOR TAPE TO BE MOUNTED'\nSRCHMSG  DC    CL25'BEGINNING ARCHIVE SEARCH'\nSEP      DC    CL24'SPFSOUTS PAGE SEPARATOR ' SEPARATOR RECORD LITERAL\nPADDING  DC    CL3'PAD'           PADDING SEPERATOR\nNEWSEP1  DC    CL29'         ------------------> '\nNEWSEP2  DC    CL110' '           SUFFIX FOR NEW SEPARATOR\nOPT      DC    X'00'              OPTION SWITCH\nJN       EQU   X'01'              REQUEST FOR MATCH ON JOBNAME\nJ#       EQU   X'02'              REQUEST FOR MATCH ON JOBNUMBER\nDT       EQU   X'04'              REQUEST FOR MATCH BY DATE\nTM       EQU   X'08'              REQUEST FOR MATCH BY TIME\nFND      EQU   X'10'              REQUESTED JOB FOUND\nSWITCH   DC    X'00'              PROCESS SWITCHES\nIOERR    EQU   X'01'              I/O ERROR ON JOURNAL\nFIXVAR   DS    X'00'\nFIXREC   EQU   X'01'\nVARREC   EQU   X'02'\nFDBAREA  DS    0F\n         DS    1C\nTYPECD   DS    1C\nCMPCD    DS    1C\nERRCD    DS    1C\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DYNAMIC ALLOCATION LIST FOR THE JOURNAL INPUT FILE(S)        *\n*                                                                     *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nDAJOURN  DC    X'80',AL3(JRNB)    ADDRESS OF DYNALLOC BLOCK\nJRNB     DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(JRNC)            START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\n         DC    X'00000000'        FLAGS (MODIFIED FOR TAPE)\nJRNC     DC    A(JRNX1,JRNX2,JRNX3,JRNX4,JRNX5),AL1(128),AL3(JRNX6)\nJRNX1    DC    X'0002',AL2(1)                   DSNAME UNIT\nJRNDSNL  DC    AL2(12)                             DSNAME LENGTH\nJRNDSN   DC    CL44'SYS2.OPSWTR'                  DSNAME\nJRNX2    DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT\nJRNDDN   DC    CL8' '                           DDNAME RETURNED\nJRNX3    DC    X'0004',AL2(1),AL2(1),X'08'      STATUS UNIT (SHR)\nJRNX4    DC    X'0005',AL2(1),AL2(1),X'08'      DISP UNIT (KEEP)\nJRNX5    DC    X'001C',AL2(0)                   FREE=CLOSE\nJRNX6    DC    X'003C',AL2(1),AL2(2),X'0008'    DSORG=VSAM\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        DYNAMIC ALLOCATION LIST FOR THE SYSOUT INPUT FILE            *\n*                                                                     *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nDASOUT   DC    X'80',AL3(SOUTB)   ADDRESS OF DYNALLOC BLOCK\nSOUTB    DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(SOUTC)           START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\nSOUTFLGS DC    X'00000000'        FLAGS (MODIFIED FOR TAPE)\nSOUTC    DC    A(SOUTX1,SOUTX2,SOUTX3)\nSOUTFREE DC    A(SOUTX4),AL1(128),AL3(SOUTX5)\nSOUTX1   DC    X'0002',AL2(1)                   DSNAME UNIT\nSOUTDSNL DC    AL2(0)                           DSNAME LENGTH\nSOUTDSN  DC    CL44' '                          DSNAME\nSOUTX2   DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT\nSOUTDDN  DC    CL8' '                           DDNAME RETURNED\nSOUTX3   DC    X'0004',AL2(1),AL2(1),X'08'      STATUS UNIT (SHR)\nSOUTX4   DC    X'0005',AL2(1),AL2(1),X'08'      DISP UNIT (KEEP)\nSOUTX5   DC    X'001C',AL2(0)                   FREE=CLOSE\n         LTORG\nFLAGPARM DSECT\nFLAG     DS    X'00'\nTSO      EQU   X'01'                 TSO CALLER\nLST      EQU   X'02'                 LIST REQUEST\nAUTH     EQU   X'04'                 REQUEST AUTHORIZED FUNCTION\nSEQ      EQU   X'80'\nRECORD   DSECT\nRECPREF  DS    CL6\nRECLIT   DS    0CL77\n         DS    CL28\nRECJNAME DS    CL8\n         DS    CL1\nRECJNUM  DS    CL8\n         DS    CL12\nRECMSGCL DS    CL1\n         DS    CL1\nRECDATE  DS    CL8\n         DS    CL1\nRECTIME  DS    CL8\n         DS    CL1\n         DS    CL60\n         IFGACB AM=VSAM\n         PRINT OFF\n         DCBD DSORG=PS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOUTWTR": {"ttr": 3600, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT NOGEN\n***********************************************************************\n* SOUTWTR IS THE PROGRAM EXECUTED IN THE SAVEWTR PROC. ITS FUNCTION   *\n* IS TO OFFLOAD THE ACTIVE FILE TO DAILY DISK OR TAPE DATASETS.       *\n* IT WILL ALSO OFFLOAD DAILY DISK DATASETS TO ARCHIVE TAPES.          *\n*                                                                     *\n* ADDITIONAL SOUTWTR FUNCTIONS ARE:                                   *\n*   1) FORMAT THE ACTIVE FILE                                         *\n*   2) REBUILD THE VSAM JOURNAL                                       *\n*   3) A \"FIX TAPE\" OPTION TO RELOAD BROKEN TAPES OR COPY DISK        *\n*      FILES TO TAPES (THIS OPTION CAN BE USED FOR OTHER THAN         *\n*      FIXING TAPES)                                                  *\n*   4) USE THE OPTIONAL \"SPECLDEL\" DATASET TO DELETE UN-WANTED        *\n*      REPORTS FROM THE SYSTEM                                        *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* THE FOLLOWING IS THE PARM FORMATS THAT CAN BE PASSED TO SOUTWTR:    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   PARM='FORMAT'           FORMAT THE ACTIVE FILE ONLY               *\n*                           (MUST ALREADY BE CREATED)                 *\n*                                                                     *\n*   PARM='REBUILD,ALL'      WILL READ ALL THE SYSOUT DATASETS AND     *\n*                ,ACTIVE    REBUILD THE VSAM JOURNAL RECORDS ONLY     *\n*                ,DAILY     (JOURNAL MUST HAVE BEEN CREATED AND INITED*\n*                ,ARCHIVE   THE SYSOUT DATASETS ARE OBTAINED BY       *\n*                ,OLD       GETTING ALL THE DATASETS WITH THE PREFIX  *\n*                           IN THE:                                   *\n*                           //PREFIX DD   CARD                        *\n*                             AND OPTIONALLY IN THE:                  *\n*                           //OLDPFX DD   CARD                        *\n*                                                                     *\n*   PARM='FIXTAPE,OUTPUT=DAILY'                                       *\n*                 OUTPUT=ARCHIVE'  READS AN INPUT DD DATASET AND      *\n*                                  MODS OR CREATES A OUTPUT DAILY     *\n*                                  OR ARCHIVE DATASET (SPECIFIED)     *\n*                                  AND UPDATES THE VSAM JOURNAL       *\n*                                  (IF TAPE IS \"NL\", DCB MUST BE      *\n*                                   SUPPLIED ON THE DD CARD)          *\n*                                                                     *\n* ==>NOTE: DEFAULT ALLOCATION IS TO A \"TAPE\" UNIT                     *\n*          (THIS APPLIES TO ANY TAPE MOUNT; HERE OR IN COPY PARM)     *\n*          IF YOU DO NOT USE \"TAPE\" AS AN ESOTERIC NAME               *\n*          YOU CAN SPECIFY THE FOLLOWING:                             *\n*                                                                     *\n*                 OUTPUT=DAILY=TAPEXX                                 *\n*                 OUTPUT=ARCHIVE=TAPEXX (TAPEXX IS ANY TAPE ESOTERIC  *\n*                                        NAME ONLY)                   *\n*                                                                     *\n*   PARM='COPY'            COPIES ACTIVE TO DAILY TAPE                *\n*                          (ASSUMES DAILY TO TAPE)                    *\n*                                                                     *\n*   PARM='COPY,DAILY=TAPE' (TAPE IS YOUR ESOTERIC TAPE NAME           *\n*                           IE: TAPE  OR  TAPE9  OR TAPE16  ETC.)     *\n*                                                                     *\n*   PARM='COPY,DAILY=SYSDA,DAYS=XXX'  DAILYS ARE ON ANY SYSDA DISKS   *\n*                                     (SYSDA CAN BE ANY ESOTERIC NAME)*\n*                                     AND ARE KEPT FOR XXX DAYS BEFORE*\n*                                     COPYING TO ARCHIVE TAPE         *\n*                                                                     *\n*   PARM='COPY,DAILY=SYSDA(PVT801,PVT802,PVT803),DAYS=XXX             *\n*                                     DAILYS ARE KEPT ON 1, 2 OR 3    *\n*                                     SPECIFIED SYSDA PACKS           *\n*                                     (SYSDA CAN BE ANY ESOTERIC NAME)*\n*                                     AND ARE KEPT FOR XXX DAYS BEFORE*\n*                                     COPYING TO ARCHIVE TAPE         *\n*                                                                     *\n*        IF YOU ARE USING A TAPE ESOTERIC NAME FOR THE ARCHIVE        *\n*        DATASET, YOU CAN SUPPLY IT AFTER THE DAYS PARAMETER          *\n*                                                                     *\n*        IE:   ...,DAYS=XXX,ARCHIVE=TAPEXX  ESOTERIC NAME             *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* MISC NOTES:                                                         *\n*                                                                     *\n*                                                                     *\n*  MENTIONED BREIFLY ABOVE, ALL TAPE ALLOCATION USES THE DEFAULT      *\n*  \"UNIT=TAPE\". IF YOU ARE NOT USING \"TAPE\" AS A ESOTERIC NAME, YOU   *\n*  CAN SPECIFY YOUR NAME IN THE PARM AS FOLLOWS:                      *\n*                                                                     *\n*    1) FOR COPY OPTION USE:                                          *\n*       A) FOR DAILY TAPES:  PARM='COPY,DAILY=TAPEXXXX'               *\n*       B) FOR ARCH. TAPES:  PARM='COPY,...,ARCHIVE=TAPEXXXX'         *\n*    2) FOR FIXTAPE OPTION USE:                                       *\n*       A) PARM=FIXTAPE,OUTPUT=DAILY=TAPEXXXX                         *\n*       B) PARM=FIXTAPE,OUTPUT=ARCHIVE=TAPEXXXX                       *\n*                                                                     *\n*                                                                     *\n*  THE ACTIVE FILE IS COMPRESSED BEFORE IT IS WRITTEN TO THE DAILY    *\n*  FILE. WHEN GOING FROM DAILY TO ARCHIVE, THE FILES ARE JUST COPIED  *\n*  AS IS AND REBLOCKED (6169 ON DISK  31743 ON TAPE)                  *\n*  THE SEPERATOR RECORDS ARE NOT COMPRESSED. THIS ALLOWS THE PROGRAMS *\n*  THAT READ THE SYSOUT FILES TO DO COMPARES FOR SEPERATOR RECORDS    *\n*  WITHOUT HAVING TO DECOMPRESS EVERY RECORD.                         *\n*                                                                     *\n*                                                                     *\n*  AND OPTIONAL DD CARD OF \"//ALLOCRPT\" CAN BE SUPPLIED FOR A LIST    *\n*  OF ALL FILES ALLOCATED FOR INPUT, NEW OUTPUT, OR MOD TO OUTPUT.    *\n*  IF THIS DD CARD IS NOT SUPPLIED IN THE SAVEWTR PROC, NO REPORTING  *\n*  IS DONE. (HANDY FOR TESTING)                                       *\n*                                                                     *\n*                                                                     *\n* IF THE OPTIONAL \"SPECLDEL\" DD IS SUPPLIED, THE REQUESTED REPORTS    *\n* WILL BE DELETED FROM THE JOURNAL FILE AND THE REPORT WILL NOT BE    *\n* COPIED FROM THE ACTIVE TO DAILY OR DAILY TO ARCHIVE. ON REBUILD,    *\n* THE RECORD WILL NOT BE ADDED TO THE JOURNAL FILE.                   *\n*   NOTE: THE SPECIAL DELETE DATASET SHOULD BE  LRECL=80              *\n*         FORMAT OF THE FILE IS:                                      *\n*                         1         2         3                       *\n*          COL   123456789012345678901234567890                       *\n*                JJJJJJJJ XXX#####             <== JOB# IS OPTIONAL)  *\n*                   |      |   |-----JOB NUMBER                       *\n*                   |      |---------JOB LIT  (IE: JOB STC TSU)       *\n*                   |----------------JOB NAME (IE: PAYROLL            *\n*                                                  PAY*  <= GENERIC)  *\n*                                                                     *\n*                                                                     *\n*  WHEN SPECIFYING THE DAYS PARAMETER, THE NUMBER OF DAYS KEEP ONLINE *\n*  ARE AS FOLLOWS:                                                    *\n*       DAYS=000 - KEEP ALL OF TODAYS ONLINE ONLY                     *\n*       DAYS=001 - KEEP ALL OF TODAYS ONLINE PLUS ALL OF YESTERDAYS   *\n*       DAYS=002 - KEEP ALL OF TODAYS ONLINE PLUS LAST 2 DAYS         *\n*                                                                     *\n*                                                                     *\n*  IF CHANGING DAILYS FROM DISK TO TAPE, ALL THE EXISTING DAILY DISK  *\n*  FILES WILL BE COPIED TO ARCHIVE TAPE FIRST; THEN THE COPY FROM     *\n*  THE ACTIVE TO DAILY TAPE WILL TAKE PLACE. IF AT A LATER DATE, YOU  *\n*  DECIDE TO PLACE THE DAILYS BACK ON DISK, ALL THE EXISTING DAILY    *\n*  TAPES WILL REMAIN ON DAILY TAPES (NO COPY OF DAILY TAPE TO ARCHIVE *\n*  TAPES) UNTIL THEY ARE CYCLED OFF THRU CLEANWTR.                    *\n*                                                                     *\n*                                                                     *\n*  ANY TAPE CREATED ASSUMES CATALOG RETENTION IN YOUR TAPE MANAGEMENT *\n*  SYSTEM. (IE: EXPDT=99000). IF YOU ARE NOT, FIND THE VARIABLE       *\n*  \"TAPEXPDT\" IN THIS PROGRAM AND UNCOMMENT BEFORE ASSEMBLING.        *\n*  (THERE ARE 2 OCCURRENCES) (THIS WAS NOT TESTED)                    *\n*                                                                     *\n*                                                                     *\n*  THE SOUTXIT REPORTING IS ONLY INVOLKED WHEN THE ACTIVE IS COPIED   *\n*  TO THE DAILY DASD/TAPE DATASET.                                    *\n*                                                                     *\n*                                                                     *\n*  THE SYSTEM IS DESIGNED THAT ONLY ONE REEL OF TAPE IS NEEDED        *\n*  WHEN CREATING/MOD'ING  THE DAILY OR ARCHIVE TAPE DATASETS.         *\n*  THIS SHOULD PREVENT MULTI-REEL TAPES. IT COULD GO INTO A SECOND    *\n*  REEL IF YOU HAVE SHORT TAPES (USUALLY LESS THAN 2000 FT).          *\n*  IF IT GOES INTO A SECOND REEL, ONLY ONE OR TWO REPORTS ARE         *\n*  WRITTEN TO THE SECOND REEL AND A NEW DATASET IS THEN CREATED.      *\n*                                                                     *\n*                                                                     *\n*  THIS JOB CAN BE RESTARTED AT ANY TIME WITHOUT ANY DATASETS NEEDING *\n*  TO BE DELETED OR CLEANED UP.                                       *\n*  (IE: IF SAVEWTR WAS CANCELED IN THE MIDDLE OF WRITING THE ACTIVE   *\n*       FILE TO A DAILY TAPE, THE RESTART WILL RE-OPEN THE ACTIVE FILE*\n*       AND START MODDING ONTO THE END OF THE DAILY TAPE. THE VSAM    *\n*       JOURNAL IS UPDATED NORMALLY. THE ONLY PROBLEM THAT ARISES     *\n*       FROM THIS PROCEDURE IS THAT THERE COULD BE DUPLICATE SYSOUT   *\n*       REPORTS FROM THE ACTIVE FILE ON THE DAILY TAPE,BUT THE JOURNAL*\n*       ONLY RECORDS THAT THE REPORT IS ON THAT ONE TAPE AND 4.S      *\n*       WILL FIND THE FIRST OCCURANCE OF THAT REPORT ON THE TAPE.     *\n*                                                                     *\n*                                                                     *\n*  THE ONLY SPECIAL PROCESSING THAT IS REQUIRED IS IF THE SYSTEM      *\n*  CRASHES (POWER LOSS) WHILE WRITTING TO TAPE. THE RESULT IS THAT    *\n*  THERE IS NO END OF FILE MARK WRITTEN ON THE TAPE. YOU CANNOT       *\n*  MOD ON TO THAT TAPE.                                               *\n*                                                                     *\n*  ONE POSSIBLE SOLUTION IS TO TO A IEBGENER AND COPY THE BAD TAPE    *\n*  TO A TAPE WITH THE SAME DATASET NAME. UNCATALOG THE BAD TAPE AND   *\n*  CATALOG THE NEW (GENERED) TAPE. THE NEW TAPE SHOULD HAVE A END OF  *\n*  TAPE MARKER.                                                       *\n*                                                                     *\n*  ANOTHER SOLUTION IS TO UNCATALOG THE TAPE, AND RUN A SPECIAL       *\n*  SAVEWTR PROC WITH \"PARM=FIXTAPE\". SET THE //INPUT DD  TO THE       *\n*  UNCATALOGED TAPE WITH THE VOL=SER=... SUPPLIED.  A NEW DAILY OR    *\n*  ARCHIVE TAPE WILL BE BUILT AND THE VSAM JOURNAL WILL BE UPDATED.   *\n*  AN EOF ERROR WILL OCCUR, BUT THE NEW TAPE CREATED WILL BE OK.      *\n*  (SEE THE \"FIXTAPE\" PARM OPTION FOR FURTHER DETAILS).               *\n*                                                                     *\n***********************************************************************\n*  PROCESSING SEQUENCE FOR SELECTED PARMS:                            *\n*                                                                     *\n*                                                                     *\n*  A) FORMAT  -  (FORMAT ACTIVE FILE)                                 *\n*     1. ALLOCATE AND OPEN ACTIVE FILE                                *\n*     2. INSERT \"PAD\" RECORDS UNTIL D37 ABEND                         *\n*     3) FINISHED                                                     *\n*                                                                     *\n*                                                                     *\n*  B) REBUILD -  (REBUILD THE VSAM JOURNAL FROM SYSOUT DATASETS)      *\n*     1. ALLOCATE AND OPEN ACTIVE FILE                                *\n*        A. SEARCH ACTIVE FOR SEPERATOR RECORDS                       *\n*        B. BUILD JOURNAL RECORD FROM SEPERATOR AND ADD TO JOURNAL    *\n*     2. ALLOCATE AND OPEN EACH DAILY DISK/TAPE FILE                  *\n*        A. SEARCH DAILY FOR SEPERATOR RECORDS                        *\n*        B. BUILD JOURNAL RECORD FROM SEPERATOR AND ADD TO JOURNAL    *\n*     3. ALLOCATE AND OPEN EACH ARCHIVE TAPE FILE (IF ANY)            *\n*        A. SEARCH ARCHIVE FOR SEPERATOR RECORDS                      *\n*        B. BUILD JOURNAL RECORD FROM SEPERATOR AND ADD TO JOURNAL    *\n*     4. ALLOCATE AND OPEN EACH OLD SYSTEM ARCHIVE TAPE FILE          *\n*        (OPTIONAL IF //OLDPFX DD  CARD IS SUPPLIED)                  *\n*        A. SEARCH OLD ARCHIVE FOR SEPERATOR RECORDS                  *\n*        B. BUILD JOURNAL RECORD FROM SEPERATOR AND ADD TO JOURNAL    *\n*     5) FINISHED                                                     *\n*                                                                     *\n* NOTE:  FOR EACH SEPERATOR FOUND ON ANY OF THE SYSOUT DATASETS:      *\n*        A) TRY TO FIND THAT RECORD IN THE VSAM JOURNAL               *\n*        B) IF FOUND, UPDATE IT (SHOULD NEVER HAPPEN BECAUSE VSAM     *\n*            JOURNAL WAS CREATED NEW IN INITIALIZED)                  *\n*        C) IF NOT FOUND, ADD A NEW RECORD TO THE VSAM JOURNAL        *\n*                                                                     *\n*                                                                     *\n*  C) FIXTAPE -  (FOR FIXING BROKEN TAPE)                             *\n*             -  (COULD ALSO BE USED AS A CONVERSION PROCESS)         *\n*     1. ALLOCATE AND OPEN THE //INPUT DD                             *\n*     2. ALLOCATE AND OPEN VSAM JOURNAL                               *\n*     3. IF OUTPUT=DAILY                                              *\n*        A) FIND LAST DAILY TAPE USED FOR MOD'ING ON TO...            *\n*        B) IF NO EXISTING DAILY TAPES, ALLOCATE A NEW ONE            *\n*     4. IF OUTPUT=ARCHIVE                                            *\n*        A) FIND LAST ARCHIVE TAPE USED FOR MOD'ING ON TO...          *\n*        B) IF NO EXISTING ARCHIVE TAPES, ALLOCATE A NEW ONE          *\n*     5) ALLOCATE AND OPEN THE OUTPUT TAPE (WILL ALWAYS BE TAPE)      *\n*     6) READ INPUT TAPE AND WRITE SAME TO OUTPUT TAPE                *\n*     7) FOR EACH SEPERATOR FOUND, PERFORM THE FOLLOWING:             *\n*        A) TRY TO FIND THAT RECORD IN THE VSAM JOURNAL               *\n*        B) IF FOUND, UPDATE IT TO POINT TO NEW TAPE                  *\n*        C) IF NOT FOUND, ADD A NEW RECORD TO THE VSAM JOURNAL        *\n*     8) FINISHED                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  D) COPY    -  (OFFLOADING ACTIVE FILE TO DAILY)                    *\n*     1. ALLOCATE AND OPEN VSAM JOURNAL                               *\n*     2. IF \"DAILY=TAPE\", PERFORM THE FOLLOWING:                      *\n*        A) FIND LAST DAILY TAPE USED FOR MOD'ING ON TO...            *\n*        B) IF NO EXISTING DAILY TAPES, ALLOCATE A NEW ONE            *\n*        C) ALLOCATE THE ACTIVE FILE                                  *\n*        D) READ THE ACTIVE AND COPY TO THE DAILY TAPE                *\n*        E) FOR EACH SEPERATOR RECORD FOUND, UPDATE THE VSAM JOURNAL  *\n*           TO POINT TO THE DAILY TAPE INSTEAD OF THE ACTIVE          *\n*        F) INITIALIZE THE ACTIVE FILE                                *\n*        G) FINISHED                                                  *\n*                                                                     *\n*     3. IF \"DAILY=DISK\", PERFORM THE FOLLOWING:                      *\n*        A) FIND LAST ARCHIVE TAPE USED FOR MOD'ING ON TO...          *\n*        B) IF NO EXISTING ARCHIVE TAPES, ALLOCATE A NEW ONE          *\n*        C) LOOK AT ALL THE DAILY DISK DATASETS, AND COMPARE DATE     *\n*           STAMP TO \"DAYS=XXX\" PARM                                  *\n*        D) COPY OLD DAILY DISKS TO ARCHIVE TAPE AND UPDATE VSAM      *\n*           JOURNAL TO POINT TO THE ARCHIVE TAPE                      *\n*        E) AFTER COPY IS COMPLETE, DELETE THE DISK DATASET           *\n*        F) PERFORM THIS PROCESS UNTIL ALL THE OLD DISKS ARE ON TAPE  *\n*        G) ALLOCATE AND OPEN THE ACTIVE FILE                         *\n*        H) ALLOCATE AND OPEN A NEW DAILY DISK DATASET                *\n*           (THE SIZE OF THE ACTIVE DETERMINES THE SIZE OF THE DAILY) *\n*           (THE DAILY DISK DATASET WILL GO TO SPECIFIED PACKS OR TO  *\n*            ANY PACK, DEPENDING ON THE PARM)                         *\n*           ( IF 2 OR 3 PACKS ARE SPECIFIED, THE PACK WITH THE MOST   *\n*             SPACE IS SELECTED)                                      *\n*        I) READ THE ACTIVE AND COPY TO THE DAILY DISK                *\n*        J) FOR EACH SEPERATOR RECORD FOUND, UPDATE THE VSAM JOURNAL  *\n*           TO POINT TO THE DAILY TAPE INSTEAD OF THE ACTIVE          *\n*        K) INITIALIZE THE ACTIVE FILE                                *\n*        L) FINISHED                                                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*        R1  -                                                        *\n*        R2  - WORK (USED FOR PARM VERIFICATION)                      *\n*        R3  - WORK                                                   *\n*        R4  - WORK                                                   *\n*        R5  - DSN LENGTH FOR SVC99                                   *\n*        R6  - WORK -USING FOR WORK AREAS                             *\n*        R7  - ACTIVE FILE RECORD COUNTER                             *\n*        R8  - USING FOR DCB                                          *\n*        R9  - BASE                                                   *\n*        R10 - BASE                                                   *\n*        R11 - BASE                                                   *\n*        R12 - BASE                                                   *\n*        R13 -                                                        *\n*        R14 - WORK                                                   *\n*        R15 - WORK                                                   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ABEND  REASONS:                                                     *\n*                                                                     *\n*        U0001 - INVALID PARM                                         *\n*        U0002 - EXIT MISSING (SOUTDATE/SOUTCPR/LOCINDEX)             *\n*        U0003 - NO PREFIX DD CARD                                    *\n*        U0004 - NO //INPUT DD FOR \"FIXTAPE\" OPTION                   *\n*        U0005 - ALLOCATION REPORT OPEN ERROR                         *\n*        U0006 - ACT FILE ON NON-SUPPORTED DISK DEVICE (UPDATE TABLE) *\n*        U0007 - JOURNAL RECORD NOT FOUND -IN COPY MODE (MUST BE THERE*\n*        U0008 - VSAM UPDATE ERROR                                    *\n*        U0009 - INPUT DATASET (ACT/DAY) OPEN ERROR                   *\n*        U0010 - OUTPUT DATASET (DAILY/ARCH.) OPEN ERROR              *\n*        U0011 - INVALID DATASET NAME (NOT DATE/TIME STAMPED)         *\n*        U0012 - NON-SUPPORTED OUTPUT DISK COPY DEVICE TYPE           *\n*        U0013 - TAPE DENSITY NO IN THE TABLE                         *\n*        U0014 - LISTSPC CATALOG ERROR                                *\n*        U0015 - NOT USED                                             *\n*        U0016 - NO SPACE ON SPECIFIED PACKS                          *\n*        U0017 - BACKUP DATE ERROR                                    *\n*        U0018 - ACTIVE FILE ALLOCATION ERROR                         *\n*        U0019 - VSAM JOURNAL ALLOCATION ERROR                        *\n*        U0020 - VSAM JOURNAL OPEN ERROR                              *\n*        U0021 - NEW TAPE ALLOCATION ERROR                            *\n*        U0022 - MOD TO TAPE ALLOCATION ERROR                         *\n*        U0023 - OLD DAILY/ARCH. DATASET ALLOCATION ERROR             *\n*        U0024 - ENTERED INVALID CODE                                 *\n*        U0025 - NEW DAILY DISK DATASET ALLOCATION ERROR              *\n*        U0026 - OPEN ERROR ON SPECIAL DELETE DSN                     *\n*        U0027 - INCREASE GETMAIN FOR SPECIAL DELETE FILE             *\n*        U0028 - REQUESTED DELETE OF JOURNAL RECORD FAILED            *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        INITIALIZATION AND PARM ISOLATION                            *\n*                                                                     *\n***********************************************************************\nSOUTWTR  $PROLOG R12,R11,R10,R9  SPECIFY BASE REGISTERS\n         USING IHADCB,R8       INFORM THE ASSEMBLER\n         L     R2,0(R1)        GET PARM POINTER\n         LH    R3,0(R2)        GET PARM SIZE\n         LTR   R3,R3           ANY PARM?\n         BZ    ABEND1          NO, ERROR\n         SR    R3,R3           CLEAR R3\n         LH    R3,0(R2)        SET R3 TO LENGTH OF PARM\n         LA    R2,2(R2)\n         CLC   0(4,R2),=C'COPY' VALID REQUEST?\n         BNE   III010          NO, INVALID PARM\n         OI    FUNC,COPYING    SET COPY OPTION\n         SH    R3,=H'4'        SUBTRACT LENGTH OF COPY\n         CH    R3,=H'0'        ANY MORE\n         BE    FFF010          NO - ASSUME DAILY TO TAPE\n         LA    R2,4(R2)        BUMP PAST LENGTH AND COPY\n         CLC   0(7,R2),=C',DAILY=' IS NEXT A DAILY PARM\n         BNE   ABEND1          NO - BAD PARM\n         LA    R2,7(R2)        BUMP R2\n         SH    R3,=H'7'        SUBTRACT LENGTH OF COPY\n         BNP   ABEND1          NO POSITIVE - ERROR\n         CLC   0(4,R2),=C'TAPE' TAPE SPECIFIED\n         BE    GGG010          YES - SET SWITCH\n         CLC   0(4,R2),=C'CART' TAPE SPECIFIED\n         BE    GGG010          YES - SET SWITCH\n         LA    R4,DISKNAME     SET R4 TO NAME OF DISK\n         SR    R5,R5           CLEAR R5 FOR LENGTH\nAAA010   MVC   0(1,R4),0(R2)   MOVE IN ONE CHAR\n         LA    R2,1(R2)        BUMP R2\n         LA    R4,1(R4)        BUMP R4\n         AH    R5,=H'1'        ADD 1 TO LENGTH\n         STH   R5,DISKNML      SAVE IN DISK LENGTH AREA\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         CLI   0(R2),C','      FOUND COMA\n         BE    DDD010          GO TO SET DAYS LIMIT\n         CLI   0(R2),C'('      FOUND LEFT PAREN\n         BE    BBB010          HAVE SPECIFIED DISK PACKS\n         B     AAA010          TRY AGAIN\nBBB010   OI    COPYTO,DDSPEC   ALLOC ON SPECIFIED DISKS\n         LA    R4,DISKTBL      SET R4 TO DISK TABLE\n         LA    R2,1(R2)        BUMP PAST PAREN\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         SR    R5,R5           CLEAR R5 FOR LENGTH\nBBB010A  MVC   0(1,R4),0(R2)   MOVE IN FIRST PACK\n         AH    R5,=H'1'       ADD 1 TO LENGTH\n         STH   R5,DISKTBL+12  SAVE LENGTH\n         LA    R4,1(R4)        BUMP TO NEXT CHAR\n         LA    R2,1(R2)        BUMP TO NEXT CHAR\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         CLI   0(R2),C')'      END OF LIST\n         BE    CCC010          DONE\n         CLI   0(R2),C','      MORE PACKS SPECIFIED\n         BNE   BBB010A         MOVE IN NEXT CHAR\n         LA    R2,1(R2)        BUMP PAST COMA\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         LA    R4,DISKTBL      SET BACK TO BEGINNING\n         LA    R4,14(R4)       BUMP TO SECOND ENTRY\n         SR    R5,R5           CLEAR R5 FOR LENGTH\nBBB010B  MVC   0(1,R4),0(R2)   MOVE IN SECOND PACK\n         AH    R5,=H'1'        ADD 1 TO LENGTH\n         STH   R5,DISKTBL+26   SAVE LENGTH\n         LA    R4,1(R4)        BUMP TO NEXT CHAR\n         LA    R2,1(R2)        BUMP TO NEXT CHAR\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         CLI   0(R2),C')'      END OF LIST\n         BE    CCC010          DONE\n         CLI   0(R2),C','      MORE PACKS SPECIFIED\n         BNE   BBB010B         MOVE IN NEXT CHAR\n         LA    R2,1(R2)        BUMP PAST COMA\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         LA    R4,DISKTBL      SET BACK TO BEGINNING\n         LA    R4,28(R4)       BUMP TO THIRD ENTRY\n         SR    R5,R5           CLEAR R5 FOR LENGTH\nBBB010C  MVC   0(1,R4),0(R2)   MOVE IN THIRD PACK\n         AH    R5,=H'1'        ADD 1 TO LENGTH\n         STH   R5,DISKTBL+40   SAVE LENGTH\n         LA    R4,1(R4)        BUMP TO NEXT CHAR\n         LA    R2,1(R2)        BUMP TO NEXT ENTRY\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         CLI   0(R2),C','      END OF LIST\n         BE    ABEND1          3 PACKS IS MAX\n         CLI   0(R2),C')'      END OF LIST\n         BNE   BBB010C         MOVE IN NEXT CHAR\nCCC010   LA    R2,1(R2)        BUMP PAST PAREN\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         B     EEE010          GO SET DAY LIMIT\nDDD010   OI    COPYTO,DDANY    ALLOC ON ANY DISK\nEEE010   CH    R3,=H'9'        MUST HAVE AT LEAST 9 LEFT\n         BL    ABEND1          ERROR\n         CLC   0(6,R2),=C',DAYS=' DAYS PARM SPECIFIED\n         BNE   ABEND1          ERROR\n         LA    R2,6(R2)        BUMP R2\n         SH    R3,=H'6'        DECREMENT\n         BNP   ABEND1          ERROR\n         TM    0(R2),X'F0'     IS CHAR NUMERIC\n         BNO   ABEND1          NO - ABEND\n         TM    1(R2),X'F0'     IS CHAR NUMERIC\n         BNO   ABEND1          NO - ABEND\n         TM    2(R2),X'F0'     IS CHAR NUMERIC\n         BNO   ABEND1          NO - ABEND\n         MVC   DAYONLIN+2(3),0(R2) MOVE IN DAYS ONLINE\n         LA    R2,3(R2)        BUMP PAST DAYS\n         SH    R3,=H'3'        DECREMENT LENGTH\n         CH    R3,=H'0'        ANY PARM LEFT\n         BE    FFF011          GO MOVE IN TAPE NAME\n         CH    R3,=H'10'       MUST HAVE AT LEAST 10 MORE\n         BL    ABEND1          LESS - ERROR\n         CLC   0(9,R2),=C',ARCHIVE='\n         BNE   ABEND1\n         LA    R2,9(R2)        BUMP PAST CONSTANT\n         SH    R3,=H'9'        DECREMENT LENGTH\n         B     GGG011          GO MOVE IN ESOTERIC NAME\nFFF010   OI    COPYTO,DT       SET TO DAILY=TAPE\nFFF011   MVC   TAPENAME,=CL8'TAPE' \"TAPE\" UNIT BY DEFAULT\n         MVC   TAPENML,=H'4'   LENGTH OF 4\n         B     ENTRY020        START PROCESSING\nGGG010   OI    COPYTO,DT       SET TO DAILY=TAPE\nGGG011   LA    R4,TAPENAME     SET R4 TO NAME OF TAPE\n         STH   R3,TAPENML      SAVE LENGTH\nHHH010   MVC   0(1,R4),0(R2)   MOVE IN ONE CHAR\n         LA    R2,1(R2)        BUMP R2\n         LA    R4,1(R4)        BUMP R4\n         BCT   R3,HHH010       DECREMENT AND MOVE NEXT CHAR\n         B     ENTRY020        START PROCESSING\nIII010   CLC   0(6,R2),=C'FORMAT' VALID REQUEST?\n         BNE   JJJ010          NO - CHECK REBUILD\n         OI    FUNC,FORMAT     SET FORMAT  OPTION\n         B     ENTRY030        GO GET PREFIX\nJJJ010   CLC   0(8,R2),=C'REBUILD,' VALID REQUEST?\n         BNE   KKK010          NO - CHECK FIXTAPE\n         OI    FUNC,REBUILD    SET REBUILD OPTION\n         LA    R2,8(R2)        BUMP PAST PARM\n         MVI   RBLDSW,X'0F'    DEFAULT TO ALL\n         CLC   0(3,R2),=C'ALL' REBUILD ALL??\n         BE    ENTRY020        GO TO ENTRY020\n         MVI   RBLDSW,X'01'    SET TO REBUILD ACTIVE ONLY\n         CLC   0(3,R2),=C'ACT' REBUILD ACTIVE\n         BE    ENTRY020        GO TO ENTRY020\n         MVI   RBLDSW,X'02'    SET TO REBUILD DAILY ONLY\n         CLC   0(3,R2),=C'DAI' REBUILD ACTIVE\n         BE    ENTRY020        GO TO ENTRY020\n         MVI   RBLDSW,X'04'    SET TO REBUILD ARCHIVE ONLY\n         CLC   0(3,R2),=C'ARC' REBUILD ACTIVE\n         BE    ENTRY020        GO TO ENTRY020\n         MVI   RBLDSW,X'08'    SET TO REBUILD \"OLD\" ONLY\n         CLC   0(3,R2),=C'OLD' REBUILD ACTIVE\n         BE    ENTRY020        GO TO ENTRY020\n         B     ABEND1          ELSE - ERROR\nKKK010   CLC   0(7,R2),=C'FIXTAPE' VALID REQUEST?\n         BNE   ABEND1          NOT ANY VALID REQUEST\n         OI    FUNC,FIXTAPE    SET TAPE FIX OPTION\n         LA    R2,7(R2)        BUMP PAST CONSTANT\n         SH    R3,=H'7'        DECREMENT\n         CH    R3,=H'13'       MUST HAVE AT LEAST 13\n         BL    ABEND1          NO - ERROR\n         CLC   0(13,R2),=C',OUTPUT=DAILY'\n         BE    LLL010\n         OI    COPYTO,FIXARCH  SET TO ARCHIVE OUTPUT\n         CLC   0(15,R2),=C',OUTPUT=ARCHIVE'\n         BNE   ABEND1          ERROR\n         LA    R2,15(R2)       BUMP PAST OUT=DAY PARM\n         SH    R3,=H'15'       DECREMENT COUNTER\n         B     NNN010\nLLL010   LA    R2,13(R2)       BUMP PAST OUT=DAY PARM\n         SH    R3,=H'13'       DECREMENT COUNTER\n         OI    COPYTO,FIXDAY   SET TO DAILY OUTPUT\nNNN010   CH    R3,=H'1'        CHECK REMAINING\n         BL    PPP010          ASSUME TAPE\n         CLI   0(R2),C'='      EQUAL SIGN\n         BNE   ABEND1          ERROR\n         LA    R2,1(R2)        BUMP PAST EQUAL\n         SH    R3,=H'1'        DECREMENT COUNTER\n         BZ    PPP010          IF ZERO - ASSUME TAPE\n         LA    R4,TAPENAME     SET R4 TO NAME OF TAPE\n         STH   R3,TAPENML      SAVE LENGTH\nOOO010   MVC   0(1,R4),0(R2)   MOVE IN ONE CHAR\n         LA    R2,1(R2)        BUMP R2\n         LA    R4,1(R4)        BUMP R4\n         BCT   R3,OOO010       DECREMENT AND MOVE NEXT CHAR\n         B     ENTRY020        START PROCESSING\nPPP010   MVC   TAPENAME,=CL8'TAPE' \"TAPE\" UNIT BY DEFAULT\n         MVC   TAPENML,=H'4'   LENGTH OF 4\n         B     ENTRY020        START PROCESSING\n         EJECT\n***********************************************************************\n*        LOAD THE EXIT ROUTINE (IF ONE EXISTS)                        *\n*        LOAD THE COMPRESSION EXIT                                    *\n*        LOAD THE LOCINDEX EXIT                                       *\n*        LOAD THE DATE BACKUP EXIT                                    *\n***********************************************************************\nENTRY020 EQU   *\n         BLDL  0,BLDLLIST      ISSUE BLDL FOR SOUTXIT MODULE\n         LTR   R15,R15         DOES IT EXIST\n         BNZ   AAA020          NO, BYPASS LOAD\n         LOAD  EP=SOUTXIT      LOAD ROUTINE\n         ST    R0,EXITADDR     SAVE ADDRESS\nAAA020   MVC   BLDLLIST+4(8),=CL8'SOUTCPR'    COMPRESS MODULE\n         BLDL  0,BLDLLIST      ISSUE BLDL FOR COMPRESS MODULE\n         LTR   R15,R15         DOES IT EXIST\n         BNZ   ABEND2          NO, BYPASS LOAD\n         LOAD  EP=SOUTCPR      LOAD ROUTINE\n         ST    R0,COMPADDR     SAVE ADDRESS\nBBB020   MVC   BLDLLIST+4(8),=CL8'LOCINDEX'    LOC INDEX\n         BLDL  0,BLDLLIST      ISSUE BLDL\n         LTR   R15,R15         DOES IT EXIST\n         BNZ   ABEND2          ERROR - NEED ROUTINE\n         LOAD  EP=LOCINDEX     LOAD ROUTINE\n         ST    R0,LOCIADDR     SAVE ADDRESS\nCCC020   MVC   BLDLLIST+4(8),=CL8'SOUTDATE'   BACKUP DATE\n         BLDL  0,BLDLLIST      ISSUE BLDL\n         LTR   R15,R15         DOES IT EXIST\n         BNZ   ABEND2          ERROR - NEED ROUTINE\n         LOAD  EP=SOUTDATE     LOAD ROUTINE\n         ST    R0,DATEADDR     SAVE ADDRESS\n         EJECT\n***********************************************************************\n*       GET PREFIX AND OLDPFX JFCB'S TO GET PREFIX FOR DSNS           *\n*       OLDPFX IS OPTIONAL (FOR CONVERSION ONLY)                      *\n*       ALSO CHECK IF THERE IS A INPUT DD FOR FIX TAPE                *\n***********************************************************************\nENTRY030 L     R3,16               GET CVT ADDRESS\n         L     R3,0(R3)            GET OLD/NEW TCB POINTERS\n         L     R3,4(R3)            GET OUR TCB ADDRESS\n         L     R3,12(R3)           GET OUR TIOT ADDRESS\n         LA    R2,24               SIZE OF TIOT HEADER\nAAA030   AR    R3,R2               BUMP TO NEXT ENTRY\n         CLC   4(8,R3),=CL8'PREFIX  ' PREFIX DATASET?\n         BE    CCC030              YES, GET DSN\n         CLC   4(8,R3),=CL8'OLDPFX  ' OLD PREFIX (REBUILD OPTION ONLY)\n         BE    FFF030              YES, OK\n         CLC   4(8,R3),=CL8'ALLOCRPT' ALLOCATION REPORT DD SUPPLIED\n         BE    III030              YES, OK\n         CLC   4(8,R3),=CL8'SPECLDEL' DELETE REPORTS DD SUPPLIED\n         BE    JJJ030              YES, OK\n         CLC   4(8,R3),=CL8'INPUT   ' INPUT DSN (FIXTAPE OPTION ONLY)\n         BE    BBB030              YES, OK\n         B     LLL030              TRY FOR NEXT DD\nBBB030   OI    FUNC,TAPEINP        HAVE TAPE IN DD CARD\n         B     LLL030              TRY FOR NEXT DD\nCCC030   RDJFCB PREFIX             GET JFCB\n         MVC   PREFIX1,JFCB        MOVE IN PREFIX\n         LA    R4,PREFIX1         SET R4 TO BEGINNING\n         LA    R4,20(R4)          SET R4 TO END\n         LA    R5,21              SET R5 TO MAX LENGTH\nDDD030   CLI   0(R4),C' '         FIND BLANK\n         BNE   EEE030             NO -FOUND END\n         SH    R4,=H'1'           DECREMENT\n         BCT   R5,DDD030          TRY AGAIN\nEEE030   ST    R5,PREFIX1L        SAVE LENGTH OF PREFIX\n         B     LLL030             TRY FOR NEXT DD\nFFF030   RDJFCB OLDPFX            GET OLD JFCB\n         MVC   PREFIX2,JFCB        MOVE IN PREFIX\n         LA    R4,PREFIX2         SET R4 TO BEGINNING\n         LA    R4,24(R4)          SET R4 TO END\n         LA    R5,25              SET R5 TO MAX LENGTH\nGGG030   CLI   0(R4),C' '         FIND BLANK\n         BNE   HHH030             NO -FOUND END\n         SH    R4,=H'1'           DECREMENT\n         BCT   R5,GGG030          TRY AGAIN\nHHH030   ST    R5,PREFIX2L        SAVE LENGTH OF PREFIX\n         B     LLL030\nIII030   EQU   *\n         OI    FUNC,RPTALLO        REPORT ON ALLOCATION\n         B     LLL030\nJJJ030   EQU   *\n         OI    FUNC,SPECDEL        DELETE REPORTS ON MOVE\n         B     LLL030\nLLL030   ICM   R2,1,0(R3)          SIZE OF ENTRY\n         BZ    MMM030              END OF TIOT, CONTINUE\n         B     AAA030              CHECK NEXT ENTRY\nMMM030   CLI   PREFIX1,C' '        IS THERE A PREFIX\n         BE    ABEND3              ERROR\n         TM    FUNC,FIXTAPE        ARE WE FIXING A TAPE\n         BZ    OOO030              NO - BYPASS NEXT CHECK\n         TM    FUNC,TAPEINP        HAVE INPUT TAPE DD?\n         BZ    ABEND4              NO - ERROR\nOOO030   TM    FUNC,RPTALLO        ALLOCATION REPORT WANTED\n         BZ    PPP030              NO BYPASS OPEN\n         OPEN  (ALLOCRPT,(OUTPUT)) OPEN REPORT DSN\n         TM    ALLOCRPT+48,X'10'   DID IT OPEN\n         BZ    ABEND5              NO - ERROR\n         BAL   R14,ENTRY960        PUT OUT HEADING\n         BAL   R14,ENTRY960        PUT OUT BLANK LINE\nPPP030   TM    FUNC,SPECDEL        DELETE REPORTS  WANTED\n         BZ    EXIT030             NO BYPASS OPEN\n         GETMAIN R,LV=2000\n         LR    R6,R1               SAVE ADDR OF DELETE AREA\n         ST    R6,SAVESPEC         SAVE ADDR OF DELETE AREA\n         LR    R0,R1               SET R0 TO BEGINNING OF GETMAIN\n         LA    R1,2000             SET R1 TO LENGTH\n         XR    R14,R14             CLEAR R14\n         XR    R15,R15             CLEAR R15\n         MVCL  R0,R14              SET GETMAINED TO ALL FF\n         USING SPECAREA,R6         INFORM ASSEMBLER\n         OPEN  (SPECLDEL,(INPUT))  OPEN DELETE DSN\n         TM    SPECLDEL+48,X'10'   DID IT OPEN\n         BZ    ABEND26             NO - ERROR\n         LA    R7,99               99  RECORDS MAXIMUM\nQQQ030   GET   SPECLDEL,DELAREA    GET DELETE RECORD\n         LA    R2,DELAREA          SET R2 TO JOBNAME\n         LA    R3,SPECNAME         SET R3 TO SPECIAL NAME\n         LA    R4,8                SET TO MAX LENGTH\n         XR    R5,R5               SET TO ZERO\nRRR030   CLI   0(R2),C'*'          GENERIC NAME\n         BE    SSS030              YES - DONE\n         MVC   0(1,R3),0(R2)       MOVE IN 1 CHARACTER\n         LA    R2,1(R2)            BUMP TO NEXT CHAR\n         LA    R3,1(R3)            BUMP TO NEXT CHAR\n         LA    R5,1(R5)            BUMP LENGTH COUNTER\n         BCT   R4,RRR030           MOVE NEXT CHARACTER\nSSS030   SH    R5,=H'1'            DECREMANT FOR COMPARE\n         ST    R5,SPECLGTH         SAVE LENGTH OF JOB NAME\n         MVC   SPECNUM,DELJNUM     SAVE JOB NUMBER IF ANY\n         LA    R6,20(R6)           BUMP TO NEXT ENTRY\n         BCT   R7,QQQ030           READ NEXT IF LESS THAN 100\n         B     ABEND27             MORE THAN 99 ENTRIES - ERROR\nXXX030   EQU   *\n         CLOSE SPECLDEL\n         DROP  R6\nEXIT030  EQU   *\n         EJECT\n***********************************************************************\n*        PROCESS THE COPY OPTION:\n*          A) COPY ACTIVE TO TAPE ONLY\n*           OR\n*          B) COPY DAILYS TO ARCHIVE TAPE (BY DAYS OLD)\n*             AND COPY ACTIVE TO DISK DAILY\n*           ALWAYS\n*          C) CLEAR THE ACTIVE FILE\n***********************************************************************\nENTRY040 TM    FUNC,COPYING        ARE WE COPYING\n         BZ    ENTRY050            TRY ANOTHER OPTION\n         BAL   R14,ENTRY910        ALLOCATE AND OPEN JOURNAL\n*\n*        THE FOLLOWING LOGIC WILL:\n*          A) GET LAST ARCHIVE TAPE USED (IF ANY)\n*          B) GET THE DAILY DATASETS ON DISK ON DETERMINE IF\n*             THEY SHOULD BE MOVE TO ARCHIVE TAPE\n*             (EITHER DAILY IS PAST LIMIT FOR ONLINE\n*              OR SWITCHING FROM DISK TO TAPE DAILYS)\n*          C) ALLOCATE THE DAILY FILE\n*          D) ALLOCATE THE ARCHIVE TAPE\n*          E) COPY DAILY TO ARCHIVE AND UPDATE JOURNAL\n*          F) DELETE DAILY\n*          H) GO BACK TO B AND TRY AGAIN\n*\n* GET LAST ARCHIVE TAPE USED ????\n*\n         NI    MISC,255-ARCHALLO   SET ARCHIVE ALLOCATED TO NO\n         MVC   PASSTYPE,ARCHVD     GET LAST ARCHIVE TAPE WITH\n*                                   A DATE STAMP (NOT OLD GDG)\n         OI    MISC,PASSLAST       JUST GET LAST ONE\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVI   LOOKFOR,ATAPE       LOOKING FOR A TAPE\n         BAL   R14,ENTRY800        GET LAST ARCHIVE TAPE USED\n         MVC   ARCHDSN,PASSDSN     SAVE IT FOR LATER ALLOC\n*\n         BAL   R14,ENTRY860        GET BACKUP DATE FOR COMPARE\n         SR    R7,R7               CLEAR RECORD COUNTER\n*\n* GET ALL DAILY DATASET AND COMPARE AGAINST DATE\n*\nAAA040   MVC   PASSTYPE,DAYLED     GET LAST DAILY DISK WITH\n*                                  A DATE STAMP (NOT OLD GDG)\n         NI    MISC,255-PASSLAST   GET ALL DAILYS\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVI   LOOKFOR,ADISK       LOOKING FOR A DISK\n         BAL   R14,ENTRY800        GET NEXT DAILY DATASET\n         CLI   PASSDSN,C' '        ANY MORE DAILYS  ONLINE\n         BE    GGG040              NO - DONE WITH DAILY TO ARCHIVE\n*\n* IF CHANGING FROM DISK TO TAPE DAILYS, MOVE ANY DISK TO ARCH TAPE\n*\n         TM    COPYTO,DT           DAILY TO TAPE ONLY\n         BO    AAA041              YES-COPY ANY DAILY DISK TO ARCH.\n*\n         L     R5,PREFIX1L         SET R5 TO LENGTH OF PREFIX\n         AH    R5,=H'7'            BUMP PAST .DAILY.\n         LA    R4,PASSDSN          SET R4 TO PASSED DSN\n         LA    R4,0(R5,R4)         BUMP PAST PREFIX\n         CLC   COMPARED,0(R4)      COMPARE DATE STAMP\n         BNH   AAA040              WITHIN LIMIT - KEEP ONLINE\nAAA041   BAL   R14,ENTRY930        ALLOCATE THE DAILY DATASET\n         BAL   R14,ENTRY700        OPEN INPUT FILE\n*\n*       ALLOCATE THE ARCHIVE TAPE FIRST TIME THRU\n*\n         MVC   PASSDSN,ARCHDSN     RESTORE PASSDSN TO ARCHIVE\n         TM    MISC,ARCHALLO       IS ARCHIVE ALLOCATED YET?\n         BO    DDD040              YES - BYPASS ALLOCATION\n         OI    MISC,ARCHALLO+FRSTIME+RITETAPE       ARCH. IS ALLOCATED\n*                                     SET FRSTIME FOR JOURN UPDATE OFF\n*                                     WRITING ON TAPE\n         MVC   NEWTYPE,ARCHV       SET TYPE FOR NEW FILE\n         CLI   PASSDSN,C' '        WERE THERE ANY\n         BNE   BBB040              YES - ALLOC EXISTING\n         BAL   R14,ENTRY920        ALLOCATE A NEW TAPE\n         B     CCC040\nBBB040   BAL   R14,ENTRY925        ALLOCATE AN EXISTING TAPE\nCCC040   BAL   R14,ENTRY750        OPEN OUTPUT FILE\nDDD040   MVI   WHERETO,TOFFF040    WHERE TO ON EOF\n         MVI   INPTYPE,DAYFILE     INPUT TYPE DAILY - NO SOUTXIT\n*\n*       MOVE DAILY TO ARCHIVE AND UPDATE JOURNAL\n*\nEEE040   BAL   R14,ENTRY710        READ THE INPUT DAILY FILE\n         BAL   R14,ENTRY760        WRITE THE OUTPUT ARCHIVE FILE\n         B     EEE040\nFFF040   BAL   R14,ENTRY980       CLOSE THE DAILY/DELETE IT\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    AAA040             NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTDDS REPORT TYPE\n         MVC   RPTLINE+29(44),DALYDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\n         B     AAA040\nGGG040   TM    MISC,ARCHALLO       WAS ARCHIVE ALLOCATED\n         BZ    HHH040              NO - BYPASS CLOSE\n         BAL   R14,ENTRY985        CLOSE AND FREE ARCHIVE OUTPUT\n         LTR   R7,R7               ANY INPUT RECORDS WRITTEN\n         BZ    HHH040              NO - BYPASS LAST RECORD UPDATE\n         BAL   R14,ENTRY650        UPDATE THE LAST VSAM RECORD\n*\n*       DONE WITH DAILY TO ARCHIVE MOVE\n*       NOW SETUP FOR ACTIVE TO DAILY DISK\n*       (UNLESS DAILY TO TAPE ONLY)\n*\nHHH040   EQU   *\n         TM    COPYTO,DT           DAILY TO TAPE ONLY\n         BO    KKK040              YES-GO ALLOCATE DAILY TAPE\n*\n         BAL   R14,ENTRY900        ALLOCATE THE ACTIVE FILE\n         BAL   R14,ENTRY700        OPEN THE ACTIVE FILE\n*\n*  GET ACTIVE DEVICE TYPE AND THE NUMBER OF BLKS PER CYLINDER\n*  FOR ALLOCATION OF NEW DAILY FILE\n*\n         LA    R8,INPUT        SET UP ADDRESSABILITY\nIII040   LA    R15,DEVT#       SET LOOP CONTROL\n         LA    R14,DEVT        ADDRESS OF DEVICE TABLE\nJJJ040   CLC   0(1,R14),DCBTRBAL-1 CHECK DEVICE TYPE\n         BE    JJJ041          FOUND, CONTINUE\n         LA    R14,8(R14)      NEXT ENTRY\n         BCT   R15,JJJ040      CHECK NEXT DEVICE ENTRY\n         WTO   'SOUTWTR - UNSUPPORTED ACTIVE FILE DEVICE TYPE'\n         B     ABEND6          ERROR RETURN\nJJJ041   MVC   ALLOBLKS,4(R14) STORE BLKS/CYL QUANTITY\n*\n*  GET NUMBER OF CYLINDERS IN ACTIVE FILE\n*\n         L     R14,DCBDEBAD    INPUT DCB'S DEB\n         SR    R3,R3           CLEAR FOR ICM\n         SR    R4,R4           CLEAR FOR ICM\n         ICM   R3,3,38(R14)    MOVE IN LOWER CYLINDER\n         ICM   R4,3,42(R14)    MOVE IN UPPER CYLINDER\n         SR    R4,R3           R4 CONTAINS CYLINDERS IN DATASET\n         AH    R4,=H'1'        ROUND UP 1\n         ST    R4,ALLOCYL      SAVE IT\n         BAL   R14,ENTRY940    GO ALLOCATE NEW DISK DAILY DATASET\n         BAL   R14,ENTRY750    OPEN OUTPUT FILE\n         NI    MISC,255-RITETAPE  WILL BE WRITING TO DISK\n         B     NNN040          GO PROCESS ACTIVE TO DAILY\n*\n*       SETUP AND PROCESS ACTIVE TO DAILY=TAPE\n*\nKKK040   EQU   *\n*\n*  FOLLOWING CODE NEEDED TO RESET LISTSPC (LICINDEX) IF\n*  CHANGING FROM DISK TO TAPE (OTHERWISE JUST UNNEEDED LOGIC)\n         MVC   PASSTYPE,BLANKS     GET AT LEAST ONE DSN\n         MVC   PASSPFX(21),PREFIX1 MOVE NEW PREFIX NAME\n         MVC   PASSLEN,PREFIX1L    MOVE NEW PREFIX LENGTH\n         NI    MISC,255-PASSLAST   GET FIRST\n         MVI   LOOKFOR,BOTH        GET ANY TYPE\n         BAL   R14,ENTRY800        GO GET DSN\n*  PREVIOUS CODE NEEDED TO RESET LISTSPC GETMAINED AREA\n*\n         OI    MISC,RITETAPE       WILL BE WRITING TO TAPE\n         MVC   PASSTYPE,DAYLED     GET LAST DAILY WITH\n*                                  A DATE STAMP (NOT OLD GDG)\n         MVC   PASSPFX(21),PREFIX1 MOVE NEW PREFIX NAME\n         MVC   PASSLEN,PREFIX1L    MOVE NEW PREFIX LENGTH\n         OI    MISC,PASSLAST       JUST GET LAST ONE\n         MVI   LOOKFOR,ATAPE       LOOK FOR LAST DAILY TAPE\n         BAL   R14,ENTRY800        GO GET DSN\n         MVC   NEWTYPE,DAYLE       SET NEW TYPE TO DAILY\n         CLI   PASSDSN,C' '        ARE THERE ANY\n         BNE   LLL040              YES - ALLOCATE EXISTING\n         BAL   R14,ENTRY920        ALLOCATE A NEW TAPE\n         B     MMM040\nLLL040   BAL   R14,ENTRY925        ALLOCATE AN EXISTING TAPE\nMMM040   BAL   R14,ENTRY750        OPEN OUTPUT DAILY TAPE\n         BAL   R14,ENTRY900        GO ALLOC ACTIVE FILE\n         BAL   R14,ENTRY700        OPEN ACTIVE FILE\nNNN040   MVI   WHERETO,TOYYY040    SET EOF WHERE TO\n         OI    MISC,FRSTIME        SET FRSTIME FOR JOURN UPDATE OFF\n         MVI   INPTYPE,ACTFILE     SET TYPE TO ACTIVE FILE\n         SR    R7,R7               CLEAR ACTIVE RECORD COUNTER\nOOO040   BAL   R14,ENTRY710        READ THE INPUT FILE\n         BAL   R14,ENTRY760        WRITE OUT THE FILE\n         B     OOO040              GET NEXT RECORD\nYYY040   EQU   *\n         ICM   R15,15,EXITADDR     ADDRESS OF THE EXIT\n         BZ    ZZZ040              NONE, BYPASS EXIT\n         NI    EXITSW,255-REC-SEP  RESET SEP AND REC FLAGS\n         OI    EXITSW,EOF          INDICATE END OF FILE\n         XC    EXITREC,EXITREC     CLEAR RECORD POINTER\n         LA    R1,EXITPARM         ADDRESS OF EXIT PARM\n         BALR  R14,R15             LAST CALL TO THE EXIT ROUTINE\nZZZ040   LTR   R7,R7               ANY RECORDS IN THE ACTIVE FILE\n         BZ    ZZZ041              NONE - BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE THE LAST VSAM RECORD\nZZZ041   BAL   R14,ENTRY980        CLOSE THE INPUT FILE\n         BAL   R14,ENTRY985        CLOSE THE OUTPUT FILE\n         BAL   R14,ENTRY990        CLOSE THE VSAM JOURNAL\n         LTR   R7,R7               WERE ANY RECORDS WRITTEN?\n         BZ    EXIT040             NO, ALL DONE\n         B     ENTRY070            GO AND CLEAR ACTIVE FILE\nEXIT040  EQU   *\n         B     EXIT0\n         EJECT\n***********************************************************************\n*        REBUILD THE VSAM FILE FROM ALL THE INPUT FILES\n***********************************************************************\nENTRY050 TM    FUNC,REBUILD        ARE WE REBUILDING\n         BZ    ENTRY060            NO - TRY FIX TAPE OPTION\n         MVC   HLINES,=PL4'0'      ZERO LINE COUNTER\n         MVC   HTTR,=X'000000'     ZERO THE TTR\n         BAL   R14,ENTRY910        ALLOCATE AND OPEN JOURNAL\n         TM    RBLDSW,X'01'        REBUILD ACTIVE\n         BZ    CCC050              NO - BYPASS REBUILD ACTIVE\n         BAL   R14,ENTRY900        ALLOCATE THE ACTIVE FILE\n         BAL   R14,ENTRY700        OPEN THE ACTIVE FILE\n         MVI   WHERETO,TOBBB050    SET EOF WHERE TO!!\n         LA    R8,INPUT            SET UP DCB ADDRESSABILITY\n         RDJFCB INPUT              GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755        GET DSN AND DEVICE TYPE\n         SR    R7,R7               CLEAR INPUT RECORD COUNTER\n         OI    MISC,FRSTIME        SET ON\n         MVI   INPTYPE,ACTFILE     SET FILE TYPE TO ACTIVE\nAAA050   BAL   R14,ENTRY710        READ THE FILE\n         B     AAA050              GO GET NEXT\nBBB050   BAL   R14,ENTRY980        CLOSE THE ACTIVE FILE\n         LTR   R7,R7               WERE ANY RECORDS WRITTEN?\n         BZ    CCC050              NO BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE LAST VSAM RECORD\nCCC050   TM    RBLDSW,X'02'        REBUILD DAILY\n         BZ    FFF050              NO - BYPASS REBUILD DAILY\n         MVC   PASSTYPE,DAYLE      GET ALL DAILY SYSOUT DATASETS\n         NI    MISC,255-PASSLAST   GET ALL\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVI   LOOKFOR,BOTH        LOOKING FOR A DISK OR TAPE\n         BAL   R14,ENTRY800        GET ALL ARCHIVE TAPE USED\n         CLI   PASSDSN,C' '        ANY MORE DAILYS  ONLINE\n         BE    FFF050              DONE WITH DAILY\n         BAL   R14,ENTRY930        ALLOCATE THE DAILY INPUT FILE\n         BAL   R14,ENTRY700        OPEN THE INPUT FILE\n         LA    R8,INPUT            SET UP DCB ADDRESSABILITY\n         RDJFCB INPUT              GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755        GET DSN AND DEVICE TYPE\n         MVI   INPTYPE,DAYFILE     SET FILE TYPE TO DAILY\n         OI    MISC,FRSTIME        SET ON\n         SR    R7,R7               CLEAR INPUT RECORD COUNTER\n         MVI   WHERETO,TOEEE050    SET EOF WHERE TO!!\nDDD050   BAL   R14,ENTRY710        READ THE FILE\n         B     DDD050              LOOP\nEEE050   BAL   R14,ENTRY980        CLOSE IT\n         LTR   R7,R7               ANY RECORDS WRITTEN\n         BZ    CCC050              NO - BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE LAST VSAM RECORD\n         B     CCC050              TRY FOR MORE DAILYS\nFFF050   TM    RBLDSW,X'04'        REBUILD ARCHIVE\n         BZ    III050              NO - BYPASS REBUILD ARCHIVE\n         MVC   PASSTYPE,ARCHV      GET ALL ARCHIVE DATASETS\n         NI    MISC,255-PASSLAST   GET ALL\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1     MOVE PREFIX NAME\n         MVI   LOOKFOR,BOTH        LOOKING FOR A DISK OR TAPE\n         BAL   R14,ENTRY800        GET ALL ARCHIVE TAPE USED\n         CLI   PASSDSN,C' '        ANY MORE ARCHIVES\n         BE    III050              DONE WITH ARCHIVE\n         BAL   R14,ENTRY930        ALLOCATE THE INPUT ARCHIVE FILE\n         BAL   R14,ENTRY700        OPEN THE INPUT FILE\n         LA    R8,INPUT            SET UP DCB ADDRESSABILITY\n         RDJFCB INPUT              GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755        GET DSN AND DEVICE TYPE\n         OI    MISC,FRSTIME        SET ON\n         SR    R7,R7               CLEAR RECORD COUNTER\n         MVI   WHERETO,TOHHH050    SET EOF WHERE TO!!\nGGG050   BAL   R14,ENTRY710        READ THE FILE\n         B     GGG050              LOOP\nHHH050   BAL   R14,ENTRY980        CLOSE IT\n         LTR   R7,R7               ANY RECORDS WRITTEN\n         BZ    FFF050              NO - BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE LAST VSAM RECORD\n         B     FFF050              TRY FOR MORE DAILYS\nIII050   CLI   PREFIX2,C' '        ANY PREFIX 2\n         BE    LLL050              END\n         TM    RBLDSW,X'08'        REBUILD OLD ARCHIVE\n         BZ    LLL050              NO - BYPASS REBUILD OLD\n         MVC   PASSTYPE,ARCHV           ##### OLD=ARCHIVE\n*        MVC   PASSTYPE,DAYLE           ##### OLD=DAILY\n         NI    MISC,255-PASSLAST   GET ALL\n         MVC   PASSPFX,PREFIX2     MOVE IN OLD PREFIX\n         MVC   PASSLEN,PREFIX2L    MOVE PREFIX LENGTH\n         MVI   LOOKFOR,BOTH        LOOKING FOR A DISK OR TAPE\n         BAL   R14,ENTRY800        GET ALL ARCHIVE TAPE USED\n         CLI   PASSDSN,C' '        ANY MORE OLD ARCHIVES\n         BE    LLL050              DONE WITH OLD ARCHIVES\n         BAL   R14,ENTRY930        ALLOCATE THE OLD ARCHIVE FILES\n         BAL   R14,ENTRY700        OPEN THE INPUT FILE\n         LA    R8,INPUT            SET UP DCB ADDRESSABILITY\n         RDJFCB INPUT              GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755        GET DSN AND DEVICE TYPE\n         MVI   HADR,C'O'           SET TO OLD SYSTEM\n         OI    MISC,FRSTIME        SET ON\n         SR    R7,R7               CLEAR RECORD COUNTER\n         MVI   WHERETO,TOKKK050    SET EOF WHERE TO!!\nJJJ050   BAL   R14,ENTRY710        READ THE FILE\n         B     JJJ050              LOOP\nKKK050   BAL   R14,ENTRY980        CLOSE IT\n         LTR   R7,R7               ANY RECORDS WRITTEN\n         BZ    III050              NO - BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE LAST VSAM RECORD\n         B     III050              TRY FOR MORE\nLLL050   BAL   R14,ENTRY990        CLOSE THE VSAM FILE\nEXIT050  EQU   *\n         B     EXIT0               ALL DONE\n         EJECT\n***********************************************************************\n*        TAKE A TAPE INPUT (SUPPLIED IN //INPUT DD CARD)\n*        AND CREATE A NEW OUTPUT DAILY OR ARCHIVE TAPE\n*        ALONG WITH ADDING OR UPDATING THE VSAM JOURNAL\n***********************************************************************\nENTRY060 TM    FUNC,FIXTAPE        ARE WE FIXING TAPE\n         BZ    ENTRY070            NO -MUST BE FORMATTING\n         BAL   R14,ENTRY910        ALLOCATE AND OPEN JOURNAL\n         TM    COPYTO,FIXDAY       TO DAILY TAPE\n         BZ    AAA060              NO - MUST BE ARCHIVE\n         MVC   PASSTYPE,DAYLED     GET LAST DAILY WITH\n*                                  A DATE STAMP (NOT OLD GDG)\n         MVC   NEWTYPE,DAYLE\n         B     BBB060\nAAA060   MVC   PASSTYPE,ARCHVD     GET LAST ARCHIVE WITH\n*                                   A DATE STAMP (NOT OLD GDG)\n         MVC   NEWTYPE,ARCHV       SET TO ARCHIVE FOR ALLOC\nBBB060   OI    MISC,PASSLAST       JUST GET LAST ONE\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVI   LOOKFOR,ATAPE       LOOK FOR LAST TAPE USED\n         BAL   R14,ENTRY800        GO GET DSN\n         CLI   PASSDSN,C' '        ARE THERE ANY\n         BNE   CCC060              YES - MOD ON\n         BAL   R14,ENTRY920        ALLOCATE A NEW TAPE\n         B     DDD060\nCCC060   BAL   R14,ENTRY925        ALLOCATE AN EXISTING TAPE\nDDD060   BAL   R14,ENTRY750        OPEN THE OUTPUT FILE\nEEE060   LA    R8,INPUT            SET UP ADDRESSABILTY\n         MVC   DCBDDNAM,=CL8'INPUT' SET INPUT AS DEFAULT\n         BAL   R14,ENTRY700        OPEN THE INPUT TAPE\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EEE061             NO - BYPASS REPORTING\n         RDJFCB INPUT             GET JFCB FOR REPORT LINE\n         MVC   RPTLINE(29),RPTIDS REPORT TYPE\n         MVC   RPTLINE+29(44),JFCB MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEEE061   MVI   WHERETO,TOGGG060    SET EOF WHERE TO!!\n         OI    MISC,FRSTIME+RITETAPE SET ON\n         SR    R7,R7               CLEAR RECORD COUNTER\n         MVI   INPTYPE,INPFILE     SET TYPE TO INPUT\nFFF060   BAL   R14,ENTRY710        READ THE FILE\n         BAL   R14,ENTRY760        WRITE IT\n         B     FFF060              READ AGAIN\nGGG060   LTR   R7,R7               ANY RECORDS\n         BZ    HHH060              NO - BYPASS UPDATE LAST RECORD\n         BAL   R14,ENTRY650        UPDATE THE LAST VSAM RECORD\nHHH060   BAL   R14,ENTRY980        CLOSE THE INPUT FILE\n         BAL   R14,ENTRY985        CLOSE THE OUTPUT FILE\n         BAL   R14,ENTRY990        CLOSE THE VSAM JOURNAL\nEXIT060  EQU   *\n         B     EXIT0\n         EJECT\n***********************************************************************\n*        FORMAT THE ACTIVE FILE\n***********************************************************************\nENTRY070 EQU   *\n         TM    FUNC,RPTALLO         REPORT WANTED\n         BZ    AAA070               NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTFORM  REPORT TYPE\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nAAA070   TM    FUNC,FORMAT          FORMATTING FILE ONLY\n         BZ    BBB070               NO  - BR AROUND\n         SR    R7,R7                CLEAR R7\n         SR    R0,R0                CLEAR R0\n         BCTR  R7,R0                SET TO MAX\nBBB070   BAL   R14,ENTRY900         ALLOC ACTIVE FILE\n         LA    R8,FORMDCB           SET UP ADDRESABILITY\n         MVC   DCBDDNAM,ACTDDN      MOVE IN DDNAME\n         BAL   R14,ENTRY995         FORMAT IT\n*\n*    EXPECT D37 IF FORMATTING ONLY\n*\nEXIT070  EQU   *\n         B     EXIT0                DONE\n         EJECT\n***********************************************************************\n*        END OF FILE PROCESSING ROUTINE - GO TO ??????                *\n***********************************************************************\nENTRY100 DS    0H\n         TM    WHERETO,TOYYY040\n         BO    YYY040\n         TM    WHERETO,TOFFF040\n         BO    FFF040\n         TM    WHERETO,TOBBB050\n         BO    BBB050\n         TM    WHERETO,TOEEE050\n         BO    EEE050\n         TM    WHERETO,TOHHH050\n         BO    HHH050\n         TM    WHERETO,TOKKK050\n         BO    KKK050\n         TM    WHERETO,TOGGG060\n         BO    GGG060\n         B     ABEND24\n         EJECT\n***********************************************************************\n*        READ THE VSAM JOURNAL FILE                                   *\n***********************************************************************\nENTRY600 DS    0H\n         ST    R14,SAVE600\n         CLI   RECYEAR,C' '    FULL YEAR BLANK\n         BNE   AAA600          NO - MOVE IT\n         MVC   RECYEAR(2),=C'19' SET TO 1900\n         MVC   RECYEAR+2(2),RECDATE+6  MOVE IN YEAR\n         CLC   RECDATE+6(2),=C'75'  LESS THAN 1975\n         BH    AAA600              NO - CONTINUE\n         MVC   RECYEAR(2),=C'20'   MUST BE 2000\nAAA600   MVC   HDATE(4),RECYEAR    MOVE DATA FROM SEPARATOR\n         MVC   HDATE+4(2),RECDATE    MOVE DATA FROM SEPARATOR\n         MVC   HDATE+6(2),RECDATE+3  MOVE DATA FROM SEPARATOR\n         PACK  PDATE,HDATE           PACK DATE\n         MVC   JDATE,=P'099999999'   SET TO 9999999\n         SP    JDATE,PDATE         REVERSE DATE\n         MVC   HTIME(2),RECTIME    MOVE DATA FROM SEPARATOR\n         MVC   HTIME+2(2),RECTIME+3  MOVE DATA FROM SEPARATOR\n         MVC   HTIME+4(2),RECTIME+6  MOVE DATA FROM SEPARATOR\n         PACK  PTIME,HTIME          PACK TIME\n         MVC   JTIME,=P'0999999'    SET TO 9999999\n         SP    JTIME,PTIME          REVERSE TIME\n         MVC   JJOBN,RECJNAME  MOVE DATA FROM SEPARATOR\n         MVC   JJOB#(5),RECJNUM+3   MOVE DATA FROM SEPARATOR\n         MVC   JJOB#+5(3),RECJNUM   MOVE DATA FROM SEPARATOR\n*\n         MVI   SPECPROC,X'00'       SET TO NO SPECIAL PREOCESSING\n         TM    FUNC,SPECDEL         SPECIAL DELETE PROCESSING\n         BZ    FFF600               NO - BYPASS TABLE COMPARE\n*\n         USING SPECAREA,R15\n         L     R15,SAVESPEC         SET TO DELETE GETMAINED AREA\nBBB600   CLI   SPECNAME,X'00'       END OF NAME LIST\n         BE    FFF600               YES - NO MATCH\n         L     R14,SPECLGTH         SET R14 TO LENGTH OF COMPARE\n         EX    R14,SPECOMPR         COMPARE JOBNAME\n         BNE   DDD600               NO MATCH - TRY NEXT\n         CLI   SPECNUM,C' '         JOB NUMBER COMPARE ??\n         BE    CCC600               NO - DELETE IT\n         CLC   SPECNUM,RECJNUM      JOB NUMBER MATCHES\n         BNE   DDD600               NO - GET NEXT ENTRY\nCCC600   OI    SPECPROC,DELIT       SET ON SWITCH\n         B     FFF600               CONTINUE\nDDD600   LA    R15,20(R15)          BUMP TO NEXT ENTRY\n         B     BBB600               TRY NEXT COMPARE\n*\nSPECOMPR CLC   RECJNAME(0),SPECNAME COMPARE FOR DELETE JOBNAME\n         DROP  R15\nFFF600   EQU   *\n*\n         MODCB RPL=JOURNRPL,OPTCD=(UPD) SET RPL TO UPDATE MODE\n         GET   RPL=JOURNRPL         GET THE VSAM RECORD\n         LTR   R15,R15              OK?\n         BZ    XXX600               YES - CONTINUE\n*\n* THE VSAM RECORD SHOULD ALWAYS BE THERE (ADDED ONLY WHEN FIRST\n* PLACED ON THE ACTIVE FILE. THIS PROGRAM WILL ADD NEW VSAM\n* RECORDS IF REBUILDING THE VSAM FILE OR FIXING A TAPE OR IF\n* NEEDED TO SYNC THE JOURNAL AND THE ACTIVE IT IS CURRENTLY\n* MOVING TO DAILY.\n*\n         OI    SPECPROC,NOTHERE     SET JOURNAL REC NOT THERE\n         TM    FUNC,REBUILD+FIXTAPE REBUILDING OR FIXING TAPE\n         BZ    VVV600               NO - ISSUE WTO\n         B     WWW600               BRANCH AROUND MESSAGE\nVVV600   EQU   *\n         TM    SPECPROC,DELIT       ARE WE DELETING IT ANYWAY???\n         BO    WWW600               YES  - BYPASS \"SYNC\" MESSAGES\n         WTO   'SOUTWTR - SYNCHRONIZING JOURNAL AND REPORT FILES'\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    WWW600             NO - BYPASS REPORTING\n         MVC   RPTLINE(50),SYNCLINE REPORT TYPE\n         MVC   RPTLINE+8(8),RECJNAME\n         MVC   RPTLINE+17(8),RECJNUM\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\n*\nWWW600   MODCB RPL=JOURNRPL,OPTCD=(NUP) SET RPL TO ADD NEW RECORD\n*\n         MVC   JMCLASS,RECMSGCL     PUT MSGCLASS IN JOURNAL REC\n         MVC   JDAY,RECDAY          SAVE DAY\nXXX600   BAL   R14,ENTRY610         GET POSITION IN OUTPUT FILE\nEXIT600  L     R14,SAVE600\n         BR    R14\nSAVE600  DC    F'0'\n         EJECT\n***********************************************************************\n*       GET THE TTR IF WRITING TO DISK                                *\n***********************************************************************\nENTRY610 DS    0H\n         ST    R14,SAVE610\n         XC    HTTR,HTTR       ZERO TTR AS DEFAULT (NO TTR)\n         CLC   TRKSPER,=F'0'   DO WE HAVE ANY TRACKS/CYL\n         BE    EXIT610         NO, NOT A DASD DEVICE\n         TM    FUNC,REBUILD    REBUILDING????\n         BZ    AAA610\n         LA    R8,INPUT        SET UP ADDRESSABILITY\n         B     BBB610\nAAA610   LA    R8,OUTPUT       SET UP ADDRESSABILITY\nBBB610   L     R14,DCBDEBAD    OUTPUT DCB'S DEB\n         CLC   DCBFDAD+3(4),38(R14) CHECK WITHIN EXTENT\n         BL    EXIT610         LOW, SKIP TTR UPDATE\n         CLC   DCBFDAD+3(4),42(R14) CHECK WITHIN EXTENT\n         BH    EXIT610         HIGH, (SECOND XTENT) SKIP TTR UPDATE\n         SR    R2,R2           CLEAR FOR ICM\n         SR    R3,R3           CLEAR FOR ICM\n         ICM   R3,3,DCBFDAD+3  CURRENT CYLINDER NUMBER\n         ICM   R2,3,38(R14)    GET START CYLINDER NUMBER\n         SR    R3,R2           GET RELATIVE CYLINDER\n         SR    R2,R2           CLEAR FOR MULTIPLY\n         M     R2,TRKSPER      MULTIPLY BY TRKS/CYL\n         SR    R15,R15         CLEAR FOR ICM\n         ICM   R15,3,DCBFDAD+5 CURRENT TRACK NUMBER\n         IC    R14,DCBFDAD+7   GET RECORD NUMBER\n         AR    R3,R15          NOW HAVE REAL 'TT'\n         BZ    DDD610          ZERO TTR, SKIP DECREMENT\n         CLI   DCBFDAD+7,X'01' STAY AWAY FROM ZERO\n         BH    CCC610          NO, DECREMENT RECORD NUMBER\n         SH    R3,=H'1'        DECREMENT TRACK NUMBER\n         B     DDD610          CONTINUE\nCCC610   BCTR  R14,R0          DECRMENT FOR SAM-E\nDDD610   STC   R14,HTTR+2       INCLUDE UPDATED TTR\n         STCM  R3,3,HTTR        MOVE TO HOLD TTR\nEXIT610  L     R14,SAVE610\n         BR    R14\nSAVE610  DC    F'0'\n         EJECT\n***********************************************************************\n*        UPDATE THE VSAM JOURNAL FILE                                 *\n***********************************************************************\nENTRY650 DS    0H\n         ST    R14,SAVE650\n         MVC   JTTR,HTTR        MOVE IN TTR\n         MVC   JDEVT,HDEVT      MOVE IN DEVICE TYPE\n         MVC   JADR,HADR        MOVE IN TYPE CODE\n         MVC   JSTAMP,HSTAMP    MOVE IN STAMP NUMBER\n         MVC   JLINES,HLINES    MOVE LINE COUNT IN\n*\n         TM    SPECPROC,DELIT   DELETING RECORD FROM JOURNAL\n         BO    AAA650           YES - DELETE IT\n         PUT   RPL=JOURNRPL     WRITE OUT UPDATED/NEW JOURNAL RECORD\n         LTR   R15,R15          UPDATE OK\n         BNZ   ABEND8           NO - ABEND\n         B     XXX650\nAAA650   TM    SPECPROC,NOTHERE WAS RECORD THERE TO BEGIN WITH\n         BO    BBB650           NO - JUST REPORT ON IT\n         ERASE RPL=JOURNRPL     DELETE IT\n         LTR   R15,R15          DELETE OK ???\n         BNZ   ABEND28          NO - ABEND\nBBB650   MVC   RPTLINE(50),DELTLINE REPORT TYPE\n         MVC   RPTLINE+8(8),JJOBN\n         MVC   RPTLINE+17(3),JJOB#+5\n         MVC   RPTLINE+20(5),JJOB#\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nXXX650   SP    HLINES,HLINES    CLEAR LINE COUNTER\nEXIT650  L     R14,SAVE650\n         BR    R14\nSAVE650  DC    F'0'\n         EJECT\n***********************************************************************\n*        OPEN THE INPUT FILES AND DETERMINE IF FIXED OR VARIABLE      *\n***********************************************************************\nENTRY700 DS    0H\n         ST    R14,SAVE700\n         OPEN  (INPUT,(INPUT)) OPEN THE INPUT FILE\n         TM    INPUT+48,X'10'  CHECK IF IT OPENED\n         BZ    ABEND9          NO, INPUT FAILED TO OPEN\n         TM    INPUT+36,X'80'  CHECK IF FIXED RECFM\n         BZ    AAA700          GO SET VARIABLE\n         MVI   FIXVAR,FIXREC   SET TO FIXED RECORD\n         LA    R6,RECORDF      FIXED LENGTH RECORD\n         STCM  R6,7,EXITREC    STORE RECORD ADDRESS FOR EXIT\n         B     EXIT700         GO READ FIRST RECORD\nAAA700   EQU   *\n         LA    R6,RECOUT       DE-COMPRESSED RECORD\n         STCM  R6,7,EXITREC    STORE RECORD ADDRESS FOR EXIT\n         MVI   FIXVAR,VARREC   SET TO VARIABLE\nEXIT700  L     R14,SAVE700\n         BR    R14\nSAVE700  DC    F'0'\n         EJECT\n***********************************************************************\n*        READ THE INPUT RECORDS AND DETERMINE IF THERE IS A           *\n*        SEPERATOR RECORD; IF IT IS, GET THE JOURNAL RECORD           *\n***********************************************************************\nENTRY710 DS    0H\n         ST    R14,SAVE710\n         MVC   RECSEP,BLANKS   CLEAR AREA BEFORE READ\nAAA710   TM    FIXVAR,FIXREC   IS RECORD FIXED\n         BZ    BBB710          NO - READ IN VARIABLE\n         GET   INPUT,RECORDF   GET A FIXED  SYSOUT RECORD\n         B     CCC710\nBBB710   GET   INPUT,RECORDV   GET A VARIABLE RECORD\nCCC710   CLI   RECSEP,C'S'     POSSIBLE  SEPARATOR RECORD\n         BNE   CCC711          NO - CONTINUE\n         CLC   RECSEP,SEPLIT   IS THIS A SEPARATOR RECORD\n         BE    DDD710          YES - CONTINUE\nCCC711   NI    EXITSW,255-SEP    RESET SEP FLAG\n         OI    EXITSW,REC        RECORD FOR EXIT\n         B     FFF710          CONTINUE\nDDD710   TM    INPTYPE,ACTFILE IS THIS AN ACTIVE FILE\n         BZ    DDD711          NO - BYPASS PAD CHECK\n         CLC   RECPAD,=CL5' PAD ' IS THIS A 'PAD' RECORD?\n         BE    ENTRY100        YES, GO TO END OF FILE PROCESSING\nDDD711   NI    EXITSW,255-REC  RESET REC FLAG\n         OI    EXITSW,SEP      SEPARATOR RECORD FOR EXIT\n         TM    MISC,FRSTIME    IS THIS FIRST TIME THRU\n         BO    DDD712          YES - BR AROUND UPDATE\n         BAL   R14,ENTRY650    UPDATE JOURNAL\nDDD712   NI    MISC,255-FRSTIME SET OFF\n         TM    MISC,NEEDNEW    NEED NEW TAPE ?\n         BZ    EEE710          NO - BR AROUND\n         BAL   R14,ENTRY985    CLOSE OUTPUT\n         BAL   R14,ENTRY920    ALLOCATE A NEW TAPE\n         BAL   R14,ENTRY750    OPEN OUTPUT FILE\nEEE710   BAL   R14,ENTRY600    READ THE VSAM FILE\n         TM    FUNC,REBUILD    REBUILDING???\n         BZ    FFF710          NO - BYPASS TTR CALC\n         BAL   R14,ENTRY610    GET TTR\nFFF710   LA    R7,1(R7)        BUMP RECORD COUNT\n         TM    FUNC,REBUILD    REBUILDING????\n         BZ    EXIT710         NO - BYPASS COUNTER\n         AP    HLINES,=P'1'    ADD ONE\nEXIT710  L     R14,SAVE710\n         BR    R14\nSAVE710  DC    F'0'\n         EJECT\n***********************************************************************\n*        OPEN THE OUTPUT FILE AND GET DSN FOR JOURNAL UPDATE          *\n*        ALSO DETERMINE IF DISK FOR TTR CALCULATION IF NEEDED         *\n***********************************************************************\nENTRY750 DS    0H\n         ST    R14,SAVE750\n         OPEN  (OUTPUT,(OUTPUT))  OPEN THE OUTPUT FILES\n         TM    OUTPUT+48,X'10' CHECK IF IT OPENED\n         BZ    ABEND10         NO, OUTPUT FAILED TO OPEN\n         LA    R8,OUTPUT       SET UP DCB ADDRESSABILITY\n         RDJFCB OUTPUT         GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755    GET DSN AND DEVICE\nEXIT750  L     R14,SAVE750\n         BR    R14\nSAVE750  DC    F'0'\n         EJECT\n***********************************************************************\n*        GET DSN AND DEVICE TYPE FOR JOURNAL                          *\n***********************************************************************\nENTRY755 DS    0H\n         ST    R14,SAVE755\n         LA    R4,JFCB          SET R4 TO JFCB\n         LA    R4,43(R4)        SET TO END\n         LA    R5,44            MAX DSN = 44\nAAA755   CLC   0(2,R4),=C'.D'      DATE STAMP\n         BE    BBB755           YES - DONE\n         CLC   0(2,R4),=C'.G'      GENERATION NUMBER (OLD SYSTEM)\n         BE    EEE755           YES - DONE\n         CLC   0(8,R4),=C'.ACTIVE ' ACTIVE FILE (ONLY ON REBUILD)\n         BE    FFF755           YES - DONE\n         SH    R4,=H'1'         BACK UP ONE\n         BCT   R5,AAA755        TRY AGAIN\n         B     ABEND11          INVALID DSN\nBBB755   MVC   HOLDSTP(7),2(R4)  MOVE IN DATE STAMP\n         MVC   HOLDSTP+7(4),11(R4)  MOVE IN TIME STAMP\n         B     GGG755           BRANCH\nEEE755   MVC   HOLDSTP(5),=C'99999' SET UP HIGH\n         MVC   HOLDSTP+5(4),2(R4) MOVE IN GDG\n         MVC   HOLDSTP+9(2),7(R4) MOVE IN VERSION\n         B     GGG755           BRANCH\nFFF755   MVC   HOLDSTP(11),=C'99999999999' SET UP HIGH\nGGG755   PACK  HSTAMP,HOLDSTP   PACK IT\n         MVC   HADR,=C'A'        MOVE IN ACTIVE BY DEFAULT\n         SH    R4,=H'5'         BACKUP 5 MORE\n         CLC   0(5,R4),=C'DAILY'  IS IT DAILY FILE\n         BE    HHH755            YES - SET NAME\n         SH    R4,=H'2'         BACKUP 2 MORE\n         CLC   0(7,R4),=C'ARCHIVE' IS IT ARCHIVE FILE\n         BNE   III755            NO - MUST BE ACTIVE\n         MVC   HADR,=C'R'        MOVE IN ARCHIVE LETTER\n         B     III755            GO CHECK DEVICE\nHHH755   MVC   HADR,=C'D'        MOVE IN DAILY LETTER\nIII755   TM    DCBTRBAL-1,X'20' DASD DEVICE CLASS?\n         BZ    MMM755          NO, SKIP TTR PROCESSING\nJJJ755   LA    R15,DEVT#       SET LOOP CONTROL\n         LA    R14,DEVT        ADDRESS OF DEVICE TABLE\nKKK755   CLC   0(1,R14),DCBTRBAL-1 CHECK DEVICE TYPE\n         BE    LLL755          FOUND, CONTINUE\n         LA    R14,8(R14)      NEXT ENTRY\n         BCT   R15,KKK755      CHECK NEXT DEVICE ENTRY\n         WTO   'SOUTWTR - UNSUPPORTED OUTPUT DISK DEVICE TYPE'\n         B     ABEND12         ERROR RETURN\nLLL755   MVC   HDEVT,0(R14)    STORE DEVICE TYPE\n         LH    R14,2(R14)      GET NUMBER OF TRACKS/CYLINDER\n         ST    R14,TRKSPER     SAVE FOR LATER USE\n         B     EXIT755\nMMM755   MVC   HDEVT,=C'T'     NOT DISK MUST BE TAPE\n*\n         L     R14,DCBDEBAD    GET DEB ADDR FOR THIS DCB\n         L     R14,32(R14)     GET UCB ADDR FOR THIS DEB\n         MVC   TYPEUCB,16(R14) DEVICE TYPE FROM UCB\n*\n         LA    R15,TAPETYP#    NUMBER OF ENTRIES IN TABLE\n         LA    R14,TAPETYPE    ADDRESS OF TAPE TYPE TABLE\nNNN755   CLC   0(4,R14),TYPEUCB CHECK DEVICE UCB\n         BE    OOO755          MATCH\n         LA    R14,20(R14)     BUMP TO NEXT\n         BCT   R15,NNN755      TRY AGAIN\n         WTO   'SOUTWTR - UNSUPPORTED OUTPUT TAPE DEVICE UCB'\n         B     ABEND7          ERROR RETURN\nOOO755   MVC   RPTLINE(29),RPTTUCB\n         MVC   RPTLINE+20(12),8(R14)\n         CLC   4(4,R14),=F'0'  3480 ?????\n         BNE   RRR755          YES - MOVE BLOCK COUNT\n*\n         LA    R15,TAPEDEN#    SET LOOP CONTROL\n         LA    R14,TAPEDEN ADDRESS OF TAPE TABLE\nPPP755   CLC   0(1,R14),DCBDEN CHECK DEVICE DENSITY\n         BE    QQQ755          MATCH\n         LA    R14,16(R14)      BUMP TO NEXT\n         BCT   R15,PPP755      TRY AGAIN\n         WTO   'SOUTWTR - UNSUPPORTED OUTPUT TAPE DENSITY'\n         B     ABEND13         ERROR RETURN\nQQQ755   MVC   RPTLINE+24(8),8(R14)\nRRR755   MVC   MAXBLOCK,4(R14) SAVE MAX BLOCKS TO WRITE\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT755            NO - BYPASS REPORTING\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT755  L     R14,SAVE755\n         BR    R14\nSAVE755  DC    F'0'\n         EJECT\n***********************************************************************\n*        WRITE THE OUTPUT FILE AND OPTIONAL REPORTS                   *\n***********************************************************************\nENTRY760 DS    0H\n         ST    R14,SAVE760\n         AP    HLINES,=P'1'    ADD ONE TO LINECOUNT\n         CLC   RECSEP,SEPLIT   IS THIS A SEPARATOR RECORD\n         BE    BBB760          NO, PASS IT ON\n         TM    FIXVAR,FIXREC   IS IT FIXED RECORD\n         BNZ   AAA760          YES - TRY TO COMPRESS IT\n         MVC   OUTREC,RECORDV  MUST BE COMPRESSED ALREADY\n         B     DDD760          WRITE IT\nAAA760   ICM   R15,15,COMPADDR ADDRESS OF EXIT ROUTINE\n         MVC   CPRTYPE,=X'FF000000' SET CODE TO COMPRESS\n         MVC   INRECL,=H'133'  INLENGTH 133\n         MVC   RECLEN,=H'133'  MAX OUT 133\n         LA    R1,PARMCPR      ADDRESS OF COMP PARM\n         BALR  R14,R15         GO TO COMPRESSION ROUTINE\n         LTR   R15,R15         COMPRESS OK\n         BZ    CCC760          GO WRITE IT\nBBB760   EQU   *               WRITE OUT RECORD UN-COMPRESSED\n         MVC   RECLEN,=H'137'  SET LEN TO 137\n         MVC   RECOUT,RECORDF  MOVE IN FIXED RECORD\nCCC760   MVC   RECTT,=H'0'     ZERO FIELD\nDDD760   EQU   *\n         TM    SPECPROC,DELIT  DELETING JOB FROM SYSTEM???\n         BO    GGG760          YES - BYPASS WRITE TO OUTPUT\n         PUT   OUTPUT,OUTREC   COPY TO OUTPUT FILE\n         TM    MISC,RITETAPE   WRITING TO TAPE??\n         BZ    GGG760          NO - BYPASS BLOCK CHECK\n         LA    R8,OUTPUT       SET UP ADDRESSABILITY\n         CLC   PREVBLCT,DCBBLKCT COMPARE PREVIOUS BLOCK COUNT\n         BH    FFF760            HIGHER - MUST HAVE MOUNTED 2ND REEL\n*                                SHOULD ONLY HAPPEN WILL SHORT REELS\n*                                (APPROX 2000 FEET OR LESS)\n         MVC   PREVBLCT,DCBBLKCT SAVE FOR NEXT COMPARE\nEEE760   CLC   MAXBLOCK,DCBBLKCT MAX BLOCKS WRITTEN\n         BH    GGG760\nFFF760   OI    MISC,NEEDNEW    NEED NEW TAPE ON NEXT SEPERATOR\nGGG760   TM    INPTYPE,ACTFILE IS THIS THE ACTIVE FILE\n         BZ    EXIT760         NO - BYPASS EXIT\n         BAL   R14,ENTRY770    PASS DATA THRU SOUTXIT\nEXIT760  L     R14,SAVE760\n         BR    R14\nSAVE760  DC    F'0'\n         EJECT\n***********************************************************************\n*        RUN ACTIVE FILE THRU SOUTXIT ROUTINE                         *\n***********************************************************************\nENTRY770 DS    0H\n         ST    R14,SAVE770\n         ICM   R15,15,EXITADDR ADDRESS OF EXIT ROUTINE\n         BZ    EXIT770         NO EXIT, BYPASS\n*\n*  FOLLOWING LOGIC SHOULD NEVER BE USED, UNLESS THE ACTIVE FILE\n*  IS IN A COMPRESSED STATE. AS OF NOW, THE ACTIVE FILE IS NOT\n*  COMPRESSED.\n*\n         TM    FIXVAR,FIXREC   FIXED LENGTH RECORD\n         BNZ   AAA770          YES - BYPASS DECOMPRESSION\n         MVC   RECLEN,=H'133' SET MAX EXPANSION LENGTH\n         ICM   R15,15,COMPADDR ADDRESS OF EXIT ROUTINE\n         MVC   CPRTYPE,=X'00000000' SET FOR DECOMPRESSION\n         LA    R1,PARMCPR      ADDRESS OF COMP PARM\n         BALR  R14,R15         GO TO COMPRESSION ROUTINE\n         LTR   R15,R15         DE-COMPRESS OK\n         BZ    AAA770          YES- TRY REPORT EXIT\n         MVC   RECOUT,RECORDF  PASS COMPRESSED RECORD?\n*\nAAA770   ICM   R15,15,EXITADDR ADDRESS OF EXIT ROUTINE\n         LA    R1,EXITPARM     ADDRESS OF EXIT PARM\n         BALR  R14,R15         GO TO EXIT ROUTINE\nEXIT770  L     R14,SAVE770\n         BR    R14\nSAVE770  DC    F'0'\n         EJECT\n***********************************************************************\n*        CALL TO LOCINDEX ROUTINE TO LIST ALL DSNS WITH PREFIX        *\n***********************************************************************\nENTRY800 DS    0H\n         ST    R14,SAVE800\n         ICM   R6,15,SAVEWORK      RESTORE WORK ADDRESS\n         BNZ   AAA800              HAVE ALREADY - BR AROUND GETMAIN\n         GETMAIN R,LV=4096\n         LR    R6,R1               SAVE ADDR OF WORK AREA\n         ST    R6,SAVEWORK         SAVE ADDR OF WORKAREA\n         USING WORKSPC,R6          INFORM ASSEMBLER\nAAA800   LA    R0,LOCINDXW         POINT TO LOCINDEX WORK AREA\n         ST    R0,LOCIPARM+12      SAVE ADDR IN PARM LIST\n         MVC   PASSDSN,BLANKS      CLEAR PASSING DSN\n         MVC   LOCIPFX(25),PASSPFX MOVE IN PREFIX\n         LA    R4,LOCIPFX          SET R4 TO ADDR OF PREFIX\n         L     R5,PASSLEN          SET R5 TO LENGTH\n         LA    R4,0(R5,R4)         BUMP R4 TO END OF PREFIX\n         MVC   0(10,R4),PASSTYPE   ADD TYPE DAY/ARCHIVE\n         MVI   LOCIPARM+12,X'80'   INDICATE END OF PARM LIST\nBBB800   ICM   R15,15,LOCIADDR     POINT TO PARM LIST\n         LA    R1,LOCIPARM         POINT TO PARM LIST\n         BALR  R14,R15             GO TO LOCINDEX\n         B     *+4(R15)            BRANCH , DEP ON RETURN CODE\n         B     CCC800              HAVE A DASD DSN\n         B     EXIT800             INDEX STRUCTURE NOT FOUND\n         B     DDD800              DSN ON TAPE\n         B     CCC800              MULTI VOLUME DSN\n         B     EXIT800             DONE\n         B     ABEND14             CATALOG ERROR\nCCC800   EQU   *\n         TM    LOOKFOR,ADISK       LOOKING FOR LAST DISK DSN?\n         BZ    BBB800              NO - TRY FOR NEXT ONE\n         B     EEE800              SAVE DSN AND TRY AGAIN\nDDD800   EQU   *\n         TM    LOOKFOR,ATAPE       LOOKING FOR LAST TAPE DSN?\n         BZ    BBB800              NO - TRY FOR NEXT ONE\nEEE800   MVC   PASSDSN,LOCIDSN     SAVE DSN TO PASS BACK\n         TM    MISC,PASSLAST       PASSING JUST LAST ONE?\n         BO    BBB800              YES-ARE THERE ANY MORE?\nEXIT800  L     R14,SAVE800\n         BR    R14\n         DROP  R6\nSAVE800  DC    F'0'\n         EJECT\n***********************************************************************\n*        GET DISK WITH THE MOST SPACE                                 *\n***********************************************************************\nENTRY830 DS    0H\n         ST    R14,SAVE830\n         LA    R1,WORKAREA    ADDRESS OF WORK AREA FOR UCB SCAN\n         ST    R1,SPACPARM    PLACE INTO PARM LIST\n         LA    R1,DEVCLASS    ADDRESS OF DEVICE CLASS (DASD)\n         ST    R1,SPACPARM+4  PLACE INTO PARM LIST\n         LA    R1,UCBADDR     ADDRESS OF RETURN FIELD\n         ST    R1,SPACPARM+8  PLACE INTO PARM LIST\n         OI    SPACPARM+8,128 SET HIGH ORDER BIT\n*\n*        SCAN EACH DASD UCB VIA IOSVSUCB\n*\nAAA830   DS    0H\n         LA    R1,SPACPARM    PARAMETER LIST FOR IOSUCBSV\n         L     R15,16         CVT LOCATION\n         USING CVT,R15        INFORM THE ASSEMBLER\n         L     R15,CVTUCBSC   UCB SERVICE ROUTINE ADDRESS\n         DROP  R15            RELEASE R15 ADDRESSABILITY\n         BALR  R14,R15        CALL UCB SERVICE ROUTINE\n         LTR   R15,R15        ANY UCB PASSED?\n         BNZ   FFF830         NO, ALL DONE\n*\n*        CHECK EACH DASD DEVICE FOR MOUNTED/ONLINE\n*\n         L     R4,UCBADDR     GET UCB ADDRESS\n         TM    3(R4),X'80'    IS DEVICE ONLINE\n         BZ    AAA830         NO, IGNORE IT\n         TM    3(R4),X'50'    PENDING OFFLINE/UNLOAD\n         BNZ   AAA830         YES, IGNORE IT\n         TM    35(R4),X'80'   MOUNT PENDING\n         BNZ   AAA830         YES, IGNORE IT\n         CLI   28(R4),X'00'   ANY VOLUME INFORMATION?\n         BE    AAA830         NO, VOLUME NOT VERIFIED YET\n*\n*        CHECK IF DASD DEVICE IS ONE REQUESTED\n*\n         LA    R2,DISKTBL     SET R2 TO REQUESTED DISKS\n         LA    R3,3           MAX  3 REQUESTED\nBBB830   CLC   28(6,R4),0(R2) IS THIS A REQUESTED VOLUME\n         BE    EEE830         YES - CHECK DEVICE\n*        BE    CCC830         YES - CHECK DEVICE\n         LA    R2,14(R2)      BUMP TO NEXT\n         BCT   R3,BBB830      TRY NEXT\n         B     AAA830         GET NEXT UCB\nEEE830   LR    R0,R4          LOAD ADDR OF UCB INTO REG 0\n         LA    R1,MSGAREA     LOAD PNTR TO MSGAREA INTO REG 1\n         SVC   78             GET DATA FOR THIS DASD\n         LTR   R15,R15        LSPACE DATA RETURNED?\n         BNZ   AAA830         NO, IGNORE THIS DEVICE\n         MVC   8(4,R2),FREECYL MOVE IN CYLS\n         B     AAA830         CHECK NEXT DEVICE\nFFF830   LA    R3,DISKTBL     SET R3 TO BEGINING OF TABLE\n         MVC   ALLOCVOL,0(R3) DEFAULT OF FIRST VOLUME\n         MVC   ALLOCVLN,12(R3) FIRST VOLUME LENGTH\n         MVC   HOLDCYL,8(R3)  SAVE OPEN CYLINDERS\n         LA    R3,14(R3)      BUMP TO NEXT ENTRY\n         CLC   HOLDCYL,8(R3)  DOES THIS ENTRY HAVE MORE SPACE\n         BNL   GGG830         NO - TRY THIRD\n         MVC   ALLOCVOL,0(R3) MOVE IN THIS VOLUME\n         MVC   ALLOCVLN,12(R3) SECOND VOLUME LENGTH\n         MVC   HOLDCYL,8(R3)  SAVE OPEN CYLINDERS\nGGG830   LA    R3,14(R3)      BUMP TO NEXT ENTRY\n         CLC   HOLDCYL,8(R3)  DOES THIS ENTRY HAVE MORE SPACE\n         BNL   HHH830         NO - HAVE PACK WITH MOST\n         MVC   ALLOCVOL,0(R3) MOVE IN THIRD VOLUME\n         MVC   ALLOCVLN,12(R3) THIRD VOLUME LENGTH\n         MVC   HOLDCYL,8(R3)  SAVE OPEN CYLINDERS\nHHH830   CLC   HOLDCYL,BLANKS  ARE THERE ANY CYLINDERS\n         BE    ABEND16        NO - ERROR\nEXIT830  L     R14,SAVE830\n         BR    R14\nSAVE830  DC    F'0'\n         EJECT\n***********************************************************************\n*        GET DATE AND TIME                                            *\n***********************************************************************\nENTRY850 DS    0H\n         ST    R14,SAVE850\n         $STCK NOGEN\n         MVC   PASSDSN,PREFIX1    MOVE IN DSN\n         LA    R4,PASSDSN         SET R4 TO BEGINNING\n         L     R5,PREFIX1L        SET R5 TO LENGTH\n         LA    R4,0(R5,R4)        SET R4 TO END\n         MVC   0(10,R4),NEWTYPE   MOVE IN TYPE (DAILY OR ARCHIVE)\nAAA850   CLI   0(R4),C' '         IS IT BLANK\n         BE    BBB850             NOW HAVE LENGTH\n         LA    R4,1(R4)           BUMP UP ONE\n         AH    R5,=H'1'           BUMP LENGTH COUNTER\n         B     AAA850             TRY AGAIN\nBBB850   MVC   0(2,R4),=C'.D'     MOVE IN CONSTANT\n         MVC   2(1,R4),YEARDATE   MOVE IN FIRST CHAR OF YEAR\n         MVC   3(2,R4),YEARDATE+2 MOVE IN YEAR\n         MVC   5(2,R4),DATE       MOVE IN MONTH\n         MVC   7(2,R4),DATE+3     MOVE IN DAY\n         MVC   9(2,R4),=C'.T'     MOVE IN CONSTANT\n         MVC   11(2,R4),TIME      MOVE IN HOUR\n         MVC   13(2,R4),TIME+3    MOVE IN MINUTE\n         AH    R5,=H'15'          ADD 15 TO LENGTH\nEXIT850  L     R14,SAVE850\n         BR    R14\nSAVE850  DC    F'0'\n         EJECT\n***********************************************************************\n*        GET BACKUP DATE FOR DAILY TO ARCHIVE                         *\n***********************************************************************\nENTRY860 DS    0H\n         ST    R14,SAVE860\n         LA    R1,DATEPARM        SOUTDATE PARAMETER LIST\n         ICM   R15,15,DATEADDR    ADDRESS OF THE DATE EXIT\n         BALR  R14,R15            CALL THE DATE SUBROUTINE\n         LTR   R15,R15            SOUTDATE RETCODE OK?\n         BNZ   ABEND17            NO - ABEND IT\n         MVC   COMPARED(1),=C'D'  MOVE IN CONSTANT DAY\n         MVC   COMPARED+1(1),LASTDAYO+6 MOVE IN 1 CHAR OF YEAR\n         MVC   COMPARED+2(2),LASTDAYO+8 MOVE IN YEAR\n         MVC   COMPARED+4(2),LASTDAYO   MOVE IN MONTH\n         MVC   COMPARED+6(2),LASTDAYO+3 MOVE IN DAY\nEXIT860  L     R14,SAVE860\n         BR    R14\nSAVE860  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE THE ACTIVE SYSOUT FILES                             *\n***********************************************************************\nENTRY900 DS    0H\n         ST    R14,SAVE900\n         MVC   ACTDSN(21),PREFIX1 MOVE IN PREFIX\n         LA    R4,ACTDSN          SET R4 TO BEGINNING\n         L     R5,PREFIX1L        SET R5 TO PREFIX LENGTH\n         LA    R4,0(R5,R4)        SET R4 TO END OF PREFIX\n         MVC   0(7,R4),=C'.ACTIVE' MOVE IN ACTIVE\n         AH    R5,=H'7'           BUMP LENGTH\n         STH   R5,ACTDSNL         STORE IN LENGTH\n         LA    R1,ACTSVC99        GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE ACTIVE SOUT FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND18            NO - ERROR\n         LA    R8,INPUT           SET UP ADDRESABILITY\n         MVC   DCBDDNAM,ACTDDN    MOVE IN DDNAME\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT900            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTACT REPORT TYPE\n         MVC   RPTLINE+29(44),ACTDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT900  L     R14,SAVE900\n         BR    R14\nSAVE900  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE AND OPEN THE VSAM JOURNAL FILE\n***********************************************************************\nENTRY910 DS    0H\n         ST    R14,SAVE910\n         MVC   JRNDSN(21),PREFIX1 MOVE IN PREFIX\n         LA    R4,JRNDSN          SET R4 TO BEGINNING\n         L     R5,PREFIX1L        SET R5 TO PREFIX LENGTH\n         LA    R4,0(R5,R4)        SET R4 TO END OF PREFIX\n         MVC   0(8,R4),=C'.JOURNAL' MOVE IN JOURNAL\n         AH    R5,=H'8'           BUMP LENGTH\n         STH   R5,JRNDSNL         STORE IN LENGTH\n         TM    FUNC,REBUILD+FIXTAPE IN REBUILD OR FIX TAPE\n         BZ    AAA910             NO - BR AROUND\n*        MVI   JRNSTAT,X'01'      SET TO OLD (NOT NEEDED 01/24/85)\nAAA910   LA    R1,DAJOURN         GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE JOURNAL FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND19            NO - ERROR\n         USING IFGACB,R15      INFORM ASSEMBLER\n         LA    R15,JOURNACB        SET UP ADDRESSING\n         MVC   ACBDDNM,JRNDDN     MOVE DDNAME\n         DROP  R15\n         OPEN  (JOURNACB)         OPEN THE JOURNAL ACB\n         LTR   R15,R15            DID IT OPEN?\n         BNZ   ABEND20            INDICATE OPEN FAILURE\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT900            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTJRNL REPORT TYPE\n         MVC   RPTLINE+29(44),JRNDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT910  L     R14,SAVE910\n         BR    R14\nSAVE910  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE THE NEW DAILY/ARCHIVE TAPE                          *\n***********************************************************************\nENTRY920 DS    0H\n         ST    R14,SAVE920\n         BAL   R14,ENTRY850       GET NEW DATASET NAME AND LENGTH\n         MVC   TAPEDSN,PASSDSN    MOVE IN DSN\n         STH   R5,TAPEDSNL        STORE IN LENGTH\n         MVI   TAPESTAT,X'04'     NEW\n         MVI   TAPEDISP,X'02'     CATLG\n         MVI   TAPECOND,X'02'     CATLG\n         MVC   TAPEUNIT,TAPENAME  MOVE IN UNIT NAME\n         MVC   TAPELEN,TAPENML    MOVE IN LENGTH\n         MVI   TAPEMOD,X'00'      RESET END OF LIST FOR NEW TAPE\n         LA    R1,TAPE99          GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE SOUT TAPE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND21            NO - ERROR\n         LA    R8,OUTPUT          SET UP ADDRESABILITY\n         MVC   DCBDDNAM,TAPEDDN   MOVE IN DDNAME\n         NI    MISC,255-NEEDNEW   CLEAR NEW TAPE SWITCH\n         MVC   PREVBLCT,=F'0'     INIT PREVIOUS BLKCOUNT\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT920            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTNTP REPORT TYPE\n         MVC   RPTLINE+29(44),TAPEDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT920  L     R14,SAVE920\n         BR    R14\nSAVE920  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE THE EXISTING DAILY/ARCHIVE TAPE                     *\n***********************************************************************\nENTRY925 DS    0H\n         ST    R14,SAVE925\n         BAL   R14,ENTRY950       GET LENGTH OF DSN\n         MVC   TAPEDSN,PASSDSN    MOVE IN DSN\n         STH   R5,TAPEDSNL        STORE IN LENGTH\n         MVI   TAPESTAT,X'02'     MOD\n         MVI   TAPEDISP,X'02'     CATLG\n         MVI   TAPECOND,X'02'     CATLG\n         MVI   TAPEMOD,X'80'      END OF SVC99 LIST\n         LA    R1,TAPE99          GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE ACTIVE SOUT FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND22            NO - ERROR\n         LA    R8,OUTPUT          SET UP ADDRESABILITY\n         MVC   DCBDDNAM,TAPEDDN   MOVE IN DDNAME\n         NI    MISC,255-NEEDNEW   CLEAR NEW TAPE SWITCH\n         MVC   PREVBLCT,=F'0'     INIT PREVIOUS BLKCOUNT\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT925            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTMTP REPORT TYPE\n         MVC   RPTLINE+29(44),TAPEDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT925  L     R14,SAVE925\n         BR    R14\nSAVE925  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE THE EXISTING DAILY DATASET FOR COPY TO ARCHIVE      *\n***********************************************************************\nENTRY930 DS    0H\n         ST    R14,SAVE930\n         MVC   DALYDSN,PASSDSN    MOVE IN DSN\n         BAL   R14,ENTRY950       GET DATASET LENGTH\n         STH   R5,DALYDSNL        STORE IN LENGTH\n         MVI   DALYOLD,X'80'      END OF PARM\n         MVI   DALYSTAT,X'01'     OLD\n         TM    FUNC,REBUILD       REBUILDING\n         BO    AAA930              YES - SET KEEP\n         MVI   DALYDISP,X'04'     DELETE\n         B     BBB930\nAAA930   MVI   DALYDISP,X'08'     KEEP\nBBB930   MVI   DALYCOND,X'08'     KEEP\n         LA    R1,DALY99          GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE ACTIVE SOUT FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND23            NO - ERROR\n         LA    R8,INPUT           SET UP ADDRESABILITY\n         MVC   DCBDDNAM,DALYDDN   MOVE IN DDNAME\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT930            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTIDS REPORT TYPE\n         MVC   RPTLINE+29(44),DALYDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT930  L     R14,SAVE930\n         BR    R14\nSAVE930  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE A NEW DAILY DATASET ON DISK\n***********************************************************************\nENTRY940 DS    0H\n         ST    R14,SAVE940\n         MVC   NEWTYPE,DAYLE      SET TYPE AS DAILY\n         BAL   R14,ENTRY850       GET NEW DSN\n         MVC   DALYDSN,PASSDSN    MOVE IN DSN\n         STH   R5,DALYDSNL        STORE IN LENGTH\n         MVI   DALYOLD,X'00'      RESET END OF PARM\n         MVI   DALYSTAT,X'04'     NEW\n         MVI   DALYDISP,X'02'     CATLG\n         MVI   DALYCOND,X'04'     DELETE\n         MVC   DALYUNIT,DISKNAME  MOVE IN DISKNAME\n         MVC   DALYULEN,DISKNML   MOVE IN DISKNAME LENGTH\n         L     R3,ALLOCYL         SET R3 TO NUM OF CYL NEEDED\n         L     R4,ALLOBLKS        SET R4 TO BLKS/CYL\n         SR    R2,R2              CLEAR FOR MULTIPLY\n         MR    R2,R4              MULT CYLS BY BLKS/CYL\n         ST    R3,ALLOBLKS        STORE IT\n         MVC   DALYX8#,ALLOBLKS+1 MOVE IN ALLOCATION QTY\n         TM    COPYTO,DDSPEC      SPECIFIED A VOLUME\n         BZ    CCC940             NO - GO SET END OF PARM\n         MVI   DALYNOVL,X'00'     VOLUME SPECIFIED\n         CLC   DISKNAME,=CL8'3330V' IS IT MASS STORAGE\n         BE    AAA940\n*******************************************************************\n*  SPECIFY A VOLSER FOR DASD ALLOCATION\n*******************************************************************\n         BAL   R14,ENTRY830       GET SPECIFIED VOL WITH MOST SPACE\n         MVC   DALYXVOL,ALLOCVOL  MOVE IN VOLUME WITH MOST SPACE\n         MVC   DALYXVLN,ALLOCVLN  MOVE IN VOLUME LENGTH\n         B     DDD940\n*******************************************************************\n*  CHANGE VOLSER ALLOCATION TO MASS STORAGE \"GROUP\"   UNTESTED    *\n*******************************************************************\nAAA940   MVC   DALYXVOL,DISKTBL   MOVE IN FIRST VIRTUAL VOLUME\n         MVC   DALYXVLN,DISKTBL+12 MOVE IN VIRTUAL VOLUME LENGTH\n         MVC   DALYX13(2),=X'005E' CHANGE VOLUME TO MSVGP (MSS)\n         B     DDD940\nCCC940   MVI   DALYNOVL,X'80'     NO VOLUME SPECIFIED\nDDD940   LA    R1,DALY99          GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE ACTIVE SOUT FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND25            NO - ERROR\n         LA    R8,OUTPUT          SET UP ADDRESABILITY\n         MVC   DCBDDNAM,DALYDDN   MOVE IN DDNAME\n         NI    MISC,255-NEEDNEW   CLEAR NEW TAPE SWITCH (N/A)\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT940            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTODS REPORT TYPE\n         MVC   RPTLINE+29(44),DALYDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT940  L     R14,SAVE940\n         BR    R14\nSAVE940  DC    F'0'\n         EJECT\n***********************************************************************\n*        CALCULATE LENGTH OF PASSED DSN (WILL BE IN R5)\n***********************************************************************\nENTRY950 DS    0H\n         ST    R14,SAVE950\n         LA    R4,PASSDSN         SET R4 TO BEGINNING\n         LA    R4,43(R4)          SET R4 TO END\n         LA    R5,44              SET R5 TO MAX LENGTH\nAAA950   CLI   0(R4),C' '         IS IT BLANK\n         BNE   EXIT950            NO  HAVE LENGTH\n         SH    R4,=H'1'           BACK UP 1\n         BCT   R5,AAA950          TRY AGAIN\nEXIT950  L     R14,SAVE950\n         BR    R14\nSAVE950  DC    F'0'\n         EJECT\n***********************************************************************\n*        PRINT THE ALLOCATION REPORT (ALSO SYNC AND DELETE REPORTS)\n***********************************************************************\nENTRY960 DS    0H\n         ST    R14,SAVE960\n         PUT   ALLOCRPT,RPTLINE    PUT OUT THE LINE\n         MVC   RPTLINE,BLANKS      CLEAR LINE\nEXIT960  L     R14,SAVE960\n         BR    R14\nSAVE960  DC    F'0'\n         EJECT\n***********************************************************************\n*        CLOSE THE INPUT FILE\n***********************************************************************\nENTRY980 DS    0H\n         ST    R14,SAVE980\n         CLOSE (INPUT)         CLOSE THE INPUT FILE\nEXIT980  L     R14,SAVE980\n         BR    R14\nSAVE980  DC    F'0'\n         EJECT\n***********************************************************************\n*        CLOSE THE OUTPUT FILE\n***********************************************************************\nENTRY985 DS    0H\n         ST    R14,SAVE985\n         CLOSE OUTPUT           CLOSE THE OUTPUT FILES\nEXIT985  L     R14,SAVE985\n         BR    R14\nSAVE985  DC    F'0'\n         EJECT\n***********************************************************************\n*        CLOSE THE VSAM JOURNAL\n***********************************************************************\nENTRY990 DS    0H\n         ST    R14,SAVE990\n         CLOSE JOURNACB         CLOSE THE JOURNAL VSAM\nEXIT990  L     R14,SAVE990\n         BR    R14\nSAVE990  DC    F'0'\n         EJECT\n***********************************************************************\n*        CLEAR THE ACTIVE FILE\n***********************************************************************\nENTRY995 DS    0H\n         ST    R14,SAVE995\n         OPEN  (FORMDCB,(OUTPUT)) OPEN INPUT FILE TO FORMAT\nAAA995   PUT   FORMDCB,FORMREC    WRITE FORMAT RECORD\n         BCT   R7,AAA995       WRITE NEXT RECORD\n         CLOSE (FORMDCB)          CLOSE FILE\nEXIT995  L     R14,SAVE995\n         BR    R14\nSAVE995  DC    F'0'\n         EJECT\n***********************************************************************\n*        END OF PROGRAM AND ABEND CODES\n***********************************************************************\nEXIT0    EQU   *\n         TM    FUNC,RPTALLO    WRITING ALLOCATION REPORT\n         BZ    EXIT1           NO BYPASS CLOSE\n         CLOSE ALLOCRPT        CLOSE REPORT\nEXIT1    ICM   R1,15,SAVEWORK  LOCATE WORK AREA\n         BZ    EXIT2           NON - GET OUT\n         FREEMAIN R,LV=4096,A=(1)\nEXIT2    ICM   R1,15,SAVESPEC  SPECIAL DELETE AREA\n         BZ    EXIT3           NON - GET OUT\n         FREEMAIN R,LV=2000,A=(1)\nEXIT3    SR    R15,R15         CLEAR RETCODE\n         $EPILOG ,             RETURN TO CALLER\n         SPACE 3\nABEND1   WTO   'SOUTWTR - INVALID CONTROL PARM PASSED'\n         ABEND 1\nABEND2   WTO   'SOUTWTR - EXIT MISSING (SOUTDATE/SOUTCPR/LOCINDEX)'\n         ABEND 2\nABEND3   WTO   'SOUTWTR - NO PREFIX DD CARD SUPPLIED'\n         ABEND 3\nABEND4   WTO   'SOUTWTR - NO //INPUT DD FOR \"FIXTAPE\" OPTION'\n         ABEND 4\nABEND5   WTO   'SOUTWTR - ALLOCATION REPORT OPEN ERROR'\n         ABEND 5\nABEND6   WTO   'SOUTWTR - ACTIVE FILE ON NON-SUPPORTED DISK DEVICE - UP+\n               DATE \"DEVT\" TABLE'\n         ABEND 6\nABEND7   WTO   'SOUTWTR - TAPE UCB TYPE NOT IN THE \"TAPETYPE\" TABLE'\n         ABEND 7\nABEND8   WTO   'SOUTWTR - VSAM JOURNAL UPDATE ERROR'\n         ABEND 8\nABEND9   WTO   'SOUTWTR - INPUT DATASET (ACT/DAY) OPEN ERROR'\n         ABEND 9\nABEND10  WTO   'SOUTWTR - OUTPUT DATASET (DAILY/ARCH.) OPEN ERROR'\n         ABEND 10\nABEND11  WTO   'SOUTWTR - INVALID DSN FOR COPY - NOT DATE STAMPED, GDG,+\n                OR ACTIVE'\n         ABEND 11\nABEND12  WTO   'SOUTWTR - UNSUPPORTED OUTPUT DISK DEVICE TYPE - UPDATE +\n                \"DEVT\" TABLE'\n         ABEND 12\nABEND13  WTO   'SOUTWTR - TAPE DENSITY NOT IN THE \"TAPEDEN\" TABLE'\n         ABEND 13\nABEND14  WTO   'SOUTWTR - LISTSPC CATALOG ERROR'\n         ABEND 14\nABEND15  WTO   'SOUTWTR - UNSUPPORTED DEVICE TYPE'\n         ABEND 15\nABEND16  WTO   'SOUTWTR - NO SPACE ON SPECIFIED PACKS FOR COPY'\n         ABEND 16\nABEND17  WTO   'SOUTWTR - CANNOT CREATE BACKUP DATE'\n         ABEND 17\nABEND18  WTO   'SOUTWTR - ACTIVE FILE ALLOCATION ERROR'\n         ABEND 18\nABEND19  WTO   'SOUTWTR - VSAM JOURNAL ALLOCATION ERROR'\n         ABEND 19\nABEND20  WTO   'SOUTWTR - VSAM JOURNAL OPEN ERROR'\n         ABEND 20\nABEND21  WTO   'SOUTWTR - NEW TAPE ALLOCATION ERROR'\n         ABEND 21\nABEND22  WTO   'SOUTWTR - MOD TO EXISTING TAPE; ALLOCATION ERROR'\n         ABEND 22\nABEND23  WTO   'SOUTWTR - OLD DAILY/ARCH. DATASET ALLOCATION ERROR'\n         ABEND 23\nABEND24  WTO   'SOUTWTR - INVALID ROUTINE ENTERED'\n         ABEND 24\nABEND25  WTO   'SOUTWTR - NEW DAILY DISK DATASET ALLOCATION ERROR'\n         ABEND 25\nABEND26  WTO   'SOUTWTR - SPECIAL DELETE DSN OPEN ERROR'\n         ABEND 26\nABEND27  WTO   'SOUTWTR - SPECIAL DELETE GETMAIN MUST BE EXPANDED'\n         ABEND 27\nABEND28  WTO   'SOUTWTR - SPECIAL DELETE JOURNAL RECORD FAILED'\n         ABEND 28\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND WORK AREAS                                     *\n*                                                                     *\n***********************************************************************\n         LTORG\n         EJECT\n***********************************************************************\n*        DYNAMIC ALLOCATION FOR THE ACTIVE FILE                       *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nACTSVC99 DC    X'80',AL3(ACTB)    ADDRESS OF DYNALLOC BLOCK\nACTB     DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(ACTC)            START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\nACTFLGS  DC    X'D0000000'        WAIT FOR DSN (NEED OLD)\nACTC     DC    A(ACTX1,ACTX2,ACTX3)\nACTFREE  DC    A(ACTX4),AL1(128),AL3(ACTX5)\nACTX1    DC    X'0002',AL2(1)                   DSNAME UNIT\nACTDSNL  DC    AL2(0)                           DSNAME LENGTH\nACTDSN   DC    CL44' '                          DSNAME\nACTX2    DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT\nACTDDN   DC    CL8' '                           DDNAME RETURNED\nACTX3    DC    X'0004',AL2(1),AL2(1)            STATUS UNIT\nACTSTAT  DC    X'01'                            STATUS UNIT=OLD\nACTX4    DC    X'0005',AL2(1),AL2(1)            DISP UNIT\nACTDISP  DC    X'08'                            DISP UNIT=KEEP\nACTX5    DC    X'001C',AL2(0)                   FREE=CLOSE\n         EJECT\n***********************************************************************\n*        DYNAMIC ALLOCATION FOR THE ANY TAPE INPUT OR OUTPUT FILE     *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nTAPE99   DC    X'80',AL3(TAPEB)   ADDRESS OF DYNALLOC BLOCK\nTAPEB    DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(TAPEC)           START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\nTAPEFLGS DC    X'D0000000'        FLAGS (MODIFIED FOR TAPE)\nTAPEC    DC    A(TAPEX1,TAPEX2,TAPEX3)\n         DC    A(TAPEX4,TAPEX5,TAPEX6)\n*        DC    A(TAPEXPDT)\nTAPEMOD  DC    X'80',AL3(TAPEX7)\n         DC    X'80',AL3(TAPEX8)\nTAPEX1   DC    X'0002',AL2(1)                   DSNAME UNIT\nTAPEDSNL DC    AL2(0)                           DSNAME LENGTH\nTAPEDSN  DC    CL44' '                          DSNAME\nTAPEX2   DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT\nTAPEDDN  DC    CL8' '                           DDNAME RETURNED\nTAPEX3   DC    X'0004',AL2(1),AL2(1)            STATUS UNIT\nTAPESTAT DC    X'02'                            STATUS UNIT=MOD\nTAPEX4   DC    X'0005',AL2(1),AL2(1)            DISP UNIT\nTAPEDISP DC    X'02'                            DISP UNIT=CATALOG\nTAPEX5   DC    X'0006',AL2(1),AL2(1)            DISP UNIT\nTAPECOND DC    X'02'                            COND UNIT=CATLG\nTAPEX6   DC    X'001C',AL2(0)                   FREE=CLOSE\nTAPEX7   DC    X'0030',AL2(1),AL2(2)            ALLOC TAPE\nTAPEBSIZ DC    XL2'7FE7'                        32743 MAX BLKSIZE\n* TAPEXPDT DC    X'0022',AL2(1),AL2(5),CL5'99000' EXPDT=99000\nTAPEX8   DC    X'0015',AL2(1)                   ALLOC TAPE\nTAPELEN  DC    AL2(4)                           LENGTH OF TAPE UNIT\nTAPEUNIT DC    CL8'TAPE'                        ESSOTERIC NAME TAPE\n         EJECT\n***********************************************************************\n*        DYNAMIC ALLOCATION FOR THE ANY DAILY INPUT OR OUTPUT FILE    *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nDALY99   DC    X'80',AL3(DALYB)   ADDRESS OF DYNALLOC BLOCK\nDALYB    DC    AL1(20)            LENGTH\nDALYB1   DC    X'01',X'0000'      ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(DALYC)           START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\nDALYFLGS DC    X'D0000000'        FLAGS (WAIT FOR DSNS)\n         DS    0H\nDALYC    DC    A(DALYX1,DALYX2,DALYX3,DALYX4,DALYX5)\nDALYOLD  DC    X'80',AL3(DALYX6)\n         DC    A(DALYX7,DALYX8,DALYX9,DALYX10,DALYX11)\nDALYNOVL DC    X'80',AL3(DALYX12)\n         DC    X'80',AL3(DALYX13)\nDALYX1   DC    X'0055',AL2(1)                   DDNAME RETURN UNIT\nDALYDDNL DC    AL2(8)                           DDNAME LENGTH\nDALYDDN  DC    CL8' '                           DDNAME RETURNED\nDALYX2   DC    X'0002',AL2(1)                   DSNAME UNIT\nDALYDSNL DC    AL2(0)                           DSNAME LENGTH\nDALYDSN  DC    CL44' '                          DSNAME\nDALYX3   DC    X'0004',AL2(1),AL2(1)            STATUS UNIT\nDALYSTAT DC    X'01'                            STATUS UNIT=OLD\nDALYX4   DC    X'0005',AL2(1),AL2(1)            DISP UNIT\nDALYDISP DC    X'04'                            DISP UNIT=DELETE\nDALYX5   DC    X'0006',AL2(1),AL2(1)            DISP UNIT\nDALYCOND DC    X'08'                            COND UNIT=KEEP\nDALYX6   DC    X'001C',AL2(0)                   FREE=CLOSE\nDALYX7   DC    X'0009',AL2(1),AL2(3),AL3(6169)  BLK ALLOCATION\nDALYX8   DC    X'000A',AL2(1),AL2(3)            PRIMARY QTY\nDALYX8#  DC    X'000000'                        # OF BLKS\nDALYX9   DC    X'000F',AL2(0)                   ROUND\nDALYX10  DC    X'000D',AL2(0)                   RLSE ON CLOSE\nDALYX11  DC    X'0015',AL2(1)                   DISK UNIT ALLOCATION\nDALYULEN DC    AL2(0)                           UNIT NAME LENGTH\nDALYUNIT DC    CL8' '                           UNIT NAME\nDALYX12  DC    X'0030',AL2(1),AL2(2),AL2(6169)  BLKSIZE - 6169\nDALYX13  DC    X'0010',AL2(1)                   ALLOCATE VOLUME\nDALYXVLN DC    AL2(0)                           VOLUME LENGTH\nDALYXVOL DC    CL8' '                           VOLUME\n         EJECT\n***********************************************************************\n*        DYNAMIC ALLOCATION FOR THE VSAM JOURNAL FILE                 *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nDAJOURN  DC    X'80',AL3(JRNB)    ADDRESS OF DYNALLOC BLOCK\nJRNB     DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(JRNC)            START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\n         DC    X'00000000'        FLAGS (MODIFIED FOR TAPE)\nJRNC     DC    A(JRNX1,JRNX2,JRNX3,JRNX4,JRNX5),AL1(128),AL3(JRNX6)\nJRNX1    DC    X'0002',AL2(1)                   DSNAME UNIT\nJRNDSNL  DC    AL2(0)                           DSNAME LENGTH\nJRNDSN   DC    CL44' '                          DSNAME\nJRNX2    DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT\nJRNDDN   DC    CL8' '                           DDNAME RETURNED\nJRNX3    DC    X'0004',AL2(1),AL2(1)            STATUS UNIT\nJRNSTAT  DC    X'08'                            STATUS UNIT=SHR\nJRNX4    DC    X'0005',AL2(1),AL2(1),X'08'      DISP UNIT (KEEP)\nJRNX5    DC    X'001C',AL2(0)                   FREE=CLOSE\nJRNX6    DC    X'003C',AL2(1),AL2(2),X'0008'    DSORG=VSAM\n         EJECT\n***********************************************************************\n*        PROGRAM CONSTANTS FOLLOW                                     *\n***********************************************************************\n*\nWHERETO  DC    X'00'           EOF PROCESSING\nTOYYY040 EQU   X'01'\nTOFFF040 EQU   X'02'\nTOBBB050 EQU   X'04'\nTOEEE050 EQU   X'08'\nTOHHH050 EQU   X'10'\nTOKKK050 EQU   X'20'\nTOGGG060 EQU   X'80'\n*\nINPTYPE  DC    X'00'           INPUT TYPE - CHECKED FOR SOUTXIT\nACTFILE  EQU   X'01'\nDAYFILE  EQU   X'02'\nINPFILE  EQU   X'04'\n*\nFUNC     DC    X'00'           WHAT FUNCTION\nCOPYING  EQU   X'01'\nFIXTAPE  EQU   X'02'\nREBUILD  EQU   X'04'\nFORMAT   EQU   X'08'\nTAPEINP  EQU   X'10'           HAVE TAPE INPUT DD CARD\nRPTALLO  EQU   X'20'           REPORT ON ALLOCATION\nSPECDEL  EQU   X'40'           DELETE SPECIAL REPORTS\n*\nLOOKFOR  DC    X'00'           LOCATE INDEX LOOKING FOR:\nATAPE    EQU   X'01'           A TAPE ONLY\nADISK    EQU   X'02'           A DISK ONLY\nBOTH     EQU   X'03'           A TAPE OR DISK\n*\nMISC     DC    X'00'           MISC SWITCHES\nRITETAPE EQU   X'01'           WRITING OUTPUT TO TAPE\nPASSLAST EQU   X'02'           GET LAST DSN WITH QUALIFIER\nFRSTIME  EQU   X'04'           FIRST TIME SW FOR UPDATE JOURNAL\nNEEDNEW  EQU   X'08'           NEED NEW TAPE ALLOCATED?\nARCHALLO EQU   X'10'           ANY DAILY TO ARCHIVE????\n*\nCOPYTO   DC    X'00'           COPYING TO WHAT DEVICE????\nFIXDAY   EQU   X'01'           FIXING TAPE - MOD/CREATE DAILY\nFIXARCH  EQU   X'02'           FIXING TAPE - MOD/CREATE ARCHIVE\nDT       EQU   X'10'           COPY DAILY TO TAPE\nDDANY    EQU   X'20'           COPY DAILY TO ANY DISK\nDDSPEC   EQU   X'40'           COPY DAILY TO SPECIFIED DISK\n*\nFIXVAR   DC    X'00'          FIXED OR VARIABLE INPUT RECORDS\nFIXREC   EQU   X'01'\nVARREC   EQU   X'02'\n*\nSPECPROC DC    X'00'          SPECIAL DELETE JOB PROCESSING\nDELIT    EQU   X'01'\nNOTHERE  EQU   X'02'\n*\nRBLDSW   DC    X'00'         REBUILD WHICH DATASETS\n*\nEXITADDR DC    F'0'            EXIT ROUTINE ADDRESS\n*\nEXITPARM DS    0F              EXIT ROUTINE PARM FOLLOWS\nEXITSW   DC    X'24'\nSEP      EQU   X'01'\nREC      EQU   X'02'\nEOF      EQU   X'08'\nEXITREC  DC    AL3(0)          ADDRESS OF THE CURRENT INPUT RECORD\n         DC    F'0'            USER FIELD (INITIALLY ZERO)\n         DC    A(INPUT)        ADDRESS OF INPUT DCB\n         DC    A(OUTPUT)       ADDRESS OF OUTPUT DCB\n***********************************************************************\n*        DEVICE TYPE TABLE - TRACKS/CYLINDER\n***********************************************************************\n         DS    0F\nDEVT     DC    XL1'2F',XL1'00',H'15',F'120' 3390\n         DC    XL1'2E',XL1'00',H'15',F'105' 3380\n         DC    XL1'2C',XL1'00',H'12',F'60'  3375\n         DC    XL1'2B',XL1'00',H'30',F'90'  3350\n         DC    XL1'2A',XL1'00',H'12',F'12'  3340\n         DC    XL1'29',XL1'00',H'19',F'38'  3330\n         DC    XL1'2D',XL1'00',H'19',F'38'  3330-1\n         DC    XL1'FF',XL1'00',H'00',F'00'\nDEVT#    EQU   (*-DEVT)/8\n         EJECT\n***********************************************************************\n*        DRIVE    BPI     MAX 32K BLOCKS   SAVEWTR BLOCKS    %FREE\n*        3420    1600       ????             1000             ??%\n*        3420    6250       5171             4200             19%\n*        3480    ????       6359             5400             15%\n*\n*  NOTE: THIS PROGRAMS LOGIC CHECKS THE BLOCK COUNT ON THE TAPE\n*        EACH TIME A RECORD IS WRITTEN. IF THE MAX BLOCK COUNT\n*        IS REACHED, IT WILL FINISH WRITTING THAT REPORT TO THE\n*        TAPE AND THEN CLOSE IT AND ALLOCATE A NEW TAPE; THUS\n*        PREVENTING MULTI-REEL TAPE DATASETS.\n*        FREE SPACE IS LEFT ON EACH TAPE TO ALLOW FOR COMPLETING\n*        A REPORT TRANSFER. IF, BY CHANCE, A EXTRA-LARGE REPORT\n*        IS BEING TRANSFERED WHEN THE MAX BLOCK COUNT IS REACHED,\n*        THERE SHOULD BE ENOUGH FREE SPACE CALCULATED HERE TO\n*        COMPLETE THE TRANSFER.\n*\n***********************************************************************\n*        TAPE TYPE TABLE - MAX BLOCKS PER TAPE\n***********************************************************************\n         DS    0F\nTAPETYPE DC    XL4'32108003',F'0000',CL12'3420        '\n         DC    XL4'33008003',F'5400',CL12'3480/COMPAT '\n         DC    XL4'78008080',F'5400',CL12'3480/FULLFNC'\n         DC    XL4'78048080',F'8000',CL12'3480/IDRC   '     ENB 11-4-93\n         DC    XL4'78048081',F'18000',CL12'3490/E      '    ENB 11-4-93\nTAPETYP# EQU   (*-TAPETYPE)/20\n         DS    0F\nTAPEDEN  DC    XL4'C3000000',F'1000',CL8'/1600BPI'\n         DC    XL4'D3000000',F'4200',CL8'/6250BPI'\nTAPEDEN# EQU   (*-TAPEDEN)/16\n         EJECT\n***********************************************************************\n*        REQUESTED DISK DEVICE TABLE\n***********************************************************************\n         DS    0F\nDISKTBL  DC    CL8' ',CL4' ',H'0'   DISKNAME|FREE CYL|NAME SIZE\n         DC    CL8' ',CL4' ',H'0'\n         DC    CL8' ',CL4' ',H'0'\nMAXDISKS EQU   (*-DISKTBL)/16\n*\n         DS    0F\nHTTR     DS    XL3\nHDEVT    DC    C' '\nHADR     DC    C' '\nTRKSPER  DC    F'0'\nHOLDSTP  DC    CL11' '\nHOLDCYL  DC    CL4' '\nTYPEUCB  DC    CL4' '\nALLOCVOL DC    CL8' '\nALLOCVLN DC    H'0'\nHDATE    DC    CL8' '\nPDATE    DC    PL5'0'\nHTIME    DC    CL6' '\nPTIME    DC    PL4'0'\nHLINES   DC    PL4'0'\nHSTAMP   DC    PL6'0'\nDISKNAME DC    CL8' '\nDISKNML  DC    H'0'\nTAPENAME DC    CL8' '\nTAPENML  DC    H'0'\nDAYLED   DC    CL10'.DAILY.D'\nDAYLE    DC    CL10'.DAILY'\nARCHVD   DC    CL10'.ARCHIVE.D'\nARCHV    DC    CL10'.ARCHIVE'\nPASSTYPE DC    CL10' '\nNEWTYPE  DC    CL10' '\nPASSLEN  DC    F'0'\nPASSDSN  DC    CL44' '\nPASSPFX  DC    CL25' '\nPREFIX1  DC    CL21' '\nPREFIX1L DC    F'0'\nPREFIX2  DC    CL25' '\nPREFIX2L DC    F'0'\nARCHDSN  DC    CL44' '\nALLOCYL  DC    F'0'\nALLOBLKS DC    F'0'\nSAVEWORK DC    F'0'\nSAVESPEC DC    F'0'\nBLDLLIST DC    H'1',H'58',CL8'SOUTXIT',XL52'00' BLDL LIST\nBLANKS   DC    CL255' '\nFORMREC  DC    X'00410000',C'  ' RDW, CC AND TRC (PAD PREFIX)\nSEPLIT   DC    CL24'SPFSOUTS PAGE SEPARATOR ',CL103'PAD ' SEP RECORD\n*\nRPTLINE  DC    CL133'1 SOUTWTR - INPUT/OUTPUT DATASET ALLOCATIONS'\nRPTACT   DC    CL29' ALLOCATE ACTIVE FILE,   DSN='\nRPTJRNL  DC    CL29' ALLOCATE VSAM JOURNAL,  DSN='\nRPTNTP   DC    CL29' CREATE NEW OUTPUT TAPE, DSN='\nRPTMTP   DC    CL29' MOD TO OUTPUT TAPE    , DSN='\nRPTIDS   DC    CL29' INPUT DATASET,          DSN='\nRPTODS   DC    CL29' OUTPUT DISK DATASET,    DSN='\nRPTDDS   DC    CL29' DELETE DISK DATASET,    DSN='\nRPTTUCB  DC    CL29' TAPE DEVICE TYPE - XXXX/XXXX'\nRPTFORM  DC    CL29' FORMAT ACTIVE FILE          '\nSYNCLINE DC    CL50' ADDING JJJJJJJJ NNNNNNNN TO JOURNAL TO SYNC FILES'\nDELTLINE DC    CL50' DELETE JJJJJJJJ NNNNNNNN FROM JOURNAL PER REQUEST'\n         DS    0F\n*    VARIABLES NEED FOR $STCK MACRO\nDATE     DS    CL8\nTIME     DS    CL12\nYEARDATE DS    CL4\nDAY      DS    XL1\n*\n* PARM PASSED TO SOUTDATE\nDATEPARM DS    0F\nDP1      DC    A(DAYONLIN)        ADDR OF BACK UP TO # DAYS\nDP2      DC    A(LASTDAYO)        ADDR OF LAST DAY TO KEEP ONLINE\n*\nDAYONLIN DC    CL5'00000'\nLASTDAYO DC    CL10' '\nCOMPARED DC    CL8' '\n*\nMAXBLOCK DC    F'0'            MAX BLOCKS TO WRITE ON TAPE\nPREVBLCT DC    F'0'            PREVIOUS BLOCK COUNT\nCOMPADDR DC    F'0'            COMPRESSION EXIT\nLOCIADDR DC    F'0'            LOCINDEX EXIT\nDATEADDR DC    F'0'            BACKUP DATE EXIT\nPARMCPR  DS    0F\nP1       DC    A(CPRTYPE)\nP2       DC    A(RECORDV)\nP3       DC    A(OUTREC)\n         DS    0H\nCPRTYPE  DC    XL4'FF000000'\n*\n         DC    CL14'OUTPUT RECORD='\n         DS    0H\nOUTREC   DS    0CL137\nRECLEN   DC    H'0'\nRECTT    DC    H'0'\nRECOUT   DC    CL133' '\n         DS    D          PAD AREA\n         DC    CL13'INPUT RECORD='\n         DS    0H\nRECORDV  DS    0CL137\nINRECL   DS    H\n         DS    H\nRECORDF  DS    0CL133\nRECPREF  DS    CL6\nRECLIT   DS    0CL77\nRECSEP   DS    CL23\nRECPAD   DS    CL5\nRECJNAME DS    CL8,CL1\nRECJNUM  DS    CL8,CL12\nRECMSGCL DS    CL1,CL1\nRECDATE  DS    CL8,CL1\nRECTIME  DS    CL8,CL1\nRECYEAR  DS    CL4,CL1\nRECDAY   DS    CL1\nRECFILL  DS    CL48\n         DC    CL12'JOURNAL REC='\n         DS    D\n*        THE FOLLOWING IS THE JOURNAL RECORD FOR OUTPUT\nJOURNREC DS    0CL42              JOURNAL RECORD\nJJOBN    DC    CL8' '\nJDATE    DC    PL5'0'\nJTIME    DC    PL4'0'\nJJOB#    DC    CL8' '\nJMCLASS  DC    CL1' '\nJTTR     DC    XL3'000000'\nJDAY     DC    X'FF'\nJLINES   DC    PL4'0'\nJDEVT    DC    XL1'00'\nJADR     DC    CL1' '\nJSTAMP   DC    PL6'0'\n         EJECT\n         DC    CL12'DCB FOLLOWS:'\nJOURNACB ACB   AM=VSAM,DDNAME=JOURNAL,MACRF=(KEY,DIR,OUT)\nJOURNRPL RPL   ACB=JOURNACB,AREA=JOURNREC,AREALEN=42,KEYLEN=22,        X\n               OPTCD=(KEY,DIR,SYN,UPD,MVE,KEQ,FKS),RECLEN=42,          X\n               ARG=JOURNREC\nALLOCRPT DCB   MACRF=(PM),DSORG=PS,DDNAME=ALLOCRPT,LRECL=133,          X\n               RECFM=FBA,BLKSIZE=6118\nSPECLDEL DCB   MACRF=(GM),DSORG=PS,DDNAME=SPECLDEL,EODAD=XXX030,       X\n               EXLST=OPENL\nFORMDCB  DCB   MACRF=(PM),DSORG=PS,DDNAME=XXXXX,LRECL=133\nINPUT    DCB   MACRF=(GM),DSORG=PS,DDNAME=XXXXX,EODAD=ENTRY100,        X\n               BUFL=32760,EXLST=OPENL\nOUTPUT   DCB   MACRF=(PM),DSORG=PS,DDNAME=OUTPUT,LRECL=137,RECFM=VB,   X\n               EXLST=OPENL\nPREFIX   DCB   MACRF=(PM),DSORG=PS,DDNAME=PREFIX,EXLST=OPENL\nOLDPFX   DCB   MACRF=(PM),DSORG=PS,DDNAME=OLDPFX,EXLST=OPENL\n         DS    0F\nOPENL    DC    X'87',AL3(JFCB) OPEN EXIT LIST\nJFCB     DC    CL176' '        HOLD AREA FOR OUTPUT JFCB\n*\nDELAREA  DS    0CL80\nDELJNAME DC    CL8' '\nDELFILL1 DC    CL1' '\nDELJNUM  DC    CL8' '\nDELFILL2 DC    CL63' '\n*\n* PARM SETUP FOR LOCATE INDEX\n*\nLOCIPARM DC    A(LOCIPFX)\n         DC    A(LOCIDSN)\n         DC    A(LOCIVOL)\n         DC    A(0)       ADDR OF GETMAIN\nLOCIPFX  DC    CL44' '\nLOCIDSN  DC    CL44' '\nLOCIVOL  DC    CL6' '\n*\n*        THE FOLLOWING IS REFERNCED IN DYNAMIC STORAGE VIR R13\n*\n         DS    0F\nDEVCLASS DC    XL1'20'         UCB DEVICE CLASS\nWORKAREA DS    XL100          IOSVSUCB WORK AREA\nUCBADDR  DS    F              ADDRESS OF RETURNED UCB\n*\n*        THE FOLLOWING IS THE SVC 78 PARAMETER LIST\n*\nMSGAREA  DS    0CL30\n         DS    CL6            CONSTANT - 'SPACE='\nFREECYL  DS    CL4            TOTAL NO. FREE CYLINDERS\n         DS    CL1            CONSTANT - ','\nFREETRK  DS    CL4            TOTAL NO. FREE TRACKS OUTSIDE CYLS\n         DS    CL1            CONSTANT - ','\nFREEXTNT DS    CL4            TOTAL NO. FREE EXTENTS\n         DS    CL1            CONSTANT - '/'\nCONTGCYL DS    CL4            LARGEST CONTIGUOUS FREE AREA\n         DS    CL1                   IN CYLS AND TRKS\nCONTGTRK DS    CL4\n         DS    0F\nSPACPARM DS    A              IOSVSUCB PARM - ADDRESS OF WORKAREA\n         DS    A              IOSVSUCB PARM - ADDRESS OF DEVICE CLASS\n         DS    A              IOSVSUCB PARM - UCB ADDRESS POINTER\n         DS    F              IOSVSUCB RETURNED UCB ADDRESS\n*\nWORKSPC  DSECT\nLOCINDXW EQU   *\n*\nSPECAREA DSECT\nSPECNAME DS    CL8\nSPECNUM  DS    CL8\nSPECLGTH DS    F\n         PRINT OFF\n         DCBD  DSORG=PS\n         IFGACB AM=VSAM\n         CVT   DSECT=YES      GENERATE CVT LABELDS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOUTWTRX": {"ttr": 1545, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PRINT NOGEN\n***********************************************************************\n* SOUTWTR IS THE PROGRAM EXECUTED IN THE SAVEWTR PROC. ITS FUNCTION   *\n* IS TO OFFLOAD THE ACTIVE FILE TO DAILY DISK OR TAPE DATASETS.       *\n* IT WILL ALSO OFFLOAD DAILY DISK DATASETS TO ARCHIVE TAPES.          *\n*                                                                     *\n* ADDITIONAL SOUTWTR FUNCTIONS ARE:                                   *\n*   1) FORMAT THE ACTIVE FILE                                         *\n*   2) REBUILD THE VSAM JOURNAL                                       *\n*   3) A \"FIX TAPE\" OPTION TO RELOAD BROKEN TAPES OR COPY DISK        *\n*      FILES TO TAPES (THIS OPTION CAN BE USED FOR OTHER THAN         *\n*      FIXING TAPES)                                                  *\n*   4) USE THE OPTIONAL \"SPECLDEL\" DATASET TO DELETE UN-WANTED        *\n*      REPORTS FROM THE SYSTEM                                        *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* THE FOLLOWING IS THE PARM FORMATS THAT CAN BE PASSED TO SOUTWTR:    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   PARM='FORMAT'           FORMAT THE ACTIVE FILE ONLY               *\n*                           (MUST ALREADY BE CREATED)                 *\n*                                                                     *\n*   PARM='REBUILD,ALL'      WILL READ ALL THE SYSOUT DATASETS AND     *\n*                ,ACTIVE    REBUILD THE VSAM JOURNAL RECORDS ONLY     *\n*                ,DAILY     (JOURNAL MUST HAVE BEEN CREATED AND INITED*\n*                ,ARCHIVE   THE SYSOUT DATASETS ARE OBTAINED BY       *\n*                ,OLD       GETTING ALL THE DATASETS WITH THE PREFIX  *\n*                           IN THE:                                   *\n*                           //PREFIX DD   CARD                        *\n*                             AND OPTIONALLY IN THE:                  *\n*                           //OLDPFX DD   CARD                        *\n*                                                                     *\n*   PARM='FIXTAPE,OUTPUT=DAILY'                                       *\n*                 OUTPUT=ARCHIVE'  READS AN INPUT DD DATASET AND      *\n*                                  MODS OR CREATES A OUTPUT DAILY     *\n*                                  OR ARCHIVE DATASET (SPECIFIED)     *\n*                                  AND UPDATES THE VSAM JOURNAL       *\n*                                  (IF TAPE IS \"NL\", DCB MUST BE      *\n*                                   SUPPLIED ON THE DD CARD)          *\n*                                                                     *\n* ==>NOTE: DEFAULT ALLOCATION IS TO A \"TAPE\" UNIT                     *\n*          (THIS APPLIES TO ANY TAPE MOUNT; HERE OR IN COPY PARM)     *\n*          IF YOU DO NOT USE \"TAPE\" AS AN ESOTERIC NAME               *\n*          YOU CAN SPECIFY THE FOLLOWING:                             *\n*                                                                     *\n*                 OUTPUT=DAILY=TAPEXX                                 *\n*                 OUTPUT=ARCHIVE=TAPEXX (TAPEXX IS ANY TAPE ESOTERIC  *\n*                                        NAME ONLY)                   *\n*                                                                     *\n*   PARM='COPY'            COPIES ACTIVE TO DAILY TAPE                *\n*                          (ASSUMES DAILY TO TAPE)                    *\n*                                                                     *\n*   PARM='COPY,DAILY=TAPE' (TAPE IS YOUR ESOTERIC TAPE NAME           *\n*                           IE: TAPE  OR  TAPE9  OR TAPE16  ETC.)     *\n*                                                                     *\n*   PARM='COPY,DAILY=SYSDA,DAYS=XXX'  DAILYS ARE ON ANY SYSDA DISKS   *\n*                                     (SYSDA CAN BE ANY ESOTERIC NAME)*\n*                                     AND ARE KEPT FOR XXX DAYS BEFORE*\n*                                     COPYING TO ARCHIVE TAPE         *\n*                                                                     *\n*   PARM='COPY,DAILY=SYSDA(PVT801,PVT802,PVT803),DAYS=XXX             *\n*                                     DAILYS ARE KEPT ON 1, 2 OR 3    *\n*                                     SPECIFIED SYSDA PACKS           *\n*                                     (SYSDA CAN BE ANY ESOTERIC NAME)*\n*                                     AND ARE KEPT FOR XXX DAYS BEFORE*\n*                                     COPYING TO ARCHIVE TAPE         *\n*                                                                     *\n*        IF YOU ARE USING A TAPE ESOTERIC NAME FOR THE ARCHIVE        *\n*        DATASET, YOU CAN SUPPLY IT AFTER THE DAYS PARAMETER          *\n*                                                                     *\n*        IE:   ...,DAYS=XXX,ARCHIVE=TAPEXX  ESOTERIC NAME             *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* MISC NOTES:                                                         *\n*                                                                     *\n*                                                                     *\n*  MENTIONED BREIFLY ABOVE, ALL TAPE ALLOCATION USES THE DEFAULT      *\n*  \"UNIT=TAPE\". IF YOU ARE NOT USING \"TAPE\" AS A ESOTERIC NAME, YOU   *\n*  CAN SPECIFY YOUR NAME IN THE PARM AS FOLLOWS:                      *\n*                                                                     *\n*    1) FOR COPY OPTION USE:                                          *\n*       A) FOR DAILY TAPES:  PARM='COPY,DAILY=TAPEXXXX'               *\n*       B) FOR ARCH. TAPES:  PARM='COPY,...,ARCHIVE=TAPEXXXX'         *\n*    2) FOR FIXTAPE OPTION USE:                                       *\n*       A) PARM=FIXTAPE,OUTPUT=DAILY=TAPEXXXX                         *\n*       B) PARM=FIXTAPE,OUTPUT=ARCHIVE=TAPEXXXX                       *\n*                                                                     *\n*                                                                     *\n*  THE ACTIVE FILE IS COMPRESSED BEFORE IT IS WRITTEN TO THE DAILY    *\n*  FILE. WHEN GOING FROM DAILY TO ARCHIVE, THE FILES ARE JUST COPIED  *\n*  AS IS AND REBLOCKED (6169 ON DISK  31743 ON TAPE)                  *\n*  THE SEPERATOR RECORDS ARE NOT COMPRESSED. THIS ALLOWS THE PROGRAMS *\n*  THAT READ THE SYSOUT FILES TO DO COMPARES FOR SEPERATOR RECORDS    *\n*  WITHOUT HAVING TO DECOMPRESS EVERY RECORD.                         *\n*                                                                     *\n*                                                                     *\n*  AND OPTIONAL DD CARD OF \"//ALLOCRPT\" CAN BE SUPPLIED FOR A LIST    *\n*  OF ALL FILES ALLOCATED FOR INPUT, NEW OUTPUT, OR MOD TO OUTPUT.    *\n*  IF THIS DD CARD IS NOT SUPPLIED IN THE SAVEWTR PROC, NO REPORTING  *\n*  IS DONE. (HANDY FOR TESTING)                                       *\n*                                                                     *\n*                                                                     *\n* IF THE OPTIONAL \"SPECLDEL\" DD IS SUPPLIED, THE REQUESTED REPORTS    *\n* WILL BE DELETED FROM THE JOURNAL FILE AND THE REPORT WILL NOT BE    *\n* COPIED FROM THE ACTIVE TO DAILY OR DAILY TO ARCHIVE. ON REBUILD,    *\n* THE RECORD WILL NOT BE ADDED TO THE JOURNAL FILE.                   *\n*   NOTE: THE SPECIAL DELETE DATASET SHOULD BE  LRECL=80              *\n*         FORMAT OF THE FILE IS:                                      *\n*                         1         2         3                       *\n*          COL   123456789012345678901234567890                       *\n*                JJJJJJJJ XXX#####             <== JOB# IS OPTIONAL)  *\n*                   |      |   |-----JOB NUMBER                       *\n*                   |      |---------JOB LIT  (IE: JOB STC TSU)       *\n*                   |----------------JOB NAME (IE: PAYROLL            *\n*                                                  PAY*  <= GENERIC)  *\n*                                                                     *\n*                                                                     *\n*  WHEN SPECIFYING THE DAYS PARAMETER, THE NUMBER OF DAYS KEEP ONLINE *\n*  ARE AS FOLLOWS:                                                    *\n*       DAYS=000 - KEEP ALL OF TODAYS ONLINE ONLY                     *\n*       DAYS=001 - KEEP ALL OF TODAYS ONLINE PLUS ALL OF YESTERDAYS   *\n*       DAYS=002 - KEEP ALL OF TODAYS ONLINE PLUS LAST 2 DAYS         *\n*                                                                     *\n*                                                                     *\n*  IF CHANGING DAILYS FROM DISK TO TAPE, ALL THE EXISTING DAILY DISK  *\n*  FILES WILL BE COPIED TO ARCHIVE TAPE FIRST; THEN THE COPY FROM     *\n*  THE ACTIVE TO DAILY TAPE WILL TAKE PLACE. IF AT A LATER DATE, YOU  *\n*  DECIDE TO PLACE THE DAILYS BACK ON DISK, ALL THE EXISTING DAILY    *\n*  TAPES WILL REMAIN ON DAILY TAPES (NO COPY OF DAILY TAPE TO ARCHIVE *\n*  TAPES) UNTIL THEY ARE CYCLED OFF THRU CLEANWTR.                    *\n*                                                                     *\n*                                                                     *\n*  ANY TAPE CREATED ASSUMES CATALOG RETENTION IN YOUR TAPE MANAGEMENT *\n*  SYSTEM. (IE: EXPDT=99000). IF YOU ARE NOT, FIND THE VARIABLE       *\n*  \"TAPEXPDT\" IN THIS PROGRAM AND UNCOMMENT BEFORE ASSEMBLING.        *\n*  (THERE ARE 2 OCCURRENCES) (THIS WAS NOT TESTED)                    *\n*                                                                     *\n*                                                                     *\n*  THE SOUTXIT REPORTING IS ONLY INVOLKED WHEN THE ACTIVE IS COPIED   *\n*  TO THE DAILY DASD/TAPE DATASET.                                    *\n*                                                                     *\n*                                                                     *\n*  THE SYSTEM IS DESIGNED THAT ONLY ONE REEL OF TAPE IS NEEDED        *\n*  WHEN CREATING/MOD'ING  THE DAILY OR ARCHIVE TAPE DATASETS.         *\n*  THIS SHOULD PREVENT MULTI-REEL TAPES. IT COULD GO INTO A SECOND    *\n*  REEL IF YOU HAVE SHORT TAPES (USUALLY LESS THAN 2000 FT).          *\n*  IF IT GOES INTO A SECOND REEL, ONLY ONE OR TWO REPORTS ARE         *\n*  WRITTEN TO THE SECOND REEL AND A NEW DATASET IS THEN CREATED.      *\n*                                                                     *\n*                                                                     *\n*  THIS JOB CAN BE RESTARTED AT ANY TIME WITHOUT ANY DATASETS NEEDING *\n*  TO BE DELETED OR CLEANED UP.                                       *\n*  (IE: IF SAVEWTR WAS CANCELED IN THE MIDDLE OF WRITING THE ACTIVE   *\n*       FILE TO A DAILY TAPE, THE RESTART WILL RE-OPEN THE ACTIVE FILE*\n*       AND START MODDING ONTO THE END OF THE DAILY TAPE. THE VSAM    *\n*       JOURNAL IS UPDATED NORMALLY. THE ONLY PROBLEM THAT ARISES     *\n*       FROM THIS PROCEDURE IS THAT THERE COULD BE DUPLICATE SYSOUT   *\n*       REPORTS FROM THE ACTIVE FILE ON THE DAILY TAPE,BUT THE JOURNAL*\n*       ONLY RECORDS THAT THE REPORT IS ON THAT ONE TAPE AND 4.S      *\n*       WILL FIND THE FIRST OCCURANCE OF THAT REPORT ON THE TAPE.     *\n*                                                                     *\n*                                                                     *\n*  THE ONLY SPECIAL PROCESSING THAT IS REQUIRED IS IF THE SYSTEM      *\n*  CRASHES (POWER LOSS) WHILE WRITTING TO TAPE. THE RESULT IS THAT    *\n*  THERE IS NO END OF FILE MARK WRITTEN ON THE TAPE. YOU CANNOT       *\n*  MOD ON TO THAT TAPE.                                               *\n*                                                                     *\n*  ONE POSSIBLE SOLUTION IS TO TO A IEBGENER AND COPY THE BAD TAPE    *\n*  TO A TAPE WITH THE SAME DATASET NAME. UNCATALOG THE BAD TAPE AND   *\n*  CATALOG THE NEW (GENERED) TAPE. THE NEW TAPE SHOULD HAVE A END OF  *\n*  TAPE MARKER.                                                       *\n*                                                                     *\n*  ANOTHER SOLUTION IS TO UNCATALOG THE TAPE, AND RUN A SPECIAL       *\n*  SAVEWTR PROC WITH \"PARM=FIXTAPE\". SET THE //INPUT DD  TO THE       *\n*  UNCATALOGED TAPE WITH THE VOL=SER=... SUPPLIED.  A NEW DAILY OR    *\n*  ARCHIVE TAPE WILL BE BUILT AND THE VSAM JOURNAL WILL BE UPDATED.   *\n*  AN EOF ERROR WILL OCCUR, BUT THE NEW TAPE CREATED WILL BE OK.      *\n*  (SEE THE \"FIXTAPE\" PARM OPTION FOR FURTHER DETAILS).               *\n*                                                                     *\n***********************************************************************\n*  PROCESSING SEQUENCE FOR SELECTED PARMS:                            *\n*                                                                     *\n*                                                                     *\n*  A) FORMAT  -  (FORMAT ACTIVE FILE)                                 *\n*     1. ALLOCATE AND OPEN ACTIVE FILE                                *\n*     2. INSERT \"PAD\" RECORDS UNTIL D37 ABEND                         *\n*     3) FINISHED                                                     *\n*                                                                     *\n*                                                                     *\n*  B) REBUILD -  (REBUILD THE VSAM JOURNAL FROM SYSOUT DATASETS)      *\n*     1. ALLOCATE AND OPEN ACTIVE FILE                                *\n*        A. SEARCH ACTIVE FOR SEPERATOR RECORDS                       *\n*        B. BUILD JOURNAL RECORD FROM SEPERATOR AND ADD TO JOURNAL    *\n*     2. ALLOCATE AND OPEN EACH DAILY DISK/TAPE FILE                  *\n*        A. SEARCH DAILY FOR SEPERATOR RECORDS                        *\n*        B. BUILD JOURNAL RECORD FROM SEPERATOR AND ADD TO JOURNAL    *\n*     3. ALLOCATE AND OPEN EACH ARCHIVE TAPE FILE (IF ANY)            *\n*        A. SEARCH ARCHIVE FOR SEPERATOR RECORDS                      *\n*        B. BUILD JOURNAL RECORD FROM SEPERATOR AND ADD TO JOURNAL    *\n*     4. ALLOCATE AND OPEN EACH OLD SYSTEM ARCHIVE TAPE FILE          *\n*        (OPTIONAL IF //OLDPFX DD  CARD IS SUPPLIED)                  *\n*        A. SEARCH OLD ARCHIVE FOR SEPERATOR RECORDS                  *\n*        B. BUILD JOURNAL RECORD FROM SEPERATOR AND ADD TO JOURNAL    *\n*     5) FINISHED                                                     *\n*                                                                     *\n* NOTE:  FOR EACH SEPERATOR FOUND ON ANY OF THE SYSOUT DATASETS:      *\n*        A) TRY TO FIND THAT RECORD IN THE VSAM JOURNAL               *\n*        B) IF FOUND, UPDATE IT (SHOULD NEVER HAPPEN BECAUSE VSAM     *\n*            JOURNAL WAS CREATED NEW IN INITIALIZED)                  *\n*        C) IF NOT FOUND, ADD A NEW RECORD TO THE VSAM JOURNAL        *\n*                                                                     *\n*                                                                     *\n*  C) FIXTAPE -  (FOR FIXING BROKEN TAPE)                             *\n*             -  (COULD ALSO BE USED AS A CONVERSION PROCESS)         *\n*     1. ALLOCATE AND OPEN THE //INPUT DD                             *\n*     2. ALLOCATE AND OPEN VSAM JOURNAL                               *\n*     3. IF OUTPUT=DAILY                                              *\n*        A) FIND LAST DAILY TAPE USED FOR MOD'ING ON TO...            *\n*        B) IF NO EXISTING DAILY TAPES, ALLOCATE A NEW ONE            *\n*     4. IF OUTPUT=ARCHIVE                                            *\n*        A) FIND LAST ARCHIVE TAPE USED FOR MOD'ING ON TO...          *\n*        B) IF NO EXISTING ARCHIVE TAPES, ALLOCATE A NEW ONE          *\n*     5) ALLOCATE AND OPEN THE OUTPUT TAPE (WILL ALWAYS BE TAPE)      *\n*     6) READ INPUT TAPE AND WRITE SAME TO OUTPUT TAPE                *\n*     7) FOR EACH SEPERATOR FOUND, PERFORM THE FOLLOWING:             *\n*        A) TRY TO FIND THAT RECORD IN THE VSAM JOURNAL               *\n*        B) IF FOUND, UPDATE IT TO POINT TO NEW TAPE                  *\n*        C) IF NOT FOUND, ADD A NEW RECORD TO THE VSAM JOURNAL        *\n*     8) FINISHED                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  D) COPY    -  (OFFLOADING ACTIVE FILE TO DAILY)                    *\n*     1. ALLOCATE AND OPEN VSAM JOURNAL                               *\n*     2. IF \"DAILY=TAPE\", PERFORM THE FOLLOWING:                      *\n*        A) FIND LAST DAILY TAPE USED FOR MOD'ING ON TO...            *\n*        B) IF NO EXISTING DAILY TAPES, ALLOCATE A NEW ONE            *\n*        C) ALLOCATE THE ACTIVE FILE                                  *\n*        D) READ THE ACTIVE AND COPY TO THE DAILY TAPE                *\n*        E) FOR EACH SEPERATOR RECORD FOUND, UPDATE THE VSAM JOURNAL  *\n*           TO POINT TO THE DAILY TAPE INSTEAD OF THE ACTIVE          *\n*        F) INITIALIZE THE ACTIVE FILE                                *\n*        G) FINISHED                                                  *\n*                                                                     *\n*     3. IF \"DAILY=DISK\", PERFORM THE FOLLOWING:                      *\n*        A) FIND LAST ARCHIVE TAPE USED FOR MOD'ING ON TO...          *\n*        B) IF NO EXISTING ARCHIVE TAPES, ALLOCATE A NEW ONE          *\n*        C) LOOK AT ALL THE DAILY DISK DATASETS, AND COMPARE DATE     *\n*           STAMP TO \"DAYS=XXX\" PARM                                  *\n*        D) COPY OLD DAILY DISKS TO ARCHIVE TAPE AND UPDATE VSAM      *\n*           JOURNAL TO POINT TO THE ARCHIVE TAPE                      *\n*        E) AFTER COPY IS COMPLETE, DELETE THE DISK DATASET           *\n*        F) PERFORM THIS PROCESS UNTIL ALL THE OLD DISKS ARE ON TAPE  *\n*        G) ALLOCATE AND OPEN THE ACTIVE FILE                         *\n*        H) ALLOCATE AND OPEN A NEW DAILY DISK DATASET                *\n*           (THE SIZE OF THE ACTIVE DETERMINES THE SIZE OF THE DAILY) *\n*           (THE DAILY DISK DATASET WILL GO TO SPECIFIED PACKS OR TO  *\n*            ANY PACK, DEPENDING ON THE PARM)                         *\n*           ( IF 2 OR 3 PACKS ARE SPECIFIED, THE PACK WITH THE MOST   *\n*             SPACE IS SELECTED)                                      *\n*        I) READ THE ACTIVE AND COPY TO THE DAILY DISK                *\n*        J) FOR EACH SEPERATOR RECORD FOUND, UPDATE THE VSAM JOURNAL  *\n*           TO POINT TO THE DAILY TAPE INSTEAD OF THE ACTIVE          *\n*        K) INITIALIZE THE ACTIVE FILE                                *\n*        L) FINISHED                                                  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*        R1  -                                                        *\n*        R2  - WORK (USED FOR PARM VERIFICATION)                      *\n*        R3  - WORK                                                   *\n*        R4  - WORK                                                   *\n*        R5  - DSN LENGTH FOR SVC99                                   *\n*        R6  - WORK -USING FOR WORK AREAS                             *\n*        R7  - ACTIVE FILE RECORD COUNTER                             *\n*        R8  - USING FOR DCB                                          *\n*        R9  - BASE                                                   *\n*        R10 - BASE                                                   *\n*        R11 - BASE                                                   *\n*        R12 - BASE                                                   *\n*        R13 -                                                        *\n*        R14 - WORK                                                   *\n*        R15 - WORK                                                   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ABEND  REASONS:                                                     *\n*                                                                     *\n*        U0001 - INVALID PARM                                         *\n*        U0002 - EXIT MISSING (SOUTDATE/SOUTCPR/LOCINDEX)             *\n*        U0003 - NO PREFIX DD CARD                                    *\n*        U0004 - NO //INPUT DD FOR \"FIXTAPE\" OPTION                   *\n*        U0005 - ALLOCATION REPORT OPEN ERROR                         *\n*        U0006 - ACT FILE ON NON-SUPPORTED DISK DEVICE (UPDATE TABLE) *\n*        U0007 - JOURNAL RECORD NOT FOUND -IN COPY MODE (MUST BE THERE*\n*        U0008 - VSAM UPDATE ERROR                                    *\n*        U0009 - INPUT DATASET (ACT/DAY) OPEN ERROR                   *\n*        U0010 - OUTPUT DATASET (DAILY/ARCH.) OPEN ERROR              *\n*        U0011 - INVALID DATASET NAME (NOT DATE/TIME STAMPED)         *\n*        U0012 - NON-SUPPORTED OUTPUT DISK COPY DEVICE TYPE           *\n*        U0013 - TAPE DENSITY NO IN THE TABLE                         *\n*        U0014 - LISTSPC CATALOG ERROR                                *\n*        U0015 - NOT USED                                             *\n*        U0016 - NO SPACE ON SPECIFIED PACKS                          *\n*        U0017 - BACKUP DATE ERROR                                    *\n*        U0018 - ACTIVE FILE ALLOCATION ERROR                         *\n*        U0019 - VSAM JOURNAL ALLOCATION ERROR                        *\n*        U0020 - VSAM JOURNAL OPEN ERROR                              *\n*        U0021 - NEW TAPE ALLOCATION ERROR                            *\n*        U0022 - MOD TO TAPE ALLOCATION ERROR                         *\n*        U0023 - OLD DAILY/ARCH. DATASET ALLOCATION ERROR             *\n*        U0024 - ENTERED INVALID CODE                                 *\n*        U0025 - NEW DAILY DISK DATASET ALLOCATION ERROR              *\n*        U0026 - OPEN ERROR ON SPECIAL DELETE DSN                     *\n*        U0027 - INCREASE GETMAIN FOR SPECIAL DELETE FILE             *\n*        U0028 - REQUESTED DELETE OF JOURNAL RECORD FAILED            *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        INITIALIZATION AND PARM ISOLATION                            *\n*                                                                     *\n***********************************************************************\nSOUTWTR  $PROLOG R12,R11,R10,R9  SPECIFY BASE REGISTERS\n         USING IHADCB,R8       INFORM THE ASSEMBLER\n         L     R2,0(R1)        GET PARM POINTER\n         LH    R3,0(R2)        GET PARM SIZE\n         LTR   R3,R3           ANY PARM?\n         BZ    ABEND1          NO, ERROR\n         SR    R3,R3           CLEAR R3\n         LH    R3,0(R2)        SET R3 TO LENGTH OF PARM\n         LA    R2,2(R2)\n         CLC   0(4,R2),=C'COPY' VALID REQUEST?\n         BNE   III010          NO, INVALID PARM\n         OI    FUNC,COPYING    SET COPY OPTION\n         SH    R3,=H'4'        SUBTRACT LENGTH OF COPY\n         CH    R3,=H'0'        ANY MORE\n         BE    FFF010          NO - ASSUME DAILY TO TAPE\n         LA    R2,4(R2)        BUMP PAST LENGTH AND COPY\n         CLC   0(7,R2),=C',DAILY=' IS NEXT A DAILY PARM\n         BNE   ABEND1          NO - BAD PARM\n         LA    R2,7(R2)        BUMP R2\n         SH    R3,=H'7'        SUBTRACT LENGTH OF COPY\n         BNP   ABEND1          NO POSITIVE - ERROR\n         CLC   0(4,R2),=C'TAPE' TAPE SPECIFIED\n         BE    GGG010          YES - SET SWITCH\n         CLC   0(4,R2),=C'CART' TAPE SPECIFIED\n         BE    GGG010          YES - SET SWITCH\n         LA    R4,DISKNAME     SET R4 TO NAME OF DISK\n         SR    R5,R5           CLEAR R5 FOR LENGTH\nAAA010   MVC   0(1,R4),0(R2)   MOVE IN ONE CHAR\n         LA    R2,1(R2)        BUMP R2\n         LA    R4,1(R4)        BUMP R4\n         AH    R5,=H'1'        ADD 1 TO LENGTH\n         STH   R5,DISKNML      SAVE IN DISK LENGTH AREA\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         CLI   0(R2),C','      FOUND COMA\n         BE    DDD010          GO TO SET DAYS LIMIT\n         CLI   0(R2),C'('      FOUND LEFT PAREN\n         BE    BBB010          HAVE SPECIFIED DISK PACKS\n         B     AAA010          TRY AGAIN\nBBB010   OI    COPYTO,DDSPEC   ALLOC ON SPECIFIED DISKS\n         LA    R4,DISKTBL      SET R4 TO DISK TABLE\n         LA    R2,1(R2)        BUMP PAST PAREN\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         SR    R5,R5           CLEAR R5 FOR LENGTH\nBBB010A  MVC   0(1,R4),0(R2)   MOVE IN FIRST PACK\n         AH    R5,=H'1'       ADD 1 TO LENGTH\n         STH   R5,DISKTBL+12  SAVE LENGTH\n         LA    R4,1(R4)        BUMP TO NEXT CHAR\n         LA    R2,1(R2)        BUMP TO NEXT CHAR\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         CLI   0(R2),C')'      END OF LIST\n         BE    CCC010          DONE\n         CLI   0(R2),C','      MORE PACKS SPECIFIED\n         BNE   BBB010A         MOVE IN NEXT CHAR\n         LA    R2,1(R2)        BUMP PAST COMA\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         LA    R4,DISKTBL      SET BACK TO BEGINNING\n         LA    R4,14(R4)       BUMP TO SECOND ENTRY\n         SR    R5,R5           CLEAR R5 FOR LENGTH\nBBB010B  MVC   0(1,R4),0(R2)   MOVE IN SECOND PACK\n         AH    R5,=H'1'        ADD 1 TO LENGTH\n         STH   R5,DISKTBL+26   SAVE LENGTH\n         LA    R4,1(R4)        BUMP TO NEXT CHAR\n         LA    R2,1(R2)        BUMP TO NEXT CHAR\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         CLI   0(R2),C')'      END OF LIST\n         BE    CCC010          DONE\n         CLI   0(R2),C','      MORE PACKS SPECIFIED\n         BNE   BBB010B         MOVE IN NEXT CHAR\n         LA    R2,1(R2)        BUMP PAST COMA\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         LA    R4,DISKTBL      SET BACK TO BEGINNING\n         LA    R4,28(R4)       BUMP TO THIRD ENTRY\n         SR    R5,R5           CLEAR R5 FOR LENGTH\nBBB010C  MVC   0(1,R4),0(R2)   MOVE IN THIRD PACK\n         AH    R5,=H'1'        ADD 1 TO LENGTH\n         STH   R5,DISKTBL+40   SAVE LENGTH\n         LA    R4,1(R4)        BUMP TO NEXT CHAR\n         LA    R2,1(R2)        BUMP TO NEXT ENTRY\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         CLI   0(R2),C','      END OF LIST\n         BE    ABEND1          3 PACKS IS MAX\n         CLI   0(R2),C')'      END OF LIST\n         BNE   BBB010C         MOVE IN NEXT CHAR\nCCC010   LA    R2,1(R2)        BUMP PAST PAREN\n         SH    R3,=H'1'        DECREMENT\n         BNP   ABEND1          ERROR\n         B     EEE010          GO SET DAY LIMIT\nDDD010   OI    COPYTO,DDANY    ALLOC ON ANY DISK\nEEE010   CH    R3,=H'9'        MUST HAVE AT LEAST 9 LEFT\n         BL    ABEND1          ERROR\n         CLC   0(6,R2),=C',DAYS=' DAYS PARM SPECIFIED\n         BNE   ABEND1          ERROR\n         LA    R2,6(R2)        BUMP R2\n         SH    R3,=H'6'        DECREMENT\n         BNP   ABEND1          ERROR\n         TM    0(R2),X'F0'     IS CHAR NUMERIC\n         BNO   ABEND1          NO - ABEND\n         TM    1(R2),X'F0'     IS CHAR NUMERIC\n         BNO   ABEND1          NO - ABEND\n         TM    2(R2),X'F0'     IS CHAR NUMERIC\n         BNO   ABEND1          NO - ABEND\n         MVC   DAYONLIN+2(3),0(R2) MOVE IN DAYS ONLINE\n         LA    R2,3(R2)        BUMP PAST DAYS\n         SH    R3,=H'3'        DECREMENT LENGTH\n         CH    R3,=H'0'        ANY PARM LEFT\n         BE    FFF011          GO MOVE IN TAPE NAME\n         CH    R3,=H'10'       MUST HAVE AT LEAST 10 MORE\n         BL    ABEND1          LESS - ERROR\n         CLC   0(9,R2),=C',ARCHIVE='\n         BNE   ABEND1\n         LA    R2,9(R2)        BUMP PAST CONSTANT\n         SH    R3,=H'9'        DECREMENT LENGTH\n         B     GGG011          GO MOVE IN ESOTERIC NAME\nFFF010   OI    COPYTO,DT       SET TO DAILY=TAPE\nFFF011   MVC   TAPENAME,=CL8'TAPE' \"TAPE\" UNIT BY DEFAULT\n         MVC   TAPENML,=H'4'   LENGTH OF 4\n         B     ENTRY020        START PROCESSING\nGGG010   OI    COPYTO,DT       SET TO DAILY=TAPE\nGGG011   LA    R4,TAPENAME     SET R4 TO NAME OF TAPE\n         STH   R3,TAPENML      SAVE LENGTH\nHHH010   MVC   0(1,R4),0(R2)   MOVE IN ONE CHAR\n         LA    R2,1(R2)        BUMP R2\n         LA    R4,1(R4)        BUMP R4\n         BCT   R3,HHH010       DECREMENT AND MOVE NEXT CHAR\n         B     ENTRY020        START PROCESSING\nIII010   CLC   0(6,R2),=C'FORMAT' VALID REQUEST?\n         BNE   JJJ010          NO - CHECK REBUILD\n         OI    FUNC,FORMAT     SET FORMAT  OPTION\n         B     ENTRY030        GO GET PREFIX\nJJJ010   CLC   0(8,R2),=C'REBUILD,' VALID REQUEST?\n         BNE   KKK010          NO - CHECK FIXTAPE\n         OI    FUNC,REBUILD    SET REBUILD OPTION\n         LA    R2,8(R2)        BUMP PAST PARM\n         MVI   RBLDSW,X'0F'    DEFAULT TO ALL\n         CLC   0(3,R2),=C'ALL' REBUILD ALL??\n         BE    ENTRY020        GO TO ENTRY020\n         MVI   RBLDSW,X'01'    SET TO REBUILD ACTIVE ONLY\n         CLC   0(3,R2),=C'ACT' REBUILD ACTIVE\n         BE    ENTRY020        GO TO ENTRY020\n         MVI   RBLDSW,X'02'    SET TO REBUILD DAILY ONLY\n         CLC   0(3,R2),=C'DAI' REBUILD ACTIVE\n         BE    ENTRY020        GO TO ENTRY020\n         MVI   RBLDSW,X'04'    SET TO REBUILD ARCHIVE ONLY\n         CLC   0(3,R2),=C'ARC' REBUILD ACTIVE\n         BE    ENTRY020        GO TO ENTRY020\n         MVI   RBLDSW,X'08'    SET TO REBUILD \"OLD\" ONLY\n         CLC   0(3,R2),=C'OLD' REBUILD ACTIVE\n         BE    ENTRY020        GO TO ENTRY020\n         B     ABEND1          ELSE - ERROR\nKKK010   CLC   0(7,R2),=C'FIXTAPE' VALID REQUEST?\n         BNE   ABEND1          NOT ANY VALID REQUEST\n         OI    FUNC,FIXTAPE    SET TAPE FIX OPTION\n         LA    R2,7(R2)        BUMP PAST CONSTANT\n         SH    R3,=H'7'        DECREMENT\n         CH    R3,=H'13'       MUST HAVE AT LEAST 13\n         BL    ABEND1          NO - ERROR\n         CLC   0(13,R2),=C',OUTPUT=DAILY'\n         BE    LLL010\n         OI    COPYTO,FIXARCH  SET TO ARCHIVE OUTPUT\n         CLC   0(15,R2),=C',OUTPUT=ARCHIVE'\n         BNE   ABEND1          ERROR\n         LA    R2,15(R2)       BUMP PAST OUT=DAY PARM\n         SH    R3,=H'15'       DECREMENT COUNTER\n         B     NNN010\nLLL010   LA    R2,13(R2)       BUMP PAST OUT=DAY PARM\n         SH    R3,=H'13'       DECREMENT COUNTER\n         OI    COPYTO,FIXDAY   SET TO DAILY OUTPUT\nNNN010   CH    R3,=H'1'        CHECK REMAINING\n         BL    PPP010          ASSUME TAPE\n         CLI   0(R2),C'='      EQUAL SIGN\n         BNE   ABEND1          ERROR\n         LA    R2,1(R2)        BUMP PAST EQUAL\n         SH    R3,=H'1'        DECREMENT COUNTER\n         BZ    PPP010          IF ZERO - ASSUME TAPE\n         LA    R4,TAPENAME     SET R4 TO NAME OF TAPE\n         STH   R3,TAPENML      SAVE LENGTH\nOOO010   MVC   0(1,R4),0(R2)   MOVE IN ONE CHAR\n         LA    R2,1(R2)        BUMP R2\n         LA    R4,1(R4)        BUMP R4\n         BCT   R3,OOO010       DECREMENT AND MOVE NEXT CHAR\n         B     ENTRY020        START PROCESSING\nPPP010   MVC   TAPENAME,=CL8'TAPE' \"TAPE\" UNIT BY DEFAULT\n         MVC   TAPENML,=H'4'   LENGTH OF 4\n         B     ENTRY020        START PROCESSING\n         EJECT\n***********************************************************************\n*        LOAD THE EXIT ROUTINE (IF ONE EXISTS)                        *\n*        LOAD THE COMPRESSION EXIT                                    *\n*        LOAD THE LOCINDEX EXIT                                       *\n*        LOAD THE DATE BACKUP EXIT                                    *\n***********************************************************************\nENTRY020 EQU   *\n         BLDL  0,BLDLLIST      ISSUE BLDL FOR SOUTXIT MODULE\n         LTR   R15,R15         DOES IT EXIST\n         BNZ   AAA020          NO, BYPASS LOAD\n         LOAD  EP=SOUTXIT      LOAD ROUTINE\n         ST    R0,EXITADDR     SAVE ADDRESS\nAAA020   MVC   BLDLLIST+4(8),=CL8'SOUTCPR'    COMPRESS MODULE\n         BLDL  0,BLDLLIST      ISSUE BLDL FOR COMPRESS MODULE\n         LTR   R15,R15         DOES IT EXIST\n         BNZ   ABEND2          NO, BYPASS LOAD\n         LOAD  EP=SOUTCPR      LOAD ROUTINE\n         ST    R0,COMPADDR     SAVE ADDRESS\nBBB020   MVC   BLDLLIST+4(8),=CL8'LOCINDEX'    LOC INDEX\n         BLDL  0,BLDLLIST      ISSUE BLDL\n         LTR   R15,R15         DOES IT EXIST\n         BNZ   ABEND2          ERROR - NEED ROUTINE\n         LOAD  EP=LOCINDEX     LOAD ROUTINE\n         ST    R0,LOCIADDR     SAVE ADDRESS\nCCC020   MVC   BLDLLIST+4(8),=CL8'SOUTDATE'   BACKUP DATE\n         BLDL  0,BLDLLIST      ISSUE BLDL\n         LTR   R15,R15         DOES IT EXIST\n         BNZ   ABEND2          ERROR - NEED ROUTINE\n         LOAD  EP=SOUTDATE     LOAD ROUTINE\n         ST    R0,DATEADDR     SAVE ADDRESS\n         EJECT\n***********************************************************************\n*       GET PREFIX AND OLDPFX JFCB'S TO GET PREFIX FOR DSNS           *\n*       OLDPFX IS OPTIONAL (FOR CONVERSION ONLY)                      *\n*       ALSO CHECK IF THERE IS A INPUT DD FOR FIX TAPE                *\n***********************************************************************\nENTRY030 L     R3,16               GET CVT ADDRESS\n         L     R3,0(R3)            GET OLD/NEW TCB POINTERS\n         L     R3,4(R3)            GET OUR TCB ADDRESS\n         L     R3,12(R3)           GET OUR TIOT ADDRESS\n         LA    R2,24               SIZE OF TIOT HEADER\nAAA030   AR    R3,R2               BUMP TO NEXT ENTRY\n         CLC   4(8,R3),=CL8'PREFIX  ' PREFIX DATASET?\n         BE    CCC030              YES, GET DSN\n         CLC   4(8,R3),=CL8'OLDPFX  ' OLD PREFIX (REBUILD OPTION ONLY)\n         BE    FFF030              YES, OK\n         CLC   4(8,R3),=CL8'ALLOCRPT' ALLOCATION REPORT DD SUPPLIED\n         BE    III030              YES, OK\n         CLC   4(8,R3),=CL8'SPECLDEL' DELETE REPORTS DD SUPPLIED\n         BE    JJJ030              YES, OK\n         CLC   4(8,R3),=CL8'INPUT   ' INPUT DSN (FIXTAPE OPTION ONLY)\n         BE    BBB030              YES, OK\n         B     LLL030              TRY FOR NEXT DD\nBBB030   OI    FUNC,TAPEINP        HAVE TAPE IN DD CARD\n         B     LLL030              TRY FOR NEXT DD\nCCC030   RDJFCB PREFIX             GET JFCB\n         MVC   PREFIX1,JFCB        MOVE IN PREFIX\n         LA    R4,PREFIX1         SET R4 TO BEGINNING\n         LA    R4,20(R4)          SET R4 TO END\n         LA    R5,21              SET R5 TO MAX LENGTH\nDDD030   CLI   0(R4),C' '         FIND BLANK\n         BNE   EEE030             NO -FOUND END\n         SH    R4,=H'1'           DECREMENT\n         BCT   R5,DDD030          TRY AGAIN\nEEE030   ST    R5,PREFIX1L        SAVE LENGTH OF PREFIX\n         B     LLL030             TRY FOR NEXT DD\nFFF030   RDJFCB OLDPFX            GET OLD JFCB\n         MVC   PREFIX2,JFCB        MOVE IN PREFIX\n         LA    R4,PREFIX2         SET R4 TO BEGINNING\n         LA    R4,24(R4)          SET R4 TO END\n         LA    R5,25              SET R5 TO MAX LENGTH\nGGG030   CLI   0(R4),C' '         FIND BLANK\n         BNE   HHH030             NO -FOUND END\n         SH    R4,=H'1'           DECREMENT\n         BCT   R5,GGG030          TRY AGAIN\nHHH030   ST    R5,PREFIX2L        SAVE LENGTH OF PREFIX\n         B     LLL030\nIII030   EQU   *\n         OI    FUNC,RPTALLO        REPORT ON ALLOCATION\n         B     LLL030\nJJJ030   EQU   *\n         OI    FUNC,SPECDEL        DELETE REPORTS ON MOVE\n         B     LLL030\nLLL030   ICM   R2,1,0(R3)          SIZE OF ENTRY\n         BZ    MMM030              END OF TIOT, CONTINUE\n         B     AAA030              CHECK NEXT ENTRY\nMMM030   CLI   PREFIX1,C' '        IS THERE A PREFIX\n         BE    ABEND3              ERROR\n         TM    FUNC,FIXTAPE        ARE WE FIXING A TAPE\n         BZ    OOO030              NO - BYPASS NEXT CHECK\n         TM    FUNC,TAPEINP        HAVE INPUT TAPE DD?\n         BZ    ABEND4              NO - ERROR\nOOO030   TM    FUNC,RPTALLO        ALLOCATION REPORT WANTED\n         BZ    PPP030              NO BYPASS OPEN\n         OPEN  (ALLOCRPT,(OUTPUT)) OPEN REPORT DSN\n         TM    ALLOCRPT+48,X'10'   DID IT OPEN\n         BZ    ABEND5              NO - ERROR\n         BAL   R14,ENTRY960        PUT OUT HEADING\n         BAL   R14,ENTRY960        PUT OUT BLANK LINE\nPPP030   TM    FUNC,SPECDEL        DELETE REPORTS  WANTED\n         BZ    EXIT030             NO BYPASS OPEN\n         GETMAIN R,LV=2000\n         LR    R6,R1               SAVE ADDR OF DELETE AREA\n         ST    R6,SAVESPEC         SAVE ADDR OF DELETE AREA\n         LR    R0,R1               SET R0 TO BEGINNING OF GETMAIN\n         LA    R1,2000             SET R1 TO LENGTH\n         XR    R14,R14             CLEAR R14\n         XR    R15,R15             CLEAR R15\n         MVCL  R0,R14              SET GETMAINED TO ALL FF\n         USING SPECAREA,R6         INFORM ASSEMBLER\n         OPEN  (SPECLDEL,(INPUT))  OPEN DELETE DSN\n         TM    SPECLDEL+48,X'10'   DID IT OPEN\n         BZ    ABEND26             NO - ERROR\n         LA    R7,99               99  RECORDS MAXIMUM\nQQQ030   GET   SPECLDEL,DELAREA    GET DELETE RECORD\n         LA    R2,DELAREA          SET R2 TO JOBNAME\n         LA    R3,SPECNAME         SET R3 TO SPECIAL NAME\n         LA    R4,8                SET TO MAX LENGTH\n         XR    R5,R5               SET TO ZERO\nRRR030   CLI   0(R2),C'*'          GENERIC NAME\n         BE    SSS030              YES - DONE\n         MVC   0(1,R3),0(R2)       MOVE IN 1 CHARACTER\n         LA    R2,1(R2)            BUMP TO NEXT CHAR\n         LA    R3,1(R3)            BUMP TO NEXT CHAR\n         LA    R5,1(R5)            BUMP LENGTH COUNTER\n         BCT   R4,RRR030           MOVE NEXT CHARACTER\nSSS030   SH    R5,=H'1'            DECREMANT FOR COMPARE\n         ST    R5,SPECLGTH         SAVE LENGTH OF JOB NAME\n         MVC   SPECNUM,DELJNUM     SAVE JOB NUMBER IF ANY\n         LA    R6,20(R6)           BUMP TO NEXT ENTRY\n         BCT   R7,QQQ030           READ NEXT IF LESS THAN 100\n         B     ABEND27             MORE THAN 99 ENTRIES - ERROR\nXXX030   EQU   *\n         CLOSE SPECLDEL\n         DROP  R6\nEXIT030  EQU   *\n         EJECT\n***********************************************************************\n*        PROCESS THE COPY OPTION:\n*          A) COPY ACTIVE TO TAPE ONLY\n*           OR\n*          B) COPY DAILYS TO ARCHIVE TAPE (BY DAYS OLD)\n*             AND COPY ACTIVE TO DISK DAILY\n*           ALWAYS\n*          C) CLEAR THE ACTIVE FILE\n***********************************************************************\nENTRY040 TM    FUNC,COPYING        ARE WE COPYING\n         BZ    ENTRY050            TRY ANOTHER OPTION\n         BAL   R14,ENTRY910        ALLOCATE AND OPEN JOURNAL\n*\n*        THE FOLLOWING LOGIC WILL:\n*          A) GET LAST ARCHIVE TAPE USED (IF ANY)\n*          B) GET THE DAILY DATASETS ON DISK ON DETERMINE IF\n*             THEY SHOULD BE MOVE TO ARCHIVE TAPE\n*             (EITHER DAILY IS PAST LIMIT FOR ONLINE\n*              OR SWITCHING FROM DISK TO TAPE DAILYS)\n*          C) ALLOCATE THE DAILY FILE\n*          D) ALLOCATE THE ARCHIVE TAPE\n*          E) COPY DAILY TO ARCHIVE AND UPDATE JOURNAL\n*          F) DELETE DAILY\n*          H) GO BACK TO B AND TRY AGAIN\n*\n* GET LAST ARCHIVE TAPE USED ????\n*\n         NI    MISC,255-ARCHALLO   SET ARCHIVE ALLOCATED TO NO\n         MVC   PASSTYPE,ARCHVD     GET LAST ARCHIVE TAPE WITH\n*                                   A DATE STAMP (NOT OLD GDG)\n         OI    MISC,PASSLAST       JUST GET LAST ONE\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVI   LOOKFOR,ATAPE       LOOKING FOR A TAPE\n         BAL   R14,ENTRY800        GET LAST ARCHIVE TAPE USED\n         MVC   ARCHDSN,PASSDSN     SAVE IT FOR LATER ALLOC\n*\n         BAL   R14,ENTRY860        GET BACKUP DATE FOR COMPARE\n         SR    R7,R7               CLEAR RECORD COUNTER\n*\n* GET ALL DAILY DATASET AND COMPARE AGAINST DATE\n*\nAAA040   MVC   PASSTYPE,DAYLED     GET LAST DAILY DISK WITH\n*                                  A DATE STAMP (NOT OLD GDG)\n         NI    MISC,255-PASSLAST   GET ALL DAILYS\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVI   LOOKFOR,ADISK       LOOKING FOR A DISK\n         BAL   R14,ENTRY800        GET NEXT DAILY DATASET\n         CLI   PASSDSN,C' '        ANY MORE DAILYS  ONLINE\n         BE    GGG040              NO - DONE WITH DAILY TO ARCHIVE\n*\n* IF CHANGING FROM DISK TO TAPE DAILYS, MOVE ANY DISK TO ARCH TAPE\n*\n         TM    COPYTO,DT           DAILY TO TAPE ONLY\n         BO    AAA041              YES-COPY ANY DAILY DISK TO ARCH.\n*\n         L     R5,PREFIX1L         SET R5 TO LENGTH OF PREFIX\n         AH    R5,=H'7'            BUMP PAST .DAILY.\n         LA    R4,PASSDSN          SET R4 TO PASSED DSN\n         LA    R4,0(R5,R4)         BUMP PAST PREFIX\n         CLC   COMPARED,0(R4)      COMPARE DATE STAMP\n         BNH   AAA040              WITHIN LIMIT - KEEP ONLINE\nAAA041   BAL   R14,ENTRY930        ALLOCATE THE DAILY DATASET\n         BAL   R14,ENTRY700        OPEN INPUT FILE\n*\n*       ALLOCATE THE ARCHIVE TAPE FIRST TIME THRU\n*\n         MVC   PASSDSN,ARCHDSN     RESTORE PASSDSN TO ARCHIVE\n         TM    MISC,ARCHALLO       IS ARCHIVE ALLOCATED YET?\n         BO    DDD040              YES - BYPASS ALLOCATION\n         OI    MISC,ARCHALLO+FRSTIME+RITETAPE       ARCH. IS ALLOCATED\n*                                     SET FRSTIME FOR JOURN UPDATE OFF\n*                                     WRITING ON TAPE\n         MVC   NEWTYPE,ARCHV       SET TYPE FOR NEW FILE\n         CLI   PASSDSN,C' '        WERE THERE ANY\n         BNE   BBB040              YES - ALLOC EXISTING\n         BAL   R14,ENTRY920        ALLOCATE A NEW TAPE\n         B     CCC040\nBBB040   BAL   R14,ENTRY925        ALLOCATE AN EXISTING TAPE\nCCC040   BAL   R14,ENTRY750        OPEN OUTPUT FILE\nDDD040   MVI   WHERETO,TOFFF040    WHERE TO ON EOF\n         MVI   INPTYPE,DAYFILE     INPUT TYPE DAILY - NO SOUTXIT\n*\n*       MOVE DAILY TO ARCHIVE AND UPDATE JOURNAL\n*\nEEE040   BAL   R14,ENTRY710        READ THE INPUT DAILY FILE\n         BAL   R14,ENTRY760        WRITE THE OUTPUT ARCHIVE FILE\n         B     EEE040\nFFF040   BAL   R14,ENTRY980       CLOSE THE DAILY/DELETE IT\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    AAA040             NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTDDS REPORT TYPE\n         MVC   RPTLINE+29(44),DALYDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\n         B     AAA040\nGGG040   TM    MISC,ARCHALLO       WAS ARCHIVE ALLOCATED\n         BZ    HHH040              NO - BYPASS CLOSE\n         BAL   R14,ENTRY985        CLOSE AND FREE ARCHIVE OUTPUT\n         LTR   R7,R7               ANY INPUT RECORDS WRITTEN\n         BZ    HHH040              NO - BYPASS LAST RECORD UPDATE\n         BAL   R14,ENTRY650        UPDATE THE LAST VSAM RECORD\n*\n*       DONE WITH DAILY TO ARCHIVE MOVE\n*       NOW SETUP FOR ACTIVE TO DAILY DISK\n*       (UNLESS DAILY TO TAPE ONLY)\n*\nHHH040   EQU   *\n         TM    COPYTO,DT           DAILY TO TAPE ONLY\n         BO    KKK040              YES-GO ALLOCATE DAILY TAPE\n*\n         BAL   R14,ENTRY900        ALLOCATE THE ACTIVE FILE\n         BAL   R14,ENTRY700        OPEN THE ACTIVE FILE\n*\n*  GET ACTIVE DEVICE TYPE AND THE NUMBER OF BLKS PER CYLINDER\n*  FOR ALLOCATION OF NEW DAILY FILE\n*\n         LA    R8,INPUT        SET UP ADDRESSABILITY\nIII040   LA    R15,DEVT#       SET LOOP CONTROL\n         LA    R14,DEVT        ADDRESS OF DEVICE TABLE\nJJJ040   CLC   0(1,R14),DCBTRBAL-1 CHECK DEVICE TYPE\n         BE    JJJ041          FOUND, CONTINUE\n         LA    R14,8(R14)      NEXT ENTRY\n         BCT   R15,JJJ040      CHECK NEXT DEVICE ENTRY\n         WTO   'SOUTWTR - UNSUPPORTED ACTIVE FILE DEVICE TYPE'\n         B     ABEND6          ERROR RETURN\nJJJ041   MVC   ALLOBLKS,4(R14) STORE BLKS/CYL QUANTITY\n*\n*  GET NUMBER OF CYLINDERS IN ACTIVE FILE\n*\n         L     R14,DCBDEBAD    INPUT DCB'S DEB\n         SR    R3,R3           CLEAR FOR ICM\n         SR    R4,R4           CLEAR FOR ICM\n         ICM   R3,3,38(R14)    MOVE IN LOWER CYLINDER\n         ICM   R4,3,42(R14)    MOVE IN UPPER CYLINDER\n         SR    R4,R3           R4 CONTAINS CYLINDERS IN DATASET\n         AH    R4,=H'1'        ROUND UP 1\n         ST    R4,ALLOCYL      SAVE IT\n         BAL   R14,ENTRY940    GO ALLOCATE NEW DISK DAILY DATASET\n         BAL   R14,ENTRY750    OPEN OUTPUT FILE\n         NI    MISC,255-RITETAPE  WILL BE WRITING TO DISK\n         B     NNN040          GO PROCESS ACTIVE TO DAILY\n*\n*       SETUP AND PROCESS ACTIVE TO DAILY=TAPE\n*\nKKK040   EQU   *\n*\n*  FOLLOWING CODE NEEDED TO RESET LISTSPC (LICINDEX) IF\n*  CHANGING FROM DISK TO TAPE (OTHERWISE JUST UNNEEDED LOGIC)\n         MVC   PASSTYPE,BLANKS     GET AT LEAST ONE DSN\n         MVC   PASSPFX(21),PREFIX1 MOVE NEW PREFIX NAME\n         MVC   PASSLEN,PREFIX1L    MOVE NEW PREFIX LENGTH\n         NI    MISC,255-PASSLAST   GET FIRST\n         MVI   LOOKFOR,BOTH        GET ANY TYPE\n         BAL   R14,ENTRY800        GO GET DSN\n*  PREVIOUS CODE NEEDED TO RESET LISTSPC GETMAINED AREA\n*\n         OI    MISC,RITETAPE       WILL BE WRITING TO TAPE\n         MVC   PASSTYPE,DAYLED     GET LAST DAILY WITH\n*                                  A DATE STAMP (NOT OLD GDG)\n         MVC   PASSPFX(21),PREFIX1 MOVE NEW PREFIX NAME\n         MVC   PASSLEN,PREFIX1L    MOVE NEW PREFIX LENGTH\n         OI    MISC,PASSLAST       JUST GET LAST ONE\n         MVI   LOOKFOR,ATAPE       LOOK FOR LAST DAILY TAPE\n         BAL   R14,ENTRY800        GO GET DSN\n         MVC   NEWTYPE,DAYLE       SET NEW TYPE TO DAILY\n         CLI   PASSDSN,C' '        ARE THERE ANY\n         BNE   LLL040              YES - ALLOCATE EXISTING\n         BAL   R14,ENTRY920        ALLOCATE A NEW TAPE\n         B     MMM040\nLLL040   BAL   R14,ENTRY925        ALLOCATE AN EXISTING TAPE\nMMM040   BAL   R14,ENTRY750        OPEN OUTPUT DAILY TAPE\n         BAL   R14,ENTRY900        GO ALLOC ACTIVE FILE\n         BAL   R14,ENTRY700        OPEN ACTIVE FILE\nNNN040   MVI   WHERETO,TOYYY040    SET EOF WHERE TO\n         OI    MISC,FRSTIME        SET FRSTIME FOR JOURN UPDATE OFF\n         MVI   INPTYPE,ACTFILE     SET TYPE TO ACTIVE FILE\n         SR    R7,R7               CLEAR ACTIVE RECORD COUNTER\nOOO040   BAL   R14,ENTRY710        READ THE INPUT FILE\n         BAL   R14,ENTRY760        WRITE OUT THE FILE\n         B     OOO040              GET NEXT RECORD\nYYY040   EQU   *\n         ICM   R15,15,EXITADDR     ADDRESS OF THE EXIT\n         BZ    ZZZ040              NONE, BYPASS EXIT\n         NI    EXITSW,255-REC-SEP  RESET SEP AND REC FLAGS\n         OI    EXITSW,EOF          INDICATE END OF FILE\n         XC    EXITREC,EXITREC     CLEAR RECORD POINTER\n         LA    R1,EXITPARM         ADDRESS OF EXIT PARM\n         BALR  R14,R15             LAST CALL TO THE EXIT ROUTINE\nZZZ040   LTR   R7,R7               ANY RECORDS IN THE ACTIVE FILE\n         BZ    ZZZ041              NONE - BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE THE LAST VSAM RECORD\nZZZ041   BAL   R14,ENTRY980        CLOSE THE INPUT FILE\n         BAL   R14,ENTRY985        CLOSE THE OUTPUT FILE\n         BAL   R14,ENTRY990        CLOSE THE VSAM JOURNAL\n         LTR   R7,R7               WERE ANY RECORDS WRITTEN?\n         BZ    EXIT040             NO, ALL DONE\n         B     ENTRY070            GO AND CLEAR ACTIVE FILE\nEXIT040  EQU   *\n         B     EXIT0\n         EJECT\n***********************************************************************\n*        REBUILD THE VSAM FILE FROM ALL THE INPUT FILES\n***********************************************************************\nENTRY050 TM    FUNC,REBUILD        ARE WE REBUILDING\n         BZ    ENTRY060            NO - TRY FIX TAPE OPTION\n         MVC   HLINES,=PL4'0'      ZERO LINE COUNTER\n         MVC   HTTR,=X'000000'     ZERO THE TTR\n         BAL   R14,ENTRY910        ALLOCATE AND OPEN JOURNAL\n         TM    RBLDSW,X'01'        REBUILD ACTIVE\n         BZ    CCC050              NO - BYPASS REBUILD ACTIVE\n         BAL   R14,ENTRY900        ALLOCATE THE ACTIVE FILE\n         BAL   R14,ENTRY700        OPEN THE ACTIVE FILE\n         MVI   WHERETO,TOBBB050    SET EOF WHERE TO!!\n         LA    R8,INPUT            SET UP DCB ADDRESSABILITY\n         RDJFCB INPUT              GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755        GET DSN AND DEVICE TYPE\n         SR    R7,R7               CLEAR INPUT RECORD COUNTER\n         OI    MISC,FRSTIME        SET ON\n         MVI   INPTYPE,ACTFILE     SET FILE TYPE TO ACTIVE\nAAA050   BAL   R14,ENTRY710        READ THE FILE\n         B     AAA050              GO GET NEXT\nBBB050   BAL   R14,ENTRY980        CLOSE THE ACTIVE FILE\n         LTR   R7,R7               WERE ANY RECORDS WRITTEN?\n         BZ    CCC050              NO BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE LAST VSAM RECORD\nCCC050   TM    RBLDSW,X'02'        REBUILD DAILY\n         BZ    FFF050              NO - BYPASS REBUILD DAILY\n         MVC   PASSTYPE,DAYLE      GET ALL DAILY SYSOUT DATASETS\n         NI    MISC,255-PASSLAST   GET ALL\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVI   LOOKFOR,BOTH        LOOKING FOR A DISK OR TAPE\n         BAL   R14,ENTRY800        GET ALL ARCHIVE TAPE USED\n         CLI   PASSDSN,C' '        ANY MORE DAILYS  ONLINE\n         BE    FFF050              DONE WITH DAILY\n         BAL   R14,ENTRY930        ALLOCATE THE DAILY INPUT FILE\n         BAL   R14,ENTRY700        OPEN THE INPUT FILE\n         LA    R8,INPUT            SET UP DCB ADDRESSABILITY\n         RDJFCB INPUT              GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755        GET DSN AND DEVICE TYPE\n         MVI   INPTYPE,DAYFILE     SET FILE TYPE TO DAILY\n         OI    MISC,FRSTIME        SET ON\n         SR    R7,R7               CLEAR INPUT RECORD COUNTER\n         MVI   WHERETO,TOEEE050    SET EOF WHERE TO!!\nDDD050   BAL   R14,ENTRY710        READ THE FILE\n         B     DDD050              LOOP\nEEE050   BAL   R14,ENTRY980        CLOSE IT\n         LTR   R7,R7               ANY RECORDS WRITTEN\n         BZ    CCC050              NO - BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE LAST VSAM RECORD\n         B     CCC050              TRY FOR MORE DAILYS\nFFF050   TM    RBLDSW,X'04'        REBUILD ARCHIVE\n         BZ    III050              NO - BYPASS REBUILD ARCHIVE\n         MVC   PASSTYPE,ARCHV      GET ALL ARCHIVE DATASETS\n         NI    MISC,255-PASSLAST   GET ALL\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1     MOVE PREFIX NAME\n         MVI   LOOKFOR,BOTH        LOOKING FOR A DISK OR TAPE\n         BAL   R14,ENTRY800        GET ALL ARCHIVE TAPE USED\n         CLI   PASSDSN,C' '        ANY MORE ARCHIVES\n         BE    III050              DONE WITH ARCHIVE\n         BAL   R14,ENTRY930        ALLOCATE THE INPUT ARCHIVE FILE\n         BAL   R14,ENTRY700        OPEN THE INPUT FILE\n         LA    R8,INPUT            SET UP DCB ADDRESSABILITY\n         RDJFCB INPUT              GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755        GET DSN AND DEVICE TYPE\n         OI    MISC,FRSTIME        SET ON\n         SR    R7,R7               CLEAR RECORD COUNTER\n         MVI   WHERETO,TOHHH050    SET EOF WHERE TO!!\nGGG050   BAL   R14,ENTRY710        READ THE FILE\n         B     GGG050              LOOP\nHHH050   BAL   R14,ENTRY980        CLOSE IT\n         LTR   R7,R7               ANY RECORDS WRITTEN\n         BZ    FFF050              NO - BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE LAST VSAM RECORD\n         B     FFF050              TRY FOR MORE DAILYS\nIII050   CLI   PREFIX2,C' '        ANY PREFIX 2\n         BE    LLL050              END\n         TM    RBLDSW,X'08'        REBUILD OLD ARCHIVE\n         BZ    LLL050              NO - BYPASS REBUILD OLD\n         MVC   PASSTYPE,ARCHV           ##### OLD=ARCHIVE\n*        MVC   PASSTYPE,DAYLE           ##### OLD=DAILY\n         NI    MISC,255-PASSLAST   GET ALL\n         MVC   PASSPFX,PREFIX2     MOVE IN OLD PREFIX\n         MVC   PASSLEN,PREFIX2L    MOVE PREFIX LENGTH\n         MVI   LOOKFOR,BOTH        LOOKING FOR A DISK OR TAPE\n         BAL   R14,ENTRY800        GET ALL ARCHIVE TAPE USED\n         CLI   PASSDSN,C' '        ANY MORE OLD ARCHIVES\n         BE    LLL050              DONE WITH OLD ARCHIVES\n         BAL   R14,ENTRY930        ALLOCATE THE OLD ARCHIVE FILES\n         BAL   R14,ENTRY700        OPEN THE INPUT FILE\n         LA    R8,INPUT            SET UP DCB ADDRESSABILITY\n         RDJFCB INPUT              GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755        GET DSN AND DEVICE TYPE\n         MVI   HADR,C'O'           SET TO OLD SYSTEM\n         OI    MISC,FRSTIME        SET ON\n         SR    R7,R7               CLEAR RECORD COUNTER\n         MVI   WHERETO,TOKKK050    SET EOF WHERE TO!!\nJJJ050   BAL   R14,ENTRY710        READ THE FILE\n         B     JJJ050              LOOP\nKKK050   BAL   R14,ENTRY980        CLOSE IT\n         LTR   R7,R7               ANY RECORDS WRITTEN\n         BZ    III050              NO - BYPASS LAST UPDATE\n         BAL   R14,ENTRY650        UPDATE LAST VSAM RECORD\n         B     III050              TRY FOR MORE\nLLL050   BAL   R14,ENTRY990        CLOSE THE VSAM FILE\nEXIT050  EQU   *\n         B     EXIT0               ALL DONE\n         EJECT\n***********************************************************************\n*        TAKE A TAPE INPUT (SUPPLIED IN //INPUT DD CARD)\n*        AND CREATE A NEW OUTPUT DAILY OR ARCHIVE TAPE\n*        ALONG WITH ADDING OR UPDATING THE VSAM JOURNAL\n***********************************************************************\nENTRY060 TM    FUNC,FIXTAPE        ARE WE FIXING TAPE\n         BZ    ENTRY070            NO -MUST BE FORMATTING\n         BAL   R14,ENTRY910        ALLOCATE AND OPEN JOURNAL\n         TM    COPYTO,FIXDAY       TO DAILY TAPE\n         BZ    AAA060              NO - MUST BE ARCHIVE\n         MVC   PASSTYPE,DAYLED     GET LAST DAILY WITH\n*                                  A DATE STAMP (NOT OLD GDG)\n         MVC   NEWTYPE,DAYLE\n         B     BBB060\nAAA060   MVC   PASSTYPE,ARCHVD     GET LAST ARCHIVE WITH\n*                                   A DATE STAMP (NOT OLD GDG)\n         MVC   NEWTYPE,ARCHV       SET TO ARCHIVE FOR ALLOC\nBBB060   OI    MISC,PASSLAST       JUST GET LAST ONE\n         MVC   PASSLEN,PREFIX1L    MOVE PREFIX LENGTH\n         MVC   PASSPFX(21),PREFIX1 MOVE PREFIX NAME\n         MVI   LOOKFOR,ATAPE       LOOK FOR LAST TAPE USED\n         BAL   R14,ENTRY800        GO GET DSN\n         CLI   PASSDSN,C' '        ARE THERE ANY\n         BNE   CCC060              YES - MOD ON\n         BAL   R14,ENTRY920        ALLOCATE A NEW TAPE\n         B     DDD060\nCCC060   BAL   R14,ENTRY925        ALLOCATE AN EXISTING TAPE\nDDD060   BAL   R14,ENTRY750        OPEN THE OUTPUT FILE\nEEE060   LA    R8,INPUT            SET UP ADDRESSABILTY\n         MVC   DCBDDNAM,=CL8'INPUT' SET INPUT AS DEFAULT\n         BAL   R14,ENTRY700        OPEN THE INPUT TAPE\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EEE061             NO - BYPASS REPORTING\n         RDJFCB INPUT             GET JFCB FOR REPORT LINE\n         MVC   RPTLINE(29),RPTIDS REPORT TYPE\n         MVC   RPTLINE+29(44),JFCB MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEEE061   MVI   WHERETO,TOGGG060    SET EOF WHERE TO!!\n         OI    MISC,FRSTIME+RITETAPE SET ON\n         SR    R7,R7               CLEAR RECORD COUNTER\n         MVI   INPTYPE,INPFILE     SET TYPE TO INPUT\nFFF060   BAL   R14,ENTRY710        READ THE FILE\n         BAL   R14,ENTRY760        WRITE IT\n         B     FFF060              READ AGAIN\nGGG060   LTR   R7,R7               ANY RECORDS\n         BZ    HHH060              NO - BYPASS UPDATE LAST RECORD\n         BAL   R14,ENTRY650        UPDATE THE LAST VSAM RECORD\nHHH060   BAL   R14,ENTRY980        CLOSE THE INPUT FILE\n         BAL   R14,ENTRY985        CLOSE THE OUTPUT FILE\n         BAL   R14,ENTRY990        CLOSE THE VSAM JOURNAL\nEXIT060  EQU   *\n         B     EXIT0\n         EJECT\n***********************************************************************\n*        FORMAT THE ACTIVE FILE\n***********************************************************************\nENTRY070 EQU   *\n         TM    FUNC,RPTALLO         REPORT WANTED\n         BZ    AAA070               NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTFORM  REPORT TYPE\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nAAA070   TM    FUNC,FORMAT          FORMATTING FILE ONLY\n         BZ    BBB070               NO  - BR AROUND\n         SR    R7,R7                CLEAR R7\n         SR    R0,R0                CLEAR R0\n         BCTR  R7,R0                SET TO MAX\nBBB070   BAL   R14,ENTRY900         ALLOC ACTIVE FILE\n         LA    R8,FORMDCB           SET UP ADDRESABILITY\n         MVC   DCBDDNAM,ACTDDN      MOVE IN DDNAME\n         BAL   R14,ENTRY995         FORMAT IT\n*\n*    EXPECT D37 IF FORMATTING ONLY\n*\nEXIT070  EQU   *\n         B     EXIT0                DONE\n         EJECT\n***********************************************************************\n*        END OF FILE PROCESSING ROUTINE - GO TO ??????                *\n***********************************************************************\nENTRY100 DS    0H\n         TM    WHERETO,TOYYY040\n         BO    YYY040\n         TM    WHERETO,TOFFF040\n         BO    FFF040\n         TM    WHERETO,TOBBB050\n         BO    BBB050\n         TM    WHERETO,TOEEE050\n         BO    EEE050\n         TM    WHERETO,TOHHH050\n         BO    HHH050\n         TM    WHERETO,TOKKK050\n         BO    KKK050\n         TM    WHERETO,TOGGG060\n         BO    GGG060\n         B     ABEND24\n         EJECT\n***********************************************************************\n*        READ THE VSAM JOURNAL FILE                                   *\n***********************************************************************\nENTRY600 DS    0H\n         ST    R14,SAVE600\n         CLI   RECYEAR,C' '    FULL YEAR BLANK\n         BNE   AAA600          NO - MOVE IT\n         MVC   RECYEAR(2),=C'19' SET TO 1900\n         MVC   RECYEAR+2(2),RECDATE+6  MOVE IN YEAR\n         CLC   RECDATE+6(2),=C'75'  LESS THAN 1975\n         BH    AAA600              NO - CONTINUE\n         MVC   RECYEAR(2),=C'20'   MUST BE 2000\nAAA600   MVC   HDATE(4),RECYEAR    MOVE DATA FROM SEPARATOR\n         MVC   HDATE+4(2),RECDATE    MOVE DATA FROM SEPARATOR\n         MVC   HDATE+6(2),RECDATE+3  MOVE DATA FROM SEPARATOR\n         PACK  PDATE,HDATE           PACK DATE\n         MVC   JDATE,=P'099999999'   SET TO 9999999\n         SP    JDATE,PDATE         REVERSE DATE\n         MVC   HTIME(2),RECTIME    MOVE DATA FROM SEPARATOR\n         MVC   HTIME+2(2),RECTIME+3  MOVE DATA FROM SEPARATOR\n         MVC   HTIME+4(2),RECTIME+6  MOVE DATA FROM SEPARATOR\n         PACK  PTIME,HTIME          PACK TIME\n         MVC   JTIME,=P'0999999'    SET TO 9999999\n         SP    JTIME,PTIME          REVERSE TIME\n         MVC   JJOBN,RECJNAME  MOVE DATA FROM SEPARATOR\n         MVC   JJOB#(5),RECJNUM+3   MOVE DATA FROM SEPARATOR\n         MVC   JJOB#+5(3),RECJNUM   MOVE DATA FROM SEPARATOR\n*\n         MVI   SPECPROC,X'00'       SET TO NO SPECIAL PREOCESSING\n         TM    FUNC,SPECDEL         SPECIAL DELETE PROCESSING\n         BZ    FFF600               NO - BYPASS TABLE COMPARE\n*\n         USING SPECAREA,R15\n         L     R15,SAVESPEC         SET TO DELETE GETMAINED AREA\nBBB600   CLI   SPECNAME,X'00'       END OF NAME LIST\n         BE    FFF600               YES - NO MATCH\n         L     R14,SPECLGTH         SET R14 TO LENGTH OF COMPARE\n         EX    R14,SPECOMPR         COMPARE JOBNAME\n         BNE   DDD600               NO MATCH - TRY NEXT\n         CLI   SPECNUM,C' '         JOB NUMBER COMPARE ??\n         BE    CCC600               NO - DELETE IT\n         CLC   SPECNUM,RECJNUM      JOB NUMBER MATCHES\n         BNE   DDD600               NO - GET NEXT ENTRY\nCCC600   OI    SPECPROC,DELIT       SET ON SWITCH\n         B     FFF600               CONTINUE\nDDD600   LA    R15,20(R15)          BUMP TO NEXT ENTRY\n         B     BBB600               TRY NEXT COMPARE\n*\nSPECOMPR CLC   RECJNAME(0),SPECNAME COMPARE FOR DELETE JOBNAME\n         DROP  R15\nFFF600   EQU   *\n*\n         MODCB RPL=JOURNRPL,OPTCD=(UPD) SET RPL TO UPDATE MODE\n         GET   RPL=JOURNRPL         GET THE VSAM RECORD\n         LTR   R15,R15              OK?\n         BZ    XXX600               YES - CONTINUE\n*\n* THE VSAM RECORD SHOULD ALWAYS BE THERE (ADDED ONLY WHEN FIRST\n* PLACED ON THE ACTIVE FILE. THIS PROGRAM WILL ADD NEW VSAM\n* RECORDS IF REBUILDING THE VSAM FILE OR FIXING A TAPE OR IF\n* NEEDED TO SYNC THE JOURNAL AND THE ACTIVE IT IS CURRENTLY\n* MOVING TO DAILY.\n*\n         OI    SPECPROC,NOTHERE     SET JOURNAL REC NOT THERE\n         TM    FUNC,REBUILD+FIXTAPE REBUILDING OR FIXING TAPE\n         BZ    VVV600               NO - ISSUE WTO\n         B     WWW600               BRANCH AROUND MESSAGE\nVVV600   EQU   *\n         TM    SPECPROC,DELIT       ARE WE DELETING IT ANYWAY???\n         BO    WWW600               YES  - BYPASS \"SYNC\" MESSAGES\n         WTO   'SOUTWTR - SYNCHRONIZING JOURNAL AND REPORT FILES'\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    WWW600             NO - BYPASS REPORTING\n         MVC   RPTLINE(50),SYNCLINE REPORT TYPE\n         MVC   RPTLINE+8(8),RECJNAME\n         MVC   RPTLINE+17(8),RECJNUM\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\n*\nWWW600   MODCB RPL=JOURNRPL,OPTCD=(NUP) SET RPL TO ADD NEW RECORD\n*\n         MVC   JMCLASS,RECMSGCL     PUT MSGCLASS IN JOURNAL REC\n         MVC   JDAY,RECDAY          SAVE DAY\nXXX600   BAL   R14,ENTRY610         GET POSITION IN OUTPUT FILE\nEXIT600  L     R14,SAVE600\n         BR    R14\nSAVE600  DC    F'0'\n         EJECT\n***********************************************************************\n*       GET THE TTR IF WRITING TO DISK                                *\n***********************************************************************\nENTRY610 DS    0H\n         ST    R14,SAVE610\n         XC    HTTR,HTTR       ZERO TTR AS DEFAULT (NO TTR)\n         CLC   TRKSPER,=F'0'   DO WE HAVE ANY TRACKS/CYL\n         BE    EXIT610         NO, NOT A DASD DEVICE\n         TM    FUNC,REBUILD    REBUILDING????\n         BZ    AAA610\n         LA    R8,INPUT        SET UP ADDRESSABILITY\n         B     BBB610\nAAA610   LA    R8,OUTPUT       SET UP ADDRESSABILITY\nBBB610   L     R14,DCBDEBAD    OUTPUT DCB'S DEB\n         CLC   DCBFDAD+3(4),38(R14) CHECK WITHIN EXTENT\n         BL    EXIT610         LOW, SKIP TTR UPDATE\n         CLC   DCBFDAD+3(4),42(R14) CHECK WITHIN EXTENT\n         BH    EXIT610         HIGH, (SECOND XTENT) SKIP TTR UPDATE\n         SR    R2,R2           CLEAR FOR ICM\n         SR    R3,R3           CLEAR FOR ICM\n         ICM   R3,3,DCBFDAD+3  CURRENT CYLINDER NUMBER\n         ICM   R2,3,38(R14)    GET START CYLINDER NUMBER\n         SR    R3,R2           GET RELATIVE CYLINDER\n         SR    R2,R2           CLEAR FOR MULTIPLY\n         M     R2,TRKSPER      MULTIPLY BY TRKS/CYL\n         SR    R15,R15         CLEAR FOR ICM\n         ICM   R15,3,DCBFDAD+5 CURRENT TRACK NUMBER\n         IC    R14,DCBFDAD+7   GET RECORD NUMBER\n         AR    R3,R15          NOW HAVE REAL 'TT'\n         BZ    DDD610          ZERO TTR, SKIP DECREMENT\n         CLI   DCBFDAD+7,X'01' STAY AWAY FROM ZERO\n         BH    CCC610          NO, DECREMENT RECORD NUMBER\n         SH    R3,=H'1'        DECREMENT TRACK NUMBER\n         B     DDD610          CONTINUE\nCCC610   BCTR  R14,R0          DECRMENT FOR SAM-E\nDDD610   STC   R14,HTTR+2       INCLUDE UPDATED TTR\n         STCM  R3,3,HTTR        MOVE TO HOLD TTR\nEXIT610  L     R14,SAVE610\n         BR    R14\nSAVE610  DC    F'0'\n         EJECT\n***********************************************************************\n*        UPDATE THE VSAM JOURNAL FILE                                 *\n***********************************************************************\nENTRY650 DS    0H\n         ST    R14,SAVE650\n         MVC   JTTR,HTTR        MOVE IN TTR\n         MVC   JDEVT,HDEVT      MOVE IN DEVICE TYPE\n         MVC   JADR,HADR        MOVE IN TYPE CODE\n         MVC   JSTAMP,HSTAMP    MOVE IN STAMP NUMBER\n         MVC   JLINES,HLINES    MOVE LINE COUNT IN\n*\n         TM    SPECPROC,DELIT   DELETING RECORD FROM JOURNAL\n         BO    AAA650           YES - DELETE IT\n         PUT   RPL=JOURNRPL     WRITE OUT UPDATED/NEW JOURNAL RECORD\n         LTR   R15,R15          UPDATE OK\n         BNZ   ABEND8           NO - ABEND\n         B     XXX650\nAAA650   TM    SPECPROC,NOTHERE WAS RECORD THERE TO BEGIN WITH\n         BO    BBB650           NO - JUST REPORT ON IT\n         ERASE RPL=JOURNRPL     DELETE IT\n         LTR   R15,R15          DELETE OK ???\n         BNZ   ABEND28          NO - ABEND\nBBB650   MVC   RPTLINE(50),DELTLINE REPORT TYPE\n         MVC   RPTLINE+8(8),JJOBN\n         MVC   RPTLINE+17(3),JJOB#+5\n         MVC   RPTLINE+20(5),JJOB#\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nXXX650   SP    HLINES,HLINES    CLEAR LINE COUNTER\nEXIT650  L     R14,SAVE650\n         BR    R14\nSAVE650  DC    F'0'\n         EJECT\n***********************************************************************\n*        OPEN THE INPUT FILES AND DETERMINE IF FIXED OR VARIABLE      *\n***********************************************************************\nENTRY700 DS    0H\n         ST    R14,SAVE700\n         OPEN  (INPUT,(INPUT)) OPEN THE INPUT FILE\n         TM    INPUT+48,X'10'  CHECK IF IT OPENED\n         BZ    ABEND9          NO, INPUT FAILED TO OPEN\n         TM    INPUT+36,X'80'  CHECK IF FIXED RECFM\n         BZ    AAA700          GO SET VARIABLE\n         MVI   FIXVAR,FIXREC   SET TO FIXED RECORD\n         LA    R6,RECORDF      FIXED LENGTH RECORD\n         STCM  R6,7,EXITREC    STORE RECORD ADDRESS FOR EXIT\n         B     EXIT700         GO READ FIRST RECORD\nAAA700   EQU   *\n         LA    R6,RECOUT       DE-COMPRESSED RECORD\n         STCM  R6,7,EXITREC    STORE RECORD ADDRESS FOR EXIT\n         MVI   FIXVAR,VARREC   SET TO VARIABLE\nEXIT700  L     R14,SAVE700\n         BR    R14\nSAVE700  DC    F'0'\n         EJECT\n***********************************************************************\n*        READ THE INPUT RECORDS AND DETERMINE IF THERE IS A           *\n*        SEPERATOR RECORD; IF IT IS, GET THE JOURNAL RECORD           *\n***********************************************************************\nENTRY710 DS    0H\n         ST    R14,SAVE710\n         MVC   RECSEP,BLANKS   CLEAR AREA BEFORE READ\nAAA710   TM    FIXVAR,FIXREC   IS RECORD FIXED\n         BZ    BBB710          NO - READ IN VARIABLE\n         GET   INPUT,RECORDF   GET A FIXED  SYSOUT RECORD\n         B     CCC710\nBBB710   GET   INPUT,RECORDV   GET A VARIABLE RECORD\nCCC710   CLI   RECSEP,C'S'     POSSIBLE  SEPARATOR RECORD\n         BNE   CCC711          NO - CONTINUE\n         CLC   RECSEP,SEPLIT   IS THIS A SEPARATOR RECORD\n         BE    DDD710          YES - CONTINUE\nCCC711   NI    EXITSW,255-SEP    RESET SEP FLAG\n         OI    EXITSW,REC        RECORD FOR EXIT\n         B     FFF710          CONTINUE\nDDD710   TM    INPTYPE,ACTFILE IS THIS AN ACTIVE FILE\n         BZ    DDD711          NO - BYPASS PAD CHECK\n         CLC   RECPAD,=CL5' PAD ' IS THIS A 'PAD' RECORD?\n         BE    ENTRY100        YES, GO TO END OF FILE PROCESSING\nDDD711   NI    EXITSW,255-REC  RESET REC FLAG\n         OI    EXITSW,SEP      SEPARATOR RECORD FOR EXIT\n         TM    MISC,FRSTIME    IS THIS FIRST TIME THRU\n         BO    DDD712          YES - BR AROUND UPDATE\n         BAL   R14,ENTRY650    UPDATE JOURNAL\nDDD712   NI    MISC,255-FRSTIME SET OFF\n         TM    MISC,NEEDNEW    NEED NEW TAPE ?\n         BZ    EEE710          NO - BR AROUND\n         BAL   R14,ENTRY985    CLOSE OUTPUT\n         BAL   R14,ENTRY920    ALLOCATE A NEW TAPE\n         BAL   R14,ENTRY750    OPEN OUTPUT FILE\nEEE710   BAL   R14,ENTRY600    READ THE VSAM FILE\n         TM    FUNC,REBUILD    REBUILDING???\n         BZ    FFF710          NO - BYPASS TTR CALC\n         BAL   R14,ENTRY610    GET TTR\nFFF710   LA    R7,1(R7)        BUMP RECORD COUNT\n         TM    FUNC,REBUILD    REBUILDING????\n         BZ    EXIT710         NO - BYPASS COUNTER\n         AP    HLINES,=P'1'    ADD ONE\nEXIT710  L     R14,SAVE710\n         BR    R14\nSAVE710  DC    F'0'\n         EJECT\n***********************************************************************\n*        OPEN THE OUTPUT FILE AND GET DSN FOR JOURNAL UPDATE          *\n*        ALSO DETERMINE IF DISK FOR TTR CALCULATION IF NEEDED         *\n***********************************************************************\nENTRY750 DS    0H\n         ST    R14,SAVE750\n         OPEN  (OUTPUT,(OUTPUT))  OPEN THE OUTPUT FILES\n         TM    OUTPUT+48,X'10' CHECK IF IT OPENED\n         BZ    ABEND10         NO, OUTPUT FAILED TO OPEN\n         LA    R8,OUTPUT       SET UP DCB ADDRESSABILITY\n         RDJFCB OUTPUT         GET THE JFCB FOR 'OUTPUT'\n         BAL   R14,ENTRY755    GET DSN AND DEVICE\nEXIT750  L     R14,SAVE750\n         BR    R14\nSAVE750  DC    F'0'\n         EJECT\n***********************************************************************\n*        GET DSN AND DEVICE TYPE FOR JOURNAL                          *\n***********************************************************************\nENTRY755 DS    0H\n         ST    R14,SAVE755\n         LA    R4,JFCB          SET R4 TO JFCB\n         LA    R4,43(R4)        SET TO END\n         LA    R5,44            MAX DSN = 44\nAAA755   CLC   0(2,R4),=C'.D'      DATE STAMP\n         BE    BBB755           YES - DONE\n         CLC   0(2,R4),=C'.G'      GENERATION NUMBER (OLD SYSTEM)\n         BE    EEE755           YES - DONE\n         CLC   0(8,R4),=C'.ACTIVE ' ACTIVE FILE (ONLY ON REBUILD)\n         BE    FFF755           YES - DONE\n         SH    R4,=H'1'         BACK UP ONE\n         BCT   R5,AAA755        TRY AGAIN\n         B     ABEND11          INVALID DSN\nBBB755   MVC   HOLDSTP(7),2(R4)  MOVE IN DATE STAMP\n         MVC   HOLDSTP+7(4),11(R4)  MOVE IN TIME STAMP\n         B     GGG755           BRANCH\nEEE755   MVC   HOLDSTP(5),=C'99999' SET UP HIGH\n         MVC   HOLDSTP+5(4),2(R4) MOVE IN GDG\n         MVC   HOLDSTP+9(2),7(R4) MOVE IN VERSION\n         B     GGG755           BRANCH\nFFF755   MVC   HOLDSTP(11),=C'99999999999' SET UP HIGH\nGGG755   PACK  HSTAMP,HOLDSTP   PACK IT\n         MVC   HADR,=C'A'        MOVE IN ACTIVE BY DEFAULT\n         SH    R4,=H'5'         BACKUP 5 MORE\n         CLC   0(5,R4),=C'DAILY'  IS IT DAILY FILE\n         BE    HHH755            YES - SET NAME\n         SH    R4,=H'2'         BACKUP 2 MORE\n         CLC   0(7,R4),=C'ARCHIVE' IS IT ARCHIVE FILE\n         BNE   III755            NO - MUST BE ACTIVE\n         MVC   HADR,=C'R'        MOVE IN ARCHIVE LETTER\n         B     III755            GO CHECK DEVICE\nHHH755   MVC   HADR,=C'D'        MOVE IN DAILY LETTER\nIII755   TM    DCBTRBAL-1,X'20' DASD DEVICE CLASS?\n         BZ    MMM755          NO, SKIP TTR PROCESSING\nJJJ755   LA    R15,DEVT#       SET LOOP CONTROL\n         LA    R14,DEVT        ADDRESS OF DEVICE TABLE\nKKK755   CLC   0(1,R14),DCBTRBAL-1 CHECK DEVICE TYPE\n         BE    LLL755          FOUND, CONTINUE\n         LA    R14,8(R14)      NEXT ENTRY\n         BCT   R15,KKK755      CHECK NEXT DEVICE ENTRY\n         WTO   'SOUTWTR - UNSUPPORTED OUTPUT DISK DEVICE TYPE'\n         B     ABEND12         ERROR RETURN\nLLL755   MVC   HDEVT,0(R14)    STORE DEVICE TYPE\n         LH    R14,2(R14)      GET NUMBER OF TRACKS/CYLINDER\n         ST    R14,TRKSPER     SAVE FOR LATER USE\n         B     EXIT755\nMMM755   MVC   HDEVT,=C'T'     NOT DISK MUST BE TAPE\n*\n         L     R14,DCBDEBAD    GET DEB ADDR FOR THIS DCB\n         L     R14,32(R14)     GET UCB ADDR FOR THIS DEB\n         MVC   TYPEUCB,16(R14) DEVICE TYPE FROM UCB\n*\n         LA    R15,TAPETYP#    NUMBER OF ENTRIES IN TABLE\n         LA    R14,TAPETYPE    ADDRESS OF TAPE TYPE TABLE\nNNN755   CLC   0(4,R14),TYPEUCB CHECK DEVICE UCB\n         BE    OOO755          MATCH\n         LA    R14,20(R14)     BUMP TO NEXT\n         BCT   R15,NNN755      TRY AGAIN\n         WTO   'SOUTWTR - UNSUPPORTED OUTPUT TAPE DEVICE UCB'\n         B     ABEND7          ERROR RETURN\nOOO755   MVC   RPTLINE(29),RPTTUCB\n         MVC   RPTLINE+20(12),8(R14)\n         CLC   4(4,R14),=F'0'  3480 ?????\n         BNE   RRR755          YES - MOVE BLOCK COUNT\n*\n         LA    R15,TAPEDEN#    SET LOOP CONTROL\n         LA    R14,TAPEDEN ADDRESS OF TAPE TABLE\nPPP755   CLC   0(1,R14),DCBDEN CHECK DEVICE DENSITY\n         BE    QQQ755          MATCH\n         LA    R14,16(R14)      BUMP TO NEXT\n         BCT   R15,PPP755      TRY AGAIN\n         WTO   'SOUTWTR - UNSUPPORTED OUTPUT TAPE DENSITY'\n         B     ABEND13         ERROR RETURN\nQQQ755   MVC   RPTLINE+24(8),8(R14)\nRRR755   MVC   MAXBLOCK,4(R14) SAVE MAX BLOCKS TO WRITE\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT755            NO - BYPASS REPORTING\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT755  L     R14,SAVE755\n         BR    R14\nSAVE755  DC    F'0'\n         EJECT\n***********************************************************************\n*        WRITE THE OUTPUT FILE AND OPTIONAL REPORTS                   *\n***********************************************************************\nENTRY760 DS    0H\n         ST    R14,SAVE760\n         AP    HLINES,=P'1'    ADD ONE TO LINECOUNT\n         CLC   RECSEP,SEPLIT   IS THIS A SEPARATOR RECORD\n         BE    BBB760          NO, PASS IT ON\n         TM    FIXVAR,FIXREC   IS IT FIXED RECORD\n         BNZ   AAA760          YES - TRY TO COMPRESS IT\n         MVC   OUTREC,RECORDV  MUST BE COMPRESSED ALREADY\n         B     DDD760          WRITE IT\nAAA760   ICM   R15,15,COMPADDR ADDRESS OF EXIT ROUTINE\n         MVC   CPRTYPE,=X'FF000000' SET CODE TO COMPRESS\n         MVC   INRECL,=H'133'  INLENGTH 133\n         MVC   RECLEN,=H'133'  MAX OUT 133\n         LA    R1,PARMCPR      ADDRESS OF COMP PARM\n         BALR  R14,R15         GO TO COMPRESSION ROUTINE\n         LTR   R15,R15         COMPRESS OK\n         BZ    CCC760          GO WRITE IT\nBBB760   EQU   *               WRITE OUT RECORD UN-COMPRESSED\n         MVC   RECLEN,=H'137'  SET LEN TO 137\n         MVC   RECOUT,RECORDF  MOVE IN FIXED RECORD\nCCC760   MVC   RECTT,=H'0'     ZERO FIELD\nDDD760   EQU   *\n         TM    SPECPROC,DELIT  DELETING JOB FROM SYSTEM???\n         BO    GGG760          YES - BYPASS WRITE TO OUTPUT\n         PUT   OUTPUT,OUTREC   COPY TO OUTPUT FILE\n         TM    MISC,RITETAPE   WRITING TO TAPE??\n         BZ    GGG760          NO - BYPASS BLOCK CHECK\n         LA    R8,OUTPUT       SET UP ADDRESSABILITY\n         CLC   PREVBLCT,DCBBLKCT COMPARE PREVIOUS BLOCK COUNT\n         BH    FFF760            HIGHER - MUST HAVE MOUNTED 2ND REEL\n*                                SHOULD ONLY HAPPEN WILL SHORT REELS\n*                                (APPROX 2000 FEET OR LESS)\n         MVC   PREVBLCT,DCBBLKCT SAVE FOR NEXT COMPARE\nEEE760   CLC   MAXBLOCK,DCBBLKCT MAX BLOCKS WRITTEN\n         BH    GGG760\nFFF760   OI    MISC,NEEDNEW    NEED NEW TAPE ON NEXT SEPERATOR\nGGG760   TM    INPTYPE,ACTFILE IS THIS THE ACTIVE FILE\n         BZ    EXIT760         NO - BYPASS EXIT\n         BAL   R14,ENTRY770    PASS DATA THRU SOUTXIT\nEXIT760  L     R14,SAVE760\n         BR    R14\nSAVE760  DC    F'0'\n         EJECT\n***********************************************************************\n*        RUN ACTIVE FILE THRU SOUTXIT ROUTINE                         *\n***********************************************************************\nENTRY770 DS    0H\n         ST    R14,SAVE770\n         ICM   R15,15,EXITADDR ADDRESS OF EXIT ROUTINE\n         BZ    EXIT770         NO EXIT, BYPASS\n*\n*  FOLLOWING LOGIC SHOULD NEVER BE USED, UNLESS THE ACTIVE FILE\n*  IS IN A COMPRESSED STATE. AS OF NOW, THE ACTIVE FILE IS NOT\n*  COMPRESSED.\n*\n         TM    FIXVAR,FIXREC   FIXED LENGTH RECORD\n         BNZ   AAA770          YES - BYPASS DECOMPRESSION\n         MVC   RECLEN,=H'133' SET MAX EXPANSION LENGTH\n         ICM   R15,15,COMPADDR ADDRESS OF EXIT ROUTINE\n         MVC   CPRTYPE,=X'00000000' SET FOR DECOMPRESSION\n         LA    R1,PARMCPR      ADDRESS OF COMP PARM\n         BALR  R14,R15         GO TO COMPRESSION ROUTINE\n         LTR   R15,R15         DE-COMPRESS OK\n         BZ    AAA770          YES- TRY REPORT EXIT\n         MVC   RECOUT,RECORDF  PASS COMPRESSED RECORD?\n*\nAAA770   ICM   R15,15,EXITADDR ADDRESS OF EXIT ROUTINE\n         LA    R1,EXITPARM     ADDRESS OF EXIT PARM\n         BALR  R14,R15         GO TO EXIT ROUTINE\nEXIT770  L     R14,SAVE770\n         BR    R14\nSAVE770  DC    F'0'\n         EJECT\n***********************************************************************\n*        CALL TO LOCINDEX ROUTINE TO LIST ALL DSNS WITH PREFIX        *\n***********************************************************************\nENTRY800 DS    0H\n         ST    R14,SAVE800\n         ICM   R6,15,SAVEWORK      RESTORE WORK ADDRESS\n         BNZ   AAA800              HAVE ALREADY - BR AROUND GETMAIN\n         GETMAIN R,LV=4096\n         LR    R6,R1               SAVE ADDR OF WORK AREA\n         ST    R6,SAVEWORK         SAVE ADDR OF WORKAREA\n         USING WORKSPC,R6          INFORM ASSEMBLER\nAAA800   LA    R0,LOCINDXW         POINT TO LOCINDEX WORK AREA\n         ST    R0,LOCIPARM+12      SAVE ADDR IN PARM LIST\n         MVC   PASSDSN,BLANKS      CLEAR PASSING DSN\n         MVC   LOCIPFX(25),PASSPFX MOVE IN PREFIX\n         LA    R4,LOCIPFX          SET R4 TO ADDR OF PREFIX\n         L     R5,PASSLEN          SET R5 TO LENGTH\n         LA    R4,0(R5,R4)         BUMP R4 TO END OF PREFIX\n         MVC   0(10,R4),PASSTYPE   ADD TYPE DAY/ARCHIVE\n         MVI   LOCIPARM+12,X'80'   INDICATE END OF PARM LIST\nBBB800   ICM   R15,15,LOCIADDR     POINT TO PARM LIST\n         LA    R1,LOCIPARM         POINT TO PARM LIST\n         BALR  R14,R15             GO TO LOCINDEX\n         B     *+4(R15)            BRANCH , DEP ON RETURN CODE\n         B     CCC800              HAVE A DASD DSN\n         B     EXIT800             INDEX STRUCTURE NOT FOUND\n         B     DDD800              DSN ON TAPE\n         B     CCC800              MULTI VOLUME DSN\n         B     EXIT800             DONE\n         B     ABEND14             CATALOG ERROR\nCCC800   EQU   *\n         TM    LOOKFOR,ADISK       LOOKING FOR LAST DISK DSN?\n         BZ    BBB800              NO - TRY FOR NEXT ONE\n         B     EEE800              SAVE DSN AND TRY AGAIN\nDDD800   EQU   *\n         TM    LOOKFOR,ATAPE       LOOKING FOR LAST TAPE DSN?\n         BZ    BBB800              NO - TRY FOR NEXT ONE\nEEE800   MVC   PASSDSN,LOCIDSN     SAVE DSN TO PASS BACK\n         TM    MISC,PASSLAST       PASSING JUST LAST ONE?\n         BO    BBB800              YES-ARE THERE ANY MORE?\nEXIT800  L     R14,SAVE800\n         BR    R14\n         DROP  R6\nSAVE800  DC    F'0'\n         EJECT\n***********************************************************************\n*        GET DISK WITH THE MOST SPACE                                 *\n***********************************************************************\nENTRY830 DS    0H\n         ST    R14,SAVE830\n         LA    R1,WORKAREA    ADDRESS OF WORK AREA FOR UCB SCAN\n         ST    R1,SPACPARM    PLACE INTO PARM LIST\n         LA    R1,DEVCLASS    ADDRESS OF DEVICE CLASS (DASD)\n         ST    R1,SPACPARM+4  PLACE INTO PARM LIST\n         LA    R1,UCBADDR     ADDRESS OF RETURN FIELD\n         ST    R1,SPACPARM+8  PLACE INTO PARM LIST\n         OI    SPACPARM+8,128 SET HIGH ORDER BIT\n*\n*        SCAN EACH DASD UCB VIA IOSVSUCB\n*\nAAA830   DS    0H\n         LA    R1,SPACPARM    PARAMETER LIST FOR IOSUCBSV\n         L     R15,16         CVT LOCATION\n         USING CVT,R15        INFORM THE ASSEMBLER\n         L     R15,CVTUCBSC   UCB SERVICE ROUTINE ADDRESS\n         DROP  R15            RELEASE R15 ADDRESSABILITY\n         BALR  R14,R15        CALL UCB SERVICE ROUTINE\n         LTR   R15,R15        ANY UCB PASSED?\n         BNZ   FFF830         NO, ALL DONE\n*\n*        CHECK EACH DASD DEVICE FOR MOUNTED/ONLINE\n*\n         L     R4,UCBADDR     GET UCB ADDRESS\n         TM    3(R4),X'80'    IS DEVICE ONLINE\n         BZ    AAA830         NO, IGNORE IT\n         TM    3(R4),X'50'    PENDING OFFLINE/UNLOAD\n         BNZ   AAA830         YES, IGNORE IT\n         TM    35(R4),X'80'   MOUNT PENDING\n         BNZ   AAA830         YES, IGNORE IT\n         CLI   28(R4),X'00'   ANY VOLUME INFORMATION?\n         BE    AAA830         NO, VOLUME NOT VERIFIED YET\n*\n*        CHECK IF DASD DEVICE IS ONE REQUESTED\n*\n         LA    R2,DISKTBL     SET R2 TO REQUESTED DISKS\n         LA    R3,3           MAX  3 REQUESTED\nBBB830   CLC   28(6,R4),0(R2) IS THIS A REQUESTED VOLUME\n         BE    EEE830         YES - CHECK DEVICE\n*        BE    CCC830         YES - CHECK DEVICE\n         LA    R2,14(R2)      BUMP TO NEXT\n         BCT   R3,BBB830      TRY NEXT\n         B     AAA830         GET NEXT UCB\nEEE830   LR    R0,R4          LOAD ADDR OF UCB INTO REG 0\n         LA    R1,MSGAREA     LOAD PNTR TO MSGAREA INTO REG 1\n         SVC   78             GET DATA FOR THIS DASD\n         LTR   R15,R15        LSPACE DATA RETURNED?\n         BNZ   AAA830         NO, IGNORE THIS DEVICE\n         MVC   8(4,R2),FREECYL MOVE IN CYLS\n         B     AAA830         CHECK NEXT DEVICE\nFFF830   LA    R3,DISKTBL     SET R3 TO BEGINING OF TABLE\n         MVC   ALLOCVOL,0(R3) DEFAULT OF FIRST VOLUME\n         MVC   ALLOCVLN,12(R3) FIRST VOLUME LENGTH\n         MVC   HOLDCYL,8(R3)  SAVE OPEN CYLINDERS\n         LA    R3,14(R3)      BUMP TO NEXT ENTRY\n         CLC   HOLDCYL,8(R3)  DOES THIS ENTRY HAVE MORE SPACE\n         BNL   GGG830         NO - TRY THIRD\n         MVC   ALLOCVOL,0(R3) MOVE IN THIS VOLUME\n         MVC   ALLOCVLN,12(R3) SECOND VOLUME LENGTH\n         MVC   HOLDCYL,8(R3)  SAVE OPEN CYLINDERS\nGGG830   LA    R3,14(R3)      BUMP TO NEXT ENTRY\n         CLC   HOLDCYL,8(R3)  DOES THIS ENTRY HAVE MORE SPACE\n         BNL   HHH830         NO - HAVE PACK WITH MOST\n         MVC   ALLOCVOL,0(R3) MOVE IN THIRD VOLUME\n         MVC   ALLOCVLN,12(R3) THIRD VOLUME LENGTH\n         MVC   HOLDCYL,8(R3)  SAVE OPEN CYLINDERS\nHHH830   CLC   HOLDCYL,BLANKS  ARE THERE ANY CYLINDERS\n         BE    ABEND16        NO - ERROR\nEXIT830  L     R14,SAVE830\n         BR    R14\nSAVE830  DC    F'0'\n         EJECT\n***********************************************************************\n*        GET DATE AND TIME                                            *\n***********************************************************************\nENTRY850 DS    0H\n         ST    R14,SAVE850\n         $STCK NOGEN\n         MVC   PASSDSN,PREFIX1    MOVE IN DSN\n         LA    R4,PASSDSN         SET R4 TO BEGINNING\n         L     R5,PREFIX1L        SET R5 TO LENGTH\n         LA    R4,0(R5,R4)        SET R4 TO END\n         MVC   0(10,R4),NEWTYPE   MOVE IN TYPE (DAILY OR ARCHIVE)\nAAA850   CLI   0(R4),C' '         IS IT BLANK\n         BE    BBB850             NOW HAVE LENGTH\n         LA    R4,1(R4)           BUMP UP ONE\n         AH    R5,=H'1'           BUMP LENGTH COUNTER\n         B     AAA850             TRY AGAIN\nBBB850   MVC   0(2,R4),=C'.D'     MOVE IN CONSTANT\n         MVC   2(1,R4),YEARDATE   MOVE IN FIRST CHAR OF YEAR\n         MVC   3(2,R4),YEARDATE+2 MOVE IN YEAR\n         MVC   5(2,R4),DATE       MOVE IN MONTH\n         MVC   7(2,R4),DATE+3     MOVE IN DAY\n         MVC   9(2,R4),=C'.T'     MOVE IN CONSTANT\n         MVC   11(2,R4),TIME      MOVE IN HOUR\n         MVC   13(2,R4),TIME+3    MOVE IN MINUTE\n         AH    R5,=H'15'          ADD 15 TO LENGTH\nEXIT850  L     R14,SAVE850\n         BR    R14\nSAVE850  DC    F'0'\n         EJECT\n***********************************************************************\n*        GET BACKUP DATE FOR DAILY TO ARCHIVE                         *\n***********************************************************************\nENTRY860 DS    0H\n         ST    R14,SAVE860\n         LA    R1,DATEPARM        SOUTDATE PARAMETER LIST\n         ICM   R15,15,DATEADDR    ADDRESS OF THE DATE EXIT\n         BALR  R14,R15            CALL THE DATE SUBROUTINE\n         LTR   R15,R15            SOUTDATE RETCODE OK?\n         BNZ   ABEND17            NO - ABEND IT\n         MVC   COMPARED(1),=C'D'  MOVE IN CONSTANT DAY\n         MVC   COMPARED+1(1),LASTDAYO+6 MOVE IN 1 CHAR OF YEAR\n         MVC   COMPARED+2(2),LASTDAYO+8 MOVE IN YEAR\n         MVC   COMPARED+4(2),LASTDAYO   MOVE IN MONTH\n         MVC   COMPARED+6(2),LASTDAYO+3 MOVE IN DAY\nEXIT860  L     R14,SAVE860\n         BR    R14\nSAVE860  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE THE ACTIVE SYSOUT FILES                             *\n***********************************************************************\nENTRY900 DS    0H\n         ST    R14,SAVE900\n         MVC   ACTDSN(21),PREFIX1 MOVE IN PREFIX\n         LA    R4,ACTDSN          SET R4 TO BEGINNING\n         L     R5,PREFIX1L        SET R5 TO PREFIX LENGTH\n         LA    R4,0(R5,R4)        SET R4 TO END OF PREFIX\n         MVC   0(7,R4),=C'.ACTIVE' MOVE IN ACTIVE\n         AH    R5,=H'7'           BUMP LENGTH\n         STH   R5,ACTDSNL         STORE IN LENGTH\n         LA    R1,ACTSVC99        GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE ACTIVE SOUT FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND18            NO - ERROR\n         LA    R8,INPUT           SET UP ADDRESABILITY\n         MVC   DCBDDNAM,ACTDDN    MOVE IN DDNAME\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT900            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTACT REPORT TYPE\n         MVC   RPTLINE+29(44),ACTDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT900  L     R14,SAVE900\n         BR    R14\nSAVE900  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE AND OPEN THE VSAM JOURNAL FILE\n***********************************************************************\nENTRY910 DS    0H\n         ST    R14,SAVE910\n         MVC   JRNDSN(21),PREFIX1 MOVE IN PREFIX\n         LA    R4,JRNDSN          SET R4 TO BEGINNING\n         L     R5,PREFIX1L        SET R5 TO PREFIX LENGTH\n         LA    R4,0(R5,R4)        SET R4 TO END OF PREFIX\n         MVC   0(8,R4),=C'.JOURNAL' MOVE IN JOURNAL\n         AH    R5,=H'8'           BUMP LENGTH\n         STH   R5,JRNDSNL         STORE IN LENGTH\n         TM    FUNC,REBUILD+FIXTAPE IN REBUILD OR FIX TAPE\n         BZ    AAA910             NO - BR AROUND\n*        MVI   JRNSTAT,X'01'      SET TO OLD (NOT NEEDED 01/24/85)\nAAA910   LA    R1,DAJOURN         GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE JOURNAL FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND19            NO - ERROR\n         USING IFGACB,R15      INFORM ASSEMBLER\n         LA    R15,JOURNACB        SET UP ADDRESSING\n         MVC   ACBDDNM,JRNDDN     MOVE DDNAME\n         DROP  R15\n         OPEN  (JOURNACB)         OPEN THE JOURNAL ACB\n         LTR   R15,R15            DID IT OPEN?\n         BNZ   ABEND20            INDICATE OPEN FAILURE\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT900            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTJRNL REPORT TYPE\n         MVC   RPTLINE+29(44),JRNDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT910  L     R14,SAVE910\n         BR    R14\nSAVE910  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE THE NEW DAILY/ARCHIVE TAPE                          *\n***********************************************************************\nENTRY920 DS    0H\n         ST    R14,SAVE920\n         BAL   R14,ENTRY850       GET NEW DATASET NAME AND LENGTH\n         MVC   TAPEDSN,PASSDSN    MOVE IN DSN\n         STH   R5,TAPEDSNL        STORE IN LENGTH\n         MVI   TAPESTAT,X'04'     NEW\n         MVI   TAPEDISP,X'02'     CATLG\n         MVI   TAPECOND,X'02'     CATLG\n         MVC   TAPEUNIT,TAPENAME  MOVE IN UNIT NAME\n         MVC   TAPELEN,TAPENML    MOVE IN LENGTH\n         MVI   TAPEMOD,X'00'      RESET END OF LIST FOR NEW TAPE\n         LA    R1,TAPE99          GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE SOUT TAPE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND21            NO - ERROR\n         LA    R8,OUTPUT          SET UP ADDRESABILITY\n         MVC   DCBDDNAM,TAPEDDN   MOVE IN DDNAME\n         NI    MISC,255-NEEDNEW   CLEAR NEW TAPE SWITCH\n         MVC   PREVBLCT,=F'0'     INIT PREVIOUS BLKCOUNT\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT920            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTNTP REPORT TYPE\n         MVC   RPTLINE+29(44),TAPEDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT920  L     R14,SAVE920\n         BR    R14\nSAVE920  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE THE EXISTING DAILY/ARCHIVE TAPE                     *\n***********************************************************************\nENTRY925 DS    0H\n         ST    R14,SAVE925\n         BAL   R14,ENTRY950       GET LENGTH OF DSN\n         MVC   TAPEDSN,PASSDSN    MOVE IN DSN\n         STH   R5,TAPEDSNL        STORE IN LENGTH\n         MVI   TAPESTAT,X'02'     MOD\n         MVI   TAPEDISP,X'02'     CATLG\n         MVI   TAPECOND,X'02'     CATLG\n         MVI   TAPEMOD,X'80'      END OF SVC99 LIST\n         LA    R1,TAPE99          GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE ACTIVE SOUT FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND22            NO - ERROR\n         LA    R8,OUTPUT          SET UP ADDRESABILITY\n         MVC   DCBDDNAM,TAPEDDN   MOVE IN DDNAME\n         NI    MISC,255-NEEDNEW   CLEAR NEW TAPE SWITCH\n         MVC   PREVBLCT,=F'0'     INIT PREVIOUS BLKCOUNT\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT925            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTMTP REPORT TYPE\n         MVC   RPTLINE+29(44),TAPEDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT925  L     R14,SAVE925\n         BR    R14\nSAVE925  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE THE EXISTING DAILY DATASET FOR COPY TO ARCHIVE      *\n***********************************************************************\nENTRY930 DS    0H\n         ST    R14,SAVE930\n         MVC   DALYDSN,PASSDSN    MOVE IN DSN\n         BAL   R14,ENTRY950       GET DATASET LENGTH\n         STH   R5,DALYDSNL        STORE IN LENGTH\n         MVI   DALYOLD,X'80'      END OF PARM\n         MVI   DALYSTAT,X'01'     OLD\n         TM    FUNC,REBUILD       REBUILDING\n         BO    AAA930              YES - SET KEEP\n         MVI   DALYDISP,X'04'     DELETE\n         B     BBB930\nAAA930   MVI   DALYDISP,X'08'     KEEP\nBBB930   MVI   DALYCOND,X'08'     KEEP\n         LA    R1,DALY99          GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE ACTIVE SOUT FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND23            NO - ERROR\n         LA    R8,INPUT           SET UP ADDRESABILITY\n         MVC   DCBDDNAM,DALYDDN   MOVE IN DDNAME\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT930            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTIDS REPORT TYPE\n         MVC   RPTLINE+29(44),DALYDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT930  L     R14,SAVE930\n         BR    R14\nSAVE930  DC    F'0'\n         EJECT\n***********************************************************************\n*        ALLOCATE A NEW DAILY DATASET ON DISK\n***********************************************************************\nENTRY940 DS    0H\n         ST    R14,SAVE940\n         MVC   NEWTYPE,DAYLE      SET TYPE AS DAILY\n         BAL   R14,ENTRY850       GET NEW DSN\n         MVC   DALYDSN,PASSDSN    MOVE IN DSN\n         STH   R5,DALYDSNL        STORE IN LENGTH\n         MVI   DALYOLD,X'00'      RESET END OF PARM\n         MVI   DALYSTAT,X'04'     NEW\n         MVI   DALYDISP,X'02'     CATLG\n         MVI   DALYCOND,X'04'     DELETE\n         MVC   DALYUNIT,DISKNAME  MOVE IN DISKNAME\n         MVC   DALYULEN,DISKNML   MOVE IN DISKNAME LENGTH\n         L     R3,ALLOCYL         SET R3 TO NUM OF CYL NEEDED\n         L     R4,ALLOBLKS        SET R4 TO BLKS/CYL\n         SR    R2,R2              CLEAR FOR MULTIPLY\n         MR    R2,R4              MULT CYLS BY BLKS/CYL\n         ST    R3,ALLOBLKS        STORE IT\n         MVC   DALYX8#,ALLOBLKS+1 MOVE IN ALLOCATION QTY\n         TM    COPYTO,DDSPEC      SPECIFIED A VOLUME\n         BZ    CCC940             NO - GO SET END OF PARM\n         MVI   DALYNOVL,X'00'     VOLUME SPECIFIED\n         CLC   DISKNAME,=CL8'3330V' IS IT MASS STORAGE\n         BE    AAA940\n*******************************************************************\n*  SPECIFY A VOLSER FOR DASD ALLOCATION\n*******************************************************************\n         BAL   R14,ENTRY830       GET SPECIFIED VOL WITH MOST SPACE\n         MVC   DALYXVOL,ALLOCVOL  MOVE IN VOLUME WITH MOST SPACE\n         MVC   DALYXVLN,ALLOCVLN  MOVE IN VOLUME LENGTH\n         B     DDD940\n*******************************************************************\n*  CHANGE VOLSER ALLOCATION TO MASS STORAGE \"GROUP\"   UNTESTED    *\n*******************************************************************\nAAA940   MVC   DALYXVOL,DISKTBL   MOVE IN FIRST VIRTUAL VOLUME\n         MVC   DALYXVLN,DISKTBL+12 MOVE IN VIRTUAL VOLUME LENGTH\n         MVC   DALYX13(2),=X'005E' CHANGE VOLUME TO MSVGP (MSS)\n         B     DDD940\nCCC940   MVI   DALYNOVL,X'80'     NO VOLUME SPECIFIED\nDDD940   LA    R1,DALY99          GET DYNAMIC ALLOCATION PARM\n         SVC   99                 ALLOCATE ACTIVE SOUT FILE\n         LTR   R15,R15            RETCODE = ZERO?\n         BNZ   ABEND25            NO - ERROR\n         LA    R8,OUTPUT          SET UP ADDRESABILITY\n         MVC   DCBDDNAM,DALYDDN   MOVE IN DDNAME\n         NI    MISC,255-NEEDNEW   CLEAR NEW TAPE SWITCH (N/A)\n         TM    FUNC,RPTALLO       REPORT WANTED\n         BZ    EXIT940            NO - BYPASS REPORTING\n         MVC   RPTLINE(29),RPTODS REPORT TYPE\n         MVC   RPTLINE+29(44),DALYDSN MOVE IN DSN\n         BAL   R14,ENTRY960        PUT OUT REPORT LINE\nEXIT940  L     R14,SAVE940\n         BR    R14\nSAVE940  DC    F'0'\n         EJECT\n***********************************************************************\n*        CALCULATE LENGTH OF PASSED DSN (WILL BE IN R5)\n***********************************************************************\nENTRY950 DS    0H\n         ST    R14,SAVE950\n         LA    R4,PASSDSN         SET R4 TO BEGINNING\n         LA    R4,43(R4)          SET R4 TO END\n         LA    R5,44              SET R5 TO MAX LENGTH\nAAA950   CLI   0(R4),C' '         IS IT BLANK\n         BNE   EXIT950            NO  HAVE LENGTH\n         SH    R4,=H'1'           BACK UP 1\n         BCT   R5,AAA950          TRY AGAIN\nEXIT950  L     R14,SAVE950\n         BR    R14\nSAVE950  DC    F'0'\n         EJECT\n***********************************************************************\n*        PRINT THE ALLOCATION REPORT (ALSO SYNC AND DELETE REPORTS)\n***********************************************************************\nENTRY960 DS    0H\n         ST    R14,SAVE960\n         PUT   ALLOCRPT,RPTLINE    PUT OUT THE LINE\n         MVC   RPTLINE,BLANKS      CLEAR LINE\nEXIT960  L     R14,SAVE960\n         BR    R14\nSAVE960  DC    F'0'\n         EJECT\n***********************************************************************\n*        CLOSE THE INPUT FILE\n***********************************************************************\nENTRY980 DS    0H\n         ST    R14,SAVE980\n         CLOSE (INPUT)         CLOSE THE INPUT FILE\nEXIT980  L     R14,SAVE980\n         BR    R14\nSAVE980  DC    F'0'\n         EJECT\n***********************************************************************\n*        CLOSE THE OUTPUT FILE\n***********************************************************************\nENTRY985 DS    0H\n         ST    R14,SAVE985\n         CLOSE OUTPUT           CLOSE THE OUTPUT FILES\nEXIT985  L     R14,SAVE985\n         BR    R14\nSAVE985  DC    F'0'\n         EJECT\n***********************************************************************\n*        CLOSE THE VSAM JOURNAL\n***********************************************************************\nENTRY990 DS    0H\n         ST    R14,SAVE990\n         CLOSE JOURNACB         CLOSE THE JOURNAL VSAM\nEXIT990  L     R14,SAVE990\n         BR    R14\nSAVE990  DC    F'0'\n         EJECT\n***********************************************************************\n*        CLEAR THE ACTIVE FILE\n***********************************************************************\nENTRY995 DS    0H\n         ST    R14,SAVE995\n         OPEN  (FORMDCB,(OUTPUT)) OPEN INPUT FILE TO FORMAT\nAAA995   PUT   FORMDCB,FORMREC    WRITE FORMAT RECORD\n         BCT   R7,AAA995       WRITE NEXT RECORD\n         CLOSE (FORMDCB)          CLOSE FILE\nEXIT995  L     R14,SAVE995\n         BR    R14\nSAVE995  DC    F'0'\n         EJECT\n***********************************************************************\n*        END OF PROGRAM AND ABEND CODES\n***********************************************************************\nEXIT0    EQU   *\n         TM    FUNC,RPTALLO    WRITING ALLOCATION REPORT\n         BZ    EXIT1           NO BYPASS CLOSE\n         CLOSE ALLOCRPT        CLOSE REPORT\nEXIT1    ICM   R1,15,SAVEWORK  LOCATE WORK AREA\n         BZ    EXIT2           NON - GET OUT\n         FREEMAIN R,LV=4096,A=(1)\nEXIT2    ICM   R1,15,SAVESPEC  SPECIAL DELETE AREA\n         BZ    EXIT3           NON - GET OUT\n         FREEMAIN R,LV=2000,A=(1)\nEXIT3    SR    R15,R15         CLEAR RETCODE\n         $EPILOG ,             RETURN TO CALLER\n         SPACE 3\nABEND1   WTO   'SOUTWTR - INVALID CONTROL PARM PASSED'\n         ABEND 1\nABEND2   WTO   'SOUTWTR - EXIT MISSING (SOUTDATE/SOUTCPR/LOCINDEX)'\n         ABEND 2\nABEND3   WTO   'SOUTWTR - NO PREFIX DD CARD SUPPLIED'\n         ABEND 3\nABEND4   WTO   'SOUTWTR - NO //INPUT DD FOR \"FIXTAPE\" OPTION'\n         ABEND 4\nABEND5   WTO   'SOUTWTR - ALLOCATION REPORT OPEN ERROR'\n         ABEND 5\nABEND6   WTO   'SOUTWTR - ACTIVE FILE ON NON-SUPPORTED DISK DEVICE - UP+\n               DATE \"DEVT\" TABLE'\n         ABEND 6\nABEND7   WTO   'SOUTWTR - TAPE UCB TYPE NOT IN THE \"TAPETYPE\" TABLE'\n         ABEND 7\nABEND8   WTO   'SOUTWTR - VSAM JOURNAL UPDATE ERROR'\n         ABEND 8\nABEND9   WTO   'SOUTWTR - INPUT DATASET (ACT/DAY) OPEN ERROR'\n         ABEND 9\nABEND10  WTO   'SOUTWTR - OUTPUT DATASET (DAILY/ARCH.) OPEN ERROR'\n         ABEND 10\nABEND11  WTO   'SOUTWTR - INVALID DSN FOR COPY - NOT DATE STAMPED, GDG,+\n                OR ACTIVE'\n         ABEND 11\nABEND12  WTO   'SOUTWTR - UNSUPPORTED OUTPUT DISK DEVICE TYPE - UPDATE +\n                \"DEVT\" TABLE'\n         ABEND 12\nABEND13  WTO   'SOUTWTR - TAPE DENSITY NOT IN THE \"TAPEDEN\" TABLE'\n         ABEND 13\nABEND14  WTO   'SOUTWTR - LISTSPC CATALOG ERROR'\n         ABEND 14\nABEND15  WTO   'SOUTWTR - UNSUPPORTED DEVICE TYPE'\n         ABEND 15\nABEND16  WTO   'SOUTWTR - NO SPACE ON SPECIFIED PACKS FOR COPY'\n         ABEND 16\nABEND17  WTO   'SOUTWTR - CANNOT CREATE BACKUP DATE'\n         ABEND 17\nABEND18  WTO   'SOUTWTR - ACTIVE FILE ALLOCATION ERROR'\n         ABEND 18\nABEND19  WTO   'SOUTWTR - VSAM JOURNAL ALLOCATION ERROR'\n         ABEND 19\nABEND20  WTO   'SOUTWTR - VSAM JOURNAL OPEN ERROR'\n         ABEND 20\nABEND21  WTO   'SOUTWTR - NEW TAPE ALLOCATION ERROR'\n         ABEND 21\nABEND22  WTO   'SOUTWTR - MOD TO EXISTING TAPE; ALLOCATION ERROR'\n         ABEND 22\nABEND23  WTO   'SOUTWTR - OLD DAILY/ARCH. DATASET ALLOCATION ERROR'\n         ABEND 23\nABEND24  WTO   'SOUTWTR - INVALID ROUTINE ENTERED'\n         ABEND 24\nABEND25  WTO   'SOUTWTR - NEW DAILY DISK DATASET ALLOCATION ERROR'\n         ABEND 25\nABEND26  WTO   'SOUTWTR - SPECIAL DELETE DSN OPEN ERROR'\n         ABEND 26\nABEND27  WTO   'SOUTWTR - SPECIAL DELETE GETMAIN MUST BE EXPANDED'\n         ABEND 27\nABEND28  WTO   'SOUTWTR - SPECIAL DELETE JOURNAL RECORD FAILED'\n         ABEND 28\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND WORK AREAS                                     *\n*                                                                     *\n***********************************************************************\n         LTORG\n         EJECT\n***********************************************************************\n*        DYNAMIC ALLOCATION FOR THE ACTIVE FILE                       *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nACTSVC99 DC    X'80',AL3(ACTB)    ADDRESS OF DYNALLOC BLOCK\nACTB     DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(ACTC)            START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\nACTFLGS  DC    X'D0000000'        WAIT FOR DSN (NEED OLD)\nACTC     DC    A(ACTX1,ACTX2,ACTX3)\nACTFREE  DC    A(ACTX4),AL1(128),AL3(ACTX5)\nACTX1    DC    X'0002',AL2(1)                   DSNAME UNIT\nACTDSNL  DC    AL2(0)                           DSNAME LENGTH\nACTDSN   DC    CL44' '                          DSNAME\nACTX2    DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT\nACTDDN   DC    CL8' '                           DDNAME RETURNED\nACTX3    DC    X'0004',AL2(1),AL2(1)            STATUS UNIT\nACTSTAT  DC    X'01'                            STATUS UNIT=OLD\nACTX4    DC    X'0005',AL2(1),AL2(1)            DISP UNIT\nACTDISP  DC    X'08'                            DISP UNIT=KEEP\nACTX5    DC    X'001C',AL2(0)                   FREE=CLOSE\n         EJECT\n***********************************************************************\n*        DYNAMIC ALLOCATION FOR THE ANY TAPE INPUT OR OUTPUT FILE     *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nTAPE99   DC    X'80',AL3(TAPEB)   ADDRESS OF DYNALLOC BLOCK\nTAPEB    DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(TAPEC)           START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\nTAPEFLGS DC    X'D0000000'        FLAGS (MODIFIED FOR TAPE)\nTAPEC    DC    A(TAPEX1,TAPEX2,TAPEX3)\n         DC    A(TAPEX4,TAPEX5,TAPEX6)\n*        DC    A(TAPEXPDT)\nTAPEMOD  DC    X'80',AL3(TAPEX7)\n         DC    X'80',AL3(TAPEX8)\nTAPEX1   DC    X'0002',AL2(1)                   DSNAME UNIT\nTAPEDSNL DC    AL2(0)                           DSNAME LENGTH\nTAPEDSN  DC    CL44' '                          DSNAME\nTAPEX2   DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT\nTAPEDDN  DC    CL8' '                           DDNAME RETURNED\nTAPEX3   DC    X'0004',AL2(1),AL2(1)            STATUS UNIT\nTAPESTAT DC    X'02'                            STATUS UNIT=MOD\nTAPEX4   DC    X'0005',AL2(1),AL2(1)            DISP UNIT\nTAPEDISP DC    X'02'                            DISP UNIT=CATALOG\nTAPEX5   DC    X'0006',AL2(1),AL2(1)            DISP UNIT\nTAPECOND DC    X'02'                            COND UNIT=CATLG\nTAPEX6   DC    X'001C',AL2(0)                   FREE=CLOSE\nTAPEX7   DC    X'0030',AL2(1),AL2(2)            ALLOC TAPE\nTAPEBSIZ DC    XL2'7FE7'                        32743 MAX BLKSIZE\n* TAPEXPDT DC    X'0022',AL2(1),AL2(5),CL5'99000' EXPDT=99000\nTAPEX8   DC    X'0015',AL2(1)                   ALLOC TAPE\nTAPELEN  DC    AL2(4)                           LENGTH OF TAPE UNIT\nTAPEUNIT DC    CL8'TAPE'                        ESSOTERIC NAME TAPE\n         EJECT\n***********************************************************************\n*        DYNAMIC ALLOCATION FOR THE ANY DAILY INPUT OR OUTPUT FILE    *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nDALY99   DC    X'80',AL3(DALYB)   ADDRESS OF DYNALLOC BLOCK\nDALYB    DC    AL1(20)            LENGTH\nDALYB1   DC    X'01',X'0000'      ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(DALYC)           START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\nDALYFLGS DC    X'D0000000'        FLAGS (WAIT FOR DSNS)\n         DS    0H\nDALYC    DC    A(DALYX1,DALYX2,DALYX3,DALYX4,DALYX5)\nDALYOLD  DC    X'80',AL3(DALYX6)\n         DC    A(DALYX7,DALYX8,DALYX9,DALYX10,DALYX11)\nDALYNOVL DC    X'80',AL3(DALYX12)\n         DC    X'80',AL3(DALYX13)\nDALYX1   DC    X'0055',AL2(1)                   DDNAME RETURN UNIT\nDALYDDNL DC    AL2(8)                           DDNAME LENGTH\nDALYDDN  DC    CL8' '                           DDNAME RETURNED\nDALYX2   DC    X'0002',AL2(1)                   DSNAME UNIT\nDALYDSNL DC    AL2(0)                           DSNAME LENGTH\nDALYDSN  DC    CL44' '                          DSNAME\nDALYX3   DC    X'0004',AL2(1),AL2(1)            STATUS UNIT\nDALYSTAT DC    X'01'                            STATUS UNIT=OLD\nDALYX4   DC    X'0005',AL2(1),AL2(1)            DISP UNIT\nDALYDISP DC    X'04'                            DISP UNIT=DELETE\nDALYX5   DC    X'0006',AL2(1),AL2(1)            DISP UNIT\nDALYCOND DC    X'08'                            COND UNIT=KEEP\nDALYX6   DC    X'001C',AL2(0)                   FREE=CLOSE\nDALYX7   DC    X'0009',AL2(1),AL2(3),AL3(6169)  BLK ALLOCATION\nDALYX8   DC    X'000A',AL2(1),AL2(3)            PRIMARY QTY\nDALYX8#  DC    X'000000'                        # OF BLKS\nDALYX9   DC    X'000F',AL2(0)                   ROUND\nDALYX10  DC    X'000D',AL2(0)                   RLSE ON CLOSE\nDALYX11  DC    X'0015',AL2(1)                   DISK UNIT ALLOCATION\nDALYULEN DC    AL2(0)                           UNIT NAME LENGTH\nDALYUNIT DC    CL8' '                           UNIT NAME\nDALYX12  DC    X'0030',AL2(1),AL2(2),AL2(6169)  BLKSIZE - 6169\nDALYX13  DC    X'0010',AL2(1)                   ALLOCATE VOLUME\nDALYXVLN DC    AL2(0)                           VOLUME LENGTH\nDALYXVOL DC    CL8' '                           VOLUME\n         EJECT\n***********************************************************************\n*        DYNAMIC ALLOCATION FOR THE VSAM JOURNAL FILE                 *\n***********************************************************************\n         DS    0F                 MUST BE FULLWORD ALIGNED\nDAJOURN  DC    X'80',AL3(JRNB)    ADDRESS OF DYNALLOC BLOCK\nJRNB     DC    AL1(20),AL1(1),X'0000' ALLOCATION REQUEST\n         DC    F'0'               ERROR/INFO CODES (RETURNED)\n         DC    A(JRNC)            START OF TEXT UNIT POINTER CHAIN\n         DC    A(0)               RESERVED\n         DC    X'00000000'        FLAGS (MODIFIED FOR TAPE)\nJRNC     DC    A(JRNX1,JRNX2,JRNX3,JRNX4,JRNX5),AL1(128),AL3(JRNX6)\nJRNX1    DC    X'0002',AL2(1)                   DSNAME UNIT\nJRNDSNL  DC    AL2(0)                           DSNAME LENGTH\nJRNDSN   DC    CL44' '                          DSNAME\nJRNX2    DC    X'0055',AL2(1),AL2(8)            DDNAME RETURN UNIT\nJRNDDN   DC    CL8' '                           DDNAME RETURNED\nJRNX3    DC    X'0004',AL2(1),AL2(1)            STATUS UNIT\nJRNSTAT  DC    X'08'                            STATUS UNIT=SHR\nJRNX4    DC    X'0005',AL2(1),AL2(1),X'08'      DISP UNIT (KEEP)\nJRNX5    DC    X'001C',AL2(0)                   FREE=CLOSE\nJRNX6    DC    X'003C',AL2(1),AL2(2),X'0008'    DSORG=VSAM\n         EJECT\n***********************************************************************\n*        PROGRAM CONSTANTS FOLLOW                                     *\n***********************************************************************\n*\nWHERETO  DC    X'00'           EOF PROCESSING\nTOYYY040 EQU   X'01'\nTOFFF040 EQU   X'02'\nTOBBB050 EQU   X'04'\nTOEEE050 EQU   X'08'\nTOHHH050 EQU   X'10'\nTOKKK050 EQU   X'20'\nTOGGG060 EQU   X'80'\n*\nINPTYPE  DC    X'00'           INPUT TYPE - CHECKED FOR SOUTXIT\nACTFILE  EQU   X'01'\nDAYFILE  EQU   X'02'\nINPFILE  EQU   X'04'\n*\nFUNC     DC    X'00'           WHAT FUNCTION\nCOPYING  EQU   X'01'\nFIXTAPE  EQU   X'02'\nREBUILD  EQU   X'04'\nFORMAT   EQU   X'08'\nTAPEINP  EQU   X'10'           HAVE TAPE INPUT DD CARD\nRPTALLO  EQU   X'20'           REPORT ON ALLOCATION\nSPECDEL  EQU   X'40'           DELETE SPECIAL REPORTS\n*\nLOOKFOR  DC    X'00'           LOCATE INDEX LOOKING FOR:\nATAPE    EQU   X'01'           A TAPE ONLY\nADISK    EQU   X'02'           A DISK ONLY\nBOTH     EQU   X'03'           A TAPE OR DISK\n*\nMISC     DC    X'00'           MISC SWITCHES\nRITETAPE EQU   X'01'           WRITING OUTPUT TO TAPE\nPASSLAST EQU   X'02'           GET LAST DSN WITH QUALIFIER\nFRSTIME  EQU   X'04'           FIRST TIME SW FOR UPDATE JOURNAL\nNEEDNEW  EQU   X'08'           NEED NEW TAPE ALLOCATED?\nARCHALLO EQU   X'10'           ANY DAILY TO ARCHIVE????\n*\nCOPYTO   DC    X'00'           COPYING TO WHAT DEVICE????\nFIXDAY   EQU   X'01'           FIXING TAPE - MOD/CREATE DAILY\nFIXARCH  EQU   X'02'           FIXING TAPE - MOD/CREATE ARCHIVE\nDT       EQU   X'10'           COPY DAILY TO TAPE\nDDANY    EQU   X'20'           COPY DAILY TO ANY DISK\nDDSPEC   EQU   X'40'           COPY DAILY TO SPECIFIED DISK\n*\nFIXVAR   DC    X'00'          FIXED OR VARIABLE INPUT RECORDS\nFIXREC   EQU   X'01'\nVARREC   EQU   X'02'\n*\nSPECPROC DC    X'00'          SPECIAL DELETE JOB PROCESSING\nDELIT    EQU   X'01'\nNOTHERE  EQU   X'02'\n*\nRBLDSW   DC    X'00'         REBUILD WHICH DATASETS\n*\nEXITADDR DC    F'0'            EXIT ROUTINE ADDRESS\n*\nEXITPARM DS    0F              EXIT ROUTINE PARM FOLLOWS\nEXITSW   DC    X'24'\nSEP      EQU   X'01'\nREC      EQU   X'02'\nEOF      EQU   X'08'\nEXITREC  DC    AL3(0)          ADDRESS OF THE CURRENT INPUT RECORD\n         DC    F'0'            USER FIELD (INITIALLY ZERO)\n         DC    A(INPUT)        ADDRESS OF INPUT DCB\n         DC    A(OUTPUT)       ADDRESS OF OUTPUT DCB\n***********************************************************************\n*        DEVICE TYPE TABLE - TRACKS/CYLINDER\n***********************************************************************\n         DS    0F\nDEVT     DC    XL1'2E',XL1'00',H'15',F'105' 3380\n         DC    XL1'2C',XL1'00',H'12',F'60'  3375\n         DC    XL1'2B',XL1'00',H'30',F'90'  3350\n         DC    XL1'2A',XL1'00',H'12',F'12'  3340\n         DC    XL1'29',XL1'00',H'19',F'38'  3330\n         DC    XL1'2D',XL1'00',H'19',F'38'  3330-1\n         DC    XL1'FF',XL1'00',H'00',F'00'\nDEVT#    EQU   (*-DEVT)/8\n         EJECT\n***********************************************************************\n*        DRIVE    BPI     MAX 32K BLOCKS   SAVEWTR BLOCKS    %FREE\n*        3420    1600       ????             1000             ??%\n*        3420    6250       5171             4200             19%\n*        3480    ????       6359             5400             15%\n*\n*  NOTE: THIS PROGRAMS LOGIC CHECKS THE BLOCK COUNT ON THE TAPE\n*        EACH TIME A RECORD IS WRITTEN. IF THE MAX BLOCK COUNT\n*        IS REACHED, IT WILL FINISH WRITTING THAT REPORT TO THE\n*        TAPE AND THEN CLOSE IT AND ALLOCATE A NEW TAPE; THUS\n*        PREVENTING MULTI-REEL TAPE DATASETS.\n*        FREE SPACE IS LEFT ON EACH TAPE TO ALLOW FOR COMPLETING\n*        A REPORT TRANSFER. IF, BY CHANCE, A EXTRA-LARGE REPORT\n*        IS BEING TRANSFERED WHEN THE MAX BLOCK COUNT IS REACHED,\n*        THERE SHOULD BE ENOUGH FREE SPACE CALCULATED HERE TO\n*        COMPLETE THE TRANSFER.\n*\n***********************************************************************\n*        TAPE TYPE TABLE - MAX BLOCKS PER TAPE\n***********************************************************************\n         DS    0F\nTAPETYPE DC    XL4'32108003',F'0000',CL12'3420        '\n         DC    XL4'33008003',F'5400',CL12'3480/COMPAT '\n         DC    XL4'78008080',F'5400',CL12'3480/FULLFNC'\n         DC    XL4'78048080',F'8000',CL12'3480/IDRC   '     ENB 11-4-93\n         DC    XL4'78048081',F'18000',CL12'3490/E      '    ENB 11-4-93\nTAPETYP# EQU   (*-TAPETYPE)/20\n         DS    0F\nTAPEDEN  DC    XL4'C3000000',F'1000',CL8'/1600BPI'\n         DC    XL4'D3000000',F'4200',CL8'/6250BPI'\nTAPEDEN# EQU   (*-TAPEDEN)/16\n         EJECT\n***********************************************************************\n*        REQUESTED DISK DEVICE TABLE\n***********************************************************************\n         DS    0F\nDISKTBL  DC    CL8' ',CL4' ',H'0'   DISKNAME|FREE CYL|NAME SIZE\n         DC    CL8' ',CL4' ',H'0'\n         DC    CL8' ',CL4' ',H'0'\nMAXDISKS EQU   (*-DISKTBL)/16\n*\n         DS    0F\nHTTR     DS    XL3\nHDEVT    DC    C' '\nHADR     DC    C' '\nTRKSPER  DC    F'0'\nHOLDSTP  DC    CL11' '\nHOLDCYL  DC    CL4' '\nTYPEUCB  DC    CL4' '\nALLOCVOL DC    CL8' '\nALLOCVLN DC    H'0'\nHDATE    DC    CL8' '\nPDATE    DC    PL5'0'\nHTIME    DC    CL6' '\nPTIME    DC    PL4'0'\nHLINES   DC    PL4'0'\nHSTAMP   DC    PL6'0'\nDISKNAME DC    CL8' '\nDISKNML  DC    H'0'\nTAPENAME DC    CL8' '\nTAPENML  DC    H'0'\nDAYLED   DC    CL10'.DAILY.D'\nDAYLE    DC    CL10'.DAILY'\nARCHVD   DC    CL10'.ARCHIVE.D'\nARCHV    DC    CL10'.ARCHIVE'\nPASSTYPE DC    CL10' '\nNEWTYPE  DC    CL10' '\nPASSLEN  DC    F'0'\nPASSDSN  DC    CL44' '\nPASSPFX  DC    CL25' '\nPREFIX1  DC    CL21' '\nPREFIX1L DC    F'0'\nPREFIX2  DC    CL25' '\nPREFIX2L DC    F'0'\nARCHDSN  DC    CL44' '\nALLOCYL  DC    F'0'\nALLOBLKS DC    F'0'\nSAVEWORK DC    F'0'\nSAVESPEC DC    F'0'\nBLDLLIST DC    H'1',H'58',CL8'SOUTXIT',XL52'00' BLDL LIST\nBLANKS   DC    CL255' '\nFORMREC  DC    X'00410000',C'  ' RDW, CC AND TRC (PAD PREFIX)\nSEPLIT   DC    CL24'SPFSOUTS PAGE SEPARATOR ',CL103'PAD ' SEP RECORD\n*\nRPTLINE  DC    CL133'1 SOUTWTR - INPUT/OUTPUT DATASET ALLOCATIONS'\nRPTACT   DC    CL29' ALLOCATE ACTIVE FILE,   DSN='\nRPTJRNL  DC    CL29' ALLOCATE VSAM JOURNAL,  DSN='\nRPTNTP   DC    CL29' CREATE NEW OUTPUT TAPE, DSN='\nRPTMTP   DC    CL29' MOD TO OUTPUT TAPE    , DSN='\nRPTIDS   DC    CL29' INPUT DATASET,          DSN='\nRPTODS   DC    CL29' OUTPUT DISK DATASET,    DSN='\nRPTDDS   DC    CL29' DELETE DISK DATASET,    DSN='\nRPTTUCB  DC    CL29' TAPE DEVICE TYPE - XXXX/XXXX'\nRPTFORM  DC    CL29' FORMAT ACTIVE FILE          '\nSYNCLINE DC    CL50' ADDING JJJJJJJJ NNNNNNNN TO JOURNAL TO SYNC FILES'\nDELTLINE DC    CL50' DELETE JJJJJJJJ NNNNNNNN FROM JOURNAL PER REQUEST'\n         DS    0F\n*    VARIABLES NEED FOR $STCK MACRO\nDATE     DS    CL8\nTIME     DS    CL12\nYEARDATE DS    CL4\nDAY      DS    XL1\n*\n* PARM PASSED TO SOUTDATE\nDATEPARM DS    0F\nDP1      DC    A(DAYONLIN)        ADDR OF BACK UP TO # DAYS\nDP2      DC    A(LASTDAYO)        ADDR OF LAST DAY TO KEEP ONLINE\n*\nDAYONLIN DC    CL5'00000'\nLASTDAYO DC    CL10' '\nCOMPARED DC    CL8' '\n*\nMAXBLOCK DC    F'0'            MAX BLOCKS TO WRITE ON TAPE\nPREVBLCT DC    F'0'            PREVIOUS BLOCK COUNT\nCOMPADDR DC    F'0'            COMPRESSION EXIT\nLOCIADDR DC    F'0'            LOCINDEX EXIT\nDATEADDR DC    F'0'            BACKUP DATE EXIT\nPARMCPR  DS    0F\nP1       DC    A(CPRTYPE)\nP2       DC    A(RECORDV)\nP3       DC    A(OUTREC)\n         DS    0H\nCPRTYPE  DC    XL4'FF000000'\n*\n         DC    CL14'OUTPUT RECORD='\n         DS    0H\nOUTREC   DS    0CL137\nRECLEN   DC    H'0'\nRECTT    DC    H'0'\nRECOUT   DC    CL133' '\n         DS    D          PAD AREA\n         DC    CL13'INPUT RECORD='\n         DS    0H\nRECORDV  DS    0CL137\nINRECL   DS    H\n         DS    H\nRECORDF  DS    0CL133\nRECPREF  DS    CL6\nRECLIT   DS    0CL77\nRECSEP   DS    CL23\nRECPAD   DS    CL5\nRECJNAME DS    CL8,CL1\nRECJNUM  DS    CL8,CL12\nRECMSGCL DS    CL1,CL1\nRECDATE  DS    CL8,CL1\nRECTIME  DS    CL8,CL1\nRECYEAR  DS    CL4,CL1\nRECDAY   DS    CL1\nRECFILL  DS    CL48\n         DC    CL12'JOURNAL REC='\n         DS    D\n*        THE FOLLOWING IS THE JOURNAL RECORD FOR OUTPUT\nJOURNREC DS    0CL42              JOURNAL RECORD\nJJOBN    DC    CL8' '\nJDATE    DC    PL5'0'\nJTIME    DC    PL4'0'\nJJOB#    DC    CL8' '\nJMCLASS  DC    CL1' '\nJTTR     DC    XL3'000000'\nJDAY     DC    X'FF'\nJLINES   DC    PL4'0'\nJDEVT    DC    XL1'00'\nJADR     DC    CL1' '\nJSTAMP   DC    PL6'0'\n         EJECT\n         DC    CL12'DCB FOLLOWS:'\nJOURNACB ACB   AM=VSAM,DDNAME=JOURNAL,MACRF=(KEY,DIR,OUT)\nJOURNRPL RPL   ACB=JOURNACB,AREA=JOURNREC,AREALEN=42,KEYLEN=22,        X\n               OPTCD=(KEY,DIR,SYN,UPD,MVE,KEQ,FKS),RECLEN=42,          X\n               ARG=JOURNREC\nALLOCRPT DCB   MACRF=(PM),DSORG=PS,DDNAME=ALLOCRPT,LRECL=133,          X\n               RECFM=FBA,BLKSIZE=6118\nSPECLDEL DCB   MACRF=(GM),DSORG=PS,DDNAME=SPECLDEL,EODAD=XXX030,       X\n               EXLST=OPENL\nFORMDCB  DCB   MACRF=(PM),DSORG=PS,DDNAME=XXXXX,LRECL=133\nINPUT    DCB   MACRF=(GM),DSORG=PS,DDNAME=XXXXX,EODAD=ENTRY100,        X\n               BUFL=32760,EXLST=OPENL\nOUTPUT   DCB   MACRF=(PM),DSORG=PS,DDNAME=OUTPUT,LRECL=137,RECFM=VB,   X\n               EXLST=OPENL\nPREFIX   DCB   MACRF=(PM),DSORG=PS,DDNAME=PREFIX,EXLST=OPENL\nOLDPFX   DCB   MACRF=(PM),DSORG=PS,DDNAME=OLDPFX,EXLST=OPENL\n         DS    0F\nOPENL    DC    X'87',AL3(JFCB) OPEN EXIT LIST\nJFCB     DC    CL176' '        HOLD AREA FOR OUTPUT JFCB\n*\nDELAREA  DS    0CL80\nDELJNAME DC    CL8' '\nDELFILL1 DC    CL1' '\nDELJNUM  DC    CL8' '\nDELFILL2 DC    CL63' '\n*\n* PARM SETUP FOR LOCATE INDEX\n*\nLOCIPARM DC    A(LOCIPFX)\n         DC    A(LOCIDSN)\n         DC    A(LOCIVOL)\n         DC    A(0)       ADDR OF GETMAIN\nLOCIPFX  DC    CL44' '\nLOCIDSN  DC    CL44' '\nLOCIVOL  DC    CL6' '\n*\n*        THE FOLLOWING IS REFERNCED IN DYNAMIC STORAGE VIR R13\n*\n         DS    0F\nDEVCLASS DC    XL1'20'         UCB DEVICE CLASS\nWORKAREA DS    XL100          IOSVSUCB WORK AREA\nUCBADDR  DS    F              ADDRESS OF RETURNED UCB\n*\n*        THE FOLLOWING IS THE SVC 78 PARAMETER LIST\n*\nMSGAREA  DS    0CL30\n         DS    CL6            CONSTANT - 'SPACE='\nFREECYL  DS    CL4            TOTAL NO. FREE CYLINDERS\n         DS    CL1            CONSTANT - ','\nFREETRK  DS    CL4            TOTAL NO. FREE TRACKS OUTSIDE CYLS\n         DS    CL1            CONSTANT - ','\nFREEXTNT DS    CL4            TOTAL NO. FREE EXTENTS\n         DS    CL1            CONSTANT - '/'\nCONTGCYL DS    CL4            LARGEST CONTIGUOUS FREE AREA\n         DS    CL1                   IN CYLS AND TRKS\nCONTGTRK DS    CL4\n         DS    0F\nSPACPARM DS    A              IOSVSUCB PARM - ADDRESS OF WORKAREA\n         DS    A              IOSVSUCB PARM - ADDRESS OF DEVICE CLASS\n         DS    A              IOSVSUCB PARM - UCB ADDRESS POINTER\n         DS    F              IOSVSUCB RETURNED UCB ADDRESS\n*\nWORKSPC  DSECT\nLOCINDXW EQU   *\n*\nSPECAREA DSECT\nSPECNAME DS    CL8\nSPECNUM  DS    CL8\nSPECLGTH DS    F\n         PRINT OFF\n         DCBD  DSORG=PS\n         IFGACB AM=VSAM\n         CVT   DSECT=YES      GENERATE CVT LABELDS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOUTXIT": {"ttr": 2572, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***********************************************************************\n*                                                                     *\n*        THIS IS AN EXAMPLE OF A SOUTWTR EXIT ROUTINE.  IN THIS       *\n*        EXAMPLE, A JOB DETAIL REPORT IS CREATED BY PROCESSING        *\n*        THE JES2 WTO MESSAGES IN THE JOB LOG OF EACH JOB.  THIS      *\n*        REPORT WILL CONTAIN:                                         *\n*                                                                     *\n*        DATE TIME JOBNUM JOBNAME RETCODE                             *\n*                                                                     *\n*        TAPE-UNIT VOLUME DSNAME (FOR TAPE REQUESTS)                  *\n*                                                                     *\n*        TOTAL CPU TIME IN MINUTES AND SECONDS                        *\n*                                                                     *\n*        NOTE:  IF A 'NOT CATALOGED' MESSAGE IS ENCOUNTERED IN        *\n*        THE INPUT, THEN IT IS NOTED ON THE OUTPUT LISTING, AND       *\n*        THE OPERATOR IS INFORMED VIA A 'WTO' MESSAGE TO CHECK        *\n*        THE LISTING.  THIS INSURES THAT SHOULD A DATASET FAIL        *\n*        CATALOGING FOR ANY REASON, THAT SOMEONE MAY ADDRESS IT       *\n*        TO AVOID A POTENTIAL PROBLEM.                                *\n*                                                                     *\n*        INSURE THAT A SYSPRINT DD STATEMENT IS ADDED TO THE          *\n*        SAVEWTR PROCEDURE TO PRODUCE THE REPORT.                     *\n*                                                                     *\n*        ATTRIBUTES: SERIALLY REUSABLE PER EXECUTION                  *\n*                                                                     *\n*        THE FOLLOWING DESCRIBES THE PARM LIST PASSED TO THIS         *\n*        ROUTINE VIA REG 1:                                           *\n*                                                                     *\n*          DISPL  LEN    DESCRIPTION                                  *\n*                                                                     *\n*            0     1     01 SEPARATOR IS BEING PASSED                 *\n*                        02 DATA RECORD IS BEING PASSED               *\n*                        04 INPUT FILE IS THE 'ACTIVE' DATASET        *\n*                        08 END OF FILE ON INPUT (LAST ENTRY)         *\n*                        10 PARM SPECIFIED WAS COPY                   *\n*                        20 PARM SPECIFIED WAS RESET                  *\n*                        40 RESERVED                                  *\n*                        80 RESERVED                                  *\n*            1     3     ADDRESS OF THE CURRENT INPUT RECORD          *\n*            4     4     USER FIELD (INITIALLY ZERO)                  *\n*            8     4     ADDRESS OF INPUT DCB                         *\n*           12     4     ADDRESS OF OUTPUT DCB                        *\n*           16     4     ADDRESS OF THE OUTPUT DSNAME                 *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZATION AND PARM ISOLATION                            *\n*                                                                     *\n***********************************************************************\nSOUTXIT  CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING *,R12           INFORM THE ASSEMBLER OF BASE\n         SAVE  (14,12)         SAVE SOUTWTR'S REGISTERS\n         LR    R12,R15         GET A BASE REG\n         LR    R11,R1          MOVE PARM TO USING REGISTER\n         USING PARM,R11        INFORM THE ASSEMBLER\n         ICM   R10,7,RECADDR   GET RECORD ADDRESS\n         LA    R1,SAVE         ADDR OF SAVE AREA\n         ST    R1,8(R13)       FORWARD CHAIN\n         ST    R13,4(R1)       BACKWARD CHAIN\n         LR    R13,R1          SET NEW SAVE AREA\n         TM    USERAREA,INIT   HAVE WE INITIALIZED BEFORE?\n         BO    INITDONE        YES, CONTINUE\n         TM    FLAG,COPY+RESET WILL WE COPY DATA\n         BNO   INITDONE        NO, SKIP HEADER UPDATE\n         L     R15,JFCBADDR    ADDRESS OF JFCB (DSNAME)\n         MVC   HEAD1(11),=C' COPIED TO ' ADD THE PREFIX\n         MVC   HEAD1+11(44),0(R15) MOVE THE DATASET NAME\nINITDONE OI    USERAREA,INIT   INDICATE INITIALIZATION COMPLETE\n         TM    FLAG,EOF        IS THIS END OF FILE?\n         BO    CLOSE           YES, GO CLOSE SYSPRINT FILE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE RECORD PASSED BY THE SOUTWTR ROUTINE             *\n*                                                                     *\n***********************************************************************\n         TM    FLAG,SEP        IS THIS A SEPARATOR RECORD?\n         BZ    NOTSEP          NO  CONTINUE\n         TM    BLKLINE,X'01'   BLANK LINE WRITTEN BEFORE\n         BO    BYPASSBL        YES - BYPASS WRITING ANOTHER\n         LA    R1,BLANKS       POINT TO BLANK RECORD SEPARATOR\n         BAL   R14,PRINT       WRITE BLANK RECORD\n         OI    BLKLINE,X'01'   SET ON\nBYPASSBL LA    R14,SLOTNUM     NUMBER OF SLOTS\n         LA    R15,SLOTS       1ST SLOT AVAILABLE\nINITSLOT XC    0(128,R15),0(R15) CLEAR SLOT TO X'00'\n         LA    R15,128(R15)    BUMP TO NEXT SLOT\n         BCT   R14,INITSLOT    LOOP FOR &SLOTNUM TIMES\n         CLI   JOBSAVE,C' '    WAS A HEADER PREVIOUSLY SAVED?\n         BE    SAVEJN          NO, CONTINUE\n         MVC   JOBNUM(15),JOBSAVE  PREPARE TO WRITE SAVED DATA\n         MVC   JOBSAVE(4),47(R10) SAVE JOB NUMBER\n         MVC   JOBSAVE+7(8),34(R10) SAVE JOB NAME\n         MVC   JOBSAVE+15(1),63(R10) SAVE JOB SYSOUT CLASS\n         B     EXIT            COPY SEPARATOR RECORD AND WRITE\nSAVEJN   MVC   JOBSAVE(4),47(R10) SAVE JOB NUMBER\n         MVC   JOBSAVE+7(8),34(R10) SAVE JOB NAME\n         MVC   JOBSAVE+15(1),63(R10) SAVE JOB SYSOUT CLASS\n         B     EXIT            GET NEXT RECORD\nNOTSEP   CLC   20(9,R10),=C'$HASP373 ' IS THIS JES STARTED MSG (FORM1)\n         BE    DOJES           YES, PROCESS SAME\n         CLC   30(16,R10),=CL16' STARTED - INIT' JES STARTED (FORM2)\n         BNE   NOTJES          NO, CONTINUE\n         LA    R1,7(R1)        ADJUST OFFSETS\n*DOJES   MVC   @JCLASS,64(R10) MOVE CLASS TO MESSAGE\nDOJES    B     DOTIME          WRITE IT OUT\nNOTJES   CLC   20(8,R10),=CL8'IEF452I' JCL ERROR HEADER? (FORM3)\n         BNE   NOTJCL          NO, CONTINUE\n         MVC   @STEP(23),=CL23'FAILED BEFORE XEQ -JCL-'\nDOTIME   MVC   @STIME,1(R10)   MOVE TIME TO MESSAGE\n         B     NOLOG           WRITE IT OUT\nNOTJCL   CLC   1(29,R10),=CL29'******** JOB DELETED BY JES2' (FORM4)\n         BNE   ENDRECOD        NO, CONTINUE\n         MVC   @STEP(23),=CL23'FAILED (NO-LOG)   -JCL-'\nNOLOG    MVC   JOBNUM(15),JOBSAVE COPY SAVED HEADER INFO\n         MVI   JOBSAVE,C' '    CLEAR SAVED HEADER INDICATOR\n         B     WRITE           WRITE IT OUT\nENDRECOD EQU   *\n         CLC   20(9,R10),=C'$HASP395 '\n         BNE   CHKDATA\n         MVC   SAVTIME,1(R10)\n         B     EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK FOR A 'IEF287I' MESSAGE AND DISPLAY IT                 *\n*                                                                     *\n***********************************************************************\nCHKDATA  CLC   1(7,R10),=C'IEF287I' DISPOSITION MESSAGE?\n         BNE   CHK283          NO, CONTINUE\n         MVC   @DSNAME(44),11(R10) MOVE DATASET NAME\n         MVC   @ERCODE(13),56(R10) MOVE MESSAGE TEXT\n         OI    USERAREA,FND    INDICATE THAT A RECORD WAS WRITTEN\n         B     WRITE           WRITE OUT RECORD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK FOR A 'IEF283I' MESSAGE AND DISPLAY IT                 *\n*                                                                     *\n***********************************************************************\nCHK283   CLC   1(7,R10),=C'IEF283I' DISPOSITION MESSAGE?\n         BNE   NOTNC           NO, CONTINUE\n         MVC   @DSNAME(44),11(R10) MOVE DATASET NAME\n         MVC   @ERCODE(13),56(R10) MOVE MESSAGE TEXT\n         OI    USERAREA,FND    INDICATE THAT A RECORD WAS WRITTEN\n         B     WRITE           WRITE OUT RECORD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ISOLATE AND SAVE ALL 'MOUNT' MSG INFORMATION                 *\n*                                                                     *\n***********************************************************************\nNOTNC    CLC   20(7,R10),=C'IEF233A' IS THIS A SCHEDULER MOUNT?\n         BE    CHKMOUNT        YES, GO CHECK TAPE MOUNT\n         CLC   20(7,R10),=C'IEC501A' IS THIS AN OPEN MOUNT\n         BNE   NOTMOUNT        NO, CHECK NEXT RECORD\nCHKMOUNT CLC   27(3,R10),=C' M ' IS THIS FIRST PART OF MOUNT MSG?\n         BE    SAVETAPE        YES, GO SAVE MSG DATA\n         ICM   R15,15,SLOTSAVE GET ADDRESS OF PREVIOUS SLOT\n         BZ    EXIT            NO SLOT, IGNORE IT\n         LA    R14,128         SET LOOP CONTROL\nSCRLOOP  CLI   0(R15),C' '     IS THIS THE END OF DATA?\n         BE    SCRUPDT         YES, APPEND DATASET NAME\n         LA    R15,1(R15)      BUMP TO NEXT CHARACTER\n         BCT   R14,SCRLOOP     BUMP TO NEXT CHARACTER\n         B     EXIT            TOO LONG, PASS WHAT WE GOT\nSCRUPDT  EX    R14,MOVEDATA    MOVE DATA TO SLOT\n         B     EXIT            PROCESS NEXT RECORD\nMOVEDATA MVC   0(0,R15),28(R10) APPEND DATASET NAME\nSAVETAPE BAL   R9,FINDSLOT     GO FIND THE ACTIVE SLOT FOR THIS DRIVE\n         ST    R15,SLOTSAVE    SAVE ADDR OF SLOT\n         MVC   0(80,R15),30(R10) SAVE DRIVE AND DATA\n         B     EXIT            PROCESS NEXT RECORD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ISOLATE ALL 'KEEP' MSG INFORMATION                           *\n*                                                                     *\n***********************************************************************\nNOTMOUNT CLC   20(7,R10),=C'IEF234E' IS THIS A SCHEDULER KEEP?\n         BE    CHKKEEP         YES, GO CHECK TAPE KEEP\n         CLC   20(7,R10),=C'IEC502E' IS THIS AN OPEN KEEP?\n         BNE   CHKTERM         NO, CHECK NEXT RECORD\nCHKKEEP  CLC   27(3,R10),=C' K ' IS THIS 1ST PART OF KEEP MSG?\n         BNE   EXIT            NO, ALL DONE\n         CLC   34(6,R10),=CL6' ' IS THIS A LABEL ERROR KEEP?\n         BE    EXIT            YES, NO NEED TO PROCESS\n         CLI   34(R10),C','    IS THIS AN ABEND ERROR KEEP?\n         BE    EXIT            YES, NO NEED TO PROCESS\n         BAL   R9,FINDSLOT     GO FIND THE ACTIVE SLOT FOR THIS DRIVE\n         MVI   @TYPE,C'N'      MOVE TYPE OF I/O\n         CLC   4(6,R15),=C'PRIVAT' WAS MOUNT FOR THIS DRIVE A SCRATCH?\n         BE    ITSNEW          YES, ASSUME NEW\n         MVI   @TYPE,C'O'      MOVE TYPE OF I/O\n*ITSNEW  MVC   @UNIT+1(3),0(R15) MOVE TAPE DRIVE ADDRESS\nITSNEW   MVC   @VOLSER,34(R10) MOVE VOLUME SERIAL TO DATA AREA\n         LA    R14,6           SET LOOP CONTROL\n         LA    R1,@VOLSER      VOLUME SERIAL ADDRESS\nSERLOOP  CLI   0(R1),C','      TRAILING COMMA?\n         BE    SERCL           YES, CLEAR SAME\n         LA    R1,1(R1)        BUMP TO NEXT CHAR\n         BCT   R14,SERLOOP     CHK NEXT CHAR\nSERCL    MVC   0(5,R1),BLANKS  CLEAR ANY THING AFTER VOLSER\n         LA    R14,80          SET LOOP CONTROL\n         LA    R3,5            SET LOOP CONTROL\nCHKCOMMA CLI   0(R15),C','     FIND A COMMA\n         BE    CHKCOM          FOUND, CHECK WHICH ONE\nBUMPCOM  LA    R15,1(R15)      ADDRESS OF NEXT CHARACTER\n         BCT   R14,CHKCOMMA    DECREMENT AND BRANCH BACK\n         B     WRITE           NO DSNAME, WRITE WHAT WE GOT\nCHKCOM   BCT   R3,BUMPCOM      DECREMENT AND BRANCH BACK\n         MVC   @DSNAME(44),1(R15) MOVE DSNAME TO PRINT LINE\n         B     WRITE           WRITE OUT RECORD\n         SPACE 4\n***********************************************************************\n*                                                                     *\n*        LOCATE AN ACTIVE TAPE SLOT OR A NULL SLOT (SUBROUTINE)       *\n*                                                                     *\n***********************************************************************\nFINDSLOT LA    R15,SLOTS       ADDRESS OF SLOT TABLE\n         LA    R14,SLOTNUM     NUMBER OF ENTRIES IN TABLE\nSLOTLOOP CLC   0(3,R15),30(R10) CHECK FOR ENTRY MATCH\n         BER   R9              MATCH, RETURN\n         CLI   0(R15),X'00'    IS THIS AN EMPTY SLOT?\n         BER   R9              YES, USE IT\n         LA    R15,128(R15)    BUMP TO NEXT SLOT\n         BCT   R14,SLOTLOOP    CHECK NEXT SLOT\n         ABEND 2,DUMP          OUT OF SLOTS, ABEND (DUMP)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ISOLATE THE SMF JOB STARTED MSG TO PROVIDE DATE/TIME         *\n*                                                                     *\n***********************************************************************\n*HKSTART CLC   1(7,R10),=C'IEF375I' IS THIS THE SMF TERMINATION MSG?\n*        BNE   CHKTERM         NO, CHECK FOR STEP RECORDS\n*        MVC   @SDATE,31(R10)  MOVE DATE TO RECORD\n*        MVC   @STIME(2),37(R10)  MOVE HOUR TO RECORD\n*        MVI   @STIME+2,PERIOD  MOVE PERIOD TO RECORD\n*        MVC   @STIME+3(2),39(R10)  MOVE MIN TO RECORD\n*        MVI   @STIME+5,PERIOD  MOVE PERIOD TO RECORD\n*        MVC   @STIME+6(2),SECONDS  MOVE SECONDS TO RECORD\n*        B     WRITE           BRANCH OUT AT TERM MESSAGE\n*        SPACE 4\n***********************************************************************\n*                                                                     *\n*        ISOLATE THE SMF TERMINATION MSG TO PROVIDE DATE/TIME         *\n*                                                                     *\n***********************************************************************\nCHKTERM  CLC   1(7,R10),=C'IEF376I' IS THIS THE SMF TERMINATION MSG?\n         BNE   CHKSLASH        NO, CHECK FOR STEP RECORDS\n         MVC   @SDATE,31(R10)  MOVE DATE TO RECORD\n         MVC   @STIME,SAVTIME  MOVE TIME TO RECORD\n*        MVC   @STIME(2),37(R10)  MOVE HOUR TO RECORD\n*        MVI   @STIME+2,PERIOD  MOVE PERIOD TO RECORD\n*        MVC   @STIME+3(2),39(R10)  MOVE MIN TO RECORD\n*        MVI   @STIME+5,PERIOD  MOVE PERIOD TO RECORD\n*        MVC   @STIME+6(2),SECONDS  MOVE SECONDS TO RECORD\n         B     WRITE           BRANCH OUT AT TERM MESSAGE\n*        SPACE 4\n***********************************************************************\n*                                                                     *\n*        ISOLATE THE ACCOUNTING ROUTINE RECORDS TO GET THE STEP       *\n*        PROGRAM AND RETURN CODE                                      *\n*                                                                     *\n***********************************************************************\nCHKSLASH CLI   55(R10),C'/'    IS THIS A STEP RECORD?\n         BNE   EXIT            NO, SKIP IT\n         CLI   65(R10),C'/'    IS THIS A STEP RECORD?\n         BNE   EXIT            NO, SKIP IT\n         MVC   @RETCODE,68(R10) MOVE RETCODE\n         MVC   @STEP,29(R10)   MOVE STEPNAME AND PGM NAME\n         SPACE 4\n***********************************************************************\n*                                                                     *\n*        SYSPRINT OUTPUT ROUTINE AND EXIT CODE                        *\n*                                                                     *\n***********************************************************************\nWRITE    CLC   JOBNUM,BLANKS   JOBNAME IS BLANKS\n         BNE   WRITE1          NO - WRITE IT\n         TM    BLKLINE,X'01'   ALREADY WROTE A BLANK LINE??\n         BO    WRITEXIT        YES - BYPASS NEXT WRITE\n         OI    BLKLINE,X'01'   WRITING A BLANK LINE\n         B     WRITE2          BYPASS CLEAR\nWRITE1   MVI   BLKLINE,X'00'   CLEAR BLANK LINE CHECK\nWRITE2   MVC   @JOBLOG,JOBNUM ADD THE JOB NUMBER AND NAME\n         LA    R1,ASA          DATA POINTER FOR SYSPRINT\n         BAL   R14,PRINT       WRITE REPORT RECORD\nWRITEXIT B     EXIT            RETURN\nCLOSE    CLOSE (PRINTDCB)      CLOSE SYSPRINT DCB\n         SR    R15,R15         CLEAR RETCODE\n         TM    FLAG,ACT+RESET  IS THIS THE ACTIVE FILE?\n         BNO   EXIT            NO, CONTINUE\n         TM    USERAREA,FND    WERE ANY ERROR RECORDS FOUND?\n         BZ    EXIT            NO, CONTINUE\n         WTO   'SOUTWTR - JOBS FOUND THAT MAY BE IN ERROR, CHECK LISTIN*\n               G',ROUTCDE=2    INFORM THE OPERATOR\nEXIT     L     R13,SAVE+4      GET PREVIOUS SAVE POINTER\n         SR    R15,R15         CLEAR RETURN CODE\n         RETURN (14,12),RC=(15) RETURN TO SOUTWTR\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS AND WORK AREAS                                     *\n*                                                                     *\n***********************************************************************\n         LTORG\nSAVE     DC    18F'0'          REGISTER SAVE AREA\nSLOTSAVE DC    F'0'            SAVE AREA FOR MOST RECENT SLOT\nBLKLINE  DC    X'00'           BLANK LINE CHECK SWITCH\nJOBSAVE  DC    CL16' '         HOLD AREA FOR HEADER INFO\nJOBNUM   DC    CL4' ',C'   '   HOLD AREA FOR JOBNUMBER\nJOBNAME  DC    CL8' '          HOLD AREA FOR JOBNAME\nJOBMCL   DC    CL1' '          HOLD AREA FOR JOB MSGCLASS\nSEPLIT   DC    CL33'SPFSOUTS PAGE SEPARATOR ' SEPARATOR REC\nBLANKS   DC    CL133' '        SEPARATOR PADDING\n@TYPE    DC    CL1' '          WORK SPACE FOR TYPE OF I/O\nSECONDS  DC    CL2'00'         WRITE THE SECONDS FOR PROCESSING\nSAVTIME  DC    CL8' '\nPERIOD   EQU   C'.'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SYSOUT LISTING BUFFERS AND CONSTANTS                         *\n*                                                                     *\n***********************************************************************\nHEAD1    DC    CL134'                                                  X\n                DISKWTR  JOB  STATUS  REPORT                           X\n                                       '\nHEAD2    DC    CL134'   DATE      TIME     JOB#   JOBNAME   STEPNAME   X\n               RETCD   VOLSER   --------  DATASET NAME  ---------------X\n               ----      ERROR CODE    '\n*----------------------------------------------------------------------\nASA      DC    C' '            ASA CHARACTER FOR SYSPRINT\nBUF      DC    CL132' '        OUTPUT BUFFER FOR SYSPRINT\n         ORG   BUF             BACK TO BUF ORIGIN\n         DC    C'  '\n@SDATE   DC    CL5' ',C'   '        START DATE\n@STIME   DC    CL8' ',C'   '        START TIME\n@JOBLOG  DC    CL16' ',C' '         JOB NUMBER, JOBNAME\n@STEP    DC    CL8' ',C'   '        STEPNAME\n@RETCODE DC    CL5' ',C'   '        RETCODE\n@VOLSER  DC    CL6' ',C'   '        VOLUME SERIAL NUMBER\n@DSNAME  DC    CL44' ',C'     '     DATASET NAME\n@ERCODE  DC    CL13' ',C'  '        EDATE/TIME\n         ORG\n*----------------------------------------------------------------------\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INPUT/OUTPUT SUBROUTINES & DCB'S AND TAPE SLOT TABLE         *\n*                                                                     *\n***********************************************************************\nPRINT    SYSPRINT HEADER1=HEAD1,HEADER2=HEAD2,LRECL=133 REPORT FILE\n         LTORG\nSLOTS    DC    50XL128'00'     ONE SLOT FOR EACH TAPE DRIVE AVAILABLE\nSLOTNUM  EQU   ((*-SLOTS)/128)  NUMBER OF SLOTS IN TABLE\nPARM     DSECT\nFLAG     DS    X               INDICATOR SWITCH (FLAGS)\nSEP      EQU   X'01'           SEPARATOR IS BEING PASSED\nREC      EQU   X'02'           DATA RECORD IS BEING PASSED\nACT      EQU   X'04'           INPUT FILE IS THE 'ACTIVE' DATASET\nEOF      EQU   X'08'           END OF FILE ON INPUT (LAST ENTRY)\nCOPY     EQU   X'10'           COPY IS BEING PERFORMED\nRESET    EQU   X'20'           RESET WILL BE DONE\nRSVD40   EQU   X'40'           RESERVED\nRSVD80   EQU   X'80'           RESERVED\nRECADDR  DS    AL3             ADDRESS OF THE CURRENT INPUT RECORD\nUSERAREA DS    F               USER FIELD (INITIALLY ZERO)\nFND      EQU   X'01'           AT LEAST ONE \"NOT CAT\" FOUND\nINIT     EQU   X'02'           INITIALIZATION COMPLETE\nIDCBADDR DS    A               ADDRESS OF INPUT DCB\nODCBADDR DS    A               ADDRESS OF OUTPUT DCB\nJFCBADDR DS    A               ADDRESS OF JFCB (DSNAME)\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT358/CBT.V500.FILE358.PDS/ASM.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT358/CBT.V500.FILE358.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}