{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "BCIKLM", "INMTNODE": "PYRLDC", "INMTUID": "BCIKLM", "INMFTIME": "20030421175200000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6160, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "SYS3.SOUTSYS.MACLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SYS3.SOUTSYS.MACLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6160, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 128, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "030111", "DS1SCEXT": "b'\\x80\\x18\\x10'", "DS1SCALO": "b'P\\x00\\x00\\x0f'", "DS1LSTAR": "b'\\x00\\x05\\x04'", "DS1TRBAL": "b'\\xccf'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x11 \\x00\\x04\\xaa-p'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x11 \\x00\\x04\\xaa-p'", "b'X\\xf3\\xe5h\\x00\\x00\\x00W\\x00\\x07\\x00W\\x00\\x0c\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$EPILOG": {"ttr": 276, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   $EPILOG &RC\n         GBLC  &PROGM\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         AIF   ('&PROGM' NE 'GETMAIN').NOFREE\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         AGO   .LM\n.NOFREE  ANOP\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n.LM      ANOP\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PROLOG": {"ttr": 278, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   $PROLOG &LV=0,&GM=Y\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n         GBLC  &PROGM\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         AIF   ('&GM' EQ 'N').NOGM\n&PROGM   SETC  'GETMAIN'\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n         AGO   .STORE\n.NOGM    ANOP\n         CNOP  0,4\n         LA    R1,SAVE&SYSNDX\n         B     *+76\nSAVE&SYSNDX DC 18F'0'\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$REGS": {"ttr": 515, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         $REGS\n         GBLB  &PRORG\n         AIF   (&PRORG).MEX2\n&PRORG   SETB  1\n SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n SPACE\nREG0     EQU   0\nREG1     EQU   1\nREG2     EQU   2\nREG3     EQU   3\nREG4     EQU   4\nREG5     EQU   5\nREG6     EQU   6\nREG7     EQU   7\nREG8     EQU   8\nREG9     EQU   9\nREG10    EQU   10\nREG11    EQU   11\nREG12    EQU   12\nREG13    EQU   13\nREG14    EQU   14\nREG15    EQU   15\n SPACE\n.MEX2    ANOP\n       MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$STCK": {"ttr": 517, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   $STCK  &NOGEN,&TODLOC=\n         LCLC   &L\n.**********************************************************************\n.****                                                             *****\n.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****\n.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****\n.****                                                             *****\n.****    IF INVOKED WITHOUT THE OPTIONAL 'NOGEN' KEYWORD, THE     *****\n.****    CONSTANTS NAMED BELOW WILL BE GENERATED.  IF THE         *****\n.****    'NOGEN' KEYWORD IS USED, THE USER MUST PROVIDE THIS      *****\n.****    ROUTINE WITH ADDRESSABILITY TO THEM AS PRE-DEFINED       *****\n.****    CONSTANTS.                                               *****\n.****                                                             *****\n.****    IF INVOKED WITH THE NOGEN OPTION AND TIME HAS BEEN       *****\n.****    DEFINED TO BE EIGHT BYTES, ONLY EIGHT CHARACTERS         *****\n.****    WILL BE USED AND THE YEARDATE FIELD WILL NOT BE          *****\n.****    REFERENCED.                                              *****\n.****                                                             *****\n.****    DAY     DS   X      A BINARY NUMBER (HEX) RELATIVE TO    *****\n.****                        THE DAY OF THE WEEK AS FOLLOWS       *****\n.****                        0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,    *****\n.****                        3=THURSDAY, 4=FRIDAY,                *****\n.****                        5=SATURDAY, 6=SUNDAY                 *****\n.****                                                             *****\n.****    YEARDATE DS  CL4    A FOUR CHARACTER FIELD CONTAINING    *****\n.****                        EITHER '19XX' OR '20XX' - NOT USED   *****\n.****                        IF L'TIME EQ 8.                      *****\n.****                                                             *****\n.****    DATE    DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING  *****\n.****                        THE DATE IN MM/DD/YY FORMAT          *****\n.****                                                             *****\n.****    TIME    DS   CL12   A TWELVE CHARACTER FIELD CONTAINING  *****\n.****                        THE TIME IN HH:MM:SS.TTT FORMAT      *****\n.****                  NOTE: IF THIS FIELD IS ONLY EIGHT CHARS    *****\n.****                        IN LENGTH, ONLY EIGHT CHARS WILL BE  *****\n.****                        USED - FIRST EIGHT.                  *****\n.****                                                             *****\n.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****\n.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****\n.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****\n.****                                                             *****\n.****    MODIFIED 02/19/81    BY  JOE MCCLOSKEY                   *****\n.****                         F.W. WOOLWORTH, MILWAUKEE           *****\n.****                                                             *****\n.****    CHANGED TO BE ABLE TO RECEIVE A TOD LOCATION INSTEAD OF  *****\n.****    USING TOD CLOCK.  IF TOD LOCATION GIVEN, TIME ZONE       *****\n.****    OFFSET NOT USED.  ADDITIONLY FOUR BYTES ADDED TO TIME    *****\n.****    TO INCLUDE DECIMAL AND THOUSANTH'S OF SECONDS, AND A     *****\n.****    FOUR DIGIT FIELD CALLED YEARDATE TO GIVE YEAR INCLUDING  *****\n.****    CENTURY.  TO BE FORWARD COMPATABLE, THE ADDED BYTES ARE  *****\n.****    NOT USED IF THE TIME FIELD IS PREDEFINED AS ONLY EIGHT   *****\n.****    BYTES IN LENGTH.  ALSO CHANGED LOGIC SO AS NOT TO GIVE   *****\n.****    ERRONEOUS RESULTS (OFF BY 1 SECOND OCCASIONALLY).        *****\n.****                                                             *****\n.**********************************************************************\n&L       SETC  '&SYSNDX'\n         DS    0H\n&LABEL   STCK  8(13)              STORE THE TIME-OF-DAY CLOCK\n         AIF   (T'&TODLOC EQ 'O').NOW SKIP IF NOT FURNISHED\n         AIF   ('&TODLOC'(1,1) EQ '(').REG   DO REGISTER NOTATION\n         MVC   8(8,13),&TODLOC    MOVE IN FURNISHED TOD CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n         AGO   .GOTTIME           SKIP TIME ZONE OFFSET\n.REG     MVC   8(8,13),0&TODLOC   MOVE IN FURNISHED TOD CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n         AGO   .GOTTIME           SKIP TIME ZONE OFFSET\n.NOW     LM    0,1,8(13)          LOAD INTO WORK REGS\n         L     15,16              GET CVT ADDRESS\n         A     0,304(15)          ADD LOCAL TIME DEVIATION\n.GOTTIME SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS\n         D     0,=F'60000000'     DIVIDE BY 60M (R1=MINUTES)\n         LR    15,0               COPY REMAINDER OF MICS TO GET SECS\n         SR    14,14              CLEAR FOR DIVIDE\n         D     14,=F'1000'        DIVIDE TO GET REMAINING MILLISECONDS\n         LR    14,15              COPY TO WORK REG\n         CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT\n         UNPK  24(5,13),11(5,13)  UNPACK SECONDS FOR PRINT\n         OI    28(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+6(2),24(13)   MOVE THE SECONDS\n         AIF    ('&NOGEN' NE 'NOGEN').LONG1   GENERATED TIME AS CL12?\n         AIF    (L'TIME EQ 8).SHORT1  SHORT FORM SPECIFIED\n.LONG1   MVC   TIME+9(3),26(13)   MOVE THE THOUSANTH'S OF SECONDS\n.SHORT1  CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT\n         DP    8(8,13),=P'60'     DIVIDE INTO HOURS AND MINUTES\n         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME+3(2),26(13)   MOVE THE MINUTES\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),=P'24'     DIVIDE INTO DAYS AND HOURS\n         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   TIME(2),26(13)     MOVE THE HOURS\n         MVI   TIME+2,C':'        ADD COLON\n         MVI   TIME+5,C':'        ADD COLON\n         AIF    ('&NOGEN' NE 'NOGEN').LONG2   GENERATED TIME AS CL12?\n         AIF    (L'TIME EQ 8).SHORT2  SHORT FORM SPECIFIED\n.LONG2   MVI   TIME+8,C'.'        ADD DECIMAL\n.SHORT2  ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS\n         DP    8(8,13),=P'7'      DIVIDE BY NUMBER OF DAYS IN A WEEK\n         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER\n         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY\n         STC   0,DAY              SET RELATIVE DAY OF WEEK\n         ZAP   8(8,13),16(8,13)   MOVE # DAYS TO WORK AREA\n         AP    8(8,13),=P'1'      ADD ONE DAY\n         DP    8(8,13),=P'1461'   DIVIDE BY # DAYS IN FOUR YEARS\n         ZAP   16(8,13),8(5,13)   SAVE # FOUR YEAR PERIODS\n         MP    16(8,13),=P'4'     GET TO LAST 4 YEAR PERIOD\n         XC    8(5,13),8(13)      CLEAR FOR DIVIDE\n         LA    15,S&L.T           LOAD TABLE ADDRESS FOR NO LEAP\n         CP    16(8,13),=P'4'     IS IT PRIOR TO 1904?\n         BL    S&L.C1             YES, CAN'T BE LEAP YEAR\n         LA    15,S&L.TL          LOAD TABLE ADDRESS FOR LEAP YEAR\n         AP    8(8,13),=P'1'      ADD ONE MORE DAY FOR 1900\n         CP    8(8,13),=P'367'    IS IT LEAP YEAR?\n         BL    S&L.C2             YES DON'T SUBTRACT\n         LA    15,S&L.T           LOAD TABLE ADDRESS FOR NO LEAP YEAR\n         AP    16(8,13),=P'1'     ADD ONE YEAR\n         SP    8(8,13),=P'366'    SUBTRACT REMAINING DAYS FOR ONE LEAP\nS&L.C1   CP    8(8,13),=P'366'    LESS THAN ONE YEAR REMAINING?\n         BL    S&L.C2             YES, GET OUT OF LOOP\n         SP    8(8,13),=P'365'    SUBTRACT REMAINING DAYS FOR ONE YEAR\n         AP    16(8,13),=P'1'     ADD ONE YEAR\n         B     S&L.C1             GO BACK TO COMPARE\nS&L.C2   ZAP   24(8,13),=P'1900'  DEFAULT TO 1900'S\n         AP    24(8,13),16(8,13)  ADD NUMBER YEARS SINCE 1900\n         UNPK  32(5,13),29(3,13)  UNPACK YEAR\n         OI    36(13),X'F0'       SET UP FOR PRINTING\n         AIF    ('&NOGEN' NE 'NOGEN').LONG3   GENERATED TIME AS CL12?\n         AIF    (L'TIME EQ 8).SHORT3  SHORT FORM SPECIFIED\n.LONG3   MVC   YEARDATE,33(13)    MOVE INTO OUTPUT FIELD\n.SHORT3  MP    16(8,13),=P'1000'  MAKE ROOM FOR # DAYS\n         AP    16(8,13),8(8,13)   ADD IN DAYS TO FORM JULIAN DATE\n         ZAP   24(4,13),16(8,13)  MOVE JUL DATE TO WORK AREA\n         MVO   14(2,13),25(1,13)  MOVE YEAR PORTION\n         UNPK  DATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA\n         LR    14,15              SAVE TABLE IN USE\n         ZAP   8(8,13),26(2,13)   MOVE DAY PORTION\n         CVB   0,8(13)            CONVERT TO BIN\n         SR    1,1                CLEAR REG\n         IC    1,0(15)            LOAD CHAR FROM TABLE\n         LA    15,1(15)           INDEX TABLE POINTER\n         SR    0,1                SUBTRACT FROM WORK VALUE\n         BP    *-10               STILL POSITIVE, DO AGAIN\n         AR    0,1                ELSE, ADD IT BACK\n         CVD   0,8(13)            CONVERT TO DEC\n         UNPK  DATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT\n         SR    15,14              FIND VALUE OF CURRENT INDEX\n         CVD   15,8(13)           CONVERT TO DEC\n         UNPK  DATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT\n         OI    DATE+1,C'0'        INSURE NUMERICS\n         OI    DATE+4,C'0'        INSURE NUMERICS\n         OI    DATE+7,C'0'        INSURE NUMERICS\n         MVI   DATE+2,C'/'        ADD SLASH\n         MVI   DATE+5,C'/'        ADD SLASH\n         B     S&L.E              BRANCH AROUND CONSTANTS\nS&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nS&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\n         AIF    ('&NOGEN' EQ 'NOGEN').NOGEN   NOGEN SPECIFIED, SKIP\nDAY      DC    XL1'00'            RELATIVE DAY OF THE WEEK, MON.=X'00'\nYEARDATE DC    C'    '            EITHER '19XX' OR '20XX'\nDATE     DC    C'  /  /  '        CURRENT DATE\nTIME     DC    C'  :  :  .   '    CURRENT TIME\n.NOGEN   ANOP\nS&L.E    DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCBLKSZ": {"ttr": 524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCBLKSZ &BLKSIZE=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       'BLKSIZE' KEYWORD\n.*\n.*       BLKSIZE='NNNNN'        NUMERIC VALUE - MAX 32767\n.*       BLKSIZE=NAME           NAME  DC  H'NNNNN'  (HALFWORD)\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         LCLA  &X\n         LCLC  &LIT\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n*----------------------------------------------------------------------\n*        BLOCK SIZE\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALBLKSZ        KEY FOR BLKSIZE\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'2'     MOVE 2 TO TXT UNIT LNGTH FLD\n         AIF   ('&BLKSIZE'(1,1) EQ '''').AAA\n         CLC   &BLKSIZE,=H'0'     ZERO ?\n         BE    MZZZ&X             YES - SKIP IT\n         MVC   S99TUPAR(2),&BLKSIZE BLKSIZE\n         AGO   .BBB\n.AAA     ANOP\n&LIT     SETC  '&BLKSIZE'(2,K'&BLKSIZE-2)\n         MVC   S99TUPAR(2),=AL2(&LIT)   BLKSIZE\n.BBB     ANOP\n         LA    R14,8(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\nMZZZ&X   EQU   *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCDD": {"ttr": 526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCDD &DD=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       'DD' KEYWORD\n.*\n.*       DD='DDNAME'            CHARACTER - 1 - 8 BYTES\n.*       DD=NAME                NAME  DC  CL5'SYSUT'   1 - 8 BYTES\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         LCLA  &X\n         LCLC  &LIT,&REG,&LA\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n*----------------------------------------------------------------------\n*        DDNAME\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALDDNAM        KEY FOR DDNAME\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD\n         AIF   ('&DD'(1,1) EQ '''').AAA\n         AIF   ('&DD'(1,1) EQ '(').BBB\n         CLI   &DD,C' '           ANY SPECIFIED ?\n         BNH   MZZZ&X             NO - SKIP IT\n         MVC   S99TUPAR(8),=CL8' '\n&LA      SETC  'L''&DD'\n         MVC   S99TUPAR(&LA),&DD DDNAME\n         AGO   .CCC\n.AAA     ANOP\n&LIT     SETC  '&DD'(2,K'&DD-2)\n         MVC   S99TUPAR(8),=CL8'&LIT'\n         AGO   .CCC\n.BBB     ANOP\n&REG     SETC  '&DD'(2,K'&DD-2)\n         MVC   S99TUPAR(8),0(&REG)\n.CCC     ANOP\n         LA    R14,14(R14)        BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\nMZZZ&X   EQU   *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCDEST": {"ttr": 528, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCDEST &DEST=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       'DEST' KEYWORD\n.*\n.*       DEST='R20'             DESTINATION ID, R0 - R255\n.*       DEST=NAME              NAME  DC  CL4'R255'\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         LCLA  &X\n         LCLC  &LIT,&LL\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n*----------------------------------------------------------------------\n*        REMOTE DEST ID\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSUSER        KEY FOR DESTINATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 0 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD\n         AIF   ('&DEST'(1,1) EQ '''').AAA\n         CLI   &DEST,C' '         ANY SPECIFIED ?\n         BNH   MZZZ&X             NO - SKIP IT\n         MVC   S99TUPAR(8),=CL8' '\n&LL      SETC  'L''&DEST'\n         MVC   S99TUPAR(&LL),&DEST\n         AGO   .BBB\n.AAA     ANOP\n&LIT     SETC  '&DEST'(2,K'&DEST-2)\n         MVC   S99TUPAR(8),=CL8'&LIT'  DESTNAME\n.BBB     ANOP\n         LA    R14,14(R14)        BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\nMZZZ&X   EQU   *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCDISP": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCDISP &DISP=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       'DISP' KEYWORD\n.*\n.*       DISP='(NEW,CATLG,DELETE)'    ANY VALID DISPOSITION\n.*       DISP=NAME                    NAME  DC  CL20'SHR'\n.*\n.*       MAY, 1982 - CREATED\n.*       JUNE,1987 - REMOVED KEY 4 FROM DEALLOC AS IT RETURNED 03600004\n.*                   FROM SVC 99. NOTE - ONLY REMOVED IT FROM THE CODE\n.*                   THAT IS GENERATED IF DISP='(   CODING IS USED.\n.*                   MACRO HAS TO BE CHANGED TO SUPPORT DISP=NAME\n.*---------------------------------------------------------------------\n         GBLA  &SPF1,&SPF2\n         GBLC  &SPF3,&XXXFUNC\n         LCLA  &X,&LL,&D\n         LCLC  &LIT,&LA\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n         AIF   ('&SPF2' NE '0').GBSET\n&SPF2    SETA  &SYSNDX\n.GBSET   ANOP\n         AIF   ('&DISP'(1,1) NE '''').ZZZ\n*----------------------------------------------------------------------\n*        DISP\n*----------------------------------------------------------------------\n&D       SETA  2\n&LL      SETA  &D\n         AIF   ('&DISP'(2,1) NE '(').AAA\n&D       SETA  &D+1\n&LL      SETA  &D\n.AAA     ANOP\n         AIF   ('&DISP'(&D,1) EQ ',').BBB\n         AIF   ('&DISP'(&D,1) EQ ')').BBB\n         AIF   ('&DISP'(&D,1) EQ '''').BBB\n&D       SETA  &D+1\n         AGO   .AAA\n.BBB     ANOP\n&LL      SETA  &D-&LL\n&D       SETA  &D-&LL\n         AIF   ('&XXXFUNC' EQ 'D').SECOND     IF DEALLOC SKIP THIS  RJW\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSTATS        KEY FOR DSN STATUS\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n         AIF   ('&DISP'(&D,&LL) EQ 'NEW').CCC\n         AIF   ('&DISP'(&D,&LL) EQ 'MOD').DDD\n         AIF   ('&DISP'(&D,&LL) EQ 'SHR').EEE\n         AIF   ('&DISP'(&D,&LL) EQ 'OLD').FFF\n         MNOTE 8,'INVALID DISPOSITION FIELD'\n         MEXIT\n.CCC     ANOP\n         MVI   S99TUPAR,X'04'     DISP=(NEW,\n         AGO   .GGG\n.DDD     ANOP\n         MVI   S99TUPAR,X'02'     DISP=(MOD,\n         AGO   .GGG\n.EEE     ANOP\n         MVI   S99TUPAR,X'08'     DISP=(SHR,\n         AGO   .GGG\n.FFF     ANOP\n         MVI   S99TUPAR,X'01'     DISP=(OLD,\n.GGG     ANOP\n         LA    R14,7(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n.SECOND  ANOP\n&D       SETA  &D+&LL\n&LL      SETA  &D\n         AIF   ('&DISP'(&D,1) EQ ')').DONE\n         AIF   ('&DISP'(&D,1) EQ '''').DONE\n&D       SETA  &D+1\n&LL      SETA  &D\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALNDISP        KEY FOR DSN NORMAL DISP\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n.HHH     ANOP\n         AIF   ('&DISP'(&D,1) EQ ',').III\n         AIF   ('&DISP'(&D,1) EQ ')').III\n         AIF   ('&DISP'(&D,1) EQ '''').III\n&D       SETA  &D+1\n         AGO   .HHH\n.III     ANOP\n&LL      SETA  &D-&LL\n&D       SETA  &D-&LL\n         AIF   ('&DISP'(&D,&LL) EQ 'CATLG').JJJ\n         AIF   ('&DISP'(&D,&LL) EQ 'UNCATLG').KKK\n         AIF   ('&DISP'(&D,&LL) EQ 'DELETE').LLL\n         AIF   ('&DISP'(&D,&LL) EQ 'KEEP').MMM\n         MNOTE 8,'INVALID DISPOSITION FIELD'\n.JJJ     ANOP\n         MVI   S99TUPAR,X'02'     CATLG,\n         AGO   .NNN\n.KKK     ANOP\n         MVI   S99TUPAR,X'01'     UNCATLG,\n         AGO   .NNN\n.LLL     ANOP\n         MVI   S99TUPAR,X'04'     DELETE,\n         AGO   .NNN\n.MMM     ANOP\n         MVI   S99TUPAR,X'08'     KEEP,\n.NNN     ANOP\n         LA    R14,7(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n&D       SETA  &D+&LL\n&LL      SETA  &D\n         AIF   ('&XXXFUNC' EQ 'D').DONE     ID DEALLOC SKIP THIS  RJW\n         AIF   ('&DISP'(&D,1) EQ ')').DONE\n         AIF   ('&DISP'(&D,1) EQ '''').DONE\n&D       SETA  &D+1\n&LL      SETA  &D\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALCDISP        KEY FOR DSN CONDITIONAL DISP\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n.OOO     ANOP\n         AIF   ('&DISP'(&D,1) EQ ',').PPP\n         AIF   ('&DISP'(&D,1) EQ ')').PPP\n         AIF   ('&DISP'(&D,1) EQ '''').PPP\n&D       SETA  &D+1\n         AGO   .OOO\n.PPP     ANOP\n&LL      SETA  &D-&LL\n&D       SETA  &D-&LL\n         AIF   ('&DISP'(&D,&LL) EQ 'CATLG').QQQ\n         AIF   ('&DISP'(&D,&LL) EQ 'UNCATLG').RRR\n         AIF   ('&DISP'(&D,&LL) EQ 'DELETE').SSS\n         AIF   ('&DISP'(&D,&LL) EQ 'KEEP').TTT\n         MNOTE 8,'INVALID DISPOSITION FIELD'\n.QQQ     ANOP\n         MVI   S99TUPAR,X'02'     CATLG,\n         AGO   .YYY\n.RRR     ANOP\n         MVI   S99TUPAR,X'01'     UNCATLG,\n         AGO   .YYY\n.SSS     ANOP\n         MVI   S99TUPAR,X'04'     DELETE,\n         AGO   .YYY\n.TTT     ANOP\n         MVI   S99TUPAR,X'08'     KEEP,\n.YYY     ANOP\n         LA    R14,7(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         AGO   .DONE\n.ZZZ     ANOP\n*----------------------------------------------------------------------\n*        DISP\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSTATS        KEY FOR DSN STATUS\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n         CLI   &DISP,C' '         ANY SPECIFIED ?\n         BNH   MZZZ&X             NO - SKIP IT\n         XC    SPFTRT,SPFTRT      CLEAR TRT TABLE\n         MVI   SPFTRT+C' ',X'FF'  BLANK\n         MVI   SPFTRT+C',',X'FF'  COMMA\n         MVI   SPFTRT+C')',X'FF'  PAREN\n         TRT   &DISP,SPFTRT       FIND END\n         BNZ   MAAA&X             FOUND IT\n&LA      SETC  'L''&DISP'\n         LA    R1,&DISP+&LA       SET TO END OF FIELD\nMAAA&X   EQU   *\n         LA    R3,&DISP\n         CLI   0(R3),C'('         IN PARENS ?\n         BNE   MBBB&X             NO - OK\n         LA    R3,1(R3)           YES - SKIP PAREN\nMBBB&X   EQU   *\n         SR    R1,R3              LENGTH OF DATA\n         CLC   0(3,R3),=C'NEW'\n         BE    MCCC&X             DISP=NEW\n         CLC   0(3,R3),=C'MOD'\n         BE    MDDD&X             DISP=MOD\n         CLC   0(3,R3),=C'SHR'\n         BE    MEEE&X             DISP=SHR\n         CLC   0(3,R3),=C'OLD'\n         BE    MFFF&X             DISP=OLD\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nMCCC&X   EQU   *\n         MVI   S99TUPAR,X'04'     DISP=(NEW,\n         B     MGGG&X\nMDDD&X   EQU   *\n         MVI   S99TUPAR,X'02'     DISP=(MOD,\n         B     MGGG&X\nMEEE&X   EQU   *\n         MVI   S99TUPAR,X'08'     DISP=(SHR,\n         B     MGGG&X\nMFFF&X   EQU   *\n         MVI   S99TUPAR,X'01'     DISP=(OLD,\nMGGG&X   EQU   *\n         LA    R14,7(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         LA    R3,1(R1,R3)        BUMP DISP FIELD\n         LA    R1,&DISP+&LA       SET TO END OF FIELD\n         CR    R3,R1              END OF FIELD ?\n         BNL   MZZZ&X             YES - DONE\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALNDISP        KEY FOR DSN NORMAL DISP\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\nMHHH&X   EQU   *\n         TRT   0(8,R3),SPFTRT     FIND END OF NEXT PARM\n         BNZ   MIII&X             FOUND IT\n&LA      SETC  'L''&DISP'\n         LA    R1,&DISP+&LA       SET TO END OF FIELD\nMIII&X   EQU   *\n         SR    R1,R3              LENGTH OF DATA\n         BM    MZZZ&X             NO DATA - DONE\n         CLC   0(5,R3),=C'CATLG'\n         BE    MJJJ&X             CATALOG\n         CLC   0(7,R3),=C'UNCATLG'\n         BE    MKKK&X             UNCATLG\n         CLC   0(6,R3),=C'DELETE'\n         BE    MLLL&X             DELETE\n         CLC   0(4,R3),=C'KEEP'\n         BE    MMMM&X             KEEP\n         B     MZZZ&X             DONE\nMJJJ&X   EQU   *\n         MVI   S99TUPAR,X'02'     CATLG,\n         B     MNNN&X\nMKKK&X   EQU   *\n         MVI   S99TUPAR,X'01'     UNCATLG,\n         B     MNNN&X\nMLLL&X   EQU   *\n         MVI   S99TUPAR,X'04'     DELETE,\n         B     MNNN&X\nMMMM&X   EQU   *\n         MVI   S99TUPAR,X'08'     KEEP,\nMNNN&X   EQU   *\n         LA    R14,7(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         LA    R3,1(R1,R3)        BUMP DISP FIELD\n         LA    R1,&DISP+&LA       SET TO END OF FIELD\n         CR    R3,R1              END OF FIELD ?\n         BNL   MZZZ&X             YES - DONE\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALCDISP        KEY FOR DSN CONDITIONAL DISP\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n         B     MHHH&X\nMZZZ&X   EQU   *\n.DONE    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCDSN": {"ttr": 773, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCDSN  &DSN=\n         LCLA  &X\n         LCLC  &LIT,&LA\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n*----------------------------------------------------------------------\n*        DSNAME\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALDSNAM        KEY FOR DSNAME\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'44'    MOVE 44 TO TXT UNIT LNGTH FLD\n         AIF   ('&DSN'(1,1) EQ '''').AAA\n         AIF   ('&DSN'(1,1) EQ '(').BBB\n         CLI   &DSN,C' '          ANY SPECIFIED ?\n         BNH   MZZZ&X             NO - SKIP IT\n         MVC   S99TUPAR(44),=CL44' '\n&LA      SETC  'L''&DSN'\n         MVC   S99TUPAR(&LA),&DSN  DSNAME\n         AGO   .CCC\n.AAA     ANOP\n&LIT     SETC  '&DSN'(2,K'&DSN-2)\n         MVC   S99TUPAR(44),=CL44'&LIT'\n         AGO   .CCC\n.BBB     ANOP\n         L     R1,SPFREGS+16       PICK UP ADDR OF DSN FIELD\n         MVC   S99TUPAR(44),0(R1)\n.CCC     ANOP\n         LA    R14,50(R14)        BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\nMZZZ&X   EQU   *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCERR": {"ttr": 775, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCERR &FUNC,&DD=,&DSN=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       RESULTS OF SVC 99 AND FILL IN THE SMSG AND LMSG FIELDS.\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         GBLA  &SPF2\n         GBLC  &SPF3\n         LCLA  &X\n         LCLC  &LIT,&LA\n&X       SETA  &SYSNDX\n         AIF   ('&SPF2' NE '0').GBSET\n&SPF2    SETA  &SYSNDX\n.GBSET   ANOP\n*----------------------------------------------------------------------\n*        DYNAMIC ALLOCATION ERROR MESSAGES\n*----------------------------------------------------------------------\n         MVC   LMSG,BLANKS\n         MVC   SMSG,BLANKS\n         MVI   LMSG,C'&FUNC'\n.*\n         AIF   (T'&DD EQ 'O').BBB\n         MVC   LMSG+2(4),=C'DD=?'\n         AIF   ('&DD'(1,1) NE '''').AAA\n&LIT     SETC  '&DD'(2,K'&DD-2)\n         MVC   LMSG+5(8),=CL8'&LIT'\n         AGO   .BBB\n.AAA     ANOP\n         AIF   ('&DD'(1,1) NE '(').AAA1\n         MVC   LMSG+5(8),0&DD\n         AGO   .BBB\n.AAA1    ANOP\n&LA      SETC  'L''&DD'\n         MVC   LMSG+5(&LA),&DD\n.BBB     ANOP\n.*\n         AIF   (T'&DSN EQ 'O').DDD\n         MVC   LMSG+14(4),=C'DSN='\n         AIF   ('&DSN'(1,1) NE '''').CCC\n&LIT     SETC  '&DSN'(2,K'&DSN-2)\n         MVC   LMSG+18(44),=CL44'&LIT'\n         AGO   .DDD\n.CCC     ANOP\n&LA      SETC  'L''&DSN'\n         MVC   LMSG+18(&LA),&DSN\n.DDD     ANOP\n         BAL   R14,SPF2&SPF2\n         AIF   ('&SPF3' EQ 'X').DONE\n&SPF3    SETC  'X'\n         B     M999&X\nSPF2&SPF2 DS  0H\n         LTR   R15,R15            ALLOCATION SUCCESSFUL ?\n         BZ    MZZZ&X             YES - OK\n         CVD   R15,SPFDBWRD\n         UNPK  SPFDYN15,SPFDBWRD+6(2)\n         OI    SPFDYN15+3,X'F0'\n*\n         UNPK  SPFDBWRD(5),S99ERROR(3) 1 MORE THAN FIELD SIZE\n         TR    SPFDBWRD(4),TR&X-240 TRANSLATE\n         MVC   SPFDYNER,SPFDBWRD   MOVE TO ERROR SLOT\n*\n         UNPK  SPFDBWRD(5),S99INFO(3)\n         TR    SPFDBWRD(4),TR&X-240 TRANSLATE\n         MVC   SPFDYNIN,SPFDBWRD\n         CLC   SPFDYNER,=C'0210'    DATA SET IN USE ?\n         BNE   MBBB&X             NO\n         MVC   SMSG(15),=C'DATA SET IN USE'\n         B     MZZZ&X\nMBBB&X   EQU   *\n         CLC   SPFDYNER,=C'031C'    INVALID MEMBER NAME ?\n         BNE   MCCC&X             NO\n         MVC   SMSG(19),=C'INVALID MEMBER NAME'\n         B     MZZZ&X\nMCCC&X   EQU   *\n         CLC   SPFDYNER,=C'0320'    INVALID DSNAME ?\n         BNE   MDDD&X             NO\n         MVC   SMSG(21),=C'INVALID DATA SET NAME'\n         B     MZZZ&X\nMDDD&X   EQU   *\n         CLC   SPFDYNER,=C'0330'    MBR SPECIFIED, DSN NOT A PDS\n         BNE   MEEE&X             NO\n         MVC   SMSG(17),=C'THIS IS NOT A PDS'\n         B     MZZZ&X\nMEEE&X   EQU   *\n         CLC   SPFDYNER,=C'0440'    DATA SET NOT FOUND\n         BNE   MFFF&X             NO\n         MVC   SMSG(18),=C'DATA SET NOT FOUND'\n         B     MZZZ&X\nMFFF&X   EQU   *\n         CLC   SPFDYNER,=C'1708'    DATA SET NOT CATALOGED\n         BNE   MGGG&X             NO\n         MVC   SMSG(22),=C'DATA SET NOT CATALOGED'\n         B     MZZZ&X\nMGGG&X   EQU   *\n         CLC   SPFDYNER,=C'0410'    DDNAME UNAVAILABLE\n         BNE   MHHH&X             NO\n         MVC   SMSG(16),=C'DDNAME UNAVAILABLE'\n         B     MZZZ&X\nMHHH&X   EQU   *\nMYYY&X   EQU   *\n         MVC   SMSG(16),=C'ALLOCATION ERROR'\n         MVC   SMSG+17(4),SPFDYNER\nMZZZ&X   EQU   *\n         BR    R14\nTR&X     DC    C'0123456789ABCDEF'\nERR1&SPF2 DS    0H\n         LA    R15,32\n         MVC   SPFDYN15,=C'0032'\n         MVC   SPFDYNER,=C'9999'\n         MVC   SPFDYNIN,=C'9999'\n         BR    R14\nM999&X   DS    0H\n.DONE    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCLRECL": {"ttr": 778, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCLRECL &LRECL=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       'LRECL' KEYWORD\n.*\n.*       LRECL='NNNNN'          NUMERIC VALUE - MAX 32767\n.*       LRECL=NAME             NAME  DC  H'NNNNN'  HALFWORD\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         LCLA  &X\n         LCLC  &LIT\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n*----------------------------------------------------------------------\n*        LRECL\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALLRECL        KEY FOR LRECL\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'2'     MOVE 2 TO TXT UNIT LNGTH FLD\n         AIF   ('&LRECL'(1,1) EQ '''').AAA\n         CLC   &LRECL,=H'0'       ANY SPECIFIED ?\n         BNH   MZZZ&X             NO - SKIP IT\n         MVC   S99TUPAR(2),&LRECL LRECL\n         AGO   .BBB\n.AAA     ANOP\n&LIT     SETC  '&LRECL'(2,K'&LRECL-2)\n         MVC   S99TUPAR(2),=AL2(&LIT)   LRECL\n.BBB     ANOP\n         LA    R14,8(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\nMZZZ&X   EQU   *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCRECFM": {"ttr": 780, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCRECFM &RECFM=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       'RECFM' KEYWORD\n.*\n.*       RECFM='FBA'            1 - 3 BYTES\n.*       RECFM=NAME             NAME  DC  CL3'VBS'  1 - 3 BYTES\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         GBLA  &SPF1,&SPF2\n         LCLA  &X\n         LCLC  &LIT\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n         AIF   ('&RECFM'(1,1) EQ '''').LITERAL\n*----------------------------------------------------------------------\n*        RECORD FORMAT\n*----------------------------------------------------------------------\n         CLI   &RECFM,C' '        ANY SPECIFIED ?\n         BNH   MZZZ&X             NO - SKIP IT\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALRECFM        KEY FOR RECFM\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n         CLI   &RECFM,C'F'        FIXED ?\n         BE    MAAA&X             YES\n         CLI   &RECFM,C'V'        VARIABLE ?\n         BE    MBBB&X             YES\n         CLI   &RECFM,C'U'        UNDEFINED ?\n         BE    MCCC&X             YES\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nMAAA&X   EQU   *\n         OI    S99TUPAR,X'80'     FIXED\n         B     MDDD&X\nMBBB&X   EQU   *\n         OI    S99TUPAR,X'40'     VARIABLE\n         B     MDDD&X\nMCCC&X   EQU   *\n         OI    S99TUPAR,X'C0'     UNDEFINED\nMDDD&X   EQU   *\n         AIF   (L'&RECFM LT 2).NOMORE\n         CLI   &RECFM+1,C'B'      BLOCKED ?\n         BE    MEEE&X             YES\n         CLI   &RECFM+1,C'A'      ANS ?\n         BE    MFFF&X             YES\n         CLI   &RECFM+1,C'M'      MACHINE ?\n         BE    MGGG&X             YES\n         CLI   &RECFM+1,C' '      END OF DATA ?\n         BE    MKKK&X             YES\n         B     ERR1&SPF2\nMEEE&X   EQU   *\n         OI    S99TUPAR,X'10'     BLOCKED\n         B     MHHH&X\nMFFF&X   EQU   *\n         OI    S99TUPAR,X'04'     ANS\n         B     MHHH&X\nMGGG&X   EQU   *\n         OI    S99TUPAR,X'02'     MACHINE\nMHHH&X   EQU   *\n         AIF   (L'&RECFM LT 3).NOMORE\n         CLI   &RECFM+2,C'A'      ANS ?\n         BE    MIII&X             YES\n         CLI   &RECFM+2,C'M'      MACHINE ?\n         BE    MJJJ&X             YES\n         CLI   &RECFM+2,C' '      END OF DATA ?\n         BE    MKKK&X             YES\n         B     ERR1&SPF2\nMIII&X   EQU   *\n         OI    S99TUPAR,X'04'     ANS\n         B     MKKK&X\nMJJJ&X   EQU   *\n         OI    S99TUPAR,X'02'     MACHINE\n.NOMORE  ANOP\nMKKK&X   EQU   *\n         LA    R14,7(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\nMZZZ&X   EQU   *\n         AGO   .DONE\n.LITERAL ANOP\n*----------------------------------------------------------------------\n*        RECORD FORMAT\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALRECFM        KEY FOR RECFM\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n         AIF   ('&RECFM'(2,1) EQ 'F').AAA\n         AIF   ('&RECFM'(2,1) EQ 'V').BBB\n         AIF   ('&RECFM'(2,1) EQ 'U').CCC\n         MNOTE 8,'INVALID RECFM'\n         MEXIT\n.AAA     ANOP\n         OI    S99TUPAR,X'80'     FIXED\n         AGO   .DDD\n.BBB     ANOP\n         OI    S99TUPAR,X'40'     VARIABLE\n         AGO   .DDD\n.CCC     ANOP\n         OI    S99TUPAR,X'C0'     UNDEFINED\n.DDD     ANOP\n         AIF   ('&RECFM'(3,1) EQ '''').KKK\n         AIF   ('&RECFM'(3,1) EQ 'B').EEE\n         AIF   ('&RECFM'(3,1) EQ 'A').FFF\n         AIF   ('&RECFM'(3,1) EQ 'M').GGG\n         MNOTE 8,'INVALID RECFM'\n         MEXIT\n.EEE     ANOP\n         OI    S99TUPAR,X'10'     BLOCKED\n         AGO   .HHH\n.FFF     ANOP\n         OI    S99TUPAR,X'04'     ASA CONTROL CHARACTER\n         AGO   .KKK\n.GGG     ANOP\n         OI    S99TUPAR,X'02'     MACHINE CHARACTER\n         AGO   .KKK\n.HHH     ANOP\n         AIF   ('&RECFM'(4,1) EQ '''').KKK\n         AIF   ('&RECFM'(4,1) EQ 'A').III\n         AIF   ('&RECFM'(4,1) EQ 'M').JJJ\n         MNOTE 8,'INVALID RECFM'\n         MEXIT\n.III     ANOP\n         OI    S99TUPAR,X'04'     ASA CONTROL CHARACTER\n         AGO   .KKK\n.JJJ     ANOP\n         OI    S99TUPAR,X'02'     MACHINE CHARACTER\n.KKK     ANOP\n         LA    R14,7(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n.DONE    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCRETDD": {"ttr": 783, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCRETDD &RETDD=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       'RETDD' KEYWORD\n.*\n.*       RETDD=NAME             NAME  DC  CL8' '\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         LCLA  &X\n         LCLC  &LIT\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n*----------------------------------------------------------------------\n*        RETURN THE DDNAME ALLOCATED\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALRTDDN        KEY FOR RETURN DDNAME\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD\n         MVC   S99TUPAR(8),=8C' '  INITIALIZE TO BLANKS\n         LA    R5,S99TUPAR        SAVE THIS ADDR FOR LATER\n         LA    R14,14(R14)        BUMP TO NEXT TEXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCSPACE": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCSPACE &SPACE=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       'SPACE' KEYWORD\n.*\n.*       SPACE='(6160,(100,10),RLSE,CONTIG,ROUND)'\n.*       SPACE=NAME             NAME  DC  CL20'(TRK,1)'\n.*              ANY VALID SPACE PARAMETERS\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         GBLA  &SPF1,&SPF2\n         LCLA  &X,&LL,&D\n         LCLC  &LIT,&LA\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n         AIF   ('&SPACE'(1,1) NE '''').FIELD\n*----------------------------------------------------------------------\n*        SPACE='(6160,(10,10,10),RLSE,CONTIG,ROUND)'\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n&D       SETA  3\n&LL      SETA  &D\n         AIF   ('&SPACE'(3,3) EQ 'CYL').TAAA\n         AIF   ('&SPACE'(3,3) EQ 'TRK').TBBB\n         AGO   .TCCC\n.TAAA    ANOP\n         LA    R1,DALCYL          KEY FOR CYLINDER ALLOCATION\n         AGO   .TFFF\n.TBBB    ANOP\n         LA    R1,DALTRK          KEY FOR TRACK ALLOCATION\n         AGO   .TFFF\n.TCCC    ANOP\n         LA    R1,DALBLKLN        KEY FOR BLOCK ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD\n.TDDD    ANOP\n         AIF   ('&SPACE'(&D,1) EQ ',').TEEE\n&D       SETA  &D+1\n         AGO   .TDDD\n.TEEE    ANOP\n&LL      SETA  &D-&LL\n&D       SETA  &D-&LL\n&LIT     SETC  '&SPACE'(&D,&LL)\n         MVC   S99TUPAR(3),=AL3(&LIT)  MOVE BLOCK SIZE\n         LA    R14,9(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         AGO   .TEND\n.TFFF    ANOP\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n         LA    R14,4(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n.TEND    ANOP\n*----------------------------------------------------------------------\n*        PRIMARY ALLOCATION\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALPRIME        KEY FOR PRIME ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD\n&D       SETA  &D+&LL+1\n&LL      SETA  &D\n         AIF   ('&SPACE'(&D,1) NE '(').PAAA\n&D       SETA  &D+1\n&LL      SETA  &D\n.PAAA    ANOP\n         AIF   ('&SPACE'(&D,1) EQ ',').PBBB\n         AIF   ('&SPACE'(&D,1) EQ ')').PBBB\n         AIF   ('&SPACE'(&D,1) EQ '''').PBBB\n&D       SETA  &D+1\n         AGO   .PAAA\n.PBBB    ANOP\n&LL      SETA  &D-&LL\n&D       SETA  &D-&LL\n&LIT     SETC  '&SPACE'(&D,&LL)\n         MVC   S99TUPAR(3),=AL3(&LIT)  PRIMARY SIZE\n         LA    R14,9(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         AIF   ('&SPACE'(&D+&LL,1) EQ ')').DEND\n         AIF   ('&SPACE'(&D+&LL+1,1) EQ ',').SCCC             \u00a2\n*----------------------------------------------------------------------\n*        SECONDARY ALLOCATION - LITERAL\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSECND        KEY FOR SECONDARY ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD\n&D       SETA  &D+&LL+1\n&LL      SETA  &D\n.SAAA    ANOP\n         AIF   ('&SPACE'(&D,1) EQ ',').SBBB\n         AIF   ('&SPACE'(&D,1) EQ ')').SBBB\n         AIF   ('&SPACE'(&D,1) EQ '''').SBBB\n&D       SETA  &D+1\n         AGO   .SAAA\n.SBBB    ANOP\n&LL      SETA  &D-&LL\n&D       SETA  &D-&LL\n&LIT     SETC  '&SPACE'(&D,&LL)\n         MVC   S99TUPAR(3),=AL3(&LIT) SECONDARY SIZE\n         LA    R14,9(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         AIF   ('&SPACE'(&D+&LL,1) EQ ')').DEND\n         AGO   .SDDD         \u00a2\n.SCCC    ANOP                \u00a2\n&D       SETA   &D+1         \u00a2\n.SDDD    ANOP                \u00a2\n*----------------------------------------------------------------------\n*        DIRECTORY BLOCKS\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALDIR          KEY FOR DIRECTORY ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD\n&D       SETA  &D+&LL+1\n&LL      SETA  &D\n.DAAA    ANOP\n         AIF   ('&SPACE'(&D,1) EQ ',').DBBB\n         AIF   ('&SPACE'(&D,1) EQ ')').DBBB\n         AIF   ('&SPACE'(&D,1) EQ '''').DBBB\n&D       SETA  &D+1\n         AGO   .DAAA\n.DBBB    ANOP\n&LL      SETA  &D-&LL\n&D       SETA  &D-&LL\n&LIT     SETC  '&SPACE'(&D,&LL)\n         MVC   S99TUPAR(3),=AL3(&LIT) DIRECTORY BLOCKS\n         LA    R14,9(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n.DEND    ANOP\n         AIF   ('&SPACE'(&D+&LL,1) EQ ')').RAAA\n         AIF   ('&SPACE'(&D+&LL,1) EQ '''').DONE\n         MNOTE 8,'INVALID SPACE VALUE'\n         MEXIT\n.RAAA    ANOP\n         AIF   ('&SPACE'(&D+&LL+1,1) EQ ')').DONE\n         AIF   ('&SPACE'(&D+&LL+1,1) EQ '''').DONE\n         AIF   ('&SPACE'(&D+&LL+1,1) EQ ',').RBBB\n         MNOTE 8,'INVALID SPACE VALUE'\n         MEXIT\n.RBBB    ANOP\n&D       SETA  &D+&LL+2\n&LL      SETA  &D\n         AIF   ('&SPACE'(&D,1) EQ ',').REND\n         AIF   ('&SPACE'(&D,4) EQ 'RLSE').RCCC\n         MNOTE 8,'INVALID SPACE VALUE'\n         MEXIT\n.RCCC    ANOP\n&LL      SETA  4\n*----------------------------------------------------------------------\n*        RLSE PARAMETER - LITERAL\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALRLSE         KEY FOR RLSE OPTION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n         LA    R14,4(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n.REND    ANOP\n         AIF   ('&SPACE'(&D+&LL,1) EQ ')').DONE\n         AIF   ('&SPACE'(&D+&LL,1) EQ '''').DONE\n         AIF   ('&SPACE'(&D+&LL+1,1) NE ',').FAAA\n&D       SETA  &D+&LL\n&LL      SETA  1\n         AGO   .FEND\n.FAAA    ANOP\n*----------------------------------------------------------------------\n*        SPECIFIC FORM OF ALLOCATION - LITERAL\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSPFRM        KEY FOR SPECIFIC FORM OF ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n&D       SETA  &D+&LL+1\n&LL      SETA  &D\n         AIF   ('&SPACE'(&D,3) EQ 'ALX').FDDD\n         AIF   ('&SPACE'(&D,4) EQ 'MXIG').FCCC\n         AIF   ('&SPACE'(&D,6) EQ 'CONTIG').FBBB\n         MNOTE 8,'INVALID SPACE VALUE'\n         MEXIT\n.FBBB    ANOP\n&LL      SETA  6\n         MVI   S99TUPAR,X'08'     CONTIG\n         AGO   .FEEE\n.FCCC    ANOP\n&LL      SETA  4\n         MVI   S99TUPAR,X'04'     MXIG\n         AGO   .FEEE\n.FDDD    ANOP\n&LL      SETA  3\n         MVI   S99TUPAR,X'02'     ALX\n.FEEE    ANOP\n         LA    R14,7(R14)         BUMP TO NEXT TEXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n.FEND    ANOP\n         AIF   ('&SPACE'(&D+&LL,1) EQ ')').DONE\n         AIF   ('&SPACE'(&D+&LL,1) EQ '''').DONE\n*----------------------------------------------------------------------\n*        ROUND PARAMETER\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALROUND        KEY FOR ROUND ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n&D       SETA  &D+&LL+1\n         AIF   ('&SPACE'(&D,5) EQ 'ROUND').NAAA\n         MNOTE 8,'INVALID SPACE PARAMETER FOR ROUND OPTION'\n         MEXIT\n.NAAA    ANOP\n         LA    R14,4(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         AGO   .DONE\n.FIELD   ANOP\n*----------------------------------------------------------------------\n*        SPACE=(6160,(10,10,10),RLSE,CONTIG,ROUND) - FIELD\n*----------------------------------------------------------------------\n         CLI   &SPACE,C' '        ANY SPECIFIED ?\n         BNH   SEND&X             NO - SKIP IT\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R3,&SPACE\n         CLI   0(R3),C'('         MUST BE A PAREN\n         BE    TAAA&X\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nTAAA&X   EQU   *\n         LA    R3,1(R3)           BUMP PAST PAREN\n         CLC   0(3,R3),=C'CYL'    CYLINDER ALLOCATION ?\n         BE    TBBB&X             YES - OK\n         CLC   0(3,R3),=C'TRK'    TRACK ALLOCATION ?\n         BE    TCCC&X             YES - OK\n         B     TDDD&X             MUST BE BLOCK ALLOCATION\nTBBB&X   EQU   *\n         LA    R1,DALCYL          KEY FOR CYLINDER ALLOCATION\n         B     TFFF&X\nTCCC&X   EQU   *\n         LA    R1,DALTRK          KEY FOR TRACK ALLOCATION\n         B     TFFF&X\nTDDD&X   EQU   *\n         LA    R1,DALBLKLN        KEY FOR BLOCK ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD\n         XC    SPFTRT,SPFTRT      CLEAR TRT TABLE\n         MVI   SPFTRT+C',',X'FF'  COMMA\n&LA      SETC  'L''&SPACE-1'\n         TRT   0(&LA,R3),SPFTRT\n         BNZ   TEEE&X             FOUND IT\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nTEEE&X   EQU   *\n         SR    R1,R3              LENGTH OF BLKSIZE PARM\n         BCTR  R1,R0              LENGTH-1\n         EX    R1,PACK&X          PACK THE BLKSIZE\n         CVB   R2,DBWD&X\n         STCM  R2,7,S99TUPAR      MOVE BLKSIZE\n         LA    R3,1(R1,R3)        BUMP TO NEXT PARM IN SPACE FIELD\n         LA    R14,9(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         B     TGGG&X\nTFFF&X   EQU   *\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n         LA    R3,4(R3)           BUMP TO NEXT PARM IN SPACE FIELD\n         LA    R14,4(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         B     TGGG&X\nPACK&X   PACK  DBWD&X,0(0,R3)     PACK BLKSIZE\nDBWD&X   DC    D'0'\nTGGG&X   EQU   *\n*----------------------------------------------------------------------\n*        PRIMARY ALLOCATION - FIELD\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALPRIME        KEY FOR PRIME ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD\n         CLI   0(R3),C','         MUST BE A COMMA\n         BE    PAAA&X             OK\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nPAAA&X   EQU   *\n         LA    R3,1(R3)           BUMP PAST COMMAS\n         CLI   0(R3),C'('         PAREN ?\n         BNE   PBBB&X             NO - OK\n         LA    R3,1(R3)           YES - BUMP PAST PAREN\nPBBB&X   EQU   *\n         XC    SPFTRT,SPFTRT      CLEAR TRT TABLE\n         MVI   SPFTRT+C',',X'FF'  COMMA\n         MVI   SPFTRT+C')',X'FF'  PAREN\n&LA      SETC  'L''&SPACE-4'\n         TRT   0(&LA,R3),SPFTRT   FIND COMMA OR PAREN\n         BNZ   PCCC&X             FOUND\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nPCCC&X   EQU   *\n         SR    R1,R3              LENGTH OF FIELD\n         BCTR  R1,R0              LENGTH-1\n         EX    R1,PACK&X          PACK THE PRIMARY\n         CVB   R2,DBWD&X\n         STCM  R2,7,S99TUPAR      MOVE PRIMARY\n         LA    R14,9(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         LA    R3,1(R1,R3)        BUMP TO NEXT SPACE PARM\n         CLC   0(2,R3),=C'))'     END OF SPACE PARMS ?\n         BE    SEND&X\n         CLI   0(R3),C')'         END OF ALLOCATION PARMS ?\n         BE    AEND&X             YES - CHECK FOR RLSE,CONTIG,ROUND\n*----------------------------------------------------------------------\n*        SECONDARY ALLOCATION - FIELD\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSECND        KEY FOR SECONDARY ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD\n         CLI   0(R3),C','         MUST BE A COMMA\n         BE    SAAA&X             OK\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nSAAA&X   EQU   *\n         LA    R3,1(R3)           BUMP PAST COMMA\n         XC    SPFTRT,SPFTRT      CLEAR TRT TABLE\n         MVI   SPFTRT+C',',X'FF'  COMMA\n         MVI   SPFTRT+C')',X'FF'  PAREN\n&LA      SETC  'L''&SPACE-8'\n         TRT   0(&LA,R3),SPFTRT   FIND COMMA OR PAREN\n         BNZ   SBBB&X             FOUND\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nSBBB&X   EQU   *\n         SR    R1,R3              LENGTH OF FIELD\n         BCTR  R1,R0              LENGTH-1\n         EX    R1,PACK&X          PACK THE PRIMARY\n         CVB   R2,DBWD&X\n         STCM  R2,7,S99TUPAR      MOVE BLKSIZE\n         LA    R14,9(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         LA    R3,1(R1,R3)        BUMP TO NEXT SPACE PARM\n         CLC   0(2,R3),=C'))'     END OF SPACE PARMS ?\n         BE    SEND&X\n         CLI   0(R3),C')'         END OF ALLOCATION PARMS ?\n         BE    AEND&X             YES - CHECK FOR RLSE,CONTIG,ROUND\n*----------------------------------------------------------------------\n*        DIRECTORY BLOCKS\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALDIR          KEY FOR DIRECTORY ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'3'     MOVE 3 TO TXT UNIT LNGTH FLD\n         CLI   0(R3),C','         MUST BE A COMMA\n         BE    DAAA&X             OK\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nDAAA&X   EQU   *\n         LA    R3,1(R3)           BUMP PAST COMMA\n         XC    SPFTRT,SPFTRT      CLEAR TRT TABLE\n         MVI   SPFTRT+C')',X'FF'  PAREN\n&LA      SETC  'L''&SPACE-10'\n         TRT   0(&LA,R3),SPFTRT   FIND PAREN\n         BNZ   DBBB&X             FOUND\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nDBBB&X   EQU   *\n         SR    R1,R3              LENGTH OF FIELD\n         BCTR  R1,R0              LENGTH-1\n         EX    R1,PACK&X          PACK THE DIRECTORY BLKS\n         CVB   R2,DBWD&X\n         STCM  R2,7,S99TUPAR      MOVE DIRECTORY BLOCKS\n         LA    R14,9(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         LA    R3,1(R1,R3)        BUMP TO NEXT SPACE PARM\n         CLC   0(2,R3),=C'))'     END OF SPACE PARMS ?\n         BE    SEND&X\nAEND&X   EQU   *\n*----------------------------------------------------------------------\n*        RLSE PARAMETER\n*----------------------------------------------------------------------\n         LA    R3,1(R3)           BUMP PAST PAREN\n         CLI   0(R3),C','         MUST BE A COMMA\n         BE    RAAA&X             OK\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nRAAA&X   EQU   *\n         LA    R3,1(R3)           BUMP PAST COMMA\n         LA    R1,0               SET DEFAULT LENGTH\n         CLI   0(R3),C','         OMITTED ?\n         BE    RCCC&X             YES - OK\n         CLC   0(4,R3),=C'RLSE'   RELEASE ?\n         BE    RBBB&X             OK\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nRBBB&X   EQU   *\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALRLSE         KEY FOR RLSE OPTION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n         LA    R14,4(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         LA    R1,4               SET DEFAULT LENGTH\nRCCC&X   EQU   *\n         LA    R3,0(R1,R3)        BUMP TO NEXT PARM\n*----------------------------------------------------------------------\n*        SPECIFIC FORM OF ALLOCATION - FIELD\n*----------------------------------------------------------------------\n         CLI   0(R3),C')'         END OF PARMS ?\n         BE    SEND&X\n         CLI   0(R3),C','         MUST BE A COMMA\n         BE    FAAA&X             OK\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nFAAA&X   EQU   *\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSPFRM        KEY FOR SPECIFIC FORM OF ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n         LA    R3,1(R3)\n         LA    R1,0               SET DEFAULT LENGTH\n         CLI   0(R3),C','         OMITTED ?\n         BE    FFFF&X             YES - OK\n         CLC   0(3,R3),=C'ALX'    ALX ?\n         BE    FDDD&X             YES - OK\n         CLC   0(4,R3),=C'MXIG'   MXIG ?\n         BE    FCCC&X             YES - OK\n         CLC   0(6,R3),=C'CONTIG' CONTIG ?\n         BE    FBBB&X             YES - OK\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nFBBB&X   EQU   *\n         LA    R1,6               LENGTH\n         MVI   S99TUPAR,X'08'     CONTIG\n         B     FEEE&X\nFCCC&X   EQU   *\n         LA    R1,4\n         MVI   S99TUPAR,X'04'     MXIG\n         B     FEEE&X\nFDDD&X   EQU   *\n         LA    R1,3\n         MVI   S99TUPAR,X'02'     ALX\nFEEE&X   EQU   *\n         LA    R14,7(R14)         BUMP TO NEXT TEXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\nFFFF&X   EQU   *\n         LA    R3,0(R1,R3)\n*----------------------------------------------------------------------\n*        ROUND PARAMETER - FIELD\n*----------------------------------------------------------------------\n         CLI   0(R3),C')'         END OF PARMS ?\n         BE    SEND&X\n         CLI   0(R3),C','         MUST BE A COMMA\n         BE    OAAA&X\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nOAAA&X   EQU   *\n         LA    R3,1(R3)           BUMP\n         CLC   0(5,R3),=C'ROUND'\n         BE    OBBB&X\n         BAL   R14,ERR1&SPF2\n         B     MZZZ&SPF1\nOBBB&X   EQU   *\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALROUND        KEY FOR ROUND ALLOCATION\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n         LA    R14,4(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\nSEND&X   EQU   *\n.DONE    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCSSOUT": {"ttr": 1033, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCSSOUT &SYSOUT=\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO TO PROCESS THE\n.*       'SYSOUT' KEYWORD\n.*\n.*       SYSOUT='(F,,973)'      ANY VALID SYSOUT PARAMETERS\n.*       BLKSIZE=NAME           NAME  DC  CL8'(A,INTRDR)'\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         LCLA  &X,&LL,&D\n         LCLC  &LIT,&LA\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n*----------------------------------------------------------------------\n*        SYSOUT CLASS\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSYSOU        KEY FOR SYSOUT CLASS\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         AIF   ('&SYSOUT'(1,1) EQ '''').AAA010\n         CLI   &SYSOUT,C' '       ANY SPECIFIED ?\n         BNH   Z030&X             NO - SKIP IT\n         LA    R3,&SYSOUT         START OF FIELD\n         CLI   0(R3),C'('         IN PARENS ?\n         BNE   A010&X             NO - OK\n         LA    R3,1(R3)           YES - SKIP PAREN\nA010&X   EQU   *\n         CLI   0(R3),C'*'         SYSOUT=* ?\n         BNE   B010&X             NO - OK\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n         LA    R14,4(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         B     C010&X\nB010&X   EQU   *\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n         MVC   S99TUPAR(1),0(R3)  SYSOUT CLASS\n         LA    R14,7(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\nC010&X   EQU   *\n         AGO   .ZZZ010\n.AAA010  ANOP\n&D       SETA  2\n         AIF   ('&SYSOUT'(&D,1) NE '(').BBB010\n&D       SETA  &D+1\n.BBB010  ANOP\n&LIT     SETC  '&SYSOUT'(&D,1)\n&D       SETA  &D+1\n         AIF   ('&LIT' NE '*').CCC010\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n         LA    R14,4(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n         AGO   .ZZZ010\n.CCC010  ANOP\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD\n         MVI   S99TUPAR,C'&LIT'\n         LA    R14,7(R14)         BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n.ZZZ010  ANOP\n         AIF   ('&SYSOUT'(1,1) EQ '''').AAA020\n         AGO   .BBB020\n.AAA020  ANOP\n         AIF   ('&SYSOUT'(&D,1) EQ '''').ZZZ030\n         AIF   (K'&SYSOUT LE &D).ZZZ030\n.BBB020  ANOP\n*----------------------------------------------------------------------\n*        SYSOUT PROGRAM NAME\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSPGNM        KEY FOR SYSOUT PROGRAM NAME\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'8'     MOVE 8 TO TXT UNIT LNGTH FLD\n         AIF   ('&SYSOUT'(1,1) EQ '''').CCC020\n         LA    R3,1(R3)           BUMP PAST CLASS\n         CLI   0(R3),C')'         END OF DATA ?\n         BE    Z030&X\n         LA    R3,1(R3)           BUMP PAST COMMA\n         CLI   0(R3),C','         DOUBLE COMMA ?\n         BE    Z020&X\n&LA      SETC  'L''&SYSOUT'\n         C     R3,=A(&SYSOUT+&LA)  END OF FIELD ?\n         BNL   Z030&X\n         XC    SPFTRT,SPFTRT\n         MVI   SPFTRT+C' ',X'FF'\n         MVI   SPFTRT+C',',X'FF'\n         MVI   SPFTRT+C')',X'FF'\n         TRT   0(8,R3),SPFTRT\n         BNZ   A020&X\n         LA    R1,8(R3)           MAX NAME LENGTH\nA020&X   EQU   *\n         SR    R1,R3\n         MVC   S99TUPAR(8),=8C' '\n         EX    R1,MVC1&X\n         B     B020&X\nMVC1&X   MVC   S99TUPAR(0),&SYSOUT+2\n         AGO   .YYY020\n.CCC020  ANOP\n&LL      SETA  &D\n         AIF   ('&SYSOUT'(&D,1) EQ ',').XXX020\n         MNOTE 8,'INVALID SYSOUT LITERAL'\n         MEXIT\n.XXX020  ANOP\n&LL      SETA  &D+1\n.DDD020  ANOP\n&D       SETA  &D+1\n         AIF   ('&SYSOUT'(&D,1) EQ ',').ZZZ020\n         AIF   ('&SYSOUT'(&D,1) EQ '''').EEE020\n         AIF   ('&SYSOUT'(&D,1) EQ ')').EEE020\n         AGO   .DDD020\n.EEE020  ANOP\n&LL      SETA  &D-&LL\n&D       SETA  &D-&LL\n&LIT     SETC  '&SYSOUT'(&D,&LL)\n         MVC   S99TUPAR(8),=CL8'&LIT'\n&D       SETA  &D+&LL\n&LL      SETA  &D\n.YYY020  ANOP\nB020&X   EQU   *\n         LA    R14,14(R14)        BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n.ZZZ020  ANOP\n         AIF   ('&SYSOUT'(1,1) EQ '''').AAA030\n         LA    R3,1(R1,R3)        BUMP TO NEXT SYSOUT PARM\nZ020&X   EQU   *\n         AGO   .BBB030\n.AAA030  ANOP\n         AIF   (K'&SYSOUT LE &LL).ZZZ030\n         AIF   ('&SYSOUT'(&D,1) EQ ')').ZZZ030\n.BBB030  ANOP\n&D       SETA  &D+1\n&LL      SETA  &D\n*----------------------------------------------------------------------\n*        SYSOUT FORM NUMBER\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DALSFMNO        KEY FOR FORM\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD\n         MVC   S99TULNG,=H'4'     MOVE 4 TO TXT UNIT LNGTH FLD\n         AIF   ('&SYSOUT'(1,1) EQ '''').CCC030\n         LA    R3,1(R3)           BUMP PAST CLASS\n         CLI   0(R3),C')'         END OF DATA ?\n         BE    Z030&X\n&LA      SETC  'L''&SYSOUT'\n         C     R3,=A(&SYSOUT+&LA)  END OF FIELD ?\n         BNL   Z030&X\n         XC    SPFTRT,SPFTRT\n         MVI   SPFTRT+C' ',X'FF'\n         MVI   SPFTRT+C',',X'FF'\n         MVI   SPFTRT+C')',X'FF'\n         TRT   0(4,R3),SPFTRT\n         BNZ   A030&X\n         LA    R1,4(R3)\nA030&X   EQU   *\n         SR    R1,R3              LENGTH OF PARM\n         BCTR  R1,R0              DECR FOR EXECUTE\n         MVC   S99TUPAR(4),=4C' '\n         EX    R1,MVC2&X\n         B     B030&X\nMVC2&X   MVC   S99TUPAR(0),0(R3)\n         AGO   .YYY030\n.CCC030  ANOP\n         AIF   ('&SYSOUT'(&D,1) EQ '''').DDD030\n         AIF   ('&SYSOUT'(&D,1) EQ ')').DDD030\n&D       SETA  &D+1\n         AGO   .CCC030\n.DDD030  ANOP\n&LL      SETA  &D-&LL\n&D       SETA  &D-&LL\n&LIT     SETC  '&SYSOUT'(&D,&LL)\n         MVC   S99TUPAR(4),=CL4'&LIT'\n.YYY030  ANOP\nB030&X   EQU   *\n         LA    R14,10(R14)        BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)         BUMP TO NEXT TXT UNIT PTR\n.ZZZ030  ANOP\nZ030&X   EQU   *\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALCUNAL": {"ttr": 1283, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ALCUNAL\n.*---------------------------------------------------------------------\n.*       THIS MACRO IS CALLED BY THE 'SPFALLOC' MACRO FOR ALL\n.*       DE-ALLOCATION REQUESTS.\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n*----------------------------------------------------------------------\n*        UNALLOCATE EVEN IF PERM ATTRIBUTE IS ON\n*----------------------------------------------------------------------\n         STCM  R14,15,S99TUPTR    TEXT UNIT POINTER\n         LA    R1,DUNUNALC        KEY FOR UNALC\n         STCM  R1,3,S99TUKEY      PUT IN TEXT UNIT KEY FIELD\n         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD\n         LA    R14,4(R14)          BUMP TO NEXT TXT UNIT\n         LA    R15,4(R15)          BUMP TO NEXT TXT UNIT PTR\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFALLOC": {"ttr": 15, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFALLOC &FUNC,&DD=,&DSN=,&MBR=,&DISP=,&SPACE=,&VOL=,&UNIT=,  +\n               &RECFM=,&BLKSIZE=,&LRECL=,&SYSOUT=,&COPIES=,&FCB=,      +\n               &DEST=,&FREE=,&TERM=,&DUMMY=,&RETDD=,&MODEL=,           +\n               &CCDD=,&RLSE=,&HOLD=\n         GBLA  &SPF1\n         GBLC  &XXXFUNC                                     RJW\n         LCLA  &X\n         LCLC  &REGD\n&XXXFUNC SETC  '&FUNC'                                      RJW\n&X       SETA  &SYSNDX\n&SPF1    SETA  &SYSNDX\n&NAME    DS    0H\n*----------------------------------------------------------------------\n*   R2 - TRT\n*   R3 - FIELD POINTER\n*   R4 - DYNAM REQUEST BLOCK\n*   R14 - DYNAMIC TEXT UNITS\n*   R15 - DYNAMIC TEXT POINTERS\n*        INITIALIZATION\n*----------------------------------------------------------------------\n         STM   R2,R5,SPFREGS      SAVE REGISTERS\n         AIF   (T'&DSN EQ 'O').REG1\n         AIF   ('&DSN'(1,1) NE '(').REG1\n&REGD    SETC  '&DSN'(2,K'&DSN-2)\n         ST    &REGD,SPFREGS+16\n.REG1    ANOP\n         AIF   (T'&MBR EQ 'O').REG2\n         AIF   ('&MBR'(1,1) NE '(').REG2\n&REGM    SETC  '&MBR'(2,K'&MBR-2)\n         ST    &REGM,SPFREGS+20\n.REG2    ANOP\n         LA    R0,SPFDYNAM        ADDR OF WORKAREA\n         LA    R1,SPFDYNLL        LENGTH OF WORKAREA\n         LA    R14,*              DUMMY ADDR\n         LA    R15,0              LENGTH AND PAD CHARACTER\n         MVCL  R0,R14             CLEAR WORKAREA\n         LA    R15,SPFDYNAM       ADDR OF DYN WORKAREA\n         USING S99RBP,R15         REQ BLK POINTER DSECT\n         LA    R4,S99RBP+4        ADDRESSABILITY OF RB DSECT\n         USING S99RB,R4           RB DSECT\n         ST    R4,S99RBPTR        MAKE RBPTR POINT TO RB\n         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR\n         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD\n         LA    R15,S99RB+RBLEN    POINT BEYOND RB (1ST TEXT PTR)\n         USING S99TUPL,R15        ADDRESSABILITY OF TEXT UNIT POINTERS\n         ST    R15,S99TXTPP       INIT TEXT PTR IN RB\n         LA    R14,S99TUPL+128    POINT BEYOND LAST TXT PTR (1ST TXT\n         USING S99TUNIT,R14       ADDRESSABILITY OF TEXT UNITS\n*----------------------------------------------------------------------\n*        SET FUNCTION\n*----------------------------------------------------------------------\n         AIF   ('&FUNC' EQ 'A').AAA\n         AIF   ('&FUNC' EQ 'D').BBB\n         AIF   ('&FUNC' EQ 'C').CCC\n         MNOTE 8,'INVALID FUNCTION CODE'\n         MEXIT\n.AAA     ANOP\n         MVI   S99VERB,S99VRBAL   SET VERB CODE TO ALLOCATE\n         AGO   .ALLOC\n.BBB     ANOP\n         MVI   S99VERB,S99VRBUN   SET VERB CODE TO DE-ALLOCATE\n         ALCUNAL\n         AGO   .ALLOC\n.CCC     ANOP\n         MVI   S99VERB,S99VRBCC   SET VERB CODE TO CONCATENATE\n         AGO   .CONCAT\n.ALLOC   ANOP\n         AIF   (T'&DD EQ 'O').NODD\n         ALCDD DD=&DD\n.NODD    ANOP\n         AIF   (T'&DSN EQ 'O').NODSN\n         ALCDSN DSN=&DSN\n.NODSN   ANOP\n         AIF   (T'&MBR EQ 'O').NOMBR\n         ALCMBR MBR=&MBR\n.NOMBR   ANOP\n         AIF   (T'&DISP EQ 'O').NODISP\n         ALCDISP DISP=&DISP\n.NODISP  ANOP\n         AIF   (T'&SPACE EQ 'O').NOSPACE\n         ALCSPACE SPACE=&SPACE\n.NOSPACE ANOP\n         AIF   (T'&VOL EQ 'O').NOVOL\n         ALCVOL VOL=&VOL\n.NOVOL   ANOP\n         AIF   (T'&UNIT EQ 'O').NOUNIT\n         ALCUNIT UNIT=&UNIT\n.NOUNIT  ANOP\n         AIF   (T'&BLKSIZE EQ 'O').NOBLKSZ\n         ALCBLKSZ BLKSIZE=&BLKSIZE\n.NOBLKSZ ANOP\n         AIF   (T'&LRECL EQ 'O').NOLRECL\n         ALCLRECL LRECL=&LRECL\n.NOLRECL ANOP\n         AIF   (T'&RECFM EQ 'O').NORECFM\n         ALCRECFM RECFM=&RECFM\n.NORECFM ANOP\n         AIF   (T'&SYSOUT EQ 'O').NOSOUT\n         ALCSSOUT SYSOUT=&SYSOUT\n.NOSOUT  ANOP\n         AIF   (T'&DEST EQ 'O').NODEST\n         ALCDEST DEST=&DEST\n.NODEST  ANOP\n         AIF   (T'&COPIES EQ 'O').NOCOPY\n         ALCCOPYS COPIES=&COPIES\n.NOCOPY  ANOP\n         AIF   (T'&FCB EQ 'O').NOFCB\n         ALCFCB FCB=&FCB\n.NOFCB   ANOP\n         AIF   (T'&FREE EQ 'O').NOFREE\n         ALCFREE FREE=&FREE\n.NOFREE  ANOP\n         AIF   (T'&TERM EQ 'O').NOTERM\n         ALCTERM TERM=&TERM\n.NOTERM  ANOP\n         AIF   (T'&DUMMY EQ 'O').NODUMMY\n         ALCDUMMY DUMMY=&DUMMY\n.NODUMMY ANOP\n         AIF   (T'&RETDD EQ 'O').NORETDD\n         ALCRETDD RETDD=&RETDD\n.NORETDD ANOP\n         AIF   (T'&MODEL EQ 'O').NOMODEL\n         ALCMODEL MODEL=&MODEL\n.NOMODEL ANOP\n         AIF   (T'&RLSE EQ 'O').NORLSE\n         ALCRLSE RLSE=&RLSE\n.NORLSE  ANOP\n         AIF   (T'&HOLD EQ 'O').NOHOLD\n         ALCHOLD HOLD=&HOLD\n.NOHOLD  ANOP\n         AGO   .DDD\n.CONCAT  ANOP\n         AIF   (T'&CCDD EQ 'O').NOCCDD\n         ALCCC CCDD=&CCDD\n         AGO   .DDD\n.NOCCDD  ANOP\n         AIF   (T'&CCDSN EQ 'O').DDD\n         ALCCC CCDSN=&CCDSN\n         AGO   .DDD\n.DDD     ANOP\n         S     R15,=F'4'\n         OI    S99TUPTR,X'80'     END OF LIST\n         LA    R1,SPFDYNAM\n         MVC   SPFDYN15,=4C'0'    INITIALIZE\n         MVC   SPFDYNER,=4C'0'    INITIALIZE\n         MVC   SPFDYNIN,=4C'0'    INITIALIZE\n         SVC   99\n         ALCERR &FUNC,DD=&DD,DSN=&DSN\n.EEE     ANOP\n         AIF   (T'&RETDD EQ 'O').ZZZ\n         AIF   ('&RETDD'(1,1) EQ '(').FFF\n         MVC   &RETDD.(8),0(R5)   MOVE RETURNED DDNAME\n         AGO   .ZZZ\n.FFF     ANOP\n&REGD    SETC  '&RETDD'(2,K'&RETDD-2)\n         MVC   0(8,&REGD),0(R5)\n.ZZZ     ANOP\nMZZZ&SPF1 EQU   *\n         LM    R2,R5,SPFREGS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFBRWSE": {"ttr": 19, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFBRWSE &IDS,&MBR,&VOL\n.*---------------------------------------------------------------------\n.*       THIS MACRO INVOKES SPF BROWSE FOR A DATA SET OR DATA SET AND\n.*       MEMBER.\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n&NAME    DS    0H\n         LCLC  &LIT,&REG,&LA\n         LCLA  &X\n&X       SETA  &SYSNDX\n         MVC   SPFDYNAM,BLANKS         TO BLANKS\n         MVI   SPFDYNAM,X'7D'          ADD A QUOTE\n         AIF   ('&IDS'(1,1) EQ '''').AAA\n         AIF   ('&IDS'(1,1) EQ '(').REG1\n&LA      SETC  'L''&IDS'\n         MVC   SPFDYNAM+1(&LA),&IDS    MOVE DSN\n         AGO   .BBB\n.AAA     ANOP\n&LIT     SETC  '&IDS'(2,K'&IDS-2)\n         MVC   SPFDYNAM+1(54),=CL54'&LIT' MOVE DSN\n         AGO   .BBB\n.REG1    ANOP\n&REG     SETC  '&IDS'(2,K'&IDS-2)\n         MVC   SPFDYNAM+1(54),0(&REG)  MOVE DSN\n.BBB     ANOP\n         LA    R14,SPFDYNAM            START OF FIELD\n         XC    SPFTRT,SPFTRT           CLEAR TRT TABLE\n         MVI   SPFTRT+C' ',X'FF'       SET FOR A BLANK\n         TRT   0(56,R14),SPFTRT        FIND END\n         BNZ   MAAA&X                  FOUND IT\n         LA    R1,55(R14)              SET DEFAULT\nMAAA&X   EQU   *\n.*-------------------------------------------------------------------\n         AIF   (T'&MBR EQ 'O').EEE\n         MVI   0(R1),C'('              ADD A PAREN\n         LA    R14,1(R1)               BUMP\n         AIF   ('&MBR'(1,1) EQ '''').CCC\n         AIF   ('&MBR'(1,1) EQ '(').REG2\n         CLI   &MBR,C' '               ANY SPECIFIED ?\n         BNH   MCCC&X                  NO - SKIP IT\n&LA      SETC  'L''&MBR'\n         MVC   0(&LA,R14),&MBR         MOVE MBR NAME\n         AGO   .DDD\n.CCC     ANOP\n&LIT     SETC  '&MBR'(2,K'&MBR-2)\n         MVC   0(8,R14),=CL8'&LIT'     MOVE MBR NAME\n         AGO   .DDD\n.REG2    ANOP\n&REG     SETC  '&MBR'(2,K'&MBR-2)\n         MVC   0(8,R14),0(&REG)        MOVE MBR NAME\n.DDD     ANOP\n         TRT   0(8,R14),SPFTRT         FIND END\n         BNZ   MBBB&X                  FOUND IT\n         LA    R1,8(R14)               SET DEFAULT\nMBBB&X   EQU   *\n         MVI   0(R1),C')'              ADD A PAREN\n         LA    R1,1(R1)                BUMP\nMCCC&X   EQU   *\n.EEE     ANOP\n         MVI   0(R1),X'7D'             ADD ENDING QUOTE\n.*-------------------------------------------------------------------\n         MVC   SPFVOL,BLANKS\n         AIF   (T'&VOL EQ 'O').FFF\n         MVC   SPFVOL,&VOL\n.FFF     ANOP\n         CALL  ISPLINK,(BROWSE,SPFDYNAM,SPFVOL),VL\n         B     MZZZ&X                  GO AROUND CONSTANT\nMZZZ&X   DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFCMDS": {"ttr": 21, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFCMDS &TABLES=NO,&FILES=NO,&PRINT=NO,&DCBD=PS,&DSCB1=SEARCH,+\n               &ENQDEQ=Y,&DSCB=YES\n.*---------------------------------------------------------------------\n.*       THIS MACRO GENERATES CONSTANTS AND WORKAREAS USED BY SPF\n.*       SERVICES AND THE 'SPF.....' MACROS.\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         LTORG\n         AIF   ('&ENQDEQ' EQ 'ONLY').ED1\n&NAME    DS    0D\nSPFA     EQU   *\n*        DISPLAY SERVICES\nDISPLAY  DC    CL8'DISPLAY'\nTBDISPL  DC    CL8'TBDISPL'\n         AIF   ('&TABLES' EQ 'NO').NT\n*        TABLE SERVICES - GENERAL\nTBCREATE DC    CL8'TBCREATE'\nTBOPEN   DC    CL8'TBOPEN'\nTBQUERY  DC    CL8'TBQUERY'\nTBSAVE   DC    CL8'TBSAVE'\nTBCLOSE  DC    CL8'TBCLOSE'\nTBEND    DC    CL8'TBEND'\nTBERASE  DC    CL8'TBERASE'\n*        TABLE SERVICES - ROW OPERATIONS\nTBADD    DC    CL8'TBADD'\nTBDELETE DC    CL8'TBDELETE'\nTBGET    DC    CL8'TBGET'\nTBPUT    DC    CL8'TBPUT'\nTBMOD    DC    CL8'TBMOD'\nTBEXIST  DC    CL8'TBEXIST'\nTBSCAN   DC    CL8'TBSCAN'\nTBSARG   DC    CL8'TBSARG'\nTBTOP    DC    CL8'TBTOP'\nTBBOTTOM DC    CL8'TBBOTTOM'\nTBSKIP   DC    CL8'TBSKIP'\nTBVCLEAR DC    CL8'TBVCLEAR'\n.NT      ANOP\n         AIF   ('&FILES' EQ 'NO').NF\n*        FILE TAILORING SERVICES\nFTOPEN   DC    CL8'FTOPEN'\nFTINCL   DC    CL8'FTINCL'\nFTCLOSE  DC    CL8'FTCLOSE'\nFTERASE  DC    CL8'FTERASE'\n.NF      ANOP\n         DS    0H\n*        VARIABLE SERVICES\nVGET     DC    CL8'VGET'\nVPUT     DC    CL8'VPUT'\nVDEFINE  DC    CL8'VDEFINE'\nVDELETE  DC    CL8'VDELETE'\nVCOPY    DC    CL8'VCOPY'\nVREPLACE DC    CL8'VREPLACE'\nVRESET   DC    CL8'VRESET'\n*        OTHER SERVICES\nSELECT   DC    CL8'SELECT'\nCONTROL  DC    CL8'CONTROL'\nBROWSE   DC    CL8'BROWSE'\nEDIT     DC    CL8'EDIT'\nLOG      DC    CL8'LOG'\n*        FUNCTIONS/MODES\nASIS     DC    CL8'ASIS'\nCANCEL   DC    CL8'CANCEL'\nDISABLE  DC    CL8'DISABLE'\nENABLE   DC    CL8'ENABLE'\nEND      DC    CL8'END'\nENTER    DC    CL8'ENTER'\nERRORS   DC    CL8'ERRORS'\nLINE     DC    CL8'LINE'\nLOCATE   DC    CL8'LOCATE'\nMOVE     DC    CL8'MOVE'\nNEWCOPY  DC    CL8'NEWCOPY'\nNOFT     DC    CL8'NOFT'\nNONDISPL DC    CL8'NONDISPL'\nNOWRITE  DC    CL8'NOWRITE'\nPROFILE  DC    CL8'PROFILE'\nREFRESH  DC    CL8'REFRESH'\nREPLACE  DC    CL8'REPLACE'\nREPLCOPY DC    CL8'REPLCOPY'\nRETURN   DC    CL8'RETURN'\nSHARED   DC    CL8'SHARED'\nSPLIT    DC    CL8'SPLIT'\nSM       DC    CL8'SM'\nTEMP     DC    CL8'TEMP'\nWRITE    DC    CL8'WRITE'\n*        FORMATS\nCHAR     DC    CL8'CHAR'\nFIXED    DC    CL8'FIXED'\nBIT      DC    CL8'BIT'\nHEX      DC    CL8'HEX'\n*\n*        PRE-DEFINED FIELDS FOR CALLS TO ISPLINK\n*\nPANEL    DC    CL8' '\nPROC     DC    CL8' '\nMSG      DC    CL8' '\nCURSOR   DC    CL8' '\n*----------------------------------------------------------------------\n*        WORK AREAS USED BY OTHER SPF MACROS\n*----------------------------------------------------------------------\n         AIF   ('&PRINT' EQ 'YES').GEN\n         PUSH  PRINT\n         PRINT NOGEN\n.GEN     ANOP\nSPFDBWRD DC    D'0'           WORK AREA\nSPFRC    DC    F'0'           WORK AREA\n.ED1     ANOP\nSPFEDIT  DC    CL8'SPFEDIT'   QNAME FOR SPF ENQ/DEQ\nSPFDSN   DC    CL8'SPFDSN'    QNAME FOR SPF ENQ/DEQ\n         AIF   ('&ENQDEQ' EQ 'ONLY').ED2\n         AIF   ('&DSCB' EQ 'NO').ED3\n*----------------------------------------------------------------------\nSPFDSCB  DS    0D\n         AIF   ('&DSCB1' EQ 'SEEK').SEEK1\n         ORG   SPFDSCB-44         LINE UP IECSDSL1 MACRO WITH THE AREA\n.SEEK1   ANOP\n         IECSDSL1 (1)\n         AIF   ('&DSCB1' EQ 'SEEK').SEEK2\n         ORG   IECSDSL1+44\n.SEEK2   ANOP\nSPFDSCBX DC    XL256'00'          FIRST 256 BYTES OF DSCB AREA\nSPFDSCBY DC    XL9'00'            LAST 9 BYTES OF DSCB AREA\n*----------------------------------------------------------------------\nSPFBLIST DS    0F                 BLDL LIST\n         DC    H'1'               1 ENTRY\n         DC    H'58'              AREA LENGTH\nSPFBMBR  DC    CL8' '             BLDL MEMBER NAME\nSPFBAREA DC    XL50'00'           BLDL WORK AREA\nSPFBDCB  DCB   DDNAME=X,DSORG=PO,MACRF=R\n*----------------------------------------------------------------------\nSPFREGS  DC    16F'0'\n*----------------------------------------------------------------------\nSPFTRT   DC    XL256'00'\n*----------------------------------------------------------------------\n.ED2     ANOP\nBLANKS   DC    CL256' '\n         DS    0H\nSPFDYNAM DC    2XL256'00'\n         AIF   ('&ENQDEQ' EQ 'ONLY').ED3\nSPFDYNLL EQU   512\nSPFDYN15 DC    F'0'           R15 FROM DYNAMIC ALLOCATION\nSPFDYNER DC    F'0'           DYN ERROR FROM S99ERROR\nSPFDYNIN DC    F'0'           DYN INFO FROM S99INFO\n*----------------------------------------------------------------------\nSPFVOL   DC    CL6' '         VOL SER NUMBER\nSPFDEVT  DC    XL4'00'        UCBTYPE FIELD\n*----------------------------------------------------------------------\nSPFB     EQU   *\nSPFLEN   EQU   (SPFB-SPFA)\n         DCBD  DSORG=&DCBD\n         IEFZB4D0\n         IEFZB4D2\nRBLEN    EQU   (S99RBEND-S99RB)\n&SYSECT  CSECT\n         AIF   ('&PRINT' EQ 'YES').MEND\n         POP   PRINT\n.ED3     ANOP\n.MEND    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFEXIT": {"ttr": 260, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   SPFEXIT &RC\n&LABEL   DS    0H\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').NORC\n         LA    R15,&RC             SET RETURN CODE\n.NORC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFINIT": {"ttr": 10, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   SPFINIT  &USER=N,&TIME=N,&TERM=N,&TABLES=N\n.*---------------------------------------------------------------------\n.*       THIS MACRO PERFORMS VARIOUS INITIALIZATION FUNCTIONS FOR AN\n.*       SPF DIALOG MANAGER.\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n         LCLA  &N,&D,&B,&X\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*---------------------------------------------------------------------\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n.*---------------------------------------------------------------------\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n&N       SETA  N'&SYSLIST\n&D       SETA  1\n&B       SETA  0\n&X       SETA  &SYSNDX\n         AIF   (&N NE 0).AAA\n         MNOTE 8,'BASE REGISTER MISSING'\n         MEXIT\n.AAA     ANOP\n         USING &LABEL,&SYSLIST(&D)\n         LR    &SYSLIST(&D),R15    FIRST BASE REGISTER\n.BBB     ANOP\n&B       SETA  &B+4096\n&D       SETA  &D+1\n         AIF   (&D EQ &N+1).CCC\n         USING &LABEL+&B,&SYSLIST(&D)\n         LA    &SYSLIST(&D),2048(&SYSLIST(&D-1))\n         LA    &SYSLIST(&D),2048(&SYSLIST(&D))\n         AGO   .BBB\n.CCC     CNOP  0,4\n         B     *+76\nSAVE&X   DC    18F'0'\n         ST    R13,SAVE&X+4        SAVE BACK CHAIN\n         MVC   8(4,R13),=A(SAVE&X) SET FORWARD CHAIN\n         LA    R13,SAVE&X          THIS SAVE AREA\n.*---------------------------------------------------------------------\n.*       STANDARD VARIABLES\n.*---------------------------------------------------------------------\n         SPFVDEF 24,(SMSG)\n         SPFVDEF 72,(LMSG)\n         SPFVDEF 60,(ZCMD)\n         SPFVGET (ZCMD),SHARED\n         AIF   ('&USER' EQ 'N').NOUSER\n.*---------------------------------------------------------------------\n.*       USER RELATED VARIABLES   CODE:  USER=Y\n.*---------------------------------------------------------------------\n         SPFVDEF 44,(ZTEMPF)\n         SPFVDEF 8,(ZPREFIX,ZUSER,ZLOGON)\n         SPFVGET (ZTEMPF,ZPREFIX,ZUSER,ZLOGON),SHARED\n.NOUSER  ANOP\n         AIF   ('&TIME' EQ 'N').NOTIME\n.*---------------------------------------------------------------------\n.*       DATE/TIME VARIABLES      CODE:  TIME=Y\n.*---------------------------------------------------------------------\n         SPFVDEF 8,(ZDATE)\n         SPFVDEF 6,(ZJDATE)\n         SPFVDEF 5,(ZTIME)\n         SPFVDEF 2,(ZMONTH,ZDAY,ZYEAR)\n         SPFVGET (ZDATE,ZJDATE,ZTIME,ZMONTH,ZDAY,ZYEAR),SHARED\n.NOTIME  ANOP\n         AIF   ('&TERM' EQ 'N').NOTERM\n.*---------------------------------------------------------------------\n.*       TERMINAL VARIABLES       CODE:  TERM=Y\n.*---------------------------------------------------------------------\n         SPFVDEF 4,(ZTERM)\n         SPFVDEF 2,(ZKEYS)\n         SPFVGET (ZTERM,ZKEYS),SHARED\n         SPFVDEF 48,(ZPF13,ZPF14,ZPF15,ZPF16,ZPF17,ZPF18,ZPF19,ZPF20,  +\n               ZPF21,ZPF22,ZPF23,ZPF24)\n         SPFVGET (ZPF13,ZPF14,ZPF15,ZPF16,ZPF17,ZPF18,ZPF19,ZPF20,     +\n               ZPF21,ZPF22,ZPF23,ZPF24),SHARED\n*        CLC   ZKEYS,=F'12'\n*        BE    MAAA&X\n         SPFVDEF 48,(ZPF01,ZPF02,ZPF03,ZPF04,ZPF05,ZPF06,ZPF07,ZPF08,  +\n               ZPF09,ZPF10,ZPF11,ZPF12)\n         SPFVGET (ZPF01,ZPF02,ZPF03,ZPF04,ZPF05,ZPF06,ZPF07,ZPF08,     +\n               ZPF09,ZPF10,ZPF11,ZPF12),SHARED\n.NOTERM  ANOP\n         AIF   ('&TABLES' EQ 'N').NOTBL\n.*---------------------------------------------------------------------\n.*       TABLE VARIABLES          CODE:  TABLES=Y\n.*---------------------------------------------------------------------\n         SPFVDEF 4,(ZTDTOP),TYPE=FIXED\n.*---------------------------------------------------------------------\n.NOTBL   ANOP\nMAAA&X   DS    0H\n         L     R1,SAVE&X+4         PICK UP BACK CHAIN\n         LM    R0,R1,20(R1)        RESTORE PARAMETER REGISTERS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFSPLAY": {"ttr": 262, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFSPLAY &PAN,&MSG,&CUR,&ZERO,&NZERO\n.*---------------------------------------------------------------------\n.*       THIS MACRO WILL INVOKE THE SPF DISPLAY SERVICE FOR PANELS,\n.*       AND/OR MESSAGES\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n&NAME    DS    0H\n         LCLC  &P,&M,&C,&LIT\n         AIF   (T'&CUR EQ 'O').NOCUR\n         AIF   ('&CUR'(1,1) NE '''').AAACUR\n&LIT     SETC  '&CUR'(2,K'&CUR-2)\n         MVC   CURSOR,=CL8'&LIT'\n         AGO   .BBBCUR\n.AAACUR  ANOP\n         AIF   ('&CUR' EQ 'CURSOR').BBBCUR\n         MVC   CURSOR,&CUR\n.BBBCUR  ANOP\n&C       SETC  'CURSOR'\n         AIF   (T'&PAN EQ 'O').EEECUR\n         AIF   ('&PAN'(1,1) NE '''').CCCCUR\n&LIT     SETC  '&PAN'(2,K'&PAN-2)\n         MVC   PANEL,=CL8'&LIT'\n         AGO   .DDDCUR\n.CCCCUR  ANOP\n         AIF   ('&PAN' EQ 'PANEL').DDDCUR\n         MVC   PANEL,&PAN\n.DDDCUR  ANOP\n&P       SETC  'PANEL'\n.EEECUR  ANOP\n         AIF   (T'&MSG EQ 'O').HHHCUR\n         AIF   ('&MSG'(1,1) NE '''').FFFCUR\n&LIT     SETC  '&MSG'(2,K'&MSG-2)\n         MVC   MSG,=CL8'&LIT'\n         AGO   .GGGCUR\n.FFFCUR  ANOP\n         AIF   ('&MSG' EQ 'MSG').GGGCUR\n         MVC   MSG,&MSG\n.GGGCUR  ANOP\n&M       SETC  'MSG'\n.HHHCUR  ANOP\n         CALL  ISPLINK,(DISPLAY,&P,&M,&C),VL\n         AGO   .XXX\n.*------------------------------------------------------------------\n.NOCUR   ANOP\n         AIF   (T'&MSG EQ 'O').NOMSG\n         AIF   ('&MSG'(1,1) NE '''').AAAMSG\n&LIT     SETC  '&MSG'(2,K'&MSG-2)\n         MVC   MSG,=CL8'&LIT'\n         AGO   .BBBMSG\n.AAAMSG  ANOP\n         AIF   ('&MSG' EQ 'MSG').BBBMSG\n         MVC   MSG,&MSG\n.BBBMSG  ANOP\n&M       SETC  'MSG'\n         AIF   (T'&PAN EQ 'O').EEEMSG\n         AIF   ('&PAN'(1,1) NE '''').CCCMSG\n&LIT     SETC  '&PAN'(2,K'&PAN-2)\n         MVC   PANEL,=CL8'&LIT'\n         AGO   .DDDMSG\n.CCCMSG  ANOP\n         AIF   ('&PAN' EQ 'PANEL').DDDMSG\n         MVC   PANEL,&PAN\n.DDDMSG  ANOP\n&P       SETC  'PANEL'\n.EEEMSG  ANOP\n         CALL  ISPLINK,(DISPLAY,&P,&M),VL\n         AGO   .XXX\n.*------------------------------------------------------------------\n.NOMSG   ANOP\n         AIF   (T'&PAN EQ 'O').NOPAN\n         AIF   ('&PAN'(1,1) NE '''').AAAPAN\n&LIT     SETC  '&PAN'(2,K'&PAN-2)\n         MVC   PANEL,=CL8'&LIT'\n         AGO   .BBBPAN\n.AAAPAN  ANOP\n         AIF   ('&PAN' EQ 'PANEL').BBBPAN\n         MVC   PANEL,&PAN\n.BBBPAN  ANOP\n&P       SETC  'PANEL'\n         CALL  ISPLINK,(DISPLAY,&P),VL\n         AGO   .XXX\n.NOPAN   ANOP\n         MNOTE 8,'*** PANEL, MESSAGE, AND CURSOR NOT SPECIFIED'\n         AGO   .ZZZ\n.XXX     ANOP\n         LTR   R15,R15\n         AIF   ('&NZERO' EQ '').YYY\n         BNZ   &NZERO\n.YYY     ANOP\n         AIF   ('&ZERO' EQ '').ZZZ\n         BZ    &ZERO\n.ZZZ     ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFSUB": {"ttr": 265, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFSUB  &DSN,&MBR\n.*---------------------------------------------------------------------\n.*       THIS MACRO WILL INVOKE THE TSO SUBMIT COMMAND FOR A\n.*       SEQUENTIAL DATA SET OR A PDS AND MEMBER.\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n&NAME    DS    0H\n         LCLA  &X\n&X       SETA  &SYSNDX\n*----------------------------------------------------------------------\n*        SUBMIT THE JOB\n*----------------------------------------------------------------------\n         MVC   SPFDYNAM(256),BLANKS   SET TO BLANKS\n         LA    R14,SPFDYNAM\n         MVC   0(11,R14),=C'CMD(SUBMIT '\n         LA    R14,11(R14)            BUMP\n         MVI   0(R14),X'7D'           ADD A QUOTE\n         LA    R14,1(R14)             BUMP\n         MVC   0(44,R14),&DSN         MOVE THE DSN\n         AIF   (T'&MBR EQ 'O').AAA\n         XC    SPFTRT,SPFTRT          CLEAR\n         MVI   SPFTRT+C' ',X'FF'      SET FOR A BLANK\n         TRT   0(45,R14),SPFTRT       FIND END OF DSN\n         LR    R14,R1                 COPY ADDR\n         MVI   0(R14),C'('            ADD THE PAREN\n         MVC   1(8,R14),&MBR          MOVE THE MEMBER NAME\n         TRT   0(10,R14),SPFTRT       FIND END\n         MVI   0(R1),C')'             ADD A PAREN\n         MVI   1(R1),X'7D'            ADD A QUOTE\n         AGO   .BBB\n.AAA     ANOP\n         XC    SPFTRT,SPFTRT          CLEAR\n         MVI   SPFTRT+C' ',X'FF'      SET FOR A BLANK\n         TRT   0(45,R14),SPFTRT       FIND END OF DSN\n         MVC   0(2,R1),=X'7D5D'       ADD A QUOTE PAREN\n.BBB     ANOP\n         MVC   SPFDYNIN,=F'100'\n         CALL  ISPLINK,(SELECT,SPFDYNIN,SPFDYNAM),VL\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFTAILR": {"ttr": 267, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFTAILR &PROC,&SUBMIT,&JOBCARD=\n.*---------------------------------------------------------------------\n.*       THIS MACRO WILL INVOKE SPF FILE TAILORING SERVICES AND\n.*       OPTIONALLY SUBMIT THE JOB. IT WILL ALSO UPDATE THE JOBNAME\n.*       SUFFIX IF REQUESTED.\n.*\n.*       MARCH, 1984 - MOVED THIS VERSION IN UNTIL I GET AN EXPLANATION\n.*       ON THE NEW VERSION. R. WILLMS\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n&NAME    DS    0H\n         LCLA  &X\n         LCLC  &LIT\n&X       SETA  &SYSNDX\n         AIF   (T'&PROC NE 'O').AAA\n         MNOTE 8,'SPF SKELETON NOT SPECIFIED'\n         MEXIT\n.AAA     ANOP\n         AIF   ('&PROC'(1,1) EQ '''').BBB\n         MVC   PROC,&PROC           MOVE SKELETON NAME\n         AGO   .CCC\n.BBB     ANOP\n&LIT     SETC  '&PROC'(2,K'&PROC-2)\n         MVC   PROC,=CL8'&LIT'\n.CCC     ANOP\n         CALL  ISPLINK,(FTOPEN,TEMP),VL\n         CALL  ISPLINK,(FTINCL,PROC),VL\n         CALL  ISPLINK,(FTCLOSE),VL\n         AIF   (T'&SUBMIT EQ 'O').DONE\n         SPFSUB ZTEMPF,,CMNB@JNU\n         AIF   (T'&JOBCARD EQ 'O').DONE\n         SPFJOBNM &JOBCARD\n.DONE    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFTEMP": {"ttr": 269, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFTEMP &IDS,&ODS,&QUAL\n.*---------------------------------------------------------------------\n.*       THIS MACRO WILL GENERATE A DATA SET NAME FROM A USER SUPPLIED\n.*       BASE NAME BY CHANGING THE LAST QUALIFIER OF THE BASE NAME.\n.*\n.*       MAY, 1982 - CREATED\n.*\n.*       FEB, 1984 - R. WILLMS-CHANGED TO CREATE A D.S. NAME USING\n.*                   ZUSER.&IDS.&QUAL IF &IDS IS CODED AS 'NAME'\n.*                   OR CREATE NAME OF ZUSER.&IDS.XX  WHERE XX IS THE\n.*                   LAST QUALIFIER IN ZTEMPF IF &QUAL IS BLANK.\n.*\n.*        SPFTEMP ,TEMPDSN,'TEMP1' USE DS NAME FROM ZTEMPF AND CHANGE\n.*                   THE LAST QUALIFIER TO .TEMP1\n.*        SPFTEMP 'SPFTEMP4',TEMPDSN,'TEMP1' CREATE DS NAME AS\n.*                   USERID.SPFTEMP4.TEMP1\n.*        SPFTEMP  SPFTEMP4,TEMPDSN,'TEMP1' CHANGE THE LAST QUALIFIER\n.*                   OF D.S. NAME AT LABEL SPFTEMP4 TO TEMP1.\n.*        SPFTEMP  SPFTEMP4,TEMPDSN         CHANGE THE LAST QUALIFIER\n.*                   OF D.S. NAME AT LABEL SPFTEMP4 TO BE THE SAME AS\n.*                   THE LAST QUALIFIER IN ZTEMPF NAME.\n.*---------------------------------------------------------------------\n&NAME    DS    0H\n         LCLA  &X\n         LCLC  &INDS,&LIT,&LA\n&X       SETA  &SYSNDX\n&INDS    SETC  'ZTEMPF'\n         AIF   (T'&IDS EQ 'O').AAA\n&INDS    SETC  '&IDS'\n         AIF   ('&IDS'(1,1) NE '''').AAA\n         MVI   &ODS,C' '          CLEAR THE\n&LA      SETC  'L''&ODS-1'\n         MVC   &ODS+1(&LA),&ODS TARGET FIELD\n         MVC   &ODS.(7),ZUSER      MOVE TSO USER ID TO TARGET\n         XC    SPFTRT,SPFTRT      CLEAR TRT TABLE\n         MVI   SPFTRT+C'.',X'FF'  DOT\n         MVI   SPFTRT+C' ',X'FF'  BLANK\n         LA    R15,&ODS\n         TRT   0(8,R15),SPFTRT    FIND THE END OF TSO USER ID\n         MVI   0(R1),C'.'         MOVE IN DOT\n&LIT     SETC  '&IDS'(2,K'&IDS-2)\n         LA    R15,1(R1)          POINT PAST THE DOT\n         MVC   0(8,R15),=CL8'&LIT' MOVE IN SECOND QUALIFIER\n         TRT   0(9,R15),SPFTRT    FIND THE END OF SECOND QUALIFIER\n         MVI   0(R1),C'.'         MOVE IN DOT\n         LA    R14,1(R1)          POINT PAST DOT\n         AGO   .AAA8\n.AAA     ANOP\n         MVI   &ODS,C' '          CLEAR THE\n&LA      SETC  'L''&ODS-1'\n         MVC   &ODS+1(&LA),&ODS TARGET FIELD\n         MVC   &ODS,&INDS         MOVE DSN TO TARGET\n         XC    SPFTRT,SPFTRT      CLEAR TRT TABLE\n         MVI   SPFTRT+C'.',X'FF'  DOT\n         MVI   SPFTRT+C' ',X'FF'  BLANK\n         LA    R15,&ODS\nLPA&X    EQU   *\n&LA      SETC  'L''&ODS'\n         TRT   0(&LA,R15),SPFTRT FIND A DOT OR BLANK\n         CLI   0(R1),C' '         WAS IT A BLANK ?\n         BE    MAAA&X\n         LR    R14,R1             DOT\n         LA    R15,1(R1)\n         B     LPA&X              KEEP GOING\nMAAA&X   EQU   *\n         LA    R14,1(R14)         BUMP PAST DOT\n.AAA8    ANOP\n         AIF   (T'&QUAL EQ 'O').CCC\n         AIF   ('&QUAL'(1,1) EQ '''').BBB\n         MVC   0(8,R14),=8C' '    CLEAR\n&LA      SETC  'L''&QUAL'\n         MVC   0(&LA,R14),&QUAL MOVE QUALIFIER\n         AGO   .DONE\n.BBB     ANOP\n&LIT     SETC  '&QUAL'(2,K'&QUAL-2)\n         MVC   0(8,R14),=CL8'&LIT'  MOVE LAST QUALIFIER\n         AGO   .DONE\n.CCC     LA    R15,ZTEMPF\n         ST    R14,MXXX&X          SAVE POINTER FOR MOVE\n         CNOP  0,4                 GET SETUP ON HALF WORD\n         B     *+14\nMXXX&X   DC    F'0'\nMYYY&X   MVC   0(0,R14),0(R15)     EXECUTED MOVE\nMBBB&X   TRT   0(44,R15),SPFTRT    FIND A DOT OR BLANK\n         CLI   0(R1),C' '          WAS IS A BLANK ?\n         BE    MCCC&X\n         LR    R14,R1\n         LA    R15,1(R1)\n         B     MBBB&X              KEEP GOING\nMCCC&X   LA    R15,1(R14)          BUMP PAST LAST DOT\n         SR    R1,R15              COMPUTE LENGTH OF LAST QUALIFIER\n         BCTR  R1,R0               DECREMENT FOR MOVE\n         L     R14,MXXX&X          GET ADDRESS OF RECEIVING FIELD\n         EX    R1,MYYY&X           MOVE IN LAST QUALIFIER\n.DONE    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFVDEF": {"ttr": 13, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFVDEF &LEN,&FLD,&TYPE=CHAR,&DC=YES\n.*---------------------------------------------------------------------\n.*       THIS MACRO INVOKES THE SPF VDEFINE SERVICE.\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n&NAME    DS    0H\n         GBLC  &VDEF1\n         LCLA  &X,&B,&N,&LL\n&X       SETA  &SYSNDX\n         AIF   ('&VDEF1' EQ 'NO').AAA\n&VDEF1   SETC  'NO'\n         CNOP  0,4\n         B     *+8\nISPLEN   DC    A(0)       LENGTH FIELD\n.AAA     ANOP\n&N       SETA  N'&FLD\n         MVC   ISPLEN,=A(&LEN)\n         CALL  ISPLINK,(VDEFINE,FLD&X,&FLD(1),&TYPE,ISPLEN),VL\n         B     MAAA&X\n&B       SETA  1\n         AIF   (&N GT 1).BBB\n&LL      SETA  K'&FLD(1)+2\nFLD&X    DC    CL&LL'(&FLD(1))'\n         AGO   .EEE\n.*--------------------------------------------------------------------\n.BBB     ANOP\n&LL      SETA  K'&FLD(&B)+2\nFLD&X    DC    CL&LL'(&FLD(&B)'\n.CCC     ANOP\n&B       SETA  &B+1\n         AIF   (&B EQ &N).DDD\n&LL      SETA  K'&FLD(&B)+1\n         DC    CL&LL'&FLD(&B)'\n         AGO   .CCC\n.DDD     ANOP\n&LL      SETA  K'&FLD(&B)+1\n         DC    CL&LL'&FLD(&B))'\n*-------------------------------------------------------------------\n.EEE     ANOP\n         AIF   ('&DC' EQ 'NO').DONE\n&B       SETA  1\n.FFF     ANOP\n&FLD(&B) DC    CL&LEN' '\n         AIF   (&B EQ &N).DONE\n&B       SETA  &B+1\n         AGO   .FFF\n.DONE    ANOP\nMAAA&X   DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFVGET": {"ttr": 272, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFVGET &FLD,&TYPE\n.*---------------------------------------------------------------------\n.*       THIS MACRO INVOKES THE SPF VGET SERVICE.\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n&NAME    DS    0H\n         LCLC  &AA\n         LCLA  &X,&A,&B,&N,&LL\n&X       SETA  &SYSNDX\n&N       SETA  N'&FLD\n         CALL  ISPLINK,(VGET,FLD&X,&TYPE),VL\n         B     MAAA&X\n&B       SETA  1\n         AIF   (&N GT 1).BBB\n&LL      SETA  K'&FLD(&B)+2\nFLD&X    DC    CL&LL'(&FLD(&B))'\n         AGO   .DONE\n.*---------------------------------------------------------------------\n.BBB     ANOP\n&LL      SETA  K'&FLD(&B)+2\nFLD&X    DC    CL&LL'(&FLD(&B)'\n.CCC     ANOP\n&B       SETA  &B+1\n         AIF   (&B EQ &N).DDD\n&LL      SETA  K'&FLD(&B)+1\n         DC    CL&LL'&FLD(&B)'\n         AGO   .CCC\n.DDD     ANOP\n&LL      SETA  K'&FLD(&B)+1\n         DC    CL&LL'&FLD(&B))'\n.DONE    ANOP\nMAAA&X   DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFVPUT": {"ttr": 274, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SPFVPUT &FLD,&TYPE\n.*---------------------------------------------------------------------\n.*       THIS MACRO INVOKES THE SPF VPUT SERVICE.\n.*\n.*       MAY, 1982 - CREATED\n.*---------------------------------------------------------------------\n&NAME    DS    0H\n         LCLC  &AA\n         LCLA  &X,&A,&B,&N,&LL\n&X       SETA  &SYSNDX\n&N       SETA  N'&FLD\n         CALL  ISPLINK,(VPUT,FLD&X,&TYPE),VL\n         B     MAAA&X\n&B       SETA  1\n         AIF   (&N GT 1).BBB\n&LL      SETA  K'&FLD(&B)+2\nFLD&X    DC    CL&LL'(&FLD(&B))'\n         AGO   .DONE\n.*---------------------------------------------------------------------\n.BBB     ANOP\n&LL      SETA  K'&FLD(&B)+2\nFLD&X    DC    CL&LL'(&FLD(&B)'\n.CCC     ANOP\n&B       SETA  &B+1\n         AIF   (&B EQ &N).DDD\n&LL      SETA  K'&FLD(&B)+1\n         DC    CL&LL'&FLD(&B)'\n         AGO   .CCC\n.DDD     ANOP\n&LL      SETA  K'&FLD(&B)+1\n         DC    CL&LL'&FLD(&B))'\n.DONE    ANOP\nMAAA&X   DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSPRINT": {"ttr": 521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&SYM     SYSPRINT &HEADER1=,&HEADER2=,&LINES=56,&DDNAME=SYSPRINT,      X\n               &LRECL=121\n         AIF   (K'&SYM EQ 0).NOSYM\n         AIF   (K'&SYM GT 5).ERRSYM\n         AIF   (K'&DDNAME GT 8).DDNERR\n         AIF   ('&LRECL' GT '133').ERRLEN\n         MNOTE *,'DCB = DDNAME=&DDNAME,LRECL=&LRECL,LINES=&LINES'\n         AIF   ('&HEADER1' EQ '').HD1\n         MNOTE *,'    &HEADER1 IS FIRST HEADER LINE'\n         AIF   ('&HEADER2' EQ '').HD2\n         MNOTE *,'    &HEADER2 IS SECOND HEADER LINE'\n.HD2     MNOTE *,'    THE FIRST BYTE OF ANY BUFFER SPECIFIED WILL'\n         MNOTE *,'    BE USED BY THIS ROUTINE FOR ASA CHARACTERS'\n         MNOTE *,'    AND UNPREDICTABLE RESULTS MAY OCCUR IF USED.'\n         CNOP  0,4\n&SYM     NOP   DRC&SYSNDX.C .          NOP BRANCH SET AFTER OPEN\n         NOP   DRC&SYSNDX.D .          NOP BRANCH SET AFTER OPEN\n         OI    &SYM.+5,C'0' .          SET NOP TO BRANCH\n         OI    &SYM.+1,C'0' .          SET FIRST NOP TO BRANCH\n         STM   14,2,DRC&SYSNDX.B .     SAVE USERS REGS\n         LA    1,DRC&SYSNDX.A .        LOAD ADDRESS OF OPEN LIST\n         SVC   19 .                    ISSUE OPEN SVC\n         AIF   ('&HEADER1' EQ '').HD4\nDRC&SYSNDX.F MVI &HEADER1,C'1' .       SET CARRIAGE CONTROL\n         PUT   &SYM.DCB,&HEADER1\n         AIF   ('&HEADER2' EQ '').HD5\n         MVI   &HEADER2,C'-' .         SET TRIPLE SPACE AFTER SKIP\n         PUT   &SYM.DCB,&HEADER2\n         AGO   .HD5\n.HD4     L     15,DRC&SYSNDX.B+12 .    GET POINTER TO RECORD\nDRC&SYSNDX.E MVI 0(15),C'1' .            SKIP TO ONE FIRST TIME\n         LA    2,&LINES.+1 .           GET LINE COUNT\n         AGO   .HD55\n.HD5     L     15,DRC&SYSNDX.B+12 .    PICK UP DATA POINTER\n         MVI   0(15),C'0' .            SET DOUBLE SPACE AFTER SK97\n         LA    2,&LINES.+1 .           PICK UP LINE COUNT\n.HD55    ANOP\nDRC&SYSNDX.G BCT 2,DRC&SYSNDX.H .      BR TO PRINT FOR NUMBER OF LINES\n         AIF   ('&HEADER1' NE '').HD6\n         B     DRC&SYSNDX.E .          START NEW PAGE\n         AGO   .P4\n.HD6     B     DRC&SYSNDX.F .          GO TO DO SKIP AND PRINT HDR\n.P4      ANOP\nDRC&SYSNDX.H PUT &SYM.DCB,(15)\n         ST    2,DRC&SYSNDX.J .        SAVE THE LINE COUNT\n         LM    14,2,DRC&SYSNDX.B .     RESTORE USERS REGS\n         MVI   0(1),C' ' .             PLACE BLANK INTO CARRIAGE CONTR\n         MVC   1(&LRECL.-1,1),0(1) .   CLEAR THE BUFFER\n         BR    14 .                    RETURN\n SPACE\nDRC&SYSNDX.D STM 14,2,DRC&SYSNDX.B .   SAVE REGS ALWAYS\n         AIF   ('&HEADER1' EQ '').P6\n         B     DRC&SYSNDX.F .          GO TO HEADER ROUTINE\n         AGO   .P5\n.P6     ANOP\n         L     15,DRC&SYSNDX.B+12 .    PICK UP POINTER TO DATA\n         B     DRC&SYSNDX.E .          GO TO HEADER RTN\n.P5      ANOP\nDRC&SYSNDX.C STM 14,2,DRC&SYSNDX.B .   SAVE REGS ALWAYS\n         L     2,DRC&SYSNDX.J .        RESTORE THE LINE COUNTER\n         L     15,DRC&SYSNDX.B+12 .    PICK UP POINTER TO DATA\n         MVI   0(15),C' ' .            MOVE X'40' TO ASA\n         B     DRC&SYSNDX.G .          GO TEST FOR LINE COUNT\nDRC&SYSNDX.M CLC &SYM.DCB+62(2),=H'0' . IS BLOCK SIZE THERE\n         BNE   DRC&SYSNDX.L .          IF SO SKIP\n         MVC   &SYM.DCB+62(2),=H'&LRECL'  .     MOVE IN DEFAULT SIZE\nDRC&SYSNDX.L BR 14 .               RETURN TO OPEN\n SPACE\nDRC&SYSNDX.B DC 5F'0' .                PRINT RTNS SAVE AREA\nDRC&SYSNDX.J DC F'0' .                 SAVE FOR LINE COUNTER\nDRC&SYSNDX.K DC X'85' .                EXIT LIST FOR OPEN\n         DC    AL3(DRC&SYSNDX.M) .     POINTER TO THE EXIT ROUTINE\nDRC&SYSNDX.A DC AL1(143) .             OPTION BYTE FOR OPEN\n         DC    AL3(&SYM.DCB) .         DCB ADCON FOR OPEN\n SPACE\n&SYM.DCB DCB DDNAME=&DDNAME,LRECL=&LRECL,RECFM=FBA,EXLST=DRC&SYSNDX.K, X\n               DSORG=PS,MACRF=(PM)\n         MEXIT\n.HD1     AIF   ('&HEADER2' EQ '').HD2\n         MNOTE 8,'8,*** HEADER2 INVALID WITHOUT HEADER1 SPECIFIED'\n         MEXIT\n.ERRLEN MNOTE 8,'8,*** LRECL TOO LARGE FOR SYSPRINT'\n         MEXIT\n.NOSYM  MNOTE 8,'8,*** SYSPRINT MACRO MUST HAVE A LABEL'\n         MEXIT\n.ERRSYM MNOTE 8,'8,*** LABEL ON SYSPRINT MACRO MUST BE LESS THAN SIX'\n         MEXIT\n.DDNERR MNOTE 8,'8 *** MAXIMUM DDNAME SIZE IS EIGHT CHARACTERS'\n         MEXIT\n.BUFERR  MNOTE 8,'8,*** NO BUFFER SUPPLIED, EXECUTION IMPOSSIBLE'\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT358/CBT.V500.FILE358.PDS/MACLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT358/CBT.V500.FILE358.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}