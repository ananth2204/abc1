/*  rexx exec to create Batch Cache Performance Report --------------*/
/*  (C) COPYRIGHT AMDAHL CORPORATION  1995. All Rights Reserved      */
/*  written:  October 1994                                           */
/*  author :  Chuck Baumann                                          */
/*-------------------------------------------------------------------*/
arg samptime num_of_intervals volume devtype rtype

/*-------------------------------------------------------------------*/
/*  Use outtrap to get output from LISTDATA commands                 */
/*-------------------------------------------------------------------*/
  dummy = outtrap('rline.','*','NOCONCAT')

  cmdl = 'LISTDATA COUNTS VOL('volume') UNIT('devtype')' rtype
  address 'TSO' cmdl
  if rc = 0
  then call Get_Cache_Rates

  address 'TSO' 'EXECIO 0 DISKW SYSTSPRT (FINIS'
exit

/*-------------------------------------------------------------------*/
/*     SUBROUTINES start here                                        */
/*-------------------------------------------------------------------*/
/*-------------------------------------------------------------------*/
/*     Get_Cache_Rates starts here                                   */
/*-------------------------------------------------------------------*/
Get_Cache_Rates:

ix = 1
timex = time()
parse var timex hh ':' mm ':' ss
int_time.ix = hh * 3600 + mm * 60 + ss
call Parse_Counts ix
cc = 0
  do while ix < num_of_intervals + 1
    timex = time()
    parse var timex hh ':' mm ':' ss
    timex = hh * 3600 + mm * 60 + ss

    if int_time.ix + samptime > timex
    then this_interval = int_time.ix + samptime - timex
    else this_interval = 0

    if this_interval > 0
    then call 'SLEEP' this_interval

    ix = ix + 1
    timex = time()
    parse var timex hh ':' mm ':' ss

    int_time.ix = hh * 3600 + mm * 60 + ss
    cmdl = 'LISTDATA COUNTS VOL('volume') UNIT('devtype')' rtype
    address 'TSO' cmdl

    call Parse_Counts ix
    ctlr_bzer = 0
    ctlr_ezer = 0
    ctlr_aone = 0
    ctlr_bone = 0
    ctlr_cone = 0
    ctlr_done = 0
    ctlr_eone = 0
    ctlr_ftwo = 0
    ctlr_fthr = 0
    ctlr_ffive = 0
    iy = ix - 1
    interval = int_time.ix - int_time.iy

    queue '1'date('U') time() '********* New Interval *********'
    line = '           I/O   CaHit TotHit DFWHit Bypass  Inhib   R/W'
    line2 = '  RHit  DFWHit CFWHit  Stage DFWRetry'
    queue line line2
    line = ' Volser   Rate    Pct    Pct    Pct   Rate    Rate  Rate'
    line2 = ' Rate   Rate    Rate    Rate  Rate'
    queue line line2

    do j = 1 to v
      bzer = b0.ix.j - b0.iy.j
      ctlr_bzer = ctlr_bzer + bzer

      czer = c0.ix.j - c0.iy.j       /* CFW total */

      ezer = e0.ix.j - e0.iy.j
      ctlr_ezer = ctlr_ezer + ezer

      aone = a1.ix.j - a1.iy.j
      ctlr_aone = ctlr_aone + aone
      bone = b1.ix.j - b1.iy.j
      ctlr_bone = ctlr_bone + bone
      cone = c1.ix.j - c1.iy.j
      ctlr_cone = ctlr_cone + cone
      done = d1.ix.j - d1.iy.j
      done = done + czer            /* following CRR report */
      ctlr_done = ctlr_done + done
      eone = e1.ix.j - e1.iy.j
      ctlr_eone = ctlr_eone + eone
      ftwo = f2.ix.j - f2.iy.j
      ctlr_ftwo = ctlr_ftwo + ftwo
      fthr = f3.ix.j - f3.iy.j
      ctlr_fthr = ctlr_fthr + fthr
      ffive = f5.ix.j - f5.iy.j
      ctlr_ffive = ctlr_ffive + ffive
      volser = vol.ix.j
      io  = format((aone + cone + ftwo + fthr) / interval,,1)

      if (aone + done) > 0
      then cachable = format(((bone + eone) / (aone + done)) ,
                      * 100,,1)
      else cachable = 0

      if (aone + cone + ftwo + fthr) > 0
      then tothit = format((bone + eone)/ ,
                    (aone + cone + ftwo + fthr) * 100,,1)
      else tothit = 0

      if done > 0
      then dfwpct = format((eone / done) * 100,,1)
      else dfwpct = 0

      dfwhit = format(done / interval,,1)
      cfwhit = format((bzer + ezer) / interval,,1)
      stage  = format((aone - bone + done - eone)/ interval,,1)

      if cone > 0
      then rw = format(aone / cone,,2)
      else rw = 0
      rhit   = format(bone / interval,,1)
      dfwretry = format(ffive / interval,,1)
      bypass = format(fthr / interval,,1)
      inhibit = format(ftwo / interval,,1)
      line1 = left(volser,6) right(io,6) right(cachable,6)
      line2 = right(tothit,6) right(dfwpct,6) right(bypass,6)
      line3 = right(inhibit,6) right(rw,6) right(rhit,6)
      line4 = right(dfwhit,6) right(cfwhit,6) right(stage,6)
      line5 = right(dfwretry,6)
      line = ' 'line1 line2 line3 line4 line5
      queue line
    end
    volser = ' TOTAL'
    io  = format((ctlr_aone + ctlr_cone + ctlr_ftwo + ctlr_fthr) ,
          / interval,,1)
    if (ctlr_aone + ctlr_done) > 0
    then cachable = format(((ctlr_bone + ctlr_eone) / ,
                    (ctlr_aone + ctlr_done)) * 100,,1)
    else cachable = 0
    if (ctlr_aone + ctlr_cone + ctlr_ftwo + ctlr_fthr) > 0
    then tothit = format((ctlr_bone + ctlr_eone) / ,
           (ctlr_aone + ctlr_cone + ctlr_ftwo + ctlr_fthr) ,
             * 100,,1)
    else tothit = 0
    if ctlr_done > 0
    then dfwpct = format((ctlr_eone / ctlr_done) * 100,,1)
    else dfwpct = 0
    dfwhit = format(ctlr_done / interval,,1)
    cfwhit = format((ctlr_bzer + ctlr_ezer) / interval,,1)
    stage  = format((ctlr_aone - ctlr_bone + ,
             ctlr_done - ctlr_eone) / interval,,1)

    if ctlr_cone > 0
    then rw = format(ctlr_aone / ctlr_cone,,2)
    else rw = 0
    rhit   = format(ctlr_bone / interval,,1)
    dfwretry = format(ctlr_ffive / interval,,1)
    bypass = format(ctlr_fthr / interval,,1)
    inhibit = format(ctlr_ftwo / interval,,1)
    line1 = left(volser,6) right(io,6) right(cachable,6)
    line2 = right(tothit,6) right(dfwpct,6) right(bypass,6)
    line3 = right(inhibit,6) right(rw,6) right(rhit,6)
    line4 = right(dfwhit,6) right(cfwhit,6) right(stage,6)
    line5 = right(dfwretry,6)
    line = ' 'line1 line2 line3 line4 line5
    queue line
    address 'TSO' 'EXECIO' queued() 'DISKW SYSTSPRT'

    cc = rc
  end
return

Parse_Counts:
v = 0
do i = 1 to rline.0
  parse var rline.i tok1 .
  select
     when tok1 = 'VOLUME'
     then do
            v = v + 1
            parse var rline.i . vol.ix.v .
            i = i + 7
          end

     when tok1 = 'CACHE'
     then do
            parse var rline.i . 'WRITE' . b0.ix.v c0.ix.v . e0.ix.v .
            if datatype(e0.ix.v) Â¬= 'NUM' then e0.ix.v = 0
          end
     when tok1 = 'TOTALS'
     then do
            parse var rline.i . a1.ix.v b1.ix.v c1.ix.v ,
                                d1.ix.v e1.ix.v .
            i = i + 1
          end
     when tok1 = 'INHIBIT'
     then do
            parse var rline.i 'LOADING' f2.ix.v .
          end
     when tok1 = 'BYPASS'
     then do
            parse var rline.i 'CACHE' f3.ix.v .
            i = i + 2
          end
     when tok1 = 'DASD'
     then do
            parse var rline.i 'RETRIES' f5.ix.v .
            i = i + 4
          end
     otherwise nop
  end
end
return
