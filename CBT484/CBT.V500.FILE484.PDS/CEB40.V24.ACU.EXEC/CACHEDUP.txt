/*  rexx exec called by Amdahl Cache Utility to handle duplex logic  */
/*  (C) COPYRIGHT AMDAHL CORPORATION  1995. All Rights Reserved      */
/*  written:  January 1994                                           */
/*  author :  Chuck Baumann                                          */
/*  Panels :  CSHMAN4                                                */
/*  Help   :  CSHHMAN4                                               */
/*  Externs:  DEVTYPE          (assembler modules)                   */
/*  Message:  CSHM01                                                 */
/*  Changes:  V1.0 -- Initial functions                              */
/*  94/02/11  V1.1 -- Error messages for file tailoring added        */
/*-------------------------------------------------------------------*/
arg volser devt addr cachlog cachcnf

/*-------------------------------------------------------------------*/
/*  Use outtrap to get output from LISTDATA commands                 */
/*-------------------------------------------------------------------*/
dummy = outtrap('oline.','*','NOCONCAT')

/*-------------------------------------------------------------------*/
/* Display the panel                                                 */
/*-------------------------------------------------------------------*/
cc = 0

address 'ISPEXEC' 'DISPLAY PANEL(CSHMAN4) CURSOR(CSHMODE)'
if rc > 8
then do
       say 'Panel CSHMAN4    could not be found.'
       exit
     end
else
if rc = 8 | substr(zcmd,1,3) = 'CAN'
then return(4)
/*-------------------------------------------------------------------*/
/* get values and bld a command or create a batch job                */
/*-------------------------------------------------------------------*/
option = ''
if CSHCOPY ¬= ''
then option = 'COPY'
if CSHPACE  ¬= ''
then option = option 'PACE('cshpace')'
if CSHNCOPY ¬= ''
then option = 'NOCOPY'

select
  when CSHSSC ¬= ''
  then do
         cmdline = 'SSEC('sadr')' option
       end
  when CSHSUSPR ¬= ''
  then do
         cmdline = 'SUSPRI'
       end
  when CSHSUSSE ¬= ''
  then do
         cmdline = 'SUSSEC'
       end
  when CSHRSTOD ¬= ''
  then do
         cmdline = 'RESETDUP' option
       end
  when CSHRESTD ¬= ''
  then do
         cmdline = 'REEST('radr')' option
       end
  when CSHRSTOS ¬= ''
  then do
         cmdline = 'RESETSIM'
       end
  otherwise nop
end
cmd = 'SETCACHE' cmdline 'VOL('volser') UNIT('devt')'
if CSHMODE = 'F'  /* foreground execution */
then do
       cc = 0
       if CACHCNF = 'YES'
       then do
              zwinttl = cmd
              address 'ISPEXEC' 'ADDPOP ROW(9)'
              address 'ISPEXEC' 'DISPLAY PANEL(CSHSETC) CURSOR(ZCMD)'
              cc = rc
              address 'ISPEXEC' 'REMPOP'
            end
       if cc = 0
       then do
              address 'TSO' cmd
              cc = rc
              if rc > 0
              then   call Rc8_Display rc cmd
              call WriteLog cc cmd
            end
     end
else do
       address 'ISPEXEC' 'CONTROL DISPLAY SAVE'
       address 'ISPEXEC' 'DISPLAY PANEL(CSHJCL) CURSOR(CACHOPT)'
       cc = rc
       address 'ISPEXEC' 'CONTROL DISPLAY RESTORE'
       if cc = 8   /* End key was pressed - submit the job */
       then do
              address 'ISPEXEC' 'FTOPEN TEMP'
              address 'ISPEXEC' 'FTINCL CSHSKEL1'
              if rc > 0
              then call Fail_Ftincl rc
              address 'ISPEXEC' 'FTCLOSE'
              if rc > 0
              then call Fail_Ftclose rc
              address 'ISPEXEC' 'VGET (ZTEMPF)'
              address 'TSO' 'SUBMIT '''ztempf''''
              cc = 0
            end
       else
       if CACHOPT = 'SAVE'  /* save this JCL in a dataset  */
       then do
              address 'ISPEXEC' 'CONTROL DISPLAY SAVE'
              address 'ISPEXEC' 'DISPLAY PANEL(CSHJCL01)'
              cc = rc
              address 'ISPEXEC' 'CONTROL DISPLAY RESTORE'
              if cc = 0   /* Enter key pressed - save the JCL */
              then do
                     adsn = "'"adsn"'"
                     address 'TSO' 'FREE  F(ISPFILE)'
                     address 'TSO' 'ALLOC F(ISPFILE) DSN('ADSN') SHR'
                     if rc = 12
                     then address 'ISPEXEC' 'SETMSG MSG(CSHM016)'
                     else do
                            address 'ISPEXEC' 'FTOPEN'
                            address 'ISPEXEC' 'FTINCL CSHSKEL1'
                            if rc > 0
                            then call Fail_Ftincl rc
                          address 'ISPEXEC' 'FTCLOSE LIBRARY(ISPFILE) ,
                                        NAME('CACHMBR')'
                            if rc > 0
                            then call Fail_Ftclose rc
                           else address 'ISPEXEC' 'SETMSG MSG(CSHM019)'
                            cc = 0
                          end
                   end
            end
       else cc = 4    /* I should never get here */
     end
return(cc)
/*-------------------------------------------------------------------*/
/*     Rc8_Display    starts here                                    */
/*-------------------------------------------------------------------*/
Rc8_Display:
/* Use a PopUp window to display the error messages from the IDCAMS  */
/* functions.                                                        */
procedure expose oline.
arg Lretcode Ltitle

   cc = lretcode
   address 'ISPEXEC' 'TBCREATE ERRTB NAMES(XLINE) NOWRITE REPLACE'
   do i = 1 to oline.0
      xline = oline.i
     address 'ISPEXEC' 'TBADD ERRTB'
   end
   address 'ISPEXEC' 'ADDPOP ROW(9)'
   zwinttl = Ltitle
   address 'ISPEXEC' 'TBTOP ERRTB'
   address 'ISPEXEC' 'TBDISPL ERRTB PANEL(CSHERRP) CURSOR(ZCMD)'
   address 'ISPEXEC' 'REMPOP'
   address 'ISPEXEC' 'TBCLOSE ERRTB'
return

/*-------------------------------------------------------------------*/
/*     WriteLog       starts here                                    */
/*-------------------------------------------------------------------*/
WriteLog:
procedure expose cachlog oline.
arg Lretcode Lcmdline

 if CACHLOG = 'YES'
 then do
        queue date('U') time() 'RC='right(Lretcode,2)  Lcmdline
        address 'TSO' 'EXECIO 1 DISKW CACHLG'
      end

return

/*-------------------------------------------------------------------*/
/*     Fail_Ftincl    starts here                                    */
/*-------------------------------------------------------------------*/
Fail_Ftincl:
arg Lretcode

select
  when Lretcode = 8
  then say 'Skeleton CSHSKEL1 does not exist'
  when Lretcode = 12
  then say 'Skeleton in use; ENQ failed'
  when Lretcode = 16
  then say 'Data trunc occurred or Skel lib or output lib not alloctd'
  when Lretcode = 20
  then say 'Severe error'
  otherwise say 'RC ' Lretcode ' is not documented'
end
/*-------------------------------------------------------------------*/
/*     Fail_Ftclose   starts here                                    */
/*-------------------------------------------------------------------*/
Fail_Ftclose:
arg Lretcode

select
  when Lretcode = 4
  then say 'Member already exists in output lib and NOREPL specified'
  when Lretcode = 8
  then say 'File not open. FTOPEN was not used prior to FTCLOSE'
  when Lretcode = 12
  then say 'Output file in use; ENQ failed'
  when Lretcode = 16
  then say 'Skel lib or output lib not allocated'
  when Lretcode = 20
  then say 'Severe error'
  otherwise say 'RC ' Lretcode ' is not documented'
end

return

