DEVTYPE CSECT                         *
DEVTYPE AMODE 31
DEVTYPE RMODE ANY
*---------------------------------------------------------------------
* (C) COPYRIGHT AMDAHL CORPORATION  1995. All Rights Reserved
* Written by:  Chuck Baumann ------------------July 1992    ----------
* Version:     2.2
*
*      An external rexx function model.  Scans ucb chain until volser
*      matches passed argument.   Returns the device type 3380 or 3390
*      and number of cylinders of device and an internal return code.
*
* Register usage: (on entry)
*   R0     -  address of environment block
*   R1     -  address of the external function parameter list
*   R2-12  -  unpredictable
*   R13    -  register save area
*   R14    -  return address
*   R15    -  entry point address
* Register usage:
*   R2     -  address of argument
*   R3     -  length  of argument
*   R9     -  addressability for evalblock
*   R10    -  addressability for the parsed argument list
*   R11    -  addressability for efpl mapping macro (irxefpl)
*   R12    -  base
*---------------------------------------------------------------------
         YREGS
         SAVE  (14,12)                 Standard Linkage
         LR    R12,R15
         USING DEVTYPE,R12
         ST    R13,SAVE+4
         LA    R14,SAVE
         ST    R14,8(R13)
         LR    R13,R14
*----------------------------------------------------------------------
*     The format of the parsed argument list this function receives   *
*     is address/length pairs until terminated by a doubleword of     *
*     high values.                                                    *
*     DS   A      address of arg n                                    *
*     DS   F      length  of arg n                                    *
*     DC   X'FFFFFFFFFFFFFFFF'                                        *
*----------------------------------------------------------------------
         TITLE '  REXX EXTENSION -- RETURN DEVICE TYPE OF DASD VOLSER'
         USING EFPL,R1
         L     R10,EFPLARG             address of parsed argument list
         L     R9,EFPLEVAL             address of fullword ptr
         L     R9,0(,R9)               address of the evalblock
         L     R2,0(,R10)              address of arg 1
         L     R3,4(,R10)              length  of arg 1
         ST    R3,SAVER3
*  If length of input data is greater than 125 you can call the IRXRLT
*  routine to obtain a larger evaluation block.
         CH    R3,=H'125'              is arg 1 length > 125?
         BH    ERREXIT                 yes  too big for this function
         XC    WORKX(100),WORKX        init to zeros prior to scan
UCBSCAN  EQU   *
         UCBSCAN COPY,WORKAREA=WORKX,UCBAREA=UCB48,VOLSER=(R2),        X
               DEVCLASS=DASD,DYNAMIC=YES,RANGE=ALL
         LTR   R15,R15                 test if dasd ucb was returned
         BNZ   RESULT                  no ucb returned; go to result
         LA    R8,UCB48                get address of ucb
         USING UCBOB,R8                addressability for ucb
         MVC   OUTAREA+6(2),UCBCHAN    move unit address to output
         MVC   OUTAREA+9(1),UCBUNTYP   for debugging purposes
         MVC   UNITVOL(6),UCBVOLI      move volser to output
         CLI   UCBUNTYP,X'0E'          test if  3380 device type
         BNE   CHK90                   not a 3380; go to chk90
         MVC   UNITDEV,=C'3380'        move 3380 to text unit(dynalloc)
         MVC   OUTAREA(4),=C'3380'     move to output
         B     GETMODEL
CHK90    EQU   *
         CLI   UCBUNTYP,X'0F'          test if  3390 device type
         BNE   ERRTYPE                 not a 3390;  go to invalid
         MVC   UNITDEV,=C'3390'        move 3390 to text unit(dynalloc)
         MVC   OUTAREA(4),=C'3390'     move to output
         B     GETMODEL
         DROP  R8
GETMODEL EQU   *
         BAL   R2,ALLOCATE             dynamically allocate volume
         LTR   R15,R15                 test if dynamic allocation OK
         BNZ   ERREXIT                 not OK;  go to errexit
         DEVTYPE DDNAME,DEVTOUT,DEVTAB
         LTR   R15,R15                 test DEVTYPE macro success
         BNZ   ERRDEVT                 not OK;  go to errdevt
         BAL   R2,DEALLOC              deallocate the volume
         LTR   R15,R15                 test if deallocation OK
         BNZ   ERREXIT                 not OK;  go to errexit
         MVC   OUTAREA+4(2),DEVTOUT+8  move #cyls (hex) to output
*
*  Fill in required info in the EVALBLOCK before returning.
*
RESULT   EQU   *
         MVC   16(L'OUTAREA,R9),OUTAREA move result to EVDATA
         LA    R1,L'OUTAREA            get length of returned output
         ST    R1,8(,R9)               move length to  EVLEN
         SR    R15,R15                 set return code to 0
EXIT     EQU   *
         L     R13,SAVE+4
         RETURN (14,12),RC=(15)
ERRTYPE  EQU   *
         MVI   OUTAREA+8,X'02'         move internal rc to output
         B     RESULT
ERRDEVT  EQU   *
         MVI   OUTAREA+8,X'04'         DEVTYPE macro failed
         B     RESULT
ERREXIT  EQU   *
         MVI   OUTAREA+8,X'08'         dynamic alloc/dealloc failed
         B     RESULT
*---------------------------------------------------------------------
* THE ALLOCATE AND DEALLOCATE ROUTINES ARE BAL'D.                   --
* REGISTERS USED:  R4, R5, R6, R8,  R2 = RETURN                     --
*---------------------------------------------------------------------
ALLOCATE EQU   *                                                        P24DYNAL
         LA    R8,DYNWORK              ADDRESS OF DYN ALLOC BLOCKS
         USING S99RBP,R8               FOR S99RBP DSECT
         LA    R4,S99RBPTR+4           POINT AT REQUEST BLOCK
         USING S99RB,R4                FOR S99RB  DSECT
         ST    R4,S99RBPTR
         OI    S99RBPTR,S99RBPND       TURN ON HI ORDER BIT IN S99RBPTR
         XC    S99RB(RBLEN),S99RB      SET REQUEST BLOCK TO ZEROS
         MVI   S99RBLN,RBLEN           PUT REQ BLK LEN IN ITS LEN FLD
         MVI   S99VERB,S99VRBAL        SET VERB TO ALLOCATION
         MVI   S99FLAG1,S99NOCNV       DO NOT USE AN EXISTING ALLOC
         LA    R5,S99RB+RBLEN          POINT TO START OF TUP LIST
         USING S99TUPL,R5
         ST    R5,S99TXTPP             STORE ADDR OF TUP LIST IN RB
         LA    R6,STATUSTU             DISPOSITION=SHR
         ST    R6,S99TUPTR             STORE IN TUP LIST
         LA    R5,S99TUPL+4            ADDR OF NEXT TUPL ENTRY
         LA    R6,DDNTU                DDNAME
         ST    R6,S99TUPTR             STORE IN TUP LIST
         LA    R5,S99TUPL+4            ADDR OF NEXT TUPL ENTRY
         LA    R6,UNITTU               UNIT ADDRESS
         ST    R6,S99TUPTR             STORE IN TUP LIST
         LA    R5,S99TUPL+4            ADDR OF NEXT TUPL ENTRY
         LA    R6,VOLTU                VOLSER
         ST    R6,S99TUPTR             STORE IN TUP LIST
         OI    S99TUPTR,S99TUPLN       TURN ON HI ORDER BIT
         LR    R1,R8
         DYNALLOC
         BR    R2
DEALLOC EQU    *                                                        P25DYNUN
         LA    R8,DYNWORK              ADDRESS OF DYN ALLOC BLOCKS
         USING S99RBP,R8               FOR S99RBP DSECT
         LA    R4,S99RBPTR+4           POINT AT REQUEST BLOCK
         USING S99RB,R4                FOR S99RB  DSECT
         ST    R4,S99RBPTR
         OI    S99RBPTR,S99RBPND       TURN ON HI ORDER BIT IN S99RBPTR
         XC    S99RB(RBLEN),S99RB      SET REQUEST BLOCK TO ZEROS
         MVI   S99RBLN,RBLEN           PUT REQ BLK LEN IN ITS LEN FLD
         MVI   S99VERB,S99VRBUN        SET VERB TO DEALLOCATION
         LA    R5,S99RB+RBLEN          POINT TO START OF TUP LIST
         USING S99TUPL,R5
         ST    R5,S99TXTPP             STORE ADDR OF TUP LIST IN RB
         LA    R6,DDNTU                DDNAME
         ST    R6,S99TUPTR             STORE IN TUP LIST
         OI    S99TUPTR,S99TUPLN       TURN ON HI ORDER BIT
         LR    R1,R8
         DYNALLOC
         BR    R2
         EJECT
DD       DC    CL8' '             WORK AREA FOR DDNAME TO OPEN
*   SVC 99 (DYNAMIC ALLOCATION TEXT UNITS) ***
DYNWORK  DS    CL50                    DYNAMIC ALLOCATION WORK AREA     DYNWORK
RBLEN    EQU   (S99RBEND-S99RB)                                         RBLEN
         DS    0F
STATUSTU DC    AL2(DALSTATS)           KEY FOR DSN DISPOSTION           STATUSTU
         DC    X'0001'
         DC    X'0001'                 LEN OF PARM
         DC    X'08'                   DISP=SHR
*
         DS    0F
DDNTU    DC    AL2(DALDDNAM)           KEY FOR DDNAME ALLOCATION        DDNTU
         DC    X'0001'
DDNLEN   DC    X'0008'                 LEN OF DDNAME                    DDNLEN
DDNAME   DC    C'CACHEDEV'             DDNAME FOR DEVTYPE MACRO         DDNAME
*
         DS    0F
UNITTU   DC    AL2(DALUNIT)            KEY FOR UNIT   ALLOCATION        DDNTU
         DC    X'0001'
         DC    X'0004'                 LEN OF UNIT ADDR                 DDNLEN
UNITDEV  DC    C'XXXX'                 DEVICE TYPE FOR UNIT ADDRESS     DDNAME
*
         DS    0F
VOLTU    DC    AL2(DALVLSER)           KEY FOR VOLSER ALLOCATION        DDNTU
         DC    X'0001'
         DC    X'0006'                 LEN OF VOLSER                    DDNLEN
UNITVOL  DC    C'XXXXXX'               VOLSER                           DDNAME
         EJECT
SAVE     DC    18F'0'
SAVER3   DS    F
*
OUTAREA  DS    0CL10
         DC    CL8' '
         DC    XL2'0000'
DEVTOUT  DS    5F                      output area for  DEVTYPE macro
         SPACE 3
WORKX    DC    100X'00'
UCB48    DS    CL48
         DS    0F
UCBA     DS    A
         LTORG
*
         IEFZB4D0
         IEFZB4D2
********************************************************************
         IRXEFPL
         DSECT
         IEFUCBOB DEVCLAS=DA
         CVT   DSECT=YES
         END   DEVTYPE
