           TITLE 'CACHEMAN DASD SCAN MODULE'
CASHMAN CSECT *
*---------------------------------------------------------------------
* (C) COPYRIGHT AMDAHL CORPORATION  1995. All Rights Reserved
* THIS PROGRAM WILL SCAN ONLINE UCBS TO CONSTRUCT A TABLE THAT IS
* USED IN THE CACHEMN1 EXEC.
* REQUIREMENTS:
*   PANEL  -  CSHMAN1
*   MACROS -  ALL DIALOG SERVICES MACROS FROM MY MACRO LIBRARY
*   MACROS -  ISPLINK will be called dynamically
*   FUTURE MODS:
*   Tables -  VOLTABLE
*    fields      TBVOL    = Volser of DASD
*                TBDEVT   = Device type of DASD (3380 or 3390)
*                TBCHAN   = UCB channel address
*---------------------------------------------------------------------
         YREGS
         SAVE  (14,12)                 STANDARD LINKAGE
         LR    R11,R15
         LA    R12,4095(R11)
         LA    R12,1(R12)
         USING CASHMAN,R11,R12
         ST    R13,SAVE+4
         LA    R14,SAVE
         ST    R14,8(R13)
         LR    R13,R14
*---------------------------------------------------------------------
* Load a copy of ISPLINK for use by the Dialog Manager macros
*---------------------------------------------------------------------
         LOAD    EP=ISPLINK
         ST      R0,SAVEISP
*
*-- Test which version of MVS is running. If prior to MVS 4 then
*-- use the older techniqe to access UCB scan services
*
         L     R2,CVTPTR               address of CVT
         USING CVTMAP,R2
         LR    R3,R2
         LA    R4,CVTMAP-CVTFIX        address of CVT prefix area
         SR    R3,R4
         USING CVTFIX,R3               addressability for prefix area
PRODN    MVC   MVSVERS(1),CVTPRODN+2   save version of prod number
         DROP  R3
*---------------------------------------------------------------------
* VDEFINE THE STORAGE AREAS SO ISPF CAN ASSOCIATE VARIABLES WITH THEM
* ALL AREAS WITH SAME SIZE AND TYPE CAN BE DONE WITH ONE VDEFINE
*---------------------------------------------------------------------
         VDEFINE (PANEL),CHAR,8
         VDEFINE (TBVOL,VOLUME),CHAR,6
         VDEFINE (GRPNAME),CHAR,7
         VDEFINE (TBDEVT,FUA,TUA),CHAR,4
         VDEFINE (TBCHAN),HEX,2
         VDEFINE (ACT),CHAR,1
         B     DISPPAN
DISPPRM  DC    A(DISPLAY)
         DC    A(CSHPANL+X'80000000')
DISPPAN  LA    R1,DISPPRM
         L     R15,SAVEISP
         BALR  R14,R15
         CH    R15,=H'8'               PF3 KEY HIT SO EXIT
         BE    QWIKEXIT
         B     CRTTAB
CSHPANL  DC    C'CSHMAN2 '
*
* Create the table to hold the CASHMAN entries
*
CRTTAB   TBCREATE VOLTABLE,,(TBVOL,TBDEVT,TBCHAN),WR,REPLACE
UCBCNT   SR    R9,R9                   CLEAR R9 FOR UCB COUNTER
         MVI   DEV,X'20'               set device class to DASD
         LA    R1,WORKX                work area for old format scan
         ST    R1,P1                   save address of work area
         LA    R1,DEV
         ST    R1,P2                   save address of device class
         LA    R1,UCBA
         ST    R1,P3                   save address of ucb area
         XC    UCB48,UCB48
         XC    WORKX,WORKX
         MVC   FROMX,=X'0000'          DEFAULT FROM ADDRESS
         MVC   TOX,=X'FFFF'            DEFAULT TO   ADDRESS
         VCOPY VOLUME,6,,MOVE,LABEL=LENVOL
         VCOPY GRPNAME,7,,MOVE,LABEL=LENGRP
         VPUT  GRPNAME,SHARED          stuff into shared variable pool
VOL      L     R1,LENVOL               GET LENGTH OF ARGUMENT
         CH    R1,ZERO                 WAS VOLUME ENTERED
         BNE   UCBSCAN                 yes so skip other checks
GRP      L     R1,LENGRP               GET LENGTH OF ARGUMENT
         CH    R1,ZERO                 WAS GROUPNAME ENTERED
         BNE   GETGRP                  YES SO SKIP UNIT ADDR RANGE
         VCOPY FUA,4,,MOVE,LABEL=FLEN  ELSE GET FROM UNIT ADDRESS
         VCOPY TUA,4,,MOVE,LABEL=TLEN  AND TO   UNIT ADDRESS
         MVC   WORK,=C'0000'           init work field
         CLC   FLEN,=F'4'              was full field entered?
         BE    PRTUA
FLENG3   CLC   FLEN,=F'3'              were 3 chars entered?
         BNE   FLENG2
         MVC   WORK+1(3),FUA           move the 3 chars
         MVC   FUA,WORK
         B     PRTUA
FLENG2   CLC   FLEN,=F'2'              were 2 chars entered?
         BNE   FLENG1
         MVC   WORK+2(2),FUA           move the 2 chars
         MVC   FUA,WORK
         B     PRTUA
FLENG1   MVC   WORK+3(1),FUA           move the 2 chars
         MVC   FUA,WORK
PRTUA    MVC   WORK,=C'0000'           init work field
         CLC   TLEN,=F'4'              was full field entered?
         BE    PREPIT
TLENG3   CLC   TLEN,=F'3'              were 3 chars entered?
         BNE   TLENG2
         MVC   WORK+1(3),TUA           move the 3 chars
         MVC   TUA,WORK
         B     PREPIT
TLENG2   CLC   TLEN,=F'2'              were 2 chars entered?
         BNE   TLENG1
         MVC   WORK+2(2),TUA           move the 2 chars
         MVC   TUA,WORK
         B     PREPIT
TLENG1   MVC   WORK+3(1),TUA           move the 2 chars
         MVC   TUA,WORK
PREPIT   MVC   FROMX,=X'0000'          PREP for mvo
         MVC   TOX,=X'0000'            prep for mvo
         TR    FUA(4),TRANTBL          CONVERT SO PACK WILL WORK
         PACK  WORKADR(3),FUA(4)       PACK AND CONVERT TO HEX
         MVO   FROMX(2),WORKADR(2)
         TR    TUA(4),TRANTBL          CONVERT SO PACK WILL WORK
         PACK  WORKADR(3),TUA(4)       PACK AND CONVERT TO HEX
         MVO   TOX(2),WORKADR(2)
         B     UCBSCAN
GETGRP   EQU   *
         MVI   VOLUME,C'*'             get all controllers
*                                      filtering is done in CACHEMN1
UCBSCAN  EQU   *
         CLI   MVSVERS,C'4'            is product MVS SP4 ESA 4 or >
         BL    PRESP4                  no;  go to pre-SP4 logic
*
* -- This section of code invokes the extended UCB scan services via
* -- the UCBSCAN macro.  This handles dynamic UCBs and 4 digit addr.
* -- This macro was new with MVS 4.1.
*
         UCBSCAN COPY,WORKAREA=WORKX,UCBAREA=UCB48,                    X
               DEVCLASS=DASD,DYNAMIC=YES,RANGE=ALL
         LTR   R15,R15                 WAS A DASD UCB FOUND
         BNZ   EXIT                    NO DASD UCB FOUND FOR VOL
         LA    R8,UCB48                ELSE GET ADDRESS PASSED BACK
         B     UCBRETND                branch around code for old svcs
*
* -- This section of code is to invoke the UCB scan services for
* -- MVS systems prior to Version 4.  The UCBSCAN macro was new with
* -- DFP 3.?  and will abend with a 0D6 abend if executed on pre 3.2?
*
PRESP4   L     R14,CVTPTR              ADDR OF CVT
         L     R15,CVTUCBSC-CVTMAP(,R14) address of ucb scan services
         LA    R1,P1                   LOAD ADDRESS OF PARMLIST
         OI    P3,X'80'                SET END OF PARMLIST
         BALR  R14,R15                 CALL UCB LOOKUP ROUTINE
         LTR   R15,R15                 WAS A DASD UCB FOUND
         BNZ   EXIT                    NO DASD UCB FOUND FOR VOL
         L     R8,UCBA                 ELSE GET ADDRESS PASSED BACK
UCBRETND EQU   *
         USING UCBOB,R8                DSECT
         TM    UCBSTAT,UCBONLI         DEVICE ONLINE???
         BNO   UCBSCAN                 TRY AGAIN
         TM    UCBSTAT,UCBCHGS         DEVICE GOING OFFLINE???
         BO    UCBSCAN                 TRY TRY AGAIN
GOTONE   EQU   *
         MVC   TBCHAN,UCBCHAN          UNIT ADDRESS
         CLC   UCBCHAN,TOX         IF UCBCHAN > TOX  IT IS OUT OF RANGE
         BH    UCBSCAN
         CLC   UCBCHAN,FROMX       IF UCBCHAN < FROMX    OUT OF RANGE
         BL    UCBSCAN
CKVOLSER EQU   *
         L     R1,LENVOL               GET LENGTH OF ARGUMENT
         CH    R1,ZERO                 WAS VOLUME ENTERED
         BE    NOVOLCHK                NO   BYPASS THE VOLSER COMPARE
         CLI   VOLUME,C'*'             INCLUDE ALL VOLUMES???
         BE    NOVOLCHK                YES SO BYPASS COMPARISON
         L     R1,LENVOL               GET LENGTH OF ARGUMENT
         BCTR  R1,0                    DECREMENT LEN BY 1
         EX    R1,CLCVOL               EXECUTE THE COMPARE OF VOLUMES
         BNE   UCBSCAN                 IF NO MATCH TRY ANOTHER UCB
         B     NOVOLCHK                TRY AGAIN
CLCVOL   CLC   UCBVOLI(0),VOLUME       CHECK AGAINST PANEL VALUE
NOVOLCHK MVC   TBVOL,UCBVOLI           VOLSER IN UCB
         LA    R1,UCBVOLI              VOLSER IN UCB
         SR    R1,R1
         IC    R1,UCBUNTYP         LOAD UNIT TYPE DEVICE CODE FIELD
         SLL   R1,2                MULTIPLY BY 4 FOR TABLE ENTRIES
         LA    R3,DEVNM            GET START OF DEVICE NAME TABLE
         AR    R1,R3               AND ADD TO CORRECT OFFSET
         MVC   TBDEVT(4),0(R1)     LOAD DEVICE TYPE FROM TABLE
         TBADD VOLTABLE                ADD A ROW TO SPACE TABLE
         B     UCBSCAN                 LOOP UNTIL ALL UCB'S FOUND
         CNOP  0,4
TBCLPRM  DC    A(TBCLOSE)
         DC    A(VOLTABLE+X'80000000')
EXIT     EQU   *
         LA    R1,TBCLPRM
         L     R15,SAVEISP
         BALR  R14,R15
QWIKEXIT EQU   *
         L     R13,SAVE+4
         RETURN (14,12),RC=(15)
         EJECT
         COPY  DMFUNCT
WORKADR  DC    PL3'0'
WORK     DC    CL4'0000'
FROMX    DS    XL2
TOX      DS    XL2
*------------------------------------------------------------------
*-- The following work areas are used by the UCBSCAN macro.
*
         DS    0F
WORKX    DC    100X'00'
UCB48    DS    CL48
*------------------------------------------------------------------
*-- The following work areas are used by the 'old' style invocation
*-- of the UCB scan service routines.
*
         DS    0F
UCBA     DS    A
DEV      DS    XL1
         DS    0F
P1       DS    A
P2       DS    A
P3       DS    A
*------------------------------------------------------------------
MVSVERS  DC    C'0'
*
DEVNM    DC    CL4'....'               00 (00) - UNASSIGNED
         DC    CL4'2311'               01 (01) - 2311 DISK
         DC    CL4'2301'               02 (02) - 2301 DRUM
         DC    CL4'2303'               03 (03) - 2303 DRUM
         DC    CL4'2302'               04 (04) - 2302 DISK FILE
         DC    CL4'2321'               05 (05) - 2321 DATA CELL
         DC    CL4'2305'               06 (06) - 2305-1
         DC    CL4'2305'               07 (07) - 2305-2
         DC    CL4'2314'               08 (08) - 2314 DISK
         DC    CL4'3330'               09 (09) - 3330 DISK
         DC    CL4'3340'               10 (0A) - 3340
         DC    CL4'3350'               11 (0B) - 3350 DISK
         DC    CL4'3375'               12 (0C) - 3375
         DC    CL4'3330'               13 (0D) - 3330-11 DISK
         DC    CL4'3380'               14 (0E) - 3380
         DC    CL4'3390'               15 (0F) - 3390
         SPACE 2
         ORG   *-193
TRANTBL  DS    CL193
         DC    X'0A0B0C0D0E0F'
         ORG   TRANTBL+240
         DC    X'F0F1F2F3F4F5F6F7F8F9'
         ORG   TRANTBL+256
SAVE     DC    18F'0'
ZERO     DC    H'0'
         LTORG
         DSECT
         IEFUCBOB DEVCLAS=DA
         CVT   DSECT=YES,PREFIX=YES
         END   CASHMAN
