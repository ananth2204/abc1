{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011328000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE139.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE139.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\t'", "DS1TRBAL": "b'M\\xf6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x06\\x00\\x0c\\x01\\x07\\x00\\x02\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\t/\\x01\\x01\\t/\\x14Y\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-04-02T00:00:00", "modifydate": "2001-04-02T14:59:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 433    FILE:  139\n\n    ORIGINAL DSNAME:  WSBG.CBT433.FILE139\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    27920   PO\n\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,093 RECORDS\n\nTIME THIS PDS WAS SHIPPED:   04/02/01    14:59:58    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$CONT": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x7f\\x00\\x891\\x7f\\x12\\x00\\x000\\x000\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-13T00:00:00", "modifydate": "1989-11-13T12:00:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "FILE139"}, "text": "$$$$CONT - CONTENTS OF ENTRIES ON THE TAPE.\n\nIf you have any problems or questions about any of the items, give\nme a call and I will try to help you.\n\n          Dennis Longnecker\n          Administrator for the Courts\n          1206 South Quince Street, MS EZ-11\n          Olympia, WA  98504\n\nJESEX008  Program which will scan the jobs JCT and find out the\n          max abend code for the given job.  This program must\n          be in common storage.  I add a entry in IEALPAxx to load\n          my version from a linklist library (SYS2.LINKLIB).\n\n          I think there is one bug with this program . . . it seems\n          that if a job is executing and some of the steps complete\n          but a JCL error occurs later on, the condition codes are\n          not set correctly.\n\nJESEX016  This program works in conjunction with EXIT 8.  It takes\n          whatever data is in the JCTUSER1 field and sends it to\n          the user.\nOACJCT    This is a copy of IEFAJCTB.  Since the JES JCT and the MVS\n          JCT use the same name for some of the fields, and exit 8\n          uses both JCT's there is a compile error if you don't do\n          something about it.\n\nSAS#BLOCK This is a little SAS program which uses a FDR VTOC\n          list and gives recommended blocksizes for the type of\n          device the data set is on.\n\nTERMPROG  This is a CICS program which displays all the terminals\n          signed on the system.  If you put the cursor a terminal\n          and press enter, detailed information about the terminal\n          is displayed.\n\nTESTPRTR  Is a program which tests VTAM printers.  It also looks\n          at the bind image sent and sends a message to the printer\n          telling it what type of printer it is.\n\n          Sample execution JCL:\n\n        //STEP1    EXEC  PGM=TESTPRTR,PARM='FOACSDL9'\n        //SNAP     DD    SYSOUT=*,DCB=(RECFM=VBA,LRECL=125,BLKSIZE=882)\n        //SYSUDUMP DD    SYSOUT=*\n\n          The parm field is the VTAM id.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE139": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x08?\\x01\\x01\\x05?\\x15T\\x002\\x00(\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2001-02-22T15:54:00", "lines": 50, "newlines": 40, "modlines": 0, "user": "WSBG"}, "text": "//***FILE 139 is from Dennis Longnecker from the Administrator      *   FILE 139\n//*           of the Court of the State of Washington.  For         *   FILE 139\n//*           additional information see the member called $$DOC.   *   FILE 139\n//*           This file is in IEBUPDTE SYSIN format and contains    *   FILE 139\n//*           the following members:                                *   FILE 139\n//*                                                                 *   FILE 139\n//*            email:   dennis.longnecker@courts.wa.gov             *   FILE 139\n//*                                                                 *   FILE 139\n//*           JESEX008  EXIT 8 WHICH WILL SCAN THE JOB'S JCT AND    *   FILE 139\n//*                     FIND OUT THE MAX ABEND CODE FOR THE GIVEN   *   FILE 139\n//*                     JOB.  THIS PROGRAM MUST BE IN COMMON        *   FILE 139\n//*                     STORAGE.  I ADD AN ENTRY IN IEALPAXX TO     *   FILE 139\n//*                     LOAD MY VERSION FROM A LINKLIST LIBRARY     *   FILE 139\n//*                     (SYS2.LINKLIB).                             *   FILE 139\n//*                                                                 *   FILE 139\n//*           JESEX016  THIS PROGRAM WORKS IN CONJUNCTION WITH EXIT *   FILE 139\n//*                     8.  IT TAKES WHATEVER DATA IS IN THE        *   FILE 139\n//*                     JCTUSER1 FIELD AND SENDS IT TO THE USER.    *   FILE 139\n//*                                                                 *   FILE 139\n//*           OACJCT    SINCE THE JES JCT AND THE MVS JCT USE THE   *   FILE 139\n//*                     SAME NAME FOR SOME OF THE FIELDS, AND EXIT  *   FILE 139\n//*                     8 USES BOTH JCT'S THERE IS A COMPILE ERROR  *   FILE 139\n//*                     IF YOU DON'T DO SOMETHING ABOUT IT.         *   FILE 139\n//*                                                                 *   FILE 139\n//*           SAS#BLOCK THIS IS A LITTLE SAS PROGRAM WHICH USES A   *   FILE 139\n//*                     FDR VTOC LIST AND GIVES RECOMMENDED         *   FILE 139\n//*                     BLOCKSIZES FOR THE TYPE OF DEVICE THE DATA  *   FILE 139\n//*                     SET IS ON.                                  *   FILE 139\n//*                                                                 *   FILE 139\n//*           TERMPROG  THIS IS A CICS PROGRAM WHICH DISPLAYS ALL   *   FILE 139\n//*                     THE TERMINALS SIGNED ON THE SYSTEM.  IF     *   FILE 139\n//*                     YOU PUT THE CURSOR NEXT TO A TERMINAL NAME  *   FILE 139\n//*                     AND PRESS ENTER, DETAILED INFORMATION       *   FILE 139\n//*                     ABOUT THE TERMINAL IS DISPLAYED.            *   FILE 139\n//*                                                                 *   FILE 139\n//*           TESTPRTR  IS A PROGRAM WHICH TESTS VTAM PRINTERS.  IT *   FILE 139\n//*                     ALSO LOOKS AT THE BIND IMAGE SENT AND SENDS *   FILE 139\n//*                     A MESSAGE TO THE PRINTER TELLING IT WHAT    *   FILE 139\n//*                     TYPE OF PRINTER IT IS.                      *   FILE 139\n//*                                                                 *   FILE 139\n//*           WHOHAS    TSO command to discover enqueues to a       *   FILE 139\n//*                     dataset.  Uses GQSCAN service.  S.Golob     *   FILE 139\n//*                     added code to end the program with an =     *   FILE 139\n//*                     sign, or BYE, or QUIT.  You can adjust      *   FILE 139\n//*                     the code in case any dataset names start    *   FILE 139\n//*                     with these letters.  Ending the program     *   FILE 139\n//*                     with a null command, can't be done if you   *   FILE 139\n//*                     are using TSO Session Manager--at least     *   FILE 139\n//*                     not easily.                                 *   FILE 139\n//*                                                                 *   FILE 139\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JESEX008": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x7f\\x00\\x891\\x7f\\x12\\x00\\x01\\x16\\x01\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-13T00:00:00", "modifydate": "1989-11-13T12:00:00", "lines": 278, "newlines": 278, "modlines": 0, "user": "FILE139"}, "text": "//*\n//*\n//* JES2 USER EXITS . . . Have FUN!\n//*\n//ASM    EXEC ASMXA,LKEDOPT='AC=1',\n//     ASMLB1='SYS1.AMODGEN',\n//     ASMLB2='SYS1.HASPSRC',\n//     ASMLB3='SOFT.PROGRAMS',\n//     SYSCR=VIO,\n//*    LINKPDS='SOFT.LOAD(JESEX008)'\n//     LINKPDS='SYS2.LINKLIB(JESEX008)'\n//ASM.SYSIN  DD  *\n*\n* MODULE NAME: JESEX008\n*\n* DESCRIPTIVE NAME: JES2 EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT\n*\n* AUTHOR: Dennis Longnecker\n*         Administrator for the Courts\n*         1206 South Quince Street, MS EZ-11\n*         Olympia, WA  98504\n*\n* DATE WRITTEN: June 1989\n*\n* SYSTEM: JES 2.2.0\n*\n* PURPOSE: This exit obtains the steps condition code(s) and places\n*          them in the user area of the JCT.\n*\n*          If the job abends, the system abend (or user abend), the\n*          abend code is placed in the JCT.\n*\n*          If the job completes normally, all zero condition codes,\n*          the message 'Condition Code Zero' is placed in the JCT.\n*\n*          Otherwise the first three (3) non-zero condition codes\n*          are placed in the JCT.\n*\n*          I was thinking of modifing the program to obtain some\n*          storage and place the condition codes in the storage\n*          area instead of the JCT.  That way more than 3 condition\n*          codes could be used.  But that could be done later.\n*\n*          I have taken pieces from a couple of programs like this\n*          one and have arrived with this one.  The OUTPUT looks like\n*          the NOTIFY our WYLBUR users get.\n*\n*\n*\n* INVOCATION POINT: JESEX008\n*\n* ENTRY POINT: UEXIT8\n*\n* Registers on input:\n*     R0: Code passed by JES2\n*         =0, Indicates that the JCT has been read from the SPOOL\n*         =4, Indicates that the JCT will be written to the SPOOL\n*     R1: Address of the JCT\n*     R2-R10: N/A\n*     R11: Address of the SSVT\n*     R12: N/A\n*     R13: Address of an OS-Style save area\n*     R14: Return address\n*     R15: Entry address\n*\n* Registers on return:\n*     R0-R1: N/A\n*     R15: A Return code:\n*          =0, Continue normal exit or JES2 processing\n*          =4, Ignore any other exits and continue with normal\n*              processing\n*\n* JES2 macros used:\n*     $ENTRY, $MODEND\n*\n         EJECT\n         COPY $HASPGBL                 COPY HASP GLOBALS\n         EJECT\nJESEX008 $MODULE ENVIRON=USER,                                         C\n               $BUFFER,                                                C\n               $HASPEQU,                                               C\n               $JCT,                                                   C\n               RPL,                                                    C\n               $MIT,\n*\nUEXIT8   $ENTRY BASE=R12                     Exit routine entry point\n*\n         STM   R14,R12,12(R13)                 save callers registers\n         LR    R12,R15                       load local base register\n         LR    R10,R1                              get address of JCT\n*\n*  check to see if there is a jct , if it is for a batch job and\n*  if notify was requested.  if not, return.\n*\n         SPACE 1\n         LTR   R0,R0                               is JCT being read?\n         BZ    RETURN                                     yes, return\n*\n         USING JCT,R10\n*\n         CLI   JCTJOBID,C'J'                     is this a batch job?\n         BNE   RETURN                                    nope, return\n*\n         CLI   JCTTSUID,C' '                    was notify requested?\n         BE    RETURN                                    nope, return\n*\n         TM    JCTJBOPT,JCTXBACH               is this batch monitor?\n         BO    RETURN                                     yes, return\n*\n         MVI   JCTUSER1,C' '\n         MVC   JCTUSER1+1(59),JCTUSER1\n         MVC   JCTUSER1(20),ZEROMSG                  init the message\n*\n         MVI   JCTUSER0,X'80'                    set flag for exit 16\n*\nGETCVT   EQU   *\n*\n*  Time to chase some pointers . . . .\n*     The toe bone is connected to the foot bone . . .\n*     The foot bone is connected to the leg bone . . .\n*\n* -----------------------------------------------------\n*                           --->SCT-->STEP CC,STEPNAME\n* 16-->CVT-->TCB-->JSCB-->JCT-->ACT-->DEFAULT ACCOUNT ID\n*                    --->SSIB-->REAL JOB NUMBER\n* -----------------------------------------------------\n*\n         L     R15,16                                   the beginning\n         L     R15,0(R15)                            addr of next TCB\n         L     R15,4(R15)                             addr of our TCB\n         L     R15,TCBJSCB(R15)                          addr of JSCB\n         L     R15,JSCBACT(R15)                          addr of SSIB\n         L     R15,JSCBJCT(R15)                       addr of the JCT\n*\n* These addresses I got from somewhere\nTCBJSCB  EQU   X'B4'         OFFSET INTO TCB OF JSCB ADDRESS\nJSCBACT  EQU   X'15C'        OFFSET INTO JSCB OF ACTIVE JSCB ADDRESS\nJSCBJCT  EQU   X'104'        OFFSET INTO ACTIVE JSCB OF OS JCT ADDRESS\n*\n*\n         USING INJMJCT-16,R15\n*\nABENDCHK EQU   *\n         TM    JCTJSTAT,JCTABEND                    is this an abend?\n         BO    ABENDFMT                                   yes, branch\n*\n         L     R6,JCTSDKAD                         pointer to 1st SCT\n         USING INSMSCT-16,R6\n*\n         LA    R8,JCTUSER1                    point to next open slot\n         LA    R4,3                            enough for x stepnames\n*\nSCTLOOP  EQU   *\n         SRL   R6,8   make it good\n         LTR   R6,R6                                anymore pointers?\n         BZ    RETURN                                    nope, branch\n*\nSCTLOOP2 EQU   *                                     skip past prefix\n         TM    SCTSTEND,SCTSTPND                   step executed yet?\n         BNZ   NOSKIP                                     yes, branch\n         B     SKIPSTEP  >-------->+                    skip this sct\n*                                  \u00a6\nNOSKIP   EQU   *                   \u00a6\n         TM    SCTSTEND,X'80'      \u00a6                    step skipped?\n         BZ    SKIPSTEP  >-------->+                      yep, branch\n         LH    R5,SCTSEXEC         \u00a6              step condition code\n         LTR   R5,R5               \u00a6                       step okay?\n         BNZ   SCTFMT  >----->+    \u00a6         nope, branch non-zero CC\n*                             \u00a6    \u00a6\nSKIPSTEP EQU   *         <--------<+\n         L     R6,SCTANSCT    \u00a6                         point to next\n         B     SCTLOOP        \u00a6                         keep looking!\n*                             \u00a6\n*   Okay, this step had a non-zero CC...let's process it\n*                             \u00a6\nSCTFMT   EQU   *       <-----<+\n         LA    R7,JCTUSER1                       first place for code\n         CR    R7,R8                         are we at the beginning?\n         BE    SCTFIRST                                   yes, branch\n         MVC   0(2,R8),=C', '                          make it pretty\n         LA    R8,2(R8)                              go up two places\n         B     SCTGO\nSCTFIRST EQU   *\n         MVC   JCTUSER1(20),=CL20' '              make it real pretty\n*\nSCTGO    EQU   *\n         MVC   0(8,R8),SCTSNAME                             step name\n         CLI   0(R8),C' '                        any step name given?\n         BNE   REALSTEP                                   yes, branch\n         MVC   0(8,R8),SCTPGMNM                      move in PGM name\n*\nREALSTEP MH    R5,=H'10'                           multiply CC by ten\n         CVD   R5,DWORD                                    convert it\n         MVC   9(3,R8),=C'CC='                      move eye readable\n         UNPK  12(5,R8),DWORD+5(3)               place CC into output\n         MVC   16(2,R8),=C'  '                clean up the pack stuff\n*\n*  Get ready for next entry\n*\n         LA    R8,16(R8)                           point to next slot\n         L     R6,SCTANSCT                          point to next SCT\n*\n*  We can only handle so many entries.  If we have reached the limit\n*  fall through and put in some elipses so that the user knows there\n*  was more that we have not checked.\n*\n         BCT   R4,SCTLOOP              continue for STEPNUM STEPNAMES\n         MVC   0(4,R8),=C' ...'                   may be more elipses\n         B     RETURN                                go send message!\n*\nABENDFMT EQU   *\n*\n         L     R5,JCTACODE                          system abend code\n         LA    R5,0(R5)\n         MVC   JCTUSER1(20),ABENDMSG          move \"ABENDED WITH A U\"\n         LR    R5,R5                            move to temp register\n         SRL   R5,12\n         LTR   R5,R5                                    system abend?\n         BZ    CONVERT                                   nope, branch\n*\n*  handle system abend here                convert one byte at a time\n*\n         MVI   JCTUSER1+15,C'S'                  mark as system abend\n         LR    R7,R5\n         SRL   R7,8                                      make it high\n         N     R7,=XL4'F'                                order nibble\n         LA    R7,HEXTABLE(R7)                             convert it\n         MVC   JCTUSER1+16(1),0(R7)                           move it\n*\n         LR    R7,R5                   2nd byte        get abend code\n         SRL   R7,4                             isolate second nibble\n         N     R7,=XL4'F'\n         LA    R7,HEXTABLE(R7)                             convert it\n         MVC   JCTUSER1+16+1(1),0(R7)                         move it\n*\n         LR    R7,R5                   3rd byte        get abend code\n         N     R7,=XL4'F'\n         LA    R7,HEXTABLE(R7)                             convert it\n         MVC   JCTUSER1+16+2(1),0(R7)                         move it\n         B     SKIPUSAB           >---------+         skip user abend\n*                                           \u00a6\nCONVERT  EQU   *                            \u00a6\n         CVD   R5,DWORD                     \u00a6       user abend in R5\n         OI    DWORD+7,X'0F'                \u00a6                 sign it\n         UNPK  JCTUSER1+16(5),DWORD+5(3)    \u00a6    place in output area\n         MVC   JCTUSER1+16(4),JCTUSER1+17+1 \u00a6\n         MVI   JCTUSER1+16+4,C' '           \u00a6            clean it up!\n*                                           \u00a6\nSKIPUSAB EQU   *                 <----------+\n*\nRETURN   EQU   *\n         SLR   R15,R15                             set return code\n         L     R14,12(R13)             LOAD RETURN ADDRESS\n         LM    R0,R12,20(R13)          RESTORE REGISTERS\n         BR    R14                     RETURN\n         EJECT\n         LTORG\nHEXTABLE DC    CL16'0123456789ABCDEF'\nABENDMSG DC    CL20'Abended With A U'\nZEROMSG  DC    CL20'Condition Code Zero'\nDWORD    DC    D'0'\nFWORD    DC    F'0'\n        $MODEND\n*\n*  OACJCT is the same as IEFJCTB but with labels JCTID,\n*  JCTJNAME, AND JCTJMR commented out because they are used\n*  in the JES JCT.\n*\n         OACJCT\nIEFASCTB DSECT ,\n         IEFASCTB\n         END\n//*\n//* Linkedit control cards for the JES exit(s)\n//LKED.SYSIN DD  *\n ORDER JESEX008\n NAME JESEX008(R)\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JESEX016": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x7f\\x00\\x891\\x7f\\x12\\x00\\x00\\xd8\\x00\\xd8\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-13T00:00:00", "modifydate": "1989-11-13T12:00:00", "lines": 216, "newlines": 216, "modlines": 0, "user": "FILE139"}, "text": "//*\n//*\n//* JES2 USER EXITS . . . Have FUN!\n//*\n//ASM    EXEC ASMXA,LKEDOPT='AC=1',\n//     ASMLB1='SYS1.AMODGEN',\n//     ASMLB2='SYS1.HASPSRC',\n//     SYSCR=VIO,\n//*    LINKPDS='SOFT.LOAD(JESEX016)'\n//     LINKPDS='SYS2.LINKLIB(JESEX016)'\n//ASM.SYSIN  DD  *\n*\n*\n* MODULE NAME: JESEX016\n*\n* DESCRIPTIVE NAME: JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT\n*\n* AUTHOR: Dennis Longnecker\n*         Administrator for the Courts\n*         1206 South Quince Street, MS EZ-11\n*         Olympia, WA  98504\n*\n* DATE WRITTEN: June 1989\n*\n* SYSTEM: JES 2.2.0\n*\n* PURPOSE: This exit obtains the steps condition code(s) that exit 8\n*          placed into the JCTUSER area and sends it via a $WTO to\n*          the user\n*\n*          I assume that if exit 8 was not called, the job had a JCL\n*          error and I issue such a message.  Otherwise, I send the\n*          message in JCTUSER1.\n*\n*          I was going to have the exit return not send my message\n*          and have JES2 issue his message if exit 8 was not called\n*          but JES's message did not look as nice as mine and I wanted\n*          some consitancy in the message.\n*\n*\n* INVOCATION POINT: JESEX016\n*\n* ENTRY POINT: UEXIT16\n*\n* Registers on input:\n*     R0: Code passed by JES2\n*         =0, Indicates that this is first message\n*         =4, Indicates that this is not the first message\n*     R1: Address of a three word parameter list\n*         Word 1 (+0) address of the message that is to be sent\n*         Word 2 (+4) address of the $WTO parameter list\n*         Word 4 (+8) address of the JCT\n*     R2-R10: N/A\n*     R11: Address of the HCT\n*     R12: N/A\n*     R13: Address of an OS-Style save area\n*     R14: Return address\n*     R15: Entry address\n*\n* Registers on return:\n*     R0 : N/A\n*     R1 : Address of the 3-word parameter list\n*     R2-R14: N/A\n*     R15: A Return code:\n*          =0, Continue normal exit or JES2 processing\n*          =4, Ignore other exit routines and to continue notify\n*          =8, Tells JES2 not to issue notify message\n*\n* JES2 macros used:\n*     $ENTRY, $MODEND, $SAVE, $RETURN, $WTO, $GETBUF, $FREEBUF\n*\n         COPY $HASPGBL\n*\nJESEX016 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 NOTIFY PROCESSOR',                          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP HCT DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               RPL,                                                    X\n               RESPA,                                                  X\n               $JOE,                                                   X\n               $PADDR,                                                 X\n               $CMB\n*\nUEXIT16  $ENTRY BASE=12\n*\n         $SAVE\n*\n         LR    R12,R15                       load local base register\n         L     R7,4(R1)                             get the $WTO list\n         L     R10,8(R1)                             load JCT address\n         USING CMBWTOPL,R7                               its ours now\n         USING JCT,R10                                   its ours now\n*\n         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES            get workbuffer\n         LR    R5,R1                           load address of buffer\n         USING NOTEMSG,R5              set addressability to WTO area\n*\n         LA    R9,NOTE                    r9 gets the dsect NOTE area\n         MVI   NOTE,C' '                            clean up the area\n         MVC   NOTE+1(150),NOTE\n*\n         CLI   JCTUSER0,X'80'                  did exit 8 get called?\n         BE    SENDMSG             nope, don't move in message from 8\n*\n*  Exit 8 was not called, determine if job JCL'ed\n*\n         MVC   NOTECOMM(56),JCLERROR        load a default message in\n         B     NONZMSG                             go put the time in\n*\nSENDMSG  EQU   *\n         MVC   NOTECOMM(56),JCTUSER1            exit 8 put codes here\n*\nNONZMSG  EQU   *                                         get the time\n         TIME  DEC                                                and\n         ST    R0,FWORD                                          make\n         MVI   FWORD+3,X'0C'                                       it\n         UNPK  DWORD(7),FWORD(4)                               pretty\n         MVC   TIME(2),DWORD                                       to\n         MVC   TIME+3(2),DWORD+2                                 look\n         MVC   TIME+6(2),DWORD+4                                   at\n         MVC   NOTETIME(8),TIME                    move the time over\n*\n         MVI   NOTETIM1,C'('\n         MVI   NOTETIM2,C')'\n*\n         LA    R4,NOTEEND                        go to end of message\nADUSR    EQU   *       <---------+\n         CLI   0(R4),C' '        \u00a6                     is it a blank?\n         BNE   ADUSR1    >----+  \u00a6                         no, branch\n         S     R4,=F'1'       \u00a6  \u00a6                     adjust pointer\n         B     ADUSR   >------\u00a6--+                    go do it again!\n*                             \u00a6\nADUSR1   DS    0H        <----+\n         LA    R4,1(R4)                       go forward to the space\n         MVC   0(8,R4),TRAILER\n         MVC   8(8,R4),CMBUSER              move over planned user id\n*\n         LA    R4,NOTEEND                       GOT TO END OF MESSAGE\nADUSR2   EQU   *       <---------+\n         CLI   0(R4),C' '        \u00a6                     is it a blank?\n         BNE   ADUSR3    >----+  \u00a6                         no, branch\n         S     R4,=F'1'       \u00a6  \u00a6                     adjust pointer\n         B     ADUSR2  >------\u00a6--+                    go do it again!\n*                             \u00a6\nADUSR3   DS    0H        <----+\n         LA    R4,1(R4)                       go forward to the space\n         MVC   0(8,R4),TRAILER2\n*\nSENDIT   EQU   *\n         MVC   NOTESEND(4),SENDCOMM            move SEND command over\n         MVC   NOTECOMP,COMPLETE                 \"  job has completed\n         MVC   NOTEJOB(8),JCTJOBID               \"         job number\n         MVC   NOTENAME(8),JCTJNAME              \"           job name\n         LA    R4,127                            \"  length of message\n         LA    R7,NOTE\n         $WTO  (R7),(R4),JOB=NO,TYPE=SVC34,CMB=NO\n*\n*\nEXIT     EQU   *\n         $FREEBUF (R5)                         free the buffer we got\n         LA    R15,8        set return code so jes does not issue wto\n         $RETURN RC=(R15)                                     go home\n         EJECT\n*\n* DATA AREAS\n*\nSENDCOMM DC    C'SE ',X'7D'\nTRAILER  DC    X'7D',C',USER=('\nTRAILER2 DC    C'),LOGON '\n*\nQUOTE    DC    X'7D'\nDWORD    DC    D'0'\nFWORD    DC    F'0'\nJCLERROR DC    CL(NOTEXSIZ)'JCL Error'\nCOMPLETE DC    C'Has Completed '\n*\nTIME     DC    CL8'  :  :  '\n*\n         LTORG\n         $MODEND\n*\nNOTEMSG  DSECT\n         DS    CL104                          jes uses this area!!!\nNOTE     DS    CL160\n         ORG   NOTE                            send us back to doe!\n         DS    CL2               blanks\nNOTESEND DS    CL4               <se '>\nNOTEJOB  DS    CL8               <JOB xxxx>\n         DS    CL1\nNOTENAME DS    CL8               <jobname >\n         DS    CL1\nNOTECOMP DS    CL14              <has completed >\nNOTETIM1 DS    CL1\nNOTETIME DS    CL8               <hh:mm:ss >\nNOTETIM2 DS    CL1\n         DS    CL1\nNOTEXSIZ EQU   128-*+NOTE\nNOTESNUM EQU   NOTEXSIZ/18       how many steps?\nNOTECOMM DS    CL(NOTEXSIZ)      filler\nNOTEEND  EQU   *                          end of the thing\n         DS    CL50\n*\n         END\n//*\n//* Linkedit control cards for the JES exit(s)\n//LKED.SYSIN DD  *\n ORDER JESEX016\n NAME JESEX016(R)\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OACJCT": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x7f\\x00\\x891\\x7f\\x12\\x00\\x01\\\\\\x01\\\\\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-13T00:00:00", "modifydate": "1989-11-13T12:00:00", "lines": 348, "newlines": 348, "modlines": 0, "user": "FILE139"}, "text": "* THIS IS A COPY OF IEFAJCTB WITH A FEW LABELS BLANKED OUT\n* %GOTO JCTPROLG;  /*                                          @G743P2E\n         MACRO\n         OACJCT\n**/\n*%JCTPROLG:;\n*/********************************************************************/\n*/*                                                          @G743P2E*/\n*/*                                                          @G743P2E*/\n*/*                            IEFAJCTB                      @G743P2E*/\n*/*                                                          @G743P2E*/\n*/* DESCRIPTIVE NAME -  JOB CONTROL TABLE                    @G743P2E*/\n*/*                                                          @G743P2E*/\n*/* STATUS     - OS/VS2 JBB2220                                  @L1C*/\n*/*                                                          @G743P2E*/\n*/* INVOCATION -                                             @G743P2E*/\n*/*             BAL  - SPECIFY: IEFAJCTB                     @G743P2E*/\n*/*             PL/S - SPECIFY: %INCLUDE SYSLIB(IEFAJCTB)    @G743P2E*/\n*/*                                                          @G743P2E*/\n*/*                                                          @G743P2E*/\n*/* FUNCTION   - THIS MACRO MAPS THE JOB CONTROL TABLE.      @G743P2E*/\n*/*                                                          @G743P2E*/\n*/* CHANGE ACTIVITY  -  L1                                       @L1C*/\n*/*                                                                  */\n*/* $L1 = SWABOVE JBB2220 850603 PDU2: SWA ABOVE THE LINE        @L1A*/\n*/*                                                                  */\n*/********************************************************************/\n*/*             CODE HAS BEEN ADDED FOR THE FOLLOWING SUPPORT        */\n*/*             CODES:                                               */\n*/*                                                          @G743P2E*/\n*/*            ADD LABEL IEFAACTB TO ASSEMBLER VERSION FOR   @ZA44001*/\n*/*            ADDRESSABILITY TO THE ACT                     @ZA44001*/\n*/*            RESTORE BIT NAME JCTPERFM IN JCTSTAT2 AND     @ZA44031*/\n*/*            RESTORE BYTE NAME JCTPRFMF FOR JES3 AND       @ZA44031*/\n*/*            INITIATOR USE                                 @ZA44031*/\n*/*            ADD LABEL ACTACCNT TO ASSEMBLER VERSION       @ZA52459*/\n*/*            ADDED FIELDS JCTSISO AND JCTSWAUP                 @L1A*/\n*/*------------------------------------------------------------------*/\n* %GOTO  JCTBSL; /*                                            @G743P2E\n DS 0D\nINJMJCT  EQU   *\nJCTDSKAD DS    CL3                      SVA OF THIS JCT\nJCTIDENT DS    CL1                      JCT ID = 0\n*CTID EQU 0\nJCTJSRNO DS    CL1                      INTERNAL JOB SERIAL NUMBER\nJCTJBLBS DS    0C                       JOBLIB SWITCH  BITS 0-3\nJCTJSTAT DS    1C                  JOB STATUS INDICATORS\nJCTJSTPC EQU   32 BIT-2/JOB STEP CANCELLED BY CONDITION CODES\nJCTABEND EQU   8                   BIT 4 - JCT ABEND BIT           HW16\nINCMSTS  EQU   4                        BIT-5/JOB FAILED BIT\n*                                        BIT 5 = 1 JOB FAILED\n*                                        BIT 6 = 0 GO JOB\nINDMCTLG EQU   2                         BIT 6 = 1 CATALOG JOB\nINCMCAT  EQU   2                        BIT-6/CATALOG BIT\nINCMNSET EQU   1                        BIT7/RESERVED          @ZA04561\nJCTJMGPO DS    CL1                      MESSAGE CLASS\nJCTJMGLV DS    0C 4 BITS FOR MESSAGE LEVEL -SET BY IEFVJA\nINCMMGL1 EQU   16                  JCL  MESSAGE LEVEL=1 BIT         I68\nINCMMGL2 EQU   32                  JCL  MESSAGE LEVEL=2 BIT         I68\nINCMALL  EQU   128           ALLOCATION MESSAGE LEVEL=1 BIT         I68\nJCTJPRTY DS    1C                       4 BITS FOR JOB PRIORITY\n         DS    CL8                      JOBNAME\nJCTJTPTN DS    CL8                      T/P TERMINAL NAME\nJCTPDIP  DS    CL4                      PDI CORE POINTER         Y02670\nJCTGDGNT DS    CL3                      GDG NAME TABLE           Y02670\nJCTJCSMF DS    CL1                      JOB CLASS SPECS FOR SMF  Y02668\n*                                       TERMINATION ROUTINES     Y02668\nJCTSDKAD DS    CL4                      SVA OF FIRST SCT\nJCTJCTX  DS    CL4                      SVA OF JCTX            @Z40RPSM\nJCTACTAD DS    CL4                      SVA OF FIRST ACT\nJCTSMRBA DS    CL8                      RBA SYSTEM MSG D.S.      Y02641\nJCTSCT   DS    CL1                      STEP NO. OF FAILING STEP Y02641\n         DS    CL1                      RESERVED\nJCTJDPCD DS    CL2                      DEPENDENCY CODE\nJCTJDPOP DS    CL2                      DEPENDENCY OPERATOR\n         DS    CL28                     ROOM FOR 7 MORE DEPS\nJCTRSW1  DS    C CHECKPOINT/RESTART SWITCHES\nJCTWARMS EQU   128 BIT0 - WARM START\nJCTSTERM EQU   64  STEP TERMINATION HAS BEGUN (PCP WARM START ONLY)AACA\nJCTCONTR EQU   32 BIT 2 - JOB IS ELIGIBLE FOR CONTINUE RESTART   Y02641\n*                         PROCESSING\nJCTCKFT  EQU   16 BIT  3 - CHECKPOINT TAKEN FOR THIS STEP\nJCTCKPTR EQU   8 BIT   4 - CHECKPOINT RESTART (INTRA-STEP) TO BE DONE\nJCTSTEPR EQU   4 BIT   5 - STEP RESTART TO BE DONE\n* BITS 6AND 7 MUST BE ZERO\nJCTRSW2  DS    C CHECKPOINT/RESTART SWITCHES\nJCTSYSCK EQU   128 BIT 0 - SYSCHK DD STATEMENT PRESENT\nJCTNARST EQU   64 BIT 1 - JOB INELIGIBLE FOR AUTOMATIC RESTART   Y02641\nJCTNORST EQU   32 BIT 2 - NO RESTART TO BE DONE\nJCTNOCKP EQU   16 BIT 3 - NO CHECKPOINTS TO BE TAKEN\nJCTRESTT EQU   8 BIT  4 - DO RESART IF NECESSARY\nJCTDSOCR EQU   4 BIT  5-  RESERVED                                M2344\nJCTDSOJB EQU   2 BIT  6-  RESERVED                                M2344\n***********************************************************************\n*                                                                    **\n*        IN ORDER TO IMPLEMENT MVT IT HAS BEEN NECESSARY TO          **\n*        ADD THE FOLLOWING FIELDS TO THE JCT.  TO AVOID CAUSING      **\n*        ERRORS IN THE CASE OF THE REASSEMBLING OF ALREADY EXIST-    **\n*        ING MODULES WHICH REFERENCE THESE FIELDS, THEY ARE GEN-     **\n*        ERATED HERE ONLY AS COMMENTS CARDS.  NOTE THAT DUE TO THE   **\n*        FACT THAT THIS MACRO GENERATES THE ACT IMMEDIATELY AFTER    **\n*        THE JCT, IT IS NOT POSSIBLE TO REFERENCE THESE FIELDS BY    **\n*        CODING THEM AFTER THE MACRO.  FOR NOW THEY MUST BE REF-     **\n*        ERENCED BY DISPLACEMENT (WHICH IS GIVEN BELOW), PREFER-     **\n*        ABLY THROUGH THE USE OF EQUATES AND THE SYMBOLS BELOW.      **\n*        NOTE ALSO THAT THIS MACRO IS NOT VALID FOR REFERENCING      **\n*        THE ACT UNTIL THESE NEW FIELDS HAVE ACTUALLY BEEN           **\n*        INCORPORATED.                                               **\n*                                                                    **\n***********************************************************************\n*                                                                     *\n*JCTDETDA DS    CL4                     SVA OF DSENQ TABLE            *\n*                                       (DISPLACEMENT = 88 (DECIMAL)  *\n*JCTEQREG DS    CL2                     REGION PARAMETER (BINARY)     *\n*                                       (DISPLACEMENT = 92 (DECIMAL)  *\n*                                                                     *\n***********************************************************************\n         DS    6C ROOM FOR THE ABOVE\nJCTQIDNT DS    C IDENTITY OF Q FOR  JOB (MVT ONLY)\nJCTSNUMB DS    C NUMBER OF STEPS RUN (MVT ONLY)\nJCTSTIOT DS    F SVA OF COMPRESSED TIOT (MVT ONLY)\n*                IN PCP-C/R SAVE OF SCATALLY BY IEFRAPCP           AACA\nJCTDEVT  DS    F DEVICE TYPE OF CHECKPOINT DATA SET\nJCTCKTTR DS    3C SVA OF JFCB FOR CHECKPOINT DATA SET\nJCTNTRK  DS    C  NUMBER OF TRACKS ON SYS1.JOBQE USED BY         PTM258\n*                   THE JOB -SET AND USED BY THE INIT./TERM.     PTM258\nJCTNRCKP DS    H NUMBER OF CHECKPOINTS TAKEN\nJCTVOLSQ DS    C VOLUME SEQUENCE NUMBER FOR CHECKPOINT DATA SET\nJCTJSB   DS    C JOB STATUS SWITCHES                             Y02641\nJCTJSBIN EQU 8   JOB ENTERED INTERPRETATION                      Y02641\nJCTJSBAL EQU 4   JOB ENTERED ALLOCATION                          Y02641\nJCTJSBEX EQU 2   JOB ENTERED EXECUTION                           Y02641\nJCTJSBTM EQU 1   JOB ENTERED TERMINATION                         Y02641\nJCTSSTR  DS    F SVA OF SCT FOR FIRST STEP TO BE RUN\nJCTSTAT2 DS    1C                  ADDITIONAL STATUS INDICATORS    O102\nJCTSPSYS EQU   128  BIT 0 - =1 INDICATES SPOOLED SYSIN FOR JOB     O102\n*                             SET BY IEFVDA                        O102\n*                             TESTED BY IEESD575(QUEUE ALTER)-     O102\n*                             MVT AND MFT ONLY                     O102\nJCTADSPC EQU   64   BIT 1 - =1 INDICATES ADDRSPC=REAL            Y01029\n*                             SET BY VEA AND VJA                 Y01029\nJCTENDIT EQU   32                 SET BY IEFSD41Q,IEFWEXTA       A25134\n*                                 TESTED BY IEFDSOWR,IEFYNIMP    A25134\n*                                 JOB TERMINATION INDICATOR      A25134\nJCTSWSM  EQU   16   BIT 3 - =1 INDICATES WARM START MESSAGE       M3144\n*                             'INIT=JOBNAME' IS TO BE SUPPRESSED  M3144\n*                             FOR THIS JOB                        M3144\n*                             SET BY IEFVHH                       M3144\n*                             TESTED BY IEFSD305                  M3144\nJCTPERFM EQU   8  BIT 4=1 PERFORM SPECIFIED ON THE JOB CARD    @ZA44031\nJCTBLP   EQU   4              0-BLP WILL BE TREATED AS NL        Y02668\n*                             1-BLP WILL BE TREATED AS BYPASS    Y02668\n*                             LABEL PROCESSING                   Y02668\nJCTSISO  EQU   2              SYSIN/SYSOUT SWA BELOW THE\n*                             LINE INDICATOR                       @L1A\nJCTSWAUP EQU   1              SWA ABOVE THE LINE INDICATOR         @L1A\nJCTCKIDL DS    C LENGTH OF CHECKPOINT ID\nJCTCKIDT DS    CL16 CHECKPOINT IDENT                               AACA\n*******************************************************************AACA\n*        THE FOLLOWING SYSTEMS MGMT FACILITIES SUBFIELDS MUST      AACA\n*        BEGIN ON A HALF WORD BOUNDARY                             AACA\n*******************************************************************AACA\n         DS    CL3  SVA OF JMR                 *** SYSTEMS ***     AACA\nJCTJMRD  DS    CL1  DATE DIFFERENCE STEP START-JOB START *         AACA\nJCTJMROP DS    CL1  SMF OPTION SWITCHES        * MANAGEMENT        AACA\nJCTJMRCL DS    CL1  SMF CANCELLATION CONTROL STATUS      *         AACA\nJCTJMRTL DS    CL3  JOB TIME LIMIT             *  FACILITIES       AACA\nJCTJMRSS DS    CL3  STEP START TIME OF DAY               *         AACA\nJCTJMRJT DS    CL3  JOB START TIME OF DAY      *  SUBFIELDS        AACA\nJCTJMRJD DS    CL3  JOB START DATE             *****************   AACA\nJCTSRBT  DS    CL4  ACCUMULATED SRB TIME FOR JOB                 Y02652\n         DS    CL1  RESERVED\nJCTSSD   DS    CL3      STEP START DATE                          Y02668\nJCTUSER  DS    CL7    USER ID FIELD. SET BY C/I MODULE IEFVJA  @Z40RPTH\n*                     AS A RESULT OF A USER KEYWORD ON THE JOB @Z40RPTH\n*                     STATEMENT.                               @Z40RPTH\nJCTPRFMF DS    CL1     PERFORMANCE GROUP NUMBER                @ZA44031\nJCTACODE DS    CL4     ABEND CODE FIELD                          Y02641\nJCTVULDP DS    CL4     POINTER TO VOLUME UNLOAD TABLE            Y02670\nJCTLNGTH EQU   *-INJMJCT   JCT LENGTH                             20001\n***************************************************************** 20001\n**                                                                   **\n**                       ACCOUNT CONTROL TABLE                       **\n**                                                                   **\n***********************************************************************\nIEFAACTB DS    0D                                              @ZA44001\nACTDSKAD DS    CL3                 SVA OF THIS ACT\nACTIDENT DS    CL1                 TABLE ID  ACT = 16\nACTID EQU 1\nACTNEXT  DS    CL4                 SVA OF NEXT ACT\nACTPRGNM DS    CL20                PROGRAMMERS NAME\nACTJTIME DS    CL3                 JOB RUNNING TIME\nACTJNFLD DS    1C                  NBR OF JOB ACCOUNTING FIELDS\nACTACCNT DS    CL144          THE REST OF THE FIELDS HAVE THE  @ZA52459\n*                                  FOLLOWING FORMAT FOR JOB ACCOUNTING-\n*                                  1 BYTE- LENGTH OF FIELD\n*                                  VARIABLE BYTES- CONTENTS OF FIELD\n*                                    (REPEATED FOR N FIELDS)\n*                                  STEP ACCOUNTING HAS THE FOLLOWING\n*                                  FORMAT FOR EACH STEP-\n*                                  3 BYTES- MAXIMUM STEP RUNNING TIME\n*                                  1 BYTE- NBR OF FIELDS IN STEP\n*                                  1 BYTE- LENGTH OF FIELD\n*                                  VARIABLE BYTES- CONTENTS OF FIELD\n*                                    (LAST 2 REPEATED N TIMES)\n* THIS SECTION FORMERLY HELD THE SMB MADE OBSOLETE BY AOS/II RELEASE 2\n MEND\n  */ %   JCTBSL: ;\n  DECLARE 1 INJMJCT BASED(JCTPTR),  /* NAME OF TABLE */\n     4 JCTDSKAD PTR(24) BDY (WORD),  /* SVA OF THIS JCT             */\n     4 JCTIDENT CHAR(1),  /* JCT IDENTIFICATION = 0 */\n     4 JCTJSRNO PTR(8),   /* INTERNAL JOB SERIAL NUMBER */\n     4 JCTJSTAT BIT(8),   /* JOB STATUS INDICATORS */\n        6 JCTJBLBS BIT(1),  /* JOBLIB SWITCH */\n        6    *     BIT(1),  /* RESERVED                     Y02670  */\n        6 JCTJSTPC BIT(1),  /* STEP CANCELLED BY CONDITION CODES */\n        6    *     BIT(1),  /* RESERVED                      Y02670 */\n        6 JCTABEND BIT(1),  /* ABEND BIT */\n        6 INCMSTS  BIT(1),  /* JOB FAILED BIT */\n        6 INDMCTLG BIT(1),  /* CATALOG JOB */\n         8 INCMCAT  BIT(1),  /*  CATALOG BIT */\n        6 INCMNSET BIT(1),  /* RESERVED                      @ZA04561*/\n     4 JCTJMGPO CHAR(1),  /* MESSAGE CLASS */\n     4 JCTJBYTE BIT(8),    /* MSGLEVEL & PRIORITY */\n        6 JCTJMGLV BIT(4),  /* MSGLEVEL - SET BY IEFVJA */\n            8 INCMALL  BIT(1),  /* ALLOC MSGLEVEL=1 */\n            8    *     BIT(1),  /* RESERVED FOR FUTURE USE */\n            8 INCMMGL2 BIT(1),  /* JCL MSGLEVEL=2 */\n            8 INCMMGL1 BIT(1),  /* JCL MSGLEVEL=1 */\n       6 JCTJPRTY BIT(4),  /* JOB PRIORITY */\n     4 JCTJNAME CHAR(8),  /* JOBNAME */\n     4 JCTJTPTN CHAR(8),  /* T/P TERMINAL NAME */\n     4 JCTPDIP  PTR(24) BDY(WORD), /* PDI CORE POINTER     Y02670 */\n     4    *     CHAR(1),  /* RESERVED FOR FUTURE USE */\n     4 JCTGDGNT PTR(24) BDY(WORD), /* GDG NAME TABLE           Y02670*/\n     4 JCTJCSMF CHAR(1),  /* JOB CLASS SPECS FOR SMF TERMINATION\n                             ROUTINES                         Y02668 */\n     4 JCTSDKAD PTR(24) BDY(WORD), /* SVA OF FIRST SCT               */\n     4    *     CHAR(1),  /* RESERVED FOR FUTURE USE */\n     4 JCTJCTX  PTR(24) BDY(WORD),     /* SVA OF JCTX        @Z40RPSM*/\n     4    *     CHAR(1),    /* RESERVED FOR FURTURE USE      @Z40RPSM*/\n     4 JCTACTAD PTR(24) BDY(WORD), /* SVA OF FIRST ACT               */\n     4    *     CHAR(1),  /* RESERVED FOR FUTURE USE */\n     4 JCTSMRBA CHAR(8) BDY(WORD), /* RBA OF SYSTEM MSG DS     Y02641*/\n     4 JCTSCT   CHAR(1),  /* STEP # OF FAILING STEP            Y02641*/\n     4   *      CHAR(1),  /* RESERVED */\n     4 JCTCCODE (8) CHAR(4),  /* CONDITION CODES AND OPERATORS */\n        6 JCTJDPCD CHAR(2),  /* JOB CONDITION CODE */\n        6 JCTJDPOP CHAR(1),  /* JOB CONDITION OPERATOR */\n        6    *     CHAR(1),  /* RESERVED FOR FUTURE USE */\n     4 JCTRSW1 BIT(8),   /* CHECKPOINT/RESTART SWITCHES */\n        6 JCTWARMS BIT(1),  /* WARM START */\n        6 JCTSTERM BIT(1),  /* STEP TERM. HAS BEGUN */\n        6 JCTCONTR BIT(1),  /* JOB ELIGIBLE FOR CONTINUE RESTART\n                                   PROCESSING                Y02641 */\n        6 JCTCKFT BIT(1),  /* CHECKPOINT TAKEN FOR THIS STEP */\n        6 JCTCKPTR BIT(1),  /* CHECKPOINT/RESTART TO BE DONE */\n        6 JCTSTEPR BIT(1),  /* STEP RESTART TO BE DONE */\n        6    *     BIT(2),  /* BITS 6,7 - MUST BE ZERO */\n     4 JCTRSW2 BIT(8),   /* CHECKPOINT/RESTART SWITCHES */\n        6 JCTSYSCK BIT(1),  /* SYSCHEK DD STMT PRESENT */\n        6 JCTNARST BIT(1),  /* JOB INELIGIBLE FOR AUTO RESTART Y02641*/\n        6 JCTNORST BIT(1),  /* NO RESTART TO BE DONE */\n        6 JCTNOCKP BIT(1),  /* NO CHECKPOINTS TO BE TAKEN */\n        6 JCTRESTT BIT(1),  /* DO RESTART IF NECESSARY */\n        6 JCTDSOCR BIT(1),  /* RESERVED                         M2344*/\n        6 JCTDSOJB BIT(1),  /* RESERVED                         M2344*/\n        6 JCTDSDRA BIT(1),  /* DSDR PROCESSING HAS NOT SUCCESS. ENDED */\n     4 JCTDETDA PTR(24) BDY(WORD),  /* SVA OF DSENQ TABLE */\n     4    *     CHAR(1),  /* RESERVED FOR FUTURE USE */\n     4 JCTEQREG CHAR(2),  /* REGION PARAMETER */\n     4 JCTQIDNT CHAR(1),  /* IDENTITY OF Q FOR JOB (MVT) */\n     4 JCTSNUMB PTR(8),   /* NUMBER OF STEPS RUN */\n     4 JCTSTIOT PTR(24) BDY(WORD),  /* SVA OF COMPRESSED TIOT (MVT) */\n     4    *     CHAR(1),  /* RESERVED FOR FUTURE USE */\n     4 JCTDEVT CHAR(4),  /* DEVICE TYPE OF CHECKPOINT DATA SET */\n     4 JCTCKTTR PTR(24) BDY(WORD),  /* SVA OF JFCB FOR CKPT DATA SET */\n     4 JCTNTRK  PTR(8),  /* NUMBER OF TRK ON JOBQ USED BY THE JOB\n                                   - SET & USED BY INIT/TERM */\n     4 JCTNRCKP FIXED(15),  /* NUMBER OF CHECKPOINTS TAKEN */\n     4 JCTVOLSQ PTR(8),   /* VOLUME SEQUENCE NUMBER FOR CHECKPOINT DS */\n     4 JCTJSB   PTR(8),  /* JOB STATUS SWITCHES                Y02641*/\n       6   *    BIT(4),  /* RESERVED                           Y02641*/\n       6 JCTJSBIN BIT(1), /* JOB ENTERED INTERPRETATION        Y02641*/\n       6 JCTJSBAL BIT(1), /* JOB ENTERED ALLOCATION            Y02641*/\n       6 JCTJSBEX BIT(1), /* JOB ENTERED EXECUTION             Y02641*/\n       6 JCTJSBTM BIT(1), /* JOB ENTERED TERMINATION           Y02641*/\n     4 JCTSSTR PTR(24) BDY(WORD),  /* SVA OF SCT FOR 1ST STEP */\n     4    *     CHAR(1),  /* RESERVED FOR FUTURE USE */\n     4 JCTSTAT2 BIT(8),           /*                         A25134 */\n       6 JCTSPSYS BIT(1),         /* SPOOLED SYSIN FOR JOB   A25134 */\n       6 JCTADSPC BIT(1),         /*  ADDRSPC=REAL FOR JOB    Y01029 */\n       6 JCTENDIT BIT(1),         /* JOB TERM INDICATOR      A25134 */\n       6 JCTSWSM  BIT(1),         /* INDICATES WARM START MESSAGE\n                                     'INIT=JOBNAME' IS TO BE SUPPRESSED\n                                     FOR THIS JOB\n                                     SET BY IEFVHH\n                                     TESTED BY IEFSD305       M3144 */\n       6 JCTPERFM BIT(1),    /* PERFORM SPECIF'D ON JOB CARD @ZA44031*/\n       6 JCTBLP BIT(1),            /* 0-BLP WILL BE TREATED AS NL\n                                      1-BLP WILL BE TREATED AS BYPASS\n                                      LABEL PROCESSING       Y02668 */\n       6 JCTSISO BIT(1),     /* SYSIN/SYSOUT SWA BELOW THE\n                                LINE INDICATOR                   @L1A*/\n       6 JCTSWAUP BIT(1),    /* SWA ABOVE THE LINE INDICATOR     @L1C*/\n     4 JCTCKIDL PTR(8),   /* LENGTH OF CHECKPOINT ID */\n     4 JCTCKIDT CHAR(16),  /* CHECKPOINT ID */\n               /* SYSTEM MANAGEMENT FACILITIES SUBFIELDS */\n     4 JCTJMR PTR(24) BDY(HWORD),  /* SVA OF JMR */\n     4 JCTJMRD CHAR(1),  /* DATE DIFFERENCE - STEP/JOB STARTS */\n     4 JCTJMROP BIT(8),   /* SMF OPTION SWITCHES */\n     4 JCTJMRCL CHAR(1),  /* SMF CANCELLATION CONTROL STATUS */\n     4 JCTJMRTL CHAR(3),  /* JOB TIME LIMIT */\n     4 JCTJMRSS CHAR(3),  /* STEP START ( TIME OF DAY ) */\n     4 JCTJMRJT CHAR(3),  /* JOB START ( TIME OF DAY ) */\n     4 JCTJMRJD CHAR(3),  /* JOB START DATE */\n     4 JCTSRBT PTR(31),  /* ACCUMULATED SRB TIME FOR JOB      Y02652 */\n     4    *     CHAR(1),  /* RESERVED */\n     4 JCTSSD CHAR(3),   /* STEP START DATE                   Y02668*/\n     4 JCTUSER  CHAR(7), /* USER ID - SET BY IEFVJA         @Z40RPTH*/\n     4 JCTPRFMF PTR(8),      /* PERFORMANCE GROUP NUMBER     @ZA44031*/\n     4 JCTACODE CHAR(4),  /* ABEND CODE FIELD                 Y02670 */\n     4 JCTVULDP PTR(24) BDY(WORD),   /* PTR TO VOL UNLOAD TAB  Y02670*/\n     4    *     CHAR(1);   /* RESERVED */\n     /*     ACCOUNT CONTROL TABLE     */\n  DECLARE 1 IEFAACTB BDY(DWORD) BASED( ADDR(INJMJCT) + 176 ),\n     4 ACTDSKAD PTR(24) BDY(DWORD),  /* SVA OF THIS ACT   */\n     4 ACTIDENT CHAR(1),  /* ACT ID = 1    */\n     4 ACTNEXT  PTR(24) BDY(WORD), /*    SVA OF NEXT ACT  */\n     4    *     CHAR(1),  /* RESERVED FOR FUTURE USE */\n     4 ACTPRGNM CHAR(20),  /*  PROGRAMMERS NAME */\n     4 ACTJTIME PTR(24) BDY(WORD),  /* JOB RUNNING TIME */\n     4 ACTJNFLD PTR(8),   /* NBR OF JOB ACCT FIELDS */\n     4 ACTACCNT CHAR(144);   /*  SPACE FOR VARIABLE FIELDS */\n    /*  THE REST OF THE FIELDS HAVE THE FOLLOWING FORMAT FOR JOB\n      ACCOUNTING- 1 BYTE- LENGTH OF FIELD\n                  VARIABLE BYTES- CONTENTS OF FIELD\n              (LAST 2 REPEATED FOR N FIELDS  )\n         STEP ACCOUNTING HAS THE FOLLOWING FORMAT FOR EACH STEP-\n          3 BYTES- MAXIMUM STEP RUNNING TIME\n          1 BYTE- NBR OF FIELDS IN STEP\n          1 BYTE- LENGTH OF FIELD\n          VARIABLE BYTES- CONTENTS OF FIELD\n              (LAST 2 REPEATED N TIMES )             */\n  %DECLARE JCTID    FIXED,\n            JCTLNGTH FIXED;\n  %JCTLNGTH=176;            /* LENGTH OF JOB CONTROL TABLE */\n  %JCTID=0;                 /* JCT ID = 0 */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAS#BLOK": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x7f\\x00\\x891\\x7f\\x12\\x00\\x00\\xf5\\x00\\xf5\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-13T00:00:00", "modifydate": "1989-11-13T12:00:00", "lines": 245, "newlines": 245, "modlines": 0, "user": "FILE139"}, "text": "//*\n//*\n//REPORT  EXEC PGM=FDREPORT\n//SYSOUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SORTWK01 DD  UNIT=SYSCR,SPACE=(CYL,(10,10))\n//SORTWK02 DD  UNIT=SYSCR,SPACE=(CYL,(10,10))\n//SORTWK03 DD  UNIT=SYSCR,SPACE=(CYL,(10,10))\n//ABRMAP   DD  DSN=&&REPORT,UNIT=SYSCR,DISP=(NEW,PASS),\n//             SPACE=(CYL,(10,10))\n//DISK1    DD  DISP=OLD,UNIT=DISK,VOL=SER=USER01\n//SYSIN    DD  *\n TITLE LINE='*** ALL DATASETS ***'\n REPORT FIELD=(DSN,VOL,DEVTYPE,KEYLEN,\n               LRDATE,DCBINFO,SIZEINFO,\n               BKDATE)\n PRINT PAGEWIDTH=132,ONLINE,SORT=COMBINE\n//*\n//*\n//S1 EXEC SAS,OPTIONS='MACROGEN,NOSORTLIST,NODYNALLOC,PAGES=MAX'\n//WORK     DD  UNIT=SYSDA,SPACE=(CYL,(70,60))\n//DATASETS DD  DISP=OLD,DSN=&&REPORT\n//SYSIN DD  *\n\n /* Dennis Longnecker                                           */\n /* Administrator for the Courts                                */\n /* 1206 South Quince Street                                    */\n /* Olympia, WA   98507                                         */\n /* (206) 753-3365                                              */\n\n /*                                                             */\n /* This SAS procedure will accept as input as dataset with the */\n /* following characteristics:                                  */\n /*                                                             */\n /*    starting length  description                             */\n /*    column                                                   */\n /*    2        40      Dataset name                            */\n /*    47        6      Volume Serial Number                    */\n /*    54        4      Type of Disk (3330, 3350, 3380)         */\n /*    73        2      DSORG                                   */\n /*    77        3      RECFM                                   */\n /*    82        5      Blocksize                               */\n /*    89        5      Lrecl                                   */\n /*                                                             */\n\n DATA\n    CHANGE (KEEP=\n            DSNAME RECFM DISKTYPE VOLSER\n            LRECL BLKSIZE ORG\n            SUGGEST BLOCKING)\n    PERFECT(KEEP=\n            DSNAME RECFM DISKTYPE VOLSER\n            LRECL BLKSIZE ORG\n            SUGGEST BLOCKING);\n\n INFILE DATASETS;\n\n    ARRAY WORK    {6}    WORK1-WORK6;\n    ARRAY MESSAGES{6} $3 MESSAGE1-MESSAGE6;\n    ARRAY OPT3380S{6}    OPT33801-OPT33806;\n    ARRAY OPT3350S{6}    OPT33501-OPT33506;\n    ARRAY OPT3330S{6}    OPT33301-OPT33306;\n\n FORMAT\n    SUGGEST $27.\n  ;\n\n    RETAIN\n       MESSAGE1-MESSAGE6\n       OPT33801-OPT33806\n       OPT33501-OPT33506\n       OPT33301-OPT33306\n      ;\n\n /* Define the blocking type matrix */\n MESSAGES{1} = '1/1';\n MESSAGES{2} = '1/2';\n MESSAGES{3} = '1/3';\n MESSAGES{4} = '1/4';\n MESSAGES{5} = '1/5';\n MESSAGES{6} = '   ';\n\n /* These are the optimal block sizes for 3380's */\n OPT3380S{1} = 99999;\n OPT3380S{2} = 23476;\n OPT3380S{3} = 16476;\n OPT3380S{4} = 11476;\n OPT3380S{5} =  9076;\n OPT3380S{6} =     0;\n\n /* These are the optimal block sizes for 3360's */\n OPT3350S{1} = 19069;\n OPT3350S{2} =  9442;\n OPT3350S{3} =  6233;\n OPT3350S{4} =  4628;\n OPT3350S{5} =  3666;\n OPT3350S{6} =     0;\n\n /* These are the optimal block sizes for 3330's */\n OPT3330S{1} = 13030;\n OPT3330S{2} = 06447;\n OPT3330S{3} =     0;\n OPT3330S{4} =     0;\n OPT3330S{5} =     0;\n OPT3330S{6} =     0;\n\n INPUT\n    @2 DSNAME   $40.\n    @  ;\n\n\n /* Reject the following Header Type Lines */\n IF DSNAME \u00ac=:'-------';\n IF DSNAME \u00ac=:'DATA SET NAME';\n IF DSNAME \u00ac=:'FDR400';\n IF DSNAME \u00ac=:'       ';\n IF DSNAME \u00ac=:'$$';\n IF DSNAME \u00ac=:'***';\n\n INPUT\n  @47  VOLSER   $6.\n  @54  DISKTYPE $4.\n  @73  ORG      $2.\n  @77  RECFM    $3.\n  @82  BLKSIZE\n  @89  LRECL\n     ;\n\n /* Reject the entry if it is one of the following */\n IF RECFM \u00ac= 'V  ';   /* Non-Blocked */\n IF RECFM \u00ac= 'F  ';   /* Non-Blocked */\n IF RECFM \u00ac= '** ';   /* Unknown     */\n IF ORG   \u00ac= 'EF ';   /* No VSAM     */\n\n\n /* This code is here for two reasons :                    */\n /*   1) You can uncomment all the lines to report on      */\n /*      actual device types.                              */\n /*    or                                                  */\n /*   2) You can uncomment the 'DO LOOP' for the device    */\n /*      type you want to migrate                          */\n /*                                                        */\n\n /*IF DISKTYPE = '3380' THEN      /* initialize for 3380's */\n    DO J = 1 TO 6; WORK{J} = OPT3380S{J}; END;\n /*\n /*ELSE IF DISKTYPE = '3350' THEN /* initialize for 3360's */\n /*   DO J = 1 TO 6; WORK{J} = OPT3350S{J}; END;\n\n /*ELSE IF DISKTYPE = '3330' THEN /* initialize for 3330's */\n /*   DO J = 1 TO 6; WORK{J} = OPT3330S{J}; END;\n /* */\n\n\n /* Check to see where the current blocksize fits in       */\n DO LOOP = 1 TO 6 WHILE (BLKSIZE < WORK{LOOP} );\n*   PUT 'PASS NUMBER ' LOOP DSNAME BLKSIZE WORK{LOOP};\n END;\n\n IF BLKSIZE > WORK{1}\n    THEN DO;\n       SUGGEST  = MESSAGES{1} || ' *BLKSIZE is Large';\n       BLOCKING = BLKSIZE;\n       OUTPUT CHANGE; /* write it out! */\n     END; /* if work{loop} < blocksze */\n\n ELSE IF BLKSIZE = WORK{LOOP}\n    THEN DO;\n       SUGGEST  = MESSAGES{LOOP} || ' Perfect Tracking';\n       BLOCKING = BLKSIZE;\n       OUTPUT PERFECT; /* write it out! */\n     END; /* if work{loop} = blocksze */\n\n ELSE\n    DO;\n       SUGGEST  = MESSAGES{LOOP-1} || ' Tracking';\n       BLOCKING = WORK{LOOP-1};\n\n       /* This logic is for FB records */\n       IF RECFM = 'FB'\n          THEN DO;\n             TEMP = BLKSIZE + LRECL;\n\n             /* is suggested blocksize > the current              */\n             /*                          blocksize + lrecl ?      */\n             IF TEMP >= BLOCKING\n                THEN DO;\n                   /* Compute blocksize based on the LRECL */\n                   BLOCKING = FLOOR(BLOCKING/LRECL) * LRECL;\n                   SUGGEST = MESSAGES{LOOP-1}\n                             || ' Tracking - Close';\n                   END; /* if temp > blocking */\n           END; /* if recfm \u00ac= 'vb' */\n\n       OUTPUT CHANGE; /* write it out! */\n     END; /* if blocksze > work{loop} */\n\n PROC SORT DATA=CHANGE;\n    BY DSNAME;\n\n PROC PRINT NOOBS LABEL UNIFORM;\n LABEL\n    DSNAME   = 'Dataset Name'\n    VOLSER   = 'VOLSER'\n    DISKTYPE = 'Disk Type'\n    ORG      = 'DSORG'\n    RECFM    = 'RECFM'\n    BLKSIZE  = 'Block Size'\n    LRECL    = 'LRECL'\n    SUGGEST  = 'Reblocking Suggestion'\n    BLOCKING = 'Suggested Blocksize'\n   ;\n\n    TITLE 'Datasets Which Should be Re-Blocked';\n\n    VAR\n       DSNAME VOLSER DISKTYPE\n       ORG RECFM BLKSIZE LRECL\n       SUGGEST BLOCKING\n      ;\n\n PROC SORT DATA=PERFECT;\n    BY DSNAME;\n\n PROC PRINT NOOBS LABEL UNIFORM;\n LABEL\n    DSNAME   = 'Dataset Name'\n    VOLSER   = 'VOLSER'\n    DISKTYPE = 'Disk Type'\n    ORG      = 'DSORG'\n    RECFM    = 'RECFM'\n    BLKSIZE  = 'Block Size'\n    LRECL    = 'LRECL'\n    SUGGEST  = 'Reblocking Suggestion'\n    BLOCKING = 'Suggested Blocksize'\n   ;\n\n    TITLE 'Datasets Which are Practically Perfect in Every Way';\n\n    VAR\n       DSNAME VOLSER DISKTYPE\n       ORG RECFM BLKSIZE LRECL\n       SUGGEST BLOCKING\n      ;\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TERMPROG": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x7f\\x00\\x891\\x7f\\x12\\x00\\x01\\xf1\\x01\\xf1\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-13T00:00:00", "modifydate": "1989-11-13T12:00:00", "lines": 497, "newlines": 497, "modlines": 0, "user": "FILE139"}, "text": "         PRINT NOGEN\nDFHEISTG DSECT\n         DFHCSAD\n         COPY  DFHTCADS\n         COPY  DFHTCTTE\n         COPY  DFHTIOA\nTERMTIOA DS    0C\n         DS    XL103\nTERMIDO  DS    CL4\n         DS    XL40\nINPUTSO  DS    CL6\n         DS    XL25\nNETNAMEO DS    CL8\n         DS    XL40\nOUTPUTSO DS    CL6\n         DS    XL22\nTYPEO    DS    CL11\n         DS    XL40\nERRORSO  DS    CL6\n         DS    XL29\nACCMETHO DS    CL4\n         DS    XL30\nPRIORTYO DS    CL3\n         DS    XL57\nXTENAO   DS    CL8\n         DS    XL59\nTIOADAO  DS    CL8\n         DS    XL29\nATRANSO  DS    CL4\n         DS    XL37\nTIOASO   DS    CL9\n         DS    XL29\nNTRANO   DS    CL4\n         DS    XL30\nOPRO     DS    CL3\n         DS    XL30\nIOROO    DS    CL3\n         DS    XL30\nTOVTAMO  DS    CL3\n         DS    XL25\nUSERIDO  DS    CL8\n*\n         SPACE 3\nTERMPROG DFHEIENT CODEREG=(3,2)\nOPENI    EQU   *\n         L     R4,TCAFCAAA\n* This program will scan the tcttes and gather stats about\n* terminals connected through autoinstall.\n*\n*\n* Get a storage area to work with.\n*\n         EXEC CICS GETMAIN SET(STOR) LENGTH(DATALENG) INITIMG(BLANK)\n         USING RENTAREA,STOR\n         ST    R4,TCTSAVE\n         CLI   78(R4),X'2B'\n         BNE   LOAD384\n         ZAP   SCRNSIZE,=P'688'\n         B     LOAD0\nLOAD384  EQU   *\n         ZAP   SCRNSIZE,=P'384'\nLOAD0    EQU   *\n         ZAP   TERMCT,=P'0'\n         LA    SCRNPTR,MSGAREA+5\n         CLI   EIBAID,DFHPF2\n         BE    DOTERMA\n         CLI   EIBAID,DFHCLEAR\n         BE    ERASE\n         CLI   EIBAID,DFHPF1\n         BNE   NOTPF1\n         MVI   OPTIONS,C'O'\n         B     NOTPF\nNOTPF1   CLI   EIBAID,DFHPF4\n         BNE   NOTPF4\n         MVI   OPTIONS,C'4'\n         B     NOTPF\nNOTPF4   B     NOTPF\nDOTERMA  EQU   *\n         L     R6,8(R4)\n         LA    R6,15(R6)\n         CLI   0(R6),X'C0'\n         BNH   MOVCODE\n         B     FINDCSA\nNOTPF    EQU   *\n*\n* Read in the teminal id if given; else scan all\n*\n         EXEC CICS RECEIVE SET(SCREEN) LENGTH(SCLEN)\n         USING MAP,SCREEN\n*\n* Determine if the user positioned the cursor somewhere and\n* see if he/she wants a detail for a specific terminal.\n*\nMOVCODE  EQU  *\n         MVC  TRANTYPE(1),TRANCODE\n         SR   WORK,WORK\n         LH   WORK,EIBCPOSN\n         CH   WORK,=H'5'\n         BL   DISTERM         go display the terminals!\n*\n* Display information about the specific terminal.\n*\n         AR   SCREEN,WORK\n         S    SCREEN,=F'2'\nSRCHBLAN CLI  0(SCREEN),C' ' at a blank?\n         BE   FNDBLANK\n         S    SCREEN,=F'1'   go to the previous character\n         B    SRCHBLAN\nFNDBLANK A    SCREEN,=F'1'   go to the first character\nFINDCSA  EQU  *\n*\n         MVC  TERMID(4),0(SCREEN)\n         CLI  TERMID+3,X'C0'\n         BNH  DISTERM1\n         EXEC CICS INQUIRE TERMINAL(TERMID) USERID(USERID)\n         EXEC CICS ADDRESS CSA(WORK)\n         ST   R13,R13SAVE\n         LR   R13,WORK\n         USING DFHCSADS,R13\n         MVC  TCATPTA(4),0(SCREEN)\n         DFHTC CTYPE=LOCATE,ERROR=TCERROR,INVID=TCERROR,               *\n               TERM=ID,NORESP=CONT1\n         L     R13,R13SAVE\n         B     ENDIT\nTCERROR  EQU   *\n         L     R13,R13SAVE\n         B     DISTERM\nCONT1    EQU   *\n         MVC   TCTSAVE2,TCATPTA\n         LA    WORK,ENDMAP-TERMMAP+100\n         STH   WORK,TCASCNB\n         DFHSC TYPE=GETMAIN,INITIMG=00,CLASS=TERMINAL\n         L     TIOABAR,TCASCSA\n         ST    TIOABAR,TCTTEDA\n         MVC   TERMTIOA(255),TERMMAP\n         MVC   TERMTIOA+255(255),TERMMAP+255\n         MVC   TERMTIOA+510(255),TERMMAP+510\n         L     TCTTEAR,TCTSAVE2\n         MVC   TERMIDO(4),TCTTETI\n         MVC   FULLWRD,TCTTENI\n         L     R4,FULLWRD\n         CVD   R4,DWRD\n         UNPK  INPUTSO,DWRD+4(4)\n         OI    INPUTSO+5,X'F0'\n         L     R4,TCTENIBA\n         MVC   NETNAMEO,12(R4)\n         MVC   FULLWRD,TCTTENO\n         L     R4,FULLWRD\n         CVD   R4,DWRD\n         UNPK  OUTPUTSO,DWRD+4(4)\n         OI    OUTPUTSO+5,X'F0'\n         MVC   HALFWRD,TCTTENO\n         LH    R4,HALFWRD\n         CVD   R4,DWRD\n         UNPK  ERRORSO,DWRD+4(4)\n         OI    ERRORSO+5,X'F0'\n         SPACE\n         LA    R4,TYPETERM\nTYPECHK  CLC   0(1,R4),TCTTETT\n         BE    TYPEFND\n         CLI   0(R4),X'FF'\n         BE    TYPEFND\n         LA    R4,12(R4)\n         B     TYPECHK\nTYPEFND  MVC   TYPEO(11),1(R4)\n*       TYPE OF TERMINAL STUFF\n         CLI   TCTIVTAM,TCTEVTAM\n         BE    CONTINU\n         MVC   ACCMETHO,=C'????'\nCONTINU  EQU   *\n         L     R4,TCTTECA\n         L     R4,0(R4)\n         CLI   177(R4),X'C0'\n         BNH   NEXTRAN\n         MVC   ATRANSO,176(R4)\nNEXTRAN  EQU   *\n         CLI   TCTTETC,X'C0'\n         BNH   DOPRIOR\n         MVC   NTRANO,TCTTETC\nDOPRIOR  EQU   *\n         MVC   HALFWRD,=H'0'\n         MVC   HALFWRD+1,TCTTETP\n         LH    R4,HALFWRD\n         CVD   R4,DWRD\n         UNPK  PRIORTYO,DWRD+6(2)\n         OI    PRIORTYO+2,X'F0'\n         MVC   ADDR,TCTTECIA\n         UNPK  DWRD2,ADDR\n         TR    DWRD2,TRANSTBL\n         MVC   XTENAO,DWRD2\n         MVC   ADDR,TCTTEDA\n         UNPK  DWRD2,ADDR\n         TR    DWRD2,TRANSTBL\n         MVC   TIOADAO,DWRD2\n         MVC   OPRO,TCTTEOI\n         MVC   USERIDO,USERID          move RACF userid\n         CLI   TCTTETS,X'01'\n         BNE   NEXTONE\n         MVC   IOROO,=C' NO'\nNEXTONE  EQU   *\n         L     TCTTEAR,TCTSAVE\n         ST    TIOABAR,TCTTEDA\n         MVC   TIOATDL,=H'753'\n         DFHTC TYPE=(WAIT,WRITE,ERASE)\nLOADR13  EQU   *\n         L     R13,R13SAVE\n         USING DFHEISTG,R13\n         B     GOODEND\n*\nTNOTFND  EQU  *\n         B     ENDIT\n*\n*\n* Display the list of terminals signed on to the system\n*\nDISTERM1 EQU  *\n         L    R13,R13SAVE\nDISTERM  EQU  *\n*\n* Put the pointer to the start of the tcttes.\n*\n         EXEC CICS INQUIRE TERMINAL START\n*\n* Terminal inquire loop.\n*\nGETTERM  EQU   *\n         EXEC CICS INQUIRE TERMINAL(TERMID) NEXT OPERID(OPER)          *\n             USERID(USERID) DEVICE(TYPE) RESP(RESPFLD) ACQSTATUS(ACQ)\n* did everything work okay?  If not, error out.\n         CLC   RESPFLD,DFHRESP(NORMAL)\n         BNE   ERROR\n*\n*        Check device type...maybe not\n*\n*        CLI   TYPE+3,X'91'\n*        BL    GETTERM\n*        CLI   TYPE+3,X'9C'\n*        BH    GETTERM\n         CLC   ACQ,DFHVALUE(ACQUIRED)\n         BNE   CHK4ACQ2\n         B     ADD1\nCHK4ACQ2 EQU   *\n         CLC   ACQ,DFHVALUE(ACQUIRING)\n         BNE   GETTERM\nADD1     EQU   *\n         AP    TERMCT,=P'1'\n         CLI   OPTIONS,C'O'\n         BE    DOOPER\n         CLI   OPTIONS,C'4'\n         BE    DOUSERID\n*\nDOTERM   CP    TERMCT,SCRNSIZE\n*        EXEC CICS START TRANSID('SINT') TERMID(TERMID)\n         BNL   GETTERM\n         MVC   0(4,SCRNPTR),TERMID\n         MVI   4(SCRNPTR),C' '\n         LA    SCRNPTR,5(SCRNPTR)\n         B     GETTERM\nDOOPER   CP    TERMCT,SCRNSIZE\n         BNL   GETTERM\n         MVC   0(4,SCRNPTR),OPER\n         LA    SCRNPTR,5(SCRNPTR)\n         B     GETTERM\nDOUSERID CP    TERMCT,SCRNSIZE\n         BNL   GETTERM\n         MVC   0(4,SCRNPTR),TERMID\n         LA    SCRNPTR,5(SCRNPTR)\n         MVC   0(8,SCRNPTR),USERID\n         LA    SCRNPTR,11(SCRNPTR)\n         B     GETTERM\n*\n* Delete the CICS temporary storage\n*\nERROR    EQU   *\n         EXEC CICS INQUIRE TERMINAL END\n*\n* Set up output screen.\n         LA    SCRNPTR,MSGAREA\n         UNPK  0(3,SCRNPTR),TERMCT+2(2)\n         OI    2(SCRNPTR),X'F0'\n         MVI   4(SCRNPTR),C' '\n*\nSENDMSG  EQU  *\n         CP   SCRNSIZE,=P'384'\n         BNE  SENDBIG\n         EXEC CICS SEND FROM(MSGAREA) LENGTH(1920) ERASE\n         B    GOODEND\nSENDBIG  EQU   *\n         EXEC CICS SEND FROM(MSGAREA) LENGTH(3440) ERASE\nGOODEND  EQU   *\n         EXEC CICS RETURN TRANSID(EIBTRNID)\n         SPACE\nERASE    EQU  *\n         EXEC CICS ISSUE ERASEAUP\nENDIT    EQU  *\n         EXEC CICS RETURN\n*\n* Static declarations\nR1       EQU   1\nR4       EQU   4\nR6       EQU   6\nSTOR     EQU   5\nSCREEN   EQU   6\nSCRNPTR  EQU   7\nWORK     EQU   8\nTCTTEAR  EQU   9\nTIOABAR  EQU   10\nR12      EQU   12\nR13      EQU   13\nBLANK    DC    X'00'\nDATALENG DC    AL2(ENDDS)\n         ORG   *-240\nTRANSTBL DS    0XL256\n         DS    XL240\n         DC    C'0123456789ABCDEF'\n         LTORG\n         COPY  DFHAID\nMAPLEN   EQU   (ENDMAP-TERMMAP)\nTERMMAP  DS    0F\n         DC    X'1140D41DF8'\n         DC    C'TERMINAL CONTROL TABLE ENTRY DISPLAY'\n         DC    X'11C2601DF8'\n         DC    C'TERMINAL:'\n         DC    X'11C3C31DF8'\n         DC    C'TRANSMISSIONS:'\n         DC    X'11C3F31DF0'\n         DC    C'ID ...................'\n         DC    X'1DD1'\n         DC    C'____'\n         DC    X'11C4D61DF0'\n         DC    C'INPUTS ..........................'\n         DC    X'1DF8'\n         DC    C'______'\n         DC    X'11C5C31DF0'\n         DC    C'NETWORK NAME .....'\n         DC    X'1DF8'\n         DC    C'________'\n         DC    X'11C5E61DF0'\n         DC    C'OUTPUTS .........................'\n         DC    X'1DF8'\n         DC    C'______'\n         DC    X'11C6D31DF0'\n         DC    C'TYPE ..........'\n         DC    X'1DF8'\n         DC    C'___________'\n         DC    X'11C6F61DF0'\n         DC    C'ERRORS ..........................'\n         DC    X'1DF8'\n         DC    C'______'\n         DC    X'11C7E31DF0'\n         DC    C'ACCESS METHOD ........'\n         DC    X'1DF8'\n         DC    C'____'\n         DC    X'11C8F31DF0'\n         DC    C'PRIORITY ..............'\n         DC    X'1DF8'\n         DC    C'___'\n         DC    X'11C9D31DF8'\n         DC    C'STORAGE AREAS:'\n         DC    X'114AE61DF0'\n         DC    C'USER EXTENSION AREA ...........'\n         DC    X'1DF8'\n         DC    C'________'\n         DC    X'114B501DF8'\n         DC    C'TERMINAL STATUS:'\n         DC    X'114BF61DF0'\n         DC    C'CURRENT TIOA (TCTTEDA) ........'\n         DC    X'1DF8'\n         DC    C'________'\n         DC    X'114CE31DF0'\n         DC    C'ACTIVE TRANSACTION ...'\n         DC    X'1DF8'\n         DC    C'____'\n         DC    X'114DC61DF0'\n         DC    C'TIOAS (COUNT/LENGTH) .........'\n         DC    X'1DF8'\n         DC    C'_________'\n         DC    X'114DF31DF0'\n         DC    C'NEXT TRANSACTION ID ..'\n         DC    X'1DF8'\n         DC    C'____'\n         DC    X'114FC31DF0'\n         DC    C'SIGNED ON .............'\n         DC    X'1DF8'\n         DC    C'___'\n         DC    X'1150D31DF0'\n         DC    C'TERMINAL IN SERVICE ...'\n         DC    X'1DF8'\n         DC    C'___'\n         DC    X'11D1E31DF0'\n         DC    C'CONNECTED TO VTAM .....'\n         DC    X'1DF8'\n         DC    C'___'\n*\n         DC    X'11D2F31DF0'\n         DC    C'RACF USERID ......'\n         DC    X'1DF8'\n         DC    C'________'\nENDMAP   EQU   *\n         DC    100CL1' '\n*\nTYPETERM EQU  *\n         DC   X'A0',CL11'BISYNCH -'\n         DC   X'A1',CL11'SYSTEM/3 '\n         DC   X'A4',CL11'SYSTEM/37'\n         DC   X'A5',CL11'RESERVED '\n         DC   X'A6',CL11'PROGRAMMA'\n         DC   X'A6',CL11'SYSTEM/7 '\n         DC   X'BA',CL11'3650 ATTA'\n         DC   X'BB',CL11'3650 USER'\n         DC   X'BD',CL11'CONTENTIO'\n         DC   X'BE',CL11'INTERACTI'\n         DC   X'BF',CL11'BATCH LOG'\n         DC   X'B0',CL11'SDLC DEVI'\n         DC   X'B1',CL11'3601     '\n         DC   X'B2',CL11'3614     '\n         DC   X'B4',CL11'3790     '\n         DC   X'B5',CL11'3790 USER'\n         DC   X'B6',CL11'3790 SCS '\n         DC   X'B8',CL11'3650 PIPE'\n         DC   X'B9',CL11'3653 HOST'\n         DC   X'C0',CL11'LUTYPE 6 '\n         DC   X'C1',CL11'LUTYPE 4 '\n         DC   X'DF',CL11'1750/3750'\n         DC   X'D0',CL11'RESERVED '\n         DC   X'D1',CL11'ISC MM CO'\n         DC   X'D2',CL11'LUC MODE '\n         DC   X'D3',CL11'LUC SESSI'\n         DC   X'E2',CL11'SKELETON '\n         DC   X'E4',CL11'RESERVED '\n         DC   X'01',CL11'7770     '\n         DC   X'02',CL11'SYSTEM 7 '\n         DC   X'08',CL11'CONSOLE  '\n         DC   X'12',CL11'SEQUENTIA'\n         DC   X'14',CL11'MAGNETIC '\n         DC   X'18',CL11'CARD READ'\n         DC   X'2A',CL11'2741 CORR'\n         DC   X'2B',CL11'2741 EBCD'\n         DC   X'20',CL11'HARD COPY'\n         DC   X'21',CL11'MODEL 33/'\n         DC   X'22',CL11'TELETYPEW'\n         DC   X'24',CL11'1050     '\n         DC   X'28',CL11'2740     '\n         DC   X'4A',CL11'1053     '\n         DC   X'4C',CL11'2265     '\n         DC   X'40',CL11'VIDEO TERM'\n         DC   X'41',CL11'2260 LOCAL'\n         DC   X'48',CL11'2260 REMOTE'\n         DC   X'50',CL11'TCAM     '\n         DC   X'8A',CL11'3600 BISY'\n         DC   X'80',CL11'BI-SYNCHR'\n         DC   X'82',CL11'2770     '\n         DC   X'84',CL11'2780     '\n         DC   X'85',CL11'3780     '\n         DC   X'86',CL11'2980     '\n         DC   X'88',CL11'3735     '\n         DC   X'89',CL11'3740     '\n         DC   X'9B',CL11'3284 LOCAL'\n         DC   X'9C',CL11'3286 LOCAL'\n         DC   X'91',CL11'3277 REMOTE'\n         DC   X'92',CL11'3275 REMOTE'\n         DC   X'93',CL11'3284 REMOTE'\n         DC   X'94',CL11'3286 REMOTE'\n         DC   X'99',CL11'3277 LOCAL'\n         DC   X'FF',CL11'?unknown?'\n         EJECT\nMAP      DSECT\nTRAN     DS    CL4\nTRANCODE DS    CL1\n*\nRENTAREA DSECT\nOPTIONS  DS    CL1\nSCRNSIZE DS    PL4\nACQ      DS    CL4\nTYPE     DS    CL4\nTERMID   DS    CL4\nRESPFLD  DS    CL4\nRESP2FLD DS    CL4\nOPER     DS    CL4\nUSERID   DS    CL8\nOUTREC   DS    0CL133\nCTLCHAR  DS    CL1\nOUTDATA  DS    CL132\nHALFWRD  DS    H\nFULLWRD  DS    F\nADDR     DS    XL5\nDWRD     DS    D\nDWRD2    DS    XL9\nSCLEN    DS    F\nR13SAVE  DS    F\nTCTSAVE  DS    F\nTCTSAVE2 DS    F\nTERMCT   DS    PL4'0'\nTRANTYPE DS    CL1\nMSGAREA  DS    CL3440\nENDDS    EQU   *-RENTAREA\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTPRTR": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x7f\\x00\\x891\\x7f\\x12\\x00\\x00\\xd8\\x00\\xd8\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-13T00:00:00", "modifydate": "1989-11-13T12:00:00", "lines": 216, "newlines": 216, "modlines": 0, "user": "FILE139"}, "text": "//GBMTPRTR JOB (AAAA,UUU),CLASS=A\n//S1       EXEC ASMXA,LKEDOPT='AC=1'\n//ASM.SYSIN  DD  *\n         PRINT NOGEN\nTESTPRTR AFCENTER (R8)\n         L     R1,0(R1)                 LOAD R1 WITH POINTER TO PARM.\n         LH    R4,0(R1)                 LOAD R4 WITH LENGTH OF PARM.\n         LTR   R4,R4                    IF ZERO THERE IS NO PARM.\n         BZ    NOPARM                   IF NOT...THE USE DEFAULT.\n         MVC   DNIB+12(8),2(R1)         IF TERM ID...MOVE TO NIB.\nNOPARM   EQU   *\n         SR    R15,R15                  CLEAR REG 15\n         OPEN  (SNAPDC,(OUTPUT))\n         OPEN  ACB1            OPEN THE ACCESS METHOD CONTROL BLOCK\n         LTR   R15,R15                  TEST REG 15 FOR GOOD OPEN.\n         BZ    OPENOK                   YES..BRANCH\n         WTO   MF=(E,WTONOPN)\n         BAL   R14,SNAPIT               SNAP IF BAD OPEN.\n         DC    C'ACB FOLLOWS'\nACB1     ACB   AM=VTAM,APPLID=TESTGBM,MACRF=NLOGON\nTESTGBM  DC    X'08'                    LENGTH OF APPLID.\n         DC    C'TESTPRTR'              APPLICATION IDENTIFICATION.\n         DS    0F\nOPENOK   EQU   *\n*\n*        HERE WE INQUIRE ON THE TERMINAL AND PUT THE SESSION\n*        PARAMETERS IN AN AREA CALLED SPAREA...POINTED TO BY\n*        THE RPL.\n*\n         INQUIRE RPL=DRPL,OPTCD=SESSPARM\n         LTR   R15,R15                  IF BAD INQUIRY...THEN THE\n         BZ    INQOK                    DEVICE IS NOT DEFINED TO VTAM\n         WTO   MF=(E,WTOBDINQ)\n         BAL   R14,SNAPIT               NO...GO TAKE SNAP AND END.\nINQOK    EQU   *\n         OPNDST RPL=DRPL                OPEN THE DESTINATION.\n         CLC   DRPL+13(2),=XL2'0000'    GOOD OPEN DEST?\n         BE    SEND1                    YES...GO SEND DATA.\n*\n*        HERE VTAM HAS NOT COMPLETED THE BIND...SO WE WILL TRY\n*        AND FIGURE OUT WHAT TYPE OF DEVICE IT IS...VTAM EITHER\n*        CAN'T TALK TO THIS GUY...OR WE HAVE NOT DEFINED TO VTAM\n*        CORRECTLY WHAT TYPE OF DEVICE IT IS.\n*        WE HAVE THREE CHOICES...LUTYPE1, 2, OR 3.\n*        WE FIGURE OUT WHAT VTAM THINKS IT IS SUPPOSED TO BE...THEN\n*        WE BUILD OUR OWN BIND AND TRY AN OPEN DEST.  IF VTAM THINKS\n*        IT IS AN LUTYPE1 AND CAN'T BIND...WE BUILD AN LUTYPE3 AND\n*        TRY AND BIND...ETC.\n*\n         CLI   SPAREA+13,X'01'          NO...VTAM SAY TYPE 1 DEVICE?\n         BE    MOVDSC                   YEP...GO MOVE IN 3270DSC.\n         MVC   SPAREA+8(6),=X'0187C6000001'  MOVE IN SCS BIND STUFF.\n         B     MODNIB                   GO MODIFY THE NIB.\nMOVDSC   EQU   *\n         MVC   SPAREA+8(6),=X'008787000003'  MOVE IN 3270 DSC BIND.\nMODNIB   EQU   *\n         MVI   SPAREA+14,X'00'          CLEAR REST OF THE BIND AREA.\n         MVC   SPAREA+15(21),SPAREA+14\n         MODCB AM=VTAM,NIB=DNIB,BNDAREA=SPAREA\n         OPNDST RPL=DRPL                OPEN DEST. WITH NEW BIND.\n         CLC   DRPL+13(2),=XL2'0000'    DID IT WORK?\n         BE    SEND1                    YEP...CONTINUE.\n         MVC   SPAREA+8(6),=X'008787000002'  NO..SEE IF TERMINAL.\n         MVI   SPAREA+23,X'02'          MODEL 2.\n         OPNDST RPL=DRPL                OPEN DEST. WITH NEW BIND.\n         CLC   DRPL+13(2),=XL2'0000'    DID IT WORK?\n         BE    SENDTERM                 YEP...CONTINUE.\n*        WTO   MF=(E,WTOBDOPN)\n         BAL   R14,SNAPIT               NO...SNAP AND END.\n         DC    C'RPL FOLLOWS'\nDRPL     RPL   AM=VTAM,RECLEN=1920,OPTCD=(SYN,ACQUIRE),ACB=ACB1,       X\n               NIB=DNIB,AREA=SPAREA,AREALEN=L'SPAREA\n         DC    C'NIB FOLLOWS'\nDNIB     NIB   MODE=RECORD,RESPLIM=0,NAME=SDL1,LOGMODE=C' '\n         DC    C'SPAREA FOLLOWS'\nSPAREA   DC    CL36'                                    '\nSENDTERM EQU   *\n         MVC   LINE1(40),LINE1T2P       LUTYPE2 SO WE MOVE IN GOOD\n         B     SR15A                    MESSAGE AND GO SEND IT.\nSEND1    DS    0H\n         CLC   DNIB+56(4),=X'00000000'  DID WE MODIFY THE NIB?\n         BE    SEND1B                   NOPE...GO FIGURE WHAT TYPE?\n         CLI   SPAREA+13,X'01'          YES...IS IT A LUTYPE1?\n         BE    SEND1A                   YES...GO SET UP PROPER MSG.\n         MVC   LINE1(40),LINE1D2S       NO...MOVE IN LUTYPE3 MSG.\n         B     SR15A                    GO SEND MESSAGE.\nSEND1A   EQU   *\n         MVC   LINE1(40),LINE1S2D      MOVE IN LUTYPE1 MSG.\n         B     SR15A                    GO SEND IT.\nSEND1B   EQU   *\n         CLI   SPAREA+13,X'01'          VTAM WAS CORRECT SO FIGURE\n         BE    SR15A                    WHAT KIND OF LU AND SEND\n         CLI   SPAREA+13,X'02'          PROPER MESSAGE TO DEVICE.\n         BE    SEND1C\n         MVC   LINE1(40),LINE1327\n         B     SR15A\nSEND1C   EQU   *\n         MVC   LINE1(40),LINE1TRM\nSR15A    EQU   *\n         SR    R15,R15\n         SEND  RPL=DRPL,STYPE=REQ,CONTROL=DATA,CHAIN=ONLY,             X\n               POST=RESP,RESPOND=(NEX,FME,NRRN),BRACKET=(BB,NEB),      X\n               OPTCD=SYN,AREA=LINE1,RECLEN=40\n         LTR   R15,R15                  GOOD SEND?\n         BZ    SEND2                    YES...BRANCH\n         WTO   MF=(E,WTOBDSND)\n         BAL   R14,SNAPIT               NO...SNAP\nSEND2    EQU   *\n         CLI   SPAREA+13,X'01'\n         BE    SR15B\n         CLI   SPAREA+13,X'02'\n         BE    SEND2B\n         MVC   BIG(3),=X'F1C80D'\n         MVI   BIG+52,X'19'\n         B     SR15B\nSEND2B   EQU   *\n         MVC   BIG(3),=X'F1C315'\n         MVI   BIG+52,X'19'\nSR15B    EQU   *\n         LA    R9,100\nSR15BA   EQU   *\n         SR    R15,R15\n         SEND  RPL=DRPL,STYPE=REQ,CONTROL=DATA,CHAIN=ONLY,             X\n               POST=RESP,RESPOND=(NEX,FME,NRRN),BRACKET=(NBB,NEB),     X\n               OPTCD=SYN,AREA=BIG,RECLEN=1500\n         LTR   R15,R15                  GOOD SEND?\n         BNZ   SNAPIT\n         BCT   R9,SR15BA\nSEND3    EQU   *\n         CLI   SPAREA+13,X'01'\n         BE    SR15C\n         CLI   SPAREA+13,X'02'\n         BE    SEND3B\n         MVC   LAST(7),=X'F1C80D15151519'\n         B     SR15C\nSEND3B   EQU   *\n         MVC   LAST(7),=X'F1C31515151519'\nSR15C    EQU   *\n         SR    R15,R15\n         SEND  RPL=DRPL,STYPE=REQ,CONTROL=DATA,CHAIN=ONLY,             X\n               POST=RESP,RESPOND=(NEX,FME,NRRN),BRACKET=(NBB,EB),      X\n               OPTCD=SYN,AREA=LAST,RECLEN=7\n         LTR   R15,R15                  GOOD SEND?\n         BZ    ENDIT                    YES...BRANCH\nSNAPIT   EQU   *\n         SNAP  DCB=SNAPDC,PDATA=ALL     NO...SNAP\nENDIT    EQU   *\n         CLSDST RPL=DRPL,OPTCD=(SYN,RELEASE)    CLOSE DEST\n         CLOSE ACB1\n         CLOSE (SNAPDC)\n         L     R15,RETCODE\n         AFCEXIT RC=(15)\nSNAPDC   DCB   DSORG=PS,MACRF=(W),DDNAME=SNAP\n         DS    0F\nZERO     DC    X'00000000'\n         DC    X'F0000000'\nRETCODE  DC    F'00000000'\nLINE1S2D DC    X'150D15'     ERASE/WRITE...NEW LINE..CARRIAGE RETURN\n         DC    C'LUTYPE1 BUT DEFINED IN VTAM AS TYPE3'\n         DC    X'15'\nLINE1D2S DC    X'F5C815'     ERASE/WRITE...NEW LINE..CARRIAGE RETURN\n         DC    C'LUTYPE3 BUT DEFINED IN VTAM AS TYPE1'\n         DC    X'19'\nLINE1327 DC    X'F5C815'     ERASE/WRITE...NEW LINE..CARRIAGE RETURN\n         DC    C'LUTYPE3 (3270 DATA STREAM) PRINTER. '\n         DC    X'19'\nLINE1TRM DC    X'F5C315'     ERASE/WRITE...NEW LINE..CARRIAGE RETURN\n         DC    C'LUTYPE2 (3270 TERMINAL).            '\n         DC    X'19'\nLINE1T2P DC    X'F5C315'     ERASE/WRITE...NEW LINE..CARRIAGE RETURN\n         DC    C'LUTYPE2 BUT DEFINED TO VTAM AS PRNTR'\n         DC    X'19'\nLINE1    DC    X'150D15'     ERASE/WRITE...NEW LINE..CARRIAGE RETURN\n         DC    C'LUTYPE1 (SNA CHARACTER SET) PRINTER.'\n         DC    X'15'\nLAST     DC    X'0D151515151515'    CR...NL...NL...NL...NL...NL...NL\nBIG      DS    0CL1503\n         DC    X'0D1515'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\n         DC  CL50'12345678901234567890123456789012345678901234567890'\nWTONOPN  WTO   'Bad APPLID Open',MF=L\nWTOBDINQ WTO   'Bad Inquiry',MF=L\nWTOBDSND WTO   'Bad Send',MF=L\nWTOBDOPN WTO   'Bad Open',MF=L\n         LTORG\n         END   TESTPRTR\n//LKED.SYSLMOD DD DSN=SYS2.LINKLIB(TESTPRTR),DISP=SHR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "WHOHAS": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x01\\x05?\\x01\\x01\\x05?\\x16\\x02\\x00\\xb7\\x00\\xa9\\x00:\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2001-02-22T00:00:00", "modifydate": "2001-02-22T16:02:00", "lines": 183, "newlines": 169, "modlines": 58, "user": "WSBG"}, "text": "WHOHAS   CSECT\n***********************************************************************\n* FUNCTION  THIS MODULE USES THE GQSCAN MACRO TO LOOK AT THE          *\n*           RESOURCE QUEUES TO SEE WHO HAS CONTROL OF A               *\n*           DATASET.                                                  *\n***********************************************************************\n*   FIXED BY SAM GOLOB SO AN EQUAL SIGN ( = ) WILL END THE PROGRAM.   *\n*     Also \"BYE\" or \"QUIT\".  After label START, you can adjust these. *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12),,WHOHAS-C.LAWLESS-&SYSDATE\n         LR    R12,R15\n         USING WHOHAS,R12\n         LR    R11,R13\n         CNOP  0,4\n         BAL   13,*+76\n         DC    18A(0)                  OUR SAVE AREA\n         ST    13,8(11)\n         ST    11,4(13)\n         TPUT  INMSGA,L'INMSGA\nSTART    TPUT  INMSG1,L'INMSG1\n         XC    TOKEN,TOKEN\n         MVI   BUFADR,X'40'\n         MVC   BUFADR+1(132),BUFADR\n         TGET  BUFADR,L'BUFADR\n         LTR   R1,R1                   CHECK FOR NULL INPUT\n         BZ    EXITMAIN                IF SO THEN EXIT\n         CLI   BUFADR,C'='             =\n         BE    EXITMAIN                IF SO THEN EXIT\n         CLC   =C'BYE'(3),BUFADR       Uppercase BYE\n         BE    EXITMAIN                IF SO THEN EXIT\n         CLC   =C'QUIT'(4),BUFADR      Uppercase QUIT\n         BE    EXITMAIN                IF SO THEN EXIT\n         CLC   =C'bye'(3),BUFADR       Lowercase bye\n         BE    EXITMAIN                IF SO THEN EXIT\n         CLC   =C'quit'(4),BUFADR      Lowercase quit\n         BE    EXITMAIN                IF SO THEN EXIT\n*                                      Mixed case will not end the pgm\n         MVC   RNAME(44),BUFADR\n         TR    RNAME,TRUPTAB           TRANSLATE TO UPPER CASE\n         TRT   RNAME,TRTAB             FIND LENGTH OF RNAME FIELD\n         LA    R7,RNAME\n         SR    R1,R7\n         LR    R2,R1\nCONT     LA    R6,AREA\n         GQSCAN AREA=(AREA,8000),SCOPE=ALL,TOKEN=TOKEN,                X\n               RESNAME=(QNAME,RNAME,(R2))\n         ST    R15,SAVR15              SAVE RETURN CODE\n         LTR   R15,R15                 RC=0, AREA IS BIG ENOUGH\n         BE    SCANL1\n         C     R15,=F'8'\n         BE    SCANL1                  AREA WAS TOO SMALL\n         C     R15,=F'4'               NO RESOURCES\n         BE    SCANL2\n         B     ERROR                   RC>8\nSCANL1   STCM  R0,12,TEMP2             TEMP2 = 1ST HWRD OF R0\n         L     R8,TEMPF                R8 = LENGTH OF RIB\n         STCM  R0,3,TEMP2              TEMP2 = 2ND HWRD OF R0\n         L     R9,TEMPF                R9 = LENGTH OF RIBE\n         LR    R5,R1                   R5 = NO OF RIBS IN AREA\n         USING RIB,R6\nRIBLOOP  LR    R7,R6\n         AR    R7,R8\n         AH    R7,RIBVLEN\n         L     R3,RIBNTO               R3 = NO OF OWNERS\n         CVD   R3,DWORD\n         MVC   EDWORK,EDMASK\n         ED    EDWORK,DWORD+4\n         MVC   OWN1,EDWORK+1\n         L     R3,RIBNTWE              R3 = WAIT (EXCLUSIVE)\n         CVD   R3,DWORD\n         MVC   EDWORK,EDMASK\n         ED    EDWORK,DWORD+4\n         MVC   EXCL1,EDWORK+1\n         L     R3,RIBNTWS              R3 = WAIT (SHARED)\n         CVD   R3,DWORD\n         MVC   EDWORK,EDMASK\n         ED    EDWORK,DWORD+4\n         MVC   SHR1,EDWORK+1\n         TPUT  MSG1,L'MSG1\n         L     R10,RIBNRIBE            NO. OF RIBE FOR RIB IN AREA\n         USING RIBE,R7\nRIBELOOP MVC   MSG2JBN,RIBEJBNM\n         TM    RIBESFLG,X'80'          0 = WAITING,1 = OWNER\n         BO    OWNER\n         MVC   MSG2TYP,MSGWAIT\n         B     CHKUSE\nOWNER    MVC   MSG2TYP,MSGOWN\nCHKUSE   TM    RIBERFLG,X'80'\n         BO    SHARED\n         MVC   MSG2USE,MSGEXCL\n         B     OUTMSG2\nSHARED   MVC   MSG2USE,MSGSHR\nOUTMSG2  TPUT  MSG2,L'MSG2\n         AR    R7,R9                   SKIP TO END OF RIBE\n         BCT   R10,RIBELOOP            LOOP IF MORE RIBE FOR THIS RIB\n         LR    R6,R7                   SET ADDRES OF NEXT RIB\n         BCT   R5,RIBLOOP              LOOP IF MORE RIB IN AREA\n         CLC   SAVR15,=F'8'\n         BE    CONT\n         B     EXIT1\nSCANL2   TPUT  ERROR1,L'ERROR1\n         B     EXIT1\nERROR    TPUT  ERROR2,L'ERROR2\n         B     EXIT1\nEXIT1    B     START                   GO AROUND AGAIN\nEXITMAIN L     13,4(13)                REAL EXIT POINT\n         RETURN (14,12),RC=0\nDWORD    DC    D'0'\nSAVR15   DS    F\nRLEN     DS    F'0'\nTEMPF    DS    0F\nTEMP1    DC    H'0'\nTEMP2    DC    H'0'\nTRTAB    DS    0CL256\n         DC    XL64'00'\n         DC    XL1'40'\n         DC    XL191'00'\n* TABLE BELOW IS USED TO TRANSLATE LOWERCASE DATA TO UPPERCASE\nTRUPTAB  DS    0CL256\n         DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'\n         DC    XL16'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\n         DC    XL16'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9BABBBCBDBEBF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\nEDMASK   DC    XL9'402020202020202120'\nEDWORK   DC    XL9'00'\nERROR1   DC    CL44'RESOURCE NOT FOUND'\nERROR2   DC    CL44'ERROR IN GQSCAN'\nINMSGA   DC    CL50'TERMINATE BY ENTERING NO DATA, =, BYE, QUIT'\nINMSG1   DC    CL60'ENTER DSNAME WITHOUT QUOTES - NO LEADING BLANKS'\nQNAME    DC    CL8'SYSDSN'\nBUFADR   DS    CL133\nRNAME    DC    CL45' '\nTOKEN    DS    A\nMSG1     DS    0CL60\n         DC    C'OWNERS='\nOWN1     DC    CL8' '\n         DC    C',WAIT EXCLUSIVE='\nEXCL1    DC    CL8' '\n         DC    C',WAIT SHARED='\nSHR1     DC    CL8' '\nMSG2     DS    0CL43\n         DC    C'JOBNAME='\nMSG2JBN  DS    CL8\n         DC    C',TYPE='\nMSG2TYP  DS    CL7\n         DC    C',USE='\nMSG2USE  DS    CL9\nMSGWAIT  DC    CL7'WAITING'\nMSGOWN   DC    CL7'OWNER'\nMSGEXCL  DC    CL9'EXCLUSIVE'\nMSGSHR   DC    CL9'SHARED'\n         LTORG\nAREA     DS    CL8000\n         ISGRIB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT139/FILE139.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT139", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}