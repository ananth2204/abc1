 CAIMACRO: MACRO;
 DECLARE %NUM INIT 1;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('         ----        MACROS        ----')
 /('In real life we often have situations where a particular section')
  ('of code in our program turns out to be extremely useful, and in')
  ('many different ways. For example, consider a simple case of')
  ('renaming a data set called say, MYDATA, and we would like to')
  ('rename it and call it say, YOURDATA. Section of code performing')
  ('this task may be useful to us on many occassions, that is,')
  ('we may require a data set MY.DATA to be renamed YOUR.DATA many')
  ('times and in many different programs.')
 /('Let us look at the code designed to perform this task:-')
 /('        ',#1,55,'DECLARE MYDATA DS DSNAME MY.DATA UNIT DISK;')
  ('        ',#2,55,'DECLARE YOURDATA DS DSNAME NEW.NAME UNIT DISK')
  ('                         ',#3,35,'SPACE 10 TRACKS VB 130,4000;')
 /('        ',#4,35,'COPY MYDATA TO YOURDATA;')
  ('        ',#5,25,'CATALOG YOURDATA;')
  ('        ',#6,25,'DELETE MYDATA;') ;
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('         ----        MACROS        ----')
 /('        ',#1,55,'DECLARE MYDATA DS DSNAME MY.DATA UNIT DISK;')
  ('        ',#2,55,'DECLARE YOURDATA DS DSNAME NEW.NAME UNIT DISK')
  ('                         ',#3,35,'SPACE 10 TRACKS VB 130,4000;')
 /('        ',#4,35,'COPY MYDATA TO YOURDATA;')
  ('        ',#5,25,'CATALOG YOURDATA;')
  ('        ',#6,25,'DELETE MYDATA;')
//(' In plain ENGLISH, the above code says:-')
  (' to RENAME the existing data set MYDATA to YOURDATA (i.e. to have')
  (' the same data set known under a different name) we (a) declare an')
  (' empty data set YOURDATA by allocating some space to it,')
  (' (b) copy our OLD data set MY.DATA to this newly allocated')
  (' data set, (c) catalog this newly created data set and')
  (' (d) finally get rid of the OLD data set MYDATA.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('         ----        MACROS        ----')
  /('So, we are virtually left with the same data set under a')
   ('different name. The job is done. If we want to use that code in')
   ('many programs or indeed many times in the same program we would')
   ('have to copy the code over many times which is awkward at the')
   ('very least. A much better approach is to call the above code by')
   ('a NAME, say RENAME, and every time we want that code to be')
   ('executed, just code RENAME. JOL macro facility gives you that')
   ('power. Let us look at the example again:-')
 /('     ',#A,55,'RENAME : MACRO;')
  ('        ',#1,55,'DECLARE MYDATA DS DSNAME MY.DATA UNIT DISK;')
  ('        ',#2,55,'DECLARE YOURDATA DS DSNAME NEW.NAME UNIT DISK')
  ('                         ',#3,35,'SPACE 10 TRACKS VB 130,4000;')
 /('        ',#4,35,'COPY MYDATA TO YOURDATA;')
  ('        ',#5,25,'CATALOG YOURDATA;')
  ('        ',#6,25,'DELETE MYDATA;')
 /('     ',#B,55,'END;   /* OF MACRO RENAME */');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('         ----        MACROS        ----')
 /('This allows us to use that code repeatedly many times by just')
  ('coding RENAME in our program or, indeed, in another MACRO and')
  ('achieving the same result as literally copying this code over a')
  ('multitude of times.')
 /('Consider a JOL program that may use the RENAME macro code:-')
 /(' ',#1,25,'DECLARE XYZ PROG  ')
  ('       ',#2,25,'INFILE  READS OLD.NAME')
  ('       ',#3,25,'OUTFILE WRITES MY.DATA;')
  (' ',#4,25,'STEP01:  RUN XYZ; ')
  (' ',#5,55,'IF STEP01 = 0 THEN RENAME;  /* macro call/invocation */')
  (' ',#6,35,'ELSE STOP ''ERROR OCCURED'';')
 /('RENAME is replaced by the code it contains and this code is')
  ('executed as normal JOL. The advantages are obvious: flexibility,')
  ('modularity.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('         ----        MACROS        ----')
 /('Consider the situation where we had to change something in the')
  ('RENAME code. If we did not use macros then we would have had to')
  ('change code in every place we use it in the program. With macros')
  ('only one change is necessary - change in the macro itself and')
  ('every program/user using this macro automatically gets the')
  ('updated version.')
 /('The power and flexibility of MACROS can be further enhanced')
  ('by',#1,12,'parameters.')
  ('For example, it would be nice if we could rename any data set by')
  ('just specifying OLD data set name and NEW data set name i.e.')
 /('               ',#2,45,'RENAME OLDNAME=MYDATA NEWNAME=YOURDATA;')
 /('to perform the same task as the example above or:-')
 /('               ',#3,45,'RENAME OLDNAME=DATA01 NEWNAME=DATA02;')
 /('to RENAME an existing data set DAT01 to be known under the name')
  ('DATA02.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
 /('Our macro would have to be changed as follows : ')
//('        ',#1,60,'RENAME : MACRO(%%OLDNAME=,%%NEWNAME=);  ')
  ('        ',#2,60,'      DECLARE %%NEWNAME DS DSNAME NEW.SET ')
  ('        ',#3,60,'              UNIT DISK                 ')
  ('        ',#4,60,'              SPACE 10 TRACKS           ')
  ('        ',#5,60,'              VB 130, 4000;             ')
  ('        ',#6,60,'  COPY %%OLDNAME TO %%NEWNAME;          ')
  ('        ',#7,60,'  CATALOG %%NEWNAME;                    ')
  ('        ',#8,60,'  DELETE %%OLDNAME;                     ')
  ('        ',#9,60,'END; /* OF RENAME MACRO */              ')
//(' By coding  ',#10,50,'RENAME OLDNAME = FRED NEWNAME = BILL; ')
  (' in your MAIN program, FRED will REPLACE %%OLDNAME in    ')
  (' RENAME macro and BILL will REPLACE %%NEWNAME.           ')
  (' This method of PARAMETER PASSING allows us to RENAME ANY')
  (' existing data  set just by specifying those parameters. ');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL /(' Macro Facility allows, therefore, to write NEW JOL commands')
   (' in JOL itself.                            ')
 //(' All JOL commands you probably use, such as COBOL, SORT, MERGE, ')
   (' COMPARE, etc. are nothing more than MACROs written in JOL and ')
   (' stored in JOL.CMDLIB Command Library. We suggest you have a look')
   (' at it. To give you an example, we will now show you the COMPARE')
   (' Macro :   ')
///('             ',#3,35,'NEXT SCREEN PLEASE ');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
      /('    ',#1,60,' COMPARE : MACRO(%%PDS,%%PO);               ')
       ('    ',#2,60,'           DECLARE %%X INIT ''2'';          ')
       ('    ',#3,60,'  IF %%LIST(2) = ''TO''  | %%LIST(2) = ''WITH'' ')
       ('    ',#4,60,'     THEN %%X = 3;                          ')
       ('    ',#5,60,'  IF %%PO = ''PO'' | %%PDS = ''PDS'' THEN DO;')
       ('    ',#6,60,'     DECLARE CNTL *;                        ')
       ('    ',#7,60,'       COMPARE TYPEORG = PO                 ')
       ('    ',#8,60,'END; /* OF CARD FILE DECLARE, COLS 1 to 4.*/')
       ('    ',#9,60,'  END; /* OF THEN DO; */                    ')
       ('    ',#10,60,'  ELSE DECLARE CNTL DS DUMMY NODCB;         ')
      /('    ',#11,60,' DECLARE IEBCOMPR PROG                      ')
       ('    ',#12,60,'         SYSPRINT WRITES PRINTER            ')
       ('    ',#13,60,'         SYSIN READS CNTL                   ')
       ('    ',#14,60,'         SYSUT1  READS %%LIST(1)            ')
       ('    ',#15,60,'         SYSUT2  READS %%LIST(%%X);         ')
       ('    ',#16,60,' DECLARE PRINTER PRINTER NODCB;             ')
       ('    ',#17,60,' RUN IEBCOMPR; /*  IBM UTILITY PROGRAM      ')
       ('    ',#18,60,'                 WHICH ACTUALLY PERFORMS    ')
       ('    ',#19,60,'                 THE COMPARISON */          ')
       ('    ',#20,60,'END; /* OF MACRO COMPARE  */          ');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
    ///(' At this stage it is not important to understand HOW')
   (' this macro works - that is explained later in the chapter, ')
   (' what IS important is to see how powerfull the MACRO facility ')
   (' really is and what the macros look like. ',X,1);
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
  ('             ',#1,45,'The MACRO language - Writing NEW COMMANDs')
 /('Extentions may be made to JOL using the facilities provided by')
  ('the MACRO language, which permits the creation of new JOL')
  ('commands.')
 /('A MACRO is a set of instructions that creates JOL instructions')
  ('tailored to the users specifications, and once coded is stored')
  ('in A MACRO library. Whenever a non-standard JOL instruction is')
  ('found, the MACRO library is searched and if the MACRO command is')
  ('located, it is interpreted and the tailored JOL instructions')
  ('are created. The compilation then continues, recommencing at the')
  ('first of the created instructions.')
 /('Facilities are provided to:')
  ('        ',#2,55,'*  execute a MACRO with different parameters')
  ('        ',#3,55,'*  examine, verify and change the parameters')
  ('        ',#4,55,'*  set up default parameters')
  ('        ',#5,55,'*  generate any JOL instruction/command')
  ('        ',#6,55,'*  execute other Macros from within a Macro.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('         ----        MACROS        ----')
  /('Suppose you wanted to be able to delete data sets TEST.FILE1')
   ('and TEST.FILE2 and then list the catalog with a level of TEST.')
   ('If you wanted to be able to do this using one command called')
   ('say, CLEANUP, you could code it this way:-')
  /('             ',#1,35,'CLEANUP: MACRO;')
   ('                ',#2,45,'DELETE TEST.FILE1, TEST.FILE2;')
   ('                ',#3,35,'LISTCAT L(TEST);')
   ('             ',#4,35,'END;')
  /('These instructions must be placed in the JOL.CMDLIB. You can use')
   ('any library utility to do this, such as IEBUPDTE or under TSO or')
   ('TSS. Now whenever the CLEANUP macro is used, the above')
   ('instructions (DELETE and LISTCAT) will be generated and')
   ('executed.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('               ',#1,30,'INCREASING FLEXIBILITY')
  /('Using the Macro Command facilities to generate simple')
   ('instructions such as those on the previous screen, saves coding')
   ('time if you have commands that always do the same work - that is,')
   ('never change or require different data sets or programs and so')
   ('on.')
  /('So that Macro Commands can be used for more than one purpose,')
   ('they must be capable of accepting different input data set names')
   ('or parameters. A Macro Command could contain a record of the')
   ('space requirements for all the commonly used libraries and their')
   ('record formats. Then it would be a simple matter of coding the')
   ('command name and telling it which data sets to reorganise and it')
   ('would be capable of deleting and reallocating the data sets with')
   ('the correct space and record formats. For some libraries, the')
   ('operator should be notified when re-organisation is about to take')
   ('place because he must stop other work running when some critical')
  ('data sets are being worked on. For instance, if the MACRO library')
   ('was being compressed no other job can run until the compress has')
   ('ended.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('Some of the advantages to having a REORG or COMPRESS')
   ('similar to the above would be:-')
  /('  1. Any change to the reorganisation procedures (such as')
   ('     copying libraries to tape for backup in case an error')
   ('     occured) would require only alterations to the Macro and any')
   ('     JOL program that reorganises libraries need not be altered')
   ('     because it would automatically use the new command.')
  /('  2. All space and record format information for commonly used')
   ('     libraries would be contained in the macro for easy')
   ('     reference. Also, one person could then be responsible for')
   ('     updating the information and ensuring that the data sets')
   ('     were compressed correctly.')
  /('For example:    ',#1,40,'REORG LIB SYS2.LINKLIB ;')
   ('                ',#2,40,'REORG LIB=JOL.MACROS ;')
  /('The LIB is the keyword, and any reference to the symbolic')
   ('parameter %%LIB will contain ''SYS2.LINKLIB'' or ''JOL.MACROS''.')
   ('Notice that as with keywords used in other JOL instructions, the')
   ('equal sign (=) is not required.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
   ('Depending on the method used to write a Macro, parameters may be')
   ('keyword oriented or parameters may be positional. For example,')
   ('the REORG macro could be written so that the user need only')
   ('write REORG ''SYS2.LINKLIB''; and the symbolic parameter')
   ('%%LIST(1) would contain ''SYS2.LINKLIB''.')
  /('Another example is that of the SORT Macro. The SORT may be')
   ('written with a number of parameters, some indicating which files')
   ('are to be sorted and others specifing the number and size of the')
   ('work files to be used.')
  /('Some of the ways in which the SORT may be written are:-')
   ('            ',#1,40,'SORT A TO B 3 TAPES FIELDS=(fields) ;')
   ('            ',#2,50,'SORT A || B TO C USING data-set-identifier;')
   ('            ',#3,40,'SORT A TO B 10 DISKS FIELDS (fields); ')
  /('Determining exactly what was coded by the user is greatly')
   ('simplified by using the parameter definitions which are part of')
   ('the MACRO definition.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
   ('             ----    Preparing Macros  ----')
   ('A macro consists of:')
   ('                 ',#1,40,'*  a MACRO proto-type statement')
   ('                 ',#2,40,'*  any JOL instructions, statements')
   ('                    ',#3,40,'commands, or macro instructions')
   ('                 ',#4,40,'*  an "END;" statement,')
  /('The macro-name is the name that is used to invoke the macro.')
   ('Before discussing the format of the parameter-list, we shall')
   ('examine the types of parameters permitted.')
   ('There are basically two types of parameters:')
   ('                    ',#5,30,'keyword and positional.')
  /('',#6,20,'KEYWORD parameters')
   ('         May be coded anywhere in the parameter list and are')
   ('         referenced within the Macro by specifying the keyword')
   ('         name preceded by a percent symbol (%%).');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('               ',#1,25,'POSITIONAL parameters')
  /('         Positional parameters are located, as the name implies,')
   ('         by their relative position within the parameter list of')
   ('         the user provided macro invocation. They are referenced')
   ('         within the macro by the symolic name of %%LIST(n) where')
   ('         n is 1 to n and represents the "nth" parameter in the')
   ('         list.')
  /('         Any parameters specified by the user that are not')
   ('         keyword parameters become positional parameters. The')
   ('         first non-keyword parameter located in the list assumes')
   ('         the value %%LIST(1) and each subsequent non-keyword')
   ('         parameter has a subscript value one greater than the')
   ('         preceding non-keyword parameter.')
  /('EXAMPLES  KEYWORD   ',#2,50,'- IF %%UNIT = ''TAPE'' THEN ... ')
   ('          POSITIONAL',#3,50,'- IF %%LIST(4) = ''TAPE'' THEN ...');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('               ',#1,25,'Keyword parameters')
  /('Keyword parameters are defined in the parameter list of the MACRO')
   ('proto-type statement. By using keyword parameters it is possible')
   ('to determine:')
  /('      ',#2,55,'* if a keyword has been specified by the user')
   ('      ',#3,55,'* the value assigned to the keyword')
   ('      ',#4,55,'* where a keyword was coded in the users statement')
 //('There are three types of Keyword parameters, each of which')
   ('requires a sligthly different definition.')
 //('They are  ',#5,30,'1. Substitution Keywords')
  /('          ',#6,30,'2. Assignment Keywords')
  /('          ',#7,30,'3. Pointer Keywords.') ;
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('               ',#1,30,'1. Substitution Keywords')
 //('In order to determine if a keyword was coded by the user, the ')
   ('definition of the parameter is coded as',#2,10,'%%keyword.')
   ('The value found in the symbolic variable %%keyword is either null')
   (' (no value) if the keyword was not coded by the user, or the')
   ('keyword name if the keyword was coded. For example',#3,6,'%%RENT')
   ('will always contain the value',#4,30,' '''' (null) or ''RENT''.')
   ('This type of keyword is useful where the program to be executed')
   ('requires a parameter list of keywords to, say, determine the')
   ('processing options such as Compiler.')
  /('The ASMFC macro would contain code similar to the following:-')
  /('        ',#5,45,'RUN ASMBLER ''%%RENT,%%TEST,%%LOAD,etc''; ')
  /('where %%RENT,%%TEST,%%LOAD would either contain nulls and or')
   ('the values of RENT, TEST and LOAD if they were specified in the')
   ('macro invocation.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 %#Z='PROD ASSUMED';
 PANEL ('EXAMPLE')
  /('',#1,55,'ANYMAC: MACRO(%%TEST,%%PROD); /* PROTOTYPE STATEMENT */')
   ('   ',#2,55,'IF %%TEST ¬= '''' & %%PROD ¬= '''' THEN')
   ('   ',#3,3,'DO;')
   ('       ',#4,60,'SIGNAL ERROR 3,''TEST AND PROD SPECIFIED-%#Z''; ')
   ('       ',#5,55,'%%TEST=''''; /* CANCEL TEST OPTION  */ ')
   ('   ',#6,4,'END;')
   ('   ',#7,55,'DCL X PROG LIB PROGRAM.LIBRARY')
   ('   ',#8,35,'SYSIN READS FILE1; ')
   ('   ',#9,35,'RUN X ''%%TEST%%PROD'';')
   ('',#A,4,'END;')
  /('To invoke the above Macro the programmer would code :-')
  /('',#B,55,'ANYMAC PROD;    /*  MACRO INVOCATION */ ')
  /('In the example above, assume that the macro ANYMAC is to create')
   ('a program definition and a RUN statement containing a parameter')
   ('list indicating whether the program is to run in TEST or')
   ('PRODuction mode.') ;
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('The IF statement:-')
   ('   ',#1,55,'IF %%TEST ¬= '''' & %%PROD ¬= '''' THEN DO;')
   ('tests if both TEST and PROD have been coded by the user, and if')
   ('so cancels the TEST option with the -',#1,15,'%%TEST=''''; ')
   ('instruction and also by using the SIGNAL ERROR 3 instruction-')
   ('',#4,66,'SIGNAL ERROR 3,''TEST AND PROD SPECIFIED-%#Z''; ')
   ('places the job on the HOLD queue to be released by you (if you')
   ('are using the JOL Command Processor), or the operator. If you')
   ('have specified LET/Submit option to the Command Processor then ')
   ('JOL will seek your advice on submitting the Job.')
   ('You may be asked a question of the type "DO YOU WANT TO SUBMIT')
   ('THE GENERATED JOB?" in which case if you answer YES, then the')
   ('Job is submitted with the PROD option.')
  /('The RUN statement ',#5,35,'RUN X ''%%TEST%%PROD'';')
   ('has a parameter field referring to both %%TEST and %%PROD.')
   ('However, when only one parameter is coded by the user the')
   ('other parameter must be null and thus there is effectively')
   ('only one parameter in the RUN statement.')
  /('After the invocation of the Macro, the resulting RUN statement,')
   ('in the previous example, appears as ',#6,30,'RUN X ''PROD'';');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 %#Z=' PROTOTYPE STATEMENT ';
 PANEL ('               ',#1,30,'2. Assignment Keywords')
   ('To determine the value assigned to a keyword parameter, the ')
   ('definition of the parameter is coded as')
   ('   ',#2,55,'%%keyword={''default''} ')
   ('The value found in the %%keyword symbolic variable will be :-')
  /('      ',#3,55,'* null if no default was specified and the user')
   ('        ',#4,55,'did not code the keyword')
  /('      ',#5,55,'* the default value if a default was specified in')
   ('        ',#6,55,'the proto-type but the user did not code the')
   ('        ',#7,55,'keyword     ')
  /('      ',#8,55,'* the value the user assigned to the keyword when')
   ('        ',#9,55,'he or she used it.')
  /('Example:-')
   ('      ',#A,65,'ANYMAC: MACRO(%%TYPE=,''TEST''); /*%#Z*/')
   ('              ',#B,55,'DCL X PROG LIB PROGRAM.LIBRARY')
   ('              ',#C,35,'SYSIN READS FILE1; ')
   ('              ',#D,35,'RUN X ''%%TYPE'';')
   ('       ',#E,4,'END;');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
  /('To invoke the previous Macro the programmer would code :-')
 //('          ',#1,25,'ANYMAC TYPE=PROD ; ')
  /('This example of ANYMAC achieves the same result as the first')
   ('form of the ANYMAC macro described in the previous form of the')
   ('keyword parameter. The difference is that the user can assign any')
   ('value (PROD in the example) to the keyword or may use the default')
   ('of ''TEST'' by omitting the TYPE keyword in his or her Macro')
   ('invocation.')
  /('Note: If a parenthesised list is assigned to a keyword parameter')
   ('      then the %%keyword would have the list, including the')
 ('      parenthesis, as its value. For example,',#2,20,'TYPE=(1,2,3) ')
   ('      will result in %%TYPE symbolic parameter containing the')
   ('      value (1,2,3).');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('               ',#1,30,'3. Pointer Keywords')
  /('To determine where the keyword was coded in a macro invocation,')
   ('the definition is coded as')
  /('          ',#2,10,'keyword')
  /('Note that there are no percent (%%) or equal (=) symbols in the')
   ('definition. However, the percent symbol is still necessary when')
   ('referencing the keyword in the body of the macro.')
  /('The value associated with this type of keyword is either zero (0)')
   ('if the keyword is not coded by the user, or a number, if the')
   ('keyword was used, which may subsequently be used as the ''n''  ')
   ('value in a positional reference of',#3,15,'%%LIST(n).');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 %#Z='KEYWORD IN COPY MACRO';
 %#Y='GET POSITION OF';
 %#X='VB 7294,7000 TAPE';
 PANEL ('Example of a pointer keyword in a Macro:-')
  /('    ',#1,55,'COPY: MACRO(TO) ; /* PROTOTYPE STATEMENT */')
   ('           ',#2,35,'DCL X PROG LIB PROGRAM.LIBRARY')
   ('           ',#3,25,'A  READS FILE1')
   ('           ',#4,25,'B  WRITES FILE2;')
   ('      ',#5,60,'IF %%TO = 0 THEN STOP ''NO "TO" %#Z '';')
   ('      ',#6,10,'ELSE DO;')
   ('          ',#7,60,'%%SYSPARM1=%%TO-1;    /* %#Y FROM DATA SET */')
   ('          ',#8,60,'%%SYSPARM2=%%TO+1;    /* %#Y TO DATA SET */')
   ('          ',#9,45,'DCL FILE1 DS DSN=''%%LIST(%%SYSPARM1)''; ')
   ('          ',#A,60,'DCL FILE2 DS DSN=''%%LIST(%%SYSPARM2)'' %#X; ')
   ('          ',#B,10,'RUN X;')
   ('      ',#C,10,'END;')
   ('    ',#D,10,'END;')
  /('To invoke the above Macro the programmer would code :-')
  /('',#E,35,'COPY DATA.SET1 TO DATA.SET2;');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
   ('That was a very simple case, but it serves to illustrate the use')
   ('of the keyword. It permits creation of macros that are usually')
   ('more useful such as the SORT macro in which the user may code:-')
  /('              ',#1,50,'SORT A TO B 5 CYLS FIELDS=(fields);')
   ('         OR')
   ('              ',#2,50,'SORT A || B TO C 3 TAPES FIELDS=(fields);')
   ('              ',#3,4,'etc.')
  /('In the previous COPY example, the macro will simply expect a')
   ('cataloged data set as input and creates a variable blocked tape')
   ('file as output using a program called X to copy the data set.')
   ('In a more realistic case this macro would allow the user to')
   ('specify input and output volumes, units and record formats.')
  /('NOTE: when invoking a Macro all equal signs and commas, with the')
   ('      exception of those in parentheses or quotes, are optional,')
   ('      and, if present, are ignored. Thus, the keyword assignment')
   ('      KEYWORD=VALUE and KEYWORD VALUE are identical.') ;
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('               ',#1,25,'Positional parameters.')
   ('Although keyword parameters may be written by the user in any')
   ('desired sequence, macros written using positional parameters')
   ('are often easier to remember and to use than macros using')
   ('keyword parameters exclusively.')
  /('For example, it is easier to remember and write',#2,10,'LIST A;')
   ('than',#3,20,'LIST DATASET=A;')
  /('%%LIST(1) to %%LIST(n) contain all parameters specified by the')
   ('user in a macro call that do not have the corresponding keyword')
   ('parameters in the macro definition.')
   ('Consider the following proto-type statement:-')
  /('          ',#4,30,'MACNAME: MACRO(%%keyword=);')
  /('if a user codes   ',#5,30,'MACNAME KEYWORD=10 NAMEX;')
   ('or                ',#7,30,'MACNAME NAMEX KEYWORD=10;')
  /('then %%KEYWORD would contain 10 and %%LIST(1) would contain')
   ('NAMEX.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('          ',#1,45,'Format of the PROTO-TYPE Parameters List.')
  /('As mentioned previously, all keywords must be specified in the')
   ('macro-prototype parameter list. It is this specification that')
   ('indicates to the compiler that a particular name is a keyword')
   ('parameter. This list may contain all forms of the keyword')
   ('parameter in any sequence separated by a comma.')
  /('                ',#2,45,'Names declared in Macros.')
  /('A MACRO may be considered to be part of the original JOL program,')
   ('and as such may refer to and alter any variable that has been')
   ('previously declared or defined, either in the main JOL program,')
   ('or, if this macro is called by another macro, in the OUTER macro.')
   ('However, any declaration of variables made in the INNER macro are')
   ('not available to an OUTER macro or the MAIN-LINE program unless')
   ('defined with the EXTERNAL attribute.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL ('It is therefore possible to declare and use variables in a')
   ('macro without the names becoming confused with names which may')
   ('have already been used elsewhere because the macro language')
   ('distinguishes between identical names in successive macro calls.')
  /('Consider following examples:-')
  /('          ',#1,20,'SORT A TO B etc;')
   ('          ',#2,30,'SORT C TO D parameters')
  /('The SORT macro may have the following statements:-')
  /('          ',#3,20,'SORT: RUN SORT;')
   ('          ',#4,40,'IF SORT = 20 THEN STOP ''SORT FAILED'';')
  /('If the SORT macro is called more than once, the IF statement')
   ('refers to the correct SORT label each time, because the SORT')
   ('label is an implicit definition of a variable in the MACRO.')
  /('See the example on the next screen.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
   ('EXAMPLE:  ',#1,30,'DCL %%X INIT ''MESSAGE'';')
   ('          ',#2,10,'MACRO1;')
   ('          ',#3,10,'MACRO2;')
  /('if MACRO1 was:-')
   ('          ',#4,20,'MACRO1: MACRO;')
   ('             ',#5,30,'%%X=''MESSAGE REPLACEMENT'';')
   ('          ',#6,30,'END; /* END OF MACRO */ ')
  /('Then after MACRO1 was interpreted, %%X would contain')
   ('          ',#7,30,' ''MESSAGE REPLACEMENT'' ')
  /('if MACRO2 was:-')
   ('          ',#8,20,'MACRO2: MACRO;')
   ('             ',#9,20,'DCL %%X INIT 0; ')
   ('             ',#A,25,'%%X=''MESSAGE 100'';')
   ('          ',#B,10,'END;')
  /('Then, after MACRO1 was interpreted, the %%X declared in the main')
   ('program would still contain ''MESSAGE REPLACEMENT'' because any')
   ('reference to %%X in MACRO2 refers to a different variable.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
 IF %SYSPFK ¬= 3 & %SYSPFK¬=15 THEN DO;
LABEL PAN%NUM;
 PANEL
 //('NOTE.   When using symbolic variables within a macro they should')
   ('        be explicitly declared to ensure that the macro will')
   ('        never erroneously reference a user symbolic variable')
   ('        of the same name.')
 //('In the previous example:-')
   ('     where %%X in MACRO2 was explicitly declared by the code')
  /('             ',#1,20,'DCL %%X INIT 0; ')
  /('     will mean that it will never be erroneously referenced buy')
   ('     the calling program or other macros.');
       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;
          %NUM = %NUM -1;
          REDO PAN%NUM;
       END;
       ELSE %NUM = %NUM + 1;
 END;
        %CHNUM = %CHNUM + 1;
        IF %CHNUM > %MAXCHAP THEN DO;
           PANEL ////('  This was the LAST chapter of this course')
            /('  Press ENTER to get back to main index/menu.',X,1);
           %CHNUM = 1;
           %SYSPFK = 3;
        END;
END; /* OF CAIMACRO MACRO */
