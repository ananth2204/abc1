ADDDSN:MACRO; /* Add Data Set Name to Data Set Data Base */

/*

       Jol Universal Command Language.
       Copyright 1969-1991 CCS-JOL Pty. Ltd.,
                 2/31 Queen St, Melbourne, Australia, 3000.


       A D D D S N    C O M M A N D

       This macro adds a data set name to the data base of data sets.

       It:

          1. Gets details for the data set.

             These details are built using the Jol ADDDSN2
             command.

          2. Writes the details to a data set.

             This data set is added at the end (for the PC version)
             of the base data set.

             It can be sorted with the special procedure if access
             becomes too slow.  It is then Binary Searched.

             The mainframe version uses VSAM.

History:

       Written C. Clarke 26/8/89:  Add Data Set Data Base.

********************************************************************/



 /* Modified by C. V. Clarke, March, 1991.


 */

    DCL %ISVSAM,%vsclust,%vsindex,%vsdata           INIT '';
    dcl %volref                                     init '';
    dcl %work                                       init '';
    dcl %adddsopn init('0') ext;
    dcl %update   init(0);
    dcl %title    init('Add Data Set to Data Set Data Base - V0.0');
    dcl %vsamdef  init '';


        IF %LIST(1)¬='' THEN %dsname=LIST(1);
Label chkds1;
        IF %dsname=''
        then do;
Label getds1;
  PANEL %boxcolor box (ctr %hedcolor '%TITLE')
   //
     (ctr 'Please specify the Data Set Name to add to the data base.')
     ///////
      ('  Enter Data Set Name  ====>',dsname,44,' ')
     ////
     ( hi '         Note:')
      (   '                For VSAM Data and Index Areas, you must ')
      (   '                add .DATA and .INDEX to the Data Set Names;')
      (   '                Jol will merge the information at run time')
      (   '                to create all the necessary IDCAMS control'
                           ' cards.')
    helpline('F3 Exits with No Action. F4 Shows a List of Data Sets')
   ;
            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;
            IF %SYSPFK = 4
            then do;
              showdbf ;
              %dsname ='%showsel';
              redo chkds1;
            end;
            if %dsname='' then do;
  /*          redo getds1; */
              panel reread from dsname
                    'You must enter a DSNAME';
                    redo getds1;
            end;

        end;

      if %syspfk=3 then exit;

/* See if we can read the previous data set by this name.

   Calling the next macro also sets up the symbolic variables
   as EXTERNAL.

*/
        %savedsn='%dsname';           /* Save the name */

        dbffind  ds '%dsname';
        if %zlastcc =0 then %update=1;  /* Set Update Flag */
        if %zlastcc ¬=0
        then
           dbffind  'MODEL=DEFAULT';  /* Get a Default Model then */

        zvolumes=strip(zvolumes);
        if %zretpd='R' | %zretpd=' ' then %zretpd=%zexpdt;
        else %zretpd='Until %zexpdt';

        %volref=substr(zvolumes,1,1);
        If %volref¬='*' then %volref='';
        else do;
             %volref=substr(zvolumes,2);
             %zvolumes='';
        end;


        adddsn2;    /* Get details from Panels */
        if %syspfk=3 then exit;

        %work='  Ds Dsn=%dsname ';;

            if %zrecfm='' & (%zlrecl¬='' | %zblksize¬='')
            then do;
                if %zlrecl  ¬='' then %work=%work||' Lrecl %zlrecl';
                if %zblksize¬='' then %work=%work||' Block %zblksize';
            end;
            else if %zrecfm¬=''
            then %work='%work %zrecfm %zlrecl,%zblksize';
            if %zvolumes¬='' then work='%work Vol=%zvolumes ';
            if %zunit   ¬='' then work='%work Unit=%zunit ';
            if %zfileno ¬='' then work='%work Fileno %zfileno';
            if %zprim   ¬='' | %zsec¬='' | %zdir¬=''
            then do;
                if %zsec  =''  then %zsec=0;
                %work='%work Space %zprim,%zsec';
                if %zdir ¬='' then %work='%work,%zdir';
                if %space ='B' then %work='%work Blks ';
                if %space ='C' then %work='%work Cyls ';
                if %space ='T' then %work='%work Trks ';
                if %space =' ' then %work='%work Trks ';
            end;
            if %zrlse    ='N' then work='%work Norlse';
            if %zcontig  ='Y' then work='%work Contig';
            if %zmaxig   ='Y' then work='%work MXIG';
            if %zalx     ='Y' then work='%work ALX';
            if %zprotect ='Y' then work='%work Protect';
            if %zdsorg  ¬='' then work='%work %zdsorg';
            if %zretpd  ¬=''
            then do;
               if substr(zretpd,1,5)='UNTIL'
               then %work='%work retain %zretpd';
               else %work='%work retain for %zretpd';
            end;
            if %zden    ¬='' then work='%work %zden BPI';
            if %zlabtyp ¬='' then work='%work %zlabtyp';
            if %zkeylen ¬='' then work='%work Keylen %zkeylen';
            if %zrkp    ¬='' then work='%work Keypos %zrkp';

            if '%isvsam'¬='' | '%vsamdef' ¬= ''
            then do;
                %isvsam=' VSAMTXT='' %vsamdef ''';
            end;
            if '%Zmodel'¬=''
            then do;
                %isvsam=' %isvsam MODEL %zmodel ';
            end;
            if '%Zowner'¬=''
            then do;
                %isvsam=' %isvsam OWNER %zowner ';
            end;


            if %update=1                   /*  Updating Flag */
            then dbfdel   '%dsname';
            dbfadd %work %isvsam;
            exit;

/* Following Code only for multiple load module version of Jol. */

            alloc$ f(temp) da('tkn.$$$') new;
            open f(temp) output;
            write f(temp) from(work);
            if '%isvsam' ¬= '' then write file(temp) from(isvsam);
            close f(temp) ;
            dbfdel   '%dsname';
            dbfadd  ;
            dbfclose;   /* Force DBFFIND to reopen the file because
                           it may have been extended */

end  /* ADD DSN Macro */ ;
