catlg: macro(%on =);

/* This macro catalogs data sets on Unix or MS/Dos systems.

   It is only useful for Generation Data Sets currently.
*/

   dcl %member                  init '';
   dcl %litdsn                  init 0;
   dcl %gdgno                   init 3;
   dcl %indsn                   init '';
   dcl %invol                   init '';

   dcl %gdgact,%gdgkeep,%gdglast init '';

   indsn=list(1);
   invol=on;

   if index(indsn,'.') = 0
   &  index(indsn,'(') = 0
   then return;                         /* No work to do */

/* Now check for MVS and Unix style names, and convert if necessary */

   if type(indsn) = 'LIT' then litdsn=1;  /* Check here, because Jol
                                             puts quotes on later ! */

   %i = index(indsn,'(');
   if %i ¬=0
   then do;
       member=substr(indsn, i+1);
       member=substr(member,1,length(member) -1);
       indsn = substr(indsn, 1, i-1);
   end;

   if  litdsn = 0
   then do;
 write 'Not literal Dsn';
       if %invol ¬= '' then
       %indsn='%invol:/%sysuid' || '/'|| indsn;
       else %indsn='/%sysuid' || '/'|| indsn;
   end;

/* Convert .'s to /'s  */

t1:
   %i = index(indsn,'.');
   if %i ¬=0
   then do;
        indsn = substr(indsn, 1, i-1) || '/'
                 || substr(indsn, i+1);
        goto t1;
   end;
  if %member ¬=''
  then do;
       if substr(member,1,1) = '+'
       |  substr(member,1,1) = '-'
       |  type  (member) = 'NUM'
       then do;
          getfirst '%indsn/control.dat';
          if %lastcc ¬=0
          then do;
gdgreset:
              panel (ctr hi 'Catalog Data Set Utility')
                    /////
                    (ctr 'Data Set %indsn')
                   /('      Please Enter Number of Generations to Keep',
                            gdgno,3,'%gdgno')
                    ;
              alloc$ f(control) da('%indsn/control.dat') new;
              open   f(control) output;
              write  f(control) from('NO=%gdgno');
              write  f(control) from('ACTION=DELETE');
              write  f(control) from('CURRENT=0');
              close  f(control);
          end;

          alloc$ f(control) da('%indsn/control.dat') old;
          open   f(control) input;
          read   f(control) into(gdgkeep);
          read   f(control) into(gdgact);
          read   f(control) into(gdglast);

          close  f(control);

          gdgkeep = upper(gdgkeep);
          gdgact  = upper(gdgact );
          gdglast = upper(gdglast);

          if substr(gdgkeep,1,3)   ¬='NO='
          |  substr(gdgact ,1,7)   ¬='ACTION='
          |  substr(gdglast,1,8)   ¬='CURRENT='
          then do;
ask2:
             Panel (ctr hi 'Error: Invalid Control Information')
               /// (ctr    'Invalid Control Information')
                   (ctr    'Found for Generation Data Set')
                 / (flash ctr '%indsn')
               /// ('     Enter Y to Reset  =====> ',gdgact,1,'Y')
               //  (' Control Cards are:')
                /  ('1. %gdgkeep')
                   ('2. %gdgact')
                   ('3. %gdglast')
               helpline ('Press F3 to Exit');
               if %syspfk = 3 then exit;
               if %gdgact = 'Y' then goto gdgreset;
               goto ask2;
               goto setdsn;
          end;
          gdgkeep=substr(gdgkeep,4);
          gdgact =substr(gdgact ,8);
          gdglast=substr(gdglast,9);
          if substr(member,1,1) = '+'
          then member = gdglast + substr(member,2);
          else
          if substr(member,1,1) = '-'
          then member = gdglast - substr(member,2);
/* Must be numeric, eg I.I(7) */
          else
          if member = 0  then
             member = gdglast;
/* Check for wrap around */
          if member > 9999  then member = 0;

          member = right('0000%member',4);     /* Pad to 4 characters */
          member = 'G'||member||'V00';
          write 'GDG';
       end;
       indsn=indsn ||'/'||member;

  end;
setdsn:
  %dsname = indsn;    /* Jol Can't return strings (yet) */
end;
