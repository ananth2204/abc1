copy:macro(%seq,%pds,%po,%is,%isam,%old,to,%exclude=,%e=,%select=,
           %mods,%vsam,
           %catlg=no,
           %s=,%member=,%members=,%m=,%replace,%r,%index=,%oflow=,%shr);

dcl syspop   init '';
dcl indstyp  init '';
dcl outdstyp init '';
dcl typecopy init '';

/* General purpose copy macro.

   This macro will copy a:
   *      Sequential data set,
   *      Partitioned data set,or
   *      Indexed sequential data set,
   *      Vsam data set,
          by invoking IEBGENER,IEBCOPY, IEBISAM or IDCAMS. */

/* Check if no parameters, and if so, display a screen for the User */

    if %list(1) = ''   & %panels ¬= 'OFF'
    then do;
        dcl %work            init '';
        copymenu;
/* Call ourselves reentrantly to do the copy  */

        if %syspfk = 3 | %syspfk =15 then exit;

        if %BUILDJOB ¬= 'YES'
           then copy %work;
        exit;                      /* Better exit now */
    end;

    if %to=0 then stop 'No ''TO'' Data Set Specified';
    if (%select¬='' & (%s¬=''|%exclude¬=''|%e¬=''|%member¬=''|%m¬=''|
        %members¬='')) then stop 'More than 1 Control Stmt Specified';

    if (%s¬='' & (%exclude¬=''|%e¬=''|%member¬=''|%members¬=''|%m¬=''))
       then stop 'More than 1 Control Stmt Specified';

    if (%exclude ¬='' & (%e¬=''|%members¬=''|%member¬=''|%m¬=''))
       then stop 'More than 1 Control Stmt Specified';

    if (%member ¬= '' & (%e¬=''|%members¬=''|%m¬=''))|
       (%members ¬= '' & (%e¬=''|%m¬=''))|
       (%m¬='' & %e¬='') then
       signal error 4,'More than 1 Control Statement Specified';

    if %member='' & %exclude='' & %e='' then
       %member = '%members%m%s%select';

    if %exclude ¬= '' | %e ¬= '' then %exclude = '%exclude%e';
    if (%seq¬='' & (%pds¬=''|%po¬=''|%member¬=''|%exclude¬=''))|
       (%seq¬='' & (%isam¬=''|%is¬=''|%index¬=''|%oflow¬=''))|
       ((%pds¬=''|%po¬=''|%member¬=''|%exclude¬='') &
       (%isam¬=''|%is¬=''|%index¬=''|%oflow¬=''))
       then signal error 4,'More than one type of COPY Specified';

      dcl   %type     init ' WRITES ';
      dcl   %fle2     init '' ;
      dcl   %parm1    init '';
      dcl   %parm2    init '';
      dcl   %tempds   init '';
      dcl   %tempwork init '';
      dcl   printfil  printer nodcb ;
      dcl   dummyin   ds dummy ;

      if %old¬='' then %type=' UPDATES ';
      if %mods¬='' then %type=' MODS ';
      if %shr¬='' then %type=' READS ';
      if %shr¬='' then signal 1,'SHARE was coded for output - Please
 ensure no other Job uses the Data Set';

/* Make the TO keyword optional for Unix/Dos Users */

/* fixif %to = 0 then %to=1; */
      %parm1 = %to -1 ;
      if %parm1 < 1 then
         signal error 4,'''FROM'' data set missing';
      %to = %to +1 ;

/* Try and work out the data set types from the Jol DBF */
/* Check INPUT first */

      tempds ='%list(%parm1)';
      tempwork = index(tempds,'.');            /* Data Set Name ? */

      if tempwork ¬=0
      then do;
         dbffind '%list(%parm1)';

         if %lastcc =0
         then do;
            if %zdsorg='VS' | %zvsamtxt ¬=''
            then indstyp = 'VS'; /* Tell us one of the files is VSAM */
            if %zdsorg='PS'
            then indstyp = 'PS'; /* Tell us one of the files is SEQ  */
            if %zdsorg='IS' | %zdsorg ='ISAM'
            then indstyp = 'IS'; /* Tell us one of the files is ISAM */
            if %zdsorg='PO' | %zdir ¬=''
            then indstyp = 'PO'; /* Tell us one of the files is PO   */
         end;
      end;

/* Check OUTPUT next */

      tempds ='%list(%to)';
      tempwork = index(tempds,'.');            /* Data Set Name ? */

      if tempwork ¬=0
      then do;
         $chkdbf '%list(%to)';         /* Add to data base if nec  */
         dbffind '%list(%to)';

         if %lastcc =0
         then do;
            if %zdsorg='VS' | %zvsamtxt ¬=''
            then outdstyp = 'VS'; /* Tell us one of the files is VSAM */
            if %zdsorg='PS'
            then outdstyp = 'PS'; /* Tell us one of the files is SEQ  */
            if %zdsorg='IS' | %zdsorg ='ISAM'
            then outdstyp = 'IS'; /* Tell us one of the files is ISAM */
            if %zdsorg='PO' | %zdir ¬=''
            then outdstyp = 'PO'; /* Tell us one of the files is PO   */
/*? 'OUTTYPE = %indstyp';*/
         end;
      end;

/* Try and work out what type of copy utility we want.

   1. If any of the files are PO, then use IEBCOPY because it will
      load and unload.  If someone copies a PO to a VSAM files, it
      will fail at execution (we may check for all this later ).
*/

      if   indstyp = 'PO' | outdstyp = 'PO'
      then typecopy= 'PO';

      if indstyp = 'VS' | outdstyp = 'VS'
      then typecopy='VS';

      else if indstyp = '' & outdstyp = ''
      then typecopy   ='SEQ';

      if %typecopy = 'VS' then vsam = 'VSAM';
      if %typecopy = 'PO' then po   = 'PO';
      if %typecopy = 'IS' then is   = 'IS';

    if %seq='' & %pds='' & %po='' & %isam='' & %is=''  & %vsam=''
      & %select='' & %s='' & %member='' & %members='' & %m=''
      & %exclude='' & %e='' & %oflow='' & %index=''
    & (typecopy ='SEQ' | typecopy ='')
      then %seq='SEQ' ;

      if %seq ¬= '' then         /* sequential copy requested */
      do;
         if %parm1 = 2 then      /* more than one 'from' dsid coded */
         do;
            %parm2 = 2;  %fle2 = ' || %list(%parm2) ';  %parm1 = 1;
         end;
         iebgener: dcl iebgener prog
                   sysut1   reads  %list(%parm1) %fle2
                   sysut2   %type  %list(%to)
                   sysin    reads  dummyin
                   sysprint writes printfil ;
         run iebgener ;
         if %catlg='YES' then catlg %list(%to);
         exit;
      end;

    if %pds ¬= '' | %po ¬= '' | %member ¬= '' | %exclude ¬= '' then
    do;     /* iebcopy requested */
        if %parm1 = 2 then  /* more than one 'from' dsid specified */
        do;
           %parm2=2;%parm1=1; %fle2 = ' sysut5 reads %list(%parm2) ';
        end;
        if %member ¬= '' then
            %select = ' S M=';
        if %exclude ¬= '' then
            %select = ' E M=';
        IF %R='R' | %REPLACE='REPLACE' & %PARM2 = 2 THEN
          %COPYSTMT=' COPY OUTDD=SYSUT2,INDD=((SYSUT1,R),(SYSUT5,R)) ';
        IF %R='R' | %REPLACE='REPLACE' & %PARM2 ¬= 2 THEN
          %COPYSTMT = ' COPY OUTDD=SYSUT2,INDD=((SYSUT1,R)) ';
        if %copystmt = '' & %parm2 = 2 then
          %COPYSTMT = ' COPY OUTDD=SYSUT2,INDD=SYSUT1,SYSUT5 ';
        if %copystmt = '' & %parm2 ¬= 2 then
          %COPYSTMT = ' COPY OUTDD=SYSUT2,INDD=SYSUT1 ';
        dcl work1  ds sysda space 2,1 cyls nodcb  ;
        dcl work2  ds sysda space 2,1 cyls nodcb  ;
        dcl input  * replace ;
  %copystmt
  %select%exclude%member
eof;
        iebcopy: dcl iebcopy prog
                 sysprint writes printfil
                 sysut1  reads  %list(%parm1)
                 sysut2  %type  %list(%to)
                 sysut3  writes work1
                 sysut4  writes work2
                 %fle2
                 sysin   reads  input ;
       run iebcopy ;
   end;
    if %vsam¬= '' then
    do;     /* idcams  requested */
        if %old =''
        &  %mods=''
        &  %shr =''
        &  %lastcc = 0               /* Got it from the DBF */
        &  %outdstyp = 'VS'
        then do;
             vsamcrea;
             %type = ' READS ';
        end;
        %copyin='%list(%parm1)';
        %copyout='%list(%to)';
        %copytin=index(copyin,'.');
        if %copytin¬=0 then
             dcl copyin ds %copyin vsam nocat;
        else dcl copyin ds nocat vsam like %copyin;
        %copytin=index(copyout,'.');
        if %copytin¬=0 then
             dcl copyout ds %copyout vsam nocat;
        else dcl copyout ds nocat vsam like %copyout;
        dcl input  *  ;
  VERIFY FILE(INFILE)
  VERIFY FILE(OUTFILE)
  REPRO INFILE(INFILE) OUTFILE(OUTFILE) REUSE
EOF;
        idcams : dcl idcams  prog
                 sysprint writes printfil
                 infile  reads  copyin
                 outfile %type  copyout
                 sysin   reads  input ;
        run idcams  ;
   end;
   if %isam ¬= '' | %is ¬= '' |%index ¬= '' | %oflow ¬= '' then
   do;
      if %index ¬= '' then %index = ' %index || ' ;
      if %oflow ¬= '' then %oflow = ' || %oflow ' ;
      iebisam: dcl iebisam prog
               sysprint writes printfil
               sysut1   reads  %list(%parm1)
               sysut2   %type  %index %list(%to) %oflow ;
      run iebisam parm 'load';
   end;
   $chkdbf %list(%to);        /* Check if in Data Base */
   if %catlg='YES' then catlg %list(%to);
   end   /*copy command  */ ;
