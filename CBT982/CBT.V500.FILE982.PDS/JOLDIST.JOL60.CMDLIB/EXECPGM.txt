   EXECPGM:MACRO(
          %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */
          %PARM=,
           SORT,CYLS,DISKS,TAPES);

/**********************************************************************

       Jol Universal Command Language.
       Copyright 1969-1989 CCS-JOL Pty. Ltd.,
                 2/31 Queen St, Melbourne, Australia, 3000.


       E X E C P G M     C O M M A N D

       This macro executes a program.

       Format:

          execpgm sysprint > printer
                  sysin    < cntl
                  sysut1   < input.master
                  sysut2   > output.master
                  sort 5 cyls of 10 disks
                  ;

History:

       Written     C. Clarke 22/2/91:  Create Macro.

       Last Update C. Clarke 20/3/91:  Added Sort work Areas

**********************************************************************/


    DCL %F1,%F2,%F3,%F4,%F5,%F6,%F7,%F8,%F9,%F10   /* DDNAME List    */
        %F11,%F12,%F13,%F14,%F15,%F16,%F17,%F18,%F19,%F20
        %F21,%F22,%F23,%F24,%F25  INIT '';
    DCL %I1,%I2,%I3,%I4,%I5,%I6,%I7,%I8,%I9,%I10   /* Recfm  List    */
        %I11,%I12,%I13,%I14,%I15,%I16,%I17,%I18,%I19,%I20
        %I21,%I22,%I23,%I24,%I25  INIT '';
    dcl %SORTNUM  init '';
    dcl %SORTSIZE init '';
    dcl %tmp,%tmpdd,%tmpfile,%tmpact  init '';
    dcl %work  init '';
    dcl %work1 init '';
    dcl %work2 init '';
    dcl %syswork  init '';
    dcl %syswork2 init '';
    DCL %ERROR,%PGMNAME                      INIT '';
    dcl %title INIT 'Jol Execute Program Screen';

    DCL %NOCYLS         INIT 0;
    DCL %NODISKS        INIT 0;
    DCL %NOTAPES        INIT 0;

        IF %CYLS¬=0
        then do;
             %NOCYLS=%LIST(%CYLS-1);                 /* USER # CYLS */
             set %LIST(%CYLS-1)='';
             set %LIST(%CYLS)='';
        end;
        IF %DISKS¬=0
        then do;
             %NODISKS=%LIST(%DISKS-1);              /* USER # DISKS */
             set %LIST(%DISKS-1)='';
             set %LIST(%DISKS)='';
        end;
        IF %TAPES¬=0
        THEN DO;
            %NOTAPES=%LIST(%TAPES-1); /* USER # TAPES */
            set %LIST(%TAPES)='';
            set %LIST(%TAPES-1)='';
            SIGNAL ERROR 3,
            'Tape Sort Work Areas not Supported.';
            %NOTAPES=0;
        END;
        IF  %NOTAPES¬=0 & %NODISKS¬=0
        THEN DO;
            SIGNAL ERROR 3,
            'Tape and Disks Specified:-Tapes Ignored';
            %NOTAPES=0;
        END;
        if %nocyls > 0 then %sortnum=%nocyls;
        %sortsize=%nocyls;


    dcl %runprogs  init('');

        IF %LIST(1)¬='' THEN %PGMNAME='%LIST(1)';
        IF %PGMNAME=''
        then do;
           if %panels='OFF'
           then do;
              signal error 3,'No Program Name Specified for EXEC';
              exit;
           end;
pan2:
  PANEL %boxcolor box (ctr %hedcolor '%TITLE')
   //
      (ctr 'You must specify the name of the program to run.')
      //
      /////
      ('           Enter Program to Execute ====>',pgmname,8,'%pgmname')
/*
 helpline ('Press F4 to View Program Names from your INClude List')
*/
   ;
/*          IF SYSPFK = 4
            then do;
               showdsn '*.pgm';
               if %lastcc¬=0
               then do;
                   panel %boxcolor box
                    ////////// (ctr hi 'File Not Found')
                               (ctr hi 'or None Selected');
                   %lastcc=0;
                   goto pan2;
               end;
               pgmname= sysdsn;
               if index(pgmname,'.') ¬=0
               then pgmname=substr(pgmname,1, index(pgmname,'.') -1);

               redo pan2;
            end;
            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;
            %pgmname='%pgmname         ';
            %runprogs=runprogs||SUBSTR(pgmname,1,8);
*/
        END;


/* Now loop around building up a declare statement */

       %i=1;
       %j=2;

 /* This next piece of code gets the value of the 'arrays'.   */
label check1a;

       tmpdd='%List(%j)';                  /* Get DDname */
       tmpact='';

       tmp='%List(%j+1)';                  /* Get operator */
       tmp=upper(tmp);
       if %tmp='MAY'
       then do;
           j=j+1;
           tmp='%List(%j+1)';              /* Get operator */
           tmpact=' MAY ';
       end;

       if %tmp='>'       then tmpact='%tmpact WRITES  ';
       else if %tmp='<'  then tmpact='%tmpact READS   ';
       else if %tmp='='  then tmpact='%tmpact UPDATES ';
       else if %tmp='>>' then tmpact='%tmpact MODS    ';
       if tmpact=''
       then do;
            if tmp='WRITES'  | tmp='WRITE'
            |  tmp='READS'   | tmp='READ'
            |  tmp='UPDATES' | tmp='UPDATE'
            |  tmp='MODS'    | tmp='MOD'
            then tmpact='%tmpact %tmp ';
            else do;
                signal error 3,'EXECPGM:Invalid Operator ''%tmp''';
                exit;
            end;
       end;

       tempfile='%List(%j+2)';            /* Get Filename/Dsname */

       j=j+3;

label chk_con;

       if %list(%j)¬='||'
       then do;
          seta ='F%i=''%tmpdd %tmpact ''';/* Store DDname */
          set %SETA;
          seta ='I%i=''%tempfile ''';     /* Store Filename */
          set %SETA;
          i=i+1;
          if %list(%j) = ''               /* Got to end ? */
          then goto skippan3;
          redo check1a;
       end;

       tempfile='%tempfile || %List(%j+1)'; /* Get Filename */
       j=j+2;
       redo chk_con;


skippan3:

/* This next section of code calls CHECKDS to do the following:

     1. If the name typed in is a data set name (x.y) nothing is done.

     2. For DSIDs, it includes the data set definition from the data
        set data base.

     3. If the data set is a VSAM data set, it call CREATEVS to
        allocate the data set, and set the disposition to UPDATES
        so that Jol won't try to reallocate the data set.
*/

 DCL %SYSVSAM1  INIT('') EXT; /* KEEPS LIST OF VSAM DATA SETS in JOB */
 DCL %SYSVSAM2  INIT('') EXT; /* As above...                         */

     %i=1;

 /* This next piece of code gets the value of the 'arrays'.   */
label check4;
     %setx='F'||'%i';                   /* get F(i) */
     %seta='SET  tempdd=''%%%setx''';
     %SETA;
     %setx='I'||'%i';                   /* Get i(i)  */
     %seta='SET  tempdsid=''%%%setx''';
     %SETA;

     if %tempdd¬=''                     /* Is there a DDNAME ? */
     then do;                           /* Yes ...             */

 /* Check if the parameter is a DSID or a DATA SET */

        %syswork=index(tempdsid,'.');   /* Check if a DSNAME   */
        if %syswork=0                   /* Here is a DSID or Prn */
        then do;
            %syswork=index(tempdsid,' '); /* Find a blank          */
            %work=substr('%tempdsid',1,%syswork);
            if %work='SYSOUT'
            | %work='PRINTER'
            then do;
                %work=substr('%tempdsid',%syswork);
                dcl p%i printer %work;
                set i%i='p%i ';
                %i=%i+1;
                redo check4;
            end;
        end;
        else do;                        /* DATASET here        */

            %syswork=index(tempdd,' WRITE');
            %syswork2=index(tempdd,' MOD');
            if %syswork¬=0              /* Write Data Set here */
            |  %syswork2¬=0             /* Mod   Data Set here */
            then do;                    /* Check if it is VSAM */
refind:
               dbffind  '%tempdsid';    /* Get data set details*/

               if %lastcc¬=0
               then do;

notfnd:
                   %syspfk=0;
                   $chkdbf '%tempdsid';
                      if %syspfk¬=0 & %syspfk¬=3
                      then goto notfnd;
               end;

               if %zvsamtxt ¬= ''
               &  %buildjob ¬= 'YES'
               then do;
                    vsamcrea %tempdsid;
                    %setx='F'||'%i';            /* get F(i) */
                    %seta='SET  work=''%%%setx''';
                    %SETA;
                    %work=substr(work,1,index(work,' '));
                    set f%i='%work Updates ';
               end;
            end;
        end;
        %i=%i+1;
        redo check4;
     end;

     if %BUILDJOB ¬= 'YES'
     then do;
        if %system = 'SHELL'
        then do;
            run %PGMNAME /* PROG %LOAD */
                %I1  %I2   %I3  %I4   %I5
                %I6  %I7   %I8  %I9   %I10
                %I11 %I12  %I13 %I14  %I15
                %I16 %I17  %I18 %I19  %I20
                %I21 %I22  %I23 %I24  %I25
             ;
            exit;
        end;

        DCL %SRTWRK, %SRTWRK2 INIT '';
        dcl %SRTUNIT init ' Unit=SYSDA ';
        IF %sortnum¬=''
        then do;
            %SRTWRK = 'SORTLIB READS SYS1.SORTLIB '
                    || 'SYSOUT  WRITES SORTPRNT '
                    || 'SYSPRINT WRITES SORTPRNT '
                    || 'SORTMSG WRITES SORTPRNT  ';
            %SRTWRK='%SRTWRK SORTWK01 WRITES SORTWK01 ';
            %SRTWRK='%SRTWRK SORTWK02 WRITES SORTWK02 ';
            %SRTWRK='%SRTWRK SORTWK03 WRITES SORTWK03 ';
            IF %sortnum>3 THEN
               %SRTWRK2=' SORTWK04 WRITES SORTWK04';
            IF %sortnum>4 THEN
               %SRTWRK2=' %SRTWRK2 SORTWK05 WRITES SORTWK05';
            IF %sortnum>5 THEN
               %SRTWRK2=' %SRTWRK2 SORTWK06 WRITES SORTWK06';
            IF %sortnum>6 THEN
               %SRTWRK2=' %SRTWRK2 SORTWK07 WRITES SORTWK07';
            IF %sortnum>7 THEN
               %SRTWRK2=' %SRTWRK2 SORTWK08 WRITES SORTWK08';
            IF %sortnum>8 THEN
               %SRTWRK2=' %SRTWRK2 SORTWK09 WRITES SORTWK09';
            DCL SORTPRNT PRINTER NODCB ;
            DCL SORTWK01 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;
            DCL SORTWK02 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;
            DCL SORTWK03 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;
            DCL SORTWK04 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;
            DCL SORTWK05 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;
            DCL SORTWK06 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;
            DCL SORTWK07 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;
            DCL SORTWK08 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;
            DCL SORTWK09 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;
        end;
        DCL %PGMNAME PROG %LOAD
            %F1  %I1   %F2  %I2   %F3  %I3   %F4  %I4   %F5  %I5
            %F6  %I6   %F7  %I7   %F8  %I8   %F9  %I9   %F10 %I10
            %F11 %I11  %F12 %I12  %F13 %I13  %F14 %I14  %F15 %I15
            %F16 %I16  %F17 %I17  %F18 %I18  %F19 %I19  %F20 %I20
            %F21 %I21  %F22 %I22  %F23 %I23  %F24 %I24  %F25 %I25
            %SRTWRK %SRTWRK2
         ;

         IF %PARM=''  THEN;ELSE %PARM='PARM=''%PARM''';
         IF %ERROR=1  THEN  STOP 'Program Will Not Be Executed';
         ELSE
%SYSLABEL:
           RUN %PGMNAME %PARM /* %OPT1 %OPT2 %OPT3 %OPT4 %OPT5*/;

         exit;                   /* quit the macro */

     end;
     if %BUILDJOB = 'YES'
     then do;

          if %THISSTEP ¬='' then
          BLD04P                  '%thisstep:';
          BLD04P                  '   ExecPgm  %PGMNAME ';
          IF %Parm='' THEN
                      BLD04P      '         Load=%LOAD ';
          ELSE DO;
                      BLD04P      '         Load=%LOAD ';
                      BLD04P      '         Parm=(''%PARM '') ';
          END;
   /* Do the files */

          if %i1 ¬='' then BLD04P '        %f1  %i1';
          if %i2 ¬='' then BLD04P '        %f2  %i2';
          if %i3 ¬='' then BLD04P '        %f3  %i3';
          if %i4 ¬='' then BLD04P '        %f4  %i4';
          if %i5 ¬='' then BLD04P '        %f5  %i5';
          if %i6 ¬='' then BLD04P '        %f6  %i6';
          if %i7 ¬='' then BLD04P '        %f7  %i7';
          if %i8 ¬='' then BLD04P '        %f8  %i8';
          if %i9 ¬='' then BLD04P '        %f9  %i9';
          if %i10¬='' then BLD04P '        %f10 %i10';
          if %i11¬='' then BLD04P '        %f11 %i11';
          if %i12¬='' then BLD04P '        %f12 %i12';
          if %i13¬='' then BLD04P '        %f13 %i13';
          if %i14¬='' then BLD04P '        %f14 %i14';
          if %i15¬='' then BLD04P '        %f15 %i15';
          if %i16¬='' then BLD04P '        %f16 %i16';
          if %i17¬='' then BLD04P '        %f17 %i17';
          if %i18¬='' then BLD04P '        %f18 %i18';
          if %i19¬='' then BLD04P '        %f19 %i19';
          if %i20¬='' then BLD04P '        %f20 %i20';
          if %i21¬='' then BLD04P '        %f21 %i21';
          if %i22¬='' then BLD04P '        %f22 %i22';
          if %i23¬='' then BLD04P '        %f23 %i23';
          if %i24¬='' then BLD04P '        %f24 %i24';
          if %i25¬='' then BLD04P '        %f25 %i25';
          BLD04P '         ;';

     end;
  END;
