 HELPMACR : MACRO;
 END;
 %MACR = 9;
 LABEL MACSC01;
 IF %SYSPFK = 9 THEN %MACR = 9;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
          /(ctr 'Writing Jol Macros - Screen Number 1')
 /  ('  The macro language provides a means of adding new instructions')
    ('  to the language quickly and easily.')
 /  ('  A macro is a set of instructions that creates jol instructions')
    ('  tailored to the users specifications, and once coded it is')
    ('  stored in a macro library. Whenever a non-standard instruction')
    ('  is found, the macro library is searched and if the macro is')
    ('  located, it is interpreted and the tailored jol instructions')
    ('  are created. The compilation then continues recommencing at the'
    ('  first of the created instructions. facilities are provided to :-
 /
 /(hi'         Execute a command with different parameters')
  (hi'         Examine, verify and change the parameters')
  (hi'         Set up default parameters')
  (hi'         Generate any jol (or other Language) instruction')
 helpline ('Press PF3 to Exit from Help or Enter to display');
 IF %SYSPFK ¬= 3 THEN DO;
 LABEL MACSC02;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
 /('  Macros are easily written by coding a macro prototype statement')
  ('  followedby a series of jol statements and terminating with an END'
 /('  THE MACRO PROTOTYPE STATEMENT.')
 /('  The simplest form of the macro prototype statement is :-')
 /(hi'       macro-name : macro;')
 /('  The macro-name is the name by which we call the macro, and it')
  ('  must be the same as the member name under which it is stored')
  ('  on a macro library (up to 8 characters). You can store macros in')
  ('  JOL50.CMDLIB, on your own jol data set (SYSUID.JOL) or on any jol'
  ('  library which is concatenated to JOL50.CMDLIB.')
 /('  Let us say we want a macro to compress two data sets :-')
 /(hi'       packup : macro;')
  (hi'           compress %sysuid.cobol,%sysuid.pli;')
  (hi'       end;')
 helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')
 ;
 END;
 IF %SYSPFK ¬= 3 THEN DO;
     IF %SYSPFK = 7 THEN DO;
     %SYSPFK = 0;
 REDO MACSC01;
     END;
 LABEL MACSC03;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
          /(ctr 'Writing Jol Macros - Screen Number 3')
 /(hi'       packup : macro;')
  (hi'           compress %sysuid.cobol,%sysuid.pli;')
  (hi'       end;')
 ('  PACKUP is the name we have assigned to this macro, and in the body'
 ('  of the macro we are calling another macro (COMPRESS).')
/('  In order to get more benefit out of a macro, we need to be able to'
 ('  pass parameters to the macro and set up defaults to be used.')
/('  There are 4 types of parameters that may be used in a macro :-')
 (hi'       ASSIGNMENT KEYWORDS')
 (hi'       SUBSTITUTION KEYWORDS')
 (hi'       POSITIONAL PARAMETERS')
 (hi'       POSITIONAL KEYWORDS')
/('  These are coded as part of the macro prototype statement')
 helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')
 ;
 END;
 IF %SYSPFK ¬= 3 THEN DO;
     IF %SYSPFK = 7 THEN DO;
     %SYSPFK = 0;
 REDO MACSC02;
     END;
 LABEL MACSC04;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
          /(ctr 'Writing Jol Macros - Screen Number 4')
 /('  And up to 100 may be coded in any order.  For Example:-')
/(hi'       MACRO-NAME : MACRO (%%ASSIGNMENT-KEYWORD = DEFAULT,')
 (hi'                           %%SUBSTITUTION-KEYWORD,')
 (hi'                            POSITIONAL-KEYWORD;')
/('  Positional parameters are those parameters left in the calling')
 ('  statement after all other parameters have been resolved.')
/('  ASSIGNMENT KEYWORDS. ')
/('  Assignment keywords values are changed from the default whenever')
 ('  the calling statement contains the keyword followed by a value.')
 ('  if the keyword is not coded the default value is taken eg -')
 (hi'       $JOB : MACRO (%%MSGCLASS = X);')
 (hi'             JOLJOB : JOB CLASS = A MSGCLASS = %%MSGCLASS;')
 (hi'       END;')
 helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')
 ;
 END;
 IF %SYSPFK ¬= 3 THEN DO;
     IF %SYSPFK = 7 THEN DO;
     %SYSPFK = 0;
 REDO MACSC03;
     END;
 LABEL MACSC05;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
          /(ctr 'Writing Jol Macros - Screen Number 5')
 /(  '  The calling statement changing MSGCLASS would be :-')
/(hi '       $JOB MSGCLASS = A;')
 /(  '  Using the default value :-')
/(hi '      $JOB;')
/('  Once an assignment keyword appears in a macro prototype statement')
 ('  it is considered to be a symbolic parameter within the macro.')
/('  If you wish to pass it back to the main program, you must declare')
 ('  a symbolic variable as external, then set it to the value of the ')
 ('  keyword.')
 helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')
 ;
 END;
 IF %SYSPFK ¬= 3 THEN DO;
     IF %SYSPFK = 7 THEN DO;
     %SYSPFK = 0;
 REDO MACSC04;
     END;
 LABEL MACSC06;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
/('  SUBSTITUTION KEYWORDS')
/('  A substitution keyword is used whenever it is necessary to ')
 ('  determine if a particular value was coded on the calling')
 ('  statement the value of a substitution keyword can only be the name'
 ('  of the keyword or null. Substitution keywords are coded in the ')
 ('  macro prototype statement whenever we wish to use particular ')
 ('  parameters on the calling statement. For example:-')
/(hi'       $JOB : MACRO (%%MSGCLASS = X, %%NPJCL);')
 (hi'           JOLJOB : JOB CLASS = A MSGCLASS = %%MSGCLASS %%NPJCL;')
 (hi'       END;')
/('  If we wish to have no JCL printed on our output we could now code')
/(hi'       $JOB NPJCL; ')
/('  The keyword %%NPJCL would now contain NPJCL and this would be ')
 ('  substituted in the statement.')
 helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')
 ;
 END;
 IF %SYSPFK ¬= 3 THEN DO;
     IF %SYSPFK = 7 THEN DO;
     %SYSPFK = 0;
 REDO MACSC05;
     END;
 LABEL MACSC07;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
          /(ctr 'Writing Jol Macros - Screen Number 2')
/('  POSITIONAL PARAMETERS')
/('  Although Keyword parameters may be written by the user in any ')
 ('  desired sequence, macros written to use positional parameters are')
 ('  often easier to remember and use than macros using keyword ')
 ('  parameters exclusively. For example it is easier to remember and')
 ('  write :-' hi 'List %sysuid.data;')
 ('  than  :-' hi 'List DATASET=freds.data;')
/('  Parameters not coded on the macro prototype statement, but on')
 ('  the call to the macro are said to be positional parameters and are'
 ('  placed in symbolic variables according to their position in the ')
 ('  call after all keyword parameters have been removed. The symbolic')
 ('  parameters are called %%LIST(1) thru %%LIST(n) or %%LIST0001 thru')
 ('  %%LISTnnnn depending on your preference.')
 helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')
 ;
 END;
 IF %SYSPFK ¬= 3 THEN DO;
     IF %SYSPFK = 7 THEN DO;
     %SYSPFK = 0;
 REDO MACSC06;
     END;
 LABEL MACSC08;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
          /(ctr 'Writing Jol Macros - Screen Number 2')
/('  In the first example %%LIST(1) would contain %SYSUID.DATA.')
/('  POSITIONAL KEYWORDS OR POINTER KEYWORDS')
 ('  A pointer keyword allows us to determine where it was coded in a')
 ('  calling statement. This is coded in the macro prototype statement')
 ('  as KEYWORD. Note no %% signs or = are used. When a pointer keyword'
 ('  is used in the calling statement the keyword is inserted into a ')
 ('  %%LIST symbolic and the number of %%LIST statement is inserted in')
 ('  a symbolic with the same name as the pointer keyword. eg:-')
/(hi'       COPY JOL.DATA TO %SYSUID.DATA; ')
 helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')
 ;
 END;
 IF %SYSPFK ¬= 3 THEN DO;
     IF %SYSPFK = 7 THEN DO;
     %SYSPFK = 0;
 REDO MACSC07;
     END;
 LABEL MACSC09;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
          /(ctr 'Writing Jol Macros - Screen Number 2')
 /('  If our macro prototype statement is coded as follows %%LIST(1) ')
  ('  would contain JOL.DATA. %%LIST(2) would contain the word (TO) and'
  ('  %%LIST(3) would contain %SYSUID.DATA.')
 /(hi'       COPY : MACRO (TO); ')
 /('  %%TO would contain the number 2')
 /('  A macro may be considered to be part of the original jol program,'
  ('  and as such may refer to or alter any variable that has been ')
  ('  previously used, either in the main jol program, or, if this macro
  ('  is called from a previous macro, in the outer macro. ')
 helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')
 ;
 END;
 IF %SYSPFK ¬= 3 THEN DO;
     IF %SYSPFK = 7 THEN DO;
     %SYSPFK = 0;
 REDO MACSC08;
     END;
 PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')
          /(ctr 'Writing Jol Macros - Screen Number 2')
/('  However any variable defined in an inner macro cannot be used in')
 ('  an outer macro or the main jol program unless it has been declared'
 ('  with an ext parameter. eg:-')
/(hi'       DCL %%X INIT 0 EXT;  ')
/('  A macro can use any jol code this means that the macro can call any
 ('  other macro. however if you are nesting macros, you can only'
 ('  nest to a level of 12. ')
 helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')
 ;
 END;
     IF %SYSPFK = 7 THEN DO;
     %SYSPFK = 0;
 REDO MACSC09;
     END;
 IF %MACR = 9 THEN DO;
 %SYSPFK = 0;
 HELP1;
 END;
