ADDMODEL:MACRO; /* Add a Model to Data Set Data Base */

/*

       Jol Universal Command Language.
       Copyright 1969-1989 CCS-JOL Pty. Ltd.,
                 2/31 Queen St, Melbourne, Australia, 3000.


       A D D M O D E L    C O M M A N D

       This macro adds a model to the data base of data sets.

       It:
          1. Gets details for the model.

             These details are built using the Jol ADDDSN2
             command.

          2. Writes the details to a data set.

             This data set is added at the end (for the PC version)
             of the base data set.

             It can be sorted with the special procedure if access
             becomes too slow.  It is then Binary Searched.

             The mainframe version uses VSAM.

History:

       Written C. Clarke 26/11/90:  Add Model to Data Base.

********************************************************************/



    DCL %ISVSAM,%vsclust,%vsindex,%vsdata           INIT '';
    dcl %volref                                     init '';
    dcl %work                                       init '';
    dcl %adddsopn init('0') ext;
    dcl %update   init(0);
    dcl %title    init('Add Model to Data Set Data Base - V0.0');
    dcl %vsamdef  init '';


        IF %LIST(1)¬='' THEN %model=LIST(1);
Label chkds1;
        IF %model=''
        then do;
Label getds1;
  PANEL %boxcolor box (ctr %hedcolor '%TITLE')
   //
     (ctr 'Please specify the Model Name to add to the data base.')
     ///////
      ('  Enter Model Name  ====>',model,12,' ')
     ////
     ( hi '         Note:')
      (   '                For VSAM Data and Index Areas, you must ')
      (   '                add .DATA and .INDEX to the Data Set Names;')
      (   '                Jol will merge the information at run time')
      (   '                to create all the necessary IDCAMS control'
                           ' cards.')
    helpline('F3 Exits with No Action. F4 Shows a List of Models')
   ;
            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;
            IF %SYSPFK = 4
            then do;
              showdbf  level('model=');
              %model =substr('%showsel',6);
              redo chkds1;
            end;
            if %model='' then do;
  /*          redo getds1; */
              panel reread from model
                    'You must enter a Model Name';
                    redo getds1;
            end;

        end;

      if %syspfk=3 then exit;

/* See if we can read the previous data set by this name.

   Calling the next macro also sets up the symbolic variables
   as EXTERNAL.

*/
        %savedsn='%model';           /* Save the name */

        %dsname='MODEL=%model';
        dbffind  '%dsname';
        if %lastcc =0 then %update=1;  /* Set Update Flag */

  if %zretpd='R' then %zretpd=%zexpdt;
  else %zretpd='Until %zexpdt';

        %volref=substr(zvolumes,1,1);
        If %volref¬='*' then %volref='';
        else do;
             %volref=substr(zvolumes,2);
             %zvolumes='';
        end;


        adddsn2;    /* Get details from Panels */

  /*    if %isvsam¬=''
        then %work='DclVsam %dsid ds %dsn ';
        else %work='Dcl     %DSID ds %DSN '; */

/*      %work='Dcl     DSDB  Ds Dsn=%dsname ';; */
/*      %work=' DSDB  Ds ''%dsname'' ';; */
        %work='       Ds ''%dsname'' ';

            if %zrecfm='' & (%zlrecl¬='' | %zblksize¬='')
            then do;
                if %zlrecl ¬='' then %work=%work||' Lrecl %zlrecl';
                if %zblksize¬='' then %work=%work||' Block %zblksize';
            end;
            else if %zRECFM¬=''
            then %work='%work %zrecfm %zlrecl,%zblksize';
            if %zvolumes¬='' then work='%work Vol=%zvolumes ';
            if %zunit   ¬='' then work='%work Unit=%zunit ';
            if %zfileno ¬='' then work='%work Fileno %zfileno';
            if %zprim¬='' | %zsec¬='' | %zdir¬=''
            then do;
                if %zsec  =''  then %zsec=0;
                %work='%work Space %zprim,%zsec';
                if %zdir ¬='' then %work='%work,%zdir';
                if %space ='B' then %work='%work Blks ';
                if %space ='C' then %work='%work Cyls ';
                if %space ='T' then %work='%work Trks ';
                if %space =' ' then %work='%work Trks ';
            end;
            if %zrlse    ='N' then work='%work Norlse';
            if %zcontig  ='Y' then work='%work Contig';
            if %zmaxig   ='Y' then work='%work MXIG';
            if %zalx     ='Y' then work='%work ALX';
            if %zprotect ='Y' then work='%work Protect';
            if %zdsorg  ¬='' then work='%work %zdsorg';
            if %zretpd  ¬=''
            then do;
               if substr(zretpd,1,5)='UNTIL'
               then %work='%work retain %zretpd';
               else %work='%work retain for %zretpd';
            end;
            if %zden    ¬='' then work='%work %zden BPI';
            if %zlabtyp ¬='' then work='%work %zlabtyp';
            if %zkeylen ¬='' then work='%work Keylen %zkeylen';
            if %zrkp    ¬='' then work='%work Keypos %zrkp';

            if '%isvsam'¬='' | '%vsamdef' ¬= ''
            then do;
                %isvsam=' VSAMTXT '' %vsamdef ''';
            end;
            if '%Zmodel'¬=''
            then do;
                %isvsam=' %isvsam MODEL %zmodel ';
            end;

            if %update=1                   /*  Updating Flag */
            then dbfdel   '%dsname';
            dbfadd %work %isvsam;
            exit;

/* Following Code only for multiple load module version of Jol. */

            alloc f(temp) da('tkn.$$$') new;
            open f(temp) output;
            write f(temp) from(work);
            if '%isvsam' ¬= '' then write file(temp) from(isvsam);
            close f(temp) ;
            dbfadd;
            dbfclose;   /* Force DBFFIND to reopen the file because
                           it may have been extended */


      /*    if %update¬=0 then dbfdel dsdb;   /* delete the old one */
      /*    dbfadd   dsdb  %isvsam; */
      /*  end; */
/* jolopt npm;*/
end  /* ADD DSN Macro */ ;
